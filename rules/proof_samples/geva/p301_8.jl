Assumptions:
A, B, C, D, E: Point
distinct(A, B, C, D, E)
not_collinear(A, B, C)
between(B, D, C)
between(D, C, E)
angle(C, A, D) == angle(D, A, B) mod 360

Embedding:
E := {"x": "0.99633773129263014656231689514243043959140777587890625", "y": "-0.08550511799099970444704155170256854034960269927978515625"}
D := {"x": "0.80592386278077621231119564981781877577304840087890625", "y": "-0.59201919512842871018420964901451952755451202392578125"}
C := {"x": "0.980697343008392644507942641408564112076536881812613964150282530596314245485700666904449462890625", "y": "-0.12710963398437356847295842034404958177832399958945596112383684211065426605813399874023161828517913818359375"}
A := {"x": "-0.80978675745409400832386381807737052440643310546875", "y": "0.5867243027623658679914342428673990070819854736328125"}
B := {"x": "0.60438285383613979652559509645883184602847355518417764629888550512766470661378913599351391880306365855622558432531343595250332729101525663188913213446992773719535937497919198433917056960614134468341708074922684690927420933496259939707648596748812501516173412159028006597654153615804440730049967896994309671570366735884590050451435506067089002261116002861198208198969940712325913247486530169807268154146739158473499580424934721825461058304031746703809221669771729329388163875635794529929781712065135776156794494226677402311157923744890263597083093656741520464036419571967072278717321826790905870389729048957112958475518782429473840623653468953017709109174171229233859710199262215684683082148248727799875118155541489269981783255688284835798016571870147209528649623318537666299801281278071916881613621927310910413733989676610903174370642340749077253356240778512032264023403862174141815882549032872161158661262700859226169645474218726936675648055053359026889459590061527965748498522472347006871126095949750066995728400333226880171789954817104928831445955010623502012487159371984410190898230166908560349429200053295817132269788935110379615695052914047424645525854371852765315713957575794259226098572702730647841899083016222266970912564448204906374451568249641629530721754399412384701721264307683274475460010517298412526604720316698713665300843014539769468368001500301455026778580272673314191953827929516256741034253247619323677401526069073778441285085443720825159890274669001667220015446808126747551300041794812295163539028156862450985992280550177502219198519631382999708370768839952487814121986120384952773517776590666089161028956286199904185393779147187134683813836707240452503895585840364362535631115101211454401609719126333962836166295872637449512221916830911566652718997493664444800241351478721072439504755867724120517500038557588835352830907569393534334774191512435608800383225047874277842997254152375267324611744888573919815447640611796581225245038695548113541792630907905094128912796326206699466534", "y": "-1.1281322364145143924053282731531048734795045005531172448735460546139358733972072991723696585579615767374904012660043283219053660079290162794367876162618415801137654369250523723231662925886351343431431141266806638536258482802479858216330841873008431604620835180674766507251514970533830999012851136582288256157336366936547046049918619052969834265941288687520577883968138923735606646147119086968214764350050218876006236244883655784800999992895182166923717732446448674809375541258593698915860329306315686000681881961200679532544346756776038089991261376867889068729826272354121431762561553643382488780950018387130994288428804484799078952467148820198505928216452808361094398058238560395709377353134543077250705247861311483786445005576574468434680546093872199145649133809012555240967290255923726385726736967241235857946598343787167304710012869898603593747822127637264431657333421745225953853097830943239958465444191224833594680621050868219509654917210874173190275992461956312117565780473998260885167869695004039529886004370031851560112755888256227780706129305581429371828473756966271158850971620574594444152528177604933071911488451647031174466075172930710975148213464858217972537111433065557626829998779589824494819452088373431131469224256143319266969322350410985369501206742566771564803077119120295836784778503234364406054717410120025046818537496419864073347037365215445465597236636713010271959480172720000909467068479645471920299368659964532305811380803389824113999605468123397223971500506113885612841247533992164255941010629626844861600052573886452260145582590906185186457088373216061088945404771141116305368728843368853468633316248871581922853013833509698583077632406939788330976144340722220980765134314945924494953544761430421013603268798428419400118324174528608471717993728675493450905707887361229661578780640632062967027031246165655980121496937130518038147913754114009678168422664158454363248716238844836370441108526183313148536390716255645582951068986649639826124684870099920655035137314679780272171"}

Need to prove:
2 * angle(A, D, C) == angle(A, B, D) + angle(A, C, E) mod 360

Proof:
By reverse_direction on B, A we get 180 == direction(B, A) - direction(A, B) mod 360
By reverse_direction on C, A we get 180 == direction(C, A) - direction(A, C) mod 360
By reverse_direction on A, D we get 180 == direction(A, D) - direction(D, A) mod 360
By reverse_direction on B, D we get 180 == direction(B, D) - direction(D, B) mod 360
By reverse_direction on D, C we get 180 == direction(D, C) - direction(C, D) mod 360
By between_implies_angles on E, C, D we get 180 == angle(E, C, D) mod 360, 0 == angle(C, D, E) mod 360, 0 == angle(D, E, C) mod 360
By between_implies_angles on C, D, B we get 180 == angle(C, D, B) mod 360, 0 == angle(D, B, C) mod 360, 0 == angle(B, C, D) mod 360
