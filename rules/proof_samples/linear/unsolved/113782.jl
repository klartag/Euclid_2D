Assumptions:
A, B, C, D, E, F, G, H: Point
f, g, h, i, j, k: Line
distinct(A, B, C, D, E, F, G, H)
distinct(f, g, h, i, j, k)
f == Line(B, C)
g == internal_angle_bisector(B, A, C)
h == internal_angle_bisector(A, B, C)
i == internal_angle_bisector(A, C, B)
D == line_intersection(g, h)
E == projection(D, f)
F == projection(A, h)
G == projection(C, h)
j == Line(C, G)
k == parallel_line(E, i)
H == line_intersection(j, k)

Embedding:
C := {"x": "-0.54556242780480712628587980361771769821643829345703125", "y": "-1.0393016462356516882437063031829893589019775390625"}
B := {"x": "0.58774988580242126801067570340819656848907470703125", "y": "1.7823960004430061676572449869127012789249420166015625"}
A := {"x": "-0.6627376053552478385455515308422036468982696533203125", "y": "-1.3367009804660330285486224966007284820079803466796875"}
i := {"point": {"x": "-0.54556242780480712628587980361771769821643829345703125", "y": "-1.0393016462356516882437063031829893589019775390625"}, "direction": {"x": "0.0061309458048991825848175840446869594481276675810626645738819969107224034002465638943440550942900796095045041985556118562334563760800802827973688871157870064126155137824996050480643009048535533912722640325312515109456350924343178771938264139008490077924818316841593474574165587554701372961032843928930515305062093187660186613629341446709525469865226779926804178377422662759915746021478027280472641838349905696991203482772406513436496638460362181337905629008364651269488696426272326928227468628426490646532017978507100828634879323569183225448705266902245387960280524302833845754956566803636077556463670972839300862525566205536052375110355054859595200648620724221076917040351599898347738478885814675129911878630778780418429661984081074732933842861289713934416781612347292797173648113830372999097703320828246907143167237609546320531354131443208018547435937079062725948228259026044411997705885384797551025538404379806700385555678991859007219960335490599043458108117410596185622636404784648124483889321168590792090973555400369412873293184258550342975364682617849228998226660733145219243320749408223666054985848231246434865572010301336842153655376822859977198093927856397178695360841566028496002627718182762396854583460734564326863653993959817331825237800687171575791065047042363279987644958225943413711880409863993748722255645547251285630088884401544980130122509630504809267621903879821317454117416135553087676621851271955234142013804376443312347535816724762833423017922434547131333246149242033502106362214376995800723808766166424111489493318875439131027182909685408226472249396270049782554284660468230157862547862152004205283852268470291261533624138153319699367073278586136579110274289230188850725299604835199155858530577360254339591227419048902603587181036661003840295110672394551752814367734594894244586957471092168725802676581278783010721074349448131480272832233418775882894873548255882994607754463076922093136626301027582697448283691755558505172538547836863658642187742790005977537162406579963958145", "y": "-0.00243898662197661101148828980727982912241223221603493081218976301720180842309996466845423957780778275903114646297165273995074976860430510593113775459075581276799671943324273133352970239125495975688877944758254228918394055160233556628613370427078850441605633451320087187751020174693482316348265035727869165798979274045231601170674870892308624347606834172312465129004216494010164015468631097805596502161573407583849612747535116765731027755394586387850199066630151565539140914286947189557062659770441622984367122400019770966644458571846845908054345290057839301089520529254964246565326339515189462091819467747513925974731076393579591759787993288395969725029371615715865171183118700821684376900872470224400639013777806684117913808964957792601853265502395828609482191188386944452900652684856218470733147345431419263662812925045385383967744958171645833994543529227968076936835071385421959758286185641944452505820459593695172416881549182561135892106988514766253054291565948435036347681354105314221237789685065939613419551235324136036509324834772475251215704423752086314841682402103868234465016472565611379250906405928064238032690054739816188025940141440489235786617458697593325615702323704019067042270253308710658220626912636060872180204775181037629631803358353660127169994491808648592975044422426438718381203983460956511072408446796188635543972013483308310886411574940411795744773592603158323121812825256311197412320286092070848572025940366130015104492711105667482007397203061971283936686651895299430945779197600627136362381935979454346859841827741298746292801302330741123397661387147418217661935997982872902228979620538483888309093630087298089506912840501743567136049923155596671378797986526446277227787167043036515567640031710875865121322763204550577015083858491508603520199149216181906208152758936873882769524565767196765025940986830828522782117506072765819074385144194517497117415055066193332853917351117371202075257423159506112989953652603715220637478334208627793093824797883651200116749103312218859561"}}
h := {"point": {"x": "0.58774988580242126801067570340819656848907470703125", "y": "1.7823960004430061676572449869127012789249420166015625"}, "direction": {"x": "-0.74482519548971350838470368496793724164197519444649696221949198432633976668547596126995645356962688740390690288144701751744708999984994058183422763713467956900702586834531427507704055138530884566355250190289119473567330735828007235411735869906075898052966266968733930872572985934876332738577776597799104622244558230044606213134596458184378818729624802752021702419658746727963325813904947111796203729035427461405197975529318894113327641175502331642813394846100455236603758318353814930421981920384021441282796917199535649966265600418442149323564056378679596843421458893940198248106540840597978799417346909566200924431297246896833385932005963634514771377256781312434146293671370811183128002817599375489026150226898862829983924623235954513558269368548450655958970067175713588809126133940445888077956722487116468908707718385409912879191872464550315665755244023623617191294449635815372585586058420387110326247508784245202247739375274843718493838021392348720363826722046627655541100279001975957058461904310773310855963171196905360741666660774553594978676944268468940367592893505400726348204768428212660480632832908895051010208869197733321393620306392389152608860967094342133336408703952955769024491499411699433971691580631821567397310544423555642233281854140081998930892529933709048320937647328359296500847023333151442038804661020286623419018844541220020196863601420745969641556884859699622847091815190770499324473250318821272204082546296444372155568671287753046752821583292772536427477446921502295336002604063012188237615041644632976341144143873147119701841246676950528345263971844951184041024333940909676137520703871135537887574567506490712728263851253256528217575711989231361624813407268299509996966350880836386449208301747146346293480577128587322342879264313810504902682398997622818541942839697337590863395332856962430938199994907406250630422721802025229992974111756040757136831605139540250914880070887522059924266314553620427097077064649223247508597009032310104399024058103351867646816802660218790655059", "y": "-1.8561344332338006882032026085200394981133501387258262888965484112540052904055714017647766544869900135525674017587200901841512251583232937789381953408147631837441603135464554368830232301002905194245078986324815818852475145394802944871725154446785553709466055785869336838684989925277499139676853642994360909573456834280028630416489260105268591904352043108245797461248679197076853936361608415476916487518333681454610627217422906148399149158835401400173079457586251575184177271247042420800425234155672942281784923491477260487726858055024454111846371011345756553390552851689814159737708382349197733500710045743881720685700649380040623813233476365822376615550808799208668409155971874274881029149700242153304157161675401764198342351240946406316279707295450331986300593365667525658501011758367975811033204761601570453421826705109241495232075321565743863858419902877821785985201986611497518529160402367148023786642529016584872809651377148978771337136551865245311430479299942603449985216148620915970045468484291188485439142919792025514403991596325622525649925345257510778720425090980803482832501383538707240879363242680194333424197813533549733607106058411155631500666939225280394262941845254453951858870328791757400082562890875953241917947132606452692042490027605209924833031900981996923322651768510655875327701604989125103979283850771654041594663201270066475663404270003313518073047048322224921751687649168303227752375673752066178864858799066555509392886009666058554263328999684967782038838759636615313747034036703164542916800674563168404903631409427188367581477698437181440098429297388010780008946977824098938350291989331636076930963470707947787436736531837861912955971579402200888496914686529138073947652563090873154373751151020991793577109346723357620917204942148687661900799721052534707010987406411858167809025580829719823564067428611838806162216132880604542934607161292666563426659368637015848227883374712318824538579106723433142353105853987528798520566021431707591911392791988154836143437069528200724799"}}
g := {"point": {"x": "-0.6627376053552478385455515308422036468982696533203125", "y": "-1.3367009804660330285486224966007284820079803466796875"}, "direction": {"x": "0.73869424968481432579988610092325028219384752686543429764560998741561736328522939737561239847533680779440239868289140566121363362376986029903685875001889256259441035456281467002897625048045529227228023787035994322472767226584575447692353228515990997273718083800317996126831330059329319008967448158509799469193937298168004346998303043717283564030972534952753660635884520100364168353690166838991477310651928404435285940701594828978962674790898709829434338556016808723908871354091091661139707234099756534817476737414464641679916807182750317069077003709657142963818653650911859790556975172561618023852710199837807915806041584841472862180902413085918819370770574070223377123267854812199650618028741228737727031440591075025799628003395143766228930939935553516614802251052240660837389652802142158086979689278833999837276046009314449673878331150118235480280884652832989931812167045554928465608999566539134815992124740447135243883818484925128421638418037442729929245640872521693684873914954129475813623011099087402935053435642901666612933728931968091548923297442290448077610626898069274155771560934130423820082974426582586661553149094719952972083752624160552836880027815778161549455095537295484064465222229871810003145746024475924128674004483957468915029476133210283172981879463285415521061197746099862363728219234511504551582104564814110562717955697204570395562376324440921548880665820901409672550641029414968447707031806101719862662408252679939032093313120505418418591404068427065114144985429081960314938981919242230230376953982968735226249210684392728391569417580096446080541477882250686215481487336227374558895225249615495834736044821787800112927609871723331223904979203369995833710664375997621489713354832484394890622995973543802897568302938098296307007453947200466499731292273677301013799162351388648417525758146040743680173229094618420523211978307543915190245789421852998307882869656981420968802526256752838992900051543344600122594227731667662456871623553941467812602180675451807871445178594419151073609", "y": "1.8585734198557772992146908983273193272357623709418612197087381742712070988286713664332308940647977963115985482216917429241019749269275988848693330954055189965121570329796981682165529324915454791813966780800641241744314550910826300534586491489493438753626619131001345557460091942746847371311680146567147826153354761684551790533556747194499454339112726525477043974149100846477870337908471525257476137734491022212995588492176417824972251934374860038958099364249266731738091362675737139756131500132717104580221635731479237584391303912209138702651805540351540483499504904615310584394241016300716679709891992518633113283173757019398582989212275694661973588053745960780254926274283744357049466839787489175744221063053182432610133732137442185576465033845689914847248812484506220103791077026853597658106519496144712379788107997613780033628849817382908447257874255800618593678885493750039714504989020931342469037224574975954390051339532067234884926347250716721936735908456537446953619984284031447392169247452797782446781098043324439118054924079802870050771495787632719410204593331191190306279003030795268378804453883273000757227466819007531352409700072555204555079328685095039726824512077624855858563097354122628465904625582139559329135967610124556455005670363440575937550031350162861782620156210753299747165822003335220755086524695451272905149060402618397306752045427497354697647524407582540754063868931693934347493607702361273263722061393103168510903335280776625302464068719991164910432507424826145256841611956463227256553038868161113839589615592201318242210757828670255552438195436102752601775140577622386228573189951385484465761872833716677596387427815888036269669576571717760555634794485181782701670431279795176805930515154192079380089241623043812678618713327997838522252819635974152897631802682305545556085978037406439500066661527294921658440427883487881124842045675712118313138400874143635181513275109824055944746104849039383753652101219247900320584313854852570371220775271776519956155111979859422610755"}}
f := {"point": {"x": "0.58774988580242126801067570340819656848907470703125", "y": "1.7823960004430061676572449869127012789249420166015625"}, "direction": {"x": "-1.13331231360722839429655550702591426670551300048828125", "y": "-2.8216976466786578559009512900956906378269195556640625"}}
D := {"x": "-0.54467575513677253355663318994580359568310223230736216734206265268234860314417524471475060376040645616313619091086979157121394142866316949511299007584506772412367975560613484263529168393510862515734518811011636428817000036294419027491705519140728747950232693343016678985879642096115473524091970462596433909207595508036189287529921665666759074048198127378681921580329703121284739145675377740585233234673747213969030385570602162577819176224928585568346071220840686795595294018496582250173307522586254236759655762479448286478049256999965094498004850510177366121576160589934224527696423350824136040241187480472600609805098357566470645026247840970782908687801002508802195080286668720964035665710106390465246662585582624783561914845983435941436267000313079030006710075032325721000823518188144300105121241208119201586506501215145600448900562086524398461357612224678714485131147264351291256953643927314633740104855208215540052093010808353337459771723420778561300754472278889505769216082856685117883974284474545769585072549824413811352550551304899449894426368298649783899557153302381319562394441551029834060812441952295116405802337184105611672952260199046433723860691717343672477064406991746900796577664304779353756876084620865712296725301864601778929161549333949882003500512266169381139168202426171561355846974477957538781446872906820185712064365879567852181353955374434534826627164647852118577329088780057762332418594554547115818870812141875929145233604221496197236438847582816145986484438649069139636452418895730256338384128759659019322361418072835835971883792664906193036547555145082431542412499689496177037970909332027182167127418309847566748922272611558260475134285903038162799038043034568365206446302784734335938110572913620400002717820180717782544652797430879622715144543570654749469013910669324834669750897996016973922735561043239464796651476056755812912451333948233817001863446672316525421338018072890646630094342227710890185361969407865113151797303445115554509706867692773210419948000777865074019726", "y": "-1.0396543785618256662053954934322326659510087602829950688048051628957044416012149337609802775491362278453772191790418311102507561027053887657990086054889576444225462704028604302028140205226737063167547950407809847709253409469276949283620333516183050567915210410642034016973130575625309197319545417333762552128958040148879773241381384544332801307438083669718718851067422506348794797557006570762335606298555654288718104732995021150611464954297723672180824927624085157210569662987902322660487135516589685140707866524922542232178546763149517407831784801129300807502041318928037242750717976229002827726234847903783759184573506909532574712836016758595568038592568487108442012229980927705878830276123985435527284575632880786403857007381561419955499682837535134680816459373086994855012933015866759264599356910347165132066466757946648260116650189602160237322672867099356179176939008378930663352203028972559585649366518439276184489569771548949005261830137341813858634012890076737881270893633834411493123523939009150004182937713166709661201599298628635354775117813789398857721550869309867932205351116879544801889874617320715915587399840212189035669435103745052297264564220047921068514367572376049828644965130358336426121794298228734548784486437877715844727500989337667920461736538021092159053620036722950296484680930714671424771785762217117339785489098285916745023627727921175400991170765036990189566357878535582315643523864019392844978437368200318296509774743431335686515643576090477606040941034271261814265517696850006575139739949542328504987479737045691749941248870497578244625795539752729611449366173646017426217790477686311376337867713094926394534345038855883607098828835375369201415215648497617173197736907202675931969883115371105387028742393319813798952017747203462098141074679760996115413937397455950761248561823626227234943772007664077274995489874663829599460814132126923538444330572529037165568709835341248713562946285544296819203165050546562860376534425939935591588413480846549627132702979466452826678"}
E := {"x": "-0.54556125444897422718796177745942739097602891593164784120592796853175134376433536179084444396593869794999867724111562318896435739043738070306646496026254302221305141019027448637889445847075483117385564217295000848062162566208307015516193201219305353762774508781275342184242794067647275045165345046633447693011649278006837800490978202867727122895710819809068587021083850928086072442389496519561317172970873439012494745153535042545182755209254996218715934244981005114845237904191443414185967561230243383433314763439987133952988840973649123517611951421153715543137574581062654141545999594683715855948238559519600583233653579835123608970112010153599867337605331485050268782857970883016433245401649585921687948862736612859502911710921804312891633237164811138748096264336899927825843439323362623215793493478142138150523619375357956069491736480185837446958143109749846670090104352692660254223272398160018444898513314575088338474852568356771297874040699728589339768793059947138066686951766220675126965897933701468215991744813904377192651042976465540307510526073149516022401327176209482784723178492211855027125641595694817202551239296538568271261189633159544773687499627271798737057169056937652268525764679538313230818799075488545683030479927881074280651033122763533854114899028163767590878571155217377501203044937020874907765917885224968127421132675675604505758997604892186924181437357116307833521298277380397638971409436847037408281902277376454295915562252522524283834638668707838338165063753400947914309603864095977786939731840328056536355378409297036288396981495236700537104951810334149693023126868409595467499246263759807186152139600888649723513564650184477154963217454361247016658951413942641519965695507594156318272144263675616314476947792913853435893502226584117765334325306054003354806707585541807505917384884174457318185380941350940124943241132581496484903583614207219997152246883400924716539215711692058806536599629611160422219289500242221403860206567598632545549307103474897609617967805339235643667", "y": "-1.039298724838475767764857375858023303063005932561647231030234783238889318775767692266923642735220208711989974701031711544098233254496184082015744645683351277980974712628718402287381182771902249310603883884228590610239504327131212139206415570306938608781384445333077157987157382662338558654339871836407393905166863860294296753291802811303809139830015871798834519551310550726918659647102016329077663210264415999073298654874345244850830299993091523641348182607494677944566074330742812353595070722325393029752991319771365791386607330029387204856444039348443350601238954869506605823105140941857035587661893175983032098117263468366267526917160668397105611948237638030982126818496086454917952043111068178312714622997583159891148809245577772079366612442393153931928507685191103138774748752202574496274665076428059186041280053344343754932103342763744587276667350004848313453384863844496618216558189365788511127147577449546679584140794731062274265041977851136577604087472785753133661918065944054356555662386868666485087988383956183022421256988808553254458262299270808679061894741781007501928946983575901988473367714999489043919510984747747593287418081910979637725034303464499702477838377880589636173629227538275666017200285861878084720589124463062298648962368694326522644873213925791847595034400734507124031107774918245984880726363202091100983653524203036050018235558484872099764757697329289231529155351064147772625765618191038939157907267373437946116893213281106769009873606653867878565406603736437760618766578285060148643040007279843490781334348663669926862079523155548339341688937232613789130110574363541937134926749761800937391869498551379359781082196079407588795972443242065845023566200817136429474449961157314114681951066313581254487335309650272411736104832994093383150406974373197751665146213650094405946918420598941328838402079283765457108148582981852529434654810865096185904374014471146672179276104625805084796741461616212640150433817836009078850313115629883246301187579984100766782436581922040815609"}
k := {"point": {"x": "-0.54556125444897422718796177745942739097602891593164784120592796853175134376433536179084444396593869794999867724111562318896435739043738070306646496026254302221305141019027448637889445847075483117385564217295000848062162566208307015516193201219305353762774508781275342184242794067647275045165345046633447693011649278006837800490978202867727122895710819809068587021083850928086072442389496519561317172970873439012494745153535042545182755209254996218715934244981005114845237904191443414185967561230243383433314763439987133952988840973649123517611951421153715543137574581062654141545999594683715855948238559519600583233653579835123608970112010153599867337605331485050268782857970883016433245401649585921687948862736612859502911710921804312891633237164811138748096264336899927825843439323362623215793493478142138150523619375357956069491736480185837446958143109749846670090104352692660254223272398160018444898513314575088338474852568356771297874040699728589339768793059947138066686951766220675126965897933701468215991744813904377192651042976465540307510526073149516022401327176209482784723178492211855027125641595694817202551239296538568271261189633159544773687499627271798737057169056937652268525764679538313230818799075488545683030479927881074280651033122763533854114899028163767590878571155217377501203044937020874907765917885224968127421132675675604505758997604892186924181437357116307833521298277380397638971409436847037408281902277376454295915562252522524283834638668707838338165063753400947914309603864095977786939731840328056536355378409297036288396981495236700537104951810334149693023126868409595467499246263759807186152139600888649723513564650184477154963217454361247016658951413942641519965695507594156318272144263675616314476947792913853435893502226584117765334325306054003354806707585541807505917384884174457318185380941350940124943241132581496484903583614207219997152246883400924716539215711692058806536599629611160422219289500242221403860206567598632545549307103474897609617967805339235643667", "y": "-1.039298724838475767764857375858023303063005932561647231030234783238889318775767692266923642735220208711989974701031711544098233254496184082015744645683351277980974712628718402287381182771902249310603883884228590610239504327131212139206415570306938608781384445333077157987157382662338558654339871836407393905166863860294296753291802811303809139830015871798834519551310550726918659647102016329077663210264415999073298654874345244850830299993091523641348182607494677944566074330742812353595070722325393029752991319771365791386607330029387204856444039348443350601238954869506605823105140941857035587661893175983032098117263468366267526917160668397105611948237638030982126818496086454917952043111068178312714622997583159891148809245577772079366612442393153931928507685191103138774748752202574496274665076428059186041280053344343754932103342763744587276667350004848313453384863844496618216558189365788511127147577449546679584140794731062274265041977851136577604087472785753133661918065944054356555662386868666485087988383956183022421256988808553254458262299270808679061894741781007501928946983575901988473367714999489043919510984747747593287418081910979637725034303464499702477838377880589636173629227538275666017200285861878084720589124463062298648962368694326522644873213925791847595034400734507124031107774918245984880726363202091100983653524203036050018235558484872099764757697329289231529155351064147772625765618191038939157907267373437946116893213281106769009873606653867878565406603736437760618766578285060148643040007279843490781334348663669926862079523155548339341688937232613789130110574363541937134926749761800937391869498551379359781082196079407588795972443242065845023566200817136429474449961157314114681951066313581254487335309650272411736104832994093383150406974373197751665146213650094405946918420598941328838402079283765457108148582981852529434654810865096185904374014471146672179276104625805084796741461616212640150433817836009078850313115629883246301187579984100766782436581922040815609"}, "direction": {"x": "0.0061309458048991825848175840446869594481276675810626645738819969107224034002465638943440550942900796095045041985556118562334563760800802827973688871157870064126155137824996050480643009048535533912722640325312515109456350924343178771938264139008490077924818316841593474574165587554701372961032843928930515305062093187660186613629341446709525469865226779926804178377422662759915746021478027280472641838349905696991203482772406513436496638460362181337905629008364651269488696426272326928227468628426490646532017978507100828634879323569183225448705266902245387960280524302833845754956566803636077556463670972839300862525566205536052375110355054859595200648620724221076917040351599898347738478885814675129911878630778780418429661984081074732933842861289713934416781612347292797173648113830372999097703320828246907143167237609546320531354131443208018547435937079062725948228259026044411997705885384797551025538404379806700385555678991859007219960335490599043458108117410596185622636404784648124483889321168590792090973555400369412873293184258550342975364682617849228998226660733145219243320749408223666054985848231246434865572010301336842153655376822859977198093927856397178695360841566028496002627718182762396854583460734564326863653993959817331825237800687171575791065047042363279987644958225943413711880409863993748722255645547251285630088884401544980130122509630504809267621903879821317454117416135553087676621851271955234142013804376443312347535816724762833423017922434547131333246149242033502106362214376995800723808766166424111489493318875439131027182909685408226472249396270049782554284660468230157862547862152004205283852268470291261533624138153319699367073278586136579110274289230188850725299604835199155858530577360254339591227419048902603587181036661003840295110672394551752814367734594894244586957471092168725802676581278783010721074349448131480272832233418775882894873548255882994607754463076922093136626301027582697448283691755558505172538547836863658642187742790005977537162406579963958145", "y": "-0.00243898662197661101148828980727982912241223221603493081218976301720180842309996466845423957780778275903114646297165273995074976860430510593113775459075581276799671943324273133352970239125495975688877944758254228918394055160233556628613370427078850441605633451320087187751020174693482316348265035727869165798979274045231601170674870892308624347606834172312465129004216494010164015468631097805596502161573407583849612747535116765731027755394586387850199066630151565539140914286947189557062659770441622984367122400019770966644458571846845908054345290057839301089520529254964246565326339515189462091819467747513925974731076393579591759787993288395969725029371615715865171183118700821684376900872470224400639013777806684117913808964957792601853265502395828609482191188386944452900652684856218470733147345431419263662812925045385383967744958171645833994543529227968076936835071385421959758286185641944452505820459593695172416881549182561135892106988514766253054291565948435036347681354105314221237789685065939613419551235324136036509324834772475251215704423752086314841682402103868234465016472565611379250906405928064238032690054739816188025940141440489235786617458697593325615702323704019067042270253308710658220626912636060872180204775181037629631803358353660127169994491808648592975044422426438718381203983460956511072408446796188635543972013483308310886411574940411795744773592603158323121812825256311197412320286092070848572025940366130015104492711105667482007397203061971283936686651895299430945779197600627136362381935979454346859841827741298746292801302330741123397661387147418217661935997982872902228979620538483888309093630087298089506912840501743567136049923155596671378797986526446277227787167043036515567640031710875865121322763204550577015083858491508603520199149216181906208152758936873882769524565767196765025940986830828522782117506072765819074385144194517497117415055066193332853917351117371202075257423159506112989953652603715220637478334208627793093824797883651200116749103312218859561"}}
G := {"x": "-0.54467681605228832761515953014343851122296010778266357292045290955835778822328641424705917176755220436725123492830600215003699754924223050234735732280035981619306407351177929780323277702527031430971675073406193738283218872634975828253580994125510692812244589714986348418428852043330112441206014095652546158165355307289262636094885807487507061802030984470083055336930642864410301454857968294033396723254819822052930896423678748106529445403145070326611948721534731606606356377924270990254855863784718988167879272991019754969405901469284448846112108116418444148631760422073954133936871061724160896458402470329521533812473943689959193536205116756481978666501608310793412441064711322928900538583760333121043140493119425334497058951661823281583183977072336897780137883907883333531513193441882685814244103563076279770255109104328103102462247111418488306546577672391737571164334173609080242922072858109605456232494185804344022021448691942438388260625508627918384069010945061199354797619299759622609708187104173050967891929819613566358270924041482743186992162434294786741877319456439043415863417294698421152593070242750564974792137112648829113366905541838155948741937487788936764346404517932298385415911764128076155199879316141412076018245517223811491023369778366678172803866757114123251620456839210122744573604733377012784468006106599667339239485092392550550857653920836526622687622948377742260704696018763643534019376906424353012245523209572740654001259400350038867856429340929607086119114955708110252765099655876553423757375508611481113168414144716022442119539167697576265571045312373993193533748407617377585657692068601991942361537487219147216260719543916225250990610793824762623055099492242390100514188471464338142564609235384384009446377735397745338846912225213908181366948377673618480143689991299920021285805382098285643776134813446722559647614641894145559210148977965352312207283007463720664790925564075675181760298583520927458894912265202249902934375868511249376090354806598131312788216617861550446573", "y": "-1.0396570224060881077087282215725315244818033978503614051307737093071930697900889568586479523162820480267980028311774981627608206288308238297201656596291569181947235072076477547754831954898482136566088157922806075057968380144715900305746814341017720456546999651924398561728641205252054954108614126791248612264606953236761616694990697676275689760105292773918105158616431722791802668809166815930143022925661738902777940003133087778277919610416032546929905465918977056870526314277094947687026206236722528513484164509273072815843624387158059353879673206122300830495287876291594827980517458166652752281131680114530506226242514293962857780840509765190557369447963771922855650390128334942409760446023290931756783701655730144691992932032106567859202346068348210794046579360935657718251248535511960105461945357915382774002405747489893062947632505477463108735617061813973402197998614529241916824399327271769376530393243809587549380544422051325960710092699930462675972257489616623584211839623595271297897387303844126696529741941024627878531882490450063198406750579384801146441910940146618110406229505747333510324593113858182186482086989226678720647244835431113021196392070808341695725541166063098254092261865195080371492301638345482260067697122961612660202302573461419914998599638085485239987169424691399267337076529580702123886546000655447502843988622067996045268822209657596605562731592021982999938587066249037352460482805998950169340818271853606536664867251974592786813535358104798824092003631334161847429751539258572226735599911426163353235595172228106161825267499494630981175167430364524373202875036098795063256193877791444264137306952811629657287340940710902386623291881673256273506094027747854095636337044120165717021978105311441092661652418933510333867610789478919285908314043297513331588462715497019326116664686834996360652483384089975261043973254667992773688015725287422395466358661974138575323948050774592887454259951171581572307581886345415044843908203407357450453067217255212843175183794166213701098"}
j := {"point": {"x": "-0.54556242780480712628587980361771769821643829345703125", "y": "-1.0393016462356516882437063031829893589019775390625"}, "direction": {"x": "0.00088561175251879867072027347427918699347818567436767707954709044164221177671358575294082823244779563274876507169399784996300245075776949765264267719964018380693592648822070219676722297472968569028324926593806261716781127365024171746419005874489307187755410285013651581571147956669887558793985904347453841834644692710737363905114192512492938197969015529916944663069357135589698545142031705966603276745180177947069103576321251893470554596854929673388051278465268393393643622075729009745144136215281011832120727008980245030594098530715551153887891883581555851368239577926045866063128938275839103541597529670478466187526056310040806463794883243518021333498391689206587558935288677071099461416239666878956859506880574665502941048338176718416816022927663102219862116092116666468486806558117314185755896436923720229744890895671896897537752888581511693453422327608262428835665826390919757077927141890394543767505814195655977978551308057561611739374491372081615930989054938800645202380700240377390291812895826949032108070180386433641729075958517256813007837565705213258122680543560956584136582705301578847406929757249435025207862887351170886633094458161844051258062512211063235653595482067701614584088235871923844800120683858587923981754482776188508976630221633321827196133242885876748379543160789877255426395266622987215531993893400332660760514907607449449142346079163473377312377051622257739295303981236356465980623093575646987754476790427259345998740599649961132143570659070392913880885044291889747234900344123446576242624491388518886831585855283977557880460832302423734428954687626006806466251592382622414342307931398008057638462512780852783739280456083774749009389206175237376944900507757609899485811528535661857435390764615615990553622264602254661153087774786091818633051622326381519856310008700079978714194617901714356223865186553277440352385358105854440789851022034647687792716992536279335209074435924324818239701416479072541105087734797750097065624131488750623909645193401868687211783382138449553427", "y": "-0.0003553761704364194650219183895421655798258587878614051307737093071930697900889568586479523162820480267980028311774981627608206288308238297201656596291569181947235072076477547754831954898482136566088157922806075057968380144715900305746814341017720456546999651924398561728641205252054954108614126791248612264606953236761616694990697676275689760105292773918105158616431722791802668809166815930143022925661738902777940003133087778277919610416032546929905465918977056870526314277094947687026206236722528513484164509273072815843624387158059353879673206122300830495287876291594827980517458166652752281131680114530506226242514293962857780840509765190557369447963771922855650390128334942409760446023290931756783701655730144691992932032106567859202346068348210794046579360935657718251248535511960105461945357915382774002405747489893062947632505477463108735617061813973402197998614529241916824399327271769376530393243809587549380544422051325960710092699930462675972257489616623584211839623595271297897387303844126696529741941024627878531882490450063198406750579384801146441910940146618110406229505747333510324593113858182186482086989226678720647244835431113021196392070808341695725541166063098254092261865195080371492301638345482260067697122961612660202302573461419914998599638085485239987169424691399267337076529580702123886546000655447502843988622067996045268822209657596605562731592021982999938587066249037352460482805998950169340818271853606536664867251974592786813535358104798824092003631334161847429751539258572226735599911426163353235595172228106161825267499494630981175167430364524373202875036098795063256193877791444264137306952811629657287340940710902386623291881673256273506094027747854095636337044120165717021978105311441092661652418933510333867610789478919285908314043297513331588462715497019326116664686834996360652483384089975261043973254667992773688015725287422395466358661974138575323948050774592887454259951171581572307581886345415044843908203407357450453067217255212843175183794166213701098"}}
H := {"x": "-0.54654113412686120592590661673754615904098160902339614233516004419870405342267478346646174348262553684245827342703975819009131433383491977871414056959398306765121114867768129541456172712420861310605784388110756559930506442557454823026486311071610240238841013629355735807488857749594195679111859574461564727666282665457996778282245267406333430236211872024595481079657989671541068198863161443452682578733227186874296419777918983449434404292122371955817634479263449941913828514584502580711106474080634893149909424596823803837807089021929910094276838078789937477952768836170736826578816453225455736143463735808884121757193859591718720481552115414745711598250333794138563619525138153418471026072509448981209724397119355200639214077210554560666831711714817533864381582598125373325117909335167853719151406576736513624870696035985760862217414024294979027474680302907696048826336167695995516102645674656057796417796043581799883161860176071944354024368918417785025834304547179387045131013249902269406061289289077667741184204344973411451302755337015119601855958990375038488397129302387698604693742505097444520213190289483518667846219238373340352958863110599329013709749587250737863419922970642659148804809936146669764652106169098196933789042950341614743035346399700585882686817843006183208054695878433870254910759718155389724865345076871533727707293911491461414143216732309191545658483496340856906414257834482198552598332674704358728185019417404723443484003777386154178004169968261033028153681173647311339449216166608867301028183036178338327915354217678873285678650373328686230491704729813257222496729555403325051434275375108571368858801147065692295857738198666606191441972448739112157205145858606387531616187176221261787362063304006043242652226582289028255708249197069605434502420526259782946128122604632790477008939900687192145422040681081116737150411067517875598643123422171170716896997181230114579893346173660715518588463712126010739593726253462830898840541947961601460620213626098414558367359109859814989233", "y": "-1.0389089132985330505959225818273495213608790433482040272087730378270690135326529349694611359491242921000517875056724371695199400148982506921457662292076349315367361188828255644234409329981415338886240973336834350415457370486209640299517654889604120026568012880887085769165101412125366569357909572179627090152053302957381198586945186329766473847987071040496666395238404446934680678772738349612989876813955707599325739279058660111751310813439106376151585761486728858386565882752882923165405897674955622026103357470745999264961943252008781577425988536443465064015576030536921779665228133626344293955692611132912742131830491373237227181718529907874721877029335069640863348033129803377321460775207436967894221689458230806036180016306566289371060039350296793087967213819551414849565614426053383348826825496612672811822963244072174399979222330151326163727985801988272205690198202911473471577200029142494073163923606280171997419191333111693540928411575617635822108444172673105459710963395929748987455870652150271520671192718907857240889750919668518629726962758666041142897193617729923421062174209475660158186612303644896020070259211708964881542662309465079426024986762614686086134451110772337821441188122365923170355132972936497767648682041697744009540117122359063966062012311869596224221087368241491447080721546493764220680466292007323904975362922598076209822464993497148752622411087697119057791134466216794101812381633562302011390328200547119571086506711717371949933918433930266743825319542975969208129222673367840807450545854239481004783574624718797934249035145252993323509935793589930054148464637451262455662517627808110604581357403268473243784653008230077017643896425043648055543451819508136967228843389143726308279785566642023365338277658300732602181370209671669985955825744812678349231985726266435644621319501614051779587406999443819050971662649641789671989537243710815667256176077810043441495521421211281454765794236411037997412787852408808990889001128496217276694615321823888608291281820248862693616"}
F := {"x": "-0.66371631167730191818557834396203210772281296888667739233516004419870405342267478346646174348262553684245827342703975819009131433383491977871414056959398306765121114867768129541456172712420861310605784388110756559930506442557454823026486311071610240238841013629355735807488857749594195679111859574461564727666282665457996778282245267406333430236211872024595481079657989671541068198863161443452682578733227186874296419777918983449434404292122371955817634479263449941913828514584502580711106474080634893149909424596823803837807089021929910094276838078789937477952768836170736826578816453225455736143463735808884121757193859591718720481552115414745711598250333794138563619525138153418471026072509448981209724397119355200639214077210554560666831711714817533864381582598125373325117909335167853719151406576736513624870696035985760862217414024294979027474680302907696048826336167695995516102645674656057796417796043581799883161860176071944354024368918417785025834304547179387045131013249902269406061289289077667741184204344973411451302755337015119601855958990375038488397129302387698604693742505097444520213190289483518667846219238373340352958863110599329013709749587250737863419922970642659148804809936146669764652106169098196933789042950341614743035346399700585882686817843006183208054695878433870254910759718155389724865345076871533727707293911491461414143216732309191545658483496340856906414257834482198552598332674704358728185019417404723443484003777386154178004169968261033028153681173647311339449216166608867301028183036178338327915354217678873285678650373328686230491704729813257222496729555403325051434275375108571368858801147065692295857738198666606191441972448739112157205145858606387531616187176221261787362063304006043242652226582289028255708249197069605434502420526259782946128122604632790477008939900687192145422040681081116737150411067517875598643123422171170716896997181230114579893346173660715518588463712126010739593726253462830898840541947961601460620213626098414558367359109859815115245", "y": "-1.336308247528914390900838775245088644466881850965391527208773037827069013532652934969461135949124292100051787505672437169519940014898250692145766229207634931536736118882825564423440932998141533888624097333683435041545737048620964029951765488960412002656801288088708576916510141212536656935790957217962709015205330295738119858694518632976647384798707104049666639523840444693468067877273834961298987681395570759932573927905866011175131081343910637615158576148672885838656588275288292316540589767495562202610335747074599926496194325200878157742598853644346506401557603053692177966522813362634429395569261113291274213183049137323722718171852990787472187702933506964086334803312980337732146077520743696789422168945823080603618001630656628937106003935029679308796721381955141484956561442605338334882682549661267281182296324407217439997922233015132616372798580198827220569019820291147347157720002914249407316392360628017199741919133311169354092841157561763582210844417267310545971096339592974898745587065215027152067119271890785724088975091966851862972696275866604114289719361772992342106217420947566015818661230364489602007025921170896488154266230946507942602498676261468608613445111077233782144118812236592317035513297293649776764868204169774400954011712235906396606201231186959622422108736824149144708072154649376422068046629200732390497536292259807620982246499349714875262241108769711905779113446621679410181238163356230201139032820054711957108650671171737194993391843393026674382531954297596920812922267336784080745054585423948100478357462471879793424903514525299332350993579358993005414846463745126245566251762780811060458135740326847324378465300823007701764389642504364805554345181950813696722884338914372630827978556664202336533827765830073260218137020967166998595582574481267834923198572626643564462131950161405177958740699944381905097166264964178967198953724371081566725617607781004344149552142121128145476579423641103799741278785240880899088900112849621727669461532182388860829128182024886268856"}

Need to prove:
concyclic(E, F, G, H)

Proof:
By line_definition on G, C, perpendicular_line(C, h) we get Line(C, G) == perpendicular_line(C, h)
By line_definition on B, D, h we get h == Line(B, D)
By line_definition on E, D, perpendicular_line(D, f) we get Line(D, E) == perpendicular_line(D, f)
By line_definition on D, G, h we get h == Line(D, G)
By line_definition on G, H, j we get j == Line(G, H)
By line_definition on E, C, f we get f == Line(C, E)
By line_definition on B, F, h we get h == Line(B, F)
By line_definition on E, H, k we get k == Line(E, H)
By line_definition on G, B, h we get h == Line(B, G)
By line_definition on F, A, perpendicular_line(A, h) we get Line(A, F) == perpendicular_line(A, h)
By line_definition on A, D, g we get g == Line(A, D)
By line_definition on F, G, h we get h == Line(F, G)
By line_definition on H, C, j we get j == Line(C, H)
By line_definition on E, B, f we get f == Line(B, E)
By line_definition on D, F, h we get h == Line(D, F)
By perpendicular_line_definition on F, perpendicular_line(A, h), h we get perpendicular_line(A, h) == perpendicular_line(F, h)
By line_intersection_definition on C, f, j we get C == line_intersection(f, j)
By line_intersection_definition on G, j, h we get G == line_intersection(h, j)
By perpendicular_line_definition on E, f, perpendicular_line(D, f) we get f == perpendicular_line(E, perpendicular_line(D, f))
By line_intersection_definition on C, i, f we get C == line_intersection(f, i)
By line_intersection_definition on E, f, k we get E == line_intersection(f, k)
By perpendicular_line_definition on D, h, perpendicular_line(A, h) we get h == perpendicular_line(D, perpendicular_line(A, h))
By perpendicular_line_definition on B, f, perpendicular_line(D, f) we get f == perpendicular_line(B, perpendicular_line(D, f))
By perpendicular_line_definition on E, perpendicular_line(D, f), f we get perpendicular_line(D, f) == perpendicular_line(E, f)
By line_intersection_definition on B, h, f we get B == line_intersection(f, h)
By perpendicular_line_definition on C, f, perpendicular_line(D, f) we get f == perpendicular_line(C, perpendicular_line(D, f))
By perpendicular_line_definition on G, h, perpendicular_line(C, h) we get h == perpendicular_line(G, perpendicular_line(C, h))
By perpendicular_line_definition on F, h, perpendicular_line(A, h) we get h == perpendicular_line(F, perpendicular_line(A, h))
By line_intersection_definition on C, i, j we get C == line_intersection(i, j)
By perpendicular_line_definition on G, perpendicular_line(C, h), h we get perpendicular_line(C, h) == perpendicular_line(G, h)
By perpendicular_line_definition on B, h, perpendicular_line(C, h) we get h == perpendicular_line(B, perpendicular_line(C, h))
By perpendicular_line_definition on G, h, perpendicular_line(A, h) we get h == perpendicular_line(G, perpendicular_line(A, h))
By perpendicular_line_definition on F, h, perpendicular_line(C, h) we get h == perpendicular_line(F, perpendicular_line(C, h))
By perpendicular_line_definition on D, h, perpendicular_line(C, h) we get h == perpendicular_line(D, perpendicular_line(C, h))
By perpendicular_line_definition on B, h, perpendicular_line(A, h) we get h == perpendicular_line(B, perpendicular_line(A, h))
By line_unique_intersection_v1 on f, j, C, G we get G not in f
By line_uniqueness on G, C, j, perpendicular_line(C, h) we get j == perpendicular_line(C, h)
By line_unique_intersection_v1 on k, j, H, C we get C not in k
By line_unique_intersection_v1 on j, k, H, E we get E not in j
By line_unique_intersection_v1 on h, f, B, C we get C not in h
By line_unique_intersection_v1 on i, f, C, B we get B not in i
By line_unique_intersection_v1 on f, k, E, H we get H not in f
By line_unique_intersection_v1 on i, f, C, E we get E not in i
By line_unique_intersection_v1 on h, j, G, H we get H not in h
By line_unique_intersection_v1 on g, h, D, B we get B not in g
By line_unique_intersection_v1 on h, f, B, E we get E not in h
By line_unique_intersection_v1 on g, h, D, G we get G not in g
By line_unique_intersection_v1 on j, f, C, B we get B not in j
By line_unique_intersection_v1 on f, h, B, F we get F not in f
By line_unique_intersection_v1 on g, h, D, F we get F not in g
By line_unique_intersection_v1 on h, g, D, A we get A not in h
By line_unique_intersection_v1 on j, h, G, D we get D not in j
By line_unique_intersection_v1 on j, h, G, F we get F not in j
By line_unique_intersection_v1 on f, h, B, D we get D not in f
By line_unique_intersection_v1 on i, j, C, H we get H not in i
By line_unique_intersection_v1 on k, j, H, G we get G not in k
By line_unique_intersection_v1 on k, f, E, B we get B not in k
By line_unique_intersection_v1 on i, j, C, G we get G not in i
By parallel_line_definition on H, k, i we get k == parallel_line(H, i)
By parallel_line_definition on C, i, k we get i == parallel_line(C, k)
By different_points_v1 on C, B we get 0 != distance(B, C)
By different_points_v1 on C, G we get 0 != distance(C, G)
By in_imply_collinear on H, C, G we get collinear(C, G, H)
By in_imply_collinear on E, B, C we get collinear(B, C, E)
By double_perpendicular_and_parallel_v0 on perpendicular_line(C, h), h, perpendicular_line(A, h) we get parallel(perpendicular_line(A, h), perpendicular_line(C, h))
By not_in_line_equivalent_to_not_collinear_v0_r on F, G, C we get F not in Line(C, G)
By not_in_line_equivalent_to_not_collinear_v0_r on B, C, G we get B not in Line(C, G)
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, C we get D not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on G, B, C we get G not in Line(B, C)
By angle_bisector_draw_angle_v0 on A, C, B we get exists(Line(A, C), Line(B, C))
By not_in_line_equivalent_to_not_collinear_v0_r on E, G, C we get E not in Line(C, G)
By angle_bisector_draw_angle_v0 on B, C, A we get exists(Line(A, C), Line(B, C))
By angle_bisector_draw_angle_v0 on C, A, B we get exists(Line(A, B), Line(A, C))
By angle_bisector_draw_angle_v0 on A, B, C we get exists(Line(A, B), Line(B, C))
By angle_bisector_draw_angle_v0 on C, B, A we get exists(Line(A, B), Line(B, C))
By angle_bisector_draw_angle_v0 on B, A, C we get exists(Line(A, B), Line(A, C))
By not_in_line_equivalent_to_not_collinear_v0_r on H, B, C we get H not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on D, C, G we get D not in Line(C, G)
By not_in_line_equivalent_to_not_collinear_v0_r on A, C, G we get A not in Line(C, G)
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, C we get F not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on A, C, B we get A not in Line(B, C)
By altitude_definition on D, B, C, perpendicular_line(D, f) we get altitude(D, B, C) == perpendicular_line(D, f)
By incenter_concurrency on B, C, A we get incenter(A, B, C) in internal_angle_bisector(A, C, B), incenter(A, B, C) in internal_angle_bisector(B, A, C), incenter(A, B, C) in internal_angle_bisector(A, B, C)
By line_definition on C, D, i we get i == Line(C, D)
By perpendicular_line_definition on H, j, h we get j == perpendicular_line(H, h)
By line_unique_intersection_v1 on g, i, D, C we get C not in g
By line_unique_intersection_v1 on i, h, D, F we get F not in i
By line_unique_intersection_v1 on i, g, D, A we get A not in i
By projection_definition on B, G, j we get G == projection(B, j)
By projection_definition on F, G, j we get G == projection(F, j)
By projection_definition on B, E, Line(D, E) we get E == projection(B, Line(D, E))
By projection_definition on D, G, j we get G == projection(D, j)
By projection_definition on D, F, Line(A, F) we get F == projection(D, Line(A, F))
By projection_definition on G, F, Line(A, F) we get F == projection(G, Line(A, F))
By projection_definition on B, F, Line(A, F) we get F == projection(B, Line(A, F))
By projection_definition on C, E, Line(D, E) we get E == projection(C, Line(D, E))
By parallel_line_definition on F, Line(A, F), j we get Line(A, F) == parallel_line(F, j)
By parallel_line_definition on A, Line(A, F), j we get Line(A, F) == parallel_line(A, j)
By parallel_line_definition on G, j, Line(A, F) we get j == parallel_line(G, Line(A, F))
By parallel_line_definition on C, j, Line(A, F) we get j == parallel_line(C, Line(A, F))
By different_points_v1 on E, H we get 0 != distance(E, H)
By parallel_line_definition on D, i, k we get i == parallel_line(D, k)
By parallel_line_definition on H, j, Line(A, F) we get j == parallel_line(H, Line(A, F))
By different_points_v1 on B, E we get 0 != distance(B, E)
By different_points_v1 on G, D we get 0 != distance(D, G)
By different_points_v1 on B, A we get 0 != distance(A, B)
By different_points_v1 on F, B we get 0 != distance(B, F)
By different_points_v1 on H, C we get 0 != distance(C, H)
By different_points_v1 on B, D we get 0 != distance(B, D)
By different_points_v1 on F, D we get 0 != distance(D, F)
By different_points_v1 on C, E we get 0 != distance(C, E)
By different_points_v1 on A, F we get 0 != distance(A, F)
By different_points_v1 on G, B we get 0 != distance(B, G)
By different_points_v1 on H, G we get 0 != distance(G, H)
By different_points_v1 on A, D we get 0 != distance(A, D)
By different_points_v1 on D, E we get 0 != distance(D, E)
By different_points_v1 on F, G we get 0 != distance(F, G)
By different_points_v1 on C, A we get 0 != distance(A, C)
By in_imply_collinear on F, G, B we get collinear(B, F, G)
By in_imply_collinear on B, G, D we get collinear(B, D, G)
By probably_between_and_collinear_implies_between on C, E, B we get between(B, E, C)
By projection_definition on H, G, h we get G == projection(H, h)
By in_imply_collinear on D, B, F we get collinear(B, D, F)
By probably_between_and_collinear_implies_between on G, C, H we get between(G, C, H)
By in_imply_collinear on G, F, D we get collinear(D, F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on C, A, B we get C not in Line(A, B)
By line_inequality on Line(A, B), f, A we get f != Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on G, A, F we get G not in Line(A, F)
By not_in_line_equivalent_to_not_collinear_v0_r on F, A, B we get F not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on E, A, B we get E not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on H, D, A we get H not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on D, F, A we get D not in Line(A, F)
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, A we get D not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on G, A, C we get G not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on E, C, A we get E not in Line(A, C)
By line_inequality on Line(D, E), j, D we get j != Line(D, E)
By line_inequality on Line(D, E), f, D we get f != Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on E, A, D we get E not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on B, C, A we get B not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on F, A, C we get F not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on H, A, B we get H not in Line(A, B)
By line_inequality on Line(A, C), j, A we get j != Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on H, C, A we get H not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on C, F, A we get C not in Line(A, F)
By not_in_line_equivalent_to_not_collinear_v0_r on F, H, E we get F not in Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on A, H, E we get A not in Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, H we get D not in Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on H, D, E we get H not in Line(D, E)
By line_inequality on Line(A, C), h, A we get h != Line(A, C)
By line_inequality on Line(D, E), h, E we get h != Line(D, E)
By line_inequality on Line(A, B), k, B we get k != Line(A, B)
By line_inequality on Line(A, B), j, B we get j != Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on E, F, A we get E not in Line(A, F)
By not_in_line_equivalent_to_not_collinear_v0_r on G, D, E we get G not in Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on H, A, F we get H not in Line(A, F)
By not_in_line_equivalent_to_not_collinear_v0_r on A, D, E we get A not in Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on C, D, A we get C not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, D we get C not in Line(D, E)
By line_inequality on Line(A, B), g, B we get g != Line(A, B)
By line_inequality on Line(A, F), g, F we get g != Line(A, F)
By not_in_line_equivalent_to_not_collinear_v0_r on B, A, F we get B not in Line(A, F)
By line_inequality on Line(A, F), f, F we get f != Line(A, F)
By line_inequality on Line(A, C), k, C we get k != Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on D, A, C we get D not in Line(A, C)
By line_inequality on Line(A, B), h, A we get h != Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on F, E, D we get F not in Line(D, E)
By line_inequality on Line(A, B), i, B we get i != Line(A, B)
By line_inequality on Line(A, F), j, F we get j != Line(A, F)
By line_inequality on Line(A, F), h, A we get h != Line(A, F)
By not_in_line_equivalent_to_not_collinear_v0_r on G, A, B we get G not in Line(A, B)
By line_inequality on Line(A, C), f, A we get f != Line(A, C)
By line_inequality on Line(D, E), i, E we get i != Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on B, D, E we get B not in Line(D, E)
By perpendicular_direction_conditions_v0_r on C, H, D, G we get 180 == 2 * direction(C, H) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on H, G, F, G we get 180 == 2 * direction(H, G) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on F, D, F, A we get 180 == 2 * direction(F, D) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on D, F, G, H we get 180 == 2 * direction(D, F) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0_r on H, G, D, G we get 180 == 2 * direction(H, G) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on B, F, F, A we get 180 == 2 * direction(B, F) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on G, D, G, C we get 180 == 2 * direction(G, D) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on H, C, D, G we get 180 == 2 * direction(H, C) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on B, C, D, E we get 180 == 2 * direction(B, C) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on F, B, H, G we get 180 == 2 * direction(F, B) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0_r on F, A, F, G we get 180 == 2 * direction(F, A) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on B, C, E, D we get 180 == 2 * direction(B, C) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on B, G, A, F we get 180 == 2 * direction(B, G) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on D, G, C, H we get 180 == 2 * direction(D, G) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on F, A, F, B we get 180 == 2 * direction(F, A) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on D, E, B, C we get 180 == 2 * direction(D, E) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on D, B, C, H we get 180 == 2 * direction(D, B) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on G, F, H, G we get 180 == 2 * direction(G, F) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0_r on B, F, A, F we get 180 == 2 * direction(B, F) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on C, G, F, D we get 180 == 2 * direction(C, G) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on D, B, G, H we get 180 == 2 * direction(D, B) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0_r on B, E, D, E we get 180 == 2 * direction(B, E) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on F, A, G, D we get 180 == 2 * direction(F, A) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on G, C, D, B we get 180 == 2 * direction(G, C) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on F, D, C, H we get 180 == 2 * direction(F, D) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on A, F, B, G we get 180 == 2 * direction(A, F) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on D, F, F, A we get 180 == 2 * direction(D, F) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on G, H, B, G we get 180 == 2 * direction(G, H) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on H, C, F, G we get 180 == 2 * direction(H, C) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on B, F, C, H we get 180 == 2 * direction(B, F) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on D, G, A, F we get 180 == 2 * direction(D, G) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on D, F, C, H we get 180 == 2 * direction(D, F) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on G, H, B, D we get 180 == 2 * direction(G, H) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on G, C, B, F we get 180 == 2 * direction(G, C) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on F, B, C, H we get 180 == 2 * direction(F, B) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on G, C, D, G we get 180 == 2 * direction(G, C) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on B, E, E, D we get 180 == 2 * direction(B, E) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on C, H, G, B we get 180 == 2 * direction(C, H) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on G, H, D, G we get 180 == 2 * direction(G, H) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on F, B, F, A we get 180 == 2 * direction(F, B) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on B, G, G, C we get 180 == 2 * direction(B, G) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on A, F, D, G we get 180 == 2 * direction(A, F) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on H, C, G, F we get 180 == 2 * direction(H, C) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on A, F, F, G we get 180 == 2 * direction(A, F) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on F, D, H, C we get 180 == 2 * direction(F, D) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on D, F, H, C we get 180 == 2 * direction(D, F) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on F, A, B, D we get 180 == 2 * direction(F, A) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on C, G, B, D we get 180 == 2 * direction(C, G) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on F, G, C, G we get 180 == 2 * direction(F, G) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on A, F, G, B we get 180 == 2 * direction(A, F) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on D, G, G, H we get 180 == 2 * direction(D, G) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0_r on G, B, A, F we get 180 == 2 * direction(G, B) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on H, C, D, F we get 180 == 2 * direction(H, C) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on H, G, F, D we get 180 == 2 * direction(H, G) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on A, F, B, F we get 180 == 2 * direction(A, F) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on E, D, E, C we get 180 == 2 * direction(E, D) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on G, C, G, F we get 180 == 2 * direction(G, C) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on H, G, G, D we get 180 == 2 * direction(H, G) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on D, G, H, C we get 180 == 2 * direction(D, G) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on F, D, G, C we get 180 == 2 * direction(F, D) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on G, D, C, G we get 180 == 2 * direction(G, D) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on G, H, G, F we get 180 == 2 * direction(G, H) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on C, G, F, B we get 180 == 2 * direction(C, G) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on G, B, H, G we get 180 == 2 * direction(G, B) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0_r on C, H, F, B we get 180 == 2 * direction(C, H) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on B, D, G, H we get 180 == 2 * direction(B, D) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0_r on D, B, H, G we get 180 == 2 * direction(D, B) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0_r on F, A, D, F we get 180 == 2 * direction(F, A) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on D, G, F, A we get 180 == 2 * direction(D, G) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on D, G, H, G we get 180 == 2 * direction(D, G) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0_r on F, B, H, C we get 180 == 2 * direction(F, B) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on F, A, B, F we get 180 == 2 * direction(F, A) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on G, F, F, A we get 180 == 2 * direction(G, F) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on D, B, G, C we get 180 == 2 * direction(D, B) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on G, C, F, G we get 180 == 2 * direction(G, C) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on F, B, G, H we get 180 == 2 * direction(F, B) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0_r on F, D, C, G we get 180 == 2 * direction(F, D) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on D, F, G, C we get 180 == 2 * direction(D, F) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on F, D, A, F we get 180 == 2 * direction(F, D) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on C, H, F, G we get 180 == 2 * direction(C, H) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on D, E, E, C we get 180 == 2 * direction(D, E) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on C, B, E, D we get 180 == 2 * direction(C, B) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on H, C, B, D we get 180 == 2 * direction(H, C) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on H, C, B, F we get 180 == 2 * direction(H, C) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on B, D, F, A we get 180 == 2 * direction(B, D) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on B, G, H, C we get 180 == 2 * direction(B, G) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on B, G, C, H we get 180 == 2 * direction(B, G) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on F, A, G, B we get 180 == 2 * direction(F, A) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on C, G, G, D we get 180 == 2 * direction(C, G) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on F, A, F, D we get 180 == 2 * direction(F, A) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on B, D, A, F we get 180 == 2 * direction(B, D) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on D, B, H, C we get 180 == 2 * direction(D, B) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on D, G, C, G we get 180 == 2 * direction(D, G) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on H, G, D, F we get 180 == 2 * direction(H, G) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on F, G, G, H we get 180 == 2 * direction(F, G) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0_r on H, C, F, D we get 180 == 2 * direction(H, C) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on A, F, D, B we get 180 == 2 * direction(A, F) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on C, G, B, F we get 180 == 2 * direction(C, G) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on C, H, D, F we get 180 == 2 * direction(C, H) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on G, F, C, H we get 180 == 2 * direction(G, F) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on G, C, D, F we get 180 == 2 * direction(G, C) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on F, B, A, F we get 180 == 2 * direction(F, B) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on F, G, G, C we get 180 == 2 * direction(F, G) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on G, H, F, G we get 180 == 2 * direction(G, H) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on G, C, B, D we get 180 == 2 * direction(G, C) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on D, F, H, G we get 180 == 2 * direction(D, F) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0_r on C, E, E, D we get 180 == 2 * direction(C, E) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on A, F, D, F we get 180 == 2 * direction(A, F) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on G, B, F, A we get 180 == 2 * direction(G, B) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on C, H, B, G we get 180 == 2 * direction(C, H) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on B, G, C, G we get 180 == 2 * direction(B, G) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on G, D, F, A we get 180 == 2 * direction(G, D) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on C, H, G, D we get 180 == 2 * direction(C, H) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on G, F, G, C we get 180 == 2 * direction(G, F) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on H, G, G, F we get 180 == 2 * direction(H, G) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on C, H, G, F we get 180 == 2 * direction(C, H) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on D, E, E, B we get 180 == 2 * direction(D, E) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on D, E, C, E we get 180 == 2 * direction(D, E) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on E, B, D, E we get 180 == 2 * direction(E, B) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on H, C, F, B we get 180 == 2 * direction(H, C) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on B, F, H, G we get 180 == 2 * direction(B, F) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0_r on G, D, C, H we get 180 == 2 * direction(G, D) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on G, H, F, B we get 180 == 2 * direction(G, H) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on B, F, G, C we get 180 == 2 * direction(B, F) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on B, G, H, G we get 180 == 2 * direction(B, G) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0_r on G, C, B, G we get 180 == 2 * direction(G, C) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on B, G, F, A we get 180 == 2 * direction(B, G) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on G, H, G, B we get 180 == 2 * direction(G, H) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on H, C, G, B we get 180 == 2 * direction(H, C) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on G, H, D, F we get 180 == 2 * direction(G, H) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on D, F, A, F we get 180 == 2 * direction(D, F) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on C, H, F, D we get 180 == 2 * direction(C, H) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on A, F, B, D we get 180 == 2 * direction(A, F) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on G, B, G, C we get 180 == 2 * direction(G, B) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on H, G, D, B we get 180 == 2 * direction(H, G) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on H, C, B, G we get 180 == 2 * direction(H, C) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on C, G, D, F we get 180 == 2 * direction(C, G) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on G, F, C, G we get 180 == 2 * direction(G, F) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on C, G, D, B we get 180 == 2 * direction(C, G) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on G, D, A, F we get 180 == 2 * direction(G, D) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on C, G, G, F we get 180 == 2 * direction(C, G) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on F, D, G, H we get 180 == 2 * direction(F, D) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0_r on B, D, C, H we get 180 == 2 * direction(B, D) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on C, H, B, D we get 180 == 2 * direction(C, H) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on G, H, G, D we get 180 == 2 * direction(G, H) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on G, F, G, H we get 180 == 2 * direction(G, F) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0_r on A, F, F, B we get 180 == 2 * direction(A, F) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on G, B, G, H we get 180 == 2 * direction(G, B) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0_r on D, E, B, E we get 180 == 2 * direction(D, E) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on B, F, C, G we get 180 == 2 * direction(B, F) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on D, F, C, G we get 180 == 2 * direction(D, F) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on B, D, C, G we get 180 == 2 * direction(B, D) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on G, D, G, H we get 180 == 2 * direction(G, D) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0_r on E, C, D, E we get 180 == 2 * direction(E, C) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on B, F, H, C we get 180 == 2 * direction(B, F) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on H, G, B, F we get 180 == 2 * direction(H, G) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on E, D, B, E we get 180 == 2 * direction(E, D) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on D, B, C, G we get 180 == 2 * direction(D, B) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on G, H, D, B we get 180 == 2 * direction(G, H) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on B, D, H, C we get 180 == 2 * direction(B, D) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on G, F, H, C we get 180 == 2 * direction(G, F) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on E, B, E, D we get 180 == 2 * direction(E, B) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on D, E, C, B we get 180 == 2 * direction(D, E) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on G, C, F, D we get 180 == 2 * direction(G, C) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on E, D, C, B we get 180 == 2 * direction(E, D) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on A, F, G, D we get 180 == 2 * direction(A, F) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on E, C, E, D we get 180 == 2 * direction(E, C) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on C, G, B, G we get 180 == 2 * direction(C, G) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on F, A, D, B we get 180 == 2 * direction(F, A) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on H, G, F, B we get 180 == 2 * direction(H, G) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on C, E, D, E we get 180 == 2 * direction(C, E) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on C, B, D, E we get 180 == 2 * direction(C, B) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on D, B, F, A we get 180 == 2 * direction(D, B) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on H, G, G, B we get 180 == 2 * direction(H, G) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on F, G, H, C we get 180 == 2 * direction(F, G) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on E, D, C, E we get 180 == 2 * direction(E, D) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on B, F, G, H we get 180 == 2 * direction(B, F) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0_r on F, G, H, G we get 180 == 2 * direction(F, G) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0_r on G, H, F, D we get 180 == 2 * direction(G, H) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on C, H, D, B we get 180 == 2 * direction(C, H) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on H, G, B, G we get 180 == 2 * direction(H, G) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on C, G, F, G we get 180 == 2 * direction(C, G) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on E, D, B, C we get 180 == 2 * direction(E, D) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on F, A, D, G we get 180 == 2 * direction(F, A) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on B, G, G, H we get 180 == 2 * direction(B, G) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0_r on F, G, C, H we get 180 == 2 * direction(F, G) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on C, G, G, B we get 180 == 2 * direction(C, G) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on F, B, G, C we get 180 == 2 * direction(F, B) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on G, C, F, B we get 180 == 2 * direction(G, C) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on A, F, G, F we get 180 == 2 * direction(A, F) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on H, G, B, D we get 180 == 2 * direction(H, G) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on G, D, H, G we get 180 == 2 * direction(G, D) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0_r on G, B, C, G we get 180 == 2 * direction(G, B) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on F, A, G, F we get 180 == 2 * direction(F, A) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on G, B, H, C we get 180 == 2 * direction(G, B) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on F, G, A, F we get 180 == 2 * direction(F, G) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on G, C, G, D we get 180 == 2 * direction(G, C) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on D, G, G, C we get 180 == 2 * direction(D, G) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on F, D, H, G we get 180 == 2 * direction(F, D) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0_r on H, C, D, B we get 180 == 2 * direction(H, C) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on F, G, F, A we get 180 == 2 * direction(F, G) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on A, F, F, D we get 180 == 2 * direction(A, F) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on B, D, H, G we get 180 == 2 * direction(B, D) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0_r on G, H, B, F we get 180 == 2 * direction(G, H) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on G, F, A, F we get 180 == 2 * direction(G, F) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on C, G, D, G we get 180 == 2 * direction(C, G) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on F, A, B, G we get 180 == 2 * direction(F, A) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on G, D, H, C we get 180 == 2 * direction(G, D) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on C, H, B, F we get 180 == 2 * direction(C, H) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on H, C, G, D we get 180 == 2 * direction(H, C) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on G, C, G, B we get 180 == 2 * direction(G, C) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on G, B, C, H we get 180 == 2 * direction(G, B) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on D, B, A, F we get 180 == 2 * direction(D, B) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on E, D, E, B we get 180 == 2 * direction(E, D) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on F, B, C, G we get 180 == 2 * direction(F, B) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on B, D, G, C we get 180 == 2 * direction(B, D) - 2 * direction(G, C) mod 360
By altitude_definition on C, D, E, f we get f == altitude(C, D, E)
By altitude_definition on D, A, F, h we get h == altitude(D, A, F)
By altitude_definition on B, A, F, h we get h == altitude(B, A, F)
By altitude_definition on G, A, F, h we get h == altitude(G, A, F)
By altitude_definition on B, D, E, f we get f == altitude(B, D, E)
By incenter_isogonal_conjugate on B, A, C we get incenter(A, B, C) == isogonal_conjugate(incenter(A, B, C), A, B, C)
By same_angle_v2 on C, G, H, E we get angle(G, C, E) == angle(H, C, E) + 180 mod 360
By same_angle_v1 on G, H, C, B we get angle(C, G, B) == angle(H, G, B) mod 360
By same_angle_v0 on C, E, B, H we get angle(B, C, H) == angle(E, C, H) mod 360
By same_angle_v0 on B, E, C, F we get angle(C, B, F) == angle(E, B, F) mod 360
By same_angle_v0 on B, E, C, G we get angle(C, B, G) == angle(E, B, G) mod 360
By same_angle_v0 on B, E, C, A we get angle(C, B, A) == angle(E, B, A) mod 360
By same_angle_v3 on E, B, C, H we get angle(B, E, H) == angle(C, E, H) + 180 mod 360
By same_angle_v1 on C, E, B, A we get angle(B, C, A) == angle(E, C, A) mod 360
By same_angle_v1 on G, H, C, D we get angle(C, G, D) == angle(H, G, D) mod 360
By same_angle_v2 on E, C, B, D we get angle(C, E, D) == angle(B, E, D) + 180 mod 360
By same_angle_v2 on C, G, H, B we get angle(G, C, B) == angle(H, C, B) + 180 mod 360
By same_angle_v0 on H, G, C, E we get angle(C, H, E) == angle(G, H, E) mod 360
By same_angle_v0 on G, C, H, F we get angle(C, G, F) == angle(H, G, F) mod 360
By same_angle_v1 on C, E, B, G we get angle(B, C, G) == angle(E, C, G) mod 360
By same_angle_v0 on B, C, E, D we get angle(C, B, D) == angle(E, B, D) mod 360
By same_angle_v2 on C, H, G, A we get angle(H, C, A) == angle(G, C, A) + 180 mod 360
By collinear_definition on B, E, C we get E in Line(B, C), C in Line(B, E), Line(B, C) == Line(B, E), 0 == 2 * angle(E, B, C) mod 360
By perpendicular_angle_conditions_v0 on D, G, C we get angle(D, G, C) == orientation(C, D, G) mod 360
By altitude_definition on B, C, G, h we get h == altitude(B, C, G)
By collinear_definition on C, E, B we get E in Line(B, C), B in Line(C, E), Line(B, C) == Line(C, E), 0 == 2 * angle(E, C, B) mod 360
By perpendicular_angle_conditions_v0 on A, F, D we get angle(A, F, D) == orientation(A, F, D) mod 360
By altitude_definition on A, D, B, Line(A, F) we get Line(A, F) == altitude(A, B, D)
By collinear_definition on B, C, E we get C in Line(B, E), E in Line(B, C), Line(B, C) == Line(B, E), 0 == 2 * angle(C, B, E) mod 360
By altitude_definition on A, F, B, Line(A, F) we get Line(A, F) == altitude(A, B, F)
By altitude_definition on H, B, D, j we get j == altitude(H, B, D)
By altitude_definition on H, F, D, j we get j == altitude(H, D, F)
By perpendicular_angle_conditions_v0 on H, G, B we get angle(H, G, B) == orientation(B, H, G) mod 360
By altitude_definition on B, H, C, h we get h == altitude(B, C, H)
By altitude_definition on A, G, B, Line(A, F) we get Line(A, F) == altitude(A, B, G)
By collinear_definition on H, C, G we get C in Line(G, H), G in Line(C, H), Line(C, H) == Line(G, H), 0 == 2 * angle(C, H, G) mod 360
By altitude_definition on H, F, G, j we get j == altitude(H, F, G)
By altitude_definition on A, F, D, Line(A, F) we get Line(A, F) == altitude(A, D, F)
By collinear_definition on C, B, E we get B in Line(C, E), E in Line(B, C), Line(B, C) == Line(C, E), 0 == 2 * angle(B, C, E) mod 360
By perpendicular_angle_conditions_v0 on D, G, H we get angle(D, G, H) == orientation(D, G, H) mod 360
By altitude_definition on F, H, C, h we get h == altitude(F, C, H)
By altitude_definition on D, C, G, h we get h == altitude(D, C, G)
By altitude_definition on H, D, G, j we get j == altitude(H, D, G)
By altitude_definition on D, C, H, h we get h == altitude(D, C, H)
By altitude_definition on C, G, B, j we get j == altitude(C, B, G)
By perpendicular_angle_conditions_v0 on B, G, H we get angle(B, G, H) == orientation(B, G, H) mod 360
By altitude_definition on C, F, G, j we get j == altitude(C, F, G)
By altitude_definition on B, G, H, h we get h == altitude(B, G, H)
By perpendicular_angle_conditions_v0 on C, G, D we get angle(C, G, D) == orientation(C, G, D) mod 360
By collinear_definition on E, C, B we get C in Line(B, E), B in Line(C, E), Line(B, E) == Line(C, E), 0 == 2 * angle(C, E, B) mod 360
By altitude_definition on F, C, G, h we get h == altitude(F, C, G)
By perpendicular_angle_conditions_v0 on A, F, B we get angle(A, F, B) == orientation(A, F, B) mod 360
By collinear_definition on C, H, G we get H in Line(C, G), G in Line(C, H), Line(C, G) == Line(C, H), 0 == 2 * angle(H, C, G) mod 360
By perpendicular_angle_conditions_v0 on D, F, A we get angle(D, F, A) == orientation(A, D, F) mod 360
By altitude_definition on C, D, B, j we get j == altitude(C, B, D)
By altitude_definition on D, H, G, h we get h == altitude(D, G, H)
By altitude_definition on C, B, F, j we get j == altitude(C, B, F)
By collinear_definition on E, B, C we get B in Line(C, E), C in Line(B, E), Line(B, E) == Line(C, E), 0 == 2 * angle(B, E, C) mod 360
By collinear_definition on G, H, C we get H in Line(C, G), C in Line(G, H), Line(C, G) == Line(G, H), 0 == 2 * angle(H, G, C) mod 360
By altitude_definition on D, C, E, Line(D, E) we get Line(D, E) == altitude(D, C, E)
By collinear_definition on H, G, C we get G in Line(C, H), C in Line(G, H), Line(C, H) == Line(G, H), 0 == 2 * angle(G, H, C) mod 360
By perpendicular_angle_conditions_v0 on F, G, H we get angle(F, G, H) == orientation(F, G, H) mod 360
By altitude_definition on A, G, D, Line(A, F) we get Line(A, F) == altitude(A, D, G)
By collinear_definition on G, C, H we get C in Line(G, H), H in Line(C, G), Line(C, G) == Line(G, H), 0 == 2 * angle(C, G, H) mod 360
By perpendicular_angle_conditions_v0 on B, F, A we get angle(B, F, A) == orientation(A, B, F) mod 360
By altitude_definition on F, H, G, h we get h == altitude(F, G, H)
By perpendicular_angle_conditions_v0 on C, G, F we get angle(C, G, F) == orientation(C, G, F) mod 360
By altitude_definition on D, B, E, Line(D, E) we get Line(D, E) == altitude(D, B, E)
By perpendicular_angle_conditions_v0 on D, E, C we get angle(D, E, C) == orientation(C, D, E) mod 360
By perpendicular_angle_conditions_v0 on C, E, D we get angle(C, E, D) == orientation(C, E, D) mod 360
By altitude_definition on H, B, G, j we get j == altitude(H, B, G)
By perpendicular_angle_conditions_v0 on H, G, D we get angle(H, G, D) == orientation(D, H, G) mod 360
By perpendicular_angle_conditions_v0 on A, F, G we get angle(A, F, G) == orientation(A, F, G) mod 360
By perpendicular_angle_conditions_v0 on B, G, C we get angle(B, G, C) == orientation(B, G, C) mod 360
By collinear_definition on C, G, H we get G in Line(C, H), H in Line(C, G), Line(C, G) == Line(C, H), 0 == 2 * angle(G, C, H) mod 360
By altitude_definition on C, D, F, j we get j == altitude(C, D, F)
By perpendicular_angle_conditions_v0 on D, E, B we get angle(D, E, B) == orientation(B, D, E) mod 360
By altitude_definition on A, F, G, Line(A, F) we get Line(A, F) == altitude(A, F, G)
By perpendicular_angle_conditions_v0 on H, G, F we get angle(H, G, F) == orientation(F, H, G) mod 360
By perpendicular_angle_conditions_v0 on B, E, D we get angle(B, E, D) == orientation(B, E, D) mod 360
By altitude_definition on H, B, F, j we get j == altitude(H, B, F)
By perpendicular_angle_conditions_v0 on G, F, A we get angle(G, F, A) == orientation(A, G, F) mod 360
By perpendicular_angle_conditions_v0 on F, G, C we get angle(F, G, C) == orientation(C, F, G) mod 360
By altitude_definition on C, D, G, j we get j == altitude(C, D, G)
By perpendicular_angle_conditions_v0 on C, G, B we get angle(C, G, B) == orientation(B, C, G) mod 360
By internal_angle_bisector_definition_v0 on A, G, C, B we get angle(A, B, G) == angle(G, B, C) mod 360
By internal_angle_bisector_definition_v0 on A, F, C, B we get angle(A, B, F) == angle(F, B, C) mod 360
By internal_angle_bisector_definition_v0 on C, D, B, A we get angle(C, A, D) == angle(D, A, B) mod 360
By internal_angle_bisector_definition_v0 on C, F, A, B we get angle(C, B, F) == angle(F, B, A) mod 360
By internal_angle_bisector_definition_v0 on C, D, A, B we get angle(C, B, D) == angle(D, B, A) mod 360
By internal_angle_bisector_definition_v0 on B, D, C, A we get angle(B, A, D) == angle(D, A, C) mod 360
By internal_angle_bisector_definition_v0 on A, D, C, B we get angle(A, B, D) == angle(D, B, C) mod 360
By internal_angle_bisector_definition_v0 on C, G, A, B we get angle(C, B, G) == angle(G, B, A) mod 360
By concyclic_sufficient_conditions_v1 on D, G, C, E we get concyclic(C, D, E, G)
By line_intersection_definition on A, g, Line(A, B) we get A == line_intersection(g, Line(A, B))
By line_intersection_definition on D, Line(D, E), h we get D == line_intersection(h, Line(D, E))
By line_intersection_definition on A, g, Line(A, F) we get A == line_intersection(g, Line(A, F))
By line_intersection_definition on B, Line(A, B), f we get B == line_intersection(f, Line(A, B))
By line_intersection_definition on C, Line(A, C), j we get C == line_intersection(j, Line(A, C))
By line_intersection_definition on C, Line(A, C), f we get C == line_intersection(f, Line(A, C))
By line_intersection_definition on D, i, Line(D, E) we get D == line_intersection(i, Line(D, E))
By line_intersection_definition on B, Line(A, B), h we get B == line_intersection(h, Line(A, B))
By same_angle_v1 on D, G, F, E we get angle(F, D, E) == angle(G, D, E) mod 360
By same_angle_v1 on B, F, D, E we get angle(D, B, E) == angle(F, B, E) mod 360
By same_angle_v1 on B, G, F, C we get angle(F, B, C) == angle(G, B, C) mod 360
By same_angle_v0 on B, D, G, A we get angle(D, B, A) == angle(G, B, A) mod 360
By same_angle_v1 on B, D, G, E we get angle(D, B, E) == angle(G, B, E) mod 360
By same_angle_v1 on B, G, F, E we get angle(F, B, E) == angle(G, B, E) mod 360
By same_angle_v1 on B, D, F, C we get angle(D, B, C) == angle(F, B, C) mod 360
By same_angle_v2 on D, B, F, E we get angle(B, D, E) == angle(F, D, E) + 180 mod 360
By same_angle_v2 on D, B, G, E we get angle(B, D, E) == angle(G, D, E) + 180 mod 360
By same_angle_v1 on B, G, D, C we get angle(D, B, C) == angle(G, B, C) mod 360
By same_angle_v0 on B, G, F, A we get angle(F, B, A) == angle(G, B, A) mod 360
By same_angle_v0 on B, F, D, A we get angle(D, B, A) == angle(F, B, A) mod 360
By between_imply_not_between on G, C, H we get collinear_and_not_between(C, G, H)
By between_imply_not_between on B, E, C we get collinear_and_not_between(C, B, E)
By between_imply_not_between on H, C, G we get collinear_and_not_between(C, H, G)
By between_imply_not_between on C, E, B we get collinear_and_not_between(B, C, E)
By orthocenter_concurrency on B, D, E we get orthocenter(B, D, E) in altitude(B, D, E), orthocenter(B, D, E) in altitude(D, B, E), orthocenter(B, D, E) in altitude(E, B, D)
By same_angle_v2 on D, G, B, A we get angle(G, D, A) == angle(B, D, A) + 180 mod 360
By same_angle_v1 on D, F, G, C we get angle(F, D, C) == angle(G, D, C) mod 360
By same_angle_v2 on D, B, F, C we get angle(B, D, C) == angle(F, D, C) + 180 mod 360
By different_points_v1 on C, D we get 0 != distance(C, D)
By orthocenter_concurrency on F, H, G we get orthocenter(F, G, H) in altitude(F, G, H), orthocenter(F, G, H) in altitude(H, F, G), orthocenter(F, G, H) in altitude(G, F, H)
By probably_between_and_collinear_implies_between on D, G, F we get between(D, G, F)
By same_angle_v3 on D, B, G, C we get angle(B, D, C) == angle(G, D, C) + 180 mod 360
By orthocenter_concurrency on D, C, B we get orthocenter(B, C, D) in altitude(D, B, C), orthocenter(B, C, D) in altitude(C, B, D), orthocenter(B, C, D) in altitude(B, C, D)
By same_angle_v1 on C, B, E, D we get angle(B, C, D) == angle(E, C, D) mod 360
By orthocenter_concurrency on C, D, G we get orthocenter(C, D, G) in altitude(C, D, G), orthocenter(C, D, G) in altitude(D, C, G), orthocenter(C, D, G) in altitude(G, C, D)
By same_angle_v3 on D, F, B, A we get angle(F, D, A) == angle(B, D, A) + 180 mod 360
By same_angle_v2 on C, G, H, D we get angle(G, C, D) == angle(H, C, D) + 180 mod 360
By same_angle_v0 on D, G, F, A we get angle(F, D, A) == angle(G, D, A) mod 360
By orthocenter_concurrency on A, D, F we get orthocenter(A, D, F) in altitude(A, D, F), orthocenter(A, D, F) in altitude(D, A, F), orthocenter(A, D, F) in altitude(F, A, D)
By orthocenter_concurrency on C, B, G we get orthocenter(B, C, G) in altitude(C, B, G), orthocenter(B, C, G) in altitude(B, C, G), orthocenter(B, C, G) in altitude(G, B, C)
By orthocenter_concurrency on C, D, E we get orthocenter(C, D, E) in altitude(C, D, E), orthocenter(C, D, E) in altitude(D, C, E), orthocenter(C, D, E) in altitude(E, C, D)
By probably_between_and_collinear_implies_between on B, G, F we get between(B, G, F)
By divide_by_2_mod_180_v1 on A, B, D, A, B, F we get angle(A, B, D) == angle(A, B, F) mod 360
By orthocenter_concurrency on H, D, G we get orthocenter(D, G, H) in altitude(H, D, G), orthocenter(D, G, H) in altitude(D, G, H), orthocenter(D, G, H) in altitude(G, D, H)
By orthocenter_concurrency on H, B, G we get orthocenter(B, G, H) in altitude(H, B, G), orthocenter(B, G, H) in altitude(B, G, H), orthocenter(B, G, H) in altitude(G, B, H)
By orthocenter_concurrency on A, B, F we get orthocenter(A, B, F) in altitude(A, B, F), orthocenter(A, B, F) in altitude(B, A, F), orthocenter(A, B, F) in altitude(F, A, B)
By divide_by_2_mod_180_v1 on D, B, E, F, B, C we get angle(D, B, E) == angle(F, B, C) mod 360
By orthocenter_concurrency on G, A, F we get orthocenter(A, F, G) in altitude(G, A, F), orthocenter(A, F, G) in altitude(A, F, G), orthocenter(A, F, G) in altitude(F, A, G)
By orthocenter_concurrency on C, F, G we get orthocenter(C, F, G) in altitude(C, F, G), orthocenter(C, F, G) in altitude(F, C, G), orthocenter(C, F, G) in altitude(G, C, F)
By divide_by_2_mod_180_v1 on F, B, C, A, B, G we get angle(A, B, G) == angle(F, B, C) mod 360
By divide_by_2_mod_180_v0 on E, B, F, D, B, A we get angle(D, B, A) == angle(E, B, F) mod 360
By divide_by_2_mod_180_v1 on A, B, D, F, B, C we get angle(A, B, D) == angle(F, B, C) mod 360
By divide_by_2_mod_180_v1 on G, B, C, F, B, E we get angle(F, B, E) == angle(G, B, C) mod 360
By divide_by_2_mod_180_v0 on D, B, A, C, B, F we get angle(C, B, F) == angle(D, B, A) mod 360
By divide_by_2_mod_180_v0 on E, B, G, E, B, F we get angle(E, B, F) == angle(E, B, G) mod 360
By probably_between_and_collinear_implies_between on B, D, G we get between(B, D, G)
By probably_between_and_collinear_implies_between on B, D, F we get between(B, D, F)
By reverse_direction on C, B we get 180 == direction(C, B) - direction(B, C) mod 360
By divide_by_2_mod_180_v1 on A, B, F, A, B, G we get angle(A, B, F) == angle(A, B, G) mod 360
By divide_by_2_mod_180_v0 on C, B, G, C, B, F we get angle(C, B, F) == angle(C, B, G) mod 360
By divide_by_2_mod_180_v0 on E, B, G, C, B, D we get angle(C, B, D) == angle(E, B, G) mod 360
By collinear_definition on B, D, F we get D in Line(B, F), F in Line(B, D), Line(B, D) == Line(B, F), 0 == 2 * angle(D, B, F) mod 360
By divide_by_2_mod_180_v0 on E, B, D, G, B, A we get angle(E, B, D) == angle(G, B, A) mod 360
By divide_by_2_mod_180_v0 on C, B, G, D, B, A we get angle(C, B, G) == angle(D, B, A) mod 360
By divide_by_2_mod_180_v1 on D, B, E, A, B, G we get angle(A, B, G) == angle(D, B, E) mod 360
By collinear_definition on G, F, B we get F in Line(B, G), B in Line(F, G), Line(B, G) == Line(F, G), 0 == 2 * angle(F, G, B) mod 360
By divide_by_2_mod_180_v1 on D, B, C, F, B, E we get angle(D, B, C) == angle(F, B, E) mod 360
By divide_by_2_mod_180_v0 on E, B, G, E, B, D we get angle(E, B, D) == angle(E, B, G) mod 360
By divide_by_2_mod_180_v0 on E, B, G, D, B, A we get angle(D, B, A) == angle(E, B, G) mod 360
By divide_by_2_mod_180_v0 on G, B, A, C, B, F we get angle(C, B, F) == angle(G, B, A) mod 360
By divide_by_2_mod_180_v1 on F, B, E, A, B, G we get angle(A, B, G) == angle(F, B, E) mod 360
By divide_by_2_mod_180_v1 on A, B, D, F, B, E we get angle(A, B, D) == angle(F, B, E) mod 360
By line_inequality on Line(D, E), g, E we get g != Line(D, E)
By divide_by_2_mod_180_v1 on G, B, E, A, B, D we get angle(A, B, D) == angle(G, B, E) mod 360
By divide_by_2_mod_180_v0 on E, B, G, C, B, F we get angle(C, B, F) == angle(E, B, G) mod 360
By divide_by_2_mod_180_v1 on G, B, C, A, B, D we get angle(A, B, D) == angle(G, B, C) mod 360
By divide_by_2_mod_180_v0 on G, B, A, C, B, D we get angle(C, B, D) == angle(G, B, A) mod 360
By divide_by_2_mod_180_v0 on E, B, D, E, B, F we get angle(E, B, D) == angle(E, B, F) mod 360
By divide_by_2_mod_180_v1 on D, B, E, G, B, C we get angle(D, B, E) == angle(G, B, C) mod 360
By reverse_direction on H, E we get 180 == direction(H, E) - direction(E, H) mod 360
By divide_by_2_mod_180_v0 on C, B, D, C, B, G we get angle(C, B, D) == angle(C, B, G) mod 360
By reverse_direction on B, F we get 180 == direction(B, F) - direction(F, B) mod 360
By divide_by_2_mod_180_v0 on E, B, F, C, B, G we get angle(C, B, G) == angle(E, B, F) mod 360
By line_inequality on Line(A, F), i, F we get i != Line(A, F)
By divide_by_2_mod_180_v0 on C, B, G, E, B, D we get angle(C, B, G) == angle(E, B, D) mod 360
By reverse_direction on C, A we get 180 == direction(C, A) - direction(A, C) mod 360
By reverse_direction on E, D we get 180 == direction(E, D) - direction(D, E) mod 360
By divide_by_2_mod_180_v0 on C, B, D, F, B, A we get angle(C, B, D) == angle(F, B, A) mod 360
By divide_by_2_mod_180_v0 on C, B, D, C, B, F we get angle(C, B, D) == angle(C, B, F) mod 360
By divide_by_2_mod_180_v0 on E, B, D, F, B, A we get angle(E, B, D) == angle(F, B, A) mod 360
By collinear_definition on F, G, B we get G in Line(B, F), B in Line(F, G), Line(B, F) == Line(F, G), 0 == 2 * angle(G, F, B) mod 360
By collinear_definition on G, D, F we get D in Line(F, G), F in Line(D, G), Line(D, G) == Line(F, G), 0 == 2 * angle(D, G, F) mod 360
By divide_by_2_mod_180_v1 on A, B, G, D, B, C we get angle(A, B, G) == angle(D, B, C) mod 360
By divide_by_2_mod_180_v1 on A, B, F, D, B, C we get angle(A, B, F) == angle(D, B, C) mod 360
By divide_by_2_mod_180_v1 on A, B, D, A, B, G we get angle(A, B, D) == angle(A, B, G) mod 360
By divide_by_2_mod_180_v0 on E, B, F, G, B, A we get angle(E, B, F) == angle(G, B, A) mod 360
By collinear_definition on F, B, G we get B in Line(F, G), G in Line(B, F), Line(B, F) == Line(F, G), 0 == 2 * angle(B, F, G) mod 360
By reverse_direction on G, H we get 180 == direction(G, H) - direction(H, G) mod 360
By parallel_line_angles_reverse_v1 on F, A, C, G we get angle(F, A, C) == angle(G, C, A) mod 360
By divide_by_2_mod_180_v0 on E, B, G, F, B, A we get angle(E, B, G) == angle(F, B, A) mod 360
By reverse_direction on F, B we get 180 == direction(F, B) - direction(B, F) mod 360
By divide_by_2_mod_180_v1 on G, B, E, D, B, C we get angle(D, B, C) == angle(G, B, E) mod 360
By collinear_definition on G, B, F we get B in Line(F, G), F in Line(B, G), Line(B, G) == Line(F, G), 0 == 2 * angle(B, G, F) mod 360
By parallel_line_angles_reverse_v2 on H, C, A, F we get angle(H, C, A) == angle(F, A, C) + 180 mod 360
By divide_by_2_mod_180_v1 on G, B, C, A, B, F we get angle(A, B, F) == angle(G, B, C) mod 360
By divide_by_2_mod_180_v0 on C, B, D, E, B, F we get angle(C, B, D) == angle(E, B, F) mod 360
By parallel_line_angles_reverse_v3 on F, A, C, H we get angle(F, A, C) == angle(H, C, A) + 180 mod 360
By reverse_direction on F, A we get 180 == direction(F, A) - direction(A, F) mod 360
By divide_by_2_mod_180_v1 on D, B, E, A, B, F we get angle(A, B, F) == angle(D, B, E) mod 360
By collinear_definition on B, G, D we get G in Line(B, D), D in Line(B, G), Line(B, D) == Line(B, G), 0 == 2 * angle(G, B, D) mod 360
By divide_by_2_mod_180_v1 on A, B, F, G, B, E we get angle(A, B, F) == angle(G, B, E) mod 360
By reverse_direction on F, G we get 180 == direction(F, G) - direction(G, F) mod 360
By reverse_direction on C, G we get 180 == direction(C, G) - direction(G, C) mod 360
By divide_by_2_mod_180_v0 on F, B, A, C, B, G we get angle(C, B, G) == angle(F, B, A) mod 360
By reverse_direction on E, C we get 180 == direction(E, C) - direction(C, E) mod 360
By reverse_direction on H, C we get 180 == direction(H, C) - direction(C, H) mod 360
By collinear_definition on F, B, D we get B in Line(D, F), D in Line(B, F), Line(B, F) == Line(D, F), 0 == 2 * angle(B, F, D) mod 360
By reverse_direction on F, D we get 180 == direction(F, D) - direction(D, F) mod 360
By collinear_definition on G, D, B we get D in Line(B, G), B in Line(D, G), Line(B, G) == Line(D, G), 0 == 2 * angle(D, G, B) mod 360
By collinear_definition on G, F, D we get F in Line(D, G), D in Line(F, G), Line(D, G) == Line(F, G), 0 == 2 * angle(F, G, D) mod 360
By divide_by_2_mod_180_v0 on C, B, F, E, B, D we get angle(C, B, F) == angle(E, B, D) mod 360
By reverse_direction on A, C we get 180 == direction(A, C) - direction(C, A) mod 360
By reverse_direction on D, B we get 180 == direction(D, B) - direction(B, D) mod 360
By reverse_direction on H, G we get 180 == direction(H, G) - direction(G, H) mod 360
By divide_by_2_mod_180_v1 on F, B, C, G, B, E we get angle(F, B, C) == angle(G, B, E) mod 360
By reverse_direction on C, E we get 180 == direction(C, E) - direction(E, C) mod 360
By reverse_direction on G, D we get 180 == direction(G, D) - direction(D, G) mod 360
By collinear_definition on D, B, F we get B in Line(D, F), F in Line(B, D), Line(B, D) == Line(D, F), 0 == 2 * angle(B, D, F) mod 360
By reverse_direction on D, G we get 180 == direction(D, G) - direction(G, D) mod 360
By reverse_direction on B, C we get 180 == direction(B, C) - direction(C, B) mod 360
By line_inequality on Line(D, E), Line(A, C), E we get Line(A, C) != Line(D, E)
By reverse_direction on C, H we get 180 == direction(C, H) - direction(H, C) mod 360
By reverse_direction on B, E we get 180 == direction(B, E) - direction(E, B) mod 360
By collinear_definition on F, D, G we get D in Line(F, G), G in Line(D, F), Line(D, F) == Line(F, G), 0 == 2 * angle(D, F, G) mod 360
By collinear_definition on F, G, D we get G in Line(D, F), D in Line(F, G), Line(D, F) == Line(F, G), 0 == 2 * angle(G, F, D) mod 360
By collinear_definition on D, F, B we get F in Line(B, D), B in Line(D, F), Line(B, D) == Line(D, F), 0 == 2 * angle(F, D, B) mod 360
By collinear_definition on D, B, G we get B in Line(D, G), G in Line(B, D), Line(B, D) == Line(D, G), 0 == 2 * angle(B, D, G) mod 360
By collinear_definition on D, G, B we get G in Line(B, D), B in Line(D, G), Line(B, D) == Line(D, G), 0 == 2 * angle(G, D, B) mod 360
By collinear_definition on B, G, F we get G in Line(B, F), F in Line(B, G), Line(B, F) == Line(B, G), 0 == 2 * angle(G, B, F) mod 360
By between_imply_segment_sum on C, E, B we get distance(B, C) == distance(C, E) + distance(B, E)
By line_inequality on Line(A, C), i, A we get i != Line(A, C)
By collinear_definition on G, B, D we get B in Line(D, G), D in Line(B, G), Line(B, G) == Line(D, G), 0 == 2 * angle(B, G, D) mod 360
By between_imply_segment_sum on H, C, G we get distance(G, H) == distance(C, H) + distance(C, G)
By collinear_definition on D, G, F we get G in Line(D, F), F in Line(D, G), Line(D, F) == Line(D, G), 0 == 2 * angle(G, D, F) mod 360
By reverse_direction on G, C we get 180 == direction(G, C) - direction(C, G) mod 360
By reverse_direction on B, D we get 180 == direction(B, D) - direction(D, B) mod 360
By reverse_direction on G, B we get 180 == direction(G, B) - direction(B, G) mod 360
By reverse_direction on E, H we get 180 == direction(E, H) - direction(H, E) mod 360
By reverse_direction on A, F we get 180 == direction(A, F) - direction(F, A) mod 360
By line_inequality on k, Line(A, F), H we get k != Line(A, F)
By reverse_direction on B, A we get 180 == direction(B, A) - direction(A, B) mod 360
By reverse_direction on A, B we get 180 == direction(A, B) - direction(B, A) mod 360
By collinear_definition on F, D, B we get D in Line(B, F), B in Line(D, F), Line(B, F) == Line(D, F), 0 == 2 * angle(D, F, B) mod 360
By line_inequality on Line(A, C), Line(A, B), C we get Line(A, B) != Line(A, C)
By reverse_direction on D, E we get 180 == direction(D, E) - direction(E, D) mod 360
By reverse_direction on G, F we get 180 == direction(G, F) - direction(F, G) mod 360
By reverse_direction on D, F we get 180 == direction(D, F) - direction(F, D) mod 360
By line_inequality on Line(A, F), Line(D, E), F we get Line(A, F) != Line(D, E)
By collinear_definition on D, F, G we get F in Line(D, G), G in Line(D, F), Line(D, F) == Line(D, G), 0 == 2 * angle(F, D, G) mod 360
By collinear_definition on B, F, D we get F in Line(B, D), D in Line(B, F), Line(B, D) == Line(B, F), 0 == 2 * angle(F, B, D) mod 360
By reverse_direction on E, B we get 180 == direction(E, B) - direction(B, E) mod 360
By reverse_direction on B, G we get 180 == direction(B, G) - direction(G, B) mod 360
By collinear_definition on B, D, G we get D in Line(B, G), G in Line(B, D), Line(B, D) == Line(B, G), 0 == 2 * angle(D, B, G) mod 360
By collinear_definition on B, F, G we get F in Line(B, G), G in Line(B, F), Line(B, F) == Line(B, G), 0 == 2 * angle(F, B, G) mod 360
By line_inequality on Line(A, C), Line(A, F), C we get Line(A, C) != Line(A, F)
By line_inequality on Line(A, B), Line(D, E), B we get Line(A, B) != Line(D, E)
By line_inequality on Line(A, F), Line(A, B), F we get Line(A, B) != Line(A, F)
By line_inequality on g, Line(A, C), D we get g != Line(A, C)
By line_inequality on Line(D, E), k, D we get k != Line(D, E)
By external_angle_bisector_definition_v0_r on D, A, D, F we get Line(A, F) == external_angle_bisector(D, F, D)
By external_angle_bisector_definition_v0_r on D, H, B, G we get Line(G, H) == external_angle_bisector(B, G, D)
By internal_angle_bisector_definition_v0_r on C, H, C, G we get Line(G, H) == internal_angle_bisector(C, G, C)
By external_angle_bisector_definition_v0_r on A, B, A, F we get Line(B, F) == external_angle_bisector(A, F, A)
By external_angle_bisector_definition_v0_r on B, C, B, G we get Line(C, G) == external_angle_bisector(B, G, B)
By external_angle_bisector_definition_v0_r on B, A, D, F we get Line(A, F) == external_angle_bisector(B, F, D)
By external_angle_bisector_definition_v0_r on F, H, F, G we get Line(G, H) == external_angle_bisector(F, G, F)
By external_angle_bisector_definition_v0_r on H, F, H, G we get Line(F, G) == external_angle_bisector(H, G, H)
By external_angle_bisector_definition_v0_r on H, B, H, G we get Line(B, G) == external_angle_bisector(H, G, H)
By external_angle_bisector_definition_v0_r on D, H, D, G we get Line(G, H) == external_angle_bisector(D, G, D)
By external_angle_bisector_definition_v0_r on D, C, B, G we get Line(C, G) == external_angle_bisector(B, G, D)
By reverse_direction on A, D we get 180 == direction(A, D) - direction(D, A) mod 360
By external_angle_bisector_definition_v0_r on H, B, C, G we get Line(B, G) == external_angle_bisector(C, G, H)
By internal_angle_bisector_definition_v0 on A, D, B, C we get angle(A, C, D) == angle(D, C, B) mod 360
By parallel_line_angles_reverse_v3 on C, D, E, H we get angle(C, D, E) == angle(H, E, D) + 180 mod 360
By external_angle_bisector_definition_v0_r on B, D, B, E we get Line(D, E) == external_angle_bisector(B, E, B)
By external_angle_bisector_definition_v0_r on G, A, B, F we get Line(A, F) == external_angle_bisector(B, F, G)
By external_angle_bisector_definition_v0_r on B, H, B, G we get Line(G, H) == external_angle_bisector(B, G, B)
By isogonal_conjugate_definition_v1 on C, B, A, D, D we get angle(B, C, D) == angle(D, C, A) mod 360
By parallel_line_angles_reverse_v0 on D, C, E, H we get angle(D, C, E) == angle(H, E, C) mod 360
By parallel_line_angles_reverse_v2 on D, C, H, E we get angle(D, C, H) == angle(E, H, C) + 180 mod 360
By external_angle_bisector_definition_v0_r on G, A, G, F we get Line(A, F) == external_angle_bisector(G, F, G)
By internal_angle_bisector_definition_v0_r on F, C, D, G we get Line(C, G) == internal_angle_bisector(D, G, F)
By external_angle_bisector_definition_v0_r on D, C, D, E we get Line(C, E) == external_angle_bisector(D, E, D)
By external_angle_bisector_definition_v0_r on B, A, B, F we get Line(A, F) == external_angle_bisector(B, F, B)
By external_angle_bisector_definition_v0_r on C, F, H, G we get Line(F, G) == external_angle_bisector(C, G, H)
By external_angle_bisector_definition_v0_r on C, D, C, G we get Line(D, G) == external_angle_bisector(C, G, C)
By parallel_line_angles_reverse_v3 on E, H, C, D we get angle(E, H, C) == angle(D, C, H) + 180 mod 360
By external_angle_bisector_definition_v0_r on H, D, C, G we get Line(D, G) == external_angle_bisector(C, G, H)
By internal_angle_bisector_definition_v0_r on B, C, F, G we get Line(C, G) == internal_angle_bisector(B, G, F)
By external_angle_bisector_definition_v0_r on D, B, D, E we get Line(B, E) == external_angle_bisector(D, E, D)
By internal_angle_bisector_definition_v0_r on H, G, H, C we get Line(C, G) == internal_angle_bisector(H, C, H)
By external_angle_bisector_definition_v0_r on C, B, C, G we get Line(B, G) == external_angle_bisector(C, G, C)
By external_angle_bisector_definition_v0_r on A, D, A, F we get Line(D, F) == external_angle_bisector(A, F, A)
By external_angle_bisector_definition_v0_r on C, D, C, E we get Line(D, E) == external_angle_bisector(C, E, C)
By external_angle_bisector_definition_v0_r on H, D, H, G we get Line(D, G) == external_angle_bisector(H, G, H)
By parallel_line_angles_reverse_v2 on H, E, D, C we get angle(H, E, D) == angle(C, D, E) + 180 mod 360
By internal_angle_bisector_definition_v0_r on F, H, B, G we get Line(G, H) == internal_angle_bisector(B, G, F)
By internal_angle_bisector_definition_v0_r on C, E, C, B we get Line(B, E) == internal_angle_bisector(C, B, C)
By external_angle_bisector_definition_v0_r on G, A, D, F we get Line(A, F) == external_angle_bisector(D, F, G)
By external_angle_bisector_definition_v0_r on C, F, C, G we get Line(F, G) == external_angle_bisector(C, G, C)
By external_angle_bisector_definition_v0_r on A, G, A, F we get Line(F, G) == external_angle_bisector(A, F, A)
By internal_angle_bisector_definition_v0_r on A, G, E, B we get Line(B, G) == internal_angle_bisector(A, B, E)
By internal_angle_bisector_definition_v0_r on E, B, E, C we get Line(B, C) == internal_angle_bisector(E, C, E)
By internal_angle_bisector_definition_v0_r on E, C, E, B we get Line(B, C) == internal_angle_bisector(E, B, E)
By internal_angle_bisector_definition_v0_r on A, D, E, B we get Line(B, D) == internal_angle_bisector(A, B, E)
By internal_angle_bisector_definition_v0_r on B, D, C, E we get Line(D, E) == internal_angle_bisector(B, E, C)
By external_angle_bisector_definition_v0_r on D, C, D, G we get Line(C, G) == external_angle_bisector(D, G, D)
By external_angle_bisector_definition_v0_r on F, C, F, G we get Line(C, G) == external_angle_bisector(F, G, F)
By internal_angle_bisector_definition_v0_r on B, C, B, E we get Line(C, E) == internal_angle_bisector(B, E, B)
By internal_angle_bisector_definition_v0_r on A, F, E, B we get Line(B, F) == internal_angle_bisector(A, B, E)
By internal_angle_bisector_definition_v0_r on F, H, D, G we get Line(G, H) == internal_angle_bisector(D, G, F)
By internal_angle_bisector_definition_v0_r on B, E, B, C we get Line(C, E) == internal_angle_bisector(B, C, B)
By internal_angle_bisector_definition_v0_r on C, B, C, E we get Line(B, E) == internal_angle_bisector(C, E, C)
By internal_angle_bisector_definition_v0_r on G, H, G, C we get Line(C, H) == internal_angle_bisector(G, C, G)
By internal_angle_bisector_definition_v0_r on H, C, H, G we get Line(C, G) == internal_angle_bisector(H, G, H)
By internal_angle_bisector_definition_v0_r on G, C, G, H we get Line(C, H) == internal_angle_bisector(G, H, G)
By internal_angle_bisector_definition_v0_r on C, G, C, H we get Line(G, H) == internal_angle_bisector(C, H, C)
By line_intersection_definition on orthocenter(C, D, E), f, Line(D, E) we get orthocenter(C, D, E) == line_intersection(f, Line(D, E))
By line_intersection_definition on orthocenter(D, G, H), j, h we get orthocenter(D, G, H) == line_intersection(h, j)
By line_intersection_definition on orthocenter(C, F, G), h, j we get orthocenter(C, F, G) == line_intersection(h, j)
By line_intersection_definition on orthocenter(A, B, F), Line(A, F), h we get orthocenter(A, B, F) == line_intersection(h, Line(A, F))
By line_intersection_definition on orthocenter(A, F, G), h, Line(A, F) we get orthocenter(A, F, G) == line_intersection(h, Line(A, F))
By line_intersection_definition on orthocenter(B, D, E), Line(D, E), f we get orthocenter(B, D, E) == line_intersection(f, Line(D, E))
By line_intersection_definition on orthocenter(A, D, F), h, Line(A, F) we get orthocenter(A, D, F) == line_intersection(h, Line(A, F))
By line_intersection_definition on orthocenter(B, C, G), j, h we get orthocenter(B, C, G) == line_intersection(h, j)
By line_intersection_definition on orthocenter(B, G, H), h, j we get orthocenter(B, G, H) == line_intersection(h, j)
By line_intersection_definition on orthocenter(F, G, H), j, h we get orthocenter(F, G, H) == line_intersection(h, j)
By line_intersection_definition on orthocenter(C, D, G), h, j we get orthocenter(C, D, G) == line_intersection(h, j)
By perpendicular_line_definition on orthocenter(A, B, F), h, altitude(E, B, D) we get h == perpendicular_line(orthocenter(A, B, F), altitude(E, B, D))
By perpendicular_line_definition on D, i, altitude(G, C, D) we get i == perpendicular_line(D, altitude(G, C, D))
By line_intersection_definition on C, i, Line(A, C) we get C == line_intersection(i, Line(A, C))
By perpendicular_line_definition on D, Line(D, H), altitude(G, D, H) we get Line(D, H) == perpendicular_line(D, altitude(G, D, H))
By perpendicular_line_definition on A, Line(A, B), altitude(F, A, B) we get Line(A, B) == perpendicular_line(A, altitude(F, A, B))
By perpendicular_line_definition on orthocenter(C, D, G), h, altitude(E, B, D) we get h == perpendicular_line(orthocenter(C, D, G), altitude(E, B, D))
By perpendicular_line_definition on E, f, altitude(G, B, C) we get f == perpendicular_line(E, altitude(G, B, C))
By perpendicular_line_definition on orthocenter(B, G, H), altitude(G, B, H), Line(B, H) we get altitude(G, B, H) == perpendicular_line(orthocenter(B, G, H), Line(B, H))
By perpendicular_line_definition on C, f, altitude(G, B, C) we get f == perpendicular_line(C, altitude(G, B, C))
By perpendicular_line_definition on B, Line(B, H), altitude(G, B, H) we get Line(B, H) == perpendicular_line(B, altitude(G, B, H))
By perpendicular_line_definition on D, i, altitude(E, C, D) we get i == perpendicular_line(D, altitude(E, C, D))
By perpendicular_line_definition on B, f, altitude(G, B, C) we get f == perpendicular_line(B, altitude(G, B, C))
By concurrent_sufficient_conditions on Line(D, E), g, h we get concurrent(g, h, Line(D, E))
By perpendicular_line_definition on orthocenter(B, C, G), h, j we get h == perpendicular_line(orthocenter(B, C, G), j)
By perpendicular_line_definition on orthocenter(F, G, H), altitude(G, F, H), Line(F, H) we get altitude(G, F, H) == perpendicular_line(orthocenter(F, G, H), Line(F, H))
By perpendicular_line_definition on orthocenter(A, D, F), h, Line(A, F) we get h == perpendicular_line(orthocenter(A, D, F), Line(A, F))
By perpendicular_line_definition on F, h, altitude(E, B, D) we get h == perpendicular_line(F, altitude(E, B, D))
By line_intersection_definition on E, k, Line(D, E) we get E == line_intersection(k, Line(D, E))
By perpendicular_line_definition on H, Line(B, H), altitude(G, B, H) we get Line(B, H) == perpendicular_line(H, altitude(G, B, H))
By concurrent_sufficient_conditions on g, Line(D, E), i we get concurrent(g, i, Line(D, E))
By perpendicular_line_definition on H, Line(D, H), altitude(G, D, H) we get Line(D, H) == perpendicular_line(H, altitude(G, D, H))
By perpendicular_line_definition on orthocenter(B, C, D), j, h we get j == perpendicular_line(orthocenter(B, C, D), h)
By concurrent_sufficient_conditions on Line(A, F), Line(A, B), g we get concurrent(g, Line(A, B), Line(A, F))
By perpendicular_line_definition on orthocenter(A, B, F), h, j we get h == perpendicular_line(orthocenter(A, B, F), j)
By perpendicular_line_definition on orthocenter(A, D, F), Line(A, F), h we get Line(A, F) == perpendicular_line(orthocenter(A, D, F), h)
By concurrent_sufficient_conditions on k, Line(D, E), f we get concurrent(f, k, Line(D, E))
By perpendicular_line_definition on orthocenter(C, F, G), j, h we get j == perpendicular_line(orthocenter(C, F, G), h)
By perpendicular_line_definition on orthocenter(B, G, H), h, Line(A, F) we get h == perpendicular_line(orthocenter(B, G, H), Line(A, F))
By perpendicular_line_definition on orthocenter(B, D, E), altitude(E, B, D), h we get altitude(E, B, D) == perpendicular_line(orthocenter(B, D, E), h)
By perpendicular_line_definition on orthocenter(B, C, G), h, Line(A, F) we get h == perpendicular_line(orthocenter(B, C, G), Line(A, F))
By perpendicular_line_definition on orthocenter(C, F, G), h, altitude(E, B, D) we get h == perpendicular_line(orthocenter(C, F, G), altitude(E, B, D))
By line_unique_intersection_v0 on j, h, orthocenter(F, G, H), orthocenter(D, G, H) we get orthocenter(D, G, H) == orthocenter(F, G, H)
By perpendicular_line_definition on orthocenter(D, G, H), h, j we get h == perpendicular_line(orthocenter(D, G, H), j)
By line_intersection_definition on A, Line(A, C), g we get A == line_intersection(g, Line(A, C))
By perpendicular_line_definition on orthocenter(C, D, E), altitude(E, C, D), i we get altitude(E, C, D) == perpendicular_line(orthocenter(C, D, E), i)
By perpendicular_line_definition on orthocenter(C, D, G), j, h we get j == perpendicular_line(orthocenter(C, D, G), h)
By perpendicular_line_definition on orthocenter(B, C, G), j, h we get j == perpendicular_line(orthocenter(B, C, G), h)
By perpendicular_line_definition on orthocenter(D, G, H), j, h we get j == perpendicular_line(orthocenter(D, G, H), h)
By perpendicular_line_definition on orthocenter(D, G, H), altitude(G, D, H), Line(D, H) we get altitude(G, D, H) == perpendicular_line(orthocenter(D, G, H), Line(D, H))
By perpendicular_line_definition on orthocenter(C, D, G), h, Line(A, F) we get h == perpendicular_line(orthocenter(C, D, G), Line(A, F))
By perpendicular_line_definition on C, i, altitude(E, C, D) we get i == perpendicular_line(C, altitude(E, C, D))
By perpendicular_line_definition on orthocenter(F, G, H), h, Line(A, F) we get h == perpendicular_line(orthocenter(F, G, H), Line(A, F))
By line_intersection_definition on D, g, Line(D, E) we get D == line_intersection(g, Line(D, E))
By perpendicular_line_definition on orthocenter(C, D, E), Line(D, E), f we get Line(D, E) == perpendicular_line(orthocenter(C, D, E), f)
By perpendicular_line_definition on F, Line(F, H), altitude(G, F, H) we get Line(F, H) == perpendicular_line(F, altitude(G, F, H))
By perpendicular_line_definition on orthocenter(C, F, G), h, Line(A, F) we get h == perpendicular_line(orthocenter(C, F, G), Line(A, F))
By perpendicular_line_definition on orthocenter(B, C, G), h, altitude(E, B, D) we get h == perpendicular_line(orthocenter(B, C, G), altitude(E, B, D))
By perpendicular_line_definition on orthocenter(B, C, G), altitude(G, B, C), f we get altitude(G, B, C) == perpendicular_line(orthocenter(B, C, G), f)
By perpendicular_line_definition on orthocenter(C, F, G), h, j we get h == perpendicular_line(orthocenter(C, F, G), j)
By perpendicular_line_definition on G, h, altitude(E, B, D) we get h == perpendicular_line(G, altitude(E, B, D))
By perpendicular_line_definition on orthocenter(D, G, H), h, altitude(E, B, D) we get h == perpendicular_line(orthocenter(D, G, H), altitude(E, B, D))
By concurrent_sufficient_conditions on Line(A, C), i, f we get concurrent(f, i, Line(A, C))
By perpendicular_line_definition on A, Line(A, G), altitude(F, A, G) we get Line(A, G) == perpendicular_line(A, altitude(F, A, G))
By perpendicular_line_definition on orthocenter(A, B, F), Line(A, F), h we get Line(A, F) == perpendicular_line(orthocenter(A, B, F), h)
By perpendicular_line_definition on orthocenter(A, D, F), altitude(F, A, D), g we get altitude(F, A, D) == perpendicular_line(orthocenter(A, D, F), g)
By perpendicular_line_definition on orthocenter(F, G, H), j, h we get j == perpendicular_line(orthocenter(F, G, H), h)
By perpendicular_line_definition on A, g, altitude(F, A, D) we get g == perpendicular_line(A, altitude(F, A, D))
By perpendicular_line_definition on orthocenter(A, D, F), h, j we get h == perpendicular_line(orthocenter(A, D, F), j)
By perpendicular_line_definition on orthocenter(A, F, G), Line(A, F), h we get Line(A, F) == perpendicular_line(orthocenter(A, F, G), h)
By perpendicular_line_definition on orthocenter(A, F, G), h, j we get h == perpendicular_line(orthocenter(A, F, G), j)
By line_intersection_definition on A, Line(A, C), Line(A, B) we get A == line_intersection(Line(A, B), Line(A, C))
By perpendicular_line_definition on orthocenter(B, G, H), h, altitude(E, B, D) we get h == perpendicular_line(orthocenter(B, G, H), altitude(E, B, D))
By perpendicular_line_definition on orthocenter(A, F, G), h, altitude(E, B, D) we get h == perpendicular_line(orthocenter(A, F, G), altitude(E, B, D))
By perpendicular_line_definition on F, Line(C, F), altitude(G, C, F) we get Line(C, F) == perpendicular_line(F, altitude(G, C, F))
By line_intersection_definition on A, Line(A, B), Line(A, F) we get A == line_intersection(Line(A, B), Line(A, F))
By line_intersection_definition on orthocenter(B, C, D), Line(D, E), j we get orthocenter(B, C, D) == line_intersection(j, Line(D, E))
By perpendicular_line_definition on orthocenter(B, G, H), j, h we get j == perpendicular_line(orthocenter(B, G, H), h)
By perpendicular_line_definition on B, Line(A, B), altitude(F, A, B) we get Line(A, B) == perpendicular_line(B, altitude(F, A, B))
By concurrent_sufficient_conditions on Line(D, E), g, i we get concurrent(g, i, Line(D, E))
By line_intersection_definition on A, Line(A, C), Line(A, F) we get A == line_intersection(Line(A, C), Line(A, F))
By perpendicular_line_definition on orthocenter(A, F, G), altitude(F, A, G), Line(A, G) we get altitude(F, A, G) == perpendicular_line(orthocenter(A, F, G), Line(A, G))
By perpendicular_line_definition on orthocenter(A, B, F), altitude(F, A, B), Line(A, B) we get altitude(F, A, B) == perpendicular_line(orthocenter(A, B, F), Line(A, B))
By perpendicular_line_definition on orthocenter(A, B, F), h, Line(A, F) we get h == perpendicular_line(orthocenter(A, B, F), Line(A, F))
By perpendicular_line_definition on orthocenter(B, G, H), h, j we get h == perpendicular_line(orthocenter(B, G, H), j)
By perpendicular_line_definition on D, g, altitude(F, A, D) we get g == perpendicular_line(D, altitude(F, A, D))
By perpendicular_line_definition on orthocenter(D, G, H), h, Line(A, F) we get h == perpendicular_line(orthocenter(D, G, H), Line(A, F))
By concurrent_sufficient_conditions on g, Line(D, E), h we get concurrent(g, h, Line(D, E))
By concurrent_sufficient_conditions on Line(A, B), Line(A, F), g we get concurrent(g, Line(A, B), Line(A, F))
By line_unique_intersection_v0 on h, j, orthocenter(C, F, G), orthocenter(D, G, H) we get orthocenter(C, F, G) == orthocenter(D, G, H)
By perpendicular_line_definition on orthocenter(C, F, G), altitude(G, C, F), Line(C, F) we get altitude(G, C, F) == perpendicular_line(orthocenter(C, F, G), Line(C, F))
By perpendicular_line_definition on orthocenter(C, D, E), f, Line(D, E) we get f == perpendicular_line(orthocenter(C, D, E), Line(D, E))
By concurrent_sufficient_conditions on Line(D, E), k, f we get concurrent(f, k, Line(D, E))
By perpendicular_line_definition on D, h, altitude(E, B, D) we get h == perpendicular_line(D, altitude(E, B, D))
By perpendicular_line_definition on D, i, altitude(B, C, D) we get i == perpendicular_line(D, altitude(B, C, D))
By line_unique_intersection_v0 on Line(D, E), f, E, orthocenter(B, D, E) we get E == orthocenter(B, D, E)
By perpendicular_line_definition on orthocenter(C, D, E), f, altitude(G, B, C) we get f == perpendicular_line(orthocenter(C, D, E), altitude(G, B, C))
By perpendicular_line_definition on orthocenter(F, G, H), h, j we get h == perpendicular_line(orthocenter(F, G, H), j)
By perpendicular_line_definition on C, i, altitude(B, C, D) we get i == perpendicular_line(C, altitude(B, C, D))
By perpendicular_line_definition on orthocenter(B, D, E), Line(D, E), f we get Line(D, E) == perpendicular_line(orthocenter(B, D, E), f)
By perpendicular_line_definition on B, h, altitude(E, B, D) we get h == perpendicular_line(B, altitude(E, B, D))
By concurrent_sufficient_conditions on i, Line(A, C), f we get concurrent(f, i, Line(A, C))
By perpendicular_line_definition on orthocenter(A, D, F), h, altitude(E, B, D) we get h == perpendicular_line(orthocenter(A, D, F), altitude(E, B, D))
By perpendicular_line_definition on orthocenter(C, D, G), h, j we get h == perpendicular_line(orthocenter(C, D, G), j)
By perpendicular_line_definition on orthocenter(B, D, E), f, altitude(G, B, C) we get f == perpendicular_line(orthocenter(B, D, E), altitude(G, B, C))
By perpendicular_line_definition on orthocenter(B, C, D), Line(D, E), f we get Line(D, E) == perpendicular_line(orthocenter(B, C, D), f)
By perpendicular_line_definition on G, Line(A, G), altitude(F, A, G) we get Line(A, G) == perpendicular_line(G, altitude(F, A, G))
By perpendicular_line_definition on orthocenter(C, D, G), altitude(G, C, D), i we get altitude(G, C, D) == perpendicular_line(orthocenter(C, D, G), i)
By perpendicular_line_definition on orthocenter(A, F, G), h, Line(A, F) we get h == perpendicular_line(orthocenter(A, F, G), Line(A, F))
By perpendicular_line_definition on orthocenter(B, C, D), altitude(B, C, D), i we get altitude(B, C, D) == perpendicular_line(orthocenter(B, C, D), i)
By perpendicular_line_definition on H, Line(F, H), altitude(G, F, H) we get Line(F, H) == perpendicular_line(H, altitude(G, F, H))
By concurrent_sufficient_conditions on Line(A, C), i, j we get concurrent(i, j, Line(A, C))
By perpendicular_line_definition on orthocenter(B, D, E), f, Line(D, E) we get f == perpendicular_line(orthocenter(B, D, E), Line(D, E))
By perpendicular_line_definition on C, Line(C, F), altitude(G, C, F) we get Line(C, F) == perpendicular_line(C, altitude(G, C, F))
By line_unique_intersection_v0 on j, h, orthocenter(B, G, H), orthocenter(D, G, H) we get orthocenter(B, G, H) == orthocenter(D, G, H)
By perpendicular_line_definition on C, i, altitude(G, C, D) we get i == perpendicular_line(C, altitude(G, C, D))
By concurrent_sufficient_conditions on i, Line(A, C), j we get concurrent(i, j, Line(A, C))
By perpendicular_line_definition on orthocenter(F, G, H), h, altitude(E, B, D) we get h == perpendicular_line(orthocenter(F, G, H), altitude(E, B, D))
By line_unique_intersection_v0 on Line(A, F), h, orthocenter(A, B, F), F we get F == orthocenter(A, B, F)
By line_unique_intersection_v0 on h, j, orthocenter(F, G, H), orthocenter(B, C, G) we get orthocenter(B, C, G) == orthocenter(F, G, H)
By line_unique_intersection_v0 on j, h, orthocenter(B, C, G), G we get G == orthocenter(B, C, G)
By line_unique_intersection_v0 on h, j, G, orthocenter(D, G, H) we get G == orthocenter(D, G, H)
By line_unique_intersection_v0 on Line(A, F), h, orthocenter(A, F, G), orthocenter(A, B, F) we get orthocenter(A, B, F) == orthocenter(A, F, G)
By line_unique_intersection_v0 on h, j, orthocenter(C, F, G), G we get G == orthocenter(C, F, G)
By line_unique_intersection_v0 on j, h, orthocenter(B, C, G), orthocenter(C, D, G) we get orthocenter(B, C, G) == orthocenter(C, D, G)
By line_unique_intersection_v0 on h, j, orthocenter(D, G, H), orthocenter(B, C, G) we get orthocenter(B, C, G) == orthocenter(D, G, H)
By line_unique_intersection_v0 on Line(A, F), h, orthocenter(A, D, F), orthocenter(A, B, F) we get orthocenter(A, B, F) == orthocenter(A, D, F)
By line_unique_intersection_v0 on j, h, orthocenter(B, G, H), orthocenter(B, C, G) we get orthocenter(B, C, G) == orthocenter(B, G, H)
By line_unique_intersection_v0 on h, j, G, orthocenter(F, G, H) we get G == orthocenter(F, G, H)
By line_unique_intersection_v0 on Line(D, E), f, E, orthocenter(C, D, E) we get E == orthocenter(C, D, E)
By line_unique_intersection_v0 on Line(A, F), h, orthocenter(A, D, F), F we get F == orthocenter(A, D, F)
By line_unique_intersection_v0 on j, h, G, orthocenter(B, G, H) we get G == orthocenter(B, G, H)
By line_unique_intersection_v0 on Line(D, E), f, orthocenter(C, D, E), orthocenter(B, D, E) we get orthocenter(B, D, E) == orthocenter(C, D, E)
By line_unique_intersection_v0 on j, h, orthocenter(C, F, G), orthocenter(B, G, H) we get orthocenter(B, G, H) == orthocenter(C, F, G)
By line_unique_intersection_v0 on h, j, orthocenter(C, F, G), orthocenter(C, D, G) we get orthocenter(C, D, G) == orthocenter(C, F, G)
By line_unique_intersection_v0 on j, h, G, orthocenter(C, D, G) we get G == orthocenter(C, D, G)
By line_unique_intersection_v0 on j, h, orthocenter(B, G, H), orthocenter(C, D, G) we get orthocenter(B, G, H) == orthocenter(C, D, G)
By line_unique_intersection_v0 on h, j, orthocenter(C, F, G), orthocenter(F, G, H) we get orthocenter(C, F, G) == orthocenter(F, G, H)
By line_unique_intersection_v0 on h, j, orthocenter(F, G, H), orthocenter(C, D, G) we get orthocenter(C, D, G) == orthocenter(F, G, H)
By line_unique_intersection_v0 on Line(A, F), h, orthocenter(A, D, F), orthocenter(A, F, G) we get orthocenter(A, D, F) == orthocenter(A, F, G)
By line_unique_intersection_v0 on h, j, orthocenter(F, G, H), orthocenter(B, G, H) we get orthocenter(B, G, H) == orthocenter(F, G, H)
By line_unique_intersection_v0 on j, h, orthocenter(C, F, G), orthocenter(B, C, G) we get orthocenter(B, C, G) == orthocenter(C, F, G)
By line_unique_intersection_v0 on h, Line(A, F), F, orthocenter(A, F, G) we get F == orthocenter(A, F, G)
By line_unique_intersection_v0 on h, j, orthocenter(C, D, G), orthocenter(D, G, H) we get orthocenter(C, D, G) == orthocenter(D, G, H)
By between_implies_orientation on B, D, G, F we get orientation(B, D, G) == orientation(B, G, F) mod 360, orientation(B, D, F) == orientation(B, D, G) mod 360
By between_implies_orientation on D, F, G, B we get orientation(B, D, G) == orientation(D, F, G) mod 360, orientation(B, D, F) == orientation(D, F, G) mod 360
By between_implies_orientation on F, G, D, B we get orientation(B, F, D) == orientation(D, F, G) mod 360, orientation(B, F, G) == orientation(D, F, G) mod 360
By between_imply_not_between on F, D, B we get collinear_and_not_between(B, F, D)
By between_implies_orientation on G, F, D, B we get orientation(B, G, D) == orientation(D, G, F) mod 360, orientation(B, G, F) == orientation(D, G, F) mod 360
By between_implies_orientation on G, B, D, F we get orientation(B, D, G) == orientation(D, F, G) mod 360, orientation(B, D, G) == orientation(B, F, G) mod 360
By between_implies_orientation on D, B, G, F we get orientation(B, G, D) == orientation(D, G, F) mod 360, orientation(B, F, D) == orientation(B, G, D) mod 360
By between_implies_orientation on B, F, G, D we get orientation(B, F, G) == orientation(B, G, D) mod 360, orientation(B, F, D) == orientation(B, F, G) mod 360
By between_imply_not_between on B, D, F we get collinear_and_not_between(D, B, F)
By between_imply_not_between on B, G, F we get collinear_and_not_between(F, B, G)
By between_implies_orientation on F, B, D, G we get orientation(B, D, F) == orientation(D, G, F) mod 360, orientation(B, D, F) == orientation(B, G, F) mod 360
By between_imply_not_between on B, D, G we get collinear_and_not_between(D, B, G)
By between_imply_not_between on D, G, F we get collinear_and_not_between(F, D, G)
By between_imply_not_between on F, G, D we get collinear_and_not_between(D, F, G)
By between_imply_not_between on F, G, B we get collinear_and_not_between(B, F, G)
By parallel_line_definition on orthocenter(D, G, H), j, Line(A, F) we get j == parallel_line(orthocenter(D, G, H), Line(A, F))
By between_imply_not_between on G, D, B we get collinear_and_not_between(B, G, D)
By parallel_line_definition on orthocenter(A, F, G), Line(A, F), j we get Line(A, F) == parallel_line(orthocenter(A, F, G), j)
By parallel_line_definition on orthocenter(A, D, F), Line(A, F), j we get Line(A, F) == parallel_line(orthocenter(A, D, F), j)
By parallel_line_definition on orthocenter(C, D, G), j, Line(A, F) we get j == parallel_line(orthocenter(C, D, G), Line(A, F))
By parallel_line_definition on orthocenter(B, C, D), j, Line(A, F) we get j == parallel_line(orthocenter(B, C, D), Line(A, F))
By parallel_line_definition on orthocenter(A, B, F), Line(A, F), j we get Line(A, F) == parallel_line(orthocenter(A, B, F), j)
By parallel_line_definition on orthocenter(C, F, G), j, Line(A, F) we get j == parallel_line(orthocenter(C, F, G), Line(A, F))
By parallel_line_definition on orthocenter(B, G, H), j, Line(A, F) we get j == parallel_line(orthocenter(B, G, H), Line(A, F))
By parallel_line_definition on orthocenter(F, G, H), j, Line(A, F) we get j == parallel_line(orthocenter(F, G, H), Line(A, F))
By parallel_line_definition on orthocenter(B, C, G), j, Line(A, F) we get j == parallel_line(orthocenter(B, C, G), Line(A, F))
By same_angle_v2 on G, F, B, A we get angle(F, G, A) == angle(B, G, A) + 180 mod 360
By different_points_v1 on D, H we get 0 != distance(D, H)
By different_points_v1 on H, F we get 0 != distance(F, H)
By different_points_v1 on C, F we get 0 != distance(C, F)
By same_angle_v2 on D, B, G, H we get angle(B, D, H) == angle(G, D, H) + 180 mod 360
By different_points_v1 on B, H we get 0 != distance(B, H)
By different_points_v1 on G, A we get 0 != distance(A, G)
By same_angle_v1 on C, B, E, F we get angle(B, C, F) == angle(E, C, F) mod 360
By same_angle_v1 on D, F, G, H we get angle(F, D, H) == angle(G, D, H) mod 360
By same_angle_v0 on F, G, B, C we get angle(B, F, C) == angle(G, F, C) mod 360
By same_angle_v0 on G, C, H, A we get angle(C, G, A) == angle(H, G, A) mod 360
By same_angle_v2 on D, B, F, H we get angle(B, D, H) == angle(F, D, H) + 180 mod 360
By same_angle_v3 on C, H, G, F we get angle(H, C, F) == angle(G, C, F) + 180 mod 360
By same_angle_v0 on H, C, G, B we get angle(C, H, B) == angle(G, H, B) mod 360
By same_angle_v0 on H, G, C, D we get angle(C, H, D) == angle(G, H, D) mod 360
By same_angle_v0 on F, D, G, H we get angle(D, F, H) == angle(G, F, H) mod 360
By same_angle_v1 on B, D, G, H we get angle(D, B, H) == angle(G, B, H) mod 360
By same_angle_v0 on F, D, B, H we get angle(B, F, H) == angle(D, F, H) mod 360
By same_angle_v1 on B, C, E, H we get angle(C, B, H) == angle(E, B, H) mod 360
By same_angle_v0 on F, D, G, C we get angle(D, F, C) == angle(G, F, C) mod 360
By same_angle_v2 on G, F, D, A we get angle(F, G, A) == angle(D, G, A) + 180 mod 360
By same_angle_v1 on H, G, C, F we get angle(C, H, F) == angle(G, H, F) mod 360
By same_angle_v0 on F, B, G, H we get angle(B, F, H) == angle(G, F, H) mod 360
By in_imply_collinear on orthocenter(F, G, H), B, D we get collinear(B, D, orthocenter(F, G, H))
By in_imply_collinear on orthocenter(C, F, G), D, G we get collinear(D, G, orthocenter(C, F, G))
By same_angle_v1 on B, D, F, H we get angle(D, B, H) == angle(F, B, H) mod 360
By in_imply_collinear on orthocenter(B, C, G), H, G we get collinear(G, H, orthocenter(B, C, G))
By same_angle_v1 on G, B, D, A we get angle(B, G, A) == angle(D, G, A) mod 360
By in_imply_collinear on orthocenter(D, G, H), G, C we get collinear(C, G, orthocenter(D, G, H))
By same_angle_v0 on F, D, B, C we get angle(B, F, C) == angle(D, F, C) mod 360
By same_angle_v1 on B, F, G, H we get angle(F, B, H) == angle(G, B, H) mod 360
By in_imply_collinear on orthocenter(F, G, H), C, G we get collinear(C, G, orthocenter(F, G, H))
By in_imply_collinear on orthocenter(A, B, F), D, F we get collinear(D, F, orthocenter(A, B, F))
By divide_by_2_mod_180_v3 on B, D, A, E, D, C we get angle(B, D, A) == angle(E, D, C) + 180 mod 360
By in_imply_collinear on orthocenter(B, C, D), G, C we get collinear(C, G, orthocenter(B, C, D))
By in_imply_collinear on orthocenter(D, G, H), B, F we get collinear(B, F, orthocenter(D, G, H))
By in_imply_collinear on orthocenter(A, D, F), D, G we get collinear(D, G, orthocenter(A, D, F))
By in_imply_collinear on orthocenter(B, C, G), D, B we get collinear(B, D, orthocenter(B, C, G))
By in_imply_collinear on orthocenter(B, G, H), G, H we get collinear(G, H, orthocenter(B, G, H))
By in_imply_collinear on orthocenter(B, C, G), G, B we get collinear(B, G, orthocenter(B, C, G))
By in_imply_collinear on orthocenter(A, B, F), B, F we get collinear(B, F, orthocenter(A, B, F))
By in_imply_collinear on orthocenter(C, D, E), D, E we get collinear(D, E, orthocenter(C, D, E))
By in_imply_collinear on orthocenter(A, B, F), G, B we get collinear(B, G, orthocenter(A, B, F))
By in_imply_collinear on orthocenter(C, F, G), F, D we get collinear(D, F, orthocenter(C, F, G))
By in_imply_collinear on orthocenter(B, G, H), D, F we get collinear(D, F, orthocenter(B, G, H))
By in_imply_collinear on orthocenter(B, G, H), G, B we get collinear(B, G, orthocenter(B, G, H))
By in_imply_collinear on orthocenter(C, D, G), H, C we get collinear(C, H, orthocenter(C, D, G))
By in_imply_collinear on orthocenter(F, G, H), G, D we get collinear(D, G, orthocenter(F, G, H))
By in_imply_collinear on orthocenter(B, G, H), C, G we get collinear(C, G, orthocenter(B, G, H))
By in_imply_collinear on orthocenter(B, D, E), E, C we get collinear(C, E, orthocenter(B, D, E))
By in_imply_collinear on orthocenter(C, D, E), E, C we get collinear(C, E, orthocenter(C, D, E))
By in_imply_collinear on orthocenter(F, G, H), F, G we get collinear(F, G, orthocenter(F, G, H))
By in_imply_collinear on orthocenter(D, G, H), F, G we get collinear(F, G, orthocenter(D, G, H))
By in_imply_collinear on orthocenter(A, D, F), G, F we get collinear(F, G, orthocenter(A, D, F))
By divide_by_2_mod_180_v3 on H, C, D, B, A, D we get angle(H, C, D) == angle(B, A, D) + 180 mod 360
By in_imply_collinear on orthocenter(B, C, G), G, C we get collinear(C, G, orthocenter(B, C, G))
By in_imply_collinear on orthocenter(B, D, E), B, E we get collinear(B, E, orthocenter(B, D, E))
By in_imply_collinear on orthocenter(C, D, G), G, H we get collinear(G, H, orthocenter(C, D, G))
By in_imply_collinear on orthocenter(B, C, G), B, F we get collinear(B, F, orthocenter(B, C, G))
By in_imply_collinear on orthocenter(A, B, F), D, B we get collinear(B, D, orthocenter(A, B, F))
By divide_by_2_mod_180_v3 on A, D, F, H, E, D we get angle(A, D, F) == angle(H, E, D) + 180 mod 360
By in_imply_collinear on orthocenter(D, G, H), B, G we get collinear(B, G, orthocenter(D, G, H))
By in_imply_collinear on orthocenter(A, D, F), G, B we get collinear(B, G, orthocenter(A, D, F))
By in_imply_collinear on orthocenter(D, G, H), F, D we get collinear(D, F, orthocenter(D, G, H))
By in_imply_collinear on orthocenter(B, G, H), G, F we get collinear(F, G, orthocenter(B, G, H))
By in_imply_collinear on orthocenter(C, F, G), B, F we get collinear(B, F, orthocenter(C, F, G))
By divide_by_2_mod_180_v0 on E, D, C, G, D, A we get angle(E, D, C) == angle(G, D, A) mod 360
By divide_by_2_mod_180_v0 on G, C, D, B, A, D we get angle(B, A, D) == angle(G, C, D) mod 360
By in_imply_collinear on orthocenter(C, F, G), B, D we get collinear(B, D, orthocenter(C, F, G))
By divide_by_2_mod_180_v2 on D, C, H, C, A, D we get angle(D, C, H) == angle(C, A, D) + 180 mod 360
By in_imply_collinear on orthocenter(C, D, G), B, F we get collinear(B, F, orthocenter(C, D, G))
By in_imply_collinear on orthocenter(B, C, D), H, C we get collinear(C, H, orthocenter(B, C, D))
By in_imply_collinear on orthocenter(C, D, G), G, B we get collinear(B, G, orthocenter(C, D, G))
By in_imply_collinear on orthocenter(C, D, G), C, G we get collinear(C, G, orthocenter(C, D, G))
By in_imply_collinear on orthocenter(F, G, H), F, D we get collinear(D, F, orthocenter(F, G, H))
By in_imply_collinear on orthocenter(A, D, F), F, D we get collinear(D, F, orthocenter(A, D, F))
By in_imply_collinear on orthocenter(A, F, G), D, B we get collinear(B, D, orthocenter(A, F, G))
By divide_by_2_mod_180_v0 on D, A, C, G, H, E we get angle(D, A, C) == angle(G, H, E) mod 360
By in_imply_collinear on orthocenter(B, G, H), G, D we get collinear(D, G, orthocenter(B, G, H))
By in_imply_collinear on orthocenter(B, D, E), B, C we get collinear(B, C, orthocenter(B, D, E))
By in_imply_collinear on orthocenter(A, D, F), F, A we get collinear(A, F, orthocenter(A, D, F))
By in_imply_collinear on orthocenter(C, D, E), B, E we get collinear(B, E, orthocenter(C, D, E))
By divide_by_2_mod_180_v1 on D, A, B, E, H, C we get angle(D, A, B) == angle(E, H, C) mod 360
By in_imply_collinear on orthocenter(B, C, G), F, D we get collinear(D, F, orthocenter(B, C, G))
By in_imply_collinear on orthocenter(B, G, H), B, D we get collinear(B, D, orthocenter(B, G, H))
By in_imply_collinear on orthocenter(B, D, E), E, D we get collinear(D, E, orthocenter(B, D, E))
By in_imply_collinear on orthocenter(A, B, F), D, G we get collinear(D, G, orthocenter(A, B, F))
By divide_by_2_mod_180_v3 on A, D, G, H, E, D we get angle(A, D, G) == angle(H, E, D) + 180 mod 360
By in_imply_collinear on orthocenter(C, D, G), F, D we get collinear(D, F, orthocenter(C, D, G))
By in_imply_collinear on orthocenter(A, B, F), G, F we get collinear(F, G, orthocenter(A, B, F))
By in_imply_collinear on orthocenter(C, F, G), F, G we get collinear(F, G, orthocenter(C, F, G))
By in_imply_collinear on orthocenter(D, G, H), B, D we get collinear(B, D, orthocenter(D, G, H))
By in_imply_collinear on orthocenter(D, G, H), G, H we get collinear(G, H, orthocenter(D, G, H))
By in_imply_collinear on orthocenter(A, F, G), B, G we get collinear(B, G, orthocenter(A, F, G))
By in_imply_collinear on orthocenter(F, G, H), H, C we get collinear(C, H, orthocenter(F, G, H))
By line_inequality on Line(B, H), i, H we get i != Line(B, H)
By divide_by_2_mod_180_v3 on C, D, E, A, D, B we get angle(C, D, E) == angle(A, D, B) + 180 mod 360
By divide_by_2_mod_180_v2 on B, A, D, H, C, D we get angle(B, A, D) == angle(H, C, D) + 180 mod 360
By in_imply_collinear on orthocenter(B, C, G), H, C we get collinear(C, H, orthocenter(B, C, G))
By in_imply_collinear on orthocenter(C, F, G), G, B we get collinear(B, G, orthocenter(C, F, G))
By in_imply_collinear on orthocenter(C, F, G), H, G we get collinear(G, H, orthocenter(C, F, G))
By divide_by_2_mod_180_v3 on D, E, H, F, D, A we get angle(D, E, H) == angle(F, D, A) + 180 mod 360
By divide_by_2_mod_180_v3 on C, A, D, D, C, H we get angle(C, A, D) == angle(D, C, H) + 180 mod 360
By in_imply_collinear on orthocenter(C, F, G), C, H we get collinear(C, H, orthocenter(C, F, G))
By divide_by_2_mod_180_v0 on G, C, D, D, A, C we get angle(D, A, C) == angle(G, C, D) mod 360
By in_imply_collinear on orthocenter(A, F, G), B, F we get collinear(B, F, orthocenter(A, F, G))
By in_imply_collinear on orthocenter(A, B, F), A, F we get collinear(A, F, orthocenter(A, B, F))
By in_imply_collinear on orthocenter(A, F, G), D, F we get collinear(D, F, orthocenter(A, F, G))
By in_imply_collinear on orthocenter(C, F, G), G, C we get collinear(C, G, orthocenter(C, F, G))
By in_imply_collinear on orthocenter(B, G, H), H, C we get collinear(C, H, orthocenter(B, G, H))
By in_imply_collinear on orthocenter(F, G, H), B, G we get collinear(B, G, orthocenter(F, G, H))
By in_imply_collinear on orthocenter(A, D, F), D, B we get collinear(B, D, orthocenter(A, D, F))
By in_imply_collinear on orthocenter(B, C, G), D, G we get collinear(D, G, orthocenter(B, C, G))
By divide_by_2_mod_180_v1 on C, A, D, D, C, G we get angle(C, A, D) == angle(D, C, G) mod 360
By in_imply_collinear on orthocenter(F, G, H), B, F we get collinear(B, F, orthocenter(F, G, H))
By in_imply_collinear on orthocenter(B, C, D), E, D we get collinear(D, E, orthocenter(B, C, D))
By in_imply_collinear on orthocenter(B, C, G), G, F we get collinear(F, G, orthocenter(B, C, G))
By in_imply_collinear on orthocenter(A, F, G), F, A we get collinear(A, F, orthocenter(A, F, G))
By in_imply_collinear on orthocenter(C, D, E), C, B we get collinear(B, C, orthocenter(C, D, E))
By in_imply_collinear on orthocenter(A, D, F), B, F we get collinear(B, F, orthocenter(A, D, F))
By in_imply_collinear on orthocenter(B, G, H), B, F we get collinear(B, F, orthocenter(B, G, H))
By in_imply_collinear on orthocenter(C, D, G), B, D we get collinear(B, D, orthocenter(C, D, G))
By in_imply_collinear on orthocenter(A, F, G), D, G we get collinear(D, G, orthocenter(A, F, G))
By divide_by_2_mod_180_v1 on A, D, G, C, D, E we get angle(A, D, G) == angle(C, D, E) mod 360
By in_imply_collinear on orthocenter(A, F, G), G, F we get collinear(F, G, orthocenter(A, F, G))
By divide_by_2_mod_180_v1 on A, D, F, C, D, E we get angle(A, D, F) == angle(C, D, E) mod 360
By in_imply_collinear on orthocenter(B, C, D), G, H we get collinear(G, H, orthocenter(B, C, D))
By divide_by_2_mod_180_v2 on D, C, H, D, A, B we get angle(D, C, H) == angle(D, A, B) + 180 mod 360
By divide_by_2_mod_180_v0 on B, A, D, C, H, E we get angle(B, A, D) == angle(C, H, E) mod 360
By in_imply_collinear on orthocenter(C, D, G), G, F we get collinear(F, G, orthocenter(C, D, G))
By line_inequality on Line(C, F), k, F we get k != Line(C, F)
By in_imply_collinear on orthocenter(D, G, H), D, G we get collinear(D, G, orthocenter(D, G, H))
By divide_by_2_mod_180_v2 on A, D, B, C, D, E we get angle(A, D, B) == angle(C, D, E) + 180 mod 360
By in_imply_collinear on orthocenter(D, G, H), H, C we get collinear(C, H, orthocenter(D, G, H))
By line_inequality on altitude(F, A, D), i, F we get i != altitude(F, A, D)
By divide_by_2_mod_180_v3 on D, A, B, D, C, H we get angle(D, A, B) == angle(D, C, H) + 180 mod 360
By in_imply_collinear on orthocenter(F, G, H), G, H we get collinear(G, H, orthocenter(F, G, H))
By between_imply_segment_sum on B, G, F we get distance(B, F) == distance(B, G) + distance(F, G)
By double_perpendicular_and_parallel_v0 on Line(A, F), h, altitude(E, B, D) we get parallel(Line(A, F), altitude(E, B, D))
By divide_by_2_mod_180_v0 on A, D, B, H, E, D we get angle(A, D, B) == angle(H, E, D) mod 360
By divide_by_2_mod_180_v2 on E, D, C, B, D, A we get angle(E, D, C) == angle(B, D, A) + 180 mod 360
By in_imply_collinear on orthocenter(C, D, G), D, G we get collinear(D, G, orthocenter(C, D, G))
By divide_by_2_mod_180_v2 on H, E, D, A, D, F we get angle(H, E, D) == angle(A, D, F) + 180 mod 360
By line_containment_inequality on orthocenter(C, D, G), A, j we get A != orthocenter(C, D, G)
By aa_anti_similarity on C, B, G, A, B, F we get anti_similar_triangles(A, B, F, C, B, G)
By divide_by_2_mod_180_v0 on E, D, C, F, D, A we get angle(E, D, C) == angle(F, D, A) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on E, F, H we get E not in Line(F, H)
By divide_by_2_mod_180_v2 on F, D, A, D, E, H we get angle(F, D, A) == angle(D, E, H) + 180 mod 360
By divide_by_2_mod_180_v1 on E, H, G, D, A, B we get angle(D, A, B) == angle(E, H, G) mod 360
By line_inequality on altitude(G, B, C), g, G we get g != altitude(G, B, C)
By double_perpendicular_and_parallel_v0 on altitude(G, C, D), i, altitude(B, C, D) we get parallel(altitude(B, C, D), altitude(G, C, D))
By divide_by_2_mod_180_v0 on B, A, D, G, H, E we get angle(B, A, D) == angle(G, H, E) mod 360
By line_inequality on Line(F, H), h, H we get h != Line(F, H)
By divide_by_2_mod_180_v2 on D, A, C, H, C, D we get angle(D, A, C) == angle(H, C, D) + 180 mod 360
By divide_by_2_mod_180_v3 on H, C, D, D, A, C we get angle(H, C, D) == angle(D, A, C) + 180 mod 360
By line_inequality on Line(B, H), Line(D, E), B we get Line(B, H) != Line(D, E)
By line_inequality on Line(D, H), h, H we get h != Line(D, H)
By divide_by_2_mod_180_v1 on E, H, C, C, A, D we get angle(C, A, D) == angle(E, H, C) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on C, H, B we get C not in Line(B, H)
By line_containment_inequality on orthocenter(B, C, G), A, h we get A != orthocenter(B, C, G)
By line_containment_inequality on orthocenter(A, D, F), H, Line(A, F) we get H != orthocenter(A, D, F)
By between_imply_segment_sum on F, D, B we get distance(B, F) == distance(D, F) + distance(B, D)
By line_inequality on altitude(E, C, D), Line(A, B), E we get Line(A, B) != altitude(E, C, D)
By line_containment_inequality on orthocenter(C, D, G), D, j we get D != orthocenter(C, D, G)
By double_perpendicular_and_parallel_v0 on altitude(E, C, D), i, altitude(G, C, D) we get parallel(altitude(E, C, D), altitude(G, C, D))
By aa_similarity on A, B, F, D, B, E we get similar_triangles(A, B, F, D, B, E)
By divide_by_2_mod_180_v0 on D, A, C, C, H, E we get angle(C, H, E) == angle(D, A, C) mod 360
By line_inequality on Line(F, H), f, H we get f != Line(F, H)
By divide_by_2_mod_180_v1 on E, H, G, C, A, D we get angle(C, A, D) == angle(E, H, G) mod 360
By divide_by_2_mod_180_v1 on B, D, A, D, E, H we get angle(B, D, A) == angle(D, E, H) mod 360
By double_perpendicular_and_parallel_v0 on altitude(E, B, D), h, j we get parallel(j, altitude(E, B, D))
By line_containment_inequality on orthocenter(C, D, E), F, Line(D, E) we get F != orthocenter(C, D, E)
By double_perpendicular_and_parallel_v0_r on i, altitude(G, C, D), k we get perpendicular(k, altitude(G, C, D))
By line_containment_inequality on orthocenter(A, D, F), G, Line(A, F) we get G != orthocenter(A, D, F)
By divide_by_2_mod_180_v1 on D, C, G, D, A, B we get angle(D, A, B) == angle(D, C, G) mod 360
By line_inequality on Line(C, F), Line(A, B), C we get Line(A, B) != Line(C, F)
By divide_by_2_mod_180_v3 on D, E, H, G, D, A we get angle(D, E, H) == angle(G, D, A) + 180 mod 360
By line_containment_inequality on orthocenter(C, D, E), G, f we get G != orthocenter(C, D, E)
By line_containment_inequality on orthocenter(B, C, D), G, Line(D, E) we get G != orthocenter(B, C, D)
By line_inequality on Line(A, G), k, G we get k != Line(A, G)
By line_containment_inequality on orthocenter(D, G, H), H, h we get H != orthocenter(D, G, H)
By double_perpendicular_and_parallel_v0 on altitude(E, C, D), i, altitude(B, C, D) we get parallel(altitude(B, C, D), altitude(E, C, D))
By divide_by_2_mod_180_v2 on H, E, D, A, D, G we get angle(H, E, D) == angle(A, D, G) + 180 mod 360
By aa_anti_similarity on A, F, B, C, G, B we get anti_similar_triangles(A, B, F, C, B, G)
By line_inequality on altitude(G, D, H), Line(D, E), G we get Line(D, E) != altitude(G, D, H)
By between_imply_segment_sum on B, D, G we get distance(B, G) == distance(B, D) + distance(D, G)
By line_inequality on altitude(B, C, D), j, B we get j != altitude(B, C, D)
By line_inequality on altitude(F, A, B), f, F we get f != altitude(F, A, B)
By line_containment_inequality on orthocenter(C, D, G), F, j we get F != orthocenter(C, D, G)
By line_containment_inequality on orthocenter(A, B, F), H, h we get H != orthocenter(A, B, F)
By line_inequality on altitude(F, A, D), Line(A, B), F we get Line(A, B) != altitude(F, A, D)
By aa_similarity on D, E, B, A, F, B we get similar_triangles(A, B, F, D, B, E)
By double_perpendicular_and_parallel_v0 on altitude(G, B, C), f, Line(D, E) we get parallel(Line(D, E), altitude(G, B, C))
By not_in_line_equivalent_to_not_collinear_v0_r on D, G, A we get D not in Line(A, G)
By line_inequality on altitude(G, C, F), Line(A, B), G we get Line(A, B) != altitude(G, C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on G, H, D we get G not in Line(D, H)
By line_inequality on altitude(G, B, H), i, G we get i != altitude(G, B, H)
By line_inequality on Line(C, F), j, F we get j != Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on C, H, F we get C not in Line(F, H)
By not_in_line_equivalent_to_not_collinear_v0_r on A, B, H we get A not in Line(B, H)
By aa_similarity on A, F, B, D, E, B we get similar_triangles(A, B, F, D, B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on B, F, H we get B not in Line(F, H)
By line_inequality on altitude(G, C, D), Line(D, E), G we get Line(D, E) != altitude(G, C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on B, H, D we get B not in Line(D, H)
By line_containment_inequality on orthocenter(B, C, G), H, h we get H != orthocenter(B, C, G)
By line_inequality on altitude(G, B, H), k, G we get k != altitude(G, B, H)
By line_containment_inequality on orthocenter(A, F, G), E, h we get E != orthocenter(A, F, G)
By line_containment_inequality on orthocenter(B, C, D), D, j we get D != orthocenter(B, C, D)
By line_inequality on Line(D, H), f, H we get f != Line(D, H)
By between_imply_segment_sum on F, G, D we get distance(D, F) == distance(F, G) + distance(D, G)
By line_inequality on Line(A, G), Line(A, C), G we get Line(A, C) != Line(A, G)
By divide_by_2_mod_180_v2 on G, D, A, D, E, H we get angle(G, D, A) == angle(D, E, H) + 180 mod 360
By line_containment_inequality on orthocenter(A, F, G), D, Line(A, F) we get D != orthocenter(A, F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on B, A, G we get B not in Line(A, G)
By line_inequality on Line(A, G), Line(A, F), G we get Line(A, F) != Line(A, G)
By not_in_line_equivalent_to_not_collinear_v0_r on F, H, B we get F not in Line(B, H)
By line_inequality on altitude(F, A, G), Line(A, C), F we get Line(A, C) != altitude(F, A, G)
By line_containment_inequality on orthocenter(B, D, E), G, Line(D, E) we get G != orthocenter(B, D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on G, B, H we get G not in Line(B, H)
By line_inequality on altitude(G, D, H), k, G we get k != altitude(G, D, H)
By line_inequality on altitude(F, A, B), i, F we get i != altitude(F, A, B)
By line_containment_inequality on orthocenter(A, B, F), A, h we get A != orthocenter(A, B, F)
By not_in_line_equivalent_to_not_collinear_v0_r on A, C, F we get A not in Line(C, F)
By aa_anti_similarity on A, B, F, C, B, G we get anti_similar_triangles(A, B, F, C, B, G)
By not_in_line_equivalent_to_not_collinear_v0_r on F, A, G we get F not in Line(A, G)
By aa_anti_similarity on C, G, B, A, F, B we get anti_similar_triangles(A, B, F, C, B, G)
By line_containment_inequality on orthocenter(C, D, E), C, Line(D, E) we get C != orthocenter(C, D, E)
By line_inequality on Line(F, H), j, F we get j != Line(F, H)
By line_inequality on altitude(G, B, C), Line(A, C), G we get Line(A, C) != altitude(G, B, C)
By line_containment_inequality on orthocenter(C, D, E), B, Line(D, E) we get B != orthocenter(C, D, E)
By double_perpendicular_and_parallel_v0_r on i, altitude(E, C, D), k we get perpendicular(k, altitude(E, C, D))
By line_inequality on Line(D, H), Line(A, B), D we get Line(A, B) != Line(D, H)
By double_perpendicular_and_parallel_v0_r on i, altitude(B, C, D), k we get perpendicular(k, altitude(B, C, D))
By not_in_line_equivalent_to_not_collinear_v0_r on E, H, D we get E not in Line(D, H)
By line_inequality on altitude(G, B, H), Line(A, C), G we get Line(A, C) != altitude(G, B, H)
By line_inequality on altitude(F, A, D), j, F we get j != altitude(F, A, D)
By line_inequality on Line(F, H), Line(A, F), H we get Line(A, F) != Line(F, H)
By line_containment_inequality on orthocenter(D, G, H), E, j we get E != orthocenter(D, G, H)
By line_containment_inequality on orthocenter(B, C, G), F, j we get F != orthocenter(B, C, G)
By line_inequality on Line(A, G), Line(D, E), G we get Line(A, G) != Line(D, E)
By line_inequality on altitude(G, B, H), f, G we get f != altitude(G, B, H)
By line_containment_inequality on orthocenter(F, G, H), A, h we get A != orthocenter(F, G, H)
By line_inequality on Line(C, F), h, C we get h != Line(C, F)
By aa_similarity on D, B, E, A, B, F we get similar_triangles(A, B, F, D, B, E)
By line_inequality on altitude(G, C, D), f, G we get f != altitude(G, C, D)
By line_inequality on altitude(G, B, C), Line(A, F), G we get Line(A, F) != altitude(G, B, C)
By line_inequality on altitude(F, A, G), Line(A, B), F we get Line(A, B) != altitude(F, A, G)
By line_containment_inequality on orthocenter(A, F, G), B, Line(A, F) we get B != orthocenter(A, F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on H, A, G we get H not in Line(A, G)
By line_inequality on altitude(G, D, H), g, G we get g != altitude(G, D, H)
By line_inequality on Line(D, H), j, D we get j != Line(D, H)
By line_containment_inequality on orthocenter(B, C, G), E, j we get E != orthocenter(B, C, G)
By line_inequality on altitude(G, D, H), Line(A, C), G we get Line(A, C) != altitude(G, D, H)
By line_containment_inequality on orthocenter(C, F, G), E, h we get E != orthocenter(C, F, G)
By line_containment_inequality on orthocenter(C, D, E), A, Line(D, E) we get A != orthocenter(C, D, E)
By line_containment_inequality on orthocenter(B, D, E), D, f we get D != orthocenter(B, D, E)
By line_containment_inequality on orthocenter(B, G, H), F, j we get F != orthocenter(B, G, H)
By line_containment_inequality on orthocenter(B, C, D), F, Line(D, E) we get F != orthocenter(B, C, D)
By line_containment_inequality on orthocenter(C, F, G), B, j we get B != orthocenter(C, F, G)
By line_inequality on Line(B, H), k, B we get k != Line(B, H)
By line_inequality on Line(B, H), f, H we get f != Line(B, H)
By line_inequality on altitude(G, C, F), Line(A, F), G we get Line(A, F) != altitude(G, C, F)
By line_inequality on altitude(F, A, D), g, F we get g != altitude(F, A, D)
By line_inequality on altitude(F, A, B), k, F we get k != altitude(F, A, B)
By line_inequality on Line(B, H), Line(A, F), H we get Line(A, F) != Line(B, H)
By line_inequality on altitude(F, A, B), j, F we get j != altitude(F, A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on A, H, F we get A not in Line(F, H)
By line_inequality on altitude(E, B, D), j, E we get j != altitude(E, B, D)
By line_inequality on Line(D, H), k, D we get k != Line(D, H)
By line_inequality on altitude(G, F, H), i, G we get i != altitude(G, F, H)
By line_inequality on altitude(G, F, H), Line(D, E), G we get Line(D, E) != altitude(G, F, H)
By line_inequality on altitude(F, A, D), Line(D, E), F we get Line(D, E) != altitude(F, A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on D, H, B we get D not in Line(B, H)
By line_containment_inequality on orthocenter(C, D, E), D, f we get D != orthocenter(C, D, E)
By line_containment_inequality on orthocenter(D, G, H), C, h we get C != orthocenter(D, G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on E, C, F we get E not in Line(C, F)
By line_inequality on altitude(G, B, C), i, G we get i != altitude(G, B, C)
By line_inequality on altitude(G, B, H), g, G we get g != altitude(G, B, H)
By line_containment_inequality on orthocenter(A, D, F), E, Line(A, F) we get E != orthocenter(A, D, F)
By line_containment_inequality on orthocenter(B, G, H), H, h we get H != orthocenter(B, G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on D, H, F we get D not in Line(F, H)
By line_containment_inequality on orthocenter(B, C, G), C, h we get C != orthocenter(B, C, G)
By line_containment_inequality on orthocenter(F, G, H), D, j we get D != orthocenter(F, G, H)
By line_inequality on altitude(G, C, F), i, G we get i != altitude(G, C, F)
By line_inequality on Line(A, G), j, A we get j != Line(A, G)
By line_inequality on Line(B, H), h, H we get h != Line(B, H)
By line_containment_inequality on orthocenter(A, D, F), A, h we get A != orthocenter(A, D, F)
By line_containment_inequality on orthocenter(C, D, G), B, j we get B != orthocenter(C, D, G)
By line_inequality on Line(F, H), i, F we get i != Line(F, H)
By line_containment_inequality on orthocenter(C, D, E), H, Line(D, E) we get H != orthocenter(C, D, E)
By line_inequality on Line(F, H), k, F we get k != Line(F, H)
By line_inequality on altitude(G, C, F), Line(A, C), G we get Line(A, C) != altitude(G, C, F)
By line_inequality on altitude(F, A, D), Line(A, C), F we get Line(A, C) != altitude(F, A, D)
By line_inequality on Line(B, H), g, H we get g != Line(B, H)
By line_containment_inequality on orthocenter(A, B, F), D, Line(A, F) we get D != orthocenter(A, B, F)
By line_inequality on Line(C, F), Line(A, C), F we get Line(A, C) != Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on A, H, D we get A not in Line(D, H)
By line_inequality on altitude(F, A, B), g, F we get g != altitude(F, A, B)
By line_inequality on Line(F, H), Line(D, E), H we get Line(D, E) != Line(F, H)
By line_containment_inequality on orthocenter(D, G, H), A, j we get A != orthocenter(D, G, H)
By line_containment_inequality on orthocenter(B, C, D), E, j we get E != orthocenter(B, C, D)
By line_containment_inequality on orthocenter(F, G, H), E, h we get E != orthocenter(F, G, H)
By line_inequality on altitude(G, F, H), g, G we get g != altitude(G, F, H)
By not_in_line_equivalent_to_not_collinear_v0_r on H, F, C we get H not in Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on F, H, D we get F not in Line(D, H)
By line_inequality on Line(B, H), Line(A, C), H we get Line(A, C) != Line(B, H)
By line_containment_inequality on orthocenter(F, G, H), B, j we get B != orthocenter(F, G, H)
By line_inequality on altitude(G, F, H), k, G we get k != altitude(G, F, H)
By line_inequality on altitude(G, D, H), Line(A, F), G we get Line(A, F) != altitude(G, D, H)
By line_containment_inequality on orthocenter(B, D, E), C, Line(D, E) we get C != orthocenter(B, D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on D, F, C we get D not in Line(C, F)
By line_containment_inequality on orthocenter(F, G, H), F, j we get F != orthocenter(F, G, H)
By line_inequality on altitude(G, B, C), Line(A, B), G we get Line(A, B) != altitude(G, B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on B, C, F we get B not in Line(C, F)
By line_inequality on altitude(G, C, D), i, G we get i != altitude(G, C, D)
By line_inequality on Line(F, H), Line(A, C), H we get Line(A, C) != Line(F, H)
By line_inequality on altitude(F, A, G), g, F we get g != altitude(F, A, G)
By line_inequality on Line(C, F), Line(D, E), C we get Line(C, F) != Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on C, G, A we get C not in Line(A, G)
By line_containment_inequality on orthocenter(B, G, H), D, j we get D != orthocenter(B, G, H)
By line_inequality on altitude(G, C, D), g, G we get g != altitude(G, C, D)
By line_containment_inequality on orthocenter(A, F, G), H, h we get H != orthocenter(A, F, G)
By line_inequality on altitude(G, C, F), Line(D, E), G we get Line(D, E) != altitude(G, C, F)
By line_inequality on Line(C, F), Line(A, F), C we get Line(A, F) != Line(C, F)
By line_inequality on altitude(F, A, D), k, F we get k != altitude(F, A, D)
By line_inequality on Line(F, H), g, H we get g != Line(F, H)
By line_inequality on Line(A, G), i, G we get i != Line(A, G)
By not_in_line_equivalent_to_not_collinear_v0_r on E, B, H we get E not in Line(B, H)
By line_containment_inequality on orthocenter(A, D, F), C, h we get C != orthocenter(A, D, F)
By line_containment_inequality on orthocenter(C, D, G), H, h we get H != orthocenter(C, D, G)
By line_containment_inequality on orthocenter(F, G, H), H, h we get H != orthocenter(F, G, H)
By line_containment_inequality on orthocenter(C, F, G), F, j we get F != orthocenter(C, F, G)
By line_inequality on altitude(G, B, C), Line(D, E), G we get Line(D, E) != altitude(G, B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on E, G, A we get E not in Line(A, G)
By line_containment_inequality on orthocenter(B, D, E), A, f we get A != orthocenter(B, D, E)
By line_inequality on altitude(E, B, D), Line(A, C), E we get Line(A, C) != altitude(E, B, D)
By line_inequality on altitude(F, A, G), i, F we get i != altitude(F, A, G)
By line_inequality on Line(D, H), Line(A, C), D we get Line(A, C) != Line(D, H)
By line_containment_inequality on orthocenter(B, G, H), C, h we get C != orthocenter(B, G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on C, H, D we get C not in Line(D, H)
By line_inequality on altitude(F, A, G), k, F we get k != altitude(F, A, G)
By line_containment_inequality on orthocenter(A, B, F), E, Line(A, F) we get E != orthocenter(A, B, F)
By line_inequality on altitude(F, A, G), j, F we get j != altitude(F, A, G)
By line_inequality on altitude(E, C, D), h, E we get h != altitude(E, C, D)
By line_containment_inequality on orthocenter(B, C, D), A, Line(D, E) we get A != orthocenter(B, C, D)
By line_inequality on altitude(G, D, H), f, G we get f != altitude(G, D, H)
By line_inequality on altitude(B, C, D), k, B we get k != altitude(B, C, D)
By line_inequality on altitude(E, B, D), Line(A, F), E we get Line(A, F) != altitude(E, B, D)
By line_inequality on altitude(G, B, H), Line(A, F), G we get Line(A, F) != altitude(G, B, H)
By line_inequality on altitude(G, C, F), g, G we get g != altitude(G, C, F)
By line_containment_inequality on orthocenter(D, G, H), D, j we get D != orthocenter(D, G, H)
By line_inequality on altitude(B, C, D), i, B we get i != altitude(B, C, D)
By line_containment_inequality on orthocenter(B, G, H), A, h we get A != orthocenter(B, G, H)
By line_containment_inequality on orthocenter(B, D, E), B, Line(D, E) we get B != orthocenter(B, D, E)
By line_inequality on Line(D, H), g, H we get g != Line(D, H)
By line_containment_inequality on orthocenter(F, G, H), C, h we get C != orthocenter(F, G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on G, F, C we get G not in Line(C, F)
By line_inequality on altitude(G, C, F), f, G we get f != altitude(G, C, F)
By line_containment_inequality on orthocenter(A, B, F), C, Line(A, F) we get C != orthocenter(A, B, F)
By line_containment_inequality on orthocenter(B, G, H), B, j we get B != orthocenter(B, G, H)
By line_containment_inequality on orthocenter(B, G, H), E, h we get E != orthocenter(B, G, H)
By line_inequality on altitude(F, A, B), Line(A, C), F we get Line(A, C) != altitude(F, A, B)
By line_inequality on altitude(G, C, D), Line(A, C), G we get Line(A, C) != altitude(G, C, D)
By line_inequality on altitude(G, B, C), k, G we get k != altitude(G, B, C)
By line_containment_inequality on orthocenter(B, C, D), C, Line(D, E) we get C != orthocenter(B, C, D)
By line_inequality on Line(F, H), Line(A, B), H we get Line(A, B) != Line(F, H)
By line_inequality on altitude(E, B, D), h, E we get h != altitude(E, B, D)
By line_containment_inequality on orthocenter(C, F, G), A, h we get A != orthocenter(C, F, G)
By line_inequality on altitude(B, C, D), Line(A, F), B we get Line(A, F) != altitude(B, C, D)
By line_inequality on Line(B, H), j, B we get j != Line(B, H)
By line_containment_inequality on orthocenter(B, D, E), F, Line(D, E) we get F != orthocenter(B, D, E)
By line_inequality on Line(D, H), Line(A, F), D we get Line(A, F) != Line(D, H)
By not_in_line_equivalent_to_not_collinear_v0_r on G, F, H we get G not in Line(F, H)
By line_containment_inequality on orthocenter(A, F, G), A, h we get A != orthocenter(A, F, G)
By line_containment_inequality on orthocenter(C, D, G), C, h we get C != orthocenter(C, D, G)
By line_containment_inequality on orthocenter(B, C, D), B, Line(D, E) we get B != orthocenter(B, C, D)
By line_inequality on altitude(G, C, D), Line(A, B), G we get Line(A, B) != altitude(G, C, D)
By line_inequality on altitude(G, C, D), Line(A, F), G we get Line(A, F) != altitude(G, C, D)
By line_inequality on altitude(E, C, D), i, E we get i != altitude(E, C, D)
By line_inequality on altitude(G, C, F), k, G we get k != altitude(G, C, F)
By line_inequality on altitude(G, B, C), f, G we get f != altitude(G, B, C)
By line_containment_inequality on orthocenter(C, F, G), H, h we get H != orthocenter(C, F, G)
By line_inequality on altitude(E, B, D), Line(A, B), E we get Line(A, B) != altitude(E, B, D)
By line_inequality on altitude(G, B, H), Line(D, E), G we get Line(D, E) != altitude(G, B, H)
By line_inequality on Line(A, G), Line(A, B), G we get Line(A, B) != Line(A, G)
By line_inequality on altitude(E, B, D), g, E we get g != altitude(E, B, D)
By line_inequality on altitude(G, F, H), Line(A, F), G we get Line(A, F) != altitude(G, F, H)
By line_containment_inequality on orthocenter(B, C, G), B, j we get B != orthocenter(B, C, G)
By line_inequality on altitude(B, C, D), Line(D, E), B we get Line(D, E) != altitude(B, C, D)
By line_containment_inequality on orthocenter(B, C, D), H, Line(D, E) we get H != orthocenter(B, C, D)
By line_inequality on altitude(B, C, D), g, B we get g != altitude(B, C, D)
By line_inequality on altitude(E, C, D), Line(A, F), E we get Line(A, F) != altitude(E, C, D)
By line_containment_inequality on orthocenter(A, F, G), G, Line(A, F) we get G != orthocenter(A, F, G)
By line_inequality on altitude(E, C, D), Line(A, C), E we get Line(A, C) != altitude(E, C, D)
By line_inequality on Line(D, H), Line(D, E), H we get Line(D, E) != Line(D, H)
By line_containment_inequality on orthocenter(A, F, G), C, Line(A, F) we get C != orthocenter(A, F, G)
By line_containment_inequality on orthocenter(D, G, H), F, j we get F != orthocenter(D, G, H)
By line_inequality on altitude(G, C, D), k, G we get k != altitude(G, C, D)
By line_inequality on altitude(G, D, H), Line(A, B), G we get Line(A, B) != altitude(G, D, H)
By line_containment_inequality on orthocenter(D, G, H), B, j we get B != orthocenter(D, G, H)
By line_inequality on Line(B, H), Line(A, B), H we get Line(A, B) != Line(B, H)
By line_inequality on Line(A, G), f, A we get f != Line(A, G)
By line_inequality on altitude(F, A, G), Line(D, E), F we get Line(D, E) != altitude(F, A, G)
By line_containment_inequality on orthocenter(A, B, F), G, Line(A, F) we get G != orthocenter(A, B, F)
By line_inequality on altitude(F, A, D), f, F we get f != altitude(F, A, D)
By line_inequality on altitude(G, F, H), f, G we get f != altitude(G, F, H)
By line_inequality on Line(C, F), g, C we get g != Line(C, F)
By line_containment_inequality on orthocenter(C, F, G), C, h we get C != orthocenter(C, F, G)
By line_inequality on altitude(G, B, H), Line(A, B), G we get Line(A, B) != altitude(G, B, H)
By line_inequality on altitude(E, C, D), j, E we get j != altitude(E, C, D)
By line_inequality on altitude(G, D, H), i, G we get i != altitude(G, D, H)
By line_inequality on Line(A, G), h, A we get h != Line(A, G)
By line_inequality on altitude(E, B, D), i, E we get i != altitude(E, B, D)
By line_inequality on altitude(F, A, B), Line(A, B), F we get Line(A, B) != altitude(F, A, B)
By line_containment_inequality on orthocenter(B, D, E), H, f we get H != orthocenter(B, D, E)
By line_inequality on altitude(F, A, G), f, F we get f != altitude(F, A, G)
By line_inequality on altitude(G, F, H), Line(A, C), G we get Line(A, C) != altitude(G, F, H)
By line_containment_inequality on orthocenter(B, C, G), D, j we get D != orthocenter(B, C, G)
By line_containment_inequality on orthocenter(A, D, F), D, Line(A, F) we get D != orthocenter(A, D, F)
By line_inequality on Line(C, F), f, F we get f != Line(C, F)
By line_inequality on Line(D, H), i, H we get i != Line(D, H)
By line_containment_inequality on orthocenter(C, F, G), D, j we get D != orthocenter(C, F, G)
By line_inequality on Line(A, G), g, G we get g != Line(A, G)
By line_inequality on altitude(B, C, D), Line(A, C), B we get Line(A, C) != altitude(B, C, D)
By line_inequality on altitude(E, C, D), g, E we get g != altitude(E, C, D)
By line_containment_inequality on orthocenter(C, D, G), E, j we get E != orthocenter(C, D, G)
By line_inequality on Line(C, F), i, F we get i != Line(C, F)
By line_inequality on altitude(F, A, B), Line(D, E), F we get Line(D, E) != altitude(F, A, B)
By line_containment_inequality on orthocenter(A, D, F), B, Line(A, F) we get B != orthocenter(A, D, F)
By line_containment_inequality on orthocenter(A, B, F), B, Line(A, F) we get B != orthocenter(A, B, F)
By line_inequality on altitude(G, F, H), Line(A, B), G we get Line(A, B) != altitude(G, F, H)
By internal_angle_bisector_definition_v0_r on F, B, F, D we get Line(B, D) == internal_angle_bisector(F, D, F)
By internal_angle_bisector_definition_v0_r on E, D, A, C we get Line(C, D) == internal_angle_bisector(A, C, E)
By internal_angle_bisector_definition_v0_r on B, G, D, F we get Line(F, G) == internal_angle_bisector(B, F, D)
By concyclic_definition_0 on D, G, C, E we get E in Circle(C, D, G)
By internal_angle_bisector_definition_v0_r on F, D, F, G we get Line(D, G) == internal_angle_bisector(F, G, F)
By perpendicular_lines_draw_intersection on Line(C, F), altitude(G, C, F) we get exists(line_intersection(Line(C, F), altitude(G, C, F)))
By perpendicular_lines_draw_intersection on altitude(E, C, D), i we get exists(line_intersection(i, altitude(E, C, D)))
By concyclic_definition_0 on C, D, E, G we get G in Circle(C, D, E)
By external_angle_bisector_definition_v0_r on B, F, G, D we get Line(D, F) == external_angle_bisector(B, D, G)
By internal_angle_bisector_definition_v0_r on B, G, B, F we get Line(F, G) == internal_angle_bisector(B, F, B)
By internal_angle_bisector_definition_v0_r on D, B, D, F we get Line(B, F) == internal_angle_bisector(D, F, D)
By internal_angle_bisector_definition_v0_r on G, D, B, F we get Line(D, F) == internal_angle_bisector(B, F, G)
By internal_angle_bisector_definition_v0_r on G, B, F, D we get Line(B, D) == internal_angle_bisector(F, D, G)
By internal_angle_bisector_definition_v0_r on B, F, D, G we get Line(F, G) == internal_angle_bisector(B, G, D)
By concyclic_definition_0 on E, G, C, D we get D in Circle(C, E, G)
By internal_angle_bisector_definition_v0_r on F, G, F, D we get Line(D, G) == internal_angle_bisector(F, D, F)
By internal_angle_bisector_definition_v0_r on D, F, D, B we get Line(B, F) == internal_angle_bisector(D, B, D)
By internal_angle_bisector_definition_v0_r on F, G, D, B we get Line(B, G) == internal_angle_bisector(D, B, F)
By internal_angle_bisector_definition_v0_r on G, F, G, B we get Line(B, F) == internal_angle_bisector(G, B, G)
By external_angle_bisector_definition_v0_r on B, D, F, G we get Line(D, G) == external_angle_bisector(B, G, F)
By internal_angle_bisector_definition_v0_r on F, B, F, G we get Line(B, G) == internal_angle_bisector(F, G, F)
By internal_angle_bisector_definition_v0_r on G, B, G, D we get Line(B, D) == internal_angle_bisector(G, D, G)
By concyclic_definition_0 on G, D, E, C we get C in Circle(D, E, G)
By internal_angle_bisector_definition_v0_r on B, D, B, G we get Line(D, G) == internal_angle_bisector(B, G, B)
By internal_angle_bisector_definition_v0_r on D, G, D, B we get Line(B, G) == internal_angle_bisector(D, B, D)
By perpendicular_lines_draw_intersection on altitude(G, B, H), Line(B, H) we get exists(line_intersection(Line(B, H), altitude(G, B, H)))
By external_angle_bisector_definition_v0_r on F, G, B, D we get Line(D, G) == external_angle_bisector(B, D, F)
By perpendicular_lines_draw_intersection on altitude(G, B, C), f we get exists(line_intersection(f, altitude(G, B, C)))
By external_angle_bisector_definition_v0_r on D, B, F, G we get Line(B, G) == external_angle_bisector(D, G, F)
By perpendicular_lines_draw_intersection on Line(D, H), altitude(G, D, H) we get exists(line_intersection(Line(D, H), altitude(G, D, H)))
By internal_angle_bisector_definition_v0_r on F, G, F, B we get Line(B, G) == internal_angle_bisector(F, B, F)
By perpendicular_lines_draw_intersection on altitude(F, A, B), Line(A, B) we get exists(line_intersection(Line(A, B), altitude(F, A, B)))
By perpendicular_lines_draw_intersection on Line(A, G), altitude(F, A, G) we get exists(line_intersection(Line(A, G), altitude(F, A, G)))
By internal_angle_bisector_definition_v0_r on G, D, G, F we get Line(D, F) == internal_angle_bisector(G, F, G)
By internal_angle_bisector_definition_v0_r on D, B, D, G we get Line(B, G) == internal_angle_bisector(D, G, D)
By internal_angle_bisector_definition_v0_r on B, G, B, D we get Line(D, G) == internal_angle_bisector(B, D, B)
By perpendicular_lines_draw_intersection on h, altitude(E, B, D) we get exists(line_intersection(h, altitude(E, B, D)))
By internal_angle_bisector_definition_v0_r on F, D, G, B we get Line(B, D) == internal_angle_bisector(F, B, G)
By internal_angle_bisector_definition_v0_r on F, D, F, B we get Line(B, D) == internal_angle_bisector(F, B, F)
By perpendicular_lines_draw_intersection on i, altitude(B, C, D) we get exists(line_intersection(i, altitude(B, C, D)))
By perpendicular_lines_draw_intersection on Line(F, H), altitude(G, F, H) we get exists(line_intersection(Line(F, H), altitude(G, F, H)))
By internal_angle_bisector_definition_v0_r on D, G, D, F we get Line(F, G) == internal_angle_bisector(D, F, D)
By internal_angle_bisector_definition_v0_r on B, F, B, G we get Line(F, G) == internal_angle_bisector(B, G, B)
By internal_angle_bisector_definition_v0_r on G, F, D, B we get Line(B, F) == internal_angle_bisector(D, B, G)
By internal_angle_bisector_definition_v0_r on D, F, D, G we get Line(F, G) == internal_angle_bisector(D, G, D)
By internal_angle_bisector_definition_v0_r on G, B, G, F we get Line(B, F) == internal_angle_bisector(G, F, G)
By internal_angle_bisector_definition_v0_r on D, B, G, F we get Line(B, F) == internal_angle_bisector(D, F, G)
By internal_angle_bisector_definition_v0_r on G, F, G, D we get Line(D, F) == internal_angle_bisector(G, D, G)
By perpendicular_lines_draw_intersection on altitude(F, A, D), g we get exists(line_intersection(g, altitude(F, A, D)))
By internal_angle_bisector_definition_v0_r on G, D, G, B we get Line(B, D) == internal_angle_bisector(G, B, G)
By perpendicular_lines_draw_intersection on i, altitude(G, C, D) we get exists(line_intersection(i, altitude(G, C, D)))
By internal_angle_bisector_definition_v0_r on B, F, B, D we get Line(D, F) == internal_angle_bisector(B, D, B)
By internal_angle_bisector_definition_v0_r on B, D, B, F we get Line(D, F) == internal_angle_bisector(B, F, B)
By concyclic_definition_1 on C, E, G, D we get Circle(C, E, G) == Circle(D, E, G)
By parallel_line_angles_reverse_v0 on A, F, C, H we get angle(A, F, C) == angle(H, C, F) mod 360
By concyclic_definition_1 on C, D, G, E we get Circle(C, D, G) == Circle(D, E, G)
By altitude_definition on E, D, G, altitude(E, B, D) we get altitude(E, B, D) == altitude(E, D, G)
By parallel_line_angles_reverse_v3 on F, A, G, H we get angle(F, A, G) == angle(H, G, A) + 180 mod 360
By altitude_definition on G, C, E, altitude(G, B, C) we get altitude(G, B, C) == altitude(G, C, E)
By parallel_line_angles_reverse_v3 on F, A, G, C we get angle(F, A, G) == angle(C, G, A) + 180 mod 360
By altitude_definition on G, B, E, altitude(G, B, C) we get altitude(G, B, C) == altitude(G, B, E)
By parallel_line_angles_reverse_v2 on A, F, H, G we get angle(A, F, H) == angle(G, H, F) + 180 mod 360
By parallel_line_angles_reverse_v2 on A, F, H, C we get angle(A, F, H) == angle(C, H, F) + 180 mod 360
By parallel_line_angles_reverse_v1 on C, D, H, E we get angle(C, D, H) == angle(E, H, D) mod 360
By altitude_definition on E, F, G, altitude(E, B, D) we get altitude(E, B, D) == altitude(E, F, G)
By concyclic_definition_1 on E, D, C, G we get Circle(C, D, E) == Circle(C, D, G)
By altitude_definition on E, B, F, altitude(E, B, D) we get altitude(E, B, D) == altitude(E, B, F)
By altitude_definition on E, B, G, altitude(E, B, D) we get altitude(E, B, D) == altitude(E, B, G)
By parallel_line_angles_reverse_v3 on C, H, F, A we get angle(C, H, F) == angle(A, F, H) + 180 mod 360
By concyclic_definition_1 on D, E, C, G we get Circle(C, D, E) == Circle(C, E, G)
By altitude_definition on E, D, F, altitude(E, B, D) we get altitude(E, B, D) == altitude(E, D, F)
By parallel_line_angles_reverse_v2 on C, G, A, F we get angle(C, G, A) == angle(F, A, G) + 180 mod 360
By parallel_line_angles_reverse_v3 on G, C, F, A we get angle(G, C, F) == angle(A, F, C) + 180 mod 360
By parallel_line_angles_reverse_v2 on H, G, A, F we get angle(H, G, A) == angle(F, A, G) + 180 mod 360
By parallel_line_angles_reverse_v3 on G, H, F, A we get angle(G, H, F) == angle(A, F, H) + 180 mod 360
By concyclic_definition_1 on E, C, G, D we get Circle(C, D, G) == Circle(C, E, G)
By parallel_line_angles_reverse_v2 on A, F, C, G we get angle(A, F, C) == angle(G, C, F) + 180 mod 360
By concyclic_definition_1 on G, D, E, C we get Circle(C, D, E) == Circle(D, E, G)
By anti_similar_triangle_basic_properties on B, C, G, B, D, E we get not_collinear(B, C, G), not_collinear(B, D, E), angle(B, C, G) == 0 - angle(B, D, E) mod 360, angle(C, G, B) == 0 - angle(D, E, B) mod 360, angle(G, B, C) == 0 - angle(E, B, D) mod 360, log(distance(B, C)) + log(distance(D, E)) == log(distance(B, D)) + log(distance(C, G)), log(distance(C, G)) + log(distance(B, E)) == log(distance(D, E)) + log(distance(B, G)), log(distance(B, E)) + log(distance(B, C)) == log(distance(B, G)) + log(distance(B, D))
By anti_similar_triangle_basic_properties on E, D, B, G, C, B we get not_collinear(B, D, E), not_collinear(B, C, G), angle(E, D, B) == 0 - angle(G, C, B) mod 360, angle(D, B, E) == 0 - angle(C, B, G) mod 360, angle(B, E, D) == 0 - angle(B, G, C) mod 360, log(distance(C, G)) + log(distance(B, D)) == log(distance(D, E)) + log(distance(B, C)), log(distance(B, C)) + log(distance(B, E)) == log(distance(B, D)) + log(distance(B, G)), log(distance(B, E)) + log(distance(C, G)) == log(distance(B, G)) + log(distance(D, E))
By line_definition on orthocenter(B, C, D), H, j we get j == Line(H, orthocenter(B, C, D))
By line_definition on orthocenter(B, C, D), D, Line(D, E) we get Line(D, E) == Line(D, orthocenter(B, C, D))
By line_definition on orthocenter(B, C, D), B, altitude(B, C, D) we get altitude(B, C, D) == Line(B, orthocenter(B, C, D))
By line_definition on orthocenter(B, C, D), G, j we get j == Line(G, orthocenter(B, C, D))
By line_definition on orthocenter(B, C, D), E, Line(D, E) we get Line(D, E) == Line(E, orthocenter(B, C, D))
By line_definition on C, orthocenter(B, C, D), j we get j == Line(C, orthocenter(B, C, D))
By line_intersection_definition on orthocenter(B, C, D), altitude(B, C, D), j we get orthocenter(B, C, D) == line_intersection(j, altitude(B, C, D))
By line_intersection_definition on F, Line(C, F), h we get F == line_intersection(h, Line(C, F))
By line_intersection_definition on D, Line(D, H), g we get D == line_intersection(g, Line(D, H))
By perpendicular_line_definition on line_intersection(i, altitude(G, C, D)), i, altitude(E, C, D) we get i == perpendicular_line(line_intersection(i, altitude(G, C, D)), altitude(E, C, D))
By perpendicular_line_definition on line_intersection(g, altitude(F, A, D)), g, altitude(F, A, D) we get g == perpendicular_line(line_intersection(g, altitude(F, A, D)), altitude(F, A, D))
By line_intersection_definition on C, f, Line(C, F) we get C == line_intersection(f, Line(C, F))
By line_intersection_definition on B, Line(A, B), Line(B, H) we get B == line_intersection(Line(A, B), Line(B, H))
By line_intersection_definition on H, Line(D, H), j we get H == line_intersection(j, Line(D, H))
By line_intersection_definition on G, j, Line(A, G) we get G == line_intersection(j, Line(A, G))
By line_intersection_definition on F, Line(C, F), Line(A, F) we get F == line_intersection(Line(A, F), Line(C, F))
By line_intersection_definition on H, k, Line(B, H) we get H == line_intersection(k, Line(B, H))
By perpendicular_line_definition on line_intersection(f, altitude(G, B, C)), f, altitude(G, B, C) we get f == perpendicular_line(line_intersection(f, altitude(G, B, C)), altitude(G, B, C))
By line_intersection_definition on D, h, Line(D, H) we get D == line_intersection(h, Line(D, H))
By line_intersection_definition on F, Line(F, H), Line(A, F) we get F == line_intersection(Line(A, F), Line(F, H))
By line_intersection_definition on D, Line(D, H), i we get D == line_intersection(i, Line(D, H))
By perpendicular_line_definition on E, k, altitude(G, C, D) we get k == perpendicular_line(E, altitude(G, C, D))
By line_intersection_definition on A, Line(A, G), Line(A, C) we get A == line_intersection(Line(A, C), Line(A, G))
By perpendicular_line_definition on E, k, altitude(B, C, D) we get k == perpendicular_line(E, altitude(B, C, D))
By perpendicular_line_definition on line_intersection(Line(D, H), altitude(G, D, H)), Line(D, H), altitude(G, D, H) we get Line(D, H) == perpendicular_line(line_intersection(Line(D, H), altitude(G, D, H)), altitude(G, D, H))
By perpendicular_line_definition on line_intersection(g, altitude(F, A, D)), altitude(F, A, D), g we get altitude(F, A, D) == perpendicular_line(line_intersection(g, altitude(F, A, D)), g)
By perpendicular_line_definition on line_intersection(i, altitude(E, C, D)), altitude(E, C, D), k we get altitude(E, C, D) == perpendicular_line(line_intersection(i, altitude(E, C, D)), k)
By perpendicular_line_definition on line_intersection(Line(C, F), altitude(G, C, F)), Line(C, F), altitude(G, C, F) we get Line(C, F) == perpendicular_line(line_intersection(Line(C, F), altitude(G, C, F)), altitude(G, C, F))
By line_intersection_definition on C, Line(C, F), Line(A, C) we get C == line_intersection(Line(A, C), Line(C, F))
By perpendicular_line_definition on E, altitude(E, C, D), k we get altitude(E, C, D) == perpendicular_line(E, k)
By line_intersection_definition on H, j, Line(B, H) we get H == line_intersection(j, Line(B, H))
By perpendicular_line_definition on line_intersection(Line(A, B), altitude(F, A, B)), altitude(F, A, B), Line(A, B) we get altitude(F, A, B) == perpendicular_line(line_intersection(Line(A, B), altitude(F, A, B)), Line(A, B))
By perpendicular_line_definition on line_intersection(Line(B, H), altitude(G, B, H)), altitude(G, B, H), Line(B, H) we get altitude(G, B, H) == perpendicular_line(line_intersection(Line(B, H), altitude(G, B, H)), Line(B, H))
By perpendicular_line_definition on G, altitude(G, C, D), k we get altitude(G, C, D) == perpendicular_line(G, k)
By perpendicular_line_definition on E, k, altitude(E, C, D) we get k == perpendicular_line(E, altitude(E, C, D))
By line_intersection_definition on D, Line(D, E), Line(D, H) we get D == line_intersection(Line(D, E), Line(D, H))
By perpendicular_line_definition on line_intersection(i, altitude(E, C, D)), i, altitude(B, C, D) we get i == perpendicular_line(line_intersection(i, altitude(E, C, D)), altitude(B, C, D))
By perpendicular_line_definition on line_intersection(i, altitude(B, C, D)), i, altitude(G, C, D) we get i == perpendicular_line(line_intersection(i, altitude(B, C, D)), altitude(G, C, D))
By line_intersection_definition on A, Line(A, F), Line(A, G) we get A == line_intersection(Line(A, F), Line(A, G))
By perpendicular_line_definition on line_intersection(i, altitude(B, C, D)), i, altitude(E, C, D) we get i == perpendicular_line(line_intersection(i, altitude(B, C, D)), altitude(E, C, D))
By perpendicular_line_definition on line_intersection(h, altitude(E, B, D)), h, j we get h == perpendicular_line(line_intersection(h, altitude(E, B, D)), j)
By line_intersection_definition on orthocenter(B, C, D), Line(D, E), altitude(B, C, D) we get orthocenter(B, C, D) == line_intersection(Line(D, E), altitude(B, C, D))
By line_intersection_definition on A, Line(A, G), g we get A == line_intersection(g, Line(A, G))
By perpendicular_line_definition on line_intersection(f, altitude(G, B, C)), f, Line(D, E) we get f == perpendicular_line(line_intersection(f, altitude(G, B, C)), Line(D, E))
By line_intersection_definition on C, Line(C, F), j we get C == line_intersection(j, Line(C, F))
By perpendicular_line_definition on B, altitude(B, C, D), k we get altitude(B, C, D) == perpendicular_line(B, k)
By perpendicular_line_definition on H, k, altitude(B, C, D) we get k == perpendicular_line(H, altitude(B, C, D))
By line_intersection_definition on H, j, Line(F, H) we get H == line_intersection(j, Line(F, H))
By perpendicular_line_definition on line_intersection(i, altitude(G, C, D)), i, altitude(G, C, D) we get i == perpendicular_line(line_intersection(i, altitude(G, C, D)), altitude(G, C, D))
By perpendicular_line_definition on line_intersection(i, altitude(G, C, D)), i, altitude(B, C, D) we get i == perpendicular_line(line_intersection(i, altitude(G, C, D)), altitude(B, C, D))
By line_intersection_definition on B, f, Line(B, H) we get B == line_intersection(f, Line(B, H))
By line_intersection_definition on A, Line(A, G), Line(A, B) we get A == line_intersection(Line(A, B), Line(A, G))
By perpendicular_line_definition on H, k, altitude(E, C, D) we get k == perpendicular_line(H, altitude(E, C, D))
By perpendicular_line_definition on line_intersection(Line(F, H), altitude(G, F, H)), Line(F, H), altitude(G, F, H) we get Line(F, H) == perpendicular_line(line_intersection(Line(F, H), altitude(G, F, H)), altitude(G, F, H))
By perpendicular_line_definition on line_intersection(h, altitude(E, B, D)), h, altitude(E, B, D) we get h == perpendicular_line(line_intersection(h, altitude(E, B, D)), altitude(E, B, D))
By perpendicular_line_definition on line_intersection(Line(A, G), altitude(F, A, G)), Line(A, G), altitude(F, A, G) we get Line(A, G) == perpendicular_line(line_intersection(Line(A, G), altitude(F, A, G)), altitude(F, A, G))
By line_intersection_definition on H, k, Line(D, H) we get H == line_intersection(k, Line(D, H))
By perpendicular_line_definition on line_intersection(i, altitude(B, C, D)), i, altitude(B, C, D) we get i == perpendicular_line(line_intersection(i, altitude(B, C, D)), altitude(B, C, D))
By perpendicular_line_definition on line_intersection(Line(C, F), altitude(G, C, F)), altitude(G, C, F), Line(C, F) we get altitude(G, C, F) == perpendicular_line(line_intersection(Line(C, F), altitude(G, C, F)), Line(C, F))
By line_intersection_definition on H, Line(F, H), k we get H == line_intersection(k, Line(F, H))
By line_intersection_definition on G, h, Line(A, G) we get G == line_intersection(h, Line(A, G))
By perpendicular_line_definition on line_intersection(i, altitude(E, C, D)), i, altitude(E, C, D) we get i == perpendicular_line(line_intersection(i, altitude(E, C, D)), altitude(E, C, D))
By perpendicular_line_definition on line_intersection(Line(A, G), altitude(F, A, G)), altitude(F, A, G), Line(A, G) we get altitude(F, A, G) == perpendicular_line(line_intersection(Line(A, G), altitude(F, A, G)), Line(A, G))
By perpendicular_line_definition on line_intersection(h, altitude(E, B, D)), h, Line(A, F) we get h == perpendicular_line(line_intersection(h, altitude(E, B, D)), Line(A, F))
By perpendicular_line_definition on line_intersection(Line(A, B), altitude(F, A, B)), Line(A, B), altitude(F, A, B) we get Line(A, B) == perpendicular_line(line_intersection(Line(A, B), altitude(F, A, B)), altitude(F, A, B))
By line_intersection_definition on F, Line(F, H), h we get F == line_intersection(h, Line(F, H))
By line_intersection_definition on C, Line(C, F), i we get C == line_intersection(i, Line(C, F))
By line_intersection_definition on B, h, Line(B, H) we get B == line_intersection(h, Line(B, H))
By perpendicular_line_definition on line_intersection(Line(D, H), altitude(G, D, H)), altitude(G, D, H), Line(D, H) we get altitude(G, D, H) == perpendicular_line(line_intersection(Line(D, H), altitude(G, D, H)), Line(D, H))
By perpendicular_line_definition on line_intersection(i, altitude(E, C, D)), i, altitude(G, C, D) we get i == perpendicular_line(line_intersection(i, altitude(E, C, D)), altitude(G, C, D))
By perpendicular_line_definition on line_intersection(i, altitude(B, C, D)), altitude(B, C, D), k we get altitude(B, C, D) == perpendicular_line(line_intersection(i, altitude(B, C, D)), k)
By perpendicular_line_definition on line_intersection(h, altitude(E, B, D)), altitude(E, B, D), h we get altitude(E, B, D) == perpendicular_line(line_intersection(h, altitude(E, B, D)), h)
By perpendicular_line_definition on line_intersection(i, altitude(G, C, D)), altitude(G, C, D), k we get altitude(G, C, D) == perpendicular_line(line_intersection(i, altitude(G, C, D)), k)
By perpendicular_line_definition on orthocenter(B, C, D), altitude(B, C, D), k we get altitude(B, C, D) == perpendicular_line(orthocenter(B, C, D), k)
By perpendicular_line_definition on line_intersection(i, altitude(G, C, D)), altitude(G, C, D), i we get altitude(G, C, D) == perpendicular_line(line_intersection(i, altitude(G, C, D)), i)
By perpendicular_line_definition on H, k, altitude(G, C, D) we get k == perpendicular_line(H, altitude(G, C, D))
By perpendicular_line_definition on line_intersection(i, altitude(B, C, D)), altitude(B, C, D), i we get altitude(B, C, D) == perpendicular_line(line_intersection(i, altitude(B, C, D)), i)
By perpendicular_line_definition on line_intersection(f, altitude(G, B, C)), altitude(G, B, C), f we get altitude(G, B, C) == perpendicular_line(line_intersection(f, altitude(G, B, C)), f)
By perpendicular_line_definition on line_intersection(Line(F, H), altitude(G, F, H)), altitude(G, F, H), Line(F, H) we get altitude(G, F, H) == perpendicular_line(line_intersection(Line(F, H), altitude(G, F, H)), Line(F, H))
By perpendicular_line_definition on line_intersection(i, altitude(E, C, D)), altitude(E, C, D), i we get altitude(E, C, D) == perpendicular_line(line_intersection(i, altitude(E, C, D)), i)
By perpendicular_line_definition on line_intersection(Line(B, H), altitude(G, B, H)), Line(B, H), altitude(G, B, H) we get Line(B, H) == perpendicular_line(line_intersection(Line(B, H), altitude(G, B, H)), altitude(G, B, H))
By line_unique_intersection_v1 on Line(A, G), j, G, orthocenter(B, C, D) we get orthocenter(B, C, D) not in Line(A, G)
By line_unique_intersection_v1 on altitude(B, C, D), j, orthocenter(B, C, D), H we get H not in altitude(B, C, D)
By line_unique_intersection_v1 on i, j, C, orthocenter(B, C, D) we get orthocenter(B, C, D) not in i
By line_unique_intersection_v1 on Line(C, F), j, C, orthocenter(B, C, D) we get orthocenter(B, C, D) not in Line(C, F)
By line_unique_intersection_v1 on h, j, G, orthocenter(B, C, D) we get orthocenter(B, C, D) not in h
By line_unique_intersection_v1 on f, Line(D, E), E, orthocenter(B, C, D) we get orthocenter(B, C, D) not in f
By line_unique_intersection_v1 on Line(D, H), Line(D, E), D, orthocenter(B, C, D) we get orthocenter(B, C, D) not in Line(D, H)
By line_unique_intersection_v1 on altitude(B, C, D), j, orthocenter(B, C, D), G we get G not in altitude(B, C, D)
By line_unique_intersection_v1 on altitude(B, C, D), Line(D, E), orthocenter(B, C, D), E we get E not in altitude(B, C, D)
By line_unique_intersection_v1 on k, Line(D, E), E, orthocenter(B, C, D) we get orthocenter(B, C, D) not in k
By line_unique_intersection_v1 on g, Line(D, E), D, orthocenter(B, C, D) we get orthocenter(B, C, D) not in g
By line_unique_intersection_v1 on altitude(B, C, D), j, orthocenter(B, C, D), C we get C not in altitude(B, C, D)
By line_unique_intersection_v1 on Line(F, H), j, H, orthocenter(B, C, D) we get orthocenter(B, C, D) not in Line(F, H)
By line_unique_intersection_v1 on Line(A, C), j, C, orthocenter(B, C, D) we get orthocenter(B, C, D) not in Line(A, C)
By line_unique_intersection_v1 on altitude(B, C, D), Line(D, E), orthocenter(B, C, D), D we get D not in altitude(B, C, D)
By line_unique_intersection_v1 on Line(B, H), j, H, orthocenter(B, C, D) we get orthocenter(B, C, D) not in Line(B, H)
By angles_on_chord_v1 on D, G, C, E, Circle(C, D, E) we get angle(D, C, G) == angle(D, E, G) mod 360
By angles_on_chord_v1 on C, E, G, D, Circle(C, D, E) we get angle(C, D, E) == angle(C, G, E) mod 360
By angles_on_chord_v0 on D, E, C, G, Circle(C, D, E) we get angle(D, C, E) == angle(D, G, E) mod 360
By angles_on_chord_v0 on E, C, G, D, Circle(C, D, E) we get angle(E, D, C) == angle(E, G, C) mod 360
By angles_on_chord_v0 on C, G, D, E, Circle(C, D, E) we get angle(C, D, G) == angle(C, E, G) mod 360
By angles_on_chord_v1 on E, D, C, G, Circle(C, D, E) we get angle(E, C, D) == angle(E, G, D) mod 360
By angles_on_chord_v0 on G, D, C, E, Circle(C, D, E) we get angle(G, C, D) == angle(G, E, D) mod 360
By angles_on_chord_v1 on G, C, E, D, Circle(C, D, E) we get angle(G, D, C) == angle(G, E, C) mod 360
By collinear_and_not_between_implies_orientation on orthocenter(B, C, D), B, F, G we get orientation(B, orthocenter(B, C, D), F) == orientation(F, G, orthocenter(B, C, D)) mod 360
By between_implies_orientation on orthocenter(B, C, D), D, G, F we get orientation(D, G, orthocenter(B, C, D)) == orientation(F, orthocenter(B, C, D), G) mod 360, orientation(D, F, orthocenter(B, C, D)) == orientation(D, G, orthocenter(B, C, D)) mod 360
By between_implies_orientation on orthocenter(B, C, D), B, D, G we get orientation(B, D, orthocenter(B, C, D)) == orientation(D, G, orthocenter(B, C, D)) mod 360, orientation(B, D, orthocenter(B, C, D)) == orientation(B, G, orthocenter(B, C, D)) mod 360
By between_implies_orientation on orthocenter(B, C, D), B, D, F we get orientation(B, D, orthocenter(B, C, D)) == orientation(D, F, orthocenter(B, C, D)) mod 360, orientation(B, D, orthocenter(B, C, D)) == orientation(B, F, orthocenter(B, C, D)) mod 360
By collinear_and_not_between_implies_orientation on orthocenter(B, C, D), F, B, G we get orientation(B, F, orthocenter(B, C, D)) == orientation(B, G, orthocenter(B, C, D)) mod 360
By collinear_and_not_between_implies_orientation on orthocenter(B, C, D), E, B, C we get orientation(B, C, orthocenter(B, C, D)) == orientation(B, E, orthocenter(B, C, D)) mod 360
By between_implies_orientation on orthocenter(B, C, D), F, G, B we get orientation(B, orthocenter(B, C, D), G) == orientation(F, G, orthocenter(B, C, D)) mod 360, orientation(B, orthocenter(B, C, D), F) == orientation(F, G, orthocenter(B, C, D)) mod 360
By between_implies_orientation on orthocenter(B, C, D), B, E, C we get orientation(B, E, orthocenter(B, C, D)) == orientation(C, orthocenter(B, C, D), E) mod 360, orientation(B, C, orthocenter(B, C, D)) == orientation(B, E, orthocenter(B, C, D)) mod 360
By collinear_and_not_between_implies_orientation on orthocenter(B, C, D), H, G, C we get orientation(C, orthocenter(B, C, D), G) == orientation(G, H, orthocenter(B, C, D)) mod 360
By collinear_and_not_between_implies_orientation on orthocenter(B, C, D), E, C, B we get orientation(B, orthocenter(B, C, D), C) == orientation(C, E, orthocenter(B, C, D)) mod 360
By collinear_and_not_between_implies_orientation on orthocenter(B, C, D), G, F, D we get orientation(D, orthocenter(B, C, D), F) == orientation(F, G, orthocenter(B, C, D)) mod 360
By between_implies_orientation on orthocenter(B, C, D), F, D, B we get orientation(B, orthocenter(B, C, D), D) == orientation(D, orthocenter(B, C, D), F) mod 360, orientation(B, orthocenter(B, C, D), F) == orientation(D, orthocenter(B, C, D), F) mod 360
By between_implies_orientation on orthocenter(B, C, D), F, G, D we get orientation(D, orthocenter(B, C, D), G) == orientation(F, G, orthocenter(B, C, D)) mod 360, orientation(D, orthocenter(B, C, D), F) == orientation(F, G, orthocenter(B, C, D)) mod 360
By collinear_and_not_between_implies_orientation on orthocenter(B, C, D), B, G, D we get orientation(B, orthocenter(B, C, D), G) == orientation(D, orthocenter(B, C, D), G) mod 360
By between_implies_orientation on orthocenter(B, C, D), G, C, H we get orientation(C, H, orthocenter(B, C, D)) == orientation(C, orthocenter(B, C, D), G) mod 360, orientation(C, orthocenter(B, C, D), G) == orientation(G, H, orthocenter(B, C, D)) mod 360
By between_implies_orientation on orthocenter(B, C, D), B, G, F we get orientation(B, G, orthocenter(B, C, D)) == orientation(F, orthocenter(B, C, D), G) mod 360, orientation(B, F, orthocenter(B, C, D)) == orientation(B, G, orthocenter(B, C, D)) mod 360
By collinear_and_not_between_implies_orientation on orthocenter(B, C, D), G, H, C we get orientation(C, orthocenter(B, C, D), H) == orientation(G, orthocenter(B, C, D), H) mod 360
By between_implies_orientation on orthocenter(B, C, D), H, C, G we get orientation(C, G, orthocenter(B, C, D)) == orientation(C, orthocenter(B, C, D), H) mod 360, orientation(C, orthocenter(B, C, D), H) == orientation(G, orthocenter(B, C, D), H) mod 360
By between_implies_orientation on orthocenter(B, C, D), G, D, B we get orientation(B, orthocenter(B, C, D), D) == orientation(D, orthocenter(B, C, D), G) mod 360, orientation(B, orthocenter(B, C, D), G) == orientation(D, orthocenter(B, C, D), G) mod 360
By between_implies_orientation on orthocenter(B, C, D), C, E, B we get orientation(B, orthocenter(B, C, D), E) == orientation(C, E, orthocenter(B, C, D)) mod 360, orientation(B, orthocenter(B, C, D), C) == orientation(C, E, orthocenter(B, C, D)) mod 360
By parallel_line_definition on C, j, altitude(E, B, D) we get j == parallel_line(C, altitude(E, B, D))
By parallel_line_definition on line_intersection(i, altitude(G, C, D)), altitude(G, C, D), altitude(B, C, D) we get altitude(G, C, D) == parallel_line(line_intersection(i, altitude(G, C, D)), altitude(B, C, D))
By parallel_line_definition on orthocenter(B, C, D), Line(D, E), altitude(G, B, C) we get Line(D, E) == parallel_line(orthocenter(B, C, D), altitude(G, B, C))
By parallel_line_definition on G, j, altitude(E, B, D) we get j == parallel_line(G, altitude(E, B, D))
By parallel_line_definition on orthocenter(B, C, D), altitude(B, C, D), altitude(E, C, D) we get altitude(B, C, D) == parallel_line(orthocenter(B, C, D), altitude(E, C, D))
By parallel_line_definition on E, altitude(E, B, D), Line(A, F) we get altitude(E, B, D) == parallel_line(E, Line(A, F))
By parallel_line_definition on D, Line(D, E), altitude(G, B, C) we get Line(D, E) == parallel_line(D, altitude(G, B, C))
By parallel_line_definition on orthocenter(B, C, D), j, altitude(E, B, D) we get j == parallel_line(orthocenter(B, C, D), altitude(E, B, D))
By parallel_line_definition on E, altitude(E, C, D), altitude(B, C, D) we get altitude(E, C, D) == parallel_line(E, altitude(B, C, D))
By parallel_line_definition on line_intersection(i, altitude(E, C, D)), altitude(E, C, D), altitude(G, C, D) we get altitude(E, C, D) == parallel_line(line_intersection(i, altitude(E, C, D)), altitude(G, C, D))
By parallel_line_definition on G, altitude(G, C, D), altitude(E, C, D) we get altitude(G, C, D) == parallel_line(G, altitude(E, C, D))
By parallel_line_definition on line_intersection(h, altitude(E, B, D)), altitude(E, B, D), j we get altitude(E, B, D) == parallel_line(line_intersection(h, altitude(E, B, D)), j)
By parallel_line_definition on E, altitude(E, C, D), altitude(G, C, D) we get altitude(E, C, D) == parallel_line(E, altitude(G, C, D))
By parallel_line_definition on B, altitude(B, C, D), altitude(G, C, D) we get altitude(B, C, D) == parallel_line(B, altitude(G, C, D))
By parallel_line_definition on line_intersection(f, altitude(G, B, C)), altitude(G, B, C), Line(D, E) we get altitude(G, B, C) == parallel_line(line_intersection(f, altitude(G, B, C)), Line(D, E))
By parallel_line_definition on B, altitude(B, C, D), altitude(E, C, D) we get altitude(B, C, D) == parallel_line(B, altitude(E, C, D))
By parallel_line_definition on E, altitude(E, B, D), j we get altitude(E, B, D) == parallel_line(E, j)
By parallel_line_definition on line_intersection(i, altitude(B, C, D)), i, k we get i == parallel_line(line_intersection(i, altitude(B, C, D)), k)
By parallel_line_definition on line_intersection(i, altitude(E, C, D)), altitude(E, C, D), altitude(B, C, D) we get altitude(E, C, D) == parallel_line(line_intersection(i, altitude(E, C, D)), altitude(B, C, D))
By parallel_line_definition on line_intersection(i, altitude(E, C, D)), i, k we get i == parallel_line(line_intersection(i, altitude(E, C, D)), k)
By parallel_line_definition on G, altitude(G, C, D), altitude(B, C, D) we get altitude(G, C, D) == parallel_line(G, altitude(B, C, D))
By parallel_line_definition on E, Line(D, E), altitude(G, B, C) we get Line(D, E) == parallel_line(E, altitude(G, B, C))
By parallel_line_definition on line_intersection(i, altitude(B, C, D)), altitude(B, C, D), altitude(E, C, D) we get altitude(B, C, D) == parallel_line(line_intersection(i, altitude(B, C, D)), altitude(E, C, D))
By parallel_line_definition on line_intersection(i, altitude(G, C, D)), i, k we get i == parallel_line(line_intersection(i, altitude(G, C, D)), k)
By parallel_line_definition on line_intersection(i, altitude(B, C, D)), altitude(B, C, D), altitude(G, C, D) we get altitude(B, C, D) == parallel_line(line_intersection(i, altitude(B, C, D)), altitude(G, C, D))
By parallel_line_definition on F, Line(A, F), altitude(E, B, D) we get Line(A, F) == parallel_line(F, altitude(E, B, D))
By parallel_line_definition on A, Line(A, F), altitude(E, B, D) we get Line(A, F) == parallel_line(A, altitude(E, B, D))
By parallel_line_definition on H, j, altitude(E, B, D) we get j == parallel_line(H, altitude(E, B, D))
By parallel_line_definition on orthocenter(B, C, D), altitude(B, C, D), altitude(G, C, D) we get altitude(B, C, D) == parallel_line(orthocenter(B, C, D), altitude(G, C, D))
By parallel_line_definition on line_intersection(i, altitude(G, C, D)), altitude(G, C, D), altitude(E, C, D) we get altitude(G, C, D) == parallel_line(line_intersection(i, altitude(G, C, D)), altitude(E, C, D))
By parallel_line_definition on G, altitude(G, B, C), Line(D, E) we get altitude(G, B, C) == parallel_line(G, Line(D, E))
By parallel_line_definition on line_intersection(h, altitude(E, B, D)), altitude(E, B, D), Line(A, F) we get altitude(E, B, D) == parallel_line(line_intersection(h, altitude(E, B, D)), Line(A, F))
By orthocenter_concurrency on E, G, B we get orthocenter(B, E, G) in altitude(E, B, G), orthocenter(B, E, G) in altitude(G, B, E), orthocenter(B, E, G) in altitude(B, E, G)
By in_imply_collinear on line_intersection(h, altitude(E, B, D)), D, F we get collinear(D, F, line_intersection(h, altitude(E, B, D)))
By in_imply_collinear on line_intersection(Line(A, G), altitude(F, A, G)), G, A we get collinear(A, G, line_intersection(Line(A, G), altitude(F, A, G)))
By in_imply_collinear on line_intersection(f, altitude(G, B, C)), E, B we get collinear(B, E, line_intersection(f, altitude(G, B, C)))
By projection_definition on H, E, altitude(E, C, D) we get E == projection(H, altitude(E, C, D))
By in_imply_collinear on line_intersection(Line(D, H), altitude(G, D, H)), D, H we get collinear(D, H, line_intersection(Line(D, H), altitude(G, D, H)))
By line_inequality on altitude(G, D, H), Line(B, H), G we get Line(B, H) != altitude(G, D, H)
By in_imply_collinear on line_intersection(h, altitude(E, B, D)), F, G we get collinear(F, G, line_intersection(h, altitude(E, B, D)))
By in_imply_collinear on line_intersection(i, altitude(G, C, D)), C, D we get collinear(C, D, line_intersection(i, altitude(G, C, D)))
By in_imply_collinear on line_intersection(h, altitude(E, B, D)), F, B we get collinear(B, F, line_intersection(h, altitude(E, B, D)))
By in_imply_collinear on line_intersection(h, altitude(E, B, D)), B, G we get collinear(B, G, line_intersection(h, altitude(E, B, D)))
By in_imply_collinear on line_intersection(i, altitude(E, C, D)), C, D we get collinear(C, D, line_intersection(i, altitude(E, C, D)))
By in_imply_collinear on line_intersection(Line(C, F), altitude(G, C, F)), F, C we get collinear(C, F, line_intersection(Line(C, F), altitude(G, C, F)))
By in_imply_collinear on line_intersection(g, altitude(F, A, D)), D, A we get collinear(A, D, line_intersection(g, altitude(F, A, D)))
By in_imply_collinear on line_intersection(i, altitude(B, C, D)), D, C we get collinear(C, D, line_intersection(i, altitude(B, C, D)))
By in_imply_collinear on line_intersection(h, altitude(E, B, D)), D, B we get collinear(B, D, line_intersection(h, altitude(E, B, D)))
By in_imply_collinear on line_intersection(Line(A, B), altitude(F, A, B)), A, B we get collinear(A, B, line_intersection(Line(A, B), altitude(F, A, B)))
By in_imply_collinear on line_intersection(f, altitude(G, B, C)), C, E we get collinear(C, E, line_intersection(f, altitude(G, B, C)))
By in_imply_collinear on line_intersection(f, altitude(G, B, C)), C, B we get collinear(B, C, line_intersection(f, altitude(G, B, C)))
By in_imply_collinear on line_intersection(Line(F, H), altitude(G, F, H)), H, F we get collinear(F, H, line_intersection(Line(F, H), altitude(G, F, H)))
By in_imply_collinear on line_intersection(Line(B, H), altitude(G, B, H)), B, H we get collinear(B, H, line_intersection(Line(B, H), altitude(G, B, H)))
By in_imply_collinear on line_intersection(h, altitude(E, B, D)), G, D we get collinear(D, G, line_intersection(h, altitude(E, B, D)))
By line_inequality on altitude(G, B, C), Line(F, H), G we get Line(F, H) != altitude(G, B, C)
By line_containment_inequality on line_intersection(g, altitude(F, A, D)), E, g we get E != line_intersection(g, altitude(F, A, D))
By line_circle_intersection_has_at_most_two_points_0 on C, G, orthocenter(B, C, D), Circle(C, D, E) we get orthocenter(B, C, D) not in Circle(C, D, E)
By aa_similarity on D, A, C, C, H, E we get similar_triangles(A, C, D, H, E, C)
By line_containment_inequality on line_intersection(i, altitude(G, C, D)), G, i we get G != line_intersection(i, altitude(G, C, D))
By reverse_direction on H, B we get 180 == direction(H, B) - direction(B, H) mod 360
By line_containment_inequality on line_intersection(i, altitude(B, C, D)), F, i we get F != line_intersection(i, altitude(B, C, D))
By line_inequality on altitude(G, F, H), Line(D, H), G we get Line(D, H) != altitude(G, F, H)
By aa_similarity on D, C, A, C, E, H we get similar_triangles(A, C, D, H, E, C)
By line_inequality on Line(F, H), Line(C, F), H we get Line(C, F) != Line(F, H)
By line_inequality on Line(B, H), Line(A, G), H we get Line(A, G) != Line(B, H)
By aa_similarity on A, D, F, C, D, E we get similar_triangles(A, D, F, C, D, E)
By line_containment_inequality on line_intersection(Line(A, G), altitude(F, A, G)), C, Line(A, G) we get C != line_intersection(Line(A, G), altitude(F, A, G))
By line_containment_inequality on line_intersection(Line(A, B), altitude(F, A, B)), H, Line(A, B) we get H != line_intersection(Line(A, B), altitude(F, A, B))
By line_inequality on Line(B, H), Line(F, H), B we get Line(B, H) != Line(F, H)
By line_containment_inequality on line_intersection(g, altitude(F, A, D)), G, g we get G != line_intersection(g, altitude(F, A, D))
By reverse_direction on B, H we get 180 == direction(B, H) - direction(H, B) mod 360
By line_containment_inequality on line_intersection(Line(B, H), altitude(G, B, H)), G, Line(B, H) we get G != line_intersection(Line(B, H), altitude(G, B, H))
By line_containment_inequality on line_intersection(Line(C, F), altitude(G, C, F)), E, Line(C, F) we get E != line_intersection(Line(C, F), altitude(G, C, F))
By line_inequality on altitude(G, B, H), Line(F, H), G we get Line(F, H) != altitude(G, B, H)
By line_containment_inequality on line_intersection(g, altitude(F, A, D)), B, g we get B != line_intersection(g, altitude(F, A, D))
By line_inequality on altitude(G, F, H), Line(C, F), G we get Line(C, F) != altitude(G, F, H)
By line_inequality on altitude(G, C, F), Line(D, H), G we get Line(D, H) != altitude(G, C, F)
By line_inequality on altitude(G, D, H), Line(C, F), G we get Line(C, F) != altitude(G, D, H)
By line_circle_intersection_has_at_most_two_points_0 on C, G, H, Circle(C, D, E) we get H not in Circle(C, D, E)
By aa_similarity on C, E, H, D, C, A we get similar_triangles(A, C, D, H, E, C)
By aa_similarity on C, H, E, D, A, C we get similar_triangles(A, C, D, H, E, C)
By line_inequality on altitude(G, C, D), Line(D, H), G we get Line(D, H) != altitude(G, C, D)
By aa_similarity on C, E, D, A, F, D we get similar_triangles(A, D, F, C, D, E)
By line_containment_inequality on line_intersection(f, altitude(G, B, C)), F, f we get F != line_intersection(f, altitude(G, B, C))
By aa_similarity on A, F, D, C, E, D we get similar_triangles(A, D, F, C, D, E)
By aa_similarity on C, D, E, A, D, F we get similar_triangles(A, D, F, C, D, E)
By line_inequality on altitude(F, A, G), Line(A, G), F we get Line(A, G) != altitude(F, A, G)
By line_containment_inequality on line_intersection(i, altitude(E, C, D)), B, i we get B != line_intersection(i, altitude(E, C, D))
By line_containment_inequality on line_intersection(h, altitude(E, B, D)), C, h we get C != line_intersection(h, altitude(E, B, D))
By line_inequality on altitude(G, C, D), Line(B, H), G we get Line(B, H) != altitude(G, C, D)
By line_containment_inequality on line_intersection(Line(D, H), altitude(G, D, H)), C, Line(D, H) we get C != line_intersection(Line(D, H), altitude(G, D, H))
By line_containment_inequality on line_intersection(i, altitude(G, C, D)), F, i we get F != line_intersection(i, altitude(G, C, D))
By line_inequality on altitude(F, A, D), Line(B, H), F we get Line(B, H) != altitude(F, A, D)
By line_inequality on altitude(B, C, D), Line(F, H), B we get Line(F, H) != altitude(B, C, D)
By line_inequality on Line(D, H), Line(A, G), D we get Line(A, G) != Line(D, H)
By line_containment_inequality on line_intersection(i, altitude(E, C, D)), G, i we get G != line_intersection(i, altitude(E, C, D))
By line_inequality on altitude(G, B, C), Line(C, F), G we get Line(C, F) != altitude(G, B, C)
By line_containment_inequality on line_intersection(Line(F, H), altitude(G, F, H)), B, Line(F, H) we get B != line_intersection(Line(F, H), altitude(G, F, H))
By line_inequality on altitude(G, B, H), Line(B, H), G we get Line(B, H) != altitude(G, B, H)
By line_inequality on Line(C, F), Line(B, H), F we get Line(B, H) != Line(C, F)
By line_inequality on altitude(E, B, D), Line(F, H), E we get Line(F, H) != altitude(E, B, D)
By line_inequality on Line(D, H), Line(C, F), D we get Line(C, F) != Line(D, H)
By line_containment_inequality on line_intersection(Line(F, H), altitude(G, F, H)), E, Line(F, H) we get E != line_intersection(Line(F, H), altitude(G, F, H))
By line_inequality on altitude(G, C, F), Line(C, F), G we get Line(C, F) != altitude(G, C, F)
By line_circle_intersection_has_at_most_two_points_0 on D, G, F, Circle(C, D, E) we get F not in Circle(C, D, E)
By line_inequality on altitude(E, C, D), Line(D, H), E we get Line(D, H) != altitude(E, C, D)
By line_containment_inequality on line_intersection(h, altitude(E, B, D)), H, h we get H != line_intersection(h, altitude(E, B, D))
By line_inequality on altitude(G, F, H), Line(F, H), G we get Line(F, H) != altitude(G, F, H)
By line_containment_inequality on line_intersection(i, altitude(B, C, D)), B, i we get B != line_intersection(i, altitude(B, C, D))
By line_containment_inequality on line_intersection(Line(A, G), altitude(F, A, G)), F, Line(A, G) we get F != line_intersection(Line(A, G), altitude(F, A, G))
By line_containment_inequality on line_intersection(g, altitude(F, A, D)), H, g we get H != line_intersection(g, altitude(F, A, D))
By line_inequality on Line(C, F), Line(A, G), F we get Line(A, G) != Line(C, F)
By line_inequality on altitude(G, F, H), Line(B, H), G we get Line(B, H) != altitude(G, F, H)
By line_inequality on altitude(E, B, D), Line(A, G), E we get Line(A, G) != altitude(E, B, D)
By line_inequality on altitude(E, C, D), Line(B, H), E we get Line(B, H) != altitude(E, C, D)
By line_containment_inequality on line_intersection(i, altitude(E, C, D)), H, i we get H != line_intersection(i, altitude(E, C, D))
By line_inequality on altitude(E, B, D), Line(D, H), E we get Line(D, H) != altitude(E, B, D)
By line_containment_inequality on line_intersection(Line(D, H), altitude(G, D, H)), A, Line(D, H) we get A != line_intersection(Line(D, H), altitude(G, D, H))
By line_inequality on Line(A, G), Line(F, H), G we get Line(A, G) != Line(F, H)
By line_inequality on altitude(F, A, B), Line(B, H), F we get Line(B, H) != altitude(F, A, B)
By line_inequality on altitude(G, B, C), Line(B, H), G we get Line(B, H) != altitude(G, B, C)
By line_inequality on altitude(G, C, F), Line(B, H), G we get Line(B, H) != altitude(G, C, F)
By line_inequality on altitude(G, D, H), Line(D, H), G we get Line(D, H) != altitude(G, D, H)
By line_containment_inequality on line_intersection(i, altitude(B, C, D)), A, i we get A != line_intersection(i, altitude(B, C, D))
By line_circle_intersection_has_at_most_two_points_0 on C, E, B, Circle(C, D, E) we get B not in Circle(C, D, E)
By line_inequality on altitude(E, B, D), Line(C, F), E we get Line(C, F) != altitude(E, B, D)
By line_inequality on altitude(F, A, G), Line(D, H), F we get Line(D, H) != altitude(F, A, G)
By line_containment_inequality on line_intersection(Line(C, F), altitude(G, C, F)), A, Line(C, F) we get A != line_intersection(Line(C, F), altitude(G, C, F))
By line_inequality on altitude(F, A, D), Line(D, H), F we get Line(D, H) != altitude(F, A, D)
By line_containment_inequality on line_intersection(Line(F, H), altitude(G, F, H)), D, Line(F, H) we get D != line_intersection(Line(F, H), altitude(G, F, H))
By line_containment_inequality on line_intersection(Line(B, H), altitude(G, B, H)), C, Line(B, H) we get C != line_intersection(Line(B, H), altitude(G, B, H))
By line_inequality on Line(D, H), Line(B, H), D we get Line(B, H) != Line(D, H)
By line_containment_inequality on line_intersection(Line(D, H), altitude(G, D, H)), E, Line(D, H) we get E != line_intersection(Line(D, H), altitude(G, D, H))
By line_containment_inequality on line_intersection(h, altitude(E, B, D)), E, h we get E != line_intersection(h, altitude(E, B, D))
By line_inequality on altitude(G, B, C), Line(D, H), G we get Line(D, H) != altitude(G, B, C)
By line_inequality on altitude(G, C, D), Line(C, F), G we get Line(C, F) != altitude(G, C, D)
By line_containment_inequality on line_intersection(i, altitude(E, C, D)), E, i we get E != line_intersection(i, altitude(E, C, D))
By line_inequality on altitude(F, A, B), Line(A, G), F we get Line(A, G) != altitude(F, A, B)
By line_containment_inequality on line_intersection(h, altitude(E, B, D)), A, h we get A != line_intersection(h, altitude(E, B, D))
By line_containment_inequality on line_intersection(Line(C, F), altitude(G, C, F)), B, Line(C, F) we get B != line_intersection(Line(C, F), altitude(G, C, F))
By line_containment_inequality on line_intersection(i, altitude(G, C, D)), A, i we get A != line_intersection(i, altitude(G, C, D))
By line_containment_inequality on line_intersection(g, altitude(F, A, D)), F, g we get F != line_intersection(g, altitude(F, A, D))
By line_inequality on altitude(G, B, H), Line(C, F), G we get Line(C, F) != altitude(G, B, H)
By line_containment_inequality on line_intersection(Line(F, H), altitude(G, F, H)), G, Line(F, H) we get G != line_intersection(Line(F, H), altitude(G, F, H))
By line_containment_inequality on line_intersection(i, altitude(G, C, D)), B, i we get B != line_intersection(i, altitude(G, C, D))
By line_containment_inequality on line_intersection(Line(B, H), altitude(G, B, H)), D, Line(B, H) we get D != line_intersection(Line(B, H), altitude(G, B, H))
By line_containment_inequality on line_intersection(i, altitude(B, C, D)), G, i we get G != line_intersection(i, altitude(B, C, D))
By line_containment_inequality on line_intersection(Line(A, G), altitude(F, A, G)), E, Line(A, G) we get E != line_intersection(Line(A, G), altitude(F, A, G))
By line_inequality on altitude(E, C, D), Line(F, H), E we get Line(F, H) != altitude(E, C, D)
By line_inequality on altitude(G, D, H), Line(F, H), G we get Line(F, H) != altitude(G, D, H)
By line_inequality on altitude(B, C, D), Line(A, G), B we get Line(A, G) != altitude(B, C, D)
By line_containment_inequality on line_intersection(Line(C, F), altitude(G, C, F)), G, Line(C, F) we get G != line_intersection(Line(C, F), altitude(G, C, F))
By line_containment_inequality on line_intersection(f, altitude(G, B, C)), G, f we get G != line_intersection(f, altitude(G, B, C))
By line_containment_inequality on line_intersection(Line(B, H), altitude(G, B, H)), F, Line(B, H) we get F != line_intersection(Line(B, H), altitude(G, B, H))
By line_containment_inequality on line_intersection(Line(A, B), altitude(F, A, B)), C, Line(A, B) we get C != line_intersection(Line(A, B), altitude(F, A, B))
By line_inequality on altitude(E, B, D), Line(B, H), E we get Line(B, H) != altitude(E, B, D)
By line_containment_inequality on line_intersection(Line(A, G), altitude(F, A, G)), H, Line(A, G) we get H != line_intersection(Line(A, G), altitude(F, A, G))
By line_containment_inequality on line_intersection(i, altitude(E, C, D)), A, i we get A != line_intersection(i, altitude(E, C, D))
By line_containment_inequality on line_intersection(Line(B, H), altitude(G, B, H)), E, Line(B, H) we get E != line_intersection(Line(B, H), altitude(G, B, H))
By line_containment_inequality on line_intersection(f, altitude(G, B, C)), D, f we get D != line_intersection(f, altitude(G, B, C))
By line_containment_inequality on line_intersection(Line(A, B), altitude(F, A, B)), E, Line(A, B) we get E != line_intersection(Line(A, B), altitude(F, A, B))
By line_containment_inequality on line_intersection(Line(D, H), altitude(G, D, H)), G, Line(D, H) we get G != line_intersection(Line(D, H), altitude(G, D, H))
By line_inequality on altitude(B, C, D), Line(C, F), B we get Line(C, F) != altitude(B, C, D)
By line_containment_inequality on line_intersection(Line(B, H), altitude(G, B, H)), A, Line(B, H) we get A != line_intersection(Line(B, H), altitude(G, B, H))
By line_containment_inequality on line_intersection(i, altitude(G, C, D)), H, i we get H != line_intersection(i, altitude(G, C, D))
By line_containment_inequality on line_intersection(Line(C, F), altitude(G, C, F)), D, Line(C, F) we get D != line_intersection(Line(C, F), altitude(G, C, F))
By line_inequality on altitude(E, C, D), Line(A, G), E we get Line(A, G) != altitude(E, C, D)
By line_containment_inequality on line_intersection(Line(F, H), altitude(G, F, H)), A, Line(F, H) we get A != line_intersection(Line(F, H), altitude(G, F, H))
By line_containment_inequality on line_intersection(Line(A, G), altitude(F, A, G)), B, Line(A, G) we get B != line_intersection(Line(A, G), altitude(F, A, G))
By line_containment_inequality on line_intersection(g, altitude(F, A, D)), C, g we get C != line_intersection(g, altitude(F, A, D))
By line_containment_inequality on line_intersection(i, altitude(B, C, D)), E, i we get E != line_intersection(i, altitude(B, C, D))
By line_inequality on altitude(F, A, G), Line(B, H), F we get Line(B, H) != altitude(F, A, G)
By line_containment_inequality on line_intersection(Line(A, G), altitude(F, A, G)), D, Line(A, G) we get D != line_intersection(Line(A, G), altitude(F, A, G))
By line_containment_inequality on line_intersection(f, altitude(G, B, C)), H, f we get H != line_intersection(f, altitude(G, B, C))
By line_inequality on altitude(F, A, D), Line(A, G), F we get Line(A, G) != altitude(F, A, D)
By line_containment_inequality on line_intersection(Line(A, B), altitude(F, A, B)), D, Line(A, B) we get D != line_intersection(Line(A, B), altitude(F, A, B))
By line_containment_inequality on line_intersection(f, altitude(G, B, C)), A, f we get A != line_intersection(f, altitude(G, B, C))
By line_inequality on Line(F, H), Line(D, H), F we get Line(D, H) != Line(F, H)
By line_inequality on altitude(F, A, B), Line(D, H), F we get Line(D, H) != altitude(F, A, B)
By line_inequality on altitude(G, B, H), Line(D, H), G we get Line(D, H) != altitude(G, B, H)
By line_containment_inequality on line_intersection(Line(A, B), altitude(F, A, B)), G, Line(A, B) we get G != line_intersection(Line(A, B), altitude(F, A, B))
By line_containment_inequality on line_intersection(Line(F, H), altitude(G, F, H)), C, Line(F, H) we get C != line_intersection(Line(F, H), altitude(G, F, H))
By line_containment_inequality on line_intersection(i, altitude(G, C, D)), E, i we get E != line_intersection(i, altitude(G, C, D))
By line_inequality on altitude(G, C, D), Line(F, H), G we get Line(F, H) != altitude(G, C, D)
By line_containment_inequality on line_intersection(Line(A, B), altitude(F, A, B)), F, Line(A, B) we get F != line_intersection(Line(A, B), altitude(F, A, B))
By line_inequality on altitude(G, C, F), Line(F, H), G we get Line(F, H) != altitude(G, C, F)
By line_containment_inequality on line_intersection(i, altitude(B, C, D)), H, i we get H != line_intersection(i, altitude(B, C, D))
By line_containment_inequality on line_intersection(Line(D, H), altitude(G, D, H)), B, Line(D, H) we get B != line_intersection(Line(D, H), altitude(G, D, H))
By line_containment_inequality on line_intersection(Line(C, F), altitude(G, C, F)), H, Line(C, F) we get H != line_intersection(Line(C, F), altitude(G, C, F))
By line_containment_inequality on line_intersection(Line(D, H), altitude(G, D, H)), F, Line(D, H) we get F != line_intersection(Line(D, H), altitude(G, D, H))
By line_containment_inequality on line_intersection(i, altitude(E, C, D)), F, i we get F != line_intersection(i, altitude(E, C, D))
By line_inequality on altitude(E, C, D), Line(C, F), E we get Line(C, F) != altitude(E, C, D)
By line_inequality on altitude(B, C, D), Line(D, H), B we get Line(D, H) != altitude(B, C, D)
By collinear_definition on C, G, orthocenter(B, C, D) we get G in Line(C, orthocenter(B, C, D)), orthocenter(B, C, D) in Line(C, G), Line(C, G) == Line(C, orthocenter(B, C, D)), 0 == 2 * angle(G, C, orthocenter(B, C, D)) mod 360
By perpendicular_lines_draw_intersection on k, altitude(E, C, D) we get exists(line_intersection(k, altitude(E, C, D)))
By power_of_a_point_in_circle on G, Circle(C, D, E) we get 0 == power_of_a_point(G, Circle(C, D, E))
By collinear_definition on H, orthocenter(B, C, D), C we get orthocenter(B, C, D) in Line(C, H), C in Line(H, orthocenter(B, C, D)), Line(C, H) == Line(H, orthocenter(B, C, D)), 0 == 2 * angle(orthocenter(B, C, D), H, C) mod 360
By collinear_definition on G, orthocenter(B, C, D), H we get orthocenter(B, C, D) in Line(G, H), H in Line(G, orthocenter(B, C, D)), Line(G, H) == Line(G, orthocenter(B, C, D)), 0 == 2 * angle(orthocenter(B, C, D), G, H) mod 360
By power_of_a_point_on_circle on D, Circle(C, D, E) we get 0 == power_of_a_point(D, Circle(C, D, E))
By collinear_definition on H, orthocenter(B, C, D), G we get orthocenter(B, C, D) in Line(G, H), G in Line(H, orthocenter(B, C, D)), Line(G, H) == Line(H, orthocenter(B, C, D)), 0 == 2 * angle(orthocenter(B, C, D), H, G) mod 360
By collinear_definition on G, C, orthocenter(B, C, D) we get C in Line(G, orthocenter(B, C, D)), orthocenter(B, C, D) in Line(C, G), Line(C, G) == Line(G, orthocenter(B, C, D)), 0 == 2 * angle(C, G, orthocenter(B, C, D)) mod 360
By collinear_definition on E, orthocenter(B, C, D), D we get orthocenter(B, C, D) in Line(D, E), D in Line(E, orthocenter(B, C, D)), Line(D, E) == Line(E, orthocenter(B, C, D)), 0 == 2 * angle(orthocenter(B, C, D), E, D) mod 360
By collinear_definition on G, orthocenter(B, C, D), C we get orthocenter(B, C, D) in Line(C, G), C in Line(G, orthocenter(B, C, D)), Line(C, G) == Line(G, orthocenter(B, C, D)), 0 == 2 * angle(orthocenter(B, C, D), G, C) mod 360
By collinear_definition on H, C, orthocenter(B, C, D) we get C in Line(H, orthocenter(B, C, D)), orthocenter(B, C, D) in Line(C, H), Line(C, H) == Line(H, orthocenter(B, C, D)), 0 == 2 * angle(C, H, orthocenter(B, C, D)) mod 360
By collinear_definition on C, H, orthocenter(B, C, D) we get H in Line(C, orthocenter(B, C, D)), orthocenter(B, C, D) in Line(C, H), Line(C, H) == Line(C, orthocenter(B, C, D)), 0 == 2 * angle(H, C, orthocenter(B, C, D)) mod 360
By power_of_a_point_on_circle on C, Circle(C, D, E) we get 0 == power_of_a_point(C, Circle(C, D, E))
By collinear_definition on E, D, orthocenter(B, C, D) we get D in Line(E, orthocenter(B, C, D)), orthocenter(B, C, D) in Line(D, E), Line(D, E) == Line(E, orthocenter(B, C, D)), 0 == 2 * angle(D, E, orthocenter(B, C, D)) mod 360
By collinear_definition on C, orthocenter(B, C, D), G we get orthocenter(B, C, D) in Line(C, G), G in Line(C, orthocenter(B, C, D)), Line(C, G) == Line(C, orthocenter(B, C, D)), 0 == 2 * angle(orthocenter(B, C, D), C, G) mod 360
By perpendicular_lines_draw_intersection on k, altitude(B, C, D) we get exists(line_intersection(k, altitude(B, C, D)))
By collinear_definition on C, orthocenter(B, C, D), H we get orthocenter(B, C, D) in Line(C, H), H in Line(C, orthocenter(B, C, D)), Line(C, H) == Line(C, orthocenter(B, C, D)), 0 == 2 * angle(orthocenter(B, C, D), C, H) mod 360
By power_of_a_point_in_circle on E, Circle(C, D, E) we get 0 == power_of_a_point(E, Circle(C, D, E))
By collinear_definition on G, H, orthocenter(B, C, D) we get H in Line(G, orthocenter(B, C, D)), orthocenter(B, C, D) in Line(G, H), Line(G, H) == Line(G, orthocenter(B, C, D)), 0 == 2 * angle(H, G, orthocenter(B, C, D)) mod 360
By collinear_definition on D, E, orthocenter(B, C, D) we get E in Line(D, orthocenter(B, C, D)), orthocenter(B, C, D) in Line(D, E), Line(D, E) == Line(D, orthocenter(B, C, D)), 0 == 2 * angle(E, D, orthocenter(B, C, D)) mod 360
By collinear_definition on D, orthocenter(B, C, D), E we get orthocenter(B, C, D) in Line(D, E), E in Line(D, orthocenter(B, C, D)), Line(D, E) == Line(D, orthocenter(B, C, D)), 0 == 2 * angle(orthocenter(B, C, D), D, E) mod 360
By collinear_definition on H, G, orthocenter(B, C, D) we get G in Line(H, orthocenter(B, C, D)), orthocenter(B, C, D) in Line(G, H), Line(G, H) == Line(H, orthocenter(B, C, D)), 0 == 2 * angle(G, H, orthocenter(B, C, D)) mod 360
By perpendicular_lines_draw_intersection on altitude(G, C, D), k we get exists(line_intersection(k, altitude(G, C, D)))
By sas_anti_similarity on E, B, G, D, B, C we get anti_similar_triangles(B, C, D, B, G, E)
By collinear_definition on orthocenter(B, C, D), H, G we get H in Line(G, orthocenter(B, C, D)), G in Line(H, orthocenter(B, C, D)), Line(G, orthocenter(B, C, D)) == Line(H, orthocenter(B, C, D)), 0 == 2 * angle(H, orthocenter(B, C, D), G) mod 360
By collinear_definition on orthocenter(B, C, D), H, C we get H in Line(C, orthocenter(B, C, D)), C in Line(H, orthocenter(B, C, D)), Line(C, orthocenter(B, C, D)) == Line(H, orthocenter(B, C, D)), 0 == 2 * angle(H, orthocenter(B, C, D), C) mod 360
By altitude_definition on B, E, H, altitude(B, C, D) we get altitude(B, C, D) == altitude(B, E, H)
By collinear_definition on orthocenter(B, C, D), C, H we get C in Line(H, orthocenter(B, C, D)), H in Line(C, orthocenter(B, C, D)), Line(C, orthocenter(B, C, D)) == Line(H, orthocenter(B, C, D)), 0 == 2 * angle(C, orthocenter(B, C, D), H) mod 360
By collinear_definition on orthocenter(B, C, D), C, G we get C in Line(G, orthocenter(B, C, D)), G in Line(C, orthocenter(B, C, D)), Line(C, orthocenter(B, C, D)) == Line(G, orthocenter(B, C, D)), 0 == 2 * angle(C, orthocenter(B, C, D), G) mod 360
By collinear_definition on orthocenter(B, C, D), G, H we get G in Line(H, orthocenter(B, C, D)), H in Line(G, orthocenter(B, C, D)), Line(G, orthocenter(B, C, D)) == Line(H, orthocenter(B, C, D)), 0 == 2 * angle(G, orthocenter(B, C, D), H) mod 360
By sas_anti_similarity on G, B, E, C, B, D we get anti_similar_triangles(B, C, D, B, G, E)
By collinear_definition on orthocenter(B, C, D), G, C we get G in Line(C, orthocenter(B, C, D)), C in Line(G, orthocenter(B, C, D)), Line(C, orthocenter(B, C, D)) == Line(G, orthocenter(B, C, D)), 0 == 2 * angle(G, orthocenter(B, C, D), C) mod 360
By sas_anti_similarity on C, B, D, G, B, E we get anti_similar_triangles(B, C, D, B, G, E)
By sas_anti_similarity on D, B, C, E, B, G we get anti_similar_triangles(B, C, D, B, G, E)
By altitude_definition on G, H, E, altitude(G, C, D) we get altitude(G, C, D) == altitude(G, E, H)
By collinear_definition on orthocenter(B, C, D), D, E we get D in Line(E, orthocenter(B, C, D)), E in Line(D, orthocenter(B, C, D)), Line(D, orthocenter(B, C, D)) == Line(E, orthocenter(B, C, D)), 0 == 2 * angle(D, orthocenter(B, C, D), E) mod 360
By collinear_definition on orthocenter(B, C, D), E, D we get E in Line(D, orthocenter(B, C, D)), D in Line(E, orthocenter(B, C, D)), Line(D, orthocenter(B, C, D)) == Line(E, orthocenter(B, C, D)), 0 == 2 * angle(E, orthocenter(B, C, D), D) mod 360
By anti_similar_triangle_basic_properties on A, F, B, C, G, B we get not_collinear(A, B, F), not_collinear(B, C, G), angle(A, F, B) == 0 - angle(C, G, B) mod 360, angle(F, B, A) == 0 - angle(G, B, C) mod 360, angle(B, A, F) == 0 - angle(B, C, G) mod 360, log(distance(A, F)) + log(distance(B, G)) == log(distance(C, G)) + log(distance(B, F)), log(distance(B, F)) + log(distance(B, C)) == log(distance(B, G)) + log(distance(A, B)), log(distance(A, B)) + log(distance(C, G)) == log(distance(B, C)) + log(distance(A, F))
By anti_similar_triangle_basic_properties on F, A, B, G, C, B we get not_collinear(A, B, F), not_collinear(B, C, G), angle(F, A, B) == 0 - angle(G, C, B) mod 360, angle(A, B, F) == 0 - angle(C, B, G) mod 360, angle(B, F, A) == 0 - angle(B, G, C) mod 360, log(distance(A, F)) + log(distance(B, C)) == log(distance(C, G)) + log(distance(A, B)), log(distance(A, B)) + log(distance(B, G)) == log(distance(B, C)) + log(distance(B, F)), log(distance(B, F)) + log(distance(C, G)) == log(distance(B, G)) + log(distance(A, F))
By similar_triangle_basic_properties on F, B, A, E, B, D we get not_collinear(A, B, F), not_collinear(B, D, E), angle(E, B, D) == angle(F, B, A) mod 360, angle(B, A, F) == angle(B, D, E) mod 360, angle(A, F, B) == angle(D, E, B) mod 360, log(distance(B, E)) + log(distance(A, B)) == log(distance(B, F)) + log(distance(B, D)), log(distance(A, B)) + log(distance(D, E)) == log(distance(B, D)) + log(distance(A, F)), log(distance(A, F)) + log(distance(B, E)) == log(distance(D, E)) + log(distance(B, F))
By similar_triangle_basic_properties on B, F, A, B, E, D we get not_collinear(A, B, F), not_collinear(B, D, E), angle(B, E, D) == angle(B, F, A) mod 360, angle(E, D, B) == angle(F, A, B) mod 360, angle(A, B, F) == angle(D, B, E) mod 360, log(distance(B, E)) + log(distance(A, F)) == log(distance(B, F)) + log(distance(D, E)), log(distance(A, F)) + log(distance(B, D)) == log(distance(D, E)) + log(distance(A, B)), log(distance(A, B)) + log(distance(B, E)) == log(distance(B, D)) + log(distance(B, F))
By line_definition on line_intersection(Line(C, F), altitude(G, C, F)), G, altitude(G, C, F) we get altitude(G, C, F) == Line(G, line_intersection(Line(C, F), altitude(G, C, F)))
By line_definition on line_intersection(i, altitude(G, C, D)), G, altitude(G, C, D) we get altitude(G, C, D) == Line(G, line_intersection(i, altitude(G, C, D)))
By line_definition on line_intersection(Line(F, H), altitude(G, F, H)), G, altitude(G, F, H) we get altitude(G, F, H) == Line(G, line_intersection(Line(F, H), altitude(G, F, H)))
By line_definition on G, line_intersection(Line(B, H), altitude(G, B, H)), altitude(G, B, H) we get altitude(G, B, H) == Line(G, line_intersection(Line(B, H), altitude(G, B, H)))
By line_definition on E, line_intersection(h, altitude(E, B, D)), altitude(E, B, D) we get altitude(E, B, D) == Line(E, line_intersection(h, altitude(E, B, D)))
By line_definition on line_intersection(g, altitude(F, A, D)), F, altitude(F, A, D) we get altitude(F, A, D) == Line(F, line_intersection(g, altitude(F, A, D)))
By line_definition on F, line_intersection(Line(A, G), altitude(F, A, G)), altitude(F, A, G) we get altitude(F, A, G) == Line(F, line_intersection(Line(A, G), altitude(F, A, G)))
By line_definition on B, line_intersection(i, altitude(B, C, D)), altitude(B, C, D) we get altitude(B, C, D) == Line(B, line_intersection(i, altitude(B, C, D)))
By line_definition on line_intersection(i, altitude(E, C, D)), E, altitude(E, C, D) we get altitude(E, C, D) == Line(E, line_intersection(i, altitude(E, C, D)))
By line_definition on G, line_intersection(f, altitude(G, B, C)), altitude(G, B, C) we get altitude(G, B, C) == Line(G, line_intersection(f, altitude(G, B, C)))
By line_definition on line_intersection(Line(D, H), altitude(G, D, H)), G, altitude(G, D, H) we get altitude(G, D, H) == Line(G, line_intersection(Line(D, H), altitude(G, D, H)))
By line_definition on F, line_intersection(Line(A, B), altitude(F, A, B)), altitude(F, A, B) we get altitude(F, A, B) == Line(F, line_intersection(Line(A, B), altitude(F, A, B)))
By line_intersection_definition on H, Line(D, H), Line(F, H) we get H == line_intersection(Line(D, H), Line(F, H))
By line_intersection_definition on F, Line(C, F), Line(F, H) we get F == line_intersection(Line(C, F), Line(F, H))
By perpendicular_line_definition on line_intersection(k, altitude(G, C, D)), altitude(G, C, D), i we get altitude(G, C, D) == perpendicular_line(line_intersection(k, altitude(G, C, D)), i)
By perpendicular_line_definition on line_intersection(k, altitude(B, C, D)), altitude(B, C, D), k we get altitude(B, C, D) == perpendicular_line(line_intersection(k, altitude(B, C, D)), k)
By line_intersection_definition on H, Line(B, H), Line(F, H) we get H == line_intersection(Line(B, H), Line(F, H))
By line_intersection_definition on H, Line(B, H), Line(D, H) we get H == line_intersection(Line(B, H), Line(D, H))
By concurrent_sufficient_conditions on Line(B, H), Line(F, H), j we get concurrent(j, Line(B, H), Line(F, H))
By perpendicular_line_definition on E, Line(E, G), altitude(B, E, G) we get Line(E, G) == perpendicular_line(E, altitude(B, E, G))
By perpendicular_line_definition on line_intersection(k, altitude(B, C, D)), altitude(B, C, D), i we get altitude(B, C, D) == perpendicular_line(line_intersection(k, altitude(B, C, D)), i)
By perpendicular_line_definition on line_intersection(k, altitude(G, C, D)), k, altitude(G, C, D) we get k == perpendicular_line(line_intersection(k, altitude(G, C, D)), altitude(G, C, D))
By concurrent_sufficient_conditions on Line(C, F), Line(F, H), Line(A, F) we get concurrent(Line(A, F), Line(C, F), Line(F, H))
By perpendicular_line_definition on line_intersection(k, altitude(G, C, D)), altitude(G, C, D), k we get altitude(G, C, D) == perpendicular_line(line_intersection(k, altitude(G, C, D)), k)
By perpendicular_line_definition on line_intersection(k, altitude(G, C, D)), k, altitude(E, C, D) we get k == perpendicular_line(line_intersection(k, altitude(G, C, D)), altitude(E, C, D))
By concurrent_sufficient_conditions on Line(F, H), Line(D, H), j we get concurrent(j, Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on Line(F, H), Line(C, F), Line(A, F) we get concurrent(Line(A, F), Line(C, F), Line(F, H))
By concurrent_sufficient_conditions on Line(F, H), Line(C, F), h we get concurrent(h, Line(C, F), Line(F, H))
By concurrent_sufficient_conditions on Line(B, H), Line(D, H), j we get concurrent(j, Line(B, H), Line(D, H))
By perpendicular_line_definition on line_intersection(k, altitude(B, C, D)), k, altitude(B, C, D) we get k == perpendicular_line(line_intersection(k, altitude(B, C, D)), altitude(B, C, D))
By perpendicular_line_definition on G, Line(E, G), altitude(B, E, G) we get Line(E, G) == perpendicular_line(G, altitude(B, E, G))
By perpendicular_line_definition on line_intersection(k, altitude(B, C, D)), k, altitude(E, C, D) we get k == perpendicular_line(line_intersection(k, altitude(B, C, D)), altitude(E, C, D))
By concurrent_sufficient_conditions on Line(F, H), Line(B, H), j we get concurrent(j, Line(B, H), Line(F, H))
By concurrent_sufficient_conditions on Line(D, H), Line(F, H), j we get concurrent(j, Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on Line(B, H), Line(D, H), k we get concurrent(k, Line(B, H), Line(D, H))
By concurrent_sufficient_conditions on Line(D, H), Line(B, H), j we get concurrent(j, Line(B, H), Line(D, H))
By perpendicular_line_definition on orthocenter(B, E, G), altitude(E, B, D), h we get altitude(E, B, D) == perpendicular_line(orthocenter(B, E, G), h)
By concurrent_sufficient_conditions on Line(F, H), Line(D, H), k we get concurrent(k, Line(D, H), Line(F, H))
By perpendicular_line_definition on line_intersection(k, altitude(B, C, D)), k, altitude(G, C, D) we get k == perpendicular_line(line_intersection(k, altitude(B, C, D)), altitude(G, C, D))
By concurrent_sufficient_conditions on Line(F, H), Line(B, H), k we get concurrent(k, Line(B, H), Line(F, H))
By perpendicular_line_definition on orthocenter(B, E, G), altitude(G, B, C), f we get altitude(G, B, C) == perpendicular_line(orthocenter(B, E, G), f)
By concurrent_sufficient_conditions on Line(D, H), Line(B, H), k we get concurrent(k, Line(B, H), Line(D, H))
By concurrent_sufficient_conditions on Line(C, F), Line(F, H), h we get concurrent(h, Line(C, F), Line(F, H))
By concurrent_sufficient_conditions on Line(D, H), Line(F, H), k we get concurrent(k, Line(D, H), Line(F, H))
By perpendicular_line_definition on orthocenter(B, E, G), altitude(B, E, G), Line(E, G) we get altitude(B, E, G) == perpendicular_line(orthocenter(B, E, G), Line(E, G))
By concurrent_sufficient_conditions on Line(B, H), Line(F, H), k we get concurrent(k, Line(B, H), Line(F, H))
By perpendicular_line_definition on line_intersection(k, altitude(G, C, D)), k, altitude(B, C, D) we get k == perpendicular_line(line_intersection(k, altitude(G, C, D)), altitude(B, C, D))
By between_implies_orientation on line_intersection(Line(F, H), altitude(G, F, H)), G, D, B we get orientation(B, line_intersection(Line(F, H), altitude(G, F, H)), D) == orientation(D, line_intersection(Line(F, H), altitude(G, F, H)), G) mod 360, orientation(B, line_intersection(Line(F, H), altitude(G, F, H)), G) == orientation(D, line_intersection(Line(F, H), altitude(G, F, H)), G) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(D, H), altitude(G, D, H)), B, F, G we get orientation(B, line_intersection(Line(D, H), altitude(G, D, H)), F) == orientation(F, G, line_intersection(Line(D, H), altitude(G, D, H))) mod 360
By between_implies_orientation on line_intersection(Line(C, F), altitude(G, C, F)), G, D, B we get orientation(B, line_intersection(Line(C, F), altitude(G, C, F)), D) == orientation(D, line_intersection(Line(C, F), altitude(G, C, F)), G) mod 360, orientation(B, line_intersection(Line(C, F), altitude(G, C, F)), G) == orientation(D, line_intersection(Line(C, F), altitude(G, C, F)), G) mod 360
By between_implies_orientation on line_intersection(Line(A, G), altitude(F, A, G)), C, E, B we get orientation(B, line_intersection(Line(A, G), altitude(F, A, G)), E) == orientation(C, E, line_intersection(Line(A, G), altitude(F, A, G))) mod 360, orientation(B, line_intersection(Line(A, G), altitude(F, A, G)), C) == orientation(C, E, line_intersection(Line(A, G), altitude(F, A, G))) mod 360
By perpendicular_direction_conditions_v0_r on B, G, orthocenter(B, C, D), H we get 180 == 2 * direction(B, G) - 2 * direction(orthocenter(B, C, D), H) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(g, altitude(F, A, D)), C, G, H we get orientation(C, line_intersection(g, altitude(F, A, D)), G) == orientation(G, H, line_intersection(g, altitude(F, A, D))) mod 360
By between_implies_orientation on line_intersection(g, altitude(F, A, D)), H, C, G we get orientation(C, G, line_intersection(g, altitude(F, A, D))) == orientation(C, line_intersection(g, altitude(F, A, D)), H) mod 360, orientation(C, line_intersection(g, altitude(F, A, D)), H) == orientation(G, line_intersection(g, altitude(F, A, D)), H) mod 360
By between_implies_orientation on line_intersection(g, altitude(F, A, D)), B, G, F we get orientation(B, G, line_intersection(g, altitude(F, A, D))) == orientation(F, line_intersection(g, altitude(F, A, D)), G) mod 360, orientation(B, F, line_intersection(g, altitude(F, A, D))) == orientation(B, G, line_intersection(g, altitude(F, A, D))) mod 360
By between_implies_orientation on line_intersection(Line(A, G), altitude(F, A, G)), B, D, F we get orientation(B, D, line_intersection(Line(A, G), altitude(F, A, G))) == orientation(D, F, line_intersection(Line(A, G), altitude(F, A, G))) mod 360, orientation(B, D, line_intersection(Line(A, G), altitude(F, A, G))) == orientation(B, F, line_intersection(Line(A, G), altitude(F, A, G))) mod 360
By between_implies_orientation on line_intersection(i, altitude(E, C, D)), F, G, B we get orientation(B, line_intersection(i, altitude(E, C, D)), G) == orientation(F, G, line_intersection(i, altitude(E, C, D))) mod 360, orientation(B, line_intersection(i, altitude(E, C, D)), F) == orientation(F, G, line_intersection(i, altitude(E, C, D))) mod 360
By between_implies_orientation on line_intersection(Line(A, B), altitude(F, A, B)), H, C, G we get orientation(C, G, line_intersection(Line(A, B), altitude(F, A, B))) == orientation(C, line_intersection(Line(A, B), altitude(F, A, B)), H) mod 360, orientation(C, line_intersection(Line(A, B), altitude(F, A, B)), H) == orientation(G, line_intersection(Line(A, B), altitude(F, A, B)), H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), H, G, B we get 180 == 2 * direction(orthocenter(B, C, D), H) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), E, B, E we get 180 == 2 * direction(orthocenter(B, C, D), E) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), D, B, C we get 180 == 2 * direction(orthocenter(B, C, D), D) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on D, B, orthocenter(B, C, D), G we get 180 == 2 * direction(D, B) - 2 * direction(orthocenter(B, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), C, G, B we get 180 == 2 * direction(orthocenter(B, C, D), C) - 2 * direction(G, B) mod 360
By between_implies_orientation on line_intersection(Line(F, H), altitude(G, F, H)), B, D, G we get orientation(B, D, line_intersection(Line(F, H), altitude(G, F, H))) == orientation(D, G, line_intersection(Line(F, H), altitude(G, F, H))) mod 360, orientation(B, D, line_intersection(Line(F, H), altitude(G, F, H))) == orientation(B, G, line_intersection(Line(F, H), altitude(G, F, H))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(A, G), altitude(F, A, G)), D, F, B we get orientation(B, line_intersection(Line(A, G), altitude(F, A, G)), F) == orientation(D, line_intersection(Line(A, G), altitude(F, A, G)), F) mod 360
By same_angle_v1 on G, H, C, E we get angle(C, G, E) == angle(H, G, E) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(A, B), altitude(F, A, B)), C, G, H we get orientation(C, line_intersection(Line(A, B), altitude(F, A, B)), G) == orientation(G, H, line_intersection(Line(A, B), altitude(F, A, B))) mod 360
By perpendicular_direction_conditions_v0_r on G, F, orthocenter(B, C, D), C we get 180 == 2 * direction(G, F) - 2 * direction(orthocenter(B, C, D), C) mod 360
By between_implies_orientation on line_intersection(Line(A, G), altitude(F, A, G)), B, E, C we get orientation(B, E, line_intersection(Line(A, G), altitude(F, A, G))) == orientation(C, line_intersection(Line(A, G), altitude(F, A, G)), E) mod 360, orientation(B, C, line_intersection(Line(A, G), altitude(F, A, G))) == orientation(B, E, line_intersection(Line(A, G), altitude(F, A, G))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), E, C, B we get 180 == 2 * direction(orthocenter(B, C, D), E) - 2 * direction(C, B) mod 360
By between_implies_orientation on line_intersection(i, altitude(G, C, D)), F, G, B we get orientation(B, line_intersection(i, altitude(G, C, D)), G) == orientation(F, G, line_intersection(i, altitude(G, C, D))) mod 360, orientation(B, line_intersection(i, altitude(G, C, D)), F) == orientation(F, G, line_intersection(i, altitude(G, C, D))) mod 360
By between_implies_orientation on line_intersection(Line(D, H), altitude(G, D, H)), F, G, B we get orientation(B, line_intersection(Line(D, H), altitude(G, D, H)), G) == orientation(F, G, line_intersection(Line(D, H), altitude(G, D, H))) mod 360, orientation(B, line_intersection(Line(D, H), altitude(G, D, H)), F) == orientation(F, G, line_intersection(Line(D, H), altitude(G, D, H))) mod 360
By perpendicular_direction_conditions_v0_r on B, C, orthocenter(B, C, D), D we get 180 == 2 * direction(B, C) - 2 * direction(orthocenter(B, C, D), D) mod 360
By between_implies_orientation on line_intersection(Line(D, H), altitude(G, D, H)), B, E, C we get orientation(B, E, line_intersection(Line(D, H), altitude(G, D, H))) == orientation(C, line_intersection(Line(D, H), altitude(G, D, H)), E) mod 360, orientation(B, C, line_intersection(Line(D, H), altitude(G, D, H))) == orientation(B, E, line_intersection(Line(D, H), altitude(G, D, H))) mod 360
By perpendicular_direction_conditions_v0_r on D, G, orthocenter(B, C, D), H we get 180 == 2 * direction(D, G) - 2 * direction(orthocenter(B, C, D), H) mod 360
By between_implies_orientation on line_intersection(g, altitude(F, A, D)), B, E, C we get orientation(B, E, line_intersection(g, altitude(F, A, D))) == orientation(C, line_intersection(g, altitude(F, A, D)), E) mod 360, orientation(B, C, line_intersection(g, altitude(F, A, D))) == orientation(B, E, line_intersection(g, altitude(F, A, D))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(F, H), altitude(G, F, H)), E, B, C we get orientation(B, C, line_intersection(Line(F, H), altitude(G, F, H))) == orientation(B, E, line_intersection(Line(F, H), altitude(G, F, H))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(i, altitude(E, C, D)), G, B, F we get orientation(B, F, line_intersection(i, altitude(E, C, D))) == orientation(B, G, line_intersection(i, altitude(E, C, D))) mod 360
By same_angle_v2 on G, D, F, E we get angle(D, G, E) == angle(F, G, E) + 180 mod 360
By perpendicular_direction_conditions_v0_r on B, D, orthocenter(B, C, D), C we get 180 == 2 * direction(B, D) - 2 * direction(orthocenter(B, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on G, B, orthocenter(B, C, D), C we get 180 == 2 * direction(G, B) - 2 * direction(orthocenter(B, C, D), C) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(B, H), altitude(G, B, H)), F, D, G we get orientation(D, F, line_intersection(Line(B, H), altitude(G, B, H))) == orientation(D, G, line_intersection(Line(B, H), altitude(G, B, H))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(D, H), altitude(G, D, H)), F, B, G we get orientation(B, F, line_intersection(Line(D, H), altitude(G, D, H))) == orientation(B, G, line_intersection(Line(D, H), altitude(G, D, H))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), G, D, G we get 180 == 2 * direction(orthocenter(B, C, D), G) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on F, G, orthocenter(B, C, D), G we get 180 == 2 * direction(F, G) - 2 * direction(orthocenter(B, C, D), G) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(i, altitude(B, C, D)), B, F, G we get orientation(B, line_intersection(i, altitude(B, C, D)), F) == orientation(F, G, line_intersection(i, altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), H, F, G we get 180 == 2 * direction(orthocenter(B, C, D), H) - 2 * direction(F, G) mod 360
By between_implies_orientation on line_intersection(Line(A, G), altitude(F, A, G)), F, D, B we get orientation(B, line_intersection(Line(A, G), altitude(F, A, G)), D) == orientation(D, line_intersection(Line(A, G), altitude(F, A, G)), F) mod 360, orientation(B, line_intersection(Line(A, G), altitude(F, A, G)), F) == orientation(D, line_intersection(Line(A, G), altitude(F, A, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), G, G, D we get 180 == 2 * direction(orthocenter(B, C, D), G) - 2 * direction(G, D) mod 360
By same_angle_v2 on G, B, F, E we get angle(B, G, E) == angle(F, G, E) + 180 mod 360
By between_implies_orientation on line_intersection(Line(A, B), altitude(F, A, B)), G, C, H we get orientation(C, H, line_intersection(Line(A, B), altitude(F, A, B))) == orientation(C, line_intersection(Line(A, B), altitude(F, A, B)), G) mod 360, orientation(C, line_intersection(Line(A, B), altitude(F, A, B)), G) == orientation(G, H, line_intersection(Line(A, B), altitude(F, A, B))) mod 360
By perpendicular_direction_conditions_v0_r on E, B, orthocenter(B, C, D), D we get 180 == 2 * direction(E, B) - 2 * direction(orthocenter(B, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), H, D, F we get 180 == 2 * direction(orthocenter(B, C, D), H) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on F, D, orthocenter(B, C, D), H we get 180 == 2 * direction(F, D) - 2 * direction(orthocenter(B, C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on C, E, orthocenter(B, C, D), E we get 180 == 2 * direction(C, E) - 2 * direction(orthocenter(B, C, D), E) mod 360
By between_implies_orientation on line_intersection(Line(C, F), altitude(G, C, F)), B, D, G we get orientation(B, D, line_intersection(Line(C, F), altitude(G, C, F))) == orientation(D, G, line_intersection(Line(C, F), altitude(G, C, F))) mod 360, orientation(B, D, line_intersection(Line(C, F), altitude(G, C, F))) == orientation(B, G, line_intersection(Line(C, F), altitude(G, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), D, B, E we get 180 == 2 * direction(orthocenter(B, C, D), D) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on D, F, orthocenter(B, C, D), G we get 180 == 2 * direction(D, F) - 2 * direction(orthocenter(B, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), C, B, F we get 180 == 2 * direction(orthocenter(B, C, D), C) - 2 * direction(B, F) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(i, altitude(B, C, D)), G, B, F we get orientation(B, F, line_intersection(i, altitude(B, C, D))) == orientation(B, G, line_intersection(i, altitude(B, C, D))) mod 360
By between_implies_orientation on line_intersection(g, altitude(F, A, D)), C, E, B we get orientation(B, line_intersection(g, altitude(F, A, D)), E) == orientation(C, E, line_intersection(g, altitude(F, A, D))) mod 360, orientation(B, line_intersection(g, altitude(F, A, D)), C) == orientation(C, E, line_intersection(g, altitude(F, A, D))) mod 360
By between_implies_orientation on line_intersection(Line(B, H), altitude(G, B, H)), D, G, F we get orientation(D, G, line_intersection(Line(B, H), altitude(G, B, H))) == orientation(F, line_intersection(Line(B, H), altitude(G, B, H)), G) mod 360, orientation(D, F, line_intersection(Line(B, H), altitude(G, B, H))) == orientation(D, G, line_intersection(Line(B, H), altitude(G, B, H))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), G, D, F we get 180 == 2 * direction(orthocenter(B, C, D), G) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on G, D, orthocenter(B, C, D), G we get 180 == 2 * direction(G, D) - 2 * direction(orthocenter(B, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), H, D, B we get 180 == 2 * direction(orthocenter(B, C, D), H) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), C, F, G we get 180 == 2 * direction(orthocenter(B, C, D), C) - 2 * direction(F, G) mod 360
By between_implies_orientation on line_intersection(Line(F, H), altitude(G, F, H)), C, E, B we get orientation(B, line_intersection(Line(F, H), altitude(G, F, H)), E) == orientation(C, E, line_intersection(Line(F, H), altitude(G, F, H))) mod 360, orientation(B, line_intersection(Line(F, H), altitude(G, F, H)), C) == orientation(C, E, line_intersection(Line(F, H), altitude(G, F, H))) mod 360
By between_implies_orientation on line_intersection(g, altitude(F, A, D)), F, G, B we get orientation(B, line_intersection(g, altitude(F, A, D)), G) == orientation(F, G, line_intersection(g, altitude(F, A, D))) mod 360, orientation(B, line_intersection(g, altitude(F, A, D)), F) == orientation(F, G, line_intersection(g, altitude(F, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on B, D, orthocenter(B, C, D), G we get 180 == 2 * direction(B, D) - 2 * direction(orthocenter(B, C, D), G) mod 360
By between_implies_orientation on line_intersection(Line(D, H), altitude(G, D, H)), C, E, B we get orientation(B, line_intersection(Line(D, H), altitude(G, D, H)), E) == orientation(C, E, line_intersection(Line(D, H), altitude(G, D, H))) mod 360, orientation(B, line_intersection(Line(D, H), altitude(G, D, H)), C) == orientation(C, E, line_intersection(Line(D, H), altitude(G, D, H))) mod 360
By perpendicular_direction_conditions_v0_r on F, D, orthocenter(B, C, D), C we get 180 == 2 * direction(F, D) - 2 * direction(orthocenter(B, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), D, E, B we get 180 == 2 * direction(orthocenter(B, C, D), D) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on F, B, orthocenter(B, C, D), H we get 180 == 2 * direction(F, B) - 2 * direction(orthocenter(B, C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), E, E, B we get 180 == 2 * direction(orthocenter(B, C, D), E) - 2 * direction(E, B) mod 360
By between_implies_orientation on line_intersection(Line(D, H), altitude(G, D, H)), B, G, F we get orientation(B, G, line_intersection(Line(D, H), altitude(G, D, H))) == orientation(F, line_intersection(Line(D, H), altitude(G, D, H)), G) mod 360, orientation(B, F, line_intersection(Line(D, H), altitude(G, D, H))) == orientation(B, G, line_intersection(Line(D, H), altitude(G, D, H))) mod 360
By perpendicular_direction_conditions_v0_r on B, D, orthocenter(B, C, D), H we get 180 == 2 * direction(B, D) - 2 * direction(orthocenter(B, C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), G, G, F we get 180 == 2 * direction(orthocenter(B, C, D), G) - 2 * direction(G, F) mod 360
By between_implies_orientation on line_intersection(i, altitude(G, C, D)), B, G, F we get orientation(B, G, line_intersection(i, altitude(G, C, D))) == orientation(F, line_intersection(i, altitude(G, C, D)), G) mod 360, orientation(B, F, line_intersection(i, altitude(G, C, D))) == orientation(B, G, line_intersection(i, altitude(G, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), C, G, D we get 180 == 2 * direction(orthocenter(B, C, D), C) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), E, B, C we get 180 == 2 * direction(orthocenter(B, C, D), E) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), G, B, G we get 180 == 2 * direction(orthocenter(B, C, D), G) - 2 * direction(B, G) mod 360
By between_implies_orientation on line_intersection(f, altitude(G, B, C)), F, G, D we get orientation(D, line_intersection(f, altitude(G, B, C)), G) == orientation(F, G, line_intersection(f, altitude(G, B, C))) mod 360, orientation(D, line_intersection(f, altitude(G, B, C)), F) == orientation(F, G, line_intersection(f, altitude(G, B, C))) mod 360
By between_implies_orientation on line_intersection(Line(A, B), altitude(F, A, B)), F, G, D we get orientation(D, line_intersection(Line(A, B), altitude(F, A, B)), G) == orientation(F, G, line_intersection(Line(A, B), altitude(F, A, B))) mod 360, orientation(D, line_intersection(Line(A, B), altitude(F, A, B)), F) == orientation(F, G, line_intersection(Line(A, B), altitude(F, A, B))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), H, B, F we get 180 == 2 * direction(orthocenter(B, C, D), H) - 2 * direction(B, F) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(A, B), altitude(F, A, B)), G, D, F we get orientation(D, F, line_intersection(Line(A, B), altitude(F, A, B))) == orientation(D, G, line_intersection(Line(A, B), altitude(F, A, B))) mod 360
By between_implies_orientation on line_intersection(g, altitude(F, A, D)), G, C, H we get orientation(C, H, line_intersection(g, altitude(F, A, D))) == orientation(C, line_intersection(g, altitude(F, A, D)), G) mod 360, orientation(C, line_intersection(g, altitude(F, A, D)), G) == orientation(G, H, line_intersection(g, altitude(F, A, D))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(B, H), altitude(G, B, H)), D, F, G we get orientation(D, line_intersection(Line(B, H), altitude(G, B, H)), F) == orientation(F, G, line_intersection(Line(B, H), altitude(G, B, H))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), C, G, F we get 180 == 2 * direction(orthocenter(B, C, D), C) - 2 * direction(G, F) mod 360
By between_implies_orientation on line_intersection(i, altitude(B, C, D)), F, G, B we get orientation(B, line_intersection(i, altitude(B, C, D)), G) == orientation(F, G, line_intersection(i, altitude(B, C, D))) mod 360, orientation(B, line_intersection(i, altitude(B, C, D)), F) == orientation(F, G, line_intersection(i, altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on D, B, orthocenter(B, C, D), C we get 180 == 2 * direction(D, B) - 2 * direction(orthocenter(B, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), C, D, F we get 180 == 2 * direction(orthocenter(B, C, D), C) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), C, B, D we get 180 == 2 * direction(orthocenter(B, C, D), C) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), C, D, G we get 180 == 2 * direction(orthocenter(B, C, D), C) - 2 * direction(D, G) mod 360
By between_implies_orientation on line_intersection(i, altitude(E, C, D)), B, G, F we get orientation(B, G, line_intersection(i, altitude(E, C, D))) == orientation(F, line_intersection(i, altitude(E, C, D)), G) mod 360, orientation(B, F, line_intersection(i, altitude(E, C, D))) == orientation(B, G, line_intersection(i, altitude(E, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on E, C, orthocenter(B, C, D), E we get 180 == 2 * direction(E, C) - 2 * direction(orthocenter(B, C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), H, F, B we get 180 == 2 * direction(orthocenter(B, C, D), H) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), D, C, E we get 180 == 2 * direction(orthocenter(B, C, D), D) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), G, F, D we get 180 == 2 * direction(orthocenter(B, C, D), G) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on G, B, orthocenter(B, C, D), G we get 180 == 2 * direction(G, B) - 2 * direction(orthocenter(B, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on G, F, orthocenter(B, C, D), G we get 180 == 2 * direction(G, F) - 2 * direction(orthocenter(B, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), C, B, G we get 180 == 2 * direction(orthocenter(B, C, D), C) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on D, F, orthocenter(B, C, D), C we get 180 == 2 * direction(D, F) - 2 * direction(orthocenter(B, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on F, G, orthocenter(B, C, D), H we get 180 == 2 * direction(F, G) - 2 * direction(orthocenter(B, C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on G, D, orthocenter(B, C, D), C we get 180 == 2 * direction(G, D) - 2 * direction(orthocenter(B, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on E, C, orthocenter(B, C, D), D we get 180 == 2 * direction(E, C) - 2 * direction(orthocenter(B, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on C, E, orthocenter(B, C, D), D we get 180 == 2 * direction(C, E) - 2 * direction(orthocenter(B, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), D, E, C we get 180 == 2 * direction(orthocenter(B, C, D), D) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), H, B, D we get 180 == 2 * direction(orthocenter(B, C, D), H) - 2 * direction(B, D) mod 360
By between_implies_orientation on line_intersection(Line(F, H), altitude(G, F, H)), B, E, C we get orientation(B, E, line_intersection(Line(F, H), altitude(G, F, H))) == orientation(C, line_intersection(Line(F, H), altitude(G, F, H)), E) mod 360, orientation(B, C, line_intersection(Line(F, H), altitude(G, F, H))) == orientation(B, E, line_intersection(Line(F, H), altitude(G, F, H))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), D, C, B we get 180 == 2 * direction(orthocenter(B, C, D), D) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on D, G, orthocenter(B, C, D), G we get 180 == 2 * direction(D, G) - 2 * direction(orthocenter(B, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), G, G, B we get 180 == 2 * direction(orthocenter(B, C, D), G) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), H, D, G we get 180 == 2 * direction(orthocenter(B, C, D), H) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), C, F, B we get 180 == 2 * direction(orthocenter(B, C, D), C) - 2 * direction(F, B) mod 360
By between_implies_orientation on line_intersection(Line(A, B), altitude(F, A, B)), D, G, F we get orientation(D, G, line_intersection(Line(A, B), altitude(F, A, B))) == orientation(F, line_intersection(Line(A, B), altitude(F, A, B)), G) mod 360, orientation(D, F, line_intersection(Line(A, B), altitude(F, A, B))) == orientation(D, G, line_intersection(Line(A, B), altitude(F, A, B))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), G, F, G we get 180 == 2 * direction(orthocenter(B, C, D), G) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), G, F, B we get 180 == 2 * direction(orthocenter(B, C, D), G) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), G, B, D we get 180 == 2 * direction(orthocenter(B, C, D), G) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on B, F, orthocenter(B, C, D), H we get 180 == 2 * direction(B, F) - 2 * direction(orthocenter(B, C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on C, B, orthocenter(B, C, D), E we get 180 == 2 * direction(C, B) - 2 * direction(orthocenter(B, C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on B, C, orthocenter(B, C, D), E we get 180 == 2 * direction(B, C) - 2 * direction(orthocenter(B, C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on D, F, orthocenter(B, C, D), H we get 180 == 2 * direction(D, F) - 2 * direction(orthocenter(B, C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on B, F, orthocenter(B, C, D), C we get 180 == 2 * direction(B, F) - 2 * direction(orthocenter(B, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on G, F, orthocenter(B, C, D), H we get 180 == 2 * direction(G, F) - 2 * direction(orthocenter(B, C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), H, F, D we get 180 == 2 * direction(orthocenter(B, C, D), H) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on F, G, orthocenter(B, C, D), C we get 180 == 2 * direction(F, G) - 2 * direction(orthocenter(B, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on B, E, orthocenter(B, C, D), E we get 180 == 2 * direction(B, E) - 2 * direction(orthocenter(B, C, D), E) mod 360
By projection_definition on orthocenter(B, C, D), E, f we get E == projection(orthocenter(B, C, D), f)
By perpendicular_direction_conditions_v0_r on B, F, orthocenter(B, C, D), G we get 180 == 2 * direction(B, F) - 2 * direction(orthocenter(B, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), G, B, F we get 180 == 2 * direction(orthocenter(B, C, D), G) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on B, G, orthocenter(B, C, D), C we get 180 == 2 * direction(B, G) - 2 * direction(orthocenter(B, C, D), C) mod 360
By projection_definition on orthocenter(B, C, D), G, h we get G == projection(orthocenter(B, C, D), h)
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), G, D, B we get 180 == 2 * direction(orthocenter(B, C, D), G) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on C, B, orthocenter(B, C, D), D we get 180 == 2 * direction(C, B) - 2 * direction(orthocenter(B, C, D), D) mod 360
By between_implies_orientation on line_intersection(f, altitude(G, B, C)), D, G, F we get orientation(D, G, line_intersection(f, altitude(G, B, C))) == orientation(F, line_intersection(f, altitude(G, B, C)), G) mod 360, orientation(D, F, line_intersection(f, altitude(G, B, C))) == orientation(D, G, line_intersection(f, altitude(G, B, C))) mod 360
By perpendicular_direction_conditions_v0_r on D, G, orthocenter(B, C, D), C we get 180 == 2 * direction(D, G) - 2 * direction(orthocenter(B, C, D), C) mod 360
By between_implies_orientation on line_intersection(i, altitude(B, C, D)), B, G, F we get orientation(B, G, line_intersection(i, altitude(B, C, D))) == orientation(F, line_intersection(i, altitude(B, C, D)), G) mod 360, orientation(B, F, line_intersection(i, altitude(B, C, D))) == orientation(B, G, line_intersection(i, altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on F, B, orthocenter(B, C, D), G we get 180 == 2 * direction(F, B) - 2 * direction(orthocenter(B, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), E, E, C we get 180 == 2 * direction(orthocenter(B, C, D), E) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), C, D, B we get 180 == 2 * direction(orthocenter(B, C, D), C) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), H, G, F we get 180 == 2 * direction(orthocenter(B, C, D), H) - 2 * direction(G, F) mod 360
By between_implies_orientation on line_intersection(Line(B, H), altitude(G, B, H)), F, G, D we get orientation(D, line_intersection(Line(B, H), altitude(G, B, H)), G) == orientation(F, G, line_intersection(Line(B, H), altitude(G, B, H))) mod 360, orientation(D, line_intersection(Line(B, H), altitude(G, B, H)), F) == orientation(F, G, line_intersection(Line(B, H), altitude(G, B, H))) mod 360
By perpendicular_direction_conditions_v0_r on B, G, orthocenter(B, C, D), G we get 180 == 2 * direction(B, G) - 2 * direction(orthocenter(B, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on G, B, orthocenter(B, C, D), H we get 180 == 2 * direction(G, B) - 2 * direction(orthocenter(B, C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), H, G, D we get 180 == 2 * direction(orthocenter(B, C, D), H) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), E, C, E we get 180 == 2 * direction(orthocenter(B, C, D), E) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on F, D, orthocenter(B, C, D), G we get 180 == 2 * direction(F, D) - 2 * direction(orthocenter(B, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on F, B, orthocenter(B, C, D), C we get 180 == 2 * direction(F, B) - 2 * direction(orthocenter(B, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on E, B, orthocenter(B, C, D), E we get 180 == 2 * direction(E, B) - 2 * direction(orthocenter(B, C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on D, B, orthocenter(B, C, D), H we get 180 == 2 * direction(D, B) - 2 * direction(orthocenter(B, C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), C, F, D we get 180 == 2 * direction(orthocenter(B, C, D), C) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on B, E, orthocenter(B, C, D), D we get 180 == 2 * direction(B, E) - 2 * direction(orthocenter(B, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), H, B, G we get 180 == 2 * direction(orthocenter(B, C, D), H) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on G, D, orthocenter(B, C, D), H we get 180 == 2 * direction(G, D) - 2 * direction(orthocenter(B, C, D), H) mod 360
By parallel_line_definition on orthocenter(B, E, G), altitude(G, B, C), Line(D, E) we get altitude(G, B, C) == parallel_line(orthocenter(B, E, G), Line(D, E))
By parallel_line_definition on line_intersection(k, altitude(G, C, D)), altitude(G, C, D), altitude(E, C, D) we get altitude(G, C, D) == parallel_line(line_intersection(k, altitude(G, C, D)), altitude(E, C, D))
By parallel_line_definition on line_intersection(k, altitude(B, C, D)), altitude(B, C, D), altitude(G, C, D) we get altitude(B, C, D) == parallel_line(line_intersection(k, altitude(B, C, D)), altitude(G, C, D))
By parallel_line_definition on line_intersection(k, altitude(B, C, D)), k, i we get k == parallel_line(line_intersection(k, altitude(B, C, D)), i)
By parallel_line_definition on line_intersection(k, altitude(G, C, D)), k, i we get k == parallel_line(line_intersection(k, altitude(G, C, D)), i)
By parallel_line_definition on orthocenter(B, E, G), altitude(E, B, D), Line(A, F) we get altitude(E, B, D) == parallel_line(orthocenter(B, E, G), Line(A, F))
By parallel_line_definition on line_intersection(k, altitude(G, C, D)), altitude(G, C, D), altitude(B, C, D) we get altitude(G, C, D) == parallel_line(line_intersection(k, altitude(G, C, D)), altitude(B, C, D))
By parallel_line_definition on line_intersection(k, altitude(B, C, D)), altitude(B, C, D), altitude(E, C, D) we get altitude(B, C, D) == parallel_line(line_intersection(k, altitude(B, C, D)), altitude(E, C, D))
By parallel_line_definition on orthocenter(B, E, G), altitude(E, B, D), j we get altitude(E, B, D) == parallel_line(orthocenter(B, E, G), j)
By perpendicular_direction_conditions_v0_r on C, D, orthocenter(B, C, D), B we get 180 == 2 * direction(C, D) - 2 * direction(orthocenter(B, C, D), B) mod 360
By different_points_v1 on G, E we get 0 != distance(E, G)
By different_points_v1 on orthocenter(B, C, D), B we get 0 != distance(B, orthocenter(B, C, D))
By different_points_v1 on H, orthocenter(B, C, D) we get 0 != distance(H, orthocenter(B, C, D))
By different_points_v1 on orthocenter(B, C, D), E we get 0 != distance(E, orthocenter(B, C, D))
By different_points_v1 on orthocenter(B, C, D), G we get 0 != distance(G, orthocenter(B, C, D))
By different_points_v1 on D, orthocenter(B, C, D) we get 0 != distance(D, orthocenter(B, C, D))
By different_points_v1 on C, orthocenter(B, C, D) we get 0 != distance(C, orthocenter(B, C, D))
By perpendicular_direction_conditions_v0_r on H, E, orthocenter(B, C, D), B we get 180 == 2 * direction(H, E) - 2 * direction(orthocenter(B, C, D), B) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), B, C, D we get 180 == 2 * direction(orthocenter(B, C, D), B) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on E, H, B, orthocenter(B, C, D) we get 180 == 2 * direction(E, H) - 2 * direction(B, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on B, orthocenter(B, C, D), E, H we get 180 == 2 * direction(B, orthocenter(B, C, D)) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), B, D, C we get 180 == 2 * direction(orthocenter(B, C, D), B) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on B, orthocenter(B, C, D), H, E we get 180 == 2 * direction(B, orthocenter(B, C, D)) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on B, orthocenter(B, C, D), C, D we get 180 == 2 * direction(B, orthocenter(B, C, D)) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on E, H, orthocenter(B, C, D), B we get 180 == 2 * direction(E, H) - 2 * direction(orthocenter(B, C, D), B) mod 360
By perpendicular_direction_conditions_v0_r on B, orthocenter(B, C, D), D, C we get 180 == 2 * direction(B, orthocenter(B, C, D)) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), B, H, E we get 180 == 2 * direction(orthocenter(B, C, D), B) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on H, E, B, orthocenter(B, C, D) we get 180 == 2 * direction(H, E) - 2 * direction(B, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, C, B, orthocenter(B, C, D) we get 180 == 2 * direction(D, C) - 2 * direction(B, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, C, orthocenter(B, C, D), B we get 180 == 2 * direction(D, C) - 2 * direction(orthocenter(B, C, D), B) mod 360
By perpendicular_direction_conditions_v0_r on C, D, B, orthocenter(B, C, D) we get 180 == 2 * direction(C, D) - 2 * direction(B, orthocenter(B, C, D)) mod 360
By reverse_direction on D, orthocenter(B, C, D) we get 180 == direction(D, orthocenter(B, C, D)) - direction(orthocenter(B, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), B, E, H we get 180 == 2 * direction(orthocenter(B, C, D), B) - 2 * direction(E, H) mod 360
By in_imply_collinear on line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D), B we get collinear(B, orthocenter(B, C, D), line_intersection(k, altitude(B, C, D)))
By perpendicular_angle_conditions_v0 on orthocenter(B, C, D), E, C we get angle(orthocenter(B, C, D), E, C) == orientation(C, orthocenter(B, C, D), E) mod 360
By in_imply_collinear on line_intersection(k, altitude(G, C, D)), E, H we get collinear(E, H, line_intersection(k, altitude(G, C, D)))
By external_angle_bisector_definition_v0 on D, orthocenter(B, C, D), D, G we get 180 == angle(D, G, orthocenter(B, C, D)) + angle(D, G, orthocenter(B, C, D)) mod 360
By in_imply_collinear on line_intersection(k, altitude(B, C, D)), E, H we get collinear(E, H, line_intersection(k, altitude(B, C, D)))
By not_in_line_equivalent_to_not_collinear_v0 on H, orthocenter(B, C, D), B we get not_collinear(B, H, orthocenter(B, C, D)), exists(Line(B, orthocenter(B, C, D)))
By in_imply_collinear on line_intersection(i, altitude(B, C, D)), orthocenter(B, C, D), B we get collinear(B, orthocenter(B, C, D), line_intersection(i, altitude(B, C, D)))
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(B, C, D), D, H we get not_collinear(D, H, orthocenter(B, C, D)), exists(Line(D, H))
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(B, C, D), D, F we get not_collinear(D, F, orthocenter(B, C, D)), exists(Line(D, F))
By reverse_direction on orthocenter(B, C, D), C we get 180 == direction(orthocenter(B, C, D), C) - direction(C, orthocenter(B, C, D)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on F, orthocenter(B, C, D), E we get not_collinear(E, F, orthocenter(B, C, D)), exists(Line(E, orthocenter(B, C, D)))
By perpendicular_angle_conditions_v0 on orthocenter(B, C, D), E, B we get angle(orthocenter(B, C, D), E, B) == orientation(B, orthocenter(B, C, D), E) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on E, G, orthocenter(B, C, D) we get not_collinear(E, G, orthocenter(B, C, D)), exists(Line(G, orthocenter(B, C, D)))
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(B, C, D), A, G we get not_collinear(A, G, orthocenter(B, C, D)), exists(Line(A, G))
By line_inequality on Line(E, G), h, E we get h != Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(B, C, D), G, B we get not_collinear(B, G, orthocenter(B, C, D)), exists(Line(B, G))
By line_inequality on Line(E, G), Line(A, C), E we get Line(A, C) != Line(E, G)
By external_angle_bisector_definition_v0 on F, orthocenter(B, C, D), F, G we get 180 == angle(F, G, orthocenter(B, C, D)) + angle(F, G, orthocenter(B, C, D)) mod 360
By line_inequality on altitude(B, E, G), Line(D, H), B we get Line(D, H) != altitude(B, E, G)
By internal_angle_bisector_definition_v0 on C, orthocenter(B, C, D), B, E we get angle(C, E, orthocenter(B, C, D)) == angle(orthocenter(B, C, D), E, B) mod 360
By internal_angle_bisector_definition_v0 on F, orthocenter(B, C, D), D, G we get angle(F, G, orthocenter(B, C, D)) == angle(orthocenter(B, C, D), G, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(B, C, D), H, F we get not_collinear(F, H, orthocenter(B, C, D)), exists(Line(F, H))
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(B, C, D), C, F we get not_collinear(C, F, orthocenter(B, C, D)), exists(Line(C, F))
By not_in_line_equivalent_to_not_collinear_v0 on C, orthocenter(B, C, D), D we get not_collinear(C, D, orthocenter(B, C, D)), exists(Line(D, orthocenter(B, C, D)))
By line_inequality on Line(E, G), g, G we get g != Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(B, C, D), D, B we get not_collinear(B, D, orthocenter(B, C, D)), exists(Line(B, D))
By not_in_line_equivalent_to_not_collinear_v0 on A, orthocenter(B, C, D), C we get not_collinear(A, C, orthocenter(B, C, D)), exists(Line(C, orthocenter(B, C, D)))
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(B, C, D), B, C we get not_collinear(B, C, orthocenter(B, C, D)), exists(Line(B, C))
By not_in_line_equivalent_to_not_collinear_v0 on A, E, orthocenter(B, C, D) we get not_collinear(A, E, orthocenter(B, C, D)), exists(Line(E, orthocenter(B, C, D)))
By line_containment_inequality on line_intersection(k, altitude(B, C, D)), G, altitude(B, C, D) we get G != line_intersection(k, altitude(B, C, D))
By line_containment_inequality on line_intersection(Line(F, H), altitude(G, F, H)), orthocenter(B, C, D), Line(F, H) we get orthocenter(B, C, D) != line_intersection(Line(F, H), altitude(G, F, H))
By line_inequality on Line(E, G), Line(A, B), E we get Line(A, B) != Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(B, C, D), D, A we get not_collinear(A, D, orthocenter(B, C, D)), exists(Line(A, D))
By reverse_direction on orthocenter(B, C, D), H we get 180 == direction(orthocenter(B, C, D), H) - direction(H, orthocenter(B, C, D)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on C, E, orthocenter(B, C, D) we get not_collinear(C, E, orthocenter(B, C, D)), exists(Line(E, orthocenter(B, C, D)))
By line_inequality on Line(E, G), Line(D, E), G we get Line(D, E) != Line(E, G)
By line_inequality on h, altitude(B, C, D), D we get h != altitude(B, C, D)
By external_angle_bisector_definition_v0 on C, orthocenter(B, C, D), C, E we get 180 == angle(C, E, orthocenter(B, C, D)) + angle(C, E, orthocenter(B, C, D)) mod 360
By perpendicular_angle_conditions_v0 on D, G, orthocenter(B, C, D) we get angle(D, G, orthocenter(B, C, D)) == orientation(D, G, orthocenter(B, C, D)) mod 360
By reverse_direction on orthocenter(B, C, D), G we get 180 == direction(orthocenter(B, C, D), G) - direction(G, orthocenter(B, C, D)) mod 360
By external_angle_bisector_definition_v0 on D, orthocenter(B, C, D), B, G we get 180 == angle(D, G, orthocenter(B, C, D)) + angle(B, G, orthocenter(B, C, D)) mod 360
By perpendicular_angle_conditions_v0 on orthocenter(B, C, D), G, F we get angle(orthocenter(B, C, D), G, F) == orientation(F, orthocenter(B, C, D), G) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on H, orthocenter(B, C, D), E we get not_collinear(E, H, orthocenter(B, C, D)), exists(Line(E, orthocenter(B, C, D)))
By line_inequality on altitude(B, C, D), Line(B, H), orthocenter(B, C, D) we get Line(B, H) != altitude(B, C, D)
By not_in_line_equivalent_to_not_collinear_v0 on G, orthocenter(B, C, D), D we get not_collinear(D, G, orthocenter(B, C, D)), exists(Line(D, orthocenter(B, C, D)))
By perpendicular_angle_conditions_v0 on orthocenter(B, C, D), G, D we get angle(orthocenter(B, C, D), G, D) == orientation(D, orthocenter(B, C, D), G) mod 360
By internal_angle_bisector_definition_v0 on B, orthocenter(B, C, D), F, G we get angle(B, G, orthocenter(B, C, D)) == angle(orthocenter(B, C, D), G, F) mod 360
By perpendicular_angle_conditions_v0 on orthocenter(B, C, D), G, B we get angle(orthocenter(B, C, D), G, B) == orientation(B, orthocenter(B, C, D), G) mod 360
By line_containment_inequality on line_intersection(Line(A, G), altitude(F, A, G)), orthocenter(B, C, D), Line(A, G) we get orthocenter(B, C, D) != line_intersection(Line(A, G), altitude(F, A, G))
By perpendicular_angle_conditions_v0 on B, E, orthocenter(B, C, D) we get angle(B, E, orthocenter(B, C, D)) == orientation(B, E, orthocenter(B, C, D)) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on A, G, E we get A not in Line(E, G)
By reverse_direction on G, orthocenter(B, C, D) we get 180 == direction(G, orthocenter(B, C, D)) - direction(orthocenter(B, C, D), G) mod 360
By perpendicular_angle_conditions_v0 on C, E, orthocenter(B, C, D) we get angle(C, E, orthocenter(B, C, D)) == orientation(C, E, orthocenter(B, C, D)) mod 360
By internal_angle_bisector_definition_v0 on B, orthocenter(B, C, D), C, E we get angle(B, E, orthocenter(B, C, D)) == angle(orthocenter(B, C, D), E, C) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on F, G, orthocenter(B, C, D) we get not_collinear(F, G, orthocenter(B, C, D)), exists(Line(G, orthocenter(B, C, D)))
By line_containment_inequality on line_intersection(k, altitude(B, C, D)), B, k we get B != line_intersection(k, altitude(B, C, D))
By perpendicular_angle_conditions_v0 on F, G, orthocenter(B, C, D) we get angle(F, G, orthocenter(B, C, D)) == orientation(F, G, orthocenter(B, C, D)) mod 360
By reverse_direction on orthocenter(B, C, D), E we get 180 == direction(orthocenter(B, C, D), E) - direction(E, orthocenter(B, C, D)) mod 360
By reverse_direction on C, orthocenter(B, C, D) we get 180 == direction(C, orthocenter(B, C, D)) - direction(orthocenter(B, C, D), C) mod 360
By reverse_direction on orthocenter(B, C, D), D we get 180 == direction(orthocenter(B, C, D), D) - direction(D, orthocenter(B, C, D)) mod 360
By external_angle_bisector_definition_v0 on B, orthocenter(B, C, D), B, E we get 180 == angle(B, E, orthocenter(B, C, D)) + angle(B, E, orthocenter(B, C, D)) mod 360
By internal_angle_bisector_definition_v0 on D, orthocenter(B, C, D), F, G we get angle(D, G, orthocenter(B, C, D)) == angle(orthocenter(B, C, D), G, F) mod 360
By reverse_direction on H, orthocenter(B, C, D) we get 180 == direction(H, orthocenter(B, C, D)) - direction(orthocenter(B, C, D), H) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on C, G, E we get C not in Line(E, G)
By reverse_direction on E, orthocenter(B, C, D) we get 180 == direction(E, orthocenter(B, C, D)) - direction(orthocenter(B, C, D), E) mod 360
By internal_angle_bisector_definition_v0 on F, orthocenter(B, C, D), B, G we get angle(F, G, orthocenter(B, C, D)) == angle(orthocenter(B, C, D), G, B) mod 360
By line_inequality on altitude(G, F, H), altitude(B, C, D), G we get altitude(B, C, D) != altitude(G, F, H)
By external_angle_bisector_definition_v0 on B, orthocenter(B, C, D), B, G we get 180 == angle(B, G, orthocenter(B, C, D)) + angle(B, G, orthocenter(B, C, D)) mod 360
By line_inequality on Line(E, G), Line(D, H), G we get Line(D, H) != Line(E, G)
By perpendicular_angle_conditions_v0 on B, G, orthocenter(B, C, D) we get angle(B, G, orthocenter(B, C, D)) == orientation(B, G, orthocenter(B, C, D)) mod 360
By line_inequality on altitude(B, E, G), Line(A, F), B we get Line(A, F) != altitude(B, E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, G we get D not in Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0 on A, H, orthocenter(B, C, D) we get not_collinear(A, H, orthocenter(B, C, D)), exists(Line(H, orthocenter(B, C, D)))
By line_containment_inequality on line_intersection(k, altitude(B, C, D)), D, k we get D != line_intersection(k, altitude(B, C, D))
By not_in_line_equivalent_to_not_collinear_v0 on B, orthocenter(B, C, D), E we get not_collinear(B, E, orthocenter(B, C, D)), exists(Line(E, orthocenter(B, C, D)))
By line_inequality on altitude(G, C, F), altitude(B, C, D), G we get altitude(B, C, D) != altitude(G, C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on B, E, G we get B not in Line(E, G)
By line_inequality on altitude(B, E, G), j, B we get j != altitude(B, E, G)
By line_inequality on f, altitude(B, C, D), E we get f != altitude(B, C, D)
By line_containment_inequality on line_intersection(k, altitude(B, C, D)), C, altitude(B, C, D) we get C != line_intersection(k, altitude(B, C, D))
By line_containment_inequality on line_intersection(k, altitude(G, C, D)), B, k we get B != line_intersection(k, altitude(G, C, D))
By line_containment_inequality on line_intersection(f, altitude(G, B, C)), orthocenter(B, C, D), f we get orthocenter(B, C, D) != line_intersection(f, altitude(G, B, C))
By line_inequality on Line(E, G), f, G we get f != Line(E, G)
By line_inequality on altitude(B, E, G), g, B we get g != altitude(B, E, G)
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(B, C, D), F, B we get not_collinear(B, F, orthocenter(B, C, D)), exists(Line(B, F))
By line_inequality on altitude(B, E, G), Line(D, E), B we get Line(D, E) != altitude(B, E, G)
By line_containment_inequality on line_intersection(k, altitude(B, C, D)), A, k we get A != line_intersection(k, altitude(B, C, D))
By line_containment_inequality on line_intersection(i, altitude(E, C, D)), orthocenter(B, C, D), i we get orthocenter(B, C, D) != line_intersection(i, altitude(E, C, D))
By line_inequality on Line(E, G), Line(B, H), G we get Line(B, H) != Line(E, G)
By line_containment_inequality on line_intersection(i, altitude(B, C, D)), orthocenter(B, C, D), i we get orthocenter(B, C, D) != line_intersection(i, altitude(B, C, D))
By line_inequality on Line(E, G), altitude(B, C, D), G we get Line(E, G) != altitude(B, C, D)
By line_containment_inequality on line_intersection(i, altitude(B, C, D)), D, altitude(B, C, D) we get D != line_intersection(i, altitude(B, C, D))
By line_inequality on Line(E, G), i, E we get i != Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on F, E, G we get F not in Line(E, G)
By line_containment_inequality on line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D), k we get orthocenter(B, C, D) != line_intersection(k, altitude(B, C, D))
By line_inequality on Line(E, G), Line(A, G), E we get Line(A, G) != Line(E, G)
By line_inequality on altitude(G, D, H), altitude(B, C, D), G we get altitude(B, C, D) != altitude(G, D, H)
By line_containment_inequality on line_intersection(k, altitude(G, C, D)), C, k we get C != line_intersection(k, altitude(G, C, D))
By line_inequality on Line(E, G), k, G we get k != Line(E, G)
By line_containment_inequality on line_intersection(k, altitude(B, C, D)), E, altitude(B, C, D) we get E != line_intersection(k, altitude(B, C, D))
By line_inequality on Line(E, G), Line(C, F), G we get Line(C, F) != Line(E, G)
By line_inequality on Line(E, G), Line(F, H), E we get Line(E, G) != Line(F, H)
By line_containment_inequality on line_intersection(i, altitude(B, C, D)), C, altitude(B, C, D) we get C != line_intersection(i, altitude(B, C, D))
By line_containment_inequality on line_intersection(h, altitude(E, B, D)), orthocenter(B, C, D), h we get orthocenter(B, C, D) != line_intersection(h, altitude(E, B, D))
By line_inequality on Line(E, G), j, E we get j != Line(E, G)
By line_containment_inequality on line_intersection(k, altitude(G, C, D)), G, k we get G != line_intersection(k, altitude(G, C, D))
By line_containment_inequality on line_intersection(k, altitude(B, C, D)), F, k we get F != line_intersection(k, altitude(B, C, D))
By line_containment_inequality on line_intersection(k, altitude(G, C, D)), orthocenter(B, C, D), k we get orthocenter(B, C, D) != line_intersection(k, altitude(G, C, D))
By line_inequality on Line(E, G), Line(A, F), E we get Line(A, F) != Line(E, G)
By line_inequality on altitude(B, E, G), k, B we get k != altitude(B, E, G)
By line_inequality on altitude(B, E, G), Line(A, G), B we get Line(A, G) != altitude(B, E, G)
By line_inequality on altitude(E, B, D), altitude(B, C, D), E we get altitude(B, C, D) != altitude(E, B, D)
By line_inequality on altitude(G, C, D), altitude(B, C, D), G we get altitude(B, C, D) != altitude(G, C, D)
By line_inequality on altitude(E, C, D), altitude(B, C, D), E we get altitude(B, C, D) != altitude(E, C, D)
By line_inequality on altitude(B, E, G), Line(A, C), B we get Line(A, C) != altitude(B, E, G)
By line_inequality on altitude(B, E, G), Line(F, H), B we get Line(F, H) != altitude(B, E, G)
By line_inequality on altitude(B, E, G), i, B we get i != altitude(B, E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on H, G, E we get H not in Line(E, G)
By line_inequality on altitude(B, E, G), Line(C, F), B we get Line(C, F) != altitude(B, E, G)
By line_containment_inequality on line_intersection(Line(B, H), altitude(G, B, H)), orthocenter(B, C, D), Line(B, H) we get orthocenter(B, C, D) != line_intersection(Line(B, H), altitude(G, B, H))
By line_containment_inequality on line_intersection(Line(C, F), altitude(G, C, F)), orthocenter(B, C, D), Line(C, F) we get orthocenter(B, C, D) != line_intersection(Line(C, F), altitude(G, C, F))
By line_inequality on altitude(G, B, C), altitude(B, C, D), G we get altitude(B, C, D) != altitude(G, B, C)
By line_containment_inequality on line_intersection(Line(D, H), altitude(G, D, H)), orthocenter(B, C, D), Line(D, H) we get orthocenter(B, C, D) != line_intersection(Line(D, H), altitude(G, D, H))
By line_containment_inequality on line_intersection(k, altitude(G, C, D)), D, k we get D != line_intersection(k, altitude(G, C, D))
By line_containment_inequality on line_intersection(i, altitude(G, C, D)), orthocenter(B, C, D), i we get orthocenter(B, C, D) != line_intersection(i, altitude(G, C, D))
By line_inequality on altitude(G, B, H), altitude(B, C, D), G we get altitude(B, C, D) != altitude(G, B, H)
By line_containment_inequality on line_intersection(k, altitude(G, C, D)), A, k we get A != line_intersection(k, altitude(G, C, D))
By line_containment_inequality on line_intersection(k, altitude(B, C, D)), H, altitude(B, C, D) we get H != line_intersection(k, altitude(B, C, D))
By line_containment_inequality on line_intersection(g, altitude(F, A, D)), orthocenter(B, C, D), g we get orthocenter(B, C, D) != line_intersection(g, altitude(F, A, D))
By line_containment_inequality on line_intersection(k, altitude(G, C, D)), F, k we get F != line_intersection(k, altitude(G, C, D))
By perpendicular_lines_draw_intersection on altitude(B, E, G), Line(E, G) we get exists(line_intersection(Line(E, G), altitude(B, E, G)))
By internal_angle_bisector_definition_v0_r on H, C, H, orthocenter(B, C, D) we get Line(C, orthocenter(B, C, D)) == internal_angle_bisector(H, orthocenter(B, C, D), H)
By external_angle_bisector_definition_v0_r on G, orthocenter(B, C, D), H, C we get Line(C, orthocenter(B, C, D)) == external_angle_bisector(G, C, H)
By internal_angle_bisector_definition_v0_r on orthocenter(B, C, D), E, orthocenter(B, C, D), D we get Line(D, E) == internal_angle_bisector(orthocenter(B, C, D), D, orthocenter(B, C, D))
By tangent_chord_angle_v0 on E, G, H, D we get tangent(Line(D, E), Circle(E, G, H))
By internal_angle_bisector_definition_v0_r on orthocenter(B, C, D), G, orthocenter(B, C, D), C we get Line(C, G) == internal_angle_bisector(orthocenter(B, C, D), C, orthocenter(B, C, D))
By internal_angle_bisector_definition_v0_r on H, orthocenter(B, C, D), C, G we get Line(G, orthocenter(B, C, D)) == internal_angle_bisector(C, G, H)
By internal_angle_bisector_definition_v0_r on orthocenter(B, C, D), H, orthocenter(B, C, D), C we get Line(C, H) == internal_angle_bisector(orthocenter(B, C, D), C, orthocenter(B, C, D))
By internal_angle_bisector_definition_v0_r on orthocenter(B, C, D), H, orthocenter(B, C, D), G we get Line(G, H) == internal_angle_bisector(orthocenter(B, C, D), G, orthocenter(B, C, D))
By internal_angle_bisector_definition_v0_r on orthocenter(B, C, D), D, orthocenter(B, C, D), E we get Line(D, E) == internal_angle_bisector(orthocenter(B, C, D), E, orthocenter(B, C, D))
By internal_angle_bisector_definition_v0_r on C, H, C, orthocenter(B, C, D) we get Line(H, orthocenter(B, C, D)) == internal_angle_bisector(C, orthocenter(B, C, D), C)
By internal_angle_bisector_definition_v0_r on D, orthocenter(B, C, D), D, E we get Line(E, orthocenter(B, C, D)) == internal_angle_bisector(D, E, D)
By internal_angle_bisector_definition_v0_r on E, orthocenter(B, C, D), E, D we get Line(D, orthocenter(B, C, D)) == internal_angle_bisector(E, D, E)
By internal_angle_bisector_definition_v0_r on C, orthocenter(B, C, D), G, H we get Line(H, orthocenter(B, C, D)) == internal_angle_bisector(C, H, G)
By internal_angle_bisector_definition_v0_r on G, H, G, orthocenter(B, C, D) we get Line(H, orthocenter(B, C, D)) == internal_angle_bisector(G, orthocenter(B, C, D), G)
By internal_angle_bisector_definition_v0_r on E, D, E, orthocenter(B, C, D) we get Line(D, orthocenter(B, C, D)) == internal_angle_bisector(E, orthocenter(B, C, D), E)
By internal_angle_bisector_definition_v0_r on C, G, C, orthocenter(B, C, D) we get Line(G, orthocenter(B, C, D)) == internal_angle_bisector(C, orthocenter(B, C, D), C)
By internal_angle_bisector_definition_v0_r on D, E, D, orthocenter(B, C, D) we get Line(E, orthocenter(B, C, D)) == internal_angle_bisector(D, orthocenter(B, C, D), D)
By internal_angle_bisector_definition_v0_r on orthocenter(B, C, D), C, orthocenter(B, C, D), G we get Line(C, G) == internal_angle_bisector(orthocenter(B, C, D), G, orthocenter(B, C, D))
By internal_angle_bisector_definition_v0_r on G, C, G, orthocenter(B, C, D) we get Line(C, orthocenter(B, C, D)) == internal_angle_bisector(G, orthocenter(B, C, D), G)
By internal_angle_bisector_definition_v0_r on orthocenter(B, C, D), G, orthocenter(B, C, D), H we get Line(G, H) == internal_angle_bisector(orthocenter(B, C, D), H, orthocenter(B, C, D))
By internal_angle_bisector_definition_v0_r on orthocenter(B, C, D), C, orthocenter(B, C, D), H we get Line(C, H) == internal_angle_bisector(orthocenter(B, C, D), H, orthocenter(B, C, D))
By internal_angle_bisector_definition_v0_r on H, G, H, orthocenter(B, C, D) we get Line(G, orthocenter(B, C, D)) == internal_angle_bisector(H, orthocenter(B, C, D), H)
By sas_similarity on D, B, A, E, B, F we get similar_triangles(A, B, D, F, B, E)
By sas_similarity on F, B, E, A, B, D we get similar_triangles(A, B, D, F, B, E)
By anti_similar_triangle_basic_properties on G, E, B, C, D, B we get not_collinear(B, E, G), not_collinear(B, C, D), angle(G, E, B) == 0 - angle(C, D, B) mod 360, angle(E, B, G) == 0 - angle(D, B, C) mod 360, angle(B, G, E) == 0 - angle(B, C, D) mod 360, log(distance(C, D)) + log(distance(B, E)) == log(distance(E, G)) + log(distance(B, D)), log(distance(B, D)) + log(distance(B, G)) == log(distance(B, E)) + log(distance(B, C)), log(distance(B, C)) + log(distance(E, G)) == log(distance(B, G)) + log(distance(C, D))
By anti_similar_triangle_basic_properties on B, E, G, B, D, C we get not_collinear(B, E, G), not_collinear(B, C, D), angle(B, E, G) == 0 - angle(B, D, C) mod 360, angle(E, G, B) == 0 - angle(D, C, B) mod 360, angle(G, B, E) == 0 - angle(C, B, D) mod 360, log(distance(B, D)) + log(distance(E, G)) == log(distance(B, E)) + log(distance(C, D)), log(distance(C, D)) + log(distance(B, G)) == log(distance(E, G)) + log(distance(B, C)), log(distance(B, C)) + log(distance(B, E)) == log(distance(B, G)) + log(distance(B, D))
By sas_similarity on E, B, F, D, B, A we get similar_triangles(A, B, D, F, B, E)
By power_of_a_point_definition on B, G, D, Circle(C, D, E) we get log(distance(B, G)) + log(distance(B, D)) == log(power_of_a_point(B, Circle(C, D, E)))
By sas_similarity on A, B, D, F, B, E we get similar_triangles(A, B, D, F, B, E)
By power_of_a_point_definition on B, E, C, Circle(C, D, E) we get log(distance(B, E)) + log(distance(B, C)) == log(power_of_a_point(B, Circle(C, D, E)))
By similar_triangle_basic_properties on C, E, D, A, F, D we get not_collinear(C, D, E), not_collinear(A, D, F), angle(A, F, D) == angle(C, E, D) mod 360, angle(E, D, C) == angle(F, D, A) mod 360, angle(D, A, F) == angle(D, C, E) mod 360, log(distance(A, F)) + log(distance(D, E)) == log(distance(C, E)) + log(distance(D, F)), log(distance(D, E)) + log(distance(A, D)) == log(distance(D, F)) + log(distance(C, D)), log(distance(A, D)) + log(distance(C, E)) == log(distance(C, D)) + log(distance(A, F))
By similar_triangle_basic_properties on D, F, A, D, E, C we get not_collinear(A, D, F), not_collinear(C, D, E), angle(D, E, C) == angle(D, F, A) mod 360, angle(E, C, D) == angle(F, A, D) mod 360, angle(A, D, F) == angle(C, D, E) mod 360, log(distance(D, E)) + log(distance(A, F)) == log(distance(D, F)) + log(distance(C, E)), log(distance(A, F)) + log(distance(C, D)) == log(distance(C, E)) + log(distance(A, D)), log(distance(A, D)) + log(distance(D, E)) == log(distance(C, D)) + log(distance(D, F))
By power_of_a_point_definition on F, G, D, Circle(C, D, E) we get log(distance(F, G)) + log(distance(D, F)) == log(power_of_a_point(F, Circle(C, D, E)))
By power_of_a_point_definition on H, G, C, Circle(C, D, E) we get log(distance(G, H)) + log(distance(C, H)) == log(power_of_a_point(H, Circle(C, D, E)))
By power_of_a_point_definition on orthocenter(B, C, D), E, D, Circle(C, D, E) we get log(power_of_a_point(orthocenter(B, C, D), Circle(C, D, E))) == log(distance(E, orthocenter(B, C, D))) + log(distance(D, orthocenter(B, C, D)))
By power_of_a_point_definition on orthocenter(B, C, D), G, C, Circle(C, D, E) we get log(power_of_a_point(orthocenter(B, C, D), Circle(C, D, E))) == log(distance(G, orthocenter(B, C, D))) + log(distance(C, orthocenter(B, C, D)))
By anti_similar_triangle_basic_properties on A, C, D, E, G, D we get not_collinear(A, C, D), not_collinear(D, E, G), angle(A, C, D) == 0 - angle(E, G, D) mod 360, angle(C, D, A) == 0 - angle(G, D, E) mod 360, angle(D, A, C) == 0 - angle(D, E, G) mod 360, log(distance(A, C)) + log(distance(D, G)) == log(distance(E, G)) + log(distance(C, D)), log(distance(C, D)) + log(distance(D, E)) == log(distance(D, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(E, G)) == log(distance(D, E)) + log(distance(A, C))
By anti_similar_triangle_basic_properties on E, H, C, G, E, D we get not_collinear(C, E, H), not_collinear(D, E, G), angle(E, H, C) == 0 - angle(G, E, D) mod 360, angle(H, C, E) == 0 - angle(E, D, G) mod 360, angle(C, E, H) == 0 - angle(D, G, E) mod 360, log(distance(E, G)) + log(distance(C, H)) == log(distance(E, H)) + log(distance(D, E)), log(distance(C, H)) + log(distance(D, G)) == log(distance(D, E)) + log(distance(C, E)), log(distance(C, E)) + log(distance(E, G)) == log(distance(D, G)) + log(distance(E, H))
By anti_similar_triangle_basic_properties on E, D, G, A, D, C we get not_collinear(D, E, G), not_collinear(A, C, D), angle(E, D, G) == 0 - angle(A, D, C) mod 360, angle(D, G, E) == 0 - angle(D, C, A) mod 360, angle(G, E, D) == 0 - angle(C, A, D) mod 360, log(distance(A, D)) + log(distance(D, G)) == log(distance(D, E)) + log(distance(C, D)), log(distance(C, D)) + log(distance(E, G)) == log(distance(D, G)) + log(distance(A, C)), log(distance(A, C)) + log(distance(D, E)) == log(distance(E, G)) + log(distance(A, D))
By anti_similar_triangle_basic_properties on E, G, D, H, E, C we get not_collinear(D, E, G), not_collinear(C, E, H), angle(E, G, D) == 0 - angle(H, E, C) mod 360, angle(G, D, E) == 0 - angle(E, C, H) mod 360, angle(D, E, G) == 0 - angle(C, H, E) mod 360, log(distance(E, G)) + log(distance(C, E)) == log(distance(E, H)) + log(distance(D, G)), log(distance(C, E)) + log(distance(D, E)) == log(distance(D, G)) + log(distance(C, H)), log(distance(C, H)) + log(distance(E, G)) == log(distance(D, E)) + log(distance(E, H))
By similar_triangle_basic_properties on H, C, E, A, D, C we get not_collinear(C, E, H), not_collinear(A, C, D), angle(A, D, C) == angle(H, C, E) mod 360, angle(C, E, H) == angle(D, C, A) mod 360, angle(C, A, D) == angle(E, H, C) mod 360, log(distance(A, D)) + log(distance(C, E)) == log(distance(C, H)) + log(distance(C, D)), log(distance(C, D)) + log(distance(E, H)) == log(distance(C, E)) + log(distance(A, C)), log(distance(A, C)) + log(distance(C, H)) == log(distance(E, H)) + log(distance(A, D))
By similar_triangle_basic_properties on D, A, C, C, H, E we get not_collinear(A, C, D), not_collinear(C, E, H), angle(C, H, E) == angle(D, A, C) mod 360, angle(A, C, D) == angle(H, E, C) mod 360, angle(C, D, A) == angle(E, C, H) mod 360, log(distance(A, D)) + log(distance(E, H)) == log(distance(C, H)) + log(distance(A, C)), log(distance(A, C)) + log(distance(C, E)) == log(distance(E, H)) + log(distance(C, D)), log(distance(C, D)) + log(distance(C, H)) == log(distance(C, E)) + log(distance(A, D))
By line_definition on orthocenter(B, C, D), line_intersection(k, altitude(B, C, D)), altitude(B, C, D) we get altitude(B, C, D) == Line(orthocenter(B, C, D), line_intersection(k, altitude(B, C, D)))
By line_definition on G, line_intersection(k, altitude(G, C, D)), altitude(G, C, D) we get altitude(G, C, D) == Line(G, line_intersection(k, altitude(G, C, D)))
By line_definition on E, line_intersection(k, altitude(B, C, D)), k we get k == Line(E, line_intersection(k, altitude(B, C, D)))
By line_definition on line_intersection(k, altitude(B, C, D)), H, k we get k == Line(H, line_intersection(k, altitude(B, C, D)))
By line_definition on line_intersection(k, altitude(B, C, D)), B, altitude(B, C, D) we get altitude(B, C, D) == Line(B, line_intersection(k, altitude(B, C, D)))
By line_definition on C, line_intersection(i, altitude(B, C, D)), i we get i == Line(C, line_intersection(i, altitude(B, C, D)))
By line_definition on D, line_intersection(i, altitude(B, C, D)), i we get i == Line(D, line_intersection(i, altitude(B, C, D)))
By line_definition on line_intersection(i, altitude(B, C, D)), orthocenter(B, C, D), altitude(B, C, D) we get altitude(B, C, D) == Line(orthocenter(B, C, D), line_intersection(i, altitude(B, C, D)))
By line_intersection_definition on E, f, Line(E, G) we get E == line_intersection(f, Line(E, G))
By line_intersection_definition on G, Line(A, G), Line(E, G) we get G == line_intersection(Line(A, G), Line(E, G))
By line_intersection_definition on B, altitude(B, C, D), h we get B == line_intersection(h, altitude(B, C, D))
By perpendicular_line_definition on line_intersection(Line(E, G), altitude(B, E, G)), Line(E, G), altitude(B, E, G) we get Line(E, G) == perpendicular_line(line_intersection(Line(E, G), altitude(B, E, G)), altitude(B, E, G))
By line_intersection_definition on E, Line(E, G), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, G))
By line_intersection_definition on B, Line(B, H), altitude(B, C, D) we get B == line_intersection(Line(B, H), altitude(B, C, D))
By line_intersection_definition on G, j, Line(E, G) we get G == line_intersection(j, Line(E, G))
By line_intersection_definition on G, h, Line(E, G) we get G == line_intersection(h, Line(E, G))
By line_intersection_definition on E, k, Line(E, G) we get E == line_intersection(k, Line(E, G))
By line_intersection_definition on B, altitude(B, C, D), f we get B == line_intersection(f, altitude(B, C, D))
By perpendicular_line_definition on line_intersection(Line(E, G), altitude(B, E, G)), altitude(B, E, G), Line(E, G) we get altitude(B, E, G) == perpendicular_line(line_intersection(Line(E, G), altitude(B, E, G)), Line(E, G))
By line_unique_intersection_v1 on Line(D, E), i, D, line_intersection(i, altitude(B, C, D)) we get line_intersection(i, altitude(B, C, D)) not in Line(D, E)
By line_unique_intersection_v1 on j, altitude(B, C, D), orthocenter(B, C, D), line_intersection(k, altitude(B, C, D)) we get line_intersection(k, altitude(B, C, D)) not in j
By line_unique_intersection_v1 on g, i, D, line_intersection(i, altitude(B, C, D)) we get line_intersection(i, altitude(B, C, D)) not in g
By line_unique_intersection_v1 on Line(B, H), altitude(B, C, D), B, line_intersection(i, altitude(B, C, D)) we get line_intersection(i, altitude(B, C, D)) not in Line(B, H)
By line_unique_intersection_v1 on Line(B, H), k, H, line_intersection(k, altitude(B, C, D)) we get line_intersection(k, altitude(B, C, D)) not in Line(B, H)
By line_unique_intersection_v1 on f, k, E, line_intersection(k, altitude(B, C, D)) we get line_intersection(k, altitude(B, C, D)) not in f
By line_unique_intersection_v1 on Line(E, G), k, E, line_intersection(k, altitude(B, C, D)) we get line_intersection(k, altitude(B, C, D)) not in Line(E, G)
By line_unique_intersection_v1 on Line(D, H), k, H, line_intersection(k, altitude(B, C, D)) we get line_intersection(k, altitude(B, C, D)) not in Line(D, H)
By line_unique_intersection_v1 on Line(D, H), i, D, line_intersection(i, altitude(B, C, D)) we get line_intersection(i, altitude(B, C, D)) not in Line(D, H)
By line_unique_intersection_v1 on h, altitude(B, C, D), B, line_intersection(k, altitude(B, C, D)) we get line_intersection(k, altitude(B, C, D)) not in h
By line_unique_intersection_v1 on Line(E, G), j, G, orthocenter(B, C, D) we get orthocenter(B, C, D) not in Line(E, G)
By line_unique_intersection_v1 on j, altitude(B, C, D), orthocenter(B, C, D), line_intersection(i, altitude(B, C, D)) we get line_intersection(i, altitude(B, C, D)) not in j
By line_unique_intersection_v1 on Line(A, C), i, C, line_intersection(i, altitude(B, C, D)) we get line_intersection(i, altitude(B, C, D)) not in Line(A, C)
By line_unique_intersection_v1 on h, altitude(B, C, D), B, line_intersection(i, altitude(B, C, D)) we get line_intersection(i, altitude(B, C, D)) not in h
By line_unique_intersection_v1 on altitude(B, C, D), h, B, F we get F not in altitude(B, C, D)
By line_unique_intersection_v1 on Line(D, E), k, E, line_intersection(k, altitude(B, C, D)) we get line_intersection(k, altitude(B, C, D)) not in Line(D, E)
By line_unique_intersection_v1 on Line(F, H), k, H, line_intersection(k, altitude(B, C, D)) we get line_intersection(k, altitude(B, C, D)) not in Line(F, H)
By line_unique_intersection_v1 on f, i, C, line_intersection(i, altitude(B, C, D)) we get line_intersection(i, altitude(B, C, D)) not in f
By line_unique_intersection_v1 on Line(C, F), i, C, line_intersection(i, altitude(B, C, D)) we get line_intersection(i, altitude(B, C, D)) not in Line(C, F)
By perpendicular_direction_conditions_v0 on F, E, D, C we get perpendicular(Line(C, D), Line(E, F))
By collinear_and_not_between_implies_orientation on line_intersection(i, altitude(B, C, D)), C, G, H we get orientation(C, line_intersection(i, altitude(B, C, D)), G) == orientation(G, H, line_intersection(i, altitude(B, C, D))) mod 360
By between_implies_orientation on line_intersection(k, altitude(B, C, D)), C, E, B we get orientation(B, line_intersection(k, altitude(B, C, D)), E) == orientation(C, E, line_intersection(k, altitude(B, C, D))) mod 360, orientation(B, line_intersection(k, altitude(B, C, D)), C) == orientation(C, E, line_intersection(k, altitude(B, C, D))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(k, altitude(B, C, D)), D, B, F we get orientation(B, D, line_intersection(k, altitude(B, C, D))) == orientation(B, F, line_intersection(k, altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0 on E, H, E, F we get perpendicular(Line(E, F), Line(E, H))
By same_angle_v0 on F, D, B, E we get angle(B, F, E) == angle(D, F, E) mod 360
By between_implies_orientation on line_intersection(k, altitude(B, C, D)), F, G, B we get orientation(B, line_intersection(k, altitude(B, C, D)), G) == orientation(F, G, line_intersection(k, altitude(B, C, D))) mod 360, orientation(B, line_intersection(k, altitude(B, C, D)), F) == orientation(F, G, line_intersection(k, altitude(B, C, D))) mod 360
By between_implies_orientation on line_intersection(k, altitude(G, C, D)), B, G, F we get orientation(B, G, line_intersection(k, altitude(G, C, D))) == orientation(F, line_intersection(k, altitude(G, C, D)), G) mod 360, orientation(B, F, line_intersection(k, altitude(G, C, D))) == orientation(B, G, line_intersection(k, altitude(G, C, D))) mod 360
By between_implies_orientation on line_intersection(k, altitude(B, C, D)), H, C, G we get orientation(C, G, line_intersection(k, altitude(B, C, D))) == orientation(C, line_intersection(k, altitude(B, C, D)), H) mod 360, orientation(C, line_intersection(k, altitude(B, C, D)), H) == orientation(G, line_intersection(k, altitude(B, C, D)), H) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(i, altitude(B, C, D)), F, B, D we get orientation(B, D, line_intersection(i, altitude(B, C, D))) == orientation(B, F, line_intersection(i, altitude(B, C, D))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(i, altitude(B, C, D)), D, B, G we get orientation(B, D, line_intersection(i, altitude(B, C, D))) == orientation(B, G, line_intersection(i, altitude(B, C, D))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(i, altitude(B, C, D)), F, D, G we get orientation(D, F, line_intersection(i, altitude(B, C, D))) == orientation(D, G, line_intersection(i, altitude(B, C, D))) mod 360
By same_angle_v0 on F, B, G, E we get angle(B, F, E) == angle(G, F, E) mod 360
By between_implies_orientation on line_intersection(i, altitude(B, C, D)), C, E, B we get orientation(B, line_intersection(i, altitude(B, C, D)), E) == orientation(C, E, line_intersection(i, altitude(B, C, D))) mod 360, orientation(B, line_intersection(i, altitude(B, C, D)), C) == orientation(C, E, line_intersection(i, altitude(B, C, D))) mod 360
By between_implies_orientation on line_intersection(i, altitude(B, C, D)), D, G, F we get orientation(D, G, line_intersection(i, altitude(B, C, D))) == orientation(F, line_intersection(i, altitude(B, C, D)), G) mod 360, orientation(D, F, line_intersection(i, altitude(B, C, D))) == orientation(D, G, line_intersection(i, altitude(B, C, D))) mod 360
By between_implies_orientation on line_intersection(k, altitude(B, C, D)), B, D, G we get orientation(B, D, line_intersection(k, altitude(B, C, D))) == orientation(D, G, line_intersection(k, altitude(B, C, D))) mod 360, orientation(B, D, line_intersection(k, altitude(B, C, D))) == orientation(B, G, line_intersection(k, altitude(B, C, D))) mod 360
By projection_definition on G, line_intersection(Line(F, H), altitude(G, F, H)), Line(F, H) we get projection(G, Line(F, H)) == line_intersection(Line(F, H), altitude(G, F, H))
By between_implies_orientation on line_intersection(k, altitude(G, C, D)), B, D, F we get orientation(B, D, line_intersection(k, altitude(G, C, D))) == orientation(D, F, line_intersection(k, altitude(G, C, D))) mod 360, orientation(B, D, line_intersection(k, altitude(G, C, D))) == orientation(B, F, line_intersection(k, altitude(G, C, D))) mod 360
By same_angle_v0 on F, D, G, E we get angle(D, F, E) == angle(G, F, E) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(k, altitude(G, C, D)), B, G, D we get orientation(B, line_intersection(k, altitude(G, C, D)), G) == orientation(D, line_intersection(k, altitude(G, C, D)), G) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(k, altitude(B, C, D)), B, F, D we get orientation(B, line_intersection(k, altitude(B, C, D)), F) == orientation(D, line_intersection(k, altitude(B, C, D)), F) mod 360
By between_implies_orientation on line_intersection(i, altitude(B, C, D)), H, C, G we get orientation(C, G, line_intersection(i, altitude(B, C, D))) == orientation(C, line_intersection(i, altitude(B, C, D)), H) mod 360, orientation(C, line_intersection(i, altitude(B, C, D)), H) == orientation(G, line_intersection(i, altitude(B, C, D)), H) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(k, altitude(B, C, D)), F, B, G we get orientation(B, F, line_intersection(k, altitude(B, C, D))) == orientation(B, G, line_intersection(k, altitude(B, C, D))) mod 360
By between_implies_orientation on line_intersection(k, altitude(G, C, D)), F, G, B we get orientation(B, line_intersection(k, altitude(G, C, D)), G) == orientation(F, G, line_intersection(k, altitude(G, C, D))) mod 360, orientation(B, line_intersection(k, altitude(G, C, D)), F) == orientation(F, G, line_intersection(k, altitude(G, C, D))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(i, altitude(B, C, D)), C, B, E we get orientation(B, C, line_intersection(i, altitude(B, C, D))) == orientation(B, E, line_intersection(i, altitude(B, C, D))) mod 360
By between_implies_orientation on line_intersection(k, altitude(G, C, D)), G, D, B we get orientation(B, line_intersection(k, altitude(G, C, D)), D) == orientation(D, line_intersection(k, altitude(G, C, D)), G) mod 360, orientation(B, line_intersection(k, altitude(G, C, D)), G) == orientation(D, line_intersection(k, altitude(G, C, D)), G) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(k, altitude(B, C, D)), F, D, G we get orientation(D, F, line_intersection(k, altitude(B, C, D))) == orientation(D, G, line_intersection(k, altitude(B, C, D))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(k, altitude(B, C, D)), E, B, C we get orientation(B, C, line_intersection(k, altitude(B, C, D))) == orientation(B, E, line_intersection(k, altitude(B, C, D))) mod 360
By between_implies_orientation on line_intersection(k, altitude(G, C, D)), B, D, G we get orientation(B, D, line_intersection(k, altitude(G, C, D))) == orientation(D, G, line_intersection(k, altitude(G, C, D))) mod 360, orientation(B, D, line_intersection(k, altitude(G, C, D))) == orientation(B, G, line_intersection(k, altitude(G, C, D))) mod 360
By between_implies_orientation on line_intersection(k, altitude(B, C, D)), B, G, F we get orientation(B, G, line_intersection(k, altitude(B, C, D))) == orientation(F, line_intersection(k, altitude(B, C, D)), G) mod 360, orientation(B, F, line_intersection(k, altitude(B, C, D))) == orientation(B, G, line_intersection(k, altitude(B, C, D))) mod 360
By same_angle_v3 on E, C, B, F we get angle(C, E, F) == angle(B, E, F) + 180 mod 360
By projection_definition on G, line_intersection(Line(B, H), altitude(G, B, H)), Line(B, H) we get projection(G, Line(B, H)) == line_intersection(Line(B, H), altitude(G, B, H))
By collinear_and_not_between_implies_orientation on line_intersection(k, altitude(B, C, D)), B, G, D we get orientation(B, line_intersection(k, altitude(B, C, D)), G) == orientation(D, line_intersection(k, altitude(B, C, D)), G) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(i, altitude(B, C, D)), B, F, D we get orientation(B, line_intersection(i, altitude(B, C, D)), F) == orientation(D, line_intersection(i, altitude(B, C, D)), F) mod 360
By between_implies_orientation on line_intersection(i, altitude(B, C, D)), B, D, G we get orientation(B, D, line_intersection(i, altitude(B, C, D))) == orientation(D, G, line_intersection(i, altitude(B, C, D))) mod 360, orientation(B, D, line_intersection(i, altitude(B, C, D))) == orientation(B, G, line_intersection(i, altitude(B, C, D))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(k, altitude(B, C, D)), C, G, H we get orientation(C, line_intersection(k, altitude(B, C, D)), G) == orientation(G, H, line_intersection(k, altitude(B, C, D))) mod 360
By between_implies_orientation on line_intersection(k, altitude(B, C, D)), F, G, D we get orientation(D, line_intersection(k, altitude(B, C, D)), G) == orientation(F, G, line_intersection(k, altitude(B, C, D))) mod 360, orientation(D, line_intersection(k, altitude(B, C, D)), F) == orientation(F, G, line_intersection(k, altitude(B, C, D))) mod 360
By projection_definition on line_intersection(i, altitude(E, C, D)), E, k we get E == projection(line_intersection(i, altitude(E, C, D)), k)
By collinear_and_not_between_implies_orientation on line_intersection(k, altitude(G, C, D)), D, F, B we get orientation(B, line_intersection(k, altitude(G, C, D)), F) == orientation(D, line_intersection(k, altitude(G, C, D)), F) mod 360
By between_implies_orientation on line_intersection(i, altitude(B, C, D)), G, D, B we get orientation(B, line_intersection(i, altitude(B, C, D)), D) == orientation(D, line_intersection(i, altitude(B, C, D)), G) mod 360, orientation(B, line_intersection(i, altitude(B, C, D)), G) == orientation(D, line_intersection(i, altitude(B, C, D)), G) mod 360
By between_implies_orientation on line_intersection(k, altitude(G, C, D)), D, G, F we get orientation(D, G, line_intersection(k, altitude(G, C, D))) == orientation(F, line_intersection(k, altitude(G, C, D)), G) mod 360, orientation(D, F, line_intersection(k, altitude(G, C, D))) == orientation(D, G, line_intersection(k, altitude(G, C, D))) mod 360
By projection_definition on E, line_intersection(h, altitude(E, B, D)), h we get projection(E, h) == line_intersection(h, altitude(E, B, D))
By between_implies_orientation on line_intersection(k, altitude(B, C, D)), B, E, C we get orientation(B, E, line_intersection(k, altitude(B, C, D))) == orientation(C, line_intersection(k, altitude(B, C, D)), E) mod 360, orientation(B, C, line_intersection(k, altitude(B, C, D))) == orientation(B, E, line_intersection(k, altitude(B, C, D))) mod 360
By between_implies_orientation on line_intersection(i, altitude(B, C, D)), B, E, C we get orientation(B, E, line_intersection(i, altitude(B, C, D))) == orientation(C, line_intersection(i, altitude(B, C, D)), E) mod 360, orientation(B, C, line_intersection(i, altitude(B, C, D))) == orientation(B, E, line_intersection(i, altitude(B, C, D))) mod 360
By between_implies_orientation on line_intersection(k, altitude(B, C, D)), D, G, F we get orientation(D, G, line_intersection(k, altitude(B, C, D))) == orientation(F, line_intersection(k, altitude(B, C, D)), G) mod 360, orientation(D, F, line_intersection(k, altitude(B, C, D))) == orientation(D, G, line_intersection(k, altitude(B, C, D))) mod 360
By between_implies_orientation on line_intersection(k, altitude(B, C, D)), B, D, F we get orientation(B, D, line_intersection(k, altitude(B, C, D))) == orientation(D, F, line_intersection(k, altitude(B, C, D))) mod 360, orientation(B, D, line_intersection(k, altitude(B, C, D))) == orientation(B, F, line_intersection(k, altitude(B, C, D))) mod 360
By projection_definition on F, line_intersection(Line(A, G), altitude(F, A, G)), Line(A, G) we get projection(F, Line(A, G)) == line_intersection(Line(A, G), altitude(F, A, G))
By between_implies_orientation on line_intersection(k, altitude(B, C, D)), G, C, H we get orientation(C, H, line_intersection(k, altitude(B, C, D))) == orientation(C, line_intersection(k, altitude(B, C, D)), G) mod 360, orientation(C, line_intersection(k, altitude(B, C, D)), G) == orientation(G, H, line_intersection(k, altitude(B, C, D))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(k, altitude(G, C, D)), G, F, D we get orientation(D, line_intersection(k, altitude(G, C, D)), F) == orientation(F, G, line_intersection(k, altitude(G, C, D))) mod 360
By between_implies_orientation on line_intersection(k, altitude(B, C, D)), G, D, B we get orientation(B, line_intersection(k, altitude(B, C, D)), D) == orientation(D, line_intersection(k, altitude(B, C, D)), G) mod 360, orientation(B, line_intersection(k, altitude(B, C, D)), G) == orientation(D, line_intersection(k, altitude(B, C, D)), G) mod 360
By projection_definition on G, line_intersection(Line(C, F), altitude(G, C, F)), Line(C, F) we get projection(G, Line(C, F)) == line_intersection(Line(C, F), altitude(G, C, F))
By between_implies_orientation on line_intersection(k, altitude(B, C, D)), F, D, B we get orientation(B, line_intersection(k, altitude(B, C, D)), D) == orientation(D, line_intersection(k, altitude(B, C, D)), F) mod 360, orientation(B, line_intersection(k, altitude(B, C, D)), F) == orientation(D, line_intersection(k, altitude(B, C, D)), F) mod 360
By between_implies_orientation on line_intersection(i, altitude(B, C, D)), F, G, D we get orientation(D, line_intersection(i, altitude(B, C, D)), G) == orientation(F, G, line_intersection(i, altitude(B, C, D))) mod 360, orientation(D, line_intersection(i, altitude(B, C, D)), F) == orientation(F, G, line_intersection(i, altitude(B, C, D))) mod 360
By between_implies_orientation on line_intersection(k, altitude(G, C, D)), F, D, B we get orientation(B, line_intersection(k, altitude(G, C, D)), D) == orientation(D, line_intersection(k, altitude(G, C, D)), F) mod 360, orientation(B, line_intersection(k, altitude(G, C, D)), F) == orientation(D, line_intersection(k, altitude(G, C, D)), F) mod 360
By projection_definition on G, line_intersection(f, altitude(G, B, C)), f we get projection(G, f) == line_intersection(f, altitude(G, B, C))
By between_implies_orientation on line_intersection(k, altitude(G, C, D)), F, G, D we get orientation(D, line_intersection(k, altitude(G, C, D)), G) == orientation(F, G, line_intersection(k, altitude(G, C, D))) mod 360, orientation(D, line_intersection(k, altitude(G, C, D)), F) == orientation(F, G, line_intersection(k, altitude(G, C, D))) mod 360
By projection_definition on F, line_intersection(Line(A, B), altitude(F, A, B)), Line(A, B) we get projection(F, Line(A, B)) == line_intersection(Line(A, B), altitude(F, A, B))
By projection_definition on G, line_intersection(i, altitude(G, C, D)), i we get projection(G, i) == line_intersection(i, altitude(G, C, D))
By projection_definition on F, line_intersection(g, altitude(F, A, D)), g we get projection(F, g) == line_intersection(g, altitude(F, A, D))
By projection_definition on G, line_intersection(Line(D, H), altitude(G, D, H)), Line(D, H) we get projection(G, Line(D, H)) == line_intersection(Line(D, H), altitude(G, D, H))
By projection_definition on B, line_intersection(i, altitude(B, C, D)), i we get projection(B, i) == line_intersection(i, altitude(B, C, D))
By between_implies_orientation on line_intersection(i, altitude(B, C, D)), G, C, H we get orientation(C, H, line_intersection(i, altitude(B, C, D))) == orientation(C, line_intersection(i, altitude(B, C, D)), G) mod 360, orientation(C, line_intersection(i, altitude(B, C, D)), G) == orientation(G, H, line_intersection(i, altitude(B, C, D))) mod 360
By between_implies_orientation on line_intersection(i, altitude(B, C, D)), F, D, B we get orientation(B, line_intersection(i, altitude(B, C, D)), D) == orientation(D, line_intersection(i, altitude(B, C, D)), F) mod 360, orientation(B, line_intersection(i, altitude(B, C, D)), F) == orientation(D, line_intersection(i, altitude(B, C, D)), F) mod 360
By between_implies_orientation on line_intersection(i, altitude(B, C, D)), B, D, F we get orientation(B, D, line_intersection(i, altitude(B, C, D))) == orientation(D, F, line_intersection(i, altitude(B, C, D))) mod 360, orientation(B, D, line_intersection(i, altitude(B, C, D))) == orientation(B, F, line_intersection(i, altitude(B, C, D))) mod 360
By projection_definition on E, line_intersection(i, altitude(E, C, D)), i we get projection(E, i) == line_intersection(i, altitude(E, C, D))
By different_points_v1 on F, line_intersection(Line(A, G), altitude(F, A, G)) we get 0 != distance(F, line_intersection(Line(A, G), altitude(F, A, G)))
By different_points_v1 on F, E we get 0 != distance(E, F)
By perpendicular_direction_conditions_v0_r on B, E, line_intersection(f, altitude(G, B, C)), G we get 180 == 2 * direction(B, E) - 2 * direction(line_intersection(f, altitude(G, B, C)), G) mod 360
By different_points_v1 on G, line_intersection(f, altitude(G, B, C)) we get 0 != distance(G, line_intersection(f, altitude(G, B, C)))
By perpendicular_direction_conditions_v0_r on B, E, G, line_intersection(f, altitude(G, B, C)) we get 180 == 2 * direction(B, E) - 2 * direction(G, line_intersection(f, altitude(G, B, C))) mod 360
By different_points_v1 on line_intersection(i, altitude(E, C, D)), E we get 0 != distance(E, line_intersection(i, altitude(E, C, D)))
By different_points_v1 on line_intersection(Line(A, B), altitude(F, A, B)), F we get 0 != distance(F, line_intersection(Line(A, B), altitude(F, A, B)))
By different_points_v1 on G, line_intersection(i, altitude(G, C, D)) we get 0 != distance(G, line_intersection(i, altitude(G, C, D)))
By different_points_v1 on E, line_intersection(h, altitude(E, B, D)) we get 0 != distance(E, line_intersection(h, altitude(E, B, D)))
By perpendicular_direction_conditions_v0_r on H, E, E, line_intersection(i, altitude(E, C, D)) we get 180 == 2 * direction(H, E) - 2 * direction(E, line_intersection(i, altitude(E, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on E, H, line_intersection(i, altitude(B, C, D)), B we get 180 == 2 * direction(E, H) - 2 * direction(line_intersection(i, altitude(B, C, D)), B) mod 360
By different_points_v1 on G, line_intersection(Line(D, H), altitude(G, D, H)) we get 0 != distance(G, line_intersection(Line(D, H), altitude(G, D, H)))
By perpendicular_direction_conditions_v0_r on F, G, E, line_intersection(h, altitude(E, B, D)) we get 180 == 2 * direction(F, G) - 2 * direction(E, line_intersection(h, altitude(E, B, D))) mod 360
By different_points_v1 on F, line_intersection(g, altitude(F, A, D)) we get 0 != distance(F, line_intersection(g, altitude(F, A, D)))
By different_points_v1 on line_intersection(Line(F, H), altitude(G, F, H)), G we get 0 != distance(G, line_intersection(Line(F, H), altitude(G, F, H)))
By different_points_v1 on G, line_intersection(Line(C, F), altitude(G, C, F)) we get 0 != distance(G, line_intersection(Line(C, F), altitude(G, C, F)))
By perpendicular_direction_conditions_v0_r on C, D, G, line_intersection(i, altitude(G, C, D)) we get 180 == 2 * direction(C, D) - 2 * direction(G, line_intersection(i, altitude(G, C, D))) mod 360
By different_points_v1 on line_intersection(i, altitude(B, C, D)), B we get 0 != distance(B, line_intersection(i, altitude(B, C, D)))
By different_points_v1 on line_intersection(Line(B, H), altitude(G, B, H)), G we get 0 != distance(G, line_intersection(Line(B, H), altitude(G, B, H)))
By perpendicular_direction_conditions_v0_r on C, F, line_intersection(Line(C, F), altitude(G, C, F)), G we get 180 == 2 * direction(C, F) - 2 * direction(line_intersection(Line(C, F), altitude(G, C, F)), G) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(f, altitude(G, B, C)), E, C we get 180 == 2 * direction(G, line_intersection(f, altitude(G, B, C))) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, altitude(E, C, D)), E, C, D we get 180 == 2 * direction(line_intersection(i, altitude(E, C, D)), E) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(i, altitude(G, C, D)), C, D we get 180 == 2 * direction(G, line_intersection(i, altitude(G, C, D))) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on F, H, G, line_intersection(Line(F, H), altitude(G, F, H)) we get 180 == 2 * direction(F, H) - 2 * direction(G, line_intersection(Line(F, H), altitude(G, F, H))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(h, altitude(E, B, D)), F, G we get 180 == 2 * direction(E, line_intersection(h, altitude(E, B, D))) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(D, H), altitude(G, D, H)), G, H, D we get 180 == 2 * direction(line_intersection(Line(D, H), altitude(G, D, H)), G) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(E, B, D)), E, D, B we get 180 == 2 * direction(line_intersection(h, altitude(E, B, D)), E) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on F, C, G, line_intersection(Line(C, F), altitude(G, C, F)) we get 180 == 2 * direction(F, C) - 2 * direction(G, line_intersection(Line(C, F), altitude(G, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on F, B, E, line_intersection(h, altitude(E, B, D)) we get 180 == 2 * direction(F, B) - 2 * direction(E, line_intersection(h, altitude(E, B, D))) mod 360
By perpendicular_direction_conditions_v0_r on B, C, line_intersection(f, altitude(G, B, C)), G we get 180 == 2 * direction(B, C) - 2 * direction(line_intersection(f, altitude(G, B, C)), G) mod 360
By perpendicular_direction_conditions_v0_r on G, A, F, line_intersection(Line(A, G), altitude(F, A, G)) we get 180 == 2 * direction(G, A) - 2 * direction(F, line_intersection(Line(A, G), altitude(F, A, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(G, B, C)), G, C, E we get 180 == 2 * direction(line_intersection(f, altitude(G, B, C)), G) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on G, F, line_intersection(h, altitude(E, B, D)), E we get 180 == 2 * direction(G, F) - 2 * direction(line_intersection(h, altitude(E, B, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on D, G, E, line_intersection(h, altitude(E, B, D)) we get 180 == 2 * direction(D, G) - 2 * direction(E, line_intersection(h, altitude(E, B, D))) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(Line(F, H), altitude(G, F, H)), H, F we get 180 == 2 * direction(G, line_intersection(Line(F, H), altitude(G, F, H))) - 2 * direction(H, F) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(i, altitude(G, C, D)), H, E we get 180 == 2 * direction(G, line_intersection(i, altitude(G, C, D))) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on A, B, F, line_intersection(Line(A, B), altitude(F, A, B)) we get 180 == 2 * direction(A, B) - 2 * direction(F, line_intersection(Line(A, B), altitude(F, A, B))) mod 360
By perpendicular_direction_conditions_v0_r on H, B, line_intersection(Line(B, H), altitude(G, B, H)), G we get 180 == 2 * direction(H, B) - 2 * direction(line_intersection(Line(B, H), altitude(G, B, H)), G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(E, B, D)), E, B, D we get 180 == 2 * direction(line_intersection(h, altitude(E, B, D)), E) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(i, altitude(B, C, D)), H, E we get 180 == 2 * direction(B, line_intersection(i, altitude(B, C, D))) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on E, C, line_intersection(f, altitude(G, B, C)), G we get 180 == 2 * direction(E, C) - 2 * direction(line_intersection(f, altitude(G, B, C)), G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(E, B, D)), E, G, D we get 180 == 2 * direction(line_intersection(h, altitude(E, B, D)), E) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on D, F, line_intersection(h, altitude(E, B, D)), E we get 180 == 2 * direction(D, F) - 2 * direction(line_intersection(h, altitude(E, B, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on E, H, B, line_intersection(i, altitude(B, C, D)) we get 180 == 2 * direction(E, H) - 2 * direction(B, line_intersection(i, altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(E, B, D)), E, G, F we get 180 == 2 * direction(line_intersection(h, altitude(E, B, D)), E) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on G, F, E, line_intersection(h, altitude(E, B, D)) we get 180 == 2 * direction(G, F) - 2 * direction(E, line_intersection(h, altitude(E, B, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, altitude(F, A, D)), F, D, A we get 180 == 2 * direction(line_intersection(g, altitude(F, A, D)), F) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, altitude(B, C, D)), B, E, H we get 180 == 2 * direction(line_intersection(i, altitude(B, C, D)), B) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(G, B, C)), G, E, B we get 180 == 2 * direction(line_intersection(f, altitude(G, B, C)), G) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(G, B, C)), G, B, C we get 180 == 2 * direction(line_intersection(f, altitude(G, B, C)), G) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(i, altitude(G, C, D)), E, H we get 180 == 2 * direction(G, line_intersection(i, altitude(G, C, D))) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on C, D, line_intersection(i, altitude(E, C, D)), E we get 180 == 2 * direction(C, D) - 2 * direction(line_intersection(i, altitude(E, C, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(i, altitude(B, C, D)), D, C we get 180 == 2 * direction(B, line_intersection(i, altitude(B, C, D))) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on E, C, G, line_intersection(f, altitude(G, B, C)) we get 180 == 2 * direction(E, C) - 2 * direction(G, line_intersection(f, altitude(G, B, C))) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(i, altitude(G, C, D)), D, C we get 180 == 2 * direction(G, line_intersection(i, altitude(G, C, D))) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on F, H, line_intersection(Line(F, H), altitude(G, F, H)), G we get 180 == 2 * direction(F, H) - 2 * direction(line_intersection(Line(F, H), altitude(G, F, H)), G) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(Line(F, H), altitude(G, F, H)), F, H we get 180 == 2 * direction(G, line_intersection(Line(F, H), altitude(G, F, H))) - 2 * direction(F, H) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(E, B, D)), E, D, G we get 180 == 2 * direction(line_intersection(h, altitude(E, B, D)), E) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(C, F), altitude(G, C, F)), G, C, F we get 180 == 2 * direction(line_intersection(Line(C, F), altitude(G, C, F)), G) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, altitude(E, C, D)), E, D, C we get 180 == 2 * direction(line_intersection(i, altitude(E, C, D)), E) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(G, B, C)), G, C, B we get 180 == 2 * direction(line_intersection(f, altitude(G, B, C)), G) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, H), altitude(G, F, H)), G, H, F we get 180 == 2 * direction(line_intersection(Line(F, H), altitude(G, F, H)), G) - 2 * direction(H, F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(G, B, C)), G, E, C we get 180 == 2 * direction(line_intersection(f, altitude(G, B, C)), G) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on D, C, G, line_intersection(i, altitude(G, C, D)) we get 180 == 2 * direction(D, C) - 2 * direction(G, line_intersection(i, altitude(G, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, altitude(G, C, D)), G, H, E we get 180 == 2 * direction(line_intersection(i, altitude(G, C, D)), G) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on E, H, G, line_intersection(i, altitude(G, C, D)) we get 180 == 2 * direction(E, H) - 2 * direction(G, line_intersection(i, altitude(G, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(E, B, D)), E, D, F we get 180 == 2 * direction(line_intersection(h, altitude(E, B, D)), E) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on B, D, line_intersection(h, altitude(E, B, D)), E we get 180 == 2 * direction(B, D) - 2 * direction(line_intersection(h, altitude(E, B, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on F, D, line_intersection(h, altitude(E, B, D)), E we get 180 == 2 * direction(F, D) - 2 * direction(line_intersection(h, altitude(E, B, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on C, E, line_intersection(f, altitude(G, B, C)), G we get 180 == 2 * direction(C, E) - 2 * direction(line_intersection(f, altitude(G, B, C)), G) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(h, altitude(E, B, D)), B, D we get 180 == 2 * direction(E, line_intersection(h, altitude(E, B, D))) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(h, altitude(E, B, D)), B, F we get 180 == 2 * direction(E, line_intersection(h, altitude(E, B, D))) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on D, H, line_intersection(Line(D, H), altitude(G, D, H)), G we get 180 == 2 * direction(D, H) - 2 * direction(line_intersection(Line(D, H), altitude(G, D, H)), G) mod 360
By perpendicular_direction_conditions_v0_r on H, D, line_intersection(Line(D, H), altitude(G, D, H)), G we get 180 == 2 * direction(H, D) - 2 * direction(line_intersection(Line(D, H), altitude(G, D, H)), G) mod 360
By perpendicular_direction_conditions_v0_r on D, A, F, line_intersection(g, altitude(F, A, D)) we get 180 == 2 * direction(D, A) - 2 * direction(F, line_intersection(g, altitude(F, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(F, H), altitude(G, F, H)), G, F, H we get 180 == 2 * direction(line_intersection(Line(F, H), altitude(G, F, H)), G) - 2 * direction(F, H) mod 360
By perpendicular_direction_conditions_v0_r on E, H, line_intersection(i, altitude(E, C, D)), E we get 180 == 2 * direction(E, H) - 2 * direction(line_intersection(i, altitude(E, C, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(Line(B, H), altitude(G, B, H)), B, H we get 180 == 2 * direction(G, line_intersection(Line(B, H), altitude(G, B, H))) - 2 * direction(B, H) mod 360
By perpendicular_direction_conditions_v0_r on H, D, G, line_intersection(Line(D, H), altitude(G, D, H)) we get 180 == 2 * direction(H, D) - 2 * direction(G, line_intersection(Line(D, H), altitude(G, D, H))) mod 360
By perpendicular_direction_conditions_v0_r on D, G, line_intersection(h, altitude(E, B, D)), E we get 180 == 2 * direction(D, G) - 2 * direction(line_intersection(h, altitude(E, B, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on G, D, E, line_intersection(h, altitude(E, B, D)) we get 180 == 2 * direction(G, D) - 2 * direction(E, line_intersection(h, altitude(E, B, D))) mod 360
By perpendicular_direction_conditions_v0_r on H, B, G, line_intersection(Line(B, H), altitude(G, B, H)) we get 180 == 2 * direction(H, B) - 2 * direction(G, line_intersection(Line(B, H), altitude(G, B, H))) mod 360
By perpendicular_direction_conditions_v0_r on D, F, E, line_intersection(h, altitude(E, B, D)) we get 180 == 2 * direction(D, F) - 2 * direction(E, line_intersection(h, altitude(E, B, D))) mod 360
By perpendicular_direction_conditions_v0_r on B, G, E, line_intersection(h, altitude(E, B, D)) we get 180 == 2 * direction(B, G) - 2 * direction(E, line_intersection(h, altitude(E, B, D))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(A, G), altitude(F, A, G)), A, G we get 180 == 2 * direction(F, line_intersection(Line(A, G), altitude(F, A, G))) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, altitude(G, C, D)), G, D, C we get 180 == 2 * direction(line_intersection(i, altitude(G, C, D)), G) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(A, B), altitude(F, A, B)), B, A we get 180 == 2 * direction(F, line_intersection(Line(A, B), altitude(F, A, B))) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on C, B, G, line_intersection(f, altitude(G, B, C)) we get 180 == 2 * direction(C, B) - 2 * direction(G, line_intersection(f, altitude(G, B, C))) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(f, altitude(G, B, C)), B, E we get 180 == 2 * direction(G, line_intersection(f, altitude(G, B, C))) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on E, B, G, line_intersection(f, altitude(G, B, C)) we get 180 == 2 * direction(E, B) - 2 * direction(G, line_intersection(f, altitude(G, B, C))) mod 360
By perpendicular_direction_conditions_v0_r on H, E, line_intersection(i, altitude(B, C, D)), B we get 180 == 2 * direction(H, E) - 2 * direction(line_intersection(i, altitude(B, C, D)), B) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(h, altitude(E, B, D)), F, B we get 180 == 2 * direction(E, line_intersection(h, altitude(E, B, D))) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(Line(C, F), altitude(G, C, F)), C, F we get 180 == 2 * direction(G, line_intersection(Line(C, F), altitude(G, C, F))) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on D, A, line_intersection(g, altitude(F, A, D)), F we get 180 == 2 * direction(D, A) - 2 * direction(line_intersection(g, altitude(F, A, D)), F) mod 360
By perpendicular_direction_conditions_v0_r on G, B, line_intersection(h, altitude(E, B, D)), E we get 180 == 2 * direction(G, B) - 2 * direction(line_intersection(h, altitude(E, B, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(h, altitude(E, B, D)), G, F we get 180 == 2 * direction(E, line_intersection(h, altitude(E, B, D))) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(Line(D, H), altitude(G, D, H)), H, D we get 180 == 2 * direction(G, line_intersection(Line(D, H), altitude(G, D, H))) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on E, H, E, line_intersection(i, altitude(E, C, D)) we get 180 == 2 * direction(E, H) - 2 * direction(E, line_intersection(i, altitude(E, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on H, F, G, line_intersection(Line(F, H), altitude(G, F, H)) we get 180 == 2 * direction(H, F) - 2 * direction(G, line_intersection(Line(F, H), altitude(G, F, H))) mod 360
By perpendicular_direction_conditions_v0_r on C, D, E, line_intersection(i, altitude(E, C, D)) we get 180 == 2 * direction(C, D) - 2 * direction(E, line_intersection(i, altitude(E, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, H), altitude(G, B, H)), G, H, B we get 180 == 2 * direction(line_intersection(Line(B, H), altitude(G, B, H)), G) - 2 * direction(H, B) mod 360
By perpendicular_direction_conditions_v0_r on F, G, line_intersection(h, altitude(E, B, D)), E we get 180 == 2 * direction(F, G) - 2 * direction(line_intersection(h, altitude(E, B, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, altitude(B, C, D)), B, D, C we get 180 == 2 * direction(line_intersection(i, altitude(B, C, D)), B) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on D, C, B, line_intersection(i, altitude(B, C, D)) we get 180 == 2 * direction(D, C) - 2 * direction(B, line_intersection(i, altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(A, G), altitude(F, A, G)), G, A we get 180 == 2 * direction(F, line_intersection(Line(A, G), altitude(F, A, G))) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on H, F, line_intersection(Line(F, H), altitude(G, F, H)), G we get 180 == 2 * direction(H, F) - 2 * direction(line_intersection(Line(F, H), altitude(G, F, H)), G) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(i, altitude(E, C, D)), D, C we get 180 == 2 * direction(E, line_intersection(i, altitude(E, C, D))) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on D, C, line_intersection(i, altitude(E, C, D)), E we get 180 == 2 * direction(D, C) - 2 * direction(line_intersection(i, altitude(E, C, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, G), altitude(F, A, G)), F, G, A we get 180 == 2 * direction(line_intersection(Line(A, G), altitude(F, A, G)), F) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(h, altitude(E, B, D)), G, B we get 180 == 2 * direction(E, line_intersection(h, altitude(E, B, D))) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on B, A, line_intersection(Line(A, B), altitude(F, A, B)), F we get 180 == 2 * direction(B, A) - 2 * direction(line_intersection(Line(A, B), altitude(F, A, B)), F) mod 360
By perpendicular_direction_conditions_v0_r on G, B, E, line_intersection(h, altitude(E, B, D)) we get 180 == 2 * direction(G, B) - 2 * direction(E, line_intersection(h, altitude(E, B, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(E, B, D)), E, F, G we get 180 == 2 * direction(line_intersection(h, altitude(E, B, D)), E) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on G, D, line_intersection(h, altitude(E, B, D)), E we get 180 == 2 * direction(G, D) - 2 * direction(line_intersection(h, altitude(E, B, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on D, B, line_intersection(h, altitude(E, B, D)), E we get 180 == 2 * direction(D, B) - 2 * direction(line_intersection(h, altitude(E, B, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on D, B, E, line_intersection(h, altitude(E, B, D)) we get 180 == 2 * direction(D, B) - 2 * direction(E, line_intersection(h, altitude(E, B, D))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(i, altitude(E, C, D)), H, E we get 180 == 2 * direction(E, line_intersection(i, altitude(E, C, D))) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(C, F), altitude(G, C, F)), G, F, C we get 180 == 2 * direction(line_intersection(Line(C, F), altitude(G, C, F)), G) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(i, altitude(E, C, D)), E, H we get 180 == 2 * direction(E, line_intersection(i, altitude(E, C, D))) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on A, B, line_intersection(Line(A, B), altitude(F, A, B)), F we get 180 == 2 * direction(A, B) - 2 * direction(line_intersection(Line(A, B), altitude(F, A, B)), F) mod 360
By perpendicular_direction_conditions_v0_r on E, B, line_intersection(f, altitude(G, B, C)), G we get 180 == 2 * direction(E, B) - 2 * direction(line_intersection(f, altitude(G, B, C)), G) mod 360
By perpendicular_direction_conditions_v0_r on C, D, line_intersection(i, altitude(G, C, D)), G we get 180 == 2 * direction(C, D) - 2 * direction(line_intersection(i, altitude(G, C, D)), G) mod 360
By perpendicular_direction_conditions_v0_r on C, E, G, line_intersection(f, altitude(G, B, C)) we get 180 == 2 * direction(C, E) - 2 * direction(G, line_intersection(f, altitude(G, B, C))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, altitude(F, A, D)), F, A, D we get 180 == 2 * direction(line_intersection(g, altitude(F, A, D)), F) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on B, D, E, line_intersection(h, altitude(E, B, D)) we get 180 == 2 * direction(B, D) - 2 * direction(E, line_intersection(h, altitude(E, B, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(E, B, D)), E, B, F we get 180 == 2 * direction(line_intersection(h, altitude(E, B, D)), E) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), altitude(F, A, B)), F, A, B we get 180 == 2 * direction(line_intersection(Line(A, B), altitude(F, A, B)), F) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on D, C, E, line_intersection(i, altitude(E, C, D)) we get 180 == 2 * direction(D, C) - 2 * direction(E, line_intersection(i, altitude(E, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on D, H, G, line_intersection(Line(D, H), altitude(G, D, H)) we get 180 == 2 * direction(D, H) - 2 * direction(G, line_intersection(Line(D, H), altitude(G, D, H))) mod 360
By perpendicular_direction_conditions_v0_r on C, B, line_intersection(f, altitude(G, B, C)), G we get 180 == 2 * direction(C, B) - 2 * direction(line_intersection(f, altitude(G, B, C)), G) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(h, altitude(E, B, D)), D, F we get 180 == 2 * direction(E, line_intersection(h, altitude(E, B, D))) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on B, G, line_intersection(h, altitude(E, B, D)), E we get 180 == 2 * direction(B, G) - 2 * direction(line_intersection(h, altitude(E, B, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(D, H), altitude(G, D, H)), G, D, H we get 180 == 2 * direction(line_intersection(Line(D, H), altitude(G, D, H)), G) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on B, F, line_intersection(h, altitude(E, B, D)), E we get 180 == 2 * direction(B, F) - 2 * direction(line_intersection(h, altitude(E, B, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(f, altitude(G, B, C)), E, B we get 180 == 2 * direction(G, line_intersection(f, altitude(G, B, C))) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(f, altitude(G, B, C)), B, C we get 180 == 2 * direction(G, line_intersection(f, altitude(G, B, C))) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on E, H, line_intersection(i, altitude(G, C, D)), G we get 180 == 2 * direction(E, H) - 2 * direction(line_intersection(i, altitude(G, C, D)), G) mod 360
By perpendicular_direction_conditions_v0_r on C, F, G, line_intersection(Line(C, F), altitude(G, C, F)) we get 180 == 2 * direction(C, F) - 2 * direction(G, line_intersection(Line(C, F), altitude(G, C, F))) mod 360
By perpendicular_direction_conditions_v0_r on H, E, G, line_intersection(i, altitude(G, C, D)) we get 180 == 2 * direction(H, E) - 2 * direction(G, line_intersection(i, altitude(G, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(h, altitude(E, B, D)), F, D we get 180 == 2 * direction(E, line_intersection(h, altitude(E, B, D))) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on A, D, F, line_intersection(g, altitude(F, A, D)) we get 180 == 2 * direction(A, D) - 2 * direction(F, line_intersection(g, altitude(F, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on H, E, line_intersection(i, altitude(G, C, D)), G we get 180 == 2 * direction(H, E) - 2 * direction(line_intersection(i, altitude(G, C, D)), G) mod 360
By perpendicular_direction_conditions_v0_r on F, C, line_intersection(Line(C, F), altitude(G, C, F)), G we get 180 == 2 * direction(F, C) - 2 * direction(line_intersection(Line(C, F), altitude(G, C, F)), G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, G), altitude(F, A, G)), F, A, G we get 180 == 2 * direction(line_intersection(Line(A, G), altitude(F, A, G)), F) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on D, C, line_intersection(i, altitude(G, C, D)), G we get 180 == 2 * direction(D, C) - 2 * direction(line_intersection(i, altitude(G, C, D)), G) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(i, altitude(B, C, D)), C, D we get 180 == 2 * direction(B, line_intersection(i, altitude(B, C, D))) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on G, A, line_intersection(Line(A, G), altitude(F, A, G)), F we get 180 == 2 * direction(G, A) - 2 * direction(line_intersection(Line(A, G), altitude(F, A, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, altitude(E, C, D)), E, E, H we get 180 == 2 * direction(line_intersection(i, altitude(E, C, D)), E) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(G, B, C)), G, B, E we get 180 == 2 * direction(line_intersection(f, altitude(G, B, C)), G) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, altitude(G, C, D)), G, E, H we get 180 == 2 * direction(line_intersection(i, altitude(G, C, D)), G) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on B, A, F, line_intersection(Line(A, B), altitude(F, A, B)) we get 180 == 2 * direction(B, A) - 2 * direction(F, line_intersection(Line(A, B), altitude(F, A, B))) mod 360
By perpendicular_direction_conditions_v0_r on C, D, B, line_intersection(i, altitude(B, C, D)) we get 180 == 2 * direction(C, D) - 2 * direction(B, line_intersection(i, altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(g, altitude(F, A, D)), A, D we get 180 == 2 * direction(F, line_intersection(g, altitude(F, A, D))) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(Line(B, H), altitude(G, B, H)), H, B we get 180 == 2 * direction(G, line_intersection(Line(B, H), altitude(G, B, H))) - 2 * direction(H, B) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(f, altitude(G, B, C)), C, B we get 180 == 2 * direction(G, line_intersection(f, altitude(G, B, C))) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on F, B, line_intersection(h, altitude(E, B, D)), E we get 180 == 2 * direction(F, B) - 2 * direction(line_intersection(h, altitude(E, B, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on B, C, G, line_intersection(f, altitude(G, B, C)) we get 180 == 2 * direction(B, C) - 2 * direction(G, line_intersection(f, altitude(G, B, C))) mod 360
By perpendicular_direction_conditions_v0_r on H, E, B, line_intersection(i, altitude(B, C, D)) we get 180 == 2 * direction(H, E) - 2 * direction(B, line_intersection(i, altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(h, altitude(E, B, D)), D, G we get 180 == 2 * direction(E, line_intersection(h, altitude(E, B, D))) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(f, altitude(G, B, C)), C, E we get 180 == 2 * direction(G, line_intersection(f, altitude(G, B, C))) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(E, B, D)), E, G, B we get 180 == 2 * direction(line_intersection(h, altitude(E, B, D)), E) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, altitude(G, C, D)), G, C, D we get 180 == 2 * direction(line_intersection(i, altitude(G, C, D)), G) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(g, altitude(F, A, D)), D, A we get 180 == 2 * direction(F, line_intersection(g, altitude(F, A, D))) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(A, B), altitude(F, A, B)), F, B, A we get 180 == 2 * direction(line_intersection(Line(A, B), altitude(F, A, B)), F) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(Line(D, H), altitude(G, D, H)), D, H we get 180 == 2 * direction(G, line_intersection(Line(D, H), altitude(G, D, H))) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on A, G, F, line_intersection(Line(A, G), altitude(F, A, G)) we get 180 == 2 * direction(A, G) - 2 * direction(F, line_intersection(Line(A, G), altitude(F, A, G))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(A, B), altitude(F, A, B)), A, B we get 180 == 2 * direction(F, line_intersection(Line(A, B), altitude(F, A, B))) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(E, B, D)), E, F, B we get 180 == 2 * direction(line_intersection(h, altitude(E, B, D)), E) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(h, altitude(E, B, D)), D, B we get 180 == 2 * direction(E, line_intersection(h, altitude(E, B, D))) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(E, B, D)), E, B, G we get 180 == 2 * direction(line_intersection(h, altitude(E, B, D)), E) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on C, D, line_intersection(i, altitude(B, C, D)), B we get 180 == 2 * direction(C, D) - 2 * direction(line_intersection(i, altitude(B, C, D)), B) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(i, altitude(E, C, D)), C, D we get 180 == 2 * direction(E, line_intersection(i, altitude(E, C, D))) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, altitude(B, C, D)), B, C, D we get 180 == 2 * direction(line_intersection(i, altitude(B, C, D)), B) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on B, H, line_intersection(Line(B, H), altitude(G, B, H)), G we get 180 == 2 * direction(B, H) - 2 * direction(line_intersection(Line(B, H), altitude(G, B, H)), G) mod 360
By perpendicular_direction_conditions_v0_r on D, C, line_intersection(i, altitude(B, C, D)), B we get 180 == 2 * direction(D, C) - 2 * direction(line_intersection(i, altitude(B, C, D)), B) mod 360
By perpendicular_direction_conditions_v0_r on A, D, line_intersection(g, altitude(F, A, D)), F we get 180 == 2 * direction(A, D) - 2 * direction(line_intersection(g, altitude(F, A, D)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, altitude(E, C, D)), E, H, E we get 180 == 2 * direction(line_intersection(i, altitude(E, C, D)), E) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on A, G, line_intersection(Line(A, G), altitude(F, A, G)), F we get 180 == 2 * direction(A, G) - 2 * direction(line_intersection(Line(A, G), altitude(F, A, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on H, E, line_intersection(i, altitude(E, C, D)), E we get 180 == 2 * direction(H, E) - 2 * direction(line_intersection(i, altitude(E, C, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(i, altitude(B, C, D)), E, H we get 180 == 2 * direction(B, line_intersection(i, altitude(B, C, D))) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on F, D, E, line_intersection(h, altitude(E, B, D)) we get 180 == 2 * direction(F, D) - 2 * direction(E, line_intersection(h, altitude(E, B, D))) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(Line(C, F), altitude(G, C, F)), F, C we get 180 == 2 * direction(G, line_intersection(Line(C, F), altitude(G, C, F))) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(h, altitude(E, B, D)), B, G we get 180 == 2 * direction(E, line_intersection(h, altitude(E, B, D))) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on B, F, E, line_intersection(h, altitude(E, B, D)) we get 180 == 2 * direction(B, F) - 2 * direction(E, line_intersection(h, altitude(E, B, D))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(h, altitude(E, B, D)), G, D we get 180 == 2 * direction(E, line_intersection(h, altitude(E, B, D))) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, altitude(B, C, D)), B, H, E we get 180 == 2 * direction(line_intersection(i, altitude(B, C, D)), B) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on B, H, G, line_intersection(Line(B, H), altitude(G, B, H)) we get 180 == 2 * direction(B, H) - 2 * direction(G, line_intersection(Line(B, H), altitude(G, B, H))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(E, B, D)), E, F, D we get 180 == 2 * direction(line_intersection(h, altitude(E, B, D)), E) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, H), altitude(G, B, H)), G, B, H we get 180 == 2 * direction(line_intersection(Line(B, H), altitude(G, B, H)), G) - 2 * direction(B, H) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on E, B, line_intersection(i, altitude(B, C, D)) we get not_collinear(B, E, line_intersection(i, altitude(B, C, D))), exists(Line(B, line_intersection(i, altitude(B, C, D))))
By in_imply_collinear on orthocenter(B, E, G), line_intersection(h, altitude(E, B, D)), E we get collinear(E, orthocenter(B, E, G), line_intersection(h, altitude(E, B, D)))
By in_imply_collinear on line_intersection(Line(E, G), altitude(B, E, G)), E, G we get collinear(E, G, line_intersection(Line(E, G), altitude(B, E, G)))
By in_imply_collinear on line_intersection(k, altitude(G, C, D)), line_intersection(i, altitude(G, C, D)), G we get collinear(G, line_intersection(i, altitude(G, C, D)), line_intersection(k, altitude(G, C, D)))
By in_imply_collinear on orthocenter(B, E, G), line_intersection(f, altitude(G, B, C)), G we get collinear(G, orthocenter(B, E, G), line_intersection(f, altitude(G, B, C)))
By in_imply_collinear on line_intersection(k, altitude(B, C, D)), line_intersection(i, altitude(B, C, D)), B we get collinear(B, line_intersection(i, altitude(B, C, D)), line_intersection(k, altitude(B, C, D)))
By line_containment_inequality on line_intersection(Line(E, G), altitude(B, E, G)), F, Line(E, G) we get F != line_intersection(Line(E, G), altitude(B, E, G))
By not_in_line_equivalent_to_not_collinear_v0 on G, line_intersection(i, altitude(B, C, D)), B we get not_collinear(B, G, line_intersection(i, altitude(B, C, D))), exists(Line(B, line_intersection(i, altitude(B, C, D))))
By not_in_line_equivalent_to_not_collinear_v0_r on H, E, F we get H not in Line(E, F)
By reverse_direction on orthocenter(B, C, D), B we get 180 == direction(orthocenter(B, C, D), B) - direction(B, orthocenter(B, C, D)) mod 360
By line_inequality on Line(E, F), g, E we get g != Line(E, F)
By line_circle_intersection_has_at_most_two_points_0 on E, H, line_intersection(k, altitude(B, C, D)), Circle(E, G, H) we get line_intersection(k, altitude(B, C, D)) not in Circle(E, G, H)
By line_inequality on Line(E, F), Line(A, B), F we get Line(A, B) != Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0 on C, line_intersection(i, altitude(B, C, D)), B we get not_collinear(B, C, line_intersection(i, altitude(B, C, D))), exists(Line(B, line_intersection(i, altitude(B, C, D))))
By not_in_line_equivalent_to_not_collinear_v0_r on G, F, E we get G not in Line(E, F)
By sas_anti_similarity on F, D, E, E, D, G we get anti_similar_triangles(D, E, F, D, G, E)
By sas_similarity on E, D, F, C, D, A we get similar_triangles(A, C, D, F, E, D)
By sas_similarity on H, C, E, F, D, E we get similar_triangles(C, E, H, D, E, F)
By sas_similarity on C, D, A, E, D, F we get similar_triangles(A, C, D, F, E, D)
By sas_anti_similarity on E, D, F, G, D, E we get anti_similar_triangles(D, E, F, D, G, E)
By reverse_direction on B, orthocenter(B, C, D) we get 180 == direction(B, orthocenter(B, C, D)) - direction(orthocenter(B, C, D), B) mod 360
By sas_similarity on F, D, E, H, C, E we get similar_triangles(C, E, H, D, E, F)
By sas_similarity on E, C, H, E, D, F we get similar_triangles(C, E, H, D, E, F)
By line_inequality on Line(E, F), altitude(B, C, D), E we get Line(E, F) != altitude(B, C, D)
By sas_anti_similarity on G, D, E, E, D, F we get anti_similar_triangles(D, E, F, D, G, E)
By not_in_line_equivalent_to_not_collinear_v0_r on F, orthocenter(B, C, D), B we get F not in Line(B, orthocenter(B, C, D))
By line_circle_intersection_has_at_most_two_points_0 on H, G, C, Circle(E, G, H) we get C not in Circle(E, G, H)
By line_inequality on Line(E, F), Line(A, C), F we get Line(A, C) != Line(E, F)
By sas_similarity on E, D, F, E, C, H we get similar_triangles(C, E, H, D, E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on orthocenter(B, C, D), F, E we get orthocenter(B, C, D) not in Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, F we get C not in Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0 on D, B, line_intersection(i, altitude(B, C, D)) we get not_collinear(B, D, line_intersection(i, altitude(B, C, D))), exists(Line(B, line_intersection(i, altitude(B, C, D))))
By sas_anti_similarity on E, D, G, F, D, E we get anti_similar_triangles(D, E, F, D, G, E)
By sas_similarity on F, D, E, A, D, C we get similar_triangles(A, C, D, F, E, D)
By line_inequality on Line(E, F), i, F we get i != Line(E, F)
By line_inequality on Line(E, F), h, E we get h != Line(E, F)
By sas_similarity on A, D, C, F, D, E we get similar_triangles(A, C, D, F, E, D)
By line_inequality on Line(E, F), Line(A, F), E we get Line(A, F) != Line(E, F)
By line_inequality on Line(E, F), Line(A, G), E we get Line(A, G) != Line(E, F)
By line_circle_intersection_has_at_most_two_points_0 on H, G, orthocenter(B, C, D), Circle(E, G, H) we get orthocenter(B, C, D) not in Circle(E, G, H)
By line_containment_inequality on line_intersection(Line(E, G), altitude(B, E, G)), A, Line(E, G) we get A != line_intersection(Line(E, G), altitude(B, E, G))
By not_in_line_equivalent_to_not_collinear_v0_r on A, F, E we get A not in Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on B, F, E we get B not in Line(E, F)
By line_containment_inequality on line_intersection(Line(E, G), altitude(B, E, G)), B, Line(E, G) we get B != line_intersection(Line(E, G), altitude(B, E, G))
By not_in_line_equivalent_to_not_collinear_v0 on H, B, line_intersection(i, altitude(B, C, D)) we get not_collinear(B, H, line_intersection(i, altitude(B, C, D))), exists(Line(B, line_intersection(i, altitude(B, C, D))))
By line_circle_intersection_has_at_most_two_points_0 on C, D, line_intersection(i, altitude(B, C, D)), Circle(C, D, E) we get line_intersection(i, altitude(B, C, D)) not in Circle(C, D, E)
By line_containment_inequality on line_intersection(Line(E, G), altitude(B, E, G)), D, Line(E, G) we get D != line_intersection(Line(E, G), altitude(B, E, G))
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, F we get D not in Line(E, F)
By line_inequality on Line(E, F), Line(D, H), E we get Line(D, H) != Line(E, F)
By line_inequality on Line(E, F), Line(C, F), E we get Line(C, F) != Line(E, F)
By line_inequality on altitude(F, A, D), Line(E, G), F we get Line(E, G) != altitude(F, A, D)
By line_inequality on Line(E, F), j, F we get j != Line(E, F)
By line_inequality on Line(E, F), Line(E, G), F we get Line(E, F) != Line(E, G)
By line_inequality on Line(E, F), k, F we get k != Line(E, F)
By line_inequality on Line(E, F), f, F we get f != Line(E, F)
By line_containment_inequality on line_intersection(Line(E, G), altitude(B, E, G)), C, Line(E, G) we get C != line_intersection(Line(E, G), altitude(B, E, G))
By line_inequality on altitude(F, A, B), Line(E, G), F we get Line(E, G) != altitude(F, A, B)
By line_inequality on altitude(B, E, G), Line(E, G), B we get Line(E, G) != altitude(B, E, G)
By line_inequality on Line(E, F), Line(D, E), F we get Line(D, E) != Line(E, F)
By line_inequality on altitude(F, A, G), Line(E, G), F we get Line(E, G) != altitude(F, A, G)
By line_inequality on Line(E, F), Line(B, H), F we get Line(B, H) != Line(E, F)
By line_inequality on Line(E, F), Line(F, H), E we get Line(E, F) != Line(F, H)
By line_containment_inequality on line_intersection(Line(E, G), altitude(B, E, G)), H, Line(E, G) we get H != line_intersection(Line(E, G), altitude(B, E, G))
By power_of_a_point_tangent_converse_v0 on D, G, F, E we get tangent(Line(D, E), Circle(E, F, G))
By external_angle_bisector_definition_v0_r on orthocenter(B, C, D), D, orthocenter(B, C, D), G we get Line(D, G) == external_angle_bisector(orthocenter(B, C, D), G, orthocenter(B, C, D))
By power_of_a_point_in_circle on E, Circle(E, G, H) we get 0 == power_of_a_point(E, Circle(E, G, H))
By collinear_definition on B, orthocenter(B, C, D), line_intersection(k, altitude(B, C, D)) we get orthocenter(B, C, D) in Line(B, line_intersection(k, altitude(B, C, D))), line_intersection(k, altitude(B, C, D)) in Line(B, orthocenter(B, C, D)), Line(B, orthocenter(B, C, D)) == Line(B, line_intersection(k, altitude(B, C, D))), 0 == 2 * angle(orthocenter(B, C, D), B, line_intersection(k, altitude(B, C, D))) mod 360
By external_angle_bisector_definition_v0_r on orthocenter(B, C, D), B, orthocenter(B, C, D), G we get Line(B, G) == external_angle_bisector(orthocenter(B, C, D), G, orthocenter(B, C, D))
By similar_triangle_basic_properties on E, B, F, D, B, A we get not_collinear(B, E, F), not_collinear(A, B, D), angle(D, B, A) == angle(E, B, F) mod 360, angle(B, A, D) == angle(B, F, E) mod 360, angle(A, D, B) == angle(F, E, B) mod 360, log(distance(B, D)) + log(distance(B, F)) == log(distance(B, E)) + log(distance(A, B)), log(distance(A, B)) + log(distance(E, F)) == log(distance(B, F)) + log(distance(A, D)), log(distance(A, D)) + log(distance(B, E)) == log(distance(E, F)) + log(distance(B, D))
By collinear_definition on C, line_intersection(i, altitude(B, C, D)), D we get line_intersection(i, altitude(B, C, D)) in Line(C, D), D in Line(C, line_intersection(i, altitude(B, C, D))), Line(C, D) == Line(C, line_intersection(i, altitude(B, C, D))), 0 == 2 * angle(line_intersection(i, altitude(B, C, D)), C, D) mod 360
By external_angle_bisector_definition_v0_r on orthocenter(B, C, D), B, orthocenter(B, C, D), E we get Line(B, E) == external_angle_bisector(orthocenter(B, C, D), E, orthocenter(B, C, D))
By collinear_definition on C, D, line_intersection(i, altitude(B, C, D)) we get D in Line(C, line_intersection(i, altitude(B, C, D))), line_intersection(i, altitude(B, C, D)) in Line(C, D), Line(C, D) == Line(C, line_intersection(i, altitude(B, C, D))), 0 == 2 * angle(D, C, line_intersection(i, altitude(B, C, D))) mod 360
By collinear_definition on orthocenter(B, C, D), line_intersection(i, altitude(B, C, D)), B we get line_intersection(i, altitude(B, C, D)) in Line(B, orthocenter(B, C, D)), B in Line(orthocenter(B, C, D), line_intersection(i, altitude(B, C, D))), Line(B, orthocenter(B, C, D)) == Line(orthocenter(B, C, D), line_intersection(i, altitude(B, C, D))), 0 == 2 * angle(line_intersection(i, altitude(B, C, D)), orthocenter(B, C, D), B) mod 360
By collinear_definition on orthocenter(B, C, D), B, line_intersection(k, altitude(B, C, D)) we get B in Line(orthocenter(B, C, D), line_intersection(k, altitude(B, C, D))), line_intersection(k, altitude(B, C, D)) in Line(B, orthocenter(B, C, D)), Line(B, orthocenter(B, C, D)) == Line(orthocenter(B, C, D), line_intersection(k, altitude(B, C, D))), 0 == 2 * angle(B, orthocenter(B, C, D), line_intersection(k, altitude(B, C, D))) mod 360
By collinear_definition on E, H, line_intersection(k, altitude(B, C, D)) we get H in Line(E, line_intersection(k, altitude(B, C, D))), line_intersection(k, altitude(B, C, D)) in Line(E, H), Line(E, H) == Line(E, line_intersection(k, altitude(B, C, D))), 0 == 2 * angle(H, E, line_intersection(k, altitude(B, C, D))) mod 360
By collinear_definition on B, line_intersection(i, altitude(B, C, D)), orthocenter(B, C, D) we get line_intersection(i, altitude(B, C, D)) in Line(B, orthocenter(B, C, D)), orthocenter(B, C, D) in Line(B, line_intersection(i, altitude(B, C, D))), Line(B, orthocenter(B, C, D)) == Line(B, line_intersection(i, altitude(B, C, D))), 0 == 2 * angle(line_intersection(i, altitude(B, C, D)), B, orthocenter(B, C, D)) mod 360
By collinear_definition on B, line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D) we get line_intersection(k, altitude(B, C, D)) in Line(B, orthocenter(B, C, D)), orthocenter(B, C, D) in Line(B, line_intersection(k, altitude(B, C, D))), Line(B, orthocenter(B, C, D)) == Line(B, line_intersection(k, altitude(B, C, D))), 0 == 2 * angle(line_intersection(k, altitude(B, C, D)), B, orthocenter(B, C, D)) mod 360
By collinear_definition on H, E, line_intersection(k, altitude(B, C, D)) we get E in Line(H, line_intersection(k, altitude(B, C, D))), line_intersection(k, altitude(B, C, D)) in Line(E, H), Line(E, H) == Line(H, line_intersection(k, altitude(B, C, D))), 0 == 2 * angle(E, H, line_intersection(k, altitude(B, C, D))) mod 360
By external_angle_bisector_definition_v0_r on orthocenter(B, C, D), F, orthocenter(B, C, D), G we get Line(F, G) == external_angle_bisector(orthocenter(B, C, D), G, orthocenter(B, C, D))
By similar_triangle_basic_properties on A, B, D, F, B, E we get not_collinear(A, B, D), not_collinear(B, E, F), angle(A, B, D) == angle(F, B, E) mod 360, angle(B, D, A) == angle(B, E, F) mod 360, angle(D, A, B) == angle(E, F, B) mod 360, log(distance(A, B)) + log(distance(B, E)) == log(distance(B, F)) + log(distance(B, D)), log(distance(B, D)) + log(distance(E, F)) == log(distance(B, E)) + log(distance(A, D)), log(distance(A, D)) + log(distance(B, F)) == log(distance(E, F)) + log(distance(A, B))
By collinear_definition on H, line_intersection(k, altitude(B, C, D)), E we get line_intersection(k, altitude(B, C, D)) in Line(E, H), E in Line(H, line_intersection(k, altitude(B, C, D))), Line(E, H) == Line(H, line_intersection(k, altitude(B, C, D))), 0 == 2 * angle(line_intersection(k, altitude(B, C, D)), H, E) mod 360
By perpendicular_angle_conditions_v0 on H, E, line_intersection(i, altitude(E, C, D)) we get angle(H, E, line_intersection(i, altitude(E, C, D))) == orientation(E, line_intersection(i, altitude(E, C, D)), H) mod 360
By draw_point_of_tangency on Line(D, E), Circle(E, G, H) we get exists(line_circle_tangent_point(Line(D, E), Circle(E, G, H)))
By collinear_definition on D, line_intersection(i, altitude(B, C, D)), C we get line_intersection(i, altitude(B, C, D)) in Line(C, D), C in Line(D, line_intersection(i, altitude(B, C, D))), Line(C, D) == Line(D, line_intersection(i, altitude(B, C, D))), 0 == 2 * angle(line_intersection(i, altitude(B, C, D)), D, C) mod 360
By perpendicular_angle_conditions_v0 on line_intersection(i, altitude(E, C, D)), E, H we get angle(line_intersection(i, altitude(E, C, D)), E, H) == orientation(E, H, line_intersection(i, altitude(E, C, D))) mod 360
By collinear_definition on E, line_intersection(k, altitude(B, C, D)), H we get line_intersection(k, altitude(B, C, D)) in Line(E, H), H in Line(E, line_intersection(k, altitude(B, C, D))), Line(E, H) == Line(E, line_intersection(k, altitude(B, C, D))), 0 == 2 * angle(line_intersection(k, altitude(B, C, D)), E, H) mod 360
By power_of_a_point_in_circle on H, Circle(E, G, H) we get 0 == power_of_a_point(H, Circle(E, G, H))
By external_angle_bisector_definition_v0_r on orthocenter(B, C, D), C, orthocenter(B, C, D), E we get Line(C, E) == external_angle_bisector(orthocenter(B, C, D), E, orthocenter(B, C, D))
By collinear_definition on orthocenter(B, C, D), line_intersection(k, altitude(B, C, D)), B we get line_intersection(k, altitude(B, C, D)) in Line(B, orthocenter(B, C, D)), B in Line(orthocenter(B, C, D), line_intersection(k, altitude(B, C, D))), Line(B, orthocenter(B, C, D)) == Line(orthocenter(B, C, D), line_intersection(k, altitude(B, C, D))), 0 == 2 * angle(line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D), B) mod 360
By collinear_definition on B, orthocenter(B, C, D), line_intersection(i, altitude(B, C, D)) we get orthocenter(B, C, D) in Line(B, line_intersection(i, altitude(B, C, D))), line_intersection(i, altitude(B, C, D)) in Line(B, orthocenter(B, C, D)), Line(B, orthocenter(B, C, D)) == Line(B, line_intersection(i, altitude(B, C, D))), 0 == 2 * angle(orthocenter(B, C, D), B, line_intersection(i, altitude(B, C, D))) mod 360
By power_of_a_point_in_circle on G, Circle(E, G, H) we get 0 == power_of_a_point(G, Circle(E, G, H))
By collinear_definition on D, C, line_intersection(i, altitude(B, C, D)) we get C in Line(D, line_intersection(i, altitude(B, C, D))), line_intersection(i, altitude(B, C, D)) in Line(C, D), Line(C, D) == Line(D, line_intersection(i, altitude(B, C, D))), 0 == 2 * angle(C, D, line_intersection(i, altitude(B, C, D))) mod 360
By collinear_definition on orthocenter(B, C, D), B, line_intersection(i, altitude(B, C, D)) we get B in Line(orthocenter(B, C, D), line_intersection(i, altitude(B, C, D))), line_intersection(i, altitude(B, C, D)) in Line(B, orthocenter(B, C, D)), Line(B, orthocenter(B, C, D)) == Line(orthocenter(B, C, D), line_intersection(i, altitude(B, C, D))), 0 == 2 * angle(B, orthocenter(B, C, D), line_intersection(i, altitude(B, C, D))) mod 360
By altitude_definition on orthocenter(B, C, D), G, B, j we get j == altitude(orthocenter(B, C, D), B, G)
By collinear_definition on line_intersection(k, altitude(B, C, D)), H, E we get H in Line(E, line_intersection(k, altitude(B, C, D))), E in Line(H, line_intersection(k, altitude(B, C, D))), Line(E, line_intersection(k, altitude(B, C, D))) == Line(H, line_intersection(k, altitude(B, C, D))), 0 == 2 * angle(H, line_intersection(k, altitude(B, C, D)), E) mod 360
By altitude_definition on orthocenter(B, C, D), B, F, j we get j == altitude(orthocenter(B, C, D), B, F)
By altitude_definition on D, C, orthocenter(B, C, D), h we get h == altitude(D, C, orthocenter(B, C, D))
By collinear_definition on line_intersection(k, altitude(B, C, D)), B, orthocenter(B, C, D) we get B in Line(orthocenter(B, C, D), line_intersection(k, altitude(B, C, D))), orthocenter(B, C, D) in Line(B, line_intersection(k, altitude(B, C, D))), Line(B, line_intersection(k, altitude(B, C, D))) == Line(orthocenter(B, C, D), line_intersection(k, altitude(B, C, D))), 0 == 2 * angle(B, line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D)) mod 360
By altitude_definition on orthocenter(B, C, D), C, E, Line(D, E) we get Line(D, E) == altitude(orthocenter(B, C, D), C, E)
By altitude_definition on D, G, orthocenter(B, C, D), h we get h == altitude(D, G, orthocenter(B, C, D))
By altitude_definition on E, orthocenter(B, C, D), B, k we get k == altitude(E, B, orthocenter(B, C, D))
By altitude_definition on C, orthocenter(B, C, D), E, f we get f == altitude(C, E, orthocenter(B, C, D))
By altitude_definition on orthocenter(B, C, D), B, D, j we get j == altitude(orthocenter(B, C, D), B, D)
By altitude_definition on orthocenter(B, C, D), H, E, altitude(B, C, D) we get altitude(B, C, D) == altitude(orthocenter(B, C, D), E, H)
By altitude_definition on orthocenter(B, C, D), D, F, j we get j == altitude(orthocenter(B, C, D), D, F)
By altitude_definition on H, B, orthocenter(B, C, D), k we get k == altitude(H, B, orthocenter(B, C, D))
By altitude_definition on B, H, orthocenter(B, C, D), h we get h == altitude(B, H, orthocenter(B, C, D))
By altitude_definition on D, orthocenter(B, C, D), B, i we get i == altitude(D, B, orthocenter(B, C, D))
By altitude_definition on D, orthocenter(B, C, D), H, h we get h == altitude(D, H, orthocenter(B, C, D))
By altitude_definition on orthocenter(B, C, D), C, B, Line(D, E) we get Line(D, E) == altitude(orthocenter(B, C, D), B, C)
By collinear_definition on line_intersection(i, altitude(B, C, D)), D, C we get D in Line(C, line_intersection(i, altitude(B, C, D))), C in Line(D, line_intersection(i, altitude(B, C, D))), Line(C, line_intersection(i, altitude(B, C, D))) == Line(D, line_intersection(i, altitude(B, C, D))), 0 == 2 * angle(D, line_intersection(i, altitude(B, C, D)), C) mod 360
By altitude_definition on C, B, orthocenter(B, C, D), i we get i == altitude(C, B, orthocenter(B, C, D))
By altitude_definition on F, H, orthocenter(B, C, D), h we get h == altitude(F, H, orthocenter(B, C, D))
By altitude_definition on F, orthocenter(B, C, D), G, h we get h == altitude(F, G, orthocenter(B, C, D))
By altitude_definition on orthocenter(B, C, D), C, D, altitude(B, C, D) we get altitude(B, C, D) == altitude(orthocenter(B, C, D), C, D)
By altitude_definition on C, orthocenter(B, C, D), D, f we get f == altitude(C, D, orthocenter(B, C, D))
By altitude_definition on F, C, orthocenter(B, C, D), h we get h == altitude(F, C, orthocenter(B, C, D))
By altitude_definition on orthocenter(B, C, D), E, B, Line(D, E) we get Line(D, E) == altitude(orthocenter(B, C, D), B, E)
By altitude_definition on orthocenter(B, C, D), F, G, j we get j == altitude(orthocenter(B, C, D), F, G)
By altitude_definition on B, orthocenter(B, C, D), C, h we get h == altitude(B, C, orthocenter(B, C, D))
By altitude_definition on orthocenter(B, C, D), G, D, j we get j == altitude(orthocenter(B, C, D), D, G)
By collinear_definition on line_intersection(i, altitude(B, C, D)), orthocenter(B, C, D), B we get orthocenter(B, C, D) in Line(B, line_intersection(i, altitude(B, C, D))), B in Line(orthocenter(B, C, D), line_intersection(i, altitude(B, C, D))), Line(B, line_intersection(i, altitude(B, C, D))) == Line(orthocenter(B, C, D), line_intersection(i, altitude(B, C, D))), 0 == 2 * angle(orthocenter(B, C, D), line_intersection(i, altitude(B, C, D)), B) mod 360
By collinear_definition on line_intersection(i, altitude(B, C, D)), C, D we get C in Line(D, line_intersection(i, altitude(B, C, D))), D in Line(C, line_intersection(i, altitude(B, C, D))), Line(C, line_intersection(i, altitude(B, C, D))) == Line(D, line_intersection(i, altitude(B, C, D))), 0 == 2 * angle(C, line_intersection(i, altitude(B, C, D)), D) mod 360
By altitude_definition on B, D, orthocenter(B, C, D), f we get f == altitude(B, D, orthocenter(B, C, D))
By altitude_definition on B, orthocenter(B, C, D), E, f we get f == altitude(B, E, orthocenter(B, C, D))
By altitude_definition on B, G, orthocenter(B, C, D), h we get h == altitude(B, G, orthocenter(B, C, D))
By collinear_definition on line_intersection(k, altitude(B, C, D)), E, H we get E in Line(H, line_intersection(k, altitude(B, C, D))), H in Line(E, line_intersection(k, altitude(B, C, D))), Line(E, line_intersection(k, altitude(B, C, D))) == Line(H, line_intersection(k, altitude(B, C, D))), 0 == 2 * angle(E, line_intersection(k, altitude(B, C, D)), H) mod 360
By collinear_definition on line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D), B we get orthocenter(B, C, D) in Line(B, line_intersection(k, altitude(B, C, D))), B in Line(orthocenter(B, C, D), line_intersection(k, altitude(B, C, D))), Line(B, line_intersection(k, altitude(B, C, D))) == Line(orthocenter(B, C, D), line_intersection(k, altitude(B, C, D))), 0 == 2 * angle(orthocenter(B, C, D), line_intersection(k, altitude(B, C, D)), B) mod 360
By collinear_definition on line_intersection(i, altitude(B, C, D)), B, orthocenter(B, C, D) we get B in Line(orthocenter(B, C, D), line_intersection(i, altitude(B, C, D))), orthocenter(B, C, D) in Line(B, line_intersection(i, altitude(B, C, D))), Line(B, line_intersection(i, altitude(B, C, D))) == Line(orthocenter(B, C, D), line_intersection(i, altitude(B, C, D))), 0 == 2 * angle(B, line_intersection(i, altitude(B, C, D)), orthocenter(B, C, D)) mod 360
By power_of_a_point_tangent on D, E, Circle(E, G, H) we get 2 * log(distance(D, E)) == log(power_of_a_point(D, Circle(E, G, H)))
By power_of_a_point_tangent on orthocenter(B, C, D), E, Circle(E, G, H) we get 2 * log(distance(E, orthocenter(B, C, D))) == log(power_of_a_point(orthocenter(B, C, D), Circle(E, G, H)))
By concyclic_sufficient_conditions_v0 on E, H, G, F we get concyclic(E, F, G, H)
By line_definition on B, line_intersection(Line(E, G), altitude(B, E, G)), altitude(B, E, G) we get altitude(B, E, G) == Line(B, line_intersection(Line(E, G), altitude(B, E, G)))
By perpendicular_line_definition on E, Line(E, F), k we get Line(E, F) == perpendicular_line(E, k)
By perpendicular_line_definition on E, Line(E, F), i we get Line(E, F) == perpendicular_line(E, i)
By line_intersection_definition on F, h, Line(E, F) we get F == line_intersection(h, Line(E, F))
By perpendicular_line_definition on C, i, Line(E, F) we get i == perpendicular_line(C, Line(E, F))
By line_intersection_definition on F, Line(E, F), Line(F, H) we get F == line_intersection(Line(E, F), Line(F, H))
By line_intersection_definition on E, Line(D, E), Line(E, F) we get E == line_intersection(Line(D, E), Line(E, F))
By line_intersection_definition on F, Line(E, F), Line(A, F) we get F == line_intersection(Line(A, F), Line(E, F))
By perpendicular_line_definition on projection(E, i), i, Line(E, F) we get i == perpendicular_line(projection(E, i), Line(E, F))
By orthocenter_concurrency on B, C, orthocenter(B, C, D) we get orthocenter(B, C, orthocenter(B, C, D)) in altitude(B, C, orthocenter(B, C, D)), orthocenter(B, C, orthocenter(B, C, D)) in altitude(C, B, orthocenter(B, C, D)), orthocenter(B, C, orthocenter(B, C, D)) in altitude(orthocenter(B, C, D), B, C)
By orthocenter_concurrency on D, orthocenter(B, C, D), C we get orthocenter(C, D, orthocenter(B, C, D)) in altitude(D, C, orthocenter(B, C, D)), orthocenter(C, D, orthocenter(B, C, D)) in altitude(orthocenter(B, C, D), C, D), orthocenter(C, D, orthocenter(B, C, D)) in altitude(C, D, orthocenter(B, C, D))
By orthocenter_concurrency on B, orthocenter(B, C, D), D we get orthocenter(B, D, orthocenter(B, C, D)) in altitude(B, D, orthocenter(B, C, D)), orthocenter(B, D, orthocenter(B, C, D)) in altitude(orthocenter(B, C, D), B, D), orthocenter(B, D, orthocenter(B, C, D)) in altitude(D, B, orthocenter(B, C, D))
By line_intersection_definition on E, Line(E, F), Line(E, G) we get E == line_intersection(Line(E, F), Line(E, G))
By perpendicular_line_definition on F, Line(E, F), i we get Line(E, F) == perpendicular_line(F, i)
By orthocenter_concurrency on orthocenter(B, C, D), E, B we get orthocenter(B, E, orthocenter(B, C, D)) in altitude(orthocenter(B, C, D), B, E), orthocenter(B, E, orthocenter(B, C, D)) in altitude(E, B, orthocenter(B, C, D)), orthocenter(B, E, orthocenter(B, C, D)) in altitude(B, E, orthocenter(B, C, D))
By perpendicular_line_definition on line_intersection(k, altitude(G, C, D)), k, Line(E, F) we get k == perpendicular_line(line_intersection(k, altitude(G, C, D)), Line(E, F))
By perpendicular_line_definition on D, i, Line(E, F) we get i == perpendicular_line(D, Line(E, F))
By line_intersection_definition on F, Line(C, F), Line(E, F) we get F == line_intersection(Line(C, F), Line(E, F))
By line_intersection_definition on E, Line(E, F), k we get E == line_intersection(k, Line(E, F))
By perpendicular_line_definition on H, k, Line(E, F) we get k == perpendicular_line(H, Line(E, F))
By perpendicular_line_definition on line_intersection(k, altitude(B, C, D)), k, Line(E, F) we get k == perpendicular_line(line_intersection(k, altitude(B, C, D)), Line(E, F))
By perpendicular_line_definition on line_circle_tangent_point(Line(D, E), Circle(E, G, H)), Line(D, E), f we get Line(D, E) == perpendicular_line(line_circle_tangent_point(Line(D, E), Circle(E, G, H)), f)
By perpendicular_line_definition on projection(B, i), i, Line(E, F) we get i == perpendicular_line(projection(B, i), Line(E, F))
By perpendicular_line_definition on F, Line(E, F), k we get Line(E, F) == perpendicular_line(F, k)
By perpendicular_line_definition on E, k, Line(E, F) we get k == perpendicular_line(E, Line(E, F))
By line_intersection_definition on E, f, Line(E, F) we get E == line_intersection(f, Line(E, F))
By perpendicular_line_definition on projection(G, i), i, Line(E, F) we get i == perpendicular_line(projection(G, i), Line(E, F))
By line_unique_intersection_v1 on Line(E, F), k, E, line_intersection(k, altitude(B, C, D)) we get line_intersection(k, altitude(B, C, D)) not in Line(E, F)
By perpendicular_direction_conditions_v0_r on E, H, line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D) we get 180 == 2 * direction(E, H) - 2 * direction(line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), H, B, orthocenter(B, C, D) we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), H) - 2 * direction(B, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, C, line_intersection(k, altitude(B, C, D)), B we get 180 == 2 * direction(D, C) - 2 * direction(line_intersection(k, altitude(B, C, D)), B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D), E, line_intersection(k, altitude(B, C, D)) we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D)) - 2 * direction(E, line_intersection(k, altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on F, E, projection(B, i), C we get 180 == 2 * direction(F, E) - 2 * direction(projection(B, i), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), E, orthocenter(B, C, D), line_intersection(k, altitude(B, C, D)) we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), E) - 2 * direction(orthocenter(B, C, D), line_intersection(k, altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), projection(B, i), line_intersection(k, altitude(B, C, D)), E we get 180 == 2 * direction(orthocenter(B, C, D), projection(B, i)) - 2 * direction(line_intersection(k, altitude(B, C, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), C, projection(B, i), orthocenter(B, C, D) we get 180 == 2 * direction(projection(B, i), C) - 2 * direction(projection(B, i), orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), D, orthocenter(B, C, D), projection(B, i) we get 180 == 2 * direction(projection(B, i), D) - 2 * direction(orthocenter(B, C, D), projection(B, i)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D), D, projection(B, i) we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D)) - 2 * direction(D, projection(B, i)) mod 360
By perpendicular_direction_conditions_v0_r on B, orthocenter(B, C, D), line_intersection(k, altitude(B, C, D)), E we get 180 == 2 * direction(B, orthocenter(B, C, D)) - 2 * direction(line_intersection(k, altitude(B, C, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on H, line_intersection(k, altitude(B, C, D)), line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D) we get 180 == 2 * direction(H, line_intersection(k, altitude(B, C, D))) - 2 * direction(line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), C, G, projection(G, i) we get 180 == 2 * direction(projection(B, i), C) - 2 * direction(G, projection(G, i)) mod 360
By perpendicular_direction_conditions_v0_r on G, projection(G, i), line_intersection(k, altitude(B, C, D)), H we get 180 == 2 * direction(G, projection(G, i)) - 2 * direction(line_intersection(k, altitude(B, C, D)), H) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), H, G, projection(G, i) we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), H) - 2 * direction(G, projection(G, i)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), B, H, E we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), B) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on E, projection(E, i), line_intersection(k, altitude(B, C, D)), E we get 180 == 2 * direction(E, projection(E, i)) - 2 * direction(line_intersection(k, altitude(B, C, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D), C, D we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D)) - 2 * direction(C, D) mod 360
By between_implies_orientation on line_intersection(Line(E, G), altitude(B, E, G)), B, D, F we get orientation(B, D, line_intersection(Line(E, G), altitude(B, E, G))) == orientation(D, F, line_intersection(Line(E, G), altitude(B, E, G))) mod 360, orientation(B, D, line_intersection(Line(E, G), altitude(B, E, G))) == orientation(B, F, line_intersection(Line(E, G), altitude(B, E, G))) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), C, line_intersection(k, altitude(B, C, D)), B we get 180 == 2 * direction(projection(B, i), C) - 2 * direction(line_intersection(k, altitude(B, C, D)), B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), H, projection(E, i), E we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), H) - 2 * direction(projection(E, i), E) mod 360
By perpendicular_direction_conditions_v0_r on projection(E, i), E, projection(B, i), C we get 180 == 2 * direction(projection(E, i), E) - 2 * direction(projection(B, i), C) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), C, orthocenter(B, C, D), line_intersection(k, altitude(B, C, D)) we get 180 == 2 * direction(projection(B, i), C) - 2 * direction(orthocenter(B, C, D), line_intersection(k, altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on E, H, line_intersection(k, altitude(B, C, D)), B we get 180 == 2 * direction(E, H) - 2 * direction(line_intersection(k, altitude(B, C, D)), B) mod 360
By perpendicular_direction_conditions_v0_r on projection(E, i), E, projection(B, i), D we get 180 == 2 * direction(projection(E, i), E) - 2 * direction(projection(B, i), D) mod 360
By perpendicular_direction_conditions_v0_r on B, projection(B, i), line_intersection(k, altitude(B, C, D)), H we get 180 == 2 * direction(B, projection(B, i)) - 2 * direction(line_intersection(k, altitude(B, C, D)), H) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), E, orthocenter(B, C, D), B we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), E) - 2 * direction(orthocenter(B, C, D), B) mod 360
By perpendicular_direction_conditions_v0_r on E, F, line_intersection(k, altitude(B, C, D)), H we get 180 == 2 * direction(E, F) - 2 * direction(line_intersection(k, altitude(B, C, D)), H) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), E, orthocenter(B, C, D), projection(B, i) we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), E) - 2 * direction(orthocenter(B, C, D), projection(B, i)) mod 360
By perpendicular_direction_conditions_v0_r on B, projection(B, i), projection(B, i), C we get 180 == 2 * direction(B, projection(B, i)) - 2 * direction(projection(B, i), C) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), D, orthocenter(B, C, D), line_intersection(k, altitude(B, C, D)) we get 180 == 2 * direction(projection(B, i), D) - 2 * direction(orthocenter(B, C, D), line_intersection(k, altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on projection(G, i), G, projection(B, i), C we get 180 == 2 * direction(projection(G, i), G) - 2 * direction(projection(B, i), C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), projection(B, i), projection(B, i), C we get 180 == 2 * direction(orthocenter(B, C, D), projection(B, i)) - 2 * direction(projection(B, i), C) mod 360
By projection_definition on line_intersection(k, altitude(B, C, D)), E, altitude(E, C, D) we get E == projection(line_intersection(k, altitude(B, C, D)), altitude(E, C, D))
By perpendicular_direction_conditions_v0_r on projection(B, i), C, E, projection(E, i) we get 180 == 2 * direction(projection(B, i), C) - 2 * direction(E, projection(E, i)) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), D, B, line_intersection(k, altitude(B, C, D)) we get 180 == 2 * direction(projection(B, i), D) - 2 * direction(B, line_intersection(k, altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on projection(G, i), G, line_intersection(k, altitude(B, C, D)), H we get 180 == 2 * direction(projection(G, i), G) - 2 * direction(line_intersection(k, altitude(B, C, D)), H) mod 360
By perpendicular_direction_conditions_v0_r on D, projection(B, i), line_intersection(k, altitude(B, C, D)), B we get 180 == 2 * direction(D, projection(B, i)) - 2 * direction(line_intersection(k, altitude(B, C, D)), B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), B, projection(B, i), D we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), B) - 2 * direction(projection(B, i), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), projection(B, i), projection(B, i), D we get 180 == 2 * direction(orthocenter(B, C, D), projection(B, i)) - 2 * direction(projection(B, i), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), H, B, line_intersection(k, altitude(B, C, D)) we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), H) - 2 * direction(B, line_intersection(k, altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on E, F, projection(B, i), D we get 180 == 2 * direction(E, F) - 2 * direction(projection(B, i), D) mod 360
By projection_definition on C, projection(B, i), altitude(B, C, D) we get projection(B, i) == projection(C, altitude(B, C, D))
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), H, B, projection(B, i) we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), H) - 2 * direction(B, projection(B, i)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), E, B, line_intersection(k, altitude(B, C, D)) we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), E) - 2 * direction(B, line_intersection(k, altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), E, E, F we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), E) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on D, projection(B, i), line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D) we get 180 == 2 * direction(D, projection(B, i)) - 2 * direction(line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), D, projection(G, i), G we get 180 == 2 * direction(projection(B, i), D) - 2 * direction(projection(G, i), G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), E, projection(B, i), B we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), E) - 2 * direction(projection(B, i), B) mod 360
By perpendicular_direction_conditions_v0_r on G, projection(G, i), line_intersection(k, altitude(B, C, D)), E we get 180 == 2 * direction(G, projection(G, i)) - 2 * direction(line_intersection(k, altitude(B, C, D)), E) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(E, G), altitude(B, E, G)), B, F, D we get orientation(B, line_intersection(Line(E, G), altitude(B, E, G)), F) == orientation(D, line_intersection(Line(E, G), altitude(B, E, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), H, projection(G, i), G we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), H) - 2 * direction(projection(G, i), G) mod 360
By projection_definition on H, line_intersection(k, altitude(B, C, D)), altitude(B, C, D) we get projection(H, altitude(B, C, D)) == line_intersection(k, altitude(B, C, D))
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), E, projection(E, i), E we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), E) - 2 * direction(projection(E, i), E) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), orthocenter(B, C, D), projection(B, i), D we get 180 == 2 * direction(projection(B, i), orthocenter(B, C, D)) - 2 * direction(projection(B, i), D) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), C, E, F we get 180 == 2 * direction(projection(B, i), C) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), E, E, projection(E, i) we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), E) - 2 * direction(E, projection(E, i)) mod 360
By perpendicular_direction_conditions_v0_r on G, projection(G, i), projection(B, i), C we get 180 == 2 * direction(G, projection(G, i)) - 2 * direction(projection(B, i), C) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), C, orthocenter(B, C, D), B we get 180 == 2 * direction(projection(B, i), C) - 2 * direction(orthocenter(B, C, D), B) mod 360
By perpendicular_direction_conditions_v0_r on E, F, projection(B, i), C we get 180 == 2 * direction(E, F) - 2 * direction(projection(B, i), C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), line_intersection(k, altitude(B, C, D)), projection(B, i), C we get 180 == 2 * direction(orthocenter(B, C, D), line_intersection(k, altitude(B, C, D))) - 2 * direction(projection(B, i), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), E, projection(G, i), G we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), E) - 2 * direction(projection(G, i), G) mod 360
By between_implies_orientation on line_intersection(Line(E, G), altitude(B, E, G)), F, D, B we get orientation(B, line_intersection(Line(E, G), altitude(B, E, G)), D) == orientation(D, line_intersection(Line(E, G), altitude(B, E, G)), F) mod 360, orientation(B, line_intersection(Line(E, G), altitude(B, E, G)), F) == orientation(D, line_intersection(Line(E, G), altitude(B, E, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), C, F, E we get 180 == 2 * direction(projection(B, i), C) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), B, C, projection(B, i) we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), B) - 2 * direction(C, projection(B, i)) mod 360
By perpendicular_direction_conditions_v0_r on B, projection(B, i), projection(B, i), D we get 180 == 2 * direction(B, projection(B, i)) - 2 * direction(projection(B, i), D) mod 360
By perpendicular_direction_conditions_v0_r on F, E, line_intersection(k, altitude(B, C, D)), E we get 180 == 2 * direction(F, E) - 2 * direction(line_intersection(k, altitude(B, C, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D), projection(B, i), D we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D)) - 2 * direction(projection(B, i), D) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), D, projection(B, i), B we get 180 == 2 * direction(projection(B, i), D) - 2 * direction(projection(B, i), B) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(k, altitude(B, C, D)), line_intersection(k, altitude(B, C, D)), B we get 180 == 2 * direction(E, line_intersection(k, altitude(B, C, D))) - 2 * direction(line_intersection(k, altitude(B, C, D)), B) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), D, projection(E, i), E we get 180 == 2 * direction(projection(B, i), D) - 2 * direction(projection(E, i), E) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), C, orthocenter(B, C, D), projection(B, i) we get 180 == 2 * direction(projection(B, i), C) - 2 * direction(orthocenter(B, C, D), projection(B, i)) mod 360
By projection_definition on G, line_intersection(k, altitude(G, C, D)), k we get projection(G, k) == line_intersection(k, altitude(G, C, D))
By perpendicular_direction_conditions_v0_r on B, line_intersection(k, altitude(B, C, D)), projection(B, i), D we get 180 == 2 * direction(B, line_intersection(k, altitude(B, C, D))) - 2 * direction(projection(B, i), D) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), D, orthocenter(B, C, D), B we get 180 == 2 * direction(projection(B, i), D) - 2 * direction(orthocenter(B, C, D), B) mod 360
By perpendicular_direction_conditions_v0_r on H, E, line_intersection(k, altitude(B, C, D)), B we get 180 == 2 * direction(H, E) - 2 * direction(line_intersection(k, altitude(B, C, D)), B) mod 360
By perpendicular_direction_conditions_v0_r on C, D, line_intersection(k, altitude(B, C, D)), B we get 180 == 2 * direction(C, D) - 2 * direction(line_intersection(k, altitude(B, C, D)), B) mod 360
By perpendicular_direction_conditions_v0_r on E, projection(E, i), line_intersection(k, altitude(B, C, D)), H we get 180 == 2 * direction(E, projection(E, i)) - 2 * direction(line_intersection(k, altitude(B, C, D)), H) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), D, B, projection(B, i) we get 180 == 2 * direction(projection(B, i), D) - 2 * direction(B, projection(B, i)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), H, projection(B, i), B we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), H) - 2 * direction(projection(B, i), B) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(k, altitude(B, C, D)), line_intersection(k, altitude(B, C, D)), E we get 180 == 2 * direction(B, line_intersection(k, altitude(B, C, D))) - 2 * direction(line_intersection(k, altitude(B, C, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D), line_intersection(k, altitude(B, C, D)), H we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D)) - 2 * direction(line_intersection(k, altitude(B, C, D)), H) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D), H, line_intersection(k, altitude(B, C, D)) we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D)) - 2 * direction(H, line_intersection(k, altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), E, line_intersection(k, altitude(B, C, D)), B we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), E) - 2 * direction(line_intersection(k, altitude(B, C, D)), B) mod 360
By projection_definition on B, line_intersection(k, altitude(B, C, D)), k we get projection(B, k) == line_intersection(k, altitude(B, C, D))
By perpendicular_direction_conditions_v0_r on B, line_intersection(k, altitude(B, C, D)), line_intersection(k, altitude(B, C, D)), H we get 180 == 2 * direction(B, line_intersection(k, altitude(B, C, D))) - 2 * direction(line_intersection(k, altitude(B, C, D)), H) mod 360
By perpendicular_direction_conditions_v0_r on E, F, line_intersection(k, altitude(B, C, D)), E we get 180 == 2 * direction(E, F) - 2 * direction(line_intersection(k, altitude(B, C, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), H, line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D) we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), H) - 2 * direction(line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, D, line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D) we get 180 == 2 * direction(C, D) - 2 * direction(line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D), D, C we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D)) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D), projection(B, i), C we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D)) - 2 * direction(projection(B, i), C) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), C, B, orthocenter(B, C, D) we get 180 == 2 * direction(projection(B, i), C) - 2 * direction(B, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), C, line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D) we get 180 == 2 * direction(projection(B, i), C) - 2 * direction(line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D), line_intersection(k, altitude(B, C, D)), E we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D)) - 2 * direction(line_intersection(k, altitude(B, C, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), projection(B, i), line_intersection(k, altitude(B, C, D)), H we get 180 == 2 * direction(orthocenter(B, C, D), projection(B, i)) - 2 * direction(line_intersection(k, altitude(B, C, D)), H) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), D, projection(B, i), orthocenter(B, C, D) we get 180 == 2 * direction(projection(B, i), D) - 2 * direction(projection(B, i), orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), D, B, orthocenter(B, C, D) we get 180 == 2 * direction(projection(B, i), D) - 2 * direction(B, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, projection(B, i), line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D) we get 180 == 2 * direction(C, projection(B, i)) - 2 * direction(line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), C, projection(E, i), E we get 180 == 2 * direction(projection(B, i), C) - 2 * direction(projection(E, i), E) mod 360
By perpendicular_direction_conditions_v0_r on H, E, line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D) we get 180 == 2 * direction(H, E) - 2 * direction(line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), B, projection(B, i), C we get 180 == 2 * direction(orthocenter(B, C, D), B) - 2 * direction(projection(B, i), C) mod 360
By perpendicular_direction_conditions_v0_r on B, orthocenter(B, C, D), projection(B, i), D we get 180 == 2 * direction(B, orthocenter(B, C, D)) - 2 * direction(projection(B, i), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), B, D, C we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), B) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), E, B, orthocenter(B, C, D) we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), E) - 2 * direction(B, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), B, projection(B, i), C we get 180 == 2 * direction(projection(B, i), B) - 2 * direction(projection(B, i), C) mod 360
By projection_definition on orthocenter(B, C, D), line_intersection(k, altitude(B, C, D)), k we get projection(orthocenter(B, C, D), k) == line_intersection(k, altitude(B, C, D))
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), B, E, line_intersection(k, altitude(B, C, D)) we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), B) - 2 * direction(E, line_intersection(k, altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), B, line_intersection(k, altitude(B, C, D)), E we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), B) - 2 * direction(line_intersection(k, altitude(B, C, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), C, projection(G, i), G we get 180 == 2 * direction(projection(B, i), C) - 2 * direction(projection(G, i), G) mod 360
By projection_definition on D, projection(B, i), altitude(B, C, D) we get projection(B, i) == projection(D, altitude(B, C, D))
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), B, line_intersection(k, altitude(B, C, D)), H we get 180 == 2 * direction(orthocenter(B, C, D), B) - 2 * direction(line_intersection(k, altitude(B, C, D)), H) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), E, B, projection(B, i) we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), E) - 2 * direction(B, projection(B, i)) mod 360
By perpendicular_direction_conditions_v0_r on projection(E, i), E, line_intersection(k, altitude(B, C, D)), H we get 180 == 2 * direction(projection(E, i), E) - 2 * direction(line_intersection(k, altitude(B, C, D)), H) mod 360
By perpendicular_direction_conditions_v0_r on projection(E, i), E, line_intersection(k, altitude(B, C, D)), E we get 180 == 2 * direction(projection(E, i), E) - 2 * direction(line_intersection(k, altitude(B, C, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), orthocenter(B, C, D), line_intersection(k, altitude(B, C, D)), E we get 180 == 2 * direction(projection(B, i), orthocenter(B, C, D)) - 2 * direction(line_intersection(k, altitude(B, C, D)), E) mod 360
By projection_definition on orthocenter(B, C, D), projection(B, i), i we get projection(B, i) == projection(orthocenter(B, C, D), i)
By perpendicular_direction_conditions_v0_r on C, projection(B, i), line_intersection(k, altitude(B, C, D)), B we get 180 == 2 * direction(C, projection(B, i)) - 2 * direction(line_intersection(k, altitude(B, C, D)), B) mod 360
By perpendicular_direction_conditions_v0_r on B, orthocenter(B, C, D), projection(B, i), C we get 180 == 2 * direction(B, orthocenter(B, C, D)) - 2 * direction(projection(B, i), C) mod 360
By perpendicular_direction_conditions_v0_r on H, line_intersection(k, altitude(B, C, D)), line_intersection(k, altitude(B, C, D)), B we get 180 == 2 * direction(H, line_intersection(k, altitude(B, C, D))) - 2 * direction(line_intersection(k, altitude(B, C, D)), B) mod 360
By perpendicular_direction_conditions_v0_r on projection(G, i), G, line_intersection(k, altitude(B, C, D)), E we get 180 == 2 * direction(projection(G, i), G) - 2 * direction(line_intersection(k, altitude(B, C, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on F, E, projection(B, i), D we get 180 == 2 * direction(F, E) - 2 * direction(projection(B, i), D) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), orthocenter(B, C, D), projection(B, i), C we get 180 == 2 * direction(projection(B, i), orthocenter(B, C, D)) - 2 * direction(projection(B, i), C) mod 360
By projection_definition on E, line_intersection(k, altitude(B, C, D)), altitude(B, C, D) we get projection(E, altitude(B, C, D)) == line_intersection(k, altitude(B, C, D))
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), E, line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D) we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), E) - 2 * direction(line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), H, line_intersection(k, altitude(B, C, D)), B we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), H) - 2 * direction(line_intersection(k, altitude(B, C, D)), B) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), B, projection(B, i), D we get 180 == 2 * direction(projection(B, i), B) - 2 * direction(projection(B, i), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), H, orthocenter(B, C, D), line_intersection(k, altitude(B, C, D)) we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), H) - 2 * direction(orthocenter(B, C, D), line_intersection(k, altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), H, orthocenter(B, C, D), B we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), H) - 2 * direction(orthocenter(B, C, D), B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), H, E, F we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), H) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on B, orthocenter(B, C, D), line_intersection(k, altitude(B, C, D)), H we get 180 == 2 * direction(B, orthocenter(B, C, D)) - 2 * direction(line_intersection(k, altitude(B, C, D)), H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), B, projection(B, i), D we get 180 == 2 * direction(orthocenter(B, C, D), B) - 2 * direction(projection(B, i), D) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), C, B, projection(B, i) we get 180 == 2 * direction(projection(B, i), C) - 2 * direction(B, projection(B, i)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), H, projection(B, i), orthocenter(B, C, D) we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), H) - 2 * direction(projection(B, i), orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), line_intersection(k, altitude(B, C, D)), line_intersection(k, altitude(B, C, D)), H we get 180 == 2 * direction(orthocenter(B, C, D), line_intersection(k, altitude(B, C, D))) - 2 * direction(line_intersection(k, altitude(B, C, D)), H) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(k, altitude(B, C, D)), projection(B, i), C we get 180 == 2 * direction(B, line_intersection(k, altitude(B, C, D))) - 2 * direction(projection(B, i), C) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(k, altitude(B, C, D)), line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D) we get 180 == 2 * direction(E, line_intersection(k, altitude(B, C, D))) - 2 * direction(line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), line_intersection(k, altitude(B, C, D)), line_intersection(k, altitude(B, C, D)), E we get 180 == 2 * direction(orthocenter(B, C, D), line_intersection(k, altitude(B, C, D))) - 2 * direction(line_intersection(k, altitude(B, C, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), E, projection(B, i), orthocenter(B, C, D) we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), E) - 2 * direction(projection(B, i), orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), B, line_intersection(k, altitude(B, C, D)), E we get 180 == 2 * direction(orthocenter(B, C, D), B) - 2 * direction(line_intersection(k, altitude(B, C, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), B, D, projection(B, i) we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), B) - 2 * direction(D, projection(B, i)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), E, G, projection(G, i) we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), E) - 2 * direction(G, projection(G, i)) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), C, B, line_intersection(k, altitude(B, C, D)) we get 180 == 2 * direction(projection(B, i), C) - 2 * direction(B, line_intersection(k, altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on D, C, line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D) we get 180 == 2 * direction(D, C) - 2 * direction(line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), D, E, F we get 180 == 2 * direction(projection(B, i), D) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), B, line_intersection(k, altitude(B, C, D)), H we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), B) - 2 * direction(line_intersection(k, altitude(B, C, D)), H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), line_intersection(k, altitude(B, C, D)), projection(B, i), D we get 180 == 2 * direction(orthocenter(B, C, D), line_intersection(k, altitude(B, C, D))) - 2 * direction(projection(B, i), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), H, F, E we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), H) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), D, F, E we get 180 == 2 * direction(projection(B, i), D) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), D, line_intersection(k, altitude(B, C, D)), B we get 180 == 2 * direction(projection(B, i), D) - 2 * direction(line_intersection(k, altitude(B, C, D)), B) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), orthocenter(B, C, D), line_intersection(k, altitude(B, C, D)), H we get 180 == 2 * direction(projection(B, i), orthocenter(B, C, D)) - 2 * direction(line_intersection(k, altitude(B, C, D)), H) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), D, E, projection(E, i) we get 180 == 2 * direction(projection(B, i), D) - 2 * direction(E, projection(E, i)) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), D, G, projection(G, i) we get 180 == 2 * direction(projection(B, i), D) - 2 * direction(G, projection(G, i)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), H, E, projection(E, i) we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), H) - 2 * direction(E, projection(E, i)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D), E, H we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D)) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), B, C, D we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), B) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D), H, E we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D)) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), B, projection(B, i), C we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), B) - 2 * direction(projection(B, i), C) mod 360
By perpendicular_direction_conditions_v0_r on G, projection(G, i), projection(B, i), D we get 180 == 2 * direction(G, projection(G, i)) - 2 * direction(projection(B, i), D) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), C, projection(B, i), B we get 180 == 2 * direction(projection(B, i), C) - 2 * direction(projection(B, i), B) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), B, line_intersection(k, altitude(B, C, D)), E we get 180 == 2 * direction(projection(B, i), B) - 2 * direction(line_intersection(k, altitude(B, C, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), H, orthocenter(B, C, D), projection(B, i) we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), H) - 2 * direction(orthocenter(B, C, D), projection(B, i)) mod 360
By perpendicular_direction_conditions_v0_r on F, E, line_intersection(k, altitude(B, C, D)), H we get 180 == 2 * direction(F, E) - 2 * direction(line_intersection(k, altitude(B, C, D)), H) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), E, F, E we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), E) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), B, E, H we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), B) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), D, line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D) we get 180 == 2 * direction(projection(B, i), D) - 2 * direction(line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), B, line_intersection(k, altitude(B, C, D)), H we get 180 == 2 * direction(projection(B, i), B) - 2 * direction(line_intersection(k, altitude(B, C, D)), H) mod 360
By perpendicular_direction_conditions_v0_r on B, projection(B, i), line_intersection(k, altitude(B, C, D)), E we get 180 == 2 * direction(B, projection(B, i)) - 2 * direction(line_intersection(k, altitude(B, C, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D), C, projection(B, i) we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D)) - 2 * direction(C, projection(B, i)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), B, H, line_intersection(k, altitude(B, C, D)) we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), B) - 2 * direction(H, line_intersection(k, altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on projection(G, i), G, projection(B, i), D we get 180 == 2 * direction(projection(G, i), G) - 2 * direction(projection(B, i), D) mod 360
By perpendicular_direction_conditions_v0_r on E, projection(E, i), projection(B, i), D we get 180 == 2 * direction(E, projection(E, i)) - 2 * direction(projection(B, i), D) mod 360
By perpendicular_direction_conditions_v0_r on E, projection(E, i), projection(B, i), C we get 180 == 2 * direction(E, projection(E, i)) - 2 * direction(projection(B, i), C) mod 360
By parallel_line_definition on line_circle_tangent_point(Line(D, E), Circle(E, G, H)), Line(D, E), altitude(G, B, C) we get Line(D, E) == parallel_line(line_circle_tangent_point(Line(D, E), Circle(E, G, H)), altitude(G, B, C))
By different_points_v1 on G, line_intersection(k, altitude(G, C, D)) we get 0 != distance(G, line_intersection(k, altitude(G, C, D)))
By different_points_v1 on E, line_intersection(k, altitude(B, C, D)) we get 0 != distance(E, line_intersection(k, altitude(B, C, D)))
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(G, C, D)), G, line_intersection(k, altitude(B, C, D)), H we get 180 == 2 * direction(line_intersection(k, altitude(G, C, D)), G) - 2 * direction(line_intersection(k, altitude(B, C, D)), H) mod 360
By different_points_v1 on C, projection(B, i) we get 0 != distance(C, projection(B, i))
By different_points_v1 on orthocenter(B, C, D), projection(B, i) we get 0 != distance(projection(B, i), orthocenter(B, C, D))
By perpendicular_direction_conditions_v0_r on G, line_intersection(k, altitude(G, C, D)), E, H we get 180 == 2 * direction(G, line_intersection(k, altitude(G, C, D))) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(k, altitude(G, C, D)), C, D we get 180 == 2 * direction(G, line_intersection(k, altitude(G, C, D))) - 2 * direction(C, D) mod 360
By different_points_v1 on orthocenter(B, C, D), line_intersection(k, altitude(B, C, D)) we get 0 != distance(orthocenter(B, C, D), line_intersection(k, altitude(B, C, D)))
By different_points_v1 on H, line_intersection(k, altitude(B, C, D)) we get 0 != distance(H, line_intersection(k, altitude(B, C, D)))
By different_points_v1 on projection(B, i), D we get 0 != distance(D, projection(B, i))
By different_points_v1 on line_intersection(k, altitude(B, C, D)), B we get 0 != distance(B, line_intersection(k, altitude(B, C, D)))
By perpendicular_direction_conditions_v0_r on G, line_intersection(k, altitude(G, C, D)), E, line_intersection(k, altitude(B, C, D)) we get 180 == 2 * direction(G, line_intersection(k, altitude(G, C, D))) - 2 * direction(E, line_intersection(k, altitude(B, C, D))) mod 360
By orthocenter_concurrency on C, orthocenter(B, C, D), E we get orthocenter(C, E, orthocenter(B, C, D)) in altitude(C, E, orthocenter(B, C, D)), orthocenter(C, E, orthocenter(B, C, D)) in altitude(orthocenter(B, C, D), C, E), orthocenter(C, E, orthocenter(B, C, D)) in altitude(E, C, orthocenter(B, C, D))
By perpendicular_direction_conditions_v0_r on C, projection(B, i), line_intersection(k, altitude(G, C, D)), G we get 180 == 2 * direction(C, projection(B, i)) - 2 * direction(line_intersection(k, altitude(G, C, D)), G) mod 360
By orthocenter_concurrency on F, orthocenter(B, C, D), G we get orthocenter(F, G, orthocenter(B, C, D)) in altitude(F, G, orthocenter(B, C, D)), orthocenter(F, G, orthocenter(B, C, D)) in altitude(orthocenter(B, C, D), F, G), orthocenter(F, G, orthocenter(B, C, D)) in altitude(G, F, orthocenter(B, C, D))
By perpendicular_direction_conditions_v0_r on E, line_intersection(k, altitude(B, C, D)), line_intersection(k, altitude(G, C, D)), G we get 180 == 2 * direction(E, line_intersection(k, altitude(B, C, D))) - 2 * direction(line_intersection(k, altitude(G, C, D)), G) mod 360
By perpendicular_direction_conditions_v0_r on H, line_intersection(k, altitude(B, C, D)), G, line_intersection(k, altitude(G, C, D)) we get 180 == 2 * direction(H, line_intersection(k, altitude(B, C, D))) - 2 * direction(G, line_intersection(k, altitude(G, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), H, line_intersection(k, altitude(G, C, D)), G we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), H) - 2 * direction(line_intersection(k, altitude(G, C, D)), G) mod 360
By perpendicular_direction_conditions_v0_r on C, projection(B, i), G, line_intersection(k, altitude(G, C, D)) we get 180 == 2 * direction(C, projection(B, i)) - 2 * direction(G, line_intersection(k, altitude(G, C, D))) mod 360
By orthocenter_concurrency on H, B, orthocenter(B, C, D) we get orthocenter(B, H, orthocenter(B, C, D)) in altitude(H, B, orthocenter(B, C, D)), orthocenter(B, H, orthocenter(B, C, D)) in altitude(B, H, orthocenter(B, C, D)), orthocenter(B, H, orthocenter(B, C, D)) in altitude(orthocenter(B, C, D), B, H)
By orthocenter_concurrency on orthocenter(B, C, D), B, G we get orthocenter(B, G, orthocenter(B, C, D)) in altitude(orthocenter(B, C, D), B, G), orthocenter(B, G, orthocenter(B, C, D)) in altitude(B, G, orthocenter(B, C, D)), orthocenter(B, G, orthocenter(B, C, D)) in altitude(G, B, orthocenter(B, C, D))
By perpendicular_direction_conditions_v0_r on projection(B, i), D, line_intersection(k, altitude(G, C, D)), G we get 180 == 2 * direction(projection(B, i), D) - 2 * direction(line_intersection(k, altitude(G, C, D)), G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(G, C, D)), G, projection(B, i), D we get 180 == 2 * direction(line_intersection(k, altitude(G, C, D)), G) - 2 * direction(projection(B, i), D) mod 360
By perpendicular_direction_conditions_v0_r on E, H, G, line_intersection(k, altitude(G, C, D)) we get 180 == 2 * direction(E, H) - 2 * direction(G, line_intersection(k, altitude(G, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(k, altitude(G, C, D)), projection(B, i), C we get 180 == 2 * direction(G, line_intersection(k, altitude(G, C, D))) - 2 * direction(projection(B, i), C) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(k, altitude(G, C, D)), H, line_intersection(k, altitude(B, C, D)) we get 180 == 2 * direction(G, line_intersection(k, altitude(G, C, D))) - 2 * direction(H, line_intersection(k, altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(G, C, D)), G, D, C we get 180 == 2 * direction(line_intersection(k, altitude(G, C, D)), G) - 2 * direction(D, C) mod 360
By perpendicular_angle_conditions_v0 on C, projection(B, i), orthocenter(B, C, D) we get angle(C, projection(B, i), orthocenter(B, C, D)) == orientation(C, projection(B, i), orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on H, line_intersection(k, altitude(B, C, D)), line_intersection(k, altitude(G, C, D)), G we get 180 == 2 * direction(H, line_intersection(k, altitude(B, C, D))) - 2 * direction(line_intersection(k, altitude(G, C, D)), G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(G, C, D)), G, D, projection(B, i) we get 180 == 2 * direction(line_intersection(k, altitude(G, C, D)), G) - 2 * direction(D, projection(B, i)) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(k, altitude(G, C, D)), projection(B, i), D we get 180 == 2 * direction(G, line_intersection(k, altitude(G, C, D))) - 2 * direction(projection(B, i), D) mod 360
By perpendicular_direction_conditions_v0_r on H, E, G, line_intersection(k, altitude(G, C, D)) we get 180 == 2 * direction(H, E) - 2 * direction(G, line_intersection(k, altitude(G, C, D))) mod 360
By in_imply_collinear on line_intersection(k, altitude(G, C, D)), line_intersection(k, altitude(B, C, D)), E we get collinear(E, line_intersection(k, altitude(B, C, D)), line_intersection(k, altitude(G, C, D)))
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), E, line_intersection(k, altitude(G, C, D)), G we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), E) - 2 * direction(line_intersection(k, altitude(G, C, D)), G) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(k, altitude(G, C, D)), C, projection(B, i) we get 180 == 2 * direction(G, line_intersection(k, altitude(G, C, D))) - 2 * direction(C, projection(B, i)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(G, C, D)), G, H, E we get 180 == 2 * direction(line_intersection(k, altitude(G, C, D)), G) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(G, C, D)), G, E, H we get 180 == 2 * direction(line_intersection(k, altitude(G, C, D)), G) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on C, D, line_intersection(k, altitude(G, C, D)), G we get 180 == 2 * direction(C, D) - 2 * direction(line_intersection(k, altitude(G, C, D)), G) mod 360
By perpendicular_direction_conditions_v0_r on H, E, line_intersection(k, altitude(G, C, D)), G we get 180 == 2 * direction(H, E) - 2 * direction(line_intersection(k, altitude(G, C, D)), G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(G, C, D)), G, projection(B, i), C we get 180 == 2 * direction(line_intersection(k, altitude(G, C, D)), G) - 2 * direction(projection(B, i), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(G, C, D)), G, line_intersection(k, altitude(B, C, D)), E we get 180 == 2 * direction(line_intersection(k, altitude(G, C, D)), G) - 2 * direction(line_intersection(k, altitude(B, C, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(G, C, D)), G, C, projection(B, i) we get 180 == 2 * direction(line_intersection(k, altitude(G, C, D)), G) - 2 * direction(C, projection(B, i)) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), D, G, line_intersection(k, altitude(G, C, D)) we get 180 == 2 * direction(projection(B, i), D) - 2 * direction(G, line_intersection(k, altitude(G, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on D, C, G, line_intersection(k, altitude(G, C, D)) we get 180 == 2 * direction(D, C) - 2 * direction(G, line_intersection(k, altitude(G, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on C, D, G, line_intersection(k, altitude(G, C, D)) we get 180 == 2 * direction(C, D) - 2 * direction(G, line_intersection(k, altitude(G, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(G, C, D)), G, C, D we get 180 == 2 * direction(line_intersection(k, altitude(G, C, D)), G) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), C, line_intersection(k, altitude(G, C, D)), G we get 180 == 2 * direction(projection(B, i), C) - 2 * direction(line_intersection(k, altitude(G, C, D)), G) mod 360
By perpendicular_direction_conditions_v0_r on D, projection(B, i), G, line_intersection(k, altitude(G, C, D)) we get 180 == 2 * direction(D, projection(B, i)) - 2 * direction(G, line_intersection(k, altitude(G, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on D, projection(B, i), line_intersection(k, altitude(G, C, D)), G we get 180 == 2 * direction(D, projection(B, i)) - 2 * direction(line_intersection(k, altitude(G, C, D)), G) mod 360
By perpendicular_direction_conditions_v0_r on projection(B, i), C, G, line_intersection(k, altitude(G, C, D)) we get 180 == 2 * direction(projection(B, i), C) - 2 * direction(G, line_intersection(k, altitude(G, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(k, altitude(G, C, D)), H, E we get 180 == 2 * direction(G, line_intersection(k, altitude(G, C, D))) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(G, C, D)), G, E, line_intersection(k, altitude(B, C, D)) we get 180 == 2 * direction(line_intersection(k, altitude(G, C, D)), G) - 2 * direction(E, line_intersection(k, altitude(B, C, D))) mod 360
By orthocenter_concurrency on D, orthocenter(B, C, D), G we get orthocenter(D, G, orthocenter(B, C, D)) in altitude(D, G, orthocenter(B, C, D)), orthocenter(D, G, orthocenter(B, C, D)) in altitude(orthocenter(B, C, D), D, G), orthocenter(D, G, orthocenter(B, C, D)) in altitude(G, D, orthocenter(B, C, D))
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), E, G, line_intersection(k, altitude(G, C, D)) we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), E) - 2 * direction(G, line_intersection(k, altitude(G, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(k, altitude(G, C, D)), D, projection(B, i) we get 180 == 2 * direction(G, line_intersection(k, altitude(G, C, D))) - 2 * direction(D, projection(B, i)) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(k, altitude(B, C, D)), G, line_intersection(k, altitude(G, C, D)) we get 180 == 2 * direction(E, line_intersection(k, altitude(B, C, D))) - 2 * direction(G, line_intersection(k, altitude(G, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(k, altitude(G, C, D)), line_intersection(k, altitude(B, C, D)), H we get 180 == 2 * direction(G, line_intersection(k, altitude(G, C, D))) - 2 * direction(line_intersection(k, altitude(B, C, D)), H) mod 360
By in_imply_collinear on line_circle_tangent_point(Line(D, E), Circle(E, G, H)), E, D we get collinear(D, E, line_circle_tangent_point(Line(D, E), Circle(E, G, H)))
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(B, C, D)), H, G, line_intersection(k, altitude(G, C, D)) we get 180 == 2 * direction(line_intersection(k, altitude(B, C, D)), H) - 2 * direction(G, line_intersection(k, altitude(G, C, D))) mod 360
By projection_definition on line_intersection(k, altitude(B, C, D)), E, Line(E, F) we get E == projection(line_intersection(k, altitude(B, C, D)), Line(E, F))
By perpendicular_direction_conditions_v0_r on D, C, line_intersection(k, altitude(G, C, D)), G we get 180 == 2 * direction(D, C) - 2 * direction(line_intersection(k, altitude(G, C, D)), G) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on line_intersection(k, altitude(B, C, D)), H, D we get not_collinear(D, H, line_intersection(k, altitude(B, C, D))), exists(Line(D, H))
By perpendicular_direction_conditions_v0_r on E, H, line_intersection(k, altitude(G, C, D)), G we get 180 == 2 * direction(E, H) - 2 * direction(line_intersection(k, altitude(G, C, D)), G) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(k, altitude(G, C, D)), D, C we get 180 == 2 * direction(G, line_intersection(k, altitude(G, C, D))) - 2 * direction(D, C) mod 360
By projection_definition on F, E, k we get E == projection(F, k)
By projection_definition on H, E, Line(E, F) we get E == projection(H, Line(E, F))
By perpendicular_direction_conditions_v0_r on G, line_intersection(k, altitude(G, C, D)), line_intersection(k, altitude(B, C, D)), E we get 180 == 2 * direction(G, line_intersection(k, altitude(G, C, D))) - 2 * direction(line_intersection(k, altitude(B, C, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(k, altitude(G, C, D)), G, H, line_intersection(k, altitude(B, C, D)) we get 180 == 2 * direction(line_intersection(k, altitude(G, C, D)), G) - 2 * direction(H, line_intersection(k, altitude(B, C, D))) mod 360
By in_imply_collinear on line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D), projection(B, i) we get collinear(projection(B, i), orthocenter(B, C, D), line_intersection(k, altitude(B, C, D)))
By in_imply_collinear on projection(E, i), projection(B, i), C we get collinear(C, projection(B, i), projection(E, i))
By not_in_line_equivalent_to_not_collinear_v0 on D, orthocenter(B, C, D), projection(B, i) we get not_collinear(D, projection(B, i), orthocenter(B, C, D)), exists(Line(projection(B, i), orthocenter(B, C, D)))
By not_in_line_equivalent_to_not_collinear_v0 on line_intersection(k, altitude(B, C, D)), E, D we get not_collinear(D, E, line_intersection(k, altitude(B, C, D))), exists(Line(D, E))
By in_imply_collinear on projection(E, i), projection(B, i), D we get collinear(D, projection(B, i), projection(E, i))
By reverse_orientation on projection(B, i), D, B we get orientation(B, projection(B, i), D) == 0 - orientation(B, D, projection(B, i)) mod 360
By double_perpendicular_and_parallel_v0 on altitude(G, C, D), k, Line(E, F) we get parallel(Line(E, F), altitude(G, C, D))
By in_imply_collinear on line_circle_tangent_point(Line(D, E), Circle(E, G, H)), orthocenter(B, C, D), E we get collinear(E, orthocenter(B, C, D), line_circle_tangent_point(Line(D, E), Circle(E, G, H)))
By in_imply_collinear on projection(G, i), projection(B, i), C we get collinear(C, projection(B, i), projection(G, i))
By in_imply_collinear on projection(G, i), D, projection(B, i) we get collinear(D, projection(B, i), projection(G, i))
By not_in_line_equivalent_to_not_collinear_v0 on projection(B, i), D, A we get not_collinear(A, D, projection(B, i)), exists(Line(A, D))
By in_imply_collinear on line_intersection(k, altitude(G, C, D)), H, line_intersection(k, altitude(B, C, D)) we get collinear(H, line_intersection(k, altitude(B, C, D)), line_intersection(k, altitude(G, C, D)))
By not_in_line_equivalent_to_not_collinear_v0 on G, D, projection(B, i) we get not_collinear(D, G, projection(B, i)), exists(Line(D, projection(B, i)))
By in_imply_collinear on line_circle_tangent_point(Line(D, E), Circle(E, G, H)), orthocenter(B, C, D), D we get collinear(D, orthocenter(B, C, D), line_circle_tangent_point(Line(D, E), Circle(E, G, H)))
By perpendicular_angle_conditions_v0 on B, line_intersection(k, altitude(B, C, D)), H we get angle(B, line_intersection(k, altitude(B, C, D)), H) == orientation(B, line_intersection(k, altitude(B, C, D)), H) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on projection(B, i), C, G we get not_collinear(C, G, projection(B, i)), exists(Line(C, G))
By not_in_line_equivalent_to_not_collinear_v0 on E, D, projection(B, i) we get not_collinear(D, E, projection(B, i)), exists(Line(D, projection(B, i)))
By reverse_orientation on B, projection(B, i), C we get orientation(B, projection(B, i), C) == 0 - orientation(B, C, projection(B, i)) mod 360
By tangent_point_is_unique on E, line_circle_tangent_point(Line(D, E), Circle(E, G, H)), Circle(E, G, H), Line(D, E) we get E == line_circle_tangent_point(Line(D, E), Circle(E, G, H))
By not_in_line_equivalent_to_not_collinear_v0 on E, C, projection(B, i) we get not_collinear(C, E, projection(B, i)), exists(Line(C, projection(B, i)))
By perpendicular_angle_conditions_v0 on B, projection(B, i), C we get angle(B, projection(B, i), C) == orientation(B, projection(B, i), C) mod 360
By perpendicular_angle_conditions_v0 on line_intersection(k, altitude(B, C, D)), E, projection(E, i) we get angle(line_intersection(k, altitude(B, C, D)), E, projection(E, i)) == orientation(E, projection(E, i), line_intersection(k, altitude(B, C, D))) mod 360
By double_perpendicular_and_parallel_v0 on altitude(E, C, D), k, Line(E, F) we get parallel(Line(E, F), altitude(E, C, D))
By not_in_line_equivalent_to_not_collinear_v0 on projection(B, i), G, F we get not_collinear(F, G, projection(B, i)), exists(Line(F, G))
By perpendicular_angle_conditions_v0 on orthocenter(B, C, D), projection(B, i), C we get angle(orthocenter(B, C, D), projection(B, i), C) == orientation(C, orthocenter(B, C, D), projection(B, i)) mod 360
By reverse_direction on projection(G, Line(C, F)), G we get 180 == direction(projection(G, Line(C, F)), G) - direction(G, projection(G, Line(C, F))) mod 360
By reverse_direction on D, projection(B, i) we get 180 == direction(D, projection(B, i)) - direction(projection(B, i), D) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(B, C, D), C, projection(B, i) we get not_collinear(C, projection(B, i), orthocenter(B, C, D)), exists(Line(C, projection(B, i)))
By reverse_direction on orthocenter(B, C, D), projection(B, i) we get 180 == direction(orthocenter(B, C, D), projection(B, i)) - direction(projection(B, i), orthocenter(B, C, D)) mod 360
By perpendicular_angle_conditions_v0 on orthocenter(B, C, D), projection(B, i), D we get angle(orthocenter(B, C, D), projection(B, i), D) == orientation(D, orthocenter(B, C, D), projection(B, i)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on F, B, line_intersection(k, altitude(B, C, D)) we get not_collinear(B, F, line_intersection(k, altitude(B, C, D))), exists(Line(B, line_intersection(k, altitude(B, C, D))))
By perpendicular_angle_conditions_v0 on F, E, line_intersection(k, altitude(B, C, D)) we get angle(F, E, line_intersection(k, altitude(B, C, D))) == orientation(E, line_intersection(k, altitude(B, C, D)), F) mod 360
By reverse_direction on projection(G, Line(B, H)), G we get 180 == direction(projection(G, Line(B, H)), G) - direction(G, projection(G, Line(B, H))) mod 360
By reverse_direction on C, projection(B, i) we get 180 == direction(C, projection(B, i)) - direction(projection(B, i), C) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on H, line_intersection(k, altitude(B, C, D)), B we get not_collinear(B, H, line_intersection(k, altitude(B, C, D))), exists(Line(B, line_intersection(k, altitude(B, C, D))))
By perpendicular_angle_conditions_v0 on orthocenter(B, C, D), line_intersection(k, altitude(B, C, D)), E we get angle(orthocenter(B, C, D), line_intersection(k, altitude(B, C, D)), E) == orientation(E, orthocenter(B, C, D), line_intersection(k, altitude(B, C, D))) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on F, orthocenter(B, C, D), projection(B, i) we get not_collinear(F, projection(B, i), orthocenter(B, C, D)), exists(Line(projection(B, i), orthocenter(B, C, D)))
By not_in_line_equivalent_to_not_collinear_v0 on D, line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D) we get not_collinear(D, orthocenter(B, C, D), line_intersection(k, altitude(B, C, D))), exists(Line(orthocenter(B, C, D), line_intersection(k, altitude(B, C, D))))
By reverse_orientation on C, projection(B, i), B we get orientation(B, C, projection(B, i)) == 0 - orientation(B, projection(B, i), C) mod 360
By reverse_orientation on projection(B, i), B, D we get orientation(B, D, projection(B, i)) == 0 - orientation(B, projection(B, i), D) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on line_intersection(k, altitude(B, C, D)), G, E we get not_collinear(E, G, line_intersection(k, altitude(B, C, D))), exists(Line(E, G))
By perpendicular_angle_conditions_v0 on B, projection(B, i), D we get angle(B, projection(B, i), D) == orientation(B, projection(B, i), D) mod 360
By perpendicular_angle_conditions_v0 on E, line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D) we get angle(E, line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D)) == orientation(E, line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D), E we get not_collinear(E, orthocenter(B, C, D), line_intersection(k, altitude(B, C, D))), exists(Line(E, orthocenter(B, C, D)))
By in_imply_concyclic on G, H, E, line_circle_tangent_point(Line(D, E), Circle(E, G, H)) we get concyclic(E, G, H, line_circle_tangent_point(Line(D, E), Circle(E, G, H)))
By reverse_direction on projection(F, g), F we get 180 == direction(projection(F, g), F) - direction(F, projection(F, g)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on projection(B, i), A, C we get not_collinear(A, C, projection(B, i)), exists(Line(A, C))
By not_in_line_equivalent_to_not_collinear_v0 on line_intersection(k, altitude(B, C, D)), H, F we get not_collinear(F, H, line_intersection(k, altitude(B, C, D))), exists(Line(F, H))
By not_in_line_equivalent_to_not_collinear_v0 on G, orthocenter(B, C, D), line_intersection(k, altitude(B, C, D)) we get not_collinear(G, orthocenter(B, C, D), line_intersection(k, altitude(B, C, D))), exists(Line(orthocenter(B, C, D), line_intersection(k, altitude(B, C, D))))
By reverse_direction on projection(B, i), B we get 180 == direction(projection(B, i), B) - direction(B, projection(B, i)) mod 360
By perpendicular_angle_conditions_v0 on D, projection(B, i), B we get angle(D, projection(B, i), B) == orientation(B, D, projection(B, i)) mod 360
By internal_angle_bisector_definition_v0 on A, projection(B, i), B, C we get angle(A, C, projection(B, i)) == angle(projection(B, i), C, B) mod 360
By perpendicular_angle_conditions_v0 on line_intersection(k, altitude(B, C, D)), E, F we get angle(line_intersection(k, altitude(B, C, D)), E, F) == orientation(E, F, line_intersection(k, altitude(B, C, D))) mod 360
By reverse_direction on orthocenter(B, C, D), line_intersection(k, altitude(B, C, D)) we get 180 == direction(orthocenter(B, C, D), line_intersection(k, altitude(B, C, D))) - direction(line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D)) mod 360
By reverse_direction on line_intersection(k, altitude(B, C, D)), H we get 180 == direction(line_intersection(k, altitude(B, C, D)), H) - direction(H, line_intersection(k, altitude(B, C, D))) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on H, orthocenter(B, C, D), line_intersection(k, altitude(B, C, D)) we get not_collinear(H, orthocenter(B, C, D), line_intersection(k, altitude(B, C, D))), exists(Line(orthocenter(B, C, D), line_intersection(k, altitude(B, C, D))))
By reverse_orientation on G, B, projection(B, i) we get orientation(B, projection(B, i), G) == 0 - orientation(B, G, projection(B, i)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on E, orthocenter(B, C, D), projection(B, i) we get not_collinear(E, projection(B, i), orthocenter(B, C, D)), exists(Line(projection(B, i), orthocenter(B, C, D)))
By line_containment_inequality on projection(G, Line(D, H)), projection(B, i), Line(D, H) we get projection(B, i) != projection(G, Line(D, H))
By line_containment_inequality on line_circle_tangent_point(Line(D, E), Circle(E, G, H)), C, Line(D, E) we get C != line_circle_tangent_point(Line(D, E), Circle(E, G, H))
By reverse_orientation on E, B, projection(B, i) we get orientation(B, projection(B, i), E) == 0 - orientation(B, E, projection(B, i)) mod 360
By reverse_direction on projection(E, i), E we get 180 == direction(projection(E, i), E) - direction(E, projection(E, i)) mod 360
By internal_angle_bisector_definition_v0 on E, projection(B, i), A, C we get angle(E, C, projection(B, i)) == angle(projection(B, i), C, A) mod 360
By reverse_direction on E, projection(E, i) we get 180 == direction(E, projection(E, i)) - direction(projection(E, i), E) mod 360
By reverse_direction on E, projection(E, h) we get 180 == direction(E, projection(E, h)) - direction(projection(E, h), E) mod 360
By reverse_direction on G, projection(G, i) we get 180 == direction(G, projection(G, i)) - direction(projection(G, i), G) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on projection(B, i), orthocenter(B, C, D), H we get not_collinear(H, projection(B, i), orthocenter(B, C, D)), exists(Line(H, orthocenter(B, C, D)))
By not_in_line_equivalent_to_not_collinear_v0 on projection(B, i), G, orthocenter(B, C, D) we get not_collinear(G, projection(B, i), orthocenter(B, C, D)), exists(Line(G, orthocenter(B, C, D)))
By not_in_line_equivalent_to_not_collinear_v0 on line_intersection(k, altitude(B, C, D)), D, G we get not_collinear(D, G, line_intersection(k, altitude(B, C, D))), exists(Line(D, G))
By perpendicular_angle_conditions_v0 on H, line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D) we get angle(H, line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D)) == orientation(H, line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D)) mod 360
By reverse_direction on projection(B, i), C we get 180 == direction(projection(B, i), C) - direction(C, projection(B, i)) mod 360
By internal_angle_bisector_definition_v0 on B, projection(B, i), A, C we get angle(B, C, projection(B, i)) == angle(projection(B, i), C, A) mod 360
By reverse_orientation on B, E, projection(B, i) we get orientation(B, E, projection(B, i)) == 0 - orientation(B, projection(B, i), E) mod 360
By reverse_direction on F, projection(F, Line(A, G)) we get 180 == direction(F, projection(F, Line(A, G))) - direction(projection(F, Line(A, G)), F) mod 360
By perpendicular_angle_conditions_v0 on D, projection(B, i), orthocenter(B, C, D) we get angle(D, projection(B, i), orthocenter(B, C, D)) == orientation(D, projection(B, i), orthocenter(B, C, D)) mod 360
By reverse_direction on E, line_intersection(k, altitude(B, C, D)) we get 180 == direction(E, line_intersection(k, altitude(B, C, D))) - direction(line_intersection(k, altitude(B, C, D)), E) mod 360
By reverse_direction on line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D) we get 180 == direction(line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D)) - direction(orthocenter(B, C, D), line_intersection(k, altitude(B, C, D))) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on F, projection(B, i), B we get not_collinear(B, F, projection(B, i)), exists(Line(B, projection(B, i)))
By reverse_direction on projection(B, i), orthocenter(B, C, D) we get 180 == direction(projection(B, i), orthocenter(B, C, D)) - direction(orthocenter(B, C, D), projection(B, i)) mod 360
By line_containment_inequality on projection(G, Line(D, H)), line_intersection(k, altitude(B, C, D)), Line(D, H) we get projection(G, Line(D, H)) != line_intersection(k, altitude(B, C, D))
By reverse_orientation on projection(B, i), B, G we get orientation(B, G, projection(B, i)) == 0 - orientation(B, projection(B, i), G) mod 360
By perpendicular_angle_conditions_v0 on projection(E, i), E, line_intersection(k, altitude(B, C, D)) we get angle(projection(E, i), E, line_intersection(k, altitude(B, C, D))) == orientation(E, line_intersection(k, altitude(B, C, D)), projection(E, i)) mod 360
By reverse_direction on H, line_intersection(k, altitude(B, C, D)) we get 180 == direction(H, line_intersection(k, altitude(B, C, D))) - direction(line_intersection(k, altitude(B, C, D)), H) mod 360
By reverse_direction on F, projection(F, Line(A, B)) we get 180 == direction(F, projection(F, Line(A, B))) - direction(projection(F, Line(A, B)), F) mod 360
By perpendicular_angle_conditions_v0 on orthocenter(B, C, D), line_intersection(k, altitude(B, C, D)), H we get angle(orthocenter(B, C, D), line_intersection(k, altitude(B, C, D)), H) == orientation(H, orthocenter(B, C, D), line_intersection(k, altitude(B, C, D))) mod 360
By line_containment_inequality on projection(G, f), line_intersection(k, altitude(B, C, D)), f we get projection(G, f) != line_intersection(k, altitude(B, C, D))
By reverse_direction on projection(B, i), D we get 180 == direction(projection(B, i), D) - direction(D, projection(B, i)) mod 360
By perpendicular_angle_conditions_v0 on E, line_intersection(k, altitude(B, C, D)), B we get angle(E, line_intersection(k, altitude(B, C, D)), B) == orientation(B, E, line_intersection(k, altitude(B, C, D))) mod 360
By perpendicular_angle_conditions_v0 on H, E, F we get angle(H, E, F) == orientation(E, F, H) mod 360
By reverse_direction on projection(G, f), G we get 180 == direction(projection(G, f), G) - direction(G, projection(G, f)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on F, D, projection(B, i) we get not_collinear(D, F, projection(B, i)), exists(Line(D, projection(B, i)))
By collinear_definition on B, line_intersection(k, altitude(B, C, D)), projection(B, i) we get line_intersection(k, altitude(B, C, D)) in Line(B, projection(B, i)), projection(B, i) in Line(B, line_intersection(k, altitude(B, C, D))), Line(B, projection(B, i)) == Line(B, line_intersection(k, altitude(B, C, D))), 0 == 2 * angle(line_intersection(k, altitude(B, C, D)), B, projection(B, i)) mod 360
By altitude_definition on E, D, C, Line(E, F) we get Line(E, F) == altitude(E, C, D)
By double_perpendicular_and_parallel_v0 on altitude(B, C, D), k, Line(E, F) we get parallel(Line(E, F), altitude(B, C, D))
By collinear_definition on B, projection(B, i), line_intersection(k, altitude(B, C, D)) we get projection(B, i) in Line(B, line_intersection(k, altitude(B, C, D))), line_intersection(k, altitude(B, C, D)) in Line(B, projection(B, i)), Line(B, projection(B, i)) == Line(B, line_intersection(k, altitude(B, C, D))), 0 == 2 * angle(projection(B, i), B, line_intersection(k, altitude(B, C, D))) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on projection(B, i), H, D we get not_collinear(D, H, projection(B, i)), exists(Line(D, H))
By not_in_line_equivalent_to_not_collinear_v0 on C, B, line_intersection(k, altitude(B, C, D)) we get not_collinear(B, C, line_intersection(k, altitude(B, C, D))), exists(Line(B, line_intersection(k, altitude(B, C, D))))
By not_in_line_equivalent_to_not_collinear_v0 on line_intersection(k, altitude(B, C, D)), B, G we get not_collinear(B, G, line_intersection(k, altitude(B, C, D))), exists(Line(B, G))
By not_in_line_equivalent_to_not_collinear_v0 on D, B, line_intersection(k, altitude(B, C, D)) we get not_collinear(B, D, line_intersection(k, altitude(B, C, D))), exists(Line(B, line_intersection(k, altitude(B, C, D))))
By reverse_direction on projection(G, Line(F, H)), G we get 180 == direction(projection(G, Line(F, H)), G) - direction(G, projection(G, Line(F, H))) mod 360
By perpendicular_angle_conditions_v0 on B, line_intersection(k, altitude(B, C, D)), E we get angle(B, line_intersection(k, altitude(B, C, D)), E) == orientation(B, line_intersection(k, altitude(B, C, D)), E) mod 360
By reverse_direction on G, projection(G, Line(C, F)) we get 180 == direction(G, projection(G, Line(C, F))) - direction(projection(G, Line(C, F)), G) mod 360
By reverse_direction on F, projection(F, g) we get 180 == direction(F, projection(F, g)) - direction(projection(F, g), F) mod 360
By perpendicular_angle_conditions_v0 on H, line_intersection(k, altitude(B, C, D)), B we get angle(H, line_intersection(k, altitude(B, C, D)), B) == orientation(B, H, line_intersection(k, altitude(B, C, D))) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on line_intersection(k, altitude(B, C, D)), B, E we get not_collinear(B, E, line_intersection(k, altitude(B, C, D))), exists(Line(B, E))
By reverse_direction on projection(F, Line(A, G)), F we get 180 == direction(projection(F, Line(A, G)), F) - direction(F, projection(F, Line(A, G))) mod 360
By reverse_direction on G, projection(G, Line(F, H)) we get 180 == direction(G, projection(G, Line(F, H))) - direction(projection(G, Line(F, H)), G) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on A, H, line_intersection(k, altitude(B, C, D)) we get not_collinear(A, H, line_intersection(k, altitude(B, C, D))), exists(Line(H, line_intersection(k, altitude(B, C, D))))
By reverse_direction on projection(E, h), E we get 180 == direction(projection(E, h), E) - direction(E, projection(E, h)) mod 360
By reverse_direction on G, projection(G, Line(D, H)) we get 180 == direction(G, projection(G, Line(D, H))) - direction(projection(G, Line(D, H)), G) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on line_intersection(k, altitude(B, C, D)), E, C we get not_collinear(C, E, line_intersection(k, altitude(B, C, D))), exists(Line(C, E))
By reverse_direction on line_intersection(k, altitude(B, C, D)), B we get 180 == direction(line_intersection(k, altitude(B, C, D)), B) - direction(B, line_intersection(k, altitude(B, C, D))) mod 360
By internal_angle_bisector_definition_v0 on A, projection(B, i), E, C we get angle(A, C, projection(B, i)) == angle(projection(B, i), C, E) mod 360
By reverse_direction on projection(G, Line(D, H)), G we get 180 == direction(projection(G, Line(D, H)), G) - direction(G, projection(G, Line(D, H))) mod 360
By reverse_direction on projection(G, i), G we get 180 == direction(projection(G, i), G) - direction(G, projection(G, i)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on line_intersection(k, altitude(B, C, D)), C, G we get not_collinear(C, G, line_intersection(k, altitude(B, C, D))), exists(Line(C, G))
By reverse_direction on B, projection(B, i) we get 180 == direction(B, projection(B, i)) - direction(projection(B, i), B) mod 360
By reverse_direction on G, projection(G, f) we get 180 == direction(G, projection(G, f)) - direction(projection(G, f), G) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on H, C, projection(B, i) we get not_collinear(C, H, projection(B, i)), exists(Line(C, projection(B, i)))
By perpendicular_angle_conditions_v0 on C, projection(B, i), B we get angle(C, projection(B, i), B) == orientation(B, C, projection(B, i)) mod 360
By perpendicular_angle_conditions_v0 on F, E, H we get angle(F, E, H) == orientation(E, H, F) mod 360
By reverse_direction on line_intersection(k, altitude(B, C, D)), E we get 180 == direction(line_intersection(k, altitude(B, C, D)), E) - direction(E, line_intersection(k, altitude(B, C, D))) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on F, line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D) we get not_collinear(F, orthocenter(B, C, D), line_intersection(k, altitude(B, C, D))), exists(Line(orthocenter(B, C, D), line_intersection(k, altitude(B, C, D))))
By reverse_direction on B, line_intersection(k, altitude(B, C, D)) we get 180 == direction(B, line_intersection(k, altitude(B, C, D))) - direction(line_intersection(k, altitude(B, C, D)), B) mod 360
By reverse_direction on projection(F, Line(A, B)), F we get 180 == direction(projection(F, Line(A, B)), F) - direction(F, projection(F, Line(A, B))) mod 360
By reverse_direction on G, projection(G, Line(B, H)) we get 180 == direction(G, projection(G, Line(B, H))) - direction(projection(G, Line(B, H)), G) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on line_intersection(k, altitude(B, C, D)), F, G we get not_collinear(F, G, line_intersection(k, altitude(B, C, D))), exists(Line(F, G))
By not_in_line_equivalent_to_not_collinear_v0 on projection(B, i), C, F we get not_collinear(C, F, projection(B, i)), exists(Line(C, F))
By not_in_line_equivalent_to_not_collinear_v0 on C, line_intersection(k, altitude(B, C, D)), H we get not_collinear(C, H, line_intersection(k, altitude(B, C, D))), exists(Line(H, line_intersection(k, altitude(B, C, D))))
By not_in_line_equivalent_to_not_collinear_v0 on G, line_intersection(k, altitude(B, C, D)), H we get not_collinear(G, H, line_intersection(k, altitude(B, C, D))), exists(Line(H, line_intersection(k, altitude(B, C, D))))
By not_in_line_equivalent_to_not_collinear_v0 on projection(B, i), G, H we get not_collinear(G, H, projection(B, i)), exists(Line(G, H))
By line_inequality on altitude(F, A, D), altitude(B, C, D), F we get altitude(B, C, D) != altitude(F, A, D)
By not_in_line_equivalent_to_not_collinear_v0 on F, E, line_intersection(k, altitude(B, C, D)) we get not_collinear(E, F, line_intersection(k, altitude(B, C, D))), exists(Line(E, line_intersection(k, altitude(B, C, D))))
By line_inequality on altitude(B, E, G), Line(E, F), B we get Line(E, F) != altitude(B, E, G)
By not_in_line_equivalent_to_not_collinear_v0 on line_intersection(k, altitude(B, C, D)), F, D we get not_collinear(D, F, line_intersection(k, altitude(B, C, D))), exists(Line(D, F))
By line_containment_inequality on projection(E, h), projection(B, i), h we get projection(B, i) != projection(E, h)
By not_in_line_equivalent_to_not_collinear_v0 on C, line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D) we get not_collinear(C, orthocenter(B, C, D), line_intersection(k, altitude(B, C, D))), exists(Line(orthocenter(B, C, D), line_intersection(k, altitude(B, C, D))))
By line_inequality on altitude(G, F, H), Line(E, F), G we get Line(E, F) != altitude(G, F, H)
By line_inequality on altitude(G, C, D), Line(E, F), G we get Line(E, F) != altitude(G, C, D)
By line_inequality on altitude(G, C, F), Line(E, F), G we get Line(E, F) != altitude(G, C, F)
By not_in_line_equivalent_to_not_collinear_v0 on A, E, line_intersection(k, altitude(B, C, D)) we get not_collinear(A, E, line_intersection(k, altitude(B, C, D))), exists(Line(E, line_intersection(k, altitude(B, C, D))))
By line_containment_inequality on line_intersection(Line(E, G), altitude(B, E, G)), line_intersection(k, altitude(B, C, D)), Line(E, G) we get line_intersection(k, altitude(B, C, D)) != line_intersection(Line(E, G), altitude(B, E, G))
By line_containment_inequality on projection(F, g), projection(B, i), g we get projection(B, i) != projection(F, g)
By line_containment_inequality on line_intersection(Line(E, G), altitude(B, E, G)), orthocenter(B, C, D), Line(E, G) we get orthocenter(B, C, D) != line_intersection(Line(E, G), altitude(B, E, G))
By line_containment_inequality on line_circle_tangent_point(Line(D, E), Circle(E, G, H)), F, Line(D, E) we get F != line_circle_tangent_point(Line(D, E), Circle(E, G, H))
By line_containment_inequality on line_circle_tangent_point(Line(D, E), Circle(E, G, H)), H, Line(D, E) we get H != line_circle_tangent_point(Line(D, E), Circle(E, G, H))
By line_containment_inequality on projection(E, h), line_intersection(k, altitude(B, C, D)), h we get projection(E, h) != line_intersection(k, altitude(B, C, D))
By line_containment_inequality on line_circle_tangent_point(Line(D, E), Circle(E, G, H)), G, Line(D, E) we get G != line_circle_tangent_point(Line(D, E), Circle(E, G, H))
By line_inequality on altitude(G, D, H), Line(E, F), G we get Line(E, F) != altitude(G, D, H)
By line_containment_inequality on line_circle_tangent_point(Line(D, E), Circle(E, G, H)), A, Line(D, E) we get A != line_circle_tangent_point(Line(D, E), Circle(E, G, H))
By line_containment_inequality on line_circle_tangent_point(Line(D, E), Circle(E, G, H)), B, Line(D, E) we get B != line_circle_tangent_point(Line(D, E), Circle(E, G, H))
By line_circle_intersection_has_at_most_two_points_0 on G, F, B, Circle(E, F, G) we get B not in Circle(E, F, G)
By line_containment_inequality on projection(G, f), projection(B, i), f we get projection(B, i) != projection(G, f)
By line_containment_inequality on line_circle_tangent_point(Line(D, E), Circle(E, G, H)), projection(B, i), Line(D, E) we get projection(B, i) != line_circle_tangent_point(Line(D, E), Circle(E, G, H))
By line_circle_intersection_has_at_most_two_points_0 on F, G, D, Circle(E, F, G) we get D not in Circle(E, F, G)
By line_inequality on altitude(G, B, H), Line(E, F), G we get Line(E, F) != altitude(G, B, H)
By line_containment_inequality on projection(G, Line(B, H)), line_intersection(k, altitude(B, C, D)), Line(B, H) we get projection(G, Line(B, H)) != line_intersection(k, altitude(B, C, D))
By line_inequality on altitude(G, B, C), Line(E, F), G we get Line(E, F) != altitude(G, B, C)
By line_inequality on altitude(F, A, B), altitude(B, C, D), F we get altitude(B, C, D) != altitude(F, A, B)
By line_containment_inequality on projection(G, Line(F, H)), line_intersection(k, altitude(B, C, D)), Line(F, H) we get projection(G, Line(F, H)) != line_intersection(k, altitude(B, C, D))
By line_containment_inequality on projection(G, Line(C, F)), projection(B, i), Line(C, F) we get projection(B, i) != projection(G, Line(C, F))
By line_containment_inequality on projection(G, Line(B, H)), projection(B, i), Line(B, H) we get projection(B, i) != projection(G, Line(B, H))
By line_inequality on altitude(F, A, G), altitude(B, C, D), F we get altitude(B, C, D) != altitude(F, A, G)
By line_containment_inequality on line_circle_tangent_point(Line(D, E), Circle(E, G, H)), line_intersection(k, altitude(B, C, D)), Line(D, E) we get line_intersection(k, altitude(B, C, D)) != line_circle_tangent_point(Line(D, E), Circle(E, G, H))
By external_angle_bisector_definition_v0_r on H, projection(E, i), H, E we get Line(E, projection(E, i)) == external_angle_bisector(H, E, H)
By collinear_definition on G, projection(G, i), line_intersection(k, altitude(G, C, D)) we get projection(G, i) in Line(G, line_intersection(k, altitude(G, C, D))), line_intersection(k, altitude(G, C, D)) in Line(G, projection(G, i)), Line(G, projection(G, i)) == Line(G, line_intersection(k, altitude(G, C, D))), 0 == 2 * angle(projection(G, i), G, line_intersection(k, altitude(G, C, D))) mod 360
By internal_angle_bisector_definition_v0_r on orthocenter(B, C, D), B, orthocenter(B, C, D), projection(B, i) we get Line(B, projection(B, i)) == internal_angle_bisector(orthocenter(B, C, D), projection(B, i), orthocenter(B, C, D))
By perpendicular_lines_draw_intersection on Line(E, F), k we get exists(line_intersection(k, Line(E, F)))
By internal_angle_bisector_definition_v0_r on E, line_intersection(k, altitude(B, C, D)), E, H we get internal_angle_bisector(E, H, E) == Line(H, line_intersection(k, altitude(B, C, D)))
By internal_angle_bisector_definition_v0_r on C, D, C, projection(B, i) we get Line(D, projection(B, i)) == internal_angle_bisector(C, projection(B, i), C)
By power_of_a_point_on_circle on F, Circle(E, F, G) we get 0 == power_of_a_point(F, Circle(E, F, G))
By power_of_a_point_in_circle on line_circle_tangent_point(Line(D, E), Circle(E, G, H)), Circle(E, G, H) we get 0 == power_of_a_point(line_circle_tangent_point(Line(D, E), Circle(E, G, H)), Circle(E, G, H))
By external_angle_bisector_definition_v0_r on projection(E, i), H, projection(E, i), E we get Line(E, H) == external_angle_bisector(projection(E, i), E, projection(E, i))
By internal_angle_bisector_definition_v0_r on B, projection(B, i), B, orthocenter(B, C, D) we get Line(projection(B, i), orthocenter(B, C, D)) == internal_angle_bisector(B, orthocenter(B, C, D), B)
By power_of_a_point_on_circle on E, Circle(E, F, G) we get 0 == power_of_a_point(E, Circle(E, F, G))
By internal_angle_bisector_definition_v0_r on C, projection(B, i), C, D we get Line(D, projection(B, i)) == internal_angle_bisector(C, D, C)
By internal_angle_bisector_definition_v0_r on orthocenter(B, C, D), projection(B, i), orthocenter(B, C, D), B we get Line(B, projection(B, i)) == internal_angle_bisector(orthocenter(B, C, D), B, orthocenter(B, C, D))
By internal_angle_bisector_definition_v0_r on B, line_intersection(k, altitude(B, C, D)), B, orthocenter(B, C, D) we get internal_angle_bisector(B, orthocenter(B, C, D), B) == Line(orthocenter(B, C, D), line_intersection(k, altitude(B, C, D)))
By power_of_a_point_on_circle on G, Circle(E, F, G) we get 0 == power_of_a_point(G, Circle(E, F, G))
By internal_angle_bisector_definition_v0_r on orthocenter(B, C, D), B, orthocenter(B, C, D), line_intersection(k, altitude(B, C, D)) we get Line(B, line_intersection(k, altitude(B, C, D))) == internal_angle_bisector(orthocenter(B, C, D), line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D))
By internal_angle_bisector_definition_v0_r on line_intersection(k, altitude(B, C, D)), H, line_intersection(k, altitude(B, C, D)), E we get Line(E, H) == internal_angle_bisector(line_intersection(k, altitude(B, C, D)), E, line_intersection(k, altitude(B, C, D)))
By internal_angle_bisector_definition_v0_r on line_intersection(k, altitude(B, C, D)), E, line_intersection(k, altitude(B, C, D)), H we get Line(E, H) == internal_angle_bisector(line_intersection(k, altitude(B, C, D)), H, line_intersection(k, altitude(B, C, D)))
By power_of_a_point_definition on orthocenter(B, C, D), G, H, Circle(E, G, H) we get log(power_of_a_point(orthocenter(B, C, D), Circle(E, G, H))) == log(distance(G, orthocenter(B, C, D))) + log(distance(H, orthocenter(B, C, D)))
By internal_angle_bisector_definition_v0_r on projection(B, i), D, projection(B, i), C we get Line(C, D) == internal_angle_bisector(projection(B, i), C, projection(B, i))
By internal_angle_bisector_definition_v0_r on projection(B, i), C, projection(B, i), D we get Line(C, D) == internal_angle_bisector(projection(B, i), D, projection(B, i))
By internal_angle_bisector_definition_v0_r on B, orthocenter(B, C, D), B, projection(B, i) we get Line(projection(B, i), orthocenter(B, C, D)) == internal_angle_bisector(B, projection(B, i), B)
By internal_angle_bisector_definition_v0_r on H, E, H, line_intersection(k, altitude(B, C, D)) we get Line(E, line_intersection(k, altitude(B, C, D))) == internal_angle_bisector(H, line_intersection(k, altitude(B, C, D)), H)
By internal_angle_bisector_definition_v0_r on projection(B, i), orthocenter(B, C, D), projection(B, i), B we get Line(B, orthocenter(B, C, D)) == internal_angle_bisector(projection(B, i), B, projection(B, i))
By internal_angle_bisector_definition_v0_r on H, line_intersection(k, altitude(B, C, D)), H, E we get internal_angle_bisector(H, E, H) == Line(E, line_intersection(k, altitude(B, C, D)))
By internal_angle_bisector_definition_v0_r on D, projection(B, i), D, C we get Line(C, projection(B, i)) == internal_angle_bisector(D, C, D)
By internal_angle_bisector_definition_v0_r on line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D), line_intersection(k, altitude(B, C, D)), B we get Line(B, orthocenter(B, C, D)) == internal_angle_bisector(line_intersection(k, altitude(B, C, D)), B, line_intersection(k, altitude(B, C, D)))
By internal_angle_bisector_definition_v0_r on projection(B, i), B, projection(B, i), orthocenter(B, C, D) we get Line(B, orthocenter(B, C, D)) == internal_angle_bisector(projection(B, i), orthocenter(B, C, D), projection(B, i))
By internal_angle_bisector_definition_v0_r on E, H, E, line_intersection(k, altitude(B, C, D)) we get Line(H, line_intersection(k, altitude(B, C, D))) == internal_angle_bisector(E, line_intersection(k, altitude(B, C, D)), E)
By internal_angle_bisector_definition_v0_r on line_intersection(k, altitude(B, C, D)), B, line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D) we get Line(B, orthocenter(B, C, D)) == internal_angle_bisector(line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D), line_intersection(k, altitude(B, C, D)))
By internal_angle_bisector_definition_v0_r on D, C, D, projection(B, i) we get Line(C, projection(B, i)) == internal_angle_bisector(D, projection(B, i), D)
By internal_angle_bisector_definition_v0_r on orthocenter(B, C, D), line_intersection(k, altitude(B, C, D)), orthocenter(B, C, D), B we get Line(B, line_intersection(k, altitude(B, C, D))) == internal_angle_bisector(orthocenter(B, C, D), B, orthocenter(B, C, D))
By internal_angle_bisector_definition_v0_r on B, orthocenter(B, C, D), B, line_intersection(k, altitude(B, C, D)) we get Line(orthocenter(B, C, D), line_intersection(k, altitude(B, C, D))) == internal_angle_bisector(B, line_intersection(k, altitude(B, C, D)), B)
By collinear_definition on G, line_intersection(k, altitude(G, C, D)), projection(G, i) we get line_intersection(k, altitude(G, C, D)) in Line(G, projection(G, i)), projection(G, i) in Line(G, line_intersection(k, altitude(G, C, D))), Line(G, projection(G, i)) == Line(G, line_intersection(k, altitude(G, C, D))), 0 == 2 * angle(line_intersection(k, altitude(G, C, D)), G, projection(G, i)) mod 360
By perpendicular_lines_draw_intersection on Line(E, F), i we get exists(line_intersection(i, Line(E, F)))
By draw_point_of_tangency on Line(D, E), Circle(E, F, G) we get exists(line_circle_tangent_point(Line(D, E), Circle(E, F, G)))
By altitude_definition on B, D, projection(B, i), altitude(B, C, D) we get altitude(B, C, D) == altitude(B, D, projection(B, i))
By altitude_definition on B, projection(B, i), C, altitude(B, C, D) we get altitude(B, C, D) == altitude(B, C, projection(B, i))
By altitude_definition on C, F, E, i we get i == altitude(C, E, F)
By altitude_definition on D, projection(B, i), B, i we get i == altitude(D, B, projection(B, i))
By altitude_definition on H, E, F, k we get k == altitude(H, E, F)
By power_of_a_point_tangent on orthocenter(B, C, D), E, Circle(E, F, G) we get 2 * log(distance(E, orthocenter(B, C, D))) == log(power_of_a_point(orthocenter(B, C, D), Circle(E, F, G)))
By altitude_definition on F, E, H, Line(E, F) we get Line(E, F) == altitude(F, E, H)
By altitude_definition on H, projection(B, i), B, k we get k == altitude(H, B, projection(B, i))
By altitude_definition on D, E, F, i we get i == altitude(D, E, F)
By altitude_definition on E, B, projection(B, i), k we get k == altitude(E, B, projection(B, i))
By altitude_definition on C, projection(B, i), B, i we get i == altitude(C, B, projection(B, i))
By altitude_definition on F, D, C, Line(E, F) we get Line(E, F) == altitude(F, C, D)
By power_of_a_point_definition on C, G, H, Circle(E, G, H) we get log(distance(C, G)) + log(distance(C, H)) == log(power_of_a_point(C, Circle(E, G, H)))
By power_of_a_point_tangent on D, E, Circle(E, F, G) we get 2 * log(distance(D, E)) == log(power_of_a_point(D, Circle(E, F, G)))
By power_of_a_point_definition on projection(B, i), D, C, Circle(C, D, E) we get log(power_of_a_point(projection(B, i), Circle(C, D, E))) == log(distance(D, projection(B, i))) + log(distance(C, projection(B, i)))
By power_of_a_point_definition on line_intersection(k, altitude(B, C, D)), E, H, Circle(E, G, H) we get log(power_of_a_point(line_intersection(k, altitude(B, C, D)), Circle(E, G, H))) == log(distance(E, line_intersection(k, altitude(B, C, D)))) + log(distance(H, line_intersection(k, altitude(B, C, D))))
