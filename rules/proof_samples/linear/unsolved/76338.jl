Assumptions:
A, B, C, D, E, F, G, H, I, J, K: Point
f, g, h, i, j, k, l: Line
c: Circle
distinct(A, B, C, D, E, F, G, H, I, J, K)
distinct(f, g, h, i, j, k, l)
f == Line(A, B)
g == Line(B, C)
h == Line(A, C)
i == internal_angle_bisector(B, A, C)
j == internal_angle_bisector(A, B, C)
D == line_intersection(i, j)
E == projection(D, g)
F == projection(D, h)
G == projection(D, f)
c == Circle(E, F, G)
k == parallel_line(E, j)
H in k, c
I == midpoint(C, G)
l == Line(C, G)
J in l, c
K == midpoint(C, H)

Embedding:
C := {"x": "3.6777455437325539122639384004287421703338623046875", "y": "-8.36815085874459185788509785197675228118896484375"}
B := {"x": "2.756187548399684938971176961786113679409027099609375", "y": "-2.875531908079123066812599063268862664699554443359375"}
A := {"x": "-8.0018859913767403924111931701190769672393798828125", "y": "3.761923034201695603684356683515943586826324462890625"}
j := {"point": {"x": "2.756187548399684938971176961786113679409027099609375", "y": "-2.875531908079123066812599063268862664699554443359375"}, "direction": {"x": "-0.68558555933146230870998968791754415803572416213638582756239251400063447669412798024638126684398930499294121174600580912504577471148548382221478095003175277821273330399588760174257895644632425894331882575086230753013983565243873567457081865087729015285279476519992776652055827558590658785781480417520048778879837050717257548949101783753343009301481052917287227764703386700658188091623394964172799572133608516594792025684309872704523961240667182010644202119336110118657017484215163895538333595685154313477262274909459576345034101138757271847729282079375501214929284698874407338297258188235139240333593062498167872350061546672863655441498902951787247784183383368138116352129235199483400832595679684153624436872043686904358811318838115357418780493243143242842112900015556961325835150953991824166915600449895612939428403975268727473526751091367751752571063123642020569755905569904385022880248407348432898370285767733696363536714369925685457026113227317498163057907719710608568566507720039943062695953856072683846302206348115158356742986368154269271209184505421673774836512355134645357155624777819436014554301870715825973848167210741256309734375375474728338577376029150190282275657220219440819306151888847087347283179816720745798657335090459708192075195280394948129665159483959693806407079618419699766461203013272956752136920118390761586138937154019295563576127753264954089581970111413528782526217790676906774344734703205938402194960648606746306750257605474126089144376035289518014939837740593305483448642143828695133037449606655737023322796277215174710179791362767668364552713784644148738607979974241482299719813786239606871666432563437486806081988832133178295534530485828289956505094035011034037700466680901370780857368829484111795489809601856522006584134393268023947434713861126906092521554762569237096738473987741981736075726426963729009550985691204552465828738229756761750582455870265768808832583693911565532625742548719107469390449041723681536861190458402102144751932087115179725489356843053433847073", "y": "-0.46113673238549562273488903314350798497412668641354395375803410573722348564631001226702405938794227246682282585187993884812073082951163551980930708888709937703902547796245774298625667721606282936853248547181393813359408347989998209444381180988529045956838457730083826966998607654407537768241295237072381899949416757111262110927270015209058654932513354043576543432960209824015770805012949024485571975130813906467865877795733424209290799067251435573259552869547611101842515951145872294303327377702332846459808231854197925037642212960590899173367603841885948150486621427958378596149937381832608735605659653002027262065414352865388231077631729762651038522404164873586259569418534604352545248154386963502523675094106480197261611728563391439151450419962910563287439936985815775044123317980019523769129940586209823770088726805425738654550191218544349341590458200994890927272714144662420352316020720560978192355353919417094405956542334639424964530762834891791963315362694944598228284404058431661387710050254794911167555438049280873240519235708682276012796914704264384196832040013757151850625271939823700629385560153883920606153157111806093253670072659657976717689692200870587106187227668489956812479805593370546834759491550120827573451746031206721513879219216212832061447941410724532220433818554000689623171940727391070725756768776298395326598843263999845037089489115686530857777685308483276279209639203676342017816593030347084790582577081710305508132216399501753622057358925972164397286170487963972621917796111733416002730279633820469992537161164174760690438893761073292520141705489350391110016639597313460119313434506214517243528877780907441295877869503020225516806612108331464764770095428140322807085363439888541660695161291901358130325695625149828927785883291049765013651969760429446815939311791951253516881912594811224689839623754614789884215745805798900937743518425121069495614779666867101753066051353812490229364036689756261880269346206506316883273722179610776487586860292884269279449480169678798816484"}}
i := {"point": {"x": "-8.0018859913767403924111931701190769672393798828125", "y": "3.761923034201695603684356683515943586826324462890625"}, "direction": {"x": "1.5446591924657443105571728908292073174201711797053701137174712808400933071555846990242400367413801105888613764641117428345905103058980686836880750014827472089856525506915807831081084932146019946854741969628332096144696282715596955249113722403752222553950630845645478217904111352842414470536737727684081467083970909154738398998875714759418449434151219778728740248346101837837270178020058076505354263084224316941581825546757313621197976822681108657854002330972504080047117703968544995388871542793423281177428501356993545230663464506559663396002718205676459729135777305230874267055107339628085611792731327571802013406637999329996273967354130277069778291559599915539954060102165637369493811425005853254993215303093663976036293884907133436060558991297235943270796425944588839588555278108417331074378368032485666980968630133018083040020800725176023858264918426971434730926996784817914759309733112975458402468591915091380540593991386987064553386150976864092346289565610323770504634657006028335177051821455873545791161275429110169514924023363763164341752040535600496857333223572371077711718179139716325980067028928334296630078817117687920094849258743284574010865691941811587989563660307575459713540981087214344904926539282570210486426319603889867588361015247042791113177691093604396765168369701356370439508433221865980725209749791402411422436883518820672107128386470943420381002192448920553352248364901083269871768816126008905054642858975307964683161537694236313588913048872697042451840822196174339839195273810240939745991416788322356597098660884216832489762008529876467333004790321722586464084789809992121921796838819780948623746036448732634679915979620301983508193223885662984117681263744490076957387555203314439737991431577517927679813224407240171157421889133715616910512037784488152602199789050429846718530208882874778040583485023500428918376570423908986037490552675480252220958161633159110555609674454673434514438818588753421887483779375376977143793276325776177635165262234781589047106975391033377520635", "y": "-1.2454336099682445133268518949365245401490873461559008685114137225291818435835054821289969513547553540059063151716834186854630251447416487982186097731606410793915670218455181119177678058904691352801124342720384381551649504934877953835143674974161776198705862313382610650442075378125695586414236219477826506183012231481928096193955458140380363358413875354062312256588481474076033315200623967616484379509082210906033549040668766234521368817749508097681872700094136664805684061568282383811192797164521291481429996572052606928638778720796198295646435995162213597635218440696914794298362689959531479057307135902494282597754054203903795659909507366062343241003219370133603634264184301102002578228980058174425321381982724834937236036132433132945731839427317717272287283599449482852286113402324209629644950359614382946900795442328352384525484689758818647654854002671935105014925658747292388457482850826764480079094347849303420609774954334882512362451799100024758660790304536487412953804046467893907752072688699863161702354631160711382792735428962656290037200227385883125054392977162022235874955234951068130480243421586276282225471234999495963968787150419346271237864415720484574092039365848017035410939107801691350099229628293722823071379979890122391216507074938722316337801130838698305714040650612520852184654243448060313376968957177720132241252354455988434104775691747657376614796305886944473516625125828615010913738739738884485553323874950886540455540048163422113184197711534637110893359221366636158570646025160354352401986685915852875353079614187962745404663500541347225918024348174039449715138750072693312403287377521845448457087151421258068662164795313540094006478179844276409662997672543523942830964603674597018101033069952485925362689771590233335353235212122103994411938557071637394528234220287318631503101755726932028466709351164543762736799040623586969756725145850984183987425297029082345481714644246069296018155289626131442403839455269682441852592148371455915600744581924338728730890605233440368794"}}
h := {"point": {"x": "-8.0018859913767403924111931701190769672393798828125", "y": "3.761923034201695603684356683515943586826324462890625"}, "direction": {"x": "11.6796315351092943046751315705478191375732421875", "y": "-12.130073892946287461569454535492695868015289306640625"}}
g := {"point": {"x": "2.756187548399684938971176961786113679409027099609375", "y": "-2.875531908079123066812599063268862664699554443359375"}, "direction": {"x": "0.921557995332868973292761438642628490924835205078125", "y": "-5.492618950665468791072498788707889616489410400390625"}}
f := {"point": {"x": "-8.0018859913767403924111931701190769672393798828125", "y": "3.761923034201695603684356683515943586826324462890625"}, "direction": {"x": "10.758073539776425331382370131905190646648406982421875", "y": "-6.63745494228081867049695574678480625152587890625"}}
D := {"x": "1.3790806027504158625675576436146044037312488876429658498336615044986805049254645374757845941330618452502362446062048188712948318225148803134077510928064471714239870970860545840162872975554985970564229889275317065751909115105932910206573213307396448124845397772213770045882159479116672528695153336470226600080678363410122090466344694639634198552163594043203159669625995893157518233716769538913664815314795402771311507777882276219705415897515567237282590400266639207302428875375652899278647298490732448770168575936828018037247048382513956486581768582923629001038577643541375902555925939966510071894930379171110185177415920741446929304190716830070238392540593684655646616528237031336663262174757245385603816060464470029424000818846701905901097808684102727555691587549049107160248210824970292756659983233961476536495483994298090348803034416696165244400662324194124044680621569045464595431630084398205898547941088182308633917979246292689640125118085249192446088511560052451155372764779101203014756062434182363604099823184358564929656943588879299556959648641912785283481475898315952193745532292398410738632069677760568912131368770805278991709225726968004484893933062988207492766509550085638804651481405140686799992149036660731458093111663963483894006500048710523162097372648805423791091117910262635282812342286256124265496617850919493534230458416012366500860981234123930837493371670345161478718292104195276109753895608615464958557084358328688052425670028762573803718606719430132969939832570544583545649978269882193269246882100670686899351007769931536373149008700243216781924024743405957330885373024347316754409557875788925205149151467210833278982978078936016246024429917776162074387074108332745257713307284314019280465735757951306802070168958582796695380214120421676054940296593578807552014712802655832427541824543918542261950356678631537365036350742765563918682013841300396811173974478958540199074662290564591139278522397114664120331114625064076347839810771487968364140694087335114349760389268832214282691", "y": "-3.8017979129834824820053739899336372603243095286137301761833801807851280450004908741183268000927717998842445149226997030985709101927038387978671363376611335373662443935152293519704631238753659807943483110261678109345470239334850551577647621826243318720782158936038855285784951932423553605223130690361994355997026485282517898836381499881124000865626925948410757245688247904251552583960176008933836234767276899683050669533178393462102441115925348495745308201916548389469460100064968214402740291783421166617758695373243580998774380699186139673129342522088663853074131312533872434418694892680051419683118839163642870083453172841842791486623181349542734547857508722068913486986401114148892692122182834795790782974992414023850161215083875720963428821981687989330683097417768065943863298349639201199721871399124842446916868449236658570663587830403741845432616220993003347096439631333886522025023216268729648173715484134190675685689729053153120361524193801003336636834161148343430400726267823835681775758086657863450725982291757326909519646653711890025179258075542489603366511352358368588489610691974782904559729983116643107874757268895536816472387681234557548529508618821450244460845037936004007776473295020323275319695359235097384248078257514829747529315635188498289798502964324941907529564782330984306567774140529997547339428398155736306921755300005120136369852828340255959230252673109657568081978026349983062609653877447055282075088833881338388834842673182179588163886485432030171998168509242359131528314778869536312643554680886699942335898521131450288287110275600649606910944167808455328578182791011361305075065044757900373720615180421006352266390576936485800485727519264257173869185390078973379304133939344119086627624882532515187901112257197829047717375128172526659719217851731663130870460159141349883303647922068657317247466622021374049153215236351381507068359925091845993827912460454724408811058617197919654566062137701901570881936153281455089380586559700446671553063532419578415392290429736400975856"}
G := {"x": "2.1726795152594515055904644510932744555039389349169081734711134617640683361955524278233414329758465319740912293710165135770153179275930667157685413274222349288643674357557374943102882140367272638002217244095470727396908091808133257595176858960142731030652056143438289033994200899279136946568184580397345728901477953905259994733219401432653582216009879905185793185832544258214877026772601124304458998981970749197848223831720355622067452056361818272256735215823459993438523917133632331608167504435392763061990189728577707325988401542075485783807509397716973408738232959660114592449858657041267905398853642002817191009798675064105152367768158017691960079256912192817577355909505191544725026768394041754894754647977536437318905980393402085851458483690521352143820025809762061774809805150911945248913150904500649856808376774026153979165441970966769593548508002904515271661649401287124293072474057499546667044671666605042701685720560209503345669624469756524347688497026740321870657443379673012506507299450092969948820449192484444421037265444971792153849333922804766493326571734944595871336962326049060875170395014955894974911620020224131017239221956324646192709863827858000052030872084796078404670238011315210406518603842347293448360766025754731503889409780410403844528567876252647517154949282183021815225443120610760219681282587173629903782212742293221613943604418939711271134135883340802505184230924761307989656491109956023491995970839269106487278689092750440642403067003117052397947719488808388620178222598072037311274367619160777722042226858174402293090216630401173735895416651865279261283206181856455227349967580709714600228766629376256947051318259372425813538577056352391815959981177262944894454873748535930503561642432062782240553302758891786723469660894584217732945185489750683329431351307658106027250005307298038940479696296419873070377788935148203173236623687364292626422074995068503677479181301512075082465541361315836147336140308706060309866773994554822900073892710470494681634760121947564354111", "y": "-2.5155224450365706426993017773813154176571645490544136936172204864126169293802362734845850177300486734234139130759284175010421996701118532344910246360158943242212659167571579653346308895217719126366821391419704478772148747613395024502917230764791059991673327461931798114616299982605525529137218896935488969486624929558315129260908802503060225820300157672487380321932033622880028500573701981700627805908873637380450535428770640163968815328542099314163121335249994349345113369848330952326298366768548550783157013736540035692232693394246562220899469864244077779726114132568162004454926514197079377218976789056196880154554585409065751800268477471115247875353602475407976307083916407566793298714837548206203111622477697256766921159986898934571732897939254588553566320838279740231041123175830346321095295118196387693955785285033455517667765233198621870571882703396305986876040555938952413121335172188025478359395999562232046687145523423323564319695589398037402543297565449498097595868295935345195281911931140943980601737068461334415449530671438075306960183626288110949402442220508727115246542389867355694495072113660701529893533655866431924416773063849648684844432928207165058912069259880002198682345901666205673015601538985125641920263576097605601501669028070465715870118056069133933579743324422567365428321347266558499360389137979510536526780992351306344670915947170956063615702856160950260183780819651243072720510910911256773240671484143948846893598067656859853459182160710443353946576315880719966296664174482186235459577346687997683983818076684944390361997160287696647682499460057176243577966669512476315249176328733936859296189472408492627291547488128039949846320437894995085686188762741665779086891270571479141011407048792869709170030100374573766077284486129657701323342020800519889709679221552694879508887404274338292154547975513321708026673076418625627613881535398803766888798580506409157995112038298696254080459632196863687097844739273393983866881334500664944100279621570573412134430426805827571822"}
F := {"x": "0.29034192993879242496623913579203695191208333631261958611492700413627584262471377482919096870161736471354969234046334628536052293088146378772602818651676616927718026815338722759074220566919078583887777611557028578815674224957426620089195884156777792421327503607259286205387009576349672120041329779241679052214098812878688545743038543661845388780062779254470345821475269593050661997839216164426780039013219305758661036282607065888199084965358695827075770576481672952141200136863135547980925930926670114463752490730710758189646744249175860936516906700771348855601759327764662956829871573033415437922861423061920133340749041553199776236934335258751310033690931810996848455572708783736775798048719940205434638761242749321980325351804655959663862191740395194674271874405254333251661529473033007857111545455148362649804396080716117686612044525755566948071122993762642641964648154663737576325772295409419803679143459919297412109944400549220899373527913750023277856076935136209144396436569660466077883456472173390487426212394353637219793781526047344798604891395379994372327846897666848564843477055179026325729528052569590412063902682286082990406622511734368843642963839208473410666731960659199303940210456117874610490309830512926450171373558332170649738850187574157357954427267738623732576380231141492807346311045015778230666055461161062938673795565199077109058462186347815531071917163109244317848237450238983007946102930119076088063719214902832404463352625976324219445557414880904051382779436955448398868754821020116209467004042176091973042460096398664573547146645202991575354612723169278627340702028854093167078283101189349640489993766559815863233498359757022058312778574210255059403473313012398014511340050385464122169792676234362151393108101878904528903664524841915957102171300420784440182185724973956805928719777979431062805531965142166502638998700904049570752592513520731986563983137284119334524637822882472474786103215195064167100369960211248507897321445914399546045708863672729658908345124091269612449", "y": "-4.8501069874944092468950406073226982391744507457177801395062105306694317019372347399893782716983258196009827510832035973236110683634896155046053608775732455627188884716472982218502170230402184271208980527791629239890829269182991096666342337377372460151438513734693599212093366530247474740153171234270688236248878856275199156562838338254008682827882115207662274680402744601463447321852696127945982769702543963527961315606212640345822883629662564382102498246459935828950981670326015483291142287584546912612436219670162176389876865007910561295099341669714227210425688642799326774517907112646926591877446595897154924654312154517868195305303128074519964127583204850384236059282146355741031759778468426546714078320590481717494833734638367269390499557325416910070169203522193579811014075698229425778464132433250798677422744418702355738924011766606395519694310116217817461661224594585595379876884684727289166356303865796951654856789020192456679790164351841782805743434353481835863370639008099431431379501352831909203783218435287377525393325620564193558071354484271691995385548423037521885583345257463608689360858469091929068662712127100640715401143912242906491079296541735470232767819485250307954023156152478003288388343114543200879070355037949851123407730749613309201450971977021925934291603197954131555099674570749204215080475337806701658413585932741508856476146264085463296773368937424276045036076040955950929485832579221755882446209405984641998127882079115307004426410605284446483787525563691708547566415907875431317408871064473622527810260358420747204219815407863715428601599544074040856632991958172899991090253633486379317056124694503293255093010168340424809600422196049138025877241628296342086473077918748050231995640116928104438496513144052317943635208341390954177504117642639628823195578048412330599042407362620198357355977489758116330009099660879663032219439900486063443189630055709406718555813007453462053929025142561939205338114832157580172633349927279542757788456830880174018483223345643875344044"}
E := {"x": "2.8696375838339016867077169135867252821699616818383501429156269867304688808177776913679923953115904051167569542014731576454513508681423475676995969380160453474579191069098865247765963914190818362629301812868950787182150872887055153633587821442520278450354002751884974975982967241923536048631855207288039221561605517816882961941697903850074387468423808377831987803872638301864221296544375791786150375448353981701847407828105999225419648902031531361902278950214441609774744763395804469781734423398271264129954170777899992477966115295685305067841903549952158400108526858384367665617446524248958112130786510848709286813106964502812186942463613004608532991894724994047833818685815959187094687535014080207838294450925908519555267116897493470758492406056916217271887770517938317179448926539225317076099913834855676717903266558857181494541652590561376901478469548945409405938697082705053663780581834572637993064370629005970725230709495524468615208337539743249458715475828118166037680702764679048446577725574581068869457252878780932058689805109896723885526078932736606847360770829186000162237225775943224067213495904874844552906965412611680305619253818612065964337114133314918972445002343722238816382777529294213316252546245919709137716167848442488002079472562531011967679276825318659236885376936418240752657060692249437952227002396189689595589443434625410859341792347946555234033578533331634224797207084044567012822980545051810680464609572619359059369810477067780543373699125145449454210472941185597391812121294800616361916955876085077049190234821420047318257386502089449379993845704723314568904883816598011376475688834350037102318703532656662015964703529007258963917670463340780724786771217908541150023500341450632752362375625630082243198639578103434957892790404117873610881928326030949766817101666434255144453635408879075750292325653118174871187905021558673595149143027454382299958033618343061235526922189939194491433423592546725273059176796412425346030953975388753278533130183594089531097694749169485022922", "y": "-3.5517105292136171162870167432568455046123691872312388246329954731058579106436412736561980548644492982683988313530331716514170074158047482740824325355098669146221351866574138188399323938219385756481454016237941766375408104389206036215757677321475987859651955616145253392807436392216620431038938406676929686320894490390606512827304874191788584971421142493801997763246253012842009768198227320533125098804288620953538481755658758273189881824862474699553799493378928652659190919632389761246667279424414747579196152683066629911856870465776051495200474646105935978841926776624586621620678786380821841647386263070692691433086947389823477179725470334022032997010637706874741862128798504081938945991005729123745575672966359420221264682946070867578342098748304351358177917044095124577931890060371301054861433220230150656747423067888572220922398035626659094383168777421024723127116853783353275883495078834778112700079971807967612825583380059591101453626815992704958169371044902714454572479780930886227815508114458099195988094988407501861132308149210460288780535311148110115941787125683520516288132970002320222716505098994362230840135837546853625252417696957804168192277065608780489133615690726471877838803691395758016037664916980565347093998450270810744754324280433457478313291932499741909552760920103996672837683917569345898378059558795483169255606639849508924019807829508515981130195364684654987798861423380963858214231524757105236980039875130195036450729185478316915067905783424451652679158742409310693104279371037873596056781878046700895413764413306835004397641305462377242231018007054049639827047117325152695121774947520542844663785635287696292394706029585860691287092718418713985312025067827080016799642360938823725674528149015094383501403271218259137493010531559889690539749743764516568683443837307495895984381610684080350685419612904031618182413856924068840870343398901884359593196633908283314473409793811878383687131229834132694895267630878606104722538432712836634078502326304152058022156870036447931664"}
c := {"center": {"x": "1.3790806027504158625675576436146044037312488876429658498336615044986805049254645374757845941330618452502362446062048188712948318225148803134077510928064471714239870970860545840162872975554985970564229889275317065751909115105932910206573213307396448124845397772213770045882159479116672528695153336470226600080678363410122090466344694639634198552163594043203159669625995893157518233716769538913664815314795402771311507777882276219705415897515567237282590400266639207302428875375652899278647298490732448770168575936828018037247048382513956486581768582923629001038577643541375902555925939966510071894930379171110185177415920741446929304190716830070238392540593684655646616528237031336663262174757245385603816060464470029424000818846701905901097808684102727555691587549049107160248210824970292756659983233961476536495483994298090348803034416696165244400662324194124044680621569045464595431630084398205898547941088182308633917979246292689640125118085249192446088511560052451155372764779101203014756062434182363604099823184358564929656943588879299556959648641912785283481475898315952193745532292398410738632069677760568912131368770805278991709225726968004484893933062988207492766509550085638804651481405140686799992149036660731458093111663963483894006500048710523162097372648805423791091117910262635282812342286256124265496617850919493534230458416012366500860981234123930837493371670345161478718292104195276109753895608615464958557084358328688052425670028762573803718606719430132969939832570544583545649978269882193269246882100670686899351007769931536373149008700243216781924024743405957330885373024347316754409557875788925205149151467210833278982978078936016246024429917776162074387074108332745257713307284314019280465735757951306802070168958582796695380214120421676054940296593578807552014712802655832427541824543918542261950356678631537365036350742765563918682013841300396811173974478958540199074662290564591139278522397114664120331114625064076347839810771487968364140694087335114349760389268832214282691", "y": "-3.8017979129834824820053739899336372603243095286137301761833801807851280450004908741183268000927717998842445149226997030985709101927038387978671363376611335373662443935152293519704631238753659807943483110261678109345470239334850551577647621826243318720782158936038855285784951932423553605223130690361994355997026485282517898836381499881124000865626925948410757245688247904251552583960176008933836234767276899683050669533178393462102441115925348495745308201916548389469460100064968214402740291783421166617758695373243580998774380699186139673129342522088663853074131312533872434418694892680051419683118839163642870083453172841842791486623181349542734547857508722068913486986401114148892692122182834795790782974992414023850161215083875720963428821981687989330683097417768065943863298349639201199721871399124842446916868449236658570663587830403741845432616220993003347096439631333886522025023216268729648173715484134190675685689729053153120361524193801003336636834161148343430400726267823835681775758086657863450725982291757326909519646653711890025179258075542489603366511352358368588489610691974782904559729983116643107874757268895536816472387681234557548529508618821450244460845037936004007776473295020323275319695359235097384248078257514829747529315635188498289798502964324941907529564782330984306567774140529997547339428398155736306921755300005120136369852828340255959230252673109657568081978026349983062609653877447055282075088833881338388834842673182179588163886485432030171998168509242359131528314778869536312643554680886699942335898521131450288287110275600649606910944167808455328578182791011361305075065044757900373720615180421006352266390576936485800485727519264257173869185390078973379304133939344119086627624882532515187901112257197829047717375128172526659719217851731663130870460159141349883303647922068657317247466622021374049153215236351381507068359925091845993827912460454724408811058617197919654566062137701901570881936153281455089380586559700446671553063532419578415392290429736400975856"}, "radius_squared": "2.2843038133775710357226517665436070491611507317614664194234357270777788439743442764780309919401988786390999230725929472936311646399548339655952690513807395808769926744934716712026096423924696641927994586488454495794135394887266472123562510887790221058159235903122131253522531553615439210614268021746002350133974438182093781864566625111262315139682614510684119435743528796014197304140323304186394274701120876762779194621093955450090395620330925222420433599104529175371441565356705639154974643694027772041657187764410902987593917836364672349481498166217581191819057470708837096590530421377291358126314712490365178914804477537495003867604986170484577794770829029504212512940026381285544967187730382314960088630866995113672114844299396194751999159904614485826479950972669488466059657971650744725027127295849817604379718321278904499761613614402329378564644619360771139985032093845966137333734572450448068467256311055029683036664833871115032124980617975372062392299176929531170651876203652355781697024693914170276966593424568154870076167974700809929484123469007533261129046332674906575500141891427635404605739109344429340783497112611788484656185086547709406388373361232076477481874379080986865726751527151317716293806726377214134291417623648767705191396104452749836622233322736922467041500272610770990878414060663273906982397603738782231868545143605526757157851471759755221589422915739462547626729882985565959190710839158912486989971845335537219068998024385817928441392834124957184568246633463680620925755935611057380777857671139767936358592635574743183819889540264209599280902563751251918140908770653857621316924213944015256490122009136962579907060960795695913048768517565785095126538974120112384352557858379029799784027436621693407385755482140313376326180611358021892748267470491775419220842631111102827575124825401695864128583693393338018516904411497370691345781867625909471895885869985549639194296627902409442105441490937834809686922066206114628465953146253068582904359975515481885142291502180299936972"}
l := {"point": {"x": "3.6777455437325539122639384004287421703338623046875", "y": "-8.36815085874459185788509785197675228118896484375"}, "direction": {"x": "-1.5050660284731024066734739493354677148299233697705918265288865382359316638044475721766585670241534680259087706289834864229846820724069332842314586725777650711356325642442625056897117859632727361997782755904529272603091908191866742404823141039857268969347943856561710966005799100720863053431815419602654271098522046094740005266780598567346417783990120094814206814167455741785122973227398875695541001018029250802151776168279644377932547943638181727743264784176540006561476082866367668391832495564607236938009810271422292674011598457924514216192490602283026591261767040339885407550141342958732094601146357997182808990201324935894847632231841982308039920743087807182422644090494808455274973231605958245105245352022463562681094019606597914148541516309478647856179974190237938225190194849088054751086849095499350143191623225973846020834558029033230406451491997095484728338350598712875706927525942500453332955328333394957298314279439790496654330375530243475652311502973259678129342556620326987493492700549907030051179550807515555578962734555028207846150666077195233506673428265055404128663037673950939124829604985044105025088379979775868982760778043675353807290136172141999947969127915203921595329761988684789593481396157652706551639233974245268496110590219589596155471432123747352482845050717816978184774556879389239780318717412826370096217787257706778386056395581060288728865864116659197494815769075238692010343508890043976508004029160730893512721310907249559357596932996882947602052280511191611379821777401927962688725632380839222277957773141825597706909783369598826264104583348134720738716793818143544772650032419290285399771233370623743052948681740627574186461422943647608184040018822737055105545126251464069496438357567937217759446697241108213276530339105415782267054814510249316670568648692341893972749994692701961059520303703580126929622211064851796826763376312635707373577925004931496322520818698487924917534458638684163852663859691293939690133226005445177099926107289529505318365239878052435645889", "y": "5.8526284137080212151857960745954368635318002946955863063827795135873830706197637265154149822699513265765860869240715824989578003298881467655089753639841056757787340832428420346653691104782280873633178608580295521227851252386604975497082769235208940008326672538068201885383700017394474470862781103064511030513375070441684870739091197496939774179699842327512619678067966377119971499426298018299372194091126362619549464571229359836031184671457900685836878664750005650654886630151669047673701633231451449216842986263459964307767306605753437779100530135755922220273885867431837995545073485802920622781023210943803119845445414590934248199731522528884752124646397524592023692916083592433206701285162451793796888377522302743233078840013101065428267102060745411446433679161720259768958876824169653678904704881803612306044214714966544482332234766801378129428117296603694013123959444061047586878664827811974521640604000437767953312854476576676435680304410601962597456702434550501902404131704064654804718088068859056019398262931538665584550469328561924693039816373711889050597557779491272884753457610132644305504927886339298470106466344133568075583226936150351315155567071792834941087930740119997801317654098333794326984398461014874358079736423902394398498330971929534284129881943930866066420256675577432634571678652733441500639610862020489463473219007648693655329084052829043936384297143839049739816219180348756927279489089088743226759328515856051153106401932343140146540817839289556646053423684119280033703335825517813764540422653312002316016181923315055609638002839712303352317500539942823756422033330487523684750823671266063140703810527591507372708452511871960050153679562105004914313811237258334220913108729428520858988592951207130290829969899625426233922715513870342298676657979199480110290320778447305120491112595725661707845452024486678291973326923581374372386118464601196233111201419493590842004887961701303745919540367803136312902155260726606016133118665499335055899720378429426587865569573194172428178"}}
k := {"point": {"x": "2.8696375838339016867077169135867252821699616818383501429156269867304688808177776913679923953115904051167569542014731576454513508681423475676995969380160453474579191069098865247765963914190818362629301812868950787182150872887055153633587821442520278450354002751884974975982967241923536048631855207288039221561605517816882961941697903850074387468423808377831987803872638301864221296544375791786150375448353981701847407828105999225419648902031531361902278950214441609774744763395804469781734423398271264129954170777899992477966115295685305067841903549952158400108526858384367665617446524248958112130786510848709286813106964502812186942463613004608532991894724994047833818685815959187094687535014080207838294450925908519555267116897493470758492406056916217271887770517938317179448926539225317076099913834855676717903266558857181494541652590561376901478469548945409405938697082705053663780581834572637993064370629005970725230709495524468615208337539743249458715475828118166037680702764679048446577725574581068869457252878780932058689805109896723885526078932736606847360770829186000162237225775943224067213495904874844552906965412611680305619253818612065964337114133314918972445002343722238816382777529294213316252546245919709137716167848442488002079472562531011967679276825318659236885376936418240752657060692249437952227002396189689595589443434625410859341792347946555234033578533331634224797207084044567012822980545051810680464609572619359059369810477067780543373699125145449454210472941185597391812121294800616361916955876085077049190234821420047318257386502089449379993845704723314568904883816598011376475688834350037102318703532656662015964703529007258963917670463340780724786771217908541150023500341450632752362375625630082243198639578103434957892790404117873610881928326030949766817101666434255144453635408879075750292325653118174871187905021558673595149143027454382299958033618343061235526922189939194491433423592546725273059176796412425346030953975388753278533130183594089531097694749169485022922", "y": "-3.5517105292136171162870167432568455046123691872312388246329954731058579106436412736561980548644492982683988313530331716514170074158047482740824325355098669146221351866574138188399323938219385756481454016237941766375408104389206036215757677321475987859651955616145253392807436392216620431038938406676929686320894490390606512827304874191788584971421142493801997763246253012842009768198227320533125098804288620953538481755658758273189881824862474699553799493378928652659190919632389761246667279424414747579196152683066629911856870465776051495200474646105935978841926776624586621620678786380821841647386263070692691433086947389823477179725470334022032997010637706874741862128798504081938945991005729123745575672966359420221264682946070867578342098748304351358177917044095124577931890060371301054861433220230150656747423067888572220922398035626659094383168777421024723127116853783353275883495078834778112700079971807967612825583380059591101453626815992704958169371044902714454572479780930886227815508114458099195988094988407501861132308149210460288780535311148110115941787125683520516288132970002320222716505098994362230840135837546853625252417696957804168192277065608780489133615690726471877838803691395758016037664916980565347093998450270810744754324280433457478313291932499741909552760920103996672837683917569345898378059558795483169255606639849508924019807829508515981130195364684654987798861423380963858214231524757105236980039875130195036450729185478316915067905783424451652679158742409310693104279371037873596056781878046700895413764413306835004397641305462377242231018007054049639827047117325152695121774947520542844663785635287696292394706029585860691287092718418713985312025067827080016799642360938823725674528149015094383501403271218259137493010531559889690539749743764516568683443837307495895984381610684080350685419612904031618182413856924068840870343398901884359593196633908283314473409793811878383687131229834132694895267630878606104722538432712836634078502326304152058022156870036447931664"}, "direction": {"x": "-0.68558555933146230870998968791754415803572416213638582756239251400063447669412798024638126684398930499294121174600580912504577471148548382221478095003175277821273330399588760174257895644632425894331882575086230753013983565243873567457081865087729015285279476519992776652055827558590658785781480417520048778879837050717257548949101783753343009301481052917287227764703386700658188091623394964172799572133608516594792025684309872704523961240667182010644202119336110118657017484215163895538333595685154313477262274909459576345034101138757271847729282079375501214929284698874407338297258188235139240333593062498167872350061546672863655441498902951787247784183383368138116352129235199483400832595679684153624436872043686904358811318838115357418780493243143242842112900015556961325835150953991824166915600449895612939428403975268727473526751091367751752571063123642020569755905569904385022880248407348432898370285767733696363536714369925685457026113227317498163057907719710608568566507720039943062695953856072683846302206348115158356742986368154269271209184505421673774836512355134645357155624777819436014554301870715825973848167210741256309734375375474728338577376029150190282275657220219440819306151888847087347283179816720745798657335090459708192075195280394948129665159483959693806407079618419699766461203013272956752136920118390761586138937154019295563576127753264954089581970111413528782526217790676906774344734703205938402194960648606746306750257605474126089144376035289518014939837740593305483448642143828695133037449606655737023322796277215174710179791362767668364552713784644148738607979974241482299719813786239606871666432563437486806081988832133178295534530485828289956505094035011034037700466680901370780857368829484111795489809601856522006584134393268023947434713861126906092521554762569237096738473987741981736075726426963729009550985691204552465828738229756761750582455870265768808832583693911565532625742548719107469390449041723681536861190458402102144751932087115179725489356843053433847073", "y": "-0.46113673238549562273488903314350798497412668641354395375803410573722348564631001226702405938794227246682282585187993884812073082951163551980930708888709937703902547796245774298625667721606282936853248547181393813359408347989998209444381180988529045956838457730083826966998607654407537768241295237072381899949416757111262110927270015209058654932513354043576543432960209824015770805012949024485571975130813906467865877795733424209290799067251435573259552869547611101842515951145872294303327377702332846459808231854197925037642212960590899173367603841885948150486621427958378596149937381832608735605659653002027262065414352865388231077631729762651038522404164873586259569418534604352545248154386963502523675094106480197261611728563391439151450419962910563287439936985815775044123317980019523769129940586209823770088726805425738654550191218544349341590458200994890927272714144662420352316020720560978192355353919417094405956542334639424964530762834891791963315362694944598228284404058431661387710050254794911167555438049280873240519235708682276012796914704264384196832040013757151850625271939823700629385560153883920606153157111806093253670072659657976717689692200870587106187227668489956812479805593370546834759491550120827573451746031206721513879219216212832061447941410724532220433818554000689623171940727391070725756768776298395326598843263999845037089489115686530857777685308483276279209639203676342017816593030347084790582577081710305508132216399501753622057358925972164397286170487963972621917796111733416002730279633820469992537161164174760690438893761073292520141705489350391110016639597313460119313434506214517243528877780907441295877869503020225516806612108331464764770095428140322807085363439888541660695161291901358130325695625149828927785883291049765013651969760429446815939311791951253516881912594811224689839623754614789884215745805798900937743518425121069495614779666867101753066051353812490229364036689756261880269346206506316883273722179610776487586860292884269279449480169678798816484"}}
H := {"x": "0.5854816902413802195446508361359343519585588403690235261962095472332926736553766471282277552902771585263812598413931241655743457174366939110469608581906594139836067584163716737222863810742699303126242534455163404106910138403732562817969567654650165219038739400989251057770118058954208110822122092543107471259878772914984186199469987846614814888317308181220526153419447528100159440660937953522870631647620056344774791724044196817343379738669316202308445584709818421166333833617673466949127092546072134478346962145078328748505695222952427189356027768130284593338922327422637212661993222891752238391007116339403179345033166418788706240613275642448516705824275176493715877146968871128601497581120449016312877472951403621529095657300001725950737133677684102967563149288336152545686616499028640264406815563422303216182591214570026718440626862425560895252816645483732817699593736803804897790786111296865130051210509759574566150237932375875934580611700741860544488526093364580440088086178529393523004825418271757259379197176232685438276621732786806960069963361020804073636380061687308516154102258747760602093744340565242849351117521386426966179229497611362777078002298118414933502147015375199204632724798966163193465694230974169467825457302172236284123590317010642479666177421358200065027286538342248750399241451901488311311953114665357164678704089731511387778358049308150403852607457349520452252353283629244229851300107274906425118197877388269617572650964774706965034146435743213541931945652280778471121733941692349227219396582180596076659788681688670453207800770085259827952632834946635400487539866838178281469148170868135810069536305045409610914637898499606678510282779199932332814167039402545620971740820092108057369829083839831363587035158273806667290767346259134376935407697406931774598074297653558827833643780539045583421017060843201659694912550382924664127403995236500995925873962848576720670143279617107196091503432913492093326088941422092385812847548421113828207495464199734017886018415716864211271", "y": "-5.088073380930394321311446202485959102991454508173046658749539875157639160620745474752068582455494926345075116769470988696099620715295824361243248039306372750511222870273300738606295358228960048952014482910365173991879173105630607865237801288769557744989099041014591245695360388224158168130904248378849974250742804100672066841185419725918777591095369422433413416944446218562307666734665003616704466362568016198565080363758614676023606690330859767732749506858310242959380683028160547647918221679829378245236037700994712630531606800412571712535921517993324992642214849249958286438246327116302346214726088927108886001235176027461983117297788522797022122036141496872985066688888582073099208552952812138537845432750713079093340127018085250735512474602412139010779987399725639165668547352344805607834844768005329719987795161343986162365941042760886182029334973858970070731683870672882063092871126034943381798803496870614930468423393468298267640335279820396927073037075684718876320558423971232616826960424217478292085022751505331940358976263598570474339833252479686825733058048420801006173267899408221011462438785257258468585598088192464170852800229861946641221458430943573543000962081599200581687060068837444087762378917948506912657589293893205389355696224230653086372688787258074988147938624023940124770722693379343659531846765833196207731672960765893392806878970950955585484480249005836487598017523304872305249879684398285379090950618361872793077608727870749932286859081015361699004976070260399829675996538325688638982753201508540220068797896557795618621222339091360256613938887555973441357839891251024629490095376078186388814504088843352007724123366574493165112513460063351926205218201741628097952137660811675903224384271627216066663219441402108432935746577021539561811509368266280637203124109673000488709840843986297634234038526852942639027975739628413738652283831478488822076702634040303965962700519609714305505166464320693945466602756728951619489429178490022839900584744326858341865015043266697437989"}
K := {"x": "2.1316136169869670659042946182823382611462105725282617630981047736166463368276883235641138776451385792631906299206965620827871728587183469555234804290953297069918033792081858368611431905371349651563121267227581702053455069201866281408984783827325082609519369700494625528885059029477104055411061046271553735629939386457492093099734993923307407444158654090610263076709723764050079720330468976761435315823810028172387395862022098408671689869334658101154222792354909210583166916808836733474563546273036067239173481072539164374252847611476213594678013884065142296669461163711318606330996611445876119195503558169701589672516583209394353120306637821224258352912137588246857938573484435564300748790560224508156438736475701810764547828650000862975368566838842051483781574644168076272843308249514320132203407781711151608091295607285013359220313431212780447626408322741866408849796868401902448895393055648432565025605254879787283075118966187937967290305850370930272244263046682290220044043089264696761502412709135878629689598588116342719138310866393403480034981680510402036818190030843654258077051129373880301046872170282621424675558760693213483089614748805681388539001149059207466751073507687599602316362399483081596732847115487084733912728651086118142061795158505321239833088710679100032513643269171124375199620725950744155655976557332678582339352044865755693889179024654075201926303728674760226126176641814622114925650053637453212559098938694134808786325482387353482517073217871606770965972826140389235560866970846174613609698291090298038329894340844335226603900385042629913976316417473317700243769933419089140734574085434067905034768152522704805457318949249803339255141389599966166407083519701272810485870410046054028684914541919915681793517579136903333645383673129567188467703848703465887299037148826779413916821890269522791710508530421600829847456275191462332063701997618250497962936981424288360335071639808553598045751716456746046663044470711046192906423774210556914103747732099867008943009207858432105636", "y": "-6.7281121198374930895982720272313556920902096759615233293747699375788195803103727373760342912277474631725375583847354943480498103576479121806216240196531863752556114351366503693031476791144800244760072414551825869959395865528153039326189006443847788724945495205072956228476801941120790840654521241894249871253714020503360334205927098629593887955476847112167067084722231092811538333673325018083522331812840080992825401818793073380118033451654298838663747534291551214796903415140802738239591108399146891226180188504973563152658034002062858562679607589966624963211074246249791432191231635581511731073630444635544430006175880137309915586488942613985110610180707484364925333444442910365496042764764060692689227163753565395466700635090426253677562373012060695053899936998628195828342736761724028039174223840026648599938975806719930811829705213804430910146674869294850353658419353364410315464355630174716908994017484353074652342116967341491338201676399101984635365185378423594381602792119856163084134802121087391460425113757526659701794881317992852371699166262398434128665290242104005030866339497041105057312193926286292342927990440962320854264001149309733206107292154717867715004810407996002908435300344187220438811894589742534563287946469466026946778481121153265431863443936290374940739693120119700623853613466896718297659233829165981038658364803829466964034394854754777927422401245029182437990087616524361526249398421991426895454753091809363965388043639353749661434295405076808495024880351301999148379982691628443194913766007542701100343989482788978093106111695456801283069694437779867206789199456255123147450476880390931944072520444216760038620616832872465825562567300316759631026091008708140489760688304058379516121921358136080333316097207010542164678732885107697809057546841331403186015620548365002443549204219931488171170192634264713195139878698142068693261419157392444110383513170201519829813502598048571527525832321603469727333013783644758097447145892450114199502923721634291709325075216333487189945"}
J := {"x": "2.6947492259349643004091089744034970540126369020043674040677163408548222003028052303873644198907562140236305245411385335834216125743239790258798480317634911061928679646784585755938923302877303755122490215639946250310365483445526297491305120603959714599793936047662843910741331953087223071158528033388209141442574950304002929879098524503937284160893262549431279977141199435296987064218235747751936089258237350606866254071710082411595509206642486246342191561080757528413209432653297993606284645456602869148464117344850527484494348209260710024039883187657096100726696928497342384575937207179099040698890599261011564208853263122268904951126761810048338266019319565768761076629396643545038082056799234867990835637401842396806366238243948362180808310535800488996871902480461916904610840950621553567429977932064786517237200312698123785696205066885651352661561500172865781325112792727805564311207372271110299405061614823057439365917775108661935294084384802065827243499178977583269865980934924894142386920399295010131607435372272940934718401032471316027656529178961411865901718584510026633955875559819284466824463460074669071917098991622204808990201782021337083014625738320907213618842839199709540149128549159603937087362378418174488449101211069831286195023377905440238686996466592143659828212478004382499565356289350137240237727945515645876295194252369232083250185682204020582748315393546174606514494906920985271492364136993561794079045488248079785922252816033740587485551312916587041356161284183198918274545379180593244724727507354529065350889709413632342480018638856234468120593379709631685052514599164798716045838566268421196308254747157323905677591669568960364194285783311709060998000876851457229072403109562358721470416164692943690635634263862442551789905448940634416705783298196477199652913292141964919089953862416145962713273108234849192037441352250435620673281221386965610295667251199383497955441665595731952435957753836632423681318768170629038518569390421995953485094569698165829537774936881880549744", "y": "-4.5456526618056202899024428961432488603327449434185533144819990060980567105517124488455879250734021383312694453113056964660569689071581773322847366681502323273854874380186670140763632464248387454393319779766578661828130567822049659658360820251165315317125686467060677427254240154186301673435617779037655533107062892116117750406475009502822838755647183793838266920494695635862299938045219920817532545597173229962931435385613855083632197239719150885165050399068000869471459966826049051514380377010864136320881231677508090419060889617176445124814768429264992789715981808308690126374408239334719327334275978691436874796195859918673990057450791393809248375809586393937809766661906353466623809841691215473180759474839876885204700939289067176813930133607279398554244491347571053405827588447125248041902222964520990040686627339939530132492909322213628693543467440281918694342715864337269198612854875264943427419404099947362245874480937740729127277108475514965956402724852929144644501195847559386880232676655600029389401059304855764073494591931478780708922051951960910736448783466027498834120003403414620019244477086946258665095094302868852171927733740561993466390637200569764101931479351639099802716926222813734410285809949135865280103024567551458960545834035237601989593806726644656926028618841997308761955232529039999586542408333754382028173992298154379229594364623723990020660058448829909020177968552959490351715701855692740099517442674781848661056266772580530569867640106410572490639120755503736528747687003870157222350812625391174864642898457553890946037657639294074135150866089889126688383949480628599174377472675356534968148651072467124780083987738028426074035316723160347173661780004717191749601684459508611295606793213765111198538360904109579148572429944066286254343871528141550098449197731711011922229076028023718285024344768349683542068381135374854161571248758303425758392941976518301665255445941900856445153191140539966154674639158919051055506859630932720330753736686936410497788979942951276865596"}
I := {"x": "2.9252125294960027089272014257610083129189006198022040867355567308820341680977762139116707164879232659870456146855082567885076589637965333578842706637111174644321837178778687471551441070183636319001108622047735363698454045904066628797588429480071365515326028071719144516997100449639568473284092290198672864450738976952629997366609700716326791108004939952592896592916272129107438513386300562152229499490985374598924111915860177811033726028180909136128367607911729996719261958566816165804083752217696381530995094864288853662994200771037742891903754698858486704369116479830057296224929328520633952699426821001408595504899337532052576183884079008845980039628456096408788677954752595772362513384197020877447377323988768218659452990196701042925729241845260676071910012904881030887404902575455972624456575452250324928404188387013076989582720985483384796774254001452257635830824700643562146536237028749773333522335833302521350842860280104751672834812234878262173844248513370160935328721689836506253253649725046484974410224596242222210518632722485896076924666961402383246663285867472297935668481163024530437585197507477947487455810010112065508619610978162323096354931913929000026015436042398039202335119005657605203259301921173646724180383012877365751944704890205201922264283938126323758577474641091510907612721560305380109840641293586814951891106371146610806971802209469855635567067941670401252592115462380653994828245554978011745997985419634553243639344546375220321201533501558526198973859744404194310089111299036018655637183809580388861021113429087201146545108315200586867947708325932639630641603090928227613674983790354857300114383314688128473525659129686212906769288528176195907979990588631472447227436874267965251780821216031391120276651379445893361734830447292108866472592744875341664715675653829053013625002653649019470239848148209936535188894467574101586618311843682146313211037497534251838739590650756037541232770680657918073668070154353030154933386997277411450036946355235247340817380060973782177056", "y": "-5.4418366518905812502921998146790338494230646964022068468086102432063084646901181367422925088650243367117069565379642087505210998350559266172455123180079471621106329583785789826673154447608859563183410695709852239386074373806697512251458615382395529995836663730965899057308149991302762764568609448467744484743312464779157564630454401251530112910150078836243690160966016811440014250286850990850313902954436818690225267714385320081984407664271049657081560667624997174672556684924165476163149183384274275391578506868270017846116346697123281110449734932122038889863057066284081002227463257098539688609488394528098440077277292704532875900134238735557623937676801237703988153541958203783396649357418774103101555811238848628383460579993449467285866448969627294276783160419139870115520561587915173160547647559098193846977892642516727758833882616599310935285941351698152993438020277969476206560667586094012739179697999781116023343572761711661782159847794699018701271648782724749048797934147967672597640955965570471990300868534230667207724765335719037653480091813144055474701221110254363557623271194933677847247536056830350764946766827933215962208386531924824342422216464103582529456034629940001099341172950833102836507800769492562820960131788048802800750834514035232857935059028034566966789871662211283682714160673633279249680194568989755268263390496175653172335457973585478031807851428080475130091890409825621536360255455455628386620335742071974423446799033828429926729591080355221676973288157940359983148332087241093117729788673343998841991909038342472195180998580143848323841249730028588121788983334756238157624588164366968429648094736204246313645773744064019974923160218947497542843094381370832889543445635285739570505703524396434854585015050187286883038642243064828850661671010400259944854839610776347439754443702137169146077273987756660854013336538209312813806940767699401883444399290253204578997556019149348127040229816098431843548922369636696991933440667250332472050139810785286706067215213402913785911"}

Need to prove:
concyclic(D, I, J, K)

Proof:
By line_definition on D, F, perpendicular_line(D, h) we get Line(D, F) == perpendicular_line(D, h)
By line_definition on A, D, i we get i == Line(A, D)
By line_definition on C, J, l we get l == Line(C, J)
By line_definition on C, F, h we get h == Line(C, F)
By line_definition on E, H, k we get k == Line(E, H)
By line_definition on E, B, g we get g == Line(B, E)
By line_definition on G, B, f we get f == Line(B, G)
By line_definition on G, D, perpendicular_line(D, f) we get Line(D, G) == perpendicular_line(D, f)
By line_definition on F, A, h we get h == Line(A, F)
By line_definition on C, E, g we get g == Line(C, E)
By line_definition on B, D, j we get j == Line(B, D)
By line_definition on E, D, perpendicular_line(D, g) we get Line(D, E) == perpendicular_line(D, g)
By line_definition on A, G, f we get f == Line(A, G)
By line_definition on J, G, l we get l == Line(G, J)
By circle_definition on G, F, H, c we get c == Circle(F, G, H)
By circle_definition on E, F, H, c we get c == Circle(E, F, H)
By line_intersection_definition on D, perpendicular_line(D, h), i we get D == line_intersection(i, perpendicular_line(D, h))
By circle_definition on E, F, J, c we get c == Circle(E, F, J)
By perpendicular_line_definition on E, perpendicular_line(D, g), g we get perpendicular_line(D, g) == perpendicular_line(E, g)
By circle_definition on H, F, J, c we get c == Circle(F, H, J)
By line_intersection_definition on D, perpendicular_line(D, g), i we get D == line_intersection(i, perpendicular_line(D, g))
By circle_definition on F, J, G, c we get c == Circle(F, G, J)
By line_intersection_definition on D, j, perpendicular_line(D, g) we get D == line_intersection(j, perpendicular_line(D, g))
By circle_definition on G, E, J, c we get c == Circle(E, G, J)
By line_intersection_definition on A, h, f we get A == line_intersection(f, h)
By line_intersection_definition on B, j, f we get B == line_intersection(f, j)
By perpendicular_line_definition on F, perpendicular_line(D, h), h we get perpendicular_line(D, h) == perpendicular_line(F, h)
By circle_definition on J, G, H, c we get c == Circle(G, H, J)
By line_intersection_definition on D, j, perpendicular_line(D, f) we get D == line_intersection(j, perpendicular_line(D, f))
By circle_definition on H, E, J, c we get c == Circle(E, H, J)
By circle_definition on E, H, G, c we get c == Circle(E, G, H)
By line_intersection_definition on E, k, perpendicular_line(D, g) we get E == line_intersection(k, perpendicular_line(D, g))
By line_intersection_definition on A, f, i we get A == line_intersection(f, i)
By line_intersection_definition on C, h, g we get C == line_intersection(g, h)
By line_intersection_definition on E, g, k we get E == line_intersection(g, k)
By line_intersection_definition on D, perpendicular_line(D, h), j we get D == line_intersection(j, perpendicular_line(D, h))
By line_intersection_definition on D, perpendicular_line(D, h), perpendicular_line(D, g) we get D == line_intersection(perpendicular_line(D, g), perpendicular_line(D, h))
By line_intersection_definition on D, perpendicular_line(D, g), perpendicular_line(D, f) we get D == line_intersection(perpendicular_line(D, f), perpendicular_line(D, g))
By perpendicular_line_definition on A, h, perpendicular_line(D, h) we get h == perpendicular_line(A, perpendicular_line(D, h))
By line_intersection_definition on G, l, f we get G == line_intersection(f, l)
By perpendicular_line_definition on B, f, perpendicular_line(D, f) we get f == perpendicular_line(B, perpendicular_line(D, f))
By line_intersection_definition on G, perpendicular_line(D, f), l we get G == line_intersection(l, perpendicular_line(D, f))
By line_intersection_definition on C, l, g we get C == line_intersection(g, l)
By line_intersection_definition on D, perpendicular_line(D, h), perpendicular_line(D, f) we get D == line_intersection(perpendicular_line(D, f), perpendicular_line(D, h))
By perpendicular_line_definition on C, g, perpendicular_line(D, g) we get g == perpendicular_line(C, perpendicular_line(D, g))
By line_intersection_definition on B, j, g we get B == line_intersection(g, j)
By perpendicular_line_definition on B, g, perpendicular_line(D, g) we get g == perpendicular_line(B, perpendicular_line(D, g))
By perpendicular_line_definition on A, f, perpendicular_line(D, f) we get f == perpendicular_line(A, perpendicular_line(D, f))
By line_intersection_definition on B, g, f we get B == line_intersection(f, g)
By line_intersection_definition on C, l, h we get C == line_intersection(h, l)
By perpendicular_line_definition on G, f, perpendicular_line(D, f) we get f == perpendicular_line(G, perpendicular_line(D, f))
By line_intersection_definition on A, h, i we get A == line_intersection(h, i)
By line_intersection_definition on D, i, perpendicular_line(D, f) we get D == line_intersection(i, perpendicular_line(D, f))
By perpendicular_line_definition on E, g, perpendicular_line(D, g) we get g == perpendicular_line(E, perpendicular_line(D, g))
By perpendicular_line_definition on C, h, perpendicular_line(D, h) we get h == perpendicular_line(C, perpendicular_line(D, h))
By perpendicular_line_definition on F, h, perpendicular_line(D, h) we get h == perpendicular_line(F, perpendicular_line(D, h))
By perpendicular_line_definition on G, perpendicular_line(D, f), f we get perpendicular_line(D, f) == perpendicular_line(G, f)
By between_imply_not_between on H, K, C we get collinear_and_not_between(C, H, K)
By between_imply_not_between on C, K, H we get collinear_and_not_between(H, C, K)
By between_imply_not_between on C, I, G we get collinear_and_not_between(G, C, I)
By between_imply_not_between on G, I, C we get collinear_and_not_between(C, G, I)
By parallel_line_definition on D, j, k we get j == parallel_line(D, k)
By parallel_line_definition on H, k, j we get k == parallel_line(H, j)
By parallel_line_definition on B, j, k we get j == parallel_line(B, k)
By in_imply_collinear on F, A, C we get collinear(A, C, F)
By in_imply_collinear on J, C, G we get collinear(C, G, J)
By in_imply_collinear on E, B, C we get collinear(B, C, E)
By in_imply_collinear on G, B, A we get collinear(A, B, G)
By in_imply_concyclic on F, G, E, J we get concyclic(E, F, G, J)
By in_imply_concyclic on F, E, G, H we get concyclic(E, F, G, H)
By power_of_a_point_on_circle on F, c we get 0 == power_of_a_point(F, c)
By power_of_a_point_in_circle on J, c we get 0 == power_of_a_point(J, c)
By power_of_a_point_on_circle on H, c we get 0 == power_of_a_point(H, c)
By power_of_a_point_on_circle on G, c we get 0 == power_of_a_point(G, c)
By power_of_a_point_on_circle on E, c we get 0 == power_of_a_point(E, c)
By angles_on_chord_v0 on G, F, E, J, c we get angle(G, E, F) == angle(G, J, F) mod 360
By angles_on_chord_v1 on J, H, G, F, c we get angle(J, F, H) == angle(J, G, H) mod 360
By angles_on_chord_v1 on J, H, E, F, c we get angle(J, E, H) == angle(J, F, H) mod 360
By angles_on_chord_v1 on E, J, F, G, c we get angle(E, F, J) == angle(E, G, J) mod 360
By angles_on_chord_v0 on J, G, F, H, c we get angle(J, F, G) == angle(J, H, G) mod 360
By angles_on_chord_v1 on F, G, E, H, c we get angle(F, E, G) == angle(F, H, G) mod 360
By angles_on_chord_v2 on G, H, E, F, c we get angle(G, E, H) == angle(G, F, H) + 180 mod 360
By angles_on_chord_v1 on F, G, E, J, c we get angle(F, E, G) == angle(F, J, G) mod 360
By angles_on_chord_v2 on H, E, G, J, c we get angle(H, G, E) == angle(H, J, E) + 180 mod 360
By angles_on_chord_v1 on H, F, E, G, c we get angle(H, E, F) == angle(H, G, F) mod 360
By angles_on_chord_v2 on H, E, F, J, c we get angle(H, F, E) == angle(H, J, E) + 180 mod 360
By angles_on_chord_v0 on J, E, H, F, c we get angle(J, F, E) == angle(J, H, E) mod 360
By angles_on_chord_v1 on E, J, H, G, c we get angle(E, G, J) == angle(E, H, J) mod 360
By angles_on_chord_v1 on J, F, G, E, c we get angle(J, E, F) == angle(J, G, F) mod 360
By angles_on_chord_v0 on F, H, E, G, c we get angle(F, E, H) == angle(F, G, H) mod 360
By angles_on_chord_v2 on J, G, H, E, c we get angle(J, H, G) == angle(J, E, G) + 180 mod 360
By angles_on_chord_v1 on F, E, J, H, c we get angle(F, H, E) == angle(F, J, E) mod 360
By angles_on_chord_v0 on E, G, J, F, c we get angle(E, F, G) == angle(E, J, G) mod 360
By angles_on_chord_v3 on F, J, H, E, c we get angle(F, H, J) == angle(F, E, J) + 180 mod 360
By angles_on_chord_v0 on H, J, F, G, c we get angle(H, F, J) == angle(H, G, J) mod 360
By angles_on_chord_v3 on J, F, E, H, c we get angle(J, E, F) == angle(J, H, F) + 180 mod 360
By angles_on_chord_v0 on H, J, F, E, c we get angle(H, E, J) == angle(H, F, J) mod 360
By angles_on_chord_v1 on G, E, H, F, c we get angle(G, F, E) == angle(G, H, E) mod 360
By angles_on_chord_v0 on E, F, H, J, c we get angle(E, H, F) == angle(E, J, F) mod 360
By angles_on_chord_v1 on H, F, J, E, c we get angle(H, E, F) == angle(H, J, F) mod 360
By angles_on_chord_v3 on H, G, J, F, c we get angle(H, J, G) == angle(H, F, G) + 180 mod 360
By angles_on_chord_v1 on H, F, G, J, c we get angle(H, G, F) == angle(H, J, F) mod 360
By angles_on_chord_v0 on G, F, H, E, c we get angle(G, E, F) == angle(G, H, F) mod 360
By angles_on_chord_v0 on F, H, J, E, c we get angle(F, E, H) == angle(F, J, H) mod 360
By angles_on_chord_v1 on H, G, J, E, c we get angle(H, E, G) == angle(H, J, G) mod 360
By angles_on_chord_v3 on J, G, E, H, c we get angle(J, E, G) == angle(J, H, G) + 180 mod 360
By angles_on_chord_v3 on G, H, F, E, c we get angle(G, F, H) == angle(G, E, H) + 180 mod 360
By angles_on_chord_v0 on G, F, H, J, c we get angle(G, H, F) == angle(G, J, F) mod 360
By angles_on_chord_v3 on F, E, J, G, c we get angle(F, J, E) == angle(F, G, E) + 180 mod 360
By angles_on_chord_v1 on J, H, E, G, c we get angle(J, E, H) == angle(J, G, H) mod 360
By angles_on_chord_v1 on E, J, F, H, c we get angle(E, F, J) == angle(E, H, J) mod 360
By angles_on_chord_v2 on H, G, F, J, c we get angle(H, F, G) == angle(H, J, G) + 180 mod 360
By angles_on_chord_v2 on E, F, J, G, c we get angle(E, J, F) == angle(E, G, F) + 180 mod 360
By angles_on_chord_v0 on J, E, G, H, c we get angle(J, G, E) == angle(J, H, E) mod 360
By angles_on_chord_v3 on F, E, H, G, c we get angle(F, H, E) == angle(F, G, E) + 180 mod 360
By angles_on_chord_v0 on H, J, G, E, c we get angle(H, E, J) == angle(H, G, J) mod 360
By angles_on_chord_v1 on G, J, F, H, c we get angle(G, F, J) == angle(G, H, J) mod 360
By angles_on_chord_v3 on J, G, E, F, c we get angle(J, E, G) == angle(J, F, G) + 180 mod 360
By angles_on_chord_v0 on F, J, E, G, c we get angle(F, E, J) == angle(F, G, J) mod 360
By angles_on_chord_v3 on G, H, F, J, c we get angle(G, F, H) == angle(G, J, H) + 180 mod 360
By angles_on_chord_v0 on F, H, J, G, c we get angle(F, G, H) == angle(F, J, H) mod 360
By angles_on_chord_v1 on E, H, F, G, c we get angle(E, F, H) == angle(E, G, H) mod 360
By angles_on_chord_v2 on E, H, J, F, c we get angle(E, J, H) == angle(E, F, H) + 180 mod 360
By angles_on_chord_v0 on E, G, J, H, c we get angle(E, H, G) == angle(E, J, G) mod 360
By angles_on_chord_v2 on F, E, G, J, c we get angle(F, G, E) == angle(F, J, E) + 180 mod 360
By angles_on_chord_v1 on G, E, F, J, c we get angle(G, F, E) == angle(G, J, E) mod 360
By angles_on_chord_v2 on G, J, E, F, c we get angle(G, E, J) == angle(G, F, J) + 180 mod 360
By angles_on_chord_v2 on H, G, F, E, c we get angle(H, F, G) == angle(H, E, G) + 180 mod 360
By angles_on_chord_v2 on E, F, H, G, c we get angle(E, H, F) == angle(E, G, F) + 180 mod 360
By angles_on_chord_v0 on E, G, F, H, c we get angle(E, F, G) == angle(E, H, G) mod 360
By angles_on_chord_v3 on E, F, G, H, c we get angle(E, G, F) == angle(E, H, F) + 180 mod 360
By angles_on_chord_v0 on G, H, J, E, c we get angle(G, E, H) == angle(G, J, H) mod 360
By angles_on_chord_v0 on J, E, F, G, c we get angle(J, F, E) == angle(J, G, E) mod 360
By angles_on_chord_v3 on E, F, G, J, c we get angle(E, G, F) == angle(E, J, F) + 180 mod 360
By angles_on_chord_v3 on H, E, J, F, c we get angle(H, J, E) == angle(H, F, E) + 180 mod 360
By angles_on_chord_v2 on E, H, J, G, c we get angle(E, J, H) == angle(E, G, H) + 180 mod 360
By angles_on_chord_v3 on H, E, J, G, c we get angle(H, J, E) == angle(H, G, E) + 180 mod 360
By angles_on_chord_v2 on G, H, J, F, c we get angle(G, J, H) == angle(G, F, H) + 180 mod 360
By angles_on_chord_v1 on G, E, J, H, c we get angle(G, H, E) == angle(G, J, E) mod 360
By angles_on_chord_v3 on G, J, F, E, c we get angle(G, F, J) == angle(G, E, J) + 180 mod 360
By angles_on_chord_v3 on E, H, G, J, c we get angle(E, G, H) == angle(E, J, H) + 180 mod 360
By angles_on_chord_v3 on J, F, G, H, c we get angle(J, G, F) == angle(J, H, F) + 180 mod 360
By angles_on_chord_v2 on F, J, G, H, c we get angle(F, G, J) == angle(F, H, J) + 180 mod 360
By angles_on_chord_v3 on G, J, H, E, c we get angle(G, H, J) == angle(G, E, J) + 180 mod 360
By angles_on_chord_v0 on H, E, F, G, c we get angle(H, F, E) == angle(H, G, E) mod 360
By angles_on_chord_v2 on G, J, E, H, c we get angle(G, E, J) == angle(G, H, J) + 180 mod 360
By angles_on_chord_v3 on E, H, F, J, c we get angle(E, F, H) == angle(E, J, H) + 180 mod 360
By angles_on_chord_v3 on H, G, E, F, c we get angle(H, E, G) == angle(H, F, G) + 180 mod 360
By angles_on_chord_v2 on F, E, G, H, c we get angle(F, G, E) == angle(F, H, E) + 180 mod 360
By angles_on_chord_v2 on J, G, F, E, c we get angle(J, F, G) == angle(J, E, G) + 180 mod 360
By angles_on_chord_v1 on F, G, H, J, c we get angle(F, H, G) == angle(F, J, G) mod 360
By angles_on_chord_v2 on F, J, E, H, c we get angle(F, E, J) == angle(F, H, J) + 180 mod 360
By angles_on_chord_v2 on J, F, H, E, c we get angle(J, H, F) == angle(J, E, F) + 180 mod 360
By angles_on_chord_v2 on J, F, H, G, c we get angle(J, H, F) == angle(J, G, F) + 180 mod 360
By angles_on_chord_v3 on F, J, H, G, c we get angle(F, H, J) == angle(F, G, J) + 180 mod 360
By same_angle_v1 on C, H, K, G we get angle(H, C, G) == angle(K, C, G) mod 360
By same_angle_v1 on C, H, K, B we get angle(H, C, B) == angle(K, C, B) mod 360
By same_angle_v0 on C, I, G, A we get angle(G, C, A) == angle(I, C, A) mod 360
By same_angle_v1 on C, G, I, B we get angle(G, C, B) == angle(I, C, B) mod 360
By same_angle_v0 on C, K, H, A we get angle(H, C, A) == angle(K, C, A) mod 360
By altitude_definition on D, C, B, perpendicular_line(D, g) we get altitude(D, B, C) == perpendicular_line(D, g)
By collinear_definition on C, I, G we get I in Line(C, G), G in Line(C, I), Line(C, G) == Line(C, I), 0 == 2 * angle(I, C, G) mod 360
By collinear_definition on I, G, C we get G in Line(C, I), C in Line(G, I), Line(C, I) == Line(G, I), 0 == 2 * angle(G, I, C) mod 360
By collinear_definition on K, H, C we get H in Line(C, K), C in Line(H, K), Line(C, K) == Line(H, K), 0 == 2 * angle(H, K, C) mod 360
By collinear_definition on G, C, I we get C in Line(G, I), I in Line(C, G), Line(C, G) == Line(G, I), 0 == 2 * angle(C, G, I) mod 360
By collinear_definition on C, G, I we get G in Line(C, I), I in Line(C, G), Line(C, G) == Line(C, I), 0 == 2 * angle(G, C, I) mod 360
By collinear_definition on G, I, C we get I in Line(C, G), C in Line(G, I), Line(C, G) == Line(G, I), 0 == 2 * angle(I, G, C) mod 360
By log_of_2_times_distance on H, C, K, C we get log(distance(C, H)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(C, K))
By log_of_2_times_distance on H, C, K, H we get log(distance(C, H)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(H, K))
By altitude_definition on D, B, A, perpendicular_line(D, f) we get altitude(D, A, B) == perpendicular_line(D, f)
By collinear_definition on I, C, G we get C in Line(G, I), G in Line(C, I), Line(C, I) == Line(G, I), 0 == 2 * angle(C, I, G) mod 360
By collinear_definition on C, H, K we get H in Line(C, K), K in Line(C, H), Line(C, H) == Line(C, K), 0 == 2 * angle(H, C, K) mod 360
By log_of_2_times_distance on C, G, I, C we get log(distance(C, G)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(C, I))
By collinear_definition on K, C, H we get C in Line(H, K), H in Line(C, K), Line(C, K) == Line(H, K), 0 == 2 * angle(C, K, H) mod 360
By log_of_2_times_distance on G, C, G, I we get log(distance(C, G)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(G, I))
By collinear_definition on H, C, K we get C in Line(H, K), K in Line(C, H), Line(C, H) == Line(H, K), 0 == 2 * angle(C, H, K) mod 360
By collinear_definition on C, K, H we get K in Line(C, H), H in Line(C, K), Line(C, H) == Line(C, K), 0 == 2 * angle(K, C, H) mod 360
By altitude_definition on D, A, C, perpendicular_line(D, h) we get altitude(D, A, C) == perpendicular_line(D, h)
By collinear_definition on H, K, C we get K in Line(C, H), C in Line(H, K), Line(C, H) == Line(H, K), 0 == 2 * angle(K, H, C) mod 360
By incenter_concurrency on C, B, A we get incenter(A, B, C) in internal_angle_bisector(A, B, C), incenter(A, B, C) in internal_angle_bisector(B, A, C), incenter(A, B, C) in internal_angle_bisector(A, C, B)
By between_implies_angles on H, K, C we get 180 == angle(H, K, C) mod 360, 0 == angle(K, C, H) mod 360, 0 == angle(C, H, K) mod 360
By between_implies_angles on C, I, G we get 180 == angle(C, I, G) mod 360, 0 == angle(I, G, C) mod 360, 0 == angle(G, C, I) mod 360
By between_implies_angles on C, K, H we get 180 == angle(C, K, H) mod 360, 0 == angle(K, H, C) mod 360, 0 == angle(H, C, K) mod 360
By between_implies_angles on G, I, C we get 180 == angle(G, I, C) mod 360, 0 == angle(I, C, G) mod 360, 0 == angle(C, G, I) mod 360
By concyclic_sufficient_conditions_v1 on F, E, J, H we get concyclic(E, F, H, J)
By concurrent_sufficient_conditions on Line(D, G), Line(D, F), i we get concurrent(i, Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on f, Line(D, G), l we get concurrent(f, l, Line(D, G))
By concyclic_sufficient_conditions_v1 on G, J, H, F we get concyclic(F, G, H, J)
By concyclic_sufficient_conditions_v0 on G, H, E, J we get concyclic(E, G, H, J)
By concurrent_sufficient_conditions on Line(D, E), Line(D, F), j we get concurrent(j, Line(D, E), Line(D, F))
By line_definition on D, C, internal_angle_bisector(A, C, B) we get Line(C, D) == internal_angle_bisector(A, C, B)
By concurrent_sufficient_conditions on Line(D, G), i, Line(D, E) we get concurrent(i, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on j, Line(D, F), i we get concurrent(i, j, Line(D, F))
By concurrent_sufficient_conditions on Line(D, G), Line(D, E), i we get concurrent(i, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(D, F), j, Line(D, E) we get concurrent(j, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, E), Line(D, F), Line(D, G) we get concurrent(Line(D, E), Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on l, f, Line(D, G) we get concurrent(f, l, Line(D, G))
By concurrent_sufficient_conditions on i, j, Line(D, F) we get concurrent(i, j, Line(D, F))
By concurrent_sufficient_conditions on j, i, Line(D, E) we get concurrent(i, j, Line(D, E))
By concurrent_sufficient_conditions on Line(D, F), i, Line(D, G) we get concurrent(i, Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(D, E), k, g we get concurrent(g, k, Line(D, E))
By line_definition on J, I, l we get l == Line(I, J)
By concurrent_sufficient_conditions on Line(D, E), g, k we get concurrent(g, k, Line(D, E))
By concurrent_sufficient_conditions on g, k, Line(D, E) we get concurrent(g, k, Line(D, E))
By concurrent_sufficient_conditions on j, Line(D, G), Line(D, E) we get concurrent(j, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(D, E), Line(D, F), i we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on i, Line(D, G), j we get concurrent(i, j, Line(D, G))
By concurrent_sufficient_conditions on i, Line(D, F), j we get concurrent(i, j, Line(D, F))
By concurrent_sufficient_conditions on Line(D, E), j, Line(D, G) we get concurrent(j, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(D, G), i, Line(D, F) we get concurrent(i, Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(D, E), Line(D, G), Line(D, F) we get concurrent(Line(D, E), Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on j, i, Line(D, F) we get concurrent(i, j, Line(D, F))
By concurrent_sufficient_conditions on Line(D, G), i, j we get concurrent(i, j, Line(D, G))
By concurrent_sufficient_conditions on i, Line(D, E), Line(D, G) we get concurrent(i, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(D, E), i, Line(D, G) we get concurrent(i, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on g, Line(D, E), k we get concurrent(g, k, Line(D, E))
By concurrent_sufficient_conditions on k, Line(D, E), g we get concurrent(g, k, Line(D, E))
By concurrent_sufficient_conditions on Line(D, G), l, f we get concurrent(f, l, Line(D, G))
By concurrent_sufficient_conditions on f, l, Line(D, G) we get concurrent(f, l, Line(D, G))
By concurrent_sufficient_conditions on k, g, Line(D, E) we get concurrent(g, k, Line(D, E))
By concurrent_sufficient_conditions on Line(D, F), Line(D, E), i we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, E), Line(D, G), j we get concurrent(j, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(D, G), Line(D, F), j we get concurrent(j, Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on j, i, Line(D, G) we get concurrent(i, j, Line(D, G))
By concurrent_sufficient_conditions on Line(D, G), Line(D, E), Line(D, F) we get concurrent(Line(D, E), Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(D, F), j, Line(D, G) we get concurrent(j, Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on j, Line(D, E), Line(D, F) we get concurrent(j, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), Line(D, G), Line(D, E) we get concurrent(Line(D, E), Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(D, E), i, j we get concurrent(i, j, Line(D, E))
By concurrent_sufficient_conditions on Line(D, F), i, Line(D, E) we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), Line(D, G), j we get concurrent(j, Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on j, Line(D, E), i we get concurrent(i, j, Line(D, E))
By concurrent_sufficient_conditions on i, j, Line(D, G) we get concurrent(i, j, Line(D, G))
By concurrent_sufficient_conditions on i, Line(D, G), Line(D, E) we get concurrent(i, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(D, E), j, i we get concurrent(i, j, Line(D, E))
By concurrent_sufficient_conditions on Line(D, G), j, Line(D, E) we get concurrent(j, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(D, G), j, Line(D, F) we get concurrent(j, Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on j, Line(D, F), Line(D, G) we get concurrent(j, Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on i, Line(D, F), Line(D, G) we get concurrent(i, Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(D, F), Line(D, E), j we get concurrent(j, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on j, Line(D, G), i we get concurrent(i, j, Line(D, G))
By concurrent_sufficient_conditions on j, Line(D, G), Line(D, F) we get concurrent(j, Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on i, Line(D, G), Line(D, F) we get concurrent(i, Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(D, E), Line(D, G), i we get concurrent(i, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on l, Line(D, G), f we get concurrent(f, l, Line(D, G))
By concurrent_sufficient_conditions on i, Line(D, F), Line(D, E) we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on i, j, Line(D, E) we get concurrent(i, j, Line(D, E))
By concurrent_sufficient_conditions on Line(D, F), Line(D, G), i we get concurrent(i, Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(D, G), j, i we get concurrent(i, j, Line(D, G))
By concurrent_sufficient_conditions on Line(D, E), i, Line(D, F) we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on j, Line(D, F), Line(D, E) we get concurrent(j, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on i, Line(D, E), Line(D, F) we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), i, j we get concurrent(i, j, Line(D, F))
By concurrent_sufficient_conditions on j, Line(D, E), Line(D, G) we get concurrent(j, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(D, F), j, i we get concurrent(i, j, Line(D, F))
By concurrent_sufficient_conditions on Line(D, E), j, Line(D, F) we get concurrent(j, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), Line(D, E), Line(D, G) we get concurrent(Line(D, E), Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on i, Line(D, E), j we get concurrent(i, j, Line(D, E))
By concurrent_sufficient_conditions on Line(D, G), Line(D, E), j we get concurrent(j, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(D, G), Line(D, F), Line(D, E) we get concurrent(Line(D, E), Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(D, G), f, l we get concurrent(f, l, Line(D, G))
By line_intersection_definition on E, k, Line(E, J) we get E == line_intersection(k, Line(E, J))
By line_intersection_definition on J, Line(F, J), l we get J == line_intersection(l, Line(F, J))
By line_intersection_definition on H, Line(H, J), Line(G, H) we get H == line_intersection(Line(G, H), Line(H, J))
By concurrent_sufficient_conditions on Line(D, G), internal_angle_bisector(A, C, B), j we get concurrent(j, Line(D, G), internal_angle_bisector(A, C, B))
By line_intersection_definition on E, g, Line(E, J) we get E == line_intersection(g, Line(E, J))
By line_intersection_definition on G, Line(F, G), l we get G == line_intersection(l, Line(F, G))
By line_intersection_definition on G, Line(D, G), Line(E, G) we get G == line_intersection(Line(D, G), Line(E, G))
By line_intersection_definition on D, Line(D, F), internal_angle_bisector(A, C, B) we get D == line_intersection(Line(D, F), internal_angle_bisector(A, C, B))
By line_intersection_definition on G, Line(D, G), Line(F, G) we get G == line_intersection(Line(D, G), Line(F, G))
By line_intersection_definition on C, internal_angle_bisector(A, C, B), g we get C == line_intersection(g, internal_angle_bisector(A, C, B))
By line_intersection_definition on F, Line(E, F), Line(F, J) we get F == line_intersection(Line(E, F), Line(F, J))
By line_intersection_definition on E, Line(D, E), Line(E, G) we get E == line_intersection(Line(D, E), Line(E, G))
By line_intersection_definition on C, internal_angle_bisector(A, C, B), l we get C == line_intersection(l, internal_angle_bisector(A, C, B))
By line_intersection_definition on F, Line(E, F), Line(F, G) we get F == line_intersection(Line(E, F), Line(F, G))
By line_intersection_definition on E, Line(E, F), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, F))
By line_intersection_definition on F, Line(E, F), Line(D, F) we get F == line_intersection(Line(D, F), Line(E, F))
By line_intersection_definition on F, Line(F, G), Line(F, H) we get F == line_intersection(Line(F, G), Line(F, H))
By line_intersection_definition on F, Line(F, J), h we get F == line_intersection(h, Line(F, J))
By line_intersection_definition on E, Line(E, G), k we get E == line_intersection(k, Line(E, G))
By line_intersection_definition on H, Line(F, H), Line(C, H) we get H == line_intersection(Line(C, H), Line(F, H))
By line_intersection_definition on E, Line(D, E), Line(E, J) we get E == line_intersection(Line(D, E), Line(E, J))
By line_intersection_definition on E, g, Line(E, F) we get E == line_intersection(g, Line(E, F))
By line_intersection_definition on C, Line(C, H), g we get C == line_intersection(g, Line(C, H))
By line_intersection_definition on E, Line(E, G), Line(E, F) we get E == line_intersection(Line(E, F), Line(E, G))
By line_intersection_definition on J, Line(E, J), l we get J == line_intersection(l, Line(E, J))
By line_intersection_definition on C, Line(C, H), internal_angle_bisector(A, C, B) we get C == line_intersection(Line(C, H), internal_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on internal_angle_bisector(A, C, B), Line(D, E), i we get concurrent(i, Line(D, E), internal_angle_bisector(A, C, B))
By line_intersection_definition on F, h, Line(F, G) we get F == line_intersection(h, Line(F, G))
By line_intersection_definition on F, Line(D, F), Line(F, J) we get F == line_intersection(Line(D, F), Line(F, J))
By line_intersection_definition on E, Line(E, F), Line(E, J) we get E == line_intersection(Line(E, F), Line(E, J))
By line_intersection_definition on E, k, Line(E, F) we get E == line_intersection(k, Line(E, F))
By concurrent_sufficient_conditions on Line(D, F), internal_angle_bisector(A, C, B), j we get concurrent(j, Line(D, F), internal_angle_bisector(A, C, B))
By line_intersection_definition on J, Line(F, J), Line(H, J) we get J == line_intersection(Line(F, J), Line(H, J))
By line_intersection_definition on F, Line(F, J), Line(F, G) we get F == line_intersection(Line(F, G), Line(F, J))
By line_intersection_definition on F, Line(F, H), Line(F, J) we get F == line_intersection(Line(F, H), Line(F, J))
By line_intersection_definition on E, Line(E, J), Line(E, G) we get E == line_intersection(Line(E, G), Line(E, J))
By line_intersection_definition on F, h, Line(E, F) we get F == line_intersection(h, Line(E, F))
By line_intersection_definition on F, Line(F, H), h we get F == line_intersection(h, Line(F, H))
By line_intersection_definition on G, Line(F, G), f we get G == line_intersection(f, Line(F, G))
By line_intersection_definition on G, Line(E, G), l we get G == line_intersection(l, Line(E, G))
By line_intersection_definition on H, k, Line(G, H) we get H == line_intersection(k, Line(G, H))
By line_intersection_definition on H, k, Line(C, H) we get H == line_intersection(k, Line(C, H))
By line_intersection_definition on H, Line(C, H), Line(G, H) we get H == line_intersection(Line(C, H), Line(G, H))
By line_intersection_definition on C, Line(C, H), h we get C == line_intersection(h, Line(C, H))
By concurrent_sufficient_conditions on Line(D, F), internal_angle_bisector(A, C, B), i we get concurrent(i, Line(D, F), internal_angle_bisector(A, C, B))
By line_intersection_definition on E, Line(E, G), g we get E == line_intersection(g, Line(E, G))
By concurrent_sufficient_conditions on internal_angle_bisector(A, C, B), Line(D, G), j we get concurrent(j, Line(D, G), internal_angle_bisector(A, C, B))
By line_intersection_definition on C, Line(C, H), l we get C == line_intersection(l, Line(C, H))
By line_intersection_definition on F, Line(F, G), Line(D, F) we get F == line_intersection(Line(D, F), Line(F, G))
By line_intersection_definition on G, f, Line(E, G) we get G == line_intersection(f, Line(E, G))
By line_intersection_definition on D, internal_angle_bisector(A, C, B), Line(D, E) we get D == line_intersection(Line(D, E), internal_angle_bisector(A, C, B))
By line_intersection_definition on J, Line(H, J), Line(E, J) we get J == line_intersection(Line(E, J), Line(H, J))
By concurrent_sufficient_conditions on internal_angle_bisector(A, C, B), Line(D, F), j we get concurrent(j, Line(D, F), internal_angle_bisector(A, C, B))
By line_intersection_definition on D, internal_angle_bisector(A, C, B), Line(D, G) we get D == line_intersection(Line(D, G), internal_angle_bisector(A, C, B))
By line_intersection_definition on G, Line(G, H), l we get G == line_intersection(l, Line(G, H))
By concurrent_sufficient_conditions on internal_angle_bisector(A, C, B), Line(D, F), i we get concurrent(i, Line(D, F), internal_angle_bisector(A, C, B))
By line_intersection_definition on J, Line(F, J), Line(E, J) we get J == line_intersection(Line(E, J), Line(F, J))
By concurrent_sufficient_conditions on Line(D, G), internal_angle_bisector(A, C, B), i we get concurrent(i, Line(D, G), internal_angle_bisector(A, C, B))
By line_intersection_definition on H, Line(F, H), Line(G, H) we get H == line_intersection(Line(F, H), Line(G, H))
By line_intersection_definition on G, Line(F, G), Line(G, H) we get G == line_intersection(Line(F, G), Line(G, H))
By line_intersection_definition on G, f, Line(G, H) we get G == line_intersection(f, Line(G, H))
By line_intersection_definition on H, Line(H, J), k we get H == line_intersection(k, Line(H, J))
By line_intersection_definition on C, internal_angle_bisector(A, C, B), h we get C == line_intersection(h, internal_angle_bisector(A, C, B))
By line_intersection_definition on H, Line(C, H), Line(H, J) we get H == line_intersection(Line(C, H), Line(H, J))
By line_intersection_definition on H, Line(H, J), Line(F, H) we get H == line_intersection(Line(F, H), Line(H, J))
By line_intersection_definition on G, Line(E, G), Line(G, H) we get G == line_intersection(Line(E, G), Line(G, H))
By line_intersection_definition on F, Line(D, F), Line(F, H) we get F == line_intersection(Line(D, F), Line(F, H))
By concurrent_sufficient_conditions on Line(D, E), internal_angle_bisector(A, C, B), i we get concurrent(i, Line(D, E), internal_angle_bisector(A, C, B))
By line_intersection_definition on H, Line(F, H), k we get H == line_intersection(k, Line(F, H))
By line_intersection_definition on F, Line(F, H), Line(E, F) we get F == line_intersection(Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on internal_angle_bisector(A, C, B), Line(D, E), j we get concurrent(j, Line(D, E), internal_angle_bisector(A, C, B))
By line_intersection_definition on G, Line(F, G), Line(E, G) we get G == line_intersection(Line(E, G), Line(F, G))
By line_intersection_definition on J, Line(H, J), l we get J == line_intersection(l, Line(H, J))
By concurrent_sufficient_conditions on Line(D, E), internal_angle_bisector(A, C, B), j we get concurrent(j, Line(D, E), internal_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on internal_angle_bisector(A, C, B), Line(D, G), i we get concurrent(i, Line(D, G), internal_angle_bisector(A, C, B))
By same_angle_v1 on C, H, K, I we get angle(H, C, I) == angle(K, C, I) mod 360
By same_angle_v0 on C, G, I, K we get angle(G, C, K) == angle(I, C, K) mod 360
By same_angle_v0 on G, C, J, E we get angle(C, G, E) == angle(J, G, E) mod 360
By same_angle_v0 on G, C, I, E we get angle(C, G, E) == angle(I, G, E) mod 360
By same_angle_v0 on H, K, C, J we get angle(C, H, J) == angle(K, H, J) mod 360
By same_angle_v0 on H, C, K, G we get angle(C, H, G) == angle(K, H, G) mod 360
By same_angle_v1 on G, C, J, F we get angle(C, G, F) == angle(J, G, F) mod 360
By same_angle_v0 on C, G, I, H we get angle(G, C, H) == angle(I, C, H) mod 360
By same_angle_v1 on G, C, I, F we get angle(C, G, F) == angle(I, G, F) mod 360
By same_angle_v0 on H, C, K, E we get angle(C, H, E) == angle(K, H, E) mod 360
By same_angle_v1 on H, K, C, F we get angle(C, H, F) == angle(K, H, F) mod 360
By projection_definition on B, G, Line(D, G) we get G == projection(B, Line(D, G))
By same_angle_v1 on G, I, C, H we get angle(C, G, H) == angle(I, G, H) mod 360
By same_angle_v1 on G, J, C, H we get angle(C, G, H) == angle(J, G, H) mod 360
By projection_definition on A, G, Line(D, G) we get G == projection(A, Line(D, G))
By projection_definition on C, F, Line(D, F) we get F == projection(C, Line(D, F))
By projection_definition on B, E, Line(D, E) we get E == projection(B, Line(D, E))
By projection_definition on C, E, Line(D, E) we get E == projection(C, Line(D, E))
By projection_definition on A, F, Line(D, F) we get F == projection(A, Line(D, F))
By same_angle_v3 on J, G, C, H we get angle(G, J, H) == angle(C, J, H) + 180 mod 360
By same_angle_v1 on G, I, C, D we get angle(C, G, D) == angle(I, G, D) mod 360
By same_angle_v0 on C, J, G, H we get angle(G, C, H) == angle(J, C, H) mod 360
By same_angle_v1 on C, A, F, B we get angle(A, C, B) == angle(F, C, B) mod 360
By same_angle_v0 on C, E, B, G we get angle(B, C, G) == angle(E, C, G) mod 360
By same_angle_v0 on G, C, I, B we get angle(C, G, B) == angle(I, G, B) mod 360
By same_angle_v2 on J, C, G, E we get angle(C, J, E) == angle(G, J, E) + 180 mod 360
By same_angle_v1 on C, F, A, H we get angle(A, C, H) == angle(F, C, H) mod 360
By same_angle_v1 on G, C, I, A we get angle(C, G, A) == angle(I, G, A) mod 360
By same_angle_v0 on C, B, E, H we get angle(B, C, H) == angle(E, C, H) mod 360
By same_angle_v1 on C, F, A, K we get angle(A, C, K) == angle(F, C, K) mod 360
By same_angle_v1 on C, G, J, B we get angle(G, C, B) == angle(J, C, B) mod 360
By same_angle_v0 on C, G, J, K we get angle(G, C, K) == angle(J, C, K) mod 360
By same_angle_v0 on G, J, C, B we get angle(C, G, B) == angle(J, G, B) mod 360
By same_angle_v0 on C, G, I, F we get angle(G, C, F) == angle(I, C, F) mod 360
By same_angle_v1 on G, C, J, A we get angle(C, G, A) == angle(J, G, A) mod 360
By same_angle_v1 on C, G, I, E we get angle(G, C, E) == angle(I, C, E) mod 360
By same_angle_v1 on C, A, F, G we get angle(A, C, G) == angle(F, C, G) mod 360
By same_angle_v0 on C, B, E, K we get angle(B, C, K) == angle(E, C, K) mod 360
By same_angle_v0 on C, J, G, A we get angle(G, C, A) == angle(J, C, A) mod 360
By same_angle_v1 on C, H, K, E we get angle(H, C, E) == angle(K, C, E) mod 360
By same_angle_v0 on C, E, B, I we get angle(B, C, I) == angle(E, C, I) mod 360
By same_angle_v2 on J, G, C, F we get angle(G, J, F) == angle(C, J, F) + 180 mod 360
By in_imply_collinear on I, J, C we get collinear(C, I, J)
By same_angle_v1 on C, F, A, I we get angle(A, C, I) == angle(F, C, I) mod 360
By perpendicular_direction_conditions_v0_r on D, F, C, A we get 180 == 2 * direction(D, F) - 2 * direction(C, A) mod 360
By same_angle_v0 on C, K, H, F we get angle(H, C, F) == angle(K, C, F) mod 360
By perpendicular_direction_conditions_v0_r on D, E, C, B we get 180 == 2 * direction(D, E) - 2 * direction(C, B) mod 360
By same_angle_v1 on G, C, J, D we get angle(C, G, D) == angle(J, G, D) mod 360
By same_angle_v0 on C, E, B, A we get angle(B, C, A) == angle(E, C, A) mod 360
By same_angle_v1 on C, K, H, J we get angle(H, C, J) == angle(K, C, J) mod 360
By perpendicular_direction_conditions_v0_r on C, A, F, D we get 180 == 2 * direction(C, A) - 2 * direction(F, D) mod 360
By in_imply_collinear on J, I, G we get collinear(G, I, J)
By perpendicular_direction_conditions_v0_r on C, B, D, E we get 180 == 2 * direction(C, B) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on C, A, D, F we get 180 == 2 * direction(C, A) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on E, D, C, B we get 180 == 2 * direction(E, D) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on C, B, E, D we get 180 == 2 * direction(C, B) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on F, D, C, A we get 180 == 2 * direction(F, D) - 2 * direction(C, A) mod 360
By probably_between_and_collinear_implies_between on C, J, G we get between(C, J, G)
By probably_between_and_collinear_implies_between on A, G, B we get between(A, G, B)
By probably_between_and_collinear_implies_between on A, F, C we get between(A, F, C)
By probably_between_and_collinear_implies_between on B, E, C we get between(B, E, C)
By reverse_direction on F, E we get 180 == direction(F, E) - direction(E, F) mod 360
By reverse_direction on C, H we get 180 == direction(C, H) - direction(H, C) mod 360
By reverse_direction on C, I we get 180 == direction(C, I) - direction(I, C) mod 360
By reverse_direction on J, G we get 180 == direction(J, G) - direction(G, J) mod 360
By reverse_direction on G, F we get 180 == direction(G, F) - direction(F, G) mod 360
By collinear_definition on G, J, C we get J in Line(C, G), C in Line(G, J), Line(C, G) == Line(G, J), 0 == 2 * angle(J, G, C) mod 360
By reverse_direction on K, H we get 180 == direction(K, H) - direction(H, K) mod 360
By reverse_direction on H, E we get 180 == direction(H, E) - direction(E, H) mod 360
By reverse_direction on J, H we get 180 == direction(J, H) - direction(H, J) mod 360
By reverse_direction on I, C we get 180 == direction(I, C) - direction(C, I) mod 360
By reverse_direction on E, F we get 180 == direction(E, F) - direction(F, E) mod 360
By reverse_direction on H, G we get 180 == direction(H, G) - direction(G, H) mod 360
By collinear_definition on G, C, J we get C in Line(G, J), J in Line(C, G), Line(C, G) == Line(G, J), 0 == 2 * angle(C, G, J) mod 360
By reverse_direction on C, K we get 180 == direction(C, K) - direction(K, C) mod 360
By reverse_direction on E, H we get 180 == direction(E, H) - direction(H, E) mod 360
By reverse_direction on C, G we get 180 == direction(C, G) - direction(G, C) mod 360
By reverse_direction on F, J we get 180 == direction(F, J) - direction(J, F) mod 360
By reverse_direction on H, J we get 180 == direction(H, J) - direction(J, H) mod 360
By reverse_direction on J, F we get 180 == direction(J, F) - direction(F, J) mod 360
By reverse_direction on E, J we get 180 == direction(E, J) - direction(J, E) mod 360
By reverse_direction on J, E we get 180 == direction(J, E) - direction(E, J) mod 360
By reverse_direction on F, H we get 180 == direction(F, H) - direction(H, F) mod 360
By reverse_direction on H, F we get 180 == direction(H, F) - direction(F, H) mod 360
By reverse_direction on G, J we get 180 == direction(G, J) - direction(J, G) mod 360
By reverse_direction on F, G we get 180 == direction(F, G) - direction(G, F) mod 360
By reverse_direction on H, K we get 180 == direction(H, K) - direction(K, H) mod 360
By reverse_direction on G, H we get 180 == direction(G, H) - direction(H, G) mod 360
By reverse_direction on H, C we get 180 == direction(H, C) - direction(C, H) mod 360
By reverse_direction on G, E we get 180 == direction(G, E) - direction(E, G) mod 360
By reverse_direction on K, C we get 180 == direction(K, C) - direction(C, K) mod 360
By reverse_direction on G, C we get 180 == direction(G, C) - direction(C, G) mod 360
By reverse_direction on E, G we get 180 == direction(E, G) - direction(G, E) mod 360
By reverse_direction on I, G we get 180 == direction(I, G) - direction(G, I) mod 360
By reverse_direction on G, I we get 180 == direction(G, I) - direction(I, G) mod 360
By perpendicular_direction_conditions_v0_r on C, F, F, D we get 180 == 2 * direction(C, F) - 2 * direction(F, D) mod 360
By same_angle_v2 on E, B, C, G we get angle(B, E, G) == angle(C, E, G) + 180 mod 360
By same_angle_v3 on F, C, A, E we get angle(C, F, E) == angle(A, F, E) + 180 mod 360
By same_angle_v3 on E, B, C, F we get angle(B, E, F) == angle(C, E, F) + 180 mod 360
By same_angle_v3 on F, C, A, G we get angle(C, F, G) == angle(A, F, G) + 180 mod 360
By perpendicular_direction_conditions_v0_r on E, B, D, E we get 180 == 2 * direction(E, B) - 2 * direction(D, E) mod 360
By same_angle_v3 on G, A, B, E we get angle(A, G, E) == angle(B, G, E) + 180 mod 360
By perpendicular_direction_conditions_v0_r on D, F, C, F we get 180 == 2 * direction(D, F) - 2 * direction(C, F) mod 360
By same_angle_v1 on C, G, J, E we get angle(G, C, E) == angle(J, C, E) mod 360
By same_angle_v2 on G, A, B, H we get angle(A, G, H) == angle(B, G, H) + 180 mod 360
By same_angle_v1 on C, A, F, E we get angle(A, C, E) == angle(F, C, E) mod 360
By same_angle_v2 on G, A, B, I we get angle(A, G, I) == angle(B, G, I) + 180 mod 360
By same_angle_v3 on G, A, B, J we get angle(A, G, J) == angle(B, G, J) + 180 mod 360
By same_angle_v0 on C, B, E, J we get angle(B, C, J) == angle(E, C, J) mod 360
By same_angle_v2 on E, B, C, H we get angle(B, E, H) == angle(C, E, H) + 180 mod 360
By same_angle_v3 on G, A, B, F we get angle(A, G, F) == angle(B, G, F) + 180 mod 360
By same_angle_v1 on C, F, A, J we get angle(A, C, J) == angle(F, C, J) mod 360
By same_angle_v0 on C, J, G, F we get angle(G, C, F) == angle(J, C, F) mod 360
By perpendicular_direction_conditions_v0_r on C, E, E, D we get 180 == 2 * direction(C, E) - 2 * direction(E, D) mod 360
By same_angle_v3 on E, B, C, J we get angle(B, E, J) == angle(C, E, J) + 180 mod 360
By perpendicular_direction_conditions_v0_r on G, D, G, B we get 180 == 2 * direction(G, D) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on E, D, B, E we get 180 == 2 * direction(E, D) - 2 * direction(B, E) mod 360
By same_angle_v3 on F, C, A, J we get angle(C, F, J) == angle(A, F, J) + 180 mod 360
By same_angle_v0 on C, E, B, F we get angle(B, C, F) == angle(E, C, F) mod 360
By perpendicular_direction_conditions_v0_r on G, D, G, A we get 180 == 2 * direction(G, D) - 2 * direction(G, A) mod 360
By same_angle_v2 on G, A, B, C we get angle(A, G, C) == angle(B, G, C) + 180 mod 360
By perpendicular_direction_conditions_v0_r on D, E, E, C we get 180 == 2 * direction(D, E) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on B, G, D, G we get 180 == 2 * direction(B, G) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on D, F, F, C we get 180 == 2 * direction(D, F) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on F, A, D, F we get 180 == 2 * direction(F, A) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on A, C, D, F we get 180 == 2 * direction(A, C) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on D, F, A, F we get 180 == 2 * direction(D, F) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on C, F, D, F we get 180 == 2 * direction(C, F) - 2 * direction(D, F) mod 360
By same_angle_v3 on F, C, A, H we get angle(C, F, H) == angle(A, F, H) + 180 mod 360
By perpendicular_direction_conditions_v0_r on B, C, E, D we get 180 == 2 * direction(B, C) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on D, G, A, B we get 180 == 2 * direction(D, G) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on G, D, B, G we get 180 == 2 * direction(G, D) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on A, F, F, D we get 180 == 2 * direction(A, F) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on A, C, F, D we get 180 == 2 * direction(A, C) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on G, B, G, D we get 180 == 2 * direction(G, B) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on D, G, G, B we get 180 == 2 * direction(D, G) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on C, E, D, E we get 180 == 2 * direction(C, E) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on D, F, A, C we get 180 == 2 * direction(D, F) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on G, D, A, B we get 180 == 2 * direction(G, D) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on E, D, E, C we get 180 == 2 * direction(E, D) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on B, E, E, D we get 180 == 2 * direction(B, E) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on E, D, B, C we get 180 == 2 * direction(E, D) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on F, D, A, C we get 180 == 2 * direction(F, D) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on F, D, F, C we get 180 == 2 * direction(F, D) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on D, G, B, A we get 180 == 2 * direction(D, G) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on B, G, G, D we get 180 == 2 * direction(B, G) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on G, B, D, G we get 180 == 2 * direction(G, B) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on D, E, C, E we get 180 == 2 * direction(D, E) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on B, A, G, D we get 180 == 2 * direction(B, A) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on D, E, B, C we get 180 == 2 * direction(D, E) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on B, A, D, G we get 180 == 2 * direction(B, A) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on F, D, A, F we get 180 == 2 * direction(F, D) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on D, G, B, G we get 180 == 2 * direction(D, G) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on E, B, E, D we get 180 == 2 * direction(E, B) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on E, C, D, E we get 180 == 2 * direction(E, C) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on A, B, G, D we get 180 == 2 * direction(A, B) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on E, C, E, D we get 180 == 2 * direction(E, C) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on G, D, B, A we get 180 == 2 * direction(G, D) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on E, D, E, B we get 180 == 2 * direction(E, D) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on A, G, G, D we get 180 == 2 * direction(A, G) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on G, A, G, D we get 180 == 2 * direction(G, A) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on A, B, D, G we get 180 == 2 * direction(A, B) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on B, C, D, E we get 180 == 2 * direction(B, C) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on D, F, F, A we get 180 == 2 * direction(D, F) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on D, E, E, B we get 180 == 2 * direction(D, E) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on A, G, D, G we get 180 == 2 * direction(A, G) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on F, D, F, A we get 180 == 2 * direction(F, D) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on D, G, G, A we get 180 == 2 * direction(D, G) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on G, A, D, G we get 180 == 2 * direction(G, A) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on A, F, D, F we get 180 == 2 * direction(A, F) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on F, C, D, F we get 180 == 2 * direction(F, C) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on F, C, F, D we get 180 == 2 * direction(F, C) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on F, D, C, F we get 180 == 2 * direction(F, D) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on D, E, B, E we get 180 == 2 * direction(D, E) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on D, G, A, G we get 180 == 2 * direction(D, G) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on E, D, C, E we get 180 == 2 * direction(E, D) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on B, E, D, E we get 180 == 2 * direction(B, E) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on G, D, A, G we get 180 == 2 * direction(G, D) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on F, A, F, D we get 180 == 2 * direction(F, A) - 2 * direction(F, D) mod 360
By altitude_definition on A, D, G, f we get f == altitude(A, D, G)
By altitude_definition on C, F, D, h we get h == altitude(C, D, F)
By altitude_definition on C, E, D, g we get g == altitude(C, D, E)
By internal_angle_bisector_definition_v0_r on G, C, G, I we get Line(C, I) == internal_angle_bisector(G, I, G)
By collinear_definition on C, F, A we get F in Line(A, C), A in Line(C, F), Line(A, C) == Line(C, F), 0 == 2 * angle(F, C, A) mod 360
By internal_angle_bisector_definition_v0_r on K, H, K, C we get Line(C, H) == internal_angle_bisector(K, C, K)
By collinear_definition on J, G, C we get G in Line(C, J), C in Line(G, J), Line(C, J) == Line(G, J), 0 == 2 * angle(G, J, C) mod 360
By collinear_definition on C, E, B we get E in Line(B, C), B in Line(C, E), Line(B, C) == Line(C, E), 0 == 2 * angle(E, C, B) mod 360
By internal_angle_bisector_definition_v0_r on C, K, C, H we get Line(H, K) == internal_angle_bisector(C, H, C)
By internal_angle_bisector_definition_v0_r on C, G, C, I we get Line(G, I) == internal_angle_bisector(C, I, C)
By collinear_definition on C, G, J we get G in Line(C, J), J in Line(C, G), Line(C, G) == Line(C, J), 0 == 2 * angle(G, C, J) mod 360
By internal_angle_bisector_definition_v0_r on I, C, I, G we get Line(C, G) == internal_angle_bisector(I, G, I)
By internal_angle_bisector_definition_v0_r on H, K, H, C we get Line(C, K) == internal_angle_bisector(H, C, H)
By altitude_definition on A, F, D, h we get h == altitude(A, D, F)
By internal_angle_bisector_definition_v0_r on H, C, H, K we get Line(C, K) == internal_angle_bisector(H, K, H)
By altitude_definition on B, E, D, g we get g == altitude(B, D, E)
By internal_angle_bisector_definition_v0_r on G, I, G, C we get Line(C, I) == internal_angle_bisector(G, C, G)
By reverse_direction on C, A we get 180 == direction(C, A) - direction(A, C) mod 360
By reverse_direction on C, B we get 180 == direction(C, B) - direction(B, C) mod 360
By collinear_definition on C, A, F we get A in Line(C, F), F in Line(A, C), Line(A, C) == Line(C, F), 0 == 2 * angle(A, C, F) mod 360
By collinear_definition on J, C, G we get C in Line(G, J), G in Line(C, J), Line(C, J) == Line(G, J), 0 == 2 * angle(C, J, G) mod 360
By internal_angle_bisector_definition_v0_r on K, C, K, H we get Line(C, H) == internal_angle_bisector(K, H, K)
By collinear_definition on C, J, G we get J in Line(C, G), G in Line(C, J), Line(C, G) == Line(C, J), 0 == 2 * angle(J, C, G) mod 360
By altitude_definition on B, D, G, f we get f == altitude(B, D, G)
By internal_angle_bisector_definition_v0_r on C, I, C, G we get Line(G, I) == internal_angle_bisector(C, G, C)
By internal_angle_bisector_definition_v0_r on C, H, C, K we get Line(H, K) == internal_angle_bisector(C, K, C)
By collinear_definition on C, B, E we get B in Line(C, E), E in Line(B, C), Line(B, C) == Line(C, E), 0 == 2 * angle(B, C, E) mod 360
By internal_angle_bisector_definition_v0_r on I, G, I, C we get Line(C, G) == internal_angle_bisector(I, C, I)
By same_angle_v0 on B, A, G, D we get angle(A, B, D) == angle(G, B, D) mod 360
By same_angle_v1 on B, E, C, G we get angle(C, B, G) == angle(E, B, G) mod 360
By same_angle_v1 on B, C, E, D we get angle(C, B, D) == angle(E, B, D) mod 360
By same_angle_v1 on A, G, B, D we get angle(B, A, D) == angle(G, A, D) mod 360
By same_angle_v0 on A, F, C, D we get angle(C, A, D) == angle(F, A, D) mod 360
By same_angle_v0 on A, F, C, B we get angle(C, A, B) == angle(F, A, B) mod 360
By same_angle_v3 on F, C, A, D we get angle(C, F, D) == angle(A, F, D) + 180 mod 360
By same_angle_v1 on A, B, G, F we get angle(B, A, F) == angle(G, A, F) mod 360
By same_angle_v0 on B, G, A, C we get angle(A, B, C) == angle(G, B, C) mod 360
By same_angle_v2 on E, B, C, D we get angle(B, E, D) == angle(C, E, D) + 180 mod 360
By same_angle_v0 on B, A, G, E we get angle(A, B, E) == angle(G, B, E) mod 360
By same_angle_v1 on A, B, G, C we get angle(B, A, C) == angle(G, A, C) mod 360
By same_angle_v1 on B, E, C, A we get angle(C, B, A) == angle(E, B, A) mod 360
By same_angle_v2 on G, A, B, D we get angle(A, G, D) == angle(B, G, D) + 180 mod 360
By same_angle_v0 on A, C, F, G we get angle(C, A, G) == angle(F, A, G) mod 360
By perpendicular_angle_conditions_v0 on D, E, C we get angle(D, E, C) == orientation(C, D, E) mod 360
By perpendicular_angle_conditions_v0 on D, G, B we get angle(D, G, B) == orientation(B, D, G) mod 360
By perpendicular_angle_conditions_v0 on C, F, D we get angle(C, F, D) == orientation(C, F, D) mod 360
By perpendicular_angle_conditions_v0 on A, G, D we get angle(A, G, D) == orientation(A, G, D) mod 360
By perpendicular_angle_conditions_v0 on C, E, D we get angle(C, E, D) == orientation(C, E, D) mod 360
By altitude_definition on D, F, A, Line(D, F) we get Line(D, F) == altitude(D, A, F)
By perpendicular_angle_conditions_v0 on B, G, D we get angle(B, G, D) == orientation(B, G, D) mod 360
By collinear_definition on A, B, G we get B in Line(A, G), G in Line(A, B), Line(A, B) == Line(A, G), 0 == 2 * angle(B, A, G) mod 360
By perpendicular_angle_conditions_v0 on D, F, C we get angle(D, F, C) == orientation(C, D, F) mod 360
By perpendicular_angle_conditions_v0 on D, E, B we get angle(D, E, B) == orientation(B, D, E) mod 360
By altitude_definition on D, E, B, Line(D, E) we get Line(D, E) == altitude(D, B, E)
By collinear_definition on B, A, G we get A in Line(B, G), G in Line(A, B), Line(A, B) == Line(B, G), 0 == 2 * angle(A, B, G) mod 360
By collinear_definition on F, A, C we get A in Line(C, F), C in Line(A, F), Line(A, F) == Line(C, F), 0 == 2 * angle(A, F, C) mod 360
By collinear_definition on A, G, B we get G in Line(A, B), B in Line(A, G), Line(A, B) == Line(A, G), 0 == 2 * angle(G, A, B) mod 360
By altitude_definition on D, C, E, Line(D, E) we get Line(D, E) == altitude(D, C, E)
By altitude_definition on D, C, F, Line(D, F) we get Line(D, F) == altitude(D, C, F)
By altitude_definition on D, G, B, Line(D, G) we get Line(D, G) == altitude(D, B, G)
By altitude_definition on D, A, G, Line(D, G) we get Line(D, G) == altitude(D, A, G)
By perpendicular_angle_conditions_v0 on A, F, D we get angle(A, F, D) == orientation(A, F, D) mod 360
By collinear_definition on B, E, C we get E in Line(B, C), C in Line(B, E), Line(B, C) == Line(B, E), 0 == 2 * angle(E, B, C) mod 360
By collinear_definition on G, A, B we get A in Line(B, G), B in Line(A, G), Line(A, G) == Line(B, G), 0 == 2 * angle(A, G, B) mod 360
By collinear_definition on A, C, F we get C in Line(A, F), F in Line(A, C), Line(A, C) == Line(A, F), 0 == 2 * angle(C, A, F) mod 360
By collinear_definition on E, B, C we get B in Line(C, E), C in Line(B, E), Line(B, E) == Line(C, E), 0 == 2 * angle(B, E, C) mod 360
By collinear_definition on E, C, B we get C in Line(B, E), B in Line(C, E), Line(B, E) == Line(C, E), 0 == 2 * angle(C, E, B) mod 360
By perpendicular_angle_conditions_v0 on D, F, A we get angle(D, F, A) == orientation(A, D, F) mod 360
By collinear_definition on B, C, E we get C in Line(B, E), E in Line(B, C), Line(B, C) == Line(B, E), 0 == 2 * angle(C, B, E) mod 360
By perpendicular_angle_conditions_v0 on B, E, D we get angle(B, E, D) == orientation(B, E, D) mod 360
By perpendicular_angle_conditions_v0 on D, G, A we get angle(D, G, A) == orientation(A, D, G) mod 360
By collinear_definition on A, F, C we get F in Line(A, C), C in Line(A, F), Line(A, C) == Line(A, F), 0 == 2 * angle(F, A, C) mod 360
By collinear_definition on G, B, A we get B in Line(A, G), A in Line(B, G), Line(A, G) == Line(B, G), 0 == 2 * angle(B, G, A) mod 360
By collinear_definition on F, C, A we get C in Line(A, F), A in Line(C, F), Line(A, F) == Line(C, F), 0 == 2 * angle(C, F, A) mod 360
By collinear_definition on B, G, A we get G in Line(A, B), A in Line(B, G), Line(A, B) == Line(B, G), 0 == 2 * angle(G, B, A) mod 360
By internal_angle_bisector_definition_v0 on C, D, B, A we get angle(C, A, D) == angle(D, A, B) mod 360
By parallel_line_angles_reverse_v1 on B, D, E, H we get angle(B, D, E) == angle(H, E, D) mod 360
By internal_angle_bisector_definition_v0 on A, D, C, B we get angle(A, B, D) == angle(D, B, C) mod 360
By parallel_line_angles_reverse_v2 on D, B, E, H we get angle(D, B, E) == angle(H, E, B) + 180 mod 360
By parallel_line_angles_reverse_v3 on H, E, B, D we get angle(H, E, B) == angle(D, B, E) + 180 mod 360
By internal_angle_bisector_definition_v0 on B, D, C, A we get angle(B, A, D) == angle(D, A, C) mod 360
By internal_angle_bisector_definition_v0 on C, D, A, B we get angle(C, B, D) == angle(D, B, A) mod 360
By power_of_a_point_definition on C, J, G, c we get log(power_of_a_point(C, c)) == log(distance(C, J)) + log(distance(C, G))
By concurrent_sufficient_conditions on Line(E, J), k, Line(D, E) we get concurrent(k, Line(D, E), Line(E, J))
By concurrent_sufficient_conditions on h, Line(D, F), Line(F, H) we get concurrent(h, Line(D, F), Line(F, H))
By concurrent_sufficient_conditions on Line(H, J), l, Line(E, J) we get concurrent(l, Line(E, J), Line(H, J))
By concurrent_sufficient_conditions on k, Line(E, F), Line(E, G) we get concurrent(k, Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on h, Line(E, F), Line(D, F) we get concurrent(h, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on l, Line(D, G), Line(F, G) we get concurrent(l, Line(D, G), Line(F, G))
By concurrent_sufficient_conditions on Line(E, G), Line(D, G), Line(F, G) we get concurrent(Line(D, G), Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on f, Line(G, H), Line(F, G) we get concurrent(f, Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(C, H), Line(G, H), k we get concurrent(k, Line(C, H), Line(G, H))
By concurrent_sufficient_conditions on Line(H, J), k, Line(G, H) we get concurrent(k, Line(G, H), Line(H, J))
By concurrent_sufficient_conditions on l, g, Line(C, D) we get concurrent(g, l, Line(C, D))
By concurrent_sufficient_conditions on f, Line(D, G), Line(F, G) we get concurrent(f, Line(D, G), Line(F, G))
By concurrent_sufficient_conditions on l, Line(F, G), Line(D, G) we get concurrent(l, Line(D, G), Line(F, G))
By concurrent_sufficient_conditions on Line(E, G), Line(F, G), Line(D, G) we get concurrent(Line(D, G), Line(E, G), Line(F, G))
By concyclic_sufficient_conditions_v1 on D, E, C, F we get concyclic(C, D, E, F)
By concurrent_sufficient_conditions on Line(H, J), Line(C, H), k we get concurrent(k, Line(C, H), Line(H, J))
By concurrent_sufficient_conditions on Line(D, F), Line(F, G), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(G, H), Line(E, G), f we get concurrent(f, Line(E, G), Line(G, H))
By concurrent_sufficient_conditions on Line(F, H), h, Line(E, F) we get concurrent(h, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on f, l, Line(E, G) we get concurrent(f, l, Line(E, G))
By concurrent_sufficient_conditions on g, Line(E, J), Line(E, G) we get concurrent(g, Line(E, G), Line(E, J))
By concurrent_sufficient_conditions on l, Line(E, G), f we get concurrent(f, l, Line(E, G))
By concurrent_sufficient_conditions on Line(F, H), Line(F, G), h we get concurrent(h, Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on l, Line(F, G), Line(G, H) we get concurrent(l, Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(D, G), Line(E, G), Line(F, G) we get concurrent(Line(D, G), Line(E, G), Line(F, G))
By concyclic_sufficient_conditions_v1 on B, E, D, G we get concyclic(B, D, E, G)
By concurrent_sufficient_conditions on Line(G, H), l, Line(E, G) we get concurrent(l, Line(E, G), Line(G, H))
By concurrent_sufficient_conditions on k, Line(G, H), Line(H, J) we get concurrent(k, Line(G, H), Line(H, J))
By concurrent_sufficient_conditions on Line(D, F), h, Line(F, H) we get concurrent(h, Line(D, F), Line(F, H))
By concurrent_sufficient_conditions on l, Line(E, G), Line(D, G) we get concurrent(l, Line(D, G), Line(E, G))
By concurrent_sufficient_conditions on h, Line(D, F), Line(E, F) we get concurrent(h, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(E, F), k, g we get concurrent(g, k, Line(E, F))
By concurrent_sufficient_conditions on Line(C, H), Line(F, H), k we get concurrent(k, Line(C, H), Line(F, H))
By concurrent_sufficient_conditions on h, Line(E, F), Line(F, H) we get concurrent(h, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on f, Line(E, G), Line(D, G) we get concurrent(f, Line(D, G), Line(E, G))
By concurrent_sufficient_conditions on Line(F, J), h, Line(F, G) we get concurrent(h, Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(F, G), Line(F, H), Line(D, F) we get concurrent(Line(D, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(F, J), h, Line(E, F) we get concurrent(h, Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on l, h, Line(C, D) we get concurrent(h, l, Line(C, D))
By concurrent_sufficient_conditions on l, f, Line(G, H) we get concurrent(f, l, Line(G, H))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), Line(F, J) we get concurrent(Line(D, F), Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on Line(E, F), Line(E, G), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on g, Line(C, D), h we get concurrent(g, h, Line(C, D))
By concurrent_sufficient_conditions on Line(F, G), l, Line(E, G) we get concurrent(l, Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on Line(E, G), k, Line(E, F) we get concurrent(k, Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), Line(E, J) we get concurrent(Line(D, E), Line(E, F), Line(E, J))
By concurrent_sufficient_conditions on Line(C, H), l, g we get concurrent(g, l, Line(C, H))
By concurrent_sufficient_conditions on Line(E, G), Line(E, F), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(E, G), f, Line(D, G) we get concurrent(f, Line(D, G), Line(E, G))
By concurrent_sufficient_conditions on Line(D, G), Line(F, G), Line(E, G) we get concurrent(Line(D, G), Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on h, Line(D, F), Line(F, G) we get concurrent(h, Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on Line(F, H), Line(F, G), Line(D, F) we get concurrent(Line(D, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on l, Line(F, J), Line(E, J) we get concurrent(l, Line(E, J), Line(F, J))
By concurrent_sufficient_conditions on g, Line(E, F), Line(D, E) we get concurrent(g, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(D, F), Line(F, G), Line(F, H) we get concurrent(Line(D, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(C, H), Line(C, D), l we get concurrent(l, Line(C, D), Line(C, H))
By concurrent_sufficient_conditions on Line(E, J), Line(F, J), l we get concurrent(l, Line(E, J), Line(F, J))
By concurrent_sufficient_conditions on Line(F, H), Line(E, F), Line(F, G) we get concurrent(Line(E, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), Line(F, J) we get concurrent(Line(D, F), Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on Line(E, J), k, Line(E, F) we get concurrent(k, Line(E, F), Line(E, J))
By concurrent_sufficient_conditions on h, Line(F, J), Line(F, H) we get concurrent(h, Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on Line(F, G), h, Line(D, F) we get concurrent(h, Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on Line(C, H), Line(H, J), Line(G, H) we get concurrent(Line(C, H), Line(G, H), Line(H, J))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), g we get concurrent(g, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(F, G), h, Line(F, H) we get concurrent(h, Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(D, E), Line(E, J), Line(E, G) we get concurrent(Line(D, E), Line(E, G), Line(E, J))
By concurrent_sufficient_conditions on g, k, Line(E, F) we get concurrent(g, k, Line(E, F))
By concurrent_sufficient_conditions on Line(D, G), l, Line(F, G) we get concurrent(l, Line(D, G), Line(F, G))
By concurrent_sufficient_conditions on Line(F, J), h, Line(F, H) we get concurrent(h, Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on Line(G, H), f, Line(F, G) we get concurrent(f, Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on k, g, Line(E, G) we get concurrent(g, k, Line(E, G))
By concurrent_sufficient_conditions on Line(F, J), Line(D, F), Line(F, G) we get concurrent(Line(D, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on g, Line(E, J), Line(E, F) we get concurrent(g, Line(E, F), Line(E, J))
By concurrent_sufficient_conditions on k, Line(G, H), Line(F, H) we get concurrent(k, Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(C, H), Line(F, H), Line(G, H) we get concurrent(Line(C, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, G), Line(F, H), h we get concurrent(h, Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on k, Line(F, H), Line(G, H) we get concurrent(k, Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on k, Line(E, J), Line(D, E) we get concurrent(k, Line(D, E), Line(E, J))
By concurrent_sufficient_conditions on Line(F, J), Line(D, F), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on g, l, Line(C, D) we get concurrent(g, l, Line(C, D))
By concurrent_sufficient_conditions on Line(D, G), Line(F, G), f we get concurrent(f, Line(D, G), Line(F, G))
By concurrent_sufficient_conditions on Line(E, G), Line(D, E), Line(E, J) we get concurrent(Line(D, E), Line(E, G), Line(E, J))
By concurrent_sufficient_conditions on Line(E, J), Line(E, F), g we get concurrent(g, Line(E, F), Line(E, J))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), Line(F, H) we get concurrent(Line(D, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(C, D), g, h we get concurrent(g, h, Line(C, D))
By concurrent_sufficient_conditions on g, Line(E, G), Line(D, E) we get concurrent(g, Line(D, E), Line(E, G))
By concyclic_sufficient_conditions_v1 on D, G, A, F we get concyclic(A, D, F, G)
By concurrent_sufficient_conditions on Line(F, H), Line(F, J), Line(F, G) we get concurrent(Line(F, G), Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on l, Line(E, J), Line(F, J) we get concurrent(l, Line(E, J), Line(F, J))
By concurrent_sufficient_conditions on k, Line(C, H), Line(H, J) we get concurrent(k, Line(C, H), Line(H, J))
By concurrent_sufficient_conditions on Line(F, H), Line(H, J), k we get concurrent(k, Line(F, H), Line(H, J))
By concurrent_sufficient_conditions on Line(H, J), k, Line(F, H) we get concurrent(k, Line(F, H), Line(H, J))
By concurrent_sufficient_conditions on Line(E, F), g, Line(E, G) we get concurrent(g, Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on h, Line(C, D), l we get concurrent(h, l, Line(C, D))
By concurrent_sufficient_conditions on Line(E, J), Line(D, E), Line(E, G) we get concurrent(Line(D, E), Line(E, G), Line(E, J))
By concurrent_sufficient_conditions on k, Line(C, H), Line(F, H) we get concurrent(k, Line(C, H), Line(F, H))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), h we get concurrent(h, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(C, H), g, h we get concurrent(g, h, Line(C, H))
By concurrent_sufficient_conditions on f, l, Line(G, H) we get concurrent(f, l, Line(G, H))
By concurrent_sufficient_conditions on Line(F, H), h, Line(F, G) we get concurrent(h, Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(E, J), Line(D, E), g we get concurrent(g, Line(D, E), Line(E, J))
By concurrent_sufficient_conditions on Line(E, G), g, k we get concurrent(g, k, Line(E, G))
By concurrent_sufficient_conditions on f, Line(E, G), l we get concurrent(f, l, Line(E, G))
By concurrent_sufficient_conditions on Line(F, J), Line(F, G), Line(D, F) we get concurrent(Line(D, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(F, H), Line(G, H), k we get concurrent(k, Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(E, J), Line(E, G), k we get concurrent(k, Line(E, G), Line(E, J))
By concurrent_sufficient_conditions on k, Line(E, G), g we get concurrent(g, k, Line(E, G))
By concurrent_sufficient_conditions on l, Line(H, J), Line(F, J) we get concurrent(l, Line(F, J), Line(H, J))
By concurrent_sufficient_conditions on g, k, Line(E, G) we get concurrent(g, k, Line(E, G))
By concurrent_sufficient_conditions on Line(E, G), l, Line(G, H) we get concurrent(l, Line(E, G), Line(G, H))
By concurrent_sufficient_conditions on Line(F, J), Line(E, J), Line(H, J) we get concurrent(Line(E, J), Line(F, J), Line(H, J))
By concurrent_sufficient_conditions on Line(F, G), Line(F, J), Line(E, F) we get concurrent(Line(E, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(D, E), Line(E, J), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, J))
By concurrent_sufficient_conditions on Line(G, H), Line(F, G), Line(E, G) we get concurrent(Line(E, G), Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(G, H), k, Line(H, J) we get concurrent(k, Line(G, H), Line(H, J))
By concurrent_sufficient_conditions on f, Line(F, G), Line(G, H) we get concurrent(f, Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on k, Line(E, G), Line(E, F) we get concurrent(k, Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(C, H), g, Line(C, D) we get concurrent(g, Line(C, D), Line(C, H))
By concurrent_sufficient_conditions on l, g, Line(C, H) we get concurrent(g, l, Line(C, H))
By concurrent_sufficient_conditions on Line(E, F), g, Line(E, J) we get concurrent(g, Line(E, F), Line(E, J))
By concurrent_sufficient_conditions on Line(F, J), Line(F, G), h we get concurrent(h, Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(E, J), k, Line(E, G) we get concurrent(k, Line(E, G), Line(E, J))
By concurrent_sufficient_conditions on h, Line(C, H), Line(C, D) we get concurrent(h, Line(C, D), Line(C, H))
By concurrent_sufficient_conditions on k, Line(F, H), Line(C, H) we get concurrent(k, Line(C, H), Line(F, H))
By concurrent_sufficient_conditions on Line(F, J), Line(E, F), Line(F, H) we get concurrent(Line(E, F), Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on g, Line(C, H), h we get concurrent(g, h, Line(C, H))
By concurrent_sufficient_conditions on Line(E, F), h, Line(F, G) we get concurrent(h, Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(F, J), h, Line(D, F) we get concurrent(h, Line(D, F), Line(F, J))
By concurrent_sufficient_conditions on Line(C, D), h, Line(C, H) we get concurrent(h, Line(C, D), Line(C, H))
By concurrent_sufficient_conditions on Line(F, G), Line(E, F), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(D, F), Line(F, H), h we get concurrent(h, Line(D, F), Line(F, H))
By concurrent_sufficient_conditions on Line(E, G), k, Line(E, J) we get concurrent(k, Line(E, G), Line(E, J))
By concurrent_sufficient_conditions on Line(F, G), Line(E, G), l we get concurrent(l, Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on Line(G, H), f, Line(E, G) we get concurrent(f, Line(E, G), Line(G, H))
By concurrent_sufficient_conditions on Line(F, H), Line(F, J), Line(E, F) we get concurrent(Line(E, F), Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on Line(E, J), Line(E, F), Line(E, G) we get concurrent(Line(E, F), Line(E, G), Line(E, J))
By concurrent_sufficient_conditions on Line(D, F), Line(F, J), h we get concurrent(h, Line(D, F), Line(F, J))
By concurrent_sufficient_conditions on h, Line(F, G), Line(F, H) we get concurrent(h, Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(D, E), k, Line(E, J) we get concurrent(k, Line(D, E), Line(E, J))
By concurrent_sufficient_conditions on Line(D, F), h, Line(E, F) we get concurrent(h, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(E, G), Line(D, E), g we get concurrent(g, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on k, Line(G, H), Line(C, H) we get concurrent(k, Line(C, H), Line(G, H))
By concurrent_sufficient_conditions on Line(C, H), k, Line(F, H) we get concurrent(k, Line(C, H), Line(F, H))
By concurrent_sufficient_conditions on Line(E, G), Line(F, G), Line(G, H) we get concurrent(Line(E, G), Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(E, G), Line(E, F), g we get concurrent(g, Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(E, G), l, Line(D, G) we get concurrent(l, Line(D, G), Line(E, G))
By concurrent_sufficient_conditions on h, Line(F, H), Line(F, G) we get concurrent(h, Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(D, F), Line(F, J), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on h, Line(E, F), Line(F, J) we get concurrent(h, Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on Line(F, H), Line(F, G), Line(F, J) we get concurrent(Line(F, G), Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on Line(E, G), l, f we get concurrent(f, l, Line(E, G))
By concurrent_sufficient_conditions on f, l, Line(F, G) we get concurrent(f, l, Line(F, G))
By concurrent_sufficient_conditions on l, Line(G, H), Line(E, G) we get concurrent(l, Line(E, G), Line(G, H))
By concurrent_sufficient_conditions on Line(H, J), Line(C, H), Line(F, H) we get concurrent(Line(C, H), Line(F, H), Line(H, J))
By concurrent_sufficient_conditions on Line(E, F), Line(F, H), Line(F, J) we get concurrent(Line(E, F), Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), k we get concurrent(k, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(F, H), Line(E, F), h we get concurrent(h, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(D, G), Line(F, G), l we get concurrent(l, Line(D, G), Line(F, G))
By concurrent_sufficient_conditions on h, Line(D, F), Line(F, J) we get concurrent(h, Line(D, F), Line(F, J))
By concurrent_sufficient_conditions on Line(E, F), k, Line(D, E) we get concurrent(k, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(E, G), f, l we get concurrent(f, l, Line(E, G))
By concurrent_sufficient_conditions on Line(H, J), Line(F, H), k we get concurrent(k, Line(F, H), Line(H, J))
By concurrent_sufficient_conditions on Line(F, H), Line(F, G), Line(E, F) we get concurrent(Line(E, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(E, J), g, k we get concurrent(g, k, Line(E, J))
By concurrent_sufficient_conditions on g, h, Line(C, H) we get concurrent(g, h, Line(C, H))
By concurrent_sufficient_conditions on h, Line(F, H), Line(F, J) we get concurrent(h, Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on Line(C, H), Line(G, H), Line(F, H) we get concurrent(Line(C, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(C, H), l, Line(C, D) we get concurrent(l, Line(C, D), Line(C, H))
By concurrent_sufficient_conditions on g, Line(C, H), Line(C, D) we get concurrent(g, Line(C, D), Line(C, H))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), Line(F, G) we get concurrent(Line(D, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(E, F), Line(E, J), k we get concurrent(k, Line(E, F), Line(E, J))
By concurrent_sufficient_conditions on Line(E, J), Line(E, F), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, J))
By concurrent_sufficient_conditions on g, Line(E, G), k we get concurrent(g, k, Line(E, G))
By concurrent_sufficient_conditions on h, Line(E, F), Line(F, G) we get concurrent(h, Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(C, H), Line(H, J), Line(F, H) we get concurrent(Line(C, H), Line(F, H), Line(H, J))
By concurrent_sufficient_conditions on k, Line(E, J), Line(E, F) we get concurrent(k, Line(E, F), Line(E, J))
By concurrent_sufficient_conditions on Line(F, H), Line(D, F), Line(F, G) we get concurrent(Line(D, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on k, Line(F, H), Line(H, J) we get concurrent(k, Line(F, H), Line(H, J))
By concurrent_sufficient_conditions on k, Line(H, J), Line(F, H) we get concurrent(k, Line(F, H), Line(H, J))
By concurrent_sufficient_conditions on k, Line(C, H), Line(G, H) we get concurrent(k, Line(C, H), Line(G, H))
By concurrent_sufficient_conditions on Line(G, H), Line(H, J), Line(C, H) we get concurrent(Line(C, H), Line(G, H), Line(H, J))
By concurrent_sufficient_conditions on Line(G, H), Line(F, H), Line(C, H) we get concurrent(Line(C, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(H, J), Line(G, H), Line(C, H) we get concurrent(Line(C, H), Line(G, H), Line(H, J))
By concurrent_sufficient_conditions on Line(F, J), Line(F, H), h we get concurrent(h, Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on Line(F, H), Line(H, J), Line(C, H) we get concurrent(Line(C, H), Line(F, H), Line(H, J))
By concurrent_sufficient_conditions on Line(E, G), Line(E, F), Line(E, J) we get concurrent(Line(E, F), Line(E, G), Line(E, J))
By concurrent_sufficient_conditions on Line(F, G), Line(D, F), Line(F, H) we get concurrent(Line(D, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(D, E), g, Line(E, J) we get concurrent(g, Line(D, E), Line(E, J))
By concurrent_sufficient_conditions on h, l, Line(C, D) we get concurrent(h, l, Line(C, D))
By concurrent_sufficient_conditions on Line(E, F), g, k we get concurrent(g, k, Line(E, F))
By concurrent_sufficient_conditions on Line(E, F), Line(F, J), h we get concurrent(h, Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on Line(F, G), Line(F, H), Line(E, F) we get concurrent(Line(E, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(E, G), Line(D, G), f we get concurrent(f, Line(D, G), Line(E, G))
By concurrent_sufficient_conditions on f, Line(D, G), Line(E, G) we get concurrent(f, Line(D, G), Line(E, G))
By concurrent_sufficient_conditions on k, Line(E, F), g we get concurrent(g, k, Line(E, F))
By concurrent_sufficient_conditions on Line(G, H), Line(F, G), l we get concurrent(l, Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(D, G), Line(E, G), l we get concurrent(l, Line(D, G), Line(E, G))
By concurrent_sufficient_conditions on Line(D, F), Line(F, J), Line(F, G) we get concurrent(Line(D, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(F, G), l, Line(D, G) we get concurrent(l, Line(D, G), Line(F, G))
By concurrent_sufficient_conditions on g, Line(D, E), Line(E, J) we get concurrent(g, Line(D, E), Line(E, J))
By concurrent_sufficient_conditions on Line(D, E), g, Line(E, G) we get concurrent(g, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(E, F), Line(F, G), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on g, l, Line(C, H) we get concurrent(g, l, Line(C, H))
By concurrent_sufficient_conditions on Line(C, D), l, Line(C, H) we get concurrent(l, Line(C, D), Line(C, H))
By concurrent_sufficient_conditions on Line(E, G), g, Line(E, F) we get concurrent(g, Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on l, f, Line(E, G) we get concurrent(f, l, Line(E, G))
By concurrent_sufficient_conditions on Line(F, H), Line(F, J), h we get concurrent(h, Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on f, Line(F, G), Line(D, G) we get concurrent(f, Line(D, G), Line(F, G))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), k we get concurrent(k, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(F, J), l, Line(H, J) we get concurrent(l, Line(F, J), Line(H, J))
By concurrent_sufficient_conditions on Line(E, G), k, g we get concurrent(g, k, Line(E, G))
By concurrent_sufficient_conditions on k, Line(E, G), Line(D, E) we get concurrent(k, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on l, Line(G, H), f we get concurrent(f, l, Line(G, H))
By concurrent_sufficient_conditions on f, Line(F, G), l we get concurrent(f, l, Line(F, G))
By concurrent_sufficient_conditions on Line(E, F), Line(E, J), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, J))
By concurrent_sufficient_conditions on Line(F, J), Line(F, G), Line(E, F) we get concurrent(Line(E, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on g, Line(E, F), k we get concurrent(g, k, Line(E, F))
By concurrent_sufficient_conditions on Line(C, D), h, l we get concurrent(h, l, Line(C, D))
By concurrent_sufficient_conditions on g, h, Line(C, D) we get concurrent(g, h, Line(C, D))
By concurrent_sufficient_conditions on Line(H, J), Line(E, J), Line(F, J) we get concurrent(Line(E, J), Line(F, J), Line(H, J))
By concurrent_sufficient_conditions on Line(F, H), Line(E, F), Line(F, J) we get concurrent(Line(E, F), Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on Line(F, J), Line(E, F), h we get concurrent(h, Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on Line(F, G), Line(E, F), Line(F, J) we get concurrent(Line(E, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(G, H), Line(C, H), Line(F, H) we get concurrent(Line(C, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, G), Line(E, G), Line(G, H) we get concurrent(Line(E, G), Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(E, G), Line(E, F), k we get concurrent(k, Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(F, G), l, Line(G, H) we get concurrent(l, Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on f, Line(E, G), Line(F, G) we get concurrent(f, Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on Line(E, J), g, Line(E, F) we get concurrent(g, Line(E, F), Line(E, J))
By concurrent_sufficient_conditions on Line(E, G), g, Line(D, E) we get concurrent(g, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(E, G), Line(F, G), l we get concurrent(l, Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on Line(F, G), Line(F, H), Line(F, J) we get concurrent(Line(F, G), Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on Line(E, J), k, g we get concurrent(g, k, Line(E, J))
By concurrent_sufficient_conditions on Line(F, H), Line(C, H), k we get concurrent(k, Line(C, H), Line(F, H))
By concurrent_sufficient_conditions on Line(C, H), k, Line(H, J) we get concurrent(k, Line(C, H), Line(H, J))
By concurrent_sufficient_conditions on Line(C, D), g, Line(C, H) we get concurrent(g, Line(C, D), Line(C, H))
By concurrent_sufficient_conditions on Line(E, F), Line(E, G), Line(E, J) we get concurrent(Line(E, F), Line(E, G), Line(E, J))
By concurrent_sufficient_conditions on Line(F, J), Line(F, H), Line(D, F) we get concurrent(Line(D, F), Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on l, Line(C, H), g we get concurrent(g, l, Line(C, H))
By concurrent_sufficient_conditions on Line(E, F), Line(F, J), Line(F, G) we get concurrent(Line(E, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(E, F), Line(F, G), Line(F, J) we get concurrent(Line(E, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(C, D), Line(C, H), g we get concurrent(g, Line(C, D), Line(C, H))
By concurrent_sufficient_conditions on h, Line(C, H), g we get concurrent(g, h, Line(C, H))
By concurrent_sufficient_conditions on Line(H, J), Line(C, H), Line(G, H) we get concurrent(Line(C, H), Line(G, H), Line(H, J))
By concurrent_sufficient_conditions on Line(E, G), f, Line(F, G) we get concurrent(f, Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on Line(H, J), k, Line(C, H) we get concurrent(k, Line(C, H), Line(H, J))
By concurrent_sufficient_conditions on Line(F, G), f, Line(E, G) we get concurrent(f, Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on k, Line(D, E), Line(E, F) we get concurrent(k, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(D, F), h, Line(F, G) we get concurrent(h, Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on Line(E, F), Line(F, J), Line(F, H) we get concurrent(Line(E, F), Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on Line(C, H), h, g we get concurrent(g, h, Line(C, H))
By concurrent_sufficient_conditions on h, Line(C, D), Line(C, H) we get concurrent(h, Line(C, D), Line(C, H))
By concurrent_sufficient_conditions on Line(E, J), g, Line(E, G) we get concurrent(g, Line(E, G), Line(E, J))
By concurrent_sufficient_conditions on Line(E, F), h, Line(F, J) we get concurrent(h, Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on Line(E, F), g, Line(D, E) we get concurrent(g, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(D, F), Line(F, H), Line(F, J) we get concurrent(Line(D, F), Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on k, Line(E, G), Line(E, J) we get concurrent(k, Line(E, G), Line(E, J))
By concurrent_sufficient_conditions on Line(F, G), f, l we get concurrent(f, l, Line(F, G))
By concurrent_sufficient_conditions on Line(E, F), Line(E, G), k we get concurrent(k, Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(E, F), Line(E, J), g we get concurrent(g, Line(E, F), Line(E, J))
By concurrent_sufficient_conditions on Line(H, J), Line(F, H), Line(G, H) we get concurrent(Line(F, H), Line(G, H), Line(H, J))
By concurrent_sufficient_conditions on Line(C, H), h, Line(C, D) we get concurrent(h, Line(C, D), Line(C, H))
By concurrent_sufficient_conditions on Line(D, G), f, Line(E, G) we get concurrent(f, Line(D, G), Line(E, G))
By concurrent_sufficient_conditions on Line(F, H), Line(F, J), Line(D, F) we get concurrent(Line(D, F), Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on Line(G, H), Line(C, H), k we get concurrent(k, Line(C, H), Line(G, H))
By concurrent_sufficient_conditions on Line(E, G), Line(E, J), Line(E, F) we get concurrent(Line(E, F), Line(E, G), Line(E, J))
By concurrent_sufficient_conditions on l, h, Line(C, H) we get concurrent(h, l, Line(C, H))
By concurrent_sufficient_conditions on l, Line(F, G), f we get concurrent(f, l, Line(F, G))
By concurrent_sufficient_conditions on Line(D, E), Line(E, G), k we get concurrent(k, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(F, G), Line(D, G), f we get concurrent(f, Line(D, G), Line(F, G))
By concurrent_sufficient_conditions on Line(H, J), Line(G, H), k we get concurrent(k, Line(G, H), Line(H, J))
By concurrent_sufficient_conditions on Line(E, F), Line(F, H), Line(F, G) we get concurrent(Line(E, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on h, Line(C, H), l we get concurrent(h, l, Line(C, H))
By concurrent_sufficient_conditions on Line(H, J), Line(E, J), l we get concurrent(l, Line(E, J), Line(H, J))
By concurrent_sufficient_conditions on Line(F, J), Line(E, F), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), h we get concurrent(h, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(E, G), Line(G, H), Line(F, G) we get concurrent(Line(E, G), Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(F, H), Line(H, J), Line(G, H) we get concurrent(Line(F, H), Line(G, H), Line(H, J))
By concurrent_sufficient_conditions on g, Line(C, D), Line(C, H) we get concurrent(g, Line(C, D), Line(C, H))
By concurrent_sufficient_conditions on Line(E, J), Line(H, J), l we get concurrent(l, Line(E, J), Line(H, J))
By concurrent_sufficient_conditions on Line(C, H), Line(G, H), Line(H, J) we get concurrent(Line(C, H), Line(G, H), Line(H, J))
By concurrent_sufficient_conditions on k, Line(E, J), Line(E, G) we get concurrent(k, Line(E, G), Line(E, J))
By concurrent_sufficient_conditions on Line(E, G), Line(E, J), Line(D, E) we get concurrent(Line(D, E), Line(E, G), Line(E, J))
By concurrent_sufficient_conditions on Line(E, G), Line(D, E), k we get concurrent(k, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(E, J), Line(H, J), Line(F, J) we get concurrent(Line(E, J), Line(F, J), Line(H, J))
By concurrent_sufficient_conditions on Line(E, G), f, Line(G, H) we get concurrent(f, Line(E, G), Line(G, H))
By concurrent_sufficient_conditions on Line(E, F), Line(F, H), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(F, G), Line(E, G), Line(D, G) we get concurrent(Line(D, G), Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on g, Line(E, F), Line(E, G) we get concurrent(g, Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(C, D), Line(C, H), h we get concurrent(h, Line(C, D), Line(C, H))
By concurrent_sufficient_conditions on k, g, Line(E, J) we get concurrent(g, k, Line(E, J))
By concurrent_sufficient_conditions on Line(F, H), Line(C, H), Line(G, H) we get concurrent(Line(C, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(G, H), Line(H, J), k we get concurrent(k, Line(G, H), Line(H, J))
By concurrent_sufficient_conditions on Line(C, D), g, l we get concurrent(g, l, Line(C, D))
By concurrent_sufficient_conditions on Line(E, F), Line(F, H), h we get concurrent(h, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(F, J), Line(D, F), h we get concurrent(h, Line(D, F), Line(F, J))
By concurrent_sufficient_conditions on Line(G, H), l, f we get concurrent(f, l, Line(G, H))
By concurrent_sufficient_conditions on Line(F, G), h, Line(E, F) we get concurrent(h, Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(G, H), Line(E, G), l we get concurrent(l, Line(E, G), Line(G, H))
By concurrent_sufficient_conditions on Line(F, J), Line(E, F), Line(F, G) we get concurrent(Line(E, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(E, G), l, Line(F, G) we get concurrent(l, Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on Line(H, J), Line(F, J), Line(E, J) we get concurrent(Line(E, J), Line(F, J), Line(H, J))
By concurrent_sufficient_conditions on Line(E, F), h, Line(F, H) we get concurrent(h, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(F, G), h, Line(F, J) we get concurrent(h, Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(E, G), Line(E, J), g we get concurrent(g, Line(E, G), Line(E, J))
By concurrent_sufficient_conditions on f, Line(G, H), Line(E, G) we get concurrent(f, Line(E, G), Line(G, H))
By concurrent_sufficient_conditions on l, Line(F, J), Line(H, J) we get concurrent(l, Line(F, J), Line(H, J))
By concurrent_sufficient_conditions on Line(C, H), g, l we get concurrent(g, l, Line(C, H))
By concurrent_sufficient_conditions on Line(G, H), k, Line(C, H) we get concurrent(k, Line(C, H), Line(G, H))
By concurrent_sufficient_conditions on h, l, Line(C, H) we get concurrent(h, l, Line(C, H))
By concurrent_sufficient_conditions on Line(G, H), l, Line(F, G) we get concurrent(l, Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(D, E), Line(E, J), g we get concurrent(g, Line(D, E), Line(E, J))
By concurrent_sufficient_conditions on l, f, Line(F, G) we get concurrent(f, l, Line(F, G))
By concurrent_sufficient_conditions on Line(E, F), Line(F, J), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on Line(E, J), Line(E, G), Line(E, F) we get concurrent(Line(E, F), Line(E, G), Line(E, J))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), Line(E, G) we get concurrent(Line(D, E), Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(G, H), k, Line(F, H) we get concurrent(k, Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, J), Line(F, H), Line(E, F) we get concurrent(Line(E, F), Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on Line(E, F), Line(F, G), Line(F, H) we get concurrent(Line(E, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), Line(E, G) we get concurrent(Line(D, E), Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(F, H), Line(D, F), Line(F, J) we get concurrent(Line(D, F), Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on Line(F, J), Line(H, J), Line(E, J) we get concurrent(Line(E, J), Line(F, J), Line(H, J))
By concurrent_sufficient_conditions on l, Line(C, H), h we get concurrent(h, l, Line(C, H))
By concurrent_sufficient_conditions on h, Line(F, H), Line(D, F) we get concurrent(h, Line(D, F), Line(F, H))
By concurrent_sufficient_conditions on k, Line(E, J), g we get concurrent(g, k, Line(E, J))
By concurrent_sufficient_conditions on Line(E, G), Line(G, H), l we get concurrent(l, Line(E, G), Line(G, H))
By concurrent_sufficient_conditions on Line(E, G), g, Line(E, J) we get concurrent(g, Line(E, G), Line(E, J))
By concurrent_sufficient_conditions on g, Line(E, F), Line(E, J) we get concurrent(g, Line(E, F), Line(E, J))
By concurrent_sufficient_conditions on Line(D, E), g, Line(E, F) we get concurrent(g, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(E, F), Line(F, G), h we get concurrent(h, Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(D, G), f, Line(F, G) we get concurrent(f, Line(D, G), Line(F, G))
By concurrent_sufficient_conditions on k, Line(D, E), Line(E, G) we get concurrent(k, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on g, Line(E, J), Line(D, E) we get concurrent(g, Line(D, E), Line(E, J))
By concurrent_sufficient_conditions on l, Line(H, J), Line(E, J) we get concurrent(l, Line(E, J), Line(H, J))
By concurrent_sufficient_conditions on Line(F, G), Line(F, J), Line(D, F) we get concurrent(Line(D, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(C, H), Line(C, D), h we get concurrent(h, Line(C, D), Line(C, H))
By concurrent_sufficient_conditions on f, Line(G, H), l we get concurrent(f, l, Line(G, H))
By concurrent_sufficient_conditions on Line(D, G), l, Line(E, G) we get concurrent(l, Line(D, G), Line(E, G))
By concurrent_sufficient_conditions on Line(F, H), k, Line(C, H) we get concurrent(k, Line(C, H), Line(F, H))
By concurrent_sufficient_conditions on h, g, Line(C, D) we get concurrent(g, h, Line(C, D))
By concurrent_sufficient_conditions on Line(G, H), Line(F, G), f we get concurrent(f, Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(F, G), Line(G, H), l we get concurrent(l, Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(D, F), Line(F, J), Line(F, H) we get concurrent(Line(D, F), Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on g, Line(D, E), Line(E, G) we get concurrent(g, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(D, F), Line(F, G), Line(F, J) we get concurrent(Line(D, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(C, H), l, h we get concurrent(h, l, Line(C, H))
By concurrent_sufficient_conditions on Line(F, G), Line(G, H), Line(E, G) we get concurrent(Line(E, G), Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(E, G), Line(F, G), f we get concurrent(f, Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on l, Line(E, G), Line(F, G) we get concurrent(l, Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on l, Line(E, J), Line(H, J) we get concurrent(l, Line(E, J), Line(H, J))
By concurrent_sufficient_conditions on Line(D, E), Line(E, G), Line(E, J) we get concurrent(Line(D, E), Line(E, G), Line(E, J))
By concurrent_sufficient_conditions on k, g, Line(E, F) we get concurrent(g, k, Line(E, F))
By concurrent_sufficient_conditions on Line(F, H), h, Line(F, J) we get concurrent(h, Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on k, Line(E, F), Line(E, J) we get concurrent(k, Line(E, F), Line(E, J))
By concurrent_sufficient_conditions on Line(F, H), Line(G, H), Line(C, H) we get concurrent(Line(C, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(E, J), Line(E, G), g we get concurrent(g, Line(E, G), Line(E, J))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), Line(F, H) we get concurrent(Line(D, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on h, g, Line(C, H) we get concurrent(g, h, Line(C, H))
By concurrent_sufficient_conditions on Line(C, H), h, l we get concurrent(h, l, Line(C, H))
By concurrent_sufficient_conditions on Line(C, H), Line(C, D), g we get concurrent(g, Line(C, D), Line(C, H))
By concurrent_sufficient_conditions on Line(E, F), Line(E, J), Line(E, G) we get concurrent(Line(E, F), Line(E, G), Line(E, J))
By concurrent_sufficient_conditions on Line(F, G), l, f we get concurrent(f, l, Line(F, G))
By concurrent_sufficient_conditions on l, Line(F, G), Line(E, G) we get concurrent(l, Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on l, Line(G, H), Line(F, G) we get concurrent(l, Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(E, G), Line(G, H), f we get concurrent(f, Line(E, G), Line(G, H))
By concurrent_sufficient_conditions on Line(F, J), Line(F, G), Line(F, H) we get concurrent(Line(F, G), Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on g, Line(C, H), l we get concurrent(g, l, Line(C, H))
By concurrent_sufficient_conditions on Line(F, G), f, Line(D, G) we get concurrent(f, Line(D, G), Line(F, G))
By concurrent_sufficient_conditions on Line(E, G), Line(D, G), l we get concurrent(l, Line(D, G), Line(E, G))
By concurrent_sufficient_conditions on Line(F, G), Line(D, F), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(D, E), k, Line(E, G) we get concurrent(k, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(F, G), Line(D, F), Line(F, J) we get concurrent(Line(D, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(E, G), Line(E, J), k we get concurrent(k, Line(E, G), Line(E, J))
By concurrent_sufficient_conditions on k, Line(H, J), Line(C, H) we get concurrent(k, Line(C, H), Line(H, J))
By concurrent_sufficient_conditions on Line(F, G), Line(D, G), l we get concurrent(l, Line(D, G), Line(F, G))
By concurrent_sufficient_conditions on Line(F, G), Line(F, J), Line(F, H) we get concurrent(Line(F, G), Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on f, Line(E, G), Line(G, H) we get concurrent(f, Line(E, G), Line(G, H))
By concurrent_sufficient_conditions on k, Line(E, F), Line(D, E) we get concurrent(k, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on g, Line(E, G), Line(E, J) we get concurrent(g, Line(E, G), Line(E, J))
By concurrent_sufficient_conditions on Line(G, H), Line(F, H), k we get concurrent(k, Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(C, D), Line(C, H), l we get concurrent(l, Line(C, D), Line(C, H))
By concurrent_sufficient_conditions on Line(D, F), h, Line(F, J) we get concurrent(h, Line(D, F), Line(F, J))
By concurrent_sufficient_conditions on Line(F, G), Line(G, H), f we get concurrent(f, Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), g we get concurrent(g, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(F, J), l, Line(E, J) we get concurrent(l, Line(E, J), Line(F, J))
By concurrent_sufficient_conditions on h, Line(F, J), Line(D, F) we get concurrent(h, Line(D, F), Line(F, J))
By concurrent_sufficient_conditions on Line(F, H), Line(D, F), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(G, H), Line(F, H), Line(H, J) we get concurrent(Line(F, H), Line(G, H), Line(H, J))
By concurrent_sufficient_conditions on h, Line(F, G), Line(E, F) we get concurrent(h, Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(H, J), Line(G, H), Line(F, H) we get concurrent(Line(F, H), Line(G, H), Line(H, J))
By concurrent_sufficient_conditions on Line(F, H), Line(C, H), Line(H, J) we get concurrent(Line(C, H), Line(F, H), Line(H, J))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), Line(F, G) we get concurrent(Line(D, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(E, G), k, Line(D, E) we get concurrent(k, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(D, G), Line(E, G), f we get concurrent(f, Line(D, G), Line(E, G))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), Line(E, J) we get concurrent(Line(D, E), Line(E, F), Line(E, J))
By concurrent_sufficient_conditions on Line(F, H), h, Line(D, F) we get concurrent(h, Line(D, F), Line(F, H))
By concurrent_sufficient_conditions on Line(F, G), f, Line(G, H) we get concurrent(f, Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(D, E), Line(E, G), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on l, Line(D, G), Line(E, G) we get concurrent(l, Line(D, G), Line(E, G))
By concurrent_sufficient_conditions on Line(E, G), Line(D, E), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(F, H), Line(G, H), Line(H, J) we get concurrent(Line(F, H), Line(G, H), Line(H, J))
By concurrent_sufficient_conditions on Line(F, H), Line(D, F), h we get concurrent(h, Line(D, F), Line(F, H))
By concurrent_sufficient_conditions on Line(F, G), Line(E, G), f we get concurrent(f, Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on Line(D, E), Line(E, J), k we get concurrent(k, Line(D, E), Line(E, J))
By concurrent_sufficient_conditions on h, Line(F, G), Line(D, F) we get concurrent(h, Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on Line(H, J), l, Line(F, J) we get concurrent(l, Line(F, J), Line(H, J))
By concurrent_sufficient_conditions on g, Line(D, E), Line(E, F) we get concurrent(g, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(C, D), h, g we get concurrent(g, h, Line(C, D))
By concurrent_sufficient_conditions on Line(F, H), k, Line(H, J) we get concurrent(k, Line(F, H), Line(H, J))
By concurrent_sufficient_conditions on g, k, Line(E, J) we get concurrent(g, k, Line(E, J))
By concurrent_sufficient_conditions on f, Line(F, G), Line(E, G) we get concurrent(f, Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on Line(F, J), Line(H, J), l we get concurrent(l, Line(F, J), Line(H, J))
By concurrent_sufficient_conditions on l, Line(C, D), h we get concurrent(h, l, Line(C, D))
By concurrent_sufficient_conditions on Line(G, H), Line(H, J), Line(F, H) we get concurrent(Line(F, H), Line(G, H), Line(H, J))
By concurrent_sufficient_conditions on Line(G, H), Line(E, G), Line(F, G) we get concurrent(Line(E, G), Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(F, H), Line(E, F), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(F, G), Line(D, F), h we get concurrent(h, Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on h, Line(F, H), Line(E, F) we get concurrent(h, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(F, G), Line(E, F), Line(F, H) we get concurrent(Line(E, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(E, J), Line(D, E), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, J))
By concurrent_sufficient_conditions on Line(D, E), k, Line(E, F) we get concurrent(k, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(F, J), Line(D, F), Line(F, H) we get concurrent(Line(D, F), Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on Line(C, D), l, h we get concurrent(h, l, Line(C, D))
By concurrent_sufficient_conditions on Line(E, F), Line(E, G), g we get concurrent(g, Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on l, Line(C, D), Line(C, H) we get concurrent(l, Line(C, D), Line(C, H))
By concurrent_sufficient_conditions on Line(E, F), k, Line(E, J) we get concurrent(k, Line(E, F), Line(E, J))
By concurrent_sufficient_conditions on Line(E, J), Line(E, F), k we get concurrent(k, Line(E, F), Line(E, J))
By concurrent_sufficient_conditions on Line(G, H), f, l we get concurrent(f, l, Line(G, H))
By concurrent_sufficient_conditions on l, Line(C, D), g we get concurrent(g, l, Line(C, D))
By concurrent_sufficient_conditions on g, Line(E, G), Line(E, F) we get concurrent(g, Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(G, H), Line(C, H), Line(H, J) we get concurrent(Line(C, H), Line(G, H), Line(H, J))
By concurrent_sufficient_conditions on g, Line(E, J), k we get concurrent(g, k, Line(E, J))
By concurrent_sufficient_conditions on Line(F, H), k, Line(G, H) we get concurrent(k, Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(E, J), g, Line(D, E) we get concurrent(g, Line(D, E), Line(E, J))
By concurrent_sufficient_conditions on Line(E, J), Line(F, J), Line(H, J) we get concurrent(Line(E, J), Line(F, J), Line(H, J))
By concurrent_sufficient_conditions on Line(E, J), l, Line(F, J) we get concurrent(l, Line(E, J), Line(F, J))
By concurrent_sufficient_conditions on Line(C, H), k, Line(G, H) we get concurrent(k, Line(C, H), Line(G, H))
By concurrent_sufficient_conditions on Line(D, F), Line(F, H), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(H, J), Line(F, H), Line(C, H) we get concurrent(Line(C, H), Line(F, H), Line(H, J))
By concurrent_sufficient_conditions on Line(F, J), Line(E, J), l we get concurrent(l, Line(E, J), Line(F, J))
By concurrent_sufficient_conditions on h, Line(F, J), Line(F, G) we get concurrent(h, Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on h, Line(C, D), g we get concurrent(g, h, Line(C, D))
By concurrent_sufficient_conditions on h, Line(F, J), Line(E, F) we get concurrent(h, Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on Line(E, J), Line(E, G), Line(D, E) we get concurrent(Line(D, E), Line(E, G), Line(E, J))
By concurrent_sufficient_conditions on Line(H, J), Line(F, J), l we get concurrent(l, Line(F, J), Line(H, J))
By concurrent_sufficient_conditions on Line(D, E), Line(E, G), g we get concurrent(g, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(E, J), l, Line(H, J) we get concurrent(l, Line(E, J), Line(H, J))
By concurrent_sufficient_conditions on Line(E, F), k, Line(E, G) we get concurrent(k, Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on l, Line(C, H), Line(C, D) we get concurrent(l, Line(C, D), Line(C, H))
By concurrent_sufficient_conditions on k, Line(D, E), Line(E, J) we get concurrent(k, Line(D, E), Line(E, J))
By concurrent_sufficient_conditions on h, Line(F, G), Line(F, J) we get concurrent(h, Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(F, G), Line(D, G), Line(E, G) we get concurrent(Line(D, G), Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on Line(C, H), Line(F, H), Line(H, J) we get concurrent(Line(C, H), Line(F, H), Line(H, J))
By concurrent_sufficient_conditions on Line(E, J), Line(D, E), k we get concurrent(k, Line(D, E), Line(E, J))
By concurrent_sufficient_conditions on Line(F, G), Line(F, J), h we get concurrent(h, Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(C, H), Line(H, J), k we get concurrent(k, Line(C, H), Line(H, J))
By concurrent_sufficient_conditions on l, Line(E, G), Line(G, H) we get concurrent(l, Line(E, G), Line(G, H))
By concurrent_sufficient_conditions on Line(D, F), Line(F, H), Line(F, G) we get concurrent(Line(D, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(E, F), h, Line(D, F) we get concurrent(h, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(F, J), Line(F, H), Line(F, G) we get concurrent(Line(F, G), Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on Line(C, D), l, g we get concurrent(g, l, Line(C, D))
By concurrent_sufficient_conditions on Line(F, G), Line(E, F), h we get concurrent(h, Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(D, F), Line(F, G), h we get concurrent(h, Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on k, Line(H, J), Line(G, H) we get concurrent(k, Line(G, H), Line(H, J))
By concurrent_sufficient_conditions on g, Line(C, D), l we get concurrent(g, l, Line(C, D))
By between_imply_not_between on C, F, A we get collinear_and_not_between(A, C, F)
By between_imply_not_between on G, J, C we get collinear_and_not_between(C, G, J)
By between_imply_not_between on B, G, A we get collinear_and_not_between(A, B, G)
By between_imply_not_between on B, E, C we get collinear_and_not_between(C, B, E)
By between_imply_not_between on A, G, B we get collinear_and_not_between(B, A, G)
By between_imply_not_between on A, F, C we get collinear_and_not_between(C, A, F)
By between_imply_not_between on C, E, B we get collinear_and_not_between(B, C, E)
By between_imply_not_between on C, J, G we get collinear_and_not_between(G, C, J)
By same_angle_v1 on J, C, I, F we get angle(C, J, F) == angle(I, J, F) mod 360
By same_angle_v0 on C, B, E, D we get angle(B, C, D) == angle(E, C, D) mod 360
By same_angle_v1 on C, A, F, D we get angle(A, C, D) == angle(F, C, D) mod 360
By same_angle_v0 on C, J, G, D we get angle(G, C, D) == angle(J, C, D) mod 360
By same_angle_v0 on C, I, J, D we get angle(I, C, D) == angle(J, C, D) mod 360
By same_angle_v1 on J, C, I, H we get angle(C, J, H) == angle(I, J, H) mod 360
By same_angle_v2 on J, G, I, F we get angle(G, J, F) == angle(I, J, F) + 180 mod 360
By same_angle_v1 on C, K, H, D we get angle(H, C, D) == angle(K, C, D) mod 360
By same_angle_v2 on J, I, G, E we get angle(I, J, E) == angle(G, J, E) + 180 mod 360
By same_angle_v0 on C, G, I, D we get angle(G, C, D) == angle(I, C, D) mod 360
By same_angle_v3 on J, G, I, H we get angle(G, J, H) == angle(I, J, H) + 180 mod 360
By same_angle_v0 on J, I, C, E we get angle(C, J, E) == angle(I, J, E) mod 360
By probably_between_and_collinear_implies_between on C, I, J we get between(C, I, J)
By probably_between_and_collinear_implies_between on G, J, I we get between(G, J, I)
By collinear_definition on G, J, I we get J in Line(G, I), I in Line(G, J), Line(G, I) == Line(G, J), 0 == 2 * angle(J, G, I) mod 360
By aa_anti_similarity on D, E, B, D, G, B we get anti_similar_triangles(B, D, E, B, D, G)
By reverse_direction on E, D we get 180 == direction(E, D) - direction(D, E) mod 360
By reverse_direction on E, B we get 180 == direction(E, B) - direction(B, E) mod 360
By reverse_direction on D, F we get 180 == direction(D, F) - direction(F, D) mod 360
By aa_anti_similarity on D, B, E, D, B, G we get anti_similar_triangles(B, D, E, B, D, G)
By reverse_direction on E, C we get 180 == direction(E, C) - direction(C, E) mod 360
By reverse_direction on G, A we get 180 == direction(G, A) - direction(A, G) mod 360
By reverse_direction on G, B we get 180 == direction(G, B) - direction(B, G) mod 360
By collinear_definition on C, I, J we get I in Line(C, J), J in Line(C, I), Line(C, I) == Line(C, J), 0 == 2 * angle(I, C, J) mod 360
By between_imply_segment_sum on C, J, G we get distance(C, G) == distance(C, J) + distance(G, J)
By reverse_direction on B, A we get 180 == direction(B, A) - direction(A, B) mod 360
By internal_angle_bisector_definition_v0 on I, J, I, C we get angle(I, C, J) == angle(J, C, I) mod 360
By aa_anti_similarity on D, G, B, D, E, B we get anti_similar_triangles(B, D, E, B, D, G)
By reverse_direction on A, B we get 180 == direction(A, B) - direction(B, A) mod 360
By collinear_definition on C, J, I we get J in Line(C, I), I in Line(C, J), Line(C, I) == Line(C, J), 0 == 2 * angle(J, C, I) mod 360
By reverse_direction on B, D we get 180 == direction(B, D) - direction(D, B) mod 360
By between_imply_segment_sum on B, G, A we get distance(A, B) == distance(B, G) + distance(A, G)
By reverse_direction on D, E we get 180 == direction(D, E) - direction(E, D) mod 360
By reverse_direction on A, G we get 180 == direction(A, G) - direction(G, A) mod 360
By reverse_direction on C, E we get 180 == direction(C, E) - direction(E, C) mod 360
By reverse_direction on G, D we get 180 == direction(G, D) - direction(D, G) mod 360
By internal_angle_bisector_definition_v0 on I, J, I, G we get angle(I, G, J) == angle(J, G, I) mod 360
By between_imply_segment_sum on B, E, C we get distance(B, C) == distance(B, E) + distance(C, E)
By reverse_direction on F, D we get 180 == direction(F, D) - direction(D, F) mod 360
By between_imply_segment_sum on A, F, C we get distance(A, C) == distance(A, F) + distance(C, F)
By reverse_direction on B, G we get 180 == direction(B, G) - direction(G, B) mod 360
By collinear_definition on G, I, J we get I in Line(G, J), J in Line(G, I), Line(G, I) == Line(G, J), 0 == 2 * angle(I, G, J) mod 360
By reverse_direction on B, E we get 180 == direction(B, E) - direction(E, B) mod 360
By reverse_direction on A, F we get 180 == direction(A, F) - direction(F, A) mod 360
By aa_anti_similarity on D, B, G, D, B, E we get anti_similar_triangles(B, D, E, B, D, G)
By reverse_direction on D, G we get 180 == direction(D, G) - direction(G, D) mod 360
By reverse_direction on C, F we get 180 == direction(C, F) - direction(F, C) mod 360
By reverse_direction on F, A we get 180 == direction(F, A) - direction(A, F) mod 360
By reverse_direction on D, B we get 180 == direction(D, B) - direction(B, D) mod 360
By reverse_direction on F, C we get 180 == direction(F, C) - direction(C, F) mod 360
By external_angle_bisector_definition_v0_r on C, D, C, F we get Line(D, F) == external_angle_bisector(C, F, C)
By external_angle_bisector_definition_v0_r on C, D, C, E we get Line(D, E) == external_angle_bisector(C, E, C)
By internal_angle_bisector_definition_v0_r on E, C, E, B we get Line(B, C) == internal_angle_bisector(E, B, E)
By internal_angle_bisector_definition_v0_r on J, C, J, G we get Line(C, G) == internal_angle_bisector(J, G, J)
By internal_angle_bisector_definition_v0_r on F, C, F, A we get Line(A, C) == internal_angle_bisector(F, A, F)
By internal_angle_bisector_definition_v0_r on A, D, B, G we get Line(D, G) == internal_angle_bisector(A, G, B)
By internal_angle_bisector_definition_v0_r on B, D, C, E we get Line(D, E) == internal_angle_bisector(B, E, C)
By collinear_definition on I, J, C we get J in Line(C, I), C in Line(I, J), Line(C, I) == Line(I, J), 0 == 2 * angle(J, I, C) mod 360
By internal_angle_bisector_definition_v0_r on C, F, C, A we get Line(A, F) == internal_angle_bisector(C, A, C)
By external_angle_bisector_definition_v0_r on D, B, D, E we get Line(B, E) == external_angle_bisector(D, E, D)
By external_angle_bisector_definition_v0_r on D, A, D, F we get Line(A, F) == external_angle_bisector(D, F, D)
By external_angle_bisector_definition_v0_r on D, B, D, G we get Line(B, G) == external_angle_bisector(D, G, D)
By internal_angle_bisector_definition_v0 on C, J, C, I we get angle(C, I, J) == angle(J, I, C) mod 360
By external_angle_bisector_definition_v0_r on B, D, B, G we get Line(D, G) == external_angle_bisector(B, G, B)
By internal_angle_bisector_definition_v0_r on E, D, G, B we get Line(B, D) == internal_angle_bisector(E, B, G)
By external_angle_bisector_definition_v0_r on D, C, D, F we get Line(C, F) == external_angle_bisector(D, F, D)
By internal_angle_bisector_definition_v0_r on C, B, C, E we get Line(B, E) == internal_angle_bisector(C, E, C)
By internal_angle_bisector_definition_v0_r on J, C, I, G we get Line(C, G) == internal_angle_bisector(I, G, J)
By external_angle_bisector_definition_v0_r on A, D, A, F we get Line(D, F) == external_angle_bisector(A, F, A)
By internal_angle_bisector_definition_v0_r on C, G, C, J we get Line(G, J) == internal_angle_bisector(C, J, C)
By external_angle_bisector_definition_v0_r on B, D, B, E we get Line(D, E) == external_angle_bisector(B, E, B)
By internal_angle_bisector_definition_v0_r on A, G, A, B we get Line(B, G) == internal_angle_bisector(A, B, A)
By internal_angle_bisector_definition_v0_r on I, G, J, C we get Line(C, G) == internal_angle_bisector(I, C, J)
By internal_angle_bisector_definition_v0_r on C, A, C, F we get Line(A, F) == internal_angle_bisector(C, F, C)
By internal_angle_bisector_definition_v0 on B, D, A, C we get angle(B, C, D) == angle(D, C, A) mod 360
By internal_angle_bisector_definition_v0_r on A, C, A, F we get Line(C, F) == internal_angle_bisector(A, F, A)
By internal_angle_bisector_definition_v0_r on E, B, E, C we get Line(B, C) == internal_angle_bisector(E, C, E)
By external_angle_bisector_definition_v0_r on D, A, D, G we get Line(A, G) == external_angle_bisector(D, G, D)
By internal_angle_bisector_definition_v0_r on B, D, F, A we get Line(A, D) == internal_angle_bisector(B, A, F)
By collinear_definition on J, C, I we get C in Line(I, J), I in Line(C, J), Line(C, J) == Line(I, J), 0 == 2 * angle(C, J, I) mod 360
By internal_angle_bisector_definition_v0_r on A, D, C, F we get Line(D, F) == internal_angle_bisector(A, F, C)
By internal_angle_bisector_definition_v0_r on C, E, C, B we get Line(B, E) == internal_angle_bisector(C, B, C)
By collinear_definition on I, C, J we get C in Line(I, J), J in Line(C, I), Line(C, I) == Line(I, J), 0 == 2 * angle(C, I, J) mod 360
By internal_angle_bisector_definition_v0 on G, J, G, I we get angle(G, I, J) == angle(J, I, G) mod 360
By internal_angle_bisector_definition_v0_r on A, F, A, C we get Line(C, F) == internal_angle_bisector(A, C, A)
By collinear_definition on I, J, G we get J in Line(G, I), G in Line(I, J), Line(G, I) == Line(I, J), 0 == 2 * angle(J, I, G) mod 360
By internal_angle_bisector_definition_v0_r on G, A, G, B we get Line(A, B) == internal_angle_bisector(G, B, G)
By external_angle_bisector_definition_v0_r on D, C, D, E we get Line(C, E) == external_angle_bisector(D, E, D)
By external_angle_bisector_definition_v0_r on A, D, A, G we get Line(D, G) == external_angle_bisector(A, G, A)
By internal_angle_bisector_definition_v0_r on A, D, E, B we get Line(B, D) == internal_angle_bisector(A, B, E)
By internal_angle_bisector_definition_v0_r on G, B, G, A we get Line(A, B) == internal_angle_bisector(G, A, G)
By collinear_definition on I, G, J we get G in Line(I, J), J in Line(G, I), Line(G, I) == Line(I, J), 0 == 2 * angle(G, I, J) mod 360
By internal_angle_bisector_definition_v0_r on J, G, J, C we get Line(C, G) == internal_angle_bisector(J, C, J)
By internal_angle_bisector_definition_v0_r on C, D, G, B we get Line(B, D) == internal_angle_bisector(C, B, G)
By collinear_definition on J, I, G we get I in Line(G, J), G in Line(I, J), Line(G, J) == Line(I, J), 0 == 2 * angle(I, J, G) mod 360
By internal_angle_bisector_definition_v0_r on B, A, B, G we get Line(A, G) == internal_angle_bisector(B, G, B)
By internal_angle_bisector_definition_v0_r on G, C, G, J we get Line(C, J) == internal_angle_bisector(G, J, G)
By reverse_direction on A, D we get 180 == direction(A, D) - direction(D, A) mod 360
By collinear_definition on J, G, I we get G in Line(I, J), I in Line(G, J), Line(G, J) == Line(I, J), 0 == 2 * angle(G, J, I) mod 360
By internal_angle_bisector_definition_v0_r on A, B, A, G we get Line(B, G) == internal_angle_bisector(A, G, A)
By internal_angle_bisector_definition_v0_r on G, D, C, A we get Line(A, D) == internal_angle_bisector(C, A, G)
By internal_angle_bisector_definition_v0_r on G, D, F, A we get Line(A, D) == internal_angle_bisector(F, A, G)
By internal_angle_bisector_definition_v0_r on B, E, B, C we get Line(C, E) == internal_angle_bisector(B, C, B)
By internal_angle_bisector_definition_v0_r on B, G, B, A we get Line(A, G) == internal_angle_bisector(B, A, B)
By aa_anti_similarity on D, F, A, D, G, A we get anti_similar_triangles(A, D, F, A, D, G)
By internal_angle_bisector_definition_v0 on A, D, B, C we get angle(A, C, D) == angle(D, C, B) mod 360
By aa_anti_similarity on D, A, G, D, A, F we get anti_similar_triangles(A, D, F, A, D, G)
By collinear_definition on J, I, C we get I in Line(C, J), C in Line(I, J), Line(C, J) == Line(I, J), 0 == 2 * angle(I, J, C) mod 360
By internal_angle_bisector_definition_v0_r on F, A, F, C we get Line(A, C) == internal_angle_bisector(F, C, F)
By aa_anti_similarity on D, A, F, D, A, G we get anti_similar_triangles(A, D, F, A, D, G)
By aa_anti_similarity on D, G, A, D, F, A we get anti_similar_triangles(A, D, F, A, D, G)
By internal_angle_bisector_definition_v0_r on B, C, B, E we get Line(C, E) == internal_angle_bisector(B, E, B)
By sas_similarity on H, C, G, K, C, I we get similar_triangles(C, G, H, C, I, K)
By sas_similarity on K, C, I, H, C, G we get similar_triangles(C, G, H, C, I, K)
By sas_similarity on G, C, H, I, C, K we get similar_triangles(C, G, H, C, I, K)
By sas_similarity on I, C, K, G, C, H we get similar_triangles(C, G, H, C, I, K)
By power_of_a_point_definition on I, J, G, c we get log(power_of_a_point(I, c)) == log(distance(I, J)) + log(distance(G, I))
By line_intersection_definition on K, Line(C, H), Line(I, K) we get K == line_intersection(Line(C, H), Line(I, K))
By median_definition on K, C, G, Line(I, K) we get Line(I, K) == median(K, C, G)
By median_definition on I, C, H, Line(I, K) we get Line(I, K) == median(I, C, H)
By line_intersection_definition on I, Line(I, K), l we get I == line_intersection(l, Line(I, K))
By same_angle_v3 on I, J, C, K we get angle(J, I, K) == angle(C, I, K) + 180 mod 360
By same_angle_v2 on K, C, H, I we get angle(C, K, I) == angle(H, K, I) + 180 mod 360
By same_angle_v3 on I, G, C, K we get angle(G, I, K) == angle(C, I, K) + 180 mod 360
By same_angle_v0 on I, J, G, K we get angle(G, I, K) == angle(J, I, K) mod 360
By between_imply_not_between on I, J, G we get collinear_and_not_between(G, I, J)
By between_imply_not_between on G, J, I we get collinear_and_not_between(I, G, J)
By between_imply_not_between on C, I, J we get collinear_and_not_between(I, C, J)
By between_imply_not_between on J, I, C we get collinear_and_not_between(C, J, I)
By between_imply_segment_sum on C, I, J we get distance(C, J) == distance(C, I) + distance(I, J)
By between_imply_segment_sum on G, J, I we get distance(G, I) == distance(G, J) + distance(I, J)
By between_implies_angles on I, J, G we get 180 == angle(I, J, G) mod 360, 0 == angle(J, G, I) mod 360, 0 == angle(G, I, J) mod 360
By reverse_direction on J, I we get 180 == direction(J, I) - direction(I, J) mod 360
By between_implies_angles on G, J, I we get 180 == angle(G, J, I) mod 360, 0 == angle(J, I, G) mod 360, 0 == angle(I, G, J) mod 360
By between_implies_angles on C, I, J we get 180 == angle(C, I, J) mod 360, 0 == angle(I, J, C) mod 360, 0 == angle(J, C, I) mod 360
By between_implies_angles on J, I, C we get 180 == angle(J, I, C) mod 360, 0 == angle(I, C, J) mod 360, 0 == angle(C, J, I) mod 360
By reverse_direction on I, J we get 180 == direction(I, J) - direction(J, I) mod 360
By external_angle_bisector_definition_v0_r on C, I, G, J we get Line(I, J) == external_angle_bisector(C, J, G)
By concyclic_definition_0 on G, A, D, F we get F in Circle(A, D, G)
By concyclic_definition_0 on D, C, E, F we get F in Circle(C, D, E)
By external_angle_bisector_definition_v0_r on G, C, I, J we get Line(C, J) == external_angle_bisector(G, J, I)
By concyclic_definition_0 on A, F, D, G we get G in Circle(A, D, F)
By external_angle_bisector_definition_v0_r on G, J, C, I we get Line(I, J) == external_angle_bisector(C, I, G)
By concyclic_definition_0 on G, B, E, D we get D in Circle(B, E, G)
By internal_angle_bisector_definition_v0_r on I, G, I, J we get Line(G, J) == internal_angle_bisector(I, J, I)
By internal_angle_bisector_definition_v0_r on J, I, C, G we get Line(G, I) == internal_angle_bisector(C, G, J)
By internal_angle_bisector_definition_v0_r on G, B, E, D we get Line(B, D) == internal_angle_bisector(E, D, G)
By concyclic_definition_0 on D, B, G, E we get E in Circle(B, D, G)
By concyclic_definition_0 on G, A, F, D we get D in Circle(A, F, G)
By concyclic_definition_0 on G, E, D, B we get B in Circle(D, E, G)
By concyclic_definition_0 on B, D, E, G we get G in Circle(B, D, E)
By internal_angle_bisector_definition_v0_r on J, G, J, I we get Line(G, I) == internal_angle_bisector(J, I, J)
By internal_angle_bisector_definition_v0_r on C, G, I, J we get Line(G, J) == internal_angle_bisector(C, J, I)
By concyclic_definition_0 on F, C, D, E we get E in Circle(C, D, F)
By internal_angle_bisector_definition_v0_r on F, A, G, D we get Line(A, D) == internal_angle_bisector(F, D, G)
By concyclic_definition_0 on G, F, D, A we get A in Circle(D, F, G)
By aa_anti_similarity on D, E, C, D, F, C we get anti_similar_triangles(C, D, E, C, D, F)
By concyclic_definition_0 on F, D, E, C we get C in Circle(D, E, F)
By concyclic_definition_0 on E, F, C, D we get D in Circle(C, E, F)
By internal_angle_bisector_definition_v0_r on J, I, G, C we get Line(C, I) == internal_angle_bisector(G, C, J)
By internal_angle_bisector_definition_v0_r on A, D, E, C we get Line(C, D) == internal_angle_bisector(A, C, E)
By internal_angle_bisector_definition_v0_r on E, D, F, C we get Line(C, D) == internal_angle_bisector(E, C, F)
By internal_angle_bisector_definition_v0_r on I, J, G, C we get Line(C, J) == internal_angle_bisector(G, C, I)
By internal_angle_bisector_definition_v0_r on C, J, I, G we get Line(G, J) == internal_angle_bisector(C, G, I)
By internal_angle_bisector_definition_v0_r on B, D, F, C we get Line(C, D) == internal_angle_bisector(B, C, F)
By internal_angle_bisector_definition_v0_r on J, C, J, I we get Line(C, I) == internal_angle_bisector(J, I, J)
By aa_anti_similarity on D, C, E, D, C, F we get anti_similar_triangles(C, D, E, C, D, F)
By internal_angle_bisector_definition_v0_r on I, C, I, J we get Line(C, J) == internal_angle_bisector(I, J, I)
By aa_anti_similarity on D, C, F, D, C, E we get anti_similar_triangles(C, D, E, C, D, F)
By aa_anti_similarity on D, F, C, D, E, C we get anti_similar_triangles(C, D, E, C, D, F)
By reverse_direction on C, D we get 180 == direction(C, D) - direction(D, C) mod 360
By concyclic_definition_1 on D, G, B, E we get Circle(B, D, G) == Circle(B, E, G)
By similar_triangle_basic_properties on H, C, G, K, C, I we get angle(H, C, G) == angle(K, C, I) mod 360, angle(C, G, H) == angle(C, I, K) mod 360, angle(G, H, C) == angle(I, K, C) mod 360, log(distance(C, H)) + log(distance(C, I)) == log(distance(C, K)) + log(distance(C, G)), log(distance(C, G)) + log(distance(I, K)) == log(distance(C, I)) + log(distance(G, H)), log(distance(G, H)) + log(distance(C, K)) == log(distance(I, K)) + log(distance(C, H))
By concyclic_definition_1 on E, F, C, D we get Circle(C, D, F) == Circle(C, E, F)
By concyclic_definition_1 on G, A, F, D we get Circle(A, D, F) == Circle(A, F, G)
By concyclic_definition_1 on F, C, E, D we get Circle(C, D, E) == Circle(C, E, F)
By concyclic_definition_1 on F, D, G, A we get Circle(A, D, G) == Circle(D, F, G)
By concyclic_definition_1 on D, G, F, A we get Circle(A, F, G) == Circle(D, F, G)
By concyclic_definition_1 on E, D, B, G we get Circle(B, D, E) == Circle(B, D, G)
By concyclic_definition_1 on E, D, F, C we get Circle(C, D, F) == Circle(D, E, F)
By concyclic_definition_1 on A, F, D, G we get Circle(A, D, F) == Circle(D, F, G)
By concyclic_definition_1 on F, G, A, D we get Circle(A, D, G) == Circle(A, F, G)
By concyclic_definition_1 on C, D, E, F we get Circle(C, D, E) == Circle(D, E, F)
By concyclic_definition_1 on E, D, C, F we get Circle(C, D, E) == Circle(C, D, F)
By concyclic_definition_1 on F, A, D, G we get Circle(A, D, F) == Circle(A, D, G)
By concyclic_definition_1 on G, E, D, B we get Circle(B, D, E) == Circle(D, E, G)
By concyclic_definition_1 on D, E, B, G we get Circle(B, D, E) == Circle(B, E, G)
By concyclic_definition_1 on B, G, D, E we get Circle(B, D, G) == Circle(D, E, G)
By similar_triangle_basic_properties on G, C, H, I, C, K we get angle(G, C, H) == angle(I, C, K) mod 360, angle(C, H, G) == angle(C, K, I) mod 360, angle(H, G, C) == angle(K, I, C) mod 360, log(distance(C, G)) + log(distance(C, K)) == log(distance(C, I)) + log(distance(C, H)), log(distance(C, H)) + log(distance(I, K)) == log(distance(C, K)) + log(distance(G, H)), log(distance(G, H)) + log(distance(C, I)) == log(distance(I, K)) + log(distance(C, G))
By concyclic_definition_1 on C, E, F, D we get Circle(C, E, F) == Circle(D, E, F)
By concyclic_definition_1 on D, E, G, B we get Circle(B, E, G) == Circle(D, E, G)
By anti_similar_triangle_basic_properties on E, D, B, G, D, B we get angle(E, D, B) == 0 - angle(G, D, B) mod 360, angle(D, B, E) == 0 - angle(D, B, G) mod 360, angle(B, E, D) == 0 - angle(B, G, D) mod 360, log(distance(D, E)) + log(distance(B, D)) == log(distance(D, G)) + log(distance(B, D)), log(distance(B, D)) + log(distance(B, E)) == log(distance(B, D)) + log(distance(B, G)), log(distance(B, E)) + log(distance(D, G)) == log(distance(B, G)) + log(distance(D, E))
By anti_similar_triangle_basic_properties on G, A, D, F, A, D we get angle(G, A, D) == 0 - angle(F, A, D) mod 360, angle(A, D, G) == 0 - angle(A, D, F) mod 360, angle(D, G, A) == 0 - angle(D, F, A) mod 360, log(distance(A, F)) + log(distance(A, D)) == log(distance(A, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(D, F)) == log(distance(A, D)) + log(distance(D, G)), log(distance(D, F)) + log(distance(A, G)) == log(distance(D, G)) + log(distance(A, F))
By anti_similar_triangle_basic_properties on G, B, D, E, B, D we get angle(G, B, D) == 0 - angle(E, B, D) mod 360, angle(B, D, G) == 0 - angle(B, D, E) mod 360, angle(D, G, B) == 0 - angle(D, E, B) mod 360, log(distance(B, E)) + log(distance(B, D)) == log(distance(B, G)) + log(distance(B, D)), log(distance(B, D)) + log(distance(D, E)) == log(distance(B, D)) + log(distance(D, G)), log(distance(D, E)) + log(distance(B, G)) == log(distance(D, G)) + log(distance(B, E))
By anti_similar_triangle_basic_properties on D, A, G, D, A, F we get angle(D, A, G) == 0 - angle(D, A, F) mod 360, angle(A, G, D) == 0 - angle(A, F, D) mod 360, angle(G, D, A) == 0 - angle(F, D, A) mod 360, log(distance(A, D)) + log(distance(A, F)) == log(distance(A, D)) + log(distance(A, G)), log(distance(A, F)) + log(distance(D, G)) == log(distance(A, G)) + log(distance(D, F)), log(distance(D, F)) + log(distance(A, D)) == log(distance(D, G)) + log(distance(A, D))
By angles_on_chord_v3 on G, F, A, D, Circle(A, D, F) we get angle(G, A, F) == angle(G, D, F) + 180 mod 360
By angles_on_chord_v1 on C, F, E, D, Circle(C, D, E) we get angle(C, D, F) == angle(C, E, F) mod 360
By angles_on_chord_v1 on D, F, G, A, Circle(A, D, F) we get angle(D, A, F) == angle(D, G, F) mod 360
By angles_on_chord_v0 on D, F, C, E, Circle(C, D, E) we get angle(D, C, F) == angle(D, E, F) mod 360
By angles_on_chord_v3 on G, E, D, B, Circle(B, D, E) we get angle(G, D, E) == angle(G, B, E) + 180 mod 360
By angles_on_chord_v0 on G, A, D, F, Circle(A, D, F) we get angle(G, D, A) == angle(G, F, A) mod 360
By angles_on_chord_v1 on D, G, E, B, Circle(B, D, E) we get angle(D, B, G) == angle(D, E, G) mod 360
By angles_on_chord_v0 on F, C, E, D, Circle(C, D, E) we get angle(F, D, C) == angle(F, E, C) mod 360
By angles_on_chord_v1 on B, E, G, D, Circle(B, D, E) we get angle(B, D, E) == angle(B, G, E) mod 360
By angles_on_chord_v0 on F, D, G, A, Circle(A, D, F) we get angle(F, A, D) == angle(F, G, D) mod 360
By angles_on_chord_v2 on G, F, D, A, Circle(A, D, F) we get angle(G, D, F) == angle(G, A, F) + 180 mod 360
By angles_on_chord_v0 on D, E, G, B, Circle(B, D, E) we get angle(D, B, E) == angle(D, G, E) mod 360
By angles_on_chord_v0 on C, E, F, D, Circle(C, D, E) we get angle(C, D, E) == angle(C, F, E) mod 360
By angles_on_chord_v0 on E, B, G, D, Circle(B, D, E) we get angle(E, D, B) == angle(E, G, B) mod 360
By angles_on_chord_v0 on E, D, C, F, Circle(C, D, E) we get angle(E, C, D) == angle(E, F, D) mod 360
By angles_on_chord_v0 on B, G, D, E, Circle(B, D, E) we get angle(B, D, G) == angle(B, E, G) mod 360
By angles_on_chord_v0 on A, F, G, D, Circle(A, D, F) we get angle(A, D, F) == angle(A, G, F) mod 360
By angles_on_chord_v2 on E, G, D, B, Circle(B, D, E) we get angle(E, D, G) == angle(E, B, G) + 180 mod 360
By angles_on_chord_v1 on G, D, A, F, Circle(A, D, F) we get angle(G, A, D) == angle(G, F, D) mod 360
By angles_on_chord_v1 on G, B, D, E, Circle(B, D, E) we get angle(G, D, B) == angle(G, E, B) mod 360
By angles_on_chord_v1 on A, G, D, F, Circle(A, D, F) we get angle(A, D, G) == angle(A, F, G) mod 360
By angles_on_chord_v1 on D, E, F, C, Circle(C, D, E) we get angle(D, C, E) == angle(D, F, E) mod 360
By angles_on_chord_v1 on F, D, E, C, Circle(C, D, E) we get angle(F, C, D) == angle(F, E, D) mod 360
By angles_on_chord_v2 on F, E, D, C, Circle(C, D, E) we get angle(F, D, E) == angle(F, C, E) + 180 mod 360
By angles_on_chord_v0 on G, D, B, E, Circle(B, D, E) we get angle(G, B, D) == angle(G, E, D) mod 360
By angles_on_chord_v0 on D, G, A, F, Circle(A, D, F) we get angle(D, A, G) == angle(D, F, G) mod 360
By angles_on_chord_v2 on E, F, C, D, Circle(C, D, E) we get angle(E, C, F) == angle(E, D, F) + 180 mod 360
By angles_on_chord_v1 on E, D, G, B, Circle(B, D, E) we get angle(E, B, D) == angle(E, G, D) mod 360
By angles_on_chord_v3 on F, G, D, A, Circle(A, D, F) we get angle(F, D, G) == angle(F, A, G) + 180 mod 360
By angles_on_chord_v3 on F, E, C, D, Circle(C, D, E) we get angle(F, C, E) == angle(F, D, E) + 180 mod 360
By angles_on_chord_v1 on F, A, G, D, Circle(A, D, F) we get angle(F, D, A) == angle(F, G, A) mod 360
By angles_on_chord_v3 on E, F, D, C, Circle(C, D, E) we get angle(E, D, F) == angle(E, C, F) + 180 mod 360
By angles_on_chord_v1 on E, C, D, F, Circle(C, D, E) we get angle(E, D, C) == angle(E, F, C) mod 360
By angles_on_chord_v2 on F, G, A, D, Circle(A, D, F) we get angle(F, A, G) == angle(F, D, G) + 180 mod 360
By angles_on_chord_v3 on E, G, B, D, Circle(B, D, E) we get angle(E, B, G) == angle(E, D, G) + 180 mod 360
By angles_on_chord_v2 on G, E, B, D, Circle(B, D, E) we get angle(G, B, E) == angle(G, D, E) + 180 mod 360
By chords_on_equal_angles_v0 on C, D, E, F, D, C, Circle(C, D, E) we get distance(C, E) == distance(C, F)
By radical_axis_of_intersecting_circles_v0 on E, G, c, Circle(B, D, E) we get Line(E, G) == radical_axis(c, Circle(B, D, E))
By radical_axis_of_intersecting_circles_v0 on D, G, Circle(A, D, F), Circle(B, D, E) we get Line(D, G) == radical_axis(Circle(A, D, F), Circle(B, D, E))
By radical_axis_of_intersecting_circles_v0 on D, F, Circle(A, D, F), Circle(C, D, E) we get Line(D, F) == radical_axis(Circle(A, D, F), Circle(C, D, E))
By radical_axis_of_intersecting_circles_v0 on D, E, Circle(B, D, E), Circle(C, D, E) we get Line(D, E) == radical_axis(Circle(B, D, E), Circle(C, D, E))
By radical_axis_of_intersecting_circles_v0 on F, G, Circle(A, D, F), c we get Line(F, G) == radical_axis(c, Circle(A, D, F))
By radical_axis_of_intersecting_circles_v0 on F, E, c, Circle(C, D, E) we get Line(E, F) == radical_axis(c, Circle(C, D, E))
By sas_anti_similarity on E, B, G, G, B, E we get anti_similar_triangles(B, E, G, B, G, E)
By parallel_line_angles_v1 on K, I, G, H we get parallel(Line(G, H), Line(I, K))
By sas_anti_similarity on G, A, F, F, A, G we get anti_similar_triangles(A, F, G, A, G, F)
By sas_anti_similarity on F, A, G, G, A, F we get anti_similar_triangles(A, F, G, A, G, F)
By sas_anti_similarity on G, B, E, E, B, G we get anti_similar_triangles(B, E, G, B, G, E)
By power_of_a_point_on_circle on F, Circle(A, D, F) we get 0 == power_of_a_point(F, Circle(A, D, F))
By power_of_a_point_on_circle on D, Circle(A, D, F) we get 0 == power_of_a_point(D, Circle(A, D, F))
By internal_angle_bisector_definition_v0_r on F, C, E, D we get Line(C, D) == internal_angle_bisector(E, D, F)
By external_angle_bisector_definition_v0_r on J, G, C, I we get Line(G, I) == external_angle_bisector(C, I, J)
By power_of_a_point_in_circle on A, Circle(A, D, F) we get 0 == power_of_a_point(A, Circle(A, D, F))
By power_of_a_point_in_circle on E, Circle(C, D, E) we get 0 == power_of_a_point(E, Circle(C, D, E))
By power_of_a_point_on_circle on G, Circle(B, D, E) we get 0 == power_of_a_point(G, Circle(B, D, E))
By power_of_a_point_on_circle on G, Circle(A, D, F) we get 0 == power_of_a_point(G, Circle(A, D, F))
By power_of_a_point_on_circle on B, Circle(B, D, E) we get 0 == power_of_a_point(B, Circle(B, D, E))
By power_of_a_point_in_circle on D, Circle(B, D, E) we get 0 == power_of_a_point(D, Circle(B, D, E))
By power_of_a_point_on_circle on D, Circle(C, D, E) we get 0 == power_of_a_point(D, Circle(C, D, E))
By internal_angle_bisector_definition_v0_r on G, C, J, I we get Line(C, I) == internal_angle_bisector(G, I, J)
By power_of_a_point_in_circle on F, Circle(C, D, E) we get 0 == power_of_a_point(F, Circle(C, D, E))
By power_of_a_point_on_circle on C, Circle(C, D, E) we get 0 == power_of_a_point(C, Circle(C, D, E))
By power_of_a_point_in_circle on E, Circle(B, D, E) we get 0 == power_of_a_point(E, Circle(B, D, E))
By anti_similar_triangle_basic_properties on E, D, C, F, D, C we get angle(E, D, C) == 0 - angle(F, D, C) mod 360, angle(D, C, E) == 0 - angle(D, C, F) mod 360, angle(C, E, D) == 0 - angle(C, F, D) mod 360, log(distance(D, E)) + log(distance(C, D)) == log(distance(D, F)) + log(distance(C, D)), log(distance(C, D)) + log(distance(C, E)) == log(distance(C, D)) + log(distance(C, F)), log(distance(C, E)) + log(distance(D, F)) == log(distance(C, F)) + log(distance(D, E))
By anti_similar_triangle_basic_properties on E, C, D, F, C, D we get angle(E, C, D) == 0 - angle(F, C, D) mod 360, angle(C, D, E) == 0 - angle(C, D, F) mod 360, angle(D, E, C) == 0 - angle(D, F, C) mod 360, log(distance(C, E)) + log(distance(C, D)) == log(distance(C, F)) + log(distance(C, D)), log(distance(C, D)) + log(distance(D, E)) == log(distance(C, D)) + log(distance(D, F)), log(distance(D, E)) + log(distance(C, F)) == log(distance(D, F)) + log(distance(C, E))
By power_of_a_point_definition on A, F, C, Circle(C, D, E) we get log(distance(A, F)) + log(distance(A, C)) == log(power_of_a_point(A, Circle(C, D, E)))
By power_of_a_point_definition on B, C, E, Circle(C, D, E) we get log(distance(B, C)) + log(distance(B, E)) == log(power_of_a_point(B, Circle(C, D, E)))
By power_of_a_point_definition on B, A, G, Circle(A, D, F) we get log(distance(A, B)) + log(distance(B, G)) == log(power_of_a_point(B, Circle(A, D, F)))
By power_of_a_point_definition on A, G, B, Circle(B, D, E) we get log(distance(A, G)) + log(distance(A, B)) == log(power_of_a_point(A, Circle(B, D, E)))
By power_of_a_point_definition on C, B, E, Circle(B, D, E) we get log(distance(B, C)) + log(distance(C, E)) == log(power_of_a_point(C, Circle(B, D, E)))
By power_of_a_point_definition on C, F, A, Circle(A, D, F) we get log(distance(C, F)) + log(distance(A, C)) == log(power_of_a_point(C, Circle(A, D, F)))
By perpendicular_direction_conditions_v0 on C, G, J, H we get perpendicular(Line(C, G), Line(H, J))
By perpendicular_direction_conditions_v0 on B, A, I, K we get perpendicular(Line(A, B), Line(I, K))
By perpendicular_direction_conditions_v0 on I, K, B, G we get perpendicular(Line(B, G), Line(I, K))
By perpendicular_direction_conditions_v0 on F, G, F, H we get perpendicular(Line(F, G), Line(F, H))
By perpendicular_direction_conditions_v0 on H, J, C, I we get perpendicular(Line(C, I), Line(H, J))
By perpendicular_direction_conditions_v0 on B, A, G, H we get perpendicular(Line(A, B), Line(G, H))
By perpendicular_direction_conditions_v0 on H, J, J, C we get perpendicular(Line(C, J), Line(H, J))
By perpendicular_direction_conditions_v0 on G, H, B, G we get perpendicular(Line(B, G), Line(G, H))
By perpendicular_direction_conditions_v0 on H, G, A, G we get perpendicular(Line(A, G), Line(G, H))
By perpendicular_direction_conditions_v0 on J, G, J, H we get perpendicular(Line(G, J), Line(H, J))
By perpendicular_direction_conditions_v0 on G, E, E, H we get perpendicular(Line(E, G), Line(E, H))
By perpendicular_direction_conditions_v0 on D, C, F, E we get perpendicular(Line(C, D), Line(E, F))
By perpendicular_direction_conditions_v0 on G, A, I, K we get perpendicular(Line(A, G), Line(I, K))
By perpendicular_direction_conditions_v0 on D, A, G, F we get perpendicular(Line(A, D), Line(F, G))
By perpendicular_direction_conditions_v0 on B, D, E, G we get perpendicular(Line(B, D), Line(E, G))
By perpendicular_direction_conditions_v0 on G, I, H, J we get perpendicular(Line(G, I), Line(H, J))
By perpendicular_direction_conditions_v0 on I, J, H, J we get perpendicular(Line(H, J), Line(I, J))
By circle_radius_v0_r on G, c we get radius(c) == distance(G, center(c))
By parallel_line_definition on H, Line(G, H), Line(I, K) we get Line(G, H) == parallel_line(H, Line(I, K))
By circle_radius_v0_r on H, c we get radius(c) == distance(H, center(c))
By circle_radius_v0_r on A, Circle(A, D, F) we get radius(Circle(A, D, F)) == distance(A, center(Circle(A, D, F)))
By circle_radius_v0_r on C, Circle(C, D, E) we get radius(Circle(C, D, E)) == distance(C, center(Circle(C, D, E)))
By circle_radius_v0_r on E, c we get radius(c) == distance(E, center(c))
By circle_radius_v0_r on E, Circle(C, D, E) we get radius(Circle(C, D, E)) == distance(E, center(Circle(C, D, E)))
By parallel_line_definition on I, Line(I, K), Line(G, H) we get Line(I, K) == parallel_line(I, Line(G, H))
By circle_radius_v0_r on F, c we get radius(c) == distance(F, center(c))
By circle_radius_v0_r on G, Circle(B, D, E) we get radius(Circle(B, D, E)) == distance(G, center(Circle(B, D, E)))
By parallel_line_definition on G, Line(G, H), Line(I, K) we get Line(G, H) == parallel_line(G, Line(I, K))
By circle_radius_v0_r on B, Circle(B, D, E) we get radius(Circle(B, D, E)) == distance(B, center(Circle(B, D, E)))
By circle_radius_v0_r on G, Circle(A, D, F) we get radius(Circle(A, D, F)) == distance(G, center(Circle(A, D, F)))
By circle_radius_v0_r on D, Circle(A, D, F) we get radius(Circle(A, D, F)) == distance(D, center(Circle(A, D, F)))
By circle_radius_v0_r on F, Circle(A, D, F) we get radius(Circle(A, D, F)) == distance(F, center(Circle(A, D, F)))
By circle_radius_v0_r on E, Circle(B, D, E) we get radius(Circle(B, D, E)) == distance(E, center(Circle(B, D, E)))
By circle_radius_v0_r on J, c we get radius(c) == distance(J, center(c))
By parallel_line_definition on K, Line(I, K), Line(G, H) we get Line(I, K) == parallel_line(K, Line(G, H))
By circle_radius_v0_r on F, Circle(C, D, E) we get radius(Circle(C, D, E)) == distance(F, center(Circle(C, D, E)))
By circle_radius_v0_r on D, Circle(B, D, E) we get radius(Circle(B, D, E)) == distance(D, center(Circle(B, D, E)))
By circle_radius_v0_r on D, Circle(C, D, E) we get radius(Circle(C, D, E)) == distance(D, center(Circle(C, D, E)))
By angle_to_center on G, B, E, Circle(B, D, E) we get 2 * angle(G, B, E) == angle(G, center(Circle(B, D, E)), E) mod 360
By angle_to_center on G, F, H, c we get 2 * angle(G, F, H) == angle(G, center(c), H) mod 360
By angle_to_center on B, E, D, Circle(B, D, E) we get 2 * angle(B, E, D) == angle(B, center(Circle(B, D, E)), D) mod 360
By angle_to_center on E, F, J, c we get 2 * angle(E, F, J) == angle(E, center(c), J) mod 360
By angle_to_center on J, G, E, c we get 2 * angle(J, G, E) == angle(J, center(c), E) mod 360
By angle_to_center on D, B, E, Circle(B, D, E) we get 2 * angle(D, B, E) == angle(D, center(Circle(B, D, E)), E) mod 360
By angle_to_center on F, D, C, Circle(C, D, E) we get 2 * angle(F, D, C) == angle(F, center(Circle(C, D, E)), C) mod 360
By angle_to_center on G, B, D, Circle(B, D, E) we get 2 * angle(G, B, D) == angle(G, center(Circle(B, D, E)), D) mod 360
By angle_to_center on B, D, E, Circle(B, D, E) we get 2 * angle(B, D, E) == angle(B, center(Circle(B, D, E)), E) mod 360
By angle_to_center on E, D, G, Circle(B, D, E) we get 2 * angle(E, D, G) == angle(E, center(Circle(B, D, E)), G) mod 360
By angle_to_center on E, B, G, Circle(B, D, E) we get 2 * angle(E, B, G) == angle(E, center(Circle(B, D, E)), G) mod 360
By angle_to_center on F, E, C, Circle(C, D, E) we get 2 * angle(F, E, C) == angle(F, center(Circle(C, D, E)), C) mod 360
By angle_to_center on E, H, J, c we get 2 * angle(E, H, J) == angle(E, center(c), J) mod 360
By angle_to_center on H, G, F, c we get 2 * angle(H, G, F) == angle(H, center(c), F) mod 360
By angle_to_center on J, H, F, c we get 2 * angle(J, H, F) == angle(J, center(c), F) mod 360
By angle_to_center on F, A, G, Circle(A, D, F) we get 2 * angle(F, A, G) == angle(F, center(Circle(A, D, F)), G) mod 360
By angle_to_center on F, A, D, Circle(A, D, F) we get 2 * angle(F, A, D) == angle(F, center(Circle(A, D, F)), D) mod 360
By angle_to_center on F, J, G, c we get 2 * angle(F, J, G) == angle(F, center(c), G) mod 360
By angle_to_center on E, J, G, c we get 2 * angle(E, J, G) == angle(E, center(c), G) mod 360
By angle_to_center on H, J, E, c we get 2 * angle(H, J, E) == angle(H, center(c), E) mod 360
By angle_to_center on D, B, G, Circle(B, D, E) we get 2 * angle(D, B, G) == angle(D, center(Circle(B, D, E)), G) mod 360
By angle_to_center on F, E, G, c we get 2 * angle(F, E, G) == angle(F, center(c), G) mod 360
By angle_to_center on C, F, E, Circle(C, D, E) we get 2 * angle(C, F, E) == angle(C, center(Circle(C, D, E)), E) mod 360
By angle_to_center on D, G, A, Circle(A, D, F) we get 2 * angle(D, G, A) == angle(D, center(Circle(A, D, F)), A) mod 360
By angle_to_center on E, H, G, c we get 2 * angle(E, H, G) == angle(E, center(c), G) mod 360
By angle_to_center on D, F, G, Circle(A, D, F) we get 2 * angle(D, F, G) == angle(D, center(Circle(A, D, F)), G) mod 360
By angle_to_center on E, J, H, c we get 2 * angle(E, J, H) == angle(E, center(c), H) mod 360
By angle_to_center on A, G, F, Circle(A, D, F) we get 2 * angle(A, G, F) == angle(A, center(Circle(A, D, F)), F) mod 360
By angle_to_center on D, F, E, Circle(C, D, E) we get 2 * angle(D, F, E) == angle(D, center(Circle(C, D, E)), E) mod 360
By angle_to_center on B, E, G, Circle(B, D, E) we get 2 * angle(B, E, G) == angle(B, center(Circle(B, D, E)), G) mod 360
By angle_to_center on G, H, E, c we get 2 * angle(G, H, E) == angle(G, center(c), E) mod 360
By angle_to_center on F, G, J, c we get 2 * angle(F, G, J) == angle(F, center(c), J) mod 360
By angle_to_center on H, J, F, c we get 2 * angle(H, J, F) == angle(H, center(c), F) mod 360
By angle_to_center on C, E, F, Circle(C, D, E) we get 2 * angle(C, E, F) == angle(C, center(Circle(C, D, E)), F) mod 360
By angle_to_center on J, E, H, c we get 2 * angle(J, E, H) == angle(J, center(c), H) mod 360
By angle_to_center on A, D, G, Circle(A, D, F) we get 2 * angle(A, D, G) == angle(A, center(Circle(A, D, F)), G) mod 360
By angle_to_center on H, G, E, c we get 2 * angle(H, G, E) == angle(H, center(c), E) mod 360
By angle_to_center on E, J, F, c we get 2 * angle(E, J, F) == angle(E, center(c), F) mod 360
By angle_to_center on H, E, F, c we get 2 * angle(H, E, F) == angle(H, center(c), F) mod 360
By angle_to_center on G, J, F, c we get 2 * angle(G, J, F) == angle(G, center(c), F) mod 360
By angle_to_center on G, J, H, c we get 2 * angle(G, J, H) == angle(G, center(c), H) mod 360
By angle_to_center on G, A, F, Circle(A, D, F) we get 2 * angle(G, A, F) == angle(G, center(Circle(A, D, F)), F) mod 360
By angle_to_center on G, H, F, c we get 2 * angle(G, H, F) == angle(G, center(c), F) mod 360
By angle_to_center on E, G, F, c we get 2 * angle(E, G, F) == angle(E, center(c), F) mod 360
By angle_to_center on G, E, J, c we get 2 * angle(G, E, J) == angle(G, center(c), J) mod 360
By angle_to_center on F, G, E, c we get 2 * angle(F, G, E) == angle(F, center(c), E) mod 360
By angle_to_center on D, G, B, Circle(B, D, E) we get 2 * angle(D, G, B) == angle(D, center(Circle(B, D, E)), B) mod 360
By angle_to_center on F, E, D, Circle(C, D, E) we get 2 * angle(F, E, D) == angle(F, center(Circle(C, D, E)), D) mod 360
By angle_to_center on F, E, J, c we get 2 * angle(F, E, J) == angle(F, center(c), J) mod 360
By angle_to_center on B, D, G, Circle(B, D, E) we get 2 * angle(B, D, G) == angle(B, center(Circle(B, D, E)), G) mod 360
By angle_to_center on F, C, E, Circle(C, D, E) we get 2 * angle(F, C, E) == angle(F, center(Circle(C, D, E)), E) mod 360
By angle_to_center on J, H, E, c we get 2 * angle(J, H, E) == angle(J, center(c), E) mod 360
By angle_to_center on H, F, J, c we get 2 * angle(H, F, J) == angle(H, center(c), J) mod 360
By angle_to_center on G, F, E, c we get 2 * angle(G, F, E) == angle(G, center(c), E) mod 360
By angle_to_center on F, J, E, c we get 2 * angle(F, J, E) == angle(F, center(c), E) mod 360
By angle_to_center on G, D, B, Circle(B, D, E) we get 2 * angle(G, D, B) == angle(G, center(Circle(B, D, E)), B) mod 360
By angle_to_center on J, G, F, c we get 2 * angle(J, G, F) == angle(J, center(c), F) mod 360
By angle_to_center on C, D, F, Circle(C, D, E) we get 2 * angle(C, D, F) == angle(C, center(Circle(C, D, E)), F) mod 360
By angle_to_center on G, F, A, Circle(A, D, F) we get 2 * angle(G, F, A) == angle(G, center(Circle(A, D, F)), A) mod 360
By angle_to_center on E, F, D, Circle(C, D, E) we get 2 * angle(E, F, D) == angle(E, center(Circle(C, D, E)), D) mod 360
By angle_to_center on F, D, A, Circle(A, D, F) we get 2 * angle(F, D, A) == angle(F, center(Circle(A, D, F)), A) mod 360
By angle_to_center on G, E, F, c we get 2 * angle(G, E, F) == angle(G, center(c), F) mod 360
By angle_to_center on C, D, E, Circle(C, D, E) we get 2 * angle(C, D, E) == angle(C, center(Circle(C, D, E)), E) mod 360
By angle_to_center on E, F, C, Circle(C, D, E) we get 2 * angle(E, F, C) == angle(E, center(Circle(C, D, E)), C) mod 360
By angle_to_center on E, C, F, Circle(C, D, E) we get 2 * angle(E, C, F) == angle(E, center(Circle(C, D, E)), F) mod 360
By angle_to_center on C, E, D, Circle(C, D, E) we get 2 * angle(C, E, D) == angle(C, center(Circle(C, D, E)), D) mod 360
By angle_to_center on D, G, F, Circle(A, D, F) we get 2 * angle(D, G, F) == angle(D, center(Circle(A, D, F)), F) mod 360
By angle_to_center on H, G, J, c we get 2 * angle(H, G, J) == angle(H, center(c), J) mod 360
By angle_to_center on F, D, E, Circle(C, D, E) we get 2 * angle(F, D, E) == angle(F, center(Circle(C, D, E)), E) mod 360
By angle_to_center on G, J, E, c we get 2 * angle(G, J, E) == angle(G, center(c), E) mod 360
By angle_to_center on F, J, H, c we get 2 * angle(F, J, H) == angle(F, center(c), H) mod 360
By angle_to_center on D, E, F, Circle(C, D, E) we get 2 * angle(D, E, F) == angle(D, center(Circle(C, D, E)), F) mod 360
By angle_to_center on J, G, H, c we get 2 * angle(J, G, H) == angle(J, center(c), H) mod 360
By angle_to_center on G, F, D, Circle(A, D, F) we get 2 * angle(G, F, D) == angle(G, center(Circle(A, D, F)), D) mod 360
By angle_to_center on G, E, D, Circle(B, D, E) we get 2 * angle(G, E, D) == angle(G, center(Circle(B, D, E)), D) mod 360
By angle_to_center on J, F, G, c we get 2 * angle(J, F, G) == angle(J, center(c), G) mod 360
By angle_to_center on E, B, D, Circle(B, D, E) we get 2 * angle(E, B, D) == angle(E, center(Circle(B, D, E)), D) mod 360
By angle_to_center on H, F, E, c we get 2 * angle(H, F, E) == angle(H, center(c), E) mod 360
By angle_to_center on D, C, E, Circle(C, D, E) we get 2 * angle(D, C, E) == angle(D, center(Circle(C, D, E)), E) mod 360
By angle_to_center on G, D, F, Circle(A, D, F) we get 2 * angle(G, D, F) == angle(G, center(Circle(A, D, F)), F) mod 360
By angle_to_center on A, G, D, Circle(A, D, F) we get 2 * angle(A, G, D) == angle(A, center(Circle(A, D, F)), D) mod 360
By angle_to_center on F, H, J, c we get 2 * angle(F, H, J) == angle(F, center(c), J) mod 360
By angle_to_center on G, E, H, c we get 2 * angle(G, E, H) == angle(G, center(c), H) mod 360
By angle_to_center on E, F, G, c we get 2 * angle(E, F, G) == angle(E, center(c), G) mod 360
By angle_to_center on D, E, G, Circle(B, D, E) we get 2 * angle(D, E, G) == angle(D, center(Circle(B, D, E)), G) mod 360
By angle_to_center on D, A, F, Circle(A, D, F) we get 2 * angle(D, A, F) == angle(D, center(Circle(A, D, F)), F) mod 360
By angle_to_center on E, G, H, c we get 2 * angle(E, G, H) == angle(E, center(c), H) mod 360
By angle_to_center on E, C, D, Circle(C, D, E) we get 2 * angle(E, C, D) == angle(E, center(Circle(C, D, E)), D) mod 360
By angle_to_center on F, H, G, c we get 2 * angle(F, H, G) == angle(F, center(c), G) mod 360
By angle_to_center on F, C, D, Circle(C, D, E) we get 2 * angle(F, C, D) == angle(F, center(Circle(C, D, E)), D) mod 360
By angle_to_center on F, E, H, c we get 2 * angle(F, E, H) == angle(F, center(c), H) mod 360
By angle_to_center on A, D, F, Circle(A, D, F) we get 2 * angle(A, D, F) == angle(A, center(Circle(A, D, F)), F) mod 360
By angle_to_center on D, G, E, Circle(B, D, E) we get 2 * angle(D, G, E) == angle(D, center(Circle(B, D, E)), E) mod 360
By angle_to_center on G, D, A, Circle(A, D, F) we get 2 * angle(G, D, A) == angle(G, center(Circle(A, D, F)), A) mod 360
By angle_to_center on H, J, G, c we get 2 * angle(H, J, G) == angle(H, center(c), G) mod 360
By angle_to_center on A, F, G, Circle(A, D, F) we get 2 * angle(A, F, G) == angle(A, center(Circle(A, D, F)), G) mod 360
By angle_to_center on F, G, D, Circle(A, D, F) we get 2 * angle(F, G, D) == angle(F, center(Circle(A, D, F)), D) mod 360
By angle_to_center on C, F, D, Circle(C, D, E) we get 2 * angle(C, F, D) == angle(C, center(Circle(C, D, E)), D) mod 360
By angle_to_center on E, H, F, c we get 2 * angle(E, H, F) == angle(E, center(c), F) mod 360
By angle_to_center on E, D, B, Circle(B, D, E) we get 2 * angle(E, D, B) == angle(E, center(Circle(B, D, E)), B) mod 360
By angle_to_center on D, F, C, Circle(C, D, E) we get 2 * angle(D, F, C) == angle(D, center(Circle(C, D, E)), C) mod 360
By angle_to_center on H, E, G, c we get 2 * angle(H, E, G) == angle(H, center(c), G) mod 360
By angle_to_center on J, F, H, c we get 2 * angle(J, F, H) == angle(J, center(c), H) mod 360
By angle_to_center on D, E, C, Circle(C, D, E) we get 2 * angle(D, E, C) == angle(D, center(Circle(C, D, E)), C) mod 360
By angle_to_center on J, H, G, c we get 2 * angle(J, H, G) == angle(J, center(c), G) mod 360
By angle_to_center on G, F, J, c we get 2 * angle(G, F, J) == angle(G, center(c), J) mod 360
By angle_to_center on F, G, H, c we get 2 * angle(F, G, H) == angle(F, center(c), H) mod 360
By angle_to_center on H, E, J, c we get 2 * angle(H, E, J) == angle(H, center(c), J) mod 360
By angle_to_center on D, C, F, Circle(C, D, E) we get 2 * angle(D, C, F) == angle(D, center(Circle(C, D, E)), F) mod 360
By angle_to_center on D, A, G, Circle(A, D, F) we get 2 * angle(D, A, G) == angle(D, center(Circle(A, D, F)), G) mod 360
By angle_to_center on H, F, G, c we get 2 * angle(H, F, G) == angle(H, center(c), G) mod 360
By angle_to_center on F, H, E, c we get 2 * angle(F, H, E) == angle(F, center(c), E) mod 360
By angle_to_center on D, E, B, Circle(B, D, E) we get 2 * angle(D, E, B) == angle(D, center(Circle(B, D, E)), B) mod 360
By angle_to_center on G, E, B, Circle(B, D, E) we get 2 * angle(G, E, B) == angle(G, center(Circle(B, D, E)), B) mod 360
By angle_to_center on D, F, A, Circle(A, D, F) we get 2 * angle(D, F, A) == angle(D, center(Circle(A, D, F)), A) mod 360
By angle_to_center on E, D, C, Circle(C, D, E) we get 2 * angle(E, D, C) == angle(E, center(Circle(C, D, E)), C) mod 360
By angle_to_center on B, G, D, Circle(B, D, E) we get 2 * angle(B, G, D) == angle(B, center(Circle(B, D, E)), D) mod 360
By angle_to_center on E, G, J, c we get 2 * angle(E, G, J) == angle(E, center(c), J) mod 360
By angle_to_center on B, G, E, Circle(B, D, E) we get 2 * angle(B, G, E) == angle(B, center(Circle(B, D, E)), E) mod 360
By angle_to_center on A, F, D, Circle(A, D, F) we get 2 * angle(A, F, D) == angle(A, center(Circle(A, D, F)), D) mod 360
By angle_to_center on J, F, E, c we get 2 * angle(J, F, E) == angle(J, center(c), E) mod 360
By angle_to_center on G, D, E, Circle(B, D, E) we get 2 * angle(G, D, E) == angle(G, center(Circle(B, D, E)), E) mod 360
By angle_to_center on J, E, G, c we get 2 * angle(J, E, G) == angle(J, center(c), G) mod 360
By angle_to_center on F, G, A, Circle(A, D, F) we get 2 * angle(F, G, A) == angle(F, center(Circle(A, D, F)), A) mod 360
By angle_to_center on F, D, G, Circle(A, D, F) we get 2 * angle(F, D, G) == angle(F, center(Circle(A, D, F)), G) mod 360
By angle_to_center on G, H, J, c we get 2 * angle(G, H, J) == angle(G, center(c), J) mod 360
By angle_to_center on J, E, F, c we get 2 * angle(J, E, F) == angle(J, center(c), F) mod 360
By angle_to_center on E, F, H, c we get 2 * angle(E, F, H) == angle(E, center(c), H) mod 360
By angle_to_center on E, G, B, Circle(B, D, E) we get 2 * angle(E, G, B) == angle(E, center(Circle(B, D, E)), B) mod 360
By angle_to_center on E, D, F, Circle(C, D, E) we get 2 * angle(E, D, F) == angle(E, center(Circle(C, D, E)), F) mod 360
By angle_to_center on G, A, D, Circle(A, D, F) we get 2 * angle(G, A, D) == angle(G, center(Circle(A, D, F)), D) mod 360
By angle_to_center on E, G, D, Circle(B, D, E) we get 2 * angle(E, G, D) == angle(E, center(Circle(B, D, E)), D) mod 360
By divide_by_2_mod_180_v3 on B, G, H, H, F, G we get angle(B, G, H) == angle(H, F, G) + 180 mod 360
By divide_by_2_mod_180_v0 on J, E, C, J, F, E we get angle(J, E, C) == angle(J, F, E) mod 360
By divide_by_2_mod_180_v3 on I, J, F, G, F, A we get angle(I, J, F) == angle(G, F, A) + 180 mod 360
By divide_by_2_mod_180_v1 on D, E, B, B, G, H we get angle(B, G, H) == angle(D, E, B) mod 360
By divide_by_2_mod_180_v0 on G, J, H, A, G, H we get angle(A, G, H) == angle(G, J, H) mod 360
By divide_by_2_mod_180_v2 on E, H, G, E, G, A we get angle(E, H, G) == angle(E, G, A) + 180 mod 360
By divide_by_2_mod_180_v3 on B, G, H, C, F, D we get angle(B, G, H) == angle(C, F, D) + 180 mod 360
By divide_by_2_mod_180_v2 on E, G, B, E, J, C we get angle(E, G, B) == angle(E, J, C) + 180 mod 360
By divide_by_2_mod_180_v2 on G, H, F, G, F, C we get angle(G, H, F) == angle(G, F, C) + 180 mod 360
By divide_by_2_mod_180_v1 on G, H, E, G, E, B we get angle(G, E, B) == angle(G, H, E) mod 360
By divide_by_2_mod_180_v2 on G, E, J, B, G, I we get angle(G, E, J) == angle(B, G, I) + 180 mod 360
By divide_by_2_mod_180_v2 on E, D, B, E, J, I we get angle(E, D, B) == angle(E, J, I) + 180 mod 360
By divide_by_2_mod_180_v0 on K, I, C, D, G, J we get angle(D, G, J) == angle(K, I, C) mod 360
By divide_by_2_mod_180_v1 on H, F, C, H, E, F we get angle(H, E, F) == angle(H, F, C) mod 360
By divide_by_2_mod_180_v0 on C, F, J, F, G, J we get angle(C, F, J) == angle(F, G, J) mod 360
By divide_by_2_mod_180_v2 on H, G, E, H, E, B we get angle(H, G, E) == angle(H, E, B) + 180 mod 360
By divide_by_2_mod_180_v0 on C, J, E, A, G, E we get angle(A, G, E) == angle(C, J, E) mod 360
By divide_by_2_mod_180_v0 on A, G, H, D, G, B we get angle(A, G, H) == angle(D, G, B) mod 360
By divide_by_2_mod_180_v2 on H, F, A, H, E, F we get angle(H, F, A) == angle(H, E, F) + 180 mod 360
By divide_by_2_mod_180_v1 on D, B, A, E, G, H we get angle(D, B, A) == angle(E, G, H) mod 360
By divide_by_2_mod_180_v3 on H, G, A, H, J, I we get angle(H, G, A) == angle(H, J, I) + 180 mod 360
By divide_by_2_mod_180_v2 on H, G, B, I, J, H we get angle(H, G, B) == angle(I, J, H) + 180 mod 360
By divide_by_2_mod_180_v1 on A, D, G, F, J, G we get angle(A, D, G) == angle(F, J, G) mod 360
By divide_by_2_mod_180_v3 on C, E, G, E, J, G we get angle(C, E, G) == angle(E, J, G) + 180 mod 360
By divide_by_2_mod_180_v0 on H, G, J, D, G, J we get angle(D, G, J) == angle(H, G, J) mod 360
By divide_by_2_mod_180_v1 on F, G, A, F, H, G we get angle(F, G, A) == angle(F, H, G) mod 360
By divide_by_2_mod_180_v3 on D, F, C, H, G, B we get angle(D, F, C) == angle(H, G, B) + 180 mod 360
By divide_by_2_mod_180_v1 on E, F, J, C, E, J we get angle(C, E, J) == angle(E, F, J) mod 360
By divide_by_2_mod_180_v0 on G, H, F, A, G, F we get angle(A, G, F) == angle(G, H, F) mod 360
By divide_by_2_mod_180_v0 on D, E, H, E, J, G we get angle(D, E, H) == angle(E, J, G) mod 360
By divide_by_2_mod_180_v0 on H, G, B, A, G, D we get angle(A, G, D) == angle(H, G, B) mod 360
By divide_by_2_mod_180_v1 on B, G, H, G, F, H we get angle(B, G, H) == angle(G, F, H) mod 360
By divide_by_2_mod_180_v0 on J, G, B, J, H, G we get angle(J, G, B) == angle(J, H, G) mod 360
By divide_by_2_mod_180_v3 on E, G, A, E, H, G we get angle(E, G, A) == angle(E, H, G) + 180 mod 360
By divide_by_2_mod_180_v1 on H, J, E, H, E, B we get angle(H, E, B) == angle(H, J, E) mod 360
By divide_by_2_mod_180_v1 on E, F, C, E, G, F we get angle(E, F, C) == angle(E, G, F) mod 360
By divide_by_2_mod_180_v3 on C, G, A, J, H, G we get angle(C, G, A) == angle(J, H, G) + 180 mod 360
By divide_by_2_mod_180_v1 on C, G, D, C, G, H we get angle(C, G, D) == angle(C, G, H) mod 360
By divide_by_2_mod_180_v2 on D, E, H, E, J, C we get angle(D, E, H) == angle(E, J, C) + 180 mod 360
By divide_by_2_mod_180_v0 on H, G, B, D, G, B we get angle(D, G, B) == angle(H, G, B) mod 360
By divide_by_2_mod_180_v3 on F, E, G, C, F, G we get angle(F, E, G) == angle(C, F, G) + 180 mod 360
By divide_by_2_mod_180_v1 on J, E, H, I, G, D we get angle(I, G, D) == angle(J, E, H) mod 360
By divide_by_2_mod_180_v0 on C, F, J, F, G, I we get angle(C, F, J) == angle(F, G, I) mod 360
By divide_by_2_mod_180_v1 on D, B, G, E, G, H we get angle(D, B, G) == angle(E, G, H) mod 360
By divide_by_2_mod_180_v3 on H, G, A, G, J, H we get angle(H, G, A) == angle(G, J, H) + 180 mod 360
By divide_by_2_mod_180_v1 on B, G, H, H, E, G we get angle(B, G, H) == angle(H, E, G) mod 360
By divide_by_2_mod_180_v2 on F, J, C, A, F, G we get angle(F, J, C) == angle(A, F, G) + 180 mod 360
By divide_by_2_mod_180_v0 on F, G, H, D, A, G we get angle(D, A, G) == angle(F, G, H) mod 360
By divide_by_2_mod_180_v0 on I, J, E, A, G, E we get angle(A, G, E) == angle(I, J, E) mod 360
By divide_by_2_mod_180_v0 on G, J, F, G, D, A we get angle(G, D, A) == angle(G, J, F) mod 360
By divide_by_2_mod_180_v0 on G, E, F, G, F, A we get angle(G, E, F) == angle(G, F, A) mod 360
By divide_by_2_mod_180_v0 on J, F, G, J, G, B we get angle(J, F, G) == angle(J, G, B) mod 360
By divide_by_2_mod_180_v1 on E, F, H, D, B, G we get angle(D, B, G) == angle(E, F, H) mod 360
By divide_by_2_mod_180_v0 on J, E, C, J, G, E we get angle(J, E, C) == angle(J, G, E) mod 360
By divide_by_2_mod_180_v2 on A, G, H, H, J, G we get angle(A, G, H) == angle(H, J, G) + 180 mod 360
By divide_by_2_mod_180_v3 on B, G, E, C, J, E we get angle(B, G, E) == angle(C, J, E) + 180 mod 360
By divide_by_2_mod_180_v0 on D, G, C, H, F, J we get angle(D, G, C) == angle(H, F, J) mod 360
By divide_by_2_mod_180_v3 on C, E, F, E, J, F we get angle(C, E, F) == angle(E, J, F) + 180 mod 360
By divide_by_2_mod_180_v0 on H, F, E, G, E, D we get angle(G, E, D) == angle(H, F, E) mod 360
By divide_by_2_mod_180_v3 on I, J, H, H, G, B we get angle(I, J, H) == angle(H, G, B) + 180 mod 360
By divide_by_2_mod_180_v0 on D, B, E, H, G, E we get angle(D, B, E) == angle(H, G, E) mod 360
By divide_by_2_mod_180_v1 on G, A, D, H, J, F we get angle(G, A, D) == angle(H, J, F) mod 360
By divide_by_2_mod_180_v1 on B, G, I, G, H, J we get angle(B, G, I) == angle(G, H, J) mod 360
By divide_by_2_mod_180_v0 on C, F, H, F, G, H we get angle(C, F, H) == angle(F, G, H) mod 360
By divide_by_2_mod_180_v2 on H, G, B, G, F, H we get angle(H, G, B) == angle(G, F, H) + 180 mod 360
By divide_by_2_mod_180_v3 on I, J, H, A, G, H we get angle(I, J, H) == angle(A, G, H) + 180 mod 360
By divide_by_2_mod_180_v0 on C, D, E, F, G, E we get angle(C, D, E) == angle(F, G, E) mod 360
By divide_by_2_mod_180_v1 on C, I, K, J, G, D we get angle(C, I, K) == angle(J, G, D) mod 360
By divide_by_2_mod_180_v2 on E, J, H, D, E, G we get angle(E, J, H) == angle(D, E, G) + 180 mod 360
By divide_by_2_mod_180_v2 on F, G, C, A, F, J we get angle(F, G, C) == angle(A, F, J) + 180 mod 360
By divide_by_2_mod_180_v0 on E, J, G, B, E, G we get angle(B, E, G) == angle(E, J, G) mod 360
By divide_by_2_mod_180_v3 on D, B, G, E, J, H we get angle(D, B, G) == angle(E, J, H) + 180 mod 360
By divide_by_2_mod_180_v0 on G, E, C, I, J, E we get angle(G, E, C) == angle(I, J, E) mod 360
By divide_by_2_mod_180_v0 on F, A, D, F, G, H we get angle(F, A, D) == angle(F, G, H) mod 360
By divide_by_2_mod_180_v3 on I, J, F, A, G, F we get angle(I, J, F) == angle(A, G, F) + 180 mod 360
By divide_by_2_mod_180_v3 on A, F, E, F, G, E we get angle(A, F, E) == angle(F, G, E) + 180 mod 360
By divide_by_2_mod_180_v3 on F, H, G, C, F, G we get angle(F, H, G) == angle(C, F, G) + 180 mod 360
By divide_by_2_mod_180_v2 on H, F, A, H, J, F we get angle(H, F, A) == angle(H, J, F) + 180 mod 360
By divide_by_2_mod_180_v3 on E, G, I, B, E, J we get angle(E, G, I) == angle(B, E, J) + 180 mod 360
By divide_by_2_mod_180_v3 on E, J, C, D, E, H we get angle(E, J, C) == angle(D, E, H) + 180 mod 360
By divide_by_2_mod_180_v1 on C, B, D, E, G, H we get angle(C, B, D) == angle(E, G, H) mod 360
By divide_by_2_mod_180_v2 on B, E, D, H, G, A we get angle(B, E, D) == angle(H, G, A) + 180 mod 360
By divide_by_2_mod_180_v2 on H, F, A, H, G, F we get angle(H, F, A) == angle(H, G, F) + 180 mod 360
By divide_by_2_mod_180_v0 on C, F, G, F, J, I we get angle(C, F, G) == angle(F, J, I) mod 360
By divide_by_2_mod_180_v1 on H, E, F, G, F, D we get angle(G, F, D) == angle(H, E, F) mod 360
By divide_by_2_mod_180_v2 on J, G, E, J, E, B we get angle(J, G, E) == angle(J, E, B) + 180 mod 360
By divide_by_2_mod_180_v1 on G, D, B, G, H, E we get angle(G, D, B) == angle(G, H, E) mod 360
By divide_by_2_mod_180_v1 on H, J, F, D, G, F we get angle(D, G, F) == angle(H, J, F) mod 360
By divide_by_2_mod_180_v2 on D, E, C, B, G, H we get angle(D, E, C) == angle(B, G, H) + 180 mod 360
By divide_by_2_mod_180_v2 on C, J, E, B, G, E we get angle(C, J, E) == angle(B, G, E) + 180 mod 360
By divide_by_2_mod_180_v0 on H, F, E, D, B, C we get angle(D, B, C) == angle(H, F, E) mod 360
By divide_by_2_mod_180_v3 on H, J, G, A, G, H we get angle(H, J, G) == angle(A, G, H) + 180 mod 360
By divide_by_2_mod_180_v0 on H, G, I, D, G, I we get angle(D, G, I) == angle(H, G, I) mod 360
By divide_by_2_mod_180_v0 on E, G, B, E, H, G we get angle(E, G, B) == angle(E, H, G) mod 360
By divide_by_2_mod_180_v2 on I, G, E, J, E, B we get angle(I, G, E) == angle(J, E, B) + 180 mod 360
By divide_by_2_mod_180_v0 on G, H, F, G, D, A we get angle(G, D, A) == angle(G, H, F) mod 360
By divide_by_2_mod_180_v0 on D, G, J, H, E, J we get angle(D, G, J) == angle(H, E, J) mod 360
By divide_by_2_mod_180_v3 on H, J, E, A, B, D we get angle(H, J, E) == angle(A, B, D) + 180 mod 360
By divide_by_2_mod_180_v1 on G, D, B, G, F, E we get angle(G, D, B) == angle(G, F, E) mod 360
By divide_by_2_mod_180_v3 on D, B, A, E, J, H we get angle(D, B, A) == angle(E, J, H) + 180 mod 360
By divide_by_2_mod_180_v0 on F, G, B, F, J, C we get angle(F, G, B) == angle(F, J, C) mod 360
By divide_by_2_mod_180_v2 on I, J, E, B, D, E we get angle(I, J, E) == angle(B, D, E) + 180 mod 360
By divide_by_2_mod_180_v1 on C, G, D, J, G, H we get angle(C, G, D) == angle(J, G, H) mod 360
By divide_by_2_mod_180_v2 on J, F, A, J, E, F we get angle(J, F, A) == angle(J, E, F) + 180 mod 360
By divide_by_2_mod_180_v0 on F, D, C, F, G, E we get angle(F, D, C) == angle(F, G, E) mod 360
By divide_by_2_mod_180_v0 on A, G, J, G, E, J we get angle(A, G, J) == angle(G, E, J) mod 360
By divide_by_2_mod_180_v3 on J, G, D, J, I, K we get angle(J, G, D) == angle(J, I, K) + 180 mod 360
By divide_by_2_mod_180_v2 on A, G, H, D, F, C we get angle(A, G, H) == angle(D, F, C) + 180 mod 360
By divide_by_2_mod_180_v3 on H, J, G, H, G, B we get angle(H, J, G) == angle(H, G, B) + 180 mod 360
By divide_by_2_mod_180_v0 on H, J, I, A, G, H we get angle(A, G, H) == angle(H, J, I) mod 360
By divide_by_2_mod_180_v2 on A, G, H, D, E, B we get angle(A, G, H) == angle(D, E, B) + 180 mod 360
By divide_by_2_mod_180_v1 on G, F, C, C, J, F we get angle(C, J, F) == angle(G, F, C) mod 360
By divide_by_2_mod_180_v3 on G, J, E, G, E, C we get angle(G, J, E) == angle(G, E, C) + 180 mod 360
By divide_by_2_mod_180_v1 on E, G, I, C, E, J we get angle(C, E, J) == angle(E, G, I) mod 360
By divide_by_2_mod_180_v3 on B, G, I, G, E, J we get angle(B, G, I) == angle(G, E, J) + 180 mod 360
By divide_by_2_mod_180_v0 on G, E, F, G, D, A we get angle(G, D, A) == angle(G, E, F) mod 360
By divide_by_2_mod_180_v0 on H, G, B, D, E, C we get angle(D, E, C) == angle(H, G, B) mod 360
By divide_by_2_mod_180_v2 on F, J, H, A, F, H we get angle(F, J, H) == angle(A, F, H) + 180 mod 360
By divide_by_2_mod_180_v3 on J, E, G, J, G, B we get angle(J, E, G) == angle(J, G, B) + 180 mod 360
By divide_by_2_mod_180_v1 on E, G, F, E, D, C we get angle(E, D, C) == angle(E, G, F) mod 360
By divide_by_2_mod_180_v0 on E, H, G, B, D, G we get angle(B, D, G) == angle(E, H, G) mod 360
By divide_by_2_mod_180_v1 on B, D, E, G, J, E we get angle(B, D, E) == angle(G, J, E) mod 360
By divide_by_2_mod_180_v1 on B, G, F, C, J, F we get angle(B, G, F) == angle(C, J, F) mod 360
By divide_by_2_mod_180_v1 on D, G, A, B, G, H we get angle(B, G, H) == angle(D, G, A) mod 360
By divide_by_2_mod_180_v0 on H, J, C, A, G, H we get angle(A, G, H) == angle(H, J, C) mod 360
By divide_by_2_mod_180_v0 on D, A, B, F, J, H we get angle(D, A, B) == angle(F, J, H) mod 360
By divide_by_2_mod_180_v3 on C, J, F, A, D, F we get angle(C, J, F) == angle(A, D, F) + 180 mod 360
By divide_by_2_mod_180_v1 on G, J, E, G, D, B we get angle(G, D, B) == angle(G, J, E) mod 360
By divide_by_2_mod_180_v0 on A, G, H, B, E, D we get angle(A, G, H) == angle(B, E, D) mod 360
By divide_by_2_mod_180_v3 on J, E, B, J, F, E we get angle(J, E, B) == angle(J, F, E) + 180 mod 360
By divide_by_2_mod_180_v1 on E, B, D, E, F, H we get angle(E, B, D) == angle(E, F, H) mod 360
By divide_by_2_mod_180_v1 on J, F, H, J, G, D we get angle(J, F, H) == angle(J, G, D) mod 360
By divide_by_2_mod_180_v3 on B, G, H, H, J, C we get angle(B, G, H) == angle(H, J, C) + 180 mod 360
By divide_by_2_mod_180_v2 on G, J, H, B, G, H we get angle(G, J, H) == angle(B, G, H) + 180 mod 360
By divide_by_2_mod_180_v0 on E, H, G, D, E, H we get angle(D, E, H) == angle(E, H, G) mod 360
By divide_by_2_mod_180_v2 on G, E, C, G, F, E we get angle(G, E, C) == angle(G, F, E) + 180 mod 360
By divide_by_2_mod_180_v2 on J, F, A, C, G, F we get angle(J, F, A) == angle(C, G, F) + 180 mod 360
By divide_by_2_mod_180_v0 on E, F, A, E, H, F we get angle(E, F, A) == angle(E, H, F) mod 360
By divide_by_2_mod_180_v2 on H, E, C, H, J, E we get angle(H, E, C) == angle(H, J, E) + 180 mod 360
By divide_by_2_mod_180_v3 on E, F, H, B, E, H we get angle(E, F, H) == angle(B, E, H) + 180 mod 360
By divide_by_2_mod_180_v0 on F, J, H, F, A, D we get angle(F, A, D) == angle(F, J, H) mod 360
By divide_by_2_mod_180_v1 on F, E, G, F, D, A we get angle(F, D, A) == angle(F, E, G) mod 360
By divide_by_2_mod_180_v1 on F, H, G, A, F, G we get angle(A, F, G) == angle(F, H, G) mod 360
By divide_by_2_mod_180_v1 on H, G, A, H, E, G we get angle(H, E, G) == angle(H, G, A) mod 360
By divide_by_2_mod_180_v0 on A, G, H, A, G, D we get angle(A, G, D) == angle(A, G, H) mod 360
By divide_by_2_mod_180_v1 on C, E, H, E, F, H we get angle(C, E, H) == angle(E, F, H) mod 360
By divide_by_2_mod_180_v2 on C, D, E, F, J, E we get angle(C, D, E) == angle(F, J, E) + 180 mod 360
By divide_by_2_mod_180_v0 on H, G, I, D, G, C we get angle(D, G, C) == angle(H, G, I) mod 360
By divide_by_2_mod_180_v0 on F, E, J, C, F, J we get angle(C, F, J) == angle(F, E, J) mod 360
By divide_by_2_mod_180_v1 on H, J, F, H, F, C we get angle(H, F, C) == angle(H, J, F) mod 360
By divide_by_2_mod_180_v2 on D, F, A, H, G, A we get angle(D, F, A) == angle(H, G, A) + 180 mod 360
By divide_by_2_mod_180_v2 on A, G, H, D, G, A we get angle(A, G, H) == angle(D, G, A) + 180 mod 360
By divide_by_2_mod_180_v3 on B, G, D, A, G, H we get angle(B, G, D) == angle(A, G, H) + 180 mod 360
By divide_by_2_mod_180_v1 on B, G, H, I, J, H we get angle(B, G, H) == angle(I, J, H) mod 360
By divide_by_2_mod_180_v3 on E, G, D, E, J, H we get angle(E, G, D) == angle(E, J, H) + 180 mod 360
By divide_by_2_mod_180_v2 on G, E, C, G, J, E we get angle(G, E, C) == angle(G, J, E) + 180 mod 360
By divide_by_2_mod_180_v0 on B, E, D, H, G, B we get angle(B, E, D) == angle(H, G, B) mod 360
By divide_by_2_mod_180_v0 on H, F, E, D, B, E we get angle(D, B, E) == angle(H, F, E) mod 360
By divide_by_2_mod_180_v0 on C, F, D, H, G, B we get angle(C, F, D) == angle(H, G, B) mod 360
By divide_by_2_mod_180_v1 on H, G, F, D, A, F we get angle(D, A, F) == angle(H, G, F) mod 360
By external_angle_bisector_definition_v0_r on B, H, B, G we get Line(G, H) == external_angle_bisector(B, G, B)
By divide_by_2_mod_180_v2 on H, J, I, B, G, H we get angle(H, J, I) == angle(B, G, H) + 180 mod 360
By divide_by_2_mod_180_v2 on B, E, G, E, J, I we get angle(B, E, G) == angle(E, J, I) + 180 mod 360
By divide_by_2_mod_180_v1 on H, G, F, B, A, D we get angle(B, A, D) == angle(H, G, F) mod 360
By divide_by_2_mod_180_v2 on H, G, B, D, F, C we get angle(H, G, B) == angle(D, F, C) + 180 mod 360
By divide_by_2_mod_180_v3 on A, F, H, F, G, H we get angle(A, F, H) == angle(F, G, H) + 180 mod 360
By divide_by_2_mod_180_v3 on A, F, G, F, J, I we get angle(A, F, G) == angle(F, J, I) + 180 mod 360
By divide_by_2_mod_180_v0 on G, E, J, A, G, I we get angle(A, G, I) == angle(G, E, J) mod 360
By divide_by_2_mod_180_v1 on I, J, H, H, G, A we get angle(H, G, A) == angle(I, J, H) mod 360
By divide_by_2_mod_180_v1 on F, D, A, F, H, G we get angle(F, D, A) == angle(F, H, G) mod 360
By divide_by_2_mod_180_v3 on H, E, B, H, F, E we get angle(H, E, B) == angle(H, F, E) + 180 mod 360
By divide_by_2_mod_180_v3 on C, G, F, J, F, A we get angle(C, G, F) == angle(J, F, A) + 180 mod 360
By divide_by_2_mod_180_v2 on F, G, B, F, J, G we get angle(F, G, B) == angle(F, J, G) + 180 mod 360
By divide_by_2_mod_180_v2 on A, B, D, H, J, E we get angle(A, B, D) == angle(H, J, E) + 180 mod 360
By divide_by_2_mod_180_v3 on H, G, A, D, G, B we get angle(H, G, A) == angle(D, G, B) + 180 mod 360
By divide_by_2_mod_180_v1 on J, F, C, C, G, F we get angle(C, G, F) == angle(J, F, C) mod 360
By divide_by_2_mod_180_v2 on H, J, C, B, G, H we get angle(H, J, C) == angle(B, G, H) + 180 mod 360
By divide_by_2_mod_180_v1 on H, G, A, A, F, D we get angle(A, F, D) == angle(H, G, A) mod 360
By divide_by_2_mod_180_v2 on D, G, B, B, G, H we get angle(D, G, B) == angle(B, G, H) + 180 mod 360
By divide_by_2_mod_180_v0 on D, E, H, E, F, G we get angle(D, E, H) == angle(E, F, G) mod 360
By divide_by_2_mod_180_v3 on F, H, E, C, D, E we get angle(F, H, E) == angle(C, D, E) + 180 mod 360
By divide_by_2_mod_180_v2 on C, F, G, F, J, G we get angle(C, F, G) == angle(F, J, G) + 180 mod 360
By divide_by_2_mod_180_v1 on D, A, C, H, E, F we get angle(D, A, C) == angle(H, E, F) mod 360
By divide_by_2_mod_180_v3 on F, E, G, F, G, B we get angle(F, E, G) == angle(F, G, B) + 180 mod 360
By divide_by_2_mod_180_v3 on F, H, G, F, G, B we get angle(F, H, G) == angle(F, G, B) + 180 mod 360
By divide_by_2_mod_180_v3 on J, G, D, G, I, K we get angle(J, G, D) == angle(G, I, K) + 180 mod 360
By divide_by_2_mod_180_v1 on H, G, F, G, A, D we get angle(G, A, D) == angle(H, G, F) mod 360
By divide_by_2_mod_180_v3 on B, G, H, G, E, H we get angle(B, G, H) == angle(G, E, H) + 180 mod 360
By divide_by_2_mod_180_v3 on E, G, F, B, E, F we get angle(E, G, F) == angle(B, E, F) + 180 mod 360
By divide_by_2_mod_180_v2 on C, F, D, B, G, H we get angle(C, F, D) == angle(B, G, H) + 180 mod 360
By divide_by_2_mod_180_v1 on B, G, E, G, H, E we get angle(B, G, E) == angle(G, H, E) mod 360
By divide_by_2_mod_180_v2 on F, G, H, A, F, H we get angle(F, G, H) == angle(A, F, H) + 180 mod 360
By divide_by_2_mod_180_v2 on H, G, B, B, G, D we get angle(H, G, B) == angle(B, G, D) + 180 mod 360
By divide_by_2_mod_180_v1 on B, G, D, H, G, A we get angle(B, G, D) == angle(H, G, A) mod 360
By divide_by_2_mod_180_v2 on G, B, D, H, J, E we get angle(G, B, D) == angle(H, J, E) + 180 mod 360
By divide_by_2_mod_180_v0 on G, B, D, H, F, E we get angle(G, B, D) == angle(H, F, E) mod 360
By divide_by_2_mod_180_v0 on G, F, A, G, H, F we get angle(G, F, A) == angle(G, H, F) mod 360
By divide_by_2_mod_180_v1 on H, G, A, C, E, D we get angle(C, E, D) == angle(H, G, A) mod 360
By divide_by_2_mod_180_v0 on J, F, G, I, G, B we get angle(I, G, B) == angle(J, F, G) mod 360
By divide_by_2_mod_180_v1 on E, G, C, C, E, J we get angle(C, E, J) == angle(E, G, C) mod 360
By divide_by_2_mod_180_v2 on D, G, C, K, I, J we get angle(D, G, C) == angle(K, I, J) + 180 mod 360
By divide_by_2_mod_180_v2 on E, J, F, C, D, F we get angle(E, J, F) == angle(C, D, F) + 180 mod 360
By divide_by_2_mod_180_v1 on B, G, H, D, F, C we get angle(B, G, H) == angle(D, F, C) mod 360
By divide_by_2_mod_180_v1 on C, I, K, I, G, D we get angle(C, I, K) == angle(I, G, D) mod 360
By divide_by_2_mod_180_v1 on E, G, D, E, F, H we get angle(E, F, H) == angle(E, G, D) mod 360
By divide_by_2_mod_180_v0 on A, B, D, H, G, E we get angle(A, B, D) == angle(H, G, E) mod 360
By divide_by_2_mod_180_v0 on D, G, E, H, F, E we get angle(D, G, E) == angle(H, F, E) mod 360
By divide_by_2_mod_180_v0 on G, E, H, A, G, H we get angle(A, G, H) == angle(G, E, H) mod 360
By divide_by_2_mod_180_v2 on I, J, E, G, D, B we get angle(I, J, E) == angle(G, D, B) + 180 mod 360
By divide_by_2_mod_180_v1 on F, H, J, A, F, J we get angle(A, F, J) == angle(F, H, J) mod 360
By divide_by_2_mod_180_v2 on H, F, G, B, G, H we get angle(H, F, G) == angle(B, G, H) + 180 mod 360
By divide_by_2_mod_180_v2 on D, G, E, H, J, E we get angle(D, G, E) == angle(H, J, E) + 180 mod 360
By divide_by_2_mod_180_v0 on D, F, A, H, G, B we get angle(D, F, A) == angle(H, G, B) mod 360
By divide_by_2_mod_180_v3 on H, G, A, B, E, D we get angle(H, G, A) == angle(B, E, D) + 180 mod 360
By divide_by_2_mod_180_v0 on D, F, A, A, G, H we get angle(A, G, H) == angle(D, F, A) mod 360
By divide_by_2_mod_180_v0 on J, F, G, C, G, B we get angle(C, G, B) == angle(J, F, G) mod 360
By divide_by_2_mod_180_v1 on H, E, F, D, A, F we get angle(D, A, F) == angle(H, E, F) mod 360
By divide_by_2_mod_180_v1 on F, J, G, A, F, G we get angle(A, F, G) == angle(F, J, G) mod 360
By divide_by_2_mod_180_v1 on I, J, F, G, F, C we get angle(G, F, C) == angle(I, J, F) mod 360
By divide_by_2_mod_180_v3 on H, J, E, G, B, D we get angle(H, J, E) == angle(G, B, D) + 180 mod 360
By divide_by_2_mod_180_v2 on H, J, C, H, G, A we get angle(H, J, C) == angle(H, G, A) + 180 mod 360
By divide_by_2_mod_180_v3 on E, J, C, E, G, B we get angle(E, J, C) == angle(E, G, B) + 180 mod 360
By divide_by_2_mod_180_v1 on C, B, D, E, F, H we get angle(C, B, D) == angle(E, F, H) mod 360
By divide_by_2_mod_180_v1 on D, B, A, E, F, H we get angle(D, B, A) == angle(E, F, H) mod 360
By divide_by_2_mod_180_v1 on B, G, J, G, F, J we get angle(B, G, J) == angle(G, F, J) mod 360
By divide_by_2_mod_180_v1 on J, F, C, J, E, F we get angle(J, E, F) == angle(J, F, C) mod 360
By divide_by_2_mod_180_v2 on D, G, B, H, G, A we get angle(D, G, B) == angle(H, G, A) + 180 mod 360
By divide_by_2_mod_180_v1 on G, A, D, H, E, F we get angle(G, A, D) == angle(H, E, F) mod 360
By divide_by_2_mod_180_v2 on E, J, H, C, B, D we get angle(E, J, H) == angle(C, B, D) + 180 mod 360
By divide_by_2_mod_180_v0 on J, F, A, J, H, F we get angle(J, F, A) == angle(J, H, F) mod 360
By divide_by_2_mod_180_v3 on E, F, J, B, E, J we get angle(E, F, J) == angle(B, E, J) + 180 mod 360
By divide_by_2_mod_180_v0 on A, D, F, G, J, F we get angle(A, D, F) == angle(G, J, F) mod 360
By divide_by_2_mod_180_v2 on G, E, H, H, G, A we get angle(G, E, H) == angle(H, G, A) + 180 mod 360
By divide_by_2_mod_180_v3 on H, J, E, G, E, D we get angle(H, J, E) == angle(G, E, D) + 180 mod 360
By divide_by_2_mod_180_v0 on D, G, C, K, I, C we get angle(D, G, C) == angle(K, I, C) mod 360
By parallel_line_angles_v1 on H, F, A, D we get parallel(Line(A, D), Line(F, H))
By divide_by_2_mod_180_v3 on G, F, H, H, G, B we get angle(G, F, H) == angle(H, G, B) + 180 mod 360
By divide_by_2_mod_180_v2 on A, G, C, G, H, J we get angle(A, G, C) == angle(G, H, J) + 180 mod 360
By divide_by_2_mod_180_v2 on G, E, C, G, H, E we get angle(G, E, C) == angle(G, H, E) + 180 mod 360
By divide_by_2_mod_180_v1 on J, E, H, J, G, D we get angle(J, E, H) == angle(J, G, D) mod 360
By divide_by_2_mod_180_v3 on H, J, E, D, B, E we get angle(H, J, E) == angle(D, B, E) + 180 mod 360
By divide_by_2_mod_180_v1 on H, E, D, G, F, E we get angle(G, F, E) == angle(H, E, D) mod 360
By divide_by_2_mod_180_v0 on H, G, E, D, G, E we get angle(D, G, E) == angle(H, G, E) mod 360
By divide_by_2_mod_180_v0 on H, E, J, D, G, I we get angle(D, G, I) == angle(H, E, J) mod 360
By divide_by_2_mod_180_v0 on D, G, J, H, G, I we get angle(D, G, J) == angle(H, G, I) mod 360
By divide_by_2_mod_180_v3 on E, J, I, B, D, G we get angle(E, J, I) == angle(B, D, G) + 180 mod 360
By divide_by_2_mod_180_v0 on F, E, H, C, A, D we get angle(C, A, D) == angle(F, E, H) mod 360
By divide_by_2_mod_180_v3 on E, D, C, E, H, F we get angle(E, D, C) == angle(E, H, F) + 180 mod 360
By divide_by_2_mod_180_v1 on C, E, D, B, G, H we get angle(B, G, H) == angle(C, E, D) mod 360
By divide_by_2_mod_180_v2 on C, F, D, H, G, A we get angle(C, F, D) == angle(H, G, A) + 180 mod 360
By divide_by_2_mod_180_v1 on F, J, G, F, G, A we get angle(F, G, A) == angle(F, J, G) mod 360
By divide_by_2_mod_180_v0 on E, F, G, B, D, G we get angle(B, D, G) == angle(E, F, G) mod 360
By divide_by_2_mod_180_v1 on H, G, A, H, J, G we get angle(H, G, A) == angle(H, J, G) mod 360
By divide_by_2_mod_180_v3 on E, J, C, B, E, G we get angle(E, J, C) == angle(B, E, G) + 180 mod 360
By divide_by_2_mod_180_v3 on G, H, J, A, G, J we get angle(G, H, J) == angle(A, G, J) + 180 mod 360
By divide_by_2_mod_180_v2 on E, J, H, C, E, H we get angle(E, J, H) == angle(C, E, H) + 180 mod 360
By divide_by_2_mod_180_v3 on J, G, A, J, F, G we get angle(J, G, A) == angle(J, F, G) + 180 mod 360
By divide_by_2_mod_180_v1 on G, F, H, H, G, A we get angle(G, F, H) == angle(H, G, A) mod 360
By divide_by_2_mod_180_v2 on F, E, C, F, J, E we get angle(F, E, C) == angle(F, J, E) + 180 mod 360
By divide_by_2_mod_180_v3 on H, G, A, D, F, A we get angle(H, G, A) == angle(D, F, A) + 180 mod 360
By divide_by_2_mod_180_v2 on G, I, K, J, G, D we get angle(G, I, K) == angle(J, G, D) + 180 mod 360
By divide_by_2_mod_180_v2 on C, J, E, B, D, E we get angle(C, J, E) == angle(B, D, E) + 180 mod 360
By divide_by_2_mod_180_v2 on F, G, J, A, F, J we get angle(F, G, J) == angle(A, F, J) + 180 mod 360
By divide_by_2_mod_180_v2 on A, G, H, H, E, G we get angle(A, G, H) == angle(H, E, G) + 180 mod 360
By divide_by_2_mod_180_v0 on G, E, H, H, G, B we get angle(G, E, H) == angle(H, G, B) mod 360
By divide_by_2_mod_180_v3 on J, F, C, J, H, F we get angle(J, F, C) == angle(J, H, F) + 180 mod 360
By divide_by_2_mod_180_v3 on H, G, F, H, F, A we get angle(H, G, F) == angle(H, F, A) + 180 mod 360
By divide_by_2_mod_180_v1 on B, G, E, G, J, E we get angle(B, G, E) == angle(G, J, E) mod 360
By divide_by_2_mod_180_v0 on C, J, E, G, E, C we get angle(C, J, E) == angle(G, E, C) mod 360
By divide_by_2_mod_180_v1 on C, G, A, J, E, G we get angle(C, G, A) == angle(J, E, G) mod 360
By divide_by_2_mod_180_v0 on I, G, E, J, E, C we get angle(I, G, E) == angle(J, E, C) mod 360
By divide_by_2_mod_180_v0 on F, J, C, C, F, G we get angle(C, F, G) == angle(F, J, C) mod 360
By divide_by_2_mod_180_v1 on G, H, J, B, G, J we get angle(B, G, J) == angle(G, H, J) mod 360
By divide_by_2_mod_180_v0 on J, H, G, I, G, B we get angle(I, G, B) == angle(J, H, G) mod 360
By divide_by_2_mod_180_v2 on B, E, J, E, F, J we get angle(B, E, J) == angle(E, F, J) + 180 mod 360
By divide_by_2_mod_180_v1 on D, E, G, E, F, H we get angle(D, E, G) == angle(E, F, H) mod 360
By divide_by_2_mod_180_v2 on F, J, C, F, G, A we get angle(F, J, C) == angle(F, G, A) + 180 mod 360
By divide_by_2_mod_180_v1 on E, G, D, E, G, H we get angle(E, G, D) == angle(E, G, H) mod 360
By divide_by_2_mod_180_v2 on J, I, K, I, G, D we get angle(J, I, K) == angle(I, G, D) + 180 mod 360
By divide_by_2_mod_180_v3 on G, D, B, I, J, E we get angle(G, D, B) == angle(I, J, E) + 180 mod 360
By divide_by_2_mod_180_v0 on F, J, H, C, F, H we get angle(C, F, H) == angle(F, J, H) mod 360
By divide_by_2_mod_180_v1 on J, G, D, I, G, H we get angle(I, G, H) == angle(J, G, D) mod 360
By divide_by_2_mod_180_v3 on A, F, D, A, G, H we get angle(A, F, D) == angle(A, G, H) + 180 mod 360
By divide_by_2_mod_180_v0 on D, G, J, H, F, J we get angle(D, G, J) == angle(H, F, J) mod 360
By divide_by_2_mod_180_v1 on D, A, C, H, G, F we get angle(D, A, C) == angle(H, G, F) mod 360
By divide_by_2_mod_180_v2 on A, G, F, C, J, F we get angle(A, G, F) == angle(C, J, F) + 180 mod 360
By divide_by_2_mod_180_v1 on G, F, D, H, J, F we get angle(G, F, D) == angle(H, J, F) mod 360
By divide_by_2_mod_180_v0 on D, F, G, F, E, H we get angle(D, F, G) == angle(F, E, H) mod 360
By divide_by_2_mod_180_v1 on F, G, A, F, E, G we get angle(F, E, G) == angle(F, G, A) mod 360
By divide_by_2_mod_180_v0 on H, G, B, H, J, C we get angle(H, G, B) == angle(H, J, C) mod 360
By divide_by_2_mod_180_v1 on E, J, C, E, G, A we get angle(E, G, A) == angle(E, J, C) mod 360
By divide_by_2_mod_180_v2 on C, G, B, J, E, G we get angle(C, G, B) == angle(J, E, G) + 180 mod 360
By divide_by_2_mod_180_v3 on I, J, F, A, D, F we get angle(I, J, F) == angle(A, D, F) + 180 mod 360
By divide_by_2_mod_180_v3 on C, E, D, A, G, H we get angle(C, E, D) == angle(A, G, H) + 180 mod 360
By divide_by_2_mod_180_v0 on B, D, G, E, J, G we get angle(B, D, G) == angle(E, J, G) mod 360
By divide_by_2_mod_180_v2 on G, I, K, I, G, D we get angle(G, I, K) == angle(I, G, D) + 180 mod 360
By divide_by_2_mod_180_v0 on G, E, F, A, G, F we get angle(A, G, F) == angle(G, E, F) mod 360
By divide_by_2_mod_180_v3 on I, J, F, G, D, A we get angle(I, J, F) == angle(G, D, A) + 180 mod 360
By divide_by_2_mod_180_v2 on C, F, J, F, H, J we get angle(C, F, J) == angle(F, H, J) + 180 mod 360
By divide_by_2_mod_180_v2 on F, J, I, F, D, A we get angle(F, J, I) == angle(F, D, A) + 180 mod 360
By divide_by_2_mod_180_v0 on E, J, G, E, D, B we get angle(E, D, B) == angle(E, J, G) mod 360
By divide_by_2_mod_180_v2 on E, F, G, E, G, A we get angle(E, F, G) == angle(E, G, A) + 180 mod 360
By divide_by_2_mod_180_v1 on H, G, F, G, F, D we get angle(G, F, D) == angle(H, G, F) mod 360
By divide_by_2_mod_180_v0 on F, G, B, F, J, I we get angle(F, G, B) == angle(F, J, I) mod 360
By divide_by_2_mod_180_v2 on G, D, A, I, J, F we get angle(G, D, A) == angle(I, J, F) + 180 mod 360
By divide_by_2_mod_180_v1 on F, D, A, F, J, G we get angle(F, D, A) == angle(F, J, G) mod 360
By divide_by_2_mod_180_v1 on G, E, B, G, J, E we get angle(G, E, B) == angle(G, J, E) mod 360
By divide_by_2_mod_180_v1 on H, E, D, G, J, E we get angle(G, J, E) == angle(H, E, D) mod 360
By divide_by_2_mod_180_v3 on J, E, G, I, G, B we get angle(J, E, G) == angle(I, G, B) + 180 mod 360
By divide_by_2_mod_180_v2 on F, E, H, A, F, H we get angle(F, E, H) == angle(A, F, H) + 180 mod 360
By divide_by_2_mod_180_v0 on G, J, F, G, F, A we get angle(G, F, A) == angle(G, J, F) mod 360
By divide_by_2_mod_180_v0 on J, H, G, C, G, B we get angle(C, G, B) == angle(J, H, G) mod 360
By divide_by_2_mod_180_v1 on H, F, C, H, G, F we get angle(H, F, C) == angle(H, G, F) mod 360
By divide_by_2_mod_180_v3 on C, G, D, G, I, K we get angle(C, G, D) == angle(G, I, K) + 180 mod 360
By divide_by_2_mod_180_v3 on K, I, G, D, G, I we get angle(K, I, G) == angle(D, G, I) + 180 mod 360
By divide_by_2_mod_180_v0 on E, G, B, E, J, G we get angle(E, G, B) == angle(E, J, G) mod 360
By divide_by_2_mod_180_v0 on G, J, H, H, G, B we get angle(G, J, H) == angle(H, G, B) mod 360
By divide_by_2_mod_180_v0 on D, A, G, F, J, H we get angle(D, A, G) == angle(F, J, H) mod 360
By divide_by_2_mod_180_v2 on A, G, I, G, H, J we get angle(A, G, I) == angle(G, H, J) + 180 mod 360
By divide_by_2_mod_180_v3 on B, G, F, G, H, F we get angle(B, G, F) == angle(G, H, F) + 180 mod 360
By divide_by_2_mod_180_v0 on H, F, J, D, G, I we get angle(D, G, I) == angle(H, F, J) mod 360
By divide_by_2_mod_180_v2 on A, G, E, G, H, E we get angle(A, G, E) == angle(G, H, E) + 180 mod 360
By divide_by_2_mod_180_v3 on B, G, D, H, G, B we get angle(B, G, D) == angle(H, G, B) + 180 mod 360
By divide_by_2_mod_180_v1 on E, J, I, E, G, A we get angle(E, G, A) == angle(E, J, I) mod 360
By divide_by_2_mod_180_v0 on D, E, C, A, G, H we get angle(A, G, H) == angle(D, E, C) mod 360
By divide_by_2_mod_180_v2 on J, H, G, I, G, A we get angle(J, H, G) == angle(I, G, A) + 180 mod 360
By divide_by_2_mod_180_v3 on H, E, D, C, J, E we get angle(H, E, D) == angle(C, J, E) + 180 mod 360
By divide_by_2_mod_180_v1 on A, F, D, B, G, H we get angle(A, F, D) == angle(B, G, H) mod 360
By divide_by_2_mod_180_v3 on B, G, H, G, J, H we get angle(B, G, H) == angle(G, J, H) + 180 mod 360
By divide_by_2_mod_180_v0 on E, J, H, B, E, H we get angle(B, E, H) == angle(E, J, H) mod 360
By divide_by_2_mod_180_v0 on A, D, F, G, H, F we get angle(A, D, F) == angle(G, H, F) mod 360
By divide_by_2_mod_180_v2 on E, J, G, E, G, A we get angle(E, J, G) == angle(E, G, A) + 180 mod 360
By divide_by_2_mod_180_v3 on C, E, G, E, H, G we get angle(C, E, G) == angle(E, H, G) + 180 mod 360
By divide_by_2_mod_180_v1 on H, E, F, B, A, D we get angle(B, A, D) == angle(H, E, F) mod 360
By divide_by_2_mod_180_v3 on E, J, I, B, E, G we get angle(E, J, I) == angle(B, E, G) + 180 mod 360
By divide_by_2_mod_180_v1 on G, F, E, B, G, E we get angle(B, G, E) == angle(G, F, E) mod 360
By divide_by_2_mod_180_v0 on E, H, F, B, E, F we get angle(B, E, F) == angle(E, H, F) mod 360
By divide_by_2_mod_180_v2 on J, H, F, J, F, C we get angle(J, H, F) == angle(J, F, C) + 180 mod 360
By divide_by_2_mod_180_v1 on C, E, H, E, G, H we get angle(C, E, H) == angle(E, G, H) mod 360
By divide_by_2_mod_180_v1 on J, F, H, C, G, D we get angle(C, G, D) == angle(J, F, H) mod 360
By divide_by_2_mod_180_v3 on F, H, J, C, F, J we get angle(F, H, J) == angle(C, F, J) + 180 mod 360
By divide_by_2_mod_180_v1 on H, G, A, C, J, H we get angle(C, J, H) == angle(H, G, A) mod 360
By divide_by_2_mod_180_v3 on E, J, I, E, D, B we get angle(E, J, I) == angle(E, D, B) + 180 mod 360
By divide_by_2_mod_180_v2 on B, E, H, E, F, H we get angle(B, E, H) == angle(E, F, H) + 180 mod 360
By divide_by_2_mod_180_v2 on G, E, D, H, J, E we get angle(G, E, D) == angle(H, J, E) + 180 mod 360
By divide_by_2_mod_180_v3 on F, H, E, F, D, C we get angle(F, H, E) == angle(F, D, C) + 180 mod 360
By divide_by_2_mod_180_v1 on I, G, F, J, F, C we get angle(I, G, F) == angle(J, F, C) mod 360
By divide_by_2_mod_180_v0 on A, G, H, H, F, G we get angle(A, G, H) == angle(H, F, G) mod 360
By divide_by_2_mod_180_v0 on H, F, E, A, B, D we get angle(A, B, D) == angle(H, F, E) mod 360
By divide_by_2_mod_180_v1 on J, E, G, I, G, A we get angle(I, G, A) == angle(J, E, G) mod 360
By divide_by_2_mod_180_v3 on J, G, A, J, H, G we get angle(J, G, A) == angle(J, H, G) + 180 mod 360
By divide_by_2_mod_180_v3 on J, E, F, J, F, A we get angle(J, E, F) == angle(J, F, A) + 180 mod 360
By divide_by_2_mod_180_v3 on G, H, E, A, G, E we get angle(G, H, E) == angle(A, G, E) + 180 mod 360
By divide_by_2_mod_180_v3 on C, D, F, E, J, F we get angle(C, D, F) == angle(E, J, F) + 180 mod 360
By divide_by_2_mod_180_v2 on F, J, C, A, D, G we get angle(F, J, C) == angle(A, D, G) + 180 mod 360
By divide_by_2_mod_180_v2 on D, B, C, H, J, E we get angle(D, B, C) == angle(H, J, E) + 180 mod 360
By divide_by_2_mod_180_v3 on G, J, E, A, G, E we get angle(G, J, E) == angle(A, G, E) + 180 mod 360
By divide_by_2_mod_180_v3 on E, F, C, E, H, F we get angle(E, F, C) == angle(E, H, F) + 180 mod 360
By divide_by_2_mod_180_v2 on H, F, G, H, G, A we get angle(H, F, G) == angle(H, G, A) + 180 mod 360
By divide_by_2_mod_180_v3 on G, F, C, G, E, F we get angle(G, F, C) == angle(G, E, F) + 180 mod 360
By divide_by_2_mod_180_v2 on G, E, J, B, G, J we get angle(G, E, J) == angle(B, G, J) + 180 mod 360
By divide_by_2_mod_180_v2 on J, H, E, J, E, B we get angle(J, H, E) == angle(J, E, B) + 180 mod 360
By divide_by_2_mod_180_v2 on G, F, A, C, J, F we get angle(G, F, A) == angle(C, J, F) + 180 mod 360
By divide_by_2_mod_180_v3 on A, F, J, F, G, C we get angle(A, F, J) == angle(F, G, C) + 180 mod 360
By divide_by_2_mod_180_v3 on K, I, G, D, G, C we get angle(K, I, G) == angle(D, G, C) + 180 mod 360
By divide_by_2_mod_180_v0 on H, G, E, D, B, C we get angle(D, B, C) == angle(H, G, E) mod 360
By divide_by_2_mod_180_v2 on E, H, F, C, D, F we get angle(E, H, F) == angle(C, D, F) + 180 mod 360
By divide_by_2_mod_180_v0 on E, J, F, E, F, A we get angle(E, F, A) == angle(E, J, F) mod 360
By divide_by_2_mod_180_v2 on E, D, B, E, J, C we get angle(E, D, B) == angle(E, J, C) + 180 mod 360
By divide_by_2_mod_180_v3 on E, J, I, E, G, B we get angle(E, J, I) == angle(E, G, B) + 180 mod 360
By divide_by_2_mod_180_v3 on J, E, G, C, G, B we get angle(J, E, G) == angle(C, G, B) + 180 mod 360
By divide_by_2_mod_180_v1 on J, G, F, J, F, C we get angle(J, F, C) == angle(J, G, F) mod 360
By divide_by_2_mod_180_v0 on J, E, C, C, G, E we get angle(C, G, E) == angle(J, E, C) mod 360
By divide_by_2_mod_180_v2 on A, G, H, C, E, D we get angle(A, G, H) == angle(C, E, D) + 180 mod 360
By divide_by_2_mod_180_v0 on F, G, D, F, E, H we get angle(F, E, H) == angle(F, G, D) mod 360
By divide_by_2_mod_180_v1 on C, G, H, I, G, D we get angle(C, G, H) == angle(I, G, D) mod 360
By divide_by_2_mod_180_v1 on H, E, F, D, G, F we get angle(D, G, F) == angle(H, E, F) mod 360
By divide_by_2_mod_180_v0 on F, E, H, D, A, G we get angle(D, A, G) == angle(F, E, H) mod 360
By divide_by_2_mod_180_v2 on E, J, H, D, B, A we get angle(E, J, H) == angle(D, B, A) + 180 mod 360
By divide_by_2_mod_180_v3 on H, J, E, D, B, C we get angle(H, J, E) == angle(D, B, C) + 180 mod 360
By divide_by_2_mod_180_v0 on H, G, C, D, G, J we get angle(D, G, J) == angle(H, G, C) mod 360
By divide_by_2_mod_180_v1 on I, G, D, J, G, H we get angle(I, G, D) == angle(J, G, H) mod 360
By divide_by_2_mod_180_v3 on I, G, D, G, I, K we get angle(I, G, D) == angle(G, I, K) + 180 mod 360
By divide_by_2_mod_180_v1 on E, H, J, C, E, J we get angle(C, E, J) == angle(E, H, J) mod 360
By divide_by_2_mod_180_v3 on C, D, F, E, H, F we get angle(C, D, F) == angle(E, H, F) + 180 mod 360
By divide_by_2_mod_180_v2 on J, I, K, J, G, D we get angle(J, I, K) == angle(J, G, D) + 180 mod 360
By divide_by_2_mod_180_v0 on D, G, C, H, E, J we get angle(D, G, C) == angle(H, E, J) mod 360
By divide_by_2_mod_180_v0 on H, G, E, H, E, C we get angle(H, E, C) == angle(H, G, E) mod 360
By divide_by_2_mod_180_v1 on C, D, F, E, G, F we get angle(C, D, F) == angle(E, G, F) mod 360
By divide_by_2_mod_180_v1 on D, A, F, H, J, F we get angle(D, A, F) == angle(H, J, F) mod 360
By divide_by_2_mod_180_v1 on J, G, D, C, G, H we get angle(C, G, H) == angle(J, G, D) mod 360
By divide_by_2_mod_180_v0 on F, G, E, C, F, E we get angle(C, F, E) == angle(F, G, E) mod 360
By divide_by_2_mod_180_v2 on D, F, A, B, G, H we get angle(D, F, A) == angle(B, G, H) + 180 mod 360
By divide_by_2_mod_180_v1 on B, G, H, C, J, H we get angle(B, G, H) == angle(C, J, H) mod 360
By divide_by_2_mod_180_v2 on E, J, F, E, D, C we get angle(E, J, F) == angle(E, D, C) + 180 mod 360
By divide_by_2_mod_180_v3 on C, E, G, E, F, G we get angle(C, E, G) == angle(E, F, G) + 180 mod 360
By divide_by_2_mod_180_v1 on J, E, H, C, G, D we get angle(C, G, D) == angle(J, E, H) mod 360
By divide_by_2_mod_180_v2 on E, J, G, C, E, G we get angle(E, J, G) == angle(C, E, G) + 180 mod 360
By divide_by_2_mod_180_v2 on C, D, E, F, H, E we get angle(C, D, E) == angle(F, H, E) + 180 mod 360
By divide_by_2_mod_180_v1 on D, G, F, H, G, F we get angle(D, G, F) == angle(H, G, F) mod 360
By divide_by_2_mod_180_v3 on B, G, H, D, E, C we get angle(B, G, H) == angle(D, E, C) + 180 mod 360
By divide_by_2_mod_180_v0 on C, F, D, A, G, H we get angle(A, G, H) == angle(C, F, D) mod 360
By divide_by_2_mod_180_v3 on E, G, J, B, E, J we get angle(E, G, J) == angle(B, E, J) + 180 mod 360
By divide_by_2_mod_180_v0 on H, G, J, D, G, I we get angle(D, G, I) == angle(H, G, J) mod 360
By divide_by_2_mod_180_v0 on F, E, H, C, F, H we get angle(C, F, H) == angle(F, E, H) mod 360
By divide_by_2_mod_180_v1 on B, A, D, H, J, F we get angle(B, A, D) == angle(H, J, F) mod 360
By divide_by_2_mod_180_v0 on H, J, I, H, G, B we get angle(H, G, B) == angle(H, J, I) mod 360
By divide_by_2_mod_180_v1 on C, E, J, E, G, J we get angle(C, E, J) == angle(E, G, J) mod 360
By divide_by_2_mod_180_v3 on I, G, D, J, I, K we get angle(I, G, D) == angle(J, I, K) + 180 mod 360
By divide_by_2_mod_180_v3 on C, G, D, J, I, K we get angle(C, G, D) == angle(J, I, K) + 180 mod 360
By divide_by_2_mod_180_v0 on G, J, F, A, G, F we get angle(A, G, F) == angle(G, J, F) mod 360
By divide_by_2_mod_180_v3 on H, G, A, A, G, D we get angle(H, G, A) == angle(A, G, D) + 180 mod 360
By divide_by_2_mod_180_v3 on D, E, G, E, J, H we get angle(D, E, G) == angle(E, J, H) + 180 mod 360
By divide_by_2_mod_180_v1 on H, J, G, B, G, H we get angle(B, G, H) == angle(H, J, G) mod 360
By divide_by_2_mod_180_v1 on B, G, C, G, H, J we get angle(B, G, C) == angle(G, H, J) mod 360
By divide_by_2_mod_180_v2 on J, F, E, J, E, B we get angle(J, F, E) == angle(J, E, B) + 180 mod 360
By divide_by_2_mod_180_v0 on B, E, F, E, J, F we get angle(B, E, F) == angle(E, J, F) mod 360
By divide_by_2_mod_180_v0 on F, G, D, F, J, H we get angle(F, G, D) == angle(F, J, H) mod 360
By divide_by_2_mod_180_v3 on K, I, G, D, G, J we get angle(K, I, G) == angle(D, G, J) + 180 mod 360
By divide_by_2_mod_180_v3 on E, J, C, B, D, G we get angle(E, J, C) == angle(B, D, G) + 180 mod 360
By divide_by_2_mod_180_v3 on A, F, J, F, G, J we get angle(A, F, J) == angle(F, G, J) + 180 mod 360
By divide_by_2_mod_180_v1 on G, E, B, G, F, E we get angle(G, E, B) == angle(G, F, E) mod 360
By divide_by_2_mod_180_v3 on F, J, E, C, D, E we get angle(F, J, E) == angle(C, D, E) + 180 mod 360
By divide_by_2_mod_180_v2 on I, J, E, G, E, B we get angle(I, J, E) == angle(G, E, B) + 180 mod 360
By divide_by_2_mod_180_v2 on B, E, J, E, H, J we get angle(B, E, J) == angle(E, H, J) + 180 mod 360
By divide_by_2_mod_180_v3 on C, G, A, J, F, G we get angle(C, G, A) == angle(J, F, G) + 180 mod 360
By divide_by_2_mod_180_v1 on E, G, H, D, E, G we get angle(D, E, G) == angle(E, G, H) mod 360
By divide_by_2_mod_180_v0 on D, G, C, H, G, C we get angle(D, G, C) == angle(H, G, C) mod 360
By divide_by_2_mod_180_v3 on F, J, E, F, E, C we get angle(F, J, E) == angle(F, E, C) + 180 mod 360
By divide_by_2_mod_180_v3 on H, E, B, H, G, E we get angle(H, E, B) == angle(H, G, E) + 180 mod 360
By divide_by_2_mod_180_v2 on A, G, F, I, J, F we get angle(A, G, F) == angle(I, J, F) + 180 mod 360
By divide_by_2_mod_180_v0 on K, I, C, D, G, I we get angle(D, G, I) == angle(K, I, C) mod 360
By divide_by_2_mod_180_v1 on B, D, E, G, F, E we get angle(B, D, E) == angle(G, F, E) mod 360
By divide_by_2_mod_180_v2 on A, G, E, G, J, E we get angle(A, G, E) == angle(G, J, E) + 180 mod 360
By divide_by_2_mod_180_v3 on G, H, E, G, E, C we get angle(G, H, E) == angle(G, E, C) + 180 mod 360
By divide_by_2_mod_180_v0 on F, G, C, C, F, J we get angle(C, F, J) == angle(F, G, C) mod 360
By divide_by_2_mod_180_v2 on J, I, K, C, G, D we get angle(J, I, K) == angle(C, G, D) + 180 mod 360
By divide_by_2_mod_180_v2 on G, J, H, H, G, A we get angle(G, J, H) == angle(H, G, A) + 180 mod 360
By divide_by_2_mod_180_v0 on C, A, D, F, J, H we get angle(C, A, D) == angle(F, J, H) mod 360
By divide_by_2_mod_180_v0 on A, D, F, G, E, F we get angle(A, D, F) == angle(G, E, F) mod 360
By divide_by_2_mod_180_v2 on B, E, H, E, G, H we get angle(B, E, H) == angle(E, G, H) + 180 mod 360
By divide_by_2_mod_180_v3 on E, G, A, E, F, G we get angle(E, G, A) == angle(E, F, G) + 180 mod 360
By divide_by_2_mod_180_v2 on H, G, B, A, F, D we get angle(H, G, B) == angle(A, F, D) + 180 mod 360
By divide_by_2_mod_180_v1 on B, G, C, G, F, J we get angle(B, G, C) == angle(G, F, J) mod 360
By divide_by_2_mod_180_v1 on A, D, G, F, E, G we get angle(A, D, G) == angle(F, E, G) mod 360
By divide_by_2_mod_180_v3 on H, G, A, H, J, C we get angle(H, G, A) == angle(H, J, C) + 180 mod 360
By divide_by_2_mod_180_v3 on H, E, F, H, F, A we get angle(H, E, F) == angle(H, F, A) + 180 mod 360
By divide_by_2_mod_180_v0 on E, G, B, E, F, G we get angle(E, F, G) == angle(E, G, B) mod 360
By divide_by_2_mod_180_v0 on D, F, G, F, G, H we get angle(D, F, G) == angle(F, G, H) mod 360
By divide_by_2_mod_180_v3 on E, J, I, D, E, H we get angle(E, J, I) == angle(D, E, H) + 180 mod 360
By divide_by_2_mod_180_v3 on H, J, E, H, E, C we get angle(H, J, E) == angle(H, E, C) + 180 mod 360
By divide_by_2_mod_180_v3 on B, G, F, G, J, F we get angle(B, G, F) == angle(G, J, F) + 180 mod 360
By divide_by_2_mod_180_v2 on F, G, E, F, E, B we get angle(F, G, E) == angle(F, E, B) + 180 mod 360
By divide_by_2_mod_180_v2 on F, J, I, A, D, G we get angle(F, J, I) == angle(A, D, G) + 180 mod 360
By divide_by_2_mod_180_v3 on H, G, A, D, E, C we get angle(H, G, A) == angle(D, E, C) + 180 mod 360
By divide_by_2_mod_180_v3 on C, J, H, A, G, H we get angle(C, J, H) == angle(A, G, H) + 180 mod 360
By divide_by_2_mod_180_v3 on A, F, H, F, J, H we get angle(A, F, H) == angle(F, J, H) + 180 mod 360
By divide_by_2_mod_180_v0 on C, A, D, F, G, H we get angle(C, A, D) == angle(F, G, H) mod 360
By divide_by_2_mod_180_v0 on E, H, G, E, D, B we get angle(E, D, B) == angle(E, H, G) mod 360
By divide_by_2_mod_180_v2 on G, I, K, C, G, D we get angle(G, I, K) == angle(C, G, D) + 180 mod 360
By divide_by_2_mod_180_v2 on E, J, H, E, B, D we get angle(E, J, H) == angle(E, B, D) + 180 mod 360
By divide_by_2_mod_180_v0 on H, G, C, D, G, I we get angle(D, G, I) == angle(H, G, C) mod 360
By divide_by_2_mod_180_v2 on D, B, E, H, J, E we get angle(D, B, E) == angle(H, J, E) + 180 mod 360
By divide_by_2_mod_180_v3 on D, G, A, H, G, B we get angle(D, G, A) == angle(H, G, B) + 180 mod 360
By divide_by_2_mod_180_v1 on D, F, C, H, G, A we get angle(D, F, C) == angle(H, G, A) mod 360
By divide_by_2_mod_180_v3 on H, G, A, G, E, H we get angle(H, G, A) == angle(G, E, H) + 180 mod 360
By divide_by_2_mod_180_v2 on F, E, C, F, H, E we get angle(F, E, C) == angle(F, H, E) + 180 mod 360
By divide_by_2_mod_180_v3 on B, G, E, I, J, E we get angle(B, G, E) == angle(I, J, E) + 180 mod 360
By divide_by_2_mod_180_v2 on H, F, E, H, E, B we get angle(H, F, E) == angle(H, E, B) + 180 mod 360
By divide_by_2_mod_180_v3 on B, G, C, G, E, J we get angle(B, G, C) == angle(G, E, J) + 180 mod 360
By divide_by_2_mod_180_v0 on B, E, G, E, F, G we get angle(B, E, G) == angle(E, F, G) mod 360
By divide_by_2_mod_180_v3 on K, I, J, D, G, C we get angle(K, I, J) == angle(D, G, C) + 180 mod 360
By divide_by_2_mod_180_v2 on E, F, G, C, E, G we get angle(E, F, G) == angle(C, E, G) + 180 mod 360
By divide_by_2_mod_180_v0 on D, A, B, F, E, H we get angle(D, A, B) == angle(F, E, H) mod 360
By divide_by_2_mod_180_v3 on F, G, A, F, J, I we get angle(F, G, A) == angle(F, J, I) + 180 mod 360
By divide_by_2_mod_180_v3 on A, F, G, F, J, C we get angle(A, F, G) == angle(F, J, C) + 180 mod 360
By divide_by_2_mod_180_v2 on C, J, E, G, D, B we get angle(C, J, E) == angle(G, D, B) + 180 mod 360
By divide_by_2_mod_180_v3 on K, I, J, D, G, J we get angle(K, I, J) == angle(D, G, J) + 180 mod 360
By divide_by_2_mod_180_v3 on E, J, C, E, D, B we get angle(E, J, C) == angle(E, D, B) + 180 mod 360
By divide_by_2_mod_180_v1 on J, F, H, I, G, D we get angle(I, G, D) == angle(J, F, H) mod 360
By divide_by_2_mod_180_v2 on B, E, F, E, G, F we get angle(B, E, F) == angle(E, G, F) + 180 mod 360
By divide_by_2_mod_180_v3 on A, F, D, H, G, B we get angle(A, F, D) == angle(H, G, B) + 180 mod 360
By divide_by_2_mod_180_v1 on J, G, D, J, G, H we get angle(J, G, D) == angle(J, G, H) mod 360
By divide_by_2_mod_180_v2 on F, G, I, A, F, J we get angle(F, G, I) == angle(A, F, J) + 180 mod 360
By divide_by_2_mod_180_v1 on I, G, H, C, G, D we get angle(C, G, D) == angle(I, G, H) mod 360
By divide_by_2_mod_180_v2 on G, E, H, B, G, H we get angle(G, E, H) == angle(B, G, H) + 180 mod 360
By divide_by_2_mod_180_v2 on F, G, B, F, E, G we get angle(F, G, B) == angle(F, E, G) + 180 mod 360
By divide_by_2_mod_180_v3 on B, D, E, C, J, E we get angle(B, D, E) == angle(C, J, E) + 180 mod 360
By divide_by_2_mod_180_v3 on G, F, C, G, H, F we get angle(G, F, C) == angle(G, H, F) + 180 mod 360
By divide_by_2_mod_180_v3 on J, E, B, J, H, E we get angle(J, E, B) == angle(J, H, E) + 180 mod 360
By divide_by_2_mod_180_v1 on F, H, G, A, D, G we get angle(A, D, G) == angle(F, H, G) mod 360
By divide_by_2_mod_180_v3 on H, J, E, D, G, E we get angle(H, J, E) == angle(D, G, E) + 180 mod 360
By divide_by_2_mod_180_v2 on F, J, I, A, F, G we get angle(F, J, I) == angle(A, F, G) + 180 mod 360
By divide_by_2_mod_180_v0 on B, E, G, E, H, G we get angle(B, E, G) == angle(E, H, G) mod 360
By divide_by_2_mod_180_v2 on J, F, A, I, G, F we get angle(J, F, A) == angle(I, G, F) + 180 mod 360
By divide_by_2_mod_180_v0 on G, E, J, A, G, C we get angle(A, G, C) == angle(G, E, J) mod 360
By divide_by_2_mod_180_v3 on G, F, J, A, G, C we get angle(G, F, J) == angle(A, G, C) + 180 mod 360
By divide_by_2_mod_180_v0 on F, G, E, F, E, C we get angle(F, E, C) == angle(F, G, E) mod 360
By divide_by_2_mod_180_v1 on E, G, H, E, B, D we get angle(E, B, D) == angle(E, G, H) mod 360
By divide_by_2_mod_180_v3 on F, G, A, F, J, C we get angle(F, G, A) == angle(F, J, C) + 180 mod 360
By divide_by_2_mod_180_v3 on C, E, H, E, J, H we get angle(C, E, H) == angle(E, J, H) + 180 mod 360
By divide_by_2_mod_180_v0 on E, D, B, E, F, G we get angle(E, D, B) == angle(E, F, G) mod 360
By divide_by_2_mod_180_v3 on A, D, G, F, J, C we get angle(A, D, G) == angle(F, J, C) + 180 mod 360
By divide_by_2_mod_180_v1 on G, H, E, B, D, E we get angle(B, D, E) == angle(G, H, E) mod 360
By divide_by_2_mod_180_v2 on D, G, J, K, I, G we get angle(D, G, J) == angle(K, I, G) + 180 mod 360
By divide_by_2_mod_180_v3 on K, I, J, D, G, I we get angle(K, I, J) == angle(D, G, I) + 180 mod 360
By divide_by_2_mod_180_v1 on F, J, E, F, E, B we get angle(F, E, B) == angle(F, J, E) mod 360
By divide_by_2_mod_180_v2 on F, J, I, F, G, A we get angle(F, J, I) == angle(F, G, A) + 180 mod 360
By divide_by_2_mod_180_v3 on E, G, F, E, F, A we get angle(E, G, F) == angle(E, F, A) + 180 mod 360
By divide_by_2_mod_180_v3 on G, F, H, A, G, H we get angle(G, F, H) == angle(A, G, H) + 180 mod 360
By divide_by_2_mod_180_v3 on F, J, E, F, D, C we get angle(F, J, E) == angle(F, D, C) + 180 mod 360
By divide_by_2_mod_180_v3 on G, F, J, A, G, I we get angle(G, F, J) == angle(A, G, I) + 180 mod 360
By divide_by_2_mod_180_v2 on C, J, E, G, E, B we get angle(C, J, E) == angle(G, E, B) + 180 mod 360
By divide_by_2_mod_180_v0 on J, E, C, J, H, E we get angle(J, E, C) == angle(J, H, E) mod 360
By divide_by_2_mod_180_v2 on A, G, H, A, F, D we get angle(A, G, H) == angle(A, F, D) + 180 mod 360
By divide_by_2_mod_180_v2 on E, H, F, E, F, C we get angle(E, H, F) == angle(E, F, C) + 180 mod 360
By external_angle_bisector_definition_v0_r on A, H, A, G we get Line(G, H) == external_angle_bisector(A, G, A)
By divide_by_2_mod_180_v2 on J, H, G, C, G, A we get angle(J, H, G) == angle(C, G, A) + 180 mod 360
By divide_by_2_mod_180_v3 on D, E, B, A, G, H we get angle(D, E, B) == angle(A, G, H) + 180 mod 360
By divide_by_2_mod_180_v3 on C, E, D, H, G, B we get angle(C, E, D) == angle(H, G, B) + 180 mod 360
By divide_by_2_mod_180_v2 on B, E, J, E, G, J we get angle(B, E, J) == angle(E, G, J) + 180 mod 360
By divide_by_2_mod_180_v3 on E, D, C, E, J, F we get angle(E, D, C) == angle(E, J, F) + 180 mod 360
By divide_by_2_mod_180_v2 on J, F, G, C, G, A we get angle(J, F, G) == angle(C, G, A) + 180 mod 360
By divide_by_2_mod_180_v2 on A, G, H, B, G, D we get angle(A, G, H) == angle(B, G, D) + 180 mod 360
By divide_by_2_mod_180_v2 on H, G, B, H, E, G we get angle(H, G, B) == angle(H, E, G) + 180 mod 360
By divide_by_2_mod_180_v2 on D, E, C, H, G, A we get angle(D, E, C) == angle(H, G, A) + 180 mod 360
By divide_by_2_mod_180_v0 on H, G, E, G, B, D we get angle(G, B, D) == angle(H, G, E) mod 360
By divide_by_2_mod_180_v2 on F, G, B, F, H, G we get angle(F, G, B) == angle(F, H, G) + 180 mod 360
By divide_by_2_mod_180_v3 on C, J, F, G, F, A we get angle(C, J, F) == angle(G, F, A) + 180 mod 360
By divide_by_2_mod_180_v3 on H, E, D, I, J, E we get angle(H, E, D) == angle(I, J, E) + 180 mod 360
By divide_by_2_mod_180_v1 on D, E, B, H, G, A we get angle(D, E, B) == angle(H, G, A) mod 360
By divide_by_2_mod_180_v0 on F, A, D, F, E, H we get angle(F, A, D) == angle(F, E, H) mod 360
By divide_by_2_mod_180_v1 on B, G, F, I, J, F we get angle(B, G, F) == angle(I, J, F) mod 360
By divide_by_2_mod_180_v3 on C, J, F, G, D, A we get angle(C, J, F) == angle(G, D, A) + 180 mod 360
By divide_by_2_mod_180_v1 on I, G, H, I, G, D we get angle(I, G, D) == angle(I, G, H) mod 360
By divide_by_2_mod_180_v0 on F, J, H, D, F, G we get angle(D, F, G) == angle(F, J, H) mod 360
By divide_by_2_mod_180_v2 on I, J, E, B, G, E we get angle(I, J, E) == angle(B, G, E) + 180 mod 360
By divide_by_2_mod_180_v3 on J, E, B, J, G, E we get angle(J, E, B) == angle(J, G, E) + 180 mod 360
By divide_by_2_mod_180_v1 on H, G, A, D, G, A we get angle(D, G, A) == angle(H, G, A) mod 360
By divide_by_2_mod_180_v3 on B, G, H, D, G, B we get angle(B, G, H) == angle(D, G, B) + 180 mod 360
By divide_by_2_mod_180_v2 on A, G, H, I, J, H we get angle(A, G, H) == angle(I, J, H) + 180 mod 360
By divide_by_2_mod_180_v3 on C, B, D, E, J, H we get angle(C, B, D) == angle(E, J, H) + 180 mod 360
By divide_by_2_mod_180_v1 on C, E, G, E, J, I we get angle(C, E, G) == angle(E, J, I) mod 360
By divide_by_2_mod_180_v2 on E, J, F, C, E, F we get angle(E, J, F) == angle(C, E, F) + 180 mod 360
By divide_by_2_mod_180_v2 on H, G, B, C, J, H we get angle(H, G, B) == angle(C, J, H) + 180 mod 360
By divide_by_2_mod_180_v2 on J, H, G, J, G, A we get angle(J, H, G) == angle(J, G, A) + 180 mod 360
By divide_by_2_mod_180_v0 on D, A, B, F, G, H we get angle(D, A, B) == angle(F, G, H) mod 360
By divide_by_2_mod_180_v1 on J, E, G, J, G, A we get angle(J, E, G) == angle(J, G, A) mod 360
By divide_by_2_mod_180_v1 on B, G, D, B, G, H we get angle(B, G, D) == angle(B, G, H) mod 360
By internal_angle_bisector_definition_v0_r on B, H, A, G we get Line(G, H) == internal_angle_bisector(A, G, B)
By divide_by_2_mod_180_v2 on H, J, I, H, G, A we get angle(H, J, I) == angle(H, G, A) + 180 mod 360
By divide_by_2_mod_180_v2 on A, G, J, G, H, J we get angle(A, G, J) == angle(G, H, J) + 180 mod 360
By divide_by_2_mod_180_v3 on F, J, G, F, G, B we get angle(F, J, G) == angle(F, G, B) + 180 mod 360
By divide_by_2_mod_180_v2 on E, J, H, D, B, G we get angle(E, J, H) == angle(D, B, G) + 180 mod 360
By divide_by_2_mod_180_v2 on G, J, F, G, F, C we get angle(G, J, F) == angle(G, F, C) + 180 mod 360
By divide_by_2_mod_180_v3 on G, F, C, G, J, F we get angle(G, F, C) == angle(G, J, F) + 180 mod 360
By divide_by_2_mod_180_v2 on B, E, J, E, G, I we get angle(B, E, J) == angle(E, G, I) + 180 mod 360
By divide_by_2_mod_180_v3 on B, G, H, D, F, A we get angle(B, G, H) == angle(D, F, A) + 180 mod 360
By divide_by_2_mod_180_v3 on E, F, C, E, J, F we get angle(E, F, C) == angle(E, J, F) + 180 mod 360
By divide_by_2_mod_180_v2 on E, G, B, E, J, I we get angle(E, G, B) == angle(E, J, I) + 180 mod 360
By divide_by_2_mod_180_v1 on F, J, E, A, F, E we get angle(A, F, E) == angle(F, J, E) mod 360
By divide_by_2_mod_180_v2 on F, D, C, F, J, E we get angle(F, D, C) == angle(F, J, E) + 180 mod 360
By divide_by_2_mod_180_v0 on F, G, H, F, G, D we get angle(F, G, D) == angle(F, G, H) mod 360
By divide_by_2_mod_180_v3 on F, D, A, F, J, I we get angle(F, D, A) == angle(F, J, I) + 180 mod 360
By divide_by_2_mod_180_v3 on E, G, C, B, E, J we get angle(E, G, C) == angle(B, E, J) + 180 mod 360
By divide_by_2_mod_180_v3 on A, F, J, F, E, J we get angle(A, F, J) == angle(F, E, J) + 180 mod 360
By divide_by_2_mod_180_v3 on J, G, F, J, F, A we get angle(J, G, F) == angle(J, F, A) + 180 mod 360
By divide_by_2_mod_180_v0 on H, E, C, H, F, E we get angle(H, E, C) == angle(H, F, E) mod 360
By divide_by_2_mod_180_v2 on A, G, C, G, F, J we get angle(A, G, C) == angle(G, F, J) + 180 mod 360
By divide_by_2_mod_180_v1 on G, F, J, B, G, I we get angle(B, G, I) == angle(G, F, J) mod 360
By divide_by_2_mod_180_v2 on D, G, C, K, I, G we get angle(D, G, C) == angle(K, I, G) + 180 mod 360
By divide_by_2_mod_180_v2 on F, E, J, A, F, J we get angle(F, E, J) == angle(A, F, J) + 180 mod 360
By divide_by_2_mod_180_v2 on A, G, H, G, F, H we get angle(A, G, H) == angle(G, F, H) + 180 mod 360
By divide_by_2_mod_180_v3 on A, F, H, F, E, H we get angle(A, F, H) == angle(F, E, H) + 180 mod 360
By divide_by_2_mod_180_v1 on H, E, D, G, H, E we get angle(G, H, E) == angle(H, E, D) mod 360
By divide_by_2_mod_180_v2 on C, F, G, F, H, G we get angle(C, F, G) == angle(F, H, G) + 180 mod 360
By divide_by_2_mod_180_v3 on G, F, E, A, G, E we get angle(G, F, E) == angle(A, G, E) + 180 mod 360
By divide_by_2_mod_180_v1 on A, F, G, F, E, G we get angle(A, F, G) == angle(F, E, G) mod 360
By divide_by_2_mod_180_v1 on F, H, E, F, E, B we get angle(F, E, B) == angle(F, H, E) mod 360
By divide_by_2_mod_180_v2 on E, F, A, E, G, F we get angle(E, F, A) == angle(E, G, F) + 180 mod 360
By divide_by_2_mod_180_v3 on E, B, D, E, J, H we get angle(E, B, D) == angle(E, J, H) + 180 mod 360
By divide_by_2_mod_180_v3 on D, F, C, A, G, H we get angle(D, F, C) == angle(A, G, H) + 180 mod 360
By divide_by_2_mod_180_v2 on A, G, E, G, F, E we get angle(A, G, E) == angle(G, F, E) + 180 mod 360
By divide_by_2_mod_180_v3 on C, J, H, H, G, B we get angle(C, J, H) == angle(H, G, B) + 180 mod 360
By divide_by_2_mod_180_v3 on F, H, E, F, E, C we get angle(F, H, E) == angle(F, E, C) + 180 mod 360
By divide_by_2_mod_180_v3 on A, F, J, F, G, I we get angle(A, F, J) == angle(F, G, I) + 180 mod 360
By divide_by_2_mod_180_v2 on A, G, J, G, F, J we get angle(A, G, J) == angle(G, F, J) + 180 mod 360
By divide_by_2_mod_180_v3 on E, G, A, E, J, G we get angle(E, G, A) == angle(E, J, G) + 180 mod 360
By divide_by_2_mod_180_v3 on I, G, A, J, H, G we get angle(I, G, A) == angle(J, H, G) + 180 mod 360
By divide_by_2_mod_180_v3 on G, H, J, A, G, C we get angle(G, H, J) == angle(A, G, C) + 180 mod 360
By divide_by_2_mod_180_v3 on B, D, E, I, J, E we get angle(B, D, E) == angle(I, J, E) + 180 mod 360
By divide_by_2_mod_180_v3 on J, E, B, I, G, E we get angle(J, E, B) == angle(I, G, E) + 180 mod 360
By divide_by_2_mod_180_v2 on H, G, B, D, E, B we get angle(H, G, B) == angle(D, E, B) + 180 mod 360
By divide_by_2_mod_180_v3 on F, D, A, F, J, C we get angle(F, D, A) == angle(F, J, C) + 180 mod 360
By divide_by_2_mod_180_v2 on J, F, G, J, G, A we get angle(J, F, G) == angle(J, G, A) + 180 mod 360
By divide_by_2_mod_180_v3 on F, H, E, C, F, E we get angle(F, H, E) == angle(C, F, E) + 180 mod 360
By divide_by_2_mod_180_v2 on A, D, F, I, J, F we get angle(A, D, F) == angle(I, J, F) + 180 mod 360
By divide_by_2_mod_180_v1 on A, F, E, F, H, E we get angle(A, F, E) == angle(F, H, E) mod 360
By divide_by_2_mod_180_v2 on C, J, E, H, E, D we get angle(C, J, E) == angle(H, E, D) + 180 mod 360
By divide_by_2_mod_180_v3 on G, E, B, I, J, E we get angle(G, E, B) == angle(I, J, E) + 180 mod 360
By divide_by_2_mod_180_v1 on E, J, C, C, E, G we get angle(C, E, G) == angle(E, J, C) mod 360
By divide_by_2_mod_180_v3 on I, G, A, J, F, G we get angle(I, G, A) == angle(J, F, G) + 180 mod 360
By divide_by_2_mod_180_v2 on C, G, E, J, E, B we get angle(C, G, E) == angle(J, E, B) + 180 mod 360
By divide_by_2_mod_180_v3 on G, H, J, A, G, I we get angle(G, H, J) == angle(A, G, I) + 180 mod 360
By divide_by_2_mod_180_v3 on E, G, H, B, E, H we get angle(E, G, H) == angle(B, E, H) + 180 mod 360
By divide_by_2_mod_180_v2 on B, E, D, B, G, H we get angle(B, E, D) == angle(B, G, H) + 180 mod 360
By divide_by_2_mod_180_v2 on G, D, A, C, J, F we get angle(G, D, A) == angle(C, J, F) + 180 mod 360
By divide_by_2_mod_180_v2 on C, F, G, F, E, G we get angle(C, F, G) == angle(F, E, G) + 180 mod 360
By divide_by_2_mod_180_v2 on B, D, G, E, J, C we get angle(B, D, G) == angle(E, J, C) + 180 mod 360
By divide_by_2_mod_180_v2 on A, D, F, C, J, F we get angle(A, D, F) == angle(C, J, F) + 180 mod 360
By divide_by_2_mod_180_v2 on H, G, B, D, G, A we get angle(H, G, B) == angle(D, G, A) + 180 mod 360
By divide_by_2_mod_180_v3 on E, H, J, B, E, J we get angle(E, H, J) == angle(B, E, J) + 180 mod 360
By divide_by_2_mod_180_v2 on A, G, D, B, G, H we get angle(A, G, D) == angle(B, G, H) + 180 mod 360
By divide_by_2_mod_180_v2 on I, G, B, J, E, G we get angle(I, G, B) == angle(J, E, G) + 180 mod 360
By divide_by_2_mod_180_v2 on D, G, I, K, I, J we get angle(D, G, I) == angle(K, I, J) + 180 mod 360
By divide_by_2_mod_180_v3 on G, E, B, C, J, E we get angle(G, E, B) == angle(C, J, E) + 180 mod 360
By divide_by_2_mod_180_v0 on H, F, G, H, G, B we get angle(H, F, G) == angle(H, G, B) mod 360
By divide_by_2_mod_180_v2 on A, G, H, C, J, H we get angle(A, G, H) == angle(C, J, H) + 180 mod 360
By divide_by_2_mod_180_v1 on E, G, F, C, E, F we get angle(C, E, F) == angle(E, G, F) mod 360
By divide_by_2_mod_180_v2 on G, E, F, G, F, C we get angle(G, E, F) == angle(G, F, C) + 180 mod 360
By divide_by_2_mod_180_v2 on C, F, E, F, J, E we get angle(C, F, E) == angle(F, J, E) + 180 mod 360
By divide_by_2_mod_180_v1 on C, I, K, C, G, D we get angle(C, G, D) == angle(C, I, K) mod 360
By divide_by_2_mod_180_v3 on G, F, J, A, G, J we get angle(G, F, J) == angle(A, G, J) + 180 mod 360
By divide_by_2_mod_180_v1 on D, A, C, H, J, F we get angle(D, A, C) == angle(H, J, F) mod 360
By divide_by_2_mod_180_v3 on C, J, F, A, G, F we get angle(C, J, F) == angle(A, G, F) + 180 mod 360
By divide_by_2_mod_180_v2 on I, J, E, H, E, D we get angle(I, J, E) == angle(H, E, D) + 180 mod 360
By divide_by_2_mod_180_v2 on D, G, I, K, I, G we get angle(D, G, I) == angle(K, I, G) + 180 mod 360
By divide_by_2_mod_180_v2 on F, D, C, F, H, E we get angle(F, D, C) == angle(F, H, E) + 180 mod 360
By divide_by_2_mod_180_v2 on E, H, F, C, E, F we get angle(E, H, F) == angle(C, E, F) + 180 mod 360
By divide_by_2_mod_180_v3 on B, G, F, G, E, F we get angle(B, G, F) == angle(G, E, F) + 180 mod 360
By divide_by_2_mod_180_v2 on G, F, A, I, J, F we get angle(G, F, A) == angle(I, J, F) + 180 mod 360
By divide_by_2_mod_180_v3 on H, E, G, A, G, H we get angle(H, E, G) == angle(A, G, H) + 180 mod 360
By divide_by_2_mod_180_v2 on F, J, C, F, D, A we get angle(F, J, C) == angle(F, D, A) + 180 mod 360
By divide_by_2_mod_180_v2 on B, D, G, E, J, I we get angle(B, D, G) == angle(E, J, I) + 180 mod 360
By divide_by_2_mod_180_v2 on H, G, B, C, E, D we get angle(H, G, B) == angle(C, E, D) + 180 mod 360
By divide_by_2_mod_180_v2 on G, J, F, B, G, F we get angle(G, J, F) == angle(B, G, F) + 180 mod 360
By divide_by_2_mod_180_v3 on B, G, H, B, E, D we get angle(B, G, H) == angle(B, E, D) + 180 mod 360
By divide_by_2_mod_180_v2 on J, F, A, J, G, F we get angle(J, F, A) == angle(J, G, F) + 180 mod 360
By divide_by_2_mod_180_v3 on I, G, F, J, F, A we get angle(I, G, F) == angle(J, F, A) + 180 mod 360
By divide_by_2_mod_180_v2 on H, G, B, H, J, G we get angle(H, G, B) == angle(H, J, G) + 180 mod 360
By divide_by_2_mod_180_v2 on J, G, B, J, E, G we get angle(J, G, B) == angle(J, E, G) + 180 mod 360
By divide_by_2_mod_180_v3 on H, E, G, H, G, B we get angle(H, E, G) == angle(H, G, B) + 180 mod 360
By divide_by_2_mod_180_v3 on J, E, B, C, G, E we get angle(J, E, B) == angle(C, G, E) + 180 mod 360
By divide_by_2_mod_180_v2 on F, G, E, A, F, E we get angle(F, G, E) == angle(A, F, E) + 180 mod 360
By divide_by_2_mod_180_v3 on B, G, H, A, G, D we get angle(B, G, H) == angle(A, G, D) + 180 mod 360
By divide_by_2_mod_180_v3 on H, G, A, H, F, G we get angle(H, G, A) == angle(H, F, G) + 180 mod 360
By divide_by_2_mod_180_v3 on B, G, J, G, E, J we get angle(B, G, J) == angle(G, E, J) + 180 mod 360
By divide_by_2_mod_180_v2 on E, H, F, E, D, C we get angle(E, H, F) == angle(E, D, C) + 180 mod 360
By divide_by_2_mod_180_v2 on A, G, D, H, G, A we get angle(A, G, D) == angle(H, G, A) + 180 mod 360
By divide_by_2_mod_180_v3 on G, D, B, C, J, E we get angle(G, D, B) == angle(C, J, E) + 180 mod 360
By divide_by_2_mod_180_v3 on F, E, B, F, G, E we get angle(F, E, B) == angle(F, G, E) + 180 mod 360
By divide_by_2_mod_180_v2 on G, H, F, B, G, F we get angle(G, H, F) == angle(B, G, F) + 180 mod 360
By divide_by_2_mod_180_v0 on H, G, E, G, E, D we get angle(G, E, D) == angle(H, G, E) mod 360
By divide_by_2_mod_180_v3 on F, J, E, C, F, E we get angle(F, J, E) == angle(C, F, E) + 180 mod 360
By divide_by_2_mod_180_v2 on G, E, F, B, G, F we get angle(G, E, F) == angle(B, G, F) + 180 mod 360
By divide_by_2_mod_180_v3 on A, D, G, F, J, I we get angle(A, D, G) == angle(F, J, I) + 180 mod 360
By divide_by_2_mod_180_v2 on E, J, F, E, F, C we get angle(E, J, F) == angle(E, F, C) + 180 mod 360
By divide_by_2_mod_180_v2 on G, E, J, B, G, C we get angle(G, E, J) == angle(B, G, C) + 180 mod 360
By divide_by_2_mod_180_v3 on C, E, F, E, H, F we get angle(C, E, F) == angle(E, H, F) + 180 mod 360
By divide_by_2_mod_180_v3 on F, J, G, C, F, G we get angle(F, J, G) == angle(C, F, G) + 180 mod 360
By divide_by_2_mod_180_v0 on H, G, J, D, G, C we get angle(D, G, C) == angle(H, G, J) mod 360
By divide_by_2_mod_180_v3 on G, F, E, G, E, C we get angle(G, F, E) == angle(G, E, C) + 180 mod 360
By divide_by_2_mod_180_v2 on D, G, J, K, I, J we get angle(D, G, J) == angle(K, I, J) + 180 mod 360
By divide_by_2_mod_180_v2 on B, E, G, E, J, C we get angle(B, E, G) == angle(E, J, C) + 180 mod 360
By divide_by_2_mod_180_v2 on B, E, J, E, G, C we get angle(B, E, J) == angle(E, G, C) + 180 mod 360
By divide_by_2_mod_180_v3 on D, G, A, A, G, H we get angle(D, G, A) == angle(A, G, H) + 180 mod 360
By divide_by_2_mod_180_v2 on E, H, G, C, E, G we get angle(E, H, G) == angle(C, E, G) + 180 mod 360
By divide_by_2_mod_180_v2 on A, G, I, G, F, J we get angle(A, G, I) == angle(G, F, J) + 180 mod 360
By divide_by_2_mod_180_v2 on C, F, E, F, H, E we get angle(C, F, E) == angle(F, H, E) + 180 mod 360
By divide_by_2_mod_180_v3 on B, G, H, H, J, I we get angle(B, G, H) == angle(H, J, I) + 180 mod 360
By divide_by_2_mod_180_v3 on H, G, A, C, F, D we get angle(H, G, A) == angle(C, F, D) + 180 mod 360
By divide_by_2_mod_180_v3 on D, E, B, H, G, B we get angle(D, E, B) == angle(H, G, B) + 180 mod 360
By divide_by_2_mod_180_v3 on H, J, F, H, F, A we get angle(H, J, F) == angle(H, F, A) + 180 mod 360
By divide_by_2_mod_180_v2 on J, F, G, I, G, A we get angle(J, F, G) == angle(I, G, A) + 180 mod 360
By divide_by_2_mod_180_v2 on D, E, H, E, J, I we get angle(D, E, H) == angle(E, J, I) + 180 mod 360
By divide_by_2_mod_180_v2 on E, J, H, E, G, D we get angle(E, J, H) == angle(E, G, D) + 180 mod 360
By external_angle_bisector_definition_v0_r on C, H, I, J we get Line(H, J) == external_angle_bisector(C, J, I)
By anti_similar_triangle_basic_properties on B, G, E, B, E, G we get angle(B, G, E) == 0 - angle(B, E, G) mod 360, angle(G, E, B) == 0 - angle(E, G, B) mod 360, angle(E, B, G) == 0 - angle(G, B, E) mod 360, log(distance(B, E)) + log(distance(E, G)) == log(distance(B, G)) + log(distance(E, G)), log(distance(E, G)) + log(distance(B, E)) == log(distance(E, G)) + log(distance(B, G)), log(distance(B, E)) + log(distance(B, E)) == log(distance(B, G)) + log(distance(B, G))
By external_angle_bisector_definition_v0_r on G, H, G, J we get Line(H, J) == external_angle_bisector(G, J, G)
By external_angle_bisector_definition_v0_r on H, G, H, J we get Line(G, J) == external_angle_bisector(H, J, H)
By external_angle_bisector_definition_v0_r on G, H, G, F we get Line(F, H) == external_angle_bisector(G, F, G)
By external_angle_bisector_definition_v0_r on H, G, H, E we get Line(E, G) == external_angle_bisector(H, E, H)
By external_angle_bisector_definition_v0_r on H, A, H, G we get Line(A, G) == external_angle_bisector(H, G, H)
By external_angle_bisector_definition_v0_r on G, H, G, E we get Line(E, H) == external_angle_bisector(G, E, G)
By anti_similar_triangle_basic_properties on C, E, F, C, F, E we get angle(C, E, F) == 0 - angle(C, F, E) mod 360, angle(E, F, C) == 0 - angle(F, E, C) mod 360, angle(F, C, E) == 0 - angle(E, C, F) mod 360, log(distance(C, E)) + log(distance(E, F)) == log(distance(C, F)) + log(distance(E, F)), log(distance(E, F)) + log(distance(C, E)) == log(distance(E, F)) + log(distance(C, F)), log(distance(C, E)) + log(distance(C, E)) == log(distance(C, F)) + log(distance(C, F))
By anti_similar_triangle_basic_properties on F, A, G, G, A, F we get angle(F, A, G) == 0 - angle(G, A, F) mod 360, angle(A, G, F) == 0 - angle(A, F, G) mod 360, angle(G, F, A) == 0 - angle(F, G, A) mod 360, log(distance(A, F)) + log(distance(A, F)) == log(distance(A, G)) + log(distance(A, G)), log(distance(A, F)) + log(distance(F, G)) == log(distance(A, G)) + log(distance(F, G)), log(distance(F, G)) + log(distance(A, F)) == log(distance(F, G)) + log(distance(A, G))
By anti_similar_triangle_basic_properties on G, E, D, E, G, D we get angle(G, E, D) == 0 - angle(E, G, D) mod 360, angle(E, D, G) == 0 - angle(G, D, E) mod 360, angle(D, G, E) == 0 - angle(D, E, G) mod 360, log(distance(E, G)) + log(distance(D, E)) == log(distance(E, G)) + log(distance(D, G)), log(distance(D, E)) + log(distance(D, E)) == log(distance(D, G)) + log(distance(D, G)), log(distance(D, E)) + log(distance(E, G)) == log(distance(D, G)) + log(distance(E, G))
By external_angle_bisector_definition_v0_r on H, C, H, J we get Line(C, J) == external_angle_bisector(H, J, H)
By external_angle_bisector_definition_v0_r on H, I, H, J we get Line(I, J) == external_angle_bisector(H, J, H)
By external_angle_bisector_definition_v0_r on C, H, C, J we get Line(H, J) == external_angle_bisector(C, J, C)
By anti_similar_triangle_basic_properties on E, D, F, F, D, E we get angle(E, D, F) == 0 - angle(F, D, E) mod 360, angle(D, F, E) == 0 - angle(D, E, F) mod 360, angle(F, E, D) == 0 - angle(E, F, D) mod 360, log(distance(D, E)) + log(distance(D, E)) == log(distance(D, F)) + log(distance(D, F)), log(distance(D, E)) + log(distance(E, F)) == log(distance(D, F)) + log(distance(E, F)), log(distance(E, F)) + log(distance(D, E)) == log(distance(E, F)) + log(distance(D, F))
By external_angle_bisector_definition_v0_r on I, H, I, J we get Line(H, J) == external_angle_bisector(I, J, I)
By external_angle_bisector_definition_v0_r on H, B, H, G we get Line(B, G) == external_angle_bisector(H, G, H)
By anti_similar_triangle_basic_properties on G, F, D, F, G, D we get angle(G, F, D) == 0 - angle(F, G, D) mod 360, angle(F, D, G) == 0 - angle(G, D, F) mod 360, angle(D, G, F) == 0 - angle(D, F, G) mod 360, log(distance(F, G)) + log(distance(D, F)) == log(distance(F, G)) + log(distance(D, G)), log(distance(D, F)) + log(distance(D, F)) == log(distance(D, G)) + log(distance(D, G)), log(distance(D, F)) + log(distance(F, G)) == log(distance(D, G)) + log(distance(F, G))
By external_angle_bisector_definition_v0_r on H, G, H, F we get Line(F, G) == external_angle_bisector(H, F, H)
By internal_angle_bisector_definition_v0_r on I, H, G, J we get Line(H, J) == internal_angle_bisector(G, J, I)
By internal_angle_bisector_definition_v0_r on C, H, G, J we get Line(H, J) == internal_angle_bisector(C, J, G)
By isosceles_triangle_altitude_v2 on C, E, F we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, C, F), perpendicular_line(C, Line(E, F)))
By isosceles_triangle_altitude_v2 on C, F, E we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, C, F), perpendicular_line(C, Line(E, F)))
By concyclic_sufficient_conditions_v1 on G, center(c), F, A we get concyclic(A, F, G, center(c))
By concyclic_sufficient_conditions_v1 on E, B, G, center(c) we get concyclic(B, E, G, center(c))
By concyclic_sufficient_conditions_v1 on E, C, F, center(c) we get concyclic(C, E, F, center(c))
By line_definition on midpoint(E, F), D, Line(C, D) we get Line(C, D) == Line(D, midpoint(E, F))
By line_definition on C, midpoint(E, F), Line(C, D) we get Line(C, D) == Line(C, midpoint(E, F))
By line_definition on D, H, Line(D, G) we get Line(D, G) == Line(D, H)
By line_intersection_definition on G, Line(G, center(Circle(B, D, E))), f we get G == line_intersection(f, Line(G, center(Circle(B, D, E))))
By line_intersection_definition on C, Line(C, H), Line(C, center(Circle(C, D, E))) we get C == line_intersection(Line(C, H), Line(C, center(Circle(C, D, E))))
By line_intersection_definition on center(Circle(A, D, F)), Line(D, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))) we get center(Circle(A, D, F)) == line_intersection(Line(D, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))))
By line_intersection_definition on A, h, Line(A, center(Circle(A, D, F))) we get A == line_intersection(h, Line(A, center(Circle(A, D, F))))
By line_intersection_definition on center(Circle(A, D, F)), Line(G, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))) we get center(Circle(A, D, F)) == line_intersection(Line(F, center(Circle(A, D, F))), Line(G, center(Circle(A, D, F))))
By line_intersection_definition on G, Line(G, center(c)), Line(F, G) we get G == line_intersection(Line(F, G), Line(G, center(c)))
By line_intersection_definition on E, Line(E, center(c)), Line(E, G) we get E == line_intersection(Line(E, G), Line(E, center(c)))
By line_intersection_definition on center(c), Line(E, center(c)), Line(F, center(c)) we get center(c) == line_intersection(Line(E, center(c)), Line(F, center(c)))
By line_intersection_definition on G, Line(G, center(c)), l we get G == line_intersection(l, Line(G, center(c)))
By line_intersection_definition on center(Circle(A, D, F)), Line(A, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))) we get center(Circle(A, D, F)) == line_intersection(Line(A, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))))
By line_intersection_definition on G, Line(D, G), Line(G, center(Circle(B, D, E))) we get G == line_intersection(Line(D, G), Line(G, center(Circle(B, D, E))))
By line_intersection_definition on center(c), Line(G, center(c)), Line(F, center(c)) we get center(c) == line_intersection(Line(F, center(c)), Line(G, center(c)))
By line_intersection_definition on G, f, Line(G, center(Circle(A, D, F))) we get G == line_intersection(f, Line(G, center(Circle(A, D, F))))
By line_intersection_definition on C, Line(C, center(Circle(C, D, E))), g we get C == line_intersection(g, Line(C, center(Circle(C, D, E))))
By line_intersection_definition on D, Line(D, E), Line(D, center(Circle(C, D, E))) we get D == line_intersection(Line(D, E), Line(D, center(Circle(C, D, E))))
By line_intersection_definition on G, Line(G, center(Circle(B, D, E))), l we get G == line_intersection(l, Line(G, center(Circle(B, D, E))))
By line_intersection_definition on E, Line(E, center(Circle(C, D, E))), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on J, Line(E, J), Line(J, center(c)) we get J == line_intersection(Line(E, J), Line(J, center(c)))
By perpendicular_line_definition on G, Line(E, G), k we get Line(E, G) == perpendicular_line(G, k)
By line_intersection_definition on G, l, Line(G, center(Circle(A, D, F))) we get G == line_intersection(l, Line(G, center(Circle(A, D, F))))
By line_intersection_definition on F, Line(F, center(Circle(C, D, E))), Line(F, H) we get F == line_intersection(Line(F, H), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on F, h, Line(F, center(Circle(C, D, E))) we get F == line_intersection(h, Line(F, center(Circle(C, D, E))))
By line_intersection_definition on center(c), Line(J, center(c)), Line(E, center(c)) we get center(c) == line_intersection(Line(E, center(c)), Line(J, center(c)))
By line_intersection_definition on E, Line(E, G), Line(E, center(Circle(C, D, E))) we get E == line_intersection(Line(E, G), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on G, Line(E, G), Line(G, center(Circle(B, D, E))) we get G == line_intersection(Line(E, G), Line(G, center(Circle(B, D, E))))
By perpendicular_line_definition on G, Line(F, G), Line(F, H) we get Line(F, G) == perpendicular_line(G, Line(F, H))
By line_intersection_definition on F, Line(F, J), Line(F, center(Circle(A, D, F))) we get F == line_intersection(Line(F, J), Line(F, center(Circle(A, D, F))))
By line_intersection_definition on F, Line(F, center(Circle(C, D, E))), Line(F, J) we get F == line_intersection(Line(F, J), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on F, Line(E, F), Line(F, center(Circle(A, D, F))) we get F == line_intersection(Line(E, F), Line(F, center(Circle(A, D, F))))
By line_intersection_definition on F, Line(F, center(Circle(C, D, E))), Line(F, center(c)) we get F == line_intersection(Line(F, center(c)), Line(F, center(Circle(C, D, E))))
By perpendicular_line_definition on I, l, Line(H, J) we get l == perpendicular_line(I, Line(H, J))
By line_intersection_definition on D, Line(D, center(Circle(A, D, F))), Line(D, center(Circle(B, D, E))) we get D == line_intersection(Line(D, center(Circle(A, D, F))), Line(D, center(Circle(B, D, E))))
By line_intersection_definition on D, Line(D, center(Circle(A, D, F))), Line(C, D) we get D == line_intersection(Line(C, D), Line(D, center(Circle(A, D, F))))
By line_intersection_definition on E, g, Line(E, center(c)) we get E == line_intersection(g, Line(E, center(c)))
By line_intersection_definition on D, Line(D, center(Circle(C, D, E))), Line(D, center(Circle(A, D, F))) we get D == line_intersection(Line(D, center(Circle(A, D, F))), Line(D, center(Circle(C, D, E))))
By line_intersection_definition on center(c), Line(G, center(c)), Line(E, center(c)) we get center(c) == line_intersection(Line(E, center(c)), Line(G, center(c)))
By line_intersection_definition on F, Line(F, center(Circle(A, D, F))), Line(F, G) we get F == line_intersection(Line(F, G), Line(F, center(Circle(A, D, F))))
By line_intersection_definition on E, Line(E, center(Circle(B, D, E))), g we get E == line_intersection(g, Line(E, center(Circle(B, D, E))))
By line_intersection_definition on H, Line(H, center(c)), Line(F, H) we get H == line_intersection(Line(F, H), Line(H, center(c)))
By line_intersection_definition on D, i, Line(D, center(Circle(B, D, E))) we get D == line_intersection(i, Line(D, center(Circle(B, D, E))))
By line_intersection_definition on D, Line(D, E), Line(D, center(Circle(A, D, F))) we get D == line_intersection(Line(D, E), Line(D, center(Circle(A, D, F))))
By perpendicular_line_definition on K, Line(I, K), f we get Line(I, K) == perpendicular_line(K, f)
By line_intersection_definition on F, h, Line(F, center(Circle(A, D, F))) we get F == line_intersection(h, Line(F, center(Circle(A, D, F))))
By line_intersection_definition on G, Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))) we get G == line_intersection(Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))))
By line_intersection_definition on J, l, Line(J, center(c)) we get J == line_intersection(l, Line(J, center(c)))
By line_intersection_definition on F, Line(F, center(Circle(C, D, E))), Line(E, F) we get F == line_intersection(Line(E, F), Line(F, center(Circle(C, D, E))))
By perpendicular_line_definition on J, l, Line(H, J) we get l == perpendicular_line(J, Line(H, J))
By line_intersection_definition on center(Circle(B, D, E)), Line(E, center(Circle(B, D, E))), Line(D, center(Circle(B, D, E))) we get center(Circle(B, D, E)) == line_intersection(Line(D, center(Circle(B, D, E))), Line(E, center(Circle(B, D, E))))
By line_intersection_definition on center(Circle(C, D, E)), Line(C, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(C, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on F, Line(F, center(Circle(C, D, E))), Line(F, center(Circle(A, D, F))) we get F == line_intersection(Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By perpendicular_line_definition on J, Line(H, J), l we get Line(H, J) == perpendicular_line(J, l)
By line_intersection_definition on A, f, Line(A, center(Circle(A, D, F))) we get A == line_intersection(f, Line(A, center(Circle(A, D, F))))
By line_intersection_definition on D, Line(D, center(Circle(B, D, E))), Line(D, center(Circle(C, D, E))) we get D == line_intersection(Line(D, center(Circle(B, D, E))), Line(D, center(Circle(C, D, E))))
By perpendicular_line_definition on B, f, Line(I, K) we get f == perpendicular_line(B, Line(I, K))
By perpendicular_line_definition on H, Line(H, J), l we get Line(H, J) == perpendicular_line(H, l)
By line_intersection_definition on E, Line(E, center(Circle(C, D, E))), g we get E == line_intersection(g, Line(E, center(Circle(C, D, E))))
By perpendicular_line_definition on E, Line(E, G), k we get Line(E, G) == perpendicular_line(E, k)
By line_intersection_definition on E, Line(E, F), Line(E, center(c)) we get E == line_intersection(Line(E, F), Line(E, center(c)))
By line_intersection_definition on F, Line(F, G), Line(F, center(Circle(C, D, E))) we get F == line_intersection(Line(F, G), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on D, Line(D, center(Circle(C, D, E))), Line(D, G) we get D == line_intersection(Line(D, G), Line(D, center(Circle(C, D, E))))
By perpendicular_line_definition on F, Line(F, G), i we get Line(F, G) == perpendicular_line(F, i)
By line_intersection_definition on G, Line(E, G), Line(G, center(c)) we get G == line_intersection(Line(E, G), Line(G, center(c)))
By line_intersection_definition on D, Line(D, center(Circle(A, D, F))), j we get D == line_intersection(j, Line(D, center(Circle(A, D, F))))
By line_intersection_definition on center(c), Line(F, center(c)), Line(H, center(c)) we get center(c) == line_intersection(Line(F, center(c)), Line(H, center(c)))
By line_intersection_definition on E, Line(E, center(Circle(B, D, E))), Line(E, G) we get E == line_intersection(Line(E, G), Line(E, center(Circle(B, D, E))))
By line_intersection_definition on center(c), Line(E, center(c)), Line(H, center(c)) we get center(c) == line_intersection(Line(E, center(c)), Line(H, center(c)))
By line_intersection_definition on H, Line(H, center(c)), Line(C, H) we get H == line_intersection(Line(C, H), Line(H, center(c)))
By line_intersection_definition on E, Line(E, center(Circle(B, D, E))), k we get E == line_intersection(k, Line(E, center(Circle(B, D, E))))
By line_intersection_definition on D, Line(D, F), Line(D, center(Circle(C, D, E))) we get D == line_intersection(Line(D, F), Line(D, center(Circle(C, D, E))))
By median_definition on D, E, F, Line(C, D) we get Line(C, D) == median(D, E, F)
By line_intersection_definition on D, Line(D, center(Circle(B, D, E))), Line(D, F) we get D == line_intersection(Line(D, F), Line(D, center(Circle(B, D, E))))
By perpendicular_line_definition on G, l, Line(H, J) we get l == perpendicular_line(G, Line(H, J))
By line_intersection_definition on center(Circle(B, D, E)), Line(D, center(Circle(B, D, E))), Line(G, center(Circle(B, D, E))) we get center(Circle(B, D, E)) == line_intersection(Line(D, center(Circle(B, D, E))), Line(G, center(Circle(B, D, E))))
By line_intersection_definition on F, Line(F, center(c)), Line(F, H) we get F == line_intersection(Line(F, H), Line(F, center(c)))
By median_definition on C, E, F, Line(C, D) we get Line(C, D) == median(C, E, F)
By line_intersection_definition on center(c), Line(G, center(c)), Line(J, center(c)) we get center(c) == line_intersection(Line(G, center(c)), Line(J, center(c)))
By perpendicular_line_definition on D, j, Line(E, G) we get j == perpendicular_line(D, Line(E, G))
By line_intersection_definition on G, Line(G, center(Circle(B, D, E))), Line(F, G) we get G == line_intersection(Line(F, G), Line(G, center(Circle(B, D, E))))
By line_intersection_definition on D, Line(D, center(Circle(A, D, F))), Line(D, F) we get D == line_intersection(Line(D, F), Line(D, center(Circle(A, D, F))))
By line_intersection_definition on C, l, Line(C, center(Circle(C, D, E))) we get C == line_intersection(l, Line(C, center(Circle(C, D, E))))
By line_intersection_definition on J, Line(H, J), Line(J, center(c)) we get J == line_intersection(Line(H, J), Line(J, center(c)))
By line_intersection_definition on D, Line(D, center(Circle(B, D, E))), Line(D, G) we get D == line_intersection(Line(D, G), Line(D, center(Circle(B, D, E))))
By line_intersection_definition on E, Line(E, center(Circle(C, D, E))), Line(E, center(Circle(B, D, E))) we get E == line_intersection(Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on center(Circle(C, D, E)), Line(E, center(Circle(C, D, E))), Line(C, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(C, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on D, Line(D, G), Line(D, center(Circle(A, D, F))) we get D == line_intersection(Line(D, G), Line(D, center(Circle(A, D, F))))
By line_intersection_definition on center(Circle(B, D, E)), Line(E, center(Circle(B, D, E))), Line(B, center(Circle(B, D, E))) we get center(Circle(B, D, E)) == line_intersection(Line(B, center(Circle(B, D, E))), Line(E, center(Circle(B, D, E))))
By line_intersection_definition on F, Line(F, center(Circle(C, D, E))), Line(D, F) we get F == line_intersection(Line(D, F), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on center(Circle(C, D, E)), Line(F, center(Circle(C, D, E))), Line(D, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(D, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on center(Circle(A, D, F)), Line(D, center(Circle(A, D, F))), Line(G, center(Circle(A, D, F))) we get center(Circle(A, D, F)) == line_intersection(Line(D, center(Circle(A, D, F))), Line(G, center(Circle(A, D, F))))
By line_intersection_definition on C, h, Line(C, center(Circle(C, D, E))) we get C == line_intersection(h, Line(C, center(Circle(C, D, E))))
By perpendicular_line_definition on G, Line(E, G), j we get Line(E, G) == perpendicular_line(G, j)
By line_intersection_definition on G, Line(G, center(c)), f we get G == line_intersection(f, Line(G, center(c)))
By line_intersection_definition on G, Line(D, G), Line(G, center(Circle(A, D, F))) we get G == line_intersection(Line(D, G), Line(G, center(Circle(A, D, F))))
By line_intersection_definition on center(Circle(C, D, E)), Line(F, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on F, Line(F, center(Circle(A, D, F))), Line(D, F) we get F == line_intersection(Line(D, F), Line(F, center(Circle(A, D, F))))
By line_intersection_definition on E, Line(E, center(Circle(C, D, E))), Line(E, F) we get E == line_intersection(Line(E, F), Line(E, center(Circle(C, D, E))))
By perpendicular_line_definition on A, f, Line(I, K) we get f == perpendicular_line(A, Line(I, K))
By line_intersection_definition on B, Line(B, center(Circle(B, D, E))), g we get B == line_intersection(g, Line(B, center(Circle(B, D, E))))
By line_intersection_definition on D, i, Line(D, center(Circle(C, D, E))) we get D == line_intersection(i, Line(D, center(Circle(C, D, E))))
By line_intersection_definition on E, Line(E, center(c)), k we get E == line_intersection(k, Line(E, center(c)))
By perpendicular_line_definition on F, Line(F, G), Line(F, H) we get Line(F, G) == perpendicular_line(F, Line(F, H))
By perpendicular_line_definition on H, Line(D, G), f we get Line(D, G) == perpendicular_line(H, f)
By line_intersection_definition on G, Line(G, center(Circle(A, D, F))), Line(E, G) we get G == line_intersection(Line(E, G), Line(G, center(Circle(A, D, F))))
By line_intersection_definition on F, Line(F, center(c)), Line(F, G) we get F == line_intersection(Line(F, G), Line(F, center(c)))
By line_intersection_definition on F, Line(F, center(Circle(A, D, F))), Line(F, center(c)) we get F == line_intersection(Line(F, center(c)), Line(F, center(Circle(A, D, F))))
By line_intersection_definition on E, Line(E, J), Line(E, center(c)) we get E == line_intersection(Line(E, J), Line(E, center(c)))
By line_intersection_definition on D, Line(D, center(Circle(B, D, E))), Line(D, E) we get D == line_intersection(Line(D, E), Line(D, center(Circle(B, D, E))))
By line_intersection_definition on D, Line(C, D), Line(D, center(Circle(B, D, E))) we get D == line_intersection(Line(C, D), Line(D, center(Circle(B, D, E))))
By line_intersection_definition on F, Line(F, center(c)), Line(F, J) we get F == line_intersection(Line(F, J), Line(F, center(c)))
By perpendicular_line_definition on H, Line(F, H), Line(F, G) we get Line(F, H) == perpendicular_line(H, Line(F, G))
By line_intersection_definition on E, Line(E, center(Circle(B, D, E))), Line(E, center(c)) we get E == line_intersection(Line(E, center(c)), Line(E, center(Circle(B, D, E))))
By perpendicular_line_definition on C, l, Line(H, J) we get l == perpendicular_line(C, Line(H, J))
By perpendicular_line_definition on F, Line(E, F), Line(C, D) we get Line(E, F) == perpendicular_line(F, Line(C, D))
By line_intersection_definition on center(c), Line(F, center(c)), Line(J, center(c)) we get center(c) == line_intersection(Line(F, center(c)), Line(J, center(c)))
By line_intersection_definition on E, Line(E, center(Circle(C, D, E))), k we get E == line_intersection(k, Line(E, center(Circle(C, D, E))))
By perpendicular_line_definition on A, i, Line(F, G) we get i == perpendicular_line(A, Line(F, G))
By line_intersection_definition on G, Line(G, center(c)), Line(G, center(Circle(A, D, F))) we get G == line_intersection(Line(G, center(c)), Line(G, center(Circle(A, D, F))))
By line_intersection_definition on H, Line(H, center(c)), Line(H, J) we get H == line_intersection(Line(H, J), Line(H, center(c)))
By perpendicular_line_definition on E, Line(E, F), Line(C, D) we get Line(E, F) == perpendicular_line(E, Line(C, D))
By line_intersection_definition on J, Line(J, center(c)), Line(F, J) we get J == line_intersection(Line(F, J), Line(J, center(c)))
By line_intersection_definition on B, f, Line(B, center(Circle(B, D, E))) we get B == line_intersection(f, Line(B, center(Circle(B, D, E))))
By perpendicular_line_definition on B, j, Line(E, G) we get j == perpendicular_line(B, Line(E, G))
By line_intersection_definition on E, Line(D, E), Line(E, center(Circle(B, D, E))) we get E == line_intersection(Line(D, E), Line(E, center(Circle(B, D, E))))
By line_intersection_definition on F, Line(F, center(c)), Line(E, F) we get F == line_intersection(Line(E, F), Line(F, center(c)))
By line_intersection_definition on F, Line(F, center(Circle(A, D, F))), Line(F, H) we get F == line_intersection(Line(F, H), Line(F, center(Circle(A, D, F))))
By perpendicular_line_definition on E, Line(E, G), j we get Line(E, G) == perpendicular_line(E, j)
By line_intersection_definition on center(Circle(B, D, E)), Line(E, center(Circle(B, D, E))), Line(G, center(Circle(B, D, E))) we get center(Circle(B, D, E)) == line_intersection(Line(E, center(Circle(B, D, E))), Line(G, center(Circle(B, D, E))))
By line_intersection_definition on G, Line(G, center(Circle(A, D, F))), Line(F, G) we get G == line_intersection(Line(F, G), Line(G, center(Circle(A, D, F))))
By line_intersection_definition on center(c), Line(J, center(c)), Line(H, center(c)) we get center(c) == line_intersection(Line(H, center(c)), Line(J, center(c)))
By line_intersection_definition on E, Line(E, F), Line(E, center(Circle(B, D, E))) we get E == line_intersection(Line(E, F), Line(E, center(Circle(B, D, E))))
By line_intersection_definition on E, Line(E, center(Circle(B, D, E))), Line(E, J) we get E == line_intersection(Line(E, J), Line(E, center(Circle(B, D, E))))
By line_intersection_definition on H, Line(H, center(c)), k we get H == line_intersection(k, Line(H, center(c)))
By perpendicular_line_definition on E, k, Line(E, G) we get k == perpendicular_line(E, Line(E, G))
By perpendicular_line_definition on H, k, Line(E, G) we get k == perpendicular_line(H, Line(E, G))
By perpendicular_line_definition on I, Line(I, K), f we get Line(I, K) == perpendicular_line(I, f)
By perpendicular_line_definition on G, Line(F, G), i we get Line(F, G) == perpendicular_line(G, i)
By line_intersection_definition on D, Line(D, center(Circle(C, D, E))), j we get D == line_intersection(j, Line(D, center(Circle(C, D, E))))
By line_intersection_definition on G, Line(G, center(c)), Line(G, center(Circle(B, D, E))) we get G == line_intersection(Line(G, center(c)), Line(G, center(Circle(B, D, E))))
By line_intersection_definition on center(Circle(C, D, E)), Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on center(Circle(B, D, E)), Line(B, center(Circle(B, D, E))), Line(G, center(Circle(B, D, E))) we get center(Circle(B, D, E)) == line_intersection(Line(B, center(Circle(B, D, E))), Line(G, center(Circle(B, D, E))))
By line_intersection_definition on F, Line(F, center(c)), h we get F == line_intersection(h, Line(F, center(c)))
By line_intersection_definition on E, Line(E, J), Line(E, center(Circle(C, D, E))) we get E == line_intersection(Line(E, J), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on E, Line(E, center(c)), Line(E, center(Circle(C, D, E))) we get E == line_intersection(Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By perpendicular_line_definition on G, f, Line(I, K) we get f == perpendicular_line(G, Line(I, K))
By perpendicular_line_definition on F, Line(F, H), Line(F, G) we get Line(F, H) == perpendicular_line(F, Line(F, G))
By perpendicular_line_definition on D, i, Line(F, G) we get i == perpendicular_line(D, Line(F, G))
By perpendicular_line_definition on D, Line(C, D), Line(E, F) we get Line(C, D) == perpendicular_line(D, Line(E, F))
By line_intersection_definition on center(Circle(A, D, F)), Line(G, center(Circle(A, D, F))), Line(A, center(Circle(A, D, F))) we get center(Circle(A, D, F)) == line_intersection(Line(A, center(Circle(A, D, F))), Line(G, center(Circle(A, D, F))))
By same_angle_converse_v0 on G, H, D, E we get collinear(D, G, H)
By same_angle_converse_v1 on center(Circle(C, D, E)), D, C, F we get collinear(C, D, center(Circle(C, D, E)))
By same_angle_converse_v1 on center(Circle(A, D, F)), D, A, G we get collinear(A, D, center(Circle(A, D, F)))
By same_angle_converse_v1 on center(c), H, G, F we get collinear(G, H, center(c))
By same_angle_converse_v1 on center(Circle(B, D, E)), B, D, G we get collinear(B, D, center(Circle(B, D, E)))
By between_imply_not_between on E, midpoint(E, F), F we get collinear_and_not_between(F, E, midpoint(E, F))
By between_imply_not_between on F, midpoint(E, F), E we get collinear_and_not_between(E, F, midpoint(E, F))
By parallel_line_definition on F, Line(F, H), i we get Line(F, H) == parallel_line(F, i)
By parallel_line_definition on D, i, Line(F, H) we get i == parallel_line(D, Line(F, H))
By parallel_line_definition on A, i, Line(F, H) we get i == parallel_line(A, Line(F, H))
By parallel_line_definition on D, Line(D, G), Line(I, K) we get Line(D, G) == parallel_line(D, Line(I, K))
By parallel_line_definition on H, Line(F, H), i we get Line(F, H) == parallel_line(H, i)
By projection_definition on C, J, Line(H, J) we get J == projection(C, Line(H, J))
By tangent_chord_angle_v1 on E, J, F, B we get tangent(Line(B, E), Circle(E, F, J))
By projection_definition on G, E, k we get E == projection(G, k)
By projection_definition on G, F, Line(F, H) we get F == projection(G, Line(F, H))
By tangent_chord_angle_v1 on G, F, E, B we get tangent(Line(B, G), Circle(E, F, G))
By tangent_chord_angle_v1 on F, E, G, A we get tangent(Line(A, F), Circle(E, F, G))
By aa_anti_similarity on H, F, E, D, B, A we get anti_similar_triangles(A, B, D, E, F, H)
By tangent_chord_angle_v1 on G, E, J, A we get tangent(Line(A, G), Circle(E, G, J))
By projection_definition on H, J, l we get J == projection(H, l)
By projection_definition on G, J, Line(H, J) we get J == projection(G, Line(H, J))
By projection_definition on H, F, Line(F, G) we get F == projection(H, Line(F, G))
By tangent_chord_angle_v1 on G, H, F, A we get tangent(Line(A, G), Circle(F, G, H))
By tangent_chord_angle_v1 on F, H, J, A we get tangent(Line(A, F), Circle(F, H, J))
By projection_definition on H, G, f we get G == projection(H, f)
By projection_definition on I, J, Line(H, J) we get J == projection(I, Line(H, J))
By tangent_chord_angle_v1 on F, H, E, A we get tangent(Line(A, F), Circle(E, F, H))
By projection_definition on H, E, Line(E, G) we get E == projection(H, Line(E, G))
By tangent_chord_angle_v1 on G, H, J, B we get tangent(Line(B, G), Circle(G, H, J))
By tangent_chord_angle_v1 on E, F, H, C we get tangent(Line(C, E), Circle(E, F, H))
By in_imply_collinear on midpoint(E, F), D, C we get collinear(C, D, midpoint(E, F))
By tangent_chord_angle_v1 on G, F, J, B we get tangent(Line(B, G), Circle(F, G, J))
By tangent_chord_angle_v1 on F, G, E, C we get tangent(Line(C, F), Circle(E, F, G))
By tangent_chord_angle_v1 on E, H, G, B we get tangent(Line(B, E), Circle(E, G, H))
By tangent_chord_angle_v0 on E, J, H, C we get tangent(Line(C, E), Circle(E, H, J))
By tangent_chord_angle_v1 on E, F, G, B we get tangent(Line(B, E), Circle(E, F, G))
By tangent_chord_angle_v1 on E, J, H, B we get tangent(Line(B, E), Circle(E, H, J))
By tangent_chord_angle_v1 on F, J, E, A we get tangent(Line(A, F), Circle(E, F, J))
By tangent_chord_angle_v1 on G, F, H, B we get tangent(Line(B, G), Circle(F, G, H))
By tangent_chord_angle_v1 on F, G, H, C we get tangent(Line(C, F), Circle(F, G, H))
By tangent_chord_angle_v1 on E, G, J, C we get tangent(Line(C, E), Circle(E, G, J))
By tangent_chord_angle_v1 on G, J, F, A we get tangent(Line(A, G), Circle(F, G, J))
By tangent_chord_angle_v1 on G, J, E, B we get tangent(Line(B, G), Circle(E, G, J))
By tangent_chord_angle_v1 on F, E, J, C we get tangent(Line(C, F), Circle(E, F, J))
By tangent_chord_angle_v1 on G, J, H, A we get tangent(Line(A, G), Circle(G, H, J))
By tangent_chord_angle_v1 on E, G, H, C we get tangent(Line(C, E), Circle(E, G, H))
By tangent_chord_angle_v0 on F, G, H, A we get tangent(Line(A, F), Circle(F, G, H))
By tangent_chord_angle_v1 on F, E, H, C we get tangent(Line(C, F), Circle(E, F, H))
By tangent_chord_angle_v1 on F, J, G, A we get tangent(Line(A, F), Circle(F, G, J))
By tangent_chord_angle_v1 on E, H, F, B we get tangent(Line(B, E), Circle(E, F, H))
By tangent_chord_angle_v1 on F, J, H, C we get tangent(Line(C, F), Circle(F, H, J))
By tangent_chord_angle_v1 on E, J, G, B we get tangent(Line(B, E), Circle(E, G, J))
By tangent_chord_angle_v1 on E, G, F, C we get tangent(Line(C, E), Circle(E, F, G))
By parallel_line_angles_reverse_v0 on H, F, D, A we get angle(A, D, F) == angle(H, F, D) mod 360
By tangent_chord_angle_v1 on G, E, F, A we get tangent(Line(A, G), Circle(E, F, G))
By tangent_chord_angle_v1 on E, F, J, C we get tangent(Line(C, E), Circle(E, F, J))
By tangent_chord_angle_v1 on F, G, J, C we get tangent(Line(C, F), Circle(F, G, J))
By perpendicular_bisector_sufficient_conditions on F, E, center(Circle(C, D, E)), C we get perpendicular_bisector(E, F) == Line(C, center(Circle(C, D, E)))
By tangent_chord_angle_v1 on G, E, H, A we get tangent(Line(A, G), Circle(E, G, H))
By tangent_chord_angle_v0 on G, E, H, B we get tangent(Line(B, G), Circle(E, G, H))
By aa_anti_similarity on D, A, B, H, E, F we get anti_similar_triangles(A, B, D, E, F, H)
By aa_anti_similarity on D, B, A, H, F, E we get anti_similar_triangles(A, B, D, E, F, H)
By aa_anti_similarity on H, E, F, D, A, B we get anti_similar_triangles(A, B, D, E, F, H)
By reverse_direction on center(c), F we get 180 == direction(center(c), F) - direction(F, center(c)) mod 360
By anti_similar_triangle_basic_properties on H, F, G, D, G, A we get angle(H, F, G) == 0 - angle(D, G, A) mod 360, angle(F, G, H) == 0 - angle(G, A, D) mod 360, angle(G, H, F) == 0 - angle(A, D, G) mod 360, log(distance(D, G)) + log(distance(F, G)) == log(distance(F, H)) + log(distance(A, G)), log(distance(A, G)) + log(distance(G, H)) == log(distance(F, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(F, H)) == log(distance(G, H)) + log(distance(D, G))
By anti_similar_triangle_basic_properties on J, E, C, E, G, C we get angle(J, E, C) == 0 - angle(E, G, C) mod 360, angle(E, C, J) == 0 - angle(G, C, E) mod 360, angle(C, J, E) == 0 - angle(C, E, G) mod 360, log(distance(E, G)) + log(distance(C, E)) == log(distance(E, J)) + log(distance(C, G)), log(distance(C, E)) + log(distance(C, E)) == log(distance(C, G)) + log(distance(C, J)), log(distance(C, E)) + log(distance(E, J)) == log(distance(C, J)) + log(distance(E, G))
By anti_similar_triangle_basic_properties on G, C, F, F, C, J we get angle(G, C, F) == 0 - angle(F, C, J) mod 360, angle(C, F, G) == 0 - angle(C, J, F) mod 360, angle(F, G, C) == 0 - angle(J, F, C) mod 360, log(distance(C, F)) + log(distance(C, F)) == log(distance(C, G)) + log(distance(C, J)), log(distance(C, F)) + log(distance(F, J)) == log(distance(C, J)) + log(distance(F, G)), log(distance(F, G)) + log(distance(C, F)) == log(distance(F, J)) + log(distance(C, G))
By reverse_direction on center(c), H we get 180 == direction(center(c), H) - direction(H, center(c)) mod 360
By reverse_direction on center(Circle(B, D, E)), G we get 180 == direction(center(Circle(B, D, E)), G) - direction(G, center(Circle(B, D, E))) mod 360
By anti_similar_triangle_basic_properties on H, G, F, D, A, G we get angle(H, G, F) == 0 - angle(D, A, G) mod 360, angle(G, F, H) == 0 - angle(A, G, D) mod 360, angle(F, H, G) == 0 - angle(G, D, A) mod 360, log(distance(A, D)) + log(distance(F, G)) == log(distance(G, H)) + log(distance(A, G)), log(distance(A, G)) + log(distance(F, H)) == log(distance(F, G)) + log(distance(D, G)), log(distance(D, G)) + log(distance(G, H)) == log(distance(F, H)) + log(distance(A, D))
By reverse_direction on center(Circle(A, D, F)), G we get 180 == direction(center(Circle(A, D, F)), G) - direction(G, center(Circle(A, D, F))) mod 360
By similar_triangle_basic_properties on A, D, F, G, H, F we get angle(A, D, F) == angle(G, H, F) mod 360, angle(D, F, A) == angle(H, F, G) mod 360, angle(F, A, D) == angle(F, G, H) mod 360, log(distance(A, D)) + log(distance(F, H)) == log(distance(G, H)) + log(distance(D, F)), log(distance(D, F)) + log(distance(F, G)) == log(distance(F, H)) + log(distance(A, F)), log(distance(A, F)) + log(distance(G, H)) == log(distance(F, G)) + log(distance(A, D))
By isosceles_triangle_midpoint on C, F, E we get midpoint(E, F) in median(C, E, F)
By anti_similar_triangle_basic_properties on G, H, E, B, D, G we get angle(G, H, E) == 0 - angle(B, D, G) mod 360, angle(H, E, G) == 0 - angle(D, G, B) mod 360, angle(E, G, H) == 0 - angle(G, B, D) mod 360, log(distance(B, D)) + log(distance(E, H)) == log(distance(G, H)) + log(distance(D, G)), log(distance(D, G)) + log(distance(E, G)) == log(distance(E, H)) + log(distance(B, G)), log(distance(B, G)) + log(distance(G, H)) == log(distance(E, G)) + log(distance(B, D))
By reverse_direction on center(Circle(C, D, E)), D we get 180 == direction(center(Circle(C, D, E)), D) - direction(D, center(Circle(C, D, E))) mod 360
By internal_angle_bisector_definition_v0_r on C, D, C, center(Circle(C, D, E)) we get Line(D, center(Circle(C, D, E))) == internal_angle_bisector(C, center(Circle(C, D, E)), C)
By similar_triangle_basic_properties on B, E, D, G, E, H we get angle(B, E, D) == angle(G, E, H) mod 360, angle(E, D, B) == angle(E, H, G) mod 360, angle(D, B, E) == angle(H, G, E) mod 360, log(distance(B, E)) + log(distance(E, H)) == log(distance(E, G)) + log(distance(D, E)), log(distance(D, E)) + log(distance(G, H)) == log(distance(E, H)) + log(distance(B, D)), log(distance(B, D)) + log(distance(E, G)) == log(distance(G, H)) + log(distance(B, E))
By similar_triangle_basic_properties on D, E, B, H, E, G we get angle(D, E, B) == angle(H, E, G) mod 360, angle(E, B, D) == angle(E, G, H) mod 360, angle(B, D, E) == angle(G, H, E) mod 360, log(distance(D, E)) + log(distance(E, G)) == log(distance(E, H)) + log(distance(B, E)), log(distance(B, E)) + log(distance(G, H)) == log(distance(E, G)) + log(distance(B, D)), log(distance(B, D)) + log(distance(E, H)) == log(distance(G, H)) + log(distance(D, E))
By isosceles_triangle_midpoint on center(c), E, F we get midpoint(E, F) in median(center(c), E, F)
By reverse_direction on center(c), E we get 180 == direction(center(c), E) - direction(E, center(c)) mod 360
By internal_angle_bisector_definition_v0_r on F, D, G, center(Circle(A, D, F)) we get Line(D, center(Circle(A, D, F))) == internal_angle_bisector(F, center(Circle(A, D, F)), G)
By anti_similar_triangle_basic_properties on G, F, C, F, J, C we get angle(G, F, C) == 0 - angle(F, J, C) mod 360, angle(F, C, G) == 0 - angle(J, C, F) mod 360, angle(C, G, F) == 0 - angle(C, F, J) mod 360, log(distance(F, G)) + log(distance(C, J)) == log(distance(F, J)) + log(distance(C, F)), log(distance(C, F)) + log(distance(C, F)) == log(distance(C, J)) + log(distance(C, G)), log(distance(C, F)) + log(distance(F, G)) == log(distance(C, G)) + log(distance(F, J))
By similar_triangle_basic_properties on H, G, F, D, A, F we get angle(D, A, F) == angle(H, G, F) mod 360, angle(A, F, D) == angle(G, F, H) mod 360, angle(F, D, A) == angle(F, H, G) mod 360, log(distance(A, D)) + log(distance(F, G)) == log(distance(G, H)) + log(distance(A, F)), log(distance(A, F)) + log(distance(F, H)) == log(distance(F, G)) + log(distance(D, F)), log(distance(D, F)) + log(distance(G, H)) == log(distance(F, H)) + log(distance(A, D))
By altitude_definition on C, E, F, Line(C, D) we get Line(C, D) == altitude(C, E, F)
By log_of_2_times_distance on E, F, midpoint(E, F), E we get log(distance(E, F)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(E, midpoint(E, F)))
By internal_angle_bisector_definition_v0_r on G, B, E, center(Circle(B, D, E)) we get Line(B, center(Circle(B, D, E))) == internal_angle_bisector(E, center(Circle(B, D, E)), G)
By reverse_direction on center(Circle(A, D, F)), A we get 180 == direction(center(Circle(A, D, F)), A) - direction(A, center(Circle(A, D, F))) mod 360
By anti_similar_triangle_basic_properties on J, C, E, E, C, G we get angle(J, C, E) == 0 - angle(E, C, G) mod 360, angle(C, E, J) == 0 - angle(C, G, E) mod 360, angle(E, J, C) == 0 - angle(G, E, C) mod 360, log(distance(C, E)) + log(distance(C, E)) == log(distance(C, J)) + log(distance(C, G)), log(distance(C, E)) + log(distance(E, G)) == log(distance(C, G)) + log(distance(E, J)), log(distance(E, G)) + log(distance(C, J)) == log(distance(E, J)) + log(distance(C, E))
By anti_similar_triangle_basic_properties on H, G, E, D, B, G we get angle(H, G, E) == 0 - angle(D, B, G) mod 360, angle(G, E, H) == 0 - angle(B, G, D) mod 360, angle(E, H, G) == 0 - angle(G, D, B) mod 360, log(distance(B, D)) + log(distance(E, G)) == log(distance(G, H)) + log(distance(B, G)), log(distance(B, G)) + log(distance(E, H)) == log(distance(E, G)) + log(distance(D, G)), log(distance(D, G)) + log(distance(G, H)) == log(distance(E, H)) + log(distance(B, D))
By external_angle_bisector_definition_v0_r on D, A, H, G we get Line(A, G) == external_angle_bisector(D, G, H)
By reverse_direction on center(Circle(C, D, E)), F we get 180 == direction(center(Circle(C, D, E)), F) - direction(F, center(Circle(C, D, E))) mod 360
By internal_angle_bisector_definition_v0_r on D, A, D, center(Circle(A, D, F)) we get Line(A, center(Circle(A, D, F))) == internal_angle_bisector(D, center(Circle(A, D, F)), D)
By reverse_direction on center(Circle(B, D, E)), D we get 180 == direction(center(Circle(B, D, E)), D) - direction(D, center(Circle(B, D, E))) mod 360
By external_angle_bisector_definition_v0_r on D, B, H, G we get Line(B, G) == external_angle_bisector(D, G, H)
By internal_angle_bisector_definition_v0_r on E, D, G, center(Circle(B, D, E)) we get Line(D, center(Circle(B, D, E))) == internal_angle_bisector(E, center(Circle(B, D, E)), G)
By internal_angle_bisector_definition_v0_r on E, C, F, center(Circle(C, D, E)) we get Line(C, center(Circle(C, D, E))) == internal_angle_bisector(E, center(Circle(C, D, E)), F)
By reverse_direction on center(Circle(C, D, E)), C we get 180 == direction(center(Circle(C, D, E)), C) - direction(C, center(Circle(C, D, E))) mod 360
By internal_angle_bisector_definition_v0_r on F, A, G, center(Circle(A, D, F)) we get Line(A, center(Circle(A, D, F))) == internal_angle_bisector(F, center(Circle(A, D, F)), G)
By reverse_direction on center(Circle(A, D, F)), F we get 180 == direction(center(Circle(A, D, F)), F) - direction(F, center(Circle(A, D, F))) mod 360
By isosceles_triangle_midpoint on center(Circle(C, D, E)), F, E we get midpoint(E, F) in median(center(Circle(C, D, E)), E, F)
By internal_angle_bisector_definition_v0_r on A, D, A, center(Circle(A, D, F)) we get Line(D, center(Circle(A, D, F))) == internal_angle_bisector(A, center(Circle(A, D, F)), A)
By internal_angle_bisector_definition_v0_r on F, D, E, center(Circle(C, D, E)) we get Line(D, center(Circle(C, D, E))) == internal_angle_bisector(E, center(Circle(C, D, E)), F)
By internal_angle_bisector_definition_v0_r on D, C, D, center(Circle(C, D, E)) we get Line(C, center(Circle(C, D, E))) == internal_angle_bisector(D, center(Circle(C, D, E)), D)
By collinear_definition on F, E, midpoint(E, F) we get E in Line(F, midpoint(E, F)), midpoint(E, F) in Line(E, F), Line(E, F) == Line(F, midpoint(E, F)), 0 == 2 * angle(E, F, midpoint(E, F)) mod 360
By reverse_direction on center(Circle(C, D, E)), E we get 180 == direction(center(Circle(C, D, E)), E) - direction(E, center(Circle(C, D, E))) mod 360
By collinear_definition on F, midpoint(E, F), E we get midpoint(E, F) in Line(E, F), E in Line(F, midpoint(E, F)), Line(E, F) == Line(F, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), F, E) mod 360
By collinear_definition on E, F, midpoint(E, F) we get F in Line(E, midpoint(E, F)), midpoint(E, F) in Line(E, F), Line(E, F) == Line(E, midpoint(E, F)), 0 == 2 * angle(F, E, midpoint(E, F)) mod 360
By perpendicular_lines_draw_intersection on f, Line(I, K) we get exists(line_intersection(f, Line(I, K)))
By reverse_direction on center(c), J we get 180 == direction(center(c), J) - direction(J, center(c)) mod 360
By collinear_definition on E, midpoint(E, F), F we get midpoint(E, F) in Line(E, F), F in Line(E, midpoint(E, F)), Line(E, F) == Line(E, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), E, F) mod 360
By internal_angle_bisector_definition_v0_r on B, D, B, center(Circle(B, D, E)) we get Line(D, center(Circle(B, D, E))) == internal_angle_bisector(B, center(Circle(B, D, E)), B)
By internal_angle_bisector_definition_v0_r on H, G, H, center(c) we get Line(G, center(c)) == internal_angle_bisector(H, center(c), H)
By reverse_direction on center(c), G we get 180 == direction(center(c), G) - direction(G, center(c)) mod 360
By internal_angle_bisector_definition_v0_r on G, H, G, center(c) we get Line(H, center(c)) == internal_angle_bisector(G, center(c), G)
By reverse_direction on center(Circle(B, D, E)), E we get 180 == direction(center(Circle(B, D, E)), E) - direction(E, center(Circle(B, D, E))) mod 360
By log_of_2_times_distance on F, E, F, midpoint(E, F) we get log(distance(E, F)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(F, midpoint(E, F)))
By reverse_direction on center(Circle(B, D, E)), B we get 180 == direction(center(Circle(B, D, E)), B) - direction(B, center(Circle(B, D, E))) mod 360
By reverse_direction on center(Circle(A, D, F)), D we get 180 == direction(center(Circle(A, D, F)), D) - direction(D, center(Circle(A, D, F))) mod 360
By internal_angle_bisector_definition_v0_r on D, B, D, center(Circle(B, D, E)) we get Line(B, center(Circle(B, D, E))) == internal_angle_bisector(D, center(Circle(B, D, E)), D)
By perpendicular_bisector_properties on E, F we get perpendicular(Line(E, F), perpendicular_bisector(E, F)), midpoint(E, F) == line_intersection(Line(E, F), perpendicular_bisector(E, F))
By perpendicular_lines_draw_intersection on Line(F, G), i we get exists(line_intersection(i, Line(F, G)))
By perpendicular_lines_draw_intersection on Line(C, D), Line(E, F) we get exists(line_intersection(Line(C, D), Line(E, F)))
By perpendicular_lines_draw_intersection on j, Line(E, G) we get exists(line_intersection(j, Line(E, G)))
By isosceles_triangle_properties on center(Circle(C, D, E)), E, D we get distance(D, center(Circle(C, D, E))) == distance(E, center(Circle(C, D, E))), angle(E, D, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), E, D) mod 360
By sas_anti_congruence on E, center(Circle(B, D, E)), D, D, center(Circle(B, D, E)), E we get anti_congruent_triangles(D, E, center(Circle(B, D, E)), E, D, center(Circle(B, D, E)))
By altitude_definition on H, G, A, Line(D, G) we get Line(D, G) == altitude(H, A, G)
By isosceles_triangle_properties on center(Circle(A, D, F)), A, F we get distance(A, center(Circle(A, D, F))) == distance(F, center(Circle(A, D, F))), angle(A, F, center(Circle(A, D, F))) == angle(center(Circle(A, D, F)), A, F) mod 360
By sas_anti_congruence on E, center(c), H, H, center(c), E we get anti_congruent_triangles(E, H, center(c), H, E, center(c))
By altitude_definition on D, G, E, j we get j == altitude(D, E, G)
By altitude_definition on F, D, A, Line(F, G) we get Line(F, G) == altitude(F, A, D)
By sas_anti_congruence on E, center(c), F, F, center(c), E we get anti_congruent_triangles(E, F, center(c), F, E, center(c))
By isosceles_triangle_properties on center(c), G, E we get distance(E, center(c)) == distance(G, center(c)), angle(G, E, center(c)) == angle(center(c), G, E) mod 360
By isosceles_triangle_properties on center(Circle(C, D, E)), F, D we get distance(D, center(Circle(C, D, E))) == distance(F, center(Circle(C, D, E))), angle(F, D, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), F, D) mod 360
By isosceles_triangle_properties on center(Circle(B, D, E)), E, D we get distance(D, center(Circle(B, D, E))) == distance(E, center(Circle(B, D, E))), angle(E, D, center(Circle(B, D, E))) == angle(center(Circle(B, D, E)), E, D) mod 360
By sas_anti_congruence on G, center(c), J, J, center(c), G we get anti_congruent_triangles(G, J, center(c), J, G, center(c))
By altitude_definition on B, K, I, f we get f == altitude(B, I, K)
By isosceles_triangle_properties on center(Circle(C, D, E)), E, F we get distance(E, center(Circle(C, D, E))) == distance(F, center(Circle(C, D, E))), angle(E, F, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), E, F) mod 360
By altitude_definition on G, I, K, f we get f == altitude(G, I, K)
By isosceles_triangle_properties on center(c), F, J we get distance(F, center(c)) == distance(J, center(c)), angle(F, J, center(c)) == angle(center(c), F, J) mod 360
By isosceles_triangle_properties on center(Circle(A, D, F)), F, G we get distance(F, center(Circle(A, D, F))) == distance(G, center(Circle(A, D, F))), angle(F, G, center(Circle(A, D, F))) == angle(center(Circle(A, D, F)), F, G) mod 360
By sas_anti_congruence on F, center(Circle(A, D, F)), G, G, center(Circle(A, D, F)), F we get anti_congruent_triangles(F, G, center(Circle(A, D, F)), G, F, center(Circle(A, D, F)))
By altitude_definition on H, G, I, Line(H, J) we get Line(H, J) == altitude(H, G, I)
By isosceles_triangle_properties on center(c), H, J we get distance(H, center(c)) == distance(J, center(c)), angle(H, J, center(c)) == angle(center(c), H, J) mod 360
By altitude_definition on G, A, D, Line(F, G) we get Line(F, G) == altitude(G, A, D)
By altitude_definition on H, B, A, Line(D, G) we get Line(D, G) == altitude(H, A, B)
By sas_anti_congruence on G, center(Circle(B, D, E)), E, E, center(Circle(B, D, E)), G we get anti_congruent_triangles(E, G, center(Circle(B, D, E)), G, E, center(Circle(B, D, E)))
By altitude_definition on I, H, J, l we get l == altitude(I, H, J)
By sas_anti_congruence on J, center(c), H, H, center(c), J we get anti_congruent_triangles(H, J, center(c), J, H, center(c))
By sas_anti_congruence on H, center(c), E, E, center(c), H we get anti_congruent_triangles(E, H, center(c), H, E, center(c))
By altitude_definition on E, D, B, Line(E, G) we get Line(E, G) == altitude(E, B, D)
By altitude_definition on G, J, H, l we get l == altitude(G, H, J)
By isosceles_triangle_properties on center(Circle(C, D, E)), C, E we get distance(C, center(Circle(C, D, E))) == distance(E, center(Circle(C, D, E))), angle(C, E, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, E) mod 360
By altitude_definition on B, G, E, j we get j == altitude(B, E, G)
By isosceles_triangle_properties on center(Circle(C, D, E)), D, F we get distance(D, center(Circle(C, D, E))) == distance(F, center(Circle(C, D, E))), angle(D, F, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), D, F) mod 360
By sas_anti_congruence on F, center(Circle(C, D, E)), E, E, center(Circle(C, D, E)), F we get anti_congruent_triangles(E, F, center(Circle(C, D, E)), F, E, center(Circle(C, D, E)))
By isosceles_triangle_properties on center(Circle(C, D, E)), F, C we get distance(C, center(Circle(C, D, E))) == distance(F, center(Circle(C, D, E))), angle(F, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), F, C) mod 360
By isosceles_triangle_properties on center(Circle(A, D, F)), G, D we get distance(D, center(Circle(A, D, F))) == distance(G, center(Circle(A, D, F))), angle(G, D, center(Circle(A, D, F))) == angle(center(Circle(A, D, F)), G, D) mod 360
By sas_anti_congruence on E, center(c), G, G, center(c), E we get anti_congruent_triangles(E, G, center(c), G, E, center(c))
By altitude_definition on D, E, F, Line(C, D) we get Line(C, D) == altitude(D, E, F)
By altitude_definition on G, E, H, Line(E, G) we get Line(E, G) == altitude(G, E, H)
By sas_anti_congruence on F, center(Circle(C, D, E)), C, C, center(Circle(C, D, E)), F we get anti_congruent_triangles(C, F, center(Circle(C, D, E)), F, C, center(Circle(C, D, E)))
By altitude_definition on H, C, I, Line(H, J) we get Line(H, J) == altitude(H, C, I)
By isosceles_triangle_properties on center(Circle(A, D, F)), G, A we get distance(A, center(Circle(A, D, F))) == distance(G, center(Circle(A, D, F))), angle(G, A, center(Circle(A, D, F))) == angle(center(Circle(A, D, F)), G, A) mod 360
By isosceles_triangle_properties on center(c), J, G we get distance(G, center(c)) == distance(J, center(c)), angle(J, G, center(c)) == angle(center(c), J, G) mod 360
By sas_anti_congruence on A, center(Circle(A, D, F)), F, F, center(Circle(A, D, F)), A we get anti_congruent_triangles(A, F, center(Circle(A, D, F)), F, A, center(Circle(A, D, F)))
By radical_axis_definition_v0 on H, Circle(A, D, F), Circle(B, D, E) we get power_of_a_point(H, Circle(A, D, F)) == power_of_a_point(H, Circle(B, D, E))
By isosceles_triangle_properties on center(Circle(B, D, E)), E, G we get distance(E, center(Circle(B, D, E))) == distance(G, center(Circle(B, D, E))), angle(E, G, center(Circle(B, D, E))) == angle(center(Circle(B, D, E)), E, G) mod 360
By sas_anti_congruence on E, center(Circle(C, D, E)), F, F, center(Circle(C, D, E)), E we get anti_congruent_triangles(E, F, center(Circle(C, D, E)), F, E, center(Circle(C, D, E)))
By altitude_definition on I, G, A, Line(I, K) we get Line(I, K) == altitude(I, A, G)
By altitude_definition on K, G, B, Line(I, K) we get Line(I, K) == altitude(K, B, G)
By altitude_definition on A, G, F, i we get i == altitude(A, F, G)
By altitude_definition on B, H, G, f we get f == altitude(B, G, H)
By isosceles_triangle_properties on center(Circle(B, D, E)), B, G we get distance(B, center(Circle(B, D, E))) == distance(G, center(Circle(B, D, E))), angle(B, G, center(Circle(B, D, E))) == angle(center(Circle(B, D, E)), B, G) mod 360
By isosceles_triangle_properties on center(Circle(A, D, F)), F, A we get distance(A, center(Circle(A, D, F))) == distance(F, center(Circle(A, D, F))), angle(F, A, center(Circle(A, D, F))) == angle(center(Circle(A, D, F)), F, A) mod 360
By altitude_definition on H, C, J, Line(H, J) we get Line(H, J) == altitude(H, C, J)
By isosceles_triangle_properties on center(c), J, F we get distance(F, center(c)) == distance(J, center(c)), angle(J, F, center(c)) == angle(center(c), J, F) mod 360
By sas_anti_congruence on D, center(Circle(A, D, F)), F, F, center(Circle(A, D, F)), D we get anti_congruent_triangles(D, F, center(Circle(A, D, F)), F, D, center(Circle(A, D, F)))
By altitude_definition on H, J, G, Line(H, J) we get Line(H, J) == altitude(H, G, J)
By altitude_definition on A, I, K, f we get f == altitude(A, I, K)
By collinear_definition on midpoint(E, F), E, F we get E in Line(F, midpoint(E, F)), F in Line(E, midpoint(E, F)), Line(E, midpoint(E, F)) == Line(F, midpoint(E, F)), 0 == 2 * angle(E, midpoint(E, F), F) mod 360
By sas_anti_congruence on E, center(Circle(B, D, E)), G, G, center(Circle(B, D, E)), E we get anti_congruent_triangles(E, G, center(Circle(B, D, E)), G, E, center(Circle(B, D, E)))
By isosceles_triangle_properties on center(Circle(B, D, E)), G, D we get distance(D, center(Circle(B, D, E))) == distance(G, center(Circle(B, D, E))), angle(G, D, center(Circle(B, D, E))) == angle(center(Circle(B, D, E)), G, D) mod 360
By isosceles_triangle_properties on center(Circle(B, D, E)), D, E we get distance(D, center(Circle(B, D, E))) == distance(E, center(Circle(B, D, E))), angle(D, E, center(Circle(B, D, E))) == angle(center(Circle(B, D, E)), D, E) mod 360
By isosceles_triangle_properties on center(c), F, G we get distance(F, center(c)) == distance(G, center(c)), angle(F, G, center(c)) == angle(center(c), F, G) mod 360
By isosceles_triangle_properties on center(Circle(A, D, F)), F, D we get distance(D, center(Circle(A, D, F))) == distance(F, center(Circle(A, D, F))), angle(F, D, center(Circle(A, D, F))) == angle(center(Circle(A, D, F)), F, D) mod 360
By isosceles_triangle_properties on center(Circle(B, D, E)), D, G we get distance(D, center(Circle(B, D, E))) == distance(G, center(Circle(B, D, E))), angle(D, G, center(Circle(B, D, E))) == angle(center(Circle(B, D, E)), D, G) mod 360
By altitude_definition on A, H, G, f we get f == altitude(A, G, H)
By altitude_definition on H, I, J, Line(H, J) we get Line(H, J) == altitude(H, I, J)
By altitude_definition on K, A, G, Line(I, K) we get Line(I, K) == altitude(K, A, G)
By isosceles_triangle_properties on center(Circle(A, D, F)), D, F we get distance(D, center(Circle(A, D, F))) == distance(F, center(Circle(A, D, F))), angle(D, F, center(Circle(A, D, F))) == angle(center(Circle(A, D, F)), D, F) mod 360
By sas_anti_congruence on G, center(Circle(B, D, E)), B, B, center(Circle(B, D, E)), G we get anti_congruent_triangles(B, G, center(Circle(B, D, E)), G, B, center(Circle(B, D, E)))
By sas_anti_congruence on G, center(Circle(B, D, E)), D, D, center(Circle(B, D, E)), G we get anti_congruent_triangles(D, G, center(Circle(B, D, E)), G, D, center(Circle(B, D, E)))
By altitude_definition on I, B, A, Line(I, K) we get Line(I, K) == altitude(I, A, B)
By sas_anti_congruence on G, center(c), E, E, center(c), G we get anti_congruent_triangles(E, G, center(c), G, E, center(c))
By isosceles_triangle_altitude_v3 on center(c), E, F we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, center(c), F), perpendicular_line(center(c), Line(E, F)))
By isosceles_triangle_properties on center(c), E, F we get distance(E, center(c)) == distance(F, center(c)), angle(E, F, center(c)) == angle(center(c), E, F) mod 360
By sas_anti_congruence on E, center(c), J, J, center(c), E we get anti_congruent_triangles(E, J, center(c), J, E, center(c))
By sas_anti_congruence on J, center(c), E, E, center(c), J we get anti_congruent_triangles(E, J, center(c), J, E, center(c))
By sas_anti_congruence on D, center(Circle(C, D, E)), E, E, center(Circle(C, D, E)), D we get anti_congruent_triangles(D, E, center(Circle(C, D, E)), E, D, center(Circle(C, D, E)))
By isosceles_triangle_properties on center(c), J, H we get distance(H, center(c)) == distance(J, center(c)), angle(J, H, center(c)) == angle(center(c), J, H) mod 360
By isosceles_triangle_properties on center(Circle(B, D, E)), B, E we get distance(B, center(Circle(B, D, E))) == distance(E, center(Circle(B, D, E))), angle(B, E, center(Circle(B, D, E))) == angle(center(Circle(B, D, E)), B, E) mod 360
By isosceles_triangle_properties on center(c), H, F we get distance(F, center(c)) == distance(H, center(c)), angle(H, F, center(c)) == angle(center(c), H, F) mod 360
By altitude_definition on C, H, J, l we get l == altitude(C, H, J)
By sas_anti_congruence on C, center(Circle(C, D, E)), E, E, center(Circle(C, D, E)), C we get anti_congruent_triangles(C, E, center(Circle(C, D, E)), E, C, center(Circle(C, D, E)))
By isosceles_triangle_properties on center(Circle(C, D, E)), E, C we get distance(C, center(Circle(C, D, E))) == distance(E, center(Circle(C, D, E))), angle(E, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), E, C) mod 360
By sas_anti_congruence on G, center(c), F, F, center(c), G we get anti_congruent_triangles(F, G, center(c), G, F, center(c))
By altitude_definition on H, C, G, Line(H, J) we get Line(H, J) == altitude(H, C, G)
By sas_anti_congruence on H, center(c), J, J, center(c), H we get anti_congruent_triangles(H, J, center(c), J, H, center(c))
By sas_anti_congruence on F, center(Circle(A, D, F)), D, D, center(Circle(A, D, F)), F we get anti_congruent_triangles(D, F, center(Circle(A, D, F)), F, D, center(Circle(A, D, F)))
By altitude_definition on D, F, G, i we get i == altitude(D, F, G)
By altitude_definition on F, D, C, Line(E, F) we get Line(E, F) == altitude(F, C, D)
By isosceles_triangle_properties on center(Circle(A, D, F)), A, G we get distance(A, center(Circle(A, D, F))) == distance(G, center(Circle(A, D, F))), angle(A, G, center(Circle(A, D, F))) == angle(center(Circle(A, D, F)), A, G) mod 360
By sas_anti_congruence on J, center(c), G, G, center(c), J we get anti_congruent_triangles(G, J, center(c), J, G, center(c))
By sas_anti_congruence on D, center(Circle(C, D, E)), F, F, center(Circle(C, D, E)), D we get anti_congruent_triangles(D, F, center(Circle(C, D, E)), F, D, center(Circle(C, D, E)))
By isosceles_triangle_properties on center(c), H, E we get distance(E, center(c)) == distance(H, center(c)), angle(H, E, center(c)) == angle(center(c), H, E) mod 360
By isosceles_triangle_properties on center(c), J, E we get distance(E, center(c)) == distance(J, center(c)), angle(J, E, center(c)) == angle(center(c), J, E) mod 360
By altitude_definition on H, G, B, Line(D, G) we get Line(D, G) == altitude(H, B, G)
By isosceles_triangle_properties on center(Circle(A, D, F)), D, G we get distance(D, center(Circle(A, D, F))) == distance(G, center(Circle(A, D, F))), angle(D, G, center(Circle(A, D, F))) == angle(center(Circle(A, D, F)), D, G) mod 360
By altitude_definition on H, G, E, k we get k == altitude(H, E, G)
By sas_anti_congruence on E, center(Circle(C, D, E)), C, C, center(Circle(C, D, E)), E we get anti_congruent_triangles(C, E, center(Circle(C, D, E)), E, C, center(Circle(C, D, E)))
By isosceles_triangle_properties on center(Circle(B, D, E)), G, B we get distance(B, center(Circle(B, D, E))) == distance(G, center(Circle(B, D, E))), angle(G, B, center(Circle(B, D, E))) == angle(center(Circle(B, D, E)), G, B) mod 360
By isosceles_triangle_properties on center(c), F, E we get distance(E, center(c)) == distance(F, center(c)), angle(F, E, center(c)) == angle(center(c), F, E) mod 360
By isosceles_triangle_properties on center(c), G, J we get distance(G, center(c)) == distance(J, center(c)), angle(G, J, center(c)) == angle(center(c), G, J) mod 360
By sas_anti_congruence on D, center(Circle(B, D, E)), E, E, center(Circle(B, D, E)), D we get anti_congruent_triangles(D, E, center(Circle(B, D, E)), E, D, center(Circle(B, D, E)))
By isosceles_triangle_properties on center(c), E, J we get distance(E, center(c)) == distance(J, center(c)), angle(E, J, center(c)) == angle(center(c), E, J) mod 360
By isosceles_triangle_properties on center(Circle(C, D, E)), F, E we get distance(E, center(Circle(C, D, E))) == distance(F, center(Circle(C, D, E))), angle(F, E, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), F, E) mod 360
By sas_anti_congruence on F, center(c), G, G, center(c), F we get anti_congruent_triangles(F, G, center(c), G, F, center(c))
By sas_anti_congruence on G, center(Circle(A, D, F)), A, A, center(Circle(A, D, F)), G we get anti_congruent_triangles(A, G, center(Circle(A, D, F)), G, A, center(Circle(A, D, F)))
By isosceles_triangle_properties on center(Circle(C, D, E)), C, F we get distance(C, center(Circle(C, D, E))) == distance(F, center(Circle(C, D, E))), angle(C, F, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, F) mod 360
By altitude_definition on E, D, C, Line(E, F) we get Line(E, F) == altitude(E, C, D)
By isosceles_triangle_properties on center(c), E, G we get distance(E, center(c)) == distance(G, center(c)), angle(E, G, center(c)) == angle(center(c), E, G) mod 360
By altitude_definition on I, G, B, Line(I, K) we get Line(I, K) == altitude(I, B, G)
By altitude_definition on G, F, H, Line(F, G) we get Line(F, G) == altitude(G, F, H)
By altitude_definition on G, D, B, Line(E, G) we get Line(E, G) == altitude(G, B, D)
By sas_anti_congruence on B, center(Circle(B, D, E)), E, E, center(Circle(B, D, E)), B we get anti_congruent_triangles(B, E, center(Circle(B, D, E)), E, B, center(Circle(B, D, E)))
By sas_anti_congruence on C, center(Circle(C, D, E)), F, F, center(Circle(C, D, E)), C we get anti_congruent_triangles(C, F, center(Circle(C, D, E)), F, C, center(Circle(C, D, E)))
By isosceles_triangle_properties on center(Circle(C, D, E)), D, E we get distance(D, center(Circle(C, D, E))) == distance(E, center(Circle(C, D, E))), angle(D, E, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), D, E) mod 360
By isosceles_triangle_properties on center(Circle(A, D, F)), G, F we get distance(F, center(Circle(A, D, F))) == distance(G, center(Circle(A, D, F))), angle(G, F, center(Circle(A, D, F))) == angle(center(Circle(A, D, F)), G, F) mod 360
By sas_anti_congruence on F, center(Circle(C, D, E)), D, D, center(Circle(C, D, E)), F we get anti_congruent_triangles(D, F, center(Circle(C, D, E)), F, D, center(Circle(C, D, E)))
By sas_anti_congruence on G, center(Circle(A, D, F)), F, F, center(Circle(A, D, F)), G we get anti_congruent_triangles(F, G, center(Circle(A, D, F)), G, F, center(Circle(A, D, F)))
By sas_anti_congruence on F, center(c), E, E, center(c), F we get anti_congruent_triangles(E, F, center(c), F, E, center(c))
By sas_anti_congruence on E, center(Circle(B, D, E)), B, B, center(Circle(B, D, E)), E we get anti_congruent_triangles(B, E, center(Circle(B, D, E)), E, B, center(Circle(B, D, E)))
By altitude_definition on K, A, B, Line(I, K) we get Line(I, K) == altitude(K, A, B)
By collinear_definition on midpoint(E, F), F, E we get F in Line(E, midpoint(E, F)), E in Line(F, midpoint(E, F)), Line(E, midpoint(E, F)) == Line(F, midpoint(E, F)), 0 == 2 * angle(F, midpoint(E, F), E) mod 360
By isosceles_triangle_properties on center(c), E, H we get distance(E, center(c)) == distance(H, center(c)), angle(E, H, center(c)) == angle(center(c), E, H) mod 360
By sas_anti_congruence on D, center(Circle(B, D, E)), G, G, center(Circle(B, D, E)), D we get anti_congruent_triangles(D, G, center(Circle(B, D, E)), G, D, center(Circle(B, D, E)))
By sas_anti_congruence on J, center(c), F, F, center(c), J we get anti_congruent_triangles(F, J, center(c), J, F, center(c))
By sas_anti_congruence on D, center(Circle(A, D, F)), G, G, center(Circle(A, D, F)), D we get anti_congruent_triangles(D, G, center(Circle(A, D, F)), G, D, center(Circle(A, D, F)))
By sas_anti_congruence on G, center(Circle(A, D, F)), D, D, center(Circle(A, D, F)), G we get anti_congruent_triangles(D, G, center(Circle(A, D, F)), G, D, center(Circle(A, D, F)))
By isosceles_triangle_properties on center(c), G, F we get distance(F, center(c)) == distance(G, center(c)), angle(G, F, center(c)) == angle(center(c), G, F) mod 360
By sas_anti_congruence on B, center(Circle(B, D, E)), G, G, center(Circle(B, D, E)), B we get anti_congruent_triangles(B, G, center(Circle(B, D, E)), G, B, center(Circle(B, D, E)))
By sas_anti_congruence on F, center(Circle(A, D, F)), A, A, center(Circle(A, D, F)), F we get anti_congruent_triangles(A, F, center(Circle(A, D, F)), F, A, center(Circle(A, D, F)))
By sas_anti_congruence on H, center(c), F, F, center(c), H we get anti_congruent_triangles(F, H, center(c), H, F, center(c))
By altitude_definition on H, F, G, Line(F, H) we get Line(F, H) == altitude(H, F, G)
By isosceles_triangle_properties on center(Circle(B, D, E)), E, B we get distance(B, center(Circle(B, D, E))) == distance(E, center(Circle(B, D, E))), angle(E, B, center(Circle(B, D, E))) == angle(center(Circle(B, D, E)), E, B) mod 360
By sas_anti_congruence on E, center(Circle(C, D, E)), D, D, center(Circle(C, D, E)), E we get anti_congruent_triangles(D, E, center(Circle(C, D, E)), E, D, center(Circle(C, D, E)))
By sas_anti_congruence on A, center(Circle(A, D, F)), G, G, center(Circle(A, D, F)), A we get anti_congruent_triangles(A, G, center(Circle(A, D, F)), G, A, center(Circle(A, D, F)))
By sas_anti_congruence on F, center(c), H, H, center(c), F we get anti_congruent_triangles(F, H, center(c), H, F, center(c))
By isosceles_triangle_properties on center(c), F, H we get distance(F, center(c)) == distance(H, center(c)), angle(F, H, center(c)) == angle(center(c), F, H) mod 360
By isosceles_triangle_properties on center(Circle(B, D, E)), G, E we get distance(E, center(Circle(B, D, E))) == distance(G, center(Circle(B, D, E))), angle(G, E, center(Circle(B, D, E))) == angle(center(Circle(B, D, E)), G, E) mod 360
By sas_anti_congruence on F, center(c), J, J, center(c), F we get anti_congruent_triangles(F, J, center(c), J, F, center(c))
By isosceles_triangle_altitude_v3 on center(Circle(C, D, E)), E, F we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, center(Circle(C, D, E)), F), perpendicular_line(center(Circle(C, D, E)), Line(E, F)))
By isosceles_triangle_altitude_v3 on center(Circle(C, D, E)), F, E we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, center(Circle(C, D, E)), F), perpendicular_line(center(Circle(C, D, E)), Line(E, F)))
By isosceles_triangle_altitude_v3 on center(c), F, E we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, center(c), F), perpendicular_line(center(c), Line(E, F)))
By right_triangle_circumcenter_v1 on H, J, C we get midpoint(C, H) == circumcenter(C, H, J)
By sas_congruence on E, center(Circle(B, D, E)), D, D, center(Circle(B, D, E)), G we get congruent_triangles(D, E, center(Circle(B, D, E)), G, D, center(Circle(B, D, E)))
By sas_anti_congruence on F, center(Circle(A, D, F)), A, G, center(Circle(A, D, F)), A we get anti_congruent_triangles(A, F, center(Circle(A, D, F)), A, G, center(Circle(A, D, F)))
By sas_congruence on A, center(Circle(A, D, F)), F, G, center(Circle(A, D, F)), A we get congruent_triangles(A, F, center(Circle(A, D, F)), G, A, center(Circle(A, D, F)))
By sas_anti_congruence on D, center(Circle(B, D, E)), G, D, center(Circle(B, D, E)), E we get anti_congruent_triangles(D, E, center(Circle(B, D, E)), D, G, center(Circle(B, D, E)))
By sas_anti_congruence on G, center(Circle(A, D, F)), A, F, center(Circle(A, D, F)), A we get anti_congruent_triangles(A, F, center(Circle(A, D, F)), A, G, center(Circle(A, D, F)))
By sas_anti_congruence on A, center(Circle(A, D, F)), F, A, center(Circle(A, D, F)), G we get anti_congruent_triangles(A, F, center(Circle(A, D, F)), A, G, center(Circle(A, D, F)))
By sas_anti_congruence on G, center(Circle(B, D, E)), B, E, center(Circle(B, D, E)), B we get anti_congruent_triangles(B, E, center(Circle(B, D, E)), B, G, center(Circle(B, D, E)))
By sas_anti_congruence on D, center(Circle(C, D, E)), E, D, center(Circle(C, D, E)), F we get anti_congruent_triangles(D, E, center(Circle(C, D, E)), D, F, center(Circle(C, D, E)))
By sas_congruence on E, center(Circle(B, D, E)), B, B, center(Circle(B, D, E)), G we get congruent_triangles(B, E, center(Circle(B, D, E)), G, B, center(Circle(B, D, E)))
By sas_anti_congruence on A, center(Circle(A, D, F)), G, A, center(Circle(A, D, F)), F we get anti_congruent_triangles(A, F, center(Circle(A, D, F)), A, G, center(Circle(A, D, F)))
By sas_congruence on C, center(Circle(C, D, E)), F, E, center(Circle(C, D, E)), C we get congruent_triangles(C, E, center(Circle(C, D, E)), F, C, center(Circle(C, D, E)))
By sas_congruence on D, center(Circle(C, D, E)), E, F, center(Circle(C, D, E)), D we get congruent_triangles(D, E, center(Circle(C, D, E)), F, D, center(Circle(C, D, E)))
By sas_anti_congruence on E, center(Circle(C, D, E)), D, F, center(Circle(C, D, E)), D we get anti_congruent_triangles(D, E, center(Circle(C, D, E)), D, F, center(Circle(C, D, E)))
By sas_anti_congruence on B, center(Circle(B, D, E)), G, B, center(Circle(B, D, E)), E we get anti_congruent_triangles(B, E, center(Circle(B, D, E)), B, G, center(Circle(B, D, E)))
By sas_congruence on D, center(Circle(A, D, F)), G, F, center(Circle(A, D, F)), D we get congruent_triangles(D, F, center(Circle(A, D, F)), G, D, center(Circle(A, D, F)))
By sas_congruence on D, center(Circle(B, D, E)), G, E, center(Circle(B, D, E)), D we get congruent_triangles(D, E, center(Circle(B, D, E)), G, D, center(Circle(B, D, E)))
By sas_congruence on G, center(Circle(A, D, F)), A, A, center(Circle(A, D, F)), F we get congruent_triangles(A, F, center(Circle(A, D, F)), G, A, center(Circle(A, D, F)))
By sas_congruence on B, center(Circle(B, D, E)), E, G, center(Circle(B, D, E)), B we get congruent_triangles(B, E, center(Circle(B, D, E)), G, B, center(Circle(B, D, E)))
By sas_congruence on E, center(Circle(C, D, E)), C, C, center(Circle(C, D, E)), F we get congruent_triangles(C, E, center(Circle(C, D, E)), F, C, center(Circle(C, D, E)))
By sas_congruence on F, center(Circle(A, D, F)), D, D, center(Circle(A, D, F)), G we get congruent_triangles(D, F, center(Circle(A, D, F)), G, D, center(Circle(A, D, F)))
By sas_congruence on D, center(Circle(B, D, E)), E, G, center(Circle(B, D, E)), D we get congruent_triangles(D, E, center(Circle(B, D, E)), G, D, center(Circle(B, D, E)))
By sas_anti_congruence on D, center(Circle(A, D, F)), G, D, center(Circle(A, D, F)), F we get anti_congruent_triangles(D, F, center(Circle(A, D, F)), D, G, center(Circle(A, D, F)))
By sas_anti_congruence on F, center(Circle(C, D, E)), D, E, center(Circle(C, D, E)), D we get anti_congruent_triangles(D, E, center(Circle(C, D, E)), D, F, center(Circle(C, D, E)))
By sas_anti_congruence on D, center(Circle(A, D, F)), F, D, center(Circle(A, D, F)), G we get anti_congruent_triangles(D, F, center(Circle(A, D, F)), D, G, center(Circle(A, D, F)))
By sas_anti_congruence on G, center(Circle(A, D, F)), D, F, center(Circle(A, D, F)), D we get anti_congruent_triangles(D, F, center(Circle(A, D, F)), D, G, center(Circle(A, D, F)))
By sas_anti_congruence on E, center(Circle(C, D, E)), C, F, center(Circle(C, D, E)), C we get anti_congruent_triangles(C, E, center(Circle(C, D, E)), C, F, center(Circle(C, D, E)))
By sas_congruence on G, center(Circle(A, D, F)), D, D, center(Circle(A, D, F)), F we get congruent_triangles(D, F, center(Circle(A, D, F)), G, D, center(Circle(A, D, F)))
By sas_congruence on C, center(Circle(C, D, E)), E, F, center(Circle(C, D, E)), C we get congruent_triangles(C, E, center(Circle(C, D, E)), F, C, center(Circle(C, D, E)))
By sas_anti_congruence on D, center(Circle(B, D, E)), E, D, center(Circle(B, D, E)), G we get anti_congruent_triangles(D, E, center(Circle(B, D, E)), D, G, center(Circle(B, D, E)))
By sas_congruence on G, center(Circle(B, D, E)), D, D, center(Circle(B, D, E)), E we get congruent_triangles(D, E, center(Circle(B, D, E)), G, D, center(Circle(B, D, E)))
By sas_congruence on D, center(Circle(A, D, F)), F, G, center(Circle(A, D, F)), D we get congruent_triangles(D, F, center(Circle(A, D, F)), G, D, center(Circle(A, D, F)))
By sas_anti_congruence on G, center(Circle(B, D, E)), D, E, center(Circle(B, D, E)), D we get anti_congruent_triangles(D, E, center(Circle(B, D, E)), D, G, center(Circle(B, D, E)))
By sas_anti_congruence on D, center(Circle(C, D, E)), F, D, center(Circle(C, D, E)), E we get anti_congruent_triangles(D, E, center(Circle(C, D, E)), D, F, center(Circle(C, D, E)))
By sas_congruence on A, center(Circle(A, D, F)), G, F, center(Circle(A, D, F)), A we get congruent_triangles(A, F, center(Circle(A, D, F)), G, A, center(Circle(A, D, F)))
By sas_congruence on B, center(Circle(B, D, E)), G, E, center(Circle(B, D, E)), B we get congruent_triangles(B, E, center(Circle(B, D, E)), G, B, center(Circle(B, D, E)))
By sas_anti_congruence on F, center(Circle(C, D, E)), C, E, center(Circle(C, D, E)), C we get anti_congruent_triangles(C, E, center(Circle(C, D, E)), C, F, center(Circle(C, D, E)))
By sas_anti_congruence on C, center(Circle(C, D, E)), E, C, center(Circle(C, D, E)), F we get anti_congruent_triangles(C, E, center(Circle(C, D, E)), C, F, center(Circle(C, D, E)))
By sas_anti_congruence on B, center(Circle(B, D, E)), E, B, center(Circle(B, D, E)), G we get anti_congruent_triangles(B, E, center(Circle(B, D, E)), B, G, center(Circle(B, D, E)))
By sas_anti_congruence on E, center(Circle(B, D, E)), B, G, center(Circle(B, D, E)), B we get anti_congruent_triangles(B, E, center(Circle(B, D, E)), B, G, center(Circle(B, D, E)))
By sas_anti_congruence on E, center(Circle(B, D, E)), D, G, center(Circle(B, D, E)), D we get anti_congruent_triangles(D, E, center(Circle(B, D, E)), D, G, center(Circle(B, D, E)))
By sas_anti_congruence on F, center(Circle(A, D, F)), D, G, center(Circle(A, D, F)), D we get anti_congruent_triangles(D, F, center(Circle(A, D, F)), D, G, center(Circle(A, D, F)))
By sas_congruence on E, center(Circle(C, D, E)), D, D, center(Circle(C, D, E)), F we get congruent_triangles(D, E, center(Circle(C, D, E)), F, D, center(Circle(C, D, E)))
By sas_anti_congruence on C, center(Circle(C, D, E)), F, C, center(Circle(C, D, E)), E we get anti_congruent_triangles(C, E, center(Circle(C, D, E)), C, F, center(Circle(C, D, E)))
By sas_congruence on F, center(Circle(C, D, E)), C, C, center(Circle(C, D, E)), E we get congruent_triangles(C, E, center(Circle(C, D, E)), F, C, center(Circle(C, D, E)))
By sas_congruence on D, center(Circle(C, D, E)), F, E, center(Circle(C, D, E)), D we get congruent_triangles(D, E, center(Circle(C, D, E)), F, D, center(Circle(C, D, E)))
By sas_congruence on F, center(Circle(C, D, E)), D, D, center(Circle(C, D, E)), E we get congruent_triangles(D, E, center(Circle(C, D, E)), F, D, center(Circle(C, D, E)))
By sas_congruence on G, center(Circle(B, D, E)), B, B, center(Circle(B, D, E)), E we get congruent_triangles(B, E, center(Circle(B, D, E)), G, B, center(Circle(B, D, E)))
By sas_congruence on F, center(Circle(A, D, F)), A, A, center(Circle(A, D, F)), G we get congruent_triangles(A, F, center(Circle(A, D, F)), G, A, center(Circle(A, D, F)))
By power_of_a_point_definition on midpoint(E, F), E, F, Circle(C, D, E) we get log(power_of_a_point(midpoint(E, F), Circle(C, D, E))) == log(distance(E, midpoint(E, F))) + log(distance(F, midpoint(E, F)))
By power_of_a_point_definition on midpoint(E, F), E, F, c we get log(power_of_a_point(midpoint(E, F), c)) == log(distance(E, midpoint(E, F))) + log(distance(F, midpoint(E, F)))
By between_implies_angles on F, midpoint(E, F), E we get 180 == angle(F, midpoint(E, F), E) mod 360, 0 == angle(midpoint(E, F), E, F) mod 360, 0 == angle(E, F, midpoint(E, F)) mod 360
By between_implies_angles on E, midpoint(E, F), F we get 180 == angle(E, midpoint(E, F), F) mod 360, 0 == angle(midpoint(E, F), F, E) mod 360, 0 == angle(F, E, midpoint(E, F)) mod 360
By concurrent_sufficient_conditions on Line(C, H), k, Line(H, center(c)) we get concurrent(k, Line(C, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(D, G), i we get concurrent(i, Line(D, G), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(E, J), Line(E, center(Circle(B, D, E))) we get concurrent(Line(E, G), Line(E, J), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, center(Circle(A, D, F))), Line(F, G) we get concurrent(Line(F, G), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(C, D, E))), Line(E, G) we get concurrent(Line(E, F), Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), f, Line(G, center(c)) we get concurrent(f, Line(G, center(c)), Line(G, center(Circle(B, D, E))))
By line_definition on D, line_intersection(i, Line(F, G)), i we get i == Line(D, line_intersection(i, Line(F, G)))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(G, center(Circle(B, D, E))), Line(E, center(Circle(B, D, E))) we get concurrent(Line(B, center(Circle(B, D, E))), Line(E, center(Circle(B, D, E))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on f, l, Line(G, center(c)) we get concurrent(f, l, Line(G, center(c)))
By concurrent_sufficient_conditions on Line(D, G), Line(A, center(Circle(A, D, F))), Line(C, D) we get concurrent(Line(C, D), Line(D, G), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on f, Line(G, center(Circle(A, D, F))), Line(F, G) we get concurrent(f, Line(F, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, F), k we get concurrent(k, Line(E, F), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on g, Line(B, center(Circle(B, D, E))), f we get concurrent(f, g, Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(E, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, F), Line(E, center(c)) we get concurrent(Line(E, F), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(E, center(c)), Line(E, G) we get concurrent(g, Line(E, G), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(H, center(c)), k we get concurrent(k, Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, F), Line(C, D), Line(A, center(Circle(A, D, F))) we get concurrent(Line(C, D), Line(D, F), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on j, Line(A, center(Circle(A, D, F))), Line(D, F) we get concurrent(j, Line(D, F), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(c)), l, Line(F, G) we get concurrent(l, Line(F, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(J, center(c)), Line(H, J), l we get concurrent(l, Line(H, J), Line(J, center(c)))
By concurrent_sufficient_conditions on k, Line(E, center(Circle(C, D, E))), Line(E, center(Circle(B, D, E))) we get concurrent(k, Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(F, center(c)), Line(F, G) we get concurrent(h, Line(F, G), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, F), k we get concurrent(k, Line(E, F), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), l, Line(F, G) we get concurrent(l, Line(F, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, E), Line(C, D), Line(A, center(Circle(A, D, F))) we get concurrent(Line(C, D), Line(D, E), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), k, Line(E, center(c)) we get concurrent(k, Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, center(Circle(B, D, E))), Line(E, G) we get concurrent(Line(E, G), Line(E, center(c)), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), h, Line(F, center(Circle(A, D, F))) we get concurrent(h, Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), Line(G, center(c)), Line(E, G) we get concurrent(Line(E, G), Line(G, center(c)), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on k, Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))) we get concurrent(k, Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(D, E), Line(B, center(Circle(B, D, E))) we get concurrent(Line(D, E), Line(A, center(Circle(A, D, F))), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(A, D, F))), Line(F, J) we get concurrent(Line(D, F), Line(F, J), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(C, D, E))), Line(F, G) we get concurrent(Line(E, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(F, G), Line(G, center(Circle(A, D, F))) we get concurrent(Line(E, G), Line(F, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(c)), Line(E, F) we get concurrent(Line(E, F), Line(F, J), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, H), Line(F, center(Circle(A, D, F))) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), Line(G, center(c)), l we get concurrent(l, Line(G, center(c)), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(E, center(Circle(B, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(D, E), Line(E, G) we get concurrent(Line(D, E), Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(Circle(C, D, E))), Line(D, F) we get concurrent(Line(D, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By line_definition on line_intersection(f, Line(I, K)), G, f we get f == Line(G, line_intersection(f, Line(I, K)))
By concurrent_sufficient_conditions on f, l, Line(G, center(Circle(B, D, E))) we get concurrent(f, l, Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), k, Line(D, E) we get concurrent(k, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(A, D, F))), h we get concurrent(h, Line(E, F), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), Line(B, center(Circle(B, D, E))), Line(E, center(Circle(B, D, E))) we get concurrent(Line(B, center(Circle(B, D, E))), Line(E, center(Circle(B, D, E))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(Circle(A, D, F))), Line(F, H) we get concurrent(Line(F, G), Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on f, Line(G, center(c)), Line(G, center(Circle(A, D, F))) we get concurrent(f, Line(G, center(c)), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, G), Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))) we get concurrent(Line(D, G), Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, G), Line(D, E) we get concurrent(Line(D, E), Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on l, Line(G, center(Circle(B, D, E))), Line(E, G) we get concurrent(l, Line(E, G), Line(G, center(Circle(B, D, E))))
By line_definition on C, center(c), Line(C, D) we get Line(C, D) == Line(C, center(c))
By concurrent_sufficient_conditions on g, Line(D, E), Line(E, center(Circle(C, D, E))) we get concurrent(g, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(A, center(Circle(A, D, F))), Line(G, center(Circle(A, D, F))) we get concurrent(Line(A, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, G), l, Line(G, center(Circle(A, D, F))) we get concurrent(l, Line(E, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, J), Line(J, center(c)), l we get concurrent(l, Line(F, J), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), Line(F, G), Line(G, center(c)) we get concurrent(Line(F, G), Line(G, center(c)), Line(G, center(Circle(A, D, F))))
By line_definition on line_intersection(i, Line(F, G)), A, i we get i == Line(A, line_intersection(i, Line(F, G)))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(Circle(A, D, F))), Line(F, H) we get concurrent(Line(F, H), Line(F, J), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, F), Line(B, center(Circle(B, D, E))), Line(C, D) we get concurrent(Line(C, D), Line(D, F), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(Circle(A, D, F))), Line(F, G) we get concurrent(Line(F, G), Line(F, J), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, center(Circle(A, D, F))), Line(D, F) we get concurrent(Line(D, F), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, J), Line(E, center(c)) we get concurrent(Line(E, F), Line(E, J), Line(E, center(c)))
By concurrent_sufficient_conditions on h, Line(F, center(Circle(A, D, F))), Line(E, F) we get concurrent(h, Line(E, F), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on k, Line(E, center(Circle(C, D, E))), Line(E, G) we get concurrent(k, Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, center(Circle(C, D, E))), k we get concurrent(k, Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By line_definition on line_intersection(f, Line(I, K)), A, f we get f == Line(A, line_intersection(f, Line(I, K)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, center(Circle(B, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(H, J), Line(F, J), Line(J, center(c)) we get concurrent(Line(F, J), Line(H, J), Line(J, center(c)))
By concurrent_sufficient_conditions on h, Line(F, H), Line(F, center(Circle(A, D, F))) we get concurrent(h, Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on l, Line(G, center(Circle(B, D, E))), f we get concurrent(f, l, Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(B, center(Circle(B, D, E))), Line(C, D) we get concurrent(Line(C, D), Line(A, center(Circle(A, D, F))), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), f, Line(F, G) we get concurrent(f, Line(F, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on g, Line(E, center(Circle(C, D, E))), Line(E, F) we get concurrent(g, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), l, Line(G, center(c)) we get concurrent(l, Line(G, center(c)), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, E), Line(B, center(Circle(B, D, E))), i we get concurrent(i, Line(D, E), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(A, D, F))), h we get concurrent(h, Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(F, H), Line(F, J) we get concurrent(Line(F, H), Line(F, J), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(Circle(C, D, E))), Line(F, center(c)) we get concurrent(Line(F, J), Line(F, center(c)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), f, Line(G, center(c)) we get concurrent(f, Line(G, center(c)), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), Line(E, G), Line(G, center(Circle(B, D, E))) we get concurrent(Line(E, G), Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(F, H), h we get concurrent(h, Line(F, H), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, J), Line(E, center(Circle(B, D, E))) we get concurrent(Line(E, J), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, G), Line(E, center(c)) we get concurrent(Line(E, G), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), k, Line(E, F) we get concurrent(k, Line(E, F), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, J), Line(F, H) we get concurrent(Line(F, H), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, J), Line(J, center(c)), Line(F, J) we get concurrent(Line(E, J), Line(F, J), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(F, J), Line(H, J), Line(J, center(c)) we get concurrent(Line(F, J), Line(H, J), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(F, J), Line(F, H), Line(F, center(c)) we get concurrent(Line(F, H), Line(F, J), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, center(c)), Line(E, J) we get concurrent(Line(E, J), Line(E, center(c)), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, J), l, Line(J, center(c)) we get concurrent(l, Line(F, J), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(A, center(Circle(A, D, F))), Line(C, D) we get concurrent(Line(C, D), Line(A, center(Circle(A, D, F))), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(E, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), Line(F, center(Circle(A, D, F))) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), f, Line(D, G) we get concurrent(f, Line(D, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(F, G), Line(F, center(Circle(A, D, F))) we get concurrent(Line(F, G), Line(F, center(c)), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(A, center(Circle(A, D, F))), Line(D, F) we get concurrent(Line(D, F), Line(A, center(Circle(A, D, F))), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(E, center(Circle(C, D, E))), Line(E, center(c)) we get concurrent(Line(E, G), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(B, center(Circle(B, D, E))), Line(D, G) we get concurrent(i, Line(D, G), Line(B, center(Circle(B, D, E))))
By median_definition on center(c), F, E, Line(C, D) we get Line(C, D) == median(center(c), E, F)
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(C, D), Line(D, G) we get concurrent(Line(C, D), Line(D, G), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, J), Line(F, G) we get concurrent(Line(F, G), Line(F, J), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, J), Line(D, E) we get concurrent(Line(D, E), Line(E, J), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(c)), Line(E, G) we get concurrent(Line(E, F), Line(E, G), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(C, D), Line(A, center(Circle(A, D, F))), Line(D, E) we get concurrent(Line(C, D), Line(D, E), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, J), Line(F, center(Circle(A, D, F))) we get concurrent(Line(F, J), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(E, G), Line(G, center(c)) we get concurrent(f, Line(E, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, center(c)), Line(F, H) we get concurrent(Line(F, H), Line(F, center(c)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(F, center(c)), Line(F, H) we get concurrent(h, Line(F, H), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(F, G), h, Line(F, center(Circle(A, D, F))) we get concurrent(h, Line(F, G), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(E, center(c)), Line(J, center(c)) we get concurrent(Line(E, center(c)), Line(H, center(c)), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(D, E), Line(B, center(Circle(B, D, E))), Line(D, G) we get concurrent(Line(D, E), Line(D, G), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on f, Line(D, G), Line(G, center(Circle(B, D, E))) we get concurrent(f, Line(D, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), Line(E, G), l we get concurrent(l, Line(E, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on h, Line(F, H), Line(F, center(c)) we get concurrent(h, Line(F, H), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(E, F), g, Line(E, center(Circle(B, D, E))) we get concurrent(g, Line(E, F), Line(E, center(Circle(B, D, E))))
By median_definition on center(Circle(C, D, E)), F, E, Line(C, D) we get Line(C, D) == median(center(Circle(C, D, E)), E, F)
By concurrent_sufficient_conditions on Line(G, center(c)), Line(G, center(Circle(B, D, E))), Line(E, G) we get concurrent(Line(E, G), Line(G, center(c)), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(G, center(Circle(B, D, E))), Line(F, G) we get concurrent(Line(E, G), Line(F, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(F, G), Line(F, J) we get concurrent(Line(F, G), Line(F, J), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(E, G), Line(E, center(Circle(B, D, E))) we get concurrent(Line(E, F), Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(E, center(c)), k we get concurrent(k, Line(E, G), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(E, F), Line(F, center(Circle(A, D, F))) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, J), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, J), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, D), Line(D, G), Line(B, center(Circle(B, D, E))) we get concurrent(Line(C, D), Line(D, G), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(H, J), k we get concurrent(k, Line(H, J), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(J, center(c)), Line(F, J), Line(H, J) we get concurrent(Line(F, J), Line(H, J), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(E, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(F, center(c)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(E, G), Line(G, center(Circle(B, D, E))) we get concurrent(f, Line(E, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, J), h, Line(F, center(c)) we get concurrent(h, Line(F, J), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(E, G), g, Line(E, center(c)) we get concurrent(g, Line(E, G), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, center(c)), k, Line(E, F) we get concurrent(k, Line(E, F), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(D, F), Line(F, H) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))), Line(E, center(c)) we get concurrent(Line(E, center(c)), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), Line(F, center(Circle(A, D, F))) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(C, D), j, Line(A, center(Circle(A, D, F))) we get concurrent(j, Line(C, D), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on f, Line(G, center(Circle(B, D, E))), Line(D, G) we get concurrent(f, Line(D, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on g, Line(E, J), Line(E, center(Circle(B, D, E))) we get concurrent(g, Line(E, J), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, H), Line(D, F) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(J, center(c)), Line(H, center(c)), Line(E, center(c)) we get concurrent(Line(E, center(c)), Line(H, center(c)), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), k, Line(E, G) we get concurrent(k, Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, J), Line(H, J), Line(J, center(c)) we get concurrent(Line(E, J), Line(H, J), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, center(c)), Line(E, G) we get concurrent(Line(E, G), Line(E, center(c)), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(E, center(Circle(B, D, E))), k we get concurrent(k, Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(C, D), Line(D, F), Line(A, center(Circle(A, D, F))) we get concurrent(Line(C, D), Line(D, F), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), k, Line(E, center(c)) we get concurrent(k, Line(E, center(c)), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(c)), g we get concurrent(g, Line(E, F), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), g, Line(E, center(c)) we get concurrent(g, Line(E, center(c)), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, G), Line(E, F) we get concurrent(Line(E, F), Line(F, G), Line(F, center(Circle(A, D, F))))
By line_definition on B, line_intersection(f, Line(I, K)), f we get f == Line(B, line_intersection(f, Line(I, K)))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(B, center(Circle(B, D, E))), Line(D, F) we get concurrent(Line(D, F), Line(A, center(Circle(A, D, F))), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), Line(E, center(Circle(B, D, E))) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(C, D), Line(D, E) we get concurrent(Line(C, D), Line(D, E), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, J), Line(F, center(c)) we get concurrent(Line(F, H), Line(F, J), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(D, E), Line(A, center(Circle(A, D, F))), Line(D, F) we get concurrent(Line(D, E), Line(D, F), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(H, center(c)), Line(J, center(c)) we get concurrent(Line(E, center(c)), Line(H, center(c)), Line(J, center(c)))
By concurrent_sufficient_conditions on k, Line(E, center(Circle(C, D, E))), Line(E, center(c)) we get concurrent(k, Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(G, center(Circle(A, D, F))), Line(F, G) we get concurrent(Line(F, G), Line(G, center(c)), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on f, Line(G, center(Circle(A, D, F))), Line(D, G) we get concurrent(f, Line(D, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on f, Line(G, center(Circle(B, D, E))), Line(E, G) we get concurrent(f, Line(E, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, G), Line(E, center(Circle(B, D, E))) we get concurrent(Line(E, G), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, H), Line(F, J) we get concurrent(Line(F, H), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(B, D, E))), Line(E, G) we get concurrent(Line(E, F), Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on i, Line(B, center(Circle(B, D, E))), Line(C, D) we get concurrent(i, Line(C, D), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, G), k we get concurrent(k, Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on l, Line(F, J), Line(J, center(c)) we get concurrent(l, Line(F, J), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, J), Line(E, G) we get concurrent(Line(E, G), Line(E, J), Line(E, center(c)))
By line_definition on center(c), center(Circle(C, D, E)), Line(C, D) we get Line(C, D) == Line(center(c), center(Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(C, D), Line(B, center(Circle(B, D, E))), Line(D, F) we get concurrent(Line(C, D), Line(D, F), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), Line(D, G), Line(E, G) we get concurrent(Line(D, G), Line(E, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), f, Line(G, center(Circle(A, D, F))) we get concurrent(f, Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on l, Line(F, G), Line(G, center(c)) we get concurrent(l, Line(F, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(E, G), Line(E, center(Circle(C, D, E))), k we get concurrent(k, Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, J), Line(D, E), Line(E, center(Circle(B, D, E))) we get concurrent(Line(D, E), Line(E, J), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(J, center(c)), Line(F, J), l we get concurrent(l, Line(F, J), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(E, center(c)), k, Line(E, J) we get concurrent(k, Line(E, J), Line(E, center(c)))
By concurrent_sufficient_conditions on f, Line(G, center(Circle(A, D, F))), Line(G, center(c)) we get concurrent(f, Line(G, center(c)), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, J), g we get concurrent(g, Line(E, J), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(C, D), Line(B, center(Circle(B, D, E))) we get concurrent(i, Line(C, D), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), Line(D, G), f we get concurrent(f, Line(D, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on g, Line(E, G), Line(E, center(Circle(C, D, E))) we get concurrent(g, Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(F, H), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, H), Line(F, center(c)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(E, center(Circle(C, D, E))), Line(E, center(Circle(B, D, E))) we get concurrent(Line(E, G), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, G), k we get concurrent(k, Line(E, G), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, center(Circle(B, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(E, center(c)), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, G), l, Line(G, center(Circle(A, D, F))) we get concurrent(l, Line(F, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on l, Line(G, center(Circle(B, D, E))), Line(F, G) we get concurrent(l, Line(F, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on k, Line(E, center(Circle(B, D, E))), Line(E, F) we get concurrent(k, Line(E, F), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, center(Circle(A, D, F))), Line(E, F) we get concurrent(Line(E, F), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, J), Line(F, H) we get concurrent(Line(F, H), Line(F, J), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(F, center(c)), Line(J, center(c)) we get concurrent(Line(F, center(c)), Line(G, center(c)), Line(J, center(c)))
By concurrent_sufficient_conditions on l, Line(G, center(Circle(A, D, F))), Line(F, G) we get concurrent(l, Line(F, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), l, f we get concurrent(f, l, Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(Circle(C, D, E))), h we get concurrent(h, Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(C, H), k we get concurrent(k, Line(C, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(G, center(c)), f, Line(G, center(Circle(A, D, F))) we get concurrent(f, Line(G, center(c)), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(C, D), Line(D, F), Line(B, center(Circle(B, D, E))) we get concurrent(Line(C, D), Line(D, F), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, H), Line(F, center(Circle(A, D, F))) we get concurrent(Line(F, H), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), j, Line(C, D) we get concurrent(j, Line(C, D), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(C, D), Line(B, center(Circle(B, D, E))), i we get concurrent(i, Line(C, D), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(c)), Line(E, center(Circle(B, D, E))) we get concurrent(Line(E, F), Line(E, center(c)), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(Circle(A, D, F))), Line(E, F) we get concurrent(Line(E, F), Line(F, G), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, H), Line(F, G) we get concurrent(Line(F, G), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(H, J), Line(H, center(c)), k we get concurrent(k, Line(H, J), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(F, center(Circle(C, D, E))), Line(F, H) we get concurrent(Line(F, H), Line(F, center(c)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), h, Line(F, J) we get concurrent(h, Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, J), Line(D, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, H), Line(F, G) we get concurrent(Line(F, G), Line(F, H), Line(F, center(Circle(A, D, F))))
By line_definition on midpoint(E, F), center(Circle(C, D, E)), Line(C, D) we get Line(C, D) == Line(midpoint(E, F), center(Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(C, D), Line(D, E), Line(B, center(Circle(B, D, E))) we get concurrent(Line(C, D), Line(D, E), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(D, F), Line(F, G) we get concurrent(Line(D, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(H, J), Line(C, H), Line(H, center(c)) we get concurrent(Line(C, H), Line(H, J), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(C, H), Line(F, H) we get concurrent(Line(C, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(B, D, E))), g we get concurrent(g, Line(D, E), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, G), l, Line(G, center(Circle(B, D, E))) we get concurrent(l, Line(E, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(G, center(c)), f, Line(G, center(Circle(B, D, E))) we get concurrent(f, Line(G, center(c)), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, J), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(C, D, E))), Line(E, J) we get concurrent(Line(E, F), Line(E, J), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(c)), h, Line(F, G) we get concurrent(h, Line(F, G), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(E, F), Line(F, H) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on h, Line(F, J), Line(F, center(Circle(A, D, F))) we get concurrent(h, Line(F, J), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(Circle(A, D, F))), Line(D, G) we get concurrent(Line(D, G), Line(F, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, F), g, Line(E, center(Circle(C, D, E))) we get concurrent(g, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on l, f, Line(G, center(c)) we get concurrent(f, l, Line(G, center(c)))
By line_definition on D, line_intersection(j, Line(E, G)), j we get j == Line(D, line_intersection(j, Line(E, G)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(C, D), Line(E, center(Circle(C, D, E))) we get concurrent(Line(C, D), Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), Line(D, G), Line(F, G) we get concurrent(Line(D, G), Line(F, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(c)), Line(F, center(Circle(A, D, F))) we get concurrent(Line(F, G), Line(F, center(c)), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))), l we get concurrent(l, Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(J, center(c)), Line(E, center(c)) we get concurrent(Line(E, center(c)), Line(F, center(c)), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(F, J), h, Line(F, center(Circle(A, D, F))) we get concurrent(h, Line(F, J), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), Line(D, G), l we get concurrent(l, Line(D, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(F, H), k we get concurrent(k, Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on h, Line(F, center(Circle(A, D, F))), Line(F, H) we get concurrent(h, Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(A, D, F))), Line(F, G) we get concurrent(Line(D, F), Line(F, G), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), Line(E, G), Line(G, center(c)) we get concurrent(Line(E, G), Line(G, center(c)), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(F, G), Line(E, G) we get concurrent(Line(E, G), Line(F, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(J, center(c)), Line(F, center(c)), Line(E, center(c)) we get concurrent(Line(E, center(c)), Line(F, center(c)), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(C, D, E))), h we get concurrent(h, Line(D, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))) we get concurrent(Line(E, G), Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, J), Line(E, F), Line(F, center(Circle(A, D, F))) we get concurrent(Line(E, F), Line(F, J), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), h, Line(E, F) we get concurrent(h, Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(F, center(Circle(C, D, E))), Line(F, center(Circle(A, D, F))) we get concurrent(Line(F, center(c)), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(A, center(Circle(A, D, F))), Line(D, G) we get concurrent(Line(D, F), Line(D, G), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, G), Line(G, center(Circle(B, D, E))), Line(G, center(Circle(A, D, F))) we get concurrent(Line(D, G), Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(C, D, E))), Line(F, center(Circle(A, D, F))) we get concurrent(Line(F, H), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, G), i, Line(B, center(Circle(B, D, E))) we get concurrent(i, Line(D, G), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on k, Line(E, F), Line(E, center(Circle(C, D, E))) we get concurrent(k, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), Line(F, G), Line(G, center(Circle(B, D, E))) we get concurrent(Line(F, G), Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, G), Line(B, center(Circle(B, D, E))), Line(D, F) we get concurrent(Line(D, F), Line(D, G), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, G), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(c)), h, Line(F, H) we get concurrent(h, Line(F, H), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), k, g we get concurrent(g, k, Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, H), h we get concurrent(h, Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(D, G), Line(D, E) we get concurrent(Line(D, E), Line(D, G), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(c)), Line(G, center(Circle(A, D, F))) we get concurrent(Line(F, G), Line(G, center(c)), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, H), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, G), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, F), Line(E, G) we get concurrent(Line(E, F), Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, center(c)), h we get concurrent(h, Line(F, center(c)), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(E, F), Line(F, center(c)) we get concurrent(Line(E, F), Line(F, center(c)), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(E, center(c)), Line(G, center(c)) we get concurrent(Line(E, center(c)), Line(F, center(c)), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(E, G), Line(G, center(Circle(A, D, F))), Line(G, center(c)) we get concurrent(Line(E, G), Line(G, center(c)), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on h, Line(F, center(Circle(A, D, F))), Line(F, J) we get concurrent(h, Line(F, J), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, G), Line(F, G), Line(G, center(Circle(B, D, E))) we get concurrent(Line(E, G), Line(F, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(J, center(c)), Line(F, center(c)) we get concurrent(Line(E, center(c)), Line(F, center(c)), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, F), g we get concurrent(g, Line(E, F), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, center(c)), Line(F, G) we get concurrent(Line(F, G), Line(F, center(c)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(G, center(c)), Line(J, center(c)) we get concurrent(Line(F, center(c)), Line(G, center(c)), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), h, Line(D, F) we get concurrent(h, Line(D, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(c)), Line(F, J) we get concurrent(Line(F, G), Line(F, J), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(c)), Line(F, G) we get concurrent(Line(F, G), Line(F, J), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(F, G), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, G), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, H), Line(H, center(c)), k we get concurrent(k, Line(C, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, G), Line(F, J) we get concurrent(Line(F, G), Line(F, J), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, center(Circle(B, D, E))), g we get concurrent(g, Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(C, D, E))), k we get concurrent(k, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, Line(F, H), Line(H, center(c)) we get concurrent(k, Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(C, D), Line(D, E) we get concurrent(Line(C, D), Line(D, E), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, J), Line(E, G), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, G), Line(E, J), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(G, center(c)), Line(G, center(Circle(A, D, F))) we get concurrent(Line(E, G), Line(G, center(c)), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(C, D), Line(A, center(Circle(A, D, F))), Line(D, G) we get concurrent(Line(C, D), Line(D, G), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(D, E), Line(E, G) we get concurrent(Line(D, E), Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, H), Line(E, F) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), l, Line(G, center(Circle(B, D, E))) we get concurrent(l, Line(F, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(D, E), i we get concurrent(i, Line(D, E), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(D, F), Line(D, G) we get concurrent(Line(D, F), Line(D, G), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(H, center(c)), k, Line(F, H) we get concurrent(k, Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on h, Line(D, F), Line(F, center(Circle(A, D, F))) we get concurrent(h, Line(D, F), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(D, F), Line(F, center(Circle(A, D, F))) we get concurrent(Line(D, F), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(c)), Line(F, G) we get concurrent(Line(F, G), Line(F, H), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(Circle(A, D, F))), Line(F, center(c)) we get concurrent(Line(F, G), Line(F, center(c)), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, J), Line(J, center(c)), Line(E, J) we get concurrent(Line(E, J), Line(F, J), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(G, center(c)), Line(E, center(c)) we get concurrent(Line(E, center(c)), Line(F, center(c)), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(A, D, F))), Line(E, F) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, J), Line(E, F), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(E, J), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(E, center(Circle(B, D, E))), g we get concurrent(g, Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, J), Line(E, F) we get concurrent(Line(E, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(C, D, E))), Line(F, center(c)) we get concurrent(Line(E, F), Line(F, center(c)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(F, G), Line(E, F) we get concurrent(Line(E, F), Line(F, G), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, center(c)), Line(E, F) we get concurrent(Line(E, F), Line(F, center(c)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(c)), h we get concurrent(h, Line(F, H), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, G), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, G), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(c)), h, Line(F, center(Circle(C, D, E))) we get concurrent(h, Line(F, center(c)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(D, G), Line(B, center(Circle(B, D, E))) we get concurrent(Line(D, G), Line(A, center(Circle(A, D, F))), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(D, E), k we get concurrent(k, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), g, Line(E, center(Circle(C, D, E))) we get concurrent(g, Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(D, G), Line(D, E) we get concurrent(Line(D, E), Line(D, G), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(C, D), Line(D, G), Line(A, center(Circle(A, D, F))) we get concurrent(Line(C, D), Line(D, G), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on h, Line(F, center(Circle(C, D, E))), Line(F, G) we get concurrent(h, Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, center(c)), h we get concurrent(h, Line(F, center(c)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, J), Line(E, center(Circle(C, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(E, J), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, G), Line(F, center(c)) we get concurrent(Line(F, G), Line(F, center(c)), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, G), Line(E, J), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, G), Line(E, J), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(C, D) we get concurrent(Line(C, D), Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(D, G), Line(D, F) we get concurrent(Line(D, F), Line(D, G), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, G), Line(B, center(Circle(B, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(D, G), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), g, k we get concurrent(g, k, Line(E, center(c)))
By concurrent_sufficient_conditions on g, Line(E, center(c)), Line(E, J) we get concurrent(g, Line(E, J), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(F, G), Line(F, J), Line(F, center(Circle(A, D, F))) we get concurrent(Line(F, G), Line(F, J), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), Line(F, G), Line(D, G) we get concurrent(Line(D, G), Line(F, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on g, Line(E, center(Circle(C, D, E))), Line(E, center(c)) we get concurrent(g, Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), k, g we get concurrent(g, k, Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(J, center(c)), l, Line(E, J) we get concurrent(l, Line(E, J), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(C, D, E))), Line(E, J) we get concurrent(Line(D, E), Line(E, J), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(E, F), Line(F, center(Circle(A, D, F))) we get concurrent(h, Line(E, F), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, H), Line(F, center(c)) we get concurrent(Line(E, F), Line(F, H), Line(F, center(c)))
By concurrent_sufficient_conditions on f, Line(A, center(Circle(A, D, F))), h we get concurrent(f, h, Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))), Line(E, G) we get concurrent(Line(E, G), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(D, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(G, center(Circle(B, D, E))), l we get concurrent(l, Line(G, center(c)), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, J), Line(J, center(c)), l we get concurrent(l, Line(E, J), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, J), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, J), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, center(Circle(B, D, E))), k we get concurrent(k, Line(E, center(c)), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), f, l we get concurrent(f, l, Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, center(Circle(B, D, E))), g we get concurrent(g, Line(E, center(c)), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(F, G), Line(G, center(Circle(A, D, F))) we get concurrent(Line(F, G), Line(G, center(c)), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, G), Line(C, D), Line(A, center(Circle(A, D, F))) we get concurrent(Line(C, D), Line(D, G), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(J, center(c)), l, Line(F, J) we get concurrent(l, Line(F, J), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), Line(G, center(Circle(A, D, F))), Line(D, G) we get concurrent(Line(D, G), Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on g, Line(E, J), Line(E, center(Circle(C, D, E))) we get concurrent(g, Line(E, J), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(J, center(c)), Line(E, J), Line(F, J) we get concurrent(Line(E, J), Line(F, J), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(D, E), Line(A, center(Circle(A, D, F))), Line(B, center(Circle(B, D, E))) we get concurrent(Line(D, E), Line(A, center(Circle(A, D, F))), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, G), Line(G, center(Circle(B, D, E))), Line(E, G) we get concurrent(Line(D, G), Line(E, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(E, G), Line(G, center(c)) we get concurrent(Line(E, G), Line(F, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(D, G), Line(F, G), Line(G, center(Circle(A, D, F))) we get concurrent(Line(D, G), Line(F, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on f, Line(G, center(Circle(B, D, E))), Line(G, center(Circle(A, D, F))) we get concurrent(f, Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(A, center(Circle(A, D, F))), Line(D, E) we get concurrent(Line(D, E), Line(D, F), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(C, D), i, Line(B, center(Circle(B, D, E))) we get concurrent(i, Line(C, D), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(H, J), Line(H, center(c)), Line(C, H) we get concurrent(Line(C, H), Line(H, J), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, F), Line(E, center(Circle(B, D, E))) we get concurrent(Line(E, F), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(F, J), Line(F, G) we get concurrent(Line(F, G), Line(F, J), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), Line(G, center(c)), Line(G, center(Circle(B, D, E))) we get concurrent(Line(G, center(c)), Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), Line(E, G), f we get concurrent(f, Line(E, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(A, D, F))), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, G), Line(E, G), Line(G, center(Circle(B, D, E))) we get concurrent(Line(D, G), Line(E, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, E), j, Line(A, center(Circle(A, D, F))) we get concurrent(j, Line(D, E), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(C, D, E))), Line(F, J) we get concurrent(Line(F, H), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, J), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, J), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(Circle(C, D, E))), Line(F, center(Circle(A, D, F))) we get concurrent(Line(F, J), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, G), Line(F, center(Circle(A, D, F))) we get concurrent(Line(D, F), Line(F, G), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(C, H), Line(F, H), Line(H, center(c)) we get concurrent(Line(C, H), Line(F, H), Line(H, center(c)))
By line_definition on line_intersection(f, Line(I, K)), I, Line(I, K) we get Line(I, K) == Line(I, line_intersection(f, Line(I, K)))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(Circle(A, D, F))), Line(G, center(c)) we get concurrent(Line(F, G), Line(G, center(c)), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(C, H), Line(H, J) we get concurrent(Line(C, H), Line(H, J), Line(H, center(c)))
By concurrent_sufficient_conditions on k, g, Line(E, center(c)) we get concurrent(g, k, Line(E, center(c)))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))) we get concurrent(Line(G, center(c)), Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(Circle(B, D, E))), Line(D, G) we get concurrent(Line(D, G), Line(F, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(F, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(F, center(c)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(E, center(Circle(B, D, E))), Line(E, J) we get concurrent(g, Line(E, J), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, J), Line(D, E) we get concurrent(Line(D, E), Line(E, J), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on h, Line(F, center(Circle(A, D, F))), Line(D, F) we get concurrent(h, Line(D, F), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, F), Line(D, G), Line(B, center(Circle(B, D, E))) we get concurrent(Line(D, F), Line(D, G), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))), k we get concurrent(k, Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, J), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, J), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), Line(D, G), Line(E, G) we get concurrent(Line(D, G), Line(E, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(B, D, E))), k we get concurrent(k, Line(E, F), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on l, Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))) we get concurrent(l, Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(E, F), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, center(c)), g we get concurrent(g, Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(Circle(A, D, F))), l we get concurrent(l, Line(F, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, G), Line(D, G), Line(G, center(Circle(A, D, F))) we get concurrent(Line(D, G), Line(E, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, G), g, Line(E, center(Circle(B, D, E))) we get concurrent(g, Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(H, J), Line(H, center(c)) we get concurrent(Line(F, H), Line(H, J), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, J), Line(E, center(Circle(B, D, E))) we get concurrent(Line(E, J), Line(E, center(c)), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(Circle(C, D, E))), Line(F, G) we get concurrent(Line(F, G), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(c)), h, Line(F, center(Circle(A, D, F))) we get concurrent(h, Line(F, center(c)), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, G), Line(G, center(Circle(B, D, E))), l we get concurrent(l, Line(E, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), Line(G, center(c)), f we get concurrent(f, Line(G, center(c)), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(F, H), Line(F, center(Circle(A, D, F))) we get concurrent(Line(F, H), Line(F, center(c)), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(D, F), Line(D, G) we get concurrent(Line(D, F), Line(D, G), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(D, F), Line(B, center(Circle(B, D, E))) we get concurrent(Line(D, F), Line(A, center(Circle(A, D, F))), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), Line(D, G), l we get concurrent(l, Line(D, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, J), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, H), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, G), Line(D, F), Line(A, center(Circle(A, D, F))) we get concurrent(Line(D, F), Line(D, G), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), g, k we get concurrent(g, k, Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(Circle(C, D, E))), Line(F, center(c)) we get concurrent(Line(F, G), Line(F, center(c)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, center(Circle(B, D, E))), k we get concurrent(k, Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(H, J), Line(J, center(c)), Line(E, J) we get concurrent(Line(E, J), Line(H, J), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(Circle(A, D, F))), h we get concurrent(h, Line(F, J), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(J, center(c)), Line(E, center(c)), Line(H, center(c)) we get concurrent(Line(E, center(c)), Line(H, center(c)), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(A, D, F))), Line(F, J) we get concurrent(Line(F, H), Line(F, J), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(E, F), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, G), Line(G, center(Circle(B, D, E))), l we get concurrent(l, Line(D, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, center(c)), Line(E, F) we get concurrent(Line(E, F), Line(E, center(c)), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(c)), Line(E, F) we get concurrent(Line(E, F), Line(F, H), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(E, G), Line(G, center(c)), Line(F, G) we get concurrent(Line(E, G), Line(F, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(E, J), Line(E, G), Line(E, center(Circle(B, D, E))) we get concurrent(Line(E, G), Line(E, J), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, G), l, Line(G, center(c)) we get concurrent(l, Line(E, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(c)), Line(E, F) we get concurrent(Line(E, F), Line(F, G), Line(F, center(c)))
By concurrent_sufficient_conditions on l, Line(G, center(Circle(A, D, F))), f we get concurrent(f, l, Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(C, D, E))), Line(F, center(Circle(A, D, F))) we get concurrent(Line(D, F), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(G, center(Circle(B, D, E))), Line(G, center(c)) we get concurrent(f, Line(G, center(c)), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))), Line(E, J) we get concurrent(Line(E, J), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(c)), f, Line(F, G) we get concurrent(f, Line(F, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))), Line(F, G) we get concurrent(Line(F, G), Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on g, Line(E, center(c)), Line(E, center(Circle(C, D, E))) we get concurrent(g, Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, Line(E, center(c)), Line(E, F) we get concurrent(k, Line(E, F), Line(E, center(c)))
By concurrent_sufficient_conditions on k, Line(E, center(Circle(B, D, E))), Line(E, J) we get concurrent(k, Line(E, J), Line(E, center(Circle(B, D, E))))
By line_definition on G, line_intersection(i, Line(F, G)), Line(F, G) we get Line(F, G) == Line(G, line_intersection(i, Line(F, G)))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(C, D, E))), g we get concurrent(g, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, G), h we get concurrent(h, Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(F, J), h we get concurrent(h, Line(F, J), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(E, G), k, Line(E, center(c)) we get concurrent(k, Line(E, G), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, J), Line(E, center(Circle(C, D, E))), Line(E, G) we get concurrent(Line(E, G), Line(E, J), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, J), Line(D, F), Line(F, center(Circle(A, D, F))) we get concurrent(Line(D, F), Line(F, J), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, J), Line(E, center(Circle(C, D, E))), Line(E, center(c)) we get concurrent(Line(E, J), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, center(c)), Line(F, G) we get concurrent(Line(F, G), Line(F, center(c)), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, G), l, Line(G, center(c)) we get concurrent(l, Line(F, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(F, center(c)), Line(E, center(c)) we get concurrent(Line(E, center(c)), Line(F, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, G), f, Line(G, center(Circle(A, D, F))) we get concurrent(f, Line(E, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on g, Line(E, center(Circle(B, D, E))), Line(E, center(c)) we get concurrent(g, Line(E, center(c)), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(F, G), h we get concurrent(h, Line(F, G), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(D, F), Line(B, center(Circle(B, D, E))), i we get concurrent(i, Line(D, F), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(A, D, F))), Line(F, center(c)) we get concurrent(Line(F, H), Line(F, center(c)), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), l, Line(G, center(Circle(B, D, E))) we get concurrent(l, Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(c)), f we get concurrent(f, Line(F, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(G, center(c)), f, l we get concurrent(f, l, Line(G, center(c)))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(F, center(Circle(A, D, F))), h we get concurrent(h, Line(F, center(c)), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, G), Line(F, center(c)) we get concurrent(Line(F, G), Line(F, center(c)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(F, G), Line(F, H) we get concurrent(Line(F, G), Line(F, H), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), Line(F, G), f we get concurrent(f, Line(F, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), l, Line(F, G) we get concurrent(l, Line(F, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, G), Line(F, center(c)) we get concurrent(Line(F, G), Line(F, H), Line(F, center(c)))
By concurrent_sufficient_conditions on g, Line(E, center(Circle(B, D, E))), Line(D, E) we get concurrent(g, Line(D, E), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, J), g, Line(E, center(c)) we get concurrent(g, Line(E, J), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), j, Line(D, G) we get concurrent(j, Line(D, G), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(C, D, E))), g we get concurrent(g, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), g, Line(E, center(Circle(C, D, E))) we get concurrent(g, Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), h, f we get concurrent(f, h, Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on f, h, Line(A, center(Circle(A, D, F))) we get concurrent(f, h, Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(E, F), Line(F, H) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))), Line(C, D) we get concurrent(Line(C, D), Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(H, J), Line(J, center(c)), Line(F, J) we get concurrent(Line(F, J), Line(H, J), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, J), Line(F, center(Circle(A, D, F))) we get concurrent(Line(E, F), Line(F, J), Line(F, center(Circle(A, D, F))))
By line_definition on D, A, Line(A, center(Circle(A, D, F))) we get Line(A, D) == Line(A, center(Circle(A, D, F)))
By concurrent_sufficient_conditions on k, g, Line(E, center(Circle(B, D, E))) we get concurrent(g, k, Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, G), f, Line(G, center(Circle(B, D, E))) we get concurrent(f, Line(E, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(c)), Line(E, G) we get concurrent(Line(E, G), Line(F, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(D, G), f, Line(G, center(Circle(B, D, E))) we get concurrent(f, Line(D, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, F), k, Line(E, center(Circle(C, D, E))) we get concurrent(k, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(E, F), Line(E, center(Circle(B, D, E))) we get concurrent(g, Line(E, F), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on l, Line(J, center(c)), Line(H, J) we get concurrent(l, Line(H, J), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, J), Line(D, F) we get concurrent(Line(D, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(c)), Line(F, H) we get concurrent(Line(E, F), Line(F, H), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(c)), Line(F, G) we get concurrent(Line(E, F), Line(F, G), Line(F, center(c)))
By line_definition on D, B, Line(B, center(Circle(B, D, E))) we get Line(B, D) == Line(B, center(Circle(B, D, E)))
By concurrent_sufficient_conditions on k, Line(E, center(c)), Line(E, J) we get concurrent(k, Line(E, J), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(E, G), Line(E, center(c)) we get concurrent(Line(E, F), Line(E, G), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, J), Line(E, center(c)) we get concurrent(Line(E, J), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, H), Line(H, J), Line(H, center(c)) we get concurrent(Line(C, H), Line(H, J), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, center(Circle(B, D, E))), Line(E, J) we get concurrent(Line(E, J), Line(E, center(c)), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on g, Line(E, J), Line(E, center(c)) we get concurrent(g, Line(E, J), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), f, Line(E, G) we get concurrent(f, Line(E, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(D, E), Line(C, D) we get concurrent(Line(C, D), Line(D, E), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, G), Line(A, center(Circle(A, D, F))), Line(D, E) we get concurrent(Line(D, E), Line(D, G), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, J), Line(E, center(Circle(B, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(E, J), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, G), Line(G, center(Circle(A, D, F))), Line(F, G) we get concurrent(Line(D, G), Line(F, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(C, D, E))), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, F), Line(B, center(Circle(B, D, E))) we get concurrent(Line(D, E), Line(D, F), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on h, Line(F, center(Circle(C, D, E))), Line(F, H) we get concurrent(h, Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(H, J), Line(E, J), Line(J, center(c)) we get concurrent(Line(E, J), Line(H, J), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(F, G), Line(D, G), Line(G, center(Circle(B, D, E))) we get concurrent(Line(D, G), Line(F, G), Line(G, center(Circle(B, D, E))))
By line_definition on F, line_intersection(i, Line(F, G)), Line(F, G) we get Line(F, G) == Line(F, line_intersection(i, Line(F, G)))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, J), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, J), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, J), g, Line(E, center(Circle(B, D, E))) we get concurrent(g, Line(E, J), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), k, Line(E, center(Circle(B, D, E))) we get concurrent(k, Line(E, center(c)), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(G, center(Circle(A, D, F))), f we get concurrent(f, Line(G, center(c)), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(c)), k we get concurrent(k, Line(E, F), Line(E, center(c)))
By concurrent_sufficient_conditions on k, Line(E, center(c)), Line(E, center(Circle(C, D, E))) we get concurrent(k, Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), l, Line(G, center(c)) we get concurrent(l, Line(G, center(c)), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, center(Circle(A, D, F))), h we get concurrent(h, Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, D), Line(F, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))) we get concurrent(Line(C, D), Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(Circle(A, D, F))), Line(D, F) we get concurrent(Line(D, F), Line(F, G), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on j, Line(D, F), Line(A, center(Circle(A, D, F))) we get concurrent(j, Line(D, F), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(C, D, E))), h we get concurrent(h, Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(G, center(Circle(A, D, F))), Line(E, G) we get concurrent(Line(E, G), Line(G, center(c)), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on j, Line(A, center(Circle(A, D, F))), Line(D, E) we get concurrent(j, Line(D, E), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(E, F), h we get concurrent(h, Line(E, F), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(D, G), Line(C, D) we get concurrent(Line(C, D), Line(D, G), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, G), Line(G, center(Circle(A, D, F))), l we get concurrent(l, Line(D, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(C, D), Line(A, center(Circle(A, D, F))) we get concurrent(Line(C, D), Line(A, center(Circle(A, D, F))), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, J), g, Line(E, center(Circle(C, D, E))) we get concurrent(g, Line(E, J), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(E, center(Circle(C, D, E))), Line(E, center(Circle(B, D, E))) we get concurrent(g, Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(A, D, F))), Line(F, G) we get concurrent(Line(F, G), Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on g, Line(E, center(c)), k we get concurrent(g, k, Line(E, center(c)))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(D, E), Line(A, center(Circle(A, D, F))) we get concurrent(Line(D, E), Line(A, center(Circle(A, D, F))), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(G, center(Circle(B, D, E))), Line(B, center(Circle(B, D, E))) we get concurrent(Line(B, center(Circle(B, D, E))), Line(E, center(Circle(B, D, E))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(E, F), Line(F, center(Circle(A, D, F))) we get concurrent(Line(E, F), Line(F, G), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on l, f, Line(G, center(Circle(B, D, E))) we get concurrent(f, l, Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, center(Circle(B, D, E))), Line(E, G) we get concurrent(Line(E, G), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))), Line(A, center(Circle(A, D, F))) we get concurrent(Line(A, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(c)), l, Line(G, center(Circle(A, D, F))) we get concurrent(l, Line(G, center(c)), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on g, k, Line(E, center(Circle(B, D, E))) we get concurrent(g, k, Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(Circle(A, D, F))), Line(E, G) we get concurrent(Line(E, G), Line(F, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, center(c)), g, Line(E, J) we get concurrent(g, Line(E, J), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, G), g we get concurrent(g, Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(E, F), h we get concurrent(h, Line(E, F), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(Circle(A, D, F))), Line(F, center(c)) we get concurrent(Line(F, J), Line(F, center(c)), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), k, Line(E, J) we get concurrent(k, Line(E, J), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(D, F), Line(F, J) we get concurrent(Line(D, F), Line(F, J), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(D, F), h we get concurrent(h, Line(D, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(E, F), Line(E, center(Circle(B, D, E))) we get concurrent(Line(E, F), Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), Line(G, center(c)), Line(G, center(Circle(A, D, F))) we get concurrent(Line(G, center(c)), Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(C, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), k, Line(E, center(Circle(C, D, E))) we get concurrent(k, Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(F, G), Line(G, center(Circle(A, D, F))) we get concurrent(f, Line(F, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(G, center(c)), Line(J, center(c)) we get concurrent(Line(E, center(c)), Line(G, center(c)), Line(J, center(c)))
By concurrent_sufficient_conditions on l, Line(G, center(c)), Line(F, G) we get concurrent(l, Line(F, G), Line(G, center(c)))
By concurrent_sufficient_conditions on k, Line(E, G), Line(E, center(Circle(C, D, E))) we get concurrent(k, Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), g, Line(E, center(Circle(C, D, E))) we get concurrent(g, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on l, Line(G, center(c)), Line(G, center(Circle(B, D, E))) we get concurrent(l, Line(G, center(c)), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(B, D, E))), k we get concurrent(k, Line(D, E), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(B, center(Circle(B, D, E))), Line(D, G) we get concurrent(Line(D, F), Line(D, G), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), h, Line(D, F) we get concurrent(h, Line(D, F), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on h, Line(F, center(Circle(A, D, F))), Line(F, G) we get concurrent(h, Line(F, G), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, G), h, Line(F, center(Circle(C, D, E))) we get concurrent(h, Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, G), Line(B, center(Circle(B, D, E))) we get concurrent(Line(D, E), Line(D, G), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))), Line(D, F) we get concurrent(Line(D, F), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, center(Circle(C, D, E))), g we get concurrent(g, Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), j, Line(D, E) we get concurrent(j, Line(D, E), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(Circle(B, D, E))), Line(G, center(c)) we get concurrent(Line(F, G), Line(G, center(c)), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, G), k, Line(E, center(Circle(C, D, E))) we get concurrent(k, Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(B, D, E))), Line(E, center(c)) we get concurrent(Line(E, F), Line(E, center(c)), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(c)), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(F, center(c)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(E, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, J), Line(F, H), Line(F, center(Circle(A, D, F))) we get concurrent(Line(F, H), Line(F, J), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), Line(G, center(Circle(A, D, F))), Line(F, G) we get concurrent(Line(F, G), Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(G, center(Circle(B, D, E))), Line(G, center(c)) we get concurrent(Line(E, G), Line(G, center(c)), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, H), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, Line(E, F), Line(E, center(c)) we get concurrent(k, Line(E, F), Line(E, center(c)))
By concurrent_sufficient_conditions on k, g, Line(E, center(Circle(C, D, E))) we get concurrent(g, k, Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(J, center(c)), Line(F, center(c)) we get concurrent(Line(F, center(c)), Line(H, center(c)), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, G), Line(E, F) we get concurrent(Line(E, F), Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, Line(E, center(Circle(C, D, E))), Line(D, E) we get concurrent(k, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(c)), l, f we get concurrent(f, l, Line(G, center(c)))
By concurrent_sufficient_conditions on Line(D, F), Line(A, center(Circle(A, D, F))), Line(C, D) we get concurrent(Line(C, D), Line(D, F), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, G), Line(G, center(Circle(B, D, E))), f we get concurrent(f, Line(D, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on h, Line(F, J), Line(F, center(c)) we get concurrent(h, Line(F, J), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(C, D, E))), Line(F, G) we get concurrent(Line(F, G), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), f, h we get concurrent(f, h, Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), Line(G, center(Circle(A, D, F))), f we get concurrent(f, Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on h, Line(F, center(Circle(C, D, E))), Line(F, J) we get concurrent(h, Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), g, Line(E, F) we get concurrent(g, Line(E, F), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on k, Line(E, F), Line(E, center(Circle(B, D, E))) we get concurrent(k, Line(E, F), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, G), f, Line(G, center(c)) we get concurrent(f, Line(F, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), g, Line(D, E) we get concurrent(g, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(G, center(Circle(A, D, F))), Line(F, G) we get concurrent(Line(E, G), Line(F, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), Line(E, center(Circle(B, D, E))), Line(B, center(Circle(B, D, E))) we get concurrent(Line(B, center(Circle(B, D, E))), Line(E, center(Circle(B, D, E))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(c)), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, G), Line(F, center(c)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(E, G), Line(G, center(Circle(A, D, F))) we get concurrent(Line(E, G), Line(F, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(F, H), Line(C, H) we get concurrent(Line(C, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, J), Line(E, center(c)), Line(E, center(Circle(B, D, E))) we get concurrent(Line(E, J), Line(E, center(c)), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on g, Line(E, center(Circle(C, D, E))), Line(D, E) we get concurrent(g, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(E, G), Line(G, center(Circle(A, D, F))) we get concurrent(f, Line(E, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), Line(E, G), f we get concurrent(f, Line(E, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, J), Line(F, center(c)) we get concurrent(Line(F, J), Line(F, center(c)), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(D, F), i we get concurrent(i, Line(D, F), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, J), Line(E, center(c)), g we get concurrent(g, Line(E, J), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, G), Line(E, center(Circle(B, D, E))), Line(E, center(c)) we get concurrent(Line(E, G), Line(E, center(c)), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(D, F), Line(D, E) we get concurrent(Line(D, E), Line(D, F), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))), Line(E, G) we get concurrent(Line(E, G), Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))))
By line_definition on line_intersection(j, Line(E, G)), B, j we get j == Line(B, line_intersection(j, Line(E, G)))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(D, E), Line(D, G) we get concurrent(Line(D, E), Line(D, G), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(H, center(c)), k, Line(C, H) we get concurrent(k, Line(C, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), j, Line(D, F) we get concurrent(j, Line(D, F), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(D, E), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(F, G), Line(F, center(c)) we get concurrent(h, Line(F, G), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(E, G), Line(E, center(Circle(C, D, E))), Line(E, J) we get concurrent(Line(E, G), Line(E, J), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(D, F), Line(F, J) we get concurrent(Line(D, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, J), Line(E, F) we get concurrent(Line(E, F), Line(F, J), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, F), Line(A, center(Circle(A, D, F))), Line(B, center(Circle(B, D, E))) we get concurrent(Line(D, F), Line(A, center(Circle(A, D, F))), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(F, center(Circle(A, D, F))), Line(E, F) we get concurrent(Line(E, F), Line(F, center(c)), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, G), Line(E, J) we get concurrent(Line(E, G), Line(E, J), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), g, Line(E, J) we get concurrent(g, Line(E, J), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), g, f we get concurrent(f, g, Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(G, center(Circle(A, D, F))), Line(D, G) we get concurrent(Line(D, G), Line(E, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, center(Circle(A, D, F))), Line(F, H) we get concurrent(Line(F, H), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), g, Line(E, F) we get concurrent(g, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(G, center(c)), Line(F, G) we get concurrent(f, Line(F, G), Line(G, center(c)))
By concurrent_sufficient_conditions on l, Line(G, center(c)), Line(E, G) we get concurrent(l, Line(E, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(E, F), k, Line(E, center(Circle(B, D, E))) we get concurrent(k, Line(E, F), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(H, J), k, Line(H, center(c)) we get concurrent(k, Line(H, J), Line(H, center(c)))
By concurrent_sufficient_conditions on j, Line(D, E), Line(A, center(Circle(A, D, F))) we get concurrent(j, Line(D, E), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(c)), l, Line(G, center(Circle(B, D, E))) we get concurrent(l, Line(G, center(c)), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on i, Line(D, E), Line(B, center(Circle(B, D, E))) we get concurrent(i, Line(D, E), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, J), Line(E, center(Circle(C, D, E))), g we get concurrent(g, Line(E, J), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(B, D, E))), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(F, G), Line(G, center(Circle(B, D, E))) we get concurrent(Line(F, G), Line(G, center(c)), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(J, center(c)), Line(E, center(c)), Line(G, center(c)) we get concurrent(Line(E, center(c)), Line(G, center(c)), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(H, J), Line(F, H), Line(H, center(c)) we get concurrent(Line(F, H), Line(H, J), Line(H, center(c)))
By concurrent_sufficient_conditions on j, Line(A, center(Circle(A, D, F))), Line(D, G) we get concurrent(j, Line(D, G), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(E, F), Line(F, G) we get concurrent(Line(E, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on l, Line(G, center(Circle(A, D, F))), Line(D, G) we get concurrent(l, Line(D, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, G), Line(C, D), Line(B, center(Circle(B, D, E))) we get concurrent(Line(C, D), Line(D, G), Line(B, center(Circle(B, D, E))))
By tangent_definition_from_perpendicularity_v0 on E, g, c we get perpendicular(g, Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(E, J), Line(E, center(Circle(B, D, E))) we get concurrent(Line(E, F), Line(E, J), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on l, Line(G, center(Circle(B, D, E))), Line(G, center(c)) we get concurrent(l, Line(G, center(c)), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on g, Line(D, E), Line(E, center(Circle(B, D, E))) we get concurrent(g, Line(D, E), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(Circle(A, D, F))), h we get concurrent(h, Line(F, G), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(E, G), Line(G, center(Circle(B, D, E))) we get concurrent(Line(E, G), Line(G, center(c)), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(Circle(A, D, F))), Line(F, J) we get concurrent(Line(F, G), Line(F, J), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(J, center(c)), Line(G, center(c)) we get concurrent(Line(E, center(c)), Line(G, center(c)), Line(J, center(c)))
By concurrent_sufficient_conditions on g, Line(E, center(c)), Line(E, F) we get concurrent(g, Line(E, F), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, G), Line(E, center(c)) we get concurrent(Line(E, G), Line(E, center(c)), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, G), h, Line(F, center(c)) we get concurrent(h, Line(F, G), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, G), Line(D, E) we get concurrent(Line(D, E), Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, F), Line(A, center(Circle(A, D, F))) we get concurrent(Line(D, E), Line(D, F), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), h, Line(F, H) we get concurrent(h, Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(E, center(c)), Line(E, F) we get concurrent(Line(E, F), Line(E, G), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))), Line(D, G) we get concurrent(Line(D, G), Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, center(c)), k we get concurrent(k, Line(E, center(c)), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(C, D), i we get concurrent(i, Line(C, D), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(D, F), Line(A, center(Circle(A, D, F))) we get concurrent(Line(D, F), Line(A, center(Circle(A, D, F))), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(J, center(c)), Line(F, center(c)), Line(G, center(c)) we get concurrent(Line(F, center(c)), Line(G, center(c)), Line(J, center(c)))
By line_definition on K, line_intersection(f, Line(I, K)), Line(I, K) we get Line(I, K) == Line(K, line_intersection(f, Line(I, K)))
By concurrent_sufficient_conditions on Line(D, G), f, Line(G, center(Circle(A, D, F))) we get concurrent(f, Line(D, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, J), Line(E, center(Circle(C, D, E))), k we get concurrent(k, Line(E, J), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, G), Line(A, center(Circle(A, D, F))), Line(D, F) we get concurrent(Line(D, F), Line(D, G), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, J), Line(D, E), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, J), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on l, Line(G, center(Circle(A, D, F))), Line(G, center(c)) we get concurrent(l, Line(G, center(c)), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, center(c)), g, Line(E, center(Circle(B, D, E))) we get concurrent(g, Line(E, center(c)), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(C, D), Line(D, F) we get concurrent(Line(C, D), Line(D, F), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, center(Circle(B, D, E))), Line(E, center(c)) we get concurrent(Line(E, center(c)), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, H), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, J), Line(E, center(Circle(B, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(E, J), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(F, center(c)), Line(J, center(c)) we get concurrent(Line(F, center(c)), Line(H, center(c)), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, center(Circle(C, D, E))), Line(E, G) we get concurrent(Line(E, G), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on l, Line(G, center(Circle(B, D, E))), Line(G, center(Circle(A, D, F))) we get concurrent(l, Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(Circle(C, D, E))), Line(F, J) we get concurrent(Line(F, G), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(D, F), Line(F, center(Circle(A, D, F))) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, G), f, Line(G, center(Circle(B, D, E))) we get concurrent(f, Line(F, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, J), g we get concurrent(g, Line(E, J), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, J), Line(E, F) we get concurrent(Line(E, F), Line(E, J), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on h, Line(E, F), Line(F, center(c)) we get concurrent(h, Line(E, F), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), Line(D, G), Line(G, center(Circle(B, D, E))) we get concurrent(Line(D, G), Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, G), Line(D, F), Line(B, center(Circle(B, D, E))) we get concurrent(Line(D, F), Line(D, G), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, F), j, Line(A, center(Circle(A, D, F))) we get concurrent(j, Line(D, F), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))), f we get concurrent(f, Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(B, D, E))), Line(E, J) we get concurrent(Line(D, E), Line(E, J), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(F, G), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, G), Line(F, center(c)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(E, center(Circle(B, D, E))), Line(G, center(Circle(B, D, E))) we get concurrent(Line(B, center(Circle(B, D, E))), Line(E, center(Circle(B, D, E))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(D, F), Line(D, E) we get concurrent(Line(D, E), Line(D, F), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, J), k we get concurrent(k, Line(E, J), Line(E, center(c)))
By concurrent_sufficient_conditions on h, Line(F, G), Line(F, center(Circle(A, D, F))) we get concurrent(h, Line(F, G), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(C, D), Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))) we get concurrent(Line(C, D), Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, Line(E, center(Circle(C, D, E))), g we get concurrent(g, k, Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, G), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(E, J), Line(E, center(c)) we get concurrent(Line(E, G), Line(E, J), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, center(c)), k we get concurrent(k, Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(E, center(c)), Line(H, center(c)) we get concurrent(Line(E, center(c)), Line(F, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(F, J), Line(F, center(Circle(A, D, F))) we get concurrent(Line(F, J), Line(F, center(c)), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(F, G), f we get concurrent(f, Line(F, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(E, center(c)), g, Line(E, F) we get concurrent(g, Line(E, F), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(A, D, F))), Line(F, center(c)) we get concurrent(Line(E, F), Line(F, center(c)), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, J), Line(E, center(Circle(B, D, E))), k we get concurrent(k, Line(E, J), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, G), h we get concurrent(h, Line(F, G), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), f, Line(G, center(Circle(B, D, E))) we get concurrent(f, Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), f, Line(E, G) we get concurrent(f, Line(E, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(D, G), j we get concurrent(j, Line(D, G), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(H, center(c)), Line(F, center(c)) we get concurrent(Line(E, center(c)), Line(F, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(A, center(Circle(A, D, F))), Line(D, G) we get concurrent(Line(D, G), Line(A, center(Circle(A, D, F))), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, G), f, Line(G, center(c)) we get concurrent(f, Line(E, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(H, J), Line(H, center(c)), Line(F, H) we get concurrent(Line(F, H), Line(H, J), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(J, center(c)), Line(F, center(c)) we get concurrent(Line(F, center(c)), Line(G, center(c)), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, F), g we get concurrent(g, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), Line(G, center(Circle(A, D, F))), Line(G, center(c)) we get concurrent(Line(G, center(c)), Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(c)), Line(F, center(Circle(A, D, F))) we get concurrent(Line(F, H), Line(F, center(c)), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(c)), l we get concurrent(l, Line(F, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(J, center(c)), Line(E, J), Line(H, J) we get concurrent(Line(E, J), Line(H, J), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), Line(E, G), Line(F, G) we get concurrent(Line(E, G), Line(F, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, H), h, Line(F, center(c)) we get concurrent(h, Line(F, H), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(D, F), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), h, Line(F, H) we get concurrent(h, Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, G), Line(G, center(c)), f we get concurrent(f, Line(E, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(D, G), Line(D, F) we get concurrent(Line(D, F), Line(D, G), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), Line(F, G), Line(G, center(Circle(A, D, F))) we get concurrent(Line(F, G), Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, G), Line(E, F) we get concurrent(Line(E, F), Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(E, F), Line(F, J) we get concurrent(Line(E, F), Line(F, J), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(D, E), Line(D, F) we get concurrent(Line(D, E), Line(D, F), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on l, Line(J, center(c)), Line(F, J) we get concurrent(l, Line(F, J), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), l, Line(D, G) we get concurrent(l, Line(D, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(D, E), g we get concurrent(g, Line(D, E), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(B, center(Circle(B, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(A, center(Circle(A, D, F))), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(Circle(C, D, E))), Line(D, F) we get concurrent(Line(D, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(F, J), Line(E, F) we get concurrent(Line(E, F), Line(F, J), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(Circle(B, D, E))), l we get concurrent(l, Line(F, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, J), Line(E, center(c)), Line(E, F) we get concurrent(Line(E, F), Line(E, J), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(D, E), j we get concurrent(j, Line(D, E), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, G), Line(D, G), Line(G, center(Circle(B, D, E))) we get concurrent(Line(D, G), Line(E, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(E, G), Line(G, center(Circle(B, D, E))) we get concurrent(Line(E, G), Line(F, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, J), h, Line(F, center(Circle(C, D, E))) we get concurrent(h, Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(J, center(c)), Line(G, center(c)), Line(F, center(c)) we get concurrent(Line(F, center(c)), Line(G, center(c)), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(F, J), Line(F, G), Line(F, center(c)) we get concurrent(Line(F, G), Line(F, J), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, F), k we get concurrent(k, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(F, G), Line(F, center(Circle(C, D, E))) we get concurrent(h, Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, F), Line(E, center(Circle(B, D, E))) we get concurrent(Line(E, F), Line(E, center(c)), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(C, D, E))), Line(E, G) we get concurrent(Line(D, E), Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))), h we get concurrent(h, Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, l, Line(G, center(Circle(A, D, F))) we get concurrent(f, l, Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on g, Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))) we get concurrent(g, Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(D, F), j we get concurrent(j, Line(D, F), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(C, D), Line(A, center(Circle(A, D, F))), Line(D, F) we get concurrent(Line(C, D), Line(D, F), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, F), h, Line(F, center(Circle(C, D, E))) we get concurrent(h, Line(D, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(C, D, E))), Line(E, center(Circle(B, D, E))) we get concurrent(Line(D, E), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, center(c)), g we get concurrent(g, Line(E, center(c)), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, G), Line(D, F) we get concurrent(Line(D, F), Line(F, G), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(C, D, E))), k we get concurrent(k, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, J), Line(E, center(Circle(B, D, E))), Line(E, G) we get concurrent(Line(E, G), Line(E, J), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, F), h, Line(F, center(Circle(C, D, E))) we get concurrent(h, Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(E, center(Circle(B, D, E))), Line(E, F) we get concurrent(g, Line(E, F), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, F), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(D, E), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, F), k, Line(E, center(c)) we get concurrent(k, Line(E, F), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(E, center(c)), Line(F, center(c)) we get concurrent(Line(E, center(c)), Line(F, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))), Line(F, center(c)) we get concurrent(Line(F, center(c)), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, G), Line(E, F) we get concurrent(Line(E, F), Line(E, G), Line(E, center(c)))
By concurrent_sufficient_conditions on h, Line(F, center(c)), Line(F, center(Circle(C, D, E))) we get concurrent(h, Line(F, center(c)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, D), Line(B, center(Circle(B, D, E))), Line(D, E) we get concurrent(Line(C, D), Line(D, E), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), l, Line(E, G) we get concurrent(l, Line(E, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(D, F), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, F), Line(D, E), Line(B, center(Circle(B, D, E))) we get concurrent(Line(D, E), Line(D, F), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, G), Line(G, center(Circle(B, D, E))), Line(F, G) we get concurrent(Line(D, G), Line(F, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(F, center(Circle(C, D, E))), h we get concurrent(h, Line(F, center(c)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), i, Line(B, center(Circle(B, D, E))) we get concurrent(i, Line(D, F), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, J), Line(E, F), Line(E, center(Circle(B, D, E))) we get concurrent(Line(E, F), Line(E, J), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, F), Line(E, J) we get concurrent(Line(E, F), Line(E, J), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), l, Line(E, G) we get concurrent(l, Line(E, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on j, Line(C, D), Line(A, center(Circle(A, D, F))) we get concurrent(j, Line(C, D), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, center(c)), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, Line(E, center(Circle(B, D, E))), g we get concurrent(g, k, Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, center(c)), Line(E, F) we get concurrent(Line(E, F), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(F, G), l we get concurrent(l, Line(F, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(C, D, E))), Line(E, center(c)) we get concurrent(Line(E, F), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, G), Line(E, G), Line(G, center(Circle(A, D, F))) we get concurrent(Line(D, G), Line(E, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, F), g, Line(E, center(c)) we get concurrent(g, Line(E, F), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), Line(G, center(Circle(A, D, F))), l we get concurrent(l, Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, J), k we get concurrent(k, Line(E, J), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(C, D, E))), Line(F, center(Circle(A, D, F))) we get concurrent(Line(E, F), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), h, Line(F, J) we get concurrent(h, Line(F, J), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(D, E), Line(C, D) we get concurrent(Line(C, D), Line(D, E), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on j, Line(A, center(Circle(A, D, F))), Line(C, D) we get concurrent(j, Line(C, D), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on i, Line(B, center(Circle(B, D, E))), Line(D, F) we get concurrent(i, Line(D, F), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(C, D), Line(A, center(Circle(A, D, F))), Line(B, center(Circle(B, D, E))) we get concurrent(Line(C, D), Line(A, center(Circle(A, D, F))), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, G), Line(F, J) we get concurrent(Line(F, G), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, F), Line(E, J) we get concurrent(Line(E, F), Line(E, J), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), h, Line(F, center(Circle(C, D, E))) we get concurrent(h, Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(E, F), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, D), Line(B, center(Circle(B, D, E))), Line(A, center(Circle(A, D, F))) we get concurrent(Line(C, D), Line(A, center(Circle(A, D, F))), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(B, center(Circle(B, D, E))), Line(D, G) we get concurrent(Line(D, G), Line(A, center(Circle(A, D, F))), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on k, Line(E, J), Line(E, center(c)) we get concurrent(k, Line(E, J), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(D, F), Line(F, H) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(E, center(c)), Line(E, center(Circle(B, D, E))) we get concurrent(Line(E, G), Line(E, center(c)), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on h, f, Line(A, center(Circle(A, D, F))) we get concurrent(f, h, Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, J), Line(F, center(Circle(A, D, F))) we get concurrent(Line(D, F), Line(F, J), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, G), Line(B, center(Circle(B, D, E))), Line(A, center(Circle(A, D, F))) we get concurrent(Line(D, G), Line(A, center(Circle(A, D, F))), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))), Line(F, G) we get concurrent(Line(F, G), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(J, center(c)), Line(E, J), l we get concurrent(l, Line(E, J), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, G), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, G), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(F, center(c)), Line(J, center(c)) we get concurrent(Line(E, center(c)), Line(F, center(c)), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, J), k we get concurrent(k, Line(E, J), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, F), h, Line(F, center(Circle(A, D, F))) we get concurrent(h, Line(E, F), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), k, Line(E, J) we get concurrent(k, Line(E, J), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, E), k, Line(E, center(Circle(B, D, E))) we get concurrent(k, Line(D, E), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, G), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, H), Line(F, center(c)) we get concurrent(Line(F, G), Line(F, H), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, F), g we get concurrent(g, Line(E, F), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(E, F), Line(F, J) we get concurrent(Line(E, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(A, D, F))), Line(F, H) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))), Line(F, J) we get concurrent(Line(F, J), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(A, center(Circle(A, D, F))), f we get concurrent(f, h, Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(H, center(c)), Line(J, center(c)) we get concurrent(Line(F, center(c)), Line(H, center(c)), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(Circle(C, D, E))), Line(F, center(Circle(A, D, F))) we get concurrent(Line(F, G), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), f, Line(D, G) we get concurrent(f, Line(D, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on h, Line(F, center(c)), Line(E, F) we get concurrent(h, Line(E, F), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(E, G), Line(G, center(Circle(B, D, E))), f we get concurrent(f, Line(E, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), k, g we get concurrent(g, k, Line(E, center(c)))
By concurrent_sufficient_conditions on Line(F, G), Line(D, G), Line(G, center(Circle(A, D, F))) we get concurrent(Line(D, G), Line(F, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, J), Line(E, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(E, J), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, F), Line(E, G) we get concurrent(Line(E, F), Line(E, G), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(F, G), Line(F, center(Circle(A, D, F))) we get concurrent(Line(F, G), Line(F, H), Line(F, center(Circle(A, D, F))))
By line_definition on E, line_intersection(j, Line(E, G)), Line(E, G) we get Line(E, G) == Line(E, line_intersection(j, Line(E, G)))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(G, center(c)), Line(F, center(c)) we get concurrent(Line(E, center(c)), Line(F, center(c)), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(D, G), Line(B, center(Circle(B, D, E))), i we get concurrent(i, Line(D, G), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(F, center(c)), Line(E, center(c)) we get concurrent(Line(E, center(c)), Line(F, center(c)), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(C, D, E))), h we get concurrent(h, Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, J), Line(D, F) we get concurrent(Line(D, F), Line(F, J), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, J), g we get concurrent(g, Line(E, J), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(F, center(c)), Line(G, center(c)) we get concurrent(Line(E, center(c)), Line(F, center(c)), Line(G, center(c)))
By concurrent_sufficient_conditions on f, Line(G, center(Circle(A, D, F))), l we get concurrent(f, l, Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(G, center(Circle(B, D, E))), Line(G, center(Circle(A, D, F))) we get concurrent(Line(G, center(c)), Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, J), Line(E, J), Line(J, center(c)) we get concurrent(Line(E, J), Line(F, J), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, G), Line(F, center(c)) we get concurrent(Line(E, F), Line(F, G), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(D, F), Line(A, center(Circle(A, D, F))), j we get concurrent(j, Line(D, F), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(B, center(Circle(B, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(D, F), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on i, Line(D, F), Line(B, center(Circle(B, D, E))) we get concurrent(i, Line(D, F), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(E, center(c)), Line(J, center(c)) we get concurrent(Line(E, center(c)), Line(F, center(c)), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(E, J), Line(F, J), Line(J, center(c)) we get concurrent(Line(E, J), Line(F, J), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(F, H), k, Line(H, center(c)) we get concurrent(k, Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on k, Line(D, E), Line(E, center(Circle(B, D, E))) we get concurrent(k, Line(D, E), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(E, center(Circle(C, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, center(c)), Line(E, J) we get concurrent(Line(E, J), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(D, F), Line(C, D) we get concurrent(Line(C, D), Line(D, F), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(J, center(c)), Line(F, center(c)), Line(H, center(c)) we get concurrent(Line(F, center(c)), Line(H, center(c)), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, G), Line(F, center(Circle(A, D, F))) we get concurrent(Line(E, F), Line(F, G), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), l, Line(G, center(Circle(A, D, F))) we get concurrent(l, Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, G), Line(E, F) we get concurrent(Line(E, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(G, center(Circle(B, D, E))), Line(G, center(Circle(A, D, F))) we get concurrent(Line(E, G), Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(E, center(c)), Line(F, center(c)) we get concurrent(Line(E, center(c)), Line(F, center(c)), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(C, D), Line(F, center(Circle(C, D, E))) we get concurrent(Line(C, D), Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(c)), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, J), Line(F, center(c)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(Circle(A, D, F))), Line(D, F) we get concurrent(Line(D, F), Line(F, J), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), Line(E, G), Line(D, G) we get concurrent(Line(D, G), Line(E, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(D, E), Line(E, center(Circle(B, D, E))) we get concurrent(Line(D, E), Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on g, Line(E, center(c)), Line(E, center(Circle(B, D, E))) we get concurrent(g, Line(E, center(c)), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, F), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(D, E), k we get concurrent(k, Line(D, E), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, G), j, Line(A, center(Circle(A, D, F))) we get concurrent(j, Line(D, G), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(C, D), j we get concurrent(j, Line(C, D), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, G), Line(E, J) we get concurrent(Line(E, G), Line(E, J), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(D, G), Line(G, center(Circle(A, D, F))), Line(E, G) we get concurrent(Line(D, G), Line(E, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, G), k we get concurrent(k, Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on l, Line(E, G), Line(G, center(Circle(B, D, E))) we get concurrent(l, Line(E, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(J, center(c)), Line(H, center(c)) we get concurrent(Line(E, center(c)), Line(H, center(c)), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(F, center(c)), h, Line(F, J) we get concurrent(h, Line(F, J), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, J), h we get concurrent(h, Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, G), Line(A, center(Circle(A, D, F))), j we get concurrent(j, Line(D, G), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(c)), Line(F, H) we get concurrent(Line(F, G), Line(F, H), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(C, D, E))), Line(F, center(c)) we get concurrent(Line(F, H), Line(F, center(c)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), Line(E, G), Line(D, G) we get concurrent(Line(D, G), Line(E, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on f, g, Line(B, center(Circle(B, D, E))) we get concurrent(f, g, Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on l, Line(H, J), Line(J, center(c)) we get concurrent(l, Line(H, J), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(c)), Line(G, center(Circle(B, D, E))) we get concurrent(Line(F, G), Line(G, center(c)), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, J), Line(E, G) we get concurrent(Line(E, G), Line(E, J), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(G, center(c)), Line(G, center(Circle(B, D, E))) we get concurrent(f, Line(G, center(c)), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(Circle(B, D, E))), Line(G, center(Circle(A, D, F))) we get concurrent(Line(F, G), Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(A, D, F))), Line(F, J) we get concurrent(Line(E, F), Line(F, J), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, J), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(E, J), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(E, G), Line(G, center(Circle(A, D, F))) we get concurrent(Line(E, G), Line(G, center(c)), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(J, center(c)), Line(H, J), Line(F, J) we get concurrent(Line(F, J), Line(H, J), Line(J, center(c)))
By concurrent_sufficient_conditions on k, Line(H, center(c)), Line(F, H) we get concurrent(k, Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(F, J), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, J), Line(F, center(c)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(C, D), Line(D, F) we get concurrent(Line(C, D), Line(D, F), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), g, Line(E, J) we get concurrent(g, Line(E, J), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(D, F), Line(F, center(Circle(A, D, F))) we get concurrent(Line(D, F), Line(F, G), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on f, Line(G, center(c)), Line(E, G) we get concurrent(f, Line(E, G), Line(G, center(c)))
By concurrent_sufficient_conditions on k, Line(E, G), Line(E, center(c)) we get concurrent(k, Line(E, G), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), Line(D, G), Line(F, G) we get concurrent(Line(D, G), Line(F, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), Line(G, center(Circle(A, D, F))), Line(E, G) we get concurrent(Line(E, G), Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(D, G), Line(A, center(Circle(A, D, F))) we get concurrent(Line(D, F), Line(D, G), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, G), Line(D, E), Line(B, center(Circle(B, D, E))) we get concurrent(Line(D, E), Line(D, G), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, center(c)), Line(F, center(Circle(A, D, F))) we get concurrent(Line(F, center(c)), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(E, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, J), h we get concurrent(h, Line(F, J), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), k, Line(E, center(Circle(B, D, E))) we get concurrent(k, Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(G, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))) we get concurrent(Line(A, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, J), Line(E, center(c)), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, J), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, G), l, Line(G, center(Circle(B, D, E))) we get concurrent(l, Line(D, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(Circle(C, D, E))), Line(F, H) we get concurrent(Line(F, H), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(C, D, E))), Line(F, J) we get concurrent(Line(D, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(A, center(Circle(A, D, F))), Line(D, G) we get concurrent(Line(D, E), Line(D, G), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, F), Line(E, J) we get concurrent(Line(E, F), Line(E, J), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(J, center(c)), l, Line(H, J) we get concurrent(l, Line(H, J), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), g, k we get concurrent(g, k, Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, H), Line(F, center(c)) we get concurrent(Line(F, H), Line(F, center(c)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(F, center(Circle(A, D, F))), Line(F, center(c)) we get concurrent(h, Line(F, center(c)), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(J, center(c)), Line(G, center(c)), Line(E, center(c)) we get concurrent(Line(E, center(c)), Line(G, center(c)), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(H, J), Line(C, H) we get concurrent(Line(C, H), Line(H, J), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(H, J), Line(F, H) we get concurrent(Line(F, H), Line(H, J), Line(H, center(c)))
By concurrent_sufficient_conditions on f, Line(G, center(Circle(A, D, F))), Line(E, G) we get concurrent(f, Line(E, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(C, D, E))), Line(D, F) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(F, center(c)), Line(F, center(Circle(A, D, F))) we get concurrent(h, Line(F, center(c)), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, center(Circle(B, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(F, H), Line(F, G) we get concurrent(Line(F, G), Line(F, H), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), g, Line(E, center(Circle(B, D, E))) we get concurrent(g, Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, J), Line(F, G) we get concurrent(Line(F, G), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, Line(H, center(c)), Line(C, H) we get concurrent(k, Line(C, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, G), Line(D, F) we get concurrent(Line(D, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(E, F), Line(F, center(Circle(A, D, F))) we get concurrent(Line(E, F), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), h, Line(F, center(c)) we get concurrent(h, Line(E, F), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(E, J), Line(E, center(Circle(C, D, E))), Line(E, center(Circle(B, D, E))) we get concurrent(Line(E, J), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(B, center(Circle(B, D, E))), Line(A, center(Circle(A, D, F))) we get concurrent(Line(D, E), Line(A, center(Circle(A, D, F))), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on l, Line(G, center(c)), Line(G, center(Circle(A, D, F))) we get concurrent(l, Line(G, center(c)), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, center(c)), Line(E, G) we get concurrent(Line(E, G), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, Line(E, center(Circle(B, D, E))), Line(D, E) we get concurrent(k, Line(D, E), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, J), Line(E, center(c)), k we get concurrent(k, Line(E, J), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(C, D), Line(D, E), Line(A, center(Circle(A, D, F))) we get concurrent(Line(C, D), Line(D, E), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, G), Line(E, center(c)), g we get concurrent(g, Line(E, G), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))), Line(G, center(Circle(A, D, F))) we get concurrent(Line(A, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(J, center(c)), Line(E, center(c)) we get concurrent(Line(E, center(c)), Line(G, center(c)), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(F, H), h, Line(F, center(Circle(C, D, E))) we get concurrent(h, Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(D, E), Line(A, center(Circle(A, D, F))) we get concurrent(Line(D, E), Line(D, F), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(J, center(c)), Line(H, J), Line(E, J) we get concurrent(Line(E, J), Line(H, J), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(E, center(c)), k, Line(E, G) we get concurrent(k, Line(E, G), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(C, D), Line(D, G) we get concurrent(Line(C, D), Line(D, G), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, G), Line(F, H) we get concurrent(Line(F, G), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, G), Line(A, center(Circle(A, D, F))), Line(B, center(Circle(B, D, E))) we get concurrent(Line(D, G), Line(A, center(Circle(A, D, F))), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, center(Circle(C, D, E))), Line(E, J) we get concurrent(Line(E, J), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(G, center(c)), l we get concurrent(f, l, Line(G, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, H), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), Line(E, G), l we get concurrent(l, Line(E, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, H), Line(D, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, G), Line(E, center(Circle(B, D, E))) we get concurrent(Line(E, G), Line(E, center(c)), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, center(c)), Line(F, J) we get concurrent(Line(F, J), Line(F, center(c)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, f, Line(B, center(Circle(B, D, E))) we get concurrent(f, g, Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on g, Line(E, G), Line(E, center(c)) we get concurrent(g, Line(E, G), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(F, center(Circle(C, D, E))), Line(F, G) we get concurrent(Line(F, G), Line(F, center(c)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(F, center(Circle(A, D, F))), Line(F, J) we get concurrent(Line(F, J), Line(F, center(c)), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), Line(F, G), f we get concurrent(f, Line(F, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, J), Line(E, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(D, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), g, Line(E, center(Circle(B, D, E))) we get concurrent(g, Line(D, E), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), k, Line(E, F) we get concurrent(k, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, center(Circle(A, D, F))), Line(F, center(c)) we get concurrent(Line(F, center(c)), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, G), Line(F, G), Line(G, center(Circle(B, D, E))) we get concurrent(Line(D, G), Line(F, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), i, Line(D, G) we get concurrent(i, Line(D, G), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, J), Line(J, center(c)), Line(H, J) we get concurrent(Line(E, J), Line(H, J), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(E, G), Line(E, center(Circle(B, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(B, D, E))), Line(E, G) we get concurrent(Line(D, E), Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), f, l we get concurrent(f, l, Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, G), Line(E, center(c)), Line(E, J) we get concurrent(Line(E, G), Line(E, J), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(D, F), Line(C, D) we get concurrent(Line(C, D), Line(D, F), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on l, Line(E, G), Line(G, center(c)) we get concurrent(l, Line(E, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, G), Line(F, center(Circle(A, D, F))) we get concurrent(Line(F, G), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(B, center(Circle(B, D, E))), Line(C, D) we get concurrent(Line(C, D), Line(D, E), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on g, Line(E, F), Line(E, center(Circle(C, D, E))) we get concurrent(g, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(c)), l, Line(E, G) we get concurrent(l, Line(E, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(E, F), Line(F, center(Circle(A, D, F))) we get concurrent(Line(E, F), Line(F, center(c)), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, H), Line(F, center(Circle(A, D, F))) we get concurrent(Line(F, G), Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(A, D, F))), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, Line(H, center(c)), Line(H, J) we get concurrent(k, Line(H, J), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, G), Line(D, E), Line(A, center(Circle(A, D, F))) we get concurrent(Line(D, E), Line(D, G), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), k, Line(D, E) we get concurrent(k, Line(D, E), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on l, Line(E, G), Line(G, center(Circle(A, D, F))) we get concurrent(l, Line(E, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(D, F), h we get concurrent(h, Line(D, F), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(D, E), Line(D, F) we get concurrent(Line(D, E), Line(D, F), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on l, Line(F, G), Line(G, center(Circle(B, D, E))) we get concurrent(l, Line(F, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(F, center(Circle(A, D, F))), Line(F, G) we get concurrent(Line(F, G), Line(F, center(c)), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(Circle(A, D, F))), f we get concurrent(f, Line(F, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(D, E), Line(E, J) we get concurrent(Line(D, E), Line(E, J), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(E, center(Circle(C, D, E))), Line(E, G) we get concurrent(g, Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(E, center(Circle(C, D, E))), Line(E, J) we get concurrent(g, Line(E, J), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, center(Circle(C, D, E))), Line(E, center(Circle(B, D, E))) we get concurrent(Line(E, center(c)), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(E, F), Line(E, center(c)) we get concurrent(Line(E, F), Line(E, G), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, J), Line(F, center(c)) we get concurrent(Line(F, J), Line(F, center(c)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(E, center(Circle(C, D, E))), k we get concurrent(g, k, Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(c)), Line(E, J) we get concurrent(Line(E, F), Line(E, J), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(c)), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, H), Line(F, center(c)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(B, center(Circle(B, D, E))), Line(D, F) we get concurrent(Line(D, E), Line(D, F), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on k, Line(C, H), Line(H, center(c)) we get concurrent(k, Line(C, H), Line(H, center(c)))
By concurrent_sufficient_conditions on h, Line(F, center(Circle(C, D, E))), Line(F, center(Circle(A, D, F))) we get concurrent(h, Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, center(c)), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on l, Line(D, G), Line(G, center(Circle(B, D, E))) we get concurrent(l, Line(D, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(F, H), Line(E, F) we get concurrent(Line(E, F), Line(F, H), Line(F, center(c)))
By concurrent_sufficient_conditions on g, Line(E, center(Circle(B, D, E))), k we get concurrent(g, k, Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on h, Line(F, center(c)), Line(F, J) we get concurrent(h, Line(F, J), Line(F, center(c)))
By concurrent_sufficient_conditions on f, Line(F, G), Line(G, center(c)) we get concurrent(f, Line(F, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, center(Circle(A, D, F))), Line(F, J) we get concurrent(Line(F, J), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, G), Line(B, center(Circle(B, D, E))), Line(C, D) we get concurrent(Line(C, D), Line(D, G), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), Line(E, G), Line(G, center(c)) we get concurrent(Line(E, G), Line(G, center(c)), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(D, F), Line(F, G) we get concurrent(Line(D, F), Line(F, G), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), l, f we get concurrent(f, l, Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(A, D, F))), Line(F, G) we get concurrent(Line(E, F), Line(F, G), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, H), Line(E, F), Line(F, center(c)) we get concurrent(Line(E, F), Line(F, H), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), h, Line(E, F) we get concurrent(h, Line(E, F), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(F, J), Line(F, H) we get concurrent(Line(F, H), Line(F, J), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(D, E), Line(E, J), Line(E, center(Circle(B, D, E))) we get concurrent(Line(D, E), Line(E, J), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, J), Line(J, center(c)), Line(H, J) we get concurrent(Line(F, J), Line(H, J), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(E, J), l, Line(J, center(c)) we get concurrent(l, Line(E, J), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on l, Line(F, G), Line(G, center(Circle(A, D, F))) we get concurrent(l, Line(F, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(F, H), Line(H, J) we get concurrent(Line(F, H), Line(H, J), Line(H, center(c)))
By concurrent_sufficient_conditions on k, Line(E, J), Line(E, center(Circle(C, D, E))) we get concurrent(k, Line(E, J), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, k, Line(E, center(c)) we get concurrent(g, k, Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), k, Line(E, center(Circle(C, D, E))) we get concurrent(k, Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, H), Line(F, center(Circle(A, D, F))) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on k, Line(E, center(c)), Line(E, center(Circle(B, D, E))) we get concurrent(k, Line(E, center(c)), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on g, Line(E, F), Line(E, center(c)) we get concurrent(g, Line(E, F), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(F, center(Circle(C, D, E))), Line(F, J) we get concurrent(Line(F, J), Line(F, center(c)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(C, D), Line(B, center(Circle(B, D, E))) we get concurrent(Line(C, D), Line(D, F), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(Circle(B, D, E))), f we get concurrent(f, Line(F, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), Line(D, G), Line(G, center(Circle(A, D, F))) we get concurrent(Line(D, G), Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, J), Line(E, center(Circle(B, D, E))), g we get concurrent(g, Line(E, J), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, H), Line(D, F) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(H, J), Line(J, center(c)), l we get concurrent(l, Line(H, J), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), Line(F, G), Line(G, center(c)) we get concurrent(Line(F, G), Line(G, center(c)), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(c)), h we get concurrent(h, Line(F, G), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(C, D, E))), Line(E, center(Circle(B, D, E))) we get concurrent(Line(E, F), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(H, center(c)), Line(C, H) we get concurrent(Line(C, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on f, Line(G, center(Circle(B, D, E))), l we get concurrent(f, l, Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), i, Line(D, E) we get concurrent(i, Line(D, E), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(G, center(Circle(B, D, E))), Line(D, G) we get concurrent(Line(D, G), Line(E, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(D, E), g we get concurrent(g, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on l, Line(J, center(c)), Line(E, J) we get concurrent(l, Line(E, J), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(E, F), Line(F, H) we get concurrent(Line(E, F), Line(F, H), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(C, D), Line(B, center(Circle(B, D, E))), Line(D, G) we get concurrent(Line(C, D), Line(D, G), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on l, Line(D, G), Line(G, center(Circle(A, D, F))) we get concurrent(l, Line(D, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), Line(A, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))) we get concurrent(Line(A, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, H), Line(C, H), Line(H, center(c)) we get concurrent(Line(C, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, J), Line(F, G), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, G), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(Circle(B, D, E))), Line(E, G) we get concurrent(Line(E, G), Line(F, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, H), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, H), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(F, center(Circle(A, D, F))), Line(F, H) we get concurrent(Line(F, H), Line(F, center(c)), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on l, Line(G, center(Circle(A, D, F))), Line(E, G) we get concurrent(l, Line(E, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(c)), h we get concurrent(h, Line(E, F), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(C, D, E))), Line(F, G) we get concurrent(Line(D, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(J, center(c)), Line(E, center(c)) we get concurrent(Line(E, center(c)), Line(H, center(c)), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(F, center(c)), h, Line(E, F) we get concurrent(h, Line(E, F), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(F, J), Line(F, center(Circle(A, D, F))) we get concurrent(Line(F, H), Line(F, J), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, J), Line(F, center(c)) we get concurrent(Line(F, G), Line(F, J), Line(F, center(c)))
By concurrent_sufficient_conditions on g, Line(E, G), Line(E, center(Circle(B, D, E))) we get concurrent(g, Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(E, F), Line(F, G) we get concurrent(Line(E, F), Line(F, G), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(D, E), Line(E, center(Circle(B, D, E))) we get concurrent(Line(D, E), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(Circle(C, D, E))), Line(F, H) we get concurrent(Line(F, G), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, center(Circle(B, D, E))), Line(E, J) we get concurrent(Line(E, J), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, J), Line(E, G), Line(E, center(c)) we get concurrent(Line(E, G), Line(E, J), Line(E, center(c)))
By line_definition on center(c), midpoint(E, F), Line(C, D) we get Line(C, D) == Line(center(c), midpoint(E, F))
By concurrent_sufficient_conditions on Line(E, G), Line(G, center(Circle(A, D, F))), l we get concurrent(l, Line(E, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, G), Line(G, center(c)), l we get concurrent(l, Line(E, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(D, E), Line(A, center(Circle(A, D, F))), Line(C, D) we get concurrent(Line(C, D), Line(D, E), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, H), h, Line(F, center(Circle(A, D, F))) we get concurrent(h, Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, G), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, J), Line(E, F) we get concurrent(Line(E, F), Line(E, J), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(E, G), l we get concurrent(l, Line(E, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(A, D, F))), h we get concurrent(h, Line(D, F), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), Line(G, center(c)), l we get concurrent(l, Line(G, center(c)), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, center(c)), g, Line(E, G) we get concurrent(g, Line(E, G), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(J, center(c)), Line(H, center(c)), Line(F, center(c)) we get concurrent(Line(F, center(c)), Line(H, center(c)), Line(J, center(c)))
By concurrent_sufficient_conditions on f, Line(F, G), Line(G, center(Circle(B, D, E))) we get concurrent(f, Line(F, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), g, Line(E, G) we get concurrent(g, Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), Line(G, center(c)), f we get concurrent(f, Line(G, center(c)), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, E), Line(A, center(Circle(A, D, F))), j we get concurrent(j, Line(D, E), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(H, J), l, Line(J, center(c)) we get concurrent(l, Line(H, J), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(D, G), Line(G, center(Circle(A, D, F))), f we get concurrent(f, Line(D, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, G), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))) we get concurrent(f, Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on l, Line(E, J), Line(J, center(c)) we get concurrent(l, Line(E, J), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, H), h we get concurrent(h, Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), g, Line(D, E) we get concurrent(g, Line(D, E), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))), Line(G, center(c)) we get concurrent(Line(G, center(c)), Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on g, Line(E, center(Circle(B, D, E))), Line(E, G) we get concurrent(g, Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, G), l, Line(G, center(Circle(A, D, F))) we get concurrent(l, Line(D, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(C, D, E))), Line(F, H) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, G), Line(A, center(Circle(A, D, F))) we get concurrent(Line(D, E), Line(D, G), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(A, D, F))), Line(F, H) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(G, center(Circle(B, D, E))), Line(F, G) we get concurrent(Line(F, G), Line(G, center(c)), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, J), k, Line(E, center(c)) we get concurrent(k, Line(E, J), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(c)), Line(F, J) we get concurrent(Line(E, F), Line(F, J), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), Line(F, G), l we get concurrent(l, Line(F, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on k, Line(E, center(Circle(C, D, E))), Line(E, F) we get concurrent(k, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), f, g we get concurrent(f, g, Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), h, Line(F, G) we get concurrent(h, Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(C, D, E))), Line(F, J) we get concurrent(Line(E, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, center(c)), Line(E, F) we get concurrent(Line(E, F), Line(F, center(c)), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on g, k, Line(E, center(Circle(C, D, E))) we get concurrent(g, k, Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(G, center(Circle(A, D, F))), f we get concurrent(f, Line(E, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), Line(E, G), Line(F, G) we get concurrent(Line(E, G), Line(F, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(c)), h we get concurrent(h, Line(F, J), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(A, D, F))), Line(D, F) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), Line(E, center(Circle(B, D, E))) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(E, F), Line(F, G) we get concurrent(Line(E, F), Line(F, G), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on l, Line(G, center(c)), f we get concurrent(f, l, Line(G, center(c)))
By concurrent_sufficient_conditions on f, Line(G, center(Circle(B, D, E))), Line(F, G) we get concurrent(f, Line(F, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(D, E), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, J), Line(E, G) we get concurrent(Line(E, G), Line(E, J), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(C, H), Line(H, center(c)), Line(F, H) we get concurrent(Line(C, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, G), g we get concurrent(g, Line(E, G), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(D, E), i, Line(B, center(Circle(B, D, E))) we get concurrent(i, Line(D, E), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, J), Line(E, center(c)) we get concurrent(Line(E, J), Line(E, center(c)), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on k, Line(E, center(Circle(C, D, E))), Line(E, J) we get concurrent(k, Line(E, J), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, center(c)), Line(F, J) we get concurrent(Line(F, J), Line(F, center(c)), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(E, G), Line(F, G) we get concurrent(Line(E, G), Line(F, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(E, G), k, Line(E, center(Circle(B, D, E))) we get concurrent(k, Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), h, Line(F, G) we get concurrent(h, Line(F, G), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(Circle(A, D, F))), Line(E, F) we get concurrent(Line(E, F), Line(F, J), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, J), Line(E, center(Circle(B, D, E))), Line(E, center(c)) we get concurrent(Line(E, J), Line(E, center(c)), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(C, H), Line(H, center(c)), Line(H, J) we get concurrent(Line(C, H), Line(H, J), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), Line(F, G), Line(E, G) we get concurrent(Line(E, G), Line(F, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(c)), Line(F, H) we get concurrent(Line(F, H), Line(F, J), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, F), Line(E, center(c)) we get concurrent(Line(E, F), Line(E, center(c)), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(G, center(Circle(A, D, F))), Line(A, center(Circle(A, D, F))) we get concurrent(Line(A, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, center(c)), g, Line(E, center(Circle(C, D, E))) we get concurrent(g, Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, G), Line(E, J) we get concurrent(Line(E, G), Line(E, J), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(D, G), Line(B, center(Circle(B, D, E))) we get concurrent(i, Line(D, G), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on h, Line(E, F), Line(F, center(Circle(C, D, E))) we get concurrent(h, Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, J), Line(E, F) we get concurrent(Line(E, F), Line(E, J), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, D), Line(A, center(Circle(A, D, F))), j we get concurrent(j, Line(C, D), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on i, Line(B, center(Circle(B, D, E))), Line(D, E) we get concurrent(i, Line(D, E), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, G), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, G), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(D, E), Line(D, G) we get concurrent(Line(D, E), Line(D, G), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), Line(F, G), Line(D, G) we get concurrent(Line(D, G), Line(F, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, center(c)), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, center(c)), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), Line(E, G), Line(G, center(Circle(A, D, F))) we get concurrent(Line(E, G), Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on h, Line(F, H), Line(F, center(Circle(C, D, E))) we get concurrent(h, Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(C, D, E))), Line(F, H) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, J), Line(E, F), Line(F, center(c)) we get concurrent(Line(E, F), Line(F, J), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(A, center(Circle(A, D, F))), Line(D, E) we get concurrent(Line(D, E), Line(A, center(Circle(A, D, F))), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(E, center(Circle(B, D, E))), Line(E, J) we get concurrent(Line(E, G), Line(E, J), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, G), f, Line(G, center(Circle(A, D, F))) we get concurrent(f, Line(F, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, G), Line(E, center(Circle(C, D, E))), g we get concurrent(g, Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(E, center(c)), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, G), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, J), Line(E, center(c)), Line(E, G) we get concurrent(Line(E, G), Line(E, J), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(J, center(c)), Line(F, J), Line(E, J) we get concurrent(Line(E, J), Line(F, J), Line(J, center(c)))
By concurrent_sufficient_conditions on k, Line(H, J), Line(H, center(c)) we get concurrent(k, Line(H, J), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(B, D, E))), g we get concurrent(g, Line(E, F), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on h, Line(F, center(Circle(C, D, E))), Line(E, F) we get concurrent(h, Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(H, center(c)), Line(E, center(c)) we get concurrent(Line(E, center(c)), Line(F, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), f, Line(F, G) we get concurrent(f, Line(F, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))) we get concurrent(Line(F, G), Line(G, center(Circle(A, D, F))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, H), Line(F, J) we get concurrent(Line(F, H), Line(F, J), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on j, Line(D, G), Line(A, center(Circle(A, D, F))) we get concurrent(j, Line(D, G), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, J), k, Line(E, center(Circle(B, D, E))) we get concurrent(k, Line(E, J), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), h, Line(F, center(c)) we get concurrent(h, Line(F, center(c)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(D, F), Line(F, center(Circle(C, D, E))) we get concurrent(h, Line(D, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, H), Line(E, F) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), i, Line(C, D) we get concurrent(i, Line(C, D), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(E, F), Line(F, center(c)) we get concurrent(Line(E, F), Line(F, center(c)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, J), Line(E, F), Line(E, center(c)) we get concurrent(Line(E, F), Line(E, J), Line(E, center(c)))
By concurrent_sufficient_conditions on k, Line(E, center(Circle(B, D, E))), Line(E, G) we get concurrent(k, Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on h, Line(F, center(Circle(C, D, E))), Line(F, center(c)) we get concurrent(h, Line(F, center(c)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(B, center(Circle(B, D, E))), Line(A, center(Circle(A, D, F))) we get concurrent(Line(D, F), Line(A, center(Circle(A, D, F))), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, J), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(E, center(c)), Line(J, center(c)) we get concurrent(Line(E, center(c)), Line(G, center(c)), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(F, G), Line(E, F), Line(F, center(c)) we get concurrent(Line(E, F), Line(F, G), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), g, Line(E, center(c)) we get concurrent(g, Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(Circle(C, D, E))), h we get concurrent(h, Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(D, G), Line(C, D) we get concurrent(Line(C, D), Line(D, G), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on f, Line(B, center(Circle(B, D, E))), g we get concurrent(f, g, Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(H, center(c)), Line(H, J) we get concurrent(Line(F, H), Line(H, J), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(E, G), f we get concurrent(f, Line(E, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, center(c)), Line(E, center(Circle(B, D, E))) we get concurrent(Line(E, center(c)), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(J, center(c)), Line(E, center(c)), Line(F, center(c)) we get concurrent(Line(E, center(c)), Line(F, center(c)), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By line_definition on G, line_intersection(j, Line(E, G)), Line(E, G) we get Line(E, G) == Line(G, line_intersection(j, Line(E, G)))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))), Line(F, H) we get concurrent(Line(F, H), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, H), Line(F, center(c)) we get concurrent(Line(F, H), Line(F, center(c)), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(c)), f, Line(E, G) we get concurrent(f, Line(E, G), Line(G, center(c)))
By concurrent_sufficient_conditions on l, f, Line(G, center(Circle(A, D, F))) we get concurrent(f, l, Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, J), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, G), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), k, Line(E, G) we get concurrent(k, Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), g, Line(E, G) we get concurrent(g, Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, Line(D, E), Line(E, center(Circle(C, D, E))) we get concurrent(k, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(E, F), h we get concurrent(h, Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(F, center(c)), Line(H, center(c)) we get concurrent(Line(E, center(c)), Line(F, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, E), Line(E, G), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(G, center(Circle(B, D, E))), f we get concurrent(f, Line(G, center(c)), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, J), k, Line(E, center(Circle(C, D, E))) we get concurrent(k, Line(E, J), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(B, center(Circle(B, D, E))), Line(G, center(Circle(B, D, E))) we get concurrent(Line(B, center(Circle(B, D, E))), Line(E, center(Circle(B, D, E))), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(J, center(c)), Line(G, center(c)) we get concurrent(Line(F, center(c)), Line(G, center(c)), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(c)), Line(F, center(Circle(A, D, F))) we get concurrent(Line(F, J), Line(F, center(c)), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), Line(G, center(c)), Line(E, G) we get concurrent(Line(E, G), Line(G, center(c)), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, G), Line(E, center(Circle(B, D, E))) we get concurrent(Line(D, E), Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), h, Line(F, center(c)) we get concurrent(h, Line(F, center(c)), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(H, center(c)), k, Line(H, J) we get concurrent(k, Line(H, J), Line(H, center(c)))
By concurrent_sufficient_conditions on h, Line(F, center(Circle(C, D, E))), Line(D, F) we get concurrent(h, Line(D, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), i, Line(D, F) we get concurrent(i, Line(D, F), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on k, Line(E, center(c)), Line(E, G) we get concurrent(k, Line(E, G), Line(E, center(c)))
By concurrent_sufficient_conditions on k, Line(E, J), Line(E, center(Circle(B, D, E))) we get concurrent(k, Line(E, J), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, F), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on k, Line(E, G), Line(E, center(Circle(B, D, E))) we get concurrent(k, Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(C, D), Line(B, center(Circle(B, D, E))) we get concurrent(Line(C, D), Line(D, E), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, F), Line(E, G) we get concurrent(Line(E, F), Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(B, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(D, G), Line(A, center(Circle(A, D, F))) we get concurrent(Line(D, G), Line(A, center(Circle(A, D, F))), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, center(c)), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, center(c)), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, J), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(E, F), Line(F, J) we get concurrent(Line(E, F), Line(F, J), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(E, G), Line(D, E), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), h, Line(F, center(Circle(A, D, F))) we get concurrent(h, Line(D, F), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(G, center(Circle(A, D, F))), l we get concurrent(l, Line(G, center(c)), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on f, Line(D, G), Line(G, center(Circle(A, D, F))) we get concurrent(f, Line(D, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), Line(G, center(c)), Line(F, G) we get concurrent(Line(F, G), Line(G, center(c)), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, G), g we get concurrent(g, Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on k, Line(E, center(c)), g we get concurrent(g, k, Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(c)), Line(F, center(Circle(A, D, F))) we get concurrent(Line(E, F), Line(F, center(c)), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, J), Line(F, H), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, H), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, G), Line(F, H) we get concurrent(Line(F, G), Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on h, Line(F, J), Line(F, center(Circle(C, D, E))) we get concurrent(h, Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on l, Line(G, center(Circle(B, D, E))), Line(D, G) we get concurrent(l, Line(D, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), Line(F, G), l we get concurrent(l, Line(F, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(D, E), Line(E, J) we get concurrent(Line(D, E), Line(E, J), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), l, Line(D, G) we get concurrent(l, Line(D, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(C, D), Line(B, center(Circle(B, D, E))) we get concurrent(Line(C, D), Line(A, center(Circle(A, D, F))), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(G, center(c)), Line(G, center(Circle(B, D, E))) we get concurrent(Line(E, G), Line(G, center(c)), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on k, Line(E, center(Circle(B, D, E))), Line(E, center(c)) we get concurrent(k, Line(E, center(c)), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, D, E))), Line(F, G), Line(E, G) we get concurrent(Line(E, G), Line(F, G), Line(G, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(B, D, E))), Line(E, J) we get concurrent(Line(E, F), Line(E, J), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, J), Line(F, center(c)) we get concurrent(Line(E, F), Line(F, J), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(c)), Line(F, J) we get concurrent(Line(F, H), Line(F, J), Line(F, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, center(c)), Line(F, H) we get concurrent(Line(F, H), Line(F, center(c)), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(c)), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, F), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, J), Line(F, G), Line(F, center(Circle(A, D, F))) we get concurrent(Line(F, G), Line(F, J), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), Line(D, G), f we get concurrent(f, Line(D, G), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, G), Line(F, G), Line(G, center(c)) we get concurrent(Line(E, G), Line(F, G), Line(G, center(c)))
By concurrent_sufficient_conditions on h, Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))) we get concurrent(h, Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), k, Line(E, center(Circle(C, D, E))) we get concurrent(k, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(A, D, F))), Line(G, center(c)), Line(F, G) we get concurrent(Line(F, G), Line(G, center(c)), Line(G, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(c)), Line(J, center(c)), Line(H, center(c)) we get concurrent(Line(F, center(c)), Line(H, center(c)), Line(J, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))), g we get concurrent(g, Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By tangent_definition_from_perpendicularity_v0 on F, h, c we get perpendicular(h, Line(F, center(c)))
By tangent_definition_from_perpendicularity_v0 on G, f, c we get perpendicular(f, Line(G, center(c)))
By radical_axis_of_intersecting_circles_v0 on H, J, Circle(C, H, J), c we get Line(H, J) == radical_axis(c, Circle(C, H, J))
By perpendicular_line_definition on line_intersection(j, Line(E, G)), Line(E, G), k we get Line(E, G) == perpendicular_line(line_intersection(j, Line(E, G)), k)
By line_intersection_definition on center(c), Line(J, center(c)), Line(C, D) we get center(c) == line_intersection(Line(C, D), Line(J, center(c)))
By line_intersection_definition on center(Circle(C, D, E)), Line(F, center(Circle(C, D, E))), median(center(Circle(C, D, E)), E, F) we get center(Circle(C, D, E)) == line_intersection(Line(F, center(Circle(C, D, E))), median(center(Circle(C, D, E)), E, F))
By line_intersection_definition on center(c), median(center(c), E, F), Line(G, center(c)) we get center(c) == line_intersection(Line(G, center(c)), median(center(c), E, F))
By tangents_angle_bisector on C, F, E, c we get angle(F, C, center(c)) == angle(center(c), C, E) mod 360
By perpendicular_line_definition on line_intersection(i, Line(F, G)), i, Line(F, G) we get i == perpendicular_line(line_intersection(i, Line(F, G)), Line(F, G))
By perpendicular_line_definition on midpoint(E, F), Line(E, F), Line(C, D) we get Line(E, F) == perpendicular_line(midpoint(E, F), Line(C, D))
By line_intersection_definition on center(c), Line(J, center(c)), median(center(c), E, F) we get center(c) == line_intersection(Line(J, center(c)), median(center(c), E, F))
By line_intersection_definition on center(c), Line(C, D), Line(H, center(c)) we get center(c) == line_intersection(Line(C, D), Line(H, center(c)))
By line_intersection_definition on midpoint(E, F), median(center(c), E, F), Line(E, F) we get midpoint(E, F) == line_intersection(Line(E, F), median(center(c), E, F))
By line_intersection_definition on center(c), median(center(c), E, F), Line(H, center(c)) we get center(c) == line_intersection(Line(H, center(c)), median(center(c), E, F))
By line_intersection_definition on center(c), Line(F, center(c)), Line(C, D) we get center(c) == line_intersection(Line(C, D), Line(F, center(c)))
By perpendicular_line_definition on line_intersection(j, Line(E, G)), j, Line(E, G) we get j == perpendicular_line(line_intersection(j, Line(E, G)), Line(E, G))
By median_definition on line_intersection(f, Line(I, K)), H, C, Line(I, K) we get Line(I, K) == median(line_intersection(f, Line(I, K)), C, H)
By tangents_angle_bisector on B, E, G, c we get angle(E, B, center(c)) == angle(center(c), B, G) mod 360
By perpendicular_line_definition on line_intersection(f, Line(I, K)), f, Line(D, G) we get f == perpendicular_line(line_intersection(f, Line(I, K)), Line(D, G))
By line_intersection_definition on center(c), Line(E, center(c)), Line(C, D) we get center(c) == line_intersection(Line(C, D), Line(E, center(c)))
By line_intersection_definition on center(Circle(C, D, E)), Line(E, center(Circle(C, D, E))), median(center(Circle(C, D, E)), E, F) we get center(Circle(C, D, E)) == line_intersection(Line(E, center(Circle(C, D, E))), median(center(Circle(C, D, E)), E, F))
By line_intersection_definition on center(c), median(center(c), E, F), Line(E, center(c)) we get center(c) == line_intersection(Line(E, center(c)), median(center(c), E, F))
By tangents_angle_bisector on C, E, F, c we get angle(E, C, center(c)) == angle(center(c), C, F) mod 360
By line_intersection_definition on center(c), Line(F, center(c)), median(center(c), E, F) we get center(c) == line_intersection(Line(F, center(c)), median(center(c), E, F))
By median_definition on line_intersection(f, Line(I, K)), G, C, Line(I, K) we get Line(I, K) == median(line_intersection(f, Line(I, K)), C, G)
By line_intersection_definition on center(c), Line(C, D), Line(G, center(c)) we get center(c) == line_intersection(Line(C, D), Line(G, center(c)))
By line_intersection_definition on midpoint(E, F), Line(E, F), median(center(Circle(C, D, E)), E, F) we get midpoint(E, F) == line_intersection(Line(E, F), median(center(Circle(C, D, E)), E, F))
By perpendicular_line_definition on line_intersection(f, Line(I, K)), Line(I, K), f we get Line(I, K) == perpendicular_line(line_intersection(f, Line(I, K)), f)
By tangents_angle_bisector on A, F, G, c we get angle(F, A, center(c)) == angle(center(c), A, G) mod 360
By perpendicular_line_definition on line_intersection(f, Line(I, K)), f, Line(I, K) we get f == perpendicular_line(line_intersection(f, Line(I, K)), Line(I, K))
By perpendicular_line_definition on line_intersection(j, Line(E, G)), Line(E, G), j we get Line(E, G) == perpendicular_line(line_intersection(j, Line(E, G)), j)
By midpoint_definition_v0 on C, D, center(Circle(C, D, E)) we get midpoint(C, D) == center(Circle(C, D, E))
By perpendicular_line_definition on line_intersection(i, Line(F, G)), Line(F, G), i we get Line(F, G) == perpendicular_line(line_intersection(i, Line(F, G)), i)
By perpendicular_line_definition on line_intersection(i, Line(F, G)), Line(F, G), Line(F, H) we get Line(F, G) == perpendicular_line(line_intersection(i, Line(F, G)), Line(F, H))
By tangents_angle_bisector on B, G, E, c we get angle(G, B, center(c)) == angle(center(c), B, E) mod 360
By tangents_angle_bisector on A, G, F, c we get angle(G, A, center(c)) == angle(center(c), A, F) mod 360
By line_uniqueness on D, A, Line(A, center(Circle(A, D, F))), i we get i == Line(A, center(Circle(A, D, F)))
By line_uniqueness on B, D, Line(B, center(Circle(B, D, E))), j we get j == Line(B, center(Circle(B, D, E)))
By perpendicular_direction_conditions_v0 on center(c), E, B, C we get perpendicular(Line(B, C), Line(E, center(c)))
By perpendicular_direction_conditions_v0 on center(c), G, B, G we get perpendicular(Line(B, G), Line(G, center(c)))
By perpendicular_direction_conditions_v0 on center(Circle(A, D, F)), D, F, G we get perpendicular(Line(F, G), Line(D, center(Circle(A, D, F))))
By perpendicular_direction_conditions_v0 on center(Circle(A, D, F)), A, F, G we get perpendicular(Line(F, G), Line(A, center(Circle(A, D, F))))
By projection_definition on C, midpoint(E, F), Line(E, F) we get midpoint(E, F) == projection(C, Line(E, F))
By perpendicular_direction_conditions_v0 on G, center(c), B, A we get perpendicular(Line(A, B), Line(G, center(c)))
By perpendicular_direction_conditions_v0 on B, E, center(c), E we get perpendicular(Line(B, E), Line(E, center(c)))
By perpendicular_direction_conditions_v0 on H, center(c), G, B we get perpendicular(Line(B, G), Line(H, center(c)))
By perpendicular_direction_conditions_v0 on E, center(c), E, C we get perpendicular(Line(C, E), Line(E, center(c)))
By perpendicular_direction_conditions_v0 on F, C, F, center(c) we get perpendicular(Line(C, F), Line(F, center(c)))
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, D, center(Circle(C, D, E)) we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(D, center(Circle(C, D, E))) mod 360
By perpendicular_direction_conditions_v0 on center(c), F, A, F we get perpendicular(Line(A, F), Line(F, center(c)))
By perpendicular_direction_conditions_v0 on G, E, center(Circle(B, D, E)), B we get perpendicular(Line(E, G), Line(B, center(Circle(B, D, E))))
By perpendicular_direction_conditions_v0_r on C, D, midpoint(E, F), F we get 180 == 2 * direction(C, D) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0 on A, G, center(c), H we get perpendicular(Line(A, G), Line(H, center(c)))
By perpendicular_direction_conditions_v0 on G, A, G, center(c) we get perpendicular(Line(A, G), Line(G, center(c)))
By perpendicular_direction_conditions_v0 on center(c), F, A, C we get perpendicular(Line(A, C), Line(F, center(c)))
By perpendicular_direction_conditions_v0 on A, B, center(c), H we get perpendicular(Line(A, B), Line(H, center(c)))
By projection_definition on F, midpoint(E, F), Line(C, D) we get midpoint(E, F) == projection(F, Line(C, D))
By perpendicular_direction_conditions_v0 on D, center(Circle(B, D, E)), G, E we get perpendicular(Line(E, G), Line(D, center(Circle(B, D, E))))
By perpendicular_direction_conditions_v0_r on center(Circle(C, D, E)), C, midpoint(E, F), F we get 180 == 2 * direction(center(Circle(C, D, E)), C) - 2 * direction(midpoint(E, F), F) mod 360
By projection_definition on E, midpoint(E, F), Line(C, D) we get midpoint(E, F) == projection(E, Line(C, D))
By projection_definition on D, midpoint(E, F), Line(E, F) we get midpoint(E, F) == projection(D, Line(E, F))
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, D, C we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(C, D, E)), C, midpoint(E, F), E we get 180 == 2 * direction(center(Circle(C, D, E)), C) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, C, D we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on D, center(Circle(C, D, E)), midpoint(E, F), E we get 180 == 2 * direction(D, center(Circle(C, D, E))) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, center(Circle(C, D, E)), C we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(center(Circle(C, D, E)), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, C, center(Circle(C, D, E)) we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(C, center(Circle(C, D, E))) mod 360
By perpendicular_direction_conditions_v0_r on C, center(Circle(C, D, E)), midpoint(E, F), E we get 180 == 2 * direction(C, center(Circle(C, D, E))) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on D, C, midpoint(E, F), E we get 180 == 2 * direction(D, C) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(C, D, E)), D, midpoint(E, F), E we get 180 == 2 * direction(center(Circle(C, D, E)), D) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, center(Circle(C, D, E)), D we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(center(Circle(C, D, E)), D) mod 360
By perpendicular_direction_conditions_v0_r on C, D, midpoint(E, F), E we get 180 == 2 * direction(C, D) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on C, center(Circle(C, D, E)), midpoint(E, F), F we get 180 == 2 * direction(C, center(Circle(C, D, E))) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, C, center(Circle(C, D, E)) we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(C, center(Circle(C, D, E))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, D, center(Circle(C, D, E)) we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(D, center(Circle(C, D, E))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, center(Circle(C, D, E)), C we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(center(Circle(C, D, E)), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, C, D we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, D, C we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(C, D, E)), D, midpoint(E, F), F we get 180 == 2 * direction(center(Circle(C, D, E)), D) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on D, C, midpoint(E, F), F we get 180 == 2 * direction(D, C) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, center(Circle(C, D, E)), D we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(center(Circle(C, D, E)), D) mod 360
By perpendicular_direction_conditions_v0_r on D, center(Circle(C, D, E)), midpoint(E, F), F we get 180 == 2 * direction(D, center(Circle(C, D, E))) - 2 * direction(midpoint(E, F), F) mod 360
By parallel_line_definition on line_intersection(i, Line(F, G)), i, Line(F, H) we get i == parallel_line(line_intersection(i, Line(F, G)), Line(F, H))
By circle_radius_v0_r on C, Circle(C, H, J) we get radius(Circle(C, H, J)) == distance(C, center(Circle(C, H, J)))
By parallel_line_definition on line_intersection(f, Line(I, K)), Line(I, K), Line(D, G) we get Line(I, K) == parallel_line(line_intersection(f, Line(I, K)), Line(D, G))
By parallel_line_definition on line_intersection(j, Line(E, G)), j, k we get j == parallel_line(line_intersection(j, Line(E, G)), k)
By circle_radius_v0_r on J, Circle(C, H, J) we get radius(Circle(C, H, J)) == distance(J, center(Circle(C, H, J)))
By circle_radius_v0_r on H, Circle(C, H, J) we get radius(Circle(C, H, J)) == distance(H, center(Circle(C, H, J)))
By tangent_lengths_equal on C, g, h, c we get distance(C, line_circle_tangent_point(g, c)) == distance(C, line_circle_tangent_point(h, c))
By angle_to_center on H, C, J, Circle(C, H, J) we get 2 * angle(H, C, J) == angle(H, center(Circle(C, H, J)), J) mod 360
By tangent_lengths_equal on A, h, f, c we get distance(A, line_circle_tangent_point(f, c)) == distance(A, line_circle_tangent_point(h, c))
By same_angle_v1 on H, D, G, J we get angle(D, H, J) == angle(G, H, J) mod 360
By tangent_lengths_equal on B, f, g, c we get distance(B, line_circle_tangent_point(f, c)) == distance(B, line_circle_tangent_point(g, c))
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), E, midpoint(E, F) we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(E, midpoint(E, F)) mod 360
By angle_to_center on J, H, C, Circle(C, H, J) we get 2 * angle(J, H, C) == angle(J, center(Circle(C, H, J)), C) mod 360
By angle_to_center on J, C, H, Circle(C, H, J) we get 2 * angle(J, C, H) == angle(J, center(Circle(C, H, J)), H) mod 360
By angle_to_center on C, H, J, Circle(C, H, J) we get 2 * angle(C, H, J) == angle(C, center(Circle(C, H, J)), J) mod 360
By same_angle_v1 on H, G, D, K we get angle(D, H, K) == angle(G, H, K) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), C, midpoint(E, F) we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(C, midpoint(E, F)) mod 360
By same_angle_v1 on H, G, D, E we get angle(D, H, E) == angle(G, H, E) mod 360
By same_angle_v3 on D, H, G, C we get angle(H, D, C) == angle(G, D, C) + 180 mod 360
By same_angle_v0 on H, C, K, D we get angle(C, H, D) == angle(K, H, D) mod 360
By same_angle_v2 on D, H, G, B we get angle(H, D, B) == angle(G, D, B) + 180 mod 360
By perpendicular_direction_conditions_v0_r on B, A, H, D we get 180 == 2 * direction(B, A) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on E, F, midpoint(E, F), C we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(E, F), C) mod 360
By perpendicular_direction_conditions_v0_r on H, D, G, B we get 180 == 2 * direction(H, D) - 2 * direction(G, B) mod 360
By same_angle_v3 on D, G, H, F we get angle(G, D, F) == angle(H, D, F) + 180 mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), midpoint(E, F), C we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(midpoint(E, F), C) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), midpoint(E, F), E we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), F, E we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on H, D, G, A we get 180 == 2 * direction(H, D) - 2 * direction(G, A) mod 360
By same_angle_v1 on H, D, G, C we get angle(D, H, C) == angle(G, H, C) mod 360
By same_angle_v3 on D, H, G, E we get angle(H, D, E) == angle(G, D, E) + 180 mod 360
By same_angle_v3 on D, G, H, A we get angle(G, D, A) == angle(H, D, A) + 180 mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), midpoint(E, F), F we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on B, G, D, H we get 180 == 2 * direction(B, G) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on E, F, D, midpoint(E, F) we get 180 == 2 * direction(E, F) - 2 * direction(D, midpoint(E, F)) mod 360
By same_angle_v0 on H, G, D, F we get angle(D, H, F) == angle(G, H, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, midpoint(E, F), D we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on F, E, midpoint(E, F), D we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on D, H, G, B we get 180 == 2 * direction(D, H) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on G, B, H, D we get 180 == 2 * direction(G, B) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, C, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, midpoint(E, F), E we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on H, D, B, A we get 180 == 2 * direction(H, D) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), E, midpoint(E, F) we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, F, midpoint(E, F), D we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on A, B, H, D we get 180 == 2 * direction(A, B) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), midpoint(E, F), D we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, D, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, D, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), midpoint(E, F), C we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(midpoint(E, F), C) mod 360
By perpendicular_direction_conditions_v0_r on D, H, G, A we get 180 == 2 * direction(D, H) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, E, F we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, midpoint(E, F), D we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, midpoint(E, F), C we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(midpoint(E, F), C) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), F, midpoint(E, F) we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), midpoint(E, F), D we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, midpoint(E, F), C we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(midpoint(E, F), C) mod 360
By perpendicular_direction_conditions_v0_r on A, B, D, H we get 180 == 2 * direction(A, B) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on A, G, D, H we get 180 == 2 * direction(A, G) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, midpoint(E, F), F we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on F, E, C, midpoint(E, F) we get 180 == 2 * direction(F, E) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, midpoint(E, F), F we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, F, E we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, midpoint(E, F), E we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on B, G, H, D we get 180 == 2 * direction(B, G) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), midpoint(E, F), F we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, E, F we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on D, H, A, G we get 180 == 2 * direction(D, H) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on B, A, D, H we get 180 == 2 * direction(B, A) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on G, B, D, H we get 180 == 2 * direction(G, B) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, E, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on A, G, H, D we get 180 == 2 * direction(A, G) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on G, A, H, D we get 180 == 2 * direction(G, A) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), E, F we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on H, D, A, B we get 180 == 2 * direction(H, D) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on F, E, midpoint(E, F), C we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(E, F), C) mod 360
By perpendicular_direction_conditions_v0_r on D, H, B, A we get 180 == 2 * direction(D, H) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), F, midpoint(E, F) we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(F, midpoint(E, F)) mod 360
By probably_between_and_collinear_implies_between on H, D, G we get between(G, D, H)
By perpendicular_direction_conditions_v0_r on D, H, B, G we get 180 == 2 * direction(D, H) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, F, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), D, midpoint(E, F) we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, C, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on F, E, D, midpoint(E, F) we get 180 == 2 * direction(F, E) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on G, A, D, H we get 180 == 2 * direction(G, A) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), D, midpoint(E, F) we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), C, midpoint(E, F) we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on H, D, A, G we get 180 == 2 * direction(H, D) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, F, E we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), midpoint(E, F), E we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, F, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, H, A, B we get 180 == 2 * direction(D, H) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on H, D, B, G we get 180 == 2 * direction(H, D) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), F, E we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, E, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), E, F we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on E, F, C, midpoint(E, F) we get 180 == 2 * direction(E, F) - 2 * direction(C, midpoint(E, F)) mod 360
By in_imply_collinear on line_intersection(i, Line(F, G)), D, A we get collinear(A, D, line_intersection(i, Line(F, G)))
By in_imply_collinear on line_intersection(j, Line(E, G)), D, B we get collinear(B, D, line_intersection(j, Line(E, G)))
By in_imply_collinear on line_intersection(f, Line(I, K)), I, K we get collinear(I, K, line_intersection(f, Line(I, K)))
By in_imply_collinear on line_intersection(f, Line(I, K)), B, G we get collinear(B, G, line_intersection(f, Line(I, K)))
By internal_angle_bisector_definition_v0_r on F, center(Circle(A, D, F)), G, D we get internal_angle_bisector(F, D, G) == Line(D, center(Circle(A, D, F)))
By collinear_definition on C, center(Circle(C, D, E)), D we get center(Circle(C, D, E)) in Line(C, D), D in Line(C, center(Circle(C, D, E))), Line(C, D) == Line(C, center(Circle(C, D, E))), 0 == 2 * angle(center(Circle(C, D, E)), C, D) mod 360
By anti_similar_triangle_basic_properties on F, H, E, B, D, A we get angle(F, H, E) == 0 - angle(B, D, A) mod 360, angle(H, E, F) == 0 - angle(D, A, B) mod 360, angle(E, F, H) == 0 - angle(A, B, D) mod 360, log(distance(B, D)) + log(distance(E, H)) == log(distance(F, H)) + log(distance(A, D)), log(distance(A, D)) + log(distance(E, F)) == log(distance(E, H)) + log(distance(A, B)), log(distance(A, B)) + log(distance(F, H)) == log(distance(E, F)) + log(distance(B, D))
By in_imply_collinear on center(c), D, C we get collinear(C, D, center(c))
By in_imply_collinear on line_intersection(j, Line(E, G)), E, G we get collinear(E, G, line_intersection(j, Line(E, G)))
By in_imply_collinear on center(c), midpoint(E, F), D we get collinear(D, center(c), midpoint(E, F))
By in_imply_collinear on center(c), center(Circle(C, D, E)), D we get collinear(D, center(c), center(Circle(C, D, E)))
By in_imply_collinear on center(c), center(Circle(C, D, E)), C we get collinear(C, center(c), center(Circle(C, D, E)))
By in_imply_collinear on line_intersection(i, Line(F, G)), G, F we get collinear(F, G, line_intersection(i, Line(F, G)))
By in_imply_collinear on line_intersection(f, Line(I, K)), G, A we get collinear(A, G, line_intersection(f, Line(I, K)))
By in_imply_collinear on center(Circle(C, D, E)), midpoint(E, F), C we get collinear(C, midpoint(E, F), center(Circle(C, D, E)))
By in_imply_collinear on line_intersection(f, Line(I, K)), A, B we get collinear(A, B, line_intersection(f, Line(I, K)))
By in_imply_collinear on center(Circle(C, D, E)), D, midpoint(E, F) we get collinear(D, midpoint(E, F), center(Circle(C, D, E)))
By in_imply_collinear on center(c), midpoint(E, F), C we get collinear(C, center(c), midpoint(E, F))
By collinear_definition on H, center(c), G we get center(c) in Line(G, H), G in Line(H, center(c)), Line(G, H) == Line(H, center(c)), 0 == 2 * angle(center(c), H, G) mod 360
By reverse_direction on midpoint(E, F), F we get 180 == direction(midpoint(E, F), F) - direction(F, midpoint(E, F)) mod 360
By anti_similar_triangle_basic_properties on A, D, B, E, H, F we get angle(A, D, B) == 0 - angle(E, H, F) mod 360, angle(D, B, A) == 0 - angle(H, F, E) mod 360, angle(B, A, D) == 0 - angle(F, E, H) mod 360, log(distance(A, D)) + log(distance(F, H)) == log(distance(E, H)) + log(distance(B, D)), log(distance(B, D)) + log(distance(E, F)) == log(distance(F, H)) + log(distance(A, B)), log(distance(A, B)) + log(distance(E, H)) == log(distance(E, F)) + log(distance(A, D))
By collinear_definition on G, D, H we get D in Line(G, H), H in Line(D, G), Line(D, G) == Line(G, H), 0 == 2 * angle(D, G, H) mod 360
By concyclic_definition_0 on G, A, F, center(c) we get center(c) in Circle(A, F, G)
By concyclic_definition_0 on F, C, E, center(c) we get center(c) in Circle(C, E, F)
By perpendicular_bisector_sufficient_conditions on F, E, center(c), midpoint(E, F) we get perpendicular_bisector(E, F) == Line(center(c), midpoint(E, F))
By internal_angle_bisector_definition_v0 on A, center(Circle(C, D, E)), B, C we get angle(A, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, B) mod 360
By perpendicular_bisector_sufficient_conditions on E, F, midpoint(E, F), center(Circle(C, D, E)) we get perpendicular_bisector(E, F) == Line(midpoint(E, F), center(Circle(C, D, E)))
By internal_angle_bisector_definition_v0 on B, center(Circle(C, D, E)), A, C we get angle(B, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, A) mod 360
By collinear_definition on H, G, center(c) we get G in Line(H, center(c)), center(c) in Line(G, H), Line(G, H) == Line(H, center(c)), 0 == 2 * angle(G, H, center(c)) mod 360
By internal_angle_bisector_definition_v0 on F, center(Circle(C, D, E)), B, C we get angle(F, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, B) mod 360
By internal_angle_bisector_definition_v0 on B, center(Circle(C, D, E)), F, C we get angle(B, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, F) mod 360
By reverse_direction on F, midpoint(E, F) we get 180 == direction(F, midpoint(E, F)) - direction(midpoint(E, F), F) mod 360
By collinear_definition on C, D, center(Circle(C, D, E)) we get D in Line(C, center(Circle(C, D, E))), center(Circle(C, D, E)) in Line(C, D), Line(C, D) == Line(C, center(Circle(C, D, E))), 0 == 2 * angle(D, C, center(Circle(C, D, E))) mod 360
By collinear_definition on D, A, center(Circle(A, D, F)) we get A in Line(D, center(Circle(A, D, F))), center(Circle(A, D, F)) in Line(A, D), Line(A, D) == Line(D, center(Circle(A, D, F))), 0 == 2 * angle(A, D, center(Circle(A, D, F))) mod 360
By collinear_definition on G, H, D we get H in Line(D, G), D in Line(G, H), Line(D, G) == Line(G, H), 0 == 2 * angle(H, G, D) mod 360
By collinear_definition on A, D, center(Circle(A, D, F)) we get D in Line(A, center(Circle(A, D, F))), center(Circle(A, D, F)) in Line(A, D), Line(A, D) == Line(A, center(Circle(A, D, F))), 0 == 2 * angle(D, A, center(Circle(A, D, F))) mod 360
By internal_angle_bisector_definition_v0_r on E, center(Circle(B, D, E)), G, B we get internal_angle_bisector(E, B, G) == Line(B, center(Circle(B, D, E)))
By reverse_direction on E, midpoint(E, F) we get 180 == direction(E, midpoint(E, F)) - direction(midpoint(E, F), E) mod 360
By concyclic_definition_0 on G, E, B, center(c) we get center(c) in Circle(B, E, G)
By collinear_definition on D, B, center(Circle(B, D, E)) we get B in Line(D, center(Circle(B, D, E))), center(Circle(B, D, E)) in Line(B, D), Line(B, D) == Line(D, center(Circle(B, D, E))), 0 == 2 * angle(B, D, center(Circle(B, D, E))) mod 360
By collinear_definition on D, center(Circle(C, D, E)), C we get center(Circle(C, D, E)) in Line(C, D), C in Line(D, center(Circle(C, D, E))), Line(C, D) == Line(D, center(Circle(C, D, E))), 0 == 2 * angle(center(Circle(C, D, E)), D, C) mod 360
By collinear_definition on D, center(Circle(B, D, E)), B we get center(Circle(B, D, E)) in Line(B, D), B in Line(D, center(Circle(B, D, E))), Line(B, D) == Line(D, center(Circle(B, D, E))), 0 == 2 * angle(center(Circle(B, D, E)), D, B) mod 360
By collinear_definition on G, H, center(c) we get H in Line(G, center(c)), center(c) in Line(G, H), Line(G, H) == Line(G, center(c)), 0 == 2 * angle(H, G, center(c)) mod 360
By collinear_definition on B, D, center(Circle(B, D, E)) we get D in Line(B, center(Circle(B, D, E))), center(Circle(B, D, E)) in Line(B, D), Line(B, D) == Line(B, center(Circle(B, D, E))), 0 == 2 * angle(D, B, center(Circle(B, D, E))) mod 360
By internal_angle_bisector_definition_v0 on E, center(Circle(C, D, E)), A, C we get angle(E, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, A) mod 360
By collinear_definition on D, C, center(Circle(C, D, E)) we get C in Line(D, center(Circle(C, D, E))), center(Circle(C, D, E)) in Line(C, D), Line(C, D) == Line(D, center(Circle(C, D, E))), 0 == 2 * angle(C, D, center(Circle(C, D, E))) mod 360
By internal_angle_bisector_definition_v0_r on F, center(Circle(A, D, F)), G, A we get internal_angle_bisector(F, A, G) == Line(A, center(Circle(A, D, F)))
By collinear_definition on B, center(Circle(B, D, E)), D we get center(Circle(B, D, E)) in Line(B, D), D in Line(B, center(Circle(B, D, E))), Line(B, D) == Line(B, center(Circle(B, D, E))), 0 == 2 * angle(center(Circle(B, D, E)), B, D) mod 360
By internal_angle_bisector_definition_v0_r on G, center(Circle(B, D, E)), E, D we get internal_angle_bisector(E, D, G) == Line(D, center(Circle(B, D, E)))
By collinear_definition on center(c), G, H we get G in Line(H, center(c)), H in Line(G, center(c)), Line(G, center(c)) == Line(H, center(c)), 0 == 2 * angle(G, center(c), H) mod 360
By collinear_definition on D, center(Circle(A, D, F)), A we get center(Circle(A, D, F)) in Line(A, D), A in Line(D, center(Circle(A, D, F))), Line(A, D) == Line(D, center(Circle(A, D, F))), 0 == 2 * angle(center(Circle(A, D, F)), D, A) mod 360
By internal_angle_bisector_definition_v0 on A, center(Circle(C, D, E)), E, C we get angle(A, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, E) mod 360
By reverse_direction on midpoint(E, F), E we get 180 == direction(midpoint(E, F), E) - direction(E, midpoint(E, F)) mod 360
By collinear_definition on A, center(Circle(A, D, F)), D we get center(Circle(A, D, F)) in Line(A, D), D in Line(A, center(Circle(A, D, F))), Line(A, D) == Line(A, center(Circle(A, D, F))), 0 == 2 * angle(center(Circle(A, D, F)), A, D) mod 360
By collinear_definition on G, center(c), H we get center(c) in Line(G, H), H in Line(G, center(c)), Line(G, H) == Line(G, center(c)), 0 == 2 * angle(center(c), G, H) mod 360
By collinear_definition on C, midpoint(E, F), D we get midpoint(E, F) in Line(C, D), D in Line(C, midpoint(E, F)), Line(C, D) == Line(C, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), C, D) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(E, F), E, midpoint(E, F), F we get Line(E, F) == internal_angle_bisector(midpoint(E, F), F, midpoint(E, F))
By collinear_definition on D, G, H we get G in Line(D, H), H in Line(D, G), Line(D, G) == Line(D, H), 0 == 2 * angle(G, D, H) mod 360
By internal_angle_bisector_definition_v0_r on E, midpoint(E, F), E, F we get internal_angle_bisector(E, F, E) == Line(F, midpoint(E, F))
By concyclic_definition_0 on center(c), A, F, G we get G in Circle(A, F, center(c))
By internal_angle_bisector_definition_v0 on E, midpoint(E, F), F, D we get angle(E, D, midpoint(E, F)) == angle(midpoint(E, F), D, F) mod 360
By concyclic_definition_0 on center(c), E, B, G we get G in Circle(B, E, center(c))
By internal_angle_bisector_definition_v0 on F, midpoint(E, F), B, C we get angle(F, C, midpoint(E, F)) == angle(midpoint(E, F), C, B) mod 360
By concyclic_definition_0 on center(c), E, F, C we get C in Circle(E, F, center(c))
By concyclic_definition_0 on G, center(c), B, E we get E in Circle(B, G, center(c))
By power_of_a_point_in_circle on C, Circle(C, H, J) we get 0 == power_of_a_point(C, Circle(C, H, J))
By concyclic_definition_1 on center(c), F, E, C we get Circle(C, E, F) == Circle(E, F, center(c))
By internal_angle_bisector_definition_v0 on E, midpoint(E, F), A, C we get angle(E, C, midpoint(E, F)) == angle(midpoint(E, F), C, A) mod 360
By parallel_line_angles_reverse_v3 on D, H, K, I we get angle(D, H, K) == angle(I, K, H) + 180 mod 360
By parallel_line_angles_reverse_v2 on I, K, H, D we get angle(I, K, H) == angle(D, H, K) + 180 mod 360
By concyclic_definition_1 on center(c), B, E, G we get Circle(B, E, G) == Circle(B, E, center(c))
By concyclic_definition_0 on G, center(c), F, A we get A in Circle(F, G, center(c))
By concyclic_definition_1 on center(c), C, F, E we get Circle(C, E, F) == Circle(C, F, center(c))
By altitude_definition on center(c), E, F, Line(C, D) we get Line(C, D) == altitude(center(c), E, F)
By concyclic_definition_1 on center(c), A, F, G we get Circle(A, F, G) == Circle(A, F, center(c))
By concyclic_definition_0 on A, G, center(c), F we get F in Circle(A, G, center(c))
By concyclic_definition_0 on center(c), C, E, F we get F in Circle(C, E, center(c))
By concyclic_definition_1 on F, G, A, center(c) we get Circle(A, F, G) == Circle(A, G, center(c))
By internal_angle_bisector_definition_v0 on A, midpoint(E, F), B, C we get angle(A, C, midpoint(E, F)) == angle(midpoint(E, F), C, B) mod 360
By perpendicular_angle_conditions_v0 on F, midpoint(E, F), C we get angle(F, midpoint(E, F), C) == orientation(C, F, midpoint(E, F)) mod 360
By concyclic_definition_1 on B, E, G, center(c) we get Circle(B, E, G) == Circle(E, G, center(c))
By internal_angle_bisector_definition_v0_r on midpoint(E, F), F, midpoint(E, F), E we get Line(E, F) == internal_angle_bisector(midpoint(E, F), E, midpoint(E, F))
By concyclic_definition_1 on center(c), G, F, A we get Circle(A, F, G) == Circle(F, G, center(c))
By internal_angle_bisector_definition_v0 on F, midpoint(E, F), E, C we get angle(F, C, midpoint(E, F)) == angle(midpoint(E, F), C, E) mod 360
By internal_angle_bisector_definition_v0_r on F, E, F, midpoint(E, F) we get Line(E, midpoint(E, F)) == internal_angle_bisector(F, midpoint(E, F), F)
By concyclic_definition_0 on E, G, center(c), B we get B in Circle(E, G, center(c))
By collinear_definition on D, midpoint(E, F), C we get midpoint(E, F) in Line(C, D), C in Line(D, midpoint(E, F)), Line(C, D) == Line(D, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), D, C) mod 360
By collinear_definition on D, H, G we get H in Line(D, G), G in Line(D, H), Line(D, G) == Line(D, H), 0 == 2 * angle(H, D, G) mod 360
By concyclic_definition_0 on F, center(c), C, E we get E in Circle(C, F, center(c))
By internal_angle_bisector_definition_v0 on F, midpoint(E, F), E, D we get angle(F, D, midpoint(E, F)) == angle(midpoint(E, F), D, E) mod 360
By collinear_definition on H, D, G we get D in Line(G, H), G in Line(D, H), Line(D, H) == Line(G, H), 0 == 2 * angle(D, H, G) mod 360
By concyclic_definition_1 on F, C, E, center(c) we get Circle(C, E, F) == Circle(C, E, center(c))
By collinear_definition on H, G, D we get G in Line(D, H), D in Line(G, H), Line(D, H) == Line(G, H), 0 == 2 * angle(G, H, D) mod 360
By collinear_definition on D, C, midpoint(E, F) we get C in Line(D, midpoint(E, F)), midpoint(E, F) in Line(C, D), Line(C, D) == Line(D, midpoint(E, F)), 0 == 2 * angle(C, D, midpoint(E, F)) mod 360
By power_of_a_point_on_circle on H, Circle(C, H, J) we get 0 == power_of_a_point(H, Circle(C, H, J))
By concyclic_definition_1 on center(c), B, G, E we get Circle(B, E, G) == Circle(B, G, center(c))
By perpendicular_angle_conditions_v0 on D, midpoint(E, F), F we get angle(D, midpoint(E, F), F) == orientation(D, midpoint(E, F), F) mod 360
By internal_angle_bisector_definition_v0 on B, midpoint(E, F), F, C we get angle(B, C, midpoint(E, F)) == angle(midpoint(E, F), C, F) mod 360
By internal_angle_bisector_definition_v0 on B, midpoint(E, F), A, C we get angle(B, C, midpoint(E, F)) == angle(midpoint(E, F), C, A) mod 360
By power_of_a_point_in_circle on J, Circle(C, H, J) we get 0 == power_of_a_point(J, Circle(C, H, J))
By internal_angle_bisector_definition_v0 on A, midpoint(E, F), E, C we get angle(A, C, midpoint(E, F)) == angle(midpoint(E, F), C, E) mod 360
By perpendicular_angle_conditions_v0 on F, midpoint(E, F), D we get angle(F, midpoint(E, F), D) == orientation(D, F, midpoint(E, F)) mod 360
By internal_angle_bisector_definition_v0_r on F, midpoint(E, F), F, E we get internal_angle_bisector(F, E, F) == Line(E, midpoint(E, F))
By internal_angle_bisector_definition_v0 on E, midpoint(E, F), F, C we get angle(E, C, midpoint(E, F)) == angle(midpoint(E, F), C, F) mod 360
By perpendicular_angle_conditions_v0 on E, midpoint(E, F), D we get angle(E, midpoint(E, F), D) == orientation(D, E, midpoint(E, F)) mod 360
By perpendicular_angle_conditions_v0 on E, midpoint(E, F), C we get angle(E, midpoint(E, F), C) == orientation(C, E, midpoint(E, F)) mod 360
By perpendicular_angle_conditions_v0 on C, midpoint(E, F), F we get angle(C, midpoint(E, F), F) == orientation(C, midpoint(E, F), F) mod 360
By perpendicular_angle_conditions_v0 on D, midpoint(E, F), E we get angle(D, midpoint(E, F), E) == orientation(D, midpoint(E, F), E) mod 360
By internal_angle_bisector_definition_v0_r on E, F, E, midpoint(E, F) we get Line(F, midpoint(E, F)) == internal_angle_bisector(E, midpoint(E, F), E)
By altitude_definition on center(Circle(C, D, E)), F, E, Line(C, D) we get Line(C, D) == altitude(center(Circle(C, D, E)), E, F)
By collinear_definition on C, D, midpoint(E, F) we get D in Line(C, midpoint(E, F)), midpoint(E, F) in Line(C, D), Line(C, D) == Line(C, midpoint(E, F)), 0 == 2 * angle(D, C, midpoint(E, F)) mod 360
By perpendicular_angle_conditions_v0 on C, midpoint(E, F), E we get angle(C, midpoint(E, F), E) == orientation(C, midpoint(E, F), E) mod 360
By draw_point_of_tangency on f, c we get exists(line_circle_tangent_point(f, c))
By draw_point_of_tangency on g, c we get exists(line_circle_tangent_point(g, c))
By draw_point_of_tangency on h, c we get exists(line_circle_tangent_point(h, c))
By anti_similar_triangle_basic_properties on B, G, center(Circle(B, D, E)), G, B, center(Circle(B, D, E)) we get angle(B, G, center(Circle(B, D, E))) == 0 - angle(G, B, center(Circle(B, D, E))) mod 360, angle(G, center(Circle(B, D, E)), B) == 0 - angle(B, center(Circle(B, D, E)), G) mod 360, angle(center(Circle(B, D, E)), B, G) == 0 - angle(center(Circle(B, D, E)), G, B) mod 360, log(distance(B, G)) + log(distance(B, center(Circle(B, D, E)))) == log(distance(B, G)) + log(distance(G, center(Circle(B, D, E)))), log(distance(B, center(Circle(B, D, E)))) + log(distance(B, center(Circle(B, D, E)))) == log(distance(G, center(Circle(B, D, E)))) + log(distance(G, center(Circle(B, D, E)))), log(distance(B, center(Circle(B, D, E)))) + log(distance(B, G)) == log(distance(G, center(Circle(B, D, E)))) + log(distance(B, G))
By concyclic_definition_1 on A, center(c), F, G we get Circle(A, F, center(c)) == Circle(F, G, center(c))
By anti_similar_triangle_basic_properties on G, E, center(Circle(B, D, E)), E, G, center(Circle(B, D, E)) we get angle(G, E, center(Circle(B, D, E))) == 0 - angle(E, G, center(Circle(B, D, E))) mod 360, angle(E, center(Circle(B, D, E)), G) == 0 - angle(G, center(Circle(B, D, E)), E) mod 360, angle(center(Circle(B, D, E)), G, E) == 0 - angle(center(Circle(B, D, E)), E, G) mod 360, log(distance(E, G)) + log(distance(E, center(Circle(B, D, E)))) == log(distance(E, G)) + log(distance(G, center(Circle(B, D, E)))), log(distance(E, center(Circle(B, D, E)))) + log(distance(E, center(Circle(B, D, E)))) == log(distance(G, center(Circle(B, D, E)))) + log(distance(G, center(Circle(B, D, E)))), log(distance(E, center(Circle(B, D, E)))) + log(distance(E, G)) == log(distance(G, center(Circle(B, D, E)))) + log(distance(E, G))
By altitude_definition on B, D, H, f we get f == altitude(B, D, H)
By altitude_definition on line_intersection(f, Line(I, K)), H, G, f we get f == altitude(line_intersection(f, Line(I, K)), G, H)
By anti_similar_triangle_basic_properties on B, E, center(Circle(B, D, E)), E, B, center(Circle(B, D, E)) we get angle(B, E, center(Circle(B, D, E))) == 0 - angle(E, B, center(Circle(B, D, E))) mod 360, angle(E, center(Circle(B, D, E)), B) == 0 - angle(B, center(Circle(B, D, E)), E) mod 360, angle(center(Circle(B, D, E)), B, E) == 0 - angle(center(Circle(B, D, E)), E, B) mod 360, log(distance(B, E)) + log(distance(B, center(Circle(B, D, E)))) == log(distance(B, E)) + log(distance(E, center(Circle(B, D, E)))), log(distance(B, center(Circle(B, D, E)))) + log(distance(B, center(Circle(B, D, E)))) == log(distance(E, center(Circle(B, D, E)))) + log(distance(E, center(Circle(B, D, E)))), log(distance(B, center(Circle(B, D, E)))) + log(distance(B, E)) == log(distance(E, center(Circle(B, D, E)))) + log(distance(B, E))
By parallel_line_angles_reverse_v2 on E, H, D, B we get angle(E, H, D) == angle(B, D, H) + 180 mod 360
By concyclic_definition_1 on B, center(c), E, G we get Circle(B, E, center(c)) == Circle(E, G, center(c))
By anti_similar_triangle_basic_properties on H, F, center(c), F, H, center(c) we get angle(H, F, center(c)) == 0 - angle(F, H, center(c)) mod 360, angle(F, center(c), H) == 0 - angle(H, center(c), F) mod 360, angle(center(c), H, F) == 0 - angle(center(c), F, H) mod 360, log(distance(F, H)) + log(distance(F, center(c))) == log(distance(F, H)) + log(distance(H, center(c))), log(distance(F, center(c))) + log(distance(F, center(c))) == log(distance(H, center(c))) + log(distance(H, center(c))), log(distance(F, center(c))) + log(distance(F, H)) == log(distance(H, center(c))) + log(distance(F, H))
By anti_similar_triangle_basic_properties on C, F, center(Circle(C, D, E)), F, C, center(Circle(C, D, E)) we get angle(C, F, center(Circle(C, D, E))) == 0 - angle(F, C, center(Circle(C, D, E))) mod 360, angle(F, center(Circle(C, D, E)), C) == 0 - angle(C, center(Circle(C, D, E)), F) mod 360, angle(center(Circle(C, D, E)), C, F) == 0 - angle(center(Circle(C, D, E)), F, C) mod 360, log(distance(C, F)) + log(distance(C, center(Circle(C, D, E)))) == log(distance(C, F)) + log(distance(F, center(Circle(C, D, E)))), log(distance(C, center(Circle(C, D, E)))) + log(distance(C, center(Circle(C, D, E)))) == log(distance(F, center(Circle(C, D, E)))) + log(distance(F, center(Circle(C, D, E)))), log(distance(C, center(Circle(C, D, E)))) + log(distance(C, F)) == log(distance(F, center(Circle(C, D, E)))) + log(distance(C, F))
By sas_anti_similarity on D, E, H, B, G, E we get anti_similar_triangles(B, E, G, D, H, E)
By anti_similar_triangle_basic_properties on H, center(c), E, E, center(c), H we get angle(H, center(c), E) == 0 - angle(E, center(c), H) mod 360, angle(center(c), E, H) == 0 - angle(center(c), H, E) mod 360, angle(E, H, center(c)) == 0 - angle(H, E, center(c)) mod 360, log(distance(E, center(c))) + log(distance(E, center(c))) == log(distance(H, center(c))) + log(distance(H, center(c))), log(distance(E, center(c))) + log(distance(E, H)) == log(distance(H, center(c))) + log(distance(E, H)), log(distance(E, H)) + log(distance(E, center(c))) == log(distance(E, H)) + log(distance(H, center(c)))
By parallel_line_angles_reverse_v3 on F, H, D, A we get angle(F, H, D) == angle(A, D, H) + 180 mod 360
By anti_similar_triangle_basic_properties on center(Circle(A, D, F)), F, G, center(Circle(A, D, F)), G, F we get angle(center(Circle(A, D, F)), F, G) == 0 - angle(center(Circle(A, D, F)), G, F) mod 360, angle(F, G, center(Circle(A, D, F))) == 0 - angle(G, F, center(Circle(A, D, F))) mod 360, angle(G, center(Circle(A, D, F)), F) == 0 - angle(F, center(Circle(A, D, F)), G) mod 360, log(distance(F, center(Circle(A, D, F)))) + log(distance(F, G)) == log(distance(G, center(Circle(A, D, F)))) + log(distance(F, G)), log(distance(F, G)) + log(distance(F, center(Circle(A, D, F)))) == log(distance(F, G)) + log(distance(G, center(Circle(A, D, F)))), log(distance(F, center(Circle(A, D, F)))) + log(distance(F, center(Circle(A, D, F)))) == log(distance(G, center(Circle(A, D, F)))) + log(distance(G, center(Circle(A, D, F))))
By altitude_definition on C, E, midpoint(E, F), Line(C, D) we get Line(C, D) == altitude(C, E, midpoint(E, F))
By anti_similar_triangle_basic_properties on F, D, center(Circle(C, D, E)), D, F, center(Circle(C, D, E)) we get angle(F, D, center(Circle(C, D, E))) == 0 - angle(D, F, center(Circle(C, D, E))) mod 360, angle(D, center(Circle(C, D, E)), F) == 0 - angle(F, center(Circle(C, D, E)), D) mod 360, angle(center(Circle(C, D, E)), F, D) == 0 - angle(center(Circle(C, D, E)), D, F) mod 360, log(distance(D, F)) + log(distance(D, center(Circle(C, D, E)))) == log(distance(D, F)) + log(distance(F, center(Circle(C, D, E)))), log(distance(D, center(Circle(C, D, E)))) + log(distance(D, center(Circle(C, D, E)))) == log(distance(F, center(Circle(C, D, E)))) + log(distance(F, center(Circle(C, D, E)))), log(distance(D, center(Circle(C, D, E)))) + log(distance(D, F)) == log(distance(F, center(Circle(C, D, E)))) + log(distance(D, F))
By radical_axis_definition_v0 on line_intersection(j, Line(E, G)), c, Circle(B, D, E) we get power_of_a_point(line_intersection(j, Line(E, G)), c) == power_of_a_point(line_intersection(j, Line(E, G)), Circle(B, D, E))
By anti_similar_triangle_basic_properties on E, D, center(Circle(C, D, E)), D, E, center(Circle(C, D, E)) we get angle(E, D, center(Circle(C, D, E))) == 0 - angle(D, E, center(Circle(C, D, E))) mod 360, angle(D, center(Circle(C, D, E)), E) == 0 - angle(E, center(Circle(C, D, E)), D) mod 360, angle(center(Circle(C, D, E)), E, D) == 0 - angle(center(Circle(C, D, E)), D, E) mod 360, log(distance(D, E)) + log(distance(D, center(Circle(C, D, E)))) == log(distance(D, E)) + log(distance(E, center(Circle(C, D, E)))), log(distance(D, center(Circle(C, D, E)))) + log(distance(D, center(Circle(C, D, E)))) == log(distance(E, center(Circle(C, D, E)))) + log(distance(E, center(Circle(C, D, E)))), log(distance(D, center(Circle(C, D, E)))) + log(distance(D, E)) == log(distance(E, center(Circle(C, D, E)))) + log(distance(D, E))
By anti_similar_triangle_basic_properties on D, center(Circle(A, D, F)), G, G, center(Circle(A, D, F)), D we get angle(D, center(Circle(A, D, F)), G) == 0 - angle(G, center(Circle(A, D, F)), D) mod 360, angle(center(Circle(A, D, F)), G, D) == 0 - angle(center(Circle(A, D, F)), D, G) mod 360, angle(G, D, center(Circle(A, D, F))) == 0 - angle(D, G, center(Circle(A, D, F))) mod 360, log(distance(D, center(Circle(A, D, F)))) + log(distance(D, center(Circle(A, D, F)))) == log(distance(G, center(Circle(A, D, F)))) + log(distance(G, center(Circle(A, D, F)))), log(distance(D, center(Circle(A, D, F)))) + log(distance(D, G)) == log(distance(G, center(Circle(A, D, F)))) + log(distance(D, G)), log(distance(D, G)) + log(distance(D, center(Circle(A, D, F)))) == log(distance(D, G)) + log(distance(G, center(Circle(A, D, F))))
By anti_similar_triangle_basic_properties on J, F, center(c), F, J, center(c) we get angle(J, F, center(c)) == 0 - angle(F, J, center(c)) mod 360, angle(F, center(c), J) == 0 - angle(J, center(c), F) mod 360, angle(center(c), J, F) == 0 - angle(center(c), F, J) mod 360, log(distance(F, J)) + log(distance(F, center(c))) == log(distance(F, J)) + log(distance(J, center(c))), log(distance(F, center(c))) + log(distance(F, center(c))) == log(distance(J, center(c))) + log(distance(J, center(c))), log(distance(F, center(c))) + log(distance(F, J)) == log(distance(J, center(c))) + log(distance(F, J))
By concyclic_definition_1 on E, F, center(c), C we get Circle(C, F, center(c)) == Circle(E, F, center(c))
By anti_similar_triangle_basic_properties on E, C, center(Circle(C, D, E)), C, E, center(Circle(C, D, E)) we get angle(E, C, center(Circle(C, D, E))) == 0 - angle(C, E, center(Circle(C, D, E))) mod 360, angle(C, center(Circle(C, D, E)), E) == 0 - angle(E, center(Circle(C, D, E)), C) mod 360, angle(center(Circle(C, D, E)), E, C) == 0 - angle(center(Circle(C, D, E)), C, E) mod 360, log(distance(C, E)) + log(distance(C, center(Circle(C, D, E)))) == log(distance(C, E)) + log(distance(E, center(Circle(C, D, E)))), log(distance(C, center(Circle(C, D, E)))) + log(distance(C, center(Circle(C, D, E)))) == log(distance(E, center(Circle(C, D, E)))) + log(distance(E, center(Circle(C, D, E)))), log(distance(C, center(Circle(C, D, E)))) + log(distance(C, E)) == log(distance(E, center(Circle(C, D, E)))) + log(distance(C, E))
By parallel_line_angles_reverse_v3 on B, D, H, E we get angle(B, D, H) == angle(E, H, D) + 180 mod 360
By anti_similar_triangle_basic_properties on E, center(Circle(B, D, E)), D, D, center(Circle(B, D, E)), E we get angle(E, center(Circle(B, D, E)), D) == 0 - angle(D, center(Circle(B, D, E)), E) mod 360, angle(center(Circle(B, D, E)), D, E) == 0 - angle(center(Circle(B, D, E)), E, D) mod 360, angle(D, E, center(Circle(B, D, E))) == 0 - angle(E, D, center(Circle(B, D, E))) mod 360, log(distance(D, center(Circle(B, D, E)))) + log(distance(D, center(Circle(B, D, E)))) == log(distance(E, center(Circle(B, D, E)))) + log(distance(E, center(Circle(B, D, E)))), log(distance(D, center(Circle(B, D, E)))) + log(distance(D, E)) == log(distance(E, center(Circle(B, D, E)))) + log(distance(D, E)), log(distance(D, E)) + log(distance(D, center(Circle(B, D, E)))) == log(distance(D, E)) + log(distance(E, center(Circle(B, D, E))))
By altitude_definition on line_intersection(f, Line(I, K)), H, D, f we get f == altitude(line_intersection(f, Line(I, K)), D, H)
By concyclic_definition_1 on F, E, center(c), C we get Circle(C, E, center(c)) == Circle(E, F, center(c))
By parallel_line_angles_reverse_v2 on A, D, H, F we get angle(A, D, H) == angle(F, H, D) + 180 mod 360
By altitude_definition on A, D, H, f we get f == altitude(A, D, H)
By altitude_definition on line_intersection(j, Line(E, G)), H, E, Line(E, G) we get Line(E, G) == altitude(line_intersection(j, Line(E, G)), E, H)
By altitude_definition on center(Circle(C, D, E)), F, midpoint(E, F), Line(C, D) we get Line(C, D) == altitude(center(Circle(C, D, E)), F, midpoint(E, F))
By anti_similar_triangle_basic_properties on E, F, center(Circle(C, D, E)), F, E, center(Circle(C, D, E)) we get angle(E, F, center(Circle(C, D, E))) == 0 - angle(F, E, center(Circle(C, D, E))) mod 360, angle(F, center(Circle(C, D, E)), E) == 0 - angle(E, center(Circle(C, D, E)), F) mod 360, angle(center(Circle(C, D, E)), E, F) == 0 - angle(center(Circle(C, D, E)), F, E) mod 360, log(distance(E, F)) + log(distance(E, center(Circle(C, D, E)))) == log(distance(E, F)) + log(distance(F, center(Circle(C, D, E)))), log(distance(E, center(Circle(C, D, E)))) + log(distance(E, center(Circle(C, D, E)))) == log(distance(F, center(Circle(C, D, E)))) + log(distance(F, center(Circle(C, D, E)))), log(distance(E, center(Circle(C, D, E)))) + log(distance(E, F)) == log(distance(F, center(Circle(C, D, E)))) + log(distance(E, F))
By anti_similar_triangle_basic_properties on center(Circle(A, D, F)), G, A, center(Circle(A, D, F)), A, G we get angle(center(Circle(A, D, F)), G, A) == 0 - angle(center(Circle(A, D, F)), A, G) mod 360, angle(G, A, center(Circle(A, D, F))) == 0 - angle(A, G, center(Circle(A, D, F))) mod 360, angle(A, center(Circle(A, D, F)), G) == 0 - angle(G, center(Circle(A, D, F)), A) mod 360, log(distance(A, center(Circle(A, D, F)))) + log(distance(A, G)) == log(distance(G, center(Circle(A, D, F)))) + log(distance(A, G)), log(distance(A, G)) + log(distance(A, center(Circle(A, D, F)))) == log(distance(A, G)) + log(distance(G, center(Circle(A, D, F)))), log(distance(A, center(Circle(A, D, F)))) + log(distance(A, center(Circle(A, D, F)))) == log(distance(G, center(Circle(A, D, F)))) + log(distance(G, center(Circle(A, D, F))))
By anti_similar_triangle_basic_properties on E, J, center(c), J, E, center(c) we get angle(E, J, center(c)) == 0 - angle(J, E, center(c)) mod 360, angle(J, center(c), E) == 0 - angle(E, center(c), J) mod 360, angle(center(c), E, J) == 0 - angle(center(c), J, E) mod 360, log(distance(E, J)) + log(distance(E, center(c))) == log(distance(E, J)) + log(distance(J, center(c))), log(distance(E, center(c))) + log(distance(E, center(c))) == log(distance(J, center(c))) + log(distance(J, center(c))), log(distance(E, center(c))) + log(distance(E, J)) == log(distance(J, center(c))) + log(distance(E, J))
By anti_similar_triangle_basic_properties on A, center(Circle(A, D, F)), F, F, center(Circle(A, D, F)), A we get angle(A, center(Circle(A, D, F)), F) == 0 - angle(F, center(Circle(A, D, F)), A) mod 360, angle(center(Circle(A, D, F)), F, A) == 0 - angle(center(Circle(A, D, F)), A, F) mod 360, angle(F, A, center(Circle(A, D, F))) == 0 - angle(A, F, center(Circle(A, D, F))) mod 360, log(distance(A, center(Circle(A, D, F)))) + log(distance(A, center(Circle(A, D, F)))) == log(distance(F, center(Circle(A, D, F)))) + log(distance(F, center(Circle(A, D, F)))), log(distance(A, center(Circle(A, D, F)))) + log(distance(A, F)) == log(distance(F, center(Circle(A, D, F)))) + log(distance(A, F)), log(distance(A, F)) + log(distance(A, center(Circle(A, D, F)))) == log(distance(A, F)) + log(distance(F, center(Circle(A, D, F))))
By anti_similar_triangle_basic_properties on center(c), E, G, center(c), G, E we get angle(center(c), E, G) == 0 - angle(center(c), G, E) mod 360, angle(E, G, center(c)) == 0 - angle(G, E, center(c)) mod 360, angle(G, center(c), E) == 0 - angle(E, center(c), G) mod 360, log(distance(E, center(c))) + log(distance(E, G)) == log(distance(G, center(c))) + log(distance(E, G)), log(distance(E, G)) + log(distance(E, center(c))) == log(distance(E, G)) + log(distance(G, center(c))), log(distance(E, center(c))) + log(distance(E, center(c))) == log(distance(G, center(c))) + log(distance(G, center(c)))
By power_of_a_point_definition on H, G, D, Circle(B, D, E) we get log(distance(G, H)) + log(distance(D, H)) == log(power_of_a_point(H, Circle(B, D, E)))
By concyclic_definition_1 on E, center(c), C, F we get Circle(C, E, center(c)) == Circle(C, F, center(c))
By altitude_definition on center(Circle(C, D, E)), E, midpoint(E, F), Line(C, D) we get Line(C, D) == altitude(center(Circle(C, D, E)), E, midpoint(E, F))
By concyclic_definition_1 on E, G, center(c), B we get Circle(B, G, center(c)) == Circle(E, G, center(c))
By altitude_definition on E, center(Circle(C, D, E)), D, Line(E, F) we get Line(E, F) == altitude(E, D, center(Circle(C, D, E)))
By sas_similarity on B, E, G, D, E, H we get similar_triangles(B, E, G, D, E, H)
By concyclic_definition_1 on F, G, center(c), A we get Circle(A, G, center(c)) == Circle(F, G, center(c))
By altitude_definition on E, D, midpoint(E, F), Line(E, F) we get Line(E, F) == altitude(E, D, midpoint(E, F))
By sas_similarity on H, F, D, G, F, A we get similar_triangles(A, F, G, D, F, H)
By altitude_definition on center(c), F, midpoint(E, F), Line(C, D) we get Line(C, D) == altitude(center(c), F, midpoint(E, F))
By altitude_definition on F, D, midpoint(E, F), Line(E, F) we get Line(E, F) == altitude(F, D, midpoint(E, F))
By altitude_definition on E, center(Circle(C, D, E)), C, Line(E, F) we get Line(E, F) == altitude(E, C, center(Circle(C, D, E)))
By altitude_definition on F, C, center(Circle(C, D, E)), Line(E, F) we get Line(E, F) == altitude(F, C, center(Circle(C, D, E)))
By anti_similar_triangle_basic_properties on center(c), G, F, center(c), F, G we get angle(center(c), G, F) == 0 - angle(center(c), F, G) mod 360, angle(G, F, center(c)) == 0 - angle(F, G, center(c)) mod 360, angle(F, center(c), G) == 0 - angle(G, center(c), F) mod 360, log(distance(F, center(c))) + log(distance(F, G)) == log(distance(G, center(c))) + log(distance(F, G)), log(distance(F, G)) + log(distance(F, center(c))) == log(distance(F, G)) + log(distance(G, center(c))), log(distance(F, center(c))) + log(distance(F, center(c))) == log(distance(G, center(c))) + log(distance(G, center(c)))
By altitude_definition on F, D, center(Circle(C, D, E)), Line(E, F) we get Line(E, F) == altitude(F, D, center(Circle(C, D, E)))
By radical_axis_definition_v0 on line_intersection(i, Line(F, G)), Circle(A, D, F), c we get power_of_a_point(line_intersection(i, Line(F, G)), c) == power_of_a_point(line_intersection(i, Line(F, G)), Circle(A, D, F))
By altitude_definition on D, midpoint(E, F), F, Line(C, D) we get Line(C, D) == altitude(D, F, midpoint(E, F))
By collinear_definition on midpoint(E, F), C, D we get C in Line(D, midpoint(E, F)), D in Line(C, midpoint(E, F)), Line(C, midpoint(E, F)) == Line(D, midpoint(E, F)), 0 == 2 * angle(C, midpoint(E, F), D) mod 360
By altitude_definition on D, E, midpoint(E, F), Line(C, D) we get Line(C, D) == altitude(D, E, midpoint(E, F))
By sas_anti_similarity on B, G, E, D, E, H we get anti_similar_triangles(B, E, G, D, H, E)
By altitude_definition on C, F, midpoint(E, F), Line(C, D) we get Line(C, D) == altitude(C, F, midpoint(E, F))
By anti_similar_triangle_basic_properties on G, center(Circle(B, D, E)), D, D, center(Circle(B, D, E)), G we get angle(G, center(Circle(B, D, E)), D) == 0 - angle(D, center(Circle(B, D, E)), G) mod 360, angle(center(Circle(B, D, E)), D, G) == 0 - angle(center(Circle(B, D, E)), G, D) mod 360, angle(D, G, center(Circle(B, D, E))) == 0 - angle(G, D, center(Circle(B, D, E))) mod 360, log(distance(D, center(Circle(B, D, E)))) + log(distance(D, center(Circle(B, D, E)))) == log(distance(G, center(Circle(B, D, E)))) + log(distance(G, center(Circle(B, D, E)))), log(distance(D, center(Circle(B, D, E)))) + log(distance(D, G)) == log(distance(G, center(Circle(B, D, E)))) + log(distance(D, G)), log(distance(D, G)) + log(distance(D, center(Circle(B, D, E)))) == log(distance(D, G)) + log(distance(G, center(Circle(B, D, E))))
By altitude_definition on center(c), E, midpoint(E, F), Line(C, D) we get Line(C, D) == altitude(center(c), E, midpoint(E, F))
By concyclic_definition_1 on G, center(c), A, F we get Circle(A, F, center(c)) == Circle(A, G, center(c))
By anti_similar_triangle_basic_properties on D, center(Circle(A, D, F)), F, F, center(Circle(A, D, F)), D we get angle(D, center(Circle(A, D, F)), F) == 0 - angle(F, center(Circle(A, D, F)), D) mod 360, angle(center(Circle(A, D, F)), F, D) == 0 - angle(center(Circle(A, D, F)), D, F) mod 360, angle(F, D, center(Circle(A, D, F))) == 0 - angle(D, F, center(Circle(A, D, F))) mod 360, log(distance(D, center(Circle(A, D, F)))) + log(distance(D, center(Circle(A, D, F)))) == log(distance(F, center(Circle(A, D, F)))) + log(distance(F, center(Circle(A, D, F)))), log(distance(D, center(Circle(A, D, F)))) + log(distance(D, F)) == log(distance(F, center(Circle(A, D, F)))) + log(distance(D, F)), log(distance(D, F)) + log(distance(D, center(Circle(A, D, F)))) == log(distance(D, F)) + log(distance(F, center(Circle(A, D, F))))
By anti_similar_triangle_basic_properties on E, F, center(c), F, E, center(c) we get angle(E, F, center(c)) == 0 - angle(F, E, center(c)) mod 360, angle(F, center(c), E) == 0 - angle(E, center(c), F) mod 360, angle(center(c), E, F) == 0 - angle(center(c), F, E) mod 360, log(distance(E, F)) + log(distance(E, center(c))) == log(distance(E, F)) + log(distance(F, center(c))), log(distance(E, center(c))) + log(distance(E, center(c))) == log(distance(F, center(c))) + log(distance(F, center(c))), log(distance(E, center(c))) + log(distance(E, F)) == log(distance(F, center(c))) + log(distance(E, F))
By collinear_definition on midpoint(E, F), D, C we get D in Line(C, midpoint(E, F)), C in Line(D, midpoint(E, F)), Line(C, midpoint(E, F)) == Line(D, midpoint(E, F)), 0 == 2 * angle(D, midpoint(E, F), C) mod 360
By sas_anti_similarity on E, G, B, H, E, D we get anti_similar_triangles(B, E, G, D, H, E)
By altitude_definition on line_intersection(i, Line(F, G)), F, H, Line(F, G) we get Line(F, G) == altitude(line_intersection(i, Line(F, G)), F, H)
By power_of_a_point_definition on H, G, D, Circle(A, D, F) we get log(distance(G, H)) + log(distance(D, H)) == log(power_of_a_point(H, Circle(A, D, F)))
By concyclic_definition_1 on E, center(c), B, G we get Circle(B, E, center(c)) == Circle(B, G, center(c))
By altitude_definition on line_intersection(f, Line(I, K)), G, D, f we get f == altitude(line_intersection(f, Line(I, K)), D, G)
By power_of_a_point_definition on midpoint(E, F), C, D, Circle(C, D, E) we get log(power_of_a_point(midpoint(E, F), Circle(C, D, E))) == log(distance(C, midpoint(E, F))) + log(distance(D, midpoint(E, F)))
By sas_anti_similarity on H, E, D, E, G, B we get anti_similar_triangles(B, E, G, D, H, E)
By altitude_definition on F, C, midpoint(E, F), Line(E, F) we get Line(E, F) == altitude(F, C, midpoint(E, F))
By sas_anti_similarity on D, F, H, A, G, F we get anti_similar_triangles(A, F, G, D, H, F)
By sas_similarity on D, E, H, B, E, G we get similar_triangles(B, E, G, D, E, H)
By sas_similarity on G, F, A, H, F, D we get similar_triangles(A, F, G, D, F, H)
By altitude_definition on E, midpoint(E, F), C, Line(E, F) we get Line(E, F) == altitude(E, C, midpoint(E, F))
By sas_similarity on A, F, G, D, F, H we get similar_triangles(A, F, G, D, F, H)
By sas_anti_similarity on H, F, D, F, G, A we get anti_similar_triangles(A, F, G, D, H, F)
By sas_similarity on D, F, H, A, F, G we get similar_triangles(A, F, G, D, F, H)
By power_of_a_point_definition on I, J, C, Circle(C, H, J) we get log(distance(I, J)) + log(distance(C, I)) == log(power_of_a_point(I, Circle(C, H, J)))
By sas_similarity on G, E, B, H, E, D we get similar_triangles(B, E, G, D, E, H)
By power_of_a_point_definition on K, H, C, Circle(C, H, J) we get log(distance(H, K)) + log(distance(C, K)) == log(power_of_a_point(K, Circle(C, H, J)))
By sas_anti_similarity on F, G, A, H, F, D we get anti_similar_triangles(A, F, G, D, H, F)
By sas_anti_similarity on A, G, F, D, F, H we get anti_similar_triangles(A, F, G, D, H, F)
By sas_similarity on H, E, D, G, E, B we get similar_triangles(B, E, G, D, E, H)
By power_of_a_point_tangent on B, G, c we get log(power_of_a_point(B, c)) == 2 * log(distance(B, G))
By power_of_a_point_tangent on B, E, c we get log(power_of_a_point(B, c)) == 2 * log(distance(B, E))
By power_of_a_point_tangent on A, G, c we get log(power_of_a_point(A, c)) == 2 * log(distance(A, G))
By power_of_a_point_tangent on A, F, c we get log(power_of_a_point(A, c)) == 2 * log(distance(A, F))
By anti_similar_triangle_basic_properties on D, G, center(Circle(B, D, E)), D, E, center(Circle(B, D, E)) we get angle(D, G, center(Circle(B, D, E))) == 0 - angle(D, E, center(Circle(B, D, E))) mod 360, angle(G, center(Circle(B, D, E)), D) == 0 - angle(E, center(Circle(B, D, E)), D) mod 360, angle(center(Circle(B, D, E)), D, G) == 0 - angle(center(Circle(B, D, E)), D, E) mod 360, log(distance(D, E)) + log(distance(G, center(Circle(B, D, E)))) == log(distance(D, G)) + log(distance(E, center(Circle(B, D, E)))), log(distance(E, center(Circle(B, D, E)))) + log(distance(D, center(Circle(B, D, E)))) == log(distance(G, center(Circle(B, D, E)))) + log(distance(D, center(Circle(B, D, E)))), log(distance(D, center(Circle(B, D, E)))) + log(distance(D, E)) == log(distance(D, center(Circle(B, D, E)))) + log(distance(D, G))
By similar_triangle_basic_properties on G, center(Circle(B, D, E)), D, D, center(Circle(B, D, E)), E we get angle(D, center(Circle(B, D, E)), E) == angle(G, center(Circle(B, D, E)), D) mod 360, angle(center(Circle(B, D, E)), D, G) == angle(center(Circle(B, D, E)), E, D) mod 360, angle(D, G, center(Circle(B, D, E))) == angle(E, D, center(Circle(B, D, E))) mod 360, log(distance(D, center(Circle(B, D, E)))) + log(distance(D, center(Circle(B, D, E)))) == log(distance(G, center(Circle(B, D, E)))) + log(distance(E, center(Circle(B, D, E)))), log(distance(D, center(Circle(B, D, E)))) + log(distance(D, E)) == log(distance(E, center(Circle(B, D, E)))) + log(distance(D, G)), log(distance(D, E)) + log(distance(G, center(Circle(B, D, E)))) == log(distance(D, G)) + log(distance(D, center(Circle(B, D, E))))
By similar_triangle_basic_properties on F, A, center(Circle(A, D, F)), A, G, center(Circle(A, D, F)) we get angle(A, G, center(Circle(A, D, F))) == angle(F, A, center(Circle(A, D, F))) mod 360, angle(A, center(Circle(A, D, F)), F) == angle(G, center(Circle(A, D, F)), A) mod 360, angle(center(Circle(A, D, F)), A, G) == angle(center(Circle(A, D, F)), F, A) mod 360, log(distance(A, F)) + log(distance(G, center(Circle(A, D, F)))) == log(distance(A, G)) + log(distance(A, center(Circle(A, D, F)))), log(distance(A, center(Circle(A, D, F)))) + log(distance(A, center(Circle(A, D, F)))) == log(distance(G, center(Circle(A, D, F)))) + log(distance(F, center(Circle(A, D, F)))), log(distance(A, center(Circle(A, D, F)))) + log(distance(A, F)) == log(distance(F, center(Circle(A, D, F)))) + log(distance(A, G))
By anti_similar_triangle_basic_properties on C, center(Circle(C, D, E)), F, C, center(Circle(C, D, E)), E we get angle(C, center(Circle(C, D, E)), F) == 0 - angle(C, center(Circle(C, D, E)), E) mod 360, angle(center(Circle(C, D, E)), F, C) == 0 - angle(center(Circle(C, D, E)), E, C) mod 360, angle(F, C, center(Circle(C, D, E))) == 0 - angle(E, C, center(Circle(C, D, E))) mod 360, log(distance(C, center(Circle(C, D, E)))) + log(distance(E, center(Circle(C, D, E)))) == log(distance(C, center(Circle(C, D, E)))) + log(distance(F, center(Circle(C, D, E)))), log(distance(E, center(Circle(C, D, E)))) + log(distance(C, F)) == log(distance(F, center(Circle(C, D, E)))) + log(distance(C, E)), log(distance(C, E)) + log(distance(C, center(Circle(C, D, E)))) == log(distance(C, F)) + log(distance(C, center(Circle(C, D, E))))
By similar_triangle_basic_properties on D, center(Circle(C, D, E)), F, E, center(Circle(C, D, E)), D we get angle(D, center(Circle(C, D, E)), F) == angle(E, center(Circle(C, D, E)), D) mod 360, angle(center(Circle(C, D, E)), D, E) == angle(center(Circle(C, D, E)), F, D) mod 360, angle(D, E, center(Circle(C, D, E))) == angle(F, D, center(Circle(C, D, E))) mod 360, log(distance(D, center(Circle(C, D, E)))) + log(distance(D, center(Circle(C, D, E)))) == log(distance(E, center(Circle(C, D, E)))) + log(distance(F, center(Circle(C, D, E)))), log(distance(D, center(Circle(C, D, E)))) + log(distance(D, F)) == log(distance(F, center(Circle(C, D, E)))) + log(distance(D, E)), log(distance(D, E)) + log(distance(D, center(Circle(C, D, E)))) == log(distance(D, F)) + log(distance(E, center(Circle(C, D, E))))
By anti_similar_triangle_basic_properties on D, center(Circle(B, D, E)), G, D, center(Circle(B, D, E)), E we get angle(D, center(Circle(B, D, E)), G) == 0 - angle(D, center(Circle(B, D, E)), E) mod 360, angle(center(Circle(B, D, E)), G, D) == 0 - angle(center(Circle(B, D, E)), E, D) mod 360, angle(G, D, center(Circle(B, D, E))) == 0 - angle(E, D, center(Circle(B, D, E))) mod 360, log(distance(D, center(Circle(B, D, E)))) + log(distance(E, center(Circle(B, D, E)))) == log(distance(D, center(Circle(B, D, E)))) + log(distance(G, center(Circle(B, D, E)))), log(distance(E, center(Circle(B, D, E)))) + log(distance(D, G)) == log(distance(G, center(Circle(B, D, E)))) + log(distance(D, E)), log(distance(D, E)) + log(distance(D, center(Circle(B, D, E)))) == log(distance(D, G)) + log(distance(D, center(Circle(B, D, E))))
By anti_similar_triangle_basic_properties on E, B, center(Circle(B, D, E)), G, B, center(Circle(B, D, E)) we get angle(E, B, center(Circle(B, D, E))) == 0 - angle(G, B, center(Circle(B, D, E))) mod 360, angle(B, center(Circle(B, D, E)), E) == 0 - angle(B, center(Circle(B, D, E)), G) mod 360, angle(center(Circle(B, D, E)), E, B) == 0 - angle(center(Circle(B, D, E)), G, B) mod 360, log(distance(B, E)) + log(distance(B, center(Circle(B, D, E)))) == log(distance(B, G)) + log(distance(B, center(Circle(B, D, E)))), log(distance(B, center(Circle(B, D, E)))) + log(distance(E, center(Circle(B, D, E)))) == log(distance(B, center(Circle(B, D, E)))) + log(distance(G, center(Circle(B, D, E)))), log(distance(E, center(Circle(B, D, E)))) + log(distance(B, G)) == log(distance(G, center(Circle(B, D, E)))) + log(distance(B, E))
By similar_triangle_basic_properties on D, G, center(Circle(A, D, F)), F, D, center(Circle(A, D, F)) we get angle(D, G, center(Circle(A, D, F))) == angle(F, D, center(Circle(A, D, F))) mod 360, angle(D, center(Circle(A, D, F)), F) == angle(G, center(Circle(A, D, F)), D) mod 360, angle(center(Circle(A, D, F)), D, G) == angle(center(Circle(A, D, F)), F, D) mod 360, log(distance(D, F)) + log(distance(G, center(Circle(A, D, F)))) == log(distance(D, G)) + log(distance(D, center(Circle(A, D, F)))), log(distance(D, center(Circle(A, D, F)))) + log(distance(D, center(Circle(A, D, F)))) == log(distance(G, center(Circle(A, D, F)))) + log(distance(F, center(Circle(A, D, F)))), log(distance(D, center(Circle(A, D, F)))) + log(distance(D, F)) == log(distance(F, center(Circle(A, D, F)))) + log(distance(D, G))
By similar_triangle_basic_properties on G, center(Circle(B, D, E)), B, B, center(Circle(B, D, E)), E we get angle(B, center(Circle(B, D, E)), E) == angle(G, center(Circle(B, D, E)), B) mod 360, angle(center(Circle(B, D, E)), B, G) == angle(center(Circle(B, D, E)), E, B) mod 360, angle(B, G, center(Circle(B, D, E))) == angle(E, B, center(Circle(B, D, E))) mod 360, log(distance(B, center(Circle(B, D, E)))) + log(distance(B, center(Circle(B, D, E)))) == log(distance(G, center(Circle(B, D, E)))) + log(distance(E, center(Circle(B, D, E)))), log(distance(B, center(Circle(B, D, E)))) + log(distance(B, E)) == log(distance(E, center(Circle(B, D, E)))) + log(distance(B, G)), log(distance(B, E)) + log(distance(G, center(Circle(B, D, E)))) == log(distance(B, G)) + log(distance(B, center(Circle(B, D, E))))
By anti_similar_triangle_basic_properties on C, E, center(Circle(C, D, E)), C, F, center(Circle(C, D, E)) we get angle(C, E, center(Circle(C, D, E))) == 0 - angle(C, F, center(Circle(C, D, E))) mod 360, angle(E, center(Circle(C, D, E)), C) == 0 - angle(F, center(Circle(C, D, E)), C) mod 360, angle(center(Circle(C, D, E)), C, E) == 0 - angle(center(Circle(C, D, E)), C, F) mod 360, log(distance(C, E)) + log(distance(F, center(Circle(C, D, E)))) == log(distance(C, F)) + log(distance(E, center(Circle(C, D, E)))), log(distance(E, center(Circle(C, D, E)))) + log(distance(C, center(Circle(C, D, E)))) == log(distance(F, center(Circle(C, D, E)))) + log(distance(C, center(Circle(C, D, E)))), log(distance(C, center(Circle(C, D, E)))) + log(distance(C, E)) == log(distance(C, center(Circle(C, D, E)))) + log(distance(C, F))
By similar_triangle_basic_properties on B, center(Circle(B, D, E)), G, E, center(Circle(B, D, E)), B we get angle(B, center(Circle(B, D, E)), G) == angle(E, center(Circle(B, D, E)), B) mod 360, angle(center(Circle(B, D, E)), B, E) == angle(center(Circle(B, D, E)), G, B) mod 360, angle(B, E, center(Circle(B, D, E))) == angle(G, B, center(Circle(B, D, E))) mod 360, log(distance(B, center(Circle(B, D, E)))) + log(distance(B, center(Circle(B, D, E)))) == log(distance(E, center(Circle(B, D, E)))) + log(distance(G, center(Circle(B, D, E)))), log(distance(B, center(Circle(B, D, E)))) + log(distance(B, G)) == log(distance(G, center(Circle(B, D, E)))) + log(distance(B, E)), log(distance(B, E)) + log(distance(B, center(Circle(B, D, E)))) == log(distance(B, G)) + log(distance(E, center(Circle(B, D, E))))
By anti_similar_triangle_basic_properties on F, center(Circle(A, D, F)), D, G, center(Circle(A, D, F)), D we get angle(F, center(Circle(A, D, F)), D) == 0 - angle(G, center(Circle(A, D, F)), D) mod 360, angle(center(Circle(A, D, F)), D, F) == 0 - angle(center(Circle(A, D, F)), D, G) mod 360, angle(D, F, center(Circle(A, D, F))) == 0 - angle(D, G, center(Circle(A, D, F))) mod 360, log(distance(F, center(Circle(A, D, F)))) + log(distance(D, center(Circle(A, D, F)))) == log(distance(G, center(Circle(A, D, F)))) + log(distance(D, center(Circle(A, D, F)))), log(distance(D, center(Circle(A, D, F)))) + log(distance(D, F)) == log(distance(D, center(Circle(A, D, F)))) + log(distance(D, G)), log(distance(D, F)) + log(distance(G, center(Circle(A, D, F)))) == log(distance(D, G)) + log(distance(F, center(Circle(A, D, F))))
By anti_similar_triangle_basic_properties on D, center(Circle(C, D, E)), E, D, center(Circle(C, D, E)), F we get angle(D, center(Circle(C, D, E)), E) == 0 - angle(D, center(Circle(C, D, E)), F) mod 360, angle(center(Circle(C, D, E)), E, D) == 0 - angle(center(Circle(C, D, E)), F, D) mod 360, angle(E, D, center(Circle(C, D, E))) == 0 - angle(F, D, center(Circle(C, D, E))) mod 360, log(distance(D, center(Circle(C, D, E)))) + log(distance(E, center(Circle(C, D, E)))) == log(distance(D, center(Circle(C, D, E)))) + log(distance(F, center(Circle(C, D, E)))), log(distance(E, center(Circle(C, D, E)))) + log(distance(D, F)) == log(distance(F, center(Circle(C, D, E)))) + log(distance(D, E)), log(distance(D, E)) + log(distance(D, center(Circle(C, D, E)))) == log(distance(D, F)) + log(distance(D, center(Circle(C, D, E))))
By anti_similar_triangle_basic_properties on center(Circle(C, D, E)), D, E, center(Circle(C, D, E)), D, F we get angle(center(Circle(C, D, E)), D, E) == 0 - angle(center(Circle(C, D, E)), D, F) mod 360, angle(D, E, center(Circle(C, D, E))) == 0 - angle(D, F, center(Circle(C, D, E))) mod 360, angle(E, center(Circle(C, D, E)), D) == 0 - angle(F, center(Circle(C, D, E)), D) mod 360, log(distance(D, center(Circle(C, D, E)))) + log(distance(D, E)) == log(distance(D, center(Circle(C, D, E)))) + log(distance(D, F)), log(distance(D, E)) + log(distance(F, center(Circle(C, D, E)))) == log(distance(D, F)) + log(distance(E, center(Circle(C, D, E)))), log(distance(E, center(Circle(C, D, E)))) + log(distance(D, center(Circle(C, D, E)))) == log(distance(F, center(Circle(C, D, E)))) + log(distance(D, center(Circle(C, D, E))))
By anti_similar_triangle_basic_properties on H, J, center(c), J, H, center(c) we get angle(H, J, center(c)) == 0 - angle(J, H, center(c)) mod 360, angle(J, center(c), H) == 0 - angle(H, center(c), J) mod 360, angle(center(c), H, J) == 0 - angle(center(c), J, H) mod 360, log(distance(H, J)) + log(distance(H, center(c))) == log(distance(H, J)) + log(distance(J, center(c))), log(distance(H, center(c))) + log(distance(H, center(c))) == log(distance(J, center(c))) + log(distance(J, center(c))), log(distance(H, center(c))) + log(distance(H, J)) == log(distance(J, center(c))) + log(distance(H, J))
By anti_similar_triangle_basic_properties on E, center(Circle(B, D, E)), B, G, center(Circle(B, D, E)), B we get angle(E, center(Circle(B, D, E)), B) == 0 - angle(G, center(Circle(B, D, E)), B) mod 360, angle(center(Circle(B, D, E)), B, E) == 0 - angle(center(Circle(B, D, E)), B, G) mod 360, angle(B, E, center(Circle(B, D, E))) == 0 - angle(B, G, center(Circle(B, D, E))) mod 360, log(distance(E, center(Circle(B, D, E)))) + log(distance(B, center(Circle(B, D, E)))) == log(distance(G, center(Circle(B, D, E)))) + log(distance(B, center(Circle(B, D, E)))), log(distance(B, center(Circle(B, D, E)))) + log(distance(B, E)) == log(distance(B, center(Circle(B, D, E)))) + log(distance(B, G)), log(distance(B, E)) + log(distance(G, center(Circle(B, D, E)))) == log(distance(B, G)) + log(distance(E, center(Circle(B, D, E))))
By similar_triangle_basic_properties on center(Circle(A, D, F)), D, F, center(Circle(A, D, F)), G, D we get angle(center(Circle(A, D, F)), D, F) == angle(center(Circle(A, D, F)), G, D) mod 360, angle(D, F, center(Circle(A, D, F))) == angle(G, D, center(Circle(A, D, F))) mod 360, angle(D, center(Circle(A, D, F)), G) == angle(F, center(Circle(A, D, F)), D) mod 360, log(distance(D, center(Circle(A, D, F)))) + log(distance(D, G)) == log(distance(G, center(Circle(A, D, F)))) + log(distance(D, F)), log(distance(D, F)) + log(distance(D, center(Circle(A, D, F)))) == log(distance(D, G)) + log(distance(F, center(Circle(A, D, F)))), log(distance(D, center(Circle(A, D, F)))) + log(distance(D, center(Circle(A, D, F)))) == log(distance(F, center(Circle(A, D, F)))) + log(distance(G, center(Circle(A, D, F))))
By similar_triangle_basic_properties on E, C, center(Circle(C, D, E)), C, F, center(Circle(C, D, E)) we get angle(C, F, center(Circle(C, D, E))) == angle(E, C, center(Circle(C, D, E))) mod 360, angle(C, center(Circle(C, D, E)), E) == angle(F, center(Circle(C, D, E)), C) mod 360, angle(center(Circle(C, D, E)), C, F) == angle(center(Circle(C, D, E)), E, C) mod 360, log(distance(C, E)) + log(distance(F, center(Circle(C, D, E)))) == log(distance(C, F)) + log(distance(C, center(Circle(C, D, E)))), log(distance(C, center(Circle(C, D, E)))) + log(distance(C, center(Circle(C, D, E)))) == log(distance(F, center(Circle(C, D, E)))) + log(distance(E, center(Circle(C, D, E)))), log(distance(C, center(Circle(C, D, E)))) + log(distance(C, E)) == log(distance(E, center(Circle(C, D, E)))) + log(distance(C, F))
By similar_triangle_basic_properties on G, A, center(Circle(A, D, F)), A, F, center(Circle(A, D, F)) we get angle(A, F, center(Circle(A, D, F))) == angle(G, A, center(Circle(A, D, F))) mod 360, angle(A, center(Circle(A, D, F)), G) == angle(F, center(Circle(A, D, F)), A) mod 360, angle(center(Circle(A, D, F)), A, F) == angle(center(Circle(A, D, F)), G, A) mod 360, log(distance(A, F)) + log(distance(A, center(Circle(A, D, F)))) == log(distance(A, G)) + log(distance(F, center(Circle(A, D, F)))), log(distance(A, center(Circle(A, D, F)))) + log(distance(A, center(Circle(A, D, F)))) == log(distance(F, center(Circle(A, D, F)))) + log(distance(G, center(Circle(A, D, F)))), log(distance(A, center(Circle(A, D, F)))) + log(distance(A, G)) == log(distance(G, center(Circle(A, D, F)))) + log(distance(A, F))
By anti_similar_triangle_basic_properties on center(Circle(A, D, F)), G, A, center(Circle(A, D, F)), F, A we get angle(center(Circle(A, D, F)), G, A) == 0 - angle(center(Circle(A, D, F)), F, A) mod 360, angle(G, A, center(Circle(A, D, F))) == 0 - angle(F, A, center(Circle(A, D, F))) mod 360, angle(A, center(Circle(A, D, F)), G) == 0 - angle(A, center(Circle(A, D, F)), F) mod 360, log(distance(F, center(Circle(A, D, F)))) + log(distance(A, G)) == log(distance(G, center(Circle(A, D, F)))) + log(distance(A, F)), log(distance(A, F)) + log(distance(A, center(Circle(A, D, F)))) == log(distance(A, G)) + log(distance(A, center(Circle(A, D, F)))), log(distance(A, center(Circle(A, D, F)))) + log(distance(F, center(Circle(A, D, F)))) == log(distance(A, center(Circle(A, D, F)))) + log(distance(G, center(Circle(A, D, F))))
By anti_similar_triangle_basic_properties on center(c), G, J, center(c), J, G we get angle(center(c), G, J) == 0 - angle(center(c), J, G) mod 360, angle(G, J, center(c)) == 0 - angle(J, G, center(c)) mod 360, angle(J, center(c), G) == 0 - angle(G, center(c), J) mod 360, log(distance(G, center(c))) + log(distance(G, J)) == log(distance(J, center(c))) + log(distance(G, J)), log(distance(G, J)) + log(distance(G, center(c))) == log(distance(G, J)) + log(distance(J, center(c))), log(distance(G, center(c))) + log(distance(G, center(c))) == log(distance(J, center(c))) + log(distance(J, center(c)))
By similar_triangle_basic_properties on C, center(Circle(C, D, E)), F, E, center(Circle(C, D, E)), C we get angle(C, center(Circle(C, D, E)), F) == angle(E, center(Circle(C, D, E)), C) mod 360, angle(center(Circle(C, D, E)), C, E) == angle(center(Circle(C, D, E)), F, C) mod 360, angle(C, E, center(Circle(C, D, E))) == angle(F, C, center(Circle(C, D, E))) mod 360, log(distance(C, center(Circle(C, D, E)))) + log(distance(C, center(Circle(C, D, E)))) == log(distance(E, center(Circle(C, D, E)))) + log(distance(F, center(Circle(C, D, E)))), log(distance(C, center(Circle(C, D, E)))) + log(distance(C, F)) == log(distance(F, center(Circle(C, D, E)))) + log(distance(C, E)), log(distance(C, E)) + log(distance(C, center(Circle(C, D, E)))) == log(distance(C, F)) + log(distance(E, center(Circle(C, D, E))))
By anti_similar_triangle_basic_properties on F, D, center(Circle(A, D, F)), G, D, center(Circle(A, D, F)) we get angle(F, D, center(Circle(A, D, F))) == 0 - angle(G, D, center(Circle(A, D, F))) mod 360, angle(D, center(Circle(A, D, F)), F) == 0 - angle(D, center(Circle(A, D, F)), G) mod 360, angle(center(Circle(A, D, F)), F, D) == 0 - angle(center(Circle(A, D, F)), G, D) mod 360, log(distance(D, F)) + log(distance(D, center(Circle(A, D, F)))) == log(distance(D, G)) + log(distance(D, center(Circle(A, D, F)))), log(distance(D, center(Circle(A, D, F)))) + log(distance(F, center(Circle(A, D, F)))) == log(distance(D, center(Circle(A, D, F)))) + log(distance(G, center(Circle(A, D, F)))), log(distance(F, center(Circle(A, D, F)))) + log(distance(D, G)) == log(distance(G, center(Circle(A, D, F)))) + log(distance(D, F))
By anti_similar_triangle_basic_properties on A, G, center(Circle(A, D, F)), A, F, center(Circle(A, D, F)) we get angle(A, G, center(Circle(A, D, F))) == 0 - angle(A, F, center(Circle(A, D, F))) mod 360, angle(G, center(Circle(A, D, F)), A) == 0 - angle(F, center(Circle(A, D, F)), A) mod 360, angle(center(Circle(A, D, F)), A, G) == 0 - angle(center(Circle(A, D, F)), A, F) mod 360, log(distance(A, F)) + log(distance(G, center(Circle(A, D, F)))) == log(distance(A, G)) + log(distance(F, center(Circle(A, D, F)))), log(distance(F, center(Circle(A, D, F)))) + log(distance(A, center(Circle(A, D, F)))) == log(distance(G, center(Circle(A, D, F)))) + log(distance(A, center(Circle(A, D, F)))), log(distance(A, center(Circle(A, D, F)))) + log(distance(A, F)) == log(distance(A, center(Circle(A, D, F)))) + log(distance(A, G))
By similar_triangle_basic_properties on E, D, center(Circle(C, D, E)), D, F, center(Circle(C, D, E)) we get angle(D, F, center(Circle(C, D, E))) == angle(E, D, center(Circle(C, D, E))) mod 360, angle(D, center(Circle(C, D, E)), E) == angle(F, center(Circle(C, D, E)), D) mod 360, angle(center(Circle(C, D, E)), D, F) == angle(center(Circle(C, D, E)), E, D) mod 360, log(distance(D, E)) + log(distance(F, center(Circle(C, D, E)))) == log(distance(D, F)) + log(distance(D, center(Circle(C, D, E)))), log(distance(D, center(Circle(C, D, E)))) + log(distance(D, center(Circle(C, D, E)))) == log(distance(F, center(Circle(C, D, E)))) + log(distance(E, center(Circle(C, D, E)))), log(distance(D, center(Circle(C, D, E)))) + log(distance(D, E)) == log(distance(E, center(Circle(C, D, E)))) + log(distance(D, F))
By similar_triangle_basic_properties on center(Circle(B, D, E)), G, D, center(Circle(B, D, E)), D, E we get angle(center(Circle(B, D, E)), D, E) == angle(center(Circle(B, D, E)), G, D) mod 360, angle(D, E, center(Circle(B, D, E))) == angle(G, D, center(Circle(B, D, E))) mod 360, angle(D, center(Circle(B, D, E)), G) == angle(E, center(Circle(B, D, E)), D) mod 360, log(distance(D, center(Circle(B, D, E)))) + log(distance(D, G)) == log(distance(G, center(Circle(B, D, E)))) + log(distance(D, E)), log(distance(D, E)) + log(distance(D, center(Circle(B, D, E)))) == log(distance(D, G)) + log(distance(E, center(Circle(B, D, E)))), log(distance(D, center(Circle(B, D, E)))) + log(distance(D, center(Circle(B, D, E)))) == log(distance(E, center(Circle(B, D, E)))) + log(distance(G, center(Circle(B, D, E))))
By power_of_a_point_definition on D, H, G, c we get log(power_of_a_point(D, c)) == log(distance(D, H)) + log(distance(D, G))
By power_of_a_point_definition on G, J, C, Circle(C, H, J) we get log(distance(G, J)) + log(distance(C, G)) == log(power_of_a_point(G, Circle(C, H, J)))
By power_of_a_point_definition on center(Circle(A, D, F)), A, D, Circle(A, D, F) we get log(power_of_a_point(center(Circle(A, D, F)), Circle(A, D, F))) == log(distance(A, center(Circle(A, D, F)))) + log(distance(D, center(Circle(A, D, F))))
By power_of_a_point_definition on center(Circle(C, D, E)), D, C, Circle(C, D, E) we get log(power_of_a_point(center(Circle(C, D, E)), Circle(C, D, E))) == log(distance(D, center(Circle(C, D, E)))) + log(distance(C, center(Circle(C, D, E))))
By power_of_a_point_definition on center(c), H, G, c we get log(power_of_a_point(center(c), c)) == log(distance(H, center(c))) + log(distance(G, center(c)))
By power_of_a_point_definition on center(Circle(B, D, E)), D, B, Circle(B, D, E) we get log(power_of_a_point(center(Circle(B, D, E)), Circle(B, D, E))) == log(distance(D, center(Circle(B, D, E)))) + log(distance(B, center(Circle(B, D, E))))
By isosceles_triangle_altitude_v2 on center(Circle(B, D, E)), E, G we get identical(perpendicular_bisector(E, G), internal_angle_bisector(E, center(Circle(B, D, E)), G), perpendicular_line(center(Circle(B, D, E)), Line(E, G)))
By isosceles_triangle_altitude_v2 on center(Circle(A, D, F)), F, G we get identical(perpendicular_bisector(F, G), internal_angle_bisector(F, center(Circle(A, D, F)), G), perpendicular_line(center(Circle(A, D, F)), Line(F, G)))
By isosceles_triangle_altitude_v2 on center(Circle(B, D, E)), G, E we get identical(perpendicular_bisector(E, G), internal_angle_bisector(E, center(Circle(B, D, E)), G), perpendicular_line(center(Circle(B, D, E)), Line(E, G)))
By isosceles_triangle_altitude_v2 on center(Circle(A, D, F)), G, F we get identical(perpendicular_bisector(F, G), internal_angle_bisector(F, center(Circle(A, D, F)), G), perpendicular_line(center(Circle(A, D, F)), Line(F, G)))
By concurrent_sufficient_conditions on Line(C, D), Line(D, J), Line(D, G) we get concurrent(Line(C, D), Line(D, G), Line(D, J))
By line_definition on line_circle_tangent_point(f, c), line_intersection(f, Line(I, K)), f we get f == Line(line_circle_tangent_point(f, c), line_intersection(f, Line(I, K)))
By line_definition on line_circle_tangent_point(f, c), A, f we get f == Line(A, line_circle_tangent_point(f, c))
By line_definition on line_circle_tangent_point(h, c), C, h we get h == Line(C, line_circle_tangent_point(h, c))
By concurrent_sufficient_conditions on Line(D, F), Line(D, J), Line(C, D) we get concurrent(Line(C, D), Line(D, F), Line(D, J))
By line_definition on B, line_circle_tangent_point(f, c), f we get f == Line(B, line_circle_tangent_point(f, c))
By concurrent_sufficient_conditions on Line(D, J), Line(C, D), Line(D, G) we get concurrent(Line(C, D), Line(D, G), Line(D, J))
By line_definition on line_circle_tangent_point(h, c), A, h we get h == Line(A, line_circle_tangent_point(h, c))
By concurrent_sufficient_conditions on Line(D, J), Line(C, D), Line(D, E) we get concurrent(Line(C, D), Line(D, E), Line(D, J))
By line_definition on line_circle_tangent_point(g, c), B, g we get g == Line(B, line_circle_tangent_point(g, c))
By line_definition on D, midpoint(F, G), i we get i == Line(D, midpoint(F, G))
By concurrent_sufficient_conditions on Line(C, D), Line(D, J), Line(D, F) we get concurrent(Line(C, D), Line(D, F), Line(D, J))
By line_definition on line_intersection(i, Line(F, G)), center(Circle(A, D, F)), i we get i == Line(center(Circle(A, D, F)), line_intersection(i, Line(F, G)))
By concurrent_sufficient_conditions on Line(C, D), Line(D, E), Line(D, J) we get concurrent(Line(C, D), Line(D, E), Line(D, J))
By line_definition on midpoint(E, G), B, j we get j == Line(B, midpoint(E, G))
By concurrent_sufficient_conditions on Line(C, D), Line(D, G), Line(D, J) we get concurrent(Line(C, D), Line(D, G), Line(D, J))
By concurrent_sufficient_conditions on Line(D, J), Line(D, E), Line(C, D) we get concurrent(Line(C, D), Line(D, E), Line(D, J))
By concurrent_sufficient_conditions on Line(D, J), Line(D, F), Line(C, D) we get concurrent(Line(C, D), Line(D, F), Line(D, J))
By concurrent_sufficient_conditions on Line(D, E), Line(D, J), Line(C, D) we get concurrent(Line(C, D), Line(D, E), Line(D, J))
By concurrent_sufficient_conditions on Line(D, J), Line(D, G), Line(C, D) we get concurrent(Line(C, D), Line(D, G), Line(D, J))
By concurrent_sufficient_conditions on Line(D, G), Line(D, J), Line(C, D) we get concurrent(Line(C, D), Line(D, G), Line(D, J))
By line_definition on A, midpoint(F, G), i we get i == Line(A, midpoint(F, G))
By line_definition on center(Circle(B, D, E)), line_intersection(j, Line(E, G)), j we get j == Line(center(Circle(B, D, E)), line_intersection(j, Line(E, G)))
By concurrent_sufficient_conditions on Line(C, D), Line(D, J), Line(D, E) we get concurrent(Line(C, D), Line(D, E), Line(D, J))
By concurrent_sufficient_conditions on Line(D, G), Line(C, D), Line(D, J) we get concurrent(Line(C, D), Line(D, G), Line(D, J))
By line_definition on D, midpoint(E, G), j we get j == Line(D, midpoint(E, G))
By concurrent_sufficient_conditions on Line(D, J), Line(C, D), Line(D, F) we get concurrent(Line(C, D), Line(D, F), Line(D, J))
By line_definition on center(Circle(B, D, E)), midpoint(E, G), j we get j == Line(midpoint(E, G), center(Circle(B, D, E)))
By line_definition on C, line_circle_tangent_point(g, c), g we get g == Line(C, line_circle_tangent_point(g, c))
By concurrent_sufficient_conditions on Line(D, F), Line(C, D), Line(D, J) we get concurrent(Line(C, D), Line(D, F), Line(D, J))
By concurrent_sufficient_conditions on Line(C, D), Line(D, F), Line(D, J) we get concurrent(Line(C, D), Line(D, F), Line(D, J))
By concurrent_sufficient_conditions on Line(D, E), Line(C, D), Line(D, J) we get concurrent(Line(C, D), Line(D, E), Line(D, J))
By line_definition on midpoint(F, G), center(Circle(A, D, F)), i we get i == Line(midpoint(F, G), center(Circle(A, D, F)))
By tangent_definition_from_perpendicularity_v0 on line_circle_tangent_point(g, c), g, c we get perpendicular(g, Line(center(c), line_circle_tangent_point(g, c)))
By tangent_definition_from_perpendicularity_v0 on line_circle_tangent_point(h, c), h, c we get perpendicular(h, Line(center(c), line_circle_tangent_point(h, c)))
By tangent_definition_from_perpendicularity_v0 on line_circle_tangent_point(f, c), f, c we get perpendicular(f, Line(center(c), line_circle_tangent_point(f, c)))
By circle_definition on line_circle_tangent_point(h, c), G, line_circle_tangent_point(g, c), c we get c == Circle(G, line_circle_tangent_point(g, c), line_circle_tangent_point(h, c))
By circle_definition on line_circle_tangent_point(h, c), H, G, c we get c == Circle(G, H, line_circle_tangent_point(h, c))
By line_intersection_definition on K, Line(C, H), Line(J, K) we get K == line_intersection(Line(C, H), Line(J, K))
By median_definition on J, H, C, Line(J, K) we get Line(J, K) == median(J, C, H)
By circle_definition on J, line_circle_tangent_point(g, c), line_circle_tangent_point(f, c), c we get c == Circle(J, line_circle_tangent_point(f, c), line_circle_tangent_point(g, c))
By circle_definition on H, line_circle_tangent_point(g, c), J, c we get c == Circle(H, J, line_circle_tangent_point(g, c))
By median_definition on D, E, G, j we get j == median(D, E, G)
By median_definition on center(Circle(A, D, F)), G, F, i we get i == median(center(Circle(A, D, F)), F, G)
By circle_definition on H, line_circle_tangent_point(g, c), G, c we get c == Circle(G, H, line_circle_tangent_point(g, c))
By circle_definition on F, G, line_circle_tangent_point(g, c), c we get c == Circle(F, G, line_circle_tangent_point(g, c))
By circle_definition on line_circle_tangent_point(f, c), J, E, c we get c == Circle(E, J, line_circle_tangent_point(f, c))
By median_definition on D, F, G, i we get i == median(D, F, G)
By circle_definition on line_circle_tangent_point(g, c), line_circle_tangent_point(h, c), J, c we get c == Circle(J, line_circle_tangent_point(g, c), line_circle_tangent_point(h, c))
By circle_definition on E, line_circle_tangent_point(f, c), F, c we get c == Circle(E, F, line_circle_tangent_point(f, c))
By line_intersection_definition on J, Line(D, J), Line(J, K) we get J == line_intersection(Line(D, J), Line(J, K))
By circle_definition on line_circle_tangent_point(f, c), line_circle_tangent_point(g, c), F, c we get c == Circle(F, line_circle_tangent_point(f, c), line_circle_tangent_point(g, c))
By circle_definition on line_circle_tangent_point(f, c), F, H, c we get c == Circle(F, H, line_circle_tangent_point(f, c))
By circle_definition on line_circle_tangent_point(h, c), H, line_circle_tangent_point(g, c), c we get c == Circle(H, line_circle_tangent_point(g, c), line_circle_tangent_point(h, c))
By perpendicular_line_definition on line_circle_tangent_point(f, c), f, Line(D, G) we get f == perpendicular_line(line_circle_tangent_point(f, c), Line(D, G))
By line_intersection_definition on K, Line(I, K), Line(J, K) we get K == line_intersection(Line(I, K), Line(J, K))
By circle_definition on J, line_circle_tangent_point(g, c), G, c we get c == Circle(G, J, line_circle_tangent_point(g, c))
By circle_definition on line_circle_tangent_point(h, c), line_circle_tangent_point(f, c), H, c we get c == Circle(H, line_circle_tangent_point(f, c), line_circle_tangent_point(h, c))
By circle_definition on G, line_circle_tangent_point(h, c), J, c we get c == Circle(G, J, line_circle_tangent_point(h, c))
By circle_definition on line_circle_tangent_point(g, c), line_circle_tangent_point(f, c), line_circle_tangent_point(h, c), c we get c == Circle(line_circle_tangent_point(f, c), line_circle_tangent_point(g, c), line_circle_tangent_point(h, c))
By circle_definition on line_circle_tangent_point(f, c), H, line_circle_tangent_point(g, c), c we get c == Circle(H, line_circle_tangent_point(f, c), line_circle_tangent_point(g, c))
By circle_definition on E, line_circle_tangent_point(h, c), line_circle_tangent_point(f, c), c we get c == Circle(E, line_circle_tangent_point(f, c), line_circle_tangent_point(h, c))
By concurrent_sufficient_conditions on Line(D, J), j, Line(D, E) we get concurrent(j, Line(D, E), Line(D, J))
By circle_definition on line_circle_tangent_point(g, c), H, F, c we get c == Circle(F, H, line_circle_tangent_point(g, c))
By circle_definition on line_circle_tangent_point(h, c), H, J, c we get c == Circle(H, J, line_circle_tangent_point(h, c))
By midpoint_definition_v1 on H, G, D we get D == midpoint(G, H)
By perpendicular_line_definition on line_circle_tangent_point(g, c), g, Line(D, E) we get g == perpendicular_line(line_circle_tangent_point(g, c), Line(D, E))
By circle_definition on line_circle_tangent_point(f, c), E, H, c we get c == Circle(E, H, line_circle_tangent_point(f, c))
By median_definition on center(Circle(B, D, E)), E, G, j we get j == median(center(Circle(B, D, E)), E, G)
By circumcenter_perpendicular_bisectors on E, G, F we get circumcenter(E, F, G) in perpendicular_bisector(E, G), circumcenter(E, F, G) in perpendicular_bisector(F, G), circumcenter(E, F, G) in perpendicular_bisector(E, F)
By circle_definition on F, J, line_circle_tangent_point(g, c), c we get c == Circle(F, J, line_circle_tangent_point(g, c))
By circle_definition on E, G, line_circle_tangent_point(h, c), c we get c == Circle(E, G, line_circle_tangent_point(h, c))
By circle_definition on E, H, line_circle_tangent_point(h, c), c we get c == Circle(E, H, line_circle_tangent_point(h, c))
By circle_definition on H, J, line_circle_tangent_point(f, c), c we get c == Circle(H, J, line_circle_tangent_point(f, c))
By line_intersection_definition on J, Line(J, K), Line(H, J) we get J == line_intersection(Line(H, J), Line(J, K))
By median_definition on B, E, G, j we get j == median(B, E, G)
By median_definition on F, C, D, Line(F, midpoint(C, D)) we get median(F, C, D) == Line(F, midpoint(C, D))
By line_intersection_definition on J, Line(E, J), Line(J, K) we get J == line_intersection(Line(E, J), Line(J, K))
By circle_definition on line_circle_tangent_point(h, c), E, J, c we get c == Circle(E, J, line_circle_tangent_point(h, c))
By concurrent_sufficient_conditions on Line(D, J), j, Line(C, D) we get concurrent(j, Line(C, D), Line(D, J))
By midpoint_definition_v0 on B, D, center(Circle(B, D, E)) we get midpoint(B, D) == center(Circle(B, D, E))
By concurrent_sufficient_conditions on j, Line(D, J), Line(C, D) we get concurrent(j, Line(C, D), Line(D, J))
By concurrent_sufficient_conditions on i, Line(D, J), Line(D, E) we get concurrent(i, Line(D, E), Line(D, J))
By concurrent_sufficient_conditions on i, Line(D, J), Line(D, G) we get concurrent(i, Line(D, G), Line(D, J))
By circle_definition on J, line_circle_tangent_point(f, c), F, c we get c == Circle(F, J, line_circle_tangent_point(f, c))
By line_intersection_definition on J, Line(J, K), Line(F, J) we get J == line_intersection(Line(F, J), Line(J, K))
By concurrent_sufficient_conditions on Line(D, J), i, Line(D, G) we get concurrent(i, Line(D, G), Line(D, J))
By midpoint_definition_v0 on D, A, center(Circle(A, D, F)) we get midpoint(A, D) == center(Circle(A, D, F))
By concurrent_sufficient_conditions on Line(D, J), j, Line(D, F) we get concurrent(j, Line(D, F), Line(D, J))
By line_intersection_definition on J, l, Line(J, K) we get J == line_intersection(l, Line(J, K))
By concurrent_sufficient_conditions on j, Line(D, J), Line(D, G) we get concurrent(j, Line(D, G), Line(D, J))
By circle_definition on line_circle_tangent_point(f, c), J, line_circle_tangent_point(h, c), c we get c == Circle(J, line_circle_tangent_point(f, c), line_circle_tangent_point(h, c))
By perpendicular_line_definition on line_circle_tangent_point(f, c), f, Line(I, K) we get f == perpendicular_line(line_circle_tangent_point(f, c), Line(I, K))
By median_definition on E, D, C, Line(E, midpoint(C, D)) we get median(E, C, D) == Line(E, midpoint(C, D))
By concurrent_sufficient_conditions on Line(D, J), i, Line(C, D) we get concurrent(i, Line(C, D), Line(D, J))
By concurrent_sufficient_conditions on Line(D, J), i, Line(D, F) we get concurrent(i, Line(D, F), Line(D, J))
By concurrent_sufficient_conditions on Line(D, J), i, Line(D, E) we get concurrent(i, Line(D, E), Line(D, J))
By line_intersection_definition on D, Line(D, J), i we get D == line_intersection(i, Line(D, J))
By concurrent_sufficient_conditions on i, Line(D, J), Line(D, F) we get concurrent(i, Line(D, F), Line(D, J))
By line_intersection_definition on D, j, Line(D, J) we get D == line_intersection(j, Line(D, J))
By concurrent_sufficient_conditions on j, Line(D, J), Line(D, F) we get concurrent(j, Line(D, F), Line(D, J))
By perpendicular_line_definition on line_circle_tangent_point(h, c), h, Line(D, F) we get h == perpendicular_line(line_circle_tangent_point(h, c), Line(D, F))
By concurrent_sufficient_conditions on Line(D, J), j, Line(D, G) we get concurrent(j, Line(D, G), Line(D, J))
By concurrent_sufficient_conditions on j, Line(D, J), Line(D, E) we get concurrent(j, Line(D, E), Line(D, J))
By concurrent_sufficient_conditions on i, Line(D, J), Line(C, D) we get concurrent(i, Line(C, D), Line(D, J))
By median_definition on A, G, F, i we get i == median(A, F, G)
By circle_radius_v0_r on line_circle_tangent_point(g, c), c we get radius(c) == distance(center(c), line_circle_tangent_point(g, c))
By circle_radius_v0_r on line_circle_tangent_point(f, c), c we get radius(c) == distance(center(c), line_circle_tangent_point(f, c))
By circle_radius_v0_r on line_circle_tangent_point(h, c), c we get radius(c) == distance(center(c), line_circle_tangent_point(h, c))
By same_angle_v1 on J, C, I, D we get angle(C, J, D) == angle(I, J, D) mod 360
By same_angle_v3 on J, G, I, D we get angle(G, J, D) == angle(I, J, D) + 180 mod 360
By same_angle_v2 on J, G, C, D we get angle(G, J, D) == angle(C, J, D) + 180 mod 360
By projection_definition on K, line_intersection(f, Line(I, K)), f we get projection(K, f) == line_intersection(f, Line(I, K))
By projection_definition on A, line_intersection(i, Line(F, G)), Line(F, G) we get projection(A, Line(F, G)) == line_intersection(i, Line(F, G))
By projection_definition on D, line_intersection(i, Line(F, G)), Line(F, G) we get projection(D, Line(F, G)) == line_intersection(i, Line(F, G))
By projection_definition on line_intersection(j, Line(E, G)), E, k we get E == projection(line_intersection(j, Line(E, G)), k)
By projection_definition on F, line_intersection(i, Line(F, G)), i we get projection(F, i) == line_intersection(i, Line(F, G))
By projection_definition on midpoint(C, D), midpoint(E, F), Line(E, F) we get midpoint(E, F) == projection(midpoint(C, D), Line(E, F))
By projection_definition on B, line_intersection(j, Line(E, G)), Line(E, G) we get projection(B, Line(E, G)) == line_intersection(j, Line(E, G))
By projection_definition on E, line_intersection(j, Line(E, G)), j we get projection(E, j) == line_intersection(j, Line(E, G))
By between_imply_not_between on G, midpoint(F, G), F we get collinear_and_not_between(F, G, midpoint(F, G))
By projection_definition on A, line_intersection(f, Line(I, K)), Line(I, K) we get projection(A, Line(I, K)) == line_intersection(f, Line(I, K))
By projection_definition on G, line_intersection(f, Line(I, K)), Line(I, K) we get projection(G, Line(I, K)) == line_intersection(f, Line(I, K))
By projection_definition on G, line_intersection(j, Line(E, G)), j we get projection(G, j) == line_intersection(j, Line(E, G))
By between_imply_not_between on H, D, G we get collinear_and_not_between(D, H, G)
By projection_definition on B, line_intersection(f, Line(I, K)), Line(I, K) we get projection(B, Line(I, K)) == line_intersection(f, Line(I, K))
By projection_definition on line_intersection(f, Line(I, K)), G, Line(D, G) we get G == projection(line_intersection(f, Line(I, K)), Line(D, G))
By projection_definition on G, line_intersection(i, Line(F, G)), i we get projection(G, i) == line_intersection(i, Line(F, G))
By projection_definition on line_intersection(i, Line(F, G)), F, Line(F, H) we get F == projection(line_intersection(i, Line(F, G)), Line(F, H))
By projection_definition on I, line_intersection(f, Line(I, K)), f we get projection(I, f) == line_intersection(f, Line(I, K))
By projection_definition on D, line_intersection(j, Line(E, G)), Line(E, G) we get projection(D, Line(E, G)) == line_intersection(j, Line(E, G))
By between_imply_not_between on E, midpoint(E, G), G we get collinear_and_not_between(G, E, midpoint(E, G))
By between_imply_not_between on G, D, H we get collinear_and_not_between(D, G, H)
By between_imply_not_between on G, midpoint(E, G), E we get collinear_and_not_between(E, G, midpoint(E, G))
By between_imply_not_between on F, midpoint(F, G), G we get collinear_and_not_between(G, F, midpoint(F, G))
By between_imply_not_between on D, midpoint(C, D), C we get collinear_and_not_between(C, D, midpoint(C, D))
By between_imply_not_between on C, midpoint(C, D), D we get collinear_and_not_between(D, C, midpoint(C, D))
By parallel_line_definition on center(Circle(B, D, E)), j, k we get j == parallel_line(center(Circle(B, D, E)), k)
By parallel_line_definition on midpoint(F, G), i, Line(F, H) we get i == parallel_line(midpoint(F, G), Line(F, H))
By parallel_line_definition on center(Circle(A, D, F)), i, Line(F, H) we get i == parallel_line(center(Circle(A, D, F)), Line(F, H))
By parallel_line_definition on midpoint(E, G), j, k we get j == parallel_line(midpoint(E, G), k)
By angle_to_center on J, line_circle_tangent_point(f, c), F, c we get angle(J, center(c), F) == 2 * angle(J, line_circle_tangent_point(f, c), F) mod 360
By angle_to_center on G, line_circle_tangent_point(g, c), J, c we get angle(G, center(c), J) == 2 * angle(G, line_circle_tangent_point(g, c), J) mod 360
By angle_to_center on J, E, line_circle_tangent_point(f, c), c we get angle(J, center(c), line_circle_tangent_point(f, c)) == 2 * angle(J, E, line_circle_tangent_point(f, c)) mod 360
By angle_to_center on E, J, line_circle_tangent_point(h, c), c we get angle(E, center(c), line_circle_tangent_point(h, c)) == 2 * angle(E, J, line_circle_tangent_point(h, c)) mod 360
By angle_to_center on line_circle_tangent_point(h, c), E, H, c we get angle(line_circle_tangent_point(h, c), center(c), H) == 2 * angle(line_circle_tangent_point(h, c), E, H) mod 360
By angle_to_center on line_circle_tangent_point(h, c), J, H, c we get angle(line_circle_tangent_point(h, c), center(c), H) == 2 * angle(line_circle_tangent_point(h, c), J, H) mod 360
By angle_to_center on line_circle_tangent_point(f, c), J, F, c we get angle(line_circle_tangent_point(f, c), center(c), F) == 2 * angle(line_circle_tangent_point(f, c), J, F) mod 360
By angle_to_center on F, line_circle_tangent_point(f, c), H, c we get angle(F, center(c), H) == 2 * angle(F, line_circle_tangent_point(f, c), H) mod 360
By angle_to_center on line_circle_tangent_point(f, c), F, J, c we get angle(line_circle_tangent_point(f, c), center(c), J) == 2 * angle(line_circle_tangent_point(f, c), F, J) mod 360
By angle_to_center on line_circle_tangent_point(h, c), E, J, c we get angle(line_circle_tangent_point(h, c), center(c), J) == 2 * angle(line_circle_tangent_point(h, c), E, J) mod 360
By angle_to_center on J, line_circle_tangent_point(h, c), G, c we get angle(J, center(c), G) == 2 * angle(J, line_circle_tangent_point(h, c), G) mod 360
By angle_to_center on J, E, line_circle_tangent_point(h, c), c we get angle(J, center(c), line_circle_tangent_point(h, c)) == 2 * angle(J, E, line_circle_tangent_point(h, c)) mod 360
By angle_to_center on J, line_circle_tangent_point(h, c), E, c we get angle(J, center(c), E) == 2 * angle(J, line_circle_tangent_point(h, c), E) mod 360
By angle_to_center on line_circle_tangent_point(f, c), E, H, c we get angle(line_circle_tangent_point(f, c), center(c), H) == 2 * angle(line_circle_tangent_point(f, c), E, H) mod 360
By angle_to_center on line_circle_tangent_point(g, c), J, F, c we get angle(line_circle_tangent_point(g, c), center(c), F) == 2 * angle(line_circle_tangent_point(g, c), J, F) mod 360
By angle_to_center on F, line_circle_tangent_point(g, c), G, c we get angle(F, center(c), G) == 2 * angle(F, line_circle_tangent_point(g, c), G) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(B, D, E)), B, G, line_intersection(j, Line(E, G)) we get 180 == 2 * direction(center(Circle(B, D, E)), B) - 2 * direction(G, line_intersection(j, Line(E, G))) mod 360
By angle_to_center on G, E, line_circle_tangent_point(h, c), c we get angle(G, center(c), line_circle_tangent_point(h, c)) == 2 * angle(G, E, line_circle_tangent_point(h, c)) mod 360
By angle_to_center on F, H, line_circle_tangent_point(f, c), c we get angle(F, center(c), line_circle_tangent_point(f, c)) == 2 * angle(F, H, line_circle_tangent_point(f, c)) mod 360
By angle_to_center on G, line_circle_tangent_point(g, c), F, c we get angle(G, center(c), F) == 2 * angle(G, line_circle_tangent_point(g, c), F) mod 360
By angle_to_center on H, line_circle_tangent_point(g, c), F, c we get angle(H, center(c), F) == 2 * angle(H, line_circle_tangent_point(g, c), F) mod 360
By angle_to_center on line_circle_tangent_point(f, c), J, E, c we get angle(line_circle_tangent_point(f, c), center(c), E) == 2 * angle(line_circle_tangent_point(f, c), J, E) mod 360
By angle_to_center on F, line_circle_tangent_point(f, c), E, c we get angle(F, center(c), E) == 2 * angle(F, line_circle_tangent_point(f, c), E) mod 360
By angle_to_center on line_circle_tangent_point(g, c), H, F, c we get angle(line_circle_tangent_point(g, c), center(c), F) == 2 * angle(line_circle_tangent_point(g, c), H, F) mod 360
By angle_to_center on H, J, line_circle_tangent_point(f, c), c we get angle(H, center(c), line_circle_tangent_point(f, c)) == 2 * angle(H, J, line_circle_tangent_point(f, c)) mod 360
By angle_to_center on G, F, line_circle_tangent_point(g, c), c we get angle(G, center(c), line_circle_tangent_point(g, c)) == 2 * angle(G, F, line_circle_tangent_point(g, c)) mod 360
By angle_to_center on G, J, line_circle_tangent_point(g, c), c we get angle(G, center(c), line_circle_tangent_point(g, c)) == 2 * angle(G, J, line_circle_tangent_point(g, c)) mod 360
By angle_to_center on J, line_circle_tangent_point(f, c), H, c we get angle(J, center(c), H) == 2 * angle(J, line_circle_tangent_point(f, c), H) mod 360
By angle_to_center on H, F, line_circle_tangent_point(f, c), c we get angle(H, center(c), line_circle_tangent_point(f, c)) == 2 * angle(H, F, line_circle_tangent_point(f, c)) mod 360
By angle_to_center on line_circle_tangent_point(h, c), G, H, c we get angle(line_circle_tangent_point(h, c), center(c), H) == 2 * angle(line_circle_tangent_point(h, c), G, H) mod 360
By angle_to_center on J, F, line_circle_tangent_point(f, c), c we get angle(J, center(c), line_circle_tangent_point(f, c)) == 2 * angle(J, F, line_circle_tangent_point(f, c)) mod 360
By angle_to_center on line_circle_tangent_point(g, c), J, G, c we get angle(line_circle_tangent_point(g, c), center(c), G) == 2 * angle(line_circle_tangent_point(g, c), J, G) mod 360
By angle_to_center on E, F, line_circle_tangent_point(f, c), c we get angle(E, center(c), line_circle_tangent_point(f, c)) == 2 * angle(E, F, line_circle_tangent_point(f, c)) mod 360
By angle_to_center on line_circle_tangent_point(g, c), F, J, c we get angle(line_circle_tangent_point(g, c), center(c), J) == 2 * angle(line_circle_tangent_point(g, c), F, J) mod 360
By angle_to_center on J, H, line_circle_tangent_point(f, c), c we get angle(J, center(c), line_circle_tangent_point(f, c)) == 2 * angle(J, H, line_circle_tangent_point(f, c)) mod 360
By angle_to_center on G, H, line_circle_tangent_point(h, c), c we get angle(G, center(c), line_circle_tangent_point(h, c)) == 2 * angle(G, H, line_circle_tangent_point(h, c)) mod 360
By angle_to_center on line_circle_tangent_point(f, c), F, H, c we get angle(line_circle_tangent_point(f, c), center(c), H) == 2 * angle(line_circle_tangent_point(f, c), F, H) mod 360
By angle_to_center on G, J, line_circle_tangent_point(h, c), c we get angle(G, center(c), line_circle_tangent_point(h, c)) == 2 * angle(G, J, line_circle_tangent_point(h, c)) mod 360
By angle_to_center on line_circle_tangent_point(f, c), E, F, c we get angle(line_circle_tangent_point(f, c), center(c), F) == 2 * angle(line_circle_tangent_point(f, c), E, F) mod 360
By angle_to_center on H, line_circle_tangent_point(h, c), G, c we get angle(H, center(c), G) == 2 * angle(H, line_circle_tangent_point(h, c), G) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, Line(E, G)), center(Circle(B, D, E)), B we get 180 == 2 * direction(E, line_intersection(j, Line(E, G))) - 2 * direction(center(Circle(B, D, E)), B) mod 360
By angle_to_center on line_circle_tangent_point(h, c), J, G, c we get angle(line_circle_tangent_point(h, c), center(c), G) == 2 * angle(line_circle_tangent_point(h, c), J, G) mod 360
By angle_to_center on H, line_circle_tangent_point(g, c), J, c we get angle(H, center(c), J) == 2 * angle(H, line_circle_tangent_point(g, c), J) mod 360
By angle_to_center on H, line_circle_tangent_point(h, c), E, c we get angle(H, center(c), E) == 2 * angle(H, line_circle_tangent_point(h, c), E) mod 360
By angle_to_center on J, G, line_circle_tangent_point(h, c), c we get angle(J, center(c), line_circle_tangent_point(h, c)) == 2 * angle(J, G, line_circle_tangent_point(h, c)) mod 360
By angle_to_center on F, line_circle_tangent_point(f, c), J, c we get angle(F, center(c), J) == 2 * angle(F, line_circle_tangent_point(f, c), J) mod 360
By angle_to_center on line_circle_tangent_point(h, c), G, J, c we get angle(line_circle_tangent_point(h, c), center(c), J) == 2 * angle(line_circle_tangent_point(h, c), G, J) mod 360
By angle_to_center on F, J, line_circle_tangent_point(g, c), c we get angle(F, center(c), line_circle_tangent_point(g, c)) == 2 * angle(F, J, line_circle_tangent_point(g, c)) mod 360
By angle_to_center on G, line_circle_tangent_point(h, c), H, c we get angle(G, center(c), H) == 2 * angle(G, line_circle_tangent_point(h, c), H) mod 360
By angle_to_center on H, F, line_circle_tangent_point(g, c), c we get angle(H, center(c), line_circle_tangent_point(g, c)) == 2 * angle(H, F, line_circle_tangent_point(g, c)) mod 360
By angle_to_center on J, line_circle_tangent_point(g, c), H, c we get angle(J, center(c), H) == 2 * angle(J, line_circle_tangent_point(g, c), H) mod 360
By angle_to_center on G, H, line_circle_tangent_point(g, c), c we get angle(G, center(c), line_circle_tangent_point(g, c)) == 2 * angle(G, H, line_circle_tangent_point(g, c)) mod 360
By angle_to_center on line_circle_tangent_point(f, c), F, E, c we get angle(line_circle_tangent_point(f, c), center(c), E) == 2 * angle(line_circle_tangent_point(f, c), F, E) mod 360
By angle_to_center on F, line_circle_tangent_point(g, c), J, c we get angle(F, center(c), J) == 2 * angle(F, line_circle_tangent_point(g, c), J) mod 360
By angle_to_center on H, line_circle_tangent_point(g, c), G, c we get angle(H, center(c), G) == 2 * angle(H, line_circle_tangent_point(g, c), G) mod 360
By angle_to_center on H, G, line_circle_tangent_point(h, c), c we get angle(H, center(c), line_circle_tangent_point(h, c)) == 2 * angle(H, G, line_circle_tangent_point(h, c)) mod 360
By angle_to_center on J, line_circle_tangent_point(g, c), G, c we get angle(J, center(c), G) == 2 * angle(J, line_circle_tangent_point(g, c), G) mod 360
By angle_to_center on H, line_circle_tangent_point(f, c), E, c we get angle(H, center(c), E) == 2 * angle(H, line_circle_tangent_point(f, c), E) mod 360
By angle_to_center on H, E, line_circle_tangent_point(f, c), c we get angle(H, center(c), line_circle_tangent_point(f, c)) == 2 * angle(H, E, line_circle_tangent_point(f, c)) mod 360
By angle_to_center on F, E, line_circle_tangent_point(f, c), c we get angle(F, center(c), line_circle_tangent_point(f, c)) == 2 * angle(F, E, line_circle_tangent_point(f, c)) mod 360
By angle_to_center on line_circle_tangent_point(g, c), G, J, c we get angle(line_circle_tangent_point(g, c), center(c), J) == 2 * angle(line_circle_tangent_point(g, c), G, J) mod 360
By angle_to_center on line_circle_tangent_point(g, c), G, F, c we get angle(line_circle_tangent_point(g, c), center(c), F) == 2 * angle(line_circle_tangent_point(g, c), G, F) mod 360
By angle_to_center on E, H, line_circle_tangent_point(f, c), c we get angle(E, center(c), line_circle_tangent_point(f, c)) == 2 * angle(E, H, line_circle_tangent_point(f, c)) mod 360
By angle_to_center on E, line_circle_tangent_point(f, c), H, c we get angle(E, center(c), H) == 2 * angle(E, line_circle_tangent_point(f, c), H) mod 360
By angle_to_center on F, J, line_circle_tangent_point(f, c), c we get angle(F, center(c), line_circle_tangent_point(f, c)) == 2 * angle(F, J, line_circle_tangent_point(f, c)) mod 360
By angle_to_center on E, line_circle_tangent_point(f, c), J, c we get angle(E, center(c), J) == 2 * angle(E, line_circle_tangent_point(f, c), J) mod 360
By angle_to_center on H, J, line_circle_tangent_point(g, c), c we get angle(H, center(c), line_circle_tangent_point(g, c)) == 2 * angle(H, J, line_circle_tangent_point(g, c)) mod 360
By angle_to_center on line_circle_tangent_point(h, c), G, E, c we get angle(line_circle_tangent_point(h, c), center(c), E) == 2 * angle(line_circle_tangent_point(h, c), G, E) mod 360
By angle_to_center on line_circle_tangent_point(h, c), H, G, c we get angle(line_circle_tangent_point(h, c), center(c), G) == 2 * angle(line_circle_tangent_point(h, c), H, G) mod 360
By angle_to_center on line_circle_tangent_point(g, c), F, H, c we get angle(line_circle_tangent_point(g, c), center(c), H) == 2 * angle(line_circle_tangent_point(g, c), F, H) mod 360
By angle_to_center on line_circle_tangent_point(f, c), J, H, c we get angle(line_circle_tangent_point(f, c), center(c), H) == 2 * angle(line_circle_tangent_point(f, c), J, H) mod 360
By angle_to_center on line_circle_tangent_point(h, c), H, E, c we get angle(line_circle_tangent_point(h, c), center(c), E) == 2 * angle(line_circle_tangent_point(h, c), H, E) mod 360
By angle_to_center on E, line_circle_tangent_point(h, c), J, c we get angle(E, center(c), J) == 2 * angle(E, line_circle_tangent_point(h, c), J) mod 360
By angle_to_center on E, H, line_circle_tangent_point(h, c), c we get angle(E, center(c), line_circle_tangent_point(h, c)) == 2 * angle(E, H, line_circle_tangent_point(h, c)) mod 360
By angle_to_center on H, J, line_circle_tangent_point(h, c), c we get angle(H, center(c), line_circle_tangent_point(h, c)) == 2 * angle(H, J, line_circle_tangent_point(h, c)) mod 360
By angle_to_center on line_circle_tangent_point(h, c), J, E, c we get angle(line_circle_tangent_point(h, c), center(c), E) == 2 * angle(line_circle_tangent_point(h, c), J, E) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(i, Line(F, G)), center(Circle(A, D, F)), D we get 180 == 2 * direction(F, line_intersection(i, Line(F, G))) - 2 * direction(center(Circle(A, D, F)), D) mod 360
By angle_to_center on J, G, line_circle_tangent_point(g, c), c we get angle(J, center(c), line_circle_tangent_point(g, c)) == 2 * angle(J, G, line_circle_tangent_point(g, c)) mod 360
By angle_to_center on H, E, line_circle_tangent_point(h, c), c we get angle(H, center(c), line_circle_tangent_point(h, c)) == 2 * angle(H, E, line_circle_tangent_point(h, c)) mod 360
By angle_to_center on F, H, line_circle_tangent_point(g, c), c we get angle(F, center(c), line_circle_tangent_point(g, c)) == 2 * angle(F, H, line_circle_tangent_point(g, c)) mod 360
By angle_to_center on E, line_circle_tangent_point(h, c), G, c we get angle(E, center(c), G) == 2 * angle(E, line_circle_tangent_point(h, c), G) mod 360
By angle_to_center on G, line_circle_tangent_point(h, c), E, c we get angle(G, center(c), E) == 2 * angle(G, line_circle_tangent_point(h, c), E) mod 360
By angle_to_center on line_circle_tangent_point(g, c), G, H, c we get angle(line_circle_tangent_point(g, c), center(c), H) == 2 * angle(line_circle_tangent_point(g, c), G, H) mod 360
By angle_to_center on line_circle_tangent_point(g, c), H, G, c we get angle(line_circle_tangent_point(g, c), center(c), G) == 2 * angle(line_circle_tangent_point(g, c), H, G) mod 360
By angle_to_center on line_circle_tangent_point(g, c), H, J, c we get angle(line_circle_tangent_point(g, c), center(c), J) == 2 * angle(line_circle_tangent_point(g, c), H, J) mod 360
By angle_to_center on line_circle_tangent_point(f, c), H, F, c we get angle(line_circle_tangent_point(f, c), center(c), F) == 2 * angle(line_circle_tangent_point(f, c), H, F) mod 360
By angle_to_center on J, line_circle_tangent_point(g, c), F, c we get angle(J, center(c), F) == 2 * angle(J, line_circle_tangent_point(g, c), F) mod 360
By angle_to_center on line_circle_tangent_point(f, c), H, J, c we get angle(line_circle_tangent_point(f, c), center(c), J) == 2 * angle(line_circle_tangent_point(f, c), H, J) mod 360
By angle_to_center on line_circle_tangent_point(f, c), H, E, c we get angle(line_circle_tangent_point(f, c), center(c), E) == 2 * angle(line_circle_tangent_point(f, c), H, E) mod 360
By angle_to_center on line_circle_tangent_point(h, c), E, G, c we get angle(line_circle_tangent_point(h, c), center(c), G) == 2 * angle(line_circle_tangent_point(h, c), E, G) mod 360
By angle_to_center on E, line_circle_tangent_point(f, c), F, c we get angle(E, center(c), F) == 2 * angle(E, line_circle_tangent_point(f, c), F) mod 360
By angle_to_center on J, line_circle_tangent_point(f, c), E, c we get angle(J, center(c), E) == 2 * angle(J, line_circle_tangent_point(f, c), E) mod 360
By angle_to_center on H, line_circle_tangent_point(f, c), F, c we get angle(H, center(c), F) == 2 * angle(H, line_circle_tangent_point(f, c), F) mod 360
By angle_to_center on F, line_circle_tangent_point(g, c), H, c we get angle(F, center(c), H) == 2 * angle(F, line_circle_tangent_point(g, c), H) mod 360
By angle_to_center on line_circle_tangent_point(g, c), F, G, c we get angle(line_circle_tangent_point(g, c), center(c), G) == 2 * angle(line_circle_tangent_point(g, c), F, G) mod 360
By angle_to_center on J, F, line_circle_tangent_point(g, c), c we get angle(J, center(c), line_circle_tangent_point(g, c)) == 2 * angle(J, F, line_circle_tangent_point(g, c)) mod 360
By angle_to_center on J, H, line_circle_tangent_point(g, c), c we get angle(J, center(c), line_circle_tangent_point(g, c)) == 2 * angle(J, H, line_circle_tangent_point(g, c)) mod 360
By angle_to_center on H, G, line_circle_tangent_point(g, c), c we get angle(H, center(c), line_circle_tangent_point(g, c)) == 2 * angle(H, G, line_circle_tangent_point(g, c)) mod 360
By angle_to_center on line_circle_tangent_point(g, c), J, H, c we get angle(line_circle_tangent_point(g, c), center(c), H) == 2 * angle(line_circle_tangent_point(g, c), J, H) mod 360
By angle_to_center on J, line_circle_tangent_point(h, c), H, c we get angle(J, center(c), H) == 2 * angle(J, line_circle_tangent_point(h, c), H) mod 360
By angle_to_center on H, line_circle_tangent_point(h, c), J, c we get angle(H, center(c), J) == 2 * angle(H, line_circle_tangent_point(h, c), J) mod 360
By angle_to_center on G, line_circle_tangent_point(g, c), H, c we get angle(G, center(c), H) == 2 * angle(G, line_circle_tangent_point(g, c), H) mod 360
By angle_to_center on J, H, line_circle_tangent_point(h, c), c we get angle(J, center(c), line_circle_tangent_point(h, c)) == 2 * angle(J, H, line_circle_tangent_point(h, c)) mod 360
By angle_to_center on E, J, line_circle_tangent_point(f, c), c we get angle(E, center(c), line_circle_tangent_point(f, c)) == 2 * angle(E, J, line_circle_tangent_point(f, c)) mod 360
By angle_to_center on H, line_circle_tangent_point(f, c), J, c we get angle(H, center(c), J) == 2 * angle(H, line_circle_tangent_point(f, c), J) mod 360
By perpendicular_direction_conditions_v0_r on A, center(Circle(A, D, F)), F, line_intersection(i, Line(F, G)) we get 180 == 2 * direction(A, center(Circle(A, D, F))) - 2 * direction(F, line_intersection(i, Line(F, G))) mod 360
By angle_to_center on line_circle_tangent_point(h, c), H, J, c we get angle(line_circle_tangent_point(h, c), center(c), J) == 2 * angle(line_circle_tangent_point(h, c), H, J) mod 360
By angle_to_center on E, G, line_circle_tangent_point(h, c), c we get angle(E, center(c), line_circle_tangent_point(h, c)) == 2 * angle(E, G, line_circle_tangent_point(h, c)) mod 360
By angle_to_center on line_circle_tangent_point(f, c), E, J, c we get angle(line_circle_tangent_point(f, c), center(c), J) == 2 * angle(line_circle_tangent_point(f, c), E, J) mod 360
By angle_to_center on E, line_circle_tangent_point(h, c), H, c we get angle(E, center(c), H) == 2 * angle(E, line_circle_tangent_point(h, c), H) mod 360
By angle_to_center on G, line_circle_tangent_point(h, c), J, c we get angle(G, center(c), J) == 2 * angle(G, line_circle_tangent_point(h, c), J) mod 360
By angle_to_center on F, G, line_circle_tangent_point(g, c), c we get angle(F, center(c), line_circle_tangent_point(g, c)) == 2 * angle(F, G, line_circle_tangent_point(g, c)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(F, G)), F, A, D we get 180 == 2 * direction(line_intersection(i, Line(F, G)), F) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on A, center(Circle(A, D, F)), line_intersection(i, Line(F, G)), F we get 180 == 2 * direction(A, center(Circle(A, D, F))) - 2 * direction(line_intersection(i, Line(F, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(f, Line(I, K)), H, D we get 180 == 2 * direction(B, line_intersection(f, Line(I, K))) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on E, G, B, line_intersection(j, Line(E, G)) we get 180 == 2 * direction(E, G) - 2 * direction(B, line_intersection(j, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on B, center(Circle(B, D, E)), line_intersection(j, Line(E, G)), E we get 180 == 2 * direction(B, center(Circle(B, D, E))) - 2 * direction(line_intersection(j, Line(E, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on B, D, line_intersection(j, Line(E, G)), G we get 180 == 2 * direction(B, D) - 2 * direction(line_intersection(j, Line(E, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on D, A, line_intersection(i, Line(F, G)), G we get 180 == 2 * direction(D, A) - 2 * direction(line_intersection(i, Line(F, G)), G) mod 360
By same_angle_v1 on J, C, I, K we get angle(C, J, K) == angle(I, J, K) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), A, D, H we get 180 == 2 * direction(line_intersection(f, Line(I, K)), A) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on B, center(Circle(B, D, E)), line_intersection(j, Line(E, G)), G we get 180 == 2 * direction(B, center(Circle(B, D, E))) - 2 * direction(line_intersection(j, Line(E, G)), G) mod 360
By same_angle_v3 on J, G, I, K we get angle(G, J, K) == angle(I, J, K) + 180 mod 360
By perpendicular_direction_conditions_v0_r on A, center(Circle(A, D, F)), G, line_intersection(i, Line(F, G)) we get 180 == 2 * direction(A, center(Circle(A, D, F))) - 2 * direction(G, line_intersection(i, Line(F, G))) mod 360
By in_imply_collinear on line_circle_tangent_point(h, c), A, F we get collinear(A, F, line_circle_tangent_point(h, c))
By perpendicular_direction_conditions_v0_r on A, B, line_intersection(f, Line(I, K)), I we get 180 == 2 * direction(A, B) - 2 * direction(line_intersection(f, Line(I, K)), I) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(f, Line(I, K)), I, K we get 180 == 2 * direction(B, line_intersection(f, Line(I, K))) - 2 * direction(I, K) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(j, Line(E, G)), B, D we get 180 == 2 * direction(G, line_intersection(j, Line(E, G))) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on H, G, line_intersection(f, Line(I, K)), B we get 180 == 2 * direction(H, G) - 2 * direction(line_intersection(f, Line(I, K)), B) mod 360
By perpendicular_direction_conditions_v0_r on F, H, F, line_intersection(i, Line(F, G)) we get 180 == 2 * direction(F, H) - 2 * direction(F, line_intersection(i, Line(F, G))) mod 360
By perpendicular_direction_conditions_v0_r on G, D, B, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(G, D) - 2 * direction(B, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on G, A, line_intersection(f, Line(I, K)), I we get 180 == 2 * direction(G, A) - 2 * direction(line_intersection(f, Line(I, K)), I) mod 360
By perpendicular_direction_conditions_v0_r on H, F, F, line_intersection(i, Line(F, G)) we get 180 == 2 * direction(H, F) - 2 * direction(F, line_intersection(i, Line(F, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), A, G, H we get 180 == 2 * direction(line_intersection(f, Line(I, K)), A) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0_r on A, B, K, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(A, B) - 2 * direction(K, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), G, I, K we get 180 == 2 * direction(line_intersection(f, Line(I, K)), G) - 2 * direction(I, K) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(f, Line(I, K)), H, G we get 180 == 2 * direction(B, line_intersection(f, Line(I, K))) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), K, A, B we get 180 == 2 * direction(line_intersection(f, Line(I, K)), K) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on G, B, line_intersection(f, Line(I, K)), K we get 180 == 2 * direction(G, B) - 2 * direction(line_intersection(f, Line(I, K)), K) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(A, D, F)), A, line_intersection(i, Line(F, G)), F we get 180 == 2 * direction(center(Circle(A, D, F)), A) - 2 * direction(line_intersection(i, Line(F, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(f, Line(I, K)), D, H we get 180 == 2 * direction(G, line_intersection(f, Line(I, K))) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on D, center(Circle(A, D, F)), line_intersection(i, Line(F, G)), G we get 180 == 2 * direction(D, center(Circle(A, D, F))) - 2 * direction(line_intersection(i, Line(F, G)), G) mod 360
By same_angle_v3 on J, G, C, K we get angle(G, J, K) == angle(C, J, K) + 180 mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(f, Line(I, K)), D, G we get 180 == 2 * direction(B, line_intersection(f, Line(I, K))) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), G, D, G we get 180 == 2 * direction(line_intersection(f, Line(I, K)), G) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on K, line_intersection(f, Line(I, K)), B, G we get 180 == 2 * direction(K, line_intersection(f, Line(I, K))) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on G, F, A, line_intersection(i, Line(F, G)) we get 180 == 2 * direction(G, F) - 2 * direction(A, line_intersection(i, Line(F, G))) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(i, Line(F, G)), center(Circle(A, D, F)), A we get 180 == 2 * direction(G, line_intersection(i, Line(F, G))) - 2 * direction(center(Circle(A, D, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), midpoint(E, F), E we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(A, D, F)), A, line_intersection(i, Line(F, G)), G we get 180 == 2 * direction(center(Circle(A, D, F)), A) - 2 * direction(line_intersection(i, Line(F, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on D, G, A, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(D, G) - 2 * direction(A, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(B, D, E)), B, line_intersection(j, Line(E, G)), E we get 180 == 2 * direction(center(Circle(B, D, E)), B) - 2 * direction(line_intersection(j, Line(E, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on G, H, A, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(G, H) - 2 * direction(A, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on D, G, line_intersection(f, Line(I, K)), G we get 180 == 2 * direction(D, G) - 2 * direction(line_intersection(f, Line(I, K)), G) mod 360
By perpendicular_direction_conditions_v0_r on G, A, I, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(G, A) - 2 * direction(I, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, G)), E, D, B we get 180 == 2 * direction(line_intersection(j, Line(E, G)), E) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(i, Line(F, G)), A, D we get 180 == 2 * direction(F, line_intersection(i, Line(F, G))) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(f, Line(I, K)), G, D we get 180 == 2 * direction(G, line_intersection(f, Line(I, K))) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on A, D, line_intersection(i, Line(F, G)), G we get 180 == 2 * direction(A, D) - 2 * direction(line_intersection(i, Line(F, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, G)), G, center(Circle(B, D, E)), B we get 180 == 2 * direction(line_intersection(j, Line(E, G)), G) - 2 * direction(center(Circle(B, D, E)), B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), K, G, A we get 180 == 2 * direction(line_intersection(f, Line(I, K)), K) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on D, H, line_intersection(f, Line(I, K)), A we get 180 == 2 * direction(D, H) - 2 * direction(line_intersection(f, Line(I, K)), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), A, G, D we get 180 == 2 * direction(line_intersection(f, Line(I, K)), A) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on G, D, A, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(G, D) - 2 * direction(A, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(B, D, E)), D, E, line_intersection(j, Line(E, G)) we get 180 == 2 * direction(center(Circle(B, D, E)), D) - 2 * direction(E, line_intersection(j, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(F, G)), F, A, center(Circle(A, D, F)) we get 180 == 2 * direction(line_intersection(i, Line(F, G)), F) - 2 * direction(A, center(Circle(A, D, F))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, Line(E, G)), B, center(Circle(B, D, E)) we get 180 == 2 * direction(E, line_intersection(j, Line(E, G))) - 2 * direction(B, center(Circle(B, D, E))) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(f, Line(I, K)), H, D we get 180 == 2 * direction(A, line_intersection(f, Line(I, K))) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(F, G)), G, center(Circle(A, D, F)), D we get 180 == 2 * direction(line_intersection(i, Line(F, G)), G) - 2 * direction(center(Circle(A, D, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(B, D, E)), D, line_intersection(j, Line(E, G)), E we get 180 == 2 * direction(center(Circle(B, D, E)), D) - 2 * direction(line_intersection(j, Line(E, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on H, E, E, line_intersection(j, Line(E, G)) we get 180 == 2 * direction(H, E) - 2 * direction(E, line_intersection(j, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on B, A, I, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(B, A) - 2 * direction(I, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on H, D, line_intersection(f, Line(I, K)), A we get 180 == 2 * direction(H, D) - 2 * direction(line_intersection(f, Line(I, K)), A) mod 360
By perpendicular_direction_conditions_v0_r on F, H, line_intersection(i, Line(F, G)), G we get 180 == 2 * direction(F, H) - 2 * direction(line_intersection(i, Line(F, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(f, Line(I, K)), H, G we get 180 == 2 * direction(G, line_intersection(f, Line(I, K))) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(F, G)), F, H, F we get 180 == 2 * direction(line_intersection(i, Line(F, G)), F) - 2 * direction(H, F) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(f, Line(I, K)), G, H we get 180 == 2 * direction(A, line_intersection(f, Line(I, K))) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0_r on D, center(Circle(A, D, F)), F, line_intersection(i, Line(F, G)) we get 180 == 2 * direction(D, center(Circle(A, D, F))) - 2 * direction(F, line_intersection(i, Line(F, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, G)), E, D, center(Circle(B, D, E)) we get 180 == 2 * direction(line_intersection(j, Line(E, G)), E) - 2 * direction(D, center(Circle(B, D, E))) mod 360
By perpendicular_direction_conditions_v0_r on K, I, G, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(K, I) - 2 * direction(G, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on D, A, G, line_intersection(i, Line(F, G)) we get 180 == 2 * direction(D, A) - 2 * direction(G, line_intersection(i, Line(F, G))) mod 360
By in_imply_collinear on line_circle_tangent_point(f, c), G, A we get collinear(A, G, line_circle_tangent_point(f, c))
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), G, K, I we get 180 == 2 * direction(line_intersection(f, Line(I, K)), G) - 2 * direction(K, I) mod 360
By perpendicular_direction_conditions_v0_r on B, G, line_intersection(f, Line(I, K)), K we get 180 == 2 * direction(B, G) - 2 * direction(line_intersection(f, Line(I, K)), K) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(A, D, F)), A, G, line_intersection(i, Line(F, G)) we get 180 == 2 * direction(center(Circle(A, D, F)), A) - 2 * direction(G, line_intersection(i, Line(F, G))) mod 360
By perpendicular_direction_conditions_v0_r on D, center(Circle(A, D, F)), G, line_intersection(i, Line(F, G)) we get 180 == 2 * direction(D, center(Circle(A, D, F))) - 2 * direction(G, line_intersection(i, Line(F, G))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), F, E we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(j, Line(E, G)), E, G we get 180 == 2 * direction(D, line_intersection(j, Line(E, G))) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on K, line_intersection(f, Line(I, K)), B, A we get 180 == 2 * direction(K, line_intersection(f, Line(I, K))) - 2 * direction(B, A) mod 360
By tangent_point_is_unique on F, line_circle_tangent_point(h, c), c, h we get F == line_circle_tangent_point(h, c)
By perpendicular_direction_conditions_v0_r on D, center(Circle(B, D, E)), line_intersection(j, Line(E, G)), E we get 180 == 2 * direction(D, center(Circle(B, D, E))) - 2 * direction(line_intersection(j, Line(E, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on B, D, G, line_intersection(j, Line(E, G)) we get 180 == 2 * direction(B, D) - 2 * direction(G, line_intersection(j, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), I, G, A we get 180 == 2 * direction(line_intersection(f, Line(I, K)), I) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(F, G)), F, D, center(Circle(A, D, F)) we get 180 == 2 * direction(line_intersection(i, Line(F, G)), F) - 2 * direction(D, center(Circle(A, D, F))) mod 360
By perpendicular_direction_conditions_v0_r on A, G, K, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(A, G) - 2 * direction(K, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on F, G, A, line_intersection(i, Line(F, G)) we get 180 == 2 * direction(F, G) - 2 * direction(A, line_intersection(i, Line(F, G))) mod 360
By perpendicular_direction_conditions_v0_r on D, center(Circle(B, D, E)), E, line_intersection(j, Line(E, G)) we get 180 == 2 * direction(D, center(Circle(B, D, E))) - 2 * direction(E, line_intersection(j, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on A, D, G, line_intersection(i, Line(F, G)) we get 180 == 2 * direction(A, D) - 2 * direction(G, line_intersection(i, Line(F, G))) mod 360
By perpendicular_direction_conditions_v0_r on E, F, midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(j, Line(E, G)), G, E we get 180 == 2 * direction(D, line_intersection(j, Line(E, G))) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), E, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, B, line_intersection(j, Line(E, G)), E we get 180 == 2 * direction(D, B) - 2 * direction(line_intersection(j, Line(E, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(i, Line(F, G)), F, G we get 180 == 2 * direction(A, line_intersection(i, Line(F, G))) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on D, G, B, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(D, G) - 2 * direction(B, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(A, D, F)), D, line_intersection(i, Line(F, G)), G we get 180 == 2 * direction(center(Circle(A, D, F)), D) - 2 * direction(line_intersection(i, Line(F, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on I, K, B, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(I, K) - 2 * direction(B, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(f, Line(I, K)), D, G we get 180 == 2 * direction(G, line_intersection(f, Line(I, K))) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on D, H, line_intersection(f, Line(I, K)), B we get 180 == 2 * direction(D, H) - 2 * direction(line_intersection(f, Line(I, K)), B) mod 360
By perpendicular_direction_conditions_v0_r on H, G, B, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(H, G) - 2 * direction(B, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), B, H, G we get 180 == 2 * direction(line_intersection(f, Line(I, K)), B) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(B, D, E)), B, line_intersection(j, Line(E, G)), G we get 180 == 2 * direction(center(Circle(B, D, E)), B) - 2 * direction(line_intersection(j, Line(E, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on A, D, line_intersection(i, Line(F, G)), F we get 180 == 2 * direction(A, D) - 2 * direction(line_intersection(i, Line(F, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on E, F, midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, H, E, line_intersection(j, Line(E, G)) we get 180 == 2 * direction(E, H) - 2 * direction(E, line_intersection(j, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(j, Line(E, G)), center(Circle(B, D, E)), B we get 180 == 2 * direction(G, line_intersection(j, Line(E, G))) - 2 * direction(center(Circle(B, D, E)), B) mod 360
By perpendicular_direction_conditions_v0_r on K, line_intersection(f, Line(I, K)), A, G we get 180 == 2 * direction(K, line_intersection(f, Line(I, K))) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on D, B, G, line_intersection(j, Line(E, G)) we get 180 == 2 * direction(D, B) - 2 * direction(G, line_intersection(j, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on G, F, D, line_intersection(i, Line(F, G)) we get 180 == 2 * direction(G, F) - 2 * direction(D, line_intersection(i, Line(F, G))) mod 360
By perpendicular_direction_conditions_v0_r on K, line_intersection(f, Line(I, K)), G, B we get 180 == 2 * direction(K, line_intersection(f, Line(I, K))) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on D, G, line_intersection(f, Line(I, K)), B we get 180 == 2 * direction(D, G) - 2 * direction(line_intersection(f, Line(I, K)), B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, G)), G, D, B we get 180 == 2 * direction(line_intersection(j, Line(E, G)), G) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on B, D, line_intersection(j, Line(E, G)), E we get 180 == 2 * direction(B, D) - 2 * direction(line_intersection(j, Line(E, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), E, F we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), B, I, K we get 180 == 2 * direction(line_intersection(f, Line(I, K)), B) - 2 * direction(I, K) mod 360
By perpendicular_direction_conditions_v0_r on F, G, D, line_intersection(i, Line(F, G)) we get 180 == 2 * direction(F, G) - 2 * direction(D, line_intersection(i, Line(F, G))) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(j, Line(E, G)), B, center(Circle(B, D, E)) we get 180 == 2 * direction(G, line_intersection(j, Line(E, G))) - 2 * direction(B, center(Circle(B, D, E))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), A, I, K we get 180 == 2 * direction(line_intersection(f, Line(I, K)), A) - 2 * direction(I, K) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(F, G)), A, G, F we get 180 == 2 * direction(line_intersection(i, Line(F, G)), A) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on D, H, G, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(D, H) - 2 * direction(G, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(i, Line(F, G)), D, A we get 180 == 2 * direction(F, line_intersection(i, Line(F, G))) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(i, Line(F, G)), F, H we get 180 == 2 * direction(F, line_intersection(i, Line(F, G))) - 2 * direction(F, H) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(A, D, F)), D, line_intersection(i, Line(F, G)), F we get 180 == 2 * direction(center(Circle(A, D, F)), D) - 2 * direction(line_intersection(i, Line(F, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(f, Line(I, K)), G, H we get 180 == 2 * direction(G, line_intersection(f, Line(I, K))) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(f, Line(I, K)), I, K we get 180 == 2 * direction(A, line_intersection(f, Line(I, K))) - 2 * direction(I, K) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(A, D, F)), A, F, line_intersection(i, Line(F, G)) we get 180 == 2 * direction(center(Circle(A, D, F)), A) - 2 * direction(F, line_intersection(i, Line(F, G))) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(i, Line(F, G)), center(Circle(A, D, F)), D we get 180 == 2 * direction(G, line_intersection(i, Line(F, G))) - 2 * direction(center(Circle(A, D, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on G, E, B, line_intersection(j, Line(E, G)) we get 180 == 2 * direction(G, E) - 2 * direction(B, line_intersection(j, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, G)), E, center(Circle(B, D, E)), B we get 180 == 2 * direction(line_intersection(j, Line(E, G)), E) - 2 * direction(center(Circle(B, D, E)), B) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, Line(E, G)), E, H we get 180 == 2 * direction(E, line_intersection(j, Line(E, G))) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on D, center(Circle(A, D, F)), line_intersection(i, Line(F, G)), F we get 180 == 2 * direction(D, center(Circle(A, D, F))) - 2 * direction(line_intersection(i, Line(F, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on I, K, line_intersection(f, Line(I, K)), B we get 180 == 2 * direction(I, K) - 2 * direction(line_intersection(f, Line(I, K)), B) mod 360
By perpendicular_direction_conditions_v0_r on D, B, line_intersection(j, Line(E, G)), G we get 180 == 2 * direction(D, B) - 2 * direction(line_intersection(j, Line(E, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on H, D, A, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(H, D) - 2 * direction(A, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on G, E, D, line_intersection(j, Line(E, G)) we get 180 == 2 * direction(G, E) - 2 * direction(D, line_intersection(j, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), G, D, H we get 180 == 2 * direction(line_intersection(f, Line(I, K)), G) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(j, Line(E, G)), D, B we get 180 == 2 * direction(G, line_intersection(j, Line(E, G))) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(j, Line(E, G)), center(Circle(B, D, E)), D we get 180 == 2 * direction(G, line_intersection(j, Line(E, G))) - 2 * direction(center(Circle(B, D, E)), D) mod 360
By perpendicular_direction_conditions_v0_r on G, F, line_intersection(i, Line(F, G)), D we get 180 == 2 * direction(G, F) - 2 * direction(line_intersection(i, Line(F, G)), D) mod 360
By perpendicular_direction_conditions_v0_r on H, G, G, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(H, G) - 2 * direction(G, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), A, H, G we get 180 == 2 * direction(line_intersection(f, Line(I, K)), A) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, G)), E, E, H we get 180 == 2 * direction(line_intersection(j, Line(E, G)), E) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(i, Line(F, G)), A, center(Circle(A, D, F)) we get 180 == 2 * direction(G, line_intersection(i, Line(F, G))) - 2 * direction(A, center(Circle(A, D, F))) mod 360
By perpendicular_direction_conditions_v0_r on G, H, line_intersection(f, Line(I, K)), B we get 180 == 2 * direction(G, H) - 2 * direction(line_intersection(f, Line(I, K)), B) mod 360
By sas_anti_similarity on H, D, F, F, center(Circle(A, D, F)), D we get anti_similar_triangles(D, F, H, center(Circle(A, D, F)), D, F)
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), B, K, I we get 180 == 2 * direction(line_intersection(f, Line(I, K)), B) - 2 * direction(K, I) mod 360
By perpendicular_direction_conditions_v0_r on F, E, midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By sas_similarity on E, B, G, D, center(Circle(B, D, E)), G we get similar_triangles(B, E, G, center(Circle(B, D, E)), D, G)
By perpendicular_direction_conditions_v0_r on F, G, line_intersection(i, Line(F, G)), A we get 180 == 2 * direction(F, G) - 2 * direction(line_intersection(i, Line(F, G)), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(F, G)), G, D, center(Circle(A, D, F)) we get 180 == 2 * direction(line_intersection(i, Line(F, G)), G) - 2 * direction(D, center(Circle(A, D, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, G)), G, B, D we get 180 == 2 * direction(line_intersection(j, Line(E, G)), G) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(B, D, E)), D, G, line_intersection(j, Line(E, G)) we get 180 == 2 * direction(center(Circle(B, D, E)), D) - 2 * direction(G, line_intersection(j, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(f, Line(I, K)), K, I we get 180 == 2 * direction(B, line_intersection(f, Line(I, K))) - 2 * direction(K, I) mod 360
By perpendicular_direction_conditions_v0_r on H, G, line_intersection(f, Line(I, K)), A we get 180 == 2 * direction(H, G) - 2 * direction(line_intersection(f, Line(I, K)), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, G)), E, B, center(Circle(B, D, E)) we get 180 == 2 * direction(line_intersection(j, Line(E, G)), E) - 2 * direction(B, center(Circle(B, D, E))) mod 360
By perpendicular_direction_conditions_v0_r on D, G, line_intersection(f, Line(I, K)), A we get 180 == 2 * direction(D, G) - 2 * direction(line_intersection(f, Line(I, K)), A) mod 360
By perpendicular_direction_conditions_v0_r on D, center(Circle(B, D, E)), G, line_intersection(j, Line(E, G)) we get 180 == 2 * direction(D, center(Circle(B, D, E))) - 2 * direction(G, line_intersection(j, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, G)), G, B, center(Circle(B, D, E)) we get 180 == 2 * direction(line_intersection(j, Line(E, G)), G) - 2 * direction(B, center(Circle(B, D, E))) mod 360
By perpendicular_direction_conditions_v0_r on I, line_intersection(f, Line(I, K)), A, B we get 180 == 2 * direction(I, line_intersection(f, Line(I, K))) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on G, B, I, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(G, B) - 2 * direction(I, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, G)), E, H, E we get 180 == 2 * direction(line_intersection(j, Line(E, G)), E) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(f, Line(I, K)), G, D we get 180 == 2 * direction(B, line_intersection(f, Line(I, K))) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on I, line_intersection(f, Line(I, K)), B, A we get 180 == 2 * direction(I, line_intersection(f, Line(I, K))) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, G)), D, E, G we get 180 == 2 * direction(line_intersection(j, Line(E, G)), D) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on H, E, line_intersection(j, Line(E, G)), G we get 180 == 2 * direction(H, E) - 2 * direction(line_intersection(j, Line(E, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(F, G)), D, G, F we get 180 == 2 * direction(line_intersection(i, Line(F, G)), D) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on H, F, G, line_intersection(i, Line(F, G)) we get 180 == 2 * direction(H, F) - 2 * direction(G, line_intersection(i, Line(F, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(F, G)), D, F, G we get 180 == 2 * direction(line_intersection(i, Line(F, G)), D) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on A, G, line_intersection(f, Line(I, K)), K we get 180 == 2 * direction(A, G) - 2 * direction(line_intersection(f, Line(I, K)), K) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, G)), G, D, center(Circle(B, D, E)) we get 180 == 2 * direction(line_intersection(j, Line(E, G)), G) - 2 * direction(D, center(Circle(B, D, E))) mod 360
By perpendicular_direction_conditions_v0_r on D, H, B, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(D, H) - 2 * direction(B, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on H, E, G, line_intersection(j, Line(E, G)) we get 180 == 2 * direction(H, E) - 2 * direction(G, line_intersection(j, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on G, F, line_intersection(i, Line(F, G)), A we get 180 == 2 * direction(G, F) - 2 * direction(line_intersection(i, Line(F, G)), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), B, G, D we get 180 == 2 * direction(line_intersection(f, Line(I, K)), B) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on D, center(Circle(B, D, E)), line_intersection(j, Line(E, G)), G we get 180 == 2 * direction(D, center(Circle(B, D, E))) - 2 * direction(line_intersection(j, Line(E, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, G)), D, G, E we get 180 == 2 * direction(line_intersection(j, Line(E, G)), D) - 2 * direction(G, E) mod 360
By in_imply_collinear on midpoint(F, G), D, line_intersection(i, Line(F, G)) we get collinear(D, midpoint(F, G), line_intersection(i, Line(F, G)))
By perpendicular_direction_conditions_v0_r on A, line_intersection(f, Line(I, K)), K, I we get 180 == 2 * direction(A, line_intersection(f, Line(I, K))) - 2 * direction(K, I) mod 360
By in_imply_collinear on line_circle_tangent_point(g, c), B, C we get collinear(B, C, line_circle_tangent_point(g, c))
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, G)), G, H, E we get 180 == 2 * direction(line_intersection(j, Line(E, G)), G) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on D, G, G, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(D, G) - 2 * direction(G, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on E, H, line_intersection(j, Line(E, G)), E we get 180 == 2 * direction(E, H) - 2 * direction(line_intersection(j, Line(E, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(i, Line(F, G)), H, F we get 180 == 2 * direction(G, line_intersection(i, Line(F, G))) - 2 * direction(H, F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(F, G)), G, A, center(Circle(A, D, F)) we get 180 == 2 * direction(line_intersection(i, Line(F, G)), G) - 2 * direction(A, center(Circle(A, D, F))) mod 360
By perpendicular_direction_conditions_v0_r on K, I, B, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(K, I) - 2 * direction(B, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on G, H, B, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(G, H) - 2 * direction(B, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, Line(E, G)), B, D we get 180 == 2 * direction(E, line_intersection(j, Line(E, G))) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, Line(E, G)), D, B we get 180 == 2 * direction(E, line_intersection(j, Line(E, G))) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), I, G, B we get 180 == 2 * direction(line_intersection(f, Line(I, K)), I) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), K, G, B we get 180 == 2 * direction(line_intersection(f, Line(I, K)), K) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), E, F we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on H, D, line_intersection(f, Line(I, K)), B we get 180 == 2 * direction(H, D) - 2 * direction(line_intersection(f, Line(I, K)), B) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, Line(E, G)), D, center(Circle(B, D, E)) we get 180 == 2 * direction(E, line_intersection(j, Line(E, G))) - 2 * direction(D, center(Circle(B, D, E))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), G, G, H we get 180 == 2 * direction(line_intersection(f, Line(I, K)), G) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), B, D, G we get 180 == 2 * direction(line_intersection(f, Line(I, K)), B) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(F, G)), G, center(Circle(A, D, F)), A we get 180 == 2 * direction(line_intersection(i, Line(F, G)), G) - 2 * direction(center(Circle(A, D, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(j, Line(E, G)), G, E we get 180 == 2 * direction(B, line_intersection(j, Line(E, G))) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(f, Line(I, K)), I, K we get 180 == 2 * direction(G, line_intersection(f, Line(I, K))) - 2 * direction(I, K) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(i, Line(F, G)), F, H we get 180 == 2 * direction(G, line_intersection(i, Line(F, G))) - 2 * direction(F, H) mod 360
By perpendicular_direction_conditions_v0_r on E, H, line_intersection(j, Line(E, G)), G we get 180 == 2 * direction(E, H) - 2 * direction(line_intersection(j, Line(E, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on F, G, line_intersection(i, Line(F, G)), D we get 180 == 2 * direction(F, G) - 2 * direction(line_intersection(i, Line(F, G)), D) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(i, Line(F, G)), D, center(Circle(A, D, F)) we get 180 == 2 * direction(G, line_intersection(i, Line(F, G))) - 2 * direction(D, center(Circle(A, D, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, G)), B, G, E we get 180 == 2 * direction(line_intersection(j, Line(E, G)), B) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), K, B, A we get 180 == 2 * direction(line_intersection(f, Line(I, K)), K) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on K, I, line_intersection(f, Line(I, K)), B we get 180 == 2 * direction(K, I) - 2 * direction(line_intersection(f, Line(I, K)), B) mod 360
By perpendicular_direction_conditions_v0_r on G, B, K, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(G, B) - 2 * direction(K, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on G, E, line_intersection(j, Line(E, G)), B we get 180 == 2 * direction(G, E) - 2 * direction(line_intersection(j, Line(E, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(i, Line(F, G)), F, G we get 180 == 2 * direction(D, line_intersection(i, Line(F, G))) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on K, line_intersection(f, Line(I, K)), G, A we get 180 == 2 * direction(K, line_intersection(f, Line(I, K))) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(j, Line(E, G)), E, H we get 180 == 2 * direction(G, line_intersection(j, Line(E, G))) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on D, A, F, line_intersection(i, Line(F, G)) we get 180 == 2 * direction(D, A) - 2 * direction(F, line_intersection(i, Line(F, G))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), F, E we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on H, E, line_intersection(j, Line(E, G)), E we get 180 == 2 * direction(H, E) - 2 * direction(line_intersection(j, Line(E, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), A, D, G we get 180 == 2 * direction(line_intersection(f, Line(I, K)), A) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(F, G)), G, D, A we get 180 == 2 * direction(line_intersection(i, Line(F, G)), G) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on I, K, A, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(I, K) - 2 * direction(A, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on G, D, line_intersection(f, Line(I, K)), G we get 180 == 2 * direction(G, D) - 2 * direction(line_intersection(f, Line(I, K)), G) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(A, D, F)), D, F, line_intersection(i, Line(F, G)) we get 180 == 2 * direction(center(Circle(A, D, F)), D) - 2 * direction(F, line_intersection(i, Line(F, G))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(i, Line(F, G)), A, center(Circle(A, D, F)) we get 180 == 2 * direction(F, line_intersection(i, Line(F, G))) - 2 * direction(A, center(Circle(A, D, F))) mod 360
By perpendicular_direction_conditions_v0_r on G, H, line_intersection(f, Line(I, K)), G we get 180 == 2 * direction(G, H) - 2 * direction(line_intersection(f, Line(I, K)), G) mod 360
By perpendicular_direction_conditions_v0_r on B, G, line_intersection(f, Line(I, K)), I we get 180 == 2 * direction(B, G) - 2 * direction(line_intersection(f, Line(I, K)), I) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(F, G)), F, F, H we get 180 == 2 * direction(line_intersection(i, Line(F, G)), F) - 2 * direction(F, H) mod 360
By perpendicular_direction_conditions_v0_r on I, line_intersection(f, Line(I, K)), G, A we get 180 == 2 * direction(I, line_intersection(f, Line(I, K))) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, G)), G, center(Circle(B, D, E)), D we get 180 == 2 * direction(line_intersection(j, Line(E, G)), G) - 2 * direction(center(Circle(B, D, E)), D) mod 360
By perpendicular_direction_conditions_v0_r on B, D, E, line_intersection(j, Line(E, G)) we get 180 == 2 * direction(B, D) - 2 * direction(E, line_intersection(j, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on I, K, line_intersection(f, Line(I, K)), A we get 180 == 2 * direction(I, K) - 2 * direction(line_intersection(f, Line(I, K)), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on H, G, line_intersection(f, Line(I, K)), G we get 180 == 2 * direction(H, G) - 2 * direction(line_intersection(f, Line(I, K)), G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(F, G)), F, center(Circle(A, D, F)), A we get 180 == 2 * direction(line_intersection(i, Line(F, G)), F) - 2 * direction(center(Circle(A, D, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(i, Line(F, G)), G, F we get 180 == 2 * direction(A, line_intersection(i, Line(F, G))) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), B, G, H we get 180 == 2 * direction(line_intersection(f, Line(I, K)), B) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0_r on B, A, line_intersection(f, Line(I, K)), K we get 180 == 2 * direction(B, A) - 2 * direction(line_intersection(f, Line(I, K)), K) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(i, Line(F, G)), G, F we get 180 == 2 * direction(D, line_intersection(i, Line(F, G))) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on E, G, line_intersection(j, Line(E, G)), B we get 180 == 2 * direction(E, G) - 2 * direction(line_intersection(j, Line(E, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on B, A, K, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(B, A) - 2 * direction(K, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), G, G, D we get 180 == 2 * direction(line_intersection(f, Line(I, K)), G) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on G, D, line_intersection(f, Line(I, K)), A we get 180 == 2 * direction(G, D) - 2 * direction(line_intersection(f, Line(I, K)), A) mod 360
By perpendicular_direction_conditions_v0_r on G, D, G, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(G, D) - 2 * direction(G, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(f, Line(I, K)), G, H we get 180 == 2 * direction(B, line_intersection(f, Line(I, K))) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0_r on K, I, A, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(K, I) - 2 * direction(A, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), B, D, H we get 180 == 2 * direction(line_intersection(f, Line(I, K)), B) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on I, line_intersection(f, Line(I, K)), G, B we get 180 == 2 * direction(I, line_intersection(f, Line(I, K))) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on A, B, I, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(A, B) - 2 * direction(I, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(f, Line(I, K)), G, D we get 180 == 2 * direction(A, line_intersection(f, Line(I, K))) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), A, K, I we get 180 == 2 * direction(line_intersection(f, Line(I, K)), A) - 2 * direction(K, I) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, G)), G, E, H we get 180 == 2 * direction(line_intersection(j, Line(E, G)), G) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on I, K, line_intersection(f, Line(I, K)), G we get 180 == 2 * direction(I, K) - 2 * direction(line_intersection(f, Line(I, K)), G) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(f, Line(I, K)), D, H we get 180 == 2 * direction(A, line_intersection(f, Line(I, K))) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), G, H, G we get 180 == 2 * direction(line_intersection(f, Line(I, K)), G) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0_r on B, G, K, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(B, G) - 2 * direction(K, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on D, B, E, line_intersection(j, Line(E, G)) we get 180 == 2 * direction(D, B) - 2 * direction(E, line_intersection(j, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(f, Line(I, K)), H, G we get 180 == 2 * direction(A, line_intersection(f, Line(I, K))) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), G, H, D we get 180 == 2 * direction(line_intersection(f, Line(I, K)), G) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(i, Line(F, G)), D, A we get 180 == 2 * direction(G, line_intersection(i, Line(F, G))) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), I, A, B we get 180 == 2 * direction(line_intersection(f, Line(I, K)), I) - 2 * direction(A, B) mod 360
By in_imply_concyclic on J, E, F, line_circle_tangent_point(g, c) we get concyclic(E, F, J, line_circle_tangent_point(g, c))
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), B, H, D we get 180 == 2 * direction(line_intersection(f, Line(I, K)), B) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on H, D, B, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(H, D) - 2 * direction(B, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on I, line_intersection(f, Line(I, K)), B, G we get 180 == 2 * direction(I, line_intersection(f, Line(I, K))) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), E, midpoint(E, F) we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(j, Line(E, G)), D, center(Circle(B, D, E)) we get 180 == 2 * direction(G, line_intersection(j, Line(E, G))) - 2 * direction(D, center(Circle(B, D, E))) mod 360
By perpendicular_direction_conditions_v0_r on F, H, G, line_intersection(i, Line(F, G)) we get 180 == 2 * direction(F, H) - 2 * direction(G, line_intersection(i, Line(F, G))) mod 360
By perpendicular_direction_conditions_v0_r on B, G, I, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(B, G) - 2 * direction(I, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(A, D, F)), D, G, line_intersection(i, Line(F, G)) we get 180 == 2 * direction(center(Circle(A, D, F)), D) - 2 * direction(G, line_intersection(i, Line(F, G))) mod 360
By perpendicular_direction_conditions_v0_r on A, G, I, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(A, G) - 2 * direction(I, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(i, Line(F, G)), center(Circle(A, D, F)), A we get 180 == 2 * direction(F, line_intersection(i, Line(F, G))) - 2 * direction(center(Circle(A, D, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(B, D, E)), B, E, line_intersection(j, Line(E, G)) we get 180 == 2 * direction(center(Circle(B, D, E)), B) - 2 * direction(E, line_intersection(j, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), F, midpoint(E, F) we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on A, D, F, line_intersection(i, Line(F, G)) we get 180 == 2 * direction(A, D) - 2 * direction(F, line_intersection(i, Line(F, G))) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(f, Line(I, K)), H, D we get 180 == 2 * direction(G, line_intersection(f, Line(I, K))) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), midpoint(E, F), F we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on H, D, G, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(H, D) - 2 * direction(G, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on D, H, line_intersection(f, Line(I, K)), G we get 180 == 2 * direction(D, H) - 2 * direction(line_intersection(f, Line(I, K)), G) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(j, Line(E, G)), E, G we get 180 == 2 * direction(B, line_intersection(j, Line(E, G))) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), midpoint(E, F), E we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on I, K, G, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(I, K) - 2 * direction(G, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), I, A, G we get 180 == 2 * direction(line_intersection(f, Line(I, K)), I) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(F, G)), F, center(Circle(A, D, F)), D we get 180 == 2 * direction(line_intersection(i, Line(F, G)), F) - 2 * direction(center(Circle(A, D, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on K, I, line_intersection(f, Line(I, K)), G we get 180 == 2 * direction(K, I) - 2 * direction(line_intersection(f, Line(I, K)), G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), I, B, G we get 180 == 2 * direction(line_intersection(f, Line(I, K)), I) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, G)), E, center(Circle(B, D, E)), D we get 180 == 2 * direction(line_intersection(j, Line(E, G)), E) - 2 * direction(center(Circle(B, D, E)), D) mod 360
By perpendicular_direction_conditions_v0_r on K, line_intersection(f, Line(I, K)), A, B we get 180 == 2 * direction(K, line_intersection(f, Line(I, K))) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, Line(E, G)), H, E we get 180 == 2 * direction(E, line_intersection(j, Line(E, G))) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on F, E, midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, A, line_intersection(i, Line(F, G)), F we get 180 == 2 * direction(D, A) - 2 * direction(line_intersection(i, Line(F, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on B, center(Circle(B, D, E)), G, line_intersection(j, Line(E, G)) we get 180 == 2 * direction(B, center(Circle(B, D, E))) - 2 * direction(G, line_intersection(j, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on G, A, line_intersection(f, Line(I, K)), K we get 180 == 2 * direction(G, A) - 2 * direction(line_intersection(f, Line(I, K)), K) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(j, Line(E, G)), H, E we get 180 == 2 * direction(G, line_intersection(j, Line(E, G))) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on H, G, A, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(H, G) - 2 * direction(A, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on B, A, line_intersection(f, Line(I, K)), I we get 180 == 2 * direction(B, A) - 2 * direction(line_intersection(f, Line(I, K)), I) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), I, B, A we get 180 == 2 * direction(line_intersection(f, Line(I, K)), I) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(F, G)), A, F, G we get 180 == 2 * direction(line_intersection(i, Line(F, G)), A) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on A, G, line_intersection(f, Line(I, K)), I we get 180 == 2 * direction(A, G) - 2 * direction(line_intersection(f, Line(I, K)), I) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), K, A, G we get 180 == 2 * direction(line_intersection(f, Line(I, K)), K) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on D, H, A, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(D, H) - 2 * direction(A, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), A, H, D we get 180 == 2 * direction(line_intersection(f, Line(I, K)), A) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(F, G)), G, A, D we get 180 == 2 * direction(line_intersection(i, Line(F, G)), G) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on E, H, G, line_intersection(j, Line(E, G)) we get 180 == 2 * direction(E, H) - 2 * direction(G, line_intersection(j, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(i, Line(F, G)), H, F we get 180 == 2 * direction(F, line_intersection(i, Line(F, G))) - 2 * direction(H, F) mod 360
By perpendicular_direction_conditions_v0_r on E, G, D, line_intersection(j, Line(E, G)) we get 180 == 2 * direction(E, G) - 2 * direction(D, line_intersection(j, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(F, G)), F, D, A we get 180 == 2 * direction(line_intersection(i, Line(F, G)), F) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), K, B, G we get 180 == 2 * direction(line_intersection(f, Line(I, K)), K) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on A, center(Circle(A, D, F)), line_intersection(i, Line(F, G)), G we get 180 == 2 * direction(A, center(Circle(A, D, F))) - 2 * direction(line_intersection(i, Line(F, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on G, D, line_intersection(f, Line(I, K)), B we get 180 == 2 * direction(G, D) - 2 * direction(line_intersection(f, Line(I, K)), B) mod 360
By perpendicular_direction_conditions_v0_r on A, B, line_intersection(f, Line(I, K)), K we get 180 == 2 * direction(A, B) - 2 * direction(line_intersection(f, Line(I, K)), K) mod 360
By perpendicular_direction_conditions_v0_r on K, I, line_intersection(f, Line(I, K)), A we get 180 == 2 * direction(K, I) - 2 * direction(line_intersection(f, Line(I, K)), A) mod 360
By perpendicular_direction_conditions_v0_r on F, H, line_intersection(i, Line(F, G)), F we get 180 == 2 * direction(F, H) - 2 * direction(line_intersection(i, Line(F, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(B, D, E)), D, line_intersection(j, Line(E, G)), G we get 180 == 2 * direction(center(Circle(B, D, E)), D) - 2 * direction(line_intersection(j, Line(E, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(f, Line(I, K)), D, G we get 180 == 2 * direction(A, line_intersection(f, Line(I, K))) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on I, line_intersection(f, Line(I, K)), A, G we get 180 == 2 * direction(I, line_intersection(f, Line(I, K))) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), F, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, Line(E, G)), center(Circle(B, D, E)), D we get 180 == 2 * direction(E, line_intersection(j, Line(E, G))) - 2 * direction(center(Circle(B, D, E)), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, G)), B, E, G we get 180 == 2 * direction(line_intersection(j, Line(E, G)), B) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on G, H, G, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(G, H) - 2 * direction(G, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(i, Line(F, G)), D, center(Circle(A, D, F)) we get 180 == 2 * direction(F, line_intersection(i, Line(F, G))) - 2 * direction(D, center(Circle(A, D, F))) mod 360
By perpendicular_direction_conditions_v0_r on H, D, line_intersection(f, Line(I, K)), G we get 180 == 2 * direction(H, D) - 2 * direction(line_intersection(f, Line(I, K)), G) mod 360
By perpendicular_direction_conditions_v0_r on G, B, line_intersection(f, Line(I, K)), I we get 180 == 2 * direction(G, B) - 2 * direction(line_intersection(f, Line(I, K)), I) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(i, Line(F, G)), A, D we get 180 == 2 * direction(G, line_intersection(i, Line(F, G))) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(f, Line(I, K)), D, H we get 180 == 2 * direction(B, line_intersection(f, Line(I, K))) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on H, F, line_intersection(i, Line(F, G)), F we get 180 == 2 * direction(H, F) - 2 * direction(line_intersection(i, Line(F, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), midpoint(E, F), F we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, G)), E, B, D we get 180 == 2 * direction(line_intersection(j, Line(E, G)), E) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on B, center(Circle(B, D, E)), E, line_intersection(j, Line(E, G)) we get 180 == 2 * direction(B, center(Circle(B, D, E))) - 2 * direction(E, line_intersection(j, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(F, G)), G, H, F we get 180 == 2 * direction(line_intersection(i, Line(F, G)), G) - 2 * direction(H, F) mod 360
By perpendicular_direction_conditions_v0_r on G, E, line_intersection(j, Line(E, G)), D we get 180 == 2 * direction(G, E) - 2 * direction(line_intersection(j, Line(E, G)), D) mod 360
By perpendicular_direction_conditions_v0_r on E, G, line_intersection(j, Line(E, G)), D we get 180 == 2 * direction(E, G) - 2 * direction(line_intersection(j, Line(E, G)), D) mod 360
By perpendicular_direction_conditions_v0_r on G, A, K, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(G, A) - 2 * direction(K, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(F, G)), G, F, H we get 180 == 2 * direction(line_intersection(i, Line(F, G)), G) - 2 * direction(F, H) mod 360
By perpendicular_direction_conditions_v0_r on G, H, line_intersection(f, Line(I, K)), A we get 180 == 2 * direction(G, H) - 2 * direction(line_intersection(f, Line(I, K)), A) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(f, Line(I, K)), K, I we get 180 == 2 * direction(G, line_intersection(f, Line(I, K))) - 2 * direction(K, I) mod 360
By perpendicular_direction_conditions_v0_r on H, F, line_intersection(i, Line(F, G)), G we get 180 == 2 * direction(H, F) - 2 * direction(line_intersection(i, Line(F, G)), G) mod 360
By in_imply_collinear on center(Circle(A, D, F)), D, line_intersection(i, Line(F, G)) we get collinear(D, center(Circle(A, D, F)), line_intersection(i, Line(F, G)))
By in_imply_collinear on line_circle_tangent_point(h, c), F, C we get collinear(C, F, line_circle_tangent_point(h, c))
By in_imply_collinear on line_circle_tangent_point(f, c), line_intersection(f, Line(I, K)), G we get collinear(G, line_circle_tangent_point(f, c), line_intersection(f, Line(I, K)))
By in_imply_concyclic on J, F, H, line_circle_tangent_point(h, c) we get concyclic(F, H, J, line_circle_tangent_point(h, c))
By sas_anti_similarity on E, B, G, G, center(Circle(B, D, E)), D we get anti_similar_triangles(B, E, G, center(Circle(B, D, E)), G, D)
By in_imply_concyclic on E, G, J, line_circle_tangent_point(h, c) we get concyclic(E, G, J, line_circle_tangent_point(h, c))
By log_of_2_times_distance on D, C, midpoint(C, D), E we get log(distance(C, D)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(E, midpoint(C, D)))
By sas_similarity on F, midpoint(C, D), C, F, D, E we get similar_triangles(C, F, midpoint(C, D), E, F, D)
By in_imply_concyclic on F, H, E, line_circle_tangent_point(g, c) we get concyclic(E, F, H, line_circle_tangent_point(g, c))
By in_imply_collinear on midpoint(E, G), D, center(Circle(B, D, E)) we get collinear(D, midpoint(E, G), center(Circle(B, D, E)))
By sas_anti_similarity on G, D, F, F, center(Circle(A, D, F)), A we get anti_similar_triangles(A, F, center(Circle(A, D, F)), F, G, D)
By in_imply_collinear on center(Circle(B, D, E)), line_intersection(j, Line(E, G)), B we get collinear(B, center(Circle(B, D, E)), line_intersection(j, Line(E, G)))
By in_imply_collinear on line_circle_tangent_point(g, c), E, B we get collinear(B, E, line_circle_tangent_point(g, c))
By in_imply_collinear on midpoint(E, G), D, line_intersection(j, Line(E, G)) we get collinear(D, midpoint(E, G), line_intersection(j, Line(E, G)))
By in_imply_collinear on midpoint(F, G), A, D we get collinear(A, D, midpoint(F, G))
By in_imply_collinear on midpoint(E, G), B, center(Circle(B, D, E)) we get collinear(B, midpoint(E, G), center(Circle(B, D, E)))
By in_imply_collinear on midpoint(F, G), line_intersection(i, Line(F, G)), A we get collinear(A, midpoint(F, G), line_intersection(i, Line(F, G)))
By in_imply_collinear on line_circle_tangent_point(f, c), A, line_intersection(f, Line(I, K)) we get collinear(A, line_circle_tangent_point(f, c), line_intersection(f, Line(I, K)))
By sas_similarity on G, center(Circle(B, D, E)), B, G, D, E we get similar_triangles(B, G, center(Circle(B, D, E)), E, G, D)
By in_imply_collinear on line_circle_tangent_point(h, c), A, C we get collinear(A, C, line_circle_tangent_point(h, c))
By in_imply_concyclic on J, G, H, line_circle_tangent_point(g, c) we get concyclic(G, H, J, line_circle_tangent_point(g, c))
By in_imply_collinear on line_intersection(j, Line(E, G)), center(Circle(B, D, E)), D we get collinear(D, center(Circle(B, D, E)), line_intersection(j, Line(E, G)))
By in_imply_collinear on line_intersection(i, Line(F, G)), A, center(Circle(A, D, F)) we get collinear(A, center(Circle(A, D, F)), line_intersection(i, Line(F, G)))
By in_imply_collinear on midpoint(E, G), line_intersection(j, Line(E, G)), B we get collinear(B, midpoint(E, G), line_intersection(j, Line(E, G)))
By in_imply_collinear on line_circle_tangent_point(f, c), line_intersection(f, Line(I, K)), B we get collinear(B, line_circle_tangent_point(f, c), line_intersection(f, Line(I, K)))
By in_imply_collinear on line_circle_tangent_point(g, c), E, C we get collinear(C, E, line_circle_tangent_point(g, c))
By in_imply_collinear on line_circle_tangent_point(f, c), A, B we get collinear(A, B, line_circle_tangent_point(f, c))
By in_imply_collinear on midpoint(F, G), D, center(Circle(A, D, F)) we get collinear(D, midpoint(F, G), center(Circle(A, D, F)))
By in_imply_concyclic on H, E, G, line_circle_tangent_point(h, c) we get concyclic(E, G, H, line_circle_tangent_point(h, c))
By in_imply_collinear on midpoint(E, G), B, D we get collinear(B, D, midpoint(E, G))
By in_imply_collinear on line_circle_tangent_point(f, c), B, G we get collinear(B, G, line_circle_tangent_point(f, c))
By internal_angle_bisector_definition_v0 on A, center(Circle(B, D, E)), E, B we get angle(A, B, center(Circle(B, D, E))) == angle(center(Circle(B, D, E)), B, E) mod 360
By in_imply_concyclic on G, E, F, line_circle_tangent_point(h, c) we get concyclic(E, F, G, line_circle_tangent_point(h, c))
By in_imply_concyclic on G, J, E, line_circle_tangent_point(f, c) we get concyclic(E, G, J, line_circle_tangent_point(f, c))
By in_imply_concyclic on J, F, H, line_circle_tangent_point(f, c) we get concyclic(F, H, J, line_circle_tangent_point(f, c))
By in_imply_concyclic on G, E, H, line_circle_tangent_point(g, c) we get concyclic(E, G, H, line_circle_tangent_point(g, c))
By sas_anti_similarity on E, center(Circle(B, D, E)), D, G, B, E we get anti_similar_triangles(B, E, G, center(Circle(B, D, E)), D, E)
By in_imply_concyclic on F, E, H, line_circle_tangent_point(f, c) we get concyclic(E, F, H, line_circle_tangent_point(f, c))
By in_imply_concyclic on H, E, J, line_circle_tangent_point(f, c) we get concyclic(E, H, J, line_circle_tangent_point(f, c))
By internal_angle_bisector_definition_v0 on C, center(Circle(A, D, F)), G, A we get angle(C, A, center(Circle(A, D, F))) == angle(center(Circle(A, D, F)), A, G) mod 360
By aa_anti_similarity on E, midpoint(E, F), D, F, midpoint(E, F), D we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By point_on_perpendicular_bisector on G, F, line_intersection(i, Line(F, G)), i we get distance(F, line_intersection(i, Line(F, G))) == distance(G, line_intersection(i, Line(F, G)))
By in_imply_collinear on midpoint(F, G), A, center(Circle(A, D, F)) we get collinear(A, midpoint(F, G), center(Circle(A, D, F)))
By tangent_point_is_unique on G, line_circle_tangent_point(f, c), c, f we get G == line_circle_tangent_point(f, c)
By sas_anti_congruence on F, C, midpoint(E, F), E, C, midpoint(E, F) we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By internal_angle_bisector_definition_v0 on G, center(Circle(B, D, E)), C, B we get angle(G, B, center(Circle(B, D, E))) == angle(center(Circle(B, D, E)), B, C) mod 360
By tangent_point_is_unique on E, line_circle_tangent_point(g, c), c, g we get E == line_circle_tangent_point(g, c)
By in_imply_concyclic on J, F, H, line_circle_tangent_point(g, c) we get concyclic(F, H, J, line_circle_tangent_point(g, c))
By sas_similarity on F, midpoint(C, D), D, F, C, E we get similar_triangles(C, E, F, midpoint(C, D), D, F)
By in_imply_concyclic on F, E, J, line_circle_tangent_point(h, c) we get concyclic(E, F, J, line_circle_tangent_point(h, c))
By sas_similarity on G, D, F, G, center(Circle(A, D, F)), A we get similar_triangles(A, G, center(Circle(A, D, F)), F, G, D)
By in_imply_concyclic on E, J, H, line_circle_tangent_point(g, c) we get concyclic(E, H, J, line_circle_tangent_point(g, c))
By in_imply_concyclic on F, G, H, line_circle_tangent_point(h, c) we get concyclic(F, G, H, line_circle_tangent_point(h, c))
By in_imply_concyclic on E, G, F, line_circle_tangent_point(g, c) we get concyclic(E, F, G, line_circle_tangent_point(g, c))
By sas_similarity on D, center(Circle(B, D, E)), E, H, D, E we get similar_triangles(D, E, H, center(Circle(B, D, E)), E, D)
By sas_similarity on D, center(Circle(A, D, F)), G, F, D, H we get similar_triangles(D, F, H, center(Circle(A, D, F)), D, G)
By in_imply_concyclic on E, J, G, line_circle_tangent_point(g, c) we get concyclic(E, G, J, line_circle_tangent_point(g, c))
By in_imply_concyclic on G, F, J, line_circle_tangent_point(f, c) we get concyclic(F, G, J, line_circle_tangent_point(f, c))
By sas_anti_congruence on C, midpoint(E, F), E, C, midpoint(E, F), F we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By in_imply_concyclic on G, J, F, line_circle_tangent_point(h, c) we get concyclic(F, G, J, line_circle_tangent_point(h, c))
By sas_anti_similarity on F, center(Circle(A, D, F)), D, H, D, F we get anti_similar_triangles(D, F, H, center(Circle(A, D, F)), D, F)
By asa_anti_congruence on D, midpoint(E, F), F, D, midpoint(E, F), E we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By in_imply_concyclic on J, F, G, line_circle_tangent_point(g, c) we get concyclic(F, G, J, line_circle_tangent_point(g, c))
By log_of_2_times_distance on C, D, midpoint(C, D), D we get log(distance(C, D)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(D, midpoint(C, D)))
By in_imply_concyclic on J, G, H, line_circle_tangent_point(h, c) we get concyclic(G, H, J, line_circle_tangent_point(h, c))
By in_imply_concyclic on J, H, E, line_circle_tangent_point(h, c) we get concyclic(E, H, J, line_circle_tangent_point(h, c))
By sas_anti_congruence on E, D, midpoint(E, F), F, D, midpoint(E, F) we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_similarity on D, center(Circle(A, D, F)), F, H, D, F we get similar_triangles(D, F, H, center(Circle(A, D, F)), F, D)
By sas_anti_similarity on E, midpoint(C, D), D, F, C, E we get anti_similar_triangles(C, E, F, midpoint(C, D), D, E)
By in_imply_concyclic on H, F, E, line_circle_tangent_point(h, c) we get concyclic(E, F, H, line_circle_tangent_point(h, c))
By in_imply_concyclic on H, J, G, line_circle_tangent_point(f, c) we get concyclic(G, H, J, line_circle_tangent_point(f, c))
By sas_similarity on D, center(Circle(B, D, E)), G, E, B, G we get similar_triangles(B, E, G, center(Circle(B, D, E)), D, G)
By sas_anti_similarity on H, D, E, E, center(Circle(B, D, E)), D we get anti_similar_triangles(D, E, H, center(Circle(B, D, E)), D, E)
By sas_similarity on F, A, G, F, center(Circle(A, D, F)), D we get similar_triangles(A, F, G, center(Circle(A, D, F)), F, D)
By internal_angle_bisector_definition_v0 on C, center(Circle(B, D, E)), G, B we get angle(C, B, center(Circle(B, D, E))) == angle(center(Circle(B, D, E)), B, G) mod 360
By sas_anti_similarity on F, center(Circle(A, D, F)), A, G, D, F we get anti_similar_triangles(A, F, center(Circle(A, D, F)), F, G, D)
By sas_similarity on E, D, G, E, center(Circle(B, D, E)), B we get similar_triangles(B, E, center(Circle(B, D, E)), G, E, D)
By sas_similarity on G, center(Circle(A, D, F)), D, H, D, F we get similar_triangles(D, F, H, center(Circle(A, D, F)), D, G)
By sas_similarity on D, center(Circle(A, D, F)), G, F, A, G we get similar_triangles(A, F, G, center(Circle(A, D, F)), D, G)
By sas_anti_similarity on F, D, midpoint(E, F), E, D, midpoint(E, F) we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_similarity on E, D, F, C, midpoint(C, D), F we get similar_triangles(C, F, midpoint(C, D), E, F, D)
By internal_angle_bisector_definition_v0 on F, center(Circle(A, D, F)), B, A we get angle(F, A, center(Circle(A, D, F))) == angle(center(Circle(A, D, F)), A, B) mod 360
By sas_anti_congruence on midpoint(E, F), D, F, midpoint(E, F), D, E we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_anti_similarity on D, center(Circle(B, D, E)), G, H, D, E we get anti_similar_triangles(D, E, H, center(Circle(B, D, E)), G, D)
By sas_anti_similarity on midpoint(E, F), D, E, midpoint(E, F), D, F we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By internal_angle_bisector_definition_v0 on G, center(Circle(A, D, F)), C, A we get angle(G, A, center(Circle(A, D, F))) == angle(center(Circle(A, D, F)), A, C) mod 360
By in_imply_concyclic on G, F, E, line_circle_tangent_point(f, c) we get concyclic(E, F, G, line_circle_tangent_point(f, c))
By sas_anti_congruence on F, D, midpoint(E, F), E, D, midpoint(E, F) we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_anti_similarity on G, center(Circle(A, D, F)), D, F, D, H we get anti_similar_triangles(D, F, H, center(Circle(A, D, F)), G, D)
By internal_angle_bisector_definition_v0 on E, center(Circle(B, D, E)), A, B we get angle(E, B, center(Circle(B, D, E))) == angle(center(Circle(B, D, E)), B, A) mod 360
By sas_similarity on G, D, E, G, center(Circle(B, D, E)), B we get similar_triangles(B, G, center(Circle(B, D, E)), E, G, D)
By aa_anti_similarity on F, D, midpoint(E, F), E, D, midpoint(E, F) we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_anti_congruence on E, midpoint(E, F), D, F, midpoint(E, F), D we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_similarity on E, B, G, E, center(Circle(B, D, E)), D we get similar_triangles(B, E, G, center(Circle(B, D, E)), E, D)
By angle_to_center on line_circle_tangent_point(g, c), line_circle_tangent_point(f, c), J, c we get angle(line_circle_tangent_point(g, c), center(c), J) == 2 * angle(line_circle_tangent_point(g, c), line_circle_tangent_point(f, c), J) mod 360
By reverse_direction on D, midpoint(E, F) we get 180 == direction(D, midpoint(E, F)) - direction(midpoint(E, F), D) mod 360
By sas_anti_similarity on F, midpoint(C, D), D, E, C, F we get anti_similar_triangles(C, E, F, midpoint(C, D), F, D)
By sas_similarity on E, D, G, B, center(Circle(B, D, E)), G we get similar_triangles(B, G, center(Circle(B, D, E)), E, G, D)
By sas_anti_similarity on G, B, E, D, center(Circle(B, D, E)), G we get anti_similar_triangles(B, E, G, center(Circle(B, D, E)), G, D)
By reverse_direction on midpoint(E, F), C we get 180 == direction(midpoint(E, F), C) - direction(C, midpoint(E, F)) mod 360
By log_of_2_times_distance on D, C, F, midpoint(C, D) we get log(distance(C, D)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(F, midpoint(C, D)))
By sas_anti_congruence on midpoint(E, F), C, E, midpoint(E, F), C, F we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By point_on_perpendicular_bisector on E, G, line_intersection(j, Line(E, G)), j we get distance(E, line_intersection(j, Line(E, G))) == distance(G, line_intersection(j, Line(E, G)))
By sas_anti_similarity on B, center(Circle(B, D, E)), G, G, D, E we get anti_similar_triangles(B, G, center(Circle(B, D, E)), G, E, D)
By internal_angle_bisector_definition_v0 on A, center(Circle(B, D, E)), C, B we get angle(A, B, center(Circle(B, D, E))) == angle(center(Circle(B, D, E)), B, C) mod 360
By sas_anti_similarity on midpoint(E, F), C, E, midpoint(E, F), C, F we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_anti_similarity on C, midpoint(C, D), F, F, D, E we get anti_similar_triangles(C, F, midpoint(C, D), F, E, D)
By aa_anti_similarity on E, D, midpoint(E, F), F, D, midpoint(E, F) we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_similarity on E, midpoint(C, D), D, E, C, F we get similar_triangles(C, E, F, midpoint(C, D), E, D)
By collinear_definition on C, midpoint(C, D), midpoint(E, F) we get midpoint(C, D) in Line(C, midpoint(E, F)), midpoint(E, F) in Line(C, midpoint(C, D)), Line(C, midpoint(C, D)) == Line(C, midpoint(E, F)), 0 == 2 * angle(midpoint(C, D), C, midpoint(E, F)) mod 360
By sas_similarity on G, B, E, D, center(Circle(B, D, E)), E we get similar_triangles(B, E, G, center(Circle(B, D, E)), E, D)
By sas_similarity on C, midpoint(C, D), F, E, D, F we get similar_triangles(C, F, midpoint(C, D), E, F, D)
By sas_similarity on F, center(Circle(A, D, F)), D, F, D, H we get similar_triangles(D, F, H, center(Circle(A, D, F)), F, D)
By sas_anti_congruence on D, midpoint(E, F), E, D, midpoint(E, F), F we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_anti_similarity on F, C, E, E, midpoint(C, D), D we get anti_similar_triangles(C, E, F, midpoint(C, D), D, E)
By sas_anti_similarity on F, D, E, C, midpoint(C, D), F we get anti_similar_triangles(C, F, midpoint(C, D), F, E, D)
By sas_similarity on E, D, H, D, center(Circle(B, D, E)), G we get similar_triangles(D, E, H, center(Circle(B, D, E)), D, G)
By in_imply_concyclic on H, G, F, line_circle_tangent_point(g, c) we get concyclic(F, G, H, line_circle_tangent_point(g, c))
By sas_anti_similarity on E, D, midpoint(E, F), F, D, midpoint(E, F) we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_similarity on F, D, G, F, center(Circle(A, D, F)), A we get similar_triangles(A, F, center(Circle(A, D, F)), G, F, D)
By sas_anti_similarity on D, midpoint(E, F), F, D, midpoint(E, F), E we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_anti_similarity on E, D, G, B, center(Circle(B, D, E)), E we get anti_similar_triangles(B, E, center(Circle(B, D, E)), E, G, D)
By sas_anti_similarity on C, midpoint(E, F), E, C, midpoint(E, F), F we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By in_imply_concyclic on F, J, E, line_circle_tangent_point(f, c) we get concyclic(E, F, J, line_circle_tangent_point(f, c))
By in_imply_concyclic on H, G, F, line_circle_tangent_point(f, c) we get concyclic(F, G, H, line_circle_tangent_point(f, c))
By between_implies_angles on C, midpoint(C, D), D we get 180 == angle(C, midpoint(C, D), D) mod 360, 0 == angle(midpoint(C, D), D, C) mod 360, 0 == angle(D, C, midpoint(C, D)) mod 360
By sas_similarity on F, center(Circle(A, D, F)), A, F, D, G we get similar_triangles(A, F, center(Circle(A, D, F)), G, F, D)
By aa_anti_similarity on E, C, midpoint(E, F), F, C, midpoint(E, F) we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_anti_similarity on D, midpoint(C, D), F, F, C, E we get anti_similar_triangles(C, E, F, midpoint(C, D), F, D)
By sas_anti_similarity on E, center(Circle(B, D, E)), D, H, D, E we get anti_similar_triangles(D, E, H, center(Circle(B, D, E)), D, E)
By sas_anti_similarity on E, D, H, D, center(Circle(B, D, E)), E we get anti_similar_triangles(D, E, H, center(Circle(B, D, E)), D, E)
By asa_anti_congruence on midpoint(E, F), D, F, midpoint(E, F), D, E we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_similarity on E, C, F, E, midpoint(C, D), D we get similar_triangles(C, E, F, midpoint(C, D), E, D)
By sas_similarity on G, D, F, A, center(Circle(A, D, F)), F we get similar_triangles(A, F, center(Circle(A, D, F)), G, F, D)
By sas_similarity on F, A, G, D, center(Circle(A, D, F)), G we get similar_triangles(A, F, G, center(Circle(A, D, F)), D, G)
By sas_similarity on A, center(Circle(A, D, F)), F, G, D, F we get similar_triangles(A, F, center(Circle(A, D, F)), G, F, D)
By sas_anti_similarity on A, center(Circle(A, D, F)), F, F, D, G we get anti_similar_triangles(A, F, center(Circle(A, D, F)), F, G, D)
By internal_angle_bisector_definition_v0 on B, center(Circle(A, D, F)), F, A we get angle(B, A, center(Circle(A, D, F))) == angle(center(Circle(A, D, F)), A, F) mod 360
By sas_anti_similarity on F, C, midpoint(E, F), E, C, midpoint(E, F) we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_anti_congruence on F, midpoint(E, F), D, E, midpoint(E, F), D we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_anti_congruence on E, C, midpoint(E, F), F, C, midpoint(E, F) we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_anti_similarity on G, A, F, F, center(Circle(A, D, F)), D we get anti_similar_triangles(A, F, G, center(Circle(A, D, F)), D, F)
By sas_anti_similarity on E, D, G, G, center(Circle(B, D, E)), B we get anti_similar_triangles(B, G, center(Circle(B, D, E)), G, E, D)
By sas_anti_congruence on C, midpoint(E, F), F, C, midpoint(E, F), E we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_anti_similarity on F, midpoint(E, F), D, E, midpoint(E, F), D we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By asa_anti_congruence on D, midpoint(E, F), E, D, midpoint(E, F), F we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_similarity on E, center(Circle(B, D, E)), B, E, D, G we get similar_triangles(B, E, center(Circle(B, D, E)), G, E, D)
By sas_similarity on B, center(Circle(B, D, E)), G, E, D, G we get similar_triangles(B, G, center(Circle(B, D, E)), E, G, D)
By sas_anti_similarity on F, A, G, G, center(Circle(A, D, F)), D we get anti_similar_triangles(A, F, G, center(Circle(A, D, F)), G, D)
By sas_anti_similarity on F, D, G, G, center(Circle(A, D, F)), A we get anti_similar_triangles(A, G, center(Circle(A, D, F)), G, F, D)
By sas_similarity on F, D, H, D, center(Circle(A, D, F)), G we get similar_triangles(D, F, H, center(Circle(A, D, F)), D, G)
By sas_similarity on F, D, E, F, midpoint(C, D), C we get similar_triangles(C, F, midpoint(C, D), E, F, D)
By sas_similarity on G, center(Circle(B, D, E)), D, H, D, E we get similar_triangles(D, E, H, center(Circle(B, D, E)), D, G)
By sas_anti_similarity on midpoint(E, F), D, F, midpoint(E, F), D, E we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By in_imply_concyclic on H, G, E, line_circle_tangent_point(f, c) we get concyclic(E, G, H, line_circle_tangent_point(f, c))
By sas_similarity on B, center(Circle(B, D, E)), E, G, D, E we get similar_triangles(B, E, center(Circle(B, D, E)), G, E, D)
By internal_angle_bisector_definition_v0 on C, center(Circle(A, D, F)), B, A we get angle(C, A, center(Circle(A, D, F))) == angle(center(Circle(A, D, F)), A, B) mod 360
By sas_anti_similarity on G, center(Circle(B, D, E)), D, E, D, H we get anti_similar_triangles(D, E, H, center(Circle(B, D, E)), G, D)
By sas_similarity on E, C, F, D, midpoint(C, D), F we get similar_triangles(C, E, F, midpoint(C, D), D, F)
By internal_angle_bisector_definition_v0 on B, center(Circle(A, D, F)), C, A we get angle(B, A, center(Circle(A, D, F))) == angle(center(Circle(A, D, F)), A, C) mod 360
By sas_anti_similarity on F, D, G, A, center(Circle(A, D, F)), F we get anti_similar_triangles(A, F, center(Circle(A, D, F)), F, G, D)
By reverse_direction on C, midpoint(E, F) we get 180 == direction(C, midpoint(E, F)) - direction(midpoint(E, F), C) mod 360
By sas_similarity on E, center(Circle(B, D, E)), D, E, B, G we get similar_triangles(B, E, G, center(Circle(B, D, E)), E, D)
By sas_similarity on D, midpoint(C, D), F, E, C, F we get similar_triangles(C, E, F, midpoint(C, D), D, F)
By asa_anti_congruence on midpoint(E, F), C, E, midpoint(E, F), C, F we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By aa_anti_similarity on E, midpoint(E, F), C, F, midpoint(E, F), C we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_anti_similarity on midpoint(E, F), C, F, midpoint(E, F), C, E we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_anti_similarity on F, midpoint(C, D), C, E, D, F we get anti_similar_triangles(C, F, midpoint(C, D), F, E, D)
By aa_anti_similarity on F, midpoint(E, F), C, E, midpoint(E, F), C we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_anti_similarity on E, C, F, D, midpoint(C, D), E we get anti_similar_triangles(C, E, F, midpoint(C, D), D, E)
By sas_anti_similarity on F, A, G, D, center(Circle(A, D, F)), F we get anti_similar_triangles(A, F, G, center(Circle(A, D, F)), D, F)
By sas_anti_similarity on D, center(Circle(A, D, F)), G, H, D, F we get anti_similar_triangles(D, F, H, center(Circle(A, D, F)), G, D)
By log_of_2_times_distance on C, D, midpoint(C, D), C we get log(distance(C, D)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(C, midpoint(C, D)))
By sas_similarity on D, center(Circle(B, D, E)), E, G, B, E we get similar_triangles(B, E, G, center(Circle(B, D, E)), E, D)
By sas_anti_similarity on E, D, H, G, center(Circle(B, D, E)), D we get anti_similar_triangles(D, E, H, center(Circle(B, D, E)), G, D)
By sas_similarity on H, D, E, G, center(Circle(B, D, E)), D we get similar_triangles(D, E, H, center(Circle(B, D, E)), D, G)
By sas_anti_similarity on E, D, F, F, midpoint(C, D), C we get anti_similar_triangles(C, F, midpoint(C, D), F, E, D)
By sas_similarity on C, midpoint(C, D), E, F, D, E we get similar_triangles(C, E, midpoint(C, D), F, E, D)
By sas_anti_similarity on C, midpoint(C, D), E, E, D, F we get anti_similar_triangles(C, E, midpoint(C, D), E, F, D)
By sas_anti_similarity on G, D, E, E, center(Circle(B, D, E)), B we get anti_similar_triangles(B, E, center(Circle(B, D, E)), E, G, D)
By sas_anti_similarity on G, center(Circle(B, D, E)), D, E, B, G we get anti_similar_triangles(B, E, G, center(Circle(B, D, E)), G, D)
By sas_similarity on G, B, E, G, center(Circle(B, D, E)), D we get similar_triangles(B, E, G, center(Circle(B, D, E)), D, G)
By sas_anti_similarity on D, midpoint(E, F), E, D, midpoint(E, F), F we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_similarity on E, center(Circle(B, D, E)), D, E, D, H we get similar_triangles(D, E, H, center(Circle(B, D, E)), E, D)
By asa_anti_congruence on midpoint(E, F), C, F, midpoint(E, F), C, E we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_anti_similarity on F, D, E, E, midpoint(C, D), C we get anti_similar_triangles(C, E, midpoint(C, D), E, F, D)
By sas_anti_similarity on F, D, H, D, center(Circle(A, D, F)), F we get anti_similar_triangles(D, F, H, center(Circle(A, D, F)), D, F)
By sas_anti_similarity on G, D, F, A, center(Circle(A, D, F)), G we get anti_similar_triangles(A, G, center(Circle(A, D, F)), G, F, D)
By asa_anti_congruence on midpoint(E, F), D, E, midpoint(E, F), D, F we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_similarity on F, D, G, A, center(Circle(A, D, F)), G we get similar_triangles(A, G, center(Circle(A, D, F)), F, G, D)
By collinear_definition on C, midpoint(E, F), midpoint(C, D) we get midpoint(E, F) in Line(C, midpoint(C, D)), midpoint(C, D) in Line(C, midpoint(E, F)), Line(C, midpoint(C, D)) == Line(C, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), C, midpoint(C, D)) mod 360
By sas_anti_similarity on D, midpoint(C, D), E, E, C, F we get anti_similar_triangles(C, E, F, midpoint(C, D), D, E)
By sas_anti_similarity on B, center(Circle(B, D, E)), E, E, D, G we get anti_similar_triangles(B, E, center(Circle(B, D, E)), E, G, D)
By sas_anti_similarity on F, C, E, D, midpoint(C, D), F we get anti_similar_triangles(C, E, F, midpoint(C, D), F, D)
By sas_anti_similarity on F, midpoint(E, F), C, E, midpoint(E, F), C we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_similarity on E, D, F, E, midpoint(C, D), C we get similar_triangles(C, E, midpoint(C, D), F, E, D)
By internal_angle_bisector_definition_v0 on C, center(Circle(B, D, E)), A, B we get angle(C, B, center(Circle(B, D, E))) == angle(center(Circle(B, D, E)), B, A) mod 360
By sas_anti_congruence on E, midpoint(E, F), C, F, midpoint(E, F), C we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_anti_similarity on F, D, H, G, center(Circle(A, D, F)), D we get anti_similar_triangles(D, F, H, center(Circle(A, D, F)), G, D)
By sas_anti_similarity on G, B, E, E, center(Circle(B, D, E)), D we get anti_similar_triangles(B, E, G, center(Circle(B, D, E)), D, E)
By sas_similarity on G, center(Circle(A, D, F)), A, G, D, F we get similar_triangles(A, G, center(Circle(A, D, F)), F, G, D)
By asa_anti_congruence on C, midpoint(E, F), F, C, midpoint(E, F), E we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By between_imply_segment_sum on G, D, H we get distance(G, H) == distance(D, G) + distance(D, H)
By sas_similarity on E, midpoint(C, D), C, E, D, F we get similar_triangles(C, E, midpoint(C, D), F, E, D)
By sas_anti_congruence on F, midpoint(E, F), C, E, midpoint(E, F), C we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_anti_similarity on D, center(Circle(A, D, F)), F, F, D, H we get anti_similar_triangles(D, F, H, center(Circle(A, D, F)), D, F)
By sas_anti_similarity on E, B, G, D, center(Circle(B, D, E)), E we get anti_similar_triangles(B, E, G, center(Circle(B, D, E)), D, E)
By sas_anti_similarity on E, midpoint(E, F), C, F, midpoint(E, F), C we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_anti_similarity on D, center(Circle(A, D, F)), G, G, A, F we get anti_similar_triangles(A, F, G, center(Circle(A, D, F)), G, D)
By sas_anti_similarity on G, center(Circle(A, D, F)), A, F, D, G we get anti_similar_triangles(A, G, center(Circle(A, D, F)), G, F, D)
By sas_anti_similarity on D, center(Circle(B, D, E)), E, E, D, H we get anti_similar_triangles(D, E, H, center(Circle(B, D, E)), D, E)
By sas_anti_similarity on E, D, F, C, midpoint(C, D), E we get anti_similar_triangles(C, E, midpoint(C, D), E, F, D)
By sas_anti_similarity on G, center(Circle(A, D, F)), D, F, A, G we get anti_similar_triangles(A, F, G, center(Circle(A, D, F)), G, D)
By sas_similarity on F, C, E, D, midpoint(C, D), E we get similar_triangles(C, E, F, midpoint(C, D), E, D)
By sas_anti_similarity on D, center(Circle(A, D, F)), F, F, A, G we get anti_similar_triangles(A, F, G, center(Circle(A, D, F)), D, F)
By collinear_definition on D, midpoint(C, D), midpoint(E, F) we get midpoint(C, D) in Line(D, midpoint(E, F)), midpoint(E, F) in Line(D, midpoint(C, D)), Line(D, midpoint(C, D)) == Line(D, midpoint(E, F)), 0 == 2 * angle(midpoint(C, D), D, midpoint(E, F)) mod 360
By sas_anti_similarity on D, center(Circle(B, D, E)), E, E, B, G we get anti_similar_triangles(B, E, G, center(Circle(B, D, E)), D, E)
By sas_anti_similarity on G, D, E, B, center(Circle(B, D, E)), G we get anti_similar_triangles(B, G, center(Circle(B, D, E)), G, E, D)
By sas_similarity on F, C, E, F, midpoint(C, D), D we get similar_triangles(C, E, F, midpoint(C, D), D, F)
By sas_anti_similarity on D, center(Circle(B, D, E)), G, G, B, E we get anti_similar_triangles(B, E, G, center(Circle(B, D, E)), G, D)
By sas_similarity on G, A, F, D, center(Circle(A, D, F)), F we get similar_triangles(A, F, G, center(Circle(A, D, F)), F, D)
By sas_anti_similarity on E, center(Circle(B, D, E)), B, G, D, E we get anti_similar_triangles(B, E, center(Circle(B, D, E)), E, G, D)
By aa_anti_similarity on F, midpoint(E, F), D, E, midpoint(E, F), D we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By asa_anti_congruence on C, midpoint(E, F), E, C, midpoint(E, F), F we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By aa_anti_similarity on F, C, midpoint(E, F), E, C, midpoint(E, F) we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_anti_similarity on E, midpoint(C, D), C, F, D, E we get anti_similar_triangles(C, E, midpoint(C, D), E, F, D)
By sas_anti_similarity on E, C, F, F, midpoint(C, D), D we get anti_similar_triangles(C, E, F, midpoint(C, D), F, D)
By sas_similarity on F, D, E, C, midpoint(C, D), E we get similar_triangles(C, E, midpoint(C, D), F, E, D)
By sas_anti_similarity on F, center(Circle(A, D, F)), D, G, A, F we get anti_similar_triangles(A, F, G, center(Circle(A, D, F)), D, F)
By sas_similarity on D, center(Circle(B, D, E)), G, E, D, H we get similar_triangles(D, E, H, center(Circle(B, D, E)), D, G)
By sas_similarity on H, D, F, G, center(Circle(A, D, F)), D we get similar_triangles(D, F, H, center(Circle(A, D, F)), D, G)
By sas_anti_similarity on G, center(Circle(B, D, E)), B, E, D, G we get anti_similar_triangles(B, G, center(Circle(B, D, E)), G, E, D)
By sas_similarity on H, D, E, D, center(Circle(B, D, E)), E we get similar_triangles(D, E, H, center(Circle(B, D, E)), E, D)
By sas_similarity on F, center(Circle(A, D, F)), D, F, A, G we get similar_triangles(A, F, G, center(Circle(A, D, F)), F, D)
By sas_anti_similarity on H, D, E, D, center(Circle(B, D, E)), G we get anti_similar_triangles(D, E, H, center(Circle(B, D, E)), G, D)
By sas_anti_similarity on H, D, F, D, center(Circle(A, D, F)), G we get anti_similar_triangles(D, F, H, center(Circle(A, D, F)), G, D)
By sas_anti_similarity on C, midpoint(E, F), F, C, midpoint(E, F), E we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_anti_similarity on A, center(Circle(A, D, F)), G, G, D, F we get anti_similar_triangles(A, G, center(Circle(A, D, F)), G, F, D)
By sas_anti_similarity on G, A, F, D, center(Circle(A, D, F)), G we get anti_similar_triangles(A, F, G, center(Circle(A, D, F)), G, D)
By sas_similarity on A, center(Circle(A, D, F)), G, F, D, G we get similar_triangles(A, G, center(Circle(A, D, F)), F, G, D)
By sas_similarity on G, A, F, G, center(Circle(A, D, F)), D we get similar_triangles(A, F, G, center(Circle(A, D, F)), D, G)
By sas_anti_similarity on E, C, midpoint(E, F), F, C, midpoint(E, F) we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_similarity on F, D, H, F, center(Circle(A, D, F)), D we get similar_triangles(D, F, H, center(Circle(A, D, F)), F, D)
By sas_similarity on G, center(Circle(A, D, F)), D, G, A, F we get similar_triangles(A, F, G, center(Circle(A, D, F)), D, G)
By between_implies_angles on D, midpoint(C, D), C we get 180 == angle(D, midpoint(C, D), C) mod 360, 0 == angle(midpoint(C, D), C, D) mod 360, 0 == angle(C, D, midpoint(C, D)) mod 360
By sas_anti_congruence on midpoint(E, F), D, E, midpoint(E, F), D, F we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_anti_congruence on D, midpoint(E, F), F, D, midpoint(E, F), E we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_similarity on E, D, H, E, center(Circle(B, D, E)), D we get similar_triangles(D, E, H, center(Circle(B, D, E)), E, D)
By sas_anti_congruence on midpoint(E, F), C, F, midpoint(E, F), C, E we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_similarity on D, center(Circle(A, D, F)), F, G, A, F we get similar_triangles(A, F, G, center(Circle(A, D, F)), F, D)
By sas_anti_similarity on E, midpoint(E, F), D, F, midpoint(E, F), D we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_similarity on G, center(Circle(B, D, E)), D, G, B, E we get similar_triangles(B, E, G, center(Circle(B, D, E)), D, G)
By reverse_direction on midpoint(E, F), D we get 180 == direction(midpoint(E, F), D) - direction(D, midpoint(E, F)) mod 360
By sas_similarity on D, midpoint(C, D), E, F, C, E we get similar_triangles(C, E, F, midpoint(C, D), E, D)
By sas_similarity on H, D, F, D, center(Circle(A, D, F)), F we get similar_triangles(D, F, H, center(Circle(A, D, F)), F, D)
By sas_similarity on G, D, E, B, center(Circle(B, D, E)), E we get similar_triangles(B, E, center(Circle(B, D, E)), G, E, D)
By collinear_definition on D, midpoint(E, F), midpoint(C, D) we get midpoint(E, F) in Line(D, midpoint(C, D)), midpoint(C, D) in Line(D, midpoint(E, F)), Line(D, midpoint(C, D)) == Line(D, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), D, midpoint(C, D)) mod 360
By angle_to_center on G, line_circle_tangent_point(g, c), line_circle_tangent_point(h, c), c we get angle(G, center(c), line_circle_tangent_point(h, c)) == 2 * angle(G, line_circle_tangent_point(g, c), line_circle_tangent_point(h, c)) mod 360
By angle_to_center on line_circle_tangent_point(f, c), line_circle_tangent_point(g, c), F, c we get angle(line_circle_tangent_point(f, c), center(c), F) == 2 * angle(line_circle_tangent_point(f, c), line_circle_tangent_point(g, c), F) mod 360
By angle_to_center on E, line_circle_tangent_point(h, c), line_circle_tangent_point(f, c), c we get angle(E, center(c), line_circle_tangent_point(f, c)) == 2 * angle(E, line_circle_tangent_point(h, c), line_circle_tangent_point(f, c)) mod 360
By angle_to_center on line_circle_tangent_point(g, c), line_circle_tangent_point(h, c), H, c we get angle(line_circle_tangent_point(g, c), center(c), H) == 2 * angle(line_circle_tangent_point(g, c), line_circle_tangent_point(h, c), H) mod 360
By angle_to_center on E, line_circle_tangent_point(f, c), line_circle_tangent_point(h, c), c we get angle(E, center(c), line_circle_tangent_point(h, c)) == 2 * angle(E, line_circle_tangent_point(f, c), line_circle_tangent_point(h, c)) mod 360
By angle_to_center on J, line_circle_tangent_point(h, c), line_circle_tangent_point(g, c), c we get angle(J, center(c), line_circle_tangent_point(g, c)) == 2 * angle(J, line_circle_tangent_point(h, c), line_circle_tangent_point(g, c)) mod 360
By angle_to_center on G, line_circle_tangent_point(h, c), line_circle_tangent_point(g, c), c we get angle(G, center(c), line_circle_tangent_point(g, c)) == 2 * angle(G, line_circle_tangent_point(h, c), line_circle_tangent_point(g, c)) mod 360
By angle_to_center on line_circle_tangent_point(h, c), line_circle_tangent_point(g, c), G, c we get angle(line_circle_tangent_point(h, c), center(c), G) == 2 * angle(line_circle_tangent_point(h, c), line_circle_tangent_point(g, c), G) mod 360
By angle_to_center on line_circle_tangent_point(f, c), line_circle_tangent_point(h, c), E, c we get angle(line_circle_tangent_point(f, c), center(c), E) == 2 * angle(line_circle_tangent_point(f, c), line_circle_tangent_point(h, c), E) mod 360
By angle_to_center on F, line_circle_tangent_point(f, c), line_circle_tangent_point(g, c), c we get angle(F, center(c), line_circle_tangent_point(g, c)) == 2 * angle(F, line_circle_tangent_point(f, c), line_circle_tangent_point(g, c)) mod 360
By angle_to_center on line_circle_tangent_point(g, c), line_circle_tangent_point(h, c), G, c we get angle(line_circle_tangent_point(g, c), center(c), G) == 2 * angle(line_circle_tangent_point(g, c), line_circle_tangent_point(h, c), G) mod 360
By angle_to_center on J, line_circle_tangent_point(f, c), line_circle_tangent_point(g, c), c we get angle(J, center(c), line_circle_tangent_point(g, c)) == 2 * angle(J, line_circle_tangent_point(f, c), line_circle_tangent_point(g, c)) mod 360
By angle_to_center on H, line_circle_tangent_point(g, c), line_circle_tangent_point(h, c), c we get angle(H, center(c), line_circle_tangent_point(h, c)) == 2 * angle(H, line_circle_tangent_point(g, c), line_circle_tangent_point(h, c)) mod 360
By angle_to_center on line_circle_tangent_point(h, c), line_circle_tangent_point(g, c), J, c we get angle(line_circle_tangent_point(h, c), center(c), J) == 2 * angle(line_circle_tangent_point(h, c), line_circle_tangent_point(g, c), J) mod 360
By angle_to_center on line_circle_tangent_point(g, c), line_circle_tangent_point(h, c), J, c we get angle(line_circle_tangent_point(g, c), center(c), J) == 2 * angle(line_circle_tangent_point(g, c), line_circle_tangent_point(h, c), J) mod 360
By angle_to_center on J, line_circle_tangent_point(f, c), line_circle_tangent_point(h, c), c we get angle(J, center(c), line_circle_tangent_point(h, c)) == 2 * angle(J, line_circle_tangent_point(f, c), line_circle_tangent_point(h, c)) mod 360
By angle_to_center on J, line_circle_tangent_point(h, c), line_circle_tangent_point(f, c), c we get angle(J, center(c), line_circle_tangent_point(f, c)) == 2 * angle(J, line_circle_tangent_point(h, c), line_circle_tangent_point(f, c)) mod 360
By angle_to_center on H, line_circle_tangent_point(f, c), line_circle_tangent_point(h, c), c we get angle(H, center(c), line_circle_tangent_point(h, c)) == 2 * angle(H, line_circle_tangent_point(f, c), line_circle_tangent_point(h, c)) mod 360
By angle_to_center on line_circle_tangent_point(f, c), line_circle_tangent_point(g, c), H, c we get angle(line_circle_tangent_point(f, c), center(c), H) == 2 * angle(line_circle_tangent_point(f, c), line_circle_tangent_point(g, c), H) mod 360
By angle_to_center on line_circle_tangent_point(f, c), line_circle_tangent_point(h, c), J, c we get angle(line_circle_tangent_point(f, c), center(c), J) == 2 * angle(line_circle_tangent_point(f, c), line_circle_tangent_point(h, c), J) mod 360
By angle_to_center on H, line_circle_tangent_point(h, c), line_circle_tangent_point(f, c), c we get angle(H, center(c), line_circle_tangent_point(f, c)) == 2 * angle(H, line_circle_tangent_point(h, c), line_circle_tangent_point(f, c)) mod 360
By angle_to_center on line_circle_tangent_point(g, c), line_circle_tangent_point(f, c), F, c we get angle(line_circle_tangent_point(g, c), center(c), F) == 2 * angle(line_circle_tangent_point(g, c), line_circle_tangent_point(f, c), F) mod 360
By angle_to_center on H, line_circle_tangent_point(h, c), line_circle_tangent_point(g, c), c we get angle(H, center(c), line_circle_tangent_point(g, c)) == 2 * angle(H, line_circle_tangent_point(h, c), line_circle_tangent_point(g, c)) mod 360
By angle_to_center on line_circle_tangent_point(h, c), line_circle_tangent_point(g, c), H, c we get angle(line_circle_tangent_point(h, c), center(c), H) == 2 * angle(line_circle_tangent_point(h, c), line_circle_tangent_point(g, c), H) mod 360
By angle_to_center on F, line_circle_tangent_point(g, c), line_circle_tangent_point(f, c), c we get angle(F, center(c), line_circle_tangent_point(f, c)) == 2 * angle(F, line_circle_tangent_point(g, c), line_circle_tangent_point(f, c)) mod 360
By angle_to_center on line_circle_tangent_point(h, c), line_circle_tangent_point(f, c), J, c we get angle(line_circle_tangent_point(h, c), center(c), J) == 2 * angle(line_circle_tangent_point(h, c), line_circle_tangent_point(f, c), J) mod 360
By angle_to_center on J, line_circle_tangent_point(g, c), line_circle_tangent_point(h, c), c we get angle(J, center(c), line_circle_tangent_point(h, c)) == 2 * angle(J, line_circle_tangent_point(g, c), line_circle_tangent_point(h, c)) mod 360
By angle_to_center on line_circle_tangent_point(f, c), line_circle_tangent_point(g, c), J, c we get angle(line_circle_tangent_point(f, c), center(c), J) == 2 * angle(line_circle_tangent_point(f, c), line_circle_tangent_point(g, c), J) mod 360
By angle_to_center on line_circle_tangent_point(h, c), line_circle_tangent_point(f, c), E, c we get angle(line_circle_tangent_point(h, c), center(c), E) == 2 * angle(line_circle_tangent_point(h, c), line_circle_tangent_point(f, c), E) mod 360
By angle_to_center on line_circle_tangent_point(h, c), line_circle_tangent_point(f, c), H, c we get angle(line_circle_tangent_point(h, c), center(c), H) == 2 * angle(line_circle_tangent_point(h, c), line_circle_tangent_point(f, c), H) mod 360
By angle_to_center on H, line_circle_tangent_point(g, c), line_circle_tangent_point(f, c), c we get angle(H, center(c), line_circle_tangent_point(f, c)) == 2 * angle(H, line_circle_tangent_point(g, c), line_circle_tangent_point(f, c)) mod 360
By angle_to_center on line_circle_tangent_point(f, c), line_circle_tangent_point(h, c), H, c we get angle(line_circle_tangent_point(f, c), center(c), H) == 2 * angle(line_circle_tangent_point(f, c), line_circle_tangent_point(h, c), H) mod 360
By angle_to_center on H, line_circle_tangent_point(f, c), line_circle_tangent_point(g, c), c we get angle(H, center(c), line_circle_tangent_point(g, c)) == 2 * angle(H, line_circle_tangent_point(f, c), line_circle_tangent_point(g, c)) mod 360
By angle_to_center on J, line_circle_tangent_point(g, c), line_circle_tangent_point(f, c), c we get angle(J, center(c), line_circle_tangent_point(f, c)) == 2 * angle(J, line_circle_tangent_point(g, c), line_circle_tangent_point(f, c)) mod 360
By angle_to_center on line_circle_tangent_point(g, c), line_circle_tangent_point(f, c), H, c we get angle(line_circle_tangent_point(g, c), center(c), H) == 2 * angle(line_circle_tangent_point(g, c), line_circle_tangent_point(f, c), H) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, Line(E, G)), line_intersection(j, Line(E, G)), D we get 180 == 2 * direction(E, line_intersection(j, Line(E, G))) - 2 * direction(line_intersection(j, Line(E, G)), D) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, Line(E, G)), D, line_intersection(j, Line(E, G)) we get 180 == 2 * direction(E, line_intersection(j, Line(E, G))) - 2 * direction(D, line_intersection(j, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(j, Line(E, G)), G, line_intersection(j, Line(E, G)) we get 180 == 2 * direction(D, line_intersection(j, Line(E, G))) - 2 * direction(G, line_intersection(j, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(i, Line(F, G)), F, line_intersection(i, Line(F, G)) we get 180 == 2 * direction(D, line_intersection(i, Line(F, G))) - 2 * direction(F, line_intersection(i, Line(F, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, G)), B, E, line_intersection(j, Line(E, G)) we get 180 == 2 * direction(line_intersection(j, Line(E, G)), B) - 2 * direction(E, line_intersection(j, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(F, G)), F, D, line_intersection(i, Line(F, G)) we get 180 == 2 * direction(line_intersection(i, Line(F, G)), F) - 2 * direction(D, line_intersection(i, Line(F, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(F, G)), F, line_intersection(i, Line(F, G)), A we get 180 == 2 * direction(line_intersection(i, Line(F, G)), F) - 2 * direction(line_intersection(i, Line(F, G)), A) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(j, Line(E, G)), E, line_intersection(j, Line(E, G)) we get 180 == 2 * direction(B, line_intersection(j, Line(E, G))) - 2 * direction(E, line_intersection(j, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), G, K, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(line_intersection(f, Line(I, K)), G) - 2 * direction(K, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), G, line_intersection(f, Line(I, K)), I we get 180 == 2 * direction(line_intersection(f, Line(I, K)), G) - 2 * direction(line_intersection(f, Line(I, K)), I) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(i, Line(F, G)), G, line_intersection(i, Line(F, G)) we get 180 == 2 * direction(D, line_intersection(i, Line(F, G))) - 2 * direction(G, line_intersection(i, Line(F, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), K, B, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(line_intersection(f, Line(I, K)), K) - 2 * direction(B, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(f, Line(I, K)), K, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(G, line_intersection(f, Line(I, K))) - 2 * direction(K, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(f, Line(I, K)), K, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(A, line_intersection(f, Line(I, K))) - 2 * direction(K, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(i, Line(F, G)), line_intersection(i, Line(F, G)), F we get 180 == 2 * direction(A, line_intersection(i, Line(F, G))) - 2 * direction(line_intersection(i, Line(F, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on K, line_intersection(f, Line(I, K)), G, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(K, line_intersection(f, Line(I, K))) - 2 * direction(G, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(f, Line(I, K)), line_intersection(f, Line(I, K)), K we get 180 == 2 * direction(B, line_intersection(f, Line(I, K))) - 2 * direction(line_intersection(f, Line(I, K)), K) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, G)), B, line_intersection(j, Line(E, G)), E we get 180 == 2 * direction(line_intersection(j, Line(E, G)), B) - 2 * direction(line_intersection(j, Line(E, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), A, K, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(line_intersection(f, Line(I, K)), A) - 2 * direction(K, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(i, Line(F, G)), F, line_intersection(i, Line(F, G)) we get 180 == 2 * direction(A, line_intersection(i, Line(F, G))) - 2 * direction(F, line_intersection(i, Line(F, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), I, G, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(line_intersection(f, Line(I, K)), I) - 2 * direction(G, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), B, line_intersection(f, Line(I, K)), I we get 180 == 2 * direction(line_intersection(f, Line(I, K)), B) - 2 * direction(line_intersection(f, Line(I, K)), I) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(F, G)), G, D, line_intersection(i, Line(F, G)) we get 180 == 2 * direction(line_intersection(i, Line(F, G)), G) - 2 * direction(D, line_intersection(i, Line(F, G))) mod 360
By perpendicular_direction_conditions_v0_r on K, line_intersection(f, Line(I, K)), A, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(K, line_intersection(f, Line(I, K))) - 2 * direction(A, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(i, Line(F, G)), line_intersection(i, Line(F, G)), A we get 180 == 2 * direction(F, line_intersection(i, Line(F, G))) - 2 * direction(line_intersection(i, Line(F, G)), A) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(i, Line(F, G)), A, line_intersection(i, Line(F, G)) we get 180 == 2 * direction(G, line_intersection(i, Line(F, G))) - 2 * direction(A, line_intersection(i, Line(F, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, G)), D, line_intersection(j, Line(E, G)), E we get 180 == 2 * direction(line_intersection(j, Line(E, G)), D) - 2 * direction(line_intersection(j, Line(E, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), G, I, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(line_intersection(f, Line(I, K)), G) - 2 * direction(I, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(F, G)), A, line_intersection(i, Line(F, G)), G we get 180 == 2 * direction(line_intersection(i, Line(F, G)), A) - 2 * direction(line_intersection(i, Line(F, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), I, A, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(line_intersection(f, Line(I, K)), I) - 2 * direction(A, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on I, line_intersection(f, Line(I, K)), B, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(I, line_intersection(f, Line(I, K))) - 2 * direction(B, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), A, I, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(line_intersection(f, Line(I, K)), A) - 2 * direction(I, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on I, line_intersection(f, Line(I, K)), line_intersection(f, Line(I, K)), B we get 180 == 2 * direction(I, line_intersection(f, Line(I, K))) - 2 * direction(line_intersection(f, Line(I, K)), B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), I, line_intersection(f, Line(I, K)), A we get 180 == 2 * direction(line_intersection(f, Line(I, K)), I) - 2 * direction(line_intersection(f, Line(I, K)), A) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(f, Line(I, K)), line_intersection(f, Line(I, K)), K we get 180 == 2 * direction(A, line_intersection(f, Line(I, K))) - 2 * direction(line_intersection(f, Line(I, K)), K) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), K, G, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(line_intersection(f, Line(I, K)), K) - 2 * direction(G, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), B, K, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(line_intersection(f, Line(I, K)), B) - 2 * direction(K, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(F, G)), A, G, line_intersection(i, Line(F, G)) we get 180 == 2 * direction(line_intersection(i, Line(F, G)), A) - 2 * direction(G, line_intersection(i, Line(F, G))) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(j, Line(E, G)), line_intersection(j, Line(E, G)), G we get 180 == 2 * direction(D, line_intersection(j, Line(E, G))) - 2 * direction(line_intersection(j, Line(E, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(j, Line(E, G)), line_intersection(j, Line(E, G)), G we get 180 == 2 * direction(B, line_intersection(j, Line(E, G))) - 2 * direction(line_intersection(j, Line(E, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(j, Line(E, G)), line_intersection(j, Line(E, G)), B we get 180 == 2 * direction(G, line_intersection(j, Line(E, G))) - 2 * direction(line_intersection(j, Line(E, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(f, Line(I, K)), I, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(B, line_intersection(f, Line(I, K))) - 2 * direction(I, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, G)), D, line_intersection(j, Line(E, G)), G we get 180 == 2 * direction(line_intersection(j, Line(E, G)), D) - 2 * direction(line_intersection(j, Line(E, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on I, line_intersection(f, Line(I, K)), line_intersection(f, Line(I, K)), G we get 180 == 2 * direction(I, line_intersection(f, Line(I, K))) - 2 * direction(line_intersection(f, Line(I, K)), G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, G)), B, G, line_intersection(j, Line(E, G)) we get 180 == 2 * direction(line_intersection(j, Line(E, G)), B) - 2 * direction(G, line_intersection(j, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, G)), E, line_intersection(j, Line(E, G)), B we get 180 == 2 * direction(line_intersection(j, Line(E, G)), E) - 2 * direction(line_intersection(j, Line(E, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(j, Line(E, G)), line_intersection(j, Line(E, G)), E we get 180 == 2 * direction(B, line_intersection(j, Line(E, G))) - 2 * direction(line_intersection(j, Line(E, G)), E) mod 360
By internal_angle_bisector_definition_v0 on D, midpoint(E, F), D, midpoint(C, D) we get angle(D, midpoint(C, D), midpoint(E, F)) == angle(midpoint(E, F), midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(i, Line(F, G)), line_intersection(i, Line(F, G)), G we get 180 == 2 * direction(A, line_intersection(i, Line(F, G))) - 2 * direction(line_intersection(i, Line(F, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), K, line_intersection(f, Line(I, K)), B we get 180 == 2 * direction(line_intersection(f, Line(I, K)), K) - 2 * direction(line_intersection(f, Line(I, K)), B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(F, G)), G, line_intersection(i, Line(F, G)), A we get 180 == 2 * direction(line_intersection(i, Line(F, G)), G) - 2 * direction(line_intersection(i, Line(F, G)), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), B, I, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(line_intersection(f, Line(I, K)), B) - 2 * direction(I, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on I, line_intersection(f, Line(I, K)), G, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(I, line_intersection(f, Line(I, K))) - 2 * direction(G, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), K, line_intersection(f, Line(I, K)), A we get 180 == 2 * direction(line_intersection(f, Line(I, K)), K) - 2 * direction(line_intersection(f, Line(I, K)), A) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(i, Line(F, G)), line_intersection(i, Line(F, G)), D we get 180 == 2 * direction(F, line_intersection(i, Line(F, G))) - 2 * direction(line_intersection(i, Line(F, G)), D) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(j, Line(E, G)), G, line_intersection(j, Line(E, G)) we get 180 == 2 * direction(B, line_intersection(j, Line(E, G))) - 2 * direction(G, line_intersection(j, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, G)), G, line_intersection(j, Line(E, G)), D we get 180 == 2 * direction(line_intersection(j, Line(E, G)), G) - 2 * direction(line_intersection(j, Line(E, G)), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), K, line_intersection(f, Line(I, K)), G we get 180 == 2 * direction(line_intersection(f, Line(I, K)), K) - 2 * direction(line_intersection(f, Line(I, K)), G) mod 360
By perpendicular_direction_conditions_v0_r on K, line_intersection(f, Line(I, K)), B, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(K, line_intersection(f, Line(I, K))) - 2 * direction(B, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), I, line_intersection(f, Line(I, K)), G we get 180 == 2 * direction(line_intersection(f, Line(I, K)), I) - 2 * direction(line_intersection(f, Line(I, K)), G) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(i, Line(F, G)), line_intersection(i, Line(F, G)), A we get 180 == 2 * direction(G, line_intersection(i, Line(F, G))) - 2 * direction(line_intersection(i, Line(F, G)), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), I, line_intersection(f, Line(I, K)), B we get 180 == 2 * direction(line_intersection(f, Line(I, K)), I) - 2 * direction(line_intersection(f, Line(I, K)), B) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(i, Line(F, G)), G, line_intersection(i, Line(F, G)) we get 180 == 2 * direction(A, line_intersection(i, Line(F, G))) - 2 * direction(G, line_intersection(i, Line(F, G))) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(f, Line(I, K)), line_intersection(f, Line(I, K)), I we get 180 == 2 * direction(A, line_intersection(f, Line(I, K))) - 2 * direction(line_intersection(f, Line(I, K)), I) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(F, G)), D, F, line_intersection(i, Line(F, G)) we get 180 == 2 * direction(line_intersection(i, Line(F, G)), D) - 2 * direction(F, line_intersection(i, Line(F, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, G)), E, D, line_intersection(j, Line(E, G)) we get 180 == 2 * direction(line_intersection(j, Line(E, G)), E) - 2 * direction(D, line_intersection(j, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, G)), G, D, line_intersection(j, Line(E, G)) we get 180 == 2 * direction(line_intersection(j, Line(E, G)), G) - 2 * direction(D, line_intersection(j, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(f, Line(I, K)), line_intersection(f, Line(I, K)), I we get 180 == 2 * direction(G, line_intersection(f, Line(I, K))) - 2 * direction(line_intersection(f, Line(I, K)), I) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(F, G)), F, A, line_intersection(i, Line(F, G)) we get 180 == 2 * direction(line_intersection(i, Line(F, G)), F) - 2 * direction(A, line_intersection(i, Line(F, G))) mod 360
By perpendicular_direction_conditions_v0_r on K, line_intersection(f, Line(I, K)), line_intersection(f, Line(I, K)), G we get 180 == 2 * direction(K, line_intersection(f, Line(I, K))) - 2 * direction(line_intersection(f, Line(I, K)), G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, G)), G, B, line_intersection(j, Line(E, G)) we get 180 == 2 * direction(line_intersection(j, Line(E, G)), G) - 2 * direction(B, line_intersection(j, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(j, Line(E, G)), D, line_intersection(j, Line(E, G)) we get 180 == 2 * direction(G, line_intersection(j, Line(E, G))) - 2 * direction(D, line_intersection(j, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(j, Line(E, G)), B, line_intersection(j, Line(E, G)) we get 180 == 2 * direction(G, line_intersection(j, Line(E, G))) - 2 * direction(B, line_intersection(j, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, G)), E, B, line_intersection(j, Line(E, G)) we get 180 == 2 * direction(line_intersection(j, Line(E, G)), E) - 2 * direction(B, line_intersection(j, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(f, Line(I, K)), K, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(B, line_intersection(f, Line(I, K))) - 2 * direction(K, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), I, B, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(line_intersection(f, Line(I, K)), I) - 2 * direction(B, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(i, Line(F, G)), A, line_intersection(i, Line(F, G)) we get 180 == 2 * direction(F, line_intersection(i, Line(F, G))) - 2 * direction(A, line_intersection(i, Line(F, G))) mod 360
By perpendicular_direction_conditions_v0_r on K, line_intersection(f, Line(I, K)), line_intersection(f, Line(I, K)), A we get 180 == 2 * direction(K, line_intersection(f, Line(I, K))) - 2 * direction(line_intersection(f, Line(I, K)), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, G)), D, E, line_intersection(j, Line(E, G)) we get 180 == 2 * direction(line_intersection(j, Line(E, G)), D) - 2 * direction(E, line_intersection(j, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(F, G)), A, F, line_intersection(i, Line(F, G)) we get 180 == 2 * direction(line_intersection(i, Line(F, G)), A) - 2 * direction(F, line_intersection(i, Line(F, G))) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(f, Line(I, K)), line_intersection(f, Line(I, K)), K we get 180 == 2 * direction(G, line_intersection(f, Line(I, K))) - 2 * direction(line_intersection(f, Line(I, K)), K) mod 360
By internal_angle_bisector_definition_v0_r on center(Circle(A, D, F)), D, center(Circle(A, D, F)), A we get Line(A, D) == internal_angle_bisector(center(Circle(A, D, F)), A, center(Circle(A, D, F)))
By perpendicular_direction_conditions_v0_r on I, line_intersection(f, Line(I, K)), A, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(I, line_intersection(f, Line(I, K))) - 2 * direction(A, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(f, Line(I, K)), line_intersection(f, Line(I, K)), I we get 180 == 2 * direction(B, line_intersection(f, Line(I, K))) - 2 * direction(line_intersection(f, Line(I, K)), I) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(i, Line(F, G)), D, line_intersection(i, Line(F, G)) we get 180 == 2 * direction(G, line_intersection(i, Line(F, G))) - 2 * direction(D, line_intersection(i, Line(F, G))) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(j, Line(E, G)), line_intersection(j, Line(E, G)), E we get 180 == 2 * direction(D, line_intersection(j, Line(E, G))) - 2 * direction(line_intersection(j, Line(E, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on I, line_intersection(f, Line(I, K)), line_intersection(f, Line(I, K)), A we get 180 == 2 * direction(I, line_intersection(f, Line(I, K))) - 2 * direction(line_intersection(f, Line(I, K)), A) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(i, Line(F, G)), line_intersection(i, Line(F, G)), F we get 180 == 2 * direction(D, line_intersection(i, Line(F, G))) - 2 * direction(line_intersection(i, Line(F, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(f, Line(I, K)), I, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(G, line_intersection(f, Line(I, K))) - 2 * direction(I, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, Line(E, G)), B, line_intersection(j, Line(E, G)) we get 180 == 2 * direction(E, line_intersection(j, Line(E, G))) - 2 * direction(B, line_intersection(j, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(F, G)), F, line_intersection(i, Line(F, G)), D we get 180 == 2 * direction(line_intersection(i, Line(F, G)), F) - 2 * direction(line_intersection(i, Line(F, G)), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), B, line_intersection(f, Line(I, K)), K we get 180 == 2 * direction(line_intersection(f, Line(I, K)), B) - 2 * direction(line_intersection(f, Line(I, K)), K) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(F, G)), G, line_intersection(i, Line(F, G)), D we get 180 == 2 * direction(line_intersection(i, Line(F, G)), G) - 2 * direction(line_intersection(i, Line(F, G)), D) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(f, Line(I, K)), I, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(A, line_intersection(f, Line(I, K))) - 2 * direction(I, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(F, G)), D, line_intersection(i, Line(F, G)), G we get 180 == 2 * direction(line_intersection(i, Line(F, G)), D) - 2 * direction(line_intersection(i, Line(F, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(i, Line(F, G)), D, line_intersection(i, Line(F, G)) we get 180 == 2 * direction(F, line_intersection(i, Line(F, G))) - 2 * direction(D, line_intersection(i, Line(F, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), K, A, line_intersection(f, Line(I, K)) we get 180 == 2 * direction(line_intersection(f, Line(I, K)), K) - 2 * direction(A, line_intersection(f, Line(I, K))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), A, line_intersection(f, Line(I, K)), K we get 180 == 2 * direction(line_intersection(f, Line(I, K)), A) - 2 * direction(line_intersection(f, Line(I, K)), K) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(F, G)), D, G, line_intersection(i, Line(F, G)) we get 180 == 2 * direction(line_intersection(i, Line(F, G)), D) - 2 * direction(G, line_intersection(i, Line(F, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), A, line_intersection(f, Line(I, K)), I we get 180 == 2 * direction(line_intersection(f, Line(I, K)), A) - 2 * direction(line_intersection(f, Line(I, K)), I) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, G)), B, line_intersection(j, Line(E, G)), G we get 180 == 2 * direction(line_intersection(j, Line(E, G)), B) - 2 * direction(line_intersection(j, Line(E, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(F, G)), A, line_intersection(i, Line(F, G)), F we get 180 == 2 * direction(line_intersection(i, Line(F, G)), A) - 2 * direction(line_intersection(i, Line(F, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(i, Line(F, G)), line_intersection(i, Line(F, G)), G we get 180 == 2 * direction(D, line_intersection(i, Line(F, G))) - 2 * direction(line_intersection(i, Line(F, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, Line(I, K)), G, line_intersection(f, Line(I, K)), K we get 180 == 2 * direction(line_intersection(f, Line(I, K)), G) - 2 * direction(line_intersection(f, Line(I, K)), K) mod 360
By perpendicular_direction_conditions_v0_r on K, line_intersection(f, Line(I, K)), line_intersection(f, Line(I, K)), B we get 180 == 2 * direction(K, line_intersection(f, Line(I, K))) - 2 * direction(line_intersection(f, Line(I, K)), B) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(j, Line(E, G)), E, line_intersection(j, Line(E, G)) we get 180 == 2 * direction(D, line_intersection(j, Line(E, G))) - 2 * direction(E, line_intersection(j, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(j, Line(E, G)), line_intersection(j, Line(E, G)), D we get 180 == 2 * direction(G, line_intersection(j, Line(E, G))) - 2 * direction(line_intersection(j, Line(E, G)), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, G)), D, G, line_intersection(j, Line(E, G)) we get 180 == 2 * direction(line_intersection(j, Line(E, G)), D) - 2 * direction(G, line_intersection(j, Line(E, G))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, Line(E, G)), line_intersection(j, Line(E, G)), B we get 180 == 2 * direction(E, line_intersection(j, Line(E, G))) - 2 * direction(line_intersection(j, Line(E, G)), B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(F, G)), D, line_intersection(i, Line(F, G)), F we get 180 == 2 * direction(line_intersection(i, Line(F, G)), D) - 2 * direction(line_intersection(i, Line(F, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on G, line_intersection(i, Line(F, G)), line_intersection(i, Line(F, G)), D we get 180 == 2 * direction(G, line_intersection(i, Line(F, G))) - 2 * direction(line_intersection(i, Line(F, G)), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(F, G)), G, A, line_intersection(i, Line(F, G)) we get 180 == 2 * direction(line_intersection(i, Line(F, G)), G) - 2 * direction(A, line_intersection(i, Line(F, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, G)), E, line_intersection(j, Line(E, G)), D we get 180 == 2 * direction(line_intersection(j, Line(E, G)), E) - 2 * direction(line_intersection(j, Line(E, G)), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, G)), G, line_intersection(j, Line(E, G)), B we get 180 == 2 * direction(line_intersection(j, Line(E, G)), G) - 2 * direction(line_intersection(j, Line(E, G)), B) mod 360
By collinear_definition on midpoint(C, D), C, midpoint(E, F) we get C in Line(midpoint(C, D), midpoint(E, F)), midpoint(E, F) in Line(C, midpoint(C, D)), Line(C, midpoint(C, D)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(C, midpoint(C, D), midpoint(E, F)) mod 360
By external_angle_bisector_definition_v0_r on F, D, F, midpoint(E, F) we get Line(D, midpoint(E, F)) == external_angle_bisector(F, midpoint(E, F), F)
By sss_anti_congruence_v0 on K, H, J, K, J, H we get anti_congruent_triangles(H, J, K, J, H, K)
By isosceles_triangle_midpoint on center(Circle(A, D, F)), G, F we get midpoint(F, G) in median(center(Circle(A, D, F)), F, G)
By external_angle_bisector_definition_v0_r on C, E, C, midpoint(E, F) we get Line(E, midpoint(E, F)) == external_angle_bisector(C, midpoint(E, F), C)
By external_angle_bisector_definition_v0_r on E, C, E, midpoint(E, F) we get Line(C, midpoint(E, F)) == external_angle_bisector(E, midpoint(E, F), E)
By internal_angle_bisector_definition_v0_r on center(Circle(A, D, F)), A, center(Circle(A, D, F)), D we get Line(A, D) == internal_angle_bisector(center(Circle(A, D, F)), D, center(Circle(A, D, F)))
By sss_anti_congruence_v1 on H, K, J, J, K, H we get anti_congruent_triangles(H, J, K, J, H, K)
By internal_angle_bisector_definition_v0_r on C, D, C, midpoint(E, F) we get Line(D, midpoint(E, F)) == internal_angle_bisector(C, midpoint(E, F), C)
By sss_anti_congruence_v1 on J, K, C, C, K, J we get anti_congruent_triangles(C, J, K, J, C, K)
By sss_anti_congruence_v1 on C, J, K, J, C, K we get anti_congruent_triangles(C, J, K, J, C, K)
By collinear_definition on D, B, line_intersection(j, Line(E, G)) we get B in Line(D, line_intersection(j, Line(E, G))), line_intersection(j, Line(E, G)) in Line(B, D), Line(B, D) == Line(D, line_intersection(j, Line(E, G))), 0 == 2 * angle(B, D, line_intersection(j, Line(E, G))) mod 360
By external_angle_bisector_definition_v0_r on F, A, H, D we get Line(A, D) == external_angle_bisector(F, D, H)
By external_angle_bisector_definition_v0_r on D, E, D, midpoint(E, F) we get Line(E, midpoint(E, F)) == external_angle_bisector(D, midpoint(E, F), D)
By internal_angle_bisector_definition_v0_r on C, midpoint(E, F), C, D we get internal_angle_bisector(C, D, C) == Line(D, midpoint(E, F))
By sss_anti_congruence_v1 on K, C, J, K, J, C we get anti_congruent_triangles(C, J, K, J, C, K)
By internal_angle_bisector_definition_v0 on G, line_intersection(f, Line(I, K)), G, A we get angle(G, A, line_intersection(f, Line(I, K))) == angle(line_intersection(f, Line(I, K)), A, G) mod 360
By internal_angle_bisector_definition_v0_r on center(Circle(B, D, E)), B, center(Circle(B, D, E)), D we get Line(B, D) == internal_angle_bisector(center(Circle(B, D, E)), D, center(Circle(B, D, E)))
By external_angle_bisector_definition_v0_r on C, F, C, midpoint(E, F) we get Line(F, midpoint(E, F)) == external_angle_bisector(C, midpoint(E, F), C)
By collinear_definition on E, line_intersection(j, Line(E, G)), G we get line_intersection(j, Line(E, G)) in Line(E, G), G in Line(E, line_intersection(j, Line(E, G))), Line(E, G) == Line(E, line_intersection(j, Line(E, G))), 0 == 2 * angle(line_intersection(j, Line(E, G)), E, G) mod 360
By sas_anti_congruence on J, K, H, H, K, J we get anti_congruent_triangles(H, J, K, J, H, K)
By internal_angle_bisector_definition_v0_r on C, midpoint(C, D), C, D we get internal_angle_bisector(C, D, C) == Line(D, midpoint(C, D))
By sss_anti_congruence_v0 on C, K, J, J, K, C we get anti_congruent_triangles(C, J, K, J, C, K)
By collinear_definition on A, line_intersection(i, Line(F, G)), D we get line_intersection(i, Line(F, G)) in Line(A, D), D in Line(A, line_intersection(i, Line(F, G))), Line(A, D) == Line(A, line_intersection(i, Line(F, G))), 0 == 2 * angle(line_intersection(i, Line(F, G)), A, D) mod 360
By reverse_direction on K, J we get 180 == direction(K, J) - direction(J, K) mod 360
By sss_anti_congruence_v1 on J, H, K, H, J, K we get anti_congruent_triangles(H, J, K, J, H, K)
By sss_anti_congruence_v0 on J, C, K, C, J, K we get anti_congruent_triangles(C, J, K, J, C, K)
By sss_anti_congruence_v0 on H, J, K, J, H, K we get anti_congruent_triangles(H, J, K, J, H, K)
By external_angle_bisector_definition_v0_r on H, B, E, D we get Line(B, D) == external_angle_bisector(E, D, H)
By external_angle_bisector_definition_v0_r on E, D, E, midpoint(E, F) we get Line(D, midpoint(E, F)) == external_angle_bisector(E, midpoint(E, F), E)
By internal_angle_bisector_definition_v0_r on E, C, F, midpoint(E, F) we get Line(C, midpoint(E, F)) == internal_angle_bisector(E, midpoint(E, F), F)
By external_angle_bisector_definition_v0_r on F, C, F, midpoint(E, F) we get Line(C, midpoint(E, F)) == external_angle_bisector(F, midpoint(E, F), F)
By external_angle_bisector_definition_v0 on D, line_intersection(f, Line(I, K)), D, G we get 180 == angle(D, G, line_intersection(f, Line(I, K))) + angle(D, G, line_intersection(f, Line(I, K))) mod 360
By internal_angle_bisector_definition_v0 on F, line_intersection(i, Line(F, G)), G, A we get angle(F, A, line_intersection(i, Line(F, G))) == angle(line_intersection(i, Line(F, G)), A, G) mod 360
By collinear_definition on G, F, midpoint(F, G) we get F in Line(G, midpoint(F, G)), midpoint(F, G) in Line(F, G), Line(F, G) == Line(G, midpoint(F, G)), 0 == 2 * angle(F, G, midpoint(F, G)) mod 360
By internal_angle_bisector_definition_v0 on G, line_intersection(j, Line(E, G)), C, B we get angle(G, B, line_intersection(j, Line(E, G))) == angle(line_intersection(j, Line(E, G)), B, C) mod 360
By sss_anti_congruence_v1 on C, J, K, J, C, K we get anti_congruent_triangles(C, J, K, J, C, K)
By collinear_definition on G, line_intersection(f, Line(I, K)), A we get line_intersection(f, Line(I, K)) in Line(A, G), A in Line(G, line_intersection(f, Line(I, K))), Line(A, G) == Line(G, line_intersection(f, Line(I, K))), 0 == 2 * angle(line_intersection(f, Line(I, K)), G, A) mod 360
By sss_anti_congruence_v1 on K, C, J, K, J, C we get anti_congruent_triangles(C, J, K, J, C, K)
By external_angle_bisector_definition_v0_r on D, F, D, midpoint(E, F) we get Line(F, midpoint(E, F)) == external_angle_bisector(D, midpoint(E, F), D)
By internal_angle_bisector_definition_v0_r on D, midpoint(E, F), D, C we get internal_angle_bisector(D, C, D) == Line(C, midpoint(E, F))
By perpendicular_angle_conditions_v0 on H, G, line_intersection(f, Line(I, K)) we get angle(H, G, line_intersection(f, Line(I, K))) == orientation(G, line_intersection(f, Line(I, K)), H) mod 360
By isosceles_triangle_midpoint on center(Circle(B, D, E)), G, E we get midpoint(E, G) in median(center(Circle(B, D, E)), E, G)
By collinear_definition on G, midpoint(F, G), F we get midpoint(F, G) in Line(F, G), F in Line(G, midpoint(F, G)), Line(F, G) == Line(G, midpoint(F, G)), 0 == 2 * angle(midpoint(F, G), G, F) mod 360
By internal_angle_bisector_definition_v0 on C, line_intersection(j, Line(E, G)), A, B we get angle(C, B, line_intersection(j, Line(E, G))) == angle(line_intersection(j, Line(E, G)), B, A) mod 360
By power_of_a_point_on_circle on line_circle_tangent_point(g, c), c we get 0 == power_of_a_point(line_circle_tangent_point(g, c), c)
By radical_axis_definition_v0_r on C, Circle(C, D, E), Circle(C, H, J) we get C in radical_axis(Circle(C, D, E), Circle(C, H, J))
By sss_anti_congruence_v1 on J, K, C, C, K, J we get anti_congruent_triangles(C, J, K, J, C, K)
By perpendicular_angle_conditions_v0 on line_intersection(i, Line(F, G)), F, H we get angle(line_intersection(i, Line(F, G)), F, H) == orientation(F, H, line_intersection(i, Line(F, G))) mod 360
By sss_anti_congruence_v1 on K, C, J, K, J, C we get anti_congruent_triangles(C, J, K, J, C, K)
By sss_anti_congruence_v0 on C, K, J, J, K, C we get anti_congruent_triangles(C, J, K, J, C, K)
By internal_angle_bisector_definition_v0 on E, midpoint(E, F), F, midpoint(C, D) we get angle(E, midpoint(C, D), midpoint(E, F)) == angle(midpoint(E, F), midpoint(C, D), F) mod 360
By internal_angle_bisector_definition_v0_r on G, D, G, H we get Line(D, H) == internal_angle_bisector(G, H, G)
By sss_anti_congruence_v0 on H, J, K, J, H, K we get anti_congruent_triangles(H, J, K, J, H, K)
By sss_anti_congruence_v1 on J, K, C, C, K, J we get anti_congruent_triangles(C, J, K, J, C, K)
By external_angle_bisector_definition_v0 on H, line_intersection(j, Line(E, G)), H, E we get 180 == angle(H, E, line_intersection(j, Line(E, G))) + angle(H, E, line_intersection(j, Line(E, G))) mod 360
By sss_anti_congruence_v1 on H, K, J, J, K, H we get anti_congruent_triangles(H, J, K, J, H, K)
By external_angle_bisector_definition_v0 on D, line_intersection(f, Line(I, K)), H, G we get 180 == angle(D, G, line_intersection(f, Line(I, K))) + angle(H, G, line_intersection(f, Line(I, K))) mod 360
By internal_angle_bisector_definition_v0_r on D, G, D, H we get Line(G, H) == internal_angle_bisector(D, H, D)
By altitude_definition on center(Circle(A, D, F)), F, G, i we get i == altitude(center(Circle(A, D, F)), F, G)
By sas_anti_congruence on C, K, J, J, K, C we get anti_congruent_triangles(C, J, K, J, C, K)
By collinear_definition on midpoint(E, F), D, midpoint(C, D) we get D in Line(midpoint(C, D), midpoint(E, F)), midpoint(C, D) in Line(D, midpoint(E, F)), Line(D, midpoint(E, F)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(D, midpoint(E, F), midpoint(C, D)) mod 360
By sss_anti_congruence_v1 on K, C, J, K, J, C we get anti_congruent_triangles(C, J, K, J, C, K)
By perpendicular_angle_conditions_v0 on midpoint(C, D), midpoint(E, F), F we get angle(midpoint(C, D), midpoint(E, F), F) == orientation(F, midpoint(C, D), midpoint(E, F)) mod 360
By sss_anti_congruence_v1 on K, J, H, K, H, J we get anti_congruent_triangles(H, J, K, J, H, K)
By internal_angle_bisector_definition_v0_r on center(Circle(B, D, E)), D, center(Circle(B, D, E)), B we get Line(B, D) == internal_angle_bisector(center(Circle(B, D, E)), B, center(Circle(B, D, E)))
By internal_angle_bisector_definition_v0 on C, line_intersection(i, Line(F, G)), G, A we get angle(C, A, line_intersection(i, Line(F, G))) == angle(line_intersection(i, Line(F, G)), A, G) mod 360
By sss_anti_congruence_v0 on J, K, H, H, K, J we get anti_congruent_triangles(H, J, K, J, H, K)
By collinear_definition on E, G, midpoint(E, G) we get G in Line(E, midpoint(E, G)), midpoint(E, G) in Line(E, G), Line(E, G) == Line(E, midpoint(E, G)), 0 == 2 * angle(G, E, midpoint(E, G)) mod 360
By power_of_a_point_on_circle on line_circle_tangent_point(f, c), c we get 0 == power_of_a_point(line_circle_tangent_point(f, c), c)
By collinear_definition on E, midpoint(E, G), G we get midpoint(E, G) in Line(E, G), G in Line(E, midpoint(E, G)), Line(E, G) == Line(E, midpoint(E, G)), 0 == 2 * angle(midpoint(E, G), E, G) mod 360
By sss_anti_congruence_v1 on K, J, H, K, H, J we get anti_congruent_triangles(H, J, K, J, H, K)
By collinear_definition on F, G, midpoint(F, G) we get G in Line(F, midpoint(F, G)), midpoint(F, G) in Line(F, G), Line(F, G) == Line(F, midpoint(F, G)), 0 == 2 * angle(G, F, midpoint(F, G)) mod 360
By external_angle_bisector_definition_v0 on H, line_intersection(f, Line(I, K)), H, G we get 180 == angle(H, G, line_intersection(f, Line(I, K))) + angle(H, G, line_intersection(f, Line(I, K))) mod 360
By perpendicular_angle_conditions_v0 on E, midpoint(E, F), midpoint(C, D) we get angle(E, midpoint(E, F), midpoint(C, D)) == orientation(E, midpoint(E, F), midpoint(C, D)) mod 360
By isosceles_triangle_properties on K, J, C we get distance(C, K) == distance(J, K), angle(J, C, K) == angle(K, J, C) mod 360
By sss_anti_congruence_v0 on K, H, J, K, J, H we get anti_congruent_triangles(H, J, K, J, H, K)
By collinear_definition on midpoint(E, F), C, midpoint(C, D) we get C in Line(midpoint(C, D), midpoint(E, F)), midpoint(C, D) in Line(C, midpoint(E, F)), Line(C, midpoint(E, F)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(C, midpoint(E, F), midpoint(C, D)) mod 360
By internal_angle_bisector_definition_v0 on G, line_intersection(i, Line(F, G)), C, A we get angle(G, A, line_intersection(i, Line(F, G))) == angle(line_intersection(i, Line(F, G)), A, C) mod 360
By internal_angle_bisector_definition_v0 on G, line_intersection(i, Line(F, G)), F, D we get angle(G, D, line_intersection(i, Line(F, G))) == angle(line_intersection(i, Line(F, G)), D, F) mod 360
By collinear_definition on midpoint(E, F), midpoint(C, D), D we get midpoint(C, D) in Line(D, midpoint(E, F)), D in Line(midpoint(C, D), midpoint(E, F)), Line(D, midpoint(E, F)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(midpoint(C, D), midpoint(E, F), D) mod 360
By sss_anti_congruence_v0 on K, J, C, K, C, J we get anti_congruent_triangles(C, J, K, J, C, K)
By collinear_definition on F, line_intersection(i, Line(F, G)), G we get line_intersection(i, Line(F, G)) in Line(F, G), G in Line(F, line_intersection(i, Line(F, G))), Line(F, G) == Line(F, line_intersection(i, Line(F, G))), 0 == 2 * angle(line_intersection(i, Line(F, G)), F, G) mod 360
By isosceles_triangle_properties on K, J, H we get distance(H, K) == distance(J, K), angle(J, H, K) == angle(K, J, H) mod 360
By collinear_definition on I, K, line_intersection(f, Line(I, K)) we get K in Line(I, line_intersection(f, Line(I, K))), line_intersection(f, Line(I, K)) in Line(I, K), Line(I, K) == Line(I, line_intersection(f, Line(I, K))), 0 == 2 * angle(K, I, line_intersection(f, Line(I, K))) mod 360
By collinear_definition on A, G, line_intersection(f, Line(I, K)) we get G in Line(A, line_intersection(f, Line(I, K))), line_intersection(f, Line(I, K)) in Line(A, G), Line(A, G) == Line(A, line_intersection(f, Line(I, K))), 0 == 2 * angle(G, A, line_intersection(f, Line(I, K))) mod 360
By sss_anti_congruence_v1 on H, K, J, J, K, H we get anti_congruent_triangles(H, J, K, J, H, K)
By sss_anti_congruence_v1 on K, J, H, K, H, J we get anti_congruent_triangles(H, J, K, J, H, K)
By isosceles_triangle_midpoint on D, F, G we get midpoint(F, G) in median(D, F, G)
By internal_angle_bisector_definition_v0 on G, line_intersection(i, Line(F, G)), F, A we get angle(G, A, line_intersection(i, Line(F, G))) == angle(line_intersection(i, Line(F, G)), A, F) mod 360
By sss_anti_congruence_v1 on J, K, C, C, K, J we get anti_congruent_triangles(C, J, K, J, C, K)
By sss_anti_congruence_v0 on K, H, J, K, J, H we get anti_congruent_triangles(H, J, K, J, H, K)
By collinear_definition on F, G, line_intersection(i, Line(F, G)) we get G in Line(F, line_intersection(i, Line(F, G))), line_intersection(i, Line(F, G)) in Line(F, G), Line(F, G) == Line(F, line_intersection(i, Line(F, G))), 0 == 2 * angle(G, F, line_intersection(i, Line(F, G))) mod 360
By collinear_definition on D, line_intersection(j, Line(E, G)), B we get line_intersection(j, Line(E, G)) in Line(B, D), B in Line(D, line_intersection(j, Line(E, G))), Line(B, D) == Line(D, line_intersection(j, Line(E, G))), 0 == 2 * angle(line_intersection(j, Line(E, G)), D, B) mod 360
By sss_anti_congruence_v1 on C, J, K, J, C, K we get anti_congruent_triangles(C, J, K, J, C, K)
By sss_anti_congruence_v0 on J, K, H, H, K, J we get anti_congruent_triangles(H, J, K, J, H, K)
By sss_anti_congruence_v0 on J, C, K, C, J, K we get anti_congruent_triangles(C, J, K, J, C, K)
By internal_angle_bisector_definition_v0 on C, line_intersection(j, Line(E, G)), G, B we get angle(C, B, line_intersection(j, Line(E, G))) == angle(line_intersection(j, Line(E, G)), B, G) mod 360
By collinear_definition on midpoint(C, D), midpoint(E, F), D we get midpoint(E, F) in Line(D, midpoint(C, D)), D in Line(midpoint(C, D), midpoint(E, F)), Line(D, midpoint(C, D)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), midpoint(C, D), D) mod 360
By right_triangle_circumcenter_v1 on D, F, C we get midpoint(C, D) == circumcenter(C, D, F)
By collinear_definition on G, line_intersection(f, Line(I, K)), B we get line_intersection(f, Line(I, K)) in Line(B, G), B in Line(G, line_intersection(f, Line(I, K))), Line(B, G) == Line(G, line_intersection(f, Line(I, K))), 0 == 2 * angle(line_intersection(f, Line(I, K)), G, B) mod 360
By sss_anti_congruence_v0 on J, K, H, H, K, J we get anti_congruent_triangles(H, J, K, J, H, K)
By internal_angle_bisector_definition_v0 on F, line_intersection(i, Line(F, G)), B, A we get angle(F, A, line_intersection(i, Line(F, G))) == angle(line_intersection(i, Line(F, G)), A, B) mod 360
By sss_anti_congruence_v0 on C, K, J, J, K, C we get anti_congruent_triangles(C, J, K, J, C, K)
By collinear_definition on D, A, line_intersection(i, Line(F, G)) we get A in Line(D, line_intersection(i, Line(F, G))), line_intersection(i, Line(F, G)) in Line(A, D), Line(A, D) == Line(D, line_intersection(i, Line(F, G))), 0 == 2 * angle(A, D, line_intersection(i, Line(F, G))) mod 360
By perpendicular_angle_conditions_v0 on line_intersection(f, Line(I, K)), G, D we get angle(line_intersection(f, Line(I, K)), G, D) == orientation(D, line_intersection(f, Line(I, K)), G) mod 360
By collinear_definition on B, line_intersection(f, Line(I, K)), G we get line_intersection(f, Line(I, K)) in Line(B, G), G in Line(B, line_intersection(f, Line(I, K))), Line(B, G) == Line(B, line_intersection(f, Line(I, K))), 0 == 2 * angle(line_intersection(f, Line(I, K)), B, G) mod 360
By perpendicular_angle_conditions_v0 on H, E, line_intersection(j, Line(E, G)) we get angle(H, E, line_intersection(j, Line(E, G))) == orientation(E, line_intersection(j, Line(E, G)), H) mod 360
By sss_anti_congruence_v0 on K, J, C, K, C, J we get anti_congruent_triangles(C, J, K, J, C, K)
By internal_angle_bisector_definition_v0_r on D, center(Circle(B, D, E)), D, B we get internal_angle_bisector(D, B, D) == Line(B, center(Circle(B, D, E)))
By internal_angle_bisector_definition_v0_r on H, D, H, G we get Line(D, G) == internal_angle_bisector(H, G, H)
By internal_angle_bisector_definition_v0 on C, line_intersection(i, Line(F, G)), B, A we get angle(C, A, line_intersection(i, Line(F, G))) == angle(line_intersection(i, Line(F, G)), A, B) mod 360
By internal_angle_bisector_definition_v0_r on B, center(Circle(B, D, E)), B, D we get internal_angle_bisector(B, D, B) == Line(D, center(Circle(B, D, E)))
By altitude_definition on center(Circle(B, D, E)), E, G, j we get j == altitude(center(Circle(B, D, E)), E, G)
By log_of_2_times_distance on G, F, midpoint(F, G), G we get log(distance(F, G)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(G, midpoint(F, G)))
By collinear_definition on midpoint(C, D), D, midpoint(E, F) we get D in Line(midpoint(C, D), midpoint(E, F)), midpoint(E, F) in Line(D, midpoint(C, D)), Line(D, midpoint(C, D)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(D, midpoint(C, D), midpoint(E, F)) mod 360
By collinear_definition on G, midpoint(E, G), E we get midpoint(E, G) in Line(E, G), E in Line(G, midpoint(E, G)), Line(E, G) == Line(G, midpoint(E, G)), 0 == 2 * angle(midpoint(E, G), G, E) mod 360
By log_of_2_times_distance on G, E, midpoint(E, G), G we get log(distance(E, G)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(G, midpoint(E, G)))
By sss_anti_congruence_v1 on J, H, K, H, J, K we get anti_congruent_triangles(H, J, K, J, H, K)
By sss_anti_congruence_v1 on K, C, J, K, J, C we get anti_congruent_triangles(C, J, K, J, C, K)
By sss_anti_congruence_v0 on H, J, K, J, H, K we get anti_congruent_triangles(H, J, K, J, H, K)
By internal_angle_bisector_definition_v0 on E, line_intersection(j, Line(E, G)), G, B we get angle(E, B, line_intersection(j, Line(E, G))) == angle(line_intersection(j, Line(E, G)), B, G) mod 360
By internal_angle_bisector_definition_v0_r on D, C, D, midpoint(E, F) we get Line(C, midpoint(E, F)) == internal_angle_bisector(D, midpoint(E, F), D)
By sss_anti_congruence_v0 on J, K, H, H, K, J we get anti_congruent_triangles(H, J, K, J, H, K)
By internal_angle_bisector_definition_v0 on C, midpoint(E, F), C, midpoint(C, D) we get angle(C, midpoint(C, D), midpoint(E, F)) == angle(midpoint(E, F), midpoint(C, D), C) mod 360
By sss_anti_congruence_v1 on H, K, J, J, K, H we get anti_congruent_triangles(H, J, K, J, H, K)
By sas_anti_congruence on J, K, C, C, K, J we get anti_congruent_triangles(C, J, K, J, C, K)
By sss_anti_congruence_v0 on K, H, J, K, J, H we get anti_congruent_triangles(H, J, K, J, H, K)
By collinear_definition on A, line_intersection(f, Line(I, K)), B we get line_intersection(f, Line(I, K)) in Line(A, B), B in Line(A, line_intersection(f, Line(I, K))), Line(A, B) == Line(A, line_intersection(f, Line(I, K))), 0 == 2 * angle(line_intersection(f, Line(I, K)), A, B) mod 360
By log_of_2_times_distance on C, H, J, K we get log(distance(C, H)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(J, K))
By internal_angle_bisector_definition_v0 on A, line_intersection(j, Line(E, G)), C, B we get angle(A, B, line_intersection(j, Line(E, G))) == angle(line_intersection(j, Line(E, G)), B, C) mod 360
By sss_anti_congruence_v1 on C, J, K, J, C, K we get anti_congruent_triangles(C, J, K, J, C, K)
By internal_angle_bisector_definition_v0 on F, midpoint(E, F), E, midpoint(C, D) we get angle(F, midpoint(C, D), midpoint(E, F)) == angle(midpoint(E, F), midpoint(C, D), E) mod 360
By sss_anti_congruence_v1 on J, K, C, C, K, J we get anti_congruent_triangles(C, J, K, J, C, K)
By collinear_definition on K, I, line_intersection(f, Line(I, K)) we get I in Line(K, line_intersection(f, Line(I, K))), line_intersection(f, Line(I, K)) in Line(I, K), Line(I, K) == Line(K, line_intersection(f, Line(I, K))), 0 == 2 * angle(I, K, line_intersection(f, Line(I, K))) mod 360
By collinear_definition on A, line_intersection(f, Line(I, K)), G we get line_intersection(f, Line(I, K)) in Line(A, G), G in Line(A, line_intersection(f, Line(I, K))), Line(A, G) == Line(A, line_intersection(f, Line(I, K))), 0 == 2 * angle(line_intersection(f, Line(I, K)), A, G) mod 360
By collinear_definition on D, line_intersection(i, Line(F, G)), A we get line_intersection(i, Line(F, G)) in Line(A, D), A in Line(D, line_intersection(i, Line(F, G))), Line(A, D) == Line(D, line_intersection(i, Line(F, G))), 0 == 2 * angle(line_intersection(i, Line(F, G)), D, A) mod 360
By collinear_definition on G, line_intersection(j, Line(E, G)), E we get line_intersection(j, Line(E, G)) in Line(E, G), E in Line(G, line_intersection(j, Line(E, G))), Line(E, G) == Line(G, line_intersection(j, Line(E, G))), 0 == 2 * angle(line_intersection(j, Line(E, G)), G, E) mod 360
By perpendicular_angle_conditions_v0 on F, midpoint(E, F), midpoint(C, D) we get angle(F, midpoint(E, F), midpoint(C, D)) == orientation(F, midpoint(E, F), midpoint(C, D)) mod 360
By power_of_a_point_on_circle on line_circle_tangent_point(h, c), c we get 0 == power_of_a_point(line_circle_tangent_point(h, c), c)
By internal_angle_bisector_definition_v0_r on D, midpoint(C, D), D, C we get internal_angle_bisector(D, C, D) == Line(C, midpoint(C, D))
By sss_anti_congruence_v1 on C, J, K, J, C, K we get anti_congruent_triangles(C, J, K, J, C, K)
By collinear_definition on midpoint(E, F), midpoint(C, D), C we get midpoint(C, D) in Line(C, midpoint(E, F)), C in Line(midpoint(C, D), midpoint(E, F)), Line(C, midpoint(E, F)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(midpoint(C, D), midpoint(E, F), C) mod 360
By sss_anti_congruence_v0 on C, K, J, J, K, C we get anti_congruent_triangles(C, J, K, J, C, K)
By perpendicular_angle_conditions_v0 on line_intersection(j, Line(E, G)), E, H we get angle(line_intersection(j, Line(E, G)), E, H) == orientation(E, H, line_intersection(j, Line(E, G))) mod 360
By internal_angle_bisector_definition_v0 on F, line_intersection(i, Line(F, G)), G, D we get angle(F, D, line_intersection(i, Line(F, G))) == angle(line_intersection(i, Line(F, G)), D, G) mod 360
By internal_angle_bisector_definition_v0_r on D, H, D, G we get Line(G, H) == internal_angle_bisector(D, G, D)
By external_angle_bisector_definition_v0 on H, line_intersection(i, Line(F, G)), H, F we get 180 == angle(H, F, line_intersection(i, Line(F, G))) + angle(H, F, line_intersection(i, Line(F, G))) mod 360
By sss_anti_congruence_v0 on C, K, J, J, K, C we get anti_congruent_triangles(C, J, K, J, C, K)
By sss_anti_congruence_v1 on K, J, H, K, H, J we get anti_congruent_triangles(H, J, K, J, H, K)
By sss_anti_congruence_v0 on J, K, H, H, K, J we get anti_congruent_triangles(H, J, K, J, H, K)
By log_of_2_times_distance on G, E, midpoint(E, G), E we get log(distance(E, G)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(E, midpoint(E, G)))
By internal_angle_bisector_definition_v0_r on midpoint(E, F), C, midpoint(E, F), D we get Line(C, D) == internal_angle_bisector(midpoint(E, F), D, midpoint(E, F))
By right_triangle_circumcenter_v1 on D, E, C we get midpoint(C, D) == circumcenter(C, D, E)
By internal_angle_bisector_definition_v0 on E, line_intersection(j, Line(E, G)), A, B we get angle(E, B, line_intersection(j, Line(E, G))) == angle(line_intersection(j, Line(E, G)), B, A) mod 360
By sss_anti_congruence_v0 on K, J, C, K, C, J we get anti_congruent_triangles(C, J, K, J, C, K)
By perpendicular_angle_conditions_v0 on D, G, line_intersection(f, Line(I, K)) we get angle(D, G, line_intersection(f, Line(I, K))) == orientation(D, G, line_intersection(f, Line(I, K))) mod 360
By collinear_definition on G, F, line_intersection(i, Line(F, G)) we get F in Line(G, line_intersection(i, Line(F, G))), line_intersection(i, Line(F, G)) in Line(F, G), Line(F, G) == Line(G, line_intersection(i, Line(F, G))), 0 == 2 * angle(F, G, line_intersection(i, Line(F, G))) mod 360
By perpendicular_angle_conditions_v0 on H, F, line_intersection(i, Line(F, G)) we get angle(H, F, line_intersection(i, Line(F, G))) == orientation(F, line_intersection(i, Line(F, G)), H) mod 360
By sss_anti_congruence_v0 on H, J, K, J, H, K we get anti_congruent_triangles(H, J, K, J, H, K)
By isosceles_triangle_midpoint on D, E, G we get midpoint(E, G) in median(D, E, G)
By perpendicular_bisector_properties on G, E we get perpendicular(Line(E, G), perpendicular_bisector(E, G)), midpoint(E, G) == line_intersection(Line(E, G), perpendicular_bisector(E, G))
By sss_anti_congruence_v0 on K, H, J, K, J, H we get anti_congruent_triangles(H, J, K, J, H, K)
By collinear_definition on B, G, line_intersection(f, Line(I, K)) we get G in Line(B, line_intersection(f, Line(I, K))), line_intersection(f, Line(I, K)) in Line(B, G), Line(B, G) == Line(B, line_intersection(f, Line(I, K))), 0 == 2 * angle(G, B, line_intersection(f, Line(I, K))) mod 360
By sss_anti_congruence_v1 on J, H, K, H, J, K we get anti_congruent_triangles(H, J, K, J, H, K)
By sss_anti_congruence_v0 on K, H, J, K, J, H we get anti_congruent_triangles(H, J, K, J, H, K)
By perpendicular_angle_conditions_v0 on midpoint(C, D), midpoint(E, F), E we get angle(midpoint(C, D), midpoint(E, F), E) == orientation(E, midpoint(C, D), midpoint(E, F)) mod 360
By sss_anti_congruence_v0 on K, J, C, K, C, J we get anti_congruent_triangles(C, J, K, J, C, K)
By collinear_definition on F, midpoint(F, G), G we get midpoint(F, G) in Line(F, G), G in Line(F, midpoint(F, G)), Line(F, G) == Line(F, midpoint(F, G)), 0 == 2 * angle(midpoint(F, G), F, G) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(C, D), D, midpoint(C, D), C we get Line(C, D) == internal_angle_bisector(midpoint(C, D), C, midpoint(C, D))
By sss_anti_congruence_v0 on H, J, K, J, H, K we get anti_congruent_triangles(H, J, K, J, H, K)
By sss_anti_congruence_v0 on C, K, J, J, K, C we get anti_congruent_triangles(C, J, K, J, C, K)
By collinear_definition on B, D, line_intersection(j, Line(E, G)) we get D in Line(B, line_intersection(j, Line(E, G))), line_intersection(j, Line(E, G)) in Line(B, D), Line(B, D) == Line(B, line_intersection(j, Line(E, G))), 0 == 2 * angle(D, B, line_intersection(j, Line(E, G))) mod 360
By internal_angle_bisector_definition_v0 on G, line_intersection(f, Line(I, K)), G, B we get angle(G, B, line_intersection(f, Line(I, K))) == angle(line_intersection(f, Line(I, K)), B, G) mod 360
By sss_anti_congruence_v0 on J, K, H, H, K, J we get anti_congruent_triangles(H, J, K, J, H, K)
By sss_anti_congruence_v1 on H, K, J, J, K, H we get anti_congruent_triangles(H, J, K, J, H, K)
By collinear_definition on G, A, line_intersection(f, Line(I, K)) we get A in Line(G, line_intersection(f, Line(I, K))), line_intersection(f, Line(I, K)) in Line(A, G), Line(A, G) == Line(G, line_intersection(f, Line(I, K))), 0 == 2 * angle(A, G, line_intersection(f, Line(I, K))) mod 360
By isosceles_triangle_properties on K, C, J we get distance(C, K) == distance(J, K), angle(C, J, K) == angle(K, C, J) mod 360
By internal_angle_bisector_definition_v0 on B, line_intersection(f, Line(I, K)), B, A we get angle(B, A, line_intersection(f, Line(I, K))) == angle(line_intersection(f, Line(I, K)), A, B) mod 360
By collinear_definition on K, line_intersection(f, Line(I, K)), I we get line_intersection(f, Line(I, K)) in Line(I, K), I in Line(K, line_intersection(f, Line(I, K))), Line(I, K) == Line(K, line_intersection(f, Line(I, K))), 0 == 2 * angle(line_intersection(f, Line(I, K)), K, I) mod 360
By sas_anti_congruence on H, K, J, J, K, H we get anti_congruent_triangles(H, J, K, J, H, K)
By sss_anti_congruence_v1 on J, K, C, C, K, J we get anti_congruent_triangles(C, J, K, J, C, K)
By internal_angle_bisector_definition_v0 on G, line_intersection(j, Line(E, G)), E, B we get angle(G, B, line_intersection(j, Line(E, G))) == angle(line_intersection(j, Line(E, G)), B, E) mod 360
By internal_angle_bisector_definition_v0 on B, line_intersection(i, Line(F, G)), F, A we get angle(B, A, line_intersection(i, Line(F, G))) == angle(line_intersection(i, Line(F, G)), A, F) mod 360
By perpendicular_angle_conditions_v0 on line_intersection(f, Line(I, K)), G, H we get angle(line_intersection(f, Line(I, K)), G, H) == orientation(G, H, line_intersection(f, Line(I, K))) mod 360
By sss_anti_congruence_v0 on J, C, K, C, J, K we get anti_congruent_triangles(C, J, K, J, C, K)
By internal_angle_bisector_definition_v0_r on midpoint(E, F), D, midpoint(E, F), C we get Line(C, D) == internal_angle_bisector(midpoint(E, F), C, midpoint(E, F))
By sss_anti_congruence_v1 on J, H, K, H, J, K we get anti_congruent_triangles(H, J, K, J, H, K)
By internal_angle_bisector_definition_v0_r on D, center(Circle(A, D, F)), D, A we get internal_angle_bisector(D, A, D) == Line(A, center(Circle(A, D, F)))
By internal_angle_bisector_definition_v0 on A, line_intersection(j, Line(E, G)), E, B we get angle(A, B, line_intersection(j, Line(E, G))) == angle(line_intersection(j, Line(E, G)), B, E) mod 360
By collinear_definition on G, B, line_intersection(f, Line(I, K)) we get B in Line(G, line_intersection(f, Line(I, K))), line_intersection(f, Line(I, K)) in Line(B, G), Line(B, G) == Line(G, line_intersection(f, Line(I, K))), 0 == 2 * angle(B, G, line_intersection(f, Line(I, K))) mod 360
By sss_anti_congruence_v1 on J, H, K, H, J, K we get anti_congruent_triangles(H, J, K, J, H, K)
By collinear_definition on B, line_intersection(j, Line(E, G)), D we get line_intersection(j, Line(E, G)) in Line(B, D), D in Line(B, line_intersection(j, Line(E, G))), Line(B, D) == Line(B, line_intersection(j, Line(E, G))), 0 == 2 * angle(line_intersection(j, Line(E, G)), B, D) mod 360
By sss_anti_congruence_v1 on K, C, J, K, J, C we get anti_congruent_triangles(C, J, K, J, C, K)
By internal_angle_bisector_definition_v0 on A, line_intersection(f, Line(I, K)), A, G we get angle(A, G, line_intersection(f, Line(I, K))) == angle(line_intersection(f, Line(I, K)), G, A) mod 360
By isosceles_triangle_properties on K, H, J we get distance(H, K) == distance(J, K), angle(H, J, K) == angle(K, H, J) mod 360
By internal_angle_bisector_definition_v0_r on F, D, E, midpoint(E, F) we get Line(D, midpoint(E, F)) == internal_angle_bisector(E, midpoint(E, F), F)
By collinear_definition on G, E, midpoint(E, G) we get E in Line(G, midpoint(E, G)), midpoint(E, G) in Line(E, G), Line(E, G) == Line(G, midpoint(E, G)), 0 == 2 * angle(E, G, midpoint(E, G)) mod 360
By sss_anti_congruence_v1 on J, H, K, H, J, K we get anti_congruent_triangles(H, J, K, J, H, K)
By collinear_definition on A, D, line_intersection(i, Line(F, G)) we get D in Line(A, line_intersection(i, Line(F, G))), line_intersection(i, Line(F, G)) in Line(A, D), Line(A, D) == Line(A, line_intersection(i, Line(F, G))), 0 == 2 * angle(D, A, line_intersection(i, Line(F, G))) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(C, D), C, midpoint(C, D), D we get Line(C, D) == internal_angle_bisector(midpoint(C, D), D, midpoint(C, D))
By collinear_definition on E, G, line_intersection(j, Line(E, G)) we get G in Line(E, line_intersection(j, Line(E, G))), line_intersection(j, Line(E, G)) in Line(E, G), Line(E, G) == Line(E, line_intersection(j, Line(E, G))), 0 == 2 * angle(G, E, line_intersection(j, Line(E, G))) mod 360
By log_of_2_times_distance on F, G, F, midpoint(F, G) we get log(distance(F, G)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(F, midpoint(F, G)))
By collinear_definition on G, E, line_intersection(j, Line(E, G)) we get E in Line(G, line_intersection(j, Line(E, G))), line_intersection(j, Line(E, G)) in Line(E, G), Line(E, G) == Line(G, line_intersection(j, Line(E, G))), 0 == 2 * angle(E, G, line_intersection(j, Line(E, G))) mod 360
By collinear_definition on A, B, line_intersection(f, Line(I, K)) we get B in Line(A, line_intersection(f, Line(I, K))), line_intersection(f, Line(I, K)) in Line(A, B), Line(A, B) == Line(A, line_intersection(f, Line(I, K))), 0 == 2 * angle(B, A, line_intersection(f, Line(I, K))) mod 360
By collinear_definition on I, line_intersection(f, Line(I, K)), K we get line_intersection(f, Line(I, K)) in Line(I, K), K in Line(I, line_intersection(f, Line(I, K))), Line(I, K) == Line(I, line_intersection(f, Line(I, K))), 0 == 2 * angle(line_intersection(f, Line(I, K)), I, K) mod 360
By sss_anti_congruence_v0 on J, C, K, C, J, K we get anti_congruent_triangles(C, J, K, J, C, K)
By collinear_definition on midpoint(C, D), midpoint(E, F), C we get midpoint(E, F) in Line(C, midpoint(C, D)), C in Line(midpoint(C, D), midpoint(E, F)), Line(C, midpoint(C, D)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), midpoint(C, D), C) mod 360
By internal_angle_bisector_definition_v0 on E, line_intersection(j, Line(E, G)), G, D we get angle(E, D, line_intersection(j, Line(E, G))) == angle(line_intersection(j, Line(E, G)), D, G) mod 360
By collinear_definition on G, line_intersection(i, Line(F, G)), F we get line_intersection(i, Line(F, G)) in Line(F, G), F in Line(G, line_intersection(i, Line(F, G))), Line(F, G) == Line(G, line_intersection(i, Line(F, G))), 0 == 2 * angle(line_intersection(i, Line(F, G)), G, F) mod 360
By collinear_definition on B, line_intersection(f, Line(I, K)), A we get line_intersection(f, Line(I, K)) in Line(A, B), A in Line(B, line_intersection(f, Line(I, K))), Line(A, B) == Line(B, line_intersection(f, Line(I, K))), 0 == 2 * angle(line_intersection(f, Line(I, K)), B, A) mod 360
By collinear_definition on B, A, line_intersection(f, Line(I, K)) we get A in Line(B, line_intersection(f, Line(I, K))), line_intersection(f, Line(I, K)) in Line(A, B), Line(A, B) == Line(B, line_intersection(f, Line(I, K))), 0 == 2 * angle(A, B, line_intersection(f, Line(I, K))) mod 360
By internal_angle_bisector_definition_v0 on B, line_intersection(i, Line(F, G)), C, A we get angle(B, A, line_intersection(i, Line(F, G))) == angle(line_intersection(i, Line(F, G)), A, C) mod 360
By sss_anti_congruence_v1 on K, J, H, K, H, J we get anti_congruent_triangles(H, J, K, J, H, K)
By sss_anti_congruence_v1 on C, J, K, J, C, K we get anti_congruent_triangles(C, J, K, J, C, K)
By internal_angle_bisector_definition_v0_r on A, center(Circle(A, D, F)), A, D we get internal_angle_bisector(A, D, A) == Line(D, center(Circle(A, D, F)))
By sss_anti_congruence_v0 on H, J, K, J, H, K we get anti_congruent_triangles(H, J, K, J, H, K)
By sss_anti_congruence_v0 on K, J, C, K, C, J we get anti_congruent_triangles(C, J, K, J, C, K)
By sss_anti_congruence_v0 on K, J, C, K, C, J we get anti_congruent_triangles(C, J, K, J, C, K)
By sss_anti_congruence_v0 on J, C, K, C, J, K we get anti_congruent_triangles(C, J, K, J, C, K)
By internal_angle_bisector_definition_v0 on A, line_intersection(f, Line(I, K)), A, B we get angle(A, B, line_intersection(f, Line(I, K))) == angle(line_intersection(f, Line(I, K)), B, A) mod 360
By internal_angle_bisector_definition_v0 on G, line_intersection(j, Line(E, G)), E, D we get angle(G, D, line_intersection(j, Line(E, G))) == angle(line_intersection(j, Line(E, G)), D, E) mod 360
By sss_anti_congruence_v1 on H, K, J, J, K, H we get anti_congruent_triangles(H, J, K, J, H, K)
By sss_anti_congruence_v1 on K, J, H, K, H, J we get anti_congruent_triangles(H, J, K, J, H, K)
By internal_angle_bisector_definition_v0 on B, line_intersection(f, Line(I, K)), B, G we get angle(B, G, line_intersection(f, Line(I, K))) == angle(line_intersection(f, Line(I, K)), G, B) mod 360
By sss_anti_congruence_v0 on J, C, K, C, J, K we get anti_congruent_triangles(C, J, K, J, C, K)
By perpendicular_bisector_properties on G, F we get perpendicular(Line(F, G), perpendicular_bisector(F, G)), midpoint(F, G) == line_intersection(Line(F, G), perpendicular_bisector(F, G))
By angle_to_center on line_circle_tangent_point(f, c), F, line_circle_tangent_point(g, c), c we get angle(line_circle_tangent_point(f, c), center(c), line_circle_tangent_point(g, c)) == 2 * angle(line_circle_tangent_point(f, c), F, line_circle_tangent_point(g, c)) mod 360
By angle_to_center on line_circle_tangent_point(g, c), F, line_circle_tangent_point(f, c), c we get angle(line_circle_tangent_point(g, c), center(c), line_circle_tangent_point(f, c)) == 2 * angle(line_circle_tangent_point(g, c), F, line_circle_tangent_point(f, c)) mod 360
By angle_to_center on line_circle_tangent_point(f, c), J, line_circle_tangent_point(h, c), c we get angle(line_circle_tangent_point(f, c), center(c), line_circle_tangent_point(h, c)) == 2 * angle(line_circle_tangent_point(f, c), J, line_circle_tangent_point(h, c)) mod 360
By angle_to_center on line_circle_tangent_point(g, c), G, line_circle_tangent_point(h, c), c we get angle(line_circle_tangent_point(g, c), center(c), line_circle_tangent_point(h, c)) == 2 * angle(line_circle_tangent_point(g, c), G, line_circle_tangent_point(h, c)) mod 360
By angle_to_center on line_circle_tangent_point(g, c), J, line_circle_tangent_point(h, c), c we get angle(line_circle_tangent_point(g, c), center(c), line_circle_tangent_point(h, c)) == 2 * angle(line_circle_tangent_point(g, c), J, line_circle_tangent_point(h, c)) mod 360
By angle_to_center on line_circle_tangent_point(h, c), H, line_circle_tangent_point(f, c), c we get angle(line_circle_tangent_point(h, c), center(c), line_circle_tangent_point(f, c)) == 2 * angle(line_circle_tangent_point(h, c), H, line_circle_tangent_point(f, c)) mod 360
By angle_to_center on line_circle_tangent_point(f, c), H, line_circle_tangent_point(h, c), c we get angle(line_circle_tangent_point(f, c), center(c), line_circle_tangent_point(h, c)) == 2 * angle(line_circle_tangent_point(f, c), H, line_circle_tangent_point(h, c)) mod 360
By angle_to_center on line_circle_tangent_point(f, c), E, line_circle_tangent_point(h, c), c we get angle(line_circle_tangent_point(f, c), center(c), line_circle_tangent_point(h, c)) == 2 * angle(line_circle_tangent_point(f, c), E, line_circle_tangent_point(h, c)) mod 360
By angle_to_center on line_circle_tangent_point(g, c), line_circle_tangent_point(h, c), line_circle_tangent_point(f, c), c we get angle(line_circle_tangent_point(g, c), center(c), line_circle_tangent_point(f, c)) == 2 * angle(line_circle_tangent_point(g, c), line_circle_tangent_point(h, c), line_circle_tangent_point(f, c)) mod 360
By angle_to_center on line_circle_tangent_point(h, c), J, line_circle_tangent_point(g, c), c we get angle(line_circle_tangent_point(h, c), center(c), line_circle_tangent_point(g, c)) == 2 * angle(line_circle_tangent_point(h, c), J, line_circle_tangent_point(g, c)) mod 360
By angle_to_center on line_circle_tangent_point(g, c), J, line_circle_tangent_point(f, c), c we get angle(line_circle_tangent_point(g, c), center(c), line_circle_tangent_point(f, c)) == 2 * angle(line_circle_tangent_point(g, c), J, line_circle_tangent_point(f, c)) mod 360
By angle_to_center on line_circle_tangent_point(f, c), H, line_circle_tangent_point(g, c), c we get angle(line_circle_tangent_point(f, c), center(c), line_circle_tangent_point(g, c)) == 2 * angle(line_circle_tangent_point(f, c), H, line_circle_tangent_point(g, c)) mod 360
By angle_to_center on line_circle_tangent_point(h, c), line_circle_tangent_point(f, c), line_circle_tangent_point(g, c), c we get angle(line_circle_tangent_point(h, c), center(c), line_circle_tangent_point(g, c)) == 2 * angle(line_circle_tangent_point(h, c), line_circle_tangent_point(f, c), line_circle_tangent_point(g, c)) mod 360
By angle_to_center on line_circle_tangent_point(h, c), E, line_circle_tangent_point(f, c), c we get angle(line_circle_tangent_point(h, c), center(c), line_circle_tangent_point(f, c)) == 2 * angle(line_circle_tangent_point(h, c), E, line_circle_tangent_point(f, c)) mod 360
By angle_to_center on line_circle_tangent_point(h, c), G, line_circle_tangent_point(g, c), c we get angle(line_circle_tangent_point(h, c), center(c), line_circle_tangent_point(g, c)) == 2 * angle(line_circle_tangent_point(h, c), G, line_circle_tangent_point(g, c)) mod 360
By angle_to_center on line_circle_tangent_point(g, c), H, line_circle_tangent_point(h, c), c we get angle(line_circle_tangent_point(g, c), center(c), line_circle_tangent_point(h, c)) == 2 * angle(line_circle_tangent_point(g, c), H, line_circle_tangent_point(h, c)) mod 360
By angle_to_center on line_circle_tangent_point(h, c), H, line_circle_tangent_point(g, c), c we get angle(line_circle_tangent_point(h, c), center(c), line_circle_tangent_point(g, c)) == 2 * angle(line_circle_tangent_point(h, c), H, line_circle_tangent_point(g, c)) mod 360
By angle_to_center on line_circle_tangent_point(g, c), line_circle_tangent_point(f, c), line_circle_tangent_point(h, c), c we get angle(line_circle_tangent_point(g, c), center(c), line_circle_tangent_point(h, c)) == 2 * angle(line_circle_tangent_point(g, c), line_circle_tangent_point(f, c), line_circle_tangent_point(h, c)) mod 360
By angle_to_center on line_circle_tangent_point(h, c), line_circle_tangent_point(g, c), line_circle_tangent_point(f, c), c we get angle(line_circle_tangent_point(h, c), center(c), line_circle_tangent_point(f, c)) == 2 * angle(line_circle_tangent_point(h, c), line_circle_tangent_point(g, c), line_circle_tangent_point(f, c)) mod 360
By angle_to_center on line_circle_tangent_point(h, c), J, line_circle_tangent_point(f, c), c we get angle(line_circle_tangent_point(h, c), center(c), line_circle_tangent_point(f, c)) == 2 * angle(line_circle_tangent_point(h, c), J, line_circle_tangent_point(f, c)) mod 360
By angle_to_center on line_circle_tangent_point(f, c), line_circle_tangent_point(h, c), line_circle_tangent_point(g, c), c we get angle(line_circle_tangent_point(f, c), center(c), line_circle_tangent_point(g, c)) == 2 * angle(line_circle_tangent_point(f, c), line_circle_tangent_point(h, c), line_circle_tangent_point(g, c)) mod 360
By angle_to_center on line_circle_tangent_point(f, c), line_circle_tangent_point(g, c), line_circle_tangent_point(h, c), c we get angle(line_circle_tangent_point(f, c), center(c), line_circle_tangent_point(h, c)) == 2 * angle(line_circle_tangent_point(f, c), line_circle_tangent_point(g, c), line_circle_tangent_point(h, c)) mod 360
By angle_to_center on line_circle_tangent_point(g, c), H, line_circle_tangent_point(f, c), c we get angle(line_circle_tangent_point(g, c), center(c), line_circle_tangent_point(f, c)) == 2 * angle(line_circle_tangent_point(g, c), H, line_circle_tangent_point(f, c)) mod 360
By angle_to_center on line_circle_tangent_point(f, c), J, line_circle_tangent_point(g, c), c we get angle(line_circle_tangent_point(f, c), center(c), line_circle_tangent_point(g, c)) == 2 * angle(line_circle_tangent_point(f, c), J, line_circle_tangent_point(g, c)) mod 360
By altitude_definition on A, I, line_intersection(f, Line(I, K)), f we get f == altitude(A, I, line_intersection(f, Line(I, K)))
By altitude_definition on F, midpoint(C, D), midpoint(E, F), Line(E, F) we get Line(E, F) == altitude(F, midpoint(C, D), midpoint(E, F))
By altitude_definition on center(Circle(A, D, F)), F, line_intersection(i, Line(F, G)), i we get i == altitude(center(Circle(A, D, F)), F, line_intersection(i, Line(F, G)))
By altitude_definition on H, G, line_intersection(i, Line(F, G)), Line(F, H) we get Line(F, H) == altitude(H, G, line_intersection(i, Line(F, G)))
By perpendicular_angle_conditions_v0 on D, line_intersection(i, Line(F, G)), G we get angle(D, line_intersection(i, Line(F, G)), G) == orientation(D, line_intersection(i, Line(F, G)), G) mod 360
By altitude_definition on B, G, line_intersection(j, Line(E, G)), j we get j == altitude(B, G, line_intersection(j, Line(E, G)))
By altitude_definition on D, line_intersection(f, Line(I, K)), A, Line(D, G) we get Line(D, G) == altitude(D, A, line_intersection(f, Line(I, K)))
By perpendicular_angle_conditions_v0 on K, line_intersection(f, Line(I, K)), A we get angle(K, line_intersection(f, Line(I, K)), A) == orientation(A, K, line_intersection(f, Line(I, K))) mod 360
By altitude_definition on G, D, line_intersection(j, Line(E, G)), Line(E, G) we get Line(E, G) == altitude(G, D, line_intersection(j, Line(E, G)))
By perpendicular_angle_conditions_v0 on I, line_intersection(f, Line(I, K)), G we get angle(I, line_intersection(f, Line(I, K)), G) == orientation(G, I, line_intersection(f, Line(I, K))) mod 360
By altitude_definition on D, line_intersection(j, Line(E, G)), G, j we get j == altitude(D, G, line_intersection(j, Line(E, G)))
By perpendicular_angle_conditions_v0 on K, line_intersection(f, Line(I, K)), B we get angle(K, line_intersection(f, Line(I, K)), B) == orientation(B, K, line_intersection(f, Line(I, K))) mod 360
By collinear_definition on line_intersection(i, Line(F, G)), G, F we get G in Line(F, line_intersection(i, Line(F, G))), F in Line(G, line_intersection(i, Line(F, G))), Line(F, line_intersection(i, Line(F, G))) == Line(G, line_intersection(i, Line(F, G))), 0 == 2 * angle(G, line_intersection(i, Line(F, G)), F) mod 360
By altitude_definition on E, B, center(Circle(B, D, E)), Line(E, G) we get Line(E, G) == altitude(E, B, center(Circle(B, D, E)))
By perpendicular_angle_conditions_v0 on D, line_intersection(j, Line(E, G)), E we get angle(D, line_intersection(j, Line(E, G)), E) == orientation(D, line_intersection(j, Line(E, G)), E) mod 360
By altitude_definition on I, A, line_intersection(f, Line(I, K)), Line(I, K) we get Line(I, K) == altitude(I, A, line_intersection(f, Line(I, K)))
By perpendicular_angle_conditions_v0 on F, line_intersection(i, Line(F, G)), A we get angle(F, line_intersection(i, Line(F, G)), A) == orientation(A, F, line_intersection(i, Line(F, G))) mod 360
By altitude_definition on G, line_intersection(i, Line(F, G)), D, Line(F, G) we get Line(F, G) == altitude(G, D, line_intersection(i, Line(F, G)))
By altitude_definition on A, line_intersection(f, Line(I, K)), K, f we get f == altitude(A, K, line_intersection(f, Line(I, K)))
By altitude_definition on D, G, line_intersection(i, Line(F, G)), i we get i == altitude(D, G, line_intersection(i, Line(F, G)))
By altitude_definition on H, B, line_intersection(f, Line(I, K)), Line(D, G) we get Line(D, G) == altitude(H, B, line_intersection(f, Line(I, K)))
By altitude_definition on E, midpoint(C, D), midpoint(E, F), Line(E, F) we get Line(E, F) == altitude(E, midpoint(C, D), midpoint(E, F))
By perpendicular_angle_conditions_v0 on G, line_intersection(i, Line(F, G)), A we get angle(G, line_intersection(i, Line(F, G)), A) == orientation(A, G, line_intersection(i, Line(F, G))) mod 360
By perpendicular_angle_conditions_v0 on E, line_intersection(j, Line(E, G)), D we get angle(E, line_intersection(j, Line(E, G)), D) == orientation(D, E, line_intersection(j, Line(E, G))) mod 360
By altitude_definition on center(Circle(A, D, F)), line_intersection(i, Line(F, G)), G, i we get i == altitude(center(Circle(A, D, F)), G, line_intersection(i, Line(F, G)))
By altitude_definition on H, A, line_intersection(f, Line(I, K)), Line(D, G) we get Line(D, G) == altitude(H, A, line_intersection(f, Line(I, K)))
By collinear_definition on line_intersection(f, Line(I, K)), K, I we get K in Line(I, line_intersection(f, Line(I, K))), I in Line(K, line_intersection(f, Line(I, K))), Line(I, line_intersection(f, Line(I, K))) == Line(K, line_intersection(f, Line(I, K))), 0 == 2 * angle(K, line_intersection(f, Line(I, K)), I) mod 360
By altitude_definition on G, center(Circle(A, D, F)), D, Line(F, G) we get Line(F, G) == altitude(G, D, center(Circle(A, D, F)))
By altitude_definition on B, K, line_intersection(f, Line(I, K)), f we get f == altitude(B, K, line_intersection(f, Line(I, K)))
By altitude_definition on center(Circle(B, D, E)), G, line_intersection(j, Line(E, G)), j we get j == altitude(center(Circle(B, D, E)), G, line_intersection(j, Line(E, G)))
By collinear_definition on line_intersection(j, Line(E, G)), G, E we get G in Line(E, line_intersection(j, Line(E, G))), E in Line(G, line_intersection(j, Line(E, G))), Line(E, line_intersection(j, Line(E, G))) == Line(G, line_intersection(j, Line(E, G))), 0 == 2 * angle(G, line_intersection(j, Line(E, G)), E) mod 360
By altitude_definition on K, line_intersection(f, Line(I, K)), G, Line(I, K) we get Line(I, K) == altitude(K, G, line_intersection(f, Line(I, K)))
By perpendicular_angle_conditions_v0 on G, line_intersection(f, Line(I, K)), K we get angle(G, line_intersection(f, Line(I, K)), K) == orientation(G, line_intersection(f, Line(I, K)), K) mod 360
By altitude_definition on A, line_intersection(i, Line(F, G)), G, i we get i == altitude(A, G, line_intersection(i, Line(F, G)))
By altitude_definition on D, line_intersection(i, Line(F, G)), F, i we get i == altitude(D, F, line_intersection(i, Line(F, G)))
By altitude_definition on I, line_intersection(f, Line(I, K)), B, Line(I, K) we get Line(I, K) == altitude(I, B, line_intersection(f, Line(I, K)))
By altitude_definition on H, line_intersection(j, Line(E, G)), G, k we get k == altitude(H, G, line_intersection(j, Line(E, G)))
By altitude_definition on line_circle_tangent_point(f, c), line_intersection(f, Line(I, K)), I, f we get f == altitude(line_circle_tangent_point(f, c), I, line_intersection(f, Line(I, K)))
By altitude_definition on F, D, center(Circle(A, D, F)), Line(F, G) we get Line(F, G) == altitude(F, D, center(Circle(A, D, F)))
By altitude_definition on H, line_intersection(i, Line(F, G)), F, Line(F, H) we get Line(F, H) == altitude(H, F, line_intersection(i, Line(F, G)))
By altitude_definition on F, center(Circle(A, D, F)), A, Line(F, G) we get Line(F, G) == altitude(F, A, center(Circle(A, D, F)))
By altitude_definition on D, G, line_intersection(f, Line(I, K)), Line(D, G) we get Line(D, G) == altitude(D, G, line_intersection(f, Line(I, K)))
By altitude_definition on G, line_intersection(i, Line(F, G)), A, Line(F, G) we get Line(F, G) == altitude(G, A, line_intersection(i, Line(F, G)))
By perpendicular_angle_conditions_v0 on E, line_intersection(j, Line(E, G)), B we get angle(E, line_intersection(j, Line(E, G)), B) == orientation(B, E, line_intersection(j, Line(E, G))) mod 360
By altitude_definition on B, line_intersection(f, Line(I, K)), I, f we get f == altitude(B, I, line_intersection(f, Line(I, K)))
By altitude_definition on F, line_intersection(i, Line(F, G)), D, Line(F, G) we get Line(F, G) == altitude(F, D, line_intersection(i, Line(F, G)))
By perpendicular_angle_conditions_v0 on K, line_intersection(f, Line(I, K)), G we get angle(K, line_intersection(f, Line(I, K)), G) == orientation(G, K, line_intersection(f, Line(I, K))) mod 360
By collinear_definition on line_intersection(f, Line(I, K)), B, G we get B in Line(G, line_intersection(f, Line(I, K))), G in Line(B, line_intersection(f, Line(I, K))), Line(B, line_intersection(f, Line(I, K))) == Line(G, line_intersection(f, Line(I, K))), 0 == 2 * angle(B, line_intersection(f, Line(I, K)), G) mod 360
By altitude_definition on G, K, line_intersection(f, Line(I, K)), f we get f == altitude(G, K, line_intersection(f, Line(I, K)))
By altitude_definition on K, line_intersection(f, Line(I, K)), B, Line(I, K) we get Line(I, K) == altitude(K, B, line_intersection(f, Line(I, K)))
By altitude_definition on G, center(Circle(A, D, F)), A, Line(F, G) we get Line(F, G) == altitude(G, A, center(Circle(A, D, F)))
By perpendicular_angle_conditions_v0 on G, line_intersection(j, Line(E, G)), D we get angle(G, line_intersection(j, Line(E, G)), D) == orientation(D, G, line_intersection(j, Line(E, G))) mod 360
By collinear_definition on line_intersection(f, Line(I, K)), B, A we get B in Line(A, line_intersection(f, Line(I, K))), A in Line(B, line_intersection(f, Line(I, K))), Line(A, line_intersection(f, Line(I, K))) == Line(B, line_intersection(f, Line(I, K))), 0 == 2 * angle(B, line_intersection(f, Line(I, K)), A) mod 360
By altitude_definition on G, center(Circle(B, D, E)), B, Line(E, G) we get Line(E, G) == altitude(G, B, center(Circle(B, D, E)))
By perpendicular_angle_conditions_v0 on G, line_intersection(i, Line(F, G)), D we get angle(G, line_intersection(i, Line(F, G)), D) == orientation(D, G, line_intersection(i, Line(F, G))) mod 360
By collinear_definition on midpoint(F, G), G, F we get G in Line(F, midpoint(F, G)), F in Line(G, midpoint(F, G)), Line(F, midpoint(F, G)) == Line(G, midpoint(F, G)), 0 == 2 * angle(G, midpoint(F, G), F) mod 360
By altitude_definition on B, line_intersection(j, Line(E, G)), E, j we get j == altitude(B, E, line_intersection(j, Line(E, G)))
By altitude_definition on line_circle_tangent_point(f, c), K, line_intersection(f, Line(I, K)), f we get f == altitude(line_circle_tangent_point(f, c), K, line_intersection(f, Line(I, K)))
By perpendicular_angle_conditions_v0 on B, line_intersection(f, Line(I, K)), I we get angle(B, line_intersection(f, Line(I, K)), I) == orientation(B, line_intersection(f, Line(I, K)), I) mod 360
By collinear_definition on midpoint(F, G), F, G we get F in Line(G, midpoint(F, G)), G in Line(F, midpoint(F, G)), Line(F, midpoint(F, G)) == Line(G, midpoint(F, G)), 0 == 2 * angle(F, midpoint(F, G), G) mod 360
By collinear_definition on line_intersection(j, Line(E, G)), E, G we get E in Line(G, line_intersection(j, Line(E, G))), G in Line(E, line_intersection(j, Line(E, G))), Line(E, line_intersection(j, Line(E, G))) == Line(G, line_intersection(j, Line(E, G))), 0 == 2 * angle(E, line_intersection(j, Line(E, G)), G) mod 360
By altitude_definition on A, line_intersection(i, Line(F, G)), F, i we get i == altitude(A, F, line_intersection(i, Line(F, G)))
By perpendicular_angle_conditions_v0 on G, line_intersection(f, Line(I, K)), I we get angle(G, line_intersection(f, Line(I, K)), I) == orientation(G, line_intersection(f, Line(I, K)), I) mod 360
By altitude_definition on D, line_intersection(j, Line(E, G)), E, j we get j == altitude(D, E, line_intersection(j, Line(E, G)))
By collinear_definition on line_intersection(i, Line(F, G)), A, D we get A in Line(D, line_intersection(i, Line(F, G))), D in Line(A, line_intersection(i, Line(F, G))), Line(A, line_intersection(i, Line(F, G))) == Line(D, line_intersection(i, Line(F, G))), 0 == 2 * angle(A, line_intersection(i, Line(F, G)), D) mod 360
By altitude_definition on E, D, line_intersection(j, Line(E, G)), Line(E, G) we get Line(E, G) == altitude(E, D, line_intersection(j, Line(E, G)))
By altitude_definition on center(Circle(B, D, E)), E, line_intersection(j, Line(E, G)), j we get j == altitude(center(Circle(B, D, E)), E, line_intersection(j, Line(E, G)))
By altitude_definition on H, G, line_intersection(f, Line(I, K)), Line(D, G) we get Line(D, G) == altitude(H, G, line_intersection(f, Line(I, K)))
By altitude_definition on H, E, line_intersection(j, Line(E, G)), k we get k == altitude(H, E, line_intersection(j, Line(E, G)))
By altitude_definition on D, line_intersection(f, Line(I, K)), B, Line(D, G) we get Line(D, G) == altitude(D, B, line_intersection(f, Line(I, K)))
By collinear_definition on line_intersection(f, Line(I, K)), A, G we get A in Line(G, line_intersection(f, Line(I, K))), G in Line(A, line_intersection(f, Line(I, K))), Line(A, line_intersection(f, Line(I, K))) == Line(G, line_intersection(f, Line(I, K))), 0 == 2 * angle(A, line_intersection(f, Line(I, K)), G) mod 360
By perpendicular_angle_conditions_v0 on I, line_intersection(f, Line(I, K)), B we get angle(I, line_intersection(f, Line(I, K)), B) == orientation(B, I, line_intersection(f, Line(I, K))) mod 360
By altitude_definition on G, I, line_intersection(f, Line(I, K)), f we get f == altitude(G, I, line_intersection(f, Line(I, K)))
By altitude_definition on F, line_intersection(i, Line(F, G)), A, Line(F, G) we get Line(F, G) == altitude(F, A, line_intersection(i, Line(F, G)))
By perpendicular_angle_conditions_v0 on B, line_intersection(f, Line(I, K)), K we get angle(B, line_intersection(f, Line(I, K)), K) == orientation(B, line_intersection(f, Line(I, K)), K) mod 360
By altitude_definition on line_circle_tangent_point(f, c), I, K, f we get f == altitude(line_circle_tangent_point(f, c), I, K)
By collinear_definition on line_intersection(f, Line(I, K)), I, K we get I in Line(K, line_intersection(f, Line(I, K))), K in Line(I, line_intersection(f, Line(I, K))), Line(I, line_intersection(f, Line(I, K))) == Line(K, line_intersection(f, Line(I, K))), 0 == 2 * angle(I, line_intersection(f, Line(I, K)), K) mod 360
By altitude_definition on E, line_intersection(j, Line(E, G)), B, Line(E, G) we get Line(E, G) == altitude(E, B, line_intersection(j, Line(E, G)))
By altitude_definition on I, line_intersection(f, Line(I, K)), G, Line(I, K) we get Line(I, K) == altitude(I, G, line_intersection(f, Line(I, K)))
By perpendicular_angle_conditions_v0 on F, line_intersection(i, Line(F, G)), D we get angle(F, line_intersection(i, Line(F, G)), D) == orientation(D, F, line_intersection(i, Line(F, G))) mod 360
By altitude_definition on K, A, line_intersection(f, Line(I, K)), Line(I, K) we get Line(I, K) == altitude(K, A, line_intersection(f, Line(I, K)))
By altitude_definition on G, D, center(Circle(B, D, E)), Line(E, G) we get Line(E, G) == altitude(G, D, center(Circle(B, D, E)))
By perpendicular_angle_conditions_v0 on A, line_intersection(i, Line(F, G)), F we get angle(A, line_intersection(i, Line(F, G)), F) == orientation(A, line_intersection(i, Line(F, G)), F) mod 360
By perpendicular_angle_conditions_v0 on I, line_intersection(f, Line(I, K)), A we get angle(I, line_intersection(f, Line(I, K)), A) == orientation(A, I, line_intersection(f, Line(I, K))) mod 360
By perpendicular_angle_conditions_v0 on B, line_intersection(j, Line(E, G)), E we get angle(B, line_intersection(j, Line(E, G)), E) == orientation(B, line_intersection(j, Line(E, G)), E) mod 360
By collinear_definition on line_intersection(i, Line(F, G)), F, G we get F in Line(G, line_intersection(i, Line(F, G))), G in Line(F, line_intersection(i, Line(F, G))), Line(F, line_intersection(i, Line(F, G))) == Line(G, line_intersection(i, Line(F, G))), 0 == 2 * angle(F, line_intersection(i, Line(F, G)), G) mod 360
By perpendicular_angle_conditions_v0 on D, line_intersection(i, Line(F, G)), F we get angle(D, line_intersection(i, Line(F, G)), F) == orientation(D, line_intersection(i, Line(F, G)), F) mod 360
By perpendicular_angle_conditions_v0 on D, line_intersection(j, Line(E, G)), G we get angle(D, line_intersection(j, Line(E, G)), G) == orientation(D, line_intersection(j, Line(E, G)), G) mod 360
By collinear_definition on line_intersection(f, Line(I, K)), G, B we get G in Line(B, line_intersection(f, Line(I, K))), B in Line(G, line_intersection(f, Line(I, K))), Line(B, line_intersection(f, Line(I, K))) == Line(G, line_intersection(f, Line(I, K))), 0 == 2 * angle(G, line_intersection(f, Line(I, K)), B) mod 360
By collinear_definition on line_intersection(f, Line(I, K)), G, A we get G in Line(A, line_intersection(f, Line(I, K))), A in Line(G, line_intersection(f, Line(I, K))), Line(A, line_intersection(f, Line(I, K))) == Line(G, line_intersection(f, Line(I, K))), 0 == 2 * angle(G, line_intersection(f, Line(I, K)), A) mod 360
By perpendicular_angle_conditions_v0 on G, line_intersection(j, Line(E, G)), B we get angle(G, line_intersection(j, Line(E, G)), B) == orientation(B, G, line_intersection(j, Line(E, G))) mod 360
By collinear_definition on midpoint(E, G), G, E we get G in Line(E, midpoint(E, G)), E in Line(G, midpoint(E, G)), Line(E, midpoint(E, G)) == Line(G, midpoint(E, G)), 0 == 2 * angle(G, midpoint(E, G), E) mod 360
By altitude_definition on G, line_intersection(j, Line(E, G)), B, Line(E, G) we get Line(E, G) == altitude(G, B, line_intersection(j, Line(E, G)))
By perpendicular_angle_conditions_v0 on A, line_intersection(i, Line(F, G)), G we get angle(A, line_intersection(i, Line(F, G)), G) == orientation(A, line_intersection(i, Line(F, G)), G) mod 360
By collinear_definition on line_intersection(i, Line(F, G)), D, A we get D in Line(A, line_intersection(i, Line(F, G))), A in Line(D, line_intersection(i, Line(F, G))), Line(A, line_intersection(i, Line(F, G))) == Line(D, line_intersection(i, Line(F, G))), 0 == 2 * angle(D, line_intersection(i, Line(F, G)), A) mod 360
By perpendicular_angle_conditions_v0 on B, line_intersection(j, Line(E, G)), G we get angle(B, line_intersection(j, Line(E, G)), G) == orientation(B, line_intersection(j, Line(E, G)), G) mod 360
By altitude_definition on E, center(Circle(B, D, E)), D, Line(E, G) we get Line(E, G) == altitude(E, D, center(Circle(B, D, E)))
By collinear_definition on line_intersection(j, Line(E, G)), D, B we get D in Line(B, line_intersection(j, Line(E, G))), B in Line(D, line_intersection(j, Line(E, G))), Line(B, line_intersection(j, Line(E, G))) == Line(D, line_intersection(j, Line(E, G))), 0 == 2 * angle(D, line_intersection(j, Line(E, G)), B) mod 360
By collinear_definition on line_intersection(j, Line(E, G)), B, D we get B in Line(D, line_intersection(j, Line(E, G))), D in Line(B, line_intersection(j, Line(E, G))), Line(B, line_intersection(j, Line(E, G))) == Line(D, line_intersection(j, Line(E, G))), 0 == 2 * angle(B, line_intersection(j, Line(E, G)), D) mod 360
By collinear_definition on line_intersection(f, Line(I, K)), A, B we get A in Line(B, line_intersection(f, Line(I, K))), B in Line(A, line_intersection(f, Line(I, K))), Line(A, line_intersection(f, Line(I, K))) == Line(B, line_intersection(f, Line(I, K))), 0 == 2 * angle(A, line_intersection(f, Line(I, K)), B) mod 360
By perpendicular_angle_conditions_v0 on A, line_intersection(f, Line(I, K)), K we get angle(A, line_intersection(f, Line(I, K)), K) == orientation(A, line_intersection(f, Line(I, K)), K) mod 360
By collinear_definition on midpoint(E, G), E, G we get E in Line(G, midpoint(E, G)), G in Line(E, midpoint(E, G)), Line(E, midpoint(E, G)) == Line(G, midpoint(E, G)), 0 == 2 * angle(E, midpoint(E, G), G) mod 360
By perpendicular_angle_conditions_v0 on A, line_intersection(f, Line(I, K)), I we get angle(A, line_intersection(f, Line(I, K)), I) == orientation(A, line_intersection(f, Line(I, K)), I) mod 360
By power_of_a_point_definition on line_intersection(j, Line(E, G)), G, E, c we get log(power_of_a_point(line_intersection(j, Line(E, G)), c)) == log(distance(G, line_intersection(j, Line(E, G)))) + log(distance(E, line_intersection(j, Line(E, G))))
By power_of_a_point_definition on line_intersection(i, Line(F, G)), F, G, Circle(A, D, F) we get log(power_of_a_point(line_intersection(i, Line(F, G)), Circle(A, D, F))) == log(distance(F, line_intersection(i, Line(F, G)))) + log(distance(G, line_intersection(i, Line(F, G))))
By power_of_a_point_tangent on line_intersection(f, Line(I, K)), G, c we get log(power_of_a_point(line_intersection(f, Line(I, K)), c)) == 2 * log(distance(G, line_intersection(f, Line(I, K))))
By power_of_a_point_definition on line_intersection(i, Line(F, G)), F, G, c we get log(power_of_a_point(line_intersection(i, Line(F, G)), c)) == log(distance(F, line_intersection(i, Line(F, G)))) + log(distance(G, line_intersection(i, Line(F, G))))
By power_of_a_point_definition on line_intersection(j, Line(E, G)), D, B, Circle(B, D, E) we get log(power_of_a_point(line_intersection(j, Line(E, G)), Circle(B, D, E))) == log(distance(D, line_intersection(j, Line(E, G)))) + log(distance(B, line_intersection(j, Line(E, G))))
By power_of_a_point_definition on line_intersection(i, Line(F, G)), A, D, Circle(A, D, F) we get log(power_of_a_point(line_intersection(i, Line(F, G)), Circle(A, D, F))) == log(distance(A, line_intersection(i, Line(F, G)))) + log(distance(D, line_intersection(i, Line(F, G))))
By power_of_a_point_definition on line_intersection(j, Line(E, G)), G, E, Circle(B, D, E) we get log(power_of_a_point(line_intersection(j, Line(E, G)), Circle(B, D, E))) == log(distance(G, line_intersection(j, Line(E, G)))) + log(distance(E, line_intersection(j, Line(E, G))))
By between_implies_angles on E, midpoint(E, G), G we get 180 == angle(E, midpoint(E, G), G) mod 360, 0 == angle(midpoint(E, G), G, E) mod 360, 0 == angle(G, E, midpoint(E, G)) mod 360
By between_implies_angles on G, midpoint(F, G), F we get 180 == angle(G, midpoint(F, G), F) mod 360, 0 == angle(midpoint(F, G), F, G) mod 360, 0 == angle(F, G, midpoint(F, G)) mod 360
By power_of_a_point_definition on midpoint(E, G), E, G, Circle(B, D, E) we get log(power_of_a_point(midpoint(E, G), Circle(B, D, E))) == log(distance(E, midpoint(E, G))) + log(distance(G, midpoint(E, G)))
By between_implies_angles on G, midpoint(E, G), E we get 180 == angle(G, midpoint(E, G), E) mod 360, 0 == angle(midpoint(E, G), E, G) mod 360, 0 == angle(E, G, midpoint(E, G)) mod 360
By power_of_a_point_definition on midpoint(E, G), E, G, c we get log(power_of_a_point(midpoint(E, G), c)) == log(distance(E, midpoint(E, G))) + log(distance(G, midpoint(E, G)))
By power_of_a_point_definition on midpoint(F, G), F, G, Circle(A, D, F) we get log(power_of_a_point(midpoint(F, G), Circle(A, D, F))) == log(distance(F, midpoint(F, G))) + log(distance(G, midpoint(F, G)))
By between_implies_angles on F, midpoint(F, G), G we get 180 == angle(F, midpoint(F, G), G) mod 360, 0 == angle(midpoint(F, G), G, F) mod 360, 0 == angle(G, F, midpoint(F, G)) mod 360
By power_of_a_point_definition on midpoint(F, G), F, G, c we get log(power_of_a_point(midpoint(F, G), c)) == log(distance(F, midpoint(F, G))) + log(distance(G, midpoint(F, G)))
By power_of_a_point_definition on line_intersection(f, Line(I, K)), A, G, Circle(A, D, F) we get log(power_of_a_point(line_intersection(f, Line(I, K)), Circle(A, D, F))) == log(distance(A, line_intersection(f, Line(I, K)))) + log(distance(G, line_intersection(f, Line(I, K))))
By power_of_a_point_definition on line_intersection(f, Line(I, K)), B, G, Circle(B, D, E) we get log(power_of_a_point(line_intersection(f, Line(I, K)), Circle(B, D, E))) == log(distance(B, line_intersection(f, Line(I, K)))) + log(distance(G, line_intersection(f, Line(I, K))))
By concurrent_sufficient_conditions on l, Line(J, K), Line(H, J) we get concurrent(l, Line(H, J), Line(J, K))
By concurrent_sufficient_conditions on Line(J, K), Line(H, J), Line(E, J) we get concurrent(Line(E, J), Line(H, J), Line(J, K))
By concurrent_sufficient_conditions on l, Line(E, J), Line(J, K) we get concurrent(l, Line(E, J), Line(J, K))
By concurrent_sufficient_conditions on Line(J, K), Line(D, J), Line(E, J) we get concurrent(Line(D, J), Line(E, J), Line(J, K))
By concurrent_sufficient_conditions on Line(D, J), Line(J, K), Line(E, J) we get concurrent(Line(D, J), Line(E, J), Line(J, K))
By concurrent_sufficient_conditions on Line(I, K), Line(C, H), Line(J, K) we get concurrent(Line(C, H), Line(I, K), Line(J, K))
By concurrent_sufficient_conditions on Line(J, K), Line(E, J), Line(F, J) we get concurrent(Line(E, J), Line(F, J), Line(J, K))
By concurrent_sufficient_conditions on Line(F, J), Line(J, K), Line(H, J) we get concurrent(Line(F, J), Line(H, J), Line(J, K))
By concurrent_sufficient_conditions on Line(J, K), Line(H, J), l we get concurrent(l, Line(H, J), Line(J, K))
By concurrent_sufficient_conditions on l, Line(D, J), Line(J, K) we get concurrent(l, Line(D, J), Line(J, K))
By concurrent_sufficient_conditions on Line(J, K), Line(F, J), Line(E, J) we get concurrent(Line(E, J), Line(F, J), Line(J, K))
By concurrent_sufficient_conditions on Line(I, K), Line(J, K), Line(C, H) we get concurrent(Line(C, H), Line(I, K), Line(J, K))
By concurrent_sufficient_conditions on Line(J, K), l, Line(F, J) we get concurrent(l, Line(F, J), Line(J, K))
By concurrent_sufficient_conditions on Line(J, K), Line(F, J), Line(H, J) we get concurrent(Line(F, J), Line(H, J), Line(J, K))
By concurrent_sufficient_conditions on Line(J, K), Line(E, J), l we get concurrent(l, Line(E, J), Line(J, K))
By concurrent_sufficient_conditions on Line(E, J), Line(J, K), l we get concurrent(l, Line(E, J), Line(J, K))
By concurrent_sufficient_conditions on Line(E, J), l, Line(J, K) we get concurrent(l, Line(E, J), Line(J, K))
By concurrent_sufficient_conditions on Line(J, K), Line(F, J), Line(D, J) we get concurrent(Line(D, J), Line(F, J), Line(J, K))
By concurrent_sufficient_conditions on Line(H, J), Line(F, J), Line(J, K) we get concurrent(Line(F, J), Line(H, J), Line(J, K))
By concurrent_sufficient_conditions on Line(F, J), Line(J, K), Line(E, J) we get concurrent(Line(E, J), Line(F, J), Line(J, K))
By concurrent_sufficient_conditions on Line(H, J), Line(E, J), Line(J, K) we get concurrent(Line(E, J), Line(H, J), Line(J, K))
By concurrent_sufficient_conditions on Line(D, J), l, Line(J, K) we get concurrent(l, Line(D, J), Line(J, K))
By concurrent_sufficient_conditions on Line(H, J), Line(J, K), Line(D, J) we get concurrent(Line(D, J), Line(H, J), Line(J, K))
By concurrent_sufficient_conditions on Line(J, K), Line(E, J), Line(D, J) we get concurrent(Line(D, J), Line(E, J), Line(J, K))
By concurrent_sufficient_conditions on Line(F, J), Line(D, J), Line(J, K) we get concurrent(Line(D, J), Line(F, J), Line(J, K))
By concurrent_sufficient_conditions on Line(E, J), Line(J, K), Line(H, J) we get concurrent(Line(E, J), Line(H, J), Line(J, K))
By concurrent_sufficient_conditions on Line(F, J), Line(J, K), Line(D, J) we get concurrent(Line(D, J), Line(F, J), Line(J, K))
By concurrent_sufficient_conditions on Line(F, J), Line(H, J), Line(J, K) we get concurrent(Line(F, J), Line(H, J), Line(J, K))
By concurrent_sufficient_conditions on l, Line(J, K), Line(E, J) we get concurrent(l, Line(E, J), Line(J, K))
By concurrent_sufficient_conditions on Line(E, J), Line(J, K), Line(F, J) we get concurrent(Line(E, J), Line(F, J), Line(J, K))
By concurrent_sufficient_conditions on Line(J, K), Line(E, J), Line(H, J) we get concurrent(Line(E, J), Line(H, J), Line(J, K))
By concurrent_sufficient_conditions on Line(D, J), Line(E, J), Line(J, K) we get concurrent(Line(D, J), Line(E, J), Line(J, K))
By concurrent_sufficient_conditions on Line(H, J), Line(J, K), Line(E, J) we get concurrent(Line(E, J), Line(H, J), Line(J, K))
By concurrent_sufficient_conditions on l, Line(J, K), Line(F, J) we get concurrent(l, Line(F, J), Line(J, K))
By concurrent_sufficient_conditions on l, Line(F, J), Line(J, K) we get concurrent(l, Line(F, J), Line(J, K))
By concurrent_sufficient_conditions on Line(F, J), Line(E, J), Line(J, K) we get concurrent(Line(E, J), Line(F, J), Line(J, K))
By concurrent_sufficient_conditions on Line(J, K), Line(H, J), Line(D, J) we get concurrent(Line(D, J), Line(H, J), Line(J, K))
By concurrent_sufficient_conditions on Line(J, K), l, Line(D, J) we get concurrent(l, Line(D, J), Line(J, K))
By concurrent_sufficient_conditions on Line(J, K), Line(I, K), Line(C, H) we get concurrent(Line(C, H), Line(I, K), Line(J, K))
By concurrent_sufficient_conditions on Line(J, K), Line(C, H), Line(I, K) we get concurrent(Line(C, H), Line(I, K), Line(J, K))
By concurrent_sufficient_conditions on Line(H, J), Line(J, K), l we get concurrent(l, Line(H, J), Line(J, K))
By concurrent_sufficient_conditions on Line(J, K), Line(F, J), l we get concurrent(l, Line(F, J), Line(J, K))
By concurrent_sufficient_conditions on Line(H, J), l, Line(J, K) we get concurrent(l, Line(H, J), Line(J, K))
By concurrent_sufficient_conditions on Line(E, J), Line(J, K), Line(D, J) we get concurrent(Line(D, J), Line(E, J), Line(J, K))
By concurrent_sufficient_conditions on Line(H, J), Line(J, K), Line(F, J) we get concurrent(Line(F, J), Line(H, J), Line(J, K))
By concurrent_sufficient_conditions on l, Line(J, K), Line(D, J) we get concurrent(l, Line(D, J), Line(J, K))
By concurrent_sufficient_conditions on Line(J, K), l, Line(E, J) we get concurrent(l, Line(E, J), Line(J, K))
By concurrent_sufficient_conditions on Line(J, K), Line(D, J), Line(F, J) we get concurrent(Line(D, J), Line(F, J), Line(J, K))
By concurrent_sufficient_conditions on Line(H, J), Line(D, J), Line(J, K) we get concurrent(Line(D, J), Line(H, J), Line(J, K))
By concurrent_sufficient_conditions on l, Line(H, J), Line(J, K) we get concurrent(l, Line(H, J), Line(J, K))
By concurrent_sufficient_conditions on Line(F, J), Line(J, K), l we get concurrent(l, Line(F, J), Line(J, K))
By concurrent_sufficient_conditions on Line(D, J), Line(J, K), Line(F, J) we get concurrent(Line(D, J), Line(F, J), Line(J, K))
By concurrent_sufficient_conditions on Line(C, H), Line(J, K), Line(I, K) we get concurrent(Line(C, H), Line(I, K), Line(J, K))
By concurrent_sufficient_conditions on Line(D, J), Line(J, K), Line(H, J) we get concurrent(Line(D, J), Line(H, J), Line(J, K))
By concurrent_sufficient_conditions on Line(C, H), Line(I, K), Line(J, K) we get concurrent(Line(C, H), Line(I, K), Line(J, K))
By concurrent_sufficient_conditions on Line(D, J), Line(J, K), l we get concurrent(l, Line(D, J), Line(J, K))
By concurrent_sufficient_conditions on Line(D, J), Line(F, J), Line(J, K) we get concurrent(Line(D, J), Line(F, J), Line(J, K))
By concurrent_sufficient_conditions on Line(E, J), Line(H, J), Line(J, K) we get concurrent(Line(E, J), Line(H, J), Line(J, K))
By concurrent_sufficient_conditions on Line(E, J), Line(D, J), Line(J, K) we get concurrent(Line(D, J), Line(E, J), Line(J, K))
By concurrent_sufficient_conditions on Line(D, J), Line(H, J), Line(J, K) we get concurrent(Line(D, J), Line(H, J), Line(J, K))
By concurrent_sufficient_conditions on Line(E, J), Line(F, J), Line(J, K) we get concurrent(Line(E, J), Line(F, J), Line(J, K))
By concurrent_sufficient_conditions on Line(J, K), Line(D, J), l we get concurrent(l, Line(D, J), Line(J, K))
By concurrent_sufficient_conditions on Line(J, K), Line(D, J), Line(H, J) we get concurrent(Line(D, J), Line(H, J), Line(J, K))
By concurrent_sufficient_conditions on Line(F, J), l, Line(J, K) we get concurrent(l, Line(F, J), Line(J, K))
By concurrent_sufficient_conditions on Line(J, K), Line(H, J), Line(F, J) we get concurrent(Line(F, J), Line(H, J), Line(J, K))
By concurrent_sufficient_conditions on Line(J, K), l, Line(H, J) we get concurrent(l, Line(H, J), Line(J, K))
By median_definition on midpoint(E, F), G, H, Line(C, D) we get Line(C, D) == median(midpoint(E, F), G, H)
By median_definition on C, G, H, Line(C, D) we get Line(C, D) == median(C, G, H)
By median_definition on midpoint(F, G), H, G, i we get i == median(midpoint(F, G), G, H)
By median_definition on midpoint(B, D), G, H, j we get j == median(midpoint(B, D), G, H)
By median_definition on G, D, A, Line(G, midpoint(A, D)) we get median(G, A, D) == Line(G, midpoint(A, D))
By median_definition on midpoint(E, G), G, H, j we get j == median(midpoint(E, G), G, H)
By median_definition on J, H, G, Line(D, J) we get Line(D, J) == median(J, G, H)
By line_intersection_definition on C, radical_axis(Circle(C, D, E), Circle(C, H, J)), g we get C == line_intersection(g, radical_axis(Circle(C, D, E), Circle(C, H, J)))
By median_definition on G, D, B, Line(G, midpoint(B, D)) we get median(G, B, D) == Line(G, midpoint(B, D))
By median_definition on E, D, B, Line(E, midpoint(B, D)) we get median(E, B, D) == Line(E, midpoint(B, D))
By median_definition on midpoint(C, D), G, H, Line(C, D) we get Line(C, D) == median(midpoint(C, D), G, H)
By line_intersection_definition on C, radical_axis(Circle(C, D, E), Circle(C, H, J)), h we get C == line_intersection(h, radical_axis(Circle(C, D, E), Circle(C, H, J)))
By median_definition on F, G, H, Line(D, F) we get Line(D, F) == median(F, G, H)
By line_intersection_definition on C, radical_axis(Circle(C, D, E), Circle(C, H, J)), Line(C, H) we get C == line_intersection(Line(C, H), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By median_definition on B, G, H, j we get j == median(B, G, H)
By median_definition on F, D, A, Line(F, midpoint(A, D)) we get median(F, A, D) == Line(F, midpoint(A, D))
By median_definition on midpoint(A, D), G, H, i we get i == median(midpoint(A, D), G, H)
By median_definition on E, G, H, Line(D, E) we get Line(D, E) == median(E, G, H)
By line_intersection_definition on C, radical_axis(Circle(C, D, E), Circle(C, H, J)), l we get C == line_intersection(l, radical_axis(Circle(C, D, E), Circle(C, H, J)))
By line_intersection_definition on C, radical_axis(Circle(C, D, E), Circle(C, H, J)), Line(C, D) we get C == line_intersection(Line(C, D), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By median_definition on A, H, G, i we get i == median(A, G, H)
By projection_definition on midpoint(A, D), midpoint(F, G), Line(F, G) we get midpoint(F, G) == projection(midpoint(A, D), Line(F, G))
By projection_definition on midpoint(B, D), midpoint(E, G), Line(E, G) we get midpoint(E, G) == projection(midpoint(B, D), Line(E, G))
By between_imply_not_between on B, midpoint(B, D), D we get collinear_and_not_between(D, B, midpoint(B, D))
By between_imply_not_between on A, midpoint(A, D), D we get collinear_and_not_between(D, A, midpoint(A, D))
By between_imply_not_between on D, midpoint(A, D), A we get collinear_and_not_between(A, D, midpoint(A, D))
By between_imply_not_between on D, midpoint(B, D), B we get collinear_and_not_between(B, D, midpoint(B, D))
By perpendicular_direction_conditions_v0_r on midpoint(E, G), midpoint(B, D), G, midpoint(E, G) we get 180 == 2 * direction(midpoint(E, G), midpoint(B, D)) - 2 * direction(G, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(E, G), midpoint(E, G), midpoint(B, D) we get 180 == 2 * direction(G, midpoint(E, G)) - 2 * direction(midpoint(E, G), midpoint(B, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), midpoint(F, G), midpoint(F, G), G we get 180 == 2 * direction(midpoint(A, D), midpoint(F, G)) - 2 * direction(midpoint(F, G), G) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(E, G), midpoint(B, D), midpoint(E, G) we get 180 == 2 * direction(G, midpoint(E, G)) - 2 * direction(midpoint(B, D), midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, G), G, midpoint(A, D), midpoint(F, G) we get 180 == 2 * direction(midpoint(F, G), G) - 2 * direction(midpoint(A, D), midpoint(F, G)) mod 360
By similar_triangle_basic_properties on midpoint(C, D), D, E, C, F, E we get angle(C, F, E) == angle(midpoint(C, D), D, E) mod 360, angle(F, E, C) == angle(D, E, midpoint(C, D)) mod 360, angle(E, C, F) == angle(E, midpoint(C, D), D) mod 360, log(distance(C, F)) + log(distance(D, E)) == log(distance(D, midpoint(C, D))) + log(distance(E, F)), log(distance(D, E)) + log(distance(C, E)) == log(distance(E, F)) + log(distance(E, midpoint(C, D))), log(distance(C, E)) + log(distance(D, midpoint(C, D))) == log(distance(E, midpoint(C, D))) + log(distance(C, F))
By perpendicular_direction_conditions_v0_r on midpoint(B, D), midpoint(E, G), E, midpoint(E, G) we get 180 == 2 * direction(midpoint(B, D), midpoint(E, G)) - 2 * direction(E, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(F, G), midpoint(F, G), midpoint(A, D) we get 180 == 2 * direction(F, midpoint(F, G)) - 2 * direction(midpoint(F, G), midpoint(A, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, G), midpoint(A, D), F, G we get 180 == 2 * direction(midpoint(F, G), midpoint(A, D)) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), E, midpoint(B, D), midpoint(E, G) we get 180 == 2 * direction(midpoint(E, G), E) - 2 * direction(midpoint(B, D), midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, G), midpoint(A, D), G, F we get 180 == 2 * direction(midpoint(F, G), midpoint(A, D)) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), midpoint(F, G), F, G we get 180 == 2 * direction(midpoint(A, D), midpoint(F, G)) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, G), midpoint(A, D), G, midpoint(F, G) we get 180 == 2 * direction(midpoint(F, G), midpoint(A, D)) - 2 * direction(G, midpoint(F, G)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(F, G), midpoint(A, D), midpoint(F, G) we get 180 == 2 * direction(F, midpoint(F, G)) - 2 * direction(midpoint(A, D), midpoint(F, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, G), F, midpoint(F, G), midpoint(A, D) we get 180 == 2 * direction(midpoint(F, G), F) - 2 * direction(midpoint(F, G), midpoint(A, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, G), midpoint(A, D), F, midpoint(F, G) we get 180 == 2 * direction(midpoint(F, G), midpoint(A, D)) - 2 * direction(F, midpoint(F, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), midpoint(B, D), midpoint(E, G), G we get 180 == 2 * direction(midpoint(E, G), midpoint(B, D)) - 2 * direction(midpoint(E, G), G) mod 360
By perpendicular_direction_conditions_v0_r on G, F, midpoint(F, G), midpoint(A, D) we get 180 == 2 * direction(G, F) - 2 * direction(midpoint(F, G), midpoint(A, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, F, midpoint(A, D), midpoint(F, G) we get 180 == 2 * direction(G, F) - 2 * direction(midpoint(A, D), midpoint(F, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), G, midpoint(E, G), midpoint(B, D) we get 180 == 2 * direction(midpoint(E, G), G) - 2 * direction(midpoint(E, G), midpoint(B, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(F, G), midpoint(A, D), midpoint(F, G) we get 180 == 2 * direction(G, midpoint(F, G)) - 2 * direction(midpoint(A, D), midpoint(F, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), midpoint(F, G), G, midpoint(F, G) we get 180 == 2 * direction(midpoint(A, D), midpoint(F, G)) - 2 * direction(G, midpoint(F, G)) mod 360
By anti_similar_triangle_basic_properties on D, E, F, midpoint(C, D), C, E we get angle(D, E, F) == 0 - angle(midpoint(C, D), C, E) mod 360, angle(E, F, D) == 0 - angle(C, E, midpoint(C, D)) mod 360, angle(F, D, E) == 0 - angle(E, midpoint(C, D), C) mod 360, log(distance(D, E)) + log(distance(C, E)) == log(distance(C, midpoint(C, D))) + log(distance(E, F)), log(distance(C, E)) + log(distance(D, F)) == log(distance(E, F)) + log(distance(E, midpoint(C, D))), log(distance(D, F)) + log(distance(C, midpoint(C, D))) == log(distance(E, midpoint(C, D))) + log(distance(D, E))
By perpendicular_direction_conditions_v0_r on midpoint(F, G), F, midpoint(A, D), midpoint(F, G) we get 180 == 2 * direction(midpoint(F, G), F) - 2 * direction(midpoint(A, D), midpoint(F, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, D), midpoint(E, G), midpoint(E, G), E we get 180 == 2 * direction(midpoint(B, D), midpoint(E, G)) - 2 * direction(midpoint(E, G), E) mod 360
By anti_similar_triangle_basic_properties on G, midpoint(A, D), D, F, D, H we get 0 - angle(F, D, H) == angle(G, midpoint(A, D), D) mod 360, 0 - angle(D, H, F) == angle(midpoint(A, D), D, G) mod 360, 0 - angle(H, F, D) == angle(D, G, midpoint(A, D)) mod 360, log(distance(D, F)) + log(distance(D, midpoint(A, D))) == log(distance(G, midpoint(A, D))) + log(distance(D, H)), log(distance(D, H)) + log(distance(D, G)) == log(distance(D, midpoint(A, D))) + log(distance(F, H)), log(distance(D, G)) + log(distance(D, F)) == log(distance(F, H)) + log(distance(G, midpoint(A, D)))
By perpendicular_direction_conditions_v0_r on E, G, midpoint(B, D), midpoint(E, G) we get 180 == 2 * direction(E, G) - 2 * direction(midpoint(B, D), midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, D), midpoint(E, G), G, E we get 180 == 2 * direction(midpoint(B, D), midpoint(E, G)) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, D), midpoint(E, G), midpoint(E, G), G we get 180 == 2 * direction(midpoint(B, D), midpoint(E, G)) - 2 * direction(midpoint(E, G), G) mod 360
By perpendicular_direction_conditions_v0_r on G, E, midpoint(B, D), midpoint(E, G) we get 180 == 2 * direction(G, E) - 2 * direction(midpoint(B, D), midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), midpoint(F, G), midpoint(F, G), F we get 180 == 2 * direction(midpoint(A, D), midpoint(F, G)) - 2 * direction(midpoint(F, G), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), midpoint(B, D), G, E we get 180 == 2 * direction(midpoint(E, G), midpoint(B, D)) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, D), midpoint(E, G), G, midpoint(E, G) we get 180 == 2 * direction(midpoint(B, D), midpoint(E, G)) - 2 * direction(G, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), midpoint(B, D), E, midpoint(E, G) we get 180 == 2 * direction(midpoint(E, G), midpoint(B, D)) - 2 * direction(E, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, G), midpoint(A, D), midpoint(F, G), G we get 180 == 2 * direction(midpoint(F, G), midpoint(A, D)) - 2 * direction(midpoint(F, G), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, G), G, midpoint(F, G), midpoint(A, D) we get 180 == 2 * direction(midpoint(F, G), G) - 2 * direction(midpoint(F, G), midpoint(A, D)) mod 360
By perpendicular_direction_conditions_v0_r on F, G, midpoint(F, G), midpoint(A, D) we get 180 == 2 * direction(F, G) - 2 * direction(midpoint(F, G), midpoint(A, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, G), midpoint(A, D), midpoint(F, G), F we get 180 == 2 * direction(midpoint(F, G), midpoint(A, D)) - 2 * direction(midpoint(F, G), F) mod 360
By perpendicular_direction_conditions_v0_r on E, G, midpoint(E, G), midpoint(B, D) we get 180 == 2 * direction(E, G) - 2 * direction(midpoint(E, G), midpoint(B, D)) mod 360
By perpendicular_direction_conditions_v0_r on F, G, midpoint(A, D), midpoint(F, G) we get 180 == 2 * direction(F, G) - 2 * direction(midpoint(A, D), midpoint(F, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), G, midpoint(B, D), midpoint(E, G) we get 180 == 2 * direction(midpoint(E, G), G) - 2 * direction(midpoint(B, D), midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), midpoint(B, D), midpoint(E, G), E we get 180 == 2 * direction(midpoint(E, G), midpoint(B, D)) - 2 * direction(midpoint(E, G), E) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, G), midpoint(B, D), midpoint(E, G) we get 180 == 2 * direction(E, midpoint(E, G)) - 2 * direction(midpoint(B, D), midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, G), midpoint(E, G), midpoint(B, D) we get 180 == 2 * direction(E, midpoint(E, G)) - 2 * direction(midpoint(E, G), midpoint(B, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, E, midpoint(E, G), midpoint(B, D) we get 180 == 2 * direction(G, E) - 2 * direction(midpoint(E, G), midpoint(B, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), midpoint(F, G), F, midpoint(F, G) we get 180 == 2 * direction(midpoint(A, D), midpoint(F, G)) - 2 * direction(F, midpoint(F, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), midpoint(B, D), E, G we get 180 == 2 * direction(midpoint(E, G), midpoint(B, D)) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), E, midpoint(E, G), midpoint(B, D) we get 180 == 2 * direction(midpoint(E, G), E) - 2 * direction(midpoint(E, G), midpoint(B, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, D), midpoint(F, G), G, F we get 180 == 2 * direction(midpoint(A, D), midpoint(F, G)) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, D), midpoint(E, G), E, G we get 180 == 2 * direction(midpoint(B, D), midpoint(E, G)) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(F, G), midpoint(F, G), midpoint(A, D) we get 180 == 2 * direction(G, midpoint(F, G)) - 2 * direction(midpoint(F, G), midpoint(A, D)) mod 360
By anti_similar_triangle_basic_properties on G, A, F, F, midpoint(A, D), D we get angle(G, A, F) == 0 - angle(F, midpoint(A, D), D) mod 360, angle(A, F, G) == 0 - angle(midpoint(A, D), D, F) mod 360, angle(F, G, A) == 0 - angle(D, F, midpoint(A, D)) mod 360, log(distance(A, G)) + log(distance(D, midpoint(A, D))) == log(distance(F, midpoint(A, D))) + log(distance(A, F)), log(distance(A, F)) + log(distance(D, F)) == log(distance(D, midpoint(A, D))) + log(distance(F, G)), log(distance(D, F)) + log(distance(A, G)) == log(distance(F, G)) + log(distance(F, midpoint(A, D)))
By asa_anti_congruence on midpoint(F, G), A, G, midpoint(F, G), A, F we get anti_congruent_triangles(A, F, midpoint(F, G), A, G, midpoint(F, G))
By aa_anti_similarity on E, midpoint(E, G), D, G, midpoint(E, G), D we get anti_similar_triangles(D, E, midpoint(E, G), D, G, midpoint(E, G))
By sas_anti_similarity on midpoint(F, G), A, G, midpoint(F, G), A, F we get anti_similar_triangles(A, F, midpoint(F, G), A, G, midpoint(F, G))
By log_of_2_times_distance on H, G, D, G we get log(distance(G, H)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(D, G))
By anti_similar_triangle_basic_properties on D, midpoint(B, D), E, E, B, G we get 0 - angle(E, B, G) == angle(D, midpoint(B, D), E) mod 360, 0 - angle(B, G, E) == angle(midpoint(B, D), E, D) mod 360, 0 - angle(G, E, B) == angle(E, D, midpoint(B, D)) mod 360, log(distance(B, E)) + log(distance(E, midpoint(B, D))) == log(distance(D, midpoint(B, D))) + log(distance(B, G)), log(distance(B, G)) + log(distance(D, E)) == log(distance(E, midpoint(B, D))) + log(distance(E, G)), log(distance(D, E)) + log(distance(B, E)) == log(distance(E, G)) + log(distance(D, midpoint(B, D)))
By reverse_direction on G, midpoint(F, G) we get 180 == direction(G, midpoint(F, G)) - direction(midpoint(F, G), G) mod 360
By anti_similar_triangle_basic_properties on midpoint(A, D), F, A, D, G, F we get 0 - angle(D, G, F) == angle(midpoint(A, D), F, A) mod 360, 0 - angle(G, F, D) == angle(F, A, midpoint(A, D)) mod 360, 0 - angle(F, D, G) == angle(A, midpoint(A, D), F) mod 360, log(distance(D, G)) + log(distance(A, F)) == log(distance(F, midpoint(A, D))) + log(distance(F, G)), log(distance(A, F)) + log(distance(D, F)) == log(distance(F, G)) + log(distance(A, midpoint(A, D))), log(distance(A, midpoint(A, D))) + log(distance(D, G)) == log(distance(D, F)) + log(distance(F, midpoint(A, D)))
By similar_triangle_basic_properties on F, C, midpoint(C, D), F, E, D we get angle(F, E, D) == angle(F, C, midpoint(C, D)) mod 360, angle(E, D, F) == angle(C, midpoint(C, D), F) mod 360, angle(D, F, E) == angle(midpoint(C, D), F, C) mod 360, log(distance(C, F)) + log(distance(D, E)) == log(distance(E, F)) + log(distance(C, midpoint(C, D))), log(distance(C, midpoint(C, D))) + log(distance(D, F)) == log(distance(D, E)) + log(distance(F, midpoint(C, D))), log(distance(D, F)) + log(distance(C, F)) == log(distance(F, midpoint(C, D))) + log(distance(E, F))
By similar_triangle_basic_properties on H, F, D, D, F, midpoint(A, D) we get angle(H, F, D) == angle(D, F, midpoint(A, D)) mod 360, angle(F, D, H) == angle(F, midpoint(A, D), D) mod 360, angle(D, H, F) == angle(midpoint(A, D), D, F) mod 360, log(distance(D, F)) + log(distance(D, F)) == log(distance(F, H)) + log(distance(F, midpoint(A, D))), log(distance(D, F)) + log(distance(D, midpoint(A, D))) == log(distance(F, midpoint(A, D))) + log(distance(D, H)), log(distance(D, H)) + log(distance(D, F)) == log(distance(D, midpoint(A, D))) + log(distance(F, H))
By anti_similar_triangle_basic_properties on H, E, D, D, G, midpoint(B, D) we get angle(H, E, D) == 0 - angle(D, G, midpoint(B, D)) mod 360, angle(E, D, H) == 0 - angle(G, midpoint(B, D), D) mod 360, angle(D, H, E) == 0 - angle(midpoint(B, D), D, G) mod 360, log(distance(D, G)) + log(distance(D, E)) == log(distance(E, H)) + log(distance(G, midpoint(B, D))), log(distance(D, E)) + log(distance(D, midpoint(B, D))) == log(distance(G, midpoint(B, D))) + log(distance(D, H)), log(distance(D, H)) + log(distance(D, G)) == log(distance(D, midpoint(B, D))) + log(distance(E, H))
By similar_triangle_basic_properties on D, midpoint(A, D), G, F, D, H we get angle(F, D, H) == angle(D, midpoint(A, D), G) mod 360, angle(D, H, F) == angle(midpoint(A, D), G, D) mod 360, angle(H, F, D) == angle(G, D, midpoint(A, D)) mod 360, log(distance(D, F)) + log(distance(G, midpoint(A, D))) == log(distance(D, midpoint(A, D))) + log(distance(D, H)), log(distance(D, H)) + log(distance(D, G)) == log(distance(G, midpoint(A, D))) + log(distance(F, H)), log(distance(D, G)) + log(distance(D, F)) == log(distance(F, H)) + log(distance(D, midpoint(A, D)))
By aa_anti_similarity on E, D, midpoint(E, G), G, D, midpoint(E, G) we get anti_similar_triangles(D, E, midpoint(E, G), D, G, midpoint(E, G))
By similar_triangle_basic_properties on G, A, midpoint(A, D), G, F, D we get angle(G, F, D) == angle(G, A, midpoint(A, D)) mod 360, angle(F, D, G) == angle(A, midpoint(A, D), G) mod 360, angle(D, G, F) == angle(midpoint(A, D), G, A) mod 360, log(distance(A, G)) + log(distance(D, F)) == log(distance(F, G)) + log(distance(A, midpoint(A, D))), log(distance(A, midpoint(A, D))) + log(distance(D, G)) == log(distance(D, F)) + log(distance(G, midpoint(A, D))), log(distance(D, G)) + log(distance(A, G)) == log(distance(G, midpoint(A, D))) + log(distance(F, G))
By anti_similar_triangle_basic_properties on E, B, midpoint(B, D), G, E, D we get 0 - angle(G, E, D) == angle(E, B, midpoint(B, D)) mod 360, 0 - angle(E, D, G) == angle(B, midpoint(B, D), E) mod 360, 0 - angle(D, G, E) == angle(midpoint(B, D), E, B) mod 360, log(distance(B, E)) + log(distance(D, E)) == log(distance(E, G)) + log(distance(B, midpoint(B, D))), log(distance(B, midpoint(B, D))) + log(distance(D, G)) == log(distance(D, E)) + log(distance(E, midpoint(B, D))), log(distance(D, G)) + log(distance(B, E)) == log(distance(E, midpoint(B, D))) + log(distance(E, G))
By anti_similar_triangle_basic_properties on A, F, G, midpoint(A, D), G, D we get angle(A, F, G) == 0 - angle(midpoint(A, D), G, D) mod 360, angle(F, G, A) == 0 - angle(G, D, midpoint(A, D)) mod 360, angle(G, A, F) == 0 - angle(D, midpoint(A, D), G) mod 360, log(distance(A, F)) + log(distance(D, G)) == log(distance(G, midpoint(A, D))) + log(distance(F, G)), log(distance(D, G)) + log(distance(A, G)) == log(distance(F, G)) + log(distance(D, midpoint(A, D))), log(distance(A, G)) + log(distance(G, midpoint(A, D))) == log(distance(D, midpoint(A, D))) + log(distance(A, F))
By similar_triangle_basic_properties on D, G, midpoint(B, D), E, H, D we get angle(E, H, D) == angle(D, G, midpoint(B, D)) mod 360, angle(H, D, E) == angle(G, midpoint(B, D), D) mod 360, angle(D, E, H) == angle(midpoint(B, D), D, G) mod 360, log(distance(D, G)) + log(distance(D, H)) == log(distance(E, H)) + log(distance(G, midpoint(B, D))), log(distance(D, H)) + log(distance(D, midpoint(B, D))) == log(distance(G, midpoint(B, D))) + log(distance(D, E)), log(distance(D, E)) + log(distance(D, G)) == log(distance(D, midpoint(B, D))) + log(distance(E, H))
By sas_anti_similarity on midpoint(E, G), B, E, midpoint(E, G), B, G we get anti_similar_triangles(B, E, midpoint(E, G), B, G, midpoint(E, G))
By similar_triangle_basic_properties on E, H, D, E, D, midpoint(B, D) we get angle(E, H, D) == angle(E, D, midpoint(B, D)) mod 360, angle(H, D, E) == angle(D, midpoint(B, D), E) mod 360, angle(D, E, H) == angle(midpoint(B, D), E, D) mod 360, log(distance(D, E)) + log(distance(D, H)) == log(distance(E, H)) + log(distance(D, midpoint(B, D))), log(distance(D, H)) + log(distance(E, midpoint(B, D))) == log(distance(D, midpoint(B, D))) + log(distance(D, E)), log(distance(D, E)) + log(distance(D, E)) == log(distance(E, midpoint(B, D))) + log(distance(E, H))
By log_of_2_times_distance on B, D, E, midpoint(B, D) we get log(distance(B, D)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(E, midpoint(B, D)))
By reverse_direction on midpoint(E, G), B we get 180 == direction(midpoint(E, G), B) - direction(B, midpoint(E, G)) mod 360
By external_angle_bisector_definition_v0 on H, midpoint(F, G), F, D we get 180 == angle(H, D, midpoint(F, G)) + angle(F, D, midpoint(F, G)) mod 360
By anti_similar_triangle_basic_properties on D, E, G, midpoint(B, D), G, B we get angle(D, E, G) == 0 - angle(midpoint(B, D), G, B) mod 360, angle(E, G, D) == 0 - angle(G, B, midpoint(B, D)) mod 360, angle(G, D, E) == 0 - angle(B, midpoint(B, D), G) mod 360, log(distance(D, E)) + log(distance(B, G)) == log(distance(G, midpoint(B, D))) + log(distance(E, G)), log(distance(B, G)) + log(distance(D, G)) == log(distance(E, G)) + log(distance(B, midpoint(B, D))), log(distance(B, midpoint(B, D))) + log(distance(D, E)) == log(distance(D, G)) + log(distance(G, midpoint(B, D)))
By sas_anti_congruence on midpoint(E, G), D, E, midpoint(E, G), D, G we get anti_congruent_triangles(D, E, midpoint(E, G), D, G, midpoint(E, G))
By anti_similar_triangle_basic_properties on E, D, H, D, midpoint(B, D), E we get angle(E, D, H) == 0 - angle(D, midpoint(B, D), E) mod 360, angle(D, H, E) == 0 - angle(midpoint(B, D), E, D) mod 360, angle(H, E, D) == 0 - angle(E, D, midpoint(B, D)) mod 360, log(distance(D, E)) + log(distance(E, midpoint(B, D))) == log(distance(D, midpoint(B, D))) + log(distance(D, H)), log(distance(D, H)) + log(distance(D, E)) == log(distance(E, midpoint(B, D))) + log(distance(E, H)), log(distance(D, E)) + log(distance(D, E)) == log(distance(E, H)) + log(distance(D, midpoint(B, D)))
By anti_similar_triangle_basic_properties on E, midpoint(C, D), D, F, C, E we get 0 - angle(F, C, E) == angle(E, midpoint(C, D), D) mod 360, 0 - angle(C, E, F) == angle(midpoint(C, D), D, E) mod 360, 0 - angle(E, F, C) == angle(D, E, midpoint(C, D)) mod 360, log(distance(C, F)) + log(distance(D, midpoint(C, D))) == log(distance(E, midpoint(C, D))) + log(distance(C, E)), log(distance(C, E)) + log(distance(D, E)) == log(distance(D, midpoint(C, D))) + log(distance(E, F)), log(distance(D, E)) + log(distance(C, F)) == log(distance(E, F)) + log(distance(E, midpoint(C, D)))
By similar_triangle_basic_properties on D, G, E, midpoint(B, D), G, B we get angle(D, G, E) == angle(midpoint(B, D), G, B) mod 360, angle(G, E, D) == angle(G, B, midpoint(B, D)) mod 360, angle(E, D, G) == angle(B, midpoint(B, D), G) mod 360, log(distance(D, G)) + log(distance(B, G)) == log(distance(G, midpoint(B, D))) + log(distance(E, G)), log(distance(B, G)) + log(distance(D, E)) == log(distance(E, G)) + log(distance(B, midpoint(B, D))), log(distance(B, midpoint(B, D))) + log(distance(D, G)) == log(distance(D, E)) + log(distance(G, midpoint(B, D)))
By reverse_direction on K, projection(I, f) we get 180 == direction(K, projection(I, f)) - direction(projection(I, f), K) mod 360
By anti_similar_triangle_basic_properties on C, E, F, midpoint(C, D), F, D we get angle(C, E, F) == 0 - angle(midpoint(C, D), F, D) mod 360, angle(E, F, C) == 0 - angle(F, D, midpoint(C, D)) mod 360, angle(F, C, E) == 0 - angle(D, midpoint(C, D), F) mod 360, log(distance(C, E)) + log(distance(D, F)) == log(distance(F, midpoint(C, D))) + log(distance(E, F)), log(distance(D, F)) + log(distance(C, F)) == log(distance(E, F)) + log(distance(D, midpoint(C, D))), log(distance(C, F)) + log(distance(F, midpoint(C, D))) == log(distance(D, midpoint(C, D))) + log(distance(C, E))
By sas_anti_similarity on E, midpoint(E, G), D, G, midpoint(E, G), D we get anti_similar_triangles(D, E, midpoint(E, G), D, G, midpoint(E, G))
By log_of_2_times_distance on B, D, D, midpoint(B, D) we get log(distance(B, D)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(D, midpoint(B, D)))
By sas_anti_similarity on E, D, midpoint(E, G), G, D, midpoint(E, G) we get anti_similar_triangles(D, E, midpoint(E, G), D, G, midpoint(E, G))
By asa_anti_congruence on midpoint(E, G), B, G, midpoint(E, G), B, E we get anti_congruent_triangles(B, E, midpoint(E, G), B, G, midpoint(E, G))
By similar_triangle_basic_properties on F, G, A, F, D, midpoint(A, D) we get angle(F, G, A) == angle(F, D, midpoint(A, D)) mod 360, angle(G, A, F) == angle(D, midpoint(A, D), F) mod 360, angle(A, F, G) == angle(midpoint(A, D), F, D) mod 360, log(distance(D, F)) + log(distance(A, G)) == log(distance(F, G)) + log(distance(D, midpoint(A, D))), log(distance(A, G)) + log(distance(F, midpoint(A, D))) == log(distance(D, midpoint(A, D))) + log(distance(A, F)), log(distance(A, F)) + log(distance(D, F)) == log(distance(F, midpoint(A, D))) + log(distance(F, G))
By similar_triangle_basic_properties on E, F, C, D, F, midpoint(C, D) we get angle(E, F, C) == angle(D, F, midpoint(C, D)) mod 360, angle(F, C, E) == angle(F, midpoint(C, D), D) mod 360, angle(C, E, F) == angle(midpoint(C, D), D, F) mod 360, log(distance(D, F)) + log(distance(C, F)) == log(distance(E, F)) + log(distance(F, midpoint(C, D))), log(distance(C, F)) + log(distance(D, midpoint(C, D))) == log(distance(F, midpoint(C, D))) + log(distance(C, E)), log(distance(C, E)) + log(distance(D, F)) == log(distance(D, midpoint(C, D))) + log(distance(E, F))
By asa_anti_congruence on D, midpoint(E, G), G, D, midpoint(E, G), E we get anti_congruent_triangles(D, E, midpoint(E, G), D, G, midpoint(E, G))
By anti_similar_triangle_basic_properties on G, B, E, D, midpoint(B, D), G we get angle(G, B, E) == 0 - angle(D, midpoint(B, D), G) mod 360, angle(B, E, G) == 0 - angle(midpoint(B, D), G, D) mod 360, angle(E, G, B) == 0 - angle(G, D, midpoint(B, D)) mod 360, log(distance(B, G)) + log(distance(G, midpoint(B, D))) == log(distance(D, midpoint(B, D))) + log(distance(B, E)), log(distance(B, E)) + log(distance(D, G)) == log(distance(G, midpoint(B, D))) + log(distance(E, G)), log(distance(D, G)) + log(distance(B, G)) == log(distance(E, G)) + log(distance(D, midpoint(B, D)))
By log_of_2_times_distance on H, G, F, D we get log(distance(G, H)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(D, F))
By anti_similar_triangle_basic_properties on midpoint(C, D), C, F, D, F, E we get 0 - angle(D, F, E) == angle(midpoint(C, D), C, F) mod 360, 0 - angle(F, E, D) == angle(C, F, midpoint(C, D)) mod 360, 0 - angle(E, D, F) == angle(F, midpoint(C, D), C) mod 360, log(distance(D, F)) + log(distance(C, F)) == log(distance(C, midpoint(C, D))) + log(distance(E, F)), log(distance(C, F)) + log(distance(D, E)) == log(distance(E, F)) + log(distance(F, midpoint(C, D))), log(distance(D, E)) + log(distance(C, midpoint(C, D))) == log(distance(F, midpoint(C, D))) + log(distance(D, F))
By sas_anti_congruence on G, midpoint(F, G), D, F, midpoint(F, G), D we get anti_congruent_triangles(D, F, midpoint(F, G), D, G, midpoint(F, G))
By internal_angle_bisector_definition_v0 on midpoint(A, D), midpoint(F, G), midpoint(A, D), A we get angle(midpoint(A, D), A, midpoint(F, G)) == angle(midpoint(F, G), A, midpoint(A, D)) mod 360
By sas_anti_congruence on E, midpoint(E, G), B, G, midpoint(E, G), B we get anti_congruent_triangles(B, E, midpoint(E, G), B, G, midpoint(E, G))
By sas_anti_congruence on F, A, midpoint(F, G), G, A, midpoint(F, G) we get anti_congruent_triangles(A, F, midpoint(F, G), A, G, midpoint(F, G))
By similar_triangle_basic_properties on E, D, F, E, midpoint(C, D), C we get angle(E, D, F) == angle(E, midpoint(C, D), C) mod 360, angle(D, F, E) == angle(midpoint(C, D), C, E) mod 360, angle(F, E, D) == angle(C, E, midpoint(C, D)) mod 360, log(distance(D, E)) + log(distance(C, midpoint(C, D))) == log(distance(E, midpoint(C, D))) + log(distance(D, F)), log(distance(D, F)) + log(distance(C, E)) == log(distance(C, midpoint(C, D))) + log(distance(E, F)), log(distance(C, E)) + log(distance(D, E)) == log(distance(E, F)) + log(distance(E, midpoint(C, D)))
By reverse_direction on midpoint(E, G), G we get 180 == direction(midpoint(E, G), G) - direction(G, midpoint(E, G)) mod 360
By sas_anti_similarity on G, B, midpoint(E, G), E, B, midpoint(E, G) we get anti_similar_triangles(B, E, midpoint(E, G), B, G, midpoint(E, G))
By similar_triangle_basic_properties on E, midpoint(B, D), B, E, D, G we get angle(E, D, G) == angle(E, midpoint(B, D), B) mod 360, angle(D, G, E) == angle(midpoint(B, D), B, E) mod 360, angle(G, E, D) == angle(B, E, midpoint(B, D)) mod 360, log(distance(D, E)) + log(distance(B, midpoint(B, D))) == log(distance(E, midpoint(B, D))) + log(distance(D, G)), log(distance(D, G)) + log(distance(B, E)) == log(distance(B, midpoint(B, D))) + log(distance(E, G)), log(distance(B, E)) + log(distance(D, E)) == log(distance(E, G)) + log(distance(E, midpoint(B, D)))
By anti_similar_triangle_basic_properties on midpoint(A, D), D, F, D, F, H we get 0 - angle(D, F, H) == angle(midpoint(A, D), D, F) mod 360, 0 - angle(F, H, D) == angle(D, F, midpoint(A, D)) mod 360, 0 - angle(H, D, F) == angle(F, midpoint(A, D), D) mod 360, log(distance(D, F)) + log(distance(D, F)) == log(distance(D, midpoint(A, D))) + log(distance(F, H)), log(distance(D, F)) + log(distance(D, H)) == log(distance(F, H)) + log(distance(F, midpoint(A, D))), log(distance(D, H)) + log(distance(D, midpoint(A, D))) == log(distance(F, midpoint(A, D))) + log(distance(D, F))
By sas_anti_congruence on F, midpoint(F, G), A, G, midpoint(F, G), A we get anti_congruent_triangles(A, F, midpoint(F, G), A, G, midpoint(F, G))
By reverse_direction on B, projection(I, f) we get 180 == direction(B, projection(I, f)) - direction(projection(I, f), B) mod 360
By sas_anti_similarity on D, midpoint(E, G), E, D, midpoint(E, G), G we get anti_similar_triangles(D, E, midpoint(E, G), D, G, midpoint(E, G))
By log_of_2_times_distance on A, D, midpoint(A, D), G we get log(distance(A, D)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(G, midpoint(A, D)))
By sas_anti_congruence on midpoint(F, G), A, G, midpoint(F, G), A, F we get anti_congruent_triangles(A, F, midpoint(F, G), A, G, midpoint(F, G))
By sas_anti_congruence on D, midpoint(F, G), G, D, midpoint(F, G), F we get anti_congruent_triangles(D, F, midpoint(F, G), D, G, midpoint(F, G))
By aa_anti_similarity on E, B, midpoint(E, G), G, B, midpoint(E, G) we get anti_similar_triangles(B, E, midpoint(E, G), B, G, midpoint(E, G))
By sas_anti_similarity on B, midpoint(E, G), E, B, midpoint(E, G), G we get anti_similar_triangles(B, E, midpoint(E, G), B, G, midpoint(E, G))
By collinear_definition on B, midpoint(B, D), midpoint(E, G) we get midpoint(B, D) in Line(B, midpoint(E, G)), midpoint(E, G) in Line(B, midpoint(B, D)), Line(B, midpoint(B, D)) == Line(B, midpoint(E, G)), 0 == 2 * angle(midpoint(B, D), B, midpoint(E, G)) mod 360
By sas_anti_congruence on B, midpoint(E, G), E, B, midpoint(E, G), G we get anti_congruent_triangles(B, E, midpoint(E, G), B, G, midpoint(E, G))
By similar_triangle_basic_properties on G, D, midpoint(B, D), G, E, B we get angle(G, E, B) == angle(G, D, midpoint(B, D)) mod 360, angle(E, B, G) == angle(D, midpoint(B, D), G) mod 360, angle(B, G, E) == angle(midpoint(B, D), G, D) mod 360, log(distance(D, G)) + log(distance(B, E)) == log(distance(E, G)) + log(distance(D, midpoint(B, D))), log(distance(B, E)) + log(distance(G, midpoint(B, D))) == log(distance(D, midpoint(B, D))) + log(distance(B, G)), log(distance(B, G)) + log(distance(D, G)) == log(distance(G, midpoint(B, D))) + log(distance(E, G))
By asa_anti_congruence on A, midpoint(F, G), F, A, midpoint(F, G), G we get anti_congruent_triangles(A, F, midpoint(F, G), A, G, midpoint(F, G))
By log_of_2_times_distance on D, B, midpoint(B, D), B we get log(distance(B, D)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(B, midpoint(B, D)))
By similar_triangle_basic_properties on D, E, midpoint(B, D), G, E, B we get angle(G, E, B) == angle(D, E, midpoint(B, D)) mod 360, angle(E, B, G) == angle(E, midpoint(B, D), D) mod 360, angle(B, G, E) == angle(midpoint(B, D), D, E) mod 360, log(distance(D, E)) + log(distance(B, E)) == log(distance(E, G)) + log(distance(E, midpoint(B, D))), log(distance(B, E)) + log(distance(D, midpoint(B, D))) == log(distance(E, midpoint(B, D))) + log(distance(B, G)), log(distance(B, G)) + log(distance(D, E)) == log(distance(D, midpoint(B, D))) + log(distance(E, G))
By asa_anti_congruence on D, midpoint(E, G), E, D, midpoint(E, G), G we get anti_congruent_triangles(D, E, midpoint(E, G), D, G, midpoint(E, G))
By sas_anti_similarity on midpoint(E, G), B, G, midpoint(E, G), B, E we get anti_similar_triangles(B, E, midpoint(E, G), B, G, midpoint(E, G))
By sas_anti_similarity on B, midpoint(E, G), G, B, midpoint(E, G), E we get anti_similar_triangles(B, E, midpoint(E, G), B, G, midpoint(E, G))
By similar_triangle_basic_properties on A, F, G, midpoint(A, D), D, G we get angle(A, F, G) == angle(midpoint(A, D), D, G) mod 360, angle(F, G, A) == angle(D, G, midpoint(A, D)) mod 360, angle(G, A, F) == angle(G, midpoint(A, D), D) mod 360, log(distance(A, F)) + log(distance(D, G)) == log(distance(D, midpoint(A, D))) + log(distance(F, G)), log(distance(D, G)) + log(distance(A, G)) == log(distance(F, G)) + log(distance(G, midpoint(A, D))), log(distance(A, G)) + log(distance(D, midpoint(A, D))) == log(distance(G, midpoint(A, D))) + log(distance(A, F))
By sas_anti_similarity on midpoint(E, G), D, G, midpoint(E, G), D, E we get anti_similar_triangles(D, E, midpoint(E, G), D, G, midpoint(E, G))
By sas_anti_similarity on D, midpoint(E, G), G, D, midpoint(E, G), E we get anti_similar_triangles(D, E, midpoint(E, G), D, G, midpoint(E, G))
By reverse_direction on A, projection(I, f) we get 180 == direction(A, projection(I, f)) - direction(projection(I, f), A) mod 360
By reverse_direction on D, midpoint(E, G) we get 180 == direction(D, midpoint(E, G)) - direction(midpoint(E, G), D) mod 360
By log_of_2_times_distance on H, G, D, E we get log(distance(G, H)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(D, E))
By sas_anti_similarity on E, midpoint(E, G), B, G, midpoint(E, G), B we get anti_similar_triangles(B, E, midpoint(E, G), B, G, midpoint(E, G))
By asa_anti_congruence on D, midpoint(F, G), F, D, midpoint(F, G), G we get anti_congruent_triangles(D, F, midpoint(F, G), D, G, midpoint(F, G))
By reverse_direction on E, midpoint(E, G) we get 180 == direction(E, midpoint(E, G)) - direction(midpoint(E, G), E) mod 360
By similar_triangle_basic_properties on F, A, midpoint(A, D), F, G, D we get angle(F, G, D) == angle(F, A, midpoint(A, D)) mod 360, angle(G, D, F) == angle(A, midpoint(A, D), F) mod 360, angle(D, F, G) == angle(midpoint(A, D), F, A) mod 360, log(distance(A, F)) + log(distance(D, G)) == log(distance(F, G)) + log(distance(A, midpoint(A, D))), log(distance(A, midpoint(A, D))) + log(distance(D, F)) == log(distance(D, G)) + log(distance(F, midpoint(A, D))), log(distance(D, F)) + log(distance(A, F)) == log(distance(F, midpoint(A, D))) + log(distance(F, G))
By aa_anti_similarity on G, midpoint(E, G), D, E, midpoint(E, G), D we get anti_similar_triangles(D, E, midpoint(E, G), D, G, midpoint(E, G))
By external_angle_bisector_definition_v0 on H, midpoint(A, D), F, D we get 180 == angle(H, D, midpoint(A, D)) + angle(F, D, midpoint(A, D)) mod 360
By sas_anti_congruence on A, midpoint(F, G), F, A, midpoint(F, G), G we get anti_congruent_triangles(A, F, midpoint(F, G), A, G, midpoint(F, G))
By reverse_direction on G, projection(I, f) we get 180 == direction(G, projection(I, f)) - direction(projection(I, f), G) mod 360
By sas_anti_similarity on A, midpoint(F, G), F, A, midpoint(F, G), G we get anti_similar_triangles(A, F, midpoint(F, G), A, G, midpoint(F, G))
By sas_anti_congruence on F, midpoint(F, G), D, G, midpoint(F, G), D we get anti_congruent_triangles(D, F, midpoint(F, G), D, G, midpoint(F, G))
By collinear_definition on B, midpoint(E, G), midpoint(B, D) we get midpoint(E, G) in Line(B, midpoint(B, D)), midpoint(B, D) in Line(B, midpoint(E, G)), Line(B, midpoint(B, D)) == Line(B, midpoint(E, G)), 0 == 2 * angle(midpoint(E, G), B, midpoint(B, D)) mod 360
By external_angle_bisector_definition_v0 on H, midpoint(B, D), E, D we get 180 == angle(H, D, midpoint(B, D)) + angle(E, D, midpoint(B, D)) mod 360
By anti_similar_triangle_basic_properties on midpoint(A, D), G, A, D, F, G we get 0 - angle(D, F, G) == angle(midpoint(A, D), G, A) mod 360, 0 - angle(F, G, D) == angle(G, A, midpoint(A, D)) mod 360, 0 - angle(G, D, F) == angle(A, midpoint(A, D), G) mod 360, log(distance(D, F)) + log(distance(A, G)) == log(distance(G, midpoint(A, D))) + log(distance(F, G)), log(distance(A, G)) + log(distance(D, G)) == log(distance(F, G)) + log(distance(A, midpoint(A, D))), log(distance(A, midpoint(A, D))) + log(distance(D, F)) == log(distance(D, G)) + log(distance(G, midpoint(A, D)))
By log_of_2_times_distance on A, D, A, midpoint(A, D) we get log(distance(A, D)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(A, midpoint(A, D)))
By sas_anti_similarity on F, midpoint(F, G), D, G, midpoint(F, G), D we get anti_similar_triangles(D, F, midpoint(F, G), D, G, midpoint(F, G))
By reverse_direction on A, midpoint(F, G) we get 180 == direction(A, midpoint(F, G)) - direction(midpoint(F, G), A) mod 360
By sas_anti_similarity on G, midpoint(E, G), B, E, midpoint(E, G), B we get anti_similar_triangles(B, E, midpoint(E, G), B, G, midpoint(E, G))
By internal_angle_bisector_definition_v0 on midpoint(B, D), midpoint(E, G), midpoint(B, D), D we get angle(midpoint(B, D), D, midpoint(E, G)) == angle(midpoint(E, G), D, midpoint(B, D)) mod 360
By sas_anti_congruence on G, midpoint(E, G), D, E, midpoint(E, G), D we get anti_congruent_triangles(D, E, midpoint(E, G), D, G, midpoint(E, G))
By reverse_direction on projection(I, f), I we get 180 == direction(projection(I, f), I) - direction(I, projection(I, f)) mod 360
By asa_anti_congruence on midpoint(F, G), A, F, midpoint(F, G), A, G we get anti_congruent_triangles(A, F, midpoint(F, G), A, G, midpoint(F, G))
By sas_anti_congruence on midpoint(E, G), D, G, midpoint(E, G), D, E we get anti_congruent_triangles(D, E, midpoint(E, G), D, G, midpoint(E, G))
By internal_angle_bisector_definition_v0 on midpoint(A, D), midpoint(F, G), midpoint(A, D), D we get angle(midpoint(A, D), D, midpoint(F, G)) == angle(midpoint(F, G), D, midpoint(A, D)) mod 360
By reverse_direction on midpoint(F, G), G we get 180 == direction(midpoint(F, G), G) - direction(G, midpoint(F, G)) mod 360
By sas_anti_similarity on G, midpoint(E, G), D, E, midpoint(E, G), D we get anti_similar_triangles(D, E, midpoint(E, G), D, G, midpoint(E, G))
By sas_anti_similarity on F, midpoint(F, G), A, G, midpoint(F, G), A we get anti_similar_triangles(A, F, midpoint(F, G), A, G, midpoint(F, G))
By sas_anti_congruence on midpoint(F, G), A, F, midpoint(F, G), A, G we get anti_congruent_triangles(A, F, midpoint(F, G), A, G, midpoint(F, G))
By aa_anti_similarity on E, midpoint(C, D), midpoint(E, F), F, midpoint(C, D), midpoint(E, F) we get anti_similar_triangles(E, midpoint(C, D), midpoint(E, F), F, midpoint(C, D), midpoint(E, F))
By collinear_definition on A, midpoint(A, D), midpoint(F, G) we get midpoint(A, D) in Line(A, midpoint(F, G)), midpoint(F, G) in Line(A, midpoint(A, D)), Line(A, midpoint(A, D)) == Line(A, midpoint(F, G)), 0 == 2 * angle(midpoint(A, D), A, midpoint(F, G)) mod 360
By aa_anti_similarity on F, midpoint(F, G), A, G, midpoint(F, G), A we get anti_similar_triangles(A, F, midpoint(F, G), A, G, midpoint(F, G))
By sas_anti_similarity on E, B, midpoint(E, G), G, B, midpoint(E, G) we get anti_similar_triangles(B, E, midpoint(E, G), B, G, midpoint(E, G))
By sas_anti_similarity on G, D, midpoint(E, G), E, D, midpoint(E, G) we get anti_similar_triangles(D, E, midpoint(E, G), D, G, midpoint(E, G))
By reverse_direction on midpoint(F, G), D we get 180 == direction(midpoint(F, G), D) - direction(D, midpoint(F, G)) mod 360
By sas_anti_congruence on D, midpoint(E, G), G, D, midpoint(E, G), E we get anti_congruent_triangles(D, E, midpoint(E, G), D, G, midpoint(E, G))
By sas_anti_congruence on G, D, midpoint(E, G), E, D, midpoint(E, G) we get anti_congruent_triangles(D, E, midpoint(E, G), D, G, midpoint(E, G))
By collinear_definition on D, midpoint(F, G), midpoint(A, D) we get midpoint(F, G) in Line(D, midpoint(A, D)), midpoint(A, D) in Line(D, midpoint(F, G)), Line(D, midpoint(A, D)) == Line(D, midpoint(F, G)), 0 == 2 * angle(midpoint(F, G), D, midpoint(A, D)) mod 360
By collinear_definition on D, midpoint(E, G), midpoint(B, D) we get midpoint(E, G) in Line(D, midpoint(B, D)), midpoint(B, D) in Line(D, midpoint(E, G)), Line(D, midpoint(B, D)) == Line(D, midpoint(E, G)), 0 == 2 * angle(midpoint(E, G), D, midpoint(B, D)) mod 360
By internal_angle_bisector_definition_v0 on midpoint(B, D), midpoint(E, G), midpoint(B, D), B we get angle(midpoint(B, D), B, midpoint(E, G)) == angle(midpoint(E, G), B, midpoint(B, D)) mod 360
By sas_anti_congruence on G, B, midpoint(E, G), E, B, midpoint(E, G) we get anti_congruent_triangles(B, E, midpoint(E, G), B, G, midpoint(E, G))
By asa_anti_congruence on midpoint(E, G), B, E, midpoint(E, G), B, G we get anti_congruent_triangles(B, E, midpoint(E, G), B, G, midpoint(E, G))
By sas_anti_congruence on G, A, midpoint(F, G), F, A, midpoint(F, G) we get anti_congruent_triangles(A, F, midpoint(F, G), A, G, midpoint(F, G))
By aa_anti_similarity on G, midpoint(E, G), B, E, midpoint(E, G), B we get anti_similar_triangles(B, E, midpoint(E, G), B, G, midpoint(E, G))
By log_of_2_times_distance on G, H, J, D we get log(distance(G, H)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(D, J))
By sas_anti_congruence on A, midpoint(F, G), G, A, midpoint(F, G), F we get anti_congruent_triangles(A, F, midpoint(F, G), A, G, midpoint(F, G))
By aa_anti_similarity on F, D, midpoint(F, G), G, D, midpoint(F, G) we get anti_similar_triangles(D, F, midpoint(F, G), D, G, midpoint(F, G))
By sas_anti_congruence on midpoint(F, G), D, F, midpoint(F, G), D, G we get anti_congruent_triangles(D, F, midpoint(F, G), D, G, midpoint(F, G))
By log_of_2_times_distance on G, H, H, D we get log(distance(G, H)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(D, H))
By aa_anti_similarity on F, midpoint(E, F), midpoint(C, D), E, midpoint(E, F), midpoint(C, D) we get anti_similar_triangles(E, midpoint(C, D), midpoint(E, F), F, midpoint(C, D), midpoint(E, F))
By asa_anti_congruence on A, midpoint(F, G), G, A, midpoint(F, G), F we get anti_congruent_triangles(A, F, midpoint(F, G), A, G, midpoint(F, G))
By reverse_direction on G, midpoint(E, G) we get 180 == direction(G, midpoint(E, G)) - direction(midpoint(E, G), G) mod 360
By reverse_direction on B, midpoint(E, G) we get 180 == direction(B, midpoint(E, G)) - direction(midpoint(E, G), B) mod 360
By sas_anti_similarity on midpoint(F, G), D, F, midpoint(F, G), D, G we get anti_similar_triangles(D, F, midpoint(F, G), D, G, midpoint(F, G))
By sas_anti_congruence on midpoint(E, G), B, G, midpoint(E, G), B, E we get anti_congruent_triangles(B, E, midpoint(E, G), B, G, midpoint(E, G))
By sas_anti_similarity on F, A, midpoint(F, G), G, A, midpoint(F, G) we get anti_similar_triangles(A, F, midpoint(F, G), A, G, midpoint(F, G))
By sas_anti_similarity on A, midpoint(F, G), G, A, midpoint(F, G), F we get anti_similar_triangles(A, F, midpoint(F, G), A, G, midpoint(F, G))
By log_of_2_times_distance on D, A, F, midpoint(A, D) we get log(distance(A, D)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(F, midpoint(A, D)))
By sas_anti_congruence on D, midpoint(F, G), F, D, midpoint(F, G), G we get anti_congruent_triangles(D, F, midpoint(F, G), D, G, midpoint(F, G))
By asa_anti_congruence on D, midpoint(F, G), G, D, midpoint(F, G), F we get anti_congruent_triangles(D, F, midpoint(F, G), D, G, midpoint(F, G))
By reverse_direction on midpoint(E, G), E we get 180 == direction(midpoint(E, G), E) - direction(E, midpoint(E, G)) mod 360
By external_angle_bisector_definition_v0 on E, midpoint(E, G), H, D we get 180 == angle(E, D, midpoint(E, G)) + angle(H, D, midpoint(E, G)) mod 360
By asa_anti_congruence on midpoint(E, G), D, G, midpoint(E, G), D, E we get anti_congruent_triangles(D, E, midpoint(E, G), D, G, midpoint(E, G))
By log_of_2_times_distance on A, D, midpoint(A, D), D we get log(distance(A, D)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(D, midpoint(A, D)))
By collinear_definition on D, midpoint(B, D), midpoint(E, G) we get midpoint(B, D) in Line(D, midpoint(E, G)), midpoint(E, G) in Line(D, midpoint(B, D)), Line(D, midpoint(B, D)) == Line(D, midpoint(E, G)), 0 == 2 * angle(midpoint(B, D), D, midpoint(E, G)) mod 360
By sas_anti_congruence on G, midpoint(E, G), B, E, midpoint(E, G), B we get anti_congruent_triangles(B, E, midpoint(E, G), B, G, midpoint(E, G))
By sas_anti_congruence on E, D, midpoint(E, G), G, D, midpoint(E, G) we get anti_congruent_triangles(D, E, midpoint(E, G), D, G, midpoint(E, G))
By reverse_direction on projection(I, f), B we get 180 == direction(projection(I, f), B) - direction(B, projection(I, f)) mod 360
By aa_anti_similarity on F, midpoint(C, D), midpoint(E, F), E, midpoint(C, D), midpoint(E, F) we get anti_similar_triangles(E, midpoint(C, D), midpoint(E, F), F, midpoint(C, D), midpoint(E, F))
By aa_anti_similarity on G, D, midpoint(F, G), F, D, midpoint(F, G) we get anti_similar_triangles(D, F, midpoint(F, G), D, G, midpoint(F, G))
By sas_anti_similarity on midpoint(F, G), A, F, midpoint(F, G), A, G we get anti_similar_triangles(A, F, midpoint(F, G), A, G, midpoint(F, G))
By sas_anti_similarity on D, midpoint(F, G), F, D, midpoint(F, G), G we get anti_similar_triangles(D, F, midpoint(F, G), D, G, midpoint(F, G))
By aa_anti_similarity on E, midpoint(E, F), midpoint(C, D), F, midpoint(E, F), midpoint(C, D) we get anti_similar_triangles(E, midpoint(C, D), midpoint(E, F), F, midpoint(C, D), midpoint(E, F))
By sas_anti_similarity on D, midpoint(F, G), G, D, midpoint(F, G), F we get anti_similar_triangles(D, F, midpoint(F, G), D, G, midpoint(F, G))
By sas_anti_congruence on E, midpoint(E, G), D, G, midpoint(E, G), D we get anti_congruent_triangles(D, E, midpoint(E, G), D, G, midpoint(E, G))
By sas_anti_similarity on G, midpoint(F, G), A, F, midpoint(F, G), A we get anti_similar_triangles(A, F, midpoint(F, G), A, G, midpoint(F, G))
By aa_anti_similarity on F, midpoint(F, G), D, G, midpoint(F, G), D we get anti_similar_triangles(D, F, midpoint(F, G), D, G, midpoint(F, G))
By sas_anti_congruence on B, midpoint(E, G), G, B, midpoint(E, G), E we get anti_congruent_triangles(B, E, midpoint(E, G), B, G, midpoint(E, G))
By collinear_definition on D, midpoint(A, D), midpoint(F, G) we get midpoint(A, D) in Line(D, midpoint(F, G)), midpoint(F, G) in Line(D, midpoint(A, D)), Line(D, midpoint(A, D)) == Line(D, midpoint(F, G)), 0 == 2 * angle(midpoint(A, D), D, midpoint(F, G)) mod 360
By aa_anti_similarity on F, A, midpoint(F, G), G, A, midpoint(F, G) we get anti_similar_triangles(A, F, midpoint(F, G), A, G, midpoint(F, G))
By reverse_direction on I, projection(I, f) we get 180 == direction(I, projection(I, f)) - direction(projection(I, f), I) mod 360
By reverse_direction on midpoint(F, G), F we get 180 == direction(midpoint(F, G), F) - direction(F, midpoint(F, G)) mod 360
By sas_anti_congruence on G, D, midpoint(F, G), F, D, midpoint(F, G) we get anti_congruent_triangles(D, F, midpoint(F, G), D, G, midpoint(F, G))
By sas_anti_similarity on G, A, midpoint(F, G), F, A, midpoint(F, G) we get anti_similar_triangles(A, F, midpoint(F, G), A, G, midpoint(F, G))
By sas_anti_congruence on midpoint(F, G), D, G, midpoint(F, G), D, F we get anti_congruent_triangles(D, F, midpoint(F, G), D, G, midpoint(F, G))
By reverse_direction on projection(I, f), K we get 180 == direction(projection(I, f), K) - direction(K, projection(I, f)) mod 360
By reverse_direction on midpoint(F, G), A we get 180 == direction(midpoint(F, G), A) - direction(A, midpoint(F, G)) mod 360
By reverse_direction on midpoint(C, D), midpoint(E, F) we get 180 == direction(midpoint(C, D), midpoint(E, F)) - direction(midpoint(E, F), midpoint(C, D)) mod 360
By aa_anti_similarity on G, midpoint(F, G), D, F, midpoint(F, G), D we get anti_similar_triangles(D, F, midpoint(F, G), D, G, midpoint(F, G))
By sas_anti_congruence on midpoint(E, G), B, E, midpoint(E, G), B, G we get anti_congruent_triangles(B, E, midpoint(E, G), B, G, midpoint(E, G))
By asa_anti_congruence on B, midpoint(E, G), E, B, midpoint(E, G), G we get anti_congruent_triangles(B, E, midpoint(E, G), B, G, midpoint(E, G))
By aa_anti_similarity on G, A, midpoint(F, G), F, A, midpoint(F, G) we get anti_similar_triangles(A, F, midpoint(F, G), A, G, midpoint(F, G))
By aa_anti_similarity on G, B, midpoint(E, G), E, B, midpoint(E, G) we get anti_similar_triangles(B, E, midpoint(E, G), B, G, midpoint(E, G))
By asa_anti_congruence on B, midpoint(E, G), G, B, midpoint(E, G), E we get anti_congruent_triangles(B, E, midpoint(E, G), B, G, midpoint(E, G))
By reverse_direction on projection(I, f), A we get 180 == direction(projection(I, f), A) - direction(A, projection(I, f)) mod 360
By sas_anti_similarity on F, D, midpoint(F, G), G, D, midpoint(F, G) we get anti_similar_triangles(D, F, midpoint(F, G), D, G, midpoint(F, G))
By aa_anti_similarity on G, D, midpoint(E, G), E, D, midpoint(E, G) we get anti_similar_triangles(D, E, midpoint(E, G), D, G, midpoint(E, G))
By sas_anti_congruence on F, D, midpoint(F, G), G, D, midpoint(F, G) we get anti_congruent_triangles(D, F, midpoint(F, G), D, G, midpoint(F, G))
By sas_anti_similarity on G, D, midpoint(F, G), F, D, midpoint(F, G) we get anti_similar_triangles(D, F, midpoint(F, G), D, G, midpoint(F, G))
By sas_anti_similarity on midpoint(E, G), D, E, midpoint(E, G), D, G we get anti_similar_triangles(D, E, midpoint(E, G), D, G, midpoint(E, G))
By asa_anti_congruence on midpoint(F, G), D, F, midpoint(F, G), D, G we get anti_congruent_triangles(D, F, midpoint(F, G), D, G, midpoint(F, G))
By aa_anti_similarity on E, midpoint(E, G), B, G, midpoint(E, G), B we get anti_similar_triangles(B, E, midpoint(E, G), B, G, midpoint(E, G))
By reverse_direction on F, midpoint(F, G) we get 180 == direction(F, midpoint(F, G)) - direction(midpoint(F, G), F) mod 360
By sas_anti_similarity on midpoint(F, G), D, G, midpoint(F, G), D, F we get anti_similar_triangles(D, F, midpoint(F, G), D, G, midpoint(F, G))
By reverse_direction on projection(I, f), G we get 180 == direction(projection(I, f), G) - direction(G, projection(I, f)) mod 360
By sas_anti_congruence on E, B, midpoint(E, G), G, B, midpoint(E, G) we get anti_congruent_triangles(B, E, midpoint(E, G), B, G, midpoint(E, G))
By reverse_direction on D, midpoint(F, G) we get 180 == direction(D, midpoint(F, G)) - direction(midpoint(F, G), D) mod 360
By sas_anti_congruence on D, midpoint(E, G), E, D, midpoint(E, G), G we get anti_congruent_triangles(D, E, midpoint(E, G), D, G, midpoint(E, G))
By sas_anti_congruence on G, midpoint(F, G), A, F, midpoint(F, G), A we get anti_congruent_triangles(A, F, midpoint(F, G), A, G, midpoint(F, G))
By collinear_definition on A, midpoint(F, G), midpoint(A, D) we get midpoint(F, G) in Line(A, midpoint(A, D)), midpoint(A, D) in Line(A, midpoint(F, G)), Line(A, midpoint(A, D)) == Line(A, midpoint(F, G)), 0 == 2 * angle(midpoint(F, G), A, midpoint(A, D)) mod 360
By reverse_direction on midpoint(E, F), midpoint(C, D) we get 180 == direction(midpoint(E, F), midpoint(C, D)) - direction(midpoint(C, D), midpoint(E, F)) mod 360
By sas_anti_similarity on G, midpoint(F, G), D, F, midpoint(F, G), D we get anti_similar_triangles(D, F, midpoint(F, G), D, G, midpoint(F, G))
By asa_anti_congruence on midpoint(E, G), D, E, midpoint(E, G), D, G we get anti_congruent_triangles(D, E, midpoint(E, G), D, G, midpoint(E, G))
By reverse_direction on midpoint(E, G), D we get 180 == direction(midpoint(E, G), D) - direction(D, midpoint(E, G)) mod 360
By asa_anti_congruence on midpoint(F, G), D, G, midpoint(F, G), D, F we get anti_congruent_triangles(D, F, midpoint(F, G), D, G, midpoint(F, G))
By log_of_2_times_distance on B, D, G, midpoint(B, D) we get log(distance(B, D)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(G, midpoint(B, D)))
By aa_anti_similarity on G, midpoint(F, G), A, F, midpoint(F, G), A we get anti_similar_triangles(A, F, midpoint(F, G), A, G, midpoint(F, G))
By external_angle_bisector_definition_v0_r on A, G, A, midpoint(F, G) we get Line(G, midpoint(F, G)) == external_angle_bisector(A, midpoint(F, G), A)
By external_angle_bisector_definition_v0_r on midpoint(C, D), E, midpoint(C, D), midpoint(E, F) we get Line(E, midpoint(E, F)) == external_angle_bisector(midpoint(C, D), midpoint(E, F), midpoint(C, D))
By right_triangle_circumcenter_v1 on G, E, H we get midpoint(G, H) == circumcenter(E, G, H)
By external_angle_bisector_definition_v0_r on G, I, G, projection(I, f) we get Line(I, projection(I, f)) == external_angle_bisector(G, projection(I, f), G)
By internal_angle_bisector_definition_v0_r on projection(I, f), B, projection(I, f), A we get Line(A, B) == internal_angle_bisector(projection(I, f), A, projection(I, f))
By external_angle_bisector_definition_v0_r on A, I, A, projection(I, f) we get Line(I, projection(I, f)) == external_angle_bisector(A, projection(I, f), A)
By external_angle_bisector_definition_v0_r on D, F, D, midpoint(F, G) we get Line(F, midpoint(F, G)) == external_angle_bisector(D, midpoint(F, G), D)
By external_angle_bisector_definition_v0_r on projection(I, f), H, projection(I, f), G we get Line(G, H) == external_angle_bisector(projection(I, f), G, projection(I, f))
By external_angle_bisector_definition_v0_r on A, K, A, projection(I, f) we get Line(K, projection(I, f)) == external_angle_bisector(A, projection(I, f), A)
By internal_angle_bisector_definition_v0_r on midpoint(B, D), D, H, E we get Line(D, E) == internal_angle_bisector(H, E, midpoint(B, D))
By external_angle_bisector_definition_v0_r on G, B, G, midpoint(E, G) we get Line(B, midpoint(E, G)) == external_angle_bisector(G, midpoint(E, G), G)
By external_angle_bisector_definition_v0_r on G, D, G, midpoint(F, G) we get Line(D, midpoint(F, G)) == external_angle_bisector(G, midpoint(F, G), G)
By right_triangle_circumcenter_v1 on G, F, H we get midpoint(G, H) == circumcenter(F, G, H)
By internal_angle_bisector_definition_v0_r on midpoint(E, G), B, midpoint(E, G), D we get Line(B, D) == internal_angle_bisector(midpoint(E, G), D, midpoint(E, G))
By external_angle_bisector_definition_v0_r on G, K, G, projection(I, f) we get Line(K, projection(I, f)) == external_angle_bisector(G, projection(I, f), G)
By external_angle_bisector_definition_v0_r on D, G, D, midpoint(F, G) we get Line(G, midpoint(F, G)) == external_angle_bisector(D, midpoint(F, G), D)
By external_angle_bisector_definition_v0_r on projection(I, f), D, projection(I, f), G we get Line(D, G) == external_angle_bisector(projection(I, f), G, projection(I, f))
By external_angle_bisector_definition_v0_r on midpoint(E, G), H, midpoint(E, G), E we get Line(E, H) == external_angle_bisector(midpoint(E, G), E, midpoint(E, G))
By external_angle_bisector_definition_v0_r on D, G, D, midpoint(E, G) we get Line(G, midpoint(E, G)) == external_angle_bisector(D, midpoint(E, G), D)
By right_triangle_circumcenter_v1 on D, E, B we get midpoint(B, D) == circumcenter(B, D, E)
By internal_angle_bisector_definition_v0_r on B, A, B, projection(I, f) we get Line(A, projection(I, f)) == internal_angle_bisector(B, projection(I, f), B)
By external_angle_bisector_definition_v0_r on midpoint(A, D), A, H, F we get Line(A, F) == external_angle_bisector(H, F, midpoint(A, D))
By internal_angle_bisector_definition_v0_r on G, midpoint(F, G), G, F we get internal_angle_bisector(G, F, G) == Line(F, midpoint(F, G))
By perpendicular_angle_conditions_v0 on midpoint(B, D), midpoint(E, G), E we get angle(midpoint(B, D), midpoint(E, G), E) == orientation(E, midpoint(B, D), midpoint(E, G)) mod 360
By collinear_definition on midpoint(A, D), D, midpoint(F, G) we get D in Line(midpoint(A, D), midpoint(F, G)), midpoint(F, G) in Line(D, midpoint(A, D)), Line(D, midpoint(A, D)) == Line(midpoint(A, D), midpoint(F, G)), 0 == 2 * angle(D, midpoint(A, D), midpoint(F, G)) mod 360
By external_angle_bisector_definition_v0_r on A, projection(I, f), B, G we get external_angle_bisector(A, G, B) == Line(G, projection(I, f))
By right_triangle_circumcenter_v1 on A, G, D we get midpoint(A, D) == circumcenter(A, D, G)
By external_angle_bisector_definition_v0_r on midpoint(F, G), H, G, F we get Line(F, H) == external_angle_bisector(G, F, midpoint(F, G))
By internal_angle_bisector_definition_v0_r on K, I, K, projection(I, f) we get Line(I, projection(I, f)) == internal_angle_bisector(K, projection(I, f), K)
By internal_angle_bisector_definition_v0 on G, midpoint(F, G), F, midpoint(A, D) we get angle(G, midpoint(A, D), midpoint(F, G)) == angle(midpoint(F, G), midpoint(A, D), F) mod 360
By internal_angle_bisector_definition_v0 on G, midpoint(E, G), E, midpoint(B, D) we get angle(G, midpoint(B, D), midpoint(E, G)) == angle(midpoint(E, G), midpoint(B, D), E) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(E, G), E, midpoint(E, G), G we get Line(E, G) == internal_angle_bisector(midpoint(E, G), G, midpoint(E, G))
By external_angle_bisector_definition_v0_r on I, A, I, projection(I, f) we get Line(A, projection(I, f)) == external_angle_bisector(I, projection(I, f), I)
By external_angle_bisector_definition_v0_r on K, A, K, projection(I, f) we get Line(A, projection(I, f)) == external_angle_bisector(K, projection(I, f), K)
By internal_angle_bisector_definition_v0_r on I, projection(I, f), I, K we get internal_angle_bisector(I, K, I) == Line(K, projection(I, f))
By external_angle_bisector_definition_v0_r on A, F, A, midpoint(F, G) we get Line(F, midpoint(F, G)) == external_angle_bisector(A, midpoint(F, G), A)
By external_angle_bisector_definition_v0_r on I, B, I, projection(I, f) we get Line(B, projection(I, f)) == external_angle_bisector(I, projection(I, f), I)
By external_angle_bisector_definition_v0_r on C, midpoint(E, F), D, midpoint(C, D) we get Line(midpoint(C, D), midpoint(E, F)) == external_angle_bisector(C, midpoint(C, D), D)
By external_angle_bisector_definition_v0_r on midpoint(B, D), B, H, E we get Line(B, E) == external_angle_bisector(H, E, midpoint(B, D))
By external_angle_bisector_definition_v0_r on midpoint(F, G), H, midpoint(F, G), F we get Line(F, H) == external_angle_bisector(midpoint(F, G), F, midpoint(F, G))
By external_angle_bisector_definition_v0_r on E, D, E, midpoint(E, G) we get Line(D, midpoint(E, G)) == external_angle_bisector(E, midpoint(E, G), E)
By internal_angle_bisector_definition_v0_r on B, G, B, projection(I, f) we get Line(G, projection(I, f)) == internal_angle_bisector(B, projection(I, f), B)
By external_angle_bisector_definition_v0_r on D, E, D, midpoint(E, G) we get Line(E, midpoint(E, G)) == external_angle_bisector(D, midpoint(E, G), D)
By external_angle_bisector_definition_v0_r on G, H, midpoint(E, G), E we get Line(E, H) == external_angle_bisector(G, E, midpoint(E, G))
By internal_angle_bisector_definition_v0_r on projection(I, f), A, projection(I, f), G we get Line(A, G) == internal_angle_bisector(projection(I, f), G, projection(I, f))
By internal_angle_bisector_definition_v0 on B, midpoint(E, G), B, midpoint(B, D) we get angle(B, midpoint(B, D), midpoint(E, G)) == angle(midpoint(E, G), midpoint(B, D), B) mod 360
By external_angle_bisector_definition_v0_r on G, D, G, midpoint(E, G) we get Line(D, midpoint(E, G)) == external_angle_bisector(G, midpoint(E, G), G)
By internal_angle_bisector_definition_v0_r on G, A, G, projection(I, f) we get Line(A, projection(I, f)) == internal_angle_bisector(G, projection(I, f), G)
By perpendicular_angle_conditions_v0 on F, midpoint(F, G), midpoint(A, D) we get angle(F, midpoint(F, G), midpoint(A, D)) == orientation(F, midpoint(F, G), midpoint(A, D)) mod 360
By external_angle_bisector_definition_v0_r on B, G, B, midpoint(E, G) we get Line(G, midpoint(E, G)) == external_angle_bisector(B, midpoint(E, G), B)
By external_angle_bisector_definition_v0_r on F, D, F, midpoint(F, G) we get Line(D, midpoint(F, G)) == external_angle_bisector(F, midpoint(F, G), F)
By perpendicular_angle_conditions_v0 on G, midpoint(F, G), midpoint(A, D) we get angle(G, midpoint(F, G), midpoint(A, D)) == orientation(G, midpoint(F, G), midpoint(A, D)) mod 360
By external_angle_bisector_definition_v0_r on K, B, K, projection(I, f) we get Line(B, projection(I, f)) == external_angle_bisector(K, projection(I, f), K)
By internal_angle_bisector_definition_v0_r on midpoint(E, G), D, midpoint(E, G), B we get Line(B, D) == internal_angle_bisector(midpoint(E, G), B, midpoint(E, G))
By external_angle_bisector_definition_v0_r on G, A, G, midpoint(F, G) we get Line(A, midpoint(F, G)) == external_angle_bisector(G, midpoint(F, G), G)
By collinear_definition on midpoint(A, D), midpoint(F, G), D we get midpoint(F, G) in Line(D, midpoint(A, D)), D in Line(midpoint(A, D), midpoint(F, G)), Line(D, midpoint(A, D)) == Line(midpoint(A, D), midpoint(F, G)), 0 == 2 * angle(midpoint(F, G), midpoint(A, D), D) mod 360
By external_angle_bisector_definition_v0_r on B, E, B, midpoint(E, G) we get Line(E, midpoint(E, G)) == external_angle_bisector(B, midpoint(E, G), B)
By external_angle_bisector_definition_v0_r on midpoint(C, D), F, midpoint(C, D), midpoint(E, F) we get Line(F, midpoint(E, F)) == external_angle_bisector(midpoint(C, D), midpoint(E, F), midpoint(C, D))
By internal_angle_bisector_definition_v0_r on G, E, G, midpoint(E, G) we get Line(E, midpoint(E, G)) == internal_angle_bisector(G, midpoint(E, G), G)
By perpendicular_angle_conditions_v0 on G, midpoint(E, G), midpoint(B, D) we get angle(G, midpoint(E, G), midpoint(B, D)) == orientation(G, midpoint(E, G), midpoint(B, D)) mod 360
By collinear_definition on midpoint(F, G), midpoint(A, D), D we get midpoint(A, D) in Line(D, midpoint(F, G)), D in Line(midpoint(A, D), midpoint(F, G)), Line(D, midpoint(F, G)) == Line(midpoint(A, D), midpoint(F, G)), 0 == 2 * angle(midpoint(A, D), midpoint(F, G), D) mod 360
By external_angle_bisector_definition_v0_r on B, K, B, projection(I, f) we get Line(K, projection(I, f)) == external_angle_bisector(B, projection(I, f), B)
By external_angle_bisector_definition_v0_r on B, I, B, projection(I, f) we get Line(I, projection(I, f)) == external_angle_bisector(B, projection(I, f), B)
By internal_angle_bisector_definition_v0_r on A, G, A, projection(I, f) we get Line(G, projection(I, f)) == internal_angle_bisector(A, projection(I, f), A)
By internal_angle_bisector_definition_v0_r on C, midpoint(E, F), midpoint(C, D), D we get Line(D, midpoint(E, F)) == internal_angle_bisector(C, D, midpoint(C, D))
By collinear_definition on midpoint(F, G), A, midpoint(A, D) we get A in Line(midpoint(A, D), midpoint(F, G)), midpoint(A, D) in Line(A, midpoint(F, G)), Line(A, midpoint(F, G)) == Line(midpoint(A, D), midpoint(F, G)), 0 == 2 * angle(A, midpoint(F, G), midpoint(A, D)) mod 360
By internal_angle_bisector_definition_v0_r on G, projection(I, f), B, A we get internal_angle_bisector(B, A, G) == Line(A, projection(I, f))
By right_triangle_circumcenter_v1 on D, G, B we get midpoint(B, D) == circumcenter(B, D, G)
By internal_angle_bisector_definition_v0 on D, midpoint(F, G), D, midpoint(A, D) we get angle(D, midpoint(A, D), midpoint(F, G)) == angle(midpoint(F, G), midpoint(A, D), D) mod 360
By internal_angle_bisector_definition_v0_r on E, G, E, midpoint(E, G) we get Line(G, midpoint(E, G)) == internal_angle_bisector(E, midpoint(E, G), E)
By external_angle_bisector_definition_v0_r on I, G, I, projection(I, f) we get Line(G, projection(I, f)) == external_angle_bisector(I, projection(I, f), I)
By collinear_definition on midpoint(E, G), midpoint(B, D), B we get midpoint(B, D) in Line(B, midpoint(E, G)), B in Line(midpoint(B, D), midpoint(E, G)), Line(B, midpoint(E, G)) == Line(midpoint(B, D), midpoint(E, G)), 0 == 2 * angle(midpoint(B, D), midpoint(E, G), B) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(F, G), D, midpoint(F, G), A we get Line(A, D) == internal_angle_bisector(midpoint(F, G), A, midpoint(F, G))
By internal_angle_bisector_definition_v0_r on projection(I, f), B, projection(I, f), G we get Line(B, G) == internal_angle_bisector(projection(I, f), G, projection(I, f))
By internal_angle_bisector_definition_v0_r on E, B, G, midpoint(E, G) we get Line(B, midpoint(E, G)) == internal_angle_bisector(E, midpoint(E, G), G)
By external_angle_bisector_definition_v0_r on F, A, F, midpoint(F, G) we get Line(A, midpoint(F, G)) == external_angle_bisector(F, midpoint(F, G), F)
By collinear_definition on midpoint(E, G), midpoint(B, D), D we get midpoint(B, D) in Line(D, midpoint(E, G)), D in Line(midpoint(B, D), midpoint(E, G)), Line(D, midpoint(E, G)) == Line(midpoint(B, D), midpoint(E, G)), 0 == 2 * angle(midpoint(B, D), midpoint(E, G), D) mod 360
By collinear_definition on midpoint(E, G), D, midpoint(B, D) we get D in Line(midpoint(B, D), midpoint(E, G)), midpoint(B, D) in Line(D, midpoint(E, G)), Line(D, midpoint(E, G)) == Line(midpoint(B, D), midpoint(E, G)), 0 == 2 * angle(D, midpoint(E, G), midpoint(B, D)) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(C, D), D, midpoint(C, D), midpoint(E, F) we get Line(D, midpoint(E, F)) == internal_angle_bisector(midpoint(C, D), midpoint(E, F), midpoint(C, D))
By internal_angle_bisector_definition_v0_r on E, midpoint(E, G), E, G we get internal_angle_bisector(E, G, E) == Line(G, midpoint(E, G))
By perpendicular_angle_conditions_v0 on E, midpoint(E, G), midpoint(B, D) we get angle(E, midpoint(E, G), midpoint(B, D)) == orientation(E, midpoint(E, G), midpoint(B, D)) mod 360
By collinear_definition on midpoint(A, D), A, midpoint(F, G) we get A in Line(midpoint(A, D), midpoint(F, G)), midpoint(F, G) in Line(A, midpoint(A, D)), Line(A, midpoint(A, D)) == Line(midpoint(A, D), midpoint(F, G)), 0 == 2 * angle(A, midpoint(A, D), midpoint(F, G)) mod 360
By internal_angle_bisector_definition_v0_r on B, D, B, midpoint(E, G) we get Line(D, midpoint(E, G)) == internal_angle_bisector(B, midpoint(E, G), B)
By internal_angle_bisector_definition_v0_r on midpoint(C, D), midpoint(E, F), D, C we get Line(C, midpoint(E, F)) == internal_angle_bisector(D, C, midpoint(C, D))
By internal_angle_bisector_definition_v0_r on midpoint(F, G), A, midpoint(F, G), D we get Line(A, D) == internal_angle_bisector(midpoint(F, G), D, midpoint(F, G))
By internal_angle_bisector_definition_v0_r on projection(I, f), G, projection(I, f), A we get Line(A, G) == internal_angle_bisector(projection(I, f), A, projection(I, f))
By internal_angle_bisector_definition_v0_r on G, D, F, midpoint(F, G) we get Line(D, midpoint(F, G)) == internal_angle_bisector(F, midpoint(F, G), G)
By internal_angle_bisector_definition_v0_r on F, midpoint(F, G), F, G we get internal_angle_bisector(F, G, F) == Line(G, midpoint(F, G))
By internal_angle_bisector_definition_v0_r on H, D, midpoint(A, D), F we get Line(D, F) == internal_angle_bisector(H, F, midpoint(A, D))
By internal_angle_bisector_definition_v0 on F, midpoint(F, G), G, midpoint(A, D) we get angle(F, midpoint(A, D), midpoint(F, G)) == angle(midpoint(F, G), midpoint(A, D), G) mod 360
By internal_angle_bisector_definition_v0_r on projection(I, f), A, projection(I, f), B we get Line(A, B) == internal_angle_bisector(projection(I, f), B, projection(I, f))
By internal_angle_bisector_definition_v0_r on K, projection(I, f), K, I we get internal_angle_bisector(K, I, K) == Line(I, projection(I, f))
By internal_angle_bisector_definition_v0_r on A, D, A, midpoint(F, G) we get Line(D, midpoint(F, G)) == internal_angle_bisector(A, midpoint(F, G), A)
By internal_angle_bisector_definition_v0_r on D, A, D, midpoint(F, G) we get Line(A, midpoint(F, G)) == internal_angle_bisector(D, midpoint(F, G), D)
By internal_angle_bisector_definition_v0 on A, midpoint(F, G), A, midpoint(A, D) we get angle(A, midpoint(A, D), midpoint(F, G)) == angle(midpoint(F, G), midpoint(A, D), A) mod 360
By internal_angle_bisector_definition_v0_r on F, G, F, midpoint(F, G) we get Line(G, midpoint(F, G)) == internal_angle_bisector(F, midpoint(F, G), F)
By internal_angle_bisector_definition_v0_r on midpoint(F, G), G, midpoint(F, G), F we get Line(F, G) == internal_angle_bisector(midpoint(F, G), F, midpoint(F, G))
By internal_angle_bisector_definition_v0_r on D, B, D, midpoint(E, G) we get Line(B, midpoint(E, G)) == internal_angle_bisector(D, midpoint(E, G), D)
By right_triangle_circumcenter_v1 on A, F, D we get midpoint(A, D) == circumcenter(A, D, F)
By internal_angle_bisector_definition_v0 on D, midpoint(E, G), D, midpoint(B, D) we get angle(D, midpoint(B, D), midpoint(E, G)) == angle(midpoint(E, G), midpoint(B, D), D) mod 360
By collinear_definition on midpoint(B, D), midpoint(E, G), D we get midpoint(E, G) in Line(D, midpoint(B, D)), D in Line(midpoint(B, D), midpoint(E, G)), Line(D, midpoint(B, D)) == Line(midpoint(B, D), midpoint(E, G)), 0 == 2 * angle(midpoint(E, G), midpoint(B, D), D) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(E, F), D, midpoint(E, F), midpoint(C, D) we get Line(D, midpoint(C, D)) == internal_angle_bisector(midpoint(E, F), midpoint(C, D), midpoint(E, F))
By internal_angle_bisector_definition_v0_r on E, D, G, midpoint(E, G) we get Line(D, midpoint(E, G)) == internal_angle_bisector(E, midpoint(E, G), G)
By external_angle_bisector_definition_v0_r on K, G, K, projection(I, f) we get Line(G, projection(I, f)) == external_angle_bisector(K, projection(I, f), K)
By internal_angle_bisector_definition_v0_r on projection(I, f), K, projection(I, f), I we get Line(I, K) == internal_angle_bisector(projection(I, f), I, projection(I, f))
By internal_angle_bisector_definition_v0_r on midpoint(E, F), C, midpoint(E, F), midpoint(C, D) we get Line(C, midpoint(C, D)) == internal_angle_bisector(midpoint(E, F), midpoint(C, D), midpoint(E, F))
By external_angle_bisector_definition_v0_r on E, B, E, midpoint(E, G) we get Line(B, midpoint(E, G)) == external_angle_bisector(E, midpoint(E, G), E)
By collinear_definition on midpoint(F, G), midpoint(A, D), A we get midpoint(A, D) in Line(A, midpoint(F, G)), A in Line(midpoint(A, D), midpoint(F, G)), Line(A, midpoint(F, G)) == Line(midpoint(A, D), midpoint(F, G)), 0 == 2 * angle(midpoint(A, D), midpoint(F, G), A) mod 360
By collinear_definition on midpoint(B, D), B, midpoint(E, G) we get B in Line(midpoint(B, D), midpoint(E, G)), midpoint(E, G) in Line(B, midpoint(B, D)), Line(B, midpoint(B, D)) == Line(midpoint(B, D), midpoint(E, G)), 0 == 2 * angle(B, midpoint(B, D), midpoint(E, G)) mod 360
By collinear_definition on midpoint(F, G), D, midpoint(A, D) we get D in Line(midpoint(A, D), midpoint(F, G)), midpoint(A, D) in Line(D, midpoint(F, G)), Line(D, midpoint(F, G)) == Line(midpoint(A, D), midpoint(F, G)), 0 == 2 * angle(D, midpoint(F, G), midpoint(A, D)) mod 360
By internal_angle_bisector_definition_v0_r on G, A, F, midpoint(F, G) we get Line(A, midpoint(F, G)) == internal_angle_bisector(F, midpoint(F, G), G)
By collinear_definition on midpoint(B, D), midpoint(E, G), B we get midpoint(E, G) in Line(B, midpoint(B, D)), B in Line(midpoint(B, D), midpoint(E, G)), Line(B, midpoint(B, D)) == Line(midpoint(B, D), midpoint(E, G)), 0 == 2 * angle(midpoint(E, G), midpoint(B, D), B) mod 360
By internal_angle_bisector_definition_v0_r on projection(I, f), G, projection(I, f), B we get Line(B, G) == internal_angle_bisector(projection(I, f), B, projection(I, f))
By perpendicular_angle_conditions_v0 on midpoint(B, D), midpoint(E, G), G we get angle(midpoint(B, D), midpoint(E, G), G) == orientation(G, midpoint(B, D), midpoint(E, G)) mod 360
By collinear_definition on midpoint(E, G), B, midpoint(B, D) we get B in Line(midpoint(B, D), midpoint(E, G)), midpoint(B, D) in Line(B, midpoint(E, G)), Line(B, midpoint(E, G)) == Line(midpoint(B, D), midpoint(E, G)), 0 == 2 * angle(B, midpoint(E, G), midpoint(B, D)) mod 360
By internal_angle_bisector_definition_v0_r on G, F, G, midpoint(F, G) we get Line(F, midpoint(F, G)) == internal_angle_bisector(G, midpoint(F, G), G)
By collinear_definition on midpoint(B, D), D, midpoint(E, G) we get D in Line(midpoint(B, D), midpoint(E, G)), midpoint(E, G) in Line(D, midpoint(B, D)), Line(D, midpoint(B, D)) == Line(midpoint(B, D), midpoint(E, G)), 0 == 2 * angle(D, midpoint(B, D), midpoint(E, G)) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(C, D), C, midpoint(C, D), midpoint(E, F) we get Line(C, midpoint(E, F)) == internal_angle_bisector(midpoint(C, D), midpoint(E, F), midpoint(C, D))
By internal_angle_bisector_definition_v0_r on I, K, I, projection(I, f) we get Line(K, projection(I, f)) == internal_angle_bisector(I, projection(I, f), I)
By collinear_definition on midpoint(A, D), midpoint(F, G), A we get midpoint(F, G) in Line(A, midpoint(A, D)), A in Line(midpoint(A, D), midpoint(F, G)), Line(A, midpoint(A, D)) == Line(midpoint(A, D), midpoint(F, G)), 0 == 2 * angle(midpoint(F, G), midpoint(A, D), A) mod 360
By right_triangle_circumcenter_v1 on G, J, H we get midpoint(G, H) == circumcenter(G, H, J)
By internal_angle_bisector_definition_v0_r on A, projection(I, f), G, B we get internal_angle_bisector(A, B, G) == Line(B, projection(I, f))
By perpendicular_angle_conditions_v0 on midpoint(A, D), midpoint(F, G), G we get angle(midpoint(A, D), midpoint(F, G), G) == orientation(G, midpoint(A, D), midpoint(F, G)) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(E, G), G, midpoint(E, G), E we get Line(E, G) == internal_angle_bisector(midpoint(E, G), E, midpoint(E, G))
By internal_angle_bisector_definition_v0_r on A, B, A, projection(I, f) we get Line(B, projection(I, f)) == internal_angle_bisector(A, projection(I, f), A)
By internal_angle_bisector_definition_v0_r on G, B, G, projection(I, f) we get Line(B, projection(I, f)) == internal_angle_bisector(G, projection(I, f), G)
By internal_angle_bisector_definition_v0_r on midpoint(F, G), F, midpoint(F, G), G we get Line(F, G) == internal_angle_bisector(midpoint(F, G), G, midpoint(F, G))
By perpendicular_angle_conditions_v0 on midpoint(A, D), midpoint(F, G), F we get angle(midpoint(A, D), midpoint(F, G), F) == orientation(F, midpoint(A, D), midpoint(F, G)) mod 360
By internal_angle_bisector_definition_v0_r on G, midpoint(E, G), G, E we get internal_angle_bisector(G, E, G) == Line(E, midpoint(E, G))
By internal_angle_bisector_definition_v0_r on projection(I, f), I, projection(I, f), K we get Line(I, K) == internal_angle_bisector(projection(I, f), K, projection(I, f))
By internal_angle_bisector_definition_v0 on E, midpoint(E, G), G, midpoint(B, D) we get angle(E, midpoint(B, D), midpoint(E, G)) == angle(midpoint(E, G), midpoint(B, D), G) mod 360
By altitude_definition on E, midpoint(E, G), midpoint(B, D), Line(E, G) we get Line(E, G) == altitude(E, midpoint(B, D), midpoint(E, G))
By altitude_definition on G, midpoint(E, G), midpoint(B, D), Line(E, G) we get Line(E, G) == altitude(G, midpoint(B, D), midpoint(E, G))
By altitude_definition on F, midpoint(A, D), midpoint(F, G), Line(F, G) we get Line(F, G) == altitude(F, midpoint(A, D), midpoint(F, G))
By altitude_definition on G, midpoint(F, G), midpoint(A, D), Line(F, G) we get Line(F, G) == altitude(G, midpoint(A, D), midpoint(F, G))
By concurrent_sufficient_conditions on l, radical_axis(Circle(C, D, E), Circle(C, H, J)), g we get concurrent(g, l, radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on h, Line(C, D), radical_axis(Circle(C, D, E), Circle(C, H, J)) we get concurrent(h, Line(C, D), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on Line(C, D), h, radical_axis(Circle(C, D, E), Circle(C, H, J)) we get concurrent(h, Line(C, D), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on h, radical_axis(Circle(C, D, E), Circle(C, H, J)), Line(C, H) we get concurrent(h, Line(C, H), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on l, g, radical_axis(Circle(C, D, E), Circle(C, H, J)) we get concurrent(g, l, radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on Line(C, D), g, radical_axis(Circle(C, D, E), Circle(C, H, J)) we get concurrent(g, Line(C, D), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on g, radical_axis(Circle(C, D, E), Circle(C, H, J)), l we get concurrent(g, l, radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on l, radical_axis(Circle(C, D, E), Circle(C, H, J)), h we get concurrent(h, l, radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on radical_axis(Circle(C, D, E), Circle(C, H, J)), Line(C, D), l we get concurrent(l, Line(C, D), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on l, h, radical_axis(Circle(C, D, E), Circle(C, H, J)) we get concurrent(h, l, radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on g, l, radical_axis(Circle(C, D, E), Circle(C, H, J)) we get concurrent(g, l, radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on g, Line(C, D), radical_axis(Circle(C, D, E), Circle(C, H, J)) we get concurrent(g, Line(C, D), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on radical_axis(Circle(C, D, E), Circle(C, H, J)), Line(C, H), g we get concurrent(g, Line(C, H), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on Line(C, H), radical_axis(Circle(C, D, E), Circle(C, H, J)), g we get concurrent(g, Line(C, H), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on Line(C, H), radical_axis(Circle(C, D, E), Circle(C, H, J)), l we get concurrent(l, Line(C, H), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on Line(C, D), radical_axis(Circle(C, D, E), Circle(C, H, J)), Line(C, H) we get concurrent(Line(C, D), Line(C, H), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on g, radical_axis(Circle(C, D, E), Circle(C, H, J)), Line(C, D) we get concurrent(g, Line(C, D), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on h, radical_axis(Circle(C, D, E), Circle(C, H, J)), Line(C, D) we get concurrent(h, Line(C, D), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on radical_axis(Circle(C, D, E), Circle(C, H, J)), h, l we get concurrent(h, l, radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on g, radical_axis(Circle(C, D, E), Circle(C, H, J)), Line(C, H) we get concurrent(g, Line(C, H), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on Line(C, D), Line(C, H), radical_axis(Circle(C, D, E), Circle(C, H, J)) we get concurrent(Line(C, D), Line(C, H), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on Line(C, D), l, radical_axis(Circle(C, D, E), Circle(C, H, J)) we get concurrent(l, Line(C, D), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on radical_axis(Circle(C, D, E), Circle(C, H, J)), g, Line(C, H) we get concurrent(g, Line(C, H), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on h, radical_axis(Circle(C, D, E), Circle(C, H, J)), g we get concurrent(g, h, radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on radical_axis(Circle(C, D, E), Circle(C, H, J)), h, g we get concurrent(g, h, radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on Line(C, H), h, radical_axis(Circle(C, D, E), Circle(C, H, J)) we get concurrent(h, Line(C, H), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on radical_axis(Circle(C, D, E), Circle(C, H, J)), Line(C, H), h we get concurrent(h, Line(C, H), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on radical_axis(Circle(C, D, E), Circle(C, H, J)), l, Line(C, D) we get concurrent(l, Line(C, D), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on h, g, radical_axis(Circle(C, D, E), Circle(C, H, J)) we get concurrent(g, h, radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on l, Line(C, H), radical_axis(Circle(C, D, E), Circle(C, H, J)) we get concurrent(l, Line(C, H), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on radical_axis(Circle(C, D, E), Circle(C, H, J)), Line(C, D), Line(C, H) we get concurrent(Line(C, D), Line(C, H), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on g, radical_axis(Circle(C, D, E), Circle(C, H, J)), h we get concurrent(g, h, radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on h, radical_axis(Circle(C, D, E), Circle(C, H, J)), l we get concurrent(h, l, radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on radical_axis(Circle(C, D, E), Circle(C, H, J)), l, Line(C, H) we get concurrent(l, Line(C, H), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on Line(C, D), radical_axis(Circle(C, D, E), Circle(C, H, J)), l we get concurrent(l, Line(C, D), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on radical_axis(Circle(C, D, E), Circle(C, H, J)), Line(C, D), g we get concurrent(g, Line(C, D), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on h, l, radical_axis(Circle(C, D, E), Circle(C, H, J)) we get concurrent(h, l, radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on Line(C, D), radical_axis(Circle(C, D, E), Circle(C, H, J)), g we get concurrent(g, Line(C, D), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on radical_axis(Circle(C, D, E), Circle(C, H, J)), Line(C, H), l we get concurrent(l, Line(C, H), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on Line(C, H), radical_axis(Circle(C, D, E), Circle(C, H, J)), h we get concurrent(h, Line(C, H), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on g, h, radical_axis(Circle(C, D, E), Circle(C, H, J)) we get concurrent(g, h, radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on Line(C, H), l, radical_axis(Circle(C, D, E), Circle(C, H, J)) we get concurrent(l, Line(C, H), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on l, radical_axis(Circle(C, D, E), Circle(C, H, J)), Line(C, H) we get concurrent(l, Line(C, H), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on l, Line(C, D), radical_axis(Circle(C, D, E), Circle(C, H, J)) we get concurrent(l, Line(C, D), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on Line(C, D), radical_axis(Circle(C, D, E), Circle(C, H, J)), h we get concurrent(h, Line(C, D), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on radical_axis(Circle(C, D, E), Circle(C, H, J)), g, h we get concurrent(g, h, radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on radical_axis(Circle(C, D, E), Circle(C, H, J)), Line(C, D), h we get concurrent(h, Line(C, D), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on radical_axis(Circle(C, D, E), Circle(C, H, J)), l, h we get concurrent(h, l, radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on radical_axis(Circle(C, D, E), Circle(C, H, J)), Line(C, H), Line(C, D) we get concurrent(Line(C, D), Line(C, H), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on Line(C, H), radical_axis(Circle(C, D, E), Circle(C, H, J)), Line(C, D) we get concurrent(Line(C, D), Line(C, H), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on g, Line(C, H), radical_axis(Circle(C, D, E), Circle(C, H, J)) we get concurrent(g, Line(C, H), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on h, Line(C, H), radical_axis(Circle(C, D, E), Circle(C, H, J)) we get concurrent(h, Line(C, H), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on Line(C, H), Line(C, D), radical_axis(Circle(C, D, E), Circle(C, H, J)) we get concurrent(Line(C, D), Line(C, H), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on radical_axis(Circle(C, D, E), Circle(C, H, J)), h, Line(C, D) we get concurrent(h, Line(C, D), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on radical_axis(Circle(C, D, E), Circle(C, H, J)), g, Line(C, D) we get concurrent(g, Line(C, D), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on radical_axis(Circle(C, D, E), Circle(C, H, J)), l, g we get concurrent(g, l, radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on radical_axis(Circle(C, D, E), Circle(C, H, J)), h, Line(C, H) we get concurrent(h, Line(C, H), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on l, radical_axis(Circle(C, D, E), Circle(C, H, J)), Line(C, D) we get concurrent(l, Line(C, D), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on radical_axis(Circle(C, D, E), Circle(C, H, J)), g, l we get concurrent(g, l, radical_axis(Circle(C, D, E), Circle(C, H, J)))
By concurrent_sufficient_conditions on Line(C, H), g, radical_axis(Circle(C, D, E), Circle(C, H, J)) we get concurrent(g, Line(C, H), radical_axis(Circle(C, D, E), Circle(C, H, J)))
By sas_similarity on B, D, G, B, E, midpoint(E, G) we get similar_triangles(B, D, G, B, E, midpoint(E, G))
By sas_anti_similarity on G, H, F, A, F, midpoint(F, G) we get anti_similar_triangles(A, F, midpoint(F, G), G, H, F)
By sas_anti_similarity on E, G, H, midpoint(E, G), E, D we get anti_similar_triangles(D, E, midpoint(E, G), H, G, E)
By sas_anti_similarity on midpoint(E, F), F, D, F, C, D we get anti_similar_triangles(C, D, F, F, D, midpoint(E, F))
By aa_anti_similarity on E, midpoint(E, G), midpoint(B, D), G, midpoint(E, G), midpoint(B, D) we get anti_similar_triangles(E, midpoint(B, D), midpoint(E, G), G, midpoint(B, D), midpoint(E, G))
By sas_anti_similarity on B, D, E, B, E, midpoint(E, G) we get anti_similar_triangles(B, D, E, B, E, midpoint(E, G))
By sas_similarity on E, C, D, midpoint(E, F), F, D we get similar_triangles(C, D, E, F, D, midpoint(E, F))
By reverse_direction on midpoint(F, G), midpoint(A, D) we get 180 == direction(midpoint(F, G), midpoint(A, D)) - direction(midpoint(A, D), midpoint(F, G)) mod 360
By sas_anti_similarity on midpoint(E, F), E, C, E, D, C we get anti_similar_triangles(C, D, E, C, E, midpoint(E, F))
By sas_anti_similarity on midpoint(F, G), F, A, F, H, G we get anti_similar_triangles(A, F, midpoint(F, G), G, H, F)
By aa_anti_similarity on G, midpoint(F, G), midpoint(A, D), F, midpoint(F, G), midpoint(A, D) we get anti_similar_triangles(F, midpoint(A, D), midpoint(F, G), G, midpoint(A, D), midpoint(F, G))
By sas_similarity on D, C, E, D, F, midpoint(E, F) we get similar_triangles(C, D, E, F, D, midpoint(E, F))
By sas_similarity on midpoint(F, G), F, A, G, D, A we get similar_triangles(A, D, G, A, F, midpoint(F, G))
By sas_similarity on G, A, D, midpoint(F, G), F, D we get similar_triangles(A, D, G, F, D, midpoint(F, G))
By sas_anti_similarity on D, F, midpoint(F, G), D, A, F we get anti_similar_triangles(A, D, F, F, D, midpoint(F, G))
By external_angle_bisector_definition_v0 on midpoint(A, D), C, H, F we get 180 == angle(midpoint(A, D), F, C) + angle(H, F, C) mod 360
By sas_similarity on G, D, A, midpoint(F, G), F, A we get similar_triangles(A, D, G, A, F, midpoint(F, G))
By sas_similarity on midpoint(E, G), E, B, G, D, B we get similar_triangles(B, D, G, B, E, midpoint(E, G))
By sas_similarity on midpoint(F, G), G, A, F, D, A we get similar_triangles(A, D, F, A, G, midpoint(F, G))
By sas_similarity on D, E, midpoint(E, F), D, C, F we get similar_triangles(C, D, F, E, D, midpoint(E, F))
By sas_similarity on B, G, midpoint(E, G), B, D, E we get similar_triangles(B, D, E, B, G, midpoint(E, G))
By sas_anti_similarity on H, G, E, D, E, midpoint(E, G) we get anti_similar_triangles(D, E, midpoint(E, G), H, G, E)
By sas_anti_similarity on midpoint(E, G), E, B, E, H, G we get anti_similar_triangles(B, E, midpoint(E, G), G, H, E)
By sas_anti_similarity on G, H, E, B, E, midpoint(E, G) we get anti_similar_triangles(B, E, midpoint(E, G), G, H, E)
By sas_anti_similarity on D, B, G, D, G, midpoint(E, G) we get anti_similar_triangles(B, D, G, G, D, midpoint(E, G))
By aa_anti_similarity on F, midpoint(A, D), midpoint(F, G), G, midpoint(A, D), midpoint(F, G) we get anti_similar_triangles(F, midpoint(A, D), midpoint(F, G), G, midpoint(A, D), midpoint(F, G))
By sas_anti_similarity on B, D, G, B, G, midpoint(E, G) we get anti_similar_triangles(B, D, G, B, G, midpoint(E, G))
By sas_anti_similarity on H, G, F, D, F, midpoint(F, G) we get anti_similar_triangles(D, F, midpoint(F, G), H, G, F)
By sas_anti_similarity on B, E, midpoint(E, G), G, H, E we get anti_similar_triangles(B, E, midpoint(E, G), G, H, E)
By sas_anti_similarity on A, D, F, A, F, midpoint(F, G) we get anti_similar_triangles(A, D, F, A, F, midpoint(F, G))
By sas_anti_similarity on F, D, A, midpoint(F, G), F, A we get anti_similar_triangles(A, D, F, A, F, midpoint(F, G))
By sas_anti_similarity on D, F, midpoint(F, G), H, G, F we get anti_similar_triangles(D, F, midpoint(F, G), H, G, F)
By sas_similarity on F, H, G, midpoint(F, G), G, A we get similar_triangles(A, G, midpoint(F, G), G, H, F)
By sas_similarity on midpoint(E, G), G, B, E, D, B we get similar_triangles(B, D, E, B, G, midpoint(E, G))
By sas_anti_similarity on G, D, A, midpoint(F, G), G, A we get anti_similar_triangles(A, D, G, A, G, midpoint(F, G))
By sas_anti_similarity on F, H, G, midpoint(F, G), F, A we get anti_similar_triangles(A, F, midpoint(F, G), G, H, F)
By sas_similarity on midpoint(E, G), G, D, E, B, D we get similar_triangles(B, D, E, G, D, midpoint(E, G))
By sas_similarity on E, H, G, midpoint(E, G), G, B we get similar_triangles(B, G, midpoint(E, G), G, H, E)
By sas_similarity on C, E, midpoint(E, F), C, D, F we get similar_triangles(C, D, F, C, E, midpoint(E, F))
By sas_similarity on E, G, H, midpoint(E, G), G, D we get similar_triangles(D, G, midpoint(E, G), H, G, E)
By sas_similarity on A, F, midpoint(F, G), A, D, G we get similar_triangles(A, D, G, A, F, midpoint(F, G))
By sas_similarity on midpoint(E, F), F, C, E, D, C we get similar_triangles(C, D, E, C, F, midpoint(E, F))
By sas_similarity on midpoint(F, G), G, A, F, H, G we get similar_triangles(A, G, midpoint(F, G), G, H, F)
By sas_anti_similarity on G, B, D, midpoint(E, G), G, D we get anti_similar_triangles(B, D, G, G, D, midpoint(E, G))
By sas_anti_similarity on A, G, midpoint(F, G), A, D, G we get anti_similar_triangles(A, D, G, A, G, midpoint(F, G))
By sas_anti_similarity on D, E, midpoint(E, G), D, B, E we get anti_similar_triangles(B, D, E, E, D, midpoint(E, G))
By reverse_direction on midpoint(E, G), midpoint(B, D) we get 180 == direction(midpoint(E, G), midpoint(B, D)) - direction(midpoint(B, D), midpoint(E, G)) mod 360
By sas_anti_similarity on D, C, E, D, E, midpoint(E, F) we get anti_similar_triangles(C, D, E, E, D, midpoint(E, F))
By external_angle_bisector_definition_v0 on midpoint(B, D), C, H, E we get 180 == angle(midpoint(B, D), E, C) + angle(H, E, C) mod 360
By sas_anti_similarity on A, D, G, A, G, midpoint(F, G) we get anti_similar_triangles(A, D, G, A, G, midpoint(F, G))
By sas_similarity on H, G, F, D, G, midpoint(F, G) we get similar_triangles(D, G, midpoint(F, G), H, G, F)
By sas_anti_similarity on midpoint(F, G), F, A, F, D, A we get anti_similar_triangles(A, D, F, A, F, midpoint(F, G))
By sas_anti_similarity on D, A, G, D, G, midpoint(F, G) we get anti_similar_triangles(A, D, G, G, D, midpoint(F, G))
By sas_similarity on A, G, midpoint(F, G), A, D, F we get similar_triangles(A, D, F, A, G, midpoint(F, G))
By sas_anti_similarity on D, E, midpoint(E, F), D, C, E we get anti_similar_triangles(C, D, E, E, D, midpoint(E, F))
By sas_anti_similarity on midpoint(F, G), F, D, F, G, H we get anti_similar_triangles(D, F, midpoint(F, G), H, G, F)
By sas_similarity on D, G, midpoint(E, G), D, B, E we get similar_triangles(B, D, E, G, D, midpoint(E, G))
By sas_anti_similarity on midpoint(E, G), E, D, E, B, D we get anti_similar_triangles(B, D, E, E, D, midpoint(E, G))
By sas_anti_similarity on midpoint(E, F), F, C, F, D, C we get anti_similar_triangles(C, D, F, C, F, midpoint(E, F))
By sas_similarity on D, B, G, D, E, midpoint(E, G) we get similar_triangles(B, D, G, E, D, midpoint(E, G))
By sas_anti_similarity on E, B, D, midpoint(E, G), E, D we get anti_similar_triangles(B, D, E, E, D, midpoint(E, G))
By sas_similarity on D, F, midpoint(E, F), D, C, E we get similar_triangles(C, D, E, F, D, midpoint(E, F))
By sas_anti_similarity on midpoint(F, G), F, D, F, A, D we get anti_similar_triangles(A, D, F, F, D, midpoint(F, G))
By sas_similarity on F, D, C, midpoint(E, F), E, C we get similar_triangles(C, D, F, C, E, midpoint(E, F))
By sas_anti_similarity on F, C, D, midpoint(E, F), F, D we get anti_similar_triangles(C, D, F, F, D, midpoint(E, F))
By sas_similarity on B, E, midpoint(E, G), B, D, G we get similar_triangles(B, D, G, B, E, midpoint(E, G))
By sas_anti_similarity on B, E, midpoint(E, G), B, D, E we get anti_similar_triangles(B, D, E, B, E, midpoint(E, G))
By sas_anti_similarity on B, G, midpoint(E, G), B, D, G we get anti_similar_triangles(B, D, G, B, G, midpoint(E, G))
By sas_similarity on C, D, E, C, F, midpoint(E, F) we get similar_triangles(C, D, E, C, F, midpoint(E, F))
By sas_similarity on midpoint(F, G), F, D, G, A, D we get similar_triangles(A, D, G, F, D, midpoint(F, G))
By sas_similarity on B, D, E, B, G, midpoint(E, G) we get similar_triangles(B, D, E, B, G, midpoint(E, G))
By sas_anti_similarity on A, F, midpoint(F, G), A, D, F we get anti_similar_triangles(A, D, F, A, F, midpoint(F, G))
By sas_anti_similarity on C, D, E, C, E, midpoint(E, F) we get anti_similar_triangles(C, D, E, C, E, midpoint(E, F))
By sas_anti_similarity on C, F, midpoint(E, F), C, D, F we get anti_similar_triangles(C, D, F, C, F, midpoint(E, F))
By sas_similarity on A, D, G, A, F, midpoint(F, G) we get similar_triangles(A, D, G, A, F, midpoint(F, G))
By sas_similarity on midpoint(E, G), E, D, G, B, D we get similar_triangles(B, D, G, E, D, midpoint(E, G))
By sas_similarity on C, F, midpoint(E, F), C, D, E we get similar_triangles(C, D, E, C, F, midpoint(E, F))
By sas_anti_similarity on D, A, F, D, F, midpoint(F, G) we get anti_similar_triangles(A, D, F, F, D, midpoint(F, G))
By sas_similarity on B, G, midpoint(E, G), G, H, E we get similar_triangles(B, G, midpoint(E, G), G, H, E)
By sas_similarity on D, E, midpoint(E, G), D, B, G we get similar_triangles(B, D, G, E, D, midpoint(E, G))
By sas_anti_similarity on G, D, B, midpoint(E, G), G, B we get anti_similar_triangles(B, D, G, B, G, midpoint(E, G))
By sas_similarity on midpoint(E, F), F, D, E, C, D we get similar_triangles(C, D, E, F, D, midpoint(E, F))
By aa_anti_similarity on G, midpoint(B, D), midpoint(E, G), E, midpoint(B, D), midpoint(E, G) we get anti_similar_triangles(E, midpoint(B, D), midpoint(E, G), G, midpoint(B, D), midpoint(E, G))
By sas_similarity on A, D, F, A, G, midpoint(F, G) we get similar_triangles(A, D, F, A, G, midpoint(F, G))
By sas_anti_similarity on midpoint(F, G), G, D, G, A, D we get anti_similar_triangles(A, D, G, G, D, midpoint(F, G))
By sas_similarity on G, D, B, midpoint(E, G), E, B we get similar_triangles(B, D, G, B, E, midpoint(E, G))
By sas_similarity on F, A, D, midpoint(F, G), G, D we get similar_triangles(A, D, F, G, D, midpoint(F, G))
By sas_anti_similarity on midpoint(E, G), G, D, G, B, D we get anti_similar_triangles(B, D, G, G, D, midpoint(E, G))
By sas_similarity on C, D, F, C, E, midpoint(E, F) we get similar_triangles(C, D, F, C, E, midpoint(E, F))
By sas_similarity on D, B, E, D, G, midpoint(E, G) we get similar_triangles(B, D, E, G, D, midpoint(E, G))
By sas_anti_similarity on D, C, F, D, F, midpoint(E, F) we get anti_similar_triangles(C, D, F, F, D, midpoint(E, F))
By reverse_direction on midpoint(B, D), midpoint(E, G) we get 180 == direction(midpoint(B, D), midpoint(E, G)) - direction(midpoint(E, G), midpoint(B, D)) mod 360
By sas_anti_similarity on midpoint(E, G), G, B, G, D, B we get anti_similar_triangles(B, D, G, B, G, midpoint(E, G))
By sas_similarity on D, G, midpoint(F, G), D, A, F we get similar_triangles(A, D, F, G, D, midpoint(F, G))
By sas_anti_similarity on C, E, midpoint(E, F), C, D, E we get anti_similar_triangles(C, D, E, C, E, midpoint(E, F))
By sas_similarity on D, C, F, D, E, midpoint(E, F) we get similar_triangles(C, D, F, E, D, midpoint(E, F))
By sas_anti_similarity on D, E, midpoint(E, G), H, G, E we get anti_similar_triangles(D, E, midpoint(E, G), H, G, E)
By sas_anti_similarity on E, D, C, midpoint(E, F), E, C we get anti_similar_triangles(C, D, E, C, E, midpoint(E, F))
By sas_anti_similarity on midpoint(E, F), E, D, E, C, D we get anti_similar_triangles(C, D, E, E, D, midpoint(E, F))
By sas_similarity on E, B, D, midpoint(E, G), G, D we get similar_triangles(B, D, E, G, D, midpoint(E, G))
By sas_similarity on midpoint(F, G), G, D, F, A, D we get similar_triangles(A, D, F, G, D, midpoint(F, G))
By reverse_direction on midpoint(A, D), midpoint(F, G) we get 180 == direction(midpoint(A, D), midpoint(F, G)) - direction(midpoint(F, G), midpoint(A, D)) mod 360
By sas_similarity on G, H, E, B, G, midpoint(E, G) we get similar_triangles(B, G, midpoint(E, G), G, H, E)
By sas_similarity on E, D, C, midpoint(E, F), F, C we get similar_triangles(C, D, E, C, F, midpoint(E, F))
By aa_anti_similarity on G, midpoint(A, D), midpoint(F, G), F, midpoint(A, D), midpoint(F, G) we get anti_similar_triangles(F, midpoint(A, D), midpoint(F, G), G, midpoint(A, D), midpoint(F, G))
By sas_similarity on midpoint(E, G), G, D, E, G, H we get similar_triangles(D, G, midpoint(E, G), H, G, E)
By sas_similarity on D, F, midpoint(F, G), D, A, G we get similar_triangles(A, D, G, F, D, midpoint(F, G))
By sas_similarity on A, G, midpoint(F, G), G, H, F we get similar_triangles(A, G, midpoint(F, G), G, H, F)
By sas_anti_similarity on E, H, G, midpoint(E, G), E, B we get anti_similar_triangles(B, E, midpoint(E, G), G, H, E)
By sas_similarity on midpoint(E, F), E, D, F, C, D we get similar_triangles(C, D, F, E, D, midpoint(E, F))
By sas_similarity on D, A, G, D, F, midpoint(F, G) we get similar_triangles(A, D, G, F, D, midpoint(F, G))
By sas_anti_similarity on A, F, midpoint(F, G), G, H, F we get anti_similar_triangles(A, F, midpoint(F, G), G, H, F)
By sas_anti_similarity on D, B, E, D, E, midpoint(E, G) we get anti_similar_triangles(B, D, E, E, D, midpoint(E, G))
By sas_similarity on F, G, H, midpoint(F, G), G, D we get similar_triangles(D, G, midpoint(F, G), H, G, F)
By sas_anti_similarity on midpoint(E, G), E, B, E, D, B we get anti_similar_triangles(B, D, E, B, E, midpoint(E, G))
By sas_anti_similarity on E, C, D, midpoint(E, F), E, D we get anti_similar_triangles(C, D, E, E, D, midpoint(E, F))
By sas_similarity on G, H, F, A, G, midpoint(F, G) we get similar_triangles(A, G, midpoint(F, G), G, H, F)
By sas_anti_similarity on D, G, midpoint(E, G), D, B, G we get anti_similar_triangles(B, D, G, G, D, midpoint(E, G))
By sas_similarity on D, A, F, D, G, midpoint(F, G) we get similar_triangles(A, D, F, G, D, midpoint(F, G))
By sas_similarity on G, B, D, midpoint(E, G), E, D we get similar_triangles(B, D, G, E, D, midpoint(E, G))
By aa_anti_similarity on G, midpoint(E, G), midpoint(B, D), E, midpoint(E, G), midpoint(B, D) we get anti_similar_triangles(E, midpoint(B, D), midpoint(E, G), G, midpoint(B, D), midpoint(E, G))
By sas_similarity on midpoint(F, G), G, D, F, G, H we get similar_triangles(D, G, midpoint(F, G), H, G, F)
By sas_anti_similarity on E, D, B, midpoint(E, G), E, B we get anti_similar_triangles(B, D, E, B, E, midpoint(E, G))
By sas_similarity on D, G, midpoint(F, G), H, G, F we get similar_triangles(D, G, midpoint(F, G), H, G, F)
By sas_anti_similarity on D, F, midpoint(E, F), D, C, F we get anti_similar_triangles(C, D, F, F, D, midpoint(E, F))
By sas_anti_similarity on F, A, D, midpoint(F, G), F, D we get anti_similar_triangles(A, D, F, F, D, midpoint(F, G))
By sas_similarity on D, G, midpoint(E, G), H, G, E we get similar_triangles(D, G, midpoint(E, G), H, G, E)
By sas_similarity on midpoint(E, F), E, C, F, D, C we get similar_triangles(C, D, F, C, E, midpoint(E, F))
By sas_similarity on midpoint(E, G), G, B, E, H, G we get similar_triangles(B, G, midpoint(E, G), G, H, E)
By sas_anti_similarity on C, D, F, C, F, midpoint(E, F) we get anti_similar_triangles(C, D, F, C, F, midpoint(E, F))
By sas_similarity on F, C, D, midpoint(E, F), E, D we get similar_triangles(C, D, F, E, D, midpoint(E, F))
By sas_similarity on E, D, B, midpoint(E, G), G, B we get similar_triangles(B, D, E, B, G, midpoint(E, G))
By aa_anti_similarity on F, midpoint(F, G), midpoint(A, D), G, midpoint(F, G), midpoint(A, D) we get anti_similar_triangles(F, midpoint(A, D), midpoint(F, G), G, midpoint(A, D), midpoint(F, G))
By sas_anti_similarity on F, G, H, midpoint(F, G), F, D we get anti_similar_triangles(D, F, midpoint(F, G), H, G, F)
By sas_similarity on F, D, A, midpoint(F, G), G, A we get similar_triangles(A, D, F, A, G, midpoint(F, G))
By sas_anti_similarity on G, A, D, midpoint(F, G), G, D we get anti_similar_triangles(A, D, G, G, D, midpoint(F, G))
By sas_anti_similarity on D, G, midpoint(F, G), D, A, G we get anti_similar_triangles(A, D, G, G, D, midpoint(F, G))
By sas_anti_similarity on midpoint(E, G), E, D, E, G, H we get anti_similar_triangles(D, E, midpoint(E, G), H, G, E)
By sas_anti_similarity on F, D, C, midpoint(E, F), F, C we get anti_similar_triangles(C, D, F, C, F, midpoint(E, F))
By sas_similarity on H, G, E, D, G, midpoint(E, G) we get similar_triangles(D, G, midpoint(E, G), H, G, E)
By sas_anti_similarity on midpoint(F, G), G, A, G, D, A we get anti_similar_triangles(A, D, G, A, G, midpoint(F, G))
By aa_anti_similarity on E, midpoint(B, D), midpoint(E, G), G, midpoint(B, D), midpoint(E, G) we get anti_similar_triangles(E, midpoint(B, D), midpoint(E, G), G, midpoint(B, D), midpoint(E, G))
By anti_similar_triangle_basic_properties on midpoint(C, D), midpoint(E, F), F, midpoint(C, D), midpoint(E, F), E we get angle(midpoint(C, D), midpoint(E, F), F) == 0 - angle(midpoint(C, D), midpoint(E, F), E) mod 360, angle(midpoint(E, F), F, midpoint(C, D)) == 0 - angle(midpoint(E, F), E, midpoint(C, D)) mod 360, angle(F, midpoint(C, D), midpoint(E, F)) == 0 - angle(E, midpoint(C, D), midpoint(E, F)) mod 360, log(distance(midpoint(C, D), midpoint(E, F))) + log(distance(E, midpoint(E, F))) == log(distance(midpoint(C, D), midpoint(E, F))) + log(distance(F, midpoint(E, F))), log(distance(E, midpoint(E, F))) + log(distance(F, midpoint(C, D))) == log(distance(F, midpoint(E, F))) + log(distance(E, midpoint(C, D))), log(distance(E, midpoint(C, D))) + log(distance(midpoint(C, D), midpoint(E, F))) == log(distance(F, midpoint(C, D))) + log(distance(midpoint(C, D), midpoint(E, F)))
By external_angle_bisector_definition_v0_r on midpoint(A, D), G, midpoint(A, D), midpoint(F, G) we get Line(G, midpoint(F, G)) == external_angle_bisector(midpoint(A, D), midpoint(F, G), midpoint(A, D))
By internal_angle_bisector_definition_v0_r on midpoint(F, G), A, midpoint(F, G), midpoint(A, D) we get Line(A, midpoint(A, D)) == internal_angle_bisector(midpoint(F, G), midpoint(A, D), midpoint(F, G))
By external_angle_bisector_definition_v0_r on midpoint(A, D), F, midpoint(A, D), midpoint(F, G) we get Line(F, midpoint(F, G)) == external_angle_bisector(midpoint(A, D), midpoint(F, G), midpoint(A, D))
By external_angle_bisector_definition_v0_r on D, midpoint(E, G), B, midpoint(B, D) we get Line(midpoint(B, D), midpoint(E, G)) == external_angle_bisector(B, midpoint(B, D), D)
By external_angle_bisector_definition_v0_r on midpoint(B, D), E, midpoint(B, D), midpoint(E, G) we get Line(E, midpoint(E, G)) == external_angle_bisector(midpoint(B, D), midpoint(E, G), midpoint(B, D))
By external_angle_bisector_definition_v0_r on A, midpoint(F, G), D, midpoint(A, D) we get Line(midpoint(A, D), midpoint(F, G)) == external_angle_bisector(A, midpoint(A, D), D)
By internal_angle_bisector_definition_v0_r on midpoint(E, G), D, midpoint(E, G), midpoint(B, D) we get Line(D, midpoint(B, D)) == internal_angle_bisector(midpoint(E, G), midpoint(B, D), midpoint(E, G))
By external_angle_bisector_definition_v0_r on midpoint(B, D), G, midpoint(B, D), midpoint(E, G) we get Line(G, midpoint(E, G)) == external_angle_bisector(midpoint(B, D), midpoint(E, G), midpoint(B, D))
By internal_angle_bisector_definition_v0_r on B, midpoint(E, G), midpoint(B, D), D we get Line(D, midpoint(E, G)) == internal_angle_bisector(B, D, midpoint(B, D))
By internal_angle_bisector_definition_v0_r on D, midpoint(E, G), midpoint(B, D), B we get Line(B, midpoint(E, G)) == internal_angle_bisector(D, B, midpoint(B, D))
By internal_angle_bisector_definition_v0_r on midpoint(A, D), A, midpoint(A, D), midpoint(F, G) we get Line(A, midpoint(F, G)) == internal_angle_bisector(midpoint(A, D), midpoint(F, G), midpoint(A, D))
By internal_angle_bisector_definition_v0_r on midpoint(A, D), D, midpoint(A, D), midpoint(F, G) we get Line(D, midpoint(F, G)) == internal_angle_bisector(midpoint(A, D), midpoint(F, G), midpoint(A, D))
By internal_angle_bisector_definition_v0_r on midpoint(B, D), B, midpoint(B, D), midpoint(E, G) we get Line(B, midpoint(E, G)) == internal_angle_bisector(midpoint(B, D), midpoint(E, G), midpoint(B, D))
By internal_angle_bisector_definition_v0_r on midpoint(E, G), B, midpoint(E, G), midpoint(B, D) we get Line(B, midpoint(B, D)) == internal_angle_bisector(midpoint(E, G), midpoint(B, D), midpoint(E, G))
By internal_angle_bisector_definition_v0_r on D, midpoint(F, G), midpoint(A, D), A we get Line(A, midpoint(F, G)) == internal_angle_bisector(D, A, midpoint(A, D))
By internal_angle_bisector_definition_v0_r on midpoint(F, G), D, midpoint(F, G), midpoint(A, D) we get Line(D, midpoint(A, D)) == internal_angle_bisector(midpoint(F, G), midpoint(A, D), midpoint(F, G))
By internal_angle_bisector_definition_v0_r on A, midpoint(F, G), midpoint(A, D), D we get Line(D, midpoint(F, G)) == internal_angle_bisector(A, D, midpoint(A, D))
By internal_angle_bisector_definition_v0_r on midpoint(B, D), D, midpoint(B, D), midpoint(E, G) we get Line(D, midpoint(E, G)) == internal_angle_bisector(midpoint(B, D), midpoint(E, G), midpoint(B, D))
By sas_similarity on H, G, C, D, G, I we get similar_triangles(C, G, H, I, G, D)
By sas_similarity on K, H, D, C, H, G we get similar_triangles(C, G, H, K, D, H)
By sas_anti_similarity on I, J, D, J, I, K we get anti_similar_triangles(D, I, J, K, J, I)
By sas_similarity on D, H, K, I, K, C we get similar_triangles(C, I, K, K, D, H)
By sas_similarity on C, H, G, K, H, D we get similar_triangles(C, G, H, K, D, H)
By sas_anti_similarity on D, J, I, K, I, J we get anti_similar_triangles(D, I, J, K, J, I)
By sas_similarity on I, K, C, D, H, K we get similar_triangles(C, I, K, K, D, H)
By sas_similarity on I, G, D, C, G, H we get similar_triangles(C, G, H, I, G, D)
By sas_anti_similarity on J, I, K, I, J, D we get anti_similar_triangles(D, I, J, K, J, I)
By sas_similarity on D, H, K, G, H, C we get similar_triangles(C, G, H, K, D, H)
By sas_similarity on D, G, I, H, G, C we get similar_triangles(C, G, H, I, G, D)
By sas_similarity on C, G, H, I, G, D we get similar_triangles(C, G, H, I, G, D)
By sas_similarity on D, G, I, K, I, C we get similar_triangles(C, I, K, I, G, D)
By sas_similarity on I, G, D, C, I, K we get similar_triangles(C, I, K, I, G, D)
By sas_similarity on C, K, I, K, H, D we get similar_triangles(C, I, K, K, D, H)
By sas_similarity on K, H, D, C, K, I we get similar_triangles(C, I, K, K, D, H)
By sas_similarity on C, I, K, I, G, D we get similar_triangles(C, I, K, I, G, D)
By sas_similarity on K, I, C, D, G, I we get similar_triangles(C, I, K, I, G, D)
By sas_anti_similarity on K, I, J, D, J, I we get anti_similar_triangles(D, I, J, K, J, I)
By sas_similarity on G, H, C, D, H, K we get similar_triangles(C, G, H, K, D, H)
By sas_anti_similarity on midpoint(E, G), E, H, B, G, H we get anti_similar_triangles(B, G, H, midpoint(E, G), E, H)
By sas_anti_similarity on A, G, H, midpoint(F, G), F, H we get anti_similar_triangles(A, G, H, midpoint(F, G), F, H)
By sas_anti_similarity on B, G, H, midpoint(E, G), E, H we get anti_similar_triangles(B, G, H, midpoint(E, G), E, H)
By sas_anti_similarity on H, G, B, H, E, midpoint(E, G) we get anti_similar_triangles(B, G, H, midpoint(E, G), E, H)
By sas_anti_similarity on H, E, midpoint(E, G), H, G, B we get anti_similar_triangles(B, G, H, midpoint(E, G), E, H)
By sas_anti_similarity on H, G, A, H, F, midpoint(F, G) we get anti_similar_triangles(A, G, H, midpoint(F, G), F, H)
By sas_anti_similarity on midpoint(F, G), F, H, A, G, H we get anti_similar_triangles(A, G, H, midpoint(F, G), F, H)
By sas_anti_similarity on H, F, midpoint(F, G), H, G, A we get anti_similar_triangles(A, G, H, midpoint(F, G), F, H)
By concyclic_sufficient_conditions_v0 on J, K, I, D we get concyclic(D, I, J, K)
By concyclic_sufficient_conditions_v1 on D, midpoint(E, G), E, midpoint(E, F) we get concyclic(D, E, midpoint(E, F), midpoint(E, G))
By concyclic_sufficient_conditions_v1 on D, midpoint(E, F), F, midpoint(F, G) we get concyclic(D, F, midpoint(E, F), midpoint(F, G))
By concyclic_sufficient_conditions_v1 on D, midpoint(F, G), G, midpoint(E, G) we get concyclic(D, G, midpoint(E, G), midpoint(F, G))
By radical_axis_is_perpendicular_to_center_line on Line(H, J), Circle(C, H, J), c we get perpendicular(Line(H, J), Line(center(c), center(Circle(C, H, J))))
By line_intersection_definition on H, Line(D, G), Line(H, midpoint(F, G)) we get H == line_intersection(Line(D, G), Line(H, midpoint(F, G)))
By line_intersection_definition on H, Line(B, H), Line(D, G) we get H == line_intersection(Line(B, H), Line(D, G))
By line_intersection_definition on I, Line(D, I), l we get I == line_intersection(l, Line(D, I))
By line_intersection_definition on D, Line(D, J), Line(D, K) we get D == line_intersection(Line(D, J), Line(D, K))
By line_intersection_definition on A, Line(A, H), h we get A == line_intersection(h, Line(A, H))
By line_intersection_definition on A, f, Line(A, H) we get A == line_intersection(f, Line(A, H))
By line_intersection_definition on D, Line(D, K), Line(D, I) we get D == line_intersection(Line(D, I), Line(D, K))
By line_intersection_definition on D, i, Line(D, I) we get D == line_intersection(i, Line(D, I))
By line_intersection_definition on D, Line(D, K), Line(D, F) we get D == line_intersection(Line(D, F), Line(D, K))
By line_intersection_definition on D, Line(D, F), Line(D, I) we get D == line_intersection(Line(D, F), Line(D, I))
By line_intersection_definition on H, Line(F, H), Line(B, H) we get H == line_intersection(Line(B, H), Line(F, H))
By line_intersection_definition on H, Line(H, J), Line(H, midpoint(F, G)) we get H == line_intersection(Line(H, J), Line(H, midpoint(F, G)))
By median_definition on D, C, G, Line(D, I) we get Line(D, I) == median(D, C, G)
By line_intersection_definition on H, Line(H, midpoint(E, G)), Line(H, midpoint(F, G)) we get H == line_intersection(Line(H, midpoint(E, G)), Line(H, midpoint(F, G)))
By line_intersection_definition on midpoint(F, G), i, Line(H, midpoint(F, G)) we get midpoint(F, G) == line_intersection(i, Line(H, midpoint(F, G)))
By line_intersection_definition on midpoint(F, G), Line(H, midpoint(F, G)), Line(F, G) we get midpoint(F, G) == line_intersection(Line(F, G), Line(H, midpoint(F, G)))
By line_intersection_definition on K, Line(J, K), Line(D, K) we get K == line_intersection(Line(D, K), Line(J, K))
By line_intersection_definition on H, Line(H, midpoint(E, G)), Line(F, H) we get H == line_intersection(Line(F, H), Line(H, midpoint(E, G)))
By line_intersection_definition on H, Line(A, H), Line(D, G) we get H == line_intersection(Line(A, H), Line(D, G))
By line_intersection_definition on midpoint(E, G), j, Line(H, midpoint(E, G)) we get midpoint(E, G) == line_intersection(j, Line(H, midpoint(E, G)))
By line_intersection_definition on D, Line(D, E), Line(D, I) we get D == line_intersection(Line(D, E), Line(D, I))
By line_intersection_definition on D, Line(C, D), Line(D, I) we get D == line_intersection(Line(C, D), Line(D, I))
By line_intersection_definition on H, Line(A, H), Line(H, midpoint(F, G)) we get H == line_intersection(Line(A, H), Line(H, midpoint(F, G)))
By line_intersection_definition on H, k, Line(B, H) we get H == line_intersection(k, Line(B, H))
By line_intersection_definition on D, Line(D, G), Line(D, K) we get D == line_intersection(Line(D, G), Line(D, K))
By median_definition on D, C, H, Line(D, K) we get Line(D, K) == median(D, C, H)
By line_intersection_definition on H, Line(H, midpoint(E, G)), Line(D, G) we get H == line_intersection(Line(D, G), Line(H, midpoint(E, G)))
By line_intersection_definition on H, k, Line(H, midpoint(E, G)) we get H == line_intersection(k, Line(H, midpoint(E, G)))
By line_intersection_definition on H, Line(F, H), Line(H, midpoint(F, G)) we get H == line_intersection(Line(F, H), Line(H, midpoint(F, G)))
By line_intersection_definition on H, Line(A, H), Line(H, midpoint(E, G)) we get H == line_intersection(Line(A, H), Line(H, midpoint(E, G)))
By line_intersection_definition on K, Line(D, K), Line(I, K) we get K == line_intersection(Line(D, K), Line(I, K))
By line_intersection_definition on H, Line(B, H), Line(C, H) we get H == line_intersection(Line(B, H), Line(C, H))
By median_definition on H, G, F, Line(H, midpoint(F, G)) we get median(H, F, G) == Line(H, midpoint(F, G))
By line_intersection_definition on H, Line(H, J), Line(B, H) we get H == line_intersection(Line(B, H), Line(H, J))
By line_intersection_definition on H, Line(C, H), Line(H, midpoint(F, G)) we get H == line_intersection(Line(C, H), Line(H, midpoint(F, G)))
By line_intersection_definition on A, Line(A, H), i we get A == line_intersection(i, Line(A, H))
By line_intersection_definition on H, Line(B, H), Line(H, midpoint(E, G)) we get H == line_intersection(Line(B, H), Line(H, midpoint(E, G)))
By line_intersection_definition on H, Line(A, H), Line(B, H) we get H == line_intersection(Line(A, H), Line(B, H))
By line_intersection_definition on midpoint(E, G), Line(E, G), Line(H, midpoint(E, G)) we get midpoint(E, G) == line_intersection(Line(E, G), Line(H, midpoint(E, G)))
By line_intersection_definition on B, f, Line(B, H) we get B == line_intersection(f, Line(B, H))
By median_definition on H, E, G, Line(H, midpoint(E, G)) we get median(H, E, G) == Line(H, midpoint(E, G))
By line_intersection_definition on H, Line(C, H), Line(H, midpoint(E, G)) we get H == line_intersection(Line(C, H), Line(H, midpoint(E, G)))
By line_intersection_definition on B, Line(B, H), g we get B == line_intersection(g, Line(B, H))
By line_intersection_definition on H, Line(A, H), Line(H, J) we get H == line_intersection(Line(A, H), Line(H, J))
By line_intersection_definition on H, Line(C, H), Line(A, H) we get H == line_intersection(Line(A, H), Line(C, H))
By line_intersection_definition on H, Line(H, midpoint(E, G)), Line(H, J) we get H == line_intersection(Line(H, J), Line(H, midpoint(E, G)))
By line_intersection_definition on H, Line(A, H), k we get H == line_intersection(k, Line(A, H))
By line_intersection_definition on H, Line(H, midpoint(F, G)), Line(B, H) we get H == line_intersection(Line(B, H), Line(H, midpoint(F, G)))
By line_intersection_definition on I, Line(D, I), Line(I, K) we get I == line_intersection(Line(D, I), Line(I, K))
By line_intersection_definition on K, Line(D, K), Line(C, H) we get K == line_intersection(Line(C, H), Line(D, K))
By line_intersection_definition on D, Line(C, D), Line(D, K) we get D == line_intersection(Line(C, D), Line(D, K))
By line_intersection_definition on D, Line(D, K), i we get D == line_intersection(i, Line(D, K))
By line_intersection_definition on D, Line(D, E), Line(D, K) we get D == line_intersection(Line(D, E), Line(D, K))
By line_intersection_definition on B, Line(B, H), j we get B == line_intersection(j, Line(B, H))
By line_intersection_definition on D, Line(D, I), Line(D, J) we get D == line_intersection(Line(D, I), Line(D, J))
By line_intersection_definition on D, Line(D, G), Line(D, I) we get D == line_intersection(Line(D, G), Line(D, I))
By median_definition on K, G, H, Line(D, K) we get Line(D, K) == median(K, G, H)
By median_definition on I, H, G, Line(D, I) we get Line(D, I) == median(I, G, H)
By line_intersection_definition on H, Line(F, H), Line(A, H) we get H == line_intersection(Line(A, H), Line(F, H))
By line_intersection_definition on H, k, Line(H, midpoint(F, G)) we get H == line_intersection(k, Line(H, midpoint(F, G)))
By line_intersection_definition on D, j, Line(D, K) we get D == line_intersection(j, Line(D, K))
By line_intersection_definition on D, j, Line(D, I) we get D == line_intersection(j, Line(D, I))
By same_angle_v3 on I, J, C, D we get angle(J, I, D) == angle(C, I, D) + 180 mod 360
By same_angle_v0 on A, F, C, H we get angle(C, A, H) == angle(F, A, H) mod 360
By same_angle_v2 on D, H, G, I we get angle(H, D, I) == angle(G, D, I) + 180 mod 360
By same_angle_v0 on H, K, C, B we get angle(C, H, B) == angle(K, H, B) mod 360
By perpendicular_direction_conditions_v0 on D, K, J, H we get perpendicular(Line(D, K), Line(H, J))
By same_angle_v2 on D, H, G, K we get angle(H, D, K) == angle(G, D, K) + 180 mod 360
By same_angle_v0 on H, G, D, A we get angle(D, H, A) == angle(G, H, A) mod 360
By same_angle_v1 on H, K, C, A we get angle(C, H, A) == angle(K, H, A) mod 360
By same_angle_v1 on H, D, G, B we get angle(D, H, B) == angle(G, H, B) mod 360
By same_angle_v2 on K, C, H, D we get angle(C, K, D) == angle(H, K, D) + 180 mod 360
By same_angle_v2 on I, G, C, D we get angle(G, I, D) == angle(C, I, D) + 180 mod 360
By same_angle_v1 on A, B, G, H we get angle(B, A, H) == angle(G, A, H) mod 360
By same_angle_v1 on B, E, C, H we get angle(C, B, H) == angle(E, B, H) mod 360
By same_angle_v0 on B, A, G, H we get angle(A, B, H) == angle(G, B, H) mod 360
By anti_similar_triangle_basic_properties on B, G, midpoint(E, G), E, D, midpoint(E, G) we get angle(B, G, midpoint(E, G)) == 0 - angle(E, D, midpoint(E, G)) mod 360, angle(G, midpoint(E, G), B) == 0 - angle(D, midpoint(E, G), E) mod 360, angle(midpoint(E, G), B, G) == 0 - angle(midpoint(E, G), E, D) mod 360, log(distance(B, G)) + log(distance(D, midpoint(E, G))) == log(distance(D, E)) + log(distance(G, midpoint(E, G))), log(distance(D, midpoint(E, G))) + log(distance(B, midpoint(E, G))) == log(distance(G, midpoint(E, G))) + log(distance(E, midpoint(E, G))), log(distance(B, midpoint(E, G))) + log(distance(D, E)) == log(distance(E, midpoint(E, G))) + log(distance(B, G))
By anti_similar_triangle_basic_properties on E, D, midpoint(E, G), B, D, E we get 0 - angle(B, D, E) == angle(E, D, midpoint(E, G)) mod 360, 0 - angle(D, E, B) == angle(D, midpoint(E, G), E) mod 360, 0 - angle(E, B, D) == angle(midpoint(E, G), E, D) mod 360, log(distance(D, E)) + log(distance(D, E)) == log(distance(B, D)) + log(distance(D, midpoint(E, G))), log(distance(D, E)) + log(distance(E, midpoint(E, G))) == log(distance(D, midpoint(E, G))) + log(distance(B, E)), log(distance(B, E)) + log(distance(D, E)) == log(distance(E, midpoint(E, G))) + log(distance(B, D))
By anti_similar_triangle_basic_properties on C, midpoint(E, F), F, C, F, D we get 0 - angle(C, F, D) == angle(C, midpoint(E, F), F) mod 360, 0 - angle(F, D, C) == angle(midpoint(E, F), F, C) mod 360, 0 - angle(D, C, F) == angle(F, C, midpoint(E, F)) mod 360, log(distance(C, F)) + log(distance(F, midpoint(E, F))) == log(distance(C, midpoint(E, F))) + log(distance(D, F)), log(distance(D, F)) + log(distance(C, F)) == log(distance(F, midpoint(E, F))) + log(distance(C, D)), log(distance(C, F)) + log(distance(C, F)) == log(distance(C, D)) + log(distance(C, midpoint(E, F)))
By anti_similar_triangle_basic_properties on midpoint(E, F), C, E, E, C, D we get 0 - angle(E, C, D) == angle(midpoint(E, F), C, E) mod 360, 0 - angle(C, D, E) == angle(C, E, midpoint(E, F)) mod 360, 0 - angle(D, E, C) == angle(E, midpoint(E, F), C) mod 360, log(distance(C, E)) + log(distance(C, E)) == log(distance(C, midpoint(E, F))) + log(distance(C, D)), log(distance(C, E)) + log(distance(D, E)) == log(distance(C, D)) + log(distance(E, midpoint(E, F))), log(distance(D, E)) + log(distance(C, midpoint(E, F))) == log(distance(E, midpoint(E, F))) + log(distance(C, E))
By anti_similar_triangle_basic_properties on midpoint(F, G), A, G, G, A, D we get 0 - angle(G, A, D) == angle(midpoint(F, G), A, G) mod 360, 0 - angle(A, D, G) == angle(A, G, midpoint(F, G)) mod 360, 0 - angle(D, G, A) == angle(G, midpoint(F, G), A) mod 360, log(distance(A, G)) + log(distance(A, G)) == log(distance(A, midpoint(F, G))) + log(distance(A, D)), log(distance(A, G)) + log(distance(D, G)) == log(distance(A, D)) + log(distance(G, midpoint(F, G))), log(distance(D, G)) + log(distance(A, midpoint(F, G))) == log(distance(G, midpoint(F, G))) + log(distance(A, G))
By similar_triangle_basic_properties on midpoint(E, F), E, D, F, C, D we get angle(F, C, D) == angle(midpoint(E, F), E, D) mod 360, angle(C, D, F) == angle(E, D, midpoint(E, F)) mod 360, angle(D, F, C) == angle(D, midpoint(E, F), E) mod 360, log(distance(C, F)) + log(distance(D, E)) == log(distance(E, midpoint(E, F))) + log(distance(C, D)), log(distance(D, E)) + log(distance(D, F)) == log(distance(C, D)) + log(distance(D, midpoint(E, F))), log(distance(D, F)) + log(distance(E, midpoint(E, F))) == log(distance(D, midpoint(E, F))) + log(distance(C, F))
By similar_triangle_basic_properties on E, G, H, midpoint(E, G), B, G we get angle(E, G, H) == angle(midpoint(E, G), B, G) mod 360, angle(G, H, E) == angle(B, G, midpoint(E, G)) mod 360, angle(H, E, G) == angle(G, midpoint(E, G), B) mod 360, log(distance(E, G)) + log(distance(B, G)) == log(distance(B, midpoint(E, G))) + log(distance(G, H)), log(distance(B, G)) + log(distance(E, H)) == log(distance(G, H)) + log(distance(G, midpoint(E, G))), log(distance(E, H)) + log(distance(B, midpoint(E, G))) == log(distance(G, midpoint(E, G))) + log(distance(E, G))
By similar_triangle_basic_properties on D, midpoint(E, G), E, D, G, B we get angle(D, G, B) == angle(D, midpoint(E, G), E) mod 360, angle(G, B, D) == angle(midpoint(E, G), E, D) mod 360, angle(B, D, G) == angle(E, D, midpoint(E, G)) mod 360, log(distance(D, G)) + log(distance(E, midpoint(E, G))) == log(distance(D, midpoint(E, G))) + log(distance(B, G)), log(distance(B, G)) + log(distance(D, E)) == log(distance(E, midpoint(E, G))) + log(distance(B, D)), log(distance(D, E)) + log(distance(D, G)) == log(distance(B, D)) + log(distance(D, midpoint(E, G)))
By similar_triangle_basic_properties on midpoint(E, F), E, C, midpoint(E, F), D, E we get angle(midpoint(E, F), D, E) == angle(midpoint(E, F), E, C) mod 360, angle(D, E, midpoint(E, F)) == angle(E, C, midpoint(E, F)) mod 360, angle(C, midpoint(E, F), E) == angle(E, midpoint(E, F), D) mod 360, log(distance(D, midpoint(E, F))) + log(distance(C, E)) == log(distance(E, midpoint(E, F))) + log(distance(D, E)), log(distance(C, E)) + log(distance(E, midpoint(E, F))) == log(distance(D, E)) + log(distance(C, midpoint(E, F))), log(distance(C, midpoint(E, F))) + log(distance(D, midpoint(E, F))) == log(distance(E, midpoint(E, F))) + log(distance(E, midpoint(E, F)))
By similar_triangle_basic_properties on midpoint(E, G), D, G, E, H, G we get angle(E, H, G) == angle(midpoint(E, G), D, G) mod 360, angle(H, G, E) == angle(D, G, midpoint(E, G)) mod 360, angle(G, E, H) == angle(G, midpoint(E, G), D) mod 360, log(distance(E, H)) + log(distance(D, G)) == log(distance(D, midpoint(E, G))) + log(distance(G, H)), log(distance(D, G)) + log(distance(E, G)) == log(distance(G, H)) + log(distance(G, midpoint(E, G))), log(distance(E, G)) + log(distance(D, midpoint(E, G))) == log(distance(G, midpoint(E, G))) + log(distance(E, H))
By parallel_line_angles_reverse_v0 on I, K, D, H we get angle(H, D, K) == angle(I, K, D) mod 360
By anti_similar_triangle_basic_properties on A, D, F, A, F, midpoint(F, G) we get angle(A, D, F) == 0 - angle(A, F, midpoint(F, G)) mod 360, angle(D, F, A) == 0 - angle(F, midpoint(F, G), A) mod 360, angle(F, A, D) == 0 - angle(midpoint(F, G), A, F) mod 360, log(distance(A, F)) + log(distance(D, F)) == log(distance(A, D)) + log(distance(F, midpoint(F, G))), log(distance(D, F)) + log(distance(A, midpoint(F, G))) == log(distance(F, midpoint(F, G))) + log(distance(A, F)), log(distance(A, F)) + log(distance(A, F)) == log(distance(A, midpoint(F, G))) + log(distance(A, D))
By anti_similar_triangle_basic_properties on C, D, E, E, D, midpoint(E, F) we get angle(C, D, E) == 0 - angle(E, D, midpoint(E, F)) mod 360, angle(D, E, C) == 0 - angle(D, midpoint(E, F), E) mod 360, angle(E, C, D) == 0 - angle(midpoint(E, F), E, D) mod 360, log(distance(D, E)) + log(distance(D, E)) == log(distance(C, D)) + log(distance(D, midpoint(E, F))), log(distance(D, E)) + log(distance(E, midpoint(E, F))) == log(distance(D, midpoint(E, F))) + log(distance(C, E)), log(distance(C, E)) + log(distance(D, E)) == log(distance(E, midpoint(E, F))) + log(distance(C, D))
By similar_triangle_basic_properties on F, C, midpoint(E, F), D, C, E we get angle(D, C, E) == angle(F, C, midpoint(E, F)) mod 360, angle(C, E, D) == angle(C, midpoint(E, F), F) mod 360, angle(E, D, C) == angle(midpoint(E, F), F, C) mod 360, log(distance(C, F)) + log(distance(C, E)) == log(distance(C, D)) + log(distance(C, midpoint(E, F))), log(distance(C, E)) + log(distance(F, midpoint(E, F))) == log(distance(C, midpoint(E, F))) + log(distance(D, E)), log(distance(D, E)) + log(distance(C, F)) == log(distance(F, midpoint(E, F))) + log(distance(C, D))
By anti_similar_triangle_basic_properties on D, midpoint(E, G), G, E, midpoint(E, G), B we get angle(D, midpoint(E, G), G) == 0 - angle(E, midpoint(E, G), B) mod 360, angle(midpoint(E, G), G, D) == 0 - angle(midpoint(E, G), B, E) mod 360, angle(G, D, midpoint(E, G)) == 0 - angle(B, E, midpoint(E, G)) mod 360, log(distance(D, midpoint(E, G))) + log(distance(B, midpoint(E, G))) == log(distance(E, midpoint(E, G))) + log(distance(G, midpoint(E, G))), log(distance(B, midpoint(E, G))) + log(distance(D, G)) == log(distance(G, midpoint(E, G))) + log(distance(B, E)), log(distance(B, E)) + log(distance(D, midpoint(E, G))) == log(distance(D, G)) + log(distance(E, midpoint(E, G)))
By anti_similar_triangle_basic_properties on E, midpoint(E, F), C, D, midpoint(E, F), F we get angle(E, midpoint(E, F), C) == 0 - angle(D, midpoint(E, F), F) mod 360, angle(midpoint(E, F), C, E) == 0 - angle(midpoint(E, F), F, D) mod 360, angle(C, E, midpoint(E, F)) == 0 - angle(F, D, midpoint(E, F)) mod 360, log(distance(D, midpoint(E, F))) + log(distance(C, midpoint(E, F))) == log(distance(E, midpoint(E, F))) + log(distance(F, midpoint(E, F))), log(distance(C, midpoint(E, F))) + log(distance(D, F)) == log(distance(F, midpoint(E, F))) + log(distance(C, E)), log(distance(C, E)) + log(distance(D, midpoint(E, F))) == log(distance(D, F)) + log(distance(E, midpoint(E, F)))
By similar_triangle_basic_properties on midpoint(F, G), G, A, midpoint(F, G), D, G we get angle(midpoint(F, G), D, G) == angle(midpoint(F, G), G, A) mod 360, angle(D, G, midpoint(F, G)) == angle(G, A, midpoint(F, G)) mod 360, angle(A, midpoint(F, G), G) == angle(G, midpoint(F, G), D) mod 360, log(distance(D, midpoint(F, G))) + log(distance(A, G)) == log(distance(G, midpoint(F, G))) + log(distance(D, G)), log(distance(A, G)) + log(distance(G, midpoint(F, G))) == log(distance(D, G)) + log(distance(A, midpoint(F, G))), log(distance(A, midpoint(F, G))) + log(distance(D, midpoint(F, G))) == log(distance(G, midpoint(F, G))) + log(distance(G, midpoint(F, G)))
By similar_triangle_basic_properties on midpoint(F, G), F, A, G, D, A we get angle(G, D, A) == angle(midpoint(F, G), F, A) mod 360, angle(D, A, G) == angle(F, A, midpoint(F, G)) mod 360, angle(A, G, D) == angle(A, midpoint(F, G), F) mod 360, log(distance(D, G)) + log(distance(A, F)) == log(distance(F, midpoint(F, G))) + log(distance(A, D)), log(distance(A, F)) + log(distance(A, G)) == log(distance(A, D)) + log(distance(A, midpoint(F, G))), log(distance(A, G)) + log(distance(F, midpoint(F, G))) == log(distance(A, midpoint(F, G))) + log(distance(D, G))
By similar_triangle_basic_properties on F, A, midpoint(F, G), D, F, midpoint(F, G) we get angle(D, F, midpoint(F, G)) == angle(F, A, midpoint(F, G)) mod 360, angle(A, midpoint(F, G), F) == angle(F, midpoint(F, G), D) mod 360, angle(midpoint(F, G), D, F) == angle(midpoint(F, G), F, A) mod 360, log(distance(A, F)) + log(distance(F, midpoint(F, G))) == log(distance(D, F)) + log(distance(A, midpoint(F, G))), log(distance(A, midpoint(F, G))) + log(distance(D, midpoint(F, G))) == log(distance(F, midpoint(F, G))) + log(distance(F, midpoint(F, G))), log(distance(D, midpoint(F, G))) + log(distance(A, F)) == log(distance(F, midpoint(F, G))) + log(distance(D, F))
By anti_similar_triangle_basic_properties on A, F, D, F, midpoint(F, G), D we get angle(A, F, D) == 0 - angle(F, midpoint(F, G), D) mod 360, angle(F, D, A) == 0 - angle(midpoint(F, G), D, F) mod 360, angle(D, A, F) == 0 - angle(D, F, midpoint(F, G)) mod 360, log(distance(A, F)) + log(distance(D, midpoint(F, G))) == log(distance(F, midpoint(F, G))) + log(distance(D, F)), log(distance(D, F)) + log(distance(D, F)) == log(distance(D, midpoint(F, G))) + log(distance(A, D)), log(distance(D, F)) + log(distance(A, F)) == log(distance(A, D)) + log(distance(F, midpoint(F, G)))
By similar_triangle_basic_properties on A, G, D, F, midpoint(F, G), D we get angle(A, G, D) == angle(F, midpoint(F, G), D) mod 360, angle(G, D, A) == angle(midpoint(F, G), D, F) mod 360, angle(D, A, G) == angle(D, F, midpoint(F, G)) mod 360, log(distance(A, G)) + log(distance(D, midpoint(F, G))) == log(distance(F, midpoint(F, G))) + log(distance(D, G)), log(distance(D, G)) + log(distance(D, F)) == log(distance(D, midpoint(F, G))) + log(distance(A, D)), log(distance(D, F)) + log(distance(A, G)) == log(distance(A, D)) + log(distance(F, midpoint(F, G)))
By anti_similar_triangle_basic_properties on B, midpoint(E, G), E, G, midpoint(E, G), D we get angle(B, midpoint(E, G), E) == 0 - angle(G, midpoint(E, G), D) mod 360, angle(midpoint(E, G), E, B) == 0 - angle(midpoint(E, G), D, G) mod 360, angle(E, B, midpoint(E, G)) == 0 - angle(D, G, midpoint(E, G)) mod 360, log(distance(B, midpoint(E, G))) + log(distance(D, midpoint(E, G))) == log(distance(G, midpoint(E, G))) + log(distance(E, midpoint(E, G))), log(distance(D, midpoint(E, G))) + log(distance(B, E)) == log(distance(E, midpoint(E, G))) + log(distance(D, G)), log(distance(B, E)) + log(distance(G, midpoint(E, G))) == log(distance(D, G)) + log(distance(B, midpoint(E, G)))
By parallel_line_angles_reverse_v2 on I, K, D, G we get angle(I, K, D) == angle(G, D, K) + 180 mod 360
By anti_similar_triangle_basic_properties on midpoint(E, F), E, D, midpoint(E, F), C, F we get angle(midpoint(E, F), E, D) == 0 - angle(midpoint(E, F), C, F) mod 360, angle(E, D, midpoint(E, F)) == 0 - angle(C, F, midpoint(E, F)) mod 360, angle(D, midpoint(E, F), E) == 0 - angle(F, midpoint(E, F), C) mod 360, log(distance(C, midpoint(E, F))) + log(distance(D, E)) == log(distance(E, midpoint(E, F))) + log(distance(C, F)), log(distance(C, F)) + log(distance(D, midpoint(E, F))) == log(distance(D, E)) + log(distance(F, midpoint(E, F))), log(distance(D, midpoint(E, F))) + log(distance(C, midpoint(E, F))) == log(distance(F, midpoint(E, F))) + log(distance(E, midpoint(E, F)))
By similar_triangle_basic_properties on D, E, C, D, midpoint(E, F), F we get angle(D, E, C) == angle(D, midpoint(E, F), F) mod 360, angle(E, C, D) == angle(midpoint(E, F), F, D) mod 360, angle(C, D, E) == angle(F, D, midpoint(E, F)) mod 360, log(distance(D, E)) + log(distance(F, midpoint(E, F))) == log(distance(D, midpoint(E, F))) + log(distance(C, E)), log(distance(C, E)) + log(distance(D, F)) == log(distance(F, midpoint(E, F))) + log(distance(C, D)), log(distance(D, F)) + log(distance(D, E)) == log(distance(C, D)) + log(distance(D, midpoint(E, F)))
By parallel_line_angles_reverse_v0 on E, H, B, D we get angle(D, B, H) == angle(E, H, B) mod 360
By similar_triangle_basic_properties on D, F, midpoint(E, F), F, C, midpoint(E, F) we get angle(D, F, midpoint(E, F)) == angle(F, C, midpoint(E, F)) mod 360, angle(C, midpoint(E, F), F) == angle(F, midpoint(E, F), D) mod 360, angle(midpoint(E, F), D, F) == angle(midpoint(E, F), F, C) mod 360, log(distance(C, F)) + log(distance(F, midpoint(E, F))) == log(distance(D, F)) + log(distance(C, midpoint(E, F))), log(distance(C, midpoint(E, F))) + log(distance(D, midpoint(E, F))) == log(distance(F, midpoint(E, F))) + log(distance(F, midpoint(E, F))), log(distance(D, midpoint(E, F))) + log(distance(C, F)) == log(distance(F, midpoint(E, F))) + log(distance(D, F))
By anti_similar_triangle_basic_properties on E, B, midpoint(E, G), D, B, E we get 0 - angle(D, B, E) == angle(E, B, midpoint(E, G)) mod 360, 0 - angle(B, E, D) == angle(B, midpoint(E, G), E) mod 360, 0 - angle(E, D, B) == angle(midpoint(E, G), E, B) mod 360, log(distance(B, E)) + log(distance(B, E)) == log(distance(B, D)) + log(distance(B, midpoint(E, G))), log(distance(B, E)) + log(distance(E, midpoint(E, G))) == log(distance(B, midpoint(E, G))) + log(distance(D, E)), log(distance(D, E)) + log(distance(B, E)) == log(distance(E, midpoint(E, G))) + log(distance(B, D))
By anti_similar_triangle_basic_properties on G, F, H, A, midpoint(F, G), F we get angle(G, F, H) == 0 - angle(A, midpoint(F, G), F) mod 360, angle(F, H, G) == 0 - angle(midpoint(F, G), F, A) mod 360, angle(H, G, F) == 0 - angle(F, A, midpoint(F, G)) mod 360, log(distance(A, midpoint(F, G))) + log(distance(F, H)) == log(distance(F, G)) + log(distance(F, midpoint(F, G))), log(distance(F, H)) + log(distance(A, F)) == log(distance(F, midpoint(F, G))) + log(distance(G, H)), log(distance(A, F)) + log(distance(F, G)) == log(distance(G, H)) + log(distance(A, midpoint(F, G)))
By similar_triangle_basic_properties on B, midpoint(E, G), G, G, midpoint(E, G), D we get angle(B, midpoint(E, G), G) == angle(G, midpoint(E, G), D) mod 360, angle(midpoint(E, G), D, G) == angle(midpoint(E, G), G, B) mod 360, angle(D, G, midpoint(E, G)) == angle(G, B, midpoint(E, G)) mod 360, log(distance(B, midpoint(E, G))) + log(distance(D, midpoint(E, G))) == log(distance(G, midpoint(E, G))) + log(distance(G, midpoint(E, G))), log(distance(D, midpoint(E, G))) + log(distance(B, G)) == log(distance(G, midpoint(E, G))) + log(distance(D, G)), log(distance(B, G)) + log(distance(G, midpoint(E, G))) == log(distance(D, G)) + log(distance(B, midpoint(E, G)))
By anti_similar_triangle_basic_properties on F, midpoint(F, G), A, D, midpoint(F, G), G we get angle(F, midpoint(F, G), A) == 0 - angle(D, midpoint(F, G), G) mod 360, angle(midpoint(F, G), A, F) == 0 - angle(midpoint(F, G), G, D) mod 360, angle(A, F, midpoint(F, G)) == 0 - angle(G, D, midpoint(F, G)) mod 360, log(distance(D, midpoint(F, G))) + log(distance(A, midpoint(F, G))) == log(distance(F, midpoint(F, G))) + log(distance(G, midpoint(F, G))), log(distance(A, midpoint(F, G))) + log(distance(D, G)) == log(distance(G, midpoint(F, G))) + log(distance(A, F)), log(distance(A, F)) + log(distance(D, midpoint(F, G))) == log(distance(D, G)) + log(distance(F, midpoint(F, G)))
By reverse_direction on H, midpoint(F, G) we get 180 == direction(H, midpoint(F, G)) - direction(midpoint(F, G), H) mod 360
By similar_triangle_basic_properties on G, midpoint(E, G), B, D, midpoint(E, G), G we get angle(D, midpoint(E, G), G) == angle(G, midpoint(E, G), B) mod 360, angle(midpoint(E, G), B, G) == angle(midpoint(E, G), G, D) mod 360, angle(B, G, midpoint(E, G)) == angle(G, D, midpoint(E, G)) mod 360, log(distance(D, midpoint(E, G))) + log(distance(B, midpoint(E, G))) == log(distance(G, midpoint(E, G))) + log(distance(G, midpoint(E, G))), log(distance(B, midpoint(E, G))) + log(distance(D, G)) == log(distance(G, midpoint(E, G))) + log(distance(B, G)), log(distance(B, G)) + log(distance(D, midpoint(E, G))) == log(distance(D, G)) + log(distance(G, midpoint(E, G)))
By parallel_line_angles_reverse_v2 on H, D, I, K we get angle(H, D, I) == angle(K, I, D) + 180 mod 360
By similar_triangle_basic_properties on B, G, D, E, midpoint(E, G), D we get angle(B, G, D) == angle(E, midpoint(E, G), D) mod 360, angle(G, D, B) == angle(midpoint(E, G), D, E) mod 360, angle(D, B, G) == angle(D, E, midpoint(E, G)) mod 360, log(distance(B, G)) + log(distance(D, midpoint(E, G))) == log(distance(E, midpoint(E, G))) + log(distance(D, G)), log(distance(D, G)) + log(distance(D, E)) == log(distance(D, midpoint(E, G))) + log(distance(B, D)), log(distance(D, E)) + log(distance(B, G)) == log(distance(B, D)) + log(distance(E, midpoint(E, G)))
By similar_triangle_basic_properties on D, B, G, E, B, midpoint(E, G) we get angle(D, B, G) == angle(E, B, midpoint(E, G)) mod 360, angle(B, G, D) == angle(B, midpoint(E, G), E) mod 360, angle(G, D, B) == angle(midpoint(E, G), E, B) mod 360, log(distance(B, E)) + log(distance(B, G)) == log(distance(B, D)) + log(distance(B, midpoint(E, G))), log(distance(B, G)) + log(distance(E, midpoint(E, G))) == log(distance(B, midpoint(E, G))) + log(distance(D, G)), log(distance(D, G)) + log(distance(B, E)) == log(distance(E, midpoint(E, G))) + log(distance(B, D))
By parallel_line_angles_reverse_v1 on F, H, A, D we get angle(D, A, H) == angle(F, H, A) mod 360
By similar_triangle_basic_properties on D, midpoint(F, G), G, H, F, G we get angle(H, F, G) == angle(D, midpoint(F, G), G) mod 360, angle(F, G, H) == angle(midpoint(F, G), G, D) mod 360, angle(G, H, F) == angle(G, D, midpoint(F, G)) mod 360, log(distance(D, midpoint(F, G))) + log(distance(F, G)) == log(distance(F, H)) + log(distance(G, midpoint(F, G))), log(distance(F, G)) + log(distance(D, G)) == log(distance(G, midpoint(F, G))) + log(distance(G, H)), log(distance(D, G)) + log(distance(F, H)) == log(distance(G, H)) + log(distance(D, midpoint(F, G)))
By similar_triangle_basic_properties on F, G, H, midpoint(F, G), A, G we get angle(F, G, H) == angle(midpoint(F, G), A, G) mod 360, angle(G, H, F) == angle(A, G, midpoint(F, G)) mod 360, angle(H, F, G) == angle(G, midpoint(F, G), A) mod 360, log(distance(F, G)) + log(distance(A, G)) == log(distance(A, midpoint(F, G))) + log(distance(G, H)), log(distance(A, G)) + log(distance(F, H)) == log(distance(G, H)) + log(distance(G, midpoint(F, G))), log(distance(F, H)) + log(distance(A, midpoint(F, G))) == log(distance(G, midpoint(F, G))) + log(distance(F, G))
By similar_triangle_basic_properties on E, B, D, midpoint(E, G), G, D we get angle(E, B, D) == angle(midpoint(E, G), G, D) mod 360, angle(B, D, E) == angle(G, D, midpoint(E, G)) mod 360, angle(D, E, B) == angle(D, midpoint(E, G), G) mod 360, log(distance(B, E)) + log(distance(D, G)) == log(distance(G, midpoint(E, G))) + log(distance(B, D)), log(distance(D, G)) + log(distance(D, E)) == log(distance(B, D)) + log(distance(D, midpoint(E, G))), log(distance(D, E)) + log(distance(G, midpoint(E, G))) == log(distance(D, midpoint(E, G))) + log(distance(B, E))
By anti_similar_triangle_basic_properties on E, midpoint(E, F), D, C, midpoint(E, F), F we get angle(E, midpoint(E, F), D) == 0 - angle(C, midpoint(E, F), F) mod 360, angle(midpoint(E, F), D, E) == 0 - angle(midpoint(E, F), F, C) mod 360, angle(D, E, midpoint(E, F)) == 0 - angle(F, C, midpoint(E, F)) mod 360, log(distance(C, midpoint(E, F))) + log(distance(D, midpoint(E, F))) == log(distance(E, midpoint(E, F))) + log(distance(F, midpoint(E, F))), log(distance(D, midpoint(E, F))) + log(distance(C, F)) == log(distance(F, midpoint(E, F))) + log(distance(D, E)), log(distance(C, F)) + log(distance(E, midpoint(E, F))) == log(distance(D, E)) + log(distance(C, midpoint(E, F)))
By similar_triangle_basic_properties on midpoint(E, F), C, E, F, C, D we get angle(F, C, D) == angle(midpoint(E, F), C, E) mod 360, angle(C, D, F) == angle(C, E, midpoint(E, F)) mod 360, angle(D, F, C) == angle(E, midpoint(E, F), C) mod 360, log(distance(C, F)) + log(distance(C, E)) == log(distance(C, midpoint(E, F))) + log(distance(C, D)), log(distance(C, E)) + log(distance(D, F)) == log(distance(C, D)) + log(distance(E, midpoint(E, F))), log(distance(D, F)) + log(distance(C, midpoint(E, F))) == log(distance(E, midpoint(E, F))) + log(distance(C, F))
By similar_triangle_basic_properties on D, G, midpoint(E, G), D, B, E we get angle(D, B, E) == angle(D, G, midpoint(E, G)) mod 360, angle(B, E, D) == angle(G, midpoint(E, G), D) mod 360, angle(E, D, B) == angle(midpoint(E, G), D, G) mod 360, log(distance(D, G)) + log(distance(B, E)) == log(distance(B, D)) + log(distance(G, midpoint(E, G))), log(distance(B, E)) + log(distance(D, midpoint(E, G))) == log(distance(G, midpoint(E, G))) + log(distance(D, E)), log(distance(D, E)) + log(distance(D, G)) == log(distance(D, midpoint(E, G))) + log(distance(B, D))
By anti_similar_triangle_basic_properties on midpoint(E, G), E, D, E, G, H we get 0 - angle(E, G, H) == angle(midpoint(E, G), E, D) mod 360, 0 - angle(G, H, E) == angle(E, D, midpoint(E, G)) mod 360, 0 - angle(H, E, G) == angle(D, midpoint(E, G), E) mod 360, log(distance(E, G)) + log(distance(D, E)) == log(distance(E, midpoint(E, G))) + log(distance(G, H)), log(distance(D, E)) + log(distance(E, H)) == log(distance(G, H)) + log(distance(D, midpoint(E, G))), log(distance(D, midpoint(E, G))) + log(distance(E, G)) == log(distance(E, H)) + log(distance(E, midpoint(E, G)))
By anti_similar_triangle_basic_properties on D, G, midpoint(F, G), F, A, midpoint(F, G) we get angle(D, G, midpoint(F, G)) == 0 - angle(F, A, midpoint(F, G)) mod 360, angle(G, midpoint(F, G), D) == 0 - angle(A, midpoint(F, G), F) mod 360, angle(midpoint(F, G), D, G) == 0 - angle(midpoint(F, G), F, A) mod 360, log(distance(A, F)) + log(distance(G, midpoint(F, G))) == log(distance(D, G)) + log(distance(A, midpoint(F, G))), log(distance(A, midpoint(F, G))) + log(distance(D, midpoint(F, G))) == log(distance(G, midpoint(F, G))) + log(distance(F, midpoint(F, G))), log(distance(D, midpoint(F, G))) + log(distance(A, F)) == log(distance(F, midpoint(F, G))) + log(distance(D, G))
By similar_triangle_basic_properties on F, A, D, midpoint(F, G), A, G we get angle(F, A, D) == angle(midpoint(F, G), A, G) mod 360, angle(A, D, F) == angle(A, G, midpoint(F, G)) mod 360, angle(D, F, A) == angle(G, midpoint(F, G), A) mod 360, log(distance(A, F)) + log(distance(A, G)) == log(distance(A, midpoint(F, G))) + log(distance(A, D)), log(distance(A, G)) + log(distance(D, F)) == log(distance(A, D)) + log(distance(G, midpoint(F, G))), log(distance(D, F)) + log(distance(A, midpoint(F, G))) == log(distance(G, midpoint(F, G))) + log(distance(A, F))
By similar_triangle_basic_properties on D, E, C, F, midpoint(E, F), C we get angle(D, E, C) == angle(F, midpoint(E, F), C) mod 360, angle(E, C, D) == angle(midpoint(E, F), C, F) mod 360, angle(C, D, E) == angle(C, F, midpoint(E, F)) mod 360, log(distance(D, E)) + log(distance(C, midpoint(E, F))) == log(distance(F, midpoint(E, F))) + log(distance(C, E)), log(distance(C, E)) + log(distance(C, F)) == log(distance(C, midpoint(E, F))) + log(distance(C, D)), log(distance(C, F)) + log(distance(D, E)) == log(distance(C, D)) + log(distance(F, midpoint(E, F)))
By anti_similar_triangle_basic_properties on E, B, D, midpoint(E, G), B, E we get angle(E, B, D) == 0 - angle(midpoint(E, G), B, E) mod 360, angle(B, D, E) == 0 - angle(B, E, midpoint(E, G)) mod 360, angle(D, E, B) == 0 - angle(E, midpoint(E, G), B) mod 360, log(distance(B, E)) + log(distance(B, E)) == log(distance(B, midpoint(E, G))) + log(distance(B, D)), log(distance(B, E)) + log(distance(D, E)) == log(distance(B, D)) + log(distance(E, midpoint(E, G))), log(distance(D, E)) + log(distance(B, midpoint(E, G))) == log(distance(E, midpoint(E, G))) + log(distance(B, E))
By similar_triangle_basic_properties on F, D, C, midpoint(E, F), D, E we get angle(F, D, C) == angle(midpoint(E, F), D, E) mod 360, angle(D, C, F) == angle(D, E, midpoint(E, F)) mod 360, angle(C, F, D) == angle(E, midpoint(E, F), D) mod 360, log(distance(D, F)) + log(distance(D, E)) == log(distance(D, midpoint(E, F))) + log(distance(C, D)), log(distance(D, E)) + log(distance(C, F)) == log(distance(C, D)) + log(distance(E, midpoint(E, F))), log(distance(C, F)) + log(distance(D, midpoint(E, F))) == log(distance(E, midpoint(E, F))) + log(distance(D, F))
By anti_similar_triangle_basic_properties on F, midpoint(E, F), D, C, F, D we get 0 - angle(C, F, D) == angle(F, midpoint(E, F), D) mod 360, 0 - angle(F, D, C) == angle(midpoint(E, F), D, F) mod 360, 0 - angle(D, C, F) == angle(D, F, midpoint(E, F)) mod 360, log(distance(C, F)) + log(distance(D, midpoint(E, F))) == log(distance(F, midpoint(E, F))) + log(distance(D, F)), log(distance(D, F)) + log(distance(D, F)) == log(distance(D, midpoint(E, F))) + log(distance(C, D)), log(distance(D, F)) + log(distance(C, F)) == log(distance(C, D)) + log(distance(F, midpoint(E, F)))
By anti_similar_triangle_basic_properties on E, B, midpoint(E, G), H, G, E we get 0 - angle(H, G, E) == angle(E, B, midpoint(E, G)) mod 360, 0 - angle(G, E, H) == angle(B, midpoint(E, G), E) mod 360, 0 - angle(E, H, G) == angle(midpoint(E, G), E, B) mod 360, log(distance(B, E)) + log(distance(E, G)) == log(distance(G, H)) + log(distance(B, midpoint(E, G))), log(distance(B, midpoint(E, G))) + log(distance(E, H)) == log(distance(E, G)) + log(distance(E, midpoint(E, G))), log(distance(E, H)) + log(distance(B, E)) == log(distance(E, midpoint(E, G))) + log(distance(G, H))
By parallel_line_angles_reverse_v1 on K, I, D, G we get angle(G, D, I) == angle(K, I, D) mod 360
By anti_similar_triangle_basic_properties on H, F, G, D, midpoint(F, G), F we get angle(H, F, G) == 0 - angle(D, midpoint(F, G), F) mod 360, angle(F, G, H) == 0 - angle(midpoint(F, G), F, D) mod 360, angle(G, H, F) == 0 - angle(F, D, midpoint(F, G)) mod 360, log(distance(D, midpoint(F, G))) + log(distance(F, G)) == log(distance(F, H)) + log(distance(F, midpoint(F, G))), log(distance(F, G)) + log(distance(D, F)) == log(distance(F, midpoint(F, G))) + log(distance(G, H)), log(distance(D, F)) + log(distance(F, H)) == log(distance(G, H)) + log(distance(D, midpoint(F, G)))
By parallel_line_angles_reverse_v3 on K, I, D, H we get angle(K, I, D) == angle(H, D, I) + 180 mod 360
By similar_triangle_basic_properties on D, C, F, E, C, midpoint(E, F) we get angle(D, C, F) == angle(E, C, midpoint(E, F)) mod 360, angle(C, F, D) == angle(C, midpoint(E, F), E) mod 360, angle(F, D, C) == angle(midpoint(E, F), E, C) mod 360, log(distance(C, E)) + log(distance(C, F)) == log(distance(C, D)) + log(distance(C, midpoint(E, F))), log(distance(C, F)) + log(distance(E, midpoint(E, F))) == log(distance(C, midpoint(E, F))) + log(distance(D, F)), log(distance(D, F)) + log(distance(C, E)) == log(distance(E, midpoint(E, F))) + log(distance(C, D))
By anti_similar_triangle_basic_properties on G, midpoint(F, G), D, A, G, D we get 0 - angle(A, G, D) == angle(G, midpoint(F, G), D) mod 360, 0 - angle(G, D, A) == angle(midpoint(F, G), D, G) mod 360, 0 - angle(D, A, G) == angle(D, G, midpoint(F, G)) mod 360, log(distance(A, G)) + log(distance(D, midpoint(F, G))) == log(distance(G, midpoint(F, G))) + log(distance(D, G)), log(distance(D, G)) + log(distance(D, G)) == log(distance(D, midpoint(F, G))) + log(distance(A, D)), log(distance(D, G)) + log(distance(A, G)) == log(distance(A, D)) + log(distance(G, midpoint(F, G)))
By similar_triangle_basic_properties on midpoint(E, G), B, E, G, B, D we get angle(G, B, D) == angle(midpoint(E, G), B, E) mod 360, angle(B, D, G) == angle(B, E, midpoint(E, G)) mod 360, angle(D, G, B) == angle(E, midpoint(E, G), B) mod 360, log(distance(B, G)) + log(distance(B, E)) == log(distance(B, midpoint(E, G))) + log(distance(B, D)), log(distance(B, E)) + log(distance(D, G)) == log(distance(B, D)) + log(distance(E, midpoint(E, G))), log(distance(D, G)) + log(distance(B, midpoint(E, G))) == log(distance(E, midpoint(E, G))) + log(distance(B, G))
By anti_similar_triangle_basic_properties on midpoint(E, G), G, B, midpoint(E, G), D, E we get angle(midpoint(E, G), G, B) == 0 - angle(midpoint(E, G), D, E) mod 360, angle(G, B, midpoint(E, G)) == 0 - angle(D, E, midpoint(E, G)) mod 360, angle(B, midpoint(E, G), G) == 0 - angle(E, midpoint(E, G), D) mod 360, log(distance(D, midpoint(E, G))) + log(distance(B, G)) == log(distance(G, midpoint(E, G))) + log(distance(D, E)), log(distance(B, G)) + log(distance(E, midpoint(E, G))) == log(distance(D, E)) + log(distance(B, midpoint(E, G))), log(distance(B, midpoint(E, G))) + log(distance(D, midpoint(E, G))) == log(distance(E, midpoint(E, G))) + log(distance(G, midpoint(E, G)))
By similar_triangle_basic_properties on midpoint(E, F), D, F, E, D, C we get angle(E, D, C) == angle(midpoint(E, F), D, F) mod 360, angle(D, C, E) == angle(D, F, midpoint(E, F)) mod 360, angle(C, E, D) == angle(F, midpoint(E, F), D) mod 360, log(distance(D, E)) + log(distance(D, F)) == log(distance(D, midpoint(E, F))) + log(distance(C, D)), log(distance(D, F)) + log(distance(C, E)) == log(distance(C, D)) + log(distance(F, midpoint(E, F))), log(distance(C, E)) + log(distance(D, midpoint(E, F))) == log(distance(F, midpoint(E, F))) + log(distance(D, E))
By anti_similar_triangle_basic_properties on G, D, B, midpoint(E, G), G, B we get angle(G, D, B) == 0 - angle(midpoint(E, G), G, B) mod 360, angle(D, B, G) == 0 - angle(G, B, midpoint(E, G)) mod 360, angle(B, G, D) == 0 - angle(B, midpoint(E, G), G) mod 360, log(distance(D, G)) + log(distance(B, G)) == log(distance(G, midpoint(E, G))) + log(distance(B, D)), log(distance(B, G)) + log(distance(B, G)) == log(distance(B, D)) + log(distance(B, midpoint(E, G))), log(distance(B, G)) + log(distance(G, midpoint(E, G))) == log(distance(B, midpoint(E, G))) + log(distance(D, G))
By anti_similar_triangle_basic_properties on midpoint(F, G), G, A, midpoint(F, G), D, F we get angle(midpoint(F, G), G, A) == 0 - angle(midpoint(F, G), D, F) mod 360, angle(G, A, midpoint(F, G)) == 0 - angle(D, F, midpoint(F, G)) mod 360, angle(A, midpoint(F, G), G) == 0 - angle(F, midpoint(F, G), D) mod 360, log(distance(D, midpoint(F, G))) + log(distance(A, G)) == log(distance(G, midpoint(F, G))) + log(distance(D, F)), log(distance(A, G)) + log(distance(F, midpoint(F, G))) == log(distance(D, F)) + log(distance(A, midpoint(F, G))), log(distance(A, midpoint(F, G))) + log(distance(D, midpoint(F, G))) == log(distance(F, midpoint(F, G))) + log(distance(G, midpoint(F, G)))
By anti_similar_triangle_basic_properties on F, midpoint(E, F), C, D, F, C we get 0 - angle(D, F, C) == angle(F, midpoint(E, F), C) mod 360, 0 - angle(F, C, D) == angle(midpoint(E, F), C, F) mod 360, 0 - angle(C, D, F) == angle(C, F, midpoint(E, F)) mod 360, log(distance(D, F)) + log(distance(C, midpoint(E, F))) == log(distance(F, midpoint(E, F))) + log(distance(C, F)), log(distance(C, F)) + log(distance(C, F)) == log(distance(C, midpoint(E, F))) + log(distance(C, D)), log(distance(C, F)) + log(distance(D, F)) == log(distance(C, D)) + log(distance(F, midpoint(E, F)))
By anti_similar_triangle_basic_properties on A, G, midpoint(F, G), F, D, midpoint(F, G) we get angle(A, G, midpoint(F, G)) == 0 - angle(F, D, midpoint(F, G)) mod 360, angle(G, midpoint(F, G), A) == 0 - angle(D, midpoint(F, G), F) mod 360, angle(midpoint(F, G), A, G) == 0 - angle(midpoint(F, G), F, D) mod 360, log(distance(A, G)) + log(distance(D, midpoint(F, G))) == log(distance(D, F)) + log(distance(G, midpoint(F, G))), log(distance(D, midpoint(F, G))) + log(distance(A, midpoint(F, G))) == log(distance(G, midpoint(F, G))) + log(distance(F, midpoint(F, G))), log(distance(A, midpoint(F, G))) + log(distance(D, F)) == log(distance(F, midpoint(F, G))) + log(distance(A, G))
By anti_similar_triangle_basic_properties on G, D, B, midpoint(E, G), D, G we get angle(G, D, B) == 0 - angle(midpoint(E, G), D, G) mod 360, angle(D, B, G) == 0 - angle(D, G, midpoint(E, G)) mod 360, angle(B, G, D) == 0 - angle(G, midpoint(E, G), D) mod 360, log(distance(D, G)) + log(distance(D, G)) == log(distance(D, midpoint(E, G))) + log(distance(B, D)), log(distance(D, G)) + log(distance(B, G)) == log(distance(B, D)) + log(distance(G, midpoint(E, G))), log(distance(B, G)) + log(distance(D, midpoint(E, G))) == log(distance(G, midpoint(E, G))) + log(distance(D, G))
By asa_congruence on K, C, I, H, K, D we get congruent_triangles(C, I, K, K, D, H)
By similar_triangle_basic_properties on G, B, midpoint(E, G), D, B, E we get angle(D, B, E) == angle(G, B, midpoint(E, G)) mod 360, angle(B, E, D) == angle(B, midpoint(E, G), G) mod 360, angle(E, D, B) == angle(midpoint(E, G), G, B) mod 360, log(distance(B, G)) + log(distance(B, E)) == log(distance(B, D)) + log(distance(B, midpoint(E, G))), log(distance(B, E)) + log(distance(G, midpoint(E, G))) == log(distance(B, midpoint(E, G))) + log(distance(D, E)), log(distance(D, E)) + log(distance(B, G)) == log(distance(G, midpoint(E, G))) + log(distance(B, D))
By congruence_from_similar_triangles on I, G, D, C, I, K we get congruent_triangles(C, I, K, I, G, D)
By similar_triangle_basic_properties on A, F, midpoint(F, G), A, D, G we get angle(A, D, G) == angle(A, F, midpoint(F, G)) mod 360, angle(D, G, A) == angle(F, midpoint(F, G), A) mod 360, angle(G, A, D) == angle(midpoint(F, G), A, F) mod 360, log(distance(A, F)) + log(distance(D, G)) == log(distance(A, D)) + log(distance(F, midpoint(F, G))), log(distance(D, G)) + log(distance(A, midpoint(F, G))) == log(distance(F, midpoint(F, G))) + log(distance(A, G)), log(distance(A, G)) + log(distance(A, F)) == log(distance(A, midpoint(F, G))) + log(distance(A, D))
By anti_similar_triangle_basic_properties on D, midpoint(F, G), F, D, F, A we get 0 - angle(D, F, A) == angle(D, midpoint(F, G), F) mod 360, 0 - angle(F, A, D) == angle(midpoint(F, G), F, D) mod 360, 0 - angle(A, D, F) == angle(F, D, midpoint(F, G)) mod 360, log(distance(D, F)) + log(distance(F, midpoint(F, G))) == log(distance(D, midpoint(F, G))) + log(distance(A, F)), log(distance(A, F)) + log(distance(D, F)) == log(distance(F, midpoint(F, G))) + log(distance(A, D)), log(distance(D, F)) + log(distance(D, F)) == log(distance(A, D)) + log(distance(D, midpoint(F, G)))
By asa_anti_congruence on J, I, K, I, J, D we get anti_congruent_triangles(D, I, J, K, J, I)
By anti_congruence_from_anti_similar_triangles on I, J, D, J, I, K we get anti_congruent_triangles(D, I, J, K, J, I)
By anti_similar_triangle_basic_properties on A, D, G, G, D, midpoint(F, G) we get angle(A, D, G) == 0 - angle(G, D, midpoint(F, G)) mod 360, angle(D, G, A) == 0 - angle(D, midpoint(F, G), G) mod 360, angle(G, A, D) == 0 - angle(midpoint(F, G), G, D) mod 360, log(distance(D, G)) + log(distance(D, G)) == log(distance(A, D)) + log(distance(D, midpoint(F, G))), log(distance(D, G)) + log(distance(G, midpoint(F, G))) == log(distance(D, midpoint(F, G))) + log(distance(A, G)), log(distance(A, G)) + log(distance(D, G)) == log(distance(G, midpoint(F, G))) + log(distance(A, D))
By anti_similar_triangle_basic_properties on D, G, B, D, midpoint(E, G), G we get angle(D, G, B) == 0 - angle(D, midpoint(E, G), G) mod 360, angle(G, B, D) == 0 - angle(midpoint(E, G), G, D) mod 360, angle(B, D, G) == 0 - angle(G, D, midpoint(E, G)) mod 360, log(distance(D, G)) + log(distance(G, midpoint(E, G))) == log(distance(D, midpoint(E, G))) + log(distance(B, G)), log(distance(B, G)) + log(distance(D, G)) == log(distance(G, midpoint(E, G))) + log(distance(B, D)), log(distance(D, G)) + log(distance(D, G)) == log(distance(B, D)) + log(distance(D, midpoint(E, G)))
By similar_triangle_basic_properties on F, A, D, midpoint(F, G), G, D we get angle(F, A, D) == angle(midpoint(F, G), G, D) mod 360, angle(A, D, F) == angle(G, D, midpoint(F, G)) mod 360, angle(D, F, A) == angle(D, midpoint(F, G), G) mod 360, log(distance(A, F)) + log(distance(D, G)) == log(distance(G, midpoint(F, G))) + log(distance(A, D)), log(distance(D, G)) + log(distance(D, F)) == log(distance(A, D)) + log(distance(D, midpoint(F, G))), log(distance(D, F)) + log(distance(G, midpoint(F, G))) == log(distance(D, midpoint(F, G))) + log(distance(A, F))
By similar_triangle_basic_properties on A, F, D, G, midpoint(F, G), D we get angle(A, F, D) == angle(G, midpoint(F, G), D) mod 360, angle(F, D, A) == angle(midpoint(F, G), D, G) mod 360, angle(D, A, F) == angle(D, G, midpoint(F, G)) mod 360, log(distance(A, F)) + log(distance(D, midpoint(F, G))) == log(distance(G, midpoint(F, G))) + log(distance(D, F)), log(distance(D, F)) + log(distance(D, G)) == log(distance(D, midpoint(F, G))) + log(distance(A, D)), log(distance(D, G)) + log(distance(A, F)) == log(distance(A, D)) + log(distance(G, midpoint(F, G)))
By similar_triangle_basic_properties on F, D, A, midpoint(F, G), G, A we get angle(F, D, A) == angle(midpoint(F, G), G, A) mod 360, angle(D, A, F) == angle(G, A, midpoint(F, G)) mod 360, angle(A, F, D) == angle(A, midpoint(F, G), G) mod 360, log(distance(D, F)) + log(distance(A, G)) == log(distance(G, midpoint(F, G))) + log(distance(A, D)), log(distance(A, G)) + log(distance(A, F)) == log(distance(A, D)) + log(distance(A, midpoint(F, G))), log(distance(A, F)) + log(distance(G, midpoint(F, G))) == log(distance(A, midpoint(F, G))) + log(distance(D, F))
By similar_triangle_basic_properties on G, A, D, midpoint(F, G), F, D we get angle(G, A, D) == angle(midpoint(F, G), F, D) mod 360, angle(A, D, G) == angle(F, D, midpoint(F, G)) mod 360, angle(D, G, A) == angle(D, midpoint(F, G), F) mod 360, log(distance(A, G)) + log(distance(D, F)) == log(distance(F, midpoint(F, G))) + log(distance(A, D)), log(distance(D, F)) + log(distance(D, G)) == log(distance(A, D)) + log(distance(D, midpoint(F, G))), log(distance(D, G)) + log(distance(F, midpoint(F, G))) == log(distance(D, midpoint(F, G))) + log(distance(A, G))
By similar_triangle_basic_properties on B, D, E, B, G, midpoint(E, G) we get angle(B, D, E) == angle(B, G, midpoint(E, G)) mod 360, angle(D, E, B) == angle(G, midpoint(E, G), B) mod 360, angle(E, B, D) == angle(midpoint(E, G), B, G) mod 360, log(distance(B, G)) + log(distance(D, E)) == log(distance(B, D)) + log(distance(G, midpoint(E, G))), log(distance(D, E)) + log(distance(B, midpoint(E, G))) == log(distance(G, midpoint(E, G))) + log(distance(B, E)), log(distance(B, E)) + log(distance(B, G)) == log(distance(B, midpoint(E, G))) + log(distance(B, D))
By anti_similar_triangle_basic_properties on D, midpoint(E, F), F, D, F, C we get 0 - angle(D, F, C) == angle(D, midpoint(E, F), F) mod 360, 0 - angle(F, C, D) == angle(midpoint(E, F), F, D) mod 360, 0 - angle(C, D, F) == angle(F, D, midpoint(E, F)) mod 360, log(distance(D, F)) + log(distance(F, midpoint(E, F))) == log(distance(D, midpoint(E, F))) + log(distance(C, F)), log(distance(C, F)) + log(distance(D, F)) == log(distance(F, midpoint(E, F))) + log(distance(C, D)), log(distance(D, F)) + log(distance(D, F)) == log(distance(C, D)) + log(distance(D, midpoint(E, F)))
By asa_congruence on G, I, D, I, C, K we get congruent_triangles(C, I, K, I, G, D)
By parallel_line_angles_reverse_v3 on G, D, K, I we get angle(G, D, K) == angle(I, K, D) + 180 mod 360
By similar_triangle_basic_properties on midpoint(E, G), E, D, midpoint(E, G), B, E we get angle(midpoint(E, G), B, E) == angle(midpoint(E, G), E, D) mod 360, angle(B, E, midpoint(E, G)) == angle(E, D, midpoint(E, G)) mod 360, angle(D, midpoint(E, G), E) == angle(E, midpoint(E, G), B) mod 360, log(distance(B, midpoint(E, G))) + log(distance(D, E)) == log(distance(E, midpoint(E, G))) + log(distance(B, E)), log(distance(B, E)) + log(distance(D, midpoint(E, G))) == log(distance(D, E)) + log(distance(E, midpoint(E, G))), log(distance(D, midpoint(E, G))) + log(distance(B, midpoint(E, G))) == log(distance(E, midpoint(E, G))) + log(distance(E, midpoint(E, G)))
By asa_congruence on D, H, K, G, D, I we get congruent_triangles(D, G, I, H, D, K)
By congruence_from_similar_triangles on K, C, I, H, K, D we get congruent_triangles(C, I, K, K, D, H)
By congruence_from_similar_triangles on K, H, D, C, K, I we get congruent_triangles(C, I, K, K, D, H)
By congruence_from_similar_triangles on H, D, K, D, G, I we get congruent_triangles(D, G, I, H, D, K)
By asa_congruence on I, G, D, C, I, K we get congruent_triangles(C, I, K, I, G, D)
By asa_congruence on K, H, D, C, K, I we get congruent_triangles(C, I, K, K, D, H)
By reverse_direction on H, midpoint(E, G) we get 180 == direction(H, midpoint(E, G)) - direction(midpoint(E, G), H) mod 360
By congruence_from_similar_triangles on C, I, K, I, G, D we get congruent_triangles(C, I, K, I, G, D)
By anti_similar_triangle_basic_properties on midpoint(E, F), D, F, midpoint(E, F), E, C we get angle(midpoint(E, F), D, F) == 0 - angle(midpoint(E, F), E, C) mod 360, angle(D, F, midpoint(E, F)) == 0 - angle(E, C, midpoint(E, F)) mod 360, angle(F, midpoint(E, F), D) == 0 - angle(C, midpoint(E, F), E) mod 360, log(distance(D, midpoint(E, F))) + log(distance(C, E)) == log(distance(E, midpoint(E, F))) + log(distance(D, F)), log(distance(C, E)) + log(distance(F, midpoint(E, F))) == log(distance(D, F)) + log(distance(C, midpoint(E, F))), log(distance(C, midpoint(E, F))) + log(distance(D, midpoint(E, F))) == log(distance(F, midpoint(E, F))) + log(distance(E, midpoint(E, F)))
By anti_congruence_from_anti_similar_triangles on J, I, K, I, J, D we get anti_congruent_triangles(D, I, J, K, J, I)
By reverse_direction on H, A we get 180 == direction(H, A) - direction(A, H) mod 360
By asa_anti_congruence on I, J, K, J, I, D we get anti_congruent_triangles(D, I, J, K, J, I)
By congruence_from_similar_triangles on C, K, I, K, H, D we get congruent_triangles(C, I, K, K, D, H)
By reverse_direction on A, H we get 180 == direction(A, H) - direction(H, A) mod 360
By asa_congruence on H, D, K, D, G, I we get congruent_triangles(D, G, I, H, D, K)
By congruence_from_similar_triangles on D, H, K, G, D, I we get congruent_triangles(D, G, I, H, D, K)
By congruence_from_similar_triangles on G, I, D, I, C, K we get congruent_triangles(C, I, K, I, G, D)
By asa_congruence on I, C, K, G, I, D we get congruent_triangles(C, I, K, I, G, D)
By asa_congruence on G, D, I, D, H, K we get congruent_triangles(D, G, I, H, D, K)
By reverse_direction on H, B we get 180 == direction(H, B) - direction(B, H) mod 360
By asa_congruence on D, G, I, H, D, K we get congruent_triangles(D, G, I, H, D, K)
By asa_congruence on C, K, I, K, H, D we get congruent_triangles(C, I, K, K, D, H)
By congruence_from_similar_triangles on H, K, D, K, C, I we get congruent_triangles(C, I, K, K, D, H)
By reverse_direction on B, H we get 180 == direction(B, H) - direction(H, B) mod 360
By congruence_from_similar_triangles on I, C, K, G, I, D we get congruent_triangles(C, I, K, I, G, D)
By asa_congruence on C, I, K, I, G, D we get congruent_triangles(C, I, K, I, G, D)
By asa_congruence on H, K, D, K, C, I we get congruent_triangles(C, I, K, K, D, H)
By reverse_direction on midpoint(F, G), H we get 180 == direction(midpoint(F, G), H) - direction(H, midpoint(F, G)) mod 360
By anti_congruence_from_anti_similar_triangles on J, I, D, I, J, K we get anti_congruent_triangles(D, I, J, K, J, I)
By asa_anti_congruence on J, I, D, I, J, K we get anti_congruent_triangles(D, I, J, K, J, I)
By congruence_from_similar_triangles on D, G, I, H, D, K we get congruent_triangles(D, G, I, H, D, K)
By congruence_from_similar_triangles on G, D, I, D, H, K we get congruent_triangles(D, G, I, H, D, K)
By anti_congruence_from_anti_similar_triangles on I, J, K, J, I, D we get anti_congruent_triangles(D, I, J, K, J, I)
By reverse_direction on midpoint(E, G), H we get 180 == direction(midpoint(E, G), H) - direction(H, midpoint(E, G)) mod 360
By asa_anti_congruence on I, J, D, J, I, K we get anti_congruent_triangles(D, I, J, K, J, I)
By internal_angle_bisector_definition_v0_r on midpoint(A, D), A, midpoint(F, G), D we get Line(A, D) == internal_angle_bisector(midpoint(A, D), D, midpoint(F, G))
By similar_triangle_basic_properties on C, I, K, K, D, H we get angle(C, I, K) == angle(K, D, H) mod 360, angle(D, H, K) == angle(I, K, C) mod 360, angle(H, K, D) == angle(K, C, I) mod 360, log(distance(C, I)) + log(distance(D, H)) == log(distance(D, K)) + log(distance(I, K)), log(distance(D, H)) + log(distance(C, K)) == log(distance(I, K)) + log(distance(H, K)), log(distance(C, K)) + log(distance(D, K)) == log(distance(H, K)) + log(distance(C, I))
By anti_similar_triangle_basic_properties on midpoint(A, D), G, midpoint(F, G), midpoint(A, D), F, midpoint(F, G) we get angle(midpoint(A, D), G, midpoint(F, G)) == 0 - angle(midpoint(A, D), F, midpoint(F, G)) mod 360, angle(G, midpoint(F, G), midpoint(A, D)) == 0 - angle(F, midpoint(F, G), midpoint(A, D)) mod 360, angle(midpoint(F, G), midpoint(A, D), G) == 0 - angle(midpoint(F, G), midpoint(A, D), F) mod 360, log(distance(F, midpoint(A, D))) + log(distance(G, midpoint(F, G))) == log(distance(G, midpoint(A, D))) + log(distance(F, midpoint(F, G))), log(distance(F, midpoint(F, G))) + log(distance(midpoint(A, D), midpoint(F, G))) == log(distance(G, midpoint(F, G))) + log(distance(midpoint(A, D), midpoint(F, G))), log(distance(midpoint(A, D), midpoint(F, G))) + log(distance(F, midpoint(A, D))) == log(distance(midpoint(A, D), midpoint(F, G))) + log(distance(G, midpoint(A, D)))
By internal_angle_bisector_definition_v0_r on midpoint(A, D), D, midpoint(F, G), A we get Line(A, D) == internal_angle_bisector(midpoint(A, D), A, midpoint(F, G))
By similar_triangle_basic_properties on K, C, I, D, I, G we get angle(D, I, G) == angle(K, C, I) mod 360, angle(C, I, K) == angle(I, G, D) mod 360, angle(G, D, I) == angle(I, K, C) mod 360, log(distance(C, K)) + log(distance(G, I)) == log(distance(D, I)) + log(distance(C, I)), log(distance(C, I)) + log(distance(D, G)) == log(distance(G, I)) + log(distance(I, K)), log(distance(D, G)) + log(distance(C, K)) == log(distance(I, K)) + log(distance(D, I))
By similar_triangle_basic_properties on K, H, D, C, K, I we get angle(C, K, I) == angle(K, H, D) mod 360, angle(H, D, K) == angle(K, I, C) mod 360, angle(D, K, H) == angle(I, C, K) mod 360, log(distance(C, K)) + log(distance(D, H)) == log(distance(H, K)) + log(distance(I, K)), log(distance(D, H)) + log(distance(C, I)) == log(distance(I, K)) + log(distance(D, K)), log(distance(C, I)) + log(distance(H, K)) == log(distance(D, K)) + log(distance(C, K))
By internal_angle_bisector_definition_v0_r on midpoint(E, F), C, midpoint(C, D), D we get Line(C, D) == internal_angle_bisector(midpoint(C, D), D, midpoint(E, F))
By internal_angle_bisector_definition_v0_r on midpoint(E, F), midpoint(C, D), C, D we get Line(D, midpoint(C, D)) == internal_angle_bisector(C, D, midpoint(E, F))
By external_angle_bisector_definition_v0_r on C, midpoint(C, D), D, midpoint(E, F) we get Line(midpoint(C, D), midpoint(E, F)) == external_angle_bisector(C, midpoint(E, F), D)
By anti_similar_triangle_basic_properties on E, midpoint(E, G), midpoint(B, D), G, midpoint(E, G), midpoint(B, D) we get angle(E, midpoint(E, G), midpoint(B, D)) == 0 - angle(G, midpoint(E, G), midpoint(B, D)) mod 360, angle(midpoint(E, G), midpoint(B, D), E) == 0 - angle(midpoint(E, G), midpoint(B, D), G) mod 360, angle(midpoint(B, D), E, midpoint(E, G)) == 0 - angle(midpoint(B, D), G, midpoint(E, G)) mod 360, log(distance(E, midpoint(E, G))) + log(distance(midpoint(B, D), midpoint(E, G))) == log(distance(G, midpoint(E, G))) + log(distance(midpoint(B, D), midpoint(E, G))), log(distance(midpoint(B, D), midpoint(E, G))) + log(distance(E, midpoint(B, D))) == log(distance(midpoint(B, D), midpoint(E, G))) + log(distance(G, midpoint(B, D))), log(distance(E, midpoint(B, D))) + log(distance(G, midpoint(E, G))) == log(distance(G, midpoint(B, D))) + log(distance(E, midpoint(E, G)))
By internal_angle_bisector_definition_v0_r on D, G, A, midpoint(F, G) we get Line(G, midpoint(F, G)) == internal_angle_bisector(A, midpoint(F, G), D)
By internal_angle_bisector_definition_v0_r on midpoint(F, G), midpoint(A, D), A, D we get Line(D, midpoint(A, D)) == internal_angle_bisector(A, D, midpoint(F, G))
By similar_triangle_basic_properties on K, D, H, C, G, H we get angle(C, G, H) == angle(K, D, H) mod 360, angle(D, H, K) == angle(G, H, C) mod 360, angle(H, C, G) == angle(H, K, D) mod 360, log(distance(C, G)) + log(distance(D, H)) == log(distance(D, K)) + log(distance(G, H)), log(distance(D, H)) + log(distance(C, H)) == log(distance(G, H)) + log(distance(H, K)), log(distance(C, H)) + log(distance(D, K)) == log(distance(H, K)) + log(distance(C, G))
By internal_angle_bisector_definition_v0_r on midpoint(E, F), D, midpoint(C, D), C we get Line(C, D) == internal_angle_bisector(midpoint(C, D), C, midpoint(E, F))
By similar_triangle_basic_properties on C, H, G, K, H, D we get angle(C, H, G) == angle(K, H, D) mod 360, angle(H, D, K) == angle(H, G, C) mod 360, angle(D, K, H) == angle(G, C, H) mod 360, log(distance(C, H)) + log(distance(D, H)) == log(distance(H, K)) + log(distance(G, H)), log(distance(D, H)) + log(distance(C, G)) == log(distance(G, H)) + log(distance(D, K)), log(distance(C, G)) + log(distance(H, K)) == log(distance(D, K)) + log(distance(C, H))
By external_angle_bisector_definition_v0_r on D, midpoint(A, D), A, midpoint(F, G) we get Line(midpoint(A, D), midpoint(F, G)) == external_angle_bisector(A, midpoint(F, G), D)
By similar_triangle_basic_properties on G, I, D, I, C, K we get angle(G, I, D) == angle(I, C, K) mod 360, angle(C, K, I) == angle(I, D, G) mod 360, angle(D, G, I) == angle(K, I, C) mod 360, log(distance(C, I)) + log(distance(D, I)) == log(distance(G, I)) + log(distance(C, K)), log(distance(C, K)) + log(distance(D, G)) == log(distance(D, I)) + log(distance(I, K)), log(distance(D, G)) + log(distance(C, I)) == log(distance(I, K)) + log(distance(G, I))
By external_angle_bisector_definition_v0_r on B, midpoint(B, D), D, midpoint(E, G) we get Line(midpoint(B, D), midpoint(E, G)) == external_angle_bisector(B, midpoint(E, G), D)
By internal_angle_bisector_definition_v0_r on midpoint(E, G), D, midpoint(B, D), B we get Line(B, D) == internal_angle_bisector(midpoint(B, D), B, midpoint(E, G))
By anti_similar_triangle_basic_properties on D, I, J, K, J, I we get angle(D, I, J) == 0 - angle(K, J, I) mod 360, angle(I, J, D) == 0 - angle(J, I, K) mod 360, angle(J, D, I) == 0 - angle(I, K, J) mod 360, log(distance(D, I)) + log(distance(I, J)) == log(distance(J, K)) + log(distance(I, J)), log(distance(I, J)) + log(distance(D, J)) == log(distance(I, J)) + log(distance(I, K)), log(distance(D, J)) + log(distance(J, K)) == log(distance(I, K)) + log(distance(D, I))
By anti_similar_triangle_basic_properties on I, D, J, J, K, I we get angle(I, D, J) == 0 - angle(J, K, I) mod 360, angle(D, J, I) == 0 - angle(K, I, J) mod 360, angle(J, I, D) == 0 - angle(I, J, K) mod 360, log(distance(D, I)) + log(distance(I, K)) == log(distance(J, K)) + log(distance(D, J)), log(distance(D, J)) + log(distance(I, J)) == log(distance(I, K)) + log(distance(I, J)), log(distance(I, J)) + log(distance(D, I)) == log(distance(I, J)) + log(distance(J, K))
By internal_angle_bisector_definition_v0_r on midpoint(B, D), B, midpoint(E, G), D we get Line(B, D) == internal_angle_bisector(midpoint(B, D), D, midpoint(E, G))
By internal_angle_bisector_definition_v0_r on C, E, D, midpoint(E, F) we get Line(E, midpoint(E, F)) == internal_angle_bisector(C, midpoint(E, F), D)
By internal_angle_bisector_definition_v0_r on D, G, B, midpoint(E, G) we get Line(G, midpoint(E, G)) == internal_angle_bisector(B, midpoint(E, G), D)
By internal_angle_bisector_definition_v0_r on midpoint(E, G), midpoint(B, D), D, B we get Line(B, midpoint(B, D)) == internal_angle_bisector(D, B, midpoint(E, G))
By internal_angle_bisector_definition_v0_r on midpoint(E, F), midpoint(C, D), D, C we get Line(C, midpoint(C, D)) == internal_angle_bisector(D, C, midpoint(E, F))
By internal_angle_bisector_definition_v0_r on A, F, D, midpoint(F, G) we get Line(F, midpoint(F, G)) == internal_angle_bisector(A, midpoint(F, G), D)
By similar_triangle_basic_properties on D, G, I, H, G, C we get angle(D, G, I) == angle(H, G, C) mod 360, angle(G, C, H) == angle(G, I, D) mod 360, angle(C, H, G) == angle(I, D, G) mod 360, log(distance(D, G)) + log(distance(C, G)) == log(distance(G, H)) + log(distance(G, I)), log(distance(C, G)) + log(distance(D, I)) == log(distance(G, I)) + log(distance(C, H)), log(distance(C, H)) + log(distance(D, G)) == log(distance(D, I)) + log(distance(G, H))
By internal_angle_bisector_definition_v0_r on B, E, D, midpoint(E, G) we get Line(E, midpoint(E, G)) == internal_angle_bisector(B, midpoint(E, G), D)
By similar_triangle_basic_properties on G, H, C, G, D, I we get angle(G, D, I) == angle(G, H, C) mod 360, angle(D, I, G) == angle(H, C, G) mod 360, angle(C, G, H) == angle(I, G, D) mod 360, log(distance(D, G)) + log(distance(C, H)) == log(distance(G, H)) + log(distance(D, I)), log(distance(C, H)) + log(distance(G, I)) == log(distance(D, I)) + log(distance(C, G)), log(distance(C, G)) + log(distance(D, G)) == log(distance(G, I)) + log(distance(G, H))
By internal_angle_bisector_definition_v0_r on B, midpoint(B, D), midpoint(E, G), D we get Line(D, midpoint(B, D)) == internal_angle_bisector(B, D, midpoint(E, G))
By internal_angle_bisector_definition_v0_r on C, F, D, midpoint(E, F) we get Line(F, midpoint(E, F)) == internal_angle_bisector(C, midpoint(E, F), D)
By internal_angle_bisector_definition_v0_r on D, midpoint(A, D), midpoint(F, G), A we get Line(A, midpoint(A, D)) == internal_angle_bisector(D, A, midpoint(F, G))
By anti_similar_triangle_basic_properties on E, midpoint(E, G), H, G, B, H we get 0 - angle(G, B, H) == angle(E, midpoint(E, G), H) mod 360, 0 - angle(B, H, G) == angle(midpoint(E, G), H, E) mod 360, 0 - angle(H, G, B) == angle(H, E, midpoint(E, G)) mod 360, log(distance(B, G)) + log(distance(H, midpoint(E, G))) == log(distance(E, midpoint(E, G))) + log(distance(B, H)), log(distance(B, H)) + log(distance(E, H)) == log(distance(H, midpoint(E, G))) + log(distance(G, H)), log(distance(E, H)) + log(distance(B, G)) == log(distance(G, H)) + log(distance(E, midpoint(E, G)))
By anti_similar_triangle_basic_properties on H, F, midpoint(F, G), H, G, A we get 0 - angle(H, G, A) == angle(H, F, midpoint(F, G)) mod 360, 0 - angle(G, A, H) == angle(F, midpoint(F, G), H) mod 360, 0 - angle(A, H, G) == angle(midpoint(F, G), H, F) mod 360, log(distance(F, H)) + log(distance(A, G)) == log(distance(G, H)) + log(distance(F, midpoint(F, G))), log(distance(A, G)) + log(distance(H, midpoint(F, G))) == log(distance(F, midpoint(F, G))) + log(distance(A, H)), log(distance(A, H)) + log(distance(F, H)) == log(distance(H, midpoint(F, G))) + log(distance(G, H))
By anti_similar_triangle_basic_properties on F, H, midpoint(F, G), G, H, A we get 0 - angle(G, H, A) == angle(F, H, midpoint(F, G)) mod 360, 0 - angle(H, A, G) == angle(H, midpoint(F, G), F) mod 360, 0 - angle(A, G, H) == angle(midpoint(F, G), F, H) mod 360, log(distance(F, H)) + log(distance(A, H)) == log(distance(G, H)) + log(distance(H, midpoint(F, G))), log(distance(A, H)) + log(distance(F, midpoint(F, G))) == log(distance(H, midpoint(F, G))) + log(distance(A, G)), log(distance(A, G)) + log(distance(F, H)) == log(distance(F, midpoint(F, G))) + log(distance(G, H))
By similar_triangle_basic_properties on I, D, G, K, H, D we get angle(I, D, G) == angle(K, H, D) mod 360, angle(D, G, I) == angle(H, D, K) mod 360, angle(D, K, H) == angle(G, I, D) mod 360, log(distance(D, I)) + log(distance(D, H)) == log(distance(H, K)) + log(distance(D, G)), log(distance(D, G)) + log(distance(D, K)) == log(distance(D, H)) + log(distance(G, I)), log(distance(D, K)) + log(distance(D, I)) == log(distance(G, I)) + log(distance(H, K))
By similar_triangle_basic_properties on G, D, I, D, H, K we get angle(D, H, K) == angle(G, D, I) mod 360, angle(D, I, G) == angle(H, K, D) mod 360, angle(I, G, D) == angle(K, D, H) mod 360, log(distance(D, G)) + log(distance(H, K)) == log(distance(D, H)) + log(distance(D, I)), log(distance(D, I)) + log(distance(D, K)) == log(distance(H, K)) + log(distance(G, I)), log(distance(D, K)) + log(distance(D, G)) == log(distance(G, I)) + log(distance(D, H))
By anti_similar_triangle_basic_properties on midpoint(E, G), E, H, B, G, H we get 0 - angle(B, G, H) == angle(midpoint(E, G), E, H) mod 360, 0 - angle(G, H, B) == angle(E, H, midpoint(E, G)) mod 360, 0 - angle(H, B, G) == angle(H, midpoint(E, G), E) mod 360, log(distance(B, G)) + log(distance(E, H)) == log(distance(E, midpoint(E, G))) + log(distance(G, H)), log(distance(E, H)) + log(distance(B, H)) == log(distance(G, H)) + log(distance(H, midpoint(E, G))), log(distance(B, H)) + log(distance(E, midpoint(E, G))) == log(distance(H, midpoint(E, G))) + log(distance(B, G))
By perpendicular_bisector_sufficient_conditions on J, H, D, K we get Line(D, K) == perpendicular_bisector(H, J)
