Assumptions:
A, B, C, D, E, F, G, H, I: Point
f, g, h, i: Line
distinct(A, B, C, D, E, F, G, H, I)
distinct(f, g, h, i)
f == Line(A, B)
g == Line(B, C)
h == internal_angle_bisector(B, A, C)
i == internal_angle_bisector(A, B, C)
D == line_intersection(h, i)
E == projection(D, g)
F == projection(D, f)
G == projection(C, i)
H == projection(E, i)
I == projection(G, h)

Embedding:
C := {"x": "2.027869082059127858741476302384398877620697021484375", "y": "1.008418648379263427017349386005662381649017333984375"}
B := {"x": "-0.0017085233187824656886366625485607073642313480377197265625", "y": "-3.425335395937075144701111639733426272869110107421875"}
A := {"x": "3.8720956171741729434643275453709065914154052734375", "y": "0.064262191624462394745620485991821624338626861572265625"}
i := {"point": {"x": "-0.0017085233187824656886366625485607073642313480377197265625", "y": "-3.425335395937075144701111639733426272869110107421875"}, "direction": {"x": "1.1592122418279275545843975719394251997942173527804639507199783325241929256419284266854472842327391456323549703305527694611625836239818467389088378393574058515188978200166016598249225587138600346515796589030083606771366496824933866168046988910729346116150460069799592588903412140262287785824981311683276486197874441432782951479056064876013202355502376997296819036968831157042781140027997459349427227722988797183789840665476676718604764290372296935185535793107350262396340307422013800777624673274385678656486933836352915129058201271356482902862224393708912368170339378962345722527945313662847886731309551492269803799248186875350495693552623529667662501169176107641747342802600834785102093957571419525385324302890742370281112546296061208142035918936526451338807453912979955044312535514888572957210828167039283169340196175462554996922908757214770648049500311481187529906065118968186201587220760530440286414698403143527908251259608332063826945244145849679099466552372325898450845530877757653582573872381561283223668934590806526907041604778639700376116707314319558821922752315066885576087470652753685448647737138283318098731298373803532266875485938038020961283931719562299863317954028995560079622000440671909111816636141262679513927190504791985722308467641406856820456073082968972911467755561763121040272302313187041040510946572707336278667126335026124092134189913589342161850368666429735971734776575045914623598905176890807557371333185156033935175790105317386786579711174674082999371502201006838429756558829680752583507312042683031453017960567766942488518308608454344694012044969702121193613931533823437481802493274918395384908190709262506500270999180388371304773913463582571810830110325525549033165201796515527045497512053863684490179663438400792394284305719539893591690428978670109406978226146080205325441390699705367386919249143109777734755119281622203425112438318846644497795188778152461014744232929756926038941123418580541651059235583356455805892391704016413466401177811236922225602261209062524146725", "y": "1.578564530342519944064234838595429046986995920913576502338751320135095868600125828718400885246843644498621239884699422477162790415628259611497226885590769263869893360392944629160403637586716959968484562291604961888403907998942359898093624371007407101880314853572356420890409186041964124653761150033090786960242548776937537789888697303763517374880456381286200756347903203181769615032296285527266545071909769336313050612722714469537277089458683606608245937717165418091651590733528510586112729583828900113069075497140253699693887552164416308159698083871070041811354456187881248328777757889183762119066565241257384770997045096698697169843417339919762479066969906171801305686511166565645303387283100710042408892501490238732914364533970313665561855795119123562382063578663806370632533371455100563486275056683946055958505479015502940557212877702831660456222845958773802086490088816893482826806160751752447468833043280919976843459174234268486023654873986173849226857136284595456735524134564279917126115922712493926905634262847503340502935574550946226955250739779733785958094023598559849348683323239217480680028874297760754727736302686952090900036551170501888724810574847370362614954961214763800776212989381295873422428824800419868523024745803037838451833056839397475267382655202786571184610998600353574288603382530570869329267155855788362177528912052093923972916148619149475953820661307269934610517986127992376803211871126509938706836450478981407879025590040107219474050675399674714367822936183803310866979167094015256447940551944630036924207696995327984295997431684601097527808523166661171214848790625201949617556248153818553260929511029369710209493592480316269941170244399176940043840016048142933035258204522102363721940722906890531055363771266889137268737153338687783132413636648446931727089428358268386370881925375068481873761331118903622275446710076268000374290361350010145263067801437183318590659095580816576961548404726961061832027200686868339606658788408651709950473610366230026257403572872842313713"}}
h := {"point": {"x": "3.8720956171741729434643275453709065914154052734375", "y": "0.064262191624462394745620485991821624338626861572265625"}, "direction": {"x": "-1.6331223424145764555345893319647099878050979611304766063378747398187890054611084029361718382153550553290819578277539737717343829648657520538237372932274839878704461414804763975118987521051383585491084042001266531092245699648442551062288534394329124359600097249152764027889394078746912151127122504155100428075434253819633038857542426837586474513390059120232811443771054767410508597362512570179761228013529359902175200101911813018332146398856630585710784084085571670320451150587307805875107619607760299007301549350287828810888945601540999919002101845337611844353036121181289294687303510104952569679054906256951540417054786003146376060237463277359741889051494792940693564151056290956878832576695812742682758812110425151111838350632398383913153641050562060028012431971671815350706170839974074404257946739922324253972453100459753143480382560865818275792686878505012229073068621734538537392395783981442952116090421454614435028798677655547001998248105987111382217852003245264194918621520298394558198534128403760890216338447799035123995326282509304974519372967040019596416570337169850869194555663395789591198628835078472777972727782387911697382781186158422956902237152214703289513057427002199802684500114332603408226459145361313573054211992515037625546522599835087002073041730922465568217428399669924618957437096281287146785567021311771238279307560797669850968974942095225208273506026429265380856070023794352450817687670127047634025482028887638784997440822762440842297297805862359834283864946838400348026687636753806646733470864586972260488947155630071697424081030997212044342288644955672499019458542991423129388179793097066228818085530105914222505958774341666006365831013233433909505122357322579117323075022184789370317052563998016570837123873765366629731033753655742966620037631614390427362603857578635279425442098762773262249146822037609034059027980087013261538020644783875773088194916784618350715511735947035198121352236256233354597093183487265913854777685704842234320118897484717141345104672055122220341", "y": "-0.21359617933958714633397528821068935535250095408424770406341702073968049112720288185350279023252981526809156523676992656364779659780869121530751952489243850296798272014136812918798251859886862797040545762221006059348450491052284943671070336547631272809743033716285357487323925489758589592906986108671364281100666346697968997361739503683075812478119165471527455800936870971843916757614196283908982257417416434678841758473138193643771833790714880026961027839919341587100948156420102198015414165732154117805756933638845870015551963005514428574755671251312559206006042733543607447845030748406337540755935697666367286493421466086873918114640222835429448179039581364891192259852357469566797335351254685225791684360244370867320329814744613832224266127201609260014577178579737839875139599749049298620952560721086996416213266730192930103637978541275069080648776507361382097742397620121528896129691739324131161687849212431040695075355899038010073766203435888892271167065766135055121711387991210896978023628243627973438536002469447583773998252165520465141537903563407669039815193653365255052425624103710721710146875714825677570700692869519818414564785481061317854777098496153017846873748003031774964610198173142495262881475382589640775627021949383112534445481476275026598172180290296061296371062247562343591042428603864704620320769560703501473719210344011964643484318878489656511126129422077039430848623043414913415134209796859535507148152190092157900538509967041784650751756974020014554220044391431647377269950027180677662848167055826854782842732118560518155980133183973981082381462350582337156286152892965117468573504498040821660669987394214481248958783333809978028498108927772946975065893338904731086467740022393835566859223669013543611399791331711152254157147242158486831197356833465966356376499881641906350422525192298922856597897230217671435767457104692240119781489481476693192155148258873121627463036153800774343468303342714604236827475342060524638812460288296349089543639335253360402378992920136876413388"}}
g := {"point": {"x": "-0.0017085233187824656886366625485607073642313480377197265625", "y": "-3.425335395937075144701111639733426272869110107421875"}, "direction": {"x": "2.0295776053779103244301129649329595849849283695220947265625", "y": "4.43375404431633857171846102573908865451812744140625"}}
f := {"point": {"x": "3.8720956171741729434643275453709065914154052734375", "y": "0.064262191624462394745620485991821624338626861572265625"}, "direction": {"x": "-3.8738041404929554091529642079194672987796366214752197265625", "y": "-3.489597587561537539446732125725247897207736968994140625"}}
G := {"x": "2.8245688488255823221045292840742735669115725807614662500864920825120366537422512035845921189888959871650098863303168325706931687891968284953379587931355260949777247457644332909242511694994696254566140129036530490255164173998144381187902634962067133260936058020599544924458904942162355991136195265270623070923713212477958339021470779298668397676670650174638432421041887616164941496414975197587477706893590357658364234087884802166013560355804458141356898133984726014611143249149833203950597417812436709163674964252789929686896273345699130723215464496102105929161637002677766359755821936907876683525561723116906065574146775641670746004839523404661364918597408701164026083448806361343082055950994284817232492135141060976147270385187654842478373643173542714954541948971269167260578319687122876770330282616086564012379345252285331747313760168115426402328701064150190327118546055951929443620079159201961937665533490856767557547580382616746634883759465812252467029097026953683593385343320554450396398907962044307151832645462525759242795446723836350192098568517769414244455257868202515539760831171407923821242333834200555085056044248485540808087191885458332722818948759122868473613405372678768468340789193062913645918022890048202937618568435801766976177201953470016569865363087043234496913902526620027024270899314851218481660605640947628959336532435996366939256591846539832495994043063592765309025535098675116265858822162860438392946157436932058328848793936374464798977495184899519455254729969835955519883581717404834089392889810685348612014160960193104548687051590336288846822814267724362426444766092923052906363705608350546374543538807438516443210348300938612128753884563478591216261670162813385263768923565945950436857753969923026180301713980030954966287291082733123731010162173020724694009237475989704591099017054236099316483118553801870162958392958979043801856248562766886930249319827117912435751379269025495487437659606118405504590178082026610945159542459498385879352486639305967401924296800421766410112", "y": "0.42336551628035814776638005524693867059655608437392983747302918746391165586798252156464816778340968207058553051102288986367441433858210354470366735888358412815419740515533222152055248279611235609249645674852714514004957252653760041811500454564733546090981834422280537616391017947226709662440023659545598706904301611253602700394385847388707628888498824408610867027502695256219318586070336566841056285235760053613393566174162645481915259208752979583763052306144593380436714844100335289289191959911904536973039062020926350732430030504202487819470170970650488099486003728833180560545480804515188032289938014130128575538027831939482844219505000993154018905906540834793915365897139615803371683778397474800674895651523795710536506800108659415461219658679582957251205410473942525761187953003382127831436543009631398278470439496558015444729994853915437431356754665331460792454058288488672214827252721986945124405277000516811737831111084909432613895726477256008436376747772956836099708542731631410338932339078160103507854832403724396785600899848083477431806479993450294741719019158156430387750485171242997535319103799260959933026444354969364112130118270427441884850483653164761214353088113584130990459139365346998375430732517942335107635387162544378620151712627744744494468364032778536165942861101630899081874116168664971391433294219843218632916549988571871984285878711397470517295180293774576995019602675239280148348149250196329045045368443900401409415974365278184900740807149295789927963029867547865222480684233844802862117325301228287121362049296064138616596777791265212080936937804347491248363651094573588698454726691290553974610260428757052526182400505355017113263741792980203850083938549460405873291203547730053909218797006776070350926589346849544109538349149473456776027134737021098128199290198499089682863047999100308569740481194551331684017092635680326968917187495523471706548467323704515335296390180979399315472384432391506552420651812829825307738054346479387500575926415922684074458813193694936928657"}
I := {"x": "2.8883637544403073948422671739066068527011530633558491408010373942967635328614358768482886925631195760542003325855410565329608894561004617081177063683606455632109259462923919134857042027325667820818739501903910977282706989679404687668384864569541301671892104093179493317671037392984689352373961949248094836114882119454243445609170989086037994267377468219109543167242096529853917885406255712072178353625767695545940955088003979877978066687556641600470354411532710341577227418874038266544313615162213849558198231035027318801192529449683907582155827452474554755167989722929043972765673006259396707587817700900693817134612056596091786569112728719739008188400830527716663987813527740124557703971192358070075226344391841679965702676504328352107336838237986593009537259762813434689034742148787626886919363946368143001409153486914689367327660194885275371642515610525702163015486010046876389122694898168714858346186270014840692541910744586622568727232153470120932120894957204396519247731903171602303247009192088228968912952066076506417685130564836121445870299312614979667607162318008133765449942613159051447958858810537948380066500692269716178941617866186684973199750899602379084762785223815850453779533417537037653352886979162851293581525550252084821356771805738535792560416486033280673041483636948996071750181878288210820741971043953730834409637507358633384194754130134968099630397037722460735986746440598121477375612524552185796626849094385030105421218725641796404294129513078481443448175157030123510645219066760792452250433639169200477057280754268171535878491491058519916683977055514570606143945175896561935269810349995920512766888126738852165996319439304167354430707702690502898535274319529658728075047768145682872970407531789910378676253874044830737260257038364494413560770023279750744519909136647594502553398321356210127160319793136325944242445621495696156378044457443531274030037042083922976837593317825467803160025741459418645425120759581722290641103291042051434557992136517259042076033307210743538282", "y": "-0.064400163863188197821074434908885102646924196826925569619001952788578534523693416157130271789469051120784840139818584898558833398435135572290681540346676154514239420297022440530987739527233658731234235419858961720567302422456414109485383346257470068372015762066939638595282567076894357949559340117387873768583322409984914185004123012716180912289376946926137020617663764323016855841593013018478042871419315134741399155845148432248706832066319274880192270169208417704059679040341508280092650688733336324319751791921804126234602200019628474123579640230119417422190222198163936513535766468561262422704358382663192412789626872462175323346882275134299916512174964354043684957219353064806246468188110429844961317808416595257930792323240503783927216602992308410103415902412047482423467340507446290856776613561594885596461852931649620847653250020410430837273945914947928501298983857256513970549909658328763438726814693739591492209938448675656530827150762683079141882567849064271748095585146835791490373845065127008149146282841641589339989211604234762518036627141584330247148300350440544079391896998635704240995407580569873501778027353607486490618816706113970121936284181370340865854227915793431036361656779542883905255718969401527493355004573519305500023092699031396458100041981773124286269272329158892199433733382373591476951100574550561941151037424078408813718317602927404259184905190393932980602760516304532606832639421327500613596621606370319312063548648368001589552297834235256139328161406587095159621625836818188331363834631587868376785859540126557834262589259633822548042774282376303323188015134178650891947624792123345476236507896508374365999540716774580991452911868968532878699592803195636179931314853836146495921588454786335799204446238014859929523287059972647029633160248277441105288664005503122364583729718329804358271088966063442113313010568119327398324690369915393666971852022695601671482879973282027844412690754606375405863647227568244022396266626817316810437020362874410384317148233168648024681"}
D := {"x": "2.4215444429410656819186506645751492396652336676848806136697234938151908251305764003403009491902341256497734626247018752412611598169725485240802912589415523618170579607313992036209411469428965013916284715513721507394688310293275770519056492286035971382928068596983091446533067422785656047157035891776236796063661902381587931056091327415094462782875311642865060076470059135621172135262834917463967757340750674135978104863558247370514890902626045162001389164024426070962634331621061679913398468893790331123608999343023132391994391021282441221559457185319608321991895989169505240718891338905185403766830505395654936255782905347425393361184117495565695718399335416499693907364020734571186719629453749077668766967891471206355450551687453062181877721601575139460219009272363388209917127438367522034101697640722325536723676428116067872247594004603818999002635877659750862485023572253795563179510292424176173946538151165070886040141041483009257257377043781825931451060943229042319630034480007947253218181292060892082800841351638228042389883781242484333926541514019997187696771191111125365115593412611307109504323771186126062614345178371570351804147867902917480776576462173068745984318084680147373124221801105609921420125153335696436536842902450219348274245601780264660144283498948304473038345052835625492871406788081688222914548823028316331843282177208946723352735745075792140519282009222331859213726803946513084788889395539588841315288824896051575483284878193545777581334794795316807959590349303528996196806352358757008637933928303165246005025179080336583659851082662066464587062540029431456894366618725957369477939261998394932544568808058496679717639419167014905063272606397115842817189255399644910209134878046928369980913918944584508691156841563169870744360899284007591228165599210923905612348867984802349775227567724411693079747987115839942047128762814305528502964253205602703010091529101526194380288088244483800202800459833080196006055001908627945881757154191054925716830203350120066992856091057643542727", "y": "-0.12545549253547362502703113186506776887541360969694797639132689448122315305532623661969426728158235739097158635466318754149712781565450337258577856338861991196369013750323074065625297908023329297507582478081254420984712997986156108479010057412207583506460305461313275696814383925324277405332433241132824429821789887916862725622399314975330263105875533934149729413352511173951490518719869793066797529042579685525029992239312336553265863806127479029796423908925138017154104976339362319938987602438805296177174613853534902319880324034415710223773800988387189114863494795003546488999051664450402844746592894432529828148874460761172768656052476870187506574169142701774781986724108836501739019830825823868349974228031692422170358582820480357079893385831030345992571550990291690722830232685206930142706987563604311494691048533843669017556349419522763414360992269118329372355188329331446486083017667076944828111524653829033137939963799514125316004969304127037719538790298983159531383868790539203064092456747207438927276417190041645586332954900713250634068557605559070418954672500412296553300450096117327645107193620222424118960357097181420320456512671750505654394175093811932118362008098676150283373286454703815298196022891971825855273930421958050083884006315377721076730580709635455402475488310769031931945461596963864791062107934506261592814732243154732792893683455779126974304324772101253161806178350311147075693936965676650403601982103780923891377673681275114952459961890835836766544690131520647252513323791300368646289611334432575233572048567274077170553068221095723124679323520579795637138034173553147914003135661232864524313085749062699137603184307255105795979138728000914537544845064190128196598799336867486594307886282352669277238655295719806398656437268177934699095018947197149427376268743629554616130427844888625666681190217191096055015124948539331596574984109996689721676420612077129749473254623513104273380128086562973513111444219228118793658623527374215565701574433820054734727498154511710109955"}
E := {"x": "1.6669496037246518611544406374758458811074341544495836870296729313681829047477758960736012398285090748356834936054991610707594826420266560474448437157603774091093024653394448849272972206847654154242882559833170243785867923866393803420623056192594514109735382276084943959006380005817343579018530370221250841875178034342648500139872674719349570620409172451445802099154740564042129154648340583609096851981393350981066014082506527061260240995067940692567623496662247405673693318302704075291256085799851367359404100157884432400034158171900342109638623222019332308871460653830739898196350374413081461087007979452237272000636694944341291219439295184236583139278721969562254532691787153330891536625788758874247430464892829383195156291181656480698030988765158083829459762570694703919949046889994858542874885140118632869086562746218563794299182104372926663514151438273926708242713251239793272546625625816016273682832096857626394458074593728917084447376027563929625429622304239828907758866329880500624862959010310692014344227577683258662802572098058905455455579829904701861318047156225573943654239293795777085561606806743015026373135728804581654292289590053894531401985162909064879057109710723623177470819877582705579622923009590171877948119152479720751408158740429621977163651851562300788913209939660868164201055234038308298473152404514251688379625740914546932791233959097887465017976426412560547276184198353597729354611098012480587251927299755804112987099266288156519840573156833613453686476647001159779204509700769618267059839521930525812984475525702652343507799584453554058772246584611011687903004091777861434524944672025298727999501489234342441567161455191227394211097587394926307031113560270871890737214635885563189798498201651438401715468916571392224893220284297367976475152616456460541385132749583734532469989192416705670992510724251389959696376313916521089197028966752786051478970598690417965891296816873928199031807671331777329073426445231226056636676205805230071032027761187145484949035691866410884056", "y": "0.21996483784361689485802907447491389246905305694115453231135514684078303440563920056560053701484302122556054784338605104169512344022636471410806605796194449316640967896533041355139858817943973935568074105321475028416064527998559367385246078407187458602448683347362276198056304446237615559538482016000581877840145572277990614494030708723210397317759118276898489996557074461726470243692895395278960377816309147536593250514274647086919958486692757283537149081989559837605946938713234516275638246535050237874615650444316541673135395671975097101149620809555615211515304011949689409078504830685905536563065652197702125210806118857247823004707955689233790219920383166641803892401793994495951102478331280034032326071627285441345577572648755809895877254150241504830123070227855639282426598244832104048202236779807794663976798140058295339087779504749551827009935498482395391079080104083185797851544771221148008956546651950827926683732264852158142932095264358631557051368579041563756873164498869883511968505352249912743323896112251815253426496910364533921670031474801728611426359911399234455984017167457481868264149916353305482437946688325399510420528291334356886594085636462927646459626712201637803000792709862980400160121461158759314647745500208831355073855676101402147283778935423473409868829824853040615586681009229588455601433595232207571794582232174856071733869039567570505485209966190979576196427501833337158282874339903835845795650307147111357206885320783141741848173385164365357953053460299493234387330354538139584390583608422926898493627282084417952959259748090378805096173612050757117635038252359049818910208686479025809797173748412514708332982095979304090782053656908168120627352780609415790993589986803967085595635543886583837169191294798594345427625877803769435579972367912129691916000215790618416817352996672955785655029363417120061102973452438118303241418075966944134126402090165105375553212243824576122950029498784335445115438496648673661207871643500777318394217909018585163715253543963789787066"}
H := {"x": "2.3219723715684628903103100207265696743331177640947307332515106693102290336444279355200957196389572769449889302941292602843351546583603433277846819732232013787416750036811200496872092305334642977550039825870145313965582325858071530410402771988072342652293664066484274033641951278733592482030121131057525531509654826805360799161562599752493761916128823485081968432813133654458642307945215795209828243398851790191465163121550444925267483238710197528297312078657340613789781980647403742649246723561736754281101676781402849303219946291929993051139120216542448298210213654114735695581895307232213401849811361672182660708734094869459529504264365894827436253376169140313265013360331180919191672548258559617735618767484143261640786331750910574916781812440932466576298776936499339712242175642291952418052209343619563470759925754866173169534179723997263600267387583290256042120471536898342429954332065269277858334428170881865602635754307078215492646030951326418695978716163954039073856396176161440352343640822892361117191331085463537457603210221950536000172592142203953643917599794847227034632814730620379402807194846593458346788638195181620609919017754550582302851468407535104100230549087201043509211347196973075441130136659644493279003731953332111017972686698297024019481104848347036873999110283436600685273855007528164535241755840822178996874697625759694845342825554371913719846706046952889616516329875285570445827491087856444840753624205195304269173865439257740621354939678208034270204484336364060978987833689541755025653520508404808666125960030908754234908040655655883895573250291648253555998252053987648199163871214487335423854948592344530671446096307146335859635344924879315446571091308114310287857024327644816789706393434914991461650354086311188447052169429562690492145832638889730261262622018978039249253885139581969681952762113029675616800053818794492924813133458968983995326779292857164520838751006106628243882655823694645140996043771891368917544498918266996338699047944310368793323933240506041821477", "y": "-0.26104838433729812767244507882853763693423079788841986665160073619698899373662443761538352077325844785360784970695885501411393532943482911030156660862184113085697159344747920224540981682785820023543913417433748258846730764506152473708605321495005295551315771829756931944846857026917159689223951845231555742601291205305158404474931081444235892894434468925264347143204278412618182093989463397972298274574560751515002663135425207883924014674131324027978426248229785979081117732729298262483523471450652461769357576826197408126287755840092552857846021990114099442096304252730731734917246641659068658204595629231643505956730458026034590948340872708817400868914710729813158102610426421619766677694762932246964742622476943410305574348110303434753328012192570259928503538472080091582464746025102864800040781160330793995619284866759912463453438967969930153106773477939379054146700040079437201919746345158857771563055317976713680688405363768391805913555658201094382793784791635336988575496890550677583033986265156027845643778057569161356169998276435485866899894466475249999779205092060526573571152041111907775950146201983670880104097913362725054899510913702153330641252317127739994818847423735555139896304286958685753561265777124745448773351349295407127859630255174669860091008451492495907517769378206458263416052378465337393358067057376845267879703492633822902392895534674512346748048967437573384632649540775969207361271802064400769296262460287405392538275358451868421779893888639804669214157184851694244965897796003352537002259942781967347245229520328453497247159354571973701457916640805643298830125224758791409103114755361167499989256678938490925951259674477105511177760692584493817222724656391397300352258192744554195199083638608707391424518040738328961288968323523248422845139208976510359507246391098531981739803796110143387316173591909753927838268771924395961433963770630608048608358551791428498818219587090022327979083541779115402975505363745899227516989487380177074485378009596756435691124451766835991805"}
F := {"x": "2.9769951394122739194661794039772934675588013737398777794733484072522751625410799749665901994494054790542943669827593594979108266746940306081245202306860253483740475420227952144471212403821631800857197091907120384145296727849749257400182487783550171194851945856883604108277522551649841385041711891893800221144131619268073098183252524785637953211848474518718134766471526744875155461242091006810559634816310229401864312160594362789274725482352454364027000660652433821905870642992103410007237361323622141202799253404921266206405734411959643992639617211065564287548966654398731492967440240051345342612614743892128049416831494794577767789089436605418289367473616311064275494028875208507491808470728360361223807070075457140086416372320164669135532636116706849323137791302303975504535304394589046293229533547120494072433288763513782544769177343621600537020623728306585375998229822556891587362038504722539442986024244906104810813434020427513900844685875088907766527810023668249239953926022442380079824322635474030220038434593243816252403848345842166544889604454503205426517152433468880125611390167444981720052782886443901667204140661558659565545745919047270074300951652161143321403988463678463840951874516363445302637350309698814680059344754184501284537214656164426061798557845131772959085010627212333206346654781018020772010359277130106305369769510604842757894417149645939974675435667493218685756475552217543162300371077700409094255321110634804425360631612227324722869306199582455086722492025726962178771157678313891784247201494879091519267444536114856126308281726858213732374253998685495424093500016197434963802797756949372119710395695454718901325031159101444325059592262363704586111069055957748684976834019404070389614288668178544521585239256050984669211118574828013007816512661322999981140111288372343966037781086747233692913013501807961273903731323672464760429237951185181939174587987023911075786205195339328288733503976057512952918661098551511778452321630728762606366068127433592101698830789145672758898", "y": "-0.74206160651821315020291923213198916633751465271799426561455661923476102187888807579636757856135991693277624725730376106992299409909602293471119927520562675488035286586028881804221822183515613982655900940188971546109526057010864314802456721397198049705080227006876140087750018500071934937986385706463693363042727982888307423443892871611682183106628056127427184282965631286962834431671822191223556926965430650566598576785125062854767987834955405339494001578449131795768182404171831041242685189436355161413330804096711357925710907352160202816841664789783814095707912517411152878912998114004042852972256910660989137124267034909317004901389701106868591957749804626268120097622646837735484457867857144527961811316581172261956726268869362679402533278535382024687130147172015822447356090295037833648283799100469382655215367873578120265994657440689412133223482454361153499372480184242060201691037461538863552082657287904255288060542992388941754759206580760820322638938162312237734024158279971238678036477882561968434611452227390137965766493463235505655469820407752228610984770095520287603126321249681297420164442320320647242646142515050849620219550118738663547876590270718407636097321559672748082793401283780351907282653015408250212194448198799645610793116186450741867465795838408465224904368581265957142418785766160263242317567709985898107553989217442501876519660108916595198981307901066126345461726583385275573005417944032637384388175227721922142283436037686878585407961162443974696381367830002881724319125946544844658395103493986861592984086322741324947453578457234326208012006893662043715295288701876632637116438197201360809775687106289496560235501444933515113137575042077155755072802093392210391698106372293075475993802821103998620018227376275252268005562524850266281270250785865150410930492997987682380296960588893242560287376547236627916779510996286910226109345617228160231343119193747962373189651418004620778908196582342566251066449224140472116241850618261131467364973928212098035097502447497461770674"}

Need to prove:
concyclic(D, F, H, I)

Proof:
By line_definition on H, B, i we get i == Line(B, H)
By line_definition on H, D, i we get i == Line(D, H)
By line_definition on G, C, perpendicular_line(C, i) we get Line(C, G) == perpendicular_line(C, i)
By line_definition on I, A, h we get h == Line(A, I)
By line_definition on E, B, g we get g == Line(B, E)
By line_definition on F, B, f we get f == Line(B, F)
By line_definition on D, B, i we get i == Line(B, D)
By line_definition on A, F, f we get f == Line(A, F)
By line_definition on E, D, perpendicular_line(D, g) we get Line(D, E) == perpendicular_line(D, g)
By line_definition on G, B, i we get i == Line(B, G)
By line_definition on H, E, perpendicular_line(E, i) we get Line(E, H) == perpendicular_line(E, i)
By line_definition on I, G, perpendicular_line(G, h) we get Line(G, I) == perpendicular_line(G, h)
By line_definition on D, I, h we get h == Line(D, I)
By line_definition on D, F, perpendicular_line(D, f) we get Line(D, F) == perpendicular_line(D, f)
By line_definition on G, H, i we get i == Line(G, H)
By line_definition on D, G, i we get i == Line(D, G)
By line_definition on A, D, h we get h == Line(A, D)
By line_definition on C, E, g we get g == Line(C, E)
By line_intersection_definition on D, perpendicular_line(D, f), i we get D == line_intersection(i, perpendicular_line(D, f))
By perpendicular_line_definition on G, i, perpendicular_line(E, i) we get i == perpendicular_line(G, perpendicular_line(E, i))
By perpendicular_line_definition on F, f, perpendicular_line(D, f) we get f == perpendicular_line(F, perpendicular_line(D, f))
By line_intersection_definition on C, perpendicular_line(C, i), g we get C == line_intersection(g, perpendicular_line(C, i))
By line_intersection_definition on G, perpendicular_line(C, i), perpendicular_line(G, h) we get G == line_intersection(perpendicular_line(C, i), perpendicular_line(G, h))
By line_intersection_definition on E, g, perpendicular_line(E, i) we get E == line_intersection(g, perpendicular_line(E, i))
By line_intersection_definition on D, perpendicular_line(D, g), perpendicular_line(D, f) we get D == line_intersection(perpendicular_line(D, f), perpendicular_line(D, g))
By line_intersection_definition on B, g, i we get B == line_intersection(g, i)
By perpendicular_line_definition on I, h, perpendicular_line(G, h) we get h == perpendicular_line(I, perpendicular_line(G, h))
By line_intersection_definition on D, i, perpendicular_line(D, g) we get D == line_intersection(i, perpendicular_line(D, g))
By perpendicular_line_definition on H, perpendicular_line(E, i), i we get perpendicular_line(E, i) == perpendicular_line(H, i)
By perpendicular_line_definition on B, f, perpendicular_line(D, f) we get f == perpendicular_line(B, perpendicular_line(D, f))
By line_intersection_definition on D, perpendicular_line(D, g), h we get D == line_intersection(h, perpendicular_line(D, g))
By line_intersection_definition on B, g, f we get B == line_intersection(f, g)
By perpendicular_line_definition on A, f, perpendicular_line(D, f) we get f == perpendicular_line(A, perpendicular_line(D, f))
By line_intersection_definition on D, perpendicular_line(D, f), h we get D == line_intersection(h, perpendicular_line(D, f))
By perpendicular_line_definition on H, i, perpendicular_line(C, i) we get i == perpendicular_line(H, perpendicular_line(C, i))
By line_intersection_definition on G, i, perpendicular_line(G, h) we get G == line_intersection(i, perpendicular_line(G, h))
By perpendicular_line_definition on E, perpendicular_line(D, g), g we get perpendicular_line(D, g) == perpendicular_line(E, g)
By perpendicular_line_definition on I, perpendicular_line(G, h), h we get perpendicular_line(G, h) == perpendicular_line(I, h)
By perpendicular_line_definition on H, i, perpendicular_line(E, i) we get i == perpendicular_line(H, perpendicular_line(E, i))
By perpendicular_line_definition on C, g, perpendicular_line(D, g) we get g == perpendicular_line(C, perpendicular_line(D, g))
By perpendicular_line_definition on D, i, perpendicular_line(E, i) we get i == perpendicular_line(D, perpendicular_line(E, i))
By line_intersection_definition on B, f, i we get B == line_intersection(f, i)
By perpendicular_line_definition on G, perpendicular_line(C, i), i we get perpendicular_line(C, i) == perpendicular_line(G, i)
By perpendicular_line_definition on B, i, perpendicular_line(C, i) we get i == perpendicular_line(B, perpendicular_line(C, i))
By line_intersection_definition on A, h, f we get A == line_intersection(f, h)
By perpendicular_line_definition on G, i, perpendicular_line(C, i) we get i == perpendicular_line(G, perpendicular_line(C, i))
By line_intersection_definition on E, perpendicular_line(E, i), perpendicular_line(D, g) we get E == line_intersection(perpendicular_line(D, g), perpendicular_line(E, i))
By perpendicular_line_definition on D, h, perpendicular_line(G, h) we get h == perpendicular_line(D, perpendicular_line(G, h))
By perpendicular_line_definition on E, g, perpendicular_line(D, g) we get g == perpendicular_line(E, perpendicular_line(D, g))
By perpendicular_line_definition on B, i, perpendicular_line(E, i) we get i == perpendicular_line(B, perpendicular_line(E, i))
By perpendicular_line_definition on F, perpendicular_line(D, f), f we get perpendicular_line(D, f) == perpendicular_line(F, f)
By perpendicular_line_definition on D, i, perpendicular_line(C, i) we get i == perpendicular_line(D, perpendicular_line(C, i))
By perpendicular_line_definition on B, g, perpendicular_line(D, g) we get g == perpendicular_line(B, perpendicular_line(D, g))
By perpendicular_line_definition on A, h, perpendicular_line(G, h) we get h == perpendicular_line(A, perpendicular_line(G, h))
By in_imply_collinear on E, B, C we get collinear(B, C, E)
By in_imply_collinear on F, A, B we get collinear(A, B, F)
By double_perpendicular_and_parallel_v0 on perpendicular_line(C, i), i, perpendicular_line(E, i) we get parallel(perpendicular_line(C, i), perpendicular_line(E, i))
By angle_bisector_draw_angle_v0 on B, A, C we get exists(Line(A, B), Line(A, C))
By angle_bisector_draw_angle_v0 on C, A, B we get exists(Line(A, B), Line(A, C))
By altitude_definition on D, C, B, perpendicular_line(D, g) we get altitude(D, B, C) == perpendicular_line(D, g)
By altitude_definition on D, B, A, perpendicular_line(D, f) we get altitude(D, A, B) == perpendicular_line(D, f)
By incenter_concurrency on C, B, A we get incenter(A, B, C) in internal_angle_bisector(A, B, C), incenter(A, B, C) in internal_angle_bisector(B, A, C), incenter(A, B, C) in internal_angle_bisector(A, C, B)
By concurrent_sufficient_conditions on g, Line(E, H), Line(D, E) we get concurrent(g, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on i, h, Line(D, F) we get concurrent(h, i, Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), Line(D, E), h we get concurrent(h, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on h, i, Line(D, E) we get concurrent(h, i, Line(D, E))
By concurrent_sufficient_conditions on Line(D, E), h, i we get concurrent(h, i, Line(D, E))
By concurrent_sufficient_conditions on Line(E, H), Line(D, E), g we get concurrent(g, Line(D, E), Line(E, H))
By line_definition on D, C, internal_angle_bisector(A, C, B) we get Line(C, D) == internal_angle_bisector(A, C, B)
By concurrent_sufficient_conditions on h, Line(D, F), i we get concurrent(h, i, Line(D, F))
By concurrent_sufficient_conditions on Line(G, I), i, Line(C, G) we get concurrent(i, Line(C, G), Line(G, I))
By concurrent_sufficient_conditions on h, Line(D, F), Line(D, E) we get concurrent(h, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, E), i, h we get concurrent(h, i, Line(D, E))
By concurrent_sufficient_conditions on i, Line(D, E), h we get concurrent(h, i, Line(D, E))
By concurrent_sufficient_conditions on Line(D, E), Line(D, F), h we get concurrent(h, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), i, h we get concurrent(h, i, Line(D, F))
By concurrent_sufficient_conditions on i, Line(D, E), Line(D, F) we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(G, I), Line(C, G), i we get concurrent(i, Line(C, G), Line(G, I))
By concurrent_sufficient_conditions on g, Line(D, E), Line(E, H) we get concurrent(g, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(C, G), i, Line(G, I) we get concurrent(i, Line(C, G), Line(G, I))
By concurrent_sufficient_conditions on h, Line(D, E), Line(D, F) we get concurrent(h, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on h, Line(D, E), i we get concurrent(h, i, Line(D, E))
By concurrent_sufficient_conditions on i, Line(D, F), h we get concurrent(h, i, Line(D, F))
By concurrent_sufficient_conditions on h, i, Line(D, F) we get concurrent(h, i, Line(D, F))
By concurrent_sufficient_conditions on Line(C, G), Line(G, I), i we get concurrent(i, Line(C, G), Line(G, I))
By concurrent_sufficient_conditions on Line(D, E), g, Line(E, H) we get concurrent(g, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(D, F), i, Line(D, E) we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on i, h, Line(D, E) we get concurrent(h, i, Line(D, E))
By concurrent_sufficient_conditions on Line(E, H), g, Line(D, E) we get concurrent(g, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on i, Line(G, I), Line(C, G) we get concurrent(i, Line(C, G), Line(G, I))
By concurrent_sufficient_conditions on Line(D, F), h, Line(D, E) we get concurrent(h, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on i, Line(C, G), Line(G, I) we get concurrent(i, Line(C, G), Line(G, I))
By concurrent_sufficient_conditions on Line(D, E), h, Line(D, F) we get concurrent(h, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), h, i we get concurrent(h, i, Line(D, F))
By concurrent_sufficient_conditions on Line(D, E), Line(E, H), g we get concurrent(g, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(D, E), i, Line(D, F) we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, E), Line(D, F), i we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on i, Line(D, F), Line(D, E) we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), Line(D, E), i we get concurrent(i, Line(D, E), Line(D, F))
By line_intersection_definition on C, Line(C, G), internal_angle_bisector(A, C, B) we get C == line_intersection(Line(C, G), internal_angle_bisector(A, C, B))
By line_intersection_definition on A, h, Line(A, C) we get A == line_intersection(h, Line(A, C))
By line_intersection_definition on D, internal_angle_bisector(A, C, B), Line(D, F) we get D == line_intersection(Line(D, F), internal_angle_bisector(A, C, B))
By line_intersection_definition on C, Line(A, C), g we get C == line_intersection(g, Line(A, C))
By concurrent_sufficient_conditions on Line(D, F), internal_angle_bisector(A, C, B), i we get concurrent(i, Line(D, F), internal_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on Line(D, E), internal_angle_bisector(A, C, B), i we get concurrent(i, Line(D, E), internal_angle_bisector(A, C, B))
By line_intersection_definition on A, f, Line(A, C) we get A == line_intersection(f, Line(A, C))
By concurrent_sufficient_conditions on internal_angle_bisector(A, C, B), Line(D, E), i we get concurrent(i, Line(D, E), internal_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on internal_angle_bisector(A, C, B), Line(D, F), h we get concurrent(h, Line(D, F), internal_angle_bisector(A, C, B))
By line_intersection_definition on C, internal_angle_bisector(A, C, B), Line(A, C) we get C == line_intersection(Line(A, C), internal_angle_bisector(A, C, B))
By line_intersection_definition on C, internal_angle_bisector(A, C, B), g we get C == line_intersection(g, internal_angle_bisector(A, C, B))
By line_intersection_definition on D, Line(D, E), internal_angle_bisector(A, C, B) we get D == line_intersection(Line(D, E), internal_angle_bisector(A, C, B))
By line_intersection_definition on C, Line(C, G), Line(A, C) we get C == line_intersection(Line(A, C), Line(C, G))
By concurrent_sufficient_conditions on internal_angle_bisector(A, C, B), Line(D, E), h we get concurrent(h, Line(D, E), internal_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on internal_angle_bisector(A, C, B), Line(D, F), i we get concurrent(i, Line(D, F), internal_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on Line(D, F), internal_angle_bisector(A, C, B), h we get concurrent(h, Line(D, F), internal_angle_bisector(A, C, B))
By concurrent_sufficient_conditions on Line(D, E), internal_angle_bisector(A, C, B), h we get concurrent(h, Line(D, E), internal_angle_bisector(A, C, B))
By projection_definition on B, G, Line(C, G) we get G == projection(B, Line(C, G))
By projection_definition on G, H, Line(E, H) we get H == projection(G, Line(E, H))
By projection_definition on B, E, Line(D, E) we get E == projection(B, Line(D, E))
By projection_definition on B, H, Line(E, H) we get H == projection(B, Line(E, H))
By projection_definition on D, I, Line(G, I) we get I == projection(D, Line(G, I))
By projection_definition on C, E, Line(D, E) we get E == projection(C, Line(D, E))
By projection_definition on A, I, Line(G, I) we get I == projection(A, Line(G, I))
By projection_definition on D, H, Line(E, H) we get H == projection(D, Line(E, H))
By projection_definition on D, G, Line(C, G) we get G == projection(D, Line(C, G))
By projection_definition on B, F, Line(D, F) we get F == projection(B, Line(D, F))
By projection_definition on H, G, Line(C, G) we get G == projection(H, Line(C, G))
By projection_definition on A, F, Line(D, F) we get F == projection(A, Line(D, F))
By parallel_line_definition on C, Line(C, G), Line(E, H) we get Line(C, G) == parallel_line(C, Line(E, H))
By parallel_line_definition on G, Line(C, G), Line(E, H) we get Line(C, G) == parallel_line(G, Line(E, H))
By parallel_line_definition on H, Line(E, H), Line(C, G) we get Line(E, H) == parallel_line(H, Line(C, G))
By parallel_line_definition on E, Line(E, H), Line(C, G) we get Line(E, H) == parallel_line(E, Line(C, G))
By in_imply_collinear on G, B, D we get collinear(B, D, G)
By in_imply_collinear on B, H, G we get collinear(B, G, H)
By probably_between_and_collinear_implies_between on B, F, A we get between(A, F, B)
By in_imply_collinear on B, D, H we get collinear(B, D, H)
By probably_between_and_collinear_implies_between on C, E, B we get between(B, E, C)
By in_imply_collinear on A, D, I we get collinear(A, D, I)
By in_imply_collinear on H, G, D we get collinear(D, G, H)
By perpendicular_direction_conditions_v0_r on G, D, C, G we get 180 == 2 * direction(G, D) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on B, H, H, E we get 180 == 2 * direction(B, H) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on D, E, C, B we get 180 == 2 * direction(D, E) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on D, I, G, I we get 180 == 2 * direction(D, I) - 2 * direction(G, I) mod 360
By perpendicular_direction_conditions_v0_r on G, I, D, I we get 180 == 2 * direction(G, I) - 2 * direction(D, I) mod 360
By perpendicular_direction_conditions_v0_r on A, D, G, I we get 180 == 2 * direction(A, D) - 2 * direction(G, I) mod 360
By perpendicular_direction_conditions_v0_r on A, I, G, I we get 180 == 2 * direction(A, I) - 2 * direction(G, I) mod 360
By perpendicular_direction_conditions_v0_r on F, A, D, F we get 180 == 2 * direction(F, A) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on E, D, E, C we get 180 == 2 * direction(E, D) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on H, E, G, B we get 180 == 2 * direction(H, E) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on A, F, D, F we get 180 == 2 * direction(A, F) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on H, E, B, G we get 180 == 2 * direction(H, E) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on C, G, D, B we get 180 == 2 * direction(C, G) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on E, D, B, E we get 180 == 2 * direction(E, D) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on A, F, F, D we get 180 == 2 * direction(A, F) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on E, C, D, E we get 180 == 2 * direction(E, C) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on E, H, H, D we get 180 == 2 * direction(E, H) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on E, H, B, H we get 180 == 2 * direction(E, H) - 2 * direction(B, H) mod 360
By perpendicular_direction_conditions_v0_r on D, F, A, F we get 180 == 2 * direction(D, F) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on G, C, G, D we get 180 == 2 * direction(G, C) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on G, C, H, B we get 180 == 2 * direction(G, C) - 2 * direction(H, B) mod 360
By perpendicular_direction_conditions_v0_r on H, D, H, E we get 180 == 2 * direction(H, D) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on C, G, H, D we get 180 == 2 * direction(C, G) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on I, G, I, A we get 180 == 2 * direction(I, G) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on D, F, A, B we get 180 == 2 * direction(D, F) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on C, B, E, D we get 180 == 2 * direction(C, B) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on C, E, D, E we get 180 == 2 * direction(C, E) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on B, C, D, E we get 180 == 2 * direction(B, C) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on D, G, H, E we get 180 == 2 * direction(D, G) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on H, G, H, E we get 180 == 2 * direction(H, G) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on G, D, H, E we get 180 == 2 * direction(G, D) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on B, D, G, C we get 180 == 2 * direction(B, D) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on G, C, H, G we get 180 == 2 * direction(G, C) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0_r on G, C, B, D we get 180 == 2 * direction(G, C) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on E, D, C, B we get 180 == 2 * direction(E, D) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on B, C, E, D we get 180 == 2 * direction(B, C) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on F, B, D, F we get 180 == 2 * direction(F, B) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on B, D, E, H we get 180 == 2 * direction(B, D) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on D, H, G, C we get 180 == 2 * direction(D, H) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on A, D, I, G we get 180 == 2 * direction(A, D) - 2 * direction(I, G) mod 360
By perpendicular_direction_conditions_v0_r on G, B, C, G we get 180 == 2 * direction(G, B) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on D, H, E, H we get 180 == 2 * direction(D, H) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on B, D, C, G we get 180 == 2 * direction(B, D) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on I, A, I, G we get 180 == 2 * direction(I, A) - 2 * direction(I, G) mod 360
By perpendicular_direction_conditions_v0_r on G, C, G, B we get 180 == 2 * direction(G, C) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on D, A, G, I we get 180 == 2 * direction(D, A) - 2 * direction(G, I) mod 360
By perpendicular_direction_conditions_v0_r on D, E, C, E we get 180 == 2 * direction(D, E) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on D, H, H, E we get 180 == 2 * direction(D, H) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on D, I, I, G we get 180 == 2 * direction(D, I) - 2 * direction(I, G) mod 360
By perpendicular_direction_conditions_v0_r on E, H, B, G we get 180 == 2 * direction(E, H) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on C, G, B, G we get 180 == 2 * direction(C, G) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on D, G, G, C we get 180 == 2 * direction(D, G) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on F, B, F, D we get 180 == 2 * direction(F, B) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on D, F, B, A we get 180 == 2 * direction(D, F) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on D, E, E, C we get 180 == 2 * direction(D, E) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on E, H, B, D we get 180 == 2 * direction(E, H) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on B, A, D, F we get 180 == 2 * direction(B, A) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on E, B, D, E we get 180 == 2 * direction(E, B) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on G, H, G, C we get 180 == 2 * direction(G, H) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on I, G, D, A we get 180 == 2 * direction(I, G) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on G, D, E, H we get 180 == 2 * direction(G, D) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on D, F, F, A we get 180 == 2 * direction(D, F) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on F, A, F, D we get 180 == 2 * direction(F, A) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on A, B, D, F we get 180 == 2 * direction(A, B) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on A, I, I, G we get 180 == 2 * direction(A, I) - 2 * direction(I, G) mod 360
By perpendicular_direction_conditions_v0_r on H, E, G, D we get 180 == 2 * direction(H, E) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on H, G, E, H we get 180 == 2 * direction(H, G) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on D, E, E, B we get 180 == 2 * direction(D, E) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on G, C, D, G we get 180 == 2 * direction(G, C) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on F, D, B, A we get 180 == 2 * direction(F, D) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on I, D, G, I we get 180 == 2 * direction(I, D) - 2 * direction(G, I) mod 360
By perpendicular_direction_conditions_v0_r on G, C, H, D we get 180 == 2 * direction(G, C) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on G, B, E, H we get 180 == 2 * direction(G, B) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on E, D, C, E we get 180 == 2 * direction(E, D) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on D, B, E, H we get 180 == 2 * direction(D, B) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on G, I, D, A we get 180 == 2 * direction(G, I) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on G, B, H, E we get 180 == 2 * direction(G, B) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on E, D, E, B we get 180 == 2 * direction(E, D) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on H, D, C, G we get 180 == 2 * direction(H, D) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on H, D, E, H we get 180 == 2 * direction(H, D) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on B, G, G, C we get 180 == 2 * direction(B, G) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on I, A, G, I we get 180 == 2 * direction(I, A) - 2 * direction(G, I) mod 360
By perpendicular_direction_conditions_v0_r on C, E, E, D we get 180 == 2 * direction(C, E) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on H, D, G, C we get 180 == 2 * direction(H, D) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on C, G, B, H we get 180 == 2 * direction(C, G) - 2 * direction(B, H) mod 360
By perpendicular_direction_conditions_v0_r on B, H, G, C we get 180 == 2 * direction(B, H) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on G, I, A, D we get 180 == 2 * direction(G, I) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on B, H, E, H we get 180 == 2 * direction(B, H) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on G, H, H, E we get 180 == 2 * direction(G, H) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on F, D, B, F we get 180 == 2 * direction(F, D) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on H, B, E, H we get 180 == 2 * direction(H, B) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on E, H, D, G we get 180 == 2 * direction(E, H) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on G, I, A, I we get 180 == 2 * direction(G, I) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on G, H, E, H we get 180 == 2 * direction(G, H) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on H, E, H, G we get 180 == 2 * direction(H, E) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0_r on H, E, B, H we get 180 == 2 * direction(H, E) - 2 * direction(B, H) mod 360
By perpendicular_direction_conditions_v0_r on E, H, D, H we get 180 == 2 * direction(E, H) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on B, E, E, D we get 180 == 2 * direction(B, E) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on C, B, D, E we get 180 == 2 * direction(C, B) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on B, A, F, D we get 180 == 2 * direction(B, A) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on B, F, D, F we get 180 == 2 * direction(B, F) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on H, G, G, C we get 180 == 2 * direction(H, G) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on E, C, E, D we get 180 == 2 * direction(E, C) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on H, E, D, H we get 180 == 2 * direction(H, E) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on D, E, B, C we get 180 == 2 * direction(D, E) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on G, C, B, G we get 180 == 2 * direction(G, C) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on F, D, A, B we get 180 == 2 * direction(F, D) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on E, H, G, D we get 180 == 2 * direction(E, H) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on D, B, G, C we get 180 == 2 * direction(D, B) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on B, G, H, E we get 180 == 2 * direction(B, G) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on D, E, B, E we get 180 == 2 * direction(D, E) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on G, B, G, C we get 180 == 2 * direction(G, B) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on E, B, E, D we get 180 == 2 * direction(E, B) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on D, A, I, G we get 180 == 2 * direction(D, A) - 2 * direction(I, G) mod 360
By perpendicular_direction_conditions_v0_r on G, I, I, A we get 180 == 2 * direction(G, I) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on C, G, B, D we get 180 == 2 * direction(C, G) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on G, D, G, C we get 180 == 2 * direction(G, D) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on B, H, C, G we get 180 == 2 * direction(B, H) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on G, C, D, B we get 180 == 2 * direction(G, C) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on E, H, G, H we get 180 == 2 * direction(E, H) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0_r on E, H, H, G we get 180 == 2 * direction(E, H) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0_r on D, B, H, E we get 180 == 2 * direction(D, B) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on B, F, F, D we get 180 == 2 * direction(B, F) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on G, I, I, D we get 180 == 2 * direction(G, I) - 2 * direction(I, D) mod 360
By perpendicular_direction_conditions_v0_r on E, H, D, B we get 180 == 2 * direction(E, H) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on D, F, F, B we get 180 == 2 * direction(D, F) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on D, G, E, H we get 180 == 2 * direction(D, G) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on E, H, G, B we get 180 == 2 * direction(E, H) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on C, G, H, G we get 180 == 2 * direction(C, G) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0_r on H, E, D, B we get 180 == 2 * direction(H, E) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on H, E, D, G we get 180 == 2 * direction(H, E) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on F, D, F, B we get 180 == 2 * direction(F, D) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on D, H, C, G we get 180 == 2 * direction(D, H) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on F, D, A, F we get 180 == 2 * direction(F, D) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on B, G, C, G we get 180 == 2 * direction(B, G) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on I, D, I, G we get 180 == 2 * direction(I, D) - 2 * direction(I, G) mod 360
By perpendicular_direction_conditions_v0_r on D, F, B, F we get 180 == 2 * direction(D, F) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on C, G, G, H we get 180 == 2 * direction(C, G) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0_r on C, G, G, B we get 180 == 2 * direction(C, G) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on H, E, B, D we get 180 == 2 * direction(H, E) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on H, E, G, H we get 180 == 2 * direction(H, E) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0_r on H, B, H, E we get 180 == 2 * direction(H, B) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on C, G, H, B we get 180 == 2 * direction(C, G) - 2 * direction(H, B) mod 360
By perpendicular_direction_conditions_v0_r on E, H, H, B we get 180 == 2 * direction(E, H) - 2 * direction(H, B) mod 360
By perpendicular_direction_conditions_v0_r on H, B, G, C we get 180 == 2 * direction(H, B) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on D, G, C, G we get 180 == 2 * direction(D, G) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on G, C, G, H we get 180 == 2 * direction(G, C) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0_r on A, B, F, D we get 180 == 2 * direction(A, B) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on I, G, I, D we get 180 == 2 * direction(I, G) - 2 * direction(I, D) mod 360
By perpendicular_direction_conditions_v0_r on G, C, B, H we get 180 == 2 * direction(G, C) - 2 * direction(B, H) mod 360
By perpendicular_direction_conditions_v0_r on B, G, E, H we get 180 == 2 * direction(B, G) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on F, D, F, A we get 180 == 2 * direction(F, D) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on C, G, D, H we get 180 == 2 * direction(C, G) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on D, B, C, G we get 180 == 2 * direction(D, B) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on B, E, D, E we get 180 == 2 * direction(B, E) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on H, E, H, B we get 180 == 2 * direction(H, E) - 2 * direction(H, B) mod 360
By perpendicular_direction_conditions_v0_r on I, G, A, D we get 180 == 2 * direction(I, G) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on I, G, A, I we get 180 == 2 * direction(I, G) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on C, G, D, G we get 180 == 2 * direction(C, G) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on I, G, D, I we get 180 == 2 * direction(I, G) - 2 * direction(D, I) mod 360
By perpendicular_direction_conditions_v0_r on H, B, C, G we get 180 == 2 * direction(H, B) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on G, C, D, H we get 180 == 2 * direction(G, C) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on C, G, G, D we get 180 == 2 * direction(C, G) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on E, D, B, C we get 180 == 2 * direction(E, D) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on H, E, H, D we get 180 == 2 * direction(H, E) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on G, H, C, G we get 180 == 2 * direction(G, H) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on H, G, C, G we get 180 == 2 * direction(H, G) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on B, D, H, E we get 180 == 2 * direction(B, D) - 2 * direction(H, E) mod 360
By altitude_definition on D, I, G, h we get h == altitude(D, G, I)
By altitude_definition on B, C, G, i we get i == altitude(B, C, G)
By altitude_definition on H, C, G, i we get i == altitude(H, C, G)
By altitude_definition on D, G, C, i we get i == altitude(D, C, G)
By altitude_definition on C, E, D, g we get g == altitude(C, D, E)
By altitude_definition on A, F, D, f we get f == altitude(A, D, F)
By altitude_definition on D, H, E, i we get i == altitude(D, E, H)
By altitude_definition on B, H, E, i we get i == altitude(B, E, H)
By altitude_definition on B, E, D, g we get g == altitude(B, D, E)
By altitude_definition on G, H, E, i we get i == altitude(G, E, H)
By altitude_definition on B, D, F, f we get f == altitude(B, D, F)
By altitude_definition on A, G, I, h we get h == altitude(A, G, I)
By same_angle_v0 on B, A, F, H we get angle(A, B, H) == angle(F, B, H) mod 360
By same_angle_v0 on B, A, F, D we get angle(A, B, D) == angle(F, B, D) mod 360
By same_angle_v1 on A, F, B, I we get angle(B, A, I) == angle(F, A, I) mod 360
By same_angle_v3 on E, B, C, H we get angle(B, E, H) == angle(C, E, H) + 180 mod 360
By same_angle_v0 on C, B, E, A we get angle(B, C, A) == angle(E, C, A) mod 360
By same_angle_v0 on C, B, E, G we get angle(B, C, G) == angle(E, C, G) mod 360
By same_angle_v0 on B, A, F, E we get angle(A, B, E) == angle(F, B, E) mod 360
By same_angle_v0 on B, A, F, C we get angle(A, B, C) == angle(F, B, C) mod 360
By same_angle_v1 on B, E, C, D we get angle(C, B, D) == angle(E, B, D) mod 360
By same_angle_v1 on B, E, C, A we get angle(C, B, A) == angle(E, B, A) mod 360
By same_angle_v1 on A, F, B, D we get angle(B, A, D) == angle(F, A, D) mod 360
By same_angle_v3 on E, B, C, D we get angle(B, E, D) == angle(C, E, D) + 180 mod 360
By same_angle_v0 on B, F, A, G we get angle(A, B, G) == angle(F, B, G) mod 360
By same_angle_v1 on B, E, C, H we get angle(C, B, H) == angle(E, B, H) mod 360
By same_angle_v1 on A, B, F, C we get angle(B, A, C) == angle(F, A, C) mod 360
By same_angle_v1 on B, C, E, F we get angle(C, B, F) == angle(E, B, F) mod 360
By same_angle_v2 on F, A, B, D we get angle(A, F, D) == angle(B, F, D) + 180 mod 360
By same_angle_v1 on B, C, E, G we get angle(C, B, G) == angle(E, B, G) mod 360
By altitude_definition on E, D, G, Line(E, H) we get Line(E, H) == altitude(E, D, G)
By perpendicular_angle_conditions_v0 on A, F, D we get angle(A, F, D) == orientation(A, F, D) mod 360
By perpendicular_angle_conditions_v0 on D, F, B we get angle(D, F, B) == orientation(B, D, F) mod 360
By collinear_definition on A, B, F we get B in Line(A, F), F in Line(A, B), Line(A, B) == Line(A, F), 0 == 2 * angle(B, A, F) mod 360
By altitude_definition on C, H, D, Line(C, G) we get Line(C, G) == altitude(C, D, H)
By collinear_definition on B, C, E we get C in Line(B, E), E in Line(B, C), Line(B, C) == Line(B, E), 0 == 2 * angle(C, B, E) mod 360
By collinear_definition on E, B, C we get B in Line(C, E), C in Line(B, E), Line(B, E) == Line(C, E), 0 == 2 * angle(B, E, C) mod 360
By altitude_definition on C, B, G, Line(C, G) we get Line(C, G) == altitude(C, B, G)
By perpendicular_angle_conditions_v0 on E, H, D we get angle(E, H, D) == orientation(D, E, H) mod 360
By altitude_definition on D, E, B, Line(D, E) we get Line(D, E) == altitude(D, B, E)
By altitude_definition on D, F, A, Line(D, F) we get Line(D, F) == altitude(D, A, F)
By altitude_definition on G, D, A, Line(G, I) we get Line(G, I) == altitude(G, A, D)
By perpendicular_angle_conditions_v0 on E, H, G we get angle(E, H, G) == orientation(E, H, G) mod 360
By perpendicular_angle_conditions_v0 on E, H, B we get angle(E, H, B) == orientation(B, E, H) mod 360
By altitude_definition on E, H, D, Line(E, H) we get Line(E, H) == altitude(E, D, H)
By altitude_definition on C, H, B, Line(C, G) we get Line(C, G) == altitude(C, B, H)
By altitude_definition on E, B, G, Line(E, H) we get Line(E, H) == altitude(E, B, G)
By perpendicular_angle_conditions_v0 on D, F, A we get angle(D, F, A) == orientation(A, D, F) mod 360
By perpendicular_angle_conditions_v0 on B, F, D we get angle(B, F, D) == orientation(B, F, D) mod 360
By collinear_definition on F, A, B we get A in Line(B, F), B in Line(A, F), Line(A, F) == Line(B, F), 0 == 2 * angle(A, F, B) mod 360
By altitude_definition on E, B, H, Line(E, H) we get Line(E, H) == altitude(E, B, H)
By collinear_definition on E, C, B we get C in Line(B, E), B in Line(C, E), Line(B, E) == Line(C, E), 0 == 2 * angle(C, E, B) mod 360
By altitude_definition on G, I, D, Line(G, I) we get Line(G, I) == altitude(G, D, I)
By altitude_definition on D, E, C, Line(D, E) we get Line(D, E) == altitude(D, C, E)
By perpendicular_angle_conditions_v0 on G, I, A we get angle(G, I, A) == orientation(A, G, I) mod 360
By altitude_definition on G, A, I, Line(G, I) we get Line(G, I) == altitude(G, A, I)
By perpendicular_angle_conditions_v0 on B, H, E we get angle(B, H, E) == orientation(B, H, E) mod 360
By perpendicular_angle_conditions_v0 on G, I, D we get angle(G, I, D) == orientation(D, G, I) mod 360
By altitude_definition on C, D, B, Line(C, G) we get Line(C, G) == altitude(C, B, D)
By altitude_definition on E, G, H, Line(E, H) we get Line(E, H) == altitude(E, G, H)
By altitude_definition on E, D, B, Line(E, H) we get Line(E, H) == altitude(E, B, D)
By perpendicular_angle_conditions_v0 on D, H, E we get angle(D, H, E) == orientation(D, H, E) mod 360
By perpendicular_angle_conditions_v0 on D, E, C we get angle(D, E, C) == orientation(C, D, E) mod 360
By perpendicular_angle_conditions_v0 on B, G, C we get angle(B, G, C) == orientation(B, G, C) mod 360
By altitude_definition on D, B, F, Line(D, F) we get Line(D, F) == altitude(D, B, F)
By altitude_definition on C, H, G, Line(C, G) we get Line(C, G) == altitude(C, G, H)
By collinear_definition on F, B, A we get B in Line(A, F), A in Line(B, F), Line(A, F) == Line(B, F), 0 == 2 * angle(B, F, A) mod 360
By perpendicular_angle_conditions_v0 on C, E, D we get angle(C, E, D) == orientation(C, E, D) mod 360
By altitude_definition on C, G, D, Line(C, G) we get Line(C, G) == altitude(C, D, G)
By collinear_definition on A, F, B we get F in Line(A, B), B in Line(A, F), Line(A, B) == Line(A, F), 0 == 2 * angle(F, A, B) mod 360
By perpendicular_angle_conditions_v0 on C, G, H we get angle(C, G, H) == orientation(C, G, H) mod 360
By perpendicular_angle_conditions_v0 on D, G, C we get angle(D, G, C) == orientation(C, D, G) mod 360
By perpendicular_angle_conditions_v0 on D, E, B we get angle(D, E, B) == orientation(B, D, E) mod 360
By perpendicular_angle_conditions_v0 on C, G, B we get angle(C, G, B) == orientation(B, C, G) mod 360
By perpendicular_angle_conditions_v0 on B, E, D we get angle(B, E, D) == orientation(B, E, D) mod 360
By perpendicular_angle_conditions_v0 on C, G, D we get angle(C, G, D) == orientation(C, G, D) mod 360
By collinear_definition on C, E, B we get E in Line(B, C), B in Line(C, E), Line(B, C) == Line(C, E), 0 == 2 * angle(E, C, B) mod 360
By collinear_definition on B, A, F we get A in Line(B, F), F in Line(A, B), Line(A, B) == Line(B, F), 0 == 2 * angle(A, B, F) mod 360
By perpendicular_angle_conditions_v0 on D, I, G we get angle(D, I, G) == orientation(D, I, G) mod 360
By perpendicular_angle_conditions_v0 on A, I, G we get angle(A, I, G) == orientation(A, I, G) mod 360
By collinear_definition on B, E, C we get E in Line(B, C), C in Line(B, E), Line(B, C) == Line(B, E), 0 == 2 * angle(E, B, C) mod 360
By perpendicular_angle_conditions_v0 on G, H, E we get angle(G, H, E) == orientation(E, G, H) mod 360
By perpendicular_angle_conditions_v0 on H, G, C we get angle(H, G, C) == orientation(C, H, G) mod 360
By collinear_definition on C, B, E we get B in Line(C, E), E in Line(B, C), Line(B, C) == Line(C, E), 0 == 2 * angle(B, C, E) mod 360
By collinear_definition on B, F, A we get F in Line(A, B), A in Line(B, F), Line(A, B) == Line(B, F), 0 == 2 * angle(F, B, A) mod 360
By internal_angle_bisector_definition_v0 on A, H, C, B we get angle(A, B, H) == angle(H, B, C) mod 360
By internal_angle_bisector_definition_v0 on A, D, C, B we get angle(A, B, D) == angle(D, B, C) mod 360
By internal_angle_bisector_definition_v0 on B, I, C, A we get angle(B, A, I) == angle(I, A, C) mod 360
By internal_angle_bisector_definition_v0 on A, G, C, B we get angle(A, B, G) == angle(G, B, C) mod 360
By internal_angle_bisector_definition_v0 on C, I, B, A we get angle(C, A, I) == angle(I, A, B) mod 360
By internal_angle_bisector_definition_v0 on B, D, C, A we get angle(B, A, D) == angle(D, A, C) mod 360
By internal_angle_bisector_definition_v0 on C, H, A, B we get angle(C, B, H) == angle(H, B, A) mod 360
By internal_angle_bisector_definition_v0 on C, G, A, B we get angle(C, B, G) == angle(G, B, A) mod 360
By internal_angle_bisector_definition_v0 on C, D, A, B we get angle(C, B, D) == angle(D, B, A) mod 360
By internal_angle_bisector_definition_v0 on C, D, B, A we get angle(C, A, D) == angle(D, A, B) mod 360
By parallel_line_angles_reverse_v2 on H, E, C, G we get angle(H, E, C) == angle(G, C, E) + 180 mod 360
By parallel_line_angles_reverse_v2 on C, G, H, E we get angle(C, G, H) == angle(E, H, G) + 180 mod 360
By parallel_line_angles_reverse_v3 on E, H, G, C we get angle(E, H, G) == angle(C, G, H) + 180 mod 360
By parallel_line_angles_reverse_v3 on G, C, E, H we get angle(G, C, E) == angle(H, E, C) + 180 mod 360
By concyclic_sufficient_conditions_v1 on C, E, D, G we get concyclic(C, D, E, G)
By concyclic_sufficient_conditions_v1 on D, E, B, F we get concyclic(B, D, E, F)
By concurrent_sufficient_conditions on g, Line(C, D), Line(C, G) we get concurrent(g, Line(C, D), Line(C, G))
By concurrent_sufficient_conditions on Line(A, C), Line(C, G), g we get concurrent(g, Line(A, C), Line(C, G))
By concurrent_sufficient_conditions on Line(C, G), g, Line(A, C) we get concurrent(g, Line(A, C), Line(C, G))
By concurrent_sufficient_conditions on Line(C, D), Line(C, G), Line(A, C) we get concurrent(Line(A, C), Line(C, D), Line(C, G))
By concurrent_sufficient_conditions on Line(C, G), g, Line(C, D) we get concurrent(g, Line(C, D), Line(C, G))
By concurrent_sufficient_conditions on g, Line(A, C), Line(C, D) we get concurrent(g, Line(A, C), Line(C, D))
By concurrent_sufficient_conditions on Line(A, C), Line(C, D), g we get concurrent(g, Line(A, C), Line(C, D))
By concurrent_sufficient_conditions on Line(C, G), Line(A, C), Line(C, D) we get concurrent(Line(A, C), Line(C, D), Line(C, G))
By concurrent_sufficient_conditions on Line(C, D), Line(C, G), g we get concurrent(g, Line(C, D), Line(C, G))
By concurrent_sufficient_conditions on h, f, Line(A, C) we get concurrent(f, h, Line(A, C))
By concurrent_sufficient_conditions on f, Line(A, C), h we get concurrent(f, h, Line(A, C))
By concurrent_sufficient_conditions on Line(C, D), Line(A, C), Line(C, G) we get concurrent(Line(A, C), Line(C, D), Line(C, G))
By concurrent_sufficient_conditions on Line(C, D), g, Line(C, G) we get concurrent(g, Line(C, D), Line(C, G))
By concurrent_sufficient_conditions on Line(A, C), Line(C, D), Line(C, G) we get concurrent(Line(A, C), Line(C, D), Line(C, G))
By concurrent_sufficient_conditions on g, Line(A, C), Line(C, G) we get concurrent(g, Line(A, C), Line(C, G))
By concurrent_sufficient_conditions on Line(A, C), f, h we get concurrent(f, h, Line(A, C))
By concurrent_sufficient_conditions on Line(C, G), Line(C, D), Line(A, C) we get concurrent(Line(A, C), Line(C, D), Line(C, G))
By concurrent_sufficient_conditions on Line(C, G), Line(C, D), g we get concurrent(g, Line(C, D), Line(C, G))
By concurrent_sufficient_conditions on Line(A, C), g, Line(C, D) we get concurrent(g, Line(A, C), Line(C, D))
By concurrent_sufficient_conditions on Line(A, C), h, f we get concurrent(f, h, Line(A, C))
By concurrent_sufficient_conditions on f, h, Line(A, C) we get concurrent(f, h, Line(A, C))
By concurrent_sufficient_conditions on Line(C, D), g, Line(A, C) we get concurrent(g, Line(A, C), Line(C, D))
By concurrent_sufficient_conditions on h, Line(A, C), f we get concurrent(f, h, Line(A, C))
By concurrent_sufficient_conditions on g, Line(C, G), Line(A, C) we get concurrent(g, Line(A, C), Line(C, G))
By concurrent_sufficient_conditions on Line(C, D), Line(A, C), g we get concurrent(g, Line(A, C), Line(C, D))
By concurrent_sufficient_conditions on g, Line(C, G), Line(C, D) we get concurrent(g, Line(C, D), Line(C, G))
By concurrent_sufficient_conditions on g, Line(C, D), Line(A, C) we get concurrent(g, Line(A, C), Line(C, D))
By concurrent_sufficient_conditions on Line(C, G), Line(A, C), g we get concurrent(g, Line(A, C), Line(C, G))
By concurrent_sufficient_conditions on Line(A, C), Line(C, G), Line(C, D) we get concurrent(Line(A, C), Line(C, D), Line(C, G))
By concurrent_sufficient_conditions on Line(A, C), g, Line(C, G) we get concurrent(g, Line(A, C), Line(C, G))
By same_angle_v1 on D, I, A, H we get angle(A, D, H) == angle(I, D, H) mod 360
By same_angle_v1 on B, H, D, A we get angle(D, B, A) == angle(H, B, A) mod 360
By same_angle_v1 on D, H, B, E we get angle(B, D, E) == angle(H, D, E) mod 360
By same_angle_v0 on B, H, D, E we get angle(D, B, E) == angle(H, B, E) mod 360
By same_angle_v1 on A, I, D, C we get angle(D, A, C) == angle(I, A, C) mod 360
By same_angle_v0 on B, H, G, C we get angle(G, B, C) == angle(H, B, C) mod 360
By same_angle_v1 on D, I, A, F we get angle(A, D, F) == angle(I, D, F) mod 360
By same_angle_v0 on D, I, A, G we get angle(A, D, G) == angle(I, D, G) mod 360
By same_angle_v3 on D, B, G, A we get angle(B, D, A) == angle(G, D, A) + 180 mod 360
By same_angle_v0 on A, D, I, B we get angle(D, A, B) == angle(I, A, B) mod 360
By same_angle_v0 on B, G, D, E we get angle(D, B, E) == angle(G, B, E) mod 360
By same_angle_v0 on A, I, D, F we get angle(D, A, F) == angle(I, A, F) mod 360
By same_angle_v3 on D, G, B, E we get angle(G, D, E) == angle(B, D, E) + 180 mod 360
By same_angle_v1 on B, G, H, F we get angle(G, B, F) == angle(H, B, F) mod 360
By same_angle_v2 on D, H, G, F we get angle(H, D, F) == angle(G, D, F) + 180 mod 360
By same_angle_v2 on D, H, G, I we get angle(H, D, I) == angle(G, D, I) + 180 mod 360
By same_angle_v0 on B, G, D, C we get angle(D, B, C) == angle(G, B, C) mod 360
By same_angle_v3 on D, B, G, I we get angle(B, D, I) == angle(G, D, I) + 180 mod 360
By same_angle_v1 on B, D, G, F we get angle(D, B, F) == angle(G, B, F) mod 360
By same_angle_v1 on B, D, H, F we get angle(D, B, F) == angle(H, B, F) mod 360
By same_angle_v3 on D, G, H, E we get angle(G, D, E) == angle(H, D, E) + 180 mod 360
By same_angle_v0 on D, H, B, I we get angle(B, D, I) == angle(H, D, I) mod 360
By same_angle_v0 on D, H, B, F we get angle(B, D, F) == angle(H, D, F) mod 360
By same_angle_v1 on B, D, G, A we get angle(D, B, A) == angle(G, B, A) mod 360
By same_angle_v0 on G, D, B, I we get angle(B, G, I) == angle(D, G, I) mod 360
By same_angle_v0 on G, B, H, I we get angle(B, G, I) == angle(H, G, I) mod 360
By same_angle_v2 on D, H, G, A we get angle(H, D, A) == angle(G, D, A) + 180 mod 360
By same_angle_v0 on G, D, H, I we get angle(D, G, I) == angle(H, G, I) mod 360
By same_angle_v1 on D, I, A, B we get angle(A, D, B) == angle(I, D, B) mod 360
By same_angle_v0 on B, D, H, C we get angle(D, B, C) == angle(H, B, C) mod 360
By same_angle_v2 on D, B, G, F we get angle(B, D, F) == angle(G, D, F) + 180 mod 360
By same_angle_v0 on B, H, G, E we get angle(G, B, E) == angle(H, B, E) mod 360
By same_angle_v1 on B, G, H, A we get angle(G, B, A) == angle(H, B, A) mod 360
By same_angle_v0 on D, A, I, E we get angle(A, D, E) == angle(I, D, E) mod 360
By same_angle_v0 on D, B, H, A we get angle(B, D, A) == angle(H, D, A) mod 360
By between_imply_not_between on B, F, A we get collinear_and_not_between(A, B, F)
By between_imply_not_between on C, E, B we get collinear_and_not_between(B, C, E)
By between_imply_not_between on A, F, B we get collinear_and_not_between(B, A, F)
By between_imply_not_between on B, E, C we get collinear_and_not_between(C, B, E)
By same_angle_v1 on D, H, B, C we get angle(B, D, C) == angle(H, D, C) mod 360
By same_angle_v0 on C, B, E, D we get angle(B, C, D) == angle(E, C, D) mod 360
By same_angle_v2 on D, G, H, C we get angle(G, D, C) == angle(H, D, C) + 180 mod 360
By probably_between_and_collinear_implies_between on B, H, G we get between(B, H, G)
By divide_by_2_mod_180_v0 on A, B, G, F, B, D we get angle(A, B, G) == angle(F, B, D) mod 360
By same_angle_v0 on D, I, A, C we get angle(A, D, C) == angle(I, D, C) mod 360
By divide_by_2_mod_180_v1 on F, A, D, B, A, I we get angle(B, A, I) == angle(F, A, D) mod 360
By orthocenter_concurrency on C, D, B we get orthocenter(B, C, D) in altitude(C, B, D), orthocenter(B, C, D) in altitude(D, B, C), orthocenter(B, C, D) in altitude(B, C, D)
By divide_by_2_mod_180_v1 on H, B, A, E, B, D we get angle(E, B, D) == angle(H, B, A) mod 360
By same_angle_v3 on D, G, B, C we get angle(G, D, C) == angle(B, D, C) + 180 mod 360
By divide_by_2_mod_180_v1 on D, B, F, H, B, A we get angle(D, B, F) == angle(H, B, A) mod 360
By probably_between_and_collinear_implies_between on B, H, D we get between(B, H, D)
By divide_by_2_mod_180_v1 on E, B, G, H, B, A we get angle(E, B, G) == angle(H, B, A) mod 360
By divide_by_2_mod_180_v0 on F, B, D, H, B, E we get angle(F, B, D) == angle(H, B, E) mod 360
By probably_between_and_collinear_implies_between on A, I, D we get between(A, I, D)
By between_imply_segment_sum on B, E, C we get distance(B, C) == distance(B, E) + distance(C, E)
By divide_by_2_mod_180_v1 on E, B, G, D, B, A we get angle(D, B, A) == angle(E, B, G) mod 360
By divide_by_2_mod_180_v1 on C, B, D, H, B, F we get angle(C, B, D) == angle(H, B, F) mod 360
By divide_by_2_mod_180_v1 on C, B, G, H, B, A we get angle(C, B, G) == angle(H, B, A) mod 360
By divide_by_2_mod_180_v0 on A, B, D, H, B, E we get angle(A, B, D) == angle(H, B, E) mod 360
By divide_by_2_mod_180_v0 on F, B, G, D, B, C we get angle(D, B, C) == angle(F, B, G) mod 360
By divide_by_2_mod_180_v0 on A, B, H, F, B, D we get angle(A, B, H) == angle(F, B, D) mod 360
By divide_by_2_mod_180_v0 on D, A, B, C, A, I we get angle(C, A, I) == angle(D, A, B) mod 360
By probably_between_and_collinear_implies_between on H, D, G we get between(G, D, H)
By divide_by_2_mod_180_v1 on C, B, H, G, B, A we get angle(C, B, H) == angle(G, B, A) mod 360
By probably_between_and_collinear_implies_between on G, D, B we get between(B, D, G)
By divide_by_2_mod_180_v1 on E, B, H, D, B, A we get angle(D, B, A) == angle(E, B, H) mod 360
By divide_by_2_mod_180_v0 on H, B, C, D, B, E we get angle(D, B, E) == angle(H, B, C) mod 360
By divide_by_2_mod_180_v0 on A, B, G, A, B, D we get angle(A, B, D) == angle(A, B, G) mod 360
By divide_by_2_mod_180_v1 on B, A, D, I, A, C we get angle(B, A, D) == angle(I, A, C) mod 360
By divide_by_2_mod_180_v0 on A, B, G, H, B, C we get angle(A, B, G) == angle(H, B, C) mod 360
By divide_by_2_mod_180_v1 on C, B, D, C, B, H we get angle(C, B, D) == angle(C, B, H) mod 360
By reverse_direction on C, A we get 180 == direction(C, A) - direction(A, C) mod 360
By divide_by_2_mod_180_v0 on A, B, H, A, B, G we get angle(A, B, G) == angle(A, B, H) mod 360
By divide_by_2_mod_180_v0 on C, A, D, I, A, F we get angle(C, A, D) == angle(I, A, F) mod 360
By divide_by_2_mod_180_v1 on C, B, G, D, B, A we get angle(C, B, G) == angle(D, B, A) mod 360
By divide_by_2_mod_180_v1 on C, B, D, E, B, G we get angle(C, B, D) == angle(E, B, G) mod 360
By divide_by_2_mod_180_v0 on G, B, E, F, B, D we get angle(F, B, D) == angle(G, B, E) mod 360
By collinear_definition on G, B, H we get B in Line(G, H), H in Line(B, G), Line(B, G) == Line(G, H), 0 == 2 * angle(B, G, H) mod 360
By divide_by_2_mod_180_v1 on E, B, G, E, B, D we get angle(E, B, D) == angle(E, B, G) mod 360
By divide_by_2_mod_180_v0 on C, A, I, D, A, F we get angle(C, A, I) == angle(D, A, F) mod 360
By divide_by_2_mod_180_v1 on E, B, G, D, B, F we get angle(D, B, F) == angle(E, B, G) mod 360
By reverse_direction on E, H we get 180 == direction(E, H) - direction(H, E) mod 360
By divide_by_2_mod_180_v0 on D, B, C, A, B, G we get angle(A, B, G) == angle(D, B, C) mod 360
By divide_by_2_mod_180_v0 on A, B, H, G, B, C we get angle(A, B, H) == angle(G, B, C) mod 360
By divide_by_2_mod_180_v1 on G, B, A, E, B, H we get angle(E, B, H) == angle(G, B, A) mod 360
By aa_similarity on B, H, E, B, G, C we get similar_triangles(B, C, G, B, E, H)
By divide_by_2_mod_180_v1 on G, B, F, E, B, H we get angle(E, B, H) == angle(G, B, F) mod 360
By divide_by_2_mod_180_v1 on H, B, A, G, B, F we get angle(G, B, F) == angle(H, B, A) mod 360
By divide_by_2_mod_180_v0 on D, B, C, F, B, H we get angle(D, B, C) == angle(F, B, H) mod 360
By divide_by_2_mod_180_v0 on G, B, C, A, B, D we get angle(A, B, D) == angle(G, B, C) mod 360
By divide_by_2_mod_180_v0 on H, B, E, A, B, G we get angle(A, B, G) == angle(H, B, E) mod 360
By divide_by_2_mod_180_v1 on G, B, A, H, B, F we get angle(G, B, A) == angle(H, B, F) mod 360
By divide_by_2_mod_180_v0 on D, B, E, F, B, G we get angle(D, B, E) == angle(F, B, G) mod 360
By divide_by_2_mod_180_v0 on F, B, G, F, B, H we get angle(F, B, G) == angle(F, B, H) mod 360
By divide_by_2_mod_180_v1 on C, B, G, D, B, F we get angle(C, B, G) == angle(D, B, F) mod 360
By divide_by_2_mod_180_v0 on A, B, G, D, B, E we get angle(A, B, G) == angle(D, B, E) mod 360
By divide_by_2_mod_180_v0 on D, B, C, A, B, H we get angle(A, B, H) == angle(D, B, C) mod 360
By divide_by_2_mod_180_v0 on F, B, D, G, B, C we get angle(F, B, D) == angle(G, B, C) mod 360
By divide_by_2_mod_180_v1 on E, B, G, H, B, F we get angle(E, B, G) == angle(H, B, F) mod 360
By collinear_definition on B, G, H we get G in Line(B, H), H in Line(B, G), Line(B, G) == Line(B, H), 0 == 2 * angle(G, B, H) mod 360
By divide_by_2_mod_180_v1 on C, B, G, E, B, H we get angle(C, B, G) == angle(E, B, H) mod 360
By divide_by_2_mod_180_v1 on C, B, H, E, B, G we get angle(C, B, H) == angle(E, B, G) mod 360
By divide_by_2_mod_180_v1 on C, B, D, G, B, A we get angle(C, B, D) == angle(G, B, A) mod 360
By reverse_direction on D, A we get 180 == direction(D, A) - direction(A, D) mod 360
By reverse_direction on C, B we get 180 == direction(C, B) - direction(B, C) mod 360
By divide_by_2_mod_180_v0 on G, B, E, H, B, C we get angle(G, B, E) == angle(H, B, C) mod 360
By divide_by_2_mod_180_v1 on B, A, D, B, A, I we get angle(B, A, D) == angle(B, A, I) mod 360
By divide_by_2_mod_180_v1 on B, A, D, F, A, I we get angle(B, A, D) == angle(F, A, I) mod 360
By divide_by_2_mod_180_v0 on D, B, C, G, B, E we get angle(D, B, C) == angle(G, B, E) mod 360
By divide_by_2_mod_180_v1 on D, B, F, E, B, H we get angle(D, B, F) == angle(E, B, H) mod 360
By divide_by_2_mod_180_v0 on C, A, D, I, A, B we get angle(C, A, D) == angle(I, A, B) mod 360
By reverse_direction on H, D we get 180 == direction(H, D) - direction(D, H) mod 360
By divide_by_2_mod_180_v1 on E, B, D, E, B, H we get angle(E, B, D) == angle(E, B, H) mod 360
By divide_by_2_mod_180_v0 on A, B, D, H, B, C we get angle(A, B, D) == angle(H, B, C) mod 360
By divide_by_2_mod_180_v0 on A, B, H, G, B, E we get angle(A, B, H) == angle(G, B, E) mod 360
By divide_by_2_mod_180_v1 on E, B, D, C, B, H we get angle(C, B, H) == angle(E, B, D) mod 360
By divide_by_2_mod_180_v1 on I, A, C, F, A, D we get angle(F, A, D) == angle(I, A, C) mod 360
By divide_by_2_mod_180_v0 on F, B, H, A, B, G we get angle(A, B, G) == angle(F, B, H) mod 360
By divide_by_2_mod_180_v1 on G, B, F, C, B, D we get angle(C, B, D) == angle(G, B, F) mod 360
By divide_by_2_mod_180_v1 on F, A, I, F, A, D we get angle(F, A, D) == angle(F, A, I) mod 360
By divide_by_2_mod_180_v1 on C, B, D, E, B, H we get angle(C, B, D) == angle(E, B, H) mod 360
By reverse_direction on B, E we get 180 == direction(B, E) - direction(E, B) mod 360
By divide_by_2_mod_180_v1 on H, B, F, C, B, G we get angle(C, B, G) == angle(H, B, F) mod 360
By divide_by_2_mod_180_v1 on G, B, F, E, B, D we get angle(E, B, D) == angle(G, B, F) mod 360
By divide_by_2_mod_180_v0 on F, B, D, F, B, H we get angle(F, B, D) == angle(F, B, H) mod 360
By divide_by_2_mod_180_v1 on F, A, I, D, A, C we get angle(D, A, C) == angle(F, A, I) mod 360
By reverse_direction on B, D we get 180 == direction(B, D) - direction(D, B) mod 360
By divide_by_2_mod_180_v1 on G, B, F, D, B, A we get angle(D, B, A) == angle(G, B, F) mod 360
By reverse_direction on F, A we get 180 == direction(F, A) - direction(A, F) mod 360
By divide_by_2_mod_180_v1 on E, B, H, E, B, G we get angle(E, B, G) == angle(E, B, H) mod 360
By divide_by_2_mod_180_v1 on D, B, F, G, B, A we get angle(D, B, F) == angle(G, B, A) mod 360
By divide_by_2_mod_180_v0 on F, B, H, A, B, D we get angle(A, B, D) == angle(F, B, H) mod 360
By divide_by_2_mod_180_v0 on G, B, C, D, B, E we get angle(D, B, E) == angle(G, B, C) mod 360
By divide_by_2_mod_180_v0 on D, B, E, F, B, H we get angle(D, B, E) == angle(F, B, H) mod 360
By divide_by_2_mod_180_v1 on C, B, H, D, B, F we get angle(C, B, H) == angle(D, B, F) mod 360
By divide_by_2_mod_180_v1 on C, B, G, C, B, H we get angle(C, B, G) == angle(C, B, H) mod 360
By divide_by_2_mod_180_v1 on G, B, F, C, B, H we get angle(C, B, H) == angle(G, B, F) mod 360
By divide_by_2_mod_180_v0 on I, A, F, D, A, B we get angle(D, A, B) == angle(I, A, F) mod 360
By divide_by_2_mod_180_v0 on G, B, E, F, B, H we get angle(F, B, H) == angle(G, B, E) mod 360
By divide_by_2_mod_180_v0 on H, B, E, D, B, C we get angle(D, B, C) == angle(H, B, E) mod 360
By between_imply_segment_sum on B, F, A we get distance(A, B) == distance(B, F) + distance(A, F)
By aa_anti_similarity on D, F, B, D, E, B we get anti_similar_triangles(B, D, E, B, D, F)
By reverse_direction on I, G we get 180 == direction(I, G) - direction(G, I) mod 360
By divide_by_2_mod_180_v0 on D, A, F, I, A, B we get angle(D, A, F) == angle(I, A, B) mod 360
By collinear_definition on H, G, B we get G in Line(B, H), B in Line(G, H), Line(B, H) == Line(G, H), 0 == 2 * angle(G, H, B) mod 360
By reverse_direction on H, B we get 180 == direction(H, B) - direction(B, H) mod 360
By aa_anti_similarity on D, B, F, D, B, E we get anti_similar_triangles(B, D, E, B, D, F)
By divide_by_2_mod_180_v1 on G, B, A, E, B, D we get angle(E, B, D) == angle(G, B, A) mod 360
By divide_by_2_mod_180_v1 on C, B, D, H, B, A we get angle(C, B, D) == angle(H, B, A) mod 360
By reverse_direction on G, I we get 180 == direction(G, I) - direction(I, G) mod 360
By divide_by_2_mod_180_v1 on C, B, D, C, B, G we get angle(C, B, D) == angle(C, B, G) mod 360
By divide_by_2_mod_180_v0 on F, B, D, F, B, G we get angle(F, B, D) == angle(F, B, G) mod 360
By divide_by_2_mod_180_v0 on A, B, H, A, B, D we get angle(A, B, D) == angle(A, B, H) mod 360
By divide_by_2_mod_180_v1 on D, B, A, H, B, F we get angle(D, B, A) == angle(H, B, F) mod 360
By divide_by_2_mod_180_v0 on F, B, H, G, B, C we get angle(F, B, H) == angle(G, B, C) mod 360
By divide_by_2_mod_180_v1 on C, B, H, D, B, A we get angle(C, B, H) == angle(D, B, A) mod 360
By divide_by_2_mod_180_v0 on D, B, E, A, B, H we get angle(A, B, H) == angle(D, B, E) mod 360
By collinear_definition on D, H, B we get H in Line(B, D), B in Line(D, H), Line(B, D) == Line(D, H), 0 == 2 * angle(H, D, B) mod 360
By collinear_definition on D, A, I we get A in Line(D, I), I in Line(A, D), Line(A, D) == Line(D, I), 0 == 2 * angle(A, D, I) mod 360
By divide_by_2_mod_180_v0 on C, A, I, C, A, D we get angle(C, A, D) == angle(C, A, I) mod 360
By reverse_direction on G, H we get 180 == direction(G, H) - direction(H, G) mod 360
By divide_by_2_mod_180_v0 on H, B, C, F, B, G we get angle(F, B, G) == angle(H, B, C) mod 360
By divide_by_2_mod_180_v1 on H, B, F, E, B, D we get angle(E, B, D) == angle(H, B, F) mod 360
By reverse_direction on A, C we get 180 == direction(A, C) - direction(C, A) mod 360
By collinear_definition on B, H, G we get H in Line(B, G), G in Line(B, H), Line(B, G) == Line(B, H), 0 == 2 * angle(H, B, G) mod 360
By collinear_definition on D, G, B we get G in Line(B, D), B in Line(D, G), Line(B, D) == Line(D, G), 0 == 2 * angle(G, D, B) mod 360
By reverse_direction on D, E we get 180 == direction(D, E) - direction(E, D) mod 360
By reverse_direction on H, G we get 180 == direction(H, G) - direction(G, H) mod 360
By divide_by_2_mod_180_v0 on H, B, C, F, B, D we get angle(F, B, D) == angle(H, B, C) mod 360
By collinear_definition on D, B, G we get B in Line(D, G), G in Line(B, D), Line(B, D) == Line(D, G), 0 == 2 * angle(B, D, G) mod 360
By reverse_direction on C, E we get 180 == direction(C, E) - direction(E, C) mod 360
By divide_by_2_mod_180_v0 on G, B, E, A, B, D we get angle(A, B, D) == angle(G, B, E) mod 360
By divide_by_2_mod_180_v1 on B, A, I, D, A, C we get angle(B, A, I) == angle(D, A, C) mod 360
By collinear_definition on H, B, G we get B in Line(G, H), G in Line(B, H), Line(B, H) == Line(G, H), 0 == 2 * angle(B, H, G) mod 360
By divide_by_2_mod_180_v1 on E, B, D, C, B, G we get angle(C, B, G) == angle(E, B, D) mod 360
By collinear_definition on H, G, D we get G in Line(D, H), D in Line(G, H), Line(D, H) == Line(G, H), 0 == 2 * angle(G, H, D) mod 360
By collinear_definition on G, D, H we get D in Line(G, H), H in Line(D, G), Line(D, G) == Line(G, H), 0 == 2 * angle(D, G, H) mod 360
By reverse_direction on A, I we get 180 == direction(A, I) - direction(I, A) mod 360
By aa_similarity on B, G, C, B, H, E we get similar_triangles(B, C, G, B, E, H)
By divide_by_2_mod_180_v0 on A, B, H, F, B, G we get angle(A, B, H) == angle(F, B, G) mod 360
By collinear_definition on G, B, D we get B in Line(D, G), D in Line(B, G), Line(B, G) == Line(D, G), 0 == 2 * angle(B, G, D) mod 360
By divide_by_2_mod_180_v0 on F, B, G, A, B, D we get angle(A, B, D) == angle(F, B, G) mod 360
By collinear_definition on B, H, D we get H in Line(B, D), D in Line(B, H), Line(B, D) == Line(B, H), 0 == 2 * angle(H, B, D) mod 360
By divide_by_2_mod_180_v0 on H, B, E, F, B, G we get angle(F, B, G) == angle(H, B, E) mod 360
By aa_similarity on B, C, G, B, E, H we get similar_triangles(B, C, G, B, E, H)
By reverse_direction on D, B we get 180 == direction(D, B) - direction(B, D) mod 360
By reverse_direction on H, E we get 180 == direction(H, E) - direction(E, H) mod 360
By reverse_direction on B, F we get 180 == direction(B, F) - direction(F, B) mod 360
By reverse_direction on I, D we get 180 == direction(I, D) - direction(D, I) mod 360
By reverse_direction on D, H we get 180 == direction(D, H) - direction(H, D) mod 360
By reverse_direction on B, G we get 180 == direction(B, G) - direction(G, B) mod 360
By collinear_definition on H, D, B we get D in Line(B, H), B in Line(D, H), Line(B, H) == Line(D, H), 0 == 2 * angle(D, H, B) mod 360
By collinear_definition on H, B, D we get B in Line(D, H), D in Line(B, H), Line(B, H) == Line(D, H), 0 == 2 * angle(B, H, D) mod 360
By collinear_definition on B, D, G we get D in Line(B, G), G in Line(B, D), Line(B, D) == Line(B, G), 0 == 2 * angle(D, B, G) mod 360
By reverse_direction on F, D we get 180 == direction(F, D) - direction(D, F) mod 360
By reverse_direction on F, B we get 180 == direction(F, B) - direction(B, F) mod 360
By collinear_definition on D, G, H we get G in Line(D, H), H in Line(D, G), Line(D, G) == Line(D, H), 0 == 2 * angle(G, D, H) mod 360
By reverse_direction on A, F we get 180 == direction(A, F) - direction(F, A) mod 360
By reverse_direction on B, H we get 180 == direction(B, H) - direction(H, B) mod 360
By reverse_direction on G, D we get 180 == direction(G, D) - direction(D, G) mod 360
By reverse_direction on B, C we get 180 == direction(B, C) - direction(C, B) mod 360
By reverse_direction on D, F we get 180 == direction(D, F) - direction(F, D) mod 360
By collinear_definition on D, B, H we get B in Line(D, H), H in Line(B, D), Line(B, D) == Line(D, H), 0 == 2 * angle(B, D, H) mod 360
By collinear_definition on D, I, A we get I in Line(A, D), A in Line(D, I), Line(A, D) == Line(D, I), 0 == 2 * angle(I, D, A) mod 360
By collinear_definition on I, A, D we get A in Line(D, I), D in Line(A, I), Line(A, I) == Line(D, I), 0 == 2 * angle(A, I, D) mod 360
By reverse_direction on G, C we get 180 == direction(G, C) - direction(C, G) mod 360
By collinear_definition on B, D, H we get D in Line(B, H), H in Line(B, D), Line(B, D) == Line(B, H), 0 == 2 * angle(D, B, H) mod 360
By collinear_definition on A, D, I we get D in Line(A, I), I in Line(A, D), Line(A, D) == Line(A, I), 0 == 2 * angle(D, A, I) mod 360
By reverse_direction on G, B we get 180 == direction(G, B) - direction(B, G) mod 360
By collinear_definition on A, I, D we get I in Line(A, D), D in Line(A, I), Line(A, D) == Line(A, I), 0 == 2 * angle(I, A, D) mod 360
By aa_anti_similarity on D, B, E, D, B, F we get anti_similar_triangles(B, D, E, B, D, F)
By reverse_direction on D, I we get 180 == direction(D, I) - direction(I, D) mod 360
By aa_anti_similarity on D, E, B, D, F, B we get anti_similar_triangles(B, D, E, B, D, F)
By collinear_definition on G, H, B we get H in Line(B, G), B in Line(G, H), Line(B, G) == Line(G, H), 0 == 2 * angle(H, G, B) mod 360
By reverse_direction on C, G we get 180 == direction(C, G) - direction(G, C) mod 360
By reverse_direction on E, D we get 180 == direction(E, D) - direction(D, E) mod 360
By collinear_definition on G, D, B we get D in Line(B, G), B in Line(D, G), Line(B, G) == Line(D, G), 0 == 2 * angle(D, G, B) mod 360
By reverse_direction on A, D we get 180 == direction(A, D) - direction(D, A) mod 360
By reverse_direction on A, B we get 180 == direction(A, B) - direction(B, A) mod 360
By reverse_direction on B, A we get 180 == direction(B, A) - direction(A, B) mod 360
By aa_similarity on B, E, H, B, C, G we get similar_triangles(B, C, G, B, E, H)
By collinear_definition on I, D, A we get D in Line(A, I), A in Line(D, I), Line(A, I) == Line(D, I), 0 == 2 * angle(D, I, A) mod 360
By reverse_direction on I, A we get 180 == direction(I, A) - direction(A, I) mod 360
By reverse_direction on E, B we get 180 == direction(E, B) - direction(B, E) mod 360
By collinear_definition on H, D, G we get D in Line(G, H), G in Line(D, H), Line(D, H) == Line(G, H), 0 == 2 * angle(D, H, G) mod 360
By reverse_direction on E, C we get 180 == direction(E, C) - direction(C, E) mod 360
By collinear_definition on B, G, D we get G in Line(B, D), D in Line(B, G), Line(B, D) == Line(B, G), 0 == 2 * angle(G, B, D) mod 360
By collinear_definition on D, H, G we get H in Line(D, G), G in Line(D, H), Line(D, G) == Line(D, H), 0 == 2 * angle(H, D, G) mod 360
By reverse_direction on D, G we get 180 == direction(D, G) - direction(G, D) mod 360
By collinear_definition on G, H, D we get H in Line(D, G), D in Line(G, H), Line(D, G) == Line(G, H), 0 == 2 * angle(H, G, D) mod 360
By internal_angle_bisector_definition_v0_r on C, E, C, B we get Line(B, E) == internal_angle_bisector(C, B, C)
By external_angle_bisector_definition_v0_r on C, H, C, G we get Line(G, H) == external_angle_bisector(C, G, C)
By external_angle_bisector_definition_v0_r on E, G, E, H we get Line(G, H) == external_angle_bisector(E, H, E)
By external_angle_bisector_definition_v0_r on C, D, C, E we get Line(D, E) == external_angle_bisector(C, E, C)
By internal_angle_bisector_definition_v0_r on F, D, C, A we get Line(A, D) == internal_angle_bisector(C, A, F)
By external_angle_bisector_definition_v0_r on H, C, B, G we get Line(C, G) == external_angle_bisector(B, G, H)
By internal_angle_bisector_definition_v0 on B, D, A, C we get angle(B, C, D) == angle(D, C, A) mod 360
By external_angle_bisector_definition_v0_r on G, A, G, I we get Line(A, I) == external_angle_bisector(G, I, G)
By external_angle_bisector_definition_v0_r on D, E, D, H we get Line(E, H) == external_angle_bisector(D, H, D)
By external_angle_bisector_definition_v0_r on D, E, G, H we get Line(E, H) == external_angle_bisector(D, H, G)
By external_angle_bisector_definition_v0_r on C, D, C, G we get Line(D, G) == external_angle_bisector(C, G, C)
By external_angle_bisector_definition_v0_r on H, C, H, G we get Line(C, G) == external_angle_bisector(H, G, H)
By external_angle_bisector_definition_v0_r on D, C, B, G we get Line(C, G) == external_angle_bisector(B, G, D)
By internal_angle_bisector_definition_v0_r on C, D, B, E we get Line(D, E) == internal_angle_bisector(B, E, C)
By external_angle_bisector_definition_v0_r on E, B, E, H we get Line(B, H) == external_angle_bisector(E, H, E)
By external_angle_bisector_definition_v0_r on D, C, D, E we get Line(C, E) == external_angle_bisector(D, E, D)
By external_angle_bisector_definition_v0_r on B, D, B, F we get Line(D, F) == external_angle_bisector(B, F, B)
By external_angle_bisector_definition_v0_r on D, A, D, F we get Line(A, F) == external_angle_bisector(D, F, D)
By external_angle_bisector_definition_v0_r on D, C, D, G we get Line(C, G) == external_angle_bisector(D, G, D)
By external_angle_bisector_definition_v0_r on C, B, C, G we get Line(B, G) == external_angle_bisector(C, G, C)
By external_angle_bisector_definition_v0_r on E, D, E, H we get Line(D, H) == external_angle_bisector(E, H, E)
By external_angle_bisector_definition_v0_r on B, C, B, G we get Line(C, G) == external_angle_bisector(B, G, B)
By external_angle_bisector_definition_v0_r on D, C, H, G we get Line(C, G) == external_angle_bisector(D, G, H)
By external_angle_bisector_definition_v0_r on G, E, G, H we get Line(E, H) == external_angle_bisector(G, H, G)
By internal_angle_bisector_definition_v0_r on E, H, A, B we get Line(B, H) == internal_angle_bisector(A, B, E)
By internal_angle_bisector_definition_v0_r on D, G, A, I we get Line(G, I) == internal_angle_bisector(A, I, D)
By external_angle_bisector_definition_v0_r on B, D, B, E we get Line(D, E) == external_angle_bisector(B, E, B)
By internal_angle_bisector_definition_v0_r on B, E, B, C we get Line(C, E) == internal_angle_bisector(B, C, B)
By external_angle_bisector_definition_v0_r on B, E, B, H we get Line(E, H) == external_angle_bisector(B, H, B)
By internal_angle_bisector_definition_v0_r on A, B, A, F we get Line(B, F) == internal_angle_bisector(A, F, A)
By internal_angle_bisector_definition_v0_r on C, H, F, B we get Line(B, H) == internal_angle_bisector(C, B, F)
By external_angle_bisector_definition_v0_r on D, B, D, E we get Line(B, E) == external_angle_bisector(D, E, D)
By external_angle_bisector_definition_v0_r on A, G, A, I we get Line(G, I) == external_angle_bisector(A, I, A)
By external_angle_bisector_definition_v0_r on D, B, D, F we get Line(B, F) == external_angle_bisector(D, F, D)
By internal_angle_bisector_definition_v0_r on F, A, F, B we get Line(A, B) == internal_angle_bisector(F, B, F)
By internal_angle_bisector_definition_v0_r on D, E, B, H we get Line(E, H) == internal_angle_bisector(B, H, D)
By internal_angle_bisector_definition_v0_r on E, G, A, B we get Line(B, G) == internal_angle_bisector(A, B, E)
By internal_angle_bisector_definition_v0_r on E, G, F, B we get Line(B, G) == internal_angle_bisector(E, B, F)
By external_angle_bisector_definition_v0_r on G, D, G, I we get Line(D, I) == external_angle_bisector(G, I, G)
By external_angle_bisector_definition_v0_r on A, D, A, F we get Line(D, F) == external_angle_bisector(A, F, A)
By internal_angle_bisector_definition_v0_r on B, D, A, F we get Line(D, F) == internal_angle_bisector(A, F, B)
By internal_angle_bisector_definition_v0_r on C, B, C, E we get Line(B, E) == internal_angle_bisector(C, E, C)
By internal_angle_bisector_definition_v0_r on B, A, B, F we get Line(A, F) == internal_angle_bisector(B, F, B)
By internal_angle_bisector_definition_v0_r on E, H, F, B we get Line(B, H) == internal_angle_bisector(E, B, F)
By internal_angle_bisector_definition_v0_r on A, F, A, B we get Line(B, F) == internal_angle_bisector(A, B, A)
By internal_angle_bisector_definition_v0_r on F, D, E, B we get Line(B, D) == internal_angle_bisector(E, B, F)
By internal_angle_bisector_definition_v0_r on F, D, C, B we get Line(B, D) == internal_angle_bisector(C, B, F)
By internal_angle_bisector_definition_v0_r on E, D, A, B we get Line(B, D) == internal_angle_bisector(A, B, E)
By external_angle_bisector_definition_v0_r on D, G, D, I we get Line(G, I) == external_angle_bisector(D, I, D)
By internal_angle_bisector_definition_v0_r on E, C, E, B we get Line(B, C) == internal_angle_bisector(E, B, E)
By internal_angle_bisector_definition_v0_r on F, G, C, B we get Line(B, G) == internal_angle_bisector(C, B, F)
By internal_angle_bisector_definition_v0_r on C, I, F, A we get Line(A, I) == internal_angle_bisector(C, A, F)
By internal_angle_bisector_definition_v0_r on F, B, F, A we get Line(A, B) == internal_angle_bisector(F, A, F)
By internal_angle_bisector_definition_v0 on A, D, B, C we get angle(A, C, D) == angle(D, C, B) mod 360
By internal_angle_bisector_definition_v0_r on G, E, B, H we get Line(E, H) == internal_angle_bisector(B, H, G)
By internal_angle_bisector_definition_v0_r on B, C, B, E we get Line(C, E) == internal_angle_bisector(B, E, B)
By internal_angle_bisector_definition_v0_r on E, B, E, C we get Line(B, C) == internal_angle_bisector(E, C, E)
By internal_angle_bisector_definition_v0_r on B, F, B, A we get Line(A, F) == internal_angle_bisector(B, A, B)
By line_definition on orthocenter(B, C, D), D, Line(D, E) we get Line(D, E) == Line(D, orthocenter(B, C, D))
By line_definition on orthocenter(B, C, D), C, Line(C, G) we get Line(C, G) == Line(C, orthocenter(B, C, D))
By line_definition on E, orthocenter(B, C, D), Line(D, E) we get Line(D, E) == Line(E, orthocenter(B, C, D))
By line_definition on orthocenter(B, C, D), G, Line(C, G) we get Line(C, G) == Line(G, orthocenter(B, C, D))
By line_definition on B, orthocenter(B, C, D), altitude(B, C, D) we get altitude(B, C, D) == Line(B, orthocenter(B, C, D))
By line_intersection_definition on orthocenter(B, C, D), Line(C, G), Line(D, E) we get orthocenter(B, C, D) == line_intersection(Line(C, G), Line(D, E))
By perpendicular_line_definition on orthocenter(B, C, D), Line(D, E), g we get Line(D, E) == perpendicular_line(orthocenter(B, C, D), g)
By line_intersection_definition on B, altitude(B, C, D), i we get B == line_intersection(i, altitude(B, C, D))
By line_intersection_definition on B, g, altitude(B, C, D) we get B == line_intersection(g, altitude(B, C, D))
By line_intersection_definition on orthocenter(B, C, D), Line(C, G), altitude(B, C, D) we get orthocenter(B, C, D) == line_intersection(Line(C, G), altitude(B, C, D))
By perpendicular_line_definition on C, Line(C, D), altitude(B, C, D) we get Line(C, D) == perpendicular_line(C, altitude(B, C, D))
By line_intersection_definition on B, f, altitude(B, C, D) we get B == line_intersection(f, altitude(B, C, D))
By line_intersection_definition on orthocenter(B, C, D), altitude(B, C, D), Line(D, E) we get orthocenter(B, C, D) == line_intersection(Line(D, E), altitude(B, C, D))
By perpendicular_line_definition on D, Line(C, D), altitude(B, C, D) we get Line(C, D) == perpendicular_line(D, altitude(B, C, D))
By perpendicular_line_definition on orthocenter(B, C, D), altitude(B, C, D), Line(C, D) we get altitude(B, C, D) == perpendicular_line(orthocenter(B, C, D), Line(C, D))
By perpendicular_line_definition on orthocenter(B, C, D), Line(C, G), i we get Line(C, G) == perpendicular_line(orthocenter(B, C, D), i)
By between_imply_not_between on A, I, D we get collinear_and_not_between(D, A, I)
By between_imply_not_between on D, H, B we get collinear_and_not_between(B, D, H)
By between_imply_not_between on B, H, D we get collinear_and_not_between(D, B, H)
By between_imply_not_between on B, D, G we get collinear_and_not_between(D, B, G)
By between_imply_not_between on H, D, G we get collinear_and_not_between(D, H, G)
By between_imply_not_between on B, H, G we get collinear_and_not_between(G, B, H)
By between_imply_not_between on G, H, B we get collinear_and_not_between(B, G, H)
By between_imply_not_between on D, I, A we get collinear_and_not_between(A, D, I)
By between_imply_not_between on G, D, H we get collinear_and_not_between(D, G, H)
By between_imply_not_between on G, D, B we get collinear_and_not_between(B, G, D)
By parallel_line_definition on orthocenter(B, C, D), Line(C, G), Line(E, H) we get Line(C, G) == parallel_line(orthocenter(B, C, D), Line(E, H))
By divide_by_2_mod_180_v0 on H, G, I, D, C, A we get angle(D, C, A) == angle(H, G, I) mod 360
By divide_by_2_mod_180_v0 on E, C, D, D, G, I we get angle(D, G, I) == angle(E, C, D) mod 360
By divide_by_2_mod_180_v1 on D, C, B, I, G, D we get angle(D, C, B) == angle(I, G, D) mod 360
By divide_by_2_mod_180_v0 on D, C, A, D, G, I we get angle(D, C, A) == angle(D, G, I) mod 360
By in_imply_collinear on orthocenter(B, C, D), E, D we get collinear(D, E, orthocenter(B, C, D))
By divide_by_2_mod_180_v1 on D, C, B, I, G, B we get angle(D, C, B) == angle(I, G, B) mod 360
By in_imply_collinear on orthocenter(B, C, D), C, G we get collinear(C, G, orthocenter(B, C, D))
By divide_by_2_mod_180_v0 on E, C, D, H, G, I we get angle(E, C, D) == angle(H, G, I) mod 360
By aa_anti_similarity on B, E, D, E, H, D we get anti_similar_triangles(B, D, E, E, D, H)
By between_imply_segment_sum on G, D, B we get distance(B, G) == distance(D, G) + distance(B, D)
By divide_by_2_mod_180_v0 on D, C, A, B, G, I we get angle(B, G, I) == angle(D, C, A) mod 360
By aa_similarity on B, E, H, E, D, H we get similar_triangles(B, E, H, E, D, H)
By divide_by_2_mod_180_v0 on H, G, I, B, C, D we get angle(B, C, D) == angle(H, G, I) mod 360
By divide_by_2_mod_180_v1 on D, C, E, I, G, D we get angle(D, C, E) == angle(I, G, D) mod 360
By divide_by_2_mod_180_v1 on I, G, H, D, C, B we get angle(D, C, B) == angle(I, G, H) mod 360
By divide_by_2_mod_180_v1 on I, G, D, A, C, D we get angle(A, C, D) == angle(I, G, D) mod 360
By divide_by_2_mod_180_v1 on D, C, E, I, G, B we get angle(D, C, E) == angle(I, G, B) mod 360
By aa_similarity on E, D, H, B, C, G we get similar_triangles(B, C, G, E, D, H)
By aa_anti_similarity on E, D, H, B, D, E we get anti_similar_triangles(B, D, E, E, D, H)
By aa_similarity on B, C, G, E, D, H we get similar_triangles(B, C, G, E, D, H)
By divide_by_2_mod_180_v0 on B, G, I, B, C, D we get angle(B, C, D) == angle(B, G, I) mod 360
By divide_by_2_mod_180_v1 on I, G, B, A, C, D we get angle(A, C, D) == angle(I, G, B) mod 360
By aa_anti_similarity on E, H, D, B, E, D we get anti_similar_triangles(B, D, E, E, D, H)
By aa_similarity on B, H, E, E, H, D we get similar_triangles(B, E, H, E, D, H)
By divide_by_2_mod_180_v1 on I, G, H, A, C, D we get angle(A, C, D) == angle(I, G, H) mod 360
By divide_by_2_mod_180_v1 on I, G, H, D, C, E we get angle(D, C, E) == angle(I, G, H) mod 360
By aa_similarity on B, D, F, E, D, H we get similar_triangles(B, D, F, E, D, H)
By between_imply_segment_sum on B, H, D we get distance(B, D) == distance(B, H) + distance(D, H)
By divide_by_2_mod_180_v0 on B, C, D, D, G, I we get angle(B, C, D) == angle(D, G, I) mod 360
By aa_similarity on B, F, D, E, H, D we get similar_triangles(B, D, F, E, D, H)
By aa_similarity on E, D, H, B, D, F we get similar_triangles(B, D, F, E, D, H)
By divide_by_2_mod_180_v0 on B, G, I, E, C, D we get angle(B, G, I) == angle(E, C, D) mod 360
By aa_anti_similarity on B, D, E, E, D, H we get anti_similar_triangles(B, D, E, E, D, H)
By reverse_direction on C, D we get 180 == direction(C, D) - direction(D, C) mod 360
By reverse_direction on D, C we get 180 == direction(D, C) - direction(C, D) mod 360
By aa_similarity on E, H, D, B, F, D we get similar_triangles(B, D, F, E, D, H)
By aa_similarity on B, G, C, E, H, D we get similar_triangles(B, C, G, E, D, H)
By between_imply_segment_sum on G, D, H we get distance(G, H) == distance(D, G) + distance(D, H)
By between_imply_segment_sum on B, H, G we get distance(B, G) == distance(B, H) + distance(G, H)
By aa_similarity on E, H, D, B, G, C we get similar_triangles(B, C, G, E, D, H)
By aa_similarity on E, H, D, B, H, E we get similar_triangles(B, E, H, E, D, H)
By between_imply_segment_sum on A, I, D we get distance(A, D) == distance(A, I) + distance(D, I)
By aa_similarity on E, D, H, B, E, H we get similar_triangles(B, E, H, E, D, H)
By concyclic_definition_0 on C, G, E, D we get D in Circle(C, E, G)
By concyclic_definition_0 on B, F, D, E we get E in Circle(B, D, F)
By concyclic_definition_0 on E, B, F, D we get D in Circle(B, E, F)
By internal_angle_bisector_definition_v0_r on B, D, H, G we get Line(D, G) == internal_angle_bisector(B, G, H)
By concyclic_definition_0 on C, D, G, E we get E in Circle(C, D, G)
By external_angle_bisector_definition_v0_r on G, B, H, D we get Line(B, D) == external_angle_bisector(G, D, H)
By internal_angle_bisector_definition_v0_r on D, G, H, B we get Line(B, G) == internal_angle_bisector(D, B, H)
By concyclic_definition_0 on F, D, E, B we get B in Circle(D, E, F)
By internal_angle_bisector_definition_v0_r on G, B, G, H we get Line(B, H) == internal_angle_bisector(G, H, G)
By internal_angle_bisector_definition_v0_r on B, G, B, H we get Line(G, H) == internal_angle_bisector(B, H, B)
By internal_angle_bisector_definition_v0_r on I, D, I, A we get Line(A, D) == internal_angle_bisector(I, A, I)
By internal_angle_bisector_definition_v0_r on F, G, E, D we get Line(D, G) == internal_angle_bisector(E, D, F)
By concyclic_definition_0 on D, C, E, G we get G in Circle(C, D, E)
By internal_angle_bisector_definition_v0_r on A, D, E, C we get Line(C, D) == internal_angle_bisector(A, C, E)
By external_angle_bisector_definition_v0_r on G, H, B, D we get Line(D, H) == external_angle_bisector(B, D, G)
By internal_angle_bisector_definition_v0_r on B, H, B, D we get Line(D, H) == internal_angle_bisector(B, D, B)
By internal_angle_bisector_definition_v0_r on B, D, B, H we get Line(D, H) == internal_angle_bisector(B, H, B)
By concyclic_definition_0 on G, D, E, C we get C in Circle(D, E, G)
By internal_angle_bisector_definition_v0_r on A, I, A, D we get Line(D, I) == internal_angle_bisector(A, D, A)
By internal_angle_bisector_definition_v0_r on D, B, D, G we get Line(B, G) == internal_angle_bisector(D, G, D)
By internal_angle_bisector_definition_v0_r on E, H, F, D we get Line(D, H) == internal_angle_bisector(E, D, F)
By internal_angle_bisector_definition_v0_r on G, H, D, B we get Line(B, H) == internal_angle_bisector(D, B, G)
By external_angle_bisector_definition_v0_r on B, G, D, H we get Line(G, H) == external_angle_bisector(B, H, D)
By internal_angle_bisector_definition_v0_r on G, H, G, B we get Line(B, H) == internal_angle_bisector(G, B, G)
By internal_angle_bisector_definition_v0_r on G, D, H, B we get Line(B, D) == internal_angle_bisector(G, B, H)
By internal_angle_bisector_definition_v0_r on B, H, D, G we get Line(G, H) == internal_angle_bisector(B, G, D)
By concyclic_definition_0 on B, D, E, F we get F in Circle(B, D, E)
By internal_angle_bisector_definition_v0_r on D, B, H, G we get Line(B, G) == internal_angle_bisector(D, G, H)
By external_angle_bisector_definition_v0_r on G, D, B, H we get Line(D, H) == external_angle_bisector(B, H, G)
By internal_angle_bisector_definition_v0_r on D, B, D, H we get Line(B, H) == internal_angle_bisector(D, H, D)
By internal_angle_bisector_definition_v0_r on H, G, B, D we get Line(D, G) == internal_angle_bisector(B, D, H)
By internal_angle_bisector_definition_v0_r on H, D, H, G we get Line(D, G) == internal_angle_bisector(H, G, H)
By internal_angle_bisector_definition_v0_r on A, D, A, I we get Line(D, I) == internal_angle_bisector(A, I, A)
By internal_angle_bisector_definition_v0_r on D, I, D, A we get Line(A, I) == internal_angle_bisector(D, A, D)
By internal_angle_bisector_definition_v0_r on H, G, H, D we get Line(D, G) == internal_angle_bisector(H, D, H)
By internal_angle_bisector_definition_v0_r on F, B, E, D we get Line(B, D) == internal_angle_bisector(E, D, F)
By internal_angle_bisector_definition_v0_r on B, G, B, D we get Line(D, G) == internal_angle_bisector(B, D, B)
By internal_angle_bisector_definition_v0_r on G, B, G, D we get Line(B, D) == internal_angle_bisector(G, D, G)
By internal_angle_bisector_definition_v0_r on B, H, B, G we get Line(G, H) == internal_angle_bisector(B, G, B)
By internal_angle_bisector_definition_v0_r on G, H, G, D we get Line(D, H) == internal_angle_bisector(G, D, G)
By internal_angle_bisector_definition_v0_r on D, B, G, H we get Line(B, H) == internal_angle_bisector(D, H, G)
By internal_angle_bisector_definition_v0_r on H, B, H, G we get Line(B, G) == internal_angle_bisector(H, G, H)
By internal_angle_bisector_definition_v0_r on D, G, D, B we get Line(B, G) == internal_angle_bisector(D, B, D)
By internal_angle_bisector_definition_v0_r on H, D, H, B we get Line(B, D) == internal_angle_bisector(H, B, H)
By internal_angle_bisector_definition_v0_r on D, A, D, I we get Line(A, I) == internal_angle_bisector(D, I, D)
By internal_angle_bisector_definition_v0_r on D, H, D, G we get Line(G, H) == internal_angle_bisector(D, G, D)
By internal_angle_bisector_definition_v0_r on D, H, D, B we get Line(B, H) == internal_angle_bisector(D, B, D)
By internal_angle_bisector_definition_v0_r on B, D, B, G we get Line(D, G) == internal_angle_bisector(B, G, B)
By internal_angle_bisector_definition_v0_r on I, A, I, D we get Line(A, D) == internal_angle_bisector(I, D, I)
By internal_angle_bisector_definition_v0_r on G, D, G, H we get Line(D, H) == internal_angle_bisector(G, H, G)
By internal_angle_bisector_definition_v0_r on D, G, D, H we get Line(G, H) == internal_angle_bisector(D, H, D)
By internal_angle_bisector_definition_v0_r on H, B, H, D we get Line(B, D) == internal_angle_bisector(H, D, H)
By internal_angle_bisector_definition_v0_r on G, D, G, B we get Line(B, D) == internal_angle_bisector(G, B, G)
By internal_angle_bisector_definition_v0_r on H, G, H, B we get Line(B, G) == internal_angle_bisector(H, B, H)
By perpendicular_lines_draw_intersection on altitude(B, C, D), Line(C, D) we get exists(line_intersection(Line(C, D), altitude(B, C, D)))
By concyclic_definition_1 on E, G, D, C we get Circle(C, D, G) == Circle(D, E, G)
By concyclic_definition_1 on C, D, E, G we get Circle(C, D, E) == Circle(D, E, G)
By altitude_definition on orthocenter(B, C, D), E, B, Line(D, E) we get Line(D, E) == altitude(orthocenter(B, C, D), B, E)
By concyclic_definition_1 on E, D, F, B we get Circle(B, D, F) == Circle(D, E, F)
By altitude_definition on orthocenter(B, C, D), E, C, Line(D, E) we get Line(D, E) == altitude(orthocenter(B, C, D), C, E)
By altitude_definition on orthocenter(B, C, D), B, H, Line(C, G) we get Line(C, G) == altitude(orthocenter(B, C, D), B, H)
By concyclic_definition_1 on E, B, D, F we get Circle(B, D, E) == Circle(B, D, F)
By concyclic_definition_1 on F, D, E, B we get Circle(B, D, E) == Circle(D, E, F)
By altitude_definition on orthocenter(B, C, D), D, G, Line(C, G) we get Line(C, G) == altitude(orthocenter(B, C, D), D, G)
By altitude_definition on orthocenter(B, C, D), D, B, Line(C, G) we get Line(C, G) == altitude(orthocenter(B, C, D), B, D)
By concyclic_definition_1 on F, B, E, D we get Circle(B, D, E) == Circle(B, E, F)
By concyclic_definition_1 on D, E, G, C we get Circle(C, E, G) == Circle(D, E, G)
By concyclic_definition_1 on D, B, F, E we get Circle(B, D, F) == Circle(B, E, F)
By altitude_definition on orthocenter(B, C, D), H, D, Line(C, G) we get Line(C, G) == altitude(orthocenter(B, C, D), D, H)
By altitude_definition on orthocenter(B, C, D), G, B, Line(C, G) we get Line(C, G) == altitude(orthocenter(B, C, D), B, G)
By concyclic_definition_1 on D, E, F, B we get Circle(B, E, F) == Circle(D, E, F)
By altitude_definition on orthocenter(B, C, D), C, D, altitude(B, C, D) we get altitude(B, C, D) == altitude(orthocenter(B, C, D), C, D)
By concyclic_definition_1 on E, D, C, G we get Circle(C, D, E) == Circle(C, D, G)
By concyclic_definition_1 on G, C, E, D we get Circle(C, D, E) == Circle(C, E, G)
By altitude_definition on orthocenter(B, C, D), G, H, Line(C, G) we get Line(C, G) == altitude(orthocenter(B, C, D), G, H)
By concyclic_definition_1 on E, C, G, D we get Circle(C, D, G) == Circle(C, E, G)
By altitude_definition on orthocenter(B, C, D), B, C, Line(D, E) we get Line(D, E) == altitude(orthocenter(B, C, D), B, C)
By anti_similar_triangle_basic_properties on F, D, B, E, D, B we get angle(F, D, B) == 0 - angle(E, D, B) mod 360, angle(D, B, F) == 0 - angle(D, B, E) mod 360, angle(B, F, D) == 0 - angle(B, E, D) mod 360, log(distance(D, E)) + log(distance(B, D)) == log(distance(D, F)) + log(distance(B, D)), log(distance(B, D)) + log(distance(B, E)) == log(distance(B, D)) + log(distance(B, F)), log(distance(B, E)) + log(distance(D, F)) == log(distance(B, F)) + log(distance(D, E))
By anti_similar_triangle_basic_properties on E, B, D, H, B, E we get angle(E, B, D) == 0 - angle(H, B, E) mod 360, angle(B, D, E) == 0 - angle(B, E, H) mod 360, angle(D, E, B) == 0 - angle(E, H, B) mod 360, log(distance(B, E)) + log(distance(B, E)) == log(distance(B, H)) + log(distance(B, D)), log(distance(B, D)) + log(distance(E, H)) == log(distance(B, E)) + log(distance(D, E)), log(distance(D, E)) + log(distance(B, H)) == log(distance(E, H)) + log(distance(B, E))
By anti_similar_triangle_basic_properties on E, B, D, F, B, D we get angle(E, B, D) == 0 - angle(F, B, D) mod 360, angle(B, D, E) == 0 - angle(B, D, F) mod 360, angle(D, E, B) == 0 - angle(D, F, B) mod 360, log(distance(B, E)) + log(distance(B, D)) == log(distance(B, F)) + log(distance(B, D)), log(distance(B, D)) + log(distance(D, E)) == log(distance(B, D)) + log(distance(D, F)), log(distance(D, E)) + log(distance(B, F)) == log(distance(D, F)) + log(distance(B, E))
By anti_similar_triangle_basic_properties on H, E, B, E, D, B we get angle(H, E, B) == 0 - angle(E, D, B) mod 360, angle(E, B, H) == 0 - angle(D, B, E) mod 360, angle(B, H, E) == 0 - angle(B, E, D) mod 360, log(distance(D, E)) + log(distance(B, E)) == log(distance(E, H)) + log(distance(B, D)), log(distance(B, D)) + log(distance(B, H)) == log(distance(B, E)) + log(distance(B, E)), log(distance(B, E)) + log(distance(E, H)) == log(distance(B, H)) + log(distance(D, E))
By similar_triangle_basic_properties on E, H, B, C, G, B we get angle(C, G, B) == angle(E, H, B) mod 360, angle(G, B, C) == angle(H, B, E) mod 360, angle(B, C, G) == angle(B, E, H) mod 360, log(distance(C, G)) + log(distance(B, H)) == log(distance(E, H)) + log(distance(B, G)), log(distance(B, G)) + log(distance(B, E)) == log(distance(B, H)) + log(distance(B, C)), log(distance(B, C)) + log(distance(E, H)) == log(distance(B, E)) + log(distance(C, G))
By similar_triangle_basic_properties on C, G, B, D, F, B we get angle(C, G, B) == angle(D, F, B) mod 360, angle(F, B, D) == angle(G, B, C) mod 360, angle(B, C, G) == angle(B, D, F) mod 360, log(distance(C, G)) + log(distance(B, F)) == log(distance(D, F)) + log(distance(B, G)), log(distance(B, F)) + log(distance(B, C)) == log(distance(B, G)) + log(distance(B, D)), log(distance(B, C)) + log(distance(D, F)) == log(distance(B, D)) + log(distance(C, G))
By similar_triangle_basic_properties on D, B, F, C, B, G we get angle(C, B, G) == angle(D, B, F) mod 360, angle(B, F, D) == angle(B, G, C) mod 360, angle(F, D, B) == angle(G, C, B) mod 360, log(distance(B, C)) + log(distance(B, F)) == log(distance(B, D)) + log(distance(B, G)), log(distance(B, F)) + log(distance(C, G)) == log(distance(B, G)) + log(distance(D, F)), log(distance(C, G)) + log(distance(B, D)) == log(distance(D, F)) + log(distance(B, C))
By anti_similar_triangle_basic_properties on G, C, B, E, D, B we get angle(G, C, B) == 0 - angle(E, D, B) mod 360, angle(C, B, G) == 0 - angle(D, B, E) mod 360, angle(B, G, C) == 0 - angle(B, E, D) mod 360, log(distance(C, G)) + log(distance(B, D)) == log(distance(D, E)) + log(distance(B, C)), log(distance(B, C)) + log(distance(B, E)) == log(distance(B, D)) + log(distance(B, G)), log(distance(B, E)) + log(distance(C, G)) == log(distance(B, G)) + log(distance(D, E))
By similar_triangle_basic_properties on G, C, B, H, E, B we get angle(G, C, B) == angle(H, E, B) mod 360, angle(C, B, G) == angle(E, B, H) mod 360, angle(B, G, C) == angle(B, H, E) mod 360, log(distance(C, G)) + log(distance(B, E)) == log(distance(E, H)) + log(distance(B, C)), log(distance(B, C)) + log(distance(B, H)) == log(distance(B, E)) + log(distance(B, G)), log(distance(B, G)) + log(distance(E, H)) == log(distance(B, H)) + log(distance(C, G))
By similar_triangle_basic_properties on H, B, E, F, B, D we get angle(F, B, D) == angle(H, B, E) mod 360, angle(B, D, F) == angle(B, E, H) mod 360, angle(D, F, B) == angle(E, H, B) mod 360, log(distance(B, F)) + log(distance(B, E)) == log(distance(B, H)) + log(distance(B, D)), log(distance(B, D)) + log(distance(E, H)) == log(distance(B, E)) + log(distance(D, F)), log(distance(D, F)) + log(distance(B, H)) == log(distance(E, H)) + log(distance(B, F))
By anti_similar_triangle_basic_properties on G, B, C, E, B, D we get angle(G, B, C) == 0 - angle(E, B, D) mod 360, angle(B, C, G) == 0 - angle(B, D, E) mod 360, angle(C, G, B) == 0 - angle(D, E, B) mod 360, log(distance(B, E)) + log(distance(B, C)) == log(distance(B, G)) + log(distance(B, D)), log(distance(B, C)) + log(distance(D, E)) == log(distance(B, D)) + log(distance(C, G)), log(distance(C, G)) + log(distance(B, E)) == log(distance(D, E)) + log(distance(B, G))
By similar_triangle_basic_properties on E, B, H, D, B, F we get angle(D, B, F) == angle(E, B, H) mod 360, angle(B, F, D) == angle(B, H, E) mod 360, angle(F, D, B) == angle(H, E, B) mod 360, log(distance(B, D)) + log(distance(B, H)) == log(distance(B, E)) + log(distance(B, F)), log(distance(B, F)) + log(distance(E, H)) == log(distance(B, H)) + log(distance(D, F)), log(distance(D, F)) + log(distance(B, E)) == log(distance(E, H)) + log(distance(B, D))
By concurrent_sufficient_conditions on f, altitude(B, C, D), i we get concurrent(f, i, altitude(B, C, D))
By concurrent_sufficient_conditions on g, i, altitude(B, C, D) we get concurrent(g, i, altitude(B, C, D))
By line_definition on D, line_intersection(Line(C, D), altitude(B, C, D)), Line(C, D) we get Line(C, D) == Line(D, line_intersection(Line(C, D), altitude(B, C, D)))
By concurrent_sufficient_conditions on altitude(B, C, D), Line(C, G), Line(D, E) we get concurrent(Line(C, G), Line(D, E), altitude(B, C, D))
By concurrent_sufficient_conditions on g, altitude(B, C, D), f we get concurrent(f, g, altitude(B, C, D))
By concurrent_sufficient_conditions on f, i, altitude(B, C, D) we get concurrent(f, i, altitude(B, C, D))
By line_definition on orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D)), altitude(B, C, D) we get altitude(B, C, D) == Line(orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D)))
By concurrent_sufficient_conditions on g, f, altitude(B, C, D) we get concurrent(f, g, altitude(B, C, D))
By concurrent_sufficient_conditions on altitude(B, C, D), f, i we get concurrent(f, i, altitude(B, C, D))
By concurrent_sufficient_conditions on i, f, altitude(B, C, D) we get concurrent(f, i, altitude(B, C, D))
By concurrent_sufficient_conditions on altitude(B, C, D), i, f we get concurrent(f, i, altitude(B, C, D))
By concurrent_sufficient_conditions on i, altitude(B, C, D), f we get concurrent(f, i, altitude(B, C, D))
By line_definition on line_intersection(Line(C, D), altitude(B, C, D)), B, altitude(B, C, D) we get altitude(B, C, D) == Line(B, line_intersection(Line(C, D), altitude(B, C, D)))
By concurrent_sufficient_conditions on Line(D, E), Line(C, G), altitude(B, C, D) we get concurrent(Line(C, G), Line(D, E), altitude(B, C, D))
By concurrent_sufficient_conditions on altitude(B, C, D), g, f we get concurrent(f, g, altitude(B, C, D))
By concurrent_sufficient_conditions on altitude(B, C, D), f, g we get concurrent(f, g, altitude(B, C, D))
By concurrent_sufficient_conditions on altitude(B, C, D), i, g we get concurrent(g, i, altitude(B, C, D))
By concurrent_sufficient_conditions on Line(D, E), altitude(B, C, D), Line(C, G) we get concurrent(Line(C, G), Line(D, E), altitude(B, C, D))
By concurrent_sufficient_conditions on i, altitude(B, C, D), g we get concurrent(g, i, altitude(B, C, D))
By concurrent_sufficient_conditions on Line(C, G), Line(D, E), altitude(B, C, D) we get concurrent(Line(C, G), Line(D, E), altitude(B, C, D))
By line_definition on line_intersection(Line(C, D), altitude(B, C, D)), C, Line(C, D) we get Line(C, D) == Line(C, line_intersection(Line(C, D), altitude(B, C, D)))
By concurrent_sufficient_conditions on i, g, altitude(B, C, D) we get concurrent(g, i, altitude(B, C, D))
By concurrent_sufficient_conditions on Line(C, G), altitude(B, C, D), Line(D, E) we get concurrent(Line(C, G), Line(D, E), altitude(B, C, D))
By concurrent_sufficient_conditions on altitude(B, C, D), g, i we get concurrent(g, i, altitude(B, C, D))
By concurrent_sufficient_conditions on altitude(B, C, D), Line(D, E), Line(C, G) we get concurrent(Line(C, G), Line(D, E), altitude(B, C, D))
By concurrent_sufficient_conditions on g, altitude(B, C, D), i we get concurrent(g, i, altitude(B, C, D))
By concurrent_sufficient_conditions on f, altitude(B, C, D), g we get concurrent(f, g, altitude(B, C, D))
By concurrent_sufficient_conditions on f, g, altitude(B, C, D) we get concurrent(f, g, altitude(B, C, D))
By angles_on_chord_v2 on E, F, D, B, Circle(B, D, E) we get angle(E, D, F) == angle(E, B, F) + 180 mod 360
By angles_on_chord_v3 on F, E, D, B, Circle(B, D, E) we get angle(F, D, E) == angle(F, B, E) + 180 mod 360
By angles_on_chord_v2 on F, E, B, D, Circle(B, D, E) we get angle(F, B, E) == angle(F, D, E) + 180 mod 360
By angles_on_chord_v3 on E, F, B, D, Circle(B, D, E) we get angle(E, B, F) == angle(E, D, F) + 180 mod 360
By radical_axis_of_intersecting_circles_v0 on E, D, Circle(B, D, E), Circle(C, D, E) we get Line(D, E) == radical_axis(Circle(B, D, E), Circle(C, D, E))
By perpendicular_line_definition on line_intersection(Line(C, D), altitude(B, C, D)), altitude(B, C, D), Line(C, D) we get altitude(B, C, D) == perpendicular_line(line_intersection(Line(C, D), altitude(B, C, D)), Line(C, D))
By perpendicular_line_definition on line_intersection(Line(C, D), altitude(B, C, D)), Line(C, D), altitude(B, C, D) we get Line(C, D) == perpendicular_line(line_intersection(Line(C, D), altitude(B, C, D)), altitude(B, C, D))
By angles_on_chord_v0 on G, C, E, D, Circle(C, D, E) we get angle(G, D, C) == angle(G, E, C) mod 360
By angles_on_chord_v1 on C, G, E, D, Circle(C, D, E) we get angle(C, D, G) == angle(C, E, G) mod 360
By angles_on_chord_v1 on D, E, G, C, Circle(C, D, E) we get angle(D, C, E) == angle(D, G, E) mod 360
By angles_on_chord_v1 on F, B, D, E, Circle(B, D, E) we get angle(F, D, B) == angle(F, E, B) mod 360
By angles_on_chord_v0 on F, D, E, B, Circle(B, D, E) we get angle(F, B, D) == angle(F, E, D) mod 360
By angles_on_chord_v0 on B, F, E, D, Circle(B, D, E) we get angle(B, D, F) == angle(B, E, F) mod 360
By angles_on_chord_v1 on B, E, D, F, Circle(B, D, E) we get angle(B, D, E) == angle(B, F, E) mod 360
By angles_on_chord_v1 on G, D, C, E, Circle(C, D, E) we get angle(G, C, D) == angle(G, E, D) mod 360
By angles_on_chord_v1 on E, C, G, D, Circle(C, D, E) we get angle(E, D, C) == angle(E, G, C) mod 360
By angles_on_chord_v0 on C, E, G, D, Circle(C, D, E) we get angle(C, D, E) == angle(C, G, E) mod 360
By angles_on_chord_v0 on E, D, C, G, Circle(C, D, E) we get angle(E, C, D) == angle(E, G, D) mod 360
By angles_on_chord_v0 on E, B, F, D, Circle(B, D, E) we get angle(E, D, B) == angle(E, F, B) mod 360
By angles_on_chord_v0 on D, E, F, B, Circle(B, D, E) we get angle(D, B, E) == angle(D, F, E) mod 360
By angles_on_chord_v1 on E, D, B, F, Circle(B, D, E) we get angle(E, B, D) == angle(E, F, D) mod 360
By angles_on_chord_v1 on D, F, E, B, Circle(B, D, E) we get angle(D, B, F) == angle(D, E, F) mod 360
By angles_on_chord_v0 on D, G, E, C, Circle(C, D, E) we get angle(D, C, G) == angle(D, E, G) mod 360
By projection_definition on orthocenter(B, C, D), G, i we get G == projection(orthocenter(B, C, D), i)
By projection_definition on orthocenter(B, C, D), E, g we get E == projection(orthocenter(B, C, D), g)
By perpendicular_direction_conditions_v0_r on G, B, orthocenter(B, C, D), G we get 180 == 2 * direction(G, B) - 2 * direction(orthocenter(B, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), E, E, C we get 180 == 2 * direction(orthocenter(B, C, D), E) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on E, C, orthocenter(B, C, D), E we get 180 == 2 * direction(E, C) - 2 * direction(orthocenter(B, C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on H, D, G, orthocenter(B, C, D) we get 180 == 2 * direction(H, D) - 2 * direction(G, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, orthocenter(B, C, D), C, B we get 180 == 2 * direction(E, orthocenter(B, C, D)) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on C, B, D, orthocenter(B, C, D) we get 180 == 2 * direction(C, B) - 2 * direction(D, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(B, C, D), E, B we get 180 == 2 * direction(D, orthocenter(B, C, D)) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on H, D, orthocenter(B, C, D), G we get 180 == 2 * direction(H, D) - 2 * direction(orthocenter(B, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on D, G, C, orthocenter(B, C, D) we get 180 == 2 * direction(D, G) - 2 * direction(C, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, H, C, orthocenter(B, C, D) we get 180 == 2 * direction(D, H) - 2 * direction(C, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(B, C, D), D, B we get 180 == 2 * direction(G, orthocenter(B, C, D)) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), E, C, B we get 180 == 2 * direction(orthocenter(B, C, D), E) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on C, orthocenter(B, C, D), B, G we get 180 == 2 * direction(C, orthocenter(B, C, D)) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(B, C, D), G, H we get 180 == 2 * direction(G, orthocenter(B, C, D)) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), C, H, G we get 180 == 2 * direction(orthocenter(B, C, D), C) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0_r on D, G, G, orthocenter(B, C, D) we get 180 == 2 * direction(D, G) - 2 * direction(G, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), G, H, G we get 180 == 2 * direction(orthocenter(B, C, D), G) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0_r on B, C, orthocenter(B, C, D), D we get 180 == 2 * direction(B, C) - 2 * direction(orthocenter(B, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), C, B, H we get 180 == 2 * direction(orthocenter(B, C, D), C) - 2 * direction(B, H) mod 360
By perpendicular_direction_conditions_v0_r on C, E, orthocenter(B, C, D), E we get 180 == 2 * direction(C, E) - 2 * direction(orthocenter(B, C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on C, E, D, orthocenter(B, C, D) we get 180 == 2 * direction(C, E) - 2 * direction(D, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, orthocenter(B, C, D), B, H we get 180 == 2 * direction(C, orthocenter(B, C, D)) - 2 * direction(B, H) mod 360
By perpendicular_direction_conditions_v0_r on B, orthocenter(B, C, D), C, D we get 180 == 2 * direction(B, orthocenter(B, C, D)) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on B, C, E, orthocenter(B, C, D) we get 180 == 2 * direction(B, C) - 2 * direction(E, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on B, C, orthocenter(B, C, D), E we get 180 == 2 * direction(B, C) - 2 * direction(orthocenter(B, C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), G, B, G we get 180 == 2 * direction(orthocenter(B, C, D), G) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on H, G, orthocenter(B, C, D), G we get 180 == 2 * direction(H, G) - 2 * direction(orthocenter(B, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on B, orthocenter(B, C, D), D, C we get 180 == 2 * direction(B, orthocenter(B, C, D)) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on G, B, G, orthocenter(B, C, D) we get 180 == 2 * direction(G, B) - 2 * direction(G, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, H, orthocenter(B, C, D), C we get 180 == 2 * direction(D, H) - 2 * direction(orthocenter(B, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), G, B, H we get 180 == 2 * direction(orthocenter(B, C, D), G) - 2 * direction(B, H) mod 360
By perpendicular_direction_conditions_v0_r on G, D, G, orthocenter(B, C, D) we get 180 == 2 * direction(G, D) - 2 * direction(G, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, B, G, orthocenter(B, C, D) we get 180 == 2 * direction(D, B) - 2 * direction(G, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, B, C, orthocenter(B, C, D) we get 180 == 2 * direction(G, B) - 2 * direction(C, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on H, G, orthocenter(B, C, D), C we get 180 == 2 * direction(H, G) - 2 * direction(orthocenter(B, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), C, G, D we get 180 == 2 * direction(orthocenter(B, C, D), C) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on C, orthocenter(B, C, D), D, G we get 180 == 2 * direction(C, orthocenter(B, C, D)) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), E, B, C we get 180 == 2 * direction(orthocenter(B, C, D), E) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on C, orthocenter(B, C, D), B, D we get 180 == 2 * direction(C, orthocenter(B, C, D)) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on C, E, orthocenter(B, C, D), D we get 180 == 2 * direction(C, E) - 2 * direction(orthocenter(B, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(B, C, D), C, E we get 180 == 2 * direction(D, orthocenter(B, C, D)) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(B, C, D), H, D we get 180 == 2 * direction(G, orthocenter(B, C, D)) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), G, G, D we get 180 == 2 * direction(orthocenter(B, C, D), G) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), D, B, E we get 180 == 2 * direction(orthocenter(B, C, D), D) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on C, B, orthocenter(B, C, D), D we get 180 == 2 * direction(C, B) - 2 * direction(orthocenter(B, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on B, E, D, orthocenter(B, C, D) we get 180 == 2 * direction(B, E) - 2 * direction(D, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), E, C, E we get 180 == 2 * direction(orthocenter(B, C, D), E) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), B, D, C we get 180 == 2 * direction(orthocenter(B, C, D), B) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on B, G, C, orthocenter(B, C, D) we get 180 == 2 * direction(B, G) - 2 * direction(C, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on B, H, orthocenter(B, C, D), C we get 180 == 2 * direction(B, H) - 2 * direction(orthocenter(B, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on D, B, C, orthocenter(B, C, D) we get 180 == 2 * direction(D, B) - 2 * direction(C, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on B, D, orthocenter(B, C, D), G we get 180 == 2 * direction(B, D) - 2 * direction(orthocenter(B, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), D, E, B we get 180 == 2 * direction(orthocenter(B, C, D), D) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on G, H, orthocenter(B, C, D), C we get 180 == 2 * direction(G, H) - 2 * direction(orthocenter(B, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on B, H, C, orthocenter(B, C, D) we get 180 == 2 * direction(B, H) - 2 * direction(C, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on B, D, orthocenter(B, C, D), C we get 180 == 2 * direction(B, D) - 2 * direction(orthocenter(B, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on G, H, G, orthocenter(B, C, D) we get 180 == 2 * direction(G, H) - 2 * direction(G, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, H, C, orthocenter(B, C, D) we get 180 == 2 * direction(G, H) - 2 * direction(C, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), C, H, B we get 180 == 2 * direction(orthocenter(B, C, D), C) - 2 * direction(H, B) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(B, C, D), C, B we get 180 == 2 * direction(D, orthocenter(B, C, D)) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on E, orthocenter(B, C, D), C, E we get 180 == 2 * direction(E, orthocenter(B, C, D)) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on B, G, G, orthocenter(B, C, D) we get 180 == 2 * direction(B, G) - 2 * direction(G, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), B, C, D we get 180 == 2 * direction(orthocenter(B, C, D), B) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on G, H, orthocenter(B, C, D), G we get 180 == 2 * direction(G, H) - 2 * direction(orthocenter(B, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), G, D, H we get 180 == 2 * direction(orthocenter(B, C, D), G) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(B, C, D), B, E we get 180 == 2 * direction(D, orthocenter(B, C, D)) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on D, H, orthocenter(B, C, D), G we get 180 == 2 * direction(D, H) - 2 * direction(orthocenter(B, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), D, C, E we get 180 == 2 * direction(orthocenter(B, C, D), D) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on C, orthocenter(B, C, D), H, G we get 180 == 2 * direction(C, orthocenter(B, C, D)) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0_r on B, E, E, orthocenter(B, C, D) we get 180 == 2 * direction(B, E) - 2 * direction(E, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), G, B, D we get 180 == 2 * direction(orthocenter(B, C, D), G) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on D, B, orthocenter(B, C, D), G we get 180 == 2 * direction(D, B) - 2 * direction(orthocenter(B, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on E, B, orthocenter(B, C, D), D we get 180 == 2 * direction(E, B) - 2 * direction(orthocenter(B, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(B, C, D), B, C we get 180 == 2 * direction(D, orthocenter(B, C, D)) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on B, E, orthocenter(B, C, D), D we get 180 == 2 * direction(B, E) - 2 * direction(orthocenter(B, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(B, C, D), D, G we get 180 == 2 * direction(G, orthocenter(B, C, D)) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(B, C, D), B, G we get 180 == 2 * direction(G, orthocenter(B, C, D)) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on B, E, orthocenter(B, C, D), E we get 180 == 2 * direction(B, E) - 2 * direction(orthocenter(B, C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on G, D, C, orthocenter(B, C, D) we get 180 == 2 * direction(G, D) - 2 * direction(C, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), C, G, B we get 180 == 2 * direction(orthocenter(B, C, D), C) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), G, H, B we get 180 == 2 * direction(orthocenter(B, C, D), G) - 2 * direction(H, B) mod 360
By perpendicular_direction_conditions_v0_r on D, C, B, orthocenter(B, C, D) we get 180 == 2 * direction(D, C) - 2 * direction(B, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), D, B, C we get 180 == 2 * direction(orthocenter(B, C, D), D) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on H, D, C, orthocenter(B, C, D) we get 180 == 2 * direction(H, D) - 2 * direction(C, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on H, B, orthocenter(B, C, D), C we get 180 == 2 * direction(H, B) - 2 * direction(orthocenter(B, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on E, C, orthocenter(B, C, D), D we get 180 == 2 * direction(E, C) - 2 * direction(orthocenter(B, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), C, B, D we get 180 == 2 * direction(orthocenter(B, C, D), C) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), C, D, B we get 180 == 2 * direction(orthocenter(B, C, D), C) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on C, D, B, orthocenter(B, C, D) we get 180 == 2 * direction(C, D) - 2 * direction(B, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on B, H, G, orthocenter(B, C, D) we get 180 == 2 * direction(B, H) - 2 * direction(G, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(B, C, D), D, H we get 180 == 2 * direction(G, orthocenter(B, C, D)) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on G, B, orthocenter(B, C, D), C we get 180 == 2 * direction(G, B) - 2 * direction(orthocenter(B, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on E, orthocenter(B, C, D), B, E we get 180 == 2 * direction(E, orthocenter(B, C, D)) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(B, C, D), H, B we get 180 == 2 * direction(G, orthocenter(B, C, D)) - 2 * direction(H, B) mod 360
By perpendicular_direction_conditions_v0_r on B, G, orthocenter(B, C, D), G we get 180 == 2 * direction(B, G) - 2 * direction(orthocenter(B, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on C, B, E, orthocenter(B, C, D) we get 180 == 2 * direction(C, B) - 2 * direction(E, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, orthocenter(B, C, D), D, H we get 180 == 2 * direction(C, orthocenter(B, C, D)) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on E, C, D, orthocenter(B, C, D) we get 180 == 2 * direction(E, C) - 2 * direction(D, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), C, D, H we get 180 == 2 * direction(orthocenter(B, C, D), C) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), C, H, D we get 180 == 2 * direction(orthocenter(B, C, D), C) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(B, C, D), G, D we get 180 == 2 * direction(G, orthocenter(B, C, D)) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on C, orthocenter(B, C, D), H, B we get 180 == 2 * direction(C, orthocenter(B, C, D)) - 2 * direction(H, B) mod 360
By perpendicular_direction_conditions_v0_r on H, D, orthocenter(B, C, D), C we get 180 == 2 * direction(H, D) - 2 * direction(orthocenter(B, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on E, C, E, orthocenter(B, C, D) we get 180 == 2 * direction(E, C) - 2 * direction(E, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, orthocenter(B, C, D), E, C we get 180 == 2 * direction(E, orthocenter(B, C, D)) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on E, B, D, orthocenter(B, C, D) we get 180 == 2 * direction(E, B) - 2 * direction(D, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), D, E, C we get 180 == 2 * direction(orthocenter(B, C, D), D) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(B, C, D), G, B we get 180 == 2 * direction(G, orthocenter(B, C, D)) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on D, B, orthocenter(B, C, D), C we get 180 == 2 * direction(D, B) - 2 * direction(orthocenter(B, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on C, B, orthocenter(B, C, D), E we get 180 == 2 * direction(C, B) - 2 * direction(orthocenter(B, C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on H, G, G, orthocenter(B, C, D) we get 180 == 2 * direction(H, G) - 2 * direction(G, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, orthocenter(B, C, D), G, H we get 180 == 2 * direction(C, orthocenter(B, C, D)) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0_r on B, G, orthocenter(B, C, D), C we get 180 == 2 * direction(B, G) - 2 * direction(orthocenter(B, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on D, G, orthocenter(B, C, D), C we get 180 == 2 * direction(D, G) - 2 * direction(orthocenter(B, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), G, G, H we get 180 == 2 * direction(orthocenter(B, C, D), G) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), G, G, B we get 180 == 2 * direction(orthocenter(B, C, D), G) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), C, G, H we get 180 == 2 * direction(orthocenter(B, C, D), C) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0_r on B, D, G, orthocenter(B, C, D) we get 180 == 2 * direction(B, D) - 2 * direction(G, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on H, B, orthocenter(B, C, D), G we get 180 == 2 * direction(H, B) - 2 * direction(orthocenter(B, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on D, G, orthocenter(B, C, D), G we get 180 == 2 * direction(D, G) - 2 * direction(orthocenter(B, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), G, H, D we get 180 == 2 * direction(orthocenter(B, C, D), G) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), E, B, E we get 180 == 2 * direction(orthocenter(B, C, D), E) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on E, B, orthocenter(B, C, D), E we get 180 == 2 * direction(E, B) - 2 * direction(orthocenter(B, C, D), E) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(B, C, D), B, H we get 180 == 2 * direction(G, orthocenter(B, C, D)) - 2 * direction(B, H) mod 360
By perpendicular_direction_conditions_v0_r on H, G, C, orthocenter(B, C, D) we get 180 == 2 * direction(H, G) - 2 * direction(C, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, orthocenter(B, C, D), G, D we get 180 == 2 * direction(C, orthocenter(B, C, D)) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on H, B, C, orthocenter(B, C, D) we get 180 == 2 * direction(H, B) - 2 * direction(C, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(B, C, D), H, G we get 180 == 2 * direction(G, orthocenter(B, C, D)) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0_r on H, B, G, orthocenter(B, C, D) we get 180 == 2 * direction(H, B) - 2 * direction(G, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on B, D, C, orthocenter(B, C, D) we get 180 == 2 * direction(B, D) - 2 * direction(C, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), D, C, B we get 180 == 2 * direction(orthocenter(B, C, D), D) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on B, H, orthocenter(B, C, D), G we get 180 == 2 * direction(B, H) - 2 * direction(orthocenter(B, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(B, C, D), E, C we get 180 == 2 * direction(D, orthocenter(B, C, D)) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on B, C, D, orthocenter(B, C, D) we get 180 == 2 * direction(B, C) - 2 * direction(D, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), G, D, G we get 180 == 2 * direction(orthocenter(B, C, D), G) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(B, C, D), B, D we get 180 == 2 * direction(G, orthocenter(B, C, D)) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on C, E, E, orthocenter(B, C, D) we get 180 == 2 * direction(C, E) - 2 * direction(E, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, D, orthocenter(B, C, D), G we get 180 == 2 * direction(G, D) - 2 * direction(orthocenter(B, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on C, orthocenter(B, C, D), D, B we get 180 == 2 * direction(C, orthocenter(B, C, D)) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), G, D, B we get 180 == 2 * direction(orthocenter(B, C, D), G) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on D, H, G, orthocenter(B, C, D) we get 180 == 2 * direction(D, H) - 2 * direction(G, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, orthocenter(B, C, D), H, D we get 180 == 2 * direction(C, orthocenter(B, C, D)) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on C, D, orthocenter(B, C, D), B we get 180 == 2 * direction(C, D) - 2 * direction(orthocenter(B, C, D), B) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), E, E, B we get 180 == 2 * direction(orthocenter(B, C, D), E) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on E, orthocenter(B, C, D), E, B we get 180 == 2 * direction(E, orthocenter(B, C, D)) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on E, orthocenter(B, C, D), B, C we get 180 == 2 * direction(E, orthocenter(B, C, D)) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), C, D, G we get 180 == 2 * direction(orthocenter(B, C, D), C) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on C, orthocenter(B, C, D), G, B we get 180 == 2 * direction(C, orthocenter(B, C, D)) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), C, B, G we get 180 == 2 * direction(orthocenter(B, C, D), C) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on G, D, orthocenter(B, C, D), C we get 180 == 2 * direction(G, D) - 2 * direction(orthocenter(B, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on D, C, orthocenter(B, C, D), B we get 180 == 2 * direction(D, C) - 2 * direction(orthocenter(B, C, D), B) mod 360
By perpendicular_direction_conditions_v0_r on E, B, E, orthocenter(B, C, D) we get 180 == 2 * direction(E, B) - 2 * direction(E, orthocenter(B, C, D)) mod 360
By in_imply_collinear on line_intersection(Line(C, D), altitude(B, C, D)), B, orthocenter(B, C, D) we get collinear(B, orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D)))
By in_imply_collinear on line_intersection(Line(C, D), altitude(B, C, D)), D, C we get collinear(C, D, line_intersection(Line(C, D), altitude(B, C, D)))
By aa_similarity on A, D, F, C, D, G we get similar_triangles(A, D, F, C, D, G)
By aa_anti_similarity on D, E, C, D, I, G we get anti_similar_triangles(C, D, E, G, D, I)
By aa_anti_similarity on D, C, E, D, G, I we get anti_similar_triangles(C, D, E, G, D, I)
By aa_anti_similarity on D, G, I, D, C, E we get anti_similar_triangles(C, D, E, G, D, I)
By aa_similarity on C, D, G, A, D, F we get similar_triangles(A, D, F, C, D, G)
By aa_similarity on C, G, D, A, F, D we get similar_triangles(A, D, F, C, D, G)
By aa_similarity on A, F, D, C, G, D we get similar_triangles(A, D, F, C, D, G)
By aa_anti_similarity on D, I, G, D, E, C we get anti_similar_triangles(C, D, E, G, D, I)
By perpendicular_angle_conditions_v0 on orthocenter(B, C, D), E, B we get angle(orthocenter(B, C, D), E, B) == orientation(B, orthocenter(B, C, D), E) mod 360
By power_of_a_point_tangent_converse_v1 on B, H, D, E we get tangent(Line(B, E), Circle(D, E, H))
By perpendicular_angle_conditions_v0 on orthocenter(B, C, D), G, D we get angle(orthocenter(B, C, D), G, D) == orientation(D, orthocenter(B, C, D), G) mod 360
By similar_triangle_basic_properties on B, H, E, E, H, D we get angle(B, H, E) == angle(E, H, D) mod 360, angle(H, D, E) == angle(H, E, B) mod 360, angle(D, E, H) == angle(E, B, H) mod 360, log(distance(B, H)) + log(distance(D, H)) == log(distance(E, H)) + log(distance(E, H)), log(distance(D, H)) + log(distance(B, E)) == log(distance(E, H)) + log(distance(D, E)), log(distance(B, E)) + log(distance(E, H)) == log(distance(D, E)) + log(distance(B, H))
By similar_triangle_basic_properties on E, H, D, B, G, C we get angle(B, G, C) == angle(E, H, D) mod 360, angle(G, C, B) == angle(H, D, E) mod 360, angle(C, B, G) == angle(D, E, H) mod 360, log(distance(B, G)) + log(distance(D, H)) == log(distance(E, H)) + log(distance(C, G)), log(distance(C, G)) + log(distance(D, E)) == log(distance(D, H)) + log(distance(B, C)), log(distance(B, C)) + log(distance(E, H)) == log(distance(D, E)) + log(distance(B, G))
By external_angle_bisector_definition_v0 on B, orthocenter(B, C, D), H, G we get 180 == angle(B, G, orthocenter(B, C, D)) + angle(H, G, orthocenter(B, C, D)) mod 360
By power_of_a_point_in_circle on E, Circle(C, D, E) we get 0 == power_of_a_point(E, Circle(C, D, E))
By power_of_a_point_tangent_converse_v0 on B, D, H, F we get tangent(Line(B, F), Circle(D, F, H))
By power_of_a_point_on_circle on F, Circle(B, D, E) we get 0 == power_of_a_point(F, Circle(B, D, E))
By power_of_a_point_in_circle on E, Circle(B, D, E) we get 0 == power_of_a_point(E, Circle(B, D, E))
By anti_similar_triangle_basic_properties on E, B, D, H, E, D we get angle(E, B, D) == 0 - angle(H, E, D) mod 360, angle(B, D, E) == 0 - angle(E, D, H) mod 360, angle(D, E, B) == 0 - angle(D, H, E) mod 360, log(distance(B, E)) + log(distance(D, E)) == log(distance(E, H)) + log(distance(B, D)), log(distance(B, D)) + log(distance(D, H)) == log(distance(D, E)) + log(distance(D, E)), log(distance(D, E)) + log(distance(E, H)) == log(distance(D, H)) + log(distance(B, E))
By external_angle_bisector_definition_v0 on H, orthocenter(B, C, D), D, G we get 180 == angle(H, G, orthocenter(B, C, D)) + angle(D, G, orthocenter(B, C, D)) mod 360
By perpendicular_angle_conditions_v0 on orthocenter(B, C, D), E, C we get angle(orthocenter(B, C, D), E, C) == orientation(C, orthocenter(B, C, D), E) mod 360
By collinear_definition on G, C, orthocenter(B, C, D) we get C in Line(G, orthocenter(B, C, D)), orthocenter(B, C, D) in Line(C, G), Line(C, G) == Line(G, orthocenter(B, C, D)), 0 == 2 * angle(C, G, orthocenter(B, C, D)) mod 360
By similar_triangle_basic_properties on E, D, H, B, D, F we get angle(B, D, F) == angle(E, D, H) mod 360, angle(D, F, B) == angle(D, H, E) mod 360, angle(F, B, D) == angle(H, E, D) mod 360, log(distance(B, D)) + log(distance(D, H)) == log(distance(D, E)) + log(distance(D, F)), log(distance(D, F)) + log(distance(E, H)) == log(distance(D, H)) + log(distance(B, F)), log(distance(B, F)) + log(distance(D, E)) == log(distance(E, H)) + log(distance(B, D))
By power_of_a_point_in_circle on G, Circle(C, D, E) we get 0 == power_of_a_point(G, Circle(C, D, E))
By external_angle_bisector_definition_v0 on B, orthocenter(B, C, D), D, G we get 180 == angle(B, G, orthocenter(B, C, D)) + angle(D, G, orthocenter(B, C, D)) mod 360
By perpendicular_angle_conditions_v0 on orthocenter(B, C, D), G, B we get angle(orthocenter(B, C, D), G, B) == orientation(B, orthocenter(B, C, D), G) mod 360
By anti_similar_triangle_basic_properties on H, D, E, E, D, B we get angle(H, D, E) == 0 - angle(E, D, B) mod 360, angle(D, E, H) == 0 - angle(D, B, E) mod 360, angle(E, H, D) == 0 - angle(B, E, D) mod 360, log(distance(D, E)) + log(distance(D, E)) == log(distance(D, H)) + log(distance(B, D)), log(distance(B, D)) + log(distance(E, H)) == log(distance(D, E)) + log(distance(B, E)), log(distance(B, E)) + log(distance(D, H)) == log(distance(E, H)) + log(distance(D, E))
By external_angle_bisector_definition_v0 on H, orthocenter(B, C, D), H, G we get 180 == angle(H, G, orthocenter(B, C, D)) + angle(H, G, orthocenter(B, C, D)) mod 360
By collinear_definition on E, D, orthocenter(B, C, D) we get D in Line(E, orthocenter(B, C, D)), orthocenter(B, C, D) in Line(D, E), Line(D, E) == Line(E, orthocenter(B, C, D)), 0 == 2 * angle(D, E, orthocenter(B, C, D)) mod 360
By perpendicular_angle_conditions_v0 on D, G, orthocenter(B, C, D) we get angle(D, G, orthocenter(B, C, D)) == orientation(D, G, orthocenter(B, C, D)) mod 360
By similar_triangle_basic_properties on D, B, F, D, E, H we get angle(D, B, F) == angle(D, E, H) mod 360, angle(B, F, D) == angle(E, H, D) mod 360, angle(F, D, B) == angle(H, D, E) mod 360, log(distance(B, D)) + log(distance(E, H)) == log(distance(D, E)) + log(distance(B, F)), log(distance(B, F)) + log(distance(D, H)) == log(distance(E, H)) + log(distance(D, F)), log(distance(D, F)) + log(distance(D, E)) == log(distance(D, H)) + log(distance(B, D))
By power_of_a_point_in_circle on B, Circle(B, D, E) we get 0 == power_of_a_point(B, Circle(B, D, E))
By similar_triangle_basic_properties on H, E, D, G, B, C we get angle(G, B, C) == angle(H, E, D) mod 360, angle(B, C, G) == angle(E, D, H) mod 360, angle(C, G, B) == angle(D, H, E) mod 360, log(distance(B, G)) + log(distance(D, E)) == log(distance(E, H)) + log(distance(B, C)), log(distance(B, C)) + log(distance(D, H)) == log(distance(D, E)) + log(distance(C, G)), log(distance(C, G)) + log(distance(E, H)) == log(distance(D, H)) + log(distance(B, G))
By perpendicular_angle_conditions_v0 on orthocenter(B, C, D), G, H we get angle(orthocenter(B, C, D), G, H) == orientation(G, H, orthocenter(B, C, D)) mod 360
By external_angle_bisector_definition_v0 on D, orthocenter(B, C, D), D, G we get 180 == angle(D, G, orthocenter(B, C, D)) + angle(D, G, orthocenter(B, C, D)) mod 360
By external_angle_bisector_definition_v0 on B, orthocenter(B, C, D), B, E we get 180 == angle(B, E, orthocenter(B, C, D)) + angle(B, E, orthocenter(B, C, D)) mod 360
By perpendicular_angle_conditions_v0 on C, E, orthocenter(B, C, D) we get angle(C, E, orthocenter(B, C, D)) == orientation(C, E, orthocenter(B, C, D)) mod 360
By perpendicular_angle_conditions_v0 on B, E, orthocenter(B, C, D) we get angle(B, E, orthocenter(B, C, D)) == orientation(B, E, orthocenter(B, C, D)) mod 360
By collinear_definition on C, G, orthocenter(B, C, D) we get G in Line(C, orthocenter(B, C, D)), orthocenter(B, C, D) in Line(C, G), Line(C, G) == Line(C, orthocenter(B, C, D)), 0 == 2 * angle(G, C, orthocenter(B, C, D)) mod 360
By external_angle_bisector_definition_v0 on C, orthocenter(B, C, D), C, E we get 180 == angle(C, E, orthocenter(B, C, D)) + angle(C, E, orthocenter(B, C, D)) mod 360
By collinear_definition on G, orthocenter(B, C, D), C we get orthocenter(B, C, D) in Line(C, G), C in Line(G, orthocenter(B, C, D)), Line(C, G) == Line(G, orthocenter(B, C, D)), 0 == 2 * angle(orthocenter(B, C, D), G, C) mod 360
By collinear_definition on E, orthocenter(B, C, D), D we get orthocenter(B, C, D) in Line(D, E), D in Line(E, orthocenter(B, C, D)), Line(D, E) == Line(E, orthocenter(B, C, D)), 0 == 2 * angle(orthocenter(B, C, D), E, D) mod 360
By power_of_a_point_on_circle on D, Circle(C, D, E) we get 0 == power_of_a_point(D, Circle(C, D, E))
By collinear_definition on D, orthocenter(B, C, D), E we get orthocenter(B, C, D) in Line(D, E), E in Line(D, orthocenter(B, C, D)), Line(D, E) == Line(D, orthocenter(B, C, D)), 0 == 2 * angle(orthocenter(B, C, D), D, E) mod 360
By collinear_definition on D, E, orthocenter(B, C, D) we get E in Line(D, orthocenter(B, C, D)), orthocenter(B, C, D) in Line(D, E), Line(D, E) == Line(D, orthocenter(B, C, D)), 0 == 2 * angle(E, D, orthocenter(B, C, D)) mod 360
By external_angle_bisector_definition_v0 on B, orthocenter(B, C, D), B, G we get 180 == angle(B, G, orthocenter(B, C, D)) + angle(B, G, orthocenter(B, C, D)) mod 360
By power_of_a_point_on_circle on D, Circle(B, D, E) we get 0 == power_of_a_point(D, Circle(B, D, E))
By collinear_definition on C, orthocenter(B, C, D), G we get orthocenter(B, C, D) in Line(C, G), G in Line(C, orthocenter(B, C, D)), Line(C, G) == Line(C, orthocenter(B, C, D)), 0 == 2 * angle(orthocenter(B, C, D), C, G) mod 360
By perpendicular_angle_conditions_v0 on H, G, orthocenter(B, C, D) we get angle(H, G, orthocenter(B, C, D)) == orientation(G, orthocenter(B, C, D), H) mod 360
By power_of_a_point_on_circle on C, Circle(C, D, E) we get 0 == power_of_a_point(C, Circle(C, D, E))
By internal_angle_bisector_definition_v0 on B, orthocenter(B, C, D), C, E we get angle(B, E, orthocenter(B, C, D)) == angle(orthocenter(B, C, D), E, C) mod 360
By internal_angle_bisector_definition_v0 on C, orthocenter(B, C, D), B, E we get angle(C, E, orthocenter(B, C, D)) == angle(orthocenter(B, C, D), E, B) mod 360
By perpendicular_angle_conditions_v0 on B, G, orthocenter(B, C, D) we get angle(B, G, orthocenter(B, C, D)) == orientation(B, G, orthocenter(B, C, D)) mod 360
By sas_anti_similarity on D, B, F, F, B, H we get anti_similar_triangles(B, D, F, B, F, H)
By sas_anti_similarity on H, B, F, F, B, D we get anti_similar_triangles(B, D, F, B, F, H)
By sas_similarity on C, B, D, G, B, F we get similar_triangles(B, C, D, B, G, F)
By sas_similarity on H, B, F, E, B, D we get similar_triangles(B, D, E, B, F, H)
By altitude_definition on B, orthocenter(B, C, D), D, g we get g == altitude(B, D, orthocenter(B, C, D))
By altitude_definition on H, orthocenter(B, C, D), C, i we get i == altitude(H, C, orthocenter(B, C, D))
By altitude_definition on C, D, orthocenter(B, C, D), g we get g == altitude(C, D, orthocenter(B, C, D))
By sas_anti_similarity on G, B, E, C, B, D we get anti_similar_triangles(B, C, D, B, G, E)
By altitude_definition on D, B, orthocenter(B, C, D), Line(C, D) we get Line(C, D) == altitude(D, B, orthocenter(B, C, D))
By power_of_a_point_definition on B, E, C, Circle(C, D, E) we get log(distance(B, E)) + log(distance(B, C)) == log(power_of_a_point(B, Circle(C, D, E)))
By sas_anti_similarity on D, E, H, F, B, H we get anti_similar_triangles(B, F, H, E, D, H)
By sas_anti_similarity on F, B, H, D, B, F we get anti_similar_triangles(B, D, F, B, F, H)
By sas_anti_similarity on F, B, E, E, B, F we get anti_similar_triangles(B, E, F, B, F, E)
By sas_similarity on D, B, E, F, B, H we get similar_triangles(B, D, E, B, F, H)
By sas_anti_similarity on E, B, F, F, B, E we get anti_similar_triangles(B, E, F, B, F, E)
By altitude_definition on C, B, orthocenter(B, C, D), Line(C, D) we get Line(C, D) == altitude(C, B, orthocenter(B, C, D))
By altitude_definition on C, orthocenter(B, C, D), E, g we get g == altitude(C, E, orthocenter(B, C, D))
By altitude_definition on D, orthocenter(B, C, D), C, i we get i == altitude(D, C, orthocenter(B, C, D))
By sas_anti_similarity on F, B, H, D, E, H we get anti_similar_triangles(B, F, H, E, D, H)
By sas_similarity on F, B, H, D, B, E we get similar_triangles(B, D, E, B, F, H)
By sas_anti_similarity on C, B, G, F, B, H we get anti_similar_triangles(B, C, G, B, F, H)
By altitude_definition on B, orthocenter(B, C, D), G, i we get i == altitude(B, G, orthocenter(B, C, D))
By altitude_definition on H, G, orthocenter(B, C, D), i we get i == altitude(H, G, orthocenter(B, C, D))
By collinear_definition on orthocenter(B, C, D), G, C we get G in Line(C, orthocenter(B, C, D)), C in Line(G, orthocenter(B, C, D)), Line(C, orthocenter(B, C, D)) == Line(G, orthocenter(B, C, D)), 0 == 2 * angle(G, orthocenter(B, C, D), C) mod 360
By sas_anti_similarity on H, B, E, H, B, F we get anti_similar_triangles(B, E, H, B, F, H)
By sas_anti_similarity on D, B, C, E, B, G we get anti_similar_triangles(B, C, D, B, G, E)
By altitude_definition on B, E, orthocenter(B, C, D), g we get g == altitude(B, E, orthocenter(B, C, D))
By altitude_definition on B, orthocenter(B, C, D), C, i we get i == altitude(B, C, orthocenter(B, C, D))
By sas_anti_similarity on C, B, D, G, B, E we get anti_similar_triangles(B, C, D, B, G, E)
By sas_anti_similarity on H, B, F, H, B, E we get anti_similar_triangles(B, E, H, B, F, H)
By altitude_definition on D, G, orthocenter(B, C, D), i we get i == altitude(D, G, orthocenter(B, C, D))
By power_of_a_point_definition on B, G, D, Circle(C, D, E) we get log(distance(B, G)) + log(distance(B, D)) == log(power_of_a_point(B, Circle(C, D, E)))
By sas_anti_similarity on F, B, D, H, B, F we get anti_similar_triangles(B, D, F, B, F, H)
By sas_similarity on E, B, D, H, B, F we get similar_triangles(B, D, E, B, F, H)
By collinear_definition on orthocenter(B, C, D), D, E we get D in Line(E, orthocenter(B, C, D)), E in Line(D, orthocenter(B, C, D)), Line(D, orthocenter(B, C, D)) == Line(E, orthocenter(B, C, D)), 0 == 2 * angle(D, orthocenter(B, C, D), E) mod 360
By sas_anti_similarity on H, E, D, H, B, F we get anti_similar_triangles(B, F, H, E, D, H)
By sas_similarity on F, B, G, D, B, C we get similar_triangles(B, C, D, B, G, F)
By sas_anti_similarity on F, B, H, C, B, G we get anti_similar_triangles(B, C, G, B, F, H)
By collinear_definition on orthocenter(B, C, D), E, D we get E in Line(D, orthocenter(B, C, D)), D in Line(E, orthocenter(B, C, D)), Line(D, orthocenter(B, C, D)) == Line(E, orthocenter(B, C, D)), 0 == 2 * angle(E, orthocenter(B, C, D), D) mod 360
By sas_anti_similarity on H, B, F, H, E, D we get anti_similar_triangles(B, F, H, E, D, H)
By sas_anti_similarity on E, B, H, F, B, H we get anti_similar_triangles(B, E, H, B, F, H)
By collinear_definition on orthocenter(B, C, D), C, G we get C in Line(G, orthocenter(B, C, D)), G in Line(C, orthocenter(B, C, D)), Line(C, orthocenter(B, C, D)) == Line(G, orthocenter(B, C, D)), 0 == 2 * angle(C, orthocenter(B, C, D), G) mod 360
By sas_similarity on G, B, F, C, B, D we get similar_triangles(B, C, D, B, G, F)
By sas_anti_similarity on G, B, C, H, B, F we get anti_similar_triangles(B, C, G, B, F, H)
By sas_anti_similarity on F, B, H, E, B, H we get anti_similar_triangles(B, E, H, B, F, H)
By sas_anti_similarity on H, B, F, G, B, C we get anti_similar_triangles(B, C, G, B, F, H)
By sas_anti_similarity on E, B, G, D, B, C we get anti_similar_triangles(B, C, D, B, G, E)
By sas_similarity on D, B, C, F, B, G we get similar_triangles(B, C, D, B, G, F)
By power_of_a_point_definition on H, B, D, Circle(B, D, E) we get log(distance(B, H)) + log(distance(D, H)) == log(power_of_a_point(H, Circle(B, D, E)))
By power_of_a_point_definition on G, B, D, Circle(B, D, E) we get log(distance(B, G)) + log(distance(D, G)) == log(power_of_a_point(G, Circle(B, D, E)))
By power_of_a_point_definition on C, B, E, Circle(B, D, E) we get log(distance(B, C)) + log(distance(C, E)) == log(power_of_a_point(C, Circle(B, D, E)))
By power_of_a_point_definition on H, G, D, Circle(C, D, E) we get log(distance(G, H)) + log(distance(D, H)) == log(power_of_a_point(H, Circle(C, D, E)))
By sas_anti_similarity on E, B, G, F, B, G we get anti_similar_triangles(B, E, G, B, F, G)
By power_of_a_point_definition on orthocenter(B, C, D), G, C, Circle(C, D, E) we get log(power_of_a_point(orthocenter(B, C, D), Circle(C, D, E))) == log(distance(G, orthocenter(B, C, D))) + log(distance(C, orthocenter(B, C, D)))
By sas_anti_similarity on G, B, F, G, B, E we get anti_similar_triangles(B, E, G, B, F, G)
By power_of_a_point_definition on orthocenter(B, C, D), D, E, Circle(B, D, E) we get log(power_of_a_point(orthocenter(B, C, D), Circle(B, D, E))) == log(distance(D, orthocenter(B, C, D))) + log(distance(E, orthocenter(B, C, D)))
By sas_anti_similarity on G, B, E, G, B, F we get anti_similar_triangles(B, E, G, B, F, G)
By sas_anti_similarity on F, B, G, E, B, G we get anti_similar_triangles(B, E, G, B, F, G)
By power_of_a_point_definition on A, B, F, Circle(B, D, E) we get log(distance(A, B)) + log(distance(A, F)) == log(power_of_a_point(A, Circle(B, D, E)))
By power_of_a_point_definition on orthocenter(B, C, D), D, E, Circle(C, D, E) we get log(power_of_a_point(orthocenter(B, C, D), Circle(C, D, E))) == log(distance(D, orthocenter(B, C, D))) + log(distance(E, orthocenter(B, C, D)))
By line_intersection_definition on G, Line(F, G), i we get G == line_intersection(i, Line(F, G))
By radical_axis_of_intersecting_circles_v0 on D, F, Circle(D, F, H), Circle(B, D, E) we get Line(D, F) == radical_axis(Circle(B, D, E), Circle(D, F, H))
By orthocenter_concurrency on C, B, orthocenter(B, C, D) we get orthocenter(B, C, orthocenter(B, C, D)) in altitude(C, B, orthocenter(B, C, D)), orthocenter(B, C, orthocenter(B, C, D)) in altitude(B, C, orthocenter(B, C, D)), orthocenter(B, C, orthocenter(B, C, D)) in altitude(orthocenter(B, C, D), B, C)
By line_intersection_definition on G, Line(C, G), Line(E, G) we get G == line_intersection(Line(C, G), Line(E, G))
By orthocenter_concurrency on D, orthocenter(B, C, D), C we get orthocenter(C, D, orthocenter(B, C, D)) in altitude(D, C, orthocenter(B, C, D)), orthocenter(C, D, orthocenter(B, C, D)) in altitude(orthocenter(B, C, D), C, D), orthocenter(C, D, orthocenter(B, C, D)) in altitude(C, D, orthocenter(B, C, D))
By orthocenter_concurrency on orthocenter(B, C, D), B, D we get orthocenter(B, D, orthocenter(B, C, D)) in altitude(orthocenter(B, C, D), B, D), orthocenter(B, D, orthocenter(B, C, D)) in altitude(B, D, orthocenter(B, C, D)), orthocenter(B, D, orthocenter(B, C, D)) in altitude(D, B, orthocenter(B, C, D))
By line_intersection_definition on F, Line(D, F), Line(F, G) we get F == line_intersection(Line(D, F), Line(F, G))
By line_intersection_definition on F, Line(F, H), Line(D, F) we get F == line_intersection(Line(D, F), Line(F, H))
By line_intersection_definition on G, Line(E, G), Line(G, I) we get G == line_intersection(Line(E, G), Line(G, I))
By line_intersection_definition on G, Line(E, G), i we get G == line_intersection(i, Line(E, G))
By line_intersection_definition on E, Line(E, H), Line(E, G) we get E == line_intersection(Line(E, G), Line(E, H))
By radical_axis_of_intersecting_circles_v0 on D, H, Circle(D, F, H), Circle(D, E, H) we get Line(D, H) == radical_axis(Circle(D, E, H), Circle(D, F, H))
By radical_axis_of_intersecting_circles_v0 on D, E, Circle(D, E, H), Circle(C, D, E) we get Line(D, E) == radical_axis(Circle(C, D, E), Circle(D, E, H))
By line_intersection_definition on F, Line(E, F), Line(F, G) we get F == line_intersection(Line(E, F), Line(F, G))
By line_intersection_definition on H, i, Line(F, H) we get H == line_intersection(i, Line(F, H))
By line_intersection_definition on E, Line(E, G), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, G))
By line_intersection_definition on F, Line(E, F), Line(D, F) we get F == line_intersection(Line(D, F), Line(E, F))
By line_intersection_definition on F, f, Line(F, G) we get F == line_intersection(f, Line(F, G))
By radical_axis_of_intersecting_circles_v0 on E, D, Circle(D, E, H), Circle(B, D, E) we get Line(D, E) == radical_axis(Circle(B, D, E), Circle(D, E, H))
By line_intersection_definition on F, f, Line(F, H) we get F == line_intersection(f, Line(F, H))
By line_intersection_definition on E, Line(E, F), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, F))
By line_intersection_definition on F, Line(F, H), Line(F, G) we get F == line_intersection(Line(F, G), Line(F, H))
By line_intersection_definition on G, Line(E, G), Line(F, G) we get G == line_intersection(Line(E, G), Line(F, G))
By line_intersection_definition on F, f, Line(E, F) we get F == line_intersection(f, Line(E, F))
By line_intersection_definition on E, Line(E, F), Line(E, G) we get E == line_intersection(Line(E, F), Line(E, G))
By line_intersection_definition on E, Line(E, F), g we get E == line_intersection(g, Line(E, F))
By line_intersection_definition on E, Line(E, G), g we get E == line_intersection(g, Line(E, G))
By line_intersection_definition on G, Line(F, G), Line(C, G) we get G == line_intersection(Line(C, G), Line(F, G))
By perpendicular_direction_conditions_v0 on B, H, E, F we get perpendicular(Line(B, H), Line(E, F))
By same_angle_v1 on G, H, D, E we get angle(D, G, E) == angle(H, G, E) mod 360
By same_angle_converse_v0 on E, F, H, D we get collinear(E, F, H)
By perpendicular_direction_conditions_v0 on A, I, F, G we get perpendicular(Line(A, I), Line(F, G))
By perpendicular_direction_conditions_v0 on A, D, F, G we get perpendicular(Line(A, D), Line(F, G))
By perpendicular_direction_conditions_v0 on H, F, B, D we get perpendicular(Line(B, D), Line(F, H))
By perpendicular_direction_conditions_v0 on D, I, F, G we get perpendicular(Line(D, I), Line(F, G))
By perpendicular_direction_conditions_v0 on E, F, H, G we get perpendicular(Line(E, F), Line(G, H))
By perpendicular_direction_conditions_v0 on E, F, D, G we get perpendicular(Line(D, G), Line(E, F))
By perpendicular_direction_conditions_v0 on D, B, E, F we get perpendicular(Line(B, D), Line(E, F))
By perpendicular_direction_conditions_v0 on G, H, F, H we get perpendicular(Line(F, H), Line(G, H))
By same_angle_converse_v0 on G, I, F, B we get collinear(F, G, I)
By perpendicular_direction_conditions_v0 on H, B, F, H we get perpendicular(Line(B, H), Line(F, H))
By same_angle_v3 on E, B, C, F we get angle(B, E, F) == angle(C, E, F) + 180 mod 360
By same_angle_v2 on F, A, B, E we get angle(A, F, E) == angle(B, F, E) + 180 mod 360
By same_angle_v1 on H, G, D, F we get angle(D, H, F) == angle(G, H, F) mod 360
By perpendicular_direction_conditions_v0 on E, F, D, H we get perpendicular(Line(D, H), Line(E, F))
By same_angle_v0 on G, D, B, F we get angle(B, G, F) == angle(D, G, F) mod 360
By same_angle_v2 on H, B, D, F we get angle(B, H, F) == angle(D, H, F) + 180 mod 360
By perpendicular_direction_conditions_v0 on D, H, F, H we get perpendicular(Line(D, H), Line(F, H))
By same_angle_v1 on G, H, B, E we get angle(B, G, E) == angle(H, G, E) mod 360
By same_angle_v2 on F, A, B, G we get angle(A, F, G) == angle(B, F, G) + 180 mod 360
By perpendicular_direction_conditions_v0 on F, H, B, G we get perpendicular(Line(B, G), Line(F, H))
By same_angle_v2 on F, A, B, H we get angle(A, F, H) == angle(B, F, H) + 180 mod 360
By perpendicular_direction_conditions_v0 on F, E, B, G we get perpendicular(Line(B, G), Line(E, F))
By perpendicular_direction_conditions_v0 on F, H, D, G we get perpendicular(Line(D, G), Line(F, H))
By same_angle_v3 on H, B, G, F we get angle(B, H, F) == angle(G, H, F) + 180 mod 360
By projection_definition on C, line_intersection(Line(C, D), altitude(B, C, D)), altitude(B, C, D) we get projection(C, altitude(B, C, D)) == line_intersection(Line(C, D), altitude(B, C, D))
By same_angle_v0 on G, H, D, F we get angle(D, G, F) == angle(H, G, F) mod 360
By same_angle_v0 on G, B, H, F we get angle(B, G, F) == angle(H, G, F) mod 360
By projection_definition on B, line_intersection(Line(C, D), altitude(B, C, D)), Line(C, D) we get projection(B, Line(C, D)) == line_intersection(Line(C, D), altitude(B, C, D))
By projection_definition on D, line_intersection(Line(C, D), altitude(B, C, D)), altitude(B, C, D) we get projection(D, altitude(B, C, D)) == line_intersection(Line(C, D), altitude(B, C, D))
By projection_definition on orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D)), Line(C, D) we get projection(orthocenter(B, C, D), Line(C, D)) == line_intersection(Line(C, D), altitude(B, C, D))
By circle_radius_v0_r on D, Circle(C, D, E) we get radius(Circle(C, D, E)) == distance(D, center(Circle(C, D, E)))
By circle_radius_v0_r on F, Circle(B, D, E) we get radius(Circle(B, D, E)) == distance(F, center(Circle(B, D, E)))
By circle_radius_v0_r on B, Circle(B, D, E) we get radius(Circle(B, D, E)) == distance(B, center(Circle(B, D, E)))
By circle_radius_v0_r on E, Circle(C, D, E) we get radius(Circle(C, D, E)) == distance(E, center(Circle(C, D, E)))
By circle_radius_v0_r on E, Circle(B, D, E) we get radius(Circle(B, D, E)) == distance(E, center(Circle(B, D, E)))
By circle_radius_v0_r on G, Circle(C, D, E) we get radius(Circle(C, D, E)) == distance(G, center(Circle(C, D, E)))
By circle_radius_v0_r on C, Circle(C, D, E) we get radius(Circle(C, D, E)) == distance(C, center(Circle(C, D, E)))
By circle_radius_v0_r on D, Circle(B, D, E) we get radius(Circle(B, D, E)) == distance(D, center(Circle(B, D, E)))
By angle_to_center on C, E, D, Circle(C, D, E) we get 2 * angle(C, E, D) == angle(C, center(Circle(C, D, E)), D) mod 360
By angle_to_center on E, F, B, Circle(B, D, E) we get 2 * angle(E, F, B) == angle(E, center(Circle(B, D, E)), B) mod 360
By angle_to_center on E, D, B, Circle(B, D, E) we get 2 * angle(E, D, B) == angle(E, center(Circle(B, D, E)), B) mod 360
By angle_to_center on E, B, D, Circle(B, D, E) we get 2 * angle(E, B, D) == angle(E, center(Circle(B, D, E)), D) mod 360
By angle_to_center on E, D, C, Circle(C, D, E) we get 2 * angle(E, D, C) == angle(E, center(Circle(C, D, E)), C) mod 360
By angle_to_center on C, G, D, Circle(C, D, E) we get 2 * angle(C, G, D) == angle(C, center(Circle(C, D, E)), D) mod 360
By angle_to_center on F, E, D, Circle(B, D, E) we get 2 * angle(F, E, D) == angle(F, center(Circle(B, D, E)), D) mod 360
By angle_to_center on D, E, B, Circle(B, D, E) we get 2 * angle(D, E, B) == angle(D, center(Circle(B, D, E)), B) mod 360
By angle_to_center on G, E, C, Circle(C, D, E) we get 2 * angle(G, E, C) == angle(G, center(Circle(C, D, E)), C) mod 360
By angle_to_center on B, D, F, Circle(B, D, E) we get 2 * angle(B, D, F) == angle(B, center(Circle(B, D, E)), F) mod 360
By angle_to_center on B, E, D, Circle(B, D, E) we get 2 * angle(B, E, D) == angle(B, center(Circle(B, D, E)), D) mod 360
By angle_to_center on E, C, D, Circle(C, D, E) we get 2 * angle(E, C, D) == angle(E, center(Circle(C, D, E)), D) mod 360
By perpendicular_direction_conditions_v0_r on C, D, B, line_intersection(Line(C, D), altitude(B, C, D)) we get 180 == 2 * direction(C, D) - 2 * direction(B, line_intersection(Line(C, D), altitude(B, C, D))) mod 360
By angle_to_center on G, C, E, Circle(C, D, E) we get 2 * angle(G, C, E) == angle(G, center(Circle(C, D, E)), E) mod 360
By angle_to_center on E, G, D, Circle(C, D, E) we get 2 * angle(E, G, D) == angle(E, center(Circle(C, D, E)), D) mod 360
By angle_to_center on E, G, C, Circle(C, D, E) we get 2 * angle(E, G, C) == angle(E, center(Circle(C, D, E)), C) mod 360
By angle_to_center on D, C, G, Circle(C, D, E) we get 2 * angle(D, C, G) == angle(D, center(Circle(C, D, E)), G) mod 360
By angle_to_center on E, B, F, Circle(B, D, E) we get 2 * angle(E, B, F) == angle(E, center(Circle(B, D, E)), F) mod 360
By angle_to_center on D, F, E, Circle(B, D, E) we get 2 * angle(D, F, E) == angle(D, center(Circle(B, D, E)), E) mod 360
By angle_to_center on G, D, E, Circle(C, D, E) we get 2 * angle(G, D, E) == angle(G, center(Circle(C, D, E)), E) mod 360
By angle_to_center on D, G, E, Circle(C, D, E) we get 2 * angle(D, G, E) == angle(D, center(Circle(C, D, E)), E) mod 360
By angle_to_center on C, G, E, Circle(C, D, E) we get 2 * angle(C, G, E) == angle(C, center(Circle(C, D, E)), E) mod 360
By angle_to_center on F, E, B, Circle(B, D, E) we get 2 * angle(F, E, B) == angle(F, center(Circle(B, D, E)), B) mod 360
By angle_to_center on G, C, D, Circle(C, D, E) we get 2 * angle(G, C, D) == angle(G, center(Circle(C, D, E)), D) mod 360
By angle_to_center on C, D, E, Circle(C, D, E) we get 2 * angle(C, D, E) == angle(C, center(Circle(C, D, E)), E) mod 360
By angle_to_center on F, B, D, Circle(B, D, E) we get 2 * angle(F, B, D) == angle(F, center(Circle(B, D, E)), D) mod 360
By angle_to_center on D, F, B, Circle(B, D, E) we get 2 * angle(D, F, B) == angle(D, center(Circle(B, D, E)), B) mod 360
By angle_to_center on E, F, D, Circle(B, D, E) we get 2 * angle(E, F, D) == angle(E, center(Circle(B, D, E)), D) mod 360
By angle_to_center on E, C, G, Circle(C, D, E) we get 2 * angle(E, C, G) == angle(E, center(Circle(C, D, E)), G) mod 360
By angle_to_center on C, D, G, Circle(C, D, E) we get 2 * angle(C, D, G) == angle(C, center(Circle(C, D, E)), G) mod 360
By angle_to_center on E, D, F, Circle(B, D, E) we get 2 * angle(E, D, F) == angle(E, center(Circle(B, D, E)), F) mod 360
By angle_to_center on D, B, F, Circle(B, D, E) we get 2 * angle(D, B, F) == angle(D, center(Circle(B, D, E)), F) mod 360
By angle_to_center on B, F, D, Circle(B, D, E) we get 2 * angle(B, F, D) == angle(B, center(Circle(B, D, E)), D) mod 360
By angle_to_center on F, B, E, Circle(B, D, E) we get 2 * angle(F, B, E) == angle(F, center(Circle(B, D, E)), E) mod 360
By angle_to_center on G, E, D, Circle(C, D, E) we get 2 * angle(G, E, D) == angle(G, center(Circle(C, D, E)), D) mod 360
By angle_to_center on D, B, E, Circle(B, D, E) we get 2 * angle(D, B, E) == angle(D, center(Circle(B, D, E)), E) mod 360
By angle_to_center on D, E, C, Circle(C, D, E) we get 2 * angle(D, E, C) == angle(D, center(Circle(C, D, E)), C) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(Line(C, D), altitude(B, C, D)), orthocenter(B, C, D), B we get 180 == 2 * direction(C, line_intersection(Line(C, D), altitude(B, C, D))) - 2 * direction(orthocenter(B, C, D), B) mod 360
By angle_to_center on D, G, C, Circle(C, D, E) we get 2 * angle(D, G, C) == angle(D, center(Circle(C, D, E)), C) mod 360
By angle_to_center on B, D, E, Circle(B, D, E) we get 2 * angle(B, D, E) == angle(B, center(Circle(B, D, E)), E) mod 360
By angle_to_center on B, E, F, Circle(B, D, E) we get 2 * angle(B, E, F) == angle(B, center(Circle(B, D, E)), F) mod 360
By angle_to_center on D, C, E, Circle(C, D, E) we get 2 * angle(D, C, E) == angle(D, center(Circle(C, D, E)), E) mod 360
By angle_to_center on C, E, G, Circle(C, D, E) we get 2 * angle(C, E, G) == angle(C, center(Circle(C, D, E)), G) mod 360
By angle_to_center on D, E, G, Circle(C, D, E) we get 2 * angle(D, E, G) == angle(D, center(Circle(C, D, E)), G) mod 360
By angle_to_center on F, D, B, Circle(B, D, E) we get 2 * angle(F, D, B) == angle(F, center(Circle(B, D, E)), B) mod 360
By angle_to_center on D, E, F, Circle(B, D, E) we get 2 * angle(D, E, F) == angle(D, center(Circle(B, D, E)), F) mod 360
By angle_to_center on F, D, E, Circle(B, D, E) we get 2 * angle(F, D, E) == angle(F, center(Circle(B, D, E)), E) mod 360
By angle_to_center on E, D, G, Circle(C, D, E) we get 2 * angle(E, D, G) == angle(E, center(Circle(C, D, E)), G) mod 360
By angle_to_center on G, D, C, Circle(C, D, E) we get 2 * angle(G, D, C) == angle(G, center(Circle(C, D, E)), C) mod 360
By angle_to_center on B, F, E, Circle(B, D, E) we get 2 * angle(B, F, E) == angle(B, center(Circle(B, D, E)), E) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(Line(C, D), altitude(B, C, D)), B, orthocenter(B, C, D) we get 180 == 2 * direction(C, line_intersection(Line(C, D), altitude(B, C, D))) - 2 * direction(B, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, D, line_intersection(Line(C, D), altitude(B, C, D)), B we get 180 == 2 * direction(C, D) - 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), B) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(Line(C, D), altitude(B, C, D)), C, D we get 180 == 2 * direction(B, line_intersection(Line(C, D), altitude(B, C, D))) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on B, orthocenter(B, C, D), D, line_intersection(Line(C, D), altitude(B, C, D)) we get 180 == 2 * direction(B, orthocenter(B, C, D)) - 2 * direction(D, line_intersection(Line(C, D), altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(C, D), altitude(B, C, D)), orthocenter(B, C, D), D, C we get 180 == 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), orthocenter(B, C, D)) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), B, line_intersection(Line(C, D), altitude(B, C, D)), C we get 180 == 2 * direction(orthocenter(B, C, D), B) - 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), C) mod 360
By perpendicular_direction_conditions_v0_r on C, D, orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D)) we get 180 == 2 * direction(C, D) - 2 * direction(orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(C, D), altitude(B, C, D)), D, orthocenter(B, C, D), B we get 180 == 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), D) - 2 * direction(orthocenter(B, C, D), B) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), B, C, line_intersection(Line(C, D), altitude(B, C, D)) we get 180 == 2 * direction(orthocenter(B, C, D), B) - 2 * direction(C, line_intersection(Line(C, D), altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on B, orthocenter(B, C, D), C, line_intersection(Line(C, D), altitude(B, C, D)) we get 180 == 2 * direction(B, orthocenter(B, C, D)) - 2 * direction(C, line_intersection(Line(C, D), altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(C, D), altitude(B, C, D)), orthocenter(B, C, D), C, D we get 180 == 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), orthocenter(B, C, D)) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(C, D), altitude(B, C, D)), C, B, orthocenter(B, C, D) we get 180 == 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), C) - 2 * direction(B, orthocenter(B, C, D)) mod 360
By sas_similarity on H, D, F, E, D, B we get similar_triangles(B, D, E, F, D, H)
By perpendicular_direction_conditions_v0_r on line_intersection(Line(C, D), altitude(B, C, D)), D, B, orthocenter(B, C, D) we get 180 == 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), D) - 2 * direction(B, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(C, D), altitude(B, C, D)), C, orthocenter(B, C, D), B we get 180 == 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), C) - 2 * direction(orthocenter(B, C, D), B) mod 360
By perpendicular_direction_conditions_v0_r on D, C, B, line_intersection(Line(C, D), altitude(B, C, D)) we get 180 == 2 * direction(D, C) - 2 * direction(B, line_intersection(Line(C, D), altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on D, C, line_intersection(Line(C, D), altitude(B, C, D)), B we get 180 == 2 * direction(D, C) - 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), B) mod 360
By perpendicular_direction_conditions_v0_r on B, orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D)), D we get 180 == 2 * direction(B, orthocenter(B, C, D)) - 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(C, D), altitude(B, C, D)), B, D, C we get 180 == 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), B) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on B, orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D)), C we get 180 == 2 * direction(B, orthocenter(B, C, D)) - 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), C) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(Line(C, D), altitude(B, C, D)), B, orthocenter(B, C, D) we get 180 == 2 * direction(D, line_intersection(Line(C, D), altitude(B, C, D))) - 2 * direction(B, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D)), D, C we get 180 == 2 * direction(orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D))) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), B, line_intersection(Line(C, D), altitude(B, C, D)), D we get 180 == 2 * direction(orthocenter(B, C, D), B) - 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), B, D, line_intersection(Line(C, D), altitude(B, C, D)) we get 180 == 2 * direction(orthocenter(B, C, D), B) - 2 * direction(D, line_intersection(Line(C, D), altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on C, D, line_intersection(Line(C, D), altitude(B, C, D)), orthocenter(B, C, D) we get 180 == 2 * direction(C, D) - 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, C, line_intersection(Line(C, D), altitude(B, C, D)), orthocenter(B, C, D) we get 180 == 2 * direction(D, C) - 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D)), C, D we get 180 == 2 * direction(orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D))) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(Line(C, D), altitude(B, C, D)), D, C we get 180 == 2 * direction(B, line_intersection(Line(C, D), altitude(B, C, D))) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(Line(C, D), altitude(B, C, D)), orthocenter(B, C, D), B we get 180 == 2 * direction(D, line_intersection(Line(C, D), altitude(B, C, D))) - 2 * direction(orthocenter(B, C, D), B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(C, D), altitude(B, C, D)), B, C, D we get 180 == 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), B) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on D, C, orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D)) we get 180 == 2 * direction(D, C) - 2 * direction(orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D))) mod 360
By reverse_direction on orthocenter(B, C, D), G we get 180 == direction(orthocenter(B, C, D), G) - direction(G, orthocenter(B, C, D)) mod 360
By reverse_direction on E, orthocenter(B, C, D) we get 180 == direction(E, orthocenter(B, C, D)) - direction(orthocenter(B, C, D), E) mod 360
By anti_congruence_from_anti_similar_triangles on B, H, E, B, H, F we get anti_congruent_triangles(B, E, H, B, F, H)
By sas_anti_similarity on H, D, E, H, D, F we get anti_similar_triangles(D, E, H, D, F, H)
By sas_anti_similarity on H, D, F, H, D, E we get anti_similar_triangles(D, E, H, D, F, H)
By parallel_line_angles_reverse_v0 on C, G, E, H we get angle(C, G, E) == angle(H, E, G) mod 360
By sas_anti_similarity on H, D, F, H, E, B we get anti_similar_triangles(B, E, H, F, D, H)
By anti_congruence_from_anti_similar_triangles on G, B, F, G, B, E we get anti_congruent_triangles(B, E, G, B, F, G)
By sas_anti_similarity on G, C, B, H, D, F we get anti_similar_triangles(B, C, G, F, D, H)
By tangent_chord_angle_reverse_v1 on F, D, H, A we get angle(D, F, A) == angle(D, H, F) mod 360
By sas_anti_similarity on F, D, H, B, C, G we get anti_similar_triangles(B, C, G, F, D, H)
By sas_anti_similarity on H, D, F, F, D, B we get anti_similar_triangles(B, D, F, F, D, H)
By external_angle_bisector_definition_v0_r on B, F, B, H we get Line(F, H) == external_angle_bisector(B, H, B)
By reverse_direction on orthocenter(B, C, D), B we get 180 == direction(orthocenter(B, C, D), B) - direction(B, orthocenter(B, C, D)) mod 360
By tangent_chord_angle_reverse_v3 on F, D, H, B we get angle(D, H, F) == angle(D, F, B) + 180 mod 360
By sas_similarity on F, D, H, B, D, E we get similar_triangles(B, D, E, F, D, H)
By anti_congruence_from_anti_similar_triangles on B, H, F, B, H, E we get anti_congruent_triangles(B, E, H, B, F, H)
By tangent_chord_angle_reverse_v2 on F, H, D, A we get angle(H, D, F) == angle(H, F, A) + 180 mod 360
By asa_anti_congruence on B, H, F, B, H, E we get anti_congruent_triangles(B, E, H, B, F, H)
By sas_anti_similarity on H, D, F, G, C, B we get anti_similar_triangles(B, C, G, F, D, H)
By sas_anti_similarity on G, D, F, G, D, E we get anti_similar_triangles(D, E, G, D, F, G)
By sas_anti_similarity on B, E, H, F, D, H we get anti_similar_triangles(B, E, H, F, D, H)
By sas_anti_similarity on F, D, H, B, E, H we get anti_similar_triangles(B, E, H, F, D, H)
By anti_congruence_from_anti_similar_triangles on B, G, E, B, G, F we get anti_congruent_triangles(B, E, G, B, F, G)
By asa_anti_congruence on B, H, E, B, H, F we get anti_congruent_triangles(B, E, H, B, F, H)
By sas_anti_similarity on B, C, G, F, D, H we get anti_similar_triangles(B, C, G, F, D, H)
By asa_anti_congruence on B, G, F, B, G, E we get anti_congruent_triangles(B, E, G, B, F, G)
By sas_anti_similarity on F, D, B, H, D, F we get anti_similar_triangles(B, D, F, F, D, H)
By sas_anti_similarity on G, D, E, G, D, F we get anti_similar_triangles(D, E, G, D, F, G)
By sas_anti_similarity on H, E, B, H, D, F we get anti_similar_triangles(B, E, H, F, D, H)
By sas_similarity on E, D, B, H, D, F we get similar_triangles(B, D, E, F, D, H)
By asa_anti_congruence on G, B, F, G, B, E we get anti_congruent_triangles(B, E, G, B, F, G)
By sas_anti_similarity on F, D, G, E, D, G we get anti_similar_triangles(D, E, G, D, F, G)
By reverse_direction on D, orthocenter(B, C, D) we get 180 == direction(D, orthocenter(B, C, D)) - direction(orthocenter(B, C, D), D) mod 360
By asa_anti_congruence on B, G, E, B, G, F we get anti_congruent_triangles(B, E, G, B, F, G)
By reverse_direction on G, orthocenter(B, C, D) we get 180 == direction(G, orthocenter(B, C, D)) - direction(orthocenter(B, C, D), G) mod 360
By anti_congruence_from_anti_similar_triangles on H, B, E, H, B, F we get anti_congruent_triangles(B, E, H, B, F, H)
By asa_anti_congruence on H, B, F, H, B, E we get anti_congruent_triangles(B, E, H, B, F, H)
By sas_anti_similarity on E, D, H, F, D, H we get anti_similar_triangles(D, E, H, D, F, H)
By asa_anti_congruence on G, B, E, G, B, F we get anti_congruent_triangles(B, E, G, B, F, G)
By sas_anti_similarity on B, D, F, F, D, H we get anti_similar_triangles(B, D, F, F, D, H)
By anti_congruence_from_anti_similar_triangles on H, B, F, H, B, E we get anti_congruent_triangles(B, E, H, B, F, H)
By sas_anti_similarity on F, D, H, B, D, F we get anti_similar_triangles(B, D, F, F, D, H)
By sas_anti_similarity on F, D, H, E, D, H we get anti_similar_triangles(D, E, H, D, F, H)
By anti_congruence_from_anti_similar_triangles on G, B, E, G, B, F we get anti_congruent_triangles(B, E, G, B, F, G)
By asa_anti_congruence on H, B, E, H, B, F we get anti_congruent_triangles(B, E, H, B, F, H)
By sas_similarity on B, D, E, F, D, H we get similar_triangles(B, D, E, F, D, H)
By reverse_direction on orthocenter(B, C, D), E we get 180 == direction(orthocenter(B, C, D), E) - direction(E, orthocenter(B, C, D)) mod 360
By reverse_direction on C, orthocenter(B, C, D) we get 180 == direction(C, orthocenter(B, C, D)) - direction(orthocenter(B, C, D), C) mod 360
By anti_congruence_from_anti_similar_triangles on B, G, F, B, G, E we get anti_congruent_triangles(B, E, G, B, F, G)
By reverse_direction on B, orthocenter(B, C, D) we get 180 == direction(B, orthocenter(B, C, D)) - direction(orthocenter(B, C, D), B) mod 360
By reverse_direction on orthocenter(B, C, D), C we get 180 == direction(orthocenter(B, C, D), C) - direction(C, orthocenter(B, C, D)) mod 360
By sas_anti_similarity on E, D, G, F, D, G we get anti_similar_triangles(D, E, G, D, F, G)
By reverse_direction on orthocenter(B, C, D), D we get 180 == direction(orthocenter(B, C, D), D) - direction(D, orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D)), D, line_intersection(Line(C, D), altitude(B, C, D)) we get 180 == 2 * direction(orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D))) - 2 * direction(D, line_intersection(Line(C, D), altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(C, D), altitude(B, C, D)), D, B, line_intersection(Line(C, D), altitude(B, C, D)) we get 180 == 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), D) - 2 * direction(B, line_intersection(Line(C, D), altitude(B, C, D))) mod 360
By anti_similar_triangle_basic_properties on F, B, D, H, B, F we get angle(F, B, D) == 0 - angle(H, B, F) mod 360, angle(B, D, F) == 0 - angle(B, F, H) mod 360, angle(D, F, B) == 0 - angle(F, H, B) mod 360, log(distance(B, F)) + log(distance(B, F)) == log(distance(B, H)) + log(distance(B, D)), log(distance(B, D)) + log(distance(F, H)) == log(distance(B, F)) + log(distance(D, F)), log(distance(D, F)) + log(distance(B, H)) == log(distance(F, H)) + log(distance(B, F))
By perpendicular_direction_conditions_v0_r on B, line_intersection(Line(C, D), altitude(B, C, D)), line_intersection(Line(C, D), altitude(B, C, D)), C we get 180 == 2 * direction(B, line_intersection(Line(C, D), altitude(B, C, D))) - 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(C, D), altitude(B, C, D)), orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D)), D we get 180 == 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), orthocenter(B, C, D)) - 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), D) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(Line(C, D), altitude(B, C, D)), orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D)) we get 180 == 2 * direction(D, line_intersection(Line(C, D), altitude(B, C, D))) - 2 * direction(orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(C, D), altitude(B, C, D)), C, line_intersection(Line(C, D), altitude(B, C, D)), B we get 180 == 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), C) - 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), B) mod 360
By anti_similar_triangle_basic_properties on F, D, B, H, F, B we get angle(F, D, B) == 0 - angle(H, F, B) mod 360, angle(D, B, F) == 0 - angle(F, B, H) mod 360, angle(B, F, D) == 0 - angle(B, H, F) mod 360, log(distance(D, F)) + log(distance(B, F)) == log(distance(F, H)) + log(distance(B, D)), log(distance(B, D)) + log(distance(B, H)) == log(distance(B, F)) + log(distance(B, F)), log(distance(B, F)) + log(distance(F, H)) == log(distance(B, H)) + log(distance(D, F))
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D)), C, line_intersection(Line(C, D), altitude(B, C, D)) we get 180 == 2 * direction(orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D))) - 2 * direction(C, line_intersection(Line(C, D), altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(Line(C, D), altitude(B, C, D)), B, line_intersection(Line(C, D), altitude(B, C, D)) we get 180 == 2 * direction(C, line_intersection(Line(C, D), altitude(B, C, D))) - 2 * direction(B, line_intersection(Line(C, D), altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(Line(C, D), altitude(B, C, D)), D, line_intersection(Line(C, D), altitude(B, C, D)) we get 180 == 2 * direction(B, line_intersection(Line(C, D), altitude(B, C, D))) - 2 * direction(D, line_intersection(Line(C, D), altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(Line(C, D), altitude(B, C, D)), line_intersection(Line(C, D), altitude(B, C, D)), orthocenter(B, C, D) we get 180 == 2 * direction(D, line_intersection(Line(C, D), altitude(B, C, D))) - 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(C, D), altitude(B, C, D)), B, line_intersection(Line(C, D), altitude(B, C, D)), D we get 180 == 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), B) - 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), D) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(Line(C, D), altitude(B, C, D)), orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D)) we get 180 == 2 * direction(C, line_intersection(Line(C, D), altitude(B, C, D))) - 2 * direction(orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(C, D), altitude(B, C, D)), C, orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D)) we get 180 == 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), C) - 2 * direction(orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(C, D), altitude(B, C, D)), D, orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D)) we get 180 == 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), D) - 2 * direction(orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(C, D), altitude(B, C, D)), B, line_intersection(Line(C, D), altitude(B, C, D)), C we get 180 == 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), B) - 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(C, D), altitude(B, C, D)), B, D, line_intersection(Line(C, D), altitude(B, C, D)) we get 180 == 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), B) - 2 * direction(D, line_intersection(Line(C, D), altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D)), line_intersection(Line(C, D), altitude(B, C, D)), C we get 180 == 2 * direction(orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D))) - 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(C, D), altitude(B, C, D)), orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D)), C we get 180 == 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), orthocenter(B, C, D)) - 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(C, D), altitude(B, C, D)), orthocenter(B, C, D), D, line_intersection(Line(C, D), altitude(B, C, D)) we get 180 == 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), orthocenter(B, C, D)) - 2 * direction(D, line_intersection(Line(C, D), altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(C, D), altitude(B, C, D)), D, line_intersection(Line(C, D), altitude(B, C, D)), orthocenter(B, C, D) we get 180 == 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), D) - 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(C, D), altitude(B, C, D)), C, line_intersection(Line(C, D), altitude(B, C, D)), orthocenter(B, C, D) we get 180 == 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), C) - 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(Line(C, D), altitude(B, C, D)), line_intersection(Line(C, D), altitude(B, C, D)), orthocenter(B, C, D) we get 180 == 2 * direction(C, line_intersection(Line(C, D), altitude(B, C, D))) - 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), orthocenter(B, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(C, D), altitude(B, C, D)), C, B, line_intersection(Line(C, D), altitude(B, C, D)) we get 180 == 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), C) - 2 * direction(B, line_intersection(Line(C, D), altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D)), line_intersection(Line(C, D), altitude(B, C, D)), D we get 180 == 2 * direction(orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D))) - 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(C, D), altitude(B, C, D)), orthocenter(B, C, D), C, line_intersection(Line(C, D), altitude(B, C, D)) we get 180 == 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), orthocenter(B, C, D)) - 2 * direction(C, line_intersection(Line(C, D), altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(Line(C, D), altitude(B, C, D)), C, line_intersection(Line(C, D), altitude(B, C, D)) we get 180 == 2 * direction(B, line_intersection(Line(C, D), altitude(B, C, D))) - 2 * direction(C, line_intersection(Line(C, D), altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(Line(C, D), altitude(B, C, D)), line_intersection(Line(C, D), altitude(B, C, D)), B we get 180 == 2 * direction(C, line_intersection(Line(C, D), altitude(B, C, D))) - 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), B) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(Line(C, D), altitude(B, C, D)), line_intersection(Line(C, D), altitude(B, C, D)), B we get 180 == 2 * direction(D, line_intersection(Line(C, D), altitude(B, C, D))) - 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), B) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(Line(C, D), altitude(B, C, D)), line_intersection(Line(C, D), altitude(B, C, D)), D we get 180 == 2 * direction(B, line_intersection(Line(C, D), altitude(B, C, D))) - 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(C, D), altitude(B, C, D)), B, C, line_intersection(Line(C, D), altitude(B, C, D)) we get 180 == 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), B) - 2 * direction(C, line_intersection(Line(C, D), altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(Line(C, D), altitude(B, C, D)), B, line_intersection(Line(C, D), altitude(B, C, D)) we get 180 == 2 * direction(D, line_intersection(Line(C, D), altitude(B, C, D))) - 2 * direction(B, line_intersection(Line(C, D), altitude(B, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(C, D), altitude(B, C, D)), D, line_intersection(Line(C, D), altitude(B, C, D)), B we get 180 == 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), D) - 2 * direction(line_intersection(Line(C, D), altitude(B, C, D)), B) mod 360
By power_of_a_point_tangent_converse_v1 on D, B, H, F we get tangent(Line(D, F), Circle(B, F, H))
By power_of_a_point_tangent_converse_v0 on D, B, H, E we get tangent(Line(D, E), Circle(B, E, H))
By external_angle_bisector_definition_v0_r on orthocenter(B, C, D), B, orthocenter(B, C, D), G we get Line(B, G) == external_angle_bisector(orthocenter(B, C, D), G, orthocenter(B, C, D))
By collinear_definition on D, line_intersection(Line(C, D), altitude(B, C, D)), C we get line_intersection(Line(C, D), altitude(B, C, D)) in Line(C, D), C in Line(D, line_intersection(Line(C, D), altitude(B, C, D))), Line(C, D) == Line(D, line_intersection(Line(C, D), altitude(B, C, D))), 0 == 2 * angle(line_intersection(Line(C, D), altitude(B, C, D)), D, C) mod 360
By external_angle_bisector_definition_v0_r on orthocenter(B, C, D), B, orthocenter(B, C, D), E we get Line(B, E) == external_angle_bisector(orthocenter(B, C, D), E, orthocenter(B, C, D))
By anti_similar_triangle_basic_properties on B, F, H, B, E, H we get angle(B, F, H) == 0 - angle(B, E, H) mod 360, angle(F, H, B) == 0 - angle(E, H, B) mod 360, angle(H, B, F) == 0 - angle(H, B, E) mod 360, log(distance(B, E)) + log(distance(F, H)) == log(distance(B, F)) + log(distance(E, H)), log(distance(E, H)) + log(distance(B, H)) == log(distance(F, H)) + log(distance(B, H)), log(distance(B, H)) + log(distance(B, E)) == log(distance(B, H)) + log(distance(B, F))
By internal_angle_bisector_definition_v0_r on E, B, I, G we get Line(B, G) == internal_angle_bisector(E, G, I)
By external_angle_bisector_definition_v0_r on F, B, F, H we get Line(B, H) == external_angle_bisector(F, H, F)
By power_of_a_point_in_circle on D, Circle(D, E, H) we get 0 == power_of_a_point(D, Circle(D, E, H))
By external_angle_bisector_definition_v0_r on orthocenter(B, C, D), D, orthocenter(B, C, D), G we get Line(D, G) == external_angle_bisector(orthocenter(B, C, D), G, orthocenter(B, C, D))
By internal_angle_bisector_definition_v0 on A, line_intersection(Line(C, D), altitude(B, C, D)), B, C we get angle(A, C, line_intersection(Line(C, D), altitude(B, C, D))) == angle(line_intersection(Line(C, D), altitude(B, C, D)), C, B) mod 360
By power_of_a_point_in_circle on D, Circle(D, F, H) we get 0 == power_of_a_point(D, Circle(D, F, H))
By power_of_a_point_on_circle on F, Circle(D, F, H) we get 0 == power_of_a_point(F, Circle(D, F, H))
By anti_similar_triangle_basic_properties on E, B, H, F, B, H we get angle(E, B, H) == 0 - angle(F, B, H) mod 360, angle(B, H, E) == 0 - angle(B, H, F) mod 360, angle(H, E, B) == 0 - angle(H, F, B) mod 360, log(distance(B, E)) + log(distance(B, H)) == log(distance(B, F)) + log(distance(B, H)), log(distance(B, H)) + log(distance(E, H)) == log(distance(B, H)) + log(distance(F, H)), log(distance(E, H)) + log(distance(B, F)) == log(distance(F, H)) + log(distance(B, E))
By anti_similar_triangle_basic_properties on B, H, F, B, G, C we get angle(B, H, F) == 0 - angle(B, G, C) mod 360, angle(H, F, B) == 0 - angle(G, C, B) mod 360, angle(F, B, H) == 0 - angle(C, B, G) mod 360, log(distance(B, G)) + log(distance(F, H)) == log(distance(B, H)) + log(distance(C, G)), log(distance(C, G)) + log(distance(B, F)) == log(distance(F, H)) + log(distance(B, C)), log(distance(B, C)) + log(distance(B, H)) == log(distance(B, F)) + log(distance(B, G))
By anti_similar_triangle_basic_properties on E, D, F, F, D, E we get angle(E, D, F) == 0 - angle(F, D, E) mod 360, angle(D, F, E) == 0 - angle(D, E, F) mod 360, angle(F, E, D) == 0 - angle(E, F, D) mod 360, log(distance(D, E)) + log(distance(D, E)) == log(distance(D, F)) + log(distance(D, F)), log(distance(D, E)) + log(distance(E, F)) == log(distance(D, F)) + log(distance(E, F)), log(distance(E, F)) + log(distance(D, E)) == log(distance(E, F)) + log(distance(D, F))
By collinear_definition on C, line_intersection(Line(C, D), altitude(B, C, D)), D we get line_intersection(Line(C, D), altitude(B, C, D)) in Line(C, D), D in Line(C, line_intersection(Line(C, D), altitude(B, C, D))), Line(C, D) == Line(C, line_intersection(Line(C, D), altitude(B, C, D))), 0 == 2 * angle(line_intersection(Line(C, D), altitude(B, C, D)), C, D) mod 360
By anti_similar_triangle_basic_properties on B, H, F, E, H, D we get angle(B, H, F) == 0 - angle(E, H, D) mod 360, angle(H, F, B) == 0 - angle(H, D, E) mod 360, angle(F, B, H) == 0 - angle(D, E, H) mod 360, log(distance(B, H)) + log(distance(D, H)) == log(distance(E, H)) + log(distance(F, H)), log(distance(D, H)) + log(distance(B, F)) == log(distance(F, H)) + log(distance(D, E)), log(distance(B, F)) + log(distance(E, H)) == log(distance(D, E)) + log(distance(B, H))
By external_angle_bisector_definition_v0_r on orthocenter(B, C, D), H, orthocenter(B, C, D), G we get Line(G, H) == external_angle_bisector(orthocenter(B, C, D), G, orthocenter(B, C, D))
By internal_angle_bisector_definition_v0_r on F, B, E, H we get Line(B, H) == internal_angle_bisector(E, H, F)
By external_angle_bisector_definition_v0_r on orthocenter(B, C, D), C, orthocenter(B, C, D), E we get Line(C, E) == external_angle_bisector(orthocenter(B, C, D), E, orthocenter(B, C, D))
By similar_triangle_basic_properties on D, B, E, F, B, H we get angle(D, B, E) == angle(F, B, H) mod 360, angle(B, E, D) == angle(B, H, F) mod 360, angle(E, D, B) == angle(H, F, B) mod 360, log(distance(B, D)) + log(distance(B, H)) == log(distance(B, F)) + log(distance(B, E)), log(distance(B, E)) + log(distance(F, H)) == log(distance(B, H)) + log(distance(D, E)), log(distance(D, E)) + log(distance(B, F)) == log(distance(F, H)) + log(distance(B, D))
By internal_angle_bisector_definition_v0_r on orthocenter(B, C, D), E, orthocenter(B, C, D), D we get Line(D, E) == internal_angle_bisector(orthocenter(B, C, D), D, orthocenter(B, C, D))
By anti_similar_triangle_basic_properties on F, E, B, E, F, B we get angle(F, E, B) == 0 - angle(E, F, B) mod 360, angle(E, B, F) == 0 - angle(F, B, E) mod 360, angle(B, F, E) == 0 - angle(B, E, F) mod 360, log(distance(E, F)) + log(distance(B, E)) == log(distance(E, F)) + log(distance(B, F)), log(distance(B, E)) + log(distance(B, E)) == log(distance(B, F)) + log(distance(B, F)), log(distance(B, E)) + log(distance(E, F)) == log(distance(B, F)) + log(distance(E, F))
By similar_triangle_basic_properties on H, B, F, E, B, D we get angle(E, B, D) == angle(H, B, F) mod 360, angle(B, D, E) == angle(B, F, H) mod 360, angle(D, E, B) == angle(F, H, B) mod 360, log(distance(B, E)) + log(distance(B, F)) == log(distance(B, H)) + log(distance(B, D)), log(distance(B, D)) + log(distance(F, H)) == log(distance(B, F)) + log(distance(D, E)), log(distance(D, E)) + log(distance(B, H)) == log(distance(F, H)) + log(distance(B, E))
By collinear_definition on orthocenter(B, C, D), B, line_intersection(Line(C, D), altitude(B, C, D)) we get B in Line(orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D))), line_intersection(Line(C, D), altitude(B, C, D)) in Line(B, orthocenter(B, C, D)), Line(B, orthocenter(B, C, D)) == Line(orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D))), 0 == 2 * angle(B, orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D))) mod 360
By internal_angle_bisector_definition_v0_r on D, E, D, orthocenter(B, C, D) we get Line(E, orthocenter(B, C, D)) == internal_angle_bisector(D, orthocenter(B, C, D), D)
By internal_angle_bisector_definition_v0_r on F, B, E, G we get Line(B, G) == internal_angle_bisector(E, G, F)
By internal_angle_bisector_definition_v0_r on D, orthocenter(B, C, D), D, E we get internal_angle_bisector(D, E, D) == Line(E, orthocenter(B, C, D))
By power_of_a_point_in_circle on E, Circle(D, E, H) we get 0 == power_of_a_point(E, Circle(D, E, H))
By internal_angle_bisector_definition_v0_r on E, D, E, orthocenter(B, C, D) we get Line(D, orthocenter(B, C, D)) == internal_angle_bisector(E, orthocenter(B, C, D), E)
By internal_angle_bisector_definition_v0_r on C, orthocenter(B, C, D), C, G we get internal_angle_bisector(C, G, C) == Line(G, orthocenter(B, C, D))
By internal_angle_bisector_definition_v0_r on orthocenter(B, C, D), G, orthocenter(B, C, D), C we get Line(C, G) == internal_angle_bisector(orthocenter(B, C, D), C, orthocenter(B, C, D))
By power_of_a_point_in_circle on H, Circle(D, F, H) we get 0 == power_of_a_point(H, Circle(D, F, H))
By power_of_a_point_in_circle on H, Circle(D, E, H) we get 0 == power_of_a_point(H, Circle(D, E, H))
By internal_angle_bisector_definition_v0_r on G, orthocenter(B, C, D), G, C we get internal_angle_bisector(G, C, G) == Line(C, orthocenter(B, C, D))
By collinear_definition on orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D)), B we get line_intersection(Line(C, D), altitude(B, C, D)) in Line(B, orthocenter(B, C, D)), B in Line(orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D))), Line(B, orthocenter(B, C, D)) == Line(orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D))), 0 == 2 * angle(line_intersection(Line(C, D), altitude(B, C, D)), orthocenter(B, C, D), B) mod 360
By internal_angle_bisector_definition_v0_r on I, D, E, G we get Line(D, G) == internal_angle_bisector(E, G, I)
By internal_angle_bisector_definition_v0 on B, line_intersection(Line(C, D), altitude(B, C, D)), A, C we get angle(B, C, line_intersection(Line(C, D), altitude(B, C, D))) == angle(line_intersection(Line(C, D), altitude(B, C, D)), C, A) mod 360
By anti_similar_triangle_basic_properties on C, G, B, F, H, B we get angle(C, G, B) == 0 - angle(F, H, B) mod 360, angle(G, B, C) == 0 - angle(H, B, F) mod 360, angle(B, C, G) == 0 - angle(B, F, H) mod 360, log(distance(C, G)) + log(distance(B, H)) == log(distance(F, H)) + log(distance(B, G)), log(distance(B, G)) + log(distance(B, F)) == log(distance(B, H)) + log(distance(B, C)), log(distance(B, C)) + log(distance(F, H)) == log(distance(B, F)) + log(distance(C, G))
By internal_angle_bisector_definition_v0_r on E, orthocenter(B, C, D), E, D we get internal_angle_bisector(E, D, E) == Line(D, orthocenter(B, C, D))
By internal_angle_bisector_definition_v0_r on orthocenter(B, C, D), D, orthocenter(B, C, D), E we get Line(D, E) == internal_angle_bisector(orthocenter(B, C, D), E, orthocenter(B, C, D))
By collinear_definition on C, D, line_intersection(Line(C, D), altitude(B, C, D)) we get D in Line(C, line_intersection(Line(C, D), altitude(B, C, D))), line_intersection(Line(C, D), altitude(B, C, D)) in Line(C, D), Line(C, D) == Line(C, line_intersection(Line(C, D), altitude(B, C, D))), 0 == 2 * angle(D, C, line_intersection(Line(C, D), altitude(B, C, D))) mod 360
By internal_angle_bisector_definition_v0 on A, line_intersection(Line(C, D), altitude(B, C, D)), E, C we get angle(A, C, line_intersection(Line(C, D), altitude(B, C, D))) == angle(line_intersection(Line(C, D), altitude(B, C, D)), C, E) mod 360
By internal_angle_bisector_definition_v0_r on orthocenter(B, C, D), C, orthocenter(B, C, D), G we get Line(C, G) == internal_angle_bisector(orthocenter(B, C, D), G, orthocenter(B, C, D))
By internal_angle_bisector_definition_v0_r on C, G, C, orthocenter(B, C, D) we get Line(G, orthocenter(B, C, D)) == internal_angle_bisector(C, orthocenter(B, C, D), C)
By collinear_definition on D, C, line_intersection(Line(C, D), altitude(B, C, D)) we get C in Line(D, line_intersection(Line(C, D), altitude(B, C, D))), line_intersection(Line(C, D), altitude(B, C, D)) in Line(C, D), Line(C, D) == Line(D, line_intersection(Line(C, D), altitude(B, C, D))), 0 == 2 * angle(C, D, line_intersection(Line(C, D), altitude(B, C, D))) mod 360
By internal_angle_bisector_definition_v0 on E, line_intersection(Line(C, D), altitude(B, C, D)), A, C we get angle(E, C, line_intersection(Line(C, D), altitude(B, C, D))) == angle(line_intersection(Line(C, D), altitude(B, C, D)), C, A) mod 360
By collinear_definition on B, orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D)) we get orthocenter(B, C, D) in Line(B, line_intersection(Line(C, D), altitude(B, C, D))), line_intersection(Line(C, D), altitude(B, C, D)) in Line(B, orthocenter(B, C, D)), Line(B, orthocenter(B, C, D)) == Line(B, line_intersection(Line(C, D), altitude(B, C, D))), 0 == 2 * angle(orthocenter(B, C, D), B, line_intersection(Line(C, D), altitude(B, C, D))) mod 360
By internal_angle_bisector_definition_v0_r on G, C, G, orthocenter(B, C, D) we get Line(C, orthocenter(B, C, D)) == internal_angle_bisector(G, orthocenter(B, C, D), G)
By collinear_definition on B, line_intersection(Line(C, D), altitude(B, C, D)), orthocenter(B, C, D) we get line_intersection(Line(C, D), altitude(B, C, D)) in Line(B, orthocenter(B, C, D)), orthocenter(B, C, D) in Line(B, line_intersection(Line(C, D), altitude(B, C, D))), Line(B, orthocenter(B, C, D)) == Line(B, line_intersection(Line(C, D), altitude(B, C, D))), 0 == 2 * angle(line_intersection(Line(C, D), altitude(B, C, D)), B, orthocenter(B, C, D)) mod 360
By draw_point_of_tangency on g, Circle(D, E, H) we get exists(line_circle_tangent_point(g, Circle(D, E, H)))
By draw_point_of_tangency on f, Circle(D, F, H) we get exists(line_circle_tangent_point(f, Circle(D, F, H)))
By altitude_definition on orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D)), D, altitude(B, C, D) we get altitude(B, C, D) == altitude(orthocenter(B, C, D), D, line_intersection(Line(C, D), altitude(B, C, D)))
By similar_triangle_basic_properties on F, B, G, D, B, C we get angle(D, B, C) == angle(F, B, G) mod 360, angle(B, C, D) == angle(B, G, F) mod 360, angle(C, D, B) == angle(G, F, B) mod 360, log(distance(B, D)) + log(distance(B, G)) == log(distance(B, F)) + log(distance(B, C)), log(distance(B, C)) + log(distance(F, G)) == log(distance(B, G)) + log(distance(C, D)), log(distance(C, D)) + log(distance(B, F)) == log(distance(F, G)) + log(distance(B, D))
By power_of_a_point_tangent on A, F, Circle(D, F, H) we get 2 * log(distance(A, F)) == log(power_of_a_point(A, Circle(D, F, H)))
By anti_similar_triangle_basic_properties on G, B, E, G, B, F we get angle(G, B, E) == 0 - angle(G, B, F) mod 360, angle(B, E, G) == 0 - angle(B, F, G) mod 360, angle(E, G, B) == 0 - angle(F, G, B) mod 360, log(distance(B, G)) + log(distance(B, E)) == log(distance(B, G)) + log(distance(B, F)), log(distance(B, E)) + log(distance(F, G)) == log(distance(B, F)) + log(distance(E, G)), log(distance(E, G)) + log(distance(B, G)) == log(distance(F, G)) + log(distance(B, G))
By altitude_definition on orthocenter(B, C, D), C, line_intersection(Line(C, D), altitude(B, C, D)), altitude(B, C, D) we get altitude(B, C, D) == altitude(orthocenter(B, C, D), C, line_intersection(Line(C, D), altitude(B, C, D)))
By perpendicular_angle_conditions_v0 on B, line_intersection(Line(C, D), altitude(B, C, D)), C we get angle(B, line_intersection(Line(C, D), altitude(B, C, D)), C) == orientation(B, line_intersection(Line(C, D), altitude(B, C, D)), C) mod 360
By altitude_definition on B, C, line_intersection(Line(C, D), altitude(B, C, D)), altitude(B, C, D) we get altitude(B, C, D) == altitude(B, C, line_intersection(Line(C, D), altitude(B, C, D)))
By power_of_a_point_definition on B, H, D, Circle(D, F, H) we get log(distance(B, H)) + log(distance(B, D)) == log(power_of_a_point(B, Circle(D, F, H)))
By anti_similar_triangle_basic_properties on D, B, C, E, B, G we get angle(D, B, C) == 0 - angle(E, B, G) mod 360, angle(B, C, D) == 0 - angle(B, G, E) mod 360, angle(C, D, B) == 0 - angle(G, E, B) mod 360, log(distance(B, D)) + log(distance(B, G)) == log(distance(B, E)) + log(distance(B, C)), log(distance(B, C)) + log(distance(E, G)) == log(distance(B, G)) + log(distance(C, D)), log(distance(C, D)) + log(distance(B, E)) == log(distance(E, G)) + log(distance(B, D))
By similar_triangle_basic_properties on C, G, D, A, F, D we get angle(A, F, D) == angle(C, G, D) mod 360, angle(F, D, A) == angle(G, D, C) mod 360, angle(D, A, F) == angle(D, C, G) mod 360, log(distance(A, F)) + log(distance(D, G)) == log(distance(C, G)) + log(distance(D, F)), log(distance(D, F)) + log(distance(C, D)) == log(distance(D, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(C, G)) == log(distance(C, D)) + log(distance(A, F))
By altitude_definition on D, line_intersection(Line(C, D), altitude(B, C, D)), B, Line(C, D) we get Line(C, D) == altitude(D, B, line_intersection(Line(C, D), altitude(B, C, D)))
By power_of_a_point_definition on G, D, H, Circle(D, E, H) we get log(distance(D, G)) + log(distance(G, H)) == log(power_of_a_point(G, Circle(D, E, H)))
By similar_triangle_basic_properties on C, B, D, G, B, F we get angle(C, B, D) == angle(G, B, F) mod 360, angle(B, D, C) == angle(B, F, G) mod 360, angle(D, C, B) == angle(F, G, B) mod 360, log(distance(B, C)) + log(distance(B, F)) == log(distance(B, G)) + log(distance(B, D)), log(distance(B, D)) + log(distance(F, G)) == log(distance(B, F)) + log(distance(C, D)), log(distance(C, D)) + log(distance(B, G)) == log(distance(F, G)) + log(distance(B, C))
By anti_similar_triangle_basic_properties on B, E, G, B, D, C we get angle(B, E, G) == 0 - angle(B, D, C) mod 360, angle(E, G, B) == 0 - angle(D, C, B) mod 360, angle(G, B, E) == 0 - angle(C, B, D) mod 360, log(distance(B, D)) + log(distance(E, G)) == log(distance(B, E)) + log(distance(C, D)), log(distance(C, D)) + log(distance(B, G)) == log(distance(E, G)) + log(distance(B, C)), log(distance(B, C)) + log(distance(B, E)) == log(distance(B, G)) + log(distance(B, D))
By altitude_definition on D, orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D)), Line(C, D) we get Line(C, D) == altitude(D, orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D)))
By perpendicular_angle_conditions_v0 on orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D)), C we get angle(orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D)), C) == orientation(C, orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D))) mod 360
By anti_similar_triangle_basic_properties on G, F, B, G, E, B we get angle(G, F, B) == 0 - angle(G, E, B) mod 360, angle(F, B, G) == 0 - angle(E, B, G) mod 360, angle(B, G, F) == 0 - angle(B, G, E) mod 360, log(distance(E, G)) + log(distance(B, F)) == log(distance(F, G)) + log(distance(B, E)), log(distance(B, E)) + log(distance(B, G)) == log(distance(B, F)) + log(distance(B, G)), log(distance(B, G)) + log(distance(E, G)) == log(distance(B, G)) + log(distance(F, G))
By collinear_definition on line_intersection(Line(C, D), altitude(B, C, D)), orthocenter(B, C, D), B we get orthocenter(B, C, D) in Line(B, line_intersection(Line(C, D), altitude(B, C, D))), B in Line(orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D))), Line(B, line_intersection(Line(C, D), altitude(B, C, D))) == Line(orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D))), 0 == 2 * angle(orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D)), B) mod 360
By perpendicular_angle_conditions_v0 on orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D)), D we get angle(orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D)), D) == orientation(D, orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D))) mod 360
By altitude_definition on C, orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D)), Line(C, D) we get Line(C, D) == altitude(C, orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D)))
By similar_triangle_basic_properties on D, F, A, D, G, C we get angle(D, F, A) == angle(D, G, C) mod 360, angle(F, A, D) == angle(G, C, D) mod 360, angle(A, D, F) == angle(C, D, G) mod 360, log(distance(D, F)) + log(distance(C, G)) == log(distance(D, G)) + log(distance(A, F)), log(distance(A, F)) + log(distance(C, D)) == log(distance(C, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(D, G)) == log(distance(C, D)) + log(distance(D, F))
By collinear_definition on line_intersection(Line(C, D), altitude(B, C, D)), C, D we get C in Line(D, line_intersection(Line(C, D), altitude(B, C, D))), D in Line(C, line_intersection(Line(C, D), altitude(B, C, D))), Line(C, line_intersection(Line(C, D), altitude(B, C, D))) == Line(D, line_intersection(Line(C, D), altitude(B, C, D))), 0 == 2 * angle(C, line_intersection(Line(C, D), altitude(B, C, D)), D) mod 360
By altitude_definition on C, line_intersection(Line(C, D), altitude(B, C, D)), B, Line(C, D) we get Line(C, D) == altitude(C, B, line_intersection(Line(C, D), altitude(B, C, D)))
By power_of_a_point_definition on orthocenter(B, C, D), D, E, Circle(D, E, H) we get log(power_of_a_point(orthocenter(B, C, D), Circle(D, E, H))) == log(distance(D, orthocenter(B, C, D))) + log(distance(E, orthocenter(B, C, D)))
By perpendicular_angle_conditions_v0 on C, line_intersection(Line(C, D), altitude(B, C, D)), orthocenter(B, C, D) we get angle(C, line_intersection(Line(C, D), altitude(B, C, D)), orthocenter(B, C, D)) == orientation(C, line_intersection(Line(C, D), altitude(B, C, D)), orthocenter(B, C, D)) mod 360
By perpendicular_angle_conditions_v0 on C, line_intersection(Line(C, D), altitude(B, C, D)), B we get angle(C, line_intersection(Line(C, D), altitude(B, C, D)), B) == orientation(B, C, line_intersection(Line(C, D), altitude(B, C, D))) mod 360
By altitude_definition on B, D, line_intersection(Line(C, D), altitude(B, C, D)), altitude(B, C, D) we get altitude(B, C, D) == altitude(B, D, line_intersection(Line(C, D), altitude(B, C, D)))
By collinear_definition on line_intersection(Line(C, D), altitude(B, C, D)), D, C we get D in Line(C, line_intersection(Line(C, D), altitude(B, C, D))), C in Line(D, line_intersection(Line(C, D), altitude(B, C, D))), Line(C, line_intersection(Line(C, D), altitude(B, C, D))) == Line(D, line_intersection(Line(C, D), altitude(B, C, D))), 0 == 2 * angle(D, line_intersection(Line(C, D), altitude(B, C, D)), C) mod 360
By perpendicular_angle_conditions_v0 on B, line_intersection(Line(C, D), altitude(B, C, D)), D we get angle(B, line_intersection(Line(C, D), altitude(B, C, D)), D) == orientation(B, line_intersection(Line(C, D), altitude(B, C, D)), D) mod 360
By perpendicular_angle_conditions_v0 on D, line_intersection(Line(C, D), altitude(B, C, D)), orthocenter(B, C, D) we get angle(D, line_intersection(Line(C, D), altitude(B, C, D)), orthocenter(B, C, D)) == orientation(D, line_intersection(Line(C, D), altitude(B, C, D)), orthocenter(B, C, D)) mod 360
By collinear_definition on line_intersection(Line(C, D), altitude(B, C, D)), B, orthocenter(B, C, D) we get B in Line(orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D))), orthocenter(B, C, D) in Line(B, line_intersection(Line(C, D), altitude(B, C, D))), Line(B, line_intersection(Line(C, D), altitude(B, C, D))) == Line(orthocenter(B, C, D), line_intersection(Line(C, D), altitude(B, C, D))), 0 == 2 * angle(B, line_intersection(Line(C, D), altitude(B, C, D)), orthocenter(B, C, D)) mod 360
By power_of_a_point_definition on G, D, H, Circle(D, F, H) we get log(distance(D, G)) + log(distance(G, H)) == log(power_of_a_point(G, Circle(D, F, H)))
By power_of_a_point_definition on B, D, H, Circle(D, E, H) we get log(distance(B, D)) + log(distance(B, H)) == log(power_of_a_point(B, Circle(D, E, H)))
By perpendicular_angle_conditions_v0 on D, line_intersection(Line(C, D), altitude(B, C, D)), B we get angle(D, line_intersection(Line(C, D), altitude(B, C, D)), B) == orientation(B, D, line_intersection(Line(C, D), altitude(B, C, D))) mod 360
By power_of_a_point_tangent on B, E, Circle(D, E, H) we get 2 * log(distance(B, E)) == log(power_of_a_point(B, Circle(D, E, H)))
By power_of_a_point_tangent on B, F, Circle(D, F, H) we get 2 * log(distance(B, F)) == log(power_of_a_point(B, Circle(D, F, H)))
By power_of_a_point_tangent on C, E, Circle(D, E, H) we get 2 * log(distance(C, E)) == log(power_of_a_point(C, Circle(D, E, H)))
By anti_similar_triangle_basic_properties on E, C, D, I, G, D we get angle(E, C, D) == 0 - angle(I, G, D) mod 360, angle(C, D, E) == 0 - angle(G, D, I) mod 360, angle(D, E, C) == 0 - angle(D, I, G) mod 360, log(distance(C, E)) + log(distance(D, G)) == log(distance(G, I)) + log(distance(C, D)), log(distance(C, D)) + log(distance(D, I)) == log(distance(D, G)) + log(distance(D, E)), log(distance(D, E)) + log(distance(G, I)) == log(distance(D, I)) + log(distance(C, E))
By anti_similar_triangle_basic_properties on D, G, I, D, C, E we get angle(D, G, I) == 0 - angle(D, C, E) mod 360, angle(G, I, D) == 0 - angle(C, E, D) mod 360, angle(I, D, G) == 0 - angle(E, D, C) mod 360, log(distance(C, D)) + log(distance(G, I)) == log(distance(D, G)) + log(distance(C, E)), log(distance(C, E)) + log(distance(D, I)) == log(distance(G, I)) + log(distance(D, E)), log(distance(D, E)) + log(distance(D, G)) == log(distance(D, I)) + log(distance(C, D))
By anti_similar_triangle_basic_properties on A, D, C, E, D, G we get angle(A, D, C) == 0 - angle(E, D, G) mod 360, angle(D, C, A) == 0 - angle(D, G, E) mod 360, angle(C, A, D) == 0 - angle(G, E, D) mod 360, log(distance(A, D)) + log(distance(D, G)) == log(distance(D, E)) + log(distance(C, D)), log(distance(C, D)) + log(distance(E, G)) == log(distance(D, G)) + log(distance(A, C)), log(distance(A, C)) + log(distance(D, E)) == log(distance(E, G)) + log(distance(A, D))
By anti_similar_triangle_basic_properties on E, G, D, A, C, D we get angle(E, G, D) == 0 - angle(A, C, D) mod 360, angle(G, D, E) == 0 - angle(C, D, A) mod 360, angle(D, E, G) == 0 - angle(D, A, C) mod 360, log(distance(A, C)) + log(distance(D, G)) == log(distance(E, G)) + log(distance(C, D)), log(distance(C, D)) + log(distance(D, E)) == log(distance(D, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(E, G)) == log(distance(D, E)) + log(distance(A, C))
By power_of_a_point_definition on line_intersection(Line(C, D), altitude(B, C, D)), D, C, Circle(C, D, E) we get log(power_of_a_point(line_intersection(Line(C, D), altitude(B, C, D)), Circle(C, D, E))) == log(distance(D, line_intersection(Line(C, D), altitude(B, C, D)))) + log(distance(C, line_intersection(Line(C, D), altitude(B, C, D))))
By line_intersection_definition on orthocenter(C, D, orthocenter(B, C, D)), altitude(B, C, D), i we get line_intersection(i, altitude(B, C, D)) == orthocenter(C, D, orthocenter(B, C, D))
By concurrent_sufficient_conditions on f, Line(D, F), Line(F, G) we get concurrent(f, Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on f, Line(F, G), Line(E, H) we get concurrent(f, Line(E, H), Line(F, G))
By line_intersection_definition on orthocenter(C, D, orthocenter(B, C, D)), i, g we get line_intersection(g, i) == orthocenter(C, D, orthocenter(B, C, D))
By line_definition on orthocenter(C, D, orthocenter(B, C, D)), C, g we get g == Line(C, orthocenter(C, D, orthocenter(B, C, D)))
By tangent_definition_from_perpendicularity_v0 on E, g, Circle(D, E, H) we get perpendicular(g, Line(E, center(Circle(D, E, H))))
By concurrent_sufficient_conditions on i, Line(F, G), Line(E, G) we get concurrent(i, Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on i, Line(C, G), Line(F, G) we get concurrent(i, Line(C, G), Line(F, G))
By line_definition on orthocenter(C, D, orthocenter(B, C, D)), orthocenter(B, D, orthocenter(B, C, D)), g we get g == Line(orthocenter(B, D, orthocenter(B, C, D)), orthocenter(C, D, orthocenter(B, C, D)))
By concurrent_sufficient_conditions on i, Line(F, G), Line(C, G) we get concurrent(i, Line(C, G), Line(F, G))
By concurrent_sufficient_conditions on Line(E, G), g, Line(E, H) we get concurrent(g, Line(E, G), Line(E, H))
By line_definition on orthocenter(B, C, orthocenter(B, C, D)), projection(B, Line(C, D)), Line(C, D) we get Line(C, D) == Line(projection(B, Line(C, D)), orthocenter(B, C, orthocenter(B, C, D)))
By line_definition on orthocenter(B, D, orthocenter(B, C, D)), orthocenter(B, C, orthocenter(B, C, D)), Line(C, D) we get Line(C, D) == Line(orthocenter(B, C, orthocenter(B, C, D)), orthocenter(B, D, orthocenter(B, C, D)))
By concurrent_sufficient_conditions on Line(E, F), Line(E, G), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, G))
By line_definition on line_circle_tangent_point(f, Circle(D, F, H)), A, f we get f == Line(A, line_circle_tangent_point(f, Circle(D, F, H)))
By concurrent_sufficient_conditions on Line(E, G), Line(E, F), g we get concurrent(g, Line(E, F), Line(E, G))
By line_intersection_definition on orthocenter(B, D, orthocenter(B, C, D)), g, Line(C, D) we get line_intersection(g, Line(C, D)) == orthocenter(B, D, orthocenter(B, C, D))
By concurrent_sufficient_conditions on Line(E, H), Line(D, F), f we get concurrent(f, Line(D, F), Line(E, H))
By concurrent_sufficient_conditions on Line(E, G), Line(C, G), i we get concurrent(i, Line(C, G), Line(E, G))
By concurrent_sufficient_conditions on Line(E, G), Line(E, H), g we get concurrent(g, Line(E, G), Line(E, H))
By line_definition on orthocenter(C, D, orthocenter(B, C, D)), E, g we get g == Line(E, orthocenter(C, D, orthocenter(B, C, D)))
By concurrent_sufficient_conditions on Line(F, G), Line(E, H), f we get concurrent(f, Line(E, H), Line(F, G))
By concurrent_sufficient_conditions on Line(F, G), f, Line(D, F) we get concurrent(f, Line(D, F), Line(F, G))
By line_definition on orthocenter(B, D, orthocenter(B, C, D)), orthocenter(B, C, D), Line(C, G) we get Line(C, G) == Line(orthocenter(B, C, D), orthocenter(B, D, orthocenter(B, C, D)))
By line_intersection_definition on orthocenter(B, C, orthocenter(B, C, D)), Line(D, E), Line(C, D) we get orthocenter(B, C, orthocenter(B, C, D)) == line_intersection(Line(C, D), Line(D, E))
By concurrent_sufficient_conditions on g, Line(D, E), Line(E, G) we get concurrent(g, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), Line(F, G) we get concurrent(Line(D, F), Line(E, F), Line(F, G))
By line_definition on E, orthocenter(B, C, orthocenter(B, C, D)), Line(D, E) we get Line(D, E) == Line(E, orthocenter(B, C, orthocenter(B, C, D)))
By line_definition on G, orthocenter(C, D, orthocenter(B, C, D)), i we get i == Line(G, orthocenter(C, D, orthocenter(B, C, D)))
By concurrent_sufficient_conditions on g, Line(E, H), Line(E, G) we get concurrent(g, Line(E, G), Line(E, H))
By line_definition on C, orthocenter(B, C, orthocenter(B, C, D)), Line(C, D) we get Line(C, D) == Line(C, orthocenter(B, C, orthocenter(B, C, D)))
By concurrent_sufficient_conditions on Line(F, G), f, Line(E, F) we get concurrent(f, Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(E, H), Line(F, G), Line(D, F) we get concurrent(Line(D, F), Line(E, H), Line(F, G))
By line_definition on B, line_circle_tangent_point(f, Circle(D, F, H)), f we get f == Line(B, line_circle_tangent_point(f, Circle(D, F, H)))
By concurrent_sufficient_conditions on g, Line(E, G), Line(E, H) we get concurrent(g, Line(E, G), Line(E, H))
By line_definition on orthocenter(B, C, orthocenter(B, C, D)), B, i we get i == Line(B, orthocenter(B, C, orthocenter(B, C, D)))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), f we get concurrent(f, Line(D, F), Line(E, F))
By line_intersection_definition on orthocenter(B, C, orthocenter(B, C, D)), i, Line(C, D) we get line_intersection(i, Line(C, D)) == orthocenter(B, C, orthocenter(B, C, D))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), Line(E, G) we get concurrent(Line(D, E), Line(E, F), Line(E, G))
By line_definition on orthocenter(B, C, D), orthocenter(B, C, orthocenter(B, C, D)), Line(D, E) we get Line(D, E) == Line(orthocenter(B, C, D), orthocenter(B, C, orthocenter(B, C, D)))
By concurrent_sufficient_conditions on Line(F, G), Line(D, F), f we get concurrent(f, Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on Line(C, G), Line(F, G), i we get concurrent(i, Line(C, G), Line(F, G))
By concurrent_sufficient_conditions on Line(E, G), Line(G, I), i we get concurrent(i, Line(E, G), Line(G, I))
By concurrent_sufficient_conditions on Line(D, F), Line(E, H), f we get concurrent(f, Line(D, F), Line(E, H))
By concurrent_sufficient_conditions on Line(C, G), i, Line(E, G) we get concurrent(i, Line(C, G), Line(E, G))
By concurrent_sufficient_conditions on Line(E, G), Line(F, G), i we get concurrent(i, Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on Line(E, G), Line(G, I), Line(C, G) we get concurrent(Line(C, G), Line(E, G), Line(G, I))
By line_definition on projection(B, Line(C, D)), orthocenter(C, D, orthocenter(B, C, D)), altitude(B, C, D) we get altitude(B, C, D) == Line(projection(B, Line(C, D)), orthocenter(C, D, orthocenter(B, C, D)))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), Line(F, G) we get concurrent(Line(D, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(D, E), g, Line(E, G) we get concurrent(g, Line(D, E), Line(E, G))
By line_intersection_definition on orthocenter(B, C, orthocenter(B, C, D)), i, Line(D, E) we get line_intersection(i, Line(D, E)) == orthocenter(B, C, orthocenter(B, C, D))
By line_definition on line_circle_tangent_point(g, Circle(D, E, H)), orthocenter(C, D, orthocenter(B, C, D)), g we get g == Line(orthocenter(C, D, orthocenter(B, C, D)), line_circle_tangent_point(g, Circle(D, E, H)))
By concurrent_sufficient_conditions on i, Line(E, G), Line(F, G) we get concurrent(i, Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on g, Line(E, F), Line(E, G) we get concurrent(g, Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), g we get concurrent(g, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(E, F), f, Line(F, G) we get concurrent(f, Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(E, F), Line(F, G), f we get concurrent(f, Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on f, Line(E, F), Line(F, G) we get concurrent(f, Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(E, H), f, Line(F, G) we get concurrent(f, Line(E, H), Line(F, G))
By line_definition on orthocenter(B, D, orthocenter(B, C, D)), G, Line(C, G) we get Line(C, G) == Line(G, orthocenter(B, D, orthocenter(B, C, D)))
By line_definition on orthocenter(B, C, orthocenter(B, C, D)), G, i we get i == Line(G, orthocenter(B, C, orthocenter(B, C, D)))
By concurrent_sufficient_conditions on Line(G, I), Line(E, G), i we get concurrent(i, Line(E, G), Line(G, I))
By concurrent_sufficient_conditions on Line(E, H), Line(D, F), Line(F, G) we get concurrent(Line(D, F), Line(E, H), Line(F, G))
By concurrent_sufficient_conditions on Line(E, H), Line(E, G), Line(D, E) we get concurrent(Line(D, E), Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(F, G), Line(E, H), Line(D, F) we get concurrent(Line(D, F), Line(E, H), Line(F, G))
By line_intersection_definition on orthocenter(C, D, orthocenter(B, C, D)), g, altitude(B, C, D) we get line_intersection(g, altitude(B, C, D)) == orthocenter(C, D, orthocenter(B, C, D))
By concurrent_sufficient_conditions on f, Line(F, G), Line(D, F) we get concurrent(f, Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on Line(E, H), Line(F, G), f we get concurrent(f, Line(E, H), Line(F, G))
By line_definition on E, orthocenter(B, D, orthocenter(B, C, D)), g we get g == Line(E, orthocenter(B, D, orthocenter(B, C, D)))
By line_definition on F, E, Line(E, H) we get Line(E, F) == Line(E, H)
By line_definition on H, orthocenter(C, D, orthocenter(B, C, D)), i we get i == Line(H, orthocenter(C, D, orthocenter(B, C, D)))
By concurrent_sufficient_conditions on f, Line(E, H), Line(F, G) we get concurrent(f, Line(E, H), Line(F, G))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), f we get concurrent(f, Line(D, F), Line(E, F))
By line_definition on D, orthocenter(C, D, orthocenter(B, C, D)), i we get i == Line(D, orthocenter(C, D, orthocenter(B, C, D)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, G), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(E, G), Line(E, H), Line(D, E) we get concurrent(Line(D, E), Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on f, Line(E, H), Line(D, F) we get concurrent(f, Line(D, F), Line(E, H))
By line_definition on orthocenter(B, D, orthocenter(B, C, D)), D, Line(C, D) we get Line(C, D) == Line(D, orthocenter(B, D, orthocenter(B, C, D)))
By concurrent_sufficient_conditions on Line(E, G), g, Line(D, E) we get concurrent(g, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(C, G), i, Line(F, G) we get concurrent(i, Line(C, G), Line(F, G))
By concurrent_sufficient_conditions on Line(D, F), Line(F, G), f we get concurrent(f, Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on Line(E, G), Line(E, F), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(F, G), Line(D, F), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, G))
By line_definition on orthocenter(B, C, orthocenter(B, C, D)), H, i we get i == Line(H, orthocenter(B, C, orthocenter(B, C, D)))
By line_definition on orthocenter(B, D, orthocenter(B, C, D)), B, g we get g == Line(B, orthocenter(B, D, orthocenter(B, C, D)))
By concurrent_sufficient_conditions on Line(F, G), f, Line(E, H) we get concurrent(f, Line(E, H), Line(F, G))
By concurrent_sufficient_conditions on f, Line(D, F), Line(E, H) we get concurrent(f, Line(D, F), Line(E, H))
By concurrent_sufficient_conditions on Line(F, G), Line(C, G), Line(E, G) we get concurrent(Line(C, G), Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on f, Line(E, F), Line(D, F) we get concurrent(f, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(D, F), Line(F, G), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(D, F), f, Line(E, H) we get concurrent(f, Line(D, F), Line(E, H))
By concurrent_sufficient_conditions on Line(E, G), Line(D, E), g we get concurrent(g, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(E, F), Line(E, G), g we get concurrent(g, Line(E, F), Line(E, G))
By perpendicular_line_definition on G, Line(F, G), h we get Line(F, G) == perpendicular_line(G, h)
By line_definition on orthocenter(B, D, orthocenter(B, C, D)), projection(B, Line(C, D)), Line(C, D) we get Line(C, D) == Line(projection(B, Line(C, D)), orthocenter(B, D, orthocenter(B, C, D)))
By concurrent_sufficient_conditions on Line(F, G), i, Line(E, G) we get concurrent(i, Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on g, Line(E, F), Line(D, E) we get concurrent(g, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(G, I), Line(C, G), Line(E, G) we get concurrent(Line(C, G), Line(E, G), Line(G, I))
By concurrent_sufficient_conditions on Line(E, G), i, Line(G, I) we get concurrent(i, Line(E, G), Line(G, I))
By perpendicular_line_definition on E, Line(E, F), i we get Line(E, F) == perpendicular_line(E, i)
By concurrent_sufficient_conditions on Line(F, G), Line(E, G), i we get concurrent(i, Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on Line(F, G), Line(E, G), Line(C, G) we get concurrent(Line(C, G), Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on f, Line(D, F), Line(E, F) we get concurrent(f, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(E, G), Line(D, E), Line(E, H) we get concurrent(Line(D, E), Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), g we get concurrent(g, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(E, F), g, Line(E, G) we get concurrent(g, Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on g, Line(D, E), Line(E, F) we get concurrent(g, Line(D, E), Line(E, F))
By line_definition on orthocenter(B, D, orthocenter(B, C, D)), line_circle_tangent_point(g, Circle(D, E, H)), g we get g == Line(orthocenter(B, D, orthocenter(B, C, D)), line_circle_tangent_point(g, Circle(D, E, H)))
By concurrent_sufficient_conditions on Line(D, E), Line(E, G), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, G))
By line_definition on orthocenter(C, D, orthocenter(B, C, D)), orthocenter(B, C, D), altitude(B, C, D) we get altitude(B, C, D) == Line(orthocenter(B, C, D), orthocenter(C, D, orthocenter(B, C, D)))
By concurrent_sufficient_conditions on Line(E, G), Line(D, E), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, G))
By line_definition on line_circle_tangent_point(g, Circle(D, E, H)), B, g we get g == Line(B, line_circle_tangent_point(g, Circle(D, E, H)))
By concurrent_sufficient_conditions on i, Line(C, G), Line(E, G) we get concurrent(i, Line(C, G), Line(E, G))
By concurrent_sufficient_conditions on Line(C, G), Line(E, G), Line(G, I) we get concurrent(Line(C, G), Line(E, G), Line(G, I))
By concurrent_sufficient_conditions on Line(E, H), f, Line(D, F) we get concurrent(f, Line(D, F), Line(E, H))
By concurrent_sufficient_conditions on Line(F, G), Line(C, G), i we get concurrent(i, Line(C, G), Line(F, G))
By concurrent_sufficient_conditions on i, Line(G, I), Line(E, G) we get concurrent(i, Line(E, G), Line(G, I))
By concurrent_sufficient_conditions on Line(D, F), Line(E, H), Line(F, G) we get concurrent(Line(D, F), Line(E, H), Line(F, G))
By concurrent_sufficient_conditions on Line(D, F), f, Line(E, F) we get concurrent(f, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(D, E), g, Line(E, F) we get concurrent(g, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(E, F), f, Line(D, F) we get concurrent(f, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(F, G), Line(E, F), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(E, H), Line(E, G), g we get concurrent(g, Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(D, E), Line(E, H), Line(E, G) we get concurrent(Line(D, E), Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(E, G), i, Line(F, G) we get concurrent(i, Line(E, G), Line(F, G))
By line_intersection_definition on orthocenter(B, D, orthocenter(B, C, D)), g, Line(C, G) we get line_intersection(g, Line(C, G)) == orthocenter(B, D, orthocenter(B, C, D))
By line_definition on line_circle_tangent_point(g, Circle(D, E, H)), C, g we get g == Line(C, line_circle_tangent_point(g, Circle(D, E, H)))
By line_intersection_definition on orthocenter(B, D, orthocenter(B, C, D)), Line(C, D), Line(C, G) we get orthocenter(B, D, orthocenter(B, C, D)) == line_intersection(Line(C, D), Line(C, G))
By concurrent_sufficient_conditions on Line(C, G), Line(F, G), Line(E, G) we get concurrent(Line(C, G), Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on Line(E, G), Line(F, G), Line(C, G) we get concurrent(Line(C, G), Line(E, G), Line(F, G))
By tangent_definition_from_perpendicularity_v0 on line_circle_tangent_point(f, Circle(D, F, H)), f, Circle(D, F, H) we get perpendicular(f, Line(center(Circle(D, F, H)), line_circle_tangent_point(f, Circle(D, F, H))))
By concurrent_sufficient_conditions on Line(G, I), Line(E, G), Line(C, G) we get concurrent(Line(C, G), Line(E, G), Line(G, I))
By concurrent_sufficient_conditions on Line(D, E), Line(E, G), Line(E, H) we get concurrent(Line(D, E), Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(C, G), Line(E, G), i we get concurrent(i, Line(C, G), Line(E, G))
By concurrent_sufficient_conditions on Line(F, G), Line(D, F), Line(E, H) we get concurrent(Line(D, F), Line(E, H), Line(F, G))
By concurrent_sufficient_conditions on Line(D, F), Line(F, G), Line(E, H) we get concurrent(Line(D, F), Line(E, H), Line(F, G))
By concurrent_sufficient_conditions on Line(E, F), g, Line(D, E) we get concurrent(g, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(E, G), i, Line(C, G) we get concurrent(i, Line(C, G), Line(E, G))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), Line(E, G) we get concurrent(Line(D, E), Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(E, G), Line(C, G), Line(F, G) we get concurrent(Line(C, G), Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on Line(C, G), Line(E, G), Line(F, G) we get concurrent(Line(C, G), Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on Line(E, H), Line(D, E), Line(E, G) we get concurrent(Line(D, E), Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on i, Line(E, G), Line(C, G) we get concurrent(i, Line(C, G), Line(E, G))
By concurrent_sufficient_conditions on Line(G, I), i, Line(E, G) we get concurrent(i, Line(E, G), Line(G, I))
By concurrent_sufficient_conditions on Line(D, F), f, Line(F, G) we get concurrent(f, Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on Line(D, E), Line(E, G), g we get concurrent(g, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on g, Line(E, G), Line(E, F) we get concurrent(g, Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(F, G), Line(E, F), f we get concurrent(f, Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on g, Line(E, G), Line(D, E) we get concurrent(g, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(E, H), g, Line(E, G) we get concurrent(g, Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(F, G), i, Line(C, G) we get concurrent(i, Line(C, G), Line(F, G))
By concurrent_sufficient_conditions on Line(E, G), Line(C, G), Line(G, I) we get concurrent(Line(C, G), Line(E, G), Line(G, I))
By concurrent_sufficient_conditions on Line(E, G), g, Line(E, F) we get concurrent(g, Line(E, F), Line(E, G))
By line_definition on orthocenter(C, D, orthocenter(B, C, D)), orthocenter(B, C, orthocenter(B, C, D)), i we get i == Line(orthocenter(B, C, orthocenter(B, C, D)), orthocenter(C, D, orthocenter(B, C, D)))
By concurrent_sufficient_conditions on f, Line(F, G), Line(E, F) we get concurrent(f, Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(C, G), Line(G, I), Line(E, G) we get concurrent(Line(C, G), Line(E, G), Line(G, I))
By concurrent_sufficient_conditions on i, Line(E, G), Line(G, I) we get concurrent(i, Line(E, G), Line(G, I))
By tangent_definition_from_perpendicularity_v0 on line_circle_tangent_point(g, Circle(D, E, H)), g, Circle(D, E, H) we get perpendicular(g, Line(center(Circle(D, E, H)), line_circle_tangent_point(g, Circle(D, E, H))))
By tangent_definition_from_perpendicularity_v0 on F, f, Circle(D, F, H) we get perpendicular(f, Line(F, center(Circle(D, F, H))))
By perpendicular_line_definition on G, i, Line(E, F) we get i == perpendicular_line(G, Line(E, F))
By line_intersection_definition on D, Line(D, E), Line(D, center(Circle(B, D, E))) we get D == line_intersection(Line(D, E), Line(D, center(Circle(B, D, E))))
By radical_axis_of_intersecting_circles_v0 on E, B, Circle(B, D, E), Circle(B, E, H) we get Line(B, E) == radical_axis(Circle(B, D, E), Circle(B, E, H))
By radical_axis_of_intersecting_circles_v0 on H, F, Circle(B, F, H), Circle(D, F, H) we get Line(F, H) == radical_axis(Circle(B, F, H), Circle(D, F, H))
By line_intersection_definition on G, Line(C, G), Line(G, center(Circle(C, D, E))) we get G == line_intersection(Line(C, G), Line(G, center(Circle(C, D, E))))
By perpendicular_line_definition on orthocenter(C, D, orthocenter(B, C, D)), altitude(B, C, D), Line(C, D) we get altitude(B, C, D) == perpendicular_line(orthocenter(C, D, orthocenter(B, C, D)), Line(C, D))
By line_intersection_definition on B, altitude(B, C, D), Line(B, center(Circle(B, D, E))) we get B == line_intersection(altitude(B, C, D), Line(B, center(Circle(B, D, E))))
By line_intersection_definition on D, Line(D, center(Circle(B, D, E))), Line(D, F) we get D == line_intersection(Line(D, F), Line(D, center(Circle(B, D, E))))
By radical_axis_of_intersecting_circles_v0 on E, H, Circle(D, E, H), Circle(B, E, H) we get Line(E, H) == radical_axis(Circle(B, E, H), Circle(D, E, H))
By line_intersection_definition on center(Circle(C, D, E)), Line(G, center(Circle(C, D, E))), Line(C, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(C, center(Circle(C, D, E))), Line(G, center(Circle(C, D, E))))
By line_intersection_definition on E, Line(E, center(Circle(B, D, E))), Line(E, H) we get E == line_intersection(Line(E, H), Line(E, center(Circle(B, D, E))))
By line_unique_intersection on g, Line(C, G), orthocenter(B, D, orthocenter(B, C, D)), C we get C == orthocenter(B, D, orthocenter(B, C, D))
By circle_definition on D, line_circle_tangent_point(f, Circle(D, F, H)), H, Circle(D, F, H) we get Circle(D, F, H) == Circle(D, H, line_circle_tangent_point(f, Circle(D, F, H)))
By line_intersection_definition on E, Line(E, center(Circle(C, D, E))), Line(E, G) we get E == line_intersection(Line(E, G), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on B, f, Line(B, center(Circle(B, D, E))) we get B == line_intersection(f, Line(B, center(Circle(B, D, E))))
By line_intersection_definition on D, Line(D, center(Circle(C, D, E))), i we get D == line_intersection(i, Line(D, center(Circle(C, D, E))))
By line_intersection_definition on center(Circle(C, D, E)), Line(G, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(E, center(Circle(C, D, E))), Line(G, center(Circle(C, D, E))))
By circle_definition on H, line_circle_tangent_point(g, Circle(D, E, H)), D, Circle(D, E, H) we get Circle(D, E, H) == Circle(D, H, line_circle_tangent_point(g, Circle(D, E, H)))
By line_intersection_definition on D, Line(D, E), Line(D, center(Circle(C, D, E))) we get D == line_intersection(Line(D, E), Line(D, center(Circle(C, D, E))))
By perpendicular_line_definition on H, i, Line(E, F) we get i == perpendicular_line(H, Line(E, F))
By line_intersection_definition on D, Line(D, F), Line(D, center(Circle(C, D, E))) we get D == line_intersection(Line(D, F), Line(D, center(Circle(C, D, E))))
By line_intersection_definition on E, Line(E, center(Circle(C, D, E))), Line(E, F) we get E == line_intersection(Line(E, F), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on G, Line(G, center(Circle(C, D, E))), Line(G, I) we get G == line_intersection(Line(G, I), Line(G, center(Circle(C, D, E))))
By line_intersection_definition on F, Line(F, center(Circle(B, D, E))), Line(D, F) we get F == line_intersection(Line(D, F), Line(F, center(Circle(B, D, E))))
By perpendicular_line_definition on F, Line(F, G), h we get Line(F, G) == perpendicular_line(F, h)
By radical_axis_of_intersecting_circles_v0 on B, F, Circle(B, D, E), Circle(B, F, H) we get Line(B, F) == radical_axis(Circle(B, D, E), Circle(B, F, H))
By line_intersection_definition on D, Line(D, center(Circle(B, D, E))), Line(C, D) we get D == line_intersection(Line(C, D), Line(D, center(Circle(B, D, E))))
By line_intersection_definition on center(Circle(B, D, E)), Line(E, center(Circle(B, D, E))), Line(F, center(Circle(B, D, E))) we get center(Circle(B, D, E)) == line_intersection(Line(E, center(Circle(B, D, E))), Line(F, center(Circle(B, D, E))))
By perpendicular_line_definition on B, i, Line(E, F) we get i == perpendicular_line(B, Line(E, F))
By perpendicular_line_definition on orthocenter(C, D, orthocenter(B, C, D)), i, Line(E, H) we get i == perpendicular_line(orthocenter(C, D, orthocenter(B, C, D)), Line(E, H))
By perpendicular_line_definition on orthocenter(B, C, orthocenter(B, C, D)), i, Line(E, H) we get i == perpendicular_line(orthocenter(B, C, orthocenter(B, C, D)), Line(E, H))
By line_intersection_definition on F, Line(E, F), Line(F, center(Circle(B, D, E))) we get F == line_intersection(Line(E, F), Line(F, center(Circle(B, D, E))))
By line_intersection_definition on E, Line(E, center(Circle(C, D, E))), Line(E, H) we get E == line_intersection(Line(E, H), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on C, Line(C, G), Line(C, center(Circle(C, D, E))) we get C == line_intersection(Line(C, G), Line(C, center(Circle(C, D, E))))
By line_intersection_definition on E, Line(E, center(Circle(B, D, E))), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, center(Circle(B, D, E))))
By line_intersection_definition on center(Circle(C, D, E)), Line(E, center(Circle(C, D, E))), Line(C, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(C, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on F, Line(F, G), Line(F, center(Circle(B, D, E))) we get F == line_intersection(Line(F, G), Line(F, center(Circle(B, D, E))))
By line_intersection_definition on E, g, Line(E, center(Circle(C, D, E))) we get E == line_intersection(g, Line(E, center(Circle(C, D, E))))
By line_intersection_definition on center(Circle(B, D, E)), Line(F, center(Circle(B, D, E))), Line(B, center(Circle(B, D, E))) we get center(Circle(B, D, E)) == line_intersection(Line(B, center(Circle(B, D, E))), Line(F, center(Circle(B, D, E))))
By line_intersection_definition on center(Circle(B, D, E)), Line(E, center(Circle(B, D, E))), Line(D, center(Circle(B, D, E))) we get center(Circle(B, D, E)) == line_intersection(Line(D, center(Circle(B, D, E))), Line(E, center(Circle(B, D, E))))
By line_intersection_definition on G, i, Line(G, center(Circle(C, D, E))) we get G == line_intersection(i, Line(G, center(Circle(C, D, E))))
By perpendicular_line_definition on orthocenter(B, C, orthocenter(B, C, D)), Line(D, E), g we get Line(D, E) == perpendicular_line(orthocenter(B, C, orthocenter(B, C, D)), g)
By line_intersection_definition on E, Line(E, G), Line(E, center(Circle(B, D, E))) we get E == line_intersection(Line(E, G), Line(E, center(Circle(B, D, E))))
By line_intersection_definition on center(Circle(C, D, E)), Line(G, center(Circle(C, D, E))), Line(D, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(D, center(Circle(C, D, E))), Line(G, center(Circle(C, D, E))))
By perpendicular_line_definition on I, h, Line(F, G) we get h == perpendicular_line(I, Line(F, G))
By perpendicular_line_definition on orthocenter(B, C, orthocenter(B, C, D)), i, Line(C, G) we get i == perpendicular_line(orthocenter(B, C, orthocenter(B, C, D)), Line(C, G))
By line_intersection_definition on F, Line(F, center(Circle(B, D, E))), Line(E, H) we get F == line_intersection(Line(E, H), Line(F, center(Circle(B, D, E))))
By perpendicular_line_definition on orthocenter(B, D, orthocenter(B, C, D)), Line(C, D), altitude(B, C, D) we get Line(C, D) == perpendicular_line(orthocenter(B, D, orthocenter(B, C, D)), altitude(B, C, D))
By line_intersection_definition on C, g, Line(C, center(Circle(C, D, E))) we get C == line_intersection(g, Line(C, center(Circle(C, D, E))))
By line_intersection_definition on D, Line(D, center(Circle(B, D, E))), Line(D, center(Circle(C, D, E))) we get D == line_intersection(Line(D, center(Circle(B, D, E))), Line(D, center(Circle(C, D, E))))
By line_intersection_definition on center(Circle(B, D, E)), Line(D, center(Circle(B, D, E))), Line(F, center(Circle(B, D, E))) we get center(Circle(B, D, E)) == line_intersection(Line(D, center(Circle(B, D, E))), Line(F, center(Circle(B, D, E))))
By line_intersection_definition on D, h, Line(D, center(Circle(B, D, E))) we get D == line_intersection(h, Line(D, center(Circle(B, D, E))))
By line_intersection_definition on E, Line(E, center(Circle(B, D, E))), g we get E == line_intersection(g, Line(E, center(Circle(B, D, E))))
By line_intersection_definition on C, Line(C, center(Circle(C, D, E))), Line(A, C) we get C == line_intersection(Line(A, C), Line(C, center(Circle(C, D, E))))
By line_intersection_definition on B, g, Line(B, center(Circle(B, D, E))) we get B == line_intersection(g, Line(B, center(Circle(B, D, E))))
By perpendicular_line_definition on orthocenter(B, D, orthocenter(B, C, D)), Line(C, G), i we get Line(C, G) == perpendicular_line(orthocenter(B, D, orthocenter(B, C, D)), i)
By line_intersection_definition on G, Line(E, G), Line(G, center(Circle(C, D, E))) we get G == line_intersection(Line(E, G), Line(G, center(Circle(C, D, E))))
By perpendicular_line_definition on orthocenter(B, C, orthocenter(B, C, D)), Line(C, D), altitude(B, C, D) we get Line(C, D) == perpendicular_line(orthocenter(B, C, orthocenter(B, C, D)), altitude(B, C, D))
By radical_axis_of_intersecting_circles_v0 on B, H, Circle(B, E, H), Circle(B, F, H) we get Line(B, H) == radical_axis(Circle(B, E, H), Circle(B, F, H))
By line_intersection_definition on E, Line(E, center(Circle(C, D, E))), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, center(Circle(C, D, E))))
By line_unique_intersection on Line(D, E), i, orthocenter(B, C, orthocenter(B, C, D)), D we get D == orthocenter(B, C, orthocenter(B, C, D))
By perpendicular_line_definition on A, h, Line(F, G) we get h == perpendicular_line(A, Line(F, G))
By perpendicular_line_definition on orthocenter(B, D, orthocenter(B, C, D)), g, Line(D, E) we get g == perpendicular_line(orthocenter(B, D, orthocenter(B, C, D)), Line(D, E))
By perpendicular_line_definition on F, Line(E, H), i we get Line(E, H) == perpendicular_line(F, i)
By perpendicular_line_definition on D, i, Line(E, F) we get i == perpendicular_line(D, Line(E, F))
By line_intersection_definition on G, Line(G, center(Circle(C, D, E))), Line(F, G) we get G == line_intersection(Line(F, G), Line(G, center(Circle(C, D, E))))
By perpendicular_line_definition on line_circle_tangent_point(g, Circle(D, E, H)), g, Line(D, E) we get g == perpendicular_line(line_circle_tangent_point(g, Circle(D, E, H)), Line(D, E))
By perpendicular_line_definition on orthocenter(C, D, orthocenter(B, C, D)), g, Line(D, E) we get g == perpendicular_line(orthocenter(C, D, orthocenter(B, C, D)), Line(D, E))
By perpendicular_line_definition on orthocenter(C, D, orthocenter(B, C, D)), i, Line(E, F) we get i == perpendicular_line(orthocenter(C, D, orthocenter(B, C, D)), Line(E, F))
By line_intersection_definition on center(Circle(B, D, E)), Line(E, center(Circle(B, D, E))), Line(B, center(Circle(B, D, E))) we get center(Circle(B, D, E)) == line_intersection(Line(B, center(Circle(B, D, E))), Line(E, center(Circle(B, D, E))))
By line_intersection_definition on center(Circle(C, D, E)), Line(E, center(Circle(C, D, E))), Line(D, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on E, Line(E, center(Circle(B, D, E))), Line(E, F) we get E == line_intersection(Line(E, F), Line(E, center(Circle(B, D, E))))
By perpendicular_line_definition on orthocenter(B, C, orthocenter(B, C, D)), i, Line(E, F) we get i == perpendicular_line(orthocenter(B, C, orthocenter(B, C, D)), Line(E, F))
By perpendicular_line_definition on D, h, Line(F, G) we get h == perpendicular_line(D, Line(F, G))
By line_intersection_definition on D, Line(D, center(Circle(C, D, E))), h we get D == line_intersection(h, Line(D, center(Circle(C, D, E))))
By perpendicular_line_definition on orthocenter(C, D, orthocenter(B, C, D)), i, Line(C, G) we get i == perpendicular_line(orthocenter(C, D, orthocenter(B, C, D)), Line(C, G))
By perpendicular_line_definition on line_circle_tangent_point(f, Circle(D, F, H)), f, Line(D, F) we get f == perpendicular_line(line_circle_tangent_point(f, Circle(D, F, H)), Line(D, F))
By line_intersection_definition on E, Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))) we get E == line_intersection(Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on F, Line(F, center(Circle(B, D, E))), f we get F == line_intersection(f, Line(F, center(Circle(B, D, E))))
By perpendicular_line_definition on F, Line(E, F), i we get Line(E, F) == perpendicular_line(F, i)
By line_unique_intersection on altitude(B, C, D), g, B, orthocenter(C, D, orthocenter(B, C, D)) we get B == orthocenter(C, D, orthocenter(B, C, D))
By same_angle_converse_v1 on center(Circle(C, D, E)), C, D, G we get collinear(C, D, center(Circle(C, D, E)))
By same_angle_converse_v1 on center(Circle(B, D, E)), D, B, E we get collinear(B, D, center(Circle(B, D, E)))
By same_angle_v1 on G, I, F, E we get angle(F, G, E) == angle(I, G, E) mod 360
By same_angle_v1 on F, E, H, G we get angle(E, F, G) == angle(H, F, G) mod 360
By same_angle_v1 on G, I, F, C we get angle(F, G, C) == angle(I, G, C) mod 360
By same_angle_v0 on E, F, H, G we get angle(F, E, G) == angle(H, E, G) mod 360
By circle_radius_v0_r on H, Circle(D, E, H) we get radius(Circle(D, E, H)) == distance(H, center(Circle(D, E, H)))
By circle_radius_v0_r on line_circle_tangent_point(g, Circle(D, E, H)), Circle(D, E, H) we get radius(Circle(D, E, H)) == distance(center(Circle(D, E, H)), line_circle_tangent_point(g, Circle(D, E, H)))
By circle_radius_v0_r on line_circle_tangent_point(f, Circle(D, F, H)), Circle(D, F, H) we get radius(Circle(D, F, H)) == distance(center(Circle(D, F, H)), line_circle_tangent_point(f, Circle(D, F, H)))
By parallel_line_definition on F, Line(E, H), Line(C, G) we get Line(E, H) == parallel_line(F, Line(C, G))
By circle_radius_v0_r on E, Circle(D, E, H) we get radius(Circle(D, E, H)) == distance(E, center(Circle(D, E, H)))
By circle_radius_v0_r on D, Circle(D, E, H) we get radius(Circle(D, E, H)) == distance(D, center(Circle(D, E, H)))
By parallel_line_definition on orthocenter(B, D, orthocenter(B, C, D)), Line(C, G), Line(E, H) we get Line(C, G) == parallel_line(orthocenter(B, D, orthocenter(B, C, D)), Line(E, H))
By circle_radius_v0_r on H, Circle(D, F, H) we get radius(Circle(D, F, H)) == distance(H, center(Circle(D, F, H)))
By circle_radius_v0_r on F, Circle(D, F, H) we get radius(Circle(D, F, H)) == distance(F, center(Circle(D, F, H)))
By circle_radius_v0_r on D, Circle(D, F, H) we get radius(Circle(D, F, H)) == distance(D, center(Circle(D, F, H)))
By angle_to_center on F, H, D, Circle(D, F, H) we get 2 * angle(F, H, D) == angle(F, center(Circle(D, F, H)), D) mod 360
By angle_to_center on H, D, E, Circle(D, E, H) we get 2 * angle(H, D, E) == angle(H, center(Circle(D, E, H)), E) mod 360
By angle_to_center on E, H, D, Circle(D, E, H) we get 2 * angle(E, H, D) == angle(E, center(Circle(D, E, H)), D) mod 360
By angle_to_center on D, H, F, Circle(D, F, H) we get 2 * angle(D, H, F) == angle(D, center(Circle(D, F, H)), F) mod 360
By angle_to_center on E, D, H, Circle(D, E, H) we get 2 * angle(E, D, H) == angle(E, center(Circle(D, E, H)), H) mod 360
By angle_to_center on H, E, D, Circle(D, E, H) we get 2 * angle(H, E, D) == angle(H, center(Circle(D, E, H)), D) mod 360
By same_angle_v3 on I, G, F, D we get angle(G, I, D) == angle(F, I, D) + 180 mod 360
By angle_to_center on H, D, F, Circle(D, F, H) we get 2 * angle(H, D, F) == angle(H, center(Circle(D, F, H)), F) mod 360
By angle_to_center on D, E, H, Circle(D, E, H) we get 2 * angle(D, E, H) == angle(D, center(Circle(D, E, H)), H) mod 360
By angle_to_center on D, F, H, Circle(D, F, H) we get 2 * angle(D, F, H) == angle(D, center(Circle(D, F, H)), H) mod 360
By angle_to_center on F, D, H, Circle(D, F, H) we get 2 * angle(F, D, H) == angle(F, center(Circle(D, F, H)), H) mod 360
By angle_to_center on H, F, D, Circle(D, F, H) we get 2 * angle(H, F, D) == angle(H, center(Circle(D, F, H)), D) mod 360
By angle_to_center on D, H, E, Circle(D, E, H) we get 2 * angle(D, H, E) == angle(D, center(Circle(D, E, H)), E) mod 360
By projection_definition on F, H, i we get H == projection(F, i)
By in_imply_collinear on line_circle_tangent_point(f, Circle(D, F, H)), F, B we get collinear(B, F, line_circle_tangent_point(f, Circle(D, F, H)))
By same_angle_v0 on F, G, I, D we get angle(G, F, D) == angle(I, F, D) mod 360
By same_angle_v3 on I, F, G, A we get angle(F, I, A) == angle(G, I, A) + 180 mod 360
By same_angle_v0 on F, I, G, B we get angle(G, F, B) == angle(I, F, B) mod 360
By same_angle_v0 on F, I, G, H we get angle(G, F, H) == angle(I, F, H) mod 360
By same_angle_v1 on F, G, I, A we get angle(G, F, A) == angle(I, F, A) mod 360
By same_angle_v0 on F, I, G, E we get angle(G, F, E) == angle(I, F, E) mod 360
By in_imply_collinear on orthocenter(B, C, orthocenter(B, C, D)), E, D we get collinear(D, E, orthocenter(B, C, orthocenter(B, C, D)))
By probably_between_and_collinear_implies_between on F, I, G we get between(F, I, G)
By in_imply_collinear on orthocenter(C, D, orthocenter(B, C, D)), B, C we get collinear(B, C, orthocenter(C, D, orthocenter(B, C, D)))
By in_imply_collinear on orthocenter(B, C, orthocenter(B, C, D)), G, H we get collinear(G, H, orthocenter(B, C, orthocenter(B, C, D)))
By in_imply_collinear on orthocenter(B, C, orthocenter(B, C, D)), C, projection(B, Line(C, D)) we get collinear(C, projection(B, Line(C, D)), orthocenter(B, C, orthocenter(B, C, D)))
By in_imply_collinear on line_circle_tangent_point(g, Circle(D, E, H)), B, C we get collinear(B, C, line_circle_tangent_point(g, Circle(D, E, H)))
By sas_anti_similarity on E, H, G, F, H, G we get anti_similar_triangles(E, G, H, F, G, H)
By asa_anti_congruence on G, H, F, G, H, E we get anti_congruent_triangles(E, G, H, F, G, H)
By in_imply_collinear on orthocenter(C, D, orthocenter(B, C, D)), G, H we get collinear(G, H, orthocenter(C, D, orthocenter(B, C, D)))
By in_imply_collinear on orthocenter(B, D, orthocenter(B, C, D)), projection(B, Line(C, D)), D we get collinear(D, projection(B, Line(C, D)), orthocenter(B, D, orthocenter(B, C, D)))
By in_imply_collinear on orthocenter(B, C, orthocenter(B, C, D)), B, H we get collinear(B, H, orthocenter(B, C, orthocenter(B, C, D)))
By sss_anti_congruence_v1 on H, G, E, H, G, F we get anti_congruent_triangles(E, G, H, F, G, H)
By in_imply_collinear on orthocenter(B, D, orthocenter(B, C, D)), C, B we get collinear(B, C, orthocenter(B, D, orthocenter(B, C, D)))
By in_imply_collinear on orthocenter(C, D, orthocenter(B, C, D)), D, B we get collinear(B, D, orthocenter(C, D, orthocenter(B, C, D)))
By in_imply_collinear on orthocenter(C, D, orthocenter(B, C, D)), B, orthocenter(B, C, D) we get collinear(B, orthocenter(B, C, D), orthocenter(C, D, orthocenter(B, C, D)))
By in_imply_collinear on line_circle_tangent_point(f, Circle(D, F, H)), B, A we get collinear(A, B, line_circle_tangent_point(f, Circle(D, F, H)))
By sss_anti_congruence_v0 on F, H, G, E, H, G we get anti_congruent_triangles(E, G, H, F, G, H)
By in_imply_collinear on orthocenter(B, D, orthocenter(B, C, D)), E, B we get collinear(B, E, orthocenter(B, D, orthocenter(B, C, D)))
By in_imply_collinear on orthocenter(C, D, orthocenter(B, C, D)), D, G we get collinear(D, G, orthocenter(C, D, orthocenter(B, C, D)))
By anti_similar_triangle_basic_properties on H, G, E, E, C, D we get angle(H, G, E) == 0 - angle(E, C, D) mod 360, angle(G, E, H) == 0 - angle(C, D, E) mod 360, angle(E, H, G) == 0 - angle(D, E, C) mod 360, log(distance(C, E)) + log(distance(E, G)) == log(distance(G, H)) + log(distance(C, D)), log(distance(C, D)) + log(distance(E, H)) == log(distance(E, G)) + log(distance(D, E)), log(distance(D, E)) + log(distance(G, H)) == log(distance(E, H)) + log(distance(C, E))
By in_imply_collinear on orthocenter(B, C, orthocenter(B, C, D)), D, orthocenter(B, C, D) we get collinear(D, orthocenter(B, C, D), orthocenter(B, C, orthocenter(B, C, D)))
By in_imply_collinear on orthocenter(C, D, orthocenter(B, C, D)), E, C we get collinear(C, E, orthocenter(C, D, orthocenter(B, C, D)))
By probably_between_and_collinear_implies_between on E, H, F we get between(E, H, F)
By in_imply_collinear on orthocenter(C, D, orthocenter(B, C, D)), B, H we get collinear(B, H, orthocenter(C, D, orthocenter(B, C, D)))
By in_imply_collinear on orthocenter(B, C, orthocenter(B, C, D)), D, C we get collinear(C, D, orthocenter(B, C, orthocenter(B, C, D)))
By in_imply_collinear on line_circle_tangent_point(g, Circle(D, E, H)), E, C we get collinear(C, E, line_circle_tangent_point(g, Circle(D, E, H)))
By altitude_definition on E, D, H, Line(E, F) we get Line(E, F) == altitude(E, D, H)
By in_imply_collinear on orthocenter(B, D, orthocenter(B, C, D)), C, E we get collinear(C, E, orthocenter(B, D, orthocenter(B, C, D)))
By in_imply_collinear on orthocenter(B, D, orthocenter(B, C, D)), projection(B, Line(C, D)), C we get collinear(C, projection(B, Line(C, D)), orthocenter(B, D, orthocenter(B, C, D)))
By aa_anti_similarity on F, G, H, D, G, I we get anti_similar_triangles(D, G, I, F, G, H)
By in_imply_collinear on orthocenter(B, D, orthocenter(B, C, D)), G, C we get collinear(C, G, orthocenter(B, D, orthocenter(B, C, D)))
By tangent_point_is_unique on F, line_circle_tangent_point(f, Circle(D, F, H)), Circle(D, F, H), f we get F == line_circle_tangent_point(f, Circle(D, F, H))
By in_imply_collinear on orthocenter(B, D, orthocenter(B, C, D)), orthocenter(B, C, D), G we get collinear(G, orthocenter(B, C, D), orthocenter(B, D, orthocenter(B, C, D)))
By in_imply_collinear on orthocenter(B, C, orthocenter(B, C, D)), D, projection(B, Line(C, D)) we get collinear(D, projection(B, Line(C, D)), orthocenter(B, C, orthocenter(B, C, D)))
By in_imply_collinear on orthocenter(B, C, orthocenter(B, C, D)), E, orthocenter(B, C, D) we get collinear(E, orthocenter(B, C, D), orthocenter(B, C, orthocenter(B, C, D)))
By in_imply_collinear on line_circle_tangent_point(f, Circle(D, F, H)), F, A we get collinear(A, F, line_circle_tangent_point(f, Circle(D, F, H)))
By in_imply_collinear on orthocenter(B, C, orthocenter(B, C, D)), H, D we get collinear(D, H, orthocenter(B, C, orthocenter(B, C, D)))
By in_imply_collinear on line_circle_tangent_point(g, Circle(D, E, H)), B, E we get collinear(B, E, line_circle_tangent_point(g, Circle(D, E, H)))
By sss_anti_similarity_v0 on H, E, G, H, F, G we get anti_similar_triangles(E, G, H, F, G, H)
By in_imply_collinear on orthocenter(C, D, orthocenter(B, C, D)), G, B we get collinear(B, G, orthocenter(C, D, orthocenter(B, C, D)))
By sss_anti_similarity_v1 on G, E, F, G, F, E we get anti_similar_triangles(E, F, G, F, E, G)
By sss_anti_congruence_v1 on H, G, E, H, G, F we get anti_congruent_triangles(E, G, H, F, G, H)
By in_imply_collinear on orthocenter(B, C, orthocenter(B, C, D)), G, D we get collinear(D, G, orthocenter(B, C, orthocenter(B, C, D)))
By sss_anti_congruence_v0 on G, H, E, G, H, F we get anti_congruent_triangles(E, G, H, F, G, H)
By in_imply_collinear on orthocenter(B, C, orthocenter(B, C, D)), G, B we get collinear(B, G, orthocenter(B, C, orthocenter(B, C, D)))
By in_imply_collinear on orthocenter(B, D, orthocenter(B, C, D)), D, C we get collinear(C, D, orthocenter(B, D, orthocenter(B, C, D)))
By sss_anti_similarity_v0 on F, H, G, E, H, G we get anti_similar_triangles(E, G, H, F, G, H)
By in_imply_collinear on orthocenter(B, D, orthocenter(B, C, D)), orthocenter(B, C, D), C we get collinear(C, orthocenter(B, C, D), orthocenter(B, D, orthocenter(B, C, D)))
By sss_anti_congruence_v0 on G, F, E, G, E, F we get anti_congruent_triangles(E, F, G, F, E, G)
By sss_anti_similarity_v0 on H, G, F, H, G, E we get anti_similar_triangles(E, G, H, F, G, H)
By in_imply_collinear on orthocenter(C, D, orthocenter(B, C, D)), B, projection(B, Line(C, D)) we get collinear(B, projection(B, Line(C, D)), orthocenter(C, D, orthocenter(B, C, D)))
By sss_anti_similarity_v1 on F, G, H, E, G, H we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v1 on E, F, G, F, E, G we get anti_congruent_triangles(E, F, G, F, E, G)
By asa_anti_congruence on H, G, F, H, G, E we get anti_congruent_triangles(E, G, H, F, G, H)
By sas_anti_similarity on E, G, H, F, G, H we get anti_similar_triangles(E, G, H, F, G, H)
By in_imply_collinear on orthocenter(C, D, orthocenter(B, C, D)), H, D we get collinear(D, H, orthocenter(C, D, orthocenter(B, C, D)))
By sss_anti_similarity_v1 on G, E, F, G, F, E we get anti_similar_triangles(E, F, G, F, E, G)
By sss_anti_congruence_v0 on E, G, F, F, G, E we get anti_congruent_triangles(E, F, G, F, E, G)
By in_imply_collinear on orthocenter(C, D, orthocenter(B, C, D)), E, B we get collinear(B, E, orthocenter(C, D, orthocenter(B, C, D)))
By in_imply_collinear on orthocenter(C, D, orthocenter(B, C, D)), projection(B, Line(C, D)), orthocenter(B, C, D) we get collinear(orthocenter(B, C, D), projection(B, Line(C, D)), orthocenter(C, D, orthocenter(B, C, D)))
By aa_anti_similarity on F, H, G, D, I, G we get anti_similar_triangles(D, G, I, F, G, H)
By in_imply_collinear on orthocenter(B, C, orthocenter(B, C, D)), D, B we get collinear(B, D, orthocenter(B, C, orthocenter(B, C, D)))
By altitude_definition on G, D, I, Line(F, G) we get Line(F, G) == altitude(G, D, I)
By tangent_point_is_unique on E, line_circle_tangent_point(g, Circle(D, E, H)), Circle(D, E, H), g we get E == line_circle_tangent_point(g, Circle(D, E, H))
By collinear_definition on E, H, F we get H in Line(E, F), F in Line(E, H), Line(E, F) == Line(E, H), 0 == 2 * angle(H, E, F) mod 360
By sss_anti_similarity_v0 on F, E, G, E, F, G we get anti_similar_triangles(E, F, G, F, E, G)
By altitude_definition on G, I, A, Line(F, G) we get Line(F, G) == altitude(G, A, I)
By sss_anti_congruence_v0 on G, F, H, G, E, H we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v0 on G, F, E, G, E, F we get anti_similar_triangles(E, F, G, F, E, G)
By sss_anti_congruence_v0 on F, H, G, E, H, G we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v0 on G, F, E, G, E, F we get anti_similar_triangles(E, F, G, F, E, G)
By sas_anti_congruence on F, G, H, E, G, H we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v1 on F, G, E, E, G, F we get anti_similar_triangles(E, F, G, F, E, G)
By sss_anti_congruence_v1 on G, E, H, G, F, H we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v0 on F, E, G, E, F, G we get anti_congruent_triangles(E, F, G, F, E, G)
By in_imply_concyclic on F, D, H, line_circle_tangent_point(f, Circle(D, F, H)) we get concyclic(D, F, H, line_circle_tangent_point(f, Circle(D, F, H)))
By sss_anti_congruence_v1 on H, G, E, H, G, F we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v0 on G, H, E, G, H, F we get anti_similar_triangles(E, G, H, F, G, H)
By altitude_definition on E, B, H, Line(E, F) we get Line(E, F) == altitude(E, B, H)
By anti_similar_triangle_basic_properties on E, G, H, D, C, E we get angle(E, G, H) == 0 - angle(D, C, E) mod 360, angle(G, H, E) == 0 - angle(C, E, D) mod 360, angle(H, E, G) == 0 - angle(E, D, C) mod 360, log(distance(C, D)) + log(distance(G, H)) == log(distance(E, G)) + log(distance(C, E)), log(distance(C, E)) + log(distance(E, H)) == log(distance(G, H)) + log(distance(D, E)), log(distance(D, E)) + log(distance(E, G)) == log(distance(E, H)) + log(distance(C, D))
By sss_anti_similarity_v1 on F, G, H, E, G, H we get anti_similar_triangles(E, G, H, F, G, H)
By aa_anti_similarity on F, G, H, E, G, H we get anti_similar_triangles(E, G, H, F, G, H)
By parallel_line_angles_reverse_v3 on H, F, G, C we get angle(H, F, G) == angle(C, G, F) + 180 mod 360
By sss_anti_congruence_v0 on H, E, G, H, F, G we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v1 on F, G, H, E, G, H we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v1 on G, E, F, G, F, E we get anti_congruent_triangles(E, F, G, F, E, G)
By sss_anti_similarity_v0 on F, H, G, E, H, G we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v0 on H, E, G, H, F, G we get anti_congruent_triangles(E, G, H, F, G, H)
By collinear_definition on E, F, H we get F in Line(E, H), H in Line(E, F), Line(E, F) == Line(E, H), 0 == 2 * angle(F, E, H) mod 360
By sss_anti_congruence_v0 on G, F, H, G, E, H we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v1 on H, F, G, H, E, G we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v1 on E, H, G, F, H, G we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v0 on G, F, H, G, E, H we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v1 on E, F, G, F, E, G we get anti_congruent_triangles(E, F, G, F, E, G)
By altitude_definition on E, H, G, Line(E, F) we get Line(E, F) == altitude(E, G, H)
By sss_anti_similarity_v1 on H, G, E, H, G, F we get anti_similar_triangles(E, G, H, F, G, H)
By sas_anti_congruence on H, G, E, H, G, F we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v0 on F, E, G, E, F, G we get anti_congruent_triangles(E, F, G, F, E, G)
By sss_anti_similarity_v1 on E, F, G, F, E, G we get anti_similar_triangles(E, F, G, F, E, G)
By similar_triangle_basic_properties on D, G, I, E, G, H we get angle(D, G, I) == angle(E, G, H) mod 360, angle(G, H, E) == angle(G, I, D) mod 360, angle(H, E, G) == angle(I, D, G) mod 360, log(distance(D, G)) + log(distance(G, H)) == log(distance(E, G)) + log(distance(G, I)), log(distance(G, H)) + log(distance(D, I)) == log(distance(G, I)) + log(distance(E, H)), log(distance(D, I)) + log(distance(E, G)) == log(distance(E, H)) + log(distance(D, G))
By sas_anti_similarity on F, H, G, E, H, G we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v0 on E, G, H, F, G, H we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v1 on H, F, G, H, E, G we get anti_similar_triangles(E, G, H, F, G, H)
By sas_anti_congruence on G, H, F, G, H, E we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v1 on G, H, F, G, H, E we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v0 on E, G, F, F, G, E we get anti_similar_triangles(E, F, G, F, E, G)
By isosceles_triangle_properties on G, F, E we get distance(E, G) == distance(F, G), angle(F, E, G) == angle(G, F, E) mod 360
By sss_anti_similarity_v0 on F, H, G, E, H, G we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v0 on G, F, E, G, E, F we get anti_congruent_triangles(E, F, G, F, E, G)
By sss_anti_similarity_v0 on G, F, H, G, E, H we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v1 on G, H, F, G, H, E we get anti_similar_triangles(E, G, H, F, G, H)
By double_perpendicular_and_parallel_v0 on Line(E, H), i, Line(E, F) we get parallel(Line(E, F), Line(E, H))
By sas_anti_congruence on F, H, G, E, H, G we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v1 on E, F, G, F, E, G we get anti_congruent_triangles(E, F, G, F, E, G)
By sss_anti_congruence_v1 on F, G, E, E, G, F we get anti_congruent_triangles(E, F, G, F, E, G)
By sss_anti_congruence_v0 on H, E, G, H, F, G we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v0 on F, E, G, E, F, G we get anti_congruent_triangles(E, F, G, F, E, G)
By sss_anti_congruence_v1 on H, F, G, H, E, G we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v0 on G, F, H, G, E, H we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v1 on G, E, F, G, F, E we get anti_congruent_triangles(E, F, G, F, E, G)
By sss_anti_similarity_v1 on E, H, G, F, H, G we get anti_similar_triangles(E, G, H, F, G, H)
By sas_anti_similarity on F, G, H, E, G, H we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v0 on F, E, G, E, F, G we get anti_similar_triangles(E, F, G, F, E, G)
By sss_anti_similarity_v0 on E, G, F, F, G, E we get anti_similar_triangles(E, F, G, F, E, G)
By sss_anti_congruence_v0 on H, E, G, H, F, G we get anti_congruent_triangles(E, G, H, F, G, H)
By sas_anti_similarity on H, G, E, H, G, F we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v0 on H, E, G, H, F, G we get anti_similar_triangles(E, G, H, F, G, H)
By isosceles_triangle_properties on G, E, F we get distance(E, G) == distance(F, G), angle(E, F, G) == angle(G, E, F) mod 360
By sss_anti_similarity_v0 on E, G, F, F, G, E we get anti_similar_triangles(E, F, G, F, E, G)
By sss_anti_similarity_v1 on G, E, H, G, F, H we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v0 on H, G, F, H, G, E we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v0 on G, F, E, G, E, F we get anti_similar_triangles(E, F, G, F, E, G)
By sss_anti_congruence_v0 on F, H, G, E, H, G we get anti_congruent_triangles(E, G, H, F, G, H)
By collinear_definition on G, I, F we get I in Line(F, G), F in Line(G, I), Line(F, G) == Line(G, I), 0 == 2 * angle(I, G, F) mod 360
By sss_anti_similarity_v0 on G, H, E, G, H, F we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v0 on G, F, E, G, E, F we get anti_similar_triangles(E, F, G, F, E, G)
By sss_anti_similarity_v1 on E, H, G, F, H, G we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v1 on G, H, F, G, H, E we get anti_congruent_triangles(E, G, H, F, G, H)
By double_perpendicular_and_parallel_v0 on Line(G, I), h, Line(F, G) we get parallel(Line(F, G), Line(G, I))
By reverse_direction on D, projection(B, Line(C, D)) we get 180 == direction(D, projection(B, Line(C, D))) - direction(projection(B, Line(C, D)), D) mod 360
By double_perpendicular_and_parallel_v0 on Line(C, G), i, Line(E, F) we get parallel(Line(C, G), Line(E, F))
By altitude_definition on E, G, B, Line(E, F) we get Line(E, F) == altitude(E, B, G)
By sss_anti_similarity_v1 on F, G, E, E, G, F we get anti_similar_triangles(E, F, G, F, E, G)
By sas_anti_congruence on E, G, H, F, G, H we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v0 on H, E, G, H, F, G we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v1 on H, G, E, H, G, F we get anti_similar_triangles(E, G, H, F, G, H)
By in_imply_concyclic on D, H, E, line_circle_tangent_point(g, Circle(D, E, H)) we get concyclic(D, E, H, line_circle_tangent_point(g, Circle(D, E, H)))
By sss_anti_congruence_v1 on H, F, G, H, E, G we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v1 on E, F, G, F, E, G we get anti_similar_triangles(E, F, G, F, E, G)
By sss_anti_similarity_v1 on E, F, G, F, E, G we get anti_similar_triangles(E, F, G, F, E, G)
By sss_anti_congruence_v0 on E, G, F, F, G, E we get anti_congruent_triangles(E, F, G, F, E, G)
By sas_anti_similarity on G, H, E, G, H, F we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v0 on H, E, G, H, F, G we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v0 on E, G, F, F, G, E we get anti_congruent_triangles(E, F, G, F, E, G)
By sss_anti_congruence_v0 on F, E, G, E, F, G we get anti_congruent_triangles(E, F, G, F, E, G)
By sss_anti_congruence_v0 on G, F, E, G, E, F we get anti_congruent_triangles(E, F, G, F, E, G)
By sss_anti_congruence_v0 on G, F, H, G, E, H we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v1 on H, F, G, H, E, G we get anti_similar_triangles(E, G, H, F, G, H)
By altitude_definition on E, D, G, Line(E, F) we get Line(E, F) == altitude(E, D, G)
By sss_anti_similarity_v1 on G, E, F, G, F, E we get anti_similar_triangles(E, F, G, F, E, G)
By sss_anti_congruence_v0 on G, F, H, G, E, H we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v0 on E, G, H, F, G, H we get anti_congruent_triangles(E, G, H, F, G, H)
By aa_similarity on F, H, G, D, E, C we get similar_triangles(C, D, E, G, F, H)
By reverse_direction on projection(B, Line(C, D)), C we get 180 == direction(projection(B, Line(C, D)), C) - direction(C, projection(B, Line(C, D))) mod 360
By sss_anti_similarity_v0 on E, G, H, F, G, H we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v0 on H, G, F, H, G, E we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v0 on F, E, G, E, F, G we get anti_similar_triangles(E, F, G, F, E, G)
By sss_anti_similarity_v1 on F, G, E, E, G, F we get anti_similar_triangles(E, F, G, F, E, G)
By sss_anti_similarity_v0 on H, G, F, H, G, E we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v1 on G, H, F, G, H, E we get anti_congruent_triangles(E, G, H, F, G, H)
By collinear_definition on F, H, E we get H in Line(E, F), E in Line(F, H), Line(E, F) == Line(F, H), 0 == 2 * angle(H, F, E) mod 360
By sss_anti_similarity_v1 on E, H, G, F, H, G we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v0 on E, G, F, F, G, E we get anti_similar_triangles(E, F, G, F, E, G)
By sss_anti_congruence_v0 on F, H, G, E, H, G we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v0 on H, G, F, H, G, E we get anti_congruent_triangles(E, G, H, F, G, H)
By reverse_direction on C, projection(B, Line(C, D)) we get 180 == direction(C, projection(B, Line(C, D))) - direction(projection(B, Line(C, D)), C) mod 360
By sss_anti_congruence_v1 on F, G, H, E, G, H we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v0 on F, H, G, E, H, G we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v0 on G, F, H, G, E, H we get anti_similar_triangles(E, G, H, F, G, H)
By reverse_direction on B, projection(B, Line(C, D)) we get 180 == direction(B, projection(B, Line(C, D))) - direction(projection(B, Line(C, D)), B) mod 360
By sss_anti_congruence_v0 on E, G, F, F, G, E we get anti_congruent_triangles(E, F, G, F, E, G)
By sss_anti_similarity_v0 on G, F, H, G, E, H we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v0 on G, H, E, G, H, F we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v1 on F, G, H, E, G, H we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v0 on E, G, F, F, G, E we get anti_congruent_triangles(E, F, G, F, E, G)
By sss_anti_congruence_v1 on F, G, E, E, G, F we get anti_congruent_triangles(E, F, G, F, E, G)
By sss_anti_similarity_v1 on F, G, E, E, G, F we get anti_similar_triangles(E, F, G, F, E, G)
By sss_anti_similarity_v1 on E, F, G, F, E, G we get anti_similar_triangles(E, F, G, F, E, G)
By sss_anti_congruence_v0 on G, H, E, G, H, F we get anti_congruent_triangles(E, G, H, F, G, H)
By sas_anti_congruence on E, H, G, F, H, G we get anti_congruent_triangles(E, G, H, F, G, H)
By sas_anti_congruence on G, H, E, G, H, F we get anti_congruent_triangles(E, G, H, F, G, H)
By aa_anti_similarity on E, H, G, F, H, G we get anti_similar_triangles(E, G, H, F, G, H)
By asa_anti_congruence on H, G, E, H, G, F we get anti_congruent_triangles(E, G, H, F, G, H)
By asa_anti_congruence on G, H, E, G, H, F we get anti_congruent_triangles(E, G, H, F, G, H)
By reverse_direction on projection(B, Line(C, D)), orthocenter(B, C, D) we get 180 == direction(projection(B, Line(C, D)), orthocenter(B, C, D)) - direction(orthocenter(B, C, D), projection(B, Line(C, D))) mod 360
By sss_anti_similarity_v0 on F, H, G, E, H, G we get anti_similar_triangles(E, G, H, F, G, H)
By altitude_definition on G, A, D, Line(F, G) we get Line(F, G) == altitude(G, A, D)
By sss_anti_similarity_v1 on G, H, F, G, H, E we get anti_similar_triangles(E, G, H, F, G, H)
By collinear_definition on F, E, H we get E in Line(F, H), H in Line(E, F), Line(E, F) == Line(F, H), 0 == 2 * angle(E, F, H) mod 360
By sss_anti_congruence_v0 on F, E, G, E, F, G we get anti_congruent_triangles(E, F, G, F, E, G)
By sss_anti_congruence_v0 on G, F, H, G, E, H we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v1 on E, H, G, F, H, G we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v1 on G, H, F, G, H, E we get anti_similar_triangles(E, G, H, F, G, H)
By reverse_direction on orthocenter(B, C, D), projection(B, Line(C, D)) we get 180 == direction(orthocenter(B, C, D), projection(B, Line(C, D))) - direction(projection(B, Line(C, D)), orthocenter(B, C, D)) mod 360
By sss_anti_similarity_v1 on G, E, H, G, F, H we get anti_similar_triangles(E, G, H, F, G, H)
By parallel_line_angles_reverse_v2 on C, G, F, H we get angle(C, G, F) == angle(H, F, G) + 180 mod 360
By sss_anti_similarity_v1 on E, F, G, F, E, G we get anti_similar_triangles(E, F, G, F, E, G)
By sss_anti_congruence_v0 on G, F, E, G, E, F we get anti_congruent_triangles(E, F, G, F, E, G)
By sss_anti_congruence_v1 on H, F, G, H, E, G we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v0 on E, G, H, F, G, H we get anti_similar_triangles(E, G, H, F, G, H)
By aa_similarity on D, C, E, F, G, H we get similar_triangles(C, D, E, G, F, H)
By reverse_direction on projection(B, Line(C, D)), B we get 180 == direction(projection(B, Line(C, D)), B) - direction(B, projection(B, Line(C, D))) mod 360
By aa_anti_similarity on D, G, I, F, G, H we get anti_similar_triangles(D, G, I, F, G, H)
By sss_anti_similarity_v1 on F, G, E, E, G, F we get anti_similar_triangles(E, F, G, F, E, G)
By sss_anti_congruence_v1 on E, H, G, F, H, G we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v1 on E, F, G, F, E, G we get anti_congruent_triangles(E, F, G, F, E, G)
By sss_anti_congruence_v1 on G, E, F, G, F, E we get anti_congruent_triangles(E, F, G, F, E, G)
By sss_anti_congruence_v0 on E, G, H, F, G, H we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v1 on G, E, F, G, F, E we get anti_similar_triangles(E, F, G, F, E, G)
By sss_anti_similarity_v0 on H, G, F, H, G, E we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v1 on G, E, F, G, F, E we get anti_congruent_triangles(E, F, G, F, E, G)
By sss_anti_congruence_v1 on F, G, H, E, G, H we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v1 on F, G, E, E, G, F we get anti_congruent_triangles(E, F, G, F, E, G)
By sss_anti_congruence_v1 on H, F, G, H, E, G we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v0 on G, F, E, G, E, F we get anti_similar_triangles(E, F, G, F, E, G)
By sss_anti_similarity_v0 on H, G, F, H, G, E we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v1 on E, H, G, F, H, G we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v1 on G, E, H, G, F, H we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v1 on H, G, E, H, G, F we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v0 on F, E, G, E, F, G we get anti_similar_triangles(E, F, G, F, E, G)
By sss_anti_similarity_v0 on H, G, F, H, G, E we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v0 on E, G, H, F, G, H we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v1 on G, E, F, G, F, E we get anti_congruent_triangles(E, F, G, F, E, G)
By sss_anti_congruence_v1 on E, H, G, F, H, G we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v0 on F, H, G, E, H, G we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v1 on G, E, H, G, F, H we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v1 on E, H, G, F, H, G we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v1 on F, G, H, E, G, H we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v0 on E, G, H, F, G, H we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v0 on G, H, E, G, H, F we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v0 on G, H, E, G, H, F we get anti_congruent_triangles(E, G, H, F, G, H)
By aa_similarity on D, E, C, F, H, G we get similar_triangles(C, D, E, G, F, H)
By sss_anti_congruence_v0 on E, G, H, F, G, H we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v0 on G, H, E, G, H, F we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v1 on H, F, G, H, E, G we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v0 on F, E, G, E, F, G we get anti_similar_triangles(E, F, G, F, E, G)
By sss_anti_congruence_v1 on F, G, H, E, G, H we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v1 on G, H, F, G, H, E we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v0 on H, G, F, H, G, E we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v1 on H, G, E, H, G, F we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v0 on E, G, H, F, G, H we get anti_congruent_triangles(E, G, H, F, G, H)
By aa_anti_similarity on E, G, H, F, G, H we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v1 on H, F, G, H, E, G we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v1 on G, H, F, G, H, E we get anti_congruent_triangles(E, G, H, F, G, H)
By altitude_definition on E, D, B, Line(E, F) we get Line(E, F) == altitude(E, B, D)
By sss_anti_similarity_v1 on G, E, H, G, F, H we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v1 on F, G, H, E, G, H we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v1 on H, G, E, H, G, F we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v1 on H, G, E, H, G, F we get anti_congruent_triangles(E, G, H, F, G, H)
By sas_anti_similarity on H, G, F, H, G, E we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v1 on E, F, G, F, E, G we get anti_congruent_triangles(E, F, G, F, E, G)
By aa_anti_similarity on F, H, G, E, H, G we get anti_similar_triangles(E, G, H, F, G, H)
By collinear_definition on H, F, E we get F in Line(E, H), E in Line(F, H), Line(E, H) == Line(F, H), 0 == 2 * angle(F, H, E) mod 360
By sas_anti_similarity on G, H, F, G, H, E we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v1 on E, H, G, F, H, G we get anti_congruent_triangles(E, G, H, F, G, H)
By sas_anti_congruence on H, G, F, H, G, E we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v1 on F, G, E, E, G, F we get anti_congruent_triangles(E, F, G, F, E, G)
By sss_anti_similarity_v0 on G, H, E, G, H, F we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v0 on H, G, F, H, G, E we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v1 on G, E, H, G, F, H we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v1 on G, E, H, G, F, H we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v0 on G, H, E, G, H, F we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v1 on G, E, H, G, F, H we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v0 on H, E, G, H, F, G we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v0 on E, G, F, F, G, E we get anti_similar_triangles(E, F, G, F, E, G)
By collinear_definition on G, F, I we get F in Line(G, I), I in Line(F, G), Line(F, G) == Line(G, I), 0 == 2 * angle(F, G, I) mod 360
By sss_anti_similarity_v1 on G, H, F, G, H, E we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v1 on H, G, E, H, G, F we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v1 on H, F, G, H, E, G we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v1 on G, E, H, G, F, H we get anti_congruent_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v1 on F, G, E, E, G, F we get anti_congruent_triangles(E, F, G, F, E, G)
By reverse_direction on projection(B, Line(C, D)), D we get 180 == direction(projection(B, Line(C, D)), D) - direction(D, projection(B, Line(C, D))) mod 360
By aa_anti_similarity on D, I, G, F, H, G we get anti_similar_triangles(D, G, I, F, G, H)
By aa_similarity on F, G, H, D, C, E we get similar_triangles(C, D, E, G, F, H)
By sss_anti_congruence_v0 on G, F, E, G, E, F we get anti_congruent_triangles(E, F, G, F, E, G)
By sss_anti_similarity_v0 on E, G, H, F, G, H we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_congruence_v1 on G, H, F, G, H, E we get anti_congruent_triangles(E, G, H, F, G, H)
By collinear_definition on H, E, F we get E in Line(F, H), F in Line(E, H), Line(E, H) == Line(F, H), 0 == 2 * angle(E, H, F) mod 360
By sss_anti_similarity_v0 on H, E, G, H, F, G we get anti_similar_triangles(E, G, H, F, G, H)
By sss_anti_similarity_v1 on G, E, F, G, F, E we get anti_similar_triangles(E, F, G, F, E, G)
By sss_anti_similarity_v1 on F, G, H, E, G, H we get anti_similar_triangles(E, G, H, F, G, H)
By angle_to_center on line_circle_tangent_point(f, Circle(D, F, H)), D, H, Circle(D, F, H) we get angle(line_circle_tangent_point(f, Circle(D, F, H)), center(Circle(D, F, H)), H) == 2 * angle(line_circle_tangent_point(f, Circle(D, F, H)), D, H) mod 360
By angle_to_center on H, D, line_circle_tangent_point(f, Circle(D, F, H)), Circle(D, F, H) we get angle(H, center(Circle(D, F, H)), line_circle_tangent_point(f, Circle(D, F, H))) == 2 * angle(H, D, line_circle_tangent_point(f, Circle(D, F, H))) mod 360
By angle_to_center on line_circle_tangent_point(g, Circle(D, E, H)), D, H, Circle(D, E, H) we get angle(line_circle_tangent_point(g, Circle(D, E, H)), center(Circle(D, E, H)), H) == 2 * angle(line_circle_tangent_point(g, Circle(D, E, H)), D, H) mod 360
By angle_to_center on line_circle_tangent_point(g, Circle(D, E, H)), H, D, Circle(D, E, H) we get angle(line_circle_tangent_point(g, Circle(D, E, H)), center(Circle(D, E, H)), D) == 2 * angle(line_circle_tangent_point(g, Circle(D, E, H)), H, D) mod 360
By angle_to_center on H, D, line_circle_tangent_point(g, Circle(D, E, H)), Circle(D, E, H) we get angle(H, center(Circle(D, E, H)), line_circle_tangent_point(g, Circle(D, E, H))) == 2 * angle(H, D, line_circle_tangent_point(g, Circle(D, E, H))) mod 360
By angle_to_center on D, H, line_circle_tangent_point(g, Circle(D, E, H)), Circle(D, E, H) we get angle(D, center(Circle(D, E, H)), line_circle_tangent_point(g, Circle(D, E, H))) == 2 * angle(D, H, line_circle_tangent_point(g, Circle(D, E, H))) mod 360
By angle_to_center on D, H, line_circle_tangent_point(f, Circle(D, F, H)), Circle(D, F, H) we get angle(D, center(Circle(D, F, H)), line_circle_tangent_point(f, Circle(D, F, H))) == 2 * angle(D, H, line_circle_tangent_point(f, Circle(D, F, H))) mod 360
By angle_to_center on line_circle_tangent_point(f, Circle(D, F, H)), H, D, Circle(D, F, H) we get angle(line_circle_tangent_point(f, Circle(D, F, H)), center(Circle(D, F, H)), D) == 2 * angle(line_circle_tangent_point(f, Circle(D, F, H)), H, D) mod 360
By power_of_a_point_tangent_converse_v0 on D, A, I, F we get tangent(Line(D, F), Circle(A, F, I))
By power_of_a_point_tangent_converse_v1 on D, A, I, E we get tangent(Line(D, E), Circle(A, E, I))
By internal_angle_bisector_definition_v0_r on F, B, E, center(Circle(B, D, E)) we get Line(B, center(Circle(B, D, E))) == internal_angle_bisector(E, center(Circle(B, D, E)), F)
By external_angle_bisector_definition_v0_r on orthocenter(B, C, D), C, orthocenter(B, C, D), projection(B, Line(C, D)) we get Line(C, projection(B, Line(C, D))) == external_angle_bisector(orthocenter(B, C, D), projection(B, Line(C, D)), orthocenter(B, C, D))
By external_angle_bisector_definition_v0_r on C, B, C, projection(B, Line(C, D)) we get Line(B, projection(B, Line(C, D))) == external_angle_bisector(C, projection(B, Line(C, D)), C)
By internal_angle_bisector_definition_v0_r on projection(B, Line(C, D)), C, projection(B, Line(C, D)), D we get Line(C, D) == internal_angle_bisector(projection(B, Line(C, D)), D, projection(B, Line(C, D)))
By external_angle_bisector_definition_v0_r on orthocenter(B, C, D), D, orthocenter(B, C, D), projection(B, Line(C, D)) we get Line(D, projection(B, Line(C, D))) == external_angle_bisector(orthocenter(B, C, D), projection(B, Line(C, D)), orthocenter(B, C, D))
By radical_axis_definition_v0_r on D, Circle(D, F, H), Circle(C, D, E) we get D in radical_axis(Circle(C, D, E), Circle(D, F, H))
By draw_point_of_tangency on Line(D, F), Circle(B, F, H) we get exists(line_circle_tangent_point(Line(D, F), Circle(B, F, H)))
By internal_angle_bisector_definition_v0_r on D, B, D, center(Circle(B, D, E)) we get Line(B, center(Circle(B, D, E))) == internal_angle_bisector(D, center(Circle(B, D, E)), D)
By collinear_definition on F, G, I we get G in Line(F, I), I in Line(F, G), Line(F, G) == Line(F, I), 0 == 2 * angle(G, F, I) mod 360
By external_angle_bisector_definition_v0_r on D, B, D, projection(B, Line(C, D)) we get Line(B, projection(B, Line(C, D))) == external_angle_bisector(D, projection(B, Line(C, D)), D)
By external_angle_bisector_definition_v0_r on D, orthocenter(B, C, D), D, projection(B, Line(C, D)) we get Line(orthocenter(B, C, D), projection(B, Line(C, D))) == external_angle_bisector(D, projection(B, Line(C, D)), D)
By reverse_direction on center(Circle(B, D, E)), D we get 180 == direction(center(Circle(B, D, E)), D) - direction(D, center(Circle(B, D, E))) mod 360
By power_of_a_point_on_circle on line_circle_tangent_point(f, Circle(D, F, H)), Circle(D, F, H) we get 0 == power_of_a_point(line_circle_tangent_point(f, Circle(D, F, H)), Circle(D, F, H))
By external_angle_bisector_definition_v0_r on C, orthocenter(B, C, D), C, projection(B, Line(C, D)) we get Line(orthocenter(B, C, D), projection(B, Line(C, D))) == external_angle_bisector(C, projection(B, Line(C, D)), C)
By collinear_definition on I, G, F we get G in Line(F, I), F in Line(G, I), Line(F, I) == Line(G, I), 0 == 2 * angle(G, I, F) mod 360
By internal_angle_bisector_definition_v0_r on projection(B, Line(C, D)), orthocenter(B, C, D), projection(B, Line(C, D)), B we get Line(B, orthocenter(B, C, D)) == internal_angle_bisector(projection(B, Line(C, D)), B, projection(B, Line(C, D)))
By power_of_a_point_on_circle on F, Circle(B, F, H) we get 0 == power_of_a_point(F, Circle(B, F, H))
By reverse_direction on center(Circle(B, D, E)), E we get 180 == direction(center(Circle(B, D, E)), E) - direction(E, center(Circle(B, D, E))) mod 360
By internal_angle_bisector_definition_v0_r on orthocenter(B, C, D), B, orthocenter(B, C, D), projection(B, Line(C, D)) we get Line(B, projection(B, Line(C, D))) == internal_angle_bisector(orthocenter(B, C, D), projection(B, Line(C, D)), orthocenter(B, C, D))
By power_of_a_point_on_circle on line_circle_tangent_point(g, Circle(D, E, H)), Circle(D, E, H) we get 0 == power_of_a_point(line_circle_tangent_point(g, Circle(D, E, H)), Circle(D, E, H))
By external_angle_bisector_definition_v0_r on B, C, B, projection(B, Line(C, D)) we get Line(C, projection(B, Line(C, D))) == external_angle_bisector(B, projection(B, Line(C, D)), B)
By internal_angle_bisector_definition_v0_r on B, D, B, center(Circle(B, D, E)) we get Line(D, center(Circle(B, D, E))) == internal_angle_bisector(B, center(Circle(B, D, E)), B)
By internal_angle_bisector_definition_v0_r on orthocenter(B, C, D), projection(B, Line(C, D)), orthocenter(B, C, D), B we get internal_angle_bisector(orthocenter(B, C, D), B, orthocenter(B, C, D)) == Line(B, projection(B, Line(C, D)))
By external_angle_bisector_definition_v0_r on B, D, B, projection(B, Line(C, D)) we get Line(D, projection(B, Line(C, D))) == external_angle_bisector(B, projection(B, Line(C, D)), B)
By internal_angle_bisector_definition_v0_r on C, D, C, center(Circle(C, D, E)) we get Line(D, center(Circle(C, D, E))) == internal_angle_bisector(C, center(Circle(C, D, E)), C)
By power_of_a_point_on_circle on H, Circle(B, F, H) we get 0 == power_of_a_point(H, Circle(B, F, H))
By internal_angle_bisector_definition_v0_r on D, projection(B, Line(C, D)), D, C we get internal_angle_bisector(D, C, D) == Line(C, projection(B, Line(C, D)))
By internal_angle_bisector_definition_v0_r on D, C, D, center(Circle(C, D, E)) we get Line(C, center(Circle(C, D, E))) == internal_angle_bisector(D, center(Circle(C, D, E)), D)
By power_of_a_point_on_circle on H, Circle(B, E, H) we get 0 == power_of_a_point(H, Circle(B, E, H))
By reverse_direction on center(Circle(C, D, E)), G we get 180 == direction(center(Circle(C, D, E)), G) - direction(G, center(Circle(C, D, E))) mod 360
By reverse_direction on center(Circle(C, D, E)), D we get 180 == direction(center(Circle(C, D, E)), D) - direction(D, center(Circle(C, D, E))) mod 360
By internal_angle_bisector_definition_v0_r on B, projection(B, Line(C, D)), B, orthocenter(B, C, D) we get internal_angle_bisector(B, orthocenter(B, C, D), B) == Line(orthocenter(B, C, D), projection(B, Line(C, D)))
By reverse_direction on center(Circle(B, D, E)), F we get 180 == direction(center(Circle(B, D, E)), F) - direction(F, center(Circle(B, D, E))) mod 360
By power_of_a_point_in_circle on B, Circle(B, F, H) we get 0 == power_of_a_point(B, Circle(B, F, H))
By collinear_definition on F, I, G we get I in Line(F, G), G in Line(F, I), Line(F, G) == Line(F, I), 0 == 2 * angle(I, F, G) mod 360
By internal_angle_bisector_definition_v0_r on D, C, D, projection(B, Line(C, D)) we get Line(C, projection(B, Line(C, D))) == internal_angle_bisector(D, projection(B, Line(C, D)), D)
By internal_angle_bisector_definition_v0_r on B, orthocenter(B, C, D), B, projection(B, Line(C, D)) we get Line(orthocenter(B, C, D), projection(B, Line(C, D))) == internal_angle_bisector(B, projection(B, Line(C, D)), B)
By internal_angle_bisector_definition_v0_r on E, D, F, center(Circle(B, D, E)) we get Line(D, center(Circle(B, D, E))) == internal_angle_bisector(E, center(Circle(B, D, E)), F)
By internal_angle_bisector_definition_v0_r on projection(B, Line(C, D)), D, projection(B, Line(C, D)), C we get Line(C, D) == internal_angle_bisector(projection(B, Line(C, D)), C, projection(B, Line(C, D)))
By power_of_a_point_in_circle on E, Circle(B, E, H) we get 0 == power_of_a_point(E, Circle(B, E, H))
By reverse_direction on center(Circle(B, D, E)), B we get 180 == direction(center(Circle(B, D, E)), B) - direction(B, center(Circle(B, D, E))) mod 360
By power_of_a_point_in_circle on B, Circle(B, E, H) we get 0 == power_of_a_point(B, Circle(B, E, H))
By internal_angle_bisector_definition_v0_r on C, projection(B, Line(C, D)), C, D we get internal_angle_bisector(C, D, C) == Line(D, projection(B, Line(C, D)))
By reverse_direction on center(Circle(C, D, E)), E we get 180 == direction(center(Circle(C, D, E)), E) - direction(E, center(Circle(C, D, E))) mod 360
By collinear_definition on I, F, G we get F in Line(G, I), G in Line(F, I), Line(F, I) == Line(G, I), 0 == 2 * angle(F, I, G) mod 360
By reverse_direction on center(Circle(C, D, E)), C we get 180 == direction(center(Circle(C, D, E)), C) - direction(C, center(Circle(C, D, E))) mod 360
By internal_angle_bisector_definition_v0_r on C, D, C, projection(B, Line(C, D)) we get Line(D, projection(B, Line(C, D))) == internal_angle_bisector(C, projection(B, Line(C, D)), C)
By internal_angle_bisector_definition_v0_r on projection(B, Line(C, D)), B, projection(B, Line(C, D)), orthocenter(B, C, D) we get Line(B, orthocenter(B, C, D)) == internal_angle_bisector(projection(B, Line(C, D)), orthocenter(B, C, D), projection(B, Line(C, D)))
By draw_point_of_tangency on Line(D, E), Circle(B, E, H) we get exists(line_circle_tangent_point(Line(D, E), Circle(B, E, H)))
By perpendicular_lines_draw_intersection on i, Line(E, F) we get exists(line_intersection(i, Line(E, F)))
By perpendicular_lines_draw_intersection on h, Line(F, G) we get exists(line_intersection(h, Line(F, G)))
By angle_to_center on D, line_circle_tangent_point(g, Circle(D, E, H)), H, Circle(D, E, H) we get angle(D, center(Circle(D, E, H)), H) == 2 * angle(D, line_circle_tangent_point(g, Circle(D, E, H)), H) mod 360
By angle_to_center on H, line_circle_tangent_point(f, Circle(D, F, H)), D, Circle(D, F, H) we get angle(H, center(Circle(D, F, H)), D) == 2 * angle(H, line_circle_tangent_point(f, Circle(D, F, H)), D) mod 360
By angle_to_center on D, line_circle_tangent_point(f, Circle(D, F, H)), H, Circle(D, F, H) we get angle(D, center(Circle(D, F, H)), H) == 2 * angle(D, line_circle_tangent_point(f, Circle(D, F, H)), H) mod 360
By angle_to_center on H, line_circle_tangent_point(g, Circle(D, E, H)), D, Circle(D, E, H) we get angle(H, center(Circle(D, E, H)), D) == 2 * angle(H, line_circle_tangent_point(g, Circle(D, E, H)), D) mod 360
By altitude_definition on G, F, E, i we get i == altitude(G, E, F)
By altitude_definition on orthocenter(B, D, orthocenter(B, C, D)), H, B, Line(C, G) we get Line(C, G) == altitude(orthocenter(B, D, orthocenter(B, C, D)), B, H)
By altitude_definition on orthocenter(B, D, orthocenter(B, C, D)), projection(B, Line(C, D)), B, Line(C, D) we get Line(C, D) == altitude(orthocenter(B, D, orthocenter(B, C, D)), B, projection(B, Line(C, D)))
By isosceles_triangle_properties on center(Circle(B, D, E)), F, D we get distance(D, center(Circle(B, D, E))) == distance(F, center(Circle(B, D, E))), angle(F, D, center(Circle(B, D, E))) == angle(center(Circle(B, D, E)), F, D) mod 360
By altitude_definition on orthocenter(B, C, orthocenter(B, C, D)), orthocenter(B, C, D), projection(B, Line(C, D)), Line(C, D) we get Line(C, D) == altitude(orthocenter(B, C, orthocenter(B, C, D)), orthocenter(B, C, D), projection(B, Line(C, D)))
By power_of_a_point_definition on F, E, H, Circle(D, E, H) we get log(distance(E, F)) + log(distance(F, H)) == log(power_of_a_point(F, Circle(D, E, H)))
By altitude_definition on orthocenter(C, D, orthocenter(B, C, D)), D, E, g we get g == altitude(orthocenter(C, D, orthocenter(B, C, D)), D, E)
By altitude_definition on orthocenter(B, C, orthocenter(B, C, D)), projection(B, Line(C, D)), B, Line(C, D) we get Line(C, D) == altitude(orthocenter(B, C, orthocenter(B, C, D)), B, projection(B, Line(C, D)))
By sas_anti_congruence on E, center(Circle(C, D, E)), D, D, center(Circle(C, D, E)), E we get anti_congruent_triangles(D, E, center(Circle(C, D, E)), E, D, center(Circle(C, D, E)))
By altitude_definition on F, G, B, Line(E, F) we get Line(E, F) == altitude(F, B, G)
By altitude_definition on orthocenter(B, C, orthocenter(B, C, D)), E, B, Line(D, E) we get Line(D, E) == altitude(orthocenter(B, C, orthocenter(B, C, D)), B, E)
By sas_anti_similarity on F, D, A, I, D, F we get anti_similar_triangles(A, D, F, F, D, I)
By altitude_definition on F, H, B, Line(E, H) we get Line(E, H) == altitude(F, B, H)
By altitude_definition on orthocenter(B, C, orthocenter(B, C, D)), E, H, i we get i == altitude(orthocenter(B, C, orthocenter(B, C, D)), E, H)
By sas_anti_similarity on I, D, H, B, D, A we get anti_similar_triangles(A, B, D, H, I, D)
By altitude_definition on orthocenter(B, C, orthocenter(B, C, D)), C, B, Line(D, E) we get Line(D, E) == altitude(orthocenter(B, C, orthocenter(B, C, D)), B, C)
By altitude_definition on orthocenter(C, D, orthocenter(B, C, D)), C, D, altitude(B, C, D) we get altitude(B, C, D) == altitude(orthocenter(C, D, orthocenter(B, C, D)), C, D)
By radical_axis_definition_v0 on orthocenter(B, C, orthocenter(B, C, D)), Circle(B, D, E), Circle(C, D, E) we get power_of_a_point(orthocenter(B, C, orthocenter(B, C, D)), Circle(B, D, E)) == power_of_a_point(orthocenter(B, C, orthocenter(B, C, D)), Circle(C, D, E))
By altitude_definition on orthocenter(B, D, orthocenter(B, C, D)), B, orthocenter(B, C, D), Line(C, D) we get Line(C, D) == altitude(orthocenter(B, D, orthocenter(B, C, D)), B, orthocenter(B, C, D))
By isosceles_triangle_properties on center(Circle(B, D, E)), E, B we get distance(B, center(Circle(B, D, E))) == distance(E, center(Circle(B, D, E))), angle(E, B, center(Circle(B, D, E))) == angle(center(Circle(B, D, E)), E, B) mod 360
By altitude_definition on D, F, H, i we get i == altitude(D, F, H)
By sas_anti_similarity on A, D, B, H, D, I we get anti_similar_triangles(A, B, D, H, I, D)
By altitude_definition on orthocenter(B, D, orthocenter(B, C, D)), D, E, g we get g == altitude(orthocenter(B, D, orthocenter(B, C, D)), D, E)
By sas_anti_congruence on B, center(Circle(B, D, E)), F, F, center(Circle(B, D, E)), B we get anti_congruent_triangles(B, F, center(Circle(B, D, E)), F, B, center(Circle(B, D, E)))
By altitude_definition on F, H, B, Line(E, F) we get Line(E, F) == altitude(F, B, H)
By altitude_definition on F, D, H, Line(E, F) we get Line(E, F) == altitude(F, D, H)
By altitude_definition on F, D, I, Line(F, G) we get Line(F, G) == altitude(F, D, I)
By power_of_a_point_definition on D, H, B, Circle(B, E, H) we get log(distance(D, H)) + log(distance(B, D)) == log(power_of_a_point(D, Circle(B, E, H)))
By altitude_definition on orthocenter(B, C, orthocenter(B, C, D)), F, H, i we get i == altitude(orthocenter(B, C, orthocenter(B, C, D)), F, H)
By sas_anti_congruence on D, center(Circle(B, D, E)), E, E, center(Circle(B, D, E)), D we get anti_congruent_triangles(D, E, center(Circle(B, D, E)), E, D, center(Circle(B, D, E)))
By altitude_definition on orthocenter(C, D, orthocenter(B, C, D)), projection(B, Line(C, D)), D, altitude(B, C, D) we get altitude(B, C, D) == altitude(orthocenter(C, D, orthocenter(B, C, D)), D, projection(B, Line(C, D)))
By radical_axis_definition_v0 on orthocenter(C, D, orthocenter(B, C, D)), Circle(D, E, H), Circle(D, F, H) we get power_of_a_point(orthocenter(C, D, orthocenter(B, C, D)), Circle(D, E, H)) == power_of_a_point(orthocenter(C, D, orthocenter(B, C, D)), Circle(D, F, H))
By sas_anti_congruence on E, center(Circle(B, D, E)), D, D, center(Circle(B, D, E)), E we get anti_congruent_triangles(D, E, center(Circle(B, D, E)), E, D, center(Circle(B, D, E)))
By altitude_definition on orthocenter(C, D, orthocenter(B, C, D)), H, E, i we get i == altitude(orthocenter(C, D, orthocenter(B, C, D)), E, H)
By sas_anti_similarity on I, D, F, G, D, C we get anti_similar_triangles(C, D, G, F, D, I)
By power_of_a_point_definition on E, F, H, Circle(D, F, H) we get log(distance(E, F)) + log(distance(E, H)) == log(power_of_a_point(E, Circle(D, F, H)))
By altitude_definition on orthocenter(C, D, orthocenter(B, C, D)), C, G, i we get i == altitude(orthocenter(C, D, orthocenter(B, C, D)), C, G)
By altitude_definition on orthocenter(B, D, orthocenter(B, C, D)), G, B, Line(C, G) we get Line(C, G) == altitude(orthocenter(B, D, orthocenter(B, C, D)), B, G)
By radical_axis_definition_v0 on orthocenter(B, C, orthocenter(B, C, D)), Circle(D, E, H), Circle(C, D, E) we get power_of_a_point(orthocenter(B, C, orthocenter(B, C, D)), Circle(C, D, E)) == power_of_a_point(orthocenter(B, C, orthocenter(B, C, D)), Circle(D, E, H))
By altitude_definition on orthocenter(B, C, orthocenter(B, C, D)), C, G, i we get i == altitude(orthocenter(B, C, orthocenter(B, C, D)), C, G)
By altitude_definition on D, F, E, i we get i == altitude(D, E, F)
By sas_anti_congruence on F, center(Circle(B, D, E)), E, E, center(Circle(B, D, E)), F we get anti_congruent_triangles(E, F, center(Circle(B, D, E)), F, E, center(Circle(B, D, E)))
By isosceles_triangle_properties on center(Circle(C, D, E)), C, G we get distance(C, center(Circle(C, D, E))) == distance(G, center(Circle(C, D, E))), angle(C, G, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, G) mod 360
By altitude_definition on orthocenter(B, D, orthocenter(B, C, D)), E, orthocenter(B, C, D), g we get g == altitude(orthocenter(B, D, orthocenter(B, C, D)), E, orthocenter(B, C, D))
By altitude_definition on orthocenter(B, C, orthocenter(B, C, D)), orthocenter(B, C, D), B, Line(C, D) we get Line(C, D) == altitude(orthocenter(B, C, orthocenter(B, C, D)), B, orthocenter(B, C, D))
By altitude_definition on B, F, E, i we get i == altitude(B, E, F)
By sas_anti_congruence on G, center(Circle(C, D, E)), E, E, center(Circle(C, D, E)), G we get anti_congruent_triangles(E, G, center(Circle(C, D, E)), G, E, center(Circle(C, D, E)))
By altitude_definition on orthocenter(C, D, orthocenter(B, C, D)), orthocenter(B, C, D), E, g we get g == altitude(orthocenter(C, D, orthocenter(B, C, D)), E, orthocenter(B, C, D))
By altitude_definition on orthocenter(C, D, orthocenter(B, C, D)), F, E, i we get i == altitude(orthocenter(C, D, orthocenter(B, C, D)), E, F)
By altitude_definition on orthocenter(B, C, orthocenter(B, C, D)), orthocenter(B, C, D), C, i we get i == altitude(orthocenter(B, C, orthocenter(B, C, D)), C, orthocenter(B, C, D))
By altitude_definition on B, F, H, i we get i == altitude(B, F, H)
By sas_anti_congruence on G, center(Circle(C, D, E)), D, D, center(Circle(C, D, E)), G we get anti_congruent_triangles(D, G, center(Circle(C, D, E)), G, D, center(Circle(C, D, E)))
By sas_anti_congruence on F, center(Circle(B, D, E)), B, B, center(Circle(B, D, E)), F we get anti_congruent_triangles(B, F, center(Circle(B, D, E)), F, B, center(Circle(B, D, E)))
By isosceles_triangle_properties on center(Circle(C, D, E)), G, E we get distance(E, center(Circle(C, D, E))) == distance(G, center(Circle(C, D, E))), angle(G, E, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), G, E) mod 360
By sas_anti_congruence on D, center(Circle(C, D, E)), G, G, center(Circle(C, D, E)), D we get anti_congruent_triangles(D, G, center(Circle(C, D, E)), G, D, center(Circle(C, D, E)))
By isosceles_triangle_properties on center(Circle(C, D, E)), D, E we get distance(D, center(Circle(C, D, E))) == distance(E, center(Circle(C, D, E))), angle(D, E, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), D, E) mod 360
By sas_anti_congruence on E, center(Circle(C, D, E)), C, C, center(Circle(C, D, E)), E we get anti_congruent_triangles(C, E, center(Circle(C, D, E)), E, C, center(Circle(C, D, E)))
By altitude_definition on orthocenter(B, D, orthocenter(B, C, D)), D, G, Line(C, G) we get Line(C, G) == altitude(orthocenter(B, D, orthocenter(B, C, D)), D, G)
By sas_anti_similarity on F, D, I, A, D, F we get anti_similar_triangles(A, D, F, F, D, I)
By sas_anti_congruence on D, center(Circle(C, D, E)), E, E, center(Circle(C, D, E)), D we get anti_congruent_triangles(D, E, center(Circle(C, D, E)), E, D, center(Circle(C, D, E)))
By altitude_definition on F, B, D, Line(E, H) we get Line(E, H) == altitude(F, B, D)
By altitude_definition on orthocenter(B, C, orthocenter(B, C, D)), E, C, Line(D, E) we get Line(D, E) == altitude(orthocenter(B, C, orthocenter(B, C, D)), C, E)
By sas_anti_similarity on A, D, F, F, D, I we get anti_similar_triangles(A, D, F, F, D, I)
By power_of_a_point_definition on D, B, H, Circle(B, F, H) we get log(distance(B, D)) + log(distance(D, H)) == log(power_of_a_point(D, Circle(B, F, H)))
By altitude_definition on A, F, G, h we get h == altitude(A, F, G)
By power_of_a_point_definition on A, F, B, Circle(B, F, H) we get log(distance(A, F)) + log(distance(A, B)) == log(power_of_a_point(A, Circle(B, F, H)))
By altitude_definition on F, A, I, Line(F, G) we get Line(F, G) == altitude(F, A, I)
By altitude_definition on orthocenter(C, D, orthocenter(B, C, D)), G, orthocenter(B, C, D), i we get i == altitude(orthocenter(C, D, orthocenter(B, C, D)), G, orthocenter(B, C, D))
By altitude_definition on orthocenter(B, C, orthocenter(B, C, D)), E, F, i we get i == altitude(orthocenter(B, C, orthocenter(B, C, D)), E, F)
By sas_anti_similarity on F, D, I, C, D, G we get anti_similar_triangles(C, D, G, F, D, I)
By isosceles_triangle_properties on center(Circle(B, D, E)), F, E we get distance(E, center(Circle(B, D, E))) == distance(F, center(Circle(B, D, E))), angle(F, E, center(Circle(B, D, E))) == angle(center(Circle(B, D, E)), F, E) mod 360
By altitude_definition on D, F, G, h we get h == altitude(D, F, G)
By isosceles_triangle_properties on center(Circle(B, D, E)), B, F we get distance(B, center(Circle(B, D, E))) == distance(F, center(Circle(B, D, E))), angle(B, F, center(Circle(B, D, E))) == angle(center(Circle(B, D, E)), B, F) mod 360
By sas_anti_congruence on B, center(Circle(B, D, E)), E, E, center(Circle(B, D, E)), B we get anti_congruent_triangles(B, E, center(Circle(B, D, E)), E, B, center(Circle(B, D, E)))
By isosceles_triangle_properties on center(Circle(B, D, E)), F, B we get distance(B, center(Circle(B, D, E))) == distance(F, center(Circle(B, D, E))), angle(F, B, center(Circle(B, D, E))) == angle(center(Circle(B, D, E)), F, B) mod 360
By isosceles_triangle_properties on center(Circle(C, D, E)), G, C we get distance(C, center(Circle(C, D, E))) == distance(G, center(Circle(C, D, E))), angle(G, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), G, C) mod 360
By sas_anti_congruence on C, center(Circle(C, D, E)), G, G, center(Circle(C, D, E)), C we get anti_congruent_triangles(C, G, center(Circle(C, D, E)), G, C, center(Circle(C, D, E)))
By isosceles_triangle_properties on center(Circle(C, D, E)), G, D we get distance(D, center(Circle(C, D, E))) == distance(G, center(Circle(C, D, E))), angle(G, D, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), G, D) mod 360
By altitude_definition on orthocenter(B, D, orthocenter(B, C, D)), B, D, Line(C, G) we get Line(C, G) == altitude(orthocenter(B, D, orthocenter(B, C, D)), B, D)
By altitude_definition on orthocenter(B, D, orthocenter(B, C, D)), H, G, Line(C, G) we get Line(C, G) == altitude(orthocenter(B, D, orthocenter(B, C, D)), G, H)
By isosceles_triangle_properties on center(Circle(C, D, E)), D, G we get distance(D, center(Circle(C, D, E))) == distance(G, center(Circle(C, D, E))), angle(D, G, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), D, G) mod 360
By altitude_definition on F, G, H, Line(E, H) we get Line(E, H) == altitude(F, G, H)
By sas_anti_similarity on C, D, G, F, D, I we get anti_similar_triangles(C, D, G, F, D, I)
By altitude_definition on orthocenter(B, D, orthocenter(B, C, D)), H, D, Line(C, G) we get Line(C, G) == altitude(orthocenter(B, D, orthocenter(B, C, D)), D, H)
By isosceles_triangle_properties on center(Circle(B, D, E)), D, E we get distance(D, center(Circle(B, D, E))) == distance(E, center(Circle(B, D, E))), angle(D, E, center(Circle(B, D, E))) == angle(center(Circle(B, D, E)), D, E) mod 360
By altitude_definition on orthocenter(C, D, orthocenter(B, C, D)), C, orthocenter(B, C, D), i we get i == altitude(orthocenter(C, D, orthocenter(B, C, D)), C, orthocenter(B, C, D))
By radical_axis_definition_v0 on orthocenter(B, C, orthocenter(B, C, D)), Circle(D, F, H), Circle(D, E, H) we get power_of_a_point(orthocenter(B, C, orthocenter(B, C, D)), Circle(D, E, H)) == power_of_a_point(orthocenter(B, C, orthocenter(B, C, D)), Circle(D, F, H))
By isosceles_triangle_properties on center(Circle(C, D, E)), E, G we get distance(E, center(Circle(C, D, E))) == distance(G, center(Circle(C, D, E))), angle(E, G, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), E, G) mod 360
By isosceles_triangle_properties on center(Circle(B, D, E)), E, D we get distance(D, center(Circle(B, D, E))) == distance(E, center(Circle(B, D, E))), angle(E, D, center(Circle(B, D, E))) == angle(center(Circle(B, D, E)), E, D) mod 360
By sas_anti_congruence on E, center(Circle(B, D, E)), F, F, center(Circle(B, D, E)), E we get anti_congruent_triangles(E, F, center(Circle(B, D, E)), F, E, center(Circle(B, D, E)))
By altitude_definition on F, D, B, Line(E, F) we get Line(E, F) == altitude(F, B, D)
By altitude_definition on orthocenter(B, C, orthocenter(B, C, D)), orthocenter(B, C, D), G, i we get i == altitude(orthocenter(B, C, orthocenter(B, C, D)), G, orthocenter(B, C, D))
By altitude_definition on F, D, G, Line(E, H) we get Line(E, H) == altitude(F, D, G)
By power_of_a_point_definition on C, E, B, Circle(B, E, H) we get log(distance(C, E)) + log(distance(B, C)) == log(power_of_a_point(C, Circle(B, E, H)))
By altitude_definition on G, F, H, i we get i == altitude(G, F, H)
By altitude_definition on orthocenter(B, D, orthocenter(B, C, D)), orthocenter(B, C, D), projection(B, Line(C, D)), Line(C, D) we get Line(C, D) == altitude(orthocenter(B, D, orthocenter(B, C, D)), orthocenter(B, C, D), projection(B, Line(C, D)))
By isosceles_triangle_properties on center(Circle(C, D, E)), C, E we get distance(C, center(Circle(C, D, E))) == distance(E, center(Circle(C, D, E))), angle(C, E, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, E) mod 360
By power_of_a_point_definition on E, H, F, Circle(B, F, H) we get log(distance(E, H)) + log(distance(E, F)) == log(power_of_a_point(E, Circle(B, F, H)))
By sas_anti_similarity on H, D, I, A, D, B we get anti_similar_triangles(A, B, D, H, I, D)
By altitude_definition on orthocenter(C, D, orthocenter(B, C, D)), F, H, i we get i == altitude(orthocenter(C, D, orthocenter(B, C, D)), F, H)
By sas_anti_congruence on E, center(Circle(B, D, E)), B, B, center(Circle(B, D, E)), E we get anti_congruent_triangles(B, E, center(Circle(B, D, E)), E, B, center(Circle(B, D, E)))
By altitude_definition on F, A, D, Line(F, G) we get Line(F, G) == altitude(F, A, D)
By sas_anti_similarity on G, D, C, I, D, F we get anti_similar_triangles(C, D, G, F, D, I)
By altitude_definition on F, G, B, Line(E, H) we get Line(E, H) == altitude(F, B, G)
By power_of_a_point_definition on G, B, H, Circle(B, F, H) we get log(distance(B, G)) + log(distance(G, H)) == log(power_of_a_point(G, Circle(B, F, H)))
By altitude_definition on orthocenter(C, D, orthocenter(B, C, D)), orthocenter(B, C, D), D, g we get g == altitude(orthocenter(C, D, orthocenter(B, C, D)), D, orthocenter(B, C, D))
By sas_anti_congruence on F, center(Circle(B, D, E)), D, D, center(Circle(B, D, E)), F we get anti_congruent_triangles(D, F, center(Circle(B, D, E)), F, D, center(Circle(B, D, E)))
By isosceles_triangle_properties on center(Circle(B, D, E)), E, F we get distance(E, center(Circle(B, D, E))) == distance(F, center(Circle(B, D, E))), angle(E, F, center(Circle(B, D, E))) == angle(center(Circle(B, D, E)), E, F) mod 360
By power_of_a_point_definition on F, H, E, Circle(B, E, H) we get log(distance(F, H)) + log(distance(E, F)) == log(power_of_a_point(F, Circle(B, E, H)))
By sas_anti_congruence on E, center(Circle(C, D, E)), G, G, center(Circle(C, D, E)), E we get anti_congruent_triangles(E, G, center(Circle(C, D, E)), G, E, center(Circle(C, D, E)))
By altitude_definition on orthocenter(C, D, orthocenter(B, C, D)), C, projection(B, Line(C, D)), altitude(B, C, D) we get altitude(B, C, D) == altitude(orthocenter(C, D, orthocenter(B, C, D)), C, projection(B, Line(C, D)))
By sas_anti_similarity on B, D, A, I, D, H we get anti_similar_triangles(A, B, D, H, I, D)
By isosceles_triangle_properties on center(Circle(B, D, E)), D, F we get distance(D, center(Circle(B, D, E))) == distance(F, center(Circle(B, D, E))), angle(D, F, center(Circle(B, D, E))) == angle(center(Circle(B, D, E)), D, F) mod 360
By altitude_definition on F, H, G, Line(E, F) we get Line(E, F) == altitude(F, G, H)
By power_of_a_point_tangent on D, F, Circle(B, F, H) we get 2 * log(distance(D, F)) == log(power_of_a_point(D, Circle(B, F, H)))
By sas_anti_congruence on C, center(Circle(C, D, E)), E, E, center(Circle(C, D, E)), C we get anti_congruent_triangles(C, E, center(Circle(C, D, E)), E, C, center(Circle(C, D, E)))
By sas_anti_congruence on D, center(Circle(B, D, E)), F, F, center(Circle(B, D, E)), D we get anti_congruent_triangles(D, F, center(Circle(B, D, E)), F, D, center(Circle(B, D, E)))
By altitude_definition on F, H, D, Line(E, H) we get Line(E, H) == altitude(F, D, H)
By isosceles_triangle_properties on center(Circle(B, D, E)), B, E we get distance(B, center(Circle(B, D, E))) == distance(E, center(Circle(B, D, E))), angle(B, E, center(Circle(B, D, E))) == angle(center(Circle(B, D, E)), B, E) mod 360
By radical_axis_definition_v0 on orthocenter(B, C, orthocenter(B, C, D)), Circle(D, E, H), Circle(B, D, E) we get power_of_a_point(orthocenter(B, C, orthocenter(B, C, D)), Circle(B, D, E)) == power_of_a_point(orthocenter(B, C, orthocenter(B, C, D)), Circle(D, E, H))
By sas_anti_similarity on I, D, F, F, D, A we get anti_similar_triangles(A, D, F, F, D, I)
By sas_anti_congruence on G, center(Circle(C, D, E)), C, C, center(Circle(C, D, E)), G we get anti_congruent_triangles(C, G, center(Circle(C, D, E)), G, C, center(Circle(C, D, E)))
By altitude_definition on orthocenter(B, D, orthocenter(B, C, D)), orthocenter(B, C, D), D, g we get g == altitude(orthocenter(B, D, orthocenter(B, C, D)), D, orthocenter(B, C, D))
By isosceles_triangle_properties on center(Circle(C, D, E)), E, C we get distance(C, center(Circle(C, D, E))) == distance(E, center(Circle(C, D, E))), angle(E, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), E, C) mod 360
By altitude_definition on F, D, G, Line(E, F) we get Line(E, F) == altitude(F, D, G)
By power_of_a_point_tangent on D, E, Circle(B, E, H) we get 2 * log(distance(D, E)) == log(power_of_a_point(D, Circle(B, E, H)))
By isosceles_triangle_properties on center(Circle(C, D, E)), E, D we get distance(D, center(Circle(C, D, E))) == distance(E, center(Circle(C, D, E))), angle(E, D, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), E, D) mod 360
By power_of_a_point_definition on G, B, H, Circle(B, E, H) we get log(distance(B, G)) + log(distance(G, H)) == log(power_of_a_point(G, Circle(B, E, H)))
By power_of_a_point_tangent on orthocenter(B, C, D), E, Circle(B, E, H) we get log(power_of_a_point(orthocenter(B, C, D), Circle(B, E, H))) == 2 * log(distance(E, orthocenter(B, C, D)))
By sas_anti_congruence on B, center(Circle(B, D, E)), E, B, center(Circle(B, D, E)), F we get anti_congruent_triangles(B, E, center(Circle(B, D, E)), B, F, center(Circle(B, D, E)))
By sas_congruence on D, center(Circle(B, D, E)), F, E, center(Circle(B, D, E)), D we get congruent_triangles(D, E, center(Circle(B, D, E)), F, D, center(Circle(B, D, E)))
By sas_congruence on E, center(Circle(B, D, E)), D, D, center(Circle(B, D, E)), F we get congruent_triangles(D, E, center(Circle(B, D, E)), F, D, center(Circle(B, D, E)))
By sas_congruence on F, center(Circle(B, D, E)), D, D, center(Circle(B, D, E)), E we get congruent_triangles(D, E, center(Circle(B, D, E)), F, D, center(Circle(B, D, E)))
By sas_congruence on F, center(Circle(B, D, E)), B, B, center(Circle(B, D, E)), E we get congruent_triangles(B, E, center(Circle(B, D, E)), F, B, center(Circle(B, D, E)))
By sas_congruence on B, center(Circle(B, D, E)), F, E, center(Circle(B, D, E)), B we get congruent_triangles(B, E, center(Circle(B, D, E)), F, B, center(Circle(B, D, E)))
By sas_congruence on D, center(Circle(B, D, E)), E, F, center(Circle(B, D, E)), D we get congruent_triangles(D, E, center(Circle(B, D, E)), F, D, center(Circle(B, D, E)))
By sas_anti_congruence on E, center(Circle(B, D, E)), D, F, center(Circle(B, D, E)), D we get anti_congruent_triangles(D, E, center(Circle(B, D, E)), D, F, center(Circle(B, D, E)))
By sas_congruence on E, center(Circle(B, D, E)), B, B, center(Circle(B, D, E)), F we get congruent_triangles(B, E, center(Circle(B, D, E)), F, B, center(Circle(B, D, E)))
By sas_anti_congruence on D, center(Circle(B, D, E)), E, D, center(Circle(B, D, E)), F we get anti_congruent_triangles(D, E, center(Circle(B, D, E)), D, F, center(Circle(B, D, E)))
By sas_anti_congruence on B, center(Circle(B, D, E)), F, B, center(Circle(B, D, E)), E we get anti_congruent_triangles(B, E, center(Circle(B, D, E)), B, F, center(Circle(B, D, E)))
By sas_anti_congruence on D, center(Circle(B, D, E)), F, D, center(Circle(B, D, E)), E we get anti_congruent_triangles(D, E, center(Circle(B, D, E)), D, F, center(Circle(B, D, E)))
By perpendicular_bisector_sufficient_conditions on F, E, H, G we get Line(G, H) == perpendicular_bisector(E, F)
By sas_anti_congruence on F, center(Circle(B, D, E)), D, E, center(Circle(B, D, E)), D we get anti_congruent_triangles(D, E, center(Circle(B, D, E)), D, F, center(Circle(B, D, E)))
By sas_congruence on B, center(Circle(B, D, E)), E, F, center(Circle(B, D, E)), B we get congruent_triangles(B, E, center(Circle(B, D, E)), F, B, center(Circle(B, D, E)))
By sas_anti_congruence on F, center(Circle(B, D, E)), B, E, center(Circle(B, D, E)), B we get anti_congruent_triangles(B, E, center(Circle(B, D, E)), B, F, center(Circle(B, D, E)))
By sas_anti_congruence on E, center(Circle(B, D, E)), B, F, center(Circle(B, D, E)), B we get anti_congruent_triangles(B, E, center(Circle(B, D, E)), B, F, center(Circle(B, D, E)))
By sas_anti_similarity on B, D, I, A, D, H we get anti_similar_triangles(A, D, H, B, D, I)
By sas_anti_similarity on A, D, H, B, D, I we get anti_similar_triangles(A, D, H, B, D, I)
By sas_anti_similarity on E, D, I, A, D, E we get anti_similar_triangles(A, D, E, E, D, I)
By sas_anti_similarity on H, D, A, I, D, B we get anti_similar_triangles(A, D, H, B, D, I)
By sas_anti_similarity on I, D, B, H, D, A we get anti_similar_triangles(A, D, H, B, D, I)
By sas_anti_similarity on A, D, E, E, D, I we get anti_similar_triangles(A, D, E, E, D, I)
By sas_anti_similarity on I, D, E, E, D, A we get anti_similar_triangles(A, D, E, E, D, I)
By sas_anti_similarity on E, D, A, I, D, E we get anti_similar_triangles(A, D, E, E, D, I)
By isosceles_triangle_altitude_v2 on G, E, F we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, G, F), perpendicular_line(G, Line(E, F)))
By isosceles_triangle_altitude_v2 on G, F, E we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, G, F), perpendicular_line(G, Line(E, F)))
By concurrent_sufficient_conditions on Line(E, G), Line(E, center(Circle(C, D, E))), Line(E, center(Circle(B, D, E))) we get concurrent(Line(E, G), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(B, center(Circle(B, D, E))), h we get concurrent(h, Line(B, center(Circle(B, D, E))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(D, E), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(B, center(Circle(B, D, E))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, E), h we get concurrent(h, Line(D, E), Line(D, center(Circle(C, D, E))))
By concyclic_sufficient_conditions_v1 on H, F, I, D we get concyclic(D, F, H, I)
By concurrent_sufficient_conditions on Line(F, G), Line(E, F), Line(F, center(Circle(B, D, E))) we get concurrent(Line(E, F), Line(F, G), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, F), Line(B, center(Circle(B, D, E))) we get concurrent(Line(D, E), Line(D, F), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(E, center(Circle(B, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on g, Line(C, center(Circle(C, D, E))), Line(A, C) we get concurrent(g, Line(A, C), Line(C, center(Circle(C, D, E))))
By line_definition on D, line_circle_tangent_point(Line(D, F), Circle(B, F, H)), Line(D, F) we get Line(D, F) == Line(D, line_circle_tangent_point(Line(D, F), Circle(B, F, H)))
By concurrent_sufficient_conditions on Line(F, G), Line(C, G), Line(G, center(Circle(C, D, E))) we get concurrent(Line(C, G), Line(F, G), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), g, Line(E, center(Circle(C, D, E))) we get concurrent(g, Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, G), Line(D, E) we get concurrent(Line(D, E), Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on g, Line(C, center(Circle(C, D, E))), Line(C, G) we get concurrent(g, Line(C, G), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, G), Line(G, center(Circle(C, D, E))), i we get concurrent(i, Line(C, G), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, D, E))), Line(E, F), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, G), g we get concurrent(g, Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, F), Line(D, E) we get concurrent(Line(D, E), Line(D, F), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(D, E), Line(D, center(Circle(C, D, E))) we get concurrent(i, Line(D, E), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(B, center(Circle(B, D, E))), altitude(B, C, D) we get concurrent(g, altitude(B, C, D), Line(B, center(Circle(B, D, E))))
By line_definition on line_circle_tangent_point(Line(D, E), Circle(B, E, H)), orthocenter(B, C, D), Line(D, E) we get Line(D, E) == Line(orthocenter(B, C, D), line_circle_tangent_point(Line(D, E), Circle(B, E, H)))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, D, E))), Line(C, G), Line(E, G) we get concurrent(Line(C, G), Line(E, G), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(D, E), Line(C, D) we get concurrent(Line(C, D), Line(D, E), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), g, Line(E, F) we get concurrent(g, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(D, F), Line(D, E) we get concurrent(Line(D, E), Line(D, F), Line(B, center(Circle(B, D, E))))
By midpoint_definition_v1 on E, F, H we get H == midpoint(E, F)
By concurrent_sufficient_conditions on f, Line(B, center(Circle(B, D, E))), altitude(B, C, D) we get concurrent(f, altitude(B, C, D), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, D, E))), Line(C, G), Line(F, G) we get concurrent(Line(C, G), Line(F, G), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), Line(F, center(Circle(B, D, E))) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), g, Line(A, C) we get concurrent(g, Line(A, C), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(D, E), g we get concurrent(g, Line(D, E), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), h, Line(C, D) we get concurrent(h, Line(C, D), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on g, Line(E, G), Line(E, center(Circle(C, D, E))) we get concurrent(g, Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), Line(E, center(Circle(B, D, E))) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), g, f we get concurrent(f, g, Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on altitude(B, C, D), f, Line(B, center(Circle(B, D, E))) we get concurrent(f, altitude(B, C, D), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(D, center(Circle(C, D, E))), h we get concurrent(h, Line(D, F), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(Circle(C, D, E))), Line(D, F) we get concurrent(Line(D, E), Line(D, F), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(D, center(Circle(C, D, E))), Line(G, center(Circle(C, D, E))) we get concurrent(Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), g, Line(E, center(Circle(C, D, E))) we get concurrent(g, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, D, E))), Line(E, G), i we get concurrent(i, Line(E, G), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))) we get concurrent(g, Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(D, E), Line(E, center(Circle(C, D, E))) we get concurrent(g, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), g, Line(C, G) we get concurrent(g, Line(C, G), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(B, center(Circle(B, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(D, F), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(D, E), Line(E, G) we get concurrent(Line(D, E), Line(E, G), Line(E, center(Circle(C, D, E))))
By line_definition on midpoint(E, F), D, i we get i == Line(D, midpoint(E, F))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, D, E))), Line(F, G), Line(C, G) we get concurrent(Line(C, G), Line(F, G), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, D, E))), Line(D, F), Line(F, G) we get concurrent(Line(D, F), Line(F, G), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(B, center(Circle(B, D, E))), Line(C, D) we get concurrent(Line(C, D), Line(D, E), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, F), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, G), Line(D, E) we get concurrent(Line(D, E), Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(B, center(Circle(B, D, E))), Line(D, E) we get concurrent(h, Line(D, E), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))), g we get concurrent(g, Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), g, altitude(B, C, D) we get concurrent(g, altitude(B, C, D), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on h, Line(D, center(Circle(C, D, E))), i we get concurrent(h, i, Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(B, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), Line(C, G), g we get concurrent(g, Line(C, G), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(G, center(Circle(C, D, E))) we get concurrent(Line(C, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, G), Line(C, center(Circle(C, D, E))), Line(A, C) we get concurrent(Line(A, C), Line(C, G), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(F, center(Circle(B, D, E))), Line(E, center(Circle(B, D, E))) we get concurrent(Line(B, center(Circle(B, D, E))), Line(E, center(Circle(B, D, E))), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, center(Circle(B, D, E))), g we get concurrent(g, Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(B, center(Circle(B, D, E))), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(B, center(Circle(B, D, E))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(Circle(B, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(F, G), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, D, E))), Line(D, F), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on f, Line(F, center(Circle(B, D, E))), Line(E, F) we get concurrent(f, Line(E, F), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, F), Line(E, G) we get concurrent(Line(E, F), Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(C, center(Circle(C, D, E))), Line(G, center(Circle(C, D, E))) we get concurrent(Line(C, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, D, E))), Line(F, G), Line(E, G) we get concurrent(Line(E, G), Line(F, G), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(C, G), Line(G, center(Circle(C, D, E))) we get concurrent(i, Line(C, G), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(E, F), Line(E, center(Circle(C, D, E))) we get concurrent(g, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(D, E), Line(B, center(Circle(B, D, E))) we get concurrent(Line(D, E), Line(D, F), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, E), g, Line(E, center(Circle(C, D, E))) we get concurrent(g, Line(D, E), Line(E, center(Circle(C, D, E))))
By tangent_definition_from_perpendicularity_v0 on F, Line(D, F), Circle(B, F, H) we get perpendicular(Line(D, F), Line(F, center(Circle(B, F, H))))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(Circle(C, D, E))), Line(C, G) we get concurrent(Line(C, G), Line(F, G), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(C, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, E), Line(B, center(Circle(B, D, E))) we get concurrent(Line(D, E), Line(B, center(Circle(B, D, E))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(G, center(Circle(C, D, E))), Line(C, G) we get concurrent(Line(C, G), Line(E, G), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(D, F), Line(D, center(Circle(C, D, E))) we get concurrent(i, Line(D, F), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(E, center(Circle(B, D, E))), Line(F, center(Circle(B, D, E))) we get concurrent(Line(B, center(Circle(B, D, E))), Line(E, center(Circle(B, D, E))), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), Line(E, center(Circle(B, D, E))) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, D, E))), i, Line(C, G) we get concurrent(i, Line(C, G), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, G), g we get concurrent(g, Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(E, G), Line(G, center(Circle(C, D, E))) we get concurrent(Line(E, G), Line(F, G), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(C, center(Circle(C, D, E))) we get concurrent(Line(C, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(B, D, E))), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(Circle(C, D, E))), h we get concurrent(h, Line(D, E), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, center(Circle(B, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(B, center(Circle(B, D, E))), Line(C, D) we get concurrent(Line(C, D), Line(D, F), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(G, center(Circle(C, D, E))), Line(C, center(Circle(C, D, E))) we get concurrent(Line(C, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(D, E), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, G), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(D, E), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(D, F), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on altitude(B, C, D), Line(B, center(Circle(B, D, E))), f we get concurrent(f, altitude(B, C, D), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, F), Line(B, center(Circle(B, D, E))) we get concurrent(Line(D, F), Line(B, center(Circle(B, D, E))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, D), h, Line(B, center(Circle(B, D, E))) we get concurrent(h, Line(C, D), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(C, D), Line(D, F), Line(B, center(Circle(B, D, E))) we get concurrent(Line(C, D), Line(D, F), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, D, E))), f, Line(E, F) we get concurrent(f, Line(E, F), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on h, Line(D, center(Circle(C, D, E))), Line(D, E) we get concurrent(h, Line(D, E), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, F), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, F), Line(E, G) we get concurrent(Line(E, F), Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, D, E))), Line(D, F), f we get concurrent(f, Line(D, F), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(E, center(Circle(B, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(C, D), Line(D, E), Line(B, center(Circle(B, D, E))) we get concurrent(Line(C, D), Line(D, E), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(B, D, E))), f we get concurrent(f, Line(D, F), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, E), h, Line(D, center(Circle(C, D, E))) we get concurrent(h, Line(D, E), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(E, center(Circle(B, D, E))), Line(E, F) we get concurrent(g, Line(E, F), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(B, center(Circle(B, D, E))), Line(F, center(Circle(B, D, E))) we get concurrent(Line(B, center(Circle(B, D, E))), Line(E, center(Circle(B, D, E))), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(D, E), Line(E, G) we get concurrent(Line(D, E), Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(C, D, E))), Line(E, center(Circle(B, D, E))) we get concurrent(Line(D, E), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, G), Line(G, center(Circle(C, D, E))), Line(F, G) we get concurrent(Line(C, G), Line(F, G), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(E, center(Circle(C, D, E))), Line(E, center(Circle(B, D, E))) we get concurrent(g, Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, D, E))), Line(F, G), Line(E, F) we get concurrent(Line(E, F), Line(F, G), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), h, i we get concurrent(h, i, Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(B, D, E))), g we get concurrent(g, Line(E, F), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on f, Line(F, G), Line(F, center(Circle(B, D, E))) we get concurrent(f, Line(F, G), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, G), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, G), Line(F, center(Circle(B, D, E))) we get concurrent(Line(D, F), Line(F, G), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on g, Line(E, center(Circle(C, D, E))), Line(D, E) we get concurrent(g, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, G), Line(G, center(Circle(C, D, E))), Line(E, G) we get concurrent(Line(C, G), Line(E, G), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, G), i, Line(G, center(Circle(C, D, E))) we get concurrent(i, Line(C, G), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(F, center(Circle(B, D, E))), Line(D, F) we get concurrent(f, Line(D, F), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on altitude(B, C, D), g, Line(B, center(Circle(B, D, E))) we get concurrent(g, altitude(B, C, D), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, D, E))), Line(C, G), i we get concurrent(i, Line(C, G), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(C, D), Line(D, F) we get concurrent(Line(C, D), Line(D, F), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, G), Line(F, center(Circle(B, D, E))) we get concurrent(Line(E, F), Line(F, G), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), h, Line(D, F) we get concurrent(h, Line(D, F), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, G), g, Line(C, center(Circle(C, D, E))) we get concurrent(g, Line(C, G), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(G, center(Circle(C, D, E))), Line(E, G) we get concurrent(i, Line(E, G), Line(G, center(Circle(C, D, E))))
By perpendicular_line_definition on E, Line(E, center(Circle(D, E, H))), g we get perpendicular_line(E, g) == Line(E, center(Circle(D, E, H)))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(D, E), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on h, Line(B, center(Circle(B, D, E))), Line(C, D) we get concurrent(h, Line(C, D), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, G), i, Line(G, center(Circle(C, D, E))) we get concurrent(i, Line(E, G), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, G), Line(E, center(Circle(B, D, E))) we get concurrent(Line(D, E), Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on h, Line(D, F), Line(D, center(Circle(C, D, E))) we get concurrent(h, Line(D, F), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(D, F), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(B, center(Circle(B, D, E))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(B, center(Circle(B, D, E))), Line(D, center(Circle(C, D, E))) we get concurrent(h, Line(B, center(Circle(B, D, E))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(E, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, D, E))), i, Line(F, G) we get concurrent(i, Line(F, G), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(E, G), Line(G, center(Circle(C, D, E))) we get concurrent(i, Line(E, G), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(D, E), Line(B, center(Circle(B, D, E))) we get concurrent(h, Line(D, E), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(B, D, E))), g we get concurrent(g, Line(D, E), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, F), i, Line(D, center(Circle(C, D, E))) we get concurrent(i, Line(D, F), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(B, D, E))), Line(F, G) we get concurrent(Line(E, F), Line(F, G), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on h, Line(B, center(Circle(B, D, E))), Line(D, F) we get concurrent(h, Line(D, F), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on f, Line(F, center(Circle(B, D, E))), Line(F, G) we get concurrent(f, Line(F, G), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on h, Line(C, D), Line(B, center(Circle(B, D, E))) we get concurrent(h, Line(C, D), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, F), i we get concurrent(i, Line(D, F), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, center(Circle(B, D, E))), Line(E, G) we get concurrent(Line(E, G), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By line_definition on D, B, Line(B, center(Circle(B, D, E))) we get Line(B, D) == Line(B, center(Circle(B, D, E)))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(D, center(Circle(C, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(B, center(Circle(B, D, E))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), g, Line(E, center(Circle(C, D, E))) we get concurrent(g, Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(C, D), Line(B, center(Circle(B, D, E))) we get concurrent(Line(C, D), Line(D, F), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on g, Line(E, center(Circle(C, D, E))), Line(E, G) we get concurrent(g, Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, D, E))), Line(C, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))) we get concurrent(Line(C, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, D, E))), f, Line(D, F) we get concurrent(f, Line(D, F), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(A, C), Line(C, G), Line(C, center(Circle(C, D, E))) we get concurrent(Line(A, C), Line(C, G), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(D, F), Line(B, center(Circle(B, D, E))) we get concurrent(h, Line(D, F), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(C, D), h we get concurrent(h, Line(C, D), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(C, G), Line(A, C), Line(C, center(Circle(C, D, E))) we get concurrent(Line(A, C), Line(C, G), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), altitude(B, C, D), g we get concurrent(g, altitude(B, C, D), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, E), h, Line(B, center(Circle(B, D, E))) we get concurrent(h, Line(D, E), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))), Line(E, G) we get concurrent(Line(E, G), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(E, center(Circle(C, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(E, center(Circle(C, D, E))), Line(E, F) we get concurrent(g, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), i, Line(D, center(Circle(C, D, E))) we get concurrent(i, Line(D, E), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(D, E), Line(D, center(Circle(C, D, E))) we get concurrent(h, Line(D, E), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), Line(A, C), g we get concurrent(g, Line(A, C), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(D, F), Line(F, center(Circle(B, D, E))) we get concurrent(Line(D, F), Line(F, G), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(B, D, E))), Line(E, G) we get concurrent(Line(E, F), Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(B, center(Circle(B, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(B, center(Circle(B, D, E))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(E, F), Line(F, center(Circle(B, D, E))) we get concurrent(f, Line(E, F), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(D, F), Line(C, D) we get concurrent(Line(C, D), Line(D, F), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(Circle(C, D, E))), i we get concurrent(i, Line(F, G), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), h, Line(D, E) we get concurrent(h, Line(D, E), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, G), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, G), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, G), Line(E, center(Circle(B, D, E))) we get concurrent(Line(E, F), Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on g, f, Line(B, center(Circle(B, D, E))) we get concurrent(f, g, Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on g, Line(E, G), Line(E, center(Circle(B, D, E))) we get concurrent(g, Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), i, Line(D, E) we get concurrent(i, Line(D, E), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, G), Line(E, F) we get concurrent(Line(E, F), Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on g, altitude(B, C, D), Line(B, center(Circle(B, D, E))) we get concurrent(g, altitude(B, C, D), Line(B, center(Circle(B, D, E))))
By tangent_definition_from_perpendicularity_v0 on line_circle_tangent_point(Line(D, E), Circle(B, E, H)), Line(D, E), Circle(B, E, H) we get perpendicular(Line(D, E), Line(center(Circle(B, E, H)), line_circle_tangent_point(Line(D, E), Circle(B, E, H))))
By concurrent_sufficient_conditions on Line(C, G), Line(F, G), Line(G, center(Circle(C, D, E))) we get concurrent(Line(C, G), Line(F, G), Line(G, center(Circle(C, D, E))))
By line_definition on D, line_circle_tangent_point(Line(D, E), Circle(B, E, H)), Line(D, E) we get Line(D, E) == Line(D, line_circle_tangent_point(Line(D, E), Circle(B, E, H)))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(Circle(B, D, E))), f we get concurrent(f, Line(F, G), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(B, D, E))), Line(E, G) we get concurrent(Line(D, E), Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), Line(A, C), Line(C, G) we get concurrent(Line(A, C), Line(C, G), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, F), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(E, F), Line(E, center(Circle(B, D, E))) we get concurrent(Line(E, F), Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, D, E))), Line(E, F), f we get concurrent(f, Line(E, F), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), Line(C, G), Line(A, C) we get concurrent(Line(A, C), Line(C, G), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(C, D), Line(D, E) we get concurrent(Line(C, D), Line(D, E), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), Line(F, center(Circle(B, D, E))) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), g, Line(E, G) we get concurrent(g, Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), g, Line(E, center(Circle(B, D, E))) we get concurrent(g, Line(E, F), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, F), h, Line(B, center(Circle(B, D, E))) we get concurrent(h, Line(D, F), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(C, D, E))), Line(E, G) we get concurrent(Line(E, F), Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(E, center(Circle(B, D, E))), g we get concurrent(g, Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(A, C), Line(C, center(Circle(C, D, E))), Line(C, G) we get concurrent(Line(A, C), Line(C, G), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(D, E), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, altitude(B, C, D), Line(B, center(Circle(B, D, E))) we get concurrent(f, altitude(B, C, D), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on h, Line(D, center(Circle(C, D, E))), Line(B, center(Circle(B, D, E))) we get concurrent(h, Line(B, center(Circle(B, D, E))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, G), Line(E, center(Circle(B, D, E))) we get concurrent(Line(E, G), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By line_definition on midpoint(E, F), G, i we get i == Line(G, midpoint(E, F))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, G), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(C, D, E))), g we get concurrent(g, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(D, center(Circle(C, D, E))), i we get concurrent(i, Line(D, F), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, F), g we get concurrent(g, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), f, Line(F, center(Circle(B, D, E))) we get concurrent(f, Line(D, F), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on i, Line(G, center(Circle(C, D, E))), Line(F, G) we get concurrent(i, Line(F, G), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(D, center(Circle(C, D, E))), h we get concurrent(h, Line(B, center(Circle(B, D, E))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(D, center(Circle(C, D, E))), h we get concurrent(h, i, Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(D, E), g we get concurrent(g, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, D, E))), Line(F, G), Line(D, F) we get concurrent(Line(D, F), Line(F, G), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on i, Line(G, center(Circle(C, D, E))), Line(C, G) we get concurrent(i, Line(C, G), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(A, C), Line(C, center(Circle(C, D, E))) we get concurrent(g, Line(A, C), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, F), Line(E, center(Circle(B, D, E))) we get concurrent(Line(E, F), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, F), h we get concurrent(h, Line(D, F), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(E, center(Circle(C, D, E))), g we get concurrent(g, Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, g, Line(B, center(Circle(B, D, E))) we get concurrent(f, g, Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(D, E), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, G), Line(C, center(Circle(C, D, E))), g we get concurrent(g, Line(C, G), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(B, D, E))), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on f, Line(B, center(Circle(B, D, E))), g we get concurrent(f, g, Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(D, center(Circle(C, D, E))), Line(D, F) we get concurrent(Line(D, F), Line(B, center(Circle(B, D, E))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(G, center(Circle(C, D, E))), Line(F, G) we get concurrent(Line(E, G), Line(F, G), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(C, D), Line(B, center(Circle(B, D, E))) we get concurrent(Line(C, D), Line(D, E), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), f, g we get concurrent(f, g, Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on g, Line(B, center(Circle(B, D, E))), f we get concurrent(f, g, Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(C, G), Line(G, center(Circle(C, D, E))) we get concurrent(Line(C, G), Line(E, G), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), g, Line(E, center(Circle(B, D, E))) we get concurrent(g, Line(D, E), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, E), Line(D, F) we get concurrent(Line(D, E), Line(D, F), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(E, center(Circle(B, D, E))), Line(E, G) we get concurrent(g, Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, D, E))), Line(E, G), Line(F, G) we get concurrent(Line(E, G), Line(F, G), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(E, F), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, D, E))), f, Line(F, G) we get concurrent(f, Line(F, G), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, G), g, Line(E, center(Circle(B, D, E))) we get concurrent(g, Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), h, Line(D, center(Circle(C, D, E))) we get concurrent(h, Line(B, center(Circle(B, D, E))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on altitude(B, C, D), Line(B, center(Circle(B, D, E))), g we get concurrent(g, altitude(B, C, D), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(D, center(Circle(C, D, E))), Line(B, center(Circle(B, D, E))) we get concurrent(Line(D, F), Line(B, center(Circle(B, D, E))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(B, D, E))), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), g, Line(D, E) we get concurrent(g, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(Circle(C, D, E))), Line(B, center(Circle(B, D, E))) we get concurrent(Line(D, E), Line(B, center(Circle(B, D, E))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, C), g, Line(C, center(Circle(C, D, E))) we get concurrent(g, Line(A, C), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(D, E), Line(E, center(Circle(B, D, E))) we get concurrent(Line(D, E), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(C, D, E))), Line(E, G) we get concurrent(Line(D, E), Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(B, center(Circle(B, D, E))), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(B, center(Circle(B, D, E))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(D, E), Line(D, F) we get concurrent(Line(D, E), Line(D, F), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), altitude(B, C, D), f we get concurrent(f, altitude(B, C, D), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on g, Line(C, G), Line(C, center(Circle(C, D, E))) we get concurrent(g, Line(C, G), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(D, F), h we get concurrent(h, Line(D, F), Line(B, center(Circle(B, D, E))))
By line_definition on midpoint(E, F), B, i we get i == Line(B, midpoint(E, F))
By concurrent_sufficient_conditions on g, Line(E, F), Line(E, center(Circle(B, D, E))) we get concurrent(g, Line(E, F), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(D, E), Line(E, center(Circle(B, D, E))) we get concurrent(Line(D, E), Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(D, center(Circle(C, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(D, F), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, D), Line(B, center(Circle(B, D, E))), h we get concurrent(h, Line(C, D), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(B, center(Circle(B, D, E))), Line(D, F) we get concurrent(Line(D, E), Line(D, F), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(E, F), g we get concurrent(g, Line(E, F), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on h, Line(D, center(Circle(C, D, E))), Line(D, F) we get concurrent(h, Line(D, F), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), i, Line(D, F) we get concurrent(i, Line(D, F), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), g, Line(E, G) we get concurrent(g, Line(E, G), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), g, Line(E, center(Circle(B, D, E))) we get concurrent(g, Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), h, Line(D, E) we get concurrent(h, Line(D, E), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(C, D, E))), g we get concurrent(g, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(D, center(Circle(C, D, E))), Line(D, E) we get concurrent(i, Line(D, E), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, center(Circle(B, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, C), Line(C, center(Circle(C, D, E))), g we get concurrent(g, Line(A, C), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(B, center(Circle(B, D, E))), h we get concurrent(h, Line(D, F), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on g, Line(E, center(Circle(B, D, E))), Line(D, E) we get concurrent(g, Line(D, E), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, E), i we get concurrent(i, Line(D, E), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), f, Line(F, center(Circle(B, D, E))) we get concurrent(f, Line(E, F), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on f, Line(D, F), Line(F, center(Circle(B, D, E))) we get concurrent(f, Line(D, F), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), Line(G, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))) we get concurrent(Line(C, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), f, altitude(B, C, D) we get concurrent(f, altitude(B, C, D), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, D, E))), Line(E, G), Line(C, G) we get concurrent(Line(C, G), Line(E, G), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, F), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(D, F), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(D, center(Circle(C, D, E))), Line(D, F) we get concurrent(i, Line(D, F), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), h, Line(D, F) we get concurrent(h, Line(D, F), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, D, E))), i, Line(E, G) we get concurrent(i, Line(E, G), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, D, E))), Line(D, E), h we get concurrent(h, Line(D, E), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(B, D, E))), f we get concurrent(f, Line(E, F), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), g, Line(D, E) we get concurrent(g, Line(D, E), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(C, D, E))), Line(E, center(Circle(B, D, E))) we get concurrent(Line(E, F), Line(E, center(Circle(B, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, G), Line(E, G), Line(G, center(Circle(C, D, E))) we get concurrent(Line(C, G), Line(E, G), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(F, G), Line(G, center(Circle(C, D, E))) we get concurrent(Line(E, G), Line(F, G), Line(G, center(Circle(C, D, E))))
By perpendicular_line_definition on F, Line(F, center(Circle(D, F, H))), f we get perpendicular_line(F, f) == Line(F, center(Circle(D, F, H)))
By concurrent_sufficient_conditions on h, i, Line(D, center(Circle(C, D, E))) we get concurrent(h, i, Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, D, E))), Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(Circle(C, D, E))), i we get concurrent(i, Line(D, E), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), Line(F, center(Circle(B, D, E))), Line(B, center(Circle(B, D, E))) we get concurrent(Line(B, center(Circle(B, D, E))), Line(E, center(Circle(B, D, E))), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, D, E))), Line(B, center(Circle(B, D, E))), Line(E, center(Circle(B, D, E))) we get concurrent(Line(B, center(Circle(B, D, E))), Line(E, center(Circle(B, D, E))), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, D, E))), Line(E, center(Circle(B, D, E))), Line(B, center(Circle(B, D, E))) we get concurrent(Line(B, center(Circle(B, D, E))), Line(E, center(Circle(B, D, E))), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, G), f, Line(F, center(Circle(B, D, E))) we get concurrent(f, Line(F, G), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, D, E))), Line(E, F), Line(F, G) we get concurrent(Line(E, F), Line(F, G), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on i, Line(F, G), Line(G, center(Circle(C, D, E))) we get concurrent(i, Line(F, G), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(G, center(Circle(C, D, E))), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, D, E))), Line(F, G), f we get concurrent(f, Line(F, G), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, F), h, Line(D, center(Circle(C, D, E))) we get concurrent(h, Line(D, F), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, D, E))), g, Line(E, F) we get concurrent(g, Line(E, F), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on i, h, Line(D, center(Circle(C, D, E))) we get concurrent(h, i, Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(D, E), Line(E, center(Circle(B, D, E))) we get concurrent(g, Line(D, E), Line(E, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(G, center(Circle(C, D, E))) we get concurrent(Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, G), Line(E, F) we get concurrent(Line(E, F), Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), i, h we get concurrent(h, i, Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(B, center(Circle(B, D, E))), h we get concurrent(h, Line(D, E), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(Circle(B, D, E))), Line(D, F) we get concurrent(Line(D, F), Line(F, G), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(G, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(G, center(Circle(C, D, E))), i we get concurrent(i, Line(E, G), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), i, Line(G, center(Circle(C, D, E))) we get concurrent(i, Line(F, G), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(B, D, E))), Line(F, G) we get concurrent(Line(D, F), Line(F, G), Line(F, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(Circle(C, D, E))), Line(E, G) we get concurrent(Line(E, G), Line(F, G), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), h, Line(B, center(Circle(B, D, E))) we get concurrent(h, Line(B, center(Circle(B, D, E))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, D, E))), Line(F, G), i we get concurrent(i, Line(F, G), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(B, center(Circle(B, D, E))), Line(D, F) we get concurrent(Line(D, F), Line(B, center(Circle(B, D, E))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, D), Line(B, center(Circle(B, D, E))), Line(D, F) we get concurrent(Line(C, D), Line(D, F), Line(B, center(Circle(B, D, E))))
By concurrent_sufficient_conditions on Line(C, D), Line(B, center(Circle(B, D, E))), Line(D, E) we get concurrent(Line(C, D), Line(D, E), Line(B, center(Circle(B, D, E))))
By tangent_definition_from_perpendicularity_v0 on line_circle_tangent_point(Line(D, F), Circle(B, F, H)), Line(D, F), Circle(B, F, H) we get perpendicular(Line(D, F), Line(center(Circle(B, F, H)), line_circle_tangent_point(Line(D, F), Circle(B, F, H))))
By tangent_definition_from_perpendicularity_v0 on E, Line(D, E), Circle(B, E, H) we get perpendicular(Line(D, E), Line(E, center(Circle(B, E, H))))
By line_intersection_definition on D, Line(B, center(Circle(B, D, E))), radical_axis(Circle(C, D, E), Circle(D, F, H)) we get D == line_intersection(radical_axis(Circle(C, D, E), Circle(D, F, H)), Line(B, center(Circle(B, D, E))))
By line_intersection_definition on H, Line(E, F), Line(H, I) we get H == line_intersection(Line(E, F), Line(H, I))
By line_intersection_definition on D, radical_axis(Circle(C, D, E), Circle(D, F, H)), i we get D == line_intersection(i, radical_axis(Circle(C, D, E), Circle(D, F, H)))
By line_intersection_definition on D, h, Line(D, center(Circle(D, F, H))) we get D == line_intersection(h, Line(D, center(Circle(D, F, H))))
By line_intersection_definition on E, Line(E, I), Line(E, center(Circle(B, D, E))) we get E == line_intersection(Line(E, I), Line(E, center(Circle(B, D, E))))
By line_intersection_definition on I, Line(H, I), h we get I == line_intersection(h, Line(H, I))
By line_intersection_definition on I, h, Line(E, I) we get I == line_intersection(h, Line(E, I))
By line_intersection_definition on E, Line(E, center(Circle(D, E, H))), Line(E, center(Circle(C, D, E))) we get E == line_intersection(Line(E, center(Circle(C, D, E))), Line(E, center(Circle(D, E, H))))
By line_intersection_definition on E, Line(E, center(Circle(D, E, H))), Line(E, center(Circle(B, D, E))) we get E == line_intersection(Line(E, center(Circle(B, D, E))), Line(E, center(Circle(D, E, H))))
By line_intersection_definition on I, Line(E, I), Line(H, I) we get I == line_intersection(Line(E, I), Line(H, I))
By line_intersection_definition on D, Line(D, E), Line(D, center(Circle(D, F, H))) we get D == line_intersection(Line(D, E), Line(D, center(Circle(D, F, H))))
By line_intersection_definition on D, Line(D, center(Circle(D, F, H))), Line(D, center(Circle(C, D, E))) we get D == line_intersection(Line(D, center(Circle(C, D, E))), Line(D, center(Circle(D, F, H))))
By line_intersection_definition on H, Line(H, I), Line(H, center(Circle(D, E, H))) we get H == line_intersection(Line(H, I), Line(H, center(Circle(D, E, H))))
By line_intersection_definition on E, Line(A, E), Line(E, I) we get E == line_intersection(Line(A, E), Line(E, I))
By line_intersection_definition on H, Line(H, center(Circle(D, F, H))), Line(A, H) we get H == line_intersection(Line(A, H), Line(H, center(Circle(D, F, H))))
By line_intersection_definition on H, Line(H, center(Circle(D, F, H))), i we get H == line_intersection(i, Line(H, center(Circle(D, F, H))))
By line_intersection_definition on A, Line(A, H), f we get A == line_intersection(f, Line(A, H))
By line_intersection_definition on E, Line(E, center(Circle(D, E, H))), g we get E == line_intersection(g, Line(E, center(Circle(D, E, H))))
By line_intersection_definition on E, Line(E, G), Line(E, I) we get E == line_intersection(Line(E, G), Line(E, I))
By circle_definition on H, B, line_circle_tangent_point(Line(D, F), Circle(B, F, H)), Circle(B, F, H) we get Circle(B, F, H) == Circle(B, H, line_circle_tangent_point(Line(D, F), Circle(B, F, H)))
By line_intersection_definition on D, Line(D, center(Circle(D, E, H))), Line(D, center(Circle(D, F, H))) we get D == line_intersection(Line(D, center(Circle(D, E, H))), Line(D, center(Circle(D, F, H))))
By line_intersection_definition on H, Line(E, F), Line(H, center(Circle(D, F, H))) we get H == line_intersection(Line(E, F), Line(H, center(Circle(D, F, H))))
By line_intersection_definition on F, Line(F, center(Circle(B, D, E))), Line(F, center(Circle(D, F, H))) we get F == line_intersection(Line(F, center(Circle(B, D, E))), Line(F, center(Circle(D, F, H))))
By line_intersection_definition on A, Line(A, E), Line(A, H) we get A == line_intersection(Line(A, E), Line(A, H))
By median_definition on G, F, E, i we get i == median(G, E, F)
By line_intersection_definition on H, Line(H, center(Circle(D, E, H))), Line(E, F) we get H == line_intersection(Line(E, F), Line(H, center(Circle(D, E, H))))
By perpendicular_line_definition on F, f, Line(F, center(Circle(D, F, H))) we get f == perpendicular_line(F, Line(F, center(Circle(D, F, H))))
By line_intersection_definition on A, Line(A, E), f we get A == line_intersection(f, Line(A, E))
By line_intersection_definition on E, Line(A, E), Line(E, F) we get E == line_intersection(Line(A, E), Line(E, F))
By line_intersection_definition on I, Line(E, I), Line(B, I) we get I == line_intersection(Line(B, I), Line(E, I))
By line_intersection_definition on F, Line(F, center(Circle(D, F, H))), Line(E, F) we get F == line_intersection(Line(E, F), Line(F, center(Circle(D, F, H))))
By line_intersection_definition on B, Line(B, center(Circle(B, D, E))), Line(B, I) we get B == line_intersection(Line(B, I), Line(B, center(Circle(B, D, E))))
By line_intersection_definition on H, Line(H, center(Circle(D, E, H))), i we get H == line_intersection(i, Line(H, center(Circle(D, E, H))))
By line_intersection_definition on E, Line(E, center(Circle(C, D, E))), Line(E, I) we get E == line_intersection(Line(E, I), Line(E, center(Circle(C, D, E))))
By circle_definition on B, line_circle_tangent_point(Line(D, E), Circle(B, E, H)), H, Circle(B, E, H) we get Circle(B, E, H) == Circle(B, H, line_circle_tangent_point(Line(D, E), Circle(B, E, H)))
By line_intersection_definition on E, Line(E, F), Line(E, center(Circle(D, E, H))) we get E == line_intersection(Line(E, F), Line(E, center(Circle(D, E, H))))
By radical_axis_of_intersecting_circles_v0 on A, I, Circle(A, E, I), Circle(A, F, I) we get Line(A, I) == radical_axis(Circle(A, E, I), Circle(A, F, I))
By line_intersection_definition on E, Line(E, I), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, I))
By line_intersection_definition on D, h, radical_axis(Circle(C, D, E), Circle(D, F, H)) we get D == line_intersection(h, radical_axis(Circle(C, D, E), Circle(D, F, H)))
By line_intersection_definition on I, Line(B, I), h we get I == line_intersection(h, Line(B, I))
By line_intersection_definition on D, radical_axis(Circle(C, D, E), Circle(D, F, H)), Line(D, F) we get D == line_intersection(Line(D, F), radical_axis(Circle(C, D, E), Circle(D, F, H)))
By line_intersection_definition on H, Line(H, center(Circle(D, F, H))), Line(H, I) we get H == line_intersection(Line(H, I), Line(H, center(Circle(D, F, H))))
By line_intersection_definition on B, i, Line(B, I) we get B == line_intersection(i, Line(B, I))
By line_intersection_definition on E, g, Line(E, I) we get E == line_intersection(g, Line(E, I))
By line_intersection_definition on H, Line(E, F), Line(A, H) we get H == line_intersection(Line(A, H), Line(E, F))
By line_intersection_definition on center(Circle(D, F, H)), Line(D, center(Circle(D, F, H))), Line(H, center(Circle(D, F, H))) we get center(Circle(D, F, H)) == line_intersection(Line(D, center(Circle(D, F, H))), Line(H, center(Circle(D, F, H))))
By line_intersection_definition on D, radical_axis(Circle(C, D, E), Circle(D, F, H)), Line(C, D) we get D == line_intersection(Line(C, D), radical_axis(Circle(C, D, E), Circle(D, F, H)))
By line_intersection_definition on B, Line(B, I), altitude(B, C, D) we get B == line_intersection(Line(B, I), altitude(B, C, D))
By line_intersection_definition on D, Line(D, F), Line(D, center(Circle(D, E, H))) we get D == line_intersection(Line(D, F), Line(D, center(Circle(D, E, H))))
By median_definition on D, F, E, i we get i == median(D, E, F)
By perpendicular_line_definition on center(Circle(D, E, H)), Line(E, center(Circle(D, E, H))), g we get Line(E, center(Circle(D, E, H))) == perpendicular_line(center(Circle(D, E, H)), g)
By perpendicular_line_definition on B, f, Line(F, center(Circle(D, F, H))) we get f == perpendicular_line(B, Line(F, center(Circle(D, F, H))))
By line_intersection_definition on D, radical_axis(Circle(C, D, E), Circle(D, F, H)), Line(D, center(Circle(D, F, H))) we get D == line_intersection(radical_axis(Circle(C, D, E), Circle(D, F, H)), Line(D, center(Circle(D, F, H))))
By line_intersection_definition on E, Line(E, G), Line(A, E) we get E == line_intersection(Line(A, E), Line(E, G))
By line_intersection_definition on center(Circle(D, E, H)), Line(D, center(Circle(D, E, H))), Line(H, center(Circle(D, E, H))) we get center(Circle(D, E, H)) == line_intersection(Line(D, center(Circle(D, E, H))), Line(H, center(Circle(D, E, H))))
By line_intersection_definition on center(Circle(D, E, H)), Line(E, center(Circle(D, E, H))), Line(H, center(Circle(D, E, H))) we get center(Circle(D, E, H)) == line_intersection(Line(E, center(Circle(D, E, H))), Line(H, center(Circle(D, E, H))))
By line_intersection_definition on D, Line(D, E), radical_axis(Circle(C, D, E), Circle(D, F, H)) we get D == line_intersection(Line(D, E), radical_axis(Circle(C, D, E), Circle(D, F, H)))
By line_intersection_definition on A, Line(A, H), h we get A == line_intersection(h, Line(A, H))
By line_intersection_definition on H, Line(A, H), Line(H, I) we get H == line_intersection(Line(A, H), Line(H, I))
By perpendicular_line_definition on line_circle_tangent_point(Line(D, E), Circle(B, E, H)), Line(D, E), g we get Line(D, E) == perpendicular_line(line_circle_tangent_point(Line(D, E), Circle(B, E, H)), g)
By line_intersection_definition on E, Line(E, center(Circle(C, D, E))), Line(A, E) we get E == line_intersection(Line(A, E), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on F, Line(F, G), Line(F, center(Circle(D, F, H))) we get F == line_intersection(Line(F, G), Line(F, center(Circle(D, F, H))))
By line_intersection_definition on I, Line(F, G), Line(E, I) we get I == line_intersection(Line(E, I), Line(F, G))
By perpendicular_line_definition on line_circle_tangent_point(Line(D, F), Circle(B, F, H)), Line(D, F), f we get Line(D, F) == perpendicular_line(line_circle_tangent_point(Line(D, F), Circle(B, F, H)), f)
By line_intersection_definition on D, i, Line(D, center(Circle(D, F, H))) we get D == line_intersection(i, Line(D, center(Circle(D, F, H))))
By line_intersection_definition on E, Line(E, I), Line(E, center(Circle(D, E, H))) we get E == line_intersection(Line(E, I), Line(E, center(Circle(D, E, H))))
By line_intersection_definition on H, Line(H, I), i we get H == line_intersection(i, Line(H, I))
By line_intersection_definition on A, Line(A, E), Line(A, C) we get A == line_intersection(Line(A, C), Line(A, E))
By line_intersection_definition on D, h, Line(D, center(Circle(D, E, H))) we get D == line_intersection(h, Line(D, center(Circle(D, E, H))))
By line_intersection_definition on D, Line(D, center(Circle(C, D, E))), radical_axis(Circle(C, D, E), Circle(D, F, H)) we get D == line_intersection(radical_axis(Circle(C, D, E), Circle(D, F, H)), Line(D, center(Circle(C, D, E))))
By perpendicular_line_definition on midpoint(E, F), i, Line(C, G) we get i == perpendicular_line(midpoint(E, F), Line(C, G))
By line_intersection_definition on D, Line(D, center(Circle(D, E, H))), i we get D == line_intersection(i, Line(D, center(Circle(D, E, H))))
By line_intersection_definition on D, Line(D, center(Circle(D, E, H))), Line(B, center(Circle(B, D, E))) we get D == line_intersection(Line(B, center(Circle(B, D, E))), Line(D, center(Circle(D, E, H))))
By line_intersection_definition on A, h, Line(A, E) we get A == line_intersection(h, Line(A, E))
By line_intersection_definition on B, g, Line(B, I) we get B == line_intersection(g, Line(B, I))
By line_intersection_definition on F, f, Line(F, center(Circle(D, F, H))) we get F == line_intersection(f, Line(F, center(Circle(D, F, H))))
By line_intersection_definition on D, Line(C, D), Line(D, center(Circle(D, F, H))) we get D == line_intersection(Line(C, D), Line(D, center(Circle(D, F, H))))
By line_intersection_definition on A, Line(A, C), Line(A, H) we get A == line_intersection(Line(A, C), Line(A, H))
By perpendicular_line_definition on center(Circle(D, F, H)), Line(F, center(Circle(D, F, H))), f we get Line(F, center(Circle(D, F, H))) == perpendicular_line(center(Circle(D, F, H)), f)
By line_intersection_definition on E, Line(A, E), Line(E, center(Circle(B, D, E))) we get E == line_intersection(Line(A, E), Line(E, center(Circle(B, D, E))))
By line_intersection_definition on D, Line(D, center(Circle(D, E, H))), Line(C, D) we get D == line_intersection(Line(C, D), Line(D, center(Circle(D, E, H))))
By line_intersection_definition on I, Line(H, I), Line(F, G) we get I == line_intersection(Line(F, G), Line(H, I))
By line_intersection_definition on E, Line(E, center(Circle(D, E, H))), Line(A, E) we get E == line_intersection(Line(A, E), Line(E, center(Circle(D, E, H))))
By line_intersection_definition on E, Line(E, I), Line(E, F) we get E == line_intersection(Line(E, F), Line(E, I))
By perpendicular_line_definition on C, g, Line(E, center(Circle(D, E, H))) we get g == perpendicular_line(C, Line(E, center(Circle(D, E, H))))
By line_intersection_definition on I, Line(H, I), Line(B, I) we get I == line_intersection(Line(B, I), Line(H, I))
By line_intersection_definition on D, Line(D, center(Circle(D, F, H))), Line(B, center(Circle(B, D, E))) we get D == line_intersection(Line(B, center(Circle(B, D, E))), Line(D, center(Circle(D, F, H))))
By line_intersection_definition on E, Line(E, G), Line(E, center(Circle(D, E, H))) we get E == line_intersection(Line(E, G), Line(E, center(Circle(D, E, H))))
By line_intersection_definition on B, f, Line(B, I) we get B == line_intersection(f, Line(B, I))
By line_intersection_definition on H, Line(H, center(Circle(D, E, H))), Line(H, center(Circle(D, F, H))) we get H == line_intersection(Line(H, center(Circle(D, E, H))), Line(H, center(Circle(D, F, H))))
By line_intersection_definition on D, Line(D, center(Circle(D, E, H))), radical_axis(Circle(C, D, E), Circle(D, F, H)) we get D == line_intersection(radical_axis(Circle(C, D, E), Circle(D, F, H)), Line(D, center(Circle(D, E, H))))
By line_intersection_definition on E, Line(A, E), g we get E == line_intersection(g, Line(A, E))
By line_intersection_definition on H, Line(A, H), i we get H == line_intersection(i, Line(A, H))
By median_definition on B, E, F, i we get i == median(B, E, F)
By line_intersection_definition on I, Line(B, I), Line(F, G) we get I == line_intersection(Line(B, I), Line(F, G))
By line_intersection_definition on center(Circle(D, F, H)), Line(H, center(Circle(D, F, H))), Line(F, center(Circle(D, F, H))) we get center(Circle(D, F, H)) == line_intersection(Line(F, center(Circle(D, F, H))), Line(H, center(Circle(D, F, H))))
By perpendicular_line_definition on B, g, Line(E, center(Circle(D, E, H))) we get g == perpendicular_line(B, Line(E, center(Circle(D, E, H))))
By line_intersection_definition on E, Line(A, E), Line(D, E) we get E == line_intersection(Line(A, E), Line(D, E))
By line_intersection_definition on D, Line(D, center(Circle(D, E, H))), Line(D, center(Circle(C, D, E))) we get D == line_intersection(Line(D, center(Circle(C, D, E))), Line(D, center(Circle(D, E, H))))
By line_intersection_definition on H, Line(H, center(Circle(D, E, H))), Line(A, H) we get H == line_intersection(Line(A, H), Line(H, center(Circle(D, E, H))))
By perpendicular_line_definition on E, g, Line(E, center(Circle(D, E, H))) we get g == perpendicular_line(E, Line(E, center(Circle(D, E, H))))
By perpendicular_line_definition on A, f, Line(F, center(Circle(D, F, H))) we get f == perpendicular_line(A, Line(F, center(Circle(D, F, H))))
By line_uniqueness on D, B, Line(B, center(Circle(B, D, E))), i we get i == Line(B, center(Circle(B, D, E)))
By same_angle_v1 on B, G, H, I we get angle(G, B, I) == angle(H, B, I) mod 360
By same_angle_v1 on A, B, F, E we get angle(B, A, E) == angle(F, A, E) mod 360
By same_angle_v2 on H, B, D, I we get angle(B, H, I) == angle(D, H, I) + 180 mod 360
By same_angle_v2 on I, D, A, H we get angle(D, I, H) == angle(A, I, H) + 180 mod 360
By same_angle_converse_v1 on center(Circle(D, E, H)), E, D, H we get collinear(D, E, center(Circle(D, E, H)))
By same_angle_v3 on I, G, F, E we get angle(G, I, E) == angle(F, I, E) + 180 mod 360
By perpendicular_direction_conditions_v0 on B, center(Circle(B, D, E)), H, F we get perpendicular(Line(F, H), Line(B, center(Circle(B, D, E))))
By same_angle_v3 on H, B, G, A we get angle(B, H, A) == angle(G, H, A) + 180 mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(D, F, H)), F, B, F we get 180 == 2 * direction(center(Circle(D, F, H)), F) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0 on center(Circle(B, D, E)), D, G, orthocenter(B, C, D) we get perpendicular(Line(G, orthocenter(B, C, D)), Line(D, center(Circle(B, D, E))))
By perpendicular_direction_conditions_v0 on orthocenter(B, C, D), projection(B, Line(C, D)), D, center(Circle(C, D, E)) we get perpendicular(Line(D, center(Circle(C, D, E))), Line(orthocenter(B, C, D), projection(B, Line(C, D))))
By perpendicular_direction_conditions_v0 on H, I, D, C we get perpendicular(Line(C, D), Line(H, I))
By same_angle_v2 on E, B, C, A we get angle(B, E, A) == angle(C, E, A) + 180 mod 360
By perpendicular_direction_conditions_v0 on D, center(Circle(B, D, E)), C, orthocenter(B, C, D) we get perpendicular(Line(C, orthocenter(B, C, D)), Line(D, center(Circle(B, D, E))))
By same_angle_converse_v1 on center(Circle(D, F, H)), F, D, H we get collinear(D, F, center(Circle(D, F, H)))
By perpendicular_direction_conditions_v0 on H, F, center(Circle(B, D, E)), D we get perpendicular(Line(F, H), Line(D, center(Circle(B, D, E))))
By perpendicular_direction_conditions_v0 on center(Circle(C, D, E)), C, H, I we get perpendicular(Line(H, I), Line(C, center(Circle(C, D, E))))
By perpendicular_direction_conditions_v0 on C, orthocenter(B, C, D), center(Circle(B, D, E)), B we get perpendicular(Line(C, orthocenter(B, C, D)), Line(B, center(Circle(B, D, E))))
By same_angle_v2 on E, B, C, I we get angle(B, E, I) == angle(C, E, I) + 180 mod 360
By perpendicular_direction_conditions_v0 on B, center(Circle(B, D, E)), G, C we get perpendicular(Line(C, G), Line(B, center(Circle(B, D, E))))
By perpendicular_direction_conditions_v0_r on B, C, center(Circle(D, E, H)), E we get 180 == 2 * direction(B, C) - 2 * direction(center(Circle(D, E, H)), E) mod 360
By perpendicular_direction_conditions_v0 on D, projection(B, Line(C, D)), I, H we get perpendicular(Line(H, I), Line(D, projection(B, Line(C, D))))
By same_angle_v0 on B, A, F, I we get angle(A, B, I) == angle(F, B, I) mod 360
By same_angle_v1 on B, G, D, I we get angle(D, B, I) == angle(G, B, I) mod 360
By same_angle_v1 on A, I, D, E we get angle(D, A, E) == angle(I, A, E) mod 360
By perpendicular_direction_conditions_v0 on B, center(Circle(B, D, E)), G, orthocenter(B, C, D) we get perpendicular(Line(G, orthocenter(B, C, D)), Line(B, center(Circle(B, D, E))))
By perpendicular_direction_conditions_v0 on center(Circle(B, D, E)), D, E, F we get perpendicular(Line(E, F), Line(D, center(Circle(B, D, E))))
By same_angle_v0 on E, F, H, A we get angle(F, E, A) == angle(H, E, A) mod 360
By same_angle_v3 on I, G, F, H we get angle(G, I, H) == angle(F, I, H) + 180 mod 360
By same_angle_v1 on H, D, G, I we get angle(D, H, I) == angle(G, H, I) mod 360
By perpendicular_direction_conditions_v0 on G, C, center(Circle(B, D, E)), D we get perpendicular(Line(C, G), Line(D, center(Circle(B, D, E))))
By perpendicular_direction_conditions_v0 on D, center(Circle(B, D, E)), E, H we get perpendicular(Line(E, H), Line(D, center(Circle(B, D, E))))
By same_angle_v1 on A, F, B, H we get angle(B, A, H) == angle(F, A, H) mod 360
By perpendicular_direction_conditions_v0 on E, F, center(Circle(B, D, E)), B we get perpendicular(Line(E, F), Line(B, center(Circle(B, D, E))))
By perpendicular_direction_conditions_v0 on C, center(Circle(C, D, E)), orthocenter(B, C, D), projection(B, Line(C, D)) we get perpendicular(Line(C, center(Circle(C, D, E))), Line(orthocenter(B, C, D), projection(B, Line(C, D))))
By same_angle_v0 on A, I, D, H we get angle(D, A, H) == angle(I, A, H) mod 360
By perpendicular_direction_conditions_v0 on B, center(Circle(B, D, E)), E, H we get perpendicular(Line(E, H), Line(B, center(Circle(B, D, E))))
By same_angle_v2 on H, F, E, A we get angle(F, H, A) == angle(E, H, A) + 180 mod 360
By same_angle_v3 on I, G, F, B we get angle(G, I, B) == angle(F, I, B) + 180 mod 360
By perpendicular_direction_conditions_v0 on C, center(Circle(C, D, E)), orthocenter(B, C, D), B we get perpendicular(Line(B, orthocenter(B, C, D)), Line(C, center(Circle(C, D, E))))
By perpendicular_direction_conditions_v0 on projection(B, Line(C, D)), B, center(Circle(C, D, E)), C we get perpendicular(Line(C, center(Circle(C, D, E))), Line(B, projection(B, Line(C, D))))
By same_angle_v2 on H, B, G, I we get angle(B, H, I) == angle(G, H, I) + 180 mod 360
By same_angle_v2 on H, B, D, A we get angle(B, H, A) == angle(D, H, A) + 180 mod 360
By same_angle_v1 on B, H, D, I we get angle(D, B, I) == angle(H, B, I) mod 360
By perpendicular_direction_conditions_v0 on D, center(Circle(C, D, E)), B, projection(B, Line(C, D)) we get perpendicular(Line(D, center(Circle(C, D, E))), Line(B, projection(B, Line(C, D))))
By same_angle_v1 on B, E, C, I we get angle(C, B, I) == angle(E, B, I) mod 360
By same_angle_v2 on I, D, A, B we get angle(D, I, B) == angle(A, I, B) + 180 mod 360
By perpendicular_direction_conditions_v0 on B, orthocenter(B, C, D), center(Circle(C, D, E)), D we get perpendicular(Line(B, orthocenter(B, C, D)), Line(D, center(Circle(C, D, E))))
By same_angle_v2 on I, A, D, E we get angle(A, I, E) == angle(D, I, E) + 180 mod 360
By same_angle_v1 on H, G, D, A we get angle(D, H, A) == angle(G, H, A) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(D, E, H)), E, B, C we get 180 == 2 * direction(center(Circle(D, E, H)), E) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on F, B, center(Circle(D, F, H)), F we get 180 == 2 * direction(F, B) - 2 * direction(center(Circle(D, F, H)), F) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(D, F, H)), F, B, A we get 180 == 2 * direction(center(Circle(D, F, H)), F) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0 on I, H, C, projection(B, Line(C, D)) we get perpendicular(Line(H, I), Line(C, projection(B, Line(C, D))))
By same_angle_v0 on E, H, F, I we get angle(F, E, I) == angle(H, E, I) mod 360
By perpendicular_direction_conditions_v0_r on E, B, center(Circle(D, E, H)), E we get 180 == 2 * direction(E, B) - 2 * direction(center(Circle(D, E, H)), E) mod 360
By perpendicular_direction_conditions_v0_r on C, B, center(Circle(D, E, H)), E we get 180 == 2 * direction(C, B) - 2 * direction(center(Circle(D, E, H)), E) mod 360
By perpendicular_direction_conditions_v0 on D, center(Circle(C, D, E)), H, I we get perpendicular(Line(H, I), Line(D, center(Circle(C, D, E))))
By same_angle_v2 on H, F, E, I we get angle(F, H, I) == angle(E, H, I) + 180 mod 360
By perpendicular_direction_conditions_v0_r on C, E, center(Circle(D, E, H)), E we get 180 == 2 * direction(C, E) - 2 * direction(center(Circle(D, E, H)), E) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(D, F, H)), F, F, A we get 180 == 2 * direction(center(Circle(D, F, H)), F) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on A, F, center(Circle(D, F, H)), F we get 180 == 2 * direction(A, F) - 2 * direction(center(Circle(D, F, H)), F) mod 360
By between_imply_not_between on F, midpoint(E, F), E we get collinear_and_not_between(E, F, midpoint(E, F))
By perpendicular_direction_conditions_v0_r on B, E, center(Circle(D, E, H)), E we get 180 == 2 * direction(B, E) - 2 * direction(center(Circle(D, E, H)), E) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(D, E, H)), E, E, C we get 180 == 2 * direction(center(Circle(D, E, H)), E) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(D, E, H)), E, C, E we get 180 == 2 * direction(center(Circle(D, E, H)), E) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(D, F, H)), F, A, F we get 180 == 2 * direction(center(Circle(D, F, H)), F) - 2 * direction(A, F) mod 360
By between_imply_not_between on E, midpoint(E, F), F we get collinear_and_not_between(F, E, midpoint(E, F))
By perpendicular_direction_conditions_v0_r on E, C, center(Circle(D, E, H)), E we get 180 == 2 * direction(E, C) - 2 * direction(center(Circle(D, E, H)), E) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(D, F, H)), F, A, B we get 180 == 2 * direction(center(Circle(D, F, H)), F) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(D, E, H)), E, E, B we get 180 == 2 * direction(center(Circle(D, E, H)), E) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(D, F, H)), F, F, B we get 180 == 2 * direction(center(Circle(D, F, H)), F) - 2 * direction(F, B) mod 360
By between_imply_not_between on G, I, F we get collinear_and_not_between(F, G, I)
By perpendicular_direction_conditions_v0_r on center(Circle(D, E, H)), E, B, E we get 180 == 2 * direction(center(Circle(D, E, H)), E) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on B, F, center(Circle(D, F, H)), F we get 180 == 2 * direction(B, F) - 2 * direction(center(Circle(D, F, H)), F) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(D, E, H)), E, C, B we get 180 == 2 * direction(center(Circle(D, E, H)), E) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on F, A, center(Circle(D, F, H)), F we get 180 == 2 * direction(F, A) - 2 * direction(center(Circle(D, F, H)), F) mod 360
By perpendicular_direction_conditions_v0_r on A, B, center(Circle(D, F, H)), F we get 180 == 2 * direction(A, B) - 2 * direction(center(Circle(D, F, H)), F) mod 360
By projection_definition on F, I, h we get I == projection(F, h)
By perpendicular_direction_conditions_v0_r on B, A, center(Circle(D, F, H)), F we get 180 == 2 * direction(B, A) - 2 * direction(center(Circle(D, F, H)), F) mod 360
By between_imply_not_between on E, H, F we get collinear_and_not_between(F, E, H)
By between_imply_not_between on F, I, G we get collinear_and_not_between(G, F, I)
By between_imply_not_between on F, H, E we get collinear_and_not_between(E, F, H)
By circle_radius_v0_r on B, Circle(B, F, H) we get radius(Circle(B, F, H)) == distance(B, center(Circle(B, F, H)))
By circle_radius_v0_r on F, Circle(B, F, H) we get radius(Circle(B, F, H)) == distance(F, center(Circle(B, F, H)))
By circle_radius_v0_r on H, Circle(B, E, H) we get radius(Circle(B, E, H)) == distance(H, center(Circle(B, E, H)))
By circle_radius_v0_r on B, Circle(B, E, H) we get radius(Circle(B, E, H)) == distance(B, center(Circle(B, E, H)))
By circle_radius_v0_r on H, Circle(B, F, H) we get radius(Circle(B, F, H)) == distance(H, center(Circle(B, F, H)))
By circle_radius_v0_r on line_circle_tangent_point(Line(D, F), Circle(B, F, H)), Circle(B, F, H) we get radius(Circle(B, F, H)) == distance(center(Circle(B, F, H)), line_circle_tangent_point(Line(D, F), Circle(B, F, H)))
By circle_radius_v0_r on line_circle_tangent_point(Line(D, E), Circle(B, E, H)), Circle(B, E, H) we get radius(Circle(B, E, H)) == distance(center(Circle(B, E, H)), line_circle_tangent_point(Line(D, E), Circle(B, E, H)))
By circle_radius_v0_r on E, Circle(B, E, H) we get radius(Circle(B, E, H)) == distance(E, center(Circle(B, E, H)))
By angle_to_center on E, B, H, Circle(B, E, H) we get 2 * angle(E, B, H) == angle(E, center(Circle(B, E, H)), H) mod 360
By angle_to_center on E, H, B, Circle(B, E, H) we get 2 * angle(E, H, B) == angle(E, center(Circle(B, E, H)), B) mod 360
By perpendicular_direction_conditions_v0_r on A, B, F, center(Circle(D, F, H)) we get 180 == 2 * direction(A, B) - 2 * direction(F, center(Circle(D, F, H))) mod 360
By angle_to_center on F, B, H, Circle(B, F, H) we get 2 * angle(F, B, H) == angle(F, center(Circle(B, F, H)), H) mod 360
By angle_to_center on H, F, B, Circle(B, F, H) we get 2 * angle(H, F, B) == angle(H, center(Circle(B, F, H)), B) mod 360
By angle_to_center on B, E, H, Circle(B, E, H) we get 2 * angle(B, E, H) == angle(B, center(Circle(B, E, H)), H) mod 360
By angle_to_center on B, H, E, Circle(B, E, H) we get 2 * angle(B, H, E) == angle(B, center(Circle(B, E, H)), E) mod 360
By angle_to_center on B, H, F, Circle(B, F, H) we get 2 * angle(B, H, F) == angle(B, center(Circle(B, F, H)), F) mod 360
By angle_to_center on B, F, H, Circle(B, F, H) we get 2 * angle(B, F, H) == angle(B, center(Circle(B, F, H)), H) mod 360
By angle_to_center on H, B, E, Circle(B, E, H) we get 2 * angle(H, B, E) == angle(H, center(Circle(B, E, H)), E) mod 360
By angle_to_center on H, B, F, Circle(B, F, H) we get 2 * angle(H, B, F) == angle(H, center(Circle(B, F, H)), F) mod 360
By angle_to_center on H, E, B, Circle(B, E, H) we get 2 * angle(H, E, B) == angle(H, center(Circle(B, E, H)), B) mod 360
By angle_to_center on F, H, B, Circle(B, F, H) we get 2 * angle(F, H, B) == angle(F, center(Circle(B, F, H)), B) mod 360
By in_imply_collinear on midpoint(E, F), D, G we get collinear(D, G, midpoint(E, F))
By perpendicular_direction_conditions_v0_r on F, center(Circle(D, F, H)), F, B we get 180 == 2 * direction(F, center(Circle(D, F, H))) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on E, B, E, center(Circle(D, E, H)) we get 180 == 2 * direction(E, B) - 2 * direction(E, center(Circle(D, E, H))) mod 360
By perpendicular_direction_conditions_v0_r on E, center(Circle(D, E, H)), B, E we get 180 == 2 * direction(E, center(Circle(D, E, H))) - 2 * direction(B, E) mod 360
By projection_definition on B, E, Line(E, center(Circle(D, E, H))) we get E == projection(B, Line(E, center(Circle(D, E, H))))
By perpendicular_direction_conditions_v0_r on B, F, F, center(Circle(D, F, H)) we get 180 == 2 * direction(B, F) - 2 * direction(F, center(Circle(D, F, H))) mod 360
By perpendicular_direction_conditions_v0_r on C, B, E, center(Circle(D, E, H)) we get 180 == 2 * direction(C, B) - 2 * direction(E, center(Circle(D, E, H))) mod 360
By perpendicular_direction_conditions_v0_r on F, B, F, center(Circle(D, F, H)) we get 180 == 2 * direction(F, B) - 2 * direction(F, center(Circle(D, F, H))) mod 360
By perpendicular_direction_conditions_v0_r on B, C, E, center(Circle(D, E, H)) we get 180 == 2 * direction(B, C) - 2 * direction(E, center(Circle(D, E, H))) mod 360
By perpendicular_direction_conditions_v0_r on E, center(Circle(D, E, H)), B, C we get 180 == 2 * direction(E, center(Circle(D, E, H))) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on F, center(Circle(D, F, H)), B, F we get 180 == 2 * direction(F, center(Circle(D, F, H))) - 2 * direction(B, F) mod 360
By projection_definition on A, F, Line(F, center(Circle(D, F, H))) we get F == projection(A, Line(F, center(Circle(D, F, H))))
By perpendicular_direction_conditions_v0_r on E, center(Circle(D, E, H)), E, B we get 180 == 2 * direction(E, center(Circle(D, E, H))) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on E, C, E, center(Circle(D, E, H)) we get 180 == 2 * direction(E, C) - 2 * direction(E, center(Circle(D, E, H))) mod 360
By projection_definition on center(Circle(D, E, H)), E, g we get E == projection(center(Circle(D, E, H)), g)
By perpendicular_direction_conditions_v0_r on F, center(Circle(D, F, H)), A, F we get 180 == 2 * direction(F, center(Circle(D, F, H))) - 2 * direction(A, F) mod 360
By in_imply_collinear on midpoint(E, F), D, H we get collinear(D, H, midpoint(E, F))
By perpendicular_direction_conditions_v0_r on E, center(Circle(D, E, H)), C, E we get 180 == 2 * direction(E, center(Circle(D, E, H))) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on F, center(Circle(D, F, H)), A, B we get 180 == 2 * direction(F, center(Circle(D, F, H))) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on A, F, F, center(Circle(D, F, H)) we get 180 == 2 * direction(A, F) - 2 * direction(F, center(Circle(D, F, H))) mod 360
By projection_definition on center(Circle(D, F, H)), F, f we get F == projection(center(Circle(D, F, H)), f)
By perpendicular_direction_conditions_v0_r on B, A, F, center(Circle(D, F, H)) we get 180 == 2 * direction(B, A) - 2 * direction(F, center(Circle(D, F, H))) mod 360
By perpendicular_direction_conditions_v0_r on F, center(Circle(D, F, H)), F, A we get 180 == 2 * direction(F, center(Circle(D, F, H))) - 2 * direction(F, A) mod 360
By in_imply_collinear on midpoint(E, F), H, G we get collinear(G, H, midpoint(E, F))
By perpendicular_direction_conditions_v0_r on F, A, F, center(Circle(D, F, H)) we get 180 == 2 * direction(F, A) - 2 * direction(F, center(Circle(D, F, H))) mod 360
By orthocenter_concurrency on F, D, G we get orthocenter(D, F, G) in altitude(F, D, G), orthocenter(D, F, G) in altitude(D, F, G), orthocenter(D, F, G) in altitude(G, D, F)
By perpendicular_direction_conditions_v0_r on F, center(Circle(D, F, H)), B, A we get 180 == 2 * direction(F, center(Circle(D, F, H))) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on C, E, E, center(Circle(D, E, H)) we get 180 == 2 * direction(C, E) - 2 * direction(E, center(Circle(D, E, H))) mod 360
By perpendicular_direction_conditions_v0_r on B, E, E, center(Circle(D, E, H)) we get 180 == 2 * direction(B, E) - 2 * direction(E, center(Circle(D, E, H))) mod 360
By projection_definition on B, F, Line(F, center(Circle(D, F, H))) we get F == projection(B, Line(F, center(Circle(D, F, H))))
By in_imply_collinear on midpoint(E, F), D, B we get collinear(B, D, midpoint(E, F))
By projection_definition on C, E, Line(E, center(Circle(D, E, H))) we get E == projection(C, Line(E, center(Circle(D, E, H))))
By perpendicular_direction_conditions_v0_r on E, center(Circle(D, E, H)), E, C we get 180 == 2 * direction(E, center(Circle(D, E, H))) - 2 * direction(E, C) mod 360
By in_imply_collinear on line_circle_tangent_point(Line(D, E), Circle(B, E, H)), orthocenter(B, C, D), D we get collinear(D, orthocenter(B, C, D), line_circle_tangent_point(Line(D, E), Circle(B, E, H)))
By perpendicular_direction_conditions_v0_r on E, center(Circle(D, E, H)), C, B we get 180 == 2 * direction(E, center(Circle(D, E, H))) - 2 * direction(C, B) mod 360
By in_imply_collinear on midpoint(E, F), G, B we get collinear(B, G, midpoint(E, F))
By in_imply_collinear on line_circle_tangent_point(Line(D, E), Circle(B, E, H)), orthocenter(B, C, D), E we get collinear(E, orthocenter(B, C, D), line_circle_tangent_point(Line(D, E), Circle(B, E, H)))
By in_imply_collinear on line_circle_tangent_point(Line(D, F), Circle(B, F, H)), D, F we get collinear(D, F, line_circle_tangent_point(Line(D, F), Circle(B, F, H)))
By in_imply_collinear on midpoint(E, F), B, H we get collinear(B, H, midpoint(E, F))
By tangent_point_is_unique on F, line_circle_tangent_point(Line(D, F), Circle(B, F, H)), Circle(B, F, H), Line(D, F) we get F == line_circle_tangent_point(Line(D, F), Circle(B, F, H))
By reverse_direction on E, I we get 180 == direction(E, I) - direction(I, E) mod 360
By reverse_direction on B, I we get 180 == direction(B, I) - direction(I, B) mod 360
By in_imply_collinear on line_circle_tangent_point(Line(D, E), Circle(B, E, H)), E, D we get collinear(D, E, line_circle_tangent_point(Line(D, E), Circle(B, E, H)))
By in_imply_concyclic on E, B, H, line_circle_tangent_point(Line(D, E), Circle(B, E, H)) we get concyclic(B, E, H, line_circle_tangent_point(Line(D, E), Circle(B, E, H)))
By tangent_point_is_unique on line_circle_tangent_point(Line(D, E), Circle(B, E, H)), E, Circle(B, E, H), Line(D, E) we get E == line_circle_tangent_point(Line(D, E), Circle(B, E, H))
By internal_angle_bisector_definition_v0_r on E, center(Circle(B, D, E)), F, B we get internal_angle_bisector(E, B, F) == Line(B, center(Circle(B, D, E)))
By tangent_chord_angle_reverse_v2 on E, A, I, D we get angle(A, I, E) == angle(A, E, D) + 180 mod 360
By reverse_direction on I, B we get 180 == direction(I, B) - direction(B, I) mod 360
By sas_anti_similarity on E, C, A, I, G, E we get anti_similar_triangles(A, C, E, E, G, I)
By in_imply_concyclic on H, B, F, line_circle_tangent_point(Line(D, F), Circle(B, F, H)) we get concyclic(B, F, H, line_circle_tangent_point(Line(D, F), Circle(B, F, H)))
By sas_anti_similarity on E, G, I, A, C, E we get anti_similar_triangles(A, C, E, E, G, I)
By reverse_direction on A, E we get 180 == direction(A, E) - direction(E, A) mod 360
By tangent_chord_angle_reverse_v1 on E, I, A, D we get angle(I, A, E) == angle(I, E, D) mod 360
By sas_anti_similarity on F, G, D, H, G, I we get anti_similar_triangles(D, F, G, I, H, G)
By sas_anti_similarity on A, C, D, H, G, I we get anti_similar_triangles(A, C, D, H, G, I)
By double_perpendicular_and_parallel_v0 on Line(D, E), g, Line(E, center(Circle(D, E, H))) we get parallel(Line(D, E), Line(E, center(Circle(D, E, H))))
By reverse_direction on I, E we get 180 == direction(I, E) - direction(E, I) mod 360
By collinear_definition on D, center(Circle(C, D, E)), C we get center(Circle(C, D, E)) in Line(C, D), C in Line(D, center(Circle(C, D, E))), Line(C, D) == Line(D, center(Circle(C, D, E))), 0 == 2 * angle(center(Circle(C, D, E)), D, C) mod 360
By between_imply_segment_sum on F, I, G we get distance(F, G) == distance(F, I) + distance(G, I)
By sas_similarity on H, G, I, E, G, D we get similar_triangles(D, E, G, I, H, G)
By collinear_definition on center(Circle(C, D, E)), C, D we get C in Line(D, center(Circle(C, D, E))), D in Line(C, center(Circle(C, D, E))), Line(C, center(Circle(C, D, E))) == Line(D, center(Circle(C, D, E))), 0 == 2 * angle(C, center(Circle(C, D, E)), D) mod 360
By collinear_definition on D, center(Circle(B, D, E)), B we get center(Circle(B, D, E)) in Line(B, D), B in Line(D, center(Circle(B, D, E))), Line(B, D) == Line(D, center(Circle(B, D, E))), 0 == 2 * angle(center(Circle(B, D, E)), D, B) mod 360
By sas_anti_similarity on A, C, E, E, G, I we get anti_similar_triangles(A, C, E, E, G, I)
By reverse_direction on H, A we get 180 == direction(H, A) - direction(A, H) mod 360
By internal_angle_bisector_definition_v0_r on E, center(Circle(B, D, E)), F, D we get internal_angle_bisector(E, D, F) == Line(D, center(Circle(B, D, E)))
By sas_anti_similarity on I, G, H, D, G, F we get anti_similar_triangles(D, F, G, I, H, G)
By reverse_direction on A, H we get 180 == direction(A, H) - direction(H, A) mod 360
By sas_anti_similarity on D, C, A, I, G, H we get anti_similar_triangles(A, C, D, H, G, I)
By collinear_definition on D, C, center(Circle(C, D, E)) we get C in Line(D, center(Circle(C, D, E))), center(Circle(C, D, E)) in Line(C, D), Line(C, D) == Line(D, center(Circle(C, D, E))), 0 == 2 * angle(C, D, center(Circle(C, D, E))) mod 360
By sas_anti_similarity on H, G, I, F, G, D we get anti_similar_triangles(D, F, G, I, H, G)
By collinear_definition on B, D, center(Circle(B, D, E)) we get D in Line(B, center(Circle(B, D, E))), center(Circle(B, D, E)) in Line(B, D), Line(B, D) == Line(B, center(Circle(B, D, E))), 0 == 2 * angle(D, B, center(Circle(B, D, E))) mod 360
By sas_anti_similarity on H, G, I, A, C, D we get anti_similar_triangles(A, C, D, H, G, I)
By reverse_direction on E, A we get 180 == direction(E, A) - direction(A, E) mod 360
By sas_anti_similarity on D, G, F, I, G, H we get anti_similar_triangles(D, F, G, I, H, G)
By sas_anti_similarity on I, G, E, E, C, A we get anti_similar_triangles(A, C, E, E, G, I)
By collinear_definition on C, D, center(Circle(C, D, E)) we get D in Line(C, center(Circle(C, D, E))), center(Circle(C, D, E)) in Line(C, D), Line(C, D) == Line(C, center(Circle(C, D, E))), 0 == 2 * angle(D, C, center(Circle(C, D, E))) mod 360
By between_imply_segment_sum on F, H, E we get distance(E, F) == distance(F, H) + distance(E, H)
By sas_similarity on D, G, E, I, G, H we get similar_triangles(D, E, G, I, H, G)
By collinear_definition on C, center(Circle(C, D, E)), D we get center(Circle(C, D, E)) in Line(C, D), D in Line(C, center(Circle(C, D, E))), Line(C, D) == Line(C, center(Circle(C, D, E))), 0 == 2 * angle(center(Circle(C, D, E)), C, D) mod 360
By sas_anti_similarity on I, G, H, D, C, A we get anti_similar_triangles(A, C, D, H, G, I)
By sas_similarity on I, G, H, D, G, E we get similar_triangles(D, E, G, I, H, G)
By double_perpendicular_and_parallel_v0 on Line(F, center(Circle(D, F, H))), f, Line(D, F) we get parallel(Line(D, F), Line(F, center(Circle(D, F, H))))
By collinear_definition on B, center(Circle(B, D, E)), D we get center(Circle(B, D, E)) in Line(B, D), D in Line(B, center(Circle(B, D, E))), Line(B, D) == Line(B, center(Circle(B, D, E))), 0 == 2 * angle(center(Circle(B, D, E)), B, D) mod 360
By sas_similarity on E, G, D, H, G, I we get similar_triangles(D, E, G, I, H, G)
By collinear_definition on D, B, center(Circle(B, D, E)) we get B in Line(D, center(Circle(B, D, E))), center(Circle(B, D, E)) in Line(B, D), Line(B, D) == Line(D, center(Circle(B, D, E))), 0 == 2 * angle(B, D, center(Circle(B, D, E))) mod 360
By angle_to_center on line_circle_tangent_point(Line(D, E), Circle(B, E, H)), H, B, Circle(B, E, H) we get angle(line_circle_tangent_point(Line(D, E), Circle(B, E, H)), center(Circle(B, E, H)), B) == 2 * angle(line_circle_tangent_point(Line(D, E), Circle(B, E, H)), H, B) mod 360
By angle_to_center on B, H, line_circle_tangent_point(Line(D, F), Circle(B, F, H)), Circle(B, F, H) we get angle(B, center(Circle(B, F, H)), line_circle_tangent_point(Line(D, F), Circle(B, F, H))) == 2 * angle(B, H, line_circle_tangent_point(Line(D, F), Circle(B, F, H))) mod 360
By angle_to_center on line_circle_tangent_point(Line(D, F), Circle(B, F, H)), B, H, Circle(B, F, H) we get angle(line_circle_tangent_point(Line(D, F), Circle(B, F, H)), center(Circle(B, F, H)), H) == 2 * angle(line_circle_tangent_point(Line(D, F), Circle(B, F, H)), B, H) mod 360
By angle_to_center on line_circle_tangent_point(Line(D, F), Circle(B, F, H)), H, B, Circle(B, F, H) we get angle(line_circle_tangent_point(Line(D, F), Circle(B, F, H)), center(Circle(B, F, H)), B) == 2 * angle(line_circle_tangent_point(Line(D, F), Circle(B, F, H)), H, B) mod 360
By angle_to_center on H, B, line_circle_tangent_point(Line(D, F), Circle(B, F, H)), Circle(B, F, H) we get angle(H, center(Circle(B, F, H)), line_circle_tangent_point(Line(D, F), Circle(B, F, H))) == 2 * angle(H, B, line_circle_tangent_point(Line(D, F), Circle(B, F, H))) mod 360
By angle_to_center on H, B, line_circle_tangent_point(Line(D, E), Circle(B, E, H)), Circle(B, E, H) we get angle(H, center(Circle(B, E, H)), line_circle_tangent_point(Line(D, E), Circle(B, E, H))) == 2 * angle(H, B, line_circle_tangent_point(Line(D, E), Circle(B, E, H))) mod 360
By angle_to_center on line_circle_tangent_point(Line(D, E), Circle(B, E, H)), B, H, Circle(B, E, H) we get angle(line_circle_tangent_point(Line(D, E), Circle(B, E, H)), center(Circle(B, E, H)), H) == 2 * angle(line_circle_tangent_point(Line(D, E), Circle(B, E, H)), B, H) mod 360
By angle_to_center on B, H, line_circle_tangent_point(Line(D, E), Circle(B, E, H)), Circle(B, E, H) we get angle(B, center(Circle(B, E, H)), line_circle_tangent_point(Line(D, E), Circle(B, E, H))) == 2 * angle(B, H, line_circle_tangent_point(Line(D, E), Circle(B, E, H))) mod 360
By perpendicular_bisector_properties on F, E we get perpendicular(Line(E, F), perpendicular_bisector(E, F)), midpoint(E, F) == line_intersection(Line(E, F), perpendicular_bisector(E, F))
By perpendicular_angle_conditions_v0 on center(Circle(D, E, H)), E, C we get angle(center(Circle(D, E, H)), E, C) == orientation(C, center(Circle(D, E, H)), E) mod 360
By power_of_a_point_in_circle on I, Circle(A, E, I) we get 0 == power_of_a_point(I, Circle(A, E, I))
By reverse_direction on center(Circle(D, F, H)), H we get 180 == direction(center(Circle(D, F, H)), H) - direction(H, center(Circle(D, F, H))) mod 360
By internal_angle_bisector_definition_v0_r on F, A, G, I we get Line(A, I) == internal_angle_bisector(F, I, G)
By anti_similar_triangle_basic_properties on D, I, H, D, B, A we get angle(D, I, H) == 0 - angle(D, B, A) mod 360, angle(I, H, D) == 0 - angle(B, A, D) mod 360, angle(H, D, I) == 0 - angle(A, D, B) mod 360, log(distance(B, D)) + log(distance(H, I)) == log(distance(D, I)) + log(distance(A, B)), log(distance(A, B)) + log(distance(D, H)) == log(distance(H, I)) + log(distance(A, D)), log(distance(A, D)) + log(distance(D, I)) == log(distance(D, H)) + log(distance(B, D))
By internal_angle_bisector_definition_v0_r on I, F, I, G we get Line(F, G) == internal_angle_bisector(I, G, I)
By external_angle_bisector_definition_v0_r on E, C, F, G we get Line(C, G) == external_angle_bisector(E, G, F)
By external_angle_bisector_definition_v0_r on F, A, F, I we get Line(A, I) == external_angle_bisector(F, I, F)
By internal_angle_bisector_definition_v0_r on F, G, F, I we get Line(G, I) == internal_angle_bisector(F, I, F)
By anti_similar_triangle_basic_properties on F, D, I, C, D, G we get angle(F, D, I) == 0 - angle(C, D, G) mod 360, angle(D, I, F) == 0 - angle(D, G, C) mod 360, angle(I, F, D) == 0 - angle(G, C, D) mod 360, log(distance(C, D)) + log(distance(D, I)) == log(distance(D, F)) + log(distance(D, G)), log(distance(D, G)) + log(distance(F, I)) == log(distance(D, I)) + log(distance(C, G)), log(distance(C, G)) + log(distance(D, F)) == log(distance(F, I)) + log(distance(C, D))
By anti_similar_triangle_basic_properties on D, A, B, D, H, I we get angle(D, A, B) == 0 - angle(D, H, I) mod 360, angle(A, B, D) == 0 - angle(H, I, D) mod 360, angle(B, D, A) == 0 - angle(I, D, H) mod 360, log(distance(A, D)) + log(distance(H, I)) == log(distance(D, H)) + log(distance(A, B)), log(distance(A, B)) + log(distance(D, I)) == log(distance(H, I)) + log(distance(B, D)), log(distance(B, D)) + log(distance(D, H)) == log(distance(D, I)) + log(distance(A, D))
By external_angle_bisector_definition_v0_r on I, C, E, G we get Line(C, G) == external_angle_bisector(E, G, I)
By perpendicular_angle_conditions_v0 on C, E, center(Circle(D, E, H)) we get angle(C, E, center(Circle(D, E, H))) == orientation(C, E, center(Circle(D, E, H))) mod 360
By perpendicular_angle_conditions_v0 on center(Circle(D, F, H)), F, B we get angle(center(Circle(D, F, H)), F, B) == orientation(B, center(Circle(D, F, H)), F) mod 360
By internal_angle_bisector_definition_v0_r on I, G, I, F we get Line(F, G) == internal_angle_bisector(I, F, I)
By anti_similar_triangle_basic_properties on D, F, I, D, A, F we get angle(D, F, I) == 0 - angle(D, A, F) mod 360, angle(F, I, D) == 0 - angle(A, F, D) mod 360, angle(I, D, F) == 0 - angle(F, D, A) mod 360, log(distance(A, D)) + log(distance(F, I)) == log(distance(D, F)) + log(distance(A, F)), log(distance(A, F)) + log(distance(D, I)) == log(distance(F, I)) + log(distance(D, F)), log(distance(D, F)) + log(distance(D, F)) == log(distance(D, I)) + log(distance(A, D))
By perpendicular_lines_draw_intersection on Line(E, center(Circle(D, E, H))), g we get exists(line_intersection(g, Line(E, center(Circle(D, E, H)))))
By anti_similar_triangle_basic_properties on C, G, D, F, I, D we get angle(C, G, D) == 0 - angle(F, I, D) mod 360, angle(G, D, C) == 0 - angle(I, D, F) mod 360, angle(D, C, G) == 0 - angle(D, F, I) mod 360, log(distance(C, G)) + log(distance(D, I)) == log(distance(F, I)) + log(distance(D, G)), log(distance(D, G)) + log(distance(D, F)) == log(distance(D, I)) + log(distance(C, D)), log(distance(C, D)) + log(distance(F, I)) == log(distance(D, F)) + log(distance(C, G))
By isosceles_triangle_altitude_v3 on center(Circle(B, D, E)), F, E we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, center(Circle(B, D, E)), F), perpendicular_line(center(Circle(B, D, E)), Line(E, F)))
By radical_axis_definition_v0_r on E, Circle(C, D, E), Circle(B, E, H) we get E in radical_axis(Circle(B, E, H), Circle(C, D, E))
By draw_point_of_tangency on Line(D, F), Circle(A, F, I) we get exists(line_circle_tangent_point(Line(D, F), Circle(A, F, I)))
By power_of_a_point_in_circle on line_circle_tangent_point(Line(D, E), Circle(B, E, H)), Circle(B, E, H) we get 0 == power_of_a_point(line_circle_tangent_point(Line(D, E), Circle(B, E, H)), Circle(B, E, H))
By power_of_a_point_in_circle on A, Circle(A, E, I) we get 0 == power_of_a_point(A, Circle(A, E, I))
By anti_similar_triangle_basic_properties on D, I, F, D, F, A we get angle(D, I, F) == 0 - angle(D, F, A) mod 360, angle(I, F, D) == 0 - angle(F, A, D) mod 360, angle(F, D, I) == 0 - angle(A, D, F) mod 360, log(distance(D, F)) + log(distance(F, I)) == log(distance(D, I)) + log(distance(A, F)), log(distance(A, F)) + log(distance(D, F)) == log(distance(F, I)) + log(distance(A, D)), log(distance(A, D)) + log(distance(D, I)) == log(distance(D, F)) + log(distance(D, F))
By reverse_direction on center(Circle(D, E, H)), D we get 180 == direction(center(Circle(D, E, H)), D) - direction(D, center(Circle(D, E, H))) mod 360
By external_angle_bisector_definition_v0_r on F, D, F, I we get Line(D, I) == external_angle_bisector(F, I, F)
By perpendicular_angle_conditions_v0 on A, F, center(Circle(D, F, H)) we get angle(A, F, center(Circle(D, F, H))) == orientation(A, F, center(Circle(D, F, H))) mod 360
By internal_angle_bisector_definition_v0_r on F, I, F, G we get Line(G, I) == internal_angle_bisector(F, G, F)
By power_of_a_point_in_circle on A, Circle(A, F, I) we get 0 == power_of_a_point(A, Circle(A, F, I))
By internal_angle_bisector_definition_v0_r on F, H, F, E we get Line(E, H) == internal_angle_bisector(F, E, F)
By log_of_2_times_distance on E, F, E, midpoint(E, F) we get log(distance(E, F)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(E, midpoint(E, F)))
By isosceles_triangle_midpoint on G, F, E we get midpoint(E, F) in median(G, E, F)
By isosceles_triangle_midpoint on center(Circle(B, D, E)), E, F we get midpoint(E, F) in median(center(Circle(B, D, E)), E, F)
By perpendicular_angle_conditions_v0 on B, E, center(Circle(D, E, H)) we get angle(B, E, center(Circle(D, E, H))) == orientation(B, E, center(Circle(D, E, H))) mod 360
By internal_angle_bisector_definition_v0_r on E, H, E, F we get Line(F, H) == internal_angle_bisector(E, F, E)
By internal_angle_bisector_definition_v0_r on F, D, G, I we get Line(D, I) == internal_angle_bisector(F, I, G)
By perpendicular_lines_draw_intersection on f, Line(F, center(Circle(D, F, H))) we get exists(line_intersection(f, Line(F, center(Circle(D, F, H)))))
By internal_angle_bisector_definition_v0_r on F, E, F, H we get Line(E, H) == internal_angle_bisector(F, H, F)
By radical_axis_definition_v0_r on H, Circle(D, E, H), Circle(B, F, H) we get H in radical_axis(Circle(B, F, H), Circle(D, E, H))
By internal_angle_bisector_definition_v0_r on G, F, G, I we get Line(F, I) == internal_angle_bisector(G, I, G)
By perpendicular_angle_conditions_v0 on B, F, center(Circle(D, F, H)) we get angle(B, F, center(Circle(D, F, H))) == orientation(B, F, center(Circle(D, F, H))) mod 360
By power_of_a_point_in_circle on E, Circle(A, E, I) we get 0 == power_of_a_point(E, Circle(A, E, I))
By radical_axis_definition_v0_r on H, Circle(D, F, H), Circle(B, E, H) we get H in radical_axis(Circle(B, E, H), Circle(D, F, H))
By power_of_a_point_in_circle on I, Circle(A, F, I) we get 0 == power_of_a_point(I, Circle(A, F, I))
By collinear_definition on E, midpoint(E, F), F we get midpoint(E, F) in Line(E, F), F in Line(E, midpoint(E, F)), Line(E, F) == Line(E, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), E, F) mod 360
By internal_angle_bisector_definition_v0_r on E, D, E, center(Circle(D, E, H)) we get Line(D, center(Circle(D, E, H))) == internal_angle_bisector(E, center(Circle(D, E, H)), E)
By internal_angle_bisector_definition_v0_r on F, D, F, center(Circle(D, F, H)) we get Line(D, center(Circle(D, F, H))) == internal_angle_bisector(F, center(Circle(D, F, H)), F)
By reverse_direction on center(Circle(D, F, H)), D we get 180 == direction(center(Circle(D, F, H)), D) - direction(D, center(Circle(D, F, H))) mod 360
By collinear_definition on F, midpoint(E, F), E we get midpoint(E, F) in Line(E, F), E in Line(F, midpoint(E, F)), Line(E, F) == Line(F, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), F, E) mod 360
By power_of_a_point_in_circle on F, Circle(A, F, I) we get 0 == power_of_a_point(F, Circle(A, F, I))
By power_of_a_point_on_circle on line_circle_tangent_point(Line(D, F), Circle(B, F, H)), Circle(B, F, H) we get 0 == power_of_a_point(line_circle_tangent_point(Line(D, F), Circle(B, F, H)), Circle(B, F, H))
By log_of_2_times_distance on F, E, F, midpoint(E, F) we get log(distance(E, F)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(F, midpoint(E, F)))
By perpendicular_angle_conditions_v0 on center(Circle(D, F, H)), F, A we get angle(center(Circle(D, F, H)), F, A) == orientation(A, center(Circle(D, F, H)), F) mod 360
By internal_angle_bisector_definition_v0_r on H, E, H, F we get Line(E, F) == internal_angle_bisector(H, F, H)
By reverse_direction on center(Circle(D, E, H)), E we get 180 == direction(center(Circle(D, E, H)), E) - direction(E, center(Circle(D, E, H))) mod 360
By reverse_direction on center(Circle(D, F, H)), F we get 180 == direction(center(Circle(D, F, H)), F) - direction(F, center(Circle(D, F, H))) mod 360
By reverse_direction on center(Circle(D, E, H)), H we get 180 == direction(center(Circle(D, E, H)), H) - direction(H, center(Circle(D, E, H))) mod 360
By internal_angle_bisector_definition_v0_r on H, F, H, E we get Line(E, F) == internal_angle_bisector(H, E, H)
By internal_angle_bisector_definition_v0_r on E, F, E, H we get Line(F, H) == internal_angle_bisector(E, H, E)
By perpendicular_angle_conditions_v0 on center(Circle(D, E, H)), E, B we get angle(center(Circle(D, E, H)), E, B) == orientation(B, center(Circle(D, E, H)), E) mod 360
By internal_angle_bisector_definition_v0_r on D, E, D, center(Circle(D, E, H)) we get Line(E, center(Circle(D, E, H))) == internal_angle_bisector(D, center(Circle(D, E, H)), D)
By collinear_definition on F, E, midpoint(E, F) we get E in Line(F, midpoint(E, F)), midpoint(E, F) in Line(E, F), Line(E, F) == Line(F, midpoint(E, F)), 0 == 2 * angle(E, F, midpoint(E, F)) mod 360
By internal_angle_bisector_definition_v0_r on D, F, D, center(Circle(D, F, H)) we get Line(F, center(Circle(D, F, H))) == internal_angle_bisector(D, center(Circle(D, F, H)), D)
By collinear_definition on E, F, midpoint(E, F) we get F in Line(E, midpoint(E, F)), midpoint(E, F) in Line(E, F), Line(E, F) == Line(E, midpoint(E, F)), 0 == 2 * angle(F, E, midpoint(E, F)) mod 360
By internal_angle_bisector_definition_v0_r on G, I, G, F we get Line(F, I) == internal_angle_bisector(G, F, G)
By draw_point_of_tangency on Line(D, E), Circle(A, E, I) we get exists(line_circle_tangent_point(Line(D, E), Circle(A, E, I)))
By isosceles_triangle_altitude_v2 on center(Circle(B, D, E)), E, F we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, center(Circle(B, D, E)), F), perpendicular_line(center(Circle(B, D, E)), Line(E, F)))
By isosceles_triangle_altitude_v2 on center(Circle(B, D, E)), F, E we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, center(Circle(B, D, E)), F), perpendicular_line(center(Circle(B, D, E)), Line(E, F)))
By isosceles_triangle_altitude_v3 on center(Circle(B, D, E)), E, F we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, center(Circle(B, D, E)), F), perpendicular_line(center(Circle(B, D, E)), Line(E, F)))
By angle_to_center on B, line_circle_tangent_point(Line(D, E), Circle(B, E, H)), H, Circle(B, E, H) we get angle(B, center(Circle(B, E, H)), H) == 2 * angle(B, line_circle_tangent_point(Line(D, E), Circle(B, E, H)), H) mod 360
By angle_to_center on H, line_circle_tangent_point(Line(D, E), Circle(B, E, H)), B, Circle(B, E, H) we get angle(H, center(Circle(B, E, H)), B) == 2 * angle(H, line_circle_tangent_point(Line(D, E), Circle(B, E, H)), B) mod 360
By angle_to_center on H, line_circle_tangent_point(Line(D, F), Circle(B, F, H)), B, Circle(B, F, H) we get angle(H, center(Circle(B, F, H)), B) == 2 * angle(H, line_circle_tangent_point(Line(D, F), Circle(B, F, H)), B) mod 360
By angle_to_center on B, line_circle_tangent_point(Line(D, F), Circle(B, F, H)), H, Circle(B, F, H) we get angle(B, center(Circle(B, F, H)), H) == 2 * angle(B, line_circle_tangent_point(Line(D, F), Circle(B, F, H)), H) mod 360
By anti_similar_triangle_basic_properties on I, E, D, E, A, D we get angle(I, E, D) == 0 - angle(E, A, D) mod 360, angle(E, D, I) == 0 - angle(A, D, E) mod 360, angle(D, I, E) == 0 - angle(D, E, A) mod 360, log(distance(A, E)) + log(distance(D, E)) == log(distance(E, I)) + log(distance(A, D)), log(distance(A, D)) + log(distance(D, I)) == log(distance(D, E)) + log(distance(D, E)), log(distance(D, E)) + log(distance(E, I)) == log(distance(D, I)) + log(distance(A, E))
By anti_similar_triangle_basic_properties on G, center(Circle(C, D, E)), C, C, center(Circle(C, D, E)), G we get angle(G, center(Circle(C, D, E)), C) == 0 - angle(C, center(Circle(C, D, E)), G) mod 360, angle(center(Circle(C, D, E)), C, G) == 0 - angle(center(Circle(C, D, E)), G, C) mod 360, angle(C, G, center(Circle(C, D, E))) == 0 - angle(G, C, center(Circle(C, D, E))) mod 360, log(distance(C, center(Circle(C, D, E)))) + log(distance(C, center(Circle(C, D, E)))) == log(distance(G, center(Circle(C, D, E)))) + log(distance(G, center(Circle(C, D, E)))), log(distance(C, center(Circle(C, D, E)))) + log(distance(C, G)) == log(distance(G, center(Circle(C, D, E)))) + log(distance(C, G)), log(distance(C, G)) + log(distance(C, center(Circle(C, D, E)))) == log(distance(C, G)) + log(distance(G, center(Circle(C, D, E))))
By anti_similar_triangle_basic_properties on I, D, B, H, D, A we get angle(I, D, B) == 0 - angle(H, D, A) mod 360, angle(D, B, I) == 0 - angle(D, A, H) mod 360, angle(B, I, D) == 0 - angle(A, H, D) mod 360, log(distance(D, H)) + log(distance(B, D)) == log(distance(D, I)) + log(distance(A, D)), log(distance(A, D)) + log(distance(B, I)) == log(distance(B, D)) + log(distance(A, H)), log(distance(A, H)) + log(distance(D, I)) == log(distance(B, I)) + log(distance(D, H))
By altitude_definition on B, F, center(Circle(D, F, H)), f we get f == altitude(B, F, center(Circle(D, F, H)))
By sas_anti_congruence on D, center(Circle(D, F, H)), H, H, center(Circle(D, F, H)), D we get anti_congruent_triangles(D, H, center(Circle(D, F, H)), H, D, center(Circle(D, F, H)))
By anti_similar_triangle_basic_properties on D, A, E, D, E, I we get angle(D, A, E) == 0 - angle(D, E, I) mod 360, angle(A, E, D) == 0 - angle(E, I, D) mod 360, angle(E, D, A) == 0 - angle(I, D, E) mod 360, log(distance(A, D)) + log(distance(E, I)) == log(distance(D, E)) + log(distance(A, E)), log(distance(A, E)) + log(distance(D, I)) == log(distance(E, I)) + log(distance(D, E)), log(distance(D, E)) + log(distance(D, E)) == log(distance(D, I)) + log(distance(A, D))
By radical_axis_definition_v0 on line_circle_tangent_point(Line(D, F), Circle(B, F, H)), Circle(D, F, H), Circle(B, D, E) we get power_of_a_point(line_circle_tangent_point(Line(D, F), Circle(B, F, H)), Circle(B, D, E)) == power_of_a_point(line_circle_tangent_point(Line(D, F), Circle(B, F, H)), Circle(D, F, H))
By anti_similar_triangle_basic_properties on B, D, I, A, D, H we get angle(B, D, I) == 0 - angle(A, D, H) mod 360, angle(D, I, B) == 0 - angle(D, H, A) mod 360, angle(I, B, D) == 0 - angle(H, A, D) mod 360, log(distance(A, D)) + log(distance(D, I)) == log(distance(B, D)) + log(distance(D, H)), log(distance(D, H)) + log(distance(B, I)) == log(distance(D, I)) + log(distance(A, H)), log(distance(A, H)) + log(distance(B, D)) == log(distance(B, I)) + log(distance(A, D))
By anti_similar_triangle_basic_properties on E, G, center(Circle(C, D, E)), G, E, center(Circle(C, D, E)) we get angle(E, G, center(Circle(C, D, E))) == 0 - angle(G, E, center(Circle(C, D, E))) mod 360, angle(G, center(Circle(C, D, E)), E) == 0 - angle(E, center(Circle(C, D, E)), G) mod 360, angle(center(Circle(C, D, E)), E, G) == 0 - angle(center(Circle(C, D, E)), G, E) mod 360, log(distance(E, G)) + log(distance(E, center(Circle(C, D, E)))) == log(distance(E, G)) + log(distance(G, center(Circle(C, D, E)))), log(distance(E, center(Circle(C, D, E)))) + log(distance(E, center(Circle(C, D, E)))) == log(distance(G, center(Circle(C, D, E)))) + log(distance(G, center(Circle(C, D, E)))), log(distance(E, center(Circle(C, D, E)))) + log(distance(E, G)) == log(distance(G, center(Circle(C, D, E)))) + log(distance(E, G))
By isosceles_triangle_properties on center(Circle(D, F, H)), H, F we get distance(F, center(Circle(D, F, H))) == distance(H, center(Circle(D, F, H))), angle(H, F, center(Circle(D, F, H))) == angle(center(Circle(D, F, H)), H, F) mod 360
By similar_triangle_basic_properties on I, D, F, I, F, A we get angle(I, D, F) == angle(I, F, A) mod 360, angle(D, F, I) == angle(F, A, I) mod 360, angle(A, I, F) == angle(F, I, D) mod 360, log(distance(D, I)) + log(distance(A, F)) == log(distance(F, I)) + log(distance(D, F)), log(distance(A, F)) + log(distance(F, I)) == log(distance(D, F)) + log(distance(A, I)), log(distance(A, I)) + log(distance(D, I)) == log(distance(F, I)) + log(distance(F, I))
By anti_similar_triangle_basic_properties on E, D, center(Circle(B, D, E)), D, E, center(Circle(B, D, E)) we get angle(E, D, center(Circle(B, D, E))) == 0 - angle(D, E, center(Circle(B, D, E))) mod 360, angle(D, center(Circle(B, D, E)), E) == 0 - angle(E, center(Circle(B, D, E)), D) mod 360, angle(center(Circle(B, D, E)), E, D) == 0 - angle(center(Circle(B, D, E)), D, E) mod 360, log(distance(D, E)) + log(distance(D, center(Circle(B, D, E)))) == log(distance(D, E)) + log(distance(E, center(Circle(B, D, E)))), log(distance(D, center(Circle(B, D, E)))) + log(distance(D, center(Circle(B, D, E)))) == log(distance(E, center(Circle(B, D, E)))) + log(distance(E, center(Circle(B, D, E)))), log(distance(D, center(Circle(B, D, E)))) + log(distance(D, E)) == log(distance(E, center(Circle(B, D, E)))) + log(distance(D, E))
By altitude_definition on midpoint(E, F), G, orthocenter(B, C, D), i we get i == altitude(midpoint(E, F), G, orthocenter(B, C, D))
By anti_similar_triangle_basic_properties on A, D, F, A, F, I we get angle(A, D, F) == 0 - angle(A, F, I) mod 360, angle(D, F, A) == 0 - angle(F, I, A) mod 360, angle(F, A, D) == 0 - angle(I, A, F) mod 360, log(distance(A, D)) + log(distance(F, I)) == log(distance(A, F)) + log(distance(D, F)), log(distance(D, F)) + log(distance(A, I)) == log(distance(F, I)) + log(distance(A, F)), log(distance(A, F)) + log(distance(A, F)) == log(distance(A, I)) + log(distance(A, D))
By anti_similar_triangle_basic_properties on F, I, A, D, G, C we get angle(F, I, A) == 0 - angle(D, G, C) mod 360, angle(I, A, F) == 0 - angle(G, C, D) mod 360, angle(A, F, I) == 0 - angle(C, D, G) mod 360, log(distance(D, G)) + log(distance(A, I)) == log(distance(F, I)) + log(distance(C, G)), log(distance(A, I)) + log(distance(C, D)) == log(distance(C, G)) + log(distance(A, F)), log(distance(A, F)) + log(distance(D, G)) == log(distance(C, D)) + log(distance(F, I))
By radical_axis_definition_v0 on line_circle_tangent_point(Line(D, E), Circle(B, E, H)), Circle(C, D, E), Circle(B, D, E) we get power_of_a_point(line_circle_tangent_point(Line(D, E), Circle(B, E, H)), Circle(B, D, E)) == power_of_a_point(line_circle_tangent_point(Line(D, E), Circle(B, E, H)), Circle(C, D, E))
By radical_axis_definition_v0 on line_circle_tangent_point(Line(D, E), Circle(B, E, H)), Circle(B, D, E), Circle(D, E, H) we get power_of_a_point(line_circle_tangent_point(Line(D, E), Circle(B, E, H)), Circle(B, D, E)) == power_of_a_point(line_circle_tangent_point(Line(D, E), Circle(B, E, H)), Circle(D, E, H))
By altitude_definition on center(Circle(D, E, H)), E, C, Line(E, center(Circle(D, E, H))) we get Line(E, center(Circle(D, E, H))) == altitude(center(Circle(D, E, H)), C, E)
By anti_similar_triangle_basic_properties on center(Circle(C, D, E)), E, D, center(Circle(C, D, E)), D, E we get angle(center(Circle(C, D, E)), E, D) == 0 - angle(center(Circle(C, D, E)), D, E) mod 360, angle(E, D, center(Circle(C, D, E))) == 0 - angle(D, E, center(Circle(C, D, E))) mod 360, angle(D, center(Circle(C, D, E)), E) == 0 - angle(E, center(Circle(C, D, E)), D) mod 360, log(distance(D, center(Circle(C, D, E)))) + log(distance(D, E)) == log(distance(E, center(Circle(C, D, E)))) + log(distance(D, E)), log(distance(D, E)) + log(distance(D, center(Circle(C, D, E)))) == log(distance(D, E)) + log(distance(E, center(Circle(C, D, E)))), log(distance(D, center(Circle(C, D, E)))) + log(distance(D, center(Circle(C, D, E)))) == log(distance(E, center(Circle(C, D, E)))) + log(distance(E, center(Circle(C, D, E))))
By altitude_definition on A, center(Circle(D, F, H)), F, f we get f == altitude(A, F, center(Circle(D, F, H)))
By isosceles_triangle_properties on center(Circle(D, E, H)), H, D we get distance(D, center(Circle(D, E, H))) == distance(H, center(Circle(D, E, H))), angle(H, D, center(Circle(D, E, H))) == angle(center(Circle(D, E, H)), H, D) mod 360
By anti_similar_triangle_basic_properties on E, center(Circle(B, D, E)), F, F, center(Circle(B, D, E)), E we get angle(E, center(Circle(B, D, E)), F) == 0 - angle(F, center(Circle(B, D, E)), E) mod 360, angle(center(Circle(B, D, E)), F, E) == 0 - angle(center(Circle(B, D, E)), E, F) mod 360, angle(F, E, center(Circle(B, D, E))) == 0 - angle(E, F, center(Circle(B, D, E))) mod 360, log(distance(E, center(Circle(B, D, E)))) + log(distance(E, center(Circle(B, D, E)))) == log(distance(F, center(Circle(B, D, E)))) + log(distance(F, center(Circle(B, D, E)))), log(distance(E, center(Circle(B, D, E)))) + log(distance(E, F)) == log(distance(F, center(Circle(B, D, E)))) + log(distance(E, F)), log(distance(E, F)) + log(distance(E, center(Circle(B, D, E)))) == log(distance(E, F)) + log(distance(F, center(Circle(B, D, E))))
By anti_similar_triangle_basic_properties on A, I, F, A, F, D we get angle(A, I, F) == 0 - angle(A, F, D) mod 360, angle(I, F, A) == 0 - angle(F, D, A) mod 360, angle(F, A, I) == 0 - angle(D, A, F) mod 360, log(distance(A, F)) + log(distance(F, I)) == log(distance(A, I)) + log(distance(D, F)), log(distance(D, F)) + log(distance(A, F)) == log(distance(F, I)) + log(distance(A, D)), log(distance(A, D)) + log(distance(A, I)) == log(distance(A, F)) + log(distance(A, F))
By anti_similar_triangle_basic_properties on B, E, center(Circle(B, D, E)), E, B, center(Circle(B, D, E)) we get angle(B, E, center(Circle(B, D, E))) == 0 - angle(E, B, center(Circle(B, D, E))) mod 360, angle(E, center(Circle(B, D, E)), B) == 0 - angle(B, center(Circle(B, D, E)), E) mod 360, angle(center(Circle(B, D, E)), B, E) == 0 - angle(center(Circle(B, D, E)), E, B) mod 360, log(distance(B, E)) + log(distance(B, center(Circle(B, D, E)))) == log(distance(B, E)) + log(distance(E, center(Circle(B, D, E)))), log(distance(B, center(Circle(B, D, E)))) + log(distance(B, center(Circle(B, D, E)))) == log(distance(E, center(Circle(B, D, E)))) + log(distance(E, center(Circle(B, D, E)))), log(distance(B, center(Circle(B, D, E)))) + log(distance(B, E)) == log(distance(E, center(Circle(B, D, E)))) + log(distance(B, E))
By altitude_definition on center(Circle(D, F, H)), B, F, Line(F, center(Circle(D, F, H))) we get Line(F, center(Circle(D, F, H))) == altitude(center(Circle(D, F, H)), B, F)
By anti_similar_triangle_basic_properties on F, A, I, D, C, G we get angle(F, A, I) == 0 - angle(D, C, G) mod 360, angle(A, I, F) == 0 - angle(C, G, D) mod 360, angle(I, F, A) == 0 - angle(G, D, C) mod 360, log(distance(A, F)) + log(distance(C, G)) == log(distance(C, D)) + log(distance(A, I)), log(distance(A, I)) + log(distance(D, G)) == log(distance(C, G)) + log(distance(F, I)), log(distance(D, G)) + log(distance(A, F)) == log(distance(F, I)) + log(distance(C, D))
By altitude_definition on D, F, I, h we get h == altitude(D, F, I)
By altitude_definition on A, I, F, h we get h == altitude(A, F, I)
By collinear_definition on midpoint(E, F), F, E we get F in Line(E, midpoint(E, F)), E in Line(F, midpoint(E, F)), Line(E, midpoint(E, F)) == Line(F, midpoint(E, F)), 0 == 2 * angle(F, midpoint(E, F), E) mod 360
By isosceles_triangle_properties on center(Circle(D, F, H)), D, H we get distance(D, center(Circle(D, F, H))) == distance(H, center(Circle(D, F, H))), angle(D, H, center(Circle(D, F, H))) == angle(center(Circle(D, F, H)), D, H) mod 360
By anti_similar_triangle_basic_properties on B, center(Circle(B, D, E)), F, F, center(Circle(B, D, E)), B we get angle(B, center(Circle(B, D, E)), F) == 0 - angle(F, center(Circle(B, D, E)), B) mod 360, angle(center(Circle(B, D, E)), F, B) == 0 - angle(center(Circle(B, D, E)), B, F) mod 360, angle(F, B, center(Circle(B, D, E))) == 0 - angle(B, F, center(Circle(B, D, E))) mod 360, log(distance(B, center(Circle(B, D, E)))) + log(distance(B, center(Circle(B, D, E)))) == log(distance(F, center(Circle(B, D, E)))) + log(distance(F, center(Circle(B, D, E)))), log(distance(B, center(Circle(B, D, E)))) + log(distance(B, F)) == log(distance(F, center(Circle(B, D, E)))) + log(distance(B, F)), log(distance(B, F)) + log(distance(B, center(Circle(B, D, E)))) == log(distance(B, F)) + log(distance(F, center(Circle(B, D, E))))
By anti_similar_triangle_basic_properties on center(Circle(C, D, E)), G, D, center(Circle(C, D, E)), D, G we get angle(center(Circle(C, D, E)), G, D) == 0 - angle(center(Circle(C, D, E)), D, G) mod 360, angle(G, D, center(Circle(C, D, E))) == 0 - angle(D, G, center(Circle(C, D, E))) mod 360, angle(D, center(Circle(C, D, E)), G) == 0 - angle(G, center(Circle(C, D, E)), D) mod 360, log(distance(D, center(Circle(C, D, E)))) + log(distance(D, G)) == log(distance(G, center(Circle(C, D, E)))) + log(distance(D, G)), log(distance(D, G)) + log(distance(D, center(Circle(C, D, E)))) == log(distance(D, G)) + log(distance(G, center(Circle(C, D, E)))), log(distance(D, center(Circle(C, D, E)))) + log(distance(D, center(Circle(C, D, E)))) == log(distance(G, center(Circle(C, D, E)))) + log(distance(G, center(Circle(C, D, E))))
By altitude_definition on center(Circle(D, F, H)), F, A, Line(F, center(Circle(D, F, H))) we get Line(F, center(Circle(D, F, H))) == altitude(center(Circle(D, F, H)), A, F)
By anti_similar_triangle_basic_properties on center(Circle(B, D, E)), D, F, center(Circle(B, D, E)), F, D we get angle(center(Circle(B, D, E)), D, F) == 0 - angle(center(Circle(B, D, E)), F, D) mod 360, angle(D, F, center(Circle(B, D, E))) == 0 - angle(F, D, center(Circle(B, D, E))) mod 360, angle(F, center(Circle(B, D, E)), D) == 0 - angle(D, center(Circle(B, D, E)), F) mod 360, log(distance(D, center(Circle(B, D, E)))) + log(distance(D, F)) == log(distance(F, center(Circle(B, D, E)))) + log(distance(D, F)), log(distance(D, F)) + log(distance(D, center(Circle(B, D, E)))) == log(distance(D, F)) + log(distance(F, center(Circle(B, D, E)))), log(distance(D, center(Circle(B, D, E)))) + log(distance(D, center(Circle(B, D, E)))) == log(distance(F, center(Circle(B, D, E)))) + log(distance(F, center(Circle(B, D, E))))
By sas_anti_congruence on H, center(Circle(D, F, H)), D, D, center(Circle(D, F, H)), H we get anti_congruent_triangles(D, H, center(Circle(D, F, H)), H, D, center(Circle(D, F, H)))
By anti_similar_triangle_basic_properties on center(Circle(C, D, E)), C, E, center(Circle(C, D, E)), E, C we get angle(center(Circle(C, D, E)), C, E) == 0 - angle(center(Circle(C, D, E)), E, C) mod 360, angle(C, E, center(Circle(C, D, E))) == 0 - angle(E, C, center(Circle(C, D, E))) mod 360, angle(E, center(Circle(C, D, E)), C) == 0 - angle(C, center(Circle(C, D, E)), E) mod 360, log(distance(C, center(Circle(C, D, E)))) + log(distance(C, E)) == log(distance(E, center(Circle(C, D, E)))) + log(distance(C, E)), log(distance(C, E)) + log(distance(C, center(Circle(C, D, E)))) == log(distance(C, E)) + log(distance(E, center(Circle(C, D, E)))), log(distance(C, center(Circle(C, D, E)))) + log(distance(C, center(Circle(C, D, E)))) == log(distance(E, center(Circle(C, D, E)))) + log(distance(E, center(Circle(C, D, E))))
By isosceles_triangle_properties on center(Circle(D, E, H)), H, E we get distance(E, center(Circle(D, E, H))) == distance(H, center(Circle(D, E, H))), angle(H, E, center(Circle(D, E, H))) == angle(center(Circle(D, E, H)), H, E) mod 360
By power_of_a_point_definition on D, I, A, Circle(A, F, I) we get log(distance(D, I)) + log(distance(A, D)) == log(power_of_a_point(D, Circle(A, F, I)))
By altitude_definition on center(Circle(D, F, H)), A, B, Line(F, center(Circle(D, F, H))) we get Line(F, center(Circle(D, F, H))) == altitude(center(Circle(D, F, H)), A, B)
By sas_anti_congruence on H, center(Circle(D, E, H)), D, D, center(Circle(D, E, H)), H we get anti_congruent_triangles(D, H, center(Circle(D, E, H)), H, D, center(Circle(D, E, H)))
By altitude_definition on B, center(Circle(D, E, H)), E, g we get g == altitude(B, E, center(Circle(D, E, H)))
By isosceles_triangle_properties on center(Circle(D, F, H)), F, H we get distance(F, center(Circle(D, F, H))) == distance(H, center(Circle(D, F, H))), angle(F, H, center(Circle(D, F, H))) == angle(center(Circle(D, F, H)), F, H) mod 360
By sas_anti_congruence on F, center(Circle(D, F, H)), H, H, center(Circle(D, F, H)), F we get anti_congruent_triangles(F, H, center(Circle(D, F, H)), H, F, center(Circle(D, F, H)))
By sas_anti_congruence on H, center(Circle(D, E, H)), E, E, center(Circle(D, E, H)), H we get anti_congruent_triangles(E, H, center(Circle(D, E, H)), H, E, center(Circle(D, E, H)))
By isosceles_triangle_properties on center(Circle(D, F, H)), H, D we get distance(D, center(Circle(D, F, H))) == distance(H, center(Circle(D, F, H))), angle(H, D, center(Circle(D, F, H))) == angle(center(Circle(D, F, H)), H, D) mod 360
By altitude_definition on midpoint(E, F), C, orthocenter(B, C, D), i we get i == altitude(midpoint(E, F), C, orthocenter(B, C, D))
By altitude_definition on C, E, center(Circle(D, E, H)), g we get g == altitude(C, E, center(Circle(D, E, H)))
By altitude_definition on center(Circle(D, E, H)), B, E, Line(E, center(Circle(D, E, H))) we get Line(E, center(Circle(D, E, H))) == altitude(center(Circle(D, E, H)), B, E)
By collinear_definition on midpoint(E, F), E, F we get E in Line(F, midpoint(E, F)), F in Line(E, midpoint(E, F)), Line(E, midpoint(E, F)) == Line(F, midpoint(E, F)), 0 == 2 * angle(E, midpoint(E, F), F) mod 360
By sas_anti_congruence on E, center(Circle(D, E, H)), H, H, center(Circle(D, E, H)), E we get anti_congruent_triangles(E, H, center(Circle(D, E, H)), H, E, center(Circle(D, E, H)))
By radical_axis_definition_v0 on midpoint(E, F), Circle(D, F, H), Circle(D, E, H) we get power_of_a_point(midpoint(E, F), Circle(D, E, H)) == power_of_a_point(midpoint(E, F), Circle(D, F, H))
By isosceles_triangle_properties on center(Circle(D, E, H)), D, H we get distance(D, center(Circle(D, E, H))) == distance(H, center(Circle(D, E, H))), angle(D, H, center(Circle(D, E, H))) == angle(center(Circle(D, E, H)), D, H) mod 360
By radical_axis_definition_v0 on line_circle_tangent_point(Line(D, E), Circle(B, E, H)), Circle(C, D, E), Circle(D, E, H) we get power_of_a_point(line_circle_tangent_point(Line(D, E), Circle(B, E, H)), Circle(C, D, E)) == power_of_a_point(line_circle_tangent_point(Line(D, E), Circle(B, E, H)), Circle(D, E, H))
By power_of_a_point_definition on D, I, A, Circle(A, E, I) we get log(distance(D, I)) + log(distance(A, D)) == log(power_of_a_point(D, Circle(A, E, I)))
By radical_axis_definition_v0 on midpoint(E, F), Circle(B, E, H), Circle(B, F, H) we get power_of_a_point(midpoint(E, F), Circle(B, E, H)) == power_of_a_point(midpoint(E, F), Circle(B, F, H))
By altitude_definition on center(Circle(D, E, H)), C, B, Line(E, center(Circle(D, E, H))) we get Line(E, center(Circle(D, E, H))) == altitude(center(Circle(D, E, H)), B, C)
By isosceles_triangle_properties on center(Circle(D, E, H)), E, H we get distance(E, center(Circle(D, E, H))) == distance(H, center(Circle(D, E, H))), angle(E, H, center(Circle(D, E, H))) == angle(center(Circle(D, E, H)), E, H) mod 360
By altitude_definition on midpoint(E, F), G, C, i we get i == altitude(midpoint(E, F), C, G)
By sas_anti_congruence on H, center(Circle(D, F, H)), F, F, center(Circle(D, F, H)), H we get anti_congruent_triangles(F, H, center(Circle(D, F, H)), H, F, center(Circle(D, F, H)))
By sas_anti_congruence on D, center(Circle(D, E, H)), H, H, center(Circle(D, E, H)), D we get anti_congruent_triangles(D, H, center(Circle(D, E, H)), H, D, center(Circle(D, E, H)))
By power_of_a_point_definition on G, I, F, Circle(A, F, I) we get log(distance(G, I)) + log(distance(F, G)) == log(power_of_a_point(G, Circle(A, F, I)))
By power_of_a_point_definition on B, A, F, Circle(A, F, I) we get log(distance(A, B)) + log(distance(B, F)) == log(power_of_a_point(B, Circle(A, F, I)))
By power_of_a_point_tangent on D, E, Circle(A, E, I) we get 2 * log(distance(D, E)) == log(power_of_a_point(D, Circle(A, E, I)))
By power_of_a_point_tangent on orthocenter(B, C, D), E, Circle(A, E, I) we get log(power_of_a_point(orthocenter(B, C, D), Circle(A, E, I))) == 2 * log(distance(E, orthocenter(B, C, D)))
By power_of_a_point_tangent on D, F, Circle(A, F, I) we get 2 * log(distance(D, F)) == log(power_of_a_point(D, Circle(A, F, I)))
By similar_triangle_basic_properties on F, center(Circle(B, D, E)), D, D, center(Circle(B, D, E)), E we get angle(D, center(Circle(B, D, E)), E) == angle(F, center(Circle(B, D, E)), D) mod 360, angle(center(Circle(B, D, E)), D, F) == angle(center(Circle(B, D, E)), E, D) mod 360, angle(D, F, center(Circle(B, D, E))) == angle(E, D, center(Circle(B, D, E))) mod 360, log(distance(D, center(Circle(B, D, E)))) + log(distance(D, center(Circle(B, D, E)))) == log(distance(F, center(Circle(B, D, E)))) + log(distance(E, center(Circle(B, D, E)))), log(distance(D, center(Circle(B, D, E)))) + log(distance(D, E)) == log(distance(E, center(Circle(B, D, E)))) + log(distance(D, F)), log(distance(D, E)) + log(distance(F, center(Circle(B, D, E)))) == log(distance(D, F)) + log(distance(D, center(Circle(B, D, E))))
By anti_similar_triangle_basic_properties on center(Circle(B, D, E)), D, F, center(Circle(B, D, E)), D, E we get angle(center(Circle(B, D, E)), D, F) == 0 - angle(center(Circle(B, D, E)), D, E) mod 360, angle(D, F, center(Circle(B, D, E))) == 0 - angle(D, E, center(Circle(B, D, E))) mod 360, angle(F, center(Circle(B, D, E)), D) == 0 - angle(E, center(Circle(B, D, E)), D) mod 360, log(distance(D, center(Circle(B, D, E)))) + log(distance(D, E)) == log(distance(D, center(Circle(B, D, E)))) + log(distance(D, F)), log(distance(D, E)) + log(distance(F, center(Circle(B, D, E)))) == log(distance(D, F)) + log(distance(E, center(Circle(B, D, E)))), log(distance(E, center(Circle(B, D, E)))) + log(distance(D, center(Circle(B, D, E)))) == log(distance(F, center(Circle(B, D, E)))) + log(distance(D, center(Circle(B, D, E))))
By similar_triangle_basic_properties on center(Circle(B, D, E)), B, E, center(Circle(B, D, E)), F, B we get angle(center(Circle(B, D, E)), B, E) == angle(center(Circle(B, D, E)), F, B) mod 360, angle(B, E, center(Circle(B, D, E))) == angle(F, B, center(Circle(B, D, E))) mod 360, angle(B, center(Circle(B, D, E)), F) == angle(E, center(Circle(B, D, E)), B) mod 360, log(distance(B, center(Circle(B, D, E)))) + log(distance(B, F)) == log(distance(F, center(Circle(B, D, E)))) + log(distance(B, E)), log(distance(B, E)) + log(distance(B, center(Circle(B, D, E)))) == log(distance(B, F)) + log(distance(E, center(Circle(B, D, E)))), log(distance(B, center(Circle(B, D, E)))) + log(distance(B, center(Circle(B, D, E)))) == log(distance(E, center(Circle(B, D, E)))) + log(distance(F, center(Circle(B, D, E))))
By similar_triangle_basic_properties on center(Circle(B, D, E)), B, F, center(Circle(B, D, E)), E, B we get angle(center(Circle(B, D, E)), B, F) == angle(center(Circle(B, D, E)), E, B) mod 360, angle(B, F, center(Circle(B, D, E))) == angle(E, B, center(Circle(B, D, E))) mod 360, angle(B, center(Circle(B, D, E)), E) == angle(F, center(Circle(B, D, E)), B) mod 360, log(distance(B, center(Circle(B, D, E)))) + log(distance(B, E)) == log(distance(E, center(Circle(B, D, E)))) + log(distance(B, F)), log(distance(B, E)) + log(distance(F, center(Circle(B, D, E)))) == log(distance(B, F)) + log(distance(B, center(Circle(B, D, E)))), log(distance(B, center(Circle(B, D, E)))) + log(distance(B, center(Circle(B, D, E)))) == log(distance(F, center(Circle(B, D, E)))) + log(distance(E, center(Circle(B, D, E))))
By anti_similar_triangle_basic_properties on D, center(Circle(B, D, E)), F, D, center(Circle(B, D, E)), E we get angle(D, center(Circle(B, D, E)), F) == 0 - angle(D, center(Circle(B, D, E)), E) mod 360, angle(center(Circle(B, D, E)), F, D) == 0 - angle(center(Circle(B, D, E)), E, D) mod 360, angle(F, D, center(Circle(B, D, E))) == 0 - angle(E, D, center(Circle(B, D, E))) mod 360, log(distance(D, center(Circle(B, D, E)))) + log(distance(E, center(Circle(B, D, E)))) == log(distance(D, center(Circle(B, D, E)))) + log(distance(F, center(Circle(B, D, E)))), log(distance(E, center(Circle(B, D, E)))) + log(distance(D, F)) == log(distance(F, center(Circle(B, D, E)))) + log(distance(D, E)), log(distance(D, E)) + log(distance(D, center(Circle(B, D, E)))) == log(distance(D, F)) + log(distance(D, center(Circle(B, D, E))))
By similar_triangle_basic_properties on center(Circle(B, D, E)), F, D, center(Circle(B, D, E)), D, E we get angle(center(Circle(B, D, E)), D, E) == angle(center(Circle(B, D, E)), F, D) mod 360, angle(D, E, center(Circle(B, D, E))) == angle(F, D, center(Circle(B, D, E))) mod 360, angle(D, center(Circle(B, D, E)), F) == angle(E, center(Circle(B, D, E)), D) mod 360, log(distance(D, center(Circle(B, D, E)))) + log(distance(D, F)) == log(distance(F, center(Circle(B, D, E)))) + log(distance(D, E)), log(distance(D, E)) + log(distance(D, center(Circle(B, D, E)))) == log(distance(D, F)) + log(distance(E, center(Circle(B, D, E)))), log(distance(D, center(Circle(B, D, E)))) + log(distance(D, center(Circle(B, D, E)))) == log(distance(E, center(Circle(B, D, E)))) + log(distance(F, center(Circle(B, D, E))))
By anti_similar_triangle_basic_properties on B, E, center(Circle(B, D, E)), B, F, center(Circle(B, D, E)) we get angle(B, E, center(Circle(B, D, E))) == 0 - angle(B, F, center(Circle(B, D, E))) mod 360, angle(E, center(Circle(B, D, E)), B) == 0 - angle(F, center(Circle(B, D, E)), B) mod 360, angle(center(Circle(B, D, E)), B, E) == 0 - angle(center(Circle(B, D, E)), B, F) mod 360, log(distance(B, E)) + log(distance(F, center(Circle(B, D, E)))) == log(distance(B, F)) + log(distance(E, center(Circle(B, D, E)))), log(distance(E, center(Circle(B, D, E)))) + log(distance(B, center(Circle(B, D, E)))) == log(distance(F, center(Circle(B, D, E)))) + log(distance(B, center(Circle(B, D, E)))), log(distance(B, center(Circle(B, D, E)))) + log(distance(B, E)) == log(distance(B, center(Circle(B, D, E)))) + log(distance(B, F))
By anti_similar_triangle_basic_properties on center(Circle(B, D, E)), E, B, center(Circle(B, D, E)), F, B we get angle(center(Circle(B, D, E)), E, B) == 0 - angle(center(Circle(B, D, E)), F, B) mod 360, angle(E, B, center(Circle(B, D, E))) == 0 - angle(F, B, center(Circle(B, D, E))) mod 360, angle(B, center(Circle(B, D, E)), E) == 0 - angle(B, center(Circle(B, D, E)), F) mod 360, log(distance(E, center(Circle(B, D, E)))) + log(distance(B, F)) == log(distance(F, center(Circle(B, D, E)))) + log(distance(B, E)), log(distance(B, E)) + log(distance(B, center(Circle(B, D, E)))) == log(distance(B, F)) + log(distance(B, center(Circle(B, D, E)))), log(distance(B, center(Circle(B, D, E)))) + log(distance(E, center(Circle(B, D, E)))) == log(distance(B, center(Circle(B, D, E)))) + log(distance(F, center(Circle(B, D, E))))
By between_implies_angles on F, midpoint(E, F), E we get 180 == angle(F, midpoint(E, F), E) mod 360, 0 == angle(midpoint(E, F), E, F) mod 360, 0 == angle(E, F, midpoint(E, F)) mod 360
By power_of_a_point_definition on midpoint(E, F), E, F, Circle(B, D, E) we get log(power_of_a_point(midpoint(E, F), Circle(B, D, E))) == log(distance(E, midpoint(E, F))) + log(distance(F, midpoint(E, F)))
By power_of_a_point_definition on center(Circle(C, D, E)), D, C, Circle(C, D, E) we get log(power_of_a_point(center(Circle(C, D, E)), Circle(C, D, E))) == log(distance(D, center(Circle(C, D, E)))) + log(distance(C, center(Circle(C, D, E))))
By between_implies_angles on E, midpoint(E, F), F we get 180 == angle(E, midpoint(E, F), F) mod 360, 0 == angle(midpoint(E, F), F, E) mod 360, 0 == angle(F, E, midpoint(E, F)) mod 360
By power_of_a_point_definition on center(Circle(B, D, E)), B, D, Circle(B, D, E) we get log(power_of_a_point(center(Circle(B, D, E)), Circle(B, D, E))) == log(distance(B, center(Circle(B, D, E)))) + log(distance(D, center(Circle(B, D, E))))
