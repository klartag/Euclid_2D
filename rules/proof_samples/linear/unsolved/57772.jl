Assumptions:
A, B, C, D, E, F, G, H: Point
f, g, h, i: Line
c: Circle
distinct(A, B, C, D, E, F, G, H)
distinct(f, g, h, i)
f == Line(B, C)
g == Line(A, C)
h == internal_angle_bisector(B, A, C)
i == internal_angle_bisector(A, B, C)
D == line_intersection(h, i)
c == Circle(A, B, D)
E == center(c)
F in g, c
G == midpoint(A, F)
H == projection(E, f)

Embedding:
C := {"x": "-6.70752676708605921618300271802581846714019775390625", "y": "-2.145882841573886867791998156462796032428741455078125"}
B := {"x": "-2.456271063745394389599141504731960594654083251953125", "y": "-5.29412718358873490842597675509750843048095703125"}
A := {"x": "3.87027387709374171009812926058657467365264892578125", "y": "-1.8334766673085949317822951343259774148464202880859375"}
i := {"point": {"x": "-2.456271063745394389599141504731960594654083251953125", "y": "-5.29412718358873490842597675509750843048095703125"}, "direction": {"x": "0.073690603260805740095521874166260863759169174441286732540841693427171751157880635120456277630953876923733079330554747874963637657613099221414646942564416840804021482046558699933072922276142922986230150726783110478855851351354631807830675291490981006980284906612768664592693635691089879144745580161013319507877632906888334029416584456938103004550438691553626913334018191400376000981837795422249913182318494808279348289134890324530055463011722806874313423811441511901755285016943985890325231783287730815635849688710888698454764366809516778105414787358862929899156993210408271683772058214887510280228626543932781798196524925252767814529788021063170408930009746940169576816796036198875628948620642346898370161972634427199527429240719731042564559700248344333958062323056417191796138287079457758863042737072694506774624127887602097719146287269195313201259745866132302593908056525387245217876161408760418038074200750912552197156287430180615607750922791495125802923068660810100765018874748078703059745361739271796615985520459200271457366387005222289957545483989262916449885719805629822623514349638008377393196647362087761723769492496323389046128144111599978230465615008122092947457710115838841325237169331721678008818574797418702813315389910756633280896876245976355031233384147859251152520603942391231250682905397474182653123409336713338054597147580163341662262172696006746696817913273134476822807554910746663341204345235371055336982850396705172864929780229298895634039382709889644725634058602663861219524415339892330340727473061387871303312978623529359477539380707139356509413570703095473911729569971953872377340260849632281132060088299793046401272720640938273090750676121928012518594049013854630642515939480026555062647229205735437581744427414485847784742386389547633223801368504664739143134409235789005104505211617411483204642372662475766367480736227640510238629587139193112508329334303303560085757414249975231523160936238102859747072497945030617540325986399994443346747238038610237061583905299374594282082", "y": "1.0750257594843499566830890525917695116709630571338584800479750768494944151242430364650716755904120618756348120716171128508489683964046534120678221140208769931695591803408670789596995002461480465729770357407268971018762965029524503019986320122083129933911838816338160038120997284672255282128465980069312145293032986859194528587668425598950625568925941219612911947024446330271638900208689045604546317981511069194930925411497762515267901423850663656638661744175852875025876458907110344757310796969210591773679296500346871194109794688553600239223364440741623738846482265237533842287697123540301464144700635284858616425585417478241309622527329617684394427611451259708749195573128420307706184118475202444754055815037383545779534994728379887323722931386869633483723244723551144753612684812945715675238992765552836059223746392334397430558591653142969310550008181530620634188823185128807468927346003177317198113245228413530056875724251875238678383197996231863744698156193145959468712894728594415884556484124003893247649967605672277090488310295342499457354426685373183304406174841930642624042944366755042840724317497718791416306702330741154439454664371476384598005610433448311456336572455767033732394262720507601993910008439601990055678535214478701908340395102645891468599097823484584303805247430189940638758432182797765229542706972381578079898982441454941012504089374130329031955678410433553726394781196592246232619501276246327910568937137752529556231877751966630900286125804255086552885514740577707345129021732872146313841915852500635930810185963870829358790899228736651675343921137160538634602749384381042921733408201084054209127343651188527672957807400234418333024730876995001408135681819676333843201709630068739475885441819594231148909959932373630111178720499166230745693447585638965690024889090279504989943185623687555746019402362519267556579655111968502496477582944961716301453563221569937950411193516047917934990817427422427874998255899057830320469937742739064792293230016417263632944821626127436387438"}}
h := {"point": {"x": "3.87027387709374171009812926058657467365264892578125", "y": "-1.8334766673085949317822951343259774148464202880859375"}, "direction": {"x": "-1.8768873448915097699533524764541097725679941511860152811809177792183145452857939849801703239567125777071315265838505411274162045600027927154404817285665625807780637489861823136485699230682858125045597378347283884672844132017207287085325080454817736794546039057590757920021586269651421189554280577559158425503293638529684178191986597676504192048560473699762589679994632155261983632922574069184291619069164117847180014022319903433473126964203367159901381847159404022846440943667419709628679759081279218036837823709097040768827018302601630122789216185454026545869090321845186226488486818255232519996261450777123128207061508794391005720654754634482914686729777824572467290145854232381358079792384310558923665564908211454190160329871657437566303963604294304460729471222791264923964491050765194936808207512864912017260635043857784444254574706307610383986859582239523285469435284138099417197754393720685172711315201544555036693952653978705202284381076868500989958253354856286834869188235653018680015869337278558770440961696965829925844109472962852985581855753651193022417171083367028941261847860817076735639266661794511771453464061979020355287184494563446908358678513765783922987900005613023889900524000896799020188166368493914324137200768487502373192990325375396739770813079758121276830029363732798300373237791175309549423276172795626793338081139939222958416235220690864205840880284459612200142535052870064508030268625731446479549872114068598948391299319539830699884236945792425042771817839688405182543209355085466178291163459865999490581014652939615870701303447189150289711922490228019839365002398303327218640348267492399723899301463281569948218048155565624136221836480845883866843204304653630456491405947463234706313679827557120553532602691207175469046645720653501277901814395129137415499664968152822640270479751719186178049780178215845923078461381584242286834017408687045574153262585330253303814165740213925223184232781074817410026415921626849164976502359650580162005686939484216965201301661492538910157", "y": "-0.50942126744758575289064181270669466244374936233562592951163688673252241880679227401814601944348345442717173246017896356195960721761440986885388761712187535386975758632569974240401823540169954110975733773257955329580121291756984542637481318621459457260515599711022222510800851801699810734204469851134248385373160343804959830423843214459437318252711262424235579434515231419942627267114160704061430264762000936483718097347774707571996018547314131456773610242120070657913345387263638605443389587444567908548995829270999263390217392450703712692932367596052402560687842835691543448902408146275191990051066146332771484431465339643229249050889640966160005515520872834577311285763927924999612680778737260845573911262991375979021974773560491025709212027473742601046324422407273318196018352918496532266599944421783468297236061661058200283983812854772727533007667582986691493031148720815364198059548742252902272561865114268027887238718365580728239469994218047384710528988902877916865140317001659216396047827219813562273466525790057433117250606452538512563109144431870466431360858187039072341885794380549863751629795158737390475975944436044203124460695115647580041562644063451787983942255326575897596027611789293231775813704651995211738550515311155694607755714310339859578539563196260804568221736745680032627726336905799535635397840550518228134405347079649973240412790591145600169909338304237072769496639744408316448481050584355401459441781272282857046813818482712924916543037484152388885551554121365886394608722673074377569935557463947409757349830412151598016345119636513289864510094086246155051283390417438169006116174653915863280079258880946679796138475494167581369915158627603797035965077954235246727920588505344865930774974616389265292958125888413975009698840368133681374595204509301883085369911895604631116762556450423497764642578304393493589810369031121617493953267689870412892781206932770075092383680509585154719962628995652925037718166297528132239120112022126552315180457838118310110602643127786502222264"}}
D := {"x": "-2.3344915444724866404479427559993907956751412310012512124123970764047823625482916405622986808606241528593052041967743893226223864041404565728318519884723833197826283828707317660275727193088215165183914642969855907637594185988249456698585800304258495404745162989996495041696864224713317088493893780427798104591428215786166759383100349158007529804953505677869970795296713402023385541376778662574912875722849353662504751438482864281012337872711544993054978919740088000563805509675801720152420172675846485697031816006865617839764573073359171861825899762771052962234743296819084734960485654460524248108705268959724328518821159039008877561005366515594776772697095351919244309188509626134492980204280612140304220854137929391306692205304577707646621936660009233353468834673290019918582278989685660384461887264198982731925339187567694084516281781301115967486453889224339964242644638424388591210691845514503374225991771214230271561799751899967888550923144280270195360313407470826965586124455843186596650745405715909836468394819447695778191954501295176420041740633515762950655234863267586311700097502547616950154316671355500234112269298559431017310436578323110294054089976911711505682099727469235193166330178887173317249767832866741456463088087194197280473640924501027912585259986124191848807599360574055045687668807507243635879261129958811559262068877814207248280860550339712335534322322039317404460871608768786516807810657248027575170342222800439762021130474173961119309846301228788674846558870306501938055899994793062072099763467148686124167209395106984944600429440298154032315409363901350915855212254655966703060673274839055498965781421518309733085313059694783480837646815998308457197211045681772393562603053981193090991616810686916920974039331813294145687743385307896147406655100134207583352004852179901768739860054416831716235653146594802987216448386052151664063395107600674470725916113486443809556931364762962739701310436275103892204320934536994158584781683100986065361661822190991948328302842945243256974", "y": "-3.5175625416538815623946778325410374285028872779822052342284983014465139111364214104912116347348447437058171116904385806418564798748923967049958172884797520201008308659081430740013052259148772079310903790962807488428683359313910210824467148054908301801485448921804810662301764314198344872396945192843502335524018562608466956966236414754730055671065703937030036299678469126167506291764989191762043144117124905358933792969632884469000967714242008938786241432449246795185112193087030402732066861272701666175181603685148797804596329799135071033194915556025303270503486223502287302312076373505240083528163283109369721638674923954680238998947384541202541143331093544715697356418346319341135575678634640134668306233986832205371953392945624710269083195603123740340660868662461418210583974796896798779033755617035483492328793336657124963166575811912866256257000143277728360192627199365608024763994543520598034588832348932941685121735446788138797627440739330255417117924156196417514344803918886943476715113678724678895878718184663661044473149318403466216148877404367729436419142450939142037390143075147285207383610930127900054576661950787873137554608984610529492385135092400716136090777109058861919551113514899413053815656591240930808329719095546666214734123224016482366562796060763415874611403174507717747412440456327280982490432950337703748928689837157560155040100556346922730364351027471274334002325480424227378376896430461303398279409431991782378077551124609721954421299044085821187556519000985801447552350503738875405944419718262344440039819580316729981413209943481014054007146013201826022966495137973545916039872575638295577943661287514788628758586510976687289368956689377341317198795998586508135522438859954827725299011542138834749488561548687012342949136673437442064751921624128621334296767463552867817012119195328678891486088635396725517761536627622766456513443982685053212965905266870043664701271399897247307400939989237348238588060801383123227118708654185905522845319286068332693338513156663319854018"}
c := {"center": {"x": "1.3064049440705798275009017885358352546422485275200529769973658445668830273619959145894581381235801623583894413107841078153968628685966685940463238248840857117188002356615271812931926948864208936434191068417641305339902097738232350929874265085740737334643588110688493464722914545344112090083113609951217406116407621047814533509832629693503113940919455594355095283401032905527629186864788323072315413507890012846470573978650638154497315270755336215783731640098982468587721589412421216181748930081280120965385280135173921942516242546689665827557462489507067213347124714793216807438461575950159752989193513158867001019117138370998570756153769682025675453341143422520673324292938597918313282881840742452472818250702346445977584856951644421118190679470959866909061898653989052076428629275718346763227228771121165369909426067032174269330166520418460709044397957365632091276420657124709663105637105971945762654583204901519299488889576054900324276791728196106994435316135060309111036666873034267664572641007952292428737137232702521853152323062501376022383803016878841216690980127014923686668778859825635281392454272320910237024228365570748120628848133987727945787581005665236427620331016107710388755870419503219151262470211990601164690263893789263846867813203781054916300506017161192055340117709053162757668464363875759509264176908367285696786577950173362075133546212815106953194288994944024157009829251695935340802204076636744161467928441234660888646348921954277164273532358201132559773827630992225044556511355816871880073736931306250395957370442516738906912232570437907373695061064392995756652461131632465701371954512536644925222769442313442795778881812693774978863723426552566487464718728758918199454274941528264716236840914229086515747677617650778163766492435628305529464812589434365644844983031471539020365965776618682947801542999774153437939540264835839204526983143127190132739027502396175923752006624574663032766041308938659238894386560251149750609677740529107090719537361998796864619080417995603486147", "y": "-4.6595940024575009638259138228927450551879918897863456986330831628006792185504915892156045627580803156693121303961140176624462115876392923405037897957593450056652266151224257658084517264166591096681070845086994439553505684525412150310614829561281629692238621803885167576071744608709471792889212691338552368440329990179851344327456625969384258378964883800202206923765067602090621795928559682103653371387781385936534082819987277480947355877585199038152042129238950682630139617236406890399686946268218510987516097334004142431754829038750626948313822377998104724281829959210488262656717502684405876132534806820198910502754512197494894553480869643897901056242165603847911624572227526139155028633123041266669554592730309251717561229096074084005557241632255665915553441770352651273328718570019189619647912415044059322383044377701770307413673657698252197997546101248388169772512715607423775709760659858842476370619018391546351680456718863262332619581265070001452056685273877058912888271288901661251466245401361308761534897547560315675828896722964644797190997303897848825997858023598262893214229529699638459685628754564800054326886568325553953309040047740924496773094083367607199814508288926644274831392932832424457733644128965362562863595665889348310312693444782523630945108951619545073702085574451874777267018815536516917280581591312412657868232281644389917965870120680808290186352185269983640714368345870803777647413579250211285794686039421502046615756932705739984494480551783206878186483397706625631236555290491622011328932305978469403046233555779576127980640601462510491031338604185291883632223301352074324604250296872385909288924322174106230029870312708147647861620132791101029989667939005748915718571253889075943442751453769081465167163375000459352845888773126724733011438740429728719375611243251155945227437926937196804747962553079060814857834163255064418521446471133841990086852901092660059092227461543219137544244465792802725306821706087426704217975300236799258662340387174171166658603814687597460503"}, "radius_squared": "14.56036309775048061335343171801147280323041258441856811206555245501407656051651505183372925409001211321444746452087883692333964927351621552492633502070416667026999602570973053339047862365422913893089463093418882230595490987142847038297200985887250258790821846723314147413408572739297978396168448168229813436425815637856024546736339060714107523924834030522635278853884269719139910495079802216169651209195208953446481278257030078917948533087557684301627258664492071092721582278362568742182890165933716096883970997308142610603111347220408005393047374328299650596273987240810324088026613816499034825175066894661601737547882208623680271206619503998967947377654252663265016209424229455967822922156964833299190202301737536807875522093525705924635261841484414180838697807114060007504202160688472765711083970958022895627608172822481588466971461345694262027164463993029621000477519432830452764246554577752550319152364178195096883412661557223328389120479670885882363660785988383459360220371074532326048702220022871592207652570919650652174765983655588302101204678880990640065102477977683029007304170528526832158781563146372051610764790553545199870057034738019349353368043492836145102614259459636278216255286304575600193713872708265614198772646954678373357669603217604981345990681955943997748231457778235223912133603923993825647540357888086593467209651279610442205943017850156510180095428417376360507184899809986902870420422819430799040476449368994218929821426969451247973351984987084999504239492974282786493628709515672225106354660029607658221757801463120033204730985886126911026065178795761735046733544568180682646773758179455548201375954054464017757248740774900864394232215517571578223153822089691200034146441123345326985770551584028225166805337900716111531194801704636929895753556851253932991312054669028809020334511869345072936459173427540225416862253044697728030783866316408947260615133207090158161601033954076471008055710157986187779536313681898045066475361995447662578208615553316974223632457574813464747"}
g := {"point": {"x": "3.87027387709374171009812926058657467365264892578125", "y": "-1.8334766673085949317822951343259774148464202880859375"}, "direction": {"x": "-10.5778006441798009262811319786123931407928466796875", "y": "-0.3124061742652919360097030221368186175823211669921875"}}
f := {"point": {"x": "-2.456271063745394389599141504731960594654083251953125", "y": "-5.29412718358873490842597675509750843048095703125"}, "direction": {"x": "-4.251255703340664826583861213293857872486114501953125", "y": "3.148244342014848040633978598634712398052215576171875"}}
E := {"x": "1.3064049440705798275009017885358352546422485275200529769973658445668830273619959145894581381235801623583894413107841078153968628685966685940463238248840857117188002356615271812931926948864208936434191068417641305339902097738232350929874265085740737334643588110688493464722914545344112090083113609951217406116407621047814533509832629693503113940919455594355095283401032905527629186864788323072315413507890012846470573978650638154497315270755336215783731640098982468587721589412421216181748930081280120965385280135173921942516242546689665827557462489507067213347124714793216807438461575950159752989193513158867001019117138370998570756153769682025675453341143422520673324292938597918313282881840742452472818250702346445977584856951644421118190679470959866909061898653989052076428629275718346763227228771121165369909426067032174269330166520418460709044397957365632091276420657124709663105637105971945762654583204901519299488889576054900324276791728196106994435316135060309111036666873034267664572641007952292428737137232702521853152323062501376022383803016878841216690980127014923686668778859825635281392454272320910237024228365570748120628848133987727945787581005665236427620331016107710388755870419503219151262470211990601164690263893789263846867813203781054916300506017161192055340117709053162757668464363875759509264176908367285696786577950173362075133546212815106953194288994944024157009829251695935340802204076636744161467928441234660888646348921954277164273532358201132559773827630992225044556511355816871880073736931306250395957370442516738906912232570437907373695061064392995756652461131632465701371954512536644925222769442313442795778881812693774978863723426552566487464718728758918199454274941528264716236840914229086515747677617650778163766492435628305529464812589434365644844983031471539020365965776618682947801542999774153437939540264835839204526983143127190132739027502396175923752006624574663032766041308938659238894386560251149750609677740529107090719537361998796864619080417995603486147", "y": "-4.6595940024575009638259138228927450551879918897863456986330831628006792185504915892156045627580803156693121303961140176624462115876392923405037897957593450056652266151224257658084517264166591096681070845086994439553505684525412150310614829561281629692238621803885167576071744608709471792889212691338552368440329990179851344327456625969384258378964883800202206923765067602090621795928559682103653371387781385936534082819987277480947355877585199038152042129238950682630139617236406890399686946268218510987516097334004142431754829038750626948313822377998104724281829959210488262656717502684405876132534806820198910502754512197494894553480869643897901056242165603847911624572227526139155028633123041266669554592730309251717561229096074084005557241632255665915553441770352651273328718570019189619647912415044059322383044377701770307413673657698252197997546101248388169772512715607423775709760659858842476370619018391546351680456718863262332619581265070001452056685273877058912888271288901661251466245401361308761534897547560315675828896722964644797190997303897848825997858023598262893214229529699638459685628754564800054326886568325553953309040047740924496773094083367607199814508288926644274831392932832424457733644128965362562863595665889348310312693444782523630945108951619545073702085574451874777267018815536516917280581591312412657868232281644389917965870120680808290186352185269983640714368345870803777647413579250211285794686039421502046615756932705739984494480551783206878186483397706625631236555290491622011328932305978469403046233555779576127980640601462510491031338604185291883632223301352074324604250296872385909288924322174106230029870312708147647861620132791101029989667939005748915718571253889075943442751453769081465167163375000459352845888773126724733011438740429728719375611243251155945227437926937196804747962553079060814857834163255064418521446471133841990086852901092660059092227461543219137544244465792802725306821706087426704217975300236799258662340387174171166658603814687597460503"}
H := {"x": "-0.32971295220688425100988847936113745768954987764055388318175853822700723490686593189359905547884294094963527212861536954532096307812174414647737339446289161940907339275278273542268438098043236921419513416692517812604630908666192698917809136226930147300769410441565935058231634404517860744052022617235081816111067260564032505396118971107548647835112561997889231735634858535879314075228412194837813919523568768071144082164280034454418711932982748751787217247920050838651787968660339359149113727069154729930615029453821827649996647570033161404870626982469126587726168447571408823387262586240579230285427128217540961483625837182779321001087925401339692884847537655837149304277396421631720618150992959175778454951168747577650861711398455228235551506784896081829756630476717656659773517195557988788499059886101726309440141086828671779839685374978739119452452038176440806497651437191192719400234984467261566196871420286319103568018335899122591220241633239319926098172159754635520253301510271596176490287402615913453050351143038392862723964194850359119547874109519825545990219059097739270693689977579736510772660514838074293857726151109205360744637696746259427436917404289725934863045447281025978727931020903456893527024440928901378624235254451339528279451662831440040379977591093738343221873707722632317252913590054587890204124986623116451364956681158219437283096143340779120314609490043847573584698842021228416774851804595679504102687758156399706281135860737081359851680138572541762288189048394162230616974630619887633803549609056072110108118714316610558027962371016858767585331899880652797007459588790637952797725011654087412421670990281000041590277675213800538190671615033332628843890201800609203763035879472269054611947554543634695553578613884659321339903046500345979418038427386663869191925408599260739172865741413621107613673975687161195065765198003689723067885333882507994840502583967036486415096174923518521063992166696795997772194661460846450241047145165745855806757309301137545761078490498002325214", "y": "-6.8689382534935582598955086044040065547389778244811938620496378669042285528243696534830480776099278094177608486037819913416575257717594912079176234845518373669380472798054057170190957603213318399430645721087839304171508495914232859945481086278689001666233471498468244233761356275838659853918539774114201611013839553180108775724322931018843404213539235239507016434182921652510103997598008591536613297875994980013347608582587042680529365596761733401337518092603033999694822035323431789225344471948837398376274903422067650621432132701901974839123127408851838282155269759002317182127250564095085999904258990139619325043664735458010464386020535643670453754396002917529873911842153431104967404361287229984890448100894377372410226101715306474994567500223622414478664770592024005502208027641352329759000695394434782581373783668397511885028048998024827770357285447475903802096653114750548082531063377821906193163154299225808859502363284371958649921130404913162823443507036626014852756506935489635804385645547418500199028575380221533383263880490530990376890248904213448040888447779586580189835649026594386222015251870084629283708192751491292078559465005484343476506348945766206526590906013390296284863391832624671260390788520847604565729955647183526746670005503553609852499425702317699815926119362060294397316854307891539481084791263161648857129375010093663362986090563747817104515185203360651738700567047707786062119008278904094254213642693532644473478197364700013557919161779153990670645602279512173550431862921639881973654584158817159411809121323886150340009963333345915891894483061167703455442401681851908845896995444348031410727152896958261571851194344271224846127305761455802210447149753650927561952045714644298841098411312973068114105679302878174641273018831412752297867786937107053608351261033106327002130627995435154698496464664387892336736247493301933046708797297835811625461517663659040853407549972626301052315031675117751361147161099295582965232367394563357680330104172768400038363217445813558007349"}
F := {"x": "-1.4197835090942490546147649911518885067948788101380092496945608209976622736990337486435870606212187080389712979354119506752996790877703444595042586385962024769647594566882868803102960667087389621540813485559395544146284759573929961729109294392724557436368045548704350197050451002447517362176448759888006850280732785392607565692248499957585640101718372604809777602577512393093193447857837692290462415574136556929462301121771196692236449580887104770240988702258047586173535109007065422001695580567953170275686668967805544139377478324670295481308123972302532444226890530422423479095944045454338016326421964143007503759738389198402665210821538877460180316585030802822588679540873153881592179498125953926840092877991528175229953652719466039588533991970260914265917145198649558808119170911196485047620964914529229342429524451448126712972275462896491982123400082828922657312767051413669829187480435875897488746740518038745926958311727331130573891985679041082157498795865358054707716441680405981262857441607398336107095095383612073023725786006707828154743017265938817473835260957113937987695693176363781265627320768389379117616372663862512739002847253910669585746892100222424525167842827843768307741087300179002835034881757965796227957646044115311218635730651104328081343355714996677210258400955901169142082294486216435178430449427237752282207296918712397602387752442408746772906292895430831431512136447455518006170350448641614329208076814913702067542011864437835084799062993417100158245847123827504718034030712101698905178541136641571625800523892621903862802754928225247996995696942461956154765961845804177691091027156715605906827976632922073937018080087483567647996285712853311954509481321494645290055745983934696052663960222734720390370544742645373205759097968502597688084103404695591970596459813877761752445306691007760832032320190099493821533662764246091742645076307936707051548890132040183316049841607207508789367963807261366737063931798278096633841376375183545308650565612596066164369462476748519819508", "y": "-1.9897139273265526497860298917162952223990107839519500324569799740452620017492148573813105559831302940285538776103953540873552472004667018983822352702654023806912851187386552226045516313615826226592650715707176008306151708500994845422947077998333923793608288003364504148025313101407502065101022065334906487585122707042960638934790735262823666061104915772022085701773259392124766413764698276641963213291638038862410030747398600862130692973476554855106133407314269114480845022252112849372500460338342447080416385028084868547072404439004574723756333444797883200449140982081853799103002290453887734501207126358231410933827795403809685689921866116787761916499323508401970140286088051126110336617700486116422083173587492989285672377725895215147408551868799803566432042455376923091607687551217699291654197893133114323528608169191169615049743214115679000719091974302841621800301195436519483561226355010837872273935763788373191823909581164163250082448483147674350421473017580875819706230977729785138722259270986042067092008250983288292997331863930154229647678846521870731330525718794503351510350719553731737419595232579821092543144864223679210365258548155513262743315788927784627383668751559192928149672774967728712515898683958709891193247288986599059471969743450213147891127296703802885366465568248425178303900785456329452963280710321893734338044274995077484470005437977568193630121768299613590121094972713333091177567044962227473069834012384002127506889270989848669996198781438975250192559504350171606424895325996271394859971981933365388920104682378789413042555172462922201725525883866968369100356202465153438894697108254782434511855696865951365241999195174309510351921617955336496157354752886473433078851274267944385353393367226449660941801679824197059539377153293559880613366589232144258009905510201976318736808626469601084659910363652112940631536784438428570841762650479660234020421780290081015821397604096787671221265843061353655222253176775554844045704481828803794667468131564691235841588279855093202316"}
G := {"x": "1.2252451839997463277416821347173430834288850578216203751527195895011688631504831256782064696893906459805143510322940246623501604561148277702478706807018987615176202716558565598448519666456305189229593257220302227926857620213035019135445352803637721281815977225647824901474774498776241318911775620055996574859633607303696217153875750021207179949140813697595111198711243803453403276071081153854768792212931721535268849439114401653881775209556447614879505648870976206913232445496467288999152209716023414862156665516097227930311260837664852259345938013848733777886554734788788260452027977272830991836789017928496248120130805400798667394589230561269909841707484598588705660229563423059203910250937023036579953561004235912385023173640266980205733004014869542867041427400675220595940414544401757476189517542735385328785237774275936643513862268551754008938299958585538671343616474293165085406259782062051255626629740980627036520844136334434713054007160479458921250602067320972646141779159797009368571279196300831946452452308193963488137106996646085922628491367030591263082369521443031006152153411818109367186339615805310441191813668068743630498576373044665207126553949888787737416078586078115846129456349910498582482559121017101886021176977942344390682134674447835959328322142501661394870799522049415428958852756891782410784775286381123858896351540643801198806123778795626613546853552284584284243931776272240996914824775679192835395961592543148966228994067781082457600468503291449920877076438086247640982984643949150547410729431679214187099738053689048068598622535887376001502151528769021922617019077097911154454486421642197046586011683538963031490959956258216176001857143573344022745259339252677354972127008032651973668019888632639804814727628677313397120451015748701155957948297652204014701770093061119123777346654496119583983839904950253089233168617876954128677461846031646474225554933979908341975079196396245605316018096369316631468034100860951683079311812408227345674717193701966917815268761625740090246", "y": "-1.9115952973175737907841625130211363186227155360189437662284899870226310008746074286906552779915651470142769388051976770436776236002333509491911176351327011903456425593693276113022758156807913113296325357853588004153075854250497422711473538999166961896804144001682252074012656550703751032550511032667453243792561353521480319467395367631411833030552457886011042850886629696062383206882349138320981606645819019431205015373699300431065346486738277427553066703657134557240422511126056424686250230169171223540208192514042434273536202219502287361878166722398941600224570491040926899551501145226943867250603563179115705466913897701904842844960933058393880958249661754200985070143044025563055168308850243058211041586793746494642836188862947607573704275934399901783216021227688461545803843775608849645827098946566557161764304084595584807524871607057839500359545987151420810900150597718259741780613177505418936136967881894186595911954790582081625041224241573837175210736508790437909853115488864892569361129635493021033546004125491644146498665931965077114823839423260935365665262859397251675755175359776865868709797616289910546271572432111839605182629274077756631371657894463892313691834375779596464074836387483864356257949341979354945596623644493299529735984871725106573945563648351901442683232784124212589151950392728164726481640355160946867169022137497538742235002718988784096815060884149806795060547486356666545588783522481113736534917006192001063753444635494924334998099390719487625096279752175085803212447662998135697429985990966682694460052341189394706521277586231461100862762941933484184550178101232576719447348554127391217255927848432975682620999597587154755175960808977668248078677376443236716539425637133972192676696683613224830470900839912098529769688576646779940306683294616072129004952755100988159368404313234800542329955181826056470315768392219214285420881325239830117010210890145040507910698802048393835610632921530676827611126588387777422022852240914401897333734065782345617920794139927546601158"}

Need to prove:
concyclic(B, F, G, H)

Proof:
By line_definition on E, H, perpendicular_line(E, f) we get Line(E, H) == perpendicular_line(E, f)
By line_definition on H, B, f we get f == Line(B, H)
By line_definition on F, C, g we get g == Line(C, F)
By line_definition on D, B, i we get i == Line(B, D)
By line_definition on A, F, g we get g == Line(A, F)
By line_definition on A, D, h we get h == Line(A, D)
By line_definition on H, C, f we get f == Line(C, H)
By circle_definition on B, A, F, c we get c == Circle(A, B, F)
By perpendicular_line_definition on H, f, perpendicular_line(E, f) we get f == perpendicular_line(H, perpendicular_line(E, f))
By line_intersection_definition on C, f, g we get C == line_intersection(f, g)
By line_intersection_definition on A, g, h we get A == line_intersection(g, h)
By perpendicular_line_definition on H, perpendicular_line(E, f), f we get perpendicular_line(E, f) == perpendicular_line(H, f)
By circle_definition on D, F, A, c we get c == Circle(A, D, F)
By circle_definition on D, B, F, c we get c == Circle(B, D, F)
By line_intersection_definition on B, f, i we get B == line_intersection(f, i)
By perpendicular_line_definition on C, f, perpendicular_line(E, f) we get f == perpendicular_line(C, perpendicular_line(E, f))
By perpendicular_line_definition on B, f, perpendicular_line(E, f) we get f == perpendicular_line(B, perpendicular_line(E, f))
By between_imply_not_between on F, G, A we get collinear_and_not_between(A, F, G)
By between_imply_not_between on A, G, F we get collinear_and_not_between(F, A, G)
By circle_radius_v0_r on B, c we get radius(c) == distance(B, center(c))
By circle_radius_v0_r on D, c we get radius(c) == distance(D, center(c))
By circle_radius_v0_r on F, c we get radius(c) == distance(F, center(c))
By circle_radius_v0_r on A, c we get radius(c) == distance(A, center(c))
By in_imply_collinear on F, C, A we get collinear(A, C, F)
By in_imply_collinear on H, B, C we get collinear(B, C, H)
By in_imply_concyclic on A, D, B, F we get concyclic(A, B, D, F)
By angle_bisector_draw_angle_v0 on C, B, A we get exists(Line(A, B), Line(B, C))
By angle_bisector_draw_angle_v0 on A, B, C we get exists(Line(A, B), Line(B, C))
By angle_bisector_draw_angle_v0 on C, A, B we get exists(Line(A, B), Line(A, C))
By angle_bisector_draw_angle_v0 on B, A, C we get exists(Line(A, B), Line(A, C))
By power_of_a_point_in_circle on D, c we get 0 == power_of_a_point(D, c)
By power_of_a_point_in_circle on B, c we get 0 == power_of_a_point(B, c)
By power_of_a_point_in_circle on F, c we get 0 == power_of_a_point(F, c)
By power_of_a_point_on_circle on A, c we get 0 == power_of_a_point(A, c)
By angles_on_chord_v0 on F, D, A, B, c we get angle(F, A, D) == angle(F, B, D) mod 360
By angles_on_chord_v1 on F, A, D, B, c we get angle(F, B, A) == angle(F, D, A) mod 360
By angles_on_chord_v0 on B, A, D, F, c we get angle(B, D, A) == angle(B, F, A) mod 360
By angle_to_center on A, B, F, c we get 2 * angle(A, B, F) == angle(A, center(c), F) mod 360
By angles_on_chord_v0 on A, F, B, D, c we get angle(A, B, F) == angle(A, D, F) mod 360
By angles_on_chord_v3 on F, B, D, A, c we get angle(F, D, B) == angle(F, A, B) + 180 mod 360
By angles_on_chord_v1 on A, B, D, F, c we get angle(A, D, B) == angle(A, F, B) mod 360
By angles_on_chord_v1 on B, D, A, F, c we get angle(B, A, D) == angle(B, F, D) mod 360
By angles_on_chord_v3 on D, A, B, F, c we get angle(D, B, A) == angle(D, F, A) + 180 mod 360
By angles_on_chord_v2 on D, A, F, B, c we get angle(D, F, A) == angle(D, B, A) + 180 mod 360
By angle_to_center on D, F, A, c we get 2 * angle(D, F, A) == angle(D, center(c), A) mod 360
By angle_to_center on D, B, F, c we get 2 * angle(D, B, F) == angle(D, center(c), F) mod 360
By angle_to_center on B, A, F, c we get 2 * angle(B, A, F) == angle(B, center(c), F) mod 360
By angles_on_chord_v0 on D, B, F, A, c we get angle(D, A, B) == angle(D, F, B) mod 360
By angle_to_center on A, D, F, c we get 2 * angle(A, D, F) == angle(A, center(c), F) mod 360
By angles_on_chord_v1 on D, F, B, A, c we get angle(D, A, F) == angle(D, B, F) mod 360
By angles_on_chord_v2 on F, B, A, D, c we get angle(F, A, B) == angle(F, D, B) + 180 mod 360
By angles_on_chord_v2 on B, F, D, A, c we get angle(B, D, F) == angle(B, A, F) + 180 mod 360
By angles_on_chord_v3 on B, F, A, D, c we get angle(B, A, F) == angle(B, D, F) + 180 mod 360
By angles_on_chord_v2 on A, D, B, F, c we get angle(A, B, D) == angle(A, F, D) + 180 mod 360
By angles_on_chord_v3 on A, D, F, B, c we get angle(A, F, D) == angle(A, B, D) + 180 mod 360
By angle_to_center on F, A, D, c we get 2 * angle(F, A, D) == angle(F, center(c), D) mod 360
By angle_to_center on A, D, B, c we get 2 * angle(A, D, B) == angle(A, center(c), B) mod 360
By angle_to_center on D, A, B, c we get 2 * angle(D, A, B) == angle(D, center(c), B) mod 360
By angle_to_center on D, B, A, c we get 2 * angle(D, B, A) == angle(D, center(c), A) mod 360
By angle_to_center on F, D, B, c we get 2 * angle(F, D, B) == angle(F, center(c), B) mod 360
By angle_to_center on D, F, B, c we get 2 * angle(D, F, B) == angle(D, center(c), B) mod 360
By angle_to_center on B, D, F, c we get 2 * angle(B, D, F) == angle(B, center(c), F) mod 360
By angle_to_center on D, A, F, c we get 2 * angle(D, A, F) == angle(D, center(c), F) mod 360
By angle_to_center on B, F, D, c we get 2 * angle(B, F, D) == angle(B, center(c), D) mod 360
By angle_to_center on B, F, A, c we get 2 * angle(B, F, A) == angle(B, center(c), A) mod 360
By angle_to_center on A, B, D, c we get 2 * angle(A, B, D) == angle(A, center(c), D) mod 360
By angle_to_center on B, D, A, c we get 2 * angle(B, D, A) == angle(B, center(c), A) mod 360
By angle_to_center on F, B, A, c we get 2 * angle(F, B, A) == angle(F, center(c), A) mod 360
By angle_to_center on F, A, B, c we get 2 * angle(F, A, B) == angle(F, center(c), B) mod 360
By angle_to_center on F, D, A, c we get 2 * angle(F, D, A) == angle(F, center(c), A) mod 360
By angle_to_center on F, B, D, c we get 2 * angle(F, B, D) == angle(F, center(c), D) mod 360
By angle_to_center on A, F, B, c we get 2 * angle(A, F, B) == angle(A, center(c), B) mod 360
By angle_to_center on A, F, D, c we get 2 * angle(A, F, D) == angle(A, center(c), D) mod 360
By angle_to_center on B, A, D, c we get 2 * angle(B, A, D) == angle(B, center(c), D) mod 360
By collinear_definition on F, A, G we get A in Line(F, G), G in Line(A, F), Line(A, F) == Line(F, G), 0 == 2 * angle(A, F, G) mod 360
By collinear_definition on A, G, F we get G in Line(A, F), F in Line(A, G), Line(A, F) == Line(A, G), 0 == 2 * angle(G, A, F) mod 360
By altitude_definition on E, B, C, perpendicular_line(E, f) we get altitude(E, B, C) == perpendicular_line(E, f)
By collinear_definition on F, G, A we get G in Line(A, F), A in Line(F, G), Line(A, F) == Line(F, G), 0 == 2 * angle(G, F, A) mod 360
By log_of_2_times_distance on A, F, F, G we get log(distance(A, F)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(F, G))
By collinear_definition on G, A, F we get A in Line(F, G), F in Line(A, G), Line(A, G) == Line(F, G), 0 == 2 * angle(A, G, F) mod 360
By collinear_definition on G, F, A we get F in Line(A, G), A in Line(F, G), Line(A, G) == Line(F, G), 0 == 2 * angle(F, G, A) mod 360
By log_of_2_times_distance on F, A, G, A we get log(distance(A, F)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(A, G))
By collinear_definition on A, F, G we get F in Line(A, G), G in Line(A, F), Line(A, F) == Line(A, G), 0 == 2 * angle(F, A, G) mod 360
By power_of_a_point_definition on G, F, A, c we get log(power_of_a_point(G, c)) == log(distance(F, G)) + log(distance(A, G))
By incenter_concurrency on C, A, B we get incenter(A, B, C) in internal_angle_bisector(B, A, C), incenter(A, B, C) in internal_angle_bisector(A, B, C), incenter(A, B, C) in internal_angle_bisector(A, C, B)
By between_implies_angles on A, G, F we get 180 == angle(A, G, F) mod 360, 0 == angle(G, F, A) mod 360, 0 == angle(F, A, G) mod 360
By between_implies_angles on F, G, A we get 180 == angle(F, G, A) mod 360, 0 == angle(G, A, F) mod 360, 0 == angle(A, F, G) mod 360
By line_definition on G, C, g we get g == Line(C, G)
By line_definition on D, C, internal_angle_bisector(A, C, B) we get Line(C, D) == internal_angle_bisector(A, C, B)
By line_intersection_definition on F, Line(E, F), Line(D, F) we get F == line_intersection(Line(D, F), Line(E, F))
By line_intersection_definition on D, Line(D, E), h we get D == line_intersection(h, Line(D, E))
By line_intersection_definition on E, Line(E, H), Line(A, E) we get E == line_intersection(Line(A, E), Line(E, H))
By line_intersection_definition on F, g, Line(D, F) we get F == line_intersection(g, Line(D, F))
By line_intersection_definition on D, Line(D, F), h we get D == line_intersection(h, Line(D, F))
By line_intersection_definition on E, Line(E, F), Line(E, H) we get E == line_intersection(Line(E, F), Line(E, H))
By line_intersection_definition on E, Line(E, H), Line(B, E) we get E == line_intersection(Line(B, E), Line(E, H))
By line_intersection_definition on C, internal_angle_bisector(A, C, B), g we get C == line_intersection(g, internal_angle_bisector(A, C, B))
By line_intersection_definition on F, Line(D, F), Line(B, F) we get F == line_intersection(Line(B, F), Line(D, F))
By line_intersection_definition on E, Line(D, E), Line(B, E) we get E == line_intersection(Line(B, E), Line(D, E))
By line_intersection_definition on E, Line(A, E), Line(B, E) we get E == line_intersection(Line(A, E), Line(B, E))
By line_intersection_definition on D, internal_angle_bisector(A, C, B), Line(D, F) we get D == line_intersection(Line(D, F), internal_angle_bisector(A, C, B))
By line_intersection_definition on E, Line(E, H), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, H))
By line_intersection_definition on D, i, Line(D, E) we get D == line_intersection(i, Line(D, E))
By line_intersection_definition on B, i, Line(A, B) we get B == line_intersection(i, Line(A, B))
By line_intersection_definition on B, f, Line(B, F) we get B == line_intersection(f, Line(B, F))
By line_intersection_definition on B, i, Line(B, E) we get B == line_intersection(i, Line(B, E))
By line_intersection_definition on F, g, Line(E, F) we get F == line_intersection(g, Line(E, F))
By line_intersection_definition on A, h, Line(A, B) we get A == line_intersection(h, Line(A, B))
By line_intersection_definition on E, Line(E, F), Line(A, E) we get E == line_intersection(Line(A, E), Line(E, F))
By line_intersection_definition on F, g, Line(B, F) we get F == line_intersection(g, Line(B, F))
By line_intersection_definition on F, Line(B, F), Line(E, F) we get F == line_intersection(Line(B, F), Line(E, F))
By line_intersection_definition on A, Line(A, E), g we get A == line_intersection(g, Line(A, E))
By line_intersection_definition on A, Line(A, E), h we get A == line_intersection(h, Line(A, E))
By line_intersection_definition on B, f, Line(A, B) we get B == line_intersection(f, Line(A, B))
By line_intersection_definition on E, Line(B, E), Line(E, F) we get E == line_intersection(Line(B, E), Line(E, F))
By line_intersection_definition on B, Line(B, E), Line(B, F) we get B == line_intersection(Line(B, E), Line(B, F))
By line_intersection_definition on C, internal_angle_bisector(A, C, B), f we get C == line_intersection(f, internal_angle_bisector(A, C, B))
By line_intersection_definition on D, Line(D, F), Line(D, E) we get D == line_intersection(Line(D, E), Line(D, F))
By line_intersection_definition on A, Line(A, B), g we get A == line_intersection(g, Line(A, B))
By line_intersection_definition on B, Line(B, E), Line(A, B) we get B == line_intersection(Line(A, B), Line(B, E))
By line_intersection_definition on B, i, Line(B, F) we get B == line_intersection(i, Line(B, F))
By line_intersection_definition on A, Line(A, B), Line(A, E) we get A == line_intersection(Line(A, B), Line(A, E))
By line_intersection_definition on B, Line(B, F), Line(A, B) we get B == line_intersection(Line(A, B), Line(B, F))
By line_intersection_definition on B, Line(B, E), f we get B == line_intersection(f, Line(B, E))
By line_intersection_definition on E, Line(D, E), Line(E, F) we get E == line_intersection(Line(D, E), Line(E, F))
By line_intersection_definition on D, i, Line(D, F) we get D == line_intersection(i, Line(D, F))
By line_intersection_definition on E, Line(A, E), Line(D, E) we get E == line_intersection(Line(A, E), Line(D, E))
By same_angle_v1 on F, G, A, D we get angle(A, F, D) == angle(G, F, D) mod 360
By same_angle_v0 on A, F, G, D we get angle(F, A, D) == angle(G, A, D) mod 360
By same_angle_v1 on F, A, G, B we get angle(A, F, B) == angle(G, F, B) mod 360
By same_angle_v0 on A, G, F, B we get angle(F, A, B) == angle(G, A, B) mod 360
By projection_definition on C, H, Line(E, H) we get H == projection(C, Line(E, H))
By projection_definition on B, H, Line(E, H) we get H == projection(B, Line(E, H))
By same_angle_v0 on A, C, F, D we get angle(C, A, D) == angle(F, A, D) mod 360
By same_angle_v1 on F, G, A, E we get angle(A, F, E) == angle(G, F, E) mod 360
By same_angle_v3 on F, C, A, D we get angle(C, F, D) == angle(A, F, D) + 180 mod 360
By same_angle_v2 on F, C, A, B we get angle(C, F, B) == angle(A, F, B) + 180 mod 360
By same_angle_v0 on A, F, G, E we get angle(F, A, E) == angle(G, A, E) mod 360
By same_angle_v0 on A, C, F, B we get angle(C, A, B) == angle(F, A, B) mod 360
By in_imply_collinear on C, A, G we get collinear(A, C, G)
By in_imply_collinear on G, C, F we get collinear(C, F, G)
By probably_between_and_collinear_implies_between on C, F, A we get between(A, F, C)
By reverse_direction on A, F we get 180 == direction(A, F) - direction(F, A) mod 360
By probably_between_and_collinear_implies_between on H, B, C we get between(C, B, H)
By reverse_direction on D, F we get 180 == direction(D, F) - direction(F, D) mod 360
By reverse_direction on G, F we get 180 == direction(G, F) - direction(F, G) mod 360
By reverse_direction on G, A we get 180 == direction(G, A) - direction(A, G) mod 360
By reverse_direction on F, B we get 180 == direction(F, B) - direction(B, F) mod 360
By reverse_direction on B, F we get 180 == direction(B, F) - direction(F, B) mod 360
By reverse_direction on A, D we get 180 == direction(A, D) - direction(D, A) mod 360
By reverse_direction on D, A we get 180 == direction(D, A) - direction(A, D) mod 360
By reverse_direction on F, D we get 180 == direction(F, D) - direction(D, F) mod 360
By reverse_direction on A, G we get 180 == direction(A, G) - direction(G, A) mod 360
By reverse_direction on B, D we get 180 == direction(B, D) - direction(D, B) mod 360
By reverse_direction on A, B we get 180 == direction(A, B) - direction(B, A) mod 360
By reverse_direction on F, G we get 180 == direction(F, G) - direction(G, F) mod 360
By reverse_direction on D, B we get 180 == direction(D, B) - direction(B, D) mod 360
By reverse_direction on B, A we get 180 == direction(B, A) - direction(A, B) mod 360
By reverse_direction on F, A we get 180 == direction(F, A) - direction(A, F) mod 360
By same_angle_v0 on A, F, C, E we get angle(C, A, E) == angle(F, A, E) mod 360
By same_angle_v3 on B, H, C, D we get angle(H, B, D) == angle(C, B, D) + 180 mod 360
By same_angle_v2 on F, C, A, E we get angle(C, F, E) == angle(A, F, E) + 180 mod 360
By perpendicular_direction_conditions_v0_r on H, E, C, B we get 180 == 2 * direction(H, E) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on H, B, E, H we get 180 == 2 * direction(H, B) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on E, H, H, C we get 180 == 2 * direction(E, H) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on C, H, H, E we get 180 == 2 * direction(C, H) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on B, H, H, E we get 180 == 2 * direction(B, H) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on B, C, E, H we get 180 == 2 * direction(B, C) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on H, C, E, H we get 180 == 2 * direction(H, C) - 2 * direction(E, H) mod 360
By same_angle_v3 on B, H, C, A we get angle(H, B, A) == angle(C, B, A) + 180 mod 360
By same_angle_v2 on B, H, C, F we get angle(H, B, F) == angle(C, B, F) + 180 mod 360
By perpendicular_direction_conditions_v0_r on H, C, H, E we get 180 == 2 * direction(H, C) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on B, C, H, E we get 180 == 2 * direction(B, C) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on H, B, H, E we get 180 == 2 * direction(H, B) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on H, E, H, B we get 180 == 2 * direction(H, E) - 2 * direction(H, B) mod 360
By perpendicular_direction_conditions_v0_r on E, H, C, B we get 180 == 2 * direction(E, H) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on B, H, E, H we get 180 == 2 * direction(B, H) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on H, E, H, C we get 180 == 2 * direction(H, E) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on E, H, H, B we get 180 == 2 * direction(E, H) - 2 * direction(H, B) mod 360
By perpendicular_direction_conditions_v0_r on C, B, E, H we get 180 == 2 * direction(C, B) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on E, H, B, C we get 180 == 2 * direction(E, H) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on H, E, B, H we get 180 == 2 * direction(H, E) - 2 * direction(B, H) mod 360
By perpendicular_direction_conditions_v0_r on C, H, E, H we get 180 == 2 * direction(C, H) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on H, E, C, H we get 180 == 2 * direction(H, E) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on C, B, H, E we get 180 == 2 * direction(C, B) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on E, H, C, H we get 180 == 2 * direction(E, H) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on E, H, B, H we get 180 == 2 * direction(E, H) - 2 * direction(B, H) mod 360
By perpendicular_direction_conditions_v0_r on H, E, B, C we get 180 == 2 * direction(H, E) - 2 * direction(B, C) mod 360
By internal_angle_bisector_definition_v0 on C, D, B, A we get angle(C, A, D) == angle(D, A, B) mod 360
By reverse_direction on E, A we get 180 == direction(E, A) - direction(A, E) mod 360
By internal_angle_bisector_definition_v0_r on A, F, A, G we get Line(F, G) == internal_angle_bisector(A, G, A)
By altitude_definition on B, H, E, f we get f == altitude(B, E, H)
By isosceles_triangle_midpoint on E, A, F we get midpoint(A, F) in median(E, A, F)
By reverse_direction on E, B we get 180 == direction(E, B) - direction(B, E) mod 360
By internal_angle_bisector_definition_v0_r on G, A, G, F we get Line(A, F) == internal_angle_bisector(G, F, G)
By internal_angle_bisector_definition_v0 on B, D, C, A we get angle(B, A, D) == angle(D, A, C) mod 360
By altitude_definition on C, E, H, f we get f == altitude(C, E, H)
By collinear_definition on F, C, A we get C in Line(A, F), A in Line(C, F), Line(A, F) == Line(C, F), 0 == 2 * angle(C, F, A) mod 360
By reverse_direction on E, F we get 180 == direction(E, F) - direction(F, E) mod 360
By internal_angle_bisector_definition_v0 on A, D, C, B we get angle(A, B, D) == angle(D, B, C) mod 360
By internal_angle_bisector_definition_v0_r on A, G, A, F we get Line(F, G) == internal_angle_bisector(A, F, A)
By internal_angle_bisector_definition_v0_r on F, G, F, A we get Line(A, G) == internal_angle_bisector(F, A, F)
By internal_angle_bisector_definition_v0_r on F, A, F, G we get Line(A, G) == internal_angle_bisector(F, G, F)
By reverse_direction on E, D we get 180 == direction(E, D) - direction(D, E) mod 360
By internal_angle_bisector_definition_v0 on C, D, A, B we get angle(C, B, D) == angle(D, B, A) mod 360
By collinear_definition on A, C, F we get C in Line(A, F), F in Line(A, C), Line(A, C) == Line(A, F), 0 == 2 * angle(C, A, F) mod 360
By internal_angle_bisector_definition_v0_r on G, F, G, A we get Line(A, F) == internal_angle_bisector(G, A, G)
By collinear_definition on F, A, C we get A in Line(C, F), C in Line(A, F), Line(A, F) == Line(C, F), 0 == 2 * angle(A, F, C) mod 360
By collinear_definition on A, F, C we get F in Line(A, C), C in Line(A, F), Line(A, C) == Line(A, F), 0 == 2 * angle(F, A, C) mod 360
By same_angle_v2 on B, H, C, E we get angle(H, B, E) == angle(C, B, E) + 180 mod 360
By same_angle_v1 on C, F, A, B we get angle(A, C, B) == angle(F, C, B) mod 360
By same_angle_v1 on H, B, C, E we get angle(B, H, E) == angle(C, H, E) mod 360
By same_angle_v0 on C, B, H, F we get angle(B, C, F) == angle(H, C, F) mod 360
By same_angle_v0 on C, B, H, A we get angle(B, C, A) == angle(H, C, A) mod 360
By same_angle_v1 on C, F, A, H we get angle(A, C, H) == angle(F, C, H) mod 360
By isosceles_triangle_properties on E, B, F we get distance(B, E) == distance(E, F), angle(B, F, E) == angle(E, B, F) mod 360
By sss_anti_congruence_v0 on E, F, A, E, A, F we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v1 on F, E, A, A, E, F we get anti_congruent_triangles(A, E, F, F, E, A)
By altitude_definition on E, H, B, Line(E, H) we get Line(E, H) == altitude(E, B, H)
By sas_anti_congruence on D, E, A, A, E, D we get anti_congruent_triangles(A, D, E, D, A, E)
By sss_anti_congruence_v0 on A, E, F, F, E, A we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v1 on A, F, E, F, A, E we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v1 on E, A, F, E, F, A we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v0 on E, F, A, E, A, F we get anti_congruent_triangles(A, E, F, F, E, A)
By sas_anti_congruence on D, E, F, F, E, D we get anti_congruent_triangles(D, E, F, F, E, D)
By sas_anti_congruence on B, E, D, D, E, B we get anti_congruent_triangles(B, D, E, D, B, E)
By sas_anti_congruence on F, E, A, A, E, F we get anti_congruent_triangles(A, E, F, F, E, A)
By altitude_definition on E, C, H, Line(E, H) we get Line(E, H) == altitude(E, C, H)
By collinear_definition on H, C, B we get C in Line(B, H), B in Line(C, H), Line(B, H) == Line(C, H), 0 == 2 * angle(C, H, B) mod 360
By sss_anti_congruence_v0 on E, F, A, E, A, F we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v1 on F, E, A, A, E, F we get anti_congruent_triangles(A, E, F, F, E, A)
By perpendicular_angle_conditions_v0 on E, H, B we get angle(E, H, B) == orientation(B, E, H) mod 360
By sss_anti_congruence_v1 on A, F, E, F, A, E we get anti_congruent_triangles(A, E, F, F, E, A)
By sas_anti_congruence on B, E, A, A, E, B we get anti_congruent_triangles(A, B, E, B, A, E)
By sss_anti_congruence_v0 on E, F, A, E, A, F we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v0 on E, F, A, E, A, F we get anti_congruent_triangles(A, E, F, F, E, A)
By sas_anti_congruence on B, E, F, F, E, B we get anti_congruent_triangles(B, E, F, F, E, B)
By isosceles_triangle_properties on E, D, B we get distance(B, E) == distance(D, E), angle(D, B, E) == angle(E, D, B) mod 360
By isosceles_triangle_properties on E, A, D we get distance(A, E) == distance(D, E), angle(A, D, E) == angle(E, A, D) mod 360
By perpendicular_angle_conditions_v0 on E, H, C we get angle(E, H, C) == orientation(C, E, H) mod 360
By isosceles_triangle_properties on E, F, B we get distance(B, E) == distance(E, F), angle(E, F, B) == angle(F, B, E) mod 360
By isosceles_triangle_properties on E, A, B we get distance(A, E) == distance(B, E), angle(A, B, E) == angle(E, A, B) mod 360
By sss_anti_congruence_v1 on F, E, A, A, E, F we get anti_congruent_triangles(A, E, F, F, E, A)
By sas_anti_congruence on F, E, B, B, E, F we get anti_congruent_triangles(B, E, F, F, E, B)
By collinear_definition on B, H, C we get H in Line(B, C), C in Line(B, H), Line(B, C) == Line(B, H), 0 == 2 * angle(H, B, C) mod 360
By sss_anti_congruence_v1 on E, A, F, E, F, A we get anti_congruent_triangles(A, E, F, F, E, A)
By sas_anti_congruence on A, E, F, F, E, A we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v0 on F, A, E, A, F, E we get anti_congruent_triangles(A, E, F, F, E, A)
By collinear_definition on C, B, H we get B in Line(C, H), H in Line(B, C), Line(B, C) == Line(C, H), 0 == 2 * angle(B, C, H) mod 360
By sss_anti_congruence_v0 on A, E, F, F, E, A we get anti_congruent_triangles(A, E, F, F, E, A)
By isosceles_triangle_properties on E, A, F we get distance(A, E) == distance(E, F), angle(A, F, E) == angle(E, A, F) mod 360
By sss_anti_congruence_v0 on F, A, E, A, F, E we get anti_congruent_triangles(A, E, F, F, E, A)
By sas_anti_congruence on D, E, B, B, E, D we get anti_congruent_triangles(B, D, E, D, B, E)
By sss_anti_congruence_v0 on F, A, E, A, F, E we get anti_congruent_triangles(A, E, F, F, E, A)
By collinear_definition on C, H, B we get H in Line(B, C), B in Line(C, H), Line(B, C) == Line(C, H), 0 == 2 * angle(H, C, B) mod 360
By isosceles_triangle_properties on E, B, A we get distance(A, E) == distance(B, E), angle(B, A, E) == angle(E, B, A) mod 360
By sss_anti_congruence_v1 on A, F, E, F, A, E we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v0 on F, A, E, A, F, E we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v0 on F, A, E, A, F, E we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v0 on A, E, F, F, E, A we get anti_congruent_triangles(A, E, F, F, E, A)
By isosceles_triangle_properties on E, B, D we get distance(B, E) == distance(D, E), angle(B, D, E) == angle(E, B, D) mod 360
By sss_anti_congruence_v1 on F, E, A, A, E, F we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v1 on E, A, F, E, F, A we get anti_congruent_triangles(A, E, F, F, E, A)
By perpendicular_angle_conditions_v0 on B, H, E we get angle(B, H, E) == orientation(B, H, E) mod 360
By sss_anti_congruence_v0 on A, E, F, F, E, A we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v0 on F, A, E, A, F, E we get anti_congruent_triangles(A, E, F, F, E, A)
By isosceles_triangle_properties on E, F, D we get distance(D, E) == distance(E, F), angle(E, F, D) == angle(F, D, E) mod 360
By collinear_definition on C, F, A we get F in Line(A, C), A in Line(C, F), Line(A, C) == Line(C, F), 0 == 2 * angle(F, C, A) mod 360
By sss_anti_congruence_v1 on A, F, E, F, A, E we get anti_congruent_triangles(A, E, F, F, E, A)
By isosceles_triangle_properties on E, D, F we get distance(D, E) == distance(E, F), angle(D, F, E) == angle(E, D, F) mod 360
By sss_anti_congruence_v1 on A, F, E, F, A, E we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v0 on E, F, A, E, A, F we get anti_congruent_triangles(A, E, F, F, E, A)
By collinear_definition on H, B, C we get B in Line(C, H), C in Line(B, H), Line(B, H) == Line(C, H), 0 == 2 * angle(B, H, C) mod 360
By isosceles_triangle_properties on E, D, A we get distance(A, E) == distance(D, E), angle(D, A, E) == angle(E, D, A) mod 360
By sss_anti_congruence_v1 on E, A, F, E, F, A we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v0 on A, E, F, F, E, A we get anti_congruent_triangles(A, E, F, F, E, A)
By sas_anti_congruence on A, E, D, D, E, A we get anti_congruent_triangles(A, D, E, D, A, E)
By sss_anti_congruence_v1 on E, A, F, E, F, A we get anti_congruent_triangles(A, E, F, F, E, A)
By sas_anti_congruence on A, E, B, B, E, A we get anti_congruent_triangles(A, B, E, B, A, E)
By collinear_definition on C, A, F we get A in Line(C, F), F in Line(A, C), Line(A, C) == Line(C, F), 0 == 2 * angle(A, C, F) mod 360
By perpendicular_angle_conditions_v0 on C, H, E we get angle(C, H, E) == orientation(C, H, E) mod 360
By sss_anti_congruence_v1 on A, F, E, F, A, E we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v1 on F, E, A, A, E, F we get anti_congruent_triangles(A, E, F, F, E, A)
By collinear_definition on B, C, H we get C in Line(B, H), H in Line(B, C), Line(B, C) == Line(B, H), 0 == 2 * angle(C, B, H) mod 360
By sss_anti_congruence_v1 on E, A, F, E, F, A we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v0 on A, E, F, F, E, A we get anti_congruent_triangles(A, E, F, F, E, A)
By sss_anti_congruence_v1 on F, E, A, A, E, F we get anti_congruent_triangles(A, E, F, F, E, A)
By sas_anti_congruence on F, E, D, D, E, F we get anti_congruent_triangles(D, E, F, F, E, D)
By isosceles_triangle_properties on E, F, A we get distance(A, E) == distance(E, F), angle(E, F, A) == angle(F, A, E) mod 360
By power_of_a_point_definition on C, F, A, c we get log(power_of_a_point(C, c)) == log(distance(C, F)) + log(distance(A, C))
By concyclic_sufficient_conditions_v1 on E, B, C, A we get concyclic(A, B, C, E)
By concurrent_sufficient_conditions on i, Line(A, B), f we get concurrent(f, i, Line(A, B))
By concurrent_sufficient_conditions on Line(A, B), Line(A, E), h we get concurrent(h, Line(A, B), Line(A, E))
By concurrent_sufficient_conditions on Line(D, E), Line(A, E), Line(E, F) we get concurrent(Line(A, E), Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(C, D), g, f we get concurrent(f, g, Line(C, D))
By concurrent_sufficient_conditions on Line(D, E), Line(A, E), Line(B, E) we get concurrent(Line(A, E), Line(B, E), Line(D, E))
By concurrent_sufficient_conditions on Line(B, E), f, i we get concurrent(f, i, Line(B, E))
By concurrent_sufficient_conditions on f, Line(B, F), i we get concurrent(f, i, Line(B, F))
By concurrent_sufficient_conditions on Line(D, E), Line(B, E), Line(E, F) we get concurrent(Line(B, E), Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(A, E), Line(E, H), Line(D, E) we get concurrent(Line(A, E), Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on f, Line(A, B), i we get concurrent(f, i, Line(A, B))
By concurrent_sufficient_conditions on Line(D, F), Line(C, D), h we get concurrent(h, Line(C, D), Line(D, F))
By concurrent_sufficient_conditions on Line(E, H), Line(B, E), Line(E, F) we get concurrent(Line(B, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(A, E), Line(A, B), g we get concurrent(g, Line(A, B), Line(A, E))
By concurrent_sufficient_conditions on Line(B, E), Line(A, E), Line(E, F) we get concurrent(Line(A, E), Line(B, E), Line(E, F))
By concurrent_sufficient_conditions on h, i, Line(D, E) we get concurrent(h, i, Line(D, E))
By concurrent_sufficient_conditions on Line(D, E), h, i we get concurrent(h, i, Line(D, E))
By concurrent_sufficient_conditions on Line(C, D), Line(D, F), h we get concurrent(h, Line(C, D), Line(D, F))
By concurrent_sufficient_conditions on Line(B, F), Line(D, F), g we get concurrent(g, Line(B, F), Line(D, F))
By concurrent_sufficient_conditions on Line(A, B), f, Line(B, E) we get concurrent(f, Line(A, B), Line(B, E))
By concurrent_sufficient_conditions on g, Line(C, D), f we get concurrent(f, g, Line(C, D))
By concurrent_sufficient_conditions on Line(A, E), g, Line(A, B) we get concurrent(g, Line(A, B), Line(A, E))
By concurrent_sufficient_conditions on Line(D, F), i, Line(D, E) we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(E, H), Line(A, E), Line(B, E) we get concurrent(Line(A, E), Line(B, E), Line(E, H))
By concurrent_sufficient_conditions on i, Line(B, F), Line(B, E) we get concurrent(i, Line(B, E), Line(B, F))
By concurrent_sufficient_conditions on i, Line(B, E), f we get concurrent(f, i, Line(B, E))
By concurrent_sufficient_conditions on g, h, Line(A, E) we get concurrent(g, h, Line(A, E))
By concurrent_sufficient_conditions on Line(B, F), Line(E, F), g we get concurrent(g, Line(B, F), Line(E, F))
By concurrent_sufficient_conditions on Line(B, F), Line(B, E), f we get concurrent(f, Line(B, E), Line(B, F))
By concurrent_sufficient_conditions on g, Line(D, F), Line(B, F) we get concurrent(g, Line(B, F), Line(D, F))
By concurrent_sufficient_conditions on Line(B, F), Line(B, E), i we get concurrent(i, Line(B, E), Line(B, F))
By concurrent_sufficient_conditions on Line(B, E), Line(E, H), Line(D, E) we get concurrent(Line(B, E), Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(D, F), Line(D, E), i we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), Line(A, E) we get concurrent(Line(A, E), Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(E, H), Line(A, E), Line(D, E) we get concurrent(Line(A, E), Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on h, Line(D, E), Line(D, F) we get concurrent(h, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(E, F), g, Line(B, F) we get concurrent(g, Line(B, F), Line(E, F))
By concurrent_sufficient_conditions on h, g, Line(A, B) we get concurrent(g, h, Line(A, B))
By concurrent_sufficient_conditions on Line(C, D), f, g we get concurrent(f, g, Line(C, D))
By concurrent_sufficient_conditions on Line(A, B), i, f we get concurrent(f, i, Line(A, B))
By concurrent_sufficient_conditions on Line(E, F), Line(E, H), Line(A, E) we get concurrent(Line(A, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on g, f, Line(C, D) we get concurrent(f, g, Line(C, D))
By concurrent_sufficient_conditions on g, Line(D, F), Line(E, F) we get concurrent(g, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(B, F), f, i we get concurrent(f, i, Line(B, F))
By concurrent_sufficient_conditions on Line(B, F), Line(A, B), i we get concurrent(i, Line(A, B), Line(B, F))
By concurrent_sufficient_conditions on Line(E, H), Line(D, E), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(E, F), Line(B, E), Line(E, H) we get concurrent(Line(B, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(C, D), Line(D, F), i we get concurrent(i, Line(C, D), Line(D, F))
By concurrent_sufficient_conditions on Line(E, H), Line(A, E), Line(E, F) we get concurrent(Line(A, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(E, H), Line(B, E), Line(D, E) we get concurrent(Line(B, E), Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on f, Line(B, E), Line(A, B) we get concurrent(f, Line(A, B), Line(B, E))
By concurrent_sufficient_conditions on Line(D, E), Line(E, H), Line(B, E) we get concurrent(Line(B, E), Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(D, F), i, Line(C, D) we get concurrent(i, Line(C, D), Line(D, F))
By concurrent_sufficient_conditions on f, Line(C, D), g we get concurrent(f, g, Line(C, D))
By concurrent_sufficient_conditions on h, Line(A, E), Line(A, B) we get concurrent(h, Line(A, B), Line(A, E))
By concurrent_sufficient_conditions on Line(D, E), Line(E, H), Line(A, E) we get concurrent(Line(A, E), Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(D, E), Line(A, E), Line(E, H) we get concurrent(Line(A, E), Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(A, B), f, Line(B, F) we get concurrent(f, Line(A, B), Line(B, F))
By concurrent_sufficient_conditions on Line(A, E), Line(E, F), Line(B, E) we get concurrent(Line(A, E), Line(B, E), Line(E, F))
By concurrent_sufficient_conditions on Line(A, E), Line(D, E), Line(B, E) we get concurrent(Line(A, E), Line(B, E), Line(D, E))
By concurrent_sufficient_conditions on Line(B, E), Line(D, E), Line(E, H) we get concurrent(Line(B, E), Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(E, F), Line(B, F), Line(D, F) we get concurrent(Line(B, F), Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on i, Line(D, E), Line(D, F) we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on f, i, Line(A, B) we get concurrent(f, i, Line(A, B))
By concurrent_sufficient_conditions on Line(A, E), h, g we get concurrent(g, h, Line(A, E))
By concurrent_sufficient_conditions on Line(A, B), i, Line(B, F) we get concurrent(i, Line(A, B), Line(B, F))
By concurrent_sufficient_conditions on f, Line(B, E), i we get concurrent(f, i, Line(B, E))
By concurrent_sufficient_conditions on Line(A, E), Line(D, E), Line(E, F) we get concurrent(Line(A, E), Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(E, F), Line(E, H), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(D, E), i, Line(D, F) we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), g we get concurrent(g, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(D, E), Line(B, E), Line(A, E) we get concurrent(Line(A, E), Line(B, E), Line(D, E))
By concurrent_sufficient_conditions on g, Line(A, B), Line(A, E) we get concurrent(g, Line(A, B), Line(A, E))
By concurrent_sufficient_conditions on g, Line(E, F), Line(B, F) we get concurrent(g, Line(B, F), Line(E, F))
By concurrent_sufficient_conditions on i, h, Line(D, E) we get concurrent(h, i, Line(D, E))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), g we get concurrent(g, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(A, B), g, Line(A, E) we get concurrent(g, Line(A, B), Line(A, E))
By concurrent_sufficient_conditions on Line(E, H), Line(E, F), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(D, E), h, Line(D, F) we get concurrent(h, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on g, Line(A, B), h we get concurrent(g, h, Line(A, B))
By concurrent_sufficient_conditions on Line(B, E), Line(A, B), f we get concurrent(f, Line(A, B), Line(B, E))
By concurrent_sufficient_conditions on h, i, Line(D, F) we get concurrent(h, i, Line(D, F))
By concurrent_sufficient_conditions on Line(B, F), Line(A, B), f we get concurrent(f, Line(A, B), Line(B, F))
By concurrent_sufficient_conditions on f, Line(B, E), Line(B, F) we get concurrent(f, Line(B, E), Line(B, F))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), Line(E, H) we get concurrent(Line(D, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on f, i, Line(B, F) we get concurrent(f, i, Line(B, F))
By concurrent_sufficient_conditions on i, Line(A, B), Line(B, F) we get concurrent(i, Line(A, B), Line(B, F))
By concurrent_sufficient_conditions on Line(D, F), h, i we get concurrent(h, i, Line(D, F))
By concurrent_sufficient_conditions on i, f, Line(A, B) we get concurrent(f, i, Line(A, B))
By concurrent_sufficient_conditions on f, g, Line(C, D) we get concurrent(f, g, Line(C, D))
By concurrent_sufficient_conditions on Line(B, E), f, Line(A, B) we get concurrent(f, Line(A, B), Line(B, E))
By concurrent_sufficient_conditions on h, Line(D, F), Line(D, E) we get concurrent(h, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on i, f, Line(B, E) we get concurrent(f, i, Line(B, E))
By concurrent_sufficient_conditions on Line(B, E), Line(B, F), i we get concurrent(i, Line(B, E), Line(B, F))
By concurrent_sufficient_conditions on Line(E, F), g, Line(D, F) we get concurrent(g, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on g, Line(B, F), Line(D, F) we get concurrent(g, Line(B, F), Line(D, F))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), Line(B, F) we get concurrent(Line(B, F), Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(E, F), Line(B, F), g we get concurrent(g, Line(B, F), Line(E, F))
By concurrent_sufficient_conditions on i, f, Line(B, F) we get concurrent(f, i, Line(B, F))
By concurrent_sufficient_conditions on Line(B, F), i, Line(B, E) we get concurrent(i, Line(B, E), Line(B, F))
By concurrent_sufficient_conditions on i, h, Line(D, F) we get concurrent(h, i, Line(D, F))
By concurrent_sufficient_conditions on h, Line(A, B), g we get concurrent(g, h, Line(A, B))
By concurrent_sufficient_conditions on Line(A, E), Line(E, F), Line(D, E) we get concurrent(Line(A, E), Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on i, Line(B, E), Line(A, B) we get concurrent(i, Line(A, B), Line(B, E))
By concurrent_sufficient_conditions on Line(A, E), Line(E, F), Line(E, H) we get concurrent(Line(A, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on i, Line(D, F), h we get concurrent(h, i, Line(D, F))
By concurrent_sufficient_conditions on Line(E, F), Line(E, H), Line(B, E) we get concurrent(Line(B, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on f, Line(A, B), Line(B, F) we get concurrent(f, Line(A, B), Line(B, F))
By concurrent_sufficient_conditions on Line(B, E), Line(A, E), Line(E, H) we get concurrent(Line(A, E), Line(B, E), Line(E, H))
By concurrent_sufficient_conditions on h, Line(D, F), Line(C, D) we get concurrent(h, Line(C, D), Line(D, F))
By concurrent_sufficient_conditions on Line(A, B), Line(B, E), i we get concurrent(i, Line(A, B), Line(B, E))
By concurrent_sufficient_conditions on Line(B, F), g, Line(D, F) we get concurrent(g, Line(B, F), Line(D, F))
By concurrent_sufficient_conditions on Line(A, B), h, Line(A, E) we get concurrent(h, Line(A, B), Line(A, E))
By concurrent_sufficient_conditions on Line(D, E), i, h we get concurrent(h, i, Line(D, E))
By concurrent_sufficient_conditions on Line(A, E), Line(B, E), Line(E, H) we get concurrent(Line(A, E), Line(B, E), Line(E, H))
By concurrent_sufficient_conditions on i, Line(B, F), Line(A, B) we get concurrent(i, Line(A, B), Line(B, F))
By concurrent_sufficient_conditions on h, Line(A, E), g we get concurrent(g, h, Line(A, E))
By concurrent_sufficient_conditions on Line(A, B), h, g we get concurrent(g, h, Line(A, B))
By concurrent_sufficient_conditions on Line(B, E), i, Line(B, F) we get concurrent(i, Line(B, E), Line(B, F))
By concurrent_sufficient_conditions on Line(B, F), Line(D, F), Line(E, F) we get concurrent(Line(B, F), Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(A, E), g, h we get concurrent(g, h, Line(A, E))
By concurrent_sufficient_conditions on Line(D, E), Line(B, E), Line(E, H) we get concurrent(Line(B, E), Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on i, Line(B, F), f we get concurrent(f, i, Line(B, F))
By concurrent_sufficient_conditions on i, Line(D, F), Line(D, E) we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(A, E), Line(A, B), h we get concurrent(h, Line(A, B), Line(A, E))
By concurrent_sufficient_conditions on Line(D, F), Line(B, F), Line(E, F) we get concurrent(Line(B, F), Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on i, Line(D, E), h we get concurrent(h, i, Line(D, E))
By concurrent_sufficient_conditions on Line(D, F), h, Line(C, D) we get concurrent(h, Line(C, D), Line(D, F))
By concurrent_sufficient_conditions on Line(B, E), Line(E, F), Line(E, H) we get concurrent(Line(B, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on i, Line(B, E), Line(B, F) we get concurrent(i, Line(B, E), Line(B, F))
By concurrent_sufficient_conditions on Line(A, B), g, h we get concurrent(g, h, Line(A, B))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), Line(B, E) we get concurrent(Line(B, E), Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(B, E), f, Line(B, F) we get concurrent(f, Line(B, E), Line(B, F))
By concurrent_sufficient_conditions on Line(D, E), Line(D, F), h we get concurrent(h, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(A, B), Line(B, F), f we get concurrent(f, Line(A, B), Line(B, F))
By concurrent_sufficient_conditions on Line(D, F), Line(C, D), i we get concurrent(i, Line(C, D), Line(D, F))
By concurrent_sufficient_conditions on Line(B, F), Line(E, F), Line(D, F) we get concurrent(Line(B, F), Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(A, B), Line(B, E), Line(B, F) we get concurrent(Line(A, B), Line(B, E), Line(B, F))
By concurrent_sufficient_conditions on Line(A, E), h, Line(A, B) we get concurrent(h, Line(A, B), Line(A, E))
By concurrent_sufficient_conditions on g, Line(E, F), Line(D, F) we get concurrent(g, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), Line(B, E) we get concurrent(Line(B, E), Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(B, E), Line(D, E), Line(E, F) we get concurrent(Line(B, E), Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(B, F), Line(B, E), Line(A, B) we get concurrent(Line(A, B), Line(B, E), Line(B, F))
By concurrent_sufficient_conditions on Line(D, F), g, Line(B, F) we get concurrent(g, Line(B, F), Line(D, F))
By concurrent_sufficient_conditions on Line(B, E), Line(D, E), Line(A, E) we get concurrent(Line(A, E), Line(B, E), Line(D, E))
By concurrent_sufficient_conditions on Line(D, F), h, Line(D, E) we get concurrent(h, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), Line(B, F) we get concurrent(Line(B, F), Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on h, g, Line(A, E) we get concurrent(g, h, Line(A, E))
By concurrent_sufficient_conditions on Line(B, F), f, Line(A, B) we get concurrent(f, Line(A, B), Line(B, F))
By concurrent_sufficient_conditions on h, Line(C, D), Line(D, F) we get concurrent(h, Line(C, D), Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), Line(D, E), h we get concurrent(h, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on i, Line(D, F), Line(C, D) we get concurrent(i, Line(C, D), Line(D, F))
By concurrent_sufficient_conditions on Line(E, F), Line(A, E), Line(B, E) we get concurrent(Line(A, E), Line(B, E), Line(E, F))
By concurrent_sufficient_conditions on Line(D, F), g, Line(E, F) we get concurrent(g, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(D, F), i, h we get concurrent(h, i, Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), Line(B, F), g we get concurrent(g, Line(B, F), Line(D, F))
By concurrent_sufficient_conditions on Line(D, E), Line(D, F), i we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on f, Line(A, B), Line(B, E) we get concurrent(f, Line(A, B), Line(B, E))
By concurrent_sufficient_conditions on Line(A, B), i, Line(B, E) we get concurrent(i, Line(A, B), Line(B, E))
By concurrent_sufficient_conditions on Line(B, E), Line(E, H), Line(E, F) we get concurrent(Line(B, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(B, E), Line(E, H), Line(A, E) we get concurrent(Line(A, E), Line(B, E), Line(E, H))
By concurrent_sufficient_conditions on Line(A, E), Line(E, H), Line(B, E) we get concurrent(Line(A, E), Line(B, E), Line(E, H))
By concurrent_sufficient_conditions on Line(B, E), Line(B, F), f we get concurrent(f, Line(B, E), Line(B, F))
By concurrent_sufficient_conditions on Line(C, D), h, Line(D, F) we get concurrent(h, Line(C, D), Line(D, F))
By concurrent_sufficient_conditions on Line(A, E), Line(D, E), Line(E, H) we get concurrent(Line(A, E), Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(C, D), i, Line(D, F) we get concurrent(i, Line(C, D), Line(D, F))
By concurrent_sufficient_conditions on Line(E, F), Line(B, E), Line(A, E) we get concurrent(Line(A, E), Line(B, E), Line(E, F))
By concurrent_sufficient_conditions on g, Line(A, E), Line(A, B) we get concurrent(g, Line(A, B), Line(A, E))
By concurrent_sufficient_conditions on Line(B, E), Line(A, E), Line(D, E) we get concurrent(Line(A, E), Line(B, E), Line(D, E))
By concurrent_sufficient_conditions on Line(A, B), Line(B, F), Line(B, E) we get concurrent(Line(A, B), Line(B, E), Line(B, F))
By concurrent_sufficient_conditions on Line(B, E), i, Line(A, B) we get concurrent(i, Line(A, B), Line(B, E))
By concurrent_sufficient_conditions on Line(A, B), Line(B, F), i we get concurrent(i, Line(A, B), Line(B, F))
By concurrent_sufficient_conditions on Line(E, H), Line(D, E), Line(B, E) we get concurrent(Line(B, E), Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(A, B), Line(B, E), f we get concurrent(f, Line(A, B), Line(B, E))
By concurrent_sufficient_conditions on Line(B, E), Line(B, F), Line(A, B) we get concurrent(Line(A, B), Line(B, E), Line(B, F))
By concurrent_sufficient_conditions on Line(B, E), Line(E, F), Line(D, E) we get concurrent(Line(B, E), Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(A, B), f, i we get concurrent(f, i, Line(A, B))
By concurrent_sufficient_conditions on h, Line(A, B), Line(A, E) we get concurrent(h, Line(A, B), Line(A, E))
By concurrent_sufficient_conditions on f, Line(B, F), Line(A, B) we get concurrent(f, Line(A, B), Line(B, F))
By concurrent_sufficient_conditions on f, Line(B, F), Line(B, E) we get concurrent(f, Line(B, E), Line(B, F))
By concurrent_sufficient_conditions on f, i, Line(B, E) we get concurrent(f, i, Line(B, E))
By concurrent_sufficient_conditions on Line(B, F), g, Line(E, F) we get concurrent(g, Line(B, F), Line(E, F))
By concurrent_sufficient_conditions on Line(A, E), Line(B, E), Line(D, E) we get concurrent(Line(A, E), Line(B, E), Line(D, E))
By concurrent_sufficient_conditions on Line(D, E), Line(E, H), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(B, F), f, Line(B, E) we get concurrent(f, Line(B, E), Line(B, F))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), Line(A, E) we get concurrent(Line(A, E), Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(B, F), Line(A, B), Line(B, E) we get concurrent(Line(A, B), Line(B, E), Line(B, F))
By concurrent_sufficient_conditions on g, Line(A, E), h we get concurrent(g, h, Line(A, E))
By concurrent_sufficient_conditions on Line(E, H), Line(E, F), Line(A, E) we get concurrent(Line(A, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(B, E), Line(A, B), Line(B, F) we get concurrent(Line(A, B), Line(B, E), Line(B, F))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), Line(E, H) we get concurrent(Line(D, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(B, E), Line(A, B), i we get concurrent(i, Line(A, B), Line(B, E))
By concurrent_sufficient_conditions on Line(E, F), Line(A, E), Line(D, E) we get concurrent(Line(A, E), Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(A, E), Line(B, E), Line(E, F) we get concurrent(Line(A, E), Line(B, E), Line(E, F))
By concurrent_sufficient_conditions on Line(A, E), Line(E, H), Line(E, F) we get concurrent(Line(A, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on i, Line(C, D), Line(D, F) we get concurrent(i, Line(C, D), Line(D, F))
By concurrent_sufficient_conditions on Line(E, H), Line(D, E), Line(A, E) we get concurrent(Line(A, E), Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on i, Line(A, B), Line(B, E) we get concurrent(i, Line(A, B), Line(B, E))
By concurrent_sufficient_conditions on Line(E, H), Line(B, E), Line(A, E) we get concurrent(Line(A, E), Line(B, E), Line(E, H))
By concurrent_sufficient_conditions on Line(B, F), i, Line(A, B) we get concurrent(i, Line(A, B), Line(B, F))
By concurrent_sufficient_conditions on g, h, Line(A, B) we get concurrent(g, h, Line(A, B))
By concurrent_sufficient_conditions on Line(A, B), Line(A, E), g we get concurrent(g, Line(A, B), Line(A, E))
By concurrent_sufficient_conditions on Line(B, E), i, f we get concurrent(f, i, Line(B, E))
By concurrent_sufficient_conditions on g, Line(B, F), Line(E, F) we get concurrent(g, Line(B, F), Line(E, F))
By concurrent_sufficient_conditions on Line(B, E), Line(E, F), Line(A, E) we get concurrent(Line(A, E), Line(B, E), Line(E, F))
By concurrent_sufficient_conditions on Line(E, F), Line(A, E), Line(E, H) we get concurrent(Line(A, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(E, F), Line(B, E), Line(D, E) we get concurrent(Line(B, E), Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(E, H), Line(E, F), Line(B, E) we get concurrent(Line(B, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on h, Line(D, E), i we get concurrent(h, i, Line(D, E))
By concurrent_sufficient_conditions on Line(B, F), i, f we get concurrent(f, i, Line(B, F))
By concurrent_sufficient_conditions on h, Line(D, F), i we get concurrent(h, i, Line(D, F))
By chords_on_equal_angles_v0 on D, B, F, B, F, D, c we get distance(B, D) == distance(D, F)
By line_intersection_definition on E, Line(E, G), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, G))
By line_intersection_definition on E, Line(E, G), Line(A, E) we get E == line_intersection(Line(A, E), Line(E, G))
By line_intersection_definition on G, Line(E, G), g we get G == line_intersection(g, Line(E, G))
By line_intersection_definition on E, Line(B, E), Line(E, G) we get E == line_intersection(Line(B, E), Line(E, G))
By line_intersection_definition on E, Line(E, F), Line(E, G) we get E == line_intersection(Line(E, F), Line(E, G))
By line_intersection_definition on E, Line(E, G), Line(E, H) we get E == line_intersection(Line(E, G), Line(E, H))
By perpendicular_direction_conditions_v0 on E, D, B, F we get perpendicular(Line(B, F), Line(D, E))
By between_imply_not_between on C, B, H we get collinear_and_not_between(B, C, H)
By between_imply_not_between on C, F, A we get collinear_and_not_between(A, C, F)
By between_imply_not_between on A, F, C we get collinear_and_not_between(C, A, F)
By between_imply_not_between on H, B, C we get collinear_and_not_between(B, H, C)
By same_angle_v1 on C, F, G, B we get angle(F, C, B) == angle(G, C, B) mod 360
By same_angle_v1 on C, A, F, D we get angle(A, C, D) == angle(F, C, D) mod 360
By same_angle_v1 on C, G, A, B we get angle(A, C, B) == angle(G, C, B) mod 360
By same_angle_v1 on C, G, F, H we get angle(F, C, H) == angle(G, C, H) mod 360
By same_angle_v0 on C, H, B, G we get angle(B, C, G) == angle(H, C, G) mod 360
By same_angle_v0 on C, H, B, D we get angle(B, C, D) == angle(H, C, D) mod 360
By same_angle_v1 on C, A, G, H we get angle(A, C, H) == angle(G, C, H) mod 360
By same_angle_v3 on G, F, A, E we get angle(F, G, E) == angle(A, G, E) + 180 mod 360
By probably_between_and_collinear_implies_between on C, F, G we get between(C, F, G)
By probably_between_and_collinear_implies_between on C, G, A we get between(A, G, C)
By asa_congruence on E, B, D, E, D, F we get congruent_triangles(B, D, E, D, F, E)
By sas_anti_congruence on D, E, B, D, E, F we get anti_congruent_triangles(B, D, E, F, D, E)
By reverse_direction on C, H we get 180 == direction(C, H) - direction(H, C) mod 360
By asa_anti_congruence on B, F, D, F, B, D we get anti_congruent_triangles(B, D, F, F, D, B)
By between_imply_segment_sum on C, B, H we get distance(C, H) == distance(B, C) + distance(B, H)
By reverse_direction on F, C we get 180 == direction(F, C) - direction(C, F) mod 360
By anti_congruence_from_anti_similar_triangles on E, B, D, E, F, D we get anti_congruent_triangles(B, D, E, F, D, E)
By anti_congruence_from_anti_similar_triangles on D, E, F, D, E, B we get anti_congruent_triangles(B, D, E, F, D, E)
By asa_anti_congruence on E, B, D, E, F, D we get anti_congruent_triangles(B, D, E, F, D, E)
By congruence_from_similar_triangles on B, E, D, D, E, F we get congruent_triangles(B, D, E, D, F, E)
By reverse_direction on B, H we get 180 == direction(B, H) - direction(H, B) mod 360
By sas_congruence on F, E, D, D, E, B we get congruent_triangles(B, D, E, D, F, E)
By asa_anti_congruence on F, E, D, B, E, D we get anti_congruent_triangles(B, D, E, F, D, E)
By collinear_definition on A, C, G we get C in Line(A, G), G in Line(A, C), Line(A, C) == Line(A, G), 0 == 2 * angle(C, A, G) mod 360
By between_imply_segment_sum on C, F, A we get distance(A, C) == distance(C, F) + distance(A, F)
By anti_congruence_from_anti_similar_triangles on E, D, B, E, D, F we get anti_congruent_triangles(B, D, E, F, D, E)
By internal_angle_bisector_definition_v0 on G, C, G, A we get angle(C, A, G) == angle(G, A, C) mod 360
By asa_anti_congruence on F, B, C, B, F, C we get anti_congruent_triangles(B, C, F, F, C, B)
By collinear_definition on F, G, C we get G in Line(C, F), C in Line(F, G), Line(C, F) == Line(F, G), 0 == 2 * angle(G, F, C) mod 360
By asa_congruence on E, D, F, E, B, D we get congruent_triangles(B, D, E, D, F, E)
By reverse_direction on E, H we get 180 == direction(E, H) - direction(H, E) mod 360
By reverse_direction on H, E we get 180 == direction(H, E) - direction(E, H) mod 360
By anti_congruence_from_anti_similar_triangles on B, F, C, F, B, C we get anti_congruent_triangles(B, C, F, F, C, B)
By sas_congruence on B, E, D, D, E, F we get congruent_triangles(B, D, E, D, F, E)
By asa_anti_congruence on B, E, D, F, E, D we get anti_congruent_triangles(B, D, E, F, D, E)
By congruence_from_similar_triangles on E, D, F, E, B, D we get congruent_triangles(B, D, E, D, F, E)
By congruence_from_similar_triangles on E, F, D, E, D, B we get congruent_triangles(B, D, E, D, F, E)
By anti_congruence_from_anti_similar_triangles on E, F, D, E, B, D we get anti_congruent_triangles(B, D, E, F, D, E)
By isosceles_triangle_from_angles on D, B, F we get isosceles_triangle(D, B, F)
By collinear_definition on A, G, C we get G in Line(A, C), C in Line(A, G), Line(A, C) == Line(A, G), 0 == 2 * angle(G, A, C) mod 360
By asa_anti_congruence on F, B, D, B, F, D we get anti_congruent_triangles(B, D, F, F, D, B)
By asa_anti_congruence on D, E, F, D, E, B we get anti_congruent_triangles(B, D, E, F, D, E)
By asa_anti_congruence on D, E, B, D, E, F we get anti_congruent_triangles(B, D, E, F, D, E)
By reverse_direction on B, C we get 180 == direction(B, C) - direction(C, B) mod 360
By reverse_direction on H, C we get 180 == direction(H, C) - direction(C, H) mod 360
By asa_congruence on E, F, D, E, D, B we get congruent_triangles(B, D, E, D, F, E)
By isosceles_triangle_from_angles on C, F, B we get isosceles_triangle(C, B, F)
By asa_anti_congruence on B, F, C, F, B, C we get anti_congruent_triangles(B, C, F, F, C, B)
By isosceles_triangle_from_angles on D, F, B we get isosceles_triangle(D, B, F)
By internal_angle_bisector_definition_v0 on G, C, G, F we get angle(C, F, G) == angle(G, F, C) mod 360
By reverse_direction on A, C we get 180 == direction(A, C) - direction(C, A) mod 360
By anti_congruence_from_anti_similar_triangles on D, E, B, D, E, F we get anti_congruent_triangles(B, D, E, F, D, E)
By anti_congruence_from_anti_similar_triangles on F, B, D, B, F, D we get anti_congruent_triangles(B, D, F, F, D, B)
By asa_congruence on F, E, D, D, E, B we get congruent_triangles(B, D, E, D, F, E)
By congruence_from_similar_triangles on D, E, B, F, E, D we get congruent_triangles(B, D, E, D, F, E)
By sas_congruence on D, E, B, F, E, D we get congruent_triangles(B, D, E, D, F, E)
By congruence_from_similar_triangles on F, E, D, D, E, B we get congruent_triangles(B, D, E, D, F, E)
By sas_congruence on D, E, F, B, E, D we get congruent_triangles(B, D, E, D, F, E)
By asa_anti_congruence on E, D, B, E, D, F we get anti_congruent_triangles(B, D, E, F, D, E)
By congruence_from_similar_triangles on E, B, D, E, D, F we get congruent_triangles(B, D, E, D, F, E)
By reverse_direction on H, B we get 180 == direction(H, B) - direction(B, H) mod 360
By isosceles_triangle_from_angles on C, B, F we get isosceles_triangle(C, B, F)
By anti_congruence_from_anti_similar_triangles on F, E, D, B, E, D we get anti_congruent_triangles(B, D, E, F, D, E)
By collinear_definition on F, C, G we get C in Line(F, G), G in Line(C, F), Line(C, F) == Line(F, G), 0 == 2 * angle(C, F, G) mod 360
By asa_anti_congruence on E, F, D, E, B, D we get anti_congruent_triangles(B, D, E, F, D, E)
By asa_congruence on E, D, B, E, F, D we get congruent_triangles(B, D, E, D, F, E)
By anti_congruence_from_anti_similar_triangles on E, D, F, E, D, B we get anti_congruent_triangles(B, D, E, F, D, E)
By sas_anti_congruence on D, E, F, D, E, B we get anti_congruent_triangles(B, D, E, F, D, E)
By congruence_from_similar_triangles on D, E, F, B, E, D we get congruent_triangles(B, D, E, D, F, E)
By asa_congruence on D, E, B, F, E, D we get congruent_triangles(B, D, E, D, F, E)
By anti_congruence_from_anti_similar_triangles on B, E, D, F, E, D we get anti_congruent_triangles(B, D, E, F, D, E)
By reverse_direction on C, B we get 180 == direction(C, B) - direction(B, C) mod 360
By sas_anti_congruence on F, E, D, B, E, D we get anti_congruent_triangles(B, D, E, F, D, E)
By anti_congruence_from_anti_similar_triangles on B, F, D, F, B, D we get anti_congruent_triangles(B, D, F, F, D, B)
By reverse_direction on C, F we get 180 == direction(C, F) - direction(F, C) mod 360
By asa_congruence on D, E, F, B, E, D we get congruent_triangles(B, D, E, D, F, E)
By congruence_from_similar_triangles on E, D, B, E, F, D we get congruent_triangles(B, D, E, D, F, E)
By asa_congruence on B, E, D, D, E, F we get congruent_triangles(B, D, E, D, F, E)
By asa_anti_congruence on E, D, F, E, D, B we get anti_congruent_triangles(B, D, E, F, D, E)
By anti_congruence_from_anti_similar_triangles on F, B, C, B, F, C we get anti_congruent_triangles(B, C, F, F, C, B)
By reverse_direction on C, A we get 180 == direction(C, A) - direction(A, C) mod 360
By sas_anti_congruence on B, E, D, F, E, D we get anti_congruent_triangles(B, D, E, F, D, E)
By same_angle_v2 on G, C, A, E we get angle(C, G, E) == angle(A, G, E) + 180 mod 360
By same_angle_v1 on C, A, G, D we get angle(A, C, D) == angle(G, C, D) mod 360
By same_angle_v1 on C, F, G, D we get angle(F, C, D) == angle(G, C, D) mod 360
By same_angle_v0 on G, C, F, E we get angle(C, G, E) == angle(F, G, E) mod 360
By external_angle_bisector_definition_v0_r on C, E, C, H we get Line(E, H) == external_angle_bisector(C, H, C)
By external_angle_bisector_definition_v0_r on E, C, E, H we get Line(C, H) == external_angle_bisector(E, H, E)
By internal_angle_bisector_definition_v0_r on C, B, C, H we get Line(B, H) == internal_angle_bisector(C, H, C)
By external_angle_bisector_definition_v0_r on C, E, B, H we get Line(E, H) == external_angle_bisector(B, H, C)
By external_angle_bisector_definition_v0_r on E, B, E, H we get Line(B, H) == external_angle_bisector(E, H, E)
By external_angle_bisector_definition_v0_r on G, A, C, F we get Line(A, F) == external_angle_bisector(C, F, G)
By external_angle_bisector_definition_v0_r on A, D, H, B we get Line(B, D) == external_angle_bisector(A, B, H)
By internal_angle_bisector_definition_v0_r on H, C, H, B we get Line(B, C) == internal_angle_bisector(H, B, H)
By internal_angle_bisector_definition_v0_r on G, D, B, A we get Line(A, D) == internal_angle_bisector(B, A, G)
By internal_angle_bisector_definition_v0_r on F, E, B, D we get Line(D, E) == internal_angle_bisector(B, D, F)
By internal_angle_bisector_definition_v0_r on F, D, B, E we get Line(D, E) == internal_angle_bisector(B, E, F)
By internal_angle_bisector_definition_v0_r on F, A, F, C we get Line(A, C) == internal_angle_bisector(F, C, F)
By internal_angle_bisector_definition_v0_r on G, F, C, A we get Line(A, F) == internal_angle_bisector(C, A, G)
By internal_angle_bisector_definition_v0 on B, D, A, C we get angle(B, C, D) == angle(D, C, A) mod 360
By collinear_definition on G, A, C we get A in Line(C, G), C in Line(A, G), Line(A, G) == Line(C, G), 0 == 2 * angle(A, G, C) mod 360
By external_angle_bisector_definition_v0_r on B, E, B, H we get Line(E, H) == external_angle_bisector(B, H, B)
By internal_angle_bisector_definition_v0_r on A, F, A, C we get Line(C, F) == internal_angle_bisector(A, C, A)
By internal_angle_bisector_definition_v0_r on C, H, C, B we get Line(B, H) == internal_angle_bisector(C, B, C)
By internal_angle_bisector_definition_v0_r on C, F, C, A we get Line(A, F) == internal_angle_bisector(C, A, C)
By internal_angle_bisector_definition_v0 on A, C, A, G we get angle(A, G, C) == angle(C, G, A) mod 360
By internal_angle_bisector_definition_v0_r on H, B, H, C we get Line(B, C) == internal_angle_bisector(H, C, H)
By internal_angle_bisector_definition_v0_r on F, D, B, A we get Line(A, D) == internal_angle_bisector(B, A, F)
By collinear_definition on G, F, C we get F in Line(C, G), C in Line(F, G), Line(C, G) == Line(F, G), 0 == 2 * angle(F, G, C) mod 360
By collinear_definition on C, G, F we get G in Line(C, F), F in Line(C, G), Line(C, F) == Line(C, G), 0 == 2 * angle(G, C, F) mod 360
By internal_angle_bisector_definition_v0_r on C, A, C, F we get Line(A, F) == internal_angle_bisector(C, F, C)
By internal_angle_bisector_definition_v0 on A, D, B, C we get angle(A, C, D) == angle(D, C, B) mod 360
By collinear_definition on C, A, G we get A in Line(C, G), G in Line(A, C), Line(A, C) == Line(C, G), 0 == 2 * angle(A, C, G) mod 360
By collinear_definition on C, G, A we get G in Line(A, C), A in Line(C, G), Line(A, C) == Line(C, G), 0 == 2 * angle(G, C, A) mod 360
By collinear_definition on G, C, A we get C in Line(A, G), A in Line(C, G), Line(A, G) == Line(C, G), 0 == 2 * angle(C, G, A) mod 360
By internal_angle_bisector_definition_v0_r on B, C, B, H we get Line(C, H) == internal_angle_bisector(B, H, B)
By collinear_definition on C, F, G we get F in Line(C, G), G in Line(C, F), Line(C, F) == Line(C, G), 0 == 2 * angle(F, C, G) mod 360
By collinear_definition on G, C, F we get C in Line(F, G), F in Line(C, G), Line(C, G) == Line(F, G), 0 == 2 * angle(C, G, F) mod 360
By internal_angle_bisector_definition_v0_r on B, H, B, C we get Line(C, H) == internal_angle_bisector(B, C, B)
By internal_angle_bisector_definition_v0 on F, C, F, G we get angle(C, G, F) == angle(F, G, C) mod 360
By perpendicular_bisector_sufficient_conditions on A, F, E, G we get Line(E, G) == perpendicular_bisector(A, F)
By sas_anti_congruence on G, A, E, G, F, E we get anti_congruent_triangles(A, E, G, F, E, G)
By anti_similar_triangle_basic_properties on F, E, A, A, E, F we get angle(F, E, A) == 0 - angle(A, E, F) mod 360, angle(E, A, F) == 0 - angle(E, F, A) mod 360, angle(A, F, E) == 0 - angle(F, A, E) mod 360, log(distance(A, E)) + log(distance(A, E)) == log(distance(E, F)) + log(distance(E, F)), log(distance(A, E)) + log(distance(A, F)) == log(distance(E, F)) + log(distance(A, F)), log(distance(A, F)) + log(distance(A, E)) == log(distance(A, F)) + log(distance(E, F))
By anti_similar_triangle_basic_properties on F, C, B, B, C, F we get angle(F, C, B) == 0 - angle(B, C, F) mod 360, angle(C, B, F) == 0 - angle(C, F, B) mod 360, angle(B, F, C) == 0 - angle(F, B, C) mod 360, log(distance(B, C)) + log(distance(B, C)) == log(distance(C, F)) + log(distance(C, F)), log(distance(B, C)) + log(distance(B, F)) == log(distance(C, F)) + log(distance(B, F)), log(distance(B, F)) + log(distance(B, C)) == log(distance(B, F)) + log(distance(C, F))
By sas_anti_congruence on E, A, G, E, F, G we get anti_congruent_triangles(A, E, G, F, E, G)
By sas_anti_congruence on G, F, E, G, A, E we get anti_congruent_triangles(A, E, G, F, E, G)
By sas_anti_congruence on E, F, G, E, A, G we get anti_congruent_triangles(A, E, G, F, E, G)
By anti_similar_triangle_basic_properties on E, A, D, E, D, A we get angle(E, A, D) == 0 - angle(E, D, A) mod 360, angle(A, D, E) == 0 - angle(D, A, E) mod 360, angle(D, E, A) == 0 - angle(A, E, D) mod 360, log(distance(A, E)) + log(distance(A, D)) == log(distance(D, E)) + log(distance(A, D)), log(distance(A, D)) + log(distance(A, E)) == log(distance(A, D)) + log(distance(D, E)), log(distance(A, E)) + log(distance(A, E)) == log(distance(D, E)) + log(distance(D, E))
By anti_similar_triangle_basic_properties on D, E, B, B, E, D we get angle(D, E, B) == 0 - angle(B, E, D) mod 360, angle(E, B, D) == 0 - angle(E, D, B) mod 360, angle(B, D, E) == 0 - angle(D, B, E) mod 360, log(distance(B, E)) + log(distance(B, E)) == log(distance(D, E)) + log(distance(D, E)), log(distance(B, E)) + log(distance(B, D)) == log(distance(D, E)) + log(distance(B, D)), log(distance(B, D)) + log(distance(B, E)) == log(distance(B, D)) + log(distance(D, E))
By anti_similar_triangle_basic_properties on F, B, D, B, F, D we get angle(F, B, D) == 0 - angle(B, F, D) mod 360, angle(B, D, F) == 0 - angle(F, D, B) mod 360, angle(D, F, B) == 0 - angle(D, B, F) mod 360, log(distance(B, F)) + log(distance(B, D)) == log(distance(B, F)) + log(distance(D, F)), log(distance(B, D)) + log(distance(B, D)) == log(distance(D, F)) + log(distance(D, F)), log(distance(B, D)) + log(distance(B, F)) == log(distance(D, F)) + log(distance(B, F))
By anti_similar_triangle_basic_properties on A, E, B, B, E, A we get angle(A, E, B) == 0 - angle(B, E, A) mod 360, angle(E, B, A) == 0 - angle(E, A, B) mod 360, angle(B, A, E) == 0 - angle(A, B, E) mod 360, log(distance(A, E)) + log(distance(A, E)) == log(distance(B, E)) + log(distance(B, E)), log(distance(A, E)) + log(distance(A, B)) == log(distance(B, E)) + log(distance(A, B)), log(distance(A, B)) + log(distance(A, E)) == log(distance(A, B)) + log(distance(B, E))
By anti_similar_triangle_basic_properties on F, E, D, D, E, F we get angle(F, E, D) == 0 - angle(D, E, F) mod 360, angle(E, D, F) == 0 - angle(E, F, D) mod 360, angle(D, F, E) == 0 - angle(F, D, E) mod 360, log(distance(D, E)) + log(distance(D, E)) == log(distance(E, F)) + log(distance(E, F)), log(distance(D, E)) + log(distance(D, F)) == log(distance(E, F)) + log(distance(D, F)), log(distance(D, F)) + log(distance(D, E)) == log(distance(D, F)) + log(distance(E, F))
By anti_similar_triangle_basic_properties on F, B, E, B, F, E we get angle(F, B, E) == 0 - angle(B, F, E) mod 360, angle(B, E, F) == 0 - angle(F, E, B) mod 360, angle(E, F, B) == 0 - angle(E, B, F) mod 360, log(distance(B, F)) + log(distance(B, E)) == log(distance(B, F)) + log(distance(E, F)), log(distance(B, E)) + log(distance(B, E)) == log(distance(E, F)) + log(distance(E, F)), log(distance(B, E)) + log(distance(B, F)) == log(distance(E, F)) + log(distance(B, F))
By isosceles_triangle_altitude_v0 on E, A, F we get identical(perpendicular_bisector(A, F), internal_angle_bisector(A, E, F), perpendicular_line(E, Line(A, F)))
By isosceles_triangle_altitude_v0 on E, F, A we get identical(perpendicular_bisector(A, F), internal_angle_bisector(A, E, F), perpendicular_line(E, Line(A, F)))
By similar_triangle_basic_properties on F, E, D, D, E, B we get angle(D, E, B) == angle(F, E, D) mod 360, angle(E, B, D) == angle(E, D, F) mod 360, angle(B, D, E) == angle(D, F, E) mod 360, log(distance(D, E)) + log(distance(D, E)) == log(distance(E, F)) + log(distance(B, E)), log(distance(B, E)) + log(distance(D, F)) == log(distance(D, E)) + log(distance(B, D)), log(distance(B, D)) + log(distance(E, F)) == log(distance(D, F)) + log(distance(D, E))
By similar_triangle_basic_properties on F, D, E, D, B, E we get angle(D, B, E) == angle(F, D, E) mod 360, angle(B, E, D) == angle(D, E, F) mod 360, angle(E, D, B) == angle(E, F, D) mod 360, log(distance(B, D)) + log(distance(D, E)) == log(distance(D, F)) + log(distance(B, E)), log(distance(B, E)) + log(distance(E, F)) == log(distance(D, E)) + log(distance(D, E)), log(distance(D, E)) + log(distance(D, F)) == log(distance(E, F)) + log(distance(B, D))
By anti_similar_triangle_basic_properties on B, E, D, F, E, D we get angle(B, E, D) == 0 - angle(F, E, D) mod 360, angle(E, D, B) == 0 - angle(E, D, F) mod 360, angle(D, B, E) == 0 - angle(D, F, E) mod 360, log(distance(B, E)) + log(distance(D, E)) == log(distance(E, F)) + log(distance(D, E)), log(distance(D, E)) + log(distance(B, D)) == log(distance(D, E)) + log(distance(D, F)), log(distance(B, D)) + log(distance(E, F)) == log(distance(D, F)) + log(distance(B, E))
By anti_similar_triangle_basic_properties on D, E, B, D, E, F we get angle(D, E, B) == 0 - angle(D, E, F) mod 360, angle(E, B, D) == 0 - angle(E, F, D) mod 360, angle(B, D, E) == 0 - angle(F, D, E) mod 360, log(distance(D, E)) + log(distance(B, E)) == log(distance(D, E)) + log(distance(E, F)), log(distance(B, E)) + log(distance(D, F)) == log(distance(E, F)) + log(distance(B, D)), log(distance(B, D)) + log(distance(D, E)) == log(distance(D, F)) + log(distance(D, E))
By concurrent_sufficient_conditions on Line(D, E), Line(A, E), Line(E, G) we get concurrent(Line(A, E), Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(E, G), Line(A, E), Line(E, H) we get concurrent(Line(A, E), Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(E, H), Line(E, F), Line(E, G) we get concurrent(Line(E, F), Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(E, G), Line(E, F), Line(B, E) we get concurrent(Line(B, E), Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(E, H), Line(E, G), Line(D, E) we get concurrent(Line(D, E), Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(E, F), Line(E, G), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(B, E), Line(A, E), Line(E, G) we get concurrent(Line(A, E), Line(B, E), Line(E, G))
By concurrent_sufficient_conditions on Line(E, F), Line(E, H), Line(E, G) we get concurrent(Line(E, F), Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), Line(E, G) we get concurrent(Line(D, E), Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(E, H), Line(E, G), Line(E, F) we get concurrent(Line(E, F), Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(A, E), Line(E, H), Line(E, G) we get concurrent(Line(A, E), Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(D, E), Line(E, G), Line(A, E) we get concurrent(Line(A, E), Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(E, G), Line(E, F), Line(A, E) we get concurrent(Line(A, E), Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(E, G), Line(D, E), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(E, H), Line(A, E), Line(E, G) we get concurrent(Line(A, E), Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(E, G), Line(D, E), Line(A, E) we get concurrent(Line(A, E), Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(B, E), Line(E, H), Line(E, G) we get concurrent(Line(B, E), Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(D, E), Line(E, G), Line(E, H) we get concurrent(Line(D, E), Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(D, E), Line(E, H), Line(E, G) we get concurrent(Line(D, E), Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(B, E), Line(E, G), Line(D, E) we get concurrent(Line(B, E), Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(E, G), Line(A, E), Line(B, E) we get concurrent(Line(A, E), Line(B, E), Line(E, G))
By concurrent_sufficient_conditions on Line(A, E), Line(E, G), Line(B, E) we get concurrent(Line(A, E), Line(B, E), Line(E, G))
By concurrent_sufficient_conditions on Line(A, E), Line(E, G), Line(D, E) we get concurrent(Line(A, E), Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(E, G), Line(E, H), Line(D, E) we get concurrent(Line(D, E), Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(E, G), Line(B, E), Line(E, H) we get concurrent(Line(B, E), Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(E, G), Line(D, E), Line(E, H) we get concurrent(Line(D, E), Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(E, G), Line(B, E), Line(A, E) we get concurrent(Line(A, E), Line(B, E), Line(E, G))
By concurrent_sufficient_conditions on Line(E, F), Line(E, G), Line(E, H) we get concurrent(Line(E, F), Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(E, G), Line(E, H), Line(B, E) we get concurrent(Line(B, E), Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(E, G), Line(D, E), Line(B, E) we get concurrent(Line(B, E), Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(E, H), Line(D, E), Line(E, G) we get concurrent(Line(D, E), Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(A, E), Line(B, E), Line(E, G) we get concurrent(Line(A, E), Line(B, E), Line(E, G))
By concurrent_sufficient_conditions on Line(E, G), Line(A, E), Line(E, F) we get concurrent(Line(A, E), Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(E, F), Line(B, E), Line(E, G) we get concurrent(Line(B, E), Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(B, E), Line(E, F), Line(E, G) we get concurrent(Line(B, E), Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(E, G), Line(E, H), Line(A, E) we get concurrent(Line(A, E), Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(A, E), Line(D, E), Line(E, G) we get concurrent(Line(A, E), Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(B, E), Line(E, G), Line(A, E) we get concurrent(Line(A, E), Line(B, E), Line(E, G))
By concurrent_sufficient_conditions on Line(E, F), Line(E, G), Line(A, E) we get concurrent(Line(A, E), Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(E, G), Line(E, F), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(E, H), Line(E, G), Line(B, E) we get concurrent(Line(B, E), Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), Line(E, G) we get concurrent(Line(D, E), Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(E, G), Line(E, H), Line(E, F) we get concurrent(Line(E, F), Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(E, F), Line(E, G), Line(B, E) we get concurrent(Line(B, E), Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(E, G), Line(B, E), Line(D, E) we get concurrent(Line(B, E), Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(E, G), Line(B, E), Line(E, F) we get concurrent(Line(B, E), Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(D, E), Line(E, G), Line(B, E) we get concurrent(Line(B, E), Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(A, E), Line(E, G), Line(E, F) we get concurrent(Line(A, E), Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(A, E), Line(E, G), Line(E, H) we get concurrent(Line(A, E), Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(A, E), Line(E, F), Line(E, G) we get concurrent(Line(A, E), Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(E, G), Line(E, F), Line(E, H) we get concurrent(Line(E, F), Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(E, H), Line(E, G), Line(A, E) we get concurrent(Line(A, E), Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(B, E), Line(E, G), Line(E, H) we get concurrent(Line(B, E), Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(E, F), Line(A, E), Line(E, G) we get concurrent(Line(A, E), Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(E, G), Line(A, E), Line(D, E) we get concurrent(Line(A, E), Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(B, E), Line(D, E), Line(E, G) we get concurrent(Line(B, E), Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(D, E), Line(E, G), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(E, H), Line(B, E), Line(E, G) we get concurrent(Line(B, E), Line(E, G), Line(E, H))
By concurrent_sufficient_conditions on Line(B, E), Line(E, G), Line(E, F) we get concurrent(Line(B, E), Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(D, E), Line(B, E), Line(E, G) we get concurrent(Line(B, E), Line(D, E), Line(E, G))
By perpendicular_line_definition on D, Line(D, E), Line(B, F) we get Line(D, E) == perpendicular_line(D, Line(B, F))
By perpendicular_line_definition on A, g, Line(E, G) we get g == perpendicular_line(A, Line(E, G))
By perpendicular_line_definition on F, g, Line(E, G) we get g == perpendicular_line(F, Line(E, G))
By perpendicular_line_definition on E, Line(D, E), Line(B, F) we get Line(D, E) == perpendicular_line(E, Line(B, F))
By perpendicular_line_definition on B, Line(B, F), Line(D, E) we get Line(B, F) == perpendicular_line(B, Line(D, E))
By perpendicular_line_definition on G, g, Line(E, G) we get g == perpendicular_line(G, Line(E, G))
By perpendicular_line_definition on F, Line(B, F), Line(D, E) we get Line(B, F) == perpendicular_line(F, Line(D, E))
By perpendicular_line_definition on C, g, Line(E, G) we get g == perpendicular_line(C, Line(E, G))
By projection_definition on E, G, g we get G == projection(E, g)
By perpendicular_direction_conditions_v0 on F, B, C, D we get perpendicular(Line(B, F), Line(C, D))
By between_imply_not_between on G, F, C we get collinear_and_not_between(C, G, F)
By between_imply_not_between on A, G, C we get collinear_and_not_between(C, A, G)
By between_imply_not_between on C, F, G we get collinear_and_not_between(F, C, G)
By between_imply_not_between on C, G, A we get collinear_and_not_between(A, C, G)
By divide_by_2_mod_180_v0 on F, G, E, E, H, B we get angle(E, H, B) == angle(F, G, E) mod 360
By projection_definition on C, G, Line(E, G) we get G == projection(C, Line(E, G))
By divide_by_2_mod_180_v1 on E, A, B, G, C, D we get angle(E, A, B) == angle(G, C, D) mod 360
By projection_definition on A, G, Line(E, G) we get G == projection(A, Line(E, G))
By projection_definition on F, G, Line(E, G) we get G == projection(F, Line(E, G))
By divide_by_2_mod_180_v0 on G, E, F, A, D, F we get angle(A, D, F) == angle(G, E, F) mod 360
By divide_by_2_mod_180_v0 on B, C, D, E, B, A we get angle(B, C, D) == angle(E, B, A) mod 360
By divide_by_2_mod_180_v1 on B, H, E, A, G, E we get angle(A, G, E) == angle(B, H, E) mod 360
By divide_by_2_mod_180_v1 on A, B, E, D, C, H we get angle(A, B, E) == angle(D, C, H) mod 360
By divide_by_2_mod_180_v1 on A, B, E, A, C, D we get angle(A, B, E) == angle(A, C, D) mod 360
By divide_by_2_mod_180_v0 on A, B, F, G, E, F we get angle(A, B, F) == angle(G, E, F) mod 360
By divide_by_2_mod_180_v1 on F, B, A, F, E, G we get angle(F, B, A) == angle(F, E, G) mod 360
By divide_by_2_mod_180_v0 on D, C, G, B, A, E we get angle(B, A, E) == angle(D, C, G) mod 360
By divide_by_2_mod_180_v1 on F, E, G, F, D, A we get angle(F, D, A) == angle(F, E, G) mod 360
By divide_by_2_mod_180_v0 on A, D, F, A, E, G we get angle(A, D, F) == angle(A, E, G) mod 360
By divide_by_2_mod_180_v0 on E, B, A, H, C, D we get angle(E, B, A) == angle(H, C, D) mod 360
By divide_by_2_mod_180_v0 on B, A, E, H, C, D we get angle(B, A, E) == angle(H, C, D) mod 360
By divide_by_2_mod_180_v0 on E, H, B, C, G, E we get angle(C, G, E) == angle(E, H, B) mod 360
By divide_by_2_mod_180_v1 on A, B, E, D, C, B we get angle(A, B, E) == angle(D, C, B) mod 360
By divide_by_2_mod_180_v2 on E, G, A, B, H, E we get angle(E, G, A) == angle(B, H, E) + 180 mod 360
By divide_by_2_mod_180_v1 on D, C, H, E, A, B we get angle(D, C, H) == angle(E, A, B) mod 360
By divide_by_2_mod_180_v1 on A, B, E, G, C, D we get angle(A, B, E) == angle(G, C, D) mod 360
By divide_by_2_mod_180_v1 on F, B, A, G, E, A we get angle(F, B, A) == angle(G, E, A) mod 360
By divide_by_2_mod_180_v0 on D, C, F, E, B, A we get angle(D, C, F) == angle(E, B, A) mod 360
By divide_by_2_mod_180_v1 on F, C, D, E, A, B we get angle(E, A, B) == angle(F, C, D) mod 360
By divide_by_2_mod_180_v3 on E, G, F, E, H, B we get angle(E, G, F) == angle(E, H, B) + 180 mod 360
By divide_by_2_mod_180_v3 on E, G, F, E, H, C we get angle(E, G, F) == angle(E, H, C) + 180 mod 360
By divide_by_2_mod_180_v0 on E, G, A, E, H, B we get angle(E, G, A) == angle(E, H, B) mod 360
By divide_by_2_mod_180_v1 on E, A, B, D, C, B we get angle(D, C, B) == angle(E, A, B) mod 360
By divide_by_2_mod_180_v0 on E, B, A, D, C, A we get angle(D, C, A) == angle(E, B, A) mod 360
By divide_by_2_mod_180_v0 on E, G, A, E, H, C we get angle(E, G, A) == angle(E, H, C) mod 360
By perpendicular_angle_conditions_v0 on E, G, F we get angle(E, G, F) == orientation(E, G, F) mod 360
By divide_by_2_mod_180_v3 on B, H, E, E, G, A we get angle(B, H, E) == angle(E, G, A) + 180 mod 360
By divide_by_2_mod_180_v2 on E, H, B, A, G, E we get angle(E, H, B) == angle(A, G, E) + 180 mod 360
By divide_by_2_mod_180_v3 on A, G, E, E, H, C we get angle(A, G, E) == angle(E, H, C) + 180 mod 360
By divide_by_2_mod_180_v0 on E, B, A, D, C, G we get angle(D, C, G) == angle(E, B, A) mod 360
By divide_by_2_mod_180_v2 on E, H, B, E, G, F we get angle(E, H, B) == angle(E, G, F) + 180 mod 360
By divide_by_2_mod_180_v3 on A, G, E, E, H, B we get angle(A, G, E) == angle(E, H, B) + 180 mod 360
By divide_by_2_mod_180_v3 on B, H, E, F, G, E we get angle(B, H, E) == angle(F, G, E) + 180 mod 360
By divide_by_2_mod_180_v1 on A, B, E, F, C, D we get angle(A, B, E) == angle(F, C, D) mod 360
By divide_by_2_mod_180_v1 on A, C, D, E, A, B we get angle(A, C, D) == angle(E, A, B) mod 360
By divide_by_2_mod_180_v3 on C, H, E, F, G, E we get angle(C, H, E) == angle(F, G, E) + 180 mod 360
By divide_by_2_mod_180_v2 on E, H, B, E, G, C we get angle(E, H, B) == angle(E, G, C) + 180 mod 360
By divide_by_2_mod_180_v1 on C, H, E, E, G, C we get angle(C, H, E) == angle(E, G, C) mod 360
By divide_by_2_mod_180_v0 on D, C, F, B, A, E we get angle(B, A, E) == angle(D, C, F) mod 360
By divide_by_2_mod_180_v2 on F, G, E, B, H, E we get angle(F, G, E) == angle(B, H, E) + 180 mod 360
By divide_by_2_mod_180_v3 on B, H, E, C, G, E we get angle(B, H, E) == angle(C, G, E) + 180 mod 360
By divide_by_2_mod_180_v0 on B, A, E, B, C, D we get angle(B, A, E) == angle(B, C, D) mod 360
By divide_by_2_mod_180_v1 on B, H, E, E, G, F we get angle(B, H, E) == angle(E, G, F) mod 360
By divide_by_2_mod_180_v0 on A, B, F, A, E, G we get angle(A, B, F) == angle(A, E, G) mod 360
By divide_by_2_mod_180_v1 on F, D, A, G, E, A we get angle(F, D, A) == angle(G, E, A) mod 360
By divide_by_2_mod_180_v1 on B, H, E, E, G, C we get angle(B, H, E) == angle(E, G, C) mod 360
By divide_by_2_mod_180_v0 on D, C, A, B, A, E we get angle(B, A, E) == angle(D, C, A) mod 360
By perpendicular_angle_conditions_v0 on E, G, C we get angle(E, G, C) == orientation(C, E, G) mod 360
By divide_by_2_mod_180_v2 on F, G, E, C, H, E we get angle(F, G, E) == angle(C, H, E) + 180 mod 360
By divide_by_2_mod_180_v0 on E, H, C, F, G, E we get angle(E, H, C) == angle(F, G, E) mod 360
By perpendicular_angle_conditions_v0 on E, G, A we get angle(E, G, A) == orientation(A, E, G) mod 360
By divide_by_2_mod_180_v2 on E, H, C, A, G, E we get angle(E, H, C) == angle(A, G, E) + 180 mod 360
By divide_by_2_mod_180_v3 on C, H, E, E, G, A we get angle(C, H, E) == angle(E, G, A) + 180 mod 360
By divide_by_2_mod_180_v2 on E, H, C, E, G, C we get angle(E, H, C) == angle(E, G, C) + 180 mod 360
By divide_by_2_mod_180_v1 on E, G, F, C, H, E we get angle(C, H, E) == angle(E, G, F) mod 360
By divide_by_2_mod_180_v0 on C, G, E, E, H, C we get angle(C, G, E) == angle(E, H, C) mod 360
By divide_by_2_mod_180_v3 on E, G, C, E, H, C we get angle(E, G, C) == angle(E, H, C) + 180 mod 360
By divide_by_2_mod_180_v2 on E, G, A, C, H, E we get angle(E, G, A) == angle(C, H, E) + 180 mod 360
By divide_by_2_mod_180_v1 on A, G, E, C, H, E we get angle(A, G, E) == angle(C, H, E) mod 360
By between_imply_segment_sum on A, G, C we get distance(A, C) == distance(A, G) + distance(C, G)
By divide_by_2_mod_180_v2 on E, H, C, E, G, F we get angle(E, H, C) == angle(E, G, F) + 180 mod 360
By divide_by_2_mod_180_v3 on C, H, E, C, G, E we get angle(C, H, E) == angle(C, G, E) + 180 mod 360
By divide_by_2_mod_180_v3 on E, G, C, E, H, B we get angle(E, G, C) == angle(E, H, B) + 180 mod 360
By perpendicular_angle_conditions_v0 on A, G, E we get angle(A, G, E) == orientation(A, G, E) mod 360
By divide_by_2_mod_180_v2 on C, G, E, C, H, E we get angle(C, G, E) == angle(C, H, E) + 180 mod 360
By reverse_direction on E, G we get 180 == direction(E, G) - direction(G, E) mod 360
By divide_by_2_mod_180_v2 on C, G, E, B, H, E we get angle(C, G, E) == angle(B, H, E) + 180 mod 360
By between_imply_segment_sum on G, F, C we get distance(C, G) == distance(F, G) + distance(C, F)
By perpendicular_angle_conditions_v0 on F, G, E we get angle(F, G, E) == orientation(E, F, G) mod 360
By reverse_direction on G, E we get 180 == direction(G, E) - direction(E, G) mod 360
By perpendicular_angle_conditions_v0 on C, G, E we get angle(C, G, E) == orientation(C, G, E) mod 360
By external_angle_bisector_definition_v0_r on E, F, E, G we get Line(F, G) == external_angle_bisector(E, G, E)
By internal_angle_bisector_definition_v0_r on G, D, H, C we get Line(C, D) == internal_angle_bisector(G, C, H)
By concyclic_definition_0 on C, E, B, A we get A in Circle(B, C, E)
By anti_similar_triangle_basic_properties on E, G, F, E, G, A we get angle(E, G, F) == 0 - angle(E, G, A) mod 360, angle(G, F, E) == 0 - angle(G, A, E) mod 360, angle(F, E, G) == 0 - angle(A, E, G) mod 360, log(distance(E, G)) + log(distance(A, G)) == log(distance(E, G)) + log(distance(F, G)), log(distance(A, G)) + log(distance(E, F)) == log(distance(F, G)) + log(distance(A, E)), log(distance(A, E)) + log(distance(E, G)) == log(distance(E, F)) + log(distance(E, G))
By external_angle_bisector_definition_v0_r on A, C, F, G we get Line(C, G) == external_angle_bisector(A, G, F)
By external_angle_bisector_definition_v0_r on F, E, F, G we get Line(E, G) == external_angle_bisector(F, G, F)
By sas_anti_congruence on D, B, C, D, F, C we get anti_congruent_triangles(B, C, D, F, C, D)
By external_angle_bisector_definition_v0_r on C, F, A, G we get Line(F, G) == external_angle_bisector(A, G, C)
By external_angle_bisector_definition_v0_r on E, A, E, G we get Line(A, G) == external_angle_bisector(E, G, E)
By internal_angle_bisector_definition_v0_r on G, C, F, A we get Line(A, C) == internal_angle_bisector(F, A, G)
By external_angle_bisector_definition_v0_r on C, E, C, G we get Line(E, G) == external_angle_bisector(C, G, C)
By internal_angle_bisector_definition_v0_r on C, E, A, G we get Line(E, G) == internal_angle_bisector(A, G, C)
By external_angle_bisector_definition_v0_r on A, G, C, F we get Line(F, G) == external_angle_bisector(A, F, C)
By external_angle_bisector_definition_v0_r on F, E, C, G we get Line(E, G) == external_angle_bisector(C, G, F)
By internal_angle_bisector_definition_v0_r on B, D, G, C we get Line(C, D) == internal_angle_bisector(B, C, G)
By aa_anti_similarity on D, B, C, D, F, C we get anti_similar_triangles(B, C, D, F, C, D)
By internal_angle_bisector_definition_v0_r on G, F, G, C we get Line(C, F) == internal_angle_bisector(G, C, G)
By sas_anti_similarity on C, B, D, C, F, D we get anti_similar_triangles(B, C, D, F, C, D)
By concyclic_definition_0 on A, C, E, B we get B in Circle(A, C, E)
By external_angle_bisector_definition_v0_r on A, E, A, G we get Line(E, G) == external_angle_bisector(A, G, A)
By internal_angle_bisector_definition_v0_r on A, D, H, C we get Line(C, D) == internal_angle_bisector(A, C, H)
By internal_angle_bisector_definition_v0_r on F, D, H, C we get Line(C, D) == internal_angle_bisector(F, C, H)
By internal_angle_bisector_definition_v0_r on F, G, C, A we get Line(A, G) == internal_angle_bisector(C, A, F)
By internal_angle_bisector_definition_v0_r on A, C, G, F we get Line(C, F) == internal_angle_bisector(A, F, G)
By concyclic_definition_0 on B, A, E, C we get C in Circle(A, B, E)
By internal_angle_bisector_definition_v0_r on G, F, A, C we get Line(C, F) == internal_angle_bisector(A, C, G)
By internal_angle_bisector_definition_v0_r on C, F, C, G we get Line(F, G) == internal_angle_bisector(C, G, C)
By external_angle_bisector_definition_v0_r on E, C, E, G we get Line(C, G) == external_angle_bisector(E, G, E)
By internal_angle_bisector_definition_v0_r on C, A, C, G we get Line(A, G) == internal_angle_bisector(C, G, C)
By internal_angle_bisector_definition_v0_r on F, G, A, C we get Line(C, G) == internal_angle_bisector(A, C, F)
By reverse_direction on C, D we get 180 == direction(C, D) - direction(D, C) mod 360
By asa_anti_congruence on B, C, D, F, C, D we get anti_congruent_triangles(B, C, D, F, C, D)
By internal_angle_bisector_definition_v0_r on G, A, F, C we get Line(A, C) == internal_angle_bisector(F, C, G)
By concyclic_definition_0 on A, B, C, E we get E in Circle(A, B, C)
By internal_angle_bisector_definition_v0_r on G, A, G, C we get Line(A, C) == internal_angle_bisector(G, C, G)
By sas_anti_congruence on D, F, C, D, B, C we get anti_congruent_triangles(B, C, D, F, C, D)
By asa_anti_congruence on F, C, D, B, C, D we get anti_congruent_triangles(B, C, D, F, C, D)
By altitude_definition on E, A, F, Line(E, G) we get Line(E, G) == altitude(E, A, F)
By sas_anti_congruence on C, B, D, C, F, D we get anti_congruent_triangles(B, C, D, F, C, D)
By internal_angle_bisector_definition_v0_r on F, A, C, G we get Line(A, G) == internal_angle_bisector(C, G, F)
By internal_angle_bisector_definition_v0_r on F, D, B, C we get Line(C, D) == internal_angle_bisector(B, C, F)
By sas_anti_similarity on D, B, C, D, F, C we get anti_similar_triangles(B, C, D, F, C, D)
By sas_anti_congruence on C, F, D, C, B, D we get anti_congruent_triangles(B, C, D, F, C, D)
By sas_anti_similarity on C, F, D, C, B, D we get anti_similar_triangles(B, C, D, F, C, D)
By internal_angle_bisector_definition_v0_r on F, E, A, G we get Line(E, G) == internal_angle_bisector(A, G, F)
By aa_anti_similarity on D, C, B, D, C, F we get anti_similar_triangles(B, C, D, F, C, D)
By aa_anti_similarity on D, C, F, D, C, B we get anti_similar_triangles(B, C, D, F, C, D)
By asa_anti_congruence on C, B, D, C, F, D we get anti_congruent_triangles(B, C, D, F, C, D)
By sas_anti_similarity on D, F, C, D, B, C we get anti_similar_triangles(B, C, D, F, C, D)
By aa_anti_similarity on D, F, C, D, B, C we get anti_similar_triangles(B, C, D, F, C, D)
By asa_anti_congruence on C, F, D, C, B, D we get anti_congruent_triangles(B, C, D, F, C, D)
By perpendicular_lines_draw_intersection on Line(D, E), Line(B, F) we get exists(line_intersection(Line(B, F), Line(D, E)))
By altitude_definition on E, G, A, Line(E, G) we get Line(E, G) == altitude(E, A, G)
By sas_anti_congruence on C, B, E, C, F, E we get anti_congruent_triangles(B, C, E, F, C, E)
By concyclic_definition_1 on E, A, B, C we get Circle(A, B, C) == Circle(A, B, E)
By altitude_definition on A, G, E, g we get g == altitude(A, E, G)
By altitude_definition on F, E, G, g we get g == altitude(F, E, G)
By sas_anti_similarity on E, F, C, E, B, C we get anti_similar_triangles(B, C, E, F, C, E)
By concyclic_definition_1 on B, C, E, A we get Circle(A, C, E) == Circle(B, C, E)
By sas_anti_congruence on E, F, C, E, B, C we get anti_congruent_triangles(B, C, E, F, C, E)
By concyclic_definition_1 on B, C, A, E we get Circle(A, B, C) == Circle(A, C, E)
By altitude_definition on B, E, D, Line(B, F) we get Line(B, F) == altitude(B, D, E)
By altitude_definition on E, A, C, Line(E, G) we get Line(E, G) == altitude(E, A, C)
By concyclic_definition_1 on B, E, A, C we get Circle(A, B, E) == Circle(A, C, E)
By concyclic_definition_1 on C, B, E, A we get Circle(A, B, E) == Circle(B, C, E)
By altitude_definition on E, C, G, Line(E, G) we get Line(E, G) == altitude(E, C, G)
By altitude_definition on D, B, F, Line(D, E) we get Line(D, E) == altitude(D, B, F)
By altitude_definition on C, E, G, g we get g == altitude(C, E, G)
By concyclic_definition_1 on E, C, B, A we get Circle(A, B, C) == Circle(B, C, E)
By sas_anti_congruence on C, F, E, C, B, E we get anti_congruent_triangles(B, C, E, F, C, E)
By sas_anti_similarity on C, B, E, C, F, E we get anti_similar_triangles(B, C, E, F, C, E)
By sas_anti_similarity on C, F, E, C, B, E we get anti_similar_triangles(B, C, E, F, C, E)
By altitude_definition on E, F, C, Line(E, G) we get Line(E, G) == altitude(E, C, F)
By altitude_definition on E, B, F, Line(D, E) we get Line(D, E) == altitude(E, B, F)
By altitude_definition on F, E, D, Line(B, F) we get Line(B, F) == altitude(F, D, E)
By altitude_definition on E, G, F, Line(E, G) we get Line(E, G) == altitude(E, F, G)
By sas_anti_similarity on E, B, C, E, F, C we get anti_similar_triangles(B, C, E, F, C, E)
By sas_anti_congruence on E, B, C, E, F, C we get anti_congruent_triangles(B, C, E, F, C, E)
By perpendicular_bisector_sufficient_conditions on B, F, C, D we get Line(C, D) == perpendicular_bisector(B, F)
By perpendicular_bisector_sufficient_conditions on B, F, D, E we get Line(D, E) == perpendicular_bisector(B, F)
By isosceles_triangle_altitude_v2 on E, F, B we get identical(perpendicular_bisector(B, F), internal_angle_bisector(B, E, F), perpendicular_line(E, Line(B, F)))
By isosceles_triangle_altitude_v2 on D, B, F we get identical(perpendicular_bisector(B, F), internal_angle_bisector(B, D, F), perpendicular_line(D, Line(B, F)))
By isosceles_triangle_altitude_v2 on D, F, B we get identical(perpendicular_bisector(B, F), internal_angle_bisector(B, D, F), perpendicular_line(D, Line(B, F)))
By isosceles_triangle_altitude_v2 on E, B, F we get identical(perpendicular_bisector(B, F), internal_angle_bisector(B, E, F), perpendicular_line(E, Line(B, F)))
By concyclic_sufficient_conditions_v1 on C, H, E, G we get concyclic(C, E, G, H)
By line_definition on line_intersection(Line(B, F), Line(C, D)), C, Line(C, D) we get Line(C, D) == Line(C, line_intersection(Line(B, F), Line(C, D)))
By line_definition on midpoint(B, F), D, Line(C, D) we get Line(C, D) == Line(D, midpoint(B, F))
By line_definition on midpoint(B, F), E, Line(C, D) we get Line(C, D) == Line(E, midpoint(B, F))
By line_definition on C, E, Line(C, D) we get Line(C, D) == Line(C, E)
By line_definition on F, line_intersection(Line(B, F), Line(C, D)), Line(B, F) we get Line(B, F) == Line(F, line_intersection(Line(B, F), Line(C, D)))
By line_definition on line_intersection(Line(B, F), Line(C, D)), E, Line(C, D) we get Line(C, D) == Line(E, line_intersection(Line(B, F), Line(C, D)))
By line_definition on C, midpoint(B, F), Line(C, D) we get Line(C, D) == Line(C, midpoint(B, F))
By line_definition on B, line_intersection(Line(B, F), Line(C, D)), Line(B, F) we get Line(B, F) == Line(B, line_intersection(Line(B, F), Line(C, D)))
By line_definition on D, line_intersection(Line(B, F), Line(C, D)), Line(C, D) we get Line(C, D) == Line(D, line_intersection(Line(B, F), Line(C, D)))
By angles_on_chord_v1 on A, E, B, C, Circle(A, B, C) we get angle(A, B, E) == angle(A, C, E) mod 360
By angles_on_chord_v1 on C, A, B, E, Circle(A, B, C) we get angle(C, B, A) == angle(C, E, A) mod 360
By angles_on_chord_v0 on C, B, E, A, Circle(A, B, C) we get angle(C, A, B) == angle(C, E, B) mod 360
By angles_on_chord_v1 on E, B, A, C, Circle(A, B, C) we get angle(E, A, B) == angle(E, C, B) mod 360
By angles_on_chord_v0 on A, C, B, E, Circle(A, B, C) we get angle(A, B, C) == angle(A, E, C) mod 360
By angles_on_chord_v0 on E, A, B, C, Circle(A, B, C) we get angle(E, B, A) == angle(E, C, A) mod 360
By angles_on_chord_v1 on B, C, A, E, Circle(A, B, C) we get angle(B, A, C) == angle(B, E, C) mod 360
By angles_on_chord_v0 on B, E, C, A, Circle(A, B, C) we get angle(B, A, E) == angle(B, C, E) mod 360
By line_intersection_definition on E, Line(E, F), Line(C, E) we get E == line_intersection(Line(C, E), Line(E, F))
By median_definition on E, B, F, Line(C, D) we get Line(C, D) == median(E, B, F)
By median_definition on D, F, B, Line(C, D) we get Line(C, D) == median(D, B, F)
By line_intersection_definition on C, Line(C, E), g we get C == line_intersection(g, Line(C, E))
By line_intersection_definition on E, Line(C, E), Line(E, H) we get E == line_intersection(Line(C, E), Line(E, H))
By median_definition on C, F, B, Line(C, D) we get Line(C, D) == median(C, B, F)
By perpendicular_line_definition on C, Line(C, D), Line(B, F) we get Line(C, D) == perpendicular_line(C, Line(B, F))
By line_intersection_definition on E, Line(C, E), Line(E, G) we get E == line_intersection(Line(C, E), Line(E, G))
By radical_axis_of_intersecting_circles_v0 on A, B, Circle(A, B, C), c we get Line(A, B) == radical_axis(c, Circle(A, B, C))
By line_intersection_definition on E, Line(C, E), Line(A, E) we get E == line_intersection(Line(A, E), Line(C, E))
By line_intersection_definition on C, f, Line(C, E) we get C == line_intersection(f, Line(C, E))
By line_intersection_definition on E, Line(B, E), Line(C, E) we get E == line_intersection(Line(B, E), Line(C, E))
By perpendicular_line_definition on line_intersection(Line(B, F), Line(C, D)), Line(C, D), Line(B, F) we get Line(C, D) == perpendicular_line(line_intersection(Line(B, F), Line(C, D)), Line(B, F))
By perpendicular_line_definition on line_intersection(Line(B, F), Line(C, D)), Line(B, F), Line(C, D) we get Line(B, F) == perpendicular_line(line_intersection(Line(B, F), Line(C, D)), Line(C, D))
By same_angle_converse_v1 on D, E, C, B we get collinear(C, D, E)
By same_angle_v0 on C, B, H, E we get angle(B, C, E) == angle(H, C, E) mod 360
By perpendicular_direction_conditions_v0 on F, B, C, E we get perpendicular(Line(B, F), Line(C, E))
By same_angle_v1 on C, A, G, E we get angle(A, C, E) == angle(G, C, E) mod 360
By same_angle_v1 on C, F, A, E we get angle(A, C, E) == angle(F, C, E) mod 360
By same_angle_v1 on C, G, F, E we get angle(F, C, E) == angle(G, C, E) mod 360
By between_imply_not_between on F, midpoint(B, F), B we get collinear_and_not_between(B, F, midpoint(B, F))
By between_imply_not_between on B, midpoint(B, F), F we get collinear_and_not_between(F, B, midpoint(B, F))
By divide_by_2_mod_180_v2 on B, D, F, C, E, F we get angle(B, D, F) == angle(C, E, F) + 180 mod 360
By divide_by_2_mod_180_v0 on F, E, D, C, E, B we get angle(C, E, B) == angle(F, E, D) mod 360
By in_imply_collinear on line_intersection(Line(B, F), Line(C, D)), D, C we get collinear(C, D, line_intersection(Line(B, F), Line(C, D)))
By in_imply_collinear on line_intersection(Line(B, F), Line(C, D)), B, F we get collinear(B, F, line_intersection(Line(B, F), Line(C, D)))
By divide_by_2_mod_180_v2 on F, E, C, F, D, B we get angle(F, E, C) == angle(F, D, B) + 180 mod 360
By divide_by_2_mod_180_v0 on E, B, A, B, C, E we get angle(B, C, E) == angle(E, B, A) mod 360
By divide_by_2_mod_180_v1 on B, A, F, C, E, F we get angle(B, A, F) == angle(C, E, F) mod 360
By in_imply_collinear on midpoint(B, F), E, D we get collinear(D, E, midpoint(B, F))
By divide_by_2_mod_180_v1 on D, C, H, E, C, B we get angle(D, C, H) == angle(E, C, B) mod 360
By divide_by_2_mod_180_v3 on C, E, F, B, D, F we get angle(C, E, F) == angle(B, D, F) + 180 mod 360
By divide_by_2_mod_180_v1 on C, E, F, B, A, G we get angle(B, A, G) == angle(C, E, F) mod 360
By in_imply_collinear on line_intersection(Line(B, F), Line(C, D)), D, E we get collinear(D, E, line_intersection(Line(B, F), Line(C, D)))
By in_imply_collinear on midpoint(B, F), C, D we get collinear(C, D, midpoint(B, F))
By divide_by_2_mod_180_v1 on B, E, C, B, E, D we get angle(B, E, C) == angle(B, E, D) mod 360
By divide_by_2_mod_180_v0 on D, C, A, B, C, E we get angle(B, C, E) == angle(D, C, A) mod 360
By divide_by_2_mod_180_v1 on E, C, B, D, C, B we get angle(D, C, B) == angle(E, C, B) mod 360
By divide_by_2_mod_180_v0 on E, C, F, D, C, F we get angle(D, C, F) == angle(E, C, F) mod 360
By divide_by_2_mod_180_v3 on F, D, B, F, E, C we get angle(F, D, B) == angle(F, E, C) + 180 mod 360
By divide_by_2_mod_180_v0 on G, A, B, C, E, B we get angle(C, E, B) == angle(G, A, B) mod 360
By divide_by_2_mod_180_v1 on F, C, E, F, C, D we get angle(F, C, D) == angle(F, C, E) mod 360
By reverse_direction on C, E we get 180 == direction(C, E) - direction(E, C) mod 360
By divide_by_2_mod_180_v0 on F, E, D, F, E, C we get angle(F, E, C) == angle(F, E, D) mod 360
By perpendicular_bisector_sufficient_conditions on F, B, C, E we get Line(C, E) == perpendicular_bisector(B, F)
By divide_by_2_mod_180_v1 on G, C, D, F, C, E we get angle(F, C, E) == angle(G, C, D) mod 360
By divide_by_2_mod_180_v0 on C, E, B, F, A, B we get angle(C, E, B) == angle(F, A, B) mod 360
By divide_by_2_mod_180_v0 on F, E, C, C, A, B we get angle(C, A, B) == angle(F, E, C) mod 360
By divide_by_2_mod_180_v0 on F, A, B, F, E, C we get angle(F, A, B) == angle(F, E, C) mod 360
By divide_by_2_mod_180_v0 on B, C, E, D, C, F we get angle(B, C, E) == angle(D, C, F) mod 360
By divide_by_2_mod_180_v1 on A, C, D, E, C, B we get angle(A, C, D) == angle(E, C, B) mod 360
By divide_by_2_mod_180_v0 on B, C, E, B, C, D we get angle(B, C, D) == angle(B, C, E) mod 360
By divide_by_2_mod_180_v0 on B, C, E, H, C, D we get angle(B, C, E) == angle(H, C, D) mod 360
By aa_similarity on E, B, H, E, A, G we get similar_triangles(A, E, G, B, E, H)
By divide_by_2_mod_180_v1 on D, C, H, F, C, E we get angle(D, C, H) == angle(F, C, E) mod 360
By divide_by_2_mod_180_v3 on B, E, C, B, D, F we get angle(B, E, C) == angle(B, D, F) + 180 mod 360
By divide_by_2_mod_180_v0 on B, A, E, E, C, F we get angle(B, A, E) == angle(E, C, F) mod 360
By divide_by_2_mod_180_v0 on H, C, D, E, C, F we get angle(E, C, F) == angle(H, C, D) mod 360
By internal_angle_bisector_definition_v0_r on F, C, B, E we get Line(C, E) == internal_angle_bisector(B, E, F)
By divide_by_2_mod_180_v1 on E, C, B, G, C, D we get angle(E, C, B) == angle(G, C, D) mod 360
By divide_by_2_mod_180_v1 on A, B, E, E, C, B we get angle(A, B, E) == angle(E, C, B) mod 360
By divide_by_2_mod_180_v0 on E, C, F, D, C, A we get angle(D, C, A) == angle(E, C, F) mod 360
By divide_by_2_mod_180_v0 on E, C, F, D, C, G we get angle(D, C, G) == angle(E, C, F) mod 360
By divide_by_2_mod_180_v0 on E, B, A, E, C, F we get angle(E, B, A) == angle(E, C, F) mod 360
By divide_by_2_mod_180_v1 on B, A, C, C, E, F we get angle(B, A, C) == angle(C, E, F) mod 360
By divide_by_2_mod_180_v0 on B, C, D, E, C, F we get angle(B, C, D) == angle(E, C, F) mod 360
By divide_by_2_mod_180_v1 on C, E, F, B, E, D we get angle(B, E, D) == angle(C, E, F) mod 360
By divide_by_2_mod_180_v0 on F, E, C, G, A, B we get angle(F, E, C) == angle(G, A, B) mod 360
By divide_by_2_mod_180_v1 on D, E, F, C, E, F we get angle(C, E, F) == angle(D, E, F) mod 360
By divide_by_2_mod_180_v1 on F, C, E, A, B, E we get angle(A, B, E) == angle(F, C, E) mod 360
By divide_by_2_mod_180_v2 on B, D, F, B, E, C we get angle(B, D, F) == angle(B, E, C) + 180 mod 360
By aa_similarity on E, A, G, E, B, H we get similar_triangles(A, E, G, B, E, H)
By divide_by_2_mod_180_v0 on D, E, B, F, E, C we get angle(D, E, B) == angle(F, E, C) mod 360
By divide_by_2_mod_180_v1 on D, E, F, B, E, C we get angle(B, E, C) == angle(D, E, F) mod 360
By divide_by_2_mod_180_v1 on B, A, F, B, E, C we get angle(B, A, F) == angle(B, E, C) mod 360
By divide_by_2_mod_180_v1 on A, C, D, F, C, E we get angle(A, C, D) == angle(F, C, E) mod 360
By divide_by_2_mod_180_v1 on B, A, G, B, E, C we get angle(B, A, G) == angle(B, E, C) mod 360
By divide_by_2_mod_180_v1 on F, C, E, E, A, B we get angle(E, A, B) == angle(F, C, E) mod 360
By divide_by_2_mod_180_v3 on F, D, B, C, E, B we get angle(F, D, B) == angle(C, E, B) + 180 mod 360
By aa_similarity on E, H, B, E, G, A we get similar_triangles(A, E, G, B, E, H)
By divide_by_2_mod_180_v1 on E, C, B, F, C, D we get angle(E, C, B) == angle(F, C, D) mod 360
By divide_by_2_mod_180_v2 on C, E, B, F, D, B we get angle(C, E, B) == angle(F, D, B) + 180 mod 360
By point_on_perpendicular_bisector on B, F, line_intersection(Line(B, F), Line(C, D)), Line(C, D) we get distance(B, line_intersection(Line(B, F), Line(C, D))) == distance(F, line_intersection(Line(B, F), Line(C, D)))
By reverse_direction on E, C we get 180 == direction(E, C) - direction(C, E) mod 360
By divide_by_2_mod_180_v0 on D, C, G, B, C, E we get angle(B, C, E) == angle(D, C, G) mod 360
By divide_by_2_mod_180_v0 on C, E, B, D, E, B we get angle(C, E, B) == angle(D, E, B) mod 360
By aa_anti_similarity on E, G, F, E, H, B we get anti_similar_triangles(B, E, H, F, E, G)
By divide_by_2_mod_180_v1 on F, C, E, D, C, B we get angle(D, C, B) == angle(F, C, E) mod 360
By aa_anti_similarity on E, B, H, E, F, G we get anti_similar_triangles(B, E, H, F, E, G)
By aa_anti_similarity on E, H, B, E, G, F we get anti_similar_triangles(B, E, H, F, E, G)
By internal_angle_bisector_definition_v0_r on F, E, B, C we get Line(C, E) == internal_angle_bisector(B, C, F)
By aa_anti_similarity on E, F, G, E, B, H we get anti_similar_triangles(B, E, H, F, E, G)
By aa_similarity on E, G, A, E, H, B we get similar_triangles(A, E, G, B, E, H)
By anti_similar_triangle_basic_properties on C, E, B, C, E, F we get angle(C, E, B) == 0 - angle(C, E, F) mod 360, angle(E, B, C) == 0 - angle(E, F, C) mod 360, angle(B, C, E) == 0 - angle(F, C, E) mod 360, log(distance(C, E)) + log(distance(B, E)) == log(distance(C, E)) + log(distance(E, F)), log(distance(B, E)) + log(distance(C, F)) == log(distance(E, F)) + log(distance(B, C)), log(distance(B, C)) + log(distance(C, E)) == log(distance(C, F)) + log(distance(C, E))
By circumcenter_perpendicular_bisectors on A, F, B we get circumcenter(A, B, F) in perpendicular_bisector(A, F), circumcenter(A, B, F) in perpendicular_bisector(B, F), circumcenter(A, B, F) in perpendicular_bisector(A, B)
By power_of_a_point_in_circle on A, Circle(A, B, C) we get 0 == power_of_a_point(A, Circle(A, B, C))
By log_of_2_times_distance on B, F, F, midpoint(B, F) we get log(distance(B, F)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(F, midpoint(B, F)))
By anti_similar_triangle_basic_properties on F, D, C, B, D, C we get angle(F, D, C) == 0 - angle(B, D, C) mod 360, angle(D, C, F) == 0 - angle(D, C, B) mod 360, angle(C, F, D) == 0 - angle(C, B, D) mod 360, log(distance(B, D)) + log(distance(C, D)) == log(distance(D, F)) + log(distance(C, D)), log(distance(C, D)) + log(distance(B, C)) == log(distance(C, D)) + log(distance(C, F)), log(distance(B, C)) + log(distance(D, F)) == log(distance(C, F)) + log(distance(B, D))
By isosceles_triangle_midpoint on E, B, F we get midpoint(B, F) in median(E, B, F)
By altitude_definition on F, D, C, Line(B, F) we get Line(B, F) == altitude(F, C, D)
By power_of_a_point_on_circle on C, Circle(A, B, C) we get 0 == power_of_a_point(C, Circle(A, B, C))
By perpendicular_bisector_properties on F, B we get perpendicular(Line(B, F), perpendicular_bisector(B, F)), midpoint(B, F) == line_intersection(Line(B, F), perpendicular_bisector(B, F))
By power_of_a_point_in_circle on E, Circle(A, B, C) we get 0 == power_of_a_point(E, Circle(A, B, C))
By collinear_definition on F, midpoint(B, F), B we get midpoint(B, F) in Line(B, F), B in Line(F, midpoint(B, F)), Line(B, F) == Line(F, midpoint(B, F)), 0 == 2 * angle(midpoint(B, F), F, B) mod 360
By isosceles_triangle_midpoint on C, F, B we get midpoint(B, F) in median(C, B, F)
By isosceles_triangle_midpoint on D, F, B we get midpoint(B, F) in median(D, B, F)
By collinear_definition on F, B, midpoint(B, F) we get B in Line(F, midpoint(B, F)), midpoint(B, F) in Line(B, F), Line(B, F) == Line(F, midpoint(B, F)), 0 == 2 * angle(B, F, midpoint(B, F)) mod 360
By collinear_definition on B, midpoint(B, F), F we get midpoint(B, F) in Line(B, F), F in Line(B, midpoint(B, F)), Line(B, F) == Line(B, midpoint(B, F)), 0 == 2 * angle(midpoint(B, F), B, F) mod 360
By altitude_definition on B, D, C, Line(B, F) we get Line(B, F) == altitude(B, C, D)
By collinear_definition on B, F, midpoint(B, F) we get F in Line(B, midpoint(B, F)), midpoint(B, F) in Line(B, F), Line(B, F) == Line(B, midpoint(B, F)), 0 == 2 * angle(F, B, midpoint(B, F)) mod 360
By log_of_2_times_distance on F, B, B, midpoint(B, F) we get log(distance(B, F)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(B, midpoint(B, F)))
By power_of_a_point_in_circle on B, Circle(A, B, C) we get 0 == power_of_a_point(B, Circle(A, B, C))
By isosceles_triangle_altitude_v2 on C, F, B we get identical(perpendicular_bisector(B, F), internal_angle_bisector(B, C, F), perpendicular_line(C, Line(B, F)))
By isosceles_triangle_altitude_v3 on C, F, B we get identical(perpendicular_bisector(B, F), internal_angle_bisector(B, C, F), perpendicular_line(C, Line(B, F)))
By isosceles_triangle_altitude_v3 on C, B, F we get identical(perpendicular_bisector(B, F), internal_angle_bisector(B, C, F), perpendicular_line(C, Line(B, F)))
By isosceles_triangle_altitude_v2 on C, B, F we get identical(perpendicular_bisector(B, F), internal_angle_bisector(B, C, F), perpendicular_line(C, Line(B, F)))
By collinear_definition on midpoint(B, F), B, F we get B in Line(F, midpoint(B, F)), F in Line(B, midpoint(B, F)), Line(B, midpoint(B, F)) == Line(F, midpoint(B, F)), 0 == 2 * angle(B, midpoint(B, F), F) mod 360
By altitude_definition on C, F, B, Line(C, D) we get Line(C, D) == altitude(C, B, F)
By power_of_a_point_definition on F, C, A, Circle(A, B, C) we get log(distance(C, F)) + log(distance(A, F)) == log(power_of_a_point(F, Circle(A, B, C)))
By collinear_definition on midpoint(B, F), F, B we get F in Line(B, midpoint(B, F)), B in Line(F, midpoint(B, F)), Line(B, midpoint(B, F)) == Line(F, midpoint(B, F)), 0 == 2 * angle(F, midpoint(B, F), B) mod 360
By power_of_a_point_definition on G, A, C, Circle(A, B, C) we get log(distance(A, G)) + log(distance(C, G)) == log(power_of_a_point(G, Circle(A, B, C)))
By between_implies_angles on B, midpoint(B, F), F we get 180 == angle(B, midpoint(B, F), F) mod 360, 0 == angle(midpoint(B, F), F, B) mod 360, 0 == angle(F, B, midpoint(B, F)) mod 360
By power_of_a_point_definition on midpoint(B, F), F, B, c we get log(power_of_a_point(midpoint(B, F), c)) == log(distance(F, midpoint(B, F))) + log(distance(B, midpoint(B, F)))
By between_implies_angles on F, midpoint(B, F), B we get 180 == angle(F, midpoint(B, F), B) mod 360, 0 == angle(midpoint(B, F), B, F) mod 360, 0 == angle(B, F, midpoint(B, F)) mod 360
By power_of_a_point_definition on H, C, B, Circle(A, B, C) we get log(distance(C, H)) + log(distance(B, H)) == log(power_of_a_point(H, Circle(A, B, C)))
By line_definition on E, midpoint(A, B), perpendicular_bisector(A, B) we get perpendicular_bisector(A, B) == Line(E, midpoint(A, B))
By line_intersection_definition on E, perpendicular_bisector(A, B), Line(E, F) we get E == line_intersection(Line(E, F), perpendicular_bisector(A, B))
By median_definition on E, B, A, perpendicular_bisector(A, B) we get median(E, A, B) == perpendicular_bisector(A, B)
By line_intersection_definition on E, perpendicular_bisector(A, B), Line(B, E) we get E == line_intersection(Line(B, E), perpendicular_bisector(A, B))
By perpendicular_line_definition on E, perpendicular_bisector(A, B), Line(A, B) we get perpendicular_bisector(A, B) == perpendicular_line(E, Line(A, B))
By line_intersection_definition on E, Line(E, G), perpendicular_bisector(A, B) we get E == line_intersection(Line(E, G), perpendicular_bisector(A, B))
By line_intersection_definition on E, Line(E, H), perpendicular_bisector(A, B) we get E == line_intersection(Line(E, H), perpendicular_bisector(A, B))
By line_intersection_definition on E, Line(C, D), perpendicular_bisector(A, B) we get E == line_intersection(Line(C, D), perpendicular_bisector(A, B))
By perpendicular_line_definition on A, Line(A, B), perpendicular_bisector(A, B) we get Line(A, B) == perpendicular_line(A, perpendicular_bisector(A, B))
By line_intersection_definition on E, perpendicular_bisector(A, B), Line(A, E) we get E == line_intersection(Line(A, E), perpendicular_bisector(A, B))
By perpendicular_line_definition on B, Line(A, B), perpendicular_bisector(A, B) we get Line(A, B) == perpendicular_line(B, perpendicular_bisector(A, B))
By same_angle_v0 on E, C, D, H we get angle(C, E, H) == angle(D, E, H) mod 360
By same_angle_v3 on D, E, C, A we get angle(E, D, A) == angle(C, D, A) + 180 mod 360
By same_angle_v1 on E, D, C, G we get angle(C, E, G) == angle(D, E, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), B, C, E we get 180 == 2 * direction(midpoint(B, F), B) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), F, D, E we get 180 == 2 * direction(midpoint(B, F), F) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on D, E, midpoint(B, F), B we get 180 == 2 * direction(D, E) - 2 * direction(midpoint(B, F), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), B, E, D we get 180 == 2 * direction(midpoint(B, F), B) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), B, E, C we get 180 == 2 * direction(midpoint(B, F), B) - 2 * direction(E, C) mod 360
By projection_definition on F, midpoint(B, F), Line(C, D) we get midpoint(B, F) == projection(F, Line(C, D))
By perpendicular_direction_conditions_v0_r on D, E, midpoint(B, F), F we get 180 == 2 * direction(D, E) - 2 * direction(midpoint(B, F), F) mod 360
By perpendicular_direction_conditions_v0_r on E, D, midpoint(B, F), F we get 180 == 2 * direction(E, D) - 2 * direction(midpoint(B, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), B, D, E we get 180 == 2 * direction(midpoint(B, F), B) - 2 * direction(D, E) mod 360
By projection_definition on E, midpoint(B, F), Line(B, F) we get midpoint(B, F) == projection(E, Line(B, F))
By perpendicular_direction_conditions_v0_r on midpoint(B, F), F, D, C we get 180 == 2 * direction(midpoint(B, F), F) - 2 * direction(D, C) mod 360
By projection_definition on C, midpoint(B, F), Line(B, F) we get midpoint(B, F) == projection(C, Line(B, F))
By perpendicular_direction_conditions_v0_r on midpoint(B, F), F, E, D we get 180 == 2 * direction(midpoint(B, F), F) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), B, D, C we get 180 == 2 * direction(midpoint(B, F), B) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on C, E, midpoint(B, F), F we get 180 == 2 * direction(C, E) - 2 * direction(midpoint(B, F), F) mod 360
By between_imply_not_between on B, midpoint(A, B), A we get collinear_and_not_between(A, B, midpoint(A, B))
By perpendicular_direction_conditions_v0_r on midpoint(B, F), F, C, D we get 180 == 2 * direction(midpoint(B, F), F) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on C, D, midpoint(B, F), B we get 180 == 2 * direction(C, D) - 2 * direction(midpoint(B, F), B) mod 360
By perpendicular_direction_conditions_v0_r on D, C, midpoint(B, F), B we get 180 == 2 * direction(D, C) - 2 * direction(midpoint(B, F), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), B, C, D we get 180 == 2 * direction(midpoint(B, F), B) - 2 * direction(C, D) mod 360
By projection_definition on D, midpoint(B, F), Line(B, F) we get midpoint(B, F) == projection(D, Line(B, F))
By perpendicular_direction_conditions_v0_r on E, C, midpoint(B, F), B we get 180 == 2 * direction(E, C) - 2 * direction(midpoint(B, F), B) mod 360
By perpendicular_direction_conditions_v0_r on D, C, midpoint(B, F), F we get 180 == 2 * direction(D, C) - 2 * direction(midpoint(B, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), F, E, C we get 180 == 2 * direction(midpoint(B, F), F) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on E, D, midpoint(B, F), B we get 180 == 2 * direction(E, D) - 2 * direction(midpoint(B, F), B) mod 360
By perpendicular_direction_conditions_v0_r on C, D, midpoint(B, F), F we get 180 == 2 * direction(C, D) - 2 * direction(midpoint(B, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), F, C, E we get 180 == 2 * direction(midpoint(B, F), F) - 2 * direction(C, E) mod 360
By projection_definition on B, midpoint(B, F), Line(C, D) we get midpoint(B, F) == projection(B, Line(C, D))
By perpendicular_direction_conditions_v0_r on C, E, midpoint(B, F), B we get 180 == 2 * direction(C, E) - 2 * direction(midpoint(B, F), B) mod 360
By perpendicular_direction_conditions_v0_r on E, C, midpoint(B, F), F we get 180 == 2 * direction(E, C) - 2 * direction(midpoint(B, F), F) mod 360
By between_imply_not_between on A, midpoint(A, B), B we get collinear_and_not_between(B, A, midpoint(A, B))
By angle_to_center on B, A, C, Circle(A, B, C) we get 2 * angle(B, A, C) == angle(B, center(Circle(A, B, C)), C) mod 360
By circle_radius_v0_r on C, Circle(A, B, C) we get radius(Circle(A, B, C)) == distance(C, center(Circle(A, B, C)))
By circle_radius_v0_r on A, Circle(A, B, C) we get radius(Circle(A, B, C)) == distance(A, center(Circle(A, B, C)))
By circle_radius_v0_r on E, Circle(A, B, C) we get radius(Circle(A, B, C)) == distance(E, center(Circle(A, B, C)))
By circle_radius_v0_r on B, Circle(A, B, C) we get radius(Circle(A, B, C)) == distance(B, center(Circle(A, B, C)))
By angle_to_center on C, E, A, Circle(A, B, C) we get 2 * angle(C, E, A) == angle(C, center(Circle(A, B, C)), A) mod 360
By angle_to_center on C, E, B, Circle(A, B, C) we get 2 * angle(C, E, B) == angle(C, center(Circle(A, B, C)), B) mod 360
By angle_to_center on E, A, C, Circle(A, B, C) we get 2 * angle(E, A, C) == angle(E, center(Circle(A, B, C)), C) mod 360
By angle_to_center on E, B, C, Circle(A, B, C) we get 2 * angle(E, B, C) == angle(E, center(Circle(A, B, C)), C) mod 360
By angle_to_center on E, A, B, Circle(A, B, C) we get 2 * angle(E, A, B) == angle(E, center(Circle(A, B, C)), B) mod 360
By angle_to_center on A, B, C, Circle(A, B, C) we get 2 * angle(A, B, C) == angle(A, center(Circle(A, B, C)), C) mod 360
By angle_to_center on B, E, A, Circle(A, B, C) we get 2 * angle(B, E, A) == angle(B, center(Circle(A, B, C)), A) mod 360
By angle_to_center on A, E, C, Circle(A, B, C) we get 2 * angle(A, E, C) == angle(A, center(Circle(A, B, C)), C) mod 360
By angle_to_center on E, B, A, Circle(A, B, C) we get 2 * angle(E, B, A) == angle(E, center(Circle(A, B, C)), A) mod 360
By angle_to_center on B, C, A, Circle(A, B, C) we get 2 * angle(B, C, A) == angle(B, center(Circle(A, B, C)), A) mod 360
By angle_to_center on C, A, B, Circle(A, B, C) we get 2 * angle(C, A, B) == angle(C, center(Circle(A, B, C)), B) mod 360
By angle_to_center on C, B, A, Circle(A, B, C) we get 2 * angle(C, B, A) == angle(C, center(Circle(A, B, C)), A) mod 360
By angle_to_center on A, B, E, Circle(A, B, C) we get 2 * angle(A, B, E) == angle(A, center(Circle(A, B, C)), E) mod 360
By angle_to_center on E, C, A, Circle(A, B, C) we get 2 * angle(E, C, A) == angle(E, center(Circle(A, B, C)), A) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(B, F), midpoint(B, F), F we get 180 == 2 * direction(E, midpoint(B, F)) - 2 * direction(midpoint(B, F), F) mod 360
By angle_to_center on A, E, B, Circle(A, B, C) we get 2 * angle(A, E, B) == angle(A, center(Circle(A, B, C)), B) mod 360
By angle_to_center on B, A, E, Circle(A, B, C) we get 2 * angle(B, A, E) == angle(B, center(Circle(A, B, C)), E) mod 360
By angle_to_center on C, B, E, Circle(A, B, C) we get 2 * angle(C, B, E) == angle(C, center(Circle(A, B, C)), E) mod 360
By angle_to_center on C, A, E, Circle(A, B, C) we get 2 * angle(C, A, E) == angle(C, center(Circle(A, B, C)), E) mod 360
By angle_to_center on A, C, E, Circle(A, B, C) we get 2 * angle(A, C, E) == angle(A, center(Circle(A, B, C)), E) mod 360
By angle_to_center on B, E, C, Circle(A, B, C) we get 2 * angle(B, E, C) == angle(B, center(Circle(A, B, C)), C) mod 360
By angle_to_center on B, C, E, Circle(A, B, C) we get 2 * angle(B, C, E) == angle(B, center(Circle(A, B, C)), E) mod 360
By angle_to_center on E, C, B, Circle(A, B, C) we get 2 * angle(E, C, B) == angle(E, center(Circle(A, B, C)), B) mod 360
By angle_to_center on A, C, B, Circle(A, B, C) we get 2 * angle(A, C, B) == angle(A, center(Circle(A, B, C)), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), F, midpoint(B, F), C we get 180 == 2 * direction(midpoint(B, F), F) - 2 * direction(midpoint(B, F), C) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(B, F), B, F we get 180 == 2 * direction(C, midpoint(B, F)) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(B, F), F, B we get 180 == 2 * direction(D, midpoint(B, F)) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(B, F), D, midpoint(B, F) we get 180 == 2 * direction(F, midpoint(B, F)) - 2 * direction(D, midpoint(B, F)) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(B, F), E, midpoint(B, F) we get 180 == 2 * direction(B, midpoint(B, F)) - 2 * direction(E, midpoint(B, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), D, B, F we get 180 == 2 * direction(midpoint(B, F), D) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on F, B, midpoint(B, F), C we get 180 == 2 * direction(F, B) - 2 * direction(midpoint(B, F), C) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(B, F), B, F we get 180 == 2 * direction(D, midpoint(B, F)) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), D, midpoint(B, F), B we get 180 == 2 * direction(midpoint(B, F), D) - 2 * direction(midpoint(B, F), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), B, midpoint(B, F), C we get 180 == 2 * direction(midpoint(B, F), B) - 2 * direction(midpoint(B, F), C) mod 360
By perpendicular_direction_conditions_v0_r on F, B, C, midpoint(B, F) we get 180 == 2 * direction(F, B) - 2 * direction(C, midpoint(B, F)) mod 360
By perpendicular_direction_conditions_v0_r on B, F, midpoint(B, F), C we get 180 == 2 * direction(B, F) - 2 * direction(midpoint(B, F), C) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(B, F), B, midpoint(B, F) we get 180 == 2 * direction(E, midpoint(B, F)) - 2 * direction(B, midpoint(B, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), C, midpoint(B, F), F we get 180 == 2 * direction(midpoint(B, F), C) - 2 * direction(midpoint(B, F), F) mod 360
By perpendicular_direction_conditions_v0_r on B, F, midpoint(B, F), E we get 180 == 2 * direction(B, F) - 2 * direction(midpoint(B, F), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), F, midpoint(B, F), E we get 180 == 2 * direction(midpoint(B, F), F) - 2 * direction(midpoint(B, F), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), B, midpoint(B, F), D we get 180 == 2 * direction(midpoint(B, F), B) - 2 * direction(midpoint(B, F), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), B, E, midpoint(B, F) we get 180 == 2 * direction(midpoint(B, F), B) - 2 * direction(E, midpoint(B, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), D, B, midpoint(B, F) we get 180 == 2 * direction(midpoint(B, F), D) - 2 * direction(B, midpoint(B, F)) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(B, F), D, midpoint(B, F) we get 180 == 2 * direction(B, midpoint(B, F)) - 2 * direction(D, midpoint(B, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(B, F), midpoint(B, F), B we get 180 == 2 * direction(E, midpoint(B, F)) - 2 * direction(midpoint(B, F), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), B, midpoint(B, F), E we get 180 == 2 * direction(midpoint(B, F), B) - 2 * direction(midpoint(B, F), E) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(B, F), F, midpoint(B, F) we get 180 == 2 * direction(C, midpoint(B, F)) - 2 * direction(F, midpoint(B, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), C, F, B we get 180 == 2 * direction(midpoint(B, F), C) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(B, F), midpoint(B, F), D we get 180 == 2 * direction(B, midpoint(B, F)) - 2 * direction(midpoint(B, F), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), C, B, midpoint(B, F) we get 180 == 2 * direction(midpoint(B, F), C) - 2 * direction(B, midpoint(B, F)) mod 360
By perpendicular_direction_conditions_v0_r on B, F, C, midpoint(B, F) we get 180 == 2 * direction(B, F) - 2 * direction(C, midpoint(B, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), E, B, F we get 180 == 2 * direction(midpoint(B, F), E) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), E, midpoint(B, F), F we get 180 == 2 * direction(midpoint(B, F), E) - 2 * direction(midpoint(B, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), F, C, midpoint(B, F) we get 180 == 2 * direction(midpoint(B, F), F) - 2 * direction(C, midpoint(B, F)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(B, F), B, midpoint(B, F) we get 180 == 2 * direction(C, midpoint(B, F)) - 2 * direction(B, midpoint(B, F)) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(B, F), midpoint(B, F), C we get 180 == 2 * direction(B, midpoint(B, F)) - 2 * direction(midpoint(B, F), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), F, E, midpoint(B, F) we get 180 == 2 * direction(midpoint(B, F), F) - 2 * direction(E, midpoint(B, F)) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(B, F), C, midpoint(B, F) we get 180 == 2 * direction(B, midpoint(B, F)) - 2 * direction(C, midpoint(B, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(B, F), F, midpoint(B, F) we get 180 == 2 * direction(D, midpoint(B, F)) - 2 * direction(F, midpoint(B, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), B, C, midpoint(B, F) we get 180 == 2 * direction(midpoint(B, F), B) - 2 * direction(C, midpoint(B, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), C, midpoint(B, F), B we get 180 == 2 * direction(midpoint(B, F), C) - 2 * direction(midpoint(B, F), B) mod 360
By perpendicular_direction_conditions_v0_r on B, F, E, midpoint(B, F) we get 180 == 2 * direction(B, F) - 2 * direction(E, midpoint(B, F)) mod 360
By perpendicular_direction_conditions_v0_r on F, B, D, midpoint(B, F) we get 180 == 2 * direction(F, B) - 2 * direction(D, midpoint(B, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), B, D, midpoint(B, F) we get 180 == 2 * direction(midpoint(B, F), B) - 2 * direction(D, midpoint(B, F)) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(B, F), midpoint(B, F), E we get 180 == 2 * direction(B, midpoint(B, F)) - 2 * direction(midpoint(B, F), E) mod 360
By perpendicular_direction_conditions_v0_r on F, B, midpoint(B, F), D we get 180 == 2 * direction(F, B) - 2 * direction(midpoint(B, F), D) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(B, F), C, midpoint(B, F) we get 180 == 2 * direction(F, midpoint(B, F)) - 2 * direction(C, midpoint(B, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(B, F), B, midpoint(B, F) we get 180 == 2 * direction(D, midpoint(B, F)) - 2 * direction(B, midpoint(B, F)) mod 360
By perpendicular_direction_conditions_v0_r on B, F, D, midpoint(B, F) we get 180 == 2 * direction(B, F) - 2 * direction(D, midpoint(B, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(B, F), midpoint(B, F), B we get 180 == 2 * direction(D, midpoint(B, F)) - 2 * direction(midpoint(B, F), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), E, B, midpoint(B, F) we get 180 == 2 * direction(midpoint(B, F), E) - 2 * direction(B, midpoint(B, F)) mod 360
By perpendicular_direction_conditions_v0_r on B, F, midpoint(B, F), D we get 180 == 2 * direction(B, F) - 2 * direction(midpoint(B, F), D) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(B, F), F, B we get 180 == 2 * direction(C, midpoint(B, F)) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(B, F), F, B we get 180 == 2 * direction(E, midpoint(B, F)) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(B, F), F, midpoint(B, F) we get 180 == 2 * direction(E, midpoint(B, F)) - 2 * direction(F, midpoint(B, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), E, F, B we get 180 == 2 * direction(midpoint(B, F), E) - 2 * direction(F, B) mod 360
By in_imply_collinear on C, midpoint(B, F), E we get collinear(C, E, midpoint(B, F))
By perpendicular_direction_conditions_v0_r on F, midpoint(B, F), midpoint(B, F), E we get 180 == 2 * direction(F, midpoint(B, F)) - 2 * direction(midpoint(B, F), E) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(B, F), midpoint(B, F), F we get 180 == 2 * direction(D, midpoint(B, F)) - 2 * direction(midpoint(B, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), E, midpoint(B, F), B we get 180 == 2 * direction(midpoint(B, F), E) - 2 * direction(midpoint(B, F), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), C, B, F we get 180 == 2 * direction(midpoint(B, F), C) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(B, F), midpoint(B, F), B we get 180 == 2 * direction(C, midpoint(B, F)) - 2 * direction(midpoint(B, F), B) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(B, F), B, F we get 180 == 2 * direction(E, midpoint(B, F)) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), E, F, midpoint(B, F) we get 180 == 2 * direction(midpoint(B, F), E) - 2 * direction(F, midpoint(B, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), D, midpoint(B, F), F we get 180 == 2 * direction(midpoint(B, F), D) - 2 * direction(midpoint(B, F), F) mod 360
By perpendicular_direction_conditions_v0_r on F, B, E, midpoint(B, F) we get 180 == 2 * direction(F, B) - 2 * direction(E, midpoint(B, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), D, F, midpoint(B, F) we get 180 == 2 * direction(midpoint(B, F), D) - 2 * direction(F, midpoint(B, F)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(B, F), midpoint(B, F), C we get 180 == 2 * direction(F, midpoint(B, F)) - 2 * direction(midpoint(B, F), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), F, D, midpoint(B, F) we get 180 == 2 * direction(midpoint(B, F), F) - 2 * direction(D, midpoint(B, F)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(B, F), E, midpoint(B, F) we get 180 == 2 * direction(F, midpoint(B, F)) - 2 * direction(E, midpoint(B, F)) mod 360
By perpendicular_direction_conditions_v0_r on F, B, midpoint(B, F), E we get 180 == 2 * direction(F, B) - 2 * direction(midpoint(B, F), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), C, F, midpoint(B, F) we get 180 == 2 * direction(midpoint(B, F), C) - 2 * direction(F, midpoint(B, F)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(B, F), midpoint(B, F), D we get 180 == 2 * direction(F, midpoint(B, F)) - 2 * direction(midpoint(B, F), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), F, midpoint(B, F), D we get 180 == 2 * direction(midpoint(B, F), F) - 2 * direction(midpoint(B, F), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, F), D, F, B we get 180 == 2 * direction(midpoint(B, F), D) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(B, F), midpoint(B, F), F we get 180 == 2 * direction(C, midpoint(B, F)) - 2 * direction(midpoint(B, F), F) mod 360
By probably_between_and_collinear_implies_between on E, D, C we get between(C, D, E)
By collinear_definition on C, D, E we get D in Line(C, E), E in Line(C, D), Line(C, D) == Line(C, E), 0 == 2 * angle(D, C, E) mod 360
By reverse_direction on B, midpoint(B, F) we get 180 == direction(B, midpoint(B, F)) - direction(midpoint(B, F), B) mod 360
By reverse_direction on midpoint(B, F), B we get 180 == direction(midpoint(B, F), B) - direction(B, midpoint(B, F)) mod 360
By collinear_definition on D, C, E we get C in Line(D, E), E in Line(C, D), Line(C, D) == Line(D, E), 0 == 2 * angle(C, D, E) mod 360
By aa_anti_similarity on E, C, G, E, C, H we get anti_similar_triangles(C, E, G, C, E, H)
By collinear_definition on C, E, D we get E in Line(C, D), D in Line(C, E), Line(C, D) == Line(C, E), 0 == 2 * angle(E, C, D) mod 360
By asa_anti_congruence on E, B, H, E, F, G we get anti_congruent_triangles(B, E, H, F, E, G)
By asa_congruence on A, E, G, B, E, H we get congruent_triangles(A, E, G, B, E, H)
By congruence_from_similar_triangles on E, A, G, E, B, H we get congruent_triangles(A, E, G, B, E, H)
By aa_anti_similarity on E, C, H, E, C, G we get anti_similar_triangles(C, E, G, C, E, H)
By congruence_from_similar_triangles on B, E, H, A, E, G we get congruent_triangles(A, E, G, B, E, H)
By asa_congruence on E, B, H, E, A, G we get congruent_triangles(A, E, G, B, E, H)
By asa_anti_congruence on E, F, G, E, B, H we get anti_congruent_triangles(B, E, H, F, E, G)
By asa_congruence on B, E, H, A, E, G we get congruent_triangles(A, E, G, B, E, H)
By anti_congruence_from_anti_similar_triangles on E, F, G, E, B, H we get anti_congruent_triangles(B, E, H, F, E, G)
By aa_anti_similarity on E, G, C, E, H, C we get anti_similar_triangles(C, E, G, C, E, H)
By collinear_definition on E, C, D we get C in Line(D, E), D in Line(C, E), Line(C, E) == Line(D, E), 0 == 2 * angle(C, E, D) mod 360
By reverse_direction on F, midpoint(B, F) we get 180 == direction(F, midpoint(B, F)) - direction(midpoint(B, F), F) mod 360
By congruence_from_similar_triangles on E, B, H, E, A, G we get congruent_triangles(A, E, G, B, E, H)
By congruence_from_similar_triangles on A, E, G, B, E, H we get congruent_triangles(A, E, G, B, E, H)
By collinear_definition on E, D, C we get D in Line(C, E), C in Line(D, E), Line(C, E) == Line(D, E), 0 == 2 * angle(D, E, C) mod 360
By asa_anti_congruence on B, E, H, F, E, G we get anti_congruent_triangles(B, E, H, F, E, G)
By collinear_definition on D, E, C we get E in Line(C, D), C in Line(D, E), Line(C, D) == Line(D, E), 0 == 2 * angle(E, D, C) mod 360
By anti_congruence_from_anti_similar_triangles on E, B, H, E, F, G we get anti_congruent_triangles(B, E, H, F, E, G)
By anti_congruence_from_anti_similar_triangles on B, E, H, F, E, G we get anti_congruent_triangles(B, E, H, F, E, G)
By aa_anti_similarity on E, H, C, E, G, C we get anti_similar_triangles(C, E, G, C, E, H)
By asa_congruence on E, A, G, E, B, H we get congruent_triangles(A, E, G, B, E, H)
By anti_congruence_from_anti_similar_triangles on F, E, G, B, E, H we get anti_congruent_triangles(B, E, H, F, E, G)
By asa_anti_congruence on F, E, G, B, E, H we get anti_congruent_triangles(B, E, H, F, E, G)
By reverse_direction on midpoint(B, F), F we get 180 == direction(midpoint(B, F), F) - direction(F, midpoint(B, F)) mod 360
By concyclic_definition_0 on G, E, C, H we get H in Circle(C, E, G)
By similar_triangle_basic_properties on E, B, H, E, A, G we get angle(E, A, G) == angle(E, B, H) mod 360, angle(A, G, E) == angle(B, H, E) mod 360, angle(G, E, A) == angle(H, E, B) mod 360, log(distance(A, E)) + log(distance(B, H)) == log(distance(B, E)) + log(distance(A, G)), log(distance(A, G)) + log(distance(E, H)) == log(distance(B, H)) + log(distance(E, G)), log(distance(E, G)) + log(distance(B, E)) == log(distance(E, H)) + log(distance(A, E))
By collinear_definition on A, B, midpoint(A, B) we get B in Line(A, midpoint(A, B)), midpoint(A, B) in Line(A, B), Line(A, B) == Line(A, midpoint(A, B)), 0 == 2 * angle(B, A, midpoint(A, B)) mod 360
By internal_angle_bisector_definition_v0 on H, midpoint(B, F), G, C we get angle(H, C, midpoint(B, F)) == angle(midpoint(B, F), C, G) mod 360
By internal_angle_bisector_definition_v0 on H, midpoint(B, F), A, C we get angle(H, C, midpoint(B, F)) == angle(midpoint(B, F), C, A) mod 360
By internal_angle_bisector_definition_v0 on F, midpoint(B, F), H, C we get angle(F, C, midpoint(B, F)) == angle(midpoint(B, F), C, H) mod 360
By concyclic_definition_0 on H, C, E, G we get G in Circle(C, E, H)
By internal_angle_bisector_definition_v0 on B, midpoint(B, F), F, C we get angle(B, C, midpoint(B, F)) == angle(midpoint(B, F), C, F) mod 360
By concyclic_definition_0 on H, E, G, C we get C in Circle(E, G, H)
By anti_similar_triangle_basic_properties on B, H, E, F, G, E we get angle(B, H, E) == 0 - angle(F, G, E) mod 360, angle(H, E, B) == 0 - angle(G, E, F) mod 360, angle(E, B, H) == 0 - angle(E, F, G) mod 360, log(distance(B, H)) + log(distance(E, G)) == log(distance(F, G)) + log(distance(E, H)), log(distance(E, G)) + log(distance(B, E)) == log(distance(E, H)) + log(distance(E, F)), log(distance(B, E)) + log(distance(F, G)) == log(distance(E, F)) + log(distance(B, H))
By internal_angle_bisector_definition_v0 on G, midpoint(B, F), B, C we get angle(G, C, midpoint(B, F)) == angle(midpoint(B, F), C, B) mod 360
By internal_angle_bisector_definition_v0 on B, midpoint(B, F), A, C we get angle(B, C, midpoint(B, F)) == angle(midpoint(B, F), C, A) mod 360
By similar_triangle_basic_properties on H, B, E, G, A, E we get angle(G, A, E) == angle(H, B, E) mod 360, angle(A, E, G) == angle(B, E, H) mod 360, angle(E, G, A) == angle(E, H, B) mod 360, log(distance(A, G)) + log(distance(B, E)) == log(distance(B, H)) + log(distance(A, E)), log(distance(A, E)) + log(distance(E, H)) == log(distance(B, E)) + log(distance(E, G)), log(distance(E, G)) + log(distance(B, H)) == log(distance(E, H)) + log(distance(A, G))
By concyclic_definition_0 on C, H, G, E we get E in Circle(C, G, H)
By collinear_definition on C, D, midpoint(B, F) we get D in Line(C, midpoint(B, F)), midpoint(B, F) in Line(C, D), Line(C, D) == Line(C, midpoint(B, F)), 0 == 2 * angle(D, C, midpoint(B, F)) mod 360
By perpendicular_bisector_properties on A, B we get perpendicular(Line(A, B), perpendicular_bisector(A, B)), midpoint(A, B) == line_intersection(Line(A, B), perpendicular_bisector(A, B))
By collinear_definition on E, D, midpoint(B, F) we get D in Line(E, midpoint(B, F)), midpoint(B, F) in Line(D, E), Line(D, E) == Line(E, midpoint(B, F)), 0 == 2 * angle(D, E, midpoint(B, F)) mod 360
By anti_similar_triangle_basic_properties on G, F, E, H, B, E we get angle(G, F, E) == 0 - angle(H, B, E) mod 360, angle(F, E, G) == 0 - angle(B, E, H) mod 360, angle(E, G, F) == 0 - angle(E, H, B) mod 360, log(distance(B, H)) + log(distance(E, F)) == log(distance(F, G)) + log(distance(B, E)), log(distance(B, E)) + log(distance(E, G)) == log(distance(E, F)) + log(distance(E, H)), log(distance(E, G)) + log(distance(B, H)) == log(distance(E, H)) + log(distance(F, G))
By collinear_definition on A, midpoint(A, B), B we get midpoint(A, B) in Line(A, B), B in Line(A, midpoint(A, B)), Line(A, B) == Line(A, midpoint(A, B)), 0 == 2 * angle(midpoint(A, B), A, B) mod 360
By perpendicular_angle_conditions_v0 on E, midpoint(B, F), B we get angle(E, midpoint(B, F), B) == orientation(B, E, midpoint(B, F)) mod 360
By log_of_2_times_distance on A, B, midpoint(A, B), A we get log(distance(A, B)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(A, midpoint(A, B)))
By collinear_definition on C, midpoint(B, F), D we get midpoint(B, F) in Line(C, D), D in Line(C, midpoint(B, F)), Line(C, D) == Line(C, midpoint(B, F)), 0 == 2 * angle(midpoint(B, F), C, D) mod 360
By internal_angle_bisector_definition_v0_r on B, midpoint(B, F), B, F we get internal_angle_bisector(B, F, B) == Line(F, midpoint(B, F))
By internal_angle_bisector_definition_v0 on F, midpoint(B, F), B, D we get angle(F, D, midpoint(B, F)) == angle(midpoint(B, F), D, B) mod 360
By internal_angle_bisector_definition_v0 on G, midpoint(B, F), H, C we get angle(G, C, midpoint(B, F)) == angle(midpoint(B, F), C, H) mod 360
By perpendicular_angle_conditions_v0 on D, midpoint(B, F), B we get angle(D, midpoint(B, F), B) == orientation(B, D, midpoint(B, F)) mod 360
By internal_angle_bisector_definition_v0 on F, midpoint(B, F), B, C we get angle(F, C, midpoint(B, F)) == angle(midpoint(B, F), C, B) mod 360
By perpendicular_angle_conditions_v0 on C, midpoint(B, F), B we get angle(C, midpoint(B, F), B) == orientation(B, C, midpoint(B, F)) mod 360
By internal_angle_bisector_definition_v0 on B, midpoint(B, F), F, E we get angle(B, E, midpoint(B, F)) == angle(midpoint(B, F), E, F) mod 360
By collinear_definition on D, midpoint(B, F), E we get midpoint(B, F) in Line(D, E), E in Line(D, midpoint(B, F)), Line(D, E) == Line(D, midpoint(B, F)), 0 == 2 * angle(midpoint(B, F), D, E) mod 360
By perpendicular_angle_conditions_v0 on D, midpoint(B, F), F we get angle(D, midpoint(B, F), F) == orientation(D, midpoint(B, F), F) mod 360
By internal_angle_bisector_definition_v0 on B, midpoint(B, F), F, D we get angle(B, D, midpoint(B, F)) == angle(midpoint(B, F), D, F) mod 360
By internal_angle_bisector_definition_v0 on A, midpoint(B, F), H, C we get angle(A, C, midpoint(B, F)) == angle(midpoint(B, F), C, H) mod 360
By perpendicular_angle_conditions_v0 on E, midpoint(B, F), F we get angle(E, midpoint(B, F), F) == orientation(E, midpoint(B, F), F) mod 360
By perpendicular_angle_conditions_v0 on F, midpoint(B, F), C we get angle(F, midpoint(B, F), C) == orientation(C, F, midpoint(B, F)) mod 360
By internal_angle_bisector_definition_v0 on F, midpoint(B, F), B, E we get angle(F, E, midpoint(B, F)) == angle(midpoint(B, F), E, B) mod 360
By collinear_definition on D, midpoint(B, F), C we get midpoint(B, F) in Line(C, D), C in Line(D, midpoint(B, F)), Line(C, D) == Line(D, midpoint(B, F)), 0 == 2 * angle(midpoint(B, F), D, C) mod 360
By internal_angle_bisector_definition_v0 on B, midpoint(B, F), G, C we get angle(B, C, midpoint(B, F)) == angle(midpoint(B, F), C, G) mod 360
By internal_angle_bisector_definition_v0 on A, midpoint(B, F), B, C we get angle(A, C, midpoint(B, F)) == angle(midpoint(B, F), C, B) mod 360
By internal_angle_bisector_definition_v0_r on F, midpoint(B, F), F, B we get internal_angle_bisector(F, B, F) == Line(B, midpoint(B, F))
By perpendicular_angle_conditions_v0 on B, midpoint(B, F), D we get angle(B, midpoint(B, F), D) == orientation(B, midpoint(B, F), D) mod 360
By isosceles_triangle_midpoint on E, B, A we get midpoint(A, B) in median(E, A, B)
By internal_angle_bisector_definition_v0_r on midpoint(B, F), B, midpoint(B, F), F we get Line(B, F) == internal_angle_bisector(midpoint(B, F), F, midpoint(B, F))
By perpendicular_angle_conditions_v0 on C, midpoint(B, F), F we get angle(C, midpoint(B, F), F) == orientation(C, midpoint(B, F), F) mod 360
By internal_angle_bisector_definition_v0_r on F, B, F, midpoint(B, F) we get Line(B, midpoint(B, F)) == internal_angle_bisector(F, midpoint(B, F), F)
By perpendicular_angle_conditions_v0 on F, midpoint(B, F), D we get angle(F, midpoint(B, F), D) == orientation(D, F, midpoint(B, F)) mod 360
By log_of_2_times_distance on B, A, midpoint(A, B), B we get log(distance(A, B)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(B, midpoint(A, B)))
By internal_angle_bisector_definition_v0_r on midpoint(B, F), F, midpoint(B, F), B we get Line(B, F) == internal_angle_bisector(midpoint(B, F), B, midpoint(B, F))
By internal_angle_bisector_definition_v0_r on B, F, B, midpoint(B, F) we get Line(F, midpoint(B, F)) == internal_angle_bisector(B, midpoint(B, F), B)
By perpendicular_angle_conditions_v0 on B, midpoint(B, F), E we get angle(B, midpoint(B, F), E) == orientation(B, midpoint(B, F), E) mod 360
By collinear_definition on D, C, midpoint(B, F) we get C in Line(D, midpoint(B, F)), midpoint(B, F) in Line(C, D), Line(C, D) == Line(D, midpoint(B, F)), 0 == 2 * angle(C, D, midpoint(B, F)) mod 360
By perpendicular_angle_conditions_v0 on F, midpoint(B, F), E we get angle(F, midpoint(B, F), E) == orientation(E, F, midpoint(B, F)) mod 360
By internal_angle_bisector_definition_v0 on H, midpoint(B, F), F, C we get angle(H, C, midpoint(B, F)) == angle(midpoint(B, F), C, F) mod 360
By collinear_definition on D, E, midpoint(B, F) we get E in Line(D, midpoint(B, F)), midpoint(B, F) in Line(D, E), Line(D, E) == Line(D, midpoint(B, F)), 0 == 2 * angle(E, D, midpoint(B, F)) mod 360
By collinear_definition on E, midpoint(B, F), D we get midpoint(B, F) in Line(D, E), D in Line(E, midpoint(B, F)), Line(D, E) == Line(E, midpoint(B, F)), 0 == 2 * angle(midpoint(B, F), E, D) mod 360
By collinear_definition on B, A, midpoint(A, B) we get A in Line(B, midpoint(A, B)), midpoint(A, B) in Line(A, B), Line(A, B) == Line(B, midpoint(A, B)), 0 == 2 * angle(A, B, midpoint(A, B)) mod 360
By perpendicular_angle_conditions_v0 on B, midpoint(B, F), C we get angle(B, midpoint(B, F), C) == orientation(B, midpoint(B, F), C) mod 360
By collinear_definition on B, midpoint(A, B), A we get midpoint(A, B) in Line(A, B), A in Line(B, midpoint(A, B)), Line(A, B) == Line(B, midpoint(A, B)), 0 == 2 * angle(midpoint(A, B), B, A) mod 360
By perpendicular_lines_draw_intersection on Line(A, B), perpendicular_bisector(A, B) we get exists(line_intersection(Line(A, B), perpendicular_bisector(A, B)))
By altitude_definition on E, midpoint(B, F), F, Line(C, D) we get Line(C, D) == altitude(E, F, midpoint(B, F))
By altitude_definition on E, A, B, perpendicular_bisector(A, B) we get altitude(E, A, B) == perpendicular_bisector(A, B)
By concyclic_definition_1 on G, C, E, H we get Circle(C, E, G) == Circle(C, E, H)
By altitude_definition on F, C, E, Line(B, F) we get Line(B, F) == altitude(F, C, E)
By concyclic_definition_1 on E, G, H, C we get Circle(C, G, H) == Circle(E, G, H)
By concyclic_definition_1 on G, H, E, C we get Circle(C, E, H) == Circle(E, G, H)
By concyclic_definition_1 on H, C, G, E we get Circle(C, E, G) == Circle(C, G, H)
By altitude_definition on B, midpoint(B, F), C, Line(B, F) we get Line(B, F) == altitude(B, C, midpoint(B, F))
By concyclic_definition_1 on E, C, H, G we get Circle(C, E, H) == Circle(C, G, H)
By collinear_definition on midpoint(A, B), B, A we get B in Line(A, midpoint(A, B)), A in Line(B, midpoint(A, B)), Line(A, midpoint(A, B)) == Line(B, midpoint(A, B)), 0 == 2 * angle(B, midpoint(A, B), A) mod 360
By altitude_definition on B, C, E, Line(B, F) we get Line(B, F) == altitude(B, C, E)
By altitude_definition on B, midpoint(B, F), D, Line(B, F) we get Line(B, F) == altitude(B, D, midpoint(B, F))
By altitude_definition on D, midpoint(B, F), F, Line(C, D) we get Line(C, D) == altitude(D, F, midpoint(B, F))
By collinear_definition on midpoint(A, B), A, B we get A in Line(B, midpoint(A, B)), B in Line(A, midpoint(A, B)), Line(A, midpoint(A, B)) == Line(B, midpoint(A, B)), 0 == 2 * angle(A, midpoint(A, B), B) mod 360
By collinear_definition on midpoint(B, F), D, C we get D in Line(C, midpoint(B, F)), C in Line(D, midpoint(B, F)), Line(C, midpoint(B, F)) == Line(D, midpoint(B, F)), 0 == 2 * angle(D, midpoint(B, F), C) mod 360
By collinear_definition on midpoint(B, F), D, E we get D in Line(E, midpoint(B, F)), E in Line(D, midpoint(B, F)), Line(D, midpoint(B, F)) == Line(E, midpoint(B, F)), 0 == 2 * angle(D, midpoint(B, F), E) mod 360
By altitude_definition on C, F, midpoint(B, F), Line(C, D) we get Line(C, D) == altitude(C, F, midpoint(B, F))
By altitude_definition on C, B, midpoint(B, F), Line(C, D) we get Line(C, D) == altitude(C, B, midpoint(B, F))
By concyclic_definition_1 on C, E, G, H we get Circle(C, E, G) == Circle(E, G, H)
By altitude_definition on D, B, midpoint(B, F), Line(C, D) we get Line(C, D) == altitude(D, B, midpoint(B, F))
By altitude_definition on E, midpoint(B, F), B, Line(C, D) we get Line(C, D) == altitude(E, B, midpoint(B, F))
By altitude_definition on F, D, midpoint(B, F), Line(B, F) we get Line(B, F) == altitude(F, D, midpoint(B, F))
By altitude_definition on F, C, midpoint(B, F), Line(B, F) we get Line(B, F) == altitude(F, C, midpoint(B, F))
By altitude_definition on F, midpoint(B, F), E, Line(B, F) we get Line(B, F) == altitude(F, E, midpoint(B, F))
By altitude_definition on B, midpoint(B, F), E, Line(B, F) we get Line(B, F) == altitude(B, E, midpoint(B, F))
By collinear_definition on midpoint(B, F), C, D we get C in Line(D, midpoint(B, F)), D in Line(C, midpoint(B, F)), Line(C, midpoint(B, F)) == Line(D, midpoint(B, F)), 0 == 2 * angle(C, midpoint(B, F), D) mod 360
By collinear_definition on midpoint(B, F), E, D we get E in Line(D, midpoint(B, F)), D in Line(E, midpoint(B, F)), Line(D, midpoint(B, F)) == Line(E, midpoint(B, F)), 0 == 2 * angle(E, midpoint(B, F), D) mod 360
By power_of_a_point_definition on D, E, C, Circle(A, B, C) we get log(distance(D, E)) + log(distance(C, D)) == log(power_of_a_point(D, Circle(A, B, C)))
By isosceles_triangle_altitude_v3 on E, A, B we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, E, B), perpendicular_line(E, Line(A, B)))
By isosceles_triangle_altitude_v3 on E, B, A we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, E, B), perpendicular_line(E, Line(A, B)))
By power_of_a_point_definition on midpoint(A, B), B, A, Circle(A, B, C) we get log(power_of_a_point(midpoint(A, B), Circle(A, B, C))) == log(distance(B, midpoint(A, B))) + log(distance(A, midpoint(A, B)))
By between_implies_angles on A, midpoint(A, B), B we get 180 == angle(A, midpoint(A, B), B) mod 360, 0 == angle(midpoint(A, B), B, A) mod 360, 0 == angle(B, A, midpoint(A, B)) mod 360
By power_of_a_point_definition on midpoint(A, B), A, B, c we get log(power_of_a_point(midpoint(A, B), c)) == log(distance(A, midpoint(A, B))) + log(distance(B, midpoint(A, B)))
By between_implies_angles on B, midpoint(A, B), A we get 180 == angle(B, midpoint(A, B), A) mod 360, 0 == angle(midpoint(A, B), A, B) mod 360, 0 == angle(A, B, midpoint(A, B)) mod 360
By concurrent_sufficient_conditions on median(E, A, B), Line(E, G), Line(E, F) we get concurrent(Line(E, F), Line(E, G), median(E, A, B))
By concurrent_sufficient_conditions on median(E, A, B), Line(E, F), Line(E, G) we get concurrent(Line(E, F), Line(E, G), median(E, A, B))
By concurrent_sufficient_conditions on Line(E, G), median(E, A, B), Line(E, H) we get concurrent(Line(E, G), Line(E, H), median(E, A, B))
By concurrent_sufficient_conditions on Line(B, E), median(E, A, B), Line(A, E) we get concurrent(Line(A, E), Line(B, E), median(E, A, B))
By concurrent_sufficient_conditions on Line(E, G), Line(E, F), median(E, A, B) we get concurrent(Line(E, F), Line(E, G), median(E, A, B))
By concurrent_sufficient_conditions on Line(A, E), Line(E, H), median(E, A, B) we get concurrent(Line(A, E), Line(E, H), median(E, A, B))
By concurrent_sufficient_conditions on median(E, A, B), Line(E, G), Line(A, E) we get concurrent(Line(A, E), Line(E, G), median(E, A, B))
By concurrent_sufficient_conditions on median(E, A, B), Line(E, H), Line(E, G) we get concurrent(Line(E, G), Line(E, H), median(E, A, B))
By concurrent_sufficient_conditions on median(E, A, B), Line(A, E), Line(E, F) we get concurrent(Line(A, E), Line(E, F), median(E, A, B))
By concurrent_sufficient_conditions on Line(E, H), Line(E, F), median(E, A, B) we get concurrent(Line(E, F), Line(E, H), median(E, A, B))
By concurrent_sufficient_conditions on Line(E, G), median(E, A, B), Line(A, E) we get concurrent(Line(A, E), Line(E, G), median(E, A, B))
By concurrent_sufficient_conditions on Line(E, G), median(E, A, B), Line(C, D) we get concurrent(Line(C, D), Line(E, G), median(E, A, B))
By concurrent_sufficient_conditions on median(E, A, B), Line(B, E), Line(A, E) we get concurrent(Line(A, E), Line(B, E), median(E, A, B))
By concurrent_sufficient_conditions on median(E, A, B), Line(E, H), Line(E, F) we get concurrent(Line(E, F), Line(E, H), median(E, A, B))
By concurrent_sufficient_conditions on Line(A, E), median(E, A, B), Line(E, H) we get concurrent(Line(A, E), Line(E, H), median(E, A, B))
By concurrent_sufficient_conditions on Line(C, D), median(E, A, B), Line(B, E) we get concurrent(Line(B, E), Line(C, D), median(E, A, B))
By concurrent_sufficient_conditions on Line(C, D), Line(E, H), median(E, A, B) we get concurrent(Line(C, D), Line(E, H), median(E, A, B))
By concurrent_sufficient_conditions on Line(C, D), median(E, A, B), Line(E, G) we get concurrent(Line(C, D), Line(E, G), median(E, A, B))
By concurrent_sufficient_conditions on median(E, A, B), Line(E, F), Line(B, E) we get concurrent(Line(B, E), Line(E, F), median(E, A, B))
By concurrent_sufficient_conditions on median(E, A, B), Line(E, H), Line(C, D) we get concurrent(Line(C, D), Line(E, H), median(E, A, B))
By concurrent_sufficient_conditions on median(E, A, B), Line(E, G), Line(B, E) we get concurrent(Line(B, E), Line(E, G), median(E, A, B))
By concurrent_sufficient_conditions on median(E, A, B), Line(E, F), Line(C, D) we get concurrent(Line(C, D), Line(E, F), median(E, A, B))
By concurrent_sufficient_conditions on Line(E, F), median(E, A, B), Line(E, H) we get concurrent(Line(E, F), Line(E, H), median(E, A, B))
By concurrent_sufficient_conditions on Line(A, E), median(E, A, B), Line(E, G) we get concurrent(Line(A, E), Line(E, G), median(E, A, B))
By concurrent_sufficient_conditions on Line(B, E), median(E, A, B), Line(E, H) we get concurrent(Line(B, E), Line(E, H), median(E, A, B))
By concurrent_sufficient_conditions on Line(B, E), median(E, A, B), Line(E, F) we get concurrent(Line(B, E), Line(E, F), median(E, A, B))
By concurrent_sufficient_conditions on Line(E, G), Line(A, E), median(E, A, B) we get concurrent(Line(A, E), Line(E, G), median(E, A, B))
By concurrent_sufficient_conditions on Line(E, F), median(E, A, B), Line(E, G) we get concurrent(Line(E, F), Line(E, G), median(E, A, B))
By concurrent_sufficient_conditions on median(E, A, B), Line(E, H), Line(B, E) we get concurrent(Line(B, E), Line(E, H), median(E, A, B))
By concurrent_sufficient_conditions on Line(B, E), median(E, A, B), Line(C, D) we get concurrent(Line(B, E), Line(C, D), median(E, A, B))
By concurrent_sufficient_conditions on Line(C, D), median(E, A, B), Line(A, E) we get concurrent(Line(A, E), Line(C, D), median(E, A, B))
By concurrent_sufficient_conditions on median(E, A, B), Line(E, H), Line(A, E) we get concurrent(Line(A, E), Line(E, H), median(E, A, B))
By concurrent_sufficient_conditions on Line(A, E), Line(E, G), median(E, A, B) we get concurrent(Line(A, E), Line(E, G), median(E, A, B))
By concurrent_sufficient_conditions on median(E, A, B), Line(B, E), Line(C, D) we get concurrent(Line(B, E), Line(C, D), median(E, A, B))
By concurrent_sufficient_conditions on Line(E, H), median(E, A, B), Line(C, D) we get concurrent(Line(C, D), Line(E, H), median(E, A, B))
By concurrent_sufficient_conditions on Line(E, F), median(E, A, B), Line(A, E) we get concurrent(Line(A, E), Line(E, F), median(E, A, B))
By concurrent_sufficient_conditions on Line(E, G), Line(C, D), median(E, A, B) we get concurrent(Line(C, D), Line(E, G), median(E, A, B))
By concurrent_sufficient_conditions on median(E, A, B), Line(E, G), Line(C, D) we get concurrent(Line(C, D), Line(E, G), median(E, A, B))
By concurrent_sufficient_conditions on Line(E, F), Line(E, G), median(E, A, B) we get concurrent(Line(E, F), Line(E, G), median(E, A, B))
By concurrent_sufficient_conditions on median(E, A, B), Line(A, E), Line(C, D) we get concurrent(Line(A, E), Line(C, D), median(E, A, B))
By concurrent_sufficient_conditions on median(E, A, B), Line(B, E), Line(E, G) we get concurrent(Line(B, E), Line(E, G), median(E, A, B))
By concurrent_sufficient_conditions on Line(A, E), median(E, A, B), Line(E, F) we get concurrent(Line(A, E), Line(E, F), median(E, A, B))
By concurrent_sufficient_conditions on Line(E, F), Line(C, D), median(E, A, B) we get concurrent(Line(C, D), Line(E, F), median(E, A, B))
By concurrent_sufficient_conditions on median(E, A, B), Line(C, D), Line(E, G) we get concurrent(Line(C, D), Line(E, G), median(E, A, B))
By concurrent_sufficient_conditions on median(E, A, B), Line(C, D), Line(E, F) we get concurrent(Line(C, D), Line(E, F), median(E, A, B))
By concurrent_sufficient_conditions on Line(E, G), median(E, A, B), Line(B, E) we get concurrent(Line(B, E), Line(E, G), median(E, A, B))
By concurrent_sufficient_conditions on median(E, A, B), Line(C, D), Line(B, E) we get concurrent(Line(B, E), Line(C, D), median(E, A, B))
By concurrent_sufficient_conditions on Line(E, H), median(E, A, B), Line(E, F) we get concurrent(Line(E, F), Line(E, H), median(E, A, B))
By concurrent_sufficient_conditions on Line(E, H), median(E, A, B), Line(E, G) we get concurrent(Line(E, G), Line(E, H), median(E, A, B))
By concurrent_sufficient_conditions on Line(E, F), median(E, A, B), Line(B, E) we get concurrent(Line(B, E), Line(E, F), median(E, A, B))
By concurrent_sufficient_conditions on Line(B, E), Line(E, H), median(E, A, B) we get concurrent(Line(B, E), Line(E, H), median(E, A, B))
By concurrent_sufficient_conditions on Line(B, E), Line(E, G), median(E, A, B) we get concurrent(Line(B, E), Line(E, G), median(E, A, B))
By concurrent_sufficient_conditions on Line(A, E), Line(B, E), median(E, A, B) we get concurrent(Line(A, E), Line(B, E), median(E, A, B))
By concurrent_sufficient_conditions on Line(E, F), Line(E, H), median(E, A, B) we get concurrent(Line(E, F), Line(E, H), median(E, A, B))
By concurrent_sufficient_conditions on median(E, A, B), Line(E, F), Line(A, E) we get concurrent(Line(A, E), Line(E, F), median(E, A, B))
By concurrent_sufficient_conditions on Line(E, H), median(E, A, B), Line(B, E) we get concurrent(Line(B, E), Line(E, H), median(E, A, B))
By concurrent_sufficient_conditions on median(E, A, B), Line(C, D), Line(A, E) we get concurrent(Line(A, E), Line(C, D), median(E, A, B))
By concurrent_sufficient_conditions on median(E, A, B), Line(B, E), Line(E, F) we get concurrent(Line(B, E), Line(E, F), median(E, A, B))
By concurrent_sufficient_conditions on median(E, A, B), Line(A, E), Line(E, G) we get concurrent(Line(A, E), Line(E, G), median(E, A, B))
By concurrent_sufficient_conditions on Line(C, D), Line(A, E), median(E, A, B) we get concurrent(Line(A, E), Line(C, D), median(E, A, B))
By concurrent_sufficient_conditions on median(E, A, B), Line(A, E), Line(E, H) we get concurrent(Line(A, E), Line(E, H), median(E, A, B))
By concurrent_sufficient_conditions on Line(E, G), median(E, A, B), Line(E, F) we get concurrent(Line(E, F), Line(E, G), median(E, A, B))
By concurrent_sufficient_conditions on Line(B, E), Line(E, F), median(E, A, B) we get concurrent(Line(B, E), Line(E, F), median(E, A, B))
By concurrent_sufficient_conditions on Line(E, F), median(E, A, B), Line(C, D) we get concurrent(Line(C, D), Line(E, F), median(E, A, B))
By concurrent_sufficient_conditions on Line(C, D), Line(E, G), median(E, A, B) we get concurrent(Line(C, D), Line(E, G), median(E, A, B))
By concurrent_sufficient_conditions on median(E, A, B), Line(C, D), Line(E, H) we get concurrent(Line(C, D), Line(E, H), median(E, A, B))
By concurrent_sufficient_conditions on median(E, A, B), Line(E, G), Line(E, H) we get concurrent(Line(E, G), Line(E, H), median(E, A, B))
By concurrent_sufficient_conditions on Line(E, H), median(E, A, B), Line(A, E) we get concurrent(Line(A, E), Line(E, H), median(E, A, B))
By concurrent_sufficient_conditions on Line(E, G), Line(B, E), median(E, A, B) we get concurrent(Line(B, E), Line(E, G), median(E, A, B))
By concurrent_sufficient_conditions on Line(B, E), Line(C, D), median(E, A, B) we get concurrent(Line(B, E), Line(C, D), median(E, A, B))
By concurrent_sufficient_conditions on median(E, A, B), Line(B, E), Line(E, H) we get concurrent(Line(B, E), Line(E, H), median(E, A, B))
By concurrent_sufficient_conditions on Line(A, E), median(E, A, B), Line(C, D) we get concurrent(Line(A, E), Line(C, D), median(E, A, B))
By concurrent_sufficient_conditions on Line(E, H), Line(B, E), median(E, A, B) we get concurrent(Line(B, E), Line(E, H), median(E, A, B))
By concurrent_sufficient_conditions on Line(B, E), Line(A, E), median(E, A, B) we get concurrent(Line(A, E), Line(B, E), median(E, A, B))
By concurrent_sufficient_conditions on Line(E, H), Line(C, D), median(E, A, B) we get concurrent(Line(C, D), Line(E, H), median(E, A, B))
By concurrent_sufficient_conditions on Line(C, D), Line(E, F), median(E, A, B) we get concurrent(Line(C, D), Line(E, F), median(E, A, B))
By concurrent_sufficient_conditions on Line(E, F), Line(B, E), median(E, A, B) we get concurrent(Line(B, E), Line(E, F), median(E, A, B))
By concurrent_sufficient_conditions on Line(C, D), median(E, A, B), Line(E, F) we get concurrent(Line(C, D), Line(E, F), median(E, A, B))
By concurrent_sufficient_conditions on Line(E, G), Line(E, H), median(E, A, B) we get concurrent(Line(E, G), Line(E, H), median(E, A, B))
By concurrent_sufficient_conditions on Line(E, H), Line(E, G), median(E, A, B) we get concurrent(Line(E, G), Line(E, H), median(E, A, B))
By concurrent_sufficient_conditions on Line(C, D), Line(B, E), median(E, A, B) we get concurrent(Line(B, E), Line(C, D), median(E, A, B))
By concurrent_sufficient_conditions on Line(A, E), Line(E, F), median(E, A, B) we get concurrent(Line(A, E), Line(E, F), median(E, A, B))
By concurrent_sufficient_conditions on Line(A, E), median(E, A, B), Line(B, E) we get concurrent(Line(A, E), Line(B, E), median(E, A, B))
By concurrent_sufficient_conditions on median(E, A, B), Line(A, E), Line(B, E) we get concurrent(Line(A, E), Line(B, E), median(E, A, B))
By concurrent_sufficient_conditions on Line(B, E), median(E, A, B), Line(E, G) we get concurrent(Line(B, E), Line(E, G), median(E, A, B))
By concurrent_sufficient_conditions on Line(E, F), Line(A, E), median(E, A, B) we get concurrent(Line(A, E), Line(E, F), median(E, A, B))
By concurrent_sufficient_conditions on Line(C, D), median(E, A, B), Line(E, H) we get concurrent(Line(C, D), Line(E, H), median(E, A, B))
By concurrent_sufficient_conditions on median(E, A, B), Line(E, F), Line(E, H) we get concurrent(Line(E, F), Line(E, H), median(E, A, B))
By concurrent_sufficient_conditions on Line(E, H), Line(A, E), median(E, A, B) we get concurrent(Line(A, E), Line(E, H), median(E, A, B))
By concurrent_sufficient_conditions on Line(A, E), Line(C, D), median(E, A, B) we get concurrent(Line(A, E), Line(C, D), median(E, A, B))
By radical_axis_is_perpendicular_to_center_line on Line(A, B), Circle(A, B, C), c we get perpendicular(Line(A, B), Line(center(c), center(Circle(A, B, C))))
By angles_on_chord_v2 on H, G, C, E, Circle(C, E, G) we get angle(H, C, G) == angle(H, E, G) + 180 mod 360
By radical_axis_of_intersecting_circles_v0 on C, E, Circle(C, E, G), Circle(A, B, C) we get Line(C, E) == radical_axis(Circle(A, B, C), Circle(C, E, G))
By angles_on_chord_v3 on H, G, E, C, Circle(C, E, G) we get angle(H, E, G) == angle(H, C, G) + 180 mod 360
By angles_on_chord_v2 on G, H, E, C, Circle(C, E, G) we get angle(G, E, H) == angle(G, C, H) + 180 mod 360
By angles_on_chord_v3 on G, H, C, E, Circle(C, E, G) we get angle(G, C, H) == angle(G, E, H) + 180 mod 360
By line_intersection_definition on A, Line(A, B), Line(A, center(Circle(A, B, C))) we get A == line_intersection(Line(A, B), Line(A, center(Circle(A, B, C))))
By line_intersection_definition on E, Line(C, D), Line(E, center(Circle(A, B, C))) we get E == line_intersection(Line(C, D), Line(E, center(Circle(A, B, C))))
By line_intersection_definition on C, Line(C, center(Circle(A, B, C))), f we get C == line_intersection(f, Line(C, center(Circle(A, B, C))))
By line_intersection_definition on E, Line(E, F), Line(E, center(Circle(A, B, C))) we get E == line_intersection(Line(E, F), Line(E, center(Circle(A, B, C))))
By line_intersection_definition on B, i, Line(B, center(Circle(A, B, C))) we get B == line_intersection(i, Line(B, center(Circle(A, B, C))))
By line_intersection_definition on B, Line(B, F), Line(B, center(Circle(A, B, C))) we get B == line_intersection(Line(B, F), Line(B, center(Circle(A, B, C))))
By line_intersection_definition on center(Circle(A, B, C)), Line(C, center(Circle(A, B, C))), Line(A, center(Circle(A, B, C))) we get center(Circle(A, B, C)) == line_intersection(Line(A, center(Circle(A, B, C))), Line(C, center(Circle(A, B, C))))
By line_intersection_definition on center(Circle(A, B, C)), Line(E, center(Circle(A, B, C))), Line(C, center(Circle(A, B, C))) we get center(Circle(A, B, C)) == line_intersection(Line(C, center(Circle(A, B, C))), Line(E, center(Circle(A, B, C))))
By line_intersection_definition on C, Line(C, center(Circle(A, B, C))), g we get C == line_intersection(g, Line(C, center(Circle(A, B, C))))
By line_intersection_definition on center(Circle(A, B, C)), Line(C, center(Circle(A, B, C))), Line(B, center(Circle(A, B, C))) we get center(Circle(A, B, C)) == line_intersection(Line(B, center(Circle(A, B, C))), Line(C, center(Circle(A, B, C))))
By line_intersection_definition on E, Line(E, center(Circle(A, B, C))), Line(A, E) we get E == line_intersection(Line(A, E), Line(E, center(Circle(A, B, C))))
By line_intersection_definition on center(Circle(A, B, C)), Line(B, center(Circle(A, B, C))), Line(E, center(Circle(A, B, C))) we get center(Circle(A, B, C)) == line_intersection(Line(B, center(Circle(A, B, C))), Line(E, center(Circle(A, B, C))))
By line_intersection_definition on B, Line(A, B), Line(B, center(Circle(A, B, C))) we get B == line_intersection(Line(A, B), Line(B, center(Circle(A, B, C))))
By line_intersection_definition on A, Line(A, center(Circle(A, B, C))), h we get A == line_intersection(h, Line(A, center(Circle(A, B, C))))
By line_intersection_definition on E, Line(E, center(Circle(A, B, C))), Line(E, G) we get E == line_intersection(Line(E, G), Line(E, center(Circle(A, B, C))))
By line_intersection_definition on B, Line(B, center(Circle(A, B, C))), f we get B == line_intersection(f, Line(B, center(Circle(A, B, C))))
By line_intersection_definition on C, Line(C, center(Circle(A, B, C))), Line(C, D) we get C == line_intersection(Line(C, D), Line(C, center(Circle(A, B, C))))
By line_intersection_definition on center(Circle(A, B, C)), Line(A, center(Circle(A, B, C))), Line(E, center(Circle(A, B, C))) we get center(Circle(A, B, C)) == line_intersection(Line(A, center(Circle(A, B, C))), Line(E, center(Circle(A, B, C))))
By line_intersection_definition on B, Line(B, E), Line(B, center(Circle(A, B, C))) we get B == line_intersection(Line(B, E), Line(B, center(Circle(A, B, C))))
By line_intersection_definition on center(Circle(A, B, C)), Line(B, center(Circle(A, B, C))), Line(A, center(Circle(A, B, C))) we get center(Circle(A, B, C)) == line_intersection(Line(A, center(Circle(A, B, C))), Line(B, center(Circle(A, B, C))))
By line_intersection_definition on A, Line(A, E), Line(A, center(Circle(A, B, C))) we get A == line_intersection(Line(A, E), Line(A, center(Circle(A, B, C))))
By line_intersection_definition on E, Line(E, center(Circle(A, B, C))), Line(E, H) we get E == line_intersection(Line(E, H), Line(E, center(Circle(A, B, C))))
By line_intersection_definition on E, Line(E, center(Circle(A, B, C))), Line(B, E) we get E == line_intersection(Line(B, E), Line(E, center(Circle(A, B, C))))
By line_intersection_definition on A, g, Line(A, center(Circle(A, B, C))) we get A == line_intersection(g, Line(A, center(Circle(A, B, C))))
By perpendicular_line_definition on midpoint(A, B), Line(A, B), median(E, A, B) we get Line(A, B) == perpendicular_line(midpoint(A, B), median(E, A, B))
By angles_on_chord_v1 on E, H, G, C, Circle(C, E, G) we get angle(E, C, H) == angle(E, G, H) mod 360
By angles_on_chord_v0 on C, H, G, E, Circle(C, E, G) we get angle(C, E, H) == angle(C, G, H) mod 360
By angles_on_chord_v1 on H, C, G, E, Circle(C, E, G) we get angle(H, E, C) == angle(H, G, C) mod 360
By angles_on_chord_v0 on H, E, G, C, Circle(C, E, G) we get angle(H, C, E) == angle(H, G, E) mod 360
By angles_on_chord_v1 on C, G, H, E, Circle(C, E, G) we get angle(C, E, G) == angle(C, H, G) mod 360
By angles_on_chord_v0 on G, C, E, H, Circle(C, E, G) we get angle(G, E, C) == angle(G, H, C) mod 360
By angles_on_chord_v0 on E, G, H, C, Circle(C, E, G) we get angle(E, C, G) == angle(E, H, G) mod 360
By angles_on_chord_v1 on G, E, C, H, Circle(C, E, G) we get angle(G, C, E) == angle(G, H, E) mod 360
By projection_definition on B, midpoint(A, B), median(E, A, B) we get midpoint(A, B) == projection(B, median(E, A, B))
By projection_definition on E, midpoint(A, B), Line(A, B) we get midpoint(A, B) == projection(E, Line(A, B))
By between_imply_not_between on C, D, E we get collinear_and_not_between(D, C, E)
By projection_definition on A, midpoint(A, B), median(E, A, B) we get midpoint(A, B) == projection(A, median(E, A, B))
By between_imply_not_between on E, D, C we get collinear_and_not_between(C, E, D)
By perpendicular_direction_conditions_v0_r on A, B, midpoint(A, B), E we get 180 == 2 * direction(A, B) - 2 * direction(midpoint(A, B), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), B, E, midpoint(A, B) we get 180 == 2 * direction(midpoint(A, B), B) - 2 * direction(E, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, B), E, midpoint(A, B) we get 180 == 2 * direction(A, midpoint(A, B)) - 2 * direction(E, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(A, B), E, midpoint(A, B) we get 180 == 2 * direction(B, midpoint(A, B)) - 2 * direction(E, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, B), B, A we get 180 == 2 * direction(E, midpoint(A, B)) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), E, B, midpoint(A, B) we get 180 == 2 * direction(midpoint(A, B), E) - 2 * direction(B, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), A, E, midpoint(A, B) we get 180 == 2 * direction(midpoint(A, B), A) - 2 * direction(E, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, B), midpoint(A, B), B we get 180 == 2 * direction(E, midpoint(A, B)) - 2 * direction(midpoint(A, B), B) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, B), A, midpoint(A, B) we get 180 == 2 * direction(E, midpoint(A, B)) - 2 * direction(A, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), E, B, A we get 180 == 2 * direction(midpoint(A, B), E) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), E, midpoint(A, B), A we get 180 == 2 * direction(midpoint(A, B), E) - 2 * direction(midpoint(A, B), A) mod 360
By perpendicular_direction_conditions_v0_r on B, A, midpoint(A, B), E we get 180 == 2 * direction(B, A) - 2 * direction(midpoint(A, B), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), B, midpoint(A, B), E we get 180 == 2 * direction(midpoint(A, B), B) - 2 * direction(midpoint(A, B), E) mod 360
By perpendicular_direction_conditions_v0_r on A, B, E, midpoint(A, B) we get 180 == 2 * direction(A, B) - 2 * direction(E, midpoint(A, B)) mod 360
By orthocenter_concurrency on F, E, C we get orthocenter(C, E, F) in altitude(F, C, E), orthocenter(C, E, F) in altitude(E, C, F), orthocenter(C, E, F) in altitude(C, E, F)
By perpendicular_direction_conditions_v0_r on A, midpoint(A, B), midpoint(A, B), E we get 180 == 2 * direction(A, midpoint(A, B)) - 2 * direction(midpoint(A, B), E) mod 360
By orthocenter_concurrency on E, B, C we get orthocenter(B, C, E) in altitude(E, B, C), orthocenter(B, C, E) in altitude(B, C, E), orthocenter(B, C, E) in altitude(C, B, E)
By perpendicular_direction_conditions_v0_r on midpoint(A, B), A, midpoint(A, B), E we get 180 == 2 * direction(midpoint(A, B), A) - 2 * direction(midpoint(A, B), E) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, B), A, B we get 180 == 2 * direction(E, midpoint(A, B)) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on B, A, E, midpoint(A, B) we get 180 == 2 * direction(B, A) - 2 * direction(E, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(A, B), midpoint(A, B), E we get 180 == 2 * direction(B, midpoint(A, B)) - 2 * direction(midpoint(A, B), E) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, B), midpoint(A, B), A we get 180 == 2 * direction(E, midpoint(A, B)) - 2 * direction(midpoint(A, B), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), E, A, midpoint(A, B) we get 180 == 2 * direction(midpoint(A, B), E) - 2 * direction(A, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), E, midpoint(A, B), B we get 180 == 2 * direction(midpoint(A, B), E) - 2 * direction(midpoint(A, B), B) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(A, B), B, midpoint(A, B) we get 180 == 2 * direction(E, midpoint(A, B)) - 2 * direction(B, midpoint(A, B)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, B), E, A, B we get 180 == 2 * direction(midpoint(A, B), E) - 2 * direction(A, B) mod 360
By aa_anti_similarity on F, midpoint(B, F), C, B, midpoint(B, F), C we get anti_similar_triangles(B, C, midpoint(B, F), F, C, midpoint(B, F))
By anti_similar_triangle_basic_properties on E, G, C, E, H, C we get angle(E, G, C) == 0 - angle(E, H, C) mod 360, angle(G, C, E) == 0 - angle(H, C, E) mod 360, angle(C, E, G) == 0 - angle(C, E, H) mod 360, log(distance(E, G)) + log(distance(C, H)) == log(distance(E, H)) + log(distance(C, G)), log(distance(C, G)) + log(distance(C, E)) == log(distance(C, H)) + log(distance(C, E)), log(distance(C, E)) + log(distance(E, G)) == log(distance(C, E)) + log(distance(E, H))
By perpendicular_bisector_sufficient_conditions on A, B, center(Circle(A, B, C)), E we get perpendicular_bisector(A, B) == Line(E, center(Circle(A, B, C)))
By reverse_direction on B, midpoint(A, B) we get 180 == direction(B, midpoint(A, B)) - direction(midpoint(A, B), B) mod 360
By reverse_direction on E, midpoint(B, F) we get 180 == direction(E, midpoint(B, F)) - direction(midpoint(B, F), E) mod 360
By reverse_direction on A, midpoint(A, B) we get 180 == direction(A, midpoint(A, B)) - direction(midpoint(A, B), A) mod 360
By reverse_direction on C, midpoint(B, F) we get 180 == direction(C, midpoint(B, F)) - direction(midpoint(B, F), C) mod 360
By reverse_direction on midpoint(A, B), B we get 180 == direction(midpoint(A, B), B) - direction(B, midpoint(A, B)) mod 360
By anti_similar_triangle_basic_properties on E, C, G, E, C, H we get angle(E, C, G) == 0 - angle(E, C, H) mod 360, angle(C, G, E) == 0 - angle(C, H, E) mod 360, angle(G, E, C) == 0 - angle(H, E, C) mod 360, log(distance(C, E)) + log(distance(C, G)) == log(distance(C, E)) + log(distance(C, H)), log(distance(C, G)) + log(distance(E, H)) == log(distance(C, H)) + log(distance(E, G)), log(distance(E, G)) + log(distance(C, E)) == log(distance(E, H)) + log(distance(C, E))
By aa_anti_similarity on B, E, midpoint(B, F), F, E, midpoint(B, F) we get anti_similar_triangles(B, E, midpoint(B, F), F, E, midpoint(B, F))
By reverse_direction on midpoint(A, B), A we get 180 == direction(midpoint(A, B), A) - direction(A, midpoint(A, B)) mod 360
By aa_anti_similarity on F, E, midpoint(B, F), B, E, midpoint(B, F) we get anti_similar_triangles(B, E, midpoint(B, F), F, E, midpoint(B, F))
By collinear_definition on E, C, midpoint(B, F) we get C in Line(E, midpoint(B, F)), midpoint(B, F) in Line(C, E), Line(C, E) == Line(E, midpoint(B, F)), 0 == 2 * angle(C, E, midpoint(B, F)) mod 360
By reverse_direction on midpoint(B, F), D we get 180 == direction(midpoint(B, F), D) - direction(D, midpoint(B, F)) mod 360
By aa_anti_similarity on F, midpoint(B, F), D, B, midpoint(B, F), D we get anti_similar_triangles(B, D, midpoint(B, F), F, D, midpoint(B, F))
By collinear_definition on E, midpoint(B, F), C we get midpoint(B, F) in Line(C, E), C in Line(E, midpoint(B, F)), Line(C, E) == Line(E, midpoint(B, F)), 0 == 2 * angle(midpoint(B, F), E, C) mod 360
By aa_anti_similarity on F, D, midpoint(B, F), B, D, midpoint(B, F) we get anti_similar_triangles(B, D, midpoint(B, F), F, D, midpoint(B, F))
By aa_anti_similarity on F, C, midpoint(B, F), B, C, midpoint(B, F) we get anti_similar_triangles(B, C, midpoint(B, F), F, C, midpoint(B, F))
By collinear_definition on midpoint(B, F), C, E we get C in Line(E, midpoint(B, F)), E in Line(C, midpoint(B, F)), Line(C, midpoint(B, F)) == Line(E, midpoint(B, F)), 0 == 2 * angle(C, midpoint(B, F), E) mod 360
By collinear_definition on midpoint(B, F), E, C we get E in Line(C, midpoint(B, F)), C in Line(E, midpoint(B, F)), Line(C, midpoint(B, F)) == Line(E, midpoint(B, F)), 0 == 2 * angle(E, midpoint(B, F), C) mod 360
By reverse_direction on D, midpoint(B, F) we get 180 == direction(D, midpoint(B, F)) - direction(midpoint(B, F), D) mod 360
By collinear_definition on C, midpoint(B, F), E we get midpoint(B, F) in Line(C, E), E in Line(C, midpoint(B, F)), Line(C, E) == Line(C, midpoint(B, F)), 0 == 2 * angle(midpoint(B, F), C, E) mod 360
By collinear_definition on C, E, midpoint(B, F) we get E in Line(C, midpoint(B, F)), midpoint(B, F) in Line(C, E), Line(C, E) == Line(C, midpoint(B, F)), 0 == 2 * angle(E, C, midpoint(B, F)) mod 360
By aa_anti_similarity on B, midpoint(B, F), D, F, midpoint(B, F), D we get anti_similar_triangles(B, D, midpoint(B, F), F, D, midpoint(B, F))
By aa_anti_similarity on B, midpoint(B, F), C, F, midpoint(B, F), C we get anti_similar_triangles(B, C, midpoint(B, F), F, C, midpoint(B, F))
By aa_anti_similarity on B, midpoint(B, F), E, F, midpoint(B, F), E we get anti_similar_triangles(B, E, midpoint(B, F), F, E, midpoint(B, F))
By between_imply_segment_sum on C, D, E we get distance(C, E) == distance(C, D) + distance(D, E)
By aa_anti_similarity on F, midpoint(B, F), E, B, midpoint(B, F), E we get anti_similar_triangles(B, E, midpoint(B, F), F, E, midpoint(B, F))
By aa_anti_similarity on B, C, midpoint(B, F), F, C, midpoint(B, F) we get anti_similar_triangles(B, C, midpoint(B, F), F, C, midpoint(B, F))
By reverse_direction on midpoint(B, F), C we get 180 == direction(midpoint(B, F), C) - direction(C, midpoint(B, F)) mod 360
By reverse_direction on midpoint(B, F), E we get 180 == direction(midpoint(B, F), E) - direction(E, midpoint(B, F)) mod 360
By aa_anti_similarity on B, D, midpoint(B, F), F, D, midpoint(B, F) we get anti_similar_triangles(B, D, midpoint(B, F), F, D, midpoint(B, F))
By external_angle_bisector_definition_v0_r on F, C, F, midpoint(B, F) we get Line(C, midpoint(B, F)) == external_angle_bisector(F, midpoint(B, F), F)
By internal_angle_bisector_definition_v0_r on E, D, E, midpoint(B, F) we get Line(D, midpoint(B, F)) == internal_angle_bisector(E, midpoint(B, F), E)
By internal_angle_bisector_definition_v0 on A, midpoint(A, B), B, E we get angle(A, E, midpoint(A, B)) == angle(midpoint(A, B), E, B) mod 360
By external_angle_bisector_definition_v0_r on B, E, B, midpoint(B, F) we get Line(E, midpoint(B, F)) == external_angle_bisector(B, midpoint(B, F), B)
By external_angle_bisector_definition_v0_r on F, E, F, midpoint(B, F) we get Line(E, midpoint(B, F)) == external_angle_bisector(F, midpoint(B, F), F)
By external_angle_bisector_definition_v0_r on D, F, D, midpoint(B, F) we get Line(F, midpoint(B, F)) == external_angle_bisector(D, midpoint(B, F), D)
By external_angle_bisector_definition_v0_r on E, B, E, midpoint(B, F) we get Line(B, midpoint(B, F)) == external_angle_bisector(E, midpoint(B, F), E)
By reverse_direction on center(Circle(A, B, C)), E we get 180 == direction(center(Circle(A, B, C)), E) - direction(E, center(Circle(A, B, C))) mod 360
By perpendicular_angle_conditions_v0 on B, midpoint(A, B), E we get angle(B, midpoint(A, B), E) == orientation(B, midpoint(A, B), E) mod 360
By isosceles_triangle_midpoint on center(Circle(A, B, C)), B, A we get midpoint(A, B) in median(center(Circle(A, B, C)), A, B)
By internal_angle_bisector_definition_v0_r on B, A, B, midpoint(A, B) we get Line(A, midpoint(A, B)) == internal_angle_bisector(B, midpoint(A, B), B)
By internal_angle_bisector_definition_v0_r on midpoint(B, F), D, midpoint(B, F), E we get Line(D, E) == internal_angle_bisector(midpoint(B, F), E, midpoint(B, F))
By external_angle_bisector_definition_v0_r on C, F, C, midpoint(B, F) we get Line(F, midpoint(B, F)) == external_angle_bisector(C, midpoint(B, F), C)
By internal_angle_bisector_definition_v0_r on B, E, A, center(Circle(A, B, C)) we get Line(E, center(Circle(A, B, C))) == internal_angle_bisector(A, center(Circle(A, B, C)), B)
By external_angle_bisector_definition_v0_r on C, B, C, midpoint(B, F) we get Line(B, midpoint(B, F)) == external_angle_bisector(C, midpoint(B, F), C)
By internal_angle_bisector_definition_v0_r on G, C, H, E we get Line(C, E) == internal_angle_bisector(G, E, H)
By external_angle_bisector_definition_v0_r on B, C, B, midpoint(B, F) we get Line(C, midpoint(B, F)) == external_angle_bisector(B, midpoint(B, F), B)
By power_of_a_point_in_circle on G, Circle(C, E, G) we get 0 == power_of_a_point(G, Circle(C, E, G))
By internal_angle_bisector_definition_v0_r on F, E, B, midpoint(B, F) we get Line(E, midpoint(B, F)) == internal_angle_bisector(B, midpoint(B, F), F)
By internal_angle_bisector_definition_v0_r on midpoint(B, F), C, midpoint(B, F), D we get Line(C, D) == internal_angle_bisector(midpoint(B, F), D, midpoint(B, F))
By external_angle_bisector_definition_v0_r on E, midpoint(B, F), C, D we get external_angle_bisector(C, D, E) == Line(D, midpoint(B, F))
By internal_angle_bisector_definition_v0_r on B, midpoint(A, B), B, A we get internal_angle_bisector(B, A, B) == Line(A, midpoint(A, B))
By reverse_direction on center(Circle(A, B, C)), C we get 180 == direction(center(Circle(A, B, C)), C) - direction(C, center(Circle(A, B, C))) mod 360
By external_angle_bisector_definition_v0_r on B, D, B, midpoint(B, F) we get Line(D, midpoint(B, F)) == external_angle_bisector(B, midpoint(B, F), B)
By internal_angle_bisector_definition_v0_r on C, D, C, E we get Line(D, E) == internal_angle_bisector(C, E, C)
By internal_angle_bisector_definition_v0_r on F, C, B, midpoint(B, F) we get Line(C, midpoint(B, F)) == internal_angle_bisector(B, midpoint(B, F), F)
By reverse_direction on center(Circle(A, B, C)), B we get 180 == direction(center(Circle(A, B, C)), B) - direction(B, center(Circle(A, B, C))) mod 360
By internal_angle_bisector_definition_v0_r on C, E, C, D we get Line(D, E) == internal_angle_bisector(C, D, C)
By internal_angle_bisector_definition_v0_r on C, midpoint(B, F), C, D we get internal_angle_bisector(C, D, C) == Line(D, midpoint(B, F))
By external_angle_bisector_definition_v0_r on E, F, E, midpoint(B, F) we get Line(F, midpoint(B, F)) == external_angle_bisector(E, midpoint(B, F), E)
By external_angle_bisector_definition_v0_r on D, B, D, midpoint(B, F) we get Line(B, midpoint(B, F)) == external_angle_bisector(D, midpoint(B, F), D)
By external_angle_bisector_definition_v0_r on F, D, F, midpoint(B, F) we get Line(D, midpoint(B, F)) == external_angle_bisector(F, midpoint(B, F), F)
By internal_angle_bisector_definition_v0_r on D, C, D, E we get Line(C, E) == internal_angle_bisector(D, E, D)
By internal_angle_bisector_definition_v0_r on F, D, B, midpoint(B, F) we get Line(D, midpoint(B, F)) == internal_angle_bisector(B, midpoint(B, F), F)
By internal_angle_bisector_definition_v0_r on midpoint(A, B), A, midpoint(A, B), B we get Line(A, B) == internal_angle_bisector(midpoint(A, B), B, midpoint(A, B))
By perpendicular_angle_conditions_v0 on A, midpoint(A, B), E we get angle(A, midpoint(A, B), E) == orientation(A, midpoint(A, B), E) mod 360
By internal_angle_bisector_definition_v0_r on G, D, H, E we get Line(D, E) == internal_angle_bisector(G, E, H)
By power_of_a_point_on_circle on E, Circle(C, E, G) we get 0 == power_of_a_point(E, Circle(C, E, G))
By internal_angle_bisector_definition_v0_r on E, D, E, C we get Line(C, D) == internal_angle_bisector(E, C, E)
By power_of_a_point_on_circle on H, Circle(C, E, G) we get 0 == power_of_a_point(H, Circle(C, E, G))
By internal_angle_bisector_definition_v0_r on A, B, A, midpoint(A, B) we get Line(B, midpoint(A, B)) == internal_angle_bisector(A, midpoint(A, B), A)
By power_of_a_point_in_circle on C, Circle(C, E, G) we get 0 == power_of_a_point(C, Circle(C, E, G))
By reverse_direction on center(Circle(A, B, C)), A we get 180 == direction(center(Circle(A, B, C)), A) - direction(A, center(Circle(A, B, C))) mod 360
By perpendicular_angle_conditions_v0 on E, midpoint(A, B), A we get angle(E, midpoint(A, B), A) == orientation(A, E, midpoint(A, B)) mod 360
By internal_angle_bisector_definition_v0_r on D, midpoint(B, F), D, C we get internal_angle_bisector(D, C, D) == Line(C, midpoint(B, F))
By internal_angle_bisector_definition_v0 on B, midpoint(A, B), A, E we get angle(B, E, midpoint(A, B)) == angle(midpoint(A, B), E, A) mod 360
By internal_angle_bisector_definition_v0_r on D, E, D, midpoint(B, F) we get Line(E, midpoint(B, F)) == internal_angle_bisector(D, midpoint(B, F), D)
By internal_angle_bisector_definition_v0_r on D, C, D, midpoint(B, F) we get Line(C, midpoint(B, F)) == internal_angle_bisector(D, midpoint(B, F), D)
By internal_angle_bisector_definition_v0_r on A, midpoint(A, B), A, B we get internal_angle_bisector(A, B, A) == Line(B, midpoint(A, B))
By perpendicular_angle_conditions_v0 on E, midpoint(A, B), B we get angle(E, midpoint(A, B), B) == orientation(B, E, midpoint(A, B)) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(B, F), E, midpoint(B, F), D we get Line(D, E) == internal_angle_bisector(midpoint(B, F), D, midpoint(B, F))
By internal_angle_bisector_definition_v0_r on midpoint(B, F), D, midpoint(B, F), C we get Line(C, D) == internal_angle_bisector(midpoint(B, F), C, midpoint(B, F))
By internal_angle_bisector_definition_v0_r on E, midpoint(B, F), E, D we get internal_angle_bisector(E, D, E) == Line(D, midpoint(B, F))
By internal_angle_bisector_definition_v0_r on C, D, C, midpoint(B, F) we get Line(D, midpoint(B, F)) == internal_angle_bisector(C, midpoint(B, F), C)
By internal_angle_bisector_definition_v0_r on E, C, E, D we get Line(C, D) == internal_angle_bisector(E, D, E)
By internal_angle_bisector_definition_v0_r on midpoint(A, B), B, midpoint(A, B), A we get Line(A, B) == internal_angle_bisector(midpoint(A, B), A, midpoint(A, B))
By internal_angle_bisector_definition_v0_r on D, E, D, C we get Line(C, E) == internal_angle_bisector(D, C, D)
By internal_angle_bisector_definition_v0_r on D, midpoint(B, F), D, E we get internal_angle_bisector(D, E, D) == Line(E, midpoint(B, F))
By altitude_definition on E, midpoint(A, B), B, median(E, A, B) we get median(E, A, B) == altitude(E, B, midpoint(A, B))
By isosceles_triangle_properties on center(Circle(A, B, C)), C, B we get distance(B, center(Circle(A, B, C))) == distance(C, center(Circle(A, B, C))), angle(C, B, center(Circle(A, B, C))) == angle(center(Circle(A, B, C)), C, B) mod 360
By isosceles_triangle_properties on center(Circle(A, B, C)), A, B we get distance(A, center(Circle(A, B, C))) == distance(B, center(Circle(A, B, C))), angle(A, B, center(Circle(A, B, C))) == angle(center(Circle(A, B, C)), A, B) mod 360
By sas_anti_congruence on C, center(Circle(A, B, C)), E, E, center(Circle(A, B, C)), C we get anti_congruent_triangles(C, E, center(Circle(A, B, C)), E, C, center(Circle(A, B, C)))
By isosceles_triangle_properties on C, H, G we get distance(C, G) == distance(C, H), angle(C, H, G) == angle(H, G, C) mod 360
By altitude_definition on B, E, midpoint(A, B), Line(A, B) we get Line(A, B) == altitude(B, E, midpoint(A, B))
By altitude_definition on E, A, midpoint(A, B), median(E, A, B) we get median(E, A, B) == altitude(E, A, midpoint(A, B))
By sas_anti_congruence on B, center(Circle(A, B, C)), C, C, center(Circle(A, B, C)), B we get anti_congruent_triangles(B, C, center(Circle(A, B, C)), C, B, center(Circle(A, B, C)))
By sas_anti_congruence on A, center(Circle(A, B, C)), E, E, center(Circle(A, B, C)), A we get anti_congruent_triangles(A, E, center(Circle(A, B, C)), E, A, center(Circle(A, B, C)))
By sas_anti_congruence on A, center(Circle(A, B, C)), C, C, center(Circle(A, B, C)), A we get anti_congruent_triangles(A, C, center(Circle(A, B, C)), C, A, center(Circle(A, B, C)))
By isosceles_triangle_properties on center(Circle(A, B, C)), B, E we get distance(B, center(Circle(A, B, C))) == distance(E, center(Circle(A, B, C))), angle(B, E, center(Circle(A, B, C))) == angle(center(Circle(A, B, C)), B, E) mod 360
By isosceles_triangle_properties on center(Circle(A, B, C)), A, E we get distance(A, center(Circle(A, B, C))) == distance(E, center(Circle(A, B, C))), angle(A, E, center(Circle(A, B, C))) == angle(center(Circle(A, B, C)), A, E) mod 360
By isosceles_triangle_properties on E, G, H we get distance(E, G) == distance(E, H), angle(E, G, H) == angle(G, H, E) mod 360
By sas_anti_congruence on G, C, H, H, C, G we get anti_congruent_triangles(C, G, H, C, H, G)
By sas_anti_congruence on E, center(Circle(A, B, C)), A, A, center(Circle(A, B, C)), E we get anti_congruent_triangles(A, E, center(Circle(A, B, C)), E, A, center(Circle(A, B, C)))
By isosceles_triangle_properties on center(Circle(A, B, C)), E, C we get distance(C, center(Circle(A, B, C))) == distance(E, center(Circle(A, B, C))), angle(E, C, center(Circle(A, B, C))) == angle(center(Circle(A, B, C)), E, C) mod 360
By isosceles_triangle_properties on center(Circle(A, B, C)), E, A we get distance(A, center(Circle(A, B, C))) == distance(E, center(Circle(A, B, C))), angle(E, A, center(Circle(A, B, C))) == angle(center(Circle(A, B, C)), E, A) mod 360
By sas_anti_congruence on B, center(Circle(A, B, C)), E, E, center(Circle(A, B, C)), B we get anti_congruent_triangles(B, E, center(Circle(A, B, C)), E, B, center(Circle(A, B, C)))
By isosceles_triangle_properties on center(Circle(A, B, C)), A, C we get distance(A, center(Circle(A, B, C))) == distance(C, center(Circle(A, B, C))), angle(A, C, center(Circle(A, B, C))) == angle(center(Circle(A, B, C)), A, C) mod 360
By sas_anti_congruence on A, center(Circle(A, B, C)), B, B, center(Circle(A, B, C)), A we get anti_congruent_triangles(A, B, center(Circle(A, B, C)), B, A, center(Circle(A, B, C)))
By isosceles_triangle_properties on center(Circle(A, B, C)), B, A we get distance(A, center(Circle(A, B, C))) == distance(B, center(Circle(A, B, C))), angle(B, A, center(Circle(A, B, C))) == angle(center(Circle(A, B, C)), B, A) mod 360
By power_of_a_point_definition on F, C, G, Circle(C, E, G) we get log(distance(C, F)) + log(distance(F, G)) == log(power_of_a_point(F, Circle(C, E, G)))
By isosceles_triangle_properties on C, G, H we get distance(C, G) == distance(C, H), angle(C, G, H) == angle(G, H, C) mod 360
By sas_anti_congruence on C, center(Circle(A, B, C)), B, B, center(Circle(A, B, C)), C we get anti_congruent_triangles(B, C, center(Circle(A, B, C)), C, B, center(Circle(A, B, C)))
By isosceles_triangle_properties on center(Circle(A, B, C)), C, E we get distance(C, center(Circle(A, B, C))) == distance(E, center(Circle(A, B, C))), angle(C, E, center(Circle(A, B, C))) == angle(center(Circle(A, B, C)), C, E) mod 360
By power_of_a_point_definition on D, C, E, Circle(C, E, G) we get log(distance(C, D)) + log(distance(D, E)) == log(power_of_a_point(D, Circle(C, E, G)))
By altitude_definition on A, midpoint(A, B), E, Line(A, B) we get Line(A, B) == altitude(A, E, midpoint(A, B))
By sas_anti_congruence on C, center(Circle(A, B, C)), A, A, center(Circle(A, B, C)), C we get anti_congruent_triangles(A, C, center(Circle(A, B, C)), C, A, center(Circle(A, B, C)))
By sas_anti_congruence on E, center(Circle(A, B, C)), B, B, center(Circle(A, B, C)), E we get anti_congruent_triangles(B, E, center(Circle(A, B, C)), E, B, center(Circle(A, B, C)))
By sas_anti_congruence on H, C, G, G, C, H we get anti_congruent_triangles(C, G, H, C, H, G)
By sas_anti_congruence on B, center(Circle(A, B, C)), A, A, center(Circle(A, B, C)), B we get anti_congruent_triangles(A, B, center(Circle(A, B, C)), B, A, center(Circle(A, B, C)))
By isosceles_triangle_properties on center(Circle(A, B, C)), C, A we get distance(A, center(Circle(A, B, C))) == distance(C, center(Circle(A, B, C))), angle(C, A, center(Circle(A, B, C))) == angle(center(Circle(A, B, C)), C, A) mod 360
By isosceles_triangle_properties on center(Circle(A, B, C)), E, B we get distance(B, center(Circle(A, B, C))) == distance(E, center(Circle(A, B, C))), angle(E, B, center(Circle(A, B, C))) == angle(center(Circle(A, B, C)), E, B) mod 360
By isosceles_triangle_properties on center(Circle(A, B, C)), B, C we get distance(B, center(Circle(A, B, C))) == distance(C, center(Circle(A, B, C))), angle(B, C, center(Circle(A, B, C))) == angle(center(Circle(A, B, C)), B, C) mod 360
By sas_anti_congruence on E, center(Circle(A, B, C)), C, C, center(Circle(A, B, C)), E we get anti_congruent_triangles(C, E, center(Circle(A, B, C)), E, C, center(Circle(A, B, C)))
By isosceles_triangle_properties on E, H, G we get distance(E, G) == distance(E, H), angle(E, H, G) == angle(H, G, E) mod 360
By isosceles_triangle_altitude_v3 on center(Circle(A, B, C)), B, A we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, center(Circle(A, B, C)), B), perpendicular_line(center(Circle(A, B, C)), Line(A, B)))
By isosceles_triangle_altitude_v3 on center(Circle(A, B, C)), B, A we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, center(Circle(A, B, C)), B), perpendicular_line(center(Circle(A, B, C)), Line(A, B)))
By power_of_a_point_definition on A, C, G, Circle(C, E, G) we get log(distance(A, C)) + log(distance(A, G)) == log(power_of_a_point(A, Circle(C, E, G)))
By power_of_a_point_definition on B, C, H, Circle(C, E, G) we get log(distance(B, C)) + log(distance(B, H)) == log(power_of_a_point(B, Circle(C, E, G)))
By isosceles_triangle_altitude_v3 on center(Circle(A, B, C)), A, B we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, center(Circle(A, B, C)), B), perpendicular_line(center(Circle(A, B, C)), Line(A, B)))
By isosceles_triangle_altitude_v3 on center(Circle(A, B, C)), A, B we get identical(perpendicular_bisector(A, B), internal_angle_bisector(A, center(Circle(A, B, C)), B), perpendicular_line(center(Circle(A, B, C)), Line(A, B)))
By sas_anti_congruence on B, center(Circle(A, B, C)), E, A, center(Circle(A, B, C)), E we get anti_congruent_triangles(A, E, center(Circle(A, B, C)), B, E, center(Circle(A, B, C)))
By sas_anti_congruence on A, center(Circle(A, B, C)), E, B, center(Circle(A, B, C)), E we get anti_congruent_triangles(A, E, center(Circle(A, B, C)), B, E, center(Circle(A, B, C)))
By sas_anti_congruence on E, center(Circle(A, B, C)), A, E, center(Circle(A, B, C)), B we get anti_congruent_triangles(A, E, center(Circle(A, B, C)), B, E, center(Circle(A, B, C)))
By perpendicular_bisector_sufficient_conditions on G, H, E, C we get Line(C, E) == perpendicular_bisector(G, H)
By sas_anti_congruence on E, center(Circle(A, B, C)), B, E, center(Circle(A, B, C)), A we get anti_congruent_triangles(A, E, center(Circle(A, B, C)), B, E, center(Circle(A, B, C)))
By sas_congruence on A, center(Circle(A, B, C)), E, E, center(Circle(A, B, C)), B we get congruent_triangles(A, E, center(Circle(A, B, C)), E, B, center(Circle(A, B, C)))
By sas_congruence on E, center(Circle(A, B, C)), B, A, center(Circle(A, B, C)), E we get congruent_triangles(A, E, center(Circle(A, B, C)), E, B, center(Circle(A, B, C)))
By sas_congruence on E, center(Circle(A, B, C)), A, B, center(Circle(A, B, C)), E we get congruent_triangles(A, E, center(Circle(A, B, C)), E, B, center(Circle(A, B, C)))
By sas_congruence on B, center(Circle(A, B, C)), E, E, center(Circle(A, B, C)), A we get congruent_triangles(A, E, center(Circle(A, B, C)), E, B, center(Circle(A, B, C)))
By sas_anti_similarity on H, B, D, G, F, D we get anti_similar_triangles(B, D, H, F, D, G)
By sas_anti_congruence on G, E, D, H, E, D we get anti_congruent_triangles(D, E, G, D, E, H)
By sas_anti_similarity on D, B, H, D, F, G we get anti_similar_triangles(B, D, H, F, D, G)
By sas_anti_similarity on G, E, D, H, E, D we get anti_similar_triangles(D, E, G, D, E, H)
By sas_anti_congruence on H, E, D, G, E, D we get anti_congruent_triangles(D, E, G, D, E, H)
By sas_anti_congruence on F, C, H, B, C, G we get anti_congruent_triangles(B, C, G, F, C, H)
By sas_anti_similarity on G, F, D, H, B, D we get anti_similar_triangles(B, D, H, F, D, G)
By sas_anti_congruence on D, E, H, D, E, G we get anti_congruent_triangles(D, E, G, D, E, H)
By isosceles_triangle_altitude_v2 on C, G, H we get identical(perpendicular_bisector(G, H), internal_angle_bisector(G, C, H), perpendicular_line(C, Line(G, H)))
By sas_anti_congruence on G, C, D, H, C, D we get anti_congruent_triangles(C, D, G, C, D, H)
By sas_anti_congruence on H, B, F, G, F, B we get anti_congruent_triangles(B, F, G, F, B, H)
By sas_anti_congruence on G, C, B, H, C, F we get anti_congruent_triangles(B, C, G, F, C, H)
By sas_anti_similarity on H, B, F, G, F, B we get anti_similar_triangles(B, F, G, F, B, H)
By sas_anti_congruence on D, C, G, D, C, H we get anti_congruent_triangles(C, D, G, C, D, H)
By sas_anti_congruence on B, C, G, F, C, H we get anti_congruent_triangles(B, C, G, F, C, H)
By sas_anti_congruence on G, F, D, H, B, D we get anti_congruent_triangles(B, D, H, F, D, G)
By sas_anti_similarity on F, B, H, B, F, G we get anti_similar_triangles(B, F, G, F, B, H)
By sas_anti_congruence on D, E, G, D, E, H we get anti_congruent_triangles(D, E, G, D, E, H)
By sas_anti_similarity on D, E, G, D, E, H we get anti_similar_triangles(D, E, G, D, E, H)
By sas_anti_similarity on D, E, H, D, E, G we get anti_similar_triangles(D, E, G, D, E, H)
By sas_anti_similarity on H, E, D, G, E, D we get anti_similar_triangles(D, E, G, D, E, H)
By sas_anti_congruence on D, C, H, D, C, G we get anti_congruent_triangles(C, D, G, C, D, H)
By sas_anti_congruence on G, F, B, H, B, F we get anti_congruent_triangles(B, F, G, F, B, H)
By sas_anti_similarity on B, F, G, F, B, H we get anti_similar_triangles(B, F, G, F, B, H)
By sas_anti_congruence on B, F, G, F, B, H we get anti_congruent_triangles(B, F, G, F, B, H)
By sas_anti_similarity on G, F, B, H, B, F we get anti_similar_triangles(B, F, G, F, B, H)
By sas_anti_similarity on D, F, G, D, B, H we get anti_similar_triangles(B, D, H, F, D, G)
By sas_anti_congruence on H, C, F, G, C, B we get anti_congruent_triangles(B, C, G, F, C, H)
By sas_anti_congruence on H, C, D, G, C, D we get anti_congruent_triangles(C, D, G, C, D, H)
By sas_anti_congruence on H, B, D, G, F, D we get anti_congruent_triangles(B, D, H, F, D, G)
By power_of_a_point_definition on midpoint(B, F), C, E, Circle(C, E, G) we get log(power_of_a_point(midpoint(B, F), Circle(C, E, G))) == log(distance(C, midpoint(B, F))) + log(distance(E, midpoint(B, F)))
By sas_anti_congruence on F, B, H, B, F, G we get anti_congruent_triangles(B, F, G, F, B, H)
By sas_anti_congruence on D, B, H, D, F, G we get anti_congruent_triangles(B, D, H, F, D, G)
By sas_anti_congruence on D, F, G, D, B, H we get anti_congruent_triangles(B, D, H, F, D, G)
By power_of_a_point_definition on midpoint(B, F), C, E, Circle(A, B, C) we get log(power_of_a_point(midpoint(B, F), Circle(A, B, C))) == log(distance(C, midpoint(B, F))) + log(distance(E, midpoint(B, F)))
By isosceles_triangle_altitude_v2 on C, H, G we get identical(perpendicular_bisector(G, H), internal_angle_bisector(G, C, H), perpendicular_line(C, Line(G, H)))
By concurrent_sufficient_conditions on f, Line(B, F), Line(B, center(Circle(A, B, C))) we get concurrent(f, Line(B, F), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on f, Line(B, center(Circle(A, B, C))), i we get concurrent(f, i, Line(B, center(Circle(A, B, C))))
By line_definition on midpoint(A, B), center(Circle(A, B, C)), median(E, A, B) we get median(E, A, B) == Line(midpoint(A, B), center(Circle(A, B, C)))
By line_definition on C, midpoint(G, H), Line(C, D) we get Line(C, D) == Line(C, midpoint(G, H))
By concurrent_sufficient_conditions on Line(A, B), Line(B, center(Circle(A, B, C))), Line(B, E) we get concurrent(Line(A, B), Line(B, E), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(A, E), Line(A, center(Circle(A, B, C))), Line(A, B) we get concurrent(Line(A, B), Line(A, E), Line(A, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(B, E), Line(B, center(Circle(A, B, C))), i we get concurrent(i, Line(B, E), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(B, F), Line(B, center(Circle(A, B, C))), Line(B, E) we get concurrent(Line(B, E), Line(B, F), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(A, B), Line(B, center(Circle(A, B, C))), f we get concurrent(f, Line(A, B), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on g, Line(A, center(Circle(A, B, C))), Line(A, B) we get concurrent(g, Line(A, B), Line(A, center(Circle(A, B, C))))
By line_definition on E, midpoint(G, H), Line(C, D) we get Line(C, D) == Line(E, midpoint(G, H))
By concurrent_sufficient_conditions on Line(C, center(Circle(A, B, C))), g, f we get concurrent(f, g, Line(C, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on i, Line(B, E), Line(B, center(Circle(A, B, C))) we get concurrent(i, Line(B, E), Line(B, center(Circle(A, B, C))))
By line_definition on C, orthocenter(C, E, F), altitude(C, E, F) we get altitude(C, E, F) == Line(C, orthocenter(C, E, F))
By concurrent_sufficient_conditions on Line(B, E), i, Line(B, center(Circle(A, B, C))) we get concurrent(i, Line(B, E), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on g, Line(A, center(Circle(A, B, C))), Line(A, E) we get concurrent(g, Line(A, E), Line(A, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on g, Line(A, E), Line(A, center(Circle(A, B, C))) we get concurrent(g, Line(A, E), Line(A, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(A, E), Line(A, center(Circle(A, B, C))), g we get concurrent(g, Line(A, E), Line(A, center(Circle(A, B, C))))
By line_definition on orthocenter(B, C, E), H, Line(E, H) we get Line(E, H) == Line(H, orthocenter(B, C, E))
By concurrent_sufficient_conditions on f, Line(C, D), Line(C, center(Circle(A, B, C))) we get concurrent(f, Line(C, D), Line(C, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(A, B), i, Line(B, center(Circle(A, B, C))) we get concurrent(i, Line(A, B), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, B, C))), h, Line(A, E) we get concurrent(h, Line(A, E), Line(A, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(B, F), Line(A, B), Line(B, center(Circle(A, B, C))) we get concurrent(Line(A, B), Line(B, F), Line(B, center(Circle(A, B, C))))
By line_definition on midpoint(B, F), orthocenter(C, E, F), Line(B, F) we get Line(B, F) == Line(midpoint(B, F), orthocenter(C, E, F))
By concurrent_sufficient_conditions on median(E, A, B), Line(A, center(Circle(A, B, C))), Line(C, center(Circle(A, B, C))) we get concurrent(median(E, A, B), Line(A, center(Circle(A, B, C))), Line(C, center(Circle(A, B, C))))
By median_definition on center(Circle(A, B, C)), B, A, median(E, A, B) we get median(E, A, B) == median(center(Circle(A, B, C)), A, B)
By concurrent_sufficient_conditions on Line(B, F), Line(B, center(Circle(A, B, C))), f we get concurrent(f, Line(B, F), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on g, Line(A, B), Line(A, center(Circle(A, B, C))) we get concurrent(g, Line(A, B), Line(A, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(A, B), Line(A, center(Circle(A, B, C))), g we get concurrent(g, Line(A, B), Line(A, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on h, Line(A, center(Circle(A, B, C))), g we get concurrent(g, h, Line(A, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(B, center(Circle(A, B, C))), i, Line(A, B) we get concurrent(i, Line(A, B), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(B, center(Circle(A, B, C))), median(E, A, B), Line(A, center(Circle(A, B, C))) we get concurrent(median(E, A, B), Line(A, center(Circle(A, B, C))), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(B, center(Circle(A, B, C))), i, Line(B, F) we get concurrent(i, Line(B, F), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(A, B), Line(A, E), Line(A, center(Circle(A, B, C))) we get concurrent(Line(A, B), Line(A, E), Line(A, center(Circle(A, B, C))))
By concyclic_sufficient_conditions_v0 on F, G, B, H we get concyclic(B, F, G, H)
By line_definition on orthocenter(C, E, F), F, Line(B, F) we get Line(B, F) == Line(F, orthocenter(C, E, F))
By concurrent_sufficient_conditions on Line(B, F), f, Line(B, center(Circle(A, B, C))) we get concurrent(f, Line(B, F), Line(B, center(Circle(A, B, C))))
By line_definition on midpoint(G, H), midpoint(B, F), Line(C, D) we get Line(C, D) == Line(midpoint(B, F), midpoint(G, H))
By concurrent_sufficient_conditions on Line(B, F), Line(B, E), Line(B, center(Circle(A, B, C))) we get concurrent(Line(B, E), Line(B, F), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(C, D), g, Line(C, center(Circle(A, B, C))) we get concurrent(g, Line(C, D), Line(C, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(B, center(Circle(A, B, C))), Line(B, E), Line(A, B) we get concurrent(Line(A, B), Line(B, E), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(C, center(Circle(A, B, C))), Line(A, center(Circle(A, B, C))), median(E, A, B) we get concurrent(median(E, A, B), Line(A, center(Circle(A, B, C))), Line(C, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(A, E), Line(A, B), Line(A, center(Circle(A, B, C))) we get concurrent(Line(A, B), Line(A, E), Line(A, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, B, C))), median(E, A, B), Line(B, center(Circle(A, B, C))) we get concurrent(median(E, A, B), Line(A, center(Circle(A, B, C))), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on f, i, Line(B, center(Circle(A, B, C))) we get concurrent(f, i, Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(C, center(Circle(A, B, C))), Line(A, center(Circle(A, B, C))), Line(B, center(Circle(A, B, C))) we get concurrent(Line(A, center(Circle(A, B, C))), Line(B, center(Circle(A, B, C))), Line(C, center(Circle(A, B, C))))
By line_definition on orthocenter(B, C, E), F, Line(B, F) we get Line(B, F) == Line(F, orthocenter(B, C, E))
By line_definition on B, orthocenter(C, E, F), Line(B, F) we get Line(B, F) == Line(B, orthocenter(C, E, F))
By concurrent_sufficient_conditions on median(E, A, B), Line(B, center(Circle(A, B, C))), Line(C, center(Circle(A, B, C))) we get concurrent(median(E, A, B), Line(B, center(Circle(A, B, C))), Line(C, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(C, D), f, Line(C, center(Circle(A, B, C))) we get concurrent(f, Line(C, D), Line(C, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on h, Line(A, center(Circle(A, B, C))), Line(A, B) we get concurrent(h, Line(A, B), Line(A, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(B, E), Line(B, center(Circle(A, B, C))), Line(B, F) we get concurrent(Line(B, E), Line(B, F), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on f, Line(B, center(Circle(A, B, C))), Line(A, B) we get concurrent(f, Line(A, B), Line(B, center(Circle(A, B, C))))
By line_definition on orthocenter(B, C, E), orthocenter(C, E, F), Line(B, F) we get Line(B, F) == Line(orthocenter(B, C, E), orthocenter(C, E, F))
By line_definition on orthocenter(B, C, E), midpoint(B, F), Line(B, F) we get Line(B, F) == Line(midpoint(B, F), orthocenter(B, C, E))
By concurrent_sufficient_conditions on Line(A, B), Line(A, center(Circle(A, B, C))), h we get concurrent(h, Line(A, B), Line(A, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on i, Line(B, center(Circle(A, B, C))), Line(B, F) we get concurrent(i, Line(B, F), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(B, center(Circle(A, B, C))), Line(B, E), f we get concurrent(f, Line(B, E), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(B, center(Circle(A, B, C))), Line(C, center(Circle(A, B, C))), Line(A, center(Circle(A, B, C))) we get concurrent(Line(A, center(Circle(A, B, C))), Line(B, center(Circle(A, B, C))), Line(C, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, B, C))), Line(B, center(Circle(A, B, C))), Line(C, center(Circle(A, B, C))) we get concurrent(Line(A, center(Circle(A, B, C))), Line(B, center(Circle(A, B, C))), Line(C, center(Circle(A, B, C))))
By line_definition on C, orthocenter(B, C, E), altitude(C, B, E) we get altitude(C, B, E) == Line(C, orthocenter(B, C, E))
By concurrent_sufficient_conditions on Line(A, B), f, Line(B, center(Circle(A, B, C))) we get concurrent(f, Line(A, B), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, B, C))), g, Line(A, B) we get concurrent(g, Line(A, B), Line(A, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, B, C))), h, Line(A, B) we get concurrent(h, Line(A, B), Line(A, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on h, Line(A, center(Circle(A, B, C))), Line(A, E) we get concurrent(h, Line(A, E), Line(A, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on i, Line(B, center(Circle(A, B, C))), Line(A, B) we get concurrent(i, Line(A, B), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(A, B), Line(A, center(Circle(A, B, C))), Line(A, E) we get concurrent(Line(A, B), Line(A, E), Line(A, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on median(E, A, B), Line(C, center(Circle(A, B, C))), Line(B, center(Circle(A, B, C))) we get concurrent(median(E, A, B), Line(B, center(Circle(A, B, C))), Line(C, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(B, center(Circle(A, B, C))), i, Line(B, E) we get concurrent(i, Line(B, E), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(A, B), Line(B, center(Circle(A, B, C))), Line(B, F) we get concurrent(Line(A, B), Line(B, F), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(B, center(Circle(A, B, C))), Line(B, E), i we get concurrent(i, Line(B, E), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on i, Line(B, center(Circle(A, B, C))), Line(B, E) we get concurrent(i, Line(B, E), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(B, center(Circle(A, B, C))), Line(A, B), Line(B, F) we get concurrent(Line(A, B), Line(B, F), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on h, g, Line(A, center(Circle(A, B, C))) we get concurrent(g, h, Line(A, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on i, Line(A, B), Line(B, center(Circle(A, B, C))) we get concurrent(i, Line(A, B), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(B, center(Circle(A, B, C))), median(E, A, B), Line(C, center(Circle(A, B, C))) we get concurrent(median(E, A, B), Line(B, center(Circle(A, B, C))), Line(C, center(Circle(A, B, C))))
By line_definition on orthocenter(C, E, F), E, Line(E, G) we get Line(E, G) == Line(E, orthocenter(C, E, F))
By concurrent_sufficient_conditions on Line(C, D), Line(C, center(Circle(A, B, C))), g we get concurrent(g, Line(C, D), Line(C, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, B, C))), g, Line(A, E) we get concurrent(g, Line(A, E), Line(A, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, B, C))), h, g we get concurrent(g, h, Line(A, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on median(E, A, B), Line(A, center(Circle(A, B, C))), Line(B, center(Circle(A, B, C))) we get concurrent(median(E, A, B), Line(A, center(Circle(A, B, C))), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on g, Line(C, center(Circle(A, B, C))), f we get concurrent(f, g, Line(C, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(B, F), i, Line(B, center(Circle(A, B, C))) we get concurrent(i, Line(B, F), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on g, Line(A, center(Circle(A, B, C))), h we get concurrent(g, h, Line(A, center(Circle(A, B, C))))
By line_definition on E, orthocenter(B, C, E), Line(E, H) we get Line(E, H) == Line(E, orthocenter(B, C, E))
By line_definition on orthocenter(C, E, F), G, Line(E, G) we get Line(E, G) == Line(G, orthocenter(C, E, F))
By concurrent_sufficient_conditions on Line(B, E), Line(B, center(Circle(A, B, C))), f we get concurrent(f, Line(B, E), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on g, f, Line(C, center(Circle(A, B, C))) we get concurrent(f, g, Line(C, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on median(E, A, B), Line(C, center(Circle(A, B, C))), Line(A, center(Circle(A, B, C))) we get concurrent(median(E, A, B), Line(A, center(Circle(A, B, C))), Line(C, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on f, g, Line(C, center(Circle(A, B, C))) we get concurrent(f, g, Line(C, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, B, C))), Line(A, B), h we get concurrent(h, Line(A, B), Line(A, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(A, E), h, Line(A, center(Circle(A, B, C))) we get concurrent(h, Line(A, E), Line(A, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(B, center(Circle(A, B, C))), Line(B, F), Line(B, E) we get concurrent(Line(B, E), Line(B, F), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(C, center(Circle(A, B, C))), Line(C, D), f we get concurrent(f, Line(C, D), Line(C, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(A, B), h, Line(A, center(Circle(A, B, C))) we get concurrent(h, Line(A, B), Line(A, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on g, Line(C, center(Circle(A, B, C))), Line(C, D) we get concurrent(g, Line(C, D), Line(C, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(B, center(Circle(A, B, C))), f, Line(B, F) we get concurrent(f, Line(B, F), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(A, E), Line(A, center(Circle(A, B, C))), h we get concurrent(h, Line(A, E), Line(A, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on f, Line(B, center(Circle(A, B, C))), Line(B, F) we get concurrent(f, Line(B, F), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, B, C))), Line(A, B), Line(A, E) we get concurrent(Line(A, B), Line(A, E), Line(A, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on f, Line(C, center(Circle(A, B, C))), g we get concurrent(f, g, Line(C, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(B, center(Circle(A, B, C))), Line(A, B), f we get concurrent(f, Line(A, B), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on f, Line(A, B), Line(B, center(Circle(A, B, C))) we get concurrent(f, Line(A, B), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(A, B), Line(B, E), Line(B, center(Circle(A, B, C))) we get concurrent(Line(A, B), Line(B, E), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(B, center(Circle(A, B, C))), f, Line(B, E) we get concurrent(f, Line(B, E), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, B, C))), Line(C, center(Circle(A, B, C))), median(E, A, B) we get concurrent(median(E, A, B), Line(A, center(Circle(A, B, C))), Line(C, center(Circle(A, B, C))))
By line_definition on midpoint(G, H), D, Line(C, D) we get Line(C, D) == Line(D, midpoint(G, H))
By concurrent_sufficient_conditions on Line(B, F), Line(B, center(Circle(A, B, C))), Line(A, B) we get concurrent(Line(A, B), Line(B, F), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(C, center(Circle(A, B, C))), median(E, A, B), Line(B, center(Circle(A, B, C))) we get concurrent(median(E, A, B), Line(B, center(Circle(A, B, C))), Line(C, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on f, Line(B, E), Line(B, center(Circle(A, B, C))) we get concurrent(f, Line(B, E), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(C, center(Circle(A, B, C))), Line(B, center(Circle(A, B, C))), median(E, A, B) we get concurrent(median(E, A, B), Line(B, center(Circle(A, B, C))), Line(C, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, B, C))), Line(A, E), h we get concurrent(h, Line(A, E), Line(A, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, B, C))), median(E, A, B), Line(C, center(Circle(A, B, C))) we get concurrent(median(E, A, B), Line(A, center(Circle(A, B, C))), Line(C, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(B, center(Circle(A, B, C))), i, f we get concurrent(f, i, Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(C, center(Circle(A, B, C))), median(E, A, B), Line(A, center(Circle(A, B, C))) we get concurrent(median(E, A, B), Line(A, center(Circle(A, B, C))), Line(C, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(A, E), g, Line(A, center(Circle(A, B, C))) we get concurrent(g, Line(A, E), Line(A, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, B, C))), Line(C, center(Circle(A, B, C))), Line(B, center(Circle(A, B, C))) we get concurrent(Line(A, center(Circle(A, B, C))), Line(B, center(Circle(A, B, C))), Line(C, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(A, B), Line(B, center(Circle(A, B, C))), i we get concurrent(i, Line(A, B), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(B, center(Circle(A, B, C))), Line(B, F), Line(A, B) we get concurrent(Line(A, B), Line(B, F), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on h, Line(A, B), Line(A, center(Circle(A, B, C))) we get concurrent(h, Line(A, B), Line(A, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(B, E), f, Line(B, center(Circle(A, B, C))) we get concurrent(f, Line(B, E), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(B, center(Circle(A, B, C))), Line(A, center(Circle(A, B, C))), Line(C, center(Circle(A, B, C))) we get concurrent(Line(A, center(Circle(A, B, C))), Line(B, center(Circle(A, B, C))), Line(C, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, B, C))), Line(A, E), g we get concurrent(g, Line(A, E), Line(A, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(B, center(Circle(A, B, C))), Line(A, B), Line(B, E) we get concurrent(Line(A, B), Line(B, E), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on f, Line(B, center(Circle(A, B, C))), Line(B, E) we get concurrent(f, Line(B, E), Line(B, center(Circle(A, B, C))))
By line_definition on orthocenter(B, C, E), B, Line(B, F) we get Line(B, F) == Line(B, orthocenter(B, C, E))
By concurrent_sufficient_conditions on g, Line(C, D), Line(C, center(Circle(A, B, C))) we get concurrent(g, Line(C, D), Line(C, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(A, B), Line(B, F), Line(B, center(Circle(A, B, C))) we get concurrent(Line(A, B), Line(B, F), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, B, C))), Line(A, E), Line(A, B) we get concurrent(Line(A, B), Line(A, E), Line(A, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(C, center(Circle(A, B, C))), Line(C, D), g we get concurrent(g, Line(C, D), Line(C, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(C, center(Circle(A, B, C))), f, Line(C, D) we get concurrent(f, Line(C, D), Line(C, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(C, D), Line(C, center(Circle(A, B, C))), f we get concurrent(f, Line(C, D), Line(C, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(B, E), Line(A, B), Line(B, center(Circle(A, B, C))) we get concurrent(Line(A, B), Line(B, E), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, B, C))), Line(B, center(Circle(A, B, C))), median(E, A, B) we get concurrent(median(E, A, B), Line(A, center(Circle(A, B, C))), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on i, Line(B, center(Circle(A, B, C))), f we get concurrent(f, i, Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(C, center(Circle(A, B, C))), g, Line(C, D) we get concurrent(g, Line(C, D), Line(C, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(B, E), Line(B, F), Line(B, center(Circle(A, B, C))) we get concurrent(Line(B, E), Line(B, F), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on i, f, Line(B, center(Circle(A, B, C))) we get concurrent(f, i, Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on i, Line(B, F), Line(B, center(Circle(A, B, C))) we get concurrent(i, Line(B, F), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, B, C))), g, h we get concurrent(g, h, Line(A, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(B, center(Circle(A, B, C))), Line(B, F), i we get concurrent(i, Line(B, F), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(B, F), Line(B, center(Circle(A, B, C))), i we get concurrent(i, Line(B, F), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(B, center(Circle(A, B, C))), f, i we get concurrent(f, i, Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on median(E, A, B), Line(B, center(Circle(A, B, C))), Line(A, center(Circle(A, B, C))) we get concurrent(median(E, A, B), Line(A, center(Circle(A, B, C))), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(C, center(Circle(A, B, C))), Line(B, center(Circle(A, B, C))), Line(A, center(Circle(A, B, C))) we get concurrent(Line(A, center(Circle(A, B, C))), Line(B, center(Circle(A, B, C))), Line(C, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(B, center(Circle(A, B, C))), Line(B, E), Line(B, F) we get concurrent(Line(B, E), Line(B, F), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(B, E), Line(B, center(Circle(A, B, C))), Line(A, B) we get concurrent(Line(A, B), Line(B, E), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, B, C))), Line(A, B), g we get concurrent(g, Line(A, B), Line(A, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(B, center(Circle(A, B, C))), f, Line(A, B) we get concurrent(f, Line(A, B), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(C, center(Circle(A, B, C))), f, g we get concurrent(f, g, Line(C, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(B, center(Circle(A, B, C))), Line(C, center(Circle(A, B, C))), median(E, A, B) we get concurrent(median(E, A, B), Line(B, center(Circle(A, B, C))), Line(C, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on f, Line(C, center(Circle(A, B, C))), Line(C, D) we get concurrent(f, Line(C, D), Line(C, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(A, B), g, Line(A, center(Circle(A, B, C))) we get concurrent(g, Line(A, B), Line(A, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on h, Line(A, E), Line(A, center(Circle(A, B, C))) we get concurrent(h, Line(A, E), Line(A, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on g, h, Line(A, center(Circle(A, B, C))) we get concurrent(g, h, Line(A, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(B, center(Circle(A, B, C))), Line(A, center(Circle(A, B, C))), median(E, A, B) we get concurrent(median(E, A, B), Line(A, center(Circle(A, B, C))), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(B, center(Circle(A, B, C))), Line(B, F), f we get concurrent(f, Line(B, F), Line(B, center(Circle(A, B, C))))
By concurrent_sufficient_conditions on Line(B, center(Circle(A, B, C))), Line(A, B), i we get concurrent(i, Line(A, B), Line(B, center(Circle(A, B, C))))
By line_intersection_definition on G, Line(D, G), g we get G == line_intersection(g, Line(D, G))
By line_intersection_definition on H, Line(F, H), f we get H == line_intersection(f, Line(F, H))
By line_intersection_definition on B, Line(B, F), Line(B, G) we get B == line_intersection(Line(B, F), Line(B, G))
By line_intersection_definition on orthocenter(B, C, E), Line(E, H), Line(B, F) we get orthocenter(B, C, E) == line_intersection(Line(B, F), Line(E, H))
By line_intersection_definition on H, Line(G, H), Line(D, H) we get H == line_intersection(Line(D, H), Line(G, H))
By line_intersection_definition on H, Line(D, H), f we get H == line_intersection(f, Line(D, H))
By line_intersection_definition on center(Circle(A, B, C)), Line(B, center(Circle(A, B, C))), median(center(Circle(A, B, C)), A, B) we get center(Circle(A, B, C)) == line_intersection(Line(B, center(Circle(A, B, C))), median(center(Circle(A, B, C)), A, B))
By line_intersection_definition on F, Line(E, F), Line(F, H) we get F == line_intersection(Line(E, F), Line(F, H))
By line_intersection_definition on B, Line(B, G), Line(B, center(Circle(A, B, C))) we get B == line_intersection(Line(B, G), Line(B, center(Circle(A, B, C))))
By median_definition on E, G, H, Line(C, D) we get Line(C, D) == median(E, G, H)
By line_intersection_definition on C, altitude(C, B, E), g we get C == line_intersection(g, altitude(C, B, E))
By line_intersection_definition on B, Line(B, G), i we get B == line_intersection(i, Line(B, G))
By line_intersection_definition on C, altitude(C, E, F), altitude(C, B, E) we get C == line_intersection(altitude(C, B, E), altitude(C, E, F))
By line_intersection_definition on H, Line(E, H), Line(D, H) we get H == line_intersection(Line(D, H), Line(E, H))
By line_intersection_definition on H, Line(G, H), Line(F, H) we get H == line_intersection(Line(F, H), Line(G, H))
By line_intersection_definition on orthocenter(B, C, E), Line(E, H), altitude(C, B, E) we get orthocenter(B, C, E) == line_intersection(Line(E, H), altitude(C, B, E))
By line_intersection_definition on D, Line(D, H), Line(D, F) we get D == line_intersection(Line(D, F), Line(D, H))
By line_intersection_definition on G, Line(G, H), Line(D, G) we get G == line_intersection(Line(D, G), Line(G, H))
By line_intersection_definition on B, Line(B, G), Line(A, B) we get B == line_intersection(Line(A, B), Line(B, G))
By line_intersection_definition on C, Line(C, center(Circle(A, B, C))), altitude(C, E, F) we get C == line_intersection(altitude(C, E, F), Line(C, center(Circle(A, B, C))))
By perpendicular_line_definition on midpoint(B, F), Line(C, D), Line(G, H) we get Line(C, D) == perpendicular_line(midpoint(B, F), Line(G, H))
By perpendicular_line_definition on orthocenter(B, C, E), Line(B, F), Line(C, D) we get Line(B, F) == perpendicular_line(orthocenter(B, C, E), Line(C, D))
By line_intersection_definition on B, Line(B, G), f we get B == line_intersection(f, Line(B, G))
By line_intersection_definition on F, Line(F, H), g we get F == line_intersection(g, Line(F, H))
By line_intersection_definition on midpoint(A, B), median(center(Circle(A, B, C)), A, B), Line(A, B) we get midpoint(A, B) == line_intersection(Line(A, B), median(center(Circle(A, B, C)), A, B))
By perpendicular_line_definition on orthocenter(C, E, F), Line(E, G), g we get Line(E, G) == perpendicular_line(orthocenter(C, E, F), g)
By perpendicular_line_definition on orthocenter(C, E, F), Line(B, F), Line(C, D) we get Line(B, F) == perpendicular_line(orthocenter(C, E, F), Line(C, D))
By line_intersection_definition on orthocenter(C, E, F), Line(B, F), Line(E, G) we get orthocenter(C, E, F) == line_intersection(Line(B, F), Line(E, G))
By line_intersection_definition on C, f, altitude(C, B, E) we get C == line_intersection(f, altitude(C, B, E))
By line_intersection_definition on C, altitude(C, E, F), Line(C, D) we get C == line_intersection(Line(C, D), altitude(C, E, F))
By line_intersection_definition on F, Line(D, F), Line(F, H) we get F == line_intersection(Line(D, F), Line(F, H))
By line_intersection_definition on G, Line(G, H), g we get G == line_intersection(g, Line(G, H))
By line_intersection_definition on center(Circle(A, B, C)), median(center(Circle(A, B, C)), A, B), Line(C, center(Circle(A, B, C))) we get center(Circle(A, B, C)) == line_intersection(Line(C, center(Circle(A, B, C))), median(center(Circle(A, B, C)), A, B))
By line_intersection_definition on H, Line(F, H), Line(E, H) we get H == line_intersection(Line(E, H), Line(F, H))
By perpendicular_line_definition on orthocenter(B, C, E), altitude(C, B, E), Line(B, E) we get altitude(C, B, E) == perpendicular_line(orthocenter(B, C, E), Line(B, E))
By line_intersection_definition on D, Line(D, H), Line(D, G) we get D == line_intersection(Line(D, G), Line(D, H))
By median_definition on C, H, G, Line(C, D) we get Line(C, D) == median(C, G, H)
By line_intersection_definition on D, Line(D, G), Line(C, D) we get D == line_intersection(Line(C, D), Line(D, G))
By line_intersection_definition on C, altitude(C, B, E), Line(C, D) we get C == line_intersection(Line(C, D), altitude(C, B, E))
By line_intersection_definition on G, Line(E, G), Line(G, H) we get G == line_intersection(Line(E, G), Line(G, H))
By median_definition on orthocenter(C, E, F), F, A, Line(E, G) we get Line(E, G) == median(orthocenter(C, E, F), A, F)
By median_definition on B, F, A, Line(B, G) we get Line(B, G) == median(B, A, F)
By line_intersection_definition on G, Line(D, G), Line(B, G) we get G == line_intersection(Line(B, G), Line(D, G))
By perpendicular_line_definition on F, Line(E, F), altitude(C, E, F) we get Line(E, F) == perpendicular_line(F, altitude(C, E, F))
By perpendicular_line_definition on H, Line(G, H), Line(C, D) we get Line(G, H) == perpendicular_line(H, Line(C, D))
By line_intersection_definition on C, altitude(C, E, F), f we get C == line_intersection(f, altitude(C, E, F))
By line_intersection_definition on D, Line(C, D), Line(D, H) we get D == line_intersection(Line(C, D), Line(D, H))
By perpendicular_line_definition on E, Line(E, F), altitude(C, E, F) we get Line(E, F) == perpendicular_line(E, altitude(C, E, F))
By line_intersection_definition on orthocenter(C, E, F), Line(E, G), altitude(C, E, F) we get orthocenter(C, E, F) == line_intersection(Line(E, G), altitude(C, E, F))
By perpendicular_line_definition on orthocenter(B, C, E), Line(E, H), f we get Line(E, H) == perpendicular_line(orthocenter(B, C, E), f)
By line_intersection_definition on D, Line(D, G), i we get D == line_intersection(i, Line(D, G))
By perpendicular_line_definition on B, Line(B, E), altitude(C, B, E) we get Line(B, E) == perpendicular_line(B, altitude(C, B, E))
By line_intersection_definition on G, g, Line(B, G) we get G == line_intersection(g, Line(B, G))
By line_intersection_definition on D, Line(D, H), i we get D == line_intersection(i, Line(D, H))
By line_intersection_definition on B, Line(B, G), Line(B, E) we get B == line_intersection(Line(B, E), Line(B, G))
By perpendicular_line_definition on orthocenter(C, E, F), altitude(C, E, F), Line(E, F) we get altitude(C, E, F) == perpendicular_line(orthocenter(C, E, F), Line(E, F))
By line_intersection_definition on G, Line(B, G), Line(G, H) we get G == line_intersection(Line(B, G), Line(G, H))
By perpendicular_line_definition on midpoint(G, H), Line(C, D), Line(B, F) we get Line(C, D) == perpendicular_line(midpoint(G, H), Line(B, F))
By line_intersection_definition on C, altitude(C, E, F), g we get C == line_intersection(g, altitude(C, E, F))
By line_intersection_definition on C, Line(C, center(Circle(A, B, C))), altitude(C, B, E) we get C == line_intersection(altitude(C, B, E), Line(C, center(Circle(A, B, C))))
By line_intersection_definition on center(Circle(A, B, C)), median(center(Circle(A, B, C)), A, B), Line(A, center(Circle(A, B, C))) we get center(Circle(A, B, C)) == line_intersection(Line(A, center(Circle(A, B, C))), median(center(Circle(A, B, C)), A, B))
By line_intersection_definition on D, h, Line(D, H) we get D == line_intersection(h, Line(D, H))
By line_intersection_definition on H, Line(F, H), Line(D, H) we get H == line_intersection(Line(D, H), Line(F, H))
By median_definition on midpoint(B, F), H, G, Line(C, D) we get Line(C, D) == median(midpoint(B, F), G, H)
By line_intersection_definition on F, Line(F, H), Line(B, F) we get F == line_intersection(Line(B, F), Line(F, H))
By perpendicular_line_definition on D, Line(C, D), Line(G, H) we get Line(C, D) == perpendicular_line(D, Line(G, H))
By median_definition on D, H, G, Line(C, D) we get Line(C, D) == median(D, G, H)
By line_intersection_definition on D, h, Line(D, G) we get D == line_intersection(h, Line(D, G))
By line_intersection_definition on G, Line(E, G), Line(B, G) we get G == line_intersection(Line(B, G), Line(E, G))
By perpendicular_line_definition on E, Line(C, D), Line(G, H) we get Line(C, D) == perpendicular_line(E, Line(G, H))
By line_intersection_definition on G, Line(E, G), Line(D, G) we get G == line_intersection(Line(D, G), Line(E, G))
By median_definition on D, A, F, Line(D, G) we get Line(D, G) == median(D, A, F)
By median_definition on H, F, A, Line(G, H) we get Line(G, H) == median(H, A, F)
By perpendicular_line_definition on E, Line(B, E), altitude(C, B, E) we get Line(B, E) == perpendicular_line(E, altitude(C, B, E))
By line_intersection_definition on D, Line(D, F), Line(D, G) we get D == line_intersection(Line(D, F), Line(D, G))
By line_intersection_definition on orthocenter(C, E, F), altitude(C, E, F), Line(B, F) we get orthocenter(C, E, F) == line_intersection(Line(B, F), altitude(C, E, F))
By line_intersection_definition on H, Line(G, H), Line(E, H) we get H == line_intersection(Line(E, H), Line(G, H))
By line_intersection_definition on H, f, Line(G, H) we get H == line_intersection(f, Line(G, H))
By line_intersection_definition on orthocenter(B, C, E), altitude(C, B, E), Line(B, F) we get orthocenter(B, C, E) == line_intersection(Line(B, F), altitude(C, B, E))
By median_definition on midpoint(G, H), B, F, Line(C, D) we get Line(C, D) == median(midpoint(G, H), B, F)
By perpendicular_line_definition on G, Line(G, H), Line(C, D) we get Line(G, H) == perpendicular_line(G, Line(C, D))
By same_angle_v1 on F, G, A, H we get angle(A, F, H) == angle(G, F, H) mod 360
By same_angle_v3 on G, C, A, H we get angle(C, G, H) == angle(A, G, H) + 180 mod 360
By same_angle_v3 on G, F, A, H we get angle(F, G, H) == angle(A, G, H) + 180 mod 360
By same_angle_v2 on F, C, A, H we get angle(C, F, H) == angle(A, F, H) + 180 mod 360
By same_angle_v3 on G, C, A, B we get angle(C, G, B) == angle(A, G, B) + 180 mod 360
By same_angle_v3 on G, C, A, D we get angle(C, G, D) == angle(A, G, D) + 180 mod 360
By same_angle_v1 on H, B, C, G we get angle(B, H, G) == angle(C, H, G) mod 360
By same_angle_v2 on F, C, G, H we get angle(C, F, H) == angle(G, F, H) + 180 mod 360
By same_angle_v3 on G, F, A, D we get angle(F, G, D) == angle(A, G, D) + 180 mod 360
By same_angle_v3 on G, F, A, B we get angle(F, G, B) == angle(A, G, B) + 180 mod 360
By same_angle_v3 on B, H, C, G we get angle(H, B, G) == angle(C, B, G) + 180 mod 360
By same_angle_v0 on G, F, C, H we get angle(C, G, H) == angle(F, G, H) mod 360
By between_imply_not_between on H, midpoint(G, H), G we get collinear_and_not_between(G, H, midpoint(G, H))
By between_imply_not_between on G, midpoint(G, H), H we get collinear_and_not_between(H, G, midpoint(G, H))
By circle_radius_v0_r on H, Circle(C, E, G) we get radius(Circle(C, E, G)) == distance(H, center(Circle(C, E, G)))
By circle_radius_v0_r on C, Circle(C, E, G) we get radius(Circle(C, E, G)) == distance(C, center(Circle(C, E, G)))
By circle_radius_v0_r on G, Circle(C, E, G) we get radius(Circle(C, E, G)) == distance(G, center(Circle(C, E, G)))
By circle_radius_v0_r on E, Circle(C, E, G) we get radius(Circle(C, E, G)) == distance(E, center(Circle(C, E, G)))
By angle_to_center on E, C, H, Circle(C, E, G) we get 2 * angle(E, C, H) == angle(E, center(Circle(C, E, G)), H) mod 360
By angle_to_center on C, H, G, Circle(C, E, G) we get 2 * angle(C, H, G) == angle(C, center(Circle(C, E, G)), G) mod 360
By angle_to_center on H, G, E, Circle(C, E, G) we get 2 * angle(H, G, E) == angle(H, center(Circle(C, E, G)), E) mod 360
By angle_to_center on E, H, G, Circle(C, E, G) we get 2 * angle(E, H, G) == angle(E, center(Circle(C, E, G)), G) mod 360
By angle_to_center on C, E, G, Circle(C, E, G) we get 2 * angle(C, E, G) == angle(C, center(Circle(C, E, G)), G) mod 360
By angle_to_center on E, H, C, Circle(C, E, G) we get 2 * angle(E, H, C) == angle(E, center(Circle(C, E, G)), C) mod 360
By angle_to_center on C, G, H, Circle(C, E, G) we get 2 * angle(C, G, H) == angle(C, center(Circle(C, E, G)), H) mod 360
By angle_to_center on G, E, C, Circle(C, E, G) we get 2 * angle(G, E, C) == angle(G, center(Circle(C, E, G)), C) mod 360
By angle_to_center on E, C, G, Circle(C, E, G) we get 2 * angle(E, C, G) == angle(E, center(Circle(C, E, G)), G) mod 360
By angle_to_center on G, C, H, Circle(C, E, G) we get 2 * angle(G, C, H) == angle(G, center(Circle(C, E, G)), H) mod 360
By angle_to_center on E, G, H, Circle(C, E, G) we get 2 * angle(E, G, H) == angle(E, center(Circle(C, E, G)), H) mod 360
By angle_to_center on G, H, C, Circle(C, E, G) we get 2 * angle(G, H, C) == angle(G, center(Circle(C, E, G)), C) mod 360
By angle_to_center on G, C, E, Circle(C, E, G) we get 2 * angle(G, C, E) == angle(G, center(Circle(C, E, G)), E) mod 360
By angle_to_center on H, E, G, Circle(C, E, G) we get 2 * angle(H, E, G) == angle(H, center(Circle(C, E, G)), G) mod 360
By angle_to_center on C, H, E, Circle(C, E, G) we get 2 * angle(C, H, E) == angle(C, center(Circle(C, E, G)), E) mod 360
By angle_to_center on H, G, C, Circle(C, E, G) we get 2 * angle(H, G, C) == angle(H, center(Circle(C, E, G)), C) mod 360
By angle_to_center on H, E, C, Circle(C, E, G) we get 2 * angle(H, E, C) == angle(H, center(Circle(C, E, G)), C) mod 360
By angle_to_center on G, E, H, Circle(C, E, G) we get 2 * angle(G, E, H) == angle(G, center(Circle(C, E, G)), H) mod 360
By angle_to_center on G, H, E, Circle(C, E, G) we get 2 * angle(G, H, E) == angle(G, center(Circle(C, E, G)), E) mod 360
By angle_to_center on C, G, E, Circle(C, E, G) we get 2 * angle(C, G, E) == angle(C, center(Circle(C, E, G)), E) mod 360
By angle_to_center on C, E, H, Circle(C, E, G) we get 2 * angle(C, E, H) == angle(C, center(Circle(C, E, G)), H) mod 360
By angle_to_center on H, C, E, Circle(C, E, G) we get 2 * angle(H, C, E) == angle(H, center(Circle(C, E, G)), E) mod 360
By angle_to_center on E, G, C, Circle(C, E, G) we get 2 * angle(E, G, C) == angle(E, center(Circle(C, E, G)), C) mod 360
By angle_to_center on H, C, G, Circle(C, E, G) we get 2 * angle(H, C, G) == angle(H, center(Circle(C, E, G)), G) mod 360
By in_imply_collinear on center(Circle(A, B, C)), midpoint(A, B), E we get collinear(E, midpoint(A, B), center(Circle(A, B, C)))
By sss_anti_congruence_v0 on D, F, H, D, B, G we get anti_congruent_triangles(B, D, G, F, D, H)
By in_imply_collinear on midpoint(G, H), D, C we get collinear(C, D, midpoint(G, H))
By in_imply_collinear on orthocenter(B, C, E), F, midpoint(B, F) we get collinear(F, midpoint(B, F), orthocenter(B, C, E))
By sss_anti_congruence_v1 on H, E, F, G, E, B we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v1 on D, H, G, D, G, H we get anti_congruent_triangles(D, G, H, D, H, G)
By in_imply_collinear on orthocenter(C, E, F), B, F we get collinear(B, F, orthocenter(C, E, F))
By in_imply_collinear on orthocenter(C, E, F), G, E we get collinear(E, G, orthocenter(C, E, F))
By sss_anti_congruence_v1 on G, D, H, H, D, G we get anti_congruent_triangles(D, G, H, D, H, G)
By sss_anti_congruence_v0 on H, D, F, G, D, B we get anti_congruent_triangles(B, D, G, F, D, H)
By in_imply_collinear on orthocenter(B, C, E), F, B we get collinear(B, F, orthocenter(B, C, E))
By in_imply_collinear on midpoint(G, H), D, midpoint(B, F) we get collinear(D, midpoint(B, F), midpoint(G, H))
By in_imply_collinear on orthocenter(B, C, E), H, E we get collinear(E, H, orthocenter(B, C, E))
By in_imply_collinear on orthocenter(C, E, F), B, midpoint(B, F) we get collinear(B, midpoint(B, F), orthocenter(C, E, F))
By sss_anti_congruence_v0 on F, H, D, B, G, D we get anti_congruent_triangles(B, D, G, F, D, H)
By in_imply_collinear on midpoint(G, H), midpoint(B, F), E we get collinear(E, midpoint(B, F), midpoint(G, H))
By sss_anti_congruence_v1 on G, F, H, H, B, G we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v1 on H, F, D, G, B, D we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v0 on D, F, H, D, B, G we get anti_congruent_triangles(B, D, G, F, D, H)
By internal_angle_bisector_definition_v0 on G, midpoint(B, F), H, E we get angle(G, E, midpoint(B, F)) == angle(midpoint(B, F), E, H) mod 360
By perpendicular_bisector_sufficient_conditions on A, B, midpoint(A, B), center(Circle(A, B, C)) we get perpendicular_bisector(A, B) == Line(midpoint(A, B), center(Circle(A, B, C)))
By sss_anti_congruence_v0 on D, F, H, D, B, G we get anti_congruent_triangles(B, D, G, F, D, H)
By in_imply_collinear on orthocenter(B, C, E), midpoint(B, F), B we get collinear(B, midpoint(B, F), orthocenter(B, C, E))
By in_imply_collinear on midpoint(G, H), midpoint(B, F), C we get collinear(C, midpoint(B, F), midpoint(G, H))
By point_on_perpendicular_bisector on B, F, midpoint(G, H), Line(C, D) we get distance(B, midpoint(G, H)) == distance(F, midpoint(G, H))
By sss_anti_congruence_v1 on F, D, H, B, D, G we get anti_congruent_triangles(B, D, G, F, D, H)
By in_imply_collinear on orthocenter(C, E, F), F, midpoint(B, F) we get collinear(F, midpoint(B, F), orthocenter(C, E, F))
By sss_anti_congruence_v1 on G, B, E, H, F, E we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v0 on H, F, E, G, B, E we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v1 on D, H, G, D, G, H we get anti_congruent_triangles(D, G, H, D, H, G)
By sss_anti_congruence_v1 on F, H, E, B, G, E we get anti_congruent_triangles(B, E, G, F, E, H)
By in_imply_collinear on midpoint(G, H), C, E we get collinear(C, E, midpoint(G, H))
By sss_anti_congruence_v1 on D, H, F, D, G, B we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v0 on B, G, E, F, H, E we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v0 on F, H, D, B, G, D we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v1 on B, E, G, F, E, H we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v1 on G, D, B, H, D, F we get anti_congruent_triangles(B, D, G, F, D, H)
By in_imply_collinear on midpoint(G, H), D, E we get collinear(D, E, midpoint(G, H))
By sss_anti_congruence_v0 on H, B, G, G, F, H we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v0 on G, H, B, H, G, F we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v1 on G, F, H, H, B, G we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v0 on E, B, G, E, F, H we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v1 on G, F, H, H, B, G we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v0 on D, G, H, D, H, G we get anti_congruent_triangles(D, G, H, D, H, G)
By sss_anti_congruence_v1 on D, B, G, D, F, H we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v1 on F, H, E, B, G, E we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v1 on G, F, H, H, B, G we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v1 on G, D, B, H, D, F we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v1 on H, F, D, G, B, D we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v0 on B, G, E, F, H, E we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v0 on D, G, H, D, H, G we get anti_congruent_triangles(D, G, H, D, H, G)
By point_on_perpendicular_bisector on F, A, orthocenter(C, E, F), Line(E, G) we get distance(A, orthocenter(C, E, F)) == distance(F, orthocenter(C, E, F))
By reverse_direction on B, G we get 180 == direction(B, G) - direction(G, B) mod 360
By sss_anti_congruence_v1 on H, G, B, G, H, F we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v1 on E, G, B, E, H, F we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v1 on D, H, F, D, G, B we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v1 on H, G, F, G, H, B we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v0 on H, D, F, G, D, B we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v0 on H, F, G, G, B, H we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v1 on G, D, B, H, D, F we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v1 on B, G, D, F, H, D we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v0 on G, B, D, H, F, D we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v1 on G, B, E, H, F, E we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v1 on D, H, G, D, G, H we get anti_congruent_triangles(D, G, H, D, H, G)
By sss_anti_congruence_v0 on H, D, F, G, D, B we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v1 on F, H, G, B, G, H we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v1 on F, D, H, B, D, G we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v1 on B, E, G, F, E, H we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v0 on H, B, G, G, F, H we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v1 on D, B, G, D, F, H we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v0 on G, H, D, H, G, D we get anti_congruent_triangles(D, G, H, D, H, G)
By sss_anti_congruence_v0 on H, D, G, G, D, H we get anti_congruent_triangles(D, G, H, D, H, G)
By sss_anti_congruence_v0 on G, E, B, H, E, F we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v1 on F, D, H, B, D, G we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v1 on F, D, H, B, D, G we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v0 on B, G, E, F, H, E we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v1 on H, F, D, G, B, D we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v0 on F, H, D, B, G, D we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v1 on F, H, G, B, G, H we get anti_congruent_triangles(B, G, H, F, H, G)
By aa_anti_similarity on A, midpoint(A, B), E, B, midpoint(A, B), E we get anti_similar_triangles(A, E, midpoint(A, B), B, E, midpoint(A, B))
By sss_anti_congruence_v1 on G, B, H, H, F, G we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v0 on H, F, E, G, B, E we get anti_congruent_triangles(B, E, G, F, E, H)
By point_on_perpendicular_bisector on H, G, midpoint(B, F), Line(C, D) we get distance(G, midpoint(B, F)) == distance(H, midpoint(B, F))
By sss_anti_congruence_v1 on E, F, H, E, B, G we get anti_congruent_triangles(B, E, G, F, E, H)
By reverse_direction on D, H we get 180 == direction(D, H) - direction(H, D) mod 360
By sss_anti_congruence_v1 on G, B, E, H, F, E we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v0 on B, G, H, F, H, G we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v0 on H, B, G, G, F, H we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v1 on D, H, F, D, G, B we get anti_congruent_triangles(B, D, G, F, D, H)
By reverse_direction on G, D we get 180 == direction(G, D) - direction(D, G) mod 360
By sss_anti_congruence_v0 on F, G, H, B, H, G we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v1 on H, F, D, G, B, D we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v1 on H, F, D, G, B, D we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v1 on G, D, B, H, D, F we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v1 on H, G, D, G, H, D we get anti_congruent_triangles(D, G, H, D, H, G)
By sss_anti_congruence_v1 on G, D, H, H, D, G we get anti_congruent_triangles(D, G, H, D, H, G)
By sss_anti_congruence_v0 on H, F, G, G, B, H we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v0 on B, G, H, F, H, G we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v0 on H, B, G, G, F, H we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v1 on B, E, G, F, E, H we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v0 on G, B, D, H, F, D we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v0 on F, H, D, B, G, D we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v1 on D, H, F, D, G, B we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v1 on F, H, E, B, G, E we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v0 on B, D, G, F, D, H we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v0 on E, B, G, E, F, H we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v1 on H, G, D, G, H, D we get anti_congruent_triangles(D, G, H, D, H, G)
By aa_anti_similarity on B, E, midpoint(A, B), A, E, midpoint(A, B) we get anti_similar_triangles(A, E, midpoint(A, B), B, E, midpoint(A, B))
By sss_anti_congruence_v0 on H, D, F, G, D, B we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v0 on F, G, H, B, H, G we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v0 on B, G, E, F, H, E we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v1 on E, G, B, E, H, F we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v1 on F, H, G, B, G, H we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v0 on F, E, H, B, E, G we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v0 on F, G, H, B, H, G we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v0 on B, G, E, F, H, E we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v1 on B, H, G, F, G, H we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v0 on G, H, B, H, G, F we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v0 on B, D, G, F, D, H we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v1 on D, B, G, D, F, H we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v0 on H, F, E, G, B, E we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v0 on H, D, G, G, D, H we get anti_congruent_triangles(D, G, H, D, H, G)
By sss_anti_congruence_v0 on D, G, H, D, H, G we get anti_congruent_triangles(D, G, H, D, H, G)
By sss_anti_congruence_v0 on G, H, F, H, G, B we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v0 on E, B, G, E, F, H we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v1 on H, G, D, G, H, D we get anti_congruent_triangles(D, G, H, D, H, G)
By sss_anti_congruence_v0 on G, B, D, H, F, D we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v1 on E, G, B, E, H, F we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v0 on G, E, B, H, E, F we get anti_congruent_triangles(B, E, G, F, E, H)
By double_perpendicular_and_parallel_v0 on Line(B, F), Line(C, D), Line(G, H) we get parallel(Line(B, F), Line(G, H))
By sss_anti_congruence_v0 on D, F, H, D, B, G we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v0 on G, H, D, H, G, D we get anti_congruent_triangles(D, G, H, D, H, G)
By sss_anti_congruence_v1 on G, B, E, H, F, E we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v0 on G, H, F, H, G, B we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v1 on H, E, F, G, E, B we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v0 on G, H, D, H, G, D we get anti_congruent_triangles(D, G, H, D, H, G)
By sss_anti_congruence_v0 on E, H, F, E, G, B we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v0 on G, H, D, H, G, D we get anti_congruent_triangles(D, G, H, D, H, G)
By sss_anti_congruence_v0 on H, D, G, G, D, H we get anti_congruent_triangles(D, G, H, D, H, G)
By sss_anti_congruence_v1 on B, G, D, F, H, D we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v0 on G, H, D, H, G, D we get anti_congruent_triangles(D, G, H, D, H, G)
By sss_anti_congruence_v1 on G, F, H, H, B, G we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v0 on H, F, G, G, B, H we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v1 on E, F, H, E, B, G we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v0 on D, G, H, D, H, G we get anti_congruent_triangles(D, G, H, D, H, G)
By sss_anti_congruence_v0 on G, H, F, H, G, B we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v1 on H, G, F, G, H, B we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v0 on G, H, F, H, G, B we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v1 on E, G, B, E, H, F we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v0 on B, D, G, F, D, H we get anti_congruent_triangles(B, D, G, F, D, H)
By reverse_direction on midpoint(A, B), E we get 180 == direction(midpoint(A, B), E) - direction(E, midpoint(A, B)) mod 360
By sss_anti_congruence_v0 on H, D, G, G, D, H we get anti_congruent_triangles(D, G, H, D, H, G)
By sss_anti_congruence_v0 on G, E, B, H, E, F we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v0 on F, E, H, B, E, G we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v1 on E, G, B, E, H, F we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v0 on H, F, E, G, B, E we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v1 on D, B, G, D, F, H we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v1 on E, G, B, E, H, F we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v1 on B, E, G, F, E, H we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v0 on H, F, E, G, B, E we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v1 on H, G, D, G, H, D we get anti_congruent_triangles(D, G, H, D, H, G)
By sss_anti_congruence_v1 on B, E, G, F, E, H we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v0 on F, H, D, B, G, D we get anti_congruent_triangles(B, D, G, F, D, H)
By aa_anti_similarity on B, midpoint(A, B), E, A, midpoint(A, B), E we get anti_similar_triangles(A, E, midpoint(A, B), B, E, midpoint(A, B))
By sss_anti_congruence_v1 on G, B, H, H, F, G we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v1 on H, E, F, G, E, B we get anti_congruent_triangles(B, E, G, F, E, H)
By reverse_direction on F, H we get 180 == direction(F, H) - direction(H, F) mod 360
By sss_anti_congruence_v0 on E, B, G, E, F, H we get anti_congruent_triangles(B, E, G, F, E, H)
By isosceles_triangle_properties on D, H, G we get distance(D, G) == distance(D, H), angle(D, H, G) == angle(H, G, D) mod 360
By sss_anti_congruence_v1 on H, G, B, G, H, F we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v0 on B, G, H, F, H, G we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v1 on G, D, B, H, D, F we get anti_congruent_triangles(B, D, G, F, D, H)
By reverse_direction on G, B we get 180 == direction(G, B) - direction(B, G) mod 360
By sss_anti_congruence_v1 on H, G, F, G, H, B we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v1 on G, B, H, H, F, G we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v0 on D, G, B, D, H, F we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v1 on F, H, E, B, G, E we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v1 on G, D, H, H, D, G we get anti_congruent_triangles(D, G, H, D, H, G)
By sss_anti_congruence_v0 on G, B, D, H, F, D we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v1 on H, E, F, G, E, B we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v0 on F, E, H, B, E, G we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v0 on D, F, H, D, B, G we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v0 on G, H, F, H, G, B we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v1 on G, F, H, H, B, G we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v1 on F, H, G, B, G, H we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v1 on E, F, H, E, B, G we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v0 on D, G, B, D, H, F we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v1 on D, B, G, D, F, H we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v1 on E, F, H, E, B, G we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v1 on D, H, G, D, G, H we get anti_congruent_triangles(D, G, H, D, H, G)
By reverse_direction on D, G we get 180 == direction(D, G) - direction(G, D) mod 360
By sss_anti_congruence_v0 on F, E, H, B, E, G we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v1 on G, B, H, H, F, G we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v0 on D, G, H, D, H, G we get anti_congruent_triangles(D, G, H, D, H, G)
By sss_anti_congruence_v0 on H, B, G, G, F, H we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v1 on D, H, F, D, G, B we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v0 on G, H, F, H, G, B we get anti_congruent_triangles(B, G, H, F, H, G)
By aa_anti_similarity on A, E, midpoint(A, B), B, E, midpoint(A, B) we get anti_similar_triangles(A, E, midpoint(A, B), B, E, midpoint(A, B))
By sss_anti_congruence_v0 on D, G, B, D, H, F we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v1 on D, B, G, D, F, H we get anti_congruent_triangles(B, D, G, F, D, H)
By reverse_direction on E, midpoint(A, B) we get 180 == direction(E, midpoint(A, B)) - direction(midpoint(A, B), E) mod 360
By sss_anti_congruence_v0 on B, D, G, F, D, H we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v0 on E, B, G, E, F, H we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v0 on H, F, E, G, B, E we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v1 on H, G, B, G, H, F we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v1 on B, H, G, F, G, H we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v1 on D, H, G, D, G, H we get anti_congruent_triangles(D, G, H, D, H, G)
By sss_anti_congruence_v0 on H, F, G, G, B, H we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v1 on G, B, H, H, F, G we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v1 on D, H, G, D, G, H we get anti_congruent_triangles(D, G, H, D, H, G)
By sss_anti_congruence_v0 on E, H, F, E, G, B we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v0 on E, H, F, E, G, B we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v0 on G, H, B, H, G, F we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v0 on D, G, B, D, H, F we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v1 on B, H, G, F, G, H we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v0 on H, F, G, G, B, H we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v0 on F, G, H, B, H, G we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v1 on H, G, D, G, H, D we get anti_congruent_triangles(D, G, H, D, H, G)
By sss_anti_congruence_v0 on D, G, B, D, H, F we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v0 on H, D, G, G, D, H we get anti_congruent_triangles(D, G, H, D, H, G)
By sss_anti_congruence_v1 on G, D, H, H, D, G we get anti_congruent_triangles(D, G, H, D, H, G)
By sss_anti_congruence_v0 on F, H, D, B, G, D we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v1 on H, F, D, G, B, D we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v1 on H, G, F, G, H, B we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v0 on D, G, B, D, H, F we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v0 on G, B, D, H, F, D we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v0 on H, D, G, G, D, H we get anti_congruent_triangles(D, G, H, D, H, G)
By sss_anti_congruence_v1 on G, B, E, H, F, E we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v1 on B, H, G, F, G, H we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v1 on B, G, D, F, H, D we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v1 on G, D, H, H, D, G we get anti_congruent_triangles(D, G, H, D, H, G)
By sss_anti_congruence_v1 on F, H, G, B, G, H we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v0 on H, D, F, G, D, B we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v0 on B, G, E, F, H, E we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v0 on H, D, F, G, D, B we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v0 on E, H, F, E, G, B we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v0 on E, H, F, E, G, B we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v1 on D, H, F, D, G, B we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v1 on E, F, H, E, B, G we get anti_congruent_triangles(B, E, G, F, E, H)
By isosceles_triangle_properties on D, G, H we get distance(D, G) == distance(D, H), angle(D, G, H) == angle(G, H, D) mod 360
By reverse_direction on H, F we get 180 == direction(H, F) - direction(F, H) mod 360
By sss_anti_congruence_v1 on F, D, H, B, D, G we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v0 on H, F, G, G, B, H we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v1 on H, G, D, G, H, D we get anti_congruent_triangles(D, G, H, D, H, G)
By sss_anti_congruence_v0 on G, B, D, H, F, D we get anti_congruent_triangles(B, D, G, F, D, H)
By internal_angle_bisector_definition_v0 on H, midpoint(B, F), G, E we get angle(H, E, midpoint(B, F)) == angle(midpoint(B, F), E, G) mod 360
By sss_anti_congruence_v0 on G, H, B, H, G, F we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v1 on B, G, D, F, H, D we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v1 on G, B, H, H, F, G we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v0 on B, G, H, F, H, G we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v1 on B, E, G, F, E, H we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v1 on H, E, F, G, E, B we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v0 on B, D, G, F, D, H we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v1 on F, H, E, B, G, E we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v0 on D, G, H, D, H, G we get anti_congruent_triangles(D, G, H, D, H, G)
By sss_anti_congruence_v0 on B, D, G, F, D, H we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v0 on E, H, F, E, G, B we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v1 on H, G, F, G, H, B we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v0 on D, F, H, D, B, G we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v1 on E, F, H, E, B, G we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v0 on G, E, B, H, E, F we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v0 on F, E, H, B, E, G we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v1 on H, G, B, G, H, F we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v0 on F, G, H, B, H, G we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v1 on H, G, F, G, H, B we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v0 on G, H, B, H, G, F we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v0 on F, G, H, B, H, G we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v1 on B, H, G, F, G, H we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v0 on G, E, B, H, E, F we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v1 on B, H, G, F, G, H we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v1 on B, G, D, F, H, D we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v1 on H, E, F, G, E, B we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v1 on G, D, B, H, D, F we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v1 on H, G, B, G, H, F we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v1 on B, G, D, F, H, D we get anti_congruent_triangles(B, D, G, F, D, H)
By sss_anti_congruence_v0 on B, G, H, F, H, G we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v0 on G, H, B, H, G, F we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v1 on F, H, E, B, G, E we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v0 on G, H, D, H, G, D we get anti_congruent_triangles(D, G, H, D, H, G)
By sss_anti_congruence_v1 on G, D, H, H, D, G we get anti_congruent_triangles(D, G, H, D, H, G)
By sss_anti_congruence_v0 on F, E, H, B, E, G we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v0 on B, G, H, F, H, G we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v1 on H, G, B, G, H, F we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v0 on E, B, G, E, F, H we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v1 on G, B, E, H, F, E we get anti_congruent_triangles(B, E, G, F, E, H)
By sss_anti_congruence_v1 on F, D, H, B, D, G we get anti_congruent_triangles(B, D, G, F, D, H)
By reverse_direction on H, D we get 180 == direction(H, D) - direction(D, H) mod 360
By sss_anti_congruence_v0 on H, B, G, G, F, H we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v1 on F, H, G, B, G, H we get anti_congruent_triangles(B, G, H, F, H, G)
By sss_anti_congruence_v0 on G, E, B, H, E, F we get anti_congruent_triangles(B, E, G, F, E, H)
By external_angle_bisector_definition_v0_r on A, E, A, midpoint(A, B) we get Line(E, midpoint(A, B)) == external_angle_bisector(A, midpoint(A, B), A)
By similar_triangle_basic_properties on H, E, G, B, E, A we get angle(B, E, A) == angle(H, E, G) mod 360, angle(E, A, B) == angle(E, G, H) mod 360, angle(A, B, E) == angle(G, H, E) mod 360, log(distance(B, E)) + log(distance(E, G)) == log(distance(E, H)) + log(distance(A, E)), log(distance(A, E)) + log(distance(G, H)) == log(distance(E, G)) + log(distance(A, B)), log(distance(A, B)) + log(distance(E, H)) == log(distance(G, H)) + log(distance(B, E))
By similar_triangle_basic_properties on E, H, G, E, B, A we get angle(E, B, A) == angle(E, H, G) mod 360, angle(B, A, E) == angle(H, G, E) mod 360, angle(A, E, B) == angle(G, E, H) mod 360, log(distance(B, E)) + log(distance(G, H)) == log(distance(E, H)) + log(distance(A, B)), log(distance(A, B)) + log(distance(E, G)) == log(distance(G, H)) + log(distance(A, E)), log(distance(A, E)) + log(distance(E, H)) == log(distance(E, G)) + log(distance(B, E))
By anti_similar_triangle_basic_properties on midpoint(B, F), D, F, midpoint(B, F), D, B we get angle(midpoint(B, F), D, F) == 0 - angle(midpoint(B, F), D, B) mod 360, angle(D, F, midpoint(B, F)) == 0 - angle(D, B, midpoint(B, F)) mod 360, angle(F, midpoint(B, F), D) == 0 - angle(B, midpoint(B, F), D) mod 360, log(distance(D, midpoint(B, F))) + log(distance(B, D)) == log(distance(D, midpoint(B, F))) + log(distance(D, F)), log(distance(B, D)) + log(distance(F, midpoint(B, F))) == log(distance(D, F)) + log(distance(B, midpoint(B, F))), log(distance(B, midpoint(B, F))) + log(distance(D, midpoint(B, F))) == log(distance(F, midpoint(B, F))) + log(distance(D, midpoint(B, F)))
By anti_similar_triangle_basic_properties on G, H, E, H, G, E we get angle(G, H, E) == 0 - angle(H, G, E) mod 360, angle(H, E, G) == 0 - angle(G, E, H) mod 360, angle(E, G, H) == 0 - angle(E, H, G) mod 360, log(distance(G, H)) + log(distance(E, G)) == log(distance(G, H)) + log(distance(E, H)), log(distance(E, G)) + log(distance(E, G)) == log(distance(E, H)) + log(distance(E, H)), log(distance(E, G)) + log(distance(G, H)) == log(distance(E, H)) + log(distance(G, H))
By anti_similar_triangle_basic_properties on H, E, G, A, E, B we get angle(H, E, G) == 0 - angle(A, E, B) mod 360, angle(E, G, H) == 0 - angle(E, B, A) mod 360, angle(G, H, E) == 0 - angle(B, A, E) mod 360, log(distance(A, E)) + log(distance(E, G)) == log(distance(E, H)) + log(distance(B, E)), log(distance(B, E)) + log(distance(G, H)) == log(distance(E, G)) + log(distance(A, B)), log(distance(A, B)) + log(distance(E, H)) == log(distance(G, H)) + log(distance(A, E))
By anti_similar_triangle_basic_properties on G, E, H, B, E, A we get angle(G, E, H) == 0 - angle(B, E, A) mod 360, angle(E, H, G) == 0 - angle(E, A, B) mod 360, angle(H, G, E) == 0 - angle(A, B, E) mod 360, log(distance(B, E)) + log(distance(E, H)) == log(distance(E, G)) + log(distance(A, E)), log(distance(A, E)) + log(distance(G, H)) == log(distance(E, H)) + log(distance(A, B)), log(distance(A, B)) + log(distance(E, G)) == log(distance(G, H)) + log(distance(B, E))
By anti_similar_triangle_basic_properties on C, H, G, C, F, B we get angle(C, H, G) == 0 - angle(C, F, B) mod 360, angle(H, G, C) == 0 - angle(F, B, C) mod 360, angle(G, C, H) == 0 - angle(B, C, F) mod 360, log(distance(C, F)) + log(distance(G, H)) == log(distance(C, H)) + log(distance(B, F)), log(distance(B, F)) + log(distance(C, G)) == log(distance(G, H)) + log(distance(B, C)), log(distance(B, C)) + log(distance(C, H)) == log(distance(C, G)) + log(distance(C, F))
By internal_angle_bisector_definition_v0_r on D, midpoint(B, F), C, E we get internal_angle_bisector(C, E, D) == Line(E, midpoint(B, F))
By isosceles_triangle_midpoint on C, H, G we get midpoint(G, H) in median(C, G, H)
By similar_triangle_basic_properties on C, G, H, C, F, B we get angle(C, F, B) == angle(C, G, H) mod 360, angle(F, B, C) == angle(G, H, C) mod 360, angle(B, C, F) == angle(H, C, G) mod 360, log(distance(C, F)) + log(distance(G, H)) == log(distance(C, G)) + log(distance(B, F)), log(distance(B, F)) + log(distance(C, H)) == log(distance(G, H)) + log(distance(B, C)), log(distance(B, C)) + log(distance(C, G)) == log(distance(C, H)) + log(distance(C, F))
By external_angle_bisector_definition_v0_r on E, A, E, midpoint(A, B) we get Line(A, midpoint(A, B)) == external_angle_bisector(E, midpoint(A, B), E)
By external_angle_bisector_definition_v0_r on B, E, B, midpoint(A, B) we get Line(E, midpoint(A, B)) == external_angle_bisector(B, midpoint(A, B), B)
By external_angle_bisector_definition_v0_r on E, B, E, midpoint(A, B) we get Line(B, midpoint(A, B)) == external_angle_bisector(E, midpoint(A, B), E)
By altitude_definition on C, H, G, Line(C, D) we get Line(C, D) == altitude(C, G, H)
By anti_similar_triangle_basic_properties on C, B, F, C, G, H we get angle(C, B, F) == 0 - angle(C, G, H) mod 360, angle(B, F, C) == 0 - angle(G, H, C) mod 360, angle(F, C, B) == 0 - angle(H, C, G) mod 360, log(distance(B, C)) + log(distance(G, H)) == log(distance(C, G)) + log(distance(B, F)), log(distance(B, F)) + log(distance(C, H)) == log(distance(G, H)) + log(distance(C, F)), log(distance(C, F)) + log(distance(C, G)) == log(distance(C, H)) + log(distance(B, C))
By internal_angle_bisector_definition_v0_r on D, midpoint(B, F), E, C we get internal_angle_bisector(D, C, E) == Line(C, midpoint(B, F))
By internal_angle_bisector_definition_v0_r on G, E, H, D we get Line(D, E) == internal_angle_bisector(G, D, H)
By anti_similar_triangle_basic_properties on H, G, C, G, H, C we get angle(H, G, C) == 0 - angle(G, H, C) mod 360, angle(G, C, H) == 0 - angle(H, C, G) mod 360, angle(C, H, G) == 0 - angle(C, G, H) mod 360, log(distance(G, H)) + log(distance(C, G)) == log(distance(G, H)) + log(distance(C, H)), log(distance(C, G)) + log(distance(C, G)) == log(distance(C, H)) + log(distance(C, H)), log(distance(C, G)) + log(distance(G, H)) == log(distance(C, H)) + log(distance(G, H))
By altitude_definition on center(Circle(A, B, C)), A, B, median(E, A, B) we get median(E, A, B) == altitude(center(Circle(A, B, C)), A, B)
By similar_triangle_basic_properties on B, F, C, H, G, C we get angle(B, F, C) == angle(H, G, C) mod 360, angle(F, C, B) == angle(G, C, H) mod 360, angle(C, B, F) == angle(C, H, G) mod 360, log(distance(B, F)) + log(distance(C, G)) == log(distance(G, H)) + log(distance(C, F)), log(distance(C, F)) + log(distance(C, H)) == log(distance(C, G)) + log(distance(B, C)), log(distance(B, C)) + log(distance(G, H)) == log(distance(C, H)) + log(distance(B, F))
By isosceles_triangle_altitude_v3 on E, G, H we get identical(perpendicular_bisector(G, H), internal_angle_bisector(G, E, H), perpendicular_line(E, Line(G, H)))
By internal_angle_bisector_definition_v0_r on B, E, A, midpoint(A, B) we get Line(E, midpoint(A, B)) == internal_angle_bisector(A, midpoint(A, B), B)
By perpendicular_bisector_properties on H, G we get perpendicular(Line(G, H), perpendicular_bisector(G, H)), midpoint(G, H) == line_intersection(Line(G, H), perpendicular_bisector(G, H))
By collinear_definition on G, H, midpoint(G, H) we get H in Line(G, midpoint(G, H)), midpoint(G, H) in Line(G, H), Line(G, H) == Line(G, midpoint(G, H)), 0 == 2 * angle(H, G, midpoint(G, H)) mod 360
By internal_angle_bisector_definition_v0_r on H, C, G, D we get Line(C, D) == internal_angle_bisector(G, D, H)
By isosceles_triangle_midpoint on D, H, G we get midpoint(G, H) in median(D, G, H)
By isosceles_triangle_midpoint on E, H, G we get midpoint(G, H) in median(E, G, H)
By collinear_definition on H, midpoint(G, H), G we get midpoint(G, H) in Line(G, H), G in Line(H, midpoint(G, H)), Line(G, H) == Line(H, midpoint(G, H)), 0 == 2 * angle(midpoint(G, H), H, G) mod 360
By collinear_definition on G, midpoint(G, H), H we get midpoint(G, H) in Line(G, H), H in Line(G, midpoint(G, H)), Line(G, H) == Line(G, midpoint(G, H)), 0 == 2 * angle(midpoint(G, H), G, H) mod 360
By collinear_definition on H, G, midpoint(G, H) we get G in Line(H, midpoint(G, H)), midpoint(G, H) in Line(G, H), Line(G, H) == Line(H, midpoint(G, H)), 0 == 2 * angle(G, H, midpoint(G, H)) mod 360
By perpendicular_lines_draw_intersection on Line(C, D), Line(G, H) we get exists(line_intersection(Line(C, D), Line(G, H)))
By isosceles_triangle_altitude_v2 on E, G, H we get identical(perpendicular_bisector(G, H), internal_angle_bisector(G, E, H), perpendicular_line(E, Line(G, H)))
By perpendicular_lines_draw_intersection on altitude(C, B, E), Line(B, E) we get exists(line_intersection(Line(B, E), altitude(C, B, E)))
By isosceles_triangle_altitude_v2 on E, H, G we get identical(perpendicular_bisector(G, H), internal_angle_bisector(G, E, H), perpendicular_line(E, Line(G, H)))
By isosceles_triangle_altitude_v3 on E, H, G we get identical(perpendicular_bisector(G, H), internal_angle_bisector(G, E, H), perpendicular_line(E, Line(G, H)))
By perpendicular_lines_draw_intersection on altitude(C, E, F), Line(E, F) we get exists(line_intersection(Line(E, F), altitude(C, E, F)))
By altitude_definition on orthocenter(C, E, F), G, C, Line(E, G) we get Line(E, G) == altitude(orthocenter(C, E, F), C, G)
By altitude_definition on B, E, center(Circle(A, B, C)), Line(A, B) we get Line(A, B) == altitude(B, E, center(Circle(A, B, C)))
By radical_axis_definition_v0 on midpoint(G, H), Circle(C, E, G), Circle(A, B, C) we get power_of_a_point(midpoint(G, H), Circle(A, B, C)) == power_of_a_point(midpoint(G, H), Circle(C, E, G))
By anti_similar_triangle_basic_properties on A, center(Circle(A, B, C)), C, C, center(Circle(A, B, C)), A we get angle(A, center(Circle(A, B, C)), C) == 0 - angle(C, center(Circle(A, B, C)), A) mod 360, angle(center(Circle(A, B, C)), C, A) == 0 - angle(center(Circle(A, B, C)), A, C) mod 360, angle(C, A, center(Circle(A, B, C))) == 0 - angle(A, C, center(Circle(A, B, C))) mod 360, log(distance(A, center(Circle(A, B, C)))) + log(distance(A, center(Circle(A, B, C)))) == log(distance(C, center(Circle(A, B, C)))) + log(distance(C, center(Circle(A, B, C)))), log(distance(A, center(Circle(A, B, C)))) + log(distance(A, C)) == log(distance(C, center(Circle(A, B, C)))) + log(distance(A, C)), log(distance(A, C)) + log(distance(A, center(Circle(A, B, C)))) == log(distance(A, C)) + log(distance(C, center(Circle(A, B, C))))
By anti_similar_triangle_basic_properties on G, E, D, H, E, D we get angle(G, E, D) == 0 - angle(H, E, D) mod 360, angle(E, D, G) == 0 - angle(E, D, H) mod 360, angle(D, G, E) == 0 - angle(D, H, E) mod 360, log(distance(E, G)) + log(distance(D, E)) == log(distance(E, H)) + log(distance(D, E)), log(distance(D, E)) + log(distance(D, G)) == log(distance(D, E)) + log(distance(D, H)), log(distance(D, G)) + log(distance(E, H)) == log(distance(D, H)) + log(distance(E, G))
By anti_similar_triangle_basic_properties on H, C, D, G, C, D we get angle(H, C, D) == 0 - angle(G, C, D) mod 360, angle(C, D, H) == 0 - angle(C, D, G) mod 360, angle(D, H, C) == 0 - angle(D, G, C) mod 360, log(distance(C, G)) + log(distance(C, D)) == log(distance(C, H)) + log(distance(C, D)), log(distance(C, D)) + log(distance(D, G)) == log(distance(C, D)) + log(distance(D, H)), log(distance(D, G)) + log(distance(C, H)) == log(distance(D, H)) + log(distance(C, G))
By anti_similar_triangle_basic_properties on B, center(Circle(A, B, C)), A, A, center(Circle(A, B, C)), B we get angle(B, center(Circle(A, B, C)), A) == 0 - angle(A, center(Circle(A, B, C)), B) mod 360, angle(center(Circle(A, B, C)), A, B) == 0 - angle(center(Circle(A, B, C)), B, A) mod 360, angle(A, B, center(Circle(A, B, C))) == 0 - angle(B, A, center(Circle(A, B, C))) mod 360, log(distance(A, center(Circle(A, B, C)))) + log(distance(A, center(Circle(A, B, C)))) == log(distance(B, center(Circle(A, B, C)))) + log(distance(B, center(Circle(A, B, C)))), log(distance(A, center(Circle(A, B, C)))) + log(distance(A, B)) == log(distance(B, center(Circle(A, B, C)))) + log(distance(A, B)), log(distance(A, B)) + log(distance(A, center(Circle(A, B, C)))) == log(distance(A, B)) + log(distance(B, center(Circle(A, B, C))))
By anti_similar_triangle_basic_properties on C, center(Circle(A, B, C)), E, E, center(Circle(A, B, C)), C we get angle(C, center(Circle(A, B, C)), E) == 0 - angle(E, center(Circle(A, B, C)), C) mod 360, angle(center(Circle(A, B, C)), E, C) == 0 - angle(center(Circle(A, B, C)), C, E) mod 360, angle(E, C, center(Circle(A, B, C))) == 0 - angle(C, E, center(Circle(A, B, C))) mod 360, log(distance(C, center(Circle(A, B, C)))) + log(distance(C, center(Circle(A, B, C)))) == log(distance(E, center(Circle(A, B, C)))) + log(distance(E, center(Circle(A, B, C)))), log(distance(C, center(Circle(A, B, C)))) + log(distance(C, E)) == log(distance(E, center(Circle(A, B, C)))) + log(distance(C, E)), log(distance(C, E)) + log(distance(C, center(Circle(A, B, C)))) == log(distance(C, E)) + log(distance(E, center(Circle(A, B, C))))
By altitude_definition on orthocenter(C, E, F), E, F, altitude(C, E, F) we get altitude(C, E, F) == altitude(orthocenter(C, E, F), E, F)
By anti_similar_triangle_basic_properties on H, F, C, G, B, C we get angle(H, F, C) == 0 - angle(G, B, C) mod 360, angle(F, C, H) == 0 - angle(B, C, G) mod 360, angle(C, H, F) == 0 - angle(C, G, B) mod 360, log(distance(B, G)) + log(distance(C, F)) == log(distance(F, H)) + log(distance(B, C)), log(distance(B, C)) + log(distance(C, H)) == log(distance(C, F)) + log(distance(C, G)), log(distance(C, G)) + log(distance(F, H)) == log(distance(C, H)) + log(distance(B, G))
By altitude_definition on center(Circle(A, B, C)), B, midpoint(A, B), median(E, A, B) we get median(E, A, B) == altitude(center(Circle(A, B, C)), B, midpoint(A, B))
By anti_similar_triangle_basic_properties on B, F, H, F, B, G we get angle(B, F, H) == 0 - angle(F, B, G) mod 360, angle(F, H, B) == 0 - angle(B, G, F) mod 360, angle(H, B, F) == 0 - angle(G, F, B) mod 360, log(distance(B, F)) + log(distance(B, G)) == log(distance(B, F)) + log(distance(F, H)), log(distance(B, G)) + log(distance(B, H)) == log(distance(F, H)) + log(distance(F, G)), log(distance(B, H)) + log(distance(B, F)) == log(distance(F, G)) + log(distance(B, F))
By altitude_definition on orthocenter(C, E, F), F, C, Line(E, G) we get Line(E, G) == altitude(orthocenter(C, E, F), C, F)
By altitude_definition on H, C, E, Line(G, H) we get Line(G, H) == altitude(H, C, E)
By altitude_definition on midpoint(G, H), B, midpoint(B, F), Line(C, D) we get Line(C, D) == altitude(midpoint(G, H), B, midpoint(B, F))
By anti_similar_triangle_basic_properties on H, D, B, G, D, F we get angle(H, D, B) == 0 - angle(G, D, F) mod 360, angle(D, B, H) == 0 - angle(D, F, G) mod 360, angle(B, H, D) == 0 - angle(F, G, D) mod 360, log(distance(D, G)) + log(distance(B, D)) == log(distance(D, H)) + log(distance(D, F)), log(distance(B, D)) + log(distance(F, G)) == log(distance(D, F)) + log(distance(B, H)), log(distance(B, H)) + log(distance(D, G)) == log(distance(F, G)) + log(distance(D, H))
By altitude_definition on midpoint(G, H), F, midpoint(B, F), Line(C, D) we get Line(C, D) == altitude(midpoint(G, H), F, midpoint(B, F))
By altitude_definition on E, H, G, Line(C, D) we get Line(C, D) == altitude(E, G, H)
By altitude_definition on orthocenter(B, C, E), E, B, altitude(C, B, E) we get altitude(C, B, E) == altitude(orthocenter(B, C, E), B, E)
By altitude_definition on orthocenter(B, C, E), D, E, Line(B, F) we get Line(B, F) == altitude(orthocenter(B, C, E), D, E)
By anti_similar_triangle_basic_properties on B, E, center(Circle(A, B, C)), E, B, center(Circle(A, B, C)) we get angle(B, E, center(Circle(A, B, C))) == 0 - angle(E, B, center(Circle(A, B, C))) mod 360, angle(E, center(Circle(A, B, C)), B) == 0 - angle(B, center(Circle(A, B, C)), E) mod 360, angle(center(Circle(A, B, C)), B, E) == 0 - angle(center(Circle(A, B, C)), E, B) mod 360, log(distance(B, E)) + log(distance(B, center(Circle(A, B, C)))) == log(distance(B, E)) + log(distance(E, center(Circle(A, B, C)))), log(distance(B, center(Circle(A, B, C)))) + log(distance(B, center(Circle(A, B, C)))) == log(distance(E, center(Circle(A, B, C)))) + log(distance(E, center(Circle(A, B, C)))), log(distance(B, center(Circle(A, B, C)))) + log(distance(B, E)) == log(distance(E, center(Circle(A, B, C)))) + log(distance(B, E))
By altitude_definition on orthocenter(C, E, F), C, D, Line(B, F) we get Line(B, F) == altitude(orthocenter(C, E, F), C, D)
By altitude_definition on orthocenter(B, C, E), B, H, Line(E, H) we get Line(E, H) == altitude(orthocenter(B, C, E), B, H)
By altitude_definition on orthocenter(C, E, F), F, G, Line(E, G) we get Line(E, G) == altitude(orthocenter(C, E, F), F, G)
By anti_similar_triangle_basic_properties on B, center(Circle(A, B, C)), C, C, center(Circle(A, B, C)), B we get angle(B, center(Circle(A, B, C)), C) == 0 - angle(C, center(Circle(A, B, C)), B) mod 360, angle(center(Circle(A, B, C)), C, B) == 0 - angle(center(Circle(A, B, C)), B, C) mod 360, angle(C, B, center(Circle(A, B, C))) == 0 - angle(B, C, center(Circle(A, B, C))) mod 360, log(distance(B, center(Circle(A, B, C)))) + log(distance(B, center(Circle(A, B, C)))) == log(distance(C, center(Circle(A, B, C)))) + log(distance(C, center(Circle(A, B, C)))), log(distance(B, center(Circle(A, B, C)))) + log(distance(B, C)) == log(distance(C, center(Circle(A, B, C)))) + log(distance(B, C)), log(distance(B, C)) + log(distance(B, center(Circle(A, B, C)))) == log(distance(B, C)) + log(distance(C, center(Circle(A, B, C))))
By altitude_definition on orthocenter(C, E, F), F, A, Line(E, G) we get Line(E, G) == altitude(orthocenter(C, E, F), A, F)
By altitude_definition on orthocenter(B, C, E), C, D, Line(B, F) we get Line(B, F) == altitude(orthocenter(B, C, E), C, D)
By altitude_definition on center(Circle(A, B, C)), midpoint(A, B), A, median(E, A, B) we get median(E, A, B) == altitude(center(Circle(A, B, C)), A, midpoint(A, B))
By altitude_definition on orthocenter(C, E, F), E, D, Line(B, F) we get Line(B, F) == altitude(orthocenter(C, E, F), D, E)
By anti_similar_triangle_basic_properties on E, G, D, E, H, D we get angle(E, G, D) == 0 - angle(E, H, D) mod 360, angle(G, D, E) == 0 - angle(H, D, E) mod 360, angle(D, E, G) == 0 - angle(D, E, H) mod 360, log(distance(E, G)) + log(distance(D, H)) == log(distance(E, H)) + log(distance(D, G)), log(distance(D, G)) + log(distance(D, E)) == log(distance(D, H)) + log(distance(D, E)), log(distance(D, E)) + log(distance(E, G)) == log(distance(D, E)) + log(distance(E, H))
By log_of_2_times_distance on G, H, H, midpoint(G, H) we get log(distance(G, H)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(H, midpoint(G, H)))
By anti_similar_triangle_basic_properties on E, A, center(Circle(A, B, C)), A, E, center(Circle(A, B, C)) we get angle(E, A, center(Circle(A, B, C))) == 0 - angle(A, E, center(Circle(A, B, C))) mod 360, angle(A, center(Circle(A, B, C)), E) == 0 - angle(E, center(Circle(A, B, C)), A) mod 360, angle(center(Circle(A, B, C)), E, A) == 0 - angle(center(Circle(A, B, C)), A, E) mod 360, log(distance(A, E)) + log(distance(A, center(Circle(A, B, C)))) == log(distance(A, E)) + log(distance(E, center(Circle(A, B, C)))), log(distance(A, center(Circle(A, B, C)))) + log(distance(A, center(Circle(A, B, C)))) == log(distance(E, center(Circle(A, B, C)))) + log(distance(E, center(Circle(A, B, C)))), log(distance(A, center(Circle(A, B, C)))) + log(distance(A, E)) == log(distance(E, center(Circle(A, B, C)))) + log(distance(A, E))
By altitude_definition on orthocenter(C, E, F), C, midpoint(B, F), Line(B, F) we get Line(B, F) == altitude(orthocenter(C, E, F), C, midpoint(B, F))
By altitude_definition on G, E, midpoint(B, F), Line(G, H) we get Line(G, H) == altitude(G, E, midpoint(B, F))
By altitude_definition on orthocenter(C, E, F), C, E, Line(B, F) we get Line(B, F) == altitude(orthocenter(C, E, F), C, E)
By altitude_definition on G, D, C, Line(G, H) we get Line(G, H) == altitude(G, C, D)
By altitude_definition on A, center(Circle(A, B, C)), E, Line(A, B) we get Line(A, B) == altitude(A, E, center(Circle(A, B, C)))
By altitude_definition on orthocenter(B, C, E), D, midpoint(B, F), Line(B, F) we get Line(B, F) == altitude(orthocenter(B, C, E), D, midpoint(B, F))
By altitude_definition on orthocenter(C, E, F), A, C, Line(E, G) we get Line(E, G) == altitude(orthocenter(C, E, F), A, C)
By anti_similar_triangle_basic_properties on F, H, C, B, G, C we get angle(F, H, C) == 0 - angle(B, G, C) mod 360, angle(H, C, F) == 0 - angle(G, C, B) mod 360, angle(C, F, H) == 0 - angle(C, B, G) mod 360, log(distance(B, G)) + log(distance(C, H)) == log(distance(F, H)) + log(distance(C, G)), log(distance(C, G)) + log(distance(C, F)) == log(distance(C, H)) + log(distance(B, C)), log(distance(B, C)) + log(distance(F, H)) == log(distance(C, F)) + log(distance(B, G))
By altitude_definition on H, D, C, Line(G, H) we get Line(G, H) == altitude(H, C, D)
By altitude_definition on orthocenter(B, C, E), midpoint(B, F), E, Line(B, F) we get Line(B, F) == altitude(orthocenter(B, C, E), E, midpoint(B, F))
By altitude_definition on orthocenter(B, C, E), B, C, Line(E, H) we get Line(E, H) == altitude(orthocenter(B, C, E), B, C)
By altitude_definition on D, H, G, Line(C, D) we get Line(C, D) == altitude(D, G, H)
By altitude_definition on orthocenter(B, C, E), C, midpoint(B, F), Line(B, F) we get Line(B, F) == altitude(orthocenter(B, C, E), C, midpoint(B, F))
By anti_similar_triangle_basic_properties on C, G, D, C, H, D we get angle(C, G, D) == 0 - angle(C, H, D) mod 360, angle(G, D, C) == 0 - angle(H, D, C) mod 360, angle(D, C, G) == 0 - angle(D, C, H) mod 360, log(distance(C, G)) + log(distance(D, H)) == log(distance(C, H)) + log(distance(D, G)), log(distance(D, G)) + log(distance(C, D)) == log(distance(D, H)) + log(distance(C, D)), log(distance(C, D)) + log(distance(C, G)) == log(distance(C, D)) + log(distance(C, H))
By altitude_definition on orthocenter(B, C, E), E, C, Line(B, F) we get Line(B, F) == altitude(orthocenter(B, C, E), C, E)
By altitude_definition on midpoint(G, H), F, B, Line(C, D) we get Line(C, D) == altitude(midpoint(G, H), B, F)
By altitude_definition on G, midpoint(B, F), D, Line(G, H) we get Line(G, H) == altitude(G, D, midpoint(B, F))
By altitude_definition on G, C, midpoint(B, F), Line(G, H) we get Line(G, H) == altitude(G, C, midpoint(B, F))
By altitude_definition on orthocenter(C, E, F), D, midpoint(B, F), Line(B, F) we get Line(B, F) == altitude(orthocenter(C, E, F), D, midpoint(B, F))
By altitude_definition on orthocenter(B, C, E), C, H, Line(E, H) we get Line(E, H) == altitude(orthocenter(B, C, E), C, H)
By altitude_definition on orthocenter(C, E, F), G, A, Line(E, G) we get Line(E, G) == altitude(orthocenter(C, E, F), A, G)
By altitude_definition on G, C, E, Line(G, H) we get Line(G, H) == altitude(G, C, E)
By altitude_definition on H, E, midpoint(B, F), Line(G, H) we get Line(G, H) == altitude(H, E, midpoint(B, F))
By altitude_definition on H, C, midpoint(B, F), Line(G, H) we get Line(G, H) == altitude(H, C, midpoint(B, F))
By log_of_2_times_distance on H, G, midpoint(G, H), G we get log(distance(G, H)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(G, midpoint(G, H)))
By altitude_definition on orthocenter(C, E, F), E, midpoint(B, F), Line(B, F) we get Line(B, F) == altitude(orthocenter(C, E, F), E, midpoint(B, F))
By altitude_definition on G, D, E, Line(G, H) we get Line(G, H) == altitude(G, D, E)
By altitude_definition on H, D, E, Line(G, H) we get Line(G, H) == altitude(H, D, E)
By altitude_definition on H, D, midpoint(B, F), Line(G, H) we get Line(G, H) == altitude(H, D, midpoint(B, F))
By altitude_definition on midpoint(B, F), H, G, Line(C, D) we get Line(C, D) == altitude(midpoint(B, F), G, H)
By collinear_definition on midpoint(G, H), H, G we get H in Line(G, midpoint(G, H)), G in Line(H, midpoint(G, H)), Line(G, midpoint(G, H)) == Line(H, midpoint(G, H)), 0 == 2 * angle(H, midpoint(G, H), G) mod 360
By collinear_definition on midpoint(G, H), G, H we get G in Line(H, midpoint(G, H)), H in Line(G, midpoint(G, H)), Line(G, midpoint(G, H)) == Line(H, midpoint(G, H)), 0 == 2 * angle(G, midpoint(G, H), H) mod 360
By isosceles_triangle_altitude_v3 on D, G, H we get identical(perpendicular_bisector(G, H), internal_angle_bisector(G, D, H), perpendicular_line(D, Line(G, H)))
By isosceles_triangle_altitude_v3 on D, H, G we get identical(perpendicular_bisector(G, H), internal_angle_bisector(G, D, H), perpendicular_line(D, Line(G, H)))
By anti_similar_triangle_basic_properties on center(Circle(A, B, C)), A, E, center(Circle(A, B, C)), B, E we get angle(center(Circle(A, B, C)), A, E) == 0 - angle(center(Circle(A, B, C)), B, E) mod 360, angle(A, E, center(Circle(A, B, C))) == 0 - angle(B, E, center(Circle(A, B, C))) mod 360, angle(E, center(Circle(A, B, C)), A) == 0 - angle(E, center(Circle(A, B, C)), B) mod 360, log(distance(A, center(Circle(A, B, C)))) + log(distance(B, E)) == log(distance(B, center(Circle(A, B, C)))) + log(distance(A, E)), log(distance(A, E)) + log(distance(E, center(Circle(A, B, C)))) == log(distance(B, E)) + log(distance(E, center(Circle(A, B, C)))), log(distance(E, center(Circle(A, B, C)))) + log(distance(A, center(Circle(A, B, C)))) == log(distance(E, center(Circle(A, B, C)))) + log(distance(B, center(Circle(A, B, C))))
By similar_triangle_basic_properties on center(Circle(A, B, C)), E, B, center(Circle(A, B, C)), A, E we get angle(center(Circle(A, B, C)), A, E) == angle(center(Circle(A, B, C)), E, B) mod 360, angle(A, E, center(Circle(A, B, C))) == angle(E, B, center(Circle(A, B, C))) mod 360, angle(B, center(Circle(A, B, C)), E) == angle(E, center(Circle(A, B, C)), A) mod 360, log(distance(A, center(Circle(A, B, C)))) + log(distance(B, E)) == log(distance(E, center(Circle(A, B, C)))) + log(distance(A, E)), log(distance(A, E)) + log(distance(B, center(Circle(A, B, C)))) == log(distance(B, E)) + log(distance(E, center(Circle(A, B, C)))), log(distance(B, center(Circle(A, B, C)))) + log(distance(A, center(Circle(A, B, C)))) == log(distance(E, center(Circle(A, B, C)))) + log(distance(E, center(Circle(A, B, C))))
By similar_triangle_basic_properties on center(Circle(A, B, C)), E, A, center(Circle(A, B, C)), B, E we get angle(center(Circle(A, B, C)), B, E) == angle(center(Circle(A, B, C)), E, A) mod 360, angle(B, E, center(Circle(A, B, C))) == angle(E, A, center(Circle(A, B, C))) mod 360, angle(A, center(Circle(A, B, C)), E) == angle(E, center(Circle(A, B, C)), B) mod 360, log(distance(B, center(Circle(A, B, C)))) + log(distance(A, E)) == log(distance(E, center(Circle(A, B, C)))) + log(distance(B, E)), log(distance(A, E)) + log(distance(E, center(Circle(A, B, C)))) == log(distance(B, E)) + log(distance(A, center(Circle(A, B, C)))), log(distance(A, center(Circle(A, B, C)))) + log(distance(B, center(Circle(A, B, C)))) == log(distance(E, center(Circle(A, B, C)))) + log(distance(E, center(Circle(A, B, C))))
By anti_similar_triangle_basic_properties on E, B, center(Circle(A, B, C)), E, A, center(Circle(A, B, C)) we get angle(E, B, center(Circle(A, B, C))) == 0 - angle(E, A, center(Circle(A, B, C))) mod 360, angle(B, center(Circle(A, B, C)), E) == 0 - angle(A, center(Circle(A, B, C)), E) mod 360, angle(center(Circle(A, B, C)), E, B) == 0 - angle(center(Circle(A, B, C)), E, A) mod 360, log(distance(A, E)) + log(distance(B, center(Circle(A, B, C)))) == log(distance(B, E)) + log(distance(A, center(Circle(A, B, C)))), log(distance(A, center(Circle(A, B, C)))) + log(distance(E, center(Circle(A, B, C)))) == log(distance(B, center(Circle(A, B, C)))) + log(distance(E, center(Circle(A, B, C)))), log(distance(E, center(Circle(A, B, C)))) + log(distance(A, E)) == log(distance(E, center(Circle(A, B, C)))) + log(distance(B, E))
By sas_anti_congruence on midpoint(B, F), C, H, midpoint(B, F), C, G we get anti_congruent_triangles(C, G, midpoint(B, F), C, H, midpoint(B, F))
By between_implies_angles on H, midpoint(G, H), G we get 180 == angle(H, midpoint(G, H), G) mod 360, 0 == angle(midpoint(G, H), G, H) mod 360, 0 == angle(G, H, midpoint(G, H)) mod 360
By sas_anti_congruence on midpoint(B, F), C, G, midpoint(B, F), C, H we get anti_congruent_triangles(C, G, midpoint(B, F), C, H, midpoint(B, F))
By power_of_a_point_definition on midpoint(G, H), H, G, Circle(C, E, G) we get log(power_of_a_point(midpoint(G, H), Circle(C, E, G))) == log(distance(H, midpoint(G, H))) + log(distance(G, midpoint(G, H)))
By sas_anti_similarity on H, C, midpoint(B, F), G, C, midpoint(B, F) we get anti_similar_triangles(C, G, midpoint(B, F), C, H, midpoint(B, F))
By sas_anti_congruence on H, C, midpoint(B, F), G, C, midpoint(B, F) we get anti_congruent_triangles(C, G, midpoint(B, F), C, H, midpoint(B, F))
By sas_anti_similarity on midpoint(B, F), C, G, midpoint(B, F), C, H we get anti_similar_triangles(C, G, midpoint(B, F), C, H, midpoint(B, F))
By between_implies_angles on G, midpoint(G, H), H we get 180 == angle(G, midpoint(G, H), H) mod 360, 0 == angle(midpoint(G, H), H, G) mod 360, 0 == angle(H, G, midpoint(G, H)) mod 360
By sas_anti_similarity on G, C, midpoint(B, F), H, C, midpoint(B, F) we get anti_similar_triangles(C, G, midpoint(B, F), C, H, midpoint(B, F))
By sas_anti_congruence on G, C, midpoint(B, F), H, C, midpoint(B, F) we get anti_congruent_triangles(C, G, midpoint(B, F), C, H, midpoint(B, F))
By sas_anti_similarity on midpoint(B, F), C, H, midpoint(B, F), C, G we get anti_similar_triangles(C, G, midpoint(B, F), C, H, midpoint(B, F))
