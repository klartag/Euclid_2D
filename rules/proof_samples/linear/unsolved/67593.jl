Assumptions:
A, B, C, D, E, F, G, H, I: Point
f, g, h, i, j: Line
c: Circle
distinct(A, B, C, D, E, F, G, H, I)
distinct(f, g, h, i, j)
f == Line(B, C)
g == Line(A, C)
h == internal_angle_bisector(B, A, C)
i == internal_angle_bisector(A, B, C)
j == internal_angle_bisector(A, C, B)
D == line_intersection(h, i)
E == projection(D, f)
F == projection(D, g)
c == Circle(A, E, F)
G == midpoint(A, F)
H == center(c)
I == projection(A, j)

Embedding:
C := {"x": "-6.236901955392628593699555494822561740875244140625", "y": "6.7510572985377290677888595382682979106903076171875"}
B := {"x": "3.6727921787689563615231236326508224010467529296875", "y": "-4.4691699706447867157521613989956676959991455078125"}
A := {"x": "-8.7340668805881005454239129903726279735565185546875", "y": "0.32987140247701152162562721059657633304595947265625"}
i := {"point": {"x": "3.6727921787689563615231236326508224010467529296875", "y": "-4.4691699706447867157521613989956676959991455078125"}, "direction": {"x": "-1.5946376575648952377390343195828852763853166899388341050276892260837370683365065067264222371841270877929310837785873082816326998318583315984167444784984883224513896308360524617735672616262056793802968659379611310817871755517502729274593522995133740896205261366947815770543428023079558165072917600454893290622372307224016874674176332021152552436066506515453430867145102296690705264181447129495855609030794690273539148299500352168533981614803089855055205452459358390369854437384727715173663398529106659740722167999504105499243127058645646684556330097994786948777494429235455315631117419250994502114620821034039333616665331408523226313916818934306815694004626996117381230227465267339687305020392483068503112223548701293533426437368074742027173105581398662170759075507246263980167164068245103624469813084452149939837354659326916751658718001903415325959647036931662797466745885177328092179879601239017194879998855160511514011216140747556109846326332501576827148084425315147037957682826832406468562223287996449551969985830273195527654326857984399552381408636414711679790232238445040051010593684800970145975920210452154464927324699947031303340531583429346794055161633135695823504317973505407400649892927127702868772860961239728086688024990590909258205701516274152140225232748658320992550320640294590076015786651931599336571975275496549865455067654613523396620151039739419966398692871752950872297177440198902512259597004830166794544743880575919964278967549011235586551837707946536597641115634323128461208888141042015200445741545682360468740197937054017697041978974208104514699249155667589473888221261263206197175313727775818829319883953847533458020371542360591165142809645518022004523491192474139502709085353288899308427146510791143635004839893164576628118250117818819655120990593235078299849758755357111304392558642738423789510845056228302085131734889414808538985790504783076671165549630143518507687137814314446586145774726303093222255628889461838163458106149917412605838072823221625185751050756327184962124", "y": "1.110280983308052479656887282127943934038351789452317574682022295414339606589243141878632175021143701007640924128704734542052674688274997221263332738239614666828041059023828644842934447668434934483537975647864047433679687941531987434415471441866842977376436961220050418173767295137530680093391608586219228706947974985399399714028817649686161429863733297369119379921408659802938438104384286230779317628881802453140174314383297795414248713195560708455804519307823040886798125409355675493723749782168926646237263555372144943489546343819325907593146934536995917179147301817136403745271590718467707088682801044630157178647870609749468638478295754038794738211829090383464517045344370100971806749976721100384086053220868746305360525875226765034864410193866567809838389904546601099118961415488852446860503014949254445607909877411893453241453418214185559318973165096433003833237081397467138039019104100191520958054389872298170456587901563586648926481805248686627774400959112514192802170248176852799063948942031846089028560337541340299513781579467736447661558723368122596821179380462024089923702660820628336898311916941861475749085026989690877625999174262085741732040824658085116590096180608451260364759091360474080704769615527132780069102143893424364361232196454977086493620462118167578802981706219117436711110203107049476408487301351750189125665620113104318674042936274189246234130024933980219931799331902893725124807361428084155777691487409843818900929042521188859668454244888283848270329248536956767758042964461270010423138647505257599739758180987051461612259112573920207849465793749201355837781996759306890247693169666310555206944086750055379466056039526278203087994714075308646657773130710664596530189354966519861644030962249587772150107701748485157115280957356898968293708069865428761930054672003044844813714303083802743082538274028188167548107694382510952486116172311958514416638324281782197483798169020175903878741053460725797247082353526369855220718788743222551391551181606727999126440321557022314989"}}
h := {"point": {"x": "-8.7340668805881005454239129903726279735565185546875", "y": "0.32987140247701152162562721059657633304595947265625"}, "direction": {"x": "1.2951104574005918154092731202122770851733610321081982263304255934201641152332365443724123958970767474778264514430855691200298356244465160288032095994354353506173271595250669207087753757697973475629383198539696849808330143407559205973740264786509928928683226146705196040259130296363009383695275257692927846551778933164618423823888990947376517559742955967366515009432595762250082340419225864847276743499767510064806361432011417110909277003601054193334054237187251773687396478987639614191980934498509789544076112765568151797274934052797430663693885922103171345266524189934880725616923105487101590566084214665242038393808594510341067404798746351077859436189096123881712640751860978777721490818680311719760959373877379049106007202000592288966795305993928637575574324343754062991847451783786154518557475415768047358689195080376449985526327970633469404833877147194636063822902332098829399850938646862340097588222301329062472742016305073373078540820779723810307742090873597240005325291962845872709153172117199326522835550090973701520264177803096399587442841433111671344044255449478786960148237329545191980735965086413871570844685448057664547978995351178298284464053782300693098047407645835048365467632347224266463188944164644733886041298228138043549062807769972624340983210560235819591056409913587571078313032511923609161131660965890241960318224628154748480903342803780212386794288512345729019469682822453600221583629342959118184898006587439041262653937128969162118849558202611061331007191893165864854397986178214283755461198972842623798126460363126552582691811807259200494233671083089798872247067051642582744426747007136857247634290511257350897827148865650519774456407125590384271432149014983280848982190920319641494674975660574301964954306176435679585383947511345836173111248714858189348576325900561451604191047014160306500739538692645772591843486853716253121185110561694834370625549340423738716146360507548703229190274203226207945328271014755835913210488578523036944760881916841959512164619318303014325462", "y": "0.57124501717633191094605089171485219017052484775500110398356563630820596981848541096598920873493287127531576614917887574520168991296355534594866401562596263607722705140748941954184016491926329538131567321259907828485490475535554011332360739269453473612991378412719174438543701456532129051510175508253435065600835915836226231989811624298874726503999917228441323766717723920144399228642628292519328797234428200489644114332129550282831872651530146013906285038929954176979650787231516698275359554937701042267657089513735802798464978946406725530636851519359074759491609082748734888095299862157869303986239259615057287272709595105830993289003374303018946379575711906796606769742693162092654374140014381639534283207214252699470955110031685064822386760757957191276355510520709078628209982278316877847965389856693175839331676007051626005616389432348882614118316920771634912857951499343295859592422210372433784957305258394522300276099022685793786455111904423549775230683117923504152223933607426927880845143486976884598222985741162714891588064304620497608484883636089518411826842332877360004880439133413533753287553290524168992380725496514290282460055419308222832267274770161295325702753552895352289274081999754106446750457275069807660353301474632957117637516952424479902503244240030562760127764401089620601454310293961017210887186965809233521318350455037552131427075688973231617835018224121765518654436222420302799595912570629061218271007284443893637330140601967273669878284469393886530725678846625310521546135171282123421887063950372860636084899573631120851847342185912804881251022791929387376380155527158745463293821816131422636917190177486342613103910689149326573985536204296337629421802849403605219360249121338422602412429274437604486182538458626525001280063193113754330119790751234644838008990043941561322923887277918671268336305695012099766214150894136374303330431703327019446849841487633137000544117451884085487284345970034883447608594844807841469089150118521963321972847763963906207243774967064334946697"}}
g := {"point": {"x": "-8.7340668805881005454239129903726279735565185546875", "y": "0.32987140247701152162562721059657633304595947265625"}, "direction": {"x": "2.4971649251954719517243574955500662326812744140625", "y": "6.42118589606071754616323232767172157764434814453125"}}
f := {"point": {"x": "3.6727921787689563615231236326508224010467529296875", "y": "-4.4691699706447867157521613989956676959991455078125"}, "direction": {"x": "-9.9096941341615849552226791274733841419219970703125", "y": "11.220227269182515783541020937263965606689453125"}}
D := {"x": "-5.3583338469636247838812158689690664666455397869219042556892421971686573329387652727836938454647232892799066551357263982403094247006460298420433211573829738482839899194202359318238184959643006343272593904423429217340071184146644564447009549181526923135441142175558313949572421994030261888344980984049419833423211838586726261071448052990472578544985604434647145058895212610479550574315279844976145135884332562946486016775569367473781558187988903398608435607360078477638958043208473973741763071732241976718203391755723902052756785330991978600058908238403763041059189764375489466580252768369966167889789515115872864020403390432103076856691884961867579270623155663732388303083662550461993832705153522193474503585035046772444436991218108567948710432472774038414255321871634678150485461568217934971854802031254682921682252118248668458060985469746837662191756489645034482238715656243908953527155676266802428506316643424718924693924567926460953951194806869883643009541710290697575927961891410285033700333390601035753980516935040167159781661887228541518212211983207667033953447768927270721778798161947920892039618227133841231867348839427681560248682542694709677770394398442106103457352852818388322563274661401863260903923687613465451040389761152623561413705317701460186173098159595702070539459350050100220321527867077661919205800405368169804254816357742692835648288961434305917271918070315575255052681816278619042189228003736776653580556099050521102552542401451411883485493922919614957758373160015746750014423933840414198792428403198056966134030888431969852050435622985195272442513086194107635398023031164792467887660018067555769741339401948859842084936385905530910861472411832394950567592773530673047272740817156421887259838985664649917150594475044797353805963069955351987189215818189884930146491859583821500639563334868086247658394035210328034326428270602182191722327305173274289519512149236342218873622183015468778120137985636251866561910262389213723503937140385907492727405328213564915728887388089011569604", "y": "1.8188337251548358770842455709686211833038652554289105011334120750243161969025100518372507026631910208739602568447571370393638269418110410673614497781287202096431230075195957028851434071990703432838144489907856699597726369311120214946249151735511482945289701379236031621575257356479779341506114320139458186941643036610896721028258394491603179077658976217996686615025941081944771276923085984038693828094129043061270113467468392532051785342286013932729438900136529033210882619615119775975032442728748341160604543511279594673589500426482053469033804088978967415420596253711906433779129542935322753814244230199000738902013403779993585088501320818062078445164719768272991248215858277235381628337077598273029224156926059416439685134525930135910066493810672294846362667121714192531978076235549655449908635949534755844727655970190179760682580536656996869229105336095418400707052917420186072487056015043414266435288852222656047656486734623017789476168751633420485686290139764721010614827903594560683125221910730140057273277757773743827936065999501319799024824056824570767929248180942971170130480829400513191037885687168459551458705232729445452713303490468204397291012147255212831955373863614546042441592209339939843010586070628338706829299141204546612114862774480480886802538003190355294334079860734336639723559121497876241163806686875982547787207547695008811428710094769812854873563508226951146818913794530142554933194370533509443576636306305723555288287748895267394970312631795750411049872417760529993812977652505547204514102247637446961634542915780772452544744034528782205447958247498999897375256659254086478217213998155053638096010940138553863038247777248312367231501638295923240558795145621553627566326949098817596735166082900569240642362776403823384629794210339734921790686544010736212853394675584845607476079300697529518154651437305065473053965842894555732735128844151329678756042590772682599814287467753944851443303445413154836453445189281337879604493432797311081702205870860008705751499355947686978982"}
F := {"x": "-7.7876151602033173111234402351378548677122801118111420465290957193915299120467774892974183039002253671944161288583225818848114150936719163831125069927779603883003520975663123948136239845724277808695055366903926196101182733410406237914119879181444260852163535839096640721344308993566171390296958157973008138234429052832459667089834837461557569549438611702541765994201551466709888248016774219482598798490834018057230895643077921208789255339674846866059327516637201348646605609452112795269040552179944651355776451160925257515684781258324658584549598079400587950018616077475502073007197837284598106269091145538561259176464800261681748064331400025039230377683675226092229863500273041983670486388079776287441632926404012325709498305368909841614909817999045721031377318424959196555561723482652035580960650814395885609014312570984459082575521166730772798927127206520001040682287386317171794163981721707909654432164571699036860536628502758774527586693724043592197964721280020232039154734834654166901804649713653563601913338203038378261731904933210455548258453235441785923452353485490303136465732376026146241658245867010783557864446274296238541699164695901969122654336416547540432001110674092708169587526551620705405383265433004378848135477972345887678951346963475924531983681041169337758910189546046951547040321963065953817709242443733154326535138919769410883332846056104297660317810971772343402975668828704291161378268237871437230340604773362709032421102333628127451319076335202188048971009809342094776037608983155947893675179547235201553844647440079597675048788297323874013676214439004378813876272320721377730972883578830506613169968870671425406277275273801396267660116045448950568031687731840183705310630267658531563274574163041937656850046257932432734961358315441127217586515564639480600438611790689008315702302133267553352636044919293700766298438272381794585215061617324238615455681229463570769935575709716752555724121340368309931069959275951929822073397332660977732807428479206234207912922059976880592428", "y": "2.7635682628321410683583623442478998191688107574400035004055779204043840274415356287859666269167852175049123719264407105443770286760123599824685484222497829617885079353972915245807252438220503887038767462295411679064289619910409625350504581688646456378775932620536980577665283015672143569103517073168678900452236772359993368375706343242559776209863330919403738041215931222204240412815080007991796387209983020091497474198374877641008553234758096580426847728088121432422026102481550598886561403100591082408449306616157655332047951968308507101700128648958099920077396615850337608619269843855264375353046937465119999252595150326112874692327396815536749062746001569603890456035227107385428488839354221839489164203251795142426729837723218870948151535427511627715068270792043120031522626951482486473052132646156978146694057339164381626352979698042178222283045312008388714451412851477615531242928286676465368746904426032903019525498730669119280116566245401398435892195052867038417596551161568771690467049786567343404180298796485391394815319229129233666169274431255095543216936262488578980892684599929690642651805344759875425337416214683536964215193292822323624071728969956880598278338972933920218311328883624188277769381620056736087877430349224795032053712302685889305660033992827699418236957798500747615345184976403278553927225499471610751715165257308377758099701420374040620864731715931651481512059462939734238351056033130154903360926235833029753509306962845671493560900556262579173092900697948958141651485920213291185159604239356024292541066414561679183993549095670130951111447306852805616898563802316206347400510397341794415270727597293937270102134937484508605353437775597083235806802149305576080758595325651023651880576968199508276699975646309320419717677142385578711516049512085776496183652456938197506586083459984910116685116862510682457165151189411171755896953016792826875820396065629880905187704119848365893863210739680093135883495345045462527723951968874224741523100564101668500660329786357449006453"}
E := {"x": "-3.4046889977933500590525623426289414734262063775470234654870500598884060593257594468873283377612909133642318026648490527477228997928389179068823480352214208123870067756286835835100857236124195294109302915901611731967900589461654534956858971465060931568172858951170875065876020509631539394980963269947500057039386702463238931454324877942135120381861274665492137593399449356676432538560548318718686481218882498459493443195875488424464093510207565967150505875047841288179261101239864212205840790622699380547331986260986358185014423120901323566456483374442683586548515632891360270356745411677373429567158153799549975727643051122121164657929568977919319087089647382836833290391573577410080222463517458169238274226989174677525010718479165066526893838008913682789580936085405209720393883383144792287527716351859308889639825674217416416661949736683264271669622063362794538049031596382581772657751254963599384552384143892674697256520926976488815223798639564358839019149900055956001373541076673173483635964486341918790019588631388427313045331321601664655103643148194381656262895344745835959014235382449243265237264071375469463730294114423116364940338291430310712735982726714175745059234078103140185804194984642710673136047610598155018837830050352181324157790991776609610780583814526595119966416820693797812283033694640869246777590375493918478388024404115315042207607859555206669631518511676803424247631154361557928377232862745942423614486828752990639313718492381502377121004803513854628538569060742298550232616766361935418473734944962712288699849541557516794598856300023501710480247824788710128695616983519571384879409212542183429158133085614758571338417576964464529502016448168044057554108094329642394864631737408421969531263126296042940918337466240480001406011051708977812196246867420244265400424119003225621090319613681284517482821236135052551889370947177280581839159812808867852735533432262210454839390557933174171368627491048554745945401597387558432687822939662360872288441480073714126279396382198782070972", "y": "3.5442910120345694568012528027012174989554947539897021512923083692197300305624002003011968152126175021142553237148398461621527475032327076557388964235134478939231361083340707757838911789267534192430341692405056164261423842359209036522275153918458945840442926238019907027478229348477650377672970499407102664371610963428075058702491682311802302259966593248139359985378584755709186620280059272485636005173102025962117477653860064650295340615689412573470825275868545981562501144816582270572622523814313911071856375393046597923600773763098165782097823080699713426825946791988050186307791558430564672294529825344350575559166516678026552801529899298732803723552923455792842338666207641750964231029745974050249176100955754467285104214612073469733465795278897347372605639193434479222822271966198508916351656278853566100514482258275811367985682050642564882095218468687665874446449807796211015352480980905027447598880441793339227958213097546486975429282657181287880209190521483085587950005246159471832836105350117955237931410169969233867636378405661677229248299626582024845339875477291512364966632313366861516162112450686613877196472657266058596311120659799981069409120249036580202193267303933280566204842410247205753316495200132863386686832170224031076461467747084640225660342097731884106445976559360319554874878960199884827058367735711618866859970129309421834327083746617414892976436306910965405168570734294742637103989940031215703325773386207153204529920138953267395087782150302333455555176455005910714418607736934662868462320546473319295542408221101370697477199508503177887124388639381696745722016238798000061372363059714064134043940937327930599463571319854755567139871267827306946991067290733099297356137010417084213557453964498228075663247666123518401598573448676645598534772903528731508416956023336598203979234284690681269510080989826178813198610285746424227268933299759636977783304967955480433219590376312152545091752012658020380121514742526615705548063613206976150911419714994225578002942461781460685272"}
c := {"center": {"x": "-5.0902242135645373655396445892860239906609226957270020686827600002136963589590584655612880473864588665890878732698030023844563679575654055402712174432452648940525200182402588391324517459747045579964858753115556673529579560343501533794682029167341839509142044892774648917277194770776906953739920200301201542904754047416279312627265634499441978084297238976268689830736234620554081989944040763160148010445686350347956189075013445238122610883298374029864004305124636375898050925279119668853380058106859517271270147752147497623107439146647717914002802006234820889896536317404635291205159877913601961639569825501371910356971144133449672776320416572724895980974137523028816385892301336654627385505430895920316718695212680285504901385977038093735008942460058311376071000865255049320682819731889062633166720482818785192373414376910450342551016054392185140370779498166511534101258677454497094210902995825867517554952658121836306818837167762825127216778418095070223208882487163792683692175306886588617095874487179601655116152355021273933669393305975733228388294499086382035302232178198409651035292723897794684389763106024601501222615999366915740921335876080635695048956185133686200565788569123755932190954837001166819602197963512423774875805993251349713142605744184387204154647753184779571605795213194954949983420559811710914828237088774853108341030875018922999616258996427773463549842759108276381339890072944795928223861507569615459424845945146466675084438440506296097454033590940089985186479276528136768997148296661333224228567347679593865414750179509769336746179992682208058505362008073122684686678603385319297605095530795238883221189632888387636812611590270069016981946314795144864175722437371968585598520154895130533292389065083328780310757301440053941650787789414754658800342413215373532081748874814649835760459278098295029134880553258327073187650804809880009081456903000993325531745867207743095517246077103397195864462096839322864078929244337416362924288797682008364495370972600212874427891385717187402525", "y": "0.31368387801707770153567264134510174950309163173547382943501475130996355413885963107692002320058710291437080660694030072130138066033295663940311325649803206806368594235082077916302439769565880624323996608015572666868836382886295167241543513415123271751629336781629029800845159137900798931202657452659699957201743645376165335584750462377762370974507635912900531389724468342692246268746673083390909674528101879344798648157403887687581293788722000008884226356047000627724109568648928527991829200159018087280163303579838173591984593090899548044728742352786802606121453969954806777066914058557882232469951503809191045726773845880098917970351046586318628797327426720709526874090631991895740035430069196848199621650081999808376268625303834640426890292204256830443207421507142292696211707716060838374075838798836284082923035448949379717523976148034240581946613196292482047592401740530941447981927857187773151616557526492611062854419420238901558516229113459681127117457202521376638890093292041647450142187998204915450868619335989441339757173425335479340938745264450831937149505264630736661594219014622824546052928937622970826526093192637120479043932696656409852564549249173416895464126870819204878373238471275079124822241057007802981986415840586084021132340553081331989651581835261257308576042889539995905133337290072719042652243650565649949341691389080943021710170948271529499187146586037148203753564262442843454102397282609221469928661600116898055072394125481274390922311752463544753332512028439854467965345143433353631447259713294750786729850279113284688611174556363913088627809986336955598424689735524485271218487474328235216114863200446682899252095732271888681773668730761431877665687951400180679874682362315933072141727973007824562875701102782099829286332749889221227344186291059188608858642084810295979714688739841522126892961430285624229617380086987335968311235362512820495362084671802355908482194950006941664985446935812253520040112050964859187774676535638708814141363586040871988240309718705633438567"}, "radius_squared": "13.277851417969534885179316629724606412079488960620221627425152424321665657240736351936024817989356721690533286622445955225923282147773967160527256557383983771889136071177264702233355821480996220995780334959212601481489412769586556113512146087573264493428660032594575284875936879488156846554441973631402176129156508641837592503896580227051813773089638898166912535916564208017274260134800672422137917921864278197726626695095597837757493328334412925287256094184855323169094058065231600598151502927880910624179026183335630503936171245762436702652030650342555301778915551024125837996572178415608762927806113133626042297910723868506328499475214925887497928591219870341774985662041879457415392625692147768537473876704337067790779546173823405889218641047017757140682659558111219920924399914485665865243291995637824809704084240528477845517583936165150962547710513608109908401133679743383075782549396393232978818347654746564420551488781706082050109921635555235510249138911327632216772231375525446860154099383926452118870624218720551262413009827895797654340978103812697610533663493406142560220417639937616645566994026629129860642017690953152305607909957568670701642090873128529228850620303011556955775343691134539444796264566907810304152196334866568484960577536861413755245676953280255863369710410238244583245880774734013627108162005115738984672908198352351141514281164924601794824597077385316072661344390065938351308210224215835905236602336094581876326511857801219986014365625277109881458884350481360393294153432883975272853392510558959904234413638491906647217395942826787670829877887587961958475078831998007114016393300300603407946466611846383841412080471771150862421080884180360783455406995013451047169919686548165827432267240455177932110258630711254397396078107826933599490126025796531099151952490568608305158192553271776948450346013990356542279501775150396897789095755219062242314888045655784057433809214287500459085871066692700255515942492500864892050520505605762554366196885505118065064534895577823382894"}
j := {"point": {"x": "-6.236901955392628593699555494822561740875244140625", "y": "6.7510572985377290677888595382682979106903076171875"}, "direction": {"x": "0.29952720016430342232976119937060819121195565783063587869726363266357295310326996235400984128705034031510463233550173916160286420741181556961353487906305297183406247131098554106479188585640833181735854608399144610095416121099435233008532582086238119675220352202426197302842977267165487813776423427619654440705933740593984508502873410737760348763235505480869158577125065344406229237622212646485788655310271802087327868674889350576247046112020356617211512152721066166824579583970881009816824640305968701966460552339359537019681930058482160208624441758916156035109702393005745900141943137638929115485366063687972952228567368981821589091180725832289562578155308722356685894756042885619658142017121713487421528496713222444274192353674824530603777995874700245951847511634922009883197122844589491059123376686841025811481595789504667661323900312699459211257698897370267336438435530784986923289409543766770972917765538314490412691998356741830313055055527777665194059935517179070326323908639865337594090511707971230291344357392994940073901490548879999649385672033030403357459767889662530908623563552557781652399551240382828940826392518893667553615362322510485095911078508350027254569103276703590351822605799034364055839167965949942006467267624528657091428937463015277992420221884225014014939107267070189977027541400079901754403143096063079051368430264587749157168082359592075796044043594072218528274946177453022906759676618710486096467372931368787016250304200420734677022795053354752666339237411572636068109019628277314449845425728397366706137375739274651143501671669489040204655780725777906016411542096206234527485667206389615816855934425901825601932226767100713906864025199276377330913421774908586537268944329692578137521708502168416700505337167288970427343026064729834820097418783768889512734328547956597002015116285781172887713063635825294932882480356985554178006799430882423005400002897197797915407773067657433569555005230768852769273578747060022502476175713943756610771909063796656735864314380241706366618", "y": "-1.6815260004843843906029381738427961242088766372073186786655879317225455764077285528446213837560765722829566902778836102872543646012385525672119967538655773029052681104313180643847746125876982298648536488604631257185345926968875275477390788345613777135063507453472421625592043097028519706084933636687535793629563341437616620339269338926749086949037324696535326175885858990043824303908105691559726056012260844580366154577045932982425674397108621685948673696971225826565946332816708424764773453315459370689138344505095029714741961332833931628995154497305866647740633926446237526262245893400464001285451936407807300513749665608077785713683294970689842020075862094514305847427713017218983504913768649167794288852930112733000700769755436156830882778014461397226019450097536918854010612382720212253401569135161862040012266374824097132976173125376743854601563343041493529618165963909000966349433262039158588076274424562433934593488917904445867910329242929221255267077902917492343244095842511220778724003769016149350107901949529674484296622225139414237464075597290177809394478037907976899725070521547636744311874498471031656728922819548337804505997284551679700547135723596980698471237161374047832574999113580151451722741882778308566726351586397539355376073659792218855186529045184732064042593502300136427256533060466596485173591710098425243388491246634798399883136931639215624124802071751978751183436941270967531207664871343747679604015602542827552742304485408615963672370895822227135775860370032098729735043161740912446420092870089862061006071767233626701307325344330482566619760216684952296015835520308943448806313878276247815761159885249188055970951464177714688278500761182720229519911592047006487237918461799040876681552549939638170119330863347504071280815892880365115949059773777752103101445724424604580429531758629894557659013309783091652102492033238746955194204893452287088851367391581135674892393435390167587515845131610746317231683019744482699116102899284421846112796592463670611988780712276656644559"}}
I := {"x": "-5.2050811698396335374031724815198333712466126774962203750092182386638838756986487797797174161519383118728340276871155754623309789625328772925246122723644109580939369620104328159423980958593915705784830252183463927003843881005102224534645155229707074217134188584015300932073674848283912470395930273582143091999213756916717527908765556621609858370295686325081594362014370047551924665207888980678995875853112978711683146277044083244111369619746453270410330344939299494196086800171301608488454686231745269213074213060143148837038319331392741206754447929809312357195495343575615788872999697857820151165723607464406471075655409963809764543364831916013626794606737896912997654527299261830753290107576042111551506480750746934481300299182493947087846399363051869086358081822167314982609696421792500328051495577678564000402177893929485421874230714630676339402450679550370719414764549124922059425943080436051727281206980153599214898892609194271100018042013142057383851646155433438885635595357668509273686695974631159933521010417725023671382409571233955319966035884888940348365582071921914347294525237515796719390877558113585298590052469532242370515553488571706709227543994907561078966286443466015842771234403500034351102811848331955409902954460869936845472548590084171342483632577272036822270892482458256789452974204796515984090884996706212673187459990297996495194091361153890249888083402310385429253862727822466023111202406644076349710069896434360561880822695966514269122548273677779622344951620081251068651023351405466201493503537225243181215940458632400450634001166958749671246109458813383698386535993256562460128183404818897763011124844539084495216445648857100928809973011663277404152112308244698230682207189177310353715922803529787733995440708374997990425539449654147241251462229185099023472806840472645463625633949258608687412406636900877301617448852624462128912791548814250921068400127342167545797755836647780023622033321659042831087904067733294495136490544530148970765288145211272036616391875389010650084", "y": "0.95848327589189352618802403707366493584812312954850914514864079483068590798345775600998223012303891012040073429391251248205014528453762352393842667696373816996133424611822338554187155354256284530294809132313347787713429350847134822093367110832280615146476875678080423766018051972732085736487196210633255861864372482495638255132492236484223263550345676447027890738923530732267811286608287761002615172961212261997567128703017030650989050412591775909811329008191007259167378512387430459396304759056646743400115612426415434502068951953754961152898412133488456098534603885687528244153263989243642509497821879008385423813261325281819664080806701707148191335577673132497664370055518525416773575773171094740935496999409429751332880731950752840443612440100761054890127433362754845484594891881728384357589443406705768143968601273499676838177377259338446278474396577420903359311706572514949702687821751524450322985346730807187287427779224943101868168898271651867179054504923100411396408710872178308897981574828019043180570678135860176210104102564538790594851936440397717763998514404115863318904841828100200402608995347202592823230238735432890926794435635992906913062907529195554192232264624739597327964590908007146189771995082722796779448148780884876256886754512908505499222035760464724464818084872208399992507596356972220346787416122142349330848207620101300655225850479122974946145384406041549182856823950996000583304871834682901009090839316691653293486331884809447766319960034725585094673763572733187910652101004919595278433622521351828679087639430699013419390646558155112475439893883554824801660350053711966493418735167582395720658611293417997171858001355681975430696027214359763051817088485434353244671646836763281720505668233462093435697952174366389912122487658906660152786172497175466806952912295809438438995448401416294003512331549246346559708707249770752664103923174070545861863636051042289696275841335338305370801763161574219283507461176833144943185492144326791746694222827995028056129579888359881920314"}
H := {"x": "-5.0902242135645373655396445892860239906609226957270020686827600002136963589590584655612880473864588665890878732698030023844563679575654055402712174432452648940525200182402588391324517459747045579964858753115556673529579560343501533794682029167341839509142044892774648917277194770776906953739920200301201542904754047416279312627265634499441978084297238976268689830736234620554081989944040763160148010445686350347956189075013445238122610883298374029864004305124636375898050925279119668853380058106859517271270147752147497623107439146647717914002802006234820889896536317404635291205159877913601961639569825501371910356971144133449672776320416572724895980974137523028816385892301336654627385505430895920316718695212680285504901385977038093735008942460058311376071000865255049320682819731889062633166720482818785192373414376910450342551016054392185140370779498166511534101258677454497094210902995825867517554952658121836306818837167762825127216778418095070223208882487163792683692175306886588617095874487179601655116152355021273933669393305975733228388294499086382035302232178198409651035292723897794684389763106024601501222615999366915740921335876080635695048956185133686200565788569123755932190954837001166819602197963512423774875805993251349713142605744184387204154647753184779571605795213194954949983420559811710914828237088774853108341030875018922999616258996427773463549842759108276381339890072944795928223861507569615459424845945146466675084438440506296097454033590940089985186479276528136768997148296661333224228567347679593865414750179509769336746179992682208058505362008073122684686678603385319297605095530795238883221189632888387636812611590270069016981946314795144864175722437371968585598520154895130533292389065083328780310757301440053941650787789414754658800342413215373532081748874814649835760459278098295029134880553258327073187650804809880009081456903000993325531745867207743095517246077103397195864462096839322864078929244337416362924288797682008364495370972600212874427891385717187402525", "y": "0.31368387801707770153567264134510174950309163173547382943501475130996355413885963107692002320058710291437080660694030072130138066033295663940311325649803206806368594235082077916302439769565880624323996608015572666868836382886295167241543513415123271751629336781629029800845159137900798931202657452659699957201743645376165335584750462377762370974507635912900531389724468342692246268746673083390909674528101879344798648157403887687581293788722000008884226356047000627724109568648928527991829200159018087280163303579838173591984593090899548044728742352786802606121453969954806777066914058557882232469951503809191045726773845880098917970351046586318628797327426720709526874090631991895740035430069196848199621650081999808376268625303834640426890292204256830443207421507142292696211707716060838374075838798836284082923035448949379717523976148034240581946613196292482047592401740530941447981927857187773151616557526492611062854419420238901558516229113459681127117457202521376638890093292041647450142187998204915450868619335989441339757173425335479340938745264450831937149505264630736661594219014622824546052928937622970826526093192637120479043932696656409852564549249173416895464126870819204878373238471275079124822241057007802981986415840586084021132340553081331989651581835261257308576042889539995905133337290072719042652243650565649949341691389080943021710170948271529499187146586037148203753564262442843454102397282609221469928661600116898055072394125481274390922311752463544753332512028439854467965345143433353631447259713294750786729850279113284688611174556363913088627809986336955598424689735524485271218487474328235216114863200446682899252095732271888681773668730761431877665687951400180679874682362315933072141727973007824562875701102782099829286332749889221227344186291059188608858642084810295979714688739841522126892961430285624229617380086987335968311235362512820495362084671802355908482194950006941664985446935812253520040112050964859187774676535638708814141363586040871988240309718705633438567"}
G := {"x": "-8.2608410203957089282736766127552414206343993332493210232645478596957649560233887446487091519501126835972080644291612909424057075468359581915562534963889801941501760487831561974068119922862138904347527683451963098050591366705203118957059939590722130426081767919548320360672154496783085695148479078986504069117214526416229833544917418730778784774719305851270882997100775733354944124008387109741299399245417009028615447821538960604394627669837423433029663758318600674323302804726056397634520276089972325677888225580462628757842390629162329292274799039700293975009308038737751036503598918642299053134545572769280629588232400130840874032165700012519615188841837613046114931750136520991835243194039888143720816463202006162854749152684454920807454908999522860515688659212479598277780861741326017790480325407197942804507156285492229541287760583365386399463563603260000520341143693158585897081990860853954827216082285849518430268314251379387263793346862021796098982360640010116019577367417327083450902324856826781800956669101519189130865952466605227774129226617720892961726176742745151568232866188013073120829122933505391778932223137148119270849582347950984561327168208273770216000555337046354084793763275810352702691632716502189424067738986172943839475673481737962265991840520584668879455094773023475773520160981532976908854621221866577163267569459884705441666423028052148830158905485886171701487834414352145580689134118935718615170302386681354516210551166814063725659538167601094024485504904671047388018804491577973946837589773617600776922323720039798837524394148661937006838107219502189406938136160360688865486441789415253306584984435335712703138637636900698133830058022724475284015843865920091852655315133829265781637287081520968828425023128966216367480679157720563608793257782319740300219305895344504157851151066633776676318022459646850383149219136190897292607530808662119307727840614731785384967787854858376277862060670184154965534979637975964911036698666330488866403714239603117103956461029988440296214", "y": "1.5467198326545762949919947774222380761073851150481267502027889602021920137207678143929833134583926087524561859632203552721885143380061799912342742111248914808942539676986457622903626219110251943519383731147705839532144809955204812675252290844323228189387966310268490288832641507836071784551758536584339450226118386179996684187853171621279888104931665459701869020607965611102120206407540003995898193604991510045748737099187438820504276617379048290213423864044060716211013051240775299443280701550295541204224653308078827666023975984154253550850064324479049960038698307925168804309634921927632187676523468732559999626297575163056437346163698407768374531373000784801945228017613553692714244419677110919744582101625897571213364918861609435474075767713755813857534135396021560015761313475741243236526066323078489073347028669582190813176489849021089111141522656004194357225706425738807765621464143338232684373452213016451509762749365334559640058283122700699217946097526433519208798275580784385845233524893283671702090149398242695697407659614564616833084637215627547771608468131244289490446342299964845321325902672379937712668708107341768482107596646411161812035864484978440299139169486466960109155664441812094138884690810028368043938715174612397516026856151342944652830016996413849709118478899250373807672592488201639276963612749735805375857582628654188879049850710187020310432365857965825740756029731469867119175528016565077451680463117916514876754653481422835746780450278131289586546450348974479070825742960106645592579802119678012146270533207280839591996774547835065475555723653426402808449281901158103173700255198670897207635363798646968635051067468742254302676718887798541617903401074652788040379297662825511825940288484099754138349987823154660209858838571192789355758024756042888248091826228469098753293041729992455058342558431255341228582575594705585877948476508396413437910198032814940452593852059924182946931605369840046567941747672522731263861975984437112370761550282050834250330164893178724503226"}

Need to prove:
concyclic(A, G, H, I)

Proof:
By line_definition on F, D, perpendicular_line(D, g) we get Line(D, F) == perpendicular_line(D, g)
By line_definition on I, C, j we get j == Line(C, I)
By line_definition on D, B, i we get i == Line(B, D)
By line_definition on E, D, perpendicular_line(D, f) we get Line(D, E) == perpendicular_line(D, f)
By line_definition on B, E, f we get f == Line(B, E)
By line_definition on F, C, g we get g == Line(C, F)
By line_definition on E, C, f we get f == Line(C, E)
By line_definition on A, I, perpendicular_line(A, j) we get Line(A, I) == perpendicular_line(A, j)
By line_definition on F, A, g we get g == Line(A, F)
By line_definition on A, D, h we get h == Line(A, D)
By perpendicular_line_definition on C, g, perpendicular_line(D, g) we get g == perpendicular_line(C, perpendicular_line(D, g))
By line_intersection_definition on A, perpendicular_line(A, j), g we get A == line_intersection(g, perpendicular_line(A, j))
By line_intersection_definition on D, perpendicular_line(D, g), h we get D == line_intersection(h, perpendicular_line(D, g))
By line_intersection_definition on C, j, f we get C == line_intersection(f, j)
By line_intersection_definition on C, g, j we get C == line_intersection(g, j)
By perpendicular_line_definition on I, j, perpendicular_line(A, j) we get j == perpendicular_line(I, perpendicular_line(A, j))
By perpendicular_line_definition on F, perpendicular_line(D, g), g we get perpendicular_line(D, g) == perpendicular_line(F, g)
By line_intersection_definition on D, perpendicular_line(D, f), i we get D == line_intersection(i, perpendicular_line(D, f))
By line_intersection_definition on B, f, i we get B == line_intersection(f, i)
By line_intersection_definition on A, h, g we get A == line_intersection(g, h)
By line_intersection_definition on D, perpendicular_line(D, f), perpendicular_line(D, g) we get D == line_intersection(perpendicular_line(D, f), perpendicular_line(D, g))
By perpendicular_line_definition on C, j, perpendicular_line(A, j) we get j == perpendicular_line(C, perpendicular_line(A, j))
By perpendicular_line_definition on A, g, perpendicular_line(D, g) we get g == perpendicular_line(A, perpendicular_line(D, g))
By line_intersection_definition on A, perpendicular_line(A, j), h we get A == line_intersection(h, perpendicular_line(A, j))
By perpendicular_line_definition on E, f, perpendicular_line(D, f) we get f == perpendicular_line(E, perpendicular_line(D, f))
By line_intersection_definition on C, f, g we get C == line_intersection(f, g)
By line_intersection_definition on D, perpendicular_line(D, g), i we get D == line_intersection(i, perpendicular_line(D, g))
By perpendicular_line_definition on B, f, perpendicular_line(D, f) we get f == perpendicular_line(B, perpendicular_line(D, f))
By perpendicular_line_definition on E, perpendicular_line(D, f), f we get perpendicular_line(D, f) == perpendicular_line(E, f)
By line_intersection_definition on D, perpendicular_line(D, f), h we get D == line_intersection(h, perpendicular_line(D, f))
By perpendicular_line_definition on F, g, perpendicular_line(D, g) we get g == perpendicular_line(F, perpendicular_line(D, g))
By perpendicular_line_definition on I, perpendicular_line(A, j), j we get perpendicular_line(A, j) == perpendicular_line(I, j)
By perpendicular_line_definition on C, f, perpendicular_line(D, f) we get f == perpendicular_line(C, perpendicular_line(D, f))
By between_imply_not_between on F, G, A we get collinear_and_not_between(A, F, G)
By between_imply_not_between on A, G, F we get collinear_and_not_between(F, A, G)
By circle_radius_v0_r on E, c we get radius(c) == distance(E, center(c))
By circle_radius_v0_r on A, c we get radius(c) == distance(A, center(c))
By circle_radius_v0_r on F, c we get radius(c) == distance(F, center(c))
By in_imply_collinear on F, A, C we get collinear(A, C, F)
By in_imply_collinear on E, B, C we get collinear(B, C, E)
By angle_bisector_draw_angle_v0 on C, B, A we get exists(Line(A, B), Line(B, C))
By angle_bisector_draw_angle_v0 on C, A, B we get exists(Line(A, B), Line(A, C))
By angle_bisector_draw_angle_v0 on B, A, C we get exists(Line(A, B), Line(A, C))
By angle_bisector_draw_angle_v0 on A, B, C we get exists(Line(A, B), Line(B, C))
By power_of_a_point_on_circle on E, c we get 0 == power_of_a_point(E, c)
By power_of_a_point_on_circle on A, c we get 0 == power_of_a_point(A, c)
By power_of_a_point_in_circle on F, c we get 0 == power_of_a_point(F, c)
By angle_to_center on E, F, A, c we get 2 * angle(E, F, A) == angle(E, center(c), A) mod 360
By angle_to_center on F, E, A, c we get 2 * angle(F, E, A) == angle(F, center(c), A) mod 360
By angle_to_center on A, E, F, c we get 2 * angle(A, E, F) == angle(A, center(c), F) mod 360
By angle_to_center on A, F, E, c we get 2 * angle(A, F, E) == angle(A, center(c), E) mod 360
By angle_to_center on F, A, E, c we get 2 * angle(F, A, E) == angle(F, center(c), E) mod 360
By angle_to_center on E, A, F, c we get 2 * angle(E, A, F) == angle(E, center(c), F) mod 360
By collinear_definition on G, A, F we get A in Line(F, G), F in Line(A, G), Line(A, G) == Line(F, G), 0 == 2 * angle(A, G, F) mod 360
By log_of_2_times_distance on F, A, G, F we get log(distance(A, F)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(F, G))
By collinear_definition on A, F, G we get F in Line(A, G), G in Line(A, F), Line(A, F) == Line(A, G), 0 == 2 * angle(F, A, G) mod 360
By altitude_definition on D, A, C, perpendicular_line(D, g) we get altitude(D, A, C) == perpendicular_line(D, g)
By altitude_definition on D, C, B, perpendicular_line(D, f) we get altitude(D, B, C) == perpendicular_line(D, f)
By collinear_definition on F, A, G we get A in Line(F, G), G in Line(A, F), Line(A, F) == Line(F, G), 0 == 2 * angle(A, F, G) mod 360
By collinear_definition on A, G, F we get G in Line(A, F), F in Line(A, G), Line(A, F) == Line(A, G), 0 == 2 * angle(G, A, F) mod 360
By collinear_definition on F, G, A we get G in Line(A, F), A in Line(F, G), Line(A, F) == Line(F, G), 0 == 2 * angle(G, F, A) mod 360
By log_of_2_times_distance on F, A, A, G we get log(distance(A, F)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(A, G))
By collinear_definition on G, F, A we get F in Line(A, G), A in Line(F, G), Line(A, G) == Line(F, G), 0 == 2 * angle(F, G, A) mod 360
By incenter_concurrency on B, A, C we get incenter(A, B, C) in internal_angle_bisector(B, A, C), incenter(A, B, C) in internal_angle_bisector(A, C, B), incenter(A, B, C) in internal_angle_bisector(A, B, C)
By power_of_a_point_definition on G, F, A, c we get log(power_of_a_point(G, c)) == log(distance(F, G)) + log(distance(A, G))
By between_implies_angles on A, G, F we get 180 == angle(A, G, F) mod 360, 0 == angle(G, F, A) mod 360, 0 == angle(F, A, G) mod 360
By between_implies_angles on F, G, A we get 180 == angle(F, G, A) mod 360, 0 == angle(G, A, F) mod 360, 0 == angle(A, F, G) mod 360
By concurrent_sufficient_conditions on Line(D, E), h, Line(D, F) we get concurrent(h, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, E), Line(D, F), i we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), Line(D, E), i we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), Line(D, E), h we get concurrent(h, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), i, Line(D, E) we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on g, Line(A, I), h we get concurrent(g, h, Line(A, I))
By concurrent_sufficient_conditions on Line(D, F), i, h we get concurrent(h, i, Line(D, F))
By concurrent_sufficient_conditions on h, g, Line(A, I) we get concurrent(g, h, Line(A, I))
By concurrent_sufficient_conditions on i, Line(D, F), h we get concurrent(h, i, Line(D, F))
By concurrent_sufficient_conditions on Line(D, E), i, h we get concurrent(h, i, Line(D, E))
By concurrent_sufficient_conditions on Line(D, E), i, Line(D, F) we get concurrent(i, Line(D, E), Line(D, F))
By line_definition on C, G, g we get g == Line(C, G)
By concurrent_sufficient_conditions on h, Line(D, E), Line(D, F) we get concurrent(h, Line(D, E), Line(D, F))
By line_definition on I, D, j we get j == Line(D, I)
By concurrent_sufficient_conditions on i, Line(D, E), h we get concurrent(h, i, Line(D, E))
By concurrent_sufficient_conditions on h, Line(D, F), Line(D, E) we get concurrent(h, Line(D, E), Line(D, F))
By line_definition on C, D, j we get j == Line(C, D)
By concurrent_sufficient_conditions on h, Line(D, E), i we get concurrent(h, i, Line(D, E))
By concurrent_sufficient_conditions on Line(D, F), h, Line(D, E) we get concurrent(h, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on h, i, Line(D, E) we get concurrent(h, i, Line(D, E))
By concurrent_sufficient_conditions on g, h, Line(A, I) we get concurrent(g, h, Line(A, I))
By concurrent_sufficient_conditions on h, Line(A, I), g we get concurrent(g, h, Line(A, I))
By concurrent_sufficient_conditions on Line(D, E), h, i we get concurrent(h, i, Line(D, E))
By concurrent_sufficient_conditions on i, h, Line(D, E) we get concurrent(h, i, Line(D, E))
By concurrent_sufficient_conditions on h, i, Line(D, F) we get concurrent(h, i, Line(D, F))
By concurrent_sufficient_conditions on i, Line(D, E), Line(D, F) we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on h, Line(D, F), i we get concurrent(h, i, Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), h, i we get concurrent(h, i, Line(D, F))
By concurrent_sufficient_conditions on i, h, Line(D, F) we get concurrent(h, i, Line(D, F))
By concurrent_sufficient_conditions on i, Line(D, F), Line(D, E) we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(A, I), h, g we get concurrent(g, h, Line(A, I))
By concurrent_sufficient_conditions on Line(D, E), Line(D, F), h we get concurrent(h, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(A, I), g, h we get concurrent(g, h, Line(A, I))
By line_intersection_definition on A, g, Line(A, B) we get A == line_intersection(g, Line(A, B))
By line_intersection_definition on A, h, Line(A, H) we get A == line_intersection(h, Line(A, H))
By line_intersection_definition on E, Line(A, E), Line(D, E) we get E == line_intersection(Line(A, E), Line(D, E))
By line_intersection_definition on A, Line(A, H), Line(A, E) we get A == line_intersection(Line(A, E), Line(A, H))
By concurrent_sufficient_conditions on j, Line(D, F), i we get concurrent(i, j, Line(D, F))
By line_intersection_definition on A, Line(A, B), Line(A, I) we get A == line_intersection(Line(A, B), Line(A, I))
By concurrent_sufficient_conditions on j, Line(D, E), h we get concurrent(h, j, Line(D, E))
By line_intersection_definition on F, Line(F, H), g we get F == line_intersection(g, Line(F, H))
By line_intersection_definition on E, Line(E, H), f we get E == line_intersection(f, Line(E, H))
By line_intersection_definition on E, Line(E, F), f we get E == line_intersection(f, Line(E, F))
By line_intersection_definition on B, Line(A, B), i we get B == line_intersection(i, Line(A, B))
By line_intersection_definition on A, Line(A, H), Line(A, I) we get A == line_intersection(Line(A, H), Line(A, I))
By line_intersection_definition on A, h, Line(A, E) we get A == line_intersection(h, Line(A, E))
By line_intersection_definition on D, j, Line(D, F) we get D == line_intersection(j, Line(D, F))
By line_intersection_definition on E, Line(E, H), Line(A, E) we get E == line_intersection(Line(A, E), Line(E, H))
By line_intersection_definition on H, Line(F, H), Line(A, H) we get H == line_intersection(Line(A, H), Line(F, H))
By line_intersection_definition on A, Line(A, E), Line(A, B) we get A == line_intersection(Line(A, B), Line(A, E))
By line_intersection_definition on E, Line(D, E), Line(E, H) we get E == line_intersection(Line(D, E), Line(E, H))
By line_intersection_definition on F, Line(F, H), Line(D, F) we get F == line_intersection(Line(D, F), Line(F, H))
By line_intersection_definition on E, Line(E, H), Line(E, F) we get E == line_intersection(Line(E, F), Line(E, H))
By line_intersection_definition on F, Line(D, F), Line(E, F) we get F == line_intersection(Line(D, F), Line(E, F))
By line_intersection_definition on H, Line(E, H), Line(F, H) we get H == line_intersection(Line(E, H), Line(F, H))
By line_intersection_definition on A, h, Line(A, B) we get A == line_intersection(h, Line(A, B))
By concurrent_sufficient_conditions on Line(D, E), j, h we get concurrent(h, j, Line(D, E))
By line_intersection_definition on A, Line(A, I), Line(A, E) we get A == line_intersection(Line(A, E), Line(A, I))
By line_intersection_definition on F, Line(E, F), g we get F == line_intersection(g, Line(E, F))
By perpendicular_line_definition on G, g, Line(D, F) we get g == perpendicular_line(G, Line(D, F))
By concurrent_sufficient_conditions on j, Line(D, F), h we get concurrent(h, j, Line(D, F))
By line_intersection_definition on A, Line(A, E), g we get A == line_intersection(g, Line(A, E))
By line_intersection_definition on H, Line(A, H), Line(E, H) we get H == line_intersection(Line(A, H), Line(E, H))
By concurrent_sufficient_conditions on Line(D, F), j, h we get concurrent(h, j, Line(D, F))
By line_intersection_definition on A, Line(A, H), Line(A, B) we get A == line_intersection(Line(A, B), Line(A, H))
By concurrent_sufficient_conditions on Line(D, E), j, i we get concurrent(i, j, Line(D, E))
By concurrent_sufficient_conditions on j, Line(D, E), i we get concurrent(i, j, Line(D, E))
By concurrent_sufficient_conditions on Line(D, F), j, i we get concurrent(i, j, Line(D, F))
By line_intersection_definition on F, Line(F, H), Line(E, F) we get F == line_intersection(Line(E, F), Line(F, H))
By line_intersection_definition on A, g, Line(A, H) we get A == line_intersection(g, Line(A, H))
By perpendicular_line_definition on D, j, Line(A, I) we get j == perpendicular_line(D, Line(A, I))
By line_intersection_definition on E, Line(E, F), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, F))
By line_intersection_definition on E, Line(E, F), Line(A, E) we get E == line_intersection(Line(A, E), Line(E, F))
By line_intersection_definition on B, f, Line(A, B) we get B == line_intersection(f, Line(A, B))
By line_intersection_definition on D, j, Line(D, E) we get D == line_intersection(j, Line(D, E))
By line_intersection_definition on E, Line(A, E), f we get E == line_intersection(f, Line(A, E))
By same_angle_v1 on A, G, F, E we get angle(F, A, E) == angle(G, A, E) mod 360
By same_angle_v0 on F, G, A, E we get angle(A, F, E) == angle(G, F, E) mod 360
By projection_definition on B, E, Line(D, E) we get E == projection(B, Line(D, E))
By projection_definition on C, E, Line(D, E) we get E == projection(C, Line(D, E))
By projection_definition on C, I, Line(A, I) we get I == projection(C, Line(A, I))
By projection_definition on C, F, Line(D, F) we get F == projection(C, Line(D, F))
By projection_definition on A, F, Line(D, F) we get F == projection(A, Line(D, F))
By same_angle_v1 on A, G, F, I we get angle(F, A, I) == angle(G, A, I) mod 360
By perpendicular_direction_conditions_v0_r on F, D, A, F we get 180 == 2 * direction(F, D) - 2 * direction(A, F) mod 360
By same_angle_v3 on F, A, C, E we get angle(A, F, E) == angle(C, F, E) + 180 mod 360
By same_angle_v1 on A, F, G, B we get angle(F, A, B) == angle(G, A, B) mod 360
By same_angle_v1 on A, C, F, E we get angle(C, A, E) == angle(F, A, E) mod 360
By same_angle_v0 on F, A, G, H we get angle(A, F, H) == angle(G, F, H) mod 360
By same_angle_v1 on A, G, F, H we get angle(F, A, H) == angle(G, A, H) mod 360
By perpendicular_direction_conditions_v0_r on F, D, G, F we get 180 == 2 * direction(F, D) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on A, F, F, D we get 180 == 2 * direction(A, F) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on F, D, F, A we get 180 == 2 * direction(F, D) - 2 * direction(F, A) mod 360
By same_angle_v0 on F, A, G, D we get angle(A, F, D) == angle(G, F, D) mod 360
By perpendicular_direction_conditions_v0_r on D, F, A, F we get 180 == 2 * direction(D, F) - 2 * direction(A, F) mod 360
By same_angle_v1 on A, F, G, D we get angle(F, A, D) == angle(G, A, D) mod 360
By perpendicular_direction_conditions_v0_r on D, F, F, G we get 180 == 2 * direction(D, F) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on F, D, A, G we get 180 == 2 * direction(F, D) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on D, F, G, A we get 180 == 2 * direction(D, F) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on D, F, F, A we get 180 == 2 * direction(D, F) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on F, A, F, D we get 180 == 2 * direction(F, A) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on F, D, F, G we get 180 == 2 * direction(F, D) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on F, A, D, F we get 180 == 2 * direction(F, A) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on D, F, G, F we get 180 == 2 * direction(D, F) - 2 * direction(G, F) mod 360
By projection_definition on G, F, Line(D, F) we get F == projection(G, Line(D, F))
By perpendicular_direction_conditions_v0_r on A, G, D, F we get 180 == 2 * direction(A, G) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on A, G, F, D we get 180 == 2 * direction(A, G) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on F, D, G, A we get 180 == 2 * direction(F, D) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on G, A, F, D we get 180 == 2 * direction(G, A) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on F, G, D, F we get 180 == 2 * direction(F, G) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on G, F, D, F we get 180 == 2 * direction(G, F) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on G, A, D, F we get 180 == 2 * direction(G, A) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on A, F, D, F we get 180 == 2 * direction(A, F) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on G, F, F, D we get 180 == 2 * direction(G, F) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on D, F, A, G we get 180 == 2 * direction(D, F) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on F, G, F, D we get 180 == 2 * direction(F, G) - 2 * direction(F, D) mod 360
By in_imply_collinear on G, C, A we get collinear(A, C, G)
By in_imply_collinear on C, G, F we get collinear(C, F, G)
By probably_between_and_collinear_implies_between on B, E, C we get between(B, E, C)
By probably_between_and_collinear_implies_between on A, F, C we get between(A, F, C)
By in_imply_collinear on D, I, C we get collinear(C, D, I)
By reverse_direction on A, F we get 180 == direction(A, F) - direction(F, A) mod 360
By reverse_direction on G, A we get 180 == direction(G, A) - direction(A, G) mod 360
By reverse_direction on A, G we get 180 == direction(A, G) - direction(G, A) mod 360
By reverse_direction on E, F we get 180 == direction(E, F) - direction(F, E) mod 360
By reverse_direction on F, E we get 180 == direction(F, E) - direction(E, F) mod 360
By reverse_direction on A, E we get 180 == direction(A, E) - direction(E, A) mod 360
By reverse_direction on F, G we get 180 == direction(F, G) - direction(G, F) mod 360
By reverse_direction on E, A we get 180 == direction(E, A) - direction(A, E) mod 360
By reverse_direction on F, A we get 180 == direction(F, A) - direction(A, F) mod 360
By reverse_direction on G, F we get 180 == direction(G, F) - direction(F, G) mod 360
By same_angle_v1 on A, F, C, I we get angle(C, A, I) == angle(F, A, I) mod 360
By perpendicular_direction_conditions_v0_r on E, C, E, D we get 180 == 2 * direction(E, C) - 2 * direction(E, D) mod 360
By same_angle_v1 on A, F, C, D we get angle(C, A, D) == angle(F, A, D) mod 360
By same_angle_v2 on F, A, C, H we get angle(A, F, H) == angle(C, F, H) + 180 mod 360
By perpendicular_direction_conditions_v0_r on D, E, E, B we get 180 == 2 * direction(D, E) - 2 * direction(E, B) mod 360
By same_angle_v1 on A, C, F, H we get angle(C, A, H) == angle(F, A, H) mod 360
By same_angle_v2 on E, C, B, F we get angle(C, E, F) == angle(B, E, F) + 180 mod 360
By perpendicular_direction_conditions_v0_r on D, E, B, C we get 180 == 2 * direction(D, E) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on C, A, D, F we get 180 == 2 * direction(C, A) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on F, D, C, F we get 180 == 2 * direction(F, D) - 2 * direction(C, F) mod 360
By same_angle_v1 on A, C, F, B we get angle(C, A, B) == angle(F, A, B) mod 360
By perpendicular_direction_conditions_v0_r on A, I, I, C we get 180 == 2 * direction(A, I) - 2 * direction(I, C) mod 360
By same_angle_v2 on F, A, C, D we get angle(A, F, D) == angle(C, F, D) + 180 mod 360
By perpendicular_direction_conditions_v0_r on B, E, D, E we get 180 == 2 * direction(B, E) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on F, C, F, D we get 180 == 2 * direction(F, C) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on C, I, A, I we get 180 == 2 * direction(C, I) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on F, D, C, A we get 180 == 2 * direction(F, D) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on A, C, F, D we get 180 == 2 * direction(A, C) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on C, I, I, A we get 180 == 2 * direction(C, I) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on D, F, A, C we get 180 == 2 * direction(D, F) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on B, E, E, D we get 180 == 2 * direction(B, E) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on E, D, E, C we get 180 == 2 * direction(E, D) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on A, I, C, I we get 180 == 2 * direction(A, I) - 2 * direction(C, I) mod 360
By perpendicular_direction_conditions_v0_r on D, F, F, C we get 180 == 2 * direction(D, F) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on E, B, E, D we get 180 == 2 * direction(E, B) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on I, A, C, I we get 180 == 2 * direction(I, A) - 2 * direction(C, I) mod 360
By perpendicular_direction_conditions_v0_r on D, F, C, A we get 180 == 2 * direction(D, F) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on C, F, D, F we get 180 == 2 * direction(C, F) - 2 * direction(D, F) mod 360
By same_angle_v2 on E, C, B, A we get angle(C, E, A) == angle(B, E, A) + 180 mod 360
By perpendicular_direction_conditions_v0_r on E, B, D, E we get 180 == 2 * direction(E, B) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on D, F, C, F we get 180 == 2 * direction(D, F) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on B, C, D, E we get 180 == 2 * direction(B, C) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on C, B, D, E we get 180 == 2 * direction(C, B) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on F, D, F, C we get 180 == 2 * direction(F, D) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on D, E, E, C we get 180 == 2 * direction(D, E) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on D, E, C, B we get 180 == 2 * direction(D, E) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on I, A, I, C we get 180 == 2 * direction(I, A) - 2 * direction(I, C) mod 360
By perpendicular_direction_conditions_v0_r on F, D, A, C we get 180 == 2 * direction(F, D) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on E, D, B, C we get 180 == 2 * direction(E, D) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on E, D, E, B we get 180 == 2 * direction(E, D) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on C, F, F, D we get 180 == 2 * direction(C, F) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on C, A, F, D we get 180 == 2 * direction(C, A) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on C, E, E, D we get 180 == 2 * direction(C, E) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on E, C, D, E we get 180 == 2 * direction(E, C) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on C, E, D, E we get 180 == 2 * direction(C, E) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on D, E, C, E we get 180 == 2 * direction(D, E) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on I, C, I, A we get 180 == 2 * direction(I, C) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on B, C, E, D we get 180 == 2 * direction(B, C) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on E, D, C, E we get 180 == 2 * direction(E, D) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on E, D, B, E we get 180 == 2 * direction(E, D) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on F, C, D, F we get 180 == 2 * direction(F, C) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on E, D, C, B we get 180 == 2 * direction(E, D) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on I, C, A, I we get 180 == 2 * direction(I, C) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on A, C, D, F we get 180 == 2 * direction(A, C) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on D, E, B, E we get 180 == 2 * direction(D, E) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on C, B, E, D we get 180 == 2 * direction(C, B) - 2 * direction(E, D) mod 360
By isosceles_triangle_midpoint on H, F, A we get midpoint(A, F) in median(H, A, F)
By altitude_definition on C, D, E, f we get f == altitude(C, D, E)
By altitude_definition on C, A, I, j we get j == altitude(C, A, I)
By perpendicular_angle_conditions_v0 on G, F, D we get angle(G, F, D) == orientation(D, G, F) mod 360
By altitude_definition on B, E, D, f we get f == altitude(B, D, E)
By internal_angle_bisector_definition_v0_r on A, F, A, G we get Line(F, G) == internal_angle_bisector(A, G, A)
By collinear_definition on F, A, C we get A in Line(C, F), C in Line(A, F), Line(A, F) == Line(C, F), 0 == 2 * angle(A, F, C) mod 360
By collinear_definition on A, C, F we get C in Line(A, F), F in Line(A, C), Line(A, C) == Line(A, F), 0 == 2 * angle(C, A, F) mod 360
By internal_angle_bisector_definition_v0_r on F, A, F, G we get Line(A, G) == internal_angle_bisector(F, G, F)
By collinear_definition on F, C, A we get C in Line(A, F), A in Line(C, F), Line(A, F) == Line(C, F), 0 == 2 * angle(C, F, A) mod 360
By altitude_definition on C, D, F, g we get g == altitude(C, D, F)
By reverse_direction on H, F we get 180 == direction(H, F) - direction(F, H) mod 360
By internal_angle_bisector_definition_v0_r on G, F, G, A we get Line(A, F) == internal_angle_bisector(G, A, G)
By internal_angle_bisector_definition_v0_r on A, G, A, F we get Line(F, G) == internal_angle_bisector(A, F, A)
By collinear_definition on A, F, C we get F in Line(A, C), C in Line(A, F), Line(A, C) == Line(A, F), 0 == 2 * angle(F, A, C) mod 360
By internal_angle_bisector_definition_v0_r on F, G, F, A we get Line(A, G) == internal_angle_bisector(F, A, F)
By altitude_definition on A, D, F, g we get g == altitude(A, D, F)
By internal_angle_bisector_definition_v0_r on G, A, G, F we get Line(A, F) == internal_angle_bisector(G, F, G)
By perpendicular_angle_conditions_v0 on D, F, A we get angle(D, F, A) == orientation(A, D, F) mod 360
By reverse_direction on H, E we get 180 == direction(H, E) - direction(E, H) mod 360
By perpendicular_angle_conditions_v0 on A, F, D we get angle(A, F, D) == orientation(A, F, D) mod 360
By reverse_direction on H, A we get 180 == direction(H, A) - direction(A, H) mod 360
By perpendicular_angle_conditions_v0 on D, F, G we get angle(D, F, G) == orientation(D, F, G) mod 360
By same_angle_v0 on B, E, C, A we get angle(C, B, A) == angle(E, B, A) mod 360
By same_angle_v1 on C, B, E, A we get angle(B, C, A) == angle(E, C, A) mod 360
By same_angle_v3 on E, C, B, D we get angle(C, E, D) == angle(B, E, D) + 180 mod 360
By same_angle_v3 on E, C, B, H we get angle(C, E, H) == angle(B, E, H) + 180 mod 360
By same_angle_v0 on B, E, C, D we get angle(C, B, D) == angle(E, B, D) mod 360
By same_angle_v1 on C, B, E, F we get angle(B, C, F) == angle(E, C, F) mod 360
By same_angle_v0 on C, F, A, E we get angle(A, C, E) == angle(F, C, E) mod 360
By same_angle_v0 on C, A, F, I we get angle(A, C, I) == angle(F, C, I) mod 360
By same_angle_v1 on C, E, B, I we get angle(B, C, I) == angle(E, C, I) mod 360
By same_angle_v0 on C, F, A, B we get angle(A, C, B) == angle(F, C, B) mod 360
By sas_anti_congruence on A, H, F, F, H, A we get anti_congruent_triangles(A, F, H, F, A, H)
By isosceles_triangle_properties on H, A, F we get distance(A, H) == distance(F, H), angle(A, F, H) == angle(H, A, F) mod 360
By collinear_definition on B, C, E we get C in Line(B, E), E in Line(B, C), Line(B, C) == Line(B, E), 0 == 2 * angle(C, B, E) mod 360
By sss_anti_congruence_v0 on A, F, H, F, A, H we get anti_congruent_triangles(A, F, H, F, A, H)
By altitude_definition on D, A, F, Line(D, F) we get Line(D, F) == altitude(D, A, F)
By sss_anti_congruence_v0 on A, F, H, F, A, H we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v0 on H, A, F, H, F, A we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v1 on F, A, H, A, F, H we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v1 on F, A, H, A, F, H we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v0 on F, H, A, A, H, F we get anti_congruent_triangles(A, F, H, F, A, H)
By perpendicular_angle_conditions_v0 on B, E, D we get angle(B, E, D) == orientation(B, E, D) mod 360
By collinear_definition on E, C, B we get C in Line(B, E), B in Line(C, E), Line(B, E) == Line(C, E), 0 == 2 * angle(C, E, B) mod 360
By sss_anti_congruence_v0 on H, A, F, H, F, A we get anti_congruent_triangles(A, F, H, F, A, H)
By collinear_definition on B, E, C we get E in Line(B, C), C in Line(B, E), Line(B, C) == Line(B, E), 0 == 2 * angle(E, B, C) mod 360
By sss_anti_congruence_v0 on A, F, H, F, A, H we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v0 on H, A, F, H, F, A we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v1 on H, F, A, H, A, F we get anti_congruent_triangles(A, F, H, F, A, H)
By perpendicular_angle_conditions_v0 on C, E, D we get angle(C, E, D) == orientation(C, E, D) mod 360
By sas_anti_congruence on E, H, A, A, H, E we get anti_congruent_triangles(A, E, H, E, A, H)
By sss_anti_congruence_v1 on A, H, F, F, H, A we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v1 on F, A, H, A, F, H we get anti_congruent_triangles(A, F, H, F, A, H)
By sas_anti_congruence on F, H, A, A, H, F we get anti_congruent_triangles(A, F, H, F, A, H)
By perpendicular_angle_conditions_v0 on C, F, D we get angle(C, F, D) == orientation(C, F, D) mod 360
By collinear_definition on C, A, F we get A in Line(C, F), F in Line(A, C), Line(A, C) == Line(C, F), 0 == 2 * angle(A, C, F) mod 360
By altitude_definition on G, D, F, g we get g == altitude(G, D, F)
By perpendicular_angle_conditions_v0 on C, I, A we get angle(C, I, A) == orientation(A, C, I) mod 360
By sss_anti_congruence_v1 on A, H, F, F, H, A we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v1 on A, H, F, F, H, A we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v0 on F, H, A, A, H, F we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v0 on A, F, H, F, A, H we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v1 on F, A, H, A, F, H we get anti_congruent_triangles(A, F, H, F, A, H)
By perpendicular_angle_conditions_v0 on A, I, C we get angle(A, I, C) == orientation(A, I, C) mod 360
By perpendicular_angle_conditions_v0 on D, F, C we get angle(D, F, C) == orientation(C, D, F) mod 360
By collinear_definition on C, B, E we get B in Line(C, E), E in Line(B, C), Line(B, C) == Line(C, E), 0 == 2 * angle(B, C, E) mod 360
By altitude_definition on D, B, E, Line(D, E) we get Line(D, E) == altitude(D, B, E)
By sas_anti_congruence on A, H, E, E, H, A we get anti_congruent_triangles(A, E, H, E, A, H)
By isosceles_triangle_properties on H, E, F we get distance(E, H) == distance(F, H), angle(E, F, H) == angle(H, E, F) mod 360
By collinear_definition on E, B, C we get B in Line(C, E), C in Line(B, E), Line(B, E) == Line(C, E), 0 == 2 * angle(B, E, C) mod 360
By sss_anti_congruence_v0 on H, A, F, H, F, A we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v0 on F, H, A, A, H, F we get anti_congruent_triangles(A, F, H, F, A, H)
By altitude_definition on D, F, C, Line(D, F) we get Line(D, F) == altitude(D, C, F)
By altitude_definition on D, C, E, Line(D, E) we get Line(D, E) == altitude(D, C, E)
By collinear_definition on C, E, B we get E in Line(B, C), B in Line(C, E), Line(B, C) == Line(C, E), 0 == 2 * angle(E, C, B) mod 360
By altitude_definition on D, A, G, Line(D, F) we get Line(D, F) == altitude(D, A, G)
By sas_anti_congruence on E, H, F, F, H, E we get anti_congruent_triangles(E, F, H, F, E, H)
By sss_anti_congruence_v0 on H, A, F, H, F, A we get anti_congruent_triangles(A, F, H, F, A, H)
By altitude_definition on D, F, G, Line(D, F) we get Line(D, F) == altitude(D, F, G)
By altitude_definition on A, C, I, Line(A, I) we get Line(A, I) == altitude(A, C, I)
By sss_anti_congruence_v0 on A, F, H, F, A, H we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v1 on A, H, F, F, H, A we get anti_congruent_triangles(A, F, H, F, A, H)
By sas_anti_congruence on F, H, E, E, H, F we get anti_congruent_triangles(E, F, H, F, E, H)
By collinear_definition on C, F, A we get F in Line(A, C), A in Line(C, F), Line(A, C) == Line(C, F), 0 == 2 * angle(F, C, A) mod 360
By isosceles_triangle_properties on H, F, E we get distance(E, H) == distance(F, H), angle(F, E, H) == angle(H, F, E) mod 360
By isosceles_triangle_properties on H, A, E we get distance(A, H) == distance(E, H), angle(A, E, H) == angle(H, A, E) mod 360
By sss_anti_congruence_v1 on H, F, A, H, A, F we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v0 on F, H, A, A, H, F we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v0 on H, A, F, H, F, A we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v1 on A, H, F, F, H, A we get anti_congruent_triangles(A, F, H, F, A, H)
By isosceles_triangle_properties on H, F, A we get distance(A, H) == distance(F, H), angle(F, A, H) == angle(H, F, A) mod 360
By isosceles_triangle_properties on H, E, A we get distance(A, H) == distance(E, H), angle(E, A, H) == angle(H, E, A) mod 360
By altitude_definition on D, A, I, j we get j == altitude(D, A, I)
By sss_anti_congruence_v1 on H, F, A, H, A, F we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v0 on F, H, A, A, H, F we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v0 on F, H, A, A, H, F we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v1 on F, A, H, A, F, H we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v1 on H, F, A, H, A, F we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v1 on A, H, F, F, H, A we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v1 on H, F, A, H, A, F we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v1 on F, A, H, A, F, H we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v1 on H, F, A, H, A, F we get anti_congruent_triangles(A, F, H, F, A, H)
By sss_anti_congruence_v0 on A, F, H, F, A, H we get anti_congruent_triangles(A, F, H, F, A, H)
By perpendicular_angle_conditions_v0 on D, E, B we get angle(D, E, B) == orientation(B, D, E) mod 360
By perpendicular_angle_conditions_v0 on D, E, C we get angle(D, E, C) == orientation(C, D, E) mod 360
By internal_angle_bisector_definition_v0 on B, D, C, A we get angle(B, A, D) == angle(D, A, C) mod 360
By internal_angle_bisector_definition_v0 on B, I, A, C we get angle(B, C, I) == angle(I, C, A) mod 360
By internal_angle_bisector_definition_v0 on C, D, A, B we get angle(C, B, D) == angle(D, B, A) mod 360
By internal_angle_bisector_definition_v0 on C, D, B, A we get angle(C, A, D) == angle(D, A, B) mod 360
By internal_angle_bisector_definition_v0 on A, I, B, C we get angle(A, C, I) == angle(I, C, B) mod 360
By internal_angle_bisector_definition_v0 on A, D, C, B we get angle(A, B, D) == angle(D, B, C) mod 360
By power_of_a_point_definition on C, F, A, c we get log(power_of_a_point(C, c)) == log(distance(C, F)) + log(distance(A, C))
By concurrent_sufficient_conditions on Line(A, I), Line(A, B), Line(A, E) we get concurrent(Line(A, B), Line(A, E), Line(A, I))
By concurrent_sufficient_conditions on Line(E, H), f, Line(D, E) we get concurrent(f, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on g, Line(D, F), Line(F, H) we get concurrent(g, Line(D, F), Line(F, H))
By concurrent_sufficient_conditions on Line(A, B), g, h we get concurrent(g, h, Line(A, B))
By concurrent_sufficient_conditions on i, f, Line(A, B) we get concurrent(f, i, Line(A, B))
By concurrent_sufficient_conditions on Line(A, B), h, g we get concurrent(g, h, Line(A, B))
By concyclic_sufficient_conditions_v1 on D, F, C, E we get concyclic(C, D, E, F)
By concurrent_sufficient_conditions on g, Line(A, I), Line(A, H) we get concurrent(g, Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on Line(A, H), Line(E, H), Line(F, H) we get concurrent(Line(A, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on g, Line(A, E), Line(A, B) we get concurrent(g, Line(A, B), Line(A, E))
By concurrent_sufficient_conditions on Line(A, B), g, Line(A, H) we get concurrent(g, Line(A, B), Line(A, H))
By concurrent_sufficient_conditions on f, Line(D, E), Line(E, F) we get concurrent(f, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), Line(E, H) we get concurrent(Line(D, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), Line(F, H) we get concurrent(Line(D, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(A, E), f, Line(E, F) we get concurrent(f, Line(A, E), Line(E, F))
By concurrent_sufficient_conditions on g, Line(A, H), Line(A, B) we get concurrent(g, Line(A, B), Line(A, H))
By concurrent_sufficient_conditions on Line(D, E), Line(A, E), Line(E, H) we get concurrent(Line(A, E), Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on f, Line(D, E), Line(E, H) we get concurrent(f, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on g, h, Line(A, E) we get concurrent(g, h, Line(A, E))
By concurrent_sufficient_conditions on g, Line(E, F), Line(F, H) we get concurrent(g, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(E, F), Line(A, E), Line(D, E) we get concurrent(Line(A, E), Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on g, Line(A, E), Line(A, I) we get concurrent(g, Line(A, E), Line(A, I))
By concurrent_sufficient_conditions on g, Line(A, E), h we get concurrent(g, h, Line(A, E))
By concurrent_sufficient_conditions on h, Line(A, E), Line(A, H) we get concurrent(h, Line(A, E), Line(A, H))
By concurrent_sufficient_conditions on Line(A, B), Line(A, H), g we get concurrent(g, Line(A, B), Line(A, H))
By concurrent_sufficient_conditions on Line(A, E), h, Line(A, H) we get concurrent(h, Line(A, E), Line(A, H))
By concurrent_sufficient_conditions on Line(A, E), Line(E, H), f we get concurrent(f, Line(A, E), Line(E, H))
By concurrent_sufficient_conditions on Line(D, E), Line(A, E), f we get concurrent(f, Line(A, E), Line(D, E))
By concurrent_sufficient_conditions on Line(A, E), Line(A, B), Line(A, I) we get concurrent(Line(A, B), Line(A, E), Line(A, I))
By concurrent_sufficient_conditions on Line(A, I), h, Line(A, H) we get concurrent(h, Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on Line(A, E), Line(A, H), h we get concurrent(h, Line(A, E), Line(A, H))
By concurrent_sufficient_conditions on Line(A, E), Line(D, E), Line(E, F) we get concurrent(Line(A, E), Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on h, Line(A, I), Line(A, H) we get concurrent(h, Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on Line(A, B), Line(A, I), h we get concurrent(h, Line(A, B), Line(A, I))
By concurrent_sufficient_conditions on Line(E, H), Line(A, H), Line(F, H) we get concurrent(Line(A, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(A, H), Line(A, B), Line(A, E) we get concurrent(Line(A, B), Line(A, E), Line(A, H))
By concurrent_sufficient_conditions on h, g, Line(A, E) we get concurrent(g, h, Line(A, E))
By concurrent_sufficient_conditions on Line(A, B), f, i we get concurrent(f, i, Line(A, B))
By concurrent_sufficient_conditions on Line(E, F), g, Line(D, F) we get concurrent(g, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(A, B), g, Line(A, E) we get concurrent(g, Line(A, B), Line(A, E))
By concurrent_sufficient_conditions on Line(A, I), g, Line(A, B) we get concurrent(g, Line(A, B), Line(A, I))
By concurrent_sufficient_conditions on f, Line(A, E), Line(E, F) we get concurrent(f, Line(A, E), Line(E, F))
By concurrent_sufficient_conditions on g, Line(E, F), Line(D, F) we get concurrent(g, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(A, H), Line(A, E), Line(A, B) we get concurrent(Line(A, B), Line(A, E), Line(A, H))
By concurrent_sufficient_conditions on Line(A, H), Line(A, I), Line(A, B) we get concurrent(Line(A, B), Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on g, h, Line(A, B) we get concurrent(g, h, Line(A, B))
By concurrent_sufficient_conditions on Line(E, F), Line(F, H), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(A, E), Line(A, I), g we get concurrent(g, Line(A, E), Line(A, I))
By concurrent_sufficient_conditions on Line(A, E), f, Line(E, H) we get concurrent(f, Line(A, E), Line(E, H))
By concurrent_sufficient_conditions on Line(A, H), Line(F, H), Line(E, H) we get concurrent(Line(A, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(E, F), f, Line(A, E) we get concurrent(f, Line(A, E), Line(E, F))
By concurrent_sufficient_conditions on g, h, Line(A, H) we get concurrent(g, h, Line(A, H))
By concurrent_sufficient_conditions on Line(A, B), h, Line(A, I) we get concurrent(h, Line(A, B), Line(A, I))
By concurrent_sufficient_conditions on Line(A, H), Line(A, E), Line(A, I) we get concurrent(Line(A, E), Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on g, Line(A, I), Line(A, E) we get concurrent(g, Line(A, E), Line(A, I))
By concurrent_sufficient_conditions on Line(A, B), h, Line(A, E) we get concurrent(h, Line(A, B), Line(A, E))
By concurrent_sufficient_conditions on Line(A, H), h, g we get concurrent(g, h, Line(A, H))
By concurrent_sufficient_conditions on Line(F, H), g, Line(E, F) we get concurrent(g, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(A, I), h, Line(A, B) we get concurrent(h, Line(A, B), Line(A, I))
By concurrent_sufficient_conditions on Line(A, E), Line(A, B), g we get concurrent(g, Line(A, B), Line(A, E))
By concurrent_sufficient_conditions on Line(E, H), Line(E, F), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(A, B), Line(A, E), g we get concurrent(g, Line(A, B), Line(A, E))
By concurrent_sufficient_conditions on h, Line(A, H), Line(A, E) we get concurrent(h, Line(A, E), Line(A, H))
By concurrent_sufficient_conditions on Line(A, E), Line(E, H), Line(D, E) we get concurrent(Line(A, E), Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(D, E), f, Line(E, F) we get concurrent(f, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(A, B), Line(A, H), Line(A, E) we get concurrent(Line(A, B), Line(A, E), Line(A, H))
By concurrent_sufficient_conditions on Line(A, I), h, Line(A, E) we get concurrent(h, Line(A, E), Line(A, I))
By concurrent_sufficient_conditions on Line(A, E), Line(A, I), Line(A, H) we get concurrent(Line(A, E), Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on Line(A, E), h, g we get concurrent(g, h, Line(A, E))
By concurrent_sufficient_conditions on Line(E, F), g, Line(F, H) we get concurrent(g, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(A, I), Line(A, B), g we get concurrent(g, Line(A, B), Line(A, I))
By concurrent_sufficient_conditions on Line(A, I), Line(A, H), g we get concurrent(g, Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on g, Line(A, B), h we get concurrent(g, h, Line(A, B))
By concurrent_sufficient_conditions on Line(A, E), g, h we get concurrent(g, h, Line(A, E))
By concurrent_sufficient_conditions on g, Line(D, F), Line(E, F) we get concurrent(g, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(A, H), Line(A, B), h we get concurrent(h, Line(A, B), Line(A, H))
By concurrent_sufficient_conditions on Line(A, E), Line(D, E), f we get concurrent(f, Line(A, E), Line(D, E))
By concurrent_sufficient_conditions on f, Line(E, F), Line(D, E) we get concurrent(f, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(A, I), Line(A, H), Line(A, B) we get concurrent(Line(A, B), Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on h, Line(A, B), Line(A, E) we get concurrent(h, Line(A, B), Line(A, E))
By concurrent_sufficient_conditions on Line(F, H), Line(D, F), g we get concurrent(g, Line(D, F), Line(F, H))
By concurrent_sufficient_conditions on Line(A, B), Line(A, H), h we get concurrent(h, Line(A, B), Line(A, H))
By concurrent_sufficient_conditions on Line(D, E), Line(E, H), Line(A, E) we get concurrent(Line(A, E), Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on g, Line(A, E), Line(A, H) we get concurrent(g, Line(A, E), Line(A, H))
By concurrent_sufficient_conditions on Line(D, E), Line(E, H), f we get concurrent(f, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), g we get concurrent(g, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(A, I), Line(A, H), h we get concurrent(h, Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on Line(A, E), h, Line(A, I) we get concurrent(h, Line(A, E), Line(A, I))
By concurrent_sufficient_conditions on Line(D, E), Line(A, E), Line(E, F) we get concurrent(Line(A, E), Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(E, H), Line(A, E), f we get concurrent(f, Line(A, E), Line(E, H))
By concurrent_sufficient_conditions on Line(A, E), Line(E, F), Line(E, H) we get concurrent(Line(A, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on g, Line(A, B), Line(A, E) we get concurrent(g, Line(A, B), Line(A, E))
By concurrent_sufficient_conditions on g, Line(A, B), Line(A, H) we get concurrent(g, Line(A, B), Line(A, H))
By concurrent_sufficient_conditions on Line(E, F), Line(A, E), f we get concurrent(f, Line(A, E), Line(E, F))
By concurrent_sufficient_conditions on Line(A, E), Line(A, H), Line(A, I) we get concurrent(Line(A, E), Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on Line(A, I), Line(A, B), h we get concurrent(h, Line(A, B), Line(A, I))
By concurrent_sufficient_conditions on f, Line(D, E), Line(A, E) we get concurrent(f, Line(A, E), Line(D, E))
By concurrent_sufficient_conditions on g, Line(A, H), Line(A, I) we get concurrent(g, Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on Line(F, H), g, Line(D, F) we get concurrent(g, Line(D, F), Line(F, H))
By concurrent_sufficient_conditions on f, Line(A, E), Line(E, H) we get concurrent(f, Line(A, E), Line(E, H))
By concurrent_sufficient_conditions on Line(A, B), Line(A, I), g we get concurrent(g, Line(A, B), Line(A, I))
By concurrent_sufficient_conditions on Line(E, H), Line(D, E), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(A, I), Line(A, H), Line(A, E) we get concurrent(Line(A, E), Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on Line(A, E), g, Line(A, I) we get concurrent(g, Line(A, E), Line(A, I))
By concurrent_sufficient_conditions on Line(A, E), Line(E, F), f we get concurrent(f, Line(A, E), Line(E, F))
By concurrent_sufficient_conditions on h, g, Line(A, B) we get concurrent(g, h, Line(A, B))
By concurrent_sufficient_conditions on Line(E, H), Line(D, E), f we get concurrent(f, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on f, Line(E, H), Line(D, E) we get concurrent(f, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(A, I), Line(A, E), h we get concurrent(h, Line(A, E), Line(A, I))
By concurrent_sufficient_conditions on h, g, Line(A, H) we get concurrent(g, h, Line(A, H))
By concurrent_sufficient_conditions on Line(F, H), Line(A, H), Line(E, H) we get concurrent(Line(A, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(A, B), Line(A, E), Line(A, H) we get concurrent(Line(A, B), Line(A, E), Line(A, H))
By concurrent_sufficient_conditions on h, Line(A, H), g we get concurrent(g, h, Line(A, H))
By concurrent_sufficient_conditions on Line(D, E), f, Line(A, E) we get concurrent(f, Line(A, E), Line(D, E))
By concurrent_sufficient_conditions on Line(E, H), Line(F, H), Line(A, H) we get concurrent(Line(A, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(A, B), Line(A, E), h we get concurrent(h, Line(A, B), Line(A, E))
By concurrent_sufficient_conditions on Line(E, H), Line(D, E), Line(A, E) we get concurrent(Line(A, E), Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(A, E), g, Line(A, B) we get concurrent(g, Line(A, B), Line(A, E))
By concurrent_sufficient_conditions on Line(A, H), g, Line(A, E) we get concurrent(g, Line(A, E), Line(A, H))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), Line(A, E) we get concurrent(Line(A, E), Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(D, F), Line(F, H), g we get concurrent(g, Line(D, F), Line(F, H))
By concurrent_sufficient_conditions on h, Line(A, E), Line(A, I) we get concurrent(h, Line(A, E), Line(A, I))
By concurrent_sufficient_conditions on Line(D, E), f, Line(E, H) we get concurrent(f, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(E, H), f, Line(A, E) we get concurrent(f, Line(A, E), Line(E, H))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), Line(A, E) we get concurrent(Line(A, E), Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(A, E), Line(A, B), h we get concurrent(h, Line(A, B), Line(A, E))
By concurrent_sufficient_conditions on g, Line(F, H), Line(E, F) we get concurrent(g, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(E, F), Line(E, H), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on f, Line(E, H), Line(A, E) we get concurrent(f, Line(A, E), Line(E, H))
By concurrent_sufficient_conditions on Line(A, I), Line(A, B), Line(A, H) we get concurrent(Line(A, B), Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on Line(D, E), Line(E, H), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(A, E), Line(A, H), g we get concurrent(g, Line(A, E), Line(A, H))
By concurrent_sufficient_conditions on Line(A, E), f, Line(D, E) we get concurrent(f, Line(A, E), Line(D, E))
By concurrent_sufficient_conditions on Line(A, E), Line(A, H), Line(A, B) we get concurrent(Line(A, B), Line(A, E), Line(A, H))
By concurrent_sufficient_conditions on Line(A, H), g, Line(A, B) we get concurrent(g, Line(A, B), Line(A, H))
By concurrent_sufficient_conditions on Line(A, E), Line(A, I), Line(A, B) we get concurrent(Line(A, B), Line(A, E), Line(A, I))
By concurrent_sufficient_conditions on Line(A, I), Line(A, E), Line(A, H) we get concurrent(Line(A, E), Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), f we get concurrent(f, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(A, E), Line(A, I), h we get concurrent(h, Line(A, E), Line(A, I))
By concurrent_sufficient_conditions on Line(A, H), Line(A, I), h we get concurrent(h, Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on Line(A, E), Line(E, H), Line(E, F) we get concurrent(Line(A, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on g, Line(A, H), h we get concurrent(g, h, Line(A, H))
By concurrent_sufficient_conditions on Line(E, H), Line(A, E), Line(E, F) we get concurrent(Line(A, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on f, Line(E, H), Line(E, F) we get concurrent(f, Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(E, H), Line(E, F), f we get concurrent(f, Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(E, F), Line(F, H), g we get concurrent(g, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(A, H), h, Line(A, B) we get concurrent(h, Line(A, B), Line(A, H))
By concurrent_sufficient_conditions on Line(A, I), g, Line(A, H) we get concurrent(g, Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on Line(A, B), g, Line(A, I) we get concurrent(g, Line(A, B), Line(A, I))
By concurrent_sufficient_conditions on Line(E, H), Line(E, F), Line(A, E) we get concurrent(Line(A, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(A, E), Line(A, B), Line(A, H) we get concurrent(Line(A, B), Line(A, E), Line(A, H))
By concurrent_sufficient_conditions on i, Line(A, B), f we get concurrent(f, i, Line(A, B))
By concurrent_sufficient_conditions on Line(A, B), i, f we get concurrent(f, i, Line(A, B))
By concurrent_sufficient_conditions on Line(D, F), g, Line(E, F) we get concurrent(g, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on h, Line(A, B), Line(A, I) we get concurrent(h, Line(A, B), Line(A, I))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), f we get concurrent(f, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on g, Line(F, H), Line(D, F) we get concurrent(g, Line(D, F), Line(F, H))
By concurrent_sufficient_conditions on Line(A, H), Line(A, I), g we get concurrent(g, Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on Line(E, F), Line(E, H), Line(A, E) we get concurrent(Line(A, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(E, H), Line(A, E), Line(D, E) we get concurrent(Line(A, E), Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(A, H), g, Line(A, I) we get concurrent(g, Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on Line(A, I), Line(A, E), g we get concurrent(g, Line(A, E), Line(A, I))
By concurrent_sufficient_conditions on h, Line(A, B), g we get concurrent(g, h, Line(A, B))
By concurrent_sufficient_conditions on Line(F, H), Line(D, F), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(F, H), Line(E, H), Line(A, H) we get concurrent(Line(A, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on h, Line(A, H), Line(A, B) we get concurrent(h, Line(A, B), Line(A, H))
By concurrent_sufficient_conditions on f, Line(A, E), Line(D, E) we get concurrent(f, Line(A, E), Line(D, E))
By concurrent_sufficient_conditions on g, Line(A, H), Line(A, E) we get concurrent(g, Line(A, E), Line(A, H))
By concurrent_sufficient_conditions on Line(D, F), Line(F, H), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(A, I), g, Line(A, E) we get concurrent(g, Line(A, E), Line(A, I))
By concurrent_sufficient_conditions on Line(A, B), Line(A, E), Line(A, I) we get concurrent(Line(A, B), Line(A, E), Line(A, I))
By concurrent_sufficient_conditions on f, i, Line(A, B) we get concurrent(f, i, Line(A, B))
By concurrent_sufficient_conditions on f, Line(E, F), Line(A, E) we get concurrent(f, Line(A, E), Line(E, F))
By concurrent_sufficient_conditions on h, Line(A, E), Line(A, B) we get concurrent(h, Line(A, B), Line(A, E))
By concurrent_sufficient_conditions on Line(A, B), Line(A, H), Line(A, I) we get concurrent(Line(A, B), Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on g, Line(A, I), Line(A, B) we get concurrent(g, Line(A, B), Line(A, I))
By concurrent_sufficient_conditions on f, Line(A, B), i we get concurrent(f, i, Line(A, B))
By concurrent_sufficient_conditions on Line(F, H), Line(E, F), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(A, B), h, Line(A, H) we get concurrent(h, Line(A, B), Line(A, H))
By concurrent_sufficient_conditions on Line(A, I), Line(A, E), Line(A, B) we get concurrent(Line(A, B), Line(A, E), Line(A, I))
By concurrent_sufficient_conditions on Line(A, H), g, h we get concurrent(g, h, Line(A, H))
By concurrent_sufficient_conditions on Line(A, H), Line(A, B), Line(A, I) we get concurrent(Line(A, B), Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on f, Line(E, F), Line(E, H) we get concurrent(f, Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(E, F), f, Line(D, E) we get concurrent(f, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), Line(F, H) we get concurrent(Line(D, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(E, F), Line(A, E), Line(E, H) we get concurrent(Line(A, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(A, B), Line(A, I), Line(A, E) we get concurrent(Line(A, B), Line(A, E), Line(A, I))
By concurrent_sufficient_conditions on Line(E, F), f, Line(E, H) we get concurrent(f, Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(A, E), g, Line(A, H) we get concurrent(g, Line(A, E), Line(A, H))
By concurrent_sufficient_conditions on Line(A, E), h, Line(A, B) we get concurrent(h, Line(A, B), Line(A, E))
By concurrent_sufficient_conditions on h, Line(A, I), Line(A, B) we get concurrent(h, Line(A, B), Line(A, I))
By concurrent_sufficient_conditions on Line(A, H), h, Line(A, E) we get concurrent(h, Line(A, E), Line(A, H))
By concurrent_sufficient_conditions on Line(A, H), Line(A, E), g we get concurrent(g, Line(A, E), Line(A, H))
By concurrent_sufficient_conditions on h, Line(A, B), Line(A, H) we get concurrent(h, Line(A, B), Line(A, H))
By concurrent_sufficient_conditions on Line(A, H), h, Line(A, I) we get concurrent(h, Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on Line(A, H), Line(A, B), g we get concurrent(g, Line(A, B), Line(A, H))
By concurrent_sufficient_conditions on h, Line(A, H), Line(A, I) we get concurrent(h, Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on g, Line(A, B), Line(A, I) we get concurrent(g, Line(A, B), Line(A, I))
By concurrent_sufficient_conditions on Line(A, E), Line(E, F), Line(D, E) we get concurrent(Line(A, E), Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on h, Line(A, E), g we get concurrent(g, h, Line(A, E))
By concurrent_sufficient_conditions on Line(E, F), Line(E, H), f we get concurrent(f, Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(E, H), f, Line(E, F) we get concurrent(f, Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(F, H), Line(E, F), g we get concurrent(g, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(A, H), Line(A, I), Line(A, E) we get concurrent(Line(A, E), Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), g we get concurrent(g, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(D, F), g, Line(F, H) we get concurrent(g, Line(D, F), Line(F, H))
By concurrent_sufficient_conditions on Line(A, E), Line(D, E), Line(E, H) we get concurrent(Line(A, E), Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on h, Line(A, I), Line(A, E) we get concurrent(h, Line(A, E), Line(A, I))
By concurrent_sufficient_conditions on Line(A, H), Line(A, E), h we get concurrent(h, Line(A, E), Line(A, H))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), Line(E, H) we get concurrent(Line(D, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(A, B), Line(A, I), Line(A, H) we get concurrent(Line(A, B), Line(A, H), Line(A, I))
By line_intersection_definition on H, Line(G, H), Line(F, H) we get H == line_intersection(Line(F, H), Line(G, H))
By line_intersection_definition on H, Line(E, H), Line(G, H) we get H == line_intersection(Line(E, H), Line(G, H))
By line_intersection_definition on H, Line(G, H), Line(A, H) we get H == line_intersection(Line(A, H), Line(G, H))
By line_intersection_definition on G, g, Line(G, H) we get G == line_intersection(g, Line(G, H))
By projection_definition on D, I, Line(A, I) we get I == projection(D, Line(A, I))
By between_imply_not_between on C, E, B we get collinear_and_not_between(B, C, E)
By between_imply_not_between on C, F, A we get collinear_and_not_between(A, C, F)
By between_imply_not_between on A, F, C we get collinear_and_not_between(C, A, F)
By between_imply_not_between on B, E, C we get collinear_and_not_between(C, B, E)
By perpendicular_direction_conditions_v0_r on A, I, D, I we get 180 == 2 * direction(A, I) - 2 * direction(D, I) mod 360
By same_angle_v0 on C, G, A, B we get angle(A, C, B) == angle(G, C, B) mod 360
By same_angle_v0 on C, G, A, E we get angle(A, C, E) == angle(G, C, E) mod 360
By same_angle_v0 on C, F, G, B we get angle(F, C, B) == angle(G, C, B) mod 360
By same_angle_v0 on C, G, F, I we get angle(F, C, I) == angle(G, C, I) mod 360
By same_angle_v0 on I, D, C, A we get angle(C, I, A) == angle(D, I, A) mod 360
By same_angle_v1 on C, B, E, G we get angle(B, C, G) == angle(E, C, G) mod 360
By same_angle_v2 on G, A, F, H we get angle(A, G, H) == angle(F, G, H) + 180 mod 360
By perpendicular_direction_conditions_v0_r on I, A, D, I we get 180 == 2 * direction(I, A) - 2 * direction(D, I) mod 360
By same_angle_v1 on C, I, D, A we get angle(D, C, A) == angle(I, C, A) mod 360
By same_angle_v0 on C, I, D, E we get angle(D, C, E) == angle(I, C, E) mod 360
By same_angle_v0 on C, A, G, I we get angle(A, C, I) == angle(G, C, I) mod 360
By same_angle_v1 on C, B, E, D we get angle(B, C, D) == angle(E, C, D) mod 360
By same_angle_v1 on C, D, I, F we get angle(D, C, F) == angle(I, C, F) mod 360
By perpendicular_direction_conditions_v0_r on C, G, F, D we get 180 == 2 * direction(C, G) - 2 * direction(F, D) mod 360
By same_angle_v0 on C, F, A, D we get angle(A, C, D) == angle(F, C, D) mod 360
By same_angle_v0 on C, G, F, E we get angle(F, C, E) == angle(G, C, E) mod 360
By same_angle_v0 on C, I, D, B we get angle(D, C, B) == angle(I, C, B) mod 360
By perpendicular_direction_conditions_v0_r on I, D, I, A we get 180 == 2 * direction(I, D) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on A, I, D, C we get 180 == 2 * direction(A, I) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on G, C, D, F we get 180 == 2 * direction(G, C) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on C, D, A, I we get 180 == 2 * direction(C, D) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on F, D, C, G we get 180 == 2 * direction(F, D) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on D, F, C, G we get 180 == 2 * direction(D, F) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on I, D, A, I we get 180 == 2 * direction(I, D) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on D, I, I, A we get 180 == 2 * direction(D, I) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on D, C, I, A we get 180 == 2 * direction(D, C) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on D, I, A, I we get 180 == 2 * direction(D, I) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on F, D, G, C we get 180 == 2 * direction(F, D) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on A, I, C, D we get 180 == 2 * direction(A, I) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on D, F, G, C we get 180 == 2 * direction(D, F) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on A, I, I, D we get 180 == 2 * direction(A, I) - 2 * direction(I, D) mod 360
By perpendicular_direction_conditions_v0_r on C, G, D, F we get 180 == 2 * direction(C, G) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on I, A, D, C we get 180 == 2 * direction(I, A) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on I, A, C, D we get 180 == 2 * direction(I, A) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on D, C, A, I we get 180 == 2 * direction(D, C) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on G, C, F, D we get 180 == 2 * direction(G, C) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on I, A, I, D we get 180 == 2 * direction(I, A) - 2 * direction(I, D) mod 360
By perpendicular_direction_conditions_v0_r on C, D, I, A we get 180 == 2 * direction(C, D) - 2 * direction(I, A) mod 360
By probably_between_and_collinear_implies_between on I, D, C we get between(C, D, I)
By probably_between_and_collinear_implies_between on A, G, C we get between(A, G, C)
By probably_between_and_collinear_implies_between on G, F, C we get between(C, F, G)
By between_imply_segment_sum on C, F, A we get distance(A, C) == distance(C, F) + distance(A, F)
By between_imply_segment_sum on B, E, C we get distance(B, C) == distance(B, E) + distance(C, E)
By reverse_direction on C, B we get 180 == direction(C, B) - direction(B, C) mod 360
By collinear_definition on F, C, G we get C in Line(F, G), G in Line(C, F), Line(C, F) == Line(F, G), 0 == 2 * angle(C, F, G) mod 360
By collinear_definition on A, G, C we get G in Line(A, C), C in Line(A, G), Line(A, C) == Line(A, G), 0 == 2 * angle(G, A, C) mod 360
By internal_angle_bisector_definition_v0 on G, C, G, F we get angle(C, F, G) == angle(G, F, C) mod 360
By reverse_direction on I, C we get 180 == direction(I, C) - direction(C, I) mod 360
By reverse_direction on C, I we get 180 == direction(C, I) - direction(I, C) mod 360
By reverse_direction on I, A we get 180 == direction(I, A) - direction(A, I) mod 360
By reverse_direction on A, I we get 180 == direction(A, I) - direction(I, A) mod 360
By reverse_direction on E, B we get 180 == direction(E, B) - direction(B, E) mod 360
By collinear_definition on A, C, G we get C in Line(A, G), G in Line(A, C), Line(A, C) == Line(A, G), 0 == 2 * angle(C, A, G) mod 360
By reverse_direction on B, A we get 180 == direction(B, A) - direction(A, B) mod 360
By reverse_direction on C, E we get 180 == direction(C, E) - direction(E, C) mod 360
By reverse_direction on F, C we get 180 == direction(F, C) - direction(C, F) mod 360
By reverse_direction on B, E we get 180 == direction(B, E) - direction(E, B) mod 360
By reverse_direction on E, D we get 180 == direction(E, D) - direction(D, E) mod 360
By reverse_direction on F, D we get 180 == direction(F, D) - direction(D, F) mod 360
By collinear_definition on F, G, C we get G in Line(C, F), C in Line(F, G), Line(C, F) == Line(F, G), 0 == 2 * angle(G, F, C) mod 360
By reverse_direction on A, C we get 180 == direction(A, C) - direction(C, A) mod 360
By reverse_direction on C, A we get 180 == direction(C, A) - direction(A, C) mod 360
By reverse_direction on D, F we get 180 == direction(D, F) - direction(F, D) mod 360
By reverse_direction on E, C we get 180 == direction(E, C) - direction(C, E) mod 360
By reverse_direction on C, F we get 180 == direction(C, F) - direction(F, C) mod 360
By reverse_direction on B, C we get 180 == direction(B, C) - direction(C, B) mod 360
By internal_angle_bisector_definition_v0 on G, C, G, A we get angle(C, A, G) == angle(G, A, C) mod 360
By reverse_direction on D, E we get 180 == direction(D, E) - direction(E, D) mod 360
By reverse_direction on A, B we get 180 == direction(A, B) - direction(B, A) mod 360
By same_angle_v0 on C, A, G, D we get angle(A, C, D) == angle(G, C, D) mod 360
By same_angle_v2 on G, A, C, H we get angle(A, G, H) == angle(C, G, H) + 180 mod 360
By same_angle_v1 on C, D, I, G we get angle(D, C, G) == angle(I, C, G) mod 360
By same_angle_v2 on D, I, C, E we get angle(I, D, E) == angle(C, D, E) + 180 mod 360
By same_angle_v1 on G, C, F, H we get angle(C, G, H) == angle(F, G, H) mod 360
By same_angle_v0 on C, F, G, D we get angle(F, C, D) == angle(G, C, D) mod 360
By same_angle_v2 on D, C, I, F we get angle(C, D, F) == angle(I, D, F) + 180 mod 360
By external_angle_bisector_definition_v0_r on B, D, B, E we get Line(D, E) == external_angle_bisector(B, E, B)
By external_angle_bisector_definition_v0_r on D, B, D, E we get Line(B, E) == external_angle_bisector(D, E, D)
By external_angle_bisector_definition_v0_r on D, C, D, E we get Line(C, E) == external_angle_bisector(D, E, D)
By internal_angle_bisector_definition_v0_r on E, I, F, C we get Line(C, I) == internal_angle_bisector(E, C, F)
By external_angle_bisector_definition_v0_r on C, D, C, F we get Line(D, F) == external_angle_bisector(C, F, C)
By internal_angle_bisector_definition_v0_r on C, D, G, F we get Line(D, F) == internal_angle_bisector(C, F, G)
By external_angle_bisector_definition_v0_r on D, A, D, F we get Line(A, F) == external_angle_bisector(D, F, D)
By internal_angle_bisector_definition_v0_r on A, F, A, C we get Line(C, F) == internal_angle_bisector(A, C, A)
By external_angle_bisector_definition_v0_r on D, G, D, F we get Line(F, G) == external_angle_bisector(D, F, D)
By external_angle_bisector_definition_v0_r on C, A, C, I we get Line(A, I) == external_angle_bisector(C, I, C)
By external_angle_bisector_definition_v0_r on C, D, C, E we get Line(D, E) == external_angle_bisector(C, E, C)
By external_angle_bisector_definition_v0_r on A, C, A, I we get Line(C, I) == external_angle_bisector(A, I, A)
By external_angle_bisector_definition_v0_r on D, C, D, F we get Line(C, F) == external_angle_bisector(D, F, D)
By external_angle_bisector_definition_v0_r on C, A, G, F we get Line(A, F) == external_angle_bisector(C, F, G)
By internal_angle_bisector_definition_v0_r on F, A, F, C we get Line(A, C) == internal_angle_bisector(F, C, F)
By internal_angle_bisector_definition_v0_r on F, D, B, A we get Line(A, D) == internal_angle_bisector(B, A, F)
By perpendicular_angle_conditions_v0 on A, I, D we get angle(A, I, D) == orientation(A, I, D) mod 360
By collinear_definition on I, D, C we get D in Line(C, I), C in Line(D, I), Line(C, I) == Line(D, I), 0 == 2 * angle(D, I, C) mod 360
By external_angle_bisector_definition_v0_r on A, D, G, F we get Line(D, F) == external_angle_bisector(A, F, G)
By collinear_definition on C, F, G we get F in Line(C, G), G in Line(C, F), Line(C, F) == Line(C, G), 0 == 2 * angle(F, C, G) mod 360
By internal_angle_bisector_definition_v0_r on A, I, E, C we get Line(C, I) == internal_angle_bisector(A, C, E)
By internal_angle_bisector_definition_v0_r on F, I, B, C we get Line(C, I) == internal_angle_bisector(B, C, F)
By collinear_definition on C, G, F we get G in Line(C, F), F in Line(C, G), Line(C, F) == Line(C, G), 0 == 2 * angle(G, C, F) mod 360
By reverse_direction on A, D we get 180 == direction(A, D) - direction(D, A) mod 360
By internal_angle_bisector_definition_v0_r on G, F, C, A we get Line(A, F) == internal_angle_bisector(C, A, G)
By external_angle_bisector_definition_v0_r on G, D, G, F we get Line(D, F) == external_angle_bisector(G, F, G)
By external_angle_bisector_definition_v0_r on A, D, A, F we get Line(D, F) == external_angle_bisector(A, F, A)
By internal_angle_bisector_definition_v0_r on B, C, B, E we get Line(C, E) == internal_angle_bisector(B, E, B)
By internal_angle_bisector_definition_v0_r on A, D, C, F we get Line(D, F) == internal_angle_bisector(A, F, C)
By collinear_definition on G, A, C we get A in Line(C, G), C in Line(A, G), Line(A, G) == Line(C, G), 0 == 2 * angle(A, G, C) mod 360
By internal_angle_bisector_definition_v0_r on E, D, A, B we get Line(B, D) == internal_angle_bisector(A, B, E)
By internal_angle_bisector_definition_v0_r on C, A, C, F we get Line(A, F) == internal_angle_bisector(C, F, C)
By internal_angle_bisector_definition_v0 on B, D, A, C we get angle(B, C, D) == angle(D, C, A) mod 360
By internal_angle_bisector_definition_v0_r on E, B, E, C we get Line(B, C) == internal_angle_bisector(E, C, E)
By collinear_definition on I, C, D we get C in Line(D, I), D in Line(C, I), Line(C, I) == Line(D, I), 0 == 2 * angle(C, I, D) mod 360
By internal_angle_bisector_definition_v0_r on C, F, C, A we get Line(A, F) == internal_angle_bisector(C, A, C)
By collinear_definition on G, C, A we get C in Line(A, G), A in Line(C, G), Line(A, G) == Line(C, G), 0 == 2 * angle(C, G, A) mod 360
By internal_angle_bisector_definition_v0_r on G, D, B, A we get Line(A, D) == internal_angle_bisector(B, A, G)
By internal_angle_bisector_definition_v0_r on C, E, C, B we get Line(B, E) == internal_angle_bisector(C, B, C)
By collinear_definition on G, F, C we get F in Line(C, G), C in Line(F, G), Line(C, G) == Line(F, G), 0 == 2 * angle(F, G, C) mod 360
By internal_angle_bisector_definition_v0 on F, C, F, G we get angle(C, G, F) == angle(F, G, C) mod 360
By collinear_definition on C, G, A we get G in Line(A, C), A in Line(C, G), Line(A, C) == Line(C, G), 0 == 2 * angle(G, C, A) mod 360
By internal_angle_bisector_definition_v0 on A, D, B, C we get angle(A, C, D) == angle(D, C, B) mod 360
By internal_angle_bisector_definition_v0_r on E, C, E, B we get Line(B, C) == internal_angle_bisector(E, B, E)
By internal_angle_bisector_definition_v0 on A, C, A, G we get angle(A, G, C) == angle(C, G, A) mod 360
By internal_angle_bisector_definition_v0_r on C, B, C, E we get Line(B, E) == internal_angle_bisector(C, E, C)
By collinear_definition on C, I, D we get I in Line(C, D), D in Line(C, I), Line(C, D) == Line(C, I), 0 == 2 * angle(I, C, D) mod 360
By collinear_definition on G, C, F we get C in Line(F, G), F in Line(C, G), Line(C, G) == Line(F, G), 0 == 2 * angle(C, G, F) mod 360
By collinear_definition on C, D, I we get D in Line(C, I), I in Line(C, D), Line(C, D) == Line(C, I), 0 == 2 * angle(D, C, I) mod 360
By reverse_direction on B, D we get 180 == direction(B, D) - direction(D, B) mod 360
By collinear_definition on C, A, G we get A in Line(C, G), G in Line(A, C), Line(A, C) == Line(C, G), 0 == 2 * angle(A, C, G) mod 360
By internal_angle_bisector_definition_v0_r on B, D, C, E we get Line(D, E) == internal_angle_bisector(B, E, C)
By perpendicular_angle_conditions_v0 on D, I, A we get angle(D, I, A) == orientation(A, D, I) mod 360
By internal_angle_bisector_definition_v0_r on B, E, B, C we get Line(C, E) == internal_angle_bisector(B, C, B)
By same_angle_v3 on D, C, I, A we get angle(C, D, A) == angle(I, D, A) + 180 mod 360
By same_angle_v2 on D, I, C, B we get angle(I, D, B) == angle(C, D, B) + 180 mod 360
By perpendicular_bisector_sufficient_conditions on A, F, H, G we get Line(G, H) == perpendicular_bisector(A, F)
By altitude_definition on D, C, G, Line(D, F) we get Line(D, F) == altitude(D, C, G)
By anti_similar_triangle_basic_properties on H, A, F, H, F, A we get angle(H, A, F) == 0 - angle(H, F, A) mod 360, angle(A, F, H) == 0 - angle(F, A, H) mod 360, angle(F, H, A) == 0 - angle(A, H, F) mod 360, log(distance(A, H)) + log(distance(A, F)) == log(distance(F, H)) + log(distance(A, F)), log(distance(A, F)) + log(distance(A, H)) == log(distance(A, F)) + log(distance(F, H)), log(distance(A, H)) + log(distance(A, H)) == log(distance(F, H)) + log(distance(F, H))
By altitude_definition on A, I, D, Line(A, I) we get Line(A, I) == altitude(A, D, I)
By altitude_definition on A, D, C, Line(A, I) we get Line(A, I) == altitude(A, C, D)
By sas_anti_congruence on H, A, G, H, F, G we get anti_congruent_triangles(A, G, H, F, G, H)
By sas_anti_congruence on G, F, H, G, A, H we get anti_congruent_triangles(A, G, H, F, G, H)
By sas_anti_congruence on H, F, G, H, A, G we get anti_congruent_triangles(A, G, H, F, G, H)
By collinear_definition on D, I, C we get I in Line(C, D), C in Line(D, I), Line(C, D) == Line(D, I), 0 == 2 * angle(I, D, C) mod 360
By collinear_definition on D, C, I we get C in Line(D, I), I in Line(C, D), Line(C, D) == Line(D, I), 0 == 2 * angle(C, D, I) mod 360
By sas_anti_congruence on G, A, H, G, F, H we get anti_congruent_triangles(A, G, H, F, G, H)
By anti_similar_triangle_basic_properties on F, H, E, E, H, F we get angle(F, H, E) == 0 - angle(E, H, F) mod 360, angle(H, E, F) == 0 - angle(H, F, E) mod 360, angle(E, F, H) == 0 - angle(F, E, H) mod 360, log(distance(E, H)) + log(distance(E, H)) == log(distance(F, H)) + log(distance(F, H)), log(distance(E, H)) + log(distance(E, F)) == log(distance(F, H)) + log(distance(E, F)), log(distance(E, F)) + log(distance(E, H)) == log(distance(E, F)) + log(distance(F, H))
By anti_similar_triangle_basic_properties on E, A, H, A, E, H we get angle(E, A, H) == 0 - angle(A, E, H) mod 360, angle(A, H, E) == 0 - angle(E, H, A) mod 360, angle(H, E, A) == 0 - angle(H, A, E) mod 360, log(distance(A, E)) + log(distance(A, H)) == log(distance(A, E)) + log(distance(E, H)), log(distance(A, H)) + log(distance(A, H)) == log(distance(E, H)) + log(distance(E, H)), log(distance(A, H)) + log(distance(A, E)) == log(distance(E, H)) + log(distance(A, E))
By isosceles_triangle_altitude_v0 on H, F, A we get identical(perpendicular_bisector(A, F), internal_angle_bisector(A, H, F), perpendicular_line(H, Line(A, F)))
By isosceles_triangle_altitude_v0 on H, A, F we get identical(perpendicular_bisector(A, F), internal_angle_bisector(A, H, F), perpendicular_line(H, Line(A, F)))
By concurrent_sufficient_conditions on Line(E, H), Line(G, H), Line(F, H) we get concurrent(Line(E, H), Line(F, H), Line(G, H))
By concyclic_sufficient_conditions_v1 on A, I, D, F we get concyclic(A, D, F, I)
By concurrent_sufficient_conditions on Line(G, H), Line(A, H), Line(F, H) we get concurrent(Line(A, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(A, H), Line(G, H), Line(F, H) we get concurrent(Line(A, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(G, H), Line(E, H), Line(F, H) we get concurrent(Line(E, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(G, H), Line(F, H), Line(A, H) we get concurrent(Line(A, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, H), Line(G, H), Line(A, H) we get concurrent(Line(A, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, H), Line(G, H), Line(E, H) we get concurrent(Line(E, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, H), Line(E, H), Line(G, H) we get concurrent(Line(E, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(E, H), Line(G, H), Line(A, H) we get concurrent(Line(A, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(E, H), Line(F, H), Line(G, H) we get concurrent(Line(E, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(G, H), Line(F, H), Line(E, H) we get concurrent(Line(E, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(G, H), Line(E, H), Line(A, H) we get concurrent(Line(A, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(A, H), Line(G, H), Line(E, H) we get concurrent(Line(A, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(G, H), Line(A, H), Line(E, H) we get concurrent(Line(A, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(E, H), Line(A, H), Line(G, H) we get concurrent(Line(A, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(A, H), Line(F, H), Line(G, H) we get concurrent(Line(A, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(A, H), Line(E, H), Line(G, H) we get concurrent(Line(A, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, H), Line(A, H), Line(G, H) we get concurrent(Line(A, H), Line(F, H), Line(G, H))
By perpendicular_line_definition on F, g, Line(G, H) we get g == perpendicular_line(F, Line(G, H))
By perpendicular_line_definition on C, g, Line(G, H) we get g == perpendicular_line(C, Line(G, H))
By perpendicular_line_definition on G, g, Line(G, H) we get g == perpendicular_line(G, Line(G, H))
By perpendicular_line_definition on A, g, Line(G, H) we get g == perpendicular_line(A, Line(G, H))
By between_imply_not_between on I, D, C we get collinear_and_not_between(C, I, D)
By projection_definition on H, G, g we get G == projection(H, g)
By between_imply_not_between on G, F, C we get collinear_and_not_between(C, G, F)
By between_imply_not_between on C, D, I we get collinear_and_not_between(D, C, I)
By between_imply_not_between on C, G, A we get collinear_and_not_between(A, C, G)
By between_imply_not_between on A, G, C we get collinear_and_not_between(C, A, G)
By between_imply_not_between on C, F, G we get collinear_and_not_between(F, C, G)
By orthocenter_concurrency on A, D, C we get orthocenter(A, C, D) in altitude(A, C, D), orthocenter(A, C, D) in altitude(D, A, C), orthocenter(A, C, D) in altitude(C, A, D)
By divide_by_2_mod_180_v1 on C, G, H, D, F, A we get angle(C, G, H) == angle(D, F, A) mod 360
By divide_by_2_mod_180_v0 on E, D, C, I, A, C we get angle(E, D, C) == angle(I, A, C) mod 360
By divide_by_2_mod_180_v1 on H, G, A, D, E, C we get angle(D, E, C) == angle(H, G, A) mod 360
By divide_by_2_mod_180_v3 on D, E, C, A, G, H we get angle(D, E, C) == angle(A, G, H) + 180 mod 360
By projection_definition on F, G, Line(G, H) we get G == projection(F, Line(G, H))
By divide_by_2_mod_180_v1 on A, I, D, H, G, A we get angle(A, I, D) == angle(H, G, A) mod 360
By divide_by_2_mod_180_v3 on A, I, C, H, G, C we get angle(A, I, C) == angle(H, G, C) + 180 mod 360
By divide_by_2_mod_180_v3 on I, D, F, I, A, F we get angle(I, D, F) == angle(I, A, F) + 180 mod 360
By projection_definition on A, G, Line(G, H) we get G == projection(A, Line(G, H))
By projection_definition on C, G, Line(G, H) we get G == projection(C, Line(G, H))
By divide_by_2_mod_180_v3 on H, G, A, C, I, A we get angle(H, G, A) == angle(C, I, A) + 180 mod 360
By divide_by_2_mod_180_v3 on H, G, A, D, I, A we get angle(H, G, A) == angle(D, I, A) + 180 mod 360
By divide_by_2_mod_180_v0 on D, I, A, H, G, F we get angle(D, I, A) == angle(H, G, F) mod 360
By divide_by_2_mod_180_v1 on G, A, I, C, D, E we get angle(C, D, E) == angle(G, A, I) mod 360
By divide_by_2_mod_180_v1 on F, G, H, D, F, G we get angle(D, F, G) == angle(F, G, H) mod 360
By divide_by_2_mod_180_v2 on H, G, F, D, F, G we get angle(H, G, F) == angle(D, F, G) + 180 mod 360
By divide_by_2_mod_180_v3 on I, D, F, I, A, G we get angle(I, D, F) == angle(I, A, G) + 180 mod 360
By divide_by_2_mod_180_v3 on A, I, C, A, G, H we get angle(A, I, C) == angle(A, G, H) + 180 mod 360
By aa_similarity on A, C, I, D, C, E we get similar_triangles(A, C, I, D, C, E)
By divide_by_2_mod_180_v3 on E, D, I, I, A, F we get angle(E, D, I) == angle(I, A, F) + 180 mod 360
By divide_by_2_mod_180_v2 on H, G, C, D, F, A we get angle(H, G, C) == angle(D, F, A) + 180 mod 360
By divide_by_2_mod_180_v3 on D, F, A, A, G, H we get angle(D, F, A) == angle(A, G, H) + 180 mod 360
By divide_by_2_mod_180_v3 on H, G, A, D, F, C we get angle(H, G, A) == angle(D, F, C) + 180 mod 360
By divide_by_2_mod_180_v1 on H, G, A, C, F, D we get angle(C, F, D) == angle(H, G, A) mod 360
By divide_by_2_mod_180_v0 on H, G, C, C, E, D we get angle(C, E, D) == angle(H, G, C) mod 360
By divide_by_2_mod_180_v3 on H, G, A, A, F, D we get angle(H, G, A) == angle(A, F, D) + 180 mod 360
By aa_anti_similarity on A, I, C, D, F, C we get anti_similar_triangles(A, C, I, D, C, F)
By divide_by_2_mod_180_v0 on A, G, H, C, I, A we get angle(A, G, H) == angle(C, I, A) mod 360
By divide_by_2_mod_180_v1 on F, A, I, F, D, C we get angle(F, A, I) == angle(F, D, C) mod 360
By divide_by_2_mod_180_v3 on E, D, I, I, A, C we get angle(E, D, I) == angle(I, A, C) + 180 mod 360
By divide_by_2_mod_180_v1 on H, G, A, B, E, D we get angle(B, E, D) == angle(H, G, A) mod 360
By divide_by_2_mod_180_v2 on H, G, F, A, I, D we get angle(H, G, F) == angle(A, I, D) + 180 mod 360
By divide_by_2_mod_180_v0 on F, E, A, F, H, G we get angle(F, E, A) == angle(F, H, G) mod 360
By divide_by_2_mod_180_v2 on A, F, D, H, G, A we get angle(A, F, D) == angle(H, G, A) + 180 mod 360
By divide_by_2_mod_180_v2 on C, E, D, F, G, H we get angle(C, E, D) == angle(F, G, H) + 180 mod 360
By divide_by_2_mod_180_v1 on C, F, D, C, G, H we get angle(C, F, D) == angle(C, G, H) mod 360
By divide_by_2_mod_180_v2 on I, A, F, E, D, I we get angle(I, A, F) == angle(E, D, I) + 180 mod 360
By divide_by_2_mod_180_v0 on H, G, F, G, F, D we get angle(G, F, D) == angle(H, G, F) mod 360
By divide_by_2_mod_180_v1 on A, I, D, C, G, H we get angle(A, I, D) == angle(C, G, H) mod 360
By divide_by_2_mod_180_v0 on D, I, A, A, G, H we get angle(A, G, H) == angle(D, I, A) mod 360
By divide_by_2_mod_180_v2 on D, F, C, H, G, A we get angle(D, F, C) == angle(H, G, A) + 180 mod 360
By divide_by_2_mod_180_v1 on C, G, H, D, E, C we get angle(C, G, H) == angle(D, E, C) mod 360
By divide_by_2_mod_180_v2 on I, A, C, I, D, F we get angle(I, A, C) == angle(I, D, F) + 180 mod 360
By divide_by_2_mod_180_v2 on H, G, F, D, E, C we get angle(H, G, F) == angle(D, E, C) + 180 mod 360
By divide_by_2_mod_180_v0 on G, F, D, H, G, C we get angle(G, F, D) == angle(H, G, C) mod 360
By divide_by_2_mod_180_v2 on C, I, A, F, G, H we get angle(C, I, A) == angle(F, G, H) + 180 mod 360
By divide_by_2_mod_180_v3 on A, I, D, A, G, H we get angle(A, I, D) == angle(A, G, H) + 180 mod 360
By divide_by_2_mod_180_v0 on C, D, F, I, A, F we get angle(C, D, F) == angle(I, A, F) mod 360
By divide_by_2_mod_180_v3 on F, G, H, C, E, D we get angle(F, G, H) == angle(C, E, D) + 180 mod 360
By divide_by_2_mod_180_v0 on H, G, F, A, F, D we get angle(A, F, D) == angle(H, G, F) mod 360
By divide_by_2_mod_180_v0 on A, G, H, C, E, D we get angle(A, G, H) == angle(C, E, D) mod 360
By divide_by_2_mod_180_v2 on C, I, A, H, G, A we get angle(C, I, A) == angle(H, G, A) + 180 mod 360
By divide_by_2_mod_180_v3 on A, I, D, H, G, C we get angle(A, I, D) == angle(H, G, C) + 180 mod 360
By divide_by_2_mod_180_v3 on A, I, D, H, G, F we get angle(A, I, D) == angle(H, G, F) + 180 mod 360
By divide_by_2_mod_180_v2 on A, G, H, B, E, D we get angle(A, G, H) == angle(B, E, D) + 180 mod 360
By divide_by_2_mod_180_v1 on B, E, D, C, G, H we get angle(B, E, D) == angle(C, G, H) mod 360
By divide_by_2_mod_180_v1 on C, A, I, F, D, C we get angle(C, A, I) == angle(F, D, C) mod 360
By divide_by_2_mod_180_v0 on C, D, F, I, A, C we get angle(C, D, F) == angle(I, A, C) mod 360
By divide_by_2_mod_180_v0 on H, G, F, C, I, A we get angle(C, I, A) == angle(H, G, F) mod 360
By divide_by_2_mod_180_v1 on D, F, A, H, G, A we get angle(D, F, A) == angle(H, G, A) mod 360
By divide_by_2_mod_180_v2 on I, A, C, E, D, I we get angle(I, A, C) == angle(E, D, I) + 180 mod 360
By divide_by_2_mod_180_v0 on F, E, A, G, H, A we get angle(F, E, A) == angle(G, H, A) mod 360
By divide_by_2_mod_180_v0 on H, G, F, D, E, B we get angle(D, E, B) == angle(H, G, F) mod 360
By divide_by_2_mod_180_v2 on F, D, I, F, A, I we get angle(F, D, I) == angle(F, A, I) + 180 mod 360
By divide_by_2_mod_180_v2 on D, I, A, H, G, A we get angle(D, I, A) == angle(H, G, A) + 180 mod 360
By divide_by_2_mod_180_v3 on C, F, D, H, G, F we get angle(C, F, D) == angle(H, G, F) + 180 mod 360
By divide_by_2_mod_180_v2 on I, A, G, I, D, F we get angle(I, A, G) == angle(I, D, F) + 180 mod 360
By divide_by_2_mod_180_v0 on A, G, H, A, F, D we get angle(A, F, D) == angle(A, G, H) mod 360
By divide_by_2_mod_180_v1 on B, E, D, F, G, H we get angle(B, E, D) == angle(F, G, H) mod 360
By divide_by_2_mod_180_v3 on D, F, A, H, G, C we get angle(D, F, A) == angle(H, G, C) + 180 mod 360
By divide_by_2_mod_180_v0 on C, I, A, H, G, C we get angle(C, I, A) == angle(H, G, C) mod 360
By divide_by_2_mod_180_v1 on A, I, C, C, G, H we get angle(A, I, C) == angle(C, G, H) mod 360
By divide_by_2_mod_180_v3 on F, G, H, D, E, B we get angle(F, G, H) == angle(D, E, B) + 180 mod 360
By reverse_direction on G, H we get 180 == direction(G, H) - direction(H, G) mod 360
By divide_by_2_mod_180_v3 on D, E, C, H, G, F we get angle(D, E, C) == angle(H, G, F) + 180 mod 360
By divide_by_2_mod_180_v1 on A, E, F, A, H, G we get angle(A, E, F) == angle(A, H, G) mod 360
By divide_by_2_mod_180_v1 on A, I, C, F, G, H we get angle(A, I, C) == angle(F, G, H) mod 360
By divide_by_2_mod_180_v3 on F, G, H, A, F, D we get angle(F, G, H) == angle(A, F, D) + 180 mod 360
By divide_by_2_mod_180_v2 on I, A, G, E, D, I we get angle(I, A, G) == angle(E, D, I) + 180 mod 360
By divide_by_2_mod_180_v1 on D, E, C, F, G, H we get angle(D, E, C) == angle(F, G, H) mod 360
By divide_by_2_mod_180_v3 on C, F, D, H, G, C we get angle(C, F, D) == angle(H, G, C) + 180 mod 360
By divide_by_2_mod_180_v0 on H, G, C, D, E, B we get angle(D, E, B) == angle(H, G, C) mod 360
By divide_by_2_mod_180_v3 on C, G, H, G, F, D we get angle(C, G, H) == angle(G, F, D) + 180 mod 360
By divide_by_2_mod_180_v3 on F, A, I, F, D, I we get angle(F, A, I) == angle(F, D, I) + 180 mod 360
By divide_by_2_mod_180_v3 on F, G, H, D, I, A we get angle(F, G, H) == angle(D, I, A) + 180 mod 360
By divide_by_2_mod_180_v3 on C, F, D, A, G, H we get angle(C, F, D) == angle(A, G, H) + 180 mod 360
By divide_by_2_mod_180_v0 on G, F, D, A, G, H we get angle(A, G, H) == angle(G, F, D) mod 360
By divide_by_2_mod_180_v2 on D, F, C, C, G, H we get angle(D, F, C) == angle(C, G, H) + 180 mod 360
By divide_by_2_mod_180_v2 on H, G, C, B, E, D we get angle(H, G, C) == angle(B, E, D) + 180 mod 360
By divide_by_2_mod_180_v3 on F, A, I, I, D, E we get angle(F, A, I) == angle(I, D, E) + 180 mod 360
By divide_by_2_mod_180_v2 on A, F, D, F, G, H we get angle(A, F, D) == angle(F, G, H) + 180 mod 360
By divide_by_2_mod_180_v2 on G, F, D, H, G, A we get angle(G, F, D) == angle(H, G, A) + 180 mod 360
By divide_by_2_mod_180_v1 on H, G, A, A, I, C we get angle(A, I, C) == angle(H, G, A) mod 360
By divide_by_2_mod_180_v2 on I, D, E, F, A, I we get angle(I, D, E) == angle(F, A, I) + 180 mod 360
By divide_by_2_mod_180_v1 on C, D, E, F, A, I we get angle(C, D, E) == angle(F, A, I) mod 360
By divide_by_2_mod_180_v3 on C, G, H, C, I, A we get angle(C, G, H) == angle(C, I, A) + 180 mod 360
By double_perpendicular_and_parallel_v0 on Line(D, F), g, Line(G, H) we get parallel(Line(D, F), Line(G, H))
By divide_by_2_mod_180_v0 on H, G, C, D, F, C we get angle(D, F, C) == angle(H, G, C) mod 360
By divide_by_2_mod_180_v0 on I, A, F, E, D, C we get angle(E, D, C) == angle(I, A, F) mod 360
By divide_by_2_mod_180_v2 on A, G, H, A, I, C we get angle(A, G, H) == angle(A, I, C) + 180 mod 360
By perpendicular_angle_conditions_v0 on H, G, A we get angle(H, G, A) == orientation(A, H, G) mod 360
By divide_by_2_mod_180_v2 on A, G, H, A, I, D we get angle(A, G, H) == angle(A, I, D) + 180 mod 360
By divide_by_2_mod_180_v3 on C, G, H, C, E, D we get angle(C, G, H) == angle(C, E, D) + 180 mod 360
By divide_by_2_mod_180_v2 on D, I, A, C, G, H we get angle(D, I, A) == angle(C, G, H) + 180 mod 360
By divide_by_2_mod_180_v2 on D, E, B, H, G, A we get angle(D, E, B) == angle(H, G, A) + 180 mod 360
By divide_by_2_mod_180_v2 on H, G, C, D, F, G we get angle(H, G, C) == angle(D, F, G) + 180 mod 360
By divide_by_2_mod_180_v0 on C, E, D, H, G, F we get angle(C, E, D) == angle(H, G, F) mod 360
By divide_by_2_mod_180_v3 on H, G, A, C, E, D we get angle(H, G, A) == angle(C, E, D) + 180 mod 360
By between_imply_segment_sum on A, G, C we get distance(A, C) == distance(A, G) + distance(C, G)
By perpendicular_angle_conditions_v0 on F, G, H we get angle(F, G, H) == orientation(F, G, H) mod 360
By divide_by_2_mod_180_v3 on F, G, H, D, F, C we get angle(F, G, H) == angle(D, F, C) + 180 mod 360
By divide_by_2_mod_180_v2 on D, I, A, F, G, H we get angle(D, I, A) == angle(F, G, H) + 180 mod 360
By divide_by_2_mod_180_v0 on D, I, A, H, G, C we get angle(D, I, A) == angle(H, G, C) mod 360
By divide_by_2_mod_180_v1 on G, H, F, A, E, F we get angle(A, E, F) == angle(G, H, F) mod 360
By divide_by_2_mod_180_v0 on H, G, F, D, F, C we get angle(D, F, C) == angle(H, G, F) mod 360
By aa_anti_similarity on D, C, F, A, C, I we get anti_similar_triangles(A, C, I, D, C, F)
By divide_by_2_mod_180_v3 on B, E, D, H, G, C we get angle(B, E, D) == angle(H, G, C) + 180 mod 360
By divide_by_2_mod_180_v3 on H, G, A, D, E, B we get angle(H, G, A) == angle(D, E, B) + 180 mod 360
By divide_by_2_mod_180_v2 on H, G, F, B, E, D we get angle(H, G, F) == angle(B, E, D) + 180 mod 360
By divide_by_2_mod_180_v2 on A, G, H, D, E, C we get angle(A, G, H) == angle(D, E, C) + 180 mod 360
By divide_by_2_mod_180_v1 on D, F, A, F, G, H we get angle(D, F, A) == angle(F, G, H) mod 360
By divide_by_2_mod_180_v0 on D, E, B, A, G, H we get angle(A, G, H) == angle(D, E, B) mod 360
By divide_by_2_mod_180_v1 on C, G, H, D, F, G we get angle(C, G, H) == angle(D, F, G) mod 360
By divide_by_2_mod_180_v1 on D, F, G, H, G, A we get angle(D, F, G) == angle(H, G, A) mod 360
By divide_by_2_mod_180_v2 on D, F, C, F, G, H we get angle(D, F, C) == angle(F, G, H) + 180 mod 360
By between_imply_segment_sum on G, F, C we get distance(C, G) == distance(F, G) + distance(C, F)
By reverse_direction on D, I we get 180 == direction(D, I) - direction(I, D) mod 360
By divide_by_2_mod_180_v0 on A, F, D, H, G, C we get angle(A, F, D) == angle(H, G, C) mod 360
By divide_by_2_mod_180_v2 on I, A, F, I, D, F we get angle(I, A, F) == angle(I, D, F) + 180 mod 360
By divide_by_2_mod_180_v2 on A, G, H, D, F, A we get angle(A, G, H) == angle(D, F, A) + 180 mod 360
By divide_by_2_mod_180_v3 on B, E, D, A, G, H we get angle(B, E, D) == angle(A, G, H) + 180 mod 360
By divide_by_2_mod_180_v2 on I, D, E, C, A, I we get angle(I, D, E) == angle(C, A, I) + 180 mod 360
By divide_by_2_mod_180_v3 on A, I, C, H, G, F we get angle(A, I, C) == angle(H, G, F) + 180 mod 360
By divide_by_2_mod_180_v3 on G, A, I, I, D, E we get angle(G, A, I) == angle(I, D, E) + 180 mod 360
By divide_by_2_mod_180_v2 on H, G, F, D, F, A we get angle(H, G, F) == angle(D, F, A) + 180 mod 360
By divide_by_2_mod_180_v2 on A, G, H, D, F, G we get angle(A, G, H) == angle(D, F, G) + 180 mod 360
By divide_by_2_mod_180_v2 on F, D, I, G, A, I we get angle(F, D, I) == angle(G, A, I) + 180 mod 360
By divide_by_2_mod_180_v1 on G, A, I, F, D, C we get angle(F, D, C) == angle(G, A, I) mod 360
By divide_by_2_mod_180_v3 on C, G, H, D, F, C we get angle(C, G, H) == angle(D, F, C) + 180 mod 360
By divide_by_2_mod_180_v0 on I, A, G, E, D, C we get angle(E, D, C) == angle(I, A, G) mod 360
By divide_by_2_mod_180_v3 on D, F, G, H, G, C we get angle(D, F, G) == angle(H, G, C) + 180 mod 360
By divide_by_2_mod_180_v2 on C, I, A, C, G, H we get angle(C, I, A) == angle(C, G, H) + 180 mod 360
By divide_by_2_mod_180_v3 on C, A, I, F, D, I we get angle(C, A, I) == angle(F, D, I) + 180 mod 360
By divide_by_2_mod_180_v2 on D, E, B, C, G, H we get angle(D, E, B) == angle(C, G, H) + 180 mod 360
By divide_by_2_mod_180_v2 on C, E, D, C, G, H we get angle(C, E, D) == angle(C, G, H) + 180 mod 360
By divide_by_2_mod_180_v1 on A, I, D, F, G, H we get angle(A, I, D) == angle(F, G, H) mod 360
By divide_by_2_mod_180_v3 on D, E, C, H, G, C we get angle(D, E, C) == angle(H, G, C) + 180 mod 360
By divide_by_2_mod_180_v2 on H, G, F, C, F, D we get angle(H, G, F) == angle(C, F, D) + 180 mod 360
By reverse_direction on C, D we get 180 == direction(C, D) - direction(D, C) mod 360
By divide_by_2_mod_180_v3 on F, G, H, C, I, A we get angle(F, G, H) == angle(C, I, A) + 180 mod 360
By divide_by_2_mod_180_v2 on H, G, C, A, I, C we get angle(H, G, C) == angle(A, I, C) + 180 mod 360
By divide_by_2_mod_180_v2 on H, G, C, A, I, D we get angle(H, G, C) == angle(A, I, D) + 180 mod 360
By divide_by_2_mod_180_v0 on D, F, C, A, G, H we get angle(A, G, H) == angle(D, F, C) mod 360
By divide_by_2_mod_180_v2 on F, D, I, C, A, I we get angle(F, D, I) == angle(C, A, I) + 180 mod 360
By divide_by_2_mod_180_v2 on H, G, C, C, F, D we get angle(H, G, C) == angle(C, F, D) + 180 mod 360
By divide_by_2_mod_180_v3 on C, G, H, D, E, B we get angle(C, G, H) == angle(D, E, B) + 180 mod 360
By divide_by_2_mod_180_v1 on C, D, E, C, A, I we get angle(C, A, I) == angle(C, D, E) mod 360
By divide_by_2_mod_180_v3 on H, G, A, G, F, D we get angle(H, G, A) == angle(G, F, D) + 180 mod 360
By divide_by_2_mod_180_v3 on D, F, A, H, G, F we get angle(D, F, A) == angle(H, G, F) + 180 mod 360
By divide_by_2_mod_180_v2 on A, F, D, C, G, H we get angle(A, F, D) == angle(C, G, H) + 180 mod 360
By divide_by_2_mod_180_v2 on G, F, D, C, G, H we get angle(G, F, D) == angle(C, G, H) + 180 mod 360
By divide_by_2_mod_180_v3 on I, D, F, I, A, C we get angle(I, D, F) == angle(I, A, C) + 180 mod 360
By divide_by_2_mod_180_v3 on D, F, G, A, G, H we get angle(D, F, G) == angle(A, G, H) + 180 mod 360
By aa_anti_similarity on D, F, C, A, I, C we get anti_similar_triangles(A, C, I, D, C, F)
By divide_by_2_mod_180_v2 on D, E, B, F, G, H we get angle(D, E, B) == angle(F, G, H) + 180 mod 360
By divide_by_2_mod_180_v1 on F, G, H, C, F, D we get angle(C, F, D) == angle(F, G, H) mod 360
By divide_by_2_mod_180_v2 on H, G, C, D, E, C we get angle(H, G, C) == angle(D, E, C) + 180 mod 360
By divide_by_2_mod_180_v2 on I, D, E, G, A, I we get angle(I, D, E) == angle(G, A, I) + 180 mod 360
By aa_similarity on D, C, E, A, C, I we get similar_triangles(A, C, I, D, C, E)
By divide_by_2_mod_180_v2 on H, G, F, A, I, C we get angle(H, G, F) == angle(A, I, C) + 180 mod 360
By divide_by_2_mod_180_v3 on C, G, H, D, I, A we get angle(C, G, H) == angle(D, I, A) + 180 mod 360
By divide_by_2_mod_180_v3 on D, F, G, H, G, F we get angle(D, F, G) == angle(H, G, F) + 180 mod 360
By divide_by_2_mod_180_v3 on C, A, I, I, D, E we get angle(C, A, I) == angle(I, D, E) + 180 mod 360
By divide_by_2_mod_180_v3 on B, E, D, H, G, F we get angle(B, E, D) == angle(H, G, F) + 180 mod 360
By divide_by_2_mod_180_v3 on C, G, H, A, F, D we get angle(C, G, H) == angle(A, F, D) + 180 mod 360
By divide_by_2_mod_180_v0 on C, D, F, I, A, G we get angle(C, D, F) == angle(I, A, G) mod 360
By aa_anti_similarity on A, C, I, D, C, F we get anti_similar_triangles(A, C, I, D, C, F)
By reverse_direction on I, D we get 180 == direction(I, D) - direction(D, I) mod 360
By divide_by_2_mod_180_v3 on G, A, I, F, D, I we get angle(G, A, I) == angle(F, D, I) + 180 mod 360
By divide_by_2_mod_180_v2 on C, E, D, H, G, A we get angle(C, E, D) == angle(H, G, A) + 180 mod 360
By reverse_direction on H, G we get 180 == direction(H, G) - direction(G, H) mod 360
By divide_by_2_mod_180_v2 on G, F, D, F, G, H we get angle(G, F, D) == angle(F, G, H) + 180 mod 360
By aa_similarity on A, I, C, D, E, C we get similar_triangles(A, C, I, D, C, E)
By divide_by_2_mod_180_v3 on E, D, I, I, A, G we get angle(E, D, I) == angle(I, A, G) + 180 mod 360
By reverse_direction on D, C we get 180 == direction(D, C) - direction(C, D) mod 360
By divide_by_2_mod_180_v3 on F, G, H, G, F, D we get angle(F, G, H) == angle(G, F, D) + 180 mod 360
By between_imply_segment_sum on C, D, I we get distance(C, I) == distance(C, D) + distance(D, I)
By divide_by_2_mod_180_v2 on A, G, H, C, F, D we get angle(A, G, H) == angle(C, F, D) + 180 mod 360
By perpendicular_angle_conditions_v0 on C, G, H we get angle(C, G, H) == orientation(C, G, H) mod 360
By perpendicular_angle_conditions_v0 on A, G, H we get angle(A, G, H) == orientation(A, G, H) mod 360
By perpendicular_angle_conditions_v0 on H, G, F we get angle(H, G, F) == orientation(F, H, G) mod 360
By perpendicular_angle_conditions_v0 on H, G, C we get angle(H, G, C) == orientation(C, H, G) mod 360
By aa_similarity on D, E, C, A, I, C we get similar_triangles(A, C, I, D, C, E)
By external_angle_bisector_definition_v0_r on C, G, A, F we get Line(F, G) == external_angle_bisector(A, F, C)
By external_angle_bisector_definition_v0_r on C, H, C, G we get Line(G, H) == external_angle_bisector(C, G, C)
By external_angle_bisector_definition_v0_r on H, A, H, G we get Line(A, G) == external_angle_bisector(H, G, H)
By external_angle_bisector_definition_v0_r on A, F, C, G we get Line(F, G) == external_angle_bisector(A, G, C)
By concyclic_definition_0 on D, F, C, E we get E in Circle(C, D, F)
By internal_angle_bisector_definition_v0_r on F, H, A, G we get Line(G, H) == internal_angle_bisector(A, G, F)
By external_angle_bisector_definition_v0_r on H, F, H, G we get Line(F, G) == external_angle_bisector(H, G, H)
By external_angle_bisector_definition_v0_r on C, H, F, G we get Line(G, H) == external_angle_bisector(C, G, F)
By internal_angle_bisector_definition_v0_r on F, A, C, G we get Line(A, G) == internal_angle_bisector(C, G, F)
By external_angle_bisector_definition_v0_r on D, A, D, I we get Line(A, I) == external_angle_bisector(D, I, D)
By concyclic_definition_0 on D, C, E, F we get F in Circle(C, D, E)
By external_angle_bisector_definition_v0_r on H, C, H, G we get Line(C, G) == external_angle_bisector(H, G, H)
By concyclic_definition_0 on E, C, F, D we get D in Circle(C, E, F)
By external_angle_bisector_definition_v0_r on D, A, C, I we get Line(A, I) == external_angle_bisector(C, I, D)
By external_angle_bisector_definition_v0_r on F, H, F, G we get Line(G, H) == external_angle_bisector(F, G, F)
By internal_angle_bisector_definition_v0_r on B, I, G, C we get Line(C, I) == internal_angle_bisector(B, C, G)
By external_angle_bisector_definition_v0_r on F, C, A, G we get Line(C, G) == external_angle_bisector(A, G, F)
By external_angle_bisector_definition_v0_r on A, H, A, G we get Line(G, H) == external_angle_bisector(A, G, A)
By altitude_definition on H, A, F, Line(G, H) we get Line(G, H) == altitude(H, A, F)
By internal_angle_bisector_definition_v0_r on E, D, G, C we get Line(C, D) == internal_angle_bisector(E, C, G)
By anti_similar_triangle_basic_properties on G, F, H, G, A, H we get angle(G, F, H) == 0 - angle(G, A, H) mod 360, angle(F, H, G) == 0 - angle(A, H, G) mod 360, angle(H, G, F) == 0 - angle(H, G, A) mod 360, log(distance(A, G)) + log(distance(F, H)) == log(distance(F, G)) + log(distance(A, H)), log(distance(A, H)) + log(distance(G, H)) == log(distance(F, H)) + log(distance(G, H)), log(distance(G, H)) + log(distance(A, G)) == log(distance(G, H)) + log(distance(F, G))
By internal_angle_bisector_definition_v0_r on C, G, F, A we get Line(A, G) == internal_angle_bisector(C, A, F)
By internal_angle_bisector_definition_v0_r on C, A, C, G we get Line(A, G) == internal_angle_bisector(C, G, C)
By internal_angle_bisector_definition_v0_r on A, G, F, C we get Line(C, G) == internal_angle_bisector(A, C, F)
By concyclic_definition_0 on E, F, D, C we get C in Circle(D, E, F)
By internal_angle_bisector_definition_v0_r on E, C, F, D we get Line(C, D) == internal_angle_bisector(E, D, F)
By internal_angle_bisector_definition_v0_r on F, C, G, A we get Line(A, C) == internal_angle_bisector(F, A, G)
By internal_angle_bisector_definition_v0_r on G, A, G, C we get Line(A, C) == internal_angle_bisector(G, C, G)
By internal_angle_bisector_definition_v0_r on B, D, G, C we get Line(C, D) == internal_angle_bisector(B, C, G)
By internal_angle_bisector_definition_v0_r on A, H, C, G we get Line(G, H) == internal_angle_bisector(A, G, C)
By internal_angle_bisector_definition_v0_r on C, F, C, G we get Line(F, G) == internal_angle_bisector(C, G, C)
By internal_angle_bisector_definition_v0_r on G, F, A, C we get Line(C, F) == internal_angle_bisector(A, C, G)
By internal_angle_bisector_definition_v0_r on I, C, I, D we get Line(C, D) == internal_angle_bisector(I, D, I)
By internal_angle_bisector_definition_v0_r on I, D, I, C we get Line(C, D) == internal_angle_bisector(I, C, I)
By internal_angle_bisector_definition_v0_r on G, F, G, C we get Line(C, F) == internal_angle_bisector(G, C, G)
By internal_angle_bisector_definition_v0_r on D, I, D, C we get Line(C, I) == internal_angle_bisector(D, C, D)
By internal_angle_bisector_definition_v0_r on E, I, F, D we get Line(D, I) == internal_angle_bisector(E, D, F)
By internal_angle_bisector_definition_v0_r on G, A, F, C we get Line(A, C) == internal_angle_bisector(F, C, G)
By internal_angle_bisector_definition_v0_r on G, C, A, F we get Line(C, F) == internal_angle_bisector(A, F, G)
By internal_angle_bisector_definition_v0_r on G, I, E, C we get Line(C, I) == internal_angle_bisector(E, C, G)
By internal_angle_bisector_definition_v0_r on C, I, C, D we get Line(D, I) == internal_angle_bisector(C, D, C)
By internal_angle_bisector_definition_v0_r on D, C, D, I we get Line(C, I) == internal_angle_bisector(D, I, D)
By internal_angle_bisector_definition_v0_r on C, D, C, I we get Line(D, I) == internal_angle_bisector(C, I, C)
By altitude_definition on A, H, G, g we get g == altitude(A, G, H)
By concyclic_definition_1 on C, D, E, F we get Circle(C, D, E) == Circle(D, E, F)
By concyclic_definition_1 on E, D, F, C we get Circle(C, D, F) == Circle(D, E, F)
By altitude_definition on H, F, G, Line(G, H) we get Line(G, H) == altitude(H, F, G)
By concyclic_definition_1 on D, C, E, F we get Circle(C, D, E) == Circle(C, E, F)
By altitude_definition on C, H, G, g we get g == altitude(C, G, H)
By concyclic_definition_1 on E, C, F, D we get Circle(C, D, F) == Circle(C, E, F)
By altitude_definition on H, A, G, Line(G, H) we get Line(G, H) == altitude(H, A, G)
By concyclic_definition_1 on F, D, C, E we get Circle(C, D, E) == Circle(C, D, F)
By altitude_definition on F, H, G, g we get g == altitude(F, G, H)
By concyclic_definition_1 on C, F, E, D we get Circle(C, E, F) == Circle(D, E, F)
By altitude_definition on H, C, G, Line(G, H) we get Line(G, H) == altitude(H, C, G)
By altitude_definition on H, C, F, Line(G, H) we get Line(G, H) == altitude(H, C, F)
By altitude_definition on H, A, C, Line(G, H) we get Line(G, H) == altitude(H, A, C)
By anti_similar_triangle_basic_properties on D, E, C, D, F, C we get angle(D, E, C) == 0 - angle(D, F, C) mod 360, angle(E, C, D) == 0 - angle(F, C, D) mod 360, angle(C, D, E) == 0 - angle(C, D, F) mod 360, log(distance(D, E)) + log(distance(C, F)) == log(distance(D, F)) + log(distance(C, E)), log(distance(C, E)) + log(distance(C, D)) == log(distance(C, F)) + log(distance(C, D)), log(distance(C, D)) + log(distance(D, E)) == log(distance(C, D)) + log(distance(D, F))
By anti_similar_triangle_basic_properties on F, D, C, E, D, C we get angle(F, D, C) == 0 - angle(E, D, C) mod 360, angle(D, C, F) == 0 - angle(D, C, E) mod 360, angle(C, F, D) == 0 - angle(C, E, D) mod 360, log(distance(D, E)) + log(distance(C, D)) == log(distance(D, F)) + log(distance(C, D)), log(distance(C, D)) + log(distance(C, E)) == log(distance(C, D)) + log(distance(C, F)), log(distance(C, E)) + log(distance(D, F)) == log(distance(C, F)) + log(distance(D, E))
By line_definition on orthocenter(A, C, D), D, Line(D, F) we get Line(D, F) == Line(D, orthocenter(A, C, D))
By line_definition on orthocenter(A, C, D), A, Line(A, I) we get Line(A, I) == Line(A, orthocenter(A, C, D))
By line_definition on orthocenter(A, C, D), F, Line(D, F) we get Line(D, F) == Line(F, orthocenter(A, C, D))
By line_definition on I, orthocenter(A, C, D), Line(A, I) we get Line(A, I) == Line(I, orthocenter(A, C, D))
By line_definition on orthocenter(A, C, D), C, altitude(C, A, D) we get altitude(C, A, D) == Line(C, orthocenter(A, C, D))
By angles_on_chord_v3 on F, E, D, C, Circle(C, D, E) we get angle(F, D, E) == angle(F, C, E) + 180 mod 360
By angles_on_chord_v0 on D, E, F, C, Circle(C, D, E) we get angle(D, C, E) == angle(D, F, E) mod 360
By angles_on_chord_v0 on F, D, E, C, Circle(C, D, E) we get angle(F, C, D) == angle(F, E, D) mod 360
By angles_on_chord_v1 on E, D, C, F, Circle(C, D, E) we get angle(E, C, D) == angle(E, F, D) mod 360
By angles_on_chord_v0 on C, F, D, E, Circle(C, D, E) we get angle(C, D, F) == angle(C, E, F) mod 360
By angles_on_chord_v0 on E, C, D, F, Circle(C, D, E) we get angle(E, D, C) == angle(E, F, C) mod 360
By angles_on_chord_v2 on F, E, C, D, Circle(C, D, E) we get angle(F, C, E) == angle(F, D, E) + 180 mod 360
By angles_on_chord_v3 on E, F, C, D, Circle(C, D, E) we get angle(E, C, F) == angle(E, D, F) + 180 mod 360
By angles_on_chord_v1 on F, C, D, E, Circle(C, D, E) we get angle(F, D, C) == angle(F, E, C) mod 360
By angles_on_chord_v1 on D, F, C, E, Circle(C, D, E) we get angle(D, C, F) == angle(D, E, F) mod 360
By angles_on_chord_v1 on C, E, D, F, Circle(C, D, E) we get angle(C, D, E) == angle(C, F, E) mod 360
By angles_on_chord_v2 on E, F, D, C, Circle(C, D, E) we get angle(E, D, F) == angle(E, C, F) + 180 mod 360
By line_intersection_definition on orthocenter(A, C, D), Line(A, I), Line(D, F) we get orthocenter(A, C, D) == line_intersection(Line(A, I), Line(D, F))
By line_intersection_definition on orthocenter(A, C, D), Line(D, F), altitude(C, A, D) we get orthocenter(A, C, D) == line_intersection(Line(D, F), altitude(C, A, D))
By perpendicular_line_definition on orthocenter(A, C, D), Line(A, I), j we get Line(A, I) == perpendicular_line(orthocenter(A, C, D), j)
By perpendicular_line_definition on A, h, altitude(C, A, D) we get h == perpendicular_line(A, altitude(C, A, D))
By line_intersection_definition on orthocenter(A, C, D), altitude(C, A, D), Line(A, I) we get orthocenter(A, C, D) == line_intersection(Line(A, I), altitude(C, A, D))
By radical_axis_of_intersecting_circles_v0 on F, E, Circle(C, D, E), c we get Line(E, F) == radical_axis(c, Circle(C, D, E))
By perpendicular_line_definition on orthocenter(A, C, D), altitude(C, A, D), h we get altitude(C, A, D) == perpendicular_line(orthocenter(A, C, D), h)
By line_intersection_definition on C, f, altitude(C, A, D) we get C == line_intersection(f, altitude(C, A, D))
By line_intersection_definition on C, altitude(C, A, D), j we get C == line_intersection(j, altitude(C, A, D))
By line_intersection_definition on C, altitude(C, A, D), g we get C == line_intersection(g, altitude(C, A, D))
By perpendicular_line_definition on D, h, altitude(C, A, D) we get h == perpendicular_line(D, altitude(C, A, D))
By perpendicular_line_definition on orthocenter(A, C, D), Line(D, F), g we get Line(D, F) == perpendicular_line(orthocenter(A, C, D), g)
By parallel_line_definition on F, Line(D, F), Line(G, H) we get Line(D, F) == parallel_line(F, Line(G, H))
By parallel_line_definition on orthocenter(A, C, D), Line(D, F), Line(G, H) we get Line(D, F) == parallel_line(orthocenter(A, C, D), Line(G, H))
By parallel_line_definition on G, Line(G, H), Line(D, F) we get Line(G, H) == parallel_line(G, Line(D, F))
By parallel_line_definition on H, Line(G, H), Line(D, F) we get Line(G, H) == parallel_line(H, Line(D, F))
By parallel_line_definition on D, Line(D, F), Line(G, H) we get Line(D, F) == parallel_line(D, Line(G, H))
By in_imply_collinear on orthocenter(A, C, D), A, I we get collinear(A, I, orthocenter(A, C, D))
By sss_anti_similarity_v1 on E, C, F, F, C, E we get anti_similar_triangles(C, E, F, C, F, E)
By in_imply_collinear on orthocenter(A, C, D), F, D we get collinear(D, F, orthocenter(A, C, D))
By sss_anti_similarity_v1 on F, E, C, E, F, C we get anti_similar_triangles(C, E, F, C, F, E)
By sss_anti_similarity_v1 on F, E, C, E, F, C we get anti_similar_triangles(C, E, F, C, F, E)
By sss_anti_similarity_v1 on E, C, F, F, C, E we get anti_similar_triangles(C, E, F, C, F, E)
By sss_anti_similarity_v0 on C, E, F, C, F, E we get anti_similar_triangles(C, E, F, C, F, E)
By sss_anti_similarity_v0 on F, E, D, E, F, D we get anti_similar_triangles(D, E, F, D, F, E)
By sss_anti_similarity_v1 on E, C, F, F, C, E we get anti_similar_triangles(C, E, F, C, F, E)
By sss_anti_similarity_v0 on C, E, F, C, F, E we get anti_similar_triangles(C, E, F, C, F, E)
By sss_anti_similarity_v1 on F, D, E, E, D, F we get anti_similar_triangles(D, E, F, D, F, E)
By sss_anti_similarity_v1 on F, D, E, E, D, F we get anti_similar_triangles(D, E, F, D, F, E)
By sss_anti_similarity_v0 on E, D, F, F, D, E we get anti_similar_triangles(D, E, F, D, F, E)
By sss_anti_similarity_v0 on D, F, E, D, E, F we get anti_similar_triangles(D, E, F, D, F, E)
By sss_anti_similarity_v0 on E, F, C, F, E, C we get anti_similar_triangles(C, E, F, C, F, E)
By sss_anti_similarity_v1 on C, F, E, C, E, F we get anti_similar_triangles(C, E, F, C, F, E)
By sss_anti_similarity_v1 on F, E, C, E, F, C we get anti_similar_triangles(C, E, F, C, F, E)
By sas_anti_similarity on E, C, F, F, C, E we get anti_similar_triangles(C, E, F, C, F, E)
By sss_anti_similarity_v1 on F, D, E, E, D, F we get anti_similar_triangles(D, E, F, D, F, E)
By parallel_line_angles_reverse_v1 on G, H, F, D we get angle(D, F, H) == angle(G, H, F) mod 360
By sss_anti_similarity_v0 on E, D, F, F, D, E we get anti_similar_triangles(D, E, F, D, F, E)
By sss_anti_similarity_v0 on F, C, E, E, C, F we get anti_similar_triangles(C, E, F, C, F, E)
By sss_anti_similarity_v1 on F, E, C, E, F, C we get anti_similar_triangles(C, E, F, C, F, E)
By sss_anti_similarity_v0 on D, F, E, D, E, F we get anti_similar_triangles(D, E, F, D, F, E)
By sss_anti_similarity_v1 on D, E, F, D, F, E we get anti_similar_triangles(D, E, F, D, F, E)
By sss_anti_similarity_v0 on E, F, C, F, E, C we get anti_similar_triangles(C, E, F, C, F, E)
By sss_anti_similarity_v1 on D, E, F, D, F, E we get anti_similar_triangles(D, E, F, D, F, E)
By sss_anti_similarity_v0 on F, E, D, E, F, D we get anti_similar_triangles(D, E, F, D, F, E)
By sss_anti_similarity_v1 on E, C, F, F, C, E we get anti_similar_triangles(C, E, F, C, F, E)
By sss_anti_similarity_v1 on E, F, D, F, E, D we get anti_similar_triangles(D, E, F, D, F, E)
By sss_anti_similarity_v0 on C, E, F, C, F, E we get anti_similar_triangles(C, E, F, C, F, E)
By sss_anti_similarity_v0 on E, F, C, F, E, C we get anti_similar_triangles(C, E, F, C, F, E)
By sss_anti_similarity_v0 on D, F, E, D, E, F we get anti_similar_triangles(D, E, F, D, F, E)
By sss_anti_similarity_v1 on C, F, E, C, E, F we get anti_similar_triangles(C, E, F, C, F, E)
By sss_anti_similarity_v0 on E, D, F, F, D, E we get anti_similar_triangles(D, E, F, D, F, E)
By sss_anti_similarity_v1 on C, F, E, C, E, F we get anti_similar_triangles(C, E, F, C, F, E)
By sss_anti_similarity_v0 on E, D, F, F, D, E we get anti_similar_triangles(D, E, F, D, F, E)
By sss_anti_similarity_v1 on F, D, E, E, D, F we get anti_similar_triangles(D, E, F, D, F, E)
By sss_anti_similarity_v0 on E, D, F, F, D, E we get anti_similar_triangles(D, E, F, D, F, E)
By sss_anti_similarity_v0 on D, F, E, D, E, F we get anti_similar_triangles(D, E, F, D, F, E)
By sss_anti_similarity_v0 on F, C, E, E, C, F we get anti_similar_triangles(C, E, F, C, F, E)
By sss_anti_similarity_v1 on F, D, E, E, D, F we get anti_similar_triangles(D, E, F, D, F, E)
By sss_anti_similarity_v1 on E, F, D, F, E, D we get anti_similar_triangles(D, E, F, D, F, E)
By sss_anti_similarity_v0 on F, E, D, E, F, D we get anti_similar_triangles(D, E, F, D, F, E)
By sss_anti_similarity_v0 on E, D, F, F, D, E we get anti_similar_triangles(D, E, F, D, F, E)
By sss_anti_similarity_v0 on F, E, D, E, F, D we get anti_similar_triangles(D, E, F, D, F, E)
By sss_anti_similarity_v1 on E, F, D, F, E, D we get anti_similar_triangles(D, E, F, D, F, E)
By sss_anti_similarity_v0 on C, E, F, C, F, E we get anti_similar_triangles(C, E, F, C, F, E)
By sss_anti_similarity_v0 on E, F, C, F, E, C we get anti_similar_triangles(C, E, F, C, F, E)
By sss_anti_similarity_v1 on C, F, E, C, E, F we get anti_similar_triangles(C, E, F, C, F, E)
By sss_anti_similarity_v1 on F, E, C, E, F, C we get anti_similar_triangles(C, E, F, C, F, E)
By sss_anti_similarity_v0 on E, F, C, F, E, C we get anti_similar_triangles(C, E, F, C, F, E)
By sss_anti_similarity_v1 on E, F, D, F, E, D we get anti_similar_triangles(D, E, F, D, F, E)
By sss_anti_similarity_v1 on D, E, F, D, F, E we get anti_similar_triangles(D, E, F, D, F, E)
By sss_anti_similarity_v0 on F, C, E, E, C, F we get anti_similar_triangles(C, E, F, C, F, E)
By sss_anti_similarity_v1 on C, F, E, C, E, F we get anti_similar_triangles(C, E, F, C, F, E)
By sss_anti_similarity_v0 on F, E, D, E, F, D we get anti_similar_triangles(D, E, F, D, F, E)
By sas_anti_similarity on F, C, E, E, C, F we get anti_similar_triangles(C, E, F, C, F, E)
By sss_anti_similarity_v1 on E, F, D, F, E, D we get anti_similar_triangles(D, E, F, D, F, E)
By sss_anti_similarity_v0 on C, E, F, C, F, E we get anti_similar_triangles(C, E, F, C, F, E)
By sss_anti_similarity_v1 on F, D, E, E, D, F we get anti_similar_triangles(D, E, F, D, F, E)
By sss_anti_similarity_v1 on F, E, C, E, F, C we get anti_similar_triangles(C, E, F, C, F, E)
By sss_anti_similarity_v1 on E, C, F, F, C, E we get anti_similar_triangles(C, E, F, C, F, E)
By sss_anti_similarity_v0 on D, F, E, D, E, F we get anti_similar_triangles(D, E, F, D, F, E)
By sss_anti_similarity_v1 on E, C, F, F, C, E we get anti_similar_triangles(C, E, F, C, F, E)
By sss_anti_similarity_v1 on E, F, D, F, E, D we get anti_similar_triangles(D, E, F, D, F, E)
By sss_anti_similarity_v1 on C, F, E, C, E, F we get anti_similar_triangles(C, E, F, C, F, E)
By sss_anti_similarity_v0 on D, F, E, D, E, F we get anti_similar_triangles(D, E, F, D, F, E)
By sss_anti_similarity_v0 on F, C, E, E, C, F we get anti_similar_triangles(C, E, F, C, F, E)
By sss_anti_similarity_v0 on F, C, E, E, C, F we get anti_similar_triangles(C, E, F, C, F, E)
By sss_anti_similarity_v1 on D, E, F, D, F, E we get anti_similar_triangles(D, E, F, D, F, E)
By sss_anti_similarity_v0 on F, E, D, E, F, D we get anti_similar_triangles(D, E, F, D, F, E)
By sss_anti_similarity_v0 on F, C, E, E, C, F we get anti_similar_triangles(C, E, F, C, F, E)
By sss_anti_similarity_v1 on D, E, F, D, F, E we get anti_similar_triangles(D, E, F, D, F, E)
By sss_anti_similarity_v0 on E, F, C, F, E, C we get anti_similar_triangles(C, E, F, C, F, E)
By sss_anti_similarity_v1 on D, E, F, D, F, E we get anti_similar_triangles(D, E, F, D, F, E)
By sss_anti_similarity_v0 on C, E, F, C, F, E we get anti_similar_triangles(C, E, F, C, F, E)
By power_of_a_point_in_circle on C, Circle(C, D, E) we get 0 == power_of_a_point(C, Circle(C, D, E))
By concyclic_definition_0 on I, D, A, F we get F in Circle(A, D, I)
By concyclic_definition_0 on D, A, F, I we get I in Circle(A, D, F)
By concyclic_definition_0 on F, I, A, D we get D in Circle(A, F, I)
By power_of_a_point_in_circle on F, Circle(C, D, E) we get 0 == power_of_a_point(F, Circle(C, D, E))
By concyclic_definition_0 on F, D, I, A we get A in Circle(D, F, I)
By power_of_a_point_in_circle on E, Circle(C, D, E) we get 0 == power_of_a_point(E, Circle(C, D, E))
By power_of_a_point_on_circle on D, Circle(C, D, E) we get 0 == power_of_a_point(D, Circle(C, D, E))
By perpendicular_lines_draw_intersection on h, altitude(C, A, D) we get exists(line_intersection(h, altitude(C, A, D)))
By anti_similar_triangle_basic_properties on A, I, C, D, F, C we get angle(A, I, C) == 0 - angle(D, F, C) mod 360, angle(I, C, A) == 0 - angle(F, C, D) mod 360, angle(C, A, I) == 0 - angle(C, D, F) mod 360, log(distance(A, I)) + log(distance(C, F)) == log(distance(D, F)) + log(distance(C, I)), log(distance(C, F)) + log(distance(A, C)) == log(distance(C, I)) + log(distance(C, D)), log(distance(A, C)) + log(distance(D, F)) == log(distance(C, D)) + log(distance(A, I))
By altitude_definition on orthocenter(A, C, D), A, D, altitude(C, A, D) we get altitude(C, A, D) == altitude(orthocenter(A, C, D), A, D)
By concyclic_definition_1 on D, F, A, I we get Circle(A, D, F) == Circle(A, F, I)
By concyclic_definition_1 on A, I, D, F we get Circle(A, D, I) == Circle(D, F, I)
By concyclic_definition_1 on F, A, I, D we get Circle(A, D, I) == Circle(A, F, I)
By altitude_definition on orthocenter(A, C, D), C, A, Line(D, F) we get Line(D, F) == altitude(orthocenter(A, C, D), A, C)
By concyclic_definition_1 on I, A, D, F we get Circle(A, D, F) == Circle(A, D, I)
By concyclic_definition_1 on I, F, D, A we get Circle(A, D, F) == Circle(D, F, I)
By altitude_definition on orthocenter(A, C, D), I, D, Line(A, I) we get Line(A, I) == altitude(orthocenter(A, C, D), D, I)
By similar_triangle_basic_properties on D, E, C, A, I, C we get angle(A, I, C) == angle(D, E, C) mod 360, angle(E, C, D) == angle(I, C, A) mod 360, angle(C, A, I) == angle(C, D, E) mod 360, log(distance(A, I)) + log(distance(C, E)) == log(distance(D, E)) + log(distance(C, I)), log(distance(C, E)) + log(distance(A, C)) == log(distance(C, I)) + log(distance(C, D)), log(distance(A, C)) + log(distance(D, E)) == log(distance(C, D)) + log(distance(A, I))
By similar_triangle_basic_properties on E, D, C, I, A, C we get angle(E, D, C) == angle(I, A, C) mod 360, angle(A, C, I) == angle(D, C, E) mod 360, angle(C, E, D) == angle(C, I, A) mod 360, log(distance(A, I)) + log(distance(C, D)) == log(distance(D, E)) + log(distance(A, C)), log(distance(A, C)) + log(distance(C, E)) == log(distance(C, D)) + log(distance(C, I)), log(distance(C, E)) + log(distance(A, I)) == log(distance(C, I)) + log(distance(D, E))
By altitude_definition on orthocenter(A, C, D), C, I, Line(A, I) we get Line(A, I) == altitude(orthocenter(A, C, D), C, I)
By anti_similar_triangle_basic_properties on D, C, F, A, C, I we get angle(D, C, F) == 0 - angle(A, C, I) mod 360, angle(C, F, D) == 0 - angle(C, I, A) mod 360, angle(F, D, C) == 0 - angle(I, A, C) mod 360, log(distance(A, C)) + log(distance(C, F)) == log(distance(C, D)) + log(distance(C, I)), log(distance(C, F)) + log(distance(A, I)) == log(distance(C, I)) + log(distance(D, F)), log(distance(A, I)) + log(distance(C, D)) == log(distance(D, F)) + log(distance(A, C))
By altitude_definition on orthocenter(A, C, D), G, C, Line(D, F) we get Line(D, F) == altitude(orthocenter(A, C, D), C, G)
By altitude_definition on orthocenter(A, C, D), C, F, Line(D, F) we get Line(D, F) == altitude(orthocenter(A, C, D), C, F)
By concyclic_definition_1 on A, F, I, D we get Circle(A, F, I) == Circle(D, F, I)
By altitude_definition on orthocenter(A, C, D), F, A, Line(D, F) we get Line(D, F) == altitude(orthocenter(A, C, D), A, F)
By altitude_definition on orthocenter(A, C, D), A, G, Line(D, F) we get Line(D, F) == altitude(orthocenter(A, C, D), A, G)
By altitude_definition on orthocenter(A, C, D), D, C, Line(A, I) we get Line(A, I) == altitude(orthocenter(A, C, D), C, D)
By altitude_definition on orthocenter(A, C, D), F, G, Line(D, F) we get Line(D, F) == altitude(orthocenter(A, C, D), F, G)
By power_of_a_point_definition on A, C, F, Circle(C, D, E) we get log(distance(A, C)) + log(distance(A, F)) == log(power_of_a_point(A, Circle(C, D, E)))
By power_of_a_point_definition on G, C, F, Circle(C, D, E) we get log(distance(C, G)) + log(distance(F, G)) == log(power_of_a_point(G, Circle(C, D, E)))
By power_of_a_point_definition on I, C, D, Circle(C, D, E) we get log(distance(C, I)) + log(distance(D, I)) == log(power_of_a_point(I, Circle(C, D, E)))
By power_of_a_point_definition on B, E, C, Circle(C, D, E) we get log(distance(B, E)) + log(distance(B, C)) == log(power_of_a_point(B, Circle(C, D, E)))
By concyclic_sufficient_conditions_v1 on E, H, A, C we get concyclic(A, C, E, H)
By line_definition on line_intersection(h, altitude(C, A, D)), C, altitude(C, A, D) we get altitude(C, A, D) == Line(C, line_intersection(h, altitude(C, A, D)))
By line_definition on line_intersection(h, altitude(C, A, D)), A, h we get h == Line(A, line_intersection(h, altitude(C, A, D)))
By line_definition on line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D), altitude(C, A, D) we get altitude(C, A, D) == Line(orthocenter(A, C, D), line_intersection(h, altitude(C, A, D)))
By concurrent_sufficient_conditions on j, g, altitude(C, A, D) we get concurrent(g, j, altitude(C, A, D))
By line_definition on line_intersection(h, altitude(C, A, D)), D, h we get h == Line(D, line_intersection(h, altitude(C, A, D)))
By concurrent_sufficient_conditions on g, j, altitude(C, A, D) we get concurrent(g, j, altitude(C, A, D))
By concurrent_sufficient_conditions on Line(D, F), Line(A, I), altitude(C, A, D) we get concurrent(Line(A, I), Line(D, F), altitude(C, A, D))
By concurrent_sufficient_conditions on j, altitude(C, A, D), f we get concurrent(f, j, altitude(C, A, D))
By concurrent_sufficient_conditions on altitude(C, A, D), j, f we get concurrent(f, j, altitude(C, A, D))
By concurrent_sufficient_conditions on f, j, altitude(C, A, D) we get concurrent(f, j, altitude(C, A, D))
By concurrent_sufficient_conditions on Line(A, I), altitude(C, A, D), Line(D, F) we get concurrent(Line(A, I), Line(D, F), altitude(C, A, D))
By concurrent_sufficient_conditions on altitude(C, A, D), j, g we get concurrent(g, j, altitude(C, A, D))
By concurrent_sufficient_conditions on altitude(C, A, D), g, f we get concurrent(f, g, altitude(C, A, D))
By concurrent_sufficient_conditions on altitude(C, A, D), Line(D, F), Line(A, I) we get concurrent(Line(A, I), Line(D, F), altitude(C, A, D))
By concurrent_sufficient_conditions on f, altitude(C, A, D), g we get concurrent(f, g, altitude(C, A, D))
By concurrent_sufficient_conditions on g, altitude(C, A, D), j we get concurrent(g, j, altitude(C, A, D))
By concurrent_sufficient_conditions on Line(A, I), Line(D, F), altitude(C, A, D) we get concurrent(Line(A, I), Line(D, F), altitude(C, A, D))
By concurrent_sufficient_conditions on j, f, altitude(C, A, D) we get concurrent(f, j, altitude(C, A, D))
By concurrent_sufficient_conditions on altitude(C, A, D), f, j we get concurrent(f, j, altitude(C, A, D))
By concurrent_sufficient_conditions on f, g, altitude(C, A, D) we get concurrent(f, g, altitude(C, A, D))
By concurrent_sufficient_conditions on g, altitude(C, A, D), f we get concurrent(f, g, altitude(C, A, D))
By concurrent_sufficient_conditions on Line(D, F), altitude(C, A, D), Line(A, I) we get concurrent(Line(A, I), Line(D, F), altitude(C, A, D))
By concurrent_sufficient_conditions on altitude(C, A, D), g, j we get concurrent(g, j, altitude(C, A, D))
By concurrent_sufficient_conditions on g, f, altitude(C, A, D) we get concurrent(f, g, altitude(C, A, D))
By concurrent_sufficient_conditions on altitude(C, A, D), Line(A, I), Line(D, F) we get concurrent(Line(A, I), Line(D, F), altitude(C, A, D))
By concurrent_sufficient_conditions on f, altitude(C, A, D), j we get concurrent(f, j, altitude(C, A, D))
By concurrent_sufficient_conditions on j, altitude(C, A, D), g we get concurrent(g, j, altitude(C, A, D))
By concurrent_sufficient_conditions on altitude(C, A, D), f, g we get concurrent(f, g, altitude(C, A, D))
By radical_axis_of_intersecting_circles_v0 on F, A, Circle(A, D, F), c we get Line(A, F) == radical_axis(c, Circle(A, D, F))
By radical_axis_of_intersecting_circles_v0 on F, D, Circle(C, D, E), Circle(A, D, F) we get Line(D, F) == radical_axis(Circle(A, D, F), Circle(C, D, E))
By perpendicular_line_definition on line_intersection(h, altitude(C, A, D)), h, altitude(C, A, D) we get h == perpendicular_line(line_intersection(h, altitude(C, A, D)), altitude(C, A, D))
By perpendicular_line_definition on line_intersection(h, altitude(C, A, D)), altitude(C, A, D), h we get altitude(C, A, D) == perpendicular_line(line_intersection(h, altitude(C, A, D)), h)
By angles_on_chord_v0 on A, I, F, D, Circle(A, D, F) we get angle(A, D, I) == angle(A, F, I) mod 360
By angles_on_chord_v1 on A, F, D, I, Circle(A, D, F) we get angle(A, D, F) == angle(A, I, F) mod 360
By angles_on_chord_v0 on I, D, F, A, Circle(A, D, F) we get angle(I, A, D) == angle(I, F, D) mod 360
By angles_on_chord_v0 on D, F, I, A, Circle(A, D, F) we get angle(D, A, F) == angle(D, I, F) mod 360
By angles_on_chord_v1 on F, D, I, A, Circle(A, D, F) we get angle(F, A, D) == angle(F, I, D) mod 360
By angles_on_chord_v1 on D, I, F, A, Circle(A, D, F) we get angle(D, A, I) == angle(D, F, I) mod 360
By angles_on_chord_v1 on I, A, D, F, Circle(A, D, F) we get angle(I, D, A) == angle(I, F, A) mod 360
By angles_on_chord_v0 on F, A, I, D, Circle(A, D, F) we get angle(F, D, A) == angle(F, I, A) mod 360
By projection_definition on orthocenter(A, C, D), I, j we get I == projection(orthocenter(A, C, D), j)
By perpendicular_direction_conditions_v0 on E, F, I, C we get perpendicular(Line(C, I), Line(E, F))
By perpendicular_direction_conditions_v0 on C, D, E, F we get perpendicular(Line(C, D), Line(E, F))
By perpendicular_direction_conditions_v0 on F, E, I, D we get perpendicular(Line(D, I), Line(E, F))
By projection_definition on orthocenter(A, C, D), F, g we get F == projection(orthocenter(A, C, D), g)
By circle_radius_v0_r on F, Circle(C, D, E) we get radius(Circle(C, D, E)) == distance(F, center(Circle(C, D, E)))
By circle_radius_v0_r on E, Circle(C, D, E) we get radius(Circle(C, D, E)) == distance(E, center(Circle(C, D, E)))
By circle_radius_v0_r on C, Circle(C, D, E) we get radius(Circle(C, D, E)) == distance(C, center(Circle(C, D, E)))
By circle_radius_v0_r on D, Circle(C, D, E) we get radius(Circle(C, D, E)) == distance(D, center(Circle(C, D, E)))
By angle_to_center on F, E, D, Circle(C, D, E) we get 2 * angle(F, E, D) == angle(F, center(Circle(C, D, E)), D) mod 360
By perpendicular_direction_conditions_v0_r on F, orthocenter(A, C, D), A, G we get 180 == 2 * direction(F, orthocenter(A, C, D)) - 2 * direction(A, G) mod 360
By angle_to_center on C, D, E, Circle(C, D, E) we get 2 * angle(C, D, E) == angle(C, center(Circle(C, D, E)), E) mod 360
By angle_to_center on D, E, F, Circle(C, D, E) we get 2 * angle(D, E, F) == angle(D, center(Circle(C, D, E)), F) mod 360
By angle_to_center on E, C, F, Circle(C, D, E) we get 2 * angle(E, C, F) == angle(E, center(Circle(C, D, E)), F) mod 360
By angle_to_center on E, D, C, Circle(C, D, E) we get 2 * angle(E, D, C) == angle(E, center(Circle(C, D, E)), C) mod 360
By angle_to_center on D, C, E, Circle(C, D, E) we get 2 * angle(D, C, E) == angle(D, center(Circle(C, D, E)), E) mod 360
By angle_to_center on E, F, D, Circle(C, D, E) we get 2 * angle(E, F, D) == angle(E, center(Circle(C, D, E)), D) mod 360
By angle_to_center on C, E, F, Circle(C, D, E) we get 2 * angle(C, E, F) == angle(C, center(Circle(C, D, E)), F) mod 360
By angle_to_center on C, F, D, Circle(C, D, E) we get 2 * angle(C, F, D) == angle(C, center(Circle(C, D, E)), D) mod 360
By angle_to_center on C, D, F, Circle(C, D, E) we get 2 * angle(C, D, F) == angle(C, center(Circle(C, D, E)), F) mod 360
By angle_to_center on D, E, C, Circle(C, D, E) we get 2 * angle(D, E, C) == angle(D, center(Circle(C, D, E)), C) mod 360
By angle_to_center on E, C, D, Circle(C, D, E) we get 2 * angle(E, C, D) == angle(E, center(Circle(C, D, E)), D) mod 360
By angle_to_center on D, F, E, Circle(C, D, E) we get 2 * angle(D, F, E) == angle(D, center(Circle(C, D, E)), E) mod 360
By angle_to_center on E, F, C, Circle(C, D, E) we get 2 * angle(E, F, C) == angle(E, center(Circle(C, D, E)), C) mod 360
By angle_to_center on C, F, E, Circle(C, D, E) we get 2 * angle(C, F, E) == angle(C, center(Circle(C, D, E)), E) mod 360
By angle_to_center on F, E, C, Circle(C, D, E) we get 2 * angle(F, E, C) == angle(F, center(Circle(C, D, E)), C) mod 360
By angle_to_center on F, D, E, Circle(C, D, E) we get 2 * angle(F, D, E) == angle(F, center(Circle(C, D, E)), E) mod 360
By angle_to_center on D, F, C, Circle(C, D, E) we get 2 * angle(D, F, C) == angle(D, center(Circle(C, D, E)), C) mod 360
By angle_to_center on F, D, C, Circle(C, D, E) we get 2 * angle(F, D, C) == angle(F, center(Circle(C, D, E)), C) mod 360
By angle_to_center on C, E, D, Circle(C, D, E) we get 2 * angle(C, E, D) == angle(C, center(Circle(C, D, E)), D) mod 360
By angle_to_center on E, D, F, Circle(C, D, E) we get 2 * angle(E, D, F) == angle(E, center(Circle(C, D, E)), F) mod 360
By angle_to_center on F, C, E, Circle(C, D, E) we get 2 * angle(F, C, E) == angle(F, center(Circle(C, D, E)), E) mod 360
By angle_to_center on D, C, F, Circle(C, D, E) we get 2 * angle(D, C, F) == angle(D, center(Circle(C, D, E)), F) mod 360
By angle_to_center on F, C, D, Circle(C, D, E) we get 2 * angle(F, C, D) == angle(F, center(Circle(C, D, E)), D) mod 360
By perpendicular_direction_conditions_v0_r on F, G, orthocenter(A, C, D), F we get 180 == 2 * direction(F, G) - 2 * direction(orthocenter(A, C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), I, D, C we get 180 == 2 * direction(orthocenter(A, C, D), I) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), I, C we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(I, C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), D, C, A we get 180 == 2 * direction(orthocenter(A, C, D), D) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on D, I, A, orthocenter(A, C, D) we get 180 == 2 * direction(D, I) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, D, I, orthocenter(A, C, D) we get 180 == 2 * direction(C, D) - 2 * direction(I, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on I, orthocenter(A, C, D), C, I we get 180 == 2 * direction(I, orthocenter(A, C, D)) - 2 * direction(C, I) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), C, I we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(C, I) mod 360
By perpendicular_direction_conditions_v0_r on F, orthocenter(A, C, D), F, A we get 180 == 2 * direction(F, orthocenter(A, C, D)) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), D, F, C we get 180 == 2 * direction(orthocenter(A, C, D), D) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on I, orthocenter(A, C, D), D, C we get 180 == 2 * direction(I, orthocenter(A, C, D)) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on A, F, F, orthocenter(A, C, D) we get 180 == 2 * direction(A, F) - 2 * direction(F, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on I, D, orthocenter(A, C, D), I we get 180 == 2 * direction(I, D) - 2 * direction(orthocenter(A, C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, I, C we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(I, C) mod 360
By perpendicular_direction_conditions_v0_r on G, A, orthocenter(A, C, D), F we get 180 == 2 * direction(G, A) - 2 * direction(orthocenter(A, C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on F, C, orthocenter(A, C, D), D we get 180 == 2 * direction(F, C) - 2 * direction(orthocenter(A, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on C, F, F, orthocenter(A, C, D) we get 180 == 2 * direction(C, F) - 2 * direction(F, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), F, A, C we get 180 == 2 * direction(orthocenter(A, C, D), F) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, D, C we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on D, A, C, orthocenter(A, C, D) we get 180 == 2 * direction(D, A) - 2 * direction(C, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), F, G, A we get 180 == 2 * direction(orthocenter(A, C, D), F) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on F, A, orthocenter(A, C, D), F we get 180 == 2 * direction(F, A) - 2 * direction(orthocenter(A, C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), D, F, G we get 180 == 2 * direction(orthocenter(A, C, D), D) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), F, C, A we get 180 == 2 * direction(orthocenter(A, C, D), F) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on F, orthocenter(A, C, D), G, F we get 180 == 2 * direction(F, orthocenter(A, C, D)) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on D, I, I, orthocenter(A, C, D) we get 180 == 2 * direction(D, I) - 2 * direction(I, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(A, C, D), G, C we get 180 == 2 * direction(D, orthocenter(A, C, D)) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on A, C, D, orthocenter(A, C, D) we get 180 == 2 * direction(A, C) - 2 * direction(D, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on I, D, orthocenter(A, C, D), A we get 180 == 2 * direction(I, D) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(A, C, D), C, F we get 180 == 2 * direction(D, orthocenter(A, C, D)) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on F, orthocenter(A, C, D), F, G we get 180 == 2 * direction(F, orthocenter(A, C, D)) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(A, C, D), A, G we get 180 == 2 * direction(D, orthocenter(A, C, D)) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), F, F, A we get 180 == 2 * direction(orthocenter(A, C, D), F) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on C, D, orthocenter(A, C, D), A we get 180 == 2 * direction(C, D) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(A, C, D), A, C we get 180 == 2 * direction(D, orthocenter(A, C, D)) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on F, orthocenter(A, C, D), C, G we get 180 == 2 * direction(F, orthocenter(A, C, D)) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, D, I we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(D, I) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), I, I, C we get 180 == 2 * direction(orthocenter(A, C, D), I) - 2 * direction(I, C) mod 360
By perpendicular_direction_conditions_v0_r on D, C, orthocenter(A, C, D), A we get 180 == 2 * direction(D, C) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on F, G, orthocenter(A, C, D), D we get 180 == 2 * direction(F, G) - 2 * direction(orthocenter(A, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on F, C, F, orthocenter(A, C, D) we get 180 == 2 * direction(F, C) - 2 * direction(F, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on F, orthocenter(A, C, D), A, C we get 180 == 2 * direction(F, orthocenter(A, C, D)) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), D, G, F we get 180 == 2 * direction(orthocenter(A, C, D), D) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on G, C, orthocenter(A, C, D), F we get 180 == 2 * direction(G, C) - 2 * direction(orthocenter(A, C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on C, I, orthocenter(A, C, D), A we get 180 == 2 * direction(C, I) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(A, C, D), F, A we get 180 == 2 * direction(D, orthocenter(A, C, D)) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on D, A, orthocenter(A, C, D), C we get 180 == 2 * direction(D, A) - 2 * direction(orthocenter(A, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on C, G, D, orthocenter(A, C, D) we get 180 == 2 * direction(C, G) - 2 * direction(D, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on I, orthocenter(A, C, D), D, I we get 180 == 2 * direction(I, orthocenter(A, C, D)) - 2 * direction(D, I) mod 360
By perpendicular_direction_conditions_v0_r on C, G, orthocenter(A, C, D), D we get 180 == 2 * direction(C, G) - 2 * direction(orthocenter(A, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, C, D we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), D, A, C we get 180 == 2 * direction(orthocenter(A, C, D), D) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on F, A, orthocenter(A, C, D), D we get 180 == 2 * direction(F, A) - 2 * direction(orthocenter(A, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on A, C, orthocenter(A, C, D), F we get 180 == 2 * direction(A, C) - 2 * direction(orthocenter(A, C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), D, C we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on F, A, D, orthocenter(A, C, D) we get 180 == 2 * direction(F, A) - 2 * direction(D, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, C, F, orthocenter(A, C, D) we get 180 == 2 * direction(G, C) - 2 * direction(F, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(A, C, D), C, G we get 180 == 2 * direction(D, orthocenter(A, C, D)) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), F, F, G we get 180 == 2 * direction(orthocenter(A, C, D), F) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on F, orthocenter(A, C, D), C, F we get 180 == 2 * direction(F, orthocenter(A, C, D)) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on C, I, I, orthocenter(A, C, D) we get 180 == 2 * direction(C, I) - 2 * direction(I, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on F, C, orthocenter(A, C, D), F we get 180 == 2 * direction(F, C) - 2 * direction(orthocenter(A, C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on C, F, orthocenter(A, C, D), D we get 180 == 2 * direction(C, F) - 2 * direction(orthocenter(A, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(A, C, D), F, G we get 180 == 2 * direction(D, orthocenter(A, C, D)) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on F, A, F, orthocenter(A, C, D) we get 180 == 2 * direction(F, A) - 2 * direction(F, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on I, D, A, orthocenter(A, C, D) we get 180 == 2 * direction(I, D) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, C, orthocenter(A, C, D), I we get 180 == 2 * direction(D, C) - 2 * direction(orthocenter(A, C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), D, A, G we get 180 == 2 * direction(orthocenter(A, C, D), D) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), D, F, A we get 180 == 2 * direction(orthocenter(A, C, D), D) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on F, orthocenter(A, C, D), F, C we get 180 == 2 * direction(F, orthocenter(A, C, D)) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), F, G, F we get 180 == 2 * direction(orthocenter(A, C, D), F) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on C, orthocenter(A, C, D), A, D we get 180 == 2 * direction(C, orthocenter(A, C, D)) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on C, D, A, orthocenter(A, C, D) we get 180 == 2 * direction(C, D) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), F, A, G we get 180 == 2 * direction(orthocenter(A, C, D), F) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on G, A, orthocenter(A, C, D), D we get 180 == 2 * direction(G, A) - 2 * direction(orthocenter(A, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on A, C, F, orthocenter(A, C, D) we get 180 == 2 * direction(A, C) - 2 * direction(F, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, C, orthocenter(A, C, D), D we get 180 == 2 * direction(G, C) - 2 * direction(orthocenter(A, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on F, C, D, orthocenter(A, C, D) we get 180 == 2 * direction(F, C) - 2 * direction(D, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(A, C, D), C, A we get 180 == 2 * direction(D, orthocenter(A, C, D)) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), F, A, F we get 180 == 2 * direction(orthocenter(A, C, D), F) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on I, C, orthocenter(A, C, D), A we get 180 == 2 * direction(I, C) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on A, F, orthocenter(A, C, D), F we get 180 == 2 * direction(A, F) - 2 * direction(orthocenter(A, C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on G, A, F, orthocenter(A, C, D) we get 180 == 2 * direction(G, A) - 2 * direction(F, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on I, orthocenter(A, C, D), I, C we get 180 == 2 * direction(I, orthocenter(A, C, D)) - 2 * direction(I, C) mod 360
By perpendicular_direction_conditions_v0_r on G, C, D, orthocenter(A, C, D) we get 180 == 2 * direction(G, C) - 2 * direction(D, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on F, G, F, orthocenter(A, C, D) we get 180 == 2 * direction(F, G) - 2 * direction(F, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on A, G, F, orthocenter(A, C, D) we get 180 == 2 * direction(A, G) - 2 * direction(F, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on A, G, orthocenter(A, C, D), D we get 180 == 2 * direction(A, G) - 2 * direction(orthocenter(A, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), F, C, F we get 180 == 2 * direction(orthocenter(A, C, D), F) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on G, F, F, orthocenter(A, C, D) we get 180 == 2 * direction(G, F) - 2 * direction(F, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, C, I, orthocenter(A, C, D) we get 180 == 2 * direction(D, C) - 2 * direction(I, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, D, orthocenter(A, C, D), I we get 180 == 2 * direction(C, D) - 2 * direction(orthocenter(A, C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on F, orthocenter(A, C, D), A, F we get 180 == 2 * direction(F, orthocenter(A, C, D)) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on C, F, orthocenter(A, C, D), F we get 180 == 2 * direction(C, F) - 2 * direction(orthocenter(A, C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on C, A, D, orthocenter(A, C, D) we get 180 == 2 * direction(C, A) - 2 * direction(D, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), F, F, C we get 180 == 2 * direction(orthocenter(A, C, D), F) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on I, D, I, orthocenter(A, C, D) we get 180 == 2 * direction(I, D) - 2 * direction(I, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on A, C, orthocenter(A, C, D), D we get 180 == 2 * direction(A, C) - 2 * direction(orthocenter(A, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on F, orthocenter(A, C, D), C, A we get 180 == 2 * direction(F, orthocenter(A, C, D)) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on D, C, A, orthocenter(A, C, D) we get 180 == 2 * direction(D, C) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, A, D, orthocenter(A, C, D) we get 180 == 2 * direction(G, A) - 2 * direction(D, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), D, G, C we get 180 == 2 * direction(orthocenter(A, C, D), D) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), C, A, D we get 180 == 2 * direction(orthocenter(A, C, D), C) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on A, F, D, orthocenter(A, C, D) we get 180 == 2 * direction(A, F) - 2 * direction(D, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, I, D we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(I, D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), D, G, A we get 180 == 2 * direction(orthocenter(A, C, D), D) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), F, C, G we get 180 == 2 * direction(orthocenter(A, C, D), F) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), D, A, F we get 180 == 2 * direction(orthocenter(A, C, D), D) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on I, C, orthocenter(A, C, D), I we get 180 == 2 * direction(I, C) - 2 * direction(orthocenter(A, C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on A, D, orthocenter(A, C, D), C we get 180 == 2 * direction(A, D) - 2 * direction(orthocenter(A, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on F, G, D, orthocenter(A, C, D) we get 180 == 2 * direction(F, G) - 2 * direction(D, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), I, D we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(I, D) mod 360
By perpendicular_direction_conditions_v0_r on I, orthocenter(A, C, D), I, D we get 180 == 2 * direction(I, orthocenter(A, C, D)) - 2 * direction(I, D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), I, D, I we get 180 == 2 * direction(orthocenter(A, C, D), I) - 2 * direction(D, I) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), D, I we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(D, I) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), C, D we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(A, C, D), G, F we get 180 == 2 * direction(D, orthocenter(A, C, D)) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(A, C, D), G, A we get 180 == 2 * direction(D, orthocenter(A, C, D)) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), C, D, A we get 180 == 2 * direction(orthocenter(A, C, D), C) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(A, C, D), A, F we get 180 == 2 * direction(D, orthocenter(A, C, D)) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on A, G, orthocenter(A, C, D), F we get 180 == 2 * direction(A, G) - 2 * direction(orthocenter(A, C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on F, orthocenter(A, C, D), G, C we get 180 == 2 * direction(F, orthocenter(A, C, D)) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on D, I, orthocenter(A, C, D), A we get 180 == 2 * direction(D, I) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), F, G, C we get 180 == 2 * direction(orthocenter(A, C, D), F) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, C, I we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(C, I) mod 360
By perpendicular_direction_conditions_v0_r on A, D, C, orthocenter(A, C, D) we get 180 == 2 * direction(A, D) - 2 * direction(C, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, A, orthocenter(A, C, D), D we get 180 == 2 * direction(C, A) - 2 * direction(orthocenter(A, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on D, I, orthocenter(A, C, D), I we get 180 == 2 * direction(D, I) - 2 * direction(orthocenter(A, C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), I, C, D we get 180 == 2 * direction(orthocenter(A, C, D), I) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on I, C, A, orthocenter(A, C, D) we get 180 == 2 * direction(I, C) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(A, C, D), F, C we get 180 == 2 * direction(D, orthocenter(A, C, D)) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on C, A, F, orthocenter(A, C, D) we get 180 == 2 * direction(C, A) - 2 * direction(F, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), I, C, I we get 180 == 2 * direction(orthocenter(A, C, D), I) - 2 * direction(C, I) mod 360
By perpendicular_direction_conditions_v0_r on C, G, F, orthocenter(A, C, D) we get 180 == 2 * direction(C, G) - 2 * direction(F, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on A, F, orthocenter(A, C, D), D we get 180 == 2 * direction(A, F) - 2 * direction(orthocenter(A, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), D, C, F we get 180 == 2 * direction(orthocenter(A, C, D), D) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on C, I, orthocenter(A, C, D), I we get 180 == 2 * direction(C, I) - 2 * direction(orthocenter(A, C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on G, F, orthocenter(A, C, D), F we get 180 == 2 * direction(G, F) - 2 * direction(orthocenter(A, C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on F, orthocenter(A, C, D), G, A we get 180 == 2 * direction(F, orthocenter(A, C, D)) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on C, G, orthocenter(A, C, D), F we get 180 == 2 * direction(C, G) - 2 * direction(orthocenter(A, C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on C, orthocenter(A, C, D), D, A we get 180 == 2 * direction(C, orthocenter(A, C, D)) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on G, F, D, orthocenter(A, C, D) we get 180 == 2 * direction(G, F) - 2 * direction(D, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, F, D, orthocenter(A, C, D) we get 180 == 2 * direction(C, F) - 2 * direction(D, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, F, orthocenter(A, C, D), D we get 180 == 2 * direction(G, F) - 2 * direction(orthocenter(A, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on I, orthocenter(A, C, D), C, D we get 180 == 2 * direction(I, orthocenter(A, C, D)) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on C, I, A, orthocenter(A, C, D) we get 180 == 2 * direction(C, I) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), D, C, G we get 180 == 2 * direction(orthocenter(A, C, D), D) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on A, G, D, orthocenter(A, C, D) we get 180 == 2 * direction(A, G) - 2 * direction(D, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, A, orthocenter(A, C, D), F we get 180 == 2 * direction(C, A) - 2 * direction(orthocenter(A, C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on I, C, I, orthocenter(A, C, D) we get 180 == 2 * direction(I, C) - 2 * direction(I, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), I, I, D we get 180 == 2 * direction(orthocenter(A, C, D), I) - 2 * direction(I, D) mod 360
By similar_triangle_basic_properties on A, E, H, F, E, D we get angle(A, E, H) == angle(F, E, D) mod 360, angle(E, D, F) == angle(E, H, A) mod 360, angle(D, F, E) == angle(H, A, E) mod 360, log(distance(A, E)) + log(distance(D, E)) == log(distance(E, F)) + log(distance(E, H)), log(distance(D, E)) + log(distance(A, H)) == log(distance(E, H)) + log(distance(D, F)), log(distance(A, H)) + log(distance(E, F)) == log(distance(D, F)) + log(distance(A, E))
By anti_similar_triangle_basic_properties on F, D, E, E, H, A we get angle(F, D, E) == 0 - angle(E, H, A) mod 360, angle(D, E, F) == 0 - angle(H, A, E) mod 360, angle(E, F, D) == 0 - angle(A, E, H) mod 360, log(distance(D, F)) + log(distance(A, H)) == log(distance(E, H)) + log(distance(D, E)), log(distance(A, H)) + log(distance(E, F)) == log(distance(D, E)) + log(distance(A, E)), log(distance(A, E)) + log(distance(D, F)) == log(distance(E, F)) + log(distance(E, H))
By parallel_line_angles_v1 on I, A, F, E we get parallel(Line(A, I), Line(E, F))
By in_imply_collinear on line_intersection(h, altitude(C, A, D)), C, orthocenter(A, C, D) we get collinear(C, orthocenter(A, C, D), line_intersection(h, altitude(C, A, D)))
By in_imply_collinear on line_intersection(h, altitude(C, A, D)), A, D we get collinear(A, D, line_intersection(h, altitude(C, A, D)))
By similar_triangle_basic_properties on E, A, H, E, F, D we get angle(E, A, H) == angle(E, F, D) mod 360, angle(A, H, E) == angle(F, D, E) mod 360, angle(D, E, F) == angle(H, E, A) mod 360, log(distance(A, E)) + log(distance(D, F)) == log(distance(E, F)) + log(distance(A, H)), log(distance(A, H)) + log(distance(D, E)) == log(distance(D, F)) + log(distance(E, H)), log(distance(D, E)) + log(distance(A, E)) == log(distance(E, H)) + log(distance(E, F))
By anti_similar_triangle_basic_properties on A, H, E, E, D, F we get angle(A, H, E) == 0 - angle(E, D, F) mod 360, angle(H, E, A) == 0 - angle(D, F, E) mod 360, angle(E, A, H) == 0 - angle(F, E, D) mod 360, log(distance(A, H)) + log(distance(D, F)) == log(distance(D, E)) + log(distance(E, H)), log(distance(D, F)) + log(distance(A, E)) == log(distance(E, H)) + log(distance(E, F)), log(distance(A, E)) + log(distance(D, E)) == log(distance(E, F)) + log(distance(A, H))
By external_angle_bisector_definition_v0 on D, orthocenter(A, C, D), C, I we get 180 == angle(D, I, orthocenter(A, C, D)) + angle(C, I, orthocenter(A, C, D)) mod 360
By perpendicular_angle_conditions_v0 on orthocenter(A, C, D), I, C we get angle(orthocenter(A, C, D), I, C) == orientation(C, orthocenter(A, C, D), I) mod 360
By perpendicular_angle_conditions_v0 on orthocenter(A, C, D), F, A we get angle(orthocenter(A, C, D), F, A) == orientation(A, orthocenter(A, C, D), F) mod 360
By perpendicular_angle_conditions_v0 on G, F, orthocenter(A, C, D) we get angle(G, F, orthocenter(A, C, D)) == orientation(F, orthocenter(A, C, D), G) mod 360
By collinear_definition on F, orthocenter(A, C, D), D we get orthocenter(A, C, D) in Line(D, F), D in Line(F, orthocenter(A, C, D)), Line(D, F) == Line(F, orthocenter(A, C, D)), 0 == 2 * angle(orthocenter(A, C, D), F, D) mod 360
By power_of_a_point_in_circle on F, Circle(A, D, F) we get 0 == power_of_a_point(F, Circle(A, D, F))
By external_angle_bisector_definition_v0 on G, orthocenter(A, C, D), A, F we get 180 == angle(G, F, orthocenter(A, C, D)) + angle(A, F, orthocenter(A, C, D)) mod 360
By collinear_definition on D, F, orthocenter(A, C, D) we get F in Line(D, orthocenter(A, C, D)), orthocenter(A, C, D) in Line(D, F), Line(D, F) == Line(D, orthocenter(A, C, D)), 0 == 2 * angle(F, D, orthocenter(A, C, D)) mod 360
By collinear_definition on A, I, orthocenter(A, C, D) we get I in Line(A, orthocenter(A, C, D)), orthocenter(A, C, D) in Line(A, I), Line(A, I) == Line(A, orthocenter(A, C, D)), 0 == 2 * angle(I, A, orthocenter(A, C, D)) mod 360
By collinear_definition on D, orthocenter(A, C, D), F we get orthocenter(A, C, D) in Line(D, F), F in Line(D, orthocenter(A, C, D)), Line(D, F) == Line(D, orthocenter(A, C, D)), 0 == 2 * angle(orthocenter(A, C, D), D, F) mod 360
By power_of_a_point_in_circle on I, Circle(A, D, F) we get 0 == power_of_a_point(I, Circle(A, D, F))
By power_of_a_point_on_circle on A, Circle(A, D, F) we get 0 == power_of_a_point(A, Circle(A, D, F))
By perpendicular_angle_conditions_v0 on A, F, orthocenter(A, C, D) we get angle(A, F, orthocenter(A, C, D)) == orientation(A, F, orthocenter(A, C, D)) mod 360
By internal_angle_bisector_definition_v0 on C, orthocenter(A, C, D), G, F we get angle(C, F, orthocenter(A, C, D)) == angle(orthocenter(A, C, D), F, G) mod 360
By collinear_definition on F, D, orthocenter(A, C, D) we get D in Line(F, orthocenter(A, C, D)), orthocenter(A, C, D) in Line(D, F), Line(D, F) == Line(F, orthocenter(A, C, D)), 0 == 2 * angle(D, F, orthocenter(A, C, D)) mod 360
By external_angle_bisector_definition_v0 on G, orthocenter(A, C, D), G, F we get 180 == angle(G, F, orthocenter(A, C, D)) + angle(G, F, orthocenter(A, C, D)) mod 360
By perpendicular_angle_conditions_v0 on orthocenter(A, C, D), F, C we get angle(orthocenter(A, C, D), F, C) == orientation(C, orthocenter(A, C, D), F) mod 360
By collinear_definition on A, orthocenter(A, C, D), I we get orthocenter(A, C, D) in Line(A, I), I in Line(A, orthocenter(A, C, D)), Line(A, I) == Line(A, orthocenter(A, C, D)), 0 == 2 * angle(orthocenter(A, C, D), A, I) mod 360
By internal_angle_bisector_definition_v0 on A, orthocenter(A, C, D), C, F we get angle(A, F, orthocenter(A, C, D)) == angle(orthocenter(A, C, D), F, C) mod 360
By perpendicular_angle_conditions_v0 on C, F, orthocenter(A, C, D) we get angle(C, F, orthocenter(A, C, D)) == orientation(C, F, orthocenter(A, C, D)) mod 360
By perpendicular_angle_conditions_v0 on orthocenter(A, C, D), F, G we get angle(orthocenter(A, C, D), F, G) == orientation(F, G, orthocenter(A, C, D)) mod 360
By internal_angle_bisector_definition_v0 on C, orthocenter(A, C, D), A, F we get angle(C, F, orthocenter(A, C, D)) == angle(orthocenter(A, C, D), F, A) mod 360
By external_angle_bisector_definition_v0 on D, orthocenter(A, C, D), D, I we get 180 == angle(D, I, orthocenter(A, C, D)) + angle(D, I, orthocenter(A, C, D)) mod 360
By external_angle_bisector_definition_v0 on C, orthocenter(A, C, D), C, F we get 180 == angle(C, F, orthocenter(A, C, D)) + angle(C, F, orthocenter(A, C, D)) mod 360
By perpendicular_angle_conditions_v0 on D, I, orthocenter(A, C, D) we get angle(D, I, orthocenter(A, C, D)) == orientation(D, I, orthocenter(A, C, D)) mod 360
By collinear_definition on I, A, orthocenter(A, C, D) we get A in Line(I, orthocenter(A, C, D)), orthocenter(A, C, D) in Line(A, I), Line(A, I) == Line(I, orthocenter(A, C, D)), 0 == 2 * angle(A, I, orthocenter(A, C, D)) mod 360
By power_of_a_point_on_circle on D, Circle(A, D, F) we get 0 == power_of_a_point(D, Circle(A, D, F))
By external_angle_bisector_definition_v0 on A, orthocenter(A, C, D), A, F we get 180 == angle(A, F, orthocenter(A, C, D)) + angle(A, F, orthocenter(A, C, D)) mod 360
By collinear_definition on I, orthocenter(A, C, D), A we get orthocenter(A, C, D) in Line(A, I), A in Line(I, orthocenter(A, C, D)), Line(A, I) == Line(I, orthocenter(A, C, D)), 0 == 2 * angle(orthocenter(A, C, D), I, A) mod 360
By internal_angle_bisector_definition_v0 on G, orthocenter(A, C, D), C, F we get angle(G, F, orthocenter(A, C, D)) == angle(orthocenter(A, C, D), F, C) mod 360
By perpendicular_angle_conditions_v0 on orthocenter(A, C, D), I, D we get angle(orthocenter(A, C, D), I, D) == orientation(D, orthocenter(A, C, D), I) mod 360
By external_angle_bisector_definition_v0 on C, orthocenter(A, C, D), C, I we get 180 == angle(C, I, orthocenter(A, C, D)) + angle(C, I, orthocenter(A, C, D)) mod 360
By perpendicular_angle_conditions_v0 on C, I, orthocenter(A, C, D) we get angle(C, I, orthocenter(A, C, D)) == orientation(C, I, orthocenter(A, C, D)) mod 360
By altitude_definition on C, orthocenter(A, C, D), D, g we get g == altitude(C, D, orthocenter(A, C, D))
By power_of_a_point_definition on C, A, F, Circle(A, D, F) we get log(distance(A, C)) + log(distance(C, F)) == log(power_of_a_point(C, Circle(A, D, F)))
By sas_anti_similarity on H, F, C, H, E, C we get anti_similar_triangles(C, E, H, C, F, H)
By altitude_definition on A, F, orthocenter(A, C, D), g we get g == altitude(A, F, orthocenter(A, C, D))
By collinear_definition on orthocenter(A, C, D), F, D we get F in Line(D, orthocenter(A, C, D)), D in Line(F, orthocenter(A, C, D)), Line(D, orthocenter(A, C, D)) == Line(F, orthocenter(A, C, D)), 0 == 2 * angle(F, orthocenter(A, C, D), D) mod 360
By sas_anti_similarity on D, C, A, F, C, I we get anti_similar_triangles(A, C, D, I, C, F)
By collinear_definition on orthocenter(A, C, D), A, I we get A in Line(I, orthocenter(A, C, D)), I in Line(A, orthocenter(A, C, D)), Line(A, orthocenter(A, C, D)) == Line(I, orthocenter(A, C, D)), 0 == 2 * angle(A, orthocenter(A, C, D), I) mod 360
By altitude_definition on C, orthocenter(A, C, D), I, j we get j == altitude(C, I, orthocenter(A, C, D))
By power_of_a_point_definition on G, A, F, Circle(A, D, F) we get log(distance(A, G)) + log(distance(F, G)) == log(power_of_a_point(G, Circle(A, D, F)))
By altitude_definition on C, orthocenter(A, C, D), A, j we get j == altitude(C, A, orthocenter(A, C, D))
By sas_anti_similarity on H, E, C, H, F, C we get anti_similar_triangles(C, E, H, C, F, H)
By altitude_definition on A, C, orthocenter(A, C, D), h we get h == altitude(A, C, orthocenter(A, C, D))
By altitude_definition on D, orthocenter(A, C, D), A, j we get j == altitude(D, A, orthocenter(A, C, D))
By altitude_definition on G, D, orthocenter(A, C, D), g we get g == altitude(G, D, orthocenter(A, C, D))
By altitude_definition on C, F, orthocenter(A, C, D), g we get g == altitude(C, F, orthocenter(A, C, D))
By sas_similarity on D, C, A, E, C, I we get similar_triangles(A, C, D, I, C, E)
By sas_anti_similarity on F, C, I, D, C, A we get anti_similar_triangles(A, C, D, I, C, F)
By altitude_definition on G, orthocenter(A, C, D), F, g we get g == altitude(G, F, orthocenter(A, C, D))
By collinear_definition on orthocenter(A, C, D), I, A we get I in Line(A, orthocenter(A, C, D)), A in Line(I, orthocenter(A, C, D)), Line(A, orthocenter(A, C, D)) == Line(I, orthocenter(A, C, D)), 0 == 2 * angle(I, orthocenter(A, C, D), A) mod 360
By altitude_definition on D, orthocenter(A, C, D), I, j we get j == altitude(D, I, orthocenter(A, C, D))
By sas_anti_similarity on C, E, H, C, F, H we get anti_similar_triangles(C, E, H, C, F, H)
By sas_similarity on A, C, D, I, C, E we get similar_triangles(A, C, D, I, C, E)
By altitude_definition on D, orthocenter(A, C, D), C, h we get h == altitude(D, C, orthocenter(A, C, D))
By sas_anti_similarity on C, F, H, C, E, H we get anti_similar_triangles(C, E, H, C, F, H)
By altitude_definition on A, D, orthocenter(A, C, D), g we get g == altitude(A, D, orthocenter(A, C, D))
By sas_similarity on E, C, I, D, C, A we get similar_triangles(A, C, D, I, C, E)
By sas_similarity on I, C, E, A, C, D we get similar_triangles(A, C, D, I, C, E)
By sas_anti_similarity on I, C, F, A, C, D we get anti_similar_triangles(A, C, D, I, C, F)
By sas_anti_similarity on A, C, D, I, C, F we get anti_similar_triangles(A, C, D, I, C, F)
By collinear_definition on orthocenter(A, C, D), D, F we get D in Line(F, orthocenter(A, C, D)), F in Line(D, orthocenter(A, C, D)), Line(D, orthocenter(A, C, D)) == Line(F, orthocenter(A, C, D)), 0 == 2 * angle(D, orthocenter(A, C, D), F) mod 360
By power_of_a_point_definition on C, D, I, Circle(A, D, F) we get log(distance(C, D)) + log(distance(C, I)) == log(power_of_a_point(C, Circle(A, D, F)))
By sas_anti_similarity on I, D, E, I, D, F we get anti_similar_triangles(D, E, I, D, F, I)
By sas_anti_similarity on I, C, E, I, C, F we get anti_similar_triangles(C, E, I, C, F, I)
By sas_anti_similarity on E, C, I, F, C, I we get anti_similar_triangles(C, E, I, C, F, I)
By sas_anti_similarity on I, C, F, I, C, E we get anti_similar_triangles(C, E, I, C, F, I)
By sas_anti_similarity on I, D, F, I, D, E we get anti_similar_triangles(D, E, I, D, F, I)
By power_of_a_point_definition on orthocenter(A, C, D), I, A, Circle(A, D, F) we get log(power_of_a_point(orthocenter(A, C, D), Circle(A, D, F))) == log(distance(I, orthocenter(A, C, D))) + log(distance(A, orthocenter(A, C, D)))
By sas_anti_similarity on F, D, I, E, D, I we get anti_similar_triangles(D, E, I, D, F, I)
By power_of_a_point_definition on orthocenter(A, C, D), F, D, Circle(A, D, F) we get log(power_of_a_point(orthocenter(A, C, D), Circle(A, D, F))) == log(distance(F, orthocenter(A, C, D))) + log(distance(D, orthocenter(A, C, D)))
By sas_anti_similarity on F, C, I, E, C, I we get anti_similar_triangles(C, E, I, C, F, I)
By sas_anti_similarity on E, D, I, F, D, I we get anti_similar_triangles(D, E, I, D, F, I)
By power_of_a_point_definition on orthocenter(A, C, D), F, D, Circle(C, D, E) we get log(power_of_a_point(orthocenter(A, C, D), Circle(C, D, E))) == log(distance(F, orthocenter(A, C, D))) + log(distance(D, orthocenter(A, C, D)))
By line_intersection_definition on E, Line(E, center(Circle(C, D, E))), Line(E, I) we get E == line_intersection(Line(E, I), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on center(Circle(C, D, E)), Line(F, center(Circle(C, D, E))), Line(C, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(C, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on I, Line(F, I), Line(E, I) we get I == line_intersection(Line(E, I), Line(F, I))
By line_intersection_definition on D, Line(D, center(Circle(C, D, E))), h we get D == line_intersection(h, Line(D, center(Circle(C, D, E))))
By line_intersection_definition on F, Line(F, I), Line(F, center(Circle(C, D, E))) we get F == line_intersection(Line(F, I), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on E, Line(E, F), Line(E, I) we get E == line_intersection(Line(E, F), Line(E, I))
By line_intersection_definition on C, altitude(C, A, D), Line(C, center(Circle(C, D, E))) we get C == line_intersection(altitude(C, A, D), Line(C, center(Circle(C, D, E))))
By line_intersection_definition on center(Circle(C, D, E)), Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on D, Line(D, F), Line(D, center(Circle(C, D, E))) we get D == line_intersection(Line(D, F), Line(D, center(Circle(C, D, E))))
By orthocenter_concurrency on C, orthocenter(A, C, D), A we get orthocenter(A, C, orthocenter(A, C, D)) in altitude(C, A, orthocenter(A, C, D)), orthocenter(A, C, orthocenter(A, C, D)) in altitude(orthocenter(A, C, D), A, C), orthocenter(A, C, orthocenter(A, C, D)) in altitude(A, C, orthocenter(A, C, D))
By line_intersection_definition on E, Line(D, E), Line(E, center(Circle(C, D, E))) we get E == line_intersection(Line(D, E), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on E, Line(E, F), Line(E, center(Circle(C, D, E))) we get E == line_intersection(Line(E, F), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on I, Line(A, I), Line(E, I) we get I == line_intersection(Line(A, I), Line(E, I))
By perpendicular_line_definition on I, j, Line(E, F) we get j == perpendicular_line(I, Line(E, F))
By line_intersection_definition on center(Circle(C, D, E)), Line(E, center(Circle(C, D, E))), Line(D, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on H, Line(A, H), Line(C, H) we get H == line_intersection(Line(A, H), Line(C, H))
By orthocenter_concurrency on D, C, orthocenter(A, C, D) we get orthocenter(C, D, orthocenter(A, C, D)) in altitude(D, C, orthocenter(A, C, D)), orthocenter(C, D, orthocenter(A, C, D)) in altitude(C, D, orthocenter(A, C, D)), orthocenter(C, D, orthocenter(A, C, D)) in altitude(orthocenter(A, C, D), C, D)
By line_intersection_definition on E, Line(E, H), Line(E, I) we get E == line_intersection(Line(E, H), Line(E, I))
By line_intersection_definition on E, Line(E, center(Circle(C, D, E))), f we get E == line_intersection(f, Line(E, center(Circle(C, D, E))))
By line_intersection_definition on C, f, Line(C, H) we get C == line_intersection(f, Line(C, H))
By line_intersection_definition on E, Line(A, E), Line(E, center(Circle(C, D, E))) we get E == line_intersection(Line(A, E), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on E, Line(E, I), Line(A, E) we get E == line_intersection(Line(A, E), Line(E, I))
By line_intersection_definition on H, Line(C, H), Line(F, H) we get H == line_intersection(Line(C, H), Line(F, H))
By line_intersection_definition on center(Circle(C, D, E)), Line(C, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(C, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on F, Line(F, center(Circle(C, D, E))), g we get F == line_intersection(g, Line(F, center(Circle(C, D, E))))
By perpendicular_line_definition on C, j, Line(E, F) we get j == perpendicular_line(C, Line(E, F))
By line_intersection_definition on C, g, Line(C, H) we get C == line_intersection(g, Line(C, H))
By line_intersection_definition on F, Line(F, center(Circle(C, D, E))), Line(F, H) we get F == line_intersection(Line(F, H), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on F, Line(E, F), Line(F, I) we get F == line_intersection(Line(E, F), Line(F, I))
By line_intersection_definition on C, altitude(C, A, D), Line(C, H) we get C == line_intersection(Line(C, H), altitude(C, A, D))
By line_intersection_definition on I, Line(F, I), Line(A, I) we get I == line_intersection(Line(A, I), Line(F, I))
By line_intersection_definition on C, Line(C, center(Circle(C, D, E))), g we get C == line_intersection(g, Line(C, center(Circle(C, D, E))))
By line_intersection_definition on E, Line(E, center(Circle(C, D, E))), Line(E, H) we get E == line_intersection(Line(E, H), Line(E, center(Circle(C, D, E))))
By perpendicular_line_definition on E, Line(E, F), j we get Line(E, F) == perpendicular_line(E, j)
By line_intersection_definition on H, Line(E, H), Line(C, H) we get H == line_intersection(Line(C, H), Line(E, H))
By line_intersection_definition on E, f, Line(E, I) we get E == line_intersection(f, Line(E, I))
By line_intersection_definition on H, Line(G, H), Line(C, H) we get H == line_intersection(Line(C, H), Line(G, H))
By orthocenter_concurrency on D, A, orthocenter(A, C, D) we get orthocenter(A, D, orthocenter(A, C, D)) in altitude(D, A, orthocenter(A, C, D)), orthocenter(A, D, orthocenter(A, C, D)) in altitude(A, D, orthocenter(A, C, D)), orthocenter(A, D, orthocenter(A, C, D)) in altitude(orthocenter(A, C, D), A, D)
By line_intersection_definition on I, Line(E, I), j we get I == line_intersection(j, Line(E, I))
By line_intersection_definition on D, Line(D, center(Circle(C, D, E))), i we get D == line_intersection(i, Line(D, center(Circle(C, D, E))))
By perpendicular_line_definition on D, j, Line(E, F) we get j == perpendicular_line(D, Line(E, F))
By line_intersection_definition on F, g, Line(F, I) we get F == line_intersection(g, Line(F, I))
By perpendicular_line_definition on F, Line(E, F), j we get Line(E, F) == perpendicular_line(F, j)
By line_intersection_definition on I, Line(F, I), j we get I == line_intersection(j, Line(F, I))
By line_intersection_definition on D, Line(D, E), Line(D, center(Circle(C, D, E))) we get D == line_intersection(Line(D, E), Line(D, center(Circle(C, D, E))))
By line_intersection_definition on F, Line(D, F), Line(F, I) we get F == line_intersection(Line(D, F), Line(F, I))
By line_intersection_definition on E, Line(E, I), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, I))
By line_intersection_definition on F, Line(F, I), Line(F, H) we get F == line_intersection(Line(F, H), Line(F, I))
By line_intersection_definition on F, Line(F, center(Circle(C, D, E))), Line(D, F) we get F == line_intersection(Line(D, F), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on F, Line(F, center(Circle(C, D, E))), Line(E, F) we get F == line_intersection(Line(E, F), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on C, Line(C, center(Circle(C, D, E))), f we get C == line_intersection(f, Line(C, center(Circle(C, D, E))))
By line_intersection_definition on center(Circle(C, D, E)), Line(D, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(D, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By perpendicular_direction_conditions_v0 on I, E, D, B we get perpendicular(Line(B, D), Line(E, I))
By same_angle_v1 on C, B, E, H we get angle(B, C, H) == angle(E, C, H) mod 360
By same_angle_converse_v1 on center(Circle(C, D, E)), D, C, F we get collinear(C, D, center(Circle(C, D, E)))
By perpendicular_direction_conditions_v0 on I, A, C, H we get perpendicular(Line(A, I), Line(C, H))
By same_angle_v3 on F, G, C, I we get angle(G, F, I) == angle(C, F, I) + 180 mod 360
By same_angle_v3 on E, C, B, I we get angle(C, E, I) == angle(B, E, I) + 180 mod 360
By perpendicular_direction_conditions_v0 on I, orthocenter(A, C, D), H, C we get perpendicular(Line(C, H), Line(I, orthocenter(A, C, D)))
By perpendicular_direction_conditions_v0 on A, orthocenter(A, C, D), C, H we get perpendicular(Line(C, H), Line(A, orthocenter(A, C, D)))
By same_angle_v0 on F, A, G, I we get angle(A, F, I) == angle(G, F, I) mod 360
By same_angle_v0 on C, F, A, H we get angle(A, C, H) == angle(F, C, H) mod 360
By perpendicular_direction_conditions_v0 on C, H, E, F we get perpendicular(Line(C, H), Line(E, F))
By same_angle_v0 on C, F, G, H we get angle(F, C, H) == angle(G, C, H) mod 360
By same_angle_v0 on C, G, A, H we get angle(A, C, H) == angle(G, C, H) mod 360
By projection_definition on C, line_intersection(h, altitude(C, A, D)), h we get projection(C, h) == line_intersection(h, altitude(C, A, D))
By projection_definition on D, line_intersection(h, altitude(C, A, D)), altitude(C, A, D) we get projection(D, altitude(C, A, D)) == line_intersection(h, altitude(C, A, D))
By projection_definition on orthocenter(A, C, D), line_intersection(h, altitude(C, A, D)), h we get projection(orthocenter(A, C, D), h) == line_intersection(h, altitude(C, A, D))
By projection_definition on A, line_intersection(h, altitude(C, A, D)), altitude(C, A, D) we get projection(A, altitude(C, A, D)) == line_intersection(h, altitude(C, A, D))
By circle_radius_v0_r on A, Circle(A, D, F) we get radius(Circle(A, D, F)) == distance(A, center(Circle(A, D, F)))
By circle_radius_v0_r on D, Circle(A, D, F) we get radius(Circle(A, D, F)) == distance(D, center(Circle(A, D, F)))
By circle_radius_v0_r on I, Circle(A, D, F) we get radius(Circle(A, D, F)) == distance(I, center(Circle(A, D, F)))
By parallel_line_definition on E, Line(E, F), Line(A, I) we get Line(E, F) == parallel_line(E, Line(A, I))
By parallel_line_definition on I, Line(A, I), Line(E, F) we get Line(A, I) == parallel_line(I, Line(E, F))
By parallel_line_definition on A, Line(A, I), Line(E, F) we get Line(A, I) == parallel_line(A, Line(E, F))
By parallel_line_definition on F, Line(E, F), Line(A, I) we get Line(E, F) == parallel_line(F, Line(A, I))
By parallel_line_definition on orthocenter(A, C, D), Line(A, I), Line(E, F) we get Line(A, I) == parallel_line(orthocenter(A, C, D), Line(E, F))
By circle_radius_v0_r on F, Circle(A, D, F) we get radius(Circle(A, D, F)) == distance(F, center(Circle(A, D, F)))
By angle_to_center on D, F, I, Circle(A, D, F) we get 2 * angle(D, F, I) == angle(D, center(Circle(A, D, F)), I) mod 360
By angle_to_center on F, I, A, Circle(A, D, F) we get 2 * angle(F, I, A) == angle(F, center(Circle(A, D, F)), A) mod 360
By angle_to_center on D, I, F, Circle(A, D, F) we get 2 * angle(D, I, F) == angle(D, center(Circle(A, D, F)), F) mod 360
By angle_to_center on A, I, F, Circle(A, D, F) we get 2 * angle(A, I, F) == angle(A, center(Circle(A, D, F)), F) mod 360
By angle_to_center on D, F, A, Circle(A, D, F) we get 2 * angle(D, F, A) == angle(D, center(Circle(A, D, F)), A) mod 360
By angle_to_center on F, A, I, Circle(A, D, F) we get 2 * angle(F, A, I) == angle(F, center(Circle(A, D, F)), I) mod 360
By angle_to_center on D, I, A, Circle(A, D, F) we get 2 * angle(D, I, A) == angle(D, center(Circle(A, D, F)), A) mod 360
By angle_to_center on A, F, I, Circle(A, D, F) we get 2 * angle(A, F, I) == angle(A, center(Circle(A, D, F)), I) mod 360
By angle_to_center on D, A, I, Circle(A, D, F) we get 2 * angle(D, A, I) == angle(D, center(Circle(A, D, F)), I) mod 360
By angle_to_center on I, A, F, Circle(A, D, F) we get 2 * angle(I, A, F) == angle(I, center(Circle(A, D, F)), F) mod 360
By angle_to_center on A, D, F, Circle(A, D, F) we get 2 * angle(A, D, F) == angle(A, center(Circle(A, D, F)), F) mod 360
By angle_to_center on A, D, I, Circle(A, D, F) we get 2 * angle(A, D, I) == angle(A, center(Circle(A, D, F)), I) mod 360
By angle_to_center on I, D, F, Circle(A, D, F) we get 2 * angle(I, D, F) == angle(I, center(Circle(A, D, F)), F) mod 360
By angle_to_center on F, A, D, Circle(A, D, F) we get 2 * angle(F, A, D) == angle(F, center(Circle(A, D, F)), D) mod 360
By angle_to_center on F, I, D, Circle(A, D, F) we get 2 * angle(F, I, D) == angle(F, center(Circle(A, D, F)), D) mod 360
By angle_to_center on F, D, A, Circle(A, D, F) we get 2 * angle(F, D, A) == angle(F, center(Circle(A, D, F)), A) mod 360
By angle_to_center on D, A, F, Circle(A, D, F) we get 2 * angle(D, A, F) == angle(D, center(Circle(A, D, F)), F) mod 360
By angle_to_center on F, D, I, Circle(A, D, F) we get 2 * angle(F, D, I) == angle(F, center(Circle(A, D, F)), I) mod 360
By angle_to_center on I, D, A, Circle(A, D, F) we get 2 * angle(I, D, A) == angle(I, center(Circle(A, D, F)), A) mod 360
By angle_to_center on A, I, D, Circle(A, D, F) we get 2 * angle(A, I, D) == angle(A, center(Circle(A, D, F)), D) mod 360
By angle_to_center on A, F, D, Circle(A, D, F) we get 2 * angle(A, F, D) == angle(A, center(Circle(A, D, F)), D) mod 360
By angle_to_center on I, F, A, Circle(A, D, F) we get 2 * angle(I, F, A) == angle(I, center(Circle(A, D, F)), A) mod 360
By angle_to_center on I, A, D, Circle(A, D, F) we get 2 * angle(I, A, D) == angle(I, center(Circle(A, D, F)), D) mod 360
By angle_to_center on I, F, D, Circle(A, D, F) we get 2 * angle(I, F, D) == angle(I, center(Circle(A, D, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on C, orthocenter(A, C, D), line_intersection(h, altitude(C, A, D)), A we get 180 == 2 * direction(C, orthocenter(A, C, D)) - 2 * direction(line_intersection(h, altitude(C, A, D)), A) mod 360
By perpendicular_direction_conditions_v0_r on C, orthocenter(A, C, D), A, line_intersection(h, altitude(C, A, D)) we get 180 == 2 * direction(C, orthocenter(A, C, D)) - 2 * direction(A, line_intersection(h, altitude(C, A, D))) mod 360
By divide_by_2_mod_180_v1 on F, A, E, C, H, E we get angle(C, H, E) == angle(F, A, E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), C, line_intersection(h, altitude(C, A, D)), D we get 180 == 2 * direction(orthocenter(A, C, D), C) - 2 * direction(line_intersection(h, altitude(C, A, D)), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(C, A, D)), C, A, D we get 180 == 2 * direction(line_intersection(h, altitude(C, A, D)), C) - 2 * direction(A, D) mod 360
By divide_by_2_mod_180_v3 on A, I, F, B, D, C we get angle(A, I, F) == angle(B, D, C) + 180 mod 360
By divide_by_2_mod_180_v0 on H, C, E, D, F, E we get angle(D, F, E) == angle(H, C, E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), line_intersection(h, altitude(C, A, D)), A, D we get 180 == 2 * direction(orthocenter(A, C, D), line_intersection(h, altitude(C, A, D))) - 2 * direction(A, D) mod 360
By divide_by_2_mod_180_v0 on I, F, D, D, B, A we get angle(D, B, A) == angle(I, F, D) mod 360
By perpendicular_direction_conditions_v0_r on A, D, C, line_intersection(h, altitude(C, A, D)) we get 180 == 2 * direction(A, D) - 2 * direction(C, line_intersection(h, altitude(C, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on A, D, line_intersection(h, altitude(C, A, D)), C we get 180 == 2 * direction(A, D) - 2 * direction(line_intersection(h, altitude(C, A, D)), C) mod 360
By perpendicular_direction_conditions_v0_r on C, orthocenter(A, C, D), line_intersection(h, altitude(C, A, D)), D we get 180 == 2 * direction(C, orthocenter(A, C, D)) - 2 * direction(line_intersection(h, altitude(C, A, D)), D) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(h, altitude(C, A, D)), A, D we get 180 == 2 * direction(C, line_intersection(h, altitude(C, A, D))) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(C, A, D)), D, orthocenter(A, C, D), C we get 180 == 2 * direction(line_intersection(h, altitude(C, A, D)), D) - 2 * direction(orthocenter(A, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on D, A, C, line_intersection(h, altitude(C, A, D)) we get 180 == 2 * direction(D, A) - 2 * direction(C, line_intersection(h, altitude(C, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on A, D, line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D) we get 180 == 2 * direction(A, D) - 2 * direction(line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D), C we get 180 == 2 * direction(D, line_intersection(h, altitude(C, A, D))) - 2 * direction(orthocenter(A, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D), D, A we get 180 == 2 * direction(line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D)) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on C, orthocenter(A, C, D), D, line_intersection(h, altitude(C, A, D)) we get 180 == 2 * direction(C, orthocenter(A, C, D)) - 2 * direction(D, line_intersection(h, altitude(C, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(C, A, D)), A, orthocenter(A, C, D), C we get 180 == 2 * direction(line_intersection(h, altitude(C, A, D)), A) - 2 * direction(orthocenter(A, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(C, A, D)), C, D, A we get 180 == 2 * direction(line_intersection(h, altitude(C, A, D)), C) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on A, D, orthocenter(A, C, D), line_intersection(h, altitude(C, A, D)) we get 180 == 2 * direction(A, D) - 2 * direction(orthocenter(A, C, D), line_intersection(h, altitude(C, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D), A, D we get 180 == 2 * direction(line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D)) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), line_intersection(h, altitude(C, A, D)), D, A we get 180 == 2 * direction(orthocenter(A, C, D), line_intersection(h, altitude(C, A, D))) - 2 * direction(D, A) mod 360
By divide_by_2_mod_180_v0 on D, E, I, E, B, D we get angle(D, E, I) == angle(E, B, D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), C, line_intersection(h, altitude(C, A, D)), A we get 180 == 2 * direction(orthocenter(A, C, D), C) - 2 * direction(line_intersection(h, altitude(C, A, D)), A) mod 360
By divide_by_2_mod_180_v1 on H, C, F, D, C, F we get angle(D, C, F) == angle(H, C, F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(C, A, D)), D, C, orthocenter(A, C, D) we get 180 == 2 * direction(line_intersection(h, altitude(C, A, D)), D) - 2 * direction(C, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, A, line_intersection(h, altitude(C, A, D)), C we get 180 == 2 * direction(D, A) - 2 * direction(line_intersection(h, altitude(C, A, D)), C) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(h, altitude(C, A, D)), C, orthocenter(A, C, D) we get 180 == 2 * direction(A, line_intersection(h, altitude(C, A, D))) - 2 * direction(C, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), C, A, line_intersection(h, altitude(C, A, D)) we get 180 == 2 * direction(orthocenter(A, C, D), C) - 2 * direction(A, line_intersection(h, altitude(C, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(C, A, D)), A, C, orthocenter(A, C, D) we get 180 == 2 * direction(line_intersection(h, altitude(C, A, D)), A) - 2 * direction(C, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(h, altitude(C, A, D)), C, orthocenter(A, C, D) we get 180 == 2 * direction(D, line_intersection(h, altitude(C, A, D))) - 2 * direction(C, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), C, D, line_intersection(h, altitude(C, A, D)) we get 180 == 2 * direction(orthocenter(A, C, D), C) - 2 * direction(D, line_intersection(h, altitude(C, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D), C we get 180 == 2 * direction(A, line_intersection(h, altitude(C, A, D))) - 2 * direction(orthocenter(A, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on D, A, line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D) we get 180 == 2 * direction(D, A) - 2 * direction(line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(h, altitude(C, A, D)), D, A we get 180 == 2 * direction(C, line_intersection(h, altitude(C, A, D))) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on D, A, orthocenter(A, C, D), line_intersection(h, altitude(C, A, D)) we get 180 == 2 * direction(D, A) - 2 * direction(orthocenter(A, C, D), line_intersection(h, altitude(C, A, D))) mod 360
By divide_by_2_mod_180_v0 on H, A, E, H, C, E we get angle(H, A, E) == angle(H, C, E) mod 360
By divide_by_2_mod_180_v0 on F, C, H, G, C, I we get angle(F, C, H) == angle(G, C, I) mod 360
By divide_by_2_mod_180_v1 on D, A, I, D, B, E we get angle(D, A, I) == angle(D, B, E) mod 360
By divide_by_2_mod_180_v0 on I, C, B, F, C, H we get angle(F, C, H) == angle(I, C, B) mod 360
By divide_by_2_mod_180_v0 on F, C, I, F, C, H we get angle(F, C, H) == angle(F, C, I) mod 360
By divide_by_2_mod_180_v3 on C, D, B, F, D, A we get angle(C, D, B) == angle(F, D, A) + 180 mod 360
By divide_by_2_mod_180_v0 on F, C, H, F, E, D we get angle(F, C, H) == angle(F, E, D) mod 360
By divide_by_2_mod_180_v0 on H, C, E, F, C, D we get angle(F, C, D) == angle(H, C, E) mod 360
By parallel_line_angles_reverse_v1 on E, F, I, A we get angle(A, I, F) == angle(E, F, I) mod 360
By divide_by_2_mod_180_v1 on H, C, F, E, C, I we get angle(E, C, I) == angle(H, C, F) mod 360
By divide_by_2_mod_180_v0 on D, B, A, I, A, D we get angle(D, B, A) == angle(I, A, D) mod 360
By divide_by_2_mod_180_v1 on E, C, H, I, C, A we get angle(E, C, H) == angle(I, C, A) mod 360
By divide_by_2_mod_180_v1 on C, H, E, G, A, E we get angle(C, H, E) == angle(G, A, E) mod 360
By divide_by_2_mod_180_v0 on F, C, D, F, C, H we get angle(F, C, D) == angle(F, C, H) mod 360
By internal_angle_bisector_definition_v0_r on F, H, E, C we get Line(C, H) == internal_angle_bisector(E, C, F)
By divide_by_2_mod_180_v0 on H, C, E, D, C, B we get angle(D, C, B) == angle(H, C, E) mod 360
By divide_by_2_mod_180_v1 on E, C, H, H, E, A we get angle(E, C, H) == angle(H, E, A) mod 360
By divide_by_2_mod_180_v1 on A, I, F, B, D, I we get angle(A, I, F) == angle(B, D, I) mod 360
By divide_by_2_mod_180_v0 on C, B, D, D, E, I we get angle(C, B, D) == angle(D, E, I) mod 360
By divide_by_2_mod_180_v0 on I, A, D, E, B, D we get angle(E, B, D) == angle(I, A, D) mod 360
By divide_by_2_mod_180_v1 on H, C, F, D, C, G we get angle(D, C, G) == angle(H, C, F) mod 360
By divide_by_2_mod_180_v1 on D, A, I, D, B, C we get angle(D, A, I) == angle(D, B, C) mod 360
By divide_by_2_mod_180_v1 on E, C, H, I, C, G we get angle(E, C, H) == angle(I, C, G) mod 360
By divide_by_2_mod_180_v1 on E, C, D, E, C, H we get angle(E, C, D) == angle(E, C, H) mod 360
By divide_by_2_mod_180_v0 on A, C, I, F, C, H we get angle(A, C, I) == angle(F, C, H) mod 360
By divide_by_2_mod_180_v1 on A, B, D, D, F, I we get angle(A, B, D) == angle(D, F, I) mod 360
By divide_by_2_mod_180_v1 on H, E, A, H, C, F we get angle(H, C, F) == angle(H, E, A) mod 360
By divide_by_2_mod_180_v0 on F, C, H, H, A, E we get angle(F, C, H) == angle(H, A, E) mod 360
By anti_congruence_from_anti_similar_triangles on C, I, F, C, I, E we get anti_congruent_triangles(C, E, I, C, F, I)
By divide_by_2_mod_180_v0 on F, E, D, H, C, E we get angle(F, E, D) == angle(H, C, E) mod 360
By divide_by_2_mod_180_v0 on I, F, D, E, B, D we get angle(E, B, D) == angle(I, F, D) mod 360
By divide_by_2_mod_180_v1 on H, C, F, B, C, D we get angle(B, C, D) == angle(H, C, F) mod 360
By divide_by_2_mod_180_v1 on A, B, D, D, A, I we get angle(A, B, D) == angle(D, A, I) mod 360
By divide_by_2_mod_180_v0 on H, C, E, A, C, D we get angle(A, C, D) == angle(H, C, E) mod 360
By divide_by_2_mod_180_v0 on E, A, G, E, H, C we get angle(E, A, G) == angle(E, H, C) mod 360
By divide_by_2_mod_180_v0 on H, C, E, I, C, B we get angle(H, C, E) == angle(I, C, B) mod 360
By divide_by_2_mod_180_v1 on B, C, I, H, C, F we get angle(B, C, I) == angle(H, C, F) mod 360
By divide_by_2_mod_180_v3 on A, D, F, B, D, C we get angle(A, D, F) == angle(B, D, C) + 180 mod 360
By divide_by_2_mod_180_v1 on E, C, H, I, C, F we get angle(E, C, H) == angle(I, C, F) mod 360
By divide_by_2_mod_180_v0 on C, B, D, I, A, D we get angle(C, B, D) == angle(I, A, D) mod 360
By divide_by_2_mod_180_v1 on E, C, H, E, C, I we get angle(E, C, H) == angle(E, C, I) mod 360
By divide_by_2_mod_180_v0 on H, C, E, A, E, H we get angle(A, E, H) == angle(H, C, E) mod 360
By divide_by_2_mod_180_v0 on I, D, B, F, D, A we get angle(F, D, A) == angle(I, D, B) mod 360
By divide_by_2_mod_180_v0 on I, C, E, H, C, E we get angle(H, C, E) == angle(I, C, E) mod 360
By divide_by_2_mod_180_v1 on H, C, F, E, C, D we get angle(E, C, D) == angle(H, C, F) mod 360
By divide_by_2_mod_180_v0 on A, C, I, H, C, E we get angle(A, C, I) == angle(H, C, E) mod 360
By divide_by_2_mod_180_v1 on I, E, D, A, B, D we get angle(A, B, D) == angle(I, E, D) mod 360
By divide_by_2_mod_180_v0 on E, A, C, E, H, C we get angle(E, A, C) == angle(E, H, C) mod 360
By divide_by_2_mod_180_v0 on F, C, H, D, F, E we get angle(D, F, E) == angle(F, C, H) mod 360
By divide_by_2_mod_180_v1 on D, C, G, E, C, H we get angle(D, C, G) == angle(E, C, H) mod 360
By divide_by_2_mod_180_v0 on C, B, D, I, F, D we get angle(C, B, D) == angle(I, F, D) mod 360
By divide_by_2_mod_180_v1 on B, D, I, A, D, F we get angle(A, D, F) == angle(B, D, I) mod 360
By divide_by_2_mod_180_v1 on E, C, H, E, F, D we get angle(E, C, H) == angle(E, F, D) mod 360
By divide_by_2_mod_180_v0 on I, D, B, F, I, A we get angle(F, I, A) == angle(I, D, B) mod 360
By divide_by_2_mod_180_v1 on F, H, C, G, A, E we get angle(F, H, C) == angle(G, A, E) mod 360
By divide_by_2_mod_180_v1 on E, C, H, B, C, I we get angle(B, C, I) == angle(E, C, H) mod 360
By divide_by_2_mod_180_v0 on D, C, E, F, C, H we get angle(D, C, E) == angle(F, C, H) mod 360
By divide_by_2_mod_180_v0 on H, C, E, F, C, I we get angle(F, C, I) == angle(H, C, E) mod 360
By divide_by_2_mod_180_v1 on I, C, F, H, C, F we get angle(H, C, F) == angle(I, C, F) mod 360
By divide_by_2_mod_180_v1 on I, C, G, H, C, F we get angle(H, C, F) == angle(I, C, G) mod 360
By divide_by_2_mod_180_v0 on D, C, B, F, C, H we get angle(D, C, B) == angle(F, C, H) mod 360
By divide_by_2_mod_180_v1 on E, C, H, B, C, D we get angle(B, C, D) == angle(E, C, H) mod 360
By divide_by_2_mod_180_v1 on H, C, F, D, E, F we get angle(D, E, F) == angle(H, C, F) mod 360
By divide_by_2_mod_180_v1 on E, C, H, E, A, H we get angle(E, A, H) == angle(E, C, H) mod 360
By divide_by_2_mod_180_v0 on H, C, E, D, C, E we get angle(D, C, E) == angle(H, C, E) mod 360
By divide_by_2_mod_180_v0 on A, E, H, F, C, H we get angle(A, E, H) == angle(F, C, H) mod 360
By divide_by_2_mod_180_v1 on D, C, A, E, C, H we get angle(D, C, A) == angle(E, C, H) mod 360
By divide_by_2_mod_180_v1 on D, B, E, I, E, D we get angle(D, B, E) == angle(I, E, D) mod 360
By divide_by_2_mod_180_v1 on D, F, I, D, B, E we get angle(D, B, E) == angle(D, F, I) mod 360
By divide_by_2_mod_180_v0 on E, A, C, C, H, F we get angle(C, H, F) == angle(E, A, C) mod 360
By anti_congruence_from_anti_similar_triangles on I, C, E, I, C, F we get anti_congruent_triangles(C, E, I, C, F, I)
By divide_by_2_mod_180_v0 on F, C, H, A, C, D we get angle(A, C, D) == angle(F, C, H) mod 360
By divide_by_2_mod_180_v0 on F, C, H, G, C, D we get angle(F, C, H) == angle(G, C, D) mod 360
By reverse_direction on D, orthocenter(A, C, D) we get 180 == direction(D, orthocenter(A, C, D)) - direction(orthocenter(A, C, D), D) mod 360
By divide_by_2_mod_180_v0 on I, C, E, F, C, H we get angle(F, C, H) == angle(I, C, E) mod 360
By divide_by_2_mod_180_v0 on E, A, G, C, H, F we get angle(C, H, F) == angle(E, A, G) mod 360
By divide_by_2_mod_180_v1 on I, C, A, H, C, F we get angle(H, C, F) == angle(I, C, A) mod 360
By divide_by_2_mod_180_v1 on E, C, H, D, E, F we get angle(D, E, F) == angle(E, C, H) mod 360
By divide_by_2_mod_180_v1 on C, A, E, F, H, C we get angle(C, A, E) == angle(F, H, C) mod 360
By divide_by_2_mod_180_v0 on G, C, D, H, C, E we get angle(G, C, D) == angle(H, C, E) mod 360
By divide_by_2_mod_180_v1 on D, B, C, D, F, I we get angle(D, B, C) == angle(D, F, I) mod 360
By divide_by_2_mod_180_v1 on E, F, D, H, C, F we get angle(E, F, D) == angle(H, C, F) mod 360
By divide_by_2_mod_180_v1 on C, H, E, C, A, E we get angle(C, A, E) == angle(C, H, E) mod 360
By divide_by_2_mod_180_v1 on E, A, H, H, C, F we get angle(E, A, H) == angle(H, C, F) mod 360
By parallel_line_angles_reverse_v0 on I, A, E, F we get angle(F, E, A) == angle(I, A, E) mod 360
By divide_by_2_mod_180_v0 on C, H, F, E, A, F we get angle(C, H, F) == angle(E, A, F) mod 360
By reverse_direction on orthocenter(A, C, D), I we get 180 == direction(orthocenter(A, C, D), I) - direction(I, orthocenter(A, C, D)) mod 360
By divide_by_2_mod_180_v2 on F, I, A, C, D, B we get angle(F, I, A) == angle(C, D, B) + 180 mod 360
By divide_by_2_mod_180_v2 on F, D, A, C, D, B we get angle(F, D, A) == angle(C, D, B) + 180 mod 360
By parallel_line_angles_reverse_v3 on A, I, E, F we get angle(A, I, E) == angle(F, E, I) + 180 mod 360
By divide_by_2_mod_180_v0 on E, H, C, E, A, F we get angle(E, A, F) == angle(E, H, C) mod 360
By divide_by_2_mod_180_v1 on D, C, F, E, C, H we get angle(D, C, F) == angle(E, C, H) mod 360
By asa_anti_congruence on D, I, E, D, I, F we get anti_congruent_triangles(D, E, I, D, F, I)
By divide_by_2_mod_180_v1 on F, A, E, F, H, C we get angle(F, A, E) == angle(F, H, C) mod 360
By anti_congruence_from_anti_similar_triangles on I, D, F, I, D, E we get anti_congruent_triangles(D, E, I, D, F, I)
By reverse_direction on orthocenter(A, C, D), C we get 180 == direction(orthocenter(A, C, D), C) - direction(C, orthocenter(A, C, D)) mod 360
By divide_by_2_mod_180_v3 on C, D, B, F, I, A we get angle(C, D, B) == angle(F, I, A) + 180 mod 360
By asa_anti_congruence on C, I, E, C, I, F we get anti_congruent_triangles(C, E, I, C, F, I)
By divide_by_2_mod_180_v0 on D, E, I, D, B, A we get angle(D, B, A) == angle(D, E, I) mod 360
By reverse_direction on orthocenter(A, C, D), A we get 180 == direction(orthocenter(A, C, D), A) - direction(A, orthocenter(A, C, D)) mod 360
By divide_by_2_mod_180_v1 on D, B, C, I, E, D we get angle(D, B, C) == angle(I, E, D) mod 360
By divide_by_2_mod_180_v2 on B, D, C, A, D, F we get angle(B, D, C) == angle(A, D, F) + 180 mod 360
By reverse_direction on orthocenter(A, C, D), D we get 180 == direction(orthocenter(A, C, D), D) - direction(D, orthocenter(A, C, D)) mod 360
By divide_by_2_mod_180_v0 on H, C, E, G, C, I we get angle(G, C, I) == angle(H, C, E) mod 360
By divide_by_2_mod_180_v1 on D, C, A, H, C, F we get angle(D, C, A) == angle(H, C, F) mod 360
By anti_congruence_from_anti_similar_triangles on I, C, F, I, C, E we get anti_congruent_triangles(C, E, I, C, F, I)
By divide_by_2_mod_180_v2 on B, D, C, A, I, F we get angle(B, D, C) == angle(A, I, F) + 180 mod 360
By asa_anti_congruence on D, I, F, D, I, E we get anti_congruent_triangles(D, E, I, D, F, I)
By anti_congruence_from_anti_similar_triangles on D, I, F, D, I, E we get anti_congruent_triangles(D, E, I, D, F, I)
By parallel_line_angles_reverse_v2 on F, E, I, A we get angle(F, E, I) == angle(A, I, E) + 180 mod 360
By anti_congruence_from_anti_similar_triangles on I, D, E, I, D, F we get anti_congruent_triangles(D, E, I, D, F, I)
By asa_anti_congruence on I, D, E, I, D, F we get anti_congruent_triangles(D, E, I, D, F, I)
By asa_anti_congruence on C, I, F, C, I, E we get anti_congruent_triangles(C, E, I, C, F, I)
By reverse_direction on H, C we get 180 == direction(H, C) - direction(C, H) mod 360
By asa_anti_congruence on I, D, F, I, D, E we get anti_congruent_triangles(D, E, I, D, F, I)
By asa_anti_congruence on I, C, F, I, C, E we get anti_congruent_triangles(C, E, I, C, F, I)
By asa_anti_congruence on I, C, E, I, C, F we get anti_congruent_triangles(C, E, I, C, F, I)
By reverse_direction on C, H we get 180 == direction(C, H) - direction(H, C) mod 360
By reverse_direction on A, orthocenter(A, C, D) we get 180 == direction(A, orthocenter(A, C, D)) - direction(orthocenter(A, C, D), A) mod 360
By reverse_direction on orthocenter(A, C, D), F we get 180 == direction(orthocenter(A, C, D), F) - direction(F, orthocenter(A, C, D)) mod 360
By anti_congruence_from_anti_similar_triangles on D, I, E, D, I, F we get anti_congruent_triangles(D, E, I, D, F, I)
By reverse_direction on I, orthocenter(A, C, D) we get 180 == direction(I, orthocenter(A, C, D)) - direction(orthocenter(A, C, D), I) mod 360
By reverse_direction on F, orthocenter(A, C, D) we get 180 == direction(F, orthocenter(A, C, D)) - direction(orthocenter(A, C, D), F) mod 360
By anti_congruence_from_anti_similar_triangles on C, I, E, C, I, F we get anti_congruent_triangles(C, E, I, C, F, I)
By reverse_direction on C, orthocenter(A, C, D) we get 180 == direction(C, orthocenter(A, C, D)) - direction(orthocenter(A, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(C, A, D)), A, orthocenter(A, C, D), line_intersection(h, altitude(C, A, D)) we get 180 == 2 * direction(line_intersection(h, altitude(C, A, D)), A) - 2 * direction(orthocenter(A, C, D), line_intersection(h, altitude(C, A, D))) mod 360
By reverse_direction on center(Circle(C, D, E)), C we get 180 == direction(center(Circle(C, D, E)), C) - direction(C, center(Circle(C, D, E))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), line_intersection(h, altitude(C, A, D)), line_intersection(h, altitude(C, A, D)), D we get 180 == 2 * direction(orthocenter(A, C, D), line_intersection(h, altitude(C, A, D))) - 2 * direction(line_intersection(h, altitude(C, A, D)), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(C, A, D)), C, line_intersection(h, altitude(C, A, D)), A we get 180 == 2 * direction(line_intersection(h, altitude(C, A, D)), C) - 2 * direction(line_intersection(h, altitude(C, A, D)), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(C, A, D)), A, line_intersection(h, altitude(C, A, D)), C we get 180 == 2 * direction(line_intersection(h, altitude(C, A, D)), A) - 2 * direction(line_intersection(h, altitude(C, A, D)), C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), line_intersection(h, altitude(C, A, D)), A, line_intersection(h, altitude(C, A, D)) we get 180 == 2 * direction(orthocenter(A, C, D), line_intersection(h, altitude(C, A, D))) - 2 * direction(A, line_intersection(h, altitude(C, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(h, altitude(C, A, D)), A, line_intersection(h, altitude(C, A, D)) we get 180 == 2 * direction(C, line_intersection(h, altitude(C, A, D))) - 2 * direction(A, line_intersection(h, altitude(C, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(C, A, D)), D, line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D) we get 180 == 2 * direction(line_intersection(h, altitude(C, A, D)), D) - 2 * direction(line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D), line_intersection(h, altitude(C, A, D)) we get 180 == 2 * direction(A, line_intersection(h, altitude(C, A, D))) - 2 * direction(orthocenter(A, C, D), line_intersection(h, altitude(C, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(C, A, D)), A, line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D) we get 180 == 2 * direction(line_intersection(h, altitude(C, A, D)), A) - 2 * direction(line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(h, altitude(C, A, D)), line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D) we get 180 == 2 * direction(D, line_intersection(h, altitude(C, A, D))) - 2 * direction(line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D), A, line_intersection(h, altitude(C, A, D)) we get 180 == 2 * direction(line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D)) - 2 * direction(A, line_intersection(h, altitude(C, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(C, A, D)), C, A, line_intersection(h, altitude(C, A, D)) we get 180 == 2 * direction(line_intersection(h, altitude(C, A, D)), C) - 2 * direction(A, line_intersection(h, altitude(C, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(C, A, D)), D, orthocenter(A, C, D), line_intersection(h, altitude(C, A, D)) we get 180 == 2 * direction(line_intersection(h, altitude(C, A, D)), D) - 2 * direction(orthocenter(A, C, D), line_intersection(h, altitude(C, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(h, altitude(C, A, D)), line_intersection(h, altitude(C, A, D)), C we get 180 == 2 * direction(A, line_intersection(h, altitude(C, A, D))) - 2 * direction(line_intersection(h, altitude(C, A, D)), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(C, A, D)), C, D, line_intersection(h, altitude(C, A, D)) we get 180 == 2 * direction(line_intersection(h, altitude(C, A, D)), C) - 2 * direction(D, line_intersection(h, altitude(C, A, D))) mod 360
By concyclic_definition_0 on A, E, H, C we get C in Circle(A, E, H)
By perpendicular_direction_conditions_v0_r on D, line_intersection(h, altitude(C, A, D)), line_intersection(h, altitude(C, A, D)), C we get 180 == 2 * direction(D, line_intersection(h, altitude(C, A, D))) - 2 * direction(line_intersection(h, altitude(C, A, D)), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(C, A, D)), D, line_intersection(h, altitude(C, A, D)), C we get 180 == 2 * direction(line_intersection(h, altitude(C, A, D)), D) - 2 * direction(line_intersection(h, altitude(C, A, D)), C) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(h, altitude(C, A, D)), line_intersection(h, altitude(C, A, D)), D we get 180 == 2 * direction(C, line_intersection(h, altitude(C, A, D))) - 2 * direction(line_intersection(h, altitude(C, A, D)), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D), line_intersection(h, altitude(C, A, D)), A we get 180 == 2 * direction(line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D)) - 2 * direction(line_intersection(h, altitude(C, A, D)), A) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(h, altitude(C, A, D)), line_intersection(h, altitude(C, A, D)), A we get 180 == 2 * direction(C, line_intersection(h, altitude(C, A, D))) - 2 * direction(line_intersection(h, altitude(C, A, D)), A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), line_intersection(h, altitude(C, A, D)), D, line_intersection(h, altitude(C, A, D)) we get 180 == 2 * direction(orthocenter(A, C, D), line_intersection(h, altitude(C, A, D))) - 2 * direction(D, line_intersection(h, altitude(C, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), line_intersection(h, altitude(C, A, D)), line_intersection(h, altitude(C, A, D)), A we get 180 == 2 * direction(orthocenter(A, C, D), line_intersection(h, altitude(C, A, D))) - 2 * direction(line_intersection(h, altitude(C, A, D)), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(C, A, D)), C, line_intersection(h, altitude(C, A, D)), D we get 180 == 2 * direction(line_intersection(h, altitude(C, A, D)), C) - 2 * direction(line_intersection(h, altitude(C, A, D)), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D), D, line_intersection(h, altitude(C, A, D)) we get 180 == 2 * direction(line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D)) - 2 * direction(D, line_intersection(h, altitude(C, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D), line_intersection(h, altitude(C, A, D)) we get 180 == 2 * direction(D, line_intersection(h, altitude(C, A, D))) - 2 * direction(orthocenter(A, C, D), line_intersection(h, altitude(C, A, D))) mod 360
By external_angle_bisector_definition_v0_r on orthocenter(A, C, D), D, orthocenter(A, C, D), I we get Line(D, I) == external_angle_bisector(orthocenter(A, C, D), I, orthocenter(A, C, D))
By perpendicular_direction_conditions_v0_r on A, line_intersection(h, altitude(C, A, D)), line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D) we get 180 == 2 * direction(A, line_intersection(h, altitude(C, A, D))) - 2 * direction(line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(h, altitude(C, A, D)), C, line_intersection(h, altitude(C, A, D)) we get 180 == 2 * direction(A, line_intersection(h, altitude(C, A, D))) - 2 * direction(C, line_intersection(h, altitude(C, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(h, altitude(C, A, D)), C, line_intersection(h, altitude(C, A, D)) we get 180 == 2 * direction(D, line_intersection(h, altitude(C, A, D))) - 2 * direction(C, line_intersection(h, altitude(C, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D), line_intersection(h, altitude(C, A, D)), D we get 180 == 2 * direction(line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D)) - 2 * direction(line_intersection(h, altitude(C, A, D)), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(C, A, D)), A, C, line_intersection(h, altitude(C, A, D)) we get 180 == 2 * direction(line_intersection(h, altitude(C, A, D)), A) - 2 * direction(C, line_intersection(h, altitude(C, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(C, A, D)), D, C, line_intersection(h, altitude(C, A, D)) we get 180 == 2 * direction(line_intersection(h, altitude(C, A, D)), D) - 2 * direction(C, line_intersection(h, altitude(C, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(h, altitude(C, A, D)), D, line_intersection(h, altitude(C, A, D)) we get 180 == 2 * direction(C, line_intersection(h, altitude(C, A, D))) - 2 * direction(D, line_intersection(h, altitude(C, A, D))) mod 360
By internal_angle_bisector_definition_v0 on B, line_intersection(h, altitude(C, A, D)), G, A we get angle(B, A, line_intersection(h, altitude(C, A, D))) == angle(line_intersection(h, altitude(C, A, D)), A, G) mod 360
By external_angle_bisector_definition_v0_r on orthocenter(A, C, D), A, orthocenter(A, C, D), F we get Line(A, F) == external_angle_bisector(orthocenter(A, C, D), F, orthocenter(A, C, D))
By concyclic_definition_0 on A, H, C, E we get E in Circle(A, C, H)
By concyclic_definition_0 on C, A, E, H we get H in Circle(A, C, E)
By internal_angle_bisector_definition_v0_r on orthocenter(A, C, D), A, orthocenter(A, C, D), I we get Line(A, I) == internal_angle_bisector(orthocenter(A, C, D), I, orthocenter(A, C, D))
By internal_angle_bisector_definition_v0_r on orthocenter(A, C, D), D, orthocenter(A, C, D), F we get Line(D, F) == internal_angle_bisector(orthocenter(A, C, D), F, orthocenter(A, C, D))
By external_angle_bisector_definition_v0_r on orthocenter(A, C, D), G, orthocenter(A, C, D), F we get Line(F, G) == external_angle_bisector(orthocenter(A, C, D), F, orthocenter(A, C, D))
By collinear_definition on C, orthocenter(A, C, D), line_intersection(h, altitude(C, A, D)) we get orthocenter(A, C, D) in Line(C, line_intersection(h, altitude(C, A, D))), line_intersection(h, altitude(C, A, D)) in Line(C, orthocenter(A, C, D)), Line(C, orthocenter(A, C, D)) == Line(C, line_intersection(h, altitude(C, A, D))), 0 == 2 * angle(orthocenter(A, C, D), C, line_intersection(h, altitude(C, A, D))) mod 360
By concyclic_definition_0 on H, E, C, A we get A in Circle(C, E, H)
By external_angle_bisector_definition_v0_r on orthocenter(A, C, D), C, orthocenter(A, C, D), F we get Line(C, F) == external_angle_bisector(orthocenter(A, C, D), F, orthocenter(A, C, D))
By internal_angle_bisector_definition_v0_r on orthocenter(A, C, D), F, orthocenter(A, C, D), D we get Line(D, F) == internal_angle_bisector(orthocenter(A, C, D), D, orthocenter(A, C, D))
By internal_angle_bisector_definition_v0_r on F, C, E, I we get Line(C, I) == internal_angle_bisector(E, I, F)
By internal_angle_bisector_definition_v0_r on F, D, E, I we get Line(D, I) == internal_angle_bisector(E, I, F)
By external_angle_bisector_definition_v0_r on orthocenter(A, C, D), C, orthocenter(A, C, D), I we get Line(C, I) == external_angle_bisector(orthocenter(A, C, D), I, orthocenter(A, C, D))
By internal_angle_bisector_definition_v0_r on A, orthocenter(A, C, D), A, I we get internal_angle_bisector(A, I, A) == Line(I, orthocenter(A, C, D))
By internal_angle_bisector_definition_v0_r on E, D, F, center(Circle(C, D, E)) we get Line(D, center(Circle(C, D, E))) == internal_angle_bisector(E, center(Circle(C, D, E)), F)
By anti_similar_triangle_basic_properties on F, H, C, E, H, C we get angle(F, H, C) == 0 - angle(E, H, C) mod 360, angle(H, C, F) == 0 - angle(H, C, E) mod 360, angle(C, F, H) == 0 - angle(C, E, H) mod 360, log(distance(E, H)) + log(distance(C, H)) == log(distance(F, H)) + log(distance(C, H)), log(distance(C, H)) + log(distance(C, E)) == log(distance(C, H)) + log(distance(C, F)), log(distance(C, E)) + log(distance(F, H)) == log(distance(C, F)) + log(distance(E, H))
By internal_angle_bisector_definition_v0_r on E, C, F, H we get Line(C, H) == internal_angle_bisector(E, H, F)
By internal_angle_bisector_definition_v0_r on E, C, F, center(Circle(C, D, E)) we get Line(C, center(Circle(C, D, E))) == internal_angle_bisector(E, center(Circle(C, D, E)), F)
By perpendicular_lines_draw_intersection on Line(E, F), j we get exists(line_intersection(j, Line(E, F)))
By internal_angle_bisector_definition_v0 on B, line_intersection(h, altitude(C, A, D)), F, A we get angle(B, A, line_intersection(h, altitude(C, A, D))) == angle(line_intersection(h, altitude(C, A, D)), A, F) mod 360
By collinear_definition on A, line_intersection(h, altitude(C, A, D)), D we get line_intersection(h, altitude(C, A, D)) in Line(A, D), D in Line(A, line_intersection(h, altitude(C, A, D))), Line(A, D) == Line(A, line_intersection(h, altitude(C, A, D))), 0 == 2 * angle(line_intersection(h, altitude(C, A, D)), A, D) mod 360
By reverse_direction on center(Circle(C, D, E)), D we get 180 == direction(center(Circle(C, D, E)), D) - direction(D, center(Circle(C, D, E))) mod 360
By internal_angle_bisector_definition_v0 on C, line_intersection(h, altitude(C, A, D)), B, A we get angle(C, A, line_intersection(h, altitude(C, A, D))) == angle(line_intersection(h, altitude(C, A, D)), A, B) mod 360
By internal_angle_bisector_definition_v0 on F, line_intersection(h, altitude(C, A, D)), B, A we get angle(F, A, line_intersection(h, altitude(C, A, D))) == angle(line_intersection(h, altitude(C, A, D)), A, B) mod 360
By internal_angle_bisector_definition_v0_r on F, orthocenter(A, C, D), F, D we get internal_angle_bisector(F, D, F) == Line(D, orthocenter(A, C, D))
By internal_angle_bisector_definition_v0 on G, line_intersection(h, altitude(C, A, D)), B, A we get angle(G, A, line_intersection(h, altitude(C, A, D))) == angle(line_intersection(h, altitude(C, A, D)), A, B) mod 360
By internal_angle_bisector_definition_v0_r on D, orthocenter(A, C, D), D, F we get internal_angle_bisector(D, F, D) == Line(F, orthocenter(A, C, D))
By collinear_definition on D, line_intersection(h, altitude(C, A, D)), A we get line_intersection(h, altitude(C, A, D)) in Line(A, D), A in Line(D, line_intersection(h, altitude(C, A, D))), Line(A, D) == Line(D, line_intersection(h, altitude(C, A, D))), 0 == 2 * angle(line_intersection(h, altitude(C, A, D)), D, A) mod 360
By reverse_direction on center(Circle(C, D, E)), E we get 180 == direction(center(Circle(C, D, E)), E) - direction(E, center(Circle(C, D, E))) mod 360
By internal_angle_bisector_definition_v0_r on I, orthocenter(A, C, D), I, A we get internal_angle_bisector(I, A, I) == Line(A, orthocenter(A, C, D))
By internal_angle_bisector_definition_v0_r on A, I, A, orthocenter(A, C, D) we get Line(I, orthocenter(A, C, D)) == internal_angle_bisector(A, orthocenter(A, C, D), A)
By internal_angle_bisector_definition_v0_r on I, A, I, orthocenter(A, C, D) we get Line(A, orthocenter(A, C, D)) == internal_angle_bisector(I, orthocenter(A, C, D), I)
By internal_angle_bisector_definition_v0_r on F, D, F, orthocenter(A, C, D) we get Line(D, orthocenter(A, C, D)) == internal_angle_bisector(F, orthocenter(A, C, D), F)
By internal_angle_bisector_definition_v0 on B, line_intersection(h, altitude(C, A, D)), C, A we get angle(B, A, line_intersection(h, altitude(C, A, D))) == angle(line_intersection(h, altitude(C, A, D)), A, C) mod 360
By internal_angle_bisector_definition_v0_r on orthocenter(A, C, D), I, orthocenter(A, C, D), A we get Line(A, I) == internal_angle_bisector(orthocenter(A, C, D), A, orthocenter(A, C, D))
By reverse_direction on center(Circle(C, D, E)), F we get 180 == direction(center(Circle(C, D, E)), F) - direction(F, center(Circle(C, D, E))) mod 360
By collinear_definition on D, A, line_intersection(h, altitude(C, A, D)) we get A in Line(D, line_intersection(h, altitude(C, A, D))), line_intersection(h, altitude(C, A, D)) in Line(A, D), Line(A, D) == Line(D, line_intersection(h, altitude(C, A, D))), 0 == 2 * angle(A, D, line_intersection(h, altitude(C, A, D))) mod 360
By internal_angle_bisector_definition_v0_r on C, D, C, center(Circle(C, D, E)) we get Line(D, center(Circle(C, D, E))) == internal_angle_bisector(C, center(Circle(C, D, E)), C)
By collinear_definition on orthocenter(A, C, D), line_intersection(h, altitude(C, A, D)), C we get line_intersection(h, altitude(C, A, D)) in Line(C, orthocenter(A, C, D)), C in Line(orthocenter(A, C, D), line_intersection(h, altitude(C, A, D))), Line(C, orthocenter(A, C, D)) == Line(orthocenter(A, C, D), line_intersection(h, altitude(C, A, D))), 0 == 2 * angle(line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D), C) mod 360
By collinear_definition on orthocenter(A, C, D), C, line_intersection(h, altitude(C, A, D)) we get C in Line(orthocenter(A, C, D), line_intersection(h, altitude(C, A, D))), line_intersection(h, altitude(C, A, D)) in Line(C, orthocenter(A, C, D)), Line(C, orthocenter(A, C, D)) == Line(orthocenter(A, C, D), line_intersection(h, altitude(C, A, D))), 0 == 2 * angle(C, orthocenter(A, C, D), line_intersection(h, altitude(C, A, D))) mod 360
By internal_angle_bisector_definition_v0_r on D, C, D, center(Circle(C, D, E)) we get Line(C, center(Circle(C, D, E))) == internal_angle_bisector(D, center(Circle(C, D, E)), D)
By collinear_definition on C, line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D) we get line_intersection(h, altitude(C, A, D)) in Line(C, orthocenter(A, C, D)), orthocenter(A, C, D) in Line(C, line_intersection(h, altitude(C, A, D))), Line(C, orthocenter(A, C, D)) == Line(C, line_intersection(h, altitude(C, A, D))), 0 == 2 * angle(line_intersection(h, altitude(C, A, D)), C, orthocenter(A, C, D)) mod 360
By collinear_definition on A, D, line_intersection(h, altitude(C, A, D)) we get D in Line(A, line_intersection(h, altitude(C, A, D))), line_intersection(h, altitude(C, A, D)) in Line(A, D), Line(A, D) == Line(A, line_intersection(h, altitude(C, A, D))), 0 == 2 * angle(D, A, line_intersection(h, altitude(C, A, D))) mod 360
By internal_angle_bisector_definition_v0_r on D, F, D, orthocenter(A, C, D) we get Line(F, orthocenter(A, C, D)) == internal_angle_bisector(D, orthocenter(A, C, D), D)
By collinear_definition on line_intersection(h, altitude(C, A, D)), C, orthocenter(A, C, D) we get C in Line(orthocenter(A, C, D), line_intersection(h, altitude(C, A, D))), orthocenter(A, C, D) in Line(C, line_intersection(h, altitude(C, A, D))), Line(C, line_intersection(h, altitude(C, A, D))) == Line(orthocenter(A, C, D), line_intersection(h, altitude(C, A, D))), 0 == 2 * angle(C, line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D)) mod 360
By anti_similar_triangle_basic_properties on I, F, C, I, E, C we get angle(I, F, C) == 0 - angle(I, E, C) mod 360, angle(F, C, I) == 0 - angle(E, C, I) mod 360, angle(C, I, F) == 0 - angle(C, I, E) mod 360, log(distance(E, I)) + log(distance(C, F)) == log(distance(F, I)) + log(distance(C, E)), log(distance(C, E)) + log(distance(C, I)) == log(distance(C, F)) + log(distance(C, I)), log(distance(C, I)) + log(distance(E, I)) == log(distance(C, I)) + log(distance(F, I))
By sas_anti_congruence on E, center(Circle(C, D, E)), C, C, center(Circle(C, D, E)), E we get anti_congruent_triangles(C, E, center(Circle(C, D, E)), E, C, center(Circle(C, D, E)))
By sas_anti_congruence on D, center(Circle(C, D, E)), E, E, center(Circle(C, D, E)), D we get anti_congruent_triangles(D, E, center(Circle(C, D, E)), E, D, center(Circle(C, D, E)))
By sas_anti_congruence on C, center(Circle(C, D, E)), F, F, center(Circle(C, D, E)), C we get anti_congruent_triangles(C, F, center(Circle(C, D, E)), F, C, center(Circle(C, D, E)))
By anti_similar_triangle_basic_properties on D, E, I, D, F, I we get angle(D, E, I) == 0 - angle(D, F, I) mod 360, angle(E, I, D) == 0 - angle(F, I, D) mod 360, angle(I, D, E) == 0 - angle(I, D, F) mod 360, log(distance(D, E)) + log(distance(F, I)) == log(distance(D, F)) + log(distance(E, I)), log(distance(E, I)) + log(distance(D, I)) == log(distance(F, I)) + log(distance(D, I)), log(distance(D, I)) + log(distance(D, E)) == log(distance(D, I)) + log(distance(D, F))
By altitude_definition on C, E, F, j we get j == altitude(C, E, F)
By anti_similar_triangle_basic_properties on F, D, I, E, D, I we get angle(F, D, I) == 0 - angle(E, D, I) mod 360, angle(D, I, F) == 0 - angle(D, I, E) mod 360, angle(I, F, D) == 0 - angle(I, E, D) mod 360, log(distance(D, E)) + log(distance(D, I)) == log(distance(D, F)) + log(distance(D, I)), log(distance(D, I)) + log(distance(E, I)) == log(distance(D, I)) + log(distance(F, I)), log(distance(E, I)) + log(distance(D, F)) == log(distance(F, I)) + log(distance(D, E))
By altitude_definition on orthocenter(A, C, D), A, line_intersection(h, altitude(C, A, D)), altitude(C, A, D) we get altitude(C, A, D) == altitude(orthocenter(A, C, D), A, line_intersection(h, altitude(C, A, D)))
By perpendicular_angle_conditions_v0 on A, line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D) we get angle(A, line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D)) == orientation(A, line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D)) mod 360
By anti_similar_triangle_basic_properties on C, F, I, C, D, A we get angle(C, F, I) == 0 - angle(C, D, A) mod 360, angle(F, I, C) == 0 - angle(D, A, C) mod 360, angle(I, C, F) == 0 - angle(A, C, D) mod 360, log(distance(C, D)) + log(distance(F, I)) == log(distance(C, F)) + log(distance(A, D)), log(distance(A, D)) + log(distance(C, I)) == log(distance(F, I)) + log(distance(A, C)), log(distance(A, C)) + log(distance(C, F)) == log(distance(C, I)) + log(distance(C, D))
By similar_triangle_basic_properties on I, E, C, A, D, C we get angle(A, D, C) == angle(I, E, C) mod 360, angle(D, C, A) == angle(E, C, I) mod 360, angle(C, A, D) == angle(C, I, E) mod 360, log(distance(A, D)) + log(distance(C, E)) == log(distance(E, I)) + log(distance(C, D)), log(distance(C, D)) + log(distance(C, I)) == log(distance(C, E)) + log(distance(A, C)), log(distance(A, C)) + log(distance(E, I)) == log(distance(C, I)) + log(distance(A, D))
By concyclic_definition_1 on A, H, C, E we get Circle(A, C, H) == Circle(C, E, H)
By altitude_definition on C, D, line_intersection(h, altitude(C, A, D)), altitude(C, A, D) we get altitude(C, A, D) == altitude(C, D, line_intersection(h, altitude(C, A, D)))
By sas_anti_congruence on D, center(Circle(C, D, E)), F, F, center(Circle(C, D, E)), D we get anti_congruent_triangles(D, F, center(Circle(C, D, E)), F, D, center(Circle(C, D, E)))
By altitude_definition on F, I, D, Line(E, F) we get Line(E, F) == altitude(F, D, I)
By altitude_definition on E, I, C, Line(E, F) we get Line(E, F) == altitude(E, C, I)
By concyclic_definition_1 on E, A, H, C we get Circle(A, C, H) == Circle(A, E, H)
By altitude_definition on C, line_intersection(h, altitude(C, A, D)), A, altitude(C, A, D) we get altitude(C, A, D) == altitude(C, A, line_intersection(h, altitude(C, A, D)))
By concyclic_definition_1 on H, C, A, E we get Circle(A, C, E) == Circle(A, C, H)
By sas_anti_congruence on E, center(Circle(C, D, E)), F, F, center(Circle(C, D, E)), E we get anti_congruent_triangles(E, F, center(Circle(C, D, E)), F, E, center(Circle(C, D, E)))
By altitude_definition on D, orthocenter(A, C, D), line_intersection(h, altitude(C, A, D)), h we get h == altitude(D, orthocenter(A, C, D), line_intersection(h, altitude(C, A, D)))
By altitude_definition on orthocenter(A, C, D), line_intersection(h, altitude(C, A, D)), D, altitude(C, A, D) we get altitude(C, A, D) == altitude(orthocenter(A, C, D), D, line_intersection(h, altitude(C, A, D)))
By concyclic_definition_1 on H, C, E, A we get Circle(A, C, E) == Circle(C, E, H)
By altitude_definition on E, I, D, Line(E, F) we get Line(E, F) == altitude(E, D, I)
By collinear_definition on line_intersection(h, altitude(C, A, D)), D, A we get D in Line(A, line_intersection(h, altitude(C, A, D))), A in Line(D, line_intersection(h, altitude(C, A, D))), Line(A, line_intersection(h, altitude(C, A, D))) == Line(D, line_intersection(h, altitude(C, A, D))), 0 == 2 * angle(D, line_intersection(h, altitude(C, A, D)), A) mod 360
By perpendicular_angle_conditions_v0 on C, line_intersection(h, altitude(C, A, D)), D we get angle(C, line_intersection(h, altitude(C, A, D)), D) == orientation(C, line_intersection(h, altitude(C, A, D)), D) mod 360
By isosceles_triangle_properties on center(Circle(C, D, E)), F, D we get distance(D, center(Circle(C, D, E))) == distance(F, center(Circle(C, D, E))), angle(F, D, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), F, D) mod 360
By isosceles_triangle_properties on center(Circle(C, D, E)), F, C we get distance(C, center(Circle(C, D, E))) == distance(F, center(Circle(C, D, E))), angle(F, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), F, C) mod 360
By altitude_definition on A, orthocenter(A, C, D), line_intersection(h, altitude(C, A, D)), h we get h == altitude(A, orthocenter(A, C, D), line_intersection(h, altitude(C, A, D)))
By anti_similar_triangle_basic_properties on C, A, D, C, I, F we get angle(C, A, D) == 0 - angle(C, I, F) mod 360, angle(A, D, C) == 0 - angle(I, F, C) mod 360, angle(D, C, A) == 0 - angle(F, C, I) mod 360, log(distance(A, C)) + log(distance(F, I)) == log(distance(C, I)) + log(distance(A, D)), log(distance(A, D)) + log(distance(C, F)) == log(distance(F, I)) + log(distance(C, D)), log(distance(C, D)) + log(distance(C, I)) == log(distance(C, F)) + log(distance(A, C))
By concyclic_definition_1 on A, E, H, C we get Circle(A, E, H) == Circle(C, E, H)
By isosceles_triangle_properties on center(Circle(C, D, E)), F, E we get distance(E, center(Circle(C, D, E))) == distance(F, center(Circle(C, D, E))), angle(F, E, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), F, E) mod 360
By concyclic_definition_1 on H, A, E, C we get Circle(A, C, E) == Circle(A, E, H)
By anti_similar_triangle_basic_properties on E, I, C, F, I, C we get angle(E, I, C) == 0 - angle(F, I, C) mod 360, angle(I, C, E) == 0 - angle(I, C, F) mod 360, angle(C, E, I) == 0 - angle(C, F, I) mod 360, log(distance(E, I)) + log(distance(C, I)) == log(distance(F, I)) + log(distance(C, I)), log(distance(C, I)) + log(distance(C, E)) == log(distance(C, I)) + log(distance(C, F)), log(distance(C, E)) + log(distance(F, I)) == log(distance(C, F)) + log(distance(E, I))
By similar_triangle_basic_properties on E, I, C, D, A, C we get angle(D, A, C) == angle(E, I, C) mod 360, angle(A, C, D) == angle(I, C, E) mod 360, angle(C, D, A) == angle(C, E, I) mod 360, log(distance(A, D)) + log(distance(C, I)) == log(distance(E, I)) + log(distance(A, C)), log(distance(A, C)) + log(distance(C, E)) == log(distance(C, I)) + log(distance(C, D)), log(distance(C, D)) + log(distance(E, I)) == log(distance(C, E)) + log(distance(A, D))
By perpendicular_angle_conditions_v0 on orthocenter(A, C, D), line_intersection(h, altitude(C, A, D)), D we get angle(orthocenter(A, C, D), line_intersection(h, altitude(C, A, D)), D) == orientation(D, orthocenter(A, C, D), line_intersection(h, altitude(C, A, D))) mod 360
By altitude_definition on D, line_intersection(h, altitude(C, A, D)), C, h we get h == altitude(D, C, line_intersection(h, altitude(C, A, D)))
By sas_anti_congruence on F, center(Circle(C, D, E)), E, E, center(Circle(C, D, E)), F we get anti_congruent_triangles(E, F, center(Circle(C, D, E)), F, E, center(Circle(C, D, E)))
By sas_anti_congruence on F, center(Circle(C, D, E)), D, D, center(Circle(C, D, E)), F we get anti_congruent_triangles(D, F, center(Circle(C, D, E)), F, D, center(Circle(C, D, E)))
By altitude_definition on I, F, E, j we get j == altitude(I, E, F)
By altitude_definition on F, I, C, Line(E, F) we get Line(E, F) == altitude(F, C, I)
By collinear_definition on line_intersection(h, altitude(C, A, D)), A, D we get A in Line(D, line_intersection(h, altitude(C, A, D))), D in Line(A, line_intersection(h, altitude(C, A, D))), Line(A, line_intersection(h, altitude(C, A, D))) == Line(D, line_intersection(h, altitude(C, A, D))), 0 == 2 * angle(A, line_intersection(h, altitude(C, A, D)), D) mod 360
By altitude_definition on F, C, D, Line(E, F) we get Line(E, F) == altitude(F, C, D)
By isosceles_triangle_properties on center(Circle(C, D, E)), E, F we get distance(E, center(Circle(C, D, E))) == distance(F, center(Circle(C, D, E))), angle(E, F, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), E, F) mod 360
By sas_anti_similarity on D, F, H, F, E, A we get anti_similar_triangles(A, E, F, H, F, D)
By sas_anti_similarity on H, F, D, A, E, F we get anti_similar_triangles(A, E, F, H, F, D)
By isosceles_triangle_properties on center(Circle(C, D, E)), D, F we get distance(D, center(Circle(C, D, E))) == distance(F, center(Circle(C, D, E))), angle(D, F, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), D, F) mod 360
By sas_anti_similarity on F, E, A, D, F, H we get anti_similar_triangles(A, E, F, H, F, D)
By perpendicular_angle_conditions_v0 on D, line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D) we get angle(D, line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D)) == orientation(D, line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D)) mod 360
By altitude_definition on D, F, E, j we get j == altitude(D, E, F)
By perpendicular_angle_conditions_v0 on A, line_intersection(h, altitude(C, A, D)), C we get angle(A, line_intersection(h, altitude(C, A, D)), C) == orientation(A, line_intersection(h, altitude(C, A, D)), C) mod 360
By sas_anti_congruence on F, center(Circle(C, D, E)), C, C, center(Circle(C, D, E)), F we get anti_congruent_triangles(C, F, center(Circle(C, D, E)), F, C, center(Circle(C, D, E)))
By collinear_definition on line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D), C we get orthocenter(A, C, D) in Line(C, line_intersection(h, altitude(C, A, D))), C in Line(orthocenter(A, C, D), line_intersection(h, altitude(C, A, D))), Line(C, line_intersection(h, altitude(C, A, D))) == Line(orthocenter(A, C, D), line_intersection(h, altitude(C, A, D))), 0 == 2 * angle(orthocenter(A, C, D), line_intersection(h, altitude(C, A, D)), C) mod 360
By isosceles_triangle_properties on center(Circle(C, D, E)), D, E we get distance(D, center(Circle(C, D, E))) == distance(E, center(Circle(C, D, E))), angle(D, E, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), D, E) mod 360
By sas_anti_similarity on A, E, F, H, F, D we get anti_similar_triangles(A, E, F, H, F, D)
By perpendicular_angle_conditions_v0 on C, line_intersection(h, altitude(C, A, D)), A we get angle(C, line_intersection(h, altitude(C, A, D)), A) == orientation(A, C, line_intersection(h, altitude(C, A, D))) mod 360
By perpendicular_angle_conditions_v0 on orthocenter(A, C, D), line_intersection(h, altitude(C, A, D)), A we get angle(orthocenter(A, C, D), line_intersection(h, altitude(C, A, D)), A) == orientation(A, orthocenter(A, C, D), line_intersection(h, altitude(C, A, D))) mod 360
By altitude_definition on A, C, line_intersection(h, altitude(C, A, D)), h we get h == altitude(A, C, line_intersection(h, altitude(C, A, D)))
By isosceles_triangle_properties on center(Circle(C, D, E)), E, D we get distance(D, center(Circle(C, D, E))) == distance(E, center(Circle(C, D, E))), angle(E, D, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), E, D) mod 360
By sas_anti_congruence on C, center(Circle(C, D, E)), E, E, center(Circle(C, D, E)), C we get anti_congruent_triangles(C, E, center(Circle(C, D, E)), E, C, center(Circle(C, D, E)))
By altitude_definition on E, C, D, Line(E, F) we get Line(E, F) == altitude(E, C, D)
By sas_anti_congruence on E, center(Circle(C, D, E)), D, D, center(Circle(C, D, E)), E we get anti_congruent_triangles(D, E, center(Circle(C, D, E)), E, D, center(Circle(C, D, E)))
By perpendicular_angle_conditions_v0 on D, line_intersection(h, altitude(C, A, D)), C we get angle(D, line_intersection(h, altitude(C, A, D)), C) == orientation(C, D, line_intersection(h, altitude(C, A, D))) mod 360
By isosceles_triangle_properties on center(Circle(C, D, E)), E, C we get distance(C, center(Circle(C, D, E))) == distance(E, center(Circle(C, D, E))), angle(E, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), E, C) mod 360
By isosceles_triangle_properties on center(Circle(C, D, E)), C, E we get distance(C, center(Circle(C, D, E))) == distance(E, center(Circle(C, D, E))), angle(C, E, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, E) mod 360
By isosceles_triangle_properties on center(Circle(C, D, E)), C, F we get distance(C, center(Circle(C, D, E))) == distance(F, center(Circle(C, D, E))), angle(C, F, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, F) mod 360
By sas_congruence on E, center(Circle(C, D, E)), C, C, center(Circle(C, D, E)), F we get congruent_triangles(C, E, center(Circle(C, D, E)), F, C, center(Circle(C, D, E)))
By sas_anti_congruence on F, center(Circle(C, D, E)), C, E, center(Circle(C, D, E)), C we get anti_congruent_triangles(C, E, center(Circle(C, D, E)), C, F, center(Circle(C, D, E)))
By sas_congruence on E, center(Circle(C, D, E)), D, D, center(Circle(C, D, E)), F we get congruent_triangles(D, E, center(Circle(C, D, E)), F, D, center(Circle(C, D, E)))
By sas_congruence on F, center(Circle(C, D, E)), D, D, center(Circle(C, D, E)), E we get congruent_triangles(D, E, center(Circle(C, D, E)), F, D, center(Circle(C, D, E)))
By sas_congruence on D, center(Circle(C, D, E)), E, F, center(Circle(C, D, E)), D we get congruent_triangles(D, E, center(Circle(C, D, E)), F, D, center(Circle(C, D, E)))
By sas_congruence on C, center(Circle(C, D, E)), F, E, center(Circle(C, D, E)), C we get congruent_triangles(C, E, center(Circle(C, D, E)), F, C, center(Circle(C, D, E)))
By sas_congruence on C, center(Circle(C, D, E)), E, F, center(Circle(C, D, E)), C we get congruent_triangles(C, E, center(Circle(C, D, E)), F, C, center(Circle(C, D, E)))
By sas_anti_congruence on D, center(Circle(C, D, E)), F, D, center(Circle(C, D, E)), E we get anti_congruent_triangles(D, E, center(Circle(C, D, E)), D, F, center(Circle(C, D, E)))
By sas_anti_congruence on C, center(Circle(C, D, E)), E, C, center(Circle(C, D, E)), F we get anti_congruent_triangles(C, E, center(Circle(C, D, E)), C, F, center(Circle(C, D, E)))
By sas_anti_congruence on D, center(Circle(C, D, E)), E, D, center(Circle(C, D, E)), F we get anti_congruent_triangles(D, E, center(Circle(C, D, E)), D, F, center(Circle(C, D, E)))
By sas_anti_congruence on E, center(Circle(C, D, E)), C, F, center(Circle(C, D, E)), C we get anti_congruent_triangles(C, E, center(Circle(C, D, E)), C, F, center(Circle(C, D, E)))
By sas_congruence on D, center(Circle(C, D, E)), F, E, center(Circle(C, D, E)), D we get congruent_triangles(D, E, center(Circle(C, D, E)), F, D, center(Circle(C, D, E)))
By sas_congruence on F, center(Circle(C, D, E)), C, C, center(Circle(C, D, E)), E we get congruent_triangles(C, E, center(Circle(C, D, E)), F, C, center(Circle(C, D, E)))
By sas_anti_congruence on C, center(Circle(C, D, E)), F, C, center(Circle(C, D, E)), E we get anti_congruent_triangles(C, E, center(Circle(C, D, E)), C, F, center(Circle(C, D, E)))
By sas_anti_congruence on F, center(Circle(C, D, E)), D, E, center(Circle(C, D, E)), D we get anti_congruent_triangles(D, E, center(Circle(C, D, E)), D, F, center(Circle(C, D, E)))
By sas_anti_congruence on E, center(Circle(C, D, E)), D, F, center(Circle(C, D, E)), D we get anti_congruent_triangles(D, E, center(Circle(C, D, E)), D, F, center(Circle(C, D, E)))
By power_of_a_point_definition on line_intersection(h, altitude(C, A, D)), D, A, Circle(A, D, F) we get log(power_of_a_point(line_intersection(h, altitude(C, A, D)), Circle(A, D, F))) == log(distance(D, line_intersection(h, altitude(C, A, D)))) + log(distance(A, line_intersection(h, altitude(C, A, D))))
By concurrent_sufficient_conditions on Line(A, I), Line(E, I), Line(F, I) we get concurrent(Line(A, I), Line(E, I), Line(F, I))
By line_definition on orthocenter(C, D, orthocenter(A, C, D)), G, g we get g == Line(G, orthocenter(C, D, orthocenter(A, C, D)))
By concurrent_sufficient_conditions on j, Line(E, I), Line(F, I) we get concurrent(j, Line(E, I), Line(F, I))
By concurrent_sufficient_conditions on i, Line(C, center(Circle(C, D, E))), Line(D, F) we get concurrent(i, Line(D, F), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on j, Line(A, I), Line(F, I) we get concurrent(j, Line(A, I), Line(F, I))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), f, altitude(C, A, D) we get concurrent(f, altitude(C, A, D), Line(C, center(Circle(C, D, E))))
By line_definition on F, orthocenter(C, D, orthocenter(A, C, D)), g we get g == Line(F, orthocenter(C, D, orthocenter(A, C, D)))
By concurrent_sufficient_conditions on Line(E, I), f, Line(D, E) we get concurrent(f, Line(D, E), Line(E, I))
By concurrent_sufficient_conditions on Line(E, H), Line(E, I), Line(A, E) we get concurrent(Line(A, E), Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on j, Line(G, H), Line(A, H) we get concurrent(j, Line(A, H), Line(G, H))
By concurrent_sufficient_conditions on Line(D, F), Line(F, I), Line(F, H) we get concurrent(Line(D, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(F, H), Line(G, H), j we get concurrent(j, Line(F, H), Line(G, H))
By line_definition on orthocenter(A, C, D), orthocenter(A, C, orthocenter(A, C, D)), Line(D, F) we get Line(D, F) == Line(orthocenter(A, C, D), orthocenter(A, C, orthocenter(A, C, D)))
By concurrent_sufficient_conditions on Line(F, I), Line(D, F), g we get concurrent(g, Line(D, F), Line(F, I))
By line_definition on A, orthocenter(A, C, orthocenter(A, C, D)), h we get h == Line(A, orthocenter(A, C, orthocenter(A, C, D)))
By concurrent_sufficient_conditions on Line(E, I), Line(A, E), f we get concurrent(f, Line(A, E), Line(E, I))
By concurrent_sufficient_conditions on h, Line(C, center(Circle(C, D, E))), Line(D, E) we get concurrent(h, Line(D, E), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, I), Line(E, H), Line(E, F) we get concurrent(Line(E, F), Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(F, H), j, Line(A, H) we get concurrent(j, Line(A, H), Line(F, H))
By concurrent_sufficient_conditions on g, Line(C, center(Circle(C, D, E))), altitude(C, A, D) we get concurrent(g, altitude(C, A, D), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(F, center(Circle(C, D, E))), Line(D, F) we get concurrent(g, Line(D, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(C, center(Circle(C, D, E))), i we get concurrent(i, Line(D, F), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, H), j, Line(G, H) we get concurrent(j, Line(A, H), Line(G, H))
By concurrent_sufficient_conditions on Line(A, I), Line(E, I), j we get concurrent(j, Line(A, I), Line(E, I))
By line_definition on D, C, Line(C, center(Circle(C, D, E))) we get Line(C, D) == Line(C, center(Circle(C, D, E)))
By line_definition on line_intersection(j, Line(E, F)), D, j we get j == Line(D, line_intersection(j, Line(E, F)))
By concurrent_sufficient_conditions on f, Line(E, I), Line(A, E) we get concurrent(f, Line(A, E), Line(E, I))
By line_definition on C, orthocenter(C, D, orthocenter(A, C, D)), g we get g == Line(C, orthocenter(C, D, orthocenter(A, C, D)))
By concurrent_sufficient_conditions on Line(E, I), Line(E, center(Circle(C, D, E))), f we get concurrent(f, Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, I), g we get concurrent(g, Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, I), Line(A, E) we get concurrent(Line(A, E), Line(E, I), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on orthocenter(A, D, orthocenter(A, C, D)), altitude(C, A, D), g we get line_intersection(g, altitude(C, A, D)) == orthocenter(A, D, orthocenter(A, C, D))
By concurrent_sufficient_conditions on Line(A, E), Line(E, F), Line(E, center(Circle(C, D, E))) we get concurrent(Line(A, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(E, F), Line(F, I) we get concurrent(Line(E, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, H), Line(A, H), j we get concurrent(j, Line(A, H), Line(G, H))
By concurrent_sufficient_conditions on Line(E, I), Line(E, F), Line(E, H) we get concurrent(Line(E, F), Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(E, H), Line(E, F), Line(E, I) we get concurrent(Line(E, F), Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(F, I), Line(E, F), Line(F, H) we get concurrent(Line(E, F), Line(F, H), Line(F, I))
By line_intersection_definition on orthocenter(C, D, orthocenter(A, C, D)), g, h we get line_intersection(g, h) == orthocenter(C, D, orthocenter(A, C, D))
By concurrent_sufficient_conditions on Line(F, I), j, Line(E, I) we get concurrent(j, Line(E, I), Line(F, I))
By line_intersection_definition on orthocenter(A, D, orthocenter(A, C, D)), altitude(C, A, D), j we get line_intersection(j, altitude(C, A, D)) == orthocenter(A, D, orthocenter(A, C, D))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(A, E), f we get concurrent(f, Line(A, E), Line(E, center(Circle(C, D, E))))
By line_definition on F, orthocenter(A, D, orthocenter(A, C, D)), g we get g == Line(F, orthocenter(A, D, orthocenter(A, C, D)))
By concurrent_sufficient_conditions on Line(A, E), Line(E, center(Circle(C, D, E))), f we get concurrent(f, Line(A, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on j, Line(E, H), Line(G, H) we get concurrent(j, Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(D, F), i, Line(C, center(Circle(C, D, E))) we get concurrent(i, Line(D, F), Line(C, center(Circle(C, D, E))))
By line_definition on E, line_intersection(j, Line(E, F)), Line(E, F) we get Line(E, F) == Line(E, line_intersection(j, Line(E, F)))
By concurrent_sufficient_conditions on Line(F, H), Line(E, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, I), j, Line(F, I) we get concurrent(j, Line(E, I), Line(F, I))
By concurrent_sufficient_conditions on Line(A, I), j, Line(F, I) we get concurrent(j, Line(A, I), Line(F, I))
By line_definition on orthocenter(A, D, orthocenter(A, C, D)), H, j we get j == Line(H, orthocenter(A, D, orthocenter(A, C, D)))
By concurrent_sufficient_conditions on g, Line(E, F), Line(F, center(Circle(C, D, E))) we get concurrent(g, Line(E, F), Line(F, center(Circle(C, D, E))))
By line_definition on C, line_intersection(j, Line(E, F)), j we get j == Line(C, line_intersection(j, Line(E, F)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, I), Line(D, F) we get concurrent(Line(D, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on orthocenter(A, C, orthocenter(A, C, D)), j, h we get line_intersection(h, j) == orthocenter(A, C, orthocenter(A, C, D))
By concurrent_sufficient_conditions on Line(F, I), Line(D, F), Line(F, H) we get concurrent(Line(D, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(E, I), Line(E, center(Circle(C, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, H), f, Line(E, I) we get concurrent(f, Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(D, E), Line(A, E), Line(E, I) we get concurrent(Line(A, E), Line(D, E), Line(E, I))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), altitude(C, A, D), g we get concurrent(g, altitude(C, A, D), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(E, center(Circle(C, D, E))), Line(A, E) we get concurrent(Line(A, E), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), Line(F, I) we get concurrent(Line(D, F), Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(C, D, E))), Line(A, E) we get concurrent(Line(A, E), Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, E), Line(E, F), Line(E, I) we get concurrent(Line(A, E), Line(E, F), Line(E, I))
By concurrent_sufficient_conditions on g, Line(F, center(Circle(C, D, E))), Line(F, H) we get concurrent(g, Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(C, D, E))), g we get concurrent(g, Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, I), Line(E, F), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, I), Line(E, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(E, I), Line(E, center(Circle(C, D, E))))
By line_definition on orthocenter(C, D, orthocenter(A, C, D)), orthocenter(A, C, orthocenter(A, C, D)), h we get h == Line(orthocenter(A, C, orthocenter(A, C, D)), orthocenter(C, D, orthocenter(A, C, D)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, F), f we get concurrent(f, Line(E, F), Line(E, center(Circle(C, D, E))))
By line_definition on line_intersection(j, Line(E, F)), I, j we get j == Line(I, line_intersection(j, Line(E, F)))
By concurrent_sufficient_conditions on Line(A, H), Line(F, H), j we get concurrent(j, Line(A, H), Line(F, H))
By concurrent_sufficient_conditions on Line(F, I), Line(E, F), g we get concurrent(g, Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on g, f, Line(C, center(Circle(C, D, E))) we get concurrent(f, g, Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(C, D, E))), Line(E, H) we get concurrent(Line(D, E), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, g, Line(C, center(Circle(C, D, E))) we get concurrent(f, g, Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(D, F), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(E, I), Line(A, E), Line(E, H) we get concurrent(Line(A, E), Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on f, Line(E, H), Line(E, I) we get concurrent(f, Line(E, H), Line(E, I))
By line_definition on orthocenter(A, D, orthocenter(A, C, D)), D, j we get j == Line(D, orthocenter(A, D, orthocenter(A, C, D)))
By concurrent_sufficient_conditions on Line(A, E), Line(E, I), Line(E, H) we get concurrent(Line(A, E), Line(E, H), Line(E, I))
By line_definition on orthocenter(C, D, orthocenter(A, C, D)), I, Line(A, I) we get Line(A, I) == Line(I, orthocenter(C, D, orthocenter(A, C, D)))
By line_definition on A, orthocenter(A, D, orthocenter(A, C, D)), g we get g == Line(A, orthocenter(A, D, orthocenter(A, C, D)))
By concurrent_sufficient_conditions on Line(F, H), Line(A, H), j we get concurrent(j, Line(A, H), Line(F, H))
By concurrent_sufficient_conditions on Line(E, I), Line(E, H), Line(A, E) we get concurrent(Line(A, E), Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(Circle(C, D, E))), g we get concurrent(g, Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, I), Line(E, H) we get concurrent(Line(E, F), Line(E, H), Line(E, I))
By line_definition on orthocenter(A, C, orthocenter(A, C, D)), I, j we get j == Line(I, orthocenter(A, C, orthocenter(A, C, D)))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), i, Line(D, E) we get concurrent(i, Line(D, E), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, E), Line(E, I), f we get concurrent(f, Line(A, E), Line(E, I))
By concurrent_sufficient_conditions on Line(E, I), Line(E, F), f we get concurrent(f, Line(E, F), Line(E, I))
By concurrent_sufficient_conditions on i, h, Line(C, center(Circle(C, D, E))) we get concurrent(h, i, Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, I), Line(D, E), f we get concurrent(f, Line(D, E), Line(E, I))
By concurrent_sufficient_conditions on g, Line(D, F), Line(F, I) we get concurrent(g, Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on altitude(C, A, D), Line(C, center(Circle(C, D, E))), g we get concurrent(g, altitude(C, A, D), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), g, Line(E, F) we get concurrent(g, Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(C, D, E))), Line(F, H) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, I), Line(E, F), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, I))
By line_definition on orthocenter(A, C, orthocenter(A, C, D)), projection(C, h), h we get h == Line(projection(C, h), orthocenter(A, C, orthocenter(A, C, D)))
By line_definition on orthocenter(A, C, D), orthocenter(C, D, orthocenter(A, C, D)), Line(A, I) we get Line(A, I) == Line(orthocenter(A, C, D), orthocenter(C, D, orthocenter(A, C, D)))
By concurrent_sufficient_conditions on j, Line(A, I), Line(E, I) we get concurrent(j, Line(A, I), Line(E, I))
By concurrent_sufficient_conditions on j, Line(A, H), Line(F, H) we get concurrent(j, Line(A, H), Line(F, H))
By concurrent_sufficient_conditions on f, altitude(C, A, D), Line(C, center(Circle(C, D, E))) we get concurrent(f, altitude(C, A, D), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, I), Line(E, H), Line(D, E) we get concurrent(Line(D, E), Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(C, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))) we get concurrent(Line(C, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, I), Line(A, E), Line(D, E) we get concurrent(Line(A, E), Line(D, E), Line(E, I))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(Circle(C, D, E))), Line(F, H) we get concurrent(Line(F, H), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), f, Line(E, H) we get concurrent(f, Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(C, D, E))), Line(E, I) we get concurrent(Line(E, F), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, H), Line(A, E) we get concurrent(Line(A, E), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(A, I), Line(E, I) we get concurrent(Line(A, I), Line(E, I), Line(F, I))
By concurrent_sufficient_conditions on f, Line(E, I), Line(E, center(Circle(C, D, E))) we get concurrent(f, Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), i, Line(D, F) we get concurrent(i, Line(D, F), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, H), Line(F, I) we get concurrent(Line(F, H), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, H), Line(E, I) we get concurrent(Line(E, H), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(D, F), Line(C, center(Circle(C, D, E))) we get concurrent(i, Line(D, F), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(C, center(Circle(C, D, E))), i we get concurrent(h, i, Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(E, center(Circle(C, D, E))), Line(D, E) we get concurrent(f, Line(D, E), Line(E, center(Circle(C, D, E))))
By line_definition on orthocenter(C, D, orthocenter(A, C, D)), projection(C, h), h we get h == Line(projection(C, h), orthocenter(C, D, orthocenter(A, C, D)))
By concurrent_sufficient_conditions on f, Line(E, I), Line(D, E) we get concurrent(f, Line(D, E), Line(E, I))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(C, D, E))), Line(D, F) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, I), Line(E, F), Line(A, E) we get concurrent(Line(A, E), Line(E, F), Line(E, I))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), Line(D, F), Line(D, E) we get concurrent(Line(D, E), Line(D, F), Line(C, center(Circle(C, D, E))))
By line_intersection_definition on orthocenter(A, C, orthocenter(A, C, D)), Line(D, F), j we get line_intersection(j, Line(D, F)) == orthocenter(A, C, orthocenter(A, C, D))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(C, D, E))), Line(F, I) we get concurrent(Line(F, H), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(C, D, E))), f we get concurrent(f, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, H), j, Line(E, H) we get concurrent(j, Line(A, H), Line(E, H))
By concurrent_sufficient_conditions on altitude(C, A, D), g, Line(C, center(Circle(C, D, E))) we get concurrent(g, altitude(C, A, D), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, I), Line(F, H) we get concurrent(Line(F, H), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(E, F), Line(F, I) we get concurrent(g, Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on j, Line(G, H), Line(E, H) we get concurrent(j, Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), h, i we get concurrent(h, i, Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, I), Line(E, center(Circle(C, D, E))), Line(E, H) we get concurrent(Line(E, H), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(A, E), Line(E, center(Circle(C, D, E))) we get concurrent(Line(A, E), Line(E, H), Line(E, center(Circle(C, D, E))))
By line_definition on orthocenter(A, D, orthocenter(A, C, D)), orthocenter(A, C, orthocenter(A, C, D)), j we get j == Line(orthocenter(A, C, orthocenter(A, C, D)), orthocenter(A, D, orthocenter(A, C, D)))
By concurrent_sufficient_conditions on Line(G, H), Line(F, H), j we get concurrent(j, Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(D, E), Line(E, H) we get concurrent(Line(D, E), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(D, F), Line(F, H) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, I), Line(D, E), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, I))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, I), Line(E, F) we get concurrent(Line(E, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(D, E), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(C, D, E))), Line(E, I) we get concurrent(Line(D, E), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(A, E), Line(E, center(Circle(C, D, E))) we get concurrent(Line(A, E), Line(D, E), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on orthocenter(A, D, orthocenter(A, C, D)), g, j we get line_intersection(g, j) == orthocenter(A, D, orthocenter(A, C, D))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(A, E), Line(E, F) we get concurrent(Line(A, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, I), Line(A, E) we get concurrent(Line(A, E), Line(E, F), Line(E, I))
By concurrent_sufficient_conditions on Line(E, H), Line(E, center(Circle(C, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(F, H), j we get concurrent(j, Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By line_definition on orthocenter(A, D, orthocenter(A, C, D)), line_intersection(j, Line(E, F)), j we get j == Line(line_intersection(j, Line(E, F)), orthocenter(A, D, orthocenter(A, C, D)))
By concurrent_sufficient_conditions on Line(E, F), g, Line(F, I) we get concurrent(g, Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(D, E), Line(E, H), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(D, E), Line(C, center(Circle(C, D, E))) we get concurrent(h, Line(D, E), Line(C, center(Circle(C, D, E))))
By line_definition on C, orthocenter(A, C, orthocenter(A, C, D)), j we get j == Line(C, orthocenter(A, C, orthocenter(A, C, D)))
By line_definition on orthocenter(A, C, orthocenter(A, C, D)), F, Line(D, F) we get Line(D, F) == Line(F, orthocenter(A, C, orthocenter(A, C, D)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, H), f we get concurrent(f, Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, H), j, Line(E, H) we get concurrent(j, Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, I), g we get concurrent(g, Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(D, E), Line(E, I) we get concurrent(Line(D, E), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(E, center(Circle(C, D, E))), f we get concurrent(f, Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, I), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(A, H), Line(G, H), j we get concurrent(j, Line(A, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, I), Line(E, I), Line(A, I) we get concurrent(Line(A, I), Line(E, I), Line(F, I))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), i, h we get concurrent(h, i, Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(E, center(Circle(C, D, E))), Line(A, E) we get concurrent(f, Line(A, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, E), Line(E, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(A, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), g, Line(F, I) we get concurrent(g, Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(C, D, E))), Line(A, E) we get concurrent(Line(A, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By line_definition on line_intersection(j, Line(E, F)), orthocenter(A, C, orthocenter(A, C, D)), j we get j == Line(line_intersection(j, Line(E, F)), orthocenter(A, C, orthocenter(A, C, D)))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), Line(E, I) we get concurrent(Line(D, E), Line(E, F), Line(E, I))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(C, D, E))), Line(F, H) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, I), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By line_definition on orthocenter(C, D, orthocenter(A, C, D)), orthocenter(A, D, orthocenter(A, C, D)), g we get g == Line(orthocenter(A, D, orthocenter(A, C, D)), orthocenter(C, D, orthocenter(A, C, D)))
By concurrent_sufficient_conditions on Line(F, I), Line(E, I), j we get concurrent(j, Line(E, I), Line(F, I))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, H), Line(F, I) we get concurrent(Line(D, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on f, Line(E, center(Circle(C, D, E))), Line(E, F) we get concurrent(f, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, I), g we get concurrent(g, Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(D, E), Line(E, I), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, I))
By concurrent_sufficient_conditions on Line(G, H), j, Line(F, H) we get concurrent(j, Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on g, Line(F, center(Circle(C, D, E))), Line(F, I) we get concurrent(g, Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, I), Line(D, E), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(C, D, E))), Line(F, I) we get concurrent(Line(D, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on j, Line(A, H), Line(E, H) we get concurrent(j, Line(A, H), Line(E, H))
By concurrent_sufficient_conditions on Line(A, H), j, Line(F, H) we get concurrent(j, Line(A, H), Line(F, H))
By concurrent_sufficient_conditions on i, Line(D, E), Line(C, center(Circle(C, D, E))) we get concurrent(i, Line(D, E), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), g, Line(F, center(Circle(C, D, E))) we get concurrent(g, Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, I), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), Line(D, E), i we get concurrent(i, Line(D, E), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(D, E), Line(E, I) we get concurrent(Line(D, E), Line(E, H), Line(E, I))
By line_definition on orthocenter(A, D, orthocenter(A, C, D)), projection(C, h), altitude(C, A, D) we get altitude(C, A, D) == Line(projection(C, h), orthocenter(A, D, orthocenter(A, C, D)))
By concurrent_sufficient_conditions on Line(F, H), Line(D, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, H), f, Line(E, center(Circle(C, D, E))) we get concurrent(f, Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(C, center(Circle(C, D, E))), i we get concurrent(i, Line(D, E), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), g, Line(F, center(Circle(C, D, E))) we get concurrent(g, Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))) we get concurrent(Line(C, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), g, Line(D, F) we get concurrent(g, Line(D, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), h, Line(C, center(Circle(C, D, E))) we get concurrent(h, Line(D, E), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(C, center(Circle(C, D, E))) we get concurrent(Line(C, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), g, Line(F, H) we get concurrent(g, Line(F, H), Line(F, I))
By line_intersection_definition on orthocenter(C, D, orthocenter(A, C, D)), g, Line(A, I) we get line_intersection(g, Line(A, I)) == orthocenter(C, D, orthocenter(A, C, D))
By concurrent_sufficient_conditions on Line(E, H), Line(E, I), Line(D, E) we get concurrent(Line(D, E), Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on f, Line(E, I), Line(E, H) we get concurrent(f, Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(A, E), Line(D, E) we get concurrent(Line(A, E), Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))), Line(C, center(Circle(C, D, E))) we get concurrent(Line(C, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))) we get concurrent(Line(C, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, E), Line(E, center(Circle(C, D, E))), Line(E, I) we get concurrent(Line(A, E), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(E, F), Line(E, center(Circle(C, D, E))) we get concurrent(f, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(D, E), Line(E, I) we get concurrent(f, Line(D, E), Line(E, I))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, F), Line(E, H) we get concurrent(Line(E, F), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), g, Line(F, I) we get concurrent(g, Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), h, Line(D, F) we get concurrent(h, Line(D, F), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(F, H), g we get concurrent(g, Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(D, E), Line(E, I), Line(E, H) we get concurrent(Line(D, E), Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(F, H), Line(F, I), Line(D, F) we get concurrent(Line(D, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(E, F), Line(E, I), f we get concurrent(f, Line(E, F), Line(E, I))
By concurrent_sufficient_conditions on g, Line(F, I), Line(F, center(Circle(C, D, E))) we get concurrent(g, Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, I), Line(E, H), f we get concurrent(f, Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(D, F), Line(F, I) we get concurrent(Line(D, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), g, altitude(C, A, D) we get concurrent(g, altitude(C, A, D), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(E, I), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, H), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(C, center(Circle(C, D, E))), Line(D, E) we get concurrent(i, Line(D, E), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), Line(D, E), h we get concurrent(h, Line(D, E), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, H), Line(E, F) we get concurrent(Line(E, F), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), j, Line(G, H) we get concurrent(j, Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(E, I), f, Line(E, center(Circle(C, D, E))) we get concurrent(f, Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), j, Line(A, I) we get concurrent(j, Line(A, I), Line(F, I))
By concurrent_sufficient_conditions on j, Line(F, H), Line(E, H) we get concurrent(j, Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), g, Line(F, H) we get concurrent(g, Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), Line(E, I) we get concurrent(Line(D, E), Line(E, F), Line(E, I))
By concurrent_sufficient_conditions on Line(A, E), Line(E, H), Line(E, center(Circle(C, D, E))) we get concurrent(Line(A, E), Line(E, H), Line(E, center(Circle(C, D, E))))
By line_definition on orthocenter(A, D, orthocenter(A, C, D)), orthocenter(A, C, D), altitude(C, A, D) we get altitude(C, A, D) == Line(orthocenter(A, C, D), orthocenter(A, D, orthocenter(A, C, D)))
By concurrent_sufficient_conditions on Line(D, E), f, Line(E, I) we get concurrent(f, Line(D, E), Line(E, I))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(D, E), f we get concurrent(f, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, i, Line(C, center(Circle(C, D, E))) we get concurrent(h, i, Line(C, center(Circle(C, D, E))))
By line_definition on H, I, j we get j == Line(H, I)
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), f, g we get concurrent(f, g, Line(C, center(Circle(C, D, E))))
By line_intersection_definition on orthocenter(C, D, orthocenter(A, C, D)), h, Line(A, I) we get line_intersection(h, Line(A, I)) == orthocenter(C, D, orthocenter(A, C, D))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(E, F), g we get concurrent(g, Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, F), Line(E, I) we get concurrent(Line(E, F), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(A, E), Line(E, center(Circle(C, D, E))) we get concurrent(Line(A, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, E), Line(E, I), Line(E, F) we get concurrent(Line(A, E), Line(E, F), Line(E, I))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), g, f we get concurrent(f, g, Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, H), Line(D, E) we get concurrent(Line(D, E), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, E), Line(E, I), Line(D, E) we get concurrent(Line(A, E), Line(D, E), Line(E, I))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(A, I), j we get concurrent(j, Line(A, I), Line(F, I))
By concurrent_sufficient_conditions on altitude(C, A, D), Line(C, center(Circle(C, D, E))), f we get concurrent(f, altitude(C, A, D), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(D, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, I), Line(E, F) we get concurrent(Line(E, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(A, E), Line(D, E), Line(E, center(Circle(C, D, E))) we get concurrent(Line(A, E), Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, I), Line(F, I), Line(A, I) we get concurrent(Line(A, I), Line(E, I), Line(F, I))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), Line(D, E), Line(D, F) we get concurrent(Line(D, E), Line(D, F), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, H), Line(E, F) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(E, I), Line(E, F) we get concurrent(f, Line(E, F), Line(E, I))
By concurrent_sufficient_conditions on Line(E, H), Line(E, I), f we get concurrent(f, Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on f, Line(E, F), Line(E, I) we get concurrent(f, Line(E, F), Line(E, I))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By line_definition on orthocenter(A, D, orthocenter(A, C, D)), I, j we get j == Line(I, orthocenter(A, D, orthocenter(A, C, D)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, I), f we get concurrent(f, Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(D, E), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(C, center(Circle(C, D, E))), h we get concurrent(h, i, Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on j, Line(A, H), Line(G, H) we get concurrent(j, Line(A, H), Line(G, H))
By concurrent_sufficient_conditions on h, Line(C, center(Circle(C, D, E))), Line(D, F) we get concurrent(h, Line(D, F), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(A, E), Line(E, center(Circle(C, D, E))) we get concurrent(f, Line(A, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(A, E), Line(E, I) we get concurrent(f, Line(A, E), Line(E, I))
By concurrent_sufficient_conditions on Line(F, I), Line(F, H), Line(D, F) we get concurrent(Line(D, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(D, E), Line(E, H), Line(E, I) we get concurrent(Line(D, E), Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(F, I), Line(E, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, H), g we get concurrent(g, Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, I), Line(A, E), Line(E, center(Circle(C, D, E))) we get concurrent(Line(A, E), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, I), Line(A, E), Line(E, F) we get concurrent(Line(A, E), Line(E, F), Line(E, I))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), altitude(C, A, D), f we get concurrent(f, altitude(C, A, D), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), f, Line(E, I) we get concurrent(f, Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), f, Line(A, E) we get concurrent(f, Line(A, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, altitude(C, A, D), Line(C, center(Circle(C, D, E))) we get concurrent(g, altitude(C, A, D), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), g, Line(F, center(Circle(C, D, E))) we get concurrent(g, Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(D, E), Line(A, E) we get concurrent(Line(A, E), Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on j, Line(F, H), Line(A, H) we get concurrent(j, Line(A, H), Line(F, H))
By concurrent_sufficient_conditions on Line(F, I), Line(F, H), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, H), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, H), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, F), Line(A, E) we get concurrent(Line(A, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(C, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), h, Line(D, E) we get concurrent(h, Line(D, E), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on j, Line(G, H), Line(F, H) we get concurrent(j, Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(A, E), Line(E, I), Line(E, center(Circle(C, D, E))) we get concurrent(Line(A, E), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), f, Line(E, I) we get concurrent(f, Line(E, F), Line(E, I))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), Line(D, F), i we get concurrent(i, Line(D, F), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(Circle(C, D, E))), Line(D, F) we get concurrent(Line(D, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, H), j, Line(G, H) we get concurrent(j, Line(E, H), Line(G, H))
By line_definition on line_intersection(j, Line(E, F)), F, Line(E, F) we get Line(E, F) == Line(F, line_intersection(j, Line(E, F)))
By concurrent_sufficient_conditions on Line(F, H), Line(E, H), j we get concurrent(j, Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on g, Line(F, I), Line(D, F) we get concurrent(g, Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(D, F), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, I), Line(F, I), j we get concurrent(j, Line(E, I), Line(F, I))
By concurrent_sufficient_conditions on h, Line(D, F), Line(C, center(Circle(C, D, E))) we get concurrent(h, Line(D, F), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, I), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on j, Line(E, H), Line(F, H) we get concurrent(j, Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on g, Line(F, I), Line(F, H) we get concurrent(g, Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(E, F), f, Line(E, center(Circle(C, D, E))) we get concurrent(f, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), j, Line(E, H) we get concurrent(j, Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(F, H), Line(D, F), Line(F, I) we get concurrent(Line(D, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(D, E), Line(C, center(Circle(C, D, E))), Line(D, F) we get concurrent(Line(D, E), Line(D, F), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), Line(D, F), h we get concurrent(h, Line(D, F), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(F, H), Line(F, center(Circle(C, D, E))) we get concurrent(g, Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, I), Line(A, I), Line(F, I) we get concurrent(Line(A, I), Line(E, I), Line(F, I))
By concurrent_sufficient_conditions on Line(D, E), i, Line(C, center(Circle(C, D, E))) we get concurrent(i, Line(D, E), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, I), g we get concurrent(g, Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(E, I), f, Line(A, E) we get concurrent(f, Line(A, E), Line(E, I))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(E, I), Line(E, F) we get concurrent(Line(E, F), Line(E, H), Line(E, I))
By line_definition on G, orthocenter(A, D, orthocenter(A, C, D)), g we get g == Line(G, orthocenter(A, D, orthocenter(A, C, D)))
By concurrent_sufficient_conditions on Line(A, I), j, Line(E, I) we get concurrent(j, Line(A, I), Line(E, I))
By concurrent_sufficient_conditions on Line(F, I), Line(E, F), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(E, I), f, Line(E, F) we get concurrent(f, Line(E, F), Line(E, I))
By line_definition on D, H, j we get j == Line(D, H)
By concurrent_sufficient_conditions on f, Line(C, center(Circle(C, D, E))), g we get concurrent(f, g, Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), h, Line(C, center(Circle(C, D, E))) we get concurrent(h, Line(D, F), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, F), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, H), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(E, H), Line(E, center(Circle(C, D, E))) we get concurrent(f, Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, E), f, Line(E, center(Circle(C, D, E))) we get concurrent(f, Line(A, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, H), Line(D, F) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, I), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, I))
By concurrent_sufficient_conditions on Line(E, I), Line(D, E), Line(A, E) we get concurrent(Line(A, E), Line(D, E), Line(E, I))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(C, D, E))), Line(E, H) we get concurrent(Line(E, F), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), g, Line(F, center(Circle(C, D, E))) we get concurrent(g, Line(D, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(A, E), Line(E, H) we get concurrent(Line(A, E), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, I), Line(F, I), Line(E, I) we get concurrent(Line(A, I), Line(E, I), Line(F, I))
By concurrent_sufficient_conditions on g, Line(F, center(Circle(C, D, E))), Line(E, F) we get concurrent(g, Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, I), f we get concurrent(f, Line(D, E), Line(E, I))
By concurrent_sufficient_conditions on Line(E, H), Line(A, E), Line(E, I) we get concurrent(Line(A, E), Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(F, I), g, Line(D, F) we get concurrent(g, Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(E, F), Line(E, H), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, I), j, Line(A, I) we get concurrent(j, Line(A, I), Line(E, I))
By concurrent_sufficient_conditions on j, Line(F, I), Line(A, I) we get concurrent(j, Line(A, I), Line(F, I))
By concurrent_sufficient_conditions on Line(D, F), Line(C, center(Circle(C, D, E))), h we get concurrent(h, Line(D, F), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(C, center(Circle(C, D, E))), f we get concurrent(f, g, Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on j, Line(E, I), Line(A, I) we get concurrent(j, Line(A, I), Line(E, I))
By line_definition on D, orthocenter(C, D, orthocenter(A, C, D)), h we get h == Line(D, orthocenter(C, D, orthocenter(A, C, D)))
By concurrent_sufficient_conditions on g, Line(F, I), Line(E, F) we get concurrent(g, Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(D, E), Line(C, center(Circle(C, D, E))), h we get concurrent(h, Line(D, E), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(D, F), g we get concurrent(g, Line(D, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(A, H), j we get concurrent(j, Line(A, H), Line(E, H))
By concurrent_sufficient_conditions on Line(D, E), f, Line(E, center(Circle(C, D, E))) we get concurrent(f, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on altitude(C, A, D), f, Line(C, center(Circle(C, D, E))) we get concurrent(f, altitude(C, A, D), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, H), j, Line(A, H) we get concurrent(j, Line(A, H), Line(E, H))
By concurrent_sufficient_conditions on Line(E, F), Line(F, H), Line(F, I) we get concurrent(Line(E, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), f, Line(E, F) we get concurrent(f, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, H), Line(E, H), j we get concurrent(j, Line(A, H), Line(E, H))
By concurrent_sufficient_conditions on Line(E, I), Line(D, E), Line(E, H) we get concurrent(Line(D, E), Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(E, I), Line(A, I), j we get concurrent(j, Line(A, I), Line(E, I))
By concurrent_sufficient_conditions on Line(A, E), Line(D, E), Line(E, I) we get concurrent(Line(A, E), Line(D, E), Line(E, I))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, H), Line(E, I) we get concurrent(Line(E, F), Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on g, Line(D, F), Line(F, center(Circle(C, D, E))) we get concurrent(g, Line(D, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, E), Line(E, center(Circle(C, D, E))), Line(D, E) we get concurrent(Line(A, E), Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(E, F), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(C, D, E))), g we get concurrent(g, Line(D, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(E, F), Line(F, H) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(F, H), Line(E, F) we get concurrent(Line(E, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), f, Line(D, E) we get concurrent(f, Line(D, E), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on orthocenter(A, C, orthocenter(A, C, D)), h, Line(D, F) we get line_intersection(h, Line(D, F)) == orthocenter(A, C, orthocenter(A, C, D))
By concurrent_sufficient_conditions on f, Line(E, center(Circle(C, D, E))), Line(E, I) we get concurrent(f, Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, I), Line(D, E) we get concurrent(Line(D, E), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, I), f, Line(E, H) we get concurrent(f, Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(A, E), Line(E, H), Line(E, I) we get concurrent(Line(A, E), Line(E, H), Line(E, I))
By line_definition on H, orthocenter(A, C, orthocenter(A, C, D)), j we get j == Line(H, orthocenter(A, C, orthocenter(A, C, D)))
By concurrent_sufficient_conditions on j, Line(F, I), Line(E, I) we get concurrent(j, Line(E, I), Line(F, I))
By concurrent_sufficient_conditions on Line(F, H), Line(E, F), Line(F, I) we get concurrent(Line(E, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(A, E), Line(E, I) we get concurrent(Line(A, E), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, H), Line(E, H), j we get concurrent(j, Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on j, Line(F, H), Line(G, H) we get concurrent(j, Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(E, H), Line(E, F), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, I), Line(F, I), j we get concurrent(j, Line(A, I), Line(F, I))
By concurrent_sufficient_conditions on Line(D, E), Line(E, I), Line(A, E) we get concurrent(Line(A, E), Line(D, E), Line(E, I))
By concurrent_sufficient_conditions on Line(A, E), Line(E, center(Circle(C, D, E))), Line(E, H) we get concurrent(Line(A, E), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, I), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, I), Line(E, F) we get concurrent(Line(E, F), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(E, center(Circle(C, D, E))), Line(E, I) we get concurrent(Line(E, H), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(E, center(Circle(C, D, E))), Line(E, H) we get concurrent(f, Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(C, center(Circle(C, D, E))), altitude(C, A, D) we get concurrent(f, altitude(C, A, D), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(G, H), j we get concurrent(j, Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(C, D, E))), Line(F, I) we get concurrent(Line(E, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(A, E), Line(E, I) we get concurrent(Line(A, E), Line(E, F), Line(E, I))
By concurrent_sufficient_conditions on Line(D, E), Line(D, F), Line(C, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(D, F), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(C, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))) we get concurrent(Line(C, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, E), f, Line(E, I) we get concurrent(f, Line(A, E), Line(E, I))
By concurrent_sufficient_conditions on f, Line(D, E), Line(E, center(Circle(C, D, E))) we get concurrent(f, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, I), Line(E, H), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, H), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(C, D, E))), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, I), Line(E, center(Circle(C, D, E))), Line(A, E) we get concurrent(Line(A, E), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, I), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, H), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(C, D, E))), f we get concurrent(f, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(F, H), Line(F, I) we get concurrent(g, Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(E, F), Line(F, I), Line(F, H) we get concurrent(Line(E, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(D, F), g, Line(F, I) we get concurrent(g, Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(E, H), Line(E, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(E, H), Line(E, center(Circle(C, D, E))))
By line_definition on H, line_intersection(j, Line(E, F)), j we get j == Line(H, line_intersection(j, Line(E, F)))
By concurrent_sufficient_conditions on Line(D, F), Line(D, E), Line(C, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(D, F), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), Line(F, I) we get concurrent(Line(D, F), Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(D, E), Line(E, I), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), g, Line(E, F) we get concurrent(g, Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(C, center(Circle(C, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(D, F), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on j, Line(E, H), Line(A, H) we get concurrent(j, Line(A, H), Line(E, H))
By concurrent_sufficient_conditions on Line(E, H), j, Line(F, H) we get concurrent(j, Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(G, H), j, Line(A, H) we get concurrent(j, Line(A, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(C, D, E))), g we get concurrent(g, Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, I), Line(E, H) we get concurrent(Line(E, H), Line(E, I), Line(E, center(Circle(C, D, E))))
By angles_on_chord_v1 on A, C, H, E, Circle(A, C, E) we get angle(A, E, C) == angle(A, H, C) mod 360
By angles_on_chord_v0 on C, A, H, E, Circle(A, C, E) we get angle(C, E, A) == angle(C, H, A) mod 360
By line_intersection_definition on center(Circle(A, D, F)), Line(D, center(Circle(A, D, F))), Line(I, center(Circle(A, D, F))) we get center(Circle(A, D, F)) == line_intersection(Line(D, center(Circle(A, D, F))), Line(I, center(Circle(A, D, F))))
By line_intersection_definition on center(Circle(A, D, F)), Line(F, center(Circle(A, D, F))), Line(I, center(Circle(A, D, F))) we get center(Circle(A, D, F)) == line_intersection(Line(F, center(Circle(A, D, F))), Line(I, center(Circle(A, D, F))))
By line_intersection_definition on F, Line(F, center(Circle(A, D, F))), Line(F, I) we get F == line_intersection(Line(F, I), Line(F, center(Circle(A, D, F))))
By line_intersection_definition on F, g, Line(F, center(Circle(A, D, F))) we get F == line_intersection(g, Line(F, center(Circle(A, D, F))))
By line_intersection_definition on H, Line(A, H), Line(D, H) we get H == line_intersection(Line(A, H), Line(D, H))
By line_intersection_definition on A, Line(A, E), Line(A, center(Circle(A, D, F))) we get A == line_intersection(Line(A, E), Line(A, center(Circle(A, D, F))))
By line_intersection_definition on A, Line(A, I), Line(A, center(Circle(A, D, F))) we get A == line_intersection(Line(A, I), Line(A, center(Circle(A, D, F))))
By line_intersection_definition on D, Line(D, center(Circle(A, D, F))), Line(C, center(Circle(C, D, E))) we get D == line_intersection(Line(C, center(Circle(C, D, E))), Line(D, center(Circle(A, D, F))))
By radical_axis_of_intersecting_circles_v0 on A, E, c, Circle(A, C, E) we get Line(A, E) == radical_axis(c, Circle(A, C, E))
By perpendicular_line_definition on D, i, Line(E, I) we get i == perpendicular_line(D, Line(E, I))
By line_intersection_definition on H, Line(D, H), Line(E, H) we get H == line_intersection(Line(D, H), Line(E, H))
By line_intersection_definition on I, Line(I, center(Circle(A, D, F))), Line(F, I) we get I == line_intersection(Line(F, I), Line(I, center(Circle(A, D, F))))
By line_intersection_definition on D, Line(D, H), i we get D == line_intersection(i, Line(D, H))
By line_intersection_definition on center(Circle(A, D, F)), Line(A, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))) we get center(Circle(A, D, F)) == line_intersection(Line(A, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))))
By line_intersection_definition on D, Line(D, H), Line(D, F) we get D == line_intersection(Line(D, F), Line(D, H))
By line_intersection_definition on A, Line(A, B), Line(A, center(Circle(A, D, F))) we get A == line_intersection(Line(A, B), Line(A, center(Circle(A, D, F))))
By line_intersection_definition on D, Line(D, E), Line(D, H) we get D == line_intersection(Line(D, E), Line(D, H))
By line_intersection_definition on center(Circle(A, D, F)), Line(I, center(Circle(A, D, F))), Line(A, center(Circle(A, D, F))) we get center(Circle(A, D, F)) == line_intersection(Line(A, center(Circle(A, D, F))), Line(I, center(Circle(A, D, F))))
By perpendicular_line_definition on orthocenter(A, D, orthocenter(A, C, D)), altitude(C, A, D), h we get altitude(C, A, D) == perpendicular_line(orthocenter(A, D, orthocenter(A, C, D)), h)
By line_intersection_definition on F, Line(E, F), Line(F, center(Circle(A, D, F))) we get F == line_intersection(Line(E, F), Line(F, center(Circle(A, D, F))))
By perpendicular_line_definition on orthocenter(C, D, orthocenter(A, C, D)), Line(A, I), j we get Line(A, I) == perpendicular_line(orthocenter(C, D, orthocenter(A, C, D)), j)
By line_intersection_definition on I, Line(E, I), Line(I, center(Circle(A, D, F))) we get I == line_intersection(Line(E, I), Line(I, center(Circle(A, D, F))))
By perpendicular_line_definition on orthocenter(C, D, orthocenter(A, C, D)), g, Line(G, H) we get g == perpendicular_line(orthocenter(C, D, orthocenter(A, C, D)), Line(G, H))
By line_intersection_definition on A, g, Line(A, center(Circle(A, D, F))) we get A == line_intersection(g, Line(A, center(Circle(A, D, F))))
By line_intersection_definition on D, Line(D, center(Circle(A, D, F))), i we get D == line_intersection(i, Line(D, center(Circle(A, D, F))))
By line_intersection_definition on D, h, Line(D, H) we get D == line_intersection(h, Line(D, H))
By radical_axis_of_intersecting_circles_v0 on C, E, Circle(A, C, E), Circle(C, D, E) we get Line(C, E) == radical_axis(Circle(A, C, E), Circle(C, D, E))
By line_intersection_definition on D, Line(D, E), Line(D, center(Circle(A, D, F))) we get D == line_intersection(Line(D, E), Line(D, center(Circle(A, D, F))))
By line_intersection_definition on D, Line(D, center(Circle(A, D, F))), Line(D, H) we get D == line_intersection(Line(D, H), Line(D, center(Circle(A, D, F))))
By line_intersection_definition on I, Line(I, center(Circle(A, D, F))), Line(A, I) we get I == line_intersection(Line(A, I), Line(I, center(Circle(A, D, F))))
By line_intersection_definition on F, Line(F, center(Circle(C, D, E))), Line(F, center(Circle(A, D, F))) we get F == line_intersection(Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on H, Line(D, H), Line(F, H) we get H == line_intersection(Line(D, H), Line(F, H))
By perpendicular_line_definition on B, i, Line(E, I) we get i == perpendicular_line(B, Line(E, I))
By line_intersection_definition on D, j, Line(D, center(Circle(A, D, F))) we get D == line_intersection(j, Line(D, center(Circle(A, D, F))))
By line_intersection_definition on A, Line(A, H), Line(A, center(Circle(A, D, F))) we get A == line_intersection(Line(A, H), Line(A, center(Circle(A, D, F))))
By line_intersection_definition on D, Line(D, F), Line(D, center(Circle(A, D, F))) we get D == line_intersection(Line(D, F), Line(D, center(Circle(A, D, F))))
By perpendicular_line_definition on orthocenter(A, D, orthocenter(A, C, D)), j, Line(A, I) we get j == perpendicular_line(orthocenter(A, D, orthocenter(A, C, D)), Line(A, I))
By perpendicular_line_definition on orthocenter(A, D, orthocenter(A, C, D)), g, Line(G, H) we get g == perpendicular_line(orthocenter(A, D, orthocenter(A, C, D)), Line(G, H))
By perpendicular_line_definition on orthocenter(A, C, orthocenter(A, C, D)), j, Line(A, I) we get j == perpendicular_line(orthocenter(A, C, orthocenter(A, C, D)), Line(A, I))
By line_intersection_definition on F, Line(F, H), Line(F, center(Circle(A, D, F))) we get F == line_intersection(Line(F, H), Line(F, center(Circle(A, D, F))))
By line_intersection_definition on H, Line(D, H), Line(G, H) we get H == line_intersection(Line(D, H), Line(G, H))
By perpendicular_line_definition on H, j, Line(A, I) we get j == perpendicular_line(H, Line(A, I))
By perpendicular_line_definition on orthocenter(C, D, orthocenter(A, C, D)), g, Line(D, F) we get g == perpendicular_line(orthocenter(C, D, orthocenter(A, C, D)), Line(D, F))
By perpendicular_line_definition on orthocenter(C, D, orthocenter(A, C, D)), h, altitude(C, A, D) we get h == perpendicular_line(orthocenter(C, D, orthocenter(A, C, D)), altitude(C, A, D))
By perpendicular_line_definition on I, Line(E, I), i we get Line(E, I) == perpendicular_line(I, i)
By perpendicular_line_definition on line_intersection(j, Line(E, F)), j, Line(E, F) we get j == perpendicular_line(line_intersection(j, Line(E, F)), Line(E, F))
By perpendicular_line_definition on line_intersection(j, Line(E, F)), Line(E, F), j we get Line(E, F) == perpendicular_line(line_intersection(j, Line(E, F)), j)
By perpendicular_line_definition on line_intersection(j, Line(E, F)), j, Line(A, I) we get j == perpendicular_line(line_intersection(j, Line(E, F)), Line(A, I))
By perpendicular_line_definition on E, Line(E, I), i we get Line(E, I) == perpendicular_line(E, i)
By perpendicular_line_definition on orthocenter(A, C, orthocenter(A, C, D)), j, Line(E, F) we get j == perpendicular_line(orthocenter(A, C, orthocenter(A, C, D)), Line(E, F))
By line_intersection_definition on center(Circle(A, D, F)), Line(D, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))) we get center(Circle(A, D, F)) == line_intersection(Line(D, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))))
By perpendicular_line_definition on H, j, Line(E, F) we get j == perpendicular_line(H, Line(E, F))
By perpendicular_line_definition on orthocenter(A, C, orthocenter(A, C, D)), Line(D, F), g we get Line(D, F) == perpendicular_line(orthocenter(A, C, orthocenter(A, C, D)), g)
By perpendicular_line_definition on orthocenter(A, D, orthocenter(A, C, D)), g, Line(D, F) we get g == perpendicular_line(orthocenter(A, D, orthocenter(A, C, D)), Line(D, F))
By line_intersection_definition on F, Line(F, center(Circle(A, D, F))), Line(D, F) we get F == line_intersection(Line(D, F), Line(F, center(Circle(A, D, F))))
By perpendicular_line_definition on orthocenter(A, C, orthocenter(A, C, D)), h, altitude(C, A, D) we get h == perpendicular_line(orthocenter(A, C, orthocenter(A, C, D)), altitude(C, A, D))
By perpendicular_line_definition on orthocenter(A, D, orthocenter(A, C, D)), j, Line(E, F) we get j == perpendicular_line(orthocenter(A, D, orthocenter(A, C, D)), Line(E, F))
By line_intersection_definition on I, Line(I, center(Circle(A, D, F))), j we get I == line_intersection(j, Line(I, center(Circle(A, D, F))))
By line_unique_intersection on g, altitude(C, A, D), C, orthocenter(A, D, orthocenter(A, C, D)) we get C == orthocenter(A, D, orthocenter(A, C, D))
By line_unique_intersection on h, Line(D, F), orthocenter(A, C, orthocenter(A, C, D)), D we get D == orthocenter(A, C, orthocenter(A, C, D))
By line_unique_intersection on h, Line(A, I), orthocenter(C, D, orthocenter(A, C, D)), A we get A == orthocenter(C, D, orthocenter(A, C, D))
By line_uniqueness on C, D, j, Line(C, center(Circle(C, D, E))) we get j == Line(C, center(Circle(C, D, E)))
By perpendicular_direction_conditions_v0 on D, H, I, A we get perpendicular(Line(A, I), Line(D, H))
By same_angle_converse_v1 on center(Circle(A, D, F)), A, D, F we get collinear(A, D, center(Circle(A, D, F)))
By perpendicular_direction_conditions_v0 on center(Circle(C, D, E)), D, orthocenter(A, C, D), A we get perpendicular(Line(A, orthocenter(A, C, D)), Line(D, center(Circle(C, D, E))))
By perpendicular_direction_conditions_v0 on H, D, I, orthocenter(A, C, D) we get perpendicular(Line(D, H), Line(I, orthocenter(A, C, D)))
By same_angle_converse_v1 on D, H, C, F we get collinear(C, D, H)
By same_angle_converse_v0 on C, H, I, A we get collinear(C, H, I)
By perpendicular_direction_conditions_v0 on C, center(Circle(C, D, E)), F, E we get perpendicular(Line(E, F), Line(C, center(Circle(C, D, E))))
By perpendicular_direction_conditions_v0 on center(Circle(C, D, E)), C, A, I we get perpendicular(Line(A, I), Line(C, center(Circle(C, D, E))))
By perpendicular_direction_conditions_v0 on D, H, A, orthocenter(A, C, D) we get perpendicular(Line(D, H), Line(A, orthocenter(A, C, D)))
By same_angle_converse_v0 on D, I, H, F we get collinear(D, H, I)
By perpendicular_direction_conditions_v0 on orthocenter(A, C, D), I, center(Circle(C, D, E)), D we get perpendicular(Line(I, orthocenter(A, C, D)), Line(D, center(Circle(C, D, E))))
By perpendicular_direction_conditions_v0 on F, E, center(Circle(C, D, E)), D we get perpendicular(Line(E, F), Line(D, center(Circle(C, D, E))))
By perpendicular_direction_conditions_v0 on orthocenter(A, C, D), A, C, center(Circle(C, D, E)) we get perpendicular(Line(A, orthocenter(A, C, D)), Line(C, center(Circle(C, D, E))))
By perpendicular_direction_conditions_v0 on C, center(Circle(C, D, E)), orthocenter(A, C, D), I we get perpendicular(Line(I, orthocenter(A, C, D)), Line(C, center(Circle(C, D, E))))
By perpendicular_direction_conditions_v0 on A, I, center(Circle(C, D, E)), D we get perpendicular(Line(A, I), Line(D, center(Circle(C, D, E))))
By perpendicular_direction_conditions_v0 on H, D, E, F we get perpendicular(Line(D, H), Line(E, F))
By parallel_line_definition on orthocenter(A, C, orthocenter(A, C, D)), Line(D, F), Line(G, H) we get Line(D, F) == parallel_line(orthocenter(A, C, orthocenter(A, C, D)), Line(G, H))
By parallel_line_definition on orthocenter(C, D, orthocenter(A, C, D)), Line(A, I), Line(E, F) we get Line(A, I) == parallel_line(orthocenter(C, D, orthocenter(A, C, D)), Line(E, F))
By parallel_line_definition on line_intersection(j, Line(E, F)), Line(E, F), Line(A, I) we get Line(E, F) == parallel_line(line_intersection(j, Line(E, F)), Line(A, I))
By in_imply_collinear on line_intersection(j, Line(E, F)), I, C we get collinear(C, I, line_intersection(j, Line(E, F)))
By sss_anti_similarity_v0 on F, E, I, E, F, I we get anti_similar_triangles(E, F, I, F, E, I)
By in_imply_collinear on orthocenter(C, D, orthocenter(A, C, D)), G, C we get collinear(C, G, orthocenter(C, D, orthocenter(A, C, D)))
By in_imply_collinear on orthocenter(C, D, orthocenter(A, C, D)), I, orthocenter(A, C, D) we get collinear(I, orthocenter(A, C, D), orthocenter(C, D, orthocenter(A, C, D)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, C, D)), C, I we get collinear(C, I, orthocenter(A, D, orthocenter(A, C, D)))
By reverse_direction on C, projection(C, h) we get 180 == direction(C, projection(C, h)) - direction(projection(C, h), C) mod 360
By in_imply_collinear on orthocenter(A, D, orthocenter(A, C, D)), H, C we get collinear(C, H, orthocenter(A, D, orthocenter(A, C, D)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, C, D)), F, G we get collinear(F, G, orthocenter(A, D, orthocenter(A, C, D)))
By in_imply_collinear on orthocenter(C, D, orthocenter(A, C, D)), F, A we get collinear(A, F, orthocenter(C, D, orthocenter(A, C, D)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, C, D)), projection(C, h), orthocenter(A, C, D) we get collinear(projection(C, h), orthocenter(A, C, D), orthocenter(A, D, orthocenter(A, C, D)))
By in_imply_collinear on orthocenter(A, C, orthocenter(A, C, D)), C, H we get collinear(C, H, orthocenter(A, C, orthocenter(A, C, D)))
By in_imply_collinear on orthocenter(A, C, orthocenter(A, C, D)), I, C we get collinear(C, I, orthocenter(A, C, orthocenter(A, C, D)))
By collinear_definition on D, C, center(Circle(C, D, E)) we get C in Line(D, center(Circle(C, D, E))), center(Circle(C, D, E)) in Line(C, D), Line(C, D) == Line(D, center(Circle(C, D, E))), 0 == 2 * angle(C, D, center(Circle(C, D, E))) mod 360
By in_imply_collinear on orthocenter(C, D, orthocenter(A, C, D)), I, A we get collinear(A, I, orthocenter(C, D, orthocenter(A, C, D)))
By in_imply_collinear on line_intersection(j, Line(E, F)), E, F we get collinear(E, F, line_intersection(j, Line(E, F)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, C, D)), D, I we get collinear(D, I, orthocenter(A, D, orthocenter(A, C, D)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, C, D)), G, C we get collinear(C, G, orthocenter(A, D, orthocenter(A, C, D)))
By sss_anti_similarity_v0 on E, I, F, F, I, E we get anti_similar_triangles(E, F, I, F, E, I)
By in_imply_collinear on orthocenter(C, D, orthocenter(A, C, D)), projection(C, h), A we get collinear(A, projection(C, h), orthocenter(C, D, orthocenter(A, C, D)))
By in_imply_collinear on orthocenter(C, D, orthocenter(A, C, D)), orthocenter(A, C, D), A we get collinear(A, orthocenter(A, C, D), orthocenter(C, D, orthocenter(A, C, D)))
By in_imply_collinear on orthocenter(C, D, orthocenter(A, C, D)), C, F we get collinear(C, F, orthocenter(C, D, orthocenter(A, C, D)))
By in_imply_collinear on orthocenter(A, C, orthocenter(A, C, D)), F, orthocenter(A, C, D) we get collinear(F, orthocenter(A, C, D), orthocenter(A, C, orthocenter(A, C, D)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, C, D)), projection(C, h), C we get collinear(C, projection(C, h), orthocenter(A, D, orthocenter(A, C, D)))
By in_imply_collinear on orthocenter(A, C, orthocenter(A, C, D)), D, C we get collinear(C, D, orthocenter(A, C, orthocenter(A, C, D)))
By in_imply_collinear on orthocenter(A, C, orthocenter(A, C, D)), I, D we get collinear(D, I, orthocenter(A, C, orthocenter(A, C, D)))
By in_imply_collinear on orthocenter(C, D, orthocenter(A, C, D)), G, F we get collinear(F, G, orthocenter(C, D, orthocenter(A, C, D)))
By in_imply_collinear on line_intersection(j, Line(E, F)), I, D we get collinear(D, I, line_intersection(j, Line(E, F)))
By asa_anti_congruence on E, F, I, F, E, I we get anti_congruent_triangles(E, F, I, F, E, I)
By in_imply_collinear on orthocenter(C, D, orthocenter(A, C, D)), D, A we get collinear(A, D, orthocenter(C, D, orthocenter(A, C, D)))
By in_imply_collinear on line_intersection(j, Line(E, F)), C, H we get collinear(C, H, line_intersection(j, Line(E, F)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, C, D)), C, orthocenter(A, C, D) we get collinear(C, orthocenter(A, C, D), orthocenter(A, D, orthocenter(A, C, D)))
By in_imply_collinear on orthocenter(A, C, orthocenter(A, C, D)), D, projection(C, h) we get collinear(D, projection(C, h), orthocenter(A, C, orthocenter(A, C, D)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, C, D)), A, F we get collinear(A, F, orthocenter(A, D, orthocenter(A, C, D)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, C, D)), A, C we get collinear(A, C, orthocenter(A, D, orthocenter(A, C, D)))
By sss_anti_congruence_v0 on E, I, F, F, I, E we get anti_congruent_triangles(E, F, I, F, E, I)
By in_imply_collinear on orthocenter(A, C, orthocenter(A, C, D)), F, D we get collinear(D, F, orthocenter(A, C, orthocenter(A, C, D)))
By in_imply_collinear on orthocenter(A, C, orthocenter(A, C, D)), orthocenter(A, C, D), D we get collinear(D, orthocenter(A, C, D), orthocenter(A, C, orthocenter(A, C, D)))
By sss_anti_similarity_v1 on I, E, F, I, F, E we get anti_similar_triangles(E, F, I, F, E, I)
By in_imply_collinear on line_intersection(j, Line(E, F)), D, C we get collinear(C, D, line_intersection(j, Line(E, F)))
By internal_angle_bisector_definition_v0 on D, H, D, C we get angle(D, C, H) == angle(H, C, D) mod 360
By parallel_line_angles_reverse_v3 on G, H, D, F we get angle(G, H, D) == angle(F, D, H) + 180 mod 360
By in_imply_collinear on orthocenter(A, C, orthocenter(A, C, D)), projection(C, h), A we get collinear(A, projection(C, h), orthocenter(A, C, orthocenter(A, C, D)))
By sss_anti_similarity_v1 on E, F, I, F, E, I we get anti_similar_triangles(E, F, I, F, E, I)
By in_imply_collinear on orthocenter(C, D, orthocenter(A, C, D)), projection(C, h), D we get collinear(D, projection(C, h), orthocenter(C, D, orthocenter(A, C, D)))
By in_imply_collinear on orthocenter(C, D, orthocenter(A, C, D)), G, A we get collinear(A, G, orthocenter(C, D, orthocenter(A, C, D)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, C, D)), G, A we get collinear(A, G, orthocenter(A, D, orthocenter(A, C, D)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, C, D)), D, C we get collinear(C, D, orthocenter(A, D, orthocenter(A, C, D)))
By in_imply_collinear on orthocenter(C, D, orthocenter(A, C, D)), C, A we get collinear(A, C, orthocenter(C, D, orthocenter(A, C, D)))
By sss_anti_similarity_v0 on I, F, E, I, E, F we get anti_similar_triangles(E, F, I, F, E, I)
By sss_anti_similarity_v1 on F, I, E, E, I, F we get anti_similar_triangles(E, F, I, F, E, I)
By aa_similarity on D, B, A, D, E, I we get similar_triangles(A, B, D, I, E, D)
By in_imply_collinear on orthocenter(A, D, orthocenter(A, C, D)), F, C we get collinear(C, F, orthocenter(A, D, orthocenter(A, C, D)))
By in_imply_collinear on orthocenter(A, C, orthocenter(A, C, D)), D, A we get collinear(A, D, orthocenter(A, C, orthocenter(A, C, D)))
By sss_anti_congruence_v1 on F, I, E, E, I, F we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on F, I, E, E, I, F we get anti_congruent_triangles(E, F, I, F, E, I)
By aa_anti_similarity on I, F, E, I, E, F we get anti_similar_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v0 on F, E, I, E, F, I we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on F, I, E, E, I, F we get anti_congruent_triangles(E, F, I, F, E, I)
By parallel_line_angles_reverse_v2 on F, D, H, G we get angle(F, D, H) == angle(G, H, D) + 180 mod 360
By internal_angle_bisector_definition_v0_r on E, center(Circle(C, D, E)), F, D we get internal_angle_bisector(E, D, F) == Line(D, center(Circle(C, D, E)))
By sss_anti_similarity_v0 on I, F, E, I, E, F we get anti_similar_triangles(E, F, I, F, E, I)
By sss_anti_similarity_v1 on I, E, F, I, F, E we get anti_similar_triangles(E, F, I, F, E, I)
By aa_anti_similarity on H, G, C, D, E, C we get anti_similar_triangles(C, D, E, C, H, G)
By reverse_direction on projection(C, h), A we get 180 == direction(projection(C, h), A) - direction(A, projection(C, h)) mod 360
By aa_similarity on D, I, A, D, E, B we get similar_triangles(A, D, I, B, D, E)
By sss_anti_congruence_v0 on F, E, I, E, F, I we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v0 on F, E, I, E, F, I we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v0 on E, I, F, F, I, E we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_similarity_v0 on E, I, F, F, I, E we get anti_similar_triangles(E, F, I, F, E, I)
By aa_anti_similarity on H, C, G, D, C, E we get anti_similar_triangles(C, D, E, C, H, G)
By sss_anti_similarity_v1 on I, E, F, I, F, E we get anti_similar_triangles(E, F, I, F, E, I)
By aa_similarity on D, C, F, H, C, G we get similar_triangles(C, D, F, C, H, G)
By sss_anti_similarity_v1 on F, I, E, E, I, F we get anti_similar_triangles(E, F, I, F, E, I)
By sas_anti_congruence on F, E, I, E, F, I we get anti_congruent_triangles(E, F, I, F, E, I)
By collinear_definition on C, center(Circle(C, D, E)), D we get center(Circle(C, D, E)) in Line(C, D), D in Line(C, center(Circle(C, D, E))), Line(C, D) == Line(C, center(Circle(C, D, E))), 0 == 2 * angle(center(Circle(C, D, E)), C, D) mod 360
By sss_anti_similarity_v0 on I, F, E, I, E, F we get anti_similar_triangles(E, F, I, F, E, I)
By internal_angle_bisector_definition_v0 on I, H, I, C we get angle(H, C, I) == angle(I, C, H) mod 360
By sss_anti_similarity_v1 on F, I, E, E, I, F we get anti_similar_triangles(E, F, I, F, E, I)
By internal_angle_bisector_definition_v0_r on E, center(Circle(C, D, E)), F, C we get internal_angle_bisector(E, C, F) == Line(C, center(Circle(C, D, E)))
By reverse_direction on orthocenter(A, C, D), projection(C, h) we get 180 == direction(orthocenter(A, C, D), projection(C, h)) - direction(projection(C, h), orthocenter(A, C, D)) mod 360
By sas_anti_similarity on E, F, I, F, E, I we get anti_similar_triangles(E, F, I, F, E, I)
By sss_anti_similarity_v1 on I, E, F, I, F, E we get anti_similar_triangles(E, F, I, F, E, I)
By reverse_direction on D, projection(C, h) we get 180 == direction(D, projection(C, h)) - direction(projection(C, h), D) mod 360
By sss_anti_congruence_v1 on I, E, F, I, F, E we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on E, F, I, F, E, I we get anti_congruent_triangles(E, F, I, F, E, I)
By sas_anti_congruence on I, F, E, I, E, F we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_similarity_v1 on I, E, F, I, F, E we get anti_similar_triangles(E, F, I, F, E, I)
By sas_anti_congruence on E, F, I, F, E, I we get anti_congruent_triangles(E, F, I, F, E, I)
By aa_anti_similarity on D, C, E, H, C, G we get anti_similar_triangles(C, D, E, C, H, G)
By sss_anti_similarity_v0 on I, F, E, I, E, F we get anti_similar_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v0 on I, F, E, I, E, F we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v0 on E, I, F, F, I, E we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on E, F, I, F, E, I we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v0 on I, F, E, I, E, F we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on E, F, I, F, E, I we get anti_congruent_triangles(E, F, I, F, E, I)
By sas_anti_similarity on F, E, I, E, F, I we get anti_similar_triangles(E, F, I, F, E, I)
By sas_anti_similarity on I, E, F, I, F, E we get anti_similar_triangles(E, F, I, F, E, I)
By aa_similarity on D, I, E, D, A, B we get similar_triangles(A, B, D, I, E, D)
By sss_anti_congruence_v0 on I, F, E, I, E, F we get anti_congruent_triangles(E, F, I, F, E, I)
By aa_similarity on D, A, I, D, B, E we get similar_triangles(A, D, I, B, D, E)
By sss_anti_congruence_v0 on E, I, F, F, I, E we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v0 on E, I, F, F, I, E we get anti_congruent_triangles(E, F, I, F, E, I)
By aa_anti_similarity on D, B, A, D, F, I we get anti_similar_triangles(A, B, D, I, F, D)
By sss_anti_similarity_v1 on F, I, E, E, I, F we get anti_similar_triangles(E, F, I, F, E, I)
By reverse_direction on projection(C, h), D we get 180 == direction(projection(C, h), D) - direction(D, projection(C, h)) mod 360
By sss_anti_congruence_v1 on E, F, I, F, E, I we get anti_congruent_triangles(E, F, I, F, E, I)
By reverse_direction on A, projection(C, h) we get 180 == direction(A, projection(C, h)) - direction(projection(C, h), A) mod 360
By sss_anti_similarity_v1 on E, F, I, F, E, I we get anti_similar_triangles(E, F, I, F, E, I)
By aa_anti_similarity on D, E, C, H, G, C we get anti_similar_triangles(C, D, E, C, H, G)
By sss_anti_similarity_v0 on F, E, I, E, F, I we get anti_similar_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on I, E, F, I, F, E we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_similarity_v1 on E, F, I, F, E, I we get anti_similar_triangles(E, F, I, F, E, I)
By asa_anti_congruence on F, E, I, E, F, I we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v0 on F, E, I, E, F, I we get anti_congruent_triangles(E, F, I, F, E, I)
By aa_similarity on D, F, C, H, G, C we get similar_triangles(C, D, F, C, H, G)
By sss_anti_congruence_v1 on I, E, F, I, F, E we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_similarity_v0 on F, E, I, E, F, I we get anti_similar_triangles(E, F, I, F, E, I)
By aa_anti_similarity on D, A, B, D, I, F we get anti_similar_triangles(A, B, D, I, F, D)
By sss_anti_congruence_v0 on F, E, I, E, F, I we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_similarity_v1 on E, F, I, F, E, I we get anti_similar_triangles(E, F, I, F, E, I)
By sss_anti_similarity_v0 on F, E, I, E, F, I we get anti_similar_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on F, I, E, E, I, F we get anti_congruent_triangles(E, F, I, F, E, I)
By aa_similarity on H, C, G, D, C, F we get similar_triangles(C, D, F, C, H, G)
By reverse_direction on projection(C, h), orthocenter(A, C, D) we get 180 == direction(projection(C, h), orthocenter(A, C, D)) - direction(orthocenter(A, C, D), projection(C, h)) mod 360
By aa_anti_similarity on H, C, G, A, C, I we get anti_similar_triangles(A, C, I, H, C, G)
By sss_anti_similarity_v0 on E, I, F, F, I, E we get anti_similar_triangles(E, F, I, F, E, I)
By sss_anti_similarity_v1 on E, F, I, F, E, I we get anti_similar_triangles(E, F, I, F, E, I)
By sss_anti_similarity_v0 on I, F, E, I, E, F we get anti_similar_triangles(E, F, I, F, E, I)
By sss_anti_similarity_v0 on E, I, F, F, I, E we get anti_similar_triangles(E, F, I, F, E, I)
By sss_anti_similarity_v1 on I, E, F, I, F, E we get anti_similar_triangles(E, F, I, F, E, I)
By aa_anti_similarity on H, G, C, A, I, C we get anti_similar_triangles(A, C, I, H, C, G)
By sss_anti_similarity_v1 on F, I, E, E, I, F we get anti_similar_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on F, I, E, E, I, F we get anti_congruent_triangles(E, F, I, F, E, I)
By aa_anti_similarity on D, F, I, D, B, A we get anti_similar_triangles(A, B, D, I, F, D)
By aa_similarity on D, E, I, D, B, A we get similar_triangles(A, B, D, I, E, D)
By aa_similarity on D, B, E, D, A, I we get similar_triangles(A, D, I, B, D, E)
By sss_anti_congruence_v1 on F, I, E, E, I, F we get anti_congruent_triangles(E, F, I, F, E, I)
By aa_anti_similarity on D, I, F, D, A, B we get anti_similar_triangles(A, B, D, I, F, D)
By sss_anti_similarity_v0 on F, E, I, E, F, I we get anti_similar_triangles(E, F, I, F, E, I)
By sss_anti_similarity_v0 on I, F, E, I, E, F we get anti_similar_triangles(E, F, I, F, E, I)
By aa_anti_similarity on A, C, I, H, C, G we get anti_similar_triangles(A, C, I, H, C, G)
By sas_anti_similarity on I, F, E, I, E, F we get anti_similar_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v0 on F, E, I, E, F, I we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v0 on I, F, E, I, E, F we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_similarity_v0 on E, I, F, F, I, E we get anti_similar_triangles(E, F, I, F, E, I)
By sss_anti_similarity_v0 on E, I, F, F, I, E we get anti_similar_triangles(E, F, I, F, E, I)
By collinear_definition on D, center(Circle(C, D, E)), C we get center(Circle(C, D, E)) in Line(C, D), C in Line(D, center(Circle(C, D, E))), Line(C, D) == Line(D, center(Circle(C, D, E))), 0 == 2 * angle(center(Circle(C, D, E)), D, C) mod 360
By sss_anti_similarity_v1 on F, I, E, E, I, F we get anti_similar_triangles(E, F, I, F, E, I)
By aa_similarity on D, E, B, D, I, A we get similar_triangles(A, D, I, B, D, E)
By sas_anti_congruence on I, E, F, I, F, E we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_similarity_v1 on E, F, I, F, E, I we get anti_similar_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v0 on I, F, E, I, E, F we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_similarity_v0 on F, E, I, E, F, I we get anti_similar_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v0 on I, F, E, I, E, F we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on E, F, I, F, E, I we get anti_congruent_triangles(E, F, I, F, E, I)
By reverse_direction on projection(C, h), C we get 180 == direction(projection(C, h), C) - direction(C, projection(C, h)) mod 360
By collinear_definition on C, D, center(Circle(C, D, E)) we get D in Line(C, center(Circle(C, D, E))), center(Circle(C, D, E)) in Line(C, D), Line(C, D) == Line(C, center(Circle(C, D, E))), 0 == 2 * angle(D, C, center(Circle(C, D, E))) mod 360
By aa_similarity on H, G, C, D, F, C we get similar_triangles(C, D, F, C, H, G)
By sss_anti_congruence_v0 on E, I, F, F, I, E we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on E, F, I, F, E, I we get anti_congruent_triangles(E, F, I, F, E, I)
By aa_similarity on D, A, B, D, I, E we get similar_triangles(A, B, D, I, E, D)
By sss_anti_congruence_v1 on I, E, F, I, F, E we get anti_congruent_triangles(E, F, I, F, E, I)
By aa_anti_similarity on A, I, C, H, G, C we get anti_similar_triangles(A, C, I, H, C, G)
By sss_anti_congruence_v1 on I, E, F, I, F, E we get anti_congruent_triangles(E, F, I, F, E, I)
By aa_anti_similarity on I, E, F, I, F, E we get anti_similar_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on I, E, F, I, F, E we get anti_congruent_triangles(E, F, I, F, E, I)
By internal_angle_bisector_definition_v0_r on D, A, D, center(Circle(A, D, F)) we get Line(A, center(Circle(A, D, F))) == internal_angle_bisector(D, center(Circle(A, D, F)), D)
By internal_angle_bisector_definition_v0_r on A, D, A, projection(C, h) we get Line(D, projection(C, h)) == internal_angle_bisector(A, projection(C, h), A)
By external_angle_bisector_definition_v0_r on A, C, A, projection(C, h) we get Line(C, projection(C, h)) == external_angle_bisector(A, projection(C, h), A)
By reverse_direction on center(Circle(A, D, F)), I we get 180 == direction(center(Circle(A, D, F)), I) - direction(I, center(Circle(A, D, F))) mod 360
By power_of_a_point_in_circle on A, Circle(A, C, E) we get 0 == power_of_a_point(A, Circle(A, C, E))
By external_angle_bisector_definition_v0_r on F, A, E, I we get Line(A, I) == external_angle_bisector(E, I, F)
By power_of_a_point_in_circle on C, Circle(A, C, E) we get 0 == power_of_a_point(C, Circle(A, C, E))
By internal_angle_bisector_definition_v0_r on projection(C, h), D, projection(C, h), A we get Line(A, D) == internal_angle_bisector(projection(C, h), A, projection(C, h))
By power_of_a_point_in_circle on E, Circle(A, C, E) we get 0 == power_of_a_point(E, Circle(A, C, E))
By anti_similar_triangle_basic_properties on A, F, E, H, D, F we get angle(A, F, E) == 0 - angle(H, D, F) mod 360, angle(F, E, A) == 0 - angle(D, F, H) mod 360, angle(E, A, F) == 0 - angle(F, H, D) mod 360, log(distance(A, F)) + log(distance(D, F)) == log(distance(D, H)) + log(distance(E, F)), log(distance(D, F)) + log(distance(A, E)) == log(distance(E, F)) + log(distance(F, H)), log(distance(A, E)) + log(distance(D, H)) == log(distance(F, H)) + log(distance(A, F))
By internal_angle_bisector_definition_v0_r on A, D, A, center(Circle(A, D, F)) we get Line(D, center(Circle(A, D, F))) == internal_angle_bisector(A, center(Circle(A, D, F)), A)
By internal_angle_bisector_definition_v0_r on C, orthocenter(A, C, D), C, projection(C, h) we get Line(projection(C, h), orthocenter(A, C, D)) == internal_angle_bisector(C, projection(C, h), C)
By internal_angle_bisector_definition_v0_r on orthocenter(A, C, D), C, orthocenter(A, C, D), projection(C, h) we get Line(C, projection(C, h)) == internal_angle_bisector(orthocenter(A, C, D), projection(C, h), orthocenter(A, C, D))
By external_angle_bisector_definition_v0_r on D, orthocenter(A, C, D), D, projection(C, h) we get Line(projection(C, h), orthocenter(A, C, D)) == external_angle_bisector(D, projection(C, h), D)
By internal_angle_bisector_definition_v0_r on D, projection(C, h), D, A we get internal_angle_bisector(D, A, D) == Line(A, projection(C, h))
By external_angle_bisector_definition_v0_r on A, orthocenter(A, C, D), A, projection(C, h) we get Line(projection(C, h), orthocenter(A, C, D)) == external_angle_bisector(A, projection(C, h), A)
By isosceles_triangle_midpoint on center(Circle(A, D, F)), F, A we get midpoint(A, F) in median(center(Circle(A, D, F)), A, F)
By reverse_direction on center(Circle(A, D, F)), A we get 180 == direction(center(Circle(A, D, F)), A) - direction(A, center(Circle(A, D, F))) mod 360
By external_angle_bisector_definition_v0_r on C, D, C, projection(C, h) we get Line(D, projection(C, h)) == external_angle_bisector(C, projection(C, h), C)
By external_angle_bisector_definition_v0_r on D, C, D, projection(C, h) we get Line(C, projection(C, h)) == external_angle_bisector(D, projection(C, h), D)
By external_angle_bisector_definition_v0_r on orthocenter(A, C, D), A, orthocenter(A, C, D), projection(C, h) we get Line(A, projection(C, h)) == external_angle_bisector(orthocenter(A, C, D), projection(C, h), orthocenter(A, C, D))
By internal_angle_bisector_definition_v0_r on projection(C, h), orthocenter(A, C, D), projection(C, h), C we get Line(C, orthocenter(A, C, D)) == internal_angle_bisector(projection(C, h), C, projection(C, h))
By internal_angle_bisector_definition_v0_r on orthocenter(A, C, D), projection(C, h), orthocenter(A, C, D), C we get Line(C, projection(C, h)) == internal_angle_bisector(orthocenter(A, C, D), C, orthocenter(A, C, D))
By external_angle_bisector_definition_v0_r on orthocenter(A, C, D), D, orthocenter(A, C, D), projection(C, h) we get Line(D, projection(C, h)) == external_angle_bisector(orthocenter(A, C, D), projection(C, h), orthocenter(A, C, D))
By internal_angle_bisector_definition_v0_r on projection(C, h), C, projection(C, h), orthocenter(A, C, D) we get Line(C, orthocenter(A, C, D)) == internal_angle_bisector(projection(C, h), orthocenter(A, C, D), projection(C, h))
By external_angle_bisector_definition_v0_r on C, A, C, projection(C, h) we get Line(A, projection(C, h)) == external_angle_bisector(C, projection(C, h), C)
By internal_angle_bisector_definition_v0_r on A, projection(C, h), A, D we get internal_angle_bisector(A, D, A) == Line(D, projection(C, h))
By power_of_a_point_on_circle on H, Circle(A, C, E) we get 0 == power_of_a_point(H, Circle(A, C, E))
By anti_similar_triangle_basic_properties on A, E, F, H, F, D we get angle(A, E, F) == 0 - angle(H, F, D) mod 360, angle(E, F, A) == 0 - angle(F, D, H) mod 360, angle(F, A, E) == 0 - angle(D, H, F) mod 360, log(distance(A, E)) + log(distance(D, F)) == log(distance(F, H)) + log(distance(E, F)), log(distance(D, F)) + log(distance(A, F)) == log(distance(E, F)) + log(distance(D, H)), log(distance(A, F)) + log(distance(F, H)) == log(distance(D, H)) + log(distance(A, E))
By reverse_direction on center(Circle(A, D, F)), F we get 180 == direction(center(Circle(A, D, F)), F) - direction(F, center(Circle(A, D, F))) mod 360
By internal_angle_bisector_definition_v0_r on C, projection(C, h), C, orthocenter(A, C, D) we get Line(projection(C, h), orthocenter(A, C, D)) == internal_angle_bisector(C, orthocenter(A, C, D), C)
By internal_angle_bisector_definition_v0_r on projection(C, h), A, projection(C, h), D we get Line(A, D) == internal_angle_bisector(projection(C, h), D, projection(C, h))
By internal_angle_bisector_definition_v0_r on D, A, D, projection(C, h) we get Line(A, projection(C, h)) == internal_angle_bisector(D, projection(C, h), D)
By reverse_direction on center(Circle(A, D, F)), D we get 180 == direction(center(Circle(A, D, F)), D) - direction(D, center(Circle(A, D, F))) mod 360
By perpendicular_lines_draw_intersection on i, Line(E, I) we get exists(line_intersection(i, Line(E, I)))
By altitude_definition on I, D, B, Line(E, I) we get Line(E, I) == altitude(I, B, D)
By anti_similar_triangle_basic_properties on center(Circle(C, D, E)), C, E, center(Circle(C, D, E)), E, C we get angle(center(Circle(C, D, E)), C, E) == 0 - angle(center(Circle(C, D, E)), E, C) mod 360, angle(C, E, center(Circle(C, D, E))) == 0 - angle(E, C, center(Circle(C, D, E))) mod 360, angle(E, center(Circle(C, D, E)), C) == 0 - angle(C, center(Circle(C, D, E)), E) mod 360, log(distance(C, center(Circle(C, D, E)))) + log(distance(C, E)) == log(distance(E, center(Circle(C, D, E)))) + log(distance(C, E)), log(distance(C, E)) + log(distance(C, center(Circle(C, D, E)))) == log(distance(C, E)) + log(distance(E, center(Circle(C, D, E)))), log(distance(C, center(Circle(C, D, E)))) + log(distance(C, center(Circle(C, D, E)))) == log(distance(E, center(Circle(C, D, E)))) + log(distance(E, center(Circle(C, D, E))))
By altitude_definition on orthocenter(A, C, orthocenter(A, C, D)), A, C, Line(D, F) we get Line(D, F) == altitude(orthocenter(A, C, orthocenter(A, C, D)), A, C)
By anti_similar_triangle_basic_properties on E, F, center(Circle(C, D, E)), F, E, center(Circle(C, D, E)) we get angle(E, F, center(Circle(C, D, E))) == 0 - angle(F, E, center(Circle(C, D, E))) mod 360, angle(F, center(Circle(C, D, E)), E) == 0 - angle(E, center(Circle(C, D, E)), F) mod 360, angle(center(Circle(C, D, E)), E, F) == 0 - angle(center(Circle(C, D, E)), F, E) mod 360, log(distance(E, F)) + log(distance(E, center(Circle(C, D, E)))) == log(distance(E, F)) + log(distance(F, center(Circle(C, D, E)))), log(distance(E, center(Circle(C, D, E)))) + log(distance(E, center(Circle(C, D, E)))) == log(distance(F, center(Circle(C, D, E)))) + log(distance(F, center(Circle(C, D, E)))), log(distance(E, center(Circle(C, D, E)))) + log(distance(E, F)) == log(distance(F, center(Circle(C, D, E)))) + log(distance(E, F))
By power_of_a_point_definition on G, A, C, Circle(A, C, E) we get log(distance(A, G)) + log(distance(C, G)) == log(power_of_a_point(G, Circle(A, C, E)))
By altitude_definition on orthocenter(A, C, orthocenter(A, C, D)), orthocenter(A, C, D), C, h we get h == altitude(orthocenter(A, C, orthocenter(A, C, D)), C, orthocenter(A, C, D))
By altitude_definition on orthocenter(A, C, orthocenter(A, C, D)), I, A, j we get j == altitude(orthocenter(A, C, orthocenter(A, C, D)), A, I)
By altitude_definition on orthocenter(A, D, orthocenter(A, C, D)), A, I, j we get j == altitude(orthocenter(A, D, orthocenter(A, C, D)), A, I)
By altitude_definition on H, F, E, j we get j == altitude(H, E, F)
By altitude_definition on orthocenter(A, C, D), H, C, Line(A, I) we get Line(A, I) == altitude(orthocenter(A, C, D), C, H)
By anti_similar_triangle_basic_properties on D, center(Circle(C, D, E)), E, E, center(Circle(C, D, E)), D we get angle(D, center(Circle(C, D, E)), E) == 0 - angle(E, center(Circle(C, D, E)), D) mod 360, angle(center(Circle(C, D, E)), E, D) == 0 - angle(center(Circle(C, D, E)), D, E) mod 360, angle(E, D, center(Circle(C, D, E))) == 0 - angle(D, E, center(Circle(C, D, E))) mod 360, log(distance(D, center(Circle(C, D, E)))) + log(distance(D, center(Circle(C, D, E)))) == log(distance(E, center(Circle(C, D, E)))) + log(distance(E, center(Circle(C, D, E)))), log(distance(D, center(Circle(C, D, E)))) + log(distance(D, E)) == log(distance(E, center(Circle(C, D, E)))) + log(distance(D, E)), log(distance(D, E)) + log(distance(D, center(Circle(C, D, E)))) == log(distance(D, E)) + log(distance(E, center(Circle(C, D, E))))
By altitude_definition on E, B, D, Line(E, I) we get Line(E, I) == altitude(E, B, D)
By altitude_definition on H, orthocenter(A, C, D), I, j we get j == altitude(H, I, orthocenter(A, C, D))
By altitude_definition on orthocenter(A, D, orthocenter(A, C, D)), I, orthocenter(A, C, D), j we get j == altitude(orthocenter(A, D, orthocenter(A, C, D)), I, orthocenter(A, C, D))
By altitude_definition on orthocenter(C, D, orthocenter(A, C, D)), projection(C, h), orthocenter(A, C, D), h we get h == altitude(orthocenter(C, D, orthocenter(A, C, D)), projection(C, h), orthocenter(A, C, D))
By altitude_definition on orthocenter(C, D, orthocenter(A, C, D)), D, orthocenter(A, C, D), g we get g == altitude(orthocenter(C, D, orthocenter(A, C, D)), D, orthocenter(A, C, D))
By altitude_definition on orthocenter(A, C, orthocenter(A, C, D)), C, F, Line(D, F) we get Line(D, F) == altitude(orthocenter(A, C, orthocenter(A, C, D)), C, F)
By altitude_definition on orthocenter(A, C, orthocenter(A, C, D)), E, F, j we get j == altitude(orthocenter(A, C, orthocenter(A, C, D)), E, F)
By altitude_definition on orthocenter(A, D, orthocenter(A, C, D)), D, A, altitude(C, A, D) we get altitude(C, A, D) == altitude(orthocenter(A, D, orthocenter(A, C, D)), A, D)
By isosceles_triangle_properties on center(Circle(A, D, F)), A, I we get distance(A, center(Circle(A, D, F))) == distance(I, center(Circle(A, D, F))), angle(A, I, center(Circle(A, D, F))) == angle(center(Circle(A, D, F)), A, I) mod 360
By altitude_definition on B, I, E, i we get i == altitude(B, E, I)
By isosceles_triangle_properties on center(Circle(A, D, F)), A, F we get distance(A, center(Circle(A, D, F))) == distance(F, center(Circle(A, D, F))), angle(A, F, center(Circle(A, D, F))) == angle(center(Circle(A, D, F)), A, F) mod 360
By altitude_definition on orthocenter(C, D, orthocenter(A, C, D)), H, G, g we get g == altitude(orthocenter(C, D, orthocenter(A, C, D)), G, H)
By altitude_definition on orthocenter(A, D, orthocenter(A, C, D)), G, H, g we get g == altitude(orthocenter(A, D, orthocenter(A, C, D)), G, H)
By altitude_definition on orthocenter(A, C, orthocenter(A, C, D)), orthocenter(A, C, D), projection(C, h), h we get h == altitude(orthocenter(A, C, orthocenter(A, C, D)), projection(C, h), orthocenter(A, C, D))
By altitude_definition on D, E, I, i we get i == altitude(D, E, I)
By altitude_definition on orthocenter(A, C, orthocenter(A, C, D)), F, A, Line(D, F) we get Line(D, F) == altitude(orthocenter(A, C, orthocenter(A, C, D)), A, F)
By altitude_definition on orthocenter(A, D, orthocenter(A, C, D)), D, F, g we get g == altitude(orthocenter(A, D, orthocenter(A, C, D)), D, F)
By sas_anti_congruence on F, center(Circle(A, D, F)), A, A, center(Circle(A, D, F)), F we get anti_congruent_triangles(A, F, center(Circle(A, D, F)), F, A, center(Circle(A, D, F)))
By altitude_definition on orthocenter(A, C, orthocenter(A, C, D)), G, C, Line(D, F) we get Line(D, F) == altitude(orthocenter(A, C, orthocenter(A, C, D)), C, G)
By altitude_definition on line_intersection(j, Line(E, F)), I, A, j we get j == altitude(line_intersection(j, Line(E, F)), A, I)
By anti_similar_triangle_basic_properties on C, center(Circle(C, D, E)), F, F, center(Circle(C, D, E)), C we get angle(C, center(Circle(C, D, E)), F) == 0 - angle(F, center(Circle(C, D, E)), C) mod 360, angle(center(Circle(C, D, E)), F, C) == 0 - angle(center(Circle(C, D, E)), C, F) mod 360, angle(F, C, center(Circle(C, D, E))) == 0 - angle(C, F, center(Circle(C, D, E))) mod 360, log(distance(C, center(Circle(C, D, E)))) + log(distance(C, center(Circle(C, D, E)))) == log(distance(F, center(Circle(C, D, E)))) + log(distance(F, center(Circle(C, D, E)))), log(distance(C, center(Circle(C, D, E)))) + log(distance(C, F)) == log(distance(F, center(Circle(C, D, E)))) + log(distance(C, F)), log(distance(C, F)) + log(distance(C, center(Circle(C, D, E)))) == log(distance(C, F)) + log(distance(F, center(Circle(C, D, E))))
By altitude_definition on E, C, H, Line(E, F) we get Line(E, F) == altitude(E, C, H)
By isosceles_triangle_properties on center(Circle(A, D, F)), D, I we get distance(D, center(Circle(A, D, F))) == distance(I, center(Circle(A, D, F))), angle(D, I, center(Circle(A, D, F))) == angle(center(Circle(A, D, F)), D, I) mod 360
By altitude_definition on orthocenter(C, D, orthocenter(A, C, D)), H, C, Line(A, I) we get Line(A, I) == altitude(orthocenter(C, D, orthocenter(A, C, D)), C, H)
By altitude_definition on line_intersection(j, Line(E, F)), A, orthocenter(A, C, D), j we get j == altitude(line_intersection(j, Line(E, F)), A, orthocenter(A, C, D))
By altitude_definition on line_intersection(j, Line(E, F)), orthocenter(A, C, D), I, j we get j == altitude(line_intersection(j, Line(E, F)), I, orthocenter(A, C, D))
By altitude_definition on orthocenter(A, D, orthocenter(A, C, D)), orthocenter(A, C, D), A, j we get j == altitude(orthocenter(A, D, orthocenter(A, C, D)), A, orthocenter(A, C, D))
By anti_similar_triangle_basic_properties on center(Circle(C, D, E)), D, F, center(Circle(C, D, E)), F, D we get angle(center(Circle(C, D, E)), D, F) == 0 - angle(center(Circle(C, D, E)), F, D) mod 360, angle(D, F, center(Circle(C, D, E))) == 0 - angle(F, D, center(Circle(C, D, E))) mod 360, angle(F, center(Circle(C, D, E)), D) == 0 - angle(D, center(Circle(C, D, E)), F) mod 360, log(distance(D, center(Circle(C, D, E)))) + log(distance(D, F)) == log(distance(F, center(Circle(C, D, E)))) + log(distance(D, F)), log(distance(D, F)) + log(distance(D, center(Circle(C, D, E)))) == log(distance(D, F)) + log(distance(F, center(Circle(C, D, E)))), log(distance(D, center(Circle(C, D, E)))) + log(distance(D, center(Circle(C, D, E)))) == log(distance(F, center(Circle(C, D, E)))) + log(distance(F, center(Circle(C, D, E))))
By isosceles_triangle_properties on center(Circle(A, D, F)), I, F we get distance(F, center(Circle(A, D, F))) == distance(I, center(Circle(A, D, F))), angle(I, F, center(Circle(A, D, F))) == angle(center(Circle(A, D, F)), I, F) mod 360
By altitude_definition on orthocenter(A, C, orthocenter(A, C, D)), F, G, Line(D, F) we get Line(D, F) == altitude(orthocenter(A, C, orthocenter(A, C, D)), F, G)
By altitude_definition on orthocenter(A, C, orthocenter(A, C, D)), I, orthocenter(A, C, D), j we get j == altitude(orthocenter(A, C, orthocenter(A, C, D)), I, orthocenter(A, C, D))
By altitude_definition on orthocenter(A, C, orthocenter(A, C, D)), A, orthocenter(A, C, D), j we get j == altitude(orthocenter(A, C, orthocenter(A, C, D)), A, orthocenter(A, C, D))
By isosceles_triangle_properties on center(Circle(A, D, F)), F, D we get distance(D, center(Circle(A, D, F))) == distance(F, center(Circle(A, D, F))), angle(F, D, center(Circle(A, D, F))) == angle(center(Circle(A, D, F)), F, D) mod 360
By radical_axis_definition_v0 on orthocenter(C, D, orthocenter(A, C, D)), Circle(A, D, F), c we get power_of_a_point(orthocenter(C, D, orthocenter(A, C, D)), c) == power_of_a_point(orthocenter(C, D, orthocenter(A, C, D)), Circle(A, D, F))
By power_of_a_point_definition on B, E, C, Circle(A, C, E) we get log(distance(B, E)) + log(distance(B, C)) == log(power_of_a_point(B, Circle(A, C, E)))
By radical_axis_definition_v0 on orthocenter(A, D, orthocenter(A, C, D)), Circle(A, D, F), c we get power_of_a_point(orthocenter(A, D, orthocenter(A, C, D)), c) == power_of_a_point(orthocenter(A, D, orthocenter(A, C, D)), Circle(A, D, F))
By sas_anti_congruence on A, center(Circle(A, D, F)), I, I, center(Circle(A, D, F)), A we get anti_congruent_triangles(A, I, center(Circle(A, D, F)), I, A, center(Circle(A, D, F)))
By altitude_definition on orthocenter(C, D, orthocenter(A, C, D)), D, C, Line(A, I) we get Line(A, I) == altitude(orthocenter(C, D, orthocenter(A, C, D)), C, D)
By isosceles_triangle_properties on center(Circle(A, D, F)), F, I we get distance(F, center(Circle(A, D, F))) == distance(I, center(Circle(A, D, F))), angle(F, I, center(Circle(A, D, F))) == angle(center(Circle(A, D, F)), F, I) mod 360
By altitude_definition on orthocenter(A, C, orthocenter(A, C, D)), A, G, Line(D, F) we get Line(D, F) == altitude(orthocenter(A, C, orthocenter(A, C, D)), A, G)
By altitude_definition on orthocenter(C, D, orthocenter(A, C, D)), F, orthocenter(A, C, D), g we get g == altitude(orthocenter(C, D, orthocenter(A, C, D)), F, orthocenter(A, C, D))
By radical_axis_definition_v0 on line_intersection(j, Line(E, F)), Circle(C, D, E), c we get power_of_a_point(line_intersection(j, Line(E, F)), c) == power_of_a_point(line_intersection(j, Line(E, F)), Circle(C, D, E))
By altitude_definition on orthocenter(A, D, orthocenter(A, C, D)), F, orthocenter(A, C, D), g we get g == altitude(orthocenter(A, D, orthocenter(A, C, D)), F, orthocenter(A, C, D))
By altitude_definition on orthocenter(A, D, orthocenter(A, C, D)), D, projection(C, h), altitude(C, A, D) we get altitude(C, A, D) == altitude(orthocenter(A, D, orthocenter(A, C, D)), D, projection(C, h))
By sas_anti_congruence on D, center(Circle(A, D, F)), I, I, center(Circle(A, D, F)), D we get anti_congruent_triangles(D, I, center(Circle(A, D, F)), I, D, center(Circle(A, D, F)))
By altitude_definition on H, I, A, j we get j == altitude(H, A, I)
By altitude_definition on orthocenter(A, C, orthocenter(A, C, D)), projection(C, h), C, h we get h == altitude(orthocenter(A, C, orthocenter(A, C, D)), C, projection(C, h))
By altitude_definition on orthocenter(C, D, orthocenter(A, C, D)), orthocenter(A, C, D), C, h we get h == altitude(orthocenter(C, D, orthocenter(A, C, D)), C, orthocenter(A, C, D))
By altitude_definition on orthocenter(A, D, orthocenter(A, C, D)), E, F, j we get j == altitude(orthocenter(A, D, orthocenter(A, C, D)), E, F)
By sas_anti_congruence on A, center(Circle(A, D, F)), F, F, center(Circle(A, D, F)), A we get anti_congruent_triangles(A, F, center(Circle(A, D, F)), F, A, center(Circle(A, D, F)))
By altitude_definition on orthocenter(C, D, orthocenter(A, C, D)), I, D, Line(A, I) we get Line(A, I) == altitude(orthocenter(C, D, orthocenter(A, C, D)), D, I)
By altitude_definition on orthocenter(C, D, orthocenter(A, C, D)), I, C, Line(A, I) we get Line(A, I) == altitude(orthocenter(C, D, orthocenter(A, C, D)), C, I)
By altitude_definition on orthocenter(C, D, orthocenter(A, C, D)), F, D, g we get g == altitude(orthocenter(C, D, orthocenter(A, C, D)), D, F)
By altitude_definition on orthocenter(A, D, orthocenter(A, C, D)), A, projection(C, h), altitude(C, A, D) we get altitude(C, A, D) == altitude(orthocenter(A, D, orthocenter(A, C, D)), A, projection(C, h))
By isosceles_triangle_properties on center(Circle(A, D, F)), F, A we get distance(A, center(Circle(A, D, F))) == distance(F, center(Circle(A, D, F))), angle(F, A, center(Circle(A, D, F))) == angle(center(Circle(A, D, F)), F, A) mod 360
By sas_anti_congruence on I, center(Circle(A, D, F)), D, D, center(Circle(A, D, F)), I we get anti_congruent_triangles(D, I, center(Circle(A, D, F)), I, D, center(Circle(A, D, F)))
By altitude_definition on F, H, C, Line(E, F) we get Line(E, F) == altitude(F, C, H)
By altitude_definition on orthocenter(C, D, orthocenter(A, C, D)), C, projection(C, h), h we get h == altitude(orthocenter(C, D, orthocenter(A, C, D)), C, projection(C, h))
By power_of_a_point_definition on F, C, A, Circle(A, C, E) we get log(distance(C, F)) + log(distance(A, F)) == log(power_of_a_point(F, Circle(A, C, E)))
By radical_axis_definition_v0 on orthocenter(A, C, orthocenter(A, C, D)), Circle(A, D, F), Circle(C, D, E) we get power_of_a_point(orthocenter(A, C, orthocenter(A, C, D)), Circle(A, D, F)) == power_of_a_point(orthocenter(A, C, orthocenter(A, C, D)), Circle(C, D, E))
By altitude_definition on orthocenter(A, D, orthocenter(A, C, D)), D, orthocenter(A, C, D), g we get g == altitude(orthocenter(A, D, orthocenter(A, C, D)), D, orthocenter(A, C, D))
By sas_anti_congruence on I, center(Circle(A, D, F)), F, F, center(Circle(A, D, F)), I we get anti_congruent_triangles(F, I, center(Circle(A, D, F)), I, F, center(Circle(A, D, F)))
By altitude_definition on A, C, H, Line(A, I) we get Line(A, I) == altitude(A, C, H)
By sas_anti_congruence on F, center(Circle(A, D, F)), I, I, center(Circle(A, D, F)), F we get anti_congruent_triangles(F, I, center(Circle(A, D, F)), I, F, center(Circle(A, D, F)))
By altitude_definition on H, orthocenter(A, C, D), A, j we get j == altitude(H, A, orthocenter(A, C, D))
By sas_anti_congruence on I, center(Circle(A, D, F)), A, A, center(Circle(A, D, F)), I we get anti_congruent_triangles(A, I, center(Circle(A, D, F)), I, A, center(Circle(A, D, F)))
By isosceles_triangle_properties on center(Circle(A, D, F)), I, A we get distance(A, center(Circle(A, D, F))) == distance(I, center(Circle(A, D, F))), angle(I, A, center(Circle(A, D, F))) == angle(center(Circle(A, D, F)), I, A) mod 360
By sas_anti_congruence on F, center(Circle(A, D, F)), D, D, center(Circle(A, D, F)), F we get anti_congruent_triangles(D, F, center(Circle(A, D, F)), F, D, center(Circle(A, D, F)))
By isosceles_triangle_properties on center(Circle(A, D, F)), I, D we get distance(D, center(Circle(A, D, F))) == distance(I, center(Circle(A, D, F))), angle(I, D, center(Circle(A, D, F))) == angle(center(Circle(A, D, F)), I, D) mod 360
By isosceles_triangle_properties on center(Circle(A, D, F)), D, F we get distance(D, center(Circle(A, D, F))) == distance(F, center(Circle(A, D, F))), angle(D, F, center(Circle(A, D, F))) == angle(center(Circle(A, D, F)), D, F) mod 360
By sas_anti_congruence on D, center(Circle(A, D, F)), F, F, center(Circle(A, D, F)), D we get anti_congruent_triangles(D, F, center(Circle(A, D, F)), F, D, center(Circle(A, D, F)))
By isosceles_triangle_altitude_v3 on center(Circle(A, D, F)), A, F we get identical(perpendicular_bisector(A, F), internal_angle_bisector(A, center(Circle(A, D, F)), F), perpendicular_line(center(Circle(A, D, F)), Line(A, F)))
By isosceles_triangle_altitude_v3 on center(Circle(A, D, F)), F, A we get identical(perpendicular_bisector(A, F), internal_angle_bisector(A, center(Circle(A, D, F)), F), perpendicular_line(center(Circle(A, D, F)), Line(A, F)))
By similar_triangle_basic_properties on E, center(Circle(C, D, E)), C, C, center(Circle(C, D, E)), F we get angle(C, center(Circle(C, D, E)), F) == angle(E, center(Circle(C, D, E)), C) mod 360, angle(center(Circle(C, D, E)), C, E) == angle(center(Circle(C, D, E)), F, C) mod 360, angle(C, E, center(Circle(C, D, E))) == angle(F, C, center(Circle(C, D, E))) mod 360, log(distance(C, center(Circle(C, D, E)))) + log(distance(C, center(Circle(C, D, E)))) == log(distance(E, center(Circle(C, D, E)))) + log(distance(F, center(Circle(C, D, E)))), log(distance(C, center(Circle(C, D, E)))) + log(distance(C, F)) == log(distance(F, center(Circle(C, D, E)))) + log(distance(C, E)), log(distance(C, E)) + log(distance(C, center(Circle(C, D, E)))) == log(distance(C, F)) + log(distance(E, center(Circle(C, D, E))))
By similar_triangle_basic_properties on center(Circle(C, D, E)), D, F, center(Circle(C, D, E)), E, D we get angle(center(Circle(C, D, E)), D, F) == angle(center(Circle(C, D, E)), E, D) mod 360, angle(D, F, center(Circle(C, D, E))) == angle(E, D, center(Circle(C, D, E))) mod 360, angle(D, center(Circle(C, D, E)), E) == angle(F, center(Circle(C, D, E)), D) mod 360, log(distance(D, center(Circle(C, D, E)))) + log(distance(D, E)) == log(distance(E, center(Circle(C, D, E)))) + log(distance(D, F)), log(distance(D, E)) + log(distance(F, center(Circle(C, D, E)))) == log(distance(D, F)) + log(distance(D, center(Circle(C, D, E)))), log(distance(D, center(Circle(C, D, E)))) + log(distance(D, center(Circle(C, D, E)))) == log(distance(F, center(Circle(C, D, E)))) + log(distance(E, center(Circle(C, D, E))))
By similar_triangle_basic_properties on center(Circle(C, D, E)), C, F, center(Circle(C, D, E)), E, C we get angle(center(Circle(C, D, E)), C, F) == angle(center(Circle(C, D, E)), E, C) mod 360, angle(C, F, center(Circle(C, D, E))) == angle(E, C, center(Circle(C, D, E))) mod 360, angle(C, center(Circle(C, D, E)), E) == angle(F, center(Circle(C, D, E)), C) mod 360, log(distance(C, center(Circle(C, D, E)))) + log(distance(C, E)) == log(distance(E, center(Circle(C, D, E)))) + log(distance(C, F)), log(distance(C, E)) + log(distance(F, center(Circle(C, D, E)))) == log(distance(C, F)) + log(distance(C, center(Circle(C, D, E)))), log(distance(C, center(Circle(C, D, E)))) + log(distance(C, center(Circle(C, D, E)))) == log(distance(F, center(Circle(C, D, E)))) + log(distance(E, center(Circle(C, D, E))))
By anti_similar_triangle_basic_properties on E, center(Circle(C, D, E)), C, F, center(Circle(C, D, E)), C we get angle(E, center(Circle(C, D, E)), C) == 0 - angle(F, center(Circle(C, D, E)), C) mod 360, angle(center(Circle(C, D, E)), C, E) == 0 - angle(center(Circle(C, D, E)), C, F) mod 360, angle(C, E, center(Circle(C, D, E))) == 0 - angle(C, F, center(Circle(C, D, E))) mod 360, log(distance(E, center(Circle(C, D, E)))) + log(distance(C, center(Circle(C, D, E)))) == log(distance(F, center(Circle(C, D, E)))) + log(distance(C, center(Circle(C, D, E)))), log(distance(C, center(Circle(C, D, E)))) + log(distance(C, E)) == log(distance(C, center(Circle(C, D, E)))) + log(distance(C, F)), log(distance(C, E)) + log(distance(F, center(Circle(C, D, E)))) == log(distance(C, F)) + log(distance(E, center(Circle(C, D, E))))
By anti_similar_triangle_basic_properties on center(Circle(C, D, E)), E, C, center(Circle(C, D, E)), F, C we get angle(center(Circle(C, D, E)), E, C) == 0 - angle(center(Circle(C, D, E)), F, C) mod 360, angle(E, C, center(Circle(C, D, E))) == 0 - angle(F, C, center(Circle(C, D, E))) mod 360, angle(C, center(Circle(C, D, E)), E) == 0 - angle(C, center(Circle(C, D, E)), F) mod 360, log(distance(E, center(Circle(C, D, E)))) + log(distance(C, F)) == log(distance(F, center(Circle(C, D, E)))) + log(distance(C, E)), log(distance(C, E)) + log(distance(C, center(Circle(C, D, E)))) == log(distance(C, F)) + log(distance(C, center(Circle(C, D, E)))), log(distance(C, center(Circle(C, D, E)))) + log(distance(E, center(Circle(C, D, E)))) == log(distance(C, center(Circle(C, D, E)))) + log(distance(F, center(Circle(C, D, E))))
By anti_similar_triangle_basic_properties on center(Circle(C, D, E)), D, E, center(Circle(C, D, E)), D, F we get angle(center(Circle(C, D, E)), D, E) == 0 - angle(center(Circle(C, D, E)), D, F) mod 360, angle(D, E, center(Circle(C, D, E))) == 0 - angle(D, F, center(Circle(C, D, E))) mod 360, angle(E, center(Circle(C, D, E)), D) == 0 - angle(F, center(Circle(C, D, E)), D) mod 360, log(distance(D, center(Circle(C, D, E)))) + log(distance(D, E)) == log(distance(D, center(Circle(C, D, E)))) + log(distance(D, F)), log(distance(D, E)) + log(distance(F, center(Circle(C, D, E)))) == log(distance(D, F)) + log(distance(E, center(Circle(C, D, E)))), log(distance(E, center(Circle(C, D, E)))) + log(distance(D, center(Circle(C, D, E)))) == log(distance(F, center(Circle(C, D, E)))) + log(distance(D, center(Circle(C, D, E))))
By anti_similar_triangle_basic_properties on E, D, center(Circle(C, D, E)), F, D, center(Circle(C, D, E)) we get angle(E, D, center(Circle(C, D, E))) == 0 - angle(F, D, center(Circle(C, D, E))) mod 360, angle(D, center(Circle(C, D, E)), E) == 0 - angle(D, center(Circle(C, D, E)), F) mod 360, angle(center(Circle(C, D, E)), E, D) == 0 - angle(center(Circle(C, D, E)), F, D) mod 360, log(distance(D, E)) + log(distance(D, center(Circle(C, D, E)))) == log(distance(D, F)) + log(distance(D, center(Circle(C, D, E)))), log(distance(D, center(Circle(C, D, E)))) + log(distance(E, center(Circle(C, D, E)))) == log(distance(D, center(Circle(C, D, E)))) + log(distance(F, center(Circle(C, D, E)))), log(distance(E, center(Circle(C, D, E)))) + log(distance(D, F)) == log(distance(F, center(Circle(C, D, E)))) + log(distance(D, E))
By similar_triangle_basic_properties on F, D, center(Circle(C, D, E)), D, E, center(Circle(C, D, E)) we get angle(D, E, center(Circle(C, D, E))) == angle(F, D, center(Circle(C, D, E))) mod 360, angle(D, center(Circle(C, D, E)), F) == angle(E, center(Circle(C, D, E)), D) mod 360, angle(center(Circle(C, D, E)), D, E) == angle(center(Circle(C, D, E)), F, D) mod 360, log(distance(D, E)) + log(distance(D, center(Circle(C, D, E)))) == log(distance(D, F)) + log(distance(E, center(Circle(C, D, E)))), log(distance(D, center(Circle(C, D, E)))) + log(distance(D, center(Circle(C, D, E)))) == log(distance(E, center(Circle(C, D, E)))) + log(distance(F, center(Circle(C, D, E)))), log(distance(D, center(Circle(C, D, E)))) + log(distance(D, F)) == log(distance(F, center(Circle(C, D, E)))) + log(distance(D, E))
By isosceles_triangle_altitude_v1 on I, F, E we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, I, F), perpendicular_line(I, Line(E, F)))
By isosceles_triangle_altitude_v2 on I, E, F we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, I, F), perpendicular_line(I, Line(E, F)))
By isosceles_triangle_altitude_v2 on I, F, E we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, I, F), perpendicular_line(I, Line(E, F)))
By isosceles_triangle_altitude_v1 on I, E, F we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, I, F), perpendicular_line(I, Line(E, F)))
By isosceles_triangle_altitude_v2 on center(Circle(C, D, E)), F, E we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, center(Circle(C, D, E)), F), perpendicular_line(center(Circle(C, D, E)), Line(E, F)))
By power_of_a_point_definition on center(Circle(C, D, E)), C, D, Circle(C, D, E) we get log(power_of_a_point(center(Circle(C, D, E)), Circle(C, D, E))) == log(distance(C, center(Circle(C, D, E)))) + log(distance(D, center(Circle(C, D, E))))
By isosceles_triangle_altitude_v2 on center(Circle(C, D, E)), E, F we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, center(Circle(C, D, E)), F), perpendicular_line(center(Circle(C, D, E)), Line(E, F)))
By isosceles_triangle_altitude_v2 on H, E, F we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, H, F), perpendicular_line(H, Line(E, F)))
By isosceles_triangle_altitude_v2 on H, F, E we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, H, F), perpendicular_line(H, Line(E, F)))
By concurrent_sufficient_conditions on Line(I, center(Circle(A, D, F))), Line(A, I), Line(E, I) we get concurrent(Line(A, I), Line(E, I), Line(I, center(Circle(A, D, F))))
By line_definition on center(Circle(C, D, E)), line_intersection(j, Line(E, F)), j we get j == Line(center(Circle(C, D, E)), line_intersection(j, Line(E, F)))
By concurrent_sufficient_conditions on j, Line(I, center(Circle(A, D, F))), Line(E, I) we get concurrent(j, Line(E, I), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, I), Line(I, center(Circle(A, D, F))), j we get concurrent(j, Line(A, I), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(A, H), Line(A, I) we get concurrent(Line(A, H), Line(A, I), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, D, F))), i, Line(D, F) we get concurrent(i, Line(D, F), Line(D, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(D, center(Circle(A, D, F))), Line(I, center(Circle(A, D, F))) we get concurrent(Line(D, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(A, B), g we get concurrent(g, Line(A, B), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, I), Line(F, center(Circle(A, D, F))) we get concurrent(Line(F, H), Line(F, I), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, I), Line(F, center(Circle(A, D, F))) we get concurrent(Line(D, F), Line(F, I), Line(F, center(Circle(A, D, F))))
By line_definition on line_intersection(i, Line(E, I)), B, i we get i == Line(B, line_intersection(i, Line(E, I)))
By concurrent_sufficient_conditions on Line(A, B), Line(A, center(Circle(A, D, F))), Line(A, H) we get concurrent(Line(A, B), Line(A, H), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on i, Line(D, center(Circle(A, D, F))), j we get concurrent(i, j, Line(D, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, I), Line(F, H), Line(F, center(Circle(A, D, F))) we get concurrent(Line(F, H), Line(F, I), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(A, B), Line(A, H) we get concurrent(Line(A, B), Line(A, H), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(A, I), Line(A, E) we get concurrent(Line(A, E), Line(A, I), Line(A, center(Circle(A, D, F))))
By line_definition on I, center(Circle(C, D, E)), j we get j == Line(I, center(Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(I, center(Circle(A, D, F))), Line(A, I), j we get concurrent(j, Line(A, I), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, I), Line(A, H), Line(A, center(Circle(A, D, F))) we get concurrent(Line(A, H), Line(A, I), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, I), Line(A, I), Line(I, center(Circle(A, D, F))) we get concurrent(Line(A, I), Line(F, I), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), g, Line(F, I) we get concurrent(g, Line(F, I), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, H), Line(D, F) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, I), Line(I, center(Circle(A, D, F))), Line(E, I) we get concurrent(Line(A, I), Line(E, I), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on g, Line(A, center(Circle(A, D, F))), Line(A, B) we get concurrent(g, Line(A, B), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, D, F))), j, Line(D, F) we get concurrent(j, Line(D, F), Line(D, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, D, F))), i, j we get concurrent(i, j, Line(D, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, I), Line(A, center(Circle(A, D, F))), Line(A, H) we get concurrent(Line(A, H), Line(A, I), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on g, Line(A, B), Line(A, center(Circle(A, D, F))) we get concurrent(g, Line(A, B), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on g, Line(A, H), Line(A, center(Circle(A, D, F))) we get concurrent(g, Line(A, H), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, D, F))), Line(I, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))) we get concurrent(Line(D, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, H), Line(F, center(Circle(A, D, F))) we get concurrent(Line(F, H), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(A, D, F))), g we get concurrent(g, Line(D, F), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(A, B), Line(A, E) we get concurrent(Line(A, B), Line(A, E), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(A, center(Circle(A, D, F))), Line(I, center(Circle(A, D, F))) we get concurrent(Line(A, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on j, Line(I, center(Circle(A, D, F))), Line(F, I) we get concurrent(j, Line(F, I), Line(I, center(Circle(A, D, F))))
By line_definition on midpoint(E, F), I, j we get j == Line(I, midpoint(E, F))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(A, H), g we get concurrent(g, Line(A, H), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), g, Line(F, H) we get concurrent(g, Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(Circle(A, D, F))), j we get concurrent(j, Line(D, E), Line(D, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(I, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))) we get concurrent(Line(A, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, E), i, Line(D, center(Circle(A, D, F))) we get concurrent(i, Line(D, E), Line(D, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(A, H), Line(A, B) we get concurrent(Line(A, B), Line(A, H), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on j, Line(F, I), Line(I, center(Circle(A, D, F))) we get concurrent(j, Line(F, I), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, B), Line(A, center(Circle(A, D, F))), Line(A, I) we get concurrent(Line(A, B), Line(A, I), Line(A, center(Circle(A, D, F))))
By line_definition on H, midpoint(E, F), j we get j == Line(H, midpoint(E, F))
By concurrent_sufficient_conditions on Line(A, B), Line(A, H), Line(A, center(Circle(A, D, F))) we get concurrent(Line(A, B), Line(A, H), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(Circle(C, D, E))), Line(F, center(Circle(A, D, F))) we get concurrent(Line(F, I), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(I, center(Circle(A, D, F))), Line(A, center(Circle(A, D, F))) we get concurrent(Line(A, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, H), Line(A, B), Line(A, center(Circle(A, D, F))) we get concurrent(Line(A, B), Line(A, H), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(I, center(Circle(A, D, F))), j, Line(F, I) we get concurrent(j, Line(F, I), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(A, I), g we get concurrent(g, Line(A, I), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(I, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))), Line(D, center(Circle(A, D, F))) we get concurrent(Line(D, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on j, Line(A, I), Line(I, center(Circle(A, D, F))) we get concurrent(j, Line(A, I), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, I), Line(A, I), Line(I, center(Circle(A, D, F))) we get concurrent(Line(A, I), Line(E, I), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(I, center(Circle(A, D, F))), Line(A, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))) we get concurrent(Line(A, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))), Line(I, center(Circle(A, D, F))))
By line_definition on C, midpoint(E, F), j we get j == Line(C, midpoint(E, F))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, center(Circle(A, D, F))), g we get concurrent(g, Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(A, I), Line(A, B) we get concurrent(Line(A, B), Line(A, I), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on g, Line(F, center(Circle(A, D, F))), Line(F, H) we get concurrent(g, Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), Line(F, center(Circle(A, D, F))) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, D, F))), Line(D, E), i we get concurrent(i, Line(D, E), Line(D, center(Circle(A, D, F))))
By line_definition on center(Circle(A, D, F)), H, Line(G, H) we get Line(G, H) == Line(H, center(Circle(A, D, F)))
By concurrent_sufficient_conditions on Line(A, H), Line(A, center(Circle(A, D, F))), Line(A, I) we get concurrent(Line(A, H), Line(A, I), Line(A, center(Circle(A, D, F))))
By line_definition on center(Circle(C, D, E)), H, j we get j == Line(H, center(Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, F), Line(D, center(Circle(A, D, F))), Line(D, E) we get concurrent(Line(D, E), Line(D, F), Line(D, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(I, center(Circle(A, D, F))), Line(A, I), Line(F, I) we get concurrent(Line(A, I), Line(F, I), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(D, F), g we get concurrent(g, Line(D, F), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on j, Line(D, center(Circle(A, D, F))), Line(D, E) we get concurrent(j, Line(D, E), Line(D, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(C, D, E))), Line(F, center(Circle(A, D, F))) we get concurrent(Line(E, F), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By line_definition on line_intersection(i, Line(E, I)), I, Line(E, I) we get Line(E, I) == Line(I, line_intersection(i, Line(E, I)))
By concurrent_sufficient_conditions on Line(D, E), Line(D, F), Line(D, center(Circle(A, D, F))) we get concurrent(Line(D, E), Line(D, F), Line(D, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, I), Line(E, F), Line(F, center(Circle(A, D, F))) we get concurrent(Line(E, F), Line(F, I), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))), Line(D, F) we get concurrent(Line(D, F), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(A, D, F))), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, I), Line(A, center(Circle(A, D, F))), Line(A, B) we get concurrent(Line(A, B), Line(A, I), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))), g we get concurrent(g, Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By line_definition on midpoint(E, F), center(Circle(C, D, E)), j we get j == Line(midpoint(E, F), center(Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(A, I), Line(I, center(Circle(A, D, F))), Line(F, I) we get concurrent(Line(A, I), Line(F, I), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, I), g, Line(F, center(Circle(A, D, F))) we get concurrent(g, Line(F, I), Line(F, center(Circle(A, D, F))))
By line_definition on line_intersection(i, Line(E, I)), D, i we get i == Line(D, line_intersection(i, Line(E, I)))
By concurrent_sufficient_conditions on Line(I, center(Circle(A, D, F))), j, Line(A, I) we get concurrent(j, Line(A, I), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(A, D, F))), g we get concurrent(g, Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, I), Line(A, B), Line(A, center(Circle(A, D, F))) we get concurrent(Line(A, B), Line(A, I), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(I, center(Circle(A, D, F))), Line(F, I), j we get concurrent(j, Line(F, I), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(I, center(Circle(A, D, F))), Line(E, I), Line(F, I) we get concurrent(Line(E, I), Line(F, I), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(Circle(A, D, F))), g we get concurrent(g, Line(F, I), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(A, D, F))), Line(F, I) we get concurrent(Line(D, F), Line(F, I), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(E, F), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, center(Circle(A, D, F))), Line(F, I) we get concurrent(Line(F, I), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(E, F), g we get concurrent(g, Line(E, F), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(A, D, F))), Line(E, F) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(A, D, F))))
By line_definition on D, midpoint(E, F), j we get j == Line(D, midpoint(E, F))
By concurrent_sufficient_conditions on Line(E, F), Line(F, H), Line(F, center(Circle(A, D, F))) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, B), Line(A, center(Circle(A, D, F))), g we get concurrent(g, Line(A, B), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, D, F))), Line(D, E), Line(D, F) we get concurrent(Line(D, E), Line(D, F), Line(D, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(Circle(A, D, F))), i we get concurrent(i, Line(D, E), Line(D, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(E, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(A, B), Line(A, I) we get concurrent(Line(A, B), Line(A, I), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, H), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, H), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, D, F))), Line(D, F), i we get concurrent(i, Line(D, F), Line(D, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on g, Line(E, F), Line(F, center(Circle(A, D, F))) we get concurrent(g, Line(E, F), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, I), Line(A, center(Circle(A, D, F))), g we get concurrent(g, Line(A, I), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, center(Circle(A, D, F))), Line(D, F) we get concurrent(Line(D, F), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(A, D, F))), Line(F, H) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(I, center(Circle(A, D, F))), Line(F, I), Line(E, I) we get concurrent(Line(E, I), Line(F, I), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, E), Line(A, center(Circle(A, D, F))), Line(A, B) we get concurrent(Line(A, B), Line(A, E), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, I), Line(F, I), Line(I, center(Circle(A, D, F))) we get concurrent(Line(E, I), Line(F, I), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on g, Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))) we get concurrent(g, Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(A, center(Circle(A, D, F))), Line(A, E) we get concurrent(g, Line(A, E), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, F), Line(D, center(Circle(A, D, F))), i we get concurrent(i, Line(D, F), Line(D, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(A, D, F))), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, E), Line(A, center(Circle(A, D, F))), Line(A, H) we get concurrent(Line(A, E), Line(A, H), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))), Line(I, center(Circle(A, D, F))) we get concurrent(Line(D, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(I, center(Circle(A, D, F))), Line(E, I), Line(A, I) we get concurrent(Line(A, I), Line(E, I), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, I), Line(I, center(Circle(A, D, F))), Line(E, I) we get concurrent(Line(E, I), Line(F, I), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, I), Line(I, center(Circle(A, D, F))), j we get concurrent(j, Line(F, I), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on j, Line(D, center(Circle(A, D, F))), i we get concurrent(i, j, Line(D, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, E), Line(A, center(Circle(A, D, F))), g we get concurrent(g, Line(A, E), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on j, Line(D, center(Circle(A, D, F))), Line(D, F) we get concurrent(j, Line(D, F), Line(D, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(I, center(Circle(A, D, F))), Line(D, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))) we get concurrent(Line(D, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on g, Line(F, center(Circle(A, D, F))), Line(F, I) we get concurrent(g, Line(F, I), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(I, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))), Line(A, center(Circle(A, D, F))) we get concurrent(Line(A, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(A, D, F))), Line(F, I) we get concurrent(Line(E, F), Line(F, I), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), g, Line(A, H) we get concurrent(g, Line(A, H), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on g, Line(A, center(Circle(A, D, F))), Line(A, H) we get concurrent(g, Line(A, H), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(Circle(A, D, F))), Line(D, F) we get concurrent(Line(D, F), Line(F, I), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on i, Line(D, F), Line(D, center(Circle(A, D, F))) we get concurrent(i, Line(D, F), Line(D, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on g, Line(F, center(Circle(A, D, F))), Line(E, F) we get concurrent(g, Line(E, F), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, I), Line(A, E), Line(A, center(Circle(A, D, F))) we get concurrent(Line(A, E), Line(A, I), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(A, E), Line(A, B) we get concurrent(Line(A, B), Line(A, E), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, I), Line(I, center(Circle(A, D, F))), Line(A, I) we get concurrent(Line(A, I), Line(E, I), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, center(Circle(A, D, F))), Line(F, H) we get concurrent(Line(F, H), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(D, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), g, Line(A, E) we get concurrent(g, Line(A, E), Line(A, center(Circle(A, D, F))))
By line_definition on center(Circle(A, D, F)), G, Line(G, H) we get Line(G, H) == Line(G, center(Circle(A, D, F)))
By concurrent_sufficient_conditions on Line(A, E), Line(A, I), Line(A, center(Circle(A, D, F))) we get concurrent(Line(A, E), Line(A, I), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(I, center(Circle(A, D, F))), Line(F, I), Line(A, I) we get concurrent(Line(A, I), Line(F, I), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, E), Line(A, B), Line(A, center(Circle(A, D, F))) we get concurrent(Line(A, B), Line(A, E), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on j, Line(E, I), Line(I, center(Circle(A, D, F))) we get concurrent(j, Line(E, I), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, I), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), g, Line(F, center(Circle(A, D, F))) we get concurrent(g, Line(E, F), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, D, F))), j, Line(D, E) we get concurrent(j, Line(D, E), Line(D, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on g, Line(A, center(Circle(A, D, F))), Line(A, I) we get concurrent(g, Line(A, I), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, H), Line(E, F), Line(F, center(Circle(A, D, F))) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(A, I), Line(A, H) we get concurrent(Line(A, H), Line(A, I), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, I), g we get concurrent(g, Line(F, I), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, E), Line(A, center(Circle(A, D, F))), Line(A, I) we get concurrent(Line(A, E), Line(A, I), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, I), j, Line(I, center(Circle(A, D, F))) we get concurrent(j, Line(A, I), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, I), Line(D, F) we get concurrent(Line(D, F), Line(F, I), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, I), Line(I, center(Circle(A, D, F))), j we get concurrent(j, Line(E, I), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(A, E), Line(A, I) we get concurrent(Line(A, E), Line(A, I), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(D, F), Line(F, I) we get concurrent(Line(D, F), Line(F, I), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), g, Line(A, I) we get concurrent(g, Line(A, I), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, H), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), g, Line(A, B) we get concurrent(g, Line(A, B), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, H), g, Line(F, center(Circle(A, D, F))) we get concurrent(g, Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, E), j, Line(D, center(Circle(A, D, F))) we get concurrent(j, Line(D, E), Line(D, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), g, Line(F, center(Circle(C, D, E))) we get concurrent(g, Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), i, Line(D, center(Circle(A, D, F))) we get concurrent(i, Line(D, F), Line(D, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on j, Line(D, F), Line(D, center(Circle(A, D, F))) we get concurrent(j, Line(D, F), Line(D, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, H), Line(A, center(Circle(A, D, F))), Line(A, B) we get concurrent(Line(A, B), Line(A, H), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(A, D, F))), g we get concurrent(g, Line(E, F), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on g, Line(F, center(Circle(C, D, E))), Line(F, center(Circle(A, D, F))) we get concurrent(g, Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, H), Line(A, center(Circle(A, D, F))), Line(A, E) we get concurrent(Line(A, E), Line(A, H), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, I), Line(E, I), Line(I, center(Circle(A, D, F))) we get concurrent(Line(E, I), Line(F, I), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(C, D, E))), Line(F, center(Circle(A, D, F))) we get concurrent(Line(F, H), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(D, center(Circle(A, D, F))), Line(D, E) we get concurrent(i, Line(D, E), Line(D, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on j, Line(D, E), Line(D, center(Circle(A, D, F))) we get concurrent(j, Line(D, E), Line(D, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(Circle(A, D, F))), Line(F, H) we get concurrent(Line(F, H), Line(F, I), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on j, i, Line(D, center(Circle(A, D, F))) we get concurrent(i, j, Line(D, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, D, F))), Line(D, F), j we get concurrent(j, Line(D, F), Line(D, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, I), Line(I, center(Circle(A, D, F))), Line(F, I) we get concurrent(Line(E, I), Line(F, I), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, E), Line(A, H), Line(A, center(Circle(A, D, F))) we get concurrent(Line(A, E), Line(A, H), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(A, H), Line(A, E) we get concurrent(Line(A, E), Line(A, H), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(C, D, E))), Line(F, center(Circle(A, D, F))) we get concurrent(Line(D, F), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(I, center(Circle(A, D, F))), Line(A, I) we get concurrent(Line(A, I), Line(F, I), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, center(Circle(A, D, F))), Line(E, F) we get concurrent(Line(E, F), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, j, Line(D, center(Circle(A, D, F))) we get concurrent(i, j, Line(D, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, I), j, Line(I, center(Circle(A, D, F))) we get concurrent(j, Line(E, I), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(I, center(Circle(A, D, F))), Line(D, center(Circle(A, D, F))) we get concurrent(Line(D, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on g, Line(F, H), Line(F, center(Circle(A, D, F))) we get concurrent(g, Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on g, Line(A, I), Line(A, center(Circle(A, D, F))) we get concurrent(g, Line(A, I), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(D, F), Line(F, center(Circle(A, D, F))) we get concurrent(Line(D, F), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(A, E), g we get concurrent(g, Line(A, E), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(E, F), Line(F, H) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on g, Line(A, E), Line(A, center(Circle(A, D, F))) we get concurrent(g, Line(A, E), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, B), Line(A, center(Circle(A, D, F))), Line(A, E) we get concurrent(Line(A, B), Line(A, E), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), g, Line(F, center(Circle(A, D, F))) we get concurrent(g, Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(D, E), Line(D, center(Circle(A, D, F))) we get concurrent(Line(D, E), Line(D, F), Line(D, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on g, Line(D, F), Line(F, center(Circle(A, D, F))) we get concurrent(g, Line(D, F), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(D, F), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))), Line(F, H) we get concurrent(Line(F, H), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(A, D, F))), Line(F, I) we get concurrent(Line(F, H), Line(F, I), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, D, F))), i, Line(D, E) we get concurrent(i, Line(D, E), Line(D, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(A, D, F))), Line(F, H) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, B), g, Line(A, center(Circle(A, D, F))) we get concurrent(g, Line(A, B), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on j, Line(I, center(Circle(A, D, F))), Line(A, I) we get concurrent(j, Line(A, I), Line(I, center(Circle(A, D, F))))
By line_definition on E, line_intersection(i, Line(E, I)), Line(E, I) we get Line(E, I) == Line(E, line_intersection(i, Line(E, I)))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, D, F))), Line(D, F), Line(D, E) we get concurrent(Line(D, E), Line(D, F), Line(D, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, H), Line(A, I), Line(A, center(Circle(A, D, F))) we get concurrent(Line(A, H), Line(A, I), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(Circle(A, D, F))), Line(E, F) we get concurrent(Line(E, F), Line(F, I), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, I), Line(F, center(Circle(A, D, F))) we get concurrent(Line(E, F), Line(F, I), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), g, Line(E, F) we get concurrent(g, Line(E, F), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, D, F))), Line(D, E), j we get concurrent(j, Line(D, E), Line(D, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on i, Line(D, center(Circle(A, D, F))), Line(D, F) we get concurrent(i, Line(D, F), Line(D, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, B), Line(A, I), Line(A, center(Circle(A, D, F))) we get concurrent(Line(A, B), Line(A, I), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, H), Line(F, I) we get concurrent(Line(F, H), Line(F, I), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on g, Line(F, center(Circle(A, D, F))), Line(D, F) we get concurrent(g, Line(D, F), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, H), Line(A, center(Circle(A, D, F))), g we get concurrent(g, Line(A, H), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, H), Line(F, center(Circle(A, D, F))) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, H), g, Line(A, center(Circle(A, D, F))) we get concurrent(g, Line(A, H), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, B), Line(A, E), Line(A, center(Circle(A, D, F))) we get concurrent(Line(A, B), Line(A, E), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, H), g we get concurrent(g, Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), Line(F, center(Circle(A, D, F))) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, I), Line(D, F), Line(F, center(Circle(A, D, F))) we get concurrent(Line(D, F), Line(F, I), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, F), Line(D, center(Circle(A, D, F))), j we get concurrent(j, Line(D, F), Line(D, center(Circle(A, D, F))))
By median_definition on center(Circle(A, D, F)), F, A, Line(G, H) we get Line(G, H) == median(center(Circle(A, D, F)), A, F)
By concurrent_sufficient_conditions on Line(A, I), Line(F, I), Line(I, center(Circle(A, D, F))) we get concurrent(Line(A, I), Line(F, I), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(I, center(Circle(A, D, F))), Line(E, I), j we get concurrent(j, Line(E, I), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, I), Line(A, center(Circle(A, D, F))), Line(A, E) we get concurrent(Line(A, E), Line(A, I), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, F), j, Line(D, center(Circle(A, D, F))) we get concurrent(j, Line(D, F), Line(D, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(I, center(Circle(A, D, F))), j, Line(E, I) we get concurrent(j, Line(E, I), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))), Line(F, I) we get concurrent(Line(F, I), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(A, E), Line(A, H) we get concurrent(Line(A, E), Line(A, H), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, H), Line(A, E), Line(A, center(Circle(A, D, F))) we get concurrent(Line(A, E), Line(A, H), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, H), Line(D, F), Line(F, center(Circle(A, D, F))) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, I), Line(E, F) we get concurrent(Line(E, F), Line(F, I), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(E, F), Line(F, I) we get concurrent(Line(E, F), Line(F, I), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, I), Line(F, H) we get concurrent(Line(F, H), Line(F, I), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, I), j, Line(I, center(Circle(A, D, F))) we get concurrent(j, Line(F, I), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(E, F), Line(F, center(Circle(A, D, F))) we get concurrent(Line(E, F), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, H), Line(E, F) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, F), g, Line(F, center(Circle(A, D, F))) we get concurrent(g, Line(D, F), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))), Line(I, center(Circle(A, D, F))) we get concurrent(Line(A, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, I), g, Line(A, center(Circle(A, D, F))) we get concurrent(g, Line(A, I), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(D, F), Line(F, H) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on g, Line(F, I), Line(F, center(Circle(A, D, F))) we get concurrent(g, Line(F, I), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on i, Line(D, E), Line(D, center(Circle(A, D, F))) we get concurrent(i, Line(D, E), Line(D, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, E), g, Line(A, center(Circle(A, D, F))) we get concurrent(g, Line(A, E), Line(A, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(A, D, F))), Line(D, F) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, I), Line(F, center(Circle(A, D, F))) we get concurrent(Line(F, I), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), g, Line(D, F) we get concurrent(g, Line(D, F), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(F, I), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, I), Line(F, center(Circle(A, D, F))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(Circle(A, D, F))), Line(D, F) we get concurrent(Line(D, E), Line(D, F), Line(D, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(A, I), Line(E, I), Line(I, center(Circle(A, D, F))) we get concurrent(Line(A, I), Line(E, I), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, D, F))), j, i we get concurrent(i, j, Line(D, center(Circle(A, D, F))))
By line_intersection_definition on center(Circle(A, D, F)), Line(G, H), Line(A, center(Circle(A, D, F))) we get center(Circle(A, D, F)) == line_intersection(Line(G, H), Line(A, center(Circle(A, D, F))))
By median_definition on H, E, F, j we get j == median(H, E, F)
By line_intersection_definition on center(Circle(A, D, F)), Line(G, center(Circle(A, D, F))), Line(D, center(Circle(A, D, F))) we get center(Circle(A, D, F)) == line_intersection(Line(D, center(Circle(A, D, F))), Line(G, center(Circle(A, D, F))))
By line_intersection_definition on center(Circle(A, D, F)), Line(G, H), Line(D, center(Circle(A, D, F))) we get center(Circle(A, D, F)) == line_intersection(Line(G, H), Line(D, center(Circle(A, D, F))))
By line_intersection_definition on center(Circle(A, D, F)), Line(G, H), Line(F, center(Circle(A, D, F))) we get center(Circle(A, D, F)) == line_intersection(Line(G, H), Line(F, center(Circle(A, D, F))))
By median_definition on I, E, F, j we get j == median(I, E, F)
By median_definition on C, E, F, j we get j == median(C, E, F)
By line_intersection_definition on center(Circle(A, D, F)), Line(G, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))) we get center(Circle(A, D, F)) == line_intersection(Line(F, center(Circle(A, D, F))), Line(G, center(Circle(A, D, F))))
By line_intersection_definition on center(Circle(A, D, F)), Line(A, center(Circle(A, D, F))), Line(G, center(Circle(A, D, F))) we get center(Circle(A, D, F)) == line_intersection(Line(A, center(Circle(A, D, F))), Line(G, center(Circle(A, D, F))))
By line_intersection_definition on center(Circle(A, D, F)), Line(G, center(Circle(A, D, F))), Line(I, center(Circle(A, D, F))) we get center(Circle(A, D, F)) == line_intersection(Line(G, center(Circle(A, D, F))), Line(I, center(Circle(A, D, F))))
By line_intersection_definition on center(Circle(A, D, F)), Line(I, center(Circle(A, D, F))), Line(G, H) we get center(Circle(A, D, F)) == line_intersection(Line(G, H), Line(I, center(Circle(A, D, F))))
By line_intersection_definition on G, g, Line(G, center(Circle(A, D, F))) we get G == line_intersection(g, Line(G, center(Circle(A, D, F))))
By median_definition on center(Circle(C, D, E)), E, F, j we get j == median(center(Circle(C, D, E)), E, F)
By median_definition on D, E, F, j we get j == median(D, E, F)
By perpendicular_line_definition on line_intersection(i, Line(E, I)), Line(E, I), i we get Line(E, I) == perpendicular_line(line_intersection(i, Line(E, I)), i)
By perpendicular_line_definition on line_intersection(i, Line(E, I)), i, Line(E, I) we get i == perpendicular_line(line_intersection(i, Line(E, I)), Line(E, I))
By perpendicular_line_definition on midpoint(E, F), j, Line(A, I) we get j == perpendicular_line(midpoint(E, F), Line(A, I))
By perpendicular_line_definition on center(Circle(C, D, E)), j, Line(A, I) we get j == perpendicular_line(center(Circle(C, D, E)), Line(A, I))
By midpoint_definition_v0 on C, D, center(Circle(C, D, E)) we get midpoint(C, D) == center(Circle(C, D, E))
By perpendicular_direction_conditions_v0 on D, center(Circle(A, D, F)), C, orthocenter(A, C, D) we get perpendicular(Line(C, orthocenter(A, C, D)), Line(D, center(Circle(A, D, F))))
By perpendicular_direction_conditions_v0 on C, projection(C, h), center(Circle(A, D, F)), A we get perpendicular(Line(C, projection(C, h)), Line(A, center(Circle(A, D, F))))
By same_angle_v2 on D, H, C, E we get angle(H, D, E) == angle(C, D, E) + 180 mod 360
By same_angle_v1 on D, I, H, A we get angle(H, D, A) == angle(I, D, A) mod 360
By perpendicular_direction_conditions_v0 on projection(C, h), orthocenter(A, C, D), center(Circle(A, D, F)), D we get perpendicular(Line(projection(C, h), orthocenter(A, C, D)), Line(D, center(Circle(A, D, F))))
By perpendicular_direction_conditions_v0 on center(Circle(A, D, F)), A, C, orthocenter(A, C, D) we get perpendicular(Line(C, orthocenter(A, C, D)), Line(A, center(Circle(A, D, F))))
By same_angle_v2 on D, C, H, A we get angle(C, D, A) == angle(H, D, A) + 180 mod 360
By perpendicular_direction_conditions_v0 on D, center(Circle(A, D, F)), projection(C, h), C we get perpendicular(Line(C, projection(C, h)), Line(D, center(Circle(A, D, F))))
By projection_definition on E, line_intersection(j, Line(E, F)), j we get projection(E, j) == line_intersection(j, Line(E, F))
By same_angle_v1 on H, D, C, E we get angle(C, H, E) == angle(D, H, E) mod 360
By same_angle_v0 on D, I, H, B we get angle(H, D, B) == angle(I, D, B) mod 360
By projection_definition on H, I, Line(A, I) we get I == projection(H, Line(A, I))
By same_angle_v2 on D, H, C, B we get angle(H, D, B) == angle(C, D, B) + 180 mod 360
By projection_definition on H, line_intersection(j, Line(E, F)), Line(E, F) we get projection(H, Line(E, F)) == line_intersection(j, Line(E, F))
By perpendicular_direction_conditions_v0 on orthocenter(A, C, D), projection(C, h), A, center(Circle(A, D, F)) we get perpendicular(Line(projection(C, h), orthocenter(A, C, D)), Line(A, center(Circle(A, D, F))))
By projection_definition on I, line_intersection(j, Line(E, F)), Line(E, F) we get projection(I, Line(E, F)) == line_intersection(j, Line(E, F))
By projection_definition on C, line_intersection(j, Line(E, F)), Line(E, F) we get projection(C, Line(E, F)) == line_intersection(j, Line(E, F))
By projection_definition on D, line_intersection(j, Line(E, F)), Line(E, F) we get projection(D, Line(E, F)) == line_intersection(j, Line(E, F))
By same_angle_v0 on H, C, D, A we get angle(C, H, A) == angle(D, H, A) mod 360
By same_angle_v0 on D, I, H, E we get angle(H, D, E) == angle(I, D, E) mod 360
By projection_definition on F, line_intersection(j, Line(E, F)), j we get projection(F, j) == line_intersection(j, Line(E, F))
By projection_definition on line_intersection(j, Line(E, F)), I, Line(A, I) we get I == projection(line_intersection(j, Line(E, F)), Line(A, I))
By between_imply_not_between on E, midpoint(E, F), F we get collinear_and_not_between(F, E, midpoint(E, F))
By between_imply_not_between on F, midpoint(E, F), E we get collinear_and_not_between(E, F, midpoint(E, F))
By parallel_line_definition on center(Circle(A, D, F)), Line(G, H), Line(D, F) we get Line(G, H) == parallel_line(center(Circle(A, D, F)), Line(D, F))
By circle_radius_v0_r on E, Circle(A, C, E) we get radius(Circle(A, C, E)) == distance(E, center(Circle(A, C, E)))
By circle_radius_v0_r on A, Circle(A, C, E) we get radius(Circle(A, C, E)) == distance(A, center(Circle(A, C, E)))
By circle_radius_v0_r on H, Circle(A, C, E) we get radius(Circle(A, C, E)) == distance(H, center(Circle(A, C, E)))
By circle_radius_v0_r on C, Circle(A, C, E) we get radius(Circle(A, C, E)) == distance(C, center(Circle(A, C, E)))
By angle_to_center on H, C, E, Circle(A, C, E) we get 2 * angle(H, C, E) == angle(H, center(Circle(A, C, E)), E) mod 360
By angle_to_center on C, H, A, Circle(A, C, E) we get 2 * angle(C, H, A) == angle(C, center(Circle(A, C, E)), A) mod 360
By angle_to_center on H, E, A, Circle(A, C, E) we get 2 * angle(H, E, A) == angle(H, center(Circle(A, C, E)), A) mod 360
By same_angle_v0 on H, D, I, G we get angle(D, H, G) == angle(I, H, G) mod 360
By angle_to_center on E, C, H, Circle(A, C, E) we get 2 * angle(E, C, H) == angle(E, center(Circle(A, C, E)), H) mod 360
By angle_to_center on A, H, E, Circle(A, C, E) we get 2 * angle(A, H, E) == angle(A, center(Circle(A, C, E)), E) mod 360
By same_angle_v2 on I, C, H, A we get angle(C, I, A) == angle(H, I, A) + 180 mod 360
By angle_to_center on A, E, H, Circle(A, C, E) we get 2 * angle(A, E, H) == angle(A, center(Circle(A, C, E)), H) mod 360
By angle_to_center on A, H, C, Circle(A, C, E) we get 2 * angle(A, H, C) == angle(A, center(Circle(A, C, E)), C) mod 360
By angle_to_center on H, E, C, Circle(A, C, E) we get 2 * angle(H, E, C) == angle(H, center(Circle(A, C, E)), C) mod 360
By angle_to_center on H, A, E, Circle(A, C, E) we get 2 * angle(H, A, E) == angle(H, center(Circle(A, C, E)), E) mod 360
By angle_to_center on E, H, A, Circle(A, C, E) we get 2 * angle(E, H, A) == angle(E, center(Circle(A, C, E)), A) mod 360
By perpendicular_direction_conditions_v0_r on I, orthocenter(A, C, D), I, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(I, orthocenter(A, C, D)) - 2 * direction(I, line_intersection(j, Line(E, F))) mod 360
By angle_to_center on C, E, A, Circle(A, C, E) we get 2 * angle(C, E, A) == angle(C, center(Circle(A, C, E)), A) mod 360
By angle_to_center on E, A, H, Circle(A, C, E) we get 2 * angle(E, A, H) == angle(E, center(Circle(A, C, E)), H) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), C, orthocenter(A, C, D), A we get 180 == 2 * direction(line_intersection(j, Line(E, F)), C) - 2 * direction(orthocenter(A, C, D), A) mod 360
By angle_to_center on H, C, A, Circle(A, C, E) we get 2 * angle(H, C, A) == angle(H, center(Circle(A, C, E)), A) mod 360
By angle_to_center on A, C, H, Circle(A, C, E) we get 2 * angle(A, C, H) == angle(A, center(Circle(A, C, E)), H) mod 360
By angle_to_center on A, C, E, Circle(A, C, E) we get 2 * angle(A, C, E) == angle(A, center(Circle(A, C, E)), E) mod 360
By angle_to_center on C, H, E, Circle(A, C, E) we get 2 * angle(C, H, E) == angle(C, center(Circle(A, C, E)), E) mod 360
By angle_to_center on E, C, A, Circle(A, C, E) we get 2 * angle(E, C, A) == angle(E, center(Circle(A, C, E)), A) mod 360
By angle_to_center on H, A, C, Circle(A, C, E) we get 2 * angle(H, A, C) == angle(H, center(Circle(A, C, E)), C) mod 360
By angle_to_center on C, E, H, Circle(A, C, E) we get 2 * angle(C, E, H) == angle(C, center(Circle(A, C, E)), H) mod 360
By angle_to_center on E, A, C, Circle(A, C, E) we get 2 * angle(E, A, C) == angle(E, center(Circle(A, C, E)), C) mod 360
By same_angle_v2 on I, D, H, A we get angle(D, I, A) == angle(H, I, A) + 180 mod 360
By angle_to_center on E, H, C, Circle(A, C, E) we get 2 * angle(E, H, C) == angle(E, center(Circle(A, C, E)), C) mod 360
By angle_to_center on A, E, C, Circle(A, C, E) we get 2 * angle(A, E, C) == angle(A, center(Circle(A, C, E)), C) mod 360
By angle_to_center on C, A, E, Circle(A, C, E) we get 2 * angle(C, A, E) == angle(C, center(Circle(A, C, E)), E) mod 360
By same_angle_v2 on I, C, H, F we get angle(C, I, F) == angle(H, I, F) + 180 mod 360
By angle_to_center on C, A, H, Circle(A, C, E) we get 2 * angle(C, A, H) == angle(C, center(Circle(A, C, E)), H) mod 360
By same_angle_v1 on H, I, D, E we get angle(D, H, E) == angle(I, H, E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), I, line_intersection(j, Line(E, F)), I we get 180 == 2 * direction(orthocenter(A, C, D), I) - 2 * direction(line_intersection(j, Line(E, F)), I) mod 360
By perpendicular_direction_conditions_v0_r on I, line_intersection(j, Line(E, F)), I, A we get 180 == 2 * direction(I, line_intersection(j, Line(E, F))) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on E, F, C, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(E, F) - 2 * direction(C, line_intersection(j, Line(E, F))) mod 360
By same_angle_v0 on H, I, C, G we get angle(C, H, G) == angle(I, H, G) mod 360
By perpendicular_direction_conditions_v0_r on C, H, F, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(C, H) - 2 * direction(F, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on A, I, line_intersection(j, Line(E, F)), D we get 180 == 2 * direction(A, I) - 2 * direction(line_intersection(j, Line(E, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on I, orthocenter(A, C, D), C, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(I, orthocenter(A, C, D)) - 2 * direction(C, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(j, Line(E, F)), F, E we get 180 == 2 * direction(C, line_intersection(j, Line(E, F))) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(j, Line(E, F)), I, D we get 180 == 2 * direction(F, line_intersection(j, Line(E, F))) - 2 * direction(I, D) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(j, Line(E, F)), C, H we get 180 == 2 * direction(F, line_intersection(j, Line(E, F))) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(C, D, E)), D, E, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(center(Circle(C, D, E)), D) - 2 * direction(E, line_intersection(j, Line(E, F))) mod 360
By orthocenter_concurrency on D, E, I we get orthocenter(D, E, I) in altitude(D, E, I), orthocenter(D, E, I) in altitude(E, D, I), orthocenter(D, E, I) in altitude(I, D, E)
By perpendicular_direction_conditions_v0_r on F, line_intersection(j, Line(E, F)), C, I we get 180 == 2 * direction(F, line_intersection(j, Line(E, F))) - 2 * direction(C, I) mod 360
By perpendicular_direction_conditions_v0_r on H, I, orthocenter(A, C, D), A we get 180 == 2 * direction(H, I) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on I, C, line_intersection(j, Line(E, F)), F we get 180 == 2 * direction(I, C) - 2 * direction(line_intersection(j, Line(E, F)), F) mod 360
By same_angle_v0 on H, C, I, A we get angle(C, H, A) == angle(I, H, A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), F, D, C we get 180 == 2 * direction(line_intersection(j, Line(E, F)), F) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), I, I, A we get 180 == 2 * direction(line_intersection(j, Line(E, F)), I) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on I, line_intersection(j, Line(E, F)), I, orthocenter(A, C, D) we get 180 == 2 * direction(I, line_intersection(j, Line(E, F))) - 2 * direction(I, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, D, F, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(C, D) - 2 * direction(F, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, line_intersection(j, Line(E, F)), H we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(line_intersection(j, Line(E, F)), H) mod 360
By perpendicular_direction_conditions_v0_r on C, center(Circle(C, D, E)), line_intersection(j, Line(E, F)), F we get 180 == 2 * direction(C, center(Circle(C, D, E))) - 2 * direction(line_intersection(j, Line(E, F)), F) mod 360
By same_angle_v3 on I, D, H, F we get angle(D, I, F) == angle(H, I, F) + 180 mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(j, Line(E, F)), F, E we get 180 == 2 * direction(D, line_intersection(j, Line(E, F))) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), E, D, H we get 180 == 2 * direction(line_intersection(j, Line(E, F)), E) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), C, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(C, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on I, H, orthocenter(A, C, D), A we get 180 == 2 * direction(I, H) - 2 * direction(orthocenter(A, C, D), A) mod 360
By orthocenter_concurrency on A, H, C we get orthocenter(A, C, H) in altitude(A, C, H), orthocenter(A, C, H) in altitude(H, A, C), orthocenter(A, C, H) in altitude(C, A, H)
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, line_intersection(j, Line(E, F)), C we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(line_intersection(j, Line(E, F)), C) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(j, Line(E, F)), A, orthocenter(A, C, D) we get 180 == 2 * direction(D, line_intersection(j, Line(E, F))) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By same_angle_v2 on I, H, D, E we get angle(H, I, E) == angle(D, I, E) + 180 mod 360
By same_angle_v0 on H, I, D, A we get angle(D, H, A) == angle(I, H, A) mod 360
By same_angle_v3 on I, H, C, E we get angle(H, I, E) == angle(C, I, E) + 180 mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), C, A, I we get 180 == 2 * direction(line_intersection(j, Line(E, F)), C) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), D, I, orthocenter(A, C, D) we get 180 == 2 * direction(line_intersection(j, Line(E, F)), D) - 2 * direction(I, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on I, line_intersection(j, Line(E, F)), F, E we get 180 == 2 * direction(I, line_intersection(j, Line(E, F))) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), E, C, I we get 180 == 2 * direction(line_intersection(j, Line(E, F)), E) - 2 * direction(C, I) mod 360
By perpendicular_direction_conditions_v0_r on I, orthocenter(A, C, D), I, H we get 180 == 2 * direction(I, orthocenter(A, C, D)) - 2 * direction(I, H) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(C, D, E)), D, F, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(center(Circle(C, D, E)), D) - 2 * direction(F, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on E, F, H, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(E, F) - 2 * direction(H, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), F, C, H we get 180 == 2 * direction(line_intersection(j, Line(E, F)), F) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(j, Line(E, F)), E, F we get 180 == 2 * direction(C, line_intersection(j, Line(E, F))) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(j, Line(E, F)), H, D we get 180 == 2 * direction(F, line_intersection(j, Line(E, F))) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), E, C, D we get 180 == 2 * direction(line_intersection(j, Line(E, F)), E) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), F, center(Circle(C, D, E)), C we get 180 == 2 * direction(line_intersection(j, Line(E, F)), F) - 2 * direction(center(Circle(C, D, E)), C) mod 360
By perpendicular_direction_conditions_v0_r on F, E, line_intersection(j, Line(E, F)), C we get 180 == 2 * direction(F, E) - 2 * direction(line_intersection(j, Line(E, F)), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), H, I, orthocenter(A, C, D) we get 180 == 2 * direction(line_intersection(j, Line(E, F)), H) - 2 * direction(I, orthocenter(A, C, D)) mod 360
By same_angle_v0 on H, I, C, F we get angle(C, H, F) == angle(I, H, F) mod 360
By perpendicular_direction_conditions_v0_r on H, D, line_intersection(j, Line(E, F)), F we get 180 == 2 * direction(H, D) - 2 * direction(line_intersection(j, Line(E, F)), F) mod 360
By same_angle_v0 on H, I, D, F we get angle(D, H, F) == angle(I, H, F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), E, H, C we get 180 == 2 * direction(line_intersection(j, Line(E, F)), E) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on A, I, line_intersection(j, Line(E, F)), C we get 180 == 2 * direction(A, I) - 2 * direction(line_intersection(j, Line(E, F)), C) mod 360
By perpendicular_direction_conditions_v0_r on H, line_intersection(j, Line(E, F)), E, F we get 180 == 2 * direction(H, line_intersection(j, Line(E, F))) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), C, I, orthocenter(A, C, D) we get 180 == 2 * direction(line_intersection(j, Line(E, F)), C) - 2 * direction(I, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on H, line_intersection(j, Line(E, F)), F, E we get 180 == 2 * direction(H, line_intersection(j, Line(E, F))) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on I, orthocenter(A, C, D), line_intersection(j, Line(E, F)), C we get 180 == 2 * direction(I, orthocenter(A, C, D)) - 2 * direction(line_intersection(j, Line(E, F)), C) mod 360
By perpendicular_direction_conditions_v0_r on H, line_intersection(j, Line(E, F)), orthocenter(A, C, D), A we get 180 == 2 * direction(H, line_intersection(j, Line(E, F))) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), D, orthocenter(A, C, D), A we get 180 == 2 * direction(line_intersection(j, Line(E, F)), D) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on H, I, F, E we get 180 == 2 * direction(H, I) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(C, D, E)), C, line_intersection(j, Line(E, F)), F we get 180 == 2 * direction(center(Circle(C, D, E)), C) - 2 * direction(line_intersection(j, Line(E, F)), F) mod 360
By perpendicular_direction_conditions_v0_r on H, D, F, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(H, D) - 2 * direction(F, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on D, center(Circle(C, D, E)), E, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(D, center(Circle(C, D, E))) - 2 * direction(E, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on A, I, line_intersection(j, Line(E, F)), H we get 180 == 2 * direction(A, I) - 2 * direction(line_intersection(j, Line(E, F)), H) mod 360
By perpendicular_direction_conditions_v0_r on I, H, A, orthocenter(A, C, D) we get 180 == 2 * direction(I, H) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(j, Line(E, F)), orthocenter(A, C, D), I we get 180 == 2 * direction(D, line_intersection(j, Line(E, F))) - 2 * direction(orthocenter(A, C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on F, E, line_intersection(j, Line(E, F)), D we get 180 == 2 * direction(F, E) - 2 * direction(line_intersection(j, Line(E, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(j, Line(E, F)), I, A we get 180 == 2 * direction(C, line_intersection(j, Line(E, F))) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), E, I, D we get 180 == 2 * direction(line_intersection(j, Line(E, F)), E) - 2 * direction(I, D) mod 360
By perpendicular_direction_conditions_v0_r on H, C, line_intersection(j, Line(E, F)), E we get 180 == 2 * direction(H, C) - 2 * direction(line_intersection(j, Line(E, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on E, F, line_intersection(j, Line(E, F)), D we get 180 == 2 * direction(E, F) - 2 * direction(line_intersection(j, Line(E, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on C, D, line_intersection(j, Line(E, F)), F we get 180 == 2 * direction(C, D) - 2 * direction(line_intersection(j, Line(E, F)), F) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, line_intersection(j, Line(E, F)), I we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(line_intersection(j, Line(E, F)), I) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), E, D, I we get 180 == 2 * direction(line_intersection(j, Line(E, F)), E) - 2 * direction(D, I) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, H, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(H, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on D, C, F, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(D, C) - 2 * direction(F, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on F, E, I, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(F, E) - 2 * direction(I, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on F, E, H, I we get 180 == 2 * direction(F, E) - 2 * direction(H, I) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), D, A, I we get 180 == 2 * direction(line_intersection(j, Line(E, F)), D) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on I, line_intersection(j, Line(E, F)), orthocenter(A, C, D), I we get 180 == 2 * direction(I, line_intersection(j, Line(E, F))) - 2 * direction(orthocenter(A, C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on H, line_intersection(j, Line(E, F)), orthocenter(A, C, D), I we get 180 == 2 * direction(H, line_intersection(j, Line(E, F))) - 2 * direction(orthocenter(A, C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), E, D, center(Circle(C, D, E)) we get 180 == 2 * direction(line_intersection(j, Line(E, F)), E) - 2 * direction(D, center(Circle(C, D, E))) mod 360
By perpendicular_direction_conditions_v0_r on I, A, D, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(I, A) - 2 * direction(D, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(j, Line(E, F)), I, A we get 180 == 2 * direction(D, line_intersection(j, Line(E, F))) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on C, I, E, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(C, I) - 2 * direction(E, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), E, H, D we get 180 == 2 * direction(line_intersection(j, Line(E, F)), E) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, Line(E, F)), H, D we get 180 == 2 * direction(E, line_intersection(j, Line(E, F))) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on I, A, C, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(I, A) - 2 * direction(C, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), C, A, orthocenter(A, C, D) we get 180 == 2 * direction(line_intersection(j, Line(E, F)), C) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, H, F, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(D, H) - 2 * direction(F, line_intersection(j, Line(E, F))) mod 360
By same_angle_v1 on H, I, C, E we get angle(C, H, E) == angle(I, H, E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), C, E, F we get 180 == 2 * direction(line_intersection(j, Line(E, F)), C) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, D, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(D, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on I, C, F, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(I, C) - 2 * direction(F, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on A, I, I, H we get 180 == 2 * direction(A, I) - 2 * direction(I, H) mod 360
By perpendicular_direction_conditions_v0_r on A, I, D, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(A, I) - 2 * direction(D, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on F, E, C, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(F, E) - 2 * direction(C, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), H, E, F we get 180 == 2 * direction(line_intersection(j, Line(E, F)), H) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), line_intersection(j, Line(E, F)), H we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(line_intersection(j, Line(E, F)), H) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), H, A, orthocenter(A, C, D) we get 180 == 2 * direction(line_intersection(j, Line(E, F)), H) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, line_intersection(j, Line(E, F)), D we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(line_intersection(j, Line(E, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), line_intersection(j, Line(E, F)), C we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(line_intersection(j, Line(E, F)), C) mod 360
By perpendicular_direction_conditions_v0_r on D, center(Circle(C, D, E)), line_intersection(j, Line(E, F)), F we get 180 == 2 * direction(D, center(Circle(C, D, E))) - 2 * direction(line_intersection(j, Line(E, F)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), H, I, A we get 180 == 2 * direction(line_intersection(j, Line(E, F)), H) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on D, H, E, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(D, H) - 2 * direction(E, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, I, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(I, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), I, line_intersection(j, Line(E, F)), C we get 180 == 2 * direction(orthocenter(A, C, D), I) - 2 * direction(line_intersection(j, Line(E, F)), C) mod 360
By perpendicular_direction_conditions_v0_r on H, line_intersection(j, Line(E, F)), I, A we get 180 == 2 * direction(H, line_intersection(j, Line(E, F))) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, Line(E, F)), D, C we get 180 == 2 * direction(E, line_intersection(j, Line(E, F))) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on I, orthocenter(A, C, D), line_intersection(j, Line(E, F)), D we get 180 == 2 * direction(I, orthocenter(A, C, D)) - 2 * direction(line_intersection(j, Line(E, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on H, I, I, A we get 180 == 2 * direction(H, I) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), F, I, C we get 180 == 2 * direction(line_intersection(j, Line(E, F)), F) - 2 * direction(I, C) mod 360
By in_imply_collinear on I, center(Circle(C, D, E)), C we get collinear(C, I, center(Circle(C, D, E)))
By perpendicular_direction_conditions_v0_r on C, D, E, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(C, D) - 2 * direction(E, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on I, A, H, I we get 180 == 2 * direction(I, A) - 2 * direction(H, I) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, Line(E, F)), C, center(Circle(C, D, E)) we get 180 == 2 * direction(E, line_intersection(j, Line(E, F))) - 2 * direction(C, center(Circle(C, D, E))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), H, A, I we get 180 == 2 * direction(line_intersection(j, Line(E, F)), H) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on I, line_intersection(j, Line(E, F)), A, orthocenter(A, C, D) we get 180 == 2 * direction(I, line_intersection(j, Line(E, F))) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By in_imply_collinear on midpoint(E, F), D, C we get collinear(C, D, midpoint(E, F))
By perpendicular_direction_conditions_v0_r on C, line_intersection(j, Line(E, F)), A, I we get 180 == 2 * direction(C, line_intersection(j, Line(E, F))) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on H, C, E, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(H, C) - 2 * direction(E, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, Line(E, F)), I, C we get 180 == 2 * direction(E, line_intersection(j, Line(E, F))) - 2 * direction(I, C) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(j, Line(E, F)), orthocenter(A, C, D), I we get 180 == 2 * direction(C, line_intersection(j, Line(E, F))) - 2 * direction(orthocenter(A, C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), I, orthocenter(A, C, D), I we get 180 == 2 * direction(line_intersection(j, Line(E, F)), I) - 2 * direction(orthocenter(A, C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on E, F, H, I we get 180 == 2 * direction(E, F) - 2 * direction(H, I) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), F, H, D we get 180 == 2 * direction(line_intersection(j, Line(E, F)), F) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on D, center(Circle(C, D, E)), line_intersection(j, Line(E, F)), E we get 180 == 2 * direction(D, center(Circle(C, D, E))) - 2 * direction(line_intersection(j, Line(E, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(j, Line(E, F)), C, D we get 180 == 2 * direction(F, line_intersection(j, Line(E, F))) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), H, orthocenter(A, C, D), A we get 180 == 2 * direction(line_intersection(j, Line(E, F)), H) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), I, H we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(I, H) mod 360
By orthocenter_concurrency on F, H, C we get orthocenter(C, F, H) in altitude(F, C, H), orthocenter(C, F, H) in altitude(H, C, F), orthocenter(C, F, H) in altitude(C, F, H)
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), I, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(I, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on D, H, line_intersection(j, Line(E, F)), F we get 180 == 2 * direction(D, H) - 2 * direction(line_intersection(j, Line(E, F)), F) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), D, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(D, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on H, line_intersection(j, Line(E, F)), A, orthocenter(A, C, D) we get 180 == 2 * direction(H, line_intersection(j, Line(E, F))) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), E, C, center(Circle(C, D, E)) we get 180 == 2 * direction(line_intersection(j, Line(E, F)), E) - 2 * direction(C, center(Circle(C, D, E))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, Line(E, F)), I, D we get 180 == 2 * direction(E, line_intersection(j, Line(E, F))) - 2 * direction(I, D) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, Line(E, F)), H, C we get 180 == 2 * direction(E, line_intersection(j, Line(E, F))) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(j, Line(E, F)), orthocenter(A, C, D), A we get 180 == 2 * direction(D, line_intersection(j, Line(E, F))) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on H, I, A, orthocenter(A, C, D) we get 180 == 2 * direction(H, I) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), I, I, orthocenter(A, C, D) we get 180 == 2 * direction(line_intersection(j, Line(E, F)), I) - 2 * direction(I, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), I, A, orthocenter(A, C, D) we get 180 == 2 * direction(line_intersection(j, Line(E, F)), I) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, center(Circle(C, D, E)), F, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(C, center(Circle(C, D, E))) - 2 * direction(F, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on F, E, line_intersection(j, Line(E, F)), I we get 180 == 2 * direction(F, E) - 2 * direction(line_intersection(j, Line(E, F)), I) mod 360
By perpendicular_direction_conditions_v0_r on C, D, line_intersection(j, Line(E, F)), E we get 180 == 2 * direction(C, D) - 2 * direction(line_intersection(j, Line(E, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on H, line_intersection(j, Line(E, F)), A, I we get 180 == 2 * direction(H, line_intersection(j, Line(E, F))) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on I, D, line_intersection(j, Line(E, F)), E we get 180 == 2 * direction(I, D) - 2 * direction(line_intersection(j, Line(E, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), D, A, orthocenter(A, C, D) we get 180 == 2 * direction(line_intersection(j, Line(E, F)), D) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, C, line_intersection(j, Line(E, F)), E we get 180 == 2 * direction(D, C) - 2 * direction(line_intersection(j, Line(E, F)), E) mod 360
By in_imply_collinear on center(Circle(C, D, E)), line_intersection(j, Line(E, F)), I we get collinear(I, center(Circle(C, D, E)), line_intersection(j, Line(E, F)))
By perpendicular_direction_conditions_v0_r on C, center(Circle(C, D, E)), line_intersection(j, Line(E, F)), E we get 180 == 2 * direction(C, center(Circle(C, D, E))) - 2 * direction(line_intersection(j, Line(E, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on I, orthocenter(A, C, D), H, I we get 180 == 2 * direction(I, orthocenter(A, C, D)) - 2 * direction(H, I) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), I, line_intersection(j, Line(E, F)), H we get 180 == 2 * direction(orthocenter(A, C, D), I) - 2 * direction(line_intersection(j, Line(E, F)), H) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(j, Line(E, F)), D, I we get 180 == 2 * direction(F, line_intersection(j, Line(E, F))) - 2 * direction(D, I) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, C, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(C, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(C, D, E)), C, line_intersection(j, Line(E, F)), E we get 180 == 2 * direction(center(Circle(C, D, E)), C) - 2 * direction(line_intersection(j, Line(E, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), C, orthocenter(A, C, D), I we get 180 == 2 * direction(line_intersection(j, Line(E, F)), C) - 2 * direction(orthocenter(A, C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, H, I we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(H, I) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), H, orthocenter(A, C, D), I we get 180 == 2 * direction(line_intersection(j, Line(E, F)), H) - 2 * direction(orthocenter(A, C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), F, D, H we get 180 == 2 * direction(line_intersection(j, Line(E, F)), F) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on I, A, I, H we get 180 == 2 * direction(I, A) - 2 * direction(I, H) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(j, Line(E, F)), center(Circle(C, D, E)), C we get 180 == 2 * direction(F, line_intersection(j, Line(E, F))) - 2 * direction(center(Circle(C, D, E)), C) mod 360
By perpendicular_direction_conditions_v0_r on D, I, F, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(D, I) - 2 * direction(F, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), I, H, I we get 180 == 2 * direction(orthocenter(A, C, D), I) - 2 * direction(H, I) mod 360
By perpendicular_direction_conditions_v0_r on I, A, line_intersection(j, Line(E, F)), C we get 180 == 2 * direction(I, A) - 2 * direction(line_intersection(j, Line(E, F)), C) mod 360
By perpendicular_direction_conditions_v0_r on I, C, line_intersection(j, Line(E, F)), E we get 180 == 2 * direction(I, C) - 2 * direction(line_intersection(j, Line(E, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on I, D, line_intersection(j, Line(E, F)), F we get 180 == 2 * direction(I, D) - 2 * direction(line_intersection(j, Line(E, F)), F) mod 360
By perpendicular_direction_conditions_v0_r on H, I, E, F we get 180 == 2 * direction(H, I) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on I, A, I, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(I, A) - 2 * direction(I, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on D, C, line_intersection(j, Line(E, F)), F we get 180 == 2 * direction(D, C) - 2 * direction(line_intersection(j, Line(E, F)), F) mod 360
By perpendicular_direction_conditions_v0_r on H, D, E, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(H, D) - 2 * direction(E, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(j, Line(E, F)), D, center(Circle(C, D, E)) we get 180 == 2 * direction(F, line_intersection(j, Line(E, F))) - 2 * direction(D, center(Circle(C, D, E))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), I, I, H we get 180 == 2 * direction(orthocenter(A, C, D), I) - 2 * direction(I, H) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(j, Line(E, F)), A, I we get 180 == 2 * direction(D, line_intersection(j, Line(E, F))) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), line_intersection(j, Line(E, F)), D we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(line_intersection(j, Line(E, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on C, H, line_intersection(j, Line(E, F)), E we get 180 == 2 * direction(C, H) - 2 * direction(line_intersection(j, Line(E, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), E, D, C we get 180 == 2 * direction(line_intersection(j, Line(E, F)), E) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(C, D, E)), D, line_intersection(j, Line(E, F)), E we get 180 == 2 * direction(center(Circle(C, D, E)), D) - 2 * direction(line_intersection(j, Line(E, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on I, line_intersection(j, Line(E, F)), orthocenter(A, C, D), A we get 180 == 2 * direction(I, line_intersection(j, Line(E, F))) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on C, H, line_intersection(j, Line(E, F)), F we get 180 == 2 * direction(C, H) - 2 * direction(line_intersection(j, Line(E, F)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), F, D, I we get 180 == 2 * direction(line_intersection(j, Line(E, F)), F) - 2 * direction(D, I) mod 360
By perpendicular_direction_conditions_v0_r on D, I, E, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(D, I) - 2 * direction(E, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on C, I, line_intersection(j, Line(E, F)), E we get 180 == 2 * direction(C, I) - 2 * direction(line_intersection(j, Line(E, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), F, C, I we get 180 == 2 * direction(line_intersection(j, Line(E, F)), F) - 2 * direction(C, I) mod 360
By perpendicular_direction_conditions_v0_r on H, C, line_intersection(j, Line(E, F)), F we get 180 == 2 * direction(H, C) - 2 * direction(line_intersection(j, Line(E, F)), F) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, Line(E, F)), D, H we get 180 == 2 * direction(E, line_intersection(j, Line(E, F))) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), I, orthocenter(A, C, D), A we get 180 == 2 * direction(line_intersection(j, Line(E, F)), I) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on D, center(Circle(C, D, E)), F, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(D, center(Circle(C, D, E))) - 2 * direction(F, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(C, D, E)), C, F, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(center(Circle(C, D, E)), C) - 2 * direction(F, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), I, D, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(orthocenter(A, C, D), I) - 2 * direction(D, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on H, I, I, orthocenter(A, C, D) we get 180 == 2 * direction(H, I) - 2 * direction(I, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(j, Line(E, F)), I, orthocenter(A, C, D) we get 180 == 2 * direction(D, line_intersection(j, Line(E, F))) - 2 * direction(I, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on I, H, E, F we get 180 == 2 * direction(I, H) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, Line(E, F)), C, H we get 180 == 2 * direction(E, line_intersection(j, Line(E, F))) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), C, I, A we get 180 == 2 * direction(line_intersection(j, Line(E, F)), C) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on I, D, E, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(I, D) - 2 * direction(E, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(j, Line(E, F)), I, C we get 180 == 2 * direction(F, line_intersection(j, Line(E, F))) - 2 * direction(I, C) mod 360
By perpendicular_direction_conditions_v0_r on E, F, line_intersection(j, Line(E, F)), C we get 180 == 2 * direction(E, F) - 2 * direction(line_intersection(j, Line(E, F)), C) mod 360
By perpendicular_direction_conditions_v0_r on H, I, A, I we get 180 == 2 * direction(H, I) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on I, orthocenter(A, C, D), H, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(I, orthocenter(A, C, D)) - 2 * direction(H, line_intersection(j, Line(E, F))) mod 360
By in_imply_collinear on midpoint(E, F), D, I we get collinear(D, I, midpoint(E, F))
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), F, I, D we get 180 == 2 * direction(line_intersection(j, Line(E, F)), F) - 2 * direction(I, D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, I, H we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(I, H) mod 360
By perpendicular_direction_conditions_v0_r on D, H, line_intersection(j, Line(E, F)), E we get 180 == 2 * direction(D, H) - 2 * direction(line_intersection(j, Line(E, F)), E) mod 360
By in_imply_collinear on midpoint(E, F), line_intersection(j, Line(E, F)), H we get collinear(H, midpoint(E, F), line_intersection(j, Line(E, F)))
By perpendicular_direction_conditions_v0_r on H, line_intersection(j, Line(E, F)), I, orthocenter(A, C, D) we get 180 == 2 * direction(H, line_intersection(j, Line(E, F))) - 2 * direction(I, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on F, E, D, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(F, E) - 2 * direction(D, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), line_intersection(j, Line(E, F)), I we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(line_intersection(j, Line(E, F)), I) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(j, Line(E, F)), center(Circle(C, D, E)), D we get 180 == 2 * direction(F, line_intersection(j, Line(E, F))) - 2 * direction(center(Circle(C, D, E)), D) mod 360
By perpendicular_direction_conditions_v0_r on C, I, line_intersection(j, Line(E, F)), F we get 180 == 2 * direction(C, I) - 2 * direction(line_intersection(j, Line(E, F)), F) mod 360
By perpendicular_direction_conditions_v0_r on F, E, I, H we get 180 == 2 * direction(F, E) - 2 * direction(I, H) mod 360
By perpendicular_direction_conditions_v0_r on C, center(Circle(C, D, E)), E, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(C, center(Circle(C, D, E))) - 2 * direction(E, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on I, H, A, I we get 180 == 2 * direction(I, H) - 2 * direction(A, I) mod 360
By in_imply_collinear on line_intersection(j, Line(E, F)), I, H we get collinear(H, I, line_intersection(j, Line(E, F)))
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), I, A, I we get 180 == 2 * direction(line_intersection(j, Line(E, F)), I) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, Line(E, F)), D, I we get 180 == 2 * direction(E, line_intersection(j, Line(E, F))) - 2 * direction(D, I) mod 360
By perpendicular_direction_conditions_v0_r on I, H, F, E we get 180 == 2 * direction(I, H) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on I, orthocenter(A, C, D), D, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(I, orthocenter(A, C, D)) - 2 * direction(D, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on I, D, F, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(I, D) - 2 * direction(F, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), E, I, C we get 180 == 2 * direction(line_intersection(j, Line(E, F)), E) - 2 * direction(I, C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), I, line_intersection(j, Line(E, F)), D we get 180 == 2 * direction(orthocenter(A, C, D), I) - 2 * direction(line_intersection(j, Line(E, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(j, Line(E, F)), A, orthocenter(A, C, D) we get 180 == 2 * direction(C, line_intersection(j, Line(E, F))) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on F, E, H, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(F, E) - 2 * direction(H, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), C, F, E we get 180 == 2 * direction(line_intersection(j, Line(E, F)), C) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on I, line_intersection(j, Line(E, F)), E, F we get 180 == 2 * direction(I, line_intersection(j, Line(E, F))) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(j, Line(E, F)), I, orthocenter(A, C, D) we get 180 == 2 * direction(C, line_intersection(j, Line(E, F))) - 2 * direction(I, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on A, I, line_intersection(j, Line(E, F)), I we get 180 == 2 * direction(A, I) - 2 * direction(line_intersection(j, Line(E, F)), I) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), F, C, center(Circle(C, D, E)) we get 180 == 2 * direction(line_intersection(j, Line(E, F)), F) - 2 * direction(C, center(Circle(C, D, E))) mod 360
By perpendicular_direction_conditions_v0_r on H, D, line_intersection(j, Line(E, F)), E we get 180 == 2 * direction(H, D) - 2 * direction(line_intersection(j, Line(E, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), I, H, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(orthocenter(A, C, D), I) - 2 * direction(H, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on E, F, I, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(E, F) - 2 * direction(I, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on C, I, F, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(C, I) - 2 * direction(F, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on I, A, H, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(I, A) - 2 * direction(H, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(C, D, E)), C, E, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(center(Circle(C, D, E)), C) - 2 * direction(E, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), I, E, F we get 180 == 2 * direction(line_intersection(j, Line(E, F)), I) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(j, Line(E, F)), H, C we get 180 == 2 * direction(F, line_intersection(j, Line(E, F))) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(j, Line(E, F)), D, C we get 180 == 2 * direction(F, line_intersection(j, Line(E, F))) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on D, C, E, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(D, C) - 2 * direction(E, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), E, center(Circle(C, D, E)), D we get 180 == 2 * direction(line_intersection(j, Line(E, F)), E) - 2 * direction(center(Circle(C, D, E)), D) mod 360
By perpendicular_direction_conditions_v0_r on A, I, I, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(A, I) - 2 * direction(I, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on E, F, D, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(E, F) - 2 * direction(D, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), I, F, E we get 180 == 2 * direction(line_intersection(j, Line(E, F)), I) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, Line(E, F)), D, center(Circle(C, D, E)) we get 180 == 2 * direction(E, line_intersection(j, Line(E, F))) - 2 * direction(D, center(Circle(C, D, E))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), E, center(Circle(C, D, E)), C we get 180 == 2 * direction(line_intersection(j, Line(E, F)), E) - 2 * direction(center(Circle(C, D, E)), C) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, Line(E, F)), center(Circle(C, D, E)), C we get 180 == 2 * direction(E, line_intersection(j, Line(E, F))) - 2 * direction(center(Circle(C, D, E)), C) mod 360
By perpendicular_direction_conditions_v0_r on D, I, line_intersection(j, Line(E, F)), E we get 180 == 2 * direction(D, I) - 2 * direction(line_intersection(j, Line(E, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on I, orthocenter(A, C, D), line_intersection(j, Line(E, F)), H we get 180 == 2 * direction(I, orthocenter(A, C, D)) - 2 * direction(line_intersection(j, Line(E, F)), H) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), D, orthocenter(A, C, D), I we get 180 == 2 * direction(line_intersection(j, Line(E, F)), D) - 2 * direction(orthocenter(A, C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(C, D, E)), D, line_intersection(j, Line(E, F)), F we get 180 == 2 * direction(center(Circle(C, D, E)), D) - 2 * direction(line_intersection(j, Line(E, F)), F) mod 360
By perpendicular_direction_conditions_v0_r on E, F, line_intersection(j, Line(E, F)), H we get 180 == 2 * direction(E, F) - 2 * direction(line_intersection(j, Line(E, F)), H) mod 360
By perpendicular_direction_conditions_v0_r on A, I, H, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(A, I) - 2 * direction(H, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, Line(E, F)), C, D we get 180 == 2 * direction(E, line_intersection(j, Line(E, F))) - 2 * direction(C, D) mod 360
By in_imply_collinear on line_intersection(j, Line(E, F)), C, center(Circle(C, D, E)) we get collinear(C, center(Circle(C, D, E)), line_intersection(j, Line(E, F)))
By perpendicular_direction_conditions_v0_r on I, line_intersection(j, Line(E, F)), A, I we get 180 == 2 * direction(I, line_intersection(j, Line(E, F))) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), H, I we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(H, I) mod 360
By perpendicular_direction_conditions_v0_r on I, A, line_intersection(j, Line(E, F)), I we get 180 == 2 * direction(I, A) - 2 * direction(line_intersection(j, Line(E, F)), I) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), F, C, D we get 180 == 2 * direction(line_intersection(j, Line(E, F)), F) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), I, I, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(orthocenter(A, C, D), I) - 2 * direction(I, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), F, center(Circle(C, D, E)), D we get 180 == 2 * direction(line_intersection(j, Line(E, F)), F) - 2 * direction(center(Circle(C, D, E)), D) mod 360
By perpendicular_direction_conditions_v0_r on I, A, line_intersection(j, Line(E, F)), H we get 180 == 2 * direction(I, A) - 2 * direction(line_intersection(j, Line(E, F)), H) mod 360
By perpendicular_direction_conditions_v0_r on A, I, H, I we get 180 == 2 * direction(A, I) - 2 * direction(H, I) mod 360
By perpendicular_direction_conditions_v0_r on I, A, line_intersection(j, Line(E, F)), D we get 180 == 2 * direction(I, A) - 2 * direction(line_intersection(j, Line(E, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on F, E, line_intersection(j, Line(E, F)), H we get 180 == 2 * direction(F, E) - 2 * direction(line_intersection(j, Line(E, F)), H) mod 360
By perpendicular_direction_conditions_v0_r on A, I, C, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(A, I) - 2 * direction(C, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(j, Line(E, F)), C, center(Circle(C, D, E)) we get 180 == 2 * direction(F, line_intersection(j, Line(E, F))) - 2 * direction(C, center(Circle(C, D, E))) mod 360
By perpendicular_direction_conditions_v0_r on I, orthocenter(A, C, D), line_intersection(j, Line(E, F)), I we get 180 == 2 * direction(I, orthocenter(A, C, D)) - 2 * direction(line_intersection(j, Line(E, F)), I) mod 360
By sss_similarity_v0 on E, H, D, E, A, F we get similar_triangles(A, E, F, H, E, D)
By perpendicular_direction_conditions_v0_r on C, H, E, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(C, H) - 2 * direction(E, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), F, D, center(Circle(C, D, E)) we get 180 == 2 * direction(line_intersection(j, Line(E, F)), F) - 2 * direction(D, center(Circle(C, D, E))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), D, I, A we get 180 == 2 * direction(line_intersection(j, Line(E, F)), D) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on I, C, E, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(I, C) - 2 * direction(E, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, Line(E, F)), C, I we get 180 == 2 * direction(E, line_intersection(j, Line(E, F))) - 2 * direction(C, I) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(j, Line(E, F)), orthocenter(A, C, D), A we get 180 == 2 * direction(C, line_intersection(j, Line(E, F))) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on D, I, line_intersection(j, Line(E, F)), F we get 180 == 2 * direction(D, I) - 2 * direction(line_intersection(j, Line(E, F)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), H, F, E we get 180 == 2 * direction(line_intersection(j, Line(E, F)), H) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(j, Line(E, F)), D, H we get 180 == 2 * direction(F, line_intersection(j, Line(E, F))) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on I, H, I, orthocenter(A, C, D) we get 180 == 2 * direction(I, H) - 2 * direction(I, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on H, C, F, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(H, C) - 2 * direction(F, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on I, H, orthocenter(A, C, D), I we get 180 == 2 * direction(I, H) - 2 * direction(orthocenter(A, C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), F, H, C we get 180 == 2 * direction(line_intersection(j, Line(E, F)), F) - 2 * direction(H, C) mod 360
By in_imply_collinear on I, D, center(Circle(C, D, E)) we get collinear(D, I, center(Circle(C, D, E)))
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), I, C, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(orthocenter(A, C, D), I) - 2 * direction(C, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), D, F, E we get 180 == 2 * direction(line_intersection(j, Line(E, F)), D) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on E, F, I, H we get 180 == 2 * direction(E, F) - 2 * direction(I, H) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(j, Line(E, F)), E, F we get 180 == 2 * direction(D, line_intersection(j, Line(E, F))) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), D, E, F we get 180 == 2 * direction(line_intersection(j, Line(E, F)), D) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on H, I, orthocenter(A, C, D), I we get 180 == 2 * direction(H, I) - 2 * direction(orthocenter(A, C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on I, H, I, A we get 180 == 2 * direction(I, H) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, Line(E, F)), center(Circle(C, D, E)), D we get 180 == 2 * direction(E, line_intersection(j, Line(E, F))) - 2 * direction(center(Circle(C, D, E)), D) mod 360
By probably_between_and_collinear_implies_between on H, D, C we get between(C, D, H)
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), H, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(H, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), E, C, H we get 180 == 2 * direction(line_intersection(j, Line(E, F)), E) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on E, F, line_intersection(j, Line(E, F)), I we get 180 == 2 * direction(E, F) - 2 * direction(line_intersection(j, Line(E, F)), I) mod 360
By in_imply_collinear on line_intersection(i, Line(E, I)), E, I we get collinear(E, I, line_intersection(i, Line(E, I)))
By in_imply_collinear on H, center(Circle(C, D, E)), D we get collinear(D, H, center(Circle(C, D, E)))
By probably_between_and_collinear_implies_between on C, I, H we get between(C, I, H)
By in_imply_collinear on midpoint(E, F), line_intersection(j, Line(E, F)), C we get collinear(C, midpoint(E, F), line_intersection(j, Line(E, F)))
By sss_similarity_v1 on F, A, E, D, H, E we get similar_triangles(A, E, F, H, E, D)
By in_imply_collinear on midpoint(E, F), I, C we get collinear(C, I, midpoint(E, F))
By in_imply_collinear on midpoint(E, F), I, line_intersection(j, Line(E, F)) we get collinear(I, midpoint(E, F), line_intersection(j, Line(E, F)))
By sss_similarity_v1 on E, F, A, E, D, H we get similar_triangles(A, E, F, H, E, D)
By sss_anti_similarity_v1 on D, F, H, D, E, H we get anti_similar_triangles(D, E, H, D, F, H)
By in_imply_collinear on midpoint(E, F), center(Circle(C, D, E)), D we get collinear(D, midpoint(E, F), center(Circle(C, D, E)))
By in_imply_collinear on H, center(Circle(C, D, E)), C we get collinear(C, H, center(Circle(C, D, E)))
By internal_angle_bisector_definition_v0 on I, H, I, D we get angle(H, D, I) == angle(I, D, H) mod 360
By probably_between_and_collinear_implies_between on D, I, H we get between(D, I, H)
By sss_similarity_v1 on E, F, A, E, D, H we get similar_triangles(A, E, F, H, E, D)
By in_imply_collinear on midpoint(E, F), D, line_intersection(j, Line(E, F)) we get collinear(D, midpoint(E, F), line_intersection(j, Line(E, F)))
By in_imply_collinear on center(Circle(A, D, F)), H, G we get collinear(G, H, center(Circle(A, D, F)))
By in_imply_collinear on D, line_intersection(j, Line(E, F)), H we get collinear(D, H, line_intersection(j, Line(E, F)))
By internal_angle_bisector_definition_v0 on G, center(Circle(C, D, E)), E, C we get angle(G, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, E) mod 360
By in_imply_collinear on line_intersection(j, Line(E, F)), D, center(Circle(C, D, E)) we get collinear(D, center(Circle(C, D, E)), line_intersection(j, Line(E, F)))
By collinear_definition on A, center(Circle(A, D, F)), D we get center(Circle(A, D, F)) in Line(A, D), D in Line(A, center(Circle(A, D, F))), Line(A, D) == Line(A, center(Circle(A, D, F))), 0 == 2 * angle(center(Circle(A, D, F)), A, D) mod 360
By internal_angle_bisector_definition_v0 on E, center(Circle(C, D, E)), A, C we get angle(E, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, A) mod 360
By in_imply_collinear on line_intersection(i, Line(E, I)), D, B we get collinear(B, D, line_intersection(i, Line(E, I)))
By sss_anti_similarity_v0 on H, D, E, H, D, F we get anti_similar_triangles(D, E, H, D, F, H)
By in_imply_collinear on center(Circle(C, D, E)), line_intersection(j, Line(E, F)), H we get collinear(H, center(Circle(C, D, E)), line_intersection(j, Line(E, F)))
By similar_triangle_basic_properties on H, G, C, D, F, C we get angle(D, F, C) == angle(H, G, C) mod 360, angle(F, C, D) == angle(G, C, H) mod 360, angle(C, D, F) == angle(C, H, G) mod 360, log(distance(D, F)) + log(distance(C, G)) == log(distance(G, H)) + log(distance(C, F)), log(distance(C, F)) + log(distance(C, H)) == log(distance(C, G)) + log(distance(C, D)), log(distance(C, D)) + log(distance(G, H)) == log(distance(C, H)) + log(distance(D, F))
By in_imply_collinear on midpoint(E, F), I, H we get collinear(H, I, midpoint(E, F))
By anti_similar_triangle_basic_properties on I, C, A, G, C, H we get angle(I, C, A) == 0 - angle(G, C, H) mod 360, angle(C, A, I) == 0 - angle(C, H, G) mod 360, angle(A, I, C) == 0 - angle(H, G, C) mod 360, log(distance(C, G)) + log(distance(A, C)) == log(distance(C, I)) + log(distance(C, H)), log(distance(A, C)) + log(distance(G, H)) == log(distance(C, H)) + log(distance(A, I)), log(distance(A, I)) + log(distance(C, G)) == log(distance(G, H)) + log(distance(C, I))
By in_imply_collinear on midpoint(E, F), center(Circle(C, D, E)), C we get collinear(C, midpoint(E, F), center(Circle(C, D, E)))
By sss_anti_similarity_v1 on F, H, D, E, H, D we get anti_similar_triangles(D, E, H, D, F, H)
By in_imply_collinear on midpoint(E, F), H, D we get collinear(D, H, midpoint(E, F))
By sss_similarity_v1 on D, H, E, F, A, E we get similar_triangles(A, E, F, H, E, D)
By sas_anti_similarity on E, center(Circle(C, D, E)), D, F, C, E we get anti_similar_triangles(C, E, F, center(Circle(C, D, E)), D, E)
By in_imply_collinear on center(Circle(C, D, E)), H, I we get collinear(H, I, center(Circle(C, D, E)))
By sss_anti_similarity_v0 on D, H, F, D, H, E we get anti_similar_triangles(D, E, H, D, F, H)
By sss_similarity_v0 on F, E, A, D, E, H we get similar_triangles(A, E, F, H, E, D)
By in_imply_collinear on midpoint(E, F), C, H we get collinear(C, H, midpoint(E, F))
By sss_similarity_v0 on A, F, E, H, D, E we get similar_triangles(A, E, F, H, E, D)
By sss_anti_similarity_v1 on D, H, E, D, H, F we get anti_similar_triangles(D, E, H, D, F, H)
By sss_similarity_v0 on A, F, E, H, D, E we get similar_triangles(A, E, F, H, E, D)
By collinear_definition on D, C, H we get C in Line(D, H), H in Line(C, D), Line(C, D) == Line(D, H), 0 == 2 * angle(C, D, H) mod 360
By internal_angle_bisector_definition_v0 on A, center(Circle(C, D, E)), E, C we get angle(A, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, E) mod 360
By internal_angle_bisector_definition_v0 on F, H, E, D we get angle(F, D, H) == angle(H, D, E) mod 360
By sas_similarity on F, C, E, D, center(Circle(C, D, E)), E we get similar_triangles(C, E, F, center(Circle(C, D, E)), E, D)
By internal_angle_bisector_definition_v0 on F, center(Circle(C, D, E)), B, C we get angle(F, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, B) mod 360
By sss_similarity_v0 on E, A, F, E, H, D we get similar_triangles(A, E, F, H, E, D)
By sss_anti_similarity_v1 on H, E, D, H, F, D we get anti_similar_triangles(D, E, H, D, F, H)
By sas_anti_similarity on E, H, A, F, center(Circle(C, D, E)), C we get anti_similar_triangles(A, E, H, C, F, center(Circle(C, D, E)))
By sss_similarity_v0 on D, E, H, F, E, A we get similar_triangles(A, E, F, H, E, D)
By sas_similarity on E, center(Circle(C, D, E)), C, E, H, A we get similar_triangles(A, E, H, C, E, center(Circle(C, D, E)))
By sss_similarity_v1 on E, D, H, E, F, A we get similar_triangles(A, E, F, H, E, D)
By sss_similarity_v0 on H, D, E, A, F, E we get similar_triangles(A, E, F, H, E, D)
By internal_angle_bisector_definition_v0 on G, center(Circle(C, D, E)), B, C we get angle(G, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, B) mod 360
By sss_anti_similarity_v1 on D, F, H, D, E, H we get anti_similar_triangles(D, E, H, D, F, H)
By sas_anti_similarity on E, D, F, F, center(Circle(C, D, E)), C we get anti_similar_triangles(C, F, center(Circle(C, D, E)), F, E, D)
By sss_anti_similarity_v1 on H, D, F, H, D, E we get anti_similar_triangles(D, E, H, D, F, H)
By sss_similarity_v1 on D, H, E, F, A, E we get similar_triangles(A, E, F, H, E, D)
By sss_anti_similarity_v1 on F, H, D, E, H, D we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v1 on H, E, D, H, F, D we get anti_similar_triangles(D, E, H, D, F, H)
By internal_angle_bisector_definition_v0 on I, center(Circle(C, D, E)), I, C we get angle(I, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, I) mod 360
By anti_similar_triangle_basic_properties on H, C, G, D, C, E we get angle(H, C, G) == 0 - angle(D, C, E) mod 360, angle(C, G, H) == 0 - angle(C, E, D) mod 360, angle(G, H, C) == 0 - angle(E, D, C) mod 360, log(distance(C, D)) + log(distance(C, G)) == log(distance(C, H)) + log(distance(C, E)), log(distance(C, E)) + log(distance(G, H)) == log(distance(C, G)) + log(distance(D, E)), log(distance(D, E)) + log(distance(C, H)) == log(distance(G, H)) + log(distance(C, D))
By sss_anti_similarity_v0 on D, E, H, D, F, H we get anti_similar_triangles(D, E, H, D, F, H)
By sss_similarity_v0 on A, F, E, H, D, E we get similar_triangles(A, E, F, H, E, D)
By internal_angle_bisector_definition_v0 on A, center(Circle(C, D, E)), B, C we get angle(A, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, B) mod 360
By sss_anti_similarity_v0 on F, D, H, E, D, H we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v0 on E, H, D, F, H, D we get anti_similar_triangles(D, E, H, D, F, H)
By sss_similarity_v1 on A, E, F, H, E, D we get similar_triangles(A, E, F, H, E, D)
By sss_anti_similarity_v1 on E, D, H, F, D, H we get anti_similar_triangles(D, E, H, D, F, H)
By sss_similarity_v1 on A, E, F, H, E, D we get similar_triangles(A, E, F, H, E, D)
By sas_anti_similarity on F, center(Circle(C, D, E)), C, E, D, F we get anti_similar_triangles(C, F, center(Circle(C, D, E)), F, E, D)
By sas_similarity on C, center(Circle(C, D, E)), F, E, D, F we get similar_triangles(C, F, center(Circle(C, D, E)), E, F, D)
By sss_anti_similarity_v1 on F, H, D, E, H, D we get anti_similar_triangles(D, E, H, D, F, H)
By sss_similarity_v0 on E, H, D, E, A, F we get similar_triangles(A, E, F, H, E, D)
By sas_anti_similarity on D, center(Circle(C, D, E)), E, E, C, F we get anti_similar_triangles(C, E, F, center(Circle(C, D, E)), D, E)
By sas_similarity on E, C, F, E, center(Circle(C, D, E)), D we get similar_triangles(C, E, F, center(Circle(C, D, E)), E, D)
By internal_angle_bisector_definition_v0 on C, H, C, D we get angle(C, D, H) == angle(H, D, C) mod 360
By sss_anti_similarity_v0 on D, E, H, D, F, H we get anti_similar_triangles(D, E, H, D, F, H)
By similar_triangle_basic_properties on C, G, H, C, F, D we get angle(C, F, D) == angle(C, G, H) mod 360, angle(F, D, C) == angle(G, H, C) mod 360, angle(D, C, F) == angle(H, C, G) mod 360, log(distance(C, F)) + log(distance(G, H)) == log(distance(C, G)) + log(distance(D, F)), log(distance(D, F)) + log(distance(C, H)) == log(distance(G, H)) + log(distance(C, D)), log(distance(C, D)) + log(distance(C, G)) == log(distance(C, H)) + log(distance(C, F))
By sas_similarity on F, center(Circle(C, D, E)), C, F, D, E we get similar_triangles(C, F, center(Circle(C, D, E)), E, F, D)
By internal_angle_bisector_definition_v0 on F, D, E, H we get angle(D, H, E) == angle(F, H, D) mod 360
By sss_anti_similarity_v1 on H, D, F, H, D, E we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v1 on H, E, D, H, F, D we get anti_similar_triangles(D, E, H, D, F, H)
By sss_similarity_v1 on H, E, D, A, E, F we get similar_triangles(A, E, F, H, E, D)
By sss_similarity_v1 on F, A, E, D, H, E we get similar_triangles(A, E, F, H, E, D)
By anti_similar_triangle_basic_properties on I, A, C, G, H, C we get angle(I, A, C) == 0 - angle(G, H, C) mod 360, angle(A, C, I) == 0 - angle(H, C, G) mod 360, angle(C, I, A) == 0 - angle(C, G, H) mod 360, log(distance(A, I)) + log(distance(C, H)) == log(distance(G, H)) + log(distance(A, C)), log(distance(A, C)) + log(distance(C, G)) == log(distance(C, H)) + log(distance(C, I)), log(distance(C, G)) + log(distance(A, I)) == log(distance(C, I)) + log(distance(G, H))
By sss_anti_similarity_v0 on H, D, E, H, D, F we get anti_similar_triangles(D, E, H, D, F, H)
By collinear_definition on A, D, center(Circle(A, D, F)) we get D in Line(A, center(Circle(A, D, F))), center(Circle(A, D, F)) in Line(A, D), Line(A, D) == Line(A, center(Circle(A, D, F))), 0 == 2 * angle(D, A, center(Circle(A, D, F))) mod 360
By sss_anti_similarity_v0 on D, H, F, D, H, E we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v1 on D, F, H, D, E, H we get anti_similar_triangles(D, E, H, D, F, H)
By sas_similarity on A, H, E, C, center(Circle(C, D, E)), E we get similar_triangles(A, E, H, C, E, center(Circle(C, D, E)))
By sss_similarity_v0 on E, A, F, E, H, D we get similar_triangles(A, E, F, H, E, D)
By sss_similarity_v1 on D, H, E, F, A, E we get similar_triangles(A, E, F, H, E, D)
By collinear_definition on D, center(Circle(A, D, F)), A we get center(Circle(A, D, F)) in Line(A, D), A in Line(D, center(Circle(A, D, F))), Line(A, D) == Line(D, center(Circle(A, D, F))), 0 == 2 * angle(center(Circle(A, D, F)), D, A) mod 360
By sss_similarity_v1 on E, D, H, E, F, A we get similar_triangles(A, E, F, H, E, D)
By sss_anti_similarity_v0 on H, D, E, H, D, F we get anti_similar_triangles(D, E, H, D, F, H)
By sss_similarity_v0 on A, F, E, H, D, E we get similar_triangles(A, E, F, H, E, D)
By sss_anti_similarity_v1 on H, D, F, H, D, E we get anti_similar_triangles(D, E, H, D, F, H)
By anti_similar_triangle_basic_properties on C, H, G, C, D, E we get angle(C, H, G) == 0 - angle(C, D, E) mod 360, angle(H, G, C) == 0 - angle(D, E, C) mod 360, angle(G, C, H) == 0 - angle(E, C, D) mod 360, log(distance(C, D)) + log(distance(G, H)) == log(distance(C, H)) + log(distance(D, E)), log(distance(D, E)) + log(distance(C, G)) == log(distance(G, H)) + log(distance(C, E)), log(distance(C, E)) + log(distance(C, H)) == log(distance(C, G)) + log(distance(C, D))
By sss_similarity_v1 on D, H, E, F, A, E we get similar_triangles(A, E, F, H, E, D)
By internal_angle_bisector_definition_v0 on B, center(Circle(C, D, E)), A, C we get angle(B, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, A) mod 360
By sss_similarity_v1 on D, H, E, F, A, E we get similar_triangles(A, E, F, H, E, D)
By sas_similarity on E, center(Circle(C, D, E)), D, E, C, F we get similar_triangles(C, E, F, center(Circle(C, D, E)), E, D)
By sas_similarity on C, center(Circle(C, D, E)), E, F, D, E we get similar_triangles(C, E, center(Circle(C, D, E)), F, E, D)
By sss_anti_similarity_v1 on F, H, D, E, H, D we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v1 on H, D, F, H, D, E we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v0 on E, H, D, F, H, D we get anti_similar_triangles(D, E, H, D, F, H)
By sss_similarity_v1 on E, D, H, E, F, A we get similar_triangles(A, E, F, H, E, D)
By internal_angle_bisector_definition_v0 on B, center(Circle(C, D, E)), G, C we get angle(B, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, G) mod 360
By sas_anti_similarity on C, center(Circle(C, D, E)), F, F, D, E we get anti_similar_triangles(C, F, center(Circle(C, D, E)), F, E, D)
By sss_anti_similarity_v1 on E, D, H, F, D, H we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v1 on E, D, H, F, D, H we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v1 on H, D, F, H, D, E we get anti_similar_triangles(D, E, H, D, F, H)
By sss_similarity_v0 on E, H, D, E, A, F we get similar_triangles(A, E, F, H, E, D)
By internal_angle_bisector_definition_v0 on E, center(Circle(C, D, E)), G, C we get angle(E, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, G) mod 360
By sss_anti_similarity_v0 on E, H, D, F, H, D we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v0 on H, D, E, H, D, F we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v1 on F, H, D, E, H, D we get anti_similar_triangles(D, E, H, D, F, H)
By sas_similarity on C, center(Circle(C, D, E)), F, E, H, A we get similar_triangles(A, E, H, F, C, center(Circle(C, D, E)))
By sss_similarity_v1 on E, F, A, E, D, H we get similar_triangles(A, E, F, H, E, D)
By sss_similarity_v0 on D, E, H, F, E, A we get similar_triangles(A, E, F, H, E, D)
By sss_anti_similarity_v1 on D, H, E, D, H, F we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v0 on D, H, F, D, H, E we get anti_similar_triangles(D, E, H, D, F, H)
By sas_similarity on D, center(Circle(C, D, E)), E, F, C, E we get similar_triangles(C, E, F, center(Circle(C, D, E)), E, D)
By sas_similarity on F, center(Circle(C, D, E)), D, F, C, E we get similar_triangles(C, E, F, center(Circle(C, D, E)), D, F)
By sss_similarity_v1 on D, H, E, F, A, E we get similar_triangles(A, E, F, H, E, D)
By sss_anti_similarity_v0 on H, F, D, H, E, D we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v0 on H, D, E, H, D, F we get anti_similar_triangles(D, E, H, D, F, H)
By internal_angle_bisector_definition_v0 on E, H, F, D we get angle(E, D, H) == angle(H, D, F) mod 360
By sss_similarity_v0 on H, D, E, A, F, E we get similar_triangles(A, E, F, H, E, D)
By sss_similarity_v0 on D, E, H, F, E, A we get similar_triangles(A, E, F, H, E, D)
By sss_similarity_v1 on A, E, F, H, E, D we get similar_triangles(A, E, F, H, E, D)
By sss_similarity_v0 on F, E, A, D, E, H we get similar_triangles(A, E, F, H, E, D)
By sas_anti_similarity on A, H, E, C, center(Circle(C, D, E)), F we get anti_similar_triangles(A, E, H, C, F, center(Circle(C, D, E)))
By sss_anti_similarity_v0 on F, D, H, E, D, H we get anti_similar_triangles(D, E, H, D, F, H)
By sss_similarity_v0 on F, E, A, D, E, H we get similar_triangles(A, E, F, H, E, D)
By sss_similarity_v1 on E, D, H, E, F, A we get similar_triangles(A, E, F, H, E, D)
By sas_anti_similarity on C, center(Circle(C, D, E)), E, E, D, F we get anti_similar_triangles(C, E, center(Circle(C, D, E)), E, F, D)
By collinear_definition on center(Circle(A, D, F)), D, A we get D in Line(A, center(Circle(A, D, F))), A in Line(D, center(Circle(A, D, F))), Line(A, center(Circle(A, D, F))) == Line(D, center(Circle(A, D, F))), 0 == 2 * angle(D, center(Circle(A, D, F)), A) mod 360
By sss_similarity_v1 on H, E, D, A, E, F we get similar_triangles(A, E, F, H, E, D)
By perpendicular_bisector_sufficient_conditions on A, F, center(Circle(A, D, F)), G we get perpendicular_bisector(A, F) == Line(G, center(Circle(A, D, F)))
By sss_anti_similarity_v1 on E, D, H, F, D, H we get anti_similar_triangles(D, E, H, D, F, H)
By sas_anti_similarity on E, center(Circle(C, D, E)), C, F, D, E we get anti_similar_triangles(C, E, center(Circle(C, D, E)), E, F, D)
By sas_anti_similarity on F, D, E, E, center(Circle(C, D, E)), C we get anti_similar_triangles(C, E, center(Circle(C, D, E)), E, F, D)
By collinear_definition on H, D, C we get D in Line(C, H), C in Line(D, H), Line(C, H) == Line(D, H), 0 == 2 * angle(D, H, C) mod 360
By sas_anti_similarity on E, C, F, F, center(Circle(C, D, E)), D we get anti_similar_triangles(C, E, F, center(Circle(C, D, E)), F, D)
By sas_anti_similarity on E, H, A, C, center(Circle(C, D, E)), E we get anti_similar_triangles(A, E, H, E, C, center(Circle(C, D, E)))
By sss_similarity_v0 on E, H, D, E, A, F we get similar_triangles(A, E, F, H, E, D)
By sss_anti_similarity_v1 on D, H, E, D, H, F we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v0 on D, H, F, D, H, E we get anti_similar_triangles(D, E, H, D, F, H)
By sas_anti_similarity on D, center(Circle(C, D, E)), F, F, C, E we get anti_similar_triangles(C, E, F, center(Circle(C, D, E)), F, D)
By sss_anti_similarity_v0 on E, H, D, F, H, D we get anti_similar_triangles(D, E, H, D, F, H)
By sas_similarity on E, center(Circle(C, D, E)), C, E, D, F we get similar_triangles(C, E, center(Circle(C, D, E)), F, E, D)
By sss_similarity_v1 on E, F, A, E, D, H we get similar_triangles(A, E, F, H, E, D)
By sss_similarity_v1 on F, A, E, D, H, E we get similar_triangles(A, E, F, H, E, D)
By sss_similarity_v0 on H, D, E, A, F, E we get similar_triangles(A, E, F, H, E, D)
By sss_similarity_v1 on E, D, H, E, F, A we get similar_triangles(A, E, F, H, E, D)
By sss_anti_similarity_v0 on E, H, D, F, H, D we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v0 on F, D, H, E, D, H we get anti_similar_triangles(D, E, H, D, F, H)
By internal_angle_bisector_definition_v0 on B, center(Circle(C, D, E)), F, C we get angle(B, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, F) mod 360
By sss_similarity_v1 on H, E, D, A, E, F we get similar_triangles(A, E, F, H, E, D)
By internal_angle_bisector_definition_v0 on E, D, F, H we get angle(D, H, F) == angle(E, H, D) mod 360
By sss_similarity_v0 on E, A, F, E, H, D we get similar_triangles(A, E, F, H, E, D)
By sss_similarity_v0 on E, H, D, E, A, F we get similar_triangles(A, E, F, H, E, D)
By sss_similarity_v0 on E, A, F, E, H, D we get similar_triangles(A, E, F, H, E, D)
By sss_similarity_v0 on F, E, A, D, E, H we get similar_triangles(A, E, F, H, E, D)
By sss_anti_similarity_v0 on H, D, E, H, D, F we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v1 on E, D, H, F, D, H we get anti_similar_triangles(D, E, H, D, F, H)
By sas_anti_similarity on F, C, E, E, center(Circle(C, D, E)), D we get anti_similar_triangles(C, E, F, center(Circle(C, D, E)), D, E)
By sss_similarity_v0 on F, E, A, D, E, H we get similar_triangles(A, E, F, H, E, D)
By sss_anti_similarity_v0 on D, H, F, D, H, E we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v0 on F, D, H, E, D, H we get anti_similar_triangles(D, E, H, D, F, H)
By sss_similarity_v0 on F, E, A, D, E, H we get similar_triangles(A, E, F, H, E, D)
By sss_similarity_v1 on E, F, A, E, D, H we get similar_triangles(A, E, F, H, E, D)
By sas_anti_similarity on E, D, F, C, center(Circle(C, D, E)), E we get anti_similar_triangles(C, E, center(Circle(C, D, E)), E, F, D)
By sas_anti_similarity on E, C, F, D, center(Circle(C, D, E)), E we get anti_similar_triangles(C, E, F, center(Circle(C, D, E)), D, E)
By external_angle_bisector_definition_v0 on F, orthocenter(A, C, D), E, I we get 180 == angle(F, I, orthocenter(A, C, D)) + angle(E, I, orthocenter(A, C, D)) mod 360
By sss_similarity_v1 on E, F, A, E, D, H we get similar_triangles(A, E, F, H, E, D)
By sss_anti_similarity_v1 on D, F, H, D, E, H we get anti_similar_triangles(D, E, H, D, F, H)
By sas_similarity on D, center(Circle(C, D, E)), F, E, C, F we get similar_triangles(C, E, F, center(Circle(C, D, E)), D, F)
By sss_similarity_v1 on H, E, D, A, E, F we get similar_triangles(A, E, F, H, E, D)
By sas_anti_similarity on F, center(Circle(C, D, E)), C, E, H, A we get anti_similar_triangles(A, E, H, C, F, center(Circle(C, D, E)))
By internal_angle_bisector_definition_v0 on I, center(Circle(C, D, E)), I, D we get angle(I, D, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), D, I) mod 360
By sss_anti_similarity_v1 on D, H, E, D, H, F we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v1 on D, F, H, D, E, H we get anti_similar_triangles(D, E, H, D, F, H)
By collinear_definition on D, I, H we get I in Line(D, H), H in Line(D, I), Line(D, H) == Line(D, I), 0 == 2 * angle(I, D, H) mod 360
By sas_similarity on E, H, A, C, center(Circle(C, D, E)), F we get similar_triangles(A, E, H, F, C, center(Circle(C, D, E)))
By sas_similarity on E, D, F, E, center(Circle(C, D, E)), C we get similar_triangles(C, E, center(Circle(C, D, E)), F, E, D)
By sss_anti_similarity_v0 on F, D, H, E, D, H we get anti_similar_triangles(D, E, H, D, F, H)
By sas_similarity on C, center(Circle(C, D, E)), E, A, H, E we get similar_triangles(A, E, H, C, E, center(Circle(C, D, E)))
By sss_similarity_v1 on A, E, F, H, E, D we get similar_triangles(A, E, F, H, E, D)
By sss_similarity_v1 on H, E, D, A, E, F we get similar_triangles(A, E, F, H, E, D)
By sss_anti_similarity_v1 on D, F, H, D, E, H we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v0 on H, F, D, H, E, D we get anti_similar_triangles(D, E, H, D, F, H)
By sas_similarity on E, C, F, D, center(Circle(C, D, E)), F we get similar_triangles(C, E, F, center(Circle(C, D, E)), D, F)
By sas_anti_similarity on F, center(Circle(C, D, E)), D, E, C, F we get anti_similar_triangles(C, E, F, center(Circle(C, D, E)), F, D)
By sas_anti_similarity on A, H, E, E, center(Circle(C, D, E)), C we get anti_similar_triangles(A, E, H, E, C, center(Circle(C, D, E)))
By sas_similarity on A, H, E, F, center(Circle(C, D, E)), C we get similar_triangles(A, E, H, F, C, center(Circle(C, D, E)))
By sss_similarity_v0 on A, F, E, H, D, E we get similar_triangles(A, E, F, H, E, D)
By sss_anti_similarity_v0 on F, D, H, E, D, H we get anti_similar_triangles(D, E, H, D, F, H)
By sss_similarity_v1 on A, E, F, H, E, D we get similar_triangles(A, E, F, H, E, D)
By sss_similarity_v1 on H, E, D, A, E, F we get similar_triangles(A, E, F, H, E, D)
By sss_anti_similarity_v1 on F, H, D, E, H, D we get anti_similar_triangles(D, E, H, D, F, H)
By sss_similarity_v0 on H, D, E, A, F, E we get similar_triangles(A, E, F, H, E, D)
By sss_similarity_v0 on A, F, E, H, D, E we get similar_triangles(A, E, F, H, E, D)
By collinear_definition on D, H, I we get H in Line(D, I), I in Line(D, H), Line(D, H) == Line(D, I), 0 == 2 * angle(H, D, I) mod 360
By sss_similarity_v1 on F, A, E, D, H, E we get similar_triangles(A, E, F, H, E, D)
By sss_anti_similarity_v0 on D, H, F, D, H, E we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v1 on H, D, F, H, D, E we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v0 on D, E, H, D, F, H we get anti_similar_triangles(D, E, H, D, F, H)
By sss_similarity_v1 on F, A, E, D, H, E we get similar_triangles(A, E, F, H, E, D)
By sss_similarity_v0 on D, E, H, F, E, A we get similar_triangles(A, E, F, H, E, D)
By point_on_perpendicular_bisector on F, E, line_intersection(j, Line(E, F)), j we get distance(E, line_intersection(j, Line(E, F))) == distance(F, line_intersection(j, Line(E, F)))
By sas_anti_similarity on F, D, E, C, center(Circle(C, D, E)), F we get anti_similar_triangles(C, F, center(Circle(C, D, E)), F, E, D)
By sas_similarity on E, H, A, E, center(Circle(C, D, E)), C we get similar_triangles(A, E, H, C, E, center(Circle(C, D, E)))
By sas_similarity on F, center(Circle(C, D, E)), C, A, H, E we get similar_triangles(A, E, H, F, C, center(Circle(C, D, E)))
By sas_anti_similarity on F, C, E, D, center(Circle(C, D, E)), F we get anti_similar_triangles(C, E, F, center(Circle(C, D, E)), F, D)
By sas_anti_similarity on E, center(Circle(C, D, E)), C, A, H, E we get anti_similar_triangles(A, E, H, E, C, center(Circle(C, D, E)))
By sss_anti_similarity_v0 on H, F, D, H, E, D we get anti_similar_triangles(D, E, H, D, F, H)
By sas_similarity on F, C, E, F, center(Circle(C, D, E)), D we get similar_triangles(C, E, F, center(Circle(C, D, E)), D, F)
By sss_anti_similarity_v0 on E, H, D, F, H, D we get anti_similar_triangles(D, E, H, D, F, H)
By sas_similarity on F, D, E, C, center(Circle(C, D, E)), E we get similar_triangles(C, E, center(Circle(C, D, E)), F, E, D)
By sss_anti_similarity_v1 on D, H, E, D, H, F we get anti_similar_triangles(D, E, H, D, F, H)
By collinear_definition on D, H, C we get H in Line(C, D), C in Line(D, H), Line(C, D) == Line(D, H), 0 == 2 * angle(H, D, C) mod 360
By collinear_definition on H, C, D we get C in Line(D, H), D in Line(C, H), Line(C, H) == Line(D, H), 0 == 2 * angle(C, H, D) mod 360
By sss_anti_similarity_v0 on H, F, D, H, E, D we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v0 on D, E, H, D, F, H we get anti_similar_triangles(D, E, H, D, F, H)
By sas_anti_similarity on C, center(Circle(C, D, E)), E, E, H, A we get anti_similar_triangles(A, E, H, E, C, center(Circle(C, D, E)))
By sss_similarity_v0 on D, E, H, F, E, A we get similar_triangles(A, E, F, H, E, D)
By sss_similarity_v1 on A, E, F, H, E, D we get similar_triangles(A, E, F, H, E, D)
By sss_anti_similarity_v0 on H, F, D, H, E, D we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v1 on D, H, E, D, H, F we get anti_similar_triangles(D, E, H, D, F, H)
By sas_anti_similarity on C, center(Circle(C, D, E)), F, A, H, E we get anti_similar_triangles(A, E, H, C, F, center(Circle(C, D, E)))
By sss_anti_similarity_v1 on H, E, D, H, F, D we get anti_similar_triangles(D, E, H, D, F, H)
By sss_similarity_v1 on F, A, E, D, H, E we get similar_triangles(A, E, F, H, E, D)
By sss_anti_similarity_v1 on H, E, D, H, F, D we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v1 on E, D, H, F, D, H we get anti_similar_triangles(D, E, H, D, F, H)
By sss_similarity_v0 on E, H, D, E, A, F we get similar_triangles(A, E, F, H, E, D)
By sss_similarity_v1 on E, D, H, E, F, A we get similar_triangles(A, E, F, H, E, D)
By sss_similarity_v0 on D, E, H, F, E, A we get similar_triangles(A, E, F, H, E, D)
By sss_anti_similarity_v0 on H, F, D, H, E, D we get anti_similar_triangles(D, E, H, D, F, H)
By sss_similarity_v0 on H, D, E, A, F, E we get similar_triangles(A, E, F, H, E, D)
By sas_similarity on F, D, E, F, center(Circle(C, D, E)), C we get similar_triangles(C, F, center(Circle(C, D, E)), E, F, D)
By sss_similarity_v0 on E, A, F, E, H, D we get similar_triangles(A, E, F, H, E, D)
By sss_similarity_v0 on E, A, F, E, H, D we get similar_triangles(A, E, F, H, E, D)
By sss_anti_similarity_v0 on D, E, H, D, F, H we get anti_similar_triangles(D, E, H, D, F, H)
By collinear_definition on D, A, center(Circle(A, D, F)) we get A in Line(D, center(Circle(A, D, F))), center(Circle(A, D, F)) in Line(A, D), Line(A, D) == Line(D, center(Circle(A, D, F))), 0 == 2 * angle(A, D, center(Circle(A, D, F))) mod 360
By sss_anti_similarity_v0 on D, E, H, D, F, H we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v1 on H, E, D, H, F, D we get anti_similar_triangles(D, E, H, D, F, H)
By sss_similarity_v0 on H, D, E, A, F, E we get similar_triangles(A, E, F, H, E, D)
By sas_similarity on E, D, F, C, center(Circle(C, D, E)), F we get similar_triangles(C, F, center(Circle(C, D, E)), E, F, D)
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), D, E, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(line_intersection(j, Line(E, F)), D) - 2 * direction(E, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), F, line_intersection(j, Line(E, F)), I we get 180 == 2 * direction(line_intersection(j, Line(E, F)), F) - 2 * direction(line_intersection(j, Line(E, F)), I) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(j, Line(E, F)), line_intersection(j, Line(E, F)), F we get 180 == 2 * direction(D, line_intersection(j, Line(E, F))) - 2 * direction(line_intersection(j, Line(E, F)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), H, E, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(line_intersection(j, Line(E, F)), H) - 2 * direction(E, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(j, Line(E, F)), E, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(D, line_intersection(j, Line(E, F))) - 2 * direction(E, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, Line(E, F)), I, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(E, line_intersection(j, Line(E, F))) - 2 * direction(I, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), C, line_intersection(j, Line(E, F)), E we get 180 == 2 * direction(line_intersection(j, Line(E, F)), C) - 2 * direction(line_intersection(j, Line(E, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), F, I, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(line_intersection(j, Line(E, F)), F) - 2 * direction(I, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), F, C, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(line_intersection(j, Line(E, F)), F) - 2 * direction(C, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on H, I, line_intersection(j, Line(E, F)), E we get 180 == 2 * direction(H, I) - 2 * direction(line_intersection(j, Line(E, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on H, I, line_intersection(j, Line(E, F)), F we get 180 == 2 * direction(H, I) - 2 * direction(line_intersection(j, Line(E, F)), F) mod 360
By perpendicular_direction_conditions_v0_r on I, H, line_intersection(j, Line(E, F)), E we get 180 == 2 * direction(I, H) - 2 * direction(line_intersection(j, Line(E, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on H, line_intersection(j, Line(E, F)), F, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(H, line_intersection(j, Line(E, F))) - 2 * direction(F, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(j, Line(E, F)), E, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(C, line_intersection(j, Line(E, F))) - 2 * direction(E, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), H, line_intersection(j, Line(E, F)), F we get 180 == 2 * direction(line_intersection(j, Line(E, F)), H) - 2 * direction(line_intersection(j, Line(E, F)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), F, H, I we get 180 == 2 * direction(line_intersection(j, Line(E, F)), F) - 2 * direction(H, I) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(j, Line(E, F)), line_intersection(j, Line(E, F)), E we get 180 == 2 * direction(D, line_intersection(j, Line(E, F))) - 2 * direction(line_intersection(j, Line(E, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), D, line_intersection(j, Line(E, F)), E we get 180 == 2 * direction(line_intersection(j, Line(E, F)), D) - 2 * direction(line_intersection(j, Line(E, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on I, H, F, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(I, H) - 2 * direction(F, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on I, line_intersection(j, Line(E, F)), E, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(I, line_intersection(j, Line(E, F))) - 2 * direction(E, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(j, Line(E, F)), line_intersection(j, Line(E, F)), F we get 180 == 2 * direction(C, line_intersection(j, Line(E, F))) - 2 * direction(line_intersection(j, Line(E, F)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), E, line_intersection(j, Line(E, F)), D we get 180 == 2 * direction(line_intersection(j, Line(E, F)), E) - 2 * direction(line_intersection(j, Line(E, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), C, E, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(line_intersection(j, Line(E, F)), C) - 2 * direction(E, line_intersection(j, Line(E, F))) mod 360
By circumcenter_perpendicular_bisectors on A, F, E we get circumcenter(A, E, F) in perpendicular_bisector(A, F), circumcenter(A, E, F) in perpendicular_bisector(E, F), circumcenter(A, E, F) in perpendicular_bisector(A, E)
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, Line(E, F)), line_intersection(j, Line(E, F)), C we get 180 == 2 * direction(E, line_intersection(j, Line(E, F))) - 2 * direction(line_intersection(j, Line(E, F)), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), E, line_intersection(j, Line(E, F)), C we get 180 == 2 * direction(line_intersection(j, Line(E, F)), E) - 2 * direction(line_intersection(j, Line(E, F)), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), F, line_intersection(j, Line(E, F)), D we get 180 == 2 * direction(line_intersection(j, Line(E, F)), F) - 2 * direction(line_intersection(j, Line(E, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(j, Line(E, F)), C, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(F, line_intersection(j, Line(E, F))) - 2 * direction(C, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, Line(E, F)), H, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(E, line_intersection(j, Line(E, F))) - 2 * direction(H, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), E, line_intersection(j, Line(E, F)), I we get 180 == 2 * direction(line_intersection(j, Line(E, F)), E) - 2 * direction(line_intersection(j, Line(E, F)), I) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(j, Line(E, F)), D, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(F, line_intersection(j, Line(E, F))) - 2 * direction(D, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, Line(E, F)), C, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(E, line_intersection(j, Line(E, F))) - 2 * direction(C, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on H, I, F, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(H, I) - 2 * direction(F, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on I, line_intersection(j, Line(E, F)), F, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(I, line_intersection(j, Line(E, F))) - 2 * direction(F, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(j, Line(E, F)), line_intersection(j, Line(E, F)), I we get 180 == 2 * direction(F, line_intersection(j, Line(E, F))) - 2 * direction(line_intersection(j, Line(E, F)), I) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), F, H, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(line_intersection(j, Line(E, F)), F) - 2 * direction(H, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), F, line_intersection(j, Line(E, F)), C we get 180 == 2 * direction(line_intersection(j, Line(E, F)), F) - 2 * direction(line_intersection(j, Line(E, F)), C) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(j, Line(E, F)), H, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(F, line_intersection(j, Line(E, F))) - 2 * direction(H, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, Line(E, F)), line_intersection(j, Line(E, F)), D we get 180 == 2 * direction(E, line_intersection(j, Line(E, F))) - 2 * direction(line_intersection(j, Line(E, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), C, F, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(line_intersection(j, Line(E, F)), C) - 2 * direction(F, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), E, C, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(line_intersection(j, Line(E, F)), E) - 2 * direction(C, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), F, I, H we get 180 == 2 * direction(line_intersection(j, Line(E, F)), F) - 2 * direction(I, H) mod 360
By perpendicular_direction_conditions_v0_r on I, H, E, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(I, H) - 2 * direction(E, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), E, line_intersection(j, Line(E, F)), H we get 180 == 2 * direction(line_intersection(j, Line(E, F)), E) - 2 * direction(line_intersection(j, Line(E, F)), H) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), I, line_intersection(j, Line(E, F)), E we get 180 == 2 * direction(line_intersection(j, Line(E, F)), I) - 2 * direction(line_intersection(j, Line(E, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on H, line_intersection(j, Line(E, F)), line_intersection(j, Line(E, F)), E we get 180 == 2 * direction(H, line_intersection(j, Line(E, F))) - 2 * direction(line_intersection(j, Line(E, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), F, D, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(line_intersection(j, Line(E, F)), F) - 2 * direction(D, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on I, line_intersection(j, Line(E, F)), line_intersection(j, Line(E, F)), E we get 180 == 2 * direction(I, line_intersection(j, Line(E, F))) - 2 * direction(line_intersection(j, Line(E, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(j, Line(E, F)), line_intersection(j, Line(E, F)), E we get 180 == 2 * direction(C, line_intersection(j, Line(E, F))) - 2 * direction(line_intersection(j, Line(E, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, Line(E, F)), D, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(E, line_intersection(j, Line(E, F))) - 2 * direction(D, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(j, Line(E, F)), line_intersection(j, Line(E, F)), C we get 180 == 2 * direction(F, line_intersection(j, Line(E, F))) - 2 * direction(line_intersection(j, Line(E, F)), C) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, Line(E, F)), H, I we get 180 == 2 * direction(E, line_intersection(j, Line(E, F))) - 2 * direction(H, I) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), E, I, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(line_intersection(j, Line(E, F)), E) - 2 * direction(I, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on H, line_intersection(j, Line(E, F)), line_intersection(j, Line(E, F)), F we get 180 == 2 * direction(H, line_intersection(j, Line(E, F))) - 2 * direction(line_intersection(j, Line(E, F)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), H, F, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(line_intersection(j, Line(E, F)), H) - 2 * direction(F, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), I, F, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(line_intersection(j, Line(E, F)), I) - 2 * direction(F, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on H, line_intersection(j, Line(E, F)), E, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(H, line_intersection(j, Line(E, F))) - 2 * direction(E, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(j, Line(E, F)), F, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(D, line_intersection(j, Line(E, F))) - 2 * direction(F, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), E, H, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(line_intersection(j, Line(E, F)), E) - 2 * direction(H, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), I, E, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(line_intersection(j, Line(E, F)), I) - 2 * direction(E, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on C, line_intersection(j, Line(E, F)), F, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(C, line_intersection(j, Line(E, F))) - 2 * direction(F, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), E, H, I we get 180 == 2 * direction(line_intersection(j, Line(E, F)), E) - 2 * direction(H, I) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, Line(E, F)), I, H we get 180 == 2 * direction(E, line_intersection(j, Line(E, F))) - 2 * direction(I, H) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), F, line_intersection(j, Line(E, F)), H we get 180 == 2 * direction(line_intersection(j, Line(E, F)), F) - 2 * direction(line_intersection(j, Line(E, F)), H) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, Line(E, F)), line_intersection(j, Line(E, F)), H we get 180 == 2 * direction(E, line_intersection(j, Line(E, F))) - 2 * direction(line_intersection(j, Line(E, F)), H) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), D, F, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(line_intersection(j, Line(E, F)), D) - 2 * direction(F, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on I, line_intersection(j, Line(E, F)), line_intersection(j, Line(E, F)), F we get 180 == 2 * direction(I, line_intersection(j, Line(E, F))) - 2 * direction(line_intersection(j, Line(E, F)), F) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(j, Line(E, F)), I, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(F, line_intersection(j, Line(E, F))) - 2 * direction(I, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), E, D, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(line_intersection(j, Line(E, F)), E) - 2 * direction(D, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(j, Line(E, F)), line_intersection(j, Line(E, F)), I we get 180 == 2 * direction(E, line_intersection(j, Line(E, F))) - 2 * direction(line_intersection(j, Line(E, F)), I) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), E, I, H we get 180 == 2 * direction(line_intersection(j, Line(E, F)), E) - 2 * direction(I, H) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), H, line_intersection(j, Line(E, F)), E we get 180 == 2 * direction(line_intersection(j, Line(E, F)), H) - 2 * direction(line_intersection(j, Line(E, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(j, Line(E, F)), H, I we get 180 == 2 * direction(F, line_intersection(j, Line(E, F))) - 2 * direction(H, I) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(j, Line(E, F)), line_intersection(j, Line(E, F)), D we get 180 == 2 * direction(F, line_intersection(j, Line(E, F))) - 2 * direction(line_intersection(j, Line(E, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), C, line_intersection(j, Line(E, F)), F we get 180 == 2 * direction(line_intersection(j, Line(E, F)), C) - 2 * direction(line_intersection(j, Line(E, F)), F) mod 360
By perpendicular_direction_conditions_v0_r on I, H, line_intersection(j, Line(E, F)), F we get 180 == 2 * direction(I, H) - 2 * direction(line_intersection(j, Line(E, F)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), D, line_intersection(j, Line(E, F)), F we get 180 == 2 * direction(line_intersection(j, Line(E, F)), D) - 2 * direction(line_intersection(j, Line(E, F)), F) mod 360
By perpendicular_direction_conditions_v0_r on H, I, E, line_intersection(j, Line(E, F)) we get 180 == 2 * direction(H, I) - 2 * direction(E, line_intersection(j, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(j, Line(E, F)), I, H we get 180 == 2 * direction(F, line_intersection(j, Line(E, F))) - 2 * direction(I, H) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, Line(E, F)), I, line_intersection(j, Line(E, F)), F we get 180 == 2 * direction(line_intersection(j, Line(E, F)), I) - 2 * direction(line_intersection(j, Line(E, F)), F) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(j, Line(E, F)), line_intersection(j, Line(E, F)), H we get 180 == 2 * direction(F, line_intersection(j, Line(E, F))) - 2 * direction(line_intersection(j, Line(E, F)), H) mod 360
By collinear_definition on E, midpoint(E, F), F we get midpoint(E, F) in Line(E, F), F in Line(E, midpoint(E, F)), Line(E, F) == Line(E, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), E, F) mod 360
By internal_angle_bisector_definition_v0 on F, I, E, H we get angle(F, H, I) == angle(I, H, E) mod 360
By internal_angle_bisector_definition_v0 on I, line_intersection(j, Line(E, F)), I, D we get angle(I, D, line_intersection(j, Line(E, F))) == angle(line_intersection(j, Line(E, F)), D, I) mod 360
By isosceles_triangle_midpoint on H, F, E we get midpoint(E, F) in median(H, E, F)
By collinear_definition on C, line_intersection(j, Line(E, F)), D we get line_intersection(j, Line(E, F)) in Line(C, D), D in Line(C, line_intersection(j, Line(E, F))), Line(C, D) == Line(C, line_intersection(j, Line(E, F))), 0 == 2 * angle(line_intersection(j, Line(E, F)), C, D) mod 360
By collinear_definition on D, C, line_intersection(j, Line(E, F)) we get C in Line(D, line_intersection(j, Line(E, F))), line_intersection(j, Line(E, F)) in Line(C, D), Line(C, D) == Line(D, line_intersection(j, Line(E, F))), 0 == 2 * angle(C, D, line_intersection(j, Line(E, F))) mod 360
By internal_angle_bisector_definition_v0 on C, H, C, I we get angle(C, I, H) == angle(H, I, C) mod 360
By similar_triangle_basic_properties on A, I, D, B, E, D we get angle(A, I, D) == angle(B, E, D) mod 360, angle(E, D, B) == angle(I, D, A) mod 360, angle(D, A, I) == angle(D, B, E) mod 360, log(distance(A, I)) + log(distance(D, E)) == log(distance(B, E)) + log(distance(D, I)), log(distance(D, E)) + log(distance(A, D)) == log(distance(D, I)) + log(distance(B, D)), log(distance(A, D)) + log(distance(B, E)) == log(distance(B, D)) + log(distance(A, I))
By external_angle_bisector_definition_v0 on orthocenter(A, C, D), H, orthocenter(A, C, D), I we get 180 == angle(orthocenter(A, C, D), I, H) + angle(orthocenter(A, C, D), I, H) mod 360
By internal_angle_bisector_definition_v0_r on center(Circle(C, D, E)), D, center(Circle(C, D, E)), C we get Line(C, D) == internal_angle_bisector(center(Circle(C, D, E)), C, center(Circle(C, D, E)))
By internal_angle_bisector_definition_v0 on F, line_intersection(j, Line(E, F)), B, C we get angle(F, C, line_intersection(j, Line(E, F))) == angle(line_intersection(j, Line(E, F)), C, B) mod 360
By similar_triangle_basic_properties on B, D, E, A, D, I we get angle(A, D, I) == angle(B, D, E) mod 360, angle(D, E, B) == angle(D, I, A) mod 360, angle(E, B, D) == angle(I, A, D) mod 360, log(distance(A, D)) + log(distance(D, E)) == log(distance(B, D)) + log(distance(D, I)), log(distance(D, E)) + log(distance(A, I)) == log(distance(D, I)) + log(distance(B, E)), log(distance(A, I)) + log(distance(B, D)) == log(distance(B, E)) + log(distance(A, D))
By log_of_2_times_distance on E, F, midpoint(E, F), F we get log(distance(E, F)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(F, midpoint(E, F)))
By internal_angle_bisector_definition_v0 on B, line_intersection(j, Line(E, F)), F, C we get angle(B, C, line_intersection(j, Line(E, F))) == angle(line_intersection(j, Line(E, F)), C, F) mod 360
By internal_angle_bisector_definition_v0 on A, line_intersection(j, Line(E, F)), E, C we get angle(A, C, line_intersection(j, Line(E, F))) == angle(line_intersection(j, Line(E, F)), C, E) mod 360
By internal_angle_bisector_definition_v0 on D, line_intersection(j, Line(E, F)), D, C we get angle(D, C, line_intersection(j, Line(E, F))) == angle(line_intersection(j, Line(E, F)), C, D) mod 360
By internal_angle_bisector_definition_v0 on E, line_intersection(j, Line(E, F)), F, D we get angle(E, D, line_intersection(j, Line(E, F))) == angle(line_intersection(j, Line(E, F)), D, F) mod 360
By isosceles_triangle_midpoint on I, E, F we get midpoint(E, F) in median(I, E, F)
By collinear_definition on E, F, midpoint(E, F) we get F in Line(E, midpoint(E, F)), midpoint(E, F) in Line(E, F), Line(E, F) == Line(E, midpoint(E, F)), 0 == 2 * angle(F, E, midpoint(E, F)) mod 360
By internal_angle_bisector_definition_v0 on D, H, D, I we get angle(D, I, H) == angle(H, I, D) mod 360
By internal_angle_bisector_definition_v0_r on D, H, I, C we get Line(C, H) == internal_angle_bisector(D, C, I)
By internal_angle_bisector_definition_v0_r on H, D, I, C we get Line(C, D) == internal_angle_bisector(H, C, I)
By internal_angle_bisector_definition_v0_r on H, D, H, C we get Line(C, D) == internal_angle_bisector(H, C, H)
By internal_angle_bisector_definition_v0_r on D, I, H, C we get Line(C, I) == internal_angle_bisector(D, C, H)
By collinear_definition on F, midpoint(E, F), E we get midpoint(E, F) in Line(E, F), E in Line(F, midpoint(E, F)), Line(E, F) == Line(F, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), F, E) mod 360
By collinear_definition on H, I, C we get I in Line(C, H), C in Line(H, I), Line(C, H) == Line(H, I), 0 == 2 * angle(I, H, C) mod 360
By collinear_definition on I, line_intersection(j, Line(E, F)), C we get line_intersection(j, Line(E, F)) in Line(C, I), C in Line(I, line_intersection(j, Line(E, F))), Line(C, I) == Line(I, line_intersection(j, Line(E, F))), 0 == 2 * angle(line_intersection(j, Line(E, F)), I, C) mod 360
By perpendicular_angle_conditions_v0 on H, I, A we get angle(H, I, A) == orientation(A, H, I) mod 360
By perpendicular_angle_conditions_v0 on A, I, line_intersection(j, Line(E, F)) we get angle(A, I, line_intersection(j, Line(E, F))) == orientation(A, I, line_intersection(j, Line(E, F))) mod 360
By collinear_definition on C, I, line_intersection(j, Line(E, F)) we get I in Line(C, line_intersection(j, Line(E, F))), line_intersection(j, Line(E, F)) in Line(C, I), Line(C, I) == Line(C, line_intersection(j, Line(E, F))), 0 == 2 * angle(I, C, line_intersection(j, Line(E, F))) mod 360
By internal_angle_bisector_definition_v0 on B, line_intersection(j, Line(E, F)), G, C we get angle(B, C, line_intersection(j, Line(E, F))) == angle(line_intersection(j, Line(E, F)), C, G) mod 360
By log_of_2_times_distance on E, F, E, midpoint(E, F) we get log(distance(E, F)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(E, midpoint(E, F)))
By collinear_definition on H, C, line_intersection(j, Line(E, F)) we get C in Line(H, line_intersection(j, Line(E, F))), line_intersection(j, Line(E, F)) in Line(C, H), Line(C, H) == Line(H, line_intersection(j, Line(E, F))), 0 == 2 * angle(C, H, line_intersection(j, Line(E, F))) mod 360
By internal_angle_bisector_definition_v0 on F, line_intersection(j, Line(E, F)), E, H we get angle(F, H, line_intersection(j, Line(E, F))) == angle(line_intersection(j, Line(E, F)), H, E) mod 360
By collinear_definition on F, line_intersection(j, Line(E, F)), E we get line_intersection(j, Line(E, F)) in Line(E, F), E in Line(F, line_intersection(j, Line(E, F))), Line(E, F) == Line(F, line_intersection(j, Line(E, F))), 0 == 2 * angle(line_intersection(j, Line(E, F)), F, E) mod 360
By collinear_definition on C, D, line_intersection(j, Line(E, F)) we get D in Line(C, line_intersection(j, Line(E, F))), line_intersection(j, Line(E, F)) in Line(C, D), Line(C, D) == Line(C, line_intersection(j, Line(E, F))), 0 == 2 * angle(D, C, line_intersection(j, Line(E, F))) mod 360
By internal_angle_bisector_definition_v0 on E, line_intersection(j, Line(E, F)), F, H we get angle(E, H, line_intersection(j, Line(E, F))) == angle(line_intersection(j, Line(E, F)), H, F) mod 360
By collinear_definition on F, E, midpoint(E, F) we get E in Line(F, midpoint(E, F)), midpoint(E, F) in Line(E, F), Line(E, F) == Line(F, midpoint(E, F)), 0 == 2 * angle(E, F, midpoint(E, F)) mod 360
By collinear_definition on H, I, D we get I in Line(D, H), D in Line(H, I), Line(D, H) == Line(H, I), 0 == 2 * angle(I, H, D) mod 360
By collinear_definition on I, H, C we get H in Line(C, I), C in Line(H, I), Line(C, I) == Line(H, I), 0 == 2 * angle(H, I, C) mod 360
By collinear_definition on D, I, line_intersection(j, Line(E, F)) we get I in Line(D, line_intersection(j, Line(E, F))), line_intersection(j, Line(E, F)) in Line(D, I), Line(D, I) == Line(D, line_intersection(j, Line(E, F))), 0 == 2 * angle(I, D, line_intersection(j, Line(E, F))) mod 360
By internal_angle_bisector_definition_v0 on F, line_intersection(j, Line(E, F)), E, I we get angle(F, I, line_intersection(j, Line(E, F))) == angle(line_intersection(j, Line(E, F)), I, E) mod 360
By collinear_definition on H, C, I we get C in Line(H, I), I in Line(C, H), Line(C, H) == Line(H, I), 0 == 2 * angle(C, H, I) mod 360
By collinear_definition on I, D, H we get D in Line(H, I), H in Line(D, I), Line(D, I) == Line(H, I), 0 == 2 * angle(D, I, H) mod 360
By internal_angle_bisector_definition_v0 on E, I, F, H we get angle(E, H, I) == angle(I, H, F) mod 360
By altitude_definition on center(Circle(A, D, F)), F, A, Line(G, H) we get Line(G, H) == altitude(center(Circle(A, D, F)), A, F)
By collinear_definition on C, line_intersection(j, Line(E, F)), I we get line_intersection(j, Line(E, F)) in Line(C, I), I in Line(C, line_intersection(j, Line(E, F))), Line(C, I) == Line(C, line_intersection(j, Line(E, F))), 0 == 2 * angle(line_intersection(j, Line(E, F)), C, I) mod 360
By internal_angle_bisector_definition_v0 on B, line_intersection(j, Line(E, F)), A, C we get angle(B, C, line_intersection(j, Line(E, F))) == angle(line_intersection(j, Line(E, F)), C, A) mod 360
By internal_angle_bisector_definition_v0 on E, line_intersection(j, Line(E, F)), A, C we get angle(E, C, line_intersection(j, Line(E, F))) == angle(line_intersection(j, Line(E, F)), C, A) mod 360
By internal_angle_bisector_definition_v0 on E, line_intersection(j, Line(E, F)), F, I we get angle(E, I, line_intersection(j, Line(E, F))) == angle(line_intersection(j, Line(E, F)), I, F) mod 360
By collinear_definition on C, line_intersection(j, Line(E, F)), H we get line_intersection(j, Line(E, F)) in Line(C, H), H in Line(C, line_intersection(j, Line(E, F))), Line(C, H) == Line(C, line_intersection(j, Line(E, F))), 0 == 2 * angle(line_intersection(j, Line(E, F)), C, H) mod 360
By radical_axis_definition_v0_r on A, Circle(A, D, F), Circle(A, C, E) we get A in radical_axis(Circle(A, C, E), Circle(A, D, F))
By collinear_definition on F, E, line_intersection(j, Line(E, F)) we get E in Line(F, line_intersection(j, Line(E, F))), line_intersection(j, Line(E, F)) in Line(E, F), Line(E, F) == Line(F, line_intersection(j, Line(E, F))), 0 == 2 * angle(E, F, line_intersection(j, Line(E, F))) mod 360
By perpendicular_angle_conditions_v0 on line_intersection(j, Line(E, F)), I, orthocenter(A, C, D) we get angle(line_intersection(j, Line(E, F)), I, orthocenter(A, C, D)) == orientation(I, orthocenter(A, C, D), line_intersection(j, Line(E, F))) mod 360
By collinear_definition on I, line_intersection(j, Line(E, F)), D we get line_intersection(j, Line(E, F)) in Line(D, I), D in Line(I, line_intersection(j, Line(E, F))), Line(D, I) == Line(I, line_intersection(j, Line(E, F))), 0 == 2 * angle(line_intersection(j, Line(E, F)), I, D) mod 360
By collinear_definition on E, line_intersection(j, Line(E, F)), F we get line_intersection(j, Line(E, F)) in Line(E, F), F in Line(E, line_intersection(j, Line(E, F))), Line(E, F) == Line(E, line_intersection(j, Line(E, F))), 0 == 2 * angle(line_intersection(j, Line(E, F)), E, F) mod 360
By internal_angle_bisector_definition_v0 on D, line_intersection(j, Line(E, F)), D, I we get angle(D, I, line_intersection(j, Line(E, F))) == angle(line_intersection(j, Line(E, F)), I, D) mod 360
By altitude_definition on center(Circle(C, D, E)), E, F, j we get j == altitude(center(Circle(C, D, E)), E, F)
By collinear_definition on C, H, line_intersection(j, Line(E, F)) we get H in Line(C, line_intersection(j, Line(E, F))), line_intersection(j, Line(E, F)) in Line(C, H), Line(C, H) == Line(C, line_intersection(j, Line(E, F))), 0 == 2 * angle(H, C, line_intersection(j, Line(E, F))) mod 360
By external_angle_bisector_definition_v0 on A, H, A, I we get 180 == angle(A, I, H) + angle(A, I, H) mod 360
By perpendicular_angle_conditions_v0 on orthocenter(A, C, D), I, H we get angle(orthocenter(A, C, D), I, H) == orientation(H, orthocenter(A, C, D), I) mod 360
By internal_angle_bisector_definition_v0 on C, line_intersection(j, Line(E, F)), C, I we get angle(C, I, line_intersection(j, Line(E, F))) == angle(line_intersection(j, Line(E, F)), I, C) mod 360
By collinear_definition on H, line_intersection(j, Line(E, F)), C we get line_intersection(j, Line(E, F)) in Line(C, H), C in Line(H, line_intersection(j, Line(E, F))), Line(C, H) == Line(H, line_intersection(j, Line(E, F))), 0 == 2 * angle(line_intersection(j, Line(E, F)), H, C) mod 360
By isosceles_triangle_midpoint on center(Circle(C, D, E)), F, E we get midpoint(E, F) in median(center(Circle(C, D, E)), E, F)
By collinear_definition on I, H, D we get H in Line(D, I), D in Line(H, I), Line(D, I) == Line(H, I), 0 == 2 * angle(H, I, D) mod 360
By collinear_definition on E, F, line_intersection(j, Line(E, F)) we get F in Line(E, line_intersection(j, Line(E, F))), line_intersection(j, Line(E, F)) in Line(E, F), Line(E, F) == Line(E, line_intersection(j, Line(E, F))), 0 == 2 * angle(F, E, line_intersection(j, Line(E, F))) mod 360
By internal_angle_bisector_definition_v0_r on H, I, H, C we get Line(C, I) == internal_angle_bisector(H, C, H)
By collinear_definition on H, D, I we get D in Line(H, I), I in Line(D, H), Line(D, H) == Line(H, I), 0 == 2 * angle(D, H, I) mod 360
By collinear_definition on I, D, line_intersection(j, Line(E, F)) we get D in Line(I, line_intersection(j, Line(E, F))), line_intersection(j, Line(E, F)) in Line(D, I), Line(D, I) == Line(I, line_intersection(j, Line(E, F))), 0 == 2 * angle(D, I, line_intersection(j, Line(E, F))) mod 360
By internal_angle_bisector_definition_v0 on E, H, F, I we get angle(E, I, H) == angle(H, I, F) mod 360
By perpendicular_angle_conditions_v0 on H, I, orthocenter(A, C, D) we get angle(H, I, orthocenter(A, C, D)) == orientation(H, I, orthocenter(A, C, D)) mod 360
By internal_angle_bisector_definition_v0 on F, H, E, I we get angle(F, I, H) == angle(H, I, E) mod 360
By internal_angle_bisector_definition_v0 on E, line_intersection(j, Line(E, F)), F, C we get angle(E, C, line_intersection(j, Line(E, F))) == angle(line_intersection(j, Line(E, F)), C, F) mod 360
By perpendicular_bisector_properties on E, F we get perpendicular(Line(E, F), perpendicular_bisector(E, F)), midpoint(E, F) == line_intersection(Line(E, F), perpendicular_bisector(E, F))
By collinear_definition on I, C, H we get C in Line(H, I), H in Line(C, I), Line(C, I) == Line(H, I), 0 == 2 * angle(C, I, H) mod 360
By internal_angle_bisector_definition_v0 on F, line_intersection(j, Line(E, F)), E, D we get angle(F, D, line_intersection(j, Line(E, F))) == angle(line_intersection(j, Line(E, F)), D, E) mod 360
By collinear_definition on I, C, line_intersection(j, Line(E, F)) we get C in Line(I, line_intersection(j, Line(E, F))), line_intersection(j, Line(E, F)) in Line(C, I), Line(C, I) == Line(I, line_intersection(j, Line(E, F))), 0 == 2 * angle(C, I, line_intersection(j, Line(E, F))) mod 360
By internal_angle_bisector_definition_v0 on G, line_intersection(j, Line(E, F)), E, C we get angle(G, C, line_intersection(j, Line(E, F))) == angle(line_intersection(j, Line(E, F)), C, E) mod 360
By collinear_definition on D, line_intersection(j, Line(E, F)), I we get line_intersection(j, Line(E, F)) in Line(D, I), I in Line(D, line_intersection(j, Line(E, F))), Line(D, I) == Line(D, line_intersection(j, Line(E, F))), 0 == 2 * angle(line_intersection(j, Line(E, F)), D, I) mod 360
By internal_angle_bisector_definition_v0 on C, line_intersection(j, Line(E, F)), C, D we get angle(C, D, line_intersection(j, Line(E, F))) == angle(line_intersection(j, Line(E, F)), D, C) mod 360
By internal_angle_bisector_definition_v0_r on center(Circle(C, D, E)), C, center(Circle(C, D, E)), D we get Line(C, D) == internal_angle_bisector(center(Circle(C, D, E)), D, center(Circle(C, D, E)))
By internal_angle_bisector_definition_v0 on I, line_intersection(j, Line(E, F)), I, C we get angle(I, C, line_intersection(j, Line(E, F))) == angle(line_intersection(j, Line(E, F)), C, I) mod 360
By internal_angle_bisector_definition_v0 on G, line_intersection(j, Line(E, F)), B, C we get angle(G, C, line_intersection(j, Line(E, F))) == angle(line_intersection(j, Line(E, F)), C, B) mod 360
By internal_angle_bisector_definition_v0 on F, line_intersection(j, Line(E, F)), E, C we get angle(F, C, line_intersection(j, Line(E, F))) == angle(line_intersection(j, Line(E, F)), C, E) mod 360
By internal_angle_bisector_definition_v0 on A, line_intersection(j, Line(E, F)), B, C we get angle(A, C, line_intersection(j, Line(E, F))) == angle(line_intersection(j, Line(E, F)), C, B) mod 360
By perpendicular_angle_conditions_v0 on line_intersection(j, Line(E, F)), I, A we get angle(line_intersection(j, Line(E, F)), I, A) == orientation(A, line_intersection(j, Line(E, F)), I) mod 360
By external_angle_bisector_definition_v0 on orthocenter(A, C, D), line_intersection(j, Line(E, F)), orthocenter(A, C, D), I we get 180 == angle(orthocenter(A, C, D), I, line_intersection(j, Line(E, F))) + angle(orthocenter(A, C, D), I, line_intersection(j, Line(E, F))) mod 360
By internal_angle_bisector_definition_v0 on E, line_intersection(j, Line(E, F)), G, C we get angle(E, C, line_intersection(j, Line(E, F))) == angle(line_intersection(j, Line(E, F)), C, G) mod 360
By perpendicular_angle_conditions_v0 on orthocenter(A, C, D), I, line_intersection(j, Line(E, F)) we get angle(orthocenter(A, C, D), I, line_intersection(j, Line(E, F))) == orientation(I, line_intersection(j, Line(E, F)), orthocenter(A, C, D)) mod 360
By external_angle_bisector_definition_v0 on A, line_intersection(j, Line(E, F)), A, I we get 180 == angle(A, I, line_intersection(j, Line(E, F))) + angle(A, I, line_intersection(j, Line(E, F))) mod 360
By perpendicular_angle_conditions_v0 on A, I, H we get angle(A, I, H) == orientation(A, I, H) mod 360
By collinear_definition on D, line_intersection(j, Line(E, F)), C we get line_intersection(j, Line(E, F)) in Line(C, D), C in Line(D, line_intersection(j, Line(E, F))), Line(C, D) == Line(D, line_intersection(j, Line(E, F))), 0 == 2 * angle(line_intersection(j, Line(E, F)), D, C) mod 360
By perpendicular_angle_conditions_v0 on E, line_intersection(j, Line(E, F)), H we get angle(E, line_intersection(j, Line(E, F)), H) == orientation(E, line_intersection(j, Line(E, F)), H) mod 360
By altitude_definition on center(Circle(C, D, E)), A, I, j we get j == altitude(center(Circle(C, D, E)), A, I)
By altitude_definition on E, C, center(Circle(C, D, E)), Line(E, F) we get Line(E, F) == altitude(E, C, center(Circle(C, D, E)))
By anti_similar_triangle_basic_properties on D, center(Circle(A, D, F)), I, I, center(Circle(A, D, F)), D we get angle(D, center(Circle(A, D, F)), I) == 0 - angle(I, center(Circle(A, D, F)), D) mod 360, angle(center(Circle(A, D, F)), I, D) == 0 - angle(center(Circle(A, D, F)), D, I) mod 360, angle(I, D, center(Circle(A, D, F))) == 0 - angle(D, I, center(Circle(A, D, F))) mod 360, log(distance(D, center(Circle(A, D, F)))) + log(distance(D, center(Circle(A, D, F)))) == log(distance(I, center(Circle(A, D, F)))) + log(distance(I, center(Circle(A, D, F)))), log(distance(D, center(Circle(A, D, F)))) + log(distance(D, I)) == log(distance(I, center(Circle(A, D, F)))) + log(distance(D, I)), log(distance(D, I)) + log(distance(D, center(Circle(A, D, F)))) == log(distance(D, I)) + log(distance(I, center(Circle(A, D, F))))
By altitude_definition on E, I, line_intersection(j, Line(E, F)), Line(E, F) we get Line(E, F) == altitude(E, I, line_intersection(j, Line(E, F)))
By altitude_definition on E, center(Circle(C, D, E)), D, Line(E, F) we get Line(E, F) == altitude(E, D, center(Circle(C, D, E)))
By perpendicular_angle_conditions_v0 on I, line_intersection(j, Line(E, F)), E we get angle(I, line_intersection(j, Line(E, F)), E) == orientation(E, I, line_intersection(j, Line(E, F))) mod 360
By anti_similar_triangle_basic_properties on center(Circle(A, D, F)), A, I, center(Circle(A, D, F)), I, A we get angle(center(Circle(A, D, F)), A, I) == 0 - angle(center(Circle(A, D, F)), I, A) mod 360, angle(A, I, center(Circle(A, D, F))) == 0 - angle(I, A, center(Circle(A, D, F))) mod 360, angle(I, center(Circle(A, D, F)), A) == 0 - angle(A, center(Circle(A, D, F)), I) mod 360, log(distance(A, center(Circle(A, D, F)))) + log(distance(A, I)) == log(distance(I, center(Circle(A, D, F)))) + log(distance(A, I)), log(distance(A, I)) + log(distance(A, center(Circle(A, D, F)))) == log(distance(A, I)) + log(distance(I, center(Circle(A, D, F)))), log(distance(A, center(Circle(A, D, F)))) + log(distance(A, center(Circle(A, D, F)))) == log(distance(I, center(Circle(A, D, F)))) + log(distance(I, center(Circle(A, D, F))))
By altitude_definition on orthocenter(A, C, D), line_intersection(j, Line(E, F)), C, Line(A, I) we get Line(A, I) == altitude(orthocenter(A, C, D), C, line_intersection(j, Line(E, F)))
By altitude_definition on F, line_intersection(j, Line(E, F)), I, Line(E, F) we get Line(E, F) == altitude(F, I, line_intersection(j, Line(E, F)))
By anti_similar_triangle_basic_properties on I, F, center(Circle(A, D, F)), F, I, center(Circle(A, D, F)) we get angle(I, F, center(Circle(A, D, F))) == 0 - angle(F, I, center(Circle(A, D, F))) mod 360, angle(F, center(Circle(A, D, F)), I) == 0 - angle(I, center(Circle(A, D, F)), F) mod 360, angle(center(Circle(A, D, F)), I, F) == 0 - angle(center(Circle(A, D, F)), F, I) mod 360, log(distance(F, I)) + log(distance(F, center(Circle(A, D, F)))) == log(distance(F, I)) + log(distance(I, center(Circle(A, D, F)))), log(distance(F, center(Circle(A, D, F)))) + log(distance(F, center(Circle(A, D, F)))) == log(distance(I, center(Circle(A, D, F)))) + log(distance(I, center(Circle(A, D, F)))), log(distance(F, center(Circle(A, D, F)))) + log(distance(F, I)) == log(distance(I, center(Circle(A, D, F)))) + log(distance(F, I))
By altitude_definition on D, F, line_intersection(j, Line(E, F)), j we get j == altitude(D, F, line_intersection(j, Line(E, F)))
By similar_triangle_basic_properties on E, D, I, B, D, A we get angle(B, D, A) == angle(E, D, I) mod 360, angle(D, A, B) == angle(D, I, E) mod 360, angle(A, B, D) == angle(I, E, D) mod 360, log(distance(B, D)) + log(distance(D, I)) == log(distance(D, E)) + log(distance(A, D)), log(distance(A, D)) + log(distance(E, I)) == log(distance(D, I)) + log(distance(A, B)), log(distance(A, B)) + log(distance(D, E)) == log(distance(E, I)) + log(distance(B, D))
By altitude_definition on orthocenter(A, C, D), I, line_intersection(j, Line(E, F)), Line(A, I) we get Line(A, I) == altitude(orthocenter(A, C, D), I, line_intersection(j, Line(E, F)))
By altitude_definition on center(Circle(A, D, F)), G, F, Line(G, H) we get Line(G, H) == altitude(center(Circle(A, D, F)), F, G)
By altitude_definition on D, E, line_intersection(j, Line(E, F)), j we get j == altitude(D, E, line_intersection(j, Line(E, F)))
By anti_similar_triangle_basic_properties on D, F, I, D, B, A we get angle(D, F, I) == 0 - angle(D, B, A) mod 360, angle(F, I, D) == 0 - angle(B, A, D) mod 360, angle(I, D, F) == 0 - angle(A, D, B) mod 360, log(distance(B, D)) + log(distance(F, I)) == log(distance(D, F)) + log(distance(A, B)), log(distance(A, B)) + log(distance(D, I)) == log(distance(F, I)) + log(distance(A, D)), log(distance(A, D)) + log(distance(D, F)) == log(distance(D, I)) + log(distance(B, D))
By altitude_definition on F, C, center(Circle(C, D, E)), Line(E, F) we get Line(E, F) == altitude(F, C, center(Circle(C, D, E)))
By anti_similar_triangle_basic_properties on F, D, I, B, D, A we get angle(F, D, I) == 0 - angle(B, D, A) mod 360, angle(D, I, F) == 0 - angle(D, A, B) mod 360, angle(I, F, D) == 0 - angle(A, B, D) mod 360, log(distance(B, D)) + log(distance(D, I)) == log(distance(D, F)) + log(distance(A, D)), log(distance(A, D)) + log(distance(F, I)) == log(distance(D, I)) + log(distance(A, B)), log(distance(A, B)) + log(distance(D, F)) == log(distance(F, I)) + log(distance(B, D))
By altitude_definition on F, H, D, Line(E, F) we get Line(E, F) == altitude(F, D, H)
By anti_similar_triangle_basic_properties on center(Circle(A, D, F)), F, D, center(Circle(A, D, F)), D, F we get angle(center(Circle(A, D, F)), F, D) == 0 - angle(center(Circle(A, D, F)), D, F) mod 360, angle(F, D, center(Circle(A, D, F))) == 0 - angle(D, F, center(Circle(A, D, F))) mod 360, angle(D, center(Circle(A, D, F)), F) == 0 - angle(F, center(Circle(A, D, F)), D) mod 360, log(distance(D, center(Circle(A, D, F)))) + log(distance(D, F)) == log(distance(F, center(Circle(A, D, F)))) + log(distance(D, F)), log(distance(D, F)) + log(distance(D, center(Circle(A, D, F)))) == log(distance(D, F)) + log(distance(F, center(Circle(A, D, F)))), log(distance(D, center(Circle(A, D, F)))) + log(distance(D, center(Circle(A, D, F)))) == log(distance(F, center(Circle(A, D, F)))) + log(distance(F, center(Circle(A, D, F))))
By collinear_definition on line_intersection(j, Line(E, F)), I, D we get I in Line(D, line_intersection(j, Line(E, F))), D in Line(I, line_intersection(j, Line(E, F))), Line(D, line_intersection(j, Line(E, F))) == Line(I, line_intersection(j, Line(E, F))), 0 == 2 * angle(I, line_intersection(j, Line(E, F)), D) mod 360
By altitude_definition on orthocenter(A, C, D), D, line_intersection(j, Line(E, F)), Line(A, I) we get Line(A, I) == altitude(orthocenter(A, C, D), D, line_intersection(j, Line(E, F)))
By altitude_definition on center(Circle(A, D, F)), C, A, Line(G, H) we get Line(G, H) == altitude(center(Circle(A, D, F)), A, C)
By altitude_definition on center(Circle(C, D, E)), line_intersection(j, Line(E, F)), E, j we get j == altitude(center(Circle(C, D, E)), E, line_intersection(j, Line(E, F)))
By altitude_definition on orthocenter(A, C, D), D, H, Line(A, I) we get Line(A, I) == altitude(orthocenter(A, C, D), D, H)
By altitude_definition on E, line_intersection(j, Line(E, F)), C, Line(E, F) we get Line(E, F) == altitude(E, C, line_intersection(j, Line(E, F)))
By perpendicular_angle_conditions_v0 on E, line_intersection(j, Line(E, F)), C we get angle(E, line_intersection(j, Line(E, F)), C) == orientation(C, E, line_intersection(j, Line(E, F))) mod 360
By altitude_definition on A, line_intersection(j, Line(E, F)), I, Line(A, I) we get Line(A, I) == altitude(A, I, line_intersection(j, Line(E, F)))
By altitude_definition on F, I, H, Line(E, F) we get Line(E, F) == altitude(F, H, I)
By altitude_definition on A, center(Circle(C, D, E)), D, Line(A, I) we get Line(A, I) == altitude(A, D, center(Circle(C, D, E)))
By altitude_definition on A, C, line_intersection(j, Line(E, F)), Line(A, I) we get Line(A, I) == altitude(A, C, line_intersection(j, Line(E, F)))
By similar_triangle_basic_properties on A, D, B, I, D, E we get angle(A, D, B) == angle(I, D, E) mod 360, angle(D, B, A) == angle(D, E, I) mod 360, angle(B, A, D) == angle(E, I, D) mod 360, log(distance(A, D)) + log(distance(D, E)) == log(distance(D, I)) + log(distance(B, D)), log(distance(B, D)) + log(distance(E, I)) == log(distance(D, E)) + log(distance(A, B)), log(distance(A, B)) + log(distance(D, I)) == log(distance(E, I)) + log(distance(A, D))
By altitude_definition on orthocenter(A, C, D), center(Circle(C, D, E)), D, Line(A, I) we get Line(A, I) == altitude(orthocenter(A, C, D), D, center(Circle(C, D, E)))
By altitude_definition on E, D, line_intersection(j, Line(E, F)), Line(E, F) we get Line(E, F) == altitude(E, D, line_intersection(j, Line(E, F)))
By perpendicular_angle_conditions_v0 on E, line_intersection(j, Line(E, F)), I we get angle(E, line_intersection(j, Line(E, F)), I) == orientation(E, line_intersection(j, Line(E, F)), I) mod 360
By altitude_definition on F, H, line_intersection(j, Line(E, F)), Line(E, F) we get Line(E, F) == altitude(F, H, line_intersection(j, Line(E, F)))
By altitude_definition on center(Circle(A, D, F)), F, C, Line(G, H) we get Line(G, H) == altitude(center(Circle(A, D, F)), C, F)
By perpendicular_angle_conditions_v0 on I, line_intersection(j, Line(E, F)), F we get angle(I, line_intersection(j, Line(E, F)), F) == orientation(F, I, line_intersection(j, Line(E, F))) mod 360
By altitude_definition on I, F, line_intersection(j, Line(E, F)), j we get j == altitude(I, F, line_intersection(j, Line(E, F)))
By altitude_definition on A, I, H, Line(A, I) we get Line(A, I) == altitude(A, H, I)
By altitude_definition on F, line_intersection(j, Line(E, F)), C, Line(E, F) we get Line(E, F) == altitude(F, C, line_intersection(j, Line(E, F)))
By altitude_definition on A, line_intersection(j, Line(E, F)), D, Line(A, I) we get Line(A, I) == altitude(A, D, line_intersection(j, Line(E, F)))
By perpendicular_angle_conditions_v0 on D, line_intersection(j, Line(E, F)), F we get angle(D, line_intersection(j, Line(E, F)), F) == orientation(D, line_intersection(j, Line(E, F)), F) mod 360
By altitude_definition on H, E, line_intersection(j, Line(E, F)), j we get j == altitude(H, E, line_intersection(j, Line(E, F)))
By power_of_a_point_definition on D, C, H, Circle(A, C, E) we get log(distance(C, D)) + log(distance(D, H)) == log(power_of_a_point(D, Circle(A, C, E)))
By perpendicular_angle_conditions_v0 on H, line_intersection(j, Line(E, F)), E we get angle(H, line_intersection(j, Line(E, F)), E) == orientation(E, H, line_intersection(j, Line(E, F))) mod 360
By altitude_definition on I, E, line_intersection(j, Line(E, F)), j we get j == altitude(I, E, line_intersection(j, Line(E, F)))
By altitude_definition on E, I, H, Line(E, F) we get Line(E, F) == altitude(E, H, I)
By altitude_definition on center(Circle(A, D, F)), G, C, Line(G, H) we get Line(G, H) == altitude(center(Circle(A, D, F)), C, G)
By altitude_definition on A, H, line_intersection(j, Line(E, F)), Line(A, I) we get Line(A, I) == altitude(A, H, line_intersection(j, Line(E, F)))
By altitude_definition on midpoint(E, F), orthocenter(A, C, D), A, j we get j == altitude(midpoint(E, F), A, orthocenter(A, C, D))
By perpendicular_angle_conditions_v0 on F, line_intersection(j, Line(E, F)), I we get angle(F, line_intersection(j, Line(E, F)), I) == orientation(F, line_intersection(j, Line(E, F)), I) mod 360
By altitude_definition on midpoint(E, F), I, A, j we get j == altitude(midpoint(E, F), A, I)
By perpendicular_angle_conditions_v0 on C, line_intersection(j, Line(E, F)), E we get angle(C, line_intersection(j, Line(E, F)), E) == orientation(C, line_intersection(j, Line(E, F)), E) mod 360
By altitude_definition on orthocenter(A, C, D), C, center(Circle(C, D, E)), Line(A, I) we get Line(A, I) == altitude(orthocenter(A, C, D), C, center(Circle(C, D, E)))
By altitude_definition on orthocenter(A, C, D), H, I, Line(A, I) we get Line(A, I) == altitude(orthocenter(A, C, D), H, I)
By altitude_definition on orthocenter(A, C, D), H, line_intersection(j, Line(E, F)), Line(A, I) we get Line(A, I) == altitude(orthocenter(A, C, D), H, line_intersection(j, Line(E, F)))
By anti_similar_triangle_basic_properties on A, F, center(Circle(A, D, F)), F, A, center(Circle(A, D, F)) we get angle(A, F, center(Circle(A, D, F))) == 0 - angle(F, A, center(Circle(A, D, F))) mod 360, angle(F, center(Circle(A, D, F)), A) == 0 - angle(A, center(Circle(A, D, F)), F) mod 360, angle(center(Circle(A, D, F)), A, F) == 0 - angle(center(Circle(A, D, F)), F, A) mod 360, log(distance(A, F)) + log(distance(A, center(Circle(A, D, F)))) == log(distance(A, F)) + log(distance(F, center(Circle(A, D, F)))), log(distance(A, center(Circle(A, D, F)))) + log(distance(A, center(Circle(A, D, F)))) == log(distance(F, center(Circle(A, D, F)))) + log(distance(F, center(Circle(A, D, F)))), log(distance(A, center(Circle(A, D, F)))) + log(distance(A, F)) == log(distance(F, center(Circle(A, D, F)))) + log(distance(A, F))
By collinear_definition on line_intersection(j, Line(E, F)), I, C we get I in Line(C, line_intersection(j, Line(E, F))), C in Line(I, line_intersection(j, Line(E, F))), Line(C, line_intersection(j, Line(E, F))) == Line(I, line_intersection(j, Line(E, F))), 0 == 2 * angle(I, line_intersection(j, Line(E, F)), C) mod 360
By altitude_definition on center(Circle(A, D, F)), A, G, Line(G, H) we get Line(G, H) == altitude(center(Circle(A, D, F)), A, G)
By altitude_definition on center(Circle(C, D, E)), line_intersection(j, Line(E, F)), F, j we get j == altitude(center(Circle(C, D, E)), F, line_intersection(j, Line(E, F)))
By altitude_definition on center(Circle(C, D, E)), A, orthocenter(A, C, D), j we get j == altitude(center(Circle(C, D, E)), A, orthocenter(A, C, D))
By altitude_definition on C, line_intersection(j, Line(E, F)), F, j we get j == altitude(C, F, line_intersection(j, Line(E, F)))
By altitude_definition on A, H, D, Line(A, I) we get Line(A, I) == altitude(A, D, H)
By perpendicular_angle_conditions_v0 on F, line_intersection(j, Line(E, F)), C we get angle(F, line_intersection(j, Line(E, F)), C) == orientation(C, F, line_intersection(j, Line(E, F))) mod 360
By perpendicular_angle_conditions_v0 on F, line_intersection(j, Line(E, F)), D we get angle(F, line_intersection(j, Line(E, F)), D) == orientation(D, F, line_intersection(j, Line(E, F))) mod 360
By collinear_definition on line_intersection(j, Line(E, F)), C, D we get C in Line(D, line_intersection(j, Line(E, F))), D in Line(C, line_intersection(j, Line(E, F))), Line(C, line_intersection(j, Line(E, F))) == Line(D, line_intersection(j, Line(E, F))), 0 == 2 * angle(C, line_intersection(j, Line(E, F)), D) mod 360
By collinear_definition on midpoint(E, F), F, E we get F in Line(E, midpoint(E, F)), E in Line(F, midpoint(E, F)), Line(E, midpoint(E, F)) == Line(F, midpoint(E, F)), 0 == 2 * angle(F, midpoint(E, F), E) mod 360
By altitude_definition on H, F, line_intersection(j, Line(E, F)), j we get j == altitude(H, F, line_intersection(j, Line(E, F)))
By perpendicular_angle_conditions_v0 on D, line_intersection(j, Line(E, F)), E we get angle(D, line_intersection(j, Line(E, F)), E) == orientation(D, line_intersection(j, Line(E, F)), E) mod 360
By collinear_definition on line_intersection(j, Line(E, F)), D, I we get D in Line(I, line_intersection(j, Line(E, F))), I in Line(D, line_intersection(j, Line(E, F))), Line(D, line_intersection(j, Line(E, F))) == Line(I, line_intersection(j, Line(E, F))), 0 == 2 * angle(D, line_intersection(j, Line(E, F)), I) mod 360
By altitude_definition on F, D, line_intersection(j, Line(E, F)), Line(E, F) we get Line(E, F) == altitude(F, D, line_intersection(j, Line(E, F)))
By perpendicular_angle_conditions_v0 on E, line_intersection(j, Line(E, F)), D we get angle(E, line_intersection(j, Line(E, F)), D) == orientation(D, E, line_intersection(j, Line(E, F))) mod 360
By altitude_definition on A, C, center(Circle(C, D, E)), Line(A, I) we get Line(A, I) == altitude(A, C, center(Circle(C, D, E)))
By perpendicular_angle_conditions_v0 on F, line_intersection(j, Line(E, F)), H we get angle(F, line_intersection(j, Line(E, F)), H) == orientation(F, line_intersection(j, Line(E, F)), H) mod 360
By collinear_definition on line_intersection(j, Line(E, F)), F, E we get F in Line(E, line_intersection(j, Line(E, F))), E in Line(F, line_intersection(j, Line(E, F))), Line(E, line_intersection(j, Line(E, F))) == Line(F, line_intersection(j, Line(E, F))), 0 == 2 * angle(F, line_intersection(j, Line(E, F)), E) mod 360
By altitude_definition on C, line_intersection(j, Line(E, F)), E, j we get j == altitude(C, E, line_intersection(j, Line(E, F)))
By collinear_definition on line_intersection(j, Line(E, F)), E, F we get E in Line(F, line_intersection(j, Line(E, F))), F in Line(E, line_intersection(j, Line(E, F))), Line(E, line_intersection(j, Line(E, F))) == Line(F, line_intersection(j, Line(E, F))), 0 == 2 * angle(E, line_intersection(j, Line(E, F)), F) mod 360
By perpendicular_angle_conditions_v0 on H, line_intersection(j, Line(E, F)), F we get angle(H, line_intersection(j, Line(E, F)), F) == orientation(F, H, line_intersection(j, Line(E, F))) mod 360
By altitude_definition on F, center(Circle(C, D, E)), D, Line(E, F) we get Line(E, F) == altitude(F, D, center(Circle(C, D, E)))
By altitude_definition on center(Circle(C, D, E)), orthocenter(A, C, D), I, j we get j == altitude(center(Circle(C, D, E)), I, orthocenter(A, C, D))
By altitude_definition on E, line_intersection(j, Line(E, F)), H, Line(E, F) we get Line(E, F) == altitude(E, H, line_intersection(j, Line(E, F)))
By collinear_definition on line_intersection(j, Line(E, F)), D, C we get D in Line(C, line_intersection(j, Line(E, F))), C in Line(D, line_intersection(j, Line(E, F))), Line(C, line_intersection(j, Line(E, F))) == Line(D, line_intersection(j, Line(E, F))), 0 == 2 * angle(D, line_intersection(j, Line(E, F)), C) mod 360
By altitude_definition on E, D, H, Line(E, F) we get Line(E, F) == altitude(E, D, H)
By altitude_definition on midpoint(E, F), orthocenter(A, C, D), I, j we get j == altitude(midpoint(E, F), I, orthocenter(A, C, D))
By collinear_definition on midpoint(E, F), E, F we get E in Line(F, midpoint(E, F)), F in Line(E, midpoint(E, F)), Line(E, midpoint(E, F)) == Line(F, midpoint(E, F)), 0 == 2 * angle(E, midpoint(E, F), F) mod 360
By perpendicular_angle_conditions_v0 on C, line_intersection(j, Line(E, F)), F we get angle(C, line_intersection(j, Line(E, F)), F) == orientation(C, line_intersection(j, Line(E, F)), F) mod 360
By collinear_definition on line_intersection(j, Line(E, F)), C, H we get C in Line(H, line_intersection(j, Line(E, F))), H in Line(C, line_intersection(j, Line(E, F))), Line(C, line_intersection(j, Line(E, F))) == Line(H, line_intersection(j, Line(E, F))), 0 == 2 * angle(C, line_intersection(j, Line(E, F)), H) mod 360
By collinear_definition on line_intersection(j, Line(E, F)), H, C we get H in Line(C, line_intersection(j, Line(E, F))), C in Line(H, line_intersection(j, Line(E, F))), Line(C, line_intersection(j, Line(E, F))) == Line(H, line_intersection(j, Line(E, F))), 0 == 2 * angle(H, line_intersection(j, Line(E, F)), C) mod 360
By collinear_definition on line_intersection(j, Line(E, F)), C, I we get C in Line(I, line_intersection(j, Line(E, F))), I in Line(C, line_intersection(j, Line(E, F))), Line(C, line_intersection(j, Line(E, F))) == Line(I, line_intersection(j, Line(E, F))), 0 == 2 * angle(C, line_intersection(j, Line(E, F)), I) mod 360
By power_of_a_point_definition on H, C, D, Circle(C, D, E) we get log(distance(C, H)) + log(distance(D, H)) == log(power_of_a_point(H, Circle(C, D, E)))
By power_of_a_point_definition on line_intersection(j, Line(E, F)), F, E, Circle(C, D, E) we get log(power_of_a_point(line_intersection(j, Line(E, F)), Circle(C, D, E))) == log(distance(F, line_intersection(j, Line(E, F)))) + log(distance(E, line_intersection(j, Line(E, F))))
By power_of_a_point_definition on line_intersection(j, Line(E, F)), E, F, c we get log(power_of_a_point(line_intersection(j, Line(E, F)), c)) == log(distance(E, line_intersection(j, Line(E, F)))) + log(distance(F, line_intersection(j, Line(E, F))))
By power_of_a_point_definition on line_intersection(j, Line(E, F)), D, C, Circle(C, D, E) we get log(power_of_a_point(line_intersection(j, Line(E, F)), Circle(C, D, E))) == log(distance(D, line_intersection(j, Line(E, F)))) + log(distance(C, line_intersection(j, Line(E, F))))
By power_of_a_point_definition on I, C, H, Circle(A, C, E) we get log(distance(C, I)) + log(distance(H, I)) == log(power_of_a_point(I, Circle(A, C, E)))
By power_of_a_point_definition on H, I, D, Circle(A, D, F) we get log(distance(H, I)) + log(distance(D, H)) == log(power_of_a_point(H, Circle(A, D, F)))
By power_of_a_point_definition on line_intersection(j, Line(E, F)), I, D, Circle(A, D, F) we get log(power_of_a_point(line_intersection(j, Line(E, F)), Circle(A, D, F))) == log(distance(I, line_intersection(j, Line(E, F)))) + log(distance(D, line_intersection(j, Line(E, F))))
By power_of_a_point_definition on line_intersection(j, Line(E, F)), H, C, Circle(A, C, E) we get log(power_of_a_point(line_intersection(j, Line(E, F)), Circle(A, C, E))) == log(distance(H, line_intersection(j, Line(E, F)))) + log(distance(C, line_intersection(j, Line(E, F))))
By power_of_a_point_definition on center(Circle(A, D, F)), D, A, Circle(A, D, F) we get log(power_of_a_point(center(Circle(A, D, F)), Circle(A, D, F))) == log(distance(D, center(Circle(A, D, F)))) + log(distance(A, center(Circle(A, D, F))))
By power_of_a_point_definition on midpoint(E, F), E, F, Circle(C, D, E) we get log(power_of_a_point(midpoint(E, F), Circle(C, D, E))) == log(distance(E, midpoint(E, F))) + log(distance(F, midpoint(E, F)))
By power_of_a_point_definition on midpoint(E, F), F, E, c we get log(power_of_a_point(midpoint(E, F), c)) == log(distance(F, midpoint(E, F))) + log(distance(E, midpoint(E, F)))
By between_implies_angles on F, midpoint(E, F), E we get 180 == angle(F, midpoint(E, F), E) mod 360, 0 == angle(midpoint(E, F), E, F) mod 360, 0 == angle(E, F, midpoint(E, F)) mod 360
By between_implies_angles on E, midpoint(E, F), F we get 180 == angle(E, midpoint(E, F), F) mod 360, 0 == angle(midpoint(E, F), F, E) mod 360, 0 == angle(F, E, midpoint(E, F)) mod 360
By concyclic_sufficient_conditions_v0 on G, H, I, A we get concyclic(A, G, H, I)
By line_definition on orthocenter(D, E, I), E, Line(E, F) we get Line(E, F) == Line(E, orthocenter(D, E, I))
By concurrent_sufficient_conditions on Line(I, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))), Line(G, H) we get concurrent(Line(G, H), Line(F, center(Circle(A, D, F))), Line(I, center(Circle(A, D, F))))
By line_definition on H, orthocenter(A, C, H), Line(G, H) we get Line(G, H) == Line(H, orthocenter(A, C, H))
By line_definition on F, orthocenter(D, E, I), Line(E, F) we get Line(E, F) == Line(F, orthocenter(D, E, I))
By line_definition on orthocenter(C, F, H), center(Circle(A, D, F)), Line(G, H) we get Line(G, H) == Line(orthocenter(C, F, H), center(Circle(A, D, F)))
By line_definition on projection(C, h), center(Circle(A, D, F)), h we get h == Line(projection(C, h), center(Circle(A, D, F)))
By radical_axis_is_perpendicular_to_center_line on Line(A, E), c, Circle(A, C, E) we get perpendicular(Line(A, E), Line(center(c), center(Circle(A, C, E))))
By line_definition on I, orthocenter(A, C, H), Line(A, I) we get Line(A, I) == Line(I, orthocenter(A, C, H))
By line_definition on orthocenter(A, C, H), C, altitude(C, A, H) we get altitude(C, A, H) == Line(C, orthocenter(A, C, H))
By line_definition on midpoint(E, F), orthocenter(C, F, H), Line(E, F) we get Line(E, F) == Line(midpoint(E, F), orthocenter(C, F, H))
By concurrent_sufficient_conditions on Line(I, center(Circle(A, D, F))), h, Line(G, H) we get concurrent(h, Line(G, H), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, H), h, Line(I, center(Circle(A, D, F))) we get concurrent(h, Line(G, H), Line(I, center(Circle(A, D, F))))
By line_definition on C, orthocenter(C, F, H), altitude(C, F, H) we get altitude(C, F, H) == Line(C, orthocenter(C, F, H))
By line_definition on orthocenter(C, F, H), F, Line(E, F) we get Line(E, F) == Line(F, orthocenter(C, F, H))
By line_definition on midpoint(A, E), H, perpendicular_bisector(A, E) we get perpendicular_bisector(A, E) == Line(H, midpoint(A, E))
By line_definition on orthocenter(C, F, H), E, Line(E, F) we get Line(E, F) == Line(E, orthocenter(C, F, H))
By line_definition on A, orthocenter(A, C, H), Line(A, I) we get Line(A, I) == Line(A, orthocenter(A, C, H))
By concurrent_sufficient_conditions on h, Line(G, H), Line(F, center(Circle(A, D, F))) we get concurrent(h, Line(G, H), Line(F, center(Circle(A, D, F))))
By line_definition on orthocenter(D, E, I), I, altitude(I, D, E) we get altitude(I, D, E) == Line(I, orthocenter(D, E, I))
By line_definition on orthocenter(C, F, H), orthocenter(D, E, I), Line(E, F) we get Line(E, F) == Line(orthocenter(C, F, H), orthocenter(D, E, I))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(G, H), h we get concurrent(h, Line(G, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on h, Line(G, H), Line(I, center(Circle(A, D, F))) we get concurrent(h, Line(G, H), Line(I, center(Circle(A, D, F))))
By line_definition on midpoint(E, F), orthocenter(D, E, I), Line(E, F) we get Line(E, F) == Line(midpoint(E, F), orthocenter(D, E, I))
By line_definition on orthocenter(A, C, H), orthocenter(C, F, H), Line(G, H) we get Line(G, H) == Line(orthocenter(A, C, H), orthocenter(C, F, H))
By line_definition on line_intersection(i, Line(E, I)), orthocenter(D, E, I), i we get i == Line(orthocenter(D, E, I), line_intersection(i, Line(E, I)))
By line_definition on orthocenter(A, C, H), center(Circle(A, D, F)), Line(G, H) we get Line(G, H) == Line(orthocenter(A, C, H), center(Circle(A, D, F)))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(I, center(Circle(A, D, F))), Line(G, H) we get concurrent(Line(G, H), Line(F, center(Circle(A, D, F))), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on h, Line(I, center(Circle(A, D, F))), Line(G, H) we get concurrent(h, Line(G, H), Line(I, center(Circle(A, D, F))))
By line_definition on orthocenter(A, C, H), G, Line(G, H) we get Line(G, H) == Line(G, orthocenter(A, C, H))
By line_definition on G, orthocenter(C, F, H), Line(G, H) we get Line(G, H) == Line(G, orthocenter(C, F, H))
By concurrent_sufficient_conditions on Line(G, H), Line(F, center(Circle(A, D, F))), h we get concurrent(h, Line(G, H), Line(F, center(Circle(A, D, F))))
By line_definition on orthocenter(D, E, I), B, i we get i == Line(B, orthocenter(D, E, I))
By concurrent_sufficient_conditions on Line(G, H), Line(F, center(Circle(A, D, F))), Line(I, center(Circle(A, D, F))) we get concurrent(Line(G, H), Line(F, center(Circle(A, D, F))), Line(I, center(Circle(A, D, F))))
By line_definition on D, orthocenter(D, E, I), i we get i == Line(D, orthocenter(D, E, I))
By line_definition on orthocenter(C, F, H), H, Line(G, H) we get Line(G, H) == Line(H, orthocenter(C, F, H))
By concurrent_sufficient_conditions on Line(G, H), Line(I, center(Circle(A, D, F))), Line(F, center(Circle(A, D, F))) we get concurrent(Line(G, H), Line(F, center(Circle(A, D, F))), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on h, Line(F, center(Circle(A, D, F))), Line(G, H) we get concurrent(h, Line(G, H), Line(F, center(Circle(A, D, F))))
By line_definition on orthocenter(A, C, H), orthocenter(A, C, D), Line(A, I) we get Line(A, I) == Line(orthocenter(A, C, D), orthocenter(A, C, H))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), Line(G, H), Line(I, center(Circle(A, D, F))) we get concurrent(Line(G, H), Line(F, center(Circle(A, D, F))), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, D, F))), h, Line(G, H) we get concurrent(h, Line(G, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(I, center(Circle(A, D, F))), Line(G, H), Line(F, center(Circle(A, D, F))) we get concurrent(Line(G, H), Line(F, center(Circle(A, D, F))), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(I, center(Circle(A, D, F))), Line(G, H), h we get concurrent(h, Line(G, H), Line(I, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, H), h, Line(F, center(Circle(A, D, F))) we get concurrent(h, Line(G, H), Line(F, center(Circle(A, D, F))))
By concurrent_sufficient_conditions on Line(G, H), Line(I, center(Circle(A, D, F))), h we get concurrent(h, Line(G, H), Line(I, center(Circle(A, D, F))))
By median_definition on orthocenter(C, F, H), A, F, Line(G, H) we get Line(G, H) == median(orthocenter(C, F, H), A, F)
By line_intersection_definition on A, radical_axis(Circle(A, C, E), Circle(A, D, F)), g we get A == line_intersection(g, radical_axis(Circle(A, C, E), Circle(A, D, F)))
By line_intersection_definition on E, Line(E, center(Circle(A, C, E))), f we get E == line_intersection(f, Line(E, center(Circle(A, C, E))))
By line_intersection_definition on C, altitude(C, F, H), f we get C == line_intersection(f, altitude(C, F, H))
By line_intersection_definition on H, Line(F, H), Line(H, center(Circle(A, C, E))) we get H == line_intersection(Line(F, H), Line(H, center(Circle(A, C, E))))
By line_intersection_definition on H, perpendicular_bisector(A, E), Line(G, H) we get H == line_intersection(Line(G, H), perpendicular_bisector(A, E))
By line_intersection_definition on orthocenter(D, E, I), altitude(I, D, E), Line(E, F) we get orthocenter(D, E, I) == line_intersection(Line(E, F), altitude(I, D, E))
By midpoint_definition_v0 on D, A, center(Circle(A, D, F)) we get midpoint(A, D) == center(Circle(A, D, F))
By line_intersection_definition on A, g, Line(A, center(Circle(A, C, E))) we get A == line_intersection(g, Line(A, center(Circle(A, C, E))))
By line_intersection_definition on E, Line(D, E), Line(E, center(Circle(A, C, E))) we get E == line_intersection(Line(D, E), Line(E, center(Circle(A, C, E))))
By line_intersection_definition on orthocenter(C, F, H), Line(E, F), altitude(C, F, H) we get orthocenter(C, F, H) == line_intersection(Line(E, F), altitude(C, F, H))
By line_intersection_definition on C, Line(C, center(Circle(A, C, E))), altitude(C, A, H) we get C == line_intersection(altitude(C, A, H), Line(C, center(Circle(A, C, E))))
By line_intersection_definition on C, altitude(C, A, D), Line(C, center(Circle(A, C, E))) we get C == line_intersection(altitude(C, A, D), Line(C, center(Circle(A, C, E))))
By line_intersection_definition on A, radical_axis(Circle(A, C, E), Circle(A, D, F)), Line(A, B) we get A == line_intersection(Line(A, B), radical_axis(Circle(A, C, E), Circle(A, D, F)))
By line_intersection_definition on A, Line(A, I), Line(A, center(Circle(A, C, E))) we get A == line_intersection(Line(A, I), Line(A, center(Circle(A, C, E))))
By line_intersection_definition on I, Line(I, center(Circle(A, D, F))), altitude(I, D, E) we get I == line_intersection(altitude(I, D, E), Line(I, center(Circle(A, D, F))))
By line_intersection_definition on orthocenter(A, C, H), Line(G, H), altitude(C, A, H) we get orthocenter(A, C, H) == line_intersection(Line(G, H), altitude(C, A, H))
By line_intersection_definition on A, radical_axis(Circle(A, C, E), Circle(A, D, F)), Line(A, H) we get A == line_intersection(Line(A, H), radical_axis(Circle(A, C, E), Circle(A, D, F)))
By perpendicular_line_definition on H, perpendicular_bisector(A, E), Line(A, E) we get perpendicular_bisector(A, E) == perpendicular_line(H, Line(A, E))
By line_intersection_definition on A, radical_axis(Circle(A, C, E), Circle(A, D, F)), Line(A, E) we get A == line_intersection(Line(A, E), radical_axis(Circle(A, C, E), Circle(A, D, F)))
By line_intersection_definition on H, perpendicular_bisector(A, E), Line(F, H) we get H == line_intersection(Line(F, H), perpendicular_bisector(A, E))
By line_intersection_definition on E, Line(E, center(Circle(A, C, E))), Line(E, H) we get E == line_intersection(Line(E, H), Line(E, center(Circle(A, C, E))))
By line_intersection_definition on H, perpendicular_bisector(A, E), Line(E, H) we get H == line_intersection(Line(E, H), perpendicular_bisector(A, E))
By perpendicular_line_definition on orthocenter(D, E, I), Line(E, F), j we get Line(E, F) == perpendicular_line(orthocenter(D, E, I), j)
By line_intersection_definition on E, Line(E, midpoint(C, D)), Line(E, center(Circle(A, C, E))) we get E == line_intersection(Line(E, midpoint(C, D)), Line(E, center(Circle(A, C, E))))
By line_intersection_definition on E, Line(E, I), Line(E, center(Circle(A, C, E))) we get E == line_intersection(Line(E, I), Line(E, center(Circle(A, C, E))))
By line_intersection_definition on A, Line(A, center(Circle(A, C, E))), radical_axis(Circle(A, C, E), Circle(A, D, F)) we get A == line_intersection(radical_axis(Circle(A, C, E), Circle(A, D, F)), Line(A, center(Circle(A, C, E))))
By line_intersection_definition on center(Circle(A, C, E)), Line(C, center(Circle(A, C, E))), Line(H, center(Circle(A, C, E))) we get center(Circle(A, C, E)) == line_intersection(Line(C, center(Circle(A, C, E))), Line(H, center(Circle(A, C, E))))
By median_definition on orthocenter(A, C, H), F, A, Line(G, H) we get Line(G, H) == median(orthocenter(A, C, H), A, F)
By line_intersection_definition on E, Line(E, F), Line(E, center(Circle(A, C, E))) we get E == line_intersection(Line(E, F), Line(E, center(Circle(A, C, E))))
By perpendicular_line_definition on A, Line(A, H), altitude(C, A, H) we get Line(A, H) == perpendicular_line(A, altitude(C, A, H))
By line_intersection_definition on I, Line(E, I), altitude(I, D, E) we get I == line_intersection(Line(E, I), altitude(I, D, E))
By line_intersection_definition on I, Line(F, I), altitude(I, D, E) we get I == line_intersection(Line(F, I), altitude(I, D, E))
By line_intersection_definition on C, altitude(C, A, H), altitude(C, A, D) we get C == line_intersection(altitude(C, A, D), altitude(C, A, H))
By perpendicular_line_definition on F, Line(F, H), altitude(C, F, H) we get Line(F, H) == perpendicular_line(F, altitude(C, F, H))
By line_intersection_definition on C, f, Line(C, center(Circle(A, C, E))) we get C == line_intersection(f, Line(C, center(Circle(A, C, E))))
By line_intersection_definition on H, perpendicular_bisector(A, E), j we get H == line_intersection(j, perpendicular_bisector(A, E))
By median_definition on E, C, D, Line(E, midpoint(C, D)) we get median(E, C, D) == Line(E, midpoint(C, D))
By line_intersection_definition on A, Line(A, I), radical_axis(Circle(A, C, E), Circle(A, D, F)) we get A == line_intersection(Line(A, I), radical_axis(Circle(A, C, E), Circle(A, D, F)))
By perpendicular_line_definition on orthocenter(D, E, I), altitude(I, D, E), Line(D, E) we get altitude(I, D, E) == perpendicular_line(orthocenter(D, E, I), Line(D, E))
By line_intersection_definition on C, altitude(C, A, H), altitude(C, F, H) we get C == line_intersection(altitude(C, A, H), altitude(C, F, H))
By perpendicular_line_definition on orthocenter(D, E, I), i, Line(E, I) we get i == perpendicular_line(orthocenter(D, E, I), Line(E, I))
By line_intersection_definition on A, Line(A, center(Circle(A, C, E))), Line(A, B) we get A == line_intersection(Line(A, B), Line(A, center(Circle(A, C, E))))
By line_intersection_definition on C, j, altitude(C, F, H) we get C == line_intersection(j, altitude(C, F, H))
By line_intersection_definition on H, Line(A, H), Line(H, center(Circle(A, C, E))) we get H == line_intersection(Line(A, H), Line(H, center(Circle(A, C, E))))
By line_intersection_definition on A, h, Line(A, center(Circle(A, C, E))) we get A == line_intersection(h, Line(A, center(Circle(A, C, E))))
By line_intersection_definition on A, radical_axis(Circle(A, C, E), Circle(A, D, F)), h we get A == line_intersection(h, radical_axis(Circle(A, C, E), Circle(A, D, F)))
By line_intersection_definition on center(Circle(A, C, E)), Line(A, center(Circle(A, C, E))), Line(C, center(Circle(A, C, E))) we get center(Circle(A, C, E)) == line_intersection(Line(A, center(Circle(A, C, E))), Line(C, center(Circle(A, C, E))))
By line_intersection_definition on orthocenter(A, C, H), altitude(C, A, H), Line(A, I) we get orthocenter(A, C, H) == line_intersection(Line(A, I), altitude(C, A, H))
By perpendicular_line_definition on orthocenter(C, F, H), Line(G, H), g we get Line(G, H) == perpendicular_line(orthocenter(C, F, H), g)
By line_intersection_definition on I, Line(A, I), altitude(I, D, E) we get I == line_intersection(Line(A, I), altitude(I, D, E))
By line_intersection_definition on orthocenter(C, F, H), Line(G, H), Line(E, F) we get orthocenter(C, F, H) == line_intersection(Line(E, F), Line(G, H))
By line_intersection_definition on E, Line(A, E), Line(E, center(Circle(A, C, E))) we get E == line_intersection(Line(A, E), Line(E, center(Circle(A, C, E))))
By line_intersection_definition on orthocenter(C, F, H), Line(G, H), altitude(C, F, H) we get orthocenter(C, F, H) == line_intersection(Line(G, H), altitude(C, F, H))
By line_intersection_definition on C, g, altitude(C, F, H) we get C == line_intersection(g, altitude(C, F, H))
By line_intersection_definition on A, Line(A, H), Line(A, center(Circle(A, C, E))) we get A == line_intersection(Line(A, H), Line(A, center(Circle(A, C, E))))
By perpendicular_line_definition on orthocenter(A, C, H), altitude(C, A, H), Line(A, H) we get altitude(C, A, H) == perpendicular_line(orthocenter(A, C, H), Line(A, H))
By line_intersection_definition on center(Circle(A, C, E)), Line(C, center(Circle(A, C, E))), Line(E, center(Circle(A, C, E))) we get center(Circle(A, C, E)) == line_intersection(Line(C, center(Circle(A, C, E))), Line(E, center(Circle(A, C, E))))
By line_intersection_definition on center(Circle(A, C, E)), Line(H, center(Circle(A, C, E))), Line(E, center(Circle(A, C, E))) we get center(Circle(A, C, E)) == line_intersection(Line(E, center(Circle(A, C, E))), Line(H, center(Circle(A, C, E))))
By line_intersection_definition on orthocenter(D, E, I), i, altitude(I, D, E) we get orthocenter(D, E, I) == line_intersection(i, altitude(I, D, E))
By line_intersection_definition on H, Line(A, H), perpendicular_bisector(A, E) we get H == line_intersection(Line(A, H), perpendicular_bisector(A, E))
By line_intersection_definition on C, altitude(C, A, H), f we get C == line_intersection(f, altitude(C, A, H))
By line_intersection_definition on C, altitude(C, F, H), altitude(C, A, D) we get C == line_intersection(altitude(C, A, D), altitude(C, F, H))
By median_definition on F, C, D, Line(F, midpoint(C, D)) we get median(F, C, D) == Line(F, midpoint(C, D))
By line_intersection_definition on C, altitude(C, A, H), j we get C == line_intersection(j, altitude(C, A, H))
By line_intersection_definition on center(Circle(A, C, E)), Line(H, center(Circle(A, C, E))), Line(A, center(Circle(A, C, E))) we get center(Circle(A, C, E)) == line_intersection(Line(A, center(Circle(A, C, E))), Line(H, center(Circle(A, C, E))))
By line_intersection_definition on center(Circle(A, C, E)), Line(E, center(Circle(A, C, E))), Line(A, center(Circle(A, C, E))) we get center(Circle(A, C, E)) == line_intersection(Line(A, center(Circle(A, C, E))), Line(E, center(Circle(A, C, E))))
By perpendicular_line_definition on orthocenter(A, C, H), Line(A, I), j we get Line(A, I) == perpendicular_line(orthocenter(A, C, H), j)
By perpendicular_line_definition on D, Line(D, E), altitude(I, D, E) we get Line(D, E) == perpendicular_line(D, altitude(I, D, E))
By line_intersection_definition on C, Line(C, center(Circle(A, C, E))), g we get C == line_intersection(g, Line(C, center(Circle(A, C, E))))
By line_intersection_definition on orthocenter(A, C, H), Line(A, I), Line(G, H) we get orthocenter(A, C, H) == line_intersection(Line(A, I), Line(G, H))
By line_intersection_definition on H, Line(H, center(Circle(A, C, E))), Line(E, H) we get H == line_intersection(Line(E, H), Line(H, center(Circle(A, C, E))))
By perpendicular_line_definition on H, Line(F, H), altitude(C, F, H) we get Line(F, H) == perpendicular_line(H, altitude(C, F, H))
By line_intersection_definition on I, altitude(I, D, E), j we get I == line_intersection(j, altitude(I, D, E))
By line_intersection_definition on H, j, Line(H, center(Circle(A, C, E))) we get H == line_intersection(j, Line(H, center(Circle(A, C, E))))
By line_intersection_definition on C, Line(C, center(Circle(A, C, E))), j we get C == line_intersection(j, Line(C, center(Circle(A, C, E))))
By perpendicular_line_definition on center(Circle(A, D, F)), h, altitude(C, A, D) we get h == perpendicular_line(center(Circle(A, D, F)), altitude(C, A, D))
By perpendicular_line_definition on H, Line(A, H), altitude(C, A, H) we get Line(A, H) == perpendicular_line(H, altitude(C, A, H))
By line_intersection_definition on orthocenter(D, E, I), Line(E, F), i we get orthocenter(D, E, I) == line_intersection(i, Line(E, F))
By perpendicular_line_definition on orthocenter(C, F, H), altitude(C, F, H), Line(F, H) we get altitude(C, F, H) == perpendicular_line(orthocenter(C, F, H), Line(F, H))
By perpendicular_line_definition on E, Line(D, E), altitude(I, D, E) we get Line(D, E) == perpendicular_line(E, altitude(I, D, E))
By median_definition on H, A, E, perpendicular_bisector(A, E) we get median(H, A, E) == perpendicular_bisector(A, E)
By line_intersection_definition on C, altitude(C, F, H), Line(C, center(Circle(A, C, E))) we get C == line_intersection(altitude(C, F, H), Line(C, center(Circle(A, C, E))))
By perpendicular_line_definition on orthocenter(A, C, H), Line(G, H), g we get Line(G, H) == perpendicular_line(orthocenter(A, C, H), g)
By line_intersection_definition on C, altitude(C, A, H), g we get C == line_intersection(g, altitude(C, A, H))
By perpendicular_line_definition on E, Line(A, E), perpendicular_bisector(A, E) we get Line(A, E) == perpendicular_line(E, perpendicular_bisector(A, E))
By perpendicular_line_definition on A, Line(A, E), perpendicular_bisector(A, E) we get Line(A, E) == perpendicular_line(A, perpendicular_bisector(A, E))
By line_intersection_definition on A, Line(A, E), Line(A, center(Circle(A, C, E))) we get A == line_intersection(Line(A, E), Line(A, center(Circle(A, C, E))))
By perpendicular_line_definition on orthocenter(C, F, H), Line(E, F), j we get Line(E, F) == perpendicular_line(orthocenter(C, F, H), j)
By line_intersection_definition on H, Line(G, H), Line(H, center(Circle(A, C, E))) we get H == line_intersection(Line(G, H), Line(H, center(Circle(A, C, E))))
By projection_definition on B, line_intersection(i, Line(E, I)), Line(E, I) we get projection(B, Line(E, I)) == line_intersection(i, Line(E, I))
By projection_definition on D, line_intersection(i, Line(E, I)), Line(E, I) we get projection(D, Line(E, I)) == line_intersection(i, Line(E, I))
By projection_definition on midpoint(C, D), midpoint(E, F), Line(E, F) we get midpoint(E, F) == projection(midpoint(C, D), Line(E, F))
By projection_definition on I, line_intersection(i, Line(E, I)), i we get projection(I, i) == line_intersection(i, Line(E, I))
By projection_definition on midpoint(C, D), I, Line(A, I) we get I == projection(midpoint(C, D), Line(A, I))
By projection_definition on E, line_intersection(i, Line(E, I)), i we get projection(E, i) == line_intersection(i, Line(E, I))
By projection_definition on center(Circle(A, D, F)), G, g we get G == projection(center(Circle(A, D, F)), g)
By between_imply_not_between on H, D, C we get collinear_and_not_between(C, H, D)
By between_imply_not_between on D, I, H we get collinear_and_not_between(H, D, I)
By between_imply_not_between on H, I, C we get collinear_and_not_between(C, H, I)
By between_imply_not_between on H, I, D we get collinear_and_not_between(D, H, I)
By between_imply_not_between on C, I, H we get collinear_and_not_between(H, C, I)
By between_imply_not_between on C, D, H we get collinear_and_not_between(D, C, H)
By between_imply_not_between on A, midpoint(A, E), E we get collinear_and_not_between(E, A, midpoint(A, E))
By between_imply_not_between on E, midpoint(A, E), A we get collinear_and_not_between(A, E, midpoint(A, E))
By between_imply_not_between on D, midpoint(C, D), C we get collinear_and_not_between(C, D, midpoint(C, D))
By between_imply_not_between on C, midpoint(C, D), D we get collinear_and_not_between(D, C, midpoint(C, D))
By parallel_line_definition on orthocenter(A, C, H), Line(G, H), Line(D, F) we get Line(G, H) == parallel_line(orthocenter(A, C, H), Line(D, F))
By parallel_line_definition on orthocenter(A, C, H), Line(A, I), Line(E, F) we get Line(A, I) == parallel_line(orthocenter(A, C, H), Line(E, F))
By parallel_line_definition on orthocenter(C, F, H), Line(E, F), Line(A, I) we get Line(E, F) == parallel_line(orthocenter(C, F, H), Line(A, I))
By parallel_line_definition on orthocenter(C, F, H), Line(G, H), Line(D, F) we get Line(G, H) == parallel_line(orthocenter(C, F, H), Line(D, F))
By parallel_line_definition on orthocenter(D, E, I), Line(E, F), Line(A, I) we get Line(E, F) == parallel_line(orthocenter(D, E, I), Line(A, I))
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), I, orthocenter(A, C, D) we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(I, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(C, D), F, midpoint(E, F) we get 180 == 2 * direction(I, midpoint(C, D)) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), midpoint(E, F), E we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on F, G, H, center(Circle(A, D, F)) we get 180 == 2 * direction(F, G) - 2 * direction(H, center(Circle(A, D, F))) mod 360
By perpendicular_direction_conditions_v0_r on F, G, center(Circle(A, D, F)), H we get 180 == 2 * direction(F, G) - 2 * direction(center(Circle(A, D, F)), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), A, orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, H, midpoint(C, D) we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, H, midpoint(C, D) we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), orthocenter(A, C, D), I we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(orthocenter(A, C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on C, F, center(Circle(A, D, F)), G we get 180 == 2 * direction(C, F) - 2 * direction(center(Circle(A, D, F)), G) mod 360
By perpendicular_direction_conditions_v0_r on D, B, I, line_intersection(i, Line(E, I)) we get 180 == 2 * direction(D, B) - 2 * direction(I, line_intersection(i, Line(E, I))) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(A, D, F)), G, C, G we get 180 == 2 * direction(center(Circle(A, D, F)), G) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, E, F we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), I, midpoint(C, D), I we get 180 == 2 * direction(orthocenter(A, C, D), I) - 2 * direction(midpoint(C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on H, center(Circle(A, D, F)), C, G we get 180 == 2 * direction(H, center(Circle(A, D, F))) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on F, A, center(Circle(A, D, F)), G we get 180 == 2 * direction(F, A) - 2 * direction(center(Circle(A, D, F)), G) mod 360
By perpendicular_direction_conditions_v0_r on G, center(Circle(A, D, F)), F, G we get 180 == 2 * direction(G, center(Circle(A, D, F))) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on G, C, center(Circle(A, D, F)), G we get 180 == 2 * direction(G, C) - 2 * direction(center(Circle(A, D, F)), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, E, midpoint(E, F) we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(E, I)), D, I, E we get 180 == 2 * direction(line_intersection(i, Line(E, I)), D) - 2 * direction(I, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), F, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), H, midpoint(C, D) we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, I, D, line_intersection(i, Line(E, I)) we get 180 == 2 * direction(E, I) - 2 * direction(D, line_intersection(i, Line(E, I))) mod 360
By perpendicular_direction_conditions_v0_r on I, line_intersection(i, Line(E, I)), D, B we get 180 == 2 * direction(I, line_intersection(i, Line(E, I))) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on G, center(Circle(A, D, F)), A, G we get 180 == 2 * direction(G, center(Circle(A, D, F))) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on G, F, H, center(Circle(A, D, F)) we get 180 == 2 * direction(G, F) - 2 * direction(H, center(Circle(A, D, F))) mod 360
By perpendicular_direction_conditions_v0_r on G, C, center(Circle(A, D, F)), H we get 180 == 2 * direction(G, C) - 2 * direction(center(Circle(A, D, F)), H) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), A, I we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), I, midpoint(C, D) we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(I, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), E, midpoint(E, F) we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, F, I, midpoint(C, D) we get 180 == 2 * direction(E, F) - 2 * direction(I, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), midpoint(C, D), I we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(midpoint(C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on I, line_intersection(i, Line(E, I)), B, D we get 180 == 2 * direction(I, line_intersection(i, Line(E, I))) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on F, A, H, center(Circle(A, D, F)) we get 180 == 2 * direction(F, A) - 2 * direction(H, center(Circle(A, D, F))) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), A, orthocenter(A, C, D) we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on F, C, center(Circle(A, D, F)), H we get 180 == 2 * direction(F, C) - 2 * direction(center(Circle(A, D, F)), H) mod 360
By perpendicular_direction_conditions_v0_r on A, G, H, center(Circle(A, D, F)) we get 180 == 2 * direction(A, G) - 2 * direction(H, center(Circle(A, D, F))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, I, orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(I, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), E, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), E, F we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on I, orthocenter(A, C, D), midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(I, orthocenter(A, C, D)) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(A, D, F)), H, A, G we get 180 == 2 * direction(center(Circle(A, D, F)), H) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on D, B, E, line_intersection(i, Line(E, I)) we get 180 == 2 * direction(D, B) - 2 * direction(E, line_intersection(i, Line(E, I))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), I, A we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on I, A, H, midpoint(C, D) we get 180 == 2 * direction(I, A) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on F, E, midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By sss_anti_similarity_v0 on H, F, I, H, E, I we get anti_similar_triangles(E, H, I, F, H, I)
By perpendicular_direction_conditions_v0_r on midpoint(C, D), I, orthocenter(A, C, D), A we get 180 == 2 * direction(midpoint(C, D), I) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on D, B, line_intersection(i, Line(E, I)), E we get 180 == 2 * direction(D, B) - 2 * direction(line_intersection(i, Line(E, I)), E) mod 360
By perpendicular_direction_conditions_v0_r on D, B, line_intersection(i, Line(E, I)), I we get 180 == 2 * direction(D, B) - 2 * direction(line_intersection(i, Line(E, I)), I) mod 360
By perpendicular_direction_conditions_v0_r on F, G, G, center(Circle(A, D, F)) we get 180 == 2 * direction(F, G) - 2 * direction(G, center(Circle(A, D, F))) mod 360
By perpendicular_direction_conditions_v0_r on E, F, midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on I, orthocenter(A, C, D), midpoint(C, D), H we get 180 == 2 * direction(I, orthocenter(A, C, D)) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on G, F, center(Circle(A, D, F)), G we get 180 == 2 * direction(G, F) - 2 * direction(center(Circle(A, D, F)), G) mod 360
By perpendicular_direction_conditions_v0_r on C, G, center(Circle(A, D, F)), H we get 180 == 2 * direction(C, G) - 2 * direction(center(Circle(A, D, F)), H) mod 360
By perpendicular_direction_conditions_v0_r on A, F, center(Circle(A, D, F)), H we get 180 == 2 * direction(A, F) - 2 * direction(center(Circle(A, D, F)), H) mod 360
By perpendicular_direction_conditions_v0_r on G, center(Circle(A, D, F)), F, C we get 180 == 2 * direction(G, center(Circle(A, D, F))) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(A, D, F)), H, F, G we get 180 == 2 * direction(center(Circle(A, D, F)), H) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), I, midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(orthocenter(A, C, D), I) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on H, center(Circle(A, D, F)), G, C we get 180 == 2 * direction(H, center(Circle(A, D, F))) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(E, I)), D, E, I we get 180 == 2 * direction(line_intersection(i, Line(E, I)), D) - 2 * direction(E, I) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, midpoint(C, D), I we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(midpoint(C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on H, center(Circle(A, D, F)), F, A we get 180 == 2 * direction(H, center(Circle(A, D, F))) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on C, G, H, center(Circle(A, D, F)) we get 180 == 2 * direction(C, G) - 2 * direction(H, center(Circle(A, D, F))) mod 360
By perpendicular_direction_conditions_v0_r on E, F, H, midpoint(C, D) we get 180 == 2 * direction(E, F) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), I, midpoint(C, D), H we get 180 == 2 * direction(orthocenter(A, C, D), I) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), midpoint(E, F), E we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(C, D), I, orthocenter(A, C, D) we get 180 == 2 * direction(I, midpoint(C, D)) - 2 * direction(I, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(A, D, F)), G, F, A we get 180 == 2 * direction(center(Circle(A, D, F)), G) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on F, A, center(Circle(A, D, F)), H we get 180 == 2 * direction(F, A) - 2 * direction(center(Circle(A, D, F)), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, I, A we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on G, C, G, center(Circle(A, D, F)) we get 180 == 2 * direction(G, C) - 2 * direction(G, center(Circle(A, D, F))) mod 360
By perpendicular_direction_conditions_v0_r on A, C, H, center(Circle(A, D, F)) we get 180 == 2 * direction(A, C) - 2 * direction(H, center(Circle(A, D, F))) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), midpoint(E, F), E we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(A, D, F)), G, F, C we get 180 == 2 * direction(center(Circle(A, D, F)), G) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, F, midpoint(E, F) we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(A, D, F)), G, A, G we get 180 == 2 * direction(center(Circle(A, D, F)), G) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(i, Line(E, I)), I, E we get 180 == 2 * direction(B, line_intersection(i, Line(E, I))) - 2 * direction(I, E) mod 360
By perpendicular_direction_conditions_v0_r on A, F, G, center(Circle(A, D, F)) we get 180 == 2 * direction(A, F) - 2 * direction(G, center(Circle(A, D, F))) mod 360
By perpendicular_direction_conditions_v0_r on H, center(Circle(A, D, F)), A, C we get 180 == 2 * direction(H, center(Circle(A, D, F))) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), I, E, F we get 180 == 2 * direction(midpoint(C, D), I) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), I, A we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on H, center(Circle(A, D, F)), F, C we get 180 == 2 * direction(H, center(Circle(A, D, F))) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on B, D, E, line_intersection(i, Line(E, I)) we get 180 == 2 * direction(B, D) - 2 * direction(E, line_intersection(i, Line(E, I))) mod 360
By perpendicular_direction_conditions_v0_r on G, center(Circle(A, D, F)), F, A we get 180 == 2 * direction(G, center(Circle(A, D, F))) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on I, A, midpoint(C, D), I we get 180 == 2 * direction(I, A) - 2 * direction(midpoint(C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), I, midpoint(E, F), F we get 180 == 2 * direction(midpoint(C, D), I) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on H, center(Circle(A, D, F)), C, A we get 180 == 2 * direction(H, center(Circle(A, D, F))) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, I, midpoint(C, D) we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(I, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(C, D), orthocenter(A, C, D), A we get 180 == 2 * direction(I, midpoint(C, D)) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), E, F we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(A, D, F)), H, A, F we get 180 == 2 * direction(center(Circle(A, D, F)), H) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on A, G, G, center(Circle(A, D, F)) we get 180 == 2 * direction(A, G) - 2 * direction(G, center(Circle(A, D, F))) mod 360
By sas_anti_congruence on I, midpoint(E, F), F, I, midpoint(E, F), E we get anti_congruent_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), I, midpoint(C, D) we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(I, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on I, orthocenter(A, C, D), I, midpoint(C, D) we get 180 == 2 * direction(I, orthocenter(A, C, D)) - 2 * direction(I, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, H, midpoint(C, D) we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on F, C, H, center(Circle(A, D, F)) we get 180 == 2 * direction(F, C) - 2 * direction(H, center(Circle(A, D, F))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, A, orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), midpoint(E, F), F we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(C, D), I, A we get 180 == 2 * direction(I, midpoint(C, D)) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on E, F, midpoint(C, D), I we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on G, center(Circle(A, D, F)), C, F we get 180 == 2 * direction(G, center(Circle(A, D, F))) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), I, E, midpoint(E, F) we get 180 == 2 * direction(midpoint(C, D), I) - 2 * direction(E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on G, A, center(Circle(A, D, F)), H we get 180 == 2 * direction(G, A) - 2 * direction(center(Circle(A, D, F)), H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, midpoint(C, D), I we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(midpoint(C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on E, I, line_intersection(i, Line(E, I)), B we get 180 == 2 * direction(E, I) - 2 * direction(line_intersection(i, Line(E, I)), B) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), orthocenter(A, C, D), A we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(E, I)), B, I, E we get 180 == 2 * direction(line_intersection(i, Line(E, I)), B) - 2 * direction(I, E) mod 360
By perpendicular_direction_conditions_v0_r on G, A, H, center(Circle(A, D, F)) we get 180 == 2 * direction(G, A) - 2 * direction(H, center(Circle(A, D, F))) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), H, midpoint(C, D) we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), I, A we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on I, E, B, line_intersection(i, Line(E, I)) we get 180 == 2 * direction(I, E) - 2 * direction(B, line_intersection(i, Line(E, I))) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(C, D), F, E we get 180 == 2 * direction(I, midpoint(C, D)) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on G, center(Circle(A, D, F)), A, C we get 180 == 2 * direction(G, center(Circle(A, D, F))) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), midpoint(C, D), I we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(midpoint(C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(A, D, F)), G, G, F we get 180 == 2 * direction(center(Circle(A, D, F)), G) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), orthocenter(A, C, D), A we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(A, D, F)), G, G, C we get 180 == 2 * direction(center(Circle(A, D, F)), G) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on I, A, midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(I, A) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, F, G, center(Circle(A, D, F)) we get 180 == 2 * direction(G, F) - 2 * direction(G, center(Circle(A, D, F))) mod 360
By perpendicular_direction_conditions_v0_r on F, E, H, midpoint(C, D) we get 180 == 2 * direction(F, E) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, A, G, center(Circle(A, D, F)) we get 180 == 2 * direction(G, A) - 2 * direction(G, center(Circle(A, D, F))) mod 360
By similar_triangle_basic_properties on C, midpoint(C, D), F, E, H, A we get angle(E, H, A) == angle(C, midpoint(C, D), F) mod 360, angle(H, A, E) == angle(midpoint(C, D), F, C) mod 360, angle(A, E, H) == angle(F, C, midpoint(C, D)) mod 360, log(distance(C, midpoint(C, D))) + log(distance(A, H)) == log(distance(E, H)) + log(distance(F, midpoint(C, D))), log(distance(A, H)) + log(distance(C, F)) == log(distance(F, midpoint(C, D))) + log(distance(A, E)), log(distance(C, F)) + log(distance(E, H)) == log(distance(A, E)) + log(distance(C, midpoint(C, D)))
By in_imply_collinear on projection(C, h), center(Circle(A, D, F)), A we get collinear(A, projection(C, h), center(Circle(A, D, F)))
By perpendicular_direction_conditions_v0_r on I, midpoint(C, D), midpoint(E, F), E we get 180 == 2 * direction(I, midpoint(C, D)) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on H, center(Circle(A, D, F)), F, G we get 180 == 2 * direction(H, center(Circle(A, D, F))) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(E, I)), B, E, I we get 180 == 2 * direction(line_intersection(i, Line(E, I)), B) - 2 * direction(E, I) mod 360
By perpendicular_direction_conditions_v0_r on I, A, midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(I, A) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on I, E, D, line_intersection(i, Line(E, I)) we get 180 == 2 * direction(I, E) - 2 * direction(D, line_intersection(i, Line(E, I))) mod 360
By perpendicular_direction_conditions_v0_r on G, A, center(Circle(A, D, F)), G we get 180 == 2 * direction(G, A) - 2 * direction(center(Circle(A, D, F)), G) mod 360
By perpendicular_direction_conditions_v0_r on I, E, line_intersection(i, Line(E, I)), D we get 180 == 2 * direction(I, E) - 2 * direction(line_intersection(i, Line(E, I)), D) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(A, D, F)), G, C, A we get 180 == 2 * direction(center(Circle(A, D, F)), G) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), F, midpoint(E, F) we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(A, D, F)), H, G, C we get 180 == 2 * direction(center(Circle(A, D, F)), H) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), E, F we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), midpoint(C, D), I we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(midpoint(C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on F, E, midpoint(C, D), I we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(E, I)), I, D, B we get 180 == 2 * direction(line_intersection(i, Line(E, I)), I) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on H, center(Circle(A, D, F)), C, F we get 180 == 2 * direction(H, center(Circle(A, D, F))) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on A, I, midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(A, I) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(E, I)), I, B, D we get 180 == 2 * direction(line_intersection(i, Line(E, I)), I) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), I, A, orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(C, D), I) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(A, D, F)), G, G, A we get 180 == 2 * direction(center(Circle(A, D, F)), G) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on A, C, center(Circle(A, D, F)), G we get 180 == 2 * direction(A, C) - 2 * direction(center(Circle(A, D, F)), G) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(i, Line(E, I)), D, B we get 180 == 2 * direction(E, line_intersection(i, Line(E, I))) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on B, D, line_intersection(i, Line(E, I)), E we get 180 == 2 * direction(B, D) - 2 * direction(line_intersection(i, Line(E, I)), E) mod 360
By perpendicular_direction_conditions_v0_r on F, G, center(Circle(A, D, F)), G we get 180 == 2 * direction(F, G) - 2 * direction(center(Circle(A, D, F)), G) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), midpoint(E, F), F we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on G, center(Circle(A, D, F)), G, A we get 180 == 2 * direction(G, center(Circle(A, D, F))) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(A, D, F)), H, A, C we get 180 == 2 * direction(center(Circle(A, D, F)), H) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(C, D), E, midpoint(E, F) we get 180 == 2 * direction(I, midpoint(C, D)) - 2 * direction(E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on A, I, midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(A, I) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By in_imply_collinear on orthocenter(D, E, I), line_intersection(i, Line(E, I)), D we get collinear(D, orthocenter(D, E, I), line_intersection(i, Line(E, I)))
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), F, E we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), A, orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By in_imply_collinear on orthocenter(C, F, H), H, center(Circle(A, D, F)) we get collinear(H, orthocenter(C, F, H), center(Circle(A, D, F)))
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), F, E we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), I, I, A we get 180 == 2 * direction(midpoint(C, D), I) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, midpoint(C, D), H we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, orthocenter(A, C, D), I we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(orthocenter(A, C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on E, I, B, line_intersection(i, Line(E, I)) we get 180 == 2 * direction(E, I) - 2 * direction(B, line_intersection(i, Line(E, I))) mod 360
By perpendicular_direction_conditions_v0_r on C, F, H, center(Circle(A, D, F)) we get 180 == 2 * direction(C, F) - 2 * direction(H, center(Circle(A, D, F))) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(A, D, F)), G, A, F we get 180 == 2 * direction(center(Circle(A, D, F)), G) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on G, F, center(Circle(A, D, F)), H we get 180 == 2 * direction(G, F) - 2 * direction(center(Circle(A, D, F)), H) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), E, midpoint(E, F) we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on F, A, G, center(Circle(A, D, F)) we get 180 == 2 * direction(F, A) - 2 * direction(G, center(Circle(A, D, F))) mod 360
By perpendicular_direction_conditions_v0_r on F, E, midpoint(C, D), H we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on E, I, line_intersection(i, Line(E, I)), D we get 180 == 2 * direction(E, I) - 2 * direction(line_intersection(i, Line(E, I)), D) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, center(Circle(A, D, F)), G, C we get 180 == 2 * direction(G, center(Circle(A, D, F))) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), A, I we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), I, F, midpoint(E, F) we get 180 == 2 * direction(midpoint(C, D), I) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(A, D, F)), H, F, C we get 180 == 2 * direction(center(Circle(A, D, F)), H) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on F, E, midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, midpoint(E, F), E we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(C, D), E, F we get 180 == 2 * direction(I, midpoint(C, D)) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(C, D), A, I we get 180 == 2 * direction(I, midpoint(C, D)) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), midpoint(C, D), H we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), I, midpoint(C, D) we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(I, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on I, orthocenter(A, C, D), midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(I, orthocenter(A, C, D)) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on H, center(Circle(A, D, F)), G, F we get 180 == 2 * direction(H, center(Circle(A, D, F))) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(i, Line(E, I)), B, D we get 180 == 2 * direction(E, line_intersection(i, Line(E, I))) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), F, E we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on I, E, line_intersection(i, Line(E, I)), B we get 180 == 2 * direction(I, E) - 2 * direction(line_intersection(i, Line(E, I)), B) mod 360
By perpendicular_direction_conditions_v0_r on G, center(Circle(A, D, F)), A, F we get 180 == 2 * direction(G, center(Circle(A, D, F))) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, midpoint(C, D), H we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on C, G, center(Circle(A, D, F)), G we get 180 == 2 * direction(C, G) - 2 * direction(center(Circle(A, D, F)), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), I, A, I we get 180 == 2 * direction(midpoint(C, D), I) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), midpoint(E, F), F we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on A, I, I, midpoint(C, D) we get 180 == 2 * direction(A, I) - 2 * direction(I, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on I, orthocenter(A, C, D), midpoint(C, D), I we get 180 == 2 * direction(I, orthocenter(A, C, D)) - 2 * direction(midpoint(C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on G, C, H, center(Circle(A, D, F)) we get 180 == 2 * direction(G, C) - 2 * direction(H, center(Circle(A, D, F))) mod 360
By perpendicular_direction_conditions_v0_r on I, orthocenter(A, C, D), H, midpoint(C, D) we get 180 == 2 * direction(I, orthocenter(A, C, D)) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(C, D), orthocenter(A, C, D), I we get 180 == 2 * direction(I, midpoint(C, D)) - 2 * direction(orthocenter(A, C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on F, C, G, center(Circle(A, D, F)) we get 180 == 2 * direction(F, C) - 2 * direction(G, center(Circle(A, D, F))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), I, orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(I, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on I, A, I, midpoint(C, D) we get 180 == 2 * direction(I, A) - 2 * direction(I, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(i, Line(E, I)), I, E we get 180 == 2 * direction(D, line_intersection(i, Line(E, I))) - 2 * direction(I, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), orthocenter(A, C, D), A we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on C, G, G, center(Circle(A, D, F)) we get 180 == 2 * direction(C, G) - 2 * direction(G, center(Circle(A, D, F))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), I, midpoint(E, F), E we get 180 == 2 * direction(midpoint(C, D), I) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on F, E, I, midpoint(C, D) we get 180 == 2 * direction(F, E) - 2 * direction(I, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), I, I, orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(C, D), I) - 2 * direction(I, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on A, G, center(Circle(A, D, F)), G we get 180 == 2 * direction(A, G) - 2 * direction(center(Circle(A, D, F)), G) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(A, D, F)), G, F, G we get 180 == 2 * direction(center(Circle(A, D, F)), G) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(A, D, F)), G, A, C we get 180 == 2 * direction(center(Circle(A, D, F)), G) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(A, D, F)), H, G, A we get 180 == 2 * direction(center(Circle(A, D, F)), H) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), I, I, midpoint(C, D) we get 180 == 2 * direction(orthocenter(A, C, D), I) - 2 * direction(I, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, center(Circle(A, D, F)), G, F we get 180 == 2 * direction(G, center(Circle(A, D, F))) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on A, G, center(Circle(A, D, F)), H we get 180 == 2 * direction(A, G) - 2 * direction(center(Circle(A, D, F)), H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), I, midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(orthocenter(A, C, D), I) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, orthocenter(A, C, D), A we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), I, H, midpoint(C, D) we get 180 == 2 * direction(orthocenter(A, C, D), I) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(i, Line(E, I)), E, I we get 180 == 2 * direction(D, line_intersection(i, Line(E, I))) - 2 * direction(E, I) mod 360
By perpendicular_direction_conditions_v0_r on C, A, center(Circle(A, D, F)), G we get 180 == 2 * direction(C, A) - 2 * direction(center(Circle(A, D, F)), G) mod 360
By perpendicular_direction_conditions_v0_r on A, I, midpoint(C, D), H we get 180 == 2 * direction(A, I) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on E, F, midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, F, G, center(Circle(A, D, F)) we get 180 == 2 * direction(C, F) - 2 * direction(G, center(Circle(A, D, F))) mod 360
By perpendicular_direction_conditions_v0_r on G, center(Circle(A, D, F)), C, A we get 180 == 2 * direction(G, center(Circle(A, D, F))) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(A, D, F)), H, G, F we get 180 == 2 * direction(center(Circle(A, D, F)), H) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on H, center(Circle(A, D, F)), G, A we get 180 == 2 * direction(H, center(Circle(A, D, F))) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, F, E we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, I, midpoint(C, D) we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(I, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), H, midpoint(C, D) we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), F, midpoint(E, F) we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, F, midpoint(C, D), H we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on A, F, center(Circle(A, D, F)), G we get 180 == 2 * direction(A, F) - 2 * direction(center(Circle(A, D, F)), G) mod 360
By perpendicular_direction_conditions_v0_r on G, center(Circle(A, D, F)), C, G we get 180 == 2 * direction(G, center(Circle(A, D, F))) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on A, I, H, midpoint(C, D) we get 180 == 2 * direction(A, I) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, midpoint(C, D), I we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(midpoint(C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on I, A, midpoint(C, D), H we get 180 == 2 * direction(I, A) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), A, I we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), midpoint(C, D), H we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), orthocenter(A, C, D), I we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(orthocenter(A, C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(C, D), A, orthocenter(A, C, D) we get 180 == 2 * direction(I, midpoint(C, D)) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(A, D, F)), H, C, F we get 180 == 2 * direction(center(Circle(A, D, F)), H) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), midpoint(C, D), H we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on B, D, I, line_intersection(i, Line(E, I)) we get 180 == 2 * direction(B, D) - 2 * direction(I, line_intersection(i, Line(E, I))) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(i, Line(E, I)), E, I we get 180 == 2 * direction(B, line_intersection(i, Line(E, I))) - 2 * direction(E, I) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, midpoint(E, F), F we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, midpoint(C, D), H we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), I, orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(I, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on H, center(Circle(A, D, F)), A, G we get 180 == 2 * direction(H, center(Circle(A, D, F))) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on A, C, center(Circle(A, D, F)), H we get 180 == 2 * direction(A, C) - 2 * direction(center(Circle(A, D, F)), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), I, orthocenter(A, C, D), I we get 180 == 2 * direction(midpoint(C, D), I) - 2 * direction(orthocenter(A, C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), I, F, E we get 180 == 2 * direction(midpoint(C, D), I) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(A, D, F)), H, F, A we get 180 == 2 * direction(center(Circle(A, D, F)), H) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on C, A, center(Circle(A, D, F)), H we get 180 == 2 * direction(C, A) - 2 * direction(center(Circle(A, D, F)), H) mod 360
By perpendicular_direction_conditions_v0_r on C, A, H, center(Circle(A, D, F)) we get 180 == 2 * direction(C, A) - 2 * direction(H, center(Circle(A, D, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(E, I)), E, D, B we get 180 == 2 * direction(line_intersection(i, Line(E, I)), E) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on A, F, H, center(Circle(A, D, F)) we get 180 == 2 * direction(A, F) - 2 * direction(H, center(Circle(A, D, F))) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(A, D, F)), G, C, F we get 180 == 2 * direction(center(Circle(A, D, F)), G) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on H, center(Circle(A, D, F)), A, F we get 180 == 2 * direction(H, center(Circle(A, D, F))) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on B, D, line_intersection(i, Line(E, I)), I we get 180 == 2 * direction(B, D) - 2 * direction(line_intersection(i, Line(E, I)), I) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(A, D, F)), H, C, G we get 180 == 2 * direction(center(Circle(A, D, F)), H) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, F, center(Circle(A, D, F)), H we get 180 == 2 * direction(C, F) - 2 * direction(center(Circle(A, D, F)), H) mod 360
By perpendicular_direction_conditions_v0_r on A, I, midpoint(C, D), I we get 180 == 2 * direction(A, I) - 2 * direction(midpoint(C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(E, I)), E, B, D we get 180 == 2 * direction(line_intersection(i, Line(E, I)), E) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(A, D, F)), H, C, A we get 180 == 2 * direction(center(Circle(A, D, F)), H) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(C, D), midpoint(E, F), F we get 180 == 2 * direction(I, midpoint(C, D)) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on A, C, G, center(Circle(A, D, F)) we get 180 == 2 * direction(A, C) - 2 * direction(G, center(Circle(A, D, F))) mod 360
By perpendicular_direction_conditions_v0_r on C, A, G, center(Circle(A, D, F)) we get 180 == 2 * direction(C, A) - 2 * direction(G, center(Circle(A, D, F))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), orthocenter(A, C, D), I we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(orthocenter(A, C, D), I) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, A, I we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, I, midpoint(C, D) we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(I, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on F, C, center(Circle(A, D, F)), G we get 180 == 2 * direction(F, C) - 2 * direction(center(Circle(A, D, F)), G) mod 360
By sss_anti_similarity_v1 on H, E, I, H, F, I we get anti_similar_triangles(E, H, I, F, H, I)
By in_imply_collinear on orthocenter(D, E, I), E, F we get collinear(E, F, orthocenter(D, E, I))
By similar_triangle_basic_properties on F, E, C, F, D, midpoint(C, D) we get angle(F, E, C) == angle(F, D, midpoint(C, D)) mod 360, angle(E, C, F) == angle(D, midpoint(C, D), F) mod 360, angle(C, F, E) == angle(midpoint(C, D), F, D) mod 360, log(distance(D, F)) + log(distance(C, E)) == log(distance(E, F)) + log(distance(D, midpoint(C, D))), log(distance(C, E)) + log(distance(F, midpoint(C, D))) == log(distance(D, midpoint(C, D))) + log(distance(C, F)), log(distance(C, F)) + log(distance(D, F)) == log(distance(F, midpoint(C, D))) + log(distance(E, F))
By sss_anti_congruence_v0 on E, H, I, F, H, I we get anti_congruent_triangles(E, H, I, F, H, I)
By sss_anti_similarity_v1 on H, E, I, H, F, I we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_similarity_v1 on E, I, H, F, I, H we get anti_similar_triangles(E, H, I, F, H, I)
By perpendicular_bisector_sufficient_conditions on E, A, H, center(Circle(A, C, E)) we get perpendicular_bisector(A, E) == Line(H, center(Circle(A, C, E)))
By in_imply_collinear on orthocenter(A, C, H), A, orthocenter(A, C, D) we get collinear(A, orthocenter(A, C, D), orthocenter(A, C, H))
By sas_anti_similarity on A, H, E, I, center(Circle(A, D, F)), F we get anti_similar_triangles(A, E, H, I, F, center(Circle(A, D, F)))
By in_imply_collinear on orthocenter(C, F, H), center(Circle(A, D, F)), G we get collinear(G, orthocenter(C, F, H), center(Circle(A, D, F)))
By anti_similar_triangle_basic_properties on D, midpoint(C, D), F, F, C, E we get 0 - angle(F, C, E) == angle(D, midpoint(C, D), F) mod 360, 0 - angle(C, E, F) == angle(midpoint(C, D), F, D) mod 360, 0 - angle(E, F, C) == angle(F, D, midpoint(C, D)) mod 360, log(distance(C, F)) + log(distance(F, midpoint(C, D))) == log(distance(D, midpoint(C, D))) + log(distance(C, E)), log(distance(C, E)) + log(distance(D, F)) == log(distance(F, midpoint(C, D))) + log(distance(E, F)), log(distance(D, F)) + log(distance(C, F)) == log(distance(E, F)) + log(distance(D, midpoint(C, D)))
By sas_similarity on I, center(Circle(A, D, F)), F, E, D, F we get similar_triangles(D, E, F, center(Circle(A, D, F)), I, F)
By anti_similar_triangle_basic_properties on C, E, midpoint(C, D), E, A, H we get 0 - angle(E, A, H) == angle(C, E, midpoint(C, D)) mod 360, 0 - angle(A, H, E) == angle(E, midpoint(C, D), C) mod 360, 0 - angle(H, E, A) == angle(midpoint(C, D), C, E) mod 360, log(distance(C, E)) + log(distance(A, H)) == log(distance(A, E)) + log(distance(E, midpoint(C, D))), log(distance(A, H)) + log(distance(C, midpoint(C, D))) == log(distance(E, midpoint(C, D))) + log(distance(E, H)), log(distance(E, H)) + log(distance(C, E)) == log(distance(C, midpoint(C, D))) + log(distance(A, E))
By in_imply_collinear on orthocenter(A, C, H), H, center(Circle(A, D, F)) we get collinear(H, orthocenter(A, C, H), center(Circle(A, D, F)))
By in_imply_collinear on orthocenter(D, E, I), midpoint(E, F), F we get collinear(F, midpoint(E, F), orthocenter(D, E, I))
By in_imply_collinear on orthocenter(C, F, H), H, G we get collinear(G, H, orthocenter(C, F, H))
By internal_angle_bisector_definition_v0 on G, center(Circle(A, D, F)), B, A we get angle(G, A, center(Circle(A, D, F))) == angle(center(Circle(A, D, F)), A, B) mod 360
By sas_anti_congruence on E, I, midpoint(E, F), F, I, midpoint(E, F) we get anti_congruent_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By in_imply_collinear on orthocenter(A, C, H), orthocenter(A, C, D), I we get collinear(I, orthocenter(A, C, D), orthocenter(A, C, H))
By in_imply_collinear on orthocenter(D, E, I), line_intersection(i, Line(E, I)), B we get collinear(B, orthocenter(D, E, I), line_intersection(i, Line(E, I)))
By in_imply_collinear on orthocenter(D, E, I), midpoint(E, F), E we get collinear(E, midpoint(E, F), orthocenter(D, E, I))
By in_imply_collinear on orthocenter(A, C, H), G, H we get collinear(G, H, orthocenter(A, C, H))
By similar_triangle_basic_properties on C, midpoint(C, D), F, E, D, F we get angle(E, D, F) == angle(C, midpoint(C, D), F) mod 360, angle(D, F, E) == angle(midpoint(C, D), F, C) mod 360, angle(F, E, D) == angle(F, C, midpoint(C, D)) mod 360, log(distance(C, midpoint(C, D))) + log(distance(D, F)) == log(distance(D, E)) + log(distance(F, midpoint(C, D))), log(distance(D, F)) + log(distance(C, F)) == log(distance(F, midpoint(C, D))) + log(distance(E, F)), log(distance(C, F)) + log(distance(D, E)) == log(distance(E, F)) + log(distance(C, midpoint(C, D)))
By similar_triangle_basic_properties on E, D, F, E, midpoint(C, D), C we get angle(E, D, F) == angle(E, midpoint(C, D), C) mod 360, angle(D, F, E) == angle(midpoint(C, D), C, E) mod 360, angle(F, E, D) == angle(C, E, midpoint(C, D)) mod 360, log(distance(D, E)) + log(distance(C, midpoint(C, D))) == log(distance(E, midpoint(C, D))) + log(distance(D, F)), log(distance(D, F)) + log(distance(C, E)) == log(distance(C, midpoint(C, D))) + log(distance(E, F)), log(distance(C, E)) + log(distance(D, E)) == log(distance(E, F)) + log(distance(E, midpoint(C, D)))
By in_imply_collinear on orthocenter(A, C, H), I, A we get collinear(A, I, orthocenter(A, C, H))
By in_imply_collinear on orthocenter(D, E, I), D, B we get collinear(B, D, orthocenter(D, E, I))
By sas_anti_congruence on E, midpoint(E, F), I, F, midpoint(E, F), I we get anti_congruent_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By sss_anti_congruence_v0 on H, I, E, H, I, F we get anti_congruent_triangles(E, H, I, F, H, I)
By in_imply_collinear on orthocenter(C, F, H), midpoint(E, F), F we get collinear(F, midpoint(E, F), orthocenter(C, F, H))
By sss_anti_similarity_v1 on F, H, I, E, H, I we get anti_similar_triangles(E, H, I, F, H, I)
By sas_anti_similarity on E, C, midpoint(E, F), F, C, midpoint(E, F) we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By in_imply_collinear on center(Circle(A, D, F)), projection(C, h), D we get collinear(D, projection(C, h), center(Circle(A, D, F)))
By similar_triangle_basic_properties on E, D, midpoint(C, D), E, F, C we get angle(E, F, C) == angle(E, D, midpoint(C, D)) mod 360, angle(F, C, E) == angle(D, midpoint(C, D), E) mod 360, angle(C, E, F) == angle(midpoint(C, D), E, D) mod 360, log(distance(D, E)) + log(distance(C, F)) == log(distance(E, F)) + log(distance(D, midpoint(C, D))), log(distance(C, F)) + log(distance(E, midpoint(C, D))) == log(distance(D, midpoint(C, D))) + log(distance(C, E)), log(distance(C, E)) + log(distance(D, E)) == log(distance(E, midpoint(C, D))) + log(distance(E, F))
By sss_anti_congruence_v0 on H, I, E, H, I, F we get anti_congruent_triangles(E, H, I, F, H, I)
By aa_anti_similarity on F, midpoint(E, F), C, E, midpoint(E, F), C we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sss_anti_similarity_v1 on I, H, E, I, H, F we get anti_similar_triangles(E, H, I, F, H, I)
By anti_similar_triangle_basic_properties on F, D, E, E, midpoint(C, D), C we get angle(F, D, E) == 0 - angle(E, midpoint(C, D), C) mod 360, angle(D, E, F) == 0 - angle(midpoint(C, D), C, E) mod 360, angle(E, F, D) == 0 - angle(C, E, midpoint(C, D)) mod 360, log(distance(D, F)) + log(distance(C, midpoint(C, D))) == log(distance(E, midpoint(C, D))) + log(distance(D, E)), log(distance(D, E)) + log(distance(C, E)) == log(distance(C, midpoint(C, D))) + log(distance(E, F)), log(distance(C, E)) + log(distance(D, F)) == log(distance(E, F)) + log(distance(E, midpoint(C, D)))
By sss_anti_congruence_v1 on E, I, H, F, I, H we get anti_congruent_triangles(E, H, I, F, H, I)
By in_imply_collinear on orthocenter(C, F, H), E, F we get collinear(E, F, orthocenter(C, F, H))
By anti_similar_triangle_basic_properties on E, F, D, F, C, midpoint(C, D) we get angle(E, F, D) == 0 - angle(F, C, midpoint(C, D)) mod 360, angle(F, D, E) == 0 - angle(C, midpoint(C, D), F) mod 360, angle(D, E, F) == 0 - angle(midpoint(C, D), F, C) mod 360, log(distance(C, F)) + log(distance(D, F)) == log(distance(E, F)) + log(distance(C, midpoint(C, D))), log(distance(C, midpoint(C, D))) + log(distance(D, E)) == log(distance(D, F)) + log(distance(F, midpoint(C, D))), log(distance(D, E)) + log(distance(C, F)) == log(distance(F, midpoint(C, D))) + log(distance(E, F))
By in_imply_collinear on orthocenter(A, C, H), center(Circle(A, D, F)), G we get collinear(G, orthocenter(A, C, H), center(Circle(A, D, F)))
By between_imply_segment_sum on H, D, C we get distance(C, H) == distance(D, H) + distance(C, D)
By similar_triangle_basic_properties on E, H, A, E, midpoint(C, D), C we get angle(E, H, A) == angle(E, midpoint(C, D), C) mod 360, angle(H, A, E) == angle(midpoint(C, D), C, E) mod 360, angle(A, E, H) == angle(C, E, midpoint(C, D)) mod 360, log(distance(E, H)) + log(distance(C, midpoint(C, D))) == log(distance(E, midpoint(C, D))) + log(distance(A, H)), log(distance(A, H)) + log(distance(C, E)) == log(distance(C, midpoint(C, D))) + log(distance(A, E)), log(distance(C, E)) + log(distance(E, H)) == log(distance(A, E)) + log(distance(E, midpoint(C, D)))
By sas_anti_similarity on I, midpoint(E, F), E, I, midpoint(E, F), F we get anti_similar_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By in_imply_collinear on orthocenter(C, F, H), midpoint(E, F), E we get collinear(E, midpoint(E, F), orthocenter(C, F, H))
By sas_anti_similarity on E, midpoint(C, D), C, F, center(Circle(A, D, F)), I we get anti_similar_triangles(C, E, midpoint(C, D), I, F, center(Circle(A, D, F)))
By sas_anti_similarity on D, center(Circle(A, D, F)), F, F, I, E we get anti_similar_triangles(D, F, center(Circle(A, D, F)), F, E, I)
By anti_similar_triangle_basic_properties on A, E, H, C, F, midpoint(C, D) we get angle(A, E, H) == 0 - angle(C, F, midpoint(C, D)) mod 360, angle(E, H, A) == 0 - angle(F, midpoint(C, D), C) mod 360, angle(H, A, E) == 0 - angle(midpoint(C, D), C, F) mod 360, log(distance(C, F)) + log(distance(E, H)) == log(distance(A, E)) + log(distance(F, midpoint(C, D))), log(distance(E, H)) + log(distance(C, midpoint(C, D))) == log(distance(F, midpoint(C, D))) + log(distance(A, H)), log(distance(A, H)) + log(distance(C, F)) == log(distance(C, midpoint(C, D))) + log(distance(A, E))
By between_imply_segment_sum on C, I, H we get distance(C, H) == distance(C, I) + distance(H, I)
By reverse_direction on H, midpoint(E, F) we get 180 == direction(H, midpoint(E, F)) - direction(midpoint(E, F), H) mod 360
By sas_similarity on F, midpoint(C, D), C, F, center(Circle(A, D, F)), I we get similar_triangles(C, F, midpoint(C, D), I, F, center(Circle(A, D, F)))
By collinear_definition on midpoint(E, F), D, H we get D in Line(H, midpoint(E, F)), H in Line(D, midpoint(E, F)), Line(D, midpoint(E, F)) == Line(H, midpoint(E, F)), 0 == 2 * angle(D, midpoint(E, F), H) mod 360
By asa_anti_congruence on C, midpoint(E, F), E, C, midpoint(E, F), F we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sss_anti_congruence_v1 on I, F, H, I, E, H we get anti_congruent_triangles(E, H, I, F, H, I)
By asa_anti_congruence on midpoint(E, F), C, E, midpoint(E, F), C, F we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sss_anti_similarity_v1 on H, E, I, H, F, I we get anti_similar_triangles(E, H, I, F, H, I)
By sas_anti_similarity on midpoint(E, F), C, E, midpoint(E, F), C, F we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sss_anti_congruence_v1 on E, I, H, F, I, H we get anti_congruent_triangles(E, H, I, F, H, I)
By asa_anti_congruence on H, midpoint(E, F), E, H, midpoint(E, F), F we get anti_congruent_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By sss_anti_similarity_v0 on F, I, H, E, I, H we get anti_similar_triangles(E, H, I, F, H, I)
By asa_anti_congruence on midpoint(E, F), I, F, midpoint(E, F), I, E we get anti_congruent_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By sss_anti_similarity_v0 on I, E, H, I, F, H we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_similarity_v1 on H, E, I, H, F, I we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_congruence_v1 on I, F, H, I, E, H we get anti_congruent_triangles(E, H, I, F, H, I)
By point_on_perpendicular_bisector on A, F, orthocenter(C, F, H), Line(G, H) we get distance(A, orthocenter(C, F, H)) == distance(F, orthocenter(C, F, H))
By sss_anti_similarity_v0 on E, H, I, F, H, I we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_similarity_v0 on H, F, I, H, E, I we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_similarity_v1 on H, I, F, H, I, E we get anti_similar_triangles(E, H, I, F, H, I)
By collinear_definition on C, midpoint(C, D), H we get midpoint(C, D) in Line(C, H), H in Line(C, midpoint(C, D)), Line(C, H) == Line(C, midpoint(C, D)), 0 == 2 * angle(midpoint(C, D), C, H) mod 360
By sas_anti_congruence on F, midpoint(E, F), I, E, midpoint(E, F), I we get anti_congruent_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By sas_anti_similarity on F, center(Circle(A, D, F)), I, C, midpoint(C, D), F we get anti_similar_triangles(C, F, midpoint(C, D), F, I, center(Circle(A, D, F)))
By collinear_definition on D, midpoint(C, D), midpoint(E, F) we get midpoint(C, D) in Line(D, midpoint(E, F)), midpoint(E, F) in Line(D, midpoint(C, D)), Line(D, midpoint(C, D)) == Line(D, midpoint(E, F)), 0 == 2 * angle(midpoint(C, D), D, midpoint(E, F)) mod 360
By sas_anti_similarity on E, H, A, F, center(Circle(A, D, F)), I we get anti_similar_triangles(A, E, H, I, F, center(Circle(A, D, F)))
By sas_anti_similarity on midpoint(E, F), H, F, midpoint(E, F), H, E we get anti_similar_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By collinear_definition on I, midpoint(E, F), H we get midpoint(E, F) in Line(H, I), H in Line(I, midpoint(E, F)), Line(H, I) == Line(I, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), I, H) mod 360
By log_of_2_times_distance on C, D, D, midpoint(C, D) we get log(distance(C, D)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(D, midpoint(C, D)))
By sas_anti_similarity on I, midpoint(E, F), F, I, midpoint(E, F), E we get anti_similar_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By sas_anti_similarity on E, midpoint(E, F), I, F, midpoint(E, F), I we get anti_similar_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By sas_anti_similarity on midpoint(E, F), D, F, midpoint(E, F), D, E we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sss_anti_similarity_v1 on H, I, F, H, I, E we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_congruence_v0 on E, H, I, F, H, I we get anti_congruent_triangles(E, H, I, F, H, I)
By internal_angle_bisector_definition_v0 on H, midpoint(C, D), I, C we get angle(H, C, midpoint(C, D)) == angle(midpoint(C, D), C, I) mod 360
By sss_anti_congruence_v1 on H, E, I, H, F, I we get anti_congruent_triangles(E, H, I, F, H, I)
By sas_anti_congruence on D, midpoint(E, F), E, D, midpoint(E, F), F we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_similarity on F, center(Circle(A, D, F)), I, F, D, E we get similar_triangles(D, E, F, center(Circle(A, D, F)), I, F)
By internal_angle_bisector_definition_v0 on B, center(Circle(A, D, F)), F, A we get angle(B, A, center(Circle(A, D, F))) == angle(center(Circle(A, D, F)), A, F) mod 360
By sss_anti_similarity_v1 on I, F, H, I, E, H we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_similarity_v0 on E, H, I, F, H, I we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_similarity_v1 on I, F, H, I, E, H we get anti_similar_triangles(E, H, I, F, H, I)
By sas_anti_similarity on I, center(Circle(A, D, F)), F, F, D, E we get anti_similar_triangles(D, E, F, center(Circle(A, D, F)), F, I)
By sss_anti_similarity_v1 on F, H, I, E, H, I we get anti_similar_triangles(E, H, I, F, H, I)
By sas_anti_congruence on F, I, midpoint(E, F), E, I, midpoint(E, F) we get anti_congruent_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By sas_anti_similarity on E, midpoint(E, F), C, F, midpoint(E, F), C we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By anti_similar_triangle_basic_properties on C, F, E, midpoint(C, D), E, D we get angle(C, F, E) == 0 - angle(midpoint(C, D), E, D) mod 360, angle(F, E, C) == 0 - angle(E, D, midpoint(C, D)) mod 360, angle(E, C, F) == 0 - angle(D, midpoint(C, D), E) mod 360, log(distance(C, F)) + log(distance(D, E)) == log(distance(E, midpoint(C, D))) + log(distance(E, F)), log(distance(D, E)) + log(distance(C, E)) == log(distance(E, F)) + log(distance(D, midpoint(C, D))), log(distance(C, E)) + log(distance(E, midpoint(C, D))) == log(distance(D, midpoint(C, D))) + log(distance(C, F))
By sss_anti_congruence_v1 on F, H, I, E, H, I we get anti_congruent_triangles(E, H, I, F, H, I)
By point_on_perpendicular_bisector on F, A, orthocenter(A, C, H), Line(G, H) we get distance(A, orthocenter(A, C, H)) == distance(F, orthocenter(A, C, H))
By log_of_2_times_distance on D, C, C, midpoint(C, D) we get log(distance(C, D)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(C, midpoint(C, D)))
By sss_anti_congruence_v1 on I, H, E, I, H, F we get anti_congruent_triangles(E, H, I, F, H, I)
By sas_anti_similarity on I, center(Circle(A, D, F)), F, A, H, E we get anti_similar_triangles(A, E, H, I, F, center(Circle(A, D, F)))
By sas_similarity on A, H, E, F, center(Circle(A, D, F)), I we get similar_triangles(A, E, H, F, I, center(Circle(A, D, F)))
By sss_anti_congruence_v1 on F, H, I, E, H, I we get anti_congruent_triangles(E, H, I, F, H, I)
By sss_anti_congruence_v1 on I, H, E, I, H, F we get anti_congruent_triangles(E, H, I, F, H, I)
By sas_anti_congruence on F, H, midpoint(E, F), E, H, midpoint(E, F) we get anti_congruent_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By sas_anti_similarity on F, center(Circle(A, D, F)), I, E, H, A we get anti_similar_triangles(A, E, H, I, F, center(Circle(A, D, F)))
By sas_similarity on F, center(Circle(A, D, F)), D, F, I, E we get similar_triangles(D, F, center(Circle(A, D, F)), E, F, I)
By reverse_direction on C, midpoint(E, F) we get 180 == direction(C, midpoint(E, F)) - direction(midpoint(E, F), C) mod 360
By sss_anti_congruence_v0 on I, H, F, I, H, E we get anti_congruent_triangles(E, H, I, F, H, I)
By asa_anti_congruence on midpoint(E, F), C, F, midpoint(E, F), C, E we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sss_anti_similarity_v1 on I, H, E, I, H, F we get anti_similar_triangles(E, H, I, F, H, I)
By sas_anti_similarity on E, H, midpoint(E, F), F, H, midpoint(E, F) we get anti_similar_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By sas_similarity on C, midpoint(C, D), E, F, center(Circle(A, D, F)), I we get similar_triangles(C, E, midpoint(C, D), F, I, center(Circle(A, D, F)))
By sas_anti_congruence on E, H, midpoint(E, F), F, H, midpoint(E, F) we get anti_congruent_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By aa_anti_similarity on E, I, H, F, I, H we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_similarity_v0 on H, I, E, H, I, F we get anti_similar_triangles(E, H, I, F, H, I)
By sas_anti_similarity on C, midpoint(C, D), F, F, center(Circle(A, D, F)), I we get anti_similar_triangles(C, F, midpoint(C, D), F, I, center(Circle(A, D, F)))
By sas_anti_similarity on I, center(Circle(A, D, F)), F, F, midpoint(C, D), C we get anti_similar_triangles(C, F, midpoint(C, D), F, I, center(Circle(A, D, F)))
By reverse_direction on midpoint(E, F), F we get 180 == direction(midpoint(E, F), F) - direction(F, midpoint(E, F)) mod 360
By sas_anti_similarity on C, midpoint(C, D), E, I, center(Circle(A, D, F)), F we get anti_similar_triangles(C, E, midpoint(C, D), I, F, center(Circle(A, D, F)))
By double_perpendicular_and_parallel_v0 on f, Line(D, E), altitude(I, D, E) we get parallel(f, altitude(I, D, E))
By sas_similarity on C, midpoint(C, D), F, I, center(Circle(A, D, F)), F we get similar_triangles(C, F, midpoint(C, D), I, F, center(Circle(A, D, F)))
By aa_anti_similarity on F, midpoint(E, F), I, E, midpoint(E, F), I we get anti_similar_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By sas_anti_similarity on F, center(Circle(A, D, F)), I, E, midpoint(C, D), C we get anti_similar_triangles(C, E, midpoint(C, D), I, F, center(Circle(A, D, F)))
By sss_anti_congruence_v0 on H, I, E, H, I, F we get anti_congruent_triangles(E, H, I, F, H, I)
By sas_similarity on I, center(Circle(A, D, F)), F, E, midpoint(C, D), C we get similar_triangles(C, E, midpoint(C, D), F, I, center(Circle(A, D, F)))
By internal_angle_bisector_definition_v0 on D, midpoint(C, D), H, C we get angle(D, C, midpoint(C, D)) == angle(midpoint(C, D), C, H) mod 360
By sas_similarity on F, D, E, F, center(Circle(A, D, F)), I we get similar_triangles(D, E, F, center(Circle(A, D, F)), I, F)
By collinear_definition on midpoint(E, F), H, D we get H in Line(D, midpoint(E, F)), D in Line(H, midpoint(E, F)), Line(D, midpoint(E, F)) == Line(H, midpoint(E, F)), 0 == 2 * angle(H, midpoint(E, F), D) mod 360
By internal_angle_bisector_definition_v0 on B, center(Circle(A, D, F)), G, A we get angle(B, A, center(Circle(A, D, F))) == angle(center(Circle(A, D, F)), A, G) mod 360
By internal_angle_bisector_definition_v0 on C, center(Circle(A, D, F)), B, A we get angle(C, A, center(Circle(A, D, F))) == angle(center(Circle(A, D, F)), A, B) mod 360
By asa_anti_congruence on midpoint(E, F), D, E, midpoint(E, F), D, F we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By collinear_definition on H, midpoint(E, F), I we get midpoint(E, F) in Line(H, I), I in Line(H, midpoint(E, F)), Line(H, I) == Line(H, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), H, I) mod 360
By sas_anti_congruence on I, H, E, I, H, F we get anti_congruent_triangles(E, H, I, F, H, I)
By sas_anti_similarity on F, midpoint(E, F), C, E, midpoint(E, F), C we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sss_anti_congruence_v1 on I, H, E, I, H, F we get anti_congruent_triangles(E, H, I, F, H, I)
By aa_anti_similarity on E, D, midpoint(E, F), F, D, midpoint(E, F) we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_similarity on I, center(Circle(A, D, F)), F, C, midpoint(C, D), F we get similar_triangles(C, F, midpoint(C, D), I, F, center(Circle(A, D, F)))
By sss_anti_similarity_v0 on I, E, H, I, F, H we get anti_similar_triangles(E, H, I, F, H, I)
By sas_anti_congruence on H, midpoint(E, F), E, H, midpoint(E, F), F we get anti_congruent_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By sas_anti_congruence on E, midpoint(E, F), D, F, midpoint(E, F), D we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sss_anti_similarity_v1 on H, E, I, H, F, I we get anti_similar_triangles(E, H, I, F, H, I)
By internal_angle_bisector_definition_v0 on midpoint(C, D), midpoint(E, F), midpoint(C, D), C we get angle(midpoint(C, D), C, midpoint(E, F)) == angle(midpoint(E, F), C, midpoint(C, D)) mod 360
By sss_anti_similarity_v1 on I, H, E, I, H, F we get anti_similar_triangles(E, H, I, F, H, I)
By reverse_direction on midpoint(E, F), I we get 180 == direction(midpoint(E, F), I) - direction(I, midpoint(E, F)) mod 360
By sss_anti_congruence_v0 on I, H, F, I, H, E we get anti_congruent_triangles(E, H, I, F, H, I)
By sss_anti_congruence_v1 on I, F, H, I, E, H we get anti_congruent_triangles(E, H, I, F, H, I)
By reverse_direction on I, midpoint(E, F) we get 180 == direction(I, midpoint(E, F)) - direction(midpoint(E, F), I) mod 360
By sss_anti_congruence_v0 on I, H, F, I, H, E we get anti_congruent_triangles(E, H, I, F, H, I)
By sas_anti_congruence on C, midpoint(E, F), F, C, midpoint(E, F), E we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sss_anti_similarity_v1 on F, H, I, E, H, I we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_congruence_v1 on H, I, F, H, I, E we get anti_congruent_triangles(E, H, I, F, H, I)
By sss_anti_similarity_v0 on I, E, H, I, F, H we get anti_similar_triangles(E, H, I, F, H, I)
By collinear_definition on I, H, midpoint(E, F) we get H in Line(I, midpoint(E, F)), midpoint(E, F) in Line(H, I), Line(H, I) == Line(I, midpoint(E, F)), 0 == 2 * angle(H, I, midpoint(E, F)) mod 360
By sss_anti_congruence_v1 on E, I, H, F, I, H we get anti_congruent_triangles(E, H, I, F, H, I)
By sas_anti_similarity on H, I, F, H, I, E we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_similarity_v1 on H, I, F, H, I, E we get anti_similar_triangles(E, H, I, F, H, I)
By sas_anti_similarity on D, midpoint(E, F), F, D, midpoint(E, F), E we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_anti_congruence on I, H, F, I, H, E we get anti_congruent_triangles(E, H, I, F, H, I)
By sas_anti_congruence on midpoint(E, F), I, F, midpoint(E, F), I, E we get anti_congruent_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By sas_anti_similarity on E, I, H, F, I, H we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_similarity_v0 on E, H, I, F, H, I we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_congruence_v0 on H, F, I, H, E, I we get anti_congruent_triangles(E, H, I, F, H, I)
By sss_anti_similarity_v0 on H, I, E, H, I, F we get anti_similar_triangles(E, H, I, F, H, I)
By collinear_definition on D, H, midpoint(E, F) we get H in Line(D, midpoint(E, F)), midpoint(E, F) in Line(D, H), Line(D, H) == Line(D, midpoint(E, F)), 0 == 2 * angle(H, D, midpoint(E, F)) mod 360
By sas_anti_congruence on D, midpoint(E, F), F, D, midpoint(E, F), E we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sss_anti_similarity_v1 on H, I, F, H, I, E we get anti_similar_triangles(E, H, I, F, H, I)
By asa_anti_congruence on I, midpoint(E, F), F, I, midpoint(E, F), E we get anti_congruent_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By sas_anti_similarity on F, D, midpoint(E, F), E, D, midpoint(E, F) we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sss_anti_congruence_v0 on H, F, I, H, E, I we get anti_congruent_triangles(E, H, I, F, H, I)
By log_of_2_times_distance on D, C, midpoint(C, D), F we get log(distance(C, D)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(F, midpoint(C, D)))
By sas_similarity on E, midpoint(C, D), C, I, center(Circle(A, D, F)), F we get similar_triangles(C, E, midpoint(C, D), F, I, center(Circle(A, D, F)))
By sas_anti_similarity on E, I, midpoint(E, F), F, I, midpoint(E, F) we get anti_similar_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By sss_anti_congruence_v1 on H, I, F, H, I, E we get anti_congruent_triangles(E, H, I, F, H, I)
By collinear_definition on H, midpoint(E, F), D we get midpoint(E, F) in Line(D, H), D in Line(H, midpoint(E, F)), Line(D, H) == Line(H, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), H, D) mod 360
By collinear_definition on H, D, midpoint(E, F) we get D in Line(H, midpoint(E, F)), midpoint(E, F) in Line(D, H), Line(D, H) == Line(H, midpoint(E, F)), 0 == 2 * angle(D, H, midpoint(E, F)) mod 360
By sss_anti_similarity_v0 on H, I, E, H, I, F we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_congruence_v0 on H, I, E, H, I, F we get anti_congruent_triangles(E, H, I, F, H, I)
By aa_anti_similarity on F, midpoint(E, F), H, E, midpoint(E, F), H we get anti_similar_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By asa_anti_congruence on I, midpoint(E, F), E, I, midpoint(E, F), F we get anti_congruent_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By sss_anti_congruence_v1 on H, I, F, H, I, E we get anti_congruent_triangles(E, H, I, F, H, I)
By sss_anti_similarity_v1 on H, E, I, H, F, I we get anti_similar_triangles(E, H, I, F, H, I)
By aa_anti_similarity on F, C, midpoint(E, F), E, C, midpoint(E, F) we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_anti_similarity on E, I, F, F, center(Circle(A, D, F)), D we get anti_similar_triangles(D, F, center(Circle(A, D, F)), F, E, I)
By sas_anti_similarity on E, midpoint(E, F), D, F, midpoint(E, F), D we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By internal_angle_bisector_definition_v0 on I, midpoint(C, D), H, C we get angle(I, C, midpoint(C, D)) == angle(midpoint(C, D), C, H) mod 360
By sss_anti_congruence_v1 on E, I, H, F, I, H we get anti_congruent_triangles(E, H, I, F, H, I)
By internal_angle_bisector_definition_v0 on projection(C, h), center(Circle(A, D, F)), projection(C, h), D we get angle(center(Circle(A, D, F)), D, projection(C, h)) == angle(projection(C, h), D, center(Circle(A, D, F))) mod 360
By sss_anti_similarity_v1 on E, I, H, F, I, H we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_congruence_v0 on H, F, I, H, E, I we get anti_congruent_triangles(E, H, I, F, H, I)
By sss_anti_similarity_v0 on I, H, F, I, H, E we get anti_similar_triangles(E, H, I, F, H, I)
By sas_anti_congruence on F, midpoint(E, F), D, E, midpoint(E, F), D we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sss_anti_congruence_v1 on E, I, H, F, I, H we get anti_congruent_triangles(E, H, I, F, H, I)
By sss_anti_congruence_v0 on H, F, I, H, E, I we get anti_congruent_triangles(E, H, I, F, H, I)
By sss_anti_similarity_v1 on I, F, H, I, E, H we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_congruence_v1 on H, I, F, H, I, E we get anti_congruent_triangles(E, H, I, F, H, I)
By aa_anti_similarity on E, H, midpoint(E, F), F, H, midpoint(E, F) we get anti_similar_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By sas_anti_similarity on F, center(Circle(A, D, F)), D, E, I, F we get anti_similar_triangles(D, F, center(Circle(A, D, F)), F, E, I)
By sss_anti_similarity_v1 on F, H, I, E, H, I we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_congruence_v0 on I, E, H, I, F, H we get anti_congruent_triangles(E, H, I, F, H, I)
By sas_anti_similarity on F, midpoint(E, F), I, E, midpoint(E, F), I we get anti_similar_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By log_of_2_times_distance on D, C, E, midpoint(C, D) we get log(distance(C, D)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(E, midpoint(C, D)))
By sas_anti_similarity on C, midpoint(E, F), F, C, midpoint(E, F), E we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sss_anti_similarity_v0 on I, H, F, I, H, E we get anti_similar_triangles(E, H, I, F, H, I)
By sas_anti_congruence on E, midpoint(E, F), C, F, midpoint(E, F), C we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By internal_angle_bisector_definition_v0 on midpoint(C, D), H, midpoint(C, D), C we get angle(H, C, midpoint(C, D)) == angle(midpoint(C, D), C, H) mod 360
By sss_anti_congruence_v0 on E, H, I, F, H, I we get anti_congruent_triangles(E, H, I, F, H, I)
By sss_anti_congruence_v0 on F, I, H, E, I, H we get anti_congruent_triangles(E, H, I, F, H, I)
By sss_anti_congruence_v1 on H, E, I, H, F, I we get anti_congruent_triangles(E, H, I, F, H, I)
By sss_anti_congruence_v0 on E, H, I, F, H, I we get anti_congruent_triangles(E, H, I, F, H, I)
By sas_anti_similarity on H, midpoint(E, F), E, H, midpoint(E, F), F we get anti_similar_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By sas_anti_similarity on H, midpoint(E, F), F, H, midpoint(E, F), E we get anti_similar_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By collinear_definition on D, H, midpoint(C, D) we get H in Line(D, midpoint(C, D)), midpoint(C, D) in Line(D, H), Line(D, H) == Line(D, midpoint(C, D)), 0 == 2 * angle(H, D, midpoint(C, D)) mod 360
By sss_anti_congruence_v1 on I, F, H, I, E, H we get anti_congruent_triangles(E, H, I, F, H, I)
By internal_angle_bisector_definition_v0 on midpoint(C, D), H, midpoint(C, D), D we get angle(H, D, midpoint(C, D)) == angle(midpoint(C, D), D, H) mod 360
By sss_anti_congruence_v0 on I, H, F, I, H, E we get anti_congruent_triangles(E, H, I, F, H, I)
By sas_anti_congruence on F, I, H, E, I, H we get anti_congruent_triangles(E, H, I, F, H, I)
By sas_anti_similarity on F, I, H, E, I, H we get anti_similar_triangles(E, H, I, F, H, I)
By collinear_definition on midpoint(E, F), I, H we get I in Line(H, midpoint(E, F)), H in Line(I, midpoint(E, F)), Line(H, midpoint(E, F)) == Line(I, midpoint(E, F)), 0 == 2 * angle(I, midpoint(E, F), H) mod 360
By sas_anti_congruence on E, midpoint(E, F), H, F, midpoint(E, F), H we get anti_congruent_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By sss_anti_congruence_v0 on H, I, E, H, I, F we get anti_congruent_triangles(E, H, I, F, H, I)
By sss_anti_similarity_v0 on H, I, E, H, I, F we get anti_similar_triangles(E, H, I, F, H, I)
By asa_anti_congruence on D, midpoint(E, F), F, D, midpoint(E, F), E we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_anti_similarity on F, I, midpoint(E, F), E, I, midpoint(E, F) we get anti_similar_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By sss_anti_congruence_v1 on I, H, E, I, H, F we get anti_congruent_triangles(E, H, I, F, H, I)
By collinear_definition on C, midpoint(C, D), midpoint(E, F) we get midpoint(C, D) in Line(C, midpoint(E, F)), midpoint(E, F) in Line(C, midpoint(C, D)), Line(C, midpoint(C, D)) == Line(C, midpoint(E, F)), 0 == 2 * angle(midpoint(C, D), C, midpoint(E, F)) mod 360
By sss_anti_similarity_v1 on I, F, H, I, E, H we get anti_similar_triangles(E, H, I, F, H, I)
By collinear_definition on D, midpoint(E, F), midpoint(C, D) we get midpoint(E, F) in Line(D, midpoint(C, D)), midpoint(C, D) in Line(D, midpoint(E, F)), Line(D, midpoint(C, D)) == Line(D, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), D, midpoint(C, D)) mod 360
By sas_anti_congruence on H, I, E, H, I, F we get anti_congruent_triangles(E, H, I, F, H, I)
By sas_anti_similarity on E, D, F, F, center(Circle(A, D, F)), I we get anti_similar_triangles(D, E, F, center(Circle(A, D, F)), F, I)
By sss_anti_congruence_v0 on I, E, H, I, F, H we get anti_congruent_triangles(E, H, I, F, H, I)
By aa_anti_similarity on E, H, I, F, H, I we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_congruence_v0 on I, H, F, I, H, E we get anti_congruent_triangles(E, H, I, F, H, I)
By sss_anti_congruence_v0 on I, E, H, I, F, H we get anti_congruent_triangles(E, H, I, F, H, I)
By aa_anti_similarity on E, I, midpoint(E, F), F, I, midpoint(E, F) we get anti_similar_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By sas_anti_similarity on midpoint(E, F), C, F, midpoint(E, F), C, E we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_anti_similarity on D, midpoint(E, F), E, D, midpoint(E, F), F we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By asa_anti_congruence on midpoint(E, F), D, F, midpoint(E, F), D, E we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sss_anti_similarity_v0 on H, F, I, H, E, I we get anti_similar_triangles(E, H, I, F, H, I)
By internal_angle_bisector_definition_v0 on projection(C, h), center(Circle(A, D, F)), projection(C, h), A we get angle(center(Circle(A, D, F)), A, projection(C, h)) == angle(projection(C, h), A, center(Circle(A, D, F))) mod 360
By asa_anti_congruence on D, midpoint(E, F), E, D, midpoint(E, F), F we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_anti_similarity on midpoint(E, F), I, F, midpoint(E, F), I, E we get anti_similar_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By sas_similarity on F, center(Circle(A, D, F)), I, F, midpoint(C, D), C we get similar_triangles(C, F, midpoint(C, D), I, F, center(Circle(A, D, F)))
By internal_angle_bisector_definition_v0 on B, center(Circle(A, D, F)), C, A we get angle(B, A, center(Circle(A, D, F))) == angle(center(Circle(A, D, F)), A, C) mod 360
By sss_anti_congruence_v0 on I, H, F, I, H, E we get anti_congruent_triangles(E, H, I, F, H, I)
By sas_anti_congruence on E, H, I, F, H, I we get anti_congruent_triangles(E, H, I, F, H, I)
By asa_anti_congruence on H, midpoint(E, F), F, H, midpoint(E, F), E we get anti_congruent_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By sss_anti_congruence_v0 on H, F, I, H, E, I we get anti_congruent_triangles(E, H, I, F, H, I)
By aa_anti_similarity on E, midpoint(E, F), C, F, midpoint(E, F), C we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sss_anti_similarity_v0 on E, H, I, F, H, I we get anti_similar_triangles(E, H, I, F, H, I)
By sas_similarity on I, center(Circle(A, D, F)), F, E, H, A we get similar_triangles(A, E, H, F, I, center(Circle(A, D, F)))
By aa_anti_similarity on F, I, midpoint(E, F), E, I, midpoint(E, F) we get anti_similar_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By asa_anti_congruence on C, midpoint(E, F), F, C, midpoint(E, F), E we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_similarity on F, I, E, F, center(Circle(A, D, F)), D we get similar_triangles(D, F, center(Circle(A, D, F)), E, F, I)
By sss_anti_similarity_v0 on F, I, H, E, I, H we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_congruence_v1 on I, H, E, I, H, F we get anti_congruent_triangles(E, H, I, F, H, I)
By sas_anti_similarity on C, midpoint(E, F), E, C, midpoint(E, F), F we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_anti_similarity on I, center(Circle(A, D, F)), F, C, midpoint(C, D), E we get anti_similar_triangles(C, E, midpoint(C, D), I, F, center(Circle(A, D, F)))
By aa_anti_similarity on E, midpoint(E, F), H, F, midpoint(E, F), H we get anti_similar_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By sas_anti_similarity on midpoint(E, F), D, E, midpoint(E, F), D, F we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By collinear_definition on midpoint(E, F), H, I we get H in Line(I, midpoint(E, F)), I in Line(H, midpoint(E, F)), Line(H, midpoint(E, F)) == Line(I, midpoint(E, F)), 0 == 2 * angle(H, midpoint(E, F), I) mod 360
By sss_anti_congruence_v0 on E, H, I, F, H, I we get anti_congruent_triangles(E, H, I, F, H, I)
By collinear_definition on C, midpoint(E, F), midpoint(C, D) we get midpoint(E, F) in Line(C, midpoint(C, D)), midpoint(C, D) in Line(C, midpoint(E, F)), Line(C, midpoint(C, D)) == Line(C, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), C, midpoint(C, D)) mod 360
By collinear_definition on H, I, midpoint(E, F) we get I in Line(H, midpoint(E, F)), midpoint(E, F) in Line(H, I), Line(H, I) == Line(H, midpoint(E, F)), 0 == 2 * angle(I, H, midpoint(E, F)) mod 360
By sss_anti_similarity_v0 on I, H, F, I, H, E we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_congruence_v0 on H, F, I, H, E, I we get anti_congruent_triangles(E, H, I, F, H, I)
By sas_anti_congruence on F, midpoint(E, F), H, E, midpoint(E, F), H we get anti_congruent_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By sas_anti_similarity on F, C, midpoint(E, F), E, C, midpoint(E, F) we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sss_anti_similarity_v1 on F, H, I, E, H, I we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_similarity_v1 on H, I, F, H, I, E we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_similarity_v0 on F, I, H, E, I, H we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_similarity_v1 on E, I, H, F, I, H we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_similarity_v0 on E, H, I, F, H, I we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_similarity_v0 on H, F, I, H, E, I we get anti_similar_triangles(E, H, I, F, H, I)
By asa_anti_congruence on I, H, E, I, H, F we get anti_congruent_triangles(E, H, I, F, H, I)
By aa_anti_similarity on E, C, midpoint(E, F), F, C, midpoint(E, F) we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By reverse_direction on E, midpoint(E, F) we get 180 == direction(E, midpoint(E, F)) - direction(midpoint(E, F), E) mod 360
By sss_anti_congruence_v0 on I, E, H, I, F, H we get anti_congruent_triangles(E, H, I, F, H, I)
By sss_anti_congruence_v1 on H, E, I, H, F, I we get anti_congruent_triangles(E, H, I, F, H, I)
By internal_angle_bisector_definition_v0 on H, midpoint(C, D), D, C we get angle(H, C, midpoint(C, D)) == angle(midpoint(C, D), C, D) mod 360
By aa_anti_similarity on E, midpoint(E, F), D, F, midpoint(E, F), D we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By collinear_definition on C, H, midpoint(C, D) we get H in Line(C, midpoint(C, D)), midpoint(C, D) in Line(C, H), Line(C, H) == Line(C, midpoint(C, D)), 0 == 2 * angle(H, C, midpoint(C, D)) mod 360
By sas_similarity on E, H, A, I, center(Circle(A, D, F)), F we get similar_triangles(A, E, H, F, I, center(Circle(A, D, F)))
By sss_anti_congruence_v0 on F, I, H, E, I, H we get anti_congruent_triangles(E, H, I, F, H, I)
By reverse_direction on midpoint(E, F), C we get 180 == direction(midpoint(E, F), C) - direction(C, midpoint(E, F)) mod 360
By collinear_definition on D, midpoint(E, F), H we get midpoint(E, F) in Line(D, H), H in Line(D, midpoint(E, F)), Line(D, H) == Line(D, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), D, H) mod 360
By sas_anti_congruence on C, midpoint(E, F), E, C, midpoint(E, F), F we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sss_anti_similarity_v0 on F, I, H, E, I, H we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_congruence_v0 on H, I, E, H, I, F we get anti_congruent_triangles(E, H, I, F, H, I)
By aa_anti_similarity on F, H, I, E, H, I we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_congruence_v1 on F, H, I, E, H, I we get anti_congruent_triangles(E, H, I, F, H, I)
By sss_anti_similarity_v1 on F, H, I, E, H, I we get anti_similar_triangles(E, H, I, F, H, I)
By sas_anti_similarity on F, midpoint(E, F), H, E, midpoint(E, F), H we get anti_similar_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By sss_anti_congruence_v1 on F, H, I, E, H, I we get anti_congruent_triangles(E, H, I, F, H, I)
By sas_anti_similarity on F, midpoint(C, D), C, I, center(Circle(A, D, F)), F we get anti_similar_triangles(C, F, midpoint(C, D), F, I, center(Circle(A, D, F)))
By sss_anti_similarity_v0 on H, F, I, H, E, I we get anti_similar_triangles(E, H, I, F, H, I)
By sas_anti_similarity on F, midpoint(E, F), D, E, midpoint(E, F), D we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_anti_congruence on F, H, I, E, H, I we get anti_congruent_triangles(E, H, I, F, H, I)
By sss_anti_congruence_v0 on F, I, H, E, I, H we get anti_congruent_triangles(E, H, I, F, H, I)
By sss_anti_congruence_v1 on H, E, I, H, F, I we get anti_congruent_triangles(E, H, I, F, H, I)
By sss_anti_similarity_v0 on I, E, H, I, F, H we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_congruence_v0 on F, I, H, E, I, H we get anti_congruent_triangles(E, H, I, F, H, I)
By sss_anti_congruence_v0 on I, E, H, I, F, H we get anti_congruent_triangles(E, H, I, F, H, I)
By sas_anti_congruence on midpoint(E, F), H, E, midpoint(E, F), H, F we get anti_congruent_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By sss_anti_similarity_v0 on F, I, H, E, I, H we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_congruence_v1 on E, I, H, F, I, H we get anti_congruent_triangles(E, H, I, F, H, I)
By sss_anti_congruence_v1 on H, I, F, H, I, E we get anti_congruent_triangles(E, H, I, F, H, I)
By sss_anti_congruence_v1 on I, F, H, I, E, H we get anti_congruent_triangles(E, H, I, F, H, I)
By sss_anti_similarity_v1 on I, F, H, I, E, H we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_similarity_v1 on I, H, E, I, H, F we get anti_similar_triangles(E, H, I, F, H, I)
By reverse_direction on midpoint(E, F), D we get 180 == direction(midpoint(E, F), D) - direction(D, midpoint(E, F)) mod 360
By asa_anti_congruence on midpoint(E, F), H, F, midpoint(E, F), H, E we get anti_congruent_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By sss_anti_similarity_v0 on I, H, F, I, H, E we get anti_similar_triangles(E, H, I, F, H, I)
By aa_anti_similarity on F, H, midpoint(E, F), E, H, midpoint(E, F) we get anti_similar_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By sas_anti_congruence on midpoint(E, F), I, E, midpoint(E, F), I, F we get anti_congruent_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By internal_angle_bisector_definition_v0 on midpoint(C, D), midpoint(E, F), midpoint(C, D), D we get angle(midpoint(C, D), D, midpoint(E, F)) == angle(midpoint(E, F), D, midpoint(C, D)) mod 360
By between_imply_segment_sum on H, I, D we get distance(D, H) == distance(H, I) + distance(D, I)
By sas_similarity on E, I, F, D, center(Circle(A, D, F)), F we get similar_triangles(D, F, center(Circle(A, D, F)), E, F, I)
By asa_anti_congruence on midpoint(E, F), I, E, midpoint(E, F), I, F we get anti_congruent_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By sas_anti_congruence on H, midpoint(E, F), F, H, midpoint(E, F), E we get anti_congruent_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By reverse_direction on D, midpoint(E, F) we get 180 == direction(D, midpoint(E, F)) - direction(midpoint(E, F), D) mod 360
By sas_anti_similarity on midpoint(E, F), H, E, midpoint(E, F), H, F we get anti_similar_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By sss_anti_congruence_v0 on F, I, H, E, I, H we get anti_congruent_triangles(E, H, I, F, H, I)
By sss_anti_similarity_v0 on F, I, H, E, I, H we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_similarity_v0 on H, I, E, H, I, F we get anti_similar_triangles(E, H, I, F, H, I)
By sas_anti_congruence on E, I, H, F, I, H we get anti_congruent_triangles(E, H, I, F, H, I)
By sss_anti_congruence_v0 on I, E, H, I, F, H we get anti_congruent_triangles(E, H, I, F, H, I)
By sss_anti_congruence_v0 on E, H, I, F, H, I we get anti_congruent_triangles(E, H, I, F, H, I)
By sas_anti_similarity on F, center(Circle(A, D, F)), I, E, D, F we get anti_similar_triangles(D, E, F, center(Circle(A, D, F)), F, I)
By sss_anti_congruence_v1 on I, F, H, I, E, H we get anti_congruent_triangles(E, H, I, F, H, I)
By sas_anti_congruence on midpoint(E, F), H, F, midpoint(E, F), H, E we get anti_congruent_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By sss_anti_congruence_v1 on H, I, F, H, I, E we get anti_congruent_triangles(E, H, I, F, H, I)
By reverse_direction on midpoint(E, F), H we get 180 == direction(midpoint(E, F), H) - direction(H, midpoint(E, F)) mod 360
By sss_anti_similarity_v1 on H, I, F, H, I, E we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_congruence_v1 on I, H, E, I, H, F we get anti_congruent_triangles(E, H, I, F, H, I)
By asa_anti_congruence on I, H, F, I, H, E we get anti_congruent_triangles(E, H, I, F, H, I)
By sas_anti_similarity on midpoint(E, F), I, E, midpoint(E, F), I, F we get anti_similar_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By sss_anti_similarity_v0 on H, F, I, H, E, I we get anti_similar_triangles(E, H, I, F, H, I)
By sas_anti_similarity on F, H, I, E, H, I we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_similarity_v0 on H, I, E, H, I, F we get anti_similar_triangles(E, H, I, F, H, I)
By sas_anti_congruence on I, midpoint(E, F), E, I, midpoint(E, F), F we get anti_congruent_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By sas_anti_similarity on F, I, E, D, center(Circle(A, D, F)), F we get anti_similar_triangles(D, F, center(Circle(A, D, F)), F, E, I)
By sas_similarity on F, center(Circle(A, D, F)), I, C, midpoint(C, D), E we get similar_triangles(C, E, midpoint(C, D), F, I, center(Circle(A, D, F)))
By sas_anti_similarity on E, midpoint(E, F), H, F, midpoint(E, F), H we get anti_similar_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By collinear_definition on D, midpoint(C, D), H we get midpoint(C, D) in Line(D, H), H in Line(D, midpoint(C, D)), Line(D, H) == Line(D, midpoint(C, D)), 0 == 2 * angle(midpoint(C, D), D, H) mod 360
By sss_anti_congruence_v1 on H, E, I, H, F, I we get anti_congruent_triangles(E, H, I, F, H, I)
By sas_anti_congruence on F, midpoint(E, F), C, E, midpoint(E, F), C we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sss_anti_congruence_v1 on H, E, I, H, F, I we get anti_congruent_triangles(E, H, I, F, H, I)
By sas_anti_similarity on H, I, E, H, I, F we get anti_similar_triangles(E, H, I, F, H, I)
By asa_anti_congruence on H, I, F, H, I, E we get anti_congruent_triangles(E, H, I, F, H, I)
By reverse_direction on midpoint(E, F), E we get 180 == direction(midpoint(E, F), E) - direction(E, midpoint(E, F)) mod 360
By sas_anti_similarity on F, H, midpoint(E, F), E, H, midpoint(E, F) we get anti_similar_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By internal_angle_bisector_definition_v0 on F, center(Circle(A, D, F)), B, A we get angle(F, A, center(Circle(A, D, F))) == angle(center(Circle(A, D, F)), A, B) mod 360
By sss_anti_similarity_v0 on I, E, H, I, F, H we get anti_similar_triangles(E, H, I, F, H, I)
By aa_anti_similarity on F, I, H, E, I, H we get anti_similar_triangles(E, H, I, F, H, I)
By aa_anti_similarity on E, midpoint(E, F), I, F, midpoint(E, F), I we get anti_similar_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By asa_anti_congruence on H, I, E, H, I, F we get anti_congruent_triangles(E, H, I, F, H, I)
By sas_anti_similarity on F, D, E, I, center(Circle(A, D, F)), F we get anti_similar_triangles(D, E, F, center(Circle(A, D, F)), F, I)
By sss_anti_similarity_v0 on I, H, F, I, H, E we get anti_similar_triangles(E, H, I, F, H, I)
By sas_anti_congruence on H, I, F, H, I, E we get anti_congruent_triangles(E, H, I, F, H, I)
By sas_similarity on E, D, F, I, center(Circle(A, D, F)), F we get similar_triangles(D, E, F, center(Circle(A, D, F)), I, F)
By reverse_direction on F, midpoint(E, F) we get 180 == direction(F, midpoint(E, F)) - direction(midpoint(E, F), F) mod 360
By asa_anti_congruence on midpoint(E, F), H, E, midpoint(E, F), H, F we get anti_congruent_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By sas_anti_similarity on E, H, I, F, H, I we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_congruence_v0 on F, I, H, E, I, H we get anti_congruent_triangles(E, H, I, F, H, I)
By sss_anti_similarity_v1 on E, I, H, F, I, H we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_similarity_v1 on E, I, H, F, I, H we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_similarity_v0 on I, H, F, I, H, E we get anti_similar_triangles(E, H, I, F, H, I)
By aa_anti_similarity on F, D, midpoint(E, F), E, D, midpoint(E, F) we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_anti_similarity on E, D, midpoint(E, F), F, D, midpoint(E, F) we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sss_anti_similarity_v0 on I, E, H, I, F, H we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_similarity_v1 on I, F, H, I, E, H we get anti_similar_triangles(E, H, I, F, H, I)
By sas_anti_similarity on I, H, E, I, H, F we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_congruence_v1 on F, H, I, E, H, I we get anti_congruent_triangles(E, H, I, F, H, I)
By sss_anti_similarity_v1 on E, I, H, F, I, H we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_congruence_v1 on F, H, I, E, H, I we get anti_congruent_triangles(E, H, I, F, H, I)
By sas_similarity on D, center(Circle(A, D, F)), F, E, I, F we get similar_triangles(D, F, center(Circle(A, D, F)), E, F, I)
By aa_anti_similarity on F, midpoint(E, F), D, E, midpoint(E, F), D we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_anti_similarity on I, H, F, I, H, E we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_similarity_v0 on E, H, I, F, H, I we get anti_similar_triangles(E, H, I, F, H, I)
By sas_similarity on F, center(Circle(A, D, F)), I, A, H, E we get similar_triangles(A, E, H, F, I, center(Circle(A, D, F)))
By sss_anti_similarity_v1 on I, H, E, I, H, F we get anti_similar_triangles(E, H, I, F, H, I)
By sss_anti_similarity_v1 on I, H, E, I, H, F we get anti_similar_triangles(E, H, I, F, H, I)
By perpendicular_direction_conditions_v0_r on D, line_intersection(i, Line(E, I)), E, line_intersection(i, Line(E, I)) we get 180 == 2 * direction(D, line_intersection(i, Line(E, I))) - 2 * direction(E, line_intersection(i, Line(E, I))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(E, I)), B, line_intersection(i, Line(E, I)), E we get 180 == 2 * direction(line_intersection(i, Line(E, I)), B) - 2 * direction(line_intersection(i, Line(E, I)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(E, I)), D, E, line_intersection(i, Line(E, I)) we get 180 == 2 * direction(line_intersection(i, Line(E, I)), D) - 2 * direction(E, line_intersection(i, Line(E, I))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(i, Line(E, I)), line_intersection(i, Line(E, I)), B we get 180 == 2 * direction(E, line_intersection(i, Line(E, I))) - 2 * direction(line_intersection(i, Line(E, I)), B) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(C, D), I, D, C we get Line(C, I) == internal_angle_bisector(D, C, midpoint(C, D))
By perpendicular_direction_conditions_v0_r on E, line_intersection(i, Line(E, I)), D, line_intersection(i, Line(E, I)) we get 180 == 2 * direction(E, line_intersection(i, Line(E, I))) - 2 * direction(D, line_intersection(i, Line(E, I))) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(i, Line(E, I)), line_intersection(i, Line(E, I)), E we get 180 == 2 * direction(B, line_intersection(i, Line(E, I))) - 2 * direction(line_intersection(i, Line(E, I)), E) mod 360
By perpendicular_direction_conditions_v0_r on I, line_intersection(i, Line(E, I)), line_intersection(i, Line(E, I)), B we get 180 == 2 * direction(I, line_intersection(i, Line(E, I))) - 2 * direction(line_intersection(i, Line(E, I)), B) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(i, Line(E, I)), I, line_intersection(i, Line(E, I)) we get 180 == 2 * direction(D, line_intersection(i, Line(E, I))) - 2 * direction(I, line_intersection(i, Line(E, I))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(E, I)), B, line_intersection(i, Line(E, I)), I we get 180 == 2 * direction(line_intersection(i, Line(E, I)), B) - 2 * direction(line_intersection(i, Line(E, I)), I) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(i, Line(E, I)), E, line_intersection(i, Line(E, I)) we get 180 == 2 * direction(B, line_intersection(i, Line(E, I))) - 2 * direction(E, line_intersection(i, Line(E, I))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(E, I)), D, line_intersection(i, Line(E, I)), E we get 180 == 2 * direction(line_intersection(i, Line(E, I)), D) - 2 * direction(line_intersection(i, Line(E, I)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(E, I)), I, line_intersection(i, Line(E, I)), B we get 180 == 2 * direction(line_intersection(i, Line(E, I)), I) - 2 * direction(line_intersection(i, Line(E, I)), B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(E, I)), I, B, line_intersection(i, Line(E, I)) we get 180 == 2 * direction(line_intersection(i, Line(E, I)), I) - 2 * direction(B, line_intersection(i, Line(E, I))) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(i, Line(E, I)), line_intersection(i, Line(E, I)), I we get 180 == 2 * direction(D, line_intersection(i, Line(E, I))) - 2 * direction(line_intersection(i, Line(E, I)), I) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(i, Line(E, I)), line_intersection(i, Line(E, I)), D we get 180 == 2 * direction(E, line_intersection(i, Line(E, I))) - 2 * direction(line_intersection(i, Line(E, I)), D) mod 360
By external_angle_bisector_definition_v0_r on I, midpoint(C, D), C, D we get external_angle_bisector(C, D, I) == Line(D, midpoint(C, D))
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(E, I)), I, line_intersection(i, Line(E, I)), D we get 180 == 2 * direction(line_intersection(i, Line(E, I)), I) - 2 * direction(line_intersection(i, Line(E, I)), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(E, I)), D, line_intersection(i, Line(E, I)), I we get 180 == 2 * direction(line_intersection(i, Line(E, I)), D) - 2 * direction(line_intersection(i, Line(E, I)), I) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(E, I)), E, line_intersection(i, Line(E, I)), B we get 180 == 2 * direction(line_intersection(i, Line(E, I)), E) - 2 * direction(line_intersection(i, Line(E, I)), B) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(i, Line(E, I)), line_intersection(i, Line(E, I)), I we get 180 == 2 * direction(B, line_intersection(i, Line(E, I))) - 2 * direction(line_intersection(i, Line(E, I)), I) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(E, I)), B, E, line_intersection(i, Line(E, I)) we get 180 == 2 * direction(line_intersection(i, Line(E, I)), B) - 2 * direction(E, line_intersection(i, Line(E, I))) mod 360
By perpendicular_direction_conditions_v0_r on I, line_intersection(i, Line(E, I)), line_intersection(i, Line(E, I)), D we get 180 == 2 * direction(I, line_intersection(i, Line(E, I))) - 2 * direction(line_intersection(i, Line(E, I)), D) mod 360
By perpendicular_direction_conditions_v0_r on I, line_intersection(i, Line(E, I)), B, line_intersection(i, Line(E, I)) we get 180 == 2 * direction(I, line_intersection(i, Line(E, I))) - 2 * direction(B, line_intersection(i, Line(E, I))) mod 360
By perpendicular_direction_conditions_v0_r on B, line_intersection(i, Line(E, I)), I, line_intersection(i, Line(E, I)) we get 180 == 2 * direction(B, line_intersection(i, Line(E, I))) - 2 * direction(I, line_intersection(i, Line(E, I))) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(i, Line(E, I)), line_intersection(i, Line(E, I)), E we get 180 == 2 * direction(D, line_intersection(i, Line(E, I))) - 2 * direction(line_intersection(i, Line(E, I)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(E, I)), B, I, line_intersection(i, Line(E, I)) we get 180 == 2 * direction(line_intersection(i, Line(E, I)), B) - 2 * direction(I, line_intersection(i, Line(E, I))) mod 360
By perpendicular_direction_conditions_v0_r on I, line_intersection(i, Line(E, I)), D, line_intersection(i, Line(E, I)) we get 180 == 2 * direction(I, line_intersection(i, Line(E, I))) - 2 * direction(D, line_intersection(i, Line(E, I))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(i, Line(E, I)), B, line_intersection(i, Line(E, I)) we get 180 == 2 * direction(E, line_intersection(i, Line(E, I))) - 2 * direction(B, line_intersection(i, Line(E, I))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(E, I)), E, line_intersection(i, Line(E, I)), D we get 180 == 2 * direction(line_intersection(i, Line(E, I)), E) - 2 * direction(line_intersection(i, Line(E, I)), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(E, I)), E, D, line_intersection(i, Line(E, I)) we get 180 == 2 * direction(line_intersection(i, Line(E, I)), E) - 2 * direction(D, line_intersection(i, Line(E, I))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(E, I)), E, B, line_intersection(i, Line(E, I)) we get 180 == 2 * direction(line_intersection(i, Line(E, I)), E) - 2 * direction(B, line_intersection(i, Line(E, I))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(E, I)), I, D, line_intersection(i, Line(E, I)) we get 180 == 2 * direction(line_intersection(i, Line(E, I)), I) - 2 * direction(D, line_intersection(i, Line(E, I))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, Line(E, I)), D, I, line_intersection(i, Line(E, I)) we get 180 == 2 * direction(line_intersection(i, Line(E, I)), D) - 2 * direction(I, line_intersection(i, Line(E, I))) mod 360
By external_angle_bisector_definition_v0_r on I, midpoint(E, F), C, D we get external_angle_bisector(C, D, I) == Line(D, midpoint(E, F))
By reverse_direction on center(Circle(A, C, E)), C we get 180 == direction(center(Circle(A, C, E)), C) - direction(C, center(Circle(A, C, E))) mod 360
By internal_angle_bisector_definition_v0_r on E, C, F, midpoint(E, F) we get Line(C, midpoint(E, F)) == internal_angle_bisector(E, midpoint(E, F), F)
By external_angle_bisector_definition_v0_r on F, I, F, midpoint(E, F) we get Line(I, midpoint(E, F)) == external_angle_bisector(F, midpoint(E, F), F)
By external_angle_bisector_definition_v0_r on F, C, F, midpoint(E, F) we get Line(C, midpoint(E, F)) == external_angle_bisector(F, midpoint(E, F), F)
By external_angle_bisector_definition_v0_r on H, D, C, I we get Line(D, I) == external_angle_bisector(C, I, H)
By external_angle_bisector_definition_v0_r on H, A, H, I we get Line(A, I) == external_angle_bisector(H, I, H)
By collinear_definition on I, C, midpoint(C, D) we get C in Line(I, midpoint(C, D)), midpoint(C, D) in Line(C, I), Line(C, I) == Line(I, midpoint(C, D)), 0 == 2 * angle(C, I, midpoint(C, D)) mod 360
By internal_angle_bisector_definition_v0 on F, center(Circle(A, D, F)), A, G we get angle(F, G, center(Circle(A, D, F))) == angle(center(Circle(A, D, F)), G, A) mod 360
By perpendicular_angle_conditions_v0 on midpoint(C, D), I, orthocenter(A, C, D) we get angle(midpoint(C, D), I, orthocenter(A, C, D)) == orientation(I, orthocenter(A, C, D), midpoint(C, D)) mod 360
By collinear_definition on I, E, line_intersection(i, Line(E, I)) we get E in Line(I, line_intersection(i, Line(E, I))), line_intersection(i, Line(E, I)) in Line(E, I), Line(E, I) == Line(I, line_intersection(i, Line(E, I))), 0 == 2 * angle(E, I, line_intersection(i, Line(E, I))) mod 360
By external_angle_bisector_definition_v0_r on midpoint(C, D), I, H, D we get Line(D, I) == external_angle_bisector(H, D, midpoint(C, D))
By external_angle_bisector_definition_v0_r on I, H, C, D we get Line(D, H) == external_angle_bisector(C, D, I)
By external_angle_bisector_definition_v0_r on midpoint(C, D), C, H, D we get Line(C, D) == external_angle_bisector(H, D, midpoint(C, D))
By external_angle_bisector_definition_v0_r on D, F, D, midpoint(E, F) we get Line(F, midpoint(E, F)) == external_angle_bisector(D, midpoint(E, F), D)
By internal_angle_bisector_definition_v0_r on midpoint(E, F), I, midpoint(E, F), D we get Line(D, I) == internal_angle_bisector(midpoint(E, F), D, midpoint(E, F))
By external_angle_bisector_definition_v0_r on H, orthocenter(A, C, D), H, I we get external_angle_bisector(H, I, H) == Line(I, orthocenter(A, C, D))
By collinear_definition on H, G, center(Circle(A, D, F)) we get G in Line(H, center(Circle(A, D, F))), center(Circle(A, D, F)) in Line(G, H), Line(G, H) == Line(H, center(Circle(A, D, F))), 0 == 2 * angle(G, H, center(Circle(A, D, F))) mod 360
By external_angle_bisector_definition_v0_r on C, I, H, D we get Line(D, I) == external_angle_bisector(C, D, H)
By external_angle_bisector_definition_v0_r on I, C, midpoint(C, D), D we get Line(C, D) == external_angle_bisector(I, D, midpoint(C, D))
By external_angle_bisector_definition_v0 on A, center(Circle(A, D, F)), A, G we get 180 == angle(A, G, center(Circle(A, D, F))) + angle(A, G, center(Circle(A, D, F))) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(E, F), E, midpoint(E, F), F we get Line(E, F) == internal_angle_bisector(midpoint(E, F), F, midpoint(E, F))
By external_angle_bisector_definition_v0_r on F, D, F, midpoint(E, F) we get Line(D, midpoint(E, F)) == external_angle_bisector(F, midpoint(E, F), F)
By external_angle_bisector_definition_v0_r on I, E, I, midpoint(E, F) we get Line(E, midpoint(E, F)) == external_angle_bisector(I, midpoint(E, F), I)
By isosceles_triangle_midpoint on H, E, A we get midpoint(A, E) in median(H, A, E)
By collinear_definition on midpoint(E, F), midpoint(C, D), H we get midpoint(C, D) in Line(H, midpoint(E, F)), H in Line(midpoint(C, D), midpoint(E, F)), Line(H, midpoint(E, F)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(midpoint(C, D), midpoint(E, F), H) mod 360
By external_angle_bisector_definition_v0_r on D, C, H, I we get Line(C, I) == external_angle_bisector(D, I, H)
By collinear_definition on D, line_intersection(i, Line(E, I)), B we get line_intersection(i, Line(E, I)) in Line(B, D), B in Line(D, line_intersection(i, Line(E, I))), Line(B, D) == Line(D, line_intersection(i, Line(E, I))), 0 == 2 * angle(line_intersection(i, Line(E, I)), D, B) mod 360
By perpendicular_angle_conditions_v0 on center(Circle(A, D, F)), G, F we get angle(center(Circle(A, D, F)), G, F) == orientation(F, center(Circle(A, D, F)), G) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(C, D), I, C, D we get Line(D, I) == internal_angle_bisector(C, D, midpoint(C, D))
By internal_angle_bisector_definition_v0_r on F, midpoint(E, F), F, E we get internal_angle_bisector(F, E, F) == Line(E, midpoint(E, F))
By external_angle_bisector_definition_v0_r on H, F, H, midpoint(E, F) we get Line(F, midpoint(E, F)) == external_angle_bisector(H, midpoint(E, F), H)
By collinear_definition on G, center(Circle(A, D, F)), H we get center(Circle(A, D, F)) in Line(G, H), H in Line(G, center(Circle(A, D, F))), Line(G, H) == Line(G, center(Circle(A, D, F))), 0 == 2 * angle(center(Circle(A, D, F)), G, H) mod 360
By collinear_definition on H, midpoint(E, F), midpoint(C, D) we get midpoint(E, F) in Line(H, midpoint(C, D)), midpoint(C, D) in Line(H, midpoint(E, F)), Line(H, midpoint(C, D)) == Line(H, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), H, midpoint(C, D)) mod 360
By internal_angle_bisector_definition_v0_r on C, I, C, H we get Line(H, I) == internal_angle_bisector(C, H, C)
By collinear_definition on I, midpoint(C, D), H we get midpoint(C, D) in Line(H, I), H in Line(I, midpoint(C, D)), Line(H, I) == Line(I, midpoint(C, D)), 0 == 2 * angle(midpoint(C, D), I, H) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(E, F), D, midpoint(E, F), I we get Line(D, I) == internal_angle_bisector(midpoint(E, F), I, midpoint(E, F))
By external_angle_bisector_definition_v0_r on midpoint(E, F), A, midpoint(E, F), I we get Line(A, I) == external_angle_bisector(midpoint(E, F), I, midpoint(E, F))
By internal_angle_bisector_definition_v0_r on D, C, I, H we get Line(C, H) == internal_angle_bisector(D, H, I)
By external_angle_bisector_definition_v0_r on E, C, E, midpoint(E, F) we get Line(C, midpoint(E, F)) == external_angle_bisector(E, midpoint(E, F), E)
By perpendicular_angle_conditions_v0 on C, G, center(Circle(A, D, F)) we get angle(C, G, center(Circle(A, D, F))) == orientation(C, G, center(Circle(A, D, F))) mod 360
By external_angle_bisector_definition_v0_r on C, F, C, midpoint(E, F) we get Line(F, midpoint(E, F)) == external_angle_bisector(C, midpoint(E, F), C)
By internal_angle_bisector_definition_v0_r on C, A, H, I we get Line(A, I) == internal_angle_bisector(C, I, H)
By internal_angle_bisector_definition_v0_r on H, orthocenter(A, C, D), C, I we get internal_angle_bisector(C, I, H) == Line(I, orthocenter(A, C, D))
By collinear_definition on midpoint(E, F), I, midpoint(C, D) we get I in Line(midpoint(C, D), midpoint(E, F)), midpoint(C, D) in Line(I, midpoint(E, F)), Line(I, midpoint(E, F)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(I, midpoint(E, F), midpoint(C, D)) mod 360
By external_angle_bisector_definition_v0 on C, center(Circle(A, D, F)), C, G we get 180 == angle(C, G, center(Circle(A, D, F))) + angle(C, G, center(Circle(A, D, F))) mod 360
By internal_angle_bisector_definition_v0_r on H, C, H, I we get Line(C, I) == internal_angle_bisector(H, I, H)
By internal_angle_bisector_definition_v0_r on C, midpoint(E, F), C, H we get internal_angle_bisector(C, H, C) == Line(H, midpoint(E, F))
By external_angle_bisector_definition_v0_r on C, E, C, midpoint(E, F) we get Line(E, midpoint(E, F)) == external_angle_bisector(C, midpoint(E, F), C)
By internal_angle_bisector_definition_v0 on F, I, E, midpoint(C, D) we get angle(F, midpoint(C, D), I) == angle(I, midpoint(C, D), E) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(E, F), C, midpoint(E, F), D we get Line(C, D) == internal_angle_bisector(midpoint(E, F), D, midpoint(E, F))
By external_angle_bisector_definition_v0 on C, center(Circle(A, D, F)), F, G we get 180 == angle(C, G, center(Circle(A, D, F))) + angle(F, G, center(Circle(A, D, F))) mod 360
By perpendicular_angle_conditions_v0 on midpoint(C, D), I, A we get angle(midpoint(C, D), I, A) == orientation(A, midpoint(C, D), I) mod 360
By internal_angle_bisector_definition_v0 on C, midpoint(C, D), C, I we get angle(C, I, midpoint(C, D)) == angle(midpoint(C, D), I, C) mod 360
By external_angle_bisector_definition_v0 on F, center(Circle(A, D, F)), F, G we get 180 == angle(F, G, center(Circle(A, D, F))) + angle(F, G, center(Circle(A, D, F))) mod 360
By internal_angle_bisector_definition_v0 on D, I, D, midpoint(C, D) we get angle(D, midpoint(C, D), I) == angle(I, midpoint(C, D), D) mod 360
By external_angle_bisector_definition_v0_r on E, I, E, midpoint(E, F) we get Line(I, midpoint(E, F)) == external_angle_bisector(E, midpoint(E, F), E)
By collinear_definition on I, H, midpoint(C, D) we get H in Line(I, midpoint(C, D)), midpoint(C, D) in Line(H, I), Line(H, I) == Line(I, midpoint(C, D)), 0 == 2 * angle(H, I, midpoint(C, D)) mod 360
By collinear_definition on midpoint(E, F), midpoint(C, D), C we get midpoint(C, D) in Line(C, midpoint(E, F)), C in Line(midpoint(C, D), midpoint(E, F)), Line(C, midpoint(E, F)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(midpoint(C, D), midpoint(E, F), C) mod 360
By external_angle_bisector_definition_v0_r on F, H, F, midpoint(E, F) we get Line(H, midpoint(E, F)) == external_angle_bisector(F, midpoint(E, F), F)
By internal_angle_bisector_definition_v0_r on F, I, E, midpoint(E, F) we get Line(I, midpoint(E, F)) == internal_angle_bisector(E, midpoint(E, F), F)
By collinear_definition on H, C, midpoint(C, D) we get C in Line(H, midpoint(C, D)), midpoint(C, D) in Line(C, H), Line(C, H) == Line(H, midpoint(C, D)), 0 == 2 * angle(C, H, midpoint(C, D)) mod 360
By log_of_2_times_distance on E, A, E, midpoint(A, E) we get log(distance(A, E)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(E, midpoint(A, E)))
By external_angle_bisector_definition_v0_r on E, D, E, midpoint(E, F) we get Line(D, midpoint(E, F)) == external_angle_bisector(E, midpoint(E, F), E)
By collinear_definition on A, E, midpoint(A, E) we get E in Line(A, midpoint(A, E)), midpoint(A, E) in Line(A, E), Line(A, E) == Line(A, midpoint(A, E)), 0 == 2 * angle(E, A, midpoint(A, E)) mod 360
By internal_angle_bisector_definition_v0_r on I, C, H, D we get Line(C, D) == internal_angle_bisector(H, D, I)
By external_angle_bisector_definition_v0_r on I, F, I, midpoint(E, F) we get Line(F, midpoint(E, F)) == external_angle_bisector(I, midpoint(E, F), I)
By internal_angle_bisector_definition_v0 on F, H, E, midpoint(C, D) we get angle(F, midpoint(C, D), H) == angle(H, midpoint(C, D), E) mod 360
By internal_angle_bisector_definition_v0_r on E, H, F, midpoint(E, F) we get Line(H, midpoint(E, F)) == internal_angle_bisector(E, midpoint(E, F), F)
By external_angle_bisector_definition_v0_r on H, E, H, midpoint(E, F) we get Line(E, midpoint(E, F)) == external_angle_bisector(H, midpoint(E, F), H)
By external_angle_bisector_definition_v0_r on midpoint(E, F), orthocenter(A, C, D), midpoint(E, F), I we get Line(I, orthocenter(A, C, D)) == external_angle_bisector(midpoint(E, F), I, midpoint(E, F))
By internal_angle_bisector_definition_v0 on A, center(Circle(A, D, F)), F, G we get angle(A, G, center(Circle(A, D, F))) == angle(center(Circle(A, D, F)), G, F) mod 360
By internal_angle_bisector_definition_v0 on A, G, F, center(Circle(A, D, F)) we get angle(A, center(Circle(A, D, F)), G) == angle(G, center(Circle(A, D, F)), F) mod 360
By internal_angle_bisector_definition_v0_r on center(Circle(A, D, F)), D, center(Circle(A, D, F)), A we get Line(A, D) == internal_angle_bisector(center(Circle(A, D, F)), A, center(Circle(A, D, F)))
By collinear_definition on midpoint(C, D), midpoint(E, F), C we get midpoint(E, F) in Line(C, midpoint(C, D)), C in Line(midpoint(C, D), midpoint(E, F)), Line(C, midpoint(C, D)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), midpoint(C, D), C) mod 360
By internal_angle_bisector_definition_v0_r on C, D, C, midpoint(E, F) we get Line(D, midpoint(E, F)) == internal_angle_bisector(C, midpoint(E, F), C)
By internal_angle_bisector_definition_v0 on F, center(Circle(A, D, F)), A, H we get angle(F, H, center(Circle(A, D, F))) == angle(center(Circle(A, D, F)), H, A) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(E, F), I, midpoint(E, F), C we get Line(C, I) == internal_angle_bisector(midpoint(E, F), C, midpoint(E, F))
By collinear_definition on E, I, line_intersection(i, Line(E, I)) we get I in Line(E, line_intersection(i, Line(E, I))), line_intersection(i, Line(E, I)) in Line(E, I), Line(E, I) == Line(E, line_intersection(i, Line(E, I))), 0 == 2 * angle(I, E, line_intersection(i, Line(E, I))) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(C, D), I, H, C we get Line(C, I) == internal_angle_bisector(H, C, midpoint(C, D))
By log_of_2_times_distance on A, E, midpoint(A, E), A we get log(distance(A, E)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(A, midpoint(A, E)))
By collinear_definition on midpoint(C, D), C, H we get C in Line(H, midpoint(C, D)), H in Line(C, midpoint(C, D)), Line(C, midpoint(C, D)) == Line(H, midpoint(C, D)), 0 == 2 * angle(C, midpoint(C, D), H) mod 360
By collinear_definition on H, midpoint(C, D), D we get midpoint(C, D) in Line(D, H), D in Line(H, midpoint(C, D)), Line(D, H) == Line(H, midpoint(C, D)), 0 == 2 * angle(midpoint(C, D), H, D) mod 360
By collinear_definition on G, H, center(Circle(A, D, F)) we get H in Line(G, center(Circle(A, D, F))), center(Circle(A, D, F)) in Line(G, H), Line(G, H) == Line(G, center(Circle(A, D, F))), 0 == 2 * angle(H, G, center(Circle(A, D, F))) mod 360
By internal_angle_bisector_definition_v0_r on E, H, A, center(Circle(A, C, E)) we get Line(H, center(Circle(A, C, E))) == internal_angle_bisector(A, center(Circle(A, C, E)), E)
By perpendicular_angle_conditions_v0 on A, G, center(Circle(A, D, F)) we get angle(A, G, center(Circle(A, D, F))) == orientation(A, G, center(Circle(A, D, F))) mod 360
By collinear_definition on midpoint(E, F), C, midpoint(C, D) we get C in Line(midpoint(C, D), midpoint(E, F)), midpoint(C, D) in Line(C, midpoint(E, F)), Line(C, midpoint(E, F)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(C, midpoint(E, F), midpoint(C, D)) mod 360
By internal_angle_bisector_definition_v0_r on C, D, I, H we get Line(D, H) == internal_angle_bisector(C, H, I)
By collinear_definition on midpoint(E, F), midpoint(C, D), I we get midpoint(C, D) in Line(I, midpoint(E, F)), I in Line(midpoint(C, D), midpoint(E, F)), Line(I, midpoint(E, F)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(midpoint(C, D), midpoint(E, F), I) mod 360
By collinear_definition on H, midpoint(C, D), midpoint(E, F) we get midpoint(C, D) in Line(H, midpoint(E, F)), midpoint(E, F) in Line(H, midpoint(C, D)), Line(H, midpoint(C, D)) == Line(H, midpoint(E, F)), 0 == 2 * angle(midpoint(C, D), H, midpoint(E, F)) mod 360
By right_triangle_circumcenter_v1 on C, E, D we get midpoint(C, D) == circumcenter(C, D, E)
By internal_angle_bisector_definition_v0_r on midpoint(E, F), C, midpoint(E, F), H we get Line(C, H) == internal_angle_bisector(midpoint(E, F), H, midpoint(E, F))
By collinear_definition on H, midpoint(C, D), C we get midpoint(C, D) in Line(C, H), C in Line(H, midpoint(C, D)), Line(C, H) == Line(H, midpoint(C, D)), 0 == 2 * angle(midpoint(C, D), H, C) mod 360
By internal_angle_bisector_definition_v0 on C, center(Circle(A, D, F)), A, G we get angle(C, G, center(Circle(A, D, F))) == angle(center(Circle(A, D, F)), G, A) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(C, D), D, H, C we get Line(C, D) == internal_angle_bisector(H, C, midpoint(C, D))
By perpendicular_angle_conditions_v0 on orthocenter(A, C, D), I, midpoint(C, D) we get angle(orthocenter(A, C, D), I, midpoint(C, D)) == orientation(I, midpoint(C, D), orthocenter(A, C, D)) mod 360
By external_angle_bisector_definition_v0_r on D, E, D, midpoint(E, F) we get Line(E, midpoint(E, F)) == external_angle_bisector(D, midpoint(E, F), D)
By external_angle_bisector_definition_v0_r on E, H, E, midpoint(E, F) we get Line(H, midpoint(E, F)) == external_angle_bisector(E, midpoint(E, F), E)
By internal_angle_bisector_definition_v0_r on H, D, H, I we get Line(D, I) == internal_angle_bisector(H, I, H)
By internal_angle_bisector_definition_v0 on A, line_intersection(i, Line(E, I)), C, B we get angle(A, B, line_intersection(i, Line(E, I))) == angle(line_intersection(i, Line(E, I)), B, C) mod 360
By internal_angle_bisector_definition_v0 on D, midpoint(C, D), D, I we get angle(D, I, midpoint(C, D)) == angle(midpoint(C, D), I, D) mod 360
By collinear_definition on I, midpoint(C, D), midpoint(E, F) we get midpoint(C, D) in Line(I, midpoint(E, F)), midpoint(E, F) in Line(I, midpoint(C, D)), Line(I, midpoint(C, D)) == Line(I, midpoint(E, F)), 0 == 2 * angle(midpoint(C, D), I, midpoint(E, F)) mod 360
By collinear_definition on D, B, line_intersection(i, Line(E, I)) we get B in Line(D, line_intersection(i, Line(E, I))), line_intersection(i, Line(E, I)) in Line(B, D), Line(B, D) == Line(D, line_intersection(i, Line(E, I))), 0 == 2 * angle(B, D, line_intersection(i, Line(E, I))) mod 360
By internal_angle_bisector_definition_v0_r on I, D, I, midpoint(E, F) we get Line(D, midpoint(E, F)) == internal_angle_bisector(I, midpoint(E, F), I)
By collinear_definition on midpoint(E, F), H, midpoint(C, D) we get H in Line(midpoint(C, D), midpoint(E, F)), midpoint(C, D) in Line(H, midpoint(E, F)), Line(H, midpoint(E, F)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(H, midpoint(E, F), midpoint(C, D)) mod 360
By internal_angle_bisector_definition_v0_r on C, D, C, H we get Line(D, H) == internal_angle_bisector(C, H, C)
By internal_angle_bisector_definition_v0_r on H, C, H, midpoint(E, F) we get Line(C, midpoint(E, F)) == internal_angle_bisector(H, midpoint(E, F), H)
By internal_angle_bisector_definition_v0_r on D, I, D, midpoint(E, F) we get Line(I, midpoint(E, F)) == internal_angle_bisector(D, midpoint(E, F), D)
By internal_angle_bisector_definition_v0_r on D, A, H, I we get Line(A, I) == internal_angle_bisector(D, I, H)
By perpendicular_angle_conditions_v0 on midpoint(C, D), midpoint(E, F), E we get angle(midpoint(C, D), midpoint(E, F), E) == orientation(E, midpoint(C, D), midpoint(E, F)) mod 360
By external_angle_bisector_definition_v0 on orthocenter(A, C, D), midpoint(C, D), orthocenter(A, C, D), I we get 180 == angle(orthocenter(A, C, D), I, midpoint(C, D)) + angle(orthocenter(A, C, D), I, midpoint(C, D)) mod 360
By collinear_definition on midpoint(C, D), midpoint(E, F), D we get midpoint(E, F) in Line(D, midpoint(C, D)), D in Line(midpoint(C, D), midpoint(E, F)), Line(D, midpoint(C, D)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), midpoint(C, D), D) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(E, F), D, midpoint(E, F), C we get Line(C, D) == internal_angle_bisector(midpoint(E, F), C, midpoint(E, F))
By internal_angle_bisector_definition_v0 on F, midpoint(C, D), E, H we get angle(F, H, midpoint(C, D)) == angle(midpoint(C, D), H, E) mod 360
By right_triangle_circumcenter_v1 on D, F, C we get midpoint(C, D) == circumcenter(C, D, F)
By internal_angle_bisector_definition_v0 on E, H, F, midpoint(C, D) we get angle(E, midpoint(C, D), H) == angle(H, midpoint(C, D), F) mod 360
By collinear_definition on H, midpoint(C, D), I we get midpoint(C, D) in Line(H, I), I in Line(H, midpoint(C, D)), Line(H, I) == Line(H, midpoint(C, D)), 0 == 2 * angle(midpoint(C, D), H, I) mod 360
By external_angle_bisector_definition_v0 on A, midpoint(C, D), A, I we get 180 == angle(A, I, midpoint(C, D)) + angle(A, I, midpoint(C, D)) mod 360
By perpendicular_lines_draw_intersection on altitude(I, D, E), Line(D, E) we get exists(line_intersection(Line(D, E), altitude(I, D, E)))
By internal_angle_bisector_definition_v0 on E, midpoint(C, D), F, I we get angle(E, I, midpoint(C, D)) == angle(midpoint(C, D), I, F) mod 360
By reverse_direction on center(Circle(A, C, E)), A we get 180 == direction(center(Circle(A, C, E)), A) - direction(A, center(Circle(A, C, E))) mod 360
By collinear_definition on H, D, midpoint(C, D) we get D in Line(H, midpoint(C, D)), midpoint(C, D) in Line(D, H), Line(D, H) == Line(H, midpoint(C, D)), 0 == 2 * angle(D, H, midpoint(C, D)) mod 360
By internal_angle_bisector_definition_v0_r on D, I, D, H we get Line(H, I) == internal_angle_bisector(D, H, D)
By internal_angle_bisector_definition_v0 on E, midpoint(C, D), F, H we get angle(E, H, midpoint(C, D)) == angle(midpoint(C, D), H, F) mod 360
By internal_angle_bisector_definition_v0_r on F, D, E, midpoint(E, F) we get Line(D, midpoint(E, F)) == internal_angle_bisector(E, midpoint(E, F), F)
By internal_angle_bisector_definition_v0 on C, midpoint(E, F), C, midpoint(C, D) we get angle(C, midpoint(C, D), midpoint(E, F)) == angle(midpoint(E, F), midpoint(C, D), C) mod 360
By internal_angle_bisector_definition_v0_r on C, I, D, H we get Line(H, I) == internal_angle_bisector(C, H, D)
By internal_angle_bisector_definition_v0_r on midpoint(C, D), D, I, C we get Line(C, D) == internal_angle_bisector(I, C, midpoint(C, D))
By reverse_direction on center(Circle(A, C, E)), H we get 180 == direction(center(Circle(A, C, E)), H) - direction(H, center(Circle(A, C, E))) mod 360
By collinear_definition on I, midpoint(C, D), C we get midpoint(C, D) in Line(C, I), C in Line(I, midpoint(C, D)), Line(C, I) == Line(I, midpoint(C, D)), 0 == 2 * angle(midpoint(C, D), I, C) mod 360
By collinear_definition on midpoint(C, D), H, D we get H in Line(D, midpoint(C, D)), D in Line(H, midpoint(C, D)), Line(D, midpoint(C, D)) == Line(H, midpoint(C, D)), 0 == 2 * angle(H, midpoint(C, D), D) mod 360
By perpendicular_bisector_properties on A, E we get perpendicular(Line(A, E), perpendicular_bisector(A, E)), midpoint(A, E) == line_intersection(Line(A, E), perpendicular_bisector(A, E))
By reverse_direction on center(Circle(A, C, E)), E we get 180 == direction(center(Circle(A, C, E)), E) - direction(E, center(Circle(A, C, E))) mod 360
By internal_angle_bisector_definition_v0 on E, line_intersection(i, Line(E, I)), A, B we get angle(E, B, line_intersection(i, Line(E, I))) == angle(line_intersection(i, Line(E, I)), B, A) mod 360
By internal_angle_bisector_definition_v0 on C, H, C, midpoint(C, D) we get angle(C, midpoint(C, D), H) == angle(H, midpoint(C, D), C) mod 360
By collinear_definition on I, D, midpoint(C, D) we get D in Line(I, midpoint(C, D)), midpoint(C, D) in Line(D, I), Line(D, I) == Line(I, midpoint(C, D)), 0 == 2 * angle(D, I, midpoint(C, D)) mod 360
By collinear_definition on H, center(Circle(A, D, F)), G we get center(Circle(A, D, F)) in Line(G, H), G in Line(H, center(Circle(A, D, F))), Line(G, H) == Line(H, center(Circle(A, D, F))), 0 == 2 * angle(center(Circle(A, D, F)), H, G) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(E, F), F, midpoint(E, F), E we get Line(E, F) == internal_angle_bisector(midpoint(E, F), E, midpoint(E, F))
By perpendicular_angle_conditions_v0 on E, midpoint(E, F), midpoint(C, D) we get angle(E, midpoint(E, F), midpoint(C, D)) == orientation(E, midpoint(E, F), midpoint(C, D)) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(E, F), C, midpoint(E, F), I we get Line(C, I) == internal_angle_bisector(midpoint(E, F), I, midpoint(E, F))
By internal_angle_bisector_definition_v0_r on C, I, C, midpoint(E, F) we get Line(I, midpoint(E, F)) == internal_angle_bisector(C, midpoint(E, F), C)
By internal_angle_bisector_definition_v0_r on D, midpoint(E, F), C, I we get internal_angle_bisector(C, I, D) == Line(I, midpoint(E, F))
By collinear_definition on midpoint(C, D), I, C we get I in Line(C, midpoint(C, D)), C in Line(I, midpoint(C, D)), Line(C, midpoint(C, D)) == Line(I, midpoint(C, D)), 0 == 2 * angle(I, midpoint(C, D), C) mod 360
By internal_angle_bisector_definition_v0 on C, line_intersection(i, Line(E, I)), A, B we get angle(C, B, line_intersection(i, Line(E, I))) == angle(line_intersection(i, Line(E, I)), B, A) mod 360
By collinear_definition on E, A, midpoint(A, E) we get A in Line(E, midpoint(A, E)), midpoint(A, E) in Line(A, E), Line(A, E) == Line(E, midpoint(A, E)), 0 == 2 * angle(A, E, midpoint(A, E)) mod 360
By perpendicular_angle_conditions_v0 on midpoint(C, D), midpoint(E, F), F we get angle(midpoint(C, D), midpoint(E, F), F) == orientation(F, midpoint(C, D), midpoint(E, F)) mod 360
By collinear_definition on B, D, line_intersection(i, Line(E, I)) we get D in Line(B, line_intersection(i, Line(E, I))), line_intersection(i, Line(E, I)) in Line(B, D), Line(B, D) == Line(B, line_intersection(i, Line(E, I))), 0 == 2 * angle(D, B, line_intersection(i, Line(E, I))) mod 360
By isosceles_triangle_midpoint on center(Circle(A, C, E)), A, E we get midpoint(A, E) in median(center(Circle(A, C, E)), A, E)
By internal_angle_bisector_definition_v0_r on I, D, I, H we get Line(D, H) == internal_angle_bisector(I, H, I)
By internal_angle_bisector_definition_v0 on F, midpoint(C, D), E, I we get angle(F, I, midpoint(C, D)) == angle(midpoint(C, D), I, E) mod 360
By collinear_definition on B, line_intersection(i, Line(E, I)), D we get line_intersection(i, Line(E, I)) in Line(B, D), D in Line(B, line_intersection(i, Line(E, I))), Line(B, D) == Line(B, line_intersection(i, Line(E, I))), 0 == 2 * angle(line_intersection(i, Line(E, I)), B, D) mod 360
By collinear_definition on E, midpoint(A, E), A we get midpoint(A, E) in Line(A, E), A in Line(E, midpoint(A, E)), Line(A, E) == Line(E, midpoint(A, E)), 0 == 2 * angle(midpoint(A, E), E, A) mod 360
By internal_angle_bisector_definition_v0_r on E, F, E, midpoint(E, F) we get Line(F, midpoint(E, F)) == internal_angle_bisector(E, midpoint(E, F), E)
By internal_angle_bisector_definition_v0 on D, midpoint(E, F), D, midpoint(C, D) we get angle(D, midpoint(C, D), midpoint(E, F)) == angle(midpoint(E, F), midpoint(C, D), D) mod 360
By collinear_definition on midpoint(C, D), H, C we get H in Line(C, midpoint(C, D)), C in Line(H, midpoint(C, D)), Line(C, midpoint(C, D)) == Line(H, midpoint(C, D)), 0 == 2 * angle(H, midpoint(C, D), C) mod 360
By perpendicular_angle_conditions_v0 on F, G, center(Circle(A, D, F)) we get angle(F, G, center(Circle(A, D, F))) == orientation(F, G, center(Circle(A, D, F))) mod 360
By internal_angle_bisector_definition_v0_r on H, C, H, D we get Line(C, D) == internal_angle_bisector(H, D, H)
By internal_angle_bisector_definition_v0 on E, I, F, midpoint(C, D) we get angle(E, midpoint(C, D), I) == angle(I, midpoint(C, D), F) mod 360
By collinear_definition on midpoint(E, F), D, midpoint(C, D) we get D in Line(midpoint(C, D), midpoint(E, F)), midpoint(C, D) in Line(D, midpoint(E, F)), Line(D, midpoint(E, F)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(D, midpoint(E, F), midpoint(C, D)) mod 360
By collinear_definition on I, midpoint(E, F), midpoint(C, D) we get midpoint(E, F) in Line(I, midpoint(C, D)), midpoint(C, D) in Line(I, midpoint(E, F)), Line(I, midpoint(C, D)) == Line(I, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), I, midpoint(C, D)) mod 360
By internal_angle_bisector_definition_v0_r on E, midpoint(E, F), E, F we get internal_angle_bisector(E, F, E) == Line(F, midpoint(E, F))
By internal_angle_bisector_definition_v0_r on F, E, F, midpoint(E, F) we get Line(E, midpoint(E, F)) == internal_angle_bisector(F, midpoint(E, F), F)
By internal_angle_bisector_definition_v0_r on C, H, C, midpoint(E, F) we get Line(H, midpoint(E, F)) == internal_angle_bisector(C, midpoint(E, F), C)
By perpendicular_angle_conditions_v0 on center(Circle(A, D, F)), G, C we get angle(center(Circle(A, D, F)), G, C) == orientation(C, center(Circle(A, D, F)), G) mod 360
By internal_angle_bisector_definition_v0_r on H, I, H, D we get Line(D, I) == internal_angle_bisector(H, D, H)
By internal_angle_bisector_definition_v0_r on D, C, D, H we get Line(C, H) == internal_angle_bisector(D, H, D)
By perpendicular_angle_conditions_v0 on center(Circle(A, D, F)), G, A we get angle(center(Circle(A, D, F)), G, A) == orientation(A, center(Circle(A, D, F)), G) mod 360
By internal_angle_bisector_definition_v0_r on D, H, C, I we get Line(H, I) == internal_angle_bisector(C, I, D)
By perpendicular_angle_conditions_v0 on A, I, midpoint(C, D) we get angle(A, I, midpoint(C, D)) == orientation(A, I, midpoint(C, D)) mod 360
By internal_angle_bisector_definition_v0 on C, I, C, midpoint(C, D) we get angle(C, midpoint(C, D), I) == angle(I, midpoint(C, D), C) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(E, F), H, midpoint(E, F), C we get Line(C, H) == internal_angle_bisector(midpoint(E, F), C, midpoint(E, F))
By internal_angle_bisector_definition_v0_r on H, orthocenter(A, C, D), D, I we get internal_angle_bisector(D, I, H) == Line(I, orthocenter(A, C, D))
By internal_angle_bisector_definition_v0 on D, H, D, midpoint(C, D) we get angle(D, midpoint(C, D), H) == angle(H, midpoint(C, D), D) mod 360
By internal_angle_bisector_definition_v0 on A, center(Circle(A, D, F)), C, G we get angle(A, G, center(Circle(A, D, F))) == angle(center(Circle(A, D, F)), G, C) mod 360
By collinear_definition on H, I, midpoint(C, D) we get I in Line(H, midpoint(C, D)), midpoint(C, D) in Line(H, I), Line(H, I) == Line(H, midpoint(C, D)), 0 == 2 * angle(I, H, midpoint(C, D)) mod 360
By collinear_definition on E, line_intersection(i, Line(E, I)), I we get line_intersection(i, Line(E, I)) in Line(E, I), I in Line(E, line_intersection(i, Line(E, I))), Line(E, I) == Line(E, line_intersection(i, Line(E, I))), 0 == 2 * angle(line_intersection(i, Line(E, I)), E, I) mod 360
By internal_angle_bisector_definition_v0 on F, midpoint(E, F), E, midpoint(C, D) we get angle(F, midpoint(C, D), midpoint(E, F)) == angle(midpoint(E, F), midpoint(C, D), E) mod 360
By collinear_definition on I, midpoint(C, D), D we get midpoint(C, D) in Line(D, I), D in Line(I, midpoint(C, D)), Line(D, I) == Line(I, midpoint(C, D)), 0 == 2 * angle(midpoint(C, D), I, D) mod 360
By internal_angle_bisector_definition_v0 on F, G, A, center(Circle(A, D, F)) we get angle(F, center(Circle(A, D, F)), G) == angle(G, center(Circle(A, D, F)), A) mod 360
By collinear_definition on midpoint(C, D), C, I we get C in Line(I, midpoint(C, D)), I in Line(C, midpoint(C, D)), Line(C, midpoint(C, D)) == Line(I, midpoint(C, D)), 0 == 2 * angle(C, midpoint(C, D), I) mod 360
By internal_angle_bisector_definition_v0_r on I, C, I, midpoint(E, F) we get Line(C, midpoint(E, F)) == internal_angle_bisector(I, midpoint(E, F), I)
By collinear_definition on A, midpoint(A, E), E we get midpoint(A, E) in Line(A, E), E in Line(A, midpoint(A, E)), Line(A, E) == Line(A, midpoint(A, E)), 0 == 2 * angle(midpoint(A, E), A, E) mod 360
By internal_angle_bisector_definition_v0 on A, center(Circle(A, D, F)), F, H we get angle(A, H, center(Circle(A, D, F))) == angle(center(Circle(A, D, F)), H, F) mod 360
By collinear_definition on midpoint(C, D), D, midpoint(E, F) we get D in Line(midpoint(C, D), midpoint(E, F)), midpoint(E, F) in Line(D, midpoint(C, D)), Line(D, midpoint(C, D)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(D, midpoint(C, D), midpoint(E, F)) mod 360
By collinear_definition on midpoint(C, D), I, D we get I in Line(D, midpoint(C, D)), D in Line(I, midpoint(C, D)), Line(D, midpoint(C, D)) == Line(I, midpoint(C, D)), 0 == 2 * angle(I, midpoint(C, D), D) mod 360
By internal_angle_bisector_definition_v0 on F, H, A, center(Circle(A, D, F)) we get angle(F, center(Circle(A, D, F)), H) == angle(H, center(Circle(A, D, F)), A) mod 360
By internal_angle_bisector_definition_v0_r on I, C, I, H we get Line(C, H) == internal_angle_bisector(I, H, I)
By internal_angle_bisector_definition_v0_r on center(Circle(A, D, F)), A, center(Circle(A, D, F)), D we get Line(A, D) == internal_angle_bisector(center(Circle(A, D, F)), D, center(Circle(A, D, F)))
By internal_angle_bisector_definition_v0 on E, midpoint(E, F), F, midpoint(C, D) we get angle(E, midpoint(C, D), midpoint(E, F)) == angle(midpoint(E, F), midpoint(C, D), F) mod 360
By collinear_definition on midpoint(C, D), D, H we get D in Line(H, midpoint(C, D)), H in Line(D, midpoint(C, D)), Line(D, midpoint(C, D)) == Line(H, midpoint(C, D)), 0 == 2 * angle(D, midpoint(C, D), H) mod 360
By internal_angle_bisector_definition_v0_r on D, C, D, midpoint(E, F) we get Line(C, midpoint(E, F)) == internal_angle_bisector(D, midpoint(E, F), D)
By internal_angle_bisector_definition_v0 on A, H, F, center(Circle(A, D, F)) we get angle(A, center(Circle(A, D, F)), H) == angle(H, center(Circle(A, D, F)), F) mod 360
By perpendicular_angle_conditions_v0 on F, midpoint(E, F), midpoint(C, D) we get angle(F, midpoint(E, F), midpoint(C, D)) == orientation(F, midpoint(E, F), midpoint(C, D)) mod 360
By collinear_definition on midpoint(E, F), midpoint(C, D), D we get midpoint(C, D) in Line(D, midpoint(E, F)), D in Line(midpoint(C, D), midpoint(E, F)), Line(D, midpoint(E, F)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(midpoint(C, D), midpoint(E, F), D) mod 360
By internal_angle_bisector_definition_v0 on A, line_intersection(i, Line(E, I)), E, B we get angle(A, B, line_intersection(i, Line(E, I))) == angle(line_intersection(i, Line(E, I)), B, E) mod 360
By collinear_definition on midpoint(C, D), D, I we get D in Line(I, midpoint(C, D)), I in Line(D, midpoint(C, D)), Line(D, midpoint(C, D)) == Line(I, midpoint(C, D)), 0 == 2 * angle(D, midpoint(C, D), I) mod 360
By collinear_definition on midpoint(C, D), C, midpoint(E, F) we get C in Line(midpoint(C, D), midpoint(E, F)), midpoint(E, F) in Line(C, midpoint(C, D)), Line(C, midpoint(C, D)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(C, midpoint(C, D), midpoint(E, F)) mod 360
By collinear_definition on I, line_intersection(i, Line(E, I)), E we get line_intersection(i, Line(E, I)) in Line(E, I), E in Line(I, line_intersection(i, Line(E, I))), Line(E, I) == Line(I, line_intersection(i, Line(E, I))), 0 == 2 * angle(line_intersection(i, Line(E, I)), I, E) mod 360
By perpendicular_lines_draw_intersection on perpendicular_bisector(A, E), Line(A, E) we get exists(line_intersection(Line(A, E), perpendicular_bisector(A, E)))
By perpendicular_lines_draw_intersection on altitude(C, A, H), Line(A, H) we get exists(line_intersection(Line(A, H), altitude(C, A, H)))
By perpendicular_lines_draw_intersection on altitude(C, F, H), Line(F, H) we get exists(line_intersection(Line(F, H), altitude(C, F, H)))
By sas_anti_congruence on H, center(Circle(A, C, E)), E, E, center(Circle(A, C, E)), H we get anti_congruent_triangles(E, H, center(Circle(A, C, E)), H, E, center(Circle(A, C, E)))
By altitude_definition on orthocenter(D, E, I), H, midpoint(C, D), Line(E, F) we get Line(E, F) == altitude(orthocenter(D, E, I), H, midpoint(C, D))
By altitude_definition on H, E, A, perpendicular_bisector(A, E) we get altitude(H, A, E) == perpendicular_bisector(A, E)
By altitude_definition on orthocenter(D, E, I), I, midpoint(C, D), Line(E, F) we get Line(E, F) == altitude(orthocenter(D, E, I), I, midpoint(C, D))
By isosceles_triangle_properties on center(Circle(A, C, E)), C, E we get distance(C, center(Circle(A, C, E))) == distance(E, center(Circle(A, C, E))), angle(C, E, center(Circle(A, C, E))) == angle(center(Circle(A, C, E)), C, E) mod 360
By radical_axis_definition_v0 on orthocenter(C, F, H), Circle(C, D, E), c we get power_of_a_point(orthocenter(C, F, H), c) == power_of_a_point(orthocenter(C, F, H), Circle(C, D, E))
By altitude_definition on orthocenter(A, C, D), midpoint(C, D), midpoint(E, F), Line(A, I) we get Line(A, I) == altitude(orthocenter(A, C, D), midpoint(C, D), midpoint(E, F))
By perpendicular_angle_conditions_v0 on B, line_intersection(i, Line(E, I)), E we get angle(B, line_intersection(i, Line(E, I)), E) == orientation(B, line_intersection(i, Line(E, I)), E) mod 360
By altitude_definition on orthocenter(A, C, D), midpoint(C, D), H, Line(A, I) we get Line(A, I) == altitude(orthocenter(A, C, D), H, midpoint(C, D))
By altitude_definition on orthocenter(C, F, H), D, I, Line(E, F) we get Line(E, F) == altitude(orthocenter(C, F, H), D, I)
By altitude_definition on orthocenter(C, F, H), I, midpoint(E, F), Line(E, F) we get Line(E, F) == altitude(orthocenter(C, F, H), I, midpoint(E, F))
By collinear_definition on center(Circle(A, D, F)), G, H we get G in Line(H, center(Circle(A, D, F))), H in Line(G, center(Circle(A, D, F))), Line(G, center(Circle(A, D, F))) == Line(H, center(Circle(A, D, F))), 0 == 2 * angle(G, center(Circle(A, D, F)), H) mod 360
By perpendicular_angle_conditions_v0 on I, line_intersection(i, Line(E, I)), B we get angle(I, line_intersection(i, Line(E, I)), B) == orientation(B, I, line_intersection(i, Line(E, I))) mod 360
By altitude_definition on orthocenter(D, E, I), midpoint(E, F), C, Line(E, F) we get Line(E, F) == altitude(orthocenter(D, E, I), C, midpoint(E, F))
By altitude_definition on F, G, center(Circle(A, D, F)), g we get g == altitude(F, G, center(Circle(A, D, F)))
By altitude_definition on center(Circle(A, D, F)), projection(C, h), C, h we get h == altitude(center(Circle(A, D, F)), C, projection(C, h))
By altitude_definition on orthocenter(A, C, H), G, A, Line(G, H) we get Line(G, H) == altitude(orthocenter(A, C, H), A, G)
By altitude_definition on orthocenter(A, C, H), H, midpoint(E, F), Line(A, I) we get Line(A, I) == altitude(orthocenter(A, C, H), H, midpoint(E, F))
By sas_anti_congruence on A, center(Circle(A, C, E)), E, E, center(Circle(A, C, E)), A we get anti_congruent_triangles(A, E, center(Circle(A, C, E)), E, A, center(Circle(A, C, E)))
By altitude_definition on orthocenter(D, E, I), midpoint(E, F), D, Line(E, F) we get Line(E, F) == altitude(orthocenter(D, E, I), D, midpoint(E, F))
By sas_anti_similarity on H, C, A, G, C, I we get anti_similar_triangles(A, C, H, I, C, G)
By radical_axis_definition_v0 on orthocenter(D, E, I), c, Circle(C, D, E) we get power_of_a_point(orthocenter(D, E, I), c) == power_of_a_point(orthocenter(D, E, I), Circle(C, D, E))
By altitude_definition on orthocenter(D, E, I), D, C, Line(E, F) we get Line(E, F) == altitude(orthocenter(D, E, I), C, D)
By altitude_definition on orthocenter(C, F, H), I, H, Line(E, F) we get Line(E, F) == altitude(orthocenter(C, F, H), H, I)
By altitude_definition on orthocenter(A, C, H), C, D, Line(A, I) we get Line(A, I) == altitude(orthocenter(A, C, H), C, D)
By altitude_definition on orthocenter(D, E, I), midpoint(C, D), D, Line(E, F) we get Line(E, F) == altitude(orthocenter(D, E, I), D, midpoint(C, D))
By altitude_definition on C, center(Circle(A, D, F)), D, altitude(C, A, D) we get altitude(C, A, D) == altitude(C, D, center(Circle(A, D, F)))
By altitude_definition on orthocenter(C, F, H), midpoint(C, D), C, Line(E, F) we get Line(E, F) == altitude(orthocenter(C, F, H), C, midpoint(C, D))
By altitude_definition on orthocenter(C, F, H), midpoint(E, F), D, Line(E, F) we get Line(E, F) == altitude(orthocenter(C, F, H), D, midpoint(E, F))
By altitude_definition on orthocenter(D, E, I), midpoint(C, D), C, Line(E, F) we get Line(E, F) == altitude(orthocenter(D, E, I), C, midpoint(C, D))
By altitude_definition on orthocenter(D, E, I), I, D, Line(E, F) we get Line(E, F) == altitude(orthocenter(D, E, I), D, I)
By altitude_definition on orthocenter(D, E, I), I, midpoint(E, F), Line(E, F) we get Line(E, F) == altitude(orthocenter(D, E, I), I, midpoint(E, F))
By altitude_definition on A, midpoint(C, D), H, Line(A, I) we get Line(A, I) == altitude(A, H, midpoint(C, D))
By altitude_definition on D, I, line_intersection(i, Line(E, I)), i we get i == altitude(D, I, line_intersection(i, Line(E, I)))
By sas_anti_congruence on A, center(Circle(A, C, E)), H, H, center(Circle(A, C, E)), A we get anti_congruent_triangles(A, H, center(Circle(A, C, E)), H, A, center(Circle(A, C, E)))
By altitude_definition on I, line_intersection(i, Line(E, I)), D, Line(E, I) we get Line(E, I) == altitude(I, D, line_intersection(i, Line(E, I)))
By altitude_definition on orthocenter(D, E, I), I, E, i we get i == altitude(orthocenter(D, E, I), E, I)
By altitude_definition on C, G, center(Circle(A, D, F)), g we get g == altitude(C, G, center(Circle(A, D, F)))
By altitude_definition on orthocenter(A, C, D), I, midpoint(C, D), Line(A, I) we get Line(A, I) == altitude(orthocenter(A, C, D), I, midpoint(C, D))
By altitude_definition on E, midpoint(E, F), midpoint(C, D), Line(E, F) we get Line(E, F) == altitude(E, midpoint(C, D), midpoint(E, F))
By altitude_definition on orthocenter(D, E, I), H, I, Line(E, F) we get Line(E, F) == altitude(orthocenter(D, E, I), H, I)
By collinear_definition on midpoint(C, D), midpoint(E, F), H we get midpoint(E, F) in Line(H, midpoint(C, D)), H in Line(midpoint(C, D), midpoint(E, F)), Line(H, midpoint(C, D)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), midpoint(C, D), H) mod 360
By isosceles_triangle_properties on center(Circle(A, C, E)), H, E we get distance(E, center(Circle(A, C, E))) == distance(H, center(Circle(A, C, E))), angle(H, E, center(Circle(A, C, E))) == angle(center(Circle(A, C, E)), H, E) mod 360
By altitude_definition on orthocenter(C, F, H), F, H, altitude(C, F, H) we get altitude(C, F, H) == altitude(orthocenter(C, F, H), F, H)
By altitude_definition on A, midpoint(C, D), midpoint(E, F), Line(A, I) we get Line(A, I) == altitude(A, midpoint(C, D), midpoint(E, F))
By altitude_definition on F, midpoint(C, D), I, Line(E, F) we get Line(E, F) == altitude(F, I, midpoint(C, D))
By collinear_definition on line_intersection(i, Line(E, I)), E, I we get E in Line(I, line_intersection(i, Line(E, I))), I in Line(E, line_intersection(i, Line(E, I))), Line(E, line_intersection(i, Line(E, I))) == Line(I, line_intersection(i, Line(E, I))), 0 == 2 * angle(E, line_intersection(i, Line(E, I)), I) mod 360
By altitude_definition on D, E, line_intersection(i, Line(E, I)), i we get i == altitude(D, E, line_intersection(i, Line(E, I)))
By altitude_definition on orthocenter(C, F, H), C, D, Line(E, F) we get Line(E, F) == altitude(orthocenter(C, F, H), C, D)
By altitude_definition on E, line_intersection(i, Line(E, I)), D, Line(E, I) we get Line(E, I) == altitude(E, D, line_intersection(i, Line(E, I)))
By altitude_definition on orthocenter(D, E, I), midpoint(E, F), H, Line(E, F) we get Line(E, F) == altitude(orthocenter(D, E, I), H, midpoint(E, F))
By altitude_definition on orthocenter(A, C, H), C, G, Line(G, H) we get Line(G, H) == altitude(orthocenter(A, C, H), C, G)
By altitude_definition on orthocenter(A, C, H), H, I, Line(A, I) we get Line(A, I) == altitude(orthocenter(A, C, H), H, I)
By altitude_definition on orthocenter(D, E, I), E, line_intersection(i, Line(E, I)), i we get i == altitude(orthocenter(D, E, I), E, line_intersection(i, Line(E, I)))
By perpendicular_angle_conditions_v0 on D, line_intersection(i, Line(E, I)), I we get angle(D, line_intersection(i, Line(E, I)), I) == orientation(D, line_intersection(i, Line(E, I)), I) mod 360
By altitude_definition on A, I, midpoint(C, D), Line(A, I) we get Line(A, I) == altitude(A, I, midpoint(C, D))
By isosceles_triangle_properties on center(Circle(A, C, E)), H, C we get distance(C, center(Circle(A, C, E))) == distance(H, center(Circle(A, C, E))), angle(H, C, center(Circle(A, C, E))) == angle(center(Circle(A, C, E)), H, C) mod 360
By altitude_definition on I, B, line_intersection(i, Line(E, I)), Line(E, I) we get Line(E, I) == altitude(I, B, line_intersection(i, Line(E, I)))
By altitude_definition on center(Circle(A, D, F)), orthocenter(A, C, D), projection(C, h), h we get h == altitude(center(Circle(A, D, F)), projection(C, h), orthocenter(A, C, D))
By isosceles_triangle_properties on center(Circle(A, C, E)), C, H we get distance(C, center(Circle(A, C, E))) == distance(H, center(Circle(A, C, E))), angle(C, H, center(Circle(A, C, E))) == angle(center(Circle(A, C, E)), C, H) mod 360
By altitude_definition on orthocenter(A, C, H), D, H, Line(A, I) we get Line(A, I) == altitude(orthocenter(A, C, H), D, H)
By altitude_definition on orthocenter(C, F, H), F, C, Line(G, H) we get Line(G, H) == altitude(orthocenter(C, F, H), C, F)
By sas_anti_similarity on G, C, I, H, C, A we get anti_similar_triangles(A, C, H, I, C, G)
By altitude_definition on orthocenter(A, C, H), C, F, Line(G, H) we get Line(G, H) == altitude(orthocenter(A, C, H), C, F)
By sas_anti_congruence on H, center(Circle(A, C, E)), C, C, center(Circle(A, C, E)), H we get anti_congruent_triangles(C, H, center(Circle(A, C, E)), H, C, center(Circle(A, C, E)))
By altitude_definition on orthocenter(C, F, H), midpoint(E, F), C, Line(E, F) we get Line(E, F) == altitude(orthocenter(C, F, H), C, midpoint(E, F))
By perpendicular_angle_conditions_v0 on I, line_intersection(i, Line(E, I)), D we get angle(I, line_intersection(i, Line(E, I)), D) == orientation(D, I, line_intersection(i, Line(E, I))) mod 360
By altitude_definition on orthocenter(A, C, H), midpoint(C, D), C, Line(A, I) we get Line(A, I) == altitude(orthocenter(A, C, H), C, midpoint(C, D))
By altitude_definition on E, I, midpoint(C, D), Line(E, F) we get Line(E, F) == altitude(E, I, midpoint(C, D))
By altitude_definition on orthocenter(D, E, I), midpoint(E, F), midpoint(C, D), Line(E, F) we get Line(E, F) == altitude(orthocenter(D, E, I), midpoint(C, D), midpoint(E, F))
By altitude_definition on orthocenter(D, E, I), D, E, altitude(I, D, E) we get altitude(I, D, E) == altitude(orthocenter(D, E, I), D, E)
By altitude_definition on F, center(Circle(A, D, F)), H, g we get g == altitude(F, H, center(Circle(A, D, F)))
By collinear_definition on line_intersection(i, Line(E, I)), I, E we get I in Line(E, line_intersection(i, Line(E, I))), E in Line(I, line_intersection(i, Line(E, I))), Line(E, line_intersection(i, Line(E, I))) == Line(I, line_intersection(i, Line(E, I))), 0 == 2 * angle(I, line_intersection(i, Line(E, I)), E) mod 360
By perpendicular_angle_conditions_v0 on E, line_intersection(i, Line(E, I)), B we get angle(E, line_intersection(i, Line(E, I)), B) == orientation(B, E, line_intersection(i, Line(E, I))) mod 360
By collinear_definition on midpoint(C, D), I, H we get I in Line(H, midpoint(C, D)), H in Line(I, midpoint(C, D)), Line(H, midpoint(C, D)) == Line(I, midpoint(C, D)), 0 == 2 * angle(I, midpoint(C, D), H) mod 360
By collinear_definition on midpoint(C, D), I, midpoint(E, F) we get I in Line(midpoint(C, D), midpoint(E, F)), midpoint(E, F) in Line(I, midpoint(C, D)), Line(I, midpoint(C, D)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(I, midpoint(C, D), midpoint(E, F)) mod 360
By sas_anti_congruence on E, center(Circle(A, C, E)), H, H, center(Circle(A, C, E)), E we get anti_congruent_triangles(E, H, center(Circle(A, C, E)), H, E, center(Circle(A, C, E)))
By altitude_definition on orthocenter(C, F, H), midpoint(C, D), H, Line(E, F) we get Line(E, F) == altitude(orthocenter(C, F, H), H, midpoint(C, D))
By altitude_definition on orthocenter(C, F, H), I, C, Line(E, F) we get Line(E, F) == altitude(orthocenter(C, F, H), C, I)
By altitude_definition on orthocenter(A, C, H), D, I, Line(A, I) we get Line(A, I) == altitude(orthocenter(A, C, H), D, I)
By altitude_definition on orthocenter(A, C, H), midpoint(E, F), D, Line(A, I) we get Line(A, I) == altitude(orthocenter(A, C, H), D, midpoint(E, F))
By altitude_definition on orthocenter(D, E, I), H, C, Line(E, F) we get Line(E, F) == altitude(orthocenter(D, E, I), C, H)
By altitude_definition on orthocenter(C, F, H), H, D, Line(E, F) we get Line(E, F) == altitude(orthocenter(C, F, H), D, H)
By altitude_definition on orthocenter(C, F, H), A, C, Line(G, H) we get Line(G, H) == altitude(orthocenter(C, F, H), A, C)
By altitude_definition on orthocenter(D, E, I), C, I, Line(E, F) we get Line(E, F) == altitude(orthocenter(D, E, I), C, I)
By altitude_definition on orthocenter(A, C, H), midpoint(E, F), midpoint(C, D), Line(A, I) we get Line(A, I) == altitude(orthocenter(A, C, H), midpoint(C, D), midpoint(E, F))
By altitude_definition on orthocenter(A, C, H), midpoint(E, F), C, Line(A, I) we get Line(A, I) == altitude(orthocenter(A, C, H), C, midpoint(E, F))
By altitude_definition on C, center(Circle(A, D, F)), H, g we get g == altitude(C, H, center(Circle(A, D, F)))
By altitude_definition on orthocenter(A, C, H), midpoint(E, F), I, Line(A, I) we get Line(A, I) == altitude(orthocenter(A, C, H), I, midpoint(E, F))
By altitude_definition on orthocenter(A, C, H), H, C, Line(A, I) we get Line(A, I) == altitude(orthocenter(A, C, H), C, H)
By isosceles_triangle_properties on center(Circle(A, C, E)), A, C we get distance(A, center(Circle(A, C, E))) == distance(C, center(Circle(A, C, E))), angle(A, C, center(Circle(A, C, E))) == angle(center(Circle(A, C, E)), A, C) mod 360
By altitude_definition on orthocenter(A, C, D), D, center(Circle(A, D, F)), altitude(C, A, D) we get altitude(C, A, D) == altitude(orthocenter(A, C, D), D, center(Circle(A, D, F)))
By altitude_definition on orthocenter(A, C, H), C, A, Line(G, H) we get Line(G, H) == altitude(orthocenter(A, C, H), A, C)
By altitude_definition on orthocenter(C, F, H), G, F, Line(G, H) we get Line(G, H) == altitude(orthocenter(C, F, H), F, G)
By altitude_definition on orthocenter(C, F, H), midpoint(E, F), midpoint(C, D), Line(E, F) we get Line(E, F) == altitude(orthocenter(C, F, H), midpoint(C, D), midpoint(E, F))
By altitude_definition on orthocenter(D, E, I), line_intersection(i, Line(E, I)), I, i we get i == altitude(orthocenter(D, E, I), I, line_intersection(i, Line(E, I)))
By altitude_definition on A, G, center(Circle(A, D, F)), g we get g == altitude(A, G, center(Circle(A, D, F)))
By altitude_definition on B, I, line_intersection(i, Line(E, I)), i we get i == altitude(B, I, line_intersection(i, Line(E, I)))
By isosceles_triangle_properties on center(Circle(A, C, E)), A, E we get distance(A, center(Circle(A, C, E))) == distance(E, center(Circle(A, C, E))), angle(A, E, center(Circle(A, C, E))) == angle(center(Circle(A, C, E)), A, E) mod 360
By altitude_definition on E, B, line_intersection(i, Line(E, I)), Line(E, I) we get Line(E, I) == altitude(E, B, line_intersection(i, Line(E, I)))
By altitude_definition on orthocenter(A, C, H), A, H, altitude(C, A, H) we get altitude(C, A, H) == altitude(orthocenter(A, C, H), A, H)
By altitude_definition on orthocenter(A, C, H), midpoint(C, D), H, Line(A, I) we get Line(A, I) == altitude(orthocenter(A, C, H), H, midpoint(C, D))
By altitude_definition on orthocenter(C, F, H), I, midpoint(C, D), Line(E, F) we get Line(E, F) == altitude(orthocenter(C, F, H), I, midpoint(C, D))
By altitude_definition on F, midpoint(E, F), midpoint(C, D), Line(E, F) we get Line(E, F) == altitude(F, midpoint(C, D), midpoint(E, F))
By altitude_definition on B, E, line_intersection(i, Line(E, I)), i we get i == altitude(B, E, line_intersection(i, Line(E, I)))
By altitude_definition on C, A, center(Circle(A, D, F)), altitude(C, A, D) we get altitude(C, A, D) == altitude(C, A, center(Circle(A, D, F)))
By perpendicular_angle_conditions_v0 on D, line_intersection(i, Line(E, I)), E we get angle(D, line_intersection(i, Line(E, I)), E) == orientation(D, line_intersection(i, Line(E, I)), E) mod 360
By sas_anti_similarity on I, C, G, A, C, H we get anti_similar_triangles(A, C, H, I, C, G)
By altitude_definition on orthocenter(C, F, H), G, C, Line(G, H) we get Line(G, H) == altitude(orthocenter(C, F, H), C, G)
By isosceles_triangle_altitude_v3 on center(Circle(A, C, E)), E, A we get identical(perpendicular_bisector(A, E), internal_angle_bisector(A, center(Circle(A, C, E)), E), perpendicular_line(center(Circle(A, C, E)), Line(A, E)))
By altitude_definition on orthocenter(A, C, H), C, I, Line(A, I) we get Line(A, I) == altitude(orthocenter(A, C, H), C, I)
By altitude_definition on F, midpoint(C, D), H, Line(E, F) we get Line(E, F) == altitude(F, H, midpoint(C, D))
By altitude_definition on A, center(Circle(A, D, F)), H, g we get g == altitude(A, H, center(Circle(A, D, F)))
By sas_anti_congruence on E, center(Circle(A, C, E)), C, C, center(Circle(A, C, E)), E we get anti_congruent_triangles(C, E, center(Circle(A, C, E)), E, C, center(Circle(A, C, E)))
By collinear_definition on line_intersection(i, Line(E, I)), B, D we get B in Line(D, line_intersection(i, Line(E, I))), D in Line(B, line_intersection(i, Line(E, I))), Line(B, line_intersection(i, Line(E, I))) == Line(D, line_intersection(i, Line(E, I))), 0 == 2 * angle(B, line_intersection(i, Line(E, I)), D) mod 360
By collinear_definition on midpoint(A, E), E, A we get E in Line(A, midpoint(A, E)), A in Line(E, midpoint(A, E)), Line(A, midpoint(A, E)) == Line(E, midpoint(A, E)), 0 == 2 * angle(E, midpoint(A, E), A) mod 360
By altitude_definition on orthocenter(C, F, H), midpoint(E, F), H, Line(E, F) we get Line(E, F) == altitude(orthocenter(C, F, H), H, midpoint(E, F))
By altitude_definition on orthocenter(A, C, H), midpoint(C, D), I, Line(A, I) we get Line(A, I) == altitude(orthocenter(A, C, H), I, midpoint(C, D))
By perpendicular_angle_conditions_v0 on E, line_intersection(i, Line(E, I)), D we get angle(E, line_intersection(i, Line(E, I)), D) == orientation(D, E, line_intersection(i, Line(E, I))) mod 360
By altitude_definition on orthocenter(A, C, H), G, F, Line(G, H) we get Line(G, H) == altitude(orthocenter(A, C, H), F, G)
By altitude_definition on orthocenter(C, F, H), H, C, Line(E, F) we get Line(E, F) == altitude(orthocenter(C, F, H), C, H)
By sas_anti_congruence on E, center(Circle(A, C, E)), A, A, center(Circle(A, C, E)), E we get anti_congruent_triangles(A, E, center(Circle(A, C, E)), E, A, center(Circle(A, C, E)))
By collinear_definition on midpoint(C, D), midpoint(E, F), I we get midpoint(E, F) in Line(I, midpoint(C, D)), I in Line(midpoint(C, D), midpoint(E, F)), Line(I, midpoint(C, D)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), midpoint(C, D), I) mod 360
By altitude_definition on orthocenter(A, C, H), D, midpoint(C, D), Line(A, I) we get Line(A, I) == altitude(orthocenter(A, C, H), D, midpoint(C, D))
By altitude_definition on orthocenter(A, C, D), A, center(Circle(A, D, F)), altitude(C, A, D) we get altitude(C, A, D) == altitude(orthocenter(A, C, D), A, center(Circle(A, D, F)))
By collinear_definition on line_intersection(i, Line(E, I)), D, B we get D in Line(B, line_intersection(i, Line(E, I))), B in Line(D, line_intersection(i, Line(E, I))), Line(B, line_intersection(i, Line(E, I))) == Line(D, line_intersection(i, Line(E, I))), 0 == 2 * angle(D, line_intersection(i, Line(E, I)), B) mod 360
By sas_anti_similarity on A, C, H, I, C, G we get anti_similar_triangles(A, C, H, I, C, G)
By altitude_definition on orthocenter(C, F, H), G, A, Line(G, H) we get Line(G, H) == altitude(orthocenter(C, F, H), A, G)
By altitude_definition on E, midpoint(C, D), H, Line(E, F) we get Line(E, F) == altitude(E, H, midpoint(C, D))
By altitude_definition on orthocenter(A, C, H), F, A, Line(G, H) we get Line(G, H) == altitude(orthocenter(A, C, H), A, F)
By collinear_definition on midpoint(C, D), H, midpoint(E, F) we get H in Line(midpoint(C, D), midpoint(E, F)), midpoint(E, F) in Line(H, midpoint(C, D)), Line(H, midpoint(C, D)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(H, midpoint(C, D), midpoint(E, F)) mod 360
By altitude_definition on orthocenter(C, F, H), A, F, Line(G, H) we get Line(G, H) == altitude(orthocenter(C, F, H), A, F)
By altitude_definition on center(Circle(A, D, F)), C, orthocenter(A, C, D), h we get h == altitude(center(Circle(A, D, F)), C, orthocenter(A, C, D))
By collinear_definition on midpoint(C, D), H, I we get H in Line(I, midpoint(C, D)), I in Line(H, midpoint(C, D)), Line(H, midpoint(C, D)) == Line(I, midpoint(C, D)), 0 == 2 * angle(H, midpoint(C, D), I) mod 360
By isosceles_triangle_properties on center(Circle(A, C, E)), E, H we get distance(E, center(Circle(A, C, E))) == distance(H, center(Circle(A, C, E))), angle(E, H, center(Circle(A, C, E))) == angle(center(Circle(A, C, E)), E, H) mod 360
By altitude_definition on orthocenter(D, E, I), D, H, Line(E, F) we get Line(E, F) == altitude(orthocenter(D, E, I), D, H)
By collinear_definition on center(Circle(A, D, F)), H, G we get H in Line(G, center(Circle(A, D, F))), G in Line(H, center(Circle(A, D, F))), Line(G, center(Circle(A, D, F))) == Line(H, center(Circle(A, D, F))), 0 == 2 * angle(H, center(Circle(A, D, F)), G) mod 360
By isosceles_triangle_properties on center(Circle(A, C, E)), E, C we get distance(C, center(Circle(A, C, E))) == distance(E, center(Circle(A, C, E))), angle(E, C, center(Circle(A, C, E))) == angle(center(Circle(A, C, E)), E, C) mod 360
By perpendicular_angle_conditions_v0 on B, line_intersection(i, Line(E, I)), I we get angle(B, line_intersection(i, Line(E, I)), I) == orientation(B, line_intersection(i, Line(E, I)), I) mod 360
By collinear_definition on midpoint(A, E), A, E we get A in Line(E, midpoint(A, E)), E in Line(A, midpoint(A, E)), Line(A, midpoint(A, E)) == Line(E, midpoint(A, E)), 0 == 2 * angle(A, midpoint(A, E), E) mod 360
By sas_anti_congruence on C, center(Circle(A, C, E)), H, H, center(Circle(A, C, E)), C we get anti_congruent_triangles(C, H, center(Circle(A, C, E)), H, C, center(Circle(A, C, E)))
By sas_anti_congruence on A, center(Circle(A, C, E)), C, C, center(Circle(A, C, E)), A we get anti_congruent_triangles(A, C, center(Circle(A, C, E)), C, A, center(Circle(A, C, E)))
By isosceles_triangle_properties on center(Circle(A, C, E)), E, A we get distance(A, center(Circle(A, C, E))) == distance(E, center(Circle(A, C, E))), angle(E, A, center(Circle(A, C, E))) == angle(center(Circle(A, C, E)), E, A) mod 360
By isosceles_triangle_properties on center(Circle(A, C, E)), A, H we get distance(A, center(Circle(A, C, E))) == distance(H, center(Circle(A, C, E))), angle(A, H, center(Circle(A, C, E))) == angle(center(Circle(A, C, E)), A, H) mod 360
By sas_anti_congruence on C, center(Circle(A, C, E)), A, A, center(Circle(A, C, E)), C we get anti_congruent_triangles(A, C, center(Circle(A, C, E)), C, A, center(Circle(A, C, E)))
By isosceles_triangle_properties on center(Circle(A, C, E)), H, A we get distance(A, center(Circle(A, C, E))) == distance(H, center(Circle(A, C, E))), angle(H, A, center(Circle(A, C, E))) == angle(center(Circle(A, C, E)), H, A) mod 360
By sas_anti_congruence on H, center(Circle(A, C, E)), A, A, center(Circle(A, C, E)), H we get anti_congruent_triangles(A, H, center(Circle(A, C, E)), H, A, center(Circle(A, C, E)))
By altitude_definition on orthocenter(C, F, H), midpoint(C, D), D, Line(E, F) we get Line(E, F) == altitude(orthocenter(C, F, H), D, midpoint(C, D))
By isosceles_triangle_properties on center(Circle(A, C, E)), C, A we get distance(A, center(Circle(A, C, E))) == distance(C, center(Circle(A, C, E))), angle(C, A, center(Circle(A, C, E))) == angle(center(Circle(A, C, E)), C, A) mod 360
By sas_anti_congruence on C, center(Circle(A, C, E)), E, E, center(Circle(A, C, E)), C we get anti_congruent_triangles(C, E, center(Circle(A, C, E)), E, C, center(Circle(A, C, E)))
By isosceles_triangle_altitude_v3 on H, A, E we get identical(perpendicular_bisector(A, E), internal_angle_bisector(A, H, E), perpendicular_line(H, Line(A, E)))
By isosceles_triangle_altitude_v3 on H, E, A we get identical(perpendicular_bisector(A, E), internal_angle_bisector(A, H, E), perpendicular_line(H, Line(A, E)))
By isosceles_triangle_altitude_v3 on center(Circle(A, C, E)), A, E we get identical(perpendicular_bisector(A, E), internal_angle_bisector(A, center(Circle(A, C, E)), E), perpendicular_line(center(Circle(A, C, E)), Line(A, E)))
By right_triangle_circumcenter_v1 on D, projection(C, h), C we get midpoint(C, D) == circumcenter(C, D, projection(C, h))
By power_of_a_point_definition on midpoint(C, D), I, D, Circle(A, D, F) we get log(power_of_a_point(midpoint(C, D), Circle(A, D, F))) == log(distance(I, midpoint(C, D))) + log(distance(D, midpoint(C, D)))
By sas_congruence on E, center(Circle(A, C, E)), H, H, center(Circle(A, C, E)), A we get congruent_triangles(A, H, center(Circle(A, C, E)), H, E, center(Circle(A, C, E)))
By sas_congruence on H, center(Circle(A, C, E)), A, E, center(Circle(A, C, E)), H we get congruent_triangles(A, H, center(Circle(A, C, E)), H, E, center(Circle(A, C, E)))
By sas_anti_congruence on E, center(Circle(A, C, E)), H, A, center(Circle(A, C, E)), H we get anti_congruent_triangles(A, H, center(Circle(A, C, E)), E, H, center(Circle(A, C, E)))
By sas_congruence on H, center(Circle(A, C, E)), E, A, center(Circle(A, C, E)), H we get congruent_triangles(A, H, center(Circle(A, C, E)), H, E, center(Circle(A, C, E)))
By sas_congruence on A, center(Circle(A, C, E)), H, H, center(Circle(A, C, E)), E we get congruent_triangles(A, H, center(Circle(A, C, E)), H, E, center(Circle(A, C, E)))
By sas_anti_congruence on H, center(Circle(A, C, E)), A, H, center(Circle(A, C, E)), E we get anti_congruent_triangles(A, H, center(Circle(A, C, E)), E, H, center(Circle(A, C, E)))
By sas_anti_congruence on A, center(Circle(A, C, E)), H, E, center(Circle(A, C, E)), H we get anti_congruent_triangles(A, H, center(Circle(A, C, E)), E, H, center(Circle(A, C, E)))
By sas_anti_congruence on H, center(Circle(A, C, E)), E, H, center(Circle(A, C, E)), A we get anti_congruent_triangles(A, H, center(Circle(A, C, E)), E, H, center(Circle(A, C, E)))
By power_of_a_point_definition on midpoint(C, D), H, C, Circle(A, C, E) we get log(power_of_a_point(midpoint(C, D), Circle(A, C, E))) == log(distance(H, midpoint(C, D))) + log(distance(C, midpoint(C, D)))
By power_of_a_point_definition on midpoint(A, E), A, E, c we get log(power_of_a_point(midpoint(A, E), c)) == log(distance(A, midpoint(A, E))) + log(distance(E, midpoint(A, E)))
By between_implies_angles on A, midpoint(A, E), E we get 180 == angle(A, midpoint(A, E), E) mod 360, 0 == angle(midpoint(A, E), E, A) mod 360, 0 == angle(E, A, midpoint(A, E)) mod 360
By between_implies_angles on E, midpoint(A, E), A we get 180 == angle(E, midpoint(A, E), A) mod 360, 0 == angle(midpoint(A, E), A, E) mod 360, 0 == angle(A, E, midpoint(A, E)) mod 360
By power_of_a_point_definition on midpoint(A, E), E, A, Circle(A, C, E) we get log(power_of_a_point(midpoint(A, E), Circle(A, C, E))) == log(distance(E, midpoint(A, E))) + log(distance(A, midpoint(A, E)))
