Assumptions:
A, B, C, D, E, F, G, H, I, J: Point
f, g, h, i, j, k: Line
distinct(A, B, C, D, E, F, G, H, I, J)
distinct(f, g, h, i, j, k)
f == Line(B, C)
g == Line(A, C)
h == internal_angle_bisector(B, A, C)
i == internal_angle_bisector(A, B, C)
j == internal_angle_bisector(A, C, B)
D == line_intersection(h, i)
E == projection(D, f)
F == projection(D, g)
G == projection(E, i)
k == Line(E, G)
H == midpoint(A, C)
I == line_intersection(j, k)
J == line_intersection(h, k)

Embedding:
C := {"x": "0.259504490064378867675287665406358428299427032470703125", "y": "5.55611908794943953893152865930460393428802490234375"}
B := {"x": "-5.08505556164869876312195628997869789600372314453125", "y": "3.411744178156757900666207206086255609989166259765625"}
A := {"x": "3.991854817928894849643484121770597994327545166015625", "y": "5.40953823547434087259944135439582169055938720703125"}
i := {"point": {"x": "-5.08505556164869876312195628997869789600372314453125", "y": "3.411744178156757900666207206086255609989166259765625"}, "direction": {"x": "1.9047086443596904527353178297538212854719906121970722356748316157945808211495708207742495433588906609966151138128467648385848843859235560020958791432028318413621829401835300073425511604548752325894636490011913109829170848550147407346303520476593952960840791078108630746215613577391039430553848920979721025544298919505118712795891525843398339997079803317201838721624569036682989740892426636199903233921451710887564338405611564548256024847444876539298300582429625658525815903656498063809351540090559573731178005639951803383298106189630677483865986213664904622202033867299461678830710014130685532966979778426633432427709867379181490190135611956244435495901002850556070019171944495036940205412712083410205219271501103531022828446260757733277906619440853719608458669232612387998939458551310397876387992390282039510759335245648428241089376514631261088631498999521278783941315642292567720682230553461435685597156381684041080264915048614762373240807146901911623659856724556609946165944417036166590522633269126854627500426263369727735055388263215569461740817588449376324664307011565902309503743873830437234944864378768736690209496160657316430010428908766805700178956816999037086648499738462693765124215898810295494330506080288285498113499804260199361605115874571072860628932737997500366398137014536093221084461262671025947449236729868176453282840882789807229323078960483099191323759277589776821969281005938551085710166675789633036541329470555834134946086727289571382441056879130456790776271000162368610913297705514371282626071222950690591783594657772115484422458841145940170826547912863760986480404435410369932908082149951589384546849047771594326115025897159647895705045486460431423594827797298720406303077741485244671907544555250501750499950523292408924638352187239625618172782201564003147904865722170307144244934533275020499152900493736494574558854349669318269809980615456525285792199699262399902916547116791037520973304660892478645252632806380313640814218457180770664287419955426455275438537643207978993821", "y": "0.58732258188723408618299852440241286558936026725660383505923342140692892115629536344501643758995037391573461780666430378800440830751622031458703564340816527177961995071177893990006099805571597523629614007816991748058325400472320202165488367133591841985428040887603086140785328190053297992122587259439755174617065640142863933749812487087177811864946360476289128329081830106974355516160878577708953874796442437650747622703986346111944866074227271071572494201312682219187734824623822300906561127528974531868106305084232605730130382586840641319783773109985383795637119752322684975983162260781227292366784860629786604477782561080550057599902622756718284511000665072178159426065660302634123944185794988361539487130528011535221451044355267761809027818459640404085919722211471289202981200989725142240265889247280648901331223973190207749811111666537281464978082803769627828273787647471346462847464099176676310363977305413887396167141808813219098678669151426609895422585200252120449726018954584985217169420138862963424452177034927650292221250768627071760678124624773440572523234719106232459324859334283224285769457890684291028107076556571395981626263224390019451043584954835092669962115260723952248403317815540065268881382628852252248962805028787108143444617612917971451012811149177407873870741866876153870809186867753209913862463599879535116191729067661794487875133587832076231386113461285035800649504891784882970660081841426161137363858970786372263502978430932092229210253515603852012357348477411922628446547199089741761880876657572924658609274221559473133168395942088640530692539020839729822584623620442295278052607663053839396087112068083497498678265535080569502774536628408241586083239115922165329324057019066401678216790219050525954954735874374812245774013461675177981150713061922942051477467249795765745355839863321438420591079458440967015925074572466795426447605646652461581736309574925071378033450312197742714146383136697227092479178968647805040022242514685478264871110661128957787587137411179146824816"}}
h := {"point": {"x": "3.991854817928894849643484121770597994327545166015625", "y": "5.40953823547434087259944135439582169055938720703125"}, "direction": {"x": "-1.9758544384982418163229218034181247817246430271842830286299798637019440083478813922286409332632807174341529960133575755022699593232445522233426697555315490202537407712270699781408705169869119472764503798137726994854110543494868349317231866177469356764102777892481526275581595317306736607358558155817367522033282452735515073920400767771130878735546085097645855974664930539949492544553653231308445055270397107835066286419292303168010985348208239913765035318285024372874621616785985828896161192723006784327775602482506403988154734313284063576781192679570184455600524990460675453286347090581222687808700879658089752487659357274335785390571564163375452574917304205916572039420872209187414977437241278025390423247670590164063841593315415994930181638875768529529707940180494271835530192398432196637072481292955796488644064400774244770639028309952724827419656842542577284148295916615826659613205260906269808012097604315572437900030518649148198586654748455027881168449318686314215345734895072084082702649770931875354360877433111074153871477120315376562312895912685188886467476516089042757258841336647648414668435365731072228351484000324009650643704260928504068478728144527015076606445221913241585928250753856146562838370814159995396925544301419339927620303440826402528867314693838165318324386364150192660679891227054766482623759732117110788669511087805567482637358726138945171771799785017397411618884141547585304408228761743462535885664770081179284726114189750629562877113481850855174312240636469879390377885595599699175378689939920688125565696773907857358014129360932865548351449868710574698137160159527593306162603370632633995039284416757813870317075339116584868190832261692908398987495467037539439645504671221249569875056440540718962458658931711528382911688079181362028640053518337218577033016110035114990231914973573355191656691863651402640598370970719653303865214402966569555203314129661995501323479235019750159794144606367646196388243988934846075069167246206595952046277292893914889067756278562272079932", "y": "-0.17570863751691319932677138558547603049110876799860066302511714346801391856721780858492171862563485565486489336350712030040939536332398861059385202991365136757643142660788007093057711362201368762504624179975097419607410160528160218311072901052853502603949902313839357055272110939916399661363799752919667536529658081170977972647224130450603815684288971230664413662824536539760935668057228688887386530408847697697883590568553197087257834061979974782108718951639883837281223813550928240907020734850837159608259252033634052282094102746812638061613165568167158578690956615110695361796355997880819733908413633118965829613193875986058620234653237721285962646837480920386240479792118508600126666465973456873262150904750834697850464607652561255606961969302955561692157853226898350454795982510244283491096223010466854179617148695486390086806473431973489944706054148835718144492360355023567655120192140502165742684192622895725381420713473112330097166114319959346591900134804540835890320485832979998859819111160458880331787857234687466947592310336125005968310655678181494682432222020512192057197356830269386684782923421928200710491489194596958111244526581799256459216262416166764623499203617024221378105066495744176359224287125142520122536823346672526858097354032691094388348220256989436409658605302465344524944859552082225750907130782414515965414037120607572233901635760948337120154609744950647450778724669077356765391958205036910757425839684435458475796100463939182175758941769024402568993321101780611801101906149199959189876123859349775538547759220662863308198241231281613553269211276670580299123023682367043780086113393575065777529629923782353939883414676852354015993734388158274932310665609829793257847496872336304829167651180076435956843337325720305742787222587051123597501585697225532332990446878447636361013420426750927694060557366362403365297350495795471845857801219876534341674038507536203193610206001213332135328446790117335223361597564950659672095989122376741731923392828185733718247829148897806893492"}}
f := {"point": {"x": "-5.08505556164869876312195628997869789600372314453125", "y": "3.411744178156757900666207206086255609989166259765625"}, "direction": {"x": "5.344560051713077630797243955385056324303150177001953125", "y": "2.144374909792681638265321453218348324298858642578125"}}
D := {"x": "0.34095771192612734723395532819193205321990542689458517742283907720336765695790400438808057129917417900276257768286661280328396532452877955234462607213823543483495944835154709577543386543161278574154343601553632757865155805989626992571799058430330699090362831449977933492208405911879691419576203671239750926297051730458813306034030330777731273858256597776488568571386373323507860417160795040193903951309776806654660300012405821180545003734963129112118369312815603059873014020357734455122310138662511185407479725717852235466939873184742738724014125506695767376876078818123072457650802670570477313369744965567836852985335521065279316038496417472586974691534148897200392079829935770122775891703575487432127327418812905707210737169971190995370669081982184470407102868020834575844733627354552818382841746927867215474325045745825884077875121806716437884526744624546508948351791668948373124519331135805266124259293514435542157829514446447901851473652351339362323858987278188617922479282168666637151190753426866655235504372837415320078982094927823186893095440530364031003933135790505684526270845750196896303901595749367525083341854979538100943761858809041616580551355594575682957864108253397860023256478588031327526972556958960572756357863843698532973825044702922935880809029801131889280214493194229540108472930491252812855027109925928761985756570003318825025666088995417538903368563584858384399754049248057481198617026599519498663337208938723434583865985237765433809359384421355515645228474420361888249953653065272441103852949108031284485310254525489187005858818947735505782106340949444355129794994633532802329713778556747743629513297830838568989711741010451538463139672445819021030809256200378185824114352973860788399849565439357766273581468811123183706349755283622840979420513040203415943859427771294713810397189022919211592402333997602372966352329226706749495722825234983913028246155685964016731923797484344125681176913352934746069823864274883704012296580439119707758485228101072105287811083325898821090757", "y": "5.0848715273853793267311592144942046848618864696860835323698702680487488892340497118061239741675642884389035565621103257423776862961254939839972391592140852176489344588587370690277686720959931548637368835436746954275333611886782378547035717378043731890588725227127538869018421439906473222843055112328625384780117379909609164562719730218673196397215642721822718950442263901447886476617197186045576721388479291606368566438990568541193441338813920277711574501330992926581708886822253351365834664223567459833257441739576344538705557560539249942778322692711055064643164083674217205063974992283444842197185199415684205390588201373136272814199133821553490656375358541954343252713983723395603149252887703620070516519846717709615331206396145409388350335517274424432489865156799141233274313030688054498143683534077385066678259910990826560286040204960331496024621734264142806834939695437881439725287965499076288403248531425407166284634545040292310385984452630210885530015336907793687665149154565696722093976251241293583834913206177297882846722597281112547371687596288165688663703162633544236273196219351762503093734182458058184334558942580791664814032103050331552769742841801761814773019190807531785967195856744112516345786456145171507326378999126602642401733348035704916591152160312617378742378205747992503946234096386063930189926291567338563338346328699445926723287355574146812017902802037855243157862163035698890292602161344042695382292815871396899919049154816368670792891540864865166765193404107314184593336341235660633195978528312197602810519205882877959989112988289771386122489115975141984430791731098433733915952668834768100875590231097567095363063116572379757331063406033677558487775827619651109343342271157230093183827833523057290893936969854812015628789482461515232577780577504366846749604445748627018269803314943715596372523953103867789821052287484284915528958164031568770621648604456099728132222755982864689729949196050715394256705277572364996514809475077557303965613810384265188194831284154147743006"}
E := {"x": "0.1668041645531328020081493890883353769036281875207553628617904068274904771677699468483793101961532004975378784699398954556418258889963574724996111173662414103881822373013122710948913584363000641284466968246318065225652294645212799697720008552695882704496891277172414474950594597815520524760567344921533518538893449300753565995457601864773357985244554612218453861055686756023226907385105161530193158585072966409900013448061247065422897469366572712973612077378597250527330744885148533102244572529049261657095147181133089801933259830717037837787282760774303891239173324299110986239355340150632076109812614566223992822980388257203235980422649798730303999934948108659488948112740487007123422765946310413297339151590688334748845177180040971973837618675592040994588497231485481752405484115703395688627863065594905151502014998901671441711538158541032448453931885129894097794810612164634347986256369706806899665596651418408378819504757065801352059036065736927134545563938879775158035345065922356454747024661841427728331108767357189622171262346674557939244965768122693219566226701815813674121895973358715592504684652206463082153418476413029164359875056561678229804727334586457711403345177273359409347541521248215073544714484412896376346926852717329177156157109394788253395415923249366880318854802799791741587635590424033697344044603598508830515454134342183256173914011320034477457209163959264277465453323582739939466225811460713859902464681277100182298319301785958637282147706918582185249410197890513573434473997232985299783251466739392612981136826667334299190233117604322047000544237432447963100875942588466752884120856867100883995486409056782786361311452322184923234419266082926195741912717064995509803183993740781241141919186500097671958774302604188595957778277770317311957019296116732800087976728928647529237614746414041559115134401985369463150625768408823072189555929760608375536789039533516954346806379367404589477012704106537727889339042049595708413295724278917222526101740751149475333412876189538382936", "y": "5.5189253338831502625411873107586540005994158584515957827514996615272142435476434929035672469200950281948626190970453756286157967232341425579148273393172167837836694729841123426333737000690078063588920807299294816088463686619719040795378865339337642526038711731688672207249054459806061224098440619812692421505750820263445463409529355729446600146236824632319390451670544905350262584000218160650789478969186356088569370554711197410033982437233554265356808757824876989730441051615084011756038914066598064912920641259010881341455450194893215530920342081786215093883344697425121149367858744913765973249713303365115373617476257450490023600195282208615566040103373790066898406293198032785630423910868574490806339338013018254680833271730070375515120614253264495578455264394331767416889023173582843411844738571263881076940645443716918310176789537291419110555942908767773686069768835724381449724655379390986112690068337097971606502130639954620355340184753441780922295955574258062302237519345297007633091225714774238975503180556918503164347329880240540249362016405973202060771265788604525374016643371124433437281929380658735995940581557868692152784387805631506645630221457597159033998603200488140110182451930133670112470432828075948027152363996744153513019529663958479848019123366091195376207547485422917571559832779485338574145857775963129817022373381159772710527047119783792070646212951814626866350041729551920103595758964140527982555460542471542764792077563170968760264458536456717861158138943579514202410522004199587251937704331172222864568800852305003790603750965473239042486280296172283425094896929839279070498866211036661359321655754408020352600143238998279218798073215938796349297681532851116202193993956297390870208750823740639517054403591359940358305221150103320675856933845172588007833896050021310033201431777112349375262789008778028073239881953455329090401652216623084668321434804069834371780000213877936360293332693357416824324589964939180216389752496174542541634524000277042829147448704968677330581"}
G := {"x": "0.30414605767827836278042647879495229298351716636317061908391591016164051991076616273899425375424941278124788661869614697321978478928397067336275729675981228481110202049942375639213126044997811053035045182885688897075057692478432084445645513060808687716187243690930702825993062175900852830335475443231004503475952670904001346815057348135871132953700194077283159616886974787611750167785981689959175635181555717069657293616926881543124144082741281916691368667463634861329326572458975685561525072661135542030291150837441029730948919000295129750479644810241210509202633805283212552695719780559364389305431896432085210070767019576352138041602259764143197287337676744613186523428085085701622433676901492735972184859010745489407832424022262448353235605553990424663228018067512976664476244552926735398130685064618423693645065987421542224581996254001422825183381098814524823833080282577938725941244555571626336042046239207395610964096868383338228781959502043045785216044725763360792190709883761592520630830117979656188929869971417045807045591038457408701462175694037782963528668018135584963275816645082060165952936706819593049487258468250133235101759571246435812595195638009474458231102967359439220734528865228859662456131002797143163940386353329129199592228277451492115128997899144563518226367939663609385341473706105296715017565431043485136418344965953398023141337094641812991018148517336366213506318380813027294643716208550641599332181000205614741459660794367650701292042128030749661615568269184547302943519797072559657245271171395758756727296012747321226143231038045883705214368354806113275040820098844992845949941431341012533207891920500894255751123072396514127924231575359349645593810582430492777249137951622247229059275480964068287092493783209693459633476296708235672889416434257349065867708987535242283991448768212076149674532915732013124644555041803726102558498046752532488302675758936442965199021425055300903702449969837751625911191261411011285966698473894324066475350088273806060340551665012545571767", "y": "5.0735205441888626875280432901295053102576428329702578117492825315324634279167031845863822619497640185395854364289785905614021313953259864094108378476285793426657883717217798898097187986233478223735572098910629048864733788953727440537876745690385528133707825755868506236207840321045388581415255540975417096455511047103981688023970000873222914485863867236148678469265775969945485045505609201210660084078255919022711071193758541095433555672270309996718841433568984617438881556282341219761380806433628401349424428051535982394595130959182324011219735888214148116296257387627938645811697248026907481559619704400409345512131122669069885917546437201099211653002225862128222887263252395010946723909197413008389489155624237612167376325931828648719997698220574143068418980726406736830934263132034753916125372477148737797639206377951468924119720055430262884243641281638211459325288238071399289632995050506356770550419638195326184545205214043093431784244272281601987763093772353444111926985405344406001040373137159299327055482233721852489380547686390139809811554755860095069308776479981202037578319093225521342069597764345167306547890080698031576031693902813467091148701377937515280417000822352238093549714312461979722368150057626945721806517945443729230137086003115326898437020464968898772332761437010735468283993896695585815060453630781751040465137157754143672756994002097956991616959536804560327178503905941212810859202057826198318579378319541954037613968218964829466590749301849183886398166639335047425075383030970386458222627145785394829432617471832278077981907072256439938871143212305236520000545476047490030971936900520982718249727129081498734448168769576699296607942448314196216696010851592409176279065653626434074980846104646244289500987823614961812097094862312929957272154592504696717285283358261084809110853153305085189517300565324128682255032049486741873688585819034326503352527230533033874742090884766270693645815481001308485091170159027031390972846130703902424109896040603328566893424840189829028514"}
k := {"point": {"x": "0.1668041645531328020081493890883353769036281875207553628617904068274904771677699468483793101961532004975378784699398954556418258889963574724996111173662414103881822373013122710948913584363000641284466968246318065225652294645212799697720008552695882704496891277172414474950594597815520524760567344921533518538893449300753565995457601864773357985244554612218453861055686756023226907385105161530193158585072966409900013448061247065422897469366572712973612077378597250527330744885148533102244572529049261657095147181133089801933259830717037837787282760774303891239173324299110986239355340150632076109812614566223992822980388257203235980422649798730303999934948108659488948112740487007123422765946310413297339151590688334748845177180040971973837618675592040994588497231485481752405484115703395688627863065594905151502014998901671441711538158541032448453931885129894097794810612164634347986256369706806899665596651418408378819504757065801352059036065736927134545563938879775158035345065922356454747024661841427728331108767357189622171262346674557939244965768122693219566226701815813674121895973358715592504684652206463082153418476413029164359875056561678229804727334586457711403345177273359409347541521248215073544714484412896376346926852717329177156157109394788253395415923249366880318854802799791741587635590424033697344044603598508830515454134342183256173914011320034477457209163959264277465453323582739939466225811460713859902464681277100182298319301785958637282147706918582185249410197890513573434473997232985299783251466739392612981136826667334299190233117604322047000544237432447963100875942588466752884120856867100883995486409056782786361311452322184923234419266082926195741912717064995509803183993740781241141919186500097671958774302604188595957778277770317311957019296116732800087976728928647529237614746414041559115134401985369463150625768408823072189555929760608375536789039533516954346806379367404589477012704106537727889339042049595708413295724278917222526101740751149475333412876189538382936", "y": "5.5189253338831502625411873107586540005994158584515957827514996615272142435476434929035672469200950281948626190970453756286157967232341425579148273393172167837836694729841123426333737000690078063588920807299294816088463686619719040795378865339337642526038711731688672207249054459806061224098440619812692421505750820263445463409529355729446600146236824632319390451670544905350262584000218160650789478969186356088569370554711197410033982437233554265356808757824876989730441051615084011756038914066598064912920641259010881341455450194893215530920342081786215093883344697425121149367858744913765973249713303365115373617476257450490023600195282208615566040103373790066898406293198032785630423910868574490806339338013018254680833271730070375515120614253264495578455264394331767416889023173582843411844738571263881076940645443716918310176789537291419110555942908767773686069768835724381449724655379390986112690068337097971606502130639954620355340184753441780922295955574258062302237519345297007633091225714774238975503180556918503164347329880240540249362016405973202060771265788604525374016643371124433437281929380658735995940581557868692152784387805631506645630221457597159033998603200488140110182451930133670112470432828075948027152363996744153513019529663958479848019123366091195376207547485422917571559832779485338574145857775963129817022373381159772710527047119783792070646212951814626866350041729551920103595758964140527982555460542471542764792077563170968760264458536456717861158138943579514202410522004199587251937704331172222864568800852305003790603750965473239042486280296172283425094896929839279070498866211036661359321655754408020352600143238998279218798073215938796349297681532851116202193993956297390870208750823740639517054403591359940358305221150103320675856933845172588007833896050021310033201431777112349375262789008778028073239881953455329090401652216623084668321434804069834371780000213877936360293332693357416824324589964939180216389752496174542541634524000277042829147448704968677330581"}, "direction": {"x": "0.13734189312514556077227708970661691607988897884241525622212550333415004274299621589061494355809621228371000814875625151757795890028761320086314617939357087442291978319811148529723990201367804640190375500422508244818534746026304087468445427533849860671218330919206558076487116197745647582729801994015669318087018177896465686860481329488137553101254647955098621006330107227379481093934930074657244049330826052970657159136314410888895169389075554786955247893677662356056019123607490354539079347370642925459339679026110131711616320693124751372606817202498171596810900562292102690302166379053043628207305750769845281840963137004319778237375761776840157287988195658018297042300680215630388206017438388602998793343103862141919380652221852728614859418798070014717343045752658159140421403395892778511852054408669372178624915998404827807466614668591098340644062247515583845884974160931595246078680858503557339386079725023311822769049297725324708191598844673774439760405336965609211837259224538027973160583499565378905618782297845149585332967571711829309012518012810850767866400999977448222056856911494904240906090184754962227953073704119841591503009005629653514547922292144897344197651194625845127259113652746708927008986158668179400471117826155837428030657183503609581174838666650894715037819911665691969465117801864959741577119395058396831263803622531565461402196981441468216446056877743723438851785144985627899981458093943503000307534187434612918476467776508064328470565058844927809121466290279411568598779824742706659412756504001832626915927746073978234240899862002663235208925980481633644032060672960325317108732862670003693253027829933066392138008549174664895580038914530087688174683411780537679217298014214434817640083615963091567504750757167807500055693519005062553319223473090021064987941698248766991615301304071660558523188895878318493138297357715495380662938749146448732934785363601273421730957631381255008932322928772374347017800840915054201833741231105151841214332680762311307006422903117161742406", "y": "-0.44540478969428757501314402062914869034177302548133797100221712999475081563094030831718498497033100965527718266806678506721366532790815614850398949168863744111788110126233245282365490144565998398533487083886657672237298976659916002575021196489521143923308859758201659710412141387606726426831850788372753250502397731594637753855593548562236856603729573961707119824047689354047775384946089594401293948909304370658582993609526563146004267649632442686379673242558923722915594953327427919946581076329696635634962132074748989468603192357108915197006061935720669775870873097971825035561614968868584916900935989647060281053451347814201376826488450075163543871011479279386755190299456377746837000016711614824168501823887806425134569457982417267951229160326903525100362836679250305859547600415480894957193660941151432793014390657654493860570694818611562263123016271295622267444805976529821600916603288846293421396486989026454219569254259115269235559404811601789345328618019046181903105339399526016320508525776149396484476983231966506749667821938504004395504616501131069914624893086233233364383242778989120952123316163135686893926914771706605767526939028180395544815200796596437535816023781359020166327376176716903901022827704490023053458460513004242828824436608431529495821029011222966038747860484121821032758388827897527590854041451813787765572362234056290377700531176858350790292534150100665391715378236107072927365569063143296639760822229295887271781093442061392936737092346075339747599723042444667773351389732292007937150771853868280351361833804727257126218438932167991036151370838670469050943514537917890395269293105156786410719286253265216181519744694215799221901307676246001326016706812587070259149283026709567952279047190943952275534157677449785462081262877903907185847792526678912905486126917602252240905786238072641857454884434538993909848499039685872167130663975887581649689075735368004970379093291116656666475172123561083392334198059121488254169063654706401175246279596737142622540238647788483020672"}}
j := {"point": {"x": "0.259504490064378867675287665406358428299427032470703125", "y": "5.55611908794943953893152865930460393428802490234375"}, "direction": {"x": "0.071145794138551363587603973664303496252652414987210792955148247907363187198310571454391389904390056437537882200510810663685074937320996221246790612328717178891557831043539970798319356532036714686986730812581388502493969494472094197092834570087540380326198681437289552936598173991569717680470923483764649648898353323039636112450924192773253873846628178044401725304036150326650280366122659510854182134894539694750194801368073861975496050076336337446673473585539871434880571312948776508680965263244721059659759684255460060485662812365338609291520646590527983339849112316121377445563707645053715484172110123145632005994948989515429520043595220713101707901630135536050202024892771415047477202452919461518520397616948663304101314705465826165227501943491480992124927094788188383659073384712179876068448890267375697788472915512581652954965179532146373878815784302129850020698027432325893893097470744483412241494122263153135763511547003438582534584760155311625750859259412970426917979047803591749218001650180502072686045116974134641881608885709980710057207832423581256180316950452314044775509746281721117972357098696233553814198783966669322063327535216169836829977132752797798995794548345054782080403485504585106850786473387170989881204449715914056601518756625532966823838195584066495192624934961409943959542996438374053517452300224893433538667020501576025331427976565584598044804050742762058964960313560903421869806208595382949934433529952534514978002746246105818043605660272039838353596963630751077946458789008532789275261871696999753378210211613574187359167051978692537752490195584681371165675572411722337325452122068104461049243536898621954420204944195693697248578677523247697539266766973881903334242692973600489796751188529021721195870840841911945827333589194173641046727131677321542912815038786480784598698044029833469250379136991490806603951662105033503405523378751004426941111443039959559840693211822871263882083994547516755113561118255453243425494878902582528775885733746745961362921863535429308611085", "y": "-0.41161394437032088685622713881693683509825149925800317203411627793891500258907755486009471896431551826086972444315718348759501294419223170399318361349451390420318852410389886896948388443370228761124989827841894328450915239944159983854415466080738339381478138573763729085513217250136898330758787506520087638087407558971885961102588356636573996180657389245624714666257293567213419848103649888821567344387594739952864032135433149024687032012247296289463775249672798381906511011072894059999540392678137372259847053050598553448036279840028003258170607541818225216946163137211989614186806262900407558458371227510820774864588685094491437365249385035432321864163184151791918946273541794033997277719821531488277336225777176837370986436702706506202065849156684842393761868984572938748185218479480858749169666236813794721714075277703817663004638234563791520272028654933909683781427292447778807727271958674510567679784682518162014746428335700889001512554831467263303522450395711284559405533121604986357350308978404083092664319800240183344628940432502065792367468946591945890091012698594040402127502504013837600986534468756090317615587361974437870381736642590762991827322538668328046462911643699730870298251319795888909657095503709732126425981682114581285347263580226877062664590892187971464212136564410809345864327315670984162955332817465019150777691947054222253973497826883739111231503716334388349870780222707526205268123636389250379938019286350913787706877966992910053451311746579449443364027375631310827344641049889782572004752798223149120061515000896609824970154710807026977423327744169149523461599938075251497966494269478773618557482144301143558794850858228215486780802240249966653772573506092372071476560146730096849049139038974089998111398548654506502986790874624054383649127364697409718487020371348129384342419436570510726530522092078563650627724076671323580589804426775927240062271067388868184423244310984410578817936346579891869117581403697145367926253392308736532947717832943224069339308262281339931324"}}
g := {"point": {"x": "3.991854817928894849643484121770597994327545166015625", "y": "5.40953823547434087259944135439582169055938720703125"}, "direction": {"x": "-3.732350327864515981968196456364239566028118133544921875", "y": "0.1465808524750986663320873049087822437286376953125"}}
J := {"x": "0.30172184247399312964537234881469730871085550527382718828852626753033625787823040470847529307055387505148922382311881740338950868760916140539933768118317821987010167645309193477023669133920325881320048872133988559820236096670239722502639029362389302191643353065985155481463531601595847407665622125120853557897415729837387945599348103269911698062834665871242654342816285665310082211875994118847312291847190499952554510021448760257410732535535719239159738199025824387663813025407795576592289839334453676350842759581984381011765783611969363349429359374951788303345251855043923833274255739628912615343453291246670320408790327829456113336655782567259022606187652837597985243077211288146538322131653093668515863939386773845000026585469643745307139303712004795375277901948992351347187437938073493577238565460635598328583005736961873167320043679283952710924292831369960982294289597396627431355244203617797665289165547882140892245815366201424873844545998240395658519982795611061278647814522776692939939000072462697493360352627943770091391837363807687431411785709359403010145803835813563202045635343588975028356678957581844418617162216590953508123595184421524366542368976268160987383371877389045069275427653295011649087559416190439379655525038804024300538528770645938342532210992184888673722590548225717112202233650873124211811599105575172713968822768995143453288032802738957537871893144093145043572418399031071564644742809165894944133628903764797442236743774900689777060662957947875762119930651989288325781352753113644130131876749150174452222079216526203846291189518082938359431487645527109366361848262602256860575396076356214678085614155567808133762777202699677789345813049362280200917348751322742640608748330985498904944044362433176369202194810497059071964832635427351626787924736256478978579505017104753714414039238479839216687315951215733247333802526517848889691344591815246831089451848987604923682983324591924235622281095028387887241075038929546648796069774946150968311686227242678039203880776625433713026", "y": "5.0813823628857586662831545316618952327538654711901744227009580272952830481031408054141307891525417756115642086754837951920482632981207970558857727354528271158214037573599939349500510032297077854925341152859321745049040390683318595824378706534754583725878603215278227421054714784462097347454364695717337213356285810908183595338822144162338235384456420543564780137033176747234305751437602902565697814292658874763524394355347845412320364103687561729584097831279781428801757549941872149043281494030398858769350218215919397129790569152253546722517404773090609424543014775713818616210090871550666840908507234548401832403982232547342249515837328991151912746349958073390426628000517576888473351315293756525218307302829880863965123559964292493572211896544728945997251039340782525900097139566715061217168684556188474520478344076774924282628459070182191382816668335376815424468069098171050660290622861067077221646864081592796472951743498045525938514039094079789781023444919325592347136468102931654626946572993933668967322565396404262405561619738796903555723761066781218083167344571077243698442868936133394785792601132008141376841223663670716175876962314522187364841941231911928818631683177794465858067509396443742555725617969839680427062345163171131678291451392558148919261962266358823949737423838768753610538712415444208307369445128027050734775849947434353651159062522493612897577129842461317508428182903144872114546202579542796776598266650493123336301060138665911165081357292150141110919442078212091283129030659772718386220203751121164003430376827963323056479482806844080391220049398552061249510995417394256916262432053548457627024979725859693321651289239897152940116185376129977887865568128942909312314866983599228637465381669006347581159286795315071181434914353188706766090514573116778768887677208734307073329649815666504879393080165326621248174906533936534624944749234712281778529617746488861698743506915739394236225440186595594640212449019101166620254202824226375512262431555279838837949588363477903268268"}
I := {"x": "0.39237735554486302862088391807747548782683901543214364012004729717249100121192554173819830263142063786151545134391952017362960645659986711412886122899359484819844004588969762011528142908092347233197898733515198836503266076010535110800110771381643083021672516696036315612518730404086119935885015598690775258379630135988089330383169580692799859435331942567797938924175531992217911951270626992387309006935207254726128422494331353286147522729617831047435069717456347195449022381991955823202262507426557051471952550471891098284132237542871012686139438475629768277688997373868001679820866693985586036273989325709652697898926097240428689235761137229574729395888572960238919087807437861007943419347535655454167082816683698204800757728684483381379065010051721040528177784114236876457525560378632138326374951529554116007071130457602072562971253689726054552571762843097664519828102913281416008378252891912336888273471278165325670168398513389739687945764550056226356973537796061260478084531647104284924835103544891540376700135055584569499649987737096113412494573911812481629315883639552380273390605710273219764409612188427496207919181985859286801724385366542217532000225474881387193048958420720483987434271305796279102363529073721106378233614607120459343718312341907170545557299471329572224401307332647413635951056629126147811256823870564903261510314941134873564313785178948794853956747422463831515263971898932854385173654358955697590398351068752987056201433264789141576834852988822839992643708675372239116426260912832722614667588838586512535398389490935614553990868667099757374329831831950901270744500216798122106947954820980459645825948262099559173604373092030111702865353990624867492432958420076848941649302971420020224899077861536017886463098738265523965444973656356612183272798840101619462014929670033607604132804453410531401778170789144737843982733855613376803324303396115199506038740539670696272911509597690095989945402108610093191088222366737876828693766840549142196968580374080302990036327974289540606193", "y": "4.7873832136446319451534806891016827866095262093133621796179077604707856263007235084588577524245897880403307666721064480147149468537529015772921845137991699482552370788877933936882751080177182012767222730530811441196394771377845660450321199084435053898146959903218142256790619003608984388382959773304665164510010972496425614587816282757817610427315108564014154448407770336969310463664354799582013324307030853637760804680747472234487011874741716271697135147324988629512315287322654761146554235213624254804535202741897373872550951411265834855520651227777803684688707608265954310522574293324791751187963348454141881927770002503683041063405903210800700577886075520608703276720555296960286875191885866217572096751776588904670993986064957523553467427488383701818752713171985433329398441290954339926277859911623574846119739613879152149857671760127515540597899504339723668766317420697813863275043668596621947859733780185423922506332740262115866455881739870017250668285664528222039993797118789734973161110774842352685724044510631382801221215766299213885022580911505689613748877580954729638233857741290298277653468000899525256580551878629621949328553227531698744055935230645607398587798966441503002788341307912800672610572530193354138813152720636278133111619833829296813420723367639110006712811420083884941479743192208884041145668409012333773137496231978971896184857164718009352252419713437903455867646022455986508828160737026485687647554650231627905097793909295005033933337565647150161770752115870290562837079318042421677433159428079658268953502045149618459746304244192030557158391968598308501728132266129472308656559709789710197584351364290573302776430804967539254300614330066265093634816891986770207486346287730011524423357337497865053214471305500610960692589849487036797507899395839251224575690878144767444048257636702847440458470066740647444391371046542632923648117474730354657798655060071579851792709980986763080797650072858306448296379595144712825286519680363827033717332514226048108712933680174581712039"}
H := {"x": "2.1256796539966368586593858935884782113134860992431640625", "y": "5.4828286617118902057654850068502128124237060546875"}
F := {"x": "0.35931111082063501892162530352520693747484470710036399264175605704536408853698930338742417169623882620650554059930599246214313503395355446637908775802819424236092642183786598059974692431498891893877092097805933191497647825440122020526228702147823878800753667532125259661803059525201222475961602474699379849971570362498032524129793763389993927726828501838457327347402587195306038343503410315676893425434815359293892655188117751685891640408560881952363094715586886745104325169919902962230448936873481926048570266209953319993187982316433928487360012631457202527075830378360077336042761602456858934380639297973341077314962877038873621216584769503144821853783063096781836615625594768452181297541027070669574985431283510481590833770041495038883827881560143518612451545293403572612446430800186995119934445814956738907972557351827245094932838874197055611089195596512713678918658658899839763469043617149740728081135963156337424035030159374511421887591403826285883484483168829986865529291126248976575684656442439015992457123893256650564142876192040619330339996315524468614457826207593835638530953790718389500528818427686054898419813543040275756359616783447743247093052478808094766308455810160356013774527615621429543624283209587232951768677976903269538355064729980763544882377784914124505899227280465526004823543376596758044383740081975941045216343271099761778317665829421986031775457499772340274200655277697892255695953645960271861684803644248782353821855764169698306767769959375119806460608608777578110090927580227047969377258194270482685945788404315454308070086929069413369494324917710986712265346071923955507690173985040052995982449553880132267763691397481246097231694732162450227032679288640617404534741393791797518216736244286072131992403923765824432744169777863228634346181921988409897407000563171223746958078311353343537076094136091570307085629261320872758532503425205468695300204667027543610309453912439346567119150196660209122804793265130437766036701441219576762458090981235325649539337008483537757953", "y": "5.5521993756320051285337506082568098822787460265526775935198953272978629190424746465282416032401718751241563896221571486056690850139366327032723557323625081433558457994833686592854969985954102864897514580687849027051832430331902489275975396517492227293746462865290381334061681466187765166050031328019063610394359058101957090816679908202773606320470922516907196954064234746473419061788599359613363901142541360412634135882883576726796786864625620082617570540652618090959746758875589558436703992769197307708979655572572020431798668297647166470439158124932928687557624819181252994933821994141018011360207649767008922481511906002270881084169211119821056087672283939742275735977965070867332972992759444576097744262251786479402134746258657818532462228261542958271660355062240150304723591005941512597735189959394669576761639802944285580651914165771272572224667788683769055885770478239984474188278753150903008687337951925265113141919159081113422719618133424681831618175736831563417635342147389522430618237426757884117704177852639418503397899404707426899650870495947181600623035167534409124809731159960728605755943891611534819750131231762155453090304812387539476043245668812018609402934316427365213419868680574030695689227525369258987854419763993479886217071671620987454500283030464220380008379647218051992849629910498181032303913764034580175228778846163589430800612763166309294347683327011910367865132059564016208798832991926201449347345809682315593845025457572143483084148469546386737970161941211162338896546614184196397157373068073069019364708598118706505538737392861188847669430546137013996913277341353631802893108323466382974665893723314543738280734860088660547095701678053908729601143346761211090351397858600031049137098779473664375022655537331722486154818955901811862575460584522329086361167278006841639463798639503211005338416342654825786951446162408550402403858045428573903500276953101450148294772918573020720796931415788554454765511869303008463934477369101960232700790984013206500410456681874151388208"}

Need to prove:
concyclic(F, H, I, J)

Proof:
By line_definition on C, I, j we get j == Line(C, I)
By line_definition on G, E, perpendicular_line(E, i) we get Line(E, G) == perpendicular_line(E, i)
By line_definition on J, I, k we get k == Line(I, J)
By line_definition on J, A, h we get h == Line(A, J)
By line_definition on E, J, k we get k == Line(E, J)
By line_definition on E, C, f we get f == Line(C, E)
By line_definition on D, G, i we get i == Line(D, G)
By line_definition on A, F, g we get g == Line(A, F)
By line_definition on B, E, f we get f == Line(B, E)
By line_definition on B, D, i we get i == Line(B, D)
By line_definition on D, F, perpendicular_line(D, g) we get Line(D, F) == perpendicular_line(D, g)
By line_definition on D, J, h we get h == Line(D, J)
By line_definition on J, G, k we get k == Line(G, J)
By line_definition on E, D, perpendicular_line(D, f) we get Line(D, E) == perpendicular_line(D, f)
By line_definition on I, E, k we get k == Line(E, I)
By line_definition on C, F, g we get g == Line(C, F)
By line_definition on G, B, i we get i == Line(B, G)
By line_definition on A, D, h we get h == Line(A, D)
By line_definition on I, G, k we get k == Line(G, I)
By line_intersection_definition on E, k, f we get E == line_intersection(f, k)
By perpendicular_line_definition on B, i, perpendicular_line(E, i) we get i == perpendicular_line(B, perpendicular_line(E, i))
By perpendicular_line_definition on B, f, perpendicular_line(D, f) we get f == perpendicular_line(B, perpendicular_line(D, f))
By perpendicular_line_definition on A, g, perpendicular_line(D, g) we get g == perpendicular_line(A, perpendicular_line(D, g))
By perpendicular_line_definition on C, g, perpendicular_line(D, g) we get g == perpendicular_line(C, perpendicular_line(D, g))
By perpendicular_line_definition on G, perpendicular_line(E, i), i we get perpendicular_line(E, i) == perpendicular_line(G, i)
By line_intersection_definition on C, f, g we get C == line_intersection(f, g)
By perpendicular_line_definition on D, i, perpendicular_line(E, i) we get i == perpendicular_line(D, perpendicular_line(E, i))
By line_intersection_definition on D, perpendicular_line(D, g), perpendicular_line(D, f) we get D == line_intersection(perpendicular_line(D, f), perpendicular_line(D, g))
By line_intersection_definition on E, f, perpendicular_line(E, i) we get E == line_intersection(f, perpendicular_line(E, i))
By line_intersection_definition on D, i, perpendicular_line(D, f) we get D == line_intersection(i, perpendicular_line(D, f))
By line_intersection_definition on E, perpendicular_line(E, i), perpendicular_line(D, f) we get E == line_intersection(perpendicular_line(D, f), perpendicular_line(E, i))
By line_intersection_definition on D, i, perpendicular_line(D, g) we get D == line_intersection(i, perpendicular_line(D, g))
By perpendicular_line_definition on E, perpendicular_line(D, f), f we get perpendicular_line(D, f) == perpendicular_line(E, f)
By line_intersection_definition on C, j, f we get C == line_intersection(f, j)
By line_intersection_definition on G, k, i we get G == line_intersection(i, k)
By line_intersection_definition on B, i, f we get B == line_intersection(f, i)
By perpendicular_line_definition on E, f, perpendicular_line(D, f) we get f == perpendicular_line(E, perpendicular_line(D, f))
By line_intersection_definition on D, h, perpendicular_line(D, f) we get D == line_intersection(h, perpendicular_line(D, f))
By line_intersection_definition on E, perpendicular_line(D, f), k we get E == line_intersection(k, perpendicular_line(D, f))
By perpendicular_line_definition on G, i, perpendicular_line(E, i) we get i == perpendicular_line(G, perpendicular_line(E, i))
By line_intersection_definition on C, g, j we get C == line_intersection(g, j)
By perpendicular_line_definition on F, g, perpendicular_line(D, g) we get g == perpendicular_line(F, perpendicular_line(D, g))
By line_intersection_definition on A, g, h we get A == line_intersection(g, h)
By line_intersection_definition on D, h, perpendicular_line(D, g) we get D == line_intersection(h, perpendicular_line(D, g))
By perpendicular_line_definition on C, f, perpendicular_line(D, f) we get f == perpendicular_line(C, perpendicular_line(D, f))
By perpendicular_line_definition on F, perpendicular_line(D, g), g we get perpendicular_line(D, g) == perpendicular_line(F, g)
By line_uniqueness on E, G, k, perpendicular_line(E, i) we get k == perpendicular_line(E, i)
By between_imply_not_between on A, H, C we get collinear_and_not_between(C, A, H)
By between_imply_not_between on C, H, A we get collinear_and_not_between(A, C, H)
By in_imply_collinear on E, B, C we get collinear(B, C, E)
By in_imply_collinear on J, G, E we get collinear(E, G, J)
By in_imply_collinear on I, G, E we get collinear(E, G, I)
By in_imply_collinear on F, C, A we get collinear(A, C, F)
By angle_bisector_draw_angle_v0 on B, A, C we get exists(Line(A, B), Line(A, C))
By angle_bisector_draw_angle_v0 on C, A, B we get exists(Line(A, B), Line(A, C))
By angle_bisector_draw_angle_v0 on A, B, C we get exists(Line(A, B), Line(B, C))
By angle_bisector_draw_angle_v0 on C, B, A we get exists(Line(A, B), Line(B, C))
By same_angle_v1 on C, H, A, B we get angle(A, C, B) == angle(H, C, B) mod 360
By log_of_2_times_distance on A, C, C, H we get log(distance(A, C)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(C, H))
By altitude_definition on D, C, B, perpendicular_line(D, f) we get altitude(D, B, C) == perpendicular_line(D, f)
By collinear_definition on A, H, C we get H in Line(A, C), C in Line(A, H), Line(A, C) == Line(A, H), 0 == 2 * angle(H, A, C) mod 360
By collinear_definition on H, C, A we get C in Line(A, H), A in Line(C, H), Line(A, H) == Line(C, H), 0 == 2 * angle(C, H, A) mod 360
By collinear_definition on A, C, H we get C in Line(A, H), H in Line(A, C), Line(A, C) == Line(A, H), 0 == 2 * angle(C, A, H) mod 360
By collinear_definition on C, A, H we get A in Line(C, H), H in Line(A, C), Line(A, C) == Line(C, H), 0 == 2 * angle(A, C, H) mod 360
By altitude_definition on D, C, A, perpendicular_line(D, g) we get altitude(D, A, C) == perpendicular_line(D, g)
By collinear_definition on H, A, C we get A in Line(C, H), C in Line(A, H), Line(A, H) == Line(C, H), 0 == 2 * angle(A, H, C) mod 360
By collinear_definition on C, H, A we get H in Line(A, C), A in Line(C, H), Line(A, C) == Line(C, H), 0 == 2 * angle(H, C, A) mod 360
By log_of_2_times_distance on C, A, H, A we get log(distance(A, C)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(A, H))
By incenter_concurrency on C, B, A we get incenter(A, B, C) in internal_angle_bisector(A, B, C), incenter(A, B, C) in internal_angle_bisector(B, A, C), incenter(A, B, C) in internal_angle_bisector(A, C, B)
By between_implies_angles on A, H, C we get 180 == angle(A, H, C) mod 360, 0 == angle(H, C, A) mod 360, 0 == angle(C, A, H) mod 360
By between_implies_angles on C, H, A we get 180 == angle(C, H, A) mod 360, 0 == angle(H, A, C) mod 360, 0 == angle(A, C, H) mod 360
By line_definition on I, D, j we get j == Line(D, I)
By concurrent_sufficient_conditions on i, Line(D, F), h we get concurrent(h, i, Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), h, i we get concurrent(h, i, Line(D, F))
By concurrent_sufficient_conditions on Line(D, E), k, f we get concurrent(f, k, Line(D, E))
By concurrent_sufficient_conditions on Line(D, F), i, Line(D, E) we get concurrent(i, Line(D, E), Line(D, F))
By line_definition on H, F, g we get g == Line(F, H)
By concurrent_sufficient_conditions on Line(D, E), f, k we get concurrent(f, k, Line(D, E))
By line_definition on C, D, j we get j == Line(C, D)
By concurrent_sufficient_conditions on Line(D, E), i, Line(D, F) we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), i, h we get concurrent(h, i, Line(D, F))
By concurrent_sufficient_conditions on i, Line(D, E), h we get concurrent(h, i, Line(D, E))
By concurrent_sufficient_conditions on Line(D, F), Line(D, E), i we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), h, Line(D, E) we get concurrent(h, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on h, Line(D, E), Line(D, F) we get concurrent(h, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), Line(D, E), h we get concurrent(h, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on k, f, Line(D, E) we get concurrent(f, k, Line(D, E))
By concurrent_sufficient_conditions on Line(D, E), h, Line(D, F) we get concurrent(h, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on h, Line(D, E), i we get concurrent(h, i, Line(D, E))
By concurrent_sufficient_conditions on h, i, Line(D, F) we get concurrent(h, i, Line(D, F))
By concurrent_sufficient_conditions on k, Line(D, E), f we get concurrent(f, k, Line(D, E))
By concurrent_sufficient_conditions on h, Line(D, F), Line(D, E) we get concurrent(h, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, E), i, h we get concurrent(h, i, Line(D, E))
By concurrent_sufficient_conditions on Line(D, E), Line(D, F), h we get concurrent(h, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on i, Line(D, E), Line(D, F) we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on i, h, Line(D, F) we get concurrent(h, i, Line(D, F))
By concurrent_sufficient_conditions on f, k, Line(D, E) we get concurrent(f, k, Line(D, E))
By concurrent_sufficient_conditions on i, Line(D, F), Line(D, E) we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on f, Line(D, E), k we get concurrent(f, k, Line(D, E))
By concurrent_sufficient_conditions on h, Line(D, F), i we get concurrent(h, i, Line(D, F))
By concurrent_sufficient_conditions on Line(D, E), h, i we get concurrent(h, i, Line(D, E))
By concurrent_sufficient_conditions on h, i, Line(D, E) we get concurrent(h, i, Line(D, E))
By concurrent_sufficient_conditions on Line(D, E), Line(D, F), i we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on i, h, Line(D, E) we get concurrent(h, i, Line(D, E))
By concurrent_sufficient_conditions on Line(D, E), j, h we get concurrent(h, j, Line(D, E))
By line_intersection_definition on D, Line(D, F), j we get D == line_intersection(j, Line(D, F))
By line_intersection_definition on A, g, Line(A, B) we get A == line_intersection(g, Line(A, B))
By concurrent_sufficient_conditions on Line(D, E), j, i we get concurrent(i, j, Line(D, E))
By line_intersection_definition on A, Line(A, B), h we get A == line_intersection(h, Line(A, B))
By perpendicular_line_definition on H, g, Line(D, F) we get g == perpendicular_line(H, Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), j, h we get concurrent(h, j, Line(D, F))
By concurrent_sufficient_conditions on j, Line(D, E), i we get concurrent(i, j, Line(D, E))
By line_intersection_definition on B, f, Line(A, B) we get B == line_intersection(f, Line(A, B))
By line_intersection_definition on D, Line(D, E), j we get D == line_intersection(j, Line(D, E))
By perpendicular_line_definition on J, k, i we get k == perpendicular_line(J, i)
By concurrent_sufficient_conditions on j, Line(D, F), h we get concurrent(h, j, Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), j, i we get concurrent(i, j, Line(D, F))
By line_intersection_definition on B, i, Line(A, B) we get B == line_intersection(i, Line(A, B))
By concurrent_sufficient_conditions on j, Line(D, F), i we get concurrent(i, j, Line(D, F))
By concurrent_sufficient_conditions on j, Line(D, E), h we get concurrent(h, j, Line(D, E))
By perpendicular_line_definition on I, k, i we get k == perpendicular_line(I, i)
By projection_definition on A, F, Line(D, F) we get F == projection(A, Line(D, F))
By projection_definition on D, G, k we get G == projection(D, k)
By projection_definition on C, E, Line(D, E) we get E == projection(C, Line(D, E))
By projection_definition on C, F, Line(D, F) we get F == projection(C, Line(D, F))
By projection_definition on B, E, Line(D, E) we get E == projection(B, Line(D, E))
By projection_definition on B, G, k we get G == projection(B, k)
By perpendicular_direction_conditions_v0_r on F, D, C, A we get 180 == 2 * direction(F, D) - 2 * direction(C, A) mod 360
By same_angle_v1 on C, A, H, E we get angle(A, C, E) == angle(H, C, E) mod 360
By perpendicular_direction_conditions_v0_r on H, C, D, F we get 180 == 2 * direction(H, C) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on H, A, D, F we get 180 == 2 * direction(H, A) - 2 * direction(D, F) mod 360
By probably_between_and_collinear_implies_between on B, E, C we get between(B, E, C)
By same_angle_v0 on C, B, E, H we get angle(B, C, H) == angle(E, C, H) mod 360
By perpendicular_direction_conditions_v0_r on D, F, C, A we get 180 == 2 * direction(D, F) - 2 * direction(C, A) mod 360
By same_angle_v0 on A, C, H, D we get angle(C, A, D) == angle(H, A, D) mod 360
By same_angle_v0 on A, C, H, J we get angle(C, A, J) == angle(H, A, J) mod 360
By same_angle_v0 on A, H, C, B we get angle(C, A, B) == angle(H, A, B) mod 360
By perpendicular_direction_conditions_v0_r on F, D, H, C we get 180 == 2 * direction(F, D) - 2 * direction(H, C) mod 360
By in_imply_collinear on E, J, I we get collinear(E, I, J)
By perpendicular_direction_conditions_v0_r on C, B, E, D we get 180 == 2 * direction(C, B) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on A, C, F, D we get 180 == 2 * direction(A, C) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on C, A, F, D we get 180 == 2 * direction(C, A) - 2 * direction(F, D) mod 360
By same_angle_v0 on C, E, B, A we get angle(B, C, A) == angle(E, C, A) mod 360
By perpendicular_direction_conditions_v0_r on A, C, D, F we get 180 == 2 * direction(A, C) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on C, A, D, F we get 180 == 2 * direction(C, A) - 2 * direction(D, F) mod 360
By same_angle_v1 on C, A, H, I we get angle(A, C, I) == angle(H, C, I) mod 360
By same_angle_v1 on C, A, F, B we get angle(A, C, B) == angle(F, C, B) mod 360
By perpendicular_direction_conditions_v0_r on D, F, A, C we get 180 == 2 * direction(D, F) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on A, H, F, D we get 180 == 2 * direction(A, H) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on D, F, H, C we get 180 == 2 * direction(D, F) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on F, D, C, H we get 180 == 2 * direction(F, D) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on D, F, A, H we get 180 == 2 * direction(D, F) - 2 * direction(A, H) mod 360
By projection_definition on I, G, i we get G == projection(I, i)
By projection_definition on J, G, i we get G == projection(J, i)
By perpendicular_direction_conditions_v0_r on F, D, A, H we get 180 == 2 * direction(F, D) - 2 * direction(A, H) mod 360
By perpendicular_direction_conditions_v0_r on H, C, F, D we get 180 == 2 * direction(H, C) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on A, H, D, F we get 180 == 2 * direction(A, H) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on D, F, H, A we get 180 == 2 * direction(D, F) - 2 * direction(H, A) mod 360
By probably_between_and_collinear_implies_between on I, G, E we get between(E, G, I)
By perpendicular_direction_conditions_v0_r on C, H, D, F we get 180 == 2 * direction(C, H) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on C, H, F, D we get 180 == 2 * direction(C, H) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on H, A, F, D we get 180 == 2 * direction(H, A) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on D, E, C, B we get 180 == 2 * direction(D, E) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on F, D, A, C we get 180 == 2 * direction(F, D) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on C, B, D, E we get 180 == 2 * direction(C, B) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on F, D, H, A we get 180 == 2 * direction(F, D) - 2 * direction(H, A) mod 360
By perpendicular_direction_conditions_v0_r on E, D, C, B we get 180 == 2 * direction(E, D) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on D, F, C, H we get 180 == 2 * direction(D, F) - 2 * direction(C, H) mod 360
By in_imply_collinear on I, J, G we get collinear(G, I, J)
By in_imply_collinear on B, G, D we get collinear(B, D, G)
By in_imply_collinear on H, F, A we get collinear(A, F, H)
By probably_between_and_collinear_implies_between on C, F, A we get between(A, F, C)
By in_imply_collinear on D, A, J we get collinear(A, D, J)
By in_imply_collinear on H, F, C we get collinear(C, F, H)
By probably_between_and_collinear_implies_between on E, J, G we get between(E, J, G)
By in_imply_collinear on D, C, I we get collinear(C, D, I)
By reverse_direction on C, A we get 180 == direction(C, A) - direction(A, C) mod 360
By reverse_direction on A, H we get 180 == direction(A, H) - direction(H, A) mod 360
By reverse_direction on H, A we get 180 == direction(H, A) - direction(A, H) mod 360
By reverse_direction on A, C we get 180 == direction(A, C) - direction(C, A) mod 360
By reverse_direction on C, H we get 180 == direction(C, H) - direction(H, C) mod 360
By reverse_direction on H, C we get 180 == direction(H, C) - direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on D, G, I, E we get 180 == 2 * direction(D, G) - 2 * direction(I, E) mod 360
By same_angle_v0 on A, F, C, D we get angle(C, A, D) == angle(F, A, D) mod 360
By perpendicular_direction_conditions_v0_r on B, D, E, J we get 180 == 2 * direction(B, D) - 2 * direction(E, J) mod 360
By perpendicular_direction_conditions_v0_r on F, D, F, A we get 180 == 2 * direction(F, D) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on G, D, J, G we get 180 == 2 * direction(G, D) - 2 * direction(J, G) mod 360
By perpendicular_direction_conditions_v0_r on J, E, B, G we get 180 == 2 * direction(J, E) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on E, G, G, D we get 180 == 2 * direction(E, G) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on G, D, G, I we get 180 == 2 * direction(G, D) - 2 * direction(G, I) mod 360
By perpendicular_direction_conditions_v0_r on G, B, G, E we get 180 == 2 * direction(G, B) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on G, I, B, D we get 180 == 2 * direction(G, I) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on G, D, E, J we get 180 == 2 * direction(G, D) - 2 * direction(E, J) mod 360
By perpendicular_direction_conditions_v0_r on I, G, G, D we get 180 == 2 * direction(I, G) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on E, I, D, B we get 180 == 2 * direction(E, I) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on I, E, D, B we get 180 == 2 * direction(I, E) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on B, D, J, E we get 180 == 2 * direction(B, D) - 2 * direction(J, E) mod 360
By perpendicular_direction_conditions_v0_r on D, G, E, G we get 180 == 2 * direction(D, G) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on G, B, E, G we get 180 == 2 * direction(G, B) - 2 * direction(E, G) mod 360
By same_angle_v1 on C, F, A, E we get angle(A, C, E) == angle(F, C, E) mod 360
By same_angle_v1 on C, A, F, I we get angle(A, C, I) == angle(F, C, I) mod 360
By perpendicular_direction_conditions_v0_r on E, J, D, G we get 180 == 2 * direction(E, J) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on E, I, G, B we get 180 == 2 * direction(E, I) - 2 * direction(G, B) mod 360
By same_angle_v0 on A, F, C, B we get angle(C, A, B) == angle(F, A, B) mod 360
By perpendicular_direction_conditions_v0_r on D, G, I, J we get 180 == 2 * direction(D, G) - 2 * direction(I, J) mod 360
By perpendicular_direction_conditions_v0_r on E, I, G, D we get 180 == 2 * direction(E, I) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on E, J, B, D we get 180 == 2 * direction(E, J) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on G, I, G, D we get 180 == 2 * direction(G, I) - 2 * direction(G, D) mod 360
By same_angle_v0 on C, E, B, I we get angle(B, C, I) == angle(E, C, I) mod 360
By perpendicular_direction_conditions_v0_r on B, G, J, I we get 180 == 2 * direction(B, G) - 2 * direction(J, I) mod 360
By perpendicular_direction_conditions_v0_r on D, E, E, C we get 180 == 2 * direction(D, E) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on J, G, B, G we get 180 == 2 * direction(J, G) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on D, F, F, C we get 180 == 2 * direction(D, F) - 2 * direction(F, C) mod 360
By same_angle_v0 on C, B, E, F we get angle(B, C, F) == angle(E, C, F) mod 360
By same_angle_v0 on A, F, C, J we get angle(C, A, J) == angle(F, A, J) mod 360
By perpendicular_direction_conditions_v0_r on F, C, D, F we get 180 == 2 * direction(F, C) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on B, D, I, J we get 180 == 2 * direction(B, D) - 2 * direction(I, J) mod 360
By perpendicular_direction_conditions_v0_r on G, B, J, E we get 180 == 2 * direction(G, B) - 2 * direction(J, E) mod 360
By perpendicular_direction_conditions_v0_r on E, J, G, B we get 180 == 2 * direction(E, J) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on I, G, D, B we get 180 == 2 * direction(I, G) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on J, G, G, B we get 180 == 2 * direction(J, G) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on G, D, I, G we get 180 == 2 * direction(G, D) - 2 * direction(I, G) mod 360
By perpendicular_direction_conditions_v0_r on D, G, G, E we get 180 == 2 * direction(D, G) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on B, D, E, G we get 180 == 2 * direction(B, D) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on B, D, I, E we get 180 == 2 * direction(B, D) - 2 * direction(I, E) mod 360
By perpendicular_direction_conditions_v0_r on D, B, I, G we get 180 == 2 * direction(D, B) - 2 * direction(I, G) mod 360
By perpendicular_direction_conditions_v0_r on J, I, G, B we get 180 == 2 * direction(J, I) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on G, B, I, J we get 180 == 2 * direction(G, B) - 2 * direction(I, J) mod 360
By perpendicular_direction_conditions_v0_r on B, G, J, E we get 180 == 2 * direction(B, G) - 2 * direction(J, E) mod 360
By perpendicular_direction_conditions_v0_r on B, G, E, I we get 180 == 2 * direction(B, G) - 2 * direction(E, I) mod 360
By perpendicular_direction_conditions_v0_r on D, G, J, E we get 180 == 2 * direction(D, G) - 2 * direction(J, E) mod 360
By perpendicular_direction_conditions_v0_r on I, J, B, G we get 180 == 2 * direction(I, J) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on B, G, G, J we get 180 == 2 * direction(B, G) - 2 * direction(G, J) mod 360
By perpendicular_direction_conditions_v0_r on F, D, C, F we get 180 == 2 * direction(F, D) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on J, G, B, D we get 180 == 2 * direction(J, G) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on D, G, J, G we get 180 == 2 * direction(D, G) - 2 * direction(J, G) mod 360
By perpendicular_direction_conditions_v0_r on G, D, J, E we get 180 == 2 * direction(G, D) - 2 * direction(J, E) mod 360
By perpendicular_direction_conditions_v0_r on D, G, G, I we get 180 == 2 * direction(D, G) - 2 * direction(G, I) mod 360
By perpendicular_direction_conditions_v0_r on D, F, C, F we get 180 == 2 * direction(D, F) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on D, B, I, E we get 180 == 2 * direction(D, B) - 2 * direction(I, E) mod 360
By perpendicular_direction_conditions_v0_r on B, G, E, G we get 180 == 2 * direction(B, G) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on G, B, E, I we get 180 == 2 * direction(G, B) - 2 * direction(E, I) mod 360
By perpendicular_direction_conditions_v0_r on G, I, D, B we get 180 == 2 * direction(G, I) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on G, J, G, D we get 180 == 2 * direction(G, J) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on B, E, E, D we get 180 == 2 * direction(B, E) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on G, E, D, B we get 180 == 2 * direction(G, E) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on D, E, B, C we get 180 == 2 * direction(D, E) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on G, J, G, B we get 180 == 2 * direction(G, J) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on E, I, B, G we get 180 == 2 * direction(E, I) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on F, D, A, F we get 180 == 2 * direction(F, D) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on G, I, D, G we get 180 == 2 * direction(G, I) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on E, C, D, E we get 180 == 2 * direction(E, C) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on G, D, E, I we get 180 == 2 * direction(G, D) - 2 * direction(E, I) mod 360
By perpendicular_direction_conditions_v0_r on E, I, D, G we get 180 == 2 * direction(E, I) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on D, B, J, G we get 180 == 2 * direction(D, B) - 2 * direction(J, G) mod 360
By perpendicular_direction_conditions_v0_r on D, B, G, I we get 180 == 2 * direction(D, B) - 2 * direction(G, I) mod 360
By perpendicular_direction_conditions_v0_r on E, D, C, E we get 180 == 2 * direction(E, D) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on J, G, D, B we get 180 == 2 * direction(J, G) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on I, J, B, D we get 180 == 2 * direction(I, J) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on F, A, D, F we get 180 == 2 * direction(F, A) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on C, F, F, D we get 180 == 2 * direction(C, F) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on B, C, D, E we get 180 == 2 * direction(B, C) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on E, D, B, E we get 180 == 2 * direction(E, D) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on G, D, I, E we get 180 == 2 * direction(G, D) - 2 * direction(I, E) mod 360
By perpendicular_direction_conditions_v0_r on I, G, D, G we get 180 == 2 * direction(I, G) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on J, E, B, D we get 180 == 2 * direction(J, E) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on G, J, B, D we get 180 == 2 * direction(G, J) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on C, E, E, D we get 180 == 2 * direction(C, E) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on I, E, B, D we get 180 == 2 * direction(I, E) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on J, E, G, D we get 180 == 2 * direction(J, E) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on D, G, I, G we get 180 == 2 * direction(D, G) - 2 * direction(I, G) mod 360
By perpendicular_direction_conditions_v0_r on I, J, D, G we get 180 == 2 * direction(I, J) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on B, D, J, I we get 180 == 2 * direction(B, D) - 2 * direction(J, I) mod 360
By perpendicular_direction_conditions_v0_r on G, D, G, E we get 180 == 2 * direction(G, D) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on D, E, C, E we get 180 == 2 * direction(D, E) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on G, B, I, E we get 180 == 2 * direction(G, B) - 2 * direction(I, E) mod 360
By perpendicular_direction_conditions_v0_r on I, G, B, G we get 180 == 2 * direction(I, G) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on D, B, J, E we get 180 == 2 * direction(D, B) - 2 * direction(J, E) mod 360
By perpendicular_direction_conditions_v0_r on B, D, G, E we get 180 == 2 * direction(B, D) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on C, E, D, E we get 180 == 2 * direction(C, E) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on G, E, D, G we get 180 == 2 * direction(G, E) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on E, J, D, B we get 180 == 2 * direction(E, J) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on D, B, J, I we get 180 == 2 * direction(D, B) - 2 * direction(J, I) mod 360
By perpendicular_direction_conditions_v0_r on E, G, B, D we get 180 == 2 * direction(E, G) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on D, E, E, B we get 180 == 2 * direction(D, E) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on G, J, D, G we get 180 == 2 * direction(G, J) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on B, G, I, G we get 180 == 2 * direction(B, G) - 2 * direction(I, G) mod 360
By perpendicular_direction_conditions_v0_r on B, G, I, J we get 180 == 2 * direction(B, G) - 2 * direction(I, J) mod 360
By perpendicular_direction_conditions_v0_r on I, E, B, G we get 180 == 2 * direction(I, E) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on G, E, B, D we get 180 == 2 * direction(G, E) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on B, E, D, E we get 180 == 2 * direction(B, E) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on I, E, G, D we get 180 == 2 * direction(I, E) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on I, G, G, B we get 180 == 2 * direction(I, G) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on J, E, G, B we get 180 == 2 * direction(J, E) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on I, J, G, B we get 180 == 2 * direction(I, J) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on E, D, B, C we get 180 == 2 * direction(E, D) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on B, G, E, J we get 180 == 2 * direction(B, G) - 2 * direction(E, J) mod 360
By perpendicular_direction_conditions_v0_r on G, B, J, G we get 180 == 2 * direction(G, B) - 2 * direction(J, G) mod 360
By perpendicular_direction_conditions_v0_r on B, D, J, G we get 180 == 2 * direction(B, D) - 2 * direction(J, G) mod 360
By perpendicular_direction_conditions_v0_r on E, I, B, D we get 180 == 2 * direction(E, I) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on B, D, I, G we get 180 == 2 * direction(B, D) - 2 * direction(I, G) mod 360
By perpendicular_direction_conditions_v0_r on G, J, B, G we get 180 == 2 * direction(G, J) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on E, G, D, G we get 180 == 2 * direction(E, G) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on D, B, E, J we get 180 == 2 * direction(D, B) - 2 * direction(E, J) mod 360
By perpendicular_direction_conditions_v0_r on F, D, F, C we get 180 == 2 * direction(F, D) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on G, D, I, J we get 180 == 2 * direction(G, D) - 2 * direction(I, J) mod 360
By perpendicular_direction_conditions_v0_r on E, D, E, B we get 180 == 2 * direction(E, D) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on D, G, E, J we get 180 == 2 * direction(D, G) - 2 * direction(E, J) mod 360
By perpendicular_direction_conditions_v0_r on I, J, G, D we get 180 == 2 * direction(I, J) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on J, I, B, G we get 180 == 2 * direction(J, I) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on J, I, D, G we get 180 == 2 * direction(J, I) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on E, G, D, B we get 180 == 2 * direction(E, G) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on E, C, E, D we get 180 == 2 * direction(E, C) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on J, G, G, D we get 180 == 2 * direction(J, G) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on D, B, G, J we get 180 == 2 * direction(D, B) - 2 * direction(G, J) mod 360
By perpendicular_direction_conditions_v0_r on F, C, F, D we get 180 == 2 * direction(F, C) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on J, G, D, G we get 180 == 2 * direction(J, G) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on G, B, J, I we get 180 == 2 * direction(G, B) - 2 * direction(J, I) mod 360
By perpendicular_direction_conditions_v0_r on B, D, G, I we get 180 == 2 * direction(B, D) - 2 * direction(G, I) mod 360
By perpendicular_direction_conditions_v0_r on J, I, B, D we get 180 == 2 * direction(J, I) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on G, B, I, G we get 180 == 2 * direction(G, B) - 2 * direction(I, G) mod 360
By perpendicular_direction_conditions_v0_r on G, B, G, J we get 180 == 2 * direction(G, B) - 2 * direction(G, J) mod 360
By perpendicular_direction_conditions_v0_r on D, G, J, I we get 180 == 2 * direction(D, G) - 2 * direction(J, I) mod 360
By perpendicular_direction_conditions_v0_r on B, G, J, G we get 180 == 2 * direction(B, G) - 2 * direction(J, G) mod 360
By perpendicular_direction_conditions_v0_r on B, D, E, I we get 180 == 2 * direction(B, D) - 2 * direction(E, I) mod 360
By perpendicular_direction_conditions_v0_r on B, G, I, E we get 180 == 2 * direction(B, G) - 2 * direction(I, E) mod 360
By perpendicular_direction_conditions_v0_r on I, J, D, B we get 180 == 2 * direction(I, J) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on D, B, E, I we get 180 == 2 * direction(D, B) - 2 * direction(E, I) mod 360
By perpendicular_direction_conditions_v0_r on G, E, G, B we get 180 == 2 * direction(G, E) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on D, B, E, G we get 180 == 2 * direction(D, B) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on G, B, E, J we get 180 == 2 * direction(G, B) - 2 * direction(E, J) mod 360
By perpendicular_direction_conditions_v0_r on I, E, G, B we get 180 == 2 * direction(I, E) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on B, G, G, E we get 180 == 2 * direction(B, G) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on G, I, G, B we get 180 == 2 * direction(G, I) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on D, F, F, A we get 180 == 2 * direction(D, F) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on G, D, E, G we get 180 == 2 * direction(G, D) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on D, E, B, E we get 180 == 2 * direction(D, E) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on J, I, G, D we get 180 == 2 * direction(J, I) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on E, J, G, D we get 180 == 2 * direction(E, J) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on E, D, E, C we get 180 == 2 * direction(E, D) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on D, F, A, F we get 180 == 2 * direction(D, F) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on J, E, D, G we get 180 == 2 * direction(J, E) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on C, F, D, F we get 180 == 2 * direction(C, F) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on D, B, I, J we get 180 == 2 * direction(D, B) - 2 * direction(I, J) mod 360
By perpendicular_direction_conditions_v0_r on E, G, G, B we get 180 == 2 * direction(E, G) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on B, D, G, J we get 180 == 2 * direction(B, D) - 2 * direction(G, J) mod 360
By perpendicular_direction_conditions_v0_r on J, E, D, B we get 180 == 2 * direction(J, E) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on E, G, B, G we get 180 == 2 * direction(E, G) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on E, B, E, D we get 180 == 2 * direction(E, B) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on G, J, D, B we get 180 == 2 * direction(G, J) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on F, A, F, D we get 180 == 2 * direction(F, A) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on J, I, D, B we get 180 == 2 * direction(J, I) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on B, C, E, D we get 180 == 2 * direction(B, C) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on G, E, G, D we get 180 == 2 * direction(G, E) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on G, E, B, G we get 180 == 2 * direction(G, E) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on G, B, G, I we get 180 == 2 * direction(G, B) - 2 * direction(G, I) mod 360
By perpendicular_direction_conditions_v0_r on D, G, E, I we get 180 == 2 * direction(D, G) - 2 * direction(E, I) mod 360
By perpendicular_direction_conditions_v0_r on B, G, G, I we get 180 == 2 * direction(B, G) - 2 * direction(G, I) mod 360
By perpendicular_direction_conditions_v0_r on D, G, G, J we get 180 == 2 * direction(D, G) - 2 * direction(G, J) mod 360
By perpendicular_direction_conditions_v0_r on G, I, B, G we get 180 == 2 * direction(G, I) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on I, E, D, G we get 180 == 2 * direction(I, E) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on G, D, G, J we get 180 == 2 * direction(G, D) - 2 * direction(G, J) mod 360
By perpendicular_direction_conditions_v0_r on D, B, G, E we get 180 == 2 * direction(D, B) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on E, J, B, G we get 180 == 2 * direction(E, J) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on E, B, D, E we get 180 == 2 * direction(E, B) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on A, F, D, F we get 180 == 2 * direction(A, F) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on G, D, J, I we get 180 == 2 * direction(G, D) - 2 * direction(J, I) mod 360
By perpendicular_direction_conditions_v0_r on I, G, B, D we get 180 == 2 * direction(I, G) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on A, F, F, D we get 180 == 2 * direction(A, F) - 2 * direction(F, D) mod 360
By reverse_direction on C, B we get 180 == direction(C, B) - direction(B, C) mod 360
By internal_angle_bisector_definition_v0_r on H, A, H, C we get Line(A, C) == internal_angle_bisector(H, C, H)
By collinear_definition on C, E, B we get E in Line(B, C), B in Line(C, E), Line(B, C) == Line(C, E), 0 == 2 * angle(E, C, B) mod 360
By internal_angle_bisector_definition_v0 on A, I, B, C we get angle(A, C, I) == angle(I, C, B) mod 360
By altitude_definition on C, D, E, f we get f == altitude(C, D, E)
By internal_angle_bisector_definition_v0 on B, I, A, C we get angle(B, C, I) == angle(I, C, A) mod 360
By altitude_definition on C, F, D, g we get g == altitude(C, D, F)
By collinear_definition on A, C, F we get C in Line(A, F), F in Line(A, C), Line(A, C) == Line(A, F), 0 == 2 * angle(C, A, F) mod 360
By collinear_definition on A, F, C we get F in Line(A, C), C in Line(A, F), Line(A, C) == Line(A, F), 0 == 2 * angle(F, A, C) mod 360
By internal_angle_bisector_definition_v0_r on C, H, C, A we get Line(A, H) == internal_angle_bisector(C, A, C)
By altitude_definition on B, E, D, f we get f == altitude(B, D, E)
By internal_angle_bisector_definition_v0_r on A, C, A, H we get Line(C, H) == internal_angle_bisector(A, H, A)
By internal_angle_bisector_definition_v0_r on A, H, A, C we get Line(C, H) == internal_angle_bisector(A, C, A)
By internal_angle_bisector_definition_v0_r on C, A, C, H we get Line(A, H) == internal_angle_bisector(C, H, C)
By altitude_definition on A, F, D, g we get g == altitude(A, D, F)
By collinear_definition on C, B, E we get B in Line(C, E), E in Line(B, C), Line(B, C) == Line(C, E), 0 == 2 * angle(B, C, E) mod 360
By collinear_definition on C, A, F we get A in Line(C, F), F in Line(A, C), Line(A, C) == Line(C, F), 0 == 2 * angle(A, C, F) mod 360
By internal_angle_bisector_definition_v0_r on H, C, H, A we get Line(A, C) == internal_angle_bisector(H, A, H)
By collinear_definition on C, F, A we get F in Line(A, C), A in Line(C, F), Line(A, C) == Line(C, F), 0 == 2 * angle(F, C, A) mod 360
By same_angle_v3 on J, G, E, A we get angle(G, J, A) == angle(E, J, A) + 180 mod 360
By same_angle_v1 on E, J, G, B we get angle(G, E, B) == angle(J, E, B) mod 360
By same_angle_v1 on E, G, I, B we get angle(G, E, B) == angle(I, E, B) mod 360
By same_angle_v0 on E, G, I, C we get angle(G, E, C) == angle(I, E, C) mod 360
By same_angle_v1 on G, J, E, D we get angle(E, G, D) == angle(J, G, D) mod 360
By same_angle_v0 on G, E, J, B we get angle(E, G, B) == angle(J, G, B) mod 360
By same_angle_v1 on B, E, C, G we get angle(C, B, G) == angle(E, B, G) mod 360
By same_angle_v3 on E, B, C, I we get angle(B, E, I) == angle(C, E, I) + 180 mod 360
By same_angle_v2 on F, C, A, D we get angle(C, F, D) == angle(A, F, D) + 180 mod 360
By same_angle_v1 on B, E, C, A we get angle(C, B, A) == angle(E, B, A) mod 360
By same_angle_v2 on G, E, I, B we get angle(E, G, B) == angle(I, G, B) + 180 mod 360
By same_angle_v3 on G, I, E, D we get angle(I, G, D) == angle(E, G, D) + 180 mod 360
By same_angle_v0 on E, G, I, D we get angle(G, E, D) == angle(I, E, D) mod 360
By same_angle_v0 on E, J, G, D we get angle(G, E, D) == angle(J, E, D) mod 360
By same_angle_v0 on E, G, J, C we get angle(G, E, C) == angle(J, E, C) mod 360
By same_angle_v1 on B, E, C, D we get angle(C, B, D) == angle(E, B, D) mod 360
By same_angle_v2 on E, B, C, J we get angle(B, E, J) == angle(C, E, J) + 180 mod 360
By same_angle_v2 on E, B, C, G we get angle(B, E, G) == angle(C, E, G) + 180 mod 360
By same_angle_v3 on J, G, E, D we get angle(G, J, D) == angle(E, J, D) + 180 mod 360
By same_angle_v1 on I, E, G, C we get angle(E, I, C) == angle(G, I, C) mod 360
By same_angle_v3 on E, B, C, D we get angle(B, E, D) == angle(C, E, D) + 180 mod 360
By altitude_definition on J, G, B, k we get k == altitude(J, B, G)
By altitude_definition on D, I, G, i we get i == altitude(D, G, I)
By altitude_definition on E, B, D, k we get k == altitude(E, B, D)
By altitude_definition on D, I, J, i we get i == altitude(D, I, J)
By altitude_definition on B, I, E, i we get i == altitude(B, E, I)
By altitude_definition on I, G, B, k we get k == altitude(I, B, G)
By altitude_definition on D, A, F, Line(D, F) we get Line(D, F) == altitude(D, A, F)
By collinear_definition on G, I, E we get I in Line(E, G), E in Line(G, I), Line(E, G) == Line(G, I), 0 == 2 * angle(I, G, E) mod 360
By internal_angle_bisector_definition_v0 on B, J, C, A we get angle(B, A, J) == angle(J, A, C) mod 360
By perpendicular_angle_conditions_v0 on A, F, D we get angle(A, F, D) == orientation(A, F, D) mod 360
By altitude_definition on J, D, B, k we get k == altitude(J, B, D)
By altitude_definition on B, G, J, i we get i == altitude(B, G, J)
By perpendicular_angle_conditions_v0 on J, G, D we get angle(J, G, D) == orientation(D, J, G) mod 360
By altitude_definition on D, A, H, Line(D, F) we get Line(D, F) == altitude(D, A, H)
By altitude_definition on D, G, J, i we get i == altitude(D, G, J)
By perpendicular_angle_conditions_v0 on B, E, D we get angle(B, E, D) == orientation(B, E, D) mod 360
By perpendicular_angle_conditions_v0 on I, G, B we get angle(I, G, B) == orientation(B, I, G) mod 360
By altitude_definition on D, G, E, i we get i == altitude(D, E, G)
By perpendicular_angle_conditions_v0 on B, G, E we get angle(B, G, E) == orientation(B, G, E) mod 360
By perpendicular_angle_conditions_v0 on B, G, I we get angle(B, G, I) == orientation(B, G, I) mod 360
By altitude_definition on D, H, C, Line(D, F) we get Line(D, F) == altitude(D, C, H)
By perpendicular_angle_conditions_v0 on D, F, C we get angle(D, F, C) == orientation(C, D, F) mod 360
By altitude_definition on B, G, E, i we get i == altitude(B, E, G)
By collinear_definition on G, J, E we get J in Line(E, G), E in Line(G, J), Line(E, G) == Line(G, J), 0 == 2 * angle(J, G, E) mod 360
By collinear_definition on E, G, I we get G in Line(E, I), I in Line(E, G), Line(E, G) == Line(E, I), 0 == 2 * angle(G, E, I) mod 360
By altitude_definition on B, E, J, i we get i == altitude(B, E, J)
By perpendicular_angle_conditions_v0 on C, E, D we get angle(C, E, D) == orientation(C, E, D) mod 360
By perpendicular_angle_conditions_v0 on D, G, I we get angle(D, G, I) == orientation(D, G, I) mod 360
By altitude_definition on D, E, B, Line(D, E) we get Line(D, E) == altitude(D, B, E)
By altitude_definition on E, D, G, k we get k == altitude(E, D, G)
By perpendicular_angle_conditions_v0 on D, F, A we get angle(D, F, A) == orientation(A, D, F) mod 360
By altitude_definition on J, G, D, k we get k == altitude(J, D, G)
By collinear_definition on E, B, C we get B in Line(C, E), C in Line(B, E), Line(B, E) == Line(C, E), 0 == 2 * angle(B, E, C) mod 360
By collinear_definition on J, E, G we get E in Line(G, J), G in Line(E, J), Line(E, J) == Line(G, J), 0 == 2 * angle(E, J, G) mod 360
By collinear_definition on I, G, E we get G in Line(E, I), E in Line(G, I), Line(E, I) == Line(G, I), 0 == 2 * angle(G, I, E) mod 360
By collinear_definition on E, G, J we get G in Line(E, J), J in Line(E, G), Line(E, G) == Line(E, J), 0 == 2 * angle(G, E, J) mod 360
By internal_angle_bisector_definition_v0 on C, J, B, A we get angle(C, A, J) == angle(J, A, B) mod 360
By internal_angle_bisector_definition_v0 on B, D, C, A we get angle(B, A, D) == angle(D, A, C) mod 360
By altitude_definition on B, J, I, i we get i == altitude(B, I, J)
By collinear_definition on I, E, G we get E in Line(G, I), G in Line(E, I), Line(E, I) == Line(G, I), 0 == 2 * angle(E, I, G) mod 360
By altitude_definition on D, E, C, Line(D, E) we get Line(D, E) == altitude(D, C, E)
By altitude_definition on D, F, C, Line(D, F) we get Line(D, F) == altitude(D, C, F)
By altitude_definition on D, J, E, i we get i == altitude(D, E, J)
By perpendicular_angle_conditions_v0 on E, G, D we get angle(E, G, D) == orientation(D, E, G) mod 360
By altitude_definition on I, D, B, k we get k == altitude(I, B, D)
By collinear_definition on B, E, C we get E in Line(B, C), C in Line(B, E), Line(B, C) == Line(B, E), 0 == 2 * angle(E, B, C) mod 360
By altitude_definition on E, B, G, k we get k == altitude(E, B, G)
By perpendicular_angle_conditions_v0 on D, G, E we get angle(D, G, E) == orientation(D, G, E) mod 360
By perpendicular_angle_conditions_v0 on I, G, D we get angle(I, G, D) == orientation(D, I, G) mod 360
By perpendicular_angle_conditions_v0 on J, G, B we get angle(J, G, B) == orientation(B, J, G) mod 360
By collinear_definition on F, C, A we get C in Line(A, F), A in Line(C, F), Line(A, F) == Line(C, F), 0 == 2 * angle(C, F, A) mod 360
By perpendicular_angle_conditions_v0 on E, G, B we get angle(E, G, B) == orientation(B, E, G) mod 360
By altitude_definition on D, I, E, i we get i == altitude(D, E, I)
By altitude_definition on B, I, G, i we get i == altitude(B, G, I)
By collinear_definition on E, J, G we get J in Line(E, G), G in Line(E, J), Line(E, G) == Line(E, J), 0 == 2 * angle(J, E, G) mod 360
By altitude_definition on I, G, D, k we get k == altitude(I, D, G)
By perpendicular_angle_conditions_v0 on C, F, D we get angle(C, F, D) == orientation(C, F, D) mod 360
By collinear_definition on E, C, B we get C in Line(B, E), B in Line(C, E), Line(B, E) == Line(C, E), 0 == 2 * angle(C, E, B) mod 360
By collinear_definition on G, E, J we get E in Line(G, J), J in Line(E, G), Line(E, G) == Line(G, J), 0 == 2 * angle(E, G, J) mod 360
By altitude_definition on H, D, F, g we get g == altitude(H, D, F)
By perpendicular_angle_conditions_v0 on D, G, J we get angle(D, G, J) == orientation(D, G, J) mod 360
By perpendicular_angle_conditions_v0 on B, G, J we get angle(B, G, J) == orientation(B, G, J) mod 360
By collinear_definition on B, C, E we get C in Line(B, E), E in Line(B, C), Line(B, C) == Line(B, E), 0 == 2 * angle(C, B, E) mod 360
By collinear_definition on G, E, I we get E in Line(G, I), I in Line(E, G), Line(E, G) == Line(G, I), 0 == 2 * angle(E, G, I) mod 360
By internal_angle_bisector_definition_v0 on C, D, B, A we get angle(C, A, D) == angle(D, A, B) mod 360
By perpendicular_angle_conditions_v0 on D, E, B we get angle(D, E, B) == orientation(B, D, E) mod 360
By collinear_definition on E, I, G we get I in Line(E, G), G in Line(E, I), Line(E, G) == Line(E, I), 0 == 2 * angle(I, E, G) mod 360
By collinear_definition on J, G, E we get G in Line(E, J), E in Line(G, J), Line(E, J) == Line(G, J), 0 == 2 * angle(G, J, E) mod 360
By perpendicular_angle_conditions_v0 on D, E, C we get angle(D, E, C) == orientation(C, D, E) mod 360
By collinear_definition on F, A, C we get A in Line(C, F), C in Line(A, F), Line(A, F) == Line(C, F), 0 == 2 * angle(A, F, C) mod 360
By internal_angle_bisector_definition_v0 on C, D, A, B we get angle(C, B, D) == angle(D, B, A) mod 360
By internal_angle_bisector_definition_v0 on C, G, A, B we get angle(C, B, G) == angle(G, B, A) mod 360
By internal_angle_bisector_definition_v0 on A, G, C, B we get angle(A, B, G) == angle(G, B, C) mod 360
By internal_angle_bisector_definition_v0 on A, D, C, B we get angle(A, B, D) == angle(D, B, C) mod 360
By concyclic_sufficient_conditions_v1 on C, E, D, F we get concyclic(C, D, E, F)
By concurrent_sufficient_conditions on h, g, Line(A, B) we get concurrent(g, h, Line(A, B))
By concurrent_sufficient_conditions on Line(A, B), h, g we get concurrent(g, h, Line(A, B))
By concurrent_sufficient_conditions on Line(A, B), i, f we get concurrent(f, i, Line(A, B))
By concurrent_sufficient_conditions on i, f, Line(A, B) we get concurrent(f, i, Line(A, B))
By concurrent_sufficient_conditions on g, Line(A, B), h we get concurrent(g, h, Line(A, B))
By concurrent_sufficient_conditions on f, i, Line(A, B) we get concurrent(f, i, Line(A, B))
By concurrent_sufficient_conditions on h, Line(A, B), g we get concurrent(g, h, Line(A, B))
By concurrent_sufficient_conditions on Line(A, B), f, i we get concurrent(f, i, Line(A, B))
By concurrent_sufficient_conditions on f, Line(A, B), i we get concurrent(f, i, Line(A, B))
By concurrent_sufficient_conditions on Line(A, B), g, h we get concurrent(g, h, Line(A, B))
By concurrent_sufficient_conditions on i, Line(A, B), f we get concurrent(f, i, Line(A, B))
By concurrent_sufficient_conditions on g, h, Line(A, B) we get concurrent(g, h, Line(A, B))
By same_angle_v3 on J, I, E, D we get angle(I, J, D) == angle(E, J, D) + 180 mod 360
By same_angle_v1 on B, G, D, A we get angle(D, B, A) == angle(G, B, A) mod 360
By same_angle_v1 on J, D, A, G we get angle(A, J, G) == angle(D, J, G) mod 360
By same_angle_v0 on J, D, A, E we get angle(A, J, E) == angle(D, J, E) mod 360
By same_angle_v1 on J, A, D, I we get angle(A, J, I) == angle(D, J, I) mod 360
By same_angle_v1 on A, J, D, F we get angle(D, A, F) == angle(J, A, F) mod 360
By same_angle_v0 on B, G, D, C we get angle(D, B, C) == angle(G, B, C) mod 360
By same_angle_v1 on D, G, B, F we get angle(B, D, F) == angle(G, D, F) mod 360
By same_angle_v0 on B, G, D, E we get angle(D, B, E) == angle(G, B, E) mod 360
By same_angle_v1 on D, G, B, E we get angle(B, D, E) == angle(G, D, E) mod 360
By same_angle_v1 on I, J, G, C we get angle(G, I, C) == angle(J, I, C) mod 360
By same_angle_v0 on J, G, I, D we get angle(G, J, D) == angle(I, J, D) mod 360
By same_angle_v1 on A, J, D, C we get angle(D, A, C) == angle(J, A, C) mod 360
By same_angle_v0 on J, I, G, A we get angle(G, J, A) == angle(I, J, A) mod 360
By same_angle_v1 on A, J, D, H we get angle(D, A, H) == angle(J, A, H) mod 360
By same_angle_v0 on A, J, D, B we get angle(D, A, B) == angle(J, A, B) mod 360
By same_angle_v2 on J, I, E, A we get angle(I, J, A) == angle(E, J, A) + 180 mod 360
By same_angle_v1 on I, J, E, C we get angle(E, I, C) == angle(J, I, C) mod 360
By between_imply_not_between on G, J, E we get collinear_and_not_between(E, G, J)
By projection_definition on H, F, Line(D, F) we get F == projection(H, Line(D, F))
By between_imply_not_between on I, G, E we get collinear_and_not_between(E, I, G)
By between_imply_not_between on C, E, B we get collinear_and_not_between(B, C, E)
By between_imply_not_between on A, F, C we get collinear_and_not_between(C, A, F)
By between_imply_not_between on C, F, A we get collinear_and_not_between(A, C, F)
By between_imply_not_between on E, G, I we get collinear_and_not_between(G, E, I)
By between_imply_not_between on E, J, G we get collinear_and_not_between(G, E, J)
By between_imply_not_between on B, E, C we get collinear_and_not_between(C, B, E)
By same_angle_v0 on C, D, I, F we get angle(D, C, F) == angle(I, C, F) mod 360
By same_angle_v1 on C, F, H, D we get angle(F, C, D) == angle(H, C, D) mod 360
By same_angle_v0 on C, D, I, H we get angle(D, C, H) == angle(I, C, H) mod 360
By same_angle_v1 on F, H, A, D we get angle(A, F, D) == angle(H, F, D) mod 360
By same_angle_v0 on I, C, D, G we get angle(C, I, G) == angle(D, I, G) mod 360
By same_angle_v3 on F, C, H, D we get angle(C, F, D) == angle(H, F, D) + 180 mod 360
By same_angle_v0 on I, D, C, E we get angle(C, I, E) == angle(D, I, E) mod 360
By same_angle_v1 on C, D, I, B we get angle(D, C, B) == angle(I, C, B) mod 360
By same_angle_v1 on D, G, B, C we get angle(B, D, C) == angle(G, D, C) mod 360
By same_angle_v1 on I, J, E, D we get angle(E, I, D) == angle(J, I, D) mod 360
By same_angle_v1 on C, H, A, D we get angle(A, C, D) == angle(H, C, D) mod 360
By same_angle_v0 on I, D, C, J we get angle(C, I, J) == angle(D, I, J) mod 360
By perpendicular_direction_conditions_v0_r on H, F, F, D we get 180 == 2 * direction(H, F) - 2 * direction(F, D) mod 360
By same_angle_v1 on D, B, G, J we get angle(B, D, J) == angle(G, D, J) mod 360
By same_angle_v1 on I, E, G, D we get angle(E, I, D) == angle(G, I, D) mod 360
By same_angle_v0 on C, D, I, A we get angle(D, C, A) == angle(I, C, A) mod 360
By same_angle_v0 on D, B, G, A we get angle(B, D, A) == angle(G, D, A) mod 360
By same_angle_v0 on C, B, E, D we get angle(B, C, D) == angle(E, C, D) mod 360
By same_angle_v1 on C, D, I, E we get angle(D, C, E) == angle(I, C, E) mod 360
By same_angle_v0 on D, G, B, I we get angle(B, D, I) == angle(G, D, I) mod 360
By same_angle_v1 on I, G, J, D we get angle(G, I, D) == angle(J, I, D) mod 360
By same_angle_v1 on C, F, A, D we get angle(A, C, D) == angle(F, C, D) mod 360
By perpendicular_direction_conditions_v0_r on H, F, D, F we get 180 == 2 * direction(H, F) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on D, F, H, F we get 180 == 2 * direction(D, F) - 2 * direction(H, F) mod 360
By perpendicular_direction_conditions_v0_r on F, D, F, H we get 180 == 2 * direction(F, D) - 2 * direction(F, H) mod 360
By divide_by_2_mod_180_v0 on G, B, E, A, B, D we get angle(A, B, D) == angle(G, B, E) mod 360
By divide_by_2_mod_180_v0 on I, E, D, G, B, E we get angle(G, B, E) == angle(I, E, D) mod 360
By divide_by_2_mod_180_v0 on G, B, E, G, E, D we get angle(G, B, E) == angle(G, E, D) mod 360
By between_imply_segment_sum on C, E, B we get distance(B, C) == distance(C, E) + distance(B, E)
By perpendicular_direction_conditions_v0_r on F, D, H, F we get 180 == 2 * direction(F, D) - 2 * direction(H, F) mod 360
By probably_between_and_collinear_implies_between on E, J, I we get between(E, J, I)
By perpendicular_direction_conditions_v0_r on D, F, F, H we get 180 == 2 * direction(D, F) - 2 * direction(F, H) mod 360
By perpendicular_direction_conditions_v0_r on F, H, F, D we get 180 == 2 * direction(F, H) - 2 * direction(F, D) mod 360
By probably_between_and_collinear_implies_between on D, G, B we get between(B, G, D)
By divide_by_2_mod_180_v0 on A, B, D, J, E, D we get angle(A, B, D) == angle(J, E, D) mod 360
By perpendicular_direction_conditions_v0_r on F, H, D, F we get 180 == 2 * direction(F, H) - 2 * direction(D, F) mod 360
By probably_between_and_collinear_implies_between on C, D, I we get between(C, D, I)
By probably_between_and_collinear_implies_between on I, G, J we get between(I, G, J)
By divide_by_2_mod_180_v0 on F, A, D, F, A, J we get angle(F, A, D) == angle(F, A, J) mod 360
By divide_by_2_mod_180_v1 on J, A, C, B, A, D we get angle(B, A, D) == angle(J, A, C) mod 360
By divide_by_2_mod_180_v1 on E, B, D, D, E, I we get angle(D, E, I) == angle(E, B, D) mod 360
By probably_between_and_collinear_implies_between on H, F, C we get between(C, F, H)
By probably_between_and_collinear_implies_between on J, D, A we get between(A, D, J)
By collinear_definition on D, G, B we get G in Line(B, D), B in Line(D, G), Line(B, D) == Line(D, G), 0 == 2 * angle(G, D, B) mod 360
By divide_by_2_mod_180_v1 on G, B, A, D, E, I we get angle(D, E, I) == angle(G, B, A) mod 360
By divide_by_2_mod_180_v1 on D, A, H, J, A, C we get angle(D, A, H) == angle(J, A, C) mod 360
By divide_by_2_mod_180_v0 on C, A, J, C, A, D we get angle(C, A, D) == angle(C, A, J) mod 360
By divide_by_2_mod_180_v0 on F, A, D, H, A, J we get angle(F, A, D) == angle(H, A, J) mod 360
By divide_by_2_mod_180_v1 on C, B, D, D, E, I we get angle(C, B, D) == angle(D, E, I) mod 360
By divide_by_2_mod_180_v0 on I, E, D, G, B, C we get angle(G, B, C) == angle(I, E, D) mod 360
By probably_between_and_collinear_implies_between on F, H, A we get between(A, H, F)
By divide_by_2_mod_180_v0 on A, B, G, G, E, D we get angle(A, B, G) == angle(G, E, D) mod 360
By divide_by_2_mod_180_v0 on C, A, J, F, A, D we get angle(C, A, J) == angle(F, A, D) mod 360
By divide_by_2_mod_180_v0 on D, B, E, J, E, D we get angle(D, B, E) == angle(J, E, D) mod 360
By divide_by_2_mod_180_v1 on C, B, D, E, B, G we get angle(C, B, D) == angle(E, B, G) mod 360
By divide_by_2_mod_180_v0 on C, A, J, H, A, D we get angle(C, A, J) == angle(H, A, D) mod 360
By divide_by_2_mod_180_v0 on J, A, B, F, A, D we get angle(F, A, D) == angle(J, A, B) mod 360
By divide_by_2_mod_180_v1 on E, B, G, E, B, D we get angle(E, B, D) == angle(E, B, G) mod 360
By divide_by_2_mod_180_v0 on A, B, G, A, B, D we get angle(A, B, D) == angle(A, B, G) mod 360
By divide_by_2_mod_180_v1 on E, B, D, G, B, A we get angle(E, B, D) == angle(G, B, A) mod 360
By divide_by_2_mod_180_v1 on C, B, D, D, E, J we get angle(C, B, D) == angle(D, E, J) mod 360
By divide_by_2_mod_180_v0 on H, A, D, F, A, J we get angle(F, A, J) == angle(H, A, D) mod 360
By divide_by_2_mod_180_v1 on D, A, F, J, A, C we get angle(D, A, F) == angle(J, A, C) mod 360
By divide_by_2_mod_180_v1 on E, B, D, D, E, G we get angle(D, E, G) == angle(E, B, D) mod 360
By divide_by_2_mod_180_v1 on J, A, F, B, A, D we get angle(B, A, D) == angle(J, A, F) mod 360
By divide_by_2_mod_180_v0 on H, A, J, H, A, D we get angle(H, A, D) == angle(H, A, J) mod 360
By divide_by_2_mod_180_v1 on C, B, G, D, E, J we get angle(C, B, G) == angle(D, E, J) mod 360
By divide_by_2_mod_180_v1 on D, E, J, E, B, D we get angle(D, E, J) == angle(E, B, D) mod 360
By divide_by_2_mod_180_v0 on J, A, B, C, A, D we get angle(C, A, D) == angle(J, A, B) mod 360
By divide_by_2_mod_180_v1 on D, A, H, B, A, J we get angle(B, A, J) == angle(D, A, H) mod 360
By divide_by_2_mod_180_v1 on B, A, J, B, A, D we get angle(B, A, D) == angle(B, A, J) mod 360
By divide_by_2_mod_180_v0 on J, E, D, G, B, C we get angle(G, B, C) == angle(J, E, D) mod 360
By collinear_definition on D, B, G we get B in Line(D, G), G in Line(B, D), Line(B, D) == Line(D, G), 0 == 2 * angle(B, D, G) mod 360
By divide_by_2_mod_180_v0 on H, A, D, J, A, B we get angle(H, A, D) == angle(J, A, B) mod 360
By divide_by_2_mod_180_v1 on J, A, H, D, A, C we get angle(D, A, C) == angle(J, A, H) mod 360
By divide_by_2_mod_180_v0 on D, A, B, C, A, J we get angle(C, A, J) == angle(D, A, B) mod 360
By divide_by_2_mod_180_v1 on B, A, J, D, A, F we get angle(B, A, J) == angle(D, A, F) mod 360
By collinear_definition on B, D, G we get D in Line(B, G), G in Line(B, D), Line(B, D) == Line(B, G), 0 == 2 * angle(D, B, G) mod 360
By divide_by_2_mod_180_v0 on G, B, E, D, B, C we get angle(D, B, C) == angle(G, B, E) mod 360
By divide_by_2_mod_180_v0 on F, A, J, C, A, D we get angle(C, A, D) == angle(F, A, J) mod 360
By divide_by_2_mod_180_v0 on D, A, B, F, A, J we get angle(D, A, B) == angle(F, A, J) mod 360
By divide_by_2_mod_180_v0 on G, B, E, J, E, D we get angle(G, B, E) == angle(J, E, D) mod 360
By divide_by_2_mod_180_v1 on D, E, J, D, B, A we get angle(D, B, A) == angle(D, E, J) mod 360
By divide_by_2_mod_180_v1 on J, A, H, B, A, D we get angle(B, A, D) == angle(J, A, H) mod 360
By divide_by_2_mod_180_v1 on D, B, A, D, E, I we get angle(D, B, A) == angle(D, E, I) mod 360
By divide_by_2_mod_180_v0 on A, B, G, I, E, D we get angle(A, B, G) == angle(I, E, D) mod 360
By reverse_direction on A, J we get 180 == direction(A, J) - direction(J, A) mod 360
By divide_by_2_mod_180_v1 on E, B, G, D, E, I we get angle(D, E, I) == angle(E, B, G) mod 360
By divide_by_2_mod_180_v1 on C, B, D, G, B, A we get angle(C, B, D) == angle(G, B, A) mod 360
By divide_by_2_mod_180_v1 on J, A, F, D, A, C we get angle(D, A, C) == angle(J, A, F) mod 360
By divide_by_2_mod_180_v0 on D, B, E, G, B, C we get angle(D, B, E) == angle(G, B, C) mod 360
By divide_by_2_mod_180_v0 on H, A, J, C, A, D we get angle(C, A, D) == angle(H, A, J) mod 360
By divide_by_2_mod_180_v1 on D, E, G, G, B, A we get angle(D, E, G) == angle(G, B, A) mod 360
By reverse_direction on J, G we get 180 == direction(J, G) - direction(G, J) mod 360
By divide_by_2_mod_180_v1 on D, A, F, J, A, H we get angle(D, A, F) == angle(J, A, H) mod 360
By divide_by_2_mod_180_v0 on D, B, E, A, B, G we get angle(A, B, G) == angle(D, B, E) mod 360
By collinear_definition on A, H, F we get H in Line(A, F), F in Line(A, H), Line(A, F) == Line(A, H), 0 == 2 * angle(H, A, F) mod 360
By divide_by_2_mod_180_v0 on A, B, D, G, E, D we get angle(A, B, D) == angle(G, E, D) mod 360
By divide_by_2_mod_180_v1 on B, A, J, D, A, C we get angle(B, A, J) == angle(D, A, C) mod 360
By divide_by_2_mod_180_v0 on D, B, E, G, E, D we get angle(D, B, E) == angle(G, E, D) mod 360
By divide_by_2_mod_180_v1 on C, B, D, C, B, G we get angle(C, B, D) == angle(C, B, G) mod 360
By divide_by_2_mod_180_v1 on C, B, G, D, E, I we get angle(C, B, G) == angle(D, E, I) mod 360
By reverse_direction on G, I we get 180 == direction(G, I) - direction(I, G) mod 360
By divide_by_2_mod_180_v0 on G, B, C, A, B, D we get angle(A, B, D) == angle(G, B, C) mod 360
By divide_by_2_mod_180_v0 on A, B, G, D, B, C we get angle(A, B, G) == angle(D, B, C) mod 360
By divide_by_2_mod_180_v1 on D, E, J, G, B, A we get angle(D, E, J) == angle(G, B, A) mod 360
By divide_by_2_mod_180_v1 on D, E, G, C, B, D we get angle(C, B, D) == angle(D, E, G) mod 360
By divide_by_2_mod_180_v1 on C, B, G, D, B, A we get angle(C, B, G) == angle(D, B, A) mod 360
By divide_by_2_mod_180_v0 on D, B, E, I, E, D we get angle(D, B, E) == angle(I, E, D) mod 360
By divide_by_2_mod_180_v0 on G, E, D, D, B, C we get angle(D, B, C) == angle(G, E, D) mod 360
By divide_by_2_mod_180_v1 on D, E, G, D, B, A we get angle(D, B, A) == angle(D, E, G) mod 360
By divide_by_2_mod_180_v1 on E, B, G, D, E, G we get angle(D, E, G) == angle(E, B, G) mod 360
By divide_by_2_mod_180_v0 on H, A, J, D, A, B we get angle(D, A, B) == angle(H, A, J) mod 360
By divide_by_2_mod_180_v1 on J, A, F, D, A, H we get angle(D, A, H) == angle(J, A, F) mod 360
By reverse_direction on D, E we get 180 == direction(D, E) - direction(E, D) mod 360
By collinear_definition on J, A, D we get A in Line(D, J), D in Line(A, J), Line(A, J) == Line(D, J), 0 == 2 * angle(A, J, D) mod 360
By divide_by_2_mod_180_v1 on D, E, J, E, B, G we get angle(D, E, J) == angle(E, B, G) mod 360
By divide_by_2_mod_180_v1 on E, B, G, D, B, A we get angle(D, B, A) == angle(E, B, G) mod 360
By divide_by_2_mod_180_v1 on C, B, G, D, E, G we get angle(C, B, G) == angle(D, E, G) mod 360
By divide_by_2_mod_180_v0 on I, E, D, A, B, D we get angle(A, B, D) == angle(I, E, D) mod 360
By divide_by_2_mod_180_v0 on J, E, D, A, B, G we get angle(A, B, G) == angle(J, E, D) mod 360
By reverse_direction on J, E we get 180 == direction(J, E) - direction(E, J) mod 360
By reverse_direction on E, B we get 180 == direction(E, B) - direction(B, E) mod 360
By divide_by_2_mod_180_v0 on I, E, D, D, B, C we get angle(D, B, C) == angle(I, E, D) mod 360
By divide_by_2_mod_180_v1 on C, B, G, E, B, D we get angle(C, B, G) == angle(E, B, D) mod 360
By collinear_definition on G, D, B we get D in Line(B, G), B in Line(D, G), Line(B, G) == Line(D, G), 0 == 2 * angle(D, G, B) mod 360
By collinear_definition on C, F, H we get F in Line(C, H), H in Line(C, F), Line(C, F) == Line(C, H), 0 == 2 * angle(F, C, H) mod 360
By divide_by_2_mod_180_v0 on J, E, D, D, B, C we get angle(D, B, C) == angle(J, E, D) mod 360
By internal_angle_bisector_definition_v0 on H, F, H, A we get angle(F, A, H) == angle(H, A, F) mod 360
By collinear_definition on I, J, E we get J in Line(E, I), E in Line(I, J), Line(E, I) == Line(I, J), 0 == 2 * angle(J, I, E) mod 360
By divide_by_2_mod_180_v0 on G, B, C, G, E, D we get angle(G, B, C) == angle(G, E, D) mod 360
By collinear_definition on A, D, J we get D in Line(A, J), J in Line(A, D), Line(A, D) == Line(A, J), 0 == 2 * angle(D, A, J) mod 360
By reverse_direction on I, J we get 180 == direction(I, J) - direction(J, I) mod 360
By internal_angle_bisector_definition_v0 on H, F, H, C we get angle(F, C, H) == angle(H, C, F) mod 360
By reverse_direction on C, F we get 180 == direction(C, F) - direction(F, C) mod 360
By collinear_definition on I, G, J we get G in Line(I, J), J in Line(G, I), Line(G, I) == Line(I, J), 0 == 2 * angle(G, I, J) mod 360
By collinear_definition on G, J, I we get J in Line(G, I), I in Line(G, J), Line(G, I) == Line(G, J), 0 == 2 * angle(J, G, I) mod 360
By reverse_direction on E, I we get 180 == direction(E, I) - direction(I, E) mod 360
By collinear_definition on A, J, D we get J in Line(A, D), D in Line(A, J), Line(A, D) == Line(A, J), 0 == 2 * angle(J, A, D) mod 360
By collinear_definition on C, H, F we get H in Line(C, F), F in Line(C, H), Line(C, F) == Line(C, H), 0 == 2 * angle(H, C, F) mod 360
By reverse_direction on C, I we get 180 == direction(C, I) - direction(I, C) mod 360
By reverse_direction on E, D we get 180 == direction(E, D) - direction(D, E) mod 360
By reverse_direction on I, G we get 180 == direction(I, G) - direction(G, I) mod 360
By reverse_direction on E, J we get 180 == direction(E, J) - direction(J, E) mod 360
By reverse_direction on J, A we get 180 == direction(J, A) - direction(A, J) mod 360
By reverse_direction on I, E we get 180 == direction(I, E) - direction(E, I) mod 360
By collinear_definition on J, E, I we get E in Line(I, J), I in Line(E, J), Line(E, J) == Line(I, J), 0 == 2 * angle(E, J, I) mod 360
By reverse_direction on F, D we get 180 == direction(F, D) - direction(D, F) mod 360
By reverse_direction on B, G we get 180 == direction(B, G) - direction(G, B) mod 360
By between_imply_segment_sum on A, F, C we get distance(A, C) == distance(A, F) + distance(C, F)
By collinear_definition on J, D, A we get D in Line(A, J), A in Line(D, J), Line(A, J) == Line(D, J), 0 == 2 * angle(D, J, A) mod 360
By collinear_definition on J, I, G we get I in Line(G, J), G in Line(I, J), Line(G, J) == Line(I, J), 0 == 2 * angle(I, J, G) mod 360
By collinear_definition on E, J, I we get J in Line(E, I), I in Line(E, J), Line(E, I) == Line(E, J), 0 == 2 * angle(J, E, I) mod 360
By reverse_direction on I, C we get 180 == direction(I, C) - direction(C, I) mod 360
By collinear_definition on E, I, J we get I in Line(E, J), J in Line(E, I), Line(E, I) == Line(E, J), 0 == 2 * angle(I, E, J) mod 360
By reverse_direction on B, E we get 180 == direction(B, E) - direction(E, B) mod 360
By reverse_direction on D, G we get 180 == direction(D, G) - direction(G, D) mod 360
By collinear_definition on G, I, J we get I in Line(G, J), J in Line(G, I), Line(G, I) == Line(G, J), 0 == 2 * angle(I, G, J) mod 360
By reverse_direction on D, B we get 180 == direction(D, B) - direction(B, D) mod 360
By collinear_definition on J, G, I we get G in Line(I, J), I in Line(G, J), Line(G, J) == Line(I, J), 0 == 2 * angle(G, J, I) mod 360
By collinear_definition on B, G, D we get G in Line(B, D), D in Line(B, G), Line(B, D) == Line(B, G), 0 == 2 * angle(G, B, D) mod 360
By reverse_direction on E, G we get 180 == direction(E, G) - direction(G, E) mod 360
By between_imply_segment_sum on E, J, G we get distance(E, G) == distance(E, J) + distance(G, J)
By reverse_direction on A, B we get 180 == direction(A, B) - direction(B, A) mod 360
By reverse_direction on D, F we get 180 == direction(D, F) - direction(F, D) mod 360
By collinear_definition on I, J, G we get J in Line(G, I), G in Line(I, J), Line(G, I) == Line(I, J), 0 == 2 * angle(J, I, G) mod 360
By reverse_direction on F, A we get 180 == direction(F, A) - direction(A, F) mod 360
By collinear_definition on A, F, H we get F in Line(A, H), H in Line(A, F), Line(A, F) == Line(A, H), 0 == 2 * angle(F, A, H) mod 360
By between_imply_segment_sum on I, G, E we get distance(E, I) == distance(G, I) + distance(E, G)
By collinear_definition on J, I, E we get I in Line(E, J), E in Line(I, J), Line(E, J) == Line(I, J), 0 == 2 * angle(I, J, E) mod 360
By reverse_direction on C, E we get 180 == direction(C, E) - direction(E, C) mod 360
By reverse_direction on A, F we get 180 == direction(A, F) - direction(F, A) mod 360
By collinear_definition on I, E, J we get E in Line(I, J), J in Line(E, I), Line(E, I) == Line(I, J), 0 == 2 * angle(E, I, J) mod 360
By reverse_direction on G, D we get 180 == direction(G, D) - direction(D, G) mod 360
By reverse_direction on E, C we get 180 == direction(E, C) - direction(C, E) mod 360
By reverse_direction on B, D we get 180 == direction(B, D) - direction(D, B) mod 360
By reverse_direction on G, E we get 180 == direction(G, E) - direction(E, G) mod 360
By reverse_direction on G, B we get 180 == direction(G, B) - direction(B, G) mod 360
By collinear_definition on G, B, D we get B in Line(D, G), D in Line(B, G), Line(B, G) == Line(D, G), 0 == 2 * angle(B, G, D) mod 360
By reverse_direction on G, J we get 180 == direction(G, J) - direction(J, G) mod 360
By reverse_direction on B, A we get 180 == direction(B, A) - direction(A, B) mod 360
By reverse_direction on J, I we get 180 == direction(J, I) - direction(I, J) mod 360
By reverse_direction on F, C we get 180 == direction(F, C) - direction(C, F) mod 360
By same_angle_v2 on D, A, J, F we get angle(A, D, F) == angle(J, D, F) + 180 mod 360
By same_angle_v3 on D, J, A, B we get angle(J, D, B) == angle(A, D, B) + 180 mod 360
By same_angle_v3 on D, C, I, G we get angle(C, D, G) == angle(I, D, G) + 180 mod 360
By same_angle_v2 on D, J, A, G we get angle(J, D, G) == angle(A, D, G) + 180 mod 360
By external_angle_bisector_definition_v0_r on D, B, D, E we get Line(B, E) == external_angle_bisector(D, E, D)
By same_angle_v3 on D, C, I, E we get angle(C, D, E) == angle(I, D, E) + 180 mod 360
By same_angle_v3 on D, C, I, B we get angle(C, D, B) == angle(I, D, B) + 180 mod 360
By same_angle_v2 on D, A, J, E we get angle(A, D, E) == angle(J, D, E) + 180 mod 360
By same_angle_v2 on D, I, C, F we get angle(I, D, F) == angle(C, D, F) + 180 mod 360
By internal_angle_bisector_definition_v0_r on I, B, E, G we get Line(B, G) == internal_angle_bisector(E, G, I)
By external_angle_bisector_definition_v0_r on D, I, D, G we get Line(G, I) == external_angle_bisector(D, G, D)
By collinear_definition on C, I, D we get I in Line(C, D), D in Line(C, I), Line(C, D) == Line(C, I), 0 == 2 * angle(I, C, D) mod 360
By external_angle_bisector_definition_v0_r on D, E, D, G we get Line(E, G) == external_angle_bisector(D, G, D)
By external_angle_bisector_definition_v0_r on I, D, I, G we get Line(D, G) == external_angle_bisector(I, G, I)
By external_angle_bisector_definition_v0_r on J, D, E, G we get Line(D, G) == external_angle_bisector(E, G, J)
By internal_angle_bisector_definition_v0_r on E, I, A, C we get Line(C, I) == internal_angle_bisector(A, C, E)
By internal_angle_bisector_definition_v0_r on J, G, J, E we get Line(E, G) == internal_angle_bisector(J, E, J)
By external_angle_bisector_definition_v0_r on D, J, D, G we get Line(G, J) == external_angle_bisector(D, G, D)
By external_angle_bisector_definition_v0_r on D, C, D, F we get Line(C, F) == external_angle_bisector(D, F, D)
By internal_angle_bisector_definition_v0_r on D, E, B, G we get Line(E, G) == internal_angle_bisector(B, G, D)
By internal_angle_bisector_definition_v0 on B, D, A, C we get angle(B, C, D) == angle(D, C, A) mod 360
By external_angle_bisector_definition_v0_r on J, B, J, G we get Line(B, G) == external_angle_bisector(J, G, J)
By internal_angle_bisector_definition_v0_r on C, D, B, E we get Line(D, E) == internal_angle_bisector(B, E, C)
By collinear_definition on F, H, C we get H in Line(C, F), C in Line(F, H), Line(C, F) == Line(F, H), 0 == 2 * angle(H, F, C) mod 360
By internal_angle_bisector_definition_v0_r on H, C, F, A we get Line(A, C) == internal_angle_bisector(F, A, H)
By external_angle_bisector_definition_v0_r on C, D, C, E we get Line(D, E) == external_angle_bisector(C, E, C)
By internal_angle_bisector_definition_v0_r on A, D, C, F we get Line(D, F) == internal_angle_bisector(A, F, C)
By external_angle_bisector_definition_v0_r on D, A, D, F we get Line(A, F) == external_angle_bisector(D, F, D)
By external_angle_bisector_definition_v0_r on I, B, I, G we get Line(B, G) == external_angle_bisector(I, G, I)
By external_angle_bisector_definition_v0_r on E, B, J, G we get Line(B, G) == external_angle_bisector(E, G, J)
By external_angle_bisector_definition_v0_r on B, E, B, G we get Line(E, G) == external_angle_bisector(B, G, B)
By external_angle_bisector_definition_v0_r on I, E, J, G we get Line(E, G) == external_angle_bisector(I, G, J)
By internal_angle_bisector_definition_v0_r on E, J, E, G we get Line(G, J) == internal_angle_bisector(E, G, E)
By collinear_definition on C, D, I we get D in Line(C, I), I in Line(C, D), Line(C, D) == Line(C, I), 0 == 2 * angle(D, C, I) mod 360
By internal_angle_bisector_definition_v0_r on I, B, J, G we get Line(B, G) == internal_angle_bisector(I, G, J)
By external_angle_bisector_definition_v0_r on B, D, B, E we get Line(D, E) == external_angle_bisector(B, E, B)
By internal_angle_bisector_definition_v0_r on B, J, F, A we get Line(A, J) == internal_angle_bisector(B, A, F)
By internal_angle_bisector_definition_v0_r on I, G, J, E we get Line(E, G) == internal_angle_bisector(I, E, J)
By external_angle_bisector_definition_v0_r on E, B, E, G we get Line(B, G) == external_angle_bisector(E, G, E)
By collinear_definition on H, A, F we get A in Line(F, H), F in Line(A, H), Line(A, H) == Line(F, H), 0 == 2 * angle(A, H, F) mod 360
By perpendicular_angle_conditions_v0 on H, F, D we get angle(H, F, D) == orientation(D, H, F) mod 360
By internal_angle_bisector_definition_v0_r on I, E, I, G we get Line(E, G) == internal_angle_bisector(I, G, I)
By external_angle_bisector_definition_v0_r on B, I, B, G we get Line(G, I) == external_angle_bisector(B, G, B)
By collinear_definition on H, C, F we get C in Line(F, H), F in Line(C, H), Line(C, H) == Line(F, H), 0 == 2 * angle(C, H, F) mod 360
By internal_angle_bisector_definition_v0_r on B, J, H, A we get Line(A, J) == internal_angle_bisector(B, A, H)
By internal_angle_bisector_definition_v0_r on E, I, H, C we get Line(C, I) == internal_angle_bisector(E, C, H)
By external_angle_bisector_definition_v0_r on J, D, J, G we get Line(D, G) == external_angle_bisector(J, G, J)
By reverse_direction on A, D we get 180 == direction(A, D) - direction(D, A) mod 360
By internal_angle_bisector_definition_v0_r on E, D, I, G we get Line(D, G) == internal_angle_bisector(E, G, I)
By external_angle_bisector_definition_v0_r on A, D, A, F we get Line(D, F) == external_angle_bisector(A, F, A)
By internal_angle_bisector_definition_v0_r on B, I, D, G we get Line(G, I) == internal_angle_bisector(B, G, D)
By external_angle_bisector_definition_v0_r on C, D, C, F we get Line(D, F) == external_angle_bisector(C, F, C)
By internal_angle_bisector_definition_v0_r on F, C, F, A we get Line(A, C) == internal_angle_bisector(F, A, F)
By external_angle_bisector_definition_v0_r on B, J, B, G we get Line(G, J) == external_angle_bisector(B, G, B)
By internal_angle_bisector_definition_v0_r on E, I, E, G we get Line(G, I) == internal_angle_bisector(E, G, E)
By internal_angle_bisector_definition_v0_r on E, I, F, C we get Line(C, I) == internal_angle_bisector(E, C, F)
By internal_angle_bisector_definition_v0_r on F, I, B, C we get Line(C, I) == internal_angle_bisector(B, C, F)
By internal_angle_bisector_definition_v0_r on B, D, H, A we get Line(A, D) == internal_angle_bisector(B, A, H)
By internal_angle_bisector_definition_v0_r on J, E, J, G we get Line(E, G) == internal_angle_bisector(J, G, J)
By internal_angle_bisector_definition_v0_r on C, A, C, F we get Line(A, F) == internal_angle_bisector(C, F, C)
By internal_angle_bisector_definition_v0_r on A, G, E, B we get Line(B, G) == internal_angle_bisector(A, B, E)
By internal_angle_bisector_definition_v0 on A, D, B, C we get angle(A, C, D) == angle(D, C, B) mod 360
By external_angle_bisector_definition_v0_r on D, C, D, E we get Line(C, E) == external_angle_bisector(D, E, D)
By internal_angle_bisector_definition_v0_r on E, B, E, C we get Line(B, C) == internal_angle_bisector(E, C, E)
By external_angle_bisector_definition_v0_r on E, D, E, G we get Line(D, G) == external_angle_bisector(E, G, E)
By internal_angle_bisector_definition_v0 on C, F, C, H we get angle(C, H, F) == angle(F, H, C) mod 360
By internal_angle_bisector_definition_v0_r on C, B, C, E we get Line(B, E) == internal_angle_bisector(C, E, C)
By internal_angle_bisector_definition_v0_r on A, C, A, F we get Line(C, F) == internal_angle_bisector(A, F, A)
By internal_angle_bisector_definition_v0_r on G, E, G, J we get Line(E, J) == internal_angle_bisector(G, J, G)
By internal_angle_bisector_definition_v0_r on G, E, G, I we get Line(E, I) == internal_angle_bisector(G, I, G)
By collinear_definition on I, C, D we get C in Line(D, I), D in Line(C, I), Line(C, I) == Line(D, I), 0 == 2 * angle(C, I, D) mod 360
By internal_angle_bisector_definition_v0_r on F, A, H, C we get Line(A, C) == internal_angle_bisector(F, C, H)
By collinear_definition on F, C, H we get C in Line(F, H), H in Line(C, F), Line(C, F) == Line(F, H), 0 == 2 * angle(C, F, H) mod 360
By internal_angle_bisector_definition_v0_r on G, I, G, E we get Line(E, I) == internal_angle_bisector(G, E, G)
By collinear_definition on H, F, A we get F in Line(A, H), A in Line(F, H), Line(A, H) == Line(F, H), 0 == 2 * angle(F, H, A) mod 360
By collinear_definition on F, A, H we get A in Line(F, H), H in Line(A, F), Line(A, F) == Line(F, H), 0 == 2 * angle(A, F, H) mod 360
By internal_angle_bisector_definition_v0_r on G, J, G, E we get Line(E, J) == internal_angle_bisector(G, E, G)
By internal_angle_bisector_definition_v0_r on F, A, F, C we get Line(A, C) == internal_angle_bisector(F, C, F)
By internal_angle_bisector_definition_v0_r on B, J, D, G we get Line(G, J) == internal_angle_bisector(B, G, D)
By internal_angle_bisector_definition_v0_r on E, C, E, B we get Line(B, C) == internal_angle_bisector(E, B, E)
By internal_angle_bisector_definition_v0_r on C, E, C, B we get Line(B, E) == internal_angle_bisector(C, B, C)
By collinear_definition on F, H, A we get H in Line(A, F), A in Line(F, H), Line(A, F) == Line(F, H), 0 == 2 * angle(H, F, A) mod 360
By internal_angle_bisector_definition_v0_r on B, E, B, C we get Line(C, E) == internal_angle_bisector(B, C, B)
By perpendicular_angle_conditions_v0 on D, F, H we get angle(D, F, H) == orientation(D, F, H) mod 360
By internal_angle_bisector_definition_v0_r on H, I, B, C we get Line(C, I) == internal_angle_bisector(B, C, H)
By internal_angle_bisector_definition_v0 on A, F, A, H we get angle(A, H, F) == angle(F, H, A) mod 360
By internal_angle_bisector_definition_v0_r on B, C, B, E we get Line(C, E) == internal_angle_bisector(B, E, B)
By collinear_definition on I, D, C we get D in Line(C, I), C in Line(D, I), Line(C, I) == Line(D, I), 0 == 2 * angle(D, I, C) mod 360
By internal_angle_bisector_definition_v0_r on J, D, I, G we get Line(D, G) == internal_angle_bisector(I, G, J)
By internal_angle_bisector_definition_v0_r on E, G, E, J we get Line(G, J) == internal_angle_bisector(E, J, E)
By internal_angle_bisector_definition_v0_r on E, D, A, B we get Line(B, D) == internal_angle_bisector(A, B, E)
By internal_angle_bisector_definition_v0_r on B, D, F, A we get Line(A, D) == internal_angle_bisector(B, A, F)
By internal_angle_bisector_definition_v0_r on E, G, E, I we get Line(G, I) == internal_angle_bisector(E, I, E)
By reverse_direction on J, D we get 180 == direction(J, D) - direction(D, J) mod 360
By collinear_definition on H, F, C we get F in Line(C, H), C in Line(F, H), Line(C, H) == Line(F, H), 0 == 2 * angle(F, H, C) mod 360
By internal_angle_bisector_definition_v0_r on I, G, I, E we get Line(E, G) == internal_angle_bisector(I, E, I)
By same_angle_v2 on D, C, I, J we get angle(C, D, J) == angle(I, D, J) + 180 mod 360
By same_angle_v2 on D, I, C, A we get angle(I, D, A) == angle(C, D, A) + 180 mod 360
By same_angle_v2 on D, A, J, C we get angle(A, D, C) == angle(J, D, C) + 180 mod 360
By same_angle_v3 on D, J, A, I we get angle(J, D, I) == angle(A, D, I) + 180 mod 360
By collinear_definition on D, J, A we get J in Line(A, D), A in Line(D, J), Line(A, D) == Line(D, J), 0 == 2 * angle(J, D, A) mod 360
By collinear_definition on D, A, J we get A in Line(D, J), J in Line(A, D), Line(A, D) == Line(D, J), 0 == 2 * angle(A, D, J) mod 360
By altitude_definition on D, H, F, Line(D, F) we get Line(D, F) == altitude(D, F, H)
By collinear_definition on D, I, C we get I in Line(C, D), C in Line(D, I), Line(C, D) == Line(D, I), 0 == 2 * angle(I, D, C) mod 360
By collinear_definition on D, C, I we get C in Line(D, I), I in Line(C, D), Line(C, D) == Line(D, I), 0 == 2 * angle(C, D, I) mod 360
By between_imply_not_between on H, F, C we get collinear_and_not_between(C, H, F)
By between_imply_not_between on F, H, A we get collinear_and_not_between(A, F, H)
By between_imply_not_between on B, G, D we get collinear_and_not_between(D, B, G)
By between_imply_not_between on E, J, I we get collinear_and_not_between(I, E, J)
By between_imply_not_between on J, D, A we get collinear_and_not_between(A, J, D)
By between_imply_not_between on A, H, F we get collinear_and_not_between(F, A, H)
By between_imply_not_between on A, D, J we get collinear_and_not_between(D, A, J)
By between_imply_not_between on I, D, C we get collinear_and_not_between(C, I, D)
By between_imply_not_between on D, G, B we get collinear_and_not_between(B, D, G)
By between_imply_not_between on C, F, H we get collinear_and_not_between(F, C, H)
By between_imply_not_between on I, J, E we get collinear_and_not_between(E, I, J)
By between_imply_not_between on C, D, I we get collinear_and_not_between(D, C, I)
By between_imply_not_between on I, G, J we get collinear_and_not_between(G, I, J)
By between_imply_not_between on J, G, I we get collinear_and_not_between(G, J, I)
By divide_by_2_mod_180_v3 on E, J, A, D, C, A we get angle(E, J, A) == angle(D, C, A) + 180 mod 360
By divide_by_2_mod_180_v0 on E, C, I, I, J, A we get angle(E, C, I) == angle(I, J, A) mod 360
By divide_by_2_mod_180_v1 on B, A, D, E, I, C we get angle(B, A, D) == angle(E, I, C) mod 360
By divide_by_2_mod_180_v1 on D, J, I, A, C, I we get angle(A, C, I) == angle(D, J, I) mod 360
By divide_by_2_mod_180_v1 on B, A, D, G, I, C we get angle(B, A, D) == angle(G, I, C) mod 360
By divide_by_2_mod_180_v0 on D, I, E, H, A, J we get angle(D, I, E) == angle(H, A, J) mod 360
By divide_by_2_mod_180_v2 on E, C, D, E, J, A we get angle(E, C, D) == angle(E, J, A) + 180 mod 360
By divide_by_2_mod_180_v1 on A, C, I, D, J, G we get angle(A, C, I) == angle(D, J, G) mod 360
By divide_by_2_mod_180_v1 on J, A, C, E, I, D we get angle(E, I, D) == angle(J, A, C) mod 360
By divide_by_2_mod_180_v1 on B, A, J, G, I, C we get angle(B, A, J) == angle(G, I, C) mod 360
By divide_by_2_mod_180_v0 on E, C, D, I, J, D we get angle(E, C, D) == angle(I, J, D) mod 360
By divide_by_2_mod_180_v1 on A, C, D, A, J, G we get angle(A, C, D) == angle(A, J, G) mod 360
By divide_by_2_mod_180_v0 on D, A, B, D, I, G we get angle(D, A, B) == angle(D, I, G) mod 360
By divide_by_2_mod_180_v1 on J, I, C, D, A, F we get angle(D, A, F) == angle(J, I, C) mod 360
By divide_by_2_mod_180_v0 on H, A, D, C, I, J we get angle(C, I, J) == angle(H, A, D) mod 360
By divide_by_2_mod_180_v1 on H, C, I, A, J, I we get angle(A, J, I) == angle(H, C, I) mod 360
By divide_by_2_mod_180_v1 on D, J, G, H, C, I we get angle(D, J, G) == angle(H, C, I) mod 360
By divide_by_2_mod_180_v3 on D, C, E, A, J, E we get angle(D, C, E) == angle(A, J, E) + 180 mod 360
By between_imply_segment_sum on F, H, A we get distance(A, F) == distance(F, H) + distance(A, H)
By divide_by_2_mod_180_v1 on J, I, D, J, A, C we get angle(J, A, C) == angle(J, I, D) mod 360
By between_imply_segment_sum on H, F, C we get distance(C, H) == distance(F, H) + distance(C, F)
By divide_by_2_mod_180_v2 on E, C, I, E, J, D we get angle(E, C, I) == angle(E, J, D) + 180 mod 360
By divide_by_2_mod_180_v1 on J, I, C, D, A, H we get angle(D, A, H) == angle(J, I, C) mod 360
By between_imply_segment_sum on I, G, J we get distance(I, J) == distance(G, I) + distance(G, J)
By divide_by_2_mod_180_v1 on G, I, C, J, A, F we get angle(G, I, C) == angle(J, A, F) mod 360
By divide_by_2_mod_180_v0 on H, A, D, D, I, E we get angle(D, I, E) == angle(H, A, D) mod 360
By divide_by_2_mod_180_v1 on F, C, I, A, J, I we get angle(A, J, I) == angle(F, C, I) mod 360
By divide_by_2_mod_180_v1 on D, J, G, D, C, B we get angle(D, C, B) == angle(D, J, G) mod 360
By divide_by_2_mod_180_v1 on D, C, E, D, J, G we get angle(D, C, E) == angle(D, J, G) mod 360
By divide_by_2_mod_180_v3 on D, C, B, D, J, E we get angle(D, C, B) == angle(D, J, E) + 180 mod 360
By divide_by_2_mod_180_v1 on D, C, E, A, J, G we get angle(A, J, G) == angle(D, C, E) mod 360
By divide_by_2_mod_180_v0 on D, I, J, F, A, J we get angle(D, I, J) == angle(F, A, J) mod 360
By divide_by_2_mod_180_v2 on D, J, E, D, C, E we get angle(D, J, E) == angle(D, C, E) + 180 mod 360
By divide_by_2_mod_180_v0 on G, J, D, D, C, F we get angle(D, C, F) == angle(G, J, D) mod 360
By divide_by_2_mod_180_v0 on C, I, J, D, A, B we get angle(C, I, J) == angle(D, A, B) mod 360
By divide_by_2_mod_180_v0 on H, A, J, C, I, G we get angle(C, I, G) == angle(H, A, J) mod 360
By divide_by_2_mod_180_v1 on J, I, C, J, A, F we get angle(J, A, F) == angle(J, I, C) mod 360
By divide_by_2_mod_180_v3 on E, J, D, D, C, F we get angle(E, J, D) == angle(D, C, F) + 180 mod 360
By divide_by_2_mod_180_v1 on B, A, J, J, I, D we get angle(B, A, J) == angle(J, I, D) mod 360
By divide_by_2_mod_180_v2 on D, C, H, E, J, A we get angle(D, C, H) == angle(E, J, A) + 180 mod 360
By divide_by_2_mod_180_v0 on D, C, H, I, J, A we get angle(D, C, H) == angle(I, J, A) mod 360
By divide_by_2_mod_180_v3 on H, C, D, A, J, E we get angle(H, C, D) == angle(A, J, E) + 180 mod 360
By divide_by_2_mod_180_v1 on D, J, I, D, C, B we get angle(D, C, B) == angle(D, J, I) mod 360
By divide_by_2_mod_180_v0 on C, I, E, F, A, J we get angle(C, I, E) == angle(F, A, J) mod 360
By divide_by_2_mod_180_v1 on F, C, I, A, J, G we get angle(A, J, G) == angle(F, C, I) mod 360
By divide_by_2_mod_180_v1 on D, A, H, G, I, D we get angle(D, A, H) == angle(G, I, D) mod 360
By divide_by_2_mod_180_v0 on I, C, A, I, J, A we get angle(I, C, A) == angle(I, J, A) mod 360
By divide_by_2_mod_180_v1 on F, C, D, D, J, I we get angle(D, J, I) == angle(F, C, D) mod 360
By divide_by_2_mod_180_v3 on E, J, A, B, C, I we get angle(E, J, A) == angle(B, C, I) + 180 mod 360
By divide_by_2_mod_180_v0 on G, J, A, I, C, F we get angle(G, J, A) == angle(I, C, F) mod 360
By divide_by_2_mod_180_v0 on D, I, J, H, A, D we get angle(D, I, J) == angle(H, A, D) mod 360
By divide_by_2_mod_180_v3 on I, C, E, A, J, E we get angle(I, C, E) == angle(A, J, E) + 180 mod 360
By divide_by_2_mod_180_v0 on H, A, D, D, I, G we get angle(D, I, G) == angle(H, A, D) mod 360
By divide_by_2_mod_180_v1 on D, J, G, I, C, E we get angle(D, J, G) == angle(I, C, E) mod 360
By divide_by_2_mod_180_v1 on D, J, I, A, C, D we get angle(A, C, D) == angle(D, J, I) mod 360
By divide_by_2_mod_180_v2 on D, C, F, E, J, A we get angle(D, C, F) == angle(E, J, A) + 180 mod 360
By divide_by_2_mod_180_v1 on J, A, F, G, I, D we get angle(G, I, D) == angle(J, A, F) mod 360
By divide_by_2_mod_180_v0 on C, I, J, F, A, J we get angle(C, I, J) == angle(F, A, J) mod 360
By divide_by_2_mod_180_v0 on C, A, D, C, I, E we get angle(C, A, D) == angle(C, I, E) mod 360
By divide_by_2_mod_180_v0 on C, A, D, D, I, G we get angle(C, A, D) == angle(D, I, G) mod 360
By divide_by_2_mod_180_v0 on D, I, J, C, A, J we get angle(C, A, J) == angle(D, I, J) mod 360
By divide_by_2_mod_180_v2 on D, J, E, F, C, I we get angle(D, J, E) == angle(F, C, I) + 180 mod 360
By divide_by_2_mod_180_v0 on I, J, D, D, C, A we get angle(D, C, A) == angle(I, J, D) mod 360
By divide_by_2_mod_180_v1 on D, A, H, E, I, C we get angle(D, A, H) == angle(E, I, C) mod 360
By divide_by_2_mod_180_v0 on E, C, D, I, J, A we get angle(E, C, D) == angle(I, J, A) mod 360
By divide_by_2_mod_180_v3 on D, C, B, A, J, E we get angle(D, C, B) == angle(A, J, E) + 180 mod 360
By divide_by_2_mod_180_v0 on C, I, G, F, A, J we get angle(C, I, G) == angle(F, A, J) mod 360
By divide_by_2_mod_180_v0 on B, C, I, G, J, D we get angle(B, C, I) == angle(G, J, D) mod 360
By divide_by_2_mod_180_v0 on D, C, F, G, J, A we get angle(D, C, F) == angle(G, J, A) mod 360
By divide_by_2_mod_180_v0 on D, I, E, C, A, J we get angle(C, A, J) == angle(D, I, E) mod 360
By divide_by_2_mod_180_v1 on E, I, D, J, A, H we get angle(E, I, D) == angle(J, A, H) mod 360
By divide_by_2_mod_180_v0 on C, I, E, H, A, J we get angle(C, I, E) == angle(H, A, J) mod 360
By divide_by_2_mod_180_v2 on D, C, F, E, J, D we get angle(D, C, F) == angle(E, J, D) + 180 mod 360
By divide_by_2_mod_180_v1 on H, C, I, D, J, I we get angle(D, J, I) == angle(H, C, I) mod 360
By divide_by_2_mod_180_v3 on H, C, D, D, J, E we get angle(H, C, D) == angle(D, J, E) + 180 mod 360
By divide_by_2_mod_180_v1 on D, A, C, E, I, C we get angle(D, A, C) == angle(E, I, C) mod 360
By divide_by_2_mod_180_v0 on I, J, A, I, C, F we get angle(I, C, F) == angle(I, J, A) mod 360
By divide_by_2_mod_180_v0 on I, J, A, I, C, H we get angle(I, C, H) == angle(I, J, A) mod 360
By divide_by_2_mod_180_v1 on J, I, D, B, A, D we get angle(B, A, D) == angle(J, I, D) mod 360
By divide_by_2_mod_180_v3 on I, C, E, D, J, E we get angle(I, C, E) == angle(D, J, E) + 180 mod 360
By divide_by_2_mod_180_v0 on C, I, E, F, A, D we get angle(C, I, E) == angle(F, A, D) mod 360
By divide_by_2_mod_180_v1 on J, A, H, G, I, D we get angle(G, I, D) == angle(J, A, H) mod 360
By divide_by_2_mod_180_v0 on H, A, J, D, I, J we get angle(D, I, J) == angle(H, A, J) mod 360
By divide_by_2_mod_180_v1 on D, A, C, G, I, C we get angle(D, A, C) == angle(G, I, C) mod 360
By divide_by_2_mod_180_v2 on A, J, E, A, C, I we get angle(A, J, E) == angle(A, C, I) + 180 mod 360
By divide_by_2_mod_180_v1 on B, A, J, G, I, D we get angle(B, A, J) == angle(G, I, D) mod 360
By divide_by_2_mod_180_v0 on E, C, D, G, J, D we get angle(E, C, D) == angle(G, J, D) mod 360
By divide_by_2_mod_180_v1 on D, J, G, I, C, B we get angle(D, J, G) == angle(I, C, B) mod 360
By divide_by_2_mod_180_v1 on B, A, D, J, I, C we get angle(B, A, D) == angle(J, I, C) mod 360
By divide_by_2_mod_180_v0 on G, J, A, B, C, I we get angle(B, C, I) == angle(G, J, A) mod 360
By divide_by_2_mod_180_v3 on E, J, A, I, C, A we get angle(E, J, A) == angle(I, C, A) + 180 mod 360
By divide_by_2_mod_180_v1 on B, A, D, G, I, D we get angle(B, A, D) == angle(G, I, D) mod 360
By divide_by_2_mod_180_v0 on D, C, A, G, J, A we get angle(D, C, A) == angle(G, J, A) mod 360
By divide_by_2_mod_180_v0 on D, I, E, F, A, D we get angle(D, I, E) == angle(F, A, D) mod 360
By divide_by_2_mod_180_v1 on D, A, H, E, I, D we get angle(D, A, H) == angle(E, I, D) mod 360
By divide_by_2_mod_180_v2 on A, J, E, F, C, D we get angle(A, J, E) == angle(F, C, D) + 180 mod 360
By divide_by_2_mod_180_v0 on C, A, J, C, I, J we get angle(C, A, J) == angle(C, I, J) mod 360
By divide_by_2_mod_180_v3 on E, J, D, D, C, H we get angle(E, J, D) == angle(D, C, H) + 180 mod 360
By reverse_direction on D, I we get 180 == direction(D, I) - direction(I, D) mod 360
By divide_by_2_mod_180_v2 on I, C, A, E, J, D we get angle(I, C, A) == angle(E, J, D) + 180 mod 360
By divide_by_2_mod_180_v2 on E, C, I, E, J, A we get angle(E, C, I) == angle(E, J, A) + 180 mod 360
By divide_by_2_mod_180_v1 on A, C, I, A, J, G we get angle(A, C, I) == angle(A, J, G) mod 360
By divide_by_2_mod_180_v1 on J, A, H, J, I, D we get angle(J, A, H) == angle(J, I, D) mod 360
By divide_by_2_mod_180_v0 on D, C, A, I, J, A we get angle(D, C, A) == angle(I, J, A) mod 360
By divide_by_2_mod_180_v0 on I, J, D, I, C, H we get angle(I, C, H) == angle(I, J, D) mod 360
By divide_by_2_mod_180_v0 on C, I, J, H, A, J we get angle(C, I, J) == angle(H, A, J) mod 360
By divide_by_2_mod_180_v0 on I, C, H, G, J, D we get angle(G, J, D) == angle(I, C, H) mod 360
By divide_by_2_mod_180_v0 on C, I, E, H, A, D we get angle(C, I, E) == angle(H, A, D) mod 360
By divide_by_2_mod_180_v0 on I, J, D, E, C, I we get angle(E, C, I) == angle(I, J, D) mod 360
By divide_by_2_mod_180_v1 on D, A, F, E, I, D we get angle(D, A, F) == angle(E, I, D) mod 360
By divide_by_2_mod_180_v1 on J, I, D, D, A, C we get angle(D, A, C) == angle(J, I, D) mod 360
By divide_by_2_mod_180_v1 on G, I, C, D, A, F we get angle(D, A, F) == angle(G, I, C) mod 360
By divide_by_2_mod_180_v2 on D, J, E, F, C, D we get angle(D, J, E) == angle(F, C, D) + 180 mod 360
By divide_by_2_mod_180_v1 on F, C, I, D, J, I we get angle(D, J, I) == angle(F, C, I) mod 360
By divide_by_2_mod_180_v1 on I, C, E, D, J, I we get angle(D, J, I) == angle(I, C, E) mod 360
By divide_by_2_mod_180_v2 on A, J, E, H, C, I we get angle(A, J, E) == angle(H, C, I) + 180 mod 360
By divide_by_2_mod_180_v0 on F, A, D, C, I, G we get angle(C, I, G) == angle(F, A, D) mod 360
By divide_by_2_mod_180_v0 on D, A, B, D, I, E we get angle(D, A, B) == angle(D, I, E) mod 360
By divide_by_2_mod_180_v0 on C, A, D, C, I, J we get angle(C, A, D) == angle(C, I, J) mod 360
By divide_by_2_mod_180_v1 on H, C, D, A, J, G we get angle(A, J, G) == angle(H, C, D) mod 360
By divide_by_2_mod_180_v1 on J, A, F, E, I, C we get angle(E, I, C) == angle(J, A, F) mod 360
By divide_by_2_mod_180_v3 on E, J, D, E, C, D we get angle(E, J, D) == angle(E, C, D) + 180 mod 360
By divide_by_2_mod_180_v0 on C, I, G, J, A, B we get angle(C, I, G) == angle(J, A, B) mod 360
By divide_by_2_mod_180_v1 on A, J, I, A, C, I we get angle(A, C, I) == angle(A, J, I) mod 360
By divide_by_2_mod_180_v0 on I, C, A, G, J, A we get angle(G, J, A) == angle(I, C, A) mod 360
By divide_by_2_mod_180_v3 on F, C, D, A, J, E we get angle(F, C, D) == angle(A, J, E) + 180 mod 360
By divide_by_2_mod_180_v1 on A, J, I, I, C, B we get angle(A, J, I) == angle(I, C, B) mod 360
By divide_by_2_mod_180_v1 on J, I, C, B, A, J we get angle(B, A, J) == angle(J, I, C) mod 360
By divide_by_2_mod_180_v0 on I, C, A, G, J, D we get angle(G, J, D) == angle(I, C, A) mod 360
By divide_by_2_mod_180_v3 on E, J, A, D, C, F we get angle(E, J, A) == angle(D, C, F) + 180 mod 360
By divide_by_2_mod_180_v1 on D, A, F, G, I, D we get angle(D, A, F) == angle(G, I, D) mod 360
By divide_by_2_mod_180_v0 on J, A, B, D, I, J we get angle(D, I, J) == angle(J, A, B) mod 360
By divide_by_2_mod_180_v2 on B, C, I, E, J, D we get angle(B, C, I) == angle(E, J, D) + 180 mod 360
By divide_by_2_mod_180_v3 on E, J, D, I, C, A we get angle(E, J, D) == angle(I, C, A) + 180 mod 360
By divide_by_2_mod_180_v0 on C, I, J, F, A, D we get angle(C, I, J) == angle(F, A, D) mod 360
By divide_by_2_mod_180_v2 on A, J, E, D, C, B we get angle(A, J, E) == angle(D, C, B) + 180 mod 360
By divide_by_2_mod_180_v0 on C, A, D, C, I, G we get angle(C, A, D) == angle(C, I, G) mod 360
By divide_by_2_mod_180_v2 on D, J, E, H, C, I we get angle(D, J, E) == angle(H, C, I) + 180 mod 360
By divide_by_2_mod_180_v0 on F, A, J, D, I, E we get angle(D, I, E) == angle(F, A, J) mod 360
By divide_by_2_mod_180_v2 on I, C, H, E, J, A we get angle(I, C, H) == angle(E, J, A) + 180 mod 360
By divide_by_2_mod_180_v0 on D, C, A, G, J, D we get angle(D, C, A) == angle(G, J, D) mod 360
By divide_by_2_mod_180_v1 on G, I, C, J, A, H we get angle(G, I, C) == angle(J, A, H) mod 360
By divide_by_2_mod_180_v3 on E, J, D, D, C, A we get angle(E, J, D) == angle(D, C, A) + 180 mod 360
By divide_by_2_mod_180_v2 on D, J, E, A, C, I we get angle(D, J, E) == angle(A, C, I) + 180 mod 360
By divide_by_2_mod_180_v1 on E, I, C, B, A, J we get angle(B, A, J) == angle(E, I, C) mod 360
By divide_by_2_mod_180_v3 on F, C, D, D, J, E we get angle(F, C, D) == angle(D, J, E) + 180 mod 360
By divide_by_2_mod_180_v1 on A, J, I, F, C, D we get angle(A, J, I) == angle(F, C, D) mod 360
By divide_by_2_mod_180_v3 on E, J, A, B, C, D we get angle(E, J, A) == angle(B, C, D) + 180 mod 360
By divide_by_2_mod_180_v0 on G, J, A, E, C, I we get angle(E, C, I) == angle(G, J, A) mod 360
By divide_by_2_mod_180_v0 on H, A, D, C, I, G we get angle(C, I, G) == angle(H, A, D) mod 360
By divide_by_2_mod_180_v0 on I, C, H, G, J, A we get angle(G, J, A) == angle(I, C, H) mod 360
By divide_by_2_mod_180_v1 on E, I, D, D, A, C we get angle(D, A, C) == angle(E, I, D) mod 360
By divide_by_2_mod_180_v2 on I, C, F, E, J, A we get angle(I, C, F) == angle(E, J, A) + 180 mod 360
By divide_by_2_mod_180_v2 on D, C, A, E, J, A we get angle(D, C, A) == angle(E, J, A) + 180 mod 360
By divide_by_2_mod_180_v1 on A, J, G, F, C, D we get angle(A, J, G) == angle(F, C, D) mod 360
By divide_by_2_mod_180_v0 on D, I, J, C, A, D we get angle(C, A, D) == angle(D, I, J) mod 360
By divide_by_2_mod_180_v1 on D, C, E, A, J, I we get angle(A, J, I) == angle(D, C, E) mod 360
By divide_by_2_mod_180_v1 on A, J, I, H, C, D we get angle(A, J, I) == angle(H, C, D) mod 360
By divide_by_2_mod_180_v0 on I, J, D, D, C, H we get angle(D, C, H) == angle(I, J, D) mod 360
By divide_by_2_mod_180_v3 on E, J, A, E, C, D we get angle(E, J, A) == angle(E, C, D) + 180 mod 360
By divide_by_2_mod_180_v2 on D, J, E, A, C, D we get angle(D, J, E) == angle(A, C, D) + 180 mod 360
By divide_by_2_mod_180_v3 on E, J, D, I, C, F we get angle(E, J, D) == angle(I, C, F) + 180 mod 360
By divide_by_2_mod_180_v3 on E, J, D, I, C, H we get angle(E, J, D) == angle(I, C, H) + 180 mod 360
By divide_by_2_mod_180_v0 on D, I, E, J, A, B we get angle(D, I, E) == angle(J, A, B) mod 360
By divide_by_2_mod_180_v2 on A, J, E, F, C, I we get angle(A, J, E) == angle(F, C, I) + 180 mod 360
By divide_by_2_mod_180_v3 on F, C, I, D, J, E we get angle(F, C, I) == angle(D, J, E) + 180 mod 360
By divide_by_2_mod_180_v0 on F, A, D, D, I, J we get angle(D, I, J) == angle(F, A, D) mod 360
By divide_by_2_mod_180_v1 on A, J, I, I, C, E we get angle(A, J, I) == angle(I, C, E) mod 360
By divide_by_2_mod_180_v0 on B, C, D, G, J, D we get angle(B, C, D) == angle(G, J, D) mod 360
By divide_by_2_mod_180_v1 on J, I, D, D, A, H we get angle(D, A, H) == angle(J, I, D) mod 360
By divide_by_2_mod_180_v0 on B, C, D, I, J, D we get angle(B, C, D) == angle(I, J, D) mod 360
By divide_by_2_mod_180_v0 on G, J, D, I, C, F we get angle(G, J, D) == angle(I, C, F) mod 360
By divide_by_2_mod_180_v1 on D, C, B, A, J, G we get angle(A, J, G) == angle(D, C, B) mod 360
By divide_by_2_mod_180_v1 on D, J, G, F, C, I we get angle(D, J, G) == angle(F, C, I) mod 360
By divide_by_2_mod_180_v0 on C, I, G, C, A, J we get angle(C, A, J) == angle(C, I, G) mod 360
By divide_by_2_mod_180_v1 on G, I, D, D, A, C we get angle(D, A, C) == angle(G, I, D) mod 360
By divide_by_2_mod_180_v0 on I, J, A, B, C, I we get angle(B, C, I) == angle(I, J, A) mod 360
By divide_by_2_mod_180_v0 on I, J, A, D, C, F we get angle(D, C, F) == angle(I, J, A) mod 360
By divide_by_2_mod_180_v1 on E, I, D, B, A, J we get angle(B, A, J) == angle(E, I, D) mod 360
By divide_by_2_mod_180_v2 on A, J, E, D, C, E we get angle(A, J, E) == angle(D, C, E) + 180 mod 360
By divide_by_2_mod_180_v0 on D, A, B, D, I, J we get angle(D, A, B) == angle(D, I, J) mod 360
By divide_by_2_mod_180_v1 on J, A, C, E, I, C we get angle(E, I, C) == angle(J, A, C) mod 360
By divide_by_2_mod_180_v3 on A, C, I, D, J, E we get angle(A, C, I) == angle(D, J, E) + 180 mod 360
By divide_by_2_mod_180_v0 on D, A, B, C, I, G we get angle(C, I, G) == angle(D, A, B) mod 360
By divide_by_2_mod_180_v2 on A, J, E, I, C, B we get angle(A, J, E) == angle(I, C, B) + 180 mod 360
By divide_by_2_mod_180_v1 on E, I, C, J, A, H we get angle(E, I, C) == angle(J, A, H) mod 360
By divide_by_2_mod_180_v0 on D, I, G, J, A, B we get angle(D, I, G) == angle(J, A, B) mod 360
By reverse_direction on I, D we get 180 == direction(I, D) - direction(D, I) mod 360
By divide_by_2_mod_180_v1 on D, J, I, H, C, D we get angle(D, J, I) == angle(H, C, D) mod 360
By divide_by_2_mod_180_v0 on C, I, J, J, A, B we get angle(C, I, J) == angle(J, A, B) mod 360
By divide_by_2_mod_180_v1 on D, A, C, J, I, C we get angle(D, A, C) == angle(J, I, C) mod 360
By divide_by_2_mod_180_v0 on C, I, E, D, A, B we get angle(C, I, E) == angle(D, A, B) mod 360
By divide_by_2_mod_180_v2 on D, J, E, H, C, D we get angle(D, J, E) == angle(H, C, D) + 180 mod 360
By divide_by_2_mod_180_v1 on J, I, C, J, A, H we get angle(J, A, H) == angle(J, I, C) mod 360
By divide_by_2_mod_180_v0 on F, A, D, D, I, G we get angle(D, I, G) == angle(F, A, D) mod 360
By divide_by_2_mod_180_v1 on A, C, D, D, J, G we get angle(A, C, D) == angle(D, J, G) mod 360
By divide_by_2_mod_180_v2 on D, J, E, I, C, E we get angle(D, J, E) == angle(I, C, E) + 180 mod 360
By divide_by_2_mod_180_v0 on C, A, J, C, I, E we get angle(C, A, J) == angle(C, I, E) mod 360
By divide_by_2_mod_180_v3 on E, J, D, B, C, I we get angle(E, J, D) == angle(B, C, I) + 180 mod 360
By divide_by_2_mod_180_v2 on B, C, D, E, J, A we get angle(B, C, D) == angle(E, J, A) + 180 mod 360
By divide_by_2_mod_180_v1 on I, C, E, A, J, G we get angle(A, J, G) == angle(I, C, E) mod 360
By divide_by_2_mod_180_v1 on J, I, D, J, A, F we get angle(J, A, F) == angle(J, I, D) mod 360
By divide_by_2_mod_180_v1 on J, I, D, D, A, F we get angle(D, A, F) == angle(J, I, D) mod 360
By divide_by_2_mod_180_v1 on D, A, H, G, I, C we get angle(D, A, H) == angle(G, I, C) mod 360
By divide_by_2_mod_180_v3 on D, C, E, D, J, E we get angle(D, C, E) == angle(D, J, E) + 180 mod 360
By divide_by_2_mod_180_v3 on A, C, D, A, J, E we get angle(A, C, D) == angle(A, J, E) + 180 mod 360
By divide_by_2_mod_180_v2 on I, C, H, E, J, D we get angle(I, C, H) == angle(E, J, D) + 180 mod 360
By reverse_direction on D, C we get 180 == direction(D, C) - direction(C, D) mod 360
By divide_by_2_mod_180_v1 on J, A, C, G, I, D we get angle(G, I, D) == angle(J, A, C) mod 360
By divide_by_2_mod_180_v1 on I, C, B, A, J, G we get angle(A, J, G) == angle(I, C, B) mod 360
By divide_by_2_mod_180_v0 on I, J, D, B, C, I we get angle(B, C, I) == angle(I, J, D) mod 360
By divide_by_2_mod_180_v1 on E, I, D, B, A, D we get angle(B, A, D) == angle(E, I, D) mod 360
By divide_by_2_mod_180_v2 on D, C, A, E, J, D we get angle(D, C, A) == angle(E, J, D) + 180 mod 360
By divide_by_2_mod_180_v0 on D, I, E, C, A, D we get angle(C, A, D) == angle(D, I, E) mod 360
By divide_by_2_mod_180_v1 on I, C, B, D, J, I we get angle(D, J, I) == angle(I, C, B) mod 360
By divide_by_2_mod_180_v3 on E, J, D, B, C, D we get angle(E, J, D) == angle(B, C, D) + 180 mod 360
By divide_by_2_mod_180_v1 on A, J, G, H, C, I we get angle(A, J, G) == angle(H, C, I) mod 360
By divide_by_2_mod_180_v0 on B, C, D, I, J, A we get angle(B, C, D) == angle(I, J, A) mod 360
By divide_by_2_mod_180_v1 on H, C, D, D, J, G we get angle(D, J, G) == angle(H, C, D) mod 360
By divide_by_2_mod_180_v2 on I, C, A, E, J, A we get angle(I, C, A) == angle(E, J, A) + 180 mod 360
By divide_by_2_mod_180_v2 on D, J, E, I, C, B we get angle(D, J, E) == angle(I, C, B) + 180 mod 360
By divide_by_2_mod_180_v2 on D, J, E, D, C, B we get angle(D, J, E) == angle(D, C, B) + 180 mod 360
By divide_by_2_mod_180_v1 on D, J, G, F, C, D we get angle(D, J, G) == angle(F, C, D) mod 360
By divide_by_2_mod_180_v0 on G, J, A, D, C, H we get angle(D, C, H) == angle(G, J, A) mod 360
By divide_by_2_mod_180_v0 on G, J, D, E, C, I we get angle(E, C, I) == angle(G, J, D) mod 360
By divide_by_2_mod_180_v0 on G, J, A, B, C, D we get angle(B, C, D) == angle(G, J, A) mod 360
By between_imply_segment_sum on J, D, A we get distance(A, J) == distance(D, J) + distance(A, D)
By divide_by_2_mod_180_v2 on D, C, H, E, J, D we get angle(D, C, H) == angle(E, J, D) + 180 mod 360
By divide_by_2_mod_180_v1 on D, C, B, A, J, I we get angle(A, J, I) == angle(D, C, B) mod 360
By divide_by_2_mod_180_v0 on I, C, A, I, J, D we get angle(I, C, A) == angle(I, J, D) mod 360
By divide_by_2_mod_180_v0 on D, I, G, C, A, J we get angle(C, A, J) == angle(D, I, G) mod 360
By between_implies_angles on A, H, F we get 180 == angle(A, H, F) mod 360, 0 == angle(H, F, A) mod 360, 0 == angle(F, A, H) mod 360
By divide_by_2_mod_180_v3 on E, J, D, E, C, I we get angle(E, J, D) == angle(E, C, I) + 180 mod 360
By divide_by_2_mod_180_v3 on A, C, D, D, J, E we get angle(A, C, D) == angle(D, J, E) + 180 mod 360
By divide_by_2_mod_180_v0 on J, A, B, C, I, E we get angle(C, I, E) == angle(J, A, B) mod 360
By between_imply_segment_sum on C, D, I we get distance(C, I) == distance(C, D) + distance(D, I)
By divide_by_2_mod_180_v0 on D, I, G, H, A, J we get angle(D, I, G) == angle(H, A, J) mod 360
By between_implies_angles on C, F, H we get 180 == angle(C, F, H) mod 360, 0 == angle(F, H, C) mod 360, 0 == angle(H, C, F) mod 360
By divide_by_2_mod_180_v2 on A, J, E, H, C, D we get angle(A, J, E) == angle(H, C, D) + 180 mod 360
By divide_by_2_mod_180_v3 on A, C, I, A, J, E we get angle(A, C, I) == angle(A, J, E) + 180 mod 360
By divide_by_2_mod_180_v0 on E, C, D, G, J, A we get angle(E, C, D) == angle(G, J, A) mod 360
By divide_by_2_mod_180_v3 on I, C, B, D, J, E we get angle(I, C, B) == angle(D, J, E) + 180 mod 360
By divide_by_2_mod_180_v3 on H, C, I, A, J, E we get angle(H, C, I) == angle(A, J, E) + 180 mod 360
By divide_by_2_mod_180_v3 on E, J, A, E, C, I we get angle(E, J, A) == angle(E, C, I) + 180 mod 360
By divide_by_2_mod_180_v2 on E, C, D, E, J, D we get angle(E, C, D) == angle(E, J, D) + 180 mod 360
By divide_by_2_mod_180_v2 on A, J, E, I, C, E we get angle(A, J, E) == angle(I, C, E) + 180 mod 360
By aa_anti_similarity on D, C, F, D, C, E we get anti_similar_triangles(C, D, E, C, D, F)
By divide_by_2_mod_180_v3 on H, C, I, D, J, E we get angle(H, C, I) == angle(D, J, E) + 180 mod 360
By divide_by_2_mod_180_v0 on I, J, D, D, C, F we get angle(D, C, F) == angle(I, J, D) mod 360
By divide_by_2_mod_180_v0 on D, C, H, G, J, D we get angle(D, C, H) == angle(G, J, D) mod 360
By divide_by_2_mod_180_v3 on E, J, A, D, C, H we get angle(E, J, A) == angle(D, C, H) + 180 mod 360
By divide_by_2_mod_180_v0 on F, A, J, D, I, G we get angle(D, I, G) == angle(F, A, J) mod 360
By divide_by_2_mod_180_v2 on B, C, D, E, J, D we get angle(B, C, D) == angle(E, J, D) + 180 mod 360
By divide_by_2_mod_180_v0 on I, C, F, I, J, D we get angle(I, C, F) == angle(I, J, D) mod 360
By divide_by_2_mod_180_v1 on J, I, C, J, A, C we get angle(J, A, C) == angle(J, I, C) mod 360
By divide_by_2_mod_180_v1 on J, A, F, E, I, D we get angle(E, I, D) == angle(J, A, F) mod 360
By divide_by_2_mod_180_v1 on D, A, F, E, I, C we get angle(D, A, F) == angle(E, I, C) mod 360
By divide_by_2_mod_180_v1 on D, C, E, D, J, I we get angle(D, C, E) == angle(D, J, I) mod 360
By divide_by_2_mod_180_v2 on I, C, F, E, J, D we get angle(I, C, F) == angle(E, J, D) + 180 mod 360
By divide_by_2_mod_180_v2 on A, J, E, A, C, D we get angle(A, J, E) == angle(A, C, D) + 180 mod 360
By divide_by_2_mod_180_v1 on A, C, D, A, J, I we get angle(A, C, D) == angle(A, J, I) mod 360
By aa_anti_similarity on D, F, C, D, E, C we get anti_similar_triangles(C, D, E, C, D, F)
By divide_by_2_mod_180_v3 on E, J, A, I, C, H we get angle(E, J, A) == angle(I, C, H) + 180 mod 360
By divide_by_2_mod_180_v1 on G, I, C, J, A, C we get angle(G, I, C) == angle(J, A, C) mod 360
By between_implies_angles on H, F, C we get 180 == angle(H, F, C) mod 360, 0 == angle(F, C, H) mod 360, 0 == angle(C, H, F) mod 360
By divide_by_2_mod_180_v3 on E, J, A, I, C, F we get angle(E, J, A) == angle(I, C, F) + 180 mod 360
By divide_by_2_mod_180_v2 on B, C, I, E, J, A we get angle(B, C, I) == angle(E, J, A) + 180 mod 360
By between_imply_segment_sum on B, G, D we get distance(B, D) == distance(B, G) + distance(D, G)
By reverse_direction on C, D we get 180 == direction(C, D) - direction(D, C) mod 360
By reverse_direction on F, H we get 180 == direction(F, H) - direction(H, F) mod 360
By divide_by_2_mod_180_v3 on I, C, B, A, J, E we get angle(I, C, B) == angle(A, J, E) + 180 mod 360
By between_imply_segment_sum on I, J, E we get distance(E, I) == distance(I, J) + distance(E, J)
By divide_by_2_mod_180_v3 on F, C, I, A, J, E we get angle(F, C, I) == angle(A, J, E) + 180 mod 360
By aa_anti_similarity on D, E, C, D, F, C we get anti_similar_triangles(C, D, E, C, D, F)
By between_implies_angles on F, H, A we get 180 == angle(F, H, A) mod 360, 0 == angle(H, A, F) mod 360, 0 == angle(A, F, H) mod 360
By reverse_direction on H, F we get 180 == direction(H, F) - direction(F, H) mod 360
By aa_anti_similarity on D, C, E, D, C, F we get anti_similar_triangles(C, D, E, C, D, F)
By external_angle_bisector_definition_v0_r on C, H, A, F we get Line(F, H) == external_angle_bisector(A, F, C)
By external_angle_bisector_definition_v0_r on E, I, G, J we get Line(I, J) == external_angle_bisector(E, J, G)
By external_angle_bisector_definition_v0_r on A, F, C, H we get Line(F, H) == external_angle_bisector(A, H, C)
By internal_angle_bisector_definition_v0_r on G, D, G, B we get Line(B, D) == internal_angle_bisector(G, B, G)
By internal_angle_bisector_definition_v0_r on F, A, F, H we get Line(A, H) == internal_angle_bisector(F, H, F)
By internal_angle_bisector_definition_v0_r on I, E, G, J we get Line(E, J) == internal_angle_bisector(G, J, I)
By external_angle_bisector_definition_v0_r on I, G, E, J we get Line(G, J) == external_angle_bisector(E, J, I)
By external_angle_bisector_definition_v0_r on A, D, H, F we get Line(D, F) == external_angle_bisector(A, F, H)
By external_angle_bisector_definition_v0_r on I, J, E, G we get Line(G, J) == external_angle_bisector(E, G, I)
By internal_angle_bisector_definition_v0_r on G, I, J, E we get Line(E, I) == internal_angle_bisector(G, E, J)
By internal_angle_bisector_definition_v0_r on G, J, E, I we get Line(I, J) == internal_angle_bisector(E, I, G)
By internal_angle_bisector_definition_v0_r on J, E, J, I we get Line(E, I) == internal_angle_bisector(J, I, J)
By internal_angle_bisector_definition_v0_r on F, C, F, H we get Line(C, H) == internal_angle_bisector(F, H, F)
By internal_angle_bisector_definition_v0_r on A, H, F, C we get Line(C, H) == internal_angle_bisector(A, C, F)
By internal_angle_bisector_definition_v0_r on I, C, I, D we get Line(C, D) == internal_angle_bisector(I, D, I)
By concyclic_definition_0 on F, E, C, D we get D in Circle(C, E, F)
By internal_angle_bisector_definition_v0_r on D, B, D, G we get Line(B, G) == internal_angle_bisector(D, G, D)
By concyclic_definition_0 on C, D, F, E we get E in Circle(C, D, F)
By concyclic_definition_0 on E, D, F, C we get C in Circle(D, E, F)
By internal_angle_bisector_definition_v0_r on I, D, I, C we get Line(C, D) == internal_angle_bisector(I, C, I)
By internal_angle_bisector_definition_v0_r on D, C, D, I we get Line(C, I) == internal_angle_bisector(D, I, D)
By external_angle_bisector_definition_v0_r on H, A, C, F we get Line(A, F) == external_angle_bisector(C, F, H)
By internal_angle_bisector_definition_v0_r on J, D, J, A we get Line(A, D) == internal_angle_bisector(J, A, J)
By internal_angle_bisector_definition_v0_r on J, G, E, I we get Line(G, I) == internal_angle_bisector(E, I, J)
By concyclic_definition_0 on D, C, E, F we get F in Circle(C, D, E)
By internal_angle_bisector_definition_v0_r on H, C, H, F we get Line(C, F) == internal_angle_bisector(H, F, H)
By internal_angle_bisector_definition_v0_r on H, A, H, F we get Line(A, F) == internal_angle_bisector(H, F, H)
By internal_angle_bisector_definition_v0_r on E, I, J, G we get Line(G, I) == internal_angle_bisector(E, G, J)
By internal_angle_bisector_definition_v0_r on C, H, F, A we get Line(A, H) == internal_angle_bisector(C, A, F)
By external_angle_bisector_definition_v0_r on H, D, H, F we get Line(D, F) == external_angle_bisector(H, F, H)
By internal_angle_bisector_definition_v0_r on B, D, B, G we get Line(D, G) == internal_angle_bisector(B, G, B)
By internal_angle_bisector_definition_v0_r on H, F, A, C we get Line(C, F) == internal_angle_bisector(A, C, H)
By internal_angle_bisector_definition_v0_r on J, A, J, D we get Line(A, D) == internal_angle_bisector(J, D, J)
By internal_angle_bisector_definition_v0_r on D, A, D, J we get Line(A, J) == internal_angle_bisector(D, J, D)
By internal_angle_bisector_definition_v0_r on C, F, H, A we get Line(A, F) == internal_angle_bisector(C, A, H)
By internal_angle_bisector_definition_v0_r on A, C, H, F we get Line(C, F) == internal_angle_bisector(A, F, H)
By internal_angle_bisector_definition_v0_r on C, I, C, D we get Line(D, I) == internal_angle_bisector(C, D, C)
By internal_angle_bisector_definition_v0_r on G, J, I, E we get Line(E, J) == internal_angle_bisector(G, E, I)
By internal_angle_bisector_definition_v0_r on C, D, H, F we get Line(D, F) == internal_angle_bisector(C, F, H)
By internal_angle_bisector_definition_v0_r on G, E, J, I we get Line(E, I) == internal_angle_bisector(G, I, J)
By internal_angle_bisector_definition_v0_r on C, D, C, I we get Line(D, I) == internal_angle_bisector(C, I, C)
By internal_angle_bisector_definition_v0_r on B, G, B, D we get Line(D, G) == internal_angle_bisector(B, D, B)
By internal_angle_bisector_definition_v0_r on A, J, A, D we get Line(D, J) == internal_angle_bisector(A, D, A)
By internal_angle_bisector_definition_v0_r on G, B, G, D we get Line(B, D) == internal_angle_bisector(G, D, G)
By internal_angle_bisector_definition_v0_r on J, G, J, I we get Line(G, I) == internal_angle_bisector(J, I, J)
By internal_angle_bisector_definition_v0_r on I, G, I, J we get Line(G, J) == internal_angle_bisector(I, J, I)
By internal_angle_bisector_definition_v0_r on I, E, I, J we get Line(E, J) == internal_angle_bisector(I, J, I)
By internal_angle_bisector_definition_v0_r on D, I, D, C we get Line(C, I) == internal_angle_bisector(D, C, D)
By internal_angle_bisector_definition_v0_r on D, J, D, A we get Line(A, J) == internal_angle_bisector(D, A, D)
By internal_angle_bisector_definition_v0_r on D, G, D, B we get Line(B, G) == internal_angle_bisector(D, B, D)
By internal_angle_bisector_definition_v0_r on A, D, A, J we get Line(D, J) == internal_angle_bisector(A, J, A)
By concyclic_definition_1 on F, D, E, C we get Circle(C, D, E) == Circle(D, E, F)
By concyclic_definition_1 on F, D, C, E we get Circle(C, D, E) == Circle(C, D, F)
By concyclic_definition_1 on E, D, F, C we get Circle(C, D, F) == Circle(D, E, F)
By concyclic_definition_1 on D, F, C, E we get Circle(C, D, F) == Circle(C, E, F)
By concyclic_definition_1 on F, E, C, D we get Circle(C, D, E) == Circle(C, E, F)
By concyclic_definition_1 on D, E, F, C we get Circle(C, E, F) == Circle(D, E, F)
By anti_similar_triangle_basic_properties on D, E, G, D, B, E we get angle(D, E, G) == 0 - angle(D, B, E) mod 360, angle(E, G, D) == 0 - angle(B, E, D) mod 360, angle(G, D, E) == 0 - angle(E, D, B) mod 360, log(distance(B, D)) + log(distance(E, G)) == log(distance(D, E)) + log(distance(B, E)), log(distance(B, E)) + log(distance(D, G)) == log(distance(E, G)) + log(distance(D, E)), log(distance(D, E)) + log(distance(D, E)) == log(distance(D, G)) + log(distance(B, D))
By similar_triangle_basic_properties on G, D, E, G, E, B we get angle(G, D, E) == angle(G, E, B) mod 360, angle(D, E, G) == angle(E, B, G) mod 360, angle(B, G, E) == angle(E, G, D) mod 360, log(distance(D, G)) + log(distance(B, E)) == log(distance(E, G)) + log(distance(D, E)), log(distance(B, E)) + log(distance(E, G)) == log(distance(D, E)) + log(distance(B, G)), log(distance(B, G)) + log(distance(D, G)) == log(distance(E, G)) + log(distance(E, G))
By anti_similar_triangle_basic_properties on D, E, B, D, G, E we get angle(D, E, B) == 0 - angle(D, G, E) mod 360, angle(E, B, D) == 0 - angle(G, E, D) mod 360, angle(B, D, E) == 0 - angle(E, D, G) mod 360, log(distance(D, E)) + log(distance(E, G)) == log(distance(D, G)) + log(distance(B, E)), log(distance(B, E)) + log(distance(D, E)) == log(distance(E, G)) + log(distance(B, D)), log(distance(B, D)) + log(distance(D, G)) == log(distance(D, E)) + log(distance(D, E))
By anti_similar_triangle_basic_properties on D, E, B, E, G, B we get angle(D, E, B) == 0 - angle(E, G, B) mod 360, angle(E, B, D) == 0 - angle(G, B, E) mod 360, angle(B, D, E) == 0 - angle(B, E, G) mod 360, log(distance(D, E)) + log(distance(B, G)) == log(distance(E, G)) + log(distance(B, E)), log(distance(B, E)) + log(distance(B, E)) == log(distance(B, G)) + log(distance(B, D)), log(distance(B, D)) + log(distance(E, G)) == log(distance(B, E)) + log(distance(D, E))
By anti_similar_triangle_basic_properties on E, D, B, G, E, B we get angle(E, D, B) == 0 - angle(G, E, B) mod 360, angle(D, B, E) == 0 - angle(E, B, G) mod 360, angle(B, E, D) == 0 - angle(B, G, E) mod 360, log(distance(D, E)) + log(distance(B, E)) == log(distance(E, G)) + log(distance(B, D)), log(distance(B, D)) + log(distance(B, G)) == log(distance(B, E)) + log(distance(B, E)), log(distance(B, E)) + log(distance(E, G)) == log(distance(B, G)) + log(distance(D, E))
By concyclic_sufficient_conditions_v1 on C, D, J, E we get concyclic(C, D, E, J)
By concyclic_sufficient_conditions_v0 on C, A, J, I we get concyclic(A, C, I, J)
By angles_on_chord_v3 on E, F, D, C, Circle(C, D, E) we get angle(E, D, F) == angle(E, C, F) + 180 mod 360
By chords_on_equal_angles_v0 on C, D, F, E, D, C, Circle(C, D, E) we get distance(C, E) == distance(C, F)
By angles_on_chord_v2 on E, F, C, D, Circle(C, D, E) we get angle(E, C, F) == angle(E, D, F) + 180 mod 360
By angles_on_chord_v3 on F, E, C, D, Circle(C, D, E) we get angle(F, C, E) == angle(F, D, E) + 180 mod 360
By chords_on_equal_angles_v0 on E, C, D, D, C, F, Circle(C, D, E) we get distance(D, E) == distance(D, F)
By angles_on_chord_v2 on F, E, D, C, Circle(C, D, E) we get angle(F, D, E) == angle(F, C, E) + 180 mod 360
By angles_on_chord_v1 on C, F, D, E, Circle(C, D, E) we get angle(C, D, F) == angle(C, E, F) mod 360
By angles_on_chord_v0 on D, F, C, E, Circle(C, D, E) we get angle(D, C, F) == angle(D, E, F) mod 360
By angles_on_chord_v1 on E, C, F, D, Circle(C, D, E) we get angle(E, D, C) == angle(E, F, C) mod 360
By angles_on_chord_v0 on E, D, F, C, Circle(C, D, E) we get angle(E, C, D) == angle(E, F, D) mod 360
By angles_on_chord_v0 on F, C, D, E, Circle(C, D, E) we get angle(F, D, C) == angle(F, E, C) mod 360
By angles_on_chord_v1 on F, D, C, E, Circle(C, D, E) we get angle(F, C, D) == angle(F, E, D) mod 360
By angles_on_chord_v0 on C, E, F, D, Circle(C, D, E) we get angle(C, D, E) == angle(C, F, E) mod 360
By angles_on_chord_v1 on D, E, C, F, Circle(C, D, E) we get angle(D, C, E) == angle(D, F, E) mod 360
By asa_anti_congruence on D, C, E, D, C, F we get anti_congruent_triangles(C, D, E, C, D, F)
By asa_anti_congruence on C, D, F, C, D, E we get anti_congruent_triangles(C, D, E, C, D, F)
By asa_anti_congruence on D, C, F, D, C, E we get anti_congruent_triangles(C, D, E, C, D, F)
By anti_congruence_from_anti_similar_triangles on C, D, F, C, D, E we get anti_congruent_triangles(C, D, E, C, D, F)
By asa_anti_congruence on C, D, E, C, D, F we get anti_congruent_triangles(C, D, E, C, D, F)
By anti_congruence_from_anti_similar_triangles on D, C, F, D, C, E we get anti_congruent_triangles(C, D, E, C, D, F)
By anti_congruence_from_anti_similar_triangles on C, D, E, C, D, F we get anti_congruent_triangles(C, D, E, C, D, F)
By anti_congruence_from_anti_similar_triangles on D, C, E, D, C, F we get anti_congruent_triangles(C, D, E, C, D, F)
By power_of_a_point_tangent_converse_v1 on B, G, D, E we get tangent(Line(B, E), Circle(D, E, G))
By power_of_a_point_tangent_converse_v0 on D, G, B, E we get tangent(Line(D, E), Circle(B, E, G))
By internal_angle_bisector_definition_v0_r on F, I, E, D we get Line(D, I) == internal_angle_bisector(E, D, F)
By internal_angle_bisector_definition_v0_r on F, A, C, H we get Line(A, H) == internal_angle_bisector(C, H, F)
By external_angle_bisector_definition_v0_r on A, C, F, H we get Line(C, H) == external_angle_bisector(A, H, F)
By power_of_a_point_on_circle on C, Circle(C, D, E) we get 0 == power_of_a_point(C, Circle(C, D, E))
By power_of_a_point_on_circle on F, Circle(C, D, E) we get 0 == power_of_a_point(F, Circle(C, D, E))
By internal_angle_bisector_definition_v0_r on F, C, E, D we get Line(C, D) == internal_angle_bisector(E, D, F)
By power_of_a_point_on_circle on D, Circle(C, D, E) we get 0 == power_of_a_point(D, Circle(C, D, E))
By power_of_a_point_on_circle on E, Circle(C, D, E) we get 0 == power_of_a_point(E, Circle(C, D, E))
By power_of_a_point_definition on B, C, E, Circle(C, D, E) we get log(distance(B, C)) + log(distance(B, E)) == log(power_of_a_point(B, Circle(C, D, E)))
By power_of_a_point_definition on H, F, C, Circle(C, D, E) we get log(distance(F, H)) + log(distance(C, H)) == log(power_of_a_point(H, Circle(C, D, E)))
By power_of_a_point_definition on A, F, C, Circle(C, D, E) we get log(distance(A, F)) + log(distance(A, C)) == log(power_of_a_point(A, Circle(C, D, E)))
By similar_triangle_basic_properties on D, B, A, D, E, I we get angle(D, B, A) == angle(D, E, I) mod 360, angle(B, A, D) == angle(E, I, D) mod 360, angle(A, D, B) == angle(I, D, E) mod 360, log(distance(B, D)) + log(distance(E, I)) == log(distance(D, E)) + log(distance(A, B)), log(distance(A, B)) + log(distance(D, I)) == log(distance(E, I)) + log(distance(A, D)), log(distance(A, D)) + log(distance(D, E)) == log(distance(D, I)) + log(distance(B, D))
By similar_triangle_basic_properties on D, I, E, D, A, B we get angle(D, A, B) == angle(D, I, E) mod 360, angle(A, B, D) == angle(I, E, D) mod 360, angle(B, D, A) == angle(E, D, I) mod 360, log(distance(A, D)) + log(distance(E, I)) == log(distance(D, I)) + log(distance(A, B)), log(distance(A, B)) + log(distance(D, E)) == log(distance(E, I)) + log(distance(B, D)), log(distance(B, D)) + log(distance(D, I)) == log(distance(D, E)) + log(distance(A, D))
By anti_similar_triangle_basic_properties on D, F, C, D, E, C we get angle(D, F, C) == 0 - angle(D, E, C) mod 360, angle(F, C, D) == 0 - angle(E, C, D) mod 360, angle(C, D, F) == 0 - angle(C, D, E) mod 360, log(distance(D, E)) + log(distance(C, F)) == log(distance(D, F)) + log(distance(C, E)), log(distance(C, E)) + log(distance(C, D)) == log(distance(C, F)) + log(distance(C, D)), log(distance(C, D)) + log(distance(D, E)) == log(distance(C, D)) + log(distance(D, F))
By power_of_a_point_definition on I, D, C, Circle(C, D, E) we get log(distance(D, I)) + log(distance(C, I)) == log(power_of_a_point(I, Circle(C, D, E)))
By anti_similar_triangle_basic_properties on F, D, C, E, D, C we get angle(F, D, C) == 0 - angle(E, D, C) mod 360, angle(D, C, F) == 0 - angle(D, C, E) mod 360, angle(C, F, D) == 0 - angle(C, E, D) mod 360, log(distance(D, E)) + log(distance(C, D)) == log(distance(D, F)) + log(distance(C, D)), log(distance(C, D)) + log(distance(C, E)) == log(distance(C, D)) + log(distance(C, F)), log(distance(C, E)) + log(distance(D, F)) == log(distance(C, F)) + log(distance(D, E))
By similar_triangle_basic_properties on C, E, D, J, G, D we get angle(C, E, D) == angle(J, G, D) mod 360, angle(E, D, C) == angle(G, D, J) mod 360, angle(D, C, E) == angle(D, J, G) mod 360, log(distance(C, E)) + log(distance(D, G)) == log(distance(G, J)) + log(distance(D, E)), log(distance(D, E)) + log(distance(D, J)) == log(distance(D, G)) + log(distance(C, D)), log(distance(C, D)) + log(distance(G, J)) == log(distance(D, J)) + log(distance(C, E))
By similar_triangle_basic_properties on D, E, C, D, G, J we get angle(D, E, C) == angle(D, G, J) mod 360, angle(E, C, D) == angle(G, J, D) mod 360, angle(C, D, E) == angle(J, D, G) mod 360, log(distance(D, E)) + log(distance(G, J)) == log(distance(D, G)) + log(distance(C, E)), log(distance(C, E)) + log(distance(D, J)) == log(distance(G, J)) + log(distance(C, D)), log(distance(C, D)) + log(distance(D, G)) == log(distance(D, J)) + log(distance(D, E))
By anti_similar_triangle_basic_properties on A, D, C, I, D, J we get angle(A, D, C) == 0 - angle(I, D, J) mod 360, angle(D, C, A) == 0 - angle(D, J, I) mod 360, angle(C, A, D) == 0 - angle(J, I, D) mod 360, log(distance(A, D)) + log(distance(D, J)) == log(distance(D, I)) + log(distance(C, D)), log(distance(C, D)) + log(distance(I, J)) == log(distance(D, J)) + log(distance(A, C)), log(distance(A, C)) + log(distance(D, I)) == log(distance(I, J)) + log(distance(A, D))
By anti_similar_triangle_basic_properties on C, D, A, J, D, I we get angle(C, D, A) == 0 - angle(J, D, I) mod 360, angle(D, A, C) == 0 - angle(D, I, J) mod 360, angle(A, C, D) == 0 - angle(I, J, D) mod 360, log(distance(C, D)) + log(distance(D, I)) == log(distance(D, J)) + log(distance(A, D)), log(distance(A, D)) + log(distance(I, J)) == log(distance(D, I)) + log(distance(A, C)), log(distance(A, C)) + log(distance(D, J)) == log(distance(I, J)) + log(distance(C, D))
By similar_triangle_basic_properties on C, I, E, C, A, D we get angle(C, A, D) == angle(C, I, E) mod 360, angle(A, D, C) == angle(I, E, C) mod 360, angle(D, C, A) == angle(E, C, I) mod 360, log(distance(A, C)) + log(distance(E, I)) == log(distance(C, I)) + log(distance(A, D)), log(distance(A, D)) + log(distance(C, E)) == log(distance(E, I)) + log(distance(C, D)), log(distance(C, D)) + log(distance(C, I)) == log(distance(C, E)) + log(distance(A, C))
By anti_similar_triangle_basic_properties on G, D, J, F, D, C we get angle(G, D, J) == 0 - angle(F, D, C) mod 360, angle(D, J, G) == 0 - angle(D, C, F) mod 360, angle(J, G, D) == 0 - angle(C, F, D) mod 360, log(distance(D, F)) + log(distance(D, J)) == log(distance(D, G)) + log(distance(C, D)), log(distance(C, D)) + log(distance(G, J)) == log(distance(D, J)) + log(distance(C, F)), log(distance(C, F)) + log(distance(D, G)) == log(distance(G, J)) + log(distance(D, F))
By anti_similar_triangle_basic_properties on I, G, D, A, F, D we get angle(I, G, D) == 0 - angle(A, F, D) mod 360, angle(G, D, I) == 0 - angle(F, D, A) mod 360, angle(D, I, G) == 0 - angle(D, A, F) mod 360, log(distance(A, F)) + log(distance(D, G)) == log(distance(G, I)) + log(distance(D, F)), log(distance(D, F)) + log(distance(D, I)) == log(distance(D, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(G, I)) == log(distance(D, I)) + log(distance(A, F))
By similar_triangle_basic_properties on C, D, A, C, E, I we get angle(C, D, A) == angle(C, E, I) mod 360, angle(D, A, C) == angle(E, I, C) mod 360, angle(A, C, D) == angle(I, C, E) mod 360, log(distance(C, D)) + log(distance(E, I)) == log(distance(C, E)) + log(distance(A, D)), log(distance(A, D)) + log(distance(C, I)) == log(distance(E, I)) + log(distance(A, C)), log(distance(A, C)) + log(distance(C, E)) == log(distance(C, I)) + log(distance(C, D))
By anti_similar_triangle_basic_properties on G, J, D, F, C, D we get angle(G, J, D) == 0 - angle(F, C, D) mod 360, angle(J, D, G) == 0 - angle(C, D, F) mod 360, angle(D, G, J) == 0 - angle(D, F, C) mod 360, log(distance(C, F)) + log(distance(D, J)) == log(distance(G, J)) + log(distance(C, D)), log(distance(C, D)) + log(distance(D, G)) == log(distance(D, J)) + log(distance(D, F)), log(distance(D, F)) + log(distance(G, J)) == log(distance(D, G)) + log(distance(C, F))
By anti_similar_triangle_basic_properties on A, D, F, I, D, G we get angle(A, D, F) == 0 - angle(I, D, G) mod 360, angle(D, F, A) == 0 - angle(D, G, I) mod 360, angle(F, A, D) == 0 - angle(G, I, D) mod 360, log(distance(A, D)) + log(distance(D, G)) == log(distance(D, I)) + log(distance(D, F)), log(distance(D, F)) + log(distance(G, I)) == log(distance(D, G)) + log(distance(A, F)), log(distance(A, F)) + log(distance(D, I)) == log(distance(G, I)) + log(distance(A, D))
By anti_similar_triangle_basic_properties on I, E, C, I, D, J we get angle(I, E, C) == 0 - angle(I, D, J) mod 360, angle(E, C, I) == 0 - angle(D, J, I) mod 360, angle(C, I, E) == 0 - angle(J, I, D) mod 360, log(distance(D, I)) + log(distance(C, E)) == log(distance(E, I)) + log(distance(D, J)), log(distance(C, E)) + log(distance(I, J)) == log(distance(D, J)) + log(distance(C, I)), log(distance(C, I)) + log(distance(D, I)) == log(distance(I, J)) + log(distance(E, I))
By anti_similar_triangle_basic_properties on C, E, I, J, D, I we get angle(C, E, I) == 0 - angle(J, D, I) mod 360, angle(E, I, C) == 0 - angle(D, I, J) mod 360, angle(I, C, E) == 0 - angle(I, J, D) mod 360, log(distance(C, E)) + log(distance(D, I)) == log(distance(D, J)) + log(distance(E, I)), log(distance(D, I)) + log(distance(C, I)) == log(distance(E, I)) + log(distance(I, J)), log(distance(C, I)) + log(distance(D, J)) == log(distance(I, J)) + log(distance(C, E))
By concyclic_sufficient_conditions_v1 on E, F, D, J we get concyclic(D, E, F, J)
By line_intersection_definition on F, g, Line(E, F) we get F == line_intersection(g, Line(E, F))
By radical_axis_of_intersecting_circles_v0 on G, E, Circle(D, E, G), Circle(B, E, G) we get Line(E, G) == radical_axis(Circle(B, E, G), Circle(D, E, G))
By line_intersection_definition on E, Line(E, F), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, F))
By radical_axis_of_intersecting_circles_v0 on E, D, Circle(C, D, E), Circle(D, E, G) we get Line(D, E) == radical_axis(Circle(C, D, E), Circle(D, E, G))
By line_intersection_definition on E, f, Line(E, F) we get E == line_intersection(f, Line(E, F))
By line_intersection_definition on F, Line(D, F), Line(E, F) we get F == line_intersection(Line(D, F), Line(E, F))
By line_intersection_definition on E, k, Line(E, F) we get E == line_intersection(k, Line(E, F))
By same_angle_v0 on E, J, I, F we get angle(I, E, F) == angle(J, E, F) mod 360
By same_angle_v3 on F, C, A, E we get angle(C, F, E) == angle(A, F, E) + 180 mod 360
By perpendicular_direction_conditions_v0 on I, C, E, F we get perpendicular(Line(C, I), Line(E, F))
By same_angle_v0 on E, J, G, F we get angle(G, E, F) == angle(J, E, F) mod 360
By same_angle_v3 on F, C, H, E we get angle(C, F, E) == angle(H, F, E) + 180 mod 360
By perpendicular_direction_conditions_v0 on F, E, D, I we get perpendicular(Line(D, I), Line(E, F))
By perpendicular_direction_conditions_v0 on D, C, E, F we get perpendicular(Line(C, D), Line(E, F))
By same_angle_v0 on E, I, G, F we get angle(G, E, F) == angle(I, E, F) mod 360
By same_angle_v2 on E, B, C, F we get angle(B, E, F) == angle(C, E, F) + 180 mod 360
By same_angle_v1 on F, A, H, E we get angle(A, F, E) == angle(H, F, E) mod 360
By concyclic_definition_0 on E, D, C, J we get J in Circle(C, D, E)
By power_of_a_point_tangent_converse_v0 on D, B, G, F we get tangent(Line(D, F), Circle(B, F, G))
By concyclic_definition_0 on C, J, E, D we get D in Circle(C, E, J)
By power_of_a_point_on_circle on G, Circle(D, E, G) we get 0 == power_of_a_point(G, Circle(D, E, G))
By concyclic_definition_0 on J, C, I, A we get A in Circle(C, I, J)
By anti_similar_triangle_basic_properties on F, D, E, E, D, F we get angle(F, D, E) == 0 - angle(E, D, F) mod 360, angle(D, E, F) == 0 - angle(D, F, E) mod 360, angle(E, F, D) == 0 - angle(F, E, D) mod 360, log(distance(D, E)) + log(distance(D, E)) == log(distance(D, F)) + log(distance(D, F)), log(distance(D, E)) + log(distance(E, F)) == log(distance(D, F)) + log(distance(E, F)), log(distance(E, F)) + log(distance(D, E)) == log(distance(E, F)) + log(distance(D, F))
By concyclic_definition_1 on E, D, C, J we get Circle(C, D, E) == Circle(C, D, J)
By concyclic_definition_0 on J, A, C, I we get I in Circle(A, C, J)
By anti_similar_triangle_basic_properties on F, E, C, E, F, C we get angle(F, E, C) == 0 - angle(E, F, C) mod 360, angle(E, C, F) == 0 - angle(F, C, E) mod 360, angle(C, F, E) == 0 - angle(C, E, F) mod 360, log(distance(E, F)) + log(distance(C, E)) == log(distance(E, F)) + log(distance(C, F)), log(distance(C, E)) + log(distance(C, E)) == log(distance(C, F)) + log(distance(C, F)), log(distance(C, E)) + log(distance(E, F)) == log(distance(C, F)) + log(distance(E, F))
By concyclic_definition_0 on D, J, C, E we get E in Circle(C, D, J)
By concyclic_definition_0 on I, A, C, J we get J in Circle(A, C, I)
By concyclic_definition_0 on I, J, A, C we get C in Circle(A, I, J)
By concyclic_definition_1 on J, E, C, D we get Circle(C, D, E) == Circle(C, E, J)
By concyclic_definition_1 on C, D, E, J we get Circle(C, D, E) == Circle(D, E, J)
By power_of_a_point_on_circle on E, Circle(D, E, G) we get 0 == power_of_a_point(E, Circle(D, E, G))
By concyclic_definition_0 on E, D, J, C we get C in Circle(D, E, J)
By power_of_a_point_on_circle on G, Circle(B, E, G) we get 0 == power_of_a_point(G, Circle(B, E, G))
By power_of_a_point_on_circle on E, Circle(B, E, G) we get 0 == power_of_a_point(E, Circle(B, E, G))
By draw_point_of_tangency on Line(D, E), Circle(B, E, G) we get exists(line_circle_tangent_point(Line(D, E), Circle(B, E, G)))
By power_of_a_point_on_circle on B, Circle(B, E, G) we get 0 == power_of_a_point(B, Circle(B, E, G))
By power_of_a_point_on_circle on D, Circle(D, E, G) we get 0 == power_of_a_point(D, Circle(D, E, G))
By draw_point_of_tangency on f, Circle(D, E, G) we get exists(line_circle_tangent_point(f, Circle(D, E, G)))
By sas_similarity on E, C, D, I, C, A we get similar_triangles(A, C, I, D, C, E)
By sas_similarity on D, J, I, F, C, I we get similar_triangles(C, F, I, J, D, I)
By concyclic_definition_1 on J, A, C, I we get Circle(A, C, I) == Circle(A, C, J)
By sas_anti_similarity on J, I, C, D, A, B we get anti_similar_triangles(A, B, D, I, C, J)
By concyclic_definition_1 on A, C, I, J we get Circle(A, C, I) == Circle(C, I, J)
By sas_similarity on J, D, C, G, D, E we get similar_triangles(C, D, J, E, D, G)
By sas_similarity on C, D, J, B, E, G we get similar_triangles(B, E, G, C, D, J)
By power_of_a_point_definition on D, B, G, Circle(B, E, G) we get log(distance(B, D)) + log(distance(D, G)) == log(power_of_a_point(D, Circle(B, E, G)))
By sas_anti_similarity on I, C, F, A, C, D we get anti_similar_triangles(A, C, D, I, C, F)
By sas_anti_similarity on D, I, E, J, I, C we get anti_similar_triangles(C, I, J, E, I, D)
By power_of_a_point_tangent on C, E, Circle(D, E, G) we get 2 * log(distance(C, E)) == log(power_of_a_point(C, Circle(D, E, G)))
By sas_anti_similarity on E, D, G, A, D, I we get anti_similar_triangles(A, D, I, E, D, G)
By sas_similarity on J, D, C, G, E, B we get similar_triangles(B, E, G, C, D, J)
By sas_similarity on I, C, F, I, J, D we get similar_triangles(C, F, I, J, D, I)
By power_of_a_point_definition on C, B, E, Circle(B, E, G) we get log(distance(B, C)) + log(distance(C, E)) == log(power_of_a_point(C, Circle(B, E, G)))
By sas_anti_congruence on E, C, I, F, C, I we get anti_congruent_triangles(C, E, I, C, F, I)
By sas_similarity on B, D, E, A, D, I we get similar_triangles(A, D, I, B, D, E)
By concyclic_definition_1 on D, C, J, E we get Circle(C, D, J) == Circle(C, E, J)
By concyclic_definition_1 on C, J, D, E we get Circle(C, D, J) == Circle(D, E, J)
By sas_anti_similarity on I, D, A, G, E, B we get anti_similar_triangles(A, D, I, B, E, G)
By sas_anti_similarity on A, D, I, E, D, G we get anti_similar_triangles(A, D, I, E, D, G)
By sas_similarity on F, C, I, D, J, I we get similar_triangles(C, F, I, J, D, I)
By concyclic_definition_1 on C, J, I, A we get Circle(A, I, J) == Circle(C, I, J)
By sas_anti_similarity on A, D, B, I, D, F we get anti_similar_triangles(A, B, D, I, F, D)
By sas_similarity on I, C, A, E, C, D we get similar_triangles(A, C, I, D, C, E)
By sas_similarity on E, D, B, I, D, A we get similar_triangles(A, D, I, B, D, E)
By sas_anti_similarity on I, D, A, G, D, E we get anti_similar_triangles(A, D, I, E, D, G)
By sas_similarity on D, J, G, A, C, I we get similar_triangles(A, C, I, D, J, G)
By sas_similarity on A, C, I, D, C, E we get similar_triangles(A, C, I, D, C, E)
By sas_anti_similarity on D, C, A, F, C, I we get anti_similar_triangles(A, C, D, I, C, F)
By sas_anti_similarity on J, D, C, E, D, B we get anti_similar_triangles(B, D, E, C, D, J)
By concyclic_definition_1 on C, A, I, J we get Circle(A, C, I) == Circle(A, I, J)
By sas_similarity on G, J, D, I, C, A we get similar_triangles(A, C, I, D, J, G)
By sas_similarity on E, D, G, C, D, J we get similar_triangles(C, D, J, E, D, G)
By sas_anti_similarity on I, D, E, I, D, F we get anti_similar_triangles(D, E, I, D, F, I)
By power_of_a_point_definition on I, G, E, Circle(B, E, G) we get log(distance(G, I)) + log(distance(E, I)) == log(power_of_a_point(I, Circle(B, E, G)))
By sas_anti_similarity on B, E, G, A, D, I we get anti_similar_triangles(A, D, I, B, E, G)
By sas_anti_similarity on C, I, J, E, I, D we get anti_similar_triangles(C, I, J, E, I, D)
By sas_similarity on B, E, G, C, D, J we get similar_triangles(B, E, G, C, D, J)
By sas_anti_congruence on E, D, I, F, D, I we get anti_congruent_triangles(D, E, I, D, F, I)
By sas_anti_similarity on D, C, F, A, C, I we get anti_similar_triangles(A, C, I, D, C, F)
By sas_anti_similarity on I, C, E, I, C, F we get anti_similar_triangles(C, E, I, C, F, I)
By sas_similarity on A, C, I, D, J, G we get similar_triangles(A, C, I, D, J, G)
By power_of_a_point_definition on B, G, D, Circle(D, E, G) we get log(distance(B, G)) + log(distance(B, D)) == log(power_of_a_point(B, Circle(D, E, G)))
By sas_anti_similarity on I, D, F, A, D, B we get anti_similar_triangles(A, B, D, I, F, D)
By sas_anti_similarity on F, D, J, B, D, C we get anti_similar_triangles(B, C, D, F, J, D)
By sas_anti_similarity on F, C, D, I, C, A we get anti_similar_triangles(A, C, I, D, C, F)
By sas_anti_similarity on F, C, I, D, C, A we get anti_similar_triangles(A, C, D, I, C, F)
By concyclic_definition_1 on I, C, J, A we get Circle(A, C, J) == Circle(C, I, J)
By concyclic_definition_1 on D, E, J, C we get Circle(C, E, J) == Circle(D, E, J)
By sas_anti_similarity on F, C, I, E, C, I we get anti_similar_triangles(C, E, I, C, F, I)
By sas_anti_similarity on E, C, I, F, C, I we get anti_similar_triangles(C, E, I, C, F, I)
By concyclic_definition_1 on I, J, A, C we get Circle(A, C, J) == Circle(A, I, J)
By sas_similarity on G, D, E, J, D, C we get similar_triangles(C, D, J, E, D, G)
By sas_anti_similarity on I, C, F, I, C, E we get anti_similar_triangles(C, E, I, C, F, I)
By sas_similarity on I, C, A, G, J, D we get similar_triangles(A, C, I, D, J, G)
By sas_anti_similarity on F, D, I, B, D, A we get anti_similar_triangles(A, B, D, I, F, D)
By sas_anti_congruence on I, C, F, I, C, E we get anti_congruent_triangles(C, E, I, C, F, I)
By sas_anti_similarity on C, D, J, B, D, E we get anti_similar_triangles(B, D, E, C, D, J)
By sas_similarity on D, C, E, A, C, I we get similar_triangles(A, C, I, D, C, E)
By sas_anti_similarity on A, C, I, D, C, F we get anti_similar_triangles(A, C, I, D, C, F)
By sas_anti_congruence on F, D, I, E, D, I we get anti_congruent_triangles(D, E, I, D, F, I)
By sas_anti_congruence on F, C, I, E, C, I we get anti_congruent_triangles(C, E, I, C, F, I)
By sas_similarity on C, D, J, E, D, G we get similar_triangles(C, D, J, E, D, G)
By sas_anti_similarity on B, D, E, C, D, J we get anti_similar_triangles(B, D, E, C, D, J)
By sas_anti_similarity on I, D, F, I, D, E we get anti_similar_triangles(D, E, I, D, F, I)
By sas_anti_congruence on I, D, E, I, D, F we get anti_congruent_triangles(D, E, I, D, F, I)
By sas_anti_similarity on B, D, A, F, D, I we get anti_similar_triangles(A, B, D, I, F, D)
By sas_anti_similarity on D, A, B, J, I, C we get anti_similar_triangles(A, B, D, I, C, J)
By sas_anti_similarity on C, I, J, B, A, D we get anti_similar_triangles(A, B, D, I, C, J)
By power_of_a_point_definition on I, G, E, Circle(D, E, G) we get log(distance(G, I)) + log(distance(E, I)) == log(power_of_a_point(I, Circle(D, E, G)))
By sas_anti_similarity on E, I, D, C, I, J we get anti_similar_triangles(C, I, J, E, I, D)
By sas_anti_similarity on F, D, I, E, D, I we get anti_similar_triangles(D, E, I, D, F, I)
By sas_anti_congruence on I, D, F, I, D, E we get anti_congruent_triangles(D, E, I, D, F, I)
By sas_anti_similarity on G, D, E, I, D, A we get anti_similar_triangles(A, D, I, E, D, G)
By sas_anti_similarity on G, E, B, I, D, A we get anti_similar_triangles(A, D, I, B, E, G)
By sas_anti_similarity on J, D, F, C, D, B we get anti_similar_triangles(B, C, D, F, J, D)
By sas_anti_similarity on J, I, C, D, I, E we get anti_similar_triangles(C, I, J, E, I, D)
By sas_anti_similarity on E, D, I, F, D, I we get anti_similar_triangles(D, E, I, D, F, I)
By sas_similarity on A, D, I, B, D, E we get similar_triangles(A, D, I, B, D, E)
By sas_anti_similarity on B, D, C, F, D, J we get anti_similar_triangles(B, C, D, F, J, D)
By sas_anti_similarity on B, A, D, C, I, J we get anti_similar_triangles(A, B, D, I, C, J)
By sas_similarity on I, D, A, E, D, B we get similar_triangles(A, D, I, B, D, E)
By sas_anti_similarity on I, C, A, F, C, D we get anti_similar_triangles(A, C, I, D, C, F)
By sas_anti_similarity on E, D, B, J, D, C we get anti_similar_triangles(B, D, E, C, D, J)
By sas_similarity on G, E, B, J, D, C we get similar_triangles(B, E, G, C, D, J)
By sas_anti_congruence on I, C, E, I, C, F we get anti_congruent_triangles(C, E, I, C, F, I)
By sas_anti_similarity on A, D, I, B, E, G we get anti_similar_triangles(A, D, I, B, E, G)
By sas_anti_similarity on A, C, D, I, C, F we get anti_similar_triangles(A, C, D, I, C, F)
By sas_similarity on I, J, D, I, C, F we get similar_triangles(C, F, I, J, D, I)
By sas_anti_similarity on C, D, B, J, D, F we get anti_similar_triangles(B, C, D, F, J, D)
By power_of_a_point_tangent on D, E, Circle(B, E, G) we get 2 * log(distance(D, E)) == log(power_of_a_point(D, Circle(B, E, G)))
By power_of_a_point_tangent on B, E, Circle(D, E, G) we get 2 * log(distance(B, E)) == log(power_of_a_point(B, Circle(D, E, G)))
By power_of_a_point_definition on J, E, G, Circle(B, E, G) we get log(distance(E, J)) + log(distance(G, J)) == log(power_of_a_point(J, Circle(B, E, G)))
By perpendicular_bisector_sufficient_conditions on E, F, C, D we get Line(C, D) == perpendicular_bisector(E, F)
By power_of_a_point_definition on J, E, G, Circle(D, E, G) we get log(distance(E, J)) + log(distance(G, J)) == log(power_of_a_point(J, Circle(D, E, G)))
By sas_anti_similarity on F, D, G, B, D, F we get anti_similar_triangles(B, D, F, F, D, G)
By isosceles_triangle_altitude_v2 on C, F, E we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, C, F), perpendicular_line(C, Line(E, F)))
By sas_anti_similarity on G, D, F, F, D, B we get anti_similar_triangles(B, D, F, F, D, G)
By sas_anti_similarity on B, D, F, F, D, G we get anti_similar_triangles(B, D, F, F, D, G)
By sas_anti_similarity on A, D, I, C, D, J we get anti_similar_triangles(A, D, I, C, D, J)
By sas_anti_similarity on J, D, C, I, D, A we get anti_similar_triangles(A, D, I, C, D, J)
By sas_anti_similarity on F, D, B, G, D, F we get anti_similar_triangles(B, D, F, F, D, G)
By sas_anti_similarity on I, D, A, J, D, C we get anti_similar_triangles(A, D, I, C, D, J)
By sas_anti_similarity on C, D, J, A, D, I we get anti_similar_triangles(A, D, I, C, D, J)
By isosceles_triangle_altitude_v2 on D, E, F we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, D, F), perpendicular_line(D, Line(E, F)))
By isosceles_triangle_altitude_v2 on D, F, E we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, D, F), perpendicular_line(D, Line(E, F)))
By isosceles_triangle_altitude_v2 on C, E, F we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, C, F), perpendicular_line(C, Line(E, F)))
By concurrent_sufficient_conditions on g, Line(E, F), Line(D, F) we get concurrent(g, Line(D, F), Line(E, F))
By line_definition on D, midpoint(E, F), j we get j == Line(D, midpoint(E, F))
By concyclic_sufficient_conditions_v0 on F, J, D, C we get concyclic(C, D, F, J)
By concurrent_sufficient_conditions on g, Line(D, F), Line(E, F) we get concurrent(g, Line(D, F), Line(E, F))
By concyclic_sufficient_conditions_v1 on D, F, A, I we get concyclic(A, D, F, I)
By concurrent_sufficient_conditions on f, Line(D, E), Line(E, F) we get concurrent(f, Line(D, E), Line(E, F))
By line_definition on line_circle_tangent_point(Line(D, E), Circle(B, E, G)), D, Line(D, E) we get Line(D, E) == Line(D, line_circle_tangent_point(Line(D, E), Circle(B, E, G)))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), f we get concurrent(f, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(E, F), k, Line(D, E) we get concurrent(k, Line(D, E), Line(E, F))
By line_definition on midpoint(E, F), I, j we get j == Line(I, midpoint(E, F))
By tangent_definition_from_perpendicularity_v0 on line_circle_tangent_point(Line(D, E), Circle(B, E, G)), Line(D, E), Circle(B, E, G) we get perpendicular(Line(D, E), Line(center(Circle(B, E, G)), line_circle_tangent_point(Line(D, E), Circle(B, E, G))))
By concurrent_sufficient_conditions on k, Line(D, E), Line(E, F) we get concurrent(k, Line(D, E), Line(E, F))
By line_definition on line_circle_tangent_point(f, Circle(D, E, G)), B, f we get f == Line(B, line_circle_tangent_point(f, Circle(D, E, G)))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), f we get concurrent(f, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), k we get concurrent(k, Line(D, E), Line(E, F))
By line_definition on C, midpoint(E, F), j we get j == Line(C, midpoint(E, F))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), g we get concurrent(g, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on f, Line(E, F), k we get concurrent(f, k, Line(E, F))
By concurrent_sufficient_conditions on Line(E, F), f, k we get concurrent(f, k, Line(E, F))
By concurrent_sufficient_conditions on f, Line(E, F), Line(D, E) we get concurrent(f, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(D, E), f, Line(E, F) we get concurrent(f, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(D, E), k, Line(E, F) we get concurrent(k, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(E, F), f, Line(D, E) we get concurrent(f, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on k, f, Line(E, F) we get concurrent(f, k, Line(E, F))
By concurrent_sufficient_conditions on f, k, Line(E, F) we get concurrent(f, k, Line(E, F))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), g we get concurrent(g, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(E, F), g, Line(D, F) we get concurrent(g, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), k we get concurrent(k, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on k, Line(E, F), f we get concurrent(f, k, Line(E, F))
By line_definition on line_circle_tangent_point(f, Circle(D, E, G)), C, f we get f == Line(C, line_circle_tangent_point(f, Circle(D, E, G)))
By concurrent_sufficient_conditions on Line(E, F), k, f we get concurrent(f, k, Line(E, F))
By concurrent_sufficient_conditions on k, Line(E, F), Line(D, E) we get concurrent(k, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(D, F), g, Line(E, F) we get concurrent(g, Line(D, F), Line(E, F))
By tangent_definition_from_perpendicularity_v0 on E, f, Circle(D, E, G) we get perpendicular(f, Line(E, center(Circle(D, E, G))))
By tangent_definition_from_perpendicularity_v0 on E, Line(D, E), Circle(B, E, G) we get perpendicular(Line(D, E), Line(E, center(Circle(B, E, G))))
By tangent_definition_from_perpendicularity_v0 on line_circle_tangent_point(f, Circle(D, E, G)), f, Circle(D, E, G) we get perpendicular(f, Line(center(Circle(D, E, G)), line_circle_tangent_point(f, Circle(D, E, G))))
By angles_on_chord_v2 on J, F, C, D, Circle(C, D, E) we get angle(J, C, F) == angle(J, D, F) + 180 mod 360
By angles_on_chord_v3 on F, E, C, J, Circle(C, D, E) we get angle(F, C, E) == angle(F, J, E) + 180 mod 360
By angles_on_chord_v0 on A, C, J, I, Circle(A, C, I) we get angle(A, I, C) == angle(A, J, C) mod 360
By angles_on_chord_v0 on C, E, F, J, Circle(C, D, E) we get angle(C, F, E) == angle(C, J, E) mod 360
By angles_on_chord_v0 on E, J, F, C, Circle(C, D, E) we get angle(E, C, J) == angle(E, F, J) mod 360
By angles_on_chord_v1 on C, F, E, J, Circle(C, D, E) we get angle(C, E, F) == angle(C, J, F) mod 360
By angles_on_chord_v0 on E, J, C, D, Circle(C, D, E) we get angle(E, C, J) == angle(E, D, J) mod 360
By angles_on_chord_v3 on J, C, F, E, Circle(C, D, E) we get angle(J, F, C) == angle(J, E, C) + 180 mod 360
By angles_on_chord_v3 on J, A, I, C, Circle(A, C, I) we get angle(J, I, A) == angle(J, C, A) + 180 mod 360
By angles_on_chord_v0 on F, C, D, J, Circle(C, D, E) we get angle(F, D, C) == angle(F, J, C) mod 360
By angles_on_chord_v1 on J, E, D, C, Circle(C, D, E) we get angle(J, C, E) == angle(J, D, E) mod 360
By angles_on_chord_v1 on C, A, J, I, Circle(A, C, I) we get angle(C, I, A) == angle(C, J, A) mod 360
By angles_on_chord_v2 on A, J, I, C, Circle(A, C, I) we get angle(A, I, J) == angle(A, C, J) + 180 mod 360
By angles_on_chord_v2 on J, A, C, I, Circle(A, C, I) we get angle(J, C, A) == angle(J, I, A) + 180 mod 360
By angles_on_chord_v1 on J, E, F, C, Circle(C, D, E) we get angle(J, C, E) == angle(J, F, E) mod 360
By angles_on_chord_v0 on C, E, J, D, Circle(C, D, E) we get angle(C, D, E) == angle(C, J, E) mod 360
By angles_on_chord_v0 on C, J, F, D, Circle(C, D, E) we get angle(C, D, J) == angle(C, F, J) mod 360
By angles_on_chord_v1 on E, F, J, D, Circle(C, D, E) we get angle(E, D, F) == angle(E, J, F) mod 360
By angles_on_chord_v1 on J, C, F, D, Circle(C, D, E) we get angle(J, D, C) == angle(J, F, C) mod 360
By angles_on_chord_v0 on F, C, E, J, Circle(C, D, E) we get angle(F, E, C) == angle(F, J, C) mod 360
By angles_on_chord_v1 on E, C, J, F, Circle(C, D, E) we get angle(E, F, C) == angle(E, J, C) mod 360
By angles_on_chord_v0 on J, F, E, C, Circle(C, D, E) we get angle(J, C, F) == angle(J, E, F) mod 360
By angles_on_chord_v2 on F, E, J, C, Circle(C, D, E) we get angle(F, J, E) == angle(F, C, E) + 180 mod 360
By angles_on_chord_v1 on I, J, A, C, Circle(A, C, I) we get angle(I, A, J) == angle(I, C, J) mod 360
By angles_on_chord_v1 on C, F, J, D, Circle(C, D, E) we get angle(C, D, F) == angle(C, J, F) mod 360
By angles_on_chord_v0 on E, J, D, F, Circle(C, D, E) we get angle(E, D, J) == angle(E, F, J) mod 360
By angles_on_chord_v0 on J, I, A, C, Circle(A, C, I) we get angle(J, A, I) == angle(J, C, I) mod 360
By angles_on_chord_v1 on E, C, D, J, Circle(C, D, E) we get angle(E, D, C) == angle(E, J, C) mod 360
By angles_on_chord_v3 on A, J, C, I, Circle(A, C, I) we get angle(A, C, J) == angle(A, I, J) + 180 mod 360
By angles_on_chord_v1 on J, E, D, F, Circle(C, D, E) we get angle(J, D, E) == angle(J, F, E) mod 360
By angles_on_chord_v2 on C, J, F, E, Circle(C, D, E) we get angle(C, F, J) == angle(C, E, J) + 180 mod 360
By angles_on_chord_v1 on F, J, C, E, Circle(C, D, E) we get angle(F, C, J) == angle(F, E, J) mod 360
By angles_on_chord_v0 on F, E, J, D, Circle(C, D, E) we get angle(F, D, E) == angle(F, J, E) mod 360
By angles_on_chord_v3 on C, J, E, F, Circle(C, D, E) we get angle(C, E, J) == angle(C, F, J) + 180 mod 360
By angles_on_chord_v3 on J, F, D, C, Circle(C, D, E) we get angle(J, D, F) == angle(J, C, F) + 180 mod 360
By angles_on_chord_v3 on E, F, J, C, Circle(C, D, E) we get angle(E, J, F) == angle(E, C, F) + 180 mod 360
By angles_on_chord_v3 on F, J, C, D, Circle(C, D, E) we get angle(F, C, J) == angle(F, D, J) + 180 mod 360
By angles_on_chord_v2 on F, J, D, C, Circle(C, D, E) we get angle(F, D, J) == angle(F, C, J) + 180 mod 360
By angles_on_chord_v2 on J, C, E, F, Circle(C, D, E) we get angle(J, E, C) == angle(J, F, C) + 180 mod 360
By angles_on_chord_v2 on E, F, C, J, Circle(C, D, E) we get angle(E, C, F) == angle(E, J, F) + 180 mod 360
By line_intersection_definition on F, Line(F, I), Line(B, F) we get F == line_intersection(Line(B, F), Line(F, I))
By radical_axis_of_intersecting_circles_v0 on B, G, Circle(B, E, G), Circle(B, F, G) we get Line(B, G) == radical_axis(Circle(B, E, G), Circle(B, F, G))
By line_intersection_definition on B, Line(A, B), Line(B, F) we get B == line_intersection(Line(A, B), Line(B, F))
By line_intersection_definition on I, j, Line(A, I) we get I == line_intersection(j, Line(A, I))
By circle_definition on D, J, F, Circle(C, D, E) we get Circle(C, D, E) == Circle(D, F, J)
By median_definition on I, F, E, j we get j == median(I, E, F)
By median_definition on C, E, F, j we get j == median(C, E, F)
By line_intersection_definition on F, Line(D, F), Line(B, F) we get F == line_intersection(Line(B, F), Line(D, F))
By line_intersection_definition on I, Line(F, I), j we get I == line_intersection(j, Line(F, I))
By line_intersection_definition on G, k, Line(F, G) we get G == line_intersection(k, Line(F, G))
By line_intersection_definition on F, Line(E, F), Line(F, G) we get F == line_intersection(Line(E, F), Line(F, G))
By line_intersection_definition on J, Line(C, J), k we get J == line_intersection(k, Line(C, J))
By line_intersection_definition on C, g, Line(C, J) we get C == line_intersection(g, Line(C, J))
By line_intersection_definition on I, Line(A, I), Line(F, I) we get I == line_intersection(Line(A, I), Line(F, I))
By line_intersection_definition on J, h, Line(C, J) we get J == line_intersection(h, Line(C, J))
By circle_definition on F, E, J, Circle(C, D, E) we get Circle(C, D, E) == Circle(E, F, J)
By circle_definition on J, C, F, Circle(C, D, E) we get Circle(C, D, E) == Circle(C, F, J)
By line_intersection_definition on J, h, Line(F, J) we get J == line_intersection(h, Line(F, J))
By perpendicular_line_definition on line_circle_tangent_point(Line(D, E), Circle(B, E, G)), Line(D, E), f we get Line(D, E) == perpendicular_line(line_circle_tangent_point(Line(D, E), Circle(B, E, G)), f)
By line_intersection_definition on F, Line(F, I), Line(E, F) we get F == line_intersection(Line(E, F), Line(F, I))
By line_intersection_definition on J, Line(C, J), Line(F, J) we get J == line_intersection(Line(C, J), Line(F, J))
By radical_axis_of_intersecting_circles_v0 on C, J, Circle(C, D, E), Circle(A, C, I) we get Line(C, J) == radical_axis(Circle(A, C, I), Circle(C, D, E))
By line_intersection_definition on F, g, Line(B, F) we get F == line_intersection(g, Line(B, F))
By circle_definition on G, D, line_circle_tangent_point(f, Circle(D, E, G)), Circle(D, E, G) we get Circle(D, E, G) == Circle(D, G, line_circle_tangent_point(f, Circle(D, E, G)))
By line_intersection_definition on J, k, Line(F, J) we get J == line_intersection(k, Line(F, J))
By line_intersection_definition on C, f, Line(C, J) we get C == line_intersection(f, Line(C, J))
By circle_definition on line_circle_tangent_point(Line(D, E), Circle(B, E, G)), G, B, Circle(B, E, G) we get Circle(B, E, G) == Circle(B, G, line_circle_tangent_point(Line(D, E), Circle(B, E, G)))
By line_intersection_definition on F, Line(F, J), Line(D, F) we get F == line_intersection(Line(D, F), Line(F, J))
By line_intersection_definition on B, i, Line(B, F) we get B == line_intersection(i, Line(B, F))
By line_intersection_definition on F, Line(F, G), Line(B, F) we get F == line_intersection(Line(B, F), Line(F, G))
By line_intersection_definition on F, Line(F, G), Line(D, F) we get F == line_intersection(Line(D, F), Line(F, G))
By line_intersection_definition on F, Line(F, I), Line(F, G) we get F == line_intersection(Line(F, G), Line(F, I))
By line_intersection_definition on A, Line(A, I), h we get A == line_intersection(h, Line(A, I))
By line_intersection_definition on F, g, Line(F, I) we get F == line_intersection(g, Line(F, I))
By line_intersection_definition on G, Line(F, G), i we get G == line_intersection(i, Line(F, G))
By line_intersection_definition on F, Line(B, F), Line(F, J) we get F == line_intersection(Line(B, F), Line(F, J))
By line_intersection_definition on F, Line(F, J), g we get F == line_intersection(g, Line(F, J))
By line_intersection_definition on C, j, Line(C, J) we get C == line_intersection(j, Line(C, J))
By line_intersection_definition on I, k, Line(A, I) we get I == line_intersection(k, Line(A, I))
By perpendicular_line_definition on I, j, Line(E, F) we get j == perpendicular_line(I, Line(E, F))
By line_intersection_definition on F, Line(F, J), Line(F, I) we get F == line_intersection(Line(F, I), Line(F, J))
By line_intersection_definition on F, Line(B, F), Line(E, F) we get F == line_intersection(Line(B, F), Line(E, F))
By line_intersection_definition on F, Line(F, G), Line(F, J) we get F == line_intersection(Line(F, G), Line(F, J))
By line_intersection_definition on I, Line(F, I), k we get I == line_intersection(k, Line(F, I))
By line_intersection_definition on F, Line(E, F), Line(F, J) we get F == line_intersection(Line(E, F), Line(F, J))
By median_definition on D, E, F, j we get j == median(D, E, F)
By line_intersection_definition on F, Line(D, F), Line(F, I) we get F == line_intersection(Line(D, F), Line(F, I))
By line_intersection_definition on A, Line(A, I), g we get A == line_intersection(g, Line(A, I))
By line_intersection_definition on B, f, Line(B, F) we get B == line_intersection(f, Line(B, F))
By line_intersection_definition on A, Line(A, B), Line(A, I) we get A == line_intersection(Line(A, B), Line(A, I))
By perpendicular_line_definition on line_circle_tangent_point(f, Circle(D, E, G)), f, Line(D, E) we get f == perpendicular_line(line_circle_tangent_point(f, Circle(D, E, G)), Line(D, E))
By line_intersection_definition on F, g, Line(F, G) we get F == line_intersection(g, Line(F, G))
By perpendicular_line_definition on E, Line(E, F), j we get Line(E, F) == perpendicular_line(E, j)
By perpendicular_line_definition on F, Line(E, F), j we get Line(E, F) == perpendicular_line(F, j)
By same_angle_v1 on I, J, E, F we get angle(E, I, F) == angle(J, I, F) mod 360
By perpendicular_direction_conditions_v0 on C, J, J, A we get perpendicular(Line(A, J), Line(C, J))
By same_angle_v1 on I, G, J, A we get angle(G, I, A) == angle(J, I, A) mod 360
By same_angle_v0 on A, C, H, I we get angle(C, A, I) == angle(H, A, I) mod 360
By same_angle_v0 on A, F, C, I we get angle(C, A, I) == angle(F, A, I) mod 360
By same_angle_v1 on F, A, H, G we get angle(A, F, G) == angle(H, F, G) mod 360
By same_angle_v0 on B, D, G, F we get angle(D, B, F) == angle(G, B, F) mod 360
By same_angle_v1 on I, E, J, A we get angle(E, I, A) == angle(J, I, A) mod 360
By same_angle_v3 on G, I, E, F we get angle(I, G, F) == angle(E, G, F) + 180 mod 360
By same_angle_v3 on F, C, A, I we get angle(C, F, I) == angle(A, F, I) + 180 mod 360
By same_angle_v1 on B, E, C, F we get angle(C, B, F) == angle(E, B, F) mod 360
By same_angle_v0 on C, E, B, J we get angle(B, C, J) == angle(E, C, J) mod 360
By perpendicular_direction_conditions_v0 on C, J, J, D we get perpendicular(Line(C, J), Line(D, J))
By same_angle_v0 on A, F, H, I we get angle(F, A, I) == angle(H, A, I) mod 360
By same_angle_v2 on F, C, A, B we get angle(C, F, B) == angle(A, F, B) + 180 mod 360
By same_angle_v1 on I, G, E, A we get angle(E, I, A) == angle(G, I, A) mod 360
By perpendicular_direction_conditions_v0 on C, D, I, A we get perpendicular(Line(A, I), Line(C, D))
By perpendicular_direction_conditions_v0 on J, C, D, A we get perpendicular(Line(A, D), Line(C, J))
By same_angle_v1 on C, H, F, J we get angle(F, C, J) == angle(H, C, J) mod 360
By perpendicular_direction_conditions_v0 on I, A, D, I we get perpendicular(Line(A, I), Line(D, I))
By same_angle_v1 on F, A, H, J we get angle(A, F, J) == angle(H, F, J) mod 360
By same_angle_v3 on J, G, E, C we get angle(G, J, C) == angle(E, J, C) + 180 mod 360
By same_angle_v2 on F, C, A, G we get angle(C, F, G) == angle(A, F, G) + 180 mod 360
By same_angle_v2 on G, I, J, F we get angle(I, G, F) == angle(J, G, F) + 180 mod 360
By same_angle_v1 on C, A, F, J we get angle(A, C, J) == angle(F, C, J) mod 360
By same_angle_v3 on F, C, H, G we get angle(C, F, G) == angle(H, F, G) + 180 mod 360
By same_angle_v0 on J, A, D, F we get angle(A, J, F) == angle(D, J, F) mod 360
By same_angle_v1 on F, A, H, I we get angle(A, F, I) == angle(H, F, I) mod 360
By same_angle_v3 on J, G, E, F we get angle(G, J, F) == angle(E, J, F) + 180 mod 360
By same_angle_v2 on F, C, H, J we get angle(C, F, J) == angle(H, F, J) + 180 mod 360
By same_angle_v3 on F, C, H, I we get angle(C, F, I) == angle(H, F, I) + 180 mod 360
By perpendicular_direction_conditions_v0 on A, I, C, I we get perpendicular(Line(A, I), Line(C, I))
By same_angle_v1 on C, H, A, J we get angle(A, C, J) == angle(H, C, J) mod 360
By same_angle_v0 on A, D, J, I we get angle(D, A, I) == angle(J, A, I) mod 360
By same_angle_v2 on J, I, E, C we get angle(I, J, C) == angle(E, J, C) + 180 mod 360
By same_angle_v0 on J, I, G, F we get angle(G, J, F) == angle(I, J, F) mod 360
By same_angle_v2 on G, D, B, F we get angle(D, G, F) == angle(B, G, F) + 180 mod 360
By same_angle_v2 on F, C, H, B we get angle(C, F, B) == angle(H, F, B) + 180 mod 360
By same_angle_v2 on F, C, A, J we get angle(C, F, J) == angle(A, F, J) + 180 mod 360
By same_angle_v2 on J, I, E, F we get angle(I, J, F) == angle(E, J, F) + 180 mod 360
By same_angle_v0 on J, G, I, C we get angle(G, J, C) == angle(I, J, C) mod 360
By same_angle_v1 on I, G, J, F we get angle(G, I, F) == angle(J, I, F) mod 360
By same_angle_v1 on G, E, J, F we get angle(E, G, F) == angle(J, G, F) mod 360
By same_angle_v0 on J, A, D, C we get angle(A, J, C) == angle(D, J, C) mod 360
By same_angle_v1 on I, G, E, F we get angle(E, I, F) == angle(G, I, F) mod 360
By same_angle_v1 on F, H, A, B we get angle(A, F, B) == angle(H, F, B) mod 360
By between_imply_not_between on F, midpoint(E, F), E we get collinear_and_not_between(E, F, midpoint(E, F))
By between_imply_not_between on E, midpoint(E, F), F we get collinear_and_not_between(F, E, midpoint(E, F))
By circle_radius_v0_r on E, Circle(D, E, G) we get radius(Circle(D, E, G)) == distance(E, center(Circle(D, E, G)))
By circle_radius_v0_r on E, Circle(C, D, E) we get radius(Circle(C, D, E)) == distance(E, center(Circle(C, D, E)))
By circle_radius_v0_r on J, Circle(C, D, E) we get radius(Circle(C, D, E)) == distance(J, center(Circle(C, D, E)))
By circle_radius_v0_r on line_circle_tangent_point(f, Circle(D, E, G)), Circle(D, E, G) we get radius(Circle(D, E, G)) == distance(center(Circle(D, E, G)), line_circle_tangent_point(f, Circle(D, E, G)))
By circle_radius_v0_r on F, Circle(C, D, E) we get radius(Circle(C, D, E)) == distance(F, center(Circle(C, D, E)))
By circle_radius_v0_r on G, Circle(B, E, G) we get radius(Circle(B, E, G)) == distance(G, center(Circle(B, E, G)))
By circle_radius_v0_r on line_circle_tangent_point(Line(D, E), Circle(B, E, G)), Circle(B, E, G) we get radius(Circle(B, E, G)) == distance(center(Circle(B, E, G)), line_circle_tangent_point(Line(D, E), Circle(B, E, G)))
By circle_radius_v0_r on D, Circle(D, E, G) we get radius(Circle(D, E, G)) == distance(D, center(Circle(D, E, G)))
By circle_radius_v0_r on G, Circle(D, E, G) we get radius(Circle(D, E, G)) == distance(G, center(Circle(D, E, G)))
By circle_radius_v0_r on C, Circle(C, D, E) we get radius(Circle(C, D, E)) == distance(C, center(Circle(C, D, E)))
By circle_radius_v0_r on D, Circle(C, D, E) we get radius(Circle(C, D, E)) == distance(D, center(Circle(C, D, E)))
By circle_radius_v0_r on B, Circle(B, E, G) we get radius(Circle(B, E, G)) == distance(B, center(Circle(B, E, G)))
By circle_radius_v0_r on E, Circle(B, E, G) we get radius(Circle(B, E, G)) == distance(E, center(Circle(B, E, G)))
By angle_to_center on D, C, F, Circle(C, D, E) we get 2 * angle(D, C, F) == angle(D, center(Circle(C, D, E)), F) mod 360
By angle_to_center on J, E, F, Circle(C, D, E) we get 2 * angle(J, E, F) == angle(J, center(Circle(C, D, E)), F) mod 360
By angle_to_center on D, E, C, Circle(C, D, E) we get 2 * angle(D, E, C) == angle(D, center(Circle(C, D, E)), C) mod 360
By angle_to_center on D, C, E, Circle(C, D, E) we get 2 * angle(D, C, E) == angle(D, center(Circle(C, D, E)), E) mod 360
By angle_to_center on C, J, F, Circle(C, D, E) we get 2 * angle(C, J, F) == angle(C, center(Circle(C, D, E)), F) mod 360
By angle_to_center on E, C, D, Circle(C, D, E) we get 2 * angle(E, C, D) == angle(E, center(Circle(C, D, E)), D) mod 360
By angle_to_center on C, F, E, Circle(C, D, E) we get 2 * angle(C, F, E) == angle(C, center(Circle(C, D, E)), E) mod 360
By angle_to_center on J, D, C, Circle(C, D, E) we get 2 * angle(J, D, C) == angle(J, center(Circle(C, D, E)), C) mod 360
By angle_to_center on F, E, D, Circle(C, D, E) we get 2 * angle(F, E, D) == angle(F, center(Circle(C, D, E)), D) mod 360
By angle_to_center on C, E, J, Circle(C, D, E) we get 2 * angle(C, E, J) == angle(C, center(Circle(C, D, E)), J) mod 360
By angle_to_center on C, J, E, Circle(C, D, E) we get 2 * angle(C, J, E) == angle(C, center(Circle(C, D, E)), E) mod 360
By angle_to_center on E, D, F, Circle(C, D, E) we get 2 * angle(E, D, F) == angle(E, center(Circle(C, D, E)), F) mod 360
By angle_to_center on G, E, D, Circle(D, E, G) we get 2 * angle(G, E, D) == angle(G, center(Circle(D, E, G)), D) mod 360
By angle_to_center on J, F, E, Circle(C, D, E) we get 2 * angle(J, F, E) == angle(J, center(Circle(C, D, E)), E) mod 360
By angle_to_center on E, B, G, Circle(B, E, G) we get 2 * angle(E, B, G) == angle(E, center(Circle(B, E, G)), G) mod 360
By angle_to_center on E, G, B, Circle(B, E, G) we get 2 * angle(E, G, B) == angle(E, center(Circle(B, E, G)), B) mod 360
By angle_to_center on J, C, E, Circle(C, D, E) we get 2 * angle(J, C, E) == angle(J, center(Circle(C, D, E)), E) mod 360
By angle_to_center on F, J, D, Circle(C, D, E) we get 2 * angle(F, J, D) == angle(F, center(Circle(C, D, E)), D) mod 360
By angle_to_center on J, E, C, Circle(C, D, E) we get 2 * angle(J, E, C) == angle(J, center(Circle(C, D, E)), C) mod 360
By angle_to_center on E, D, G, Circle(D, E, G) we get 2 * angle(E, D, G) == angle(E, center(Circle(D, E, G)), G) mod 360
By angle_to_center on D, C, J, Circle(C, D, E) we get 2 * angle(D, C, J) == angle(D, center(Circle(C, D, E)), J) mod 360
By angle_to_center on J, D, E, Circle(C, D, E) we get 2 * angle(J, D, E) == angle(J, center(Circle(C, D, E)), E) mod 360
By angle_to_center on D, E, G, Circle(D, E, G) we get 2 * angle(D, E, G) == angle(D, center(Circle(D, E, G)), G) mod 360
By angle_to_center on F, J, C, Circle(C, D, E) we get 2 * angle(F, J, C) == angle(F, center(Circle(C, D, E)), C) mod 360
By angle_to_center on J, F, C, Circle(C, D, E) we get 2 * angle(J, F, C) == angle(J, center(Circle(C, D, E)), C) mod 360
By angle_to_center on D, F, J, Circle(C, D, E) we get 2 * angle(D, F, J) == angle(D, center(Circle(C, D, E)), J) mod 360
By angle_to_center on J, E, D, Circle(C, D, E) we get 2 * angle(J, E, D) == angle(J, center(Circle(C, D, E)), D) mod 360
By angle_to_center on E, G, D, Circle(D, E, G) we get 2 * angle(E, G, D) == angle(E, center(Circle(D, E, G)), D) mod 360
By angle_to_center on D, J, F, Circle(C, D, E) we get 2 * angle(D, J, F) == angle(D, center(Circle(C, D, E)), F) mod 360
By angle_to_center on C, D, J, Circle(C, D, E) we get 2 * angle(C, D, J) == angle(C, center(Circle(C, D, E)), J) mod 360
By angle_to_center on B, E, G, Circle(B, E, G) we get 2 * angle(B, E, G) == angle(B, center(Circle(B, E, G)), G) mod 360
By angle_to_center on C, D, E, Circle(C, D, E) we get 2 * angle(C, D, E) == angle(C, center(Circle(C, D, E)), E) mod 360
By angle_to_center on E, C, F, Circle(C, D, E) we get 2 * angle(E, C, F) == angle(E, center(Circle(C, D, E)), F) mod 360
By angle_to_center on D, E, J, Circle(C, D, E) we get 2 * angle(D, E, J) == angle(D, center(Circle(C, D, E)), J) mod 360
By angle_to_center on E, F, J, Circle(C, D, E) we get 2 * angle(E, F, J) == angle(E, center(Circle(C, D, E)), J) mod 360
By angle_to_center on J, D, F, Circle(C, D, E) we get 2 * angle(J, D, F) == angle(J, center(Circle(C, D, E)), F) mod 360
By angle_to_center on E, F, D, Circle(C, D, E) we get 2 * angle(E, F, D) == angle(E, center(Circle(C, D, E)), D) mod 360
By angle_to_center on F, E, C, Circle(C, D, E) we get 2 * angle(F, E, C) == angle(F, center(Circle(C, D, E)), C) mod 360
By angle_to_center on G, B, E, Circle(B, E, G) we get 2 * angle(G, B, E) == angle(G, center(Circle(B, E, G)), E) mod 360
By angle_to_center on G, E, B, Circle(B, E, G) we get 2 * angle(G, E, B) == angle(G, center(Circle(B, E, G)), B) mod 360
By angle_to_center on E, J, F, Circle(C, D, E) we get 2 * angle(E, J, F) == angle(E, center(Circle(C, D, E)), F) mod 360
By angle_to_center on D, G, E, Circle(D, E, G) we get 2 * angle(D, G, E) == angle(D, center(Circle(D, E, G)), E) mod 360
By angle_to_center on J, C, D, Circle(C, D, E) we get 2 * angle(J, C, D) == angle(J, center(Circle(C, D, E)), D) mod 360
By angle_to_center on F, D, J, Circle(C, D, E) we get 2 * angle(F, D, J) == angle(F, center(Circle(C, D, E)), J) mod 360
By angle_to_center on E, D, J, Circle(C, D, E) we get 2 * angle(E, D, J) == angle(E, center(Circle(C, D, E)), J) mod 360
By angle_to_center on E, D, C, Circle(C, D, E) we get 2 * angle(E, D, C) == angle(E, center(Circle(C, D, E)), C) mod 360
By angle_to_center on F, C, J, Circle(C, D, E) we get 2 * angle(F, C, J) == angle(F, center(Circle(C, D, E)), J) mod 360
By angle_to_center on E, J, C, Circle(C, D, E) we get 2 * angle(E, J, C) == angle(E, center(Circle(C, D, E)), C) mod 360
By angle_to_center on C, E, F, Circle(C, D, E) we get 2 * angle(C, E, F) == angle(C, center(Circle(C, D, E)), F) mod 360
By angle_to_center on D, J, C, Circle(C, D, E) we get 2 * angle(D, J, C) == angle(D, center(Circle(C, D, E)), C) mod 360
By angle_to_center on C, J, D, Circle(C, D, E) we get 2 * angle(C, J, D) == angle(C, center(Circle(C, D, E)), D) mod 360
By angle_to_center on C, D, F, Circle(C, D, E) we get 2 * angle(C, D, F) == angle(C, center(Circle(C, D, E)), F) mod 360
By angle_to_center on B, G, E, Circle(B, E, G) we get 2 * angle(B, G, E) == angle(B, center(Circle(B, E, G)), E) mod 360
By angle_to_center on F, C, E, Circle(C, D, E) we get 2 * angle(F, C, E) == angle(F, center(Circle(C, D, E)), E) mod 360
By angle_to_center on D, E, F, Circle(C, D, E) we get 2 * angle(D, E, F) == angle(D, center(Circle(C, D, E)), F) mod 360
By angle_to_center on D, J, E, Circle(C, D, E) we get 2 * angle(D, J, E) == angle(D, center(Circle(C, D, E)), E) mod 360
By angle_to_center on E, J, D, Circle(C, D, E) we get 2 * angle(E, J, D) == angle(E, center(Circle(C, D, E)), D) mod 360
By angle_to_center on D, F, C, Circle(C, D, E) we get 2 * angle(D, F, C) == angle(D, center(Circle(C, D, E)), C) mod 360
By angle_to_center on F, D, E, Circle(C, D, E) we get 2 * angle(F, D, E) == angle(F, center(Circle(C, D, E)), E) mod 360
By angle_to_center on F, D, C, Circle(C, D, E) we get 2 * angle(F, D, C) == angle(F, center(Circle(C, D, E)), C) mod 360
By angle_to_center on E, F, C, Circle(C, D, E) we get 2 * angle(E, F, C) == angle(E, center(Circle(C, D, E)), C) mod 360
By angle_to_center on C, F, J, Circle(C, D, E) we get 2 * angle(C, F, J) == angle(C, center(Circle(C, D, E)), J) mod 360
By angle_to_center on F, C, D, Circle(C, D, E) we get 2 * angle(F, C, D) == angle(F, center(Circle(C, D, E)), D) mod 360
By angle_to_center on E, C, J, Circle(C, D, E) we get 2 * angle(E, C, J) == angle(E, center(Circle(C, D, E)), J) mod 360
By angle_to_center on G, D, E, Circle(D, E, G) we get 2 * angle(G, D, E) == angle(G, center(Circle(D, E, G)), E) mod 360
By angle_to_center on F, J, E, Circle(C, D, E) we get 2 * angle(F, J, E) == angle(F, center(Circle(C, D, E)), E) mod 360
By angle_to_center on J, C, F, Circle(C, D, E) we get 2 * angle(J, C, F) == angle(J, center(Circle(C, D, E)), F) mod 360
By angle_to_center on C, F, D, Circle(C, D, E) we get 2 * angle(C, F, D) == angle(C, center(Circle(C, D, E)), D) mod 360
By angle_to_center on D, F, E, Circle(C, D, E) we get 2 * angle(D, F, E) == angle(D, center(Circle(C, D, E)), E) mod 360
By angle_to_center on F, E, J, Circle(C, D, E) we get 2 * angle(F, E, J) == angle(F, center(Circle(C, D, E)), J) mod 360
By angle_to_center on C, E, D, Circle(C, D, E) we get 2 * angle(C, E, D) == angle(C, center(Circle(C, D, E)), D) mod 360
By angle_to_center on J, F, D, Circle(C, D, E) we get 2 * angle(J, F, D) == angle(J, center(Circle(C, D, E)), D) mod 360
By in_imply_collinear on line_circle_tangent_point(f, Circle(D, E, G)), B, C we get collinear(B, C, line_circle_tangent_point(f, Circle(D, E, G)))
By in_imply_collinear on line_circle_tangent_point(f, Circle(D, E, G)), B, E we get collinear(B, E, line_circle_tangent_point(f, Circle(D, E, G)))
By in_imply_collinear on midpoint(E, F), I, D we get collinear(D, I, midpoint(E, F))
By tangent_chord_angle_reverse_v3 on F, B, G, D we get angle(B, G, F) == angle(B, F, D) + 180 mod 360
By in_imply_concyclic on B, E, G, line_circle_tangent_point(Line(D, E), Circle(B, E, G)) we get concyclic(B, E, G, line_circle_tangent_point(Line(D, E), Circle(B, E, G)))
By in_imply_concyclic on E, F, C, J we get concyclic(C, E, F, J)
By in_imply_collinear on midpoint(E, F), D, C we get collinear(C, D, midpoint(E, F))
By in_imply_collinear on line_circle_tangent_point(Line(D, E), Circle(B, E, G)), E, D we get collinear(D, E, line_circle_tangent_point(Line(D, E), Circle(B, E, G)))
By tangent_point_is_unique on line_circle_tangent_point(Line(D, E), Circle(B, E, G)), E, Circle(B, E, G), Line(D, E) we get E == line_circle_tangent_point(Line(D, E), Circle(B, E, G))
By in_imply_collinear on midpoint(E, F), C, I we get collinear(C, I, midpoint(E, F))
By isosceles_triangle_properties on I, E, F we get distance(E, I) == distance(F, I), angle(E, F, I) == angle(I, E, F) mod 360
By tangent_point_is_unique on E, line_circle_tangent_point(f, Circle(D, E, G)), Circle(D, E, G), f we get E == line_circle_tangent_point(f, Circle(D, E, G))
By sss_anti_congruence_v1 on E, I, F, F, I, E we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v0 on E, F, I, F, E, I we get anti_congruent_triangles(E, F, I, F, E, I)
By in_imply_collinear on line_circle_tangent_point(f, Circle(D, E, G)), C, E we get collinear(C, E, line_circle_tangent_point(f, Circle(D, E, G)))
By sss_anti_congruence_v0 on F, I, E, E, I, F we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v0 on F, I, E, E, I, F we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on F, E, I, E, F, I we get anti_congruent_triangles(E, F, I, F, E, I)
By in_imply_concyclic on D, E, G, line_circle_tangent_point(f, Circle(D, E, G)) we get concyclic(D, E, G, line_circle_tangent_point(f, Circle(D, E, G)))
By sss_anti_congruence_v1 on F, E, I, E, F, I we get anti_congruent_triangles(E, F, I, F, E, I)
By tangent_chord_angle_reverse_v0 on F, G, B, D we get angle(G, B, F) == angle(G, F, D) mod 360
By reverse_direction on F, B we get 180 == direction(F, B) - direction(B, F) mod 360
By reverse_direction on B, F we get 180 == direction(B, F) - direction(F, B) mod 360
By sss_anti_congruence_v1 on I, F, E, I, E, F we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v0 on I, E, F, I, F, E we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v0 on E, F, I, F, E, I we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v0 on I, E, F, I, F, E we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v0 on E, F, I, F, E, I we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v0 on I, E, F, I, F, E we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v0 on E, F, I, F, E, I we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v0 on F, I, E, E, I, F we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on I, F, E, I, E, F we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on E, I, F, F, I, E we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on F, E, I, E, F, I we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v0 on F, I, E, E, I, F we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v0 on E, F, I, F, E, I we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on I, F, E, I, E, F we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v0 on I, E, F, I, F, E we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on E, I, F, F, I, E we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on F, E, I, E, F, I we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on E, I, F, F, I, E we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on I, F, E, I, E, F we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v0 on F, I, E, E, I, F we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v0 on I, E, F, I, F, E we get anti_congruent_triangles(E, F, I, F, E, I)
By reverse_direction on F, G we get 180 == direction(F, G) - direction(G, F) mod 360
By sss_anti_congruence_v1 on I, F, E, I, E, F we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on I, F, E, I, E, F we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on F, E, I, E, F, I we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on F, E, I, E, F, I we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v0 on E, F, I, F, E, I we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on E, I, F, F, I, E we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v1 on E, I, F, F, I, E we get anti_congruent_triangles(E, F, I, F, E, I)
By sss_anti_congruence_v0 on I, E, F, I, F, E we get anti_congruent_triangles(E, F, I, F, E, I)
By reverse_direction on G, F we get 180 == direction(G, F) - direction(F, G) mod 360
By sss_anti_congruence_v0 on F, I, E, E, I, F we get anti_congruent_triangles(E, F, I, F, E, I)
By isosceles_triangle_properties on I, F, E we get distance(E, I) == distance(F, I), angle(F, E, I) == angle(I, F, E) mod 360
By angle_to_center on line_circle_tangent_point(f, Circle(D, E, G)), G, D, Circle(D, E, G) we get angle(line_circle_tangent_point(f, Circle(D, E, G)), center(Circle(D, E, G)), D) == 2 * angle(line_circle_tangent_point(f, Circle(D, E, G)), G, D) mod 360
By angle_to_center on G, D, line_circle_tangent_point(f, Circle(D, E, G)), Circle(D, E, G) we get angle(G, center(Circle(D, E, G)), line_circle_tangent_point(f, Circle(D, E, G))) == 2 * angle(G, D, line_circle_tangent_point(f, Circle(D, E, G))) mod 360
By angle_to_center on G, B, line_circle_tangent_point(Line(D, E), Circle(B, E, G)), Circle(B, E, G) we get angle(G, center(Circle(B, E, G)), line_circle_tangent_point(Line(D, E), Circle(B, E, G))) == 2 * angle(G, B, line_circle_tangent_point(Line(D, E), Circle(B, E, G))) mod 360
By angle_to_center on B, G, line_circle_tangent_point(Line(D, E), Circle(B, E, G)), Circle(B, E, G) we get angle(B, center(Circle(B, E, G)), line_circle_tangent_point(Line(D, E), Circle(B, E, G))) == 2 * angle(B, G, line_circle_tangent_point(Line(D, E), Circle(B, E, G))) mod 360
By angle_to_center on line_circle_tangent_point(Line(D, E), Circle(B, E, G)), B, G, Circle(B, E, G) we get angle(line_circle_tangent_point(Line(D, E), Circle(B, E, G)), center(Circle(B, E, G)), G) == 2 * angle(line_circle_tangent_point(Line(D, E), Circle(B, E, G)), B, G) mod 360
By angle_to_center on line_circle_tangent_point(Line(D, E), Circle(B, E, G)), G, B, Circle(B, E, G) we get angle(line_circle_tangent_point(Line(D, E), Circle(B, E, G)), center(Circle(B, E, G)), B) == 2 * angle(line_circle_tangent_point(Line(D, E), Circle(B, E, G)), G, B) mod 360
By angle_to_center on D, G, line_circle_tangent_point(f, Circle(D, E, G)), Circle(D, E, G) we get angle(D, center(Circle(D, E, G)), line_circle_tangent_point(f, Circle(D, E, G))) == 2 * angle(D, G, line_circle_tangent_point(f, Circle(D, E, G))) mod 360
By angle_to_center on line_circle_tangent_point(f, Circle(D, E, G)), D, G, Circle(D, E, G) we get angle(line_circle_tangent_point(f, Circle(D, E, G)), center(Circle(D, E, G)), G) == 2 * angle(line_circle_tangent_point(f, Circle(D, E, G)), D, G) mod 360
By anti_similar_triangle_basic_properties on C, E, I, C, F, I we get angle(C, E, I) == 0 - angle(C, F, I) mod 360, angle(E, I, C) == 0 - angle(F, I, C) mod 360, angle(I, C, E) == 0 - angle(I, C, F) mod 360, log(distance(C, E)) + log(distance(F, I)) == log(distance(C, F)) + log(distance(E, I)), log(distance(E, I)) + log(distance(C, I)) == log(distance(F, I)) + log(distance(C, I)), log(distance(C, I)) + log(distance(C, E)) == log(distance(C, I)) + log(distance(C, F))
By external_angle_bisector_definition_v0_r on D, C, D, J we get Line(C, J) == external_angle_bisector(D, J, D)
By anti_similar_triangle_basic_properties on F, D, J, B, D, C we get angle(F, D, J) == 0 - angle(B, D, C) mod 360, angle(D, J, F) == 0 - angle(D, C, B) mod 360, angle(J, F, D) == 0 - angle(C, B, D) mod 360, log(distance(B, D)) + log(distance(D, J)) == log(distance(D, F)) + log(distance(C, D)), log(distance(C, D)) + log(distance(F, J)) == log(distance(D, J)) + log(distance(B, C)), log(distance(B, C)) + log(distance(D, F)) == log(distance(F, J)) + log(distance(B, D))
By internal_angle_bisector_definition_v0_r on F, C, E, I we get Line(C, I) == internal_angle_bisector(E, I, F)
By similar_triangle_basic_properties on C, I, A, C, E, D we get angle(C, E, D) == angle(C, I, A) mod 360, angle(E, D, C) == angle(I, A, C) mod 360, angle(A, C, I) == angle(D, C, E) mod 360, log(distance(C, E)) + log(distance(A, I)) == log(distance(C, I)) + log(distance(D, E)), log(distance(A, I)) + log(distance(C, D)) == log(distance(D, E)) + log(distance(A, C)), log(distance(A, C)) + log(distance(C, E)) == log(distance(C, D)) + log(distance(C, I))
By similar_triangle_basic_properties on C, A, I, C, D, E we get angle(C, A, I) == angle(C, D, E) mod 360, angle(A, I, C) == angle(D, E, C) mod 360, angle(E, C, D) == angle(I, C, A) mod 360, log(distance(A, C)) + log(distance(D, E)) == log(distance(C, D)) + log(distance(A, I)), log(distance(A, I)) + log(distance(C, E)) == log(distance(D, E)) + log(distance(C, I)), log(distance(C, E)) + log(distance(A, C)) == log(distance(C, I)) + log(distance(C, D))
By power_of_a_point_in_circle on line_circle_tangent_point(f, Circle(D, E, G)), Circle(D, E, G) we get 0 == power_of_a_point(line_circle_tangent_point(f, Circle(D, E, G)), Circle(D, E, G))
By power_of_a_point_definition on A, D, J, Circle(C, D, E) we get log(distance(A, D)) + log(distance(A, J)) == log(power_of_a_point(A, Circle(C, D, E)))
By anti_similar_triangle_basic_properties on J, D, F, C, D, B we get angle(J, D, F) == 0 - angle(C, D, B) mod 360, angle(D, F, J) == 0 - angle(D, B, C) mod 360, angle(F, J, D) == 0 - angle(B, C, D) mod 360, log(distance(C, D)) + log(distance(D, F)) == log(distance(D, J)) + log(distance(B, D)), log(distance(B, D)) + log(distance(F, J)) == log(distance(D, F)) + log(distance(B, C)), log(distance(B, C)) + log(distance(D, J)) == log(distance(F, J)) + log(distance(C, D))
By isosceles_triangle_midpoint on C, E, F we get midpoint(E, F) in median(C, E, F)
By anti_similar_triangle_basic_properties on I, E, D, I, F, D we get angle(I, E, D) == 0 - angle(I, F, D) mod 360, angle(E, D, I) == 0 - angle(F, D, I) mod 360, angle(D, I, E) == 0 - angle(D, I, F) mod 360, log(distance(E, I)) + log(distance(D, F)) == log(distance(F, I)) + log(distance(D, E)), log(distance(D, E)) + log(distance(D, I)) == log(distance(D, F)) + log(distance(D, I)), log(distance(D, I)) + log(distance(E, I)) == log(distance(D, I)) + log(distance(F, I))
By concyclic_definition_0 on E, J, F, D we get D in Circle(E, F, J)
By external_angle_bisector_definition_v0_r on D, A, D, I we get Line(A, I) == external_angle_bisector(D, I, D)
By anti_similar_triangle_basic_properties on A, I, D, B, G, E we get angle(A, I, D) == 0 - angle(B, G, E) mod 360, angle(I, D, A) == 0 - angle(G, E, B) mod 360, angle(D, A, I) == 0 - angle(E, B, G) mod 360, log(distance(A, I)) + log(distance(E, G)) == log(distance(B, G)) + log(distance(D, I)), log(distance(D, I)) + log(distance(B, E)) == log(distance(E, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(B, G)) == log(distance(B, E)) + log(distance(A, I))
By similar_triangle_basic_properties on B, D, E, A, D, I we get angle(A, D, I) == angle(B, D, E) mod 360, angle(D, E, B) == angle(D, I, A) mod 360, angle(E, B, D) == angle(I, A, D) mod 360, log(distance(A, D)) + log(distance(D, E)) == log(distance(B, D)) + log(distance(D, I)), log(distance(D, E)) + log(distance(A, I)) == log(distance(D, I)) + log(distance(B, E)), log(distance(A, I)) + log(distance(B, D)) == log(distance(B, E)) + log(distance(A, D))
By concyclic_definition_0 on J, F, D, E we get E in Circle(D, F, J)
By anti_similar_triangle_basic_properties on F, I, C, D, A, C we get angle(F, I, C) == 0 - angle(D, A, C) mod 360, angle(I, C, F) == 0 - angle(A, C, D) mod 360, angle(C, F, I) == 0 - angle(C, D, A) mod 360, log(distance(A, D)) + log(distance(C, I)) == log(distance(F, I)) + log(distance(A, C)), log(distance(A, C)) + log(distance(C, F)) == log(distance(C, I)) + log(distance(C, D)), log(distance(C, D)) + log(distance(F, I)) == log(distance(C, F)) + log(distance(A, D))
By radical_axis_definition_v0_r on E, Circle(C, D, E), Circle(B, E, G) we get E in radical_axis(Circle(B, E, G), Circle(C, D, E))
By collinear_definition on F, midpoint(E, F), E we get midpoint(E, F) in Line(E, F), E in Line(F, midpoint(E, F)), Line(E, F) == Line(F, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), F, E) mod 360
By internal_angle_bisector_definition_v0_r on J, C, F, I we get Line(C, I) == internal_angle_bisector(F, I, J)
By similar_triangle_basic_properties on B, E, G, C, D, J we get angle(B, E, G) == angle(C, D, J) mod 360, angle(D, J, C) == angle(E, G, B) mod 360, angle(G, B, E) == angle(J, C, D) mod 360, log(distance(B, E)) + log(distance(D, J)) == log(distance(C, D)) + log(distance(E, G)), log(distance(D, J)) + log(distance(B, G)) == log(distance(E, G)) + log(distance(C, J)), log(distance(B, G)) + log(distance(C, D)) == log(distance(C, J)) + log(distance(B, E))
By similar_triangle_basic_properties on C, J, D, B, G, E we get angle(B, G, E) == angle(C, J, D) mod 360, angle(G, E, B) == angle(J, D, C) mod 360, angle(D, C, J) == angle(E, B, G) mod 360, log(distance(B, G)) + log(distance(D, J)) == log(distance(C, J)) + log(distance(E, G)), log(distance(D, J)) + log(distance(B, E)) == log(distance(E, G)) + log(distance(C, D)), log(distance(B, E)) + log(distance(C, J)) == log(distance(C, D)) + log(distance(B, G))
By anti_similar_triangle_basic_properties on C, J, D, B, E, D we get angle(C, J, D) == 0 - angle(B, E, D) mod 360, angle(J, D, C) == 0 - angle(E, D, B) mod 360, angle(D, C, J) == 0 - angle(D, B, E) mod 360, log(distance(B, E)) + log(distance(D, J)) == log(distance(C, J)) + log(distance(D, E)), log(distance(D, E)) + log(distance(C, D)) == log(distance(D, J)) + log(distance(B, D)), log(distance(B, D)) + log(distance(C, J)) == log(distance(C, D)) + log(distance(B, E))
By anti_similar_triangle_basic_properties on A, C, I, D, C, F we get angle(A, C, I) == 0 - angle(D, C, F) mod 360, angle(C, I, A) == 0 - angle(C, F, D) mod 360, angle(I, A, C) == 0 - angle(F, D, C) mod 360, log(distance(A, C)) + log(distance(C, F)) == log(distance(C, D)) + log(distance(C, I)), log(distance(C, F)) + log(distance(A, I)) == log(distance(C, I)) + log(distance(D, F)), log(distance(A, I)) + log(distance(C, D)) == log(distance(D, F)) + log(distance(A, C))
By anti_similar_triangle_basic_properties on B, A, D, F, I, D we get angle(B, A, D) == 0 - angle(F, I, D) mod 360, angle(A, D, B) == 0 - angle(I, D, F) mod 360, angle(D, B, A) == 0 - angle(D, F, I) mod 360, log(distance(A, B)) + log(distance(D, I)) == log(distance(F, I)) + log(distance(A, D)), log(distance(A, D)) + log(distance(D, F)) == log(distance(D, I)) + log(distance(B, D)), log(distance(B, D)) + log(distance(F, I)) == log(distance(D, F)) + log(distance(A, B))
By external_angle_bisector_definition_v0_r on A, D, A, I we get Line(D, I) == external_angle_bisector(A, I, A)
By similar_triangle_basic_properties on D, C, J, D, E, G we get angle(D, C, J) == angle(D, E, G) mod 360, angle(C, J, D) == angle(E, G, D) mod 360, angle(G, D, E) == angle(J, D, C) mod 360, log(distance(C, D)) + log(distance(E, G)) == log(distance(D, E)) + log(distance(C, J)), log(distance(C, J)) + log(distance(D, G)) == log(distance(E, G)) + log(distance(D, J)), log(distance(D, G)) + log(distance(C, D)) == log(distance(D, J)) + log(distance(D, E))
By external_angle_bisector_definition_v0_r on E, D, F, J we get Line(D, J) == external_angle_bisector(E, J, F)
By concyclic_definition_1 on E, J, D, F we get Circle(D, E, J) == Circle(D, F, J)
By similar_triangle_basic_properties on C, A, I, J, D, G we get angle(C, A, I) == angle(J, D, G) mod 360, angle(A, I, C) == angle(D, G, J) mod 360, angle(G, J, D) == angle(I, C, A) mod 360, log(distance(A, C)) + log(distance(D, G)) == log(distance(D, J)) + log(distance(A, I)), log(distance(A, I)) + log(distance(G, J)) == log(distance(D, G)) + log(distance(C, I)), log(distance(C, I)) + log(distance(D, J)) == log(distance(G, J)) + log(distance(A, C))
By anti_similar_triangle_basic_properties on D, F, I, D, E, I we get angle(D, F, I) == 0 - angle(D, E, I) mod 360, angle(F, I, D) == 0 - angle(E, I, D) mod 360, angle(I, D, F) == 0 - angle(I, D, E) mod 360, log(distance(D, E)) + log(distance(F, I)) == log(distance(D, F)) + log(distance(E, I)), log(distance(E, I)) + log(distance(D, I)) == log(distance(F, I)) + log(distance(D, I)), log(distance(D, I)) + log(distance(D, E)) == log(distance(D, I)) + log(distance(D, F))
By anti_similar_triangle_basic_properties on D, I, E, J, I, C we get angle(D, I, E) == 0 - angle(J, I, C) mod 360, angle(I, E, D) == 0 - angle(I, C, J) mod 360, angle(E, D, I) == 0 - angle(C, J, I) mod 360, log(distance(D, I)) + log(distance(C, I)) == log(distance(I, J)) + log(distance(E, I)), log(distance(C, I)) + log(distance(D, E)) == log(distance(E, I)) + log(distance(C, J)), log(distance(C, J)) + log(distance(D, I)) == log(distance(D, E)) + log(distance(I, J))
By internal_angle_bisector_definition_v0_r on I, D, J, F we get Line(D, F) == internal_angle_bisector(I, F, J)
By power_of_a_point_in_circle on G, Circle(B, F, G) we get 0 == power_of_a_point(G, Circle(B, F, G))
By power_of_a_point_in_circle on A, Circle(A, C, I) we get 0 == power_of_a_point(A, Circle(A, C, I))
By anti_similar_triangle_basic_properties on D, A, I, D, E, G we get angle(D, A, I) == 0 - angle(D, E, G) mod 360, angle(A, I, D) == 0 - angle(E, G, D) mod 360, angle(I, D, A) == 0 - angle(G, D, E) mod 360, log(distance(A, D)) + log(distance(E, G)) == log(distance(D, E)) + log(distance(A, I)), log(distance(A, I)) + log(distance(D, G)) == log(distance(E, G)) + log(distance(D, I)), log(distance(D, G)) + log(distance(A, D)) == log(distance(D, I)) + log(distance(D, E))
By internal_angle_bisector_definition_v0_r on F, D, J, I we get Line(D, I) == internal_angle_bisector(F, I, J)
By similar_triangle_basic_properties on D, J, G, A, C, I we get angle(A, C, I) == angle(D, J, G) mod 360, angle(C, I, A) == angle(J, G, D) mod 360, angle(G, D, J) == angle(I, A, C) mod 360, log(distance(A, C)) + log(distance(G, J)) == log(distance(D, J)) + log(distance(C, I)), log(distance(C, I)) + log(distance(D, G)) == log(distance(G, J)) + log(distance(A, I)), log(distance(A, I)) + log(distance(D, J)) == log(distance(D, G)) + log(distance(A, C))
By anti_similar_triangle_basic_properties on I, A, D, G, E, D we get angle(I, A, D) == 0 - angle(G, E, D) mod 360, angle(A, D, I) == 0 - angle(E, D, G) mod 360, angle(D, I, A) == 0 - angle(D, G, E) mod 360, log(distance(A, I)) + log(distance(D, E)) == log(distance(E, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(D, G)) == log(distance(D, E)) + log(distance(D, I)), log(distance(D, G)) + log(distance(A, I)) == log(distance(D, I)) + log(distance(E, G))
By anti_similar_triangle_basic_properties on E, I, D, C, I, J we get angle(E, I, D) == 0 - angle(C, I, J) mod 360, angle(I, D, E) == 0 - angle(I, J, C) mod 360, angle(D, E, I) == 0 - angle(J, C, I) mod 360, log(distance(C, I)) + log(distance(D, I)) == log(distance(E, I)) + log(distance(I, J)), log(distance(D, I)) + log(distance(C, J)) == log(distance(I, J)) + log(distance(D, E)), log(distance(C, J)) + log(distance(E, I)) == log(distance(D, E)) + log(distance(C, I))
By concyclic_definition_1 on J, F, D, E we get Circle(D, E, F) == Circle(D, F, J)
By external_angle_bisector_definition_v0_r on A, C, A, I we get Line(C, I) == external_angle_bisector(A, I, A)
By power_of_a_point_in_circle on C, Circle(A, C, I) we get 0 == power_of_a_point(C, Circle(A, C, I))
By internal_angle_bisector_definition_v0_r on F, C, G, I we get Line(C, I) == internal_angle_bisector(F, I, G)
By anti_similar_triangle_basic_properties on E, G, B, D, I, A we get angle(E, G, B) == 0 - angle(D, I, A) mod 360, angle(G, B, E) == 0 - angle(I, A, D) mod 360, angle(B, E, G) == 0 - angle(A, D, I) mod 360, log(distance(D, I)) + log(distance(B, G)) == log(distance(E, G)) + log(distance(A, I)), log(distance(A, I)) + log(distance(B, E)) == log(distance(B, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(E, G)) == log(distance(B, E)) + log(distance(D, I))
By external_angle_bisector_definition_v0_r on C, A, D, I we get Line(A, I) == external_angle_bisector(C, I, D)
By altitude_definition on C, E, F, j we get j == altitude(C, E, F)
By external_angle_bisector_definition_v0_r on C, D, C, J we get Line(D, J) == external_angle_bisector(C, J, C)
By anti_similar_triangle_basic_properties on B, D, A, C, J, I we get angle(B, D, A) == 0 - angle(C, J, I) mod 360, angle(D, A, B) == 0 - angle(J, I, C) mod 360, angle(A, B, D) == 0 - angle(I, C, J) mod 360, log(distance(B, D)) + log(distance(I, J)) == log(distance(C, J)) + log(distance(A, D)), log(distance(A, D)) + log(distance(C, I)) == log(distance(I, J)) + log(distance(A, B)), log(distance(A, B)) + log(distance(C, J)) == log(distance(C, I)) + log(distance(B, D))
By power_of_a_point_on_circle on J, Circle(C, D, E) we get 0 == power_of_a_point(J, Circle(C, D, E))
By anti_similar_triangle_basic_properties on F, C, I, D, C, A we get angle(F, C, I) == 0 - angle(D, C, A) mod 360, angle(C, I, F) == 0 - angle(C, A, D) mod 360, angle(I, F, C) == 0 - angle(A, D, C) mod 360, log(distance(C, D)) + log(distance(C, I)) == log(distance(C, F)) + log(distance(A, C)), log(distance(A, C)) + log(distance(F, I)) == log(distance(C, I)) + log(distance(A, D)), log(distance(A, D)) + log(distance(C, F)) == log(distance(F, I)) + log(distance(C, D))
By log_of_2_times_distance on E, F, F, midpoint(E, F) we get log(distance(E, F)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(F, midpoint(E, F)))
By concyclic_definition_1 on D, E, J, F we get Circle(D, E, J) == Circle(E, F, J)
By external_angle_bisector_definition_v0_r on C, A, C, I we get Line(A, I) == external_angle_bisector(C, I, C)
By internal_angle_bisector_definition_v0_r on F, D, E, I we get Line(D, I) == internal_angle_bisector(E, I, F)
By similar_triangle_basic_properties on D, J, I, F, C, I we get angle(D, J, I) == angle(F, C, I) mod 360, angle(C, I, F) == angle(J, I, D) mod 360, angle(I, D, J) == angle(I, F, C) mod 360, log(distance(C, F)) + log(distance(I, J)) == log(distance(D, J)) + log(distance(C, I)), log(distance(C, I)) + log(distance(D, I)) == log(distance(I, J)) + log(distance(F, I)), log(distance(D, I)) + log(distance(C, F)) == log(distance(F, I)) + log(distance(D, J))
By anti_similar_triangle_basic_properties on A, D, B, I, J, C we get angle(A, D, B) == 0 - angle(I, J, C) mod 360, angle(D, B, A) == 0 - angle(J, C, I) mod 360, angle(B, A, D) == 0 - angle(C, I, J) mod 360, log(distance(A, D)) + log(distance(C, J)) == log(distance(I, J)) + log(distance(B, D)), log(distance(B, D)) + log(distance(C, I)) == log(distance(C, J)) + log(distance(A, B)), log(distance(A, B)) + log(distance(I, J)) == log(distance(C, I)) + log(distance(A, D))
By anti_similar_triangle_basic_properties on B, D, A, F, D, I we get angle(B, D, A) == 0 - angle(F, D, I) mod 360, angle(D, A, B) == 0 - angle(D, I, F) mod 360, angle(A, B, D) == 0 - angle(I, F, D) mod 360, log(distance(B, D)) + log(distance(D, I)) == log(distance(D, F)) + log(distance(A, D)), log(distance(A, D)) + log(distance(F, I)) == log(distance(D, I)) + log(distance(A, B)), log(distance(A, B)) + log(distance(D, F)) == log(distance(F, I)) + log(distance(B, D))
By power_of_a_point_in_circle on line_circle_tangent_point(Line(D, E), Circle(B, E, G)), Circle(B, E, G) we get 0 == power_of_a_point(line_circle_tangent_point(Line(D, E), Circle(B, E, G)), Circle(B, E, G))
By anti_similar_triangle_basic_properties on C, A, I, C, D, F we get angle(C, A, I) == 0 - angle(C, D, F) mod 360, angle(A, I, C) == 0 - angle(D, F, C) mod 360, angle(I, C, A) == 0 - angle(F, C, D) mod 360, log(distance(A, C)) + log(distance(D, F)) == log(distance(C, D)) + log(distance(A, I)), log(distance(A, I)) + log(distance(C, F)) == log(distance(D, F)) + log(distance(C, I)), log(distance(C, F)) + log(distance(A, C)) == log(distance(C, I)) + log(distance(C, D))
By internal_angle_bisector_definition_v0_r on F, D, I, J we get Line(D, J) == internal_angle_bisector(F, J, I)
By similar_triangle_basic_properties on J, C, D, G, E, D we get angle(G, E, D) == angle(J, C, D) mod 360, angle(C, D, J) == angle(E, D, G) mod 360, angle(D, G, E) == angle(D, J, C) mod 360, log(distance(C, J)) + log(distance(D, E)) == log(distance(E, G)) + log(distance(C, D)), log(distance(C, D)) + log(distance(D, G)) == log(distance(D, E)) + log(distance(D, J)), log(distance(D, G)) + log(distance(C, J)) == log(distance(D, J)) + log(distance(E, G))
By anti_similar_triangle_basic_properties on I, E, C, I, F, C we get angle(I, E, C) == 0 - angle(I, F, C) mod 360, angle(E, C, I) == 0 - angle(F, C, I) mod 360, angle(C, I, E) == 0 - angle(C, I, F) mod 360, log(distance(E, I)) + log(distance(C, F)) == log(distance(F, I)) + log(distance(C, E)), log(distance(C, E)) + log(distance(C, I)) == log(distance(C, F)) + log(distance(C, I)), log(distance(C, I)) + log(distance(E, I)) == log(distance(C, I)) + log(distance(F, I))
By internal_angle_bisector_definition_v0_r on G, D, F, J we get Line(D, J) == internal_angle_bisector(F, J, G)
By concyclic_definition_1 on D, F, E, J we get Circle(D, E, F) == Circle(E, F, J)
By log_of_2_times_distance on F, E, E, midpoint(E, F) we get log(distance(E, F)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(E, midpoint(E, F)))
By power_of_a_point_on_circle on F, Circle(B, F, G) we get 0 == power_of_a_point(F, Circle(B, F, G))
By isosceles_triangle_midpoint on D, E, F we get midpoint(E, F) in median(D, E, F)
By anti_similar_triangle_basic_properties on J, C, D, E, B, D we get angle(J, C, D) == 0 - angle(E, B, D) mod 360, angle(C, D, J) == 0 - angle(B, D, E) mod 360, angle(D, J, C) == 0 - angle(D, E, B) mod 360, log(distance(B, E)) + log(distance(C, D)) == log(distance(C, J)) + log(distance(B, D)), log(distance(B, D)) + log(distance(D, J)) == log(distance(C, D)) + log(distance(D, E)), log(distance(D, E)) + log(distance(C, J)) == log(distance(D, J)) + log(distance(B, E))
By isosceles_triangle_midpoint on I, E, F we get midpoint(E, F) in median(I, E, F)
By altitude_definition on D, F, E, j we get j == altitude(D, E, F)
By similar_triangle_basic_properties on B, E, D, A, I, D we get angle(A, I, D) == angle(B, E, D) mod 360, angle(E, D, B) == angle(I, D, A) mod 360, angle(D, A, I) == angle(D, B, E) mod 360, log(distance(A, I)) + log(distance(D, E)) == log(distance(B, E)) + log(distance(D, I)), log(distance(D, E)) + log(distance(A, D)) == log(distance(D, I)) + log(distance(B, D)), log(distance(A, D)) + log(distance(B, E)) == log(distance(B, D)) + log(distance(A, I))
By collinear_definition on E, F, midpoint(E, F) we get F in Line(E, midpoint(E, F)), midpoint(E, F) in Line(E, F), Line(E, F) == Line(E, midpoint(E, F)), 0 == 2 * angle(F, E, midpoint(E, F)) mod 360
By internal_angle_bisector_definition_v0_r on F, D, G, I we get Line(D, I) == internal_angle_bisector(F, I, G)
By power_of_a_point_on_circle on I, Circle(A, C, I) we get 0 == power_of_a_point(I, Circle(A, C, I))
By perpendicular_bisector_properties on F, E we get perpendicular(Line(E, F), perpendicular_bisector(E, F)), midpoint(E, F) == line_intersection(Line(E, F), perpendicular_bisector(E, F))
By power_of_a_point_in_circle on B, Circle(B, F, G) we get 0 == power_of_a_point(B, Circle(B, F, G))
By collinear_definition on F, E, midpoint(E, F) we get E in Line(F, midpoint(E, F)), midpoint(E, F) in Line(E, F), Line(E, F) == Line(F, midpoint(E, F)), 0 == 2 * angle(E, F, midpoint(E, F)) mod 360
By collinear_definition on E, midpoint(E, F), F we get midpoint(E, F) in Line(E, F), F in Line(E, midpoint(E, F)), Line(E, F) == Line(E, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), E, F) mod 360
By power_of_a_point_in_circle on J, Circle(A, C, I) we get 0 == power_of_a_point(J, Circle(A, C, I))
By draw_point_of_tangency on Line(D, F), Circle(B, F, G) we get exists(line_circle_tangent_point(Line(D, F), Circle(B, F, G)))
By perpendicular_lines_draw_intersection on j, Line(E, F) we get exists(line_intersection(j, Line(E, F)))
By angle_to_center on D, line_circle_tangent_point(f, Circle(D, E, G)), G, Circle(D, E, G) we get angle(D, center(Circle(D, E, G)), G) == 2 * angle(D, line_circle_tangent_point(f, Circle(D, E, G)), G) mod 360
By angle_to_center on B, line_circle_tangent_point(Line(D, E), Circle(B, E, G)), G, Circle(B, E, G) we get angle(B, center(Circle(B, E, G)), G) == 2 * angle(B, line_circle_tangent_point(Line(D, E), Circle(B, E, G)), G) mod 360
By angle_to_center on G, line_circle_tangent_point(f, Circle(D, E, G)), D, Circle(D, E, G) we get angle(G, center(Circle(D, E, G)), D) == 2 * angle(G, line_circle_tangent_point(f, Circle(D, E, G)), D) mod 360
By angle_to_center on G, line_circle_tangent_point(Line(D, E), Circle(B, E, G)), B, Circle(B, E, G) we get angle(G, center(Circle(B, E, G)), B) == 2 * angle(G, line_circle_tangent_point(Line(D, E), Circle(B, E, G)), B) mod 360
By anti_similar_triangle_basic_properties on F, B, D, G, F, D we get angle(F, B, D) == 0 - angle(G, F, D) mod 360, angle(B, D, F) == 0 - angle(F, D, G) mod 360, angle(D, F, B) == 0 - angle(D, G, F) mod 360, log(distance(B, F)) + log(distance(D, F)) == log(distance(F, G)) + log(distance(B, D)), log(distance(B, D)) + log(distance(D, G)) == log(distance(D, F)) + log(distance(D, F)), log(distance(D, F)) + log(distance(F, G)) == log(distance(D, G)) + log(distance(B, F))
By anti_similar_triangle_basic_properties on C, D, J, A, D, I we get angle(C, D, J) == 0 - angle(A, D, I) mod 360, angle(D, J, C) == 0 - angle(D, I, A) mod 360, angle(J, C, D) == 0 - angle(I, A, D) mod 360, log(distance(A, D)) + log(distance(D, J)) == log(distance(C, D)) + log(distance(D, I)), log(distance(D, I)) + log(distance(C, J)) == log(distance(D, J)) + log(distance(A, I)), log(distance(A, I)) + log(distance(C, D)) == log(distance(C, J)) + log(distance(A, D))
By anti_similar_triangle_basic_properties on D, B, F, D, F, G we get angle(D, B, F) == 0 - angle(D, F, G) mod 360, angle(B, F, D) == 0 - angle(F, G, D) mod 360, angle(F, D, B) == 0 - angle(G, D, F) mod 360, log(distance(B, D)) + log(distance(F, G)) == log(distance(D, F)) + log(distance(B, F)), log(distance(B, F)) + log(distance(D, G)) == log(distance(F, G)) + log(distance(D, F)), log(distance(D, F)) + log(distance(D, F)) == log(distance(D, G)) + log(distance(B, D))
By altitude_definition on E, D, I, Line(E, F) we get Line(E, F) == altitude(E, D, I)
By power_of_a_point_definition on H, C, A, Circle(A, C, I) we get log(distance(C, H)) + log(distance(A, H)) == log(power_of_a_point(H, Circle(A, C, I)))
By anti_similar_triangle_basic_properties on I, D, A, J, D, C we get angle(I, D, A) == 0 - angle(J, D, C) mod 360, angle(D, A, I) == 0 - angle(D, C, J) mod 360, angle(A, I, D) == 0 - angle(C, J, D) mod 360, log(distance(D, I)) + log(distance(C, D)) == log(distance(D, J)) + log(distance(A, D)), log(distance(A, D)) + log(distance(C, J)) == log(distance(C, D)) + log(distance(A, I)), log(distance(A, I)) + log(distance(D, J)) == log(distance(C, J)) + log(distance(D, I))
By similar_triangle_basic_properties on C, J, I, F, D, I we get angle(C, J, I) == angle(F, D, I) mod 360, angle(D, I, F) == angle(J, I, C) mod 360, angle(I, C, J) == angle(I, F, D) mod 360, log(distance(C, J)) + log(distance(D, I)) == log(distance(D, F)) + log(distance(I, J)), log(distance(D, I)) + log(distance(C, I)) == log(distance(I, J)) + log(distance(F, I)), log(distance(C, I)) + log(distance(D, F)) == log(distance(F, I)) + log(distance(C, J))
By radical_axis_definition_v0 on line_circle_tangent_point(Line(D, E), Circle(B, E, G)), Circle(D, E, G), Circle(C, D, E) we get power_of_a_point(line_circle_tangent_point(Line(D, E), Circle(B, E, G)), Circle(C, D, E)) == power_of_a_point(line_circle_tangent_point(Line(D, E), Circle(B, E, G)), Circle(D, E, G))
By concyclic_definition_1 on D, F, J, E we get Circle(D, F, J) == Circle(E, F, J)
By altitude_definition on F, C, I, Line(E, F) we get Line(E, F) == altitude(F, C, I)
By altitude_definition on F, C, D, Line(E, F) we get Line(E, F) == altitude(F, C, D)
By altitude_definition on F, D, I, Line(E, F) we get Line(E, F) == altitude(F, D, I)
By similar_triangle_basic_properties on C, I, J, F, I, D we get angle(C, I, J) == angle(F, I, D) mod 360, angle(I, D, F) == angle(I, J, C) mod 360, angle(D, F, I) == angle(J, C, I) mod 360, log(distance(C, I)) + log(distance(D, I)) == log(distance(F, I)) + log(distance(I, J)), log(distance(D, I)) + log(distance(C, J)) == log(distance(I, J)) + log(distance(D, F)), log(distance(C, J)) + log(distance(F, I)) == log(distance(D, F)) + log(distance(C, I))
By power_of_a_point_definition on D, A, J, Circle(A, C, I) we get log(distance(A, D)) + log(distance(D, J)) == log(power_of_a_point(D, Circle(A, C, I)))
By power_of_a_point_definition on F, A, C, Circle(A, C, I) we get log(distance(A, F)) + log(distance(C, F)) == log(power_of_a_point(F, Circle(A, C, I)))
By altitude_definition on I, F, E, j we get j == altitude(I, E, F)
By power_of_a_point_definition on D, C, I, Circle(A, C, I) we get log(distance(C, D)) + log(distance(D, I)) == log(power_of_a_point(D, Circle(A, C, I)))
By altitude_definition on E, C, I, Line(E, F) we get Line(E, F) == altitude(E, C, I)
By collinear_definition on midpoint(E, F), E, F we get E in Line(F, midpoint(E, F)), F in Line(E, midpoint(E, F)), Line(E, midpoint(E, F)) == Line(F, midpoint(E, F)), 0 == 2 * angle(E, midpoint(E, F), F) mod 360
By power_of_a_point_definition on G, J, E, Circle(C, D, E) we get log(distance(G, J)) + log(distance(E, G)) == log(power_of_a_point(G, Circle(C, D, E)))
By power_of_a_point_definition on D, G, B, Circle(B, F, G) we get log(distance(D, G)) + log(distance(B, D)) == log(power_of_a_point(D, Circle(B, F, G)))
By power_of_a_point_tangent on D, F, Circle(B, F, G) we get 2 * log(distance(D, F)) == log(power_of_a_point(D, Circle(B, F, G)))
By collinear_definition on midpoint(E, F), F, E we get F in Line(E, midpoint(E, F)), E in Line(F, midpoint(E, F)), Line(E, midpoint(E, F)) == Line(F, midpoint(E, F)), 0 == 2 * angle(F, midpoint(E, F), E) mod 360
By altitude_definition on E, C, D, Line(E, F) we get Line(E, F) == altitude(E, C, D)
By power_of_a_point_definition on G, I, J, Circle(A, C, I) we get log(distance(G, I)) + log(distance(G, J)) == log(power_of_a_point(G, Circle(A, C, I)))
By isosceles_triangle_altitude_v3 on I, F, E we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, I, F), perpendicular_line(I, Line(E, F)))
By power_of_a_point_definition on E, J, I, Circle(A, C, I) we get log(distance(E, J)) + log(distance(E, I)) == log(power_of_a_point(E, Circle(A, C, I)))
By isosceles_triangle_altitude_v3 on I, E, F we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, I, F), perpendicular_line(I, Line(E, F)))
By power_of_a_point_definition on midpoint(E, F), F, E, Circle(C, D, E) we get log(power_of_a_point(midpoint(E, F), Circle(C, D, E))) == log(distance(F, midpoint(E, F))) + log(distance(E, midpoint(E, F)))
By between_implies_angles on F, midpoint(E, F), E we get 180 == angle(F, midpoint(E, F), E) mod 360, 0 == angle(midpoint(E, F), E, F) mod 360, 0 == angle(E, F, midpoint(E, F)) mod 360
By between_implies_angles on E, midpoint(E, F), F we get 180 == angle(E, midpoint(E, F), F) mod 360, 0 == angle(midpoint(E, F), F, E) mod 360, 0 == angle(F, E, midpoint(E, F)) mod 360
By concurrent_sufficient_conditions on Line(F, J), Line(B, F), g we get concurrent(g, Line(B, F), Line(F, J))
By concyclic_sufficient_conditions_v1 on G, center(Circle(B, E, G)), E, center(Circle(D, E, G)) we get concyclic(E, G, center(Circle(B, E, G)), center(Circle(D, E, G)))
By concurrent_sufficient_conditions on Line(F, J), Line(F, I), Line(D, F) we get concurrent(Line(D, F), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on g, Line(F, I), Line(F, J) we get concurrent(g, Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(B, F), Line(D, F), Line(F, I) we get concurrent(Line(B, F), Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(E, F), Line(F, I), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(A, I), j, Line(F, I) we get concurrent(j, Line(A, I), Line(F, I))
By concurrent_sufficient_conditions on h, Line(C, J), k we get concurrent(h, k, Line(C, J))
By concurrent_sufficient_conditions on Line(B, F), g, Line(F, I) we get concurrent(g, Line(B, F), Line(F, I))
By concurrent_sufficient_conditions on g, Line(A, I), h we get concurrent(g, h, Line(A, I))
By concurrent_sufficient_conditions on Line(F, I), Line(E, F), Line(F, G) we get concurrent(Line(E, F), Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on Line(F, J), Line(E, F), Line(F, G) we get concurrent(Line(E, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(F, J), g, Line(B, F) we get concurrent(g, Line(B, F), Line(F, J))
By concurrent_sufficient_conditions on Line(B, F), g, Line(D, F) we get concurrent(g, Line(B, F), Line(D, F))
By concurrent_sufficient_conditions on Line(B, F), g, Line(F, G) we get concurrent(g, Line(B, F), Line(F, G))
By concurrent_sufficient_conditions on Line(F, G), i, k we get concurrent(i, k, Line(F, G))
By concurrent_sufficient_conditions on h, k, Line(C, J) we get concurrent(h, k, Line(C, J))
By concurrent_sufficient_conditions on Line(D, F), Line(F, J), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on k, Line(A, I), Line(F, I) we get concurrent(k, Line(A, I), Line(F, I))
By concurrent_sufficient_conditions on Line(A, B), Line(A, I), h we get concurrent(h, Line(A, B), Line(A, I))
By concurrent_sufficient_conditions on k, Line(A, I), j we get concurrent(j, k, Line(A, I))
By concurrent_sufficient_conditions on Line(F, J), Line(F, G), Line(F, I) we get concurrent(Line(F, G), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(F, J), g, Line(E, F) we get concurrent(g, Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on Line(F, J), k, h we get concurrent(h, k, Line(F, J))
By concurrent_sufficient_conditions on Line(F, G), Line(F, I), Line(E, F) we get concurrent(Line(E, F), Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on g, Line(B, F), Line(D, F) we get concurrent(g, Line(B, F), Line(D, F))
By concurrent_sufficient_conditions on f, Line(C, J), j we get concurrent(f, j, Line(C, J))
By concurrent_sufficient_conditions on Line(B, F), Line(F, J), Line(E, F) we get concurrent(Line(B, F), Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on Line(F, I), Line(F, J), Line(D, F) we get concurrent(Line(D, F), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(A, I), j, k we get concurrent(j, k, Line(A, I))
By concurrent_sufficient_conditions on Line(A, B), f, Line(B, F) we get concurrent(f, Line(A, B), Line(B, F))
By concurrent_sufficient_conditions on j, k, Line(F, I) we get concurrent(j, k, Line(F, I))
By concurrent_sufficient_conditions on Line(E, F), Line(F, G), Line(B, F) we get concurrent(Line(B, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(B, F), f, Line(A, B) we get concurrent(f, Line(A, B), Line(B, F))
By concurrent_sufficient_conditions on Line(A, I), Line(A, B), g we get concurrent(g, Line(A, B), Line(A, I))
By concurrent_sufficient_conditions on h, Line(F, J), Line(C, J) we get concurrent(h, Line(C, J), Line(F, J))
By concurrent_sufficient_conditions on k, Line(F, J), Line(C, J) we get concurrent(k, Line(C, J), Line(F, J))
By concurrent_sufficient_conditions on j, Line(A, I), Line(F, I) we get concurrent(j, Line(A, I), Line(F, I))
By concurrent_sufficient_conditions on Line(F, I), Line(B, F), Line(D, F) we get concurrent(Line(B, F), Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(F, I), Line(F, J), g we get concurrent(g, Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(E, F), Line(F, G), Line(F, J) we get concurrent(Line(E, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(D, F), Line(F, G), g we get concurrent(g, Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on g, j, Line(C, J) we get concurrent(g, j, Line(C, J))
By concurrent_sufficient_conditions on g, Line(D, F), Line(F, I) we get concurrent(g, Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(F, I), Line(F, J), Line(B, F) we get concurrent(Line(B, F), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(C, J), j, g we get concurrent(g, j, Line(C, J))
By concurrent_sufficient_conditions on Line(F, J), Line(D, F), g we get concurrent(g, Line(D, F), Line(F, J))
By concurrent_sufficient_conditions on i, f, Line(B, F) we get concurrent(f, i, Line(B, F))
By concurrent_sufficient_conditions on g, Line(B, F), Line(F, G) we get concurrent(g, Line(B, F), Line(F, G))
By concurrent_sufficient_conditions on Line(F, I), Line(F, G), Line(E, F) we get concurrent(Line(E, F), Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on Line(B, F), Line(F, G), Line(F, J) we get concurrent(Line(B, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(A, I), k, j we get concurrent(j, k, Line(A, I))
By concurrent_sufficient_conditions on Line(D, F), Line(F, J), g we get concurrent(g, Line(D, F), Line(F, J))
By concurrent_sufficient_conditions on Line(D, F), Line(B, F), Line(F, J) we get concurrent(Line(B, F), Line(D, F), Line(F, J))
By concurrent_sufficient_conditions on k, h, Line(C, J) we get concurrent(h, k, Line(C, J))
By concurrent_sufficient_conditions on Line(D, F), Line(F, G), Line(F, I) we get concurrent(Line(D, F), Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on Line(D, F), Line(F, J), Line(F, I) we get concurrent(Line(D, F), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(D, F), g, Line(F, J) we get concurrent(g, Line(D, F), Line(F, J))
By concurrent_sufficient_conditions on g, Line(B, F), Line(F, I) we get concurrent(g, Line(B, F), Line(F, I))
By concurrent_sufficient_conditions on Line(E, F), Line(B, F), Line(F, J) we get concurrent(Line(B, F), Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on f, Line(C, J), g we get concurrent(f, g, Line(C, J))
By concurrent_sufficient_conditions on Line(F, G), Line(F, I), Line(D, F) we get concurrent(Line(D, F), Line(F, G), Line(F, I))
By line_definition on line_circle_tangent_point(Line(D, F), Circle(B, F, G)), D, Line(D, F) we get Line(D, F) == Line(D, line_circle_tangent_point(Line(D, F), Circle(B, F, G)))
By concyclic_sufficient_conditions_v1 on F, center(Circle(C, D, E)), J, I we get concyclic(F, I, J, center(Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, G), Line(E, F), Line(B, F) we get concurrent(Line(B, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(B, F), Line(E, F), Line(D, F) we get concurrent(Line(B, F), Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(F, J), k, Line(C, J) we get concurrent(k, Line(C, J), Line(F, J))
By concurrent_sufficient_conditions on h, Line(A, I), Line(A, B) we get concurrent(h, Line(A, B), Line(A, I))
By concurrent_sufficient_conditions on Line(B, F), Line(D, F), Line(F, G) we get concurrent(Line(B, F), Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on Line(F, G), Line(F, J), Line(D, F) we get concurrent(Line(D, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(F, G), Line(D, F), Line(F, I) we get concurrent(Line(D, F), Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on Line(D, F), g, Line(F, G) we get concurrent(g, Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on g, Line(E, F), Line(F, I) we get concurrent(g, Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(D, F), Line(F, G), Line(F, J) we get concurrent(Line(D, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(F, J), Line(E, F), g we get concurrent(g, Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on Line(B, F), Line(F, I), Line(D, F) we get concurrent(Line(B, F), Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(A, I), g, Line(A, B) we get concurrent(g, Line(A, B), Line(A, I))
By concurrent_sufficient_conditions on Line(B, F), Line(F, G), Line(D, F) we get concurrent(Line(B, F), Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on Line(B, F), Line(F, I), Line(F, G) we get concurrent(Line(B, F), Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on Line(F, G), Line(F, J), Line(B, F) we get concurrent(Line(B, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(F, I), j, k we get concurrent(j, k, Line(F, I))
By concurrent_sufficient_conditions on Line(F, I), g, Line(D, F) we get concurrent(g, Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(E, F), Line(F, J), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on f, g, Line(C, J) we get concurrent(f, g, Line(C, J))
By concurrent_sufficient_conditions on k, Line(C, J), Line(F, J) we get concurrent(k, Line(C, J), Line(F, J))
By concurrent_sufficient_conditions on g, Line(E, F), Line(B, F) we get concurrent(g, Line(B, F), Line(E, F))
By concurrent_sufficient_conditions on Line(F, G), Line(F, J), Line(E, F) we get concurrent(Line(E, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on f, i, Line(B, F) we get concurrent(f, i, Line(B, F))
By concurrent_sufficient_conditions on h, g, Line(A, I) we get concurrent(g, h, Line(A, I))
By concurrent_sufficient_conditions on k, j, Line(A, I) we get concurrent(j, k, Line(A, I))
By concurrent_sufficient_conditions on Line(F, J), Line(F, I), g we get concurrent(g, Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(F, I), g, Line(F, J) we get concurrent(g, Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(F, J), Line(B, F), Line(F, I) we get concurrent(Line(B, F), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(F, G), Line(B, F), Line(E, F) we get concurrent(Line(B, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(F, I), Line(F, G), Line(D, F) we get concurrent(Line(D, F), Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), Line(B, F) we get concurrent(Line(B, F), Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(E, F), Line(F, I), Line(B, F) we get concurrent(Line(B, F), Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on k, j, Line(F, I) we get concurrent(j, k, Line(F, I))
By concurrent_sufficient_conditions on Line(F, J), Line(D, F), Line(F, G) we get concurrent(Line(D, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(F, I), Line(B, F), Line(F, G) we get concurrent(Line(B, F), Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on g, Line(F, I), Line(D, F) we get concurrent(g, Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(F, I), Line(E, F), Line(B, F) we get concurrent(Line(B, F), Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(E, F), Line(F, I), g we get concurrent(g, Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on j, k, Line(A, I) we get concurrent(j, k, Line(A, I))
By concurrent_sufficient_conditions on Line(F, G), Line(F, J), Line(F, I) we get concurrent(Line(F, G), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on k, i, Line(F, G) we get concurrent(i, k, Line(F, G))
By concurrent_sufficient_conditions on Line(E, F), Line(B, F), Line(F, G) we get concurrent(Line(B, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(F, I), j, Line(A, I) we get concurrent(j, Line(A, I), Line(F, I))
By concurrent_sufficient_conditions on Line(F, G), Line(F, I), Line(F, J) we get concurrent(Line(F, G), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(F, J), g, Line(F, G) we get concurrent(g, Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(F, J), Line(C, J), k we get concurrent(k, Line(C, J), Line(F, J))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), Line(F, G) we get concurrent(Line(D, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(F, J), Line(F, I), Line(B, F) we get concurrent(Line(B, F), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on g, Line(F, G), Line(F, J) we get concurrent(g, Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(F, J), Line(B, F), Line(E, F) we get concurrent(Line(B, F), Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on Line(B, F), Line(F, J), Line(F, G) we get concurrent(Line(B, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(F, I), Line(D, F), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(B, F), Line(F, I), Line(E, F) we get concurrent(Line(B, F), Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(E, F), Line(F, J), Line(F, G) we get concurrent(Line(E, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on f, Line(B, F), Line(A, B) we get concurrent(f, Line(A, B), Line(B, F))
By concurrent_sufficient_conditions on Line(C, J), Line(F, J), k we get concurrent(k, Line(C, J), Line(F, J))
By concurrent_sufficient_conditions on Line(A, B), Line(B, F), f we get concurrent(f, Line(A, B), Line(B, F))
By concurrent_sufficient_conditions on Line(E, F), Line(F, I), Line(F, J) we get concurrent(Line(E, F), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on j, Line(F, I), Line(A, I) we get concurrent(j, Line(A, I), Line(F, I))
By concurrent_sufficient_conditions on Line(B, F), g, Line(E, F) we get concurrent(g, Line(B, F), Line(E, F))
By concurrent_sufficient_conditions on Line(D, F), Line(F, I), Line(B, F) we get concurrent(Line(B, F), Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(D, F), Line(F, J), Line(F, G) we get concurrent(Line(D, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on i, Line(A, B), Line(B, F) we get concurrent(i, Line(A, B), Line(B, F))
By concurrent_sufficient_conditions on Line(D, F), Line(F, I), Line(F, G) we get concurrent(Line(D, F), Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on Line(B, F), Line(F, G), g we get concurrent(g, Line(B, F), Line(F, G))
By concurrent_sufficient_conditions on Line(B, F), Line(F, G), Line(E, F) we get concurrent(Line(B, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on j, Line(C, J), f we get concurrent(f, j, Line(C, J))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), Line(F, J) we get concurrent(Line(D, F), Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on Line(F, J), Line(E, F), Line(F, I) we get concurrent(Line(E, F), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(F, J), Line(B, F), Line(D, F) we get concurrent(Line(B, F), Line(D, F), Line(F, J))
By concurrent_sufficient_conditions on Line(E, F), Line(F, J), Line(F, I) we get concurrent(Line(E, F), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(F, I), k, Line(A, I) we get concurrent(k, Line(A, I), Line(F, I))
By concurrent_sufficient_conditions on Line(F, I), g, Line(E, F) we get concurrent(g, Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(F, J), Line(E, F), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on Line(A, I), Line(F, I), j we get concurrent(j, Line(A, I), Line(F, I))
By concurrent_sufficient_conditions on Line(F, G), k, i we get concurrent(i, k, Line(F, G))
By concurrent_sufficient_conditions on Line(B, F), Line(D, F), Line(F, J) we get concurrent(Line(B, F), Line(D, F), Line(F, J))
By perpendicular_line_definition on E, Line(E, center(Circle(D, E, G))), f we get perpendicular_line(E, f) == Line(E, center(Circle(D, E, G)))
By concurrent_sufficient_conditions on Line(C, J), f, j we get concurrent(f, j, Line(C, J))
By concurrent_sufficient_conditions on g, Line(D, F), Line(B, F) we get concurrent(g, Line(B, F), Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), Line(F, I) we get concurrent(Line(D, F), Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on f, Line(A, B), Line(B, F) we get concurrent(f, Line(A, B), Line(B, F))
By concurrent_sufficient_conditions on Line(E, F), Line(F, G), Line(F, I) we get concurrent(Line(E, F), Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on Line(D, F), Line(F, I), g we get concurrent(g, Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(D, F), g, Line(F, I) we get concurrent(g, Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(F, J), Line(D, F), Line(F, I) we get concurrent(Line(D, F), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on j, Line(A, I), k we get concurrent(j, k, Line(A, I))
By concurrent_sufficient_conditions on Line(D, F), g, Line(B, F) we get concurrent(g, Line(B, F), Line(D, F))
By concurrent_sufficient_conditions on Line(F, I), Line(B, F), Line(F, J) we get concurrent(Line(B, F), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on i, Line(B, F), Line(A, B) we get concurrent(i, Line(A, B), Line(B, F))
By concurrent_sufficient_conditions on g, Line(F, J), Line(D, F) we get concurrent(g, Line(D, F), Line(F, J))
By concurrent_sufficient_conditions on g, Line(E, F), Line(F, J) we get concurrent(g, Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on i, Line(B, F), f we get concurrent(f, i, Line(B, F))
By concurrent_sufficient_conditions on Line(B, F), Line(F, J), g we get concurrent(g, Line(B, F), Line(F, J))
By concurrent_sufficient_conditions on g, Line(B, F), Line(E, F) we get concurrent(g, Line(B, F), Line(E, F))
By concurrent_sufficient_conditions on Line(C, J), j, f we get concurrent(f, j, Line(C, J))
By concurrent_sufficient_conditions on Line(F, J), Line(E, F), Line(B, F) we get concurrent(Line(B, F), Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on g, Line(A, B), Line(A, I) we get concurrent(g, Line(A, B), Line(A, I))
By concurrent_sufficient_conditions on Line(B, F), Line(F, J), Line(F, I) we get concurrent(Line(B, F), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on g, Line(F, J), Line(F, I) we get concurrent(g, Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(F, J), h, k we get concurrent(h, k, Line(F, J))
By concurrent_sufficient_conditions on Line(B, F), Line(D, F), Line(E, F) we get concurrent(Line(B, F), Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(B, F), Line(F, J), Line(D, F) we get concurrent(Line(B, F), Line(D, F), Line(F, J))
By concurrent_sufficient_conditions on Line(E, F), Line(B, F), g we get concurrent(g, Line(B, F), Line(E, F))
By concurrent_sufficient_conditions on Line(A, B), i, Line(B, F) we get concurrent(i, Line(A, B), Line(B, F))
By concurrent_sufficient_conditions on Line(F, J), Line(B, F), Line(F, G) we get concurrent(Line(B, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on g, Line(F, I), Line(E, F) we get concurrent(g, Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(F, I), Line(B, F), Line(E, F) we get concurrent(Line(B, F), Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(F, G), Line(F, I), g we get concurrent(g, Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on g, Line(C, J), j we get concurrent(g, j, Line(C, J))
By concurrent_sufficient_conditions on Line(B, F), Line(E, F), g we get concurrent(g, Line(B, F), Line(E, F))
By concurrent_sufficient_conditions on Line(B, F), i, Line(A, B) we get concurrent(i, Line(A, B), Line(B, F))
By concurrent_sufficient_conditions on i, Line(F, G), k we get concurrent(i, k, Line(F, G))
By concurrent_sufficient_conditions on Line(F, J), Line(F, G), Line(B, F) we get concurrent(Line(B, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(B, F), Line(D, F), g we get concurrent(g, Line(B, F), Line(D, F))
By concurrent_sufficient_conditions on Line(E, F), Line(F, G), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(D, F), Line(B, F), g we get concurrent(g, Line(B, F), Line(D, F))
By concurrent_sufficient_conditions on Line(A, B), h, Line(A, I) we get concurrent(h, Line(A, B), Line(A, I))
By tangent_definition_from_perpendicularity_v0 on line_circle_tangent_point(Line(D, F), Circle(B, F, G)), Line(D, F), Circle(B, F, G) we get perpendicular(Line(D, F), Line(center(Circle(B, F, G)), line_circle_tangent_point(Line(D, F), Circle(B, F, G))))
By concurrent_sufficient_conditions on Line(F, J), g, Line(D, F) we get concurrent(g, Line(D, F), Line(F, J))
By concurrent_sufficient_conditions on Line(B, F), i, f we get concurrent(f, i, Line(B, F))
By concurrent_sufficient_conditions on k, Line(F, G), i we get concurrent(i, k, Line(F, G))
By concurrent_sufficient_conditions on Line(D, F), Line(F, G), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(F, I), Line(B, F), g we get concurrent(g, Line(B, F), Line(F, I))
By concurrent_sufficient_conditions on j, g, Line(C, J) we get concurrent(g, j, Line(C, J))
By concurrent_sufficient_conditions on Line(B, F), Line(E, F), Line(F, I) we get concurrent(Line(B, F), Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(F, G), Line(E, F), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(C, J), g, j we get concurrent(g, j, Line(C, J))
By concurrent_sufficient_conditions on k, h, Line(F, J) we get concurrent(h, k, Line(F, J))
By concurrent_sufficient_conditions on g, Line(F, G), Line(F, I) we get concurrent(g, Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on Line(F, G), Line(B, F), Line(D, F) we get concurrent(Line(B, F), Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on Line(F, G), g, Line(E, F) we get concurrent(g, Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on h, Line(C, J), Line(F, J) we get concurrent(h, Line(C, J), Line(F, J))
By concurrent_sufficient_conditions on Line(E, F), g, Line(F, G) we get concurrent(g, Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(D, F), Line(B, F), Line(F, G) we get concurrent(Line(B, F), Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on Line(E, F), Line(F, J), g we get concurrent(g, Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on Line(C, J), h, k we get concurrent(h, k, Line(C, J))
By concurrent_sufficient_conditions on Line(F, G), Line(E, F), Line(F, J) we get concurrent(Line(E, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(F, G), g, Line(F, I) we get concurrent(g, Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on g, Line(D, F), Line(F, G) we get concurrent(g, Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on Line(B, F), Line(E, F), Line(F, J) we get concurrent(Line(B, F), Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on Line(B, F), Line(F, G), Line(F, I) we get concurrent(Line(B, F), Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on Line(F, I), Line(E, F), Line(F, J) we get concurrent(Line(E, F), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(F, G), Line(E, F), Line(F, I) we get concurrent(Line(E, F), Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on Line(B, F), g, Line(F, J) we get concurrent(g, Line(B, F), Line(F, J))
By concurrent_sufficient_conditions on g, Line(C, J), f we get concurrent(f, g, Line(C, J))
By concurrent_sufficient_conditions on Line(D, F), Line(B, F), Line(E, F) we get concurrent(Line(B, F), Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(F, I), g, Line(F, G) we get concurrent(g, Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on Line(E, F), Line(F, G), g we get concurrent(g, Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(F, G), Line(D, F), g we get concurrent(g, Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on j, Line(F, I), k we get concurrent(j, k, Line(F, I))
By concurrent_sufficient_conditions on Line(E, F), g, Line(F, J) we get concurrent(g, Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on Line(D, F), Line(B, F), Line(F, I) we get concurrent(Line(B, F), Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on h, Line(A, I), g we get concurrent(g, h, Line(A, I))
By concurrent_sufficient_conditions on Line(F, G), Line(B, F), Line(F, I) we get concurrent(Line(B, F), Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on g, Line(F, G), Line(E, F) we get concurrent(g, Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(E, F), g, Line(B, F) we get concurrent(g, Line(B, F), Line(E, F))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), Line(F, G) we get concurrent(Line(D, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on i, k, Line(F, G) we get concurrent(i, k, Line(F, G))
By concurrent_sufficient_conditions on g, Line(F, J), Line(B, F) we get concurrent(g, Line(B, F), Line(F, J))
By concurrent_sufficient_conditions on Line(F, I), Line(D, F), Line(F, G) we get concurrent(Line(D, F), Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on Line(F, I), Line(F, G), Line(B, F) we get concurrent(Line(B, F), Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on h, Line(F, J), k we get concurrent(h, k, Line(F, J))
By concurrent_sufficient_conditions on Line(C, J), Line(F, J), h we get concurrent(h, Line(C, J), Line(F, J))
By concurrent_sufficient_conditions on Line(C, J), k, h we get concurrent(h, k, Line(C, J))
By concurrent_sufficient_conditions on Line(B, F), Line(E, F), Line(F, G) we get concurrent(Line(B, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(F, I), Line(D, F), Line(B, F) we get concurrent(Line(B, F), Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(F, I), Line(D, F), Line(F, J) we get concurrent(Line(D, F), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on k, Line(C, J), h we get concurrent(h, k, Line(C, J))
By concurrent_sufficient_conditions on Line(B, F), Line(F, I), g we get concurrent(g, Line(B, F), Line(F, I))
By concurrent_sufficient_conditions on Line(F, G), Line(D, F), Line(F, J) we get concurrent(Line(D, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on g, h, Line(A, I) we get concurrent(g, h, Line(A, I))
By concurrent_sufficient_conditions on Line(F, I), Line(F, G), Line(F, J) we get concurrent(Line(F, G), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on f, Line(B, F), i we get concurrent(f, i, Line(B, F))
By concurrent_sufficient_conditions on j, Line(C, J), g we get concurrent(g, j, Line(C, J))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), Line(F, I) we get concurrent(Line(D, F), Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(C, J), f, g we get concurrent(f, g, Line(C, J))
By concurrent_sufficient_conditions on Line(E, F), Line(B, F), Line(D, F) we get concurrent(Line(B, F), Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on k, Line(F, I), Line(A, I) we get concurrent(k, Line(A, I), Line(F, I))
By concurrent_sufficient_conditions on g, Line(F, J), Line(F, G) we get concurrent(g, Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(F, J), Line(F, G), Line(E, F) we get concurrent(Line(E, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(A, I), k, Line(F, I) we get concurrent(k, Line(A, I), Line(F, I))
By concurrent_sufficient_conditions on g, Line(F, J), Line(E, F) we get concurrent(g, Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on Line(F, J), Line(C, J), h we get concurrent(h, Line(C, J), Line(F, J))
By concurrent_sufficient_conditions on Line(A, I), h, g we get concurrent(g, h, Line(A, I))
By concurrent_sufficient_conditions on Line(D, F), Line(F, I), Line(F, J) we get concurrent(Line(D, F), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(F, G), g, Line(B, F) we get concurrent(g, Line(B, F), Line(F, G))
By concurrent_sufficient_conditions on Line(E, F), Line(B, F), Line(F, I) we get concurrent(Line(B, F), Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(A, I), g, h we get concurrent(g, h, Line(A, I))
By perpendicular_line_definition on E, Line(E, center(Circle(B, E, G))), Line(D, E) we get perpendicular_line(E, Line(D, E)) == Line(E, center(Circle(B, E, G)))
By concurrent_sufficient_conditions on Line(F, J), g, Line(F, I) we get concurrent(g, Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on g, f, Line(C, J) we get concurrent(f, g, Line(C, J))
By concurrent_sufficient_conditions on Line(B, F), Line(A, B), i we get concurrent(i, Line(A, B), Line(B, F))
By concurrent_sufficient_conditions on Line(F, I), g, Line(B, F) we get concurrent(g, Line(B, F), Line(F, I))
By concurrent_sufficient_conditions on k, Line(F, I), j we get concurrent(j, k, Line(F, I))
By concurrent_sufficient_conditions on Line(F, J), h, Line(C, J) we get concurrent(h, Line(C, J), Line(F, J))
By concurrent_sufficient_conditions on Line(F, I), Line(E, F), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(E, F), Line(F, J), Line(B, F) we get concurrent(Line(B, F), Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on Line(B, F), Line(A, B), f we get concurrent(f, Line(A, B), Line(B, F))
By concurrent_sufficient_conditions on Line(F, G), g, Line(F, J) we get concurrent(g, Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(F, I), k, j we get concurrent(j, k, Line(F, I))
By concurrent_sufficient_conditions on Line(F, J), Line(F, G), Line(D, F) we get concurrent(Line(D, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(A, B), Line(B, F), i we get concurrent(i, Line(A, B), Line(B, F))
By concurrent_sufficient_conditions on h, k, Line(F, J) we get concurrent(h, k, Line(F, J))
By concurrent_sufficient_conditions on Line(F, I), Line(F, J), Line(F, G) we get concurrent(Line(F, G), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(A, I), h, Line(A, B) we get concurrent(h, Line(A, B), Line(A, I))
By concurrent_sufficient_conditions on Line(C, J), k, Line(F, J) we get concurrent(k, Line(C, J), Line(F, J))
By concurrent_sufficient_conditions on Line(F, J), Line(F, I), Line(F, G) we get concurrent(Line(F, G), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(F, J), Line(F, G), g we get concurrent(g, Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(A, I), Line(A, B), h we get concurrent(h, Line(A, B), Line(A, I))
By concurrent_sufficient_conditions on Line(F, I), Line(D, F), g we get concurrent(g, Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(F, G), g, Line(D, F) we get concurrent(g, Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on g, Line(E, F), Line(F, G) we get concurrent(g, Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on g, Line(F, G), Line(D, F) we get concurrent(g, Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on Line(D, F), Line(F, I), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), Line(F, J) we get concurrent(Line(D, F), Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on Line(F, I), Line(F, J), Line(E, F) we get concurrent(Line(E, F), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(F, G), Line(B, F), Line(F, J) we get concurrent(Line(B, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(F, J), Line(F, I), Line(E, F) we get concurrent(Line(E, F), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on f, j, Line(C, J) we get concurrent(f, j, Line(C, J))
By concurrent_sufficient_conditions on Line(F, G), Line(B, F), g we get concurrent(g, Line(B, F), Line(F, G))
By concurrent_sufficient_conditions on Line(F, I), Line(F, G), g we get concurrent(g, Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on Line(E, F), g, Line(F, I) we get concurrent(g, Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(B, F), Line(F, I), Line(F, J) we get concurrent(Line(B, F), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(F, J), Line(D, F), Line(B, F) we get concurrent(Line(B, F), Line(D, F), Line(F, J))
By concurrent_sufficient_conditions on Line(F, I), Line(A, I), j we get concurrent(j, Line(A, I), Line(F, I))
By concurrent_sufficient_conditions on Line(E, F), Line(F, I), Line(F, G) we get concurrent(Line(E, F), Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on Line(A, I), Line(F, I), k we get concurrent(k, Line(A, I), Line(F, I))
By concurrent_sufficient_conditions on j, f, Line(C, J) we get concurrent(f, j, Line(C, J))
By concurrent_sufficient_conditions on k, Line(F, J), h we get concurrent(h, k, Line(F, J))
By concurrent_sufficient_conditions on Line(D, F), Line(F, G), Line(B, F) we get concurrent(Line(B, F), Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on Line(B, F), f, i we get concurrent(f, i, Line(B, F))
By concurrent_sufficient_conditions on Line(F, J), Line(D, F), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), Line(B, F) we get concurrent(Line(B, F), Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on g, Line(A, I), Line(A, B) we get concurrent(g, Line(A, B), Line(A, I))
By concurrent_sufficient_conditions on Line(F, G), Line(D, F), Line(B, F) we get concurrent(Line(B, F), Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on g, Line(B, F), Line(F, J) we get concurrent(g, Line(B, F), Line(F, J))
By concurrent_sufficient_conditions on Line(F, G), Line(F, I), Line(B, F) we get concurrent(Line(B, F), Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on g, Line(F, I), Line(F, G) we get concurrent(g, Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on Line(F, G), Line(E, F), g we get concurrent(g, Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on g, Line(D, F), Line(F, J) we get concurrent(g, Line(D, F), Line(F, J))
By concurrent_sufficient_conditions on Line(D, F), Line(F, J), Line(B, F) we get concurrent(Line(B, F), Line(D, F), Line(F, J))
By concurrent_sufficient_conditions on g, Line(F, G), Line(B, F) we get concurrent(g, Line(B, F), Line(F, G))
By concurrent_sufficient_conditions on h, Line(A, B), Line(A, I) we get concurrent(h, Line(A, B), Line(A, I))
By concurrent_sufficient_conditions on Line(F, I), Line(A, I), k we get concurrent(k, Line(A, I), Line(F, I))
By concurrent_sufficient_conditions on Line(F, I), Line(E, F), g we get concurrent(g, Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on g, Line(F, I), Line(B, F) we get concurrent(g, Line(B, F), Line(F, I))
By concurrent_sufficient_conditions on Line(A, B), Line(A, I), g we get concurrent(g, Line(A, B), Line(A, I))
By concurrent_sufficient_conditions on Line(A, B), g, Line(A, I) we get concurrent(g, Line(A, B), Line(A, I))
By concurrent_sufficient_conditions on Line(F, G), Line(D, F), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(C, J), g, f we get concurrent(f, g, Line(C, J))
By concurrent_sufficient_conditions on Line(C, J), h, Line(F, J) we get concurrent(h, Line(C, J), Line(F, J))
By concurrent_sufficient_conditions on Line(F, G), Line(F, J), g we get concurrent(g, Line(F, G), Line(F, J))
By tangent_definition_from_perpendicularity_v0 on F, Line(D, F), Circle(B, F, G) we get perpendicular(Line(D, F), Line(F, center(Circle(B, F, G))))
By line_intersection_definition on G, k, Line(G, center(Circle(B, E, G))) we get G == line_intersection(k, Line(G, center(Circle(B, E, G))))
By line_intersection_definition on E, Line(E, center(Circle(C, D, E))), Line(E, F) we get E == line_intersection(Line(E, F), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on E, Line(E, center(Circle(C, D, E))), f we get E == line_intersection(f, Line(E, center(Circle(C, D, E))))
By line_intersection_definition on D, i, Line(D, center(Circle(D, E, G))) we get D == line_intersection(i, Line(D, center(Circle(D, E, G))))
By line_intersection_definition on C, Line(C, center(Circle(C, D, E))), Line(C, J) we get C == line_intersection(Line(C, J), Line(C, center(Circle(C, D, E))))
By line_intersection_definition on G, Line(G, center(Circle(D, E, G))), Line(G, center(Circle(B, E, G))) we get G == line_intersection(Line(G, center(Circle(B, E, G))), Line(G, center(Circle(D, E, G))))
By line_intersection_definition on center(Circle(D, E, G)), Line(E, center(Circle(D, E, G))), Line(G, center(Circle(D, E, G))) we get center(Circle(D, E, G)) == line_intersection(Line(E, center(Circle(D, E, G))), Line(G, center(Circle(D, E, G))))
By line_intersection_definition on G, Line(F, G), Line(G, center(Circle(D, E, G))) we get G == line_intersection(Line(F, G), Line(G, center(Circle(D, E, G))))
By line_intersection_definition on B, Line(B, center(Circle(B, E, G))), i we get B == line_intersection(i, Line(B, center(Circle(B, E, G))))
By line_intersection_definition on center(Circle(C, D, E)), Line(F, center(Circle(C, D, E))), Line(J, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(F, center(Circle(C, D, E))), Line(J, center(Circle(C, D, E))))
By line_intersection_definition on F, g, Line(F, center(Circle(C, D, E))) we get F == line_intersection(g, Line(F, center(Circle(C, D, E))))
By perpendicular_line_definition on C, Line(C, J), h we get Line(C, J) == perpendicular_line(C, h)
By perpendicular_line_definition on J, h, Line(C, J) we get h == perpendicular_line(J, Line(C, J))
By line_intersection_definition on center(Circle(C, D, E)), Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By perpendicular_line_definition on center(Circle(B, E, G)), Line(E, center(Circle(B, E, G))), Line(D, E) we get Line(E, center(Circle(B, E, G))) == perpendicular_line(center(Circle(B, E, G)), Line(D, E))
By line_intersection_definition on E, radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, F) we get E == line_intersection(Line(E, F), radical_axis(Circle(B, E, G), Circle(C, D, E)))
By line_intersection_definition on F, Line(B, F), Line(F, center(Circle(C, D, E))) we get F == line_intersection(Line(B, F), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on G, i, Line(G, center(Circle(D, E, G))) we get G == line_intersection(i, Line(G, center(Circle(D, E, G))))
By perpendicular_line_definition on A, Line(A, I), j we get Line(A, I) == perpendicular_line(A, j)
By line_intersection_definition on F, Line(F, I), Line(F, center(Circle(C, D, E))) we get F == line_intersection(Line(F, I), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on E, Line(E, center(Circle(B, E, G))), radical_axis(Circle(B, E, G), Circle(C, D, E)) we get E == line_intersection(radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, center(Circle(B, E, G))))
By line_intersection_definition on D, Line(D, F), Line(D, center(Circle(D, E, G))) we get D == line_intersection(Line(D, F), Line(D, center(Circle(D, E, G))))
By line_intersection_definition on G, Line(G, center(Circle(B, E, G))), Line(F, G) we get G == line_intersection(Line(F, G), Line(G, center(Circle(B, E, G))))
By line_intersection_definition on center(Circle(C, D, E)), Line(D, center(Circle(C, D, E))), Line(J, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(D, center(Circle(C, D, E))), Line(J, center(Circle(C, D, E))))
By perpendicular_line_definition on center(Circle(D, E, G)), Line(E, center(Circle(D, E, G))), f we get Line(E, center(Circle(D, E, G))) == perpendicular_line(center(Circle(D, E, G)), f)
By line_intersection_definition on F, Line(D, F), Line(F, center(Circle(C, D, E))) we get F == line_intersection(Line(D, F), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on E, Line(E, center(Circle(D, E, G))), Line(E, F) we get E == line_intersection(Line(E, F), Line(E, center(Circle(D, E, G))))
By circle_definition on G, B, line_circle_tangent_point(Line(D, F), Circle(B, F, G)), Circle(B, F, G) we get Circle(B, F, G) == Circle(B, G, line_circle_tangent_point(Line(D, F), Circle(B, F, G)))
By line_intersection_definition on E, f, Line(E, center(Circle(D, E, G))) we get E == line_intersection(f, Line(E, center(Circle(D, E, G))))
By line_intersection_definition on center(Circle(B, E, G)), Line(B, center(Circle(B, E, G))), Line(G, center(Circle(B, E, G))) we get center(Circle(B, E, G)) == line_intersection(Line(B, center(Circle(B, E, G))), Line(G, center(Circle(B, E, G))))
By line_intersection_definition on J, h, Line(J, center(Circle(C, D, E))) we get J == line_intersection(h, Line(J, center(Circle(C, D, E))))
By line_intersection_definition on E, Line(E, center(Circle(D, E, G))), radical_axis(Circle(B, E, G), Circle(C, D, E)) we get E == line_intersection(radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, center(Circle(D, E, G))))
By line_intersection_definition on D, Line(D, F), Line(D, center(Circle(C, D, E))) we get D == line_intersection(Line(D, F), Line(D, center(Circle(C, D, E))))
By line_intersection_definition on B, Line(B, F), Line(B, center(Circle(B, E, G))) we get B == line_intersection(Line(B, F), Line(B, center(Circle(B, E, G))))
By line_intersection_definition on G, Line(G, center(Circle(B, E, G))), i we get G == line_intersection(i, Line(G, center(Circle(B, E, G))))
By line_intersection_definition on D, Line(D, center(Circle(C, D, E))), Line(D, E) we get D == line_intersection(Line(D, E), Line(D, center(Circle(C, D, E))))
By line_intersection_definition on center(Circle(C, D, E)), Line(E, center(Circle(C, D, E))), Line(C, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(C, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on E, Line(E, center(Circle(D, E, G))), Line(E, center(Circle(B, E, G))) we get E == line_intersection(Line(E, center(Circle(B, E, G))), Line(E, center(Circle(D, E, G))))
By perpendicular_line_definition on midpoint(E, F), Line(E, F), j we get Line(E, F) == perpendicular_line(midpoint(E, F), j)
By line_intersection_definition on J, Line(J, center(Circle(C, D, E))), k we get J == line_intersection(k, Line(J, center(Circle(C, D, E))))
By line_intersection_definition on B, Line(A, B), Line(B, center(Circle(B, E, G))) we get B == line_intersection(Line(A, B), Line(B, center(Circle(B, E, G))))
By line_intersection_definition on J, Line(F, J), Line(J, center(Circle(C, D, E))) we get J == line_intersection(Line(F, J), Line(J, center(Circle(C, D, E))))
By line_intersection_definition on D, j, Line(D, center(Circle(D, E, G))) we get D == line_intersection(j, Line(D, center(Circle(D, E, G))))
By line_intersection_definition on center(Circle(C, D, E)), Line(F, center(Circle(C, D, E))), Line(C, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(C, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on E, Line(D, E), Line(E, center(Circle(C, D, E))) we get E == line_intersection(Line(D, E), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on F, Line(E, F), Line(F, center(Circle(C, D, E))) we get F == line_intersection(Line(E, F), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on E, Line(D, E), radical_axis(Circle(B, E, G), Circle(C, D, E)) we get E == line_intersection(Line(D, E), radical_axis(Circle(B, E, G), Circle(C, D, E)))
By perpendicular_line_definition on I, Line(A, I), j we get Line(A, I) == perpendicular_line(I, j)
By perpendicular_line_definition on line_circle_tangent_point(Line(D, F), Circle(B, F, G)), Line(D, F), g we get Line(D, F) == perpendicular_line(line_circle_tangent_point(Line(D, F), Circle(B, F, G)), g)
By perpendicular_line_definition on C, f, Line(E, center(Circle(D, E, G))) we get f == perpendicular_line(C, Line(E, center(Circle(D, E, G))))
By perpendicular_line_definition on A, h, Line(C, J) we get h == perpendicular_line(A, Line(C, J))
By line_intersection_definition on E, k, Line(E, center(Circle(C, D, E))) we get E == line_intersection(k, Line(E, center(Circle(C, D, E))))
By line_intersection_definition on E, Line(E, center(Circle(B, E, G))), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, center(Circle(B, E, G))))
By line_intersection_definition on E, Line(E, center(Circle(C, D, E))), Line(E, center(Circle(B, E, G))) we get E == line_intersection(Line(E, center(Circle(B, E, G))), Line(E, center(Circle(C, D, E))))
By perpendicular_line_definition on E, f, Line(E, center(Circle(D, E, G))) we get f == perpendicular_line(E, Line(E, center(Circle(D, E, G))))
By line_intersection_definition on D, Line(D, center(Circle(C, D, E))), Line(D, center(Circle(D, E, G))) we get D == line_intersection(Line(D, center(Circle(C, D, E))), Line(D, center(Circle(D, E, G))))
By line_intersection_definition on E, radical_axis(Circle(B, E, G), Circle(C, D, E)), f we get E == line_intersection(f, radical_axis(Circle(B, E, G), Circle(C, D, E)))
By line_intersection_definition on center(Circle(C, D, E)), Line(D, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(D, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on center(Circle(D, E, G)), Line(G, center(Circle(D, E, G))), Line(D, center(Circle(D, E, G))) we get center(Circle(D, E, G)) == line_intersection(Line(D, center(Circle(D, E, G))), Line(G, center(Circle(D, E, G))))
By line_intersection_definition on E, Line(E, F), Line(E, center(Circle(B, E, G))) we get E == line_intersection(Line(E, F), Line(E, center(Circle(B, E, G))))
By line_intersection_definition on center(Circle(C, D, E)), Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on E, k, radical_axis(Circle(B, E, G), Circle(C, D, E)) we get E == line_intersection(k, radical_axis(Circle(B, E, G), Circle(C, D, E)))
By perpendicular_line_definition on D, j, Line(A, I) we get j == perpendicular_line(D, Line(A, I))
By perpendicular_line_definition on midpoint(E, F), j, Line(A, I) we get j == perpendicular_line(midpoint(E, F), Line(A, I))
By line_intersection_definition on D, Line(D, center(Circle(C, D, E))), h we get D == line_intersection(h, Line(D, center(Circle(C, D, E))))
By line_intersection_definition on J, Line(C, J), Line(J, center(Circle(C, D, E))) we get J == line_intersection(Line(C, J), Line(J, center(Circle(C, D, E))))
By line_intersection_definition on center(Circle(C, D, E)), Line(J, center(Circle(C, D, E))), Line(C, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(C, center(Circle(C, D, E))), Line(J, center(Circle(C, D, E))))
By line_intersection_definition on D, Line(D, center(Circle(C, D, E))), i we get D == line_intersection(i, Line(D, center(Circle(C, D, E))))
By perpendicular_line_definition on I, j, Line(A, I) we get j == perpendicular_line(I, Line(A, I))
By line_intersection_definition on center(Circle(B, E, G)), Line(G, center(Circle(B, E, G))), Line(E, center(Circle(B, E, G))) we get center(Circle(B, E, G)) == line_intersection(Line(E, center(Circle(B, E, G))), Line(G, center(Circle(B, E, G))))
By line_intersection_definition on C, Line(C, center(Circle(C, D, E))), g we get C == line_intersection(g, Line(C, center(Circle(C, D, E))))
By perpendicular_line_definition on B, f, Line(E, center(Circle(D, E, G))) we get f == perpendicular_line(B, Line(E, center(Circle(D, E, G))))
By line_intersection_definition on E, Line(E, center(Circle(D, E, G))), k we get E == line_intersection(k, Line(E, center(Circle(D, E, G))))
By line_intersection_definition on F, Line(F, J), Line(F, center(Circle(C, D, E))) we get F == line_intersection(Line(F, J), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on C, f, Line(C, center(Circle(C, D, E))) we get C == line_intersection(f, Line(C, center(Circle(C, D, E))))
By line_intersection_definition on E, radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, center(Circle(C, D, E))) we get E == line_intersection(radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on center(Circle(C, D, E)), Line(J, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(E, center(Circle(C, D, E))), Line(J, center(Circle(C, D, E))))
By line_intersection_definition on E, k, Line(E, center(Circle(B, E, G))) we get E == line_intersection(k, Line(E, center(Circle(B, E, G))))
By perpendicular_line_definition on C, j, Line(A, I) we get j == perpendicular_line(C, Line(A, I))
By line_intersection_definition on G, Line(G, center(Circle(D, E, G))), k we get G == line_intersection(k, Line(G, center(Circle(D, E, G))))
By line_intersection_definition on F, Line(F, center(Circle(C, D, E))), Line(F, G) we get F == line_intersection(Line(F, G), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on E, Line(E, center(Circle(D, E, G))), Line(E, center(Circle(C, D, E))) we get E == line_intersection(Line(E, center(Circle(C, D, E))), Line(E, center(Circle(D, E, G))))
By line_intersection_definition on D, Line(D, center(Circle(D, E, G))), h we get D == line_intersection(h, Line(D, center(Circle(D, E, G))))
By perpendicular_line_definition on E, Line(D, E), Line(E, center(Circle(B, E, G))) we get Line(D, E) == perpendicular_line(E, Line(E, center(Circle(B, E, G))))
By perpendicular_line_definition on D, h, Line(C, J) we get h == perpendicular_line(D, Line(C, J))
By perpendicular_line_definition on D, Line(D, E), Line(E, center(Circle(B, E, G))) we get Line(D, E) == perpendicular_line(D, Line(E, center(Circle(B, E, G))))
By perpendicular_line_definition on J, Line(C, J), h we get Line(C, J) == perpendicular_line(J, h)
By same_angle_converse_v1 on center(Circle(C, D, E)), C, D, F we get collinear(C, D, center(Circle(C, D, E)))
By same_angle_converse_v1 on center(Circle(B, E, G)), E, B, G we get collinear(B, E, center(Circle(B, E, G)))
By same_angle_converse_v1 on center(Circle(D, E, G)), E, D, G we get collinear(D, E, center(Circle(D, E, G)))
By perpendicular_direction_conditions_v0_r on B, E, center(Circle(D, E, G)), E we get 180 == 2 * direction(B, E) - 2 * direction(center(Circle(D, E, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, D, C we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on D, I, midpoint(E, F), F we get 180 == 2 * direction(D, I) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, D, I we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(D, I) mod 360
By projection_definition on C, midpoint(E, F), Line(E, F) we get midpoint(E, F) == projection(C, Line(E, F))
By perpendicular_direction_conditions_v0_r on center(Circle(D, E, G)), E, E, C we get 180 == 2 * direction(center(Circle(D, E, G)), E) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(D, E, G)), E, B, C we get 180 == 2 * direction(center(Circle(D, E, G)), E) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on D, C, midpoint(E, F), F we get 180 == 2 * direction(D, C) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on D, C, midpoint(E, F), E we get 180 == 2 * direction(D, C) - 2 * direction(midpoint(E, F), E) mod 360
By projection_definition on F, midpoint(E, F), j we get midpoint(E, F) == projection(F, j)
By perpendicular_direction_conditions_v0_r on C, D, midpoint(E, F), F we get 180 == 2 * direction(C, D) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, D, I we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(D, I) mod 360
By perpendicular_direction_conditions_v0_r on E, D, center(Circle(B, E, G)), E we get 180 == 2 * direction(E, D) - 2 * direction(center(Circle(B, E, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on C, D, midpoint(E, F), E we get 180 == 2 * direction(C, D) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(D, E, G)), E, C, E we get 180 == 2 * direction(center(Circle(D, E, G)), E) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on I, D, midpoint(E, F), F we get 180 == 2 * direction(I, D) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on D, E, center(Circle(B, E, G)), E we get 180 == 2 * direction(D, E) - 2 * direction(center(Circle(B, E, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on E, B, center(Circle(D, E, G)), E we get 180 == 2 * direction(E, B) - 2 * direction(center(Circle(D, E, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, I, C we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(I, C) mod 360
By projection_definition on E, midpoint(E, F), j we get midpoint(E, F) == projection(E, j)
By perpendicular_direction_conditions_v0_r on center(Circle(B, E, G)), E, E, D we get 180 == 2 * direction(center(Circle(B, E, G)), E) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, I, C we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(I, C) mod 360
By perpendicular_direction_conditions_v0_r on I, D, midpoint(E, F), E we get 180 == 2 * direction(I, D) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(D, E, G)), E, E, B we get 180 == 2 * direction(center(Circle(D, E, G)), E) - 2 * direction(E, B) mod 360
By projection_definition on D, midpoint(E, F), Line(E, F) we get midpoint(E, F) == projection(D, Line(E, F))
By perpendicular_direction_conditions_v0_r on center(Circle(D, E, G)), E, B, E we get 180 == 2 * direction(center(Circle(D, E, G)), E) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, C, D we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, C, D we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on C, I, midpoint(E, F), F we get 180 == 2 * direction(C, I) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(D, E, G)), E, C, B we get 180 == 2 * direction(center(Circle(D, E, G)), E) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on C, I, midpoint(E, F), E we get 180 == 2 * direction(C, I) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on C, E, center(Circle(D, E, G)), E we get 180 == 2 * direction(C, E) - 2 * direction(center(Circle(D, E, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, D, C we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on E, C, center(Circle(D, E, G)), E we get 180 == 2 * direction(E, C) - 2 * direction(center(Circle(D, E, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, C, I we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(C, I) mod 360
By perpendicular_direction_conditions_v0_r on I, C, midpoint(E, F), E we get 180 == 2 * direction(I, C) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, C, I we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(C, I) mod 360
By perpendicular_direction_conditions_v0_r on C, B, center(Circle(D, E, G)), E we get 180 == 2 * direction(C, B) - 2 * direction(center(Circle(D, E, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on B, C, center(Circle(D, E, G)), E we get 180 == 2 * direction(B, C) - 2 * direction(center(Circle(D, E, G)), E) mod 360
By projection_definition on I, midpoint(E, F), Line(E, F) we get midpoint(E, F) == projection(I, Line(E, F))
By perpendicular_direction_conditions_v0_r on I, C, midpoint(E, F), F we get 180 == 2 * direction(I, C) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(B, E, G)), E, D, E we get 180 == 2 * direction(center(Circle(B, E, G)), E) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on D, I, midpoint(E, F), E we get 180 == 2 * direction(D, I) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, I, D we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(I, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, I, D we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(I, D) mod 360
By circle_radius_v0_r on C, Circle(A, C, I) we get radius(Circle(A, C, I)) == distance(C, center(Circle(A, C, I)))
By circle_radius_v0_r on F, Circle(B, F, G) we get radius(Circle(B, F, G)) == distance(F, center(Circle(B, F, G)))
By circle_radius_v0_r on J, Circle(A, C, I) we get radius(Circle(A, C, I)) == distance(J, center(Circle(A, C, I)))
By circle_radius_v0_r on line_circle_tangent_point(Line(D, F), Circle(B, F, G)), Circle(B, F, G) we get radius(Circle(B, F, G)) == distance(center(Circle(B, F, G)), line_circle_tangent_point(Line(D, F), Circle(B, F, G)))
By circle_radius_v0_r on I, Circle(A, C, I) we get radius(Circle(A, C, I)) == distance(I, center(Circle(A, C, I)))
By circle_radius_v0_r on B, Circle(B, F, G) we get radius(Circle(B, F, G)) == distance(B, center(Circle(B, F, G)))
By circle_radius_v0_r on A, Circle(A, C, I) we get radius(Circle(A, C, I)) == distance(A, center(Circle(A, C, I)))
By circle_radius_v0_r on G, Circle(B, F, G) we get radius(Circle(B, F, G)) == distance(G, center(Circle(B, F, G)))
By angle_to_center on J, A, C, Circle(A, C, I) we get 2 * angle(J, A, C) == angle(J, center(Circle(A, C, I)), C) mod 360
By angle_to_center on F, B, G, Circle(B, F, G) we get 2 * angle(F, B, G) == angle(F, center(Circle(B, F, G)), G) mod 360
By angle_to_center on I, C, J, Circle(A, C, I) we get 2 * angle(I, C, J) == angle(I, center(Circle(A, C, I)), J) mod 360
By angle_to_center on J, C, A, Circle(A, C, I) we get 2 * angle(J, C, A) == angle(J, center(Circle(A, C, I)), A) mod 360
By angle_to_center on J, I, A, Circle(A, C, I) we get 2 * angle(J, I, A) == angle(J, center(Circle(A, C, I)), A) mod 360
By angle_to_center on A, I, J, Circle(A, C, I) we get 2 * angle(A, I, J) == angle(A, center(Circle(A, C, I)), J) mod 360
By angle_to_center on I, C, A, Circle(A, C, I) we get 2 * angle(I, C, A) == angle(I, center(Circle(A, C, I)), A) mod 360
By angle_to_center on C, J, I, Circle(A, C, I) we get 2 * angle(C, J, I) == angle(C, center(Circle(A, C, I)), I) mod 360
By angle_to_center on C, I, A, Circle(A, C, I) we get 2 * angle(C, I, A) == angle(C, center(Circle(A, C, I)), A) mod 360
By angle_to_center on B, F, G, Circle(B, F, G) we get 2 * angle(B, F, G) == angle(B, center(Circle(B, F, G)), G) mod 360
By angle_to_center on I, A, C, Circle(A, C, I) we get 2 * angle(I, A, C) == angle(I, center(Circle(A, C, I)), C) mod 360
By angle_to_center on G, B, F, Circle(B, F, G) we get 2 * angle(G, B, F) == angle(G, center(Circle(B, F, G)), F) mod 360
By angle_to_center on J, A, I, Circle(A, C, I) we get 2 * angle(J, A, I) == angle(J, center(Circle(A, C, I)), I) mod 360
By angle_to_center on F, G, B, Circle(B, F, G) we get 2 * angle(F, G, B) == angle(F, center(Circle(B, F, G)), B) mod 360
By angle_to_center on I, J, A, Circle(A, C, I) we get 2 * angle(I, J, A) == angle(I, center(Circle(A, C, I)), A) mod 360
By angle_to_center on A, C, I, Circle(A, C, I) we get 2 * angle(A, C, I) == angle(A, center(Circle(A, C, I)), I) mod 360
By angle_to_center on A, I, C, Circle(A, C, I) we get 2 * angle(A, I, C) == angle(A, center(Circle(A, C, I)), C) mod 360
By angle_to_center on J, I, C, Circle(A, C, I) we get 2 * angle(J, I, C) == angle(J, center(Circle(A, C, I)), C) mod 360
By angle_to_center on C, I, J, Circle(A, C, I) we get 2 * angle(C, I, J) == angle(C, center(Circle(A, C, I)), J) mod 360
By angle_to_center on I, A, J, Circle(A, C, I) we get 2 * angle(I, A, J) == angle(I, center(Circle(A, C, I)), J) mod 360
By angle_to_center on B, G, F, Circle(B, F, G) we get 2 * angle(B, G, F) == angle(B, center(Circle(B, F, G)), F) mod 360
By angle_to_center on A, J, C, Circle(A, C, I) we get 2 * angle(A, J, C) == angle(A, center(Circle(A, C, I)), C) mod 360
By angle_to_center on C, A, J, Circle(A, C, I) we get 2 * angle(C, A, J) == angle(C, center(Circle(A, C, I)), J) mod 360
By angle_to_center on C, A, I, Circle(A, C, I) we get 2 * angle(C, A, I) == angle(C, center(Circle(A, C, I)), I) mod 360
By angle_to_center on G, F, B, Circle(B, F, G) we get 2 * angle(G, F, B) == angle(G, center(Circle(B, F, G)), B) mod 360
By angle_to_center on I, J, C, Circle(A, C, I) we get 2 * angle(I, J, C) == angle(I, center(Circle(A, C, I)), C) mod 360
By angle_to_center on A, C, J, Circle(A, C, I) we get 2 * angle(A, C, J) == angle(A, center(Circle(A, C, I)), J) mod 360
By angle_to_center on C, J, A, Circle(A, C, I) we get 2 * angle(C, J, A) == angle(C, center(Circle(A, C, I)), A) mod 360
By angle_to_center on J, C, I, Circle(A, C, I) we get 2 * angle(J, C, I) == angle(J, center(Circle(A, C, I)), I) mod 360
By angle_to_center on A, J, I, Circle(A, C, I) we get 2 * angle(A, J, I) == angle(A, center(Circle(A, C, I)), I) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, F, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), D, midpoint(E, F) we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, midpoint(E, F), D we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(E, F), A, I we get 180 == 2 * direction(I, midpoint(E, F)) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, C, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, midpoint(E, F), E we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on E, F, midpoint(E, F), I we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(E, F), I) mod 360
By perpendicular_direction_conditions_v0_r on D, E, E, center(Circle(B, E, G)) we get 180 == 2 * direction(D, E) - 2 * direction(E, center(Circle(B, E, G))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, midpoint(E, F), D we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on E, center(Circle(D, E, G)), E, B we get 180 == 2 * direction(E, center(Circle(D, E, G))) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on F, E, I, midpoint(E, F) we get 180 == 2 * direction(F, E) - 2 * direction(I, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), E, midpoint(E, F) we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(E, midpoint(E, F)) mod 360
By projection_definition on center(Circle(B, E, G)), E, Line(D, E) we get E == projection(center(Circle(B, E, G)), Line(D, E))
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, midpoint(E, F), E we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, F, E we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on E, center(Circle(D, E, G)), C, B we get 180 == 2 * direction(E, center(Circle(D, E, G))) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, E, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(E, midpoint(E, F)) mod 360
By projection_definition on B, E, Line(E, center(Circle(D, E, G))) we get E == projection(B, Line(E, center(Circle(D, E, G))))
By perpendicular_direction_conditions_v0_r on A, I, midpoint(E, F), I we get 180 == 2 * direction(A, I) - 2 * direction(midpoint(E, F), I) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, E, F we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(E, F) mod 360
By projection_definition on A, J, Line(C, J) we get J == projection(A, Line(C, J))
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, midpoint(E, F), C we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(midpoint(E, F), C) mod 360
By parallel_line_angles_v1 on A, I, E, F we get parallel(Line(A, I), Line(E, F))
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), E, F we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, E, F we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on E, F, midpoint(E, F), D we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on E, F, D, midpoint(E, F) we get 180 == 2 * direction(E, F) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), I, A we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), A, I we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), F, E we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), C, midpoint(E, F) we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), E, midpoint(E, F) we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), I, midpoint(E, F), F we get 180 == 2 * direction(midpoint(E, F), I) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(E, F), E, F we get 180 == 2 * direction(I, midpoint(E, F)) - 2 * direction(E, F) mod 360
By projection_definition on midpoint(E, F), I, Line(A, I) we get I == projection(midpoint(E, F), Line(A, I))
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, D, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on A, I, midpoint(E, F), C we get 180 == 2 * direction(A, I) - 2 * direction(midpoint(E, F), C) mod 360
By perpendicular_direction_conditions_v0_r on E, F, C, midpoint(E, F) we get 180 == 2 * direction(E, F) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), C, midpoint(E, F) we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on I, A, midpoint(E, F), I we get 180 == 2 * direction(I, A) - 2 * direction(midpoint(E, F), I) mod 360
By projection_definition on center(Circle(D, E, G)), E, f we get E == projection(center(Circle(D, E, G)), f)
By perpendicular_direction_conditions_v0_r on midpoint(E, F), I, A, I we get 180 == 2 * direction(midpoint(E, F), I) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on F, E, D, midpoint(E, F) we get 180 == 2 * direction(F, E) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on A, I, C, midpoint(E, F) we get 180 == 2 * direction(A, I) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), I, midpoint(E, F) we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(I, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), I, E, F we get 180 == 2 * direction(midpoint(E, F), I) - 2 * direction(E, F) mod 360
By projection_definition on C, I, Line(A, I) we get I == projection(C, Line(A, I))
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, I, A we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on F, E, midpoint(E, F), D we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), D, midpoint(E, F) we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(D, midpoint(E, F)) mod 360
By projection_definition on C, J, h we get J == projection(C, h)
By perpendicular_direction_conditions_v0_r on midpoint(E, F), I, F, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), I) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), midpoint(E, F), C we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(midpoint(E, F), C) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), I, A we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(E, F), F, E we get 180 == 2 * direction(I, midpoint(E, F)) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on E, center(Circle(B, E, G)), D, E we get 180 == 2 * direction(E, center(Circle(B, E, G))) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on E, F, midpoint(E, F), C we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(E, F), C) mod 360
By sss_anti_similarity_v1 on I, F, G, A, B, F we get anti_similar_triangles(A, B, F, I, F, G)
By perpendicular_direction_conditions_v0_r on I, midpoint(E, F), E, midpoint(E, F) we get 180 == 2 * direction(I, midpoint(E, F)) - 2 * direction(E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on C, B, E, center(Circle(D, E, G)) we get 180 == 2 * direction(C, B) - 2 * direction(E, center(Circle(D, E, G))) mod 360
By perpendicular_direction_conditions_v0_r on B, C, E, center(Circle(D, E, G)) we get 180 == 2 * direction(B, C) - 2 * direction(E, center(Circle(D, E, G))) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), midpoint(E, F), E we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(midpoint(E, F), E) mod 360
By sss_anti_similarity_v0 on F, G, J, B, F, C we get anti_similar_triangles(B, C, F, F, J, G)
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), midpoint(E, F), C we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(midpoint(E, F), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, midpoint(E, F), I we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(midpoint(E, F), I) mod 360
By perpendicular_direction_conditions_v0_r on E, center(Circle(D, E, G)), E, C we get 180 == 2 * direction(E, center(Circle(D, E, G))) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), A, I we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on C, E, E, center(Circle(D, E, G)) we get 180 == 2 * direction(C, E) - 2 * direction(E, center(Circle(D, E, G))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, midpoint(E, F), F we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), midpoint(E, F), E we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(midpoint(E, F), E) mod 360
By orthocenter_concurrency on D, E, I we get orthocenter(D, E, I) in altitude(D, E, I), orthocenter(D, E, I) in altitude(E, D, I), orthocenter(D, E, I) in altitude(I, D, E)
By perpendicular_direction_conditions_v0_r on F, E, midpoint(E, F), I we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(E, F), I) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), midpoint(E, F), D we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), I, F, E we get 180 == 2 * direction(midpoint(E, F), I) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(E, F), midpoint(E, F), E we get 180 == 2 * direction(I, midpoint(E, F)) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(E, F), F, midpoint(E, F) we get 180 == 2 * direction(I, midpoint(E, F)) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(E, F), I, A we get 180 == 2 * direction(I, midpoint(E, F)) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, C, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, A, I we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on E, center(Circle(D, E, G)), C, E we get 180 == 2 * direction(E, center(Circle(D, E, G))) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), E, F we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(E, F) mod 360
By projection_definition on D, E, Line(E, center(Circle(B, E, G))) we get E == projection(D, Line(E, center(Circle(B, E, G))))
By perpendicular_direction_conditions_v0_r on E, center(Circle(D, E, G)), B, C we get 180 == 2 * direction(E, center(Circle(D, E, G))) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, D, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, I, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(I, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, E, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, F, E we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on E, C, E, center(Circle(D, E, G)) we get 180 == 2 * direction(E, C) - 2 * direction(E, center(Circle(D, E, G))) mod 360
By perpendicular_direction_conditions_v0_r on I, A, midpoint(E, F), D we get 180 == 2 * direction(I, A) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), F, midpoint(E, F) we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on I, A, midpoint(E, F), C we get 180 == 2 * direction(I, A) - 2 * direction(midpoint(E, F), C) mod 360
By perpendicular_direction_conditions_v0_r on I, A, I, midpoint(E, F) we get 180 == 2 * direction(I, A) - 2 * direction(I, midpoint(E, F)) mod 360
By projection_definition on C, E, Line(E, center(Circle(D, E, G))) we get E == projection(C, Line(E, center(Circle(D, E, G))))
By perpendicular_direction_conditions_v0_r on B, E, E, center(Circle(D, E, G)) we get 180 == 2 * direction(B, E) - 2 * direction(E, center(Circle(D, E, G))) mod 360
By projection_definition on D, J, Line(C, J) we get J == projection(D, Line(C, J))
By perpendicular_direction_conditions_v0_r on I, midpoint(E, F), midpoint(E, F), F we get 180 == 2 * direction(I, midpoint(E, F)) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on E, F, I, midpoint(E, F) we get 180 == 2 * direction(E, F) - 2 * direction(I, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, F, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), midpoint(E, F), F we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, A, I we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on F, E, midpoint(E, F), C we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(E, F), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), I, E, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), I) - 2 * direction(E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, D, E, center(Circle(B, E, G)) we get 180 == 2 * direction(E, D) - 2 * direction(E, center(Circle(B, E, G))) mod 360
By projection_definition on D, I, Line(A, I) we get I == projection(D, Line(A, I))
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, midpoint(E, F), F we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, midpoint(E, F), I we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(midpoint(E, F), I) mod 360
By perpendicular_direction_conditions_v0_r on E, B, E, center(Circle(D, E, G)) we get 180 == 2 * direction(E, B) - 2 * direction(E, center(Circle(D, E, G))) mod 360
By perpendicular_direction_conditions_v0_r on A, I, I, midpoint(E, F) we get 180 == 2 * direction(A, I) - 2 * direction(I, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), I, midpoint(E, F) we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(I, midpoint(E, F)) mod 360
By projection_definition on A, I, j we get I == projection(A, j)
By perpendicular_direction_conditions_v0_r on A, I, midpoint(E, F), D we get 180 == 2 * direction(A, I) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, I, A we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), midpoint(E, F), I we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(midpoint(E, F), I) mod 360
By perpendicular_direction_conditions_v0_r on A, I, D, midpoint(E, F) we get 180 == 2 * direction(A, I) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), midpoint(E, F), I we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(midpoint(E, F), I) mod 360
By perpendicular_direction_conditions_v0_r on E, center(Circle(B, E, G)), E, D we get 180 == 2 * direction(E, center(Circle(B, E, G))) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), F, E we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on I, A, C, midpoint(E, F) we get 180 == 2 * direction(I, A) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), I, midpoint(E, F), E we get 180 == 2 * direction(midpoint(E, F), I) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, midpoint(E, F), C we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(midpoint(E, F), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), I, I, A we get 180 == 2 * direction(midpoint(E, F), I) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), midpoint(E, F), F we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on F, E, C, midpoint(E, F) we get 180 == 2 * direction(F, E) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on I, A, D, midpoint(E, F) we get 180 == 2 * direction(I, A) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), midpoint(E, F), D we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on E, center(Circle(D, E, G)), B, E we get 180 == 2 * direction(E, center(Circle(D, E, G))) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), F, midpoint(E, F) we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, I, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(I, midpoint(E, F)) mod 360
By sss_anti_similarity_v1 on A, F, B, I, G, F we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v0 on J, F, G, C, B, F we get anti_similar_triangles(B, C, F, F, J, G)
By similar_triangle_basic_properties on A, I, J, F, D, J we get angle(A, I, J) == angle(F, D, J) mod 360, angle(D, J, F) == angle(I, J, A) mod 360, angle(J, A, I) == angle(J, F, D) mod 360, log(distance(A, I)) + log(distance(D, J)) == log(distance(D, F)) + log(distance(I, J)), log(distance(D, J)) + log(distance(A, J)) == log(distance(I, J)) + log(distance(F, J)), log(distance(A, J)) + log(distance(D, F)) == log(distance(F, J)) + log(distance(A, I))
By sss_anti_similarity_v1 on J, I, F, C, A, B we get anti_similar_triangles(A, B, C, I, F, J)
By similar_triangle_basic_properties on F, J, A, F, C, I we get angle(F, C, I) == angle(F, J, A) mod 360, angle(C, I, F) == angle(J, A, F) mod 360, angle(A, F, J) == angle(I, F, C) mod 360, log(distance(C, F)) + log(distance(A, J)) == log(distance(F, J)) + log(distance(C, I)), log(distance(A, J)) + log(distance(F, I)) == log(distance(C, I)) + log(distance(A, F)), log(distance(A, F)) + log(distance(C, F)) == log(distance(F, I)) + log(distance(F, J))
By in_imply_collinear on line_circle_tangent_point(Line(D, F), Circle(B, F, G)), F, D we get collinear(D, F, line_circle_tangent_point(Line(D, F), Circle(B, F, G)))
By sss_anti_similarity_v0 on C, A, B, J, I, F we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v0 on A, B, C, I, F, J we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v0 on F, A, B, G, I, F we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v1 on F, G, I, B, F, A we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v0 on C, A, B, J, I, F we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v1 on F, J, I, B, C, A we get anti_similar_triangles(A, B, C, I, F, J)
By anti_similar_triangle_basic_properties on J, I, A, C, D, B we get angle(J, I, A) == 0 - angle(C, D, B) mod 360, angle(I, A, J) == 0 - angle(D, B, C) mod 360, angle(A, J, I) == 0 - angle(B, C, D) mod 360, log(distance(C, D)) + log(distance(A, I)) == log(distance(I, J)) + log(distance(B, D)), log(distance(A, I)) + log(distance(B, C)) == log(distance(B, D)) + log(distance(A, J)), log(distance(A, J)) + log(distance(C, D)) == log(distance(B, C)) + log(distance(I, J))
By aa_anti_similarity on B, C, F, F, J, G we get anti_similar_triangles(B, C, F, F, J, G)
By aa_anti_similarity on F, J, I, B, C, A we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v0 on F, B, C, G, F, J we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v1 on G, F, J, F, B, C we get anti_similar_triangles(B, C, F, F, J, G)
By double_perpendicular_and_parallel_v0 on Line(E, center(Circle(B, E, G))), Line(D, E), f we get parallel(f, Line(E, center(Circle(B, E, G))))
By sss_anti_similarity_v0 on F, B, C, G, F, J we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v0 on J, F, G, C, B, F we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v0 on A, B, F, I, F, G we get anti_similar_triangles(A, B, F, I, F, G)
By similar_triangle_basic_properties on J, I, A, J, D, F we get angle(J, D, F) == angle(J, I, A) mod 360, angle(D, F, J) == angle(I, A, J) mod 360, angle(A, J, I) == angle(F, J, D) mod 360, log(distance(D, J)) + log(distance(A, I)) == log(distance(I, J)) + log(distance(D, F)), log(distance(A, I)) + log(distance(F, J)) == log(distance(D, F)) + log(distance(A, J)), log(distance(A, J)) + log(distance(D, J)) == log(distance(F, J)) + log(distance(I, J))
By sss_anti_similarity_v0 on I, G, F, A, F, B we get anti_similar_triangles(A, B, F, I, F, G)
By perpendicular_bisector_sufficient_conditions on E, F, C, center(Circle(C, D, E)) we get perpendicular_bisector(E, F) == Line(C, center(Circle(C, D, E)))
By sss_anti_similarity_v0 on F, I, G, B, A, F we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v1 on G, F, J, F, B, C we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v0 on A, B, C, I, F, J we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v0 on I, J, F, A, C, B we get anti_similar_triangles(A, B, C, I, F, J)
By tangent_point_is_unique on F, line_circle_tangent_point(Line(D, F), Circle(B, F, G)), Circle(B, F, G), Line(D, F) we get F == line_circle_tangent_point(Line(D, F), Circle(B, F, G))
By sas_anti_similarity on F, G, I, B, F, A we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v0 on G, F, I, F, B, A we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v0 on F, I, J, B, A, C we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v0 on F, B, C, G, F, J we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v0 on C, A, B, J, I, F we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v0 on G, J, F, F, C, B we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v1 on C, B, F, J, F, G we get anti_similar_triangles(B, C, F, F, J, G)
By similar_triangle_basic_properties on J, I, D, J, A, F we get angle(J, A, F) == angle(J, I, D) mod 360, angle(A, F, J) == angle(I, D, J) mod 360, angle(D, J, I) == angle(F, J, A) mod 360, log(distance(A, J)) + log(distance(D, I)) == log(distance(I, J)) + log(distance(A, F)), log(distance(A, F)) + log(distance(D, J)) == log(distance(D, I)) + log(distance(F, J)), log(distance(D, J)) + log(distance(A, J)) == log(distance(F, J)) + log(distance(I, J))
By sss_anti_similarity_v0 on C, F, B, J, G, F we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v0 on F, I, J, B, A, C we get anti_similar_triangles(A, B, C, I, F, J)
By in_imply_concyclic on F, B, G, line_circle_tangent_point(Line(D, F), Circle(B, F, G)) we get concyclic(B, F, G, line_circle_tangent_point(Line(D, F), Circle(B, F, G)))
By sss_anti_similarity_v1 on F, C, B, G, J, F we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v0 on I, G, F, A, F, B we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v1 on I, F, G, A, B, F we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v1 on F, B, A, G, F, I we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v1 on J, I, F, C, A, B we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v1 on G, F, J, F, B, C we get anti_similar_triangles(B, C, F, F, J, G)
By anti_similar_triangle_basic_properties on C, A, D, J, A, F we get angle(C, A, D) == 0 - angle(J, A, F) mod 360, angle(A, D, C) == 0 - angle(A, F, J) mod 360, angle(D, C, A) == 0 - angle(F, J, A) mod 360, log(distance(A, C)) + log(distance(A, F)) == log(distance(A, J)) + log(distance(A, D)), log(distance(A, D)) + log(distance(F, J)) == log(distance(A, F)) + log(distance(C, D)), log(distance(C, D)) + log(distance(A, J)) == log(distance(F, J)) + log(distance(A, C))
By sss_anti_similarity_v1 on F, G, I, B, F, A we get anti_similar_triangles(A, B, F, I, F, G)
By aa_anti_similarity on B, F, A, F, G, I we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v0 on C, F, B, J, G, F we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v0 on F, I, G, B, A, F we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v0 on A, B, C, I, F, J we get anti_similar_triangles(A, B, C, I, F, J)
By anti_similar_triangle_basic_properties on A, J, F, I, C, E we get angle(A, J, F) == 0 - angle(I, C, E) mod 360, angle(J, F, A) == 0 - angle(C, E, I) mod 360, angle(F, A, J) == 0 - angle(E, I, C) mod 360, log(distance(A, J)) + log(distance(C, E)) == log(distance(C, I)) + log(distance(F, J)), log(distance(C, E)) + log(distance(A, F)) == log(distance(F, J)) + log(distance(E, I)), log(distance(A, F)) + log(distance(C, I)) == log(distance(E, I)) + log(distance(A, J))
By sss_anti_similarity_v1 on F, J, G, B, C, F we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v0 on B, C, F, F, J, G we get anti_similar_triangles(B, C, F, F, J, G)
By aa_similarity on C, J, F, I, A, F we get similar_triangles(A, F, I, J, F, C)
By sss_anti_similarity_v0 on C, F, B, J, G, F we get anti_similar_triangles(B, C, F, F, J, G)
By aa_anti_similarity on B, A, C, F, I, J we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v0 on B, C, A, F, J, I we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v0 on G, F, I, F, B, A we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v1 on G, F, J, F, B, C we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v1 on I, F, J, A, B, C we get anti_similar_triangles(A, B, C, I, F, J)
By aa_similarity on I, F, A, C, F, J we get similar_triangles(A, F, I, J, F, C)
By sss_anti_similarity_v0 on F, A, B, G, I, F we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v1 on C, B, F, J, F, G we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v1 on B, F, C, F, G, J we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v1 on B, A, C, F, I, J we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v1 on I, F, J, A, B, C we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v0 on F, B, C, G, F, J we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v0 on B, C, F, F, J, G we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v1 on B, A, F, F, I, G we get anti_similar_triangles(A, B, F, I, F, G)
By reverse_direction on midpoint(E, F), E we get 180 == direction(midpoint(E, F), E) - direction(E, midpoint(E, F)) mod 360
By sas_anti_similarity on G, I, F, F, A, B we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v1 on I, F, J, A, B, C we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v0 on F, G, J, B, F, C we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v0 on J, F, I, C, B, A we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v0 on I, G, F, A, F, B we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v0 on A, B, F, I, F, G we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v0 on C, F, B, J, G, F we get anti_similar_triangles(B, C, F, F, J, G)
By anti_similar_triangle_basic_properties on I, J, A, D, C, B we get angle(I, J, A) == 0 - angle(D, C, B) mod 360, angle(J, A, I) == 0 - angle(C, B, D) mod 360, angle(A, I, J) == 0 - angle(B, D, C) mod 360, log(distance(C, D)) + log(distance(A, J)) == log(distance(I, J)) + log(distance(B, C)), log(distance(A, J)) + log(distance(B, D)) == log(distance(B, C)) + log(distance(A, I)), log(distance(A, I)) + log(distance(C, D)) == log(distance(B, D)) + log(distance(I, J))
By sss_anti_similarity_v1 on B, A, C, F, I, J we get anti_similar_triangles(A, B, C, I, F, J)
By sas_anti_similarity on I, J, F, A, C, B we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v1 on J, I, F, C, A, B we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v1 on F, C, B, G, J, F we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v1 on F, J, I, B, C, A we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v0 on B, C, F, F, J, G we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v0 on J, F, I, C, B, A we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v1 on F, B, A, G, F, I we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v0 on A, B, F, I, F, G we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v1 on F, J, G, B, C, F we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v1 on F, J, I, B, C, A we get anti_similar_triangles(A, B, C, I, F, J)
By aa_similarity on I, A, F, C, J, F we get similar_triangles(A, F, I, J, F, C)
By sss_anti_similarity_v1 on B, A, C, F, I, J we get anti_similar_triangles(A, B, C, I, F, J)
By aa_anti_similarity on F, G, J, B, F, C we get anti_similar_triangles(B, C, F, F, J, G)
By sas_anti_similarity on B, A, C, F, I, J we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v1 on J, G, F, C, F, B we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v1 on B, A, C, F, I, J we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v0 on F, I, G, B, A, F we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v1 on A, C, B, I, J, F we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v1 on I, F, J, A, B, C we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v0 on G, J, F, F, C, B we get anti_similar_triangles(B, C, F, F, J, G)
By sas_anti_similarity on F, I, G, B, A, F we get anti_similar_triangles(A, B, F, I, F, G)
By aa_anti_similarity on F, I, G, B, A, F we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v1 on A, F, B, I, G, F we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v1 on F, J, G, B, C, F we get anti_similar_triangles(B, C, F, F, J, G)
By anti_similar_triangle_basic_properties on A, J, F, A, C, D we get angle(A, J, F) == 0 - angle(A, C, D) mod 360, angle(J, F, A) == 0 - angle(C, D, A) mod 360, angle(F, A, J) == 0 - angle(D, A, C) mod 360, log(distance(A, C)) + log(distance(F, J)) == log(distance(A, J)) + log(distance(C, D)), log(distance(C, D)) + log(distance(A, F)) == log(distance(F, J)) + log(distance(A, D)), log(distance(A, D)) + log(distance(A, J)) == log(distance(A, F)) + log(distance(A, C))
By sss_anti_similarity_v0 on B, F, A, F, G, I we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v1 on B, F, C, F, G, J we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v1 on B, A, C, F, I, J we get anti_similar_triangles(A, B, C, I, F, J)
By double_perpendicular_and_parallel_v0 on Line(E, center(Circle(D, E, G))), f, Line(D, E) we get parallel(Line(D, E), Line(E, center(Circle(D, E, G))))
By sss_anti_similarity_v1 on F, J, G, B, C, F we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v1 on B, A, C, F, I, J we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v1 on C, B, F, J, F, G we get anti_similar_triangles(B, C, F, F, J, G)
By reverse_direction on F, midpoint(E, F) we get 180 == direction(F, midpoint(E, F)) - direction(midpoint(E, F), F) mod 360
By sss_anti_similarity_v0 on B, C, F, F, J, G we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v0 on F, A, B, G, I, F we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v0 on I, J, F, A, C, B we get anti_similar_triangles(A, B, C, I, F, J)
By sas_anti_similarity on J, I, F, C, A, B we get anti_similar_triangles(A, B, C, I, F, J)
By sas_anti_similarity on J, G, F, C, F, B we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v1 on F, B, A, G, F, I we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v0 on J, F, I, C, B, A we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v0 on G, J, F, F, C, B we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v0 on C, A, B, J, I, F we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v0 on C, A, B, J, I, F we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v1 on B, F, C, F, G, J we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v0 on I, G, F, A, F, B we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v0 on F, B, C, G, F, J we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v0 on G, F, I, F, B, A we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v0 on I, J, F, A, C, B we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v1 on A, C, B, I, J, F we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v1 on B, F, C, F, G, J we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v0 on F, G, J, B, F, C we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v0 on A, B, F, I, F, G we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v0 on B, C, A, F, J, I we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v0 on F, I, G, B, A, F we get anti_similar_triangles(A, B, F, I, F, G)
By reverse_direction on E, midpoint(E, F) we get 180 == direction(E, midpoint(E, F)) - direction(midpoint(E, F), E) mod 360
By sas_anti_similarity on B, F, C, F, G, J we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v0 on F, I, J, B, A, C we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v1 on I, F, G, A, B, F we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v1 on F, J, G, B, C, F we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v1 on G, I, F, F, A, B we get anti_similar_triangles(A, B, F, I, F, G)
By perpendicular_bisector_sufficient_conditions on E, F, center(Circle(C, D, E)), D we get perpendicular_bisector(E, F) == Line(D, center(Circle(C, D, E)))
By sss_anti_similarity_v0 on B, C, A, F, J, I we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v0 on B, F, A, F, G, I we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v0 on J, F, G, C, B, F we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v0 on B, C, A, F, J, I we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v1 on F, J, I, B, C, A we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v0 on J, F, I, C, B, A we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v0 on J, F, G, C, B, F we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v1 on F, G, I, B, F, A we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v0 on F, I, G, B, A, F we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v1 on G, I, F, F, A, B we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v1 on J, G, F, C, F, B we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v0 on G, F, I, F, B, A we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v0 on F, I, J, B, A, C we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v0 on G, J, F, F, C, B we get anti_similar_triangles(B, C, F, F, J, G)
By sas_anti_similarity on B, C, A, F, J, I we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v1 on J, G, F, C, F, B we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v0 on B, F, A, F, G, I we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v1 on F, J, I, B, C, A we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v1 on C, B, A, J, F, I we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v1 on B, A, F, F, I, G we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v1 on G, I, F, F, A, B we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v1 on F, J, I, B, C, A we get anti_similar_triangles(A, B, C, I, F, J)
By sas_anti_similarity on B, A, F, F, I, G we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v0 on C, A, B, J, I, F we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v0 on J, F, I, C, B, A we get anti_similar_triangles(A, B, C, I, F, J)
By aa_anti_similarity on F, J, G, B, C, F we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v1 on F, C, B, G, J, F we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v1 on A, C, B, I, J, F we get anti_similar_triangles(A, B, C, I, F, J)
By aa_anti_similarity on B, F, C, F, G, J we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v1 on F, B, A, G, F, I we get anti_similar_triangles(A, B, F, I, F, G)
By sas_anti_similarity on A, C, B, I, J, F we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v1 on F, G, I, B, F, A we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v0 on B, C, A, F, J, I we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v1 on C, B, A, J, F, I we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v0 on I, J, F, A, C, B we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v1 on I, F, J, A, B, C we get anti_similar_triangles(A, B, C, I, F, J)
By aa_anti_similarity on B, C, A, F, J, I we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v1 on A, F, B, I, G, F we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v0 on F, G, J, B, F, C we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v1 on J, G, F, C, F, B we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v0 on A, B, F, I, F, G we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v1 on C, B, F, J, F, G we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v1 on F, C, B, G, J, F we get anti_similar_triangles(B, C, F, F, J, G)
By aa_similarity on C, F, J, I, F, A we get similar_triangles(A, F, I, J, F, C)
By sas_anti_similarity on I, G, F, A, F, B we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v0 on F, A, B, G, I, F we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v1 on F, B, A, G, F, I we get anti_similar_triangles(A, B, F, I, F, G)
By sas_anti_similarity on F, G, J, B, F, C we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v1 on A, C, B, I, J, F we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v1 on F, J, G, B, C, F we get anti_similar_triangles(B, C, F, F, J, G)
By sas_anti_similarity on F, A, B, G, I, F we get anti_similar_triangles(A, B, F, I, F, G)
By sas_anti_similarity on C, A, B, J, I, F we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v0 on F, I, J, B, A, C we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v0 on B, F, A, F, G, I we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v0 on F, G, J, B, F, C we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v1 on J, G, F, C, F, B we get anti_similar_triangles(B, C, F, F, J, G)
By sas_anti_similarity on C, F, B, J, G, F we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v0 on J, F, I, C, B, A we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v1 on G, F, J, F, B, C we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v1 on C, B, A, J, F, I we get anti_similar_triangles(A, B, C, I, F, J)
By sas_anti_similarity on B, F, A, F, G, I we get anti_similar_triangles(A, B, F, I, F, G)
By sas_anti_similarity on F, J, G, B, C, F we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v1 on B, A, F, F, I, G we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v1 on A, F, B, I, G, F we get anti_similar_triangles(A, B, F, I, F, G)
By sas_anti_similarity on A, F, B, I, G, F we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v1 on G, I, F, F, A, B we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v1 on F, G, I, B, F, A we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v1 on B, A, F, F, I, G we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v0 on B, C, F, F, J, G we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v0 on A, B, C, I, F, J we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v1 on F, G, I, B, F, A we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v1 on B, A, F, F, I, G we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v1 on C, B, A, J, F, I we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v1 on J, I, F, C, A, B we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v0 on J, F, G, C, B, F we get anti_similar_triangles(B, C, F, F, J, G)
By sas_anti_similarity on F, I, J, B, A, C we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v1 on I, F, G, A, B, F we get anti_similar_triangles(A, B, F, I, F, G)
By sas_anti_similarity on B, C, F, F, J, G we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v1 on J, I, F, C, A, B we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v1 on F, C, B, G, J, F we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v0 on F, B, C, G, F, J we get anti_similar_triangles(B, C, F, F, J, G)
By aa_anti_similarity on F, I, J, B, A, C we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v0 on I, J, F, A, C, B we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v1 on J, I, F, C, A, B we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v0 on A, B, C, I, F, J we get anti_similar_triangles(A, B, C, I, F, J)
By aa_anti_similarity on F, G, I, B, F, A we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v1 on F, C, B, G, J, F we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v0 on F, I, G, B, A, F we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v1 on C, B, A, J, F, I we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v0 on G, F, I, F, B, A we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v1 on B, F, C, F, G, J we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v0 on C, F, B, J, G, F we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v0 on F, I, J, B, A, C we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v1 on B, F, C, F, G, J we get anti_similar_triangles(B, C, F, F, J, G)
By reverse_direction on midpoint(E, F), F we get 180 == direction(midpoint(E, F), F) - direction(F, midpoint(E, F)) mod 360
By sss_anti_similarity_v0 on F, A, B, G, I, F we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v0 on B, C, A, F, J, I we get anti_similar_triangles(A, B, C, I, F, J)
By sas_anti_similarity on F, C, B, G, J, F we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v0 on G, J, F, F, C, B we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v1 on I, F, G, A, B, F we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v0 on G, J, F, F, C, B we get anti_similar_triangles(B, C, F, F, J, G)
By aa_anti_similarity on B, A, F, F, I, G we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v0 on J, F, G, C, B, F we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v1 on A, F, B, I, G, F we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v1 on F, B, A, G, F, I we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v0 on A, B, C, I, F, J we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v0 on B, F, A, F, G, I we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v1 on G, F, J, F, B, C we get anti_similar_triangles(B, C, F, F, J, G)
By sas_anti_similarity on G, J, F, F, C, B we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v0 on B, C, F, F, J, G we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v0 on B, F, A, F, G, I we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v1 on G, I, F, F, A, B we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v0 on A, B, F, I, F, G we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v0 on I, G, F, A, F, B we get anti_similar_triangles(A, B, F, I, F, G)
By sas_anti_similarity on F, J, I, B, C, A we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v1 on C, B, F, J, F, G we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v1 on J, G, F, C, F, B we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v0 on I, J, F, A, C, B we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v1 on C, B, A, J, F, I we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v0 on F, A, B, G, I, F we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v1 on C, B, F, J, F, G we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v0 on F, G, J, B, F, C we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v1 on B, A, F, F, I, G we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v0 on G, F, I, F, B, A we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v1 on I, F, J, A, B, C we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v0 on I, G, F, A, F, B we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v1 on A, C, B, I, J, F we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v1 on G, I, F, F, A, B we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v1 on A, F, B, I, G, F we get anti_similar_triangles(A, B, F, I, F, G)
By sss_anti_similarity_v0 on C, F, B, J, G, F we get anti_similar_triangles(B, C, F, F, J, G)
By sss_anti_similarity_v1 on A, C, B, I, J, F we get anti_similar_triangles(A, B, C, I, F, J)
By sss_anti_similarity_v1 on I, F, G, A, B, F we get anti_similar_triangles(A, B, F, I, F, G)
By angle_to_center on B, G, line_circle_tangent_point(Line(D, F), Circle(B, F, G)), Circle(B, F, G) we get angle(B, center(Circle(B, F, G)), line_circle_tangent_point(Line(D, F), Circle(B, F, G))) == 2 * angle(B, G, line_circle_tangent_point(Line(D, F), Circle(B, F, G))) mod 360
By angle_to_center on line_circle_tangent_point(Line(D, F), Circle(B, F, G)), G, B, Circle(B, F, G) we get angle(line_circle_tangent_point(Line(D, F), Circle(B, F, G)), center(Circle(B, F, G)), B) == 2 * angle(line_circle_tangent_point(Line(D, F), Circle(B, F, G)), G, B) mod 360
By angle_to_center on line_circle_tangent_point(Line(D, F), Circle(B, F, G)), B, G, Circle(B, F, G) we get angle(line_circle_tangent_point(Line(D, F), Circle(B, F, G)), center(Circle(B, F, G)), G) == 2 * angle(line_circle_tangent_point(Line(D, F), Circle(B, F, G)), B, G) mod 360
By angle_to_center on G, B, line_circle_tangent_point(Line(D, F), Circle(B, F, G)), Circle(B, F, G) we get angle(G, center(Circle(B, F, G)), line_circle_tangent_point(Line(D, F), Circle(B, F, G))) == 2 * angle(G, B, line_circle_tangent_point(Line(D, F), Circle(B, F, G))) mod 360
By concyclic_definition_0 on A, F, I, D we get D in Circle(A, F, I)
By external_angle_bisector_definition_v0_r on J, H, I, F we get Line(F, H) == external_angle_bisector(I, F, J)
By concyclic_definition_0 on I, D, F, A we get A in Circle(D, F, I)
By external_angle_bisector_definition_v0_r on J, A, I, F we get Line(A, F) == external_angle_bisector(I, F, J)
By perpendicular_angle_conditions_v0 on F, midpoint(E, F), I we get angle(F, midpoint(E, F), I) == orientation(F, midpoint(E, F), I) mod 360
By external_angle_bisector_definition_v0_r on A, C, D, J we get Line(C, J) == external_angle_bisector(A, J, D)
By internal_angle_bisector_definition_v0 on I, midpoint(E, F), I, C we get angle(I, C, midpoint(E, F)) == angle(midpoint(E, F), C, I) mod 360
By collinear_definition on C, I, midpoint(E, F) we get I in Line(C, midpoint(E, F)), midpoint(E, F) in Line(C, I), Line(C, I) == Line(C, midpoint(E, F)), 0 == 2 * angle(I, C, midpoint(E, F)) mod 360
By internal_angle_bisector_definition_v0_r on E, F, E, midpoint(E, F) we get Line(F, midpoint(E, F)) == internal_angle_bisector(E, midpoint(E, F), E)
By external_angle_bisector_definition_v0_r on A, C, A, J we get Line(C, J) == external_angle_bisector(A, J, A)
By perpendicular_angle_conditions_v0 on center(Circle(D, E, G)), E, B we get angle(center(Circle(D, E, G)), E, B) == orientation(B, center(Circle(D, E, G)), E) mod 360
By external_angle_bisector_definition_v0_r on I, C, J, F we get Line(C, F) == external_angle_bisector(I, F, J)
By internal_angle_bisector_definition_v0_r on E, B, E, center(Circle(B, E, G)) we get Line(B, center(Circle(B, E, G))) == internal_angle_bisector(E, center(Circle(B, E, G)), E)
By reverse_direction on center(Circle(C, D, E)), F we get 180 == direction(center(Circle(C, D, E)), F) - direction(F, center(Circle(C, D, E))) mod 360
By external_angle_bisector_definition_v0_r on F, C, I, J we get Line(C, J) == external_angle_bisector(F, J, I)
By reverse_direction on center(Circle(D, E, G)), D we get 180 == direction(center(Circle(D, E, G)), D) - direction(D, center(Circle(D, E, G))) mod 360
By collinear_definition on I, midpoint(E, F), C we get midpoint(E, F) in Line(C, I), C in Line(I, midpoint(E, F)), Line(C, I) == Line(I, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), I, C) mod 360
By internal_angle_bisector_definition_v0_r on F, midpoint(E, F), F, E we get internal_angle_bisector(F, E, F) == Line(E, midpoint(E, F))
By collinear_definition on I, C, midpoint(E, F) we get C in Line(I, midpoint(E, F)), midpoint(E, F) in Line(C, I), Line(C, I) == Line(I, midpoint(E, F)), 0 == 2 * angle(C, I, midpoint(E, F)) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(E, F), E, midpoint(E, F), F we get Line(E, F) == internal_angle_bisector(midpoint(E, F), F, midpoint(E, F))
By power_of_a_point_in_circle on line_circle_tangent_point(Line(D, F), Circle(B, F, G)), Circle(B, F, G) we get 0 == power_of_a_point(line_circle_tangent_point(Line(D, F), Circle(B, F, G)), Circle(B, F, G))
By internal_angle_bisector_definition_v0 on E, midpoint(E, F), F, C we get angle(E, C, midpoint(E, F)) == angle(midpoint(E, F), C, F) mod 360
By perpendicular_angle_conditions_v0 on F, midpoint(E, F), C we get angle(F, midpoint(E, F), C) == orientation(C, F, midpoint(E, F)) mod 360
By concyclic_definition_0 on A, I, D, F we get F in Circle(A, D, I)
By reverse_direction on center(Circle(D, E, G)), G we get 180 == direction(center(Circle(D, E, G)), G) - direction(G, center(Circle(D, E, G))) mod 360
By internal_angle_bisector_definition_v0_r on D, C, D, center(Circle(C, D, E)) we get Line(C, center(Circle(C, D, E))) == internal_angle_bisector(D, center(Circle(C, D, E)), D)
By external_angle_bisector_definition_v0_r on G, C, F, J we get Line(C, J) == external_angle_bisector(F, J, G)
By internal_angle_bisector_definition_v0 on B, midpoint(E, F), H, C we get angle(B, C, midpoint(E, F)) == angle(midpoint(E, F), C, H) mod 360
By collinear_definition on D, midpoint(E, F), C we get midpoint(E, F) in Line(C, D), C in Line(D, midpoint(E, F)), Line(C, D) == Line(D, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), D, C) mod 360
By internal_angle_bisector_definition_v0 on F, midpoint(E, F), B, C we get angle(F, C, midpoint(E, F)) == angle(midpoint(E, F), C, B) mod 360
By perpendicular_angle_conditions_v0 on D, E, center(Circle(B, E, G)) we get angle(D, E, center(Circle(B, E, G))) == orientation(D, E, center(Circle(B, E, G))) mod 360
By perpendicular_angle_conditions_v0 on center(Circle(D, E, G)), E, C we get angle(center(Circle(D, E, G)), E, C) == orientation(C, center(Circle(D, E, G)), E) mod 360
By internal_angle_bisector_definition_v0_r on B, E, B, center(Circle(B, E, G)) we get Line(E, center(Circle(B, E, G))) == internal_angle_bisector(B, center(Circle(B, E, G)), B)
By concyclic_definition_0 on A, F, D, I we get I in Circle(A, D, F)
By collinear_definition on D, C, midpoint(E, F) we get C in Line(D, midpoint(E, F)), midpoint(E, F) in Line(C, D), Line(C, D) == Line(D, midpoint(E, F)), 0 == 2 * angle(C, D, midpoint(E, F)) mod 360
By isosceles_triangle_midpoint on center(Circle(C, D, E)), F, E we get midpoint(E, F) in median(center(Circle(C, D, E)), E, F)
By reverse_direction on center(Circle(D, E, G)), E we get 180 == direction(center(Circle(D, E, G)), E) - direction(E, center(Circle(D, E, G))) mod 360
By right_triangle_circumcenter_v1 on C, I, A we get midpoint(A, C) == circumcenter(A, C, I)
By perpendicular_angle_conditions_v0 on C, E, center(Circle(D, E, G)) we get angle(C, E, center(Circle(D, E, G))) == orientation(C, E, center(Circle(D, E, G))) mod 360
By perpendicular_angle_conditions_v0 on A, I, midpoint(E, F) we get angle(A, I, midpoint(E, F)) == orientation(A, I, midpoint(E, F)) mod 360
By internal_angle_bisector_definition_v0_r on E, D, F, center(Circle(C, D, E)) we get Line(D, center(Circle(C, D, E))) == internal_angle_bisector(E, center(Circle(C, D, E)), F)
By external_angle_bisector_definition_v0 on A, midpoint(E, F), A, I we get 180 == angle(A, I, midpoint(E, F)) + angle(A, I, midpoint(E, F)) mod 360
By perpendicular_angle_conditions_v0 on F, midpoint(E, F), D we get angle(F, midpoint(E, F), D) == orientation(D, F, midpoint(E, F)) mod 360
By reverse_direction on center(Circle(C, D, E)), E we get 180 == direction(center(Circle(C, D, E)), E) - direction(E, center(Circle(C, D, E))) mod 360
By perpendicular_angle_conditions_v0 on midpoint(E, F), I, A we get angle(midpoint(E, F), I, A) == orientation(A, midpoint(E, F), I) mod 360
By radical_axis_definition_v0_r on F, Circle(C, D, E), Circle(B, F, G) we get F in radical_axis(Circle(B, F, G), Circle(C, D, E))
By reverse_direction on center(Circle(B, E, G)), E we get 180 == direction(center(Circle(B, E, G)), E) - direction(E, center(Circle(B, E, G))) mod 360
By internal_angle_bisector_definition_v0 on F, midpoint(E, F), E, I we get angle(F, I, midpoint(E, F)) == angle(midpoint(E, F), I, E) mod 360
By internal_angle_bisector_definition_v0 on E, midpoint(E, F), H, C we get angle(E, C, midpoint(E, F)) == angle(midpoint(E, F), C, H) mod 360
By perpendicular_lines_draw_intersection on f, Line(E, center(Circle(D, E, G))) we get exists(line_intersection(f, Line(E, center(Circle(D, E, G)))))
By perpendicular_angle_conditions_v0 on E, midpoint(E, F), I we get angle(E, midpoint(E, F), I) == orientation(E, midpoint(E, F), I) mod 360
By internal_angle_bisector_definition_v0_r on D, E, D, center(Circle(D, E, G)) we get Line(E, center(Circle(D, E, G))) == internal_angle_bisector(D, center(Circle(D, E, G)), D)
By internal_angle_bisector_definition_v0 on H, midpoint(E, F), E, C we get angle(H, C, midpoint(E, F)) == angle(midpoint(E, F), C, E) mod 360
By internal_angle_bisector_definition_v0 on I, midpoint(E, F), I, D we get angle(I, D, midpoint(E, F)) == angle(midpoint(E, F), D, I) mod 360
By internal_angle_bisector_definition_v0 on J, midpoint(E, F), F, I we get angle(J, I, midpoint(E, F)) == angle(midpoint(E, F), I, F) mod 360
By internal_angle_bisector_definition_v0 on D, midpoint(E, F), D, C we get angle(D, C, midpoint(E, F)) == angle(midpoint(E, F), C, D) mod 360
By reverse_direction on center(Circle(B, E, G)), B we get 180 == direction(center(Circle(B, E, G)), B) - direction(B, center(Circle(B, E, G))) mod 360
By reverse_direction on center(Circle(B, E, G)), G we get 180 == direction(center(Circle(B, E, G)), G) - direction(G, center(Circle(B, E, G))) mod 360
By collinear_definition on C, midpoint(E, F), I we get midpoint(E, F) in Line(C, I), I in Line(C, midpoint(E, F)), Line(C, I) == Line(C, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), C, I) mod 360
By internal_angle_bisector_definition_v0 on C, midpoint(E, F), C, I we get angle(C, I, midpoint(E, F)) == angle(midpoint(E, F), I, C) mod 360
By internal_angle_bisector_definition_v0 on G, midpoint(E, F), F, I we get angle(G, I, midpoint(E, F)) == angle(midpoint(E, F), I, F) mod 360
By perpendicular_angle_conditions_v0 on I, midpoint(E, F), F we get angle(I, midpoint(E, F), F) == orientation(F, I, midpoint(E, F)) mod 360
By perpendicular_angle_conditions_v0 on center(Circle(B, E, G)), E, D we get angle(center(Circle(B, E, G)), E, D) == orientation(D, center(Circle(B, E, G)), E) mod 360
By internal_angle_bisector_definition_v0_r on E, midpoint(E, F), E, F we get internal_angle_bisector(E, F, E) == Line(F, midpoint(E, F))
By perpendicular_angle_conditions_v0 on E, midpoint(E, F), D we get angle(E, midpoint(E, F), D) == orientation(D, E, midpoint(E, F)) mod 360
By perpendicular_angle_conditions_v0 on C, midpoint(E, F), E we get angle(C, midpoint(E, F), E) == orientation(C, midpoint(E, F), E) mod 360
By reverse_direction on center(Circle(C, D, E)), J we get 180 == direction(center(Circle(C, D, E)), J) - direction(J, center(Circle(C, D, E))) mod 360
By collinear_definition on C, midpoint(E, F), D we get midpoint(E, F) in Line(C, D), D in Line(C, midpoint(E, F)), Line(C, D) == Line(C, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), C, D) mod 360
By internal_angle_bisector_definition_v0 on H, midpoint(E, F), B, C we get angle(H, C, midpoint(E, F)) == angle(midpoint(E, F), C, B) mod 360
By internal_angle_bisector_definition_v0 on E, midpoint(E, F), F, D we get angle(E, D, midpoint(E, F)) == angle(midpoint(E, F), D, F) mod 360
By collinear_definition on D, midpoint(E, F), I we get midpoint(E, F) in Line(D, I), I in Line(D, midpoint(E, F)), Line(D, I) == Line(D, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), D, I) mod 360
By internal_angle_bisector_definition_v0 on B, midpoint(E, F), F, C we get angle(B, C, midpoint(E, F)) == angle(midpoint(E, F), C, F) mod 360
By reverse_direction on center(Circle(C, D, E)), C we get 180 == direction(center(Circle(C, D, E)), C) - direction(C, center(Circle(C, D, E))) mod 360
By internal_angle_bisector_definition_v0 on F, midpoint(E, F), E, D we get angle(F, D, midpoint(E, F)) == angle(midpoint(E, F), D, E) mod 360
By perpendicular_angle_conditions_v0 on D, midpoint(E, F), F we get angle(D, midpoint(E, F), F) == orientation(D, midpoint(E, F), F) mod 360
By internal_angle_bisector_definition_v0 on F, midpoint(E, F), G, I we get angle(F, I, midpoint(E, F)) == angle(midpoint(E, F), I, G) mod 360
By radical_axis_definition_v0_r on G, Circle(B, F, G), Circle(D, E, G) we get G in radical_axis(Circle(B, F, G), Circle(D, E, G))
By perpendicular_angle_conditions_v0 on E, midpoint(E, F), C we get angle(E, midpoint(E, F), C) == orientation(C, E, midpoint(E, F)) mod 360
By internal_angle_bisector_definition_v0_r on E, C, F, center(Circle(C, D, E)) we get Line(C, center(Circle(C, D, E))) == internal_angle_bisector(E, center(Circle(C, D, E)), F)
By internal_angle_bisector_definition_v0 on A, midpoint(E, F), B, C we get angle(A, C, midpoint(E, F)) == angle(midpoint(E, F), C, B) mod 360
By reverse_direction on center(Circle(C, D, E)), D we get 180 == direction(center(Circle(C, D, E)), D) - direction(D, center(Circle(C, D, E))) mod 360
By internal_angle_bisector_definition_v0_r on E, D, E, center(Circle(D, E, G)) we get Line(D, center(Circle(D, E, G))) == internal_angle_bisector(E, center(Circle(D, E, G)), E)
By perpendicular_angle_conditions_v0 on B, E, center(Circle(D, E, G)) we get angle(B, E, center(Circle(D, E, G))) == orientation(B, E, center(Circle(D, E, G))) mod 360
By collinear_definition on I, D, midpoint(E, F) we get D in Line(I, midpoint(E, F)), midpoint(E, F) in Line(D, I), Line(D, I) == Line(I, midpoint(E, F)), 0 == 2 * angle(D, I, midpoint(E, F)) mod 360
By internal_angle_bisector_definition_v0 on D, midpoint(E, F), D, I we get angle(D, I, midpoint(E, F)) == angle(midpoint(E, F), I, D) mod 360
By collinear_definition on D, I, midpoint(E, F) we get I in Line(D, midpoint(E, F)), midpoint(E, F) in Line(D, I), Line(D, I) == Line(D, midpoint(E, F)), 0 == 2 * angle(I, D, midpoint(E, F)) mod 360
By collinear_definition on C, D, midpoint(E, F) we get D in Line(C, midpoint(E, F)), midpoint(E, F) in Line(C, D), Line(C, D) == Line(C, midpoint(E, F)), 0 == 2 * angle(D, C, midpoint(E, F)) mod 360
By perpendicular_angle_conditions_v0 on C, midpoint(E, F), F we get angle(C, midpoint(E, F), F) == orientation(C, midpoint(E, F), F) mod 360
By perpendicular_angle_conditions_v0 on D, midpoint(E, F), E we get angle(D, midpoint(E, F), E) == orientation(D, midpoint(E, F), E) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(E, F), F, midpoint(E, F), E we get Line(E, F) == internal_angle_bisector(midpoint(E, F), E, midpoint(E, F))
By perpendicular_angle_conditions_v0 on I, midpoint(E, F), E we get angle(I, midpoint(E, F), E) == orientation(E, I, midpoint(E, F)) mod 360
By internal_angle_bisector_definition_v0 on F, midpoint(E, F), J, I we get angle(F, I, midpoint(E, F)) == angle(midpoint(E, F), I, J) mod 360
By collinear_definition on I, midpoint(E, F), D we get midpoint(E, F) in Line(D, I), D in Line(I, midpoint(E, F)), Line(D, I) == Line(I, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), I, D) mod 360
By internal_angle_bisector_definition_v0 on B, midpoint(E, F), A, C we get angle(B, C, midpoint(E, F)) == angle(midpoint(E, F), C, A) mod 360
By internal_angle_bisector_definition_v0_r on F, C, E, J we get Line(C, J) == internal_angle_bisector(E, J, F)
By internal_angle_bisector_definition_v0 on C, midpoint(E, F), C, D we get angle(C, D, midpoint(E, F)) == angle(midpoint(E, F), D, C) mod 360
By internal_angle_bisector_definition_v0 on E, midpoint(E, F), A, C we get angle(E, C, midpoint(E, F)) == angle(midpoint(E, F), C, A) mod 360
By internal_angle_bisector_definition_v0_r on F, E, F, midpoint(E, F) we get Line(E, midpoint(E, F)) == internal_angle_bisector(F, midpoint(E, F), F)
By internal_angle_bisector_definition_v0 on A, midpoint(E, F), E, C we get angle(A, C, midpoint(E, F)) == angle(midpoint(E, F), C, E) mod 360
By internal_angle_bisector_definition_v0_r on C, D, C, center(Circle(C, D, E)) we get Line(D, center(Circle(C, D, E))) == internal_angle_bisector(C, center(Circle(C, D, E)), C)
By internal_angle_bisector_definition_v0 on E, midpoint(E, F), F, I we get angle(E, I, midpoint(E, F)) == angle(midpoint(E, F), I, F) mod 360
By internal_angle_bisector_definition_v0 on F, midpoint(E, F), E, C we get angle(F, C, midpoint(E, F)) == angle(midpoint(E, F), C, E) mod 360
By perpendicular_lines_draw_intersection on Line(D, E), Line(E, center(Circle(B, E, G))) we get exists(line_intersection(Line(D, E), Line(E, center(Circle(B, E, G)))))
By right_triangle_circumcenter_v1 on A, J, C we get midpoint(A, C) == circumcenter(A, C, J)
By angle_to_center on G, line_circle_tangent_point(Line(D, F), Circle(B, F, G)), B, Circle(B, F, G) we get angle(G, center(Circle(B, F, G)), B) == 2 * angle(G, line_circle_tangent_point(Line(D, F), Circle(B, F, G)), B) mod 360
By angle_to_center on B, line_circle_tangent_point(Line(D, F), Circle(B, F, G)), G, Circle(B, F, G) we get angle(B, center(Circle(B, F, G)), G) == 2 * angle(B, line_circle_tangent_point(Line(D, F), Circle(B, F, G)), G) mod 360
By altitude_definition on A, C, I, Line(A, I) we get Line(A, I) == altitude(A, C, I)
By collinear_definition on midpoint(E, F), C, D we get C in Line(D, midpoint(E, F)), D in Line(C, midpoint(E, F)), Line(C, midpoint(E, F)) == Line(D, midpoint(E, F)), 0 == 2 * angle(C, midpoint(E, F), D) mod 360
By isosceles_triangle_properties on center(Circle(C, D, E)), E, F we get distance(E, center(Circle(C, D, E))) == distance(F, center(Circle(C, D, E))), angle(E, F, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), E, F) mod 360
By isosceles_triangle_properties on center(Circle(C, D, E)), C, E we get distance(C, center(Circle(C, D, E))) == distance(E, center(Circle(C, D, E))), angle(C, E, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, E) mod 360
By power_of_a_point_definition on midpoint(E, F), D, C, Circle(C, D, E) we get log(power_of_a_point(midpoint(E, F), Circle(C, D, E))) == log(distance(D, midpoint(E, F))) + log(distance(C, midpoint(E, F)))
By sas_anti_congruence on C, center(Circle(C, D, E)), J, J, center(Circle(C, D, E)), C we get anti_congruent_triangles(C, J, center(Circle(C, D, E)), J, C, center(Circle(C, D, E)))
By isosceles_triangle_properties on center(Circle(C, D, E)), J, F we get distance(F, center(Circle(C, D, E))) == distance(J, center(Circle(C, D, E))), angle(J, F, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), J, F) mod 360
By sas_anti_congruence on F, center(Circle(C, D, E)), D, D, center(Circle(C, D, E)), F we get anti_congruent_triangles(D, F, center(Circle(C, D, E)), F, D, center(Circle(C, D, E)))
By concyclic_definition_1 on I, A, D, F we get Circle(A, D, F) == Circle(A, D, I)
By concyclic_definition_1 on D, I, A, F we get Circle(A, D, I) == Circle(A, F, I)
By isosceles_triangle_properties on center(Circle(D, E, G)), G, E we get distance(E, center(Circle(D, E, G))) == distance(G, center(Circle(D, E, G))), angle(G, E, center(Circle(D, E, G))) == angle(center(Circle(D, E, G)), G, E) mod 360
By altitude_definition on C, D, J, Line(C, J) we get Line(C, J) == altitude(C, D, J)
By collinear_definition on midpoint(E, F), D, I we get D in Line(I, midpoint(E, F)), I in Line(D, midpoint(E, F)), Line(D, midpoint(E, F)) == Line(I, midpoint(E, F)), 0 == 2 * angle(D, midpoint(E, F), I) mod 360
By concyclic_definition_1 on A, I, D, F we get Circle(A, D, I) == Circle(D, F, I)
By altitude_definition on center(Circle(D, E, G)), B, E, Line(E, center(Circle(D, E, G))) we get Line(E, center(Circle(D, E, G))) == altitude(center(Circle(D, E, G)), B, E)
By altitude_definition on A, midpoint(E, F), D, Line(A, I) we get Line(A, I) == altitude(A, D, midpoint(E, F))
By isosceles_triangle_properties on center(Circle(C, D, E)), D, E we get distance(D, center(Circle(C, D, E))) == distance(E, center(Circle(C, D, E))), angle(D, E, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), D, E) mod 360
By altitude_definition on C, E, center(Circle(D, E, G)), f we get f == altitude(C, E, center(Circle(D, E, G)))
By altitude_definition on A, C, D, Line(A, I) we get Line(A, I) == altitude(A, C, D)
By altitude_definition on C, midpoint(E, F), E, j we get j == altitude(C, E, midpoint(E, F))
By altitude_definition on center(Circle(B, E, G)), E, D, Line(E, center(Circle(B, E, G))) we get Line(E, center(Circle(B, E, G))) == altitude(center(Circle(B, E, G)), D, E)
By concyclic_definition_1 on A, F, I, D we get Circle(A, F, I) == Circle(D, F, I)
By altitude_definition on E, D, midpoint(E, F), Line(E, F) we get Line(E, F) == altitude(E, D, midpoint(E, F))
By isosceles_triangle_properties on center(Circle(C, D, E)), E, J we get distance(E, center(Circle(C, D, E))) == distance(J, center(Circle(C, D, E))), angle(E, J, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), E, J) mod 360
By altitude_definition on I, F, midpoint(E, F), j we get j == altitude(I, F, midpoint(E, F))
By altitude_definition on F, D, midpoint(E, F), Line(E, F) we get Line(E, F) == altitude(F, D, midpoint(E, F))
By altitude_definition on C, F, midpoint(E, F), j we get j == altitude(C, F, midpoint(E, F))
By altitude_definition on F, C, midpoint(E, F), Line(E, F) we get Line(E, F) == altitude(F, C, midpoint(E, F))
By isosceles_triangle_properties on center(Circle(B, E, G)), B, G we get distance(B, center(Circle(B, E, G))) == distance(G, center(Circle(B, E, G))), angle(B, G, center(Circle(B, E, G))) == angle(center(Circle(B, E, G)), B, G) mod 360
By altitude_definition on A, I, midpoint(E, F), Line(A, I) we get Line(A, I) == altitude(A, I, midpoint(E, F))
By altitude_definition on E, C, midpoint(E, F), Line(E, F) we get Line(E, F) == altitude(E, C, midpoint(E, F))
By sas_anti_congruence on J, center(Circle(C, D, E)), C, C, center(Circle(C, D, E)), J we get anti_congruent_triangles(C, J, center(Circle(C, D, E)), J, C, center(Circle(C, D, E)))
By collinear_definition on midpoint(E, F), C, I we get C in Line(I, midpoint(E, F)), I in Line(C, midpoint(E, F)), Line(C, midpoint(E, F)) == Line(I, midpoint(E, F)), 0 == 2 * angle(C, midpoint(E, F), I) mod 360
By altitude_definition on center(Circle(D, E, G)), B, C, Line(E, center(Circle(D, E, G))) we get Line(E, center(Circle(D, E, G))) == altitude(center(Circle(D, E, G)), B, C)
By isosceles_triangle_properties on center(Circle(C, D, E)), C, F we get distance(C, center(Circle(C, D, E))) == distance(F, center(Circle(C, D, E))), angle(C, F, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, F) mod 360
By isosceles_triangle_altitude_v3 on center(Circle(C, D, E)), F, E we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, center(Circle(C, D, E)), F), perpendicular_line(center(Circle(C, D, E)), Line(E, F)))
By altitude_definition on E, midpoint(E, F), I, Line(E, F) we get Line(E, F) == altitude(E, I, midpoint(E, F))
By isosceles_triangle_properties on center(Circle(C, D, E)), C, J we get distance(C, center(Circle(C, D, E))) == distance(J, center(Circle(C, D, E))), angle(C, J, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, J) mod 360
By altitude_definition on D, I, A, j we get j == altitude(D, A, I)
By sas_anti_congruence on E, center(Circle(B, E, G)), G, G, center(Circle(B, E, G)), E we get anti_congruent_triangles(E, G, center(Circle(B, E, G)), G, E, center(Circle(B, E, G)))
By sas_anti_congruence on E, center(Circle(D, E, G)), G, G, center(Circle(D, E, G)), E we get anti_congruent_triangles(E, G, center(Circle(D, E, G)), G, E, center(Circle(D, E, G)))
By concyclic_definition_1 on D, F, A, I we get Circle(A, D, F) == Circle(A, F, I)
By sas_anti_congruence on F, center(Circle(C, D, E)), J, J, center(Circle(C, D, E)), F we get anti_congruent_triangles(F, J, center(Circle(C, D, E)), J, F, center(Circle(C, D, E)))
By altitude_definition on A, C, J, h we get h == altitude(A, C, J)
By altitude_definition on B, E, center(Circle(D, E, G)), f we get f == altitude(B, E, center(Circle(D, E, G)))
By sas_anti_congruence on B, center(Circle(B, E, G)), G, G, center(Circle(B, E, G)), B we get anti_congruent_triangles(B, G, center(Circle(B, E, G)), G, B, center(Circle(B, E, G)))
By altitude_definition on C, J, A, Line(C, J) we get Line(C, J) == altitude(C, A, J)
By altitude_definition on A, midpoint(E, F), C, Line(A, I) we get Line(A, I) == altitude(A, C, midpoint(E, F))
By altitude_definition on D, E, midpoint(E, F), j we get j == altitude(D, E, midpoint(E, F))
By isosceles_triangle_properties on center(Circle(C, D, E)), E, C we get distance(C, center(Circle(C, D, E))) == distance(E, center(Circle(C, D, E))), angle(E, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), E, C) mod 360
By isosceles_triangle_properties on center(Circle(C, D, E)), J, E we get distance(E, center(Circle(C, D, E))) == distance(J, center(Circle(C, D, E))), angle(J, E, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), J, E) mod 360
By isosceles_triangle_properties on center(Circle(C, D, E)), F, J we get distance(F, center(Circle(C, D, E))) == distance(J, center(Circle(C, D, E))), angle(F, J, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), F, J) mod 360
By sas_anti_congruence on E, center(Circle(C, D, E)), C, C, center(Circle(C, D, E)), E we get anti_congruent_triangles(C, E, center(Circle(C, D, E)), E, C, center(Circle(C, D, E)))
By concyclic_definition_1 on A, F, D, I we get Circle(A, D, F) == Circle(D, F, I)
By isosceles_triangle_properties on center(Circle(C, D, E)), F, D we get distance(D, center(Circle(C, D, E))) == distance(F, center(Circle(C, D, E))), angle(F, D, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), F, D) mod 360
By isosceles_triangle_properties on center(Circle(C, D, E)), J, C we get distance(C, center(Circle(C, D, E))) == distance(J, center(Circle(C, D, E))), angle(J, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), J, C) mod 360
By isosceles_triangle_properties on center(Circle(C, D, E)), E, D we get distance(D, center(Circle(C, D, E))) == distance(E, center(Circle(C, D, E))), angle(E, D, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), E, D) mod 360
By sas_anti_congruence on G, center(Circle(D, E, G)), D, D, center(Circle(D, E, G)), G we get anti_congruent_triangles(D, G, center(Circle(D, E, G)), G, D, center(Circle(D, E, G)))
By sas_anti_congruence on F, center(Circle(C, D, E)), C, C, center(Circle(C, D, E)), F we get anti_congruent_triangles(C, F, center(Circle(C, D, E)), F, C, center(Circle(C, D, E)))
By collinear_definition on midpoint(E, F), I, C we get I in Line(C, midpoint(E, F)), C in Line(I, midpoint(E, F)), Line(C, midpoint(E, F)) == Line(I, midpoint(E, F)), 0 == 2 * angle(I, midpoint(E, F), C) mod 360
By altitude_definition on D, center(Circle(B, E, G)), E, Line(D, E) we get Line(D, E) == altitude(D, E, center(Circle(B, E, G)))
By altitude_definition on C, I, A, j we get j == altitude(C, A, I)
By altitude_definition on D, F, midpoint(E, F), j we get j == altitude(D, F, midpoint(E, F))
By isosceles_triangle_properties on center(Circle(C, D, E)), D, F we get distance(D, center(Circle(C, D, E))) == distance(F, center(Circle(C, D, E))), angle(D, F, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), D, F) mod 360
By isosceles_triangle_properties on center(Circle(B, E, G)), E, G we get distance(E, center(Circle(B, E, G))) == distance(G, center(Circle(B, E, G))), angle(E, G, center(Circle(B, E, G))) == angle(center(Circle(B, E, G)), E, G) mod 360
By collinear_definition on midpoint(E, F), I, D we get I in Line(D, midpoint(E, F)), D in Line(I, midpoint(E, F)), Line(D, midpoint(E, F)) == Line(I, midpoint(E, F)), 0 == 2 * angle(I, midpoint(E, F), D) mod 360
By sas_anti_congruence on C, center(Circle(C, D, E)), E, E, center(Circle(C, D, E)), C we get anti_congruent_triangles(C, E, center(Circle(C, D, E)), E, C, center(Circle(C, D, E)))
By isosceles_triangle_properties on center(Circle(B, E, G)), G, B we get distance(B, center(Circle(B, E, G))) == distance(G, center(Circle(B, E, G))), angle(G, B, center(Circle(B, E, G))) == angle(center(Circle(B, E, G)), G, B) mod 360
By sas_anti_congruence on E, center(Circle(C, D, E)), F, F, center(Circle(C, D, E)), E we get anti_congruent_triangles(E, F, center(Circle(C, D, E)), F, E, center(Circle(C, D, E)))
By sas_anti_congruence on E, center(Circle(C, D, E)), D, D, center(Circle(C, D, E)), E we get anti_congruent_triangles(D, E, center(Circle(C, D, E)), E, D, center(Circle(C, D, E)))
By sas_anti_congruence on C, center(Circle(C, D, E)), F, F, center(Circle(C, D, E)), C we get anti_congruent_triangles(C, F, center(Circle(C, D, E)), F, C, center(Circle(C, D, E)))
By isosceles_triangle_properties on center(Circle(C, D, E)), F, C we get distance(C, center(Circle(C, D, E))) == distance(F, center(Circle(C, D, E))), angle(F, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), F, C) mod 360
By isosceles_triangle_properties on center(Circle(D, E, G)), D, G we get distance(D, center(Circle(D, E, G))) == distance(G, center(Circle(D, E, G))), angle(D, G, center(Circle(D, E, G))) == angle(center(Circle(D, E, G)), D, G) mod 360
By sas_anti_congruence on J, center(Circle(C, D, E)), D, D, center(Circle(C, D, E)), J we get anti_congruent_triangles(D, J, center(Circle(C, D, E)), J, D, center(Circle(C, D, E)))
By altitude_definition on C, A, D, Line(C, J) we get Line(C, J) == altitude(C, A, D)
By altitude_definition on center(Circle(D, E, G)), E, C, Line(E, center(Circle(D, E, G))) we get Line(E, center(Circle(D, E, G))) == altitude(center(Circle(D, E, G)), C, E)
By isosceles_triangle_properties on center(Circle(C, D, E)), D, J we get distance(D, center(Circle(C, D, E))) == distance(J, center(Circle(C, D, E))), angle(D, J, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), D, J) mod 360
By altitude_definition on F, I, midpoint(E, F), Line(E, F) we get Line(E, F) == altitude(F, I, midpoint(E, F))
By sas_anti_congruence on G, center(Circle(D, E, G)), E, E, center(Circle(D, E, G)), G we get anti_congruent_triangles(E, G, center(Circle(D, E, G)), G, E, center(Circle(D, E, G)))
By altitude_definition on A, D, I, Line(A, I) we get Line(A, I) == altitude(A, D, I)
By altitude_definition on D, C, J, h we get h == altitude(D, C, J)
By altitude_definition on I, midpoint(E, F), E, j we get j == altitude(I, E, midpoint(E, F))
By sas_anti_congruence on D, center(Circle(C, D, E)), J, J, center(Circle(C, D, E)), D we get anti_congruent_triangles(D, J, center(Circle(C, D, E)), J, D, center(Circle(C, D, E)))
By sas_anti_congruence on G, center(Circle(B, E, G)), E, E, center(Circle(B, E, G)), G we get anti_congruent_triangles(E, G, center(Circle(B, E, G)), G, E, center(Circle(B, E, G)))
By altitude_definition on midpoint(E, F), A, I, j we get j == altitude(midpoint(E, F), A, I)
By sas_anti_congruence on F, center(Circle(C, D, E)), E, E, center(Circle(C, D, E)), F we get anti_congruent_triangles(E, F, center(Circle(C, D, E)), F, E, center(Circle(C, D, E)))
By isosceles_triangle_properties on center(Circle(C, D, E)), F, E we get distance(E, center(Circle(C, D, E))) == distance(F, center(Circle(C, D, E))), angle(F, E, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), F, E) mod 360
By isosceles_triangle_properties on center(Circle(D, E, G)), E, G we get distance(E, center(Circle(D, E, G))) == distance(G, center(Circle(D, E, G))), angle(E, G, center(Circle(D, E, G))) == angle(center(Circle(D, E, G)), E, G) mod 360
By isosceles_triangle_properties on center(Circle(D, E, G)), G, D we get distance(D, center(Circle(D, E, G))) == distance(G, center(Circle(D, E, G))), angle(G, D, center(Circle(D, E, G))) == angle(center(Circle(D, E, G)), G, D) mod 360
By sas_anti_congruence on D, center(Circle(D, E, G)), G, G, center(Circle(D, E, G)), D we get anti_congruent_triangles(D, G, center(Circle(D, E, G)), G, D, center(Circle(D, E, G)))
By isosceles_triangle_properties on center(Circle(B, E, G)), G, E we get distance(E, center(Circle(B, E, G))) == distance(G, center(Circle(B, E, G))), angle(G, E, center(Circle(B, E, G))) == angle(center(Circle(B, E, G)), G, E) mod 360
By sas_anti_congruence on J, center(Circle(C, D, E)), E, E, center(Circle(C, D, E)), J we get anti_congruent_triangles(E, J, center(Circle(C, D, E)), J, E, center(Circle(C, D, E)))
By sas_anti_congruence on D, center(Circle(C, D, E)), E, E, center(Circle(C, D, E)), D we get anti_congruent_triangles(D, E, center(Circle(C, D, E)), E, D, center(Circle(C, D, E)))
By sas_anti_congruence on J, center(Circle(C, D, E)), F, F, center(Circle(C, D, E)), J we get anti_congruent_triangles(F, J, center(Circle(C, D, E)), J, F, center(Circle(C, D, E)))
By collinear_definition on midpoint(E, F), D, C we get D in Line(C, midpoint(E, F)), C in Line(D, midpoint(E, F)), Line(C, midpoint(E, F)) == Line(D, midpoint(E, F)), 0 == 2 * angle(D, midpoint(E, F), C) mod 360
By isosceles_triangle_properties on center(Circle(C, D, E)), J, D we get distance(D, center(Circle(C, D, E))) == distance(J, center(Circle(C, D, E))), angle(J, D, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), J, D) mod 360
By sas_anti_congruence on D, center(Circle(C, D, E)), F, F, center(Circle(C, D, E)), D we get anti_congruent_triangles(D, F, center(Circle(C, D, E)), F, D, center(Circle(C, D, E)))
By sas_anti_congruence on E, center(Circle(C, D, E)), J, J, center(Circle(C, D, E)), E we get anti_congruent_triangles(E, J, center(Circle(C, D, E)), J, E, center(Circle(C, D, E)))
By sas_anti_congruence on G, center(Circle(B, E, G)), B, B, center(Circle(B, E, G)), G we get anti_congruent_triangles(B, G, center(Circle(B, E, G)), G, B, center(Circle(B, E, G)))
By isosceles_triangle_altitude_v3 on center(Circle(C, D, E)), E, F we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, center(Circle(C, D, E)), F), perpendicular_line(center(Circle(C, D, E)), Line(E, F)))
By sas_congruence on C, center(Circle(C, D, E)), E, F, center(Circle(C, D, E)), C we get congruent_triangles(C, E, center(Circle(C, D, E)), F, C, center(Circle(C, D, E)))
By sas_congruence on E, center(Circle(C, D, E)), D, D, center(Circle(C, D, E)), F we get congruent_triangles(D, E, center(Circle(C, D, E)), F, D, center(Circle(C, D, E)))
By sas_anti_congruence on E, center(Circle(C, D, E)), C, F, center(Circle(C, D, E)), C we get anti_congruent_triangles(C, E, center(Circle(C, D, E)), C, F, center(Circle(C, D, E)))
By sas_anti_congruence on D, center(Circle(C, D, E)), F, D, center(Circle(C, D, E)), E we get anti_congruent_triangles(D, E, center(Circle(C, D, E)), D, F, center(Circle(C, D, E)))
By sas_anti_congruence on D, center(Circle(C, D, E)), E, D, center(Circle(C, D, E)), F we get anti_congruent_triangles(D, E, center(Circle(C, D, E)), D, F, center(Circle(C, D, E)))
By sas_congruence on F, center(Circle(C, D, E)), C, C, center(Circle(C, D, E)), E we get congruent_triangles(C, E, center(Circle(C, D, E)), F, C, center(Circle(C, D, E)))
By sas_congruence on D, center(Circle(C, D, E)), E, F, center(Circle(C, D, E)), D we get congruent_triangles(D, E, center(Circle(C, D, E)), F, D, center(Circle(C, D, E)))
By sas_congruence on F, center(Circle(C, D, E)), D, D, center(Circle(C, D, E)), E we get congruent_triangles(D, E, center(Circle(C, D, E)), F, D, center(Circle(C, D, E)))
By sas_congruence on C, center(Circle(C, D, E)), F, E, center(Circle(C, D, E)), C we get congruent_triangles(C, E, center(Circle(C, D, E)), F, C, center(Circle(C, D, E)))
By sas_anti_congruence on E, center(Circle(C, D, E)), D, F, center(Circle(C, D, E)), D we get anti_congruent_triangles(D, E, center(Circle(C, D, E)), D, F, center(Circle(C, D, E)))
By sas_congruence on D, center(Circle(C, D, E)), F, E, center(Circle(C, D, E)), D we get congruent_triangles(D, E, center(Circle(C, D, E)), F, D, center(Circle(C, D, E)))
By sas_anti_congruence on C, center(Circle(C, D, E)), E, C, center(Circle(C, D, E)), F we get anti_congruent_triangles(C, E, center(Circle(C, D, E)), C, F, center(Circle(C, D, E)))
By sas_anti_congruence on F, center(Circle(C, D, E)), D, E, center(Circle(C, D, E)), D we get anti_congruent_triangles(D, E, center(Circle(C, D, E)), D, F, center(Circle(C, D, E)))
By sas_congruence on E, center(Circle(C, D, E)), C, C, center(Circle(C, D, E)), F we get congruent_triangles(C, E, center(Circle(C, D, E)), F, C, center(Circle(C, D, E)))
By sas_anti_congruence on F, center(Circle(C, D, E)), C, E, center(Circle(C, D, E)), C we get anti_congruent_triangles(C, E, center(Circle(C, D, E)), C, F, center(Circle(C, D, E)))
By sas_anti_congruence on C, center(Circle(C, D, E)), F, C, center(Circle(C, D, E)), E we get anti_congruent_triangles(C, E, center(Circle(C, D, E)), C, F, center(Circle(C, D, E)))
By incenter_concurrency on J, I, F we get incenter(F, I, J) in internal_angle_bisector(F, I, J), incenter(F, I, J) in internal_angle_bisector(I, F, J), incenter(F, I, J) in internal_angle_bisector(F, J, I)
By power_of_a_point_definition on midpoint(E, F), C, I, Circle(A, C, I) we get log(power_of_a_point(midpoint(E, F), Circle(A, C, I))) == log(distance(C, midpoint(E, F))) + log(distance(I, midpoint(E, F)))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(Circle(C, D, E))), Line(D, F) we get concurrent(Line(D, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), k, Line(G, center(Circle(B, E, G))) we get concurrent(k, Line(F, G), Line(G, center(Circle(B, E, G))))
By concurrent_sufficient_conditions on Line(B, F), Line(B, center(Circle(B, E, G))), Line(A, B) we get concurrent(Line(A, B), Line(B, F), Line(B, center(Circle(B, E, G))))
By line_definition on I, orthocenter(D, E, I), altitude(I, D, E) we get altitude(I, D, E) == Line(I, orthocenter(D, E, I))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), j we get concurrent(j, Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(F, I), Line(F, center(Circle(C, D, E))) we get concurrent(g, Line(F, I), Line(F, center(Circle(C, D, E))))
By median_definition on center(Circle(C, D, E)), F, E, j we get j == median(center(Circle(C, D, E)), E, F)
By concurrent_sufficient_conditions on radical_axis(Circle(B, E, G), Circle(C, D, E)), f, Line(E, F) we get concurrent(f, Line(E, F), radical_axis(Circle(B, E, G), Circle(C, D, E)))
By concurrent_sufficient_conditions on g, Line(F, center(Circle(C, D, E))), Line(B, F) we get concurrent(g, Line(B, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, F), Line(F, center(Circle(C, D, E))), Line(D, F) we get concurrent(Line(B, F), Line(D, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, E, G))), i, Line(B, F) we get concurrent(i, Line(B, F), Line(B, center(Circle(B, E, G))))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(Circle(C, D, E))), Line(F, G) we get concurrent(Line(F, G), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), k, Line(E, F) we get concurrent(k, Line(E, F), Line(E, center(Circle(C, D, E))))
By line_definition on G, orthocenter(D, E, I), i we get i == Line(G, orthocenter(D, E, I))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, J), g we get concurrent(g, Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, E, G))), i, Line(G, center(Circle(D, E, G))) we get concurrent(i, Line(G, center(Circle(B, E, G))), Line(G, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, I), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, J), Line(C, J), Line(J, center(Circle(C, D, E))) we get concurrent(Line(C, J), Line(F, J), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), i, Line(G, center(Circle(D, E, G))) we get concurrent(i, Line(F, G), Line(G, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on k, Line(E, center(Circle(C, D, E))), radical_axis(Circle(B, E, G), Circle(C, D, E)) we get concurrent(k, radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(Circle(B, E, G), Circle(C, D, E)), f, k we get concurrent(f, k, radical_axis(Circle(B, E, G), Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, G), g we get concurrent(g, Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(B, F), Line(E, F) we get concurrent(Line(B, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(J, center(Circle(C, D, E))), j, Line(F, center(Circle(C, D, E))) we get concurrent(j, Line(F, center(Circle(C, D, E))), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, i, Line(D, center(Circle(D, E, G))) we get concurrent(h, i, Line(D, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(B, F), Line(A, B), Line(B, center(Circle(B, E, G))) we get concurrent(Line(A, B), Line(B, F), Line(B, center(Circle(B, E, G))))
By concurrent_sufficient_conditions on j, Line(D, center(Circle(D, E, G))), i we get concurrent(i, j, Line(D, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(F, G), k, Line(G, center(Circle(D, E, G))) we get concurrent(k, Line(F, G), Line(G, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), f, Line(E, F) we get concurrent(f, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, G), Line(B, F) we get concurrent(Line(B, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), radical_axis(Circle(B, E, G), Circle(C, D, E)), f we get concurrent(f, radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(G, center(Circle(D, E, G))), Line(G, center(Circle(B, E, G))) we get concurrent(i, Line(G, center(Circle(B, E, G))), Line(G, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(Circle(C, D, E))), Line(D, F) we get concurrent(Line(D, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, Line(G, center(Circle(B, E, G))), i we get concurrent(i, k, Line(G, center(Circle(B, E, G))))
By concurrent_sufficient_conditions on Line(J, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), j we get concurrent(j, Line(E, center(Circle(C, D, E))), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, Line(J, center(Circle(C, D, E))), Line(C, J) we get concurrent(k, Line(C, J), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, radical_axis(Circle(B, E, G), Circle(C, D, E)), f we get concurrent(f, k, radical_axis(Circle(B, E, G), Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), g, Line(E, F) we get concurrent(g, Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, radical_axis(Circle(B, E, G), Circle(C, D, E)), k we get concurrent(f, k, radical_axis(Circle(B, E, G), Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(B, F), Line(F, J), Line(F, center(Circle(C, D, E))) we get concurrent(Line(B, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(E, F), radical_axis(Circle(B, E, G), Circle(C, D, E)) we get concurrent(f, Line(E, F), radical_axis(Circle(B, E, G), Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, G), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(A, B), Line(B, center(Circle(B, E, G))) we get concurrent(i, Line(A, B), Line(B, center(Circle(B, E, G))))
By concurrent_sufficient_conditions on radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, F), f we get concurrent(f, Line(E, F), radical_axis(Circle(B, E, G), Circle(C, D, E)))
By concurrent_sufficient_conditions on i, k, Line(G, center(Circle(D, E, G))) we get concurrent(i, k, Line(G, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(B, F), Line(F, center(Circle(C, D, E))), Line(F, G) we get concurrent(Line(B, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, E, G))), Line(B, F), Line(A, B) we get concurrent(Line(A, B), Line(B, F), Line(B, center(Circle(B, E, G))))
By line_definition on D, center(Circle(D, E, G)), Line(D, E) we get Line(D, E) == Line(D, center(Circle(D, E, G)))
By concurrent_sufficient_conditions on radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(D, E), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, F) we get concurrent(f, Line(E, F), radical_axis(Circle(B, E, G), Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, J), Line(B, F) we get concurrent(Line(B, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, J), g, Line(F, center(Circle(C, D, E))) we get concurrent(g, Line(F, J), Line(F, center(Circle(C, D, E))))
By perpendicular_line_definition on F, Line(F, center(Circle(B, F, G))), Line(D, F) we get perpendicular_line(F, Line(D, F)) == Line(F, center(Circle(B, F, G)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), radical_axis(Circle(B, E, G), Circle(C, D, E)), k we get concurrent(k, radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(J, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, J), Line(D, F) we get concurrent(Line(D, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(C, D, E))), Line(F, G) we get concurrent(Line(E, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(Circle(C, D, E))), Line(D, F) we get concurrent(Line(D, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, E, G))), Line(F, G), k we get concurrent(k, Line(F, G), Line(G, center(Circle(B, E, G))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, E, G))), Line(F, G), Line(G, center(Circle(D, E, G))) we get concurrent(Line(F, G), Line(G, center(Circle(B, E, G))), Line(G, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on k, Line(F, J), Line(J, center(Circle(C, D, E))) we get concurrent(k, Line(F, J), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), g, Line(F, center(Circle(C, D, E))) we get concurrent(g, Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), k, radical_axis(Circle(B, E, G), Circle(C, D, E)) we get concurrent(k, Line(D, E), radical_axis(Circle(B, E, G), Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(G, center(Circle(D, E, G))), Line(F, G), Line(G, center(Circle(B, E, G))) we get concurrent(Line(F, G), Line(G, center(Circle(B, E, G))), Line(G, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(G, center(Circle(D, E, G))), Line(F, G), k we get concurrent(k, Line(F, G), Line(G, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(F, I), Line(B, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(B, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(C, D, E))), Line(F, J) we get concurrent(Line(E, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, Line(E, center(Circle(C, D, E))), f we get concurrent(f, k, Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(D, E), radical_axis(Circle(B, E, G), Circle(C, D, E)) we get concurrent(f, Line(D, E), radical_axis(Circle(B, E, G), Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, G), Line(B, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(B, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, E, G))), Line(G, center(Circle(D, E, G))), k we get concurrent(k, Line(G, center(Circle(B, E, G))), Line(G, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, I), Line(B, F) we get concurrent(Line(B, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(C, D, E))), g we get concurrent(g, Line(D, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, f, radical_axis(Circle(B, E, G), Circle(C, D, E)) we get concurrent(f, k, radical_axis(Circle(B, E, G), Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), j, Line(J, center(Circle(C, D, E))) we get concurrent(j, Line(F, center(Circle(C, D, E))), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on j, Line(D, center(Circle(D, E, G))), h we get concurrent(h, j, Line(D, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(D, E), f, radical_axis(Circle(B, E, G), Circle(C, D, E)) we get concurrent(f, Line(D, E), radical_axis(Circle(B, E, G), Circle(C, D, E)))
By concurrent_sufficient_conditions on g, Line(F, center(Circle(C, D, E))), Line(F, G) we get concurrent(g, Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, f, Line(E, center(Circle(C, D, E))) we get concurrent(f, k, Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), k, Line(D, E) we get concurrent(k, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, j, Line(D, center(Circle(D, E, G))) we get concurrent(i, j, Line(D, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(G, center(Circle(D, E, G))), Line(F, G), i we get concurrent(i, Line(F, G), Line(G, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on i, Line(G, center(Circle(B, E, G))), Line(F, G) we get concurrent(i, Line(F, G), Line(G, center(Circle(B, E, G))))
By concurrent_sufficient_conditions on Line(J, center(Circle(C, D, E))), Line(C, J), k we get concurrent(k, Line(C, J), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, Line(J, center(Circle(C, D, E))), Line(F, J) we get concurrent(k, Line(F, J), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(D, center(Circle(D, E, G))), j we get concurrent(i, j, Line(D, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(F, I), Line(E, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(D, center(Circle(D, E, G))), h we get concurrent(h, Line(D, F), Line(D, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By line_definition on center(Circle(B, E, G)), C, f we get f == Line(C, center(Circle(B, E, G)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))), j we get concurrent(j, Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By line_definition on B, center(Circle(B, E, G)), f we get f == Line(B, center(Circle(B, E, G)))
By concurrent_sufficient_conditions on h, Line(D, center(Circle(D, E, G))), j we get concurrent(h, j, Line(D, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on i, Line(B, center(Circle(B, E, G))), Line(B, F) we get concurrent(i, Line(B, F), Line(B, center(Circle(B, E, G))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, E, G))), k, i we get concurrent(i, k, Line(G, center(Circle(B, E, G))))
By concurrent_sufficient_conditions on Line(D, center(Circle(D, E, G))), h, Line(D, F) we get concurrent(h, Line(D, F), Line(D, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on k, Line(E, center(Circle(C, D, E))), Line(D, E) we get concurrent(k, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, F) we get concurrent(Line(E, F), radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, E, G))), k, Line(G, center(Circle(D, E, G))) we get concurrent(k, Line(G, center(Circle(B, E, G))), Line(G, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, I), Line(F, J) we get concurrent(Line(F, I), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(D, E, G))), j, Line(D, F) we get concurrent(j, Line(D, F), Line(D, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(J, center(Circle(C, D, E))), Line(F, J), Line(C, J) we get concurrent(Line(C, J), Line(F, J), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, J), Line(J, center(Circle(C, D, E))), h we get concurrent(h, Line(C, J), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(D, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, Line(F, G), Line(G, center(Circle(D, E, G))) we get concurrent(k, Line(F, G), Line(G, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, J), Line(F, I) we get concurrent(Line(F, I), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, j, Line(D, center(Circle(D, E, G))) we get concurrent(h, j, Line(D, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(D, F), h, Line(D, center(Circle(D, E, G))) we get concurrent(h, Line(D, F), Line(D, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on j, i, Line(D, center(Circle(D, E, G))) we get concurrent(i, j, Line(D, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on j, h, Line(D, center(Circle(D, E, G))) we get concurrent(h, j, Line(D, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(A, B), Line(B, F), Line(B, center(Circle(B, E, G))) we get concurrent(Line(A, B), Line(B, F), Line(B, center(Circle(B, E, G))))
By concurrent_sufficient_conditions on Line(D, F), i, Line(D, center(Circle(D, E, G))) we get concurrent(i, Line(D, F), Line(D, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(C, D, E))), Line(F, J) we get concurrent(Line(D, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on j, Line(D, center(Circle(D, E, G))), Line(D, F) we get concurrent(j, Line(D, F), Line(D, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(Circle(D, E, G))), i we get concurrent(i, Line(F, G), Line(G, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(J, center(Circle(C, D, E))), h, Line(C, J) we get concurrent(h, Line(C, J), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(F, center(Circle(C, D, E))), Line(F, I) we get concurrent(g, Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on j, Line(J, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))) we get concurrent(j, Line(E, center(Circle(C, D, E))), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(D, E) we get concurrent(f, Line(D, E), radical_axis(Circle(B, E, G), Circle(C, D, E)))
By concurrent_sufficient_conditions on k, Line(C, J), Line(J, center(Circle(C, D, E))) we get concurrent(k, Line(C, J), Line(J, center(Circle(C, D, E))))
By line_definition on B, orthocenter(D, E, I), i we get i == Line(B, orthocenter(D, E, I))
By concurrent_sufficient_conditions on f, k, radical_axis(Circle(B, E, G), Circle(C, D, E)) we get concurrent(f, k, radical_axis(Circle(B, E, G), Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, F), radical_axis(Circle(B, E, G), Circle(C, D, E)) we get concurrent(Line(E, F), radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(D, E, G))), h, j we get concurrent(h, j, Line(D, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(C, D, E))), Line(B, F) we get concurrent(Line(B, F), Line(D, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(D, E), k we get concurrent(k, Line(D, E), radical_axis(Circle(B, E, G), Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(A, B), Line(B, center(Circle(B, E, G))), Line(B, F) we get concurrent(Line(A, B), Line(B, F), Line(B, center(Circle(B, E, G))))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(J, center(Circle(C, D, E))), Line(C, J) we get concurrent(h, Line(C, J), Line(J, center(Circle(C, D, E))))
By line_definition on midpoint(E, F), center(Circle(C, D, E)), j we get j == Line(midpoint(E, F), center(Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(Circle(B, E, G))), Line(G, center(Circle(D, E, G))) we get concurrent(Line(F, G), Line(G, center(Circle(B, E, G))), Line(G, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(B, F), Line(F, center(Circle(C, D, E))), Line(F, J) we get concurrent(Line(B, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By line_definition on orthocenter(D, E, I), D, i we get i == Line(D, orthocenter(D, E, I))
By concurrent_sufficient_conditions on h, k, Line(J, center(Circle(C, D, E))) we get concurrent(h, k, Line(J, center(Circle(C, D, E))))
By line_definition on orthocenter(D, E, I), E, Line(E, F) we get Line(E, F) == Line(E, orthocenter(D, E, I))
By concurrent_sufficient_conditions on Line(C, J), h, Line(J, center(Circle(C, D, E))) we get concurrent(h, Line(C, J), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, E, G))), i, k we get concurrent(i, k, Line(G, center(Circle(B, E, G))))
By concurrent_sufficient_conditions on radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, center(Circle(C, D, E))), Line(D, E) we get concurrent(Line(D, E), radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, F), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, F), Line(D, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(B, F), Line(D, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(C, D, E))), radical_axis(Circle(B, E, G), Circle(C, D, E)) we get concurrent(Line(D, E), radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, F), g, Line(F, center(Circle(C, D, E))) we get concurrent(g, Line(B, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(D, E, G))), Line(G, center(Circle(B, E, G))), i we get concurrent(i, Line(G, center(Circle(B, E, G))), Line(G, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(F, J), Line(B, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(B, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(J, center(Circle(C, D, E))), Line(C, J), h we get concurrent(h, Line(C, J), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(D, E, G))), k, i we get concurrent(i, k, Line(G, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on f, Line(E, center(Circle(C, D, E))), radical_axis(Circle(B, E, G), Circle(C, D, E)) we get concurrent(f, radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(Circle(B, E, G), Circle(C, D, E)), k, f we get concurrent(f, k, radical_axis(Circle(B, E, G), Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, J), Line(F, G) we get concurrent(Line(F, G), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(C, J), Line(J, center(Circle(C, D, E))) we get concurrent(h, Line(C, J), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(Circle(C, D, E))), Line(B, F) we get concurrent(Line(B, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(Circle(B, E, G), Circle(C, D, E)), k, Line(E, F) we get concurrent(k, Line(E, F), radical_axis(Circle(B, E, G), Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(E, F), Line(B, F) we get concurrent(Line(B, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), g, Line(F, center(Circle(C, D, E))) we get concurrent(g, Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on j, Line(F, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))) we get concurrent(j, Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(C, D, E))), Line(F, G) we get concurrent(Line(D, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(C, D, E))), f we get concurrent(f, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(C, D, E))), g we get concurrent(g, Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, G), Line(D, F) we get concurrent(Line(D, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, J), Line(F, J), Line(J, center(Circle(C, D, E))) we get concurrent(Line(C, J), Line(F, J), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), g, Line(F, center(Circle(C, D, E))) we get concurrent(g, Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, F), k we get concurrent(k, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(Circle(B, E, G))), k we get concurrent(k, Line(F, G), Line(G, center(Circle(B, E, G))))
By concurrent_sufficient_conditions on j, Line(J, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))) we get concurrent(j, Line(F, center(Circle(C, D, E))), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), j, Line(D, center(Circle(D, E, G))) we get concurrent(j, Line(D, F), Line(D, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, F), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, F), radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, Line(G, center(Circle(B, E, G))), Line(G, center(Circle(D, E, G))) we get concurrent(k, Line(G, center(Circle(B, E, G))), Line(G, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on f, k, Line(E, center(Circle(C, D, E))) we get concurrent(f, k, Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), radical_axis(Circle(B, E, G), Circle(C, D, E)) we get concurrent(Line(D, E), Line(E, F), radical_axis(Circle(B, E, G), Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), j, Line(E, center(Circle(C, D, E))) we get concurrent(j, Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, F), radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(Circle(C, D, E))), Line(F, J) we get concurrent(Line(F, I), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(J, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))), j we get concurrent(j, Line(F, center(Circle(C, D, E))), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, J), Line(J, center(Circle(C, D, E))), k we get concurrent(k, Line(C, J), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(Circle(B, E, G), Circle(C, D, E)), f, Line(D, E) we get concurrent(f, Line(D, E), radical_axis(Circle(B, E, G), Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(C, D, E))), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(D, F), Line(B, F) we get concurrent(Line(B, F), Line(D, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(C, D, E))), k we get concurrent(k, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(G, center(Circle(D, E, G))), k we get concurrent(i, k, Line(G, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(D, F), Line(B, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(B, F), Line(D, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, F), f we get concurrent(f, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(J, center(Circle(C, D, E))), j we get concurrent(j, Line(F, center(Circle(C, D, E))), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, J), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, center(Circle(C, D, E))), f we get concurrent(f, radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, Line(E, F), Line(E, center(Circle(C, D, E))) we get concurrent(k, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, J), Line(E, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, Line(D, E), Line(E, center(Circle(C, D, E))) we get concurrent(k, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, J), Line(J, center(Circle(C, D, E))), k we get concurrent(k, Line(F, J), Line(J, center(Circle(C, D, E))))
By line_definition on center(Circle(C, D, E)), I, j we get j == Line(I, center(Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), f, radical_axis(Circle(B, E, G), Circle(C, D, E)) we get concurrent(f, radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(D, center(Circle(D, E, G))), h we get concurrent(h, i, Line(D, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on j, Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))) we get concurrent(j, Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(J, center(Circle(C, D, E))), k we get concurrent(h, k, Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(F, G), Line(G, center(Circle(D, E, G))) we get concurrent(i, Line(F, G), Line(G, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(C, J), Line(J, center(Circle(C, D, E))), Line(F, J) we get concurrent(Line(C, J), Line(F, J), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, J), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, G), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, F), i, Line(B, center(Circle(B, E, G))) we get concurrent(i, Line(B, F), Line(B, center(Circle(B, E, G))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(E, F), Line(F, J) we get concurrent(Line(E, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(D, F), Line(F, J) we get concurrent(Line(D, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(C, D, E))), Line(B, F) we get concurrent(Line(B, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concyclic_sufficient_conditions_v0 on J, F, I, H we get concyclic(F, H, I, J)
By concurrent_sufficient_conditions on Line(E, F), radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(D, E) we get concurrent(Line(D, E), Line(E, F), radical_axis(Circle(B, E, G), Circle(C, D, E)))
By concurrent_sufficient_conditions on radical_axis(Circle(B, E, G), Circle(C, D, E)), f, Line(E, center(Circle(C, D, E))) we get concurrent(f, radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(E, F), radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(D, center(Circle(D, E, G))), Line(D, F) we get concurrent(i, Line(D, F), Line(D, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(F, J), h, Line(J, center(Circle(C, D, E))) we get concurrent(h, Line(F, J), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(C, D, E))), k we get concurrent(k, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(D, center(Circle(D, E, G))), i we get concurrent(i, Line(D, F), Line(D, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(D, center(Circle(D, E, G))), h, i we get concurrent(h, i, Line(D, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on k, h, Line(J, center(Circle(C, D, E))) we get concurrent(h, k, Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(E, F), Line(F, I) we get concurrent(Line(E, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(J, center(Circle(C, D, E))), j, Line(E, center(Circle(C, D, E))) we get concurrent(j, Line(E, center(Circle(C, D, E))), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(J, center(Circle(C, D, E))), Line(C, J), Line(F, J) we get concurrent(Line(C, J), Line(F, J), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, Line(E, center(Circle(C, D, E))), Line(E, F) we get concurrent(k, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, E, G))), Line(A, B), Line(B, F) we get concurrent(Line(A, B), Line(B, F), Line(B, center(Circle(B, E, G))))
By concurrent_sufficient_conditions on k, radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(D, E) we get concurrent(k, Line(D, E), radical_axis(Circle(B, E, G), Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(J, center(Circle(C, D, E))), Line(F, J), k we get concurrent(k, Line(F, J), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(J, center(Circle(C, D, E))), k, Line(F, J) we get concurrent(k, Line(F, J), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(D, F), Line(F, I) we get concurrent(Line(D, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, center(Circle(C, D, E))) we get concurrent(k, radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, E, G))), k, Line(F, G) we get concurrent(k, Line(F, G), Line(G, center(Circle(B, E, G))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(D, E), radical_axis(Circle(B, E, G), Circle(C, D, E)) we get concurrent(Line(D, E), radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, center(Circle(C, D, E))))
By line_definition on midpoint(E, F), orthocenter(D, E, I), Line(E, F) we get Line(E, F) == Line(midpoint(E, F), orthocenter(D, E, I))
By concurrent_sufficient_conditions on Line(D, center(Circle(D, E, G))), j, h we get concurrent(h, j, Line(D, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(D, E), Line(E, F) we get concurrent(Line(D, E), Line(E, F), radical_axis(Circle(B, E, G), Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, F), Line(D, center(Circle(D, E, G))), j we get concurrent(j, Line(D, F), Line(D, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on k, Line(J, center(Circle(C, D, E))), h we get concurrent(h, k, Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(D, E, G))), i, Line(F, G) we get concurrent(i, Line(F, G), Line(G, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(Circle(D, E, G))), Line(G, center(Circle(B, E, G))) we get concurrent(Line(F, G), Line(G, center(Circle(B, E, G))), Line(G, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(D, center(Circle(D, E, G))), i, Line(D, F) we get concurrent(i, Line(D, F), Line(D, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(D, E), k we get concurrent(k, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(D, E), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(Circle(D, E, G))), k we get concurrent(k, Line(F, G), Line(G, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(D, center(Circle(D, E, G))), Line(D, F), j we get concurrent(j, Line(D, F), Line(D, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(Circle(C, D, E))), Line(F, G) we get concurrent(Line(F, G), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, F) we get concurrent(k, Line(E, F), radical_axis(Circle(B, E, G), Circle(C, D, E)))
By concurrent_sufficient_conditions on j, Line(D, F), Line(D, center(Circle(D, E, G))) we get concurrent(j, Line(D, F), Line(D, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(B, F), Line(F, G), Line(F, center(Circle(C, D, E))) we get concurrent(Line(B, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(F, G), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, G), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, E, G))), i, Line(F, G) we get concurrent(i, Line(F, G), Line(G, center(Circle(B, E, G))))
By concurrent_sufficient_conditions on Line(B, F), Line(F, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(B, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, J), k, Line(J, center(Circle(C, D, E))) we get concurrent(k, Line(C, J), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(Circle(C, D, E))), g we get concurrent(g, Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), f, Line(E, center(Circle(C, D, E))) we get concurrent(f, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(C, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), f, Line(E, center(Circle(C, D, E))) we get concurrent(f, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, J), Line(F, G), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, G), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(F, G), Line(G, center(Circle(B, E, G))) we get concurrent(i, Line(F, G), Line(G, center(Circle(B, E, G))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(B, F), Line(F, G) we get concurrent(Line(B, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, F), Line(F, center(Circle(C, D, E))), Line(F, I) we get concurrent(Line(B, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), f, k we get concurrent(f, k, Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(D, E), f we get concurrent(f, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, i, Line(G, center(Circle(B, E, G))) we get concurrent(i, k, Line(G, center(Circle(B, E, G))))
By concurrent_sufficient_conditions on h, Line(J, center(Circle(C, D, E))), Line(F, J) we get concurrent(h, Line(F, J), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), radical_axis(Circle(B, E, G), Circle(C, D, E)), f we get concurrent(f, Line(E, F), radical_axis(Circle(B, E, G), Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, F), Line(B, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(B, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, I), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, E, G))), Line(G, center(Circle(D, E, G))), Line(F, G) we get concurrent(Line(F, G), Line(G, center(Circle(B, E, G))), Line(G, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), g, Line(B, F) we get concurrent(g, Line(B, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(B, F), Line(B, center(Circle(B, E, G))) we get concurrent(i, Line(B, F), Line(B, center(Circle(B, E, G))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(D, E) we get concurrent(Line(D, E), radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, J), Line(F, I), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, I), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), radical_axis(Circle(B, E, G), Circle(C, D, E)), k we get concurrent(k, Line(D, E), radical_axis(Circle(B, E, G), Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, center(Circle(D, E, G))), j, i we get concurrent(i, j, Line(D, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(B, F), g we get concurrent(g, Line(B, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(C, D, E))), Line(F, I) we get concurrent(Line(E, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(D, E, G))), k, Line(F, G) we get concurrent(k, Line(F, G), Line(G, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(F, J), Line(J, center(Circle(C, D, E))), Line(C, J) we get concurrent(Line(C, J), Line(F, J), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(D, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(E, F), Line(F, G) we get concurrent(Line(E, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(D, E, G))), Line(D, F), i we get concurrent(i, Line(D, F), Line(D, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(G, center(Circle(D, E, G))), i, k we get concurrent(i, k, Line(G, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), g, Line(F, J) we get concurrent(g, Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(G, center(Circle(B, E, G))), Line(G, center(Circle(D, E, G))) we get concurrent(i, Line(G, center(Circle(B, E, G))), Line(G, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on g, Line(B, F), Line(F, center(Circle(C, D, E))) we get concurrent(g, Line(B, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(E, center(Circle(C, D, E))), Line(E, F) we get concurrent(f, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, F) we get concurrent(Line(D, E), Line(E, F), radical_axis(Circle(B, E, G), Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), j, Line(J, center(Circle(C, D, E))) we get concurrent(j, Line(E, center(Circle(C, D, E))), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, B), Line(B, center(Circle(B, E, G))), i we get concurrent(i, Line(A, B), Line(B, center(Circle(B, E, G))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, E, G))), Line(G, center(Circle(D, E, G))), i we get concurrent(i, Line(G, center(Circle(B, E, G))), Line(G, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(D, F), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(D, E, G))), i, h we get concurrent(h, i, Line(D, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on k, Line(E, F), radical_axis(Circle(B, E, G), Circle(C, D, E)) we get concurrent(k, Line(E, F), radical_axis(Circle(B, E, G), Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(Circle(C, D, E))), g we get concurrent(g, Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(J, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(D, center(Circle(D, E, G))), i we get concurrent(h, i, Line(D, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(D, F), g, Line(F, center(Circle(C, D, E))) we get concurrent(g, Line(D, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), k, Line(E, center(Circle(C, D, E))) we get concurrent(k, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(B, F), Line(F, I) we get concurrent(Line(B, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), f, radical_axis(Circle(B, E, G), Circle(C, D, E)) we get concurrent(f, Line(E, F), radical_axis(Circle(B, E, G), Circle(C, D, E)))
By concurrent_sufficient_conditions on f, Line(E, F), Line(E, center(Circle(C, D, E))) we get concurrent(f, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), g, Line(F, G) we get concurrent(g, Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), i, Line(G, center(Circle(B, E, G))) we get concurrent(i, Line(F, G), Line(G, center(Circle(B, E, G))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, I), Line(F, G) we get concurrent(Line(F, G), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(J, center(Circle(C, D, E))), h, Line(F, J) we get concurrent(h, Line(F, J), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(F, J), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, I), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(E, center(Circle(C, D, E))), Line(D, E) we get concurrent(f, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), radical_axis(Circle(B, E, G), Circle(C, D, E)), k we get concurrent(k, Line(E, F), radical_axis(Circle(B, E, G), Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(Circle(B, E, G))), i we get concurrent(i, Line(F, G), Line(G, center(Circle(B, E, G))))
By concurrent_sufficient_conditions on Line(D, center(Circle(D, E, G))), i, j we get concurrent(i, j, Line(D, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), g, Line(D, F) we get concurrent(g, Line(D, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, Line(G, center(Circle(D, E, G))), i we get concurrent(i, k, Line(G, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, F), k we get concurrent(k, Line(E, F), radical_axis(Circle(B, E, G), Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, E, G))), Line(A, B), i we get concurrent(i, Line(A, B), Line(B, center(Circle(B, E, G))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), j, Line(F, center(Circle(C, D, E))) we get concurrent(j, Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(F, center(Circle(C, D, E))), Line(E, F) we get concurrent(g, Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, G), Line(F, J) we get concurrent(Line(F, G), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, h, Line(D, center(Circle(D, E, G))) we get concurrent(h, i, Line(D, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(A, B), i, Line(B, center(Circle(B, E, G))) we get concurrent(i, Line(A, B), Line(B, center(Circle(B, E, G))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, E, G))), Line(B, F), i we get concurrent(i, Line(B, F), Line(B, center(Circle(B, E, G))))
By concurrent_sufficient_conditions on Line(G, center(Circle(D, E, G))), Line(G, center(Circle(B, E, G))), k we get concurrent(k, Line(G, center(Circle(B, E, G))), Line(G, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on i, Line(D, F), Line(D, center(Circle(D, E, G))) we get concurrent(i, Line(D, F), Line(D, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on k, Line(G, center(Circle(B, E, G))), Line(F, G) we get concurrent(k, Line(F, G), Line(G, center(Circle(B, E, G))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(Circle(C, D, E))), Line(F, J) we get concurrent(Line(F, G), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(D, center(Circle(D, E, G))), Line(D, F) we get concurrent(h, Line(D, F), Line(D, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on i, Line(G, center(Circle(D, E, G))), Line(F, G) we get concurrent(i, Line(F, G), Line(G, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), k, radical_axis(Circle(B, E, G), Circle(C, D, E)) we get concurrent(k, radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(F, center(Circle(C, D, E))), Line(D, F) we get concurrent(g, Line(D, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on j, Line(F, center(Circle(C, D, E))), Line(J, center(Circle(C, D, E))) we get concurrent(j, Line(F, center(Circle(C, D, E))), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(J, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(Circle(C, D, E))), g we get concurrent(g, Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, Line(G, center(Circle(D, E, G))), Line(G, center(Circle(B, E, G))) we get concurrent(k, Line(G, center(Circle(B, E, G))), Line(G, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(B, F), Line(F, I), Line(F, center(Circle(C, D, E))) we get concurrent(Line(B, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(F, G), Line(F, center(Circle(C, D, E))) we get concurrent(g, Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(J, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))), Line(J, center(Circle(C, D, E))) we get concurrent(Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, E, G))), i, Line(A, B) we get concurrent(i, Line(A, B), Line(B, center(Circle(B, E, G))))
By concurrent_sufficient_conditions on g, Line(D, F), Line(F, center(Circle(C, D, E))) we get concurrent(g, Line(D, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, J), Line(J, center(Circle(C, D, E))), h we get concurrent(h, Line(F, J), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, I), g we get concurrent(g, Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, F), Line(F, center(Circle(C, D, E))), g we get concurrent(g, Line(B, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), k, f we get concurrent(f, k, Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(D, F), Line(F, G) we get concurrent(Line(D, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(J, center(Circle(C, D, E))) we get concurrent(Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, F), Line(D, E) we get concurrent(Line(D, E), Line(E, F), radical_axis(Circle(B, E, G), Circle(C, D, E)))
By concurrent_sufficient_conditions on k, i, Line(G, center(Circle(D, E, G))) we get concurrent(i, k, Line(G, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on h, Line(D, F), Line(D, center(Circle(D, E, G))) we get concurrent(h, Line(D, F), Line(D, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(B, F), Line(E, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(B, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), k, radical_axis(Circle(B, E, G), Circle(C, D, E)) we get concurrent(k, Line(E, F), radical_axis(Circle(B, E, G), Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(J, center(Circle(C, D, E))), k, Line(C, J) we get concurrent(k, Line(C, J), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), radical_axis(Circle(B, E, G), Circle(C, D, E)), f we get concurrent(f, Line(D, E), radical_axis(Circle(B, E, G), Circle(C, D, E)))
By line_definition on orthocenter(D, E, I), F, Line(E, F) we get Line(E, F) == Line(F, orthocenter(D, E, I))
By concurrent_sufficient_conditions on i, Line(G, center(Circle(B, E, G))), k we get concurrent(i, k, Line(G, center(Circle(B, E, G))))
By concurrent_sufficient_conditions on Line(D, E), radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, J), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(D, E, G))), Line(D, F), h we get concurrent(h, Line(D, F), Line(D, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on i, k, Line(G, center(Circle(B, E, G))) we get concurrent(i, k, Line(G, center(Circle(B, E, G))))
By concurrent_sufficient_conditions on Line(G, center(Circle(D, E, G))), Line(G, center(Circle(B, E, G))), Line(F, G) we get concurrent(Line(F, G), Line(G, center(Circle(B, E, G))), Line(G, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on g, Line(F, center(Circle(C, D, E))), Line(F, J) we get concurrent(g, Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, Line(F, G), Line(G, center(Circle(B, E, G))) we get concurrent(k, Line(F, G), Line(G, center(Circle(B, E, G))))
By concurrent_sufficient_conditions on k, Line(D, E), radical_axis(Circle(B, E, G), Circle(C, D, E)) we get concurrent(k, Line(D, E), radical_axis(Circle(B, E, G), Circle(C, D, E)))
By concurrent_sufficient_conditions on radical_axis(Circle(B, E, G), Circle(C, D, E)), k, Line(D, E) we get concurrent(k, Line(D, E), radical_axis(Circle(B, E, G), Circle(C, D, E)))
By concurrent_sufficient_conditions on radical_axis(Circle(B, E, G), Circle(C, D, E)), k, Line(E, center(Circle(C, D, E))) we get concurrent(k, radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(J, center(Circle(C, D, E))), h, k we get concurrent(h, k, Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(J, center(Circle(C, D, E))), k, h we get concurrent(h, k, Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(D, E), Line(E, center(Circle(C, D, E))) we get concurrent(f, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, I), Line(D, F) we get concurrent(Line(D, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, center(Circle(C, D, E))), k we get concurrent(k, radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(D, E, G))), k, Line(G, center(Circle(B, E, G))) we get concurrent(k, Line(G, center(Circle(B, E, G))), Line(G, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(E, F), g we get concurrent(g, Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(E, center(Circle(C, D, E))), k we get concurrent(f, k, Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, G), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(B, F), Line(D, F) we get concurrent(Line(B, F), Line(D, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(D, E, G))), i, Line(G, center(Circle(B, E, G))) we get concurrent(i, Line(G, center(Circle(B, E, G))), Line(G, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(Circle(C, D, E))), Line(B, F) we get concurrent(Line(B, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(J, center(Circle(C, D, E))), j we get concurrent(j, Line(E, center(Circle(C, D, E))), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(C, D, E))), Line(F, I) we get concurrent(Line(D, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, center(Circle(C, D, E))) we get concurrent(f, radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(J, center(Circle(C, D, E))), Line(F, J), h we get concurrent(h, Line(F, J), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(F, J), Line(J, center(Circle(C, D, E))) we get concurrent(h, Line(F, J), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), g, Line(F, I) we get concurrent(g, Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(B, center(Circle(B, E, G))), Line(A, B) we get concurrent(i, Line(A, B), Line(B, center(Circle(B, E, G))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(C, D, E))), f we get concurrent(f, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, J), Line(E, F) we get concurrent(Line(E, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), f, Line(D, E) we get concurrent(f, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(B, F), Line(F, J) we get concurrent(Line(B, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(E, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), k, Line(E, center(Circle(C, D, E))) we get concurrent(k, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(E, F), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(D, E), f we get concurrent(f, Line(D, E), radical_axis(Circle(B, E, G), Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(D, F), g we get concurrent(g, Line(D, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, G), Line(E, F) we get concurrent(Line(E, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(Circle(C, D, E))), Line(B, F) we get concurrent(Line(B, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, F), Line(B, center(Circle(B, E, G))), i we get concurrent(i, Line(B, F), Line(B, center(Circle(B, E, G))))
By concurrent_sufficient_conditions on k, Line(G, center(Circle(D, E, G))), Line(F, G) we get concurrent(k, Line(F, G), Line(G, center(Circle(D, E, G))))
By concurrent_sufficient_conditions on j, Line(E, center(Circle(C, D, E))), Line(J, center(Circle(C, D, E))) we get concurrent(j, Line(E, center(Circle(C, D, E))), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), radical_axis(Circle(B, E, G), Circle(C, D, E)) we get concurrent(Line(D, E), Line(E, F), radical_axis(Circle(B, E, G), Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(C, D, E))), radical_axis(Circle(B, E, G), Circle(C, D, E)) we get concurrent(Line(E, F), radical_axis(Circle(B, E, G), Circle(C, D, E)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, J), k, Line(J, center(Circle(C, D, E))) we get concurrent(k, Line(F, J), Line(J, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(F, J), Line(F, center(Circle(C, D, E))) we get concurrent(g, Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(E, F), Line(F, center(Circle(C, D, E))) we get concurrent(g, Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, I), Line(E, F) we get concurrent(Line(E, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(Circle(C, D, E))), Line(F, I) we get concurrent(Line(F, I), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, J), Line(D, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, G), Line(F, I) we get concurrent(Line(F, G), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, I), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, G), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(B, E, G))), Line(F, G), i we get concurrent(i, Line(F, G), Line(G, center(Circle(B, E, G))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(Circle(C, D, E))), Line(F, I) we get concurrent(Line(F, G), Line(F, I), Line(F, center(Circle(C, D, E))))
By radical_axis_of_intersecting_circles_v0 on F, D, Circle(A, D, F), Circle(C, D, E) we get Line(D, F) == radical_axis(Circle(A, D, F), Circle(C, D, E))
By median_definition on I, A, C, Line(H, I) we get Line(H, I) == median(I, A, C)
By line_intersection_definition on F, Line(F, center(Circle(B, F, G))), Line(F, center(Circle(C, D, E))) we get F == line_intersection(Line(F, center(Circle(B, F, G))), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on center(Circle(B, F, G)), Line(G, center(Circle(B, F, G))), Line(F, center(Circle(B, F, G))) we get center(Circle(B, F, G)) == line_intersection(Line(F, center(Circle(B, F, G))), Line(G, center(Circle(B, F, G))))
By line_intersection_definition on B, Line(B, F), Line(B, center(Circle(B, F, G))) we get B == line_intersection(Line(B, F), Line(B, center(Circle(B, F, G))))
By midpoint_definition_v0 on D, C, center(Circle(C, D, E)) we get midpoint(C, D) == center(Circle(C, D, E))
By perpendicular_line_definition on orthocenter(D, E, I), Line(E, F), j we get Line(E, F) == perpendicular_line(orthocenter(D, E, I), j)
By line_intersection_definition on F, Line(F, center(Circle(B, F, G))), radical_axis(Circle(B, F, G), Circle(C, D, E)) we get F == line_intersection(radical_axis(Circle(B, F, G), Circle(C, D, E)), Line(F, center(Circle(B, F, G))))
By line_intersection_definition on G, Line(G, center(Circle(D, E, G))), Line(G, center(Circle(B, F, G))) we get G == line_intersection(Line(G, center(Circle(B, F, G))), Line(G, center(Circle(D, E, G))))
By line_intersection_definition on B, Line(B, center(Circle(B, E, G))), Line(B, center(Circle(B, F, G))) we get B == line_intersection(Line(B, center(Circle(B, E, G))), Line(B, center(Circle(B, F, G))))
By median_definition on J, C, A, Line(H, J) we get Line(H, J) == median(J, A, C)
By line_intersection_definition on F, radical_axis(Circle(B, F, G), Circle(C, D, E)), Line(F, J) we get F == line_intersection(Line(F, J), radical_axis(Circle(B, F, G), Circle(C, D, E)))
By line_intersection_definition on F, Line(F, center(Circle(B, F, G))), Line(E, F) we get F == line_intersection(Line(E, F), Line(F, center(Circle(B, F, G))))
By line_intersection_definition on F, Line(F, center(Circle(C, D, E))), radical_axis(Circle(B, F, G), Circle(C, D, E)) we get F == line_intersection(radical_axis(Circle(B, F, G), Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on F, Line(D, F), Line(F, center(Circle(B, F, G))) we get F == line_intersection(Line(D, F), Line(F, center(Circle(B, F, G))))
By line_intersection_definition on J, k, Line(H, J) we get J == line_intersection(k, Line(H, J))
By line_intersection_definition on J, Line(H, J), h we get J == line_intersection(h, Line(H, J))
By line_intersection_definition on G, Line(G, center(Circle(B, F, G))), k we get G == line_intersection(k, Line(G, center(Circle(B, F, G))))
By line_intersection_definition on I, k, altitude(I, D, E) we get I == line_intersection(k, altitude(I, D, E))
By line_intersection_definition on F, Line(F, G), radical_axis(Circle(B, F, G), Circle(C, D, E)) we get F == line_intersection(Line(F, G), radical_axis(Circle(B, F, G), Circle(C, D, E)))
By line_intersection_definition on G, Line(F, G), Line(G, center(Circle(B, F, G))) we get G == line_intersection(Line(F, G), Line(G, center(Circle(B, F, G))))
By line_intersection_definition on F, Line(F, center(Circle(B, F, G))), Line(F, J) we get F == line_intersection(Line(F, J), Line(F, center(Circle(B, F, G))))
By line_intersection_definition on B, Line(B, center(Circle(B, F, G))), Line(A, B) we get B == line_intersection(Line(A, B), Line(B, center(Circle(B, F, G))))
By perpendicular_line_definition on center(Circle(B, F, G)), Line(F, center(Circle(B, F, G))), Line(D, F) we get Line(F, center(Circle(B, F, G))) == perpendicular_line(center(Circle(B, F, G)), Line(D, F))
By line_intersection_definition on B, Line(B, center(Circle(B, F, G))), i we get B == line_intersection(i, Line(B, center(Circle(B, F, G))))
By radical_axis_of_intersecting_circles_v0 on A, I, Circle(A, D, F), Circle(A, C, I) we get Line(A, I) == radical_axis(Circle(A, C, I), Circle(A, D, F))
By line_intersection_definition on J, Line(J, center(Circle(C, D, E))), Line(H, J) we get J == line_intersection(Line(H, J), Line(J, center(Circle(C, D, E))))
By line_intersection_definition on I, Line(A, I), Line(H, I) we get I == line_intersection(Line(A, I), Line(H, I))
By line_intersection_definition on G, radical_axis(Circle(B, F, G), Circle(D, E, G)), Line(F, G) we get G == line_intersection(Line(F, G), radical_axis(Circle(B, F, G), Circle(D, E, G)))
By line_intersection_definition on I, Line(H, I), j we get I == line_intersection(j, Line(H, I))
By line_intersection_definition on I, k, Line(H, I) we get I == line_intersection(k, Line(H, I))
By line_intersection_definition on G, radical_axis(Circle(B, F, G), Circle(D, E, G)), Line(G, center(Circle(D, E, G))) we get G == line_intersection(radical_axis(Circle(B, F, G), Circle(D, E, G)), Line(G, center(Circle(D, E, G))))
By line_intersection_definition on I, altitude(I, D, E), Line(F, I) we get I == line_intersection(Line(F, I), altitude(I, D, E))
By line_intersection_definition on orthocenter(D, E, I), altitude(I, D, E), i we get orthocenter(D, E, I) == line_intersection(i, altitude(I, D, E))
By line_intersection_definition on F, Line(F, I), radical_axis(Circle(B, F, G), Circle(C, D, E)) we get F == line_intersection(Line(F, I), radical_axis(Circle(B, F, G), Circle(C, D, E)))
By line_intersection_definition on H, Line(H, J), Line(H, I) we get H == line_intersection(Line(H, I), Line(H, J))
By line_intersection_definition on H, Line(H, I), g we get H == line_intersection(g, Line(H, I))
By line_intersection_definition on center(Circle(B, F, G)), Line(G, center(Circle(B, F, G))), Line(B, center(Circle(B, F, G))) we get center(Circle(B, F, G)) == line_intersection(Line(B, center(Circle(B, F, G))), Line(G, center(Circle(B, F, G))))
By line_intersection_definition on F, radical_axis(Circle(B, F, G), Circle(C, D, E)), Line(D, F) we get F == line_intersection(Line(D, F), radical_axis(Circle(B, F, G), Circle(C, D, E)))
By line_intersection_definition on F, radical_axis(Circle(B, F, G), Circle(C, D, E)), g we get F == line_intersection(g, radical_axis(Circle(B, F, G), Circle(C, D, E)))
By line_intersection_definition on I, Line(H, I), Line(F, I) we get I == line_intersection(Line(F, I), Line(H, I))
By line_intersection_definition on H, g, Line(H, J) we get H == line_intersection(g, Line(H, J))
By line_intersection_definition on F, Line(F, I), Line(F, center(Circle(B, F, G))) we get F == line_intersection(Line(F, I), Line(F, center(Circle(B, F, G))))
By line_intersection_definition on G, Line(G, center(Circle(B, E, G))), Line(G, center(Circle(B, F, G))) we get G == line_intersection(Line(G, center(Circle(B, E, G))), Line(G, center(Circle(B, F, G))))
By perpendicular_line_definition on center(Circle(C, D, E)), j, Line(A, I) we get j == perpendicular_line(center(Circle(C, D, E)), Line(A, I))
By line_intersection_definition on I, altitude(I, D, E), j we get I == line_intersection(j, altitude(I, D, E))
By line_intersection_definition on J, Line(H, J), Line(C, J) we get J == line_intersection(Line(C, J), Line(H, J))
By line_intersection_definition on center(Circle(B, F, G)), Line(B, center(Circle(B, F, G))), Line(F, center(Circle(B, F, G))) we get center(Circle(B, F, G)) == line_intersection(Line(B, center(Circle(B, F, G))), Line(F, center(Circle(B, F, G))))
By line_intersection_definition on G, Line(G, center(Circle(B, E, G))), radical_axis(Circle(B, F, G), Circle(D, E, G)) we get G == line_intersection(radical_axis(Circle(B, F, G), Circle(D, E, G)), Line(G, center(Circle(B, E, G))))
By perpendicular_line_definition on E, Line(D, E), altitude(I, D, E) we get Line(D, E) == perpendicular_line(E, altitude(I, D, E))
By line_intersection_definition on center(Circle(C, D, E)), Line(E, center(Circle(C, D, E))), median(center(Circle(C, D, E)), E, F) we get center(Circle(C, D, E)) == line_intersection(Line(E, center(Circle(C, D, E))), median(center(Circle(C, D, E)), E, F))
By orthocenter_concurrency on A, C, D we get orthocenter(A, C, D) in altitude(A, C, D), orthocenter(A, C, D) in altitude(C, A, D), orthocenter(A, C, D) in altitude(D, A, C)
By midpoint_definition_v0 on E, D, center(Circle(D, E, G)) we get midpoint(D, E) == center(Circle(D, E, G))
By line_intersection_definition on F, Line(B, F), Line(F, center(Circle(B, F, G))) we get F == line_intersection(Line(B, F), Line(F, center(Circle(B, F, G))))
By perpendicular_line_definition on center(Circle(D, E, G)), Line(D, E), altitude(I, D, E) we get Line(D, E) == perpendicular_line(center(Circle(D, E, G)), altitude(I, D, E))
By line_intersection_definition on B, Line(B, center(Circle(B, F, G))), f we get B == line_intersection(f, Line(B, center(Circle(B, F, G))))
By line_intersection_definition on orthocenter(D, E, I), i, Line(E, F) we get orthocenter(D, E, I) == line_intersection(i, Line(E, F))
By line_intersection_definition on G, radical_axis(Circle(B, F, G), Circle(D, E, G)), i we get G == line_intersection(i, radical_axis(Circle(B, F, G), Circle(D, E, G)))
By line_intersection_definition on G, i, Line(G, center(Circle(B, F, G))) we get G == line_intersection(i, Line(G, center(Circle(B, F, G))))
By line_intersection_definition on G, k, radical_axis(Circle(B, F, G), Circle(D, E, G)) we get G == line_intersection(k, radical_axis(Circle(B, F, G), Circle(D, E, G)))
By line_intersection_definition on G, Line(G, center(Circle(B, F, G))), radical_axis(Circle(B, F, G), Circle(D, E, G)) we get G == line_intersection(radical_axis(Circle(B, F, G), Circle(D, E, G)), Line(G, center(Circle(B, F, G))))
By perpendicular_line_definition on orthocenter(D, E, I), altitude(I, D, E), Line(D, E) we get altitude(I, D, E) == perpendicular_line(orthocenter(D, E, I), Line(D, E))
By perpendicular_line_definition on D, Line(D, F), Line(F, center(Circle(B, F, G))) we get Line(D, F) == perpendicular_line(D, Line(F, center(Circle(B, F, G))))
By line_intersection_definition on orthocenter(D, E, I), Line(E, F), altitude(I, D, E) we get orthocenter(D, E, I) == line_intersection(Line(E, F), altitude(I, D, E))
By line_intersection_definition on center(Circle(C, D, E)), Line(F, center(Circle(C, D, E))), median(center(Circle(C, D, E)), E, F) we get center(Circle(C, D, E)) == line_intersection(Line(F, center(Circle(C, D, E))), median(center(Circle(C, D, E)), E, F))
By line_intersection_definition on I, altitude(I, D, E), Line(A, I) we get I == line_intersection(Line(A, I), altitude(I, D, E))
By line_intersection_definition on center(Circle(C, D, E)), median(center(Circle(C, D, E)), E, F), Line(J, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(J, center(Circle(C, D, E))), median(center(Circle(C, D, E)), E, F))
By line_intersection_definition on J, Line(H, J), Line(F, J) we get J == line_intersection(Line(F, J), Line(H, J))
By perpendicular_line_definition on orthocenter(D, E, I), i, k we get i == perpendicular_line(orthocenter(D, E, I), k)
By line_intersection_definition on F, Line(E, F), radical_axis(Circle(B, F, G), Circle(C, D, E)) we get F == line_intersection(Line(E, F), radical_axis(Circle(B, F, G), Circle(C, D, E)))
By line_intersection_definition on midpoint(E, F), median(center(Circle(C, D, E)), E, F), Line(E, F) we get midpoint(E, F) == line_intersection(Line(E, F), median(center(Circle(C, D, E)), E, F))
By line_intersection_definition on F, Line(F, center(Circle(B, F, G))), Line(F, G) we get F == line_intersection(Line(F, G), Line(F, center(Circle(B, F, G))))
By line_intersection_definition on F, radical_axis(Circle(B, F, G), Circle(C, D, E)), Line(B, F) we get F == line_intersection(Line(B, F), radical_axis(Circle(B, F, G), Circle(C, D, E)))
By midpoint_definition_v0 on E, B, center(Circle(B, E, G)) we get midpoint(B, E) == center(Circle(B, E, G))
By perpendicular_line_definition on F, Line(D, F), Line(F, center(Circle(B, F, G))) we get Line(D, F) == perpendicular_line(F, Line(F, center(Circle(B, F, G))))
By perpendicular_line_definition on D, Line(D, E), altitude(I, D, E) we get Line(D, E) == perpendicular_line(D, altitude(I, D, E))
By perpendicular_direction_conditions_v0 on center(Circle(B, E, G)), G, G, center(Circle(D, E, G)) we get perpendicular(Line(G, center(Circle(B, E, G))), Line(G, center(Circle(D, E, G))))
By same_angle_v2 on H, F, A, I we get angle(F, H, I) == angle(A, H, I) + 180 mod 360
By perpendicular_direction_conditions_v0 on B, A, center(Circle(D, E, G)), G we get perpendicular(Line(A, B), Line(G, center(Circle(D, E, G))))
By perpendicular_direction_conditions_v0 on E, center(Circle(B, E, G)), center(Circle(D, E, G)), D we get perpendicular(Line(D, center(Circle(D, E, G))), Line(E, center(Circle(B, E, G))))
By perpendicular_direction_conditions_v0 on D, E, H, I we get perpendicular(Line(D, E), Line(H, I))
By perpendicular_direction_conditions_v0 on center(Circle(D, E, G)), E, center(Circle(B, E, G)), B we get perpendicular(Line(B, center(Circle(B, E, G))), Line(E, center(Circle(D, E, G))))
By perpendicular_direction_conditions_v0 on center(Circle(D, E, G)), D, H, I we get perpendicular(Line(H, I), Line(D, center(Circle(D, E, G))))
By perpendicular_direction_conditions_v0 on D, center(Circle(D, E, G)), E, B we get perpendicular(Line(B, E), Line(D, center(Circle(D, E, G))))
By perpendicular_direction_conditions_v0 on B, center(Circle(B, E, G)), E, D we get perpendicular(Line(D, E), Line(B, center(Circle(B, E, G))))
By perpendicular_direction_conditions_v0 on H, I, center(Circle(D, E, G)), E we get perpendicular(Line(H, I), Line(E, center(Circle(D, E, G))))
By same_angle_v0 on H, F, C, I we get angle(C, H, I) == angle(F, H, I) mod 360
By perpendicular_direction_conditions_v0 on center(Circle(D, E, G)), D, C, B we get perpendicular(Line(B, C), Line(D, center(Circle(D, E, G))))
By perpendicular_direction_conditions_v0 on B, center(Circle(B, E, G)), center(Circle(D, E, G)), D we get perpendicular(Line(B, center(Circle(B, E, G))), Line(D, center(Circle(D, E, G))))
By same_angle_v0 on H, C, F, J we get angle(C, H, J) == angle(F, H, J) mod 360
By perpendicular_direction_conditions_v0 on E, C, D, center(Circle(D, E, G)) we get perpendicular(Line(C, E), Line(D, center(Circle(D, E, G))))
By perpendicular_direction_conditions_v0 on center(Circle(D, E, G)), G, H, J we get perpendicular(Line(H, J), Line(G, center(Circle(D, E, G))))
By same_angle_v3 on H, F, A, J we get angle(F, H, J) == angle(A, H, J) + 180 mod 360
By perpendicular_direction_conditions_v0_r on F, D, center(Circle(B, F, G)), F we get 180 == 2 * direction(F, D) - 2 * direction(center(Circle(B, F, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(B, F, G)), F, F, D we get 180 == 2 * direction(center(Circle(B, F, G)), F) - 2 * direction(F, D) mod 360
By parallel_line_definition on orthocenter(D, E, I), Line(E, F), Line(A, I) we get Line(E, F) == parallel_line(orthocenter(D, E, I), Line(A, I))
By perpendicular_direction_conditions_v0_r on center(Circle(B, F, G)), F, D, F we get 180 == 2 * direction(center(Circle(B, F, G)), F) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on D, F, center(Circle(B, F, G)), F we get 180 == 2 * direction(D, F) - 2 * direction(center(Circle(B, F, G)), F) mod 360
By parallel_line_definition on I, Line(A, I), Line(E, F) we get Line(A, I) == parallel_line(I, Line(E, F))
By parallel_line_definition on midpoint(E, F), Line(E, F), Line(A, I) we get Line(E, F) == parallel_line(midpoint(E, F), Line(A, I))
By parallel_line_definition on A, Line(A, I), Line(E, F) we get Line(A, I) == parallel_line(A, Line(E, F))
By parallel_line_definition on F, Line(E, F), Line(A, I) we get Line(E, F) == parallel_line(F, Line(A, I))
By parallel_line_definition on E, Line(E, F), Line(A, I) we get Line(E, F) == parallel_line(E, Line(A, I))
By same_angle_v1 on I, J, E, H we get angle(E, I, H) == angle(J, I, H) mod 360
By same_angle_v0 on J, D, A, H we get angle(A, J, H) == angle(D, J, H) mod 360
By same_angle_v1 on I, J, G, H we get angle(G, I, H) == angle(J, I, H) mod 360
By same_angle_v3 on J, G, E, H we get angle(G, J, H) == angle(E, J, H) + 180 mod 360
By same_angle_v0 on J, I, G, H we get angle(G, J, H) == angle(I, J, H) mod 360
By same_angle_v1 on I, E, G, H we get angle(E, I, H) == angle(G, I, H) mod 360
By same_angle_v2 on J, I, E, H we get angle(I, J, H) == angle(E, J, H) + 180 mod 360
By sas_anti_congruence on I, midpoint(E, F), F, I, midpoint(E, F), E we get anti_congruent_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By same_angle_v1 on I, D, C, H we get angle(C, I, H) == angle(D, I, H) mod 360
By projection_definition on center(Circle(B, F, G)), F, Line(D, F) we get F == projection(center(Circle(B, F, G)), Line(D, F))
By perpendicular_direction_conditions_v0_r on F, center(Circle(B, F, G)), D, F we get 180 == 2 * direction(F, center(Circle(B, F, G))) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on D, F, F, center(Circle(B, F, G)) we get 180 == 2 * direction(D, F) - 2 * direction(F, center(Circle(B, F, G))) mod 360
By perpendicular_direction_conditions_v0_r on F, center(Circle(B, F, G)), F, D we get 180 == 2 * direction(F, center(Circle(B, F, G))) - 2 * direction(F, D) mod 360
By projection_definition on D, F, Line(F, center(Circle(B, F, G))) we get F == projection(D, Line(F, center(Circle(B, F, G))))
By perpendicular_direction_conditions_v0_r on F, D, F, center(Circle(B, F, G)) we get 180 == 2 * direction(F, D) - 2 * direction(F, center(Circle(B, F, G))) mod 360
By in_imply_collinear on I, center(Circle(C, D, E)), D we get collinear(D, I, center(Circle(C, D, E)))
By in_imply_collinear on center(Circle(C, D, E)), midpoint(E, F), I we get collinear(I, midpoint(E, F), center(Circle(C, D, E)))
By in_imply_collinear on midpoint(E, F), center(Circle(C, D, E)), C we get collinear(C, midpoint(E, F), center(Circle(C, D, E)))
By parallel_line_angles_v1 on B, A, H, J we get parallel(Line(A, B), Line(H, J))
By sas_anti_similarity on midpoint(E, F), D, E, midpoint(E, F), D, F we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By in_imply_collinear on orthocenter(D, E, I), midpoint(E, F), E we get collinear(E, midpoint(E, F), orthocenter(D, E, I))
By parallel_line_angles_v1 on I, H, C, B we get parallel(Line(B, C), Line(H, I))
By in_imply_collinear on orthocenter(D, E, I), D, G we get collinear(D, G, orthocenter(D, E, I))
By sas_anti_similarity on F, I, midpoint(E, F), E, I, midpoint(E, F) we get anti_similar_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By in_imply_collinear on orthocenter(D, E, I), D, B we get collinear(B, D, orthocenter(D, E, I))
By in_imply_collinear on midpoint(E, F), D, center(Circle(C, D, E)) we get collinear(D, midpoint(E, F), center(Circle(C, D, E)))
By in_imply_collinear on I, center(Circle(C, D, E)), C we get collinear(C, I, center(Circle(C, D, E)))
By in_imply_collinear on C, center(Circle(B, E, G)), E we get collinear(C, E, center(Circle(B, E, G)))
By in_imply_collinear on orthocenter(D, E, I), F, midpoint(E, F) we get collinear(F, midpoint(E, F), orthocenter(D, E, I))
By in_imply_collinear on orthocenter(D, E, I), F, E we get collinear(E, F, orthocenter(D, E, I))
By sas_anti_congruence on midpoint(E, F), C, E, midpoint(E, F), C, F we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_anti_similarity on midpoint(E, F), C, F, midpoint(E, F), C, E we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By asa_anti_congruence on I, midpoint(E, F), E, I, midpoint(E, F), F we get anti_congruent_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By in_imply_collinear on center(Circle(B, E, G)), B, C we get collinear(B, C, center(Circle(B, E, G)))
By in_imply_collinear on orthocenter(D, E, I), B, G we get collinear(B, G, orthocenter(D, E, I))
By internal_angle_bisector_definition_v0 on A, center(Circle(C, D, E)), E, C we get angle(A, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, E) mod 360
By aa_anti_similarity on E, I, midpoint(E, F), F, I, midpoint(E, F) we get anti_similar_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By aa_anti_similarity on F, midpoint(E, F), C, E, midpoint(E, F), C we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By collinear_definition on D, center(Circle(C, D, E)), C we get center(Circle(C, D, E)) in Line(C, D), C in Line(D, center(Circle(C, D, E))), Line(C, D) == Line(D, center(Circle(C, D, E))), 0 == 2 * angle(center(Circle(C, D, E)), D, C) mod 360
By internal_angle_bisector_definition_v0 on H, center(Circle(C, D, E)), B, C we get angle(H, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, B) mod 360
By internal_angle_bisector_definition_v0 on H, center(Circle(C, D, E)), E, C we get angle(H, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, E) mod 360
By sas_anti_similarity on F, C, midpoint(E, F), E, C, midpoint(E, F) we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By perpendicular_bisector_sufficient_conditions on F, E, center(Circle(C, D, E)), midpoint(E, F) we get perpendicular_bisector(E, F) == Line(midpoint(E, F), center(Circle(C, D, E)))
By sas_anti_congruence on I, midpoint(E, F), E, I, midpoint(E, F), F we get anti_congruent_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By sas_anti_congruence on F, midpoint(E, F), D, E, midpoint(E, F), D we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By internal_angle_bisector_definition_v0 on A, center(Circle(C, D, E)), B, C we get angle(A, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, B) mod 360
By double_perpendicular_and_parallel_v0 on altitude(I, D, E), Line(D, E), f we get parallel(f, altitude(I, D, E))
By aa_anti_similarity on E, midpoint(E, F), I, F, midpoint(E, F), I we get anti_similar_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By sas_anti_congruence on F, midpoint(E, F), I, E, midpoint(E, F), I we get anti_congruent_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By internal_angle_bisector_definition_v0 on D, center(Circle(C, D, E)), D, C we get angle(D, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, D) mod 360
By asa_anti_congruence on midpoint(E, F), I, E, midpoint(E, F), I, F we get anti_congruent_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By internal_angle_bisector_definition_v0 on I, center(Circle(C, D, E)), I, D we get angle(I, D, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), D, I) mod 360
By collinear_definition on center(Circle(B, E, G)), E, B we get E in Line(B, center(Circle(B, E, G))), B in Line(E, center(Circle(B, E, G))), Line(B, center(Circle(B, E, G))) == Line(E, center(Circle(B, E, G))), 0 == 2 * angle(E, center(Circle(B, E, G)), B) mod 360
By aa_anti_similarity on E, midpoint(E, F), D, F, midpoint(E, F), D we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_anti_similarity on E, D, midpoint(E, F), F, D, midpoint(E, F) we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By aa_anti_similarity on F, midpoint(E, F), D, E, midpoint(E, F), D we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By asa_anti_congruence on C, midpoint(E, F), F, C, midpoint(E, F), E we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_anti_congruence on F, D, midpoint(E, F), E, D, midpoint(E, F) we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By asa_anti_congruence on midpoint(E, F), C, E, midpoint(E, F), C, F we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By reverse_direction on midpoint(E, F), D we get 180 == direction(midpoint(E, F), D) - direction(D, midpoint(E, F)) mod 360
By internal_angle_bisector_definition_v0 on I, center(Circle(C, D, E)), I, C we get angle(I, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, I) mod 360
By asa_anti_congruence on midpoint(E, F), C, F, midpoint(E, F), C, E we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By collinear_definition on D, center(Circle(D, E, G)), E we get center(Circle(D, E, G)) in Line(D, E), E in Line(D, center(Circle(D, E, G))), Line(D, E) == Line(D, center(Circle(D, E, G))), 0 == 2 * angle(center(Circle(D, E, G)), D, E) mod 360
By aa_anti_similarity on F, midpoint(E, F), I, E, midpoint(E, F), I we get anti_similar_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By sas_anti_similarity on D, midpoint(E, F), E, D, midpoint(E, F), F we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By perpendicular_angle_conditions_v0 on center(Circle(B, E, G)), E, center(Circle(D, E, G)) we get angle(center(Circle(B, E, G)), E, center(Circle(D, E, G))) == orientation(E, center(Circle(D, E, G)), center(Circle(B, E, G))) mod 360
By sas_anti_similarity on D, midpoint(E, F), F, D, midpoint(E, F), E we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By asa_anti_congruence on midpoint(E, F), I, F, midpoint(E, F), I, E we get anti_congruent_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By sas_anti_congruence on midpoint(E, F), I, F, midpoint(E, F), I, E we get anti_congruent_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By sas_anti_congruence on E, midpoint(E, F), D, F, midpoint(E, F), D we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By collinear_definition on E, B, center(Circle(B, E, G)) we get B in Line(E, center(Circle(B, E, G))), center(Circle(B, E, G)) in Line(B, E), Line(B, E) == Line(E, center(Circle(B, E, G))), 0 == 2 * angle(B, E, center(Circle(B, E, G))) mod 360
By sas_anti_congruence on E, midpoint(E, F), I, F, midpoint(E, F), I we get anti_congruent_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By collinear_definition on D, E, center(Circle(D, E, G)) we get E in Line(D, center(Circle(D, E, G))), center(Circle(D, E, G)) in Line(D, E), Line(D, E) == Line(D, center(Circle(D, E, G))), 0 == 2 * angle(E, D, center(Circle(D, E, G))) mod 360
By internal_angle_bisector_definition_v0 on C, center(Circle(B, E, G)), C, E we get angle(C, E, center(Circle(B, E, G))) == angle(center(Circle(B, E, G)), E, C) mod 360
By internal_angle_bisector_definition_v0 on F, center(Circle(C, D, E)), B, C we get angle(F, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, B) mod 360
By collinear_definition on center(Circle(D, E, G)), E, D we get E in Line(D, center(Circle(D, E, G))), D in Line(E, center(Circle(D, E, G))), Line(D, center(Circle(D, E, G))) == Line(E, center(Circle(D, E, G))), 0 == 2 * angle(E, center(Circle(D, E, G)), D) mod 360
By sas_anti_similarity on C, midpoint(E, F), F, C, midpoint(E, F), E we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By internal_angle_bisector_definition_v0 on B, center(Circle(C, D, E)), H, C we get angle(B, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, H) mod 360
By sas_anti_similarity on F, midpoint(E, F), I, E, midpoint(E, F), I we get anti_similar_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By internal_angle_bisector_definition_v0 on B, center(Circle(C, D, E)), A, C we get angle(B, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, A) mod 360
By sas_anti_similarity on F, midpoint(E, F), C, E, midpoint(E, F), C we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By aa_anti_similarity on F, C, midpoint(E, F), E, C, midpoint(E, F) we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_anti_similarity on F, midpoint(E, F), D, E, midpoint(E, F), D we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By collinear_definition on B, E, center(Circle(B, E, G)) we get E in Line(B, center(Circle(B, E, G))), center(Circle(B, E, G)) in Line(B, E), Line(B, E) == Line(B, center(Circle(B, E, G))), 0 == 2 * angle(E, B, center(Circle(B, E, G))) mod 360
By sas_anti_congruence on E, midpoint(E, F), C, F, midpoint(E, F), C we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By internal_angle_bisector_definition_v0 on C, center(Circle(C, D, E)), C, D we get angle(C, D, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), D, C) mod 360
By sas_anti_congruence on midpoint(E, F), D, F, midpoint(E, F), D, E we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_anti_congruence on E, D, midpoint(E, F), F, D, midpoint(E, F) we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By collinear_definition on E, D, center(Circle(D, E, G)) we get D in Line(E, center(Circle(D, E, G))), center(Circle(D, E, G)) in Line(D, E), Line(D, E) == Line(E, center(Circle(D, E, G))), 0 == 2 * angle(D, E, center(Circle(D, E, G))) mod 360
By aa_anti_similarity on F, D, midpoint(E, F), E, D, midpoint(E, F) we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_anti_similarity on midpoint(E, F), C, E, midpoint(E, F), C, F we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By perpendicular_angle_conditions_v0 on center(Circle(D, E, G)), E, center(Circle(B, E, G)) we get angle(center(Circle(D, E, G)), E, center(Circle(B, E, G))) == orientation(E, center(Circle(B, E, G)), center(Circle(D, E, G))) mod 360
By double_perpendicular_and_parallel_v0 on Line(F, center(Circle(B, F, G))), Line(D, F), g we get parallel(g, Line(F, center(Circle(B, F, G))))
By sas_anti_similarity on E, C, midpoint(E, F), F, C, midpoint(E, F) we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By asa_anti_congruence on D, midpoint(E, F), F, D, midpoint(E, F), E we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By internal_angle_bisector_definition_v0 on E, center(Circle(C, D, E)), H, C we get angle(E, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, H) mod 360
By reverse_direction on midpoint(E, F), I we get 180 == direction(midpoint(E, F), I) - direction(I, midpoint(E, F)) mod 360
By sas_anti_congruence on F, midpoint(E, F), C, E, midpoint(E, F), C we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_anti_similarity on I, midpoint(E, F), F, I, midpoint(E, F), E we get anti_similar_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By parallel_line_angles_v1 on E, C, H, I we get parallel(Line(C, E), Line(H, I))
By sas_anti_similarity on E, I, midpoint(E, F), F, I, midpoint(E, F) we get anti_similar_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By sas_anti_congruence on F, C, midpoint(E, F), E, C, midpoint(E, F) we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By collinear_definition on E, center(Circle(D, E, G)), D we get center(Circle(D, E, G)) in Line(D, E), D in Line(E, center(Circle(D, E, G))), Line(D, E) == Line(E, center(Circle(D, E, G))), 0 == 2 * angle(center(Circle(D, E, G)), E, D) mod 360
By sas_anti_similarity on E, midpoint(E, F), D, F, midpoint(E, F), D we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_anti_congruence on E, I, midpoint(E, F), F, I, midpoint(E, F) we get anti_congruent_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By sas_anti_similarity on E, midpoint(E, F), C, F, midpoint(E, F), C we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By internal_angle_bisector_definition_v0 on B, center(Circle(B, E, G)), B, E we get angle(B, E, center(Circle(B, E, G))) == angle(center(Circle(B, E, G)), E, B) mod 360
By aa_anti_similarity on E, C, midpoint(E, F), F, C, midpoint(E, F) we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By internal_angle_bisector_definition_v0 on E, center(Circle(C, D, E)), A, C we get angle(E, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, A) mod 360
By asa_anti_congruence on D, midpoint(E, F), E, D, midpoint(E, F), F we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By reverse_direction on I, midpoint(E, F) we get 180 == direction(I, midpoint(E, F)) - direction(midpoint(E, F), I) mod 360
By asa_anti_congruence on midpoint(E, F), D, E, midpoint(E, F), D, F we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_anti_congruence on midpoint(E, F), C, F, midpoint(E, F), C, E we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_anti_similarity on I, midpoint(E, F), E, I, midpoint(E, F), F we get anti_similar_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By aa_anti_similarity on E, midpoint(E, F), C, F, midpoint(E, F), C we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By asa_anti_congruence on C, midpoint(E, F), E, C, midpoint(E, F), F we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_anti_congruence on D, midpoint(E, F), F, D, midpoint(E, F), E we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By collinear_definition on C, center(Circle(C, D, E)), D we get center(Circle(C, D, E)) in Line(C, D), D in Line(C, center(Circle(C, D, E))), Line(C, D) == Line(C, center(Circle(C, D, E))), 0 == 2 * angle(center(Circle(C, D, E)), C, D) mod 360
By sas_anti_congruence on midpoint(E, F), D, E, midpoint(E, F), D, F we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By reverse_direction on C, midpoint(E, F) we get 180 == direction(C, midpoint(E, F)) - direction(midpoint(E, F), C) mod 360
By sas_anti_congruence on D, midpoint(E, F), E, D, midpoint(E, F), F we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By collinear_definition on D, C, center(Circle(C, D, E)) we get C in Line(D, center(Circle(C, D, E))), center(Circle(C, D, E)) in Line(C, D), Line(C, D) == Line(D, center(Circle(C, D, E))), 0 == 2 * angle(C, D, center(Circle(C, D, E))) mod 360
By reverse_direction on midpoint(E, F), C we get 180 == direction(midpoint(E, F), C) - direction(C, midpoint(E, F)) mod 360
By reverse_direction on D, midpoint(E, F) we get 180 == direction(D, midpoint(E, F)) - direction(midpoint(E, F), D) mod 360
By sas_anti_similarity on midpoint(E, F), D, F, midpoint(E, F), D, E we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By internal_angle_bisector_definition_v0 on B, center(Circle(C, D, E)), F, C we get angle(B, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, F) mod 360
By sas_anti_congruence on C, midpoint(E, F), E, C, midpoint(E, F), F we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By collinear_definition on C, D, center(Circle(C, D, E)) we get D in Line(C, center(Circle(C, D, E))), center(Circle(C, D, E)) in Line(C, D), Line(C, D) == Line(C, center(Circle(C, D, E))), 0 == 2 * angle(D, C, center(Circle(C, D, E))) mod 360
By sas_anti_similarity on F, D, midpoint(E, F), E, D, midpoint(E, F) we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_anti_congruence on F, I, midpoint(E, F), E, I, midpoint(E, F) we get anti_congruent_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By sas_anti_congruence on E, C, midpoint(E, F), F, C, midpoint(E, F) we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By aa_anti_similarity on E, D, midpoint(E, F), F, D, midpoint(E, F) we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By asa_anti_congruence on midpoint(E, F), D, F, midpoint(E, F), D, E we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_anti_congruence on midpoint(E, F), I, E, midpoint(E, F), I, F we get anti_congruent_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By sas_anti_similarity on midpoint(E, F), I, F, midpoint(E, F), I, E we get anti_similar_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By collinear_definition on E, center(Circle(B, E, G)), B we get center(Circle(B, E, G)) in Line(B, E), B in Line(E, center(Circle(B, E, G))), Line(B, E) == Line(E, center(Circle(B, E, G))), 0 == 2 * angle(center(Circle(B, E, G)), E, B) mod 360
By sas_anti_similarity on C, midpoint(E, F), E, C, midpoint(E, F), F we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By collinear_definition on B, center(Circle(B, E, G)), E we get center(Circle(B, E, G)) in Line(B, E), E in Line(B, center(Circle(B, E, G))), Line(B, E) == Line(B, center(Circle(B, E, G))), 0 == 2 * angle(center(Circle(B, E, G)), B, E) mod 360
By sas_anti_congruence on C, midpoint(E, F), F, C, midpoint(E, F), E we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By aa_anti_similarity on F, I, midpoint(E, F), E, I, midpoint(E, F) we get anti_similar_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By sas_anti_similarity on midpoint(E, F), I, E, midpoint(E, F), I, F we get anti_similar_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By asa_anti_congruence on I, midpoint(E, F), F, I, midpoint(E, F), E we get anti_congruent_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By sas_anti_similarity on E, midpoint(E, F), I, F, midpoint(E, F), I we get anti_similar_triangles(E, I, midpoint(E, F), F, I, midpoint(E, F))
By sss_anti_congruence_v0 on C, H, I, I, H, C we get anti_congruent_triangles(C, H, I, I, H, C)
By external_angle_bisector_definition_v0_r on F, I, F, midpoint(E, F) we get Line(I, midpoint(E, F)) == external_angle_bisector(F, midpoint(E, F), F)
By sss_anti_congruence_v0 on J, C, H, C, J, H we get anti_congruent_triangles(C, H, J, J, H, C)
By sss_anti_congruence_v0 on A, J, H, J, A, H we get anti_congruent_triangles(A, H, J, J, H, A)
By sss_anti_congruence_v1 on I, A, H, A, I, H we get anti_congruent_triangles(A, H, I, I, H, A)
By sss_anti_congruence_v1 on H, C, J, H, J, C we get anti_congruent_triangles(C, H, J, J, H, C)
By sss_anti_congruence_v1 on H, C, I, H, I, C we get anti_congruent_triangles(C, H, I, I, H, C)
By sss_anti_congruence_v1 on I, H, C, C, H, I we get anti_congruent_triangles(C, H, I, I, H, C)
By sss_anti_congruence_v1 on J, H, C, C, H, J we get anti_congruent_triangles(C, H, J, J, H, C)
By external_angle_bisector_definition_v0_r on I, midpoint(E, F), C, D we get external_angle_bisector(C, D, I) == Line(D, midpoint(E, F))
By concyclic_definition_0 on F, J, center(Circle(C, D, E)), I we get I in Circle(F, J, center(Circle(C, D, E)))
By sss_anti_congruence_v0 on J, C, H, C, J, H we get anti_congruent_triangles(C, H, J, J, H, C)
By sss_anti_congruence_v1 on I, A, H, A, I, H we get anti_congruent_triangles(A, H, I, I, H, A)
By sss_anti_congruence_v0 on H, J, C, H, C, J we get anti_congruent_triangles(C, H, J, J, H, C)
By external_angle_bisector_definition_v0_r on F, C, F, midpoint(E, F) we get Line(C, midpoint(E, F)) == external_angle_bisector(F, midpoint(E, F), F)
By external_angle_bisector_definition_v0_r on center(Circle(D, E, G)), B, center(Circle(D, E, G)), E we get Line(B, E) == external_angle_bisector(center(Circle(D, E, G)), E, center(Circle(D, E, G)))
By external_angle_bisector_definition_v0_r on F, A, G, I we get Line(A, I) == external_angle_bisector(F, I, G)
By isosceles_triangle_properties on H, A, I we get distance(A, H) == distance(H, I), angle(A, I, H) == angle(H, A, I) mod 360
By sss_anti_congruence_v1 on C, I, H, I, C, H we get anti_congruent_triangles(C, H, I, I, H, C)
By external_angle_bisector_definition_v0_r on E, A, F, I we get Line(A, I) == external_angle_bisector(E, I, F)
By sss_anti_congruence_v1 on A, H, J, J, H, A we get anti_congruent_triangles(A, H, J, J, H, A)
By sss_anti_congruence_v0 on C, H, J, J, H, C we get anti_congruent_triangles(C, H, J, J, H, C)
By aa_anti_similarity on F, E, I, J, C, H we get anti_similar_triangles(C, H, J, E, I, F)
By external_angle_bisector_definition_v0_r on center(Circle(D, E, G)), C, center(Circle(D, E, G)), E we get Line(C, E) == external_angle_bisector(center(Circle(D, E, G)), E, center(Circle(D, E, G)))
By aa_similarity on I, H, C, E, D, F we get similar_triangles(C, H, I, F, D, E)
By concyclic_definition_0 on J, I, F, center(Circle(C, D, E)) we get center(Circle(C, D, E)) in Circle(F, I, J)
By sss_anti_congruence_v1 on C, I, H, I, C, H we get anti_congruent_triangles(C, H, I, I, H, C)
By sss_anti_congruence_v0 on H, A, J, H, J, A we get anti_congruent_triangles(A, H, J, J, H, A)
By sss_anti_congruence_v0 on H, I, C, H, C, I we get anti_congruent_triangles(C, H, I, I, H, C)
By aa_similarity on E, F, D, I, C, H we get similar_triangles(C, H, I, F, D, E)
By external_angle_bisector_definition_v0_r on C, F, C, midpoint(E, F) we get Line(F, midpoint(E, F)) == external_angle_bisector(C, midpoint(E, F), C)
By sss_anti_congruence_v0 on I, H, A, A, H, I we get anti_congruent_triangles(A, H, I, I, H, A)
By internal_angle_bisector_definition_v0_r on F, I, E, midpoint(E, F) we get Line(I, midpoint(E, F)) == internal_angle_bisector(E, midpoint(E, F), F)
By external_angle_bisector_definition_v0_r on midpoint(E, F), A, midpoint(E, F), I we get Line(A, I) == external_angle_bisector(midpoint(E, F), I, midpoint(E, F))
By external_angle_bisector_definition_v0_r on D, F, D, midpoint(E, F) we get Line(F, midpoint(E, F)) == external_angle_bisector(D, midpoint(E, F), D)
By sss_anti_congruence_v0 on C, H, I, I, H, C we get anti_congruent_triangles(C, H, I, I, H, C)
By isosceles_triangle_properties on H, C, J we get distance(C, H) == distance(H, J), angle(C, J, H) == angle(H, C, J) mod 360
By external_angle_bisector_definition_v0_r on F, A, J, I we get Line(A, I) == external_angle_bisector(F, I, J)
By concyclic_definition_0 on G, center(Circle(B, E, G)), center(Circle(D, E, G)), E we get E in Circle(G, center(Circle(B, E, G)), center(Circle(D, E, G)))
By external_angle_bisector_definition_v0_r on center(Circle(B, E, G)), D, center(Circle(B, E, G)), E we get Line(D, E) == external_angle_bisector(center(Circle(B, E, G)), E, center(Circle(B, E, G)))
By sss_anti_congruence_v1 on A, H, I, I, H, A we get anti_congruent_triangles(A, H, I, I, H, A)
By external_angle_bisector_definition_v0_r on E, I, E, midpoint(E, F) we get Line(I, midpoint(E, F)) == external_angle_bisector(E, midpoint(E, F), E)
By sss_anti_congruence_v0 on C, H, J, J, H, C we get anti_congruent_triangles(C, H, J, J, H, C)
By concyclic_definition_0 on F, I, center(Circle(C, D, E)), J we get J in Circle(F, I, center(Circle(C, D, E)))
By isosceles_triangle_properties on H, J, A we get distance(A, H) == distance(H, J), angle(H, J, A) == angle(J, A, H) mod 360
By sss_anti_congruence_v1 on H, J, A, H, A, J we get anti_congruent_triangles(A, H, J, J, H, A)
By sss_anti_congruence_v1 on H, J, A, H, A, J we get anti_congruent_triangles(A, H, J, J, H, A)
By sss_anti_congruence_v0 on I, H, A, A, H, I we get anti_congruent_triangles(A, H, I, I, H, A)
By aa_anti_similarity on F, E, D, I, C, H we get anti_similar_triangles(C, H, I, E, D, F)
By sss_anti_congruence_v0 on I, C, H, C, I, H we get anti_congruent_triangles(C, H, I, I, H, C)
By sss_anti_congruence_v0 on H, A, J, H, J, A we get anti_congruent_triangles(A, H, J, J, H, A)
By sss_anti_congruence_v0 on I, C, H, C, I, H we get anti_congruent_triangles(C, H, I, I, H, C)
By sss_anti_congruence_v1 on H, C, J, H, J, C we get anti_congruent_triangles(C, H, J, J, H, C)
By sss_anti_congruence_v0 on I, C, H, C, I, H we get anti_congruent_triangles(C, H, I, I, H, C)
By aa_similarity on J, C, H, E, F, I we get similar_triangles(C, H, J, F, I, E)
By external_angle_bisector_definition_v0_r on E, C, E, midpoint(E, F) we get Line(C, midpoint(E, F)) == external_angle_bisector(E, midpoint(E, F), E)
By concyclic_definition_0 on center(Circle(D, E, G)), center(Circle(B, E, G)), E, G we get G in Circle(E, center(Circle(B, E, G)), center(Circle(D, E, G)))
By sss_anti_congruence_v1 on H, I, A, H, A, I we get anti_congruent_triangles(A, H, I, I, H, A)
By internal_angle_bisector_definition_v0_r on C, D, C, midpoint(E, F) we get Line(D, midpoint(E, F)) == internal_angle_bisector(C, midpoint(E, F), C)
By sss_anti_congruence_v0 on I, H, A, A, H, I we get anti_congruent_triangles(A, H, I, I, H, A)
By sss_anti_congruence_v0 on A, I, H, I, A, H we get anti_congruent_triangles(A, H, I, I, H, A)
By external_angle_bisector_definition_v0_r on F, D, F, midpoint(E, F) we get Line(D, midpoint(E, F)) == external_angle_bisector(F, midpoint(E, F), F)
By concyclic_definition_0 on center(Circle(D, E, G)), E, G, center(Circle(B, E, G)) we get center(Circle(B, E, G)) in Circle(E, G, center(Circle(D, E, G)))
By sss_anti_congruence_v1 on C, J, H, J, C, H we get anti_congruent_triangles(C, H, J, J, H, C)
By power_of_a_point_on_circle on F, Circle(A, D, F) we get 0 == power_of_a_point(F, Circle(A, D, F))
By internal_angle_bisector_definition_v0_r on I, C, I, midpoint(E, F) we get Line(C, midpoint(E, F)) == internal_angle_bisector(I, midpoint(E, F), I)
By altitude_definition on center(Circle(C, D, E)), E, F, j we get j == altitude(center(Circle(C, D, E)), E, F)
By reverse_direction on H, J we get 180 == direction(H, J) - direction(J, H) mod 360
By reverse_direction on center(Circle(B, F, G)), G we get 180 == direction(center(Circle(B, F, G)), G) - direction(G, center(Circle(B, F, G))) mod 360
By sss_anti_congruence_v0 on H, I, C, H, C, I we get anti_congruent_triangles(C, H, I, I, H, C)
By sss_anti_congruence_v0 on A, I, H, I, A, H we get anti_congruent_triangles(A, H, I, I, H, A)
By sss_anti_congruence_v1 on H, J, A, H, A, J we get anti_congruent_triangles(A, H, J, J, H, A)
By sss_anti_congruence_v0 on A, J, H, J, A, H we get anti_congruent_triangles(A, H, J, J, H, A)
By sas_anti_congruence on C, H, J, J, H, C we get anti_congruent_triangles(C, H, J, J, H, C)
By sss_anti_congruence_v1 on C, I, H, I, C, H we get anti_congruent_triangles(C, H, I, I, H, C)
By sss_anti_congruence_v1 on J, H, C, C, H, J we get anti_congruent_triangles(C, H, J, J, H, C)
By aa_anti_similarity on F, C, E, I, H, A we get anti_similar_triangles(A, H, I, E, C, F)
By external_angle_bisector_definition_v0_r on I, E, I, midpoint(E, F) we get Line(E, midpoint(E, F)) == external_angle_bisector(I, midpoint(E, F), I)
By concyclic_definition_0 on I, J, center(Circle(C, D, E)), F we get F in Circle(I, J, center(Circle(C, D, E)))
By external_angle_bisector_definition_v0_r on I, F, I, midpoint(E, F) we get Line(F, midpoint(E, F)) == external_angle_bisector(I, midpoint(E, F), I)
By power_of_a_point_on_circle on I, Circle(A, D, F) we get 0 == power_of_a_point(I, Circle(A, D, F))
By concyclic_definition_0 on G, center(Circle(B, E, G)), E, center(Circle(D, E, G)) we get center(Circle(D, E, G)) in Circle(E, G, center(Circle(B, E, G)))
By sss_anti_congruence_v0 on H, I, C, H, C, I we get anti_congruent_triangles(C, H, I, I, H, C)
By sss_anti_congruence_v1 on H, C, I, H, I, C we get anti_congruent_triangles(C, H, I, I, H, C)
By sss_anti_congruence_v1 on C, J, H, J, C, H we get anti_congruent_triangles(C, H, J, J, H, C)
By sss_anti_congruence_v1 on H, C, I, H, I, C we get anti_congruent_triangles(C, H, I, I, H, C)
By aa_similarity on E, C, F, I, H, A we get similar_triangles(A, H, I, F, C, E)
By aa_anti_similarity on I, C, H, F, E, D we get anti_similar_triangles(C, H, I, E, D, F)
By external_angle_bisector_definition_v0_r on D, E, D, midpoint(E, F) we get Line(E, midpoint(E, F)) == external_angle_bisector(D, midpoint(E, F), D)
By sss_anti_congruence_v0 on H, J, C, H, C, J we get anti_congruent_triangles(C, H, J, J, H, C)
By perpendicular_lines_draw_intersection on altitude(I, D, E), Line(D, E) we get exists(line_intersection(Line(D, E), altitude(I, D, E)))
By external_angle_bisector_definition_v0_r on E, D, E, midpoint(E, F) we get Line(D, midpoint(E, F)) == external_angle_bisector(E, midpoint(E, F), E)
By sss_anti_congruence_v0 on A, J, H, J, A, H we get anti_congruent_triangles(A, H, J, J, H, A)
By aa_similarity on I, C, H, E, F, D we get similar_triangles(C, H, I, F, D, E)
By sss_anti_congruence_v1 on I, A, H, A, I, H we get anti_congruent_triangles(A, H, I, I, H, A)
By internal_angle_bisector_definition_v0_r on midpoint(E, F), D, midpoint(E, F), I we get Line(D, I) == internal_angle_bisector(midpoint(E, F), I, midpoint(E, F))
By sss_anti_congruence_v1 on I, A, H, A, I, H we get anti_congruent_triangles(A, H, I, I, H, A)
By external_angle_bisector_definition_v0_r on C, E, C, midpoint(E, F) we get Line(E, midpoint(E, F)) == external_angle_bisector(C, midpoint(E, F), C)
By sss_anti_congruence_v1 on A, H, I, I, H, A we get anti_congruent_triangles(A, H, I, I, H, A)
By sss_anti_congruence_v1 on H, C, J, H, J, C we get anti_congruent_triangles(C, H, J, J, H, C)
By internal_angle_bisector_definition_v0_r on midpoint(E, F), C, midpoint(E, F), D we get Line(C, D) == internal_angle_bisector(midpoint(E, F), D, midpoint(E, F))
By sss_anti_congruence_v0 on J, H, A, A, H, J we get anti_congruent_triangles(A, H, J, J, H, A)
By sss_anti_congruence_v0 on H, J, C, H, C, J we get anti_congruent_triangles(C, H, J, J, H, C)
By sss_anti_congruence_v0 on A, I, H, I, A, H we get anti_congruent_triangles(A, H, I, I, H, A)
By sss_anti_congruence_v0 on H, A, J, H, J, A we get anti_congruent_triangles(A, H, J, J, H, A)
By isosceles_triangle_properties on H, I, C we get distance(C, H) == distance(H, I), angle(H, I, C) == angle(I, C, H) mod 360
By sss_anti_congruence_v1 on I, H, C, C, H, I we get anti_congruent_triangles(C, H, I, I, H, C)
By aa_similarity on I, A, H, E, F, C we get similar_triangles(A, H, I, F, C, E)
By sss_anti_congruence_v1 on A, H, I, I, H, A we get anti_congruent_triangles(A, H, I, I, H, A)
By log_of_2_times_distance on C, A, H, I we get log(distance(A, C)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(H, I))
By aa_similarity on E, F, C, I, A, H we get similar_triangles(A, H, I, F, C, E)
By power_of_a_point_on_circle on A, Circle(A, D, F) we get 0 == power_of_a_point(A, Circle(A, D, F))
By internal_angle_bisector_definition_v0_r on I, midpoint(E, F), D, C we get internal_angle_bisector(D, C, I) == Line(C, midpoint(E, F))
By sss_anti_congruence_v1 on A, H, I, I, H, A we get anti_congruent_triangles(A, H, I, I, H, A)
By sss_anti_congruence_v1 on A, H, J, J, H, A we get anti_congruent_triangles(A, H, J, J, H, A)
By sss_anti_congruence_v1 on A, H, J, J, H, A we get anti_congruent_triangles(A, H, J, J, H, A)
By aa_anti_similarity on F, I, E, J, H, C we get anti_similar_triangles(C, H, J, E, I, F)
By internal_angle_bisector_definition_v0_r on midpoint(E, F), C, midpoint(E, F), I we get Line(C, I) == internal_angle_bisector(midpoint(E, F), I, midpoint(E, F))
By aa_similarity on E, F, I, J, C, H we get similar_triangles(C, H, J, F, I, E)
By sss_anti_congruence_v0 on C, H, J, J, H, C we get anti_congruent_triangles(C, H, J, J, H, C)
By sss_anti_congruence_v1 on H, I, A, H, A, I we get anti_congruent_triangles(A, H, I, I, H, A)
By sss_anti_congruence_v1 on H, I, A, H, A, I we get anti_congruent_triangles(A, H, I, I, H, A)
By sss_anti_congruence_v0 on C, H, I, I, H, C we get anti_congruent_triangles(C, H, I, I, H, C)
By perpendicular_angle_conditions_v0 on D, F, center(Circle(B, F, G)) we get angle(D, F, center(Circle(B, F, G))) == orientation(D, F, center(Circle(B, F, G))) mod 360
By sss_anti_congruence_v0 on H, A, J, H, J, A we get anti_congruent_triangles(A, H, J, J, H, A)
By aa_similarity on I, H, A, E, C, F we get similar_triangles(A, H, I, F, C, E)
By sss_anti_congruence_v1 on H, C, J, H, J, C we get anti_congruent_triangles(C, H, J, J, H, C)
By sss_anti_congruence_v1 on H, I, A, H, A, I we get anti_congruent_triangles(A, H, I, I, H, A)
By reverse_direction on center(Circle(B, F, G)), B we get 180 == direction(center(Circle(B, F, G)), B) - direction(B, center(Circle(B, F, G))) mod 360
By sss_anti_congruence_v1 on C, I, H, I, C, H we get anti_congruent_triangles(C, H, I, I, H, C)
By isosceles_triangle_properties on H, C, I we get distance(C, H) == distance(H, I), angle(C, I, H) == angle(H, C, I) mod 360
By sss_anti_congruence_v0 on C, H, J, J, H, C we get anti_congruent_triangles(C, H, J, J, H, C)
By sss_anti_congruence_v1 on H, C, I, H, I, C we get anti_congruent_triangles(C, H, I, I, H, C)
By sss_anti_congruence_v1 on A, H, I, I, H, A we get anti_congruent_triangles(A, H, I, I, H, A)
By sss_anti_congruence_v1 on J, H, C, C, H, J we get anti_congruent_triangles(C, H, J, J, H, C)
By sss_anti_congruence_v1 on I, H, C, C, H, I we get anti_congruent_triangles(C, H, I, I, H, C)
By aa_anti_similarity on I, H, A, F, C, E we get anti_similar_triangles(A, H, I, E, C, F)
By sss_anti_congruence_v0 on I, C, H, C, I, H we get anti_congruent_triangles(C, H, I, I, H, C)
By sas_anti_congruence on C, H, I, I, H, C we get anti_congruent_triangles(C, H, I, I, H, C)
By sss_anti_congruence_v1 on J, H, C, C, H, J we get anti_congruent_triangles(C, H, J, J, H, C)
By sss_anti_congruence_v0 on H, A, J, H, J, A we get anti_congruent_triangles(A, H, J, J, H, A)
By sss_anti_congruence_v0 on I, C, H, C, I, H we get anti_congruent_triangles(C, H, I, I, H, C)
By aa_anti_similarity on J, H, C, F, I, E we get anti_similar_triangles(C, H, J, E, I, F)
By sss_anti_congruence_v1 on C, I, H, I, C, H we get anti_congruent_triangles(C, H, I, I, H, C)
By sss_anti_congruence_v0 on J, H, A, A, H, J we get anti_congruent_triangles(A, H, J, J, H, A)
By perpendicular_angle_conditions_v0 on center(Circle(B, F, G)), F, D we get angle(center(Circle(B, F, G)), F, D) == orientation(D, center(Circle(B, F, G)), F) mod 360
By sss_anti_congruence_v1 on H, C, I, H, I, C we get anti_congruent_triangles(C, H, I, I, H, C)
By sss_anti_congruence_v1 on I, H, C, C, H, I we get anti_congruent_triangles(C, H, I, I, H, C)
By aa_anti_similarity on J, C, H, F, E, I we get anti_similar_triangles(C, H, J, E, I, F)
By aa_similarity on J, H, C, E, I, F we get similar_triangles(C, H, J, F, I, E)
By sss_anti_congruence_v1 on H, C, I, H, I, C we get anti_congruent_triangles(C, H, I, I, H, C)
By sss_anti_congruence_v0 on J, C, H, C, J, H we get anti_congruent_triangles(C, H, J, J, H, C)
By sss_anti_congruence_v1 on J, A, H, A, J, H we get anti_congruent_triangles(A, H, J, J, H, A)
By sss_anti_congruence_v1 on J, A, H, A, J, H we get anti_congruent_triangles(A, H, J, J, H, A)
By sss_anti_congruence_v1 on H, C, J, H, J, C we get anti_congruent_triangles(C, H, J, J, H, C)
By sss_anti_congruence_v0 on J, H, A, A, H, J we get anti_congruent_triangles(A, H, J, J, H, A)
By log_of_2_times_distance on C, A, H, J we get log(distance(A, C)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(H, J))
By sas_anti_congruence on A, H, J, J, H, A we get anti_congruent_triangles(A, H, J, J, H, A)
By sss_anti_congruence_v1 on I, A, H, A, I, H we get anti_congruent_triangles(A, H, I, I, H, A)
By isosceles_triangle_properties on H, I, A we get distance(A, H) == distance(H, I), angle(H, I, A) == angle(I, A, H) mod 360
By internal_angle_bisector_definition_v0_r on F, C, E, midpoint(E, F) we get Line(C, midpoint(E, F)) == internal_angle_bisector(E, midpoint(E, F), F)
By sss_anti_congruence_v0 on C, H, I, I, H, C we get anti_congruent_triangles(C, H, I, I, H, C)
By isosceles_triangle_properties on H, J, C we get distance(C, H) == distance(H, J), angle(H, J, C) == angle(J, C, H) mod 360
By aa_anti_similarity on F, E, C, I, A, H we get anti_similar_triangles(A, H, I, E, C, F)
By sss_anti_congruence_v0 on C, H, J, J, H, C we get anti_congruent_triangles(C, H, J, J, H, C)
By sss_anti_congruence_v0 on A, J, H, J, A, H we get anti_congruent_triangles(A, H, J, J, H, A)
By sas_anti_congruence on I, H, A, A, H, I we get anti_congruent_triangles(A, H, I, I, H, A)
By aa_similarity on E, D, F, I, H, C we get similar_triangles(C, H, I, F, D, E)
By sss_anti_congruence_v1 on H, J, A, H, A, J we get anti_congruent_triangles(A, H, J, J, H, A)
By reverse_direction on center(Circle(B, F, G)), F we get 180 == direction(center(Circle(B, F, G)), F) - direction(F, center(Circle(B, F, G))) mod 360
By sss_anti_congruence_v0 on C, H, I, I, H, C we get anti_congruent_triangles(C, H, I, I, H, C)
By sss_anti_congruence_v0 on H, A, I, H, I, A we get anti_congruent_triangles(A, H, I, I, H, A)
By power_of_a_point_in_circle on D, Circle(A, D, F) we get 0 == power_of_a_point(D, Circle(A, D, F))
By internal_angle_bisector_definition_v0_r on D, I, D, midpoint(E, F) we get Line(I, midpoint(E, F)) == internal_angle_bisector(D, midpoint(E, F), D)
By aa_similarity on E, I, F, J, H, C we get similar_triangles(C, H, J, F, I, E)
By sss_anti_congruence_v1 on I, H, C, C, H, I we get anti_congruent_triangles(C, H, I, I, H, C)
By reverse_direction on H, I we get 180 == direction(H, I) - direction(I, H) mod 360
By sss_anti_congruence_v1 on H, J, A, H, A, J we get anti_congruent_triangles(A, H, J, J, H, A)
By sas_anti_congruence on J, H, A, A, H, J we get anti_congruent_triangles(A, H, J, J, H, A)
By sss_anti_congruence_v1 on H, I, A, H, A, I we get anti_congruent_triangles(A, H, I, I, H, A)
By aa_anti_similarity on F, D, E, I, H, C we get anti_similar_triangles(C, H, I, E, D, F)
By sss_anti_congruence_v0 on H, I, C, H, C, I we get anti_congruent_triangles(C, H, I, I, H, C)
By internal_angle_bisector_definition_v0_r on C, I, C, midpoint(E, F) we get Line(I, midpoint(E, F)) == internal_angle_bisector(C, midpoint(E, F), C)
By sss_anti_congruence_v1 on C, J, H, J, C, H we get anti_congruent_triangles(C, H, J, J, H, C)
By internal_angle_bisector_definition_v0_r on C, midpoint(E, F), D, I we get internal_angle_bisector(C, I, D) == Line(I, midpoint(E, F))
By sss_anti_congruence_v1 on H, C, J, H, J, C we get anti_congruent_triangles(C, H, J, J, H, C)
By internal_angle_bisector_definition_v0_r on E, D, F, midpoint(E, F) we get Line(D, midpoint(E, F)) == internal_angle_bisector(E, midpoint(E, F), F)
By sss_anti_congruence_v1 on A, H, I, I, H, A we get anti_congruent_triangles(A, H, I, I, H, A)
By sss_anti_congruence_v0 on J, C, H, C, J, H we get anti_congruent_triangles(C, H, J, J, H, C)
By sss_anti_congruence_v1 on J, H, C, C, H, J we get anti_congruent_triangles(C, H, J, J, H, C)
By sss_anti_congruence_v0 on H, A, I, H, I, A we get anti_congruent_triangles(A, H, I, I, H, A)
By aa_anti_similarity on I, H, C, F, D, E we get anti_similar_triangles(C, H, I, E, D, F)
By sas_anti_congruence on J, H, C, C, H, J we get anti_congruent_triangles(C, H, J, J, H, C)
By sss_anti_congruence_v0 on J, H, A, A, H, J we get anti_congruent_triangles(A, H, J, J, H, A)
By sss_anti_congruence_v0 on H, J, C, H, C, J we get anti_congruent_triangles(C, H, J, J, H, C)
By aa_anti_similarity on I, A, H, F, E, C we get anti_similar_triangles(A, H, I, E, C, F)
By sss_anti_congruence_v1 on A, H, J, J, H, A we get anti_congruent_triangles(A, H, J, J, H, A)
By internal_angle_bisector_definition_v0_r on midpoint(E, F), I, midpoint(E, F), C we get Line(C, I) == internal_angle_bisector(midpoint(E, F), C, midpoint(E, F))
By sss_anti_congruence_v0 on A, J, H, J, A, H we get anti_congruent_triangles(A, H, J, J, H, A)
By sss_anti_congruence_v0 on H, A, I, H, I, A we get anti_congruent_triangles(A, H, I, I, H, A)
By sss_anti_congruence_v1 on A, H, J, J, H, A we get anti_congruent_triangles(A, H, J, J, H, A)
By sss_anti_congruence_v0 on J, C, H, C, J, H we get anti_congruent_triangles(C, H, J, J, H, C)
By sss_anti_congruence_v0 on J, C, H, C, J, H we get anti_congruent_triangles(C, H, J, J, H, C)
By sas_anti_congruence on A, H, I, I, H, A we get anti_congruent_triangles(A, H, I, I, H, A)
By internal_angle_bisector_definition_v0_r on midpoint(E, F), D, midpoint(E, F), C we get Line(C, D) == internal_angle_bisector(midpoint(E, F), C, midpoint(E, F))
By sss_anti_congruence_v0 on H, I, C, H, C, I we get anti_congruent_triangles(C, H, I, I, H, C)
By sss_anti_congruence_v1 on H, I, A, H, A, I we get anti_congruent_triangles(A, H, I, I, H, A)
By sss_anti_congruence_v0 on I, H, A, A, H, I we get anti_congruent_triangles(A, H, I, I, H, A)
By sss_anti_congruence_v0 on H, A, I, H, I, A we get anti_congruent_triangles(A, H, I, I, H, A)
By sss_anti_congruence_v0 on I, H, A, A, H, I we get anti_congruent_triangles(A, H, I, I, H, A)
By sss_anti_congruence_v1 on H, J, A, H, A, J we get anti_congruent_triangles(A, H, J, J, H, A)
By sss_anti_congruence_v0 on J, H, A, A, H, J we get anti_congruent_triangles(A, H, J, J, H, A)
By sss_anti_congruence_v0 on I, C, H, C, I, H we get anti_congruent_triangles(C, H, I, I, H, C)
By sss_anti_congruence_v1 on C, I, H, I, C, H we get anti_congruent_triangles(C, H, I, I, H, C)
By sss_anti_congruence_v1 on I, A, H, A, I, H we get anti_congruent_triangles(A, H, I, I, H, A)
By sss_anti_congruence_v1 on A, H, J, J, H, A we get anti_congruent_triangles(A, H, J, J, H, A)
By internal_angle_bisector_definition_v0_r on I, D, I, midpoint(E, F) we get Line(D, midpoint(E, F)) == internal_angle_bisector(I, midpoint(E, F), I)
By sss_anti_congruence_v0 on A, I, H, I, A, H we get anti_congruent_triangles(A, H, I, I, H, A)
By sss_anti_congruence_v0 on A, I, H, I, A, H we get anti_congruent_triangles(A, H, I, I, H, A)
By sss_anti_congruence_v1 on I, H, C, C, H, I we get anti_congruent_triangles(C, H, I, I, H, C)
By internal_angle_bisector_definition_v0_r on midpoint(E, F), I, midpoint(E, F), D we get Line(D, I) == internal_angle_bisector(midpoint(E, F), D, midpoint(E, F))
By sss_anti_congruence_v1 on J, A, H, A, J, H we get anti_congruent_triangles(A, H, J, J, H, A)
By sss_anti_congruence_v1 on J, A, H, A, J, H we get anti_congruent_triangles(A, H, J, J, H, A)
By sss_anti_congruence_v0 on H, A, I, H, I, A we get anti_congruent_triangles(A, H, I, I, H, A)
By sss_anti_congruence_v0 on J, H, A, A, H, J we get anti_congruent_triangles(A, H, J, J, H, A)
By sss_anti_congruence_v1 on C, J, H, J, C, H we get anti_congruent_triangles(C, H, J, J, H, C)
By sss_anti_congruence_v0 on A, I, H, I, A, H we get anti_congruent_triangles(A, H, I, I, H, A)
By sss_anti_congruence_v0 on I, H, A, A, H, I we get anti_congruent_triangles(A, H, I, I, H, A)
By internal_angle_bisector_definition_v0_r on D, C, D, midpoint(E, F) we get Line(C, midpoint(E, F)) == internal_angle_bisector(D, midpoint(E, F), D)
By sss_anti_congruence_v0 on C, H, I, I, H, C we get anti_congruent_triangles(C, H, I, I, H, C)
By sss_anti_congruence_v0 on H, A, I, H, I, A we get anti_congruent_triangles(A, H, I, I, H, A)
By sss_anti_congruence_v1 on J, H, C, C, H, J we get anti_congruent_triangles(C, H, J, J, H, C)
By sss_anti_congruence_v0 on A, J, H, J, A, H we get anti_congruent_triangles(A, H, J, J, H, A)
By sss_anti_congruence_v0 on H, J, C, H, C, J we get anti_congruent_triangles(C, H, J, J, H, C)
By sss_anti_congruence_v1 on J, A, H, A, J, H we get anti_congruent_triangles(A, H, J, J, H, A)
By sss_anti_congruence_v0 on C, H, J, J, H, C we get anti_congruent_triangles(C, H, J, J, H, C)
By sas_anti_congruence on I, H, C, C, H, I we get anti_congruent_triangles(C, H, I, I, H, C)
By sss_anti_congruence_v1 on C, J, H, J, C, H we get anti_congruent_triangles(C, H, J, J, H, C)
By sss_anti_congruence_v0 on H, A, J, H, J, A we get anti_congruent_triangles(A, H, J, J, H, A)
By sss_anti_congruence_v1 on J, A, H, A, J, H we get anti_congruent_triangles(A, H, J, J, H, A)
By sss_anti_congruence_v0 on H, I, C, H, C, I we get anti_congruent_triangles(C, H, I, I, H, C)
By sss_anti_congruence_v0 on H, J, C, H, C, J we get anti_congruent_triangles(C, H, J, J, H, C)
By isosceles_triangle_properties on H, A, J we get distance(A, H) == distance(H, J), angle(A, J, H) == angle(H, A, J) mod 360
By sss_anti_congruence_v1 on C, J, H, J, C, H we get anti_congruent_triangles(C, H, J, J, H, C)
By perpendicular_lines_draw_intersection on Line(D, F), Line(F, center(Circle(B, F, G))) we get exists(line_intersection(Line(D, F), Line(F, center(Circle(B, F, G)))))
By altitude_definition on orthocenter(D, E, I), J, G, i we get i == altitude(orthocenter(D, E, I), G, J)
By concyclic_definition_1 on center(Circle(C, D, E)), I, F, J we get Circle(F, I, J) == Circle(F, I, center(Circle(C, D, E)))
By altitude_definition on orthocenter(D, E, I), C, midpoint(E, F), Line(E, F) we get Line(E, F) == altitude(orthocenter(D, E, I), C, midpoint(E, F))
By anti_similar_triangle_basic_properties on center(Circle(D, E, G)), D, G, center(Circle(D, E, G)), G, D we get angle(center(Circle(D, E, G)), D, G) == 0 - angle(center(Circle(D, E, G)), G, D) mod 360, angle(D, G, center(Circle(D, E, G))) == 0 - angle(G, D, center(Circle(D, E, G))) mod 360, angle(G, center(Circle(D, E, G)), D) == 0 - angle(D, center(Circle(D, E, G)), G) mod 360, log(distance(D, center(Circle(D, E, G)))) + log(distance(D, G)) == log(distance(G, center(Circle(D, E, G)))) + log(distance(D, G)), log(distance(D, G)) + log(distance(D, center(Circle(D, E, G)))) == log(distance(D, G)) + log(distance(G, center(Circle(D, E, G)))), log(distance(D, center(Circle(D, E, G)))) + log(distance(D, center(Circle(D, E, G)))) == log(distance(G, center(Circle(D, E, G)))) + log(distance(G, center(Circle(D, E, G))))
By anti_similar_triangle_basic_properties on center(Circle(C, D, E)), F, C, center(Circle(C, D, E)), C, F we get angle(center(Circle(C, D, E)), F, C) == 0 - angle(center(Circle(C, D, E)), C, F) mod 360, angle(F, C, center(Circle(C, D, E))) == 0 - angle(C, F, center(Circle(C, D, E))) mod 360, angle(C, center(Circle(C, D, E)), F) == 0 - angle(F, center(Circle(C, D, E)), C) mod 360, log(distance(C, center(Circle(C, D, E)))) + log(distance(C, F)) == log(distance(F, center(Circle(C, D, E)))) + log(distance(C, F)), log(distance(C, F)) + log(distance(C, center(Circle(C, D, E)))) == log(distance(C, F)) + log(distance(F, center(Circle(C, D, E)))), log(distance(C, center(Circle(C, D, E)))) + log(distance(C, center(Circle(C, D, E)))) == log(distance(F, center(Circle(C, D, E)))) + log(distance(F, center(Circle(C, D, E))))
By concyclic_definition_1 on center(Circle(C, D, E)), F, J, I we get Circle(F, I, J) == Circle(F, J, center(Circle(C, D, E)))
By power_of_a_point_definition on H, A, F, Circle(A, D, F) we get log(distance(A, H)) + log(distance(F, H)) == log(power_of_a_point(H, Circle(A, D, F)))
By concyclic_definition_1 on I, center(Circle(C, D, E)), F, J we get Circle(F, I, center(Circle(C, D, E))) == Circle(F, J, center(Circle(C, D, E)))
By altitude_definition on F, center(Circle(C, D, E)), C, Line(E, F) we get Line(E, F) == altitude(F, C, center(Circle(C, D, E)))
By anti_similar_triangle_basic_properties on G, center(Circle(B, E, G)), E, E, center(Circle(B, E, G)), G we get angle(G, center(Circle(B, E, G)), E) == 0 - angle(E, center(Circle(B, E, G)), G) mod 360, angle(center(Circle(B, E, G)), E, G) == 0 - angle(center(Circle(B, E, G)), G, E) mod 360, angle(E, G, center(Circle(B, E, G))) == 0 - angle(G, E, center(Circle(B, E, G))) mod 360, log(distance(E, center(Circle(B, E, G)))) + log(distance(E, center(Circle(B, E, G)))) == log(distance(G, center(Circle(B, E, G)))) + log(distance(G, center(Circle(B, E, G)))), log(distance(E, center(Circle(B, E, G)))) + log(distance(E, G)) == log(distance(G, center(Circle(B, E, G)))) + log(distance(E, G)), log(distance(E, G)) + log(distance(E, center(Circle(B, E, G)))) == log(distance(E, G)) + log(distance(G, center(Circle(B, E, G))))
By altitude_definition on E, D, center(Circle(C, D, E)), Line(E, F) we get Line(E, F) == altitude(E, D, center(Circle(C, D, E)))
By altitude_definition on orthocenter(D, E, I), E, center(Circle(D, E, G)), altitude(I, D, E) we get altitude(I, D, E) == altitude(orthocenter(D, E, I), E, center(Circle(D, E, G)))
By concyclic_definition_1 on center(Circle(D, E, G)), center(Circle(B, E, G)), E, G we get Circle(E, G, center(Circle(B, E, G))) == Circle(E, center(Circle(B, E, G)), center(Circle(D, E, G)))
By altitude_definition on orthocenter(D, E, I), midpoint(E, F), D, Line(E, F) we get Line(E, F) == altitude(orthocenter(D, E, I), D, midpoint(E, F))
By altitude_definition on center(Circle(D, E, G)), center(Circle(B, E, G)), E, Line(D, E) we get Line(D, E) == altitude(center(Circle(D, E, G)), E, center(Circle(B, E, G)))
By sss_anti_congruence_v1 on J, I, H, I, J, H we get anti_congruent_triangles(H, I, J, H, J, I)
By sss_anti_congruence_v0 on H, I, J, H, J, I we get anti_congruent_triangles(H, I, J, H, J, I)
By altitude_definition on center(Circle(C, D, E)), midpoint(E, F), F, j we get j == altitude(center(Circle(C, D, E)), F, midpoint(E, F))
By anti_similar_triangle_basic_properties on center(Circle(C, D, E)), C, J, center(Circle(C, D, E)), J, C we get angle(center(Circle(C, D, E)), C, J) == 0 - angle(center(Circle(C, D, E)), J, C) mod 360, angle(C, J, center(Circle(C, D, E))) == 0 - angle(J, C, center(Circle(C, D, E))) mod 360, angle(J, center(Circle(C, D, E)), C) == 0 - angle(C, center(Circle(C, D, E)), J) mod 360, log(distance(C, center(Circle(C, D, E)))) + log(distance(C, J)) == log(distance(J, center(Circle(C, D, E)))) + log(distance(C, J)), log(distance(C, J)) + log(distance(C, center(Circle(C, D, E)))) == log(distance(C, J)) + log(distance(J, center(Circle(C, D, E)))), log(distance(C, center(Circle(C, D, E)))) + log(distance(C, center(Circle(C, D, E)))) == log(distance(J, center(Circle(C, D, E)))) + log(distance(J, center(Circle(C, D, E))))
By altitude_definition on orthocenter(D, E, I), E, D, altitude(I, D, E) we get altitude(I, D, E) == altitude(orthocenter(D, E, I), D, E)
By concyclic_definition_1 on J, center(Circle(C, D, E)), I, F we get Circle(F, I, center(Circle(C, D, E))) == Circle(I, J, center(Circle(C, D, E)))
By power_of_a_point_definition on C, D, I, Circle(A, D, F) we get log(distance(C, D)) + log(distance(C, I)) == log(power_of_a_point(C, Circle(A, D, F)))
By sss_anti_congruence_v1 on J, I, H, I, J, H we get anti_congruent_triangles(H, I, J, H, J, I)
By altitude_definition on orthocenter(D, E, I), E, I, i we get i == altitude(orthocenter(D, E, I), E, I)
By concyclic_definition_1 on center(Circle(D, E, G)), E, G, center(Circle(B, E, G)) we get Circle(E, G, center(Circle(B, E, G))) == Circle(E, G, center(Circle(D, E, G)))
By altitude_definition on D, center(Circle(B, F, G)), F, Line(D, F) we get Line(D, F) == altitude(D, F, center(Circle(B, F, G)))
By sss_anti_congruence_v1 on I, H, J, J, H, I we get anti_congruent_triangles(H, I, J, H, J, I)
By altitude_definition on orthocenter(D, E, I), D, center(Circle(C, D, E)), Line(E, F) we get Line(E, F) == altitude(orthocenter(D, E, I), D, center(Circle(C, D, E)))
By concyclic_definition_1 on center(Circle(B, E, G)), G, center(Circle(D, E, G)), E we get Circle(E, G, center(Circle(D, E, G))) == Circle(G, center(Circle(B, E, G)), center(Circle(D, E, G)))
By sas_anti_congruence on J, H, I, I, H, J we get anti_congruent_triangles(H, I, J, H, J, I)
By anti_similar_triangle_basic_properties on center(Circle(C, D, E)), F, D, center(Circle(C, D, E)), D, F we get angle(center(Circle(C, D, E)), F, D) == 0 - angle(center(Circle(C, D, E)), D, F) mod 360, angle(F, D, center(Circle(C, D, E))) == 0 - angle(D, F, center(Circle(C, D, E))) mod 360, angle(D, center(Circle(C, D, E)), F) == 0 - angle(F, center(Circle(C, D, E)), D) mod 360, log(distance(D, center(Circle(C, D, E)))) + log(distance(D, F)) == log(distance(F, center(Circle(C, D, E)))) + log(distance(D, F)), log(distance(D, F)) + log(distance(D, center(Circle(C, D, E)))) == log(distance(D, F)) + log(distance(F, center(Circle(C, D, E)))), log(distance(D, center(Circle(C, D, E)))) + log(distance(D, center(Circle(C, D, E)))) == log(distance(F, center(Circle(C, D, E)))) + log(distance(F, center(Circle(C, D, E))))
By anti_similar_triangle_basic_properties on G, center(Circle(D, E, G)), E, E, center(Circle(D, E, G)), G we get angle(G, center(Circle(D, E, G)), E) == 0 - angle(E, center(Circle(D, E, G)), G) mod 360, angle(center(Circle(D, E, G)), E, G) == 0 - angle(center(Circle(D, E, G)), G, E) mod 360, angle(E, G, center(Circle(D, E, G))) == 0 - angle(G, E, center(Circle(D, E, G))) mod 360, log(distance(E, center(Circle(D, E, G)))) + log(distance(E, center(Circle(D, E, G)))) == log(distance(G, center(Circle(D, E, G)))) + log(distance(G, center(Circle(D, E, G)))), log(distance(E, center(Circle(D, E, G)))) + log(distance(E, G)) == log(distance(G, center(Circle(D, E, G)))) + log(distance(E, G)), log(distance(E, G)) + log(distance(E, center(Circle(D, E, G)))) == log(distance(E, G)) + log(distance(G, center(Circle(D, E, G))))
By radical_axis_definition_v0 on center(Circle(D, E, G)), Circle(D, E, G), Circle(C, D, E) we get power_of_a_point(center(Circle(D, E, G)), Circle(C, D, E)) == power_of_a_point(center(Circle(D, E, G)), Circle(D, E, G))
By altitude_definition on center(Circle(C, D, E)), A, I, j we get j == altitude(center(Circle(C, D, E)), A, I)
By isosceles_triangle_properties on center(Circle(B, F, G)), B, G we get distance(B, center(Circle(B, F, G))) == distance(G, center(Circle(B, F, G))), angle(B, G, center(Circle(B, F, G))) == angle(center(Circle(B, F, G)), B, G) mod 360
By sas_anti_congruence on B, center(Circle(B, F, G)), G, G, center(Circle(B, F, G)), B we get anti_congruent_triangles(B, G, center(Circle(B, F, G)), G, B, center(Circle(B, F, G)))
By concyclic_definition_1 on G, center(Circle(D, E, G)), E, center(Circle(B, E, G)) we get Circle(E, G, center(Circle(D, E, G))) == Circle(E, center(Circle(B, E, G)), center(Circle(D, E, G)))
By sss_anti_congruence_v0 on H, I, J, H, J, I we get anti_congruent_triangles(H, I, J, H, J, I)
By anti_similar_triangle_basic_properties on center(Circle(C, D, E)), E, J, center(Circle(C, D, E)), J, E we get angle(center(Circle(C, D, E)), E, J) == 0 - angle(center(Circle(C, D, E)), J, E) mod 360, angle(E, J, center(Circle(C, D, E))) == 0 - angle(J, E, center(Circle(C, D, E))) mod 360, angle(J, center(Circle(C, D, E)), E) == 0 - angle(E, center(Circle(C, D, E)), J) mod 360, log(distance(E, center(Circle(C, D, E)))) + log(distance(E, J)) == log(distance(J, center(Circle(C, D, E)))) + log(distance(E, J)), log(distance(E, J)) + log(distance(E, center(Circle(C, D, E)))) == log(distance(E, J)) + log(distance(J, center(Circle(C, D, E)))), log(distance(E, center(Circle(C, D, E)))) + log(distance(E, center(Circle(C, D, E)))) == log(distance(J, center(Circle(C, D, E)))) + log(distance(J, center(Circle(C, D, E))))
By altitude_definition on orthocenter(D, E, I), D, C, Line(E, F) we get Line(E, F) == altitude(orthocenter(D, E, I), C, D)
By concyclic_definition_1 on F, center(Circle(C, D, E)), J, I we get Circle(F, J, center(Circle(C, D, E))) == Circle(I, J, center(Circle(C, D, E)))
By sss_anti_congruence_v0 on J, H, I, I, H, J we get anti_congruent_triangles(H, I, J, H, J, I)
By anti_similar_triangle_basic_properties on F, J, center(Circle(C, D, E)), J, F, center(Circle(C, D, E)) we get angle(F, J, center(Circle(C, D, E))) == 0 - angle(J, F, center(Circle(C, D, E))) mod 360, angle(J, center(Circle(C, D, E)), F) == 0 - angle(F, center(Circle(C, D, E)), J) mod 360, angle(center(Circle(C, D, E)), F, J) == 0 - angle(center(Circle(C, D, E)), J, F) mod 360, log(distance(F, J)) + log(distance(F, center(Circle(C, D, E)))) == log(distance(F, J)) + log(distance(J, center(Circle(C, D, E)))), log(distance(F, center(Circle(C, D, E)))) + log(distance(F, center(Circle(C, D, E)))) == log(distance(J, center(Circle(C, D, E)))) + log(distance(J, center(Circle(C, D, E)))), log(distance(F, center(Circle(C, D, E)))) + log(distance(F, J)) == log(distance(J, center(Circle(C, D, E)))) + log(distance(F, J))
By anti_similar_triangle_basic_properties on E, center(Circle(C, D, E)), F, F, center(Circle(C, D, E)), E we get angle(E, center(Circle(C, D, E)), F) == 0 - angle(F, center(Circle(C, D, E)), E) mod 360, angle(center(Circle(C, D, E)), F, E) == 0 - angle(center(Circle(C, D, E)), E, F) mod 360, angle(F, E, center(Circle(C, D, E))) == 0 - angle(E, F, center(Circle(C, D, E))) mod 360, log(distance(E, center(Circle(C, D, E)))) + log(distance(E, center(Circle(C, D, E)))) == log(distance(F, center(Circle(C, D, E)))) + log(distance(F, center(Circle(C, D, E)))), log(distance(E, center(Circle(C, D, E)))) + log(distance(E, F)) == log(distance(F, center(Circle(C, D, E)))) + log(distance(E, F)), log(distance(E, F)) + log(distance(E, center(Circle(C, D, E)))) == log(distance(E, F)) + log(distance(F, center(Circle(C, D, E))))
By altitude_definition on center(Circle(C, D, E)), E, midpoint(E, F), j we get j == altitude(center(Circle(C, D, E)), E, midpoint(E, F))
By anti_similar_triangle_basic_properties on center(Circle(C, D, E)), E, C, center(Circle(C, D, E)), C, E we get angle(center(Circle(C, D, E)), E, C) == 0 - angle(center(Circle(C, D, E)), C, E) mod 360, angle(E, C, center(Circle(C, D, E))) == 0 - angle(C, E, center(Circle(C, D, E))) mod 360, angle(C, center(Circle(C, D, E)), E) == 0 - angle(E, center(Circle(C, D, E)), C) mod 360, log(distance(C, center(Circle(C, D, E)))) + log(distance(C, E)) == log(distance(E, center(Circle(C, D, E)))) + log(distance(C, E)), log(distance(C, E)) + log(distance(C, center(Circle(C, D, E)))) == log(distance(C, E)) + log(distance(E, center(Circle(C, D, E)))), log(distance(C, center(Circle(C, D, E)))) + log(distance(C, center(Circle(C, D, E)))) == log(distance(E, center(Circle(C, D, E)))) + log(distance(E, center(Circle(C, D, E))))
By sss_anti_congruence_v0 on J, H, I, I, H, J we get anti_congruent_triangles(H, I, J, H, J, I)
By anti_similar_triangle_basic_properties on E, D, center(Circle(C, D, E)), D, E, center(Circle(C, D, E)) we get angle(E, D, center(Circle(C, D, E))) == 0 - angle(D, E, center(Circle(C, D, E))) mod 360, angle(D, center(Circle(C, D, E)), E) == 0 - angle(E, center(Circle(C, D, E)), D) mod 360, angle(center(Circle(C, D, E)), E, D) == 0 - angle(center(Circle(C, D, E)), D, E) mod 360, log(distance(D, E)) + log(distance(D, center(Circle(C, D, E)))) == log(distance(D, E)) + log(distance(E, center(Circle(C, D, E)))), log(distance(D, center(Circle(C, D, E)))) + log(distance(D, center(Circle(C, D, E)))) == log(distance(E, center(Circle(C, D, E)))) + log(distance(E, center(Circle(C, D, E)))), log(distance(D, center(Circle(C, D, E)))) + log(distance(D, E)) == log(distance(E, center(Circle(C, D, E)))) + log(distance(D, E))
By altitude_definition on orthocenter(D, E, I), I, midpoint(E, F), Line(E, F) we get Line(E, F) == altitude(orthocenter(D, E, I), I, midpoint(E, F))
By sas_anti_congruence on I, H, J, J, H, I we get anti_congruent_triangles(H, I, J, H, J, I)
By anti_similar_triangle_basic_properties on B, center(Circle(B, E, G)), G, G, center(Circle(B, E, G)), B we get angle(B, center(Circle(B, E, G)), G) == 0 - angle(G, center(Circle(B, E, G)), B) mod 360, angle(center(Circle(B, E, G)), G, B) == 0 - angle(center(Circle(B, E, G)), B, G) mod 360, angle(G, B, center(Circle(B, E, G))) == 0 - angle(B, G, center(Circle(B, E, G))) mod 360, log(distance(B, center(Circle(B, E, G)))) + log(distance(B, center(Circle(B, E, G)))) == log(distance(G, center(Circle(B, E, G)))) + log(distance(G, center(Circle(B, E, G)))), log(distance(B, center(Circle(B, E, G)))) + log(distance(B, G)) == log(distance(G, center(Circle(B, E, G)))) + log(distance(B, G)), log(distance(B, G)) + log(distance(B, center(Circle(B, E, G)))) == log(distance(B, G)) + log(distance(G, center(Circle(B, E, G))))
By concyclic_definition_1 on E, center(Circle(B, E, G)), G, center(Circle(D, E, G)) we get Circle(E, G, center(Circle(B, E, G))) == Circle(G, center(Circle(B, E, G)), center(Circle(D, E, G)))
By concyclic_definition_1 on center(Circle(C, D, E)), J, I, F we get Circle(F, I, J) == Circle(I, J, center(Circle(C, D, E)))
By altitude_definition on A, D, center(Circle(C, D, E)), Line(A, I) we get Line(A, I) == altitude(A, D, center(Circle(C, D, E)))
By radical_axis_definition_v0 on orthocenter(D, E, I), Circle(B, E, G), Circle(B, F, G) we get power_of_a_point(orthocenter(D, E, I), Circle(B, E, G)) == power_of_a_point(orthocenter(D, E, I), Circle(B, F, G))
By altitude_definition on orthocenter(D, E, I), J, I, i we get i == altitude(orthocenter(D, E, I), I, J)
By altitude_definition on center(Circle(B, F, G)), D, F, Line(F, center(Circle(B, F, G))) we get Line(F, center(Circle(B, F, G))) == altitude(center(Circle(B, F, G)), D, F)
By sss_anti_congruence_v0 on I, J, H, J, I, H we get anti_congruent_triangles(H, I, J, H, J, I)
By altitude_definition on F, D, center(Circle(C, D, E)), Line(E, F) we get Line(E, F) == altitude(F, D, center(Circle(C, D, E)))
By altitude_definition on I, center(Circle(D, E, G)), E, altitude(I, D, E) we get altitude(I, D, E) == altitude(I, E, center(Circle(D, E, G)))
By altitude_definition on A, C, center(Circle(C, D, E)), Line(A, I) we get Line(A, I) == altitude(A, C, center(Circle(C, D, E)))
By sss_anti_congruence_v0 on H, I, J, H, J, I we get anti_congruent_triangles(H, I, J, H, J, I)
By sss_anti_congruence_v0 on J, H, I, I, H, J we get anti_congruent_triangles(H, I, J, H, J, I)
By isosceles_triangle_properties on H, I, J we get distance(H, I) == distance(H, J), angle(H, I, J) == angle(I, J, H) mod 360
By concyclic_definition_1 on G, center(Circle(B, E, G)), center(Circle(D, E, G)), E we get Circle(E, center(Circle(B, E, G)), center(Circle(D, E, G))) == Circle(G, center(Circle(B, E, G)), center(Circle(D, E, G)))
By sss_anti_congruence_v1 on I, H, J, J, H, I we get anti_congruent_triangles(H, I, J, H, J, I)
By anti_similar_triangle_basic_properties on center(Circle(C, D, E)), J, D, center(Circle(C, D, E)), D, J we get angle(center(Circle(C, D, E)), J, D) == 0 - angle(center(Circle(C, D, E)), D, J) mod 360, angle(J, D, center(Circle(C, D, E))) == 0 - angle(D, J, center(Circle(C, D, E))) mod 360, angle(D, center(Circle(C, D, E)), J) == 0 - angle(J, center(Circle(C, D, E)), D) mod 360, log(distance(D, center(Circle(C, D, E)))) + log(distance(D, J)) == log(distance(J, center(Circle(C, D, E)))) + log(distance(D, J)), log(distance(D, J)) + log(distance(D, center(Circle(C, D, E)))) == log(distance(D, J)) + log(distance(J, center(Circle(C, D, E)))), log(distance(D, center(Circle(C, D, E)))) + log(distance(D, center(Circle(C, D, E)))) == log(distance(J, center(Circle(C, D, E)))) + log(distance(J, center(Circle(C, D, E))))
By sss_anti_congruence_v1 on H, J, I, H, I, J we get anti_congruent_triangles(H, I, J, H, J, I)
By sss_anti_congruence_v0 on H, I, J, H, J, I we get anti_congruent_triangles(H, I, J, H, J, I)
By altitude_definition on orthocenter(D, E, I), D, I, Line(E, F) we get Line(E, F) == altitude(orthocenter(D, E, I), D, I)
By sss_anti_congruence_v1 on I, H, J, J, H, I we get anti_congruent_triangles(H, I, J, H, J, I)
By sss_anti_congruence_v0 on J, H, I, I, H, J we get anti_congruent_triangles(H, I, J, H, J, I)
By sss_anti_congruence_v0 on I, J, H, J, I, H we get anti_congruent_triangles(H, I, J, H, J, I)
By altitude_definition on orthocenter(D, E, I), C, I, Line(E, F) we get Line(E, F) == altitude(orthocenter(D, E, I), C, I)
By altitude_definition on center(Circle(B, E, G)), E, center(Circle(D, E, G)), f we get f == altitude(center(Circle(B, E, G)), E, center(Circle(D, E, G)))
By power_of_a_point_definition on midpoint(E, F), D, I, Circle(A, D, F) we get log(power_of_a_point(midpoint(E, F), Circle(A, D, F))) == log(distance(D, midpoint(E, F))) + log(distance(I, midpoint(E, F)))
By altitude_definition on E, C, center(Circle(C, D, E)), Line(E, F) we get Line(E, F) == altitude(E, C, center(Circle(C, D, E)))
By altitude_definition on orthocenter(D, E, I), E, G, i we get i == altitude(orthocenter(D, E, I), E, G)
By altitude_definition on orthocenter(D, E, I), G, I, i we get i == altitude(orthocenter(D, E, I), G, I)
By isosceles_triangle_properties on center(Circle(B, F, G)), G, F we get distance(F, center(Circle(B, F, G))) == distance(G, center(Circle(B, F, G))), angle(G, F, center(Circle(B, F, G))) == angle(center(Circle(B, F, G)), G, F) mod 360
By sss_anti_congruence_v1 on J, I, H, I, J, H we get anti_congruent_triangles(H, I, J, H, J, I)
By sss_anti_congruence_v1 on H, J, I, H, I, J we get anti_congruent_triangles(H, I, J, H, J, I)
By sss_anti_congruence_v1 on I, H, J, J, H, I we get anti_congruent_triangles(H, I, J, H, J, I)
By sss_anti_congruence_v0 on I, J, H, J, I, H we get anti_congruent_triangles(H, I, J, H, J, I)
By isosceles_triangle_properties on center(Circle(B, F, G)), F, G we get distance(F, center(Circle(B, F, G))) == distance(G, center(Circle(B, F, G))), angle(F, G, center(Circle(B, F, G))) == angle(center(Circle(B, F, G)), F, G) mod 360
By sss_anti_congruence_v1 on H, J, I, H, I, J we get anti_congruent_triangles(H, I, J, H, J, I)
By altitude_definition on orthocenter(D, E, I), E, J, i we get i == altitude(orthocenter(D, E, I), E, J)
By sss_anti_congruence_v1 on J, I, H, I, J, H we get anti_congruent_triangles(H, I, J, H, J, I)
By sss_anti_congruence_v0 on H, I, J, H, J, I we get anti_congruent_triangles(H, I, J, H, J, I)
By sas_anti_congruence on F, center(Circle(B, F, G)), B, B, center(Circle(B, F, G)), F we get anti_congruent_triangles(B, F, center(Circle(B, F, G)), F, B, center(Circle(B, F, G)))
By altitude_definition on orthocenter(D, E, I), center(Circle(C, D, E)), C, Line(E, F) we get Line(E, F) == altitude(orthocenter(D, E, I), C, center(Circle(C, D, E)))
By sss_anti_congruence_v0 on J, H, I, I, H, J we get anti_congruent_triangles(H, I, J, H, J, I)
By power_of_a_point_definition on J, D, A, Circle(A, D, F) we get log(distance(D, J)) + log(distance(A, J)) == log(power_of_a_point(J, Circle(A, D, F)))
By sss_anti_congruence_v1 on H, J, I, H, I, J we get anti_congruent_triangles(H, I, J, H, J, I)
By sas_anti_congruence on F, center(Circle(B, F, G)), G, G, center(Circle(B, F, G)), F we get anti_congruent_triangles(F, G, center(Circle(B, F, G)), G, F, center(Circle(B, F, G)))
By sss_anti_congruence_v1 on H, J, I, H, I, J we get anti_congruent_triangles(H, I, J, H, J, I)
By sss_anti_congruence_v0 on H, I, J, H, J, I we get anti_congruent_triangles(H, I, J, H, J, I)
By sss_anti_congruence_v0 on I, J, H, J, I, H we get anti_congruent_triangles(H, I, J, H, J, I)
By sss_anti_congruence_v1 on J, I, H, I, J, H we get anti_congruent_triangles(H, I, J, H, J, I)
By sss_anti_congruence_v1 on H, J, I, H, I, J we get anti_congruent_triangles(H, I, J, H, J, I)
By sss_anti_congruence_v0 on I, J, H, J, I, H we get anti_congruent_triangles(H, I, J, H, J, I)
By sss_anti_congruence_v1 on I, H, J, J, H, I we get anti_congruent_triangles(H, I, J, H, J, I)
By sas_anti_congruence on B, center(Circle(B, F, G)), F, F, center(Circle(B, F, G)), B we get anti_congruent_triangles(B, F, center(Circle(B, F, G)), F, B, center(Circle(B, F, G)))
By sss_anti_congruence_v1 on I, H, J, J, H, I we get anti_congruent_triangles(H, I, J, H, J, I)
By sss_anti_congruence_v0 on J, H, I, I, H, J we get anti_congruent_triangles(H, I, J, H, J, I)
By sas_anti_congruence on G, center(Circle(B, F, G)), F, F, center(Circle(B, F, G)), G we get anti_congruent_triangles(F, G, center(Circle(B, F, G)), G, F, center(Circle(B, F, G)))
By isosceles_triangle_properties on H, J, I we get distance(H, I) == distance(H, J), angle(H, J, I) == angle(J, I, H) mod 360
By sss_anti_congruence_v0 on I, J, H, J, I, H we get anti_congruent_triangles(H, I, J, H, J, I)
By sss_anti_congruence_v1 on J, I, H, I, J, H we get anti_congruent_triangles(H, I, J, H, J, I)
By isosceles_triangle_properties on center(Circle(B, F, G)), G, B we get distance(B, center(Circle(B, F, G))) == distance(G, center(Circle(B, F, G))), angle(G, B, center(Circle(B, F, G))) == angle(center(Circle(B, F, G)), G, B) mod 360
By isosceles_triangle_properties on center(Circle(B, F, G)), B, F we get distance(B, center(Circle(B, F, G))) == distance(F, center(Circle(B, F, G))), angle(B, F, center(Circle(B, F, G))) == angle(center(Circle(B, F, G)), B, F) mod 360
By sas_anti_congruence on G, center(Circle(B, F, G)), B, B, center(Circle(B, F, G)), G we get anti_congruent_triangles(B, G, center(Circle(B, F, G)), G, B, center(Circle(B, F, G)))
By isosceles_triangle_properties on center(Circle(B, F, G)), F, B we get distance(B, center(Circle(B, F, G))) == distance(F, center(Circle(B, F, G))), angle(F, B, center(Circle(B, F, G))) == angle(center(Circle(B, F, G)), F, B) mod 360
By power_of_a_point_definition on C, F, A, Circle(A, D, F) we get log(distance(C, F)) + log(distance(A, C)) == log(power_of_a_point(C, Circle(A, D, F)))
By anti_similar_triangle_basic_properties on center(Circle(C, D, E)), E, C, center(Circle(C, D, E)), F, C we get angle(center(Circle(C, D, E)), E, C) == 0 - angle(center(Circle(C, D, E)), F, C) mod 360, angle(E, C, center(Circle(C, D, E))) == 0 - angle(F, C, center(Circle(C, D, E))) mod 360, angle(C, center(Circle(C, D, E)), E) == 0 - angle(C, center(Circle(C, D, E)), F) mod 360, log(distance(E, center(Circle(C, D, E)))) + log(distance(C, F)) == log(distance(F, center(Circle(C, D, E)))) + log(distance(C, E)), log(distance(C, E)) + log(distance(C, center(Circle(C, D, E)))) == log(distance(C, F)) + log(distance(C, center(Circle(C, D, E)))), log(distance(C, center(Circle(C, D, E)))) + log(distance(E, center(Circle(C, D, E)))) == log(distance(C, center(Circle(C, D, E)))) + log(distance(F, center(Circle(C, D, E))))
By similar_triangle_basic_properties on center(Circle(C, D, E)), C, F, center(Circle(C, D, E)), E, C we get angle(center(Circle(C, D, E)), C, F) == angle(center(Circle(C, D, E)), E, C) mod 360, angle(C, F, center(Circle(C, D, E))) == angle(E, C, center(Circle(C, D, E))) mod 360, angle(C, center(Circle(C, D, E)), E) == angle(F, center(Circle(C, D, E)), C) mod 360, log(distance(C, center(Circle(C, D, E)))) + log(distance(C, E)) == log(distance(E, center(Circle(C, D, E)))) + log(distance(C, F)), log(distance(C, E)) + log(distance(F, center(Circle(C, D, E)))) == log(distance(C, F)) + log(distance(C, center(Circle(C, D, E)))), log(distance(C, center(Circle(C, D, E)))) + log(distance(C, center(Circle(C, D, E)))) == log(distance(F, center(Circle(C, D, E)))) + log(distance(E, center(Circle(C, D, E))))
By anti_similar_triangle_basic_properties on center(Circle(C, D, E)), D, E, center(Circle(C, D, E)), D, F we get angle(center(Circle(C, D, E)), D, E) == 0 - angle(center(Circle(C, D, E)), D, F) mod 360, angle(D, E, center(Circle(C, D, E))) == 0 - angle(D, F, center(Circle(C, D, E))) mod 360, angle(E, center(Circle(C, D, E)), D) == 0 - angle(F, center(Circle(C, D, E)), D) mod 360, log(distance(D, center(Circle(C, D, E)))) + log(distance(D, E)) == log(distance(D, center(Circle(C, D, E)))) + log(distance(D, F)), log(distance(D, E)) + log(distance(F, center(Circle(C, D, E)))) == log(distance(D, F)) + log(distance(E, center(Circle(C, D, E)))), log(distance(E, center(Circle(C, D, E)))) + log(distance(D, center(Circle(C, D, E)))) == log(distance(F, center(Circle(C, D, E)))) + log(distance(D, center(Circle(C, D, E))))
By anti_similar_triangle_basic_properties on D, center(Circle(C, D, E)), E, D, center(Circle(C, D, E)), F we get angle(D, center(Circle(C, D, E)), E) == 0 - angle(D, center(Circle(C, D, E)), F) mod 360, angle(center(Circle(C, D, E)), E, D) == 0 - angle(center(Circle(C, D, E)), F, D) mod 360, angle(E, D, center(Circle(C, D, E))) == 0 - angle(F, D, center(Circle(C, D, E))) mod 360, log(distance(D, center(Circle(C, D, E)))) + log(distance(E, center(Circle(C, D, E)))) == log(distance(D, center(Circle(C, D, E)))) + log(distance(F, center(Circle(C, D, E)))), log(distance(E, center(Circle(C, D, E)))) + log(distance(D, F)) == log(distance(F, center(Circle(C, D, E)))) + log(distance(D, E)), log(distance(D, E)) + log(distance(D, center(Circle(C, D, E)))) == log(distance(D, F)) + log(distance(D, center(Circle(C, D, E))))
By similar_triangle_basic_properties on center(Circle(C, D, E)), F, C, center(Circle(C, D, E)), C, E we get angle(center(Circle(C, D, E)), C, E) == angle(center(Circle(C, D, E)), F, C) mod 360, angle(C, E, center(Circle(C, D, E))) == angle(F, C, center(Circle(C, D, E))) mod 360, angle(C, center(Circle(C, D, E)), F) == angle(E, center(Circle(C, D, E)), C) mod 360, log(distance(C, center(Circle(C, D, E)))) + log(distance(C, F)) == log(distance(F, center(Circle(C, D, E)))) + log(distance(C, E)), log(distance(C, E)) + log(distance(C, center(Circle(C, D, E)))) == log(distance(C, F)) + log(distance(E, center(Circle(C, D, E)))), log(distance(C, center(Circle(C, D, E)))) + log(distance(C, center(Circle(C, D, E)))) == log(distance(E, center(Circle(C, D, E)))) + log(distance(F, center(Circle(C, D, E))))
By similar_triangle_basic_properties on center(Circle(C, D, E)), D, E, center(Circle(C, D, E)), F, D we get angle(center(Circle(C, D, E)), D, E) == angle(center(Circle(C, D, E)), F, D) mod 360, angle(D, E, center(Circle(C, D, E))) == angle(F, D, center(Circle(C, D, E))) mod 360, angle(D, center(Circle(C, D, E)), F) == angle(E, center(Circle(C, D, E)), D) mod 360, log(distance(D, center(Circle(C, D, E)))) + log(distance(D, F)) == log(distance(F, center(Circle(C, D, E)))) + log(distance(D, E)), log(distance(D, E)) + log(distance(D, center(Circle(C, D, E)))) == log(distance(D, F)) + log(distance(E, center(Circle(C, D, E)))), log(distance(D, center(Circle(C, D, E)))) + log(distance(D, center(Circle(C, D, E)))) == log(distance(E, center(Circle(C, D, E)))) + log(distance(F, center(Circle(C, D, E))))
By anti_similar_triangle_basic_properties on center(Circle(C, D, E)), C, F, center(Circle(C, D, E)), C, E we get angle(center(Circle(C, D, E)), C, F) == 0 - angle(center(Circle(C, D, E)), C, E) mod 360, angle(C, F, center(Circle(C, D, E))) == 0 - angle(C, E, center(Circle(C, D, E))) mod 360, angle(F, center(Circle(C, D, E)), C) == 0 - angle(E, center(Circle(C, D, E)), C) mod 360, log(distance(C, center(Circle(C, D, E)))) + log(distance(C, E)) == log(distance(C, center(Circle(C, D, E)))) + log(distance(C, F)), log(distance(C, E)) + log(distance(F, center(Circle(C, D, E)))) == log(distance(C, F)) + log(distance(E, center(Circle(C, D, E)))), log(distance(E, center(Circle(C, D, E)))) + log(distance(C, center(Circle(C, D, E)))) == log(distance(F, center(Circle(C, D, E)))) + log(distance(C, center(Circle(C, D, E))))
By power_of_a_point_tangent on center(Circle(B, E, G)), E, Circle(D, E, G) we get log(power_of_a_point(center(Circle(B, E, G)), Circle(D, E, G))) == 2 * log(distance(E, center(Circle(B, E, G))))
By similar_triangle_basic_properties on E, D, center(Circle(C, D, E)), D, F, center(Circle(C, D, E)) we get angle(D, F, center(Circle(C, D, E))) == angle(E, D, center(Circle(C, D, E))) mod 360, angle(D, center(Circle(C, D, E)), E) == angle(F, center(Circle(C, D, E)), D) mod 360, angle(center(Circle(C, D, E)), D, F) == angle(center(Circle(C, D, E)), E, D) mod 360, log(distance(D, E)) + log(distance(F, center(Circle(C, D, E)))) == log(distance(D, F)) + log(distance(D, center(Circle(C, D, E)))), log(distance(D, center(Circle(C, D, E)))) + log(distance(D, center(Circle(C, D, E)))) == log(distance(F, center(Circle(C, D, E)))) + log(distance(E, center(Circle(C, D, E)))), log(distance(D, center(Circle(C, D, E)))) + log(distance(D, E)) == log(distance(E, center(Circle(C, D, E)))) + log(distance(D, F))
By power_of_a_point_tangent on center(Circle(D, E, G)), E, Circle(B, E, G) we get log(power_of_a_point(center(Circle(D, E, G)), Circle(B, E, G))) == 2 * log(distance(E, center(Circle(D, E, G))))
By power_of_a_point_definition on center(Circle(B, E, G)), B, E, Circle(B, E, G) we get log(power_of_a_point(center(Circle(B, E, G)), Circle(B, E, G))) == log(distance(B, center(Circle(B, E, G)))) + log(distance(E, center(Circle(B, E, G))))
By power_of_a_point_definition on center(Circle(D, E, G)), E, D, Circle(D, E, G) we get log(power_of_a_point(center(Circle(D, E, G)), Circle(D, E, G))) == log(distance(E, center(Circle(D, E, G)))) + log(distance(D, center(Circle(D, E, G))))
By excenter_concurrency on I, F, J we get excenter(I, F, J) in external_angle_bisector(I, F, J), excenter(I, F, J) in external_angle_bisector(F, J, I), excenter(I, F, J) in internal_angle_bisector(F, I, J)
By power_of_a_point_definition on center(Circle(D, E, G)), D, E, Circle(C, D, E) we get log(power_of_a_point(center(Circle(D, E, G)), Circle(C, D, E))) == log(distance(D, center(Circle(D, E, G)))) + log(distance(E, center(Circle(D, E, G))))
By power_of_a_point_definition on center(Circle(C, D, E)), D, C, Circle(C, D, E) we get log(power_of_a_point(center(Circle(C, D, E)), Circle(C, D, E))) == log(distance(D, center(Circle(C, D, E)))) + log(distance(C, center(Circle(C, D, E))))
By excenter_concurrency on J, I, F we get excenter(J, F, I) in external_angle_bisector(F, I, J), excenter(J, F, I) in external_angle_bisector(I, F, J), excenter(J, F, I) in internal_angle_bisector(F, J, I)
By excenter_concurrency on F, I, J we get excenter(F, I, J) in external_angle_bisector(F, I, J), excenter(F, I, J) in external_angle_bisector(F, J, I), excenter(F, I, J) in internal_angle_bisector(I, F, J)
