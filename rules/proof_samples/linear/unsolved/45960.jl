Assumptions:
A, B, C, D, E, F, G, H: Point
f, g, h, i: Line
c: Circle
distinct(A, B, C, D, E, F, G, H)
distinct(f, g, h, i)
f == Line(A, C)
g == internal_angle_bisector(B, A, C)
h == internal_angle_bisector(A, B, C)
i == internal_angle_bisector(A, C, B)
D == line_intersection(g, h)
E == projection(D, f)
F == projection(C, h)
G == projection(F, i)
c == Circle(A, D, G)
H in f, c

Embedding:
C := {"x": "1.9037009749709825623398273819475434720516204833984375", "y": "-0.55030073137282131678915675365715287625789642333984375"}
B := {"x": "9.4697834281527963895541688543744385242462158203125", "y": "0.635016510331433803315803743316791951656341552734375"}
A := {"x": "-2.26320450929701877385014086030423641204833984375", "y": "4.3884242822203933798164143809117376804351806640625"}
i := {"point": {"x": "1.9037009749709825623398273819475434720516204833984375", "y": "-0.55030073137282131678915675365715287625789642333984375"}, "direction": {"x": "0.34309193315188391501708771203631877479213620233628210028195490176263650742825630001363286480786532848580478555392921818870509001881792784895922247565031642494193658017959668323331935595776597351789918011581913609505951815264367408567419365790961193381236053604355299658649972577061510848197052592759870455295540663882535521680112483770482118858065828729191203326228235686146469290832174304513522435581955973321845582012446023939846446762106227684318213446238215700141581997451655787865412933301058161176956502270726075905232438744405239605109395947598882144016038891745218407099886350558224839856361586846831831916785903816242609900020832040623389589408446673403744531787434818496984116016092923047103341391986917816858375812351969660415657927161682973153874124267001923760872167912581889358278713345745042012751220167720678749617602392904468797672222609324723795210188293118159403227745785678165316242881201752062415957412847043769160781112561608149995785186838715912213157600803495757674429035098067391040519980324226206044928523001603547165856652084342492865447270337169308920340281157919606785927835613539392052821552281167222215523797276896897414332388046642201017007764832208418841930898659341186302962221852199342177565070568221982695048066475168049241671977174578642959771608277308694168766102869444317323691676455531438327440609790650470964508546619657710737623576950854319388564190359845861746638391013836586208007827742482760049232417417082826330269130341526864874752255463596397405422253060085940032201253930866984982083010547725592898579478581353437697787442914703949325951753893819276070883457807378925445824680809841132771613063786429168187841209342752726584814867882381736089579187280190208701739924190254651061218610503906792601799005488446497034343975132873573881189291553978784462645173430058402903733761116174873632062211134612876284678727646206282628368581999380881587804826307958375615228653260652669555599091803451831143818952075115638029177024424600706168585222468251050875121", "y": "0.91907660335346188142403749256714239112985150979619328204293904371955847685529187102065732791385295732656621390279616216551780935692380969124051266106891031271881962728543174284039281419307741503670180579610291876700501447871591147003625727851433271769605254571283880622998469299848529179787022175772952261839601251273191775611932078870573339061142894248765909817850413095991542365132552417497533635665259292785967175935107491731056422018569043004880472650385147602427925543132394867640771781798559337494739457955047790182691078588888114138120791329912679785006583745181335608709279169220911538783226031604372573476934343373267264428806551017132045608324018409972319695032189262150939940093529352665338846617728046432341492543945761370221582130528855518440328370931646946490789807512755186215060510236617555223378672524471481468615472246779676762554161639289009324913817078495054805427403399380284012997636193080617169996741327721324634675133761366817496954566539034960276816829568400876323186377443107205381878308121608493716441429774778549351478735312177296152243539777929424734351540483390596352454987269381340931551247936857849700930517713641115241832204629229612124285112268082847682102218638532857396126947961858290129939157958635455998748643155856987768344957513810334343667830852183951653396966688324694829733014932922041436010257046344325093787878279348814626301798976396418968264543074412221298128674985967930554039117342140651498978650486268186295979849827588215077685262167870975507648910084336448393967055037562375129491729301236775493344141824165632347346045154182560895840355393461762946198770326930347774734803510970591471272344513422266844365961748353416838604543025671103903669013363910866081567485082364815969111413599470851675349169650579963191932213758326009423648417498786210148829992081102520339221038781044626766286289085760327952108436971730611810415428159740323491234169368521516952002732120596464117870824331590877537753747332647418318499077551570379910144419916948936048384"}}
h := {"point": {"x": "9.4697834281527963895541688543744385242462158203125", "y": "0.635016510331433803315803743316791951656341552734375"}, "direction": {"x": "-1.9404010809678419001499025735030501954587575500655238541848613221193455068557001093950485716451265964264379852757983787595577976920263940821221459272949139922421355421300548917669451890425392760107036005273174300122233174127674203989742978291620306266971586479439804864604799438762335529112102720072520492863040907527479809481973873578276291094564517638949549604834027983695084508135251982338218490942832691499408968349698418268281200703632991129212707395870278318281369959588634151191594445268118635892975482064030987351884893736361060377397045458085032914045948414264415272836969029574551395479883889439384898247757181720700673337914539387223053425358928330474595043411064379260247552728437704818506672716321381439024942921693128244150384776218931325375514174212155900763700938712222977373084013306481082581157971726434751954453985011476775664033529892231444863978745656127439778702520048479172661525175156409967672245705410171213410911520632467314073016477645014340327942506803265944836086370868337768287459952452898610497626379232480114737015188439435995953246728357783076990473116089145293819587013939078456239324124404200488803918093648356744301198924086871938404536992480191222934099050834611916841118231818583608418954557547193486191174960524624427874959145061625309378682301727236995729983236941553162712314015103428658896672626209048369005459820135926258031859878496946872788437384087488378606281742458276430233135498324886981560238246676316740919500846781584540568469092183711007418911476711701174163658129896120048200531839599511867124074581403947769823174235722048344559835706208928795333879721537214139268485804080194788922142834412406356556968875538352663268310870624794715297212119287440817120529007900716247620952661304866563063657822152176433141501357959611402836426273916746438970881580759507424420267606566337102887997029801915424789602033288629045442518584273899032278548039544367836940059790639118254135208767238142818930174736444938834872363768352824290791443923597056581467105", "y": "0.14991700801778418386792291010253896716610128186651124165260577834389875039668538955384283047562084252719850557741187570724581623048743899971745693048835056742107965341683319927883445997145915829045292380743666058204630353242762383769165807487565944722841579447819422145636190230497708385023194794679553376838264882033253550775180932843881265801965773021796029925583947599493258560699201590036050487071127559191217649861090455496208666063868330717044067927874340684507280660640036678152655599540696219546339915838395871927691980248762240368584267281990537296380185584988156738529106656694706152471372145880015994351205681341867220325176225126936798477523140882686812410053400896740146988136878997385404267497970709981952273493875511177261686487781946302597356249865586088521281948307805478806068490273131504654931654548019380854906787631972589654152051062463251804836102321899499874875666247685269140007674244213984584141853622470896405223770111323532484962727998358374893461747194040414691503703703827340932852027689682203717270734577687306801827498645886524303694850687225026978888872220597759435046028746271246315762572433620036211462862607768777754616681698835198041299728572302406358828775525542719696268502039350160969763123150516102451746553036879796157002452153439485449178058205881250041034236491477212674951157865026601727514837770103050334041210584325254463561290596207232333109734761972079710270527634679504139565146524775737667254318778911762423083390540892420090007114858152204831345173336631964180786537555858208219428480806268170643221777813890056935203668362265684289182946746709776224616467325794686272208980730070783954018591243721796295470361045040564763327132188512403427660115210333718262736195678684483823304091256424421239657305230385226842584064407213843969554296397278787116476758242728633145648755085432057471797066335592222193276883488582761480193559218442479997167500479891222515944471267982826512500382101429205095093480692898560200467360438997818647421286080735221381092"}}
g := {"point": {"x": "-2.26320450929701877385014086030423641204833984375", "y": "4.3884242822203933798164143809117376804351806640625"}, "direction": {"x": "1.5973091478159579851328148614667314206666213477292417539029064203567089994274438093814157068372612679406331997218691605708527076732084662331629234516445975673001989619504582085336258330847733024928044204114982939171637992601237463133001041712524186928847981119004274898739802181056184444292397460796533447333486841139226257313962625201228079208757934766030429272211204415080437579052034551886866247384637094167224410148453815874296556027422368360780886051246456748267211759843468572405053151938012819775279831836958379761361649861920536416886105863325144699644344525089893432126980394518728911494247730754701715056078591339076412347912456183160714466418083663134220590232320897410549141126828412513796338577122689657339105340457931278108818983502763028060126761785455708387613721920964788437256141971906578379882849709662684079492224772186328784266307631298972484457726826815623838379745469911356129900887036234761430649964125466836494833409376306499073437958961142749106626746722916369068643467358531029183407954420475989893133526932319760020429523231001746666702001324066146098439087973353333140994230377724517034041969176083766582365713920667054559765685282207718302836215996970381049905960968677798210822009633363674201198050490371287921670153877107622950791947344167445082705140899506126313106626654608730979944847457875515063928565229983321909008965473960486958097520801861440849580965051503792431617903356892771612334715550638705555315004934608458286473933747431854080993866637351367678369251405692580160438004503033349702323538544739307834216633545812426053395491430577949627240530819546867726791375756476246723903335999210675644981528033763439738184754604077390609829383836556541688254200559421796250355015481690782514830800254475883803477921603331783438066960446324045448307344761348560524617063416501584129894230454719615524790808688454137161134160524008417179681726073960944119767556913571999378536925313052987179648858057797635815792841237427271069446065910364220174585401350231476379593", "y": "-1.0689936113712460652919604026696813582959527916627045236955448220634572272519772605745001583894737998537647194802080378727636255874112486909579695915572608801398992807022649421192272741645365733271547296035395793490513180111435353077279153533899921649244683401910330276863465953034623756481021697045250563867786613330644532638711301171445460486310866727056193974343436069548480092583175400753358412273638685197718482579619794722726508808243737372192454057825948828693520620377243154579342738133925555704107937379344366211038305883765035450670505861190321708138676933016949234723838582591561769125459817748438856782814002471513448475398277614406884408584715929265913210508559015889108692823040835005074311411569875641429376603782127254748326861831080182103768462079723303501207175582056066502112900050974905987831032707249086232352225987875226641670621270175226112974991940039455468030306964706555315300531043729460175413859495019222103989890387269034998191729453739333517027857676244129101469008114693454631473033581129069743371216435246585615330623395806382045593839046515445171324041270398835578750101601565258724731382037047788591239338032140989299644888632806481016558484084038525404093099416407557709239545000120845109970228110915155845049519619273678392534740966724981979284588905806520169443120317980190750468417279794864316352509481644737542782908886367406908986308957260365130137427783638430100839920262064743469360426386691638916623296926517994871906324036848063516769237702602318033899408342096841257475359259342058334892021010750494613656591963805568928254971351644824518502330214017153917081523765272503404694378424104137542529093575714406313983632279339398160193167521418350733132912857424458434430368076104929979241550485589527291500647488096519003451627816553985339320271389606499726530675032383115348486979386647668423808335542135255014538532046031337329060898737818280348840166984841273946794720338857929063037120643302008263284722802554597851896643799056819855756570599768415742948"}}
F := {"x": "2.0396319077107585256654875002551944378691470350858000802155508534883286356915554235533439591588466246334400043992486620747376654414164398783231637322432353400640411449344555546535777458088394056135054692472174820258311336417519400361462301058662976715495421749362528562125618874834142688199642852980438627980077434488410827909741719822351987578446151537305810390411546226605772727401775841437715736759542728551646396588528701568781513561981710922609052460130807351037747242912997572075125785951114937885874104719395791304568879496502407992241322872164002882648651031203186485110542144618167512500587238546030974756524680037076836691675031682142822095284577013909340058397525371744454686337502685085961991959508270889720150855610445483898697990732110719663752317183846676854638312972228291314087715870832167415964944971996257865627103246365853576084136401229045693178395878087200975838181130555910020961574552514720747530435492091377035560606734590738806094563974924896753936881706929581740933700189132673505443145482292981182935341501376193719042453664830036858704626932417270043674456723135030844344539334416081677596939964649386718825845378190389397373589302635218608734212568078102040035455906368712413313062136420584525919933595586847456118157402370081799012647571711464482690686288250578982289826175474282367507206231935660337677015889710499499819591061315760170709910672246396160773247245703204185909487837893004501483534390087356249428816056681565423061948230460443271115577177230422936536123717956261624697283463950079274720543741249255401525590218074090416635740983646542117793783704188482434991652657863820278659957725292198296539592423400890023053272035671309448196731559460491605441595695421070767237240857545018023032882001590462802361458307975661701953186926479420003679839384790365227545040966432775752747523249965554378742615556848486299410325530011986676527442073197728095295274753194464422217275173162757945991917536853088763007514145017661238673282239752262475216731304544813918597", "y": "1.209076222000869326739300729322782946710053222597148638798696128358879306511284932377298331097313305414351714675975778953740964327780207893318050551949528902407361762968704417076671572425153060314712279582839551928032168256491210259241448989730462937165854597539062450908124883512000864501101000099841157856117519965315554769787212674574142915990730087869659337913239456934067462588334138109720556524150655742084213681524907951678672096184534067082224318049758196402899159044436749892562394376846812220067416668233624832494084837263230615512368317956143826639260673256281531621922934211379813475703527287796488750308359043218054480408416820609270814871346785071571277624583137033477340830855006681626038127291344195264344943075617713913160391932593717535063487987964072235991498320183203752538463868746228622424860756473602042673556097622314703568723584908213932136942782356804785860187368486122973836696848235100894271001134753707336448220624316540380344898916391398502936683773610586882964376878708414102511946152307644654786899340035862366932433273909424008205190300043111018087397199579516065013658141866725931225343097418362065424087062828289007432811919374440822611244657796854688213685072362483299801279505597560523268988122939750634955956075595870969397913823676698279898180912296419681006128651527243994134801532850525451659580442603315406638990018754012299119922573427960841071747701774400277841344916826243346614921537896737659681889020795000892305295122257105870628294798622195044052855288093551046409114814418989560561503711661012205145802571137188544307791609722101252402160187333802731770112672453942237468015436233650910354564996225332217068377321703658278186341554047969306550694897846385017320225494403862999046371124552351254854606142678307795698763240166925429506910751127740403792936326257089128283374230581627302177213295634855210427153815569018614448893509745424894390194376246973238758727261865291984671076546952785354406356001391547102153948087145260853138439493093954368798"}
G := {"x": "2.4967733882479909507864541529014915306435681430259142375007369889270730955304101605388273213150584516488085087671674946756938409146779104382667056931416155077329173812133549180787709774852695372751690073584434626875040833506409684445903182901703395737252393810402740461070222993404599677487715066995116872650687363955619752221775768742713308553874859673070128044325117043810144193932286163211016524808047382720580872959153485920369412072098626757498888351460734228307561354531665874546917935317094861981762595813241189306038453620187256064034452824556552083567596894144643610360557589535602571533630189511187461513895239286898264354037654675526640630398412825284678316414566299515835794939274520238646873809923533156348449829391122806464431583050305361485906752758490321343839620424064806333249402852829225343331333203163311562616452617163212378622021006582540889116535454560590591374052281614659983916422352216609123245962264480251472810355318393809160349029987398288588272268704763048766248428899297835287314041249913270585910178976961083810467427146727542048124413401164792433652103239616659592724528442676225070536448781722134525980646962560246890284915320367109967040982361556166725710716499750116743986716292339632115805516511714794481841397165806941389842203038672432148857783554944359601872003911794250290640154422958964849961320431173166298562896247894473735466974691666792357692468152838660248110728369290073953602397560952844707800065001844373403494992505371735837515968880339438295414107596313467437647880011060262553184413006948540146309289995844112570551957988981696441174769781638932232657933701288466256772378278945527370144847387881440107278719361699705357434414983495012081393110595245254358484012485102534978122810918211343469617839811554760632311807548231806221765370980969873674847405347241770621956782268743788881947421524045612769806691707309151928530270007984696727995467317094459352047377470567047397720376887260968635350042303876940966661449410390680837413339962542610170021", "y": "1.0384249904178206571790993770364989901631113716049774945522827022987239806983688609175516167239744140740184896105240485602754987591876806663260098473295246450233181622431393344003944630671062585934765130182491398001777262564783582181701624289090385975438157078120520507967853271371374983818644581900085916210005963589423503104311529018135998788089646717357768818024904896044932004356029194300348826312931755513228102777565257904515004455692461476776127992250583614275189343994119885237440604188130656457795231171244179676934510805936882419593147202103317688438372238928061001126686347780223727604141108123511096290480993008718957744047209932448144469525919830198288646728356915952019801161239820676629837806583410539744161387650063012907267264751868719749496242831179417503285438473311276834384532004613506092082266034929184848000180779479381759900849403451874804115408666447149716528227440249647564217300978156418791543113805361890172292012410409572750210795409579331267093066625017924455837268527083434285672785486109631317466976097465510033885039177138747524589830148019479231431847945909164531058333922486157418042263756050707525649600446496737659373902140597143815335208164489415500341437756677915269929134599581594248384532323663847148471801420739639525854519647891095344644905872569119434275752353131581794135548085571591273023873237815541064994407815614012532232296241249369314923352068290194719331290609200798514256841069659697219644621085670769421724914894778147501939534086705680875561007882029803567761197571331531858323181660606871137883106124654160481199822834652898420396805799288012408058896282507663970860012815628017043535802594838894212617929469768946292562642647245675103233518522075904203443238391770407335641208437011413693898756098940723578437645929182199582805611715149076328940400329503455570752633666418115328207940531458343730483902101034574715577307980778078265247167779486123925359136955452171752188208616242803888745659701591303633895908448568977751559424657980142596719"}
D := {"x": "2.5458767391860310710508092530951813603093063238358866925996151569710745634271103651305266203259292118186125135546803391922883119026642877692503522972566218829354361889392431692717932351252169699619755841504031577193705550983639320005276792542988655304918075062137712833905962679611649023930004059297536171319752677130463114034220047342200108468589387247438727484259578256737267330238552098510546897330848748472643864384558408354337756717649579857454426880783752286037627863051187116072613585996341141579164435685640728513134949310651968156979036871785962566998452881185284939717094024150469698890920567147777247052587119117204154023638611195236204531186251112755467849309221512268146656990045371671287950900314234286254982074196255808854375747859242204061310766895249867098970256984076281961922692231918526516381067318250486994055105045094302999273669221376826119498273706280386617357136517961526231244639723376867894645917873409858689409848307865392663324117103094352108865749756732591693304364356265627725969895986626516676302153707706210818567786445158960946339230394397843565280402056845733210786511701489249965841613126051712007992902696395543863051098065266123254330173479306251625531882916297845663692276209062853239144225558241694565870499690647641350400481702456846737373705842009818801235744002843712482051869925600280244077784730126545947841434594180378391978229715925563035545779358494852248266679387782005970797268278677962599094987714657701760559007726105404601177839486846929788783067835819235600859589017573248874701753100600148908229722946325670313270893397266302573670096542898869204243287709315719916688187105862569619333760214212752312566143789016916218128167111258218659902440587166187524422918407866750391921219774466345331720787964982342574649887903871562811317317124592822783957991521245038450772123675020205004919199302582211970972430997854167186298417278985727541676281289404073818413847838904680687000919068475950992520640586805762163627759399348037660484860157570579106815", "y": "1.169963323536916124247715399223898488963322612496992309734462249963310716122935662065898094451375740406239276230517334657455809695455788132877729664871231686671649732450150996059088596391803665992874439916224356358609608448612617299462999789100714997362436655955684327789227916608387010734511874902332199743852448274267170704570049680122264479441803544257661715228343220910536526104077901539948192326730458068171518643162884628943782955447978930293215654292346067917836595223854715590995466945027150394892690122685195448824094844692906758501901358548008716584275679545888136432920586466728401792734503361026760086627415741676965406142520193681323390053469131396942754048444905193381278844376073684500403733519185930669536862248698045334590582514564115854164776859359283984820489374440203416268923933342846439642169864456875155400530564118762919934791579867591770651728078395936174586502495748427383321700943543294354794118300654009324396298162192477157635331706646570674418035416378405571241136791881490255324917763333978657982193543062023230871665377368767707386973439683224758990034139980010642338471619937214928671615626572011074882346884040907121631729869980766944819352431886392578799975372923865135109548808053598863776832735284241002629553717525072647930503828080377823342826971724840912626678338477286109098006345556374738560952230426871274944794450223054029064559918247039307330854855761442855330590658248904493605938608386605536019003053921242199549643005184611176676927601245340489261988488527040259280574505464182490462729426773972516711768188756534002529625189483337089705701470514045916911862478088405152832057505697507336251409710870776181018104243972233951618449682835115460245758647629873100759834237415729815529261734202230000772300452807112118610893392969829590772775236414683069003239125715522462068590624767912387430546694759698458085573956772841679000671135030330704410552934058734303217809773654299675214609413363927695813539435660216278110997243107195219558669722371379268777"}
c := {"center": {"x": "-0.27983678228561391062094284288775803746810774285086139994636692824385615829616230480683604062092686443381570550021956017028810143830976522592020651881425040861896345286025506238640236739194281473535925488177640687493550851954252727381209481823917923087535069731343510958754526601474607514644735136669721482733153073987153920197206261866779863892351979258469856597430731128429223496117056719975427378753633711849813896493507957953113329670223038238620986214204056587951452148321562861176960464700108858282604089772231663220022604498898178274867616127312226592366445471729591503310833698543791886822285481882594346157224192425211262877540587303587538438586170634223487230125316790273359332883612791373422633544838006678498976100213138393677953518378155007606080166658248623114966647130543525510824979982256518641915373573511152596811729318576132439122252569543758492490737978559236091833986646398387884065617391274263823005618094636563988662295745583713887480141212807291830395291205731239810757148574860635464368639924823141966157346361550679507068545152064643166153060549101261712183269035814290194821353524506239943854984125652974585345550310762416059334463046171839061118093153411688564306222416417029140311505910767849487897210919475051017787885647918176104913187665539265323242058825730551920193512220816027938440118523002738705798216807179084123470743695572020153895829670077189500195699143200074864403445968671676959797997906797280104589038755654743106068862592825204664747918723238019611511427495880543606822225640254224240484407503962899787265462069475324300136935503685898277582659726282521793553473405714389879577756032398253324353727452636726176063768615248156002631528546120865997258584144951753606533023708861521255048079831144221967318307397047068811038162745268584860067399495429409350323206151683121807626442554714147254068788968861620929445303695086954749568095110634123721824224620797809929668456440462522060216215094480428285768141270095813138037916170651016441791151701428568288336", "y": "2.1498698159047166363618460630490916351388741779541238576797850927300508371116775711022973261669882348941650673882854291307445324021215854487962637477462931383887236003264976405580481260626702138195138022196615285260022066488435334087416330162573655831138937604539644230248840281219782636323029504198519665257145248035403650360159643020493050363839973739811686127504555311721524046626406070648358041764625414577387188969236672606479696466386699193875234515379296951077490799683192606302897758546719520984513685625403197269289862484462877499864063602391784358033217352870733288672842057617977035176499529686683644655047626924291599109210281108330085547493582888651916406968748694465554448526005196982984093312653740719437673353952447018469091808915548320416783806829045652757591961230908549031073782723774034086337820684665592874961423128749011066266344169705727493404347240107369393441338790834205813605786102705169384603953583023924222590109418219387422977442641763262412267393334137459442003235726279418567312956255796721866146899484268570376823279205834739039891939070730300218796996989598607959424811348376050499453161086430663696160047764488277075114937750695352379549991134766047242205120211533757726336426891973614547973348797971953688922660628533220882883663618284674785233828007787210241883007334595144323181910189607378698126291594268503301307015678621787639184335061116876520943328334359488437947494843295467672988617818040360607331157040873654176549094481912772964779564120833885351679802050938025246640225078230251355923966256043091701714805098688418131170511010457429115152010812447646041101233607663338791292655453183935029636413874352534558191724382678466279972958086238881584879996081691284603478368722747007330608368561811217087273863243950238255745311398796963011061155571483216178754465460367665164219443828665573669422422886896015597510310253174132114501283484459512650550173038128729155316865759271740276087749857352294982420942623253925432912475481386552970200654064612108055662"}, "radius_squared": "8.9448736392122509281641829330428800651661842340340205078831103863191489126978532935281112964874017737540681272937372850166489772059022211673971137755720040654568026500608985377746074234423324097021106296356992586557219771482922340115280749777020642361771790637057315643022257352957646299995166490011498562072312160465742495453655733551533852417681042004201187392030205470310198486903494174110559489656618691688667282146484929515550045342406013433180450766499658597390633246329419567121024467587624818493625631397325880116748793231765569552195749769916018010940217805016748593578669363267950263867544392342478881057268013162900570921370496208267423485156507042918352004535051221706849039298490743739995264891263153816910133405082865829123299378427697662995591025662891429684572298733900807093604715265061853897891101637378401066848438190543540507118342458526462585354286797483161244317048072234822915432618435621659242523989780707373795486741828020009063487485621614967937673426357450703143288517268033727741358334542137753016783781660375698882655220767379679474402643729182386999324855761943900165027868028716582866896267843425919818737107531175680978809906473940487992890936948779583856906436033915509730525656030980303088481557101996634495242319376049460158553876118270408568752169659943260416420568638891357826216397055708448221690832971289023641457274542555898606667404634086853958904686113842928387497572013007682855651626134418690224098486581988789623285769850636364023170432829758384682293897344632270867163939034354729590614185076041526231500321953595808504329016725737747790652619718613874943357582075496067616797474239641513466497969364618171014210161946160372257356223824252630937682066264110120282478887348416540394732716891743477814139855074745557281384153264788320429117108573789540593807357584542479399001114560869169761515988548328535288485204040637841624963239629262409659612371546253631911715320729609439330632735355026688793578858028308268602215248879164373013170639305147361841448"}
f := {"point": {"x": "-2.26320450929701877385014086030423641204833984375", "y": "4.3884242822203933798164143809117376804351806640625"}, "direction": {"x": "4.1669054842680013361899682422517798840999603271484375", "y": "-4.93872501359321469660557113456889055669307708740234375"}}
H := {"x": "1.5929468109506369088965922383624270668190355377160456293884078019433684845634026553671599510870664138263118382984835200592853687869664982834415297792844708910225945634385355898168736355053630390877223216304777203182981804228505697814305525062176284902777306258408835576325504469450335981752456640489455152858328494165005115091413365060100623041359975506865167367936802037452489207574404712207734363902400750169625947800474460098131889012518355718185091805693288451403028970364733222024735657202449142530965459852168415712614549495346707130570377592584092455859630674725785870179954475872760755227838618057818317140908035755422058374967137377263984571695150646118885463589901815863561360657957774430349116179542960970405983676355341118559724882314860212174903778157836214676419308200719038977903134399249191077643758060596459431885450343261962797728615086655705797869850587997930768025226866146201108770887028198845843754694291971756801745890928392447087059940316398887415588363729252947178608118374662425180262182321915706017303156970136836274119360846419277774012607852057685863322850210372557883511249434234689098306128110959645214437544986060674497260803627790158714125817066197754079317587420160608882710570885342717749935644243750248558672365130091447305827875032986802028856401091864582043643052251586119573821284944906312464568807289065585337496299848997666969429836055294942260888746477085863116906042529246389021286619148156883693856293149466190113044776738521551783994369008455843539539881318417019534300783872705975116475048037253467625755637863609070817861482066359866602075739620935692676777883854975435417753470815662012212259029798220424142210994574496444151953984661665088474932996947878126928555022913081081720412344802908018145153999253245600998842818169670853253196309802138048730685350490548879794829253467478730627871158663155989207624971633688723485278973279128671235213723835655585189042152855600055131531716855044408870941465334150720517208945257288744464667137767440590567038", "y": "-0.18198679463491256956232974883740326475337859082822130524767102931954245440008723458599535283231354217314664335582016984294069338242246975668739810027146892036609582519162702330966613670019620533845960259270507031699485307242170256903075137732961156215883544198861030743060137044804667335465774901752964867062097597300671310556579686863562376663671224352415715857061879084910718307290061875542678443715055317634969325774358845642847871080252201681886450161318421139830027226280443560429193950513351726849551148447176329651410215280372821888266245352698713777171085714668686207016276567842750738390383999578813690974003289677981416869572017455507078957118133406220816142637677393846205579589270235446458820477530057405425751246992733138276097619284967345286209939956141177763548028878210057642579410068163344851953495471589392347914171421197600424135856431763347626256739475025147985976837931471605172412510924707233696937912785347393888475022796887922105985424759491746149911510992946683215974565704383119482216378326552807622522900784221028349373199587511322810912269598091784278563766238506002153518694836876172449014518114340456149275076726876677747616731719415624911418888034531590377588489653662680799142031448066894712684006939818811027333149022724840264594737113920430527159539722635069481126043734232680751459183887879758358058454586360648698235882298169502536251094368411179199283367944627341031399361551770497390170121996205968475482170777631551578905209259191717215384531084065000903286403660274788953663534704519746943241706780060297362655843860103286277536994224383821953875201818053374057598422193841259864370030645105542241293238000479570772035743479543235502764210751856311468241542450044415521514760048012179741863642417828761864405300956224632386854250326933474091775002403504543101909517410683397999598653442748686606811687426869099543815811121930353823535146778997161046897173761343805788568970367133529086170853794638213950287083686076072428195419820972980825175812212330347410832"}
E := {"x": "1.3228839474927845235418150875452552054656445367244292933235857313402721605033952407962487597141842933054636315482658014781934930915521446133729965608358117240478749311419578614622380015864434073042106657457472342528252940474855724212885440792683693853586592704309502529496906035615614597172000604736691110118197802101604789683050831614128141843078450000364477823518901344562958323138883762190112122010649880918362589379660023988124097314852449522206486364518364084832924371693030642619660028921679274908527613302026508714629515534677492760397974894326068520227065204681957594064073979751628469317671457740635537769061400278637759516988177487532295502424818199976987579008512572904089794087926780380970490944930894201090716487757662775628089853072328652270537424949011013307142674743269941638746461362787532608686912277445697875232124387991860290654893419365039433826803058765500830318425810366885027255319248201414508373907149895161050392641809502654967921393429984476440270454384518092291347111117430429228645105982728545687550251674199716898562345880390331713249316909076264364123131123263274610929198461939485400913565690922059935435658646392940494619704497907147368805338425085574850776412898849930879066530135867700095549235487739423094994075773269935957570650989268148618116404713913319051365175395245630730035125610601513531073802736812134347564137848988648440353146390882225185807724125964927825969756957223128338194662712209216488957446349042737194592105574169563629354120007773869538731699785935857087045870404462302881793403372028835927091094033821372568611699412449203815158849380052591456843150341117249736498601314888363070301502066713820724193128873965609761931500735050704605201205908164116071757160349602518364544911222566262887846201690182388014853842379758923936577660266118083486082456666641555518682378203201088769611717640287671665654308131551381472390486383513450480484029999161632007508611882026145942059043665705417349562344394439079449550731759360496184913743410079098569838", "y": "0.13809875183056160443169963790298991096166552220070548485592799866547102094307264021942500757868505132953904210842254165265865085522017437107589724779130963847460194132958923347297923565083490593158530151341479245734160197879247816378360389483171840617544551472567904392583301930335975850344137882747066791843484391931489714248136877572000802886092044507190483483679075780010896192709763607385955308933704761851702564801515585284640463175387595642869557245895717091823503622540093866286814364575974755588777424574537944206430115282960342319614599033014401911012984042148631033583463842321298760079164713348115952466861470451726657474399285776328300325186051625138974721368008248646613579329768639144903406886328127082780209316451900464581137688964253768501342504424211187971818974879530522334544320898992464109782740230629421703694075554047830975287484573014168472727065089487153628618926856007889982570714469064270156835851606403880869230605587221672409772456347368431579720774281203423611482492950167609055793568412465544975043379563190113065661514810405574935661228969525473801599704721746761714335142497044696868277164782387238576444219974578882018955183881256776914622966423184204819580105927836111766740742108101372231171735938907616764587141971683507736626564962341327338388327159299395988295245161101031378378155697305544586865700540363278243985559159608186876553483259649899339060331993578433865906185078718706848267631305420266364959241585197465963964004244763676230730395404514252699172825148288426750633319831788924604546208120086858557553025438156935584947954251461477974171848543645307179109910160110599993761455807027452796707285876224318214133678426027749413241245652863871404931648412010938319792169418116185228480570931444496441228393760038276158736195644225580699744942764734222904242914529385803479784223692789514674319791505916945660352266825507249450809661542841610948561365551476840269536980458253244613166485550979783193429806776769530394070265303119279430585462140964681456497"}

Need to prove:
concyclic(E, F, G, H)

Proof:
By line_definition on C, E, f we get f == Line(C, E)
By line_definition on E, A, f we get f == Line(A, E)
By line_definition on C, F, perpendicular_line(C, h) we get Line(C, F) == perpendicular_line(C, h)
By line_definition on B, F, h we get h == Line(B, F)
By line_definition on F, G, perpendicular_line(F, i) we get Line(F, G) == perpendicular_line(F, i)
By line_definition on D, F, h we get h == Line(D, F)
By line_definition on G, C, i we get i == Line(C, G)
By line_definition on D, B, h we get h == Line(B, D)
By line_definition on E, H, f we get f == Line(E, H)
By line_definition on A, H, f we get f == Line(A, H)
By line_definition on D, A, g we get g == Line(A, D)
By line_definition on E, D, perpendicular_line(D, f) we get Line(D, E) == perpendicular_line(D, f)
By line_definition on H, C, f we get f == Line(C, H)
By perpendicular_line_definition on H, f, perpendicular_line(D, f) we get f == perpendicular_line(H, perpendicular_line(D, f))
By circle_definition on G, A, H, c we get c == Circle(A, G, H)
By perpendicular_line_definition on C, f, perpendicular_line(D, f) we get f == perpendicular_line(C, perpendicular_line(D, f))
By circle_definition on H, D, G, c we get c == Circle(D, G, H)
By line_intersection_definition on D, h, perpendicular_line(D, f) we get D == line_intersection(h, perpendicular_line(D, f))
By perpendicular_line_definition on G, perpendicular_line(F, i), i we get perpendicular_line(F, i) == perpendicular_line(G, i)
By circle_definition on H, D, A, c we get c == Circle(A, D, H)
By line_intersection_definition on F, perpendicular_line(F, i), perpendicular_line(C, h) we get F == line_intersection(perpendicular_line(C, h), perpendicular_line(F, i))
By line_intersection_definition on C, i, perpendicular_line(C, h) we get C == line_intersection(i, perpendicular_line(C, h))
By line_intersection_definition on C, i, f we get C == line_intersection(f, i)
By line_intersection_definition on A, g, f we get A == line_intersection(f, g)
By perpendicular_line_definition on G, i, perpendicular_line(F, i) we get i == perpendicular_line(G, perpendicular_line(F, i))
By line_intersection_definition on F, h, perpendicular_line(F, i) we get F == line_intersection(h, perpendicular_line(F, i))
By perpendicular_line_definition on F, h, perpendicular_line(C, h) we get h == perpendicular_line(F, perpendicular_line(C, h))
By line_intersection_definition on C, perpendicular_line(C, h), f we get C == line_intersection(f, perpendicular_line(C, h))
By perpendicular_line_definition on D, h, perpendicular_line(C, h) we get h == perpendicular_line(D, perpendicular_line(C, h))
By perpendicular_line_definition on E, f, perpendicular_line(D, f) we get f == perpendicular_line(E, perpendicular_line(D, f))
By perpendicular_line_definition on C, i, perpendicular_line(F, i) we get i == perpendicular_line(C, perpendicular_line(F, i))
By perpendicular_line_definition on E, perpendicular_line(D, f), f we get perpendicular_line(D, f) == perpendicular_line(E, f)
By line_intersection_definition on D, g, perpendicular_line(D, f) we get D == line_intersection(g, perpendicular_line(D, f))
By perpendicular_line_definition on F, perpendicular_line(C, h), h we get perpendicular_line(C, h) == perpendicular_line(F, h)
By perpendicular_line_definition on B, h, perpendicular_line(C, h) we get h == perpendicular_line(B, perpendicular_line(C, h))
By perpendicular_line_definition on A, f, perpendicular_line(D, f) we get f == perpendicular_line(A, perpendicular_line(D, f))
By in_imply_collinear on H, A, C we get collinear(A, C, H)
By in_imply_collinear on E, A, C we get collinear(A, C, E)
By angle_bisector_draw_angle_v0 on C, A, B we get exists(Line(A, B), Line(A, C))
By in_imply_concyclic on A, G, D, H we get concyclic(A, D, G, H)
By angle_bisector_draw_angle_v0 on C, B, A we get exists(Line(A, B), Line(B, C))
By angle_bisector_draw_angle_v0 on A, C, B we get exists(Line(A, C), Line(B, C))
By angle_bisector_draw_angle_v0 on B, C, A we get exists(Line(A, C), Line(B, C))
By angle_bisector_draw_angle_v0 on A, B, C we get exists(Line(A, B), Line(B, C))
By angle_bisector_draw_angle_v0 on B, A, C we get exists(Line(A, B), Line(A, C))
By power_of_a_point_in_circle on A, c we get 0 == power_of_a_point(A, c)
By power_of_a_point_in_circle on D, c we get 0 == power_of_a_point(D, c)
By power_of_a_point_in_circle on G, c we get 0 == power_of_a_point(G, c)
By power_of_a_point_in_circle on H, c we get 0 == power_of_a_point(H, c)
By angles_on_chord_v0 on H, G, D, A, c we get angle(H, A, G) == angle(H, D, G) mod 360
By angles_on_chord_v1 on D, G, H, A, c we get angle(D, A, G) == angle(D, H, G) mod 360
By angles_on_chord_v1 on G, H, D, A, c we get angle(G, A, H) == angle(G, D, H) mod 360
By angles_on_chord_v0 on A, H, G, D, c we get angle(A, D, H) == angle(A, G, H) mod 360
By angles_on_chord_v0 on D, A, G, H, c we get angle(D, G, A) == angle(D, H, A) mod 360
By angles_on_chord_v3 on H, D, G, A, c we get angle(H, G, D) == angle(H, A, D) + 180 mod 360
By angles_on_chord_v0 on G, D, A, H, c we get angle(G, A, D) == angle(G, H, D) mod 360
By angles_on_chord_v2 on G, A, H, D, c we get angle(G, H, A) == angle(G, D, A) + 180 mod 360
By angles_on_chord_v1 on A, D, H, G, c we get angle(A, G, D) == angle(A, H, D) mod 360
By angles_on_chord_v2 on D, H, G, A, c we get angle(D, G, H) == angle(D, A, H) + 180 mod 360
By angles_on_chord_v2 on H, D, A, G, c we get angle(H, A, D) == angle(H, G, D) + 180 mod 360
By angles_on_chord_v1 on H, A, G, D, c we get angle(H, D, A) == angle(H, G, A) mod 360
By angles_on_chord_v3 on D, H, A, G, c we get angle(D, A, H) == angle(D, G, H) + 180 mod 360
By angles_on_chord_v3 on G, A, D, H, c we get angle(G, D, A) == angle(G, H, A) + 180 mod 360
By angles_on_chord_v3 on A, G, H, D, c we get angle(A, H, G) == angle(A, D, G) + 180 mod 360
By angles_on_chord_v2 on A, G, D, H, c we get angle(A, D, G) == angle(A, H, G) + 180 mod 360
By altitude_definition on D, A, C, perpendicular_line(D, f) we get altitude(D, A, C) == perpendicular_line(D, f)
By incenter_concurrency on A, C, B we get incenter(A, B, C) in internal_angle_bisector(A, C, B), incenter(A, B, C) in internal_angle_bisector(A, B, C), incenter(A, B, C) in internal_angle_bisector(B, A, C)
By concurrent_sufficient_conditions on g, h, Line(D, E) we get concurrent(g, h, Line(D, E))
By concurrent_sufficient_conditions on g, Line(D, E), h we get concurrent(g, h, Line(D, E))
By line_definition on C, D, i we get i == Line(C, D)
By concurrent_sufficient_conditions on Line(D, E), h, g we get concurrent(g, h, Line(D, E))
By concurrent_sufficient_conditions on h, g, Line(D, E) we get concurrent(g, h, Line(D, E))
By concurrent_sufficient_conditions on Line(C, F), Line(F, G), h we get concurrent(h, Line(C, F), Line(F, G))
By concurrent_sufficient_conditions on Line(F, G), Line(C, F), h we get concurrent(h, Line(C, F), Line(F, G))
By concurrent_sufficient_conditions on i, f, Line(C, F) we get concurrent(f, i, Line(C, F))
By concurrent_sufficient_conditions on f, Line(C, F), i we get concurrent(f, i, Line(C, F))
By concurrent_sufficient_conditions on Line(F, G), h, Line(C, F) we get concurrent(h, Line(C, F), Line(F, G))
By concurrent_sufficient_conditions on f, i, Line(C, F) we get concurrent(f, i, Line(C, F))
By concurrent_sufficient_conditions on i, Line(C, F), f we get concurrent(f, i, Line(C, F))
By concurrent_sufficient_conditions on Line(C, F), f, i we get concurrent(f, i, Line(C, F))
By line_definition on G, D, i we get i == Line(D, G)
By concurrent_sufficient_conditions on h, Line(F, G), Line(C, F) we get concurrent(h, Line(C, F), Line(F, G))
By concurrent_sufficient_conditions on Line(C, F), h, Line(F, G) we get concurrent(h, Line(C, F), Line(F, G))
By concurrent_sufficient_conditions on h, Line(D, E), g we get concurrent(g, h, Line(D, E))
By concurrent_sufficient_conditions on h, Line(C, F), Line(F, G) we get concurrent(h, Line(C, F), Line(F, G))
By concurrent_sufficient_conditions on Line(C, F), i, f we get concurrent(f, i, Line(C, F))
By concurrent_sufficient_conditions on Line(D, E), g, h we get concurrent(g, h, Line(D, E))
By line_intersection_definition on G, Line(G, H), Line(A, G) we get G == line_intersection(Line(A, G), Line(G, H))
By line_intersection_definition on A, Line(A, B), g we get A == line_intersection(g, Line(A, B))
By line_intersection_definition on G, Line(D, G), Line(F, G) we get G == line_intersection(Line(D, G), Line(F, G))
By line_intersection_definition on H, f, Line(D, H) we get H == line_intersection(f, Line(D, H))
By line_intersection_definition on G, Line(A, G), Line(F, G) we get G == line_intersection(Line(A, G), Line(F, G))
By line_intersection_definition on G, Line(A, G), Line(D, G) we get G == line_intersection(Line(A, G), Line(D, G))
By line_intersection_definition on A, Line(A, G), g we get A == line_intersection(g, Line(A, G))
By line_intersection_definition on C, Line(B, C), f we get C == line_intersection(f, Line(B, C))
By line_intersection_definition on D, i, Line(D, E) we get D == line_intersection(i, Line(D, E))
By line_intersection_definition on D, Line(D, H), Line(D, G) we get D == line_intersection(Line(D, G), Line(D, H))
By line_intersection_definition on D, Line(D, G), g we get D == line_intersection(g, Line(D, G))
By line_intersection_definition on H, f, Line(G, H) we get H == line_intersection(f, Line(G, H))
By concurrent_sufficient_conditions on Line(D, E), i, g we get concurrent(g, i, Line(D, E))
By line_intersection_definition on G, i, Line(A, G) we get G == line_intersection(i, Line(A, G))
By line_intersection_definition on D, Line(D, G), Line(D, E) we get D == line_intersection(Line(D, E), Line(D, G))
By line_intersection_definition on H, Line(D, H), Line(G, H) we get H == line_intersection(Line(D, H), Line(G, H))
By line_intersection_definition on D, Line(D, E), Line(D, H) we get D == line_intersection(Line(D, E), Line(D, H))
By line_intersection_definition on D, Line(D, H), g we get D == line_intersection(g, Line(D, H))
By line_intersection_definition on G, Line(G, H), Line(F, G) we get G == line_intersection(Line(F, G), Line(G, H))
By line_intersection_definition on B, Line(B, C), h we get B == line_intersection(h, Line(B, C))
By line_intersection_definition on G, i, Line(G, H) we get G == line_intersection(i, Line(G, H))
By line_intersection_definition on A, Line(A, G), f we get A == line_intersection(f, Line(A, G))
By line_intersection_definition on B, Line(A, B), h we get B == line_intersection(h, Line(A, B))
By line_intersection_definition on D, Line(D, G), h we get D == line_intersection(h, Line(D, G))
By line_intersection_definition on A, Line(A, G), Line(A, B) we get A == line_intersection(Line(A, B), Line(A, G))
By line_intersection_definition on D, i, Line(D, H) we get D == line_intersection(i, Line(D, H))
By perpendicular_line_definition on D, i, Line(F, G) we get i == perpendicular_line(D, Line(F, G))
By line_intersection_definition on A, f, Line(A, B) we get A == line_intersection(f, Line(A, B))
By concurrent_sufficient_conditions on i, Line(D, E), h we get concurrent(h, i, Line(D, E))
By concurrent_sufficient_conditions on Line(D, E), i, h we get concurrent(h, i, Line(D, E))
By line_intersection_definition on D, h, Line(D, H) we get D == line_intersection(h, Line(D, H))
By line_intersection_definition on B, Line(A, B), Line(B, C) we get B == line_intersection(Line(A, B), Line(B, C))
By line_intersection_definition on C, Line(B, C), i we get C == line_intersection(i, Line(B, C))
By line_intersection_definition on C, Line(B, C), Line(C, F) we get C == line_intersection(Line(B, C), Line(C, F))
By line_intersection_definition on G, Line(G, H), Line(D, G) we get G == line_intersection(Line(D, G), Line(G, H))
By concurrent_sufficient_conditions on i, Line(D, E), g we get concurrent(g, i, Line(D, E))
By projection_definition on D, F, Line(C, F) we get F == projection(D, Line(C, F))
By projection_definition on C, G, Line(F, G) we get G == projection(C, Line(F, G))
By projection_definition on B, F, Line(C, F) we get F == projection(B, Line(C, F))
By projection_definition on H, E, Line(D, E) we get E == projection(H, Line(D, E))
By projection_definition on A, E, Line(D, E) we get E == projection(A, Line(D, E))
By projection_definition on C, E, Line(D, E) we get E == projection(C, Line(D, E))
By same_angle_v0 on A, H, C, D we get angle(C, A, D) == angle(H, A, D) mod 360
By same_angle_v3 on H, C, A, D we get angle(C, H, D) == angle(A, H, D) + 180 mod 360
By same_angle_v3 on H, C, A, G we get angle(C, H, G) == angle(A, H, G) + 180 mod 360
By same_angle_v0 on A, H, C, G we get angle(C, A, G) == angle(H, A, G) mod 360
By perpendicular_direction_conditions_v0_r on H, A, E, D we get 180 == 2 * direction(H, A) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on D, E, A, H we get 180 == 2 * direction(D, E) - 2 * direction(A, H) mod 360
By perpendicular_direction_conditions_v0_r on A, H, D, E we get 180 == 2 * direction(A, H) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on E, D, H, A we get 180 == 2 * direction(E, D) - 2 * direction(H, A) mod 360
By perpendicular_direction_conditions_v0_r on D, E, H, A we get 180 == 2 * direction(D, E) - 2 * direction(H, A) mod 360
By perpendicular_direction_conditions_v0_r on A, H, E, D we get 180 == 2 * direction(A, H) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on H, A, D, E we get 180 == 2 * direction(H, A) - 2 * direction(D, E) mod 360
By in_imply_collinear on H, E, A we get collinear(A, E, H)
By in_imply_collinear on D, F, B we get collinear(B, D, F)
By perpendicular_direction_conditions_v0_r on E, D, A, H we get 180 == 2 * direction(E, D) - 2 * direction(A, H) mod 360
By in_imply_collinear on D, C, G we get collinear(C, D, G)
By probably_between_and_collinear_implies_between on C, E, A we get between(A, E, C)
By probably_between_and_collinear_implies_between on C, H, A we get between(A, H, C)
By in_imply_collinear on H, E, C we get collinear(C, E, H)
By reverse_direction on A, D we get 180 == direction(A, D) - direction(D, A) mod 360
By reverse_direction on D, A we get 180 == direction(D, A) - direction(A, D) mod 360
By reverse_direction on G, H we get 180 == direction(G, H) - direction(H, G) mod 360
By reverse_direction on G, A we get 180 == direction(G, A) - direction(A, G) mod 360
By reverse_direction on H, D we get 180 == direction(H, D) - direction(D, H) mod 360
By reverse_direction on A, H we get 180 == direction(A, H) - direction(H, A) mod 360
By reverse_direction on H, G we get 180 == direction(H, G) - direction(G, H) mod 360
By reverse_direction on H, A we get 180 == direction(H, A) - direction(A, H) mod 360
By reverse_direction on D, G we get 180 == direction(D, G) - direction(G, D) mod 360
By reverse_direction on A, G we get 180 == direction(A, G) - direction(G, A) mod 360
By reverse_direction on D, H we get 180 == direction(D, H) - direction(H, D) mod 360
By reverse_direction on G, D we get 180 == direction(G, D) - direction(D, G) mod 360
By same_angle_v0 on A, E, C, G we get angle(C, A, G) == angle(E, A, G) mod 360
By perpendicular_direction_conditions_v0_r on A, E, E, D we get 180 == 2 * direction(A, E) - 2 * direction(E, D) mod 360
By same_angle_v0 on A, E, C, D we get angle(C, A, D) == angle(E, A, D) mod 360
By perpendicular_direction_conditions_v0_r on C, F, F, D we get 180 == 2 * direction(C, F) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on D, E, E, A we get 180 == 2 * direction(D, E) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on H, E, E, D we get 180 == 2 * direction(H, E) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on C, E, E, D we get 180 == 2 * direction(C, E) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on A, C, E, D we get 180 == 2 * direction(A, C) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on H, E, D, E we get 180 == 2 * direction(H, E) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on G, C, G, F we get 180 == 2 * direction(G, C) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on C, F, B, D we get 180 == 2 * direction(C, F) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on F, D, F, C we get 180 == 2 * direction(F, D) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on D, E, H, C we get 180 == 2 * direction(D, E) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on A, C, D, E we get 180 == 2 * direction(A, C) - 2 * direction(D, E) mod 360
By same_angle_v0 on A, H, C, B we get angle(C, A, B) == angle(H, A, B) mod 360
By perpendicular_direction_conditions_v0_r on F, C, B, F we get 180 == 2 * direction(F, C) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on F, G, G, C we get 180 == 2 * direction(F, G) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on D, B, C, F we get 180 == 2 * direction(D, B) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on D, F, C, F we get 180 == 2 * direction(D, F) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on F, G, C, G we get 180 == 2 * direction(F, G) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on C, H, E, D we get 180 == 2 * direction(C, H) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on D, E, C, A we get 180 == 2 * direction(D, E) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on E, D, C, E we get 180 == 2 * direction(E, D) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on H, C, E, D we get 180 == 2 * direction(H, C) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on F, C, D, B we get 180 == 2 * direction(F, C) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on G, F, C, G we get 180 == 2 * direction(G, F) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on E, D, C, H we get 180 == 2 * direction(E, D) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on D, E, C, E we get 180 == 2 * direction(D, E) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on F, C, F, B we get 180 == 2 * direction(F, C) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on D, E, H, E we get 180 == 2 * direction(D, E) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on E, D, E, A we get 180 == 2 * direction(E, D) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on G, C, F, G we get 180 == 2 * direction(G, C) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on F, C, B, D we get 180 == 2 * direction(F, C) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on D, E, A, C we get 180 == 2 * direction(D, E) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on B, F, C, F we get 180 == 2 * direction(B, F) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on D, B, F, C we get 180 == 2 * direction(D, B) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on E, D, E, H we get 180 == 2 * direction(E, D) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on C, F, B, F we get 180 == 2 * direction(C, F) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on E, C, D, E we get 180 == 2 * direction(E, C) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on F, D, C, F we get 180 == 2 * direction(F, D) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on E, D, E, C we get 180 == 2 * direction(E, D) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on F, B, F, C we get 180 == 2 * direction(F, B) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on C, H, D, E we get 180 == 2 * direction(C, H) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on G, F, G, C we get 180 == 2 * direction(G, F) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on F, C, F, D we get 180 == 2 * direction(F, C) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on C, E, D, E we get 180 == 2 * direction(C, E) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on E, D, C, A we get 180 == 2 * direction(E, D) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on C, A, D, E we get 180 == 2 * direction(C, A) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on E, D, H, E we get 180 == 2 * direction(E, D) - 2 * direction(H, E) mod 360
By perpendicular_direction_conditions_v0_r on D, E, E, C we get 180 == 2 * direction(D, E) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on D, E, C, H we get 180 == 2 * direction(D, E) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on D, E, A, E we get 180 == 2 * direction(D, E) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on F, B, C, F we get 180 == 2 * direction(F, B) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on E, D, A, C we get 180 == 2 * direction(E, D) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on B, D, C, F we get 180 == 2 * direction(B, D) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on C, G, F, G we get 180 == 2 * direction(C, G) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on B, F, F, C we get 180 == 2 * direction(B, F) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on E, H, E, D we get 180 == 2 * direction(E, H) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on C, F, D, B we get 180 == 2 * direction(C, F) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on E, A, D, E we get 180 == 2 * direction(E, A) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on D, F, F, C we get 180 == 2 * direction(D, F) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on B, D, F, C we get 180 == 2 * direction(B, D) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on F, C, D, F we get 180 == 2 * direction(F, C) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on D, E, E, H we get 180 == 2 * direction(D, E) - 2 * direction(E, H) mod 360
By perpendicular_direction_conditions_v0_r on H, C, D, E we get 180 == 2 * direction(H, C) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on E, A, E, D we get 180 == 2 * direction(E, A) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on C, A, E, D we get 180 == 2 * direction(C, A) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on C, G, G, F we get 180 == 2 * direction(C, G) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on C, F, F, B we get 180 == 2 * direction(C, F) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on C, F, D, F we get 180 == 2 * direction(C, F) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on E, D, A, E we get 180 == 2 * direction(E, D) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on A, E, D, E we get 180 == 2 * direction(A, E) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on E, C, E, D we get 180 == 2 * direction(E, C) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on E, H, D, E we get 180 == 2 * direction(E, H) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on E, D, H, C we get 180 == 2 * direction(E, D) - 2 * direction(H, C) mod 360
By altitude_definition on C, E, D, f we get f == altitude(C, D, E)
By altitude_definition on B, F, C, h we get h == altitude(B, C, F)
By altitude_definition on A, D, E, f we get f == altitude(A, D, E)
By collinear_definition on A, H, C we get H in Line(A, C), C in Line(A, H), Line(A, C) == Line(A, H), 0 == 2 * angle(H, A, C) mod 360
By altitude_definition on C, G, F, i we get i == altitude(C, F, G)
By altitude_definition on H, D, E, f we get f == altitude(H, D, E)
By collinear_definition on A, C, H we get C in Line(A, H), H in Line(A, C), Line(A, C) == Line(A, H), 0 == 2 * angle(C, A, H) mod 360
By collinear_definition on H, A, C we get A in Line(C, H), C in Line(A, H), Line(A, H) == Line(C, H), 0 == 2 * angle(A, H, C) mod 360
By altitude_definition on D, F, C, h we get h == altitude(D, C, F)
By collinear_definition on H, C, A we get C in Line(A, H), A in Line(C, H), Line(A, H) == Line(C, H), 0 == 2 * angle(C, H, A) mod 360
By same_angle_v1 on C, E, A, G we get angle(A, C, G) == angle(E, C, G) mod 360
By same_angle_v1 on C, E, A, F we get angle(A, C, F) == angle(E, C, F) mod 360
By same_angle_v1 on C, A, H, G we get angle(A, C, G) == angle(H, C, G) mod 360
By same_angle_v1 on C, H, A, F we get angle(A, C, F) == angle(H, C, F) mod 360
By same_angle_v1 on C, E, A, B we get angle(A, C, B) == angle(E, C, B) mod 360
By same_angle_v0 on A, C, E, B we get angle(C, A, B) == angle(E, A, B) mod 360
By same_angle_v3 on E, C, A, D we get angle(C, E, D) == angle(A, E, D) + 180 mod 360
By same_angle_v1 on C, A, H, B we get angle(A, C, B) == angle(H, C, B) mod 360
By altitude_definition on D, H, A, Line(D, E) we get Line(D, E) == altitude(D, A, H)
By collinear_definition on C, A, H we get A in Line(C, H), H in Line(A, C), Line(A, C) == Line(C, H), 0 == 2 * angle(A, C, H) mod 360
By altitude_definition on C, F, B, Line(C, F) we get Line(C, F) == altitude(C, B, F)
By altitude_definition on D, C, H, Line(D, E) we get Line(D, E) == altitude(D, C, H)
By perpendicular_angle_conditions_v0 on C, F, D we get angle(C, F, D) == orientation(C, F, D) mod 360
By perpendicular_angle_conditions_v0 on B, F, C we get angle(B, F, C) == orientation(B, F, C) mod 360
By altitude_definition on C, B, D, Line(C, F) we get Line(C, F) == altitude(C, B, D)
By altitude_definition on F, C, G, Line(F, G) we get Line(F, G) == altitude(F, C, G)
By collinear_definition on C, H, A we get H in Line(A, C), A in Line(C, H), Line(A, C) == Line(C, H), 0 == 2 * angle(H, C, A) mod 360
By collinear_definition on E, C, A we get C in Line(A, E), A in Line(C, E), Line(A, E) == Line(C, E), 0 == 2 * angle(C, E, A) mod 360
By collinear_definition on C, E, A we get E in Line(A, C), A in Line(C, E), Line(A, C) == Line(C, E), 0 == 2 * angle(E, C, A) mod 360
By perpendicular_angle_conditions_v0 on D, E, C we get angle(D, E, C) == orientation(C, D, E) mod 360
By collinear_definition on C, A, E we get A in Line(C, E), E in Line(A, C), Line(A, C) == Line(C, E), 0 == 2 * angle(A, C, E) mod 360
By altitude_definition on C, F, D, Line(C, F) we get Line(C, F) == altitude(C, D, F)
By perpendicular_angle_conditions_v0 on A, E, D we get angle(A, E, D) == orientation(A, E, D) mod 360
By altitude_definition on D, E, C, Line(D, E) we get Line(D, E) == altitude(D, C, E)
By internal_angle_bisector_definition_v0 on C, D, B, A we get angle(C, A, D) == angle(D, A, B) mod 360
By altitude_definition on D, E, A, Line(D, E) we get Line(D, E) == altitude(D, A, E)
By internal_angle_bisector_definition_v0 on B, D, C, A we get angle(B, A, D) == angle(D, A, C) mod 360
By collinear_definition on E, A, C we get A in Line(C, E), C in Line(A, E), Line(A, E) == Line(C, E), 0 == 2 * angle(A, E, C) mod 360
By altitude_definition on D, H, E, Line(D, E) we get Line(D, E) == altitude(D, E, H)
By perpendicular_angle_conditions_v0 on C, G, F we get angle(C, G, F) == orientation(C, G, F) mod 360
By perpendicular_angle_conditions_v0 on H, E, D we get angle(H, E, D) == orientation(D, H, E) mod 360
By perpendicular_angle_conditions_v0 on C, E, D we get angle(C, E, D) == orientation(C, E, D) mod 360
By perpendicular_angle_conditions_v0 on C, F, B we get angle(C, F, B) == orientation(B, C, F) mod 360
By perpendicular_angle_conditions_v0 on D, E, A we get angle(D, E, A) == orientation(A, D, E) mod 360
By altitude_definition on D, F, G, i we get i == altitude(D, F, G)
By perpendicular_angle_conditions_v0 on D, F, C we get angle(D, F, C) == orientation(C, D, F) mod 360
By perpendicular_angle_conditions_v0 on F, G, C we get angle(F, G, C) == orientation(C, F, G) mod 360
By collinear_definition on A, E, C we get E in Line(A, C), C in Line(A, E), Line(A, C) == Line(A, E), 0 == 2 * angle(E, A, C) mod 360
By collinear_definition on A, C, E we get C in Line(A, E), E in Line(A, C), Line(A, C) == Line(A, E), 0 == 2 * angle(C, A, E) mod 360
By perpendicular_angle_conditions_v0 on D, E, H we get angle(D, E, H) == orientation(D, E, H) mod 360
By internal_angle_bisector_definition_v0 on C, D, A, B we get angle(C, B, D) == angle(D, B, A) mod 360
By internal_angle_bisector_definition_v0 on A, F, C, B we get angle(A, B, F) == angle(F, B, C) mod 360
By internal_angle_bisector_definition_v0 on C, F, A, B we get angle(C, B, F) == angle(F, B, A) mod 360
By internal_angle_bisector_definition_v0 on A, G, B, C we get angle(A, C, G) == angle(G, C, B) mod 360
By internal_angle_bisector_definition_v0 on A, D, C, B we get angle(A, B, D) == angle(D, B, C) mod 360
By internal_angle_bisector_definition_v0 on B, G, A, C we get angle(B, C, G) == angle(G, C, A) mod 360
By power_of_a_point_definition on C, H, A, c we get log(power_of_a_point(C, c)) == log(distance(C, H)) + log(distance(A, C))
By concyclic_sufficient_conditions_v0 on D, F, C, E we get concyclic(C, D, E, F)
By concurrent_sufficient_conditions on h, Line(B, C), Line(A, B) we get concurrent(h, Line(A, B), Line(B, C))
By concurrent_sufficient_conditions on i, Line(B, C), f we get concurrent(f, i, Line(B, C))
By concurrent_sufficient_conditions on Line(G, H), Line(A, G), i we get concurrent(i, Line(A, G), Line(G, H))
By concurrent_sufficient_conditions on Line(G, H), Line(F, G), i we get concurrent(i, Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(A, B), g, Line(A, G) we get concurrent(g, Line(A, B), Line(A, G))
By concurrent_sufficient_conditions on Line(D, E), Line(D, H), h we get concurrent(h, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on Line(F, G), i, Line(G, H) we get concurrent(i, Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on i, Line(G, H), Line(F, G) we get concurrent(i, Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on h, Line(D, H), g we get concurrent(g, h, Line(D, H))
By concurrent_sufficient_conditions on g, Line(D, H), Line(D, E) we get concurrent(g, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on i, f, Line(B, C) we get concurrent(f, i, Line(B, C))
By concurrent_sufficient_conditions on Line(D, H), h, i we get concurrent(h, i, Line(D, H))
By concurrent_sufficient_conditions on Line(A, B), f, Line(A, G) we get concurrent(f, Line(A, B), Line(A, G))
By concurrent_sufficient_conditions on Line(F, G), Line(G, H), Line(A, G) we get concurrent(Line(A, G), Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(F, G), Line(A, G), i we get concurrent(i, Line(A, G), Line(F, G))
By concurrent_sufficient_conditions on Line(C, F), Line(B, C), i we get concurrent(i, Line(B, C), Line(C, F))
By concurrent_sufficient_conditions on Line(D, H), Line(D, E), h we get concurrent(h, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on g, f, Line(A, B) we get concurrent(f, g, Line(A, B))
By concurrent_sufficient_conditions on h, Line(D, H), Line(D, E) we get concurrent(h, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on g, Line(D, H), i we get concurrent(g, i, Line(D, H))
By concurrent_sufficient_conditions on Line(F, G), Line(G, H), i we get concurrent(i, Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(G, H), i, Line(A, G) we get concurrent(i, Line(A, G), Line(G, H))
By concurrent_sufficient_conditions on h, Line(D, H), i we get concurrent(h, i, Line(D, H))
By concurrent_sufficient_conditions on Line(G, H), Line(A, G), Line(F, G) we get concurrent(Line(A, G), Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(D, H), Line(D, E), i we get concurrent(i, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on Line(B, C), h, Line(A, B) we get concurrent(h, Line(A, B), Line(B, C))
By concurrent_sufficient_conditions on Line(B, C), f, Line(C, F) we get concurrent(f, Line(B, C), Line(C, F))
By concurrent_sufficient_conditions on Line(A, G), Line(F, G), Line(G, H) we get concurrent(Line(A, G), Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(D, H), g, i we get concurrent(g, i, Line(D, H))
By concurrent_sufficient_conditions on g, Line(D, H), h we get concurrent(g, h, Line(D, H))
By concurrent_sufficient_conditions on Line(C, F), f, Line(B, C) we get concurrent(f, Line(B, C), Line(C, F))
By concurrent_sufficient_conditions on i, Line(A, G), Line(F, G) we get concurrent(i, Line(A, G), Line(F, G))
By concurrent_sufficient_conditions on i, Line(A, G), Line(G, H) we get concurrent(i, Line(A, G), Line(G, H))
By concurrent_sufficient_conditions on Line(D, H), h, g we get concurrent(g, h, Line(D, H))
By concurrent_sufficient_conditions on h, i, Line(D, H) we get concurrent(h, i, Line(D, H))
By concurrent_sufficient_conditions on Line(A, G), f, Line(A, B) we get concurrent(f, Line(A, B), Line(A, G))
By concurrent_sufficient_conditions on Line(A, G), Line(F, G), i we get concurrent(i, Line(A, G), Line(F, G))
By concurrent_sufficient_conditions on Line(B, C), Line(C, F), i we get concurrent(i, Line(B, C), Line(C, F))
By concurrent_sufficient_conditions on Line(A, G), Line(G, H), i we get concurrent(i, Line(A, G), Line(G, H))
By concurrent_sufficient_conditions on Line(A, G), Line(A, B), g we get concurrent(g, Line(A, B), Line(A, G))
By concurrent_sufficient_conditions on i, Line(D, H), h we get concurrent(h, i, Line(D, H))
By concurrent_sufficient_conditions on i, Line(D, H), Line(D, E) we get concurrent(i, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on Line(D, E), Line(D, H), i we get concurrent(i, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on Line(A, G), g, Line(A, B) we get concurrent(g, Line(A, B), Line(A, G))
By concurrent_sufficient_conditions on f, Line(A, B), g we get concurrent(f, g, Line(A, B))
By concurrent_sufficient_conditions on Line(F, G), i, Line(A, G) we get concurrent(i, Line(A, G), Line(F, G))
By concurrent_sufficient_conditions on g, i, Line(D, H) we get concurrent(g, i, Line(D, H))
By concurrent_sufficient_conditions on Line(A, B), h, Line(B, C) we get concurrent(h, Line(A, B), Line(B, C))
By concurrent_sufficient_conditions on i, Line(F, G), Line(A, G) we get concurrent(i, Line(A, G), Line(F, G))
By concurrent_sufficient_conditions on h, Line(D, E), Line(D, H) we get concurrent(h, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on Line(A, G), Line(G, H), Line(F, G) we get concurrent(Line(A, G), Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on f, Line(A, B), Line(A, G) we get concurrent(f, Line(A, B), Line(A, G))
By concurrent_sufficient_conditions on i, h, Line(D, H) we get concurrent(h, i, Line(D, H))
By concurrent_sufficient_conditions on f, Line(A, G), g we get concurrent(f, g, Line(A, G))
By concurrent_sufficient_conditions on Line(D, H), i, g we get concurrent(g, i, Line(D, H))
By concurrent_sufficient_conditions on g, Line(A, G), Line(A, B) we get concurrent(g, Line(A, B), Line(A, G))
By concurrent_sufficient_conditions on Line(G, H), Line(D, H), f we get concurrent(f, Line(D, H), Line(G, H))
By concurrent_sufficient_conditions on Line(D, E), Line(D, H), g we get concurrent(g, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on Line(A, B), f, g we get concurrent(f, g, Line(A, B))
By concurrent_sufficient_conditions on i, Line(B, C), Line(C, F) we get concurrent(i, Line(B, C), Line(C, F))
By concurrent_sufficient_conditions on Line(D, H), g, Line(D, E) we get concurrent(g, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on Line(B, C), Line(A, B), h we get concurrent(h, Line(A, B), Line(B, C))
By concurrent_sufficient_conditions on f, i, Line(B, C) we get concurrent(f, i, Line(B, C))
By concurrent_sufficient_conditions on f, Line(C, F), Line(B, C) we get concurrent(f, Line(B, C), Line(C, F))
By concurrent_sufficient_conditions on i, Line(D, H), g we get concurrent(g, i, Line(D, H))
By concurrent_sufficient_conditions on Line(A, B), g, f we get concurrent(f, g, Line(A, B))
By concurrent_sufficient_conditions on Line(A, G), i, Line(G, H) we get concurrent(i, Line(A, G), Line(G, H))
By concurrent_sufficient_conditions on Line(D, H), f, Line(G, H) we get concurrent(f, Line(D, H), Line(G, H))
By concurrent_sufficient_conditions on i, g, Line(D, H) we get concurrent(g, i, Line(D, H))
By concurrent_sufficient_conditions on f, Line(A, G), Line(A, B) we get concurrent(f, Line(A, B), Line(A, G))
By concurrent_sufficient_conditions on f, Line(B, C), Line(C, F) we get concurrent(f, Line(B, C), Line(C, F))
By concurrent_sufficient_conditions on g, Line(A, B), Line(A, G) we get concurrent(g, Line(A, B), Line(A, G))
By concurrent_sufficient_conditions on Line(D, E), h, Line(D, H) we get concurrent(h, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on Line(A, B), Line(B, C), h we get concurrent(h, Line(A, B), Line(B, C))
By concurrent_sufficient_conditions on g, f, Line(A, G) we get concurrent(f, g, Line(A, G))
By concurrent_sufficient_conditions on Line(A, G), g, f we get concurrent(f, g, Line(A, G))
By concurrent_sufficient_conditions on Line(D, H), g, h we get concurrent(g, h, Line(D, H))
By concurrent_sufficient_conditions on Line(G, H), Line(F, G), Line(A, G) we get concurrent(Line(A, G), Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(A, B), Line(A, G), f we get concurrent(f, Line(A, B), Line(A, G))
By concurrent_sufficient_conditions on f, Line(D, H), Line(G, H) we get concurrent(f, Line(D, H), Line(G, H))
By concurrent_sufficient_conditions on Line(D, H), i, Line(D, E) we get concurrent(i, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on g, Line(D, E), Line(D, H) we get concurrent(g, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on Line(B, C), i, f we get concurrent(f, i, Line(B, C))
By concurrent_sufficient_conditions on Line(A, G), i, Line(F, G) we get concurrent(i, Line(A, G), Line(F, G))
By concurrent_sufficient_conditions on Line(B, C), i, Line(C, F) we get concurrent(i, Line(B, C), Line(C, F))
By concurrent_sufficient_conditions on Line(B, C), f, i we get concurrent(f, i, Line(B, C))
By concurrent_sufficient_conditions on i, Line(C, F), Line(B, C) we get concurrent(i, Line(B, C), Line(C, F))
By concurrent_sufficient_conditions on f, g, Line(A, G) we get concurrent(f, g, Line(A, G))
By concurrent_sufficient_conditions on Line(F, G), Line(A, G), Line(G, H) we get concurrent(Line(A, G), Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on g, Line(A, B), f we get concurrent(f, g, Line(A, B))
By concurrent_sufficient_conditions on g, Line(A, G), f we get concurrent(f, g, Line(A, G))
By concurrent_sufficient_conditions on h, Line(A, B), Line(B, C) we get concurrent(h, Line(A, B), Line(B, C))
By concurrent_sufficient_conditions on Line(D, H), i, h we get concurrent(h, i, Line(D, H))
By concurrent_sufficient_conditions on Line(D, E), i, Line(D, H) we get concurrent(i, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on Line(D, H), Line(G, H), f we get concurrent(f, Line(D, H), Line(G, H))
By concurrent_sufficient_conditions on Line(G, H), f, Line(D, H) we get concurrent(f, Line(D, H), Line(G, H))
By concurrent_sufficient_conditions on Line(B, C), Line(C, F), f we get concurrent(f, Line(B, C), Line(C, F))
By concurrent_sufficient_conditions on f, Line(B, C), i we get concurrent(f, i, Line(B, C))
By concurrent_sufficient_conditions on f, g, Line(A, B) we get concurrent(f, g, Line(A, B))
By concurrent_sufficient_conditions on Line(D, E), g, Line(D, H) we get concurrent(g, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on Line(A, B), Line(A, G), g we get concurrent(g, Line(A, B), Line(A, G))
By concurrent_sufficient_conditions on Line(A, G), Line(A, B), f we get concurrent(f, Line(A, B), Line(A, G))
By concurrent_sufficient_conditions on h, g, Line(D, H) we get concurrent(g, h, Line(D, H))
By concurrent_sufficient_conditions on Line(C, F), Line(B, C), f we get concurrent(f, Line(B, C), Line(C, F))
By concurrent_sufficient_conditions on i, Line(F, G), Line(G, H) we get concurrent(i, Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(D, H), Line(D, E), g we get concurrent(g, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on i, Line(G, H), Line(A, G) we get concurrent(i, Line(A, G), Line(G, H))
By concurrent_sufficient_conditions on g, h, Line(D, H) we get concurrent(g, h, Line(D, H))
By concurrent_sufficient_conditions on i, Line(D, E), Line(D, H) we get concurrent(i, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on Line(D, H), h, Line(D, E) we get concurrent(h, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on Line(A, G), f, g we get concurrent(f, g, Line(A, G))
By concurrent_sufficient_conditions on Line(G, H), i, Line(F, G) we get concurrent(i, Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(C, F), i, Line(B, C) we get concurrent(i, Line(B, C), Line(C, F))
By concurrent_sufficient_conditions on f, Line(G, H), Line(D, H) we get concurrent(f, Line(D, H), Line(G, H))
By perpendicular_direction_conditions_v0_r on D, G, G, F we get 180 == 2 * direction(D, G) - 2 * direction(G, F) mod 360
By same_angle_v0 on B, F, D, C we get angle(D, B, C) == angle(F, B, C) mod 360
By same_angle_v1 on B, F, D, A we get angle(D, B, A) == angle(F, B, A) mod 360
By same_angle_v2 on G, D, C, H we get angle(D, G, H) == angle(C, G, H) + 180 mod 360
By same_angle_v2 on D, B, F, A we get angle(B, D, A) == angle(F, D, A) + 180 mod 360
By same_angle_v2 on G, D, C, F we get angle(D, G, F) == angle(C, G, F) + 180 mod 360
By same_angle_v3 on D, F, B, E we get angle(F, D, E) == angle(B, D, E) + 180 mod 360
By same_angle_v1 on H, E, A, G we get angle(A, H, G) == angle(E, H, G) mod 360
By same_angle_v3 on D, F, B, G we get angle(F, D, G) == angle(B, D, G) + 180 mod 360
By same_angle_v1 on F, B, D, G we get angle(B, F, G) == angle(D, F, G) mod 360
By same_angle_v2 on G, D, C, A we get angle(D, G, A) == angle(C, G, A) + 180 mod 360
By same_angle_v2 on H, C, E, G we get angle(C, H, G) == angle(E, H, G) + 180 mod 360
By same_angle_v3 on D, F, B, H we get angle(F, D, H) == angle(B, D, H) + 180 mod 360
By same_angle_v3 on H, C, E, D we get angle(C, H, D) == angle(E, H, D) + 180 mod 360
By same_angle_v1 on H, A, E, D we get angle(A, H, D) == angle(E, H, D) mod 360
By perpendicular_direction_conditions_v0_r on G, D, G, F we get 180 == 2 * direction(G, D) - 2 * direction(G, F) mod 360
By between_imply_not_between on A, H, C we get collinear_and_not_between(C, A, H)
By perpendicular_direction_conditions_v0_r on F, G, D, G we get 180 == 2 * direction(F, G) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on F, G, G, D we get 180 == 2 * direction(F, G) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on G, F, D, G we get 180 == 2 * direction(G, F) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on D, G, F, G we get 180 == 2 * direction(D, G) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on G, D, F, G we get 180 == 2 * direction(G, D) - 2 * direction(F, G) mod 360
By projection_definition on D, G, Line(F, G) we get G == projection(D, Line(F, G))
By perpendicular_direction_conditions_v0_r on G, F, G, D we get 180 == 2 * direction(G, F) - 2 * direction(G, D) mod 360
By between_imply_not_between on C, E, A we get collinear_and_not_between(A, C, E)
By between_imply_not_between on C, H, A we get collinear_and_not_between(A, C, H)
By between_imply_not_between on A, E, C we get collinear_and_not_between(C, A, E)
By same_angle_v0 on C, D, G, E we get angle(D, C, E) == angle(G, C, E) mod 360
By same_angle_v1 on C, E, A, D we get angle(A, C, D) == angle(E, C, D) mod 360
By same_angle_v1 on C, E, H, D we get angle(E, C, D) == angle(H, C, D) mod 360
By perpendicular_direction_conditions_v0_r on F, G, C, D we get 180 == 2 * direction(F, G) - 2 * direction(C, D) mod 360
By same_angle_v1 on D, C, G, F we get angle(C, D, F) == angle(G, D, F) mod 360
By same_angle_v1 on D, G, C, E we get angle(C, D, E) == angle(G, D, E) mod 360
By same_angle_v3 on D, F, B, C we get angle(F, D, C) == angle(B, D, C) + 180 mod 360
By same_angle_v0 on C, G, D, F we get angle(D, C, F) == angle(G, C, F) mod 360
By same_angle_v1 on C, H, A, D we get angle(A, C, D) == angle(H, C, D) mod 360
By same_angle_v0 on C, G, D, H we get angle(D, C, H) == angle(G, C, H) mod 360
By same_angle_v1 on D, G, C, H we get angle(C, D, H) == angle(G, D, H) mod 360
By same_angle_v0 on C, G, D, A we get angle(D, C, A) == angle(G, C, A) mod 360
By same_angle_v1 on C, D, G, B we get angle(D, C, B) == angle(G, C, B) mod 360
By same_angle_v1 on D, G, C, A we get angle(C, D, A) == angle(G, D, A) mod 360
By same_angle_v0 on D, G, C, B we get angle(C, D, B) == angle(G, D, B) mod 360
By perpendicular_direction_conditions_v0_r on F, G, D, C we get 180 == 2 * direction(F, G) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on C, D, F, G we get 180 == 2 * direction(C, D) - 2 * direction(F, G) mod 360
By probably_between_and_collinear_implies_between on B, D, F we get between(B, D, F)
By perpendicular_direction_conditions_v0_r on G, F, D, C we get 180 == 2 * direction(G, F) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on D, C, F, G we get 180 == 2 * direction(D, C) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on G, F, C, D we get 180 == 2 * direction(G, F) - 2 * direction(C, D) mod 360
By probably_between_and_collinear_implies_between on H, E, A we get between(A, E, H)
By perpendicular_direction_conditions_v0_r on D, C, G, F we get 180 == 2 * direction(D, C) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on C, D, G, F we get 180 == 2 * direction(C, D) - 2 * direction(G, F) mod 360
By probably_between_and_collinear_implies_between on C, H, E we get between(C, H, E)
By probably_between_and_collinear_implies_between on C, G, D we get between(C, G, D)
By perpendicular_angle_conditions_v0 on F, G, D we get angle(F, G, D) == orientation(D, F, G) mod 360
By reverse_direction on A, C we get 180 == direction(A, C) - direction(C, A) mod 360
By divide_by_2_mod_180_v1 on F, B, A, C, B, D we get angle(C, B, D) == angle(F, B, A) mod 360
By divide_by_2_mod_180_v1 on C, B, F, C, B, D we get angle(C, B, D) == angle(C, B, F) mod 360
By divide_by_2_mod_180_v0 on A, B, F, A, B, D we get angle(A, B, D) == angle(A, B, F) mod 360
By collinear_definition on D, B, F we get B in Line(D, F), F in Line(B, D), Line(B, D) == Line(D, F), 0 == 2 * angle(B, D, F) mod 360
By divide_by_2_mod_180_v0 on F, B, C, A, B, D we get angle(A, B, D) == angle(F, B, C) mod 360
By divide_by_2_mod_180_v0 on A, B, F, D, B, C we get angle(A, B, F) == angle(D, B, C) mod 360
By collinear_definition on E, C, H we get C in Line(E, H), H in Line(C, E), Line(C, E) == Line(E, H), 0 == 2 * angle(C, E, H) mod 360
By reverse_direction on F, D we get 180 == direction(F, D) - direction(D, F) mod 360
By reverse_direction on D, E we get 180 == direction(D, E) - direction(E, D) mod 360
By divide_by_2_mod_180_v1 on C, B, F, D, B, A we get angle(C, B, F) == angle(D, B, A) mod 360
By reverse_direction on E, C we get 180 == direction(E, C) - direction(C, E) mod 360
By collinear_definition on H, A, E we get A in Line(E, H), E in Line(A, H), Line(A, H) == Line(E, H), 0 == 2 * angle(A, H, E) mod 360
By reverse_direction on C, B we get 180 == direction(C, B) - direction(B, C) mod 360
By reverse_direction on G, F we get 180 == direction(G, F) - direction(F, G) mod 360
By collinear_definition on C, E, H we get E in Line(C, H), H in Line(C, E), Line(C, E) == Line(C, H), 0 == 2 * angle(E, C, H) mod 360
By reverse_direction on B, F we get 180 == direction(B, F) - direction(F, B) mod 360
By collinear_definition on A, H, E we get H in Line(A, E), E in Line(A, H), Line(A, E) == Line(A, H), 0 == 2 * angle(H, A, E) mod 360
By collinear_definition on D, F, B we get F in Line(B, D), B in Line(D, F), Line(B, D) == Line(D, F), 0 == 2 * angle(F, D, B) mod 360
By reverse_direction on H, C we get 180 == direction(H, C) - direction(C, H) mod 360
By collinear_definition on C, H, E we get H in Line(C, E), E in Line(C, H), Line(C, E) == Line(C, H), 0 == 2 * angle(H, C, E) mod 360
By reverse_direction on A, E we get 180 == direction(A, E) - direction(E, A) mod 360
By reverse_direction on C, H we get 180 == direction(C, H) - direction(H, C) mod 360
By reverse_direction on C, F we get 180 == direction(C, F) - direction(F, C) mod 360
By between_imply_segment_sum on C, E, A we get distance(A, C) == distance(C, E) + distance(A, E)
By collinear_definition on E, H, C we get H in Line(C, E), C in Line(E, H), Line(C, E) == Line(E, H), 0 == 2 * angle(H, E, C) mod 360
By reverse_direction on A, B we get 180 == direction(A, B) - direction(B, A) mod 360
By collinear_definition on H, E, A we get E in Line(A, H), A in Line(E, H), Line(A, H) == Line(E, H), 0 == 2 * angle(E, H, A) mod 360
By collinear_definition on E, A, H we get A in Line(E, H), H in Line(A, E), Line(A, E) == Line(E, H), 0 == 2 * angle(A, E, H) mod 360
By reverse_direction on D, F we get 180 == direction(D, F) - direction(F, D) mod 360
By reverse_direction on B, D we get 180 == direction(B, D) - direction(D, B) mod 360
By collinear_definition on F, D, B we get D in Line(B, F), B in Line(D, F), Line(B, F) == Line(D, F), 0 == 2 * angle(D, F, B) mod 360
By perpendicular_angle_conditions_v0 on D, G, F we get angle(D, G, F) == orientation(D, G, F) mod 360
By reverse_direction on D, B we get 180 == direction(D, B) - direction(B, D) mod 360
By reverse_direction on C, G we get 180 == direction(C, G) - direction(G, C) mod 360
By reverse_direction on F, G we get 180 == direction(F, G) - direction(G, F) mod 360
By collinear_definition on A, E, H we get E in Line(A, H), H in Line(A, E), Line(A, E) == Line(A, H), 0 == 2 * angle(E, A, H) mod 360
By reverse_direction on B, A we get 180 == direction(B, A) - direction(A, B) mod 360
By collinear_definition on B, D, F we get D in Line(B, F), F in Line(B, D), Line(B, D) == Line(B, F), 0 == 2 * angle(D, B, F) mod 360
By reverse_direction on C, A we get 180 == direction(C, A) - direction(A, C) mod 360
By between_imply_segment_sum on C, H, A we get distance(A, C) == distance(C, H) + distance(A, H)
By collinear_definition on H, C, E we get C in Line(E, H), E in Line(C, H), Line(C, H) == Line(E, H), 0 == 2 * angle(C, H, E) mod 360
By reverse_direction on C, E we get 180 == direction(C, E) - direction(E, C) mod 360
By reverse_direction on G, C we get 180 == direction(G, C) - direction(C, G) mod 360
By collinear_definition on G, C, D we get C in Line(D, G), D in Line(C, G), Line(C, G) == Line(D, G), 0 == 2 * angle(C, G, D) mod 360
By reverse_direction on F, B we get 180 == direction(F, B) - direction(B, F) mod 360
By reverse_direction on F, C we get 180 == direction(F, C) - direction(C, F) mod 360
By collinear_definition on H, E, C we get E in Line(C, H), C in Line(E, H), Line(C, H) == Line(E, H), 0 == 2 * angle(E, H, C) mod 360
By collinear_definition on G, D, C we get D in Line(C, G), C in Line(D, G), Line(C, G) == Line(D, G), 0 == 2 * angle(D, G, C) mod 360
By collinear_definition on B, F, D we get F in Line(B, D), D in Line(B, F), Line(B, D) == Line(B, F), 0 == 2 * angle(F, B, D) mod 360
By reverse_direction on E, D we get 180 == direction(E, D) - direction(D, E) mod 360
By reverse_direction on B, C we get 180 == direction(B, C) - direction(C, B) mod 360
By reverse_direction on E, A we get 180 == direction(E, A) - direction(A, E) mod 360
By collinear_definition on E, H, A we get H in Line(A, E), A in Line(E, H), Line(A, E) == Line(E, H), 0 == 2 * angle(H, E, A) mod 360
By reverse_direction on E, H we get 180 == direction(E, H) - direction(H, E) mod 360
By reverse_direction on H, E we get 180 == direction(H, E) - direction(E, H) mod 360
By collinear_definition on F, B, D we get B in Line(D, F), D in Line(B, F), Line(B, F) == Line(D, F), 0 == 2 * angle(B, F, D) mod 360
By external_angle_bisector_definition_v0_r on F, C, F, G we get Line(C, G) == external_angle_bisector(F, G, F)
By external_angle_bisector_definition_v0_r on D, H, D, E we get Line(E, H) == external_angle_bisector(D, E, D)
By external_angle_bisector_definition_v0_r on D, C, B, F we get Line(C, F) == external_angle_bisector(B, F, D)
By external_angle_bisector_definition_v0_r on D, C, D, F we get Line(C, F) == external_angle_bisector(D, F, D)
By external_angle_bisector_definition_v0_r on D, A, D, E we get Line(A, E) == external_angle_bisector(D, E, D)
By external_angle_bisector_definition_v0_r on H, D, H, E we get Line(D, E) == external_angle_bisector(H, E, H)
By external_angle_bisector_definition_v0_r on C, D, H, E we get Line(D, E) == external_angle_bisector(C, E, H)
By external_angle_bisector_definition_v0_r on D, C, D, E we get Line(C, E) == external_angle_bisector(D, E, D)
By internal_angle_bisector_definition_v0_r on H, G, B, C we get Line(C, G) == internal_angle_bisector(B, C, H)
By external_angle_bisector_definition_v0_r on A, D, A, E we get Line(D, E) == external_angle_bisector(A, E, A)
By external_angle_bisector_definition_v0_r on B, C, B, F we get Line(C, F) == external_angle_bisector(B, F, B)
By external_angle_bisector_definition_v0_r on C, B, C, F we get Line(B, F) == external_angle_bisector(C, F, C)
By internal_angle_bisector_definition_v0_r on A, C, A, E we get Line(C, E) == internal_angle_bisector(A, E, A)
By internal_angle_bisector_definition_v0_r on C, A, C, H we get Line(A, H) == internal_angle_bisector(C, H, C)
By collinear_definition on D, C, G we get C in Line(D, G), G in Line(C, D), Line(C, D) == Line(D, G), 0 == 2 * angle(C, D, G) mod 360
By internal_angle_bisector_definition_v0_r on E, C, H, A we get Line(A, C) == internal_angle_bisector(E, A, H)
By external_angle_bisector_definition_v0_r on C, D, C, F we get Line(D, F) == external_angle_bisector(C, F, C)
By internal_angle_bisector_definition_v0_r on C, E, C, A we get Line(A, E) == internal_angle_bisector(C, A, C)
By collinear_definition on C, G, D we get G in Line(C, D), D in Line(C, G), Line(C, D) == Line(C, G), 0 == 2 * angle(G, C, D) mod 360
By internal_angle_bisector_definition_v0_r on A, C, A, H we get Line(C, H) == internal_angle_bisector(A, H, A)
By internal_angle_bisector_definition_v0_r on H, C, H, A we get Line(A, C) == internal_angle_bisector(H, A, H)
By internal_angle_bisector_definition_v0_r on H, A, E, C we get Line(A, C) == internal_angle_bisector(E, C, H)
By external_angle_bisector_definition_v0_r on C, F, C, G we get Line(F, G) == external_angle_bisector(C, G, C)
By internal_angle_bisector_definition_v0_r on E, D, B, A we get Line(A, D) == internal_angle_bisector(B, A, E)
By external_angle_bisector_definition_v0_r on C, D, C, E we get Line(D, E) == external_angle_bisector(C, E, C)
By internal_angle_bisector_definition_v0_r on A, D, H, E we get Line(D, E) == internal_angle_bisector(A, E, H)
By internal_angle_bisector_definition_v0_r on H, A, H, C we get Line(A, C) == internal_angle_bisector(H, C, H)
By internal_angle_bisector_definition_v0_r on C, D, A, E we get Line(D, E) == internal_angle_bisector(A, E, C)
By internal_angle_bisector_definition_v0 on B, D, A, C we get angle(B, C, D) == angle(D, C, A) mod 360
By internal_angle_bisector_definition_v0_r on C, H, C, A we get Line(A, H) == internal_angle_bisector(C, A, C)
By collinear_definition on C, D, G we get D in Line(C, G), G in Line(C, D), Line(C, D) == Line(C, G), 0 == 2 * angle(D, C, G) mod 360
By internal_angle_bisector_definition_v0_r on A, H, A, C we get Line(C, H) == internal_angle_bisector(A, C, A)
By internal_angle_bisector_definition_v0_r on B, D, H, A we get Line(A, D) == internal_angle_bisector(B, A, H)
By internal_angle_bisector_definition_v0_r on E, G, B, C we get Line(C, G) == internal_angle_bisector(B, C, E)
By internal_angle_bisector_definition_v0_r on E, A, E, C we get Line(A, C) == internal_angle_bisector(E, C, E)
By internal_angle_bisector_definition_v0 on A, D, B, C we get angle(A, C, D) == angle(D, C, B) mod 360
By internal_angle_bisector_definition_v0_r on E, C, E, A we get Line(A, C) == internal_angle_bisector(E, A, E)
By internal_angle_bisector_definition_v0_r on A, E, A, C we get Line(C, E) == internal_angle_bisector(A, C, A)
By collinear_definition on D, G, C we get G in Line(C, D), C in Line(D, G), Line(C, D) == Line(D, G), 0 == 2 * angle(G, D, C) mod 360
By internal_angle_bisector_definition_v0_r on C, A, C, E we get Line(A, E) == internal_angle_bisector(C, E, C)
By altitude_definition on F, G, D, Line(F, G) we get Line(F, G) == altitude(F, D, G)
By altitude_definition on F, D, C, Line(F, G) we get Line(F, G) == altitude(F, C, D)
By power_of_a_point_definition on C, D, G, c we get log(power_of_a_point(C, c)) == log(distance(C, D)) + log(distance(C, G))
By power_of_a_point_definition on E, A, H, c we get log(power_of_a_point(E, c)) == log(distance(A, E)) + log(distance(E, H))
By between_imply_not_between on C, G, D we get collinear_and_not_between(D, C, G)
By between_imply_not_between on C, H, E we get collinear_and_not_between(E, C, H)
By between_imply_not_between on A, E, H we get collinear_and_not_between(E, A, H)
By between_imply_not_between on B, D, F we get collinear_and_not_between(D, B, F)
By between_imply_not_between on H, E, A we get collinear_and_not_between(A, H, E)
By between_imply_not_between on D, G, C we get collinear_and_not_between(C, D, G)
By between_imply_not_between on E, H, C we get collinear_and_not_between(C, E, H)
By between_imply_not_between on F, D, B we get collinear_and_not_between(B, F, D)
By divide_by_2_mod_180_v0 on D, A, B, G, F, D we get angle(D, A, B) == angle(G, F, D) mod 360
By divide_by_2_mod_180_v0 on G, C, F, D, A, B we get angle(D, A, B) == angle(G, C, F) mod 360
By divide_by_2_mod_180_v1 on D, F, G, D, A, H we get angle(D, A, H) == angle(D, F, G) mod 360
By divide_by_2_mod_180_v1 on D, A, H, F, C, D we get angle(D, A, H) == angle(F, C, D) mod 360
By divide_by_2_mod_180_v1 on D, A, C, F, C, D we get angle(D, A, C) == angle(F, C, D) mod 360
By divide_by_2_mod_180_v3 on H, G, D, D, C, F we get angle(H, G, D) == angle(D, C, F) + 180 mod 360
By divide_by_2_mod_180_v0 on A, D, F, E, D, C we get angle(A, D, F) == angle(E, D, C) mod 360
By divide_by_2_mod_180_v0 on H, A, D, D, C, F we get angle(D, C, F) == angle(H, A, D) mod 360
By divide_by_2_mod_180_v2 on B, D, A, G, D, E we get angle(B, D, A) == angle(G, D, E) + 180 mod 360
By divide_by_2_mod_180_v0 on G, F, B, D, A, B we get angle(D, A, B) == angle(G, F, B) mod 360
By divide_by_2_mod_180_v1 on F, C, G, D, A, C we get angle(D, A, C) == angle(F, C, G) mod 360
By between_imply_segment_sum on A, E, H we get distance(A, H) == distance(A, E) + distance(E, H)
By divide_by_2_mod_180_v0 on C, A, D, G, C, F we get angle(C, A, D) == angle(G, C, F) mod 360
By divide_by_2_mod_180_v1 on C, D, E, F, D, A we get angle(C, D, E) == angle(F, D, A) mod 360
By divide_by_2_mod_180_v1 on D, A, E, B, F, G we get angle(B, F, G) == angle(D, A, E) mod 360
By divide_by_2_mod_180_v0 on C, A, D, D, C, F we get angle(C, A, D) == angle(D, C, F) mod 360
By divide_by_2_mod_180_v0 on G, F, B, H, A, D we get angle(G, F, B) == angle(H, A, D) mod 360
By divide_by_2_mod_180_v0 on G, F, B, E, A, D we get angle(E, A, D) == angle(G, F, B) mod 360
By divide_by_2_mod_180_v0 on E, A, D, G, F, D we get angle(E, A, D) == angle(G, F, D) mod 360
By divide_by_2_mod_180_v0 on D, C, F, E, A, D we get angle(D, C, F) == angle(E, A, D) mod 360
By divide_by_2_mod_180_v3 on D, F, G, D, G, H we get angle(D, F, G) == angle(D, G, H) + 180 mod 360
By divide_by_2_mod_180_v1 on D, F, G, D, A, C we get angle(D, A, C) == angle(D, F, G) mod 360
By aa_anti_similarity on D, F, C, F, G, C we get anti_similar_triangles(C, D, F, C, F, G)
By divide_by_2_mod_180_v1 on F, C, G, D, A, E we get angle(D, A, E) == angle(F, C, G) mod 360
By divide_by_2_mod_180_v1 on B, F, G, B, A, D we get angle(B, A, D) == angle(B, F, G) mod 360
By divide_by_2_mod_180_v1 on C, G, H, F, C, G we get angle(C, G, H) == angle(F, C, G) mod 360
By divide_by_2_mod_180_v1 on F, C, G, D, A, H we get angle(D, A, H) == angle(F, C, G) mod 360
By divide_by_2_mod_180_v0 on C, A, D, G, F, B we get angle(C, A, D) == angle(G, F, B) mod 360
By divide_by_2_mod_180_v0 on A, D, F, E, D, G we get angle(A, D, F) == angle(E, D, G) mod 360
By divide_by_2_mod_180_v3 on A, D, B, E, D, G we get angle(A, D, B) == angle(E, D, G) + 180 mod 360
By divide_by_2_mod_180_v1 on B, F, G, D, A, C we get angle(B, F, G) == angle(D, A, C) mod 360
By divide_by_2_mod_180_v2 on D, G, H, B, F, G we get angle(D, G, H) == angle(B, F, G) + 180 mod 360
By divide_by_2_mod_180_v2 on D, G, H, D, F, G we get angle(D, G, H) == angle(D, F, G) + 180 mod 360
By divide_by_2_mod_180_v1 on D, F, G, B, A, D we get angle(B, A, D) == angle(D, F, G) mod 360
By divide_by_2_mod_180_v1 on D, F, G, C, G, H we get angle(C, G, H) == angle(D, F, G) mod 360
By divide_by_2_mod_180_v1 on B, F, G, C, G, H we get angle(B, F, G) == angle(C, G, H) mod 360
By divide_by_2_mod_180_v0 on H, A, D, G, F, D we get angle(G, F, D) == angle(H, A, D) mod 360
By between_imply_segment_sum on F, D, B we get distance(B, F) == distance(D, F) + distance(B, D)
By divide_by_2_mod_180_v0 on D, C, F, D, A, B we get angle(D, A, B) == angle(D, C, F) mod 360
By divide_by_2_mod_180_v0 on G, F, B, H, G, C we get angle(G, F, B) == angle(H, G, C) mod 360
By divide_by_2_mod_180_v2 on B, D, A, C, D, E we get angle(B, D, A) == angle(C, D, E) + 180 mod 360
By divide_by_2_mod_180_v3 on H, G, D, G, F, D we get angle(H, G, D) == angle(G, F, D) + 180 mod 360
By divide_by_2_mod_180_v0 on E, A, D, G, C, F we get angle(E, A, D) == angle(G, C, F) mod 360
By divide_by_2_mod_180_v0 on G, F, D, C, A, D we get angle(C, A, D) == angle(G, F, D) mod 360
By divide_by_2_mod_180_v0 on H, G, C, G, F, D we get angle(G, F, D) == angle(H, G, C) mod 360
By divide_by_2_mod_180_v1 on B, A, D, F, C, G we get angle(B, A, D) == angle(F, C, G) mod 360
By divide_by_2_mod_180_v3 on B, F, G, D, G, H we get angle(B, F, G) == angle(D, G, H) + 180 mod 360
By divide_by_2_mod_180_v0 on G, C, F, H, A, D we get angle(G, C, F) == angle(H, A, D) mod 360
By divide_by_2_mod_180_v1 on F, C, D, D, A, E we get angle(D, A, E) == angle(F, C, D) mod 360
By aa_similarity on F, C, G, D, F, G we get similar_triangles(C, F, G, F, D, G)
By divide_by_2_mod_180_v1 on C, G, H, F, C, D we get angle(C, G, H) == angle(F, C, D) mod 360
By divide_by_2_mod_180_v2 on D, C, F, H, G, D we get angle(D, C, F) == angle(H, G, D) + 180 mod 360
By divide_by_2_mod_180_v1 on F, D, A, G, D, E we get angle(F, D, A) == angle(G, D, E) mod 360
By divide_by_2_mod_180_v0 on H, G, C, G, C, F we get angle(G, C, F) == angle(H, G, C) mod 360
By divide_by_2_mod_180_v3 on C, D, E, B, D, A we get angle(C, D, E) == angle(B, D, A) + 180 mod 360
By between_imply_segment_sum on C, H, E we get distance(C, E) == distance(C, H) + distance(E, H)
By divide_by_2_mod_180_v2 on G, F, B, H, G, D we get angle(G, F, B) == angle(H, G, D) + 180 mod 360
By divide_by_2_mod_180_v3 on G, D, E, B, D, A we get angle(G, D, E) == angle(B, D, A) + 180 mod 360
By divide_by_2_mod_180_v2 on D, G, H, F, C, D we get angle(D, G, H) == angle(F, C, D) + 180 mod 360
By divide_by_2_mod_180_v2 on G, C, F, H, G, D we get angle(G, C, F) == angle(H, G, D) + 180 mod 360
By between_imply_segment_sum on D, G, C we get distance(C, D) == distance(D, G) + distance(C, G)
By divide_by_2_mod_180_v1 on D, A, H, B, F, G we get angle(B, F, G) == angle(D, A, H) mod 360
By divide_by_2_mod_180_v1 on F, C, D, B, A, D we get angle(B, A, D) == angle(F, C, D) mod 360
By divide_by_2_mod_180_v3 on H, G, D, G, F, B we get angle(H, G, D) == angle(G, F, B) + 180 mod 360
By divide_by_2_mod_180_v3 on F, C, D, D, G, H we get angle(F, C, D) == angle(D, G, H) + 180 mod 360
By divide_by_2_mod_180_v2 on E, D, G, A, D, B we get angle(E, D, G) == angle(A, D, B) + 180 mod 360
By divide_by_2_mod_180_v3 on A, D, B, E, D, C we get angle(A, D, B) == angle(E, D, C) + 180 mod 360
By divide_by_2_mod_180_v2 on G, F, D, H, G, D we get angle(G, F, D) == angle(H, G, D) + 180 mod 360
By divide_by_2_mod_180_v3 on H, G, D, G, C, F we get angle(H, G, D) == angle(G, C, F) + 180 mod 360
By divide_by_2_mod_180_v0 on H, G, C, D, C, F we get angle(D, C, F) == angle(H, G, C) mod 360
By aa_anti_similarity on F, C, G, D, C, F we get anti_similar_triangles(C, D, F, C, F, G)
By divide_by_2_mod_180_v3 on F, C, G, D, G, H we get angle(F, C, G) == angle(D, G, H) + 180 mod 360
By divide_by_2_mod_180_v2 on E, D, C, A, D, B we get angle(E, D, C) == angle(A, D, B) + 180 mod 360
By divide_by_2_mod_180_v1 on D, A, E, D, F, G we get angle(D, A, E) == angle(D, F, G) mod 360
By divide_by_2_mod_180_v2 on D, G, H, F, C, G we get angle(D, G, H) == angle(F, C, G) + 180 mod 360
By aa_similarity on D, F, G, F, C, G we get similar_triangles(C, F, G, F, D, G)
By aa_anti_similarity on F, G, C, D, F, C we get anti_similar_triangles(C, D, F, C, F, G)
By aa_similarity on F, G, C, D, G, F we get similar_triangles(C, F, G, F, D, G)
By aa_anti_similarity on D, C, F, F, C, G we get anti_similar_triangles(C, D, F, C, F, G)
By aa_similarity on D, G, F, F, G, C we get similar_triangles(C, F, G, F, D, G)
By internal_angle_bisector_definition_v0_r on B, D, B, F we get Line(D, F) == internal_angle_bisector(B, F, B)
By internal_angle_bisector_definition_v0_r on C, H, E, A we get Line(A, H) == internal_angle_bisector(C, A, E)
By concyclic_definition_0 on C, D, F, E we get E in Circle(C, D, F)
By external_angle_bisector_definition_v0_r on E, A, C, H we get Line(A, H) == external_angle_bisector(C, H, E)
By external_angle_bisector_definition_v0_r on A, H, C, E we get Line(E, H) == external_angle_bisector(A, E, C)
By concyclic_definition_0 on E, D, F, C we get C in Circle(D, E, F)
By internal_angle_bisector_definition_v0_r on F, D, F, B we get Line(B, D) == internal_angle_bisector(F, B, F)
By external_angle_bisector_definition_v0_r on A, E, C, H we get Line(E, H) == external_angle_bisector(A, H, C)
By internal_angle_bisector_definition_v0_r on D, C, D, G we get Line(C, G) == internal_angle_bisector(D, G, D)
By external_angle_bisector_definition_v0_r on D, F, D, G we get Line(F, G) == external_angle_bisector(D, G, D)
By internal_angle_bisector_definition_v0_r on D, G, D, C we get Line(C, G) == internal_angle_bisector(D, C, D)
By external_angle_bisector_definition_v0_r on A, C, H, E we get Line(C, E) == external_angle_bisector(A, E, H)
By concyclic_definition_0 on E, D, C, F we get F in Circle(C, D, E)
By internal_angle_bisector_definition_v0_r on H, A, H, E we get Line(A, E) == internal_angle_bisector(H, E, H)
By internal_angle_bisector_definition_v0_r on D, B, D, F we get Line(B, F) == internal_angle_bisector(D, F, D)
By internal_angle_bisector_definition_v0_r on B, F, B, D we get Line(D, F) == internal_angle_bisector(B, D, B)
By internal_angle_bisector_definition_v0_r on G, C, G, D we get Line(C, D) == internal_angle_bisector(G, D, G)
By internal_angle_bisector_definition_v0_r on E, C, A, H we get Line(C, H) == internal_angle_bisector(A, H, E)
By internal_angle_bisector_definition_v0_r on H, A, C, E we get Line(A, E) == internal_angle_bisector(C, E, H)
By concyclic_definition_0 on C, E, F, D we get D in Circle(C, E, F)
By internal_angle_bisector_definition_v0_r on H, E, A, C we get Line(C, E) == internal_angle_bisector(A, C, H)
By internal_angle_bisector_definition_v0_r on E, C, E, H we get Line(C, H) == internal_angle_bisector(E, H, E)
By internal_angle_bisector_definition_v0_r on F, B, F, D we get Line(B, D) == internal_angle_bisector(F, D, F)
By internal_angle_bisector_definition_v0_r on C, E, H, A we get Line(A, E) == internal_angle_bisector(C, A, H)
By internal_angle_bisector_definition_v0_r on G, D, G, C we get Line(C, D) == internal_angle_bisector(G, C, G)
By internal_angle_bisector_definition_v0_r on C, F, D, G we get Line(F, G) == internal_angle_bisector(C, G, D)
By internal_angle_bisector_definition_v0_r on D, F, D, B we get Line(B, F) == internal_angle_bisector(D, B, D)
By internal_angle_bisector_definition_v0_r on A, H, E, C we get Line(C, H) == internal_angle_bisector(A, C, E)
By internal_angle_bisector_definition_v0_r on H, C, H, E we get Line(C, E) == internal_angle_bisector(H, E, H)
By internal_angle_bisector_definition_v0_r on E, A, E, H we get Line(A, H) == internal_angle_bisector(E, H, E)
By internal_angle_bisector_definition_v0_r on C, G, C, D we get Line(D, G) == internal_angle_bisector(C, D, C)
By internal_angle_bisector_definition_v0_r on C, D, C, G we get Line(D, G) == internal_angle_bisector(C, G, C)
By anti_similar_triangle_basic_properties on G, H, C, A, D, C we get angle(G, H, C) == 0 - angle(A, D, C) mod 360, angle(H, C, G) == 0 - angle(D, C, A) mod 360, angle(C, G, H) == 0 - angle(C, A, D) mod 360, log(distance(A, D)) + log(distance(C, H)) == log(distance(G, H)) + log(distance(C, D)), log(distance(C, D)) + log(distance(C, G)) == log(distance(C, H)) + log(distance(A, C)), log(distance(A, C)) + log(distance(G, H)) == log(distance(C, G)) + log(distance(A, D))
By anti_similar_triangle_basic_properties on G, A, C, H, D, C we get angle(G, A, C) == 0 - angle(H, D, C) mod 360, angle(A, C, G) == 0 - angle(D, C, H) mod 360, angle(C, G, A) == 0 - angle(C, H, D) mod 360, log(distance(A, G)) + log(distance(C, D)) == log(distance(D, H)) + log(distance(A, C)), log(distance(A, C)) + log(distance(C, H)) == log(distance(C, D)) + log(distance(C, G)), log(distance(C, G)) + log(distance(D, H)) == log(distance(C, H)) + log(distance(A, G))
By concyclic_definition_1 on D, E, F, C we get Circle(C, E, F) == Circle(D, E, F)
By concyclic_definition_1 on E, F, D, C we get Circle(C, D, F) == Circle(D, E, F)
By concyclic_definition_1 on F, C, D, E we get Circle(C, D, E) == Circle(C, D, F)
By anti_similar_triangle_basic_properties on C, D, H, C, A, G we get angle(C, D, H) == 0 - angle(C, A, G) mod 360, angle(D, H, C) == 0 - angle(A, G, C) mod 360, angle(H, C, D) == 0 - angle(G, C, A) mod 360, log(distance(A, C)) + log(distance(D, H)) == log(distance(C, D)) + log(distance(A, G)), log(distance(A, G)) + log(distance(C, H)) == log(distance(D, H)) + log(distance(C, G)), log(distance(C, G)) + log(distance(C, D)) == log(distance(C, H)) + log(distance(A, C))
By concyclic_definition_1 on D, F, C, E we get Circle(C, D, F) == Circle(C, E, F)
By concyclic_definition_1 on F, E, C, D we get Circle(C, D, E) == Circle(C, E, F)
By anti_similar_triangle_basic_properties on A, C, D, G, C, H we get angle(A, C, D) == 0 - angle(G, C, H) mod 360, angle(C, D, A) == 0 - angle(C, H, G) mod 360, angle(D, A, C) == 0 - angle(H, G, C) mod 360, log(distance(A, C)) + log(distance(C, H)) == log(distance(C, G)) + log(distance(C, D)), log(distance(C, D)) + log(distance(G, H)) == log(distance(C, H)) + log(distance(A, D)), log(distance(A, D)) + log(distance(C, G)) == log(distance(G, H)) + log(distance(A, C))
By concyclic_definition_1 on C, E, D, F we get Circle(C, D, E) == Circle(D, E, F)
By anti_similar_triangle_basic_properties on D, F, C, D, G, F we get angle(D, F, C) == 0 - angle(D, G, F) mod 360, angle(F, C, D) == 0 - angle(G, F, D) mod 360, angle(C, D, F) == 0 - angle(F, D, G) mod 360, log(distance(D, F)) + log(distance(F, G)) == log(distance(D, G)) + log(distance(C, F)), log(distance(C, F)) + log(distance(D, F)) == log(distance(F, G)) + log(distance(C, D)), log(distance(C, D)) + log(distance(D, G)) == log(distance(D, F)) + log(distance(D, F))
By anti_similar_triangle_basic_properties on D, C, F, D, F, G we get angle(D, C, F) == 0 - angle(D, F, G) mod 360, angle(C, F, D) == 0 - angle(F, G, D) mod 360, angle(F, D, C) == 0 - angle(G, D, F) mod 360, log(distance(C, D)) + log(distance(F, G)) == log(distance(D, F)) + log(distance(C, F)), log(distance(C, F)) + log(distance(D, G)) == log(distance(F, G)) + log(distance(D, F)), log(distance(D, F)) + log(distance(D, F)) == log(distance(D, G)) + log(distance(C, D))
By angles_on_chord_v1 on C, E, F, D, Circle(C, D, E) we get angle(C, D, E) == angle(C, F, E) mod 360
By angles_on_chord_v1 on F, D, E, C, Circle(C, D, E) we get angle(F, C, D) == angle(F, E, D) mod 360
By angles_on_chord_v3 on E, D, C, F, Circle(C, D, E) we get angle(E, C, D) == angle(E, F, D) + 180 mod 360
By angles_on_chord_v3 on C, F, D, E, Circle(C, D, E) we get angle(C, D, F) == angle(C, E, F) + 180 mod 360
By angles_on_chord_v3 on D, E, F, C, Circle(C, D, E) we get angle(D, F, E) == angle(D, C, E) + 180 mod 360
By angles_on_chord_v0 on E, C, D, F, Circle(C, D, E) we get angle(E, D, C) == angle(E, F, C) mod 360
By angles_on_chord_v2 on D, E, C, F, Circle(C, D, E) we get angle(D, C, E) == angle(D, F, E) + 180 mod 360
By angles_on_chord_v2 on E, D, F, C, Circle(C, D, E) we get angle(E, F, D) == angle(E, C, D) + 180 mod 360
By angles_on_chord_v2 on C, F, E, D, Circle(C, D, E) we get angle(C, E, F) == angle(C, D, F) + 180 mod 360
By angles_on_chord_v0 on D, F, C, E, Circle(C, D, E) we get angle(D, C, F) == angle(D, E, F) mod 360
By angles_on_chord_v2 on F, C, D, E, Circle(C, D, E) we get angle(F, D, C) == angle(F, E, C) + 180 mod 360
By angles_on_chord_v3 on F, C, E, D, Circle(C, D, E) we get angle(F, E, C) == angle(F, D, C) + 180 mod 360
By aa_similarity on D, A, E, D, F, G we get similar_triangles(A, D, E, F, D, G)
By anti_similar_triangle_basic_properties on C, F, D, C, G, F we get angle(C, F, D) == 0 - angle(C, G, F) mod 360, angle(F, D, C) == 0 - angle(G, F, C) mod 360, angle(D, C, F) == 0 - angle(F, C, G) mod 360, log(distance(C, F)) + log(distance(F, G)) == log(distance(C, G)) + log(distance(D, F)), log(distance(D, F)) + log(distance(C, F)) == log(distance(F, G)) + log(distance(C, D)), log(distance(C, D)) + log(distance(C, G)) == log(distance(C, F)) + log(distance(C, F))
By aa_anti_similarity on D, C, F, D, A, E we get anti_similar_triangles(A, D, E, C, D, F)
By anti_similar_triangle_basic_properties on F, C, D, G, C, F we get angle(F, C, D) == 0 - angle(G, C, F) mod 360, angle(C, D, F) == 0 - angle(C, F, G) mod 360, angle(D, F, C) == 0 - angle(F, G, C) mod 360, log(distance(C, F)) + log(distance(C, F)) == log(distance(C, G)) + log(distance(C, D)), log(distance(C, D)) + log(distance(F, G)) == log(distance(C, F)) + log(distance(D, F)), log(distance(D, F)) + log(distance(C, G)) == log(distance(F, G)) + log(distance(C, F))
By aa_similarity on F, G, C, D, E, A we get similar_triangles(A, D, E, C, F, G)
By similar_triangle_basic_properties on F, G, D, C, G, F we get angle(C, G, F) == angle(F, G, D) mod 360, angle(G, D, F) == angle(G, F, C) mod 360, angle(D, F, G) == angle(F, C, G) mod 360, log(distance(C, G)) + log(distance(D, G)) == log(distance(F, G)) + log(distance(F, G)), log(distance(D, G)) + log(distance(C, F)) == log(distance(F, G)) + log(distance(D, F)), log(distance(C, F)) + log(distance(F, G)) == log(distance(D, F)) + log(distance(C, G))
By aa_similarity on D, E, A, F, G, C we get similar_triangles(A, D, E, C, F, G)
By aa_anti_similarity on D, F, C, D, E, A we get anti_similar_triangles(A, D, E, C, D, F)
By aa_similarity on D, A, E, F, C, G we get similar_triangles(A, D, E, C, F, G)
By aa_similarity on D, E, A, D, G, F we get similar_triangles(A, D, E, F, D, G)
By aa_anti_similarity on D, E, A, D, F, C we get anti_similar_triangles(A, D, E, C, D, F)
By aa_similarity on D, F, G, D, A, E we get similar_triangles(A, D, E, F, D, G)
By aa_similarity on F, C, G, D, A, E we get similar_triangles(A, D, E, C, F, G)
By aa_anti_similarity on D, A, E, D, C, F we get anti_similar_triangles(A, D, E, C, D, F)
By aa_similarity on D, G, F, D, E, A we get similar_triangles(A, D, E, F, D, G)
By power_of_a_point_tangent_converse_v0 on D, C, G, F we get tangent(Line(D, F), Circle(C, F, G))
By power_of_a_point_on_circle on D, Circle(C, D, E) we get 0 == power_of_a_point(D, Circle(C, D, E))
By power_of_a_point_in_circle on E, Circle(C, D, E) we get 0 == power_of_a_point(E, Circle(C, D, E))
By power_of_a_point_in_circle on F, Circle(C, D, E) we get 0 == power_of_a_point(F, Circle(C, D, E))
By power_of_a_point_on_circle on C, Circle(C, D, E) we get 0 == power_of_a_point(C, Circle(C, D, E))
By power_of_a_point_definition on A, C, E, Circle(C, D, E) we get log(distance(A, C)) + log(distance(A, E)) == log(power_of_a_point(A, Circle(C, D, E)))
By power_of_a_point_definition on H, C, E, Circle(C, D, E) we get log(distance(C, H)) + log(distance(E, H)) == log(power_of_a_point(H, Circle(C, D, E)))
By power_of_a_point_definition on G, C, D, Circle(C, D, E) we get log(distance(C, G)) + log(distance(D, G)) == log(power_of_a_point(G, Circle(C, D, E)))
By power_of_a_point_definition on B, F, D, Circle(C, D, E) we get log(distance(B, F)) + log(distance(B, D)) == log(power_of_a_point(B, Circle(C, D, E)))
By line_intersection_definition on F, Line(E, F), Line(C, F) we get F == line_intersection(Line(C, F), Line(E, F))
By radical_axis_of_intersecting_circles_v0 on F, C, Circle(C, D, E), Circle(C, F, G) we get Line(C, F) == radical_axis(Circle(C, D, E), Circle(C, F, G))
By line_intersection_definition on F, h, Line(E, F) we get F == line_intersection(h, Line(E, F))
By line_intersection_definition on E, Line(D, E), Line(E, F) we get E == line_intersection(Line(D, E), Line(E, F))
By line_intersection_definition on F, Line(E, F), Line(F, G) we get F == line_intersection(Line(E, F), Line(F, G))
By line_intersection_definition on E, Line(E, F), f we get E == line_intersection(f, Line(E, F))
By perpendicular_direction_conditions_v0 on A, D, E, F we get perpendicular(Line(A, D), Line(E, F))
By same_angle_v1 on F, B, D, E we get angle(B, F, E) == angle(D, F, E) mod 360
By same_angle_v2 on E, H, A, F we get angle(H, E, F) == angle(A, E, F) + 180 mod 360
By same_angle_v0 on E, H, C, F we get angle(C, E, F) == angle(H, E, F) mod 360
By same_angle_v2 on E, C, A, F we get angle(C, E, F) == angle(A, E, F) + 180 mod 360
By power_of_a_point_tangent_converse_v0 on C, A, H, F we get tangent(Line(C, F), Circle(A, F, H))
By power_of_a_point_tangent_converse_v1 on C, D, G, F we get tangent(Line(C, F), Circle(D, F, G))
By similar_triangle_basic_properties on F, D, G, A, D, E we get angle(A, D, E) == angle(F, D, G) mod 360, angle(D, E, A) == angle(D, G, F) mod 360, angle(E, A, D) == angle(G, F, D) mod 360, log(distance(A, D)) + log(distance(D, G)) == log(distance(D, F)) + log(distance(D, E)), log(distance(D, E)) + log(distance(F, G)) == log(distance(D, G)) + log(distance(A, E)), log(distance(A, E)) + log(distance(D, F)) == log(distance(F, G)) + log(distance(A, D))
By similar_triangle_basic_properties on G, C, F, E, A, D we get angle(E, A, D) == angle(G, C, F) mod 360, angle(A, D, E) == angle(C, F, G) mod 360, angle(D, E, A) == angle(F, G, C) mod 360, log(distance(A, E)) + log(distance(C, F)) == log(distance(C, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(F, G)) == log(distance(C, F)) + log(distance(D, E)), log(distance(D, E)) + log(distance(C, G)) == log(distance(F, G)) + log(distance(A, E))
By anti_similar_triangle_basic_properties on A, E, D, C, F, D we get angle(A, E, D) == 0 - angle(C, F, D) mod 360, angle(E, D, A) == 0 - angle(F, D, C) mod 360, angle(D, A, E) == 0 - angle(D, C, F) mod 360, log(distance(A, E)) + log(distance(D, F)) == log(distance(C, F)) + log(distance(D, E)), log(distance(D, E)) + log(distance(C, D)) == log(distance(D, F)) + log(distance(A, D)), log(distance(A, D)) + log(distance(C, F)) == log(distance(C, D)) + log(distance(A, E))
By radical_axis_definition_v0_r on D, c, Circle(C, D, E) we get D in radical_axis(c, Circle(C, D, E))
By power_of_a_point_on_circle on F, Circle(C, F, G) we get 0 == power_of_a_point(F, Circle(C, F, G))
By similar_triangle_basic_properties on F, G, D, A, E, D we get angle(A, E, D) == angle(F, G, D) mod 360, angle(E, D, A) == angle(G, D, F) mod 360, angle(D, A, E) == angle(D, F, G) mod 360, log(distance(A, E)) + log(distance(D, G)) == log(distance(F, G)) + log(distance(D, E)), log(distance(D, E)) + log(distance(D, F)) == log(distance(D, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(F, G)) == log(distance(D, F)) + log(distance(A, E))
By anti_similar_triangle_basic_properties on C, D, F, A, D, E we get angle(C, D, F) == 0 - angle(A, D, E) mod 360, angle(D, F, C) == 0 - angle(D, E, A) mod 360, angle(F, C, D) == 0 - angle(E, A, D) mod 360, log(distance(A, D)) + log(distance(D, F)) == log(distance(C, D)) + log(distance(D, E)), log(distance(D, E)) + log(distance(C, F)) == log(distance(D, F)) + log(distance(A, E)), log(distance(A, E)) + log(distance(C, D)) == log(distance(C, F)) + log(distance(A, D))
By similar_triangle_basic_properties on G, F, C, E, D, A we get angle(E, D, A) == angle(G, F, C) mod 360, angle(D, A, E) == angle(F, C, G) mod 360, angle(A, E, D) == angle(C, G, F) mod 360, log(distance(D, E)) + log(distance(C, F)) == log(distance(F, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(C, G)) == log(distance(C, F)) + log(distance(A, E)), log(distance(A, E)) + log(distance(F, G)) == log(distance(C, G)) + log(distance(D, E))
By power_of_a_point_on_circle on C, Circle(C, F, G) we get 0 == power_of_a_point(C, Circle(C, F, G))
By power_of_a_point_in_circle on G, Circle(C, F, G) we get 0 == power_of_a_point(G, Circle(C, F, G))
By draw_point_of_tangency on h, Circle(C, F, G) we get exists(line_circle_tangent_point(h, Circle(C, F, G)))
By power_of_a_point_tangent on D, F, Circle(C, F, G) we get 2 * log(distance(D, F)) == log(power_of_a_point(D, Circle(C, F, G)))
By power_of_a_point_definition on D, G, C, Circle(C, F, G) we get log(distance(D, G)) + log(distance(C, D)) == log(power_of_a_point(D, Circle(C, F, G)))
By power_of_a_point_tangent on B, F, Circle(C, F, G) we get 2 * log(distance(B, F)) == log(power_of_a_point(B, Circle(C, F, G)))
By sas_anti_similarity on F, C, H, A, C, F we get anti_similar_triangles(A, C, F, F, C, H)
By sas_anti_similarity on F, C, A, H, C, F we get anti_similar_triangles(A, C, F, F, C, H)
By sas_anti_similarity on A, C, F, F, C, H we get anti_similar_triangles(A, C, F, F, C, H)
By sas_anti_similarity on H, C, F, F, C, A we get anti_similar_triangles(A, C, F, F, C, H)
By concurrent_sufficient_conditions on Line(E, F), Line(F, G), h we get concurrent(h, Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on h, Line(F, G), Line(E, F) we get concurrent(h, Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(C, F), Line(E, F), h we get concurrent(h, Line(C, F), Line(E, F))
By concurrent_sufficient_conditions on f, Line(D, E), Line(E, F) we get concurrent(f, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(D, E), f, Line(E, F) we get concurrent(f, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on f, Line(E, F), Line(D, E) we get concurrent(f, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(F, G), Line(E, F), h we get concurrent(h, Line(E, F), Line(F, G))
By line_definition on line_circle_tangent_point(h, Circle(C, F, G)), B, h we get h == Line(B, line_circle_tangent_point(h, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), f we get concurrent(f, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on h, Line(E, F), Line(F, G) we get concurrent(h, Line(E, F), Line(F, G))
By line_definition on D, line_circle_tangent_point(h, Circle(C, F, G)), h we get h == Line(D, line_circle_tangent_point(h, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(F, G), h, Line(E, F) we get concurrent(h, Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(E, F), Line(C, F), Line(F, G) we get concurrent(Line(C, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on h, Line(E, F), Line(C, F) we get concurrent(h, Line(C, F), Line(E, F))
By concurrent_sufficient_conditions on Line(C, F), Line(F, G), Line(E, F) we get concurrent(Line(C, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(E, F), h, Line(F, G) we get concurrent(h, Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(F, G), Line(E, F), Line(C, F) we get concurrent(Line(C, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(C, F), Line(E, F), Line(F, G) we get concurrent(Line(C, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(F, G), Line(C, F), Line(E, F) we get concurrent(Line(C, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(C, F), h, Line(E, F) we get concurrent(h, Line(C, F), Line(E, F))
By concurrent_sufficient_conditions on Line(E, F), Line(C, F), h we get concurrent(h, Line(C, F), Line(E, F))
By concurrent_sufficient_conditions on h, Line(C, F), Line(E, F) we get concurrent(h, Line(C, F), Line(E, F))
By concurrent_sufficient_conditions on Line(E, F), f, Line(D, E) we get concurrent(f, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(E, F), Line(F, G), Line(C, F) we get concurrent(Line(C, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(E, F), h, Line(C, F) we get concurrent(h, Line(C, F), Line(E, F))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), f we get concurrent(f, Line(D, E), Line(E, F))
By tangent_definition_from_perpendicularity_v0 on line_circle_tangent_point(h, Circle(C, F, G)), h, Circle(C, F, G) we get perpendicular(h, Line(center(Circle(C, F, G)), line_circle_tangent_point(h, Circle(C, F, G))))
By tangent_definition_from_perpendicularity_v0 on F, h, Circle(C, F, G) we get perpendicular(h, Line(F, center(Circle(C, F, G))))
By line_intersection_definition on D, radical_axis(c, Circle(C, D, E)), h we get D == line_intersection(h, radical_axis(c, Circle(C, D, E)))
By line_intersection_definition on F, Line(F, H), h we get F == line_intersection(h, Line(F, H))
By line_intersection_definition on D, radical_axis(c, Circle(C, D, E)), Line(D, E) we get D == line_intersection(Line(D, E), radical_axis(c, Circle(C, D, E)))
By radical_axis_of_intersecting_circles_v0 on F, D, Circle(D, F, G), Circle(C, D, E) we get Line(D, F) == radical_axis(Circle(C, D, E), Circle(D, F, G))
By radical_axis_of_intersecting_circles_v0 on F, G, Circle(C, F, G), Circle(D, F, G) we get Line(F, G) == radical_axis(Circle(C, F, G), Circle(D, F, G))
By perpendicular_line_definition on E, Line(E, F), g we get Line(E, F) == perpendicular_line(E, g)
By line_intersection_definition on D, radical_axis(c, Circle(C, D, E)), i we get D == line_intersection(i, radical_axis(c, Circle(C, D, E)))
By circle_definition on line_circle_tangent_point(h, Circle(C, F, G)), C, G, Circle(C, F, G) we get Circle(C, F, G) == Circle(C, G, line_circle_tangent_point(h, Circle(C, F, G)))
By line_intersection_definition on F, Line(A, F), Line(E, F) we get F == line_intersection(Line(A, F), Line(E, F))
By line_intersection_definition on F, Line(A, F), Line(F, G) we get F == line_intersection(Line(A, F), Line(F, G))
By line_intersection_definition on A, f, Line(A, F) we get A == line_intersection(f, Line(A, F))
By line_intersection_definition on H, f, Line(F, H) we get H == line_intersection(f, Line(F, H))
By line_intersection_definition on D, radical_axis(c, Circle(C, D, E)), g we get D == line_intersection(g, radical_axis(c, Circle(C, D, E)))
By perpendicular_line_definition on A, g, Line(E, F) we get g == perpendicular_line(A, Line(E, F))
By line_intersection_definition on F, Line(C, F), Line(A, F) we get F == line_intersection(Line(A, F), Line(C, F))
By line_intersection_definition on H, Line(G, H), Line(F, H) we get H == line_intersection(Line(F, H), Line(G, H))
By line_intersection_definition on F, Line(F, H), Line(C, F) we get F == line_intersection(Line(C, F), Line(F, H))
By line_intersection_definition on F, Line(F, H), Line(F, G) we get F == line_intersection(Line(F, G), Line(F, H))
By line_intersection_definition on F, Line(F, H), Line(A, F) we get F == line_intersection(Line(A, F), Line(F, H))
By radical_axis_of_intersecting_circles_v0 on G, D, Circle(D, F, G), c we get Line(D, G) == radical_axis(c, Circle(D, F, G))
By line_intersection_definition on F, Line(F, H), Line(E, F) we get F == line_intersection(Line(E, F), Line(F, H))
By line_intersection_definition on F, h, Line(A, F) we get F == line_intersection(h, Line(A, F))
By line_intersection_definition on A, Line(A, B), Line(A, F) we get A == line_intersection(Line(A, B), Line(A, F))
By line_intersection_definition on A, g, Line(A, F) we get A == line_intersection(g, Line(A, F))
By perpendicular_line_definition on F, Line(E, F), g we get Line(E, F) == perpendicular_line(F, g)
By radical_axis_of_intersecting_circles_v0 on A, H, c, Circle(A, F, H) we get Line(A, H) == radical_axis(c, Circle(A, F, H))
By line_intersection_definition on A, Line(A, F), Line(A, G) we get A == line_intersection(Line(A, F), Line(A, G))
By perpendicular_line_definition on D, g, Line(E, F) we get g == perpendicular_line(D, Line(E, F))
By perpendicular_line_definition on line_circle_tangent_point(h, Circle(C, F, G)), h, Line(C, F) we get h == perpendicular_line(line_circle_tangent_point(h, Circle(C, F, G)), Line(C, F))
By line_intersection_definition on H, Line(D, H), Line(F, H) we get H == line_intersection(Line(D, H), Line(F, H))
By line_intersection_definition on D, radical_axis(c, Circle(C, D, E)), Line(D, H) we get D == line_intersection(Line(D, H), radical_axis(c, Circle(C, D, E)))
By same_angle_v1 on F, D, B, H we get angle(B, F, H) == angle(D, F, H) mod 360
By same_angle_v0 on A, E, H, F we get angle(E, A, F) == angle(H, A, F) mod 360
By same_angle_v3 on H, C, E, F we get angle(C, H, F) == angle(E, H, F) + 180 mod 360
By same_angle_v2 on H, C, A, F we get angle(C, H, F) == angle(A, H, F) + 180 mod 360
By same_angle_v0 on F, B, D, A we get angle(B, F, A) == angle(D, F, A) mod 360
By same_angle_v0 on A, C, E, F we get angle(C, A, F) == angle(E, A, F) mod 360
By same_angle_v1 on H, E, A, F we get angle(A, H, F) == angle(E, H, F) mod 360
By circle_radius_v0_r on F, Circle(C, D, E) we get radius(Circle(C, D, E)) == distance(F, center(Circle(C, D, E)))
By same_angle_v0 on A, C, H, F we get angle(C, A, F) == angle(H, A, F) mod 360
By circle_radius_v0_r on D, Circle(C, D, E) we get radius(Circle(C, D, E)) == distance(D, center(Circle(C, D, E)))
By circle_radius_v0_r on G, Circle(C, F, G) we get radius(Circle(C, F, G)) == distance(G, center(Circle(C, F, G)))
By circle_radius_v0_r on C, Circle(C, D, E) we get radius(Circle(C, D, E)) == distance(C, center(Circle(C, D, E)))
By circle_radius_v0_r on line_circle_tangent_point(h, Circle(C, F, G)), Circle(C, F, G) we get radius(Circle(C, F, G)) == distance(center(Circle(C, F, G)), line_circle_tangent_point(h, Circle(C, F, G)))
By circle_radius_v0_r on D, c we get radius(c) == distance(D, center(c))
By circle_radius_v0_r on F, Circle(C, F, G) we get radius(Circle(C, F, G)) == distance(F, center(Circle(C, F, G)))
By circle_radius_v0_r on G, c we get radius(c) == distance(G, center(c))
By circle_radius_v0_r on C, Circle(C, F, G) we get radius(Circle(C, F, G)) == distance(C, center(Circle(C, F, G)))
By circle_radius_v0_r on H, c we get radius(c) == distance(H, center(c))
By circle_radius_v0_r on E, Circle(C, D, E) we get radius(Circle(C, D, E)) == distance(E, center(Circle(C, D, E)))
By circle_radius_v0_r on A, c we get radius(c) == distance(A, center(c))
By angle_to_center on F, C, E, Circle(C, D, E) we get 2 * angle(F, C, E) == angle(F, center(Circle(C, D, E)), E) mod 360
By angle_to_center on G, F, C, Circle(C, F, G) we get 2 * angle(G, F, C) == angle(G, center(Circle(C, F, G)), C) mod 360
By angle_to_center on G, C, F, Circle(C, F, G) we get 2 * angle(G, C, F) == angle(G, center(Circle(C, F, G)), F) mod 360
By angle_to_center on G, A, H, c we get 2 * angle(G, A, H) == angle(G, center(c), H) mod 360
By angle_to_center on E, D, C, Circle(C, D, E) we get 2 * angle(E, D, C) == angle(E, center(Circle(C, D, E)), C) mod 360
By angle_to_center on G, A, D, c we get 2 * angle(G, A, D) == angle(G, center(c), D) mod 360
By angle_to_center on D, H, A, c we get 2 * angle(D, H, A) == angle(D, center(c), A) mod 360
By angle_to_center on D, E, F, Circle(C, D, E) we get 2 * angle(D, E, F) == angle(D, center(Circle(C, D, E)), F) mod 360
By angle_to_center on A, G, H, c we get 2 * angle(A, G, H) == angle(A, center(c), H) mod 360
By angle_to_center on C, D, E, Circle(C, D, E) we get 2 * angle(C, D, E) == angle(C, center(Circle(C, D, E)), E) mod 360
By angle_to_center on F, D, E, Circle(C, D, E) we get 2 * angle(F, D, E) == angle(F, center(Circle(C, D, E)), E) mod 360
By angle_to_center on G, D, H, c we get 2 * angle(G, D, H) == angle(G, center(c), H) mod 360
By angle_to_center on C, E, D, Circle(C, D, E) we get 2 * angle(C, E, D) == angle(C, center(Circle(C, D, E)), D) mod 360
By angle_to_center on D, F, C, Circle(C, D, E) we get 2 * angle(D, F, C) == angle(D, center(Circle(C, D, E)), C) mod 360
By angle_to_center on E, F, C, Circle(C, D, E) we get 2 * angle(E, F, C) == angle(E, center(Circle(C, D, E)), C) mod 360
By angle_to_center on D, E, C, Circle(C, D, E) we get 2 * angle(D, E, C) == angle(D, center(Circle(C, D, E)), C) mod 360
By angle_to_center on A, G, D, c we get 2 * angle(A, G, D) == angle(A, center(c), D) mod 360
By angle_to_center on H, D, A, c we get 2 * angle(H, D, A) == angle(H, center(c), A) mod 360
By angle_to_center on A, H, G, c we get 2 * angle(A, H, G) == angle(A, center(c), G) mod 360
By angle_to_center on D, A, G, c we get 2 * angle(D, A, G) == angle(D, center(c), G) mod 360
By angle_to_center on C, F, G, Circle(C, F, G) we get 2 * angle(C, F, G) == angle(C, center(Circle(C, F, G)), G) mod 360
By angle_to_center on D, G, A, c we get 2 * angle(D, G, A) == angle(D, center(c), A) mod 360
By angle_to_center on D, G, H, c we get 2 * angle(D, G, H) == angle(D, center(c), H) mod 360
By angle_to_center on F, E, D, Circle(C, D, E) we get 2 * angle(F, E, D) == angle(F, center(Circle(C, D, E)), D) mod 360
By angle_to_center on A, H, D, c we get 2 * angle(A, H, D) == angle(A, center(c), D) mod 360
By angle_to_center on G, D, A, c we get 2 * angle(G, D, A) == angle(G, center(c), A) mod 360
By angle_to_center on G, H, A, c we get 2 * angle(G, H, A) == angle(G, center(c), A) mod 360
By angle_to_center on A, D, G, c we get 2 * angle(A, D, G) == angle(A, center(c), G) mod 360
By angle_to_center on F, C, G, Circle(C, F, G) we get 2 * angle(F, C, G) == angle(F, center(Circle(C, F, G)), G) mod 360
By angle_to_center on F, G, C, Circle(C, F, G) we get 2 * angle(F, G, C) == angle(F, center(Circle(C, F, G)), C) mod 360
By angle_to_center on F, C, D, Circle(C, D, E) we get 2 * angle(F, C, D) == angle(F, center(Circle(C, D, E)), D) mod 360
By angle_to_center on C, E, F, Circle(C, D, E) we get 2 * angle(C, E, F) == angle(C, center(Circle(C, D, E)), F) mod 360
By angle_to_center on D, C, F, Circle(C, D, E) we get 2 * angle(D, C, F) == angle(D, center(Circle(C, D, E)), F) mod 360
By angle_to_center on C, G, F, Circle(C, F, G) we get 2 * angle(C, G, F) == angle(C, center(Circle(C, F, G)), F) mod 360
By angle_to_center on D, H, G, c we get 2 * angle(D, H, G) == angle(D, center(c), G) mod 360
By angle_to_center on D, C, E, Circle(C, D, E) we get 2 * angle(D, C, E) == angle(D, center(Circle(C, D, E)), E) mod 360
By angle_to_center on H, D, G, c we get 2 * angle(H, D, G) == angle(H, center(c), G) mod 360
By angle_to_center on G, H, D, c we get 2 * angle(G, H, D) == angle(G, center(c), D) mod 360
By angle_to_center on F, D, C, Circle(C, D, E) we get 2 * angle(F, D, C) == angle(F, center(Circle(C, D, E)), C) mod 360
By angle_to_center on H, A, G, c we get 2 * angle(H, A, G) == angle(H, center(c), G) mod 360
By angle_to_center on H, A, D, c we get 2 * angle(H, A, D) == angle(H, center(c), D) mod 360
By angle_to_center on D, A, H, c we get 2 * angle(D, A, H) == angle(D, center(c), H) mod 360
By angle_to_center on E, D, F, Circle(C, D, E) we get 2 * angle(E, D, F) == angle(E, center(Circle(C, D, E)), F) mod 360
By angle_to_center on H, G, D, c we get 2 * angle(H, G, D) == angle(H, center(c), D) mod 360
By angle_to_center on C, D, F, Circle(C, D, E) we get 2 * angle(C, D, F) == angle(C, center(Circle(C, D, E)), F) mod 360
By angle_to_center on C, F, D, Circle(C, D, E) we get 2 * angle(C, F, D) == angle(C, center(Circle(C, D, E)), D) mod 360
By angle_to_center on A, D, H, c we get 2 * angle(A, D, H) == angle(A, center(c), H) mod 360
By angle_to_center on H, G, A, c we get 2 * angle(H, G, A) == angle(H, center(c), A) mod 360
By angle_to_center on E, F, D, Circle(C, D, E) we get 2 * angle(E, F, D) == angle(E, center(Circle(C, D, E)), D) mod 360
By angle_to_center on F, E, C, Circle(C, D, E) we get 2 * angle(F, E, C) == angle(F, center(Circle(C, D, E)), C) mod 360
By angle_to_center on D, F, E, Circle(C, D, E) we get 2 * angle(D, F, E) == angle(D, center(Circle(C, D, E)), E) mod 360
By angle_to_center on E, C, D, Circle(C, D, E) we get 2 * angle(E, C, D) == angle(E, center(Circle(C, D, E)), D) mod 360
By angle_to_center on E, C, F, Circle(C, D, E) we get 2 * angle(E, C, F) == angle(E, center(Circle(C, D, E)), F) mod 360
By angle_to_center on C, F, E, Circle(C, D, E) we get 2 * angle(C, F, E) == angle(C, center(Circle(C, D, E)), E) mod 360
By in_imply_collinear on line_circle_tangent_point(h, Circle(C, F, G)), D, F we get collinear(D, F, line_circle_tangent_point(h, Circle(C, F, G)))
By in_imply_concyclic on G, C, F, line_circle_tangent_point(h, Circle(C, F, G)) we get concyclic(C, F, G, line_circle_tangent_point(h, Circle(C, F, G)))
By in_imply_collinear on line_circle_tangent_point(h, Circle(C, F, G)), B, F we get collinear(B, F, line_circle_tangent_point(h, Circle(C, F, G)))
By tangent_point_is_unique on F, line_circle_tangent_point(h, Circle(C, F, G)), Circle(C, F, G), h we get F == line_circle_tangent_point(h, Circle(C, F, G))
By tangent_chord_angle_v1 on G, D, F, H we get tangent(Line(G, H), Circle(D, F, G))
By tangent_chord_angle_reverse_v0 on F, H, A, C we get angle(H, A, F) == angle(H, F, C) mod 360
By in_imply_collinear on line_circle_tangent_point(h, Circle(C, F, G)), D, B we get collinear(B, D, line_circle_tangent_point(h, Circle(C, F, G)))
By tangent_chord_angle_reverse_v3 on F, A, H, C we get angle(A, H, F) == angle(A, F, C) + 180 mod 360
By reverse_direction on F, A we get 180 == direction(F, A) - direction(A, F) mod 360
By reverse_direction on F, H we get 180 == direction(F, H) - direction(H, F) mod 360
By reverse_direction on A, F we get 180 == direction(A, F) - direction(F, A) mod 360
By reverse_direction on H, F we get 180 == direction(H, F) - direction(F, H) mod 360
By angle_to_center on line_circle_tangent_point(h, Circle(C, F, G)), G, C, Circle(C, F, G) we get angle(line_circle_tangent_point(h, Circle(C, F, G)), center(Circle(C, F, G)), C) == 2 * angle(line_circle_tangent_point(h, Circle(C, F, G)), G, C) mod 360
By angle_to_center on G, C, line_circle_tangent_point(h, Circle(C, F, G)), Circle(C, F, G) we get angle(G, center(Circle(C, F, G)), line_circle_tangent_point(h, Circle(C, F, G))) == 2 * angle(G, C, line_circle_tangent_point(h, Circle(C, F, G))) mod 360
By angle_to_center on line_circle_tangent_point(h, Circle(C, F, G)), C, G, Circle(C, F, G) we get angle(line_circle_tangent_point(h, Circle(C, F, G)), center(Circle(C, F, G)), G) == 2 * angle(line_circle_tangent_point(h, Circle(C, F, G)), C, G) mod 360
By angle_to_center on C, G, line_circle_tangent_point(h, Circle(C, F, G)), Circle(C, F, G) we get angle(C, center(Circle(C, F, G)), line_circle_tangent_point(h, Circle(C, F, G))) == 2 * angle(C, G, line_circle_tangent_point(h, Circle(C, F, G))) mod 360
By draw_point_of_tangency on Line(C, F), Circle(A, F, H) we get exists(line_circle_tangent_point(Line(C, F), Circle(A, F, H)))
By power_of_a_point_in_circle on F, Circle(D, F, G) we get 0 == power_of_a_point(F, Circle(D, F, G))
By radical_axis_definition_v0_r on G, Circle(C, F, G), c we get G in radical_axis(c, Circle(C, F, G))
By power_of_a_point_on_circle on G, Circle(D, F, G) we get 0 == power_of_a_point(G, Circle(D, F, G))
By draw_point_of_tangency on Line(C, F), Circle(D, F, G) we get exists(line_circle_tangent_point(Line(C, F), Circle(D, F, G)))
By power_of_a_point_in_circle on F, Circle(A, F, H) we get 0 == power_of_a_point(F, Circle(A, F, H))
By power_of_a_point_in_circle on H, Circle(A, F, H) we get 0 == power_of_a_point(H, Circle(A, F, H))
By perpendicular_lines_draw_intersection on Line(E, F), g we get exists(line_intersection(g, Line(E, F)))
By power_of_a_point_in_circle on D, Circle(D, F, G) we get 0 == power_of_a_point(D, Circle(D, F, G))
By power_of_a_point_on_circle on line_circle_tangent_point(h, Circle(C, F, G)), Circle(C, F, G) we get 0 == power_of_a_point(line_circle_tangent_point(h, Circle(C, F, G)), Circle(C, F, G))
By power_of_a_point_in_circle on A, Circle(A, F, H) we get 0 == power_of_a_point(A, Circle(A, F, H))
By angle_to_center on G, line_circle_tangent_point(h, Circle(C, F, G)), C, Circle(C, F, G) we get angle(G, center(Circle(C, F, G)), C) == 2 * angle(G, line_circle_tangent_point(h, Circle(C, F, G)), C) mod 360
By angle_to_center on C, line_circle_tangent_point(h, Circle(C, F, G)), G, Circle(C, F, G) we get angle(C, center(Circle(C, F, G)), G) == 2 * angle(C, line_circle_tangent_point(h, Circle(C, F, G)), G) mod 360
By altitude_definition on F, D, A, Line(E, F) we get Line(E, F) == altitude(F, A, D)
By anti_similar_triangle_basic_properties on F, C, A, H, C, F we get angle(F, C, A) == 0 - angle(H, C, F) mod 360, angle(C, A, F) == 0 - angle(C, F, H) mod 360, angle(A, F, C) == 0 - angle(F, H, C) mod 360, log(distance(C, F)) + log(distance(C, F)) == log(distance(C, H)) + log(distance(A, C)), log(distance(A, C)) + log(distance(F, H)) == log(distance(C, F)) + log(distance(A, F)), log(distance(A, F)) + log(distance(C, H)) == log(distance(F, H)) + log(distance(C, F))
By power_of_a_point_definition on B, F, D, Circle(D, F, G) we get log(distance(B, F)) + log(distance(B, D)) == log(power_of_a_point(B, Circle(D, F, G)))
By anti_similar_triangle_basic_properties on C, F, A, C, H, F we get angle(C, F, A) == 0 - angle(C, H, F) mod 360, angle(F, A, C) == 0 - angle(H, F, C) mod 360, angle(A, C, F) == 0 - angle(F, C, H) mod 360, log(distance(C, F)) + log(distance(F, H)) == log(distance(C, H)) + log(distance(A, F)), log(distance(A, F)) + log(distance(C, F)) == log(distance(F, H)) + log(distance(A, C)), log(distance(A, C)) + log(distance(C, H)) == log(distance(C, F)) + log(distance(C, F))
By altitude_definition on D, E, F, g we get g == altitude(D, E, F)
By sas_similarity on A, D, F, E, D, G we get similar_triangles(A, D, F, E, D, G)
By altitude_definition on E, A, D, Line(E, F) we get Line(E, F) == altitude(E, A, D)
By sas_similarity on E, D, G, A, D, F we get similar_triangles(A, D, F, E, D, G)
By power_of_a_point_definition on C, G, D, Circle(D, F, G) we get log(distance(C, G)) + log(distance(C, D)) == log(power_of_a_point(C, Circle(D, F, G)))
By sas_similarity on G, D, E, F, D, A we get similar_triangles(A, D, F, E, D, G)
By sas_similarity on F, D, A, G, D, E we get similar_triangles(A, D, F, E, D, G)
By altitude_definition on A, F, E, g we get g == altitude(A, E, F)
By power_of_a_point_tangent on C, F, Circle(D, F, G) we get 2 * log(distance(C, F)) == log(power_of_a_point(C, Circle(D, F, G)))
By power_of_a_point_definition on E, H, A, Circle(A, F, H) we get log(distance(E, H)) + log(distance(A, E)) == log(power_of_a_point(E, Circle(A, F, H)))
By power_of_a_point_tangent on C, F, Circle(A, F, H) we get 2 * log(distance(C, F)) == log(power_of_a_point(C, Circle(A, F, H)))
By power_of_a_point_definition on C, A, H, Circle(A, F, H) we get log(distance(A, C)) + log(distance(C, H)) == log(power_of_a_point(C, Circle(A, F, H)))
By concurrent_sufficient_conditions on i, h, radical_axis(c, Circle(C, D, E)) we get concurrent(h, i, radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on h, Line(D, H), radical_axis(c, Circle(C, D, E)) we get concurrent(h, Line(D, H), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(A, B), Line(A, F), Line(A, G) we get concurrent(Line(A, B), Line(A, F), Line(A, G))
By concurrent_sufficient_conditions on h, Line(F, H), Line(E, F) we get concurrent(h, Line(E, F), Line(F, H))
By line_definition on C, line_circle_tangent_point(Line(C, F), Circle(A, F, H)), Line(C, F) we get Line(C, F) == Line(C, line_circle_tangent_point(Line(C, F), Circle(A, F, H)))
By concurrent_sufficient_conditions on h, Line(A, F), Line(E, F) we get concurrent(h, Line(A, F), Line(E, F))
By concurrent_sufficient_conditions on f, Line(F, H), Line(D, H) we get concurrent(f, Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on Line(A, F), Line(F, H), Line(F, G) we get concurrent(Line(A, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on h, Line(C, F), Line(F, H) we get concurrent(h, Line(C, F), Line(F, H))
By concurrent_sufficient_conditions on h, Line(A, F), Line(F, G) we get concurrent(h, Line(A, F), Line(F, G))
By concurrent_sufficient_conditions on g, Line(A, G), Line(A, F) we get concurrent(g, Line(A, F), Line(A, G))
By concurrent_sufficient_conditions on Line(D, H), radical_axis(c, Circle(C, D, E)), g we get concurrent(g, Line(D, H), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, E), radical_axis(c, Circle(C, D, E)), h we get concurrent(h, Line(D, E), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, H), Line(F, G), Line(E, F) we get concurrent(Line(E, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(F, G), Line(E, F), Line(F, H) we get concurrent(Line(E, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on f, g, Line(A, F) we get concurrent(f, g, Line(A, F))
By concurrent_sufficient_conditions on Line(E, F), h, Line(A, F) we get concurrent(h, Line(A, F), Line(E, F))
By concurrent_sufficient_conditions on Line(C, F), h, Line(F, H) we get concurrent(h, Line(C, F), Line(F, H))
By concurrent_sufficient_conditions on Line(A, F), Line(A, B), f we get concurrent(f, Line(A, B), Line(A, F))
By concurrent_sufficient_conditions on g, Line(A, B), Line(A, F) we get concurrent(g, Line(A, B), Line(A, F))
By concurrent_sufficient_conditions on i, radical_axis(c, Circle(C, D, E)), h we get concurrent(h, i, radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(C, F), Line(F, H), Line(A, F) we get concurrent(Line(A, F), Line(C, F), Line(F, H))
By concurrent_sufficient_conditions on h, radical_axis(c, Circle(C, D, E)), g we get concurrent(g, h, radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(C, F), Line(A, F), h we get concurrent(h, Line(A, F), Line(C, F))
By concurrent_sufficient_conditions on Line(F, H), h, Line(E, F) we get concurrent(h, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(E, F), Line(A, F), Line(F, H) we get concurrent(Line(A, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on g, radical_axis(c, Circle(C, D, E)), Line(D, E) we get concurrent(g, Line(D, E), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on h, Line(F, G), Line(F, H) we get concurrent(h, Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(E, F), Line(F, G), Line(F, H) we get concurrent(Line(E, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(F, G), Line(E, F), Line(A, F) we get concurrent(Line(A, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(D, E), radical_axis(c, Circle(C, D, E)), i we get concurrent(i, Line(D, E), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, G), Line(A, F), Line(C, F) we get concurrent(Line(A, F), Line(C, F), Line(F, G))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), h, Line(D, E) we get concurrent(h, Line(D, E), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), Line(D, H), h we get concurrent(h, Line(D, H), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, F), Line(A, F), Line(F, G) we get concurrent(Line(A, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on g, i, radical_axis(c, Circle(C, D, E)) we get concurrent(g, i, radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, H), Line(G, H), f we get concurrent(f, Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on g, h, radical_axis(c, Circle(C, D, E)) we get concurrent(g, h, radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(C, F), Line(A, F), Line(F, G) we get concurrent(Line(A, F), Line(C, F), Line(F, G))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), Line(D, H), i we get concurrent(i, Line(D, H), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(A, F), g, Line(A, B) we get concurrent(g, Line(A, B), Line(A, F))
By concurrent_sufficient_conditions on Line(G, H), f, Line(F, H) we get concurrent(f, Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(C, F), h, Line(A, F) we get concurrent(h, Line(A, F), Line(C, F))
By concurrent_sufficient_conditions on Line(D, H), g, radical_axis(c, Circle(C, D, E)) we get concurrent(g, Line(D, H), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on g, radical_axis(c, Circle(C, D, E)), Line(D, H) we get concurrent(g, Line(D, H), radical_axis(c, Circle(C, D, E)))
By line_definition on E, line_intersection(g, Line(E, F)), Line(E, F) we get Line(E, F) == Line(E, line_intersection(g, Line(E, F)))
By concurrent_sufficient_conditions on h, i, radical_axis(c, Circle(C, D, E)) we get concurrent(h, i, radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, G), Line(F, H), Line(E, F) we get concurrent(Line(E, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(F, G), Line(C, F), Line(F, H) we get concurrent(Line(C, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), Line(D, E), i we get concurrent(i, Line(D, E), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(A, F), Line(E, F), Line(C, F) we get concurrent(Line(A, F), Line(C, F), Line(E, F))
By concurrent_sufficient_conditions on Line(F, H), Line(F, G), Line(A, F) we get concurrent(Line(A, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(C, F), Line(F, H), Line(E, F) we get concurrent(Line(C, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(F, H), Line(A, F), Line(F, G) we get concurrent(Line(A, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(F, H), Line(E, F), Line(C, F) we get concurrent(Line(C, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on i, Line(D, H), radical_axis(c, Circle(C, D, E)) we get concurrent(i, Line(D, H), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(A, B), Line(A, F), f we get concurrent(f, Line(A, B), Line(A, F))
By concurrent_sufficient_conditions on f, Line(A, F), Line(A, G) we get concurrent(f, Line(A, F), Line(A, G))
By concurrent_sufficient_conditions on Line(A, F), Line(C, F), Line(F, H) we get concurrent(Line(A, F), Line(C, F), Line(F, H))
By concurrent_sufficient_conditions on i, g, radical_axis(c, Circle(C, D, E)) we get concurrent(g, i, radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), h, i we get concurrent(h, i, radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), i, Line(D, E) we get concurrent(i, Line(D, E), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(A, F), g, f we get concurrent(f, g, Line(A, F))
By concurrent_sufficient_conditions on Line(D, H), f, Line(F, H) we get concurrent(f, Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on Line(A, B), f, Line(A, F) we get concurrent(f, Line(A, B), Line(A, F))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), g, Line(D, E) we get concurrent(g, Line(D, E), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on h, radical_axis(c, Circle(C, D, E)), Line(D, H) we get concurrent(h, Line(D, H), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, H), Line(C, F), h we get concurrent(h, Line(C, F), Line(F, H))
By concurrent_sufficient_conditions on g, radical_axis(c, Circle(C, D, E)), i we get concurrent(g, i, radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(G, H), Line(D, H), Line(F, H) we get concurrent(Line(D, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(E, F), Line(F, H), Line(A, F) we get concurrent(Line(A, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on h, Line(E, F), Line(F, H) we get concurrent(h, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(A, F), Line(C, F), Line(E, F) we get concurrent(Line(A, F), Line(C, F), Line(E, F))
By concurrent_sufficient_conditions on h, Line(C, F), Line(A, F) we get concurrent(h, Line(A, F), Line(C, F))
By concurrent_sufficient_conditions on h, radical_axis(c, Circle(C, D, E)), Line(D, E) we get concurrent(h, Line(D, E), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(C, F), Line(F, H), h we get concurrent(h, Line(C, F), Line(F, H))
By concurrent_sufficient_conditions on Line(A, F), Line(A, G), g we get concurrent(g, Line(A, F), Line(A, G))
By concurrent_sufficient_conditions on f, Line(A, G), Line(A, F) we get concurrent(f, Line(A, F), Line(A, G))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), Line(D, H), g we get concurrent(g, Line(D, H), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, E), Line(D, H), radical_axis(c, Circle(C, D, E)) we get concurrent(Line(D, E), Line(D, H), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), g, h we get concurrent(g, h, radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, E), radical_axis(c, Circle(C, D, E)), Line(D, H) we get concurrent(Line(D, E), Line(D, H), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(A, F), Line(F, G), h we get concurrent(h, Line(A, F), Line(F, G))
By concurrent_sufficient_conditions on Line(F, H), h, Line(F, G) we get concurrent(h, Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(F, G), Line(A, F), Line(F, H) we get concurrent(Line(A, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(D, H), Line(F, H), f we get concurrent(f, Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on i, radical_axis(c, Circle(C, D, E)), Line(D, E) we get concurrent(i, Line(D, E), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, H), h we get concurrent(h, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(F, G), Line(A, F), h we get concurrent(h, Line(A, F), Line(F, G))
By perpendicular_line_definition on F, Line(F, center(Circle(C, F, G))), h we get perpendicular_line(F, h) == Line(F, center(Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(F, H), Line(E, F), h we get concurrent(h, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on g, Line(A, F), f we get concurrent(f, g, Line(A, F))
By line_definition on F, line_intersection(g, Line(E, F)), Line(E, F) we get Line(E, F) == Line(F, line_intersection(g, Line(E, F)))
By concurrent_sufficient_conditions on Line(D, H), Line(G, H), Line(F, H) we get concurrent(Line(D, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, H), Line(A, F), Line(E, F) we get concurrent(Line(A, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(A, B), Line(A, G), Line(A, F) we get concurrent(Line(A, B), Line(A, F), Line(A, G))
By concurrent_sufficient_conditions on Line(E, F), Line(F, H), Line(C, F) we get concurrent(Line(C, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(A, F), Line(F, G), Line(E, F) we get concurrent(Line(A, F), Line(E, F), Line(F, G))
By line_definition on line_intersection(g, Line(E, F)), D, g we get g == Line(D, line_intersection(g, Line(E, F)))
By concurrent_sufficient_conditions on f, Line(A, B), Line(A, F) we get concurrent(f, Line(A, B), Line(A, F))
By concurrent_sufficient_conditions on Line(A, F), Line(F, H), h we get concurrent(h, Line(A, F), Line(F, H))
By concurrent_sufficient_conditions on h, Line(F, H), Line(F, G) we get concurrent(h, Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on h, Line(F, H), Line(A, F) we get concurrent(h, Line(A, F), Line(F, H))
By concurrent_sufficient_conditions on Line(A, G), Line(A, F), g we get concurrent(g, Line(A, F), Line(A, G))
By concurrent_sufficient_conditions on g, Line(D, H), radical_axis(c, Circle(C, D, E)) we get concurrent(g, Line(D, H), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(A, F), Line(C, F), h we get concurrent(h, Line(A, F), Line(C, F))
By concurrent_sufficient_conditions on Line(F, H), Line(C, F), Line(F, G) we get concurrent(Line(C, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(F, H), Line(C, F), Line(A, F) we get concurrent(Line(A, F), Line(C, F), Line(F, H))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), g, i we get concurrent(g, i, radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, F), h, Line(F, H) we get concurrent(h, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(C, F), Line(F, H), Line(F, G) we get concurrent(Line(C, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(E, F), Line(F, H), Line(F, G) we get concurrent(Line(E, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on i, radical_axis(c, Circle(C, D, E)), Line(D, H) we get concurrent(i, Line(D, H), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, H), h, radical_axis(c, Circle(C, D, E)) we get concurrent(h, Line(D, H), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, G), Line(A, F), Line(E, F) we get concurrent(Line(A, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(D, H), Line(D, E), radical_axis(c, Circle(C, D, E)) we get concurrent(Line(D, E), Line(D, H), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, H), radical_axis(c, Circle(C, D, E)), Line(D, E) we get concurrent(Line(D, E), Line(D, H), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(A, G), Line(A, F), f we get concurrent(f, Line(A, F), Line(A, G))
By concurrent_sufficient_conditions on Line(A, F), f, Line(A, B) we get concurrent(f, Line(A, B), Line(A, F))
By concurrent_sufficient_conditions on Line(A, F), Line(F, G), Line(C, F) we get concurrent(Line(A, F), Line(C, F), Line(F, G))
By concurrent_sufficient_conditions on i, radical_axis(c, Circle(C, D, E)), g we get concurrent(g, i, radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(A, F), g, Line(A, G) we get concurrent(g, Line(A, F), Line(A, G))
By concurrent_sufficient_conditions on Line(G, H), Line(F, H), Line(D, H) we get concurrent(Line(D, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(C, F), Line(E, F), Line(F, H) we get concurrent(Line(C, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(F, H), Line(G, H), Line(D, H) we get concurrent(Line(D, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(A, F), Line(A, B), Line(A, G) we get concurrent(Line(A, B), Line(A, F), Line(A, G))
By concurrent_sufficient_conditions on Line(A, B), Line(A, F), g we get concurrent(g, Line(A, B), Line(A, F))
By concurrent_sufficient_conditions on Line(C, F), Line(F, G), Line(A, F) we get concurrent(Line(A, F), Line(C, F), Line(F, G))
By concurrent_sufficient_conditions on Line(A, G), Line(A, F), Line(A, B) we get concurrent(Line(A, B), Line(A, F), Line(A, G))
By concurrent_sufficient_conditions on g, f, Line(A, F) we get concurrent(f, g, Line(A, F))
By concurrent_sufficient_conditions on Line(A, F), Line(F, H), Line(C, F) we get concurrent(Line(A, F), Line(C, F), Line(F, H))
By concurrent_sufficient_conditions on Line(F, H), Line(D, H), Line(G, H) we get concurrent(Line(D, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(E, F), Line(F, G), Line(A, F) we get concurrent(Line(A, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(F, H), f, Line(G, H) we get concurrent(f, Line(F, H), Line(G, H))
By line_definition on line_intersection(g, Line(E, F)), A, g we get g == Line(A, line_intersection(g, Line(E, F)))
By concurrent_sufficient_conditions on Line(F, H), Line(E, F), Line(A, F) we get concurrent(Line(A, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(D, E), h, radical_axis(c, Circle(C, D, E)) we get concurrent(h, Line(D, E), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(A, F), h, Line(E, F) we get concurrent(h, Line(A, F), Line(E, F))
By concurrent_sufficient_conditions on Line(C, F), Line(A, F), Line(E, F) we get concurrent(Line(A, F), Line(C, F), Line(E, F))
By concurrent_sufficient_conditions on Line(A, F), h, Line(F, G) we get concurrent(h, Line(A, F), Line(F, G))
By concurrent_sufficient_conditions on Line(D, H), radical_axis(c, Circle(C, D, E)), h we get concurrent(h, Line(D, H), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, F), Line(C, F), Line(A, F) we get concurrent(Line(A, F), Line(C, F), Line(E, F))
By concurrent_sufficient_conditions on Line(F, H), Line(A, F), Line(C, F) we get concurrent(Line(A, F), Line(C, F), Line(F, H))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), h, Line(D, H) we get concurrent(h, Line(D, H), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(A, F), Line(A, G), f we get concurrent(f, Line(A, F), Line(A, G))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), Line(D, E), Line(D, H) we get concurrent(Line(D, E), Line(D, H), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on h, g, radical_axis(c, Circle(C, D, E)) we get concurrent(g, h, radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on g, Line(A, F), Line(A, B) we get concurrent(g, Line(A, B), Line(A, F))
By concurrent_sufficient_conditions on g, Line(A, F), Line(A, G) we get concurrent(g, Line(A, F), Line(A, G))
By concurrent_sufficient_conditions on Line(C, F), Line(F, G), Line(F, H) we get concurrent(Line(C, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(F, G), Line(F, H), Line(C, F) we get concurrent(Line(C, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on f, Line(G, H), Line(F, H) we get concurrent(f, Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(A, F), Line(E, F), h we get concurrent(h, Line(A, F), Line(E, F))
By concurrent_sufficient_conditions on Line(F, G), h, Line(F, H) we get concurrent(h, Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(D, E), i, radical_axis(c, Circle(C, D, E)) we get concurrent(i, Line(D, E), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, H), Line(C, F), Line(E, F) we get concurrent(Line(C, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(A, F), Line(E, F), Line(F, H) we get concurrent(Line(A, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(C, F), Line(E, F), Line(A, F) we get concurrent(Line(A, F), Line(C, F), Line(E, F))
By concurrent_sufficient_conditions on Line(F, H), Line(A, F), h we get concurrent(h, Line(A, F), Line(F, H))
By concurrent_sufficient_conditions on f, Line(D, H), Line(F, H) we get concurrent(f, Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on Line(A, G), g, Line(A, F) we get concurrent(g, Line(A, F), Line(A, G))
By concurrent_sufficient_conditions on g, Line(D, E), radical_axis(c, Circle(C, D, E)) we get concurrent(g, Line(D, E), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, G), h, Line(A, F) we get concurrent(h, Line(A, F), Line(F, G))
By concurrent_sufficient_conditions on h, Line(D, E), radical_axis(c, Circle(C, D, E)) we get concurrent(h, Line(D, E), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(A, F), Line(F, G), Line(F, H) we get concurrent(Line(A, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(D, H), Line(F, H), Line(G, H) we get concurrent(Line(D, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, G), Line(F, H), Line(A, F) we get concurrent(Line(A, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(D, E), radical_axis(c, Circle(C, D, E)), g we get concurrent(g, Line(D, E), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, H), f, Line(D, H) we get concurrent(f, Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on h, Line(A, F), Line(C, F) we get concurrent(h, Line(A, F), Line(C, F))
By concurrent_sufficient_conditions on Line(D, H), i, radical_axis(c, Circle(C, D, E)) we get concurrent(i, Line(D, H), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, E), g, radical_axis(c, Circle(C, D, E)) we get concurrent(g, Line(D, E), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on h, Line(E, F), Line(A, F) we get concurrent(h, Line(A, F), Line(E, F))
By concurrent_sufficient_conditions on Line(A, F), h, Line(F, H) we get concurrent(h, Line(A, F), Line(F, H))
By concurrent_sufficient_conditions on i, Line(D, E), radical_axis(c, Circle(C, D, E)) we get concurrent(i, Line(D, E), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on h, Line(F, H), Line(C, F) we get concurrent(h, Line(C, F), Line(F, H))
By concurrent_sufficient_conditions on Line(A, F), Line(E, F), Line(F, G) we get concurrent(Line(A, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(F, H), h, Line(C, F) we get concurrent(h, Line(C, F), Line(F, H))
By concurrent_sufficient_conditions on Line(G, H), Line(F, H), f we get concurrent(f, Line(F, H), Line(G, H))
By line_definition on line_circle_tangent_point(Line(C, F), Circle(D, F, G)), C, Line(C, F) we get Line(C, F) == Line(C, line_circle_tangent_point(Line(C, F), Circle(D, F, G)))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), i, Line(D, H) we get concurrent(i, Line(D, H), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(A, F), Line(F, H), Line(E, F) we get concurrent(Line(A, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on f, Line(A, F), g we get concurrent(f, g, Line(A, F))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), Line(D, H), Line(D, E) we get concurrent(Line(D, E), Line(D, H), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, G), Line(F, H), h we get concurrent(h, Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(F, H), Line(E, F), Line(F, G) we get concurrent(Line(E, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(A, F), f, g we get concurrent(f, g, Line(A, F))
By concurrent_sufficient_conditions on Line(A, F), h, Line(C, F) we get concurrent(h, Line(A, F), Line(C, F))
By concurrent_sufficient_conditions on f, Line(A, F), Line(A, B) we get concurrent(f, Line(A, B), Line(A, F))
By concurrent_sufficient_conditions on Line(E, F), Line(C, F), Line(F, H) we get concurrent(Line(C, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(D, H), radical_axis(c, Circle(C, D, E)), i we get concurrent(i, Line(D, H), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, G), Line(C, F), Line(A, F) we get concurrent(Line(A, F), Line(C, F), Line(F, G))
By concurrent_sufficient_conditions on Line(F, H), Line(F, G), Line(C, F) we get concurrent(Line(C, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(E, F), Line(A, F), Line(C, F) we get concurrent(Line(A, F), Line(C, F), Line(E, F))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), g, Line(D, H) we get concurrent(g, Line(D, H), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(A, F), Line(A, G), Line(A, B) we get concurrent(Line(A, B), Line(A, F), Line(A, G))
By concurrent_sufficient_conditions on Line(A, F), Line(A, B), g we get concurrent(g, Line(A, B), Line(A, F))
By concurrent_sufficient_conditions on h, Line(A, F), Line(F, H) we get concurrent(h, Line(A, F), Line(F, H))
By concurrent_sufficient_conditions on g, radical_axis(c, Circle(C, D, E)), h we get concurrent(g, h, radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(A, G), f, Line(A, F) we get concurrent(f, Line(A, F), Line(A, G))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), i, h we get concurrent(h, i, radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(A, F), f, Line(A, G) we get concurrent(f, Line(A, F), Line(A, G))
By concurrent_sufficient_conditions on Line(A, G), Line(A, B), Line(A, F) we get concurrent(Line(A, B), Line(A, F), Line(A, G))
By concurrent_sufficient_conditions on Line(E, F), Line(A, F), h we get concurrent(h, Line(A, F), Line(E, F))
By concurrent_sufficient_conditions on Line(A, F), Line(C, F), Line(F, G) we get concurrent(Line(A, F), Line(C, F), Line(F, G))
By concurrent_sufficient_conditions on Line(A, B), g, Line(A, F) we get concurrent(g, Line(A, B), Line(A, F))
By concurrent_sufficient_conditions on h, Line(F, G), Line(A, F) we get concurrent(h, Line(A, F), Line(F, G))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), Line(D, E), h we get concurrent(h, Line(D, E), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), i, g we get concurrent(g, i, radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, H), Line(F, G), h we get concurrent(h, Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(F, H), Line(D, H), f we get concurrent(f, Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on h, radical_axis(c, Circle(C, D, E)), i we get concurrent(h, i, radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on f, Line(F, H), Line(G, H) we get concurrent(f, Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, H), h, Line(A, F) we get concurrent(h, Line(A, F), Line(F, H))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), Line(D, E), g we get concurrent(g, Line(D, E), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(C, F), Line(A, F), Line(F, H) we get concurrent(Line(A, F), Line(C, F), Line(F, H))
By tangent_definition_from_perpendicularity_v0 on line_circle_tangent_point(Line(C, F), Circle(A, F, H)), Line(C, F), Circle(A, F, H) we get perpendicular(Line(C, F), Line(center(Circle(A, F, H)), line_circle_tangent_point(Line(C, F), Circle(A, F, H))))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), h, g we get concurrent(g, h, radical_axis(c, Circle(C, D, E)))
By tangent_definition_from_perpendicularity_v0 on line_circle_tangent_point(Line(C, F), Circle(D, F, G)), Line(C, F), Circle(D, F, G) we get perpendicular(Line(C, F), Line(center(Circle(D, F, G)), line_circle_tangent_point(Line(C, F), Circle(D, F, G))))
By tangent_definition_from_perpendicularity_v0 on F, Line(C, F), Circle(D, F, G) we get perpendicular(Line(C, F), Line(F, center(Circle(D, F, G))))
By tangent_definition_from_perpendicularity_v0 on F, Line(C, F), Circle(A, F, H) we get perpendicular(Line(C, F), Line(F, center(Circle(A, F, H))))
By tangent_definition_from_perpendicularity_v0 on G, Line(G, H), Circle(D, F, G) we get perpendicular(Line(G, H), Line(G, center(Circle(D, F, G))))
By line_intersection_definition on center(c), Line(H, center(c)), Line(D, center(c)) we get center(c) == line_intersection(Line(D, center(c)), Line(H, center(c)))
By line_intersection_definition on G, Line(G, center(Circle(C, F, G))), Line(G, center(c)) we get G == line_intersection(Line(G, center(c)), Line(G, center(Circle(C, F, G))))
By line_intersection_definition on F, Line(E, F), Line(F, center(Circle(C, D, E))) we get F == line_intersection(Line(E, F), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on D, g, Line(D, center(c)) we get D == line_intersection(g, Line(D, center(c)))
By line_intersection_definition on G, Line(E, G), Line(G, H) we get G == line_intersection(Line(E, G), Line(G, H))
By line_intersection_definition on G, Line(E, G), Line(G, center(c)) we get G == line_intersection(Line(E, G), Line(G, center(c)))
By line_intersection_definition on G, Line(F, G), Line(G, center(c)) we get G == line_intersection(Line(F, G), Line(G, center(c)))
By line_intersection_definition on G, Line(A, G), Line(G, center(c)) we get G == line_intersection(Line(A, G), Line(G, center(c)))
By line_intersection_definition on G, Line(A, G), Line(E, G) we get G == line_intersection(Line(A, G), Line(E, G))
By line_intersection_definition on H, f, Line(H, center(c)) we get H == line_intersection(f, Line(H, center(c)))
By line_intersection_definition on center(c), Line(G, center(c)), Line(A, center(c)) we get center(c) == line_intersection(Line(A, center(c)), Line(G, center(c)))
By line_intersection_definition on G, Line(G, center(Circle(C, F, G))), Line(E, G) we get G == line_intersection(Line(E, G), Line(G, center(Circle(C, F, G))))
By line_intersection_definition on center(Circle(C, D, E)), Line(C, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(C, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on F, Line(F, G), Line(F, center(Circle(C, D, E))) we get F == line_intersection(Line(F, G), Line(F, center(Circle(C, D, E))))
By circle_definition on H, line_circle_tangent_point(Line(C, F), Circle(A, F, H)), A, Circle(A, F, H) we get Circle(A, F, H) == Circle(A, H, line_circle_tangent_point(Line(C, F), Circle(A, F, H)))
By line_intersection_definition on G, i, Line(G, center(c)) we get G == line_intersection(i, Line(G, center(c)))
By line_intersection_definition on F, Line(F, center(Circle(C, F, G))), Line(E, F) we get F == line_intersection(Line(E, F), Line(F, center(Circle(C, F, G))))
By line_intersection_definition on D, Line(D, center(Circle(C, D, E))), Line(D, H) we get D == line_intersection(Line(D, H), Line(D, center(Circle(C, D, E))))
By line_intersection_definition on A, Line(A, center(c)), Line(A, B) we get A == line_intersection(Line(A, B), Line(A, center(c)))
By line_intersection_definition on F, Line(F, center(Circle(C, D, E))), Line(C, F) we get F == line_intersection(Line(C, F), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on F, Line(F, center(Circle(C, D, E))), Line(A, F) we get F == line_intersection(Line(A, F), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on C, Line(C, center(Circle(C, F, G))), f we get C == line_intersection(f, Line(C, center(Circle(C, F, G))))
By line_intersection_definition on D, Line(D, center(Circle(C, D, E))), g we get D == line_intersection(g, Line(D, center(Circle(C, D, E))))
By line_intersection_definition on D, Line(D, center(Circle(C, D, E))), radical_axis(c, Circle(C, D, E)) we get D == line_intersection(radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))))
By line_intersection_definition on H, Line(H, center(c)), Line(G, H) we get H == line_intersection(Line(G, H), Line(H, center(c)))
By line_intersection_definition on C, Line(C, center(Circle(C, D, E))), Line(C, F) we get C == line_intersection(Line(C, F), Line(C, center(Circle(C, D, E))))
By line_intersection_definition on A, f, Line(A, center(c)) we get A == line_intersection(f, Line(A, center(c)))
By line_intersection_definition on F, Line(F, center(Circle(C, F, G))), Line(F, H) we get F == line_intersection(Line(F, H), Line(F, center(Circle(C, F, G))))
By line_intersection_definition on C, Line(C, center(Circle(C, D, E))), Line(B, C) we get C == line_intersection(Line(B, C), Line(C, center(Circle(C, D, E))))
By line_intersection_definition on center(Circle(C, D, E)), Line(D, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(D, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on E, f, Line(E, center(Circle(C, D, E))) we get E == line_intersection(f, Line(E, center(Circle(C, D, E))))
By line_intersection_definition on F, Line(F, center(Circle(C, D, E))), Line(F, center(Circle(C, F, G))) we get F == line_intersection(Line(F, center(Circle(C, D, E))), Line(F, center(Circle(C, F, G))))
By line_intersection_definition on E, Line(E, G), Line(E, center(Circle(C, D, E))) we get E == line_intersection(Line(E, G), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on D, Line(D, center(Circle(C, D, E))), Line(D, center(c)) we get D == line_intersection(Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By line_intersection_definition on center(c), Line(H, center(c)), Line(A, center(c)) we get center(c) == line_intersection(Line(A, center(c)), Line(H, center(c)))
By line_intersection_definition on G, radical_axis(c, Circle(C, F, G)), Line(G, center(c)) we get G == line_intersection(Line(G, center(c)), radical_axis(c, Circle(C, F, G)))
By line_intersection_definition on D, Line(D, center(c)), i we get D == line_intersection(i, Line(D, center(c)))
By line_intersection_definition on D, Line(D, center(c)), h we get D == line_intersection(h, Line(D, center(c)))
By line_intersection_definition on A, Line(A, G), Line(A, center(c)) we get A == line_intersection(Line(A, G), Line(A, center(c)))
By line_intersection_definition on G, Line(G, center(Circle(C, F, G))), Line(A, G) we get G == line_intersection(Line(A, G), Line(G, center(Circle(C, F, G))))
By perpendicular_line_definition on F, h, Line(F, center(Circle(C, F, G))) we get h == perpendicular_line(F, Line(F, center(Circle(C, F, G))))
By line_intersection_definition on F, Line(F, center(Circle(C, F, G))), h we get F == line_intersection(h, Line(F, center(Circle(C, F, G))))
By line_intersection_definition on G, i, Line(G, center(Circle(C, F, G))) we get G == line_intersection(i, Line(G, center(Circle(C, F, G))))
By line_intersection_definition on center(Circle(C, D, E)), Line(F, center(Circle(C, D, E))), Line(C, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(C, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on H, Line(F, H), Line(H, center(c)) we get H == line_intersection(Line(F, H), Line(H, center(c)))
By line_intersection_definition on center(Circle(C, D, E)), Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on H, Line(D, H), Line(H, center(c)) we get H == line_intersection(Line(D, H), Line(H, center(c)))
By perpendicular_line_definition on line_intersection(g, Line(E, F)), Line(E, F), g we get Line(E, F) == perpendicular_line(line_intersection(g, Line(E, F)), g)
By line_intersection_definition on D, radical_axis(c, Circle(C, D, E)), Line(D, center(c)) we get D == line_intersection(Line(D, center(c)), radical_axis(c, Circle(C, D, E)))
By line_intersection_definition on center(Circle(C, D, E)), Line(F, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on G, Line(E, G), i we get G == line_intersection(i, Line(E, G))
By line_intersection_definition on G, Line(F, G), Line(G, center(Circle(C, F, G))) we get G == line_intersection(Line(F, G), Line(G, center(Circle(C, F, G))))
By line_intersection_definition on G, radical_axis(c, Circle(C, F, G)), Line(F, G) we get G == line_intersection(Line(F, G), radical_axis(c, Circle(C, F, G)))
By line_intersection_definition on center(Circle(C, F, G)), Line(C, center(Circle(C, F, G))), Line(G, center(Circle(C, F, G))) we get center(Circle(C, F, G)) == line_intersection(Line(C, center(Circle(C, F, G))), Line(G, center(Circle(C, F, G))))
By line_intersection_definition on G, Line(G, H), radical_axis(c, Circle(C, F, G)) we get G == line_intersection(Line(G, H), radical_axis(c, Circle(C, F, G)))
By line_intersection_definition on F, Line(F, center(Circle(C, D, E))), Line(F, H) we get F == line_intersection(Line(F, H), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on G, radical_axis(c, Circle(C, F, G)), Line(A, G) we get G == line_intersection(Line(A, G), radical_axis(c, Circle(C, F, G)))
By line_intersection_definition on E, Line(E, F), Line(E, G) we get E == line_intersection(Line(E, F), Line(E, G))
By perpendicular_line_definition on line_intersection(g, Line(E, F)), g, Line(E, F) we get g == perpendicular_line(line_intersection(g, Line(E, F)), Line(E, F))
By line_intersection_definition on F, Line(F, center(Circle(C, F, G))), Line(A, F) we get F == line_intersection(Line(A, F), Line(F, center(Circle(C, F, G))))
By line_intersection_definition on A, Line(A, F), Line(A, center(c)) we get A == line_intersection(Line(A, F), Line(A, center(c)))
By perpendicular_line_definition on center(Circle(C, F, G)), Line(F, center(Circle(C, F, G))), h we get Line(F, center(Circle(C, F, G))) == perpendicular_line(center(Circle(C, F, G)), h)
By line_intersection_definition on center(Circle(C, F, G)), Line(G, center(Circle(C, F, G))), Line(F, center(Circle(C, F, G))) we get center(Circle(C, F, G)) == line_intersection(Line(F, center(Circle(C, F, G))), Line(G, center(Circle(C, F, G))))
By perpendicular_line_definition on B, h, Line(F, center(Circle(C, F, G))) we get h == perpendicular_line(B, Line(F, center(Circle(C, F, G))))
By line_intersection_definition on C, Line(C, center(Circle(C, D, E))), Line(C, center(Circle(C, F, G))) we get C == line_intersection(Line(C, center(Circle(C, D, E))), Line(C, center(Circle(C, F, G))))
By line_intersection_definition on D, Line(D, center(c)), Line(D, H) we get D == line_intersection(Line(D, H), Line(D, center(c)))
By line_intersection_definition on D, Line(D, center(Circle(C, D, E))), h we get D == line_intersection(h, Line(D, center(Circle(C, D, E))))
By line_intersection_definition on C, Line(B, C), Line(C, center(Circle(C, F, G))) we get C == line_intersection(Line(B, C), Line(C, center(Circle(C, F, G))))
By perpendicular_line_definition on line_circle_tangent_point(Line(C, F), Circle(A, F, H)), Line(C, F), h we get Line(C, F) == perpendicular_line(line_circle_tangent_point(Line(C, F), Circle(A, F, H)), h)
By line_intersection_definition on C, Line(C, center(Circle(C, F, G))), i we get C == line_intersection(i, Line(C, center(Circle(C, F, G))))
By line_intersection_definition on G, radical_axis(c, Circle(C, F, G)), Line(E, G) we get G == line_intersection(Line(E, G), radical_axis(c, Circle(C, F, G)))
By line_intersection_definition on G, Line(E, G), Line(F, G) we get G == line_intersection(Line(E, G), Line(F, G))
By circle_definition on G, line_circle_tangent_point(Line(C, F), Circle(D, F, G)), D, Circle(D, F, G) we get Circle(D, F, G) == Circle(D, G, line_circle_tangent_point(Line(C, F), Circle(D, F, G)))
By line_intersection_definition on center(c), Line(D, center(c)), Line(A, center(c)) we get center(c) == line_intersection(Line(A, center(c)), Line(D, center(c)))
By perpendicular_line_definition on line_circle_tangent_point(Line(C, F), Circle(D, F, G)), Line(C, F), h we get Line(C, F) == perpendicular_line(line_circle_tangent_point(Line(C, F), Circle(D, F, G)), h)
By line_intersection_definition on C, Line(C, center(Circle(C, D, E))), f we get C == line_intersection(f, Line(C, center(Circle(C, D, E))))
By line_intersection_definition on D, Line(D, center(c)), Line(D, E) we get D == line_intersection(Line(D, E), Line(D, center(c)))
By line_intersection_definition on E, Line(E, F), Line(E, center(Circle(C, D, E))) we get E == line_intersection(Line(E, F), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on F, Line(F, center(Circle(C, F, G))), Line(F, G) we get F == line_intersection(Line(F, G), Line(F, center(Circle(C, F, G))))
By line_intersection_definition on center(c), Line(G, center(c)), Line(H, center(c)) we get center(c) == line_intersection(Line(G, center(c)), Line(H, center(c)))
By line_intersection_definition on E, Line(E, G), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, G))
By line_intersection_definition on G, Line(G, H), Line(G, center(c)) we get G == line_intersection(Line(G, H), Line(G, center(c)))
By line_intersection_definition on center(c), Line(D, center(c)), Line(G, center(c)) we get center(c) == line_intersection(Line(D, center(c)), Line(G, center(c)))
By line_intersection_definition on G, i, radical_axis(c, Circle(C, F, G)) we get G == line_intersection(i, radical_axis(c, Circle(C, F, G)))
By line_intersection_definition on F, Line(F, center(Circle(C, D, E))), h we get F == line_intersection(h, Line(F, center(Circle(C, D, E))))
By perpendicular_line_definition on D, h, Line(F, center(Circle(C, F, G))) we get h == perpendicular_line(D, Line(F, center(Circle(C, F, G))))
By line_intersection_definition on A, Line(A, center(c)), g we get A == line_intersection(g, Line(A, center(c)))
By line_intersection_definition on D, Line(D, center(Circle(C, D, E))), Line(D, E) we get D == line_intersection(Line(D, E), Line(D, center(Circle(C, D, E))))
By line_intersection_definition on E, Line(E, G), f we get E == line_intersection(f, Line(E, G))
By line_intersection_definition on E, Line(D, E), Line(E, center(Circle(C, D, E))) we get E == line_intersection(Line(D, E), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on G, radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))) we get G == line_intersection(radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))))
By same_angle_converse_v1 on center(Circle(C, F, G)), C, F, G we get collinear(C, F, center(Circle(C, F, G)))
By same_angle_converse_v1 on center(Circle(C, D, E)), C, D, F we get collinear(C, D, center(Circle(C, D, E)))
By same_angle_v3 on G, D, C, E we get angle(D, G, E) == angle(C, G, E) + 180 mod 360
By same_angle_v0 on E, H, C, G we get angle(C, E, G) == angle(H, E, G) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(C, F, G)), F, B, F we get 180 == 2 * direction(center(Circle(C, F, G)), F) - 2 * direction(B, F) mod 360
By same_angle_v3 on E, H, A, G we get angle(H, E, G) == angle(A, E, G) + 180 mod 360
By same_angle_v3 on E, C, A, G we get angle(C, E, G) == angle(A, E, G) + 180 mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(C, F, G)), F, D, B we get 180 == 2 * direction(center(Circle(C, F, G)), F) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on B, F, center(Circle(C, F, G)), F we get 180 == 2 * direction(B, F) - 2 * direction(center(Circle(C, F, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(C, F, G)), F, F, B we get 180 == 2 * direction(center(Circle(C, F, G)), F) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(C, F, G)), F, F, D we get 180 == 2 * direction(center(Circle(C, F, G)), F) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on F, B, center(Circle(C, F, G)), F we get 180 == 2 * direction(F, B) - 2 * direction(center(Circle(C, F, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on D, F, center(Circle(C, F, G)), F we get 180 == 2 * direction(D, F) - 2 * direction(center(Circle(C, F, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(C, F, G)), F, D, F we get 180 == 2 * direction(center(Circle(C, F, G)), F) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(C, F, G)), F, B, D we get 180 == 2 * direction(center(Circle(C, F, G)), F) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on D, B, center(Circle(C, F, G)), F we get 180 == 2 * direction(D, B) - 2 * direction(center(Circle(C, F, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on F, D, center(Circle(C, F, G)), F we get 180 == 2 * direction(F, D) - 2 * direction(center(Circle(C, F, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on B, D, center(Circle(C, F, G)), F we get 180 == 2 * direction(B, D) - 2 * direction(center(Circle(C, F, G)), F) mod 360
By circle_radius_v0_r on H, Circle(A, F, H) we get radius(Circle(A, F, H)) == distance(H, center(Circle(A, F, H)))
By circle_radius_v0_r on G, Circle(D, F, G) we get radius(Circle(D, F, G)) == distance(G, center(Circle(D, F, G)))
By circle_radius_v0_r on A, Circle(A, F, H) we get radius(Circle(A, F, H)) == distance(A, center(Circle(A, F, H)))
By circle_radius_v0_r on D, Circle(D, F, G) we get radius(Circle(D, F, G)) == distance(D, center(Circle(D, F, G)))
By circle_radius_v0_r on line_circle_tangent_point(Line(C, F), Circle(D, F, G)), Circle(D, F, G) we get radius(Circle(D, F, G)) == distance(center(Circle(D, F, G)), line_circle_tangent_point(Line(C, F), Circle(D, F, G)))
By circle_radius_v0_r on F, Circle(A, F, H) we get radius(Circle(A, F, H)) == distance(F, center(Circle(A, F, H)))
By circle_radius_v0_r on line_circle_tangent_point(Line(C, F), Circle(A, F, H)), Circle(A, F, H) we get radius(Circle(A, F, H)) == distance(center(Circle(A, F, H)), line_circle_tangent_point(Line(C, F), Circle(A, F, H)))
By circle_radius_v0_r on F, Circle(D, F, G) we get radius(Circle(D, F, G)) == distance(F, center(Circle(D, F, G)))
By angle_to_center on F, G, D, Circle(D, F, G) we get 2 * angle(F, G, D) == angle(F, center(Circle(D, F, G)), D) mod 360
By angle_to_center on G, D, F, Circle(D, F, G) we get 2 * angle(G, D, F) == angle(G, center(Circle(D, F, G)), F) mod 360
By angle_to_center on D, F, G, Circle(D, F, G) we get 2 * angle(D, F, G) == angle(D, center(Circle(D, F, G)), G) mod 360
By angle_to_center on A, F, H, Circle(A, F, H) we get 2 * angle(A, F, H) == angle(A, center(Circle(A, F, H)), H) mod 360
By angle_to_center on F, D, G, Circle(D, F, G) we get 2 * angle(F, D, G) == angle(F, center(Circle(D, F, G)), G) mod 360
By angle_to_center on F, A, H, Circle(A, F, H) we get 2 * angle(F, A, H) == angle(F, center(Circle(A, F, H)), H) mod 360
By angle_to_center on G, F, D, Circle(D, F, G) we get 2 * angle(G, F, D) == angle(G, center(Circle(D, F, G)), D) mod 360
By angle_to_center on H, F, A, Circle(A, F, H) we get 2 * angle(H, F, A) == angle(H, center(Circle(A, F, H)), A) mod 360
By angle_to_center on F, H, A, Circle(A, F, H) we get 2 * angle(F, H, A) == angle(F, center(Circle(A, F, H)), A) mod 360
By angle_to_center on H, A, F, Circle(A, F, H) we get 2 * angle(H, A, F) == angle(H, center(Circle(A, F, H)), F) mod 360
By angle_to_center on A, H, F, Circle(A, F, H) we get 2 * angle(A, H, F) == angle(A, center(Circle(A, F, H)), F) mod 360
By angle_to_center on D, G, F, Circle(D, F, G) we get 2 * angle(D, G, F) == angle(D, center(Circle(D, F, G)), F) mod 360
By projection_definition on B, F, Line(F, center(Circle(C, F, G))) we get F == projection(B, Line(F, center(Circle(C, F, G))))
By perpendicular_direction_conditions_v0_r on D, B, F, center(Circle(C, F, G)) we get 180 == 2 * direction(D, B) - 2 * direction(F, center(Circle(C, F, G))) mod 360
By perpendicular_direction_conditions_v0_r on F, center(Circle(C, F, G)), D, B we get 180 == 2 * direction(F, center(Circle(C, F, G))) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on F, center(Circle(C, F, G)), F, B we get 180 == 2 * direction(F, center(Circle(C, F, G))) - 2 * direction(F, B) mod 360
By in_imply_collinear on line_intersection(g, Line(E, F)), D, A we get collinear(A, D, line_intersection(g, Line(E, F)))
By perpendicular_direction_conditions_v0_r on B, F, F, center(Circle(C, F, G)) we get 180 == 2 * direction(B, F) - 2 * direction(F, center(Circle(C, F, G))) mod 360
By projection_definition on D, F, Line(F, center(Circle(C, F, G))) we get F == projection(D, Line(F, center(Circle(C, F, G))))
By perpendicular_direction_conditions_v0_r on B, D, F, center(Circle(C, F, G)) we get 180 == 2 * direction(B, D) - 2 * direction(F, center(Circle(C, F, G))) mod 360
By perpendicular_direction_conditions_v0_r on D, F, F, center(Circle(C, F, G)) we get 180 == 2 * direction(D, F) - 2 * direction(F, center(Circle(C, F, G))) mod 360
By projection_definition on center(Circle(C, F, G)), F, h we get F == projection(center(Circle(C, F, G)), h)
By perpendicular_direction_conditions_v0_r on F, B, F, center(Circle(C, F, G)) we get 180 == 2 * direction(F, B) - 2 * direction(F, center(Circle(C, F, G))) mod 360
By perpendicular_direction_conditions_v0_r on F, center(Circle(C, F, G)), B, F we get 180 == 2 * direction(F, center(Circle(C, F, G))) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on F, center(Circle(C, F, G)), B, D we get 180 == 2 * direction(F, center(Circle(C, F, G))) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on F, center(Circle(C, F, G)), D, F we get 180 == 2 * direction(F, center(Circle(C, F, G))) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on F, D, F, center(Circle(C, F, G)) we get 180 == 2 * direction(F, D) - 2 * direction(F, center(Circle(C, F, G))) mod 360
By perpendicular_direction_conditions_v0_r on F, center(Circle(C, F, G)), F, D we get 180 == 2 * direction(F, center(Circle(C, F, G))) - 2 * direction(F, D) mod 360
By in_imply_collinear on line_circle_tangent_point(Line(C, F), Circle(D, F, G)), F, C we get collinear(C, F, line_circle_tangent_point(Line(C, F), Circle(D, F, G)))
By in_imply_concyclic on D, F, G, line_circle_tangent_point(Line(C, F), Circle(D, F, G)) we get concyclic(D, F, G, line_circle_tangent_point(Line(C, F), Circle(D, F, G)))
By in_imply_collinear on line_circle_tangent_point(Line(C, F), Circle(A, F, H)), F, C we get collinear(C, F, line_circle_tangent_point(Line(C, F), Circle(A, F, H)))
By in_imply_collinear on line_intersection(g, Line(E, F)), F, E we get collinear(E, F, line_intersection(g, Line(E, F)))
By tangent_point_is_unique on F, line_circle_tangent_point(Line(C, F), Circle(D, F, G)), Circle(D, F, G), Line(C, F) we get F == line_circle_tangent_point(Line(C, F), Circle(D, F, G))
By in_imply_concyclic on F, H, A, line_circle_tangent_point(Line(C, F), Circle(A, F, H)) we get concyclic(A, F, H, line_circle_tangent_point(Line(C, F), Circle(A, F, H)))
By tangent_chord_angle_reverse_v0 on G, F, D, H we get angle(F, D, G) == angle(F, G, H) mod 360
By tangent_point_is_unique on F, line_circle_tangent_point(Line(C, F), Circle(A, F, H)), Circle(A, F, H), Line(C, F) we get F == line_circle_tangent_point(Line(C, F), Circle(A, F, H))
By double_perpendicular_and_parallel_v0 on Line(C, F), h, Line(F, center(Circle(C, F, G))) we get parallel(Line(C, F), Line(F, center(Circle(C, F, G))))
By angle_to_center on line_circle_tangent_point(Line(C, F), Circle(A, F, H)), A, H, Circle(A, F, H) we get angle(line_circle_tangent_point(Line(C, F), Circle(A, F, H)), center(Circle(A, F, H)), H) == 2 * angle(line_circle_tangent_point(Line(C, F), Circle(A, F, H)), A, H) mod 360
By angle_to_center on line_circle_tangent_point(Line(C, F), Circle(A, F, H)), H, A, Circle(A, F, H) we get angle(line_circle_tangent_point(Line(C, F), Circle(A, F, H)), center(Circle(A, F, H)), A) == 2 * angle(line_circle_tangent_point(Line(C, F), Circle(A, F, H)), H, A) mod 360
By angle_to_center on D, G, line_circle_tangent_point(Line(C, F), Circle(D, F, G)), Circle(D, F, G) we get angle(D, center(Circle(D, F, G)), line_circle_tangent_point(Line(C, F), Circle(D, F, G))) == 2 * angle(D, G, line_circle_tangent_point(Line(C, F), Circle(D, F, G))) mod 360
By angle_to_center on H, A, line_circle_tangent_point(Line(C, F), Circle(A, F, H)), Circle(A, F, H) we get angle(H, center(Circle(A, F, H)), line_circle_tangent_point(Line(C, F), Circle(A, F, H))) == 2 * angle(H, A, line_circle_tangent_point(Line(C, F), Circle(A, F, H))) mod 360
By angle_to_center on G, D, line_circle_tangent_point(Line(C, F), Circle(D, F, G)), Circle(D, F, G) we get angle(G, center(Circle(D, F, G)), line_circle_tangent_point(Line(C, F), Circle(D, F, G))) == 2 * angle(G, D, line_circle_tangent_point(Line(C, F), Circle(D, F, G))) mod 360
By angle_to_center on line_circle_tangent_point(Line(C, F), Circle(D, F, G)), G, D, Circle(D, F, G) we get angle(line_circle_tangent_point(Line(C, F), Circle(D, F, G)), center(Circle(D, F, G)), D) == 2 * angle(line_circle_tangent_point(Line(C, F), Circle(D, F, G)), G, D) mod 360
By angle_to_center on A, H, line_circle_tangent_point(Line(C, F), Circle(A, F, H)), Circle(A, F, H) we get angle(A, center(Circle(A, F, H)), line_circle_tangent_point(Line(C, F), Circle(A, F, H))) == 2 * angle(A, H, line_circle_tangent_point(Line(C, F), Circle(A, F, H))) mod 360
By angle_to_center on line_circle_tangent_point(Line(C, F), Circle(D, F, G)), D, G, Circle(D, F, G) we get angle(line_circle_tangent_point(Line(C, F), Circle(D, F, G)), center(Circle(D, F, G)), G) == 2 * angle(line_circle_tangent_point(Line(C, F), Circle(D, F, G)), D, G) mod 360
By internal_angle_bisector_definition_v0_r on F, C, F, center(Circle(C, F, G)) we get Line(C, center(Circle(C, F, G))) == internal_angle_bisector(F, center(Circle(C, F, G)), F)
By similar_triangle_basic_properties on D, F, A, D, G, E we get angle(D, F, A) == angle(D, G, E) mod 360, angle(F, A, D) == angle(G, E, D) mod 360, angle(A, D, F) == angle(E, D, G) mod 360, log(distance(D, F)) + log(distance(E, G)) == log(distance(D, G)) + log(distance(A, F)), log(distance(A, F)) + log(distance(D, E)) == log(distance(E, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(D, G)) == log(distance(D, E)) + log(distance(D, F))
By reverse_direction on center(Circle(C, F, G)), F we get 180 == direction(center(Circle(C, F, G)), F) - direction(F, center(Circle(C, F, G))) mod 360
By similar_triangle_basic_properties on F, D, A, G, D, E we get angle(F, D, A) == angle(G, D, E) mod 360, angle(D, A, F) == angle(D, E, G) mod 360, angle(A, F, D) == angle(E, G, D) mod 360, log(distance(D, F)) + log(distance(D, E)) == log(distance(D, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(E, G)) == log(distance(D, E)) + log(distance(A, F)), log(distance(A, F)) + log(distance(D, G)) == log(distance(E, G)) + log(distance(D, F))
By reverse_direction on center(Circle(C, F, G)), C we get 180 == direction(center(Circle(C, F, G)), C) - direction(C, center(Circle(C, F, G))) mod 360
By reverse_direction on center(Circle(C, D, E)), C we get 180 == direction(center(Circle(C, D, E)), C) - direction(C, center(Circle(C, D, E))) mod 360
By radical_axis_definition_v0_r on F, Circle(C, D, E), Circle(A, F, H) we get F in radical_axis(Circle(A, F, H), Circle(C, D, E))
By reverse_direction on center(c), D we get 180 == direction(center(c), D) - direction(D, center(c)) mod 360
By perpendicular_angle_conditions_v0 on center(Circle(C, F, G)), F, B we get angle(center(Circle(C, F, G)), F, B) == orientation(B, center(Circle(C, F, G)), F) mod 360
By internal_angle_bisector_definition_v0_r on C, F, C, center(Circle(C, F, G)) we get Line(F, center(Circle(C, F, G))) == internal_angle_bisector(C, center(Circle(C, F, G)), C)
By perpendicular_angle_conditions_v0 on B, F, center(Circle(C, F, G)) we get angle(B, F, center(Circle(C, F, G))) == orientation(B, F, center(Circle(C, F, G))) mod 360
By power_of_a_point_on_circle on line_circle_tangent_point(Line(C, F), Circle(A, F, H)), Circle(A, F, H) we get 0 == power_of_a_point(line_circle_tangent_point(Line(C, F), Circle(A, F, H)), Circle(A, F, H))
By radical_axis_definition_v0_r on F, Circle(D, F, G), Circle(A, F, H) we get F in radical_axis(Circle(A, F, H), Circle(D, F, G))
By radical_axis_definition_v0_r on F, Circle(A, F, H), Circle(C, F, G) we get F in radical_axis(Circle(A, F, H), Circle(C, F, G))
By power_of_a_point_in_circle on line_circle_tangent_point(Line(C, F), Circle(D, F, G)), Circle(D, F, G) we get 0 == power_of_a_point(line_circle_tangent_point(Line(C, F), Circle(D, F, G)), Circle(D, F, G))
By perpendicular_angle_conditions_v0 on center(Circle(C, F, G)), F, D we get angle(center(Circle(C, F, G)), F, D) == orientation(D, center(Circle(C, F, G)), F) mod 360
By reverse_direction on center(Circle(C, D, E)), F we get 180 == direction(center(Circle(C, D, E)), F) - direction(F, center(Circle(C, D, E))) mod 360
By reverse_direction on center(c), H we get 180 == direction(center(c), H) - direction(H, center(c)) mod 360
By reverse_direction on center(c), A we get 180 == direction(center(c), A) - direction(A, center(c)) mod 360
By internal_angle_bisector_definition_v0_r on C, D, C, center(Circle(C, D, E)) we get Line(D, center(Circle(C, D, E))) == internal_angle_bisector(C, center(Circle(C, D, E)), C)
By internal_angle_bisector_definition_v0_r on D, C, D, center(Circle(C, D, E)) we get Line(C, center(Circle(C, D, E))) == internal_angle_bisector(D, center(Circle(C, D, E)), D)
By reverse_direction on center(Circle(C, D, E)), D we get 180 == direction(center(Circle(C, D, E)), D) - direction(D, center(Circle(C, D, E))) mod 360
By reverse_direction on center(Circle(C, D, E)), E we get 180 == direction(center(Circle(C, D, E)), E) - direction(E, center(Circle(C, D, E))) mod 360
By reverse_direction on center(c), G we get 180 == direction(center(c), G) - direction(G, center(c)) mod 360
By reverse_direction on center(Circle(C, F, G)), G we get 180 == direction(center(Circle(C, F, G)), G) - direction(G, center(Circle(C, F, G))) mod 360
By perpendicular_angle_conditions_v0 on D, F, center(Circle(C, F, G)) we get angle(D, F, center(Circle(C, F, G))) == orientation(D, F, center(Circle(C, F, G))) mod 360
By draw_point_of_tangency on Line(G, H), Circle(D, F, G) we get exists(line_circle_tangent_point(Line(G, H), Circle(D, F, G)))
By perpendicular_lines_draw_intersection on Line(F, center(Circle(C, F, G))), h we get exists(line_intersection(h, Line(F, center(Circle(C, F, G)))))
By angle_to_center on H, line_circle_tangent_point(Line(C, F), Circle(A, F, H)), A, Circle(A, F, H) we get angle(H, center(Circle(A, F, H)), A) == 2 * angle(H, line_circle_tangent_point(Line(C, F), Circle(A, F, H)), A) mod 360
By angle_to_center on A, line_circle_tangent_point(Line(C, F), Circle(A, F, H)), H, Circle(A, F, H) we get angle(A, center(Circle(A, F, H)), H) == 2 * angle(A, line_circle_tangent_point(Line(C, F), Circle(A, F, H)), H) mod 360
By angle_to_center on G, line_circle_tangent_point(Line(C, F), Circle(D, F, G)), D, Circle(D, F, G) we get angle(G, center(Circle(D, F, G)), D) == 2 * angle(G, line_circle_tangent_point(Line(C, F), Circle(D, F, G)), D) mod 360
By angle_to_center on D, line_circle_tangent_point(Line(C, F), Circle(D, F, G)), G, Circle(D, F, G) we get angle(D, center(Circle(D, F, G)), G) == 2 * angle(D, line_circle_tangent_point(Line(C, F), Circle(D, F, G)), G) mod 360
By sas_anti_congruence on D, center(Circle(C, D, E)), E, E, center(Circle(C, D, E)), D we get anti_congruent_triangles(D, E, center(Circle(C, D, E)), E, D, center(Circle(C, D, E)))
By sas_anti_congruence on H, center(c), A, A, center(c), H we get anti_congruent_triangles(A, H, center(c), H, A, center(c))
By isosceles_triangle_properties on center(Circle(C, F, G)), G, F we get distance(F, center(Circle(C, F, G))) == distance(G, center(Circle(C, F, G))), angle(G, F, center(Circle(C, F, G))) == angle(center(Circle(C, F, G)), G, F) mod 360
By sas_anti_congruence on G, center(c), H, H, center(c), G we get anti_congruent_triangles(G, H, center(c), H, G, center(c))
By sas_anti_congruence on E, center(Circle(C, D, E)), F, F, center(Circle(C, D, E)), E we get anti_congruent_triangles(E, F, center(Circle(C, D, E)), F, E, center(Circle(C, D, E)))
By isosceles_triangle_properties on center(c), G, D we get distance(D, center(c)) == distance(G, center(c)), angle(G, D, center(c)) == angle(center(c), G, D) mod 360
By sas_anti_congruence on F, center(Circle(C, D, E)), E, E, center(Circle(C, D, E)), F we get anti_congruent_triangles(E, F, center(Circle(C, D, E)), F, E, center(Circle(C, D, E)))
By sas_anti_congruence on D, center(c), A, A, center(c), D we get anti_congruent_triangles(A, D, center(c), D, A, center(c))
By altitude_definition on center(Circle(C, F, G)), B, F, Line(F, center(Circle(C, F, G))) we get Line(F, center(Circle(C, F, G))) == altitude(center(Circle(C, F, G)), B, F)
By isosceles_triangle_properties on center(Circle(C, D, E)), C, E we get distance(C, center(Circle(C, D, E))) == distance(E, center(Circle(C, D, E))), angle(C, E, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, E) mod 360
By sas_anti_congruence on G, center(c), A, A, center(c), G we get anti_congruent_triangles(A, G, center(c), G, A, center(c))
By sas_anti_congruence on E, center(Circle(C, D, E)), D, D, center(Circle(C, D, E)), E we get anti_congruent_triangles(D, E, center(Circle(C, D, E)), E, D, center(Circle(C, D, E)))
By radical_axis_definition_v0 on line_circle_tangent_point(Line(C, F), Circle(D, F, G)), Circle(C, F, G), Circle(C, D, E) we get power_of_a_point(line_circle_tangent_point(Line(C, F), Circle(D, F, G)), Circle(C, D, E)) == power_of_a_point(line_circle_tangent_point(Line(C, F), Circle(D, F, G)), Circle(C, F, G))
By power_of_a_point_tangent on H, G, Circle(D, F, G) we get 2 * log(distance(G, H)) == log(power_of_a_point(H, Circle(D, F, G)))
By isosceles_triangle_properties on center(c), G, A we get distance(A, center(c)) == distance(G, center(c)), angle(G, A, center(c)) == angle(center(c), G, A) mod 360
By isosceles_triangle_properties on center(c), A, D we get distance(A, center(c)) == distance(D, center(c)), angle(A, D, center(c)) == angle(center(c), A, D) mod 360
By isosceles_triangle_properties on center(c), A, H we get distance(A, center(c)) == distance(H, center(c)), angle(A, H, center(c)) == angle(center(c), A, H) mod 360
By isosceles_triangle_properties on center(c), D, G we get distance(D, center(c)) == distance(G, center(c)), angle(D, G, center(c)) == angle(center(c), D, G) mod 360
By isosceles_triangle_properties on center(Circle(C, D, E)), F, D we get distance(D, center(Circle(C, D, E))) == distance(F, center(Circle(C, D, E))), angle(F, D, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), F, D) mod 360
By altitude_definition on center(Circle(C, F, G)), D, B, Line(F, center(Circle(C, F, G))) we get Line(F, center(Circle(C, F, G))) == altitude(center(Circle(C, F, G)), B, D)
By altitude_definition on D, center(Circle(C, F, G)), F, h we get h == altitude(D, F, center(Circle(C, F, G)))
By sas_anti_congruence on H, center(c), G, G, center(c), H we get anti_congruent_triangles(G, H, center(c), H, G, center(c))
By sas_anti_congruence on G, center(Circle(C, F, G)), C, C, center(Circle(C, F, G)), G we get anti_congruent_triangles(C, G, center(Circle(C, F, G)), G, C, center(Circle(C, F, G)))
By isosceles_triangle_properties on center(Circle(C, D, E)), E, D we get distance(D, center(Circle(C, D, E))) == distance(E, center(Circle(C, D, E))), angle(E, D, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), E, D) mod 360
By sas_anti_congruence on A, center(c), G, G, center(c), A we get anti_congruent_triangles(A, G, center(c), G, A, center(c))
By sas_anti_congruence on C, center(Circle(C, F, G)), G, G, center(Circle(C, F, G)), C we get anti_congruent_triangles(C, G, center(Circle(C, F, G)), G, C, center(Circle(C, F, G)))
By altitude_definition on center(Circle(C, F, G)), F, D, Line(F, center(Circle(C, F, G))) we get Line(F, center(Circle(C, F, G))) == altitude(center(Circle(C, F, G)), D, F)
By isosceles_triangle_properties on center(Circle(C, D, E)), D, E we get distance(D, center(Circle(C, D, E))) == distance(E, center(Circle(C, D, E))), angle(D, E, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), D, E) mod 360
By isosceles_triangle_properties on center(Circle(C, D, E)), C, F we get distance(C, center(Circle(C, D, E))) == distance(F, center(Circle(C, D, E))), angle(C, F, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, F) mod 360
By altitude_definition on B, F, center(Circle(C, F, G)), h we get h == altitude(B, F, center(Circle(C, F, G)))
By sas_anti_congruence on G, center(c), D, D, center(c), G we get anti_congruent_triangles(D, G, center(c), G, D, center(c))
By isosceles_triangle_properties on center(Circle(C, D, E)), E, F we get distance(E, center(Circle(C, D, E))) == distance(F, center(Circle(C, D, E))), angle(E, F, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), E, F) mod 360
By isosceles_triangle_properties on center(Circle(C, F, G)), G, C we get distance(C, center(Circle(C, F, G))) == distance(G, center(Circle(C, F, G))), angle(G, C, center(Circle(C, F, G))) == angle(center(Circle(C, F, G)), G, C) mod 360
By sas_anti_congruence on D, center(c), H, H, center(c), D we get anti_congruent_triangles(D, H, center(c), H, D, center(c))
By isosceles_triangle_properties on center(Circle(C, D, E)), E, C we get distance(C, center(Circle(C, D, E))) == distance(E, center(Circle(C, D, E))), angle(E, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), E, C) mod 360
By sas_anti_congruence on F, center(Circle(C, F, G)), G, G, center(Circle(C, F, G)), F we get anti_congruent_triangles(F, G, center(Circle(C, F, G)), G, F, center(Circle(C, F, G)))
By sas_anti_congruence on A, center(c), H, H, center(c), A we get anti_congruent_triangles(A, H, center(c), H, A, center(c))
By sas_anti_congruence on F, center(Circle(C, D, E)), D, D, center(Circle(C, D, E)), F we get anti_congruent_triangles(D, F, center(Circle(C, D, E)), F, D, center(Circle(C, D, E)))
By isosceles_triangle_properties on center(c), H, A we get distance(A, center(c)) == distance(H, center(c)), angle(H, A, center(c)) == angle(center(c), H, A) mod 360
By radical_axis_definition_v0 on line_circle_tangent_point(Line(C, F), Circle(A, F, H)), Circle(C, D, E), Circle(C, F, G) we get power_of_a_point(line_circle_tangent_point(Line(C, F), Circle(A, F, H)), Circle(C, D, E)) == power_of_a_point(line_circle_tangent_point(Line(C, F), Circle(A, F, H)), Circle(C, F, G))
By isosceles_triangle_properties on center(Circle(C, D, E)), D, F we get distance(D, center(Circle(C, D, E))) == distance(F, center(Circle(C, D, E))), angle(D, F, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), D, F) mod 360
By sas_anti_congruence on A, center(c), D, D, center(c), A we get anti_congruent_triangles(A, D, center(c), D, A, center(c))
By isosceles_triangle_properties on center(Circle(C, F, G)), F, G we get distance(F, center(Circle(C, F, G))) == distance(G, center(Circle(C, F, G))), angle(F, G, center(Circle(C, F, G))) == angle(center(Circle(C, F, G)), F, G) mod 360
By sas_anti_congruence on D, center(Circle(C, D, E)), F, F, center(Circle(C, D, E)), D we get anti_congruent_triangles(D, F, center(Circle(C, D, E)), F, D, center(Circle(C, D, E)))
By sas_anti_congruence on F, center(Circle(C, D, E)), C, C, center(Circle(C, D, E)), F we get anti_congruent_triangles(C, F, center(Circle(C, D, E)), F, C, center(Circle(C, D, E)))
By isosceles_triangle_properties on center(c), H, D we get distance(D, center(c)) == distance(H, center(c)), angle(H, D, center(c)) == angle(center(c), H, D) mod 360
By isosceles_triangle_properties on center(c), H, G we get distance(G, center(c)) == distance(H, center(c)), angle(H, G, center(c)) == angle(center(c), H, G) mod 360
By isosceles_triangle_properties on center(Circle(C, D, E)), F, E we get distance(E, center(Circle(C, D, E))) == distance(F, center(Circle(C, D, E))), angle(F, E, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), F, E) mod 360
By sas_anti_congruence on C, center(Circle(C, D, E)), F, F, center(Circle(C, D, E)), C we get anti_congruent_triangles(C, F, center(Circle(C, D, E)), F, C, center(Circle(C, D, E)))
By isosceles_triangle_properties on center(c), D, H we get distance(D, center(c)) == distance(H, center(c)), angle(D, H, center(c)) == angle(center(c), D, H) mod 360
By isosceles_triangle_properties on center(Circle(C, F, G)), C, G we get distance(C, center(Circle(C, F, G))) == distance(G, center(Circle(C, F, G))), angle(C, G, center(Circle(C, F, G))) == angle(center(Circle(C, F, G)), C, G) mod 360
By isosceles_triangle_properties on center(c), G, H we get distance(G, center(c)) == distance(H, center(c)), angle(G, H, center(c)) == angle(center(c), G, H) mod 360
By sas_anti_congruence on H, center(c), D, D, center(c), H we get anti_congruent_triangles(D, H, center(c), H, D, center(c))
By sas_anti_congruence on D, center(c), G, G, center(c), D we get anti_congruent_triangles(D, G, center(c), G, D, center(c))
By isosceles_triangle_properties on center(Circle(C, D, E)), F, C we get distance(C, center(Circle(C, D, E))) == distance(F, center(Circle(C, D, E))), angle(F, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), F, C) mod 360
By isosceles_triangle_properties on center(c), D, A we get distance(A, center(c)) == distance(D, center(c)), angle(D, A, center(c)) == angle(center(c), D, A) mod 360
By sas_anti_congruence on E, center(Circle(C, D, E)), C, C, center(Circle(C, D, E)), E we get anti_congruent_triangles(C, E, center(Circle(C, D, E)), E, C, center(Circle(C, D, E)))
By sas_anti_congruence on C, center(Circle(C, D, E)), E, E, center(Circle(C, D, E)), C we get anti_congruent_triangles(C, E, center(Circle(C, D, E)), E, C, center(Circle(C, D, E)))
By isosceles_triangle_properties on center(c), A, G we get distance(A, center(c)) == distance(G, center(c)), angle(A, G, center(c)) == angle(center(c), A, G) mod 360
By sas_anti_congruence on G, center(Circle(C, F, G)), F, F, center(Circle(C, F, G)), G we get anti_congruent_triangles(F, G, center(Circle(C, F, G)), G, F, center(Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(D, H), f, Line(H, center(c)) we get concurrent(f, Line(D, H), Line(H, center(c)))
By tangent_definition_from_perpendicularity_v0_r on F, Line(F, center(Circle(A, F, H))), Circle(C, F, G) we get tangent(Line(F, center(Circle(A, F, H))), Circle(C, F, G))
By concurrent_sufficient_conditions on Line(E, G), Line(G, center(Circle(C, F, G))), Line(F, G) we get concurrent(Line(E, G), Line(F, G), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(A, G), i, Line(G, center(Circle(C, F, G))) we get concurrent(i, Line(A, G), Line(G, center(Circle(C, F, G))))
By tangent_definition_from_perpendicularity_v0_r on F, Line(F, center(Circle(D, F, G))), Circle(C, F, G) we get tangent(Line(F, center(Circle(D, F, G))), Circle(C, F, G))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), Line(A, G), Line(E, G) we get concurrent(Line(A, G), Line(E, G), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(Circle(C, D, E))), Line(D, H) we get concurrent(Line(D, E), Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(Circle(C, D, E))), h we get concurrent(h, Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(G, H), Line(D, H) we get concurrent(Line(D, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(G, center(Circle(C, F, G))), i we get concurrent(i, Line(G, center(c)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on f, Line(E, F), Line(E, center(Circle(C, D, E))) we get concurrent(f, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(D, center(Circle(C, D, E))), Line(D, H) we get concurrent(h, Line(D, H), Line(D, center(Circle(C, D, E))))
By concyclic_sufficient_conditions_v1 on F, center(Circle(D, F, G)), G, center(Circle(C, F, G)) we get concyclic(F, G, center(Circle(C, F, G)), center(Circle(D, F, G)))
By concurrent_sufficient_conditions on g, Line(D, center(c)), Line(D, center(Circle(C, D, E))) we get concurrent(g, Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, F, G))), i, Line(A, G) we get concurrent(i, Line(A, G), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on f, Line(D, E), Line(E, G) we get concurrent(f, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(D, E), g, Line(D, center(Circle(C, D, E))) we get concurrent(g, Line(D, E), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(G, center(c)), Line(A, center(c)) we get concurrent(Line(A, center(c)), Line(D, center(c)), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(A, B), f we get concurrent(f, Line(A, B), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, F, G))), Line(F, G), radical_axis(c, Circle(C, F, G)) we get concurrent(Line(F, G), radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(E, G), Line(F, G), Line(G, center(Circle(C, F, G))) we get concurrent(Line(E, G), Line(F, G), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on i, Line(A, G), radical_axis(c, Circle(C, F, G)) we get concurrent(i, Line(A, G), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on h, Line(D, center(c)), g we get concurrent(g, h, Line(D, center(c)))
By concurrent_sufficient_conditions on Line(D, H), Line(H, center(c)), Line(G, H) we get concurrent(Line(D, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, E), g, Line(D, center(c)) we get concurrent(g, Line(D, E), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(A, F), Line(A, center(c)), g we get concurrent(g, Line(A, F), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(C, F), f, Line(C, center(Circle(C, D, E))) we get concurrent(f, Line(C, F), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(A, G), g we get concurrent(g, Line(A, G), Line(A, center(c)))
By concyclic_sufficient_conditions_v1 on H, G, F, E we get concyclic(E, F, G, H)
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(C, F), Line(F, H) we get concurrent(Line(C, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), h, Line(E, F) we get concurrent(h, Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, center(c)), h we get concurrent(h, Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(E, F), h we get concurrent(h, Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(E, center(Circle(C, D, E))), Line(E, F) we get concurrent(f, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(H, center(c)), Line(D, center(c)) we get concurrent(Line(A, center(c)), Line(D, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, F), Line(F, center(Circle(C, D, E))), Line(F, G) we get concurrent(Line(C, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, F), h, Line(F, center(Circle(C, D, E))) we get concurrent(h, Line(A, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, center(c)), radical_axis(c, Circle(C, D, E)) we get concurrent(Line(D, center(c)), radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, H), Line(D, center(c)), Line(D, E) we get concurrent(Line(D, E), Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(A, B), g we get concurrent(g, Line(A, B), Line(A, center(c)))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), Line(E, G), Line(G, center(c)) we get concurrent(Line(E, G), Line(G, center(c)), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(A, F), g we get concurrent(g, Line(A, F), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), Line(C, F), f we get concurrent(f, Line(C, F), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(D, center(Circle(C, D, E))), Line(D, E) we get concurrent(h, Line(D, E), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, F), Line(F, H), Line(F, center(Circle(C, D, E))) we get concurrent(Line(A, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), i, Line(G, H) we get concurrent(i, Line(E, G), Line(G, H))
By concurrent_sufficient_conditions on i, Line(F, G), Line(E, G) we get concurrent(i, Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on Line(A, B), Line(A, F), Line(A, center(c)) we get concurrent(Line(A, B), Line(A, F), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, G), Line(E, F) we get concurrent(Line(E, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, H), Line(D, E) we get concurrent(Line(D, E), Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, E), g we get concurrent(g, Line(D, E), Line(D, center(c)))
By concurrent_sufficient_conditions on g, Line(D, H), Line(D, center(Circle(C, D, E))) we get concurrent(g, Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, G), radical_axis(c, Circle(C, F, G)), i we get concurrent(i, Line(A, G), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(C, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))) we get concurrent(Line(C, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), Line(G, center(c)), Line(E, G) we get concurrent(Line(E, G), Line(G, center(c)), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, F, G))), Line(E, G), Line(F, G) we get concurrent(Line(E, G), Line(F, G), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, H), Line(E, F) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))), Line(D, center(c)) we get concurrent(Line(D, center(c)), radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), g, Line(D, center(Circle(C, D, E))) we get concurrent(g, Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(Circle(C, F, G))), Line(A, G) we get concurrent(Line(A, G), Line(F, G), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), Line(D, center(c)), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, center(c)), radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), f, Line(E, F) we get concurrent(f, Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(F, G), Line(A, G), Line(G, center(Circle(C, F, G))) we get concurrent(Line(A, G), Line(F, G), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(E, G), Line(G, center(Circle(C, F, G))), Line(G, center(c)) we get concurrent(Line(E, G), Line(G, center(c)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on i, radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))) we get concurrent(i, radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), Line(F, G), Line(G, H) we get concurrent(Line(F, G), Line(G, H), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(Circle(C, D, E))), h we get concurrent(h, Line(D, E), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, i, Line(C, center(Circle(C, F, G))) we get concurrent(f, i, Line(C, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(F, G), Line(A, G) we get concurrent(Line(A, G), Line(F, G), Line(G, center(c)))
By concurrent_sufficient_conditions on g, Line(D, center(c)), i we get concurrent(g, i, Line(D, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(D, E), Line(E, G) we get concurrent(Line(D, E), Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(D, center(Circle(C, D, E))), Line(D, center(c)) we get concurrent(h, Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, H), Line(D, center(Circle(C, D, E))), h we get concurrent(h, Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), f, Line(E, center(Circle(C, D, E))) we get concurrent(f, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(E, G), Line(F, G) we get concurrent(i, Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on h, Line(F, center(Circle(C, D, E))), Line(F, G) we get concurrent(h, Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(H, center(c)), Line(G, H) we get concurrent(f, Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(A, G), Line(E, G), Line(G, center(Circle(C, F, G))) we get concurrent(Line(A, G), Line(E, G), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, E), h we get concurrent(h, Line(D, E), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(B, C), Line(C, center(Circle(C, F, G))), f we get concurrent(f, Line(B, C), Line(C, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(D, H), Line(D, center(c)), g we get concurrent(g, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, center(c)), Line(D, E) we get concurrent(Line(D, E), Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(E, G), Line(E, F) we get concurrent(f, Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), Line(G, center(c)), Line(G, center(Circle(C, F, G))) we get concurrent(Line(G, center(c)), radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(D, center(c)), Line(A, center(c)) we get concurrent(Line(A, center(c)), Line(D, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, H), Line(D, center(Circle(C, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), i, Line(G, center(Circle(C, F, G))) we get concurrent(i, Line(E, G), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), Line(B, C), Line(C, center(Circle(C, F, G))) we get concurrent(Line(B, C), Line(C, center(Circle(C, D, E))), Line(C, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(D, E), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(c)), Line(E, G) we get concurrent(Line(E, G), Line(F, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(c)), Line(D, H) we get concurrent(Line(D, E), Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on h, Line(D, center(c)), i we get concurrent(h, i, Line(D, center(c)))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))), g we get concurrent(g, radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(A, F), Line(A, B) we get concurrent(Line(A, B), Line(A, F), Line(A, center(c)))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))), Line(G, center(c)) we get concurrent(Line(G, center(c)), radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(A, G), Line(G, center(Circle(C, F, G))), radical_axis(c, Circle(C, F, G)) we get concurrent(Line(A, G), radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(H, center(c)), f, Line(G, H) we get concurrent(f, Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on f, Line(E, center(Circle(C, D, E))), Line(D, E) we get concurrent(f, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), i, h we get concurrent(h, i, Line(D, center(c)))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, H), g we get concurrent(g, Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, G), Line(A, center(c)), g we get concurrent(g, Line(A, G), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(G, H), radical_axis(c, Circle(C, F, G)), i we get concurrent(i, Line(G, H), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on h, Line(F, center(Circle(C, D, E))), Line(C, F) we get concurrent(h, Line(C, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), Line(F, G), Line(G, center(c)) we get concurrent(Line(F, G), Line(G, center(c)), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(E, G), Line(F, G), i we get concurrent(i, Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, E), radical_axis(c, Circle(C, D, E)) we get concurrent(Line(D, E), radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(A, center(c)), Line(H, center(c)) we get concurrent(Line(A, center(c)), Line(D, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on f, Line(C, center(Circle(C, D, E))), Line(C, center(Circle(C, F, G))) we get concurrent(f, Line(C, center(Circle(C, D, E))), Line(C, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(Circle(C, D, E))), radical_axis(c, Circle(C, D, E)) we get concurrent(Line(D, E), radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, G), Line(D, E) we get concurrent(Line(D, E), Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(C, center(Circle(C, D, E))) we get concurrent(Line(C, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(C, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), h, Line(D, center(c)) we get concurrent(h, Line(D, center(c)), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on i, radical_axis(c, Circle(C, F, G)), Line(F, G) we get concurrent(i, Line(F, G), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(A, G), Line(G, center(c)), Line(F, G) we get concurrent(Line(A, G), Line(F, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), h, Line(D, E) we get concurrent(h, Line(D, E), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), i, Line(G, center(Circle(C, F, G))) we get concurrent(i, Line(F, G), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), Line(A, G), i we get concurrent(i, Line(A, G), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(D, H), Line(D, center(Circle(C, D, E))), g we get concurrent(g, Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), i, Line(A, G) we get concurrent(i, Line(A, G), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), h, Line(D, center(Circle(C, D, E))) we get concurrent(h, radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(G, center(c)), i we get concurrent(i, Line(E, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), radical_axis(c, Circle(C, D, E)), Line(D, center(c)) we get concurrent(Line(D, center(c)), radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), radical_axis(c, Circle(C, D, E)), Line(D, center(c)) we get concurrent(Line(D, E), Line(D, center(c)), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(A, F), Line(A, G), Line(A, center(c)) we get concurrent(Line(A, F), Line(A, G), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(E, G), radical_axis(c, Circle(C, F, G)), Line(F, G) we get concurrent(Line(E, G), Line(F, G), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), Line(D, center(c)), g we get concurrent(g, Line(D, center(c)), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on f, Line(E, center(Circle(C, D, E))), Line(E, G) we get concurrent(f, Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), radical_axis(c, Circle(C, F, G)), Line(G, H) we get concurrent(Line(E, G), Line(G, H), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(A, G), Line(G, center(Circle(C, F, G))), Line(G, center(c)) we get concurrent(Line(A, G), Line(G, center(c)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, E), Line(D, H) we get concurrent(Line(D, E), Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), Line(E, G), Line(G, H) we get concurrent(Line(E, G), Line(G, H), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(C, D, E))), Line(E, G) we get concurrent(Line(D, E), Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(C, center(Circle(C, F, G))), Line(C, center(Circle(C, D, E))) we get concurrent(f, Line(C, center(Circle(C, D, E))), Line(C, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(A, G), Line(A, F) we get concurrent(Line(A, F), Line(A, G), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, center(c)), Line(D, H) we get concurrent(Line(D, H), Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(D, H), Line(H, center(c)) we get concurrent(Line(D, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(A, G), i, Line(E, G) we get concurrent(i, Line(A, G), Line(E, G))
By concurrent_sufficient_conditions on Line(G, H), Line(H, center(c)), f we get concurrent(f, Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(A, F), f, Line(A, center(c)) we get concurrent(f, Line(A, F), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, H), i we get concurrent(i, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(G, center(Circle(C, F, G))), Line(F, G) we get concurrent(Line(F, G), Line(G, center(c)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(E, G), Line(E, center(Circle(C, D, E))), f we get concurrent(f, Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(G, H), Line(G, center(c)) we get concurrent(i, Line(G, H), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(F, G), Line(G, center(Circle(C, F, G))) we get concurrent(Line(F, G), Line(G, center(c)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(D, center(c)), i, Line(D, E) we get concurrent(i, Line(D, E), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(A, F), g, Line(A, center(c)) we get concurrent(g, Line(A, F), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(E, G), Line(G, center(c)), Line(G, H) we get concurrent(Line(E, G), Line(G, H), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(A, G), Line(G, H), Line(E, G) we get concurrent(Line(A, G), Line(E, G), Line(G, H))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(D, center(c)), Line(A, center(c)) we get concurrent(Line(A, center(c)), Line(D, center(c)), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(D, center(c)), i, Line(D, H) we get concurrent(i, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), Line(F, G), Line(E, G) we get concurrent(Line(E, G), Line(F, G), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on i, Line(F, G), Line(G, center(Circle(C, F, G))) we get concurrent(i, Line(F, G), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(E, G), Line(E, F), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(E, G), Line(E, F), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), h, Line(A, F) we get concurrent(h, Line(A, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, G), Line(G, center(c)), Line(E, G) we get concurrent(Line(A, G), Line(E, G), Line(G, center(c)))
By line_definition on C, center(Circle(C, F, G)), Line(C, F) we get Line(C, F) == Line(C, center(Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(G, center(c)), i, radical_axis(c, Circle(C, F, G)) we get concurrent(i, Line(G, center(c)), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(D, center(c)), h, Line(D, E) we get concurrent(h, Line(D, E), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), f, Line(B, C) we get concurrent(f, Line(B, C), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, G), Line(G, center(c)), radical_axis(c, Circle(C, F, G)) we get concurrent(Line(A, G), Line(G, center(c)), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(G, H), radical_axis(c, Circle(C, F, G)) we get concurrent(Line(G, H), Line(G, center(c)), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, F, G))), Line(G, center(c)), Line(F, G) we get concurrent(Line(F, G), Line(G, center(c)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(H, center(c)), Line(G, center(c)) we get concurrent(Line(D, center(c)), Line(G, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, G), Line(G, center(Circle(C, F, G))), Line(A, G) we get concurrent(Line(A, G), Line(E, G), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), g, Line(D, E) we get concurrent(g, Line(D, E), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(Circle(C, D, E))), g we get concurrent(g, Line(D, E), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(c)), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), i, g we get concurrent(g, i, Line(D, center(c)))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, F, G))), radical_axis(c, Circle(C, F, G)), i we get concurrent(i, radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), Line(A, G), Line(G, center(c)) we get concurrent(Line(A, G), Line(G, center(c)), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on i, Line(G, H), radical_axis(c, Circle(C, F, G)) we get concurrent(i, Line(G, H), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(E, F), Line(C, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(C, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(E, G), Line(A, G) we get concurrent(Line(A, G), Line(E, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, H), Line(D, E) we get concurrent(Line(D, E), Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(F, G), Line(E, G), Line(G, center(c)) we get concurrent(Line(E, G), Line(F, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(C, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))) we get concurrent(Line(C, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))) we get concurrent(g, radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))))
By line_definition on H, line_circle_tangent_point(Line(G, H), Circle(D, F, G)), Line(G, H) we get Line(G, H) == Line(H, line_circle_tangent_point(Line(G, H), Circle(D, F, G)))
By concurrent_sufficient_conditions on g, Line(D, center(Circle(C, D, E))), radical_axis(c, Circle(C, D, E)) we get concurrent(g, radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, F, G))), Line(E, G), radical_axis(c, Circle(C, F, G)) we get concurrent(Line(E, G), radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(F, G), h, Line(F, center(Circle(C, D, E))) we get concurrent(h, Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, g, Line(A, center(c)) we get concurrent(f, g, Line(A, center(c)))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, E), i we get concurrent(i, Line(D, E), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(E, G), Line(D, E), f we get concurrent(f, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(E, G), Line(G, H) we get concurrent(Line(E, G), Line(G, H), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(Circle(C, D, E))), Line(F, H) we get concurrent(Line(F, G), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, C), Line(C, center(Circle(C, F, G))), Line(C, center(Circle(C, D, E))) we get concurrent(Line(B, C), Line(C, center(Circle(C, D, E))), Line(C, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(G, H), Line(G, center(c)), Line(E, G) we get concurrent(Line(E, G), Line(G, H), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(E, G), Line(E, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(c)), Line(G, H) we get concurrent(Line(F, G), Line(G, H), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(A, F), Line(E, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(A, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, F), Line(F, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(C, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(A, F), Line(A, center(c)) we get concurrent(g, Line(A, F), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, F, G))), Line(B, C), f we get concurrent(f, Line(B, C), Line(C, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, F, G))), Line(A, G), Line(E, G) we get concurrent(Line(A, G), Line(E, G), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), g, Line(D, H) we get concurrent(g, Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))) we get concurrent(Line(E, G), radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(c)), i we get concurrent(i, Line(F, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(E, G), Line(G, center(c)), Line(A, G) we get concurrent(Line(A, G), Line(E, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(E, G), Line(A, G), Line(G, center(Circle(C, F, G))) we get concurrent(Line(A, G), Line(E, G), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(A, F), h we get concurrent(h, Line(A, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), Line(C, center(Circle(C, F, G))), f we get concurrent(f, Line(C, center(Circle(C, D, E))), Line(C, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(A, G), Line(A, center(c)), Line(A, F) we get concurrent(Line(A, F), Line(A, G), Line(A, center(c)))
By concurrent_sufficient_conditions on i, Line(D, center(c)), Line(D, H) we get concurrent(i, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(F, G), radical_axis(c, Circle(C, F, G)), Line(G, H) we get concurrent(Line(F, G), Line(G, H), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), f, Line(C, F) we get concurrent(f, Line(C, F), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, F), Line(F, G), Line(F, center(Circle(C, D, E))) we get concurrent(Line(C, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), i, Line(E, G) we get concurrent(i, Line(E, G), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(C, F), Line(F, H), Line(F, center(Circle(C, D, E))) we get concurrent(Line(C, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, F), Line(A, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(A, F), Line(C, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(Circle(C, D, E))), Line(A, F) we get concurrent(Line(A, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(A, F), Line(F, center(Circle(C, D, E))) we get concurrent(h, Line(A, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, H), Line(F, H), Line(H, center(c)) we get concurrent(Line(F, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, G), i, Line(F, G) we get concurrent(i, Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, F, G))), f, Line(B, C) we get concurrent(f, Line(B, C), Line(C, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), f, Line(D, E) we get concurrent(f, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, G), f we get concurrent(f, Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on f, Line(C, center(Circle(C, D, E))), Line(C, F) we get concurrent(f, Line(C, F), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(D, center(c)), Line(D, H) we get concurrent(g, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on i, radical_axis(c, Circle(C, F, G)), Line(A, G) we get concurrent(i, Line(A, G), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on i, Line(D, center(c)), h we get concurrent(h, i, Line(D, center(c)))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), i, Line(G, center(Circle(C, F, G))) we get concurrent(i, radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(D, H), Line(D, E), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, F), Line(F, center(Circle(C, D, E))), h we get concurrent(h, Line(A, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(A, G), i we get concurrent(i, Line(A, G), Line(E, G))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, F, G))), i, Line(B, C) we get concurrent(i, Line(B, C), Line(C, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(A, center(c)), Line(G, center(c)) we get concurrent(Line(A, center(c)), Line(D, center(c)), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(G, H), i we get concurrent(i, Line(G, H), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(D, center(c)), g, Line(D, E) we get concurrent(g, Line(D, E), Line(D, center(c)))
By concurrent_sufficient_conditions on g, Line(A, G), Line(A, center(c)) we get concurrent(g, Line(A, G), Line(A, center(c)))
By concurrent_sufficient_conditions on i, radical_axis(c, Circle(C, F, G)), Line(G, center(c)) we get concurrent(i, Line(G, center(c)), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))), Line(D, E) we get concurrent(Line(D, E), radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(G, H), Line(G, center(c)) we get concurrent(Line(E, G), Line(G, H), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(D, H), Line(D, center(Circle(C, D, E))), radical_axis(c, Circle(C, D, E)) we get concurrent(Line(D, H), radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), Line(E, G), Line(G, center(Circle(C, F, G))) we get concurrent(Line(E, G), radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(D, center(c)), g, h we get concurrent(g, h, Line(D, center(c)))
By concurrent_sufficient_conditions on Line(A, center(c)), f, Line(A, B) we get concurrent(f, Line(A, B), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(E, G), Line(F, G), radical_axis(c, Circle(C, F, G)) we get concurrent(Line(E, G), Line(F, G), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(E, G), Line(D, E), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(B, C), Line(C, center(Circle(C, F, G))) we get concurrent(i, Line(B, C), Line(C, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), f, Line(E, F) we get concurrent(f, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, F, G))), Line(A, G), Line(G, center(c)) we get concurrent(Line(A, G), Line(G, center(c)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(E, G), Line(G, H), i we get concurrent(i, Line(E, G), Line(G, H))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(A, F), f we get concurrent(f, Line(A, F), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(D, center(c)), i, radical_axis(c, Circle(C, D, E)) we get concurrent(i, Line(D, center(c)), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(G, H), Line(H, center(c)), Line(D, H) we get concurrent(Line(D, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(G, H), f, Line(H, center(c)) we get concurrent(f, Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(G, center(c)), radical_axis(c, Circle(C, F, G)), Line(A, G) we get concurrent(Line(A, G), Line(G, center(c)), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), Line(F, G), Line(A, G) we get concurrent(Line(A, G), Line(F, G), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(B, C), Line(C, F), Line(C, center(Circle(C, D, E))) we get concurrent(Line(B, C), Line(C, F), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(A, G), Line(G, center(Circle(C, F, G))) we get concurrent(i, Line(A, G), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(A, F), Line(F, G) we get concurrent(Line(A, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, B), Line(A, G), Line(A, center(c)) we get concurrent(Line(A, B), Line(A, G), Line(A, center(c)))
By concurrent_sufficient_conditions on h, radical_axis(c, Circle(C, D, E)), Line(D, center(c)) we get concurrent(h, Line(D, center(c)), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(G, center(Circle(C, F, G))), Line(E, G) we get concurrent(Line(E, G), Line(G, center(c)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on g, Line(D, center(Circle(C, D, E))), Line(D, E) we get concurrent(g, Line(D, E), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), h, Line(D, H) we get concurrent(h, Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(E, G), Line(G, center(c)) we get concurrent(i, Line(E, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(A, G), Line(E, G), i we get concurrent(i, Line(A, G), Line(E, G))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, center(c)), g we get concurrent(g, Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, H), radical_axis(c, Circle(C, F, G)), Line(G, center(c)) we get concurrent(Line(G, H), Line(G, center(c)), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), i, Line(F, G) we get concurrent(i, Line(F, G), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(Circle(C, F, G))), Line(G, center(c)) we get concurrent(Line(F, G), Line(G, center(c)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, G), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, G), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(Circle(C, F, G))), radical_axis(c, Circle(C, F, G)) we get concurrent(Line(F, G), radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(E, G), Line(G, center(c)), radical_axis(c, Circle(C, F, G)) we get concurrent(Line(E, G), Line(G, center(c)), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on i, radical_axis(c, Circle(C, F, G)), Line(E, G) we get concurrent(i, Line(E, G), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(G, H), Line(H, center(c)), Line(F, H) we get concurrent(Line(F, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on f, Line(C, center(Circle(C, F, G))), i we get concurrent(f, i, Line(C, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on f, Line(A, center(c)), g we get concurrent(f, g, Line(A, center(c)))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, center(Circle(C, D, E))), h we get concurrent(h, Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), h, radical_axis(c, Circle(C, D, E)) we get concurrent(h, radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, F, G))), f, Line(C, center(Circle(C, D, E))) we get concurrent(f, Line(C, center(Circle(C, D, E))), Line(C, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(c)), h we get concurrent(h, Line(D, E), Line(D, center(c)))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), Line(D, E), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, E), radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, H), Line(F, G), radical_axis(c, Circle(C, F, G)) we get concurrent(Line(F, G), Line(G, H), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, F, G))), Line(F, G), i we get concurrent(i, Line(F, G), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(A, G), Line(F, G) we get concurrent(Line(A, G), Line(F, G), Line(G, center(c)))
By concurrent_sufficient_conditions on g, Line(D, E), Line(D, center(c)) we get concurrent(g, Line(D, E), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(F, G), Line(E, G) we get concurrent(Line(E, G), Line(F, G), Line(G, center(c)))
By concurrent_sufficient_conditions on h, Line(D, E), Line(D, center(Circle(C, D, E))) we get concurrent(h, Line(D, E), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, B), Line(A, center(c)), Line(A, G) we get concurrent(Line(A, B), Line(A, G), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, H), Line(A, F) we get concurrent(Line(A, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(G, center(c)), Line(G, center(Circle(C, F, G))) we get concurrent(Line(E, G), Line(G, center(c)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(G, H), Line(E, G), Line(G, center(c)) we get concurrent(Line(E, G), Line(G, H), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(C, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(C, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, f, Line(C, center(Circle(C, F, G))) we get concurrent(f, i, Line(C, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(A, G), Line(E, G), radical_axis(c, Circle(C, F, G)) we get concurrent(Line(A, G), Line(E, G), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on i, Line(G, center(c)), radical_axis(c, Circle(C, F, G)) we get concurrent(i, Line(G, center(c)), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(A, F), Line(F, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(A, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, F), Line(F, center(Circle(C, D, E))), h we get concurrent(h, Line(C, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(Circle(C, D, E))), Line(D, center(c)) we get concurrent(Line(D, E), Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(c)), radical_axis(c, Circle(C, D, E)) we get concurrent(Line(D, E), Line(D, center(c)), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(G, center(c)), i, Line(E, G) we get concurrent(i, Line(E, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, F, G))), Line(B, C), i we get concurrent(i, Line(B, C), Line(C, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(A, G), radical_axis(c, Circle(C, F, G)), Line(E, G) we get concurrent(Line(A, G), Line(E, G), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(E, G), radical_axis(c, Circle(C, F, G)), i we get concurrent(i, Line(E, G), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, G), f we get concurrent(f, Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, i, Line(D, center(c)) we get concurrent(g, i, Line(D, center(c)))
By concurrent_sufficient_conditions on Line(G, H), Line(A, G), Line(G, center(c)) we get concurrent(Line(A, G), Line(G, H), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(E, G), f, Line(E, center(Circle(C, D, E))) we get concurrent(f, Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, H), Line(D, center(c)) we get concurrent(Line(D, E), Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(A, F), Line(A, B), Line(A, center(c)) we get concurrent(Line(A, B), Line(A, F), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(B, C), f, Line(C, center(Circle(C, D, E))) we get concurrent(f, Line(B, C), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, g, Line(D, center(Circle(C, D, E))) we get concurrent(g, h, Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(D, center(c)), Line(D, E) we get concurrent(h, Line(D, E), Line(D, center(c)))
By concurrent_sufficient_conditions on f, Line(C, F), Line(C, center(Circle(C, D, E))) we get concurrent(f, Line(C, F), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(D, H), Line(D, center(c)) we get concurrent(g, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on f, Line(F, H), Line(H, center(c)) we get concurrent(f, Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on h, Line(D, center(c)), Line(D, center(Circle(C, D, E))) we get concurrent(h, Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, F), Line(C, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(A, F), Line(C, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(D, E), Line(D, center(Circle(C, D, E))) we get concurrent(g, Line(D, E), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(D, center(Circle(C, D, E))), Line(D, H) we get concurrent(g, Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, C), Line(C, center(Circle(C, F, G))), i we get concurrent(i, Line(B, C), Line(C, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(A, G), i, Line(G, center(c)) we get concurrent(i, Line(A, G), Line(G, center(c)))
By concurrent_sufficient_conditions on h, radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))) we get concurrent(h, radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, F, G))), Line(A, G), Line(F, G) we get concurrent(Line(A, G), Line(F, G), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, H), Line(F, G), Line(G, center(c)) we get concurrent(Line(F, G), Line(G, H), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(F, G), Line(E, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(G, H), Line(H, center(c)) we get concurrent(Line(F, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, E), f, Line(E, G) we get concurrent(f, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(D, center(c)), h, Line(D, center(Circle(C, D, E))) we get concurrent(h, Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(A, center(c)), Line(D, center(c)) we get concurrent(Line(A, center(c)), Line(D, center(c)), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(H, center(c)), Line(D, H) we get concurrent(Line(D, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, F), Line(F, center(Circle(C, D, E))), Line(A, F) we get concurrent(Line(A, F), Line(C, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(E, F), Line(E, G) we get concurrent(f, Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(D, E), Line(E, G), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(A, F), Line(A, G) we get concurrent(Line(A, F), Line(A, G), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(D, H), Line(F, H) we get concurrent(Line(D, H), Line(F, H), Line(H, center(c)))
By perpendicular_line_definition on F, Line(F, center(Circle(D, F, G))), Line(C, F) we get perpendicular_line(F, Line(C, F)) == Line(F, center(Circle(D, F, G)))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(Circle(C, F, G))), Line(E, G) we get concurrent(Line(E, G), Line(F, G), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, H), radical_axis(c, Circle(C, D, E)) we get concurrent(Line(D, H), Line(D, center(c)), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), radical_axis(c, Circle(C, D, E)), Line(D, H) we get concurrent(Line(D, H), radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, G), f, Line(A, center(c)) we get concurrent(f, Line(A, G), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, E), h we get concurrent(h, Line(D, E), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(E, center(Circle(C, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, G), Line(A, center(c)), f we get concurrent(f, Line(A, G), Line(A, center(c)))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), Line(D, E), Line(D, center(c)) we get concurrent(Line(D, E), Line(D, center(c)), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, F), Line(E, G), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, H), Line(F, G) we get concurrent(Line(F, G), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(A, G), Line(G, H) we get concurrent(Line(A, G), Line(G, H), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(H, center(c)), Line(A, center(c)) we get concurrent(Line(A, center(c)), Line(D, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(C, D, E))), f we get concurrent(f, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(F, G), Line(G, H) we get concurrent(Line(E, G), Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(C, D, E))), h we get concurrent(h, Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(A, G), Line(G, center(c)) we get concurrent(Line(A, G), Line(E, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, F, G))), Line(F, G), Line(A, G) we get concurrent(Line(A, G), Line(F, G), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, F, G))), Line(F, G), Line(E, G) we get concurrent(Line(E, G), Line(F, G), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(H, center(c)), Line(G, center(c)) we get concurrent(Line(A, center(c)), Line(G, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(E, G), radical_axis(c, Circle(C, F, G)) we get concurrent(Line(E, G), Line(G, center(c)), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, F, G))), Line(B, C), Line(C, center(Circle(C, D, E))) we get concurrent(Line(B, C), Line(C, center(Circle(C, D, E))), Line(C, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, G), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(F, G), Line(G, H), radical_axis(c, Circle(C, F, G)) we get concurrent(Line(F, G), Line(G, H), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on f, Line(H, center(c)), Line(F, H) we get concurrent(f, Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, G), Line(G, center(Circle(C, F, G))), radical_axis(c, Circle(C, F, G)) we get concurrent(Line(E, G), radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on f, Line(A, F), Line(A, center(c)) we get concurrent(f, Line(A, F), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(F, H), f we get concurrent(f, Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), Line(D, center(c)), Line(D, H) we get concurrent(Line(D, H), Line(D, center(c)), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, H), h we get concurrent(h, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(A, G), f we get concurrent(f, Line(A, G), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(C, D, E))), Line(F, G) we get concurrent(Line(E, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, G), radical_axis(c, Circle(C, F, G)), Line(G, center(c)) we get concurrent(Line(A, G), Line(G, center(c)), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), Line(G, H), Line(G, center(c)) we get concurrent(Line(G, H), Line(G, center(c)), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(A, center(c)), f, g we get concurrent(f, g, Line(A, center(c)))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(c)), g we get concurrent(g, Line(D, E), Line(D, center(c)))
By concurrent_sufficient_conditions on i, Line(F, G), radical_axis(c, Circle(C, F, G)) we get concurrent(i, Line(F, G), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), i, Line(D, center(c)) we get concurrent(i, Line(D, center(c)), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on g, Line(D, center(c)), radical_axis(c, Circle(C, D, E)) we get concurrent(g, Line(D, center(c)), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on h, Line(D, E), Line(D, center(c)) we get concurrent(h, Line(D, E), Line(D, center(c)))
By concurrent_sufficient_conditions on h, Line(D, center(c)), radical_axis(c, Circle(C, D, E)) we get concurrent(h, Line(D, center(c)), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(E, F), Line(F, H) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), Line(E, G), Line(A, G) we get concurrent(Line(A, G), Line(E, G), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(A, center(c)), g, Line(A, G) we get concurrent(g, Line(A, G), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(G, H), Line(A, G), radical_axis(c, Circle(C, F, G)) we get concurrent(Line(A, G), Line(G, H), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, H), Line(D, center(c)) we get concurrent(Line(D, H), Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, center(c)), g, Line(A, B) we get concurrent(g, Line(A, B), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(F, G), Line(E, G), radical_axis(c, Circle(C, F, G)) we get concurrent(Line(E, G), Line(F, G), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on f, Line(D, H), Line(H, center(c)) we get concurrent(f, Line(D, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(A, G), radical_axis(c, Circle(C, F, G)), Line(G, H) we get concurrent(Line(A, G), Line(G, H), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on i, Line(D, E), Line(D, center(c)) we get concurrent(i, Line(D, E), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(C, F), Line(F, G) we get concurrent(Line(C, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(c)), i, Line(G, H) we get concurrent(i, Line(G, H), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(H, center(c)), Line(D, center(c)) we get concurrent(Line(D, center(c)), Line(G, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), g, Line(D, center(c)) we get concurrent(g, Line(D, center(c)), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, F, G))), i, Line(G, center(c)) we get concurrent(i, Line(G, center(c)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(C, D, E))), Line(A, F) we get concurrent(Line(A, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(E, G), Line(A, G) we get concurrent(i, Line(A, G), Line(E, G))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(C, D, E))), f we get concurrent(f, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, center(c)), f, Line(A, G) we get concurrent(f, Line(A, G), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(D, H), Line(D, center(c)), radical_axis(c, Circle(C, D, E)) we get concurrent(Line(D, H), Line(D, center(c)), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, center(c)), h, i we get concurrent(h, i, Line(D, center(c)))
By concurrent_sufficient_conditions on Line(A, F), Line(F, center(Circle(C, D, E))), Line(C, F) we get concurrent(Line(A, F), Line(C, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(c)), i we get concurrent(i, Line(D, E), Line(D, center(c)))
By concurrent_sufficient_conditions on i, Line(G, center(c)), Line(G, H) we get concurrent(i, Line(G, H), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, center(Circle(C, D, E))), Line(D, H) we get concurrent(Line(D, H), Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), Line(G, H), i we get concurrent(i, Line(G, H), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(G, H), Line(F, H) we get concurrent(Line(F, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(D, center(c)), Line(G, center(c)) we get concurrent(Line(A, center(c)), Line(D, center(c)), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, F, G))), radical_axis(c, Circle(C, F, G)), Line(A, G) we get concurrent(Line(A, G), radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(c)), radical_axis(c, Circle(C, F, G)) we get concurrent(Line(F, G), Line(G, center(c)), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), Line(B, C), f we get concurrent(f, Line(B, C), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), g, radical_axis(c, Circle(C, D, E)) we get concurrent(g, Line(D, center(c)), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, F), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(C, F), h we get concurrent(h, Line(C, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(G, center(Circle(C, F, G))), Line(G, center(c)) we get concurrent(i, Line(G, center(c)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(F, H), Line(G, H) we get concurrent(Line(F, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on h, Line(F, center(Circle(C, D, E))), Line(E, F) we get concurrent(h, Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), i, Line(G, H) we get concurrent(i, Line(G, H), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(C, F), Line(F, center(Circle(C, D, E))), Line(F, H) we get concurrent(Line(C, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), Line(A, G), Line(G, H) we get concurrent(Line(A, G), Line(G, H), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(G, center(c)), radical_axis(c, Circle(C, F, G)), Line(G, H) we get concurrent(Line(G, H), Line(G, center(c)), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), Line(C, center(Circle(C, F, G))), Line(B, C) we get concurrent(Line(B, C), Line(C, center(Circle(C, D, E))), Line(C, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(D, center(c)), radical_axis(c, Circle(C, D, E)), Line(D, E) we get concurrent(Line(D, E), Line(D, center(c)), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on i, Line(E, G), Line(G, H) we get concurrent(i, Line(E, G), Line(G, H))
By concurrent_sufficient_conditions on Line(A, F), Line(F, center(Circle(C, D, E))), Line(F, H) we get concurrent(Line(A, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(A, G), Line(G, center(c)) we get concurrent(i, Line(A, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(F, G), Line(E, G), i we get concurrent(i, Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(C, D, E))), Line(C, F) we get concurrent(Line(C, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(H, center(c)), Line(A, center(c)) we get concurrent(Line(A, center(c)), Line(G, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on f, Line(H, center(c)), Line(D, H) we get concurrent(f, Line(D, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(A, G), Line(F, G), Line(G, center(Circle(C, F, G))) we get concurrent(Line(A, G), Line(F, G), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(F, H), Line(H, center(c)), f we get concurrent(f, Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on g, Line(D, center(Circle(C, D, E))), Line(D, center(c)) we get concurrent(g, Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(F, G), Line(F, center(Circle(C, D, E))) we get concurrent(h, Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(B, C), Line(C, center(Circle(C, D, E))) we get concurrent(f, Line(B, C), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(F, G), Line(G, center(c)) we get concurrent(Line(E, G), Line(F, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, F), h, Line(F, center(Circle(C, D, E))) we get concurrent(h, Line(C, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, B), Line(A, center(c)), Line(A, F) we get concurrent(Line(A, B), Line(A, F), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(D, H), Line(H, center(c)), Line(F, H) we get concurrent(Line(D, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(B, C), Line(C, center(Circle(C, D, E))), Line(C, center(Circle(C, F, G))) we get concurrent(Line(B, C), Line(C, center(Circle(C, D, E))), Line(C, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))), Line(F, G) we get concurrent(Line(F, G), radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on i, Line(A, G), Line(E, G) we get concurrent(i, Line(A, G), Line(E, G))
By concurrent_sufficient_conditions on Line(F, H), Line(H, center(c)), Line(G, H) we get concurrent(Line(F, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, G), Line(G, H), radical_axis(c, Circle(C, F, G)) we get concurrent(Line(E, G), Line(G, H), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(C, D, E))), Line(E, G) we get concurrent(Line(E, F), Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(E, G), Line(E, center(Circle(C, D, E))) we get concurrent(f, Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, H), Line(D, center(Circle(C, D, E))), Line(D, center(c)) we get concurrent(Line(D, H), Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, g, Line(D, center(c)) we get concurrent(g, h, Line(D, center(c)))
By concurrent_sufficient_conditions on Line(G, H), radical_axis(c, Circle(C, F, G)), Line(A, G) we get concurrent(Line(A, G), Line(G, H), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, G), h we get concurrent(h, Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(G, center(c)), Line(F, G) we get concurrent(i, Line(F, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(G, center(c)), i, Line(F, G) we get concurrent(i, Line(F, G), Line(G, center(c)))
By concurrent_sufficient_conditions on g, Line(A, center(c)), Line(A, F) we get concurrent(g, Line(A, F), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(A, F), Line(A, center(c)), Line(A, B) we get concurrent(Line(A, B), Line(A, F), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(E, G), radical_axis(c, Circle(C, F, G)), Line(G, center(c)) we get concurrent(Line(E, G), Line(G, center(c)), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, F, G))), Line(G, center(c)), Line(E, G) we get concurrent(Line(E, G), Line(G, center(c)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, F, G))), radical_axis(c, Circle(C, F, G)), Line(E, G) we get concurrent(Line(E, G), radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(G, center(c)), Line(D, center(c)) we get concurrent(Line(A, center(c)), Line(D, center(c)), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(G, H), Line(E, G), Line(F, G) we get concurrent(Line(E, G), Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(A, center(c)), f, Line(A, F) we get concurrent(f, Line(A, F), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(D, center(c)), h, g we get concurrent(g, h, Line(D, center(c)))
By concurrent_sufficient_conditions on g, Line(D, center(c)), h we get concurrent(g, h, Line(D, center(c)))
By concurrent_sufficient_conditions on Line(A, G), Line(G, H), radical_axis(c, Circle(C, F, G)) we get concurrent(Line(A, G), Line(G, H), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on g, h, Line(D, center(c)) we get concurrent(g, h, Line(D, center(c)))
By concurrent_sufficient_conditions on f, Line(C, center(Circle(C, D, E))), Line(B, C) we get concurrent(f, Line(B, C), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(G, center(Circle(C, F, G))), Line(A, G) we get concurrent(Line(A, G), Line(G, center(c)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), Line(G, center(c)), Line(G, H) we get concurrent(Line(G, H), Line(G, center(c)), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(G, center(Circle(C, F, G))), radical_axis(c, Circle(C, F, G)) we get concurrent(Line(G, center(c)), radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(D, center(c)), g, i we get concurrent(g, i, Line(D, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(C, D, E))), h we get concurrent(h, Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(G, center(c)), Line(H, center(c)) we get concurrent(Line(A, center(c)), Line(G, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, center(c)), radical_axis(c, Circle(C, D, E)), g we get concurrent(g, Line(D, center(c)), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, G), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), h, Line(C, F) we get concurrent(h, Line(C, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(G, H), Line(E, G) we get concurrent(Line(E, G), Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(A, B), Line(A, G) we get concurrent(Line(A, B), Line(A, G), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, F, G))), i, Line(E, G) we get concurrent(i, Line(E, G), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(G, H), Line(F, G) we get concurrent(Line(F, G), Line(G, H), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(D, E), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), Line(G, center(c)), Line(A, G) we get concurrent(Line(A, G), Line(G, center(c)), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(F, G), radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))) we get concurrent(Line(F, G), radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(D, H), h, Line(D, center(c)) we get concurrent(h, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(F, G), Line(A, G), radical_axis(c, Circle(C, F, G)) we get concurrent(Line(A, G), Line(F, G), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), Line(D, H), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, H), radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, H), radical_axis(c, Circle(C, D, E)) we get concurrent(Line(D, H), radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(E, F), Line(F, G) we get concurrent(Line(E, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, H), Line(G, center(c)), radical_axis(c, Circle(C, F, G)) we get concurrent(Line(G, H), Line(G, center(c)), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, F, G))), Line(G, center(c)), radical_axis(c, Circle(C, F, G)) we get concurrent(Line(G, center(c)), radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(F, H), h, Line(F, center(Circle(C, D, E))) we get concurrent(h, Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, H), radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, H), radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, H), Line(D, center(c)), i we get concurrent(i, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on i, Line(G, center(c)), Line(G, center(Circle(C, F, G))) we get concurrent(i, Line(G, center(c)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(F, G), Line(E, G), Line(G, center(Circle(C, F, G))) we get concurrent(Line(E, G), Line(F, G), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), Line(G, H), Line(E, G) we get concurrent(Line(E, G), Line(G, H), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on g, h, Line(D, center(Circle(C, D, E))) we get concurrent(g, h, Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(D, center(c)), Line(D, H) we get concurrent(h, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(E, G), i, Line(G, center(c)) we get concurrent(i, Line(E, G), Line(G, center(c)))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), Line(G, H), Line(F, G) we get concurrent(Line(F, G), Line(G, H), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(E, G), i, radical_axis(c, Circle(C, F, G)) we get concurrent(i, Line(E, G), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on h, Line(D, center(Circle(C, D, E))), radical_axis(c, Circle(C, D, E)) we get concurrent(h, radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, center(Circle(C, D, E))), g we get concurrent(g, Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, B), Line(A, center(c)), f we get concurrent(f, Line(A, B), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(G, H), Line(A, G), Line(E, G) we get concurrent(Line(A, G), Line(E, G), Line(G, H))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), Line(A, G), Line(F, G) we get concurrent(Line(A, G), Line(F, G), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on i, Line(G, center(Circle(C, F, G))), Line(E, G) we get concurrent(i, Line(E, G), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), g, Line(D, center(Circle(C, D, E))) we get concurrent(g, radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(F, H), Line(F, center(Circle(C, D, E))) we get concurrent(h, Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, F, G))), Line(G, center(c)), i we get concurrent(i, Line(G, center(c)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, H), Line(D, center(c)), h we get concurrent(h, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on i, Line(G, center(Circle(C, F, G))), Line(A, G) we get concurrent(i, Line(A, G), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on i, Line(D, center(c)), radical_axis(c, Circle(C, D, E)) we get concurrent(i, Line(D, center(c)), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, G), radical_axis(c, Circle(C, F, G)), Line(G, center(c)) we get concurrent(Line(F, G), Line(G, center(c)), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))), Line(A, G) we get concurrent(Line(A, G), radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(C, F), Line(E, F) we get concurrent(Line(C, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, G), Line(E, F) we get concurrent(Line(E, F), Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, E), g we get concurrent(g, Line(D, E), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, B), g, Line(A, center(c)) we get concurrent(g, Line(A, B), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(G, H), Line(G, center(c)), Line(A, G) we get concurrent(Line(A, G), Line(G, H), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(E, G), Line(A, G), Line(F, G) we get concurrent(Line(A, G), Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), h, Line(F, G) we get concurrent(h, Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(G, H), Line(A, G) we get concurrent(Line(A, G), Line(G, H), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(A, G), Line(A, center(c)), Line(A, B) we get concurrent(Line(A, B), Line(A, G), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, F), f we get concurrent(f, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(G, center(c)), Line(A, G) we get concurrent(i, Line(A, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), Line(E, G) we get concurrent(Line(D, E), Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(B, C), i, Line(C, center(Circle(C, F, G))) we get concurrent(i, Line(B, C), Line(C, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), Line(C, F), Line(B, C) we get concurrent(Line(B, C), Line(C, F), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), radical_axis(c, Circle(C, D, E)), Line(D, H) we get concurrent(Line(D, H), Line(D, center(c)), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(G, H), Line(D, H), Line(H, center(c)) we get concurrent(Line(D, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(G, H), i, Line(G, center(c)) we get concurrent(i, Line(G, H), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, G), Line(C, F) we get concurrent(Line(C, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, F, G))), Line(A, G), i we get concurrent(i, Line(A, G), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on h, i, Line(D, center(c)) we get concurrent(h, i, Line(D, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(A, F), Line(C, F) we get concurrent(Line(A, F), Line(C, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(C, D, E))), Line(A, F) we get concurrent(Line(A, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, G), Line(G, center(Circle(C, F, G))), Line(E, G) we get concurrent(Line(A, G), Line(E, G), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, F, G))), i, Line(F, G) we get concurrent(i, Line(F, G), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(G, H), Line(F, G), Line(E, G) we get concurrent(Line(E, G), Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on h, Line(D, H), Line(D, center(c)) we get concurrent(h, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on i, Line(E, G), radical_axis(c, Circle(C, F, G)) we get concurrent(i, Line(E, G), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), f, Line(H, center(c)) we get concurrent(f, Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(D, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(A, B), Line(A, F) we get concurrent(Line(A, B), Line(A, F), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(A, G), Line(F, G), radical_axis(c, Circle(C, F, G)) we get concurrent(Line(A, G), Line(F, G), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(D, E), radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, E), radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(c)), radical_axis(c, Circle(C, F, G)), Line(E, G) we get concurrent(Line(E, G), Line(G, center(c)), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, H), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(C, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(C, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(D, H), f we get concurrent(f, Line(D, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, center(Circle(C, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(D, center(Circle(C, D, E))), h we get concurrent(g, h, Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, G), i, radical_axis(c, Circle(C, F, G)) we get concurrent(i, Line(A, G), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(C, F), Line(B, C), Line(C, center(Circle(C, D, E))) we get concurrent(Line(B, C), Line(C, F), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(A, G), Line(E, G) we get concurrent(Line(A, G), Line(E, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(F, G), Line(E, G), Line(G, H) we get concurrent(Line(E, G), Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(C, F), Line(C, center(Circle(C, D, E))), Line(B, C) we get concurrent(Line(B, C), Line(C, F), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, F), Line(C, center(Circle(C, D, E))), f we get concurrent(f, Line(C, F), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), Line(E, G), i we get concurrent(i, Line(E, G), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on i, radical_axis(c, Circle(C, D, E)), Line(D, center(c)) we get concurrent(i, Line(D, center(c)), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))), Line(D, H) we get concurrent(Line(D, H), radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(A, center(c)), f we get concurrent(f, g, Line(A, center(c)))
By concurrent_sufficient_conditions on Line(E, G), Line(A, G), radical_axis(c, Circle(C, F, G)) we get concurrent(Line(A, G), Line(E, G), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, F, G))), Line(A, G), radical_axis(c, Circle(C, F, G)) we get concurrent(Line(A, G), radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(D, center(c)), radical_axis(c, Circle(C, D, E)), h we get concurrent(h, Line(D, center(c)), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, E), Line(D, H), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), Line(F, G), Line(A, G) we get concurrent(Line(A, G), Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on Line(F, G), radical_axis(c, Circle(C, F, G)), Line(E, G) we get concurrent(Line(E, G), Line(F, G), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(A, G), Line(E, G), Line(G, center(c)) we get concurrent(Line(A, G), Line(E, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, H), h we get concurrent(h, Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, G), Line(F, G), Line(E, G) we get concurrent(Line(A, G), Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on Line(D, H), Line(F, H), Line(H, center(c)) we get concurrent(Line(D, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), radical_axis(c, Circle(C, D, E)), Line(D, E) we get concurrent(Line(D, E), radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(D, center(Circle(C, D, E))), g we get concurrent(g, h, Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(G, center(c)), Line(E, G) we get concurrent(i, Line(E, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(c)), Line(A, G) we get concurrent(Line(A, G), Line(F, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(F, G), i, Line(E, G) we get concurrent(i, Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on Line(A, F), Line(A, center(c)), f we get concurrent(f, Line(A, F), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(E, G), Line(G, H), Line(A, G) we get concurrent(Line(A, G), Line(E, G), Line(G, H))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), g, Line(D, center(c)) we get concurrent(g, Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, H), Line(D, E), Line(D, center(c)) we get concurrent(Line(D, E), Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on f, Line(A, G), Line(A, center(c)) we get concurrent(f, Line(A, G), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(E, F), Line(C, F) we get concurrent(Line(C, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(A, center(c)), Line(A, G) we get concurrent(f, Line(A, G), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(E, G), Line(A, G), Line(G, H) we get concurrent(Line(A, G), Line(E, G), Line(G, H))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(G, center(c)), Line(A, center(c)) we get concurrent(Line(A, center(c)), Line(G, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on h, Line(D, H), Line(D, center(Circle(C, D, E))) we get concurrent(h, Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, g, Line(D, center(c)) we get concurrent(g, i, Line(D, center(c)))
By concurrent_sufficient_conditions on Line(D, E), h, Line(D, center(Circle(C, D, E))) we get concurrent(h, Line(D, E), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), g, h we get concurrent(g, h, Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(F, G), i we get concurrent(i, Line(F, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(A, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(A, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(D, center(c)), Line(D, E) we get concurrent(g, Line(D, E), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(D, center(c)), h, Line(D, H) we get concurrent(h, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(F, G), Line(A, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(A, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, H), radical_axis(c, Circle(C, F, G)), Line(E, G) we get concurrent(Line(E, G), Line(G, H), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on g, Line(A, center(c)), Line(A, G) we get concurrent(g, Line(A, G), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(D, center(c)), g, Line(D, H) we get concurrent(g, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(D, center(c)), Line(H, center(c)) we get concurrent(Line(D, center(c)), Line(G, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(C, D, E))), Line(F, H) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(F, G), Line(G, center(c)) we get concurrent(i, Line(F, G), Line(G, center(c)))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))), i we get concurrent(i, radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(G, center(c)), Line(H, center(c)) we get concurrent(Line(D, center(c)), Line(G, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(G, H), f we get concurrent(f, Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, E), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, G), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(G, center(c)), radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))) we get concurrent(Line(G, center(c)), radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(F, H), Line(E, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(A, center(c)), Line(A, F) we get concurrent(f, Line(A, F), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(G, H), i, radical_axis(c, Circle(C, F, G)) we get concurrent(i, Line(G, H), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, center(Circle(C, D, E))), radical_axis(c, Circle(C, D, E)) we get concurrent(Line(D, center(c)), radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), i, Line(G, center(c)) we get concurrent(i, Line(G, center(c)), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(D, H), h, Line(D, center(Circle(C, D, E))) we get concurrent(h, Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(F, center(Circle(C, D, E))), Line(A, F) we get concurrent(h, Line(A, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(D, center(c)), Line(G, center(c)) we get concurrent(Line(D, center(c)), Line(G, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, H), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, H), Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), radical_axis(c, Circle(C, F, G)), i we get concurrent(i, Line(F, G), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(A, center(c)), g, f we get concurrent(f, g, Line(A, center(c)))
By concurrent_sufficient_conditions on Line(D, center(c)), radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, center(c)), radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), radical_axis(c, Circle(C, D, E)), g we get concurrent(g, radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(A, G), Line(A, B) we get concurrent(Line(A, B), Line(A, G), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(A, G), Line(G, center(c)), i we get concurrent(i, Line(A, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(D, center(c)), radical_axis(c, Circle(C, D, E)), i we get concurrent(i, Line(D, center(c)), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(A, center(c)), Line(D, center(c)) we get concurrent(Line(A, center(c)), Line(D, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), Line(A, G), Line(G, center(Circle(C, F, G))) we get concurrent(Line(A, G), radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(G, center(c)), Line(D, center(c)) we get concurrent(Line(D, center(c)), Line(G, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, G), i, radical_axis(c, Circle(C, F, G)) we get concurrent(i, Line(F, G), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(B, C), f, Line(C, center(Circle(C, F, G))) we get concurrent(f, Line(B, C), Line(C, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, F, G))), f, i we get concurrent(f, i, Line(C, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(F, G), Line(E, G), Line(A, G) we get concurrent(Line(A, G), Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), Line(E, G) we get concurrent(Line(D, E), Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))), h we get concurrent(h, radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, G), Line(G, center(Circle(C, F, G))), Line(F, G) we get concurrent(Line(A, G), Line(F, G), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(A, F), Line(F, center(Circle(C, D, E))), Line(F, G) we get concurrent(Line(A, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, B), f, Line(A, center(c)) we get concurrent(f, Line(A, B), Line(A, center(c)))
By concurrent_sufficient_conditions on i, Line(C, center(Circle(C, F, G))), Line(B, C) we get concurrent(i, Line(B, C), Line(C, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(F, G), i, Line(G, center(c)) we get concurrent(i, Line(F, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, F, G))), i, radical_axis(c, Circle(C, F, G)) we get concurrent(i, radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(D, H), i, Line(D, center(c)) we get concurrent(i, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, F, G))), Line(F, G), Line(G, center(c)) we get concurrent(Line(F, G), Line(G, center(c)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, F), Line(E, G) we get concurrent(Line(E, F), Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), Line(B, C), Line(C, F) we get concurrent(Line(B, C), Line(C, F), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), Line(D, H), Line(D, center(c)) we get concurrent(Line(D, H), Line(D, center(c)), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(E, G), Line(G, center(Circle(C, F, G))) we get concurrent(Line(E, G), Line(G, center(c)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on i, Line(G, H), Line(E, G) we get concurrent(i, Line(E, G), Line(G, H))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(A, F), Line(E, F) we get concurrent(Line(A, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(G, H), Line(E, G) we get concurrent(Line(E, G), Line(G, H), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(A, G), Line(G, center(c)), Line(G, center(Circle(C, F, G))) we get concurrent(Line(A, G), Line(G, center(c)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), f, Line(C, center(Circle(C, F, G))) we get concurrent(f, Line(C, center(Circle(C, D, E))), Line(C, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(H, center(c)), f, Line(D, H) we get concurrent(f, Line(D, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), f, Line(F, H) we get concurrent(f, Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, center(c)), h, radical_axis(c, Circle(C, D, E)) we get concurrent(h, Line(D, center(c)), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(Circle(C, F, G))), i we get concurrent(i, Line(F, G), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(A, F), Line(F, G), Line(F, center(Circle(C, D, E))) we get concurrent(Line(A, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, E), Line(D, H) we get concurrent(Line(D, E), Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, F, G))), Line(C, center(Circle(C, D, E))), Line(B, C) we get concurrent(Line(B, C), Line(C, center(Circle(C, D, E))), Line(C, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(E, G), i we get concurrent(i, Line(E, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(D, E), f, Line(E, center(Circle(C, D, E))) we get concurrent(f, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(E, F), Line(F, center(Circle(C, D, E))) we get concurrent(h, Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, radical_axis(c, Circle(C, F, G)), Line(G, H) we get concurrent(i, Line(G, H), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), f, Line(E, G) we get concurrent(f, Line(E, G), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, G), radical_axis(c, Circle(C, F, G)), Line(A, G) we get concurrent(Line(A, G), Line(E, G), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(E, G), Line(G, center(c)), Line(F, G) we get concurrent(Line(E, G), Line(F, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, F, G))), Line(E, G), Line(A, G) we get concurrent(Line(A, G), Line(E, G), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), g, radical_axis(c, Circle(C, D, E)) we get concurrent(g, radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(C, center(Circle(C, F, G))), f we get concurrent(f, i, Line(C, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(A, G), Line(G, center(c)), Line(G, H) we get concurrent(Line(A, G), Line(G, H), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(F, G), radical_axis(c, Circle(C, F, G)) we get concurrent(Line(F, G), Line(G, center(c)), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(G, center(c)), i, Line(A, G) we get concurrent(i, Line(A, G), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(E, G), Line(F, G) we get concurrent(Line(E, G), Line(F, G), Line(G, center(c)))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), Line(F, G), Line(G, center(Circle(C, F, G))) we get concurrent(Line(F, G), radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))) we get concurrent(Line(C, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(C, F), Line(A, F) we get concurrent(Line(A, F), Line(C, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), h, Line(F, H) we get concurrent(h, Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, F, G))), Line(E, G), Line(G, center(c)) we get concurrent(Line(E, G), Line(G, center(c)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on i, Line(G, center(Circle(C, F, G))), radical_axis(c, Circle(C, F, G)) we get concurrent(i, radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(A, G), Line(G, H), Line(G, center(c)) we get concurrent(Line(A, G), Line(G, H), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(D, H), Line(G, H), Line(H, center(c)) we get concurrent(Line(D, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(A, G), i we get concurrent(i, Line(A, G), Line(G, center(c)))
By concurrent_sufficient_conditions on i, Line(D, center(c)), Line(D, E) we get concurrent(i, Line(D, E), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(F, G), Line(F, H), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, G), Line(F, H), Line(F, center(Circle(C, D, E))))
By perpendicular_line_definition on F, Line(F, center(Circle(A, F, H))), Line(C, F) we get perpendicular_line(F, Line(C, F)) == Line(F, center(Circle(A, F, H)))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), Line(E, G), Line(F, G) we get concurrent(Line(E, G), Line(F, G), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(A, F), Line(A, center(c)), Line(A, G) we get concurrent(Line(A, F), Line(A, G), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(G, H), Line(E, G), radical_axis(c, Circle(C, F, G)) we get concurrent(Line(E, G), Line(G, H), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(E, G), i, Line(A, G) we get concurrent(i, Line(A, G), Line(E, G))
By concurrent_sufficient_conditions on i, Line(D, H), Line(D, center(c)) we get concurrent(i, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(F, G), Line(G, H), Line(G, center(c)) we get concurrent(Line(F, G), Line(G, H), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(E, G), f, Line(D, E) we get concurrent(f, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), h, g we get concurrent(g, h, Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), i, Line(D, center(c)) we get concurrent(i, Line(D, E), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(D, H), Line(D, center(c)), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, H), Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, H), Line(G, center(c)), i we get concurrent(i, Line(G, H), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, H), Line(C, F) we get concurrent(Line(C, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, H), Line(E, G), i we get concurrent(i, Line(E, G), Line(G, H))
By concurrent_sufficient_conditions on Line(G, H), i, Line(E, G) we get concurrent(i, Line(E, G), Line(G, H))
By concurrent_sufficient_conditions on Line(F, G), Line(A, G), Line(G, center(c)) we get concurrent(Line(A, G), Line(F, G), Line(G, center(c)))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))), Line(E, G) we get concurrent(Line(E, G), radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on g, Line(A, center(c)), Line(A, B) we get concurrent(g, Line(A, B), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(A, center(c)), g, Line(A, F) we get concurrent(g, Line(A, F), Line(A, center(c)))
By concurrent_sufficient_conditions on f, Line(B, C), Line(C, center(Circle(C, F, G))) we get concurrent(f, Line(B, C), Line(C, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(A, G), Line(G, center(Circle(C, F, G))) we get concurrent(Line(A, G), Line(G, center(c)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(E, G), Line(G, center(Circle(C, F, G))), i we get concurrent(i, Line(E, G), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(G, center(c)), radical_axis(c, Circle(C, F, G)), Line(F, G) we get concurrent(Line(F, G), Line(G, center(c)), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(C, F), Line(E, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(C, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, E), Line(D, center(c)) we get concurrent(Line(D, E), Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(A, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(A, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, F, G))), Line(C, center(Circle(C, D, E))), f we get concurrent(f, Line(C, center(Circle(C, D, E))), Line(C, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), Line(F, G), i we get concurrent(i, Line(F, G), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, F, G))), Line(G, center(c)), Line(A, G) we get concurrent(Line(A, G), Line(G, center(c)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(G, center(c)), i, Line(G, center(Circle(C, F, G))) we get concurrent(i, Line(G, center(c)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, F, G))), radical_axis(c, Circle(C, F, G)), Line(F, G) we get concurrent(Line(F, G), radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(E, F), h, Line(F, center(Circle(C, D, E))) we get concurrent(h, Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(E, F), Line(A, F) we get concurrent(Line(A, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), h, Line(D, center(c)) we get concurrent(h, Line(D, E), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))) we get concurrent(Line(C, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(D, center(c)), Line(H, center(c)) we get concurrent(Line(A, center(c)), Line(D, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(D, H), Line(G, H) we get concurrent(Line(D, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, G), Line(G, H), Line(F, G) we get concurrent(Line(E, G), Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(A, center(c)), Line(G, center(c)) we get concurrent(Line(A, center(c)), Line(G, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on i, Line(E, G), Line(G, center(Circle(C, F, G))) we get concurrent(i, Line(E, G), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on f, Line(D, E), Line(E, center(Circle(C, D, E))) we get concurrent(f, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), Line(D, center(c)), i we get concurrent(i, Line(D, center(c)), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(A, G), radical_axis(c, Circle(C, F, G)) we get concurrent(Line(A, G), Line(G, center(c)), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, G), Line(A, F) we get concurrent(Line(A, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(D, E), f we get concurrent(f, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), Line(G, center(c)), i we get concurrent(i, Line(G, center(c)), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(A, F), Line(F, H) we get concurrent(Line(A, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, H), g we get concurrent(g, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(A, G), Line(E, G), Line(F, G) we get concurrent(Line(A, G), Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on Line(B, C), Line(C, center(Circle(C, D, E))), Line(C, F) we get concurrent(Line(B, C), Line(C, F), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, h, Line(D, center(c)) we get concurrent(h, i, Line(D, center(c)))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, H), h we get concurrent(h, Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), f, Line(E, G) we get concurrent(f, Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on f, Line(A, B), Line(A, center(c)) we get concurrent(f, Line(A, B), Line(A, center(c)))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), Line(G, center(c)), Line(F, G) we get concurrent(Line(F, G), Line(G, center(c)), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on i, Line(G, center(Circle(C, F, G))), Line(F, G) we get concurrent(i, Line(F, G), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(D, H), g, Line(D, center(Circle(C, D, E))) we get concurrent(g, Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), radical_axis(c, Circle(C, F, G)), Line(A, G) we get concurrent(Line(A, G), Line(F, G), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(D, E), Line(E, G), f we get concurrent(f, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, F, G)), Line(G, H), Line(A, G) we get concurrent(Line(A, G), Line(G, H), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, E), radical_axis(c, Circle(C, D, E)) we get concurrent(Line(D, E), Line(D, center(c)), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, H), g, Line(D, center(c)) we get concurrent(g, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(E, G), Line(E, F), f we get concurrent(f, Line(E, F), Line(E, G))
By concurrent_sufficient_conditions on Line(A, G), radical_axis(c, Circle(C, F, G)), Line(F, G) we get concurrent(Line(A, G), Line(F, G), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), h, Line(D, center(c)) we get concurrent(h, Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, H), Line(G, center(c)), Line(F, G) we get concurrent(Line(F, G), Line(G, H), Line(G, center(c)))
By concurrent_sufficient_conditions on h, Line(F, center(Circle(C, D, E))), Line(F, H) we get concurrent(h, Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(C, D, E))), Line(C, F) we get concurrent(Line(C, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, F, G))), radical_axis(c, Circle(C, F, G)), Line(G, center(c)) we get concurrent(Line(G, center(c)), radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(G, H), radical_axis(c, Circle(C, F, G)), Line(F, G) we get concurrent(Line(F, G), Line(G, H), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on f, Line(E, G), Line(D, E) we get concurrent(f, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(A, G), Line(A, F), Line(A, center(c)) we get concurrent(Line(A, F), Line(A, G), Line(A, center(c)))
By concurrent_sufficient_conditions on f, Line(C, center(Circle(C, F, G))), Line(B, C) we get concurrent(f, Line(B, C), Line(C, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(A, G), Line(F, G), Line(G, center(c)) we get concurrent(Line(A, G), Line(F, G), Line(G, center(c)))
By concurrent_sufficient_conditions on g, f, Line(A, center(c)) we get concurrent(f, g, Line(A, center(c)))
By concurrent_sufficient_conditions on Line(F, G), Line(A, G), Line(E, G) we get concurrent(Line(A, G), Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on f, Line(A, center(c)), Line(A, B) we get concurrent(f, Line(A, B), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), radical_axis(c, Circle(C, D, E)), h we get concurrent(h, radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), Line(D, center(c)), Line(D, E) we get concurrent(Line(D, E), Line(D, center(c)), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(F, H), Line(D, H) we get concurrent(Line(D, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on g, Line(A, B), Line(A, center(c)) we get concurrent(g, Line(A, B), Line(A, center(c)))
By concurrent_sufficient_conditions on g, radical_axis(c, Circle(C, D, E)), Line(D, center(c)) we get concurrent(g, Line(D, center(c)), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(A, G), Line(G, center(Circle(C, F, G))), i we get concurrent(i, Line(A, G), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(Circle(C, D, E))), Line(C, F) we get concurrent(Line(C, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, B), Line(A, center(c)), g we get concurrent(g, Line(A, B), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))), Line(C, center(Circle(C, D, E))) we get concurrent(Line(C, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, G), g, Line(A, center(c)) we get concurrent(g, Line(A, G), Line(A, center(c)))
By concurrent_sufficient_conditions on radical_axis(c, Circle(C, D, E)), Line(D, center(c)), h we get concurrent(h, Line(D, center(c)), radical_axis(c, Circle(C, D, E)))
By concurrent_sufficient_conditions on h, Line(C, F), Line(F, center(Circle(C, D, E))) we get concurrent(h, Line(C, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, G), radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))) we get concurrent(Line(A, G), radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(G, center(c)), radical_axis(c, Circle(C, F, G)), i we get concurrent(i, Line(G, center(c)), radical_axis(c, Circle(C, F, G)))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(A, center(c)), Line(H, center(c)) we get concurrent(Line(A, center(c)), Line(G, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, H), Line(H, center(c)), f we get concurrent(f, Line(D, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, G), Line(F, H) we get concurrent(Line(F, G), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(D, center(c)), g we get concurrent(g, i, Line(D, center(c)))
By concurrent_sufficient_conditions on Line(A, G), Line(E, G), Line(G, H) we get concurrent(Line(A, G), Line(E, G), Line(G, H))
By concurrent_sufficient_conditions on Line(A, G), Line(A, B), Line(A, center(c)) we get concurrent(Line(A, B), Line(A, G), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(B, C), Line(C, center(Circle(C, D, E))), f we get concurrent(f, Line(B, C), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(c)), Line(G, center(Circle(C, F, G))) we get concurrent(Line(F, G), Line(G, center(c)), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on f, Line(G, H), Line(H, center(c)) we get concurrent(f, Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(C, D, E))), Line(F, G) we get concurrent(Line(F, G), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(c)), Line(F, G), Line(G, H) we get concurrent(Line(F, G), Line(G, H), Line(G, center(c)))
By concurrent_sufficient_conditions on Line(G, H), Line(E, G), Line(A, G) we get concurrent(Line(A, G), Line(E, G), Line(G, H))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, F, G))), Line(E, G), i we get concurrent(i, Line(E, G), Line(G, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, F, G))), i, f we get concurrent(f, i, Line(C, center(Circle(C, F, G))))
By concurrent_sufficient_conditions on Line(D, H), radical_axis(c, Circle(C, D, E)), Line(D, center(c)) we get concurrent(Line(D, H), Line(D, center(c)), radical_axis(c, Circle(C, D, E)))
By tangent_definition_from_perpendicularity_v0 on line_circle_tangent_point(Line(G, H), Circle(D, F, G)), Line(G, H), Circle(D, F, G) we get perpendicular(Line(G, H), Line(center(Circle(D, F, G)), line_circle_tangent_point(Line(G, H), Circle(D, F, G))))
By perpendicular_line_definition on line_circle_tangent_point(Line(G, H), Circle(D, F, G)), Line(G, H), Line(G, center(Circle(D, F, G))) we get Line(G, H) == perpendicular_line(line_circle_tangent_point(Line(G, H), Circle(D, F, G)), Line(G, center(Circle(D, F, G))))
By line_intersection_definition on F, Line(F, center(Circle(D, F, G))), Line(C, F) we get F == line_intersection(Line(C, F), Line(F, center(Circle(D, F, G))))
By line_intersection_definition on G, Line(E, G), Line(G, center(Circle(D, F, G))) we get G == line_intersection(Line(E, G), Line(G, center(Circle(D, F, G))))
By line_intersection_definition on F, Line(F, G), radical_axis(Circle(A, F, H), Circle(D, F, G)) we get F == line_intersection(Line(F, G), radical_axis(Circle(A, F, H), Circle(D, F, G)))
By line_intersection_definition on F, Line(F, center(Circle(C, D, E))), radical_axis(Circle(A, F, H), Circle(C, F, G)) we get F == line_intersection(radical_axis(Circle(A, F, H), Circle(C, F, G)), Line(F, center(Circle(C, D, E))))
By perpendicular_line_definition on H, Line(G, H), Line(G, center(Circle(D, F, G))) we get Line(G, H) == perpendicular_line(H, Line(G, center(Circle(D, F, G))))
By line_intersection_definition on F, radical_axis(Circle(A, F, H), Circle(C, F, G)), Line(F, H) we get F == line_intersection(Line(F, H), radical_axis(Circle(A, F, H), Circle(C, F, G)))
By line_intersection_definition on F, Line(E, F), Line(F, center(Circle(A, F, H))) we get F == line_intersection(Line(E, F), Line(F, center(Circle(A, F, H))))
By circle_definition on line_circle_tangent_point(Line(G, H), Circle(D, F, G)), F, D, Circle(D, F, G) we get Circle(D, F, G) == Circle(D, F, line_circle_tangent_point(Line(G, H), Circle(D, F, G)))
By line_intersection_definition on D, Line(D, center(Circle(D, F, G))), Line(D, center(c)) we get D == line_intersection(Line(D, center(c)), Line(D, center(Circle(D, F, G))))
By line_intersection_definition on D, radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(D, F, G))) we get D == line_intersection(radical_axis(c, Circle(C, D, E)), Line(D, center(Circle(D, F, G))))
By line_intersection_definition on F, Line(E, F), radical_axis(Circle(A, F, H), Circle(C, F, G)) we get F == line_intersection(Line(E, F), radical_axis(Circle(A, F, H), Circle(C, F, G)))
By midpoint_definition_v0 on C, F, center(Circle(C, F, G)) we get midpoint(C, F) == center(Circle(C, F, G))
By line_intersection_definition on A, Line(A, center(Circle(A, F, H))), f we get A == line_intersection(f, Line(A, center(Circle(A, F, H))))
By line_intersection_definition on center(Circle(A, F, H)), Line(H, center(Circle(A, F, H))), Line(A, center(Circle(A, F, H))) we get center(Circle(A, F, H)) == line_intersection(Line(A, center(Circle(A, F, H))), Line(H, center(Circle(A, F, H))))
By line_intersection_definition on F, Line(F, G), radical_axis(Circle(A, F, H), Circle(C, F, G)) we get F == line_intersection(Line(F, G), radical_axis(Circle(A, F, H), Circle(C, F, G)))
By line_intersection_definition on D, Line(D, center(Circle(D, F, G))), Line(D, H) we get D == line_intersection(Line(D, H), Line(D, center(Circle(D, F, G))))
By line_intersection_definition on F, Line(F, center(Circle(A, F, H))), radical_axis(Circle(A, F, H), Circle(C, F, G)) we get F == line_intersection(radical_axis(Circle(A, F, H), Circle(C, F, G)), Line(F, center(Circle(A, F, H))))
By line_intersection_definition on F, Line(F, H), radical_axis(Circle(A, F, H), Circle(D, F, G)) we get F == line_intersection(Line(F, H), radical_axis(Circle(A, F, H), Circle(D, F, G)))
By line_intersection_definition on H, f, Line(H, center(Circle(A, F, H))) we get H == line_intersection(f, Line(H, center(Circle(A, F, H))))
By line_intersection_definition on F, Line(F, H), Line(F, center(Circle(A, F, H))) we get F == line_intersection(Line(F, H), Line(F, center(Circle(A, F, H))))
By line_intersection_definition on F, radical_axis(Circle(A, F, H), Circle(C, F, G)), Line(C, F) we get F == line_intersection(Line(C, F), radical_axis(Circle(A, F, H), Circle(C, F, G)))
By line_intersection_definition on center(Circle(A, F, H)), Line(F, center(Circle(A, F, H))), Line(A, center(Circle(A, F, H))) we get center(Circle(A, F, H)) == line_intersection(Line(A, center(Circle(A, F, H))), Line(F, center(Circle(A, F, H))))
By line_intersection_definition on F, Line(F, center(Circle(A, F, H))), radical_axis(Circle(A, F, H), Circle(C, D, E)) we get F == line_intersection(radical_axis(Circle(A, F, H), Circle(C, D, E)), Line(F, center(Circle(A, F, H))))
By line_intersection_definition on F, radical_axis(Circle(A, F, H), Circle(C, F, G)), radical_axis(Circle(A, F, H), Circle(D, F, G)) we get F == line_intersection(radical_axis(Circle(A, F, H), Circle(C, F, G)), radical_axis(Circle(A, F, H), Circle(D, F, G)))
By line_intersection_definition on G, Line(A, G), Line(G, center(Circle(D, F, G))) we get G == line_intersection(Line(A, G), Line(G, center(Circle(D, F, G))))
By line_intersection_definition on F, Line(E, F), radical_axis(Circle(A, F, H), Circle(D, F, G)) we get F == line_intersection(Line(E, F), radical_axis(Circle(A, F, H), Circle(D, F, G)))
By line_intersection_definition on center(Circle(D, F, G)), Line(D, center(Circle(D, F, G))), Line(G, center(Circle(D, F, G))) we get center(Circle(D, F, G)) == line_intersection(Line(D, center(Circle(D, F, G))), Line(G, center(Circle(D, F, G))))
By line_intersection_definition on F, Line(F, center(Circle(D, F, G))), radical_axis(Circle(A, F, H), Circle(C, D, E)) we get F == line_intersection(radical_axis(Circle(A, F, H), Circle(C, D, E)), Line(F, center(Circle(D, F, G))))
By line_intersection_definition on F, Line(F, G), Line(F, center(Circle(D, F, G))) we get F == line_intersection(Line(F, G), Line(F, center(Circle(D, F, G))))
By line_intersection_definition on center(Circle(D, F, G)), Line(F, center(Circle(D, F, G))), Line(G, center(Circle(D, F, G))) we get center(Circle(D, F, G)) == line_intersection(Line(F, center(Circle(D, F, G))), Line(G, center(Circle(D, F, G))))
By line_intersection_definition on F, radical_axis(Circle(A, F, H), Circle(C, F, G)), h we get F == line_intersection(h, radical_axis(Circle(A, F, H), Circle(C, F, G)))
By line_intersection_definition on D, g, Line(D, center(Circle(D, F, G))) we get D == line_intersection(g, Line(D, center(Circle(D, F, G))))
By line_intersection_definition on F, radical_axis(Circle(A, F, H), Circle(C, F, G)), Line(A, F) we get F == line_intersection(Line(A, F), radical_axis(Circle(A, F, H), Circle(C, F, G)))
By line_intersection_definition on D, Line(D, center(Circle(C, D, E))), Line(D, center(Circle(D, F, G))) we get D == line_intersection(Line(D, center(Circle(C, D, E))), Line(D, center(Circle(D, F, G))))
By line_intersection_definition on G, Line(F, G), Line(G, center(Circle(D, F, G))) we get G == line_intersection(Line(F, G), Line(G, center(Circle(D, F, G))))
By line_intersection_definition on H, Line(H, center(c)), Line(H, center(Circle(A, F, H))) we get H == line_intersection(Line(H, center(c)), Line(H, center(Circle(A, F, H))))
By line_intersection_definition on A, Line(A, center(Circle(A, F, H))), Line(A, center(c)) we get A == line_intersection(Line(A, center(c)), Line(A, center(Circle(A, F, H))))
By perpendicular_line_definition on G, Line(G, H), Line(G, center(Circle(D, F, G))) we get Line(G, H) == perpendicular_line(G, Line(G, center(Circle(D, F, G))))
By line_intersection_definition on G, Line(G, H), Line(G, center(Circle(D, F, G))) we get G == line_intersection(Line(G, H), Line(G, center(Circle(D, F, G))))
By perpendicular_line_definition on center(Circle(C, F, G)), Line(C, F), Line(F, center(Circle(A, F, H))) we get Line(C, F) == perpendicular_line(center(Circle(C, F, G)), Line(F, center(Circle(A, F, H))))
By line_intersection_definition on F, Line(F, center(Circle(C, D, E))), radical_axis(Circle(A, F, H), Circle(C, D, E)) we get F == line_intersection(radical_axis(Circle(A, F, H), Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on center(Circle(A, F, H)), Line(F, center(Circle(A, F, H))), Line(H, center(Circle(A, F, H))) we get center(Circle(A, F, H)) == line_intersection(Line(F, center(Circle(A, F, H))), Line(H, center(Circle(A, F, H))))
By line_intersection_definition on A, Line(A, G), Line(A, center(Circle(A, F, H))) we get A == line_intersection(Line(A, G), Line(A, center(Circle(A, F, H))))
By line_intersection_definition on G, Line(G, center(Circle(D, F, G))), i we get G == line_intersection(i, Line(G, center(Circle(D, F, G))))
By line_intersection_definition on A, g, Line(A, center(Circle(A, F, H))) we get A == line_intersection(g, Line(A, center(Circle(A, F, H))))
By line_intersection_definition on F, Line(F, H), Line(F, center(Circle(D, F, G))) we get F == line_intersection(Line(F, H), Line(F, center(Circle(D, F, G))))
By line_intersection_definition on H, Line(H, center(Circle(A, F, H))), Line(G, H) we get H == line_intersection(Line(G, H), Line(H, center(Circle(A, F, H))))
By line_intersection_definition on G, Line(G, center(Circle(D, F, G))), Line(G, center(c)) we get G == line_intersection(Line(G, center(c)), Line(G, center(Circle(D, F, G))))
By line_intersection_definition on F, radical_axis(Circle(A, F, H), Circle(D, F, G)), Line(A, F) we get F == line_intersection(Line(A, F), radical_axis(Circle(A, F, H), Circle(D, F, G)))
By line_intersection_definition on A, Line(A, F), Line(A, center(Circle(A, F, H))) we get A == line_intersection(Line(A, F), Line(A, center(Circle(A, F, H))))
By line_intersection_definition on F, Line(F, center(Circle(A, F, H))), radical_axis(Circle(A, F, H), Circle(D, F, G)) we get F == line_intersection(radical_axis(Circle(A, F, H), Circle(D, F, G)), Line(F, center(Circle(A, F, H))))
By line_intersection_definition on D, Line(D, center(Circle(D, F, G))), i we get D == line_intersection(i, Line(D, center(Circle(D, F, G))))
By line_intersection_definition on F, Line(F, center(Circle(A, F, H))), Line(F, center(Circle(C, D, E))) we get F == line_intersection(Line(F, center(Circle(A, F, H))), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on F, radical_axis(Circle(A, F, H), Circle(C, D, E)), h we get F == line_intersection(h, radical_axis(Circle(A, F, H), Circle(C, D, E)))
By line_intersection_definition on H, Line(H, center(Circle(A, F, H))), Line(F, H) we get H == line_intersection(Line(F, H), Line(H, center(Circle(A, F, H))))
By line_intersection_definition on G, Line(G, center(Circle(D, F, G))), radical_axis(c, Circle(C, F, G)) we get G == line_intersection(radical_axis(c, Circle(C, F, G)), Line(G, center(Circle(D, F, G))))
By line_intersection_definition on F, Line(F, center(Circle(D, F, G))), radical_axis(Circle(A, F, H), Circle(C, F, G)) we get F == line_intersection(radical_axis(Circle(A, F, H), Circle(C, F, G)), Line(F, center(Circle(D, F, G))))
By perpendicular_line_definition on G, Line(G, center(Circle(D, F, G))), Line(G, H) we get perpendicular_line(G, Line(G, H)) == Line(G, center(Circle(D, F, G)))
By line_intersection_definition on G, Line(G, center(Circle(D, F, G))), Line(G, center(Circle(C, F, G))) we get G == line_intersection(Line(G, center(Circle(C, F, G))), Line(G, center(Circle(D, F, G))))
By line_intersection_definition on F, radical_axis(Circle(A, F, H), Circle(D, F, G)), h we get F == line_intersection(h, radical_axis(Circle(A, F, H), Circle(D, F, G)))
By line_intersection_definition on F, Line(F, center(Circle(A, F, H))), Line(A, F) we get F == line_intersection(Line(A, F), Line(F, center(Circle(A, F, H))))
By perpendicular_line_definition on center(Circle(A, F, H)), Line(F, center(Circle(A, F, H))), Line(C, F) we get Line(F, center(Circle(A, F, H))) == perpendicular_line(center(Circle(A, F, H)), Line(C, F))
By line_intersection_definition on F, radical_axis(Circle(A, F, H), Circle(D, F, G)), Line(F, center(Circle(D, F, G))) we get F == line_intersection(radical_axis(Circle(A, F, H), Circle(D, F, G)), Line(F, center(Circle(D, F, G))))
By perpendicular_line_definition on F, Line(C, F), Line(F, center(Circle(A, F, H))) we get Line(C, F) == perpendicular_line(F, Line(F, center(Circle(A, F, H))))
By perpendicular_line_definition on C, Line(C, F), Line(F, center(Circle(D, F, G))) we get Line(C, F) == perpendicular_line(C, Line(F, center(Circle(D, F, G))))
By line_intersection_definition on F, Line(A, F), Line(F, center(Circle(D, F, G))) we get F == line_intersection(Line(A, F), Line(F, center(Circle(D, F, G))))
By line_intersection_definition on F, radical_axis(Circle(A, F, H), Circle(C, D, E)), Line(C, F) we get F == line_intersection(Line(C, F), radical_axis(Circle(A, F, H), Circle(C, D, E)))
By line_intersection_definition on F, radical_axis(Circle(A, F, H), Circle(D, F, G)), Line(F, center(Circle(C, D, E))) we get F == line_intersection(radical_axis(Circle(A, F, H), Circle(D, F, G)), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on F, radical_axis(Circle(A, F, H), Circle(C, D, E)), Line(F, G) we get F == line_intersection(Line(F, G), radical_axis(Circle(A, F, H), Circle(C, D, E)))
By line_intersection_definition on A, Line(A, center(Circle(A, F, H))), Line(A, B) we get A == line_intersection(Line(A, B), Line(A, center(Circle(A, F, H))))
By perpendicular_line_definition on center(Circle(C, F, G)), Line(C, F), Line(F, center(Circle(D, F, G))) we get Line(C, F) == perpendicular_line(center(Circle(C, F, G)), Line(F, center(Circle(D, F, G))))
By line_intersection_definition on F, radical_axis(Circle(A, F, H), Circle(C, D, E)), radical_axis(Circle(A, F, H), Circle(C, F, G)) we get F == line_intersection(radical_axis(Circle(A, F, H), Circle(C, D, E)), radical_axis(Circle(A, F, H), Circle(C, F, G)))
By perpendicular_line_definition on center(Circle(D, F, G)), Line(F, center(Circle(D, F, G))), Line(C, F) we get Line(F, center(Circle(D, F, G))) == perpendicular_line(center(Circle(D, F, G)), Line(C, F))
By line_intersection_definition on F, radical_axis(Circle(A, F, H), Circle(C, D, E)), Line(F, H) we get F == line_intersection(Line(F, H), radical_axis(Circle(A, F, H), Circle(C, D, E)))
By line_intersection_definition on D, Line(D, E), Line(D, center(Circle(D, F, G))) we get D == line_intersection(Line(D, E), Line(D, center(Circle(D, F, G))))
By perpendicular_line_definition on center(Circle(D, F, G)), Line(G, center(Circle(D, F, G))), Line(G, H) we get Line(G, center(Circle(D, F, G))) == perpendicular_line(center(Circle(D, F, G)), Line(G, H))
By line_intersection_definition on F, Line(A, F), radical_axis(Circle(A, F, H), Circle(C, D, E)) we get F == line_intersection(Line(A, F), radical_axis(Circle(A, F, H), Circle(C, D, E)))
By line_intersection_definition on F, Line(F, center(Circle(D, F, G))), Line(E, F) we get F == line_intersection(Line(E, F), Line(F, center(Circle(D, F, G))))
By perpendicular_line_definition on C, Line(C, F), Line(F, center(Circle(A, F, H))) we get Line(C, F) == perpendicular_line(C, Line(F, center(Circle(A, F, H))))
By line_intersection_definition on F, Line(F, G), Line(F, center(Circle(A, F, H))) we get F == line_intersection(Line(F, G), Line(F, center(Circle(A, F, H))))
By line_intersection_definition on F, Line(F, center(Circle(D, F, G))), Line(F, center(Circle(C, D, E))) we get F == line_intersection(Line(F, center(Circle(C, D, E))), Line(F, center(Circle(D, F, G))))
By line_intersection_definition on F, radical_axis(Circle(A, F, H), Circle(C, D, E)), radical_axis(Circle(A, F, H), Circle(D, F, G)) we get F == line_intersection(radical_axis(Circle(A, F, H), Circle(C, D, E)), radical_axis(Circle(A, F, H), Circle(D, F, G)))
By perpendicular_line_definition on F, Line(C, F), Line(F, center(Circle(D, F, G))) we get Line(C, F) == perpendicular_line(F, Line(F, center(Circle(D, F, G))))
By line_intersection_definition on F, Line(C, F), Line(F, center(Circle(A, F, H))) we get F == line_intersection(Line(C, F), Line(F, center(Circle(A, F, H))))
By line_intersection_definition on F, Line(E, F), radical_axis(Circle(A, F, H), Circle(C, D, E)) we get F == line_intersection(Line(E, F), radical_axis(Circle(A, F, H), Circle(C, D, E)))
By line_intersection_definition on H, Line(D, H), Line(H, center(Circle(A, F, H))) we get H == line_intersection(Line(D, H), Line(H, center(Circle(A, F, H))))
By circle_radius_v0_r on line_circle_tangent_point(Line(G, H), Circle(D, F, G)), Circle(D, F, G) we get radius(Circle(D, F, G)) == distance(center(Circle(D, F, G)), line_circle_tangent_point(Line(G, H), Circle(D, F, G)))
By same_angle_converse_v1 on center(Circle(D, F, G)), D, F, G we get collinear(D, F, center(Circle(D, F, G)))
By perpendicular_direction_conditions_v0 on C, center(Circle(C, F, G)), F, B we get perpendicular(Line(B, F), Line(C, center(Circle(C, F, G))))
By perpendicular_direction_conditions_v0 on center(Circle(C, D, E)), C, G, F we get perpendicular(Line(F, G), Line(C, center(Circle(C, D, E))))
By perpendicular_direction_conditions_v0 on center(Circle(C, F, G)), C, B, D we get perpendicular(Line(B, D), Line(C, center(Circle(C, F, G))))
By perpendicular_direction_conditions_v0_r on center(Circle(D, F, G)), G, G, H we get 180 == 2 * direction(center(Circle(D, F, G)), G) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0 on center(Circle(C, D, E)), D, G, F we get perpendicular(Line(F, G), Line(D, center(Circle(C, D, E))))
By perpendicular_direction_conditions_v0_r on center(Circle(D, F, G)), G, H, G we get 180 == 2 * direction(center(Circle(D, F, G)), G) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0 on center(Circle(C, F, G)), C, D, F we get perpendicular(Line(D, F), Line(C, center(Circle(C, F, G))))
By perpendicular_direction_conditions_v0_r on center(Circle(C, F, G)), F, center(Circle(D, F, G)), F we get 180 == 2 * direction(center(Circle(C, F, G)), F) - 2 * direction(center(Circle(D, F, G)), F) mod 360
By projection_definition on F, line_intersection(g, Line(E, F)), g we get projection(F, g) == line_intersection(g, Line(E, F))
By perpendicular_direction_conditions_v0_r on F, center(Circle(C, F, G)), center(Circle(A, F, H)), F we get 180 == 2 * direction(F, center(Circle(C, F, G))) - 2 * direction(center(Circle(A, F, H)), F) mod 360
By projection_definition on E, line_intersection(g, Line(E, F)), g we get projection(E, g) == line_intersection(g, Line(E, F))
By perpendicular_direction_conditions_v0_r on center(Circle(D, F, G)), F, F, C we get 180 == 2 * direction(center(Circle(D, F, G)), F) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on F, C, center(Circle(A, F, H)), F we get 180 == 2 * direction(F, C) - 2 * direction(center(Circle(A, F, H)), F) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(D, F, G)), F, F, center(Circle(C, F, G)) we get 180 == 2 * direction(center(Circle(D, F, G)), F) - 2 * direction(F, center(Circle(C, F, G))) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(A, F, H)), F, center(Circle(C, F, G)), F we get 180 == 2 * direction(center(Circle(A, F, H)), F) - 2 * direction(center(Circle(C, F, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(A, F, H)), F, C, F we get 180 == 2 * direction(center(Circle(A, F, H)), F) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(D, F, G)), F, C, F we get 180 == 2 * direction(center(Circle(D, F, G)), F) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on C, F, center(Circle(A, F, H)), F we get 180 == 2 * direction(C, F) - 2 * direction(center(Circle(A, F, H)), F) mod 360
By projection_definition on D, line_intersection(g, Line(E, F)), Line(E, F) we get projection(D, Line(E, F)) == line_intersection(g, Line(E, F))
By perpendicular_direction_conditions_v0_r on center(Circle(C, F, G)), F, center(Circle(A, F, H)), F we get 180 == 2 * direction(center(Circle(C, F, G)), F) - 2 * direction(center(Circle(A, F, H)), F) mod 360
By projection_definition on A, line_intersection(g, Line(E, F)), Line(E, F) we get projection(A, Line(E, F)) == line_intersection(g, Line(E, F))
By perpendicular_direction_conditions_v0_r on center(Circle(D, F, G)), F, center(Circle(C, F, G)), F we get 180 == 2 * direction(center(Circle(D, F, G)), F) - 2 * direction(center(Circle(C, F, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on G, H, center(Circle(D, F, G)), G we get 180 == 2 * direction(G, H) - 2 * direction(center(Circle(D, F, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on F, center(Circle(C, F, G)), center(Circle(D, F, G)), F we get 180 == 2 * direction(F, center(Circle(C, F, G))) - 2 * direction(center(Circle(D, F, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on H, G, center(Circle(D, F, G)), G we get 180 == 2 * direction(H, G) - 2 * direction(center(Circle(D, F, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(A, F, H)), F, F, center(Circle(C, F, G)) we get 180 == 2 * direction(center(Circle(A, F, H)), F) - 2 * direction(F, center(Circle(C, F, G))) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(A, F, H)), F, F, C we get 180 == 2 * direction(center(Circle(A, F, H)), F) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on C, F, center(Circle(D, F, G)), F we get 180 == 2 * direction(C, F) - 2 * direction(center(Circle(D, F, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on F, C, center(Circle(D, F, G)), F we get 180 == 2 * direction(F, C) - 2 * direction(center(Circle(D, F, G)), F) mod 360
By angle_to_center on F, D, line_circle_tangent_point(Line(G, H), Circle(D, F, G)), Circle(D, F, G) we get angle(F, center(Circle(D, F, G)), line_circle_tangent_point(Line(G, H), Circle(D, F, G))) == 2 * angle(F, D, line_circle_tangent_point(Line(G, H), Circle(D, F, G))) mod 360
By angle_to_center on D, line_circle_tangent_point(Line(G, H), Circle(D, F, G)), F, Circle(D, F, G) we get angle(D, center(Circle(D, F, G)), F) == 2 * angle(D, line_circle_tangent_point(Line(G, H), Circle(D, F, G)), F) mod 360
By angle_to_center on line_circle_tangent_point(Line(G, H), Circle(D, F, G)), D, F, Circle(D, F, G) we get angle(line_circle_tangent_point(Line(G, H), Circle(D, F, G)), center(Circle(D, F, G)), F) == 2 * angle(line_circle_tangent_point(Line(G, H), Circle(D, F, G)), D, F) mod 360
By angle_to_center on F, line_circle_tangent_point(Line(G, H), Circle(D, F, G)), D, Circle(D, F, G) we get angle(F, center(Circle(D, F, G)), D) == 2 * angle(F, line_circle_tangent_point(Line(G, H), Circle(D, F, G)), D) mod 360
By angle_to_center on D, F, line_circle_tangent_point(Line(G, H), Circle(D, F, G)), Circle(D, F, G) we get angle(D, center(Circle(D, F, G)), line_circle_tangent_point(Line(G, H), Circle(D, F, G))) == 2 * angle(D, F, line_circle_tangent_point(Line(G, H), Circle(D, F, G))) mod 360
By angle_to_center on line_circle_tangent_point(Line(G, H), Circle(D, F, G)), F, D, Circle(D, F, G) we get angle(line_circle_tangent_point(Line(G, H), Circle(D, F, G)), center(Circle(D, F, G)), D) == 2 * angle(line_circle_tangent_point(Line(G, H), Circle(D, F, G)), F, D) mod 360
By perpendicular_direction_conditions_v0_r on E, F, A, line_intersection(g, Line(E, F)) we get 180 == 2 * direction(E, F) - 2 * direction(A, line_intersection(g, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(g, Line(E, F)), E, F we get 180 == 2 * direction(D, line_intersection(g, Line(E, F))) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on E, F, line_intersection(g, Line(E, F)), D we get 180 == 2 * direction(E, F) - 2 * direction(line_intersection(g, Line(E, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on C, F, F, center(Circle(A, F, H)) we get 180 == 2 * direction(C, F) - 2 * direction(F, center(Circle(A, F, H))) mod 360
By perpendicular_direction_conditions_v0_r on F, E, line_intersection(g, Line(E, F)), A we get 180 == 2 * direction(F, E) - 2 * direction(line_intersection(g, Line(E, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, Line(E, F)), A, E, F we get 180 == 2 * direction(line_intersection(g, Line(E, F)), A) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on F, center(Circle(D, F, G)), C, F we get 180 == 2 * direction(F, center(Circle(D, F, G))) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on G, center(Circle(D, F, G)), H, G we get 180 == 2 * direction(G, center(Circle(D, F, G))) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(g, Line(E, F)), F, E we get 180 == 2 * direction(D, line_intersection(g, Line(E, F))) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(g, Line(E, F)), F, E we get 180 == 2 * direction(A, line_intersection(g, Line(E, F))) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on F, center(Circle(A, F, H)), F, C we get 180 == 2 * direction(F, center(Circle(A, F, H))) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, Line(E, F)), D, E, F we get 180 == 2 * direction(line_intersection(g, Line(E, F)), D) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on A, D, E, line_intersection(g, Line(E, F)) we get 180 == 2 * direction(A, D) - 2 * direction(E, line_intersection(g, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on F, E, line_intersection(g, Line(E, F)), D we get 180 == 2 * direction(F, E) - 2 * direction(line_intersection(g, Line(E, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on D, A, line_intersection(g, Line(E, F)), F we get 180 == 2 * direction(D, A) - 2 * direction(line_intersection(g, Line(E, F)), F) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(C, F, G)), F, F, center(Circle(D, F, G)) we get 180 == 2 * direction(center(Circle(C, F, G)), F) - 2 * direction(F, center(Circle(D, F, G))) mod 360
By perpendicular_direction_conditions_v0_r on F, center(Circle(A, F, H)), C, F we get 180 == 2 * direction(F, center(Circle(A, F, H))) - 2 * direction(C, F) mod 360
By projection_definition on H, G, Line(G, center(Circle(D, F, G))) we get G == projection(H, Line(G, center(Circle(D, F, G))))
By projection_definition on center(Circle(D, F, G)), G, Line(G, H) we get G == projection(center(Circle(D, F, G)), Line(G, H))
By perpendicular_direction_conditions_v0_r on E, line_intersection(g, Line(E, F)), A, D we get 180 == 2 * direction(E, line_intersection(g, Line(E, F))) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(g, Line(E, F)), E, F we get 180 == 2 * direction(A, line_intersection(g, Line(E, F))) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(g, Line(E, F)), D, A we get 180 == 2 * direction(E, line_intersection(g, Line(E, F))) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on F, E, D, line_intersection(g, Line(E, F)) we get 180 == 2 * direction(F, E) - 2 * direction(D, line_intersection(g, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on D, A, line_intersection(g, Line(E, F)), E we get 180 == 2 * direction(D, A) - 2 * direction(line_intersection(g, Line(E, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on F, E, A, line_intersection(g, Line(E, F)) we get 180 == 2 * direction(F, E) - 2 * direction(A, line_intersection(g, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, Line(E, F)), A, F, E we get 180 == 2 * direction(line_intersection(g, Line(E, F)), A) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on D, A, F, line_intersection(g, Line(E, F)) we get 180 == 2 * direction(D, A) - 2 * direction(F, line_intersection(g, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on F, center(Circle(A, F, H)), center(Circle(C, F, G)), F we get 180 == 2 * direction(F, center(Circle(A, F, H))) - 2 * direction(center(Circle(C, F, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on C, F, F, center(Circle(D, F, G)) we get 180 == 2 * direction(C, F) - 2 * direction(F, center(Circle(D, F, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, Line(E, F)), E, A, D we get 180 == 2 * direction(line_intersection(g, Line(E, F)), E) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on H, G, G, center(Circle(D, F, G)) we get 180 == 2 * direction(H, G) - 2 * direction(G, center(Circle(D, F, G))) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(C, F, G)), F, F, center(Circle(A, F, H)) we get 180 == 2 * direction(center(Circle(C, F, G)), F) - 2 * direction(F, center(Circle(A, F, H))) mod 360
By perpendicular_direction_conditions_v0_r on E, F, D, line_intersection(g, Line(E, F)) we get 180 == 2 * direction(E, F) - 2 * direction(D, line_intersection(g, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on F, center(Circle(C, F, G)), F, center(Circle(D, F, G)) we get 180 == 2 * direction(F, center(Circle(C, F, G))) - 2 * direction(F, center(Circle(D, F, G))) mod 360
By projection_definition on C, F, Line(F, center(Circle(D, F, G))) we get F == projection(C, Line(F, center(Circle(D, F, G))))
By perpendicular_direction_conditions_v0_r on F, center(Circle(D, F, G)), F, C we get 180 == 2 * direction(F, center(Circle(D, F, G))) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on A, D, line_intersection(g, Line(E, F)), E we get 180 == 2 * direction(A, D) - 2 * direction(line_intersection(g, Line(E, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on G, center(Circle(D, F, G)), G, H we get 180 == 2 * direction(G, center(Circle(D, F, G))) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0_r on A, D, line_intersection(g, Line(E, F)), F we get 180 == 2 * direction(A, D) - 2 * direction(line_intersection(g, Line(E, F)), F) mod 360
By projection_definition on center(Circle(C, F, G)), F, Line(F, center(Circle(D, F, G))) we get F == projection(center(Circle(C, F, G)), Line(F, center(Circle(D, F, G))))
By perpendicular_direction_conditions_v0_r on F, center(Circle(C, F, G)), F, center(Circle(A, F, H)) we get 180 == 2 * direction(F, center(Circle(C, F, G))) - 2 * direction(F, center(Circle(A, F, H))) mod 360
By perpendicular_direction_conditions_v0_r on F, center(Circle(D, F, G)), F, center(Circle(C, F, G)) we get 180 == 2 * direction(F, center(Circle(D, F, G))) - 2 * direction(F, center(Circle(C, F, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, Line(E, F)), F, D, A we get 180 == 2 * direction(line_intersection(g, Line(E, F)), F) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on F, C, F, center(Circle(A, F, H)) we get 180 == 2 * direction(F, C) - 2 * direction(F, center(Circle(A, F, H))) mod 360
By projection_definition on center(Circle(A, F, H)), F, Line(C, F) we get F == projection(center(Circle(A, F, H)), Line(C, F))
By perpendicular_direction_conditions_v0_r on line_intersection(g, Line(E, F)), D, F, E we get 180 == 2 * direction(line_intersection(g, Line(E, F)), D) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on F, C, F, center(Circle(D, F, G)) we get 180 == 2 * direction(F, C) - 2 * direction(F, center(Circle(D, F, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, Line(E, F)), E, D, A we get 180 == 2 * direction(line_intersection(g, Line(E, F)), E) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on F, center(Circle(D, F, G)), center(Circle(C, F, G)), F we get 180 == 2 * direction(F, center(Circle(D, F, G))) - 2 * direction(center(Circle(C, F, G)), F) mod 360
By projection_definition on C, F, Line(F, center(Circle(A, F, H))) we get F == projection(C, Line(F, center(Circle(A, F, H))))
By perpendicular_direction_conditions_v0_r on G, H, G, center(Circle(D, F, G)) we get 180 == 2 * direction(G, H) - 2 * direction(G, center(Circle(D, F, G))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(g, Line(E, F)), D, A we get 180 == 2 * direction(F, line_intersection(g, Line(E, F))) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on A, D, F, line_intersection(g, Line(E, F)) we get 180 == 2 * direction(A, D) - 2 * direction(F, line_intersection(g, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on F, center(Circle(A, F, H)), F, center(Circle(C, F, G)) we get 180 == 2 * direction(F, center(Circle(A, F, H))) - 2 * direction(F, center(Circle(C, F, G))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(g, Line(E, F)), A, D we get 180 == 2 * direction(F, line_intersection(g, Line(E, F))) - 2 * direction(A, D) mod 360
By projection_definition on center(Circle(C, F, G)), F, Line(F, center(Circle(A, F, H))) we get F == projection(center(Circle(C, F, G)), Line(F, center(Circle(A, F, H))))
By perpendicular_direction_conditions_v0_r on E, F, line_intersection(g, Line(E, F)), A we get 180 == 2 * direction(E, F) - 2 * direction(line_intersection(g, Line(E, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, Line(E, F)), F, A, D we get 180 == 2 * direction(line_intersection(g, Line(E, F)), F) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on D, A, E, line_intersection(g, Line(E, F)) we get 180 == 2 * direction(D, A) - 2 * direction(E, line_intersection(g, Line(E, F))) mod 360
By projection_definition on center(Circle(D, F, G)), F, Line(C, F) we get F == projection(center(Circle(D, F, G)), Line(C, F))
By in_imply_concyclic on D, G, F, line_circle_tangent_point(Line(G, H), Circle(D, F, G)) we get concyclic(D, F, G, line_circle_tangent_point(Line(G, H), Circle(D, F, G)))
By in_imply_collinear on line_circle_tangent_point(Line(G, H), Circle(D, F, G)), G, H we get collinear(G, H, line_circle_tangent_point(Line(G, H), Circle(D, F, G)))
By collinear_definition on center(Circle(C, D, E)), D, C we get D in Line(C, center(Circle(C, D, E))), C in Line(D, center(Circle(C, D, E))), Line(C, center(Circle(C, D, E))) == Line(D, center(Circle(C, D, E))), 0 == 2 * angle(D, center(Circle(C, D, E)), C) mod 360
By tangent_point_is_unique on line_circle_tangent_point(Line(G, H), Circle(D, F, G)), G, Circle(D, F, G), Line(G, H) we get G == line_circle_tangent_point(Line(G, H), Circle(D, F, G))
By double_perpendicular_and_parallel_v0 on Line(F, center(Circle(D, F, G))), Line(C, F), Line(F, center(Circle(A, F, H))) we get parallel(Line(F, center(Circle(A, F, H))), Line(F, center(Circle(D, F, G))))
By collinear_definition on F, C, center(Circle(C, F, G)) we get C in Line(F, center(Circle(C, F, G))), center(Circle(C, F, G)) in Line(C, F), Line(C, F) == Line(F, center(Circle(C, F, G))), 0 == 2 * angle(C, F, center(Circle(C, F, G))) mod 360
By collinear_definition on C, F, center(Circle(C, F, G)) we get F in Line(C, center(Circle(C, F, G))), center(Circle(C, F, G)) in Line(C, F), Line(C, F) == Line(C, center(Circle(C, F, G))), 0 == 2 * angle(F, C, center(Circle(C, F, G))) mod 360
By double_perpendicular_and_parallel_v0 on Line(F, center(Circle(D, F, G))), Line(C, F), h we get parallel(h, Line(F, center(Circle(D, F, G))))
By collinear_definition on C, center(Circle(C, D, E)), D we get center(Circle(C, D, E)) in Line(C, D), D in Line(C, center(Circle(C, D, E))), Line(C, D) == Line(C, center(Circle(C, D, E))), 0 == 2 * angle(center(Circle(C, D, E)), C, D) mod 360
By collinear_definition on C, center(Circle(C, F, G)), F we get center(Circle(C, F, G)) in Line(C, F), F in Line(C, center(Circle(C, F, G))), Line(C, F) == Line(C, center(Circle(C, F, G))), 0 == 2 * angle(center(Circle(C, F, G)), C, F) mod 360
By collinear_definition on center(Circle(C, F, G)), C, F we get C in Line(F, center(Circle(C, F, G))), F in Line(C, center(Circle(C, F, G))), Line(C, center(Circle(C, F, G))) == Line(F, center(Circle(C, F, G))), 0 == 2 * angle(C, center(Circle(C, F, G)), F) mod 360
By collinear_definition on D, C, center(Circle(C, D, E)) we get C in Line(D, center(Circle(C, D, E))), center(Circle(C, D, E)) in Line(C, D), Line(C, D) == Line(D, center(Circle(C, D, E))), 0 == 2 * angle(C, D, center(Circle(C, D, E))) mod 360
By collinear_definition on D, center(Circle(C, D, E)), C we get center(Circle(C, D, E)) in Line(C, D), C in Line(D, center(Circle(C, D, E))), Line(C, D) == Line(D, center(Circle(C, D, E))), 0 == 2 * angle(center(Circle(C, D, E)), D, C) mod 360
By collinear_definition on C, D, center(Circle(C, D, E)) we get D in Line(C, center(Circle(C, D, E))), center(Circle(C, D, E)) in Line(C, D), Line(C, D) == Line(C, center(Circle(C, D, E))), 0 == 2 * angle(D, C, center(Circle(C, D, E))) mod 360
By double_perpendicular_and_parallel_v0 on Line(F, center(Circle(A, F, H))), Line(C, F), h we get parallel(h, Line(F, center(Circle(A, F, H))))
By collinear_definition on F, center(Circle(C, F, G)), C we get center(Circle(C, F, G)) in Line(C, F), C in Line(F, center(Circle(C, F, G))), Line(C, F) == Line(F, center(Circle(C, F, G))), 0 == 2 * angle(center(Circle(C, F, G)), F, C) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(g, Line(E, F)), D, line_intersection(g, Line(E, F)) we get 180 == 2 * direction(E, line_intersection(g, Line(E, F))) - 2 * direction(D, line_intersection(g, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, Line(E, F)), F, line_intersection(g, Line(E, F)), D we get 180 == 2 * direction(line_intersection(g, Line(E, F)), F) - 2 * direction(line_intersection(g, Line(E, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, Line(E, F)), E, A, line_intersection(g, Line(E, F)) we get 180 == 2 * direction(line_intersection(g, Line(E, F)), E) - 2 * direction(A, line_intersection(g, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(g, Line(E, F)), line_intersection(g, Line(E, F)), E we get 180 == 2 * direction(D, line_intersection(g, Line(E, F))) - 2 * direction(line_intersection(g, Line(E, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(g, Line(E, F)), F, line_intersection(g, Line(E, F)) we get 180 == 2 * direction(A, line_intersection(g, Line(E, F))) - 2 * direction(F, line_intersection(g, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, Line(E, F)), D, line_intersection(g, Line(E, F)), E we get 180 == 2 * direction(line_intersection(g, Line(E, F)), D) - 2 * direction(line_intersection(g, Line(E, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(g, Line(E, F)), E, line_intersection(g, Line(E, F)) we get 180 == 2 * direction(A, line_intersection(g, Line(E, F))) - 2 * direction(E, line_intersection(g, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(g, Line(E, F)), line_intersection(g, Line(E, F)), A we get 180 == 2 * direction(F, line_intersection(g, Line(E, F))) - 2 * direction(line_intersection(g, Line(E, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(g, Line(E, F)), line_intersection(g, Line(E, F)), F we get 180 == 2 * direction(A, line_intersection(g, Line(E, F))) - 2 * direction(line_intersection(g, Line(E, F)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, Line(E, F)), A, F, line_intersection(g, Line(E, F)) we get 180 == 2 * direction(line_intersection(g, Line(E, F)), A) - 2 * direction(F, line_intersection(g, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, Line(E, F)), A, line_intersection(g, Line(E, F)), F we get 180 == 2 * direction(line_intersection(g, Line(E, F)), A) - 2 * direction(line_intersection(g, Line(E, F)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, Line(E, F)), A, E, line_intersection(g, Line(E, F)) we get 180 == 2 * direction(line_intersection(g, Line(E, F)), A) - 2 * direction(E, line_intersection(g, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, Line(E, F)), E, line_intersection(g, Line(E, F)), D we get 180 == 2 * direction(line_intersection(g, Line(E, F)), E) - 2 * direction(line_intersection(g, Line(E, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(g, Line(E, F)), E, line_intersection(g, Line(E, F)) we get 180 == 2 * direction(D, line_intersection(g, Line(E, F))) - 2 * direction(E, line_intersection(g, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(g, Line(E, F)), line_intersection(g, Line(E, F)), D we get 180 == 2 * direction(F, line_intersection(g, Line(E, F))) - 2 * direction(line_intersection(g, Line(E, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(g, Line(E, F)), line_intersection(g, Line(E, F)), D we get 180 == 2 * direction(E, line_intersection(g, Line(E, F))) - 2 * direction(line_intersection(g, Line(E, F)), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, Line(E, F)), F, A, line_intersection(g, Line(E, F)) we get 180 == 2 * direction(line_intersection(g, Line(E, F)), F) - 2 * direction(A, line_intersection(g, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(g, Line(E, F)), F, line_intersection(g, Line(E, F)) we get 180 == 2 * direction(D, line_intersection(g, Line(E, F))) - 2 * direction(F, line_intersection(g, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, Line(E, F)), D, E, line_intersection(g, Line(E, F)) we get 180 == 2 * direction(line_intersection(g, Line(E, F)), D) - 2 * direction(E, line_intersection(g, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, Line(E, F)), F, line_intersection(g, Line(E, F)), A we get 180 == 2 * direction(line_intersection(g, Line(E, F)), F) - 2 * direction(line_intersection(g, Line(E, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(g, Line(E, F)), D, line_intersection(g, Line(E, F)) we get 180 == 2 * direction(F, line_intersection(g, Line(E, F))) - 2 * direction(D, line_intersection(g, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(g, Line(E, F)), A, line_intersection(g, Line(E, F)) we get 180 == 2 * direction(E, line_intersection(g, Line(E, F))) - 2 * direction(A, line_intersection(g, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, Line(E, F)), D, line_intersection(g, Line(E, F)), F we get 180 == 2 * direction(line_intersection(g, Line(E, F)), D) - 2 * direction(line_intersection(g, Line(E, F)), F) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(g, Line(E, F)), line_intersection(g, Line(E, F)), E we get 180 == 2 * direction(A, line_intersection(g, Line(E, F))) - 2 * direction(line_intersection(g, Line(E, F)), E) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(g, Line(E, F)), A, line_intersection(g, Line(E, F)) we get 180 == 2 * direction(F, line_intersection(g, Line(E, F))) - 2 * direction(A, line_intersection(g, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on D, line_intersection(g, Line(E, F)), line_intersection(g, Line(E, F)), F we get 180 == 2 * direction(D, line_intersection(g, Line(E, F))) - 2 * direction(line_intersection(g, Line(E, F)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, Line(E, F)), F, D, line_intersection(g, Line(E, F)) we get 180 == 2 * direction(line_intersection(g, Line(E, F)), F) - 2 * direction(D, line_intersection(g, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(g, Line(E, F)), line_intersection(g, Line(E, F)), A we get 180 == 2 * direction(E, line_intersection(g, Line(E, F))) - 2 * direction(line_intersection(g, Line(E, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, Line(E, F)), E, line_intersection(g, Line(E, F)), A we get 180 == 2 * direction(line_intersection(g, Line(E, F)), E) - 2 * direction(line_intersection(g, Line(E, F)), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, Line(E, F)), D, F, line_intersection(g, Line(E, F)) we get 180 == 2 * direction(line_intersection(g, Line(E, F)), D) - 2 * direction(F, line_intersection(g, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, Line(E, F)), E, D, line_intersection(g, Line(E, F)) we get 180 == 2 * direction(line_intersection(g, Line(E, F)), E) - 2 * direction(D, line_intersection(g, Line(E, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, Line(E, F)), A, line_intersection(g, Line(E, F)), E we get 180 == 2 * direction(line_intersection(g, Line(E, F)), A) - 2 * direction(line_intersection(g, Line(E, F)), E) mod 360
By collinear_definition on D, line_intersection(g, Line(E, F)), A we get line_intersection(g, Line(E, F)) in Line(A, D), A in Line(D, line_intersection(g, Line(E, F))), Line(A, D) == Line(D, line_intersection(g, Line(E, F))), 0 == 2 * angle(line_intersection(g, Line(E, F)), D, A) mod 360
By external_angle_bisector_definition_v0_r on center(Circle(C, F, G)), B, center(Circle(C, F, G)), F we get Line(B, F) == external_angle_bisector(center(Circle(C, F, G)), F, center(Circle(C, F, G)))
By internal_angle_bisector_definition_v0 on B, line_intersection(g, Line(E, F)), E, A we get angle(B, A, line_intersection(g, Line(E, F))) == angle(line_intersection(g, Line(E, F)), A, E) mod 360
By internal_angle_bisector_definition_v0_r on F, D, F, center(Circle(D, F, G)) we get Line(D, center(Circle(D, F, G))) == internal_angle_bisector(F, center(Circle(D, F, G)), F)
By external_angle_bisector_definition_v0_r on center(Circle(C, F, G)), D, center(Circle(C, F, G)), F we get Line(D, F) == external_angle_bisector(center(Circle(C, F, G)), F, center(Circle(C, F, G)))
By collinear_definition on A, D, line_intersection(g, Line(E, F)) we get D in Line(A, line_intersection(g, Line(E, F))), line_intersection(g, Line(E, F)) in Line(A, D), Line(A, D) == Line(A, line_intersection(g, Line(E, F))), 0 == 2 * angle(D, A, line_intersection(g, Line(E, F))) mod 360
By reverse_direction on center(Circle(A, F, H)), H we get 180 == direction(center(Circle(A, F, H)), H) - direction(H, center(Circle(A, F, H))) mod 360
By perpendicular_angle_conditions_v0 on center(Circle(C, F, G)), F, center(Circle(D, F, G)) we get angle(center(Circle(C, F, G)), F, center(Circle(D, F, G))) == orientation(F, center(Circle(D, F, G)), center(Circle(C, F, G))) mod 360
By internal_angle_bisector_definition_v0_r on D, F, D, center(Circle(D, F, G)) we get Line(F, center(Circle(D, F, G))) == internal_angle_bisector(D, center(Circle(D, F, G)), D)
By collinear_definition on F, E, line_intersection(g, Line(E, F)) we get E in Line(F, line_intersection(g, Line(E, F))), line_intersection(g, Line(E, F)) in Line(E, F), Line(E, F) == Line(F, line_intersection(g, Line(E, F))), 0 == 2 * angle(E, F, line_intersection(g, Line(E, F))) mod 360
By reverse_direction on center(Circle(D, F, G)), G we get 180 == direction(center(Circle(D, F, G)), G) - direction(G, center(Circle(D, F, G))) mod 360
By perpendicular_angle_conditions_v0 on H, G, center(Circle(D, F, G)) we get angle(H, G, center(Circle(D, F, G))) == orientation(G, center(Circle(D, F, G)), H) mod 360
By perpendicular_angle_conditions_v0 on C, F, center(Circle(A, F, H)) we get angle(C, F, center(Circle(A, F, H))) == orientation(C, F, center(Circle(A, F, H))) mod 360
By reverse_direction on center(Circle(D, F, G)), F we get 180 == direction(center(Circle(D, F, G)), F) - direction(F, center(Circle(D, F, G))) mod 360
By perpendicular_angle_conditions_v0 on center(Circle(D, F, G)), G, H we get angle(center(Circle(D, F, G)), G, H) == orientation(G, H, center(Circle(D, F, G))) mod 360
By internal_angle_bisector_definition_v0 on B, line_intersection(g, Line(E, F)), C, A we get angle(B, A, line_intersection(g, Line(E, F))) == angle(line_intersection(g, Line(E, F)), A, C) mod 360
By reverse_direction on center(Circle(D, F, G)), D we get 180 == direction(center(Circle(D, F, G)), D) - direction(D, center(Circle(D, F, G))) mod 360
By perpendicular_angle_conditions_v0 on C, F, center(Circle(D, F, G)) we get angle(C, F, center(Circle(D, F, G))) == orientation(C, F, center(Circle(D, F, G))) mod 360
By internal_angle_bisector_definition_v0 on H, line_intersection(g, Line(E, F)), B, A we get angle(H, A, line_intersection(g, Line(E, F))) == angle(line_intersection(g, Line(E, F)), A, B) mod 360
By perpendicular_angle_conditions_v0 on center(Circle(C, F, G)), F, center(Circle(A, F, H)) we get angle(center(Circle(C, F, G)), F, center(Circle(A, F, H))) == orientation(F, center(Circle(A, F, H)), center(Circle(C, F, G))) mod 360
By collinear_definition on D, A, line_intersection(g, Line(E, F)) we get A in Line(D, line_intersection(g, Line(E, F))), line_intersection(g, Line(E, F)) in Line(A, D), Line(A, D) == Line(D, line_intersection(g, Line(E, F))), 0 == 2 * angle(A, D, line_intersection(g, Line(E, F))) mod 360
By collinear_definition on A, line_intersection(g, Line(E, F)), D we get line_intersection(g, Line(E, F)) in Line(A, D), D in Line(A, line_intersection(g, Line(E, F))), Line(A, D) == Line(A, line_intersection(g, Line(E, F))), 0 == 2 * angle(line_intersection(g, Line(E, F)), A, D) mod 360
By collinear_definition on E, line_intersection(g, Line(E, F)), F we get line_intersection(g, Line(E, F)) in Line(E, F), F in Line(E, line_intersection(g, Line(E, F))), Line(E, F) == Line(E, line_intersection(g, Line(E, F))), 0 == 2 * angle(line_intersection(g, Line(E, F)), E, F) mod 360
By collinear_definition on F, line_intersection(g, Line(E, F)), E we get line_intersection(g, Line(E, F)) in Line(E, F), E in Line(F, line_intersection(g, Line(E, F))), Line(E, F) == Line(F, line_intersection(g, Line(E, F))), 0 == 2 * angle(line_intersection(g, Line(E, F)), F, E) mod 360
By perpendicular_angle_conditions_v0 on center(Circle(D, F, G)), F, center(Circle(C, F, G)) we get angle(center(Circle(D, F, G)), F, center(Circle(C, F, G))) == orientation(F, center(Circle(C, F, G)), center(Circle(D, F, G))) mod 360
By perpendicular_angle_conditions_v0 on center(Circle(A, F, H)), F, center(Circle(C, F, G)) we get angle(center(Circle(A, F, H)), F, center(Circle(C, F, G))) == orientation(F, center(Circle(C, F, G)), center(Circle(A, F, H))) mod 360
By reverse_direction on center(Circle(A, F, H)), A we get 180 == direction(center(Circle(A, F, H)), A) - direction(A, center(Circle(A, F, H))) mod 360
By internal_angle_bisector_definition_v0 on C, line_intersection(g, Line(E, F)), B, A we get angle(C, A, line_intersection(g, Line(E, F))) == angle(line_intersection(g, Line(E, F)), A, B) mod 360
By perpendicular_angle_conditions_v0 on center(Circle(A, F, H)), F, C we get angle(center(Circle(A, F, H)), F, C) == orientation(C, center(Circle(A, F, H)), F) mod 360
By power_of_a_point_on_circle on line_circle_tangent_point(Line(G, H), Circle(D, F, G)), Circle(D, F, G) we get 0 == power_of_a_point(line_circle_tangent_point(Line(G, H), Circle(D, F, G)), Circle(D, F, G))
By internal_angle_bisector_definition_v0 on B, line_intersection(g, Line(E, F)), H, A we get angle(B, A, line_intersection(g, Line(E, F))) == angle(line_intersection(g, Line(E, F)), A, H) mod 360
By perpendicular_angle_conditions_v0 on center(Circle(D, F, G)), F, C we get angle(center(Circle(D, F, G)), F, C) == orientation(C, center(Circle(D, F, G)), F) mod 360
By collinear_definition on E, F, line_intersection(g, Line(E, F)) we get F in Line(E, line_intersection(g, Line(E, F))), line_intersection(g, Line(E, F)) in Line(E, F), Line(E, F) == Line(E, line_intersection(g, Line(E, F))), 0 == 2 * angle(F, E, line_intersection(g, Line(E, F))) mod 360
By internal_angle_bisector_definition_v0 on E, line_intersection(g, Line(E, F)), B, A we get angle(E, A, line_intersection(g, Line(E, F))) == angle(line_intersection(g, Line(E, F)), A, B) mod 360
By reverse_direction on center(Circle(A, F, H)), F we get 180 == direction(center(Circle(A, F, H)), F) - direction(F, center(Circle(A, F, H))) mod 360
By perpendicular_lines_draw_intersection on Line(F, center(Circle(A, F, H))), Line(C, F) we get exists(line_intersection(Line(C, F), Line(F, center(Circle(A, F, H)))))
By perpendicular_lines_draw_intersection on Line(G, H), Line(G, center(Circle(D, F, G))) we get exists(line_intersection(Line(G, H), Line(G, center(Circle(D, F, G)))))
By perpendicular_lines_draw_intersection on Line(C, F), Line(F, center(Circle(D, F, G))) we get exists(line_intersection(Line(C, F), Line(F, center(Circle(D, F, G)))))
By altitude_definition on C, F, center(Circle(A, F, H)), Line(C, F) we get Line(C, F) == altitude(C, F, center(Circle(A, F, H)))
By altitude_definition on D, F, line_intersection(g, Line(E, F)), g we get g == altitude(D, F, line_intersection(g, Line(E, F)))
By altitude_definition on A, F, line_intersection(g, Line(E, F)), g we get g == altitude(A, F, line_intersection(g, Line(E, F)))
By anti_similar_triangle_basic_properties on G, center(Circle(C, F, G)), C, C, center(Circle(C, F, G)), G we get angle(G, center(Circle(C, F, G)), C) == 0 - angle(C, center(Circle(C, F, G)), G) mod 360, angle(center(Circle(C, F, G)), C, G) == 0 - angle(center(Circle(C, F, G)), G, C) mod 360, angle(C, G, center(Circle(C, F, G))) == 0 - angle(G, C, center(Circle(C, F, G))) mod 360, log(distance(C, center(Circle(C, F, G)))) + log(distance(C, center(Circle(C, F, G)))) == log(distance(G, center(Circle(C, F, G)))) + log(distance(G, center(Circle(C, F, G)))), log(distance(C, center(Circle(C, F, G)))) + log(distance(C, G)) == log(distance(G, center(Circle(C, F, G)))) + log(distance(C, G)), log(distance(C, G)) + log(distance(C, center(Circle(C, F, G)))) == log(distance(C, G)) + log(distance(G, center(Circle(C, F, G))))
By anti_similar_triangle_basic_properties on H, G, center(c), G, H, center(c) we get angle(H, G, center(c)) == 0 - angle(G, H, center(c)) mod 360, angle(G, center(c), H) == 0 - angle(H, center(c), G) mod 360, angle(center(c), H, G) == 0 - angle(center(c), G, H) mod 360, log(distance(G, H)) + log(distance(G, center(c))) == log(distance(G, H)) + log(distance(H, center(c))), log(distance(G, center(c))) + log(distance(G, center(c))) == log(distance(H, center(c))) + log(distance(H, center(c))), log(distance(G, center(c))) + log(distance(G, H)) == log(distance(H, center(c))) + log(distance(G, H))
By perpendicular_angle_conditions_v0 on E, line_intersection(g, Line(E, F)), D we get angle(E, line_intersection(g, Line(E, F)), D) == orientation(D, E, line_intersection(g, Line(E, F))) mod 360
By anti_similar_triangle_basic_properties on H, D, center(c), D, H, center(c) we get angle(H, D, center(c)) == 0 - angle(D, H, center(c)) mod 360, angle(D, center(c), H) == 0 - angle(H, center(c), D) mod 360, angle(center(c), H, D) == 0 - angle(center(c), D, H) mod 360, log(distance(D, H)) + log(distance(D, center(c))) == log(distance(D, H)) + log(distance(H, center(c))), log(distance(D, center(c))) + log(distance(D, center(c))) == log(distance(H, center(c))) + log(distance(H, center(c))), log(distance(D, center(c))) + log(distance(D, H)) == log(distance(H, center(c))) + log(distance(D, H))
By altitude_definition on center(Circle(A, F, H)), F, C, Line(F, center(Circle(A, F, H))) we get Line(F, center(Circle(A, F, H))) == altitude(center(Circle(A, F, H)), C, F)
By altitude_definition on center(Circle(C, F, G)), center(Circle(D, F, G)), F, Line(C, F) we get Line(C, F) == altitude(center(Circle(C, F, G)), F, center(Circle(D, F, G)))
By altitude_definition on center(Circle(A, F, H)), F, center(Circle(C, F, G)), Line(F, center(Circle(A, F, H))) we get Line(F, center(Circle(A, F, H))) == altitude(center(Circle(A, F, H)), F, center(Circle(C, F, G)))
By anti_similar_triangle_basic_properties on D, center(c), G, G, center(c), D we get angle(D, center(c), G) == 0 - angle(G, center(c), D) mod 360, angle(center(c), G, D) == 0 - angle(center(c), D, G) mod 360, angle(G, D, center(c)) == 0 - angle(D, G, center(c)) mod 360, log(distance(D, center(c))) + log(distance(D, center(c))) == log(distance(G, center(c))) + log(distance(G, center(c))), log(distance(D, center(c))) + log(distance(D, G)) == log(distance(G, center(c))) + log(distance(D, G)), log(distance(D, G)) + log(distance(D, center(c))) == log(distance(D, G)) + log(distance(G, center(c)))
By sas_anti_congruence on G, center(Circle(D, F, G)), F, F, center(Circle(D, F, G)), G we get anti_congruent_triangles(F, G, center(Circle(D, F, G)), G, F, center(Circle(D, F, G)))
By anti_similar_triangle_basic_properties on G, F, center(Circle(C, F, G)), F, G, center(Circle(C, F, G)) we get angle(G, F, center(Circle(C, F, G))) == 0 - angle(F, G, center(Circle(C, F, G))) mod 360, angle(F, center(Circle(C, F, G)), G) == 0 - angle(G, center(Circle(C, F, G)), F) mod 360, angle(center(Circle(C, F, G)), G, F) == 0 - angle(center(Circle(C, F, G)), F, G) mod 360, log(distance(F, G)) + log(distance(F, center(Circle(C, F, G)))) == log(distance(F, G)) + log(distance(G, center(Circle(C, F, G)))), log(distance(F, center(Circle(C, F, G)))) + log(distance(F, center(Circle(C, F, G)))) == log(distance(G, center(Circle(C, F, G)))) + log(distance(G, center(Circle(C, F, G)))), log(distance(F, center(Circle(C, F, G)))) + log(distance(F, G)) == log(distance(G, center(Circle(C, F, G)))) + log(distance(F, G))
By anti_similar_triangle_basic_properties on D, center(Circle(C, D, E)), E, E, center(Circle(C, D, E)), D we get angle(D, center(Circle(C, D, E)), E) == 0 - angle(E, center(Circle(C, D, E)), D) mod 360, angle(center(Circle(C, D, E)), E, D) == 0 - angle(center(Circle(C, D, E)), D, E) mod 360, angle(E, D, center(Circle(C, D, E))) == 0 - angle(D, E, center(Circle(C, D, E))) mod 360, log(distance(D, center(Circle(C, D, E)))) + log(distance(D, center(Circle(C, D, E)))) == log(distance(E, center(Circle(C, D, E)))) + log(distance(E, center(Circle(C, D, E)))), log(distance(D, center(Circle(C, D, E)))) + log(distance(D, E)) == log(distance(E, center(Circle(C, D, E)))) + log(distance(D, E)), log(distance(D, E)) + log(distance(D, center(Circle(C, D, E)))) == log(distance(D, E)) + log(distance(E, center(Circle(C, D, E))))
By sas_anti_congruence on A, center(Circle(A, F, H)), F, F, center(Circle(A, F, H)), A we get anti_congruent_triangles(A, F, center(Circle(A, F, H)), F, A, center(Circle(A, F, H)))
By anti_similar_triangle_basic_properties on C, F, center(Circle(C, D, E)), F, C, center(Circle(C, D, E)) we get angle(C, F, center(Circle(C, D, E))) == 0 - angle(F, C, center(Circle(C, D, E))) mod 360, angle(F, center(Circle(C, D, E)), C) == 0 - angle(C, center(Circle(C, D, E)), F) mod 360, angle(center(Circle(C, D, E)), C, F) == 0 - angle(center(Circle(C, D, E)), F, C) mod 360, log(distance(C, F)) + log(distance(C, center(Circle(C, D, E)))) == log(distance(C, F)) + log(distance(F, center(Circle(C, D, E)))), log(distance(C, center(Circle(C, D, E)))) + log(distance(C, center(Circle(C, D, E)))) == log(distance(F, center(Circle(C, D, E)))) + log(distance(F, center(Circle(C, D, E)))), log(distance(C, center(Circle(C, D, E)))) + log(distance(C, F)) == log(distance(F, center(Circle(C, D, E)))) + log(distance(C, F))
By altitude_definition on F, D, line_intersection(g, Line(E, F)), Line(E, F) we get Line(E, F) == altitude(F, D, line_intersection(g, Line(E, F)))
By altitude_definition on D, line_intersection(g, Line(E, F)), E, g we get g == altitude(D, E, line_intersection(g, Line(E, F)))
By isosceles_triangle_properties on center(Circle(D, F, G)), G, D we get distance(D, center(Circle(D, F, G))) == distance(G, center(Circle(D, F, G))), angle(G, D, center(Circle(D, F, G))) == angle(center(Circle(D, F, G)), G, D) mod 360
By sas_anti_congruence on D, center(Circle(D, F, G)), G, G, center(Circle(D, F, G)), D we get anti_congruent_triangles(D, G, center(Circle(D, F, G)), G, D, center(Circle(D, F, G)))
By altitude_definition on F, line_intersection(g, Line(E, F)), A, Line(E, F) we get Line(E, F) == altitude(F, A, line_intersection(g, Line(E, F)))
By altitude_definition on A, line_intersection(g, Line(E, F)), E, g we get g == altitude(A, E, line_intersection(g, Line(E, F)))
By isosceles_triangle_properties on center(Circle(A, F, H)), F, A we get distance(A, center(Circle(A, F, H))) == distance(F, center(Circle(A, F, H))), angle(F, A, center(Circle(A, F, H))) == angle(center(Circle(A, F, H)), F, A) mod 360
By isosceles_triangle_properties on center(Circle(D, F, G)), G, F we get distance(F, center(Circle(D, F, G))) == distance(G, center(Circle(D, F, G))), angle(G, F, center(Circle(D, F, G))) == angle(center(Circle(D, F, G)), G, F) mod 360
By perpendicular_angle_conditions_v0 on A, line_intersection(g, Line(E, F)), F we get angle(A, line_intersection(g, Line(E, F)), F) == orientation(A, line_intersection(g, Line(E, F)), F) mod 360
By anti_similar_triangle_basic_properties on center(Circle(C, D, E)), D, F, center(Circle(C, D, E)), F, D we get angle(center(Circle(C, D, E)), D, F) == 0 - angle(center(Circle(C, D, E)), F, D) mod 360, angle(D, F, center(Circle(C, D, E))) == 0 - angle(F, D, center(Circle(C, D, E))) mod 360, angle(F, center(Circle(C, D, E)), D) == 0 - angle(D, center(Circle(C, D, E)), F) mod 360, log(distance(D, center(Circle(C, D, E)))) + log(distance(D, F)) == log(distance(F, center(Circle(C, D, E)))) + log(distance(D, F)), log(distance(D, F)) + log(distance(D, center(Circle(C, D, E)))) == log(distance(D, F)) + log(distance(F, center(Circle(C, D, E)))), log(distance(D, center(Circle(C, D, E)))) + log(distance(D, center(Circle(C, D, E)))) == log(distance(F, center(Circle(C, D, E)))) + log(distance(F, center(Circle(C, D, E))))
By anti_similar_triangle_basic_properties on A, center(c), D, D, center(c), A we get angle(A, center(c), D) == 0 - angle(D, center(c), A) mod 360, angle(center(c), D, A) == 0 - angle(center(c), A, D) mod 360, angle(D, A, center(c)) == 0 - angle(A, D, center(c)) mod 360, log(distance(A, center(c))) + log(distance(A, center(c))) == log(distance(D, center(c))) + log(distance(D, center(c))), log(distance(A, center(c))) + log(distance(A, D)) == log(distance(D, center(c))) + log(distance(A, D)), log(distance(A, D)) + log(distance(A, center(c))) == log(distance(A, D)) + log(distance(D, center(c)))
By isosceles_triangle_properties on center(Circle(A, F, H)), A, F we get distance(A, center(Circle(A, F, H))) == distance(F, center(Circle(A, F, H))), angle(A, F, center(Circle(A, F, H))) == angle(center(Circle(A, F, H)), A, F) mod 360
By sas_anti_congruence on F, center(Circle(A, F, H)), A, A, center(Circle(A, F, H)), F we get anti_congruent_triangles(A, F, center(Circle(A, F, H)), F, A, center(Circle(A, F, H)))
By isosceles_triangle_properties on center(Circle(D, F, G)), D, G we get distance(D, center(Circle(D, F, G))) == distance(G, center(Circle(D, F, G))), angle(D, G, center(Circle(D, F, G))) == angle(center(Circle(D, F, G)), D, G) mod 360
By isosceles_triangle_properties on center(Circle(A, F, H)), F, H we get distance(F, center(Circle(A, F, H))) == distance(H, center(Circle(A, F, H))), angle(F, H, center(Circle(A, F, H))) == angle(center(Circle(A, F, H)), F, H) mod 360
By collinear_definition on line_intersection(g, Line(E, F)), A, D we get A in Line(D, line_intersection(g, Line(E, F))), D in Line(A, line_intersection(g, Line(E, F))), Line(A, line_intersection(g, Line(E, F))) == Line(D, line_intersection(g, Line(E, F))), 0 == 2 * angle(A, line_intersection(g, Line(E, F)), D) mod 360
By sas_anti_congruence on F, center(Circle(D, F, G)), G, G, center(Circle(D, F, G)), F we get anti_congruent_triangles(F, G, center(Circle(D, F, G)), G, F, center(Circle(D, F, G)))
By isosceles_triangle_properties on center(Circle(A, F, H)), H, A we get distance(A, center(Circle(A, F, H))) == distance(H, center(Circle(A, F, H))), angle(H, A, center(Circle(A, F, H))) == angle(center(Circle(A, F, H)), H, A) mod 360
By anti_similar_triangle_basic_properties on A, center(c), G, G, center(c), A we get angle(A, center(c), G) == 0 - angle(G, center(c), A) mod 360, angle(center(c), G, A) == 0 - angle(center(c), A, G) mod 360, angle(G, A, center(c)) == 0 - angle(A, G, center(c)) mod 360, log(distance(A, center(c))) + log(distance(A, center(c))) == log(distance(G, center(c))) + log(distance(G, center(c))), log(distance(A, center(c))) + log(distance(A, G)) == log(distance(G, center(c))) + log(distance(A, G)), log(distance(A, G)) + log(distance(A, center(c))) == log(distance(A, G)) + log(distance(G, center(c)))
By perpendicular_angle_conditions_v0 on E, line_intersection(g, Line(E, F)), A we get angle(E, line_intersection(g, Line(E, F)), A) == orientation(A, E, line_intersection(g, Line(E, F))) mod 360
By altitude_definition on E, line_intersection(g, Line(E, F)), A, Line(E, F) we get Line(E, F) == altitude(E, A, line_intersection(g, Line(E, F)))
By altitude_definition on H, G, center(Circle(D, F, G)), Line(G, H) we get Line(G, H) == altitude(H, G, center(Circle(D, F, G)))
By altitude_definition on C, F, center(Circle(D, F, G)), Line(C, F) we get Line(C, F) == altitude(C, F, center(Circle(D, F, G)))
By collinear_definition on line_intersection(g, Line(E, F)), E, F we get E in Line(F, line_intersection(g, Line(E, F))), F in Line(E, line_intersection(g, Line(E, F))), Line(E, line_intersection(g, Line(E, F))) == Line(F, line_intersection(g, Line(E, F))), 0 == 2 * angle(E, line_intersection(g, Line(E, F)), F) mod 360
By sas_anti_congruence on A, center(Circle(A, F, H)), H, H, center(Circle(A, F, H)), A we get anti_congruent_triangles(A, H, center(Circle(A, F, H)), H, A, center(Circle(A, F, H)))
By collinear_definition on line_intersection(g, Line(E, F)), F, E we get F in Line(E, line_intersection(g, Line(E, F))), E in Line(F, line_intersection(g, Line(E, F))), Line(E, line_intersection(g, Line(E, F))) == Line(F, line_intersection(g, Line(E, F))), 0 == 2 * angle(F, line_intersection(g, Line(E, F)), E) mod 360
By altitude_definition on center(Circle(C, F, G)), F, center(Circle(A, F, H)), Line(C, F) we get Line(C, F) == altitude(center(Circle(C, F, G)), F, center(Circle(A, F, H)))
By altitude_definition on center(Circle(D, F, G)), F, C, Line(F, center(Circle(D, F, G))) we get Line(F, center(Circle(D, F, G))) == altitude(center(Circle(D, F, G)), C, F)
By sas_anti_congruence on H, center(Circle(A, F, H)), F, F, center(Circle(A, F, H)), H we get anti_congruent_triangles(F, H, center(Circle(A, F, H)), H, F, center(Circle(A, F, H)))
By altitude_definition on center(Circle(D, F, G)), center(Circle(C, F, G)), F, Line(F, center(Circle(D, F, G))) we get Line(F, center(Circle(D, F, G))) == altitude(center(Circle(D, F, G)), F, center(Circle(C, F, G)))
By radical_axis_definition_v0 on center(Circle(C, F, G)), Circle(C, F, G), Circle(C, D, E) we get power_of_a_point(center(Circle(C, F, G)), Circle(C, D, E)) == power_of_a_point(center(Circle(C, F, G)), Circle(C, F, G))
By perpendicular_angle_conditions_v0 on A, line_intersection(g, Line(E, F)), E we get angle(A, line_intersection(g, Line(E, F)), E) == orientation(A, line_intersection(g, Line(E, F)), E) mod 360
By sas_anti_congruence on G, center(Circle(D, F, G)), D, D, center(Circle(D, F, G)), G we get anti_congruent_triangles(D, G, center(Circle(D, F, G)), G, D, center(Circle(D, F, G)))
By perpendicular_angle_conditions_v0 on D, line_intersection(g, Line(E, F)), F we get angle(D, line_intersection(g, Line(E, F)), F) == orientation(D, line_intersection(g, Line(E, F)), F) mod 360
By altitude_definition on E, D, line_intersection(g, Line(E, F)), Line(E, F) we get Line(E, F) == altitude(E, D, line_intersection(g, Line(E, F)))
By perpendicular_angle_conditions_v0 on F, line_intersection(g, Line(E, F)), D we get angle(F, line_intersection(g, Line(E, F)), D) == orientation(D, F, line_intersection(g, Line(E, F))) mod 360
By isosceles_triangle_properties on center(Circle(A, F, H)), A, H we get distance(A, center(Circle(A, F, H))) == distance(H, center(Circle(A, F, H))), angle(A, H, center(Circle(A, F, H))) == angle(center(Circle(A, F, H)), A, H) mod 360
By isosceles_triangle_properties on center(Circle(D, F, G)), F, G we get distance(F, center(Circle(D, F, G))) == distance(G, center(Circle(D, F, G))), angle(F, G, center(Circle(D, F, G))) == angle(center(Circle(D, F, G)), F, G) mod 360
By isosceles_triangle_properties on center(Circle(A, F, H)), H, F we get distance(F, center(Circle(A, F, H))) == distance(H, center(Circle(A, F, H))), angle(H, F, center(Circle(A, F, H))) == angle(center(Circle(A, F, H)), H, F) mod 360
By perpendicular_angle_conditions_v0 on D, line_intersection(g, Line(E, F)), E we get angle(D, line_intersection(g, Line(E, F)), E) == orientation(D, line_intersection(g, Line(E, F)), E) mod 360
By sas_anti_congruence on F, center(Circle(A, F, H)), H, H, center(Circle(A, F, H)), F we get anti_congruent_triangles(F, H, center(Circle(A, F, H)), H, F, center(Circle(A, F, H)))
By collinear_definition on line_intersection(g, Line(E, F)), D, A we get D in Line(A, line_intersection(g, Line(E, F))), A in Line(D, line_intersection(g, Line(E, F))), Line(A, line_intersection(g, Line(E, F))) == Line(D, line_intersection(g, Line(E, F))), 0 == 2 * angle(D, line_intersection(g, Line(E, F)), A) mod 360
By sas_anti_congruence on H, center(Circle(A, F, H)), A, A, center(Circle(A, F, H)), H we get anti_congruent_triangles(A, H, center(Circle(A, F, H)), H, A, center(Circle(A, F, H)))
By altitude_definition on center(Circle(D, F, G)), H, G, Line(G, center(Circle(D, F, G))) we get Line(G, center(Circle(D, F, G))) == altitude(center(Circle(D, F, G)), G, H)
By perpendicular_angle_conditions_v0 on F, line_intersection(g, Line(E, F)), A we get angle(F, line_intersection(g, Line(E, F)), A) == orientation(A, F, line_intersection(g, Line(E, F))) mod 360
By anti_similar_triangle_basic_properties on F, E, center(Circle(C, D, E)), E, F, center(Circle(C, D, E)) we get angle(F, E, center(Circle(C, D, E))) == 0 - angle(E, F, center(Circle(C, D, E))) mod 360, angle(E, center(Circle(C, D, E)), F) == 0 - angle(F, center(Circle(C, D, E)), E) mod 360, angle(center(Circle(C, D, E)), F, E) == 0 - angle(center(Circle(C, D, E)), E, F) mod 360, log(distance(E, F)) + log(distance(E, center(Circle(C, D, E)))) == log(distance(E, F)) + log(distance(F, center(Circle(C, D, E)))), log(distance(E, center(Circle(C, D, E)))) + log(distance(E, center(Circle(C, D, E)))) == log(distance(F, center(Circle(C, D, E)))) + log(distance(F, center(Circle(C, D, E)))), log(distance(E, center(Circle(C, D, E)))) + log(distance(E, F)) == log(distance(F, center(Circle(C, D, E)))) + log(distance(E, F))
By anti_similar_triangle_basic_properties on H, A, center(c), A, H, center(c) we get angle(H, A, center(c)) == 0 - angle(A, H, center(c)) mod 360, angle(A, center(c), H) == 0 - angle(H, center(c), A) mod 360, angle(center(c), H, A) == 0 - angle(center(c), A, H) mod 360, log(distance(A, H)) + log(distance(A, center(c))) == log(distance(A, H)) + log(distance(H, center(c))), log(distance(A, center(c))) + log(distance(A, center(c))) == log(distance(H, center(c))) + log(distance(H, center(c))), log(distance(A, center(c))) + log(distance(A, H)) == log(distance(H, center(c))) + log(distance(A, H))
By anti_similar_triangle_basic_properties on E, C, center(Circle(C, D, E)), C, E, center(Circle(C, D, E)) we get angle(E, C, center(Circle(C, D, E))) == 0 - angle(C, E, center(Circle(C, D, E))) mod 360, angle(C, center(Circle(C, D, E)), E) == 0 - angle(E, center(Circle(C, D, E)), C) mod 360, angle(center(Circle(C, D, E)), E, C) == 0 - angle(center(Circle(C, D, E)), C, E) mod 360, log(distance(C, E)) + log(distance(C, center(Circle(C, D, E)))) == log(distance(C, E)) + log(distance(E, center(Circle(C, D, E)))), log(distance(C, center(Circle(C, D, E)))) + log(distance(C, center(Circle(C, D, E)))) == log(distance(E, center(Circle(C, D, E)))) + log(distance(E, center(Circle(C, D, E)))), log(distance(C, center(Circle(C, D, E)))) + log(distance(C, E)) == log(distance(E, center(Circle(C, D, E)))) + log(distance(C, E))
By power_of_a_point_tangent on center(Circle(C, F, G)), F, Circle(D, F, G) we get log(power_of_a_point(center(Circle(C, F, G)), Circle(D, F, G))) == 2 * log(distance(F, center(Circle(C, F, G))))
By power_of_a_point_tangent on center(Circle(C, F, G)), F, Circle(A, F, H) we get log(power_of_a_point(center(Circle(C, F, G)), Circle(A, F, H))) == 2 * log(distance(F, center(Circle(C, F, G))))
By power_of_a_point_definition on center(Circle(C, F, G)), C, F, Circle(C, F, G) we get log(power_of_a_point(center(Circle(C, F, G)), Circle(C, F, G))) == log(distance(C, center(Circle(C, F, G)))) + log(distance(F, center(Circle(C, F, G))))
By power_of_a_point_definition on center(Circle(C, F, G)), F, C, Circle(C, D, E) we get log(power_of_a_point(center(Circle(C, F, G)), Circle(C, D, E))) == log(distance(F, center(Circle(C, F, G)))) + log(distance(C, center(Circle(C, F, G))))
By power_of_a_point_definition on line_intersection(g, Line(E, F)), F, E, Circle(C, D, E) we get log(power_of_a_point(line_intersection(g, Line(E, F)), Circle(C, D, E))) == log(distance(F, line_intersection(g, Line(E, F)))) + log(distance(E, line_intersection(g, Line(E, F))))
By power_of_a_point_definition on center(Circle(C, D, E)), C, D, Circle(C, D, E) we get log(power_of_a_point(center(Circle(C, D, E)), Circle(C, D, E))) == log(distance(C, center(Circle(C, D, E)))) + log(distance(D, center(Circle(C, D, E))))
By power_of_a_point_definition on line_intersection(g, Line(E, F)), D, A, c we get log(power_of_a_point(line_intersection(g, Line(E, F)), c)) == log(distance(D, line_intersection(g, Line(E, F)))) + log(distance(A, line_intersection(g, Line(E, F))))
