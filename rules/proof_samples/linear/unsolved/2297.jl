Assumptions:
A, B, C, D, E, F, G, H, I: Point
f, g, h, i, j, k: Line
c: Circle
distinct(A, B, C, D, E, F, G, H, I)
distinct(f, g, h, i, j, k)
f == Line(A, B)
g == Line(B, C)
h == Line(A, C)
D == projection(A, g)
E == projection(B, h)
F == projection(C, f)
i == Line(A, D)
j == Line(B, E)
G == line_intersection(i, j)
c == Circle(A, D, E)
H in c
k == Line(C, H)
I in k, c

Embedding:
h := {"point": {"x": "-5.62203153032842006808778023696504533290863037109375", "y": "-4.74308822707747612668072179076261818408966064453125"}, "direction": {"x": "-1.5089719513874879641690540665877051651477813720703125", "y": "-0.460281182264181243368739160359837114810943603515625"}}
g := {"point": {"x": "-8.29975350001205214311994495801627635955810546875", "y": "-0.246970856242793301849047793439240194857120513916015625"}, "direction": {"x": "4.59513950859681319371929930639453232288360595703125", "y": "-5.5861661806015145970150115317665040493011474609375"}}
B := {"x": "-4.2104999209041388354966117648740635091066486399961091375153030523514896543701979680918157100677490234375", "y": "-5.218147466828837302026147902106722511784550569944060017426169621745923876687811571173369884490966796875"}
E := {"x": "-4.46322592285039889344283266613918590616158298700669735719285064342602738224931622497360211693740222551268269742386153364455385866772937791701777263822521793189443990044439125498021832573256798565973395389658061416823495868171063972288396444241004553781050209568543599664725321402992628578112530659764911643186370250572095800569540851546558918709177315346039025189660564377492994582085900402708209681042761271051492787893456339563684472940402494804960421836328541692979665310851680770658596117061311126251604160614131786432140273325763259908825202317108066300477714524354098006173666571000275755925739271082427730765399829657252310446324537322136105346507482321357090948294674989288227422736994675394920797526897739755815526404077151542457723175351625682817007022336630520262791548064298967795089555113652817215380544562009092667623426942969901198536987431706988517384741089602830089107671890118265951682020050224711455816286414305664976443124282060827047790940981701793870642831588532801117900518607533978610189989222285436956069425592827315126016762726332278075443610130209404017167951905375767742903970049281323736882640664351456721042280375743227061706951134640402792975077579315277988152043987780360114802287520783911115531481094757828177509509947230835675959890090703922637663515594948770404567542186616979686912233774099357711416535956201415849239512605690036609869695722647051293226004597440177295563565775763394216291505207830458594007927456359620487965006294824853499975190298282333414783445709890693621427112658536278612848498602571731398183658056485559647106677601981256801955580713785515285550293697956211283474461846176096994491598537581457105782930244722759371009845490197301016039326437764144173427895080559743226120249479149707156251728716293869954200533354034689999630243923329361416547854846137887952404181132070430322511028451802402886482739232278422775610775505036988077944466920907966509274148174960754954766008446468123277662000599678849569862584063653772035206203579269621", "y": "-4.3896181612264105257393529706743645504770531626068124898168417132122581192512069167825820386529189914734802265984357025488780995632425496736447206955399716117707146307803675734149942388974468303566704335523626604928914168398973980886418672167865387179944447968477211187953200225338743878984932901569338484749702169449070012996379649481180861492960087003790159274707888812929398537475915880847474696170255054913695817544291390625615624147173276504260557840946311128989156090684906520852970203208309154970572829361936019747406947038823464868983014256518252383075090673645777372533669271413295143829909900724986139000563478825985646656936751661695313279226647516839834135759320175880402024134576130732542641239476890311812935544380737920037509887749479238080755785649724047257308544475971552540406468304155578479810560070084730447210821808807146369690247783179293874040435847669557434230035015688253546437779713292011340690438050472448086543540792644818853891558258779988951798802097187764651643712125602356661490349511393355742531545557009218318017791624547785117029844522905780057708416598203679211005527150983605925953505684808449734503674830064150046813849737540944250343002928310794997574197781728473754242664880748441912207590621049784155680132520970826686364879178384802519474894973629588590581237387805368331450701792827100281091681758902800095010847408311072900198597970614619017284610228952565762516251137135370153833153347827047969432057003341372042732618829605766667805650318442700225464579568422079792402145557331071650346492890195013184855542677280164481673828449320954471000549163742359230101157198901917084116041623845120914966972644195931586404286425541885127308463476002518305069797613854680331882012660276934678443049415336848380086297812826064355907470599393802283935358812071450653743838647503127463586038037973763833895890346730984399083124184570108581657871775728459635800564296487929644484732377120171483922228413907520168062589915831362753707345306360131703383421554904143939954"}
A := {"x": "-5.643106806292775455059773352489460090477385647811278702000606851359502079412688857473767711780965328216552734375", "y": "-4.74951681107368480177951985980423756936603207467963144519252321787655506113434711323861847631633281707763671875"}
D := {"x": "-5.0185821483849634763907219233886637359325016675441634532924480140244044075264626056318840960722119676010960370613213981297244168779572496217809297531693275198662962046424769978513320716447377554818720494549020225271116823983207647567983567222019561745704109178030169212508642844824849434812407414416440268908908231080037015176990716754534795387707981374447311087519592700573978121731193399851637585909986637738710553400025065310242277980707697170582083739560698507303724803939256733706799415795052809964074097170152603608920656999080700941193566082252317058888214897843433050570450994799400019881928721167240233596271436718871278819331263227095262910721234793629312884036159583466225782585752834774150319393493990658954978326689519255296292115812312051597829105515766357457714113177077815614702577858673717226183489734677287545537109653475050754919529363309425588402353352097439325159562349059970479234984449089914053518909207439732757605871142790218291903255584579156177361524477925794838426117636070518050779391911480862374412602153493025280382905259396551514934650210868222553161514591079615033004819850251732529029778593968521449169256329187688603667904210493125270519330815256766566202178798134307159647244929225758904491864032941196719093643313495255723751990344991072023931991308583087827129317116500312169457941044252996940104804648002821002730443030468621337649280716594050486005415596200079257352487240006103452349105784632277139249734153509085340504803833906880321223399380906566655039345013675789881449146890345430008303848377234834368162682384690567600772478434211155784499031689416981717034435075642229424880848952213679082194942643926562055207215989067240170854022540331192447505216075684706402507505188123028361200698270990551376898164659782793871921957647408255580103228281798051439895851632950649695608546308841270413707565468850370290766677634802105116057038564768891786551528349329255927443706798883633319381167999385552797323789560436941206223028989088456980709424298695025839416", "y": "-4.2357873879121131469755737134587971380360700418614659320555590074204165785569148078113169129168250330663003308943245976832206324957884466704741027683718471088447917585696274163758048170460630339619319615169316218722327767184303182201453553394291341888269607634342314350555908733867529623510557237230733663449742888038163790621356113610576937611832150352968020156972833733321049458837293825055460133717508725386704388754081841839888258718164193985920097462636369177009181565928309867275787803820562909933762950368719364065837695322978437847078327863682064248450928283598460915524466075726585258863398240274293748001523497971401327921424447432329051692676477642430578015068422561772383155518294935708910462288858771346847198246163016626931112214518519771295751882403409550475354019329572910857673942660294641509796747737165859563405408630996014165906913327882454857994774741957334331354922638213637116017680341753383740125014718818521072504646764339382950785308333926745387534032098921288360510580607154028623866074863876807366487006453352760558979643750939971789822354952869955319747906084910658268213337891887718755102571891436035560836169410465671451692686050196730575964666917058408264874003713108395673991488471546451635872709293713815710717857604085057928033338756719325695687130578606301973664624019845893886332110728300001302656458387502435956307466806681444970431402288390804232034398260091330986021553375419409189473283661183347729257853835254502666611778259230020833230528518464462057330148269413984132585078429550295988756863548893949050920571819531688997709945194164210426598388060801770525535451724302308920702321884189518407752942744094600876006322572355515827762092575062847484730725544458505460101061613715314484544072065198633639973266021079927778901973531154072807968239920694839832825347600708910852654492636509085601530387605987461281587016496337734766096671962264711640208859790308816319870914966702419109503826313320382372314982522985496488235459335735208215507706583151701574232"}
c := {"center": {"x": "-4.9268033635984571452781925586817617997920171439036939197579549518554958668914434127827917109243571758270263671875", "y": "-4.983832138951261051902833880955480040575291322311845731309346419811239468911079342205994180403649806976318359375"}, "radius_squared": "0.56799429489410861656271140206901833996787181210060067049934380049560405024675192764711654252632981348219294056476434544082730037810133150637267189916467660216090203057959795764967595062266969563324892078526318073272705078125"}
C := {"x": "-4.806027871568468512157627596554268576961723493050563515191566491499392066400102319960118848577131293722652779252071739887788150321127308098768922655745810642802936635060959040449763550974435759827820827358035921577358159582660603958565494501320932085791801316149144481806185017071372097116996160974112461630564112729767520650193770534059434115172837798244768807018674292550546841211913533317438074639077224729305232534133880515877410986341218507351789359692684529210239949835696071461969802915823929760905394244034063204010866276385477871177734158176778669709080847163960079955637905127570497127143819740261694614349477233969350947614319204341921997178478522257518103993848585291179605727180200095453265666385897246718445546126705555184754607565203996561022003332669103817192654615097127161577348205301208002494331219953595763472285133047212622811871060303565941884079293779447315930694916984633066897771498196322196994070126615219611195511715009344789922114213442561055901506437432473412582941648579252662322079859688059941862973104818000926212389318634755962947312816806168618558996167807483797414510636422075144657466002634750575654957484700996340914226013106270640603143209728873113371678997822154947917394964144492275425079940232370656296618871996705787944638918272408969007643095500421119537920045086608723351970821545634360951573459036341770684617253592425751872530214902965328594568578388818547502263510836792130700682434344932916076021869502961497579057834298881022374213032715135810655531296718829259388256136869140277898618403327931040764448345039571116811205779313481773853804232240100470744327419741682138209626268809409707323159025140166213492021620216773000344689008417544420021045934219131161103730983886612021676563863710815000899698097347799833626055257479706706206138797306880722256686525436728905511288761880472116814206963430478351996566148365929509757531413219851950229837547923054589212580540948317845527614973552074223371368728251781408480563322979218327311116510379866848219", "y": "-4.4941829187709997219351661016612553189237646791042288368647289289305658747828121510884616706641833643370768559709806259825688428113572461291537065180830057013673926971763079372319501828677485012172369357353661060204847075535674703783274194669343719386427399879888519836309248745215988313329864654679765946495962990956961443117497323972830045172513525277858855700396479294333199969772604572224899597284305195431411966686001773764775302426322090583118022386790618270114707664866589310065817537440911874345876205321776594309247243650093609892798232768101054580509625501854761036514077723660873211304786659649096063305612067044160022481312919405970761574700891642265850130838442953508289540814424098624435620747933016929412527943619295693635601574203288242144803636532543482796715257917940392244474092373892136554414219615874603114343044531975070598733364066907450565349756600249893887389067415635135949155894414571071135939004278702346959274972453778867269343791411967380392755457160945981078540741991647691249409999010420748907754309168874813301998226905402489734728336159852531046979029394764486243637355057538075840289307652166855081016561151487123110228863443313818522946114886040452909312207772527164440645049115826685557240076500168371749230860337232950180605540646954883316695358449094152320181403154498629187210139947848897847001595011052523157797817537954865014530910075270957745083431302363222602542711724108175064637977631894097222055836771524648345571987713145053857394735945112219952183798570014980879955809780399726658234398513390831323064677328577379680766297131027032555956038233361050897615746837271295034228779015765657468554226209371798619336788827807098949424092820263447186819075277668963666881568880310664896838909346993091135435511860762759829832882320085318902602316284908909505768254788213546891473242134881229614103640213706123126145979630211237897261293235140443009400360780654267289394644825330539952175511695344129411651993506256329925286403280281334127174857665477021818136"}
k := {"point": {"x": "-4.806027871568468512157627596554268576961723493050563515191566491499392066400102319960118848577131293722652779252071739887788150321127308098768922655745810642802936635060959040449763550974435759827820827358035921577358159582660603958565494501320932085791801316149144481806185017071372097116996160974112461630564112729767520650193770534059434115172837798244768807018674292550546841211913533317438074639077224729305232534133880515877410986341218507351789359692684529210239949835696071461969802915823929760905394244034063204010866276385477871177734158176778669709080847163960079955637905127570497127143819740261694614349477233969350947614319204341921997178478522257518103993848585291179605727180200095453265666385897246718445546126705555184754607565203996561022003332669103817192654615097127161577348205301208002494331219953595763472285133047212622811871060303565941884079293779447315930694916984633066897771498196322196994070126615219611195511715009344789922114213442561055901506437432473412582941648579252662322079859688059941862973104818000926212389318634755962947312816806168618558996167807483797414510636422075144657466002634750575654957484700996340914226013106270640603143209728873113371678997822154947917394964144492275425079940232370656296618871996705787944638918272408969007643095500421119537920045086608723351970821545634360951573459036341770684617253592425751872530214902965328594568578388818547502263510836792130700682434344932916076021869502961497579057834298881022374213032715135810655531296718829259388256136869140277898618403327931040764448345039571116811205779313481773853804232240100470744327419741682138209626268809409707323159025140166213492021620216773000344689008417544420021045934219131161103730983886612021676563863710815000899698097347799833626055257479706706206138797306880722256686525436728905511288761880472116814206963430478351996566148365929509757531413219851950229837547923054589212580540948317845527614973552074223371368728251781408480563322979218327311116510379866848219", "y": "-4.4941829187709997219351661016612553189237646791042288368647289289305658747828121510884616706641833643370768559709806259825688428113572461291537065180830057013673926971763079372319501828677485012172369357353661060204847075535674703783274194669343719386427399879888519836309248745215988313329864654679765946495962990956961443117497323972830045172513525277858855700396479294333199969772604572224899597284305195431411966686001773764775302426322090583118022386790618270114707664866589310065817537440911874345876205321776594309247243650093609892798232768101054580509625501854761036514077723660873211304786659649096063305612067044160022481312919405970761574700891642265850130838442953508289540814424098624435620747933016929412527943619295693635601574203288242144803636532543482796715257917940392244474092373892136554414219615874603114343044531975070598733364066907450565349756600249893887389067415635135949155894414571071135939004278702346959274972453778867269343791411967380392755457160945981078540741991647691249409999010420748907754309168874813301998226905402489734728336159852531046979029394764486243637355057538075840289307652166855081016561151487123110228863443313818522946114886040452909312207772527164440645049115826685557240076500168371749230860337232950180605540646954883316695358449094152320181403154498629187210139947848897847001595011052523157797817537954865014530910075270957745083431302363222602542711724108175064637977631894097222055836771524648345571987713145053857394735945112219952183798570014980879955809780399726658234398513390831323064677328577379680766297131027032555956038233361050897615746837271295034228779015765657468554226209371798619336788827807098949424092820263447186819075277668963666881568880310664896838909346993091135435511860762759829832882320085318902602316284908909505768254788213546891473242134881229614103640213706123126145979630211237897261293235140443009400360780654267289394644825330539952175511695344129411651993506256329925286403280281334127174857665477021818136"}, "direction": {"x": "-4.1240464235817544391693445504643023014068603515625", "y": "-7.754440579568548486122381291352212429046630859375"}}
j := {"point": {"x": "-4.2104999209041388354966117648740635091066486399961091375153030523514896543701979680918157100677490234375", "y": "-5.218147466828837302026147902106722511784550569944060017426169621745923876687811571173369884490966796875"}, "direction": {"x": "-0.25272600194626005794622090126512239705493434701058821967754759107453772787911825688178640686965320207518269742386153364455385866772937791701777263822521793189443990044439125498021832573256798565973395389658061416823495868171063972288396444241004553781050209568543599664725321402992628578112530659764911643186370250572095800569540851546558918709177315346039025189660564377492994582085900402708209681042761271051492787893456339563684472940402494804960421836328541692979665310851680770658596117061311126251604160614131786432140273325763259908825202317108066300477714524354098006173666571000275755925739271082427730765399829657252310446324537322136105346507482321357090948294674989288227422736994675394920797526897739755815526404077151542457723175351625682817007022336630520262791548064298967795089555113652817215380544562009092667623426942969901198536987431706988517384741089602830089107671890118265951682020050224711455816286414305664976443124282060827047790940981701793870642831588532801117900518607533978610189989222285436956069425592827315126016762726332278075443610130209404017167951905375767742903970049281323736882640664351456721042280375743227061706951134640402792975077579315277988152043987780360114802287520783911115531481094757828177509509947230835675959890090703922637663515594948770404567542186616979686912233774099357711416535956201415849239512605690036609869695722647051293226004597440177295563565775763394216291505207830458594007927456359620487965006294824853499975190298282333414783445709890693621427112658536278612848498602571731398183658056485559647106677601981256801955580713785515285550293697956211283474461846176096994491598537581457105782930244722759371009845490197301016039326437764144173427895080559743226120249479149707156251728716293869954200533354034689999630243923329361416547854846137887952404181132070430322511028451802402886482739232278422775610775505036988077944466920907966509274148174960754954766008446468123277662000599678849569862584063653772035206203579269621000005", "y": "0.82852930560242677628679493143235796130749740733724752760932790853366575743660465439078784583804780540151977340156429745112190043675745032635527930446002838822928536921963242658500576110255316964332956644763733950710858316010260191135813278321346128200555520315227888120467997746612561210150670984306615152502978305509299870036203505188191385070399129962098407252921111870706014625240841191525253038297449450863041824557086093743843758528267234957394421590536888710108439093150934791470297967916908450294271706380639802525930529611765351310169857434817476169249093263542226274663307285867048561700900992750138609994365211740143533430632483383046867207733524831601658642406798241195979758654238692674573587605231096881870644556192620799624901122505207619192442143502759527426914555240284474595935316958444215201894399299152695527891781911928536303097522168207061259595641523304425657699649843117464535622202867079886593095619495275519134564592073551811461084417412200110482011979028122353483562878743976433385096504886066442574684544429907816819822083754522148829701554770942199422915834017963207889944728490163940740464943151915502654963251699358499531861502624590557496569970716892050024258022182715262457573351192515580877924093789502158443198674790291733136351208216151974805251050263704114094187626121946316685492982071728997189083182410971999049891525916889270998014020293853809827153897710474342374837488628646298461668466521729520305679429966586279572673811703942333321943496815572997745354204315779202075978544426689283496535071098049868151444573227198355183261715506790455289994508362576407698988428010980829158839583761548790850330273558040684135957135744581148726915365239974816949302023861453196681179873397230653215569505846631516199137021871739356440925294006061977160646411879285493462561613524968725364139619620262361661041096532690156009168758154298914183421282242715403641994357035120703555152676228798285160777715860924798319374100841686372462926546936398682966165784450958560600463"}}
i := {"point": {"x": "-5.643106806292775455059773352489460090477385647811278702000606851359502079412688857473767711780965328216552734375", "y": "-4.74951681107368480177951985980423756936603207467963144519252321787655506113434711323861847631633281707763671875"}, "direction": {"x": "0.62452465790781197866905142910079635454488398026711524870815883733509767188622625184188361570875336061545669731367860187027558312204275037821907024683067248013370379535752300214866792835526224451812795054509797747288831760167923524320164327779804382542958908219698307874913571551751505651875925855835597310910917689199629848230092832454652046122920186255526889124804072994260218782688066001483624140900133622612894465999749346897577220192923028294179162604393014926962751960607432662932005842049471900359259028298473963910793430009192990588064339177476829411117851021565669494295490052005999801180712788327597664037285632811287211806687367729047370892787652063706871159638404165337742174142471652258496806065060093410450216733104807447037078841876879484021708944842336425422858868229221843852974221413262827738165102653227124544628903465249492450804706366905744115976466479025606748404376509400295207650155509100859464810907925602672423941288572097817080967444154208438226384755220742051615738823639294819492206080885191376255873978465069747196170947406034484850653497891317774468384854089203849669951801497482674709702214060314785508307436708123113963320957895068747294806691847432334337978212018656928403527550707742410955081359670588032809063566865047442762480096550089279760680086914169121728706828834996878305420589557470030598951953519971789972695569695313786623507192834059495139945844037999207426475127599938965476508942153677228607502658464909146594951961660931196787766006190934333449606549863242101185508531096545699916961516227651656318373176153094323992275215657888442155009683105830182829655649243577705751191510477863209178050573560734379447927840109327598291459774596688075524947839243152935974924948118769716387993017290094486231018353402172061280780423525917444198967717182019485601041483670493503043914536911587295862924345311496297092333223651978948839429614352311082134484716506707440725562932011163666806188320006144472026762104395630587937769710109115430192905757013049741605839", "y": "0.51372942316157165480394614634544043132996203281816551313696421045613848257743230542730156339950778401133638785567540231677936750421155332952589723162815289115520824143037258362419518295393696603806803848306837812776722328156968177985464466057086581117303923656576856494440912661324703764894427627692663365502571119618362093786438863894230623881678496470319798430271662666789505411627061749445398662824912746132956112459181581601117412818358060140799025373636308229908184340716901327242121961794370900662370496312806359341623046770215621529216721363179357515490717164015390844755339242734147411366017597257062519984765020285986720785755525676709483073235223575694219849315774382276168444817050642910895377111412286531528017538369833730688877854814802287042481175965904495246459806704270891423260573397053584902032522628341404365945913690039858340930866721175451420052252580426656686450773617863628839823196582466162598749852811814789274953532356606170492146916660732546124659679010787116394894193928459713761339251361231926335129935466472394410203562490600282101776450471300446802520939150893417317866621081122812448974281085639644391638305895343285483073139498032694240353330829415917351259962868916043260085115284535483641272907062861842892821423959149420719666612432806743043128694213936980263353759801541061136678892716999986973435416124975640436925331933185550295685977116091957679656017399086690139784466245805908105267163388166522707421461647454973333882217407699791667694714815355379426698517305860158674149215704497040112431364511060509490794281804683110022900548058357895734016119391982294744645482756976910792976781158104815922470572559053991239936774276444841722379074249371525152692744555414945398989383862846855154559279348013663600267339789200722210980264688459271920317600793051601671746523992910891473455073634909143984696123940125387184129835036622652339033280377352883597911402096911836801290850332975808904961736866796176276850174770145035117645406642647917844922934168482984257676"}}
f := {"point": {"x": "-5.643106806292775455059773352489460090477385647811278702000606851359502079412688857473767711780965328216552734375", "y": "-4.74951681107368480177951985980423756936603207467963144519252321787655506113434711323861847631633281707763671875"}, "direction": {"x": "1.432606885388636619563161587615396581370737007815169564485303799008012425042490889381952001713216304779052734375", "y": "-0.46863065575515250024662804230248494241851849526442857223364640386936881555346445793475140817463397979736328125"}}
I := {"x": "-4.6865363135038988982762761891844204881602844024641924774439681486581326354266332182311574455224472505110690792117298765909472488063407101093465250333307983454562851137579202995017489928201187608484888009844025516553939340411160362485857801548748165030831885564904810645960202657134904641689991970032302668501089767796814025752999945655930908307991353392674271751104728889289073541536566944819121367968589205450821161378365019046843789296450313299910046507842753831285501278465579880517911836149293493094833532977403685531722327369914339640359586195899541350389872499769561084658742758961961581296173841982155965781717016686060069448234845604971286475118126656920023842082964552913117284720290339422738743223315130735171986646557631808411812098433925104812394460562705915307527199934647606379554295709531407712447814902526589348631628147407778867904844717899828245593656154904187659607463990892460321920455871283501684655907668984401144715219050239173611484016473084410646783930978729423575637768152918045330742712450523561326534822306396074468059928414929114605297927316088266564937157203536537139415649752061136247836992261245905963824812339262562709477662818305877332529628812653791504560496789195487821611996901122477410017592486020148205296453608241731866418637073815354059487973910868461765776987150713777280177341611888019572113236491489627431006292530959746511409103849766609215101784764895647519255868234391683717348924890989453014021654940437457732250411768065636259641266873786507280999181831410670355408557503139306149499049205426979468372699798486102058991176078163880632659170988817628105424431175738538966874410437925907646024251949024495630271248653370227078702901524416038713814553551517924939838281464926931210055340289859776651449035035048040009692213110492444196519916238090474007610947596949563116207038173788268894966903651016194134105735538515283725734168181470041787367650634568227310099911916479229676491011407171784861967778606608933066783777712924599139205548668976934089757", "y": "-4.2695030554519486326268755569556295706523881553079043633147000407728052331382144810557330196031398592839566795377415210928869475852287414064145517479702900870014078053166949998842317297430341669940907706115426813743791391725497669139873243388311732641468197723938879289997001589176819790409525351706860013910592765376107221757375869114977921722444537909282079475231641273439599654151789792433415062771752821586872960594828534398092267628833961552424037867967484440671641197031463798998237959651700636094086767882315150468217126508102849433380493743990872481933742303716884925924013563461095968004987945519548806923394012279836506812863331608489141735720824048816489422339133325025790865679063680474692154483181802564503455526331406731634001050706491146964893382890538974737173830884138537756566196568792057649448696733560170716548285176856451935804677629040073921051793562396654236180041262262241353173616290310649134505799365824614162676891716186562174814310839953120899516895204833861255182613659874582494876397904177284063887786045110147338740869480449604194480101697006391035882560503846543513009574754099840833860516257269349860172484519045564758201844074676482490537479117352091054659666496074904754423991307026308180350046333672658179123882985357943368300647552483954208667530464804937781560938961019381029775266050630995839760727360450383554677071819067987388583206716866430292578698569110448400632338274769932891557277692728775943415593417340136372639762002489771244861575368033214001412200396458662795940313751707578859292347174611969545909295962936039800104813167817172382666982446101430135613652409790691747497328811204422153244368250527225173765208963739117611859384328277599391198536407958784096903748143437376050450438369910068447901323811611332441514070301808571030624994058875486687069076922478492117309865601185973444490559105517255414197295992021158372458505933054498019220134406856679342559760827596834760032610404721177909214863966610950879444815854284234593377599760024415363096"}
H := {"x": "-5.3847661830866981057444003069337817656437308549732855206979793669834700289949433454832790273192236089142660845716383432640245349603541620271075697675818789852861595482173048784026471870983198342018566014118632428300560714793379308867212329372580576365498533585081490111611453981894841760925261958451857246831424107568567771118261615142939265533983668728412923007146152500547194999728980662782908509073027329944301564563377017695011910263661145240700885319863390111618571816627481823710802205555663299021915586612957200032440634805664190057512869884611997514369965677352634666840320926803790122011377742376175395528081453061612368283961068413825506491852850605111165957264456762332240880299205079972773892517132327896624078489257872668338778137979888346364528027231698624232129842201187307447018367980880636098118422228226966381187124140150115279148442314403010665947128297555818017179173432916766398616538647465034782638867832967206685571199392747115133570370809138236154129383451647753866710995725747740852688422664721353804024262491322040182325737848580060356793020001272767572191887258979038762304490469969439633665831716050664383207039568600532254288897221390215779396092932355669985579631754736896578629191749767772463349188402909298814329550863133477298675536644020533567265780251882728700333308437744792576119230350290776088995697705824064623227198094416710353949990751654833077005838835685053919598146858734657005429928692968941213135240976494453724339693456293603938268274758726522563620701189751459479983416226323925239347826358396436445992303091792519234103806808952146293430333410932361855337265174085345218386643345477173525621527560266498670894788073690954111878717209162225476213943962415961079408189512305239027955208035920219868148693700249303946446781774610231415459450437306076182598271788263344517168417685396392938472530466210617384686063942174591515377122003063148740437087535229398281298605770128748261489978597552935162159300408142684113411518091844100051627989662112164614507", "y": "-5.5823840171209727891390722271811989425743650760666947480367425521531863772098449701239888395012231304978009917586726492351627536422918293701794088133340102890263648136557247906510096191712068505784050799649033095888158110381578551080157068262756885825150393521029600953455938236154723400210966179848202933400643351978784167816289779928712071509493096391314777639565628957189007708101085892277196154837549966185165544924422374518484629593222094931301332745863238608037624977342066919409841754310221137511147081850556803681296204632133864574727604290271978445422779141693996598893739917221759487546980510065762760565654389956790326849923918536736055795629867649239996219973332300911828752718615752105001923956850105453122632930290502451011319452912100887991579714980544559466538521846404120669398429894626172156011392491604610564782456399511661362352717375439867468041687676996157786935690300663902969455880930133829245056744073494873826679848708698014012031575011363487655050124175434290324297304321585929649950612046409536970017206740193054567345271449248985284403005318044860779272540322513116106264766453558619679991389524478700718784367153934921253500139708105244116562460409551207267610167691117004466330883635961161833649508176098287871266575863748067388177120793865597912966145420096648128288759220245330362482476049652853845756368876505323109609679894704007451252431361808731814322632808009287868087826608558246355929926709083324814356163411328722998584157646198081345684325813693375020387516434448126338249949857322467970862083022810509241505825989772471002256538315086193661434436942254081924610196583497657286368868428293463577783979379693652372839309491257797078163000583520223331717817336466904254951295889712324189948360687811709168016129960261127965533522781219788440802567035182082197420693431767969708640150961303911987016526642070042944112114457310837782783407568825701454093063052584034724871826531069017547088783788303113902281249815978654385550396508699977451687805767995690158916"}
G := {"x": "-4.6121330980998514653553736862454586766288962946792417795891810123194468955052017603620842205186488281007928739550436511500346314571215945019934741470285496595481112713102553609539527500963543864769017728224312741622426003419685331305975932910799421377349440066674580856000131725226484257613257553478131051858919739745043610085749584820858841652362032390337549784896980250481336521219025908490257488241831797545751423881701295264253694303971410499376023499835582715330293468733970782603885123885663826374226085344628775812709226208055797865255137892737868420131141717182404645249117256404472527253152626426834576410510037757946072988196104008878491921025062264433797292413017345834046483372623867543817162586531707660239002565241579614147717901764740369966056428208919546244820328514795892613076994310459776547777002651275258108322524182325136994757172967115553379106284254526935276481614349152969363650201590097465132644462533462253328042009281185611922664189865250825071239553569558509988738483015443599704634288594596496591085203483948285764137471218753995141819631256234257608011686217603539547435364209236024977822463321963315915956144363526094998192603644772777464825981508010427304848088296062341713297838707735123945830828737972053577842308643147215307643480117253710777192683179491328897495930542378921056341097864565810454390105215076401278350166062184289509409314383818367532030381892626416114253709968995651641567318718160862660086539833912895294820238552614483098647353829135504158002685928095919604764983655388224173688551606640238895094185902272401767471434509790645875724828962866656752605996487227434317184762792975512972794750265055869290749745382062850809823795550316419975101281903331411882415221514807609645842362222199019779285126939454313565821607174462407370997489005363514376649441306744556861671516763086525810953639585366760976130303622458330218739421236073883924725034405478925729066003392010888442893194073165116939515203605393506939098271223284804927199489057320003493059", "y": "-3.901445367138993322601110391782011544875195083578840940500455822057050058365459944438658327217529000141002876865866870370361651788805214164980146682883876462288842444728415432336211278477245783236206165806668370824702477163315837902842540658232493275767931056400199610245799763074391954829219155715874712174759903632747129068864602936364592836365998623581047868418660802368580917646332088940907189695959747305594450988652273199826081887908219988145519384645267512057388843055798948046851853320510536972609746632606457996940074320244001759178418400793289514754768903110810805305994680524234270155644489216351292364615789950493583643196629177159423667546913845544514617358353119431051767799056173400271824174324440933285346825659161150667544946431301695421332226965529314450218407485651813858300983095364293632391333824945269171532551972494219469734304701666571166629817844778527306097789781579361913847528590676731721052111897576421627501265818150121752497025445874518948864366100684065341473873930908254161539301120822413200685634374479298697379308805681964260608442550497753143205837722884243070793214003131743803836268887825609734664915068368344655949118658258578164704550073472057157426993416044243801916715853093700960862801565717890372879484126547991770766425775555175018416694618257294761137499496976774875584850189871695759995741439782236594680764700074969199566314168638513852396138660191380207110735511319321680415109344626294752928771110983300821003083967822752771942067351857543072547456801403880945515517547376365462138139393689702575408551233231778743244586240468023469936078688453745737206427550308626225221874205367317249798946574129127592597814359088684819696968407701617415651345052049279130825374098201233141336222162752320089209296767523742713392053966469135651676610943379871824046794997887402923409700457518170021011275678853783810452617909140162697304014534368417991180414699197654718179207439386283611977727686740239393506169753403630947467924260727802322726210322798796130062"}
F := {"x": "-4.962392421299530831270438890784938947856761489595128750581899282548892544481834656560774316558480892149498406162816471365643692521273884523709945058546541405507388366334262808945515726977808250136993759201684627743559417802811278184692544563846012962017865592009534433450058196103154347443140430304577158251574022402648229547449524849579500750160817025423889476879115527207389695736629311263050613539521111799824312712302484230547476400203037244197471843608606033820087742069280453202816441352443206504259385138548988438590787631381506587910335278145003625779972896672399336780271191695214242337266757166873462444613126351550515369177538021647459824492681478878952077116498223227822882748455509946509050353925669638585366542625671048004461422681334933447777187907567780693226494080150891027482515031216494182087988936126716412627501589729393113612414512163304347957966516734066625538963121864260748328475943328119913489435177755703075819825414540928332543630355148154180865487162514990703528170429056726859870884143539693312208207767367303739732571171538681866093988380785349256699948112835638367788155386899359469693868859646689457309542115759043829638499533612416887017706602911022399756948985959160816428124282049880673880399538592269619850476072543544464224172676657899298991651595585006897112833804855464901171753381088231871497817419314025495765155504584291955943294282715635508348349831714932554632155930864121321129317196069237894985673390910755067686528175053412754967696936710607493950312310063670351019217240372923833206333865223971240325569850803154864247680791659805421252554611260112390417674874964754845294426323834813707300801369003950899393709153842025037676480871366151266870307718701041185817503258113919829325070490903446013129453187351432505940167871185237784502148917778960592633793707351864118109702894982573187662998936691035594651373983393903776975847848408845759568857277783458155466645123769158583072541727829509106066332443106403988495418545660819654025515005255025355227", "y": "-4.9721903385255722617703410004186116746312916724062416668973249377753557986504326768604640830185710614078787118702324079993561168399911540052959857345074274689468293499276695014818672624084381394593898368622605842942491285815573754781977395805492596254063591358503825462210867310402369603523601364637136709987023832388474678628483872153385297320617750692834741772052228026932158396345546554833454735967504083301593754817553527514425676722642697900200754933922465237581122253216674929129974334713604230595042500124625020859773295696603167210671682190493856276548304543039240301206646928492500274014329241511447725950631320619630394231328033965532120459541371456056430656194514416660544205368554622899315035945456629124003305102478930763925561102603626853096112305561464349698015961163486946689464257302757343579873601176861227902065991772268614623506170496934311973650815513841154826550721307483392634131826368108046013980938223391113670294577464017865855502747669073614262979618951068834718013057472090520111614522041548819422412610888708910990382610663064453207365954547456033905395342181714180094369518166608033592735286017305924172487754633963613297397317930185785226096873205208893036210640474827516048774325166433650575047655665840105874905738859378350278699771758535048468376361925009435185988564403281446999901044229889117319407434936902598904841967530046403572865924251098855526238814071951380961134609921758494548260125305510782657380048849253082702432541158137311670773221594269095965648647102850235560165527320275471080466629073953988076484912843909118190807654710666634749935648047368080784022183627706580481825028969840747849672227529476472150008211890837259813153626958712908295707967803974226674500117822813096725210689162732088253066596689672774601086273762756174470655566963441877063254426537581438979485454837517506396875767273956041486545425620302076060514314364239364605266672335962075767839546609298947606369054805705679398694883953374292430779341662577752378807827087339653141865"}

Need to prove:
concyclic(F, G, H, I)

Proof:
By line_definition on G, A, i we get i == Line(A, G)
By line_definition on A, E, h we get h == Line(A, E)
By line_definition on G, E, j we get j == Line(E, G)
By line_definition on I, H, k we get k == Line(H, I)
By line_definition on D, A, perpendicular_line(A, g) we get Line(A, D) == perpendicular_line(A, g)
By line_definition on E, B, perpendicular_line(B, h) we get Line(B, E) == perpendicular_line(B, h)
By line_definition on B, D, g we get g == Line(B, D)
By line_definition on A, F, f we get f == Line(A, F)
By line_definition on F, B, f we get f == Line(B, F)
By line_definition on C, D, g we get g == Line(C, D)
By line_definition on C, E, h we get h == Line(C, E)
By line_definition on I, C, k we get k == Line(C, I)
By line_definition on G, D, i we get i == Line(D, G)
By line_definition on F, C, perpendicular_line(C, f) we get Line(C, F) == perpendicular_line(C, f)
By line_definition on B, G, j we get j == Line(B, G)
By circle_definition on H, A, I, c we get c == Circle(A, H, I)
By line_intersection_definition on A, perpendicular_line(A, g), h we get A == line_intersection(h, perpendicular_line(A, g))
By circle_definition on D, H, A, c we get c == Circle(A, D, H)
By circle_definition on D, H, E, c we get c == Circle(D, E, H)
By circle_definition on D, E, I, c we get c == Circle(D, E, I)
By line_intersection_definition on D, i, g we get D == line_intersection(g, i)
By line_intersection_definition on C, g, perpendicular_line(C, f) we get C == line_intersection(g, perpendicular_line(C, f))
By perpendicular_line_definition on C, h, perpendicular_line(B, h) we get h == perpendicular_line(C, perpendicular_line(B, h))
By perpendicular_line_definition on D, perpendicular_line(A, g), g we get perpendicular_line(A, g) == perpendicular_line(D, g)
By perpendicular_line_definition on E, h, perpendicular_line(B, h) we get h == perpendicular_line(E, perpendicular_line(B, h))
By line_intersection_definition on A, f, perpendicular_line(A, g) we get A == line_intersection(f, perpendicular_line(A, g))
By circle_definition on A, I, D, c we get c == Circle(A, D, I)
By line_intersection_definition on B, perpendicular_line(B, h), f we get B == line_intersection(f, perpendicular_line(B, h))
By circle_definition on H, E, A, c we get c == Circle(A, E, H)
By circle_definition on H, I, E, c we get c == Circle(E, H, I)
By perpendicular_line_definition on A, f, perpendicular_line(C, f) we get f == perpendicular_line(A, perpendicular_line(C, f))
By line_intersection_definition on C, k, h we get C == line_intersection(h, k)
By line_intersection_definition on A, h, i we get A == line_intersection(h, i)
By line_intersection_definition on C, k, g we get C == line_intersection(g, k)
By perpendicular_line_definition on E, perpendicular_line(B, h), h we get perpendicular_line(B, h) == perpendicular_line(E, h)
By circle_definition on H, D, I, c we get c == Circle(D, H, I)
By line_intersection_definition on B, f, g we get B == line_intersection(f, g)
By circle_definition on I, A, E, c we get c == Circle(A, E, I)
By perpendicular_line_definition on D, g, perpendicular_line(A, g) we get g == perpendicular_line(D, perpendicular_line(A, g))
By line_intersection_definition on B, perpendicular_line(B, h), g we get B == line_intersection(g, perpendicular_line(B, h))
By perpendicular_line_definition on B, g, perpendicular_line(A, g) we get g == perpendicular_line(B, perpendicular_line(A, g))
By line_intersection_definition on C, h, g we get C == line_intersection(g, h)
By perpendicular_line_definition on F, f, perpendicular_line(C, f) we get f == perpendicular_line(F, perpendicular_line(C, f))
By line_intersection_definition on C, k, perpendicular_line(C, f) we get C == line_intersection(k, perpendicular_line(C, f))
By line_intersection_definition on B, f, j we get B == line_intersection(f, j)
By line_intersection_definition on B, j, g we get B == line_intersection(g, j)
By perpendicular_line_definition on C, g, perpendicular_line(A, g) we get g == perpendicular_line(C, perpendicular_line(A, g))
By line_intersection_definition on A, h, f we get A == line_intersection(f, h)
By line_intersection_definition on C, perpendicular_line(C, f), h we get C == line_intersection(h, perpendicular_line(C, f))
By line_intersection_definition on E, h, j we get E == line_intersection(h, j)
By perpendicular_line_definition on A, h, perpendicular_line(B, h) we get h == perpendicular_line(A, perpendicular_line(B, h))
By perpendicular_line_definition on B, f, perpendicular_line(C, f) we get f == perpendicular_line(B, perpendicular_line(C, f))
By line_intersection_definition on A, f, i we get A == line_intersection(f, i)
By perpendicular_line_definition on F, perpendicular_line(C, f), f we get perpendicular_line(C, f) == perpendicular_line(F, f)
By line_uniqueness on D, A, perpendicular_line(A, g), i we get i == perpendicular_line(A, g)
By line_uniqueness on B, E, j, perpendicular_line(B, h) we get j == perpendicular_line(B, h)
By in_imply_collinear on F, B, A we get collinear(A, B, F)
By in_imply_collinear on I, H, C we get collinear(C, H, I)
By in_imply_collinear on G, D, A we get collinear(A, D, G)
By in_imply_collinear on E, C, A we get collinear(A, C, E)
By in_imply_collinear on D, B, C we get collinear(B, C, D)
By in_imply_collinear on G, E, B we get collinear(B, E, G)
By in_imply_concyclic on D, E, A, H we get concyclic(A, D, E, H)
By in_imply_concyclic on E, A, D, I we get concyclic(A, D, E, I)
By power_of_a_point_on_circle on D, c we get 0 == power_of_a_point(D, c)
By power_of_a_point_on_circle on E, c we get 0 == power_of_a_point(E, c)
By power_of_a_point_in_circle on A, c we get 0 == power_of_a_point(A, c)
By power_of_a_point_in_circle on I, c we get 0 == power_of_a_point(I, c)
By angles_on_chord_v3 on E, A, D, H, c we get angle(E, D, A) == angle(E, H, A) + 180 mod 360
By angles_on_chord_v2 on D, H, I, A, c we get angle(D, I, H) == angle(D, A, H) + 180 mod 360
By angles_on_chord_v1 on I, E, H, D, c we get angle(I, D, E) == angle(I, H, E) mod 360
By power_of_a_point_in_circle on H, c we get 0 == power_of_a_point(H, c)
By angles_on_chord_v1 on A, I, E, H, c we get angle(A, E, I) == angle(A, H, I) mod 360
By angles_on_chord_v0 on I, D, E, H, c we get angle(I, E, D) == angle(I, H, D) mod 360
By angles_on_chord_v3 on E, A, I, H, c we get angle(E, I, A) == angle(E, H, A) + 180 mod 360
By angles_on_chord_v2 on D, H, E, A, c we get angle(D, E, H) == angle(D, A, H) + 180 mod 360
By angles_on_chord_v0 on I, D, E, A, c we get angle(I, A, D) == angle(I, E, D) mod 360
By angles_on_chord_v2 on I, A, E, D, c we get angle(I, E, A) == angle(I, D, A) + 180 mod 360
By angles_on_chord_v3 on A, E, H, I, c we get angle(A, H, E) == angle(A, I, E) + 180 mod 360
By angles_on_chord_v1 on H, D, E, I, c we get angle(H, E, D) == angle(H, I, D) mod 360
By angles_on_chord_v0 on I, D, A, H, c we get angle(I, A, D) == angle(I, H, D) mod 360
By angles_on_chord_v1 on E, A, D, I, c we get angle(E, D, A) == angle(E, I, A) mod 360
By angles_on_chord_v1 on A, D, H, E, c we get angle(A, E, D) == angle(A, H, D) mod 360
By angles_on_chord_v3 on D, E, H, I, c we get angle(D, H, E) == angle(D, I, E) + 180 mod 360
By angles_on_chord_v3 on I, H, A, E, c we get angle(I, A, H) == angle(I, E, H) + 180 mod 360
By angles_on_chord_v2 on I, H, E, D, c we get angle(I, E, H) == angle(I, D, H) + 180 mod 360
By angles_on_chord_v2 on A, I, D, H, c we get angle(A, D, I) == angle(A, H, I) + 180 mod 360
By angles_on_chord_v1 on A, D, H, I, c we get angle(A, H, D) == angle(A, I, D) mod 360
By angles_on_chord_v0 on H, E, A, I, c we get angle(H, A, E) == angle(H, I, E) mod 360
By angles_on_chord_v0 on H, E, D, A, c we get angle(H, A, E) == angle(H, D, E) mod 360
By angles_on_chord_v1 on A, D, I, E, c we get angle(A, E, D) == angle(A, I, D) mod 360
By angles_on_chord_v0 on I, A, H, E, c we get angle(I, E, A) == angle(I, H, A) mod 360
By angles_on_chord_v3 on E, D, I, H, c we get angle(E, I, D) == angle(E, H, D) + 180 mod 360
By angles_on_chord_v1 on E, H, A, D, c we get angle(E, A, H) == angle(E, D, H) mod 360
By angles_on_chord_v1 on H, A, I, E, c we get angle(H, E, A) == angle(H, I, A) mod 360
By angles_on_chord_v0 on A, H, D, I, c we get angle(A, D, H) == angle(A, I, H) mod 360
By angles_on_chord_v1 on E, H, A, I, c we get angle(E, A, H) == angle(E, I, H) mod 360
By angles_on_chord_v0 on A, H, E, D, c we get angle(A, D, H) == angle(A, E, H) mod 360
By angles_on_chord_v0 on A, H, E, I, c we get angle(A, E, H) == angle(A, I, H) mod 360
By angles_on_chord_v0 on E, I, A, D, c we get angle(E, A, I) == angle(E, D, I) mod 360
By angles_on_chord_v1 on D, I, A, E, c we get angle(D, A, I) == angle(D, E, I) mod 360
By angles_on_chord_v0 on H, I, D, A, c we get angle(H, A, I) == angle(H, D, I) mod 360
By angles_on_chord_v1 on E, H, I, D, c we get angle(E, D, H) == angle(E, I, H) mod 360
By angles_on_chord_v3 on I, A, D, H, c we get angle(I, D, A) == angle(I, H, A) + 180 mod 360
By angles_on_chord_v0 on H, E, I, D, c we get angle(H, D, E) == angle(H, I, E) mod 360
By angles_on_chord_v3 on I, A, D, E, c we get angle(I, D, A) == angle(I, E, A) + 180 mod 360
By angles_on_chord_v2 on E, A, H, I, c we get angle(E, H, A) == angle(E, I, A) + 180 mod 360
By angles_on_chord_v0 on E, I, A, H, c we get angle(E, A, I) == angle(E, H, I) mod 360
By angles_on_chord_v1 on D, I, H, E, c we get angle(D, E, I) == angle(D, H, I) mod 360
By angles_on_chord_v1 on I, E, A, H, c we get angle(I, A, E) == angle(I, H, E) mod 360
By angles_on_chord_v0 on D, A, E, I, c we get angle(D, E, A) == angle(D, I, A) mod 360
By angles_on_chord_v2 on H, D, A, I, c we get angle(H, A, D) == angle(H, I, D) + 180 mod 360
By angles_on_chord_v3 on A, I, E, D, c we get angle(A, E, I) == angle(A, D, I) + 180 mod 360
By angles_on_chord_v0 on D, H, E, I, c we get angle(D, E, H) == angle(D, I, H) mod 360
By angles_on_chord_v1 on H, A, I, D, c we get angle(H, D, A) == angle(H, I, A) mod 360
By angles_on_chord_v1 on D, I, A, H, c we get angle(D, A, I) == angle(D, H, I) mod 360
By angles_on_chord_v2 on A, I, D, E, c we get angle(A, D, I) == angle(A, E, I) + 180 mod 360
By angles_on_chord_v2 on D, E, I, A, c we get angle(D, I, E) == angle(D, A, E) + 180 mod 360
By angles_on_chord_v3 on I, H, D, E, c we get angle(I, D, H) == angle(I, E, H) + 180 mod 360
By angles_on_chord_v1 on D, E, H, A, c we get angle(D, A, E) == angle(D, H, E) mod 360
By angles_on_chord_v2 on E, D, H, I, c we get angle(E, H, D) == angle(E, I, D) + 180 mod 360
By angles_on_chord_v3 on H, D, I, A, c we get angle(H, I, D) == angle(H, A, D) + 180 mod 360
By angles_on_chord_v1 on I, H, A, D, c we get angle(I, A, H) == angle(I, D, H) mod 360
By angles_on_chord_v0 on A, E, D, I, c we get angle(A, D, E) == angle(A, I, E) mod 360
By angles_on_chord_v0 on D, A, E, H, c we get angle(D, E, A) == angle(D, H, A) mod 360
By angles_on_chord_v3 on D, H, A, I, c we get angle(D, A, H) == angle(D, I, H) + 180 mod 360
By angles_on_chord_v2 on E, D, A, I, c we get angle(E, A, D) == angle(E, I, D) + 180 mod 360
By angles_on_chord_v3 on A, I, H, D, c we get angle(A, H, I) == angle(A, D, I) + 180 mod 360
By angles_on_chord_v1 on I, E, D, A, c we get angle(I, A, E) == angle(I, D, E) mod 360
By angles_on_chord_v2 on H, D, A, E, c we get angle(H, A, D) == angle(H, E, D) + 180 mod 360
By angles_on_chord_v2 on E, A, H, D, c we get angle(E, H, A) == angle(E, D, A) + 180 mod 360
By angles_on_chord_v3 on H, I, E, D, c we get angle(H, E, I) == angle(H, D, I) + 180 mod 360
By angles_on_chord_v2 on I, H, E, A, c we get angle(I, E, H) == angle(I, A, H) + 180 mod 360
By angles_on_chord_v0 on E, I, D, H, c we get angle(E, D, I) == angle(E, H, I) mod 360
By angles_on_chord_v2 on A, E, I, H, c we get angle(A, I, E) == angle(A, H, E) + 180 mod 360
By angles_on_chord_v3 on E, D, I, A, c we get angle(E, I, D) == angle(E, A, D) + 180 mod 360
By angles_on_chord_v3 on H, D, E, A, c we get angle(H, E, D) == angle(H, A, D) + 180 mod 360
By angles_on_chord_v0 on D, A, I, H, c we get angle(D, H, A) == angle(D, I, A) mod 360
By angles_on_chord_v1 on H, A, D, E, c we get angle(H, D, A) == angle(H, E, A) mod 360
By angles_on_chord_v2 on I, A, H, D, c we get angle(I, H, A) == angle(I, D, A) + 180 mod 360
By angles_on_chord_v3 on D, E, A, I, c we get angle(D, A, E) == angle(D, I, E) + 180 mod 360
By angles_on_chord_v2 on D, E, I, H, c we get angle(D, I, E) == angle(D, H, E) + 180 mod 360
By angles_on_chord_v0 on E, D, A, H, c we get angle(E, A, D) == angle(E, H, D) mod 360
By angles_on_chord_v3 on D, H, A, E, c we get angle(D, A, H) == angle(D, E, H) + 180 mod 360
By angles_on_chord_v2 on H, I, A, E, c we get angle(H, A, I) == angle(H, E, I) + 180 mod 360
By angles_on_chord_v3 on H, I, E, A, c we get angle(H, E, I) == angle(H, A, I) + 180 mod 360
By angles_on_chord_v2 on A, E, D, H, c we get angle(A, D, E) == angle(A, H, E) + 180 mod 360
By angles_on_chord_v2 on H, I, D, E, c we get angle(H, D, I) == angle(H, E, I) + 180 mod 360
By angles_on_chord_v3 on A, E, H, D, c we get angle(A, H, E) == angle(A, D, E) + 180 mod 360
By altitude_definition on C, B, A, perpendicular_line(C, f) we get altitude(C, A, B) == perpendicular_line(C, f)
By altitude_definition on B, C, A, perpendicular_line(B, h) we get altitude(B, A, C) == perpendicular_line(B, h)
By altitude_definition on A, C, B, perpendicular_line(A, g) we get altitude(A, B, C) == perpendicular_line(A, g)
By concyclic_sufficient_conditions_v1 on H, E, I, A we get concyclic(A, E, H, I)
By concyclic_sufficient_conditions_v1 on E, I, D, H we get concyclic(D, E, H, I)
By concurrent_sufficient_conditions on Line(C, F), g, k we get concurrent(g, k, Line(C, F))
By concurrent_sufficient_conditions on k, Line(C, F), g we get concurrent(g, k, Line(C, F))
By concyclic_sufficient_conditions_v0 on I, D, H, A we get concyclic(A, D, H, I)
By concurrent_sufficient_conditions on k, g, Line(C, F) we get concurrent(g, k, Line(C, F))
By concurrent_sufficient_conditions on Line(C, F), h, g we get concurrent(g, h, Line(C, F))
By concurrent_sufficient_conditions on g, h, Line(C, F) we get concurrent(g, h, Line(C, F))
By concurrent_sufficient_conditions on Line(C, F), k, g we get concurrent(g, k, Line(C, F))
By concurrent_sufficient_conditions on h, Line(C, F), g we get concurrent(g, h, Line(C, F))
By concurrent_sufficient_conditions on Line(C, F), h, k we get concurrent(h, k, Line(C, F))
By concurrent_sufficient_conditions on Line(C, F), k, h we get concurrent(h, k, Line(C, F))
By concurrent_sufficient_conditions on h, g, Line(C, F) we get concurrent(g, h, Line(C, F))
By concurrent_sufficient_conditions on k, Line(C, F), h we get concurrent(h, k, Line(C, F))
By concurrent_sufficient_conditions on g, Line(C, F), k we get concurrent(g, k, Line(C, F))
By concurrent_sufficient_conditions on h, Line(C, F), k we get concurrent(h, k, Line(C, F))
By concurrent_sufficient_conditions on h, k, Line(C, F) we get concurrent(h, k, Line(C, F))
By concurrent_sufficient_conditions on g, Line(C, F), h we get concurrent(g, h, Line(C, F))
By concurrent_sufficient_conditions on k, h, Line(C, F) we get concurrent(h, k, Line(C, F))
By concurrent_sufficient_conditions on g, k, Line(C, F) we get concurrent(g, k, Line(C, F))
By concurrent_sufficient_conditions on Line(C, F), g, h we get concurrent(g, h, Line(C, F))
By line_intersection_definition on D, Line(D, H), g we get D == line_intersection(g, Line(D, H))
By line_intersection_definition on E, Line(E, H), j we get E == line_intersection(j, Line(E, H))
By line_intersection_definition on H, Line(E, H), Line(D, H) we get H == line_intersection(Line(D, H), Line(E, H))
By line_intersection_definition on A, Line(A, I), i we get A == line_intersection(i, Line(A, I))
By line_intersection_definition on D, i, Line(D, I) we get D == line_intersection(i, Line(D, I))
By orthocenter_concurrency on A, C, B we get orthocenter(A, B, C) in altitude(A, B, C), orthocenter(A, B, C) in altitude(C, A, B), orthocenter(A, B, C) in altitude(B, A, C)
By line_intersection_definition on E, h, Line(E, H) we get E == line_intersection(h, Line(E, H))
By line_intersection_definition on I, Line(D, I), Line(A, I) we get I == line_intersection(Line(A, I), Line(D, I))
By line_intersection_definition on E, h, Line(E, I) we get E == line_intersection(h, Line(E, I))
By line_intersection_definition on E, j, Line(E, I) we get E == line_intersection(j, Line(E, I))
By line_intersection_definition on D, i, Line(D, E) we get D == line_intersection(i, Line(D, E))
By line_intersection_definition on I, Line(D, I), Line(E, I) we get I == line_intersection(Line(D, I), Line(E, I))
By line_intersection_definition on E, Line(D, E), Line(E, I) we get E == line_intersection(Line(D, E), Line(E, I))
By line_intersection_definition on A, f, Line(A, I) we get A == line_intersection(f, Line(A, I))
By line_intersection_definition on D, Line(D, H), Line(D, E) we get D == line_intersection(Line(D, E), Line(D, H))
By line_intersection_definition on H, Line(D, H), k we get H == line_intersection(k, Line(D, H))
By line_intersection_definition on A, i, Line(A, H) we get A == line_intersection(i, Line(A, H))
By line_intersection_definition on I, Line(E, I), k we get I == line_intersection(k, Line(E, I))
By line_intersection_definition on H, Line(A, H), Line(D, H) we get H == line_intersection(Line(A, H), Line(D, H))
By line_intersection_definition on E, Line(D, E), h we get E == line_intersection(h, Line(D, E))
By line_intersection_definition on E, Line(E, H), Line(E, I) we get E == line_intersection(Line(E, H), Line(E, I))
By line_intersection_definition on D, Line(D, E), g we get D == line_intersection(g, Line(D, E))
By line_intersection_definition on D, g, Line(D, I) we get D == line_intersection(g, Line(D, I))
By line_intersection_definition on D, Line(D, I), Line(D, H) we get D == line_intersection(Line(D, H), Line(D, I))
By line_intersection_definition on E, Line(D, E), Line(E, H) we get E == line_intersection(Line(D, E), Line(E, H))
By line_intersection_definition on D, Line(D, I), Line(D, E) we get D == line_intersection(Line(D, E), Line(D, I))
By line_intersection_definition on A, h, Line(A, H) we get A == line_intersection(h, Line(A, H))
By line_intersection_definition on H, k, Line(A, H) we get H == line_intersection(k, Line(A, H))
By line_intersection_definition on A, h, Line(A, I) we get A == line_intersection(h, Line(A, I))
By line_intersection_definition on I, Line(A, I), k we get I == line_intersection(k, Line(A, I))
By line_intersection_definition on I, Line(D, I), k we get I == line_intersection(k, Line(D, I))
By line_intersection_definition on H, Line(A, H), Line(E, H) we get H == line_intersection(Line(A, H), Line(E, H))
By line_intersection_definition on A, Line(A, H), Line(A, I) we get A == line_intersection(Line(A, H), Line(A, I))
By perpendicular_line_definition on G, j, h we get j == perpendicular_line(G, h)
By line_intersection_definition on I, Line(A, I), Line(E, I) we get I == line_intersection(Line(A, I), Line(E, I))
By line_intersection_definition on A, Line(A, H), f we get A == line_intersection(f, Line(A, H))
By line_intersection_definition on H, k, Line(E, H) we get H == line_intersection(k, Line(E, H))
By line_intersection_definition on D, i, Line(D, H) we get D == line_intersection(i, Line(D, H))
By line_intersection_definition on E, Line(D, E), j we get E == line_intersection(j, Line(D, E))
By perpendicular_line_definition on G, i, g we get i == perpendicular_line(G, g)
By projection_definition on B, F, Line(C, F) we get F == projection(B, Line(C, F))
By projection_definition on C, D, i we get D == projection(C, i)
By projection_definition on C, E, j we get E == projection(C, j)
By projection_definition on B, D, i we get D == projection(B, i)
By projection_definition on A, F, Line(C, F) we get F == projection(A, Line(C, F))
By projection_definition on A, E, j we get E == projection(A, j)
By same_angle_v1 on E, C, A, D we get angle(A, E, D) == angle(C, E, D) mod 360
By same_angle_v0 on A, C, E, I we get angle(C, A, I) == angle(E, A, I) mod 360
By same_angle_v1 on I, C, H, D we get angle(C, I, D) == angle(H, I, D) mod 360
By same_angle_v1 on A, G, D, E we get angle(D, A, E) == angle(G, A, E) mod 360
By same_angle_v0 on E, C, A, H we get angle(A, E, H) == angle(C, E, H) mod 360
By perpendicular_direction_conditions_v0_r on D, A, D, C we get 180 == 2 * direction(D, A) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on B, D, D, A we get 180 == 2 * direction(B, D) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on A, E, G, E we get 180 == 2 * direction(A, E) - 2 * direction(G, E) mod 360
By same_angle_v1 on A, C, E, H we get angle(C, A, H) == angle(E, A, H) mod 360
By same_angle_v1 on A, D, G, I we get angle(D, A, I) == angle(G, A, I) mod 360
By same_angle_v0 on I, H, C, E we get angle(C, I, E) == angle(H, I, E) mod 360
By probably_between_and_collinear_implies_between on E, C, A we get between(A, C, E)
By same_angle_v1 on H, I, C, E we get angle(C, H, E) == angle(I, H, E) mod 360
By same_angle_v0 on H, I, C, A we get angle(C, H, A) == angle(I, H, A) mod 360
By perpendicular_direction_conditions_v0_r on D, B, D, A we get 180 == 2 * direction(D, B) - 2 * direction(D, A) mod 360
By same_angle_v3 on D, A, G, I we get angle(A, D, I) == angle(G, D, I) + 180 mod 360
By same_angle_v2 on D, A, G, H we get angle(A, D, H) == angle(G, D, H) + 180 mod 360
By perpendicular_direction_conditions_v0_r on D, A, D, B we get 180 == 2 * direction(D, A) - 2 * direction(D, B) mod 360
By same_angle_v2 on D, A, G, E we get angle(A, D, E) == angle(G, D, E) + 180 mod 360
By same_angle_v1 on I, C, H, A we get angle(C, I, A) == angle(H, I, A) mod 360
By perpendicular_direction_conditions_v0_r on G, B, A, E we get 180 == 2 * direction(G, B) - 2 * direction(A, E) mod 360
By same_angle_v0 on H, C, I, D we get angle(C, H, D) == angle(I, H, D) mod 360
By perpendicular_direction_conditions_v0_r on A, D, C, B we get 180 == 2 * direction(A, D) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on C, B, D, A we get 180 == 2 * direction(C, B) - 2 * direction(D, A) mod 360
By same_angle_v1 on A, G, D, H we get angle(D, A, H) == angle(G, A, H) mod 360
By perpendicular_direction_conditions_v0_r on D, C, A, D we get 180 == 2 * direction(D, C) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on E, A, G, E we get 180 == 2 * direction(E, A) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on A, E, B, E we get 180 == 2 * direction(A, E) - 2 * direction(B, E) mod 360
By same_angle_v1 on E, C, A, I we get angle(A, E, I) == angle(C, E, I) mod 360
By perpendicular_direction_conditions_v0_r on E, A, E, G we get 180 == 2 * direction(E, A) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on C, B, A, D we get 180 == 2 * direction(C, B) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on G, E, E, A we get 180 == 2 * direction(G, E) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on A, E, E, B we get 180 == 2 * direction(A, E) - 2 * direction(E, B) mod 360
By same_angle_v0 on A, E, C, D we get angle(C, A, D) == angle(E, A, D) mod 360
By perpendicular_direction_conditions_v0_r on G, B, E, A we get 180 == 2 * direction(G, B) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on E, B, A, E we get 180 == 2 * direction(E, B) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on A, D, B, C we get 180 == 2 * direction(A, D) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on A, E, G, B we get 180 == 2 * direction(A, E) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on E, G, A, E we get 180 == 2 * direction(E, G) - 2 * direction(A, E) mod 360
By probably_between_and_collinear_implies_between on A, D, G we get between(A, D, G)
By perpendicular_direction_conditions_v0_r on B, D, A, D we get 180 == 2 * direction(B, D) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on A, D, D, B we get 180 == 2 * direction(A, D) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on G, E, A, E we get 180 == 2 * direction(G, E) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on D, A, B, C we get 180 == 2 * direction(D, A) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on D, B, A, D we get 180 == 2 * direction(D, B) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on D, A, C, B we get 180 == 2 * direction(D, A) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on A, D, C, D we get 180 == 2 * direction(A, D) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on B, G, A, E we get 180 == 2 * direction(B, G) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on C, D, A, D we get 180 == 2 * direction(C, D) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on E, B, E, A we get 180 == 2 * direction(E, B) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on B, C, D, A we get 180 == 2 * direction(B, C) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on A, E, B, G we get 180 == 2 * direction(A, E) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on D, C, D, A we get 180 == 2 * direction(D, C) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on E, A, E, B we get 180 == 2 * direction(E, A) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on B, E, A, E we get 180 == 2 * direction(B, E) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on A, D, B, D we get 180 == 2 * direction(A, D) - 2 * direction(B, D) mod 360
By probably_between_and_collinear_implies_between on I, C, H we get between(H, C, I)
By perpendicular_direction_conditions_v0_r on D, A, B, D we get 180 == 2 * direction(D, A) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on B, C, A, D we get 180 == 2 * direction(B, C) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on E, G, E, A we get 180 == 2 * direction(E, G) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on D, A, C, D we get 180 == 2 * direction(D, A) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on B, E, E, A we get 180 == 2 * direction(B, E) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on A, D, D, C we get 180 == 2 * direction(A, D) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on E, A, B, E we get 180 == 2 * direction(E, A) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on E, A, G, B we get 180 == 2 * direction(E, A) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on A, E, E, G we get 180 == 2 * direction(A, E) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on B, G, E, A we get 180 == 2 * direction(B, G) - 2 * direction(E, A) mod 360
By projection_definition on G, E, h we get E == projection(G, h)
By probably_between_and_collinear_implies_between on G, E, B we get between(B, E, G)
By perpendicular_direction_conditions_v0_r on C, D, D, A we get 180 == 2 * direction(C, D) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on E, A, B, G we get 180 == 2 * direction(E, A) - 2 * direction(B, G) mod 360
By projection_definition on G, D, g we get D == projection(G, g)
By probably_between_and_collinear_implies_between on D, C, B we get between(B, C, D)
By reverse_direction on E, H we get 180 == direction(E, H) - direction(H, E) mod 360
By probably_between_and_collinear_implies_between on B, F, A we get between(A, F, B)
By reverse_direction on H, A we get 180 == direction(H, A) - direction(A, H) mod 360
By reverse_direction on A, I we get 180 == direction(A, I) - direction(I, A) mod 360
By reverse_direction on D, H we get 180 == direction(D, H) - direction(H, D) mod 360
By reverse_direction on E, A we get 180 == direction(E, A) - direction(A, E) mod 360
By reverse_direction on H, D we get 180 == direction(H, D) - direction(D, H) mod 360
By reverse_direction on H, E we get 180 == direction(H, E) - direction(E, H) mod 360
By reverse_direction on A, H we get 180 == direction(A, H) - direction(H, A) mod 360
By reverse_direction on A, E we get 180 == direction(A, E) - direction(E, A) mod 360
By reverse_direction on I, D we get 180 == direction(I, D) - direction(D, I) mod 360
By reverse_direction on D, A we get 180 == direction(D, A) - direction(A, D) mod 360
By reverse_direction on E, I we get 180 == direction(E, I) - direction(I, E) mod 360
By reverse_direction on E, D we get 180 == direction(E, D) - direction(D, E) mod 360
By reverse_direction on I, H we get 180 == direction(I, H) - direction(H, I) mod 360
By reverse_direction on A, D we get 180 == direction(A, D) - direction(D, A) mod 360
By reverse_direction on D, E we get 180 == direction(D, E) - direction(E, D) mod 360
By reverse_direction on I, E we get 180 == direction(I, E) - direction(E, I) mod 360
By reverse_direction on D, I we get 180 == direction(D, I) - direction(I, D) mod 360
By reverse_direction on H, I we get 180 == direction(H, I) - direction(I, H) mod 360
By reverse_direction on I, A we get 180 == direction(I, A) - direction(A, I) mod 360
By same_angle_v1 on A, E, C, F we get angle(C, A, F) == angle(E, A, F) mod 360
By perpendicular_direction_conditions_v0_r on C, F, A, B we get 180 == 2 * direction(C, F) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on C, F, B, F we get 180 == 2 * direction(C, F) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on D, G, C, D we get 180 == 2 * direction(D, G) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on B, G, E, C we get 180 == 2 * direction(B, G) - 2 * direction(E, C) mod 360
By same_angle_v0 on E, A, C, B we get angle(A, E, B) == angle(C, E, B) mod 360
By perpendicular_direction_conditions_v0_r on B, E, E, C we get 180 == 2 * direction(B, E) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on C, E, B, G we get 180 == 2 * direction(C, E) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on A, C, G, E we get 180 == 2 * direction(A, C) - 2 * direction(G, E) mod 360
By same_angle_v0 on D, C, B, E we get angle(B, D, E) == angle(C, D, E) mod 360
By same_angle_v3 on E, G, B, I we get angle(G, E, I) == angle(B, E, I) + 180 mod 360
By same_angle_v1 on A, D, G, C we get angle(D, A, C) == angle(G, A, C) mod 360
By perpendicular_direction_conditions_v0_r on D, B, G, D we get 180 == 2 * direction(D, B) - 2 * direction(G, D) mod 360
By same_angle_v2 on D, A, G, C we get angle(A, D, C) == angle(G, D, C) + 180 mod 360
By same_angle_v1 on A, G, D, B we get angle(D, A, B) == angle(G, A, B) mod 360
By same_angle_v0 on A, B, F, I we get angle(B, A, I) == angle(F, A, I) mod 360
By perpendicular_direction_conditions_v0_r on C, A, B, G we get 180 == 2 * direction(C, A) - 2 * direction(B, G) mod 360
By same_angle_v0 on D, B, C, I we get angle(B, D, I) == angle(C, D, I) mod 360
By same_angle_v3 on E, G, B, A we get angle(G, E, A) == angle(B, E, A) + 180 mod 360
By same_angle_v2 on E, G, B, D we get angle(G, E, D) == angle(B, E, D) + 180 mod 360
By same_angle_v1 on D, C, B, A we get angle(B, D, A) == angle(C, D, A) mod 360
By same_angle_v0 on A, F, B, D we get angle(B, A, D) == angle(F, A, D) mod 360
By perpendicular_direction_conditions_v0_r on C, B, G, D we get 180 == 2 * direction(C, B) - 2 * direction(G, D) mod 360
By same_angle_v1 on E, A, C, G we get angle(A, E, G) == angle(C, E, G) mod 360
By perpendicular_direction_conditions_v0_r on C, E, G, E we get 180 == 2 * direction(C, E) - 2 * direction(G, E) mod 360
By same_angle_v1 on A, B, F, H we get angle(B, A, H) == angle(F, A, H) mod 360
By perpendicular_direction_conditions_v0_r on A, F, F, C we get 180 == 2 * direction(A, F) - 2 * direction(F, C) mod 360
By same_angle_v2 on E, G, B, H we get angle(G, E, H) == angle(B, E, H) + 180 mod 360
By same_angle_v1 on D, B, C, H we get angle(B, D, H) == angle(C, D, H) mod 360
By perpendicular_direction_conditions_v0_r on E, C, E, B we get 180 == 2 * direction(E, C) - 2 * direction(E, B) mod 360
By same_angle_v1 on A, C, E, B we get angle(C, A, B) == angle(E, A, B) mod 360
By same_angle_v3 on D, A, G, B we get angle(A, D, B) == angle(G, D, B) + 180 mod 360
By perpendicular_direction_conditions_v0_r on B, G, C, A we get 180 == 2 * direction(B, G) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on C, B, D, G we get 180 == 2 * direction(C, B) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on A, C, E, G we get 180 == 2 * direction(A, C) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on C, E, G, B we get 180 == 2 * direction(C, E) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on A, G, C, D we get 180 == 2 * direction(A, G) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on G, A, C, D we get 180 == 2 * direction(G, A) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on A, B, F, C we get 180 == 2 * direction(A, B) - 2 * direction(F, C) mod 360
By same_angle_v0 on A, B, F, E we get angle(B, A, E) == angle(F, A, E) mod 360
By perpendicular_direction_conditions_v0_r on E, G, C, E we get 180 == 2 * direction(E, G) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on A, G, D, C we get 180 == 2 * direction(A, G) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on A, C, G, B we get 180 == 2 * direction(A, C) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on D, C, D, G we get 180 == 2 * direction(D, C) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on G, B, A, C we get 180 == 2 * direction(G, B) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on D, C, A, G we get 180 == 2 * direction(D, C) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on C, E, E, B we get 180 == 2 * direction(C, E) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on G, B, E, C we get 180 == 2 * direction(G, B) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on A, G, B, C we get 180 == 2 * direction(A, G) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on E, G, C, A we get 180 == 2 * direction(E, G) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on E, C, B, G we get 180 == 2 * direction(E, C) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on E, B, C, A we get 180 == 2 * direction(E, B) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on G, B, C, A we get 180 == 2 * direction(G, B) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on G, A, B, D we get 180 == 2 * direction(G, A) - 2 * direction(B, D) mod 360
By same_angle_v1 on A, G, D, F we get angle(D, A, F) == angle(G, A, F) mod 360
By same_angle_v0 on A, E, C, G we get angle(C, A, G) == angle(E, A, G) mod 360
By perpendicular_direction_conditions_v0_r on C, E, B, E we get 180 == 2 * direction(C, E) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on C, A, G, B we get 180 == 2 * direction(C, A) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on A, C, E, B we get 180 == 2 * direction(A, C) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on F, B, F, C we get 180 == 2 * direction(F, B) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on A, C, B, G we get 180 == 2 * direction(A, C) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on E, C, G, E we get 180 == 2 * direction(E, C) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on G, B, C, E we get 180 == 2 * direction(G, B) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on F, B, C, F we get 180 == 2 * direction(F, B) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on E, B, A, C we get 180 == 2 * direction(E, B) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on F, C, F, A we get 180 == 2 * direction(F, C) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on C, F, A, F we get 180 == 2 * direction(C, F) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on E, B, E, C we get 180 == 2 * direction(E, B) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on B, D, D, G we get 180 == 2 * direction(B, D) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on B, D, G, D we get 180 == 2 * direction(B, D) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on C, F, F, B we get 180 == 2 * direction(C, F) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on F, C, A, F we get 180 == 2 * direction(F, C) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on G, A, D, C we get 180 == 2 * direction(G, A) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on F, A, F, C we get 180 == 2 * direction(F, A) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on B, A, F, C we get 180 == 2 * direction(B, A) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on C, F, F, A we get 180 == 2 * direction(C, F) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on B, E, A, C we get 180 == 2 * direction(B, E) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on G, D, B, C we get 180 == 2 * direction(G, D) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on B, G, C, E we get 180 == 2 * direction(B, G) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on B, F, C, F we get 180 == 2 * direction(B, F) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on E, G, A, C we get 180 == 2 * direction(E, G) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on E, C, G, B we get 180 == 2 * direction(E, C) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on D, B, A, G we get 180 == 2 * direction(D, B) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on D, B, G, A we get 180 == 2 * direction(D, B) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on B, F, F, C we get 180 == 2 * direction(B, F) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on B, D, G, A we get 180 == 2 * direction(B, D) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on G, A, B, C we get 180 == 2 * direction(G, A) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on G, E, C, A we get 180 == 2 * direction(G, E) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on D, G, C, B we get 180 == 2 * direction(D, G) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on G, E, E, C we get 180 == 2 * direction(G, E) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on E, G, E, C we get 180 == 2 * direction(E, G) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on B, G, A, C we get 180 == 2 * direction(B, G) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on D, G, D, C we get 180 == 2 * direction(D, G) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on C, B, G, A we get 180 == 2 * direction(C, B) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on G, E, A, C we get 180 == 2 * direction(G, E) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on G, D, C, D we get 180 == 2 * direction(G, D) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on C, A, E, G we get 180 == 2 * direction(C, A) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on F, C, B, F we get 180 == 2 * direction(F, C) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on A, C, B, E we get 180 == 2 * direction(A, C) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on B, C, A, G we get 180 == 2 * direction(B, C) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on G, E, C, E we get 180 == 2 * direction(G, E) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on C, A, G, E we get 180 == 2 * direction(C, A) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on B, A, C, F we get 180 == 2 * direction(B, A) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on C, D, G, D we get 180 == 2 * direction(C, D) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on C, B, A, G we get 180 == 2 * direction(C, B) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on B, C, G, D we get 180 == 2 * direction(B, C) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on B, E, C, A we get 180 == 2 * direction(B, E) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on D, G, B, D we get 180 == 2 * direction(D, G) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on C, F, B, A we get 180 == 2 * direction(C, F) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on E, B, C, E we get 180 == 2 * direction(E, B) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on B, C, D, G we get 180 == 2 * direction(B, C) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on A, B, C, F we get 180 == 2 * direction(A, B) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on F, C, A, B we get 180 == 2 * direction(F, C) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on D, B, D, G we get 180 == 2 * direction(D, B) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on F, A, C, F we get 180 == 2 * direction(F, A) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on G, D, B, D we get 180 == 2 * direction(G, D) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on C, E, E, G we get 180 == 2 * direction(C, E) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on B, E, C, E we get 180 == 2 * direction(B, E) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on A, G, B, D we get 180 == 2 * direction(A, G) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on D, C, G, D we get 180 == 2 * direction(D, C) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on G, A, D, B we get 180 == 2 * direction(G, A) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on G, D, D, B we get 180 == 2 * direction(G, D) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on B, D, A, G we get 180 == 2 * direction(B, D) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on C, D, G, A we get 180 == 2 * direction(C, D) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on D, G, D, B we get 180 == 2 * direction(D, G) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on E, C, E, G we get 180 == 2 * direction(E, C) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on G, D, D, C we get 180 == 2 * direction(G, D) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on A, G, C, B we get 180 == 2 * direction(A, G) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on G, D, C, B we get 180 == 2 * direction(G, D) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on B, C, G, A we get 180 == 2 * direction(B, C) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on G, A, C, B we get 180 == 2 * direction(G, A) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on C, D, A, G we get 180 == 2 * direction(C, D) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on C, D, D, G we get 180 == 2 * direction(C, D) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on F, C, B, A we get 180 == 2 * direction(F, C) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on A, G, D, B we get 180 == 2 * direction(A, G) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on C, A, B, E we get 180 == 2 * direction(C, A) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on E, C, B, E we get 180 == 2 * direction(E, C) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on D, C, G, A we get 180 == 2 * direction(D, C) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on A, F, C, F we get 180 == 2 * direction(A, F) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on C, A, E, B we get 180 == 2 * direction(C, A) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on D, G, B, C we get 180 == 2 * direction(D, G) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on F, C, F, B we get 180 == 2 * direction(F, C) - 2 * direction(F, B) mod 360
By altitude_definition on A, F, C, f we get f == altitude(A, C, F)
By collinear_definition on H, I, C we get I in Line(C, H), C in Line(H, I), Line(C, H) == Line(H, I), 0 == 2 * angle(I, H, C) mod 360
By perpendicular_angle_conditions_v0 on B, D, A we get angle(B, D, A) == orientation(A, B, D) mod 360
By altitude_definition on B, F, C, f we get f == altitude(B, C, F)
By collinear_definition on A, G, D we get G in Line(A, D), D in Line(A, G), Line(A, D) == Line(A, G), 0 == 2 * angle(G, A, D) mod 360
By collinear_definition on D, G, A we get G in Line(A, D), A in Line(D, G), Line(A, D) == Line(D, G), 0 == 2 * angle(G, D, A) mod 360
By perpendicular_angle_conditions_v0 on B, E, A we get angle(B, E, A) == orientation(A, B, E) mod 360
By collinear_definition on I, C, H we get C in Line(H, I), H in Line(C, I), Line(C, I) == Line(H, I), 0 == 2 * angle(C, I, H) mod 360
By perpendicular_angle_conditions_v0 on A, E, G we get angle(A, E, G) == orientation(A, E, G) mod 360
By collinear_definition on D, A, G we get A in Line(D, G), G in Line(A, D), Line(A, D) == Line(D, G), 0 == 2 * angle(A, D, G) mod 360
By perpendicular_angle_conditions_v0 on A, D, C we get angle(A, D, C) == orientation(A, D, C) mod 360
By collinear_definition on I, H, C we get H in Line(C, I), C in Line(H, I), Line(C, I) == Line(H, I), 0 == 2 * angle(H, I, C) mod 360
By collinear_definition on E, A, C we get A in Line(C, E), C in Line(A, E), Line(A, E) == Line(C, E), 0 == 2 * angle(A, E, C) mod 360
By perpendicular_angle_conditions_v0 on A, E, B we get angle(A, E, B) == orientation(A, E, B) mod 360
By collinear_definition on E, C, A we get C in Line(A, E), A in Line(C, E), Line(A, E) == Line(C, E), 0 == 2 * angle(C, E, A) mod 360
By collinear_definition on A, E, C we get E in Line(A, C), C in Line(A, E), Line(A, C) == Line(A, E), 0 == 2 * angle(E, A, C) mod 360
By collinear_definition on A, D, G we get D in Line(A, G), G in Line(A, D), Line(A, D) == Line(A, G), 0 == 2 * angle(D, A, G) mod 360
By collinear_definition on A, C, E we get C in Line(A, E), E in Line(A, C), Line(A, C) == Line(A, E), 0 == 2 * angle(C, A, E) mod 360
By collinear_definition on H, C, I we get C in Line(H, I), I in Line(C, H), Line(C, H) == Line(H, I), 0 == 2 * angle(C, H, I) mod 360
By perpendicular_angle_conditions_v0 on A, D, B we get angle(A, D, B) == orientation(A, D, B) mod 360
By perpendicular_angle_conditions_v0 on G, E, A we get angle(G, E, A) == orientation(A, G, E) mod 360
By perpendicular_angle_conditions_v0 on C, D, A we get angle(C, D, A) == orientation(A, C, D) mod 360
By same_angle_v1 on B, A, F, C we get angle(A, B, C) == angle(F, B, C) mod 360
By same_angle_v1 on G, B, E, A we get angle(B, G, A) == angle(E, G, A) mod 360
By same_angle_v0 on A, F, B, C we get angle(B, A, C) == angle(F, A, C) mod 360
By same_angle_v2 on C, D, B, F we get angle(D, C, F) == angle(B, C, F) + 180 mod 360
By same_angle_v3 on C, D, B, A we get angle(D, C, A) == angle(B, C, A) + 180 mod 360
By same_angle_v3 on C, A, E, B we get angle(A, C, B) == angle(E, C, B) + 180 mod 360
By same_angle_v1 on B, C, D, E we get angle(C, B, E) == angle(D, B, E) mod 360
By same_angle_v3 on C, E, A, I we get angle(E, C, I) == angle(A, C, I) + 180 mod 360
By same_angle_v3 on C, I, H, A we get angle(I, C, A) == angle(H, C, A) + 180 mod 360
By same_angle_v3 on C, D, B, H we get angle(D, C, H) == angle(B, C, H) + 180 mod 360
By same_angle_v2 on E, G, B, C we get angle(G, E, C) == angle(B, E, C) + 180 mod 360
By same_angle_v1 on B, A, F, D we get angle(A, B, D) == angle(F, B, D) mod 360
By same_angle_v3 on C, E, A, D we get angle(E, C, D) == angle(A, C, D) + 180 mod 360
By same_angle_v0 on G, A, D, E we get angle(A, G, E) == angle(D, G, E) mod 360
By same_angle_v1 on G, E, B, D we get angle(B, G, D) == angle(E, G, D) mod 360
By same_angle_v1 on B, D, C, G we get angle(C, B, G) == angle(D, B, G) mod 360
By same_angle_v3 on C, A, E, H we get angle(A, C, H) == angle(E, C, H) + 180 mod 360
By same_angle_v3 on C, B, D, E we get angle(B, C, E) == angle(D, C, E) + 180 mod 360
By same_angle_v0 on B, E, G, A we get angle(E, B, A) == angle(G, B, A) mod 360
By same_angle_v3 on C, H, I, E we get angle(H, C, E) == angle(I, C, E) + 180 mod 360
By same_angle_v1 on B, F, A, E we get angle(A, B, E) == angle(F, B, E) mod 360
By same_angle_v0 on G, A, D, B we get angle(A, G, B) == angle(D, G, B) mod 360
By same_angle_v0 on B, C, D, F we get angle(C, B, F) == angle(D, B, F) mod 360
By same_angle_v2 on F, B, A, C we get angle(B, F, C) == angle(A, F, C) + 180 mod 360
By same_angle_v1 on B, A, F, G we get angle(A, B, G) == angle(F, B, G) mod 360
By same_angle_v0 on B, G, E, F we get angle(E, B, F) == angle(G, B, F) mod 360
By same_angle_v3 on C, A, E, F we get angle(A, C, F) == angle(E, C, F) + 180 mod 360
By same_angle_v3 on C, I, H, D we get angle(I, C, D) == angle(H, C, D) + 180 mod 360
By same_angle_v3 on C, H, I, F we get angle(H, C, F) == angle(I, C, F) + 180 mod 360
By same_angle_v0 on A, F, B, G we get angle(B, A, G) == angle(F, A, G) mod 360
By same_angle_v0 on B, E, G, C we get angle(E, B, C) == angle(G, B, C) mod 360
By same_angle_v2 on C, H, I, B we get angle(H, C, B) == angle(I, C, B) + 180 mod 360
By same_angle_v0 on B, C, D, A we get angle(C, B, A) == angle(D, B, A) mod 360
By same_angle_v0 on D, B, C, G we get angle(B, D, G) == angle(C, D, G) mod 360
By same_angle_v0 on B, G, E, D we get angle(E, B, D) == angle(G, B, D) mod 360
By same_angle_v3 on C, B, D, I we get angle(B, C, I) == angle(D, C, I) + 180 mod 360
By collinear_definition on G, B, E we get B in Line(E, G), E in Line(B, G), Line(B, G) == Line(E, G), 0 == 2 * angle(B, G, E) mod 360
By perpendicular_angle_conditions_v0 on C, D, G we get angle(C, D, G) == orientation(C, D, G) mod 360
By collinear_definition on F, A, B we get A in Line(B, F), B in Line(A, F), Line(A, F) == Line(B, F), 0 == 2 * angle(A, F, B) mod 360
By collinear_definition on G, E, B we get E in Line(B, G), B in Line(E, G), Line(B, G) == Line(E, G), 0 == 2 * angle(E, G, B) mod 360
By altitude_definition on B, D, G, g we get g == altitude(B, D, G)
By perpendicular_angle_conditions_v0 on G, E, C we get angle(G, E, C) == orientation(C, G, E) mod 360
By collinear_definition on G, A, D we get A in Line(D, G), D in Line(A, G), Line(A, G) == Line(D, G), 0 == 2 * angle(A, G, D) mod 360
By altitude_definition on B, A, G, g we get g == altitude(B, A, G)
By altitude_definition on G, A, C, j we get j == altitude(G, A, C)
By collinear_definition on G, D, A we get D in Line(A, G), A in Line(D, G), Line(A, G) == Line(D, G), 0 == 2 * angle(D, G, A) mod 360
By altitude_definition on C, F, A, Line(C, F) we get Line(C, F) == altitude(C, A, F)
By perpendicular_angle_conditions_v0 on G, D, C we get angle(G, D, C) == orientation(C, G, D) mod 360
By collinear_definition on D, C, B we get C in Line(B, D), B in Line(C, D), Line(B, D) == Line(C, D), 0 == 2 * angle(C, D, B) mod 360
By perpendicular_angle_conditions_v0 on C, E, B we get angle(C, E, B) == orientation(B, C, E) mod 360
By altitude_definition on C, E, G, h we get h == altitude(C, E, G)
By collinear_definition on E, B, G we get B in Line(E, G), G in Line(B, E), Line(B, E) == Line(E, G), 0 == 2 * angle(B, E, G) mod 360
By altitude_definition on B, E, A, j we get j == altitude(B, A, E)
By altitude_definition on A, C, D, i we get i == altitude(A, C, D)
By altitude_definition on C, D, A, g we get g == altitude(C, A, D)
By collinear_definition on B, C, D we get C in Line(B, D), D in Line(B, C), Line(B, C) == Line(B, D), 0 == 2 * angle(C, B, D) mod 360
By altitude_definition on G, C, E, j we get j == altitude(G, C, E)
By collinear_definition on C, A, E we get A in Line(C, E), E in Line(A, C), Line(A, C) == Line(C, E), 0 == 2 * angle(A, C, E) mod 360
By collinear_definition on D, B, C we get B in Line(C, D), C in Line(B, D), Line(B, D) == Line(C, D), 0 == 2 * angle(B, D, C) mod 360
By altitude_definition on C, B, F, Line(C, F) we get Line(C, F) == altitude(C, B, F)
By altitude_definition on B, C, E, j we get j == altitude(B, C, E)
By perpendicular_angle_conditions_v0 on B, E, C we get angle(B, E, C) == orientation(B, E, C) mod 360
By perpendicular_angle_conditions_v0 on B, D, G we get angle(B, D, G) == orientation(B, D, G) mod 360
By collinear_definition on C, H, I we get H in Line(C, I), I in Line(C, H), Line(C, H) == Line(C, I), 0 == 2 * angle(H, C, I) mod 360
By perpendicular_angle_conditions_v0 on A, F, C we get angle(A, F, C) == orientation(A, F, C) mod 360
By altitude_definition on G, C, B, i we get i == altitude(G, B, C)
By altitude_definition on G, E, A, j we get j == altitude(G, A, E)
By collinear_definition on B, A, F we get A in Line(B, F), F in Line(A, B), Line(A, B) == Line(B, F), 0 == 2 * angle(A, B, F) mod 360
By perpendicular_angle_conditions_v0 on B, F, C we get angle(B, F, C) == orientation(B, F, C) mod 360
By altitude_definition on A, E, G, h we get h == altitude(A, E, G)
By altitude_definition on A, B, E, h we get h == altitude(A, B, E)
By collinear_definition on B, F, A we get F in Line(A, B), A in Line(B, F), Line(A, B) == Line(B, F), 0 == 2 * angle(F, B, A) mod 360
By collinear_definition on C, E, A we get E in Line(A, C), A in Line(C, E), Line(A, C) == Line(C, E), 0 == 2 * angle(E, C, A) mod 360
By altitude_definition on A, G, B, h we get h == altitude(A, B, G)
By altitude_definition on C, B, G, h we get h == altitude(C, B, G)
By collinear_definition on C, D, B we get D in Line(B, C), B in Line(C, D), Line(B, C) == Line(C, D), 0 == 2 * angle(D, C, B) mod 360
By altitude_definition on B, A, D, g we get g == altitude(B, A, D)
By collinear_definition on B, G, E we get G in Line(B, E), E in Line(B, G), Line(B, E) == Line(B, G), 0 == 2 * angle(G, B, E) mod 360
By altitude_definition on C, A, G, g we get g == altitude(C, A, G)
By collinear_definition on C, B, D we get B in Line(C, D), D in Line(B, C), Line(B, C) == Line(C, D), 0 == 2 * angle(B, C, D) mod 360
By perpendicular_angle_conditions_v0 on C, F, B we get angle(C, F, B) == orientation(B, C, F) mod 360
By collinear_definition on F, B, A we get B in Line(A, F), A in Line(B, F), Line(A, F) == Line(B, F), 0 == 2 * angle(B, F, A) mod 360
By collinear_definition on B, E, G we get E in Line(B, G), G in Line(B, E), Line(B, E) == Line(B, G), 0 == 2 * angle(E, B, G) mod 360
By perpendicular_angle_conditions_v0 on C, F, A we get angle(C, F, A) == orientation(A, C, F) mod 360
By collinear_definition on C, I, H we get I in Line(C, H), H in Line(C, I), Line(C, H) == Line(C, I), 0 == 2 * angle(I, C, H) mod 360
By altitude_definition on C, G, D, g we get g == altitude(C, D, G)
By collinear_definition on B, D, C we get D in Line(B, C), C in Line(B, D), Line(B, C) == Line(B, D), 0 == 2 * angle(D, B, C) mod 360
By altitude_definition on C, B, E, h we get h == altitude(C, B, E)
By collinear_definition on A, B, F we get B in Line(A, F), F in Line(A, B), Line(A, B) == Line(A, F), 0 == 2 * angle(B, A, F) mod 360
By altitude_definition on A, B, D, i we get i == altitude(A, B, D)
By altitude_definition on G, C, D, i we get i == altitude(G, C, D)
By altitude_definition on G, D, B, i we get i == altitude(G, B, D)
By perpendicular_angle_conditions_v0 on G, D, B we get angle(G, D, B) == orientation(B, G, D) mod 360
By collinear_definition on A, F, B we get F in Line(A, B), B in Line(A, F), Line(A, B) == Line(A, F), 0 == 2 * angle(F, A, B) mod 360
By perpendicular_angle_conditions_v0 on C, E, G we get angle(C, E, G) == orientation(C, E, G) mod 360
By collinear_definition on E, G, B we get G in Line(B, E), B in Line(E, G), Line(B, E) == Line(E, G), 0 == 2 * angle(G, E, B) mod 360
By power_of_a_point_definition on G, A, D, c we get log(power_of_a_point(G, c)) == log(distance(A, G)) + log(distance(D, G))
By power_of_a_point_definition on C, A, E, c we get log(power_of_a_point(C, c)) == log(distance(A, C)) + log(distance(C, E))
By power_of_a_point_definition on C, I, H, c we get log(power_of_a_point(C, c)) == log(distance(C, I)) + log(distance(C, H))
By concyclic_sufficient_conditions_v1 on I, D, B, E we get concyclic(B, D, E, I)
By concurrent_sufficient_conditions on Line(A, H), Line(A, I), f we get concurrent(f, Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on Line(D, H), Line(D, E), Line(D, I) we get concurrent(Line(D, E), Line(D, H), Line(D, I))
By concurrent_sufficient_conditions on Line(D, E), j, Line(E, I) we get concurrent(j, Line(D, E), Line(E, I))
By concurrent_sufficient_conditions on Line(D, E), g, Line(D, I) we get concurrent(g, Line(D, E), Line(D, I))
By concyclic_sufficient_conditions_v0 on B, D, A, E we get concyclic(A, B, D, E)
By concurrent_sufficient_conditions on Line(D, I), g, Line(D, E) we get concurrent(g, Line(D, E), Line(D, I))
By concurrent_sufficient_conditions on Line(A, H), i, f we get concurrent(f, i, Line(A, H))
By concurrent_sufficient_conditions on f, Line(A, H), i we get concurrent(f, i, Line(A, H))
By concurrent_sufficient_conditions on Line(D, H), Line(A, H), k we get concurrent(k, Line(A, H), Line(D, H))
By concurrent_sufficient_conditions on Line(D, E), Line(E, H), Line(E, I) we get concurrent(Line(D, E), Line(E, H), Line(E, I))
By concyclic_sufficient_conditions_v1 on A, D, C, F we get concyclic(A, C, D, F)
By concurrent_sufficient_conditions on Line(D, E), j, Line(E, H) we get concurrent(j, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on g, Line(D, E), i we get concurrent(g, i, Line(D, E))
By concurrent_sufficient_conditions on Line(A, I), Line(E, I), Line(D, I) we get concurrent(Line(A, I), Line(D, I), Line(E, I))
By concurrent_sufficient_conditions on h, j, Line(E, I) we get concurrent(h, j, Line(E, I))
By concurrent_sufficient_conditions on Line(E, I), j, h we get concurrent(h, j, Line(E, I))
By concurrent_sufficient_conditions on k, Line(E, I), Line(D, I) we get concurrent(k, Line(D, I), Line(E, I))
By concurrent_sufficient_conditions on k, Line(D, I), Line(E, I) we get concurrent(k, Line(D, I), Line(E, I))
By concurrent_sufficient_conditions on Line(A, H), h, i we get concurrent(h, i, Line(A, H))
By line_definition on F, orthocenter(A, B, C), Line(C, F) we get Line(C, F) == Line(F, orthocenter(A, B, C))
By concurrent_sufficient_conditions on h, Line(E, H), j we get concurrent(h, j, Line(E, H))
By concurrent_sufficient_conditions on Line(A, H), h, Line(A, I) we get concurrent(h, Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on k, Line(D, H), Line(E, H) we get concurrent(k, Line(D, H), Line(E, H))
By concyclic_sufficient_conditions_v1 on C, E, B, F we get concyclic(B, C, E, F)
By concurrent_sufficient_conditions on Line(D, H), Line(E, H), Line(A, H) we get concurrent(Line(A, H), Line(D, H), Line(E, H))
By concurrent_sufficient_conditions on i, Line(A, I), Line(A, H) we get concurrent(i, Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on Line(A, I), h, Line(A, H) we get concurrent(h, Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on h, Line(D, E), Line(E, I) we get concurrent(h, Line(D, E), Line(E, I))
By concyclic_sufficient_conditions_v1 on G, D, C, E we get concyclic(C, D, E, G)
By concurrent_sufficient_conditions on h, f, Line(A, H) we get concurrent(f, h, Line(A, H))
By concurrent_sufficient_conditions on h, Line(D, E), Line(E, H) we get concurrent(h, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on f, h, Line(A, H) we get concurrent(f, h, Line(A, H))
By concurrent_sufficient_conditions on Line(A, I), Line(A, H), i we get concurrent(i, Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on Line(E, H), Line(D, H), k we get concurrent(k, Line(D, H), Line(E, H))
By concurrent_sufficient_conditions on Line(E, H), h, j we get concurrent(h, j, Line(E, H))
By concurrent_sufficient_conditions on g, Line(D, E), Line(D, I) we get concurrent(g, Line(D, E), Line(D, I))
By concurrent_sufficient_conditions on f, h, Line(A, I) we get concurrent(f, h, Line(A, I))
By concurrent_sufficient_conditions on Line(A, H), Line(D, H), k we get concurrent(k, Line(A, H), Line(D, H))
By concurrent_sufficient_conditions on Line(D, E), h, Line(E, I) we get concurrent(h, Line(D, E), Line(E, I))
By concurrent_sufficient_conditions on k, Line(D, H), Line(A, H) we get concurrent(k, Line(A, H), Line(D, H))
By concurrent_sufficient_conditions on Line(A, I), i, h we get concurrent(h, i, Line(A, I))
By concurrent_sufficient_conditions on i, Line(A, H), h we get concurrent(h, i, Line(A, H))
By concurrent_sufficient_conditions on g, Line(D, H), Line(D, E) we get concurrent(g, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on Line(A, H), Line(E, H), k we get concurrent(k, Line(A, H), Line(E, H))
By concyclic_sufficient_conditions_v0 on B, D, H, E we get concyclic(B, D, E, H)
By concurrent_sufficient_conditions on Line(E, H), Line(D, H), Line(A, H) we get concurrent(Line(A, H), Line(D, H), Line(E, H))
By concurrent_sufficient_conditions on Line(D, H), g, i we get concurrent(g, i, Line(D, H))
By line_definition on orthocenter(A, B, C), A, i we get i == Line(A, orthocenter(A, B, C))
By concurrent_sufficient_conditions on Line(D, E), g, Line(D, H) we get concurrent(g, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on Line(D, E), Line(D, I), Line(D, H) we get concurrent(Line(D, E), Line(D, H), Line(D, I))
By concurrent_sufficient_conditions on Line(D, E), h, j we get concurrent(h, j, Line(D, E))
By concurrent_sufficient_conditions on i, Line(D, H), Line(D, E) we get concurrent(i, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on Line(A, H), h, f we get concurrent(f, h, Line(A, H))
By concurrent_sufficient_conditions on Line(E, I), Line(E, H), Line(D, E) we get concurrent(Line(D, E), Line(E, H), Line(E, I))
By line_intersection_definition on orthocenter(A, B, C), j, i we get orthocenter(A, B, C) == line_intersection(i, j)
By concurrent_sufficient_conditions on j, Line(D, E), h we get concurrent(h, j, Line(D, E))
By concurrent_sufficient_conditions on f, Line(A, I), h we get concurrent(f, h, Line(A, I))
By concurrent_sufficient_conditions on Line(D, I), i, Line(D, E) we get concurrent(i, Line(D, E), Line(D, I))
By concurrent_sufficient_conditions on h, Line(A, H), f we get concurrent(f, h, Line(A, H))
By concurrent_sufficient_conditions on g, Line(D, E), Line(D, H) we get concurrent(g, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on j, Line(E, H), Line(D, E) we get concurrent(j, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on i, h, Line(A, I) we get concurrent(h, i, Line(A, I))
By concurrent_sufficient_conditions on Line(D, H), i, Line(D, E) we get concurrent(i, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on i, f, Line(A, I) we get concurrent(f, i, Line(A, I))
By concurrent_sufficient_conditions on i, Line(D, I), Line(D, E) we get concurrent(i, Line(D, E), Line(D, I))
By concurrent_sufficient_conditions on h, Line(A, I), f we get concurrent(f, h, Line(A, I))
By concurrent_sufficient_conditions on Line(A, I), Line(D, I), Line(E, I) we get concurrent(Line(A, I), Line(D, I), Line(E, I))
By concurrent_sufficient_conditions on Line(E, H), Line(E, I), j we get concurrent(j, Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(E, I), Line(E, H), h we get concurrent(h, Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(D, H), Line(D, E), g we get concurrent(g, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on k, Line(E, H), Line(A, H) we get concurrent(k, Line(A, H), Line(E, H))
By concurrent_sufficient_conditions on k, Line(A, I), Line(D, I) we get concurrent(k, Line(A, I), Line(D, I))
By concurrent_sufficient_conditions on Line(D, H), i, g we get concurrent(g, i, Line(D, H))
By concurrent_sufficient_conditions on Line(D, H), Line(D, I), Line(D, E) we get concurrent(Line(D, E), Line(D, H), Line(D, I))
By concurrent_sufficient_conditions on Line(E, H), j, Line(D, E) we get concurrent(j, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(A, I), f, h we get concurrent(f, h, Line(A, I))
By concurrent_sufficient_conditions on Line(E, I), Line(E, H), j we get concurrent(j, Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(A, H), k, Line(E, H) we get concurrent(k, Line(A, H), Line(E, H))
By concurrent_sufficient_conditions on Line(E, I), Line(D, E), Line(E, H) we get concurrent(Line(D, E), Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(D, H), g, Line(D, E) we get concurrent(g, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on Line(A, H), f, i we get concurrent(f, i, Line(A, H))
By concurrent_sufficient_conditions on Line(D, E), Line(E, I), j we get concurrent(j, Line(D, E), Line(E, I))
By concurrent_sufficient_conditions on Line(D, I), Line(E, I), k we get concurrent(k, Line(D, I), Line(E, I))
By concurrent_sufficient_conditions on Line(E, H), Line(E, I), h we get concurrent(h, Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(D, E), g, i we get concurrent(g, i, Line(D, E))
By concurrent_sufficient_conditions on i, Line(A, I), h we get concurrent(h, i, Line(A, I))
By concurrent_sufficient_conditions on j, h, Line(E, H) we get concurrent(h, j, Line(E, H))
By concurrent_sufficient_conditions on g, Line(D, I), Line(D, H) we get concurrent(g, Line(D, H), Line(D, I))
By concurrent_sufficient_conditions on g, i, Line(D, I) we get concurrent(g, i, Line(D, I))
By concurrent_sufficient_conditions on Line(E, H), Line(D, E), Line(E, I) we get concurrent(Line(D, E), Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on j, Line(D, E), Line(E, H) we get concurrent(j, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(A, H), k, Line(D, H) we get concurrent(k, Line(A, H), Line(D, H))
By concurrent_sufficient_conditions on i, h, Line(A, H) we get concurrent(h, i, Line(A, H))
By concurrent_sufficient_conditions on Line(D, H), k, Line(A, H) we get concurrent(k, Line(A, H), Line(D, H))
By concurrent_sufficient_conditions on h, Line(E, H), Line(E, I) we get concurrent(h, Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(A, H), f, Line(A, I) we get concurrent(f, Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on g, i, Line(D, E) we get concurrent(g, i, Line(D, E))
By concurrent_sufficient_conditions on f, Line(A, I), Line(A, H) we get concurrent(f, Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on Line(E, I), h, Line(D, E) we get concurrent(h, Line(D, E), Line(E, I))
By concurrent_sufficient_conditions on h, Line(E, I), Line(D, E) we get concurrent(h, Line(D, E), Line(E, I))
By concurrent_sufficient_conditions on j, Line(E, I), Line(D, E) we get concurrent(j, Line(D, E), Line(E, I))
By concurrent_sufficient_conditions on Line(A, I), Line(A, H), h we get concurrent(h, Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on j, Line(E, H), Line(E, I) we get concurrent(j, Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(A, I), Line(A, H), f we get concurrent(f, Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on Line(E, H), k, Line(D, H) we get concurrent(k, Line(D, H), Line(E, H))
By concurrent_sufficient_conditions on h, j, Line(E, H) we get concurrent(h, j, Line(E, H))
By concurrent_sufficient_conditions on g, Line(D, H), i we get concurrent(g, i, Line(D, H))
By concurrent_sufficient_conditions on h, Line(E, I), Line(E, H) we get concurrent(h, Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(E, I), k, Line(A, I) we get concurrent(k, Line(A, I), Line(E, I))
By concurrent_sufficient_conditions on Line(E, I), h, j we get concurrent(h, j, Line(E, I))
By concurrent_sufficient_conditions on Line(D, I), Line(D, H), i we get concurrent(i, Line(D, H), Line(D, I))
By concurrent_sufficient_conditions on Line(D, I), k, Line(E, I) we get concurrent(k, Line(D, I), Line(E, I))
By concurrent_sufficient_conditions on Line(D, I), Line(D, E), i we get concurrent(i, Line(D, E), Line(D, I))
By concurrent_sufficient_conditions on Line(A, I), i, Line(A, H) we get concurrent(i, Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on Line(A, I), Line(D, I), k we get concurrent(k, Line(A, I), Line(D, I))
By concurrent_sufficient_conditions on i, Line(D, H), Line(D, I) we get concurrent(i, Line(D, H), Line(D, I))
By concurrent_sufficient_conditions on Line(D, I), Line(A, I), Line(E, I) we get concurrent(Line(A, I), Line(D, I), Line(E, I))
By line_definition on E, orthocenter(A, B, C), j we get j == Line(E, orthocenter(A, B, C))
By line_definition on orthocenter(A, B, C), B, j we get j == Line(B, orthocenter(A, B, C))
By concurrent_sufficient_conditions on Line(E, I), j, Line(E, H) we get concurrent(j, Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(E, H), j, h we get concurrent(h, j, Line(E, H))
By concurrent_sufficient_conditions on f, Line(A, I), i we get concurrent(f, i, Line(A, I))
By concurrent_sufficient_conditions on Line(E, I), j, Line(D, E) we get concurrent(j, Line(D, E), Line(E, I))
By concurrent_sufficient_conditions on j, Line(E, I), h we get concurrent(h, j, Line(E, I))
By concurrent_sufficient_conditions on Line(D, E), Line(E, H), j we get concurrent(j, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on h, Line(E, H), Line(D, E) we get concurrent(h, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(D, E), i, g we get concurrent(g, i, Line(D, E))
By concurrent_sufficient_conditions on h, Line(A, H), Line(A, I) we get concurrent(h, Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on Line(E, I), k, Line(D, I) we get concurrent(k, Line(D, I), Line(E, I))
By concurrent_sufficient_conditions on Line(E, H), h, Line(E, I) we get concurrent(h, Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(A, H), Line(E, H), Line(D, H) we get concurrent(Line(A, H), Line(D, H), Line(E, H))
By concurrent_sufficient_conditions on Line(A, H), i, h we get concurrent(h, i, Line(A, H))
By concurrent_sufficient_conditions on Line(E, I), Line(D, E), j we get concurrent(j, Line(D, E), Line(E, I))
By concurrent_sufficient_conditions on Line(D, H), Line(D, I), i we get concurrent(i, Line(D, H), Line(D, I))
By concurrent_sufficient_conditions on j, Line(D, E), Line(E, I) we get concurrent(j, Line(D, E), Line(E, I))
By concurrent_sufficient_conditions on Line(A, I), f, Line(A, H) we get concurrent(f, Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on j, h, Line(E, I) we get concurrent(h, j, Line(E, I))
By concurrent_sufficient_conditions on Line(E, H), Line(D, E), j we get concurrent(j, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(E, H), Line(D, E), h we get concurrent(h, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(D, I), g, Line(D, H) we get concurrent(g, Line(D, H), Line(D, I))
By concurrent_sufficient_conditions on Line(E, I), Line(D, I), k we get concurrent(k, Line(D, I), Line(E, I))
By concurrent_sufficient_conditions on i, g, Line(D, H) we get concurrent(g, i, Line(D, H))
By concurrent_sufficient_conditions on Line(D, H), Line(D, E), i we get concurrent(i, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on h, i, Line(A, I) we get concurrent(h, i, Line(A, I))
By concurrent_sufficient_conditions on h, Line(A, I), Line(A, H) we get concurrent(h, Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on Line(E, H), h, Line(D, E) we get concurrent(h, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on h, j, Line(D, E) we get concurrent(h, j, Line(D, E))
By concurrent_sufficient_conditions on Line(E, H), Line(A, H), Line(D, H) we get concurrent(Line(A, H), Line(D, H), Line(E, H))
By concurrent_sufficient_conditions on Line(D, I), k, Line(A, I) we get concurrent(k, Line(A, I), Line(D, I))
By concurrent_sufficient_conditions on Line(D, I), Line(D, H), g we get concurrent(g, Line(D, H), Line(D, I))
By concurrent_sufficient_conditions on Line(E, I), Line(D, E), h we get concurrent(h, Line(D, E), Line(E, I))
By concurrent_sufficient_conditions on Line(D, H), g, Line(D, I) we get concurrent(g, Line(D, H), Line(D, I))
By concurrent_sufficient_conditions on Line(A, I), k, Line(E, I) we get concurrent(k, Line(A, I), Line(E, I))
By concurrent_sufficient_conditions on f, i, Line(A, I) we get concurrent(f, i, Line(A, I))
By concurrent_sufficient_conditions on f, i, Line(A, H) we get concurrent(f, i, Line(A, H))
By concurrent_sufficient_conditions on i, Line(D, I), Line(D, H) we get concurrent(i, Line(D, H), Line(D, I))
By concurrent_sufficient_conditions on Line(E, I), Line(A, I), Line(D, I) we get concurrent(Line(A, I), Line(D, I), Line(E, I))
By concurrent_sufficient_conditions on Line(A, I), k, Line(D, I) we get concurrent(k, Line(A, I), Line(D, I))
By concurrent_sufficient_conditions on Line(D, E), Line(D, I), g we get concurrent(g, Line(D, E), Line(D, I))
By concurrent_sufficient_conditions on i, g, Line(D, I) we get concurrent(g, i, Line(D, I))
By concurrent_sufficient_conditions on h, i, Line(A, H) we get concurrent(h, i, Line(A, H))
By concurrent_sufficient_conditions on Line(D, E), i, Line(D, I) we get concurrent(i, Line(D, E), Line(D, I))
By concurrent_sufficient_conditions on Line(E, I), h, Line(E, H) we get concurrent(h, Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(D, H), Line(A, H), Line(E, H) we get concurrent(Line(A, H), Line(D, H), Line(E, H))
By concurrent_sufficient_conditions on j, Line(E, H), h we get concurrent(h, j, Line(E, H))
By concurrent_sufficient_conditions on f, Line(A, H), Line(A, I) we get concurrent(f, Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on Line(D, E), Line(D, H), Line(D, I) we get concurrent(Line(D, E), Line(D, H), Line(D, I))
By concurrent_sufficient_conditions on j, h, Line(D, E) we get concurrent(h, j, Line(D, E))
By concurrent_sufficient_conditions on Line(D, H), k, Line(E, H) we get concurrent(k, Line(D, H), Line(E, H))
By concurrent_sufficient_conditions on Line(E, H), j, Line(E, I) we get concurrent(j, Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on g, Line(D, I), i we get concurrent(g, i, Line(D, I))
By concurrent_sufficient_conditions on Line(A, I), Line(E, I), k we get concurrent(k, Line(A, I), Line(E, I))
By concurrent_sufficient_conditions on Line(A, I), f, i we get concurrent(f, i, Line(A, I))
By concurrent_sufficient_conditions on g, i, Line(D, H) we get concurrent(g, i, Line(D, H))
By concurrent_sufficient_conditions on i, Line(D, H), g we get concurrent(g, i, Line(D, H))
By concurrent_sufficient_conditions on g, Line(D, H), Line(D, I) we get concurrent(g, Line(D, H), Line(D, I))
By concurrent_sufficient_conditions on i, Line(A, I), f we get concurrent(f, i, Line(A, I))
By concurrent_sufficient_conditions on Line(A, H), i, Line(A, I) we get concurrent(i, Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on Line(D, E), Line(E, I), Line(E, H) we get concurrent(Line(D, E), Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(D, H), Line(E, H), k we get concurrent(k, Line(D, H), Line(E, H))
By concurrent_sufficient_conditions on Line(A, H), Line(D, H), Line(E, H) we get concurrent(Line(A, H), Line(D, H), Line(E, H))
By concurrent_sufficient_conditions on Line(D, E), Line(D, H), g we get concurrent(g, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on Line(D, E), Line(D, I), i we get concurrent(i, Line(D, E), Line(D, I))
By concurrent_sufficient_conditions on Line(A, H), Line(A, I), i we get concurrent(i, Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on Line(E, H), k, Line(A, H) we get concurrent(k, Line(A, H), Line(E, H))
By line_definition on orthocenter(A, B, C), D, i we get i == Line(D, orthocenter(A, B, C))
By concurrent_sufficient_conditions on Line(E, H), Line(A, H), k we get concurrent(k, Line(A, H), Line(E, H))
By concurrent_sufficient_conditions on Line(D, E), Line(E, H), h we get concurrent(h, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on i, Line(D, E), g we get concurrent(g, i, Line(D, E))
By concurrent_sufficient_conditions on i, Line(D, E), Line(D, H) we get concurrent(i, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on i, g, Line(D, E) we get concurrent(g, i, Line(D, E))
By concurrent_sufficient_conditions on h, Line(E, I), j we get concurrent(h, j, Line(E, I))
By concurrent_sufficient_conditions on Line(E, H), Line(E, I), Line(D, E) we get concurrent(Line(D, E), Line(E, H), Line(E, I))
By line_definition on C, orthocenter(A, B, C), Line(C, F) we get Line(C, F) == Line(C, orthocenter(A, B, C))
By concurrent_sufficient_conditions on Line(D, I), Line(A, I), k we get concurrent(k, Line(A, I), Line(D, I))
By concurrent_sufficient_conditions on k, Line(A, H), Line(E, H) we get concurrent(k, Line(A, H), Line(E, H))
By concurrent_sufficient_conditions on Line(D, I), i, g we get concurrent(g, i, Line(D, I))
By concurrent_sufficient_conditions on i, Line(A, H), Line(A, I) we get concurrent(i, Line(A, H), Line(A, I))
By concurrent_sufficient_conditions on Line(D, E), h, Line(E, H) we get concurrent(h, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(D, E), i, Line(D, H) we get concurrent(i, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on Line(D, I), Line(D, E), g we get concurrent(g, Line(D, E), Line(D, I))
By concurrent_sufficient_conditions on h, f, Line(A, I) we get concurrent(f, h, Line(A, I))
By concurrent_sufficient_conditions on Line(E, I), Line(D, I), Line(A, I) we get concurrent(Line(A, I), Line(D, I), Line(E, I))
By concurrent_sufficient_conditions on h, Line(D, E), j we get concurrent(h, j, Line(D, E))
By concurrent_sufficient_conditions on Line(A, I), i, f we get concurrent(f, i, Line(A, I))
By concurrent_sufficient_conditions on k, Line(E, H), Line(D, H) we get concurrent(k, Line(D, H), Line(E, H))
By concurrent_sufficient_conditions on Line(A, I), h, f we get concurrent(f, h, Line(A, I))
By concurrent_sufficient_conditions on k, Line(A, H), Line(D, H) we get concurrent(k, Line(A, H), Line(D, H))
By concurrent_sufficient_conditions on k, Line(E, I), Line(A, I) we get concurrent(k, Line(A, I), Line(E, I))
By concurrent_sufficient_conditions on Line(D, I), i, Line(D, H) we get concurrent(i, Line(D, H), Line(D, I))
By concurrent_sufficient_conditions on g, Line(D, I), Line(D, E) we get concurrent(g, Line(D, E), Line(D, I))
By concurrent_sufficient_conditions on Line(D, I), Line(E, I), Line(A, I) we get concurrent(Line(A, I), Line(D, I), Line(E, I))
By concurrent_sufficient_conditions on Line(A, I), h, i we get concurrent(h, i, Line(A, I))
By concurrent_sufficient_conditions on j, Line(E, I), Line(E, H) we get concurrent(j, Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on i, Line(A, H), f we get concurrent(f, i, Line(A, H))
By concurrent_sufficient_conditions on Line(A, H), f, h we get concurrent(f, h, Line(A, H))
By concurrent_sufficient_conditions on Line(D, I), g, i we get concurrent(g, i, Line(D, I))
By concurrent_sufficient_conditions on i, f, Line(A, H) we get concurrent(f, i, Line(A, H))
By concurrent_sufficient_conditions on k, Line(D, I), Line(A, I) we get concurrent(k, Line(A, I), Line(D, I))
By concurrent_sufficient_conditions on h, Line(A, H), i we get concurrent(h, i, Line(A, H))
By concurrent_sufficient_conditions on Line(D, E), j, h we get concurrent(h, j, Line(D, E))
By concurrent_sufficient_conditions on Line(D, H), Line(D, I), g we get concurrent(g, Line(D, H), Line(D, I))
By concurrent_sufficient_conditions on Line(D, H), i, Line(D, I) we get concurrent(i, Line(D, H), Line(D, I))
By concurrent_sufficient_conditions on f, Line(A, H), h we get concurrent(f, h, Line(A, H))
By concurrent_sufficient_conditions on Line(D, I), Line(D, H), Line(D, E) we get concurrent(Line(D, E), Line(D, H), Line(D, I))
By concurrent_sufficient_conditions on i, Line(D, E), Line(D, I) we get concurrent(i, Line(D, E), Line(D, I))
By concurrent_sufficient_conditions on i, Line(D, I), g we get concurrent(g, i, Line(D, I))
By concurrent_sufficient_conditions on Line(E, I), Line(A, I), k we get concurrent(k, Line(A, I), Line(E, I))
By concurrent_sufficient_conditions on h, Line(A, I), i we get concurrent(h, i, Line(A, I))
By concurrent_sufficient_conditions on Line(D, E), Line(D, H), i we get concurrent(i, Line(D, E), Line(D, H))
By concurrent_sufficient_conditions on Line(D, E), Line(E, I), h we get concurrent(h, Line(D, E), Line(E, I))
By concurrent_sufficient_conditions on Line(D, I), Line(D, E), Line(D, H) we get concurrent(Line(D, E), Line(D, H), Line(D, I))
By concurrent_sufficient_conditions on k, Line(A, I), Line(E, I) we get concurrent(k, Line(A, I), Line(E, I))
By concurrent_sufficient_conditions on Line(A, H), Line(A, I), h we get concurrent(h, Line(A, H), Line(A, I))
By line_intersection_definition on orthocenter(A, B, C), j, Line(C, F) we get orthocenter(A, B, C) == line_intersection(j, Line(C, F))
By line_intersection_definition on orthocenter(A, B, C), Line(C, F), i we get orthocenter(A, B, C) == line_intersection(i, Line(C, F))
By perpendicular_line_definition on orthocenter(A, B, C), Line(C, F), f we get Line(C, F) == perpendicular_line(orthocenter(A, B, C), f)
By perpendicular_line_definition on orthocenter(A, B, C), i, g we get i == perpendicular_line(orthocenter(A, B, C), g)
By perpendicular_line_definition on orthocenter(A, B, C), j, h we get j == perpendicular_line(orthocenter(A, B, C), h)
By line_unique_intersection on j, i, orthocenter(A, B, C), G we get G == orthocenter(A, B, C)
By between_imply_not_between on I, C, H we get collinear_and_not_between(C, I, H)
By between_imply_not_between on B, C, D we get collinear_and_not_between(C, B, D)
By between_imply_not_between on H, C, I we get collinear_and_not_between(C, H, I)
By between_imply_not_between on A, C, E we get collinear_and_not_between(C, A, E)
By between_imply_not_between on D, C, B we get collinear_and_not_between(B, D, C)
By between_imply_not_between on G, D, A we get collinear_and_not_between(A, G, D)
By between_imply_not_between on B, F, A we get collinear_and_not_between(A, B, F)
By between_imply_not_between on A, F, B we get collinear_and_not_between(B, A, F)
By between_imply_not_between on A, D, G we get collinear_and_not_between(D, A, G)
By between_imply_not_between on E, C, A we get collinear_and_not_between(A, E, C)
By between_imply_not_between on B, E, G we get collinear_and_not_between(E, B, G)
By between_imply_not_between on G, E, B we get collinear_and_not_between(B, G, E)
By divide_by_2_mod_180_v1 on C, B, E, G, A, E we get angle(C, B, E) == angle(G, A, E) mod 360
By divide_by_2_mod_180_v2 on D, G, E, B, C, A we get angle(D, G, E) == angle(B, C, A) + 180 mod 360
By orthocenter_concurrency on C, G, B we get orthocenter(B, C, G) in altitude(C, B, G), orthocenter(B, C, G) in altitude(G, B, C), orthocenter(B, C, G) in altitude(B, C, G)
By orthocenter_concurrency on B, A, G we get orthocenter(A, B, G) in altitude(B, A, G), orthocenter(A, B, G) in altitude(A, B, G), orthocenter(A, B, G) in altitude(G, A, B)
By in_imply_collinear on orthocenter(A, B, C), D, G we get collinear(D, G, orthocenter(A, B, C))
By divide_by_2_mod_180_v2 on D, C, F, D, A, B we get angle(D, C, F) == angle(D, A, B) + 180 mod 360
By divide_by_2_mod_180_v1 on B, G, D, E, C, B we get angle(B, G, D) == angle(E, C, B) mod 360
By divide_by_2_mod_180_v0 on E, A, G, E, B, D we get angle(E, A, G) == angle(E, B, D) mod 360
By reverse_direction on F, C we get 180 == direction(F, C) - direction(C, F) mod 360
By orthocenter_concurrency on C, G, A we get orthocenter(A, C, G) in altitude(C, A, G), orthocenter(A, C, G) in altitude(G, A, C), orthocenter(A, C, G) in altitude(A, C, G)
By divide_by_2_mod_180_v1 on F, B, G, F, C, A we get angle(F, B, G) == angle(F, C, A) mod 360
By divide_by_2_mod_180_v2 on E, B, D, E, I, D we get angle(E, B, D) == angle(E, I, D) + 180 mod 360
By in_imply_collinear on orthocenter(A, B, C), D, A we get collinear(A, D, orthocenter(A, B, C))
By divide_by_2_mod_180_v2 on D, G, B, B, C, A we get angle(D, G, B) == angle(B, C, A) + 180 mod 360
By divide_by_2_mod_180_v1 on C, B, E, G, A, C we get angle(C, B, E) == angle(G, A, C) mod 360
By divide_by_2_mod_180_v3 on E, G, D, A, C, B we get angle(E, G, D) == angle(A, C, B) + 180 mod 360
By in_imply_collinear on orthocenter(A, B, C), G, B we get collinear(B, G, orthocenter(A, B, C))
By divide_by_2_mod_180_v0 on B, C, E, D, G, B we get angle(B, C, E) == angle(D, G, B) mod 360
By divide_by_2_mod_180_v0 on G, B, D, C, A, G we get angle(C, A, G) == angle(G, B, D) mod 360
By divide_by_2_mod_180_v1 on A, B, E, F, C, A we get angle(A, B, E) == angle(F, C, A) mod 360
By divide_by_2_mod_180_v0 on D, C, A, A, G, B we get angle(A, G, B) == angle(D, C, A) mod 360
By divide_by_2_mod_180_v3 on D, C, E, D, G, B we get angle(D, C, E) == angle(D, G, B) + 180 mod 360
By divide_by_2_mod_180_v2 on D, C, F, G, A, F we get angle(D, C, F) == angle(G, A, F) + 180 mod 360
By divide_by_2_mod_180_v0 on D, C, A, A, G, E we get angle(A, G, E) == angle(D, C, A) mod 360
By divide_by_2_mod_180_v0 on F, A, D, F, C, B we get angle(F, A, D) == angle(F, C, B) mod 360
By divide_by_2_mod_180_v3 on A, B, E, F, C, E we get angle(A, B, E) == angle(F, C, E) + 180 mod 360
By divide_by_2_mod_180_v3 on E, C, F, E, B, A we get angle(E, C, F) == angle(E, B, A) + 180 mod 360
By divide_by_2_mod_180_v1 on D, A, B, B, C, F we get angle(B, C, F) == angle(D, A, B) mod 360
By divide_by_2_mod_180_v0 on E, B, C, C, A, D we get angle(C, A, D) == angle(E, B, C) mod 360
By divide_by_2_mod_180_v2 on A, C, B, E, G, D we get angle(A, C, B) == angle(E, G, D) + 180 mod 360
By between_imply_segment_sum on A, F, B we get distance(A, B) == distance(A, F) + distance(B, F)
By in_imply_collinear on orthocenter(A, B, C), A, G we get collinear(A, G, orthocenter(A, B, C))
By divide_by_2_mod_180_v1 on E, G, A, E, C, B we get angle(E, C, B) == angle(E, G, A) mod 360
By divide_by_2_mod_180_v1 on D, A, E, C, B, G we get angle(C, B, G) == angle(D, A, E) mod 360
By divide_by_2_mod_180_v1 on E, G, D, E, C, B we get angle(E, C, B) == angle(E, G, D) mod 360
By divide_by_2_mod_180_v0 on D, G, B, D, C, A we get angle(D, C, A) == angle(D, G, B) mod 360
By aa_anti_similarity on B, E, C, A, D, C we get anti_similar_triangles(A, C, D, B, C, E)
By divide_by_2_mod_180_v0 on E, B, A, A, C, F we get angle(A, C, F) == angle(E, B, A) mod 360
By divide_by_2_mod_180_v0 on G, B, C, E, A, D we get angle(E, A, D) == angle(G, B, C) mod 360
By divide_by_2_mod_180_v3 on E, G, A, A, C, B we get angle(E, G, A) == angle(A, C, B) + 180 mod 360
By divide_by_2_mod_180_v1 on E, G, A, A, C, D we get angle(A, C, D) == angle(E, G, A) mod 360
By divide_by_2_mod_180_v1 on G, A, E, C, B, G we get angle(C, B, G) == angle(G, A, E) mod 360
By divide_by_2_mod_180_v3 on E, G, A, E, C, D we get angle(E, G, A) == angle(E, C, D) + 180 mod 360
By divide_by_2_mod_180_v1 on D, B, G, G, A, C we get angle(D, B, G) == angle(G, A, C) mod 360
By divide_by_2_mod_180_v3 on G, A, B, D, C, F we get angle(G, A, B) == angle(D, C, F) + 180 mod 360
By divide_by_2_mod_180_v2 on B, A, G, F, C, D we get angle(B, A, G) == angle(F, C, D) + 180 mod 360
By divide_by_2_mod_180_v3 on B, G, A, A, C, B we get angle(B, G, A) == angle(A, C, B) + 180 mod 360
By divide_by_2_mod_180_v1 on B, C, F, G, A, F we get angle(B, C, F) == angle(G, A, F) mod 360
By divide_by_2_mod_180_v3 on E, I, D, G, B, C we get angle(E, I, D) == angle(G, B, C) + 180 mod 360
By in_imply_collinear on orthocenter(A, B, C), E, G we get collinear(E, G, orthocenter(A, B, C))
By divide_by_2_mod_180_v0 on A, C, F, G, B, F we get angle(A, C, F) == angle(G, B, F) mod 360
By divide_by_2_mod_180_v1 on D, A, C, C, B, G we get angle(C, B, G) == angle(D, A, C) mod 360
By divide_by_2_mod_180_v3 on E, I, D, E, B, C we get angle(E, I, D) == angle(E, B, C) + 180 mod 360
By divide_by_2_mod_180_v2 on D, I, E, D, B, G we get angle(D, I, E) == angle(D, B, G) + 180 mod 360
By divide_by_2_mod_180_v0 on E, B, C, E, H, D we get angle(E, B, C) == angle(E, H, D) mod 360
By divide_by_2_mod_180_v1 on A, C, D, B, G, D we get angle(A, C, D) == angle(B, G, D) mod 360
By divide_by_2_mod_180_v1 on B, G, A, E, C, B we get angle(B, G, A) == angle(E, C, B) mod 360
By divide_by_2_mod_180_v2 on G, B, C, E, I, D we get angle(G, B, C) == angle(E, I, D) + 180 mod 360
By reverse_direction on C, H we get 180 == direction(C, H) - direction(H, C) mod 360
By divide_by_2_mod_180_v2 on E, C, D, E, G, A we get angle(E, C, D) == angle(E, G, A) + 180 mod 360
By divide_by_2_mod_180_v0 on G, B, C, E, A, G we get angle(E, A, G) == angle(G, B, C) mod 360
By divide_by_2_mod_180_v3 on D, A, B, D, C, F we get angle(D, A, B) == angle(D, C, F) + 180 mod 360
By divide_by_2_mod_180_v2 on A, C, B, B, G, A we get angle(A, C, B) == angle(B, G, A) + 180 mod 360
By divide_by_2_mod_180_v0 on C, A, D, G, B, C we get angle(C, A, D) == angle(G, B, C) mod 360
By divide_by_2_mod_180_v2 on E, C, D, B, G, D we get angle(E, C, D) == angle(B, G, D) + 180 mod 360
By divide_by_2_mod_180_v1 on C, B, E, D, A, C we get angle(C, B, E) == angle(D, A, C) mod 360
By reverse_direction on A, G we get 180 == direction(A, G) - direction(G, A) mod 360
By divide_by_2_mod_180_v3 on E, C, F, G, B, F we get angle(E, C, F) == angle(G, B, F) + 180 mod 360
By in_imply_collinear on orthocenter(A, B, C), F, C we get collinear(C, F, orthocenter(A, B, C))
By divide_by_2_mod_180_v1 on A, C, D, E, G, D we get angle(A, C, D) == angle(E, G, D) mod 360
By divide_by_2_mod_180_v1 on D, A, C, D, B, G we get angle(D, A, C) == angle(D, B, G) mod 360
By divide_by_2_mod_180_v0 on B, C, E, A, G, E we get angle(A, G, E) == angle(B, C, E) mod 360
By divide_by_2_mod_180_v1 on B, C, F, D, A, F we get angle(B, C, F) == angle(D, A, F) mod 360
By divide_by_2_mod_180_v0 on G, B, C, E, H, D we get angle(E, H, D) == angle(G, B, C) mod 360
By divide_by_2_mod_180_v0 on G, B, D, E, A, D we get angle(E, A, D) == angle(G, B, D) mod 360
By divide_by_2_mod_180_v0 on E, B, F, A, C, F we get angle(A, C, F) == angle(E, B, F) mod 360
By in_imply_collinear on orthocenter(A, B, C), B, E we get collinear(B, E, orthocenter(A, B, C))
By divide_by_2_mod_180_v0 on G, B, A, A, C, F we get angle(A, C, F) == angle(G, B, A) mod 360
By divide_by_2_mod_180_v3 on D, C, E, D, G, E we get angle(D, C, E) == angle(D, G, E) + 180 mod 360
By divide_by_2_mod_180_v0 on C, A, G, G, B, C we get angle(C, A, G) == angle(G, B, C) mod 360
By divide_by_2_mod_180_v3 on B, C, A, D, G, B we get angle(B, C, A) == angle(D, G, B) + 180 mod 360
By reverse_direction on I, C we get 180 == direction(I, C) - direction(C, I) mod 360
By divide_by_2_mod_180_v1 on D, H, E, C, B, G we get angle(C, B, G) == angle(D, H, E) mod 360
By divide_by_2_mod_180_v2 on B, A, D, F, C, D we get angle(B, A, D) == angle(F, C, D) + 180 mod 360
By divide_by_2_mod_180_v0 on C, A, D, E, B, D we get angle(C, A, D) == angle(E, B, D) mod 360
By divide_by_2_mod_180_v2 on F, A, G, F, C, D we get angle(F, A, G) == angle(F, C, D) + 180 mod 360
By divide_by_2_mod_180_v0 on F, C, B, B, A, D we get angle(B, A, D) == angle(F, C, B) mod 360
By divide_by_2_mod_180_v2 on E, C, D, B, G, A we get angle(E, C, D) == angle(B, G, A) + 180 mod 360
By divide_by_2_mod_180_v3 on F, C, D, B, A, D we get angle(F, C, D) == angle(B, A, D) + 180 mod 360
By divide_by_2_mod_180_v0 on E, A, G, G, B, D we get angle(E, A, G) == angle(G, B, D) mod 360
By divide_by_2_mod_180_v3 on D, C, E, A, G, B we get angle(D, C, E) == angle(A, G, B) + 180 mod 360
By reverse_direction on D, B we get 180 == direction(D, B) - direction(B, D) mod 360
By divide_by_2_mod_180_v3 on C, B, E, D, I, E we get angle(C, B, E) == angle(D, I, E) + 180 mod 360
By divide_by_2_mod_180_v0 on F, A, G, F, C, B we get angle(F, A, G) == angle(F, C, B) mod 360
By divide_by_2_mod_180_v2 on G, B, A, E, C, F we get angle(G, B, A) == angle(E, C, F) + 180 mod 360
By aa_anti_similarity on A, G, E, B, G, D we get anti_similar_triangles(A, E, G, B, D, G)
By divide_by_2_mod_180_v0 on E, A, G, E, B, C we get angle(E, A, G) == angle(E, B, C) mod 360
By divide_by_2_mod_180_v0 on E, B, C, E, A, D we get angle(E, A, D) == angle(E, B, C) mod 360
By between_imply_segment_sum on E, C, A we get distance(A, E) == distance(C, E) + distance(A, C)
By divide_by_2_mod_180_v3 on D, A, F, D, C, F we get angle(D, A, F) == angle(D, C, F) + 180 mod 360
By reverse_direction on G, B we get 180 == direction(G, B) - direction(B, G) mod 360
By divide_by_2_mod_180_v0 on C, A, D, G, B, D we get angle(C, A, D) == angle(G, B, D) mod 360
By divide_by_2_mod_180_v2 on D, C, F, G, A, B we get angle(D, C, F) == angle(G, A, B) + 180 mod 360
By reverse_direction on C, I we get 180 == direction(C, I) - direction(I, C) mod 360
By divide_by_2_mod_180_v1 on A, C, D, B, G, A we get angle(A, C, D) == angle(B, G, A) mod 360
By divide_by_2_mod_180_v3 on E, C, F, G, B, A we get angle(E, C, F) == angle(G, B, A) + 180 mod 360
By divide_by_2_mod_180_v0 on D, G, E, B, C, E we get angle(B, C, E) == angle(D, G, E) mod 360
By divide_by_2_mod_180_v1 on G, A, C, C, B, G we get angle(C, B, G) == angle(G, A, C) mod 360
By aa_anti_similarity on A, B, D, C, B, F we get anti_similar_triangles(A, B, D, C, B, F)
By divide_by_2_mod_180_v2 on G, B, D, E, I, D we get angle(G, B, D) == angle(E, I, D) + 180 mod 360
By divide_by_2_mod_180_v3 on F, C, D, B, A, G we get angle(F, C, D) == angle(B, A, G) + 180 mod 360
By divide_by_2_mod_180_v1 on D, A, E, D, B, E we get angle(D, A, E) == angle(D, B, E) mod 360
By divide_by_2_mod_180_v1 on D, B, E, G, A, C we get angle(D, B, E) == angle(G, A, C) mod 360
By divide_by_2_mod_180_v2 on A, G, E, B, C, A we get angle(A, G, E) == angle(B, C, A) + 180 mod 360
By divide_by_2_mod_180_v0 on E, B, C, C, A, G we get angle(C, A, G) == angle(E, B, C) mod 360
By divide_by_2_mod_180_v1 on A, B, G, F, C, A we get angle(A, B, G) == angle(F, C, A) mod 360
By divide_by_2_mod_180_v1 on D, B, E, D, A, C we get angle(D, A, C) == angle(D, B, E) mod 360
By divide_by_2_mod_180_v3 on F, B, E, F, C, E we get angle(F, B, E) == angle(F, C, E) + 180 mod 360
By reverse_direction on D, C we get 180 == direction(D, C) - direction(C, D) mod 360
By divide_by_2_mod_180_v3 on B, G, A, E, C, D we get angle(B, G, A) == angle(E, C, D) + 180 mod 360
By divide_by_2_mod_180_v3 on E, G, D, E, C, D we get angle(E, G, D) == angle(E, C, D) + 180 mod 360
By divide_by_2_mod_180_v1 on D, B, G, G, A, E we get angle(D, B, G) == angle(G, A, E) mod 360
By divide_by_2_mod_180_v3 on F, B, G, F, C, E we get angle(F, B, G) == angle(F, C, E) + 180 mod 360
By divide_by_2_mod_180_v1 on C, B, E, D, H, E we get angle(C, B, E) == angle(D, H, E) mod 360
By divide_by_2_mod_180_v1 on D, B, G, D, H, E we get angle(D, B, G) == angle(D, H, E) mod 360
By between_imply_segment_sum on D, C, B we get distance(B, D) == distance(C, D) + distance(B, C)
By aa_anti_similarity on B, C, E, A, C, D we get anti_similar_triangles(A, C, D, B, C, E)
By divide_by_2_mod_180_v2 on D, G, B, D, C, E we get angle(D, G, B) == angle(D, C, E) + 180 mod 360
By reverse_direction on B, A we get 180 == direction(B, A) - direction(A, B) mod 360
By divide_by_2_mod_180_v3 on C, B, G, D, I, E we get angle(C, B, G) == angle(D, I, E) + 180 mod 360
By divide_by_2_mod_180_v0 on G, B, D, E, H, D we get angle(E, H, D) == angle(G, B, D) mod 360
By divide_by_2_mod_180_v2 on A, G, E, D, C, E we get angle(A, G, E) == angle(D, C, E) + 180 mod 360
By divide_by_2_mod_180_v1 on D, H, E, D, B, E we get angle(D, B, E) == angle(D, H, E) mod 360
By divide_by_2_mod_180_v2 on E, B, C, E, I, D we get angle(E, B, C) == angle(E, I, D) + 180 mod 360
By divide_by_2_mod_180_v2 on E, B, F, E, C, F we get angle(E, B, F) == angle(E, C, F) + 180 mod 360
By reverse_direction on A, C we get 180 == direction(A, C) - direction(C, A) mod 360
By divide_by_2_mod_180_v0 on E, B, D, C, A, G we get angle(C, A, G) == angle(E, B, D) mod 360
By divide_by_2_mod_180_v2 on F, A, D, F, C, D we get angle(F, A, D) == angle(F, C, D) + 180 mod 360
By divide_by_2_mod_180_v0 on E, B, D, E, H, D we get angle(E, B, D) == angle(E, H, D) mod 360
By divide_by_2_mod_180_v1 on C, B, E, D, A, E we get angle(C, B, E) == angle(D, A, E) mod 360
By reverse_direction on F, A we get 180 == direction(F, A) - direction(A, F) mod 360
By divide_by_2_mod_180_v2 on F, C, E, F, B, E we get angle(F, C, E) == angle(F, B, E) + 180 mod 360
By divide_by_2_mod_180_v1 on B, C, F, G, A, B we get angle(B, C, F) == angle(G, A, B) mod 360
By divide_by_2_mod_180_v1 on G, A, E, D, B, E we get angle(D, B, E) == angle(G, A, E) mod 360
By divide_by_2_mod_180_v2 on D, G, E, D, C, E we get angle(D, G, E) == angle(D, C, E) + 180 mod 360
By divide_by_2_mod_180_v3 on E, C, F, E, B, F we get angle(E, C, F) == angle(E, B, F) + 180 mod 360
By divide_by_2_mod_180_v3 on D, B, G, D, I, E we get angle(D, B, G) == angle(D, I, E) + 180 mod 360
By aa_anti_similarity on G, D, B, C, E, B we get anti_similar_triangles(B, C, E, B, G, D)
By aa_anti_similarity on A, E, G, B, D, G we get anti_similar_triangles(A, E, G, B, D, G)
By divide_by_2_mod_180_v2 on D, I, E, D, B, E we get angle(D, I, E) == angle(D, B, E) + 180 mod 360
By divide_by_2_mod_180_v2 on F, C, E, A, B, E we get angle(F, C, E) == angle(A, B, E) + 180 mod 360
By divide_by_2_mod_180_v0 on A, G, B, B, C, E we get angle(A, G, B) == angle(B, C, E) mod 360
By aa_anti_similarity on C, F, B, A, D, B we get anti_similar_triangles(A, B, D, C, B, F)
By divide_by_2_mod_180_v2 on A, G, B, D, C, E we get angle(A, G, B) == angle(D, C, E) + 180 mod 360
By divide_by_2_mod_180_v3 on F, C, D, F, A, D we get angle(F, C, D) == angle(F, A, D) + 180 mod 360
By divide_by_2_mod_180_v1 on D, B, G, D, A, E we get angle(D, A, E) == angle(D, B, G) mod 360
By divide_by_2_mod_180_v3 on D, C, E, A, G, E we get angle(D, C, E) == angle(A, G, E) + 180 mod 360
By divide_by_2_mod_180_v3 on E, I, D, E, B, D we get angle(E, I, D) == angle(E, B, D) + 180 mod 360
By divide_by_2_mod_180_v2 on A, C, B, B, G, D we get angle(A, C, B) == angle(B, G, D) + 180 mod 360
By divide_by_2_mod_180_v2 on D, I, E, C, B, E we get angle(D, I, E) == angle(C, B, E) + 180 mod 360
By divide_by_2_mod_180_v3 on B, C, A, A, G, E we get angle(B, C, A) == angle(A, G, E) + 180 mod 360
By divide_by_2_mod_180_v3 on E, I, D, G, B, D we get angle(E, I, D) == angle(G, B, D) + 180 mod 360
By divide_by_2_mod_180_v2 on D, I, E, C, B, G we get angle(D, I, E) == angle(C, B, G) + 180 mod 360
By divide_by_2_mod_180_v3 on G, A, F, D, C, F we get angle(G, A, F) == angle(D, C, F) + 180 mod 360
By divide_by_2_mod_180_v3 on A, B, G, F, C, E we get angle(A, B, G) == angle(F, C, E) + 180 mod 360
By divide_by_2_mod_180_v2 on D, C, F, D, A, F we get angle(D, C, F) == angle(D, A, F) + 180 mod 360
By divide_by_2_mod_180_v0 on D, C, A, D, G, E we get angle(D, C, A) == angle(D, G, E) mod 360
By divide_by_2_mod_180_v2 on F, C, E, F, B, G we get angle(F, C, E) == angle(F, B, G) + 180 mod 360
By divide_by_2_mod_180_v3 on D, B, E, D, I, E we get angle(D, B, E) == angle(D, I, E) + 180 mod 360
By divide_by_2_mod_180_v0 on E, B, D, E, A, D we get angle(E, A, D) == angle(E, B, D) mod 360
By divide_by_2_mod_180_v0 on B, A, G, F, C, B we get angle(B, A, G) == angle(F, C, B) mod 360
By aa_anti_similarity on C, B, F, A, B, D we get anti_similar_triangles(A, B, D, C, B, F)
By divide_by_2_mod_180_v3 on B, G, D, E, C, D we get angle(B, G, D) == angle(E, C, D) + 180 mod 360
By divide_by_2_mod_180_v3 on B, G, D, A, C, B we get angle(B, G, D) == angle(A, C, B) + 180 mod 360
By between_imply_segment_sum on I, C, H we get distance(H, I) == distance(C, I) + distance(C, H)
By reverse_direction on G, E we get 180 == direction(G, E) - direction(E, G) mod 360
By divide_by_2_mod_180_v3 on B, C, A, A, G, B we get angle(B, C, A) == angle(A, G, B) + 180 mod 360
By aa_anti_similarity on B, E, A, C, F, A we get anti_similar_triangles(A, B, E, A, C, F)
By between_imply_segment_sum on A, D, G we get distance(A, G) == distance(A, D) + distance(D, G)
By divide_by_2_mod_180_v2 on E, B, A, E, C, F we get angle(E, B, A) == angle(E, C, F) + 180 mod 360
By reverse_direction on B, E we get 180 == direction(B, E) - direction(E, B) mod 360
By divide_by_2_mod_180_v2 on A, C, B, E, G, A we get angle(A, C, B) == angle(E, G, A) + 180 mod 360
By reverse_direction on C, F we get 180 == direction(C, F) - direction(F, C) mod 360
By divide_by_2_mod_180_v1 on F, C, A, F, B, E we get angle(F, B, E) == angle(F, C, A) mod 360
By divide_by_2_mod_180_v2 on E, C, D, E, G, D we get angle(E, C, D) == angle(E, G, D) + 180 mod 360
By divide_by_2_mod_180_v2 on G, B, F, E, C, F we get angle(G, B, F) == angle(E, C, F) + 180 mod 360
By aa_anti_similarity on C, D, A, G, E, A we get anti_similar_triangles(A, C, D, A, G, E)
By divide_by_2_mod_180_v2 on F, C, E, A, B, G we get angle(F, C, E) == angle(A, B, G) + 180 mod 360
By reverse_direction on C, B we get 180 == direction(C, B) - direction(B, C) mod 360
By aa_anti_similarity on B, D, G, A, E, G we get anti_similar_triangles(A, E, G, B, D, G)
By divide_by_2_mod_180_v2 on A, G, B, B, C, A we get angle(A, G, B) == angle(B, C, A) + 180 mod 360
By divide_by_2_mod_180_v3 on B, C, A, D, G, E we get angle(B, C, A) == angle(D, G, E) + 180 mod 360
By divide_by_2_mod_180_v3 on F, C, D, F, A, G we get angle(F, C, D) == angle(F, A, G) + 180 mod 360
By aa_anti_similarity on G, A, E, C, A, D we get anti_similar_triangles(A, C, D, A, G, E)
By aa_anti_similarity on C, A, F, B, A, E we get anti_similar_triangles(A, B, E, A, C, F)
By between_imply_segment_sum on G, E, B we get distance(B, G) == distance(E, G) + distance(B, E)
By aa_anti_similarity on B, A, E, C, A, F we get anti_similar_triangles(A, B, E, A, C, F)
By reverse_direction on C, D we get 180 == direction(C, D) - direction(D, C) mod 360
By reverse_direction on H, C we get 180 == direction(H, C) - direction(C, H) mod 360
By aa_anti_similarity on C, F, A, B, E, A we get anti_similar_triangles(A, B, E, A, C, F)
By reverse_direction on E, G we get 180 == direction(E, G) - direction(G, E) mod 360
By reverse_direction on B, D we get 180 == direction(B, D) - direction(D, B) mod 360
By reverse_direction on C, A we get 180 == direction(C, A) - direction(A, C) mod 360
By reverse_direction on B, G we get 180 == direction(B, G) - direction(G, B) mod 360
By aa_anti_similarity on A, D, B, C, F, B we get anti_similar_triangles(A, B, D, C, B, F)
By reverse_direction on A, F we get 180 == direction(A, F) - direction(F, A) mod 360
By aa_anti_similarity on A, C, D, B, C, E we get anti_similar_triangles(A, C, D, B, C, E)
By aa_anti_similarity on B, G, D, A, G, E we get anti_similar_triangles(A, E, G, B, D, G)
By reverse_direction on G, A we get 180 == direction(G, A) - direction(A, G) mod 360
By aa_anti_similarity on G, E, A, C, D, A we get anti_similar_triangles(A, C, D, A, G, E)
By reverse_direction on C, E we get 180 == direction(C, E) - direction(E, C) mod 360
By reverse_direction on D, G we get 180 == direction(D, G) - direction(G, D) mod 360
By aa_anti_similarity on C, E, B, G, D, B we get anti_similar_triangles(B, C, E, B, G, D)
By reverse_direction on E, B we get 180 == direction(E, B) - direction(B, E) mod 360
By reverse_direction on A, B we get 180 == direction(A, B) - direction(B, A) mod 360
By aa_anti_similarity on A, D, C, B, E, C we get anti_similar_triangles(A, C, D, B, C, E)
By aa_anti_similarity on G, B, D, C, B, E we get anti_similar_triangles(B, C, E, B, G, D)
By reverse_direction on E, C we get 180 == direction(E, C) - direction(C, E) mod 360
By reverse_direction on B, C we get 180 == direction(B, C) - direction(C, B) mod 360
By aa_anti_similarity on C, B, E, G, B, D we get anti_similar_triangles(B, C, E, B, G, D)
By reverse_direction on G, D we get 180 == direction(G, D) - direction(D, G) mod 360
By reverse_direction on F, B we get 180 == direction(F, B) - direction(B, F) mod 360
By reverse_direction on B, F we get 180 == direction(B, F) - direction(F, B) mod 360
By aa_anti_similarity on C, A, D, G, A, E we get anti_similar_triangles(A, C, D, A, G, E)
By internal_angle_bisector_definition_v0_r on A, C, G, D we get Line(C, D) == internal_angle_bisector(A, D, G)
By external_angle_bisector_definition_v0_r on C, G, A, E we get Line(E, G) == external_angle_bisector(A, E, C)
By external_angle_bisector_definition_v0_r on B, C, B, E we get Line(C, E) == external_angle_bisector(B, E, B)
By external_angle_bisector_definition_v0_r on B, G, B, D we get Line(D, G) == external_angle_bisector(B, D, B)
By external_angle_bisector_definition_v0_r on B, A, B, E we get Line(A, E) == external_angle_bisector(B, E, B)
By external_angle_bisector_definition_v0_r on B, A, C, D we get Line(A, D) == external_angle_bisector(B, D, C)
By external_angle_bisector_definition_v0_r on A, B, A, E we get Line(B, E) == external_angle_bisector(A, E, A)
By internal_angle_bisector_definition_v0_r on H, C, H, I we get Line(C, I) == internal_angle_bisector(H, I, H)
By external_angle_bisector_definition_v0_r on G, C, G, E we get Line(C, E) == external_angle_bisector(G, E, G)
By external_angle_bisector_definition_v0_r on A, G, A, E we get Line(E, G) == external_angle_bisector(A, E, A)
By external_angle_bisector_definition_v0_r on A, C, A, D we get Line(C, D) == external_angle_bisector(A, D, A)
By external_angle_bisector_definition_v0_r on C, A, C, F we get Line(A, F) == external_angle_bisector(C, F, C)
By internal_angle_bisector_definition_v0_r on G, D, G, A we get Line(A, D) == internal_angle_bisector(G, A, G)
By external_angle_bisector_definition_v0_r on C, G, C, D we get Line(D, G) == external_angle_bisector(C, D, C)
By internal_angle_bisector_definition_v0_r on D, A, D, G we get Line(A, G) == internal_angle_bisector(D, G, D)
By internal_angle_bisector_definition_v0_r on A, B, G, D we get Line(B, D) == internal_angle_bisector(A, D, G)
By external_angle_bisector_definition_v0_r on C, B, C, E we get Line(B, E) == external_angle_bisector(C, E, C)
By internal_angle_bisector_definition_v0_r on C, B, C, D we get Line(B, D) == internal_angle_bisector(C, D, C)
By external_angle_bisector_definition_v0_r on A, C, A, F we get Line(C, F) == external_angle_bisector(A, F, A)
By external_angle_bisector_definition_v0_r on A, B, A, D we get Line(B, D) == external_angle_bisector(A, D, A)
By internal_angle_bisector_definition_v0_r on B, G, B, E we get Line(E, G) == internal_angle_bisector(B, E, B)
By external_angle_bisector_definition_v0_r on C, A, C, D we get Line(A, D) == external_angle_bisector(C, D, C)
By internal_angle_bisector_definition_v0_r on I, H, I, C we get Line(C, H) == internal_angle_bisector(I, C, I)
By internal_angle_bisector_definition_v0_r on B, C, B, D we get Line(C, D) == internal_angle_bisector(B, D, B)
By external_angle_bisector_definition_v0_r on B, A, B, D we get Line(A, D) == external_angle_bisector(B, D, B)
By internal_angle_bisector_definition_v0_r on A, D, A, G we get Line(D, G) == internal_angle_bisector(A, G, A)
By internal_angle_bisector_definition_v0_r on E, A, E, C we get Line(A, C) == internal_angle_bisector(E, C, E)
By external_angle_bisector_definition_v0_r on A, B, C, E we get Line(B, E) == external_angle_bisector(A, E, C)
By external_angle_bisector_definition_v0_r on B, G, C, D we get Line(D, G) == external_angle_bisector(B, D, C)
By internal_angle_bisector_definition_v0_r on I, C, I, H we get Line(C, H) == internal_angle_bisector(I, H, I)
By external_angle_bisector_definition_v0_r on G, B, G, D we get Line(B, D) == external_angle_bisector(G, D, G)
By external_angle_bisector_definition_v0_r on C, G, C, E we get Line(E, G) == external_angle_bisector(C, E, C)
By external_angle_bisector_definition_v0_r on G, C, G, D we get Line(C, D) == external_angle_bisector(G, D, G)
By external_angle_bisector_definition_v0_r on G, A, G, E we get Line(A, E) == external_angle_bisector(G, E, G)
By internal_angle_bisector_definition_v0_r on C, E, C, A we get Line(A, E) == internal_angle_bisector(C, A, C)
By internal_angle_bisector_definition_v0_r on H, I, H, C we get Line(C, I) == internal_angle_bisector(H, C, H)
By external_angle_bisector_definition_v0_r on C, B, C, F we get Line(B, F) == external_angle_bisector(C, F, C)
By internal_angle_bisector_definition_v0_r on A, C, A, E we get Line(C, E) == internal_angle_bisector(A, E, A)
By internal_angle_bisector_definition_v0_r on C, D, C, B we get Line(B, D) == internal_angle_bisector(C, B, C)
By internal_angle_bisector_definition_v0_r on G, A, G, D we get Line(A, D) == internal_angle_bisector(G, D, G)
By internal_angle_bisector_definition_v0_r on B, A, G, E we get Line(A, E) == internal_angle_bisector(B, E, G)
By internal_angle_bisector_definition_v0_r on A, B, A, F we get Line(B, F) == internal_angle_bisector(A, F, A)
By internal_angle_bisector_definition_v0_r on A, F, A, B we get Line(B, F) == internal_angle_bisector(A, B, A)
By external_angle_bisector_definition_v0_r on B, C, B, F we get Line(C, F) == external_angle_bisector(B, F, B)
By internal_angle_bisector_definition_v0_r on D, G, D, A we get Line(A, G) == internal_angle_bisector(D, A, D)
By internal_angle_bisector_definition_v0_r on A, E, A, C we get Line(C, E) == internal_angle_bisector(A, C, A)
By internal_angle_bisector_definition_v0_r on B, F, B, A we get Line(A, F) == internal_angle_bisector(B, A, B)
By internal_angle_bisector_definition_v0_r on A, G, A, D we get Line(D, G) == internal_angle_bisector(A, D, A)
By internal_angle_bisector_definition_v0_r on B, D, B, C we get Line(C, D) == internal_angle_bisector(B, C, B)
By internal_angle_bisector_definition_v0_r on B, E, B, G we get Line(E, G) == internal_angle_bisector(B, G, B)
By internal_angle_bisector_definition_v0_r on F, B, F, A we get Line(A, B) == internal_angle_bisector(F, A, F)
By internal_angle_bisector_definition_v0_r on E, C, E, A we get Line(A, C) == internal_angle_bisector(E, A, E)
By internal_angle_bisector_definition_v0_r on C, I, C, H we get Line(H, I) == internal_angle_bisector(C, H, C)
By internal_angle_bisector_definition_v0_r on G, B, G, E we get Line(B, E) == internal_angle_bisector(G, E, G)
By internal_angle_bisector_definition_v0_r on A, C, B, F we get Line(C, F) == internal_angle_bisector(A, F, B)
By internal_angle_bisector_definition_v0_r on E, G, E, B we get Line(B, G) == internal_angle_bisector(E, B, E)
By internal_angle_bisector_definition_v0_r on G, E, G, B we get Line(B, E) == internal_angle_bisector(G, B, G)
By internal_angle_bisector_definition_v0_r on E, B, E, G we get Line(B, G) == internal_angle_bisector(E, G, E)
By internal_angle_bisector_definition_v0_r on B, A, B, F we get Line(A, F) == internal_angle_bisector(B, F, B)
By internal_angle_bisector_definition_v0_r on D, B, D, C we get Line(B, C) == internal_angle_bisector(D, C, D)
By internal_angle_bisector_definition_v0_r on C, H, C, I we get Line(H, I) == internal_angle_bisector(C, I, C)
By internal_angle_bisector_definition_v0_r on B, C, G, E we get Line(C, E) == internal_angle_bisector(B, E, G)
By internal_angle_bisector_definition_v0_r on C, A, C, E we get Line(A, E) == internal_angle_bisector(C, E, C)
By internal_angle_bisector_definition_v0_r on D, C, D, B we get Line(B, C) == internal_angle_bisector(D, B, D)
By internal_angle_bisector_definition_v0_r on F, A, F, B we get Line(A, B) == internal_angle_bisector(F, B, F)
By anti_similar_triangle_basic_properties on H, E, C, A, I, C we get angle(H, E, C) == 0 - angle(A, I, C) mod 360, angle(E, C, H) == 0 - angle(I, C, A) mod 360, angle(C, H, E) == 0 - angle(C, A, I) mod 360, log(distance(A, I)) + log(distance(C, E)) == log(distance(E, H)) + log(distance(C, I)), log(distance(C, E)) + log(distance(A, C)) == log(distance(C, I)) + log(distance(C, H)), log(distance(A, C)) + log(distance(E, H)) == log(distance(C, H)) + log(distance(A, I))
By anti_similar_triangle_basic_properties on C, E, I, C, H, A we get angle(C, E, I) == 0 - angle(C, H, A) mod 360, angle(E, I, C) == 0 - angle(H, A, C) mod 360, angle(I, C, E) == 0 - angle(A, C, H) mod 360, log(distance(C, E)) + log(distance(A, H)) == log(distance(C, H)) + log(distance(E, I)), log(distance(A, H)) + log(distance(C, I)) == log(distance(E, I)) + log(distance(A, C)), log(distance(A, C)) + log(distance(C, E)) == log(distance(C, I)) + log(distance(C, H))
By anti_similar_triangle_basic_properties on H, C, E, A, C, I we get angle(H, C, E) == 0 - angle(A, C, I) mod 360, angle(C, E, H) == 0 - angle(C, I, A) mod 360, angle(E, H, C) == 0 - angle(I, A, C) mod 360, log(distance(A, C)) + log(distance(C, E)) == log(distance(C, H)) + log(distance(C, I)), log(distance(C, E)) + log(distance(A, I)) == log(distance(C, I)) + log(distance(E, H)), log(distance(A, I)) + log(distance(C, H)) == log(distance(E, H)) + log(distance(A, C))
By altitude_definition on orthocenter(A, B, C), A, F, Line(C, F) we get Line(C, F) == altitude(orthocenter(A, B, C), A, F)
By altitude_definition on orthocenter(A, B, C), B, C, i we get i == altitude(orthocenter(A, B, C), B, C)
By altitude_definition on orthocenter(A, B, C), B, A, Line(C, F) we get Line(C, F) == altitude(orthocenter(A, B, C), A, B)
By altitude_definition on orthocenter(A, B, C), E, A, j we get j == altitude(orthocenter(A, B, C), A, E)
By altitude_definition on orthocenter(A, B, C), F, B, Line(C, F) we get Line(C, F) == altitude(orthocenter(A, B, C), B, F)
By altitude_definition on orthocenter(A, B, C), E, C, j we get j == altitude(orthocenter(A, B, C), C, E)
By altitude_definition on orthocenter(A, B, C), D, C, i we get i == altitude(orthocenter(A, B, C), C, D)
By altitude_definition on orthocenter(A, B, C), C, A, j we get j == altitude(orthocenter(A, B, C), A, C)
By anti_similar_triangle_basic_properties on E, C, I, H, C, A we get angle(E, C, I) == 0 - angle(H, C, A) mod 360, angle(C, I, E) == 0 - angle(C, A, H) mod 360, angle(I, E, C) == 0 - angle(A, H, C) mod 360, log(distance(C, E)) + log(distance(A, C)) == log(distance(C, H)) + log(distance(C, I)), log(distance(A, C)) + log(distance(E, I)) == log(distance(C, I)) + log(distance(A, H)), log(distance(A, H)) + log(distance(C, E)) == log(distance(E, I)) + log(distance(C, H))
By altitude_definition on orthocenter(A, B, C), D, B, i we get i == altitude(orthocenter(A, B, C), B, D)
By line_definition on G, orthocenter(A, B, G), Line(C, F) we get Line(C, F) == Line(G, orthocenter(A, B, G))
By line_intersection_definition on orthocenter(B, C, G), i, f we get orthocenter(B, C, G) == line_intersection(f, i)
By concurrent_sufficient_conditions on i, Line(C, F), j we get concurrent(i, j, Line(C, F))
By line_intersection_definition on orthocenter(A, C, G), j, g we get orthocenter(A, C, G) == line_intersection(g, j)
By line_intersection_definition on orthocenter(A, B, G), g, Line(C, F) we get orthocenter(A, B, G) == line_intersection(g, Line(C, F))
By line_definition on orthocenter(A, B, G), F, Line(C, F) we get Line(C, F) == Line(F, orthocenter(A, B, G))
By line_definition on orthocenter(B, C, G), D, i we get i == Line(D, orthocenter(B, C, G))
By line_intersection_definition on orthocenter(A, C, G), j, f we get orthocenter(A, C, G) == line_intersection(f, j)
By line_definition on orthocenter(B, C, G), orthocenter(A, C, G), f we get f == Line(orthocenter(A, C, G), orthocenter(B, C, G))
By line_definition on orthocenter(A, B, G), A, h we get h == Line(A, orthocenter(A, B, G))
By line_intersection_definition on orthocenter(B, C, G), h, f we get orthocenter(B, C, G) == line_intersection(f, h)
By line_definition on orthocenter(A, C, G), F, f we get f == Line(F, orthocenter(A, C, G))
By line_intersection_definition on orthocenter(B, C, G), i, h we get orthocenter(B, C, G) == line_intersection(h, i)
By line_definition on orthocenter(A, B, G), orthocenter(A, C, G), g we get g == Line(orthocenter(A, B, G), orthocenter(A, C, G))
By line_definition on F, orthocenter(B, C, G), f we get f == Line(F, orthocenter(B, C, G))
By concurrent_sufficient_conditions on i, j, Line(C, F) we get concurrent(i, j, Line(C, F))
By line_definition on orthocenter(A, C, G), E, j we get j == Line(E, orthocenter(A, C, G))
By line_intersection_definition on orthocenter(A, B, G), g, h we get orthocenter(A, B, G) == line_intersection(g, h)
By line_definition on orthocenter(B, C, G), orthocenter(A, B, G), h we get h == Line(orthocenter(A, B, G), orthocenter(B, C, G))
By line_definition on D, orthocenter(A, B, G), g we get g == Line(D, orthocenter(A, B, G))
By line_definition on orthocenter(A, C, G), C, g we get g == Line(C, orthocenter(A, C, G))
By line_definition on E, orthocenter(B, C, G), h we get h == Line(E, orthocenter(B, C, G))
By concurrent_sufficient_conditions on Line(C, F), i, j we get concurrent(i, j, Line(C, F))
By concurrent_sufficient_conditions on j, Line(C, F), i we get concurrent(i, j, Line(C, F))
By line_definition on orthocenter(A, C, G), D, g we get g == Line(D, orthocenter(A, C, G))
By line_definition on A, orthocenter(A, C, G), f we get f == Line(A, orthocenter(A, C, G))
By line_definition on E, orthocenter(A, B, G), h we get h == Line(E, orthocenter(A, B, G))
By line_definition on orthocenter(B, C, G), C, h we get h == Line(C, orthocenter(B, C, G))
By line_definition on orthocenter(A, B, G), B, g we get g == Line(B, orthocenter(A, B, G))
By line_definition on orthocenter(B, C, G), B, f we get f == Line(B, orthocenter(B, C, G))
By line_intersection_definition on orthocenter(A, C, G), f, g we get orthocenter(A, C, G) == line_intersection(f, g)
By line_intersection_definition on orthocenter(A, B, G), Line(C, F), h we get orthocenter(A, B, G) == line_intersection(h, Line(C, F))
By line_definition on G, orthocenter(A, C, G), j we get j == Line(G, orthocenter(A, C, G))
By line_definition on G, orthocenter(B, C, G), i we get i == Line(G, orthocenter(B, C, G))
By concurrent_sufficient_conditions on Line(C, F), j, i we get concurrent(i, j, Line(C, F))
By concurrent_sufficient_conditions on j, i, Line(C, F) we get concurrent(i, j, Line(C, F))
By perpendicular_line_definition on orthocenter(A, C, G), g, i we get g == perpendicular_line(orthocenter(A, C, G), i)
By perpendicular_line_definition on orthocenter(A, C, G), j, h we get j == perpendicular_line(orthocenter(A, C, G), h)
By perpendicular_line_definition on orthocenter(B, C, G), f, Line(C, F) we get f == perpendicular_line(orthocenter(B, C, G), Line(C, F))
By line_unique_intersection on j, f, B, orthocenter(A, C, G) we get B == orthocenter(A, C, G)
By perpendicular_line_definition on orthocenter(A, C, G), f, Line(C, F) we get f == perpendicular_line(orthocenter(A, C, G), Line(C, F))
By perpendicular_line_definition on orthocenter(B, C, G), h, j we get h == perpendicular_line(orthocenter(B, C, G), j)
By perpendicular_line_definition on orthocenter(A, B, G), Line(C, F), f we get Line(C, F) == perpendicular_line(orthocenter(A, B, G), f)
By perpendicular_line_definition on orthocenter(A, B, G), h, j we get h == perpendicular_line(orthocenter(A, B, G), j)
By perpendicular_line_definition on orthocenter(B, C, G), i, g we get i == perpendicular_line(orthocenter(B, C, G), g)
By perpendicular_line_definition on orthocenter(A, B, G), g, i we get g == perpendicular_line(orthocenter(A, B, G), i)
By line_unique_intersection on g, Line(C, F), C, orthocenter(A, B, G) we get C == orthocenter(A, B, G)
By line_unique_intersection on h, i, A, orthocenter(B, C, G) we get A == orthocenter(B, C, G)
By projection_definition on G, F, f we get F == projection(G, f)
By same_angle_v0 on G, A, D, C we get angle(A, G, C) == angle(D, G, C) mod 360
By in_imply_collinear on orthocenter(A, B, G), C, F we get collinear(C, F, orthocenter(A, B, G))
By same_angle_v1 on F, C, G, B we get angle(C, F, B) == angle(G, F, B) mod 360
By same_angle_v2 on F, B, A, G we get angle(B, F, G) == angle(A, F, G) + 180 mod 360
By same_angle_v2 on C, E, A, G we get angle(E, C, G) == angle(A, C, G) + 180 mod 360
By same_angle_v0 on G, D, A, F we get angle(A, G, F) == angle(D, G, F) mod 360
By same_angle_v0 on F, G, C, A we get angle(C, F, A) == angle(G, F, A) mod 360
By same_angle_v3 on C, F, G, I we get angle(F, C, I) == angle(G, C, I) + 180 mod 360
By same_angle_v3 on C, F, G, B we get angle(F, C, B) == angle(G, C, B) + 180 mod 360
By same_angle_v1 on G, B, E, C we get angle(B, G, C) == angle(E, G, C) mod 360
By perpendicular_direction_conditions_v0_r on C, G, B, F we get 180 == 2 * direction(C, G) - 2 * direction(B, F) mod 360
By same_angle_v2 on C, F, G, E we get angle(F, C, E) == angle(G, C, E) + 180 mod 360
By perpendicular_direction_conditions_v0_r on G, C, A, B we get 180 == 2 * direction(G, C) - 2 * direction(A, B) mod 360
By same_angle_v3 on C, G, F, A we get angle(G, C, A) == angle(F, C, A) + 180 mod 360
By same_angle_v2 on C, I, H, G we get angle(I, C, G) == angle(H, C, G) + 180 mod 360
By perpendicular_direction_conditions_v0_r on B, F, F, G we get 180 == 2 * direction(B, F) - 2 * direction(F, G) mod 360
By same_angle_v3 on C, G, F, D we get angle(G, C, D) == angle(F, C, D) + 180 mod 360
By perpendicular_direction_conditions_v0_r on A, F, G, F we get 180 == 2 * direction(A, F) - 2 * direction(G, F) mod 360
By same_angle_v3 on C, G, F, H we get angle(G, C, H) == angle(F, C, H) + 180 mod 360
By perpendicular_direction_conditions_v0_r on G, F, A, B we get 180 == 2 * direction(G, F) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on C, G, F, A we get 180 == 2 * direction(C, G) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on B, A, G, F we get 180 == 2 * direction(B, A) - 2 * direction(G, F) mod 360
By same_angle_v2 on C, B, D, G we get angle(B, C, G) == angle(D, C, G) + 180 mod 360
By perpendicular_direction_conditions_v0_r on F, G, A, B we get 180 == 2 * direction(F, G) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on F, G, F, A we get 180 == 2 * direction(F, G) - 2 * direction(F, A) mod 360
By same_angle_v1 on G, B, E, F we get angle(B, G, F) == angle(E, G, F) mod 360
By perpendicular_direction_conditions_v0_r on G, C, F, B we get 180 == 2 * direction(G, C) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on F, A, C, G we get 180 == 2 * direction(F, A) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on F, A, G, C we get 180 == 2 * direction(F, A) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on G, C, A, F we get 180 == 2 * direction(G, C) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on F, B, C, G we get 180 == 2 * direction(F, B) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on B, F, G, F we get 180 == 2 * direction(B, F) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on C, G, A, B we get 180 == 2 * direction(C, G) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on F, B, G, F we get 180 == 2 * direction(F, B) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on A, B, C, G we get 180 == 2 * direction(A, B) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on A, B, F, G we get 180 == 2 * direction(A, B) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on A, F, F, G we get 180 == 2 * direction(A, F) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on B, A, F, G we get 180 == 2 * direction(B, A) - 2 * direction(F, G) mod 360
By in_imply_collinear on orthocenter(B, C, G), A, G we get collinear(A, G, orthocenter(B, C, G))
By perpendicular_direction_conditions_v0_r on B, F, C, G we get 180 == 2 * direction(B, F) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on F, A, G, F we get 180 == 2 * direction(F, A) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on G, F, B, A we get 180 == 2 * direction(G, F) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on B, A, C, G we get 180 == 2 * direction(B, A) - 2 * direction(C, G) mod 360
By in_imply_collinear on orthocenter(A, C, G), G, E we get collinear(E, G, orthocenter(A, C, G))
By perpendicular_direction_conditions_v0_r on G, F, B, F we get 180 == 2 * direction(G, F) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on A, F, G, C we get 180 == 2 * direction(A, F) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on F, A, F, G we get 180 == 2 * direction(F, A) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on A, B, G, C we get 180 == 2 * direction(A, B) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on A, F, C, G we get 180 == 2 * direction(A, F) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on F, G, B, F we get 180 == 2 * direction(F, G) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on F, G, A, F we get 180 == 2 * direction(F, G) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on F, G, B, A we get 180 == 2 * direction(F, G) - 2 * direction(B, A) mod 360
By concyclic_definition_0 on D, E, H, B we get B in Circle(D, E, H)
By perpendicular_direction_conditions_v0_r on G, C, B, F we get 180 == 2 * direction(G, C) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on B, F, G, C we get 180 == 2 * direction(B, F) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on G, C, B, A we get 180 == 2 * direction(G, C) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on C, G, B, A we get 180 == 2 * direction(C, G) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on B, A, G, C we get 180 == 2 * direction(B, A) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on C, G, A, F we get 180 == 2 * direction(C, G) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on F, G, F, B we get 180 == 2 * direction(F, G) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on G, C, F, A we get 180 == 2 * direction(G, C) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on G, F, F, A we get 180 == 2 * direction(G, F) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on A, B, G, F we get 180 == 2 * direction(A, B) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on F, B, G, C we get 180 == 2 * direction(F, B) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on G, F, F, B we get 180 == 2 * direction(G, F) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on C, G, F, B we get 180 == 2 * direction(C, G) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on G, F, A, F we get 180 == 2 * direction(G, F) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on F, B, F, G we get 180 == 2 * direction(F, B) - 2 * direction(F, G) mod 360
By in_imply_collinear on orthocenter(B, C, G), D, G we get collinear(D, G, orthocenter(B, C, G))
By in_imply_collinear on orthocenter(A, B, G), C, B we get collinear(B, C, orthocenter(A, B, G))
By in_imply_collinear on orthocenter(A, C, G), D, C we get collinear(C, D, orthocenter(A, C, G))
By in_imply_collinear on orthocenter(A, B, G), G, C we get collinear(C, G, orthocenter(A, B, G))
By probably_between_and_collinear_implies_between on F, C, G we get between(F, C, G)
By in_imply_collinear on orthocenter(A, C, G), B, C we get collinear(B, C, orthocenter(A, C, G))
By in_imply_collinear on orthocenter(A, C, G), D, B we get collinear(B, D, orthocenter(A, C, G))
By in_imply_collinear on orthocenter(A, B, G), D, C we get collinear(C, D, orthocenter(A, B, G))
By in_imply_collinear on orthocenter(A, C, G), F, B we get collinear(B, F, orthocenter(A, C, G))
By in_imply_collinear on orthocenter(B, C, G), D, A we get collinear(A, D, orthocenter(B, C, G))
By in_imply_collinear on orthocenter(B, C, G), A, C we get collinear(A, C, orthocenter(B, C, G))
By in_imply_collinear on orthocenter(A, C, G), F, A we get collinear(A, F, orthocenter(A, C, G))
By in_imply_collinear on orthocenter(A, B, G), G, F we get collinear(F, G, orthocenter(A, B, G))
By in_imply_collinear on orthocenter(A, B, G), A, C we get collinear(A, C, orthocenter(A, B, G))
By in_imply_collinear on orthocenter(B, C, G), B, A we get collinear(A, B, orthocenter(B, C, G))
By in_imply_collinear on orthocenter(B, C, G), A, E we get collinear(A, E, orthocenter(B, C, G))
By in_imply_collinear on orthocenter(B, C, G), F, B we get collinear(B, F, orthocenter(B, C, G))
By in_imply_collinear on orthocenter(A, C, G), B, A we get collinear(A, B, orthocenter(A, C, G))
By in_imply_collinear on orthocenter(A, B, G), E, C we get collinear(C, E, orthocenter(A, B, G))
By in_imply_collinear on orthocenter(A, B, G), E, A we get collinear(A, E, orthocenter(A, B, G))
By in_imply_collinear on orthocenter(B, C, G), E, C we get collinear(C, E, orthocenter(B, C, G))
By concyclic_definition_0 on E, A, D, B we get B in Circle(A, D, E)
By in_imply_collinear on orthocenter(B, C, G), A, F we get collinear(A, F, orthocenter(B, C, G))
By in_imply_collinear on orthocenter(A, C, G), E, B we get collinear(B, E, orthocenter(A, C, G))
By in_imply_collinear on orthocenter(A, B, G), B, D we get collinear(B, D, orthocenter(A, B, G))
By in_imply_collinear on orthocenter(A, C, G), G, B we get collinear(B, G, orthocenter(A, C, G))
By concyclic_definition_0 on E, D, I, B we get B in Circle(D, E, I)
By same_angle_v0 on G, F, C, E we get angle(C, G, E) == angle(F, G, E) mod 360
By same_angle_v1 on G, C, F, D we get angle(C, G, D) == angle(F, G, D) mod 360
By same_angle_v0 on G, C, F, B we get angle(C, G, B) == angle(F, G, B) mod 360
By same_angle_v1 on G, C, F, A we get angle(C, G, A) == angle(F, G, A) mod 360
By internal_angle_bisector_definition_v0 on B, G, A, F we get angle(B, F, G) == angle(G, F, A) mod 360
By concyclic_definition_0 on B, E, C, F we get F in Circle(B, C, E)
By concyclic_definition_1 on B, E, I, D we get Circle(B, E, I) == Circle(D, E, I)
By concyclic_definition_0 on C, E, F, B we get B in Circle(C, E, F)
By concyclic_definition_0 on C, D, G, E we get E in Circle(C, D, G)
By concyclic_definition_1 on B, E, A, D we get Circle(A, B, E) == Circle(A, D, E)
By concyclic_definition_0 on B, D, E, I we get I in Circle(B, D, E)
By concyclic_definition_0 on B, H, D, E we get E in Circle(B, D, H)
By concyclic_definition_0 on E, G, C, D we get D in Circle(C, E, G)
By concyclic_definition_0 on C, D, F, A we get A in Circle(C, D, F)
By concyclic_definition_0 on G, E, D, C we get C in Circle(D, E, G)
By concyclic_definition_1 on A, E, D, B we get Circle(A, D, E) == Circle(B, D, E)
By external_angle_bisector_definition_v0 on A, G, A, F we get 180 == angle(A, F, G) + angle(A, F, G) mod 360
By concyclic_definition_0 on C, F, A, D we get D in Circle(A, C, F)
By concyclic_definition_0 on E, D, B, H we get H in Circle(B, D, E)
By concyclic_definition_0 on E, F, B, C we get C in Circle(B, E, F)
By concyclic_definition_0 on A, D, B, E we get E in Circle(A, B, D)
By concyclic_definition_0 on F, A, D, C we get C in Circle(A, D, F)
By concyclic_definition_0 on D, B, I, E we get E in Circle(B, D, I)
By concyclic_definition_0 on C, D, E, G we get G in Circle(C, D, E)
By concyclic_definition_0 on B, I, E, D we get D in Circle(B, E, I)
By perpendicular_angle_conditions_v0 on B, F, G we get angle(B, F, G) == orientation(B, F, G) mod 360
By concyclic_definition_1 on B, D, I, E we get Circle(B, D, I) == Circle(D, E, I)
By concyclic_definition_0 on C, B, F, E we get E in Circle(B, C, F)
By concyclic_definition_0 on C, A, D, F we get F in Circle(A, C, D)
By concyclic_definition_0 on A, E, B, D we get D in Circle(A, B, E)
By concyclic_definition_1 on E, D, H, B we get Circle(B, D, H) == Circle(D, E, H)
By concyclic_definition_1 on B, A, D, E we get Circle(A, B, D) == Circle(A, D, E)
By concyclic_definition_1 on D, E, H, B we get Circle(B, E, H) == Circle(D, E, H)
By concyclic_definition_0 on B, H, E, D we get D in Circle(B, E, H)
By concyclic_definition_1 on H, D, E, B we get Circle(B, D, E) == Circle(D, E, H)
By perpendicular_angle_conditions_v0 on A, F, G we get angle(A, F, G) == orientation(A, F, G) mod 360
By collinear_definition on F, C, G we get C in Line(F, G), G in Line(C, F), Line(C, F) == Line(F, G), 0 == 2 * angle(C, F, G) mod 360
By perpendicular_angle_conditions_v0 on G, F, A we get angle(G, F, A) == orientation(A, G, F) mod 360
By concyclic_definition_0 on B, D, E, A we get A in Circle(B, D, E)
By external_angle_bisector_definition_v0 on B, G, B, F we get 180 == angle(B, F, G) + angle(B, F, G) mod 360
By concyclic_definition_1 on I, D, E, B we get Circle(B, D, E) == Circle(D, E, I)
By collinear_definition on C, F, G we get F in Line(C, G), G in Line(C, F), Line(C, F) == Line(C, G), 0 == 2 * angle(F, C, G) mod 360
By collinear_definition on F, G, C we get G in Line(C, F), C in Line(F, G), Line(C, F) == Line(F, G), 0 == 2 * angle(G, F, C) mod 360
By internal_angle_bisector_definition_v0 on A, G, B, F we get angle(A, F, G) == angle(G, F, B) mod 360
By perpendicular_angle_conditions_v0 on G, F, B we get angle(G, F, B) == orientation(B, G, F) mod 360
By collinear_definition on C, G, F we get G in Line(C, F), F in Line(C, G), Line(C, F) == Line(C, G), 0 == 2 * angle(G, C, F) mod 360
By altitude_definition on orthocenter(B, C, G), B, G, h we get h == altitude(orthocenter(B, C, G), B, G)
By altitude_definition on orthocenter(A, C, G), G, C, f we get f == altitude(orthocenter(A, C, G), C, G)
By altitude_definition on orthocenter(A, C, G), E, A, j we get j == altitude(orthocenter(A, C, G), A, E)
By concyclic_definition_1 on D, B, H, E we get Circle(B, D, H) == Circle(B, E, H)
By concyclic_definition_1 on H, B, D, E we get Circle(B, D, E) == Circle(B, D, H)
By concyclic_definition_1 on F, D, A, C we get Circle(A, C, D) == Circle(A, D, F)
By altitude_definition on orthocenter(A, C, G), G, F, f we get f == altitude(orthocenter(A, C, G), F, G)
By altitude_definition on orthocenter(A, C, G), D, G, g we get g == altitude(orthocenter(A, C, G), D, G)
By concyclic_definition_1 on A, C, D, F we get Circle(A, C, D) == Circle(C, D, F)
By concyclic_definition_1 on C, A, F, D we get Circle(A, C, F) == Circle(A, D, F)
By concyclic_definition_1 on E, D, B, A we get Circle(A, B, D) == Circle(B, D, E)
By altitude_definition on orthocenter(A, B, G), B, E, h we get h == altitude(orthocenter(A, B, G), B, E)
By altitude_definition on orthocenter(B, C, G), E, B, h we get h == altitude(orthocenter(B, C, G), B, E)
By concyclic_definition_1 on F, A, C, D we get Circle(A, C, D) == Circle(A, C, F)
By concyclic_definition_1 on D, B, E, I we get Circle(B, D, E) == Circle(B, E, I)
By concyclic_definition_1 on E, C, B, F we get Circle(B, C, E) == Circle(B, C, F)
By altitude_definition on orthocenter(A, B, G), A, B, Line(C, F) we get Line(C, F) == altitude(orthocenter(A, B, G), A, B)
By altitude_definition on orthocenter(B, C, G), C, G, f we get f == altitude(orthocenter(B, C, G), C, G)
By altitude_definition on orthocenter(A, C, G), D, A, g we get g == altitude(orthocenter(A, C, G), A, D)
By concyclic_definition_1 on B, F, C, E we get Circle(B, C, F) == Circle(C, E, F)
By concyclic_definition_1 on E, G, C, D we get Circle(C, D, G) == Circle(C, E, G)
By collinear_definition on G, F, C we get F in Line(C, G), C in Line(F, G), Line(C, G) == Line(F, G), 0 == 2 * angle(F, G, C) mod 360
By altitude_definition on orthocenter(A, B, G), G, A, g we get g == altitude(orthocenter(A, B, G), A, G)
By altitude_definition on orthocenter(A, B, G), B, G, h we get h == altitude(orthocenter(A, B, G), B, G)
By concyclic_definition_1 on B, F, E, C we get Circle(B, E, F) == Circle(C, E, F)
By altitude_definition on B, F, G, f we get f == altitude(B, F, G)
By concyclic_definition_1 on C, D, E, G we get Circle(C, D, E) == Circle(D, E, G)
By altitude_definition on orthocenter(A, C, G), E, C, j we get j == altitude(orthocenter(A, C, G), C, E)
By concyclic_definition_1 on I, B, D, E we get Circle(B, D, E) == Circle(B, D, I)
By altitude_definition on orthocenter(A, B, G), G, D, g we get g == altitude(orthocenter(A, B, G), D, G)
By altitude_definition on orthocenter(B, C, G), E, G, h we get h == altitude(orthocenter(B, C, G), E, G)
By concyclic_definition_1 on A, B, E, D we get Circle(A, B, E) == Circle(B, D, E)
By concyclic_definition_1 on C, G, E, D we get Circle(C, E, G) == Circle(D, E, G)
By altitude_definition on orthocenter(A, B, G), F, A, Line(C, F) we get Line(C, F) == altitude(orthocenter(A, B, G), A, F)
By altitude_definition on orthocenter(A, B, G), G, E, h we get h == altitude(orthocenter(A, B, G), E, G)
By concyclic_definition_1 on F, E, C, B we get Circle(B, C, E) == Circle(C, E, F)
By altitude_definition on orthocenter(A, C, G), C, A, j we get j == altitude(orthocenter(A, C, G), A, C)
By concyclic_definition_1 on E, F, B, C we get Circle(B, C, F) == Circle(B, E, F)
By concyclic_definition_1 on D, B, I, E we get Circle(B, D, I) == Circle(B, E, I)
By concyclic_definition_1 on E, C, D, G we get Circle(C, D, E) == Circle(C, D, G)
By concyclic_definition_1 on A, C, F, D we get Circle(A, C, F) == Circle(C, D, F)
By altitude_definition on orthocenter(A, C, G), A, G, g we get g == altitude(orthocenter(A, C, G), A, G)
By concyclic_definition_1 on C, B, E, F we get Circle(B, C, E) == Circle(B, E, F)
By concyclic_definition_1 on D, A, B, E we get Circle(A, B, D) == Circle(A, B, E)
By concyclic_definition_1 on C, G, D, E we get Circle(C, D, G) == Circle(D, E, G)
By altitude_definition on orthocenter(B, C, G), B, C, i we get i == altitude(orthocenter(B, C, G), B, C)
By concyclic_definition_1 on D, C, E, G we get Circle(C, D, E) == Circle(C, E, G)
By altitude_definition on orthocenter(B, C, G), F, G, f we get f == altitude(orthocenter(B, C, G), F, G)
By concyclic_definition_1 on C, D, F, A we get Circle(A, D, F) == Circle(C, D, F)
By altitude_definition on orthocenter(B, C, G), D, B, i we get i == altitude(orthocenter(B, C, G), B, D)
By altitude_definition on orthocenter(B, C, G), F, C, f we get f == altitude(orthocenter(B, C, G), C, F)
By concyclic_definition_1 on D, B, E, H we get Circle(B, D, E) == Circle(B, E, H)
By altitude_definition on A, F, G, f we get f == altitude(A, F, G)
By altitude_definition on orthocenter(A, C, G), C, F, f we get f == altitude(orthocenter(A, C, G), C, F)
By altitude_definition on orthocenter(A, B, G), F, B, Line(C, F) we get Line(C, F) == altitude(orthocenter(A, B, G), B, F)
By altitude_definition on orthocenter(A, B, G), D, A, g we get g == altitude(orthocenter(A, B, G), A, D)
By altitude_definition on orthocenter(B, C, G), D, C, i we get i == altitude(orthocenter(B, C, G), C, D)
By collinear_definition on G, C, F we get C in Line(F, G), F in Line(C, G), Line(C, G) == Line(F, G), 0 == 2 * angle(C, G, F) mod 360
By anti_similar_triangle_basic_properties on B, D, G, B, E, C we get angle(B, D, G) == 0 - angle(B, E, C) mod 360, angle(D, G, B) == 0 - angle(E, C, B) mod 360, angle(G, B, D) == 0 - angle(C, B, E) mod 360, log(distance(B, D)) + log(distance(C, E)) == log(distance(B, E)) + log(distance(D, G)), log(distance(C, E)) + log(distance(B, G)) == log(distance(D, G)) + log(distance(B, C)), log(distance(B, C)) + log(distance(B, D)) == log(distance(B, G)) + log(distance(B, E))
By anti_similar_triangle_basic_properties on C, D, A, C, E, B we get angle(C, D, A) == 0 - angle(C, E, B) mod 360, angle(D, A, C) == 0 - angle(E, B, C) mod 360, angle(A, C, D) == 0 - angle(B, C, E) mod 360, log(distance(C, D)) + log(distance(B, E)) == log(distance(C, E)) + log(distance(A, D)), log(distance(A, D)) + log(distance(B, C)) == log(distance(B, E)) + log(distance(A, C)), log(distance(A, C)) + log(distance(C, E)) == log(distance(B, C)) + log(distance(C, D))
By anti_similar_triangle_basic_properties on G, B, D, G, A, E we get angle(G, B, D) == 0 - angle(G, A, E) mod 360, angle(B, D, G) == 0 - angle(A, E, G) mod 360, angle(D, G, B) == 0 - angle(E, G, A) mod 360, log(distance(A, G)) + log(distance(B, D)) == log(distance(B, G)) + log(distance(A, E)), log(distance(A, E)) + log(distance(D, G)) == log(distance(B, D)) + log(distance(E, G)), log(distance(D, G)) + log(distance(A, G)) == log(distance(E, G)) + log(distance(B, G))
By anti_similar_triangle_basic_properties on E, C, B, D, C, A we get angle(E, C, B) == 0 - angle(D, C, A) mod 360, angle(C, B, E) == 0 - angle(C, A, D) mod 360, angle(B, E, C) == 0 - angle(A, D, C) mod 360, log(distance(C, D)) + log(distance(B, C)) == log(distance(C, E)) + log(distance(A, C)), log(distance(A, C)) + log(distance(B, E)) == log(distance(B, C)) + log(distance(A, D)), log(distance(A, D)) + log(distance(C, E)) == log(distance(B, E)) + log(distance(C, D))
By anti_similar_triangle_basic_properties on B, G, D, B, C, E we get angle(B, G, D) == 0 - angle(B, C, E) mod 360, angle(G, D, B) == 0 - angle(C, E, B) mod 360, angle(D, B, G) == 0 - angle(E, B, C) mod 360, log(distance(B, C)) + log(distance(D, G)) == log(distance(B, G)) + log(distance(C, E)), log(distance(C, E)) + log(distance(B, D)) == log(distance(D, G)) + log(distance(B, E)), log(distance(B, D)) + log(distance(B, C)) == log(distance(B, E)) + log(distance(B, G))
By similar_triangle_basic_properties on E, A, G, E, B, C we get angle(E, A, G) == angle(E, B, C) mod 360, angle(A, G, E) == angle(B, C, E) mod 360, angle(C, E, B) == angle(G, E, A) mod 360, log(distance(A, E)) + log(distance(B, C)) == log(distance(B, E)) + log(distance(A, G)), log(distance(A, G)) + log(distance(C, E)) == log(distance(B, C)) + log(distance(E, G)), log(distance(C, E)) + log(distance(A, E)) == log(distance(E, G)) + log(distance(B, E))
By similar_triangle_basic_properties on D, B, G, D, A, C we get angle(D, A, C) == angle(D, B, G) mod 360, angle(A, C, D) == angle(B, G, D) mod 360, angle(C, D, A) == angle(G, D, B) mod 360, log(distance(A, D)) + log(distance(B, G)) == log(distance(B, D)) + log(distance(A, C)), log(distance(A, C)) + log(distance(D, G)) == log(distance(B, G)) + log(distance(C, D)), log(distance(C, D)) + log(distance(B, D)) == log(distance(D, G)) + log(distance(A, D))
By anti_similar_triangle_basic_properties on E, A, G, D, A, C we get angle(E, A, G) == 0 - angle(D, A, C) mod 360, angle(A, G, E) == 0 - angle(A, C, D) mod 360, angle(G, E, A) == 0 - angle(C, D, A) mod 360, log(distance(A, D)) + log(distance(A, G)) == log(distance(A, E)) + log(distance(A, C)), log(distance(A, C)) + log(distance(E, G)) == log(distance(A, G)) + log(distance(C, D)), log(distance(C, D)) + log(distance(A, E)) == log(distance(E, G)) + log(distance(A, D))
By similar_triangle_basic_properties on E, G, A, E, C, B we get angle(E, C, B) == angle(E, G, A) mod 360, angle(C, B, E) == angle(G, A, E) mod 360, angle(A, E, G) == angle(B, E, C) mod 360, log(distance(C, E)) + log(distance(A, G)) == log(distance(E, G)) + log(distance(B, C)), log(distance(A, G)) + log(distance(B, E)) == log(distance(B, C)) + log(distance(A, E)), log(distance(A, E)) + log(distance(C, E)) == log(distance(B, E)) + log(distance(E, G))
By anti_similar_triangle_basic_properties on G, A, E, C, A, D we get angle(G, A, E) == 0 - angle(C, A, D) mod 360, angle(A, E, G) == 0 - angle(A, D, C) mod 360, angle(E, G, A) == 0 - angle(D, C, A) mod 360, log(distance(A, C)) + log(distance(A, E)) == log(distance(A, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(E, G)) == log(distance(A, E)) + log(distance(C, D)), log(distance(C, D)) + log(distance(A, G)) == log(distance(E, G)) + log(distance(A, C))
By anti_similar_triangle_basic_properties on D, B, G, E, A, G we get angle(D, B, G) == 0 - angle(E, A, G) mod 360, angle(B, G, D) == 0 - angle(A, G, E) mod 360, angle(G, D, B) == 0 - angle(G, E, A) mod 360, log(distance(A, E)) + log(distance(B, G)) == log(distance(B, D)) + log(distance(A, G)), log(distance(A, G)) + log(distance(D, G)) == log(distance(B, G)) + log(distance(E, G)), log(distance(D, G)) + log(distance(A, E)) == log(distance(E, G)) + log(distance(B, D))
By similar_triangle_basic_properties on G, B, D, C, A, D we get angle(C, A, D) == angle(G, B, D) mod 360, angle(A, D, C) == angle(B, D, G) mod 360, angle(D, C, A) == angle(D, G, B) mod 360, log(distance(A, C)) + log(distance(B, D)) == log(distance(B, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(D, G)) == log(distance(B, D)) + log(distance(C, D)), log(distance(C, D)) + log(distance(B, G)) == log(distance(D, G)) + log(distance(A, C))
By anti_similar_triangle_basic_properties on A, C, F, A, B, E we get angle(A, C, F) == 0 - angle(A, B, E) mod 360, angle(C, F, A) == 0 - angle(B, E, A) mod 360, angle(F, A, C) == 0 - angle(E, A, B) mod 360, log(distance(A, B)) + log(distance(C, F)) == log(distance(A, C)) + log(distance(B, E)), log(distance(B, E)) + log(distance(A, F)) == log(distance(C, F)) + log(distance(A, E)), log(distance(A, E)) + log(distance(A, C)) == log(distance(A, F)) + log(distance(A, B))
By anti_similar_triangle_basic_properties on A, E, B, A, F, C we get angle(A, E, B) == 0 - angle(A, F, C) mod 360, angle(E, B, A) == 0 - angle(F, C, A) mod 360, angle(B, A, E) == 0 - angle(C, A, F) mod 360, log(distance(A, E)) + log(distance(C, F)) == log(distance(A, F)) + log(distance(B, E)), log(distance(B, E)) + log(distance(A, C)) == log(distance(C, F)) + log(distance(A, B)), log(distance(A, B)) + log(distance(A, F)) == log(distance(A, C)) + log(distance(A, E))
By anti_similar_triangle_basic_properties on C, F, B, A, D, B we get angle(C, F, B) == 0 - angle(A, D, B) mod 360, angle(F, B, C) == 0 - angle(D, B, A) mod 360, angle(B, C, F) == 0 - angle(B, A, D) mod 360, log(distance(A, D)) + log(distance(B, F)) == log(distance(C, F)) + log(distance(B, D)), log(distance(B, D)) + log(distance(B, C)) == log(distance(B, F)) + log(distance(A, B)), log(distance(A, B)) + log(distance(C, F)) == log(distance(B, C)) + log(distance(A, D))
By anti_similar_triangle_basic_properties on B, D, A, B, F, C we get angle(B, D, A) == 0 - angle(B, F, C) mod 360, angle(D, A, B) == 0 - angle(F, C, B) mod 360, angle(A, B, D) == 0 - angle(C, B, F) mod 360, log(distance(B, D)) + log(distance(C, F)) == log(distance(B, F)) + log(distance(A, D)), log(distance(A, D)) + log(distance(B, C)) == log(distance(C, F)) + log(distance(A, B)), log(distance(A, B)) + log(distance(B, F)) == log(distance(B, C)) + log(distance(B, D))
By concyclic_sufficient_conditions_v0 on B, F, G, D we get concyclic(B, D, F, G)
By concyclic_sufficient_conditions_v0 on A, E, G, F we get concyclic(A, E, F, G)
By angles_on_chord_v1 on G, E, C, D, Circle(C, D, E) we get angle(G, C, E) == angle(G, D, E) mod 360
By angles_on_chord_v3 on D, B, A, E, c we get angle(D, A, B) == angle(D, E, B) + 180 mod 360
By angles_on_chord_v0 on E, G, C, D, Circle(C, D, E) we get angle(E, C, G) == angle(E, D, G) mod 360
By angles_on_chord_v0 on E, A, H, B, c we get angle(E, B, A) == angle(E, H, A) mod 360
By angles_on_chord_v2 on A, E, I, B, c we get angle(A, I, E) == angle(A, B, E) + 180 mod 360
By angles_on_chord_v0 on D, A, E, B, c we get angle(D, B, A) == angle(D, E, A) mod 360
By angles_on_chord_v0 on D, A, B, H, c we get angle(D, B, A) == angle(D, H, A) mod 360
By angles_on_chord_v0 on H, B, A, E, c we get angle(H, A, B) == angle(H, E, B) mod 360
By angles_on_chord_v1 on A, D, B, E, c we get angle(A, B, D) == angle(A, E, D) mod 360
By angles_on_chord_v2 on E, A, B, D, c we get angle(E, B, A) == angle(E, D, A) + 180 mod 360
By angles_on_chord_v3 on E, A, D, B, c we get angle(E, D, A) == angle(E, B, A) + 180 mod 360
By angles_on_chord_v1 on E, C, D, G, Circle(C, D, E) we get angle(E, D, C) == angle(E, G, C) mod 360
By angles_on_chord_v0 on B, E, D, A, c we get angle(B, A, E) == angle(B, D, E) mod 360
By angles_on_chord_v3 on B, D, E, A, c we get angle(B, E, D) == angle(B, A, D) + 180 mod 360
By angles_on_chord_v1 on I, B, D, A, c we get angle(I, A, B) == angle(I, D, B) mod 360
By angles_on_chord_v2 on B, I, A, E, c we get angle(B, A, I) == angle(B, E, I) + 180 mod 360
By angles_on_chord_v0 on D, C, G, E, Circle(C, D, E) we get angle(D, E, C) == angle(D, G, C) mod 360
By angles_on_chord_v1 on A, D, B, I, c we get angle(A, B, D) == angle(A, I, D) mod 360
By angles_on_chord_v0 on C, E, G, D, Circle(C, D, E) we get angle(C, D, E) == angle(C, G, E) mod 360
By angles_on_chord_v1 on D, G, C, E, Circle(C, D, E) we get angle(D, C, G) == angle(D, E, G) mod 360
By angles_on_chord_v1 on E, B, D, A, c we get angle(E, A, B) == angle(E, D, B) mod 360
By angles_on_chord_v0 on D, A, B, I, c we get angle(D, B, A) == angle(D, I, A) mod 360
By angles_on_chord_v1 on A, D, H, B, c we get angle(A, B, D) == angle(A, H, D) mod 360
By angles_on_chord_v0 on B, I, D, A, c we get angle(B, A, I) == angle(B, D, I) mod 360
By angles_on_chord_v0 on G, D, E, C, Circle(C, D, E) we get angle(G, C, D) == angle(G, E, D) mod 360
By angles_on_chord_v2 on E, A, B, I, c we get angle(E, B, A) == angle(E, I, A) + 180 mod 360
By angles_on_chord_v1 on B, H, E, A, c we get angle(B, A, H) == angle(B, E, H) mod 360
By angles_on_chord_v3 on E, A, I, B, c we get angle(E, I, A) == angle(E, B, A) + 180 mod 360
By angles_on_chord_v3 on A, E, B, I, c we get angle(A, B, E) == angle(A, I, E) + 180 mod 360
By angles_on_chord_v2 on A, E, D, B, c we get angle(A, D, E) == angle(A, B, E) + 180 mod 360
By angles_on_chord_v3 on I, B, A, E, c we get angle(I, A, B) == angle(I, E, B) + 180 mod 360
By angles_on_chord_v0 on H, B, A, D, c we get angle(H, A, B) == angle(H, D, B) mod 360
By angles_on_chord_v1 on C, D, G, E, Circle(C, D, E) we get angle(C, E, D) == angle(C, G, D) mod 360
By angles_on_chord_v1 on A, E, B, H, c we get angle(A, B, E) == angle(A, H, E) mod 360
By angles_on_chord_v3 on B, I, E, A, c we get angle(B, E, I) == angle(B, A, I) + 180 mod 360
By angles_on_chord_v1 on B, H, D, A, c we get angle(B, A, H) == angle(B, D, H) mod 360
By angles_on_chord_v3 on A, E, B, D, c we get angle(A, B, E) == angle(A, D, E) + 180 mod 360
By angles_on_chord_v2 on D, B, E, A, c we get angle(D, E, B) == angle(D, A, B) + 180 mod 360
By radical_axis_of_intersecting_circles_v0 on E, D, c, Circle(C, D, E) we get Line(D, E) == radical_axis(c, Circle(C, D, E))
By angles_on_chord_v2 on B, D, A, E, c we get angle(B, A, D) == angle(B, E, D) + 180 mod 360
By angles_on_chord_v2 on I, B, E, A, c we get angle(I, E, B) == angle(I, A, B) + 180 mod 360
By radical_axis_of_intersecting_circles_v0 on C, D, Circle(C, D, E), Circle(A, C, D) we get Line(C, D) == radical_axis(Circle(A, C, D), Circle(C, D, E))
By radical_axis_of_intersecting_circles_v0 on C, F, Circle(A, C, D), Circle(B, C, E) we get Line(C, F) == radical_axis(Circle(A, C, D), Circle(B, C, E))
By circle_definition on A, B, I, c we get c == Circle(A, B, I)
By circle_definition on A, B, H, c we get c == Circle(A, B, H)
By circle_definition on I, H, B, c we get c == Circle(B, H, I)
By radical_axis_of_intersecting_circles_v0 on A, D, c, Circle(A, C, D) we get Line(A, D) == radical_axis(c, Circle(A, C, D))
By radical_axis_of_intersecting_circles_v0 on E, C, Circle(B, C, E), Circle(C, D, E) we get Line(C, E) == radical_axis(Circle(B, C, E), Circle(C, D, E))
By radical_axis_of_intersecting_circles_v0 on B, E, c, Circle(B, C, E) we get Line(B, E) == radical_axis(c, Circle(B, C, E))
By angles_on_chord_v1 on I, E, B, D, c we get angle(I, B, E) == angle(I, D, E) mod 360
By angles_on_chord_v0 on E, I, H, B, c we get angle(E, B, I) == angle(E, H, I) mod 360
By angles_on_chord_v0 on D, H, B, E, c we get angle(D, B, H) == angle(D, E, H) mod 360
By angles_on_chord_v0 on I, A, B, E, c we get angle(I, B, A) == angle(I, E, A) mod 360
By angles_on_chord_v0 on B, E, I, D, c we get angle(B, D, E) == angle(B, I, E) mod 360
By angles_on_chord_v1 on D, I, B, H, c we get angle(D, B, I) == angle(D, H, I) mod 360
By angles_on_chord_v1 on E, B, C, F, Circle(B, C, E) we get angle(E, C, B) == angle(E, F, B) mod 360
By angles_on_chord_v0 on B, D, H, A, c we get angle(B, A, D) == angle(B, H, D) mod 360
By angles_on_chord_v0 on A, H, B, D, c we get angle(A, B, H) == angle(A, D, H) mod 360
By angles_on_chord_v2 on A, B, E, H, c we get angle(A, E, B) == angle(A, H, B) + 180 mod 360
By angles_on_chord_v0 on I, A, H, B, c we get angle(I, B, A) == angle(I, H, A) mod 360
By angles_on_chord_v2 on B, I, H, E, c we get angle(B, H, I) == angle(B, E, I) + 180 mod 360
By angles_on_chord_v0 on B, I, D, H, c we get angle(B, D, I) == angle(B, H, I) mod 360
By angles_on_chord_v1 on H, A, E, B, c we get angle(H, B, A) == angle(H, E, A) mod 360
By angles_on_chord_v0 on A, H, B, E, c we get angle(A, B, H) == angle(A, E, H) mod 360
By angles_on_chord_v0 on H, B, I, E, c we get angle(H, E, B) == angle(H, I, B) mod 360
By angles_on_chord_v1 on D, B, H, A, c we get angle(D, A, B) == angle(D, H, B) mod 360
By angles_on_chord_v1 on B, D, E, I, c we get angle(B, E, D) == angle(B, I, D) mod 360
By angles_on_chord_v0 on F, C, D, A, Circle(A, C, D) we get angle(F, A, C) == angle(F, D, C) mod 360
By angles_on_chord_v2 on B, A, H, E, c we get angle(B, H, A) == angle(B, E, A) + 180 mod 360
By angles_on_chord_v1 on E, B, D, I, c we get angle(E, D, B) == angle(E, I, B) mod 360
By angles_on_chord_v1 on I, B, H, A, c we get angle(I, A, B) == angle(I, H, B) mod 360
By angles_on_chord_v0 on B, I, A, H, c we get angle(B, A, I) == angle(B, H, I) mod 360
By angles_on_chord_v0 on D, B, I, E, c we get angle(D, E, B) == angle(D, I, B) mod 360
By angles_on_chord_v2 on E, H, B, I, c we get angle(E, B, H) == angle(E, I, H) + 180 mod 360
By angles_on_chord_v0 on A, B, I, E, c we get angle(A, E, B) == angle(A, I, B) mod 360
By angles_on_chord_v3 on B, A, E, H, c we get angle(B, E, A) == angle(B, H, A) + 180 mod 360
By angles_on_chord_v0 on E, I, B, D, c we get angle(E, B, I) == angle(E, D, I) mod 360
By angles_on_chord_v1 on D, C, A, F, Circle(A, C, D) we get angle(D, A, C) == angle(D, F, C) mod 360
By angles_on_chord_v1 on B, H, A, I, c we get angle(B, A, H) == angle(B, I, H) mod 360
By angles_on_chord_v1 on D, I, A, B, c we get angle(D, A, I) == angle(D, B, I) mod 360
By angles_on_chord_v2 on H, E, D, B, c we get angle(H, D, E) == angle(H, B, E) + 180 mod 360
By angles_on_chord_v0 on F, B, C, E, Circle(B, C, E) we get angle(F, C, B) == angle(F, E, B) mod 360
By angles_on_chord_v2 on D, B, I, A, c we get angle(D, I, B) == angle(D, A, B) + 180 mod 360
By angles_on_chord_v3 on D, B, H, E, c we get angle(D, H, B) == angle(D, E, B) + 180 mod 360
By angles_on_chord_v1 on C, E, B, F, Circle(B, C, E) we get angle(C, B, E) == angle(C, F, E) mod 360
By angles_on_chord_v0 on B, E, F, C, Circle(B, C, E) we get angle(B, C, E) == angle(B, F, E) mod 360
By angles_on_chord_v1 on H, A, I, B, c we get angle(H, B, A) == angle(H, I, A) mod 360
By angles_on_chord_v2 on B, D, H, E, c we get angle(B, H, D) == angle(B, E, D) + 180 mod 360
By angles_on_chord_v0 on E, I, B, A, c we get angle(E, A, I) == angle(E, B, I) mod 360
By angles_on_chord_v0 on I, D, B, H, c we get angle(I, B, D) == angle(I, H, D) mod 360
By angles_on_chord_v2 on H, D, A, B, c we get angle(H, A, D) == angle(H, B, D) + 180 mod 360
By angles_on_chord_v2 on D, H, B, A, c we get angle(D, B, H) == angle(D, A, H) + 180 mod 360
By angles_on_chord_v0 on I, D, A, B, c we get angle(I, A, D) == angle(I, B, D) mod 360
By angles_on_chord_v1 on H, D, B, E, c we get angle(H, B, D) == angle(H, E, D) mod 360
By angles_on_chord_v0 on H, B, A, I, c we get angle(H, A, B) == angle(H, I, B) mod 360
By angles_on_chord_v1 on B, H, D, I, c we get angle(B, D, H) == angle(B, I, H) mod 360
By angles_on_chord_v3 on B, A, D, H, c we get angle(B, D, A) == angle(B, H, A) + 180 mod 360
By angles_on_chord_v1 on B, F, E, C, Circle(B, C, E) we get angle(B, C, F) == angle(B, E, F) mod 360
By angles_on_chord_v1 on D, I, E, B, c we get angle(D, B, I) == angle(D, E, I) mod 360
By angles_on_chord_v1 on I, E, B, H, c we get angle(I, B, E) == angle(I, H, E) mod 360
By angles_on_chord_v1 on A, I, B, H, c we get angle(A, B, I) == angle(A, H, I) mod 360
By angles_on_chord_v0 on C, F, B, E, Circle(B, C, E) we get angle(C, B, F) == angle(C, E, F) mod 360
By angles_on_chord_v2 on D, B, E, H, c we get angle(D, E, B) == angle(D, H, B) + 180 mod 360
By angles_on_chord_v1 on B, H, E, I, c we get angle(B, E, H) == angle(B, I, H) mod 360
By angles_on_chord_v0 on B, E, A, I, c we get angle(B, A, E) == angle(B, I, E) mod 360
By angles_on_chord_v1 on B, A, D, I, c we get angle(B, D, A) == angle(B, I, A) mod 360
By angles_on_chord_v1 on E, B, H, D, c we get angle(E, D, B) == angle(E, H, B) mod 360
By angles_on_chord_v3 on H, E, B, I, c we get angle(H, B, E) == angle(H, I, E) + 180 mod 360
By angles_on_chord_v1 on A, I, B, E, c we get angle(A, B, I) == angle(A, E, I) mod 360
By angles_on_chord_v0 on C, D, A, F, Circle(A, C, D) we get angle(C, A, D) == angle(C, F, D) mod 360
By angles_on_chord_v3 on A, B, H, D, c we get angle(A, H, B) == angle(A, D, B) + 180 mod 360
By angles_on_chord_v2 on H, E, A, B, c we get angle(H, A, E) == angle(H, B, E) + 180 mod 360
By angles_on_chord_v1 on A, D, C, F, Circle(A, C, D) we get angle(A, C, D) == angle(A, F, D) mod 360
By angles_on_chord_v2 on I, A, B, D, c we get angle(I, B, A) == angle(I, D, A) + 180 mod 360
By angles_on_chord_v1 on F, C, E, B, Circle(B, C, E) we get angle(F, B, C) == angle(F, E, C) mod 360
By angles_on_chord_v2 on B, A, H, D, c we get angle(B, H, A) == angle(B, D, A) + 180 mod 360
By angles_on_chord_v2 on B, D, A, I, c we get angle(B, A, D) == angle(B, I, D) + 180 mod 360
By angles_on_chord_v1 on F, A, C, D, Circle(A, C, D) we get angle(F, C, A) == angle(F, D, A) mod 360
By angles_on_chord_v0 on H, B, I, D, c we get angle(H, D, B) == angle(H, I, B) mod 360
By angles_on_chord_v2 on E, H, B, D, c we get angle(E, B, H) == angle(E, D, H) + 180 mod 360
By angles_on_chord_v3 on B, D, I, A, c we get angle(B, I, D) == angle(B, A, D) + 180 mod 360
By angles_on_chord_v0 on B, E, H, A, c we get angle(B, A, E) == angle(B, H, E) mod 360
By angles_on_chord_v0 on D, H, B, I, c we get angle(D, B, H) == angle(D, I, H) mod 360
By angles_on_chord_v3 on A, I, B, D, c we get angle(A, B, I) == angle(A, D, I) + 180 mod 360
By angles_on_chord_v0 on E, C, F, B, Circle(B, C, E) we get angle(E, B, C) == angle(E, F, C) mod 360
By angles_on_chord_v3 on E, H, I, B, c we get angle(E, I, H) == angle(E, B, H) + 180 mod 360
By angles_on_chord_v0 on A, B, I, D, c we get angle(A, D, B) == angle(A, I, B) mod 360
By angles_on_chord_v3 on E, H, A, B, c we get angle(E, A, H) == angle(E, B, H) + 180 mod 360
By angles_on_chord_v1 on B, A, E, I, c we get angle(B, E, A) == angle(B, I, A) mod 360
By angles_on_chord_v1 on H, A, D, B, c we get angle(H, B, A) == angle(H, D, A) mod 360
By angles_on_chord_v2 on A, B, D, H, c we get angle(A, D, B) == angle(A, H, B) + 180 mod 360
By angles_on_chord_v0 on A, F, C, D, Circle(A, C, D) we get angle(A, C, F) == angle(A, D, F) mod 360
By angles_on_chord_v1 on I, B, D, H, c we get angle(I, D, B) == angle(I, H, B) mod 360
By angles_on_chord_v3 on H, E, B, A, c we get angle(H, B, E) == angle(H, A, E) + 180 mod 360
By angles_on_chord_v2 on E, H, B, A, c we get angle(E, B, H) == angle(E, A, H) + 180 mod 360
By angles_on_chord_v1 on I, E, A, B, c we get angle(I, A, E) == angle(I, B, E) mod 360
By angles_on_chord_v3 on H, D, B, A, c we get angle(H, B, D) == angle(H, A, D) + 180 mod 360
By angles_on_chord_v0 on B, E, D, H, c we get angle(B, D, E) == angle(B, H, E) mod 360
By angles_on_chord_v1 on C, F, D, A, Circle(A, C, D) we get angle(C, A, F) == angle(C, D, F) mod 360
By angles_on_chord_v1 on H, D, B, I, c we get angle(H, B, D) == angle(H, I, D) mod 360
By angles_on_chord_v3 on I, A, D, B, c we get angle(I, D, A) == angle(I, B, A) + 180 mod 360
By angles_on_chord_v0 on A, H, B, I, c we get angle(A, B, H) == angle(A, I, H) mod 360
By angles_on_chord_v2 on H, E, I, B, c we get angle(H, I, E) == angle(H, B, E) + 180 mod 360
By angles_on_chord_v2 on A, I, D, B, c we get angle(A, D, I) == angle(A, B, I) + 180 mod 360
By angles_on_chord_v3 on H, E, B, D, c we get angle(H, B, E) == angle(H, D, E) + 180 mod 360
By angles_on_chord_v1 on E, B, A, H, c we get angle(E, A, B) == angle(E, H, B) mod 360
By angles_on_chord_v0 on I, D, E, B, c we get angle(I, B, D) == angle(I, E, D) mod 360
By angles_on_chord_v3 on B, I, E, H, c we get angle(B, E, I) == angle(B, H, I) + 180 mod 360
By angles_on_chord_v2 on I, B, E, H, c we get angle(I, E, B) == angle(I, H, B) + 180 mod 360
By angles_on_chord_v1 on E, B, I, A, c we get angle(E, A, B) == angle(E, I, B) mod 360
By angles_on_chord_v3 on I, B, H, E, c we get angle(I, H, B) == angle(I, E, B) + 180 mod 360
By angles_on_chord_v0 on D, A, F, C, Circle(A, C, D) we get angle(D, C, A) == angle(D, F, A) mod 360
By angles_on_chord_v3 on D, H, A, B, c we get angle(D, A, H) == angle(D, B, H) + 180 mod 360
By angles_on_chord_v3 on B, D, E, H, c we get angle(B, E, D) == angle(B, H, D) + 180 mod 360
By angles_on_chord_v3 on E, H, D, B, c we get angle(E, D, H) == angle(E, B, H) + 180 mod 360
By angles_on_chord_v3 on D, B, A, I, c we get angle(D, A, B) == angle(D, I, B) + 180 mod 360
By angles_on_chord_v3 on A, B, H, E, c we get angle(A, H, B) == angle(A, E, B) + 180 mod 360
By between_imply_not_between on G, C, F we get collinear_and_not_between(C, G, F)
By between_imply_not_between on F, C, G we get collinear_and_not_between(C, F, G)
By angles_on_chord_v3 on A, B, H, I, c we get angle(A, H, B) == angle(A, I, B) + 180 mod 360
By angles_on_chord_v1 on H, I, E, B, c we get angle(H, B, I) == angle(H, E, I) mod 360
By angles_on_chord_v2 on B, A, H, I, c we get angle(B, H, A) == angle(B, I, A) + 180 mod 360
By angles_on_chord_v2 on I, H, B, A, c we get angle(I, B, H) == angle(I, A, H) + 180 mod 360
By angles_on_chord_v3 on H, I, B, D, c we get angle(H, B, I) == angle(H, D, I) + 180 mod 360
By angles_on_chord_v2 on H, I, A, B, c we get angle(H, A, I) == angle(H, B, I) + 180 mod 360
By angles_on_chord_v3 on D, B, H, I, c we get angle(D, H, B) == angle(D, I, B) + 180 mod 360
By angles_on_chord_v2 on H, I, D, B, c we get angle(H, D, I) == angle(H, B, I) + 180 mod 360
By angles_on_chord_v3 on I, H, D, B, c we get angle(I, D, H) == angle(I, B, H) + 180 mod 360
By angles_on_chord_v0 on B, E, I, H, c we get angle(B, H, E) == angle(B, I, E) mod 360
By angles_on_chord_v3 on B, D, I, H, c we get angle(B, I, D) == angle(B, H, D) + 180 mod 360
By angles_on_chord_v0 on I, H, E, B, c we get angle(I, B, H) == angle(I, E, H) mod 360
By angles_on_chord_v3 on H, I, B, A, c we get angle(H, B, I) == angle(H, A, I) + 180 mod 360
By angles_on_chord_v2 on A, B, I, H, c we get angle(A, I, B) == angle(A, H, B) + 180 mod 360
By angles_on_chord_v2 on I, H, B, D, c we get angle(I, B, H) == angle(I, D, H) + 180 mod 360
By angles_on_chord_v3 on I, H, A, B, c we get angle(I, A, H) == angle(I, B, H) + 180 mod 360
By angles_on_chord_v2 on B, D, H, I, c we get angle(B, H, D) == angle(B, I, D) + 180 mod 360
By angles_on_chord_v3 on B, A, I, H, c we get angle(B, I, A) == angle(B, H, A) + 180 mod 360
By angles_on_chord_v2 on D, B, I, H, c we get angle(D, I, B) == angle(D, H, B) + 180 mod 360
By angles_on_chord_v1 on E, B, I, H, c we get angle(E, H, B) == angle(E, I, B) mod 360
By divide_by_2_mod_180_v0 on C, B, A, D, G, F we get angle(C, B, A) == angle(D, G, F) mod 360
By divide_by_2_mod_180_v1 on E, G, F, E, A, B we get angle(E, A, B) == angle(E, G, F) mod 360
By divide_by_2_mod_180_v0 on F, G, E, F, A, E we get angle(F, A, E) == angle(F, G, E) mod 360
By divide_by_2_mod_180_v1 on F, B, C, C, G, A we get angle(C, G, A) == angle(F, B, C) mod 360
By in_imply_concyclic on B, A, D, H we get concyclic(A, B, D, H)
By divide_by_2_mod_180_v0 on F, A, C, F, G, B we get angle(F, A, C) == angle(F, G, B) mod 360
By in_imply_concyclic on D, B, H, I we get concyclic(B, D, H, I)
By divide_by_2_mod_180_v1 on C, G, A, F, B, D we get angle(C, G, A) == angle(F, B, D) mod 360
By divide_by_2_mod_180_v0 on B, A, E, F, G, B we get angle(B, A, E) == angle(F, G, B) mod 360
By divide_by_2_mod_180_v0 on C, G, E, B, A, E we get angle(B, A, E) == angle(C, G, E) mod 360
By divide_by_2_mod_180_v1 on F, G, D, F, B, C we get angle(F, B, C) == angle(F, G, D) mod 360
By divide_by_2_mod_180_v1 on E, A, F, B, G, C we get angle(B, G, C) == angle(E, A, F) mod 360
By divide_by_2_mod_180_v1 on A, B, C, F, G, D we get angle(A, B, C) == angle(F, G, D) mod 360
By divide_by_2_mod_180_v0 on D, G, C, D, B, A we get angle(D, B, A) == angle(D, G, C) mod 360
By divide_by_2_mod_180_v1 on C, G, D, F, B, C we get angle(C, G, D) == angle(F, B, C) mod 360
By divide_by_2_mod_180_v0 on F, A, C, F, G, E we get angle(F, A, C) == angle(F, G, E) mod 360
By divide_by_2_mod_180_v0 on D, G, F, C, B, F we get angle(C, B, F) == angle(D, G, F) mod 360
By divide_by_2_mod_180_v1 on F, B, D, F, G, A we get angle(F, B, D) == angle(F, G, A) mod 360
By divide_by_2_mod_180_v1 on F, B, D, C, G, D we get angle(C, G, D) == angle(F, B, D) mod 360
By divide_by_2_mod_180_v0 on C, B, F, D, G, C we get angle(C, B, F) == angle(D, G, C) mod 360
By divide_by_2_mod_180_v0 on A, G, F, C, B, A we get angle(A, G, F) == angle(C, B, A) mod 360
By divide_by_2_mod_180_v1 on E, A, B, B, G, C we get angle(B, G, C) == angle(E, A, B) mod 360
By divide_by_2_mod_180_v1 on B, G, C, C, A, B we get angle(B, G, C) == angle(C, A, B) mod 360
By divide_by_2_mod_180_v1 on A, B, D, F, G, D we get angle(A, B, D) == angle(F, G, D) mod 360
By divide_by_2_mod_180_v1 on E, A, B, B, G, F we get angle(B, G, F) == angle(E, A, B) mod 360
By divide_by_2_mod_180_v1 on E, G, F, C, A, B we get angle(C, A, B) == angle(E, G, F) mod 360
By divide_by_2_mod_180_v1 on F, G, A, A, B, D we get angle(A, B, D) == angle(F, G, A) mod 360
By divide_by_2_mod_180_v1 on B, G, F, C, A, B we get angle(B, G, F) == angle(C, A, B) mod 360
By aa_similarity on B, F, C, G, F, A we get similar_triangles(A, F, G, C, F, B)
By divide_by_2_mod_180_v1 on C, A, F, E, G, C we get angle(C, A, F) == angle(E, G, C) mod 360
By aa_anti_similarity on G, C, D, B, C, F we get anti_similar_triangles(B, C, F, G, C, D)
By divide_by_2_mod_180_v0 on C, G, B, F, A, C we get angle(C, G, B) == angle(F, A, C) mod 360
By divide_by_2_mod_180_v0 on D, G, C, C, B, A we get angle(C, B, A) == angle(D, G, C) mod 360
By divide_by_2_mod_180_v0 on B, A, E, F, G, E we get angle(B, A, E) == angle(F, G, E) mod 360
By divide_by_2_mod_180_v0 on B, A, C, F, G, B we get angle(B, A, C) == angle(F, G, B) mod 360
By aa_anti_similarity on B, C, F, G, C, D we get anti_similar_triangles(B, C, F, G, C, D)
By divide_by_2_mod_180_v0 on D, B, A, A, G, C we get angle(A, G, C) == angle(D, B, A) mod 360
By divide_by_2_mod_180_v0 on F, G, E, B, A, C we get angle(B, A, C) == angle(F, G, E) mod 360
By in_imply_concyclic on E, I, H, B we get concyclic(B, E, H, I)
By sas_anti_similarity on C, D, G, C, F, B we get anti_similar_triangles(B, C, F, G, C, D)
By divide_by_2_mod_180_v1 on E, G, F, E, A, F we get angle(E, A, F) == angle(E, G, F) mod 360
By divide_by_2_mod_180_v0 on D, B, A, D, G, F we get angle(D, B, A) == angle(D, G, F) mod 360
By divide_by_2_mod_180_v0 on C, B, A, A, G, C we get angle(A, G, C) == angle(C, B, A) mod 360
By in_imply_concyclic on E, I, B, A we get concyclic(A, B, E, I)
By in_imply_concyclic on A, D, I, B we get concyclic(A, B, D, I)
By divide_by_2_mod_180_v0 on D, G, C, D, B, F we get angle(D, B, F) == angle(D, G, C) mod 360
By divide_by_2_mod_180_v1 on A, B, D, C, G, D we get angle(A, B, D) == angle(C, G, D) mod 360
By sas_similarity on F, B, G, F, C, A we get similar_triangles(A, C, F, G, B, F)
By divide_by_2_mod_180_v0 on F, A, E, F, G, B we get angle(F, A, E) == angle(F, G, B) mod 360
By divide_by_2_mod_180_v0 on A, G, C, C, B, F we get angle(A, G, C) == angle(C, B, F) mod 360
By divide_by_2_mod_180_v0 on A, G, F, D, B, A we get angle(A, G, F) == angle(D, B, A) mod 360
By aa_anti_similarity on G, D, C, B, F, C we get anti_similar_triangles(B, C, F, G, C, D)
By divide_by_2_mod_180_v0 on C, G, E, F, A, E we get angle(C, G, E) == angle(F, A, E) mod 360
By divide_by_2_mod_180_v1 on F, G, D, F, B, D we get angle(F, B, D) == angle(F, G, D) mod 360
By divide_by_2_mod_180_v1 on C, A, F, B, G, F we get angle(B, G, F) == angle(C, A, F) mod 360
By divide_by_2_mod_180_v0 on B, A, C, C, G, E we get angle(B, A, C) == angle(C, G, E) mod 360
By divide_by_2_mod_180_v1 on C, A, F, E, G, F we get angle(C, A, F) == angle(E, G, F) mod 360
By in_imply_concyclic on B, A, E, H we get concyclic(A, B, E, H)
By divide_by_2_mod_180_v0 on B, A, C, C, G, B we get angle(B, A, C) == angle(C, G, B) mod 360
By divide_by_2_mod_180_v0 on D, B, F, A, G, C we get angle(A, G, C) == angle(D, B, F) mod 360
By divide_by_2_mod_180_v1 on A, B, D, C, G, A we get angle(A, B, D) == angle(C, G, A) mod 360
By sas_anti_similarity on E, C, D, B, C, A we get anti_similar_triangles(A, B, C, D, E, C)
By divide_by_2_mod_180_v1 on A, B, C, C, G, A we get angle(A, B, C) == angle(C, G, A) mod 360
By sas_anti_similarity on F, B, G, E, B, A we get anti_similar_triangles(A, B, E, G, B, F)
By divide_by_2_mod_180_v0 on F, A, C, C, G, E we get angle(C, G, E) == angle(F, A, C) mod 360
By divide_by_2_mod_180_v0 on A, G, F, C, B, F we get angle(A, G, F) == angle(C, B, F) mod 360
By sas_anti_similarity on D, A, B, F, A, G we get anti_similar_triangles(A, B, D, A, G, F)
By aa_anti_similarity on G, F, A, B, D, A we get anti_similar_triangles(A, B, D, A, G, F)
By divide_by_2_mod_180_v0 on D, B, F, A, G, F we get angle(A, G, F) == angle(D, B, F) mod 360
By divide_by_2_mod_180_v1 on B, G, F, E, A, F we get angle(B, G, F) == angle(E, A, F) mod 360
By divide_by_2_mod_180_v0 on F, A, E, C, G, B we get angle(C, G, B) == angle(F, A, E) mod 360
By divide_by_2_mod_180_v0 on B, A, E, C, G, B we get angle(B, A, E) == angle(C, G, B) mod 360
By divide_by_2_mod_180_v1 on A, B, C, C, G, D we get angle(A, B, C) == angle(C, G, D) mod 360
By divide_by_2_mod_180_v1 on F, G, A, A, B, C we get angle(A, B, C) == angle(F, G, A) mod 360
By sas_anti_similarity on C, F, A, C, E, G we get anti_similar_triangles(A, C, F, G, C, E)
By sas_similarity on A, E, B, G, E, C we get similar_triangles(A, B, E, G, C, E)
By divide_by_2_mod_180_v1 on E, G, C, E, A, F we get angle(E, A, F) == angle(E, G, C) mod 360
By sas_anti_similarity on C, F, B, C, D, G we get anti_similar_triangles(B, C, F, G, C, D)
By between_imply_segment_sum on F, C, G we get distance(F, G) == distance(C, F) + distance(C, G)
By sas_anti_similarity on E, B, A, F, B, G we get anti_similar_triangles(A, B, E, G, B, F)
By aa_anti_similarity on B, F, C, G, D, C we get anti_similar_triangles(B, C, F, G, C, D)
By aa_anti_similarity on G, C, E, A, C, F we get anti_similar_triangles(A, C, F, G, C, E)
By divide_by_2_mod_180_v1 on C, A, F, B, G, C we get angle(B, G, C) == angle(C, A, F) mod 360
By sas_anti_similarity on F, A, G, D, A, B we get anti_similar_triangles(A, B, D, A, G, F)
By reverse_direction on C, G we get 180 == direction(C, G) - direction(G, C) mod 360
By in_imply_concyclic on I, A, H, B we get concyclic(A, B, H, I)
By reverse_direction on G, C we get 180 == direction(G, C) - direction(C, G) mod 360
By aa_similarity on G, F, B, A, F, C we get similar_triangles(A, C, F, G, B, F)
By aa_similarity on B, A, D, G, C, D we get similar_triangles(A, B, D, C, G, D)
By divide_by_2_mod_180_v0 on D, B, F, D, G, F we get angle(D, B, F) == angle(D, G, F) mod 360
By sas_similarity on C, D, G, A, D, B we get similar_triangles(A, B, D, C, G, D)
By sas_anti_similarity on C, A, G, D, A, E we get anti_similar_triangles(A, C, G, A, D, E)
By aa_similarity on A, F, C, G, F, B we get similar_triangles(A, C, F, G, B, F)
By sas_similarity on B, D, A, G, D, C we get similar_triangles(A, B, D, C, G, D)
By sas_anti_similarity on D, B, E, G, B, C we get anti_similar_triangles(B, C, G, B, E, D)
By divide_by_2_mod_180_v1 on C, A, B, E, G, C we get angle(C, A, B) == angle(E, G, C) mod 360
By sas_similarity on G, D, C, B, D, A we get similar_triangles(A, B, D, C, G, D)
By aa_similarity on A, C, F, G, B, F we get similar_triangles(A, C, F, G, B, F)
By sas_anti_similarity on D, G, E, B, G, A we get anti_similar_triangles(A, B, G, E, D, G)
By aa_similarity on B, D, A, G, D, C we get similar_triangles(A, B, D, C, G, D)
By sas_anti_similarity on A, C, B, D, C, E we get anti_similar_triangles(A, B, C, D, E, C)
By sas_similarity on B, C, F, G, A, F we get similar_triangles(A, F, G, C, F, B)
By sas_similarity on A, D, B, C, D, G we get similar_triangles(A, B, D, C, G, D)
By aa_anti_similarity on A, C, F, G, C, E we get anti_similar_triangles(A, C, F, G, C, E)
By aa_similarity on G, E, C, A, E, B we get similar_triangles(A, B, E, G, C, E)
By sas_anti_similarity on G, B, C, D, B, E we get anti_similar_triangles(B, C, G, B, E, D)
By aa_anti_similarity on G, B, F, A, B, E we get anti_similar_triangles(A, B, E, G, B, F)
By aa_similarity on G, A, F, B, C, F we get similar_triangles(A, F, G, C, F, B)
By aa_anti_similarity on G, E, C, A, F, C we get anti_similar_triangles(A, C, F, G, C, E)
By aa_anti_similarity on B, D, A, G, F, A we get anti_similar_triangles(A, B, D, A, G, F)
By sas_anti_similarity on G, D, C, B, F, C we get anti_similar_triangles(B, C, F, G, C, D)
By sas_similarity on A, C, F, G, B, F we get similar_triangles(A, C, F, G, B, F)
By sas_anti_similarity on C, B, G, E, B, D we get anti_similar_triangles(B, C, G, B, E, D)
By sas_anti_similarity on B, C, A, E, C, D we get anti_similar_triangles(A, B, C, D, E, C)
By sas_anti_similarity on G, A, C, E, A, D we get anti_similar_triangles(A, C, G, A, D, E)
By aa_similarity on A, B, E, G, C, E we get similar_triangles(A, B, E, G, C, E)
By aa_similarity on G, C, E, A, B, E we get similar_triangles(A, B, E, G, C, E)
By sas_anti_similarity on E, B, D, C, B, G we get anti_similar_triangles(B, C, G, B, E, D)
By aa_anti_similarity on A, F, C, G, E, C we get anti_similar_triangles(A, C, F, G, C, E)
By sas_anti_similarity on E, G, D, A, G, B we get anti_similar_triangles(A, B, G, E, D, G)
By aa_anti_similarity on A, B, E, G, B, F we get anti_similar_triangles(A, B, E, G, B, F)
By sas_anti_similarity on B, F, C, G, D, C we get anti_similar_triangles(B, C, F, G, C, D)
By sas_similarity on C, E, G, B, E, A we get similar_triangles(A, B, E, G, C, E)
By sas_similarity on G, E, C, A, E, B we get similar_triangles(A, B, E, G, C, E)
By sas_anti_similarity on D, C, E, A, C, B we get anti_similar_triangles(A, B, C, D, E, C)
By sas_anti_similarity on G, B, F, A, B, E we get anti_similar_triangles(A, B, E, G, B, F)
By sas_anti_similarity on C, E, G, C, F, A we get anti_similar_triangles(A, C, F, G, C, E)
By aa_similarity on B, C, F, G, A, F we get similar_triangles(A, F, G, C, F, B)
By reverse_direction on F, G we get 180 == direction(F, G) - direction(G, F) mod 360
By sas_anti_similarity on D, A, E, C, A, G we get anti_similar_triangles(A, C, G, A, D, E)
By aa_similarity on A, E, B, G, E, C we get similar_triangles(A, B, E, G, C, E)
By sas_similarity on B, E, A, C, E, G we get similar_triangles(A, B, E, G, C, E)
By sas_similarity on G, B, F, A, C, F we get similar_triangles(A, C, F, G, B, F)
By sas_anti_similarity on A, G, B, E, G, D we get anti_similar_triangles(A, B, G, E, D, G)
By sas_anti_similarity on G, A, F, B, A, D we get anti_similar_triangles(A, B, D, A, G, F)
By aa_similarity on G, C, D, B, A, D we get similar_triangles(A, B, D, C, G, D)
By sas_anti_similarity on A, B, E, G, B, F we get anti_similar_triangles(A, B, E, G, B, F)
By sas_anti_similarity on B, G, A, D, G, E we get anti_similar_triangles(A, B, G, E, D, G)
By sas_similarity on F, C, B, F, A, G we get similar_triangles(A, F, G, C, F, B)
By sas_anti_similarity on G, E, C, A, F, C we get anti_similar_triangles(A, C, F, G, C, E)
By aa_similarity on G, B, F, A, C, F we get similar_triangles(A, C, F, G, B, F)
By reverse_direction on G, F we get 180 == direction(G, F) - direction(F, G) mod 360
By sas_similarity on F, A, G, F, C, B we get similar_triangles(A, F, G, C, F, B)
By aa_anti_similarity on A, E, B, G, F, B we get anti_similar_triangles(A, B, E, G, B, F)
By sas_anti_similarity on A, F, C, G, E, C we get anti_similar_triangles(A, C, F, G, C, E)
By sas_anti_similarity on B, A, D, G, A, F we get anti_similar_triangles(A, B, D, A, G, F)
By aa_similarity on G, F, A, B, F, C we get similar_triangles(A, F, G, C, F, B)
By aa_anti_similarity on B, A, D, G, A, F we get anti_similar_triangles(A, B, D, A, G, F)
By aa_anti_similarity on G, F, B, A, E, B we get anti_similar_triangles(A, B, E, G, B, F)
By aa_similarity on G, D, C, B, D, A we get similar_triangles(A, B, D, C, G, D)
By aa_anti_similarity on G, A, F, B, A, D we get anti_similar_triangles(A, B, D, A, G, F)
By sas_anti_similarity on E, A, D, G, A, C we get anti_similar_triangles(A, C, G, A, D, E)
By sas_similarity on F, C, A, F, B, G we get similar_triangles(A, C, F, G, B, F)
By sas_similarity on G, A, F, B, C, F we get similar_triangles(A, F, G, C, F, B)
By external_angle_bisector_definition_v0_r on C, A, G, F we get Line(A, F) == external_angle_bisector(C, F, G)
By power_of_a_point_on_circle on D, Circle(C, D, E) we get 0 == power_of_a_point(D, Circle(C, D, E))
By power_of_a_point_on_circle on E, Circle(B, C, E) we get 0 == power_of_a_point(E, Circle(B, C, E))
By power_of_a_point_in_circle on A, Circle(A, C, D) we get 0 == power_of_a_point(A, Circle(A, C, D))
By external_angle_bisector_definition_v0_r on G, A, G, F we get Line(A, F) == external_angle_bisector(G, F, G)
By external_angle_bisector_definition_v0_r on C, B, G, F we get Line(B, F) == external_angle_bisector(C, F, G)
By external_angle_bisector_definition_v0_r on G, B, G, F we get Line(B, F) == external_angle_bisector(G, F, G)
By power_of_a_point_on_circle on B, Circle(B, C, E) we get 0 == power_of_a_point(B, Circle(B, C, E))
By internal_angle_bisector_definition_v0_r on G, F, G, C we get Line(C, F) == internal_angle_bisector(G, C, G)
By internal_angle_bisector_definition_v0_r on C, F, C, G we get Line(F, G) == internal_angle_bisector(C, G, C)
By internal_angle_bisector_definition_v0_r on C, G, C, F we get Line(F, G) == internal_angle_bisector(C, F, C)
By power_of_a_point_on_circle on C, Circle(B, C, E) we get 0 == power_of_a_point(C, Circle(B, C, E))
By power_of_a_point_on_circle on C, Circle(C, D, E) we get 0 == power_of_a_point(C, Circle(C, D, E))
By power_of_a_point_in_circle on B, c we get 0 == power_of_a_point(B, c)
By power_of_a_point_in_circle on F, Circle(B, C, E) we get 0 == power_of_a_point(F, Circle(B, C, E))
By internal_angle_bisector_definition_v0_r on G, C, G, F we get Line(C, F) == internal_angle_bisector(G, F, G)
By power_of_a_point_on_circle on C, Circle(A, C, D) we get 0 == power_of_a_point(C, Circle(A, C, D))
By power_of_a_point_on_circle on D, Circle(A, C, D) we get 0 == power_of_a_point(D, Circle(A, C, D))
By power_of_a_point_on_circle on E, Circle(C, D, E) we get 0 == power_of_a_point(E, Circle(C, D, E))
By power_of_a_point_on_circle on G, Circle(C, D, E) we get 0 == power_of_a_point(G, Circle(C, D, E))
By power_of_a_point_in_circle on F, Circle(A, C, D) we get 0 == power_of_a_point(F, Circle(A, C, D))
By internal_angle_bisector_definition_v0_r on F, C, F, G we get Line(C, G) == internal_angle_bisector(F, G, F)
By internal_angle_bisector_definition_v0_r on F, G, F, C we get Line(C, G) == internal_angle_bisector(F, C, F)
By power_of_a_point_definition on G, B, E, Circle(B, C, E) we get log(distance(B, G)) + log(distance(E, G)) == log(power_of_a_point(G, Circle(B, C, E)))
By sas_anti_similarity on A, B, G, E, B, F we get anti_similar_triangles(A, B, G, E, B, F)
By power_of_a_point_definition on A, E, C, Circle(C, D, E) we get log(distance(A, E)) + log(distance(A, C)) == log(power_of_a_point(A, Circle(C, D, E)))
By power_of_a_point_definition on B, A, F, Circle(A, C, D) we get log(distance(A, B)) + log(distance(B, F)) == log(power_of_a_point(B, Circle(A, C, D)))
By anti_similar_triangle_basic_properties on C, D, G, A, F, G we get angle(C, D, G) == 0 - angle(A, F, G) mod 360, angle(D, G, C) == 0 - angle(F, G, A) mod 360, angle(G, C, D) == 0 - angle(G, A, F) mod 360, log(distance(A, F)) + log(distance(D, G)) == log(distance(C, D)) + log(distance(F, G)), log(distance(D, G)) + log(distance(A, G)) == log(distance(F, G)) + log(distance(C, G)), log(distance(A, G)) + log(distance(C, D)) == log(distance(C, G)) + log(distance(A, F))
By anti_similar_triangle_basic_properties on G, F, B, G, E, C we get angle(G, F, B) == 0 - angle(G, E, C) mod 360, angle(F, B, G) == 0 - angle(E, C, G) mod 360, angle(B, G, F) == 0 - angle(C, G, E) mod 360, log(distance(E, G)) + log(distance(B, F)) == log(distance(F, G)) + log(distance(C, E)), log(distance(B, F)) + log(distance(C, G)) == log(distance(C, E)) + log(distance(B, G)), log(distance(B, G)) + log(distance(E, G)) == log(distance(C, G)) + log(distance(F, G))
By anti_similar_triangle_basic_properties on A, G, F, C, G, D we get angle(A, G, F) == 0 - angle(C, G, D) mod 360, angle(G, F, A) == 0 - angle(G, D, C) mod 360, angle(F, A, G) == 0 - angle(D, C, G) mod 360, log(distance(A, G)) + log(distance(D, G)) == log(distance(C, G)) + log(distance(F, G)), log(distance(D, G)) + log(distance(A, F)) == log(distance(F, G)) + log(distance(C, D)), log(distance(A, F)) + log(distance(C, G)) == log(distance(C, D)) + log(distance(A, G))
By power_of_a_point_definition on E, A, C, Circle(A, C, D) we get log(distance(A, E)) + log(distance(C, E)) == log(power_of_a_point(E, Circle(A, C, D)))
By anti_similar_triangle_basic_properties on F, G, B, E, G, C we get angle(F, G, B) == 0 - angle(E, G, C) mod 360, angle(G, B, F) == 0 - angle(G, C, E) mod 360, angle(B, F, G) == 0 - angle(C, E, G) mod 360, log(distance(E, G)) + log(distance(B, G)) == log(distance(F, G)) + log(distance(C, G)), log(distance(B, G)) + log(distance(C, E)) == log(distance(C, G)) + log(distance(B, F)), log(distance(B, F)) + log(distance(E, G)) == log(distance(C, E)) + log(distance(F, G))
By power_of_a_point_definition on A, C, E, Circle(B, C, E) we get log(distance(A, C)) + log(distance(A, E)) == log(power_of_a_point(A, Circle(B, C, E)))
By power_of_a_point_definition on D, C, B, Circle(B, C, E) we get log(distance(C, D)) + log(distance(B, D)) == log(power_of_a_point(D, Circle(B, C, E)))
By power_of_a_point_definition on A, D, G, Circle(C, D, E) we get log(distance(A, D)) + log(distance(A, G)) == log(power_of_a_point(A, Circle(C, D, E)))
By power_of_a_point_definition on B, D, C, Circle(A, C, D) we get log(distance(B, D)) + log(distance(B, C)) == log(power_of_a_point(B, Circle(A, C, D)))
By sas_anti_similarity on F, A, D, G, A, B we get anti_similar_triangles(A, B, G, A, D, F)
By sas_anti_similarity on H, C, B, D, C, I we get anti_similar_triangles(B, C, H, I, C, D)
By sas_anti_similarity on B, C, H, I, C, D we get anti_similar_triangles(B, C, H, I, C, D)
By sas_anti_similarity on G, B, A, F, B, E we get anti_similar_triangles(A, B, G, E, B, F)
By sas_anti_similarity on I, C, D, B, C, H we get anti_similar_triangles(B, C, H, I, C, D)
By sas_anti_similarity on C, A, B, F, A, E we get anti_similar_triangles(A, B, C, A, E, F)
By sas_anti_similarity on F, B, E, G, B, A we get anti_similar_triangles(A, B, G, E, B, F)
By sas_anti_similarity on E, B, F, A, B, G we get anti_similar_triangles(A, B, G, E, B, F)
By sas_anti_similarity on D, A, F, B, A, G we get anti_similar_triangles(A, B, G, A, D, F)
By sas_anti_similarity on D, C, H, I, C, B we get anti_similar_triangles(B, C, I, H, C, D)
By power_of_a_point_definition on F, B, A, c we get log(power_of_a_point(F, c)) == log(distance(B, F)) + log(distance(A, F))
By sas_anti_similarity on D, B, F, A, B, C we get anti_similar_triangles(A, B, C, D, B, F)
By sas_anti_similarity on B, A, G, D, A, F we get anti_similar_triangles(A, B, G, A, D, F)
By power_of_a_point_definition on A, F, B, Circle(B, C, E) we get log(distance(A, F)) + log(distance(A, B)) == log(power_of_a_point(A, Circle(B, C, E)))
By sas_anti_similarity on C, B, A, F, B, D we get anti_similar_triangles(A, B, C, D, B, F)
By sas_anti_similarity on H, C, D, B, C, I we get anti_similar_triangles(B, C, I, H, C, D)
By sas_anti_similarity on I, C, B, D, C, H we get anti_similar_triangles(B, C, I, H, C, D)
By sas_anti_similarity on B, A, C, E, A, F we get anti_similar_triangles(A, B, C, A, E, F)
By sas_anti_similarity on F, B, D, C, B, A we get anti_similar_triangles(A, B, C, D, B, F)
By sas_anti_similarity on A, B, C, D, B, F we get anti_similar_triangles(A, B, C, D, B, F)
By sas_anti_similarity on E, A, F, B, A, C we get anti_similar_triangles(A, B, C, A, E, F)
By sas_anti_similarity on G, A, B, F, A, D we get anti_similar_triangles(A, B, G, A, D, F)
By sas_anti_similarity on D, C, I, H, C, B we get anti_similar_triangles(B, C, H, I, C, D)
By sas_anti_similarity on F, A, E, C, A, B we get anti_similar_triangles(A, B, C, A, E, F)
By sas_anti_similarity on B, C, I, H, C, D we get anti_similar_triangles(B, C, I, H, C, D)
By power_of_a_point_definition on G, A, D, Circle(A, C, D) we get log(distance(A, G)) + log(distance(D, G)) == log(power_of_a_point(G, Circle(A, C, D)))
By power_of_a_point_definition on B, G, E, Circle(C, D, E) we get log(distance(B, G)) + log(distance(B, E)) == log(power_of_a_point(B, Circle(C, D, E)))
By power_of_a_point_definition on B, C, D, Circle(C, D, E) we get log(distance(B, C)) + log(distance(B, D)) == log(power_of_a_point(B, Circle(C, D, E)))
By power_of_a_point_definition on F, C, G, Circle(C, D, E) we get log(distance(C, F)) + log(distance(F, G)) == log(power_of_a_point(F, Circle(C, D, E)))
By power_of_a_point_definition on G, F, C, Circle(B, C, E) we get log(distance(F, G)) + log(distance(C, G)) == log(power_of_a_point(G, Circle(B, C, E)))
By power_of_a_point_definition on G, F, C, Circle(A, C, D) we get log(distance(F, G)) + log(distance(C, G)) == log(power_of_a_point(G, Circle(A, C, D)))
By line_intersection_definition on F, f, Line(D, F) we get F == line_intersection(f, Line(D, F))
By line_intersection_definition on B, j, Line(B, I) we get B == line_intersection(j, Line(B, I))
By line_intersection_definition on D, Line(D, H), Line(D, F) we get D == line_intersection(Line(D, F), Line(D, H))
By line_intersection_definition on D, Line(D, F), g we get D == line_intersection(g, Line(D, F))
By line_intersection_definition on B, Line(B, I), Line(B, H) we get B == line_intersection(Line(B, H), Line(B, I))
By line_intersection_definition on F, Line(E, F), Line(D, F) we get F == line_intersection(Line(D, F), Line(E, F))
By line_intersection_definition on D, Line(D, E), Line(D, F) we get D == line_intersection(Line(D, E), Line(D, F))
By line_intersection_definition on H, Line(B, H), k we get H == line_intersection(k, Line(B, H))
By line_intersection_definition on E, Line(E, F), h we get E == line_intersection(h, Line(E, F))
By line_intersection_definition on B, Line(B, I), g we get B == line_intersection(g, Line(B, I))
By line_intersection_definition on I, Line(A, I), Line(B, I) we get I == line_intersection(Line(A, I), Line(B, I))
By line_intersection_definition on B, Line(B, H), j we get B == line_intersection(j, Line(B, H))
By line_intersection_definition on F, f, Line(E, F) we get F == line_intersection(f, Line(E, F))
By line_intersection_definition on I, Line(E, I), Line(B, I) we get I == line_intersection(Line(B, I), Line(E, I))
By line_intersection_definition on B, Line(B, H), f we get B == line_intersection(f, Line(B, H))
By line_intersection_definition on F, Line(C, F), Line(D, F) we get F == line_intersection(Line(C, F), Line(D, F))
By line_intersection_definition on E, Line(D, E), Line(E, F) we get E == line_intersection(Line(D, E), Line(E, F))
By line_intersection_definition on H, Line(E, H), Line(B, H) we get H == line_intersection(Line(B, H), Line(E, H))
By line_intersection_definition on B, g, Line(B, H) we get B == line_intersection(g, Line(B, H))
By line_intersection_definition on H, Line(B, H), Line(A, H) we get H == line_intersection(Line(A, H), Line(B, H))
By line_intersection_definition on E, Line(E, F), Line(E, H) we get E == line_intersection(Line(E, F), Line(E, H))
By line_intersection_definition on I, Line(D, I), Line(B, I) we get I == line_intersection(Line(B, I), Line(D, I))
By line_intersection_definition on F, Line(E, F), Line(C, F) we get F == line_intersection(Line(C, F), Line(E, F))
By line_intersection_definition on H, Line(D, H), Line(B, H) we get H == line_intersection(Line(B, H), Line(D, H))
By line_intersection_definition on D, Line(D, I), Line(D, F) we get D == line_intersection(Line(D, F), Line(D, I))
By line_intersection_definition on I, k, Line(B, I) we get I == line_intersection(k, Line(B, I))
By line_intersection_definition on E, Line(E, F), Line(E, I) we get E == line_intersection(Line(E, F), Line(E, I))
By line_intersection_definition on B, f, Line(B, I) we get B == line_intersection(f, Line(B, I))
By line_intersection_definition on E, j, Line(E, F) we get E == line_intersection(j, Line(E, F))
By line_intersection_definition on D, i, Line(D, F) we get D == line_intersection(i, Line(D, F))
By perpendicular_direction_conditions_v0 on I, A, I, B we get perpendicular(Line(A, I), Line(B, I))
By perpendicular_direction_conditions_v0 on H, B, H, A we get perpendicular(Line(A, H), Line(B, H))
By same_angle_v0 on B, G, E, I we get angle(E, B, I) == angle(G, B, I) mod 360
By same_angle_v0 on B, A, F, H we get angle(A, B, H) == angle(F, B, H) mod 360
By same_angle_v2 on E, G, B, F we get angle(G, E, F) == angle(B, E, F) + 180 mod 360
By same_angle_v0 on F, C, G, D we get angle(C, F, D) == angle(G, F, D) mod 360
By same_angle_v2 on D, A, G, F we get angle(A, D, F) == angle(G, D, F) + 180 mod 360
By same_angle_v1 on F, G, C, E we get angle(C, F, E) == angle(G, F, E) mod 360
By same_angle_v1 on B, A, F, I we get angle(A, B, I) == angle(F, B, I) mod 360
By same_angle_v0 on B, E, G, H we get angle(E, B, H) == angle(G, B, H) mod 360
By circle_radius_v0_r on B, Circle(B, C, E) we get radius(Circle(B, C, E)) == distance(B, center(Circle(B, C, E)))
By circle_radius_v0_r on F, Circle(A, C, D) we get radius(Circle(A, C, D)) == distance(F, center(Circle(A, C, D)))
By circle_radius_v0_r on D, Circle(A, C, D) we get radius(Circle(A, C, D)) == distance(D, center(Circle(A, C, D)))
By circle_radius_v0_r on G, Circle(C, D, E) we get radius(Circle(C, D, E)) == distance(G, center(Circle(C, D, E)))
By angle_to_center on A, H, E, c we get 2 * angle(A, H, E) == angle(A, center(c), E) mod 360
By circle_radius_v0_r on I, c we get radius(c) == distance(I, center(c))
By circle_radius_v0_r on C, Circle(C, D, E) we get radius(Circle(C, D, E)) == distance(C, center(Circle(C, D, E)))
By circle_radius_v0_r on B, c we get radius(c) == distance(B, center(c))
By angle_to_center on C, D, G, Circle(C, D, E) we get 2 * angle(C, D, G) == angle(C, center(Circle(C, D, E)), G) mod 360
By circle_radius_v0_r on E, c we get radius(c) == distance(E, center(c))
By circle_radius_v0_r on F, Circle(B, C, E) we get radius(Circle(B, C, E)) == distance(F, center(Circle(B, C, E)))
By circle_radius_v0_r on A, c we get radius(c) == distance(A, center(c))
By circle_radius_v0_r on E, Circle(C, D, E) we get radius(Circle(C, D, E)) == distance(E, center(Circle(C, D, E)))
By circle_radius_v0_r on A, Circle(A, C, D) we get radius(Circle(A, C, D)) == distance(A, center(Circle(A, C, D)))
By circle_radius_v0_r on C, Circle(A, C, D) we get radius(Circle(A, C, D)) == distance(C, center(Circle(A, C, D)))
By circle_radius_v0_r on E, Circle(B, C, E) we get radius(Circle(B, C, E)) == distance(E, center(Circle(B, C, E)))
By circle_radius_v0_r on D, c we get radius(c) == distance(D, center(c))
By circle_radius_v0_r on C, Circle(B, C, E) we get radius(Circle(B, C, E)) == distance(C, center(Circle(B, C, E)))
By angle_to_center on D, H, I, c we get 2 * angle(D, H, I) == angle(D, center(c), I) mod 360
By circle_radius_v0_r on H, c we get radius(c) == distance(H, center(c))
By circle_radius_v0_r on D, Circle(C, D, E) we get radius(Circle(C, D, E)) == distance(D, center(Circle(C, D, E)))
By angle_to_center on D, I, E, c we get 2 * angle(D, I, E) == angle(D, center(c), E) mod 360
By angle_to_center on I, H, B, c we get 2 * angle(I, H, B) == angle(I, center(c), B) mod 360
By angle_to_center on B, A, H, c we get 2 * angle(B, A, H) == angle(B, center(c), H) mod 360
By angle_to_center on E, G, C, Circle(C, D, E) we get 2 * angle(E, G, C) == angle(E, center(Circle(C, D, E)), C) mod 360
By angle_to_center on A, B, E, c we get 2 * angle(A, B, E) == angle(A, center(c), E) mod 360
By angle_to_center on A, F, C, Circle(A, C, D) we get 2 * angle(A, F, C) == angle(A, center(Circle(A, C, D)), C) mod 360
By angle_to_center on H, I, E, c we get 2 * angle(H, I, E) == angle(H, center(c), E) mod 360
By angle_to_center on E, D, C, Circle(C, D, E) we get 2 * angle(E, D, C) == angle(E, center(Circle(C, D, E)), C) mod 360
By angle_to_center on I, A, B, c we get 2 * angle(I, A, B) == angle(I, center(c), B) mod 360
By angle_to_center on E, F, C, Circle(B, C, E) we get 2 * angle(E, F, C) == angle(E, center(Circle(B, C, E)), C) mod 360
By angle_to_center on G, D, E, Circle(C, D, E) we get 2 * angle(G, D, E) == angle(G, center(Circle(C, D, E)), E) mod 360
By angle_to_center on D, H, B, c we get 2 * angle(D, H, B) == angle(D, center(c), B) mod 360
By angle_to_center on A, C, F, Circle(A, C, D) we get 2 * angle(A, C, F) == angle(A, center(Circle(A, C, D)), F) mod 360
By angle_to_center on I, E, A, c we get 2 * angle(I, E, A) == angle(I, center(c), A) mod 360
By angle_to_center on I, H, E, c we get 2 * angle(I, H, E) == angle(I, center(c), E) mod 360
By angle_to_center on E, D, G, Circle(C, D, E) we get 2 * angle(E, D, G) == angle(E, center(Circle(C, D, E)), G) mod 360
By angle_to_center on A, C, D, Circle(A, C, D) we get 2 * angle(A, C, D) == angle(A, center(Circle(A, C, D)), D) mod 360
By angle_to_center on I, B, D, c we get 2 * angle(I, B, D) == angle(I, center(c), D) mod 360
By angle_to_center on B, H, D, c we get 2 * angle(B, H, D) == angle(B, center(c), D) mod 360
By angle_to_center on A, E, H, c we get 2 * angle(A, E, H) == angle(A, center(c), H) mod 360
By angle_to_center on B, F, E, Circle(B, C, E) we get 2 * angle(B, F, E) == angle(B, center(Circle(B, C, E)), E) mod 360
By angle_to_center on H, B, I, c we get 2 * angle(H, B, I) == angle(H, center(c), I) mod 360
By angle_to_center on E, B, H, c we get 2 * angle(E, B, H) == angle(E, center(c), H) mod 360
By angle_to_center on A, I, H, c we get 2 * angle(A, I, H) == angle(A, center(c), H) mod 360
By angle_to_center on A, B, I, c we get 2 * angle(A, B, I) == angle(A, center(c), I) mod 360
By angle_to_center on E, C, D, Circle(C, D, E) we get 2 * angle(E, C, D) == angle(E, center(Circle(C, D, E)), D) mod 360
By angle_to_center on E, B, I, c we get 2 * angle(E, B, I) == angle(E, center(c), I) mod 360
By angle_to_center on C, G, E, Circle(C, D, E) we get 2 * angle(C, G, E) == angle(C, center(Circle(C, D, E)), E) mod 360
By angle_to_center on A, D, F, Circle(A, C, D) we get 2 * angle(A, D, F) == angle(A, center(Circle(A, C, D)), F) mod 360
By angle_to_center on E, A, H, c we get 2 * angle(E, A, H) == angle(E, center(c), H) mod 360
By angle_to_center on B, D, I, c we get 2 * angle(B, D, I) == angle(B, center(c), I) mod 360
By angle_to_center on B, E, F, Circle(B, C, E) we get 2 * angle(B, E, F) == angle(B, center(Circle(B, C, E)), F) mod 360
By angle_to_center on D, I, H, c we get 2 * angle(D, I, H) == angle(D, center(c), H) mod 360
By angle_to_center on E, I, H, c we get 2 * angle(E, I, H) == angle(E, center(c), H) mod 360
By angle_to_center on F, B, C, Circle(B, C, E) we get 2 * angle(F, B, C) == angle(F, center(Circle(B, C, E)), C) mod 360
By angle_to_center on D, B, A, c we get 2 * angle(D, B, A) == angle(D, center(c), A) mod 360
By angle_to_center on D, C, E, Circle(C, D, E) we get 2 * angle(D, C, E) == angle(D, center(Circle(C, D, E)), E) mod 360
By angle_to_center on A, D, I, c we get 2 * angle(A, D, I) == angle(A, center(c), I) mod 360
By angle_to_center on D, E, H, c we get 2 * angle(D, E, H) == angle(D, center(c), H) mod 360
By angle_to_center on E, C, B, Circle(B, C, E) we get 2 * angle(E, C, B) == angle(E, center(Circle(B, C, E)), B) mod 360
By angle_to_center on D, F, C, Circle(A, C, D) we get 2 * angle(D, F, C) == angle(D, center(Circle(A, C, D)), C) mod 360
By angle_to_center on E, B, C, Circle(B, C, E) we get 2 * angle(E, B, C) == angle(E, center(Circle(B, C, E)), C) mod 360
By angle_to_center on F, E, C, Circle(B, C, E) we get 2 * angle(F, E, C) == angle(F, center(Circle(B, C, E)), C) mod 360
By angle_to_center on H, B, E, c we get 2 * angle(H, B, E) == angle(H, center(c), E) mod 360
By angle_to_center on D, E, G, Circle(C, D, E) we get 2 * angle(D, E, G) == angle(D, center(Circle(C, D, E)), G) mod 360
By angle_to_center on B, A, D, c we get 2 * angle(B, A, D) == angle(B, center(c), D) mod 360
By angle_to_center on F, C, D, Circle(A, C, D) we get 2 * angle(F, C, D) == angle(F, center(Circle(A, C, D)), D) mod 360
By angle_to_center on A, I, D, c we get 2 * angle(A, I, D) == angle(A, center(c), D) mod 360
By angle_to_center on I, E, B, c we get 2 * angle(I, E, B) == angle(I, center(c), B) mod 360
By angle_to_center on B, I, E, c we get 2 * angle(B, I, E) == angle(B, center(c), E) mod 360
By angle_to_center on D, I, B, c we get 2 * angle(D, I, B) == angle(D, center(c), B) mod 360
By angle_to_center on D, C, G, Circle(C, D, E) we get 2 * angle(D, C, G) == angle(D, center(Circle(C, D, E)), G) mod 360
By angle_to_center on B, I, H, c we get 2 * angle(B, I, H) == angle(B, center(c), H) mod 360
By angle_to_center on E, I, B, c we get 2 * angle(E, I, B) == angle(E, center(c), B) mod 360
By angle_to_center on H, D, B, c we get 2 * angle(H, D, B) == angle(H, center(c), B) mod 360
By angle_to_center on D, C, A, Circle(A, C, D) we get 2 * angle(D, C, A) == angle(D, center(Circle(A, C, D)), A) mod 360
By angle_to_center on D, A, E, c we get 2 * angle(D, A, E) == angle(D, center(c), E) mod 360
By angle_to_center on A, D, C, Circle(A, C, D) we get 2 * angle(A, D, C) == angle(A, center(Circle(A, C, D)), C) mod 360
By angle_to_center on A, D, H, c we get 2 * angle(A, D, H) == angle(A, center(c), H) mod 360
By angle_to_center on H, D, I, c we get 2 * angle(H, D, I) == angle(H, center(c), I) mod 360
By angle_to_center on G, C, E, Circle(C, D, E) we get 2 * angle(G, C, E) == angle(G, center(Circle(C, D, E)), E) mod 360
By angle_to_center on B, I, A, c we get 2 * angle(B, I, A) == angle(B, center(c), A) mod 360
By angle_to_center on D, A, C, Circle(A, C, D) we get 2 * angle(D, A, C) == angle(D, center(Circle(A, C, D)), C) mod 360
By angle_to_center on H, E, I, c we get 2 * angle(H, E, I) == angle(H, center(c), I) mod 360
By angle_to_center on A, H, B, c we get 2 * angle(A, H, B) == angle(A, center(c), B) mod 360
By angle_to_center on E, D, I, c we get 2 * angle(E, D, I) == angle(E, center(c), I) mod 360
By angle_to_center on G, E, C, Circle(C, D, E) we get 2 * angle(G, E, C) == angle(G, center(Circle(C, D, E)), C) mod 360
By angle_to_center on H, I, D, c we get 2 * angle(H, I, D) == angle(H, center(c), D) mod 360
By angle_to_center on H, A, I, c we get 2 * angle(H, A, I) == angle(H, center(c), I) mod 360
By angle_to_center on C, F, E, Circle(B, C, E) we get 2 * angle(C, F, E) == angle(C, center(Circle(B, C, E)), E) mod 360
By angle_to_center on D, A, I, c we get 2 * angle(D, A, I) == angle(D, center(c), I) mod 360
By angle_to_center on I, E, H, c we get 2 * angle(I, E, H) == angle(I, center(c), H) mod 360
By angle_to_center on H, E, B, c we get 2 * angle(H, E, B) == angle(H, center(c), B) mod 360
By angle_to_center on I, A, D, c we get 2 * angle(I, A, D) == angle(I, center(c), D) mod 360
By angle_to_center on I, D, H, c we get 2 * angle(I, D, H) == angle(I, center(c), H) mod 360
By angle_to_center on A, E, I, c we get 2 * angle(A, E, I) == angle(A, center(c), I) mod 360
By angle_to_center on B, H, I, c we get 2 * angle(B, H, I) == angle(B, center(c), I) mod 360
By angle_to_center on B, E, I, c we get 2 * angle(B, E, I) == angle(B, center(c), I) mod 360
By angle_to_center on I, B, H, c we get 2 * angle(I, B, H) == angle(I, center(c), H) mod 360
By angle_to_center on C, D, E, Circle(C, D, E) we get 2 * angle(C, D, E) == angle(C, center(Circle(C, D, E)), E) mod 360
By angle_to_center on I, D, B, c we get 2 * angle(I, D, B) == angle(I, center(c), B) mod 360
By angle_to_center on D, E, B, c we get 2 * angle(D, E, B) == angle(D, center(c), B) mod 360
By angle_to_center on G, C, D, Circle(C, D, E) we get 2 * angle(G, C, D) == angle(G, center(Circle(C, D, E)), D) mod 360
By angle_to_center on B, H, A, c we get 2 * angle(B, H, A) == angle(B, center(c), A) mod 360
By angle_to_center on C, E, B, Circle(B, C, E) we get 2 * angle(C, E, B) == angle(C, center(Circle(B, C, E)), B) mod 360
By angle_to_center on C, D, F, Circle(A, C, D) we get 2 * angle(C, D, F) == angle(C, center(Circle(A, C, D)), F) mod 360
By angle_to_center on C, B, F, Circle(B, C, E) we get 2 * angle(C, B, F) == angle(C, center(Circle(B, C, E)), F) mod 360
By angle_to_center on A, F, D, Circle(A, C, D) we get 2 * angle(A, F, D) == angle(A, center(Circle(A, C, D)), D) mod 360
By angle_to_center on H, E, D, c we get 2 * angle(H, E, D) == angle(H, center(c), D) mod 360
By angle_to_center on C, A, D, Circle(A, C, D) we get 2 * angle(C, A, D) == angle(C, center(Circle(A, C, D)), D) mod 360
By angle_to_center on I, H, D, c we get 2 * angle(I, H, D) == angle(I, center(c), D) mod 360
By angle_to_center on G, D, C, Circle(C, D, E) we get 2 * angle(G, D, C) == angle(G, center(Circle(C, D, E)), C) mod 360
By angle_to_center on C, F, D, Circle(A, C, D) we get 2 * angle(C, F, D) == angle(C, center(Circle(A, C, D)), D) mod 360
By angle_to_center on E, I, A, c we get 2 * angle(E, I, A) == angle(E, center(c), A) mod 360
By angle_to_center on F, B, E, Circle(B, C, E) we get 2 * angle(F, B, E) == angle(F, center(Circle(B, C, E)), E) mod 360
By angle_to_center on H, E, A, c we get 2 * angle(H, E, A) == angle(H, center(c), A) mod 360
By angle_to_center on B, E, D, c we get 2 * angle(B, E, D) == angle(B, center(c), D) mod 360
By angle_to_center on B, E, H, c we get 2 * angle(B, E, H) == angle(B, center(c), H) mod 360
By angle_to_center on A, I, B, c we get 2 * angle(A, I, B) == angle(A, center(c), B) mod 360
By angle_to_center on D, H, E, c we get 2 * angle(D, H, E) == angle(D, center(c), E) mod 360
By angle_to_center on G, E, D, Circle(C, D, E) we get 2 * angle(G, E, D) == angle(G, center(Circle(C, D, E)), D) mod 360
By angle_to_center on I, A, E, c we get 2 * angle(I, A, E) == angle(I, center(c), E) mod 360
By angle_to_center on B, C, F, Circle(B, C, E) we get 2 * angle(B, C, F) == angle(B, center(Circle(B, C, E)), F) mod 360
By angle_to_center on F, A, C, Circle(A, C, D) we get 2 * angle(F, A, C) == angle(F, center(Circle(A, C, D)), C) mod 360
By angle_to_center on A, E, B, c we get 2 * angle(A, E, B) == angle(A, center(c), B) mod 360
By angle_to_center on E, H, D, c we get 2 * angle(E, H, D) == angle(E, center(c), D) mod 360
By angle_to_center on D, A, F, Circle(A, C, D) we get 2 * angle(D, A, F) == angle(D, center(Circle(A, C, D)), F) mod 360
By angle_to_center on D, G, C, Circle(C, D, E) we get 2 * angle(D, G, C) == angle(D, center(Circle(C, D, E)), C) mod 360
By angle_to_center on I, A, H, c we get 2 * angle(I, A, H) == angle(I, center(c), H) mod 360
By angle_to_center on H, A, E, c we get 2 * angle(H, A, E) == angle(H, center(c), E) mod 360
By angle_to_center on I, B, E, c we get 2 * angle(I, B, E) == angle(I, center(c), E) mod 360
By angle_to_center on C, E, F, Circle(B, C, E) we get 2 * angle(C, E, F) == angle(C, center(Circle(B, C, E)), F) mod 360
By angle_to_center on F, C, E, Circle(B, C, E) we get 2 * angle(F, C, E) == angle(F, center(Circle(B, C, E)), E) mod 360
By angle_to_center on F, C, A, Circle(A, C, D) we get 2 * angle(F, C, A) == angle(F, center(Circle(A, C, D)), A) mod 360
By angle_to_center on B, A, E, c we get 2 * angle(B, A, E) == angle(B, center(c), E) mod 360
By angle_to_center on A, H, I, c we get 2 * angle(A, H, I) == angle(A, center(c), I) mod 360
By angle_to_center on I, B, A, c we get 2 * angle(I, B, A) == angle(I, center(c), A) mod 360
By angle_to_center on B, F, C, Circle(B, C, E) we get 2 * angle(B, F, C) == angle(B, center(Circle(B, C, E)), C) mod 360
By angle_to_center on A, H, D, c we get 2 * angle(A, H, D) == angle(A, center(c), D) mod 360
By angle_to_center on H, D, E, c we get 2 * angle(H, D, E) == angle(H, center(c), E) mod 360
By angle_to_center on E, I, D, c we get 2 * angle(E, I, D) == angle(E, center(c), D) mod 360
By angle_to_center on A, E, D, c we get 2 * angle(A, E, D) == angle(A, center(c), D) mod 360
By angle_to_center on B, D, H, c we get 2 * angle(B, D, H) == angle(B, center(c), H) mod 360
By angle_to_center on E, F, B, Circle(B, C, E) we get 2 * angle(E, F, B) == angle(E, center(Circle(B, C, E)), B) mod 360
By angle_to_center on A, I, E, c we get 2 * angle(A, I, E) == angle(A, center(c), E) mod 360
By angle_to_center on E, A, B, c we get 2 * angle(E, A, B) == angle(E, center(c), B) mod 360
By angle_to_center on D, B, I, c we get 2 * angle(D, B, I) == angle(D, center(c), I) mod 360
By angle_to_center on F, A, D, Circle(A, C, D) we get 2 * angle(F, A, D) == angle(F, center(Circle(A, C, D)), D) mod 360
By angle_to_center on F, E, B, Circle(B, C, E) we get 2 * angle(F, E, B) == angle(F, center(Circle(B, C, E)), B) mod 360
By angle_to_center on F, D, A, Circle(A, C, D) we get 2 * angle(F, D, A) == angle(F, center(Circle(A, C, D)), A) mod 360
By angle_to_center on D, C, F, Circle(A, C, D) we get 2 * angle(D, C, F) == angle(D, center(Circle(A, C, D)), F) mod 360
By angle_to_center on H, I, B, c we get 2 * angle(H, I, B) == angle(H, center(c), B) mod 360
By angle_to_center on B, C, E, Circle(B, C, E) we get 2 * angle(B, C, E) == angle(B, center(Circle(B, C, E)), E) mod 360
By angle_to_center on C, F, B, Circle(B, C, E) we get 2 * angle(C, F, B) == angle(C, center(Circle(B, C, E)), B) mod 360
By angle_to_center on F, D, C, Circle(A, C, D) we get 2 * angle(F, D, C) == angle(F, center(Circle(A, C, D)), C) mod 360
By angle_to_center on B, E, A, c we get 2 * angle(B, E, A) == angle(B, center(c), A) mod 360
By angle_to_center on E, D, B, c we get 2 * angle(E, D, B) == angle(E, center(c), B) mod 360
By angle_to_center on C, E, G, Circle(C, D, E) we get 2 * angle(C, E, G) == angle(C, center(Circle(C, D, E)), G) mod 360
By angle_to_center on D, H, A, c we get 2 * angle(D, H, A) == angle(D, center(c), A) mod 360
By angle_to_center on D, I, A, c we get 2 * angle(D, I, A) == angle(D, center(c), A) mod 360
By angle_to_center on I, D, A, c we get 2 * angle(I, D, A) == angle(I, center(c), A) mod 360
By angle_to_center on D, B, E, c we get 2 * angle(D, B, E) == angle(D, center(c), E) mod 360
By angle_to_center on H, A, D, c we get 2 * angle(H, A, D) == angle(H, center(c), D) mod 360
By angle_to_center on B, D, A, c we get 2 * angle(B, D, A) == angle(B, center(c), A) mod 360
By angle_to_center on A, D, B, c we get 2 * angle(A, D, B) == angle(A, center(c), B) mod 360
By angle_to_center on E, C, G, Circle(C, D, E) we get 2 * angle(E, C, G) == angle(E, center(Circle(C, D, E)), G) mod 360
By angle_to_center on H, B, A, c we get 2 * angle(H, B, A) == angle(H, center(c), A) mod 360
By angle_to_center on B, A, I, c we get 2 * angle(B, A, I) == angle(B, center(c), I) mod 360
By angle_to_center on C, D, A, Circle(A, C, D) we get 2 * angle(C, D, A) == angle(C, center(Circle(A, C, D)), A) mod 360
By angle_to_center on E, B, F, Circle(B, C, E) we get 2 * angle(E, B, F) == angle(E, center(Circle(B, C, E)), F) mod 360
By angle_to_center on E, B, A, c we get 2 * angle(E, B, A) == angle(E, center(c), A) mod 360
By angle_to_center on C, A, F, Circle(A, C, D) we get 2 * angle(C, A, F) == angle(C, center(Circle(A, C, D)), F) mod 360
By angle_to_center on B, E, C, Circle(B, C, E) we get 2 * angle(B, E, C) == angle(B, center(Circle(B, C, E)), C) mod 360
By angle_to_center on I, H, A, c we get 2 * angle(I, H, A) == angle(I, center(c), A) mod 360
By angle_to_center on E, D, H, c we get 2 * angle(E, D, H) == angle(E, center(c), H) mod 360
By angle_to_center on H, D, A, c we get 2 * angle(H, D, A) == angle(H, center(c), A) mod 360
By angle_to_center on E, A, D, c we get 2 * angle(E, A, D) == angle(E, center(c), D) mod 360
By angle_to_center on E, C, F, Circle(B, C, E) we get 2 * angle(E, C, F) == angle(E, center(Circle(B, C, E)), F) mod 360
By angle_to_center on D, G, E, Circle(C, D, E) we get 2 * angle(D, G, E) == angle(D, center(Circle(C, D, E)), E) mod 360
By angle_to_center on D, A, H, c we get 2 * angle(D, A, H) == angle(D, center(c), H) mod 360
By angle_to_center on D, F, A, Circle(A, C, D) we get 2 * angle(D, F, A) == angle(D, center(Circle(A, C, D)), A) mod 360
By angle_to_center on B, H, E, c we get 2 * angle(B, H, E) == angle(B, center(c), E) mod 360
By angle_to_center on B, D, E, c we get 2 * angle(B, D, E) == angle(B, center(c), E) mod 360
By angle_to_center on D, E, A, c we get 2 * angle(D, E, A) == angle(D, center(c), A) mod 360
By angle_to_center on C, G, D, Circle(C, D, E) we get 2 * angle(C, G, D) == angle(C, center(Circle(C, D, E)), D) mod 360
By angle_to_center on I, E, D, c we get 2 * angle(I, E, D) == angle(I, center(c), D) mod 360
By angle_to_center on D, E, C, Circle(C, D, E) we get 2 * angle(D, E, C) == angle(D, center(Circle(C, D, E)), C) mod 360
By angle_to_center on E, H, B, c we get 2 * angle(E, H, B) == angle(E, center(c), B) mod 360
By angle_to_center on C, B, E, Circle(B, C, E) we get 2 * angle(C, B, E) == angle(C, center(Circle(B, C, E)), E) mod 360
By angle_to_center on F, C, B, Circle(B, C, E) we get 2 * angle(F, C, B) == angle(F, center(Circle(B, C, E)), B) mod 360
By angle_to_center on E, A, I, c we get 2 * angle(E, A, I) == angle(E, center(c), I) mod 360
By angle_to_center on I, D, E, c we get 2 * angle(I, D, E) == angle(I, center(c), E) mod 360
By angle_to_center on D, E, I, c we get 2 * angle(D, E, I) == angle(D, center(c), I) mod 360
By angle_to_center on B, I, D, c we get 2 * angle(B, I, D) == angle(B, center(c), D) mod 360
By angle_to_center on H, B, D, c we get 2 * angle(H, B, D) == angle(H, center(c), D) mod 360
By angle_to_center on D, A, B, c we get 2 * angle(D, A, B) == angle(D, center(c), B) mod 360
By angle_to_center on C, F, A, Circle(A, C, D) we get 2 * angle(C, F, A) == angle(C, center(Circle(A, C, D)), A) mod 360
By angle_to_center on E, B, D, c we get 2 * angle(E, B, D) == angle(E, center(c), D) mod 360
By angle_to_center on H, A, B, c we get 2 * angle(H, A, B) == angle(H, center(c), B) mod 360
By angle_to_center on A, B, D, c we get 2 * angle(A, B, D) == angle(A, center(c), D) mod 360
By angle_to_center on E, H, I, c we get 2 * angle(E, H, I) == angle(E, center(c), I) mod 360
By angle_to_center on E, H, A, c we get 2 * angle(E, H, A) == angle(E, center(c), A) mod 360
By angle_to_center on A, D, E, c we get 2 * angle(A, D, E) == angle(A, center(c), E) mod 360
By angle_to_center on A, B, H, c we get 2 * angle(A, B, H) == angle(A, center(c), H) mod 360
By angle_to_center on D, B, H, c we get 2 * angle(D, B, H) == angle(D, center(c), H) mod 360
By angle_to_center on C, E, D, Circle(C, D, E) we get 2 * angle(C, E, D) == angle(C, center(Circle(C, D, E)), D) mod 360
By angle_to_center on E, G, D, Circle(C, D, E) we get 2 * angle(E, G, D) == angle(E, center(Circle(C, D, E)), D) mod 360
By angle_to_center on H, I, A, c we get 2 * angle(H, I, A) == angle(H, center(c), A) mod 360
By angle_to_center on E, D, A, c we get 2 * angle(E, D, A) == angle(E, center(c), A) mod 360
By sas_anti_similarity on D, G, F, C, G, A we get anti_similar_triangles(A, C, G, F, D, G)
By sas_anti_similarity on A, G, C, F, G, D we get anti_similar_triangles(A, C, G, F, D, G)
By sas_anti_similarity on E, G, F, C, G, B we get anti_similar_triangles(B, C, G, F, E, G)
By sas_anti_similarity on F, G, D, A, G, C we get anti_similar_triangles(A, C, G, F, D, G)
By sas_anti_similarity on C, G, B, E, G, F we get anti_similar_triangles(B, C, G, F, E, G)
By sas_anti_similarity on F, G, E, B, G, C we get anti_similar_triangles(B, C, G, F, E, G)
By sas_anti_similarity on B, G, C, F, G, E we get anti_similar_triangles(B, C, G, F, E, G)
By sas_anti_similarity on C, G, A, D, G, F we get anti_similar_triangles(A, C, G, F, D, G)
By anti_similar_triangle_basic_properties on E, C, D, B, C, A we get angle(E, C, D) == 0 - angle(B, C, A) mod 360, angle(C, D, E) == 0 - angle(C, A, B) mod 360, angle(D, E, C) == 0 - angle(A, B, C) mod 360, log(distance(B, C)) + log(distance(C, D)) == log(distance(C, E)) + log(distance(A, C)), log(distance(A, C)) + log(distance(D, E)) == log(distance(C, D)) + log(distance(A, B)), log(distance(A, B)) + log(distance(C, E)) == log(distance(D, E)) + log(distance(B, C))
By external_angle_bisector_definition_v0_r on E, B, D, F we get Line(B, F) == external_angle_bisector(D, F, E)
By concyclic_definition_0 on G, F, A, E we get E in Circle(A, F, G)
By anti_similar_triangle_basic_properties on D, C, E, A, C, B we get angle(D, C, E) == 0 - angle(A, C, B) mod 360, angle(C, E, D) == 0 - angle(C, B, A) mod 360, angle(E, D, C) == 0 - angle(B, A, C) mod 360, log(distance(A, C)) + log(distance(C, E)) == log(distance(C, D)) + log(distance(B, C)), log(distance(B, C)) + log(distance(D, E)) == log(distance(C, E)) + log(distance(A, B)), log(distance(A, B)) + log(distance(C, D)) == log(distance(D, E)) + log(distance(A, C))
By anti_similar_triangle_basic_properties on C, D, F, C, G, B we get angle(C, D, F) == 0 - angle(C, G, B) mod 360, angle(D, F, C) == 0 - angle(G, B, C) mod 360, angle(F, C, D) == 0 - angle(B, C, G) mod 360, log(distance(C, D)) + log(distance(B, G)) == log(distance(C, G)) + log(distance(D, F)), log(distance(B, G)) + log(distance(C, F)) == log(distance(D, F)) + log(distance(B, C)), log(distance(B, C)) + log(distance(C, D)) == log(distance(C, F)) + log(distance(C, G))
By concyclic_definition_0 on A, G, E, F we get F in Circle(A, E, G)
By anti_similar_triangle_basic_properties on G, A, B, G, E, D we get angle(G, A, B) == 0 - angle(G, E, D) mod 360, angle(A, B, G) == 0 - angle(E, D, G) mod 360, angle(B, G, A) == 0 - angle(D, G, E) mod 360, log(distance(A, G)) + log(distance(D, E)) == log(distance(E, G)) + log(distance(A, B)), log(distance(A, B)) + log(distance(D, G)) == log(distance(D, E)) + log(distance(B, G)), log(distance(B, G)) + log(distance(E, G)) == log(distance(D, G)) + log(distance(A, G))
By anti_similar_triangle_basic_properties on E, D, A, G, C, A we get angle(E, D, A) == 0 - angle(G, C, A) mod 360, angle(D, A, E) == 0 - angle(C, A, G) mod 360, angle(A, E, D) == 0 - angle(A, G, C) mod 360, log(distance(C, G)) + log(distance(A, D)) == log(distance(D, E)) + log(distance(A, C)), log(distance(A, C)) + log(distance(A, E)) == log(distance(A, D)) + log(distance(A, G)), log(distance(A, E)) + log(distance(C, G)) == log(distance(A, G)) + log(distance(D, E))
By external_angle_bisector_definition_v0_r on D, B, F, E we get Line(B, E) == external_angle_bisector(D, E, F)
By concyclic_definition_0 on F, A, E, G we get G in Circle(A, E, F)
By anti_similar_triangle_basic_properties on F, E, A, C, B, A we get angle(F, E, A) == 0 - angle(C, B, A) mod 360, angle(E, A, F) == 0 - angle(B, A, C) mod 360, angle(A, F, E) == 0 - angle(A, C, B) mod 360, log(distance(B, C)) + log(distance(A, E)) == log(distance(E, F)) + log(distance(A, B)), log(distance(A, B)) + log(distance(A, F)) == log(distance(A, E)) + log(distance(A, C)), log(distance(A, C)) + log(distance(E, F)) == log(distance(A, F)) + log(distance(B, C))
By anti_similar_triangle_basic_properties on B, C, A, E, F, A we get angle(B, C, A) == 0 - angle(E, F, A) mod 360, angle(C, A, B) == 0 - angle(F, A, E) mod 360, angle(A, B, C) == 0 - angle(A, E, F) mod 360, log(distance(B, C)) + log(distance(A, F)) == log(distance(E, F)) + log(distance(A, C)), log(distance(A, C)) + log(distance(A, E)) == log(distance(A, F)) + log(distance(A, B)), log(distance(A, B)) + log(distance(E, F)) == log(distance(A, E)) + log(distance(B, C))
By anti_similar_triangle_basic_properties on A, D, F, A, B, G we get angle(A, D, F) == 0 - angle(A, B, G) mod 360, angle(D, F, A) == 0 - angle(B, G, A) mod 360, angle(F, A, D) == 0 - angle(G, A, B) mod 360, log(distance(A, B)) + log(distance(D, F)) == log(distance(A, D)) + log(distance(B, G)), log(distance(B, G)) + log(distance(A, F)) == log(distance(D, F)) + log(distance(A, G)), log(distance(A, F)) + log(distance(A, B)) == log(distance(A, G)) + log(distance(A, D))
By external_angle_bisector_definition_v0_r on A, B, A, I we get Line(B, I) == external_angle_bisector(A, I, A)
By external_angle_bisector_definition_v0_r on A, B, A, H we get Line(B, H) == external_angle_bisector(A, H, A)
By anti_similar_triangle_basic_properties on E, F, C, G, A, C we get angle(E, F, C) == 0 - angle(G, A, C) mod 360, angle(F, C, E) == 0 - angle(A, C, G) mod 360, angle(C, E, F) == 0 - angle(C, G, A) mod 360, log(distance(A, G)) + log(distance(C, F)) == log(distance(E, F)) + log(distance(A, C)), log(distance(A, C)) + log(distance(C, E)) == log(distance(C, F)) + log(distance(C, G)), log(distance(C, E)) + log(distance(A, G)) == log(distance(C, G)) + log(distance(E, F))
By external_angle_bisector_definition_v0_r on D, A, E, F we get Line(A, F) == external_angle_bisector(D, F, E)
By internal_angle_bisector_definition_v0_r on D, C, E, F we get Line(C, F) == internal_angle_bisector(D, F, E)
By anti_similar_triangle_basic_properties on G, B, A, F, D, A we get angle(G, B, A) == 0 - angle(F, D, A) mod 360, angle(B, A, G) == 0 - angle(D, A, F) mod 360, angle(A, G, B) == 0 - angle(A, F, D) mod 360, log(distance(B, G)) + log(distance(A, D)) == log(distance(D, F)) + log(distance(A, B)), log(distance(A, B)) + log(distance(A, F)) == log(distance(A, D)) + log(distance(A, G)), log(distance(A, F)) + log(distance(B, G)) == log(distance(A, G)) + log(distance(D, F))
By anti_similar_triangle_basic_properties on D, F, B, A, C, B we get angle(D, F, B) == 0 - angle(A, C, B) mod 360, angle(F, B, D) == 0 - angle(C, B, A) mod 360, angle(B, D, F) == 0 - angle(B, A, C) mod 360, log(distance(A, C)) + log(distance(B, F)) == log(distance(D, F)) + log(distance(B, C)), log(distance(B, C)) + log(distance(B, D)) == log(distance(B, F)) + log(distance(A, B)), log(distance(A, B)) + log(distance(D, F)) == log(distance(B, D)) + log(distance(A, C))
By concyclic_definition_0 on B, G, F, D we get D in Circle(B, F, G)
By anti_similar_triangle_basic_properties on E, C, F, G, C, A we get angle(E, C, F) == 0 - angle(G, C, A) mod 360, angle(C, F, E) == 0 - angle(C, A, G) mod 360, angle(F, E, C) == 0 - angle(A, G, C) mod 360, log(distance(C, E)) + log(distance(A, C)) == log(distance(C, G)) + log(distance(C, F)), log(distance(A, C)) + log(distance(E, F)) == log(distance(C, F)) + log(distance(A, G)), log(distance(A, G)) + log(distance(C, E)) == log(distance(E, F)) + log(distance(C, G))
By concyclic_definition_0 on G, F, D, B we get B in Circle(D, F, G)
By concyclic_definition_0 on F, B, D, G we get G in Circle(B, D, F)
By anti_similar_triangle_basic_properties on E, D, B, C, G, B we get angle(E, D, B) == 0 - angle(C, G, B) mod 360, angle(D, B, E) == 0 - angle(G, B, C) mod 360, angle(B, E, D) == 0 - angle(B, C, G) mod 360, log(distance(C, G)) + log(distance(B, D)) == log(distance(D, E)) + log(distance(B, G)), log(distance(B, D)) + log(distance(B, C)) == log(distance(B, G)) + log(distance(B, E)), log(distance(B, C)) + log(distance(D, E)) == log(distance(B, E)) + log(distance(C, G))
By internal_angle_bisector_definition_v0_r on E, B, F, D we get Line(B, D) == internal_angle_bisector(E, D, F)
By concyclic_definition_0 on F, G, E, A we get A in Circle(E, F, G)
By anti_similar_triangle_basic_properties on B, G, C, B, D, E we get angle(B, G, C) == 0 - angle(B, D, E) mod 360, angle(G, C, B) == 0 - angle(D, E, B) mod 360, angle(C, B, G) == 0 - angle(E, B, D) mod 360, log(distance(B, D)) + log(distance(C, G)) == log(distance(B, G)) + log(distance(D, E)), log(distance(C, G)) + log(distance(B, E)) == log(distance(D, E)) + log(distance(B, C)), log(distance(B, C)) + log(distance(B, D)) == log(distance(B, E)) + log(distance(B, G))
By anti_similar_triangle_basic_properties on B, G, C, F, D, C we get angle(B, G, C) == 0 - angle(F, D, C) mod 360, angle(G, C, B) == 0 - angle(D, C, F) mod 360, angle(C, B, G) == 0 - angle(C, F, D) mod 360, log(distance(B, G)) + log(distance(C, D)) == log(distance(D, F)) + log(distance(C, G)), log(distance(C, D)) + log(distance(B, C)) == log(distance(C, G)) + log(distance(C, F)), log(distance(B, C)) + log(distance(D, F)) == log(distance(C, F)) + log(distance(B, G))
By anti_similar_triangle_basic_properties on A, G, B, E, F, B we get angle(A, G, B) == 0 - angle(E, F, B) mod 360, angle(G, B, A) == 0 - angle(F, B, E) mod 360, angle(B, A, G) == 0 - angle(B, E, F) mod 360, log(distance(A, G)) + log(distance(B, F)) == log(distance(E, F)) + log(distance(B, G)), log(distance(B, F)) + log(distance(A, B)) == log(distance(B, G)) + log(distance(B, E)), log(distance(A, B)) + log(distance(E, F)) == log(distance(B, E)) + log(distance(A, G))
By external_angle_bisector_definition_v0_r on B, A, B, H we get Line(A, H) == external_angle_bisector(B, H, B)
By external_angle_bisector_definition_v0_r on E, A, F, D we get Line(A, D) == external_angle_bisector(E, D, F)
By anti_similar_triangle_basic_properties on G, A, C, E, A, D we get angle(G, A, C) == 0 - angle(E, A, D) mod 360, angle(A, C, G) == 0 - angle(A, D, E) mod 360, angle(C, G, A) == 0 - angle(D, E, A) mod 360, log(distance(A, E)) + log(distance(A, C)) == log(distance(A, G)) + log(distance(A, D)), log(distance(A, C)) + log(distance(D, E)) == log(distance(A, D)) + log(distance(C, G)), log(distance(C, G)) + log(distance(A, E)) == log(distance(D, E)) + log(distance(A, G))
By anti_similar_triangle_basic_properties on F, D, B, C, A, B we get angle(F, D, B) == 0 - angle(C, A, B) mod 360, angle(D, B, F) == 0 - angle(A, B, C) mod 360, angle(B, F, D) == 0 - angle(B, C, A) mod 360, log(distance(A, C)) + log(distance(B, D)) == log(distance(D, F)) + log(distance(A, B)), log(distance(A, B)) + log(distance(B, F)) == log(distance(B, D)) + log(distance(B, C)), log(distance(B, C)) + log(distance(D, F)) == log(distance(B, F)) + log(distance(A, C))
By anti_similar_triangle_basic_properties on B, A, G, D, E, G we get angle(B, A, G) == 0 - angle(D, E, G) mod 360, angle(A, G, B) == 0 - angle(E, G, D) mod 360, angle(G, B, A) == 0 - angle(G, D, E) mod 360, log(distance(A, B)) + log(distance(E, G)) == log(distance(D, E)) + log(distance(A, G)), log(distance(A, G)) + log(distance(D, G)) == log(distance(E, G)) + log(distance(B, G)), log(distance(B, G)) + log(distance(D, E)) == log(distance(D, G)) + log(distance(A, B))
By internal_angle_bisector_definition_v0_r on E, C, F, D we get Line(C, D) == internal_angle_bisector(E, D, F)
By anti_similar_triangle_basic_properties on E, B, F, A, B, G we get angle(E, B, F) == 0 - angle(A, B, G) mod 360, angle(B, F, E) == 0 - angle(B, G, A) mod 360, angle(F, E, B) == 0 - angle(G, A, B) mod 360, log(distance(A, B)) + log(distance(B, F)) == log(distance(B, E)) + log(distance(B, G)), log(distance(B, F)) + log(distance(A, G)) == log(distance(B, G)) + log(distance(E, F)), log(distance(A, G)) + log(distance(B, E)) == log(distance(E, F)) + log(distance(A, B))
By concyclic_definition_0 on G, B, D, F we get F in Circle(B, D, G)
By external_angle_bisector_definition_v0_r on B, A, B, I we get Line(A, I) == external_angle_bisector(B, I, B)
By internal_angle_bisector_definition_v0_r on D, C, F, E we get Line(C, E) == internal_angle_bisector(D, E, F)
By internal_angle_bisector_definition_v0_r on F, A, D, E we get Line(A, E) == internal_angle_bisector(D, E, F)
By concyclic_definition_1 on D, F, G, B we get Circle(B, F, G) == Circle(D, F, G)
By similar_triangle_basic_properties on G, E, D, F, E, B we get angle(F, E, B) == angle(G, E, D) mod 360, angle(E, B, F) == angle(E, D, G) mod 360, angle(B, F, E) == angle(D, G, E) mod 360, log(distance(E, F)) + log(distance(D, E)) == log(distance(E, G)) + log(distance(B, E)), log(distance(B, E)) + log(distance(D, G)) == log(distance(D, E)) + log(distance(B, F)), log(distance(B, F)) + log(distance(E, G)) == log(distance(D, G)) + log(distance(E, F))
By concyclic_definition_1 on F, G, B, D we get Circle(B, D, G) == Circle(B, F, G)
By anti_similar_triangle_basic_properties on D, C, I, H, C, B we get angle(D, C, I) == 0 - angle(H, C, B) mod 360, angle(C, I, D) == 0 - angle(C, B, H) mod 360, angle(I, D, C) == 0 - angle(B, H, C) mod 360, log(distance(C, D)) + log(distance(B, C)) == log(distance(C, H)) + log(distance(C, I)), log(distance(B, C)) + log(distance(D, I)) == log(distance(C, I)) + log(distance(B, H)), log(distance(B, H)) + log(distance(C, D)) == log(distance(D, I)) + log(distance(C, H))
By anti_similar_triangle_basic_properties on D, C, H, I, C, B we get angle(D, C, H) == 0 - angle(I, C, B) mod 360, angle(C, H, D) == 0 - angle(C, B, I) mod 360, angle(H, D, C) == 0 - angle(B, I, C) mod 360, log(distance(C, D)) + log(distance(B, C)) == log(distance(C, I)) + log(distance(C, H)), log(distance(B, C)) + log(distance(D, H)) == log(distance(C, H)) + log(distance(B, I)), log(distance(B, I)) + log(distance(C, D)) == log(distance(D, H)) + log(distance(C, I))
By similar_triangle_basic_properties on E, B, F, A, D, F we get angle(A, D, F) == angle(E, B, F) mod 360, angle(B, F, E) == angle(D, F, A) mod 360, angle(F, A, D) == angle(F, E, B) mod 360, log(distance(A, D)) + log(distance(B, F)) == log(distance(B, E)) + log(distance(D, F)), log(distance(B, F)) + log(distance(A, F)) == log(distance(D, F)) + log(distance(E, F)), log(distance(A, F)) + log(distance(B, E)) == log(distance(E, F)) + log(distance(A, D))
By anti_similar_triangle_basic_properties on B, C, H, I, C, D we get angle(B, C, H) == 0 - angle(I, C, D) mod 360, angle(C, H, B) == 0 - angle(C, D, I) mod 360, angle(H, B, C) == 0 - angle(D, I, C) mod 360, log(distance(B, C)) + log(distance(C, D)) == log(distance(C, I)) + log(distance(C, H)), log(distance(C, D)) + log(distance(B, H)) == log(distance(C, H)) + log(distance(D, I)), log(distance(B, H)) + log(distance(C, I)) == log(distance(D, I)) + log(distance(B, C))
By similar_triangle_basic_properties on E, F, B, E, G, D we get angle(E, F, B) == angle(E, G, D) mod 360, angle(F, B, E) == angle(G, D, E) mod 360, angle(B, E, F) == angle(D, E, G) mod 360, log(distance(E, F)) + log(distance(D, G)) == log(distance(E, G)) + log(distance(B, F)), log(distance(B, F)) + log(distance(D, E)) == log(distance(D, G)) + log(distance(B, E)), log(distance(B, E)) + log(distance(E, G)) == log(distance(D, E)) + log(distance(E, F))
By concyclic_definition_1 on D, F, B, G we get Circle(B, D, F) == Circle(B, F, G)
By similar_triangle_basic_properties on B, D, E, F, D, C we get angle(B, D, E) == angle(F, D, C) mod 360, angle(D, C, F) == angle(D, E, B) mod 360, angle(C, F, D) == angle(E, B, D) mod 360, log(distance(B, D)) + log(distance(C, D)) == log(distance(D, F)) + log(distance(D, E)), log(distance(C, D)) + log(distance(B, E)) == log(distance(D, E)) + log(distance(C, F)), log(distance(B, E)) + log(distance(D, F)) == log(distance(C, F)) + log(distance(B, D))
By similar_triangle_basic_properties on G, E, D, F, A, D we get angle(F, A, D) == angle(G, E, D) mod 360, angle(A, D, F) == angle(E, D, G) mod 360, angle(D, F, A) == angle(D, G, E) mod 360, log(distance(A, F)) + log(distance(D, E)) == log(distance(E, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(D, G)) == log(distance(D, E)) + log(distance(D, F)), log(distance(D, F)) + log(distance(E, G)) == log(distance(D, G)) + log(distance(A, F))
By similar_triangle_basic_properties on D, B, F, A, E, F we get angle(A, E, F) == angle(D, B, F) mod 360, angle(B, F, D) == angle(E, F, A) mod 360, angle(F, A, E) == angle(F, D, B) mod 360, log(distance(A, E)) + log(distance(B, F)) == log(distance(B, D)) + log(distance(E, F)), log(distance(B, F)) + log(distance(A, F)) == log(distance(E, F)) + log(distance(D, F)), log(distance(A, F)) + log(distance(B, D)) == log(distance(D, F)) + log(distance(A, E))
By similar_triangle_basic_properties on D, B, F, D, E, C we get angle(D, B, F) == angle(D, E, C) mod 360, angle(B, F, D) == angle(E, C, D) mod 360, angle(C, D, E) == angle(F, D, B) mod 360, log(distance(B, D)) + log(distance(C, E)) == log(distance(D, E)) + log(distance(B, F)), log(distance(B, F)) + log(distance(C, D)) == log(distance(C, E)) + log(distance(D, F)), log(distance(C, D)) + log(distance(B, D)) == log(distance(D, F)) + log(distance(D, E))
By similar_triangle_basic_properties on E, A, D, E, F, C we get angle(E, A, D) == angle(E, F, C) mod 360, angle(A, D, E) == angle(F, C, E) mod 360, angle(C, E, F) == angle(D, E, A) mod 360, log(distance(A, E)) + log(distance(C, F)) == log(distance(E, F)) + log(distance(A, D)), log(distance(A, D)) + log(distance(C, E)) == log(distance(C, F)) + log(distance(D, E)), log(distance(C, E)) + log(distance(A, E)) == log(distance(D, E)) + log(distance(E, F))
By similar_triangle_basic_properties on C, E, D, F, B, D we get angle(C, E, D) == angle(F, B, D) mod 360, angle(B, D, F) == angle(E, D, C) mod 360, angle(D, C, E) == angle(D, F, B) mod 360, log(distance(B, F)) + log(distance(D, E)) == log(distance(C, E)) + log(distance(B, D)), log(distance(B, D)) + log(distance(C, D)) == log(distance(D, E)) + log(distance(D, F)), log(distance(C, D)) + log(distance(B, F)) == log(distance(D, F)) + log(distance(C, E))
By concyclic_definition_1 on G, F, A, E we get Circle(A, E, F) == Circle(A, F, G)
By concyclic_definition_1 on B, D, F, G we get Circle(B, D, F) == Circle(D, F, G)
By anti_similar_triangle_basic_properties on H, C, D, B, C, I we get angle(H, C, D) == 0 - angle(B, C, I) mod 360, angle(C, D, H) == 0 - angle(C, I, B) mod 360, angle(D, H, C) == 0 - angle(I, B, C) mod 360, log(distance(B, C)) + log(distance(C, D)) == log(distance(C, H)) + log(distance(C, I)), log(distance(C, D)) + log(distance(B, I)) == log(distance(C, I)) + log(distance(D, H)), log(distance(B, I)) + log(distance(C, H)) == log(distance(D, H)) + log(distance(B, C))
By similar_triangle_basic_properties on E, F, B, A, F, D we get angle(A, F, D) == angle(E, F, B) mod 360, angle(F, B, E) == angle(F, D, A) mod 360, angle(B, E, F) == angle(D, A, F) mod 360, log(distance(A, F)) + log(distance(B, F)) == log(distance(E, F)) + log(distance(D, F)), log(distance(B, F)) + log(distance(A, D)) == log(distance(D, F)) + log(distance(B, E)), log(distance(A, D)) + log(distance(E, F)) == log(distance(B, E)) + log(distance(A, F))
By concyclic_definition_1 on A, E, G, F we get Circle(A, E, G) == Circle(E, F, G)
By concyclic_definition_1 on G, B, D, F we get Circle(B, D, F) == Circle(B, D, G)
By similar_triangle_basic_properties on C, F, E, D, A, E we get angle(C, F, E) == angle(D, A, E) mod 360, angle(A, E, D) == angle(F, E, C) mod 360, angle(E, C, F) == angle(E, D, A) mod 360, log(distance(A, D)) + log(distance(E, F)) == log(distance(C, F)) + log(distance(A, E)), log(distance(A, E)) + log(distance(C, E)) == log(distance(E, F)) + log(distance(D, E)), log(distance(C, E)) + log(distance(A, D)) == log(distance(D, E)) + log(distance(C, F))
By similar_triangle_basic_properties on B, D, F, E, A, F we get angle(B, D, F) == angle(E, A, F) mod 360, angle(A, F, E) == angle(D, F, B) mod 360, angle(F, B, D) == angle(F, E, A) mod 360, log(distance(A, E)) + log(distance(D, F)) == log(distance(B, D)) + log(distance(A, F)), log(distance(A, F)) + log(distance(B, F)) == log(distance(D, F)) + log(distance(E, F)), log(distance(B, F)) + log(distance(A, E)) == log(distance(E, F)) + log(distance(B, D))
By similar_triangle_basic_properties on E, F, A, E, C, D we get angle(E, C, D) == angle(E, F, A) mod 360, angle(C, D, E) == angle(F, A, E) mod 360, angle(A, E, F) == angle(D, E, C) mod 360, log(distance(C, E)) + log(distance(A, F)) == log(distance(E, F)) + log(distance(C, D)), log(distance(A, F)) + log(distance(D, E)) == log(distance(C, D)) + log(distance(A, E)), log(distance(A, E)) + log(distance(C, E)) == log(distance(D, E)) + log(distance(E, F))
By similar_triangle_basic_properties on C, D, F, E, D, B we get angle(C, D, F) == angle(E, D, B) mod 360, angle(D, B, E) == angle(D, F, C) mod 360, angle(B, E, D) == angle(F, C, D) mod 360, log(distance(C, D)) + log(distance(B, D)) == log(distance(D, E)) + log(distance(D, F)), log(distance(B, D)) + log(distance(C, F)) == log(distance(D, F)) + log(distance(B, E)), log(distance(B, E)) + log(distance(C, D)) == log(distance(C, F)) + log(distance(D, E))
By similar_triangle_basic_properties on F, E, A, C, E, D we get angle(C, E, D) == angle(F, E, A) mod 360, angle(E, A, F) == angle(E, D, C) mod 360, angle(A, F, E) == angle(D, C, E) mod 360, log(distance(C, E)) + log(distance(A, E)) == log(distance(E, F)) + log(distance(D, E)), log(distance(A, E)) + log(distance(C, D)) == log(distance(D, E)) + log(distance(A, F)), log(distance(A, F)) + log(distance(C, E)) == log(distance(C, D)) + log(distance(E, F))
By similar_triangle_basic_properties on G, D, E, F, D, A we get angle(F, D, A) == angle(G, D, E) mod 360, angle(D, A, F) == angle(D, E, G) mod 360, angle(A, F, D) == angle(E, G, D) mod 360, log(distance(D, F)) + log(distance(D, E)) == log(distance(D, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(E, G)) == log(distance(D, E)) + log(distance(A, F)), log(distance(A, F)) + log(distance(D, G)) == log(distance(E, G)) + log(distance(D, F))
By concyclic_definition_1 on E, F, G, A we get Circle(A, F, G) == Circle(E, F, G)
By concyclic_definition_1 on E, G, A, F we get Circle(A, E, G) == Circle(A, F, G)
By concyclic_definition_1 on F, D, G, B we get Circle(B, D, G) == Circle(D, F, G)
By concyclic_definition_1 on G, F, E, A we get Circle(A, E, F) == Circle(E, F, G)
By concyclic_definition_1 on G, E, A, F we get Circle(A, E, F) == Circle(A, E, G)
By sas_anti_similarity on I, C, G, F, C, H we get anti_similar_triangles(C, F, H, C, I, G)
By sas_anti_similarity on F, C, H, I, C, G we get anti_similar_triangles(C, F, H, C, I, G)
By sas_anti_similarity on H, C, G, F, C, I we get anti_similar_triangles(C, F, I, C, H, G)
By sas_anti_similarity on I, C, F, G, C, H we get anti_similar_triangles(C, F, I, C, H, G)
By sas_anti_similarity on F, C, I, H, C, G we get anti_similar_triangles(C, F, I, C, H, G)
By sas_anti_similarity on G, C, I, H, C, F we get anti_similar_triangles(C, F, H, C, I, G)
By sas_anti_similarity on G, C, H, I, C, F we get anti_similar_triangles(C, F, I, C, H, G)
By sas_anti_similarity on H, C, F, G, C, I we get anti_similar_triangles(C, F, H, C, I, G)
By concurrent_sufficient_conditions on Line(A, H), Line(B, H), k we get concurrent(k, Line(A, H), Line(B, H))
By concurrent_sufficient_conditions on Line(E, H), Line(E, F), h we get concurrent(h, Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on g, Line(D, F), Line(D, I) we get concurrent(g, Line(D, F), Line(D, I))
By concyclic_sufficient_conditions_v1 on D, center(Circle(C, D, E)), E, center(c) we get concyclic(D, E, center(c), center(Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, I), j, Line(E, F) we get concurrent(j, Line(E, F), Line(E, I))
By concurrent_sufficient_conditions on k, Line(B, I), Line(E, I) we get concurrent(k, Line(B, I), Line(E, I))
By concurrent_sufficient_conditions on Line(E, H), Line(E, F), Line(E, I) we get concurrent(Line(E, F), Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(D, F), i, g we get concurrent(g, i, Line(D, F))
By concurrent_sufficient_conditions on g, Line(B, H), f we get concurrent(f, g, Line(B, H))
By concurrent_sufficient_conditions on Line(E, F), j, Line(D, E) we get concurrent(j, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on j, Line(E, F), Line(D, E) we get concurrent(j, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(A, H), k, Line(B, H) we get concurrent(k, Line(A, H), Line(B, H))
By concurrent_sufficient_conditions on Line(D, H), Line(B, H), Line(E, H) we get concurrent(Line(B, H), Line(D, H), Line(E, H))
By concurrent_sufficient_conditions on g, f, Line(B, I) we get concurrent(f, g, Line(B, I))
By concurrent_sufficient_conditions on h, Line(E, F), Line(E, I) we get concurrent(h, Line(E, F), Line(E, I))
By concurrent_sufficient_conditions on Line(D, H), Line(B, H), Line(A, H) we get concurrent(Line(A, H), Line(B, H), Line(D, H))
By concurrent_sufficient_conditions on Line(B, H), Line(D, H), Line(E, H) we get concurrent(Line(B, H), Line(D, H), Line(E, H))
By concurrent_sufficient_conditions on Line(B, I), Line(D, I), Line(E, I) we get concurrent(Line(B, I), Line(D, I), Line(E, I))
By concurrent_sufficient_conditions on Line(D, E), i, Line(D, F) we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(B, H), j, g we get concurrent(g, j, Line(B, H))
By concurrent_sufficient_conditions on i, g, Line(D, F) we get concurrent(g, i, Line(D, F))
By concurrent_sufficient_conditions on Line(D, E), g, Line(D, F) we get concurrent(g, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(B, I), Line(A, I), Line(E, I) we get concurrent(Line(A, I), Line(B, I), Line(E, I))
By concurrent_sufficient_conditions on Line(D, F), Line(D, H), Line(D, E) we get concurrent(Line(D, E), Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on Line(E, I), Line(D, I), Line(B, I) we get concurrent(Line(B, I), Line(D, I), Line(E, I))
By concurrent_sufficient_conditions on Line(D, E), Line(D, F), Line(D, H) we get concurrent(Line(D, E), Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on Line(E, F), j, h we get concurrent(h, j, Line(E, F))
By concurrent_sufficient_conditions on Line(E, F), h, Line(E, H) we get concurrent(h, Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(E, F), Line(E, H), h we get concurrent(h, Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on f, j, Line(B, I) we get concurrent(f, j, Line(B, I))
By concurrent_sufficient_conditions on Line(E, F), Line(C, F), Line(D, F) we get concurrent(Line(C, F), Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(E, H), Line(E, I), Line(E, F) we get concurrent(Line(E, F), Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(E, I), Line(B, I), Line(A, I) we get concurrent(Line(A, I), Line(B, I), Line(E, I))
By concurrent_sufficient_conditions on Line(C, F), Line(D, F), f we get concurrent(f, Line(C, F), Line(D, F))
By concurrent_sufficient_conditions on h, Line(E, H), Line(E, F) we get concurrent(h, Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(B, H), Line(B, I), f we get concurrent(f, Line(B, H), Line(B, I))
By concurrent_sufficient_conditions on Line(D, I), Line(D, E), Line(D, F) we get concurrent(Line(D, E), Line(D, F), Line(D, I))
By concurrent_sufficient_conditions on Line(E, I), Line(E, H), Line(E, F) we get concurrent(Line(E, F), Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(D, F), Line(D, I), g we get concurrent(g, Line(D, F), Line(D, I))
By concurrent_sufficient_conditions on Line(B, H), g, Line(B, I) we get concurrent(g, Line(B, H), Line(B, I))
By concurrent_sufficient_conditions on Line(D, F), Line(C, F), f we get concurrent(f, Line(C, F), Line(D, F))
By concurrent_sufficient_conditions on Line(B, I), Line(E, I), Line(D, I) we get concurrent(Line(B, I), Line(D, I), Line(E, I))
By concurrent_sufficient_conditions on Line(B, H), f, Line(B, I) we get concurrent(f, Line(B, H), Line(B, I))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), h we get concurrent(h, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), j we get concurrent(j, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on f, Line(C, F), Line(E, F) we get concurrent(f, Line(C, F), Line(E, F))
By concurrent_sufficient_conditions on Line(D, E), Line(D, F), i we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(B, I), Line(D, I), k we get concurrent(k, Line(B, I), Line(D, I))
By concurrent_sufficient_conditions on j, Line(B, I), f we get concurrent(f, j, Line(B, I))
By concurrent_sufficient_conditions on Line(D, F), f, Line(C, F) we get concurrent(f, Line(C, F), Line(D, F))
By concurrent_sufficient_conditions on Line(D, H), Line(A, H), Line(B, H) we get concurrent(Line(A, H), Line(B, H), Line(D, H))
By concurrent_sufficient_conditions on Line(B, I), Line(A, I), Line(D, I) we get concurrent(Line(A, I), Line(B, I), Line(D, I))
By concurrent_sufficient_conditions on Line(D, E), Line(E, H), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(D, H), Line(B, H), k we get concurrent(k, Line(B, H), Line(D, H))
By concurrent_sufficient_conditions on h, Line(E, F), Line(D, E) we get concurrent(h, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(C, F), Line(E, F), Line(D, F) we get concurrent(Line(C, F), Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on j, f, Line(B, I) we get concurrent(f, j, Line(B, I))
By concurrent_sufficient_conditions on Line(D, F), Line(D, H), Line(D, I) we get concurrent(Line(D, F), Line(D, H), Line(D, I))
By concurrent_sufficient_conditions on j, h, Line(E, F) we get concurrent(h, j, Line(E, F))
By concurrent_sufficient_conditions on h, j, Line(E, F) we get concurrent(h, j, Line(E, F))
By concurrent_sufficient_conditions on Line(D, E), Line(D, F), Line(D, I) we get concurrent(Line(D, E), Line(D, F), Line(D, I))
By concurrent_sufficient_conditions on h, Line(E, F), j we get concurrent(h, j, Line(E, F))
By concurrent_sufficient_conditions on Line(D, I), Line(D, H), Line(D, F) we get concurrent(Line(D, F), Line(D, H), Line(D, I))
By concurrent_sufficient_conditions on Line(D, F), Line(D, E), i we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(E, F), Line(C, F), f we get concurrent(f, Line(C, F), Line(E, F))
By concurrent_sufficient_conditions on Line(D, H), Line(D, F), Line(D, E) we get concurrent(Line(D, E), Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on g, Line(D, E), Line(D, F) we get concurrent(g, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on k, Line(B, H), Line(D, H) we get concurrent(k, Line(B, H), Line(D, H))
By concurrent_sufficient_conditions on Line(A, I), k, Line(B, I) we get concurrent(k, Line(A, I), Line(B, I))
By concurrent_sufficient_conditions on Line(D, E), Line(D, I), Line(D, F) we get concurrent(Line(D, E), Line(D, F), Line(D, I))
By concurrent_sufficient_conditions on Line(C, F), Line(D, F), Line(E, F) we get concurrent(Line(C, F), Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(D, H), Line(D, I), Line(D, F) we get concurrent(Line(D, F), Line(D, H), Line(D, I))
By concurrent_sufficient_conditions on f, Line(D, F), Line(E, F) we get concurrent(f, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(B, H), k, Line(D, H) we get concurrent(k, Line(B, H), Line(D, H))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), Line(E, I) we get concurrent(Line(D, E), Line(E, F), Line(E, I))
By concurrent_sufficient_conditions on j, g, Line(B, H) we get concurrent(g, j, Line(B, H))
By concurrent_sufficient_conditions on Line(B, I), f, g we get concurrent(f, g, Line(B, I))
By concurrent_sufficient_conditions on Line(B, H), Line(E, H), Line(A, H) we get concurrent(Line(A, H), Line(B, H), Line(E, H))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), f we get concurrent(f, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on k, Line(A, H), Line(B, H) we get concurrent(k, Line(A, H), Line(B, H))
By concurrent_sufficient_conditions on Line(D, E), h, Line(E, F) we get concurrent(h, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on g, Line(D, F), Line(D, H) we get concurrent(g, Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on Line(B, I), f, j we get concurrent(f, j, Line(B, I))
By concurrent_sufficient_conditions on Line(B, I), k, Line(D, I) we get concurrent(k, Line(B, I), Line(D, I))
By concurrent_sufficient_conditions on j, Line(B, H), Line(B, I) we get concurrent(j, Line(B, H), Line(B, I))
By concurrent_sufficient_conditions on k, Line(B, H), Line(A, H) we get concurrent(k, Line(A, H), Line(B, H))
By concurrent_sufficient_conditions on Line(B, H), j, Line(B, I) we get concurrent(j, Line(B, H), Line(B, I))
By concurrent_sufficient_conditions on Line(B, H), f, j we get concurrent(f, j, Line(B, H))
By concurrent_sufficient_conditions on Line(D, F), Line(D, H), g we get concurrent(g, Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on g, Line(D, I), Line(D, F) we get concurrent(g, Line(D, F), Line(D, I))
By concurrent_sufficient_conditions on Line(B, H), Line(E, H), k we get concurrent(k, Line(B, H), Line(E, H))
By concurrent_sufficient_conditions on Line(E, I), k, Line(B, I) we get concurrent(k, Line(B, I), Line(E, I))
By concurrent_sufficient_conditions on Line(D, F), g, Line(D, I) we get concurrent(g, Line(D, F), Line(D, I))
By concurrent_sufficient_conditions on Line(C, F), f, Line(D, F) we get concurrent(f, Line(C, F), Line(D, F))
By concurrent_sufficient_conditions on j, Line(E, I), Line(E, F) we get concurrent(j, Line(E, F), Line(E, I))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), Line(C, F) we get concurrent(Line(C, F), Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(D, F), Line(D, H), i we get concurrent(i, Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on Line(D, F), Line(D, I), i we get concurrent(i, Line(D, F), Line(D, I))
By concurrent_sufficient_conditions on Line(B, I), Line(B, H), j we get concurrent(j, Line(B, H), Line(B, I))
By concurrent_sufficient_conditions on Line(B, I), k, Line(A, I) we get concurrent(k, Line(A, I), Line(B, I))
By concurrent_sufficient_conditions on Line(B, I), j, g we get concurrent(g, j, Line(B, I))
By concurrent_sufficient_conditions on Line(E, F), Line(E, H), Line(E, I) we get concurrent(Line(E, F), Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on j, Line(B, I), Line(B, H) we get concurrent(j, Line(B, H), Line(B, I))
By concurrent_sufficient_conditions on Line(E, F), h, j we get concurrent(h, j, Line(E, F))
By concurrent_sufficient_conditions on Line(D, E), Line(E, I), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, I))
By concurrent_sufficient_conditions on g, i, Line(D, F) we get concurrent(g, i, Line(D, F))
By concurrent_sufficient_conditions on Line(D, I), Line(B, I), Line(A, I) we get concurrent(Line(A, I), Line(B, I), Line(D, I))
By concurrent_sufficient_conditions on Line(E, H), Line(B, H), k we get concurrent(k, Line(B, H), Line(E, H))
By concurrent_sufficient_conditions on j, f, Line(B, H) we get concurrent(f, j, Line(B, H))
By concurrent_sufficient_conditions on h, Line(E, I), Line(E, F) we get concurrent(h, Line(E, F), Line(E, I))
By concurrent_sufficient_conditions on Line(D, E), Line(D, H), Line(D, F) we get concurrent(Line(D, E), Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on Line(D, H), Line(D, E), Line(D, F) we get concurrent(Line(D, E), Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), Line(E, H) we get concurrent(Line(D, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(D, F), g, Line(D, H) we get concurrent(g, Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on f, Line(B, H), j we get concurrent(f, j, Line(B, H))
By concurrent_sufficient_conditions on Line(B, H), g, j we get concurrent(g, j, Line(B, H))
By concurrent_sufficient_conditions on Line(B, I), k, Line(E, I) we get concurrent(k, Line(B, I), Line(E, I))
By concurrent_sufficient_conditions on Line(B, I), g, f we get concurrent(f, g, Line(B, I))
By concurrent_sufficient_conditions on Line(E, H), Line(E, F), j we get concurrent(j, Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on f, g, Line(B, H) we get concurrent(f, g, Line(B, H))
By concurrent_sufficient_conditions on Line(E, F), Line(E, I), h we get concurrent(h, Line(E, F), Line(E, I))
By concurrent_sufficient_conditions on Line(B, H), Line(A, H), Line(D, H) we get concurrent(Line(A, H), Line(B, H), Line(D, H))
By concurrent_sufficient_conditions on Line(A, I), Line(E, I), Line(B, I) we get concurrent(Line(A, I), Line(B, I), Line(E, I))
By concurrent_sufficient_conditions on Line(D, F), Line(D, I), Line(D, E) we get concurrent(Line(D, E), Line(D, F), Line(D, I))
By concurrent_sufficient_conditions on f, g, Line(B, I) we get concurrent(f, g, Line(B, I))
By concurrent_sufficient_conditions on f, Line(C, F), Line(D, F) we get concurrent(f, Line(C, F), Line(D, F))
By concurrent_sufficient_conditions on Line(E, F), j, Line(E, I) we get concurrent(j, Line(E, F), Line(E, I))
By concurrent_sufficient_conditions on Line(D, I), k, Line(B, I) we get concurrent(k, Line(B, I), Line(D, I))
By concurrent_sufficient_conditions on Line(E, H), Line(D, H), Line(B, H) we get concurrent(Line(B, H), Line(D, H), Line(E, H))
By concurrent_sufficient_conditions on Line(E, I), Line(E, F), Line(E, H) we get concurrent(Line(E, F), Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on j, Line(B, H), f we get concurrent(f, j, Line(B, H))
By concurrent_sufficient_conditions on Line(E, I), Line(E, F), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, I))
By concurrent_sufficient_conditions on k, Line(E, H), Line(B, H) we get concurrent(k, Line(B, H), Line(E, H))
By concurrent_sufficient_conditions on Line(B, H), Line(A, H), k we get concurrent(k, Line(A, H), Line(B, H))
By concurrent_sufficient_conditions on Line(D, F), i, Line(D, E) we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(B, H), k, Line(A, H) we get concurrent(k, Line(A, H), Line(B, H))
By concurrent_sufficient_conditions on Line(D, H), Line(D, F), Line(D, I) we get concurrent(Line(D, F), Line(D, H), Line(D, I))
By concurrent_sufficient_conditions on g, Line(D, H), Line(D, F) we get concurrent(g, Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on f, Line(B, I), Line(B, H) we get concurrent(f, Line(B, H), Line(B, I))
By concurrent_sufficient_conditions on i, Line(D, F), Line(D, H) we get concurrent(i, Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on Line(E, I), Line(E, F), j we get concurrent(j, Line(E, F), Line(E, I))
By concurrent_sufficient_conditions on Line(D, H), g, Line(D, F) we get concurrent(g, Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on Line(A, I), Line(B, I), Line(D, I) we get concurrent(Line(A, I), Line(B, I), Line(D, I))
By concurrent_sufficient_conditions on Line(D, H), k, Line(B, H) we get concurrent(k, Line(B, H), Line(D, H))
By concurrent_sufficient_conditions on j, Line(D, E), Line(E, F) we get concurrent(j, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(A, H), Line(B, H), Line(E, H) we get concurrent(Line(A, H), Line(B, H), Line(E, H))
By concurrent_sufficient_conditions on Line(A, I), Line(B, I), k we get concurrent(k, Line(A, I), Line(B, I))
By concurrent_sufficient_conditions on k, Line(A, I), Line(B, I) we get concurrent(k, Line(A, I), Line(B, I))
By concurrent_sufficient_conditions on Line(B, I), Line(E, I), k we get concurrent(k, Line(B, I), Line(E, I))
By concurrent_sufficient_conditions on Line(E, H), j, Line(E, F) we get concurrent(j, Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(A, I), Line(B, I), Line(E, I) we get concurrent(Line(A, I), Line(B, I), Line(E, I))
By concurrent_sufficient_conditions on Line(E, F), Line(E, I), j we get concurrent(j, Line(E, F), Line(E, I))
By concurrent_sufficient_conditions on k, Line(E, I), Line(B, I) we get concurrent(k, Line(B, I), Line(E, I))
By concurrent_sufficient_conditions on Line(D, I), i, Line(D, F) we get concurrent(i, Line(D, F), Line(D, I))
By concurrent_sufficient_conditions on Line(D, F), Line(D, E), Line(D, H) we get concurrent(Line(D, E), Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on Line(D, I), Line(B, I), Line(E, I) we get concurrent(Line(B, I), Line(D, I), Line(E, I))
By concurrent_sufficient_conditions on Line(B, I), Line(A, I), k we get concurrent(k, Line(A, I), Line(B, I))
By concurrent_sufficient_conditions on f, j, Line(B, H) we get concurrent(f, j, Line(B, H))
By concurrent_sufficient_conditions on Line(E, H), Line(D, E), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(D, E), j, Line(E, F) we get concurrent(j, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(B, H), Line(A, H), Line(E, H) we get concurrent(Line(A, H), Line(B, H), Line(E, H))
By concurrent_sufficient_conditions on Line(B, I), Line(E, I), Line(A, I) we get concurrent(Line(A, I), Line(B, I), Line(E, I))
By concurrent_sufficient_conditions on g, Line(B, H), Line(B, I) we get concurrent(g, Line(B, H), Line(B, I))
By concurrent_sufficient_conditions on Line(B, H), Line(B, I), g we get concurrent(g, Line(B, H), Line(B, I))
By concurrent_sufficient_conditions on Line(E, H), Line(E, F), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on g, j, Line(B, H) we get concurrent(g, j, Line(B, H))
By concurrent_sufficient_conditions on g, Line(B, H), j we get concurrent(g, j, Line(B, H))
By concurrent_sufficient_conditions on k, Line(D, I), Line(B, I) we get concurrent(k, Line(B, I), Line(D, I))
By concurrent_sufficient_conditions on Line(B, I), j, Line(B, H) we get concurrent(j, Line(B, H), Line(B, I))
By concurrent_sufficient_conditions on Line(A, H), Line(D, H), Line(B, H) we get concurrent(Line(A, H), Line(B, H), Line(D, H))
By concurrent_sufficient_conditions on j, Line(E, F), Line(E, I) we get concurrent(j, Line(E, F), Line(E, I))
By concurrent_sufficient_conditions on Line(D, F), f, Line(E, F) we get concurrent(f, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on k, Line(B, I), Line(D, I) we get concurrent(k, Line(B, I), Line(D, I))
By concurrent_sufficient_conditions on Line(E, I), h, Line(E, F) we get concurrent(h, Line(E, F), Line(E, I))
By concurrent_sufficient_conditions on Line(A, H), Line(B, H), Line(D, H) we get concurrent(Line(A, H), Line(B, H), Line(D, H))
By concurrent_sufficient_conditions on Line(E, I), Line(D, E), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, I))
By concurrent_sufficient_conditions on Line(B, I), g, Line(B, H) we get concurrent(g, Line(B, H), Line(B, I))
By concurrent_sufficient_conditions on Line(D, F), i, Line(D, H) we get concurrent(i, Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on Line(B, I), f, Line(B, H) we get concurrent(f, Line(B, H), Line(B, I))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), h we get concurrent(h, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(D, H), i, Line(D, F) we get concurrent(i, Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on h, Line(D, E), Line(E, F) we get concurrent(h, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on j, Line(E, F), Line(E, H) we get concurrent(j, Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(E, H), k, Line(B, H) we get concurrent(k, Line(B, H), Line(E, H))
By concurrent_sufficient_conditions on Line(B, H), f, g we get concurrent(f, g, Line(B, H))
By concurrent_sufficient_conditions on Line(B, I), Line(B, H), g we get concurrent(g, Line(B, H), Line(B, I))
By concurrent_sufficient_conditions on Line(B, H), Line(E, H), Line(D, H) we get concurrent(Line(B, H), Line(D, H), Line(E, H))
By concurrent_sufficient_conditions on i, Line(D, F), g we get concurrent(g, i, Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), i, Line(D, I) we get concurrent(i, Line(D, F), Line(D, I))
By concurrent_sufficient_conditions on Line(E, I), Line(E, F), h we get concurrent(h, Line(E, F), Line(E, I))
By concurrent_sufficient_conditions on g, Line(B, I), j we get concurrent(g, j, Line(B, I))
By concurrent_sufficient_conditions on Line(D, H), Line(E, H), Line(B, H) we get concurrent(Line(B, H), Line(D, H), Line(E, H))
By concurrent_sufficient_conditions on i, Line(D, I), Line(D, F) we get concurrent(i, Line(D, F), Line(D, I))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), Line(C, F) we get concurrent(Line(C, F), Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(A, H), Line(E, H), Line(B, H) we get concurrent(Line(A, H), Line(B, H), Line(E, H))
By concurrent_sufficient_conditions on Line(E, F), j, Line(E, H) we get concurrent(j, Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(B, H), j, f we get concurrent(f, j, Line(B, H))
By concurrent_sufficient_conditions on k, Line(B, I), Line(A, I) we get concurrent(k, Line(A, I), Line(B, I))
By concurrent_sufficient_conditions on Line(D, I), Line(D, F), g we get concurrent(g, Line(D, F), Line(D, I))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), Line(E, I) we get concurrent(Line(D, E), Line(E, F), Line(E, I))
By concurrent_sufficient_conditions on g, Line(D, F), Line(D, E) we get concurrent(g, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on k, Line(B, H), Line(E, H) we get concurrent(k, Line(B, H), Line(E, H))
By concurrent_sufficient_conditions on j, g, Line(B, I) we get concurrent(g, j, Line(B, I))
By concurrent_sufficient_conditions on Line(E, F), Line(E, I), Line(E, H) we get concurrent(Line(E, F), Line(E, H), Line(E, I))
By concurrent_sufficient_conditions on Line(D, I), Line(A, I), Line(B, I) we get concurrent(Line(A, I), Line(B, I), Line(D, I))
By concurrent_sufficient_conditions on Line(C, F), f, Line(E, F) we get concurrent(f, Line(C, F), Line(E, F))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), Line(E, H) we get concurrent(Line(D, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(E, F), Line(E, H), j we get concurrent(j, Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(E, F), f, Line(C, F) we get concurrent(f, Line(C, F), Line(E, F))
By concurrent_sufficient_conditions on Line(D, F), g, i we get concurrent(g, i, Line(D, F))
By concurrent_sufficient_conditions on Line(B, H), Line(D, H), Line(A, H) we get concurrent(Line(A, H), Line(B, H), Line(D, H))
By concurrent_sufficient_conditions on Line(C, F), Line(E, F), f we get concurrent(f, Line(C, F), Line(E, F))
By concurrent_sufficient_conditions on i, Line(D, F), Line(D, I) we get concurrent(i, Line(D, F), Line(D, I))
By concurrent_sufficient_conditions on Line(B, I), Line(B, H), f we get concurrent(f, Line(B, H), Line(B, I))
By concurrent_sufficient_conditions on f, Line(E, F), Line(C, F) we get concurrent(f, Line(C, F), Line(E, F))
By concurrent_sufficient_conditions on Line(E, H), Line(B, H), Line(A, H) we get concurrent(Line(A, H), Line(B, H), Line(E, H))
By concurrent_sufficient_conditions on Line(E, F), h, Line(E, I) we get concurrent(h, Line(E, F), Line(E, I))
By concurrent_sufficient_conditions on f, Line(B, I), j we get concurrent(f, j, Line(B, I))
By concurrent_sufficient_conditions on Line(B, H), Line(D, H), k we get concurrent(k, Line(B, H), Line(D, H))
By concurrent_sufficient_conditions on Line(E, F), h, Line(D, E) we get concurrent(h, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on i, Line(D, H), Line(D, F) we get concurrent(i, Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on Line(E, F), f, Line(D, F) we get concurrent(f, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(E, I), Line(A, I), Line(B, I) we get concurrent(Line(A, I), Line(B, I), Line(E, I))
By concurrent_sufficient_conditions on Line(D, F), Line(D, I), Line(D, H) we get concurrent(Line(D, F), Line(D, H), Line(D, I))
By concurrent_sufficient_conditions on Line(D, F), g, Line(D, E) we get concurrent(g, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(E, I), Line(B, I), k we get concurrent(k, Line(B, I), Line(E, I))
By concurrent_sufficient_conditions on g, Line(B, I), Line(B, H) we get concurrent(g, Line(B, H), Line(B, I))
By concurrent_sufficient_conditions on j, Line(B, H), g we get concurrent(g, j, Line(B, H))
By concurrent_sufficient_conditions on Line(D, I), g, Line(D, F) we get concurrent(g, Line(D, F), Line(D, I))
By concurrent_sufficient_conditions on Line(D, I), Line(B, I), k we get concurrent(k, Line(B, I), Line(D, I))
By concurrent_sufficient_conditions on Line(E, H), h, Line(E, F) we get concurrent(h, Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on j, Line(E, F), h we get concurrent(h, j, Line(E, F))
By concurrent_sufficient_conditions on Line(D, I), Line(D, F), Line(D, H) we get concurrent(Line(D, F), Line(D, H), Line(D, I))
By concurrent_sufficient_conditions on Line(E, F), Line(E, I), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, I))
By concurrent_sufficient_conditions on Line(B, H), k, Line(E, H) we get concurrent(k, Line(B, H), Line(E, H))
By concurrent_sufficient_conditions on Line(D, H), Line(D, F), g we get concurrent(g, Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on f, Line(E, F), Line(D, F) we get concurrent(f, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on g, j, Line(B, I) we get concurrent(g, j, Line(B, I))
By concurrent_sufficient_conditions on Line(D, H), Line(D, F), i we get concurrent(i, Line(D, F), Line(D, H))
By concurrent_sufficient_conditions on Line(D, F), Line(D, E), g we get concurrent(g, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(E, H), Line(A, H), Line(B, H) we get concurrent(Line(A, H), Line(B, H), Line(E, H))
By concurrent_sufficient_conditions on Line(E, F), Line(E, H), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on f, Line(B, I), g we get concurrent(f, g, Line(B, I))
By concurrent_sufficient_conditions on Line(D, I), Line(D, F), i we get concurrent(i, Line(D, F), Line(D, I))
By concurrent_sufficient_conditions on i, Line(D, F), Line(D, E) we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, E), Line(D, F), g we get concurrent(g, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, I), Line(E, I), Line(B, I) we get concurrent(Line(B, I), Line(D, I), Line(E, I))
By concurrent_sufficient_conditions on Line(D, F), Line(C, F), Line(E, F) we get concurrent(Line(C, F), Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(B, H), Line(B, I), j we get concurrent(j, Line(B, H), Line(B, I))
By concurrent_sufficient_conditions on Line(E, H), Line(B, H), Line(D, H) we get concurrent(Line(B, H), Line(D, H), Line(E, H))
By concurrent_sufficient_conditions on f, Line(D, F), Line(C, F) we get concurrent(f, Line(C, F), Line(D, F))
By concurrent_sufficient_conditions on h, Line(E, F), Line(E, H) we get concurrent(h, Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(B, I), j, f we get concurrent(f, j, Line(B, I))
By concurrent_sufficient_conditions on f, Line(B, H), g we get concurrent(f, g, Line(B, H))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), f we get concurrent(f, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on g, Line(D, F), i we get concurrent(g, i, Line(D, F))
By concurrent_sufficient_conditions on j, Line(B, I), g we get concurrent(g, j, Line(B, I))
By concurrent_sufficient_conditions on g, Line(B, I), f we get concurrent(f, g, Line(B, I))
By concurrent_sufficient_conditions on Line(B, H), g, f we get concurrent(f, g, Line(B, H))
By concurrent_sufficient_conditions on Line(B, I), g, j we get concurrent(g, j, Line(B, I))
By concurrent_sufficient_conditions on Line(B, I), Line(D, I), Line(A, I) we get concurrent(Line(A, I), Line(B, I), Line(D, I))
By concurrent_sufficient_conditions on Line(A, I), Line(D, I), Line(B, I) we get concurrent(Line(A, I), Line(B, I), Line(D, I))
By concurrent_sufficient_conditions on j, Line(E, H), Line(E, F) we get concurrent(j, Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), j we get concurrent(j, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(E, I), Line(B, I), Line(D, I) we get concurrent(Line(B, I), Line(D, I), Line(E, I))
By concurrent_sufficient_conditions on k, Line(D, H), Line(B, H) we get concurrent(k, Line(B, H), Line(D, H))
By concurrent_sufficient_conditions on Line(D, I), Line(D, F), Line(D, E) we get concurrent(Line(D, E), Line(D, F), Line(D, I))
By concurrent_sufficient_conditions on g, f, Line(B, H) we get concurrent(f, g, Line(B, H))
By concurrent_sufficient_conditions on f, Line(B, H), Line(B, I) we get concurrent(f, Line(B, H), Line(B, I))
By concurrent_sufficient_conditions on Line(D, F), Line(D, E), Line(D, I) we get concurrent(Line(D, E), Line(D, F), Line(D, I))
By concurrent_sufficient_conditions on i, Line(D, E), Line(D, F) we get concurrent(i, Line(D, E), Line(D, F))
By line_intersection_definition on A, Line(A, center(Circle(A, C, D))), Line(A, center(c)) we get A == line_intersection(Line(A, center(c)), Line(A, center(Circle(A, C, D))))
By line_intersection_definition on D, Line(D, center(Circle(A, C, D))), g we get D == line_intersection(g, Line(D, center(Circle(A, C, D))))
By line_intersection_definition on H, Line(G, H), Line(D, H) we get H == line_intersection(Line(D, H), Line(G, H))
By line_intersection_definition on G, Line(G, H), Line(G, center(Circle(C, D, E))) we get G == line_intersection(Line(G, H), Line(G, center(Circle(C, D, E))))
By perpendicular_line_definition on B, Line(B, I), Line(A, I) we get Line(B, I) == perpendicular_line(B, Line(A, I))
By line_intersection_definition on C, k, Line(C, center(Circle(C, D, E))) we get C == line_intersection(k, Line(C, center(Circle(C, D, E))))
By line_intersection_definition on H, Line(H, center(c)), Line(B, H) we get H == line_intersection(Line(B, H), Line(H, center(c)))
By line_intersection_definition on E, h, Line(E, center(c)) we get E == line_intersection(h, Line(E, center(c)))
By line_intersection_definition on D, Line(D, center(c)), Line(D, I) we get D == line_intersection(Line(D, I), Line(D, center(c)))
By line_intersection_definition on D, Line(D, center(c)), Line(D, F) we get D == line_intersection(Line(D, F), Line(D, center(c)))
By line_intersection_definition on I, Line(I, center(c)), k we get I == line_intersection(k, Line(I, center(c)))
By radical_axis_of_intersecting_circles_v0 on E, F, Circle(A, E, F), Circle(B, C, E) we get Line(E, F) == radical_axis(Circle(A, E, F), Circle(B, C, E))
By line_intersection_definition on H, Line(F, H), Line(G, H) we get H == line_intersection(Line(F, H), Line(G, H))
By line_intersection_definition on B, g, Line(B, center(c)) we get B == line_intersection(g, Line(B, center(c)))
By line_intersection_definition on B, Line(B, center(Circle(B, C, E))), Line(B, H) we get B == line_intersection(Line(B, H), Line(B, center(Circle(B, C, E))))
By radical_axis_of_intersecting_circles_v0 on B, D, c, Circle(B, D, F) we get Line(B, D) == radical_axis(c, Circle(B, D, F))
By line_intersection_definition on A, Line(A, I), Line(A, center(Circle(A, C, D))) we get A == line_intersection(Line(A, I), Line(A, center(Circle(A, C, D))))
By line_intersection_definition on G, Line(G, I), i we get G == line_intersection(i, Line(G, I))
By line_intersection_definition on A, h, Line(A, center(c)) we get A == line_intersection(h, Line(A, center(c)))
By line_intersection_definition on center(Circle(C, D, E)), Line(D, center(Circle(C, D, E))), Line(G, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(D, center(Circle(C, D, E))), Line(G, center(Circle(C, D, E))))
By line_intersection_definition on G, Line(G, H), Line(G, I) we get G == line_intersection(Line(G, H), Line(G, I))
By radical_axis_of_intersecting_circles_v0 on F, B, Circle(B, C, E), Circle(B, D, F) we get Line(B, F) == radical_axis(Circle(B, C, E), Circle(B, D, F))
By line_intersection_definition on center(Circle(B, C, E)), Line(F, center(Circle(B, C, E))), Line(E, center(Circle(B, C, E))) we get center(Circle(B, C, E)) == line_intersection(Line(E, center(Circle(B, C, E))), Line(F, center(Circle(B, C, E))))
By radical_axis_of_intersecting_circles_v0 on D, G, Circle(C, D, E), Circle(B, D, F) we get Line(D, G) == radical_axis(Circle(B, D, F), Circle(C, D, E))
By radical_axis_of_intersecting_circles_v0 on D, F, Circle(B, D, F), Circle(A, C, D) we get Line(D, F) == radical_axis(Circle(A, C, D), Circle(B, D, F))
By line_intersection_definition on E, Line(E, center(Circle(C, D, E))), Line(E, F) we get E == line_intersection(Line(E, F), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on E, Line(E, I), Line(E, center(Circle(B, C, E))) we get E == line_intersection(Line(E, I), Line(E, center(Circle(B, C, E))))
By line_intersection_definition on H, Line(D, H), Line(H, center(c)) we get H == line_intersection(Line(D, H), Line(H, center(c)))
By line_intersection_definition on E, h, Line(E, center(Circle(C, D, E))) we get E == line_intersection(h, Line(E, center(Circle(C, D, E))))
By line_intersection_definition on center(c), Line(A, center(c)), Line(H, center(c)) we get center(c) == line_intersection(Line(A, center(c)), Line(H, center(c)))
By perpendicular_line_definition on A, Line(A, I), Line(B, I) we get Line(A, I) == perpendicular_line(A, Line(B, I))
By line_intersection_definition on H, Line(E, H), Line(G, H) we get H == line_intersection(Line(E, H), Line(G, H))
By line_intersection_definition on center(c), Line(H, center(c)), Line(D, center(c)) we get center(c) == line_intersection(Line(D, center(c)), Line(H, center(c)))
By line_intersection_definition on F, Line(D, F), Line(F, center(Circle(A, C, D))) we get F == line_intersection(Line(D, F), Line(F, center(Circle(A, C, D))))
By radical_axis_of_intersecting_circles_v0 on A, E, Circle(A, E, F), c we get Line(A, E) == radical_axis(c, Circle(A, E, F))
By line_intersection_definition on center(c), Line(D, center(c)), Line(A, center(c)) we get center(c) == line_intersection(Line(A, center(c)), Line(D, center(c)))
By line_intersection_definition on I, Line(G, I), Line(A, I) we get I == line_intersection(Line(A, I), Line(G, I))
By line_intersection_definition on E, Line(E, center(c)), Line(E, F) we get E == line_intersection(Line(E, F), Line(E, center(c)))
By line_intersection_definition on D, Line(D, center(c)), Line(D, center(Circle(C, D, E))) we get D == line_intersection(Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By line_intersection_definition on D, g, Line(D, center(Circle(C, D, E))) we get D == line_intersection(g, Line(D, center(Circle(C, D, E))))
By line_intersection_definition on F, f, Line(F, H) we get F == line_intersection(f, Line(F, H))
By line_intersection_definition on center(c), Line(B, center(c)), Line(E, center(c)) we get center(c) == line_intersection(Line(B, center(c)), Line(E, center(c)))
By line_intersection_definition on D, Line(D, center(Circle(A, C, D))), i we get D == line_intersection(i, Line(D, center(Circle(A, C, D))))
By line_intersection_definition on center(Circle(B, C, E)), Line(F, center(Circle(B, C, E))), Line(C, center(Circle(B, C, E))) we get center(Circle(B, C, E)) == line_intersection(Line(C, center(Circle(B, C, E))), Line(F, center(Circle(B, C, E))))
By line_intersection_definition on B, Line(B, H), Line(B, center(c)) we get B == line_intersection(Line(B, H), Line(B, center(c)))
By line_intersection_definition on F, Line(E, F), Line(F, center(Circle(A, C, D))) we get F == line_intersection(Line(E, F), Line(F, center(Circle(A, C, D))))
By line_intersection_definition on G, Line(G, H), j we get G == line_intersection(j, Line(G, H))
By line_intersection_definition on center(Circle(B, C, E)), Line(E, center(Circle(B, C, E))), Line(C, center(Circle(B, C, E))) we get center(Circle(B, C, E)) == line_intersection(Line(C, center(Circle(B, C, E))), Line(E, center(Circle(B, C, E))))
By line_intersection_definition on G, Line(C, F), Line(G, I) we get G == line_intersection(Line(C, F), Line(G, I))
By line_intersection_definition on C, Line(C, center(Circle(A, C, D))), Line(C, center(Circle(C, D, E))) we get C == line_intersection(Line(C, center(Circle(A, C, D))), Line(C, center(Circle(C, D, E))))
By line_intersection_definition on I, Line(F, I), Line(E, I) we get I == line_intersection(Line(E, I), Line(F, I))
By perpendicular_line_definition on I, Line(A, I), Line(B, I) we get Line(A, I) == perpendicular_line(I, Line(B, I))
By line_intersection_definition on center(c), Line(D, center(c)), Line(I, center(c)) we get center(c) == line_intersection(Line(D, center(c)), Line(I, center(c)))
By line_intersection_definition on F, f, Line(F, I) we get F == line_intersection(f, Line(F, I))
By line_intersection_definition on center(c), Line(A, center(c)), Line(I, center(c)) we get center(c) == line_intersection(Line(A, center(c)), Line(I, center(c)))
By line_intersection_definition on F, Line(F, I), Line(F, center(Circle(A, C, D))) we get F == line_intersection(Line(F, I), Line(F, center(Circle(A, C, D))))
By line_intersection_definition on E, Line(D, E), Line(E, center(Circle(C, D, E))) we get E == line_intersection(Line(D, E), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on F, Line(D, F), Line(F, H) we get F == line_intersection(Line(D, F), Line(F, H))
By line_intersection_definition on D, Line(D, E), Line(D, center(c)) we get D == line_intersection(Line(D, E), Line(D, center(c)))
By perpendicular_line_definition on B, Line(B, H), Line(A, H) we get Line(B, H) == perpendicular_line(B, Line(A, H))
By line_intersection_definition on C, Line(C, center(Circle(B, C, E))), Line(C, center(Circle(C, D, E))) we get C == line_intersection(Line(C, center(Circle(B, C, E))), Line(C, center(Circle(C, D, E))))
By line_intersection_definition on B, j, Line(B, center(Circle(B, C, E))) we get B == line_intersection(j, Line(B, center(Circle(B, C, E))))
By line_intersection_definition on center(c), Line(E, center(c)), Line(H, center(c)) we get center(c) == line_intersection(Line(E, center(c)), Line(H, center(c)))
By line_intersection_definition on center(c), Line(B, center(c)), Line(D, center(c)) we get center(c) == line_intersection(Line(B, center(c)), Line(D, center(c)))
By line_intersection_definition on F, Line(F, H), Line(F, center(Circle(B, C, E))) we get F == line_intersection(Line(F, H), Line(F, center(Circle(B, C, E))))
By line_intersection_definition on I, Line(D, I), Line(G, I) we get I == line_intersection(Line(D, I), Line(G, I))
By line_intersection_definition on center(Circle(A, C, D)), Line(D, center(Circle(A, C, D))), Line(F, center(Circle(A, C, D))) we get center(Circle(A, C, D)) == line_intersection(Line(D, center(Circle(A, C, D))), Line(F, center(Circle(A, C, D))))
By line_intersection_definition on B, Line(B, center(Circle(B, C, E))), Line(B, center(c)) we get B == line_intersection(Line(B, center(c)), Line(B, center(Circle(B, C, E))))
By line_intersection_definition on D, Line(D, E), Line(D, center(Circle(C, D, E))) we get D == line_intersection(Line(D, E), Line(D, center(Circle(C, D, E))))
By line_intersection_definition on H, Line(G, H), Line(H, center(c)) we get H == line_intersection(Line(G, H), Line(H, center(c)))
By line_intersection_definition on D, Line(D, center(c)), Line(D, center(Circle(A, C, D))) we get D == line_intersection(Line(D, center(c)), Line(D, center(Circle(A, C, D))))
By line_intersection_definition on F, Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))) we get F == line_intersection(Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))))
By line_intersection_definition on A, Line(A, H), Line(A, center(Circle(A, C, D))) we get A == line_intersection(Line(A, H), Line(A, center(Circle(A, C, D))))
By line_intersection_definition on H, Line(F, H), k we get H == line_intersection(k, Line(F, H))
By line_intersection_definition on F, Line(F, I), Line(E, F) we get F == line_intersection(Line(E, F), Line(F, I))
By line_intersection_definition on I, Line(G, I), Line(F, I) we get I == line_intersection(Line(F, I), Line(G, I))
By line_intersection_definition on F, Line(F, H), Line(C, F) we get F == line_intersection(Line(C, F), Line(F, H))
By line_intersection_definition on H, Line(H, center(c)), k we get H == line_intersection(k, Line(H, center(c)))
By line_intersection_definition on G, Line(G, I), j we get G == line_intersection(j, Line(G, I))
By line_intersection_definition on H, Line(F, H), Line(B, H) we get H == line_intersection(Line(B, H), Line(F, H))
By line_intersection_definition on B, Line(B, center(Circle(B, C, E))), f we get B == line_intersection(f, Line(B, center(Circle(B, C, E))))
By radical_axis_of_intersecting_circles_v0 on F, A, Circle(A, E, F), Circle(A, C, D) we get Line(A, F) == radical_axis(Circle(A, C, D), Circle(A, E, F))
By line_intersection_definition on A, Line(A, H), Line(A, center(c)) we get A == line_intersection(Line(A, H), Line(A, center(c)))
By line_intersection_definition on E, Line(E, I), Line(E, center(Circle(C, D, E))) we get E == line_intersection(Line(E, I), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on I, k, Line(G, I) we get I == line_intersection(k, Line(G, I))
By line_intersection_definition on H, Line(F, H), Line(D, H) we get H == line_intersection(Line(D, H), Line(F, H))
By line_intersection_definition on C, k, Line(C, center(Circle(A, C, D))) we get C == line_intersection(k, Line(C, center(Circle(A, C, D))))
By line_intersection_definition on center(Circle(B, C, E)), Line(B, center(Circle(B, C, E))), Line(F, center(Circle(B, C, E))) we get center(Circle(B, C, E)) == line_intersection(Line(B, center(Circle(B, C, E))), Line(F, center(Circle(B, C, E))))
By line_intersection_definition on B, Line(B, I), Line(B, center(c)) we get B == line_intersection(Line(B, I), Line(B, center(c)))
By line_intersection_definition on A, Line(A, center(Circle(A, C, D))), i we get A == line_intersection(i, Line(A, center(Circle(A, C, D))))
By line_intersection_definition on E, Line(E, center(Circle(B, C, E))), Line(E, center(c)) we get E == line_intersection(Line(E, center(c)), Line(E, center(Circle(B, C, E))))
By line_intersection_definition on D, Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))) we get D == line_intersection(Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By line_intersection_definition on D, Line(D, center(Circle(A, C, D))), Line(D, E) we get D == line_intersection(Line(D, E), Line(D, center(Circle(A, C, D))))
By line_intersection_definition on G, Line(G, center(Circle(C, D, E))), i we get G == line_intersection(i, Line(G, center(Circle(C, D, E))))
By line_intersection_definition on center(c), Line(B, center(c)), Line(H, center(c)) we get center(c) == line_intersection(Line(B, center(c)), Line(H, center(c)))
By line_intersection_definition on H, Line(H, center(c)), Line(A, H) we get H == line_intersection(Line(A, H), Line(H, center(c)))
By line_intersection_definition on E, Line(E, center(Circle(C, D, E))), j we get E == line_intersection(j, Line(E, center(Circle(C, D, E))))
By line_intersection_definition on A, Line(A, center(c)), Line(A, I) we get A == line_intersection(Line(A, I), Line(A, center(c)))
By line_intersection_definition on D, Line(D, center(c)), i we get D == line_intersection(i, Line(D, center(c)))
By line_intersection_definition on E, Line(D, E), Line(E, center(c)) we get E == line_intersection(Line(D, E), Line(E, center(c)))
By line_intersection_definition on center(c), Line(I, center(c)), Line(H, center(c)) we get center(c) == line_intersection(Line(H, center(c)), Line(I, center(c)))
By line_intersection_definition on F, Line(F, center(Circle(B, C, E))), Line(F, I) we get F == line_intersection(Line(F, I), Line(F, center(Circle(B, C, E))))
By line_intersection_definition on E, Line(E, center(c)), Line(E, I) we get E == line_intersection(Line(E, I), Line(E, center(c)))
By line_intersection_definition on H, Line(A, H), Line(G, H) we get H == line_intersection(Line(A, H), Line(G, H))
By line_intersection_definition on center(Circle(A, C, D)), Line(C, center(Circle(A, C, D))), Line(D, center(Circle(A, C, D))) we get center(Circle(A, C, D)) == line_intersection(Line(C, center(Circle(A, C, D))), Line(D, center(Circle(A, C, D))))
By line_intersection_definition on C, Line(C, F), Line(C, center(Circle(A, C, D))) we get C == line_intersection(Line(C, F), Line(C, center(Circle(A, C, D))))
By radical_axis_of_intersecting_circles_v0 on G, F, Circle(B, D, F), Circle(A, E, F) we get Line(F, G) == radical_axis(Circle(A, E, F), Circle(B, D, F))
By line_intersection_definition on I, Line(F, I), Line(I, center(c)) we get I == line_intersection(Line(F, I), Line(I, center(c)))
By line_intersection_definition on G, i, Line(G, H) we get G == line_intersection(i, Line(G, H))
By line_intersection_definition on I, Line(B, I), Line(F, I) we get I == line_intersection(Line(B, I), Line(F, I))
By line_intersection_definition on C, h, Line(C, center(Circle(C, D, E))) we get C == line_intersection(h, Line(C, center(Circle(C, D, E))))
By line_intersection_definition on F, Line(F, center(Circle(B, C, E))), f we get F == line_intersection(f, Line(F, center(Circle(B, C, E))))
By line_intersection_definition on D, Line(D, center(c)), g we get D == line_intersection(g, Line(D, center(c)))
By line_intersection_definition on center(Circle(A, C, D)), Line(F, center(Circle(A, C, D))), Line(C, center(Circle(A, C, D))) we get center(Circle(A, C, D)) == line_intersection(Line(C, center(Circle(A, C, D))), Line(F, center(Circle(A, C, D))))
By line_intersection_definition on F, Line(F, H), Line(F, center(Circle(A, C, D))) we get F == line_intersection(Line(F, H), Line(F, center(Circle(A, C, D))))
By line_intersection_definition on center(Circle(B, C, E)), Line(B, center(Circle(B, C, E))), Line(E, center(Circle(B, C, E))) we get center(Circle(B, C, E)) == line_intersection(Line(B, center(Circle(B, C, E))), Line(E, center(Circle(B, C, E))))
By line_intersection_definition on E, Line(E, center(c)), j we get E == line_intersection(j, Line(E, center(c)))
By line_intersection_definition on G, Line(G, H), Line(C, F) we get G == line_intersection(Line(C, F), Line(G, H))
By line_intersection_definition on C, Line(C, center(Circle(A, C, D))), Line(C, center(Circle(B, C, E))) we get C == line_intersection(Line(C, center(Circle(A, C, D))), Line(C, center(Circle(B, C, E))))
By line_intersection_definition on I, k, Line(F, I) we get I == line_intersection(k, Line(F, I))
By line_intersection_definition on A, i, Line(A, center(c)) we get A == line_intersection(i, Line(A, center(c)))
By line_intersection_definition on F, Line(C, F), Line(F, center(Circle(B, C, E))) we get F == line_intersection(Line(C, F), Line(F, center(Circle(B, C, E))))
By line_intersection_definition on C, g, Line(C, center(Circle(A, C, D))) we get C == line_intersection(g, Line(C, center(Circle(A, C, D))))
By line_intersection_definition on C, h, Line(C, center(Circle(B, C, E))) we get C == line_intersection(h, Line(C, center(Circle(B, C, E))))
By line_intersection_definition on I, Line(B, I), Line(I, center(c)) we get I == line_intersection(Line(B, I), Line(I, center(c)))
By line_intersection_definition on F, Line(F, I), Line(F, H) we get F == line_intersection(Line(F, H), Line(F, I))
By line_intersection_definition on H, Line(H, center(c)), Line(F, H) we get H == line_intersection(Line(F, H), Line(H, center(c)))
By perpendicular_line_definition on A, Line(A, H), Line(B, H) we get Line(A, H) == perpendicular_line(A, Line(B, H))
By line_intersection_definition on I, Line(E, I), Line(G, I) we get I == line_intersection(Line(E, I), Line(G, I))
By line_intersection_definition on A, f, Line(A, center(Circle(A, C, D))) we get A == line_intersection(f, Line(A, center(Circle(A, C, D))))
By line_intersection_definition on H, Line(G, H), k we get H == line_intersection(k, Line(G, H))
By line_intersection_definition on F, Line(C, F), Line(F, I) we get F == line_intersection(Line(C, F), Line(F, I))
By line_intersection_definition on B, j, Line(B, center(c)) we get B == line_intersection(j, Line(B, center(c)))
By line_intersection_definition on E, Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))) we get E == line_intersection(Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on center(c), Line(B, center(c)), Line(I, center(c)) we get center(c) == line_intersection(Line(B, center(c)), Line(I, center(c)))
By line_intersection_definition on H, Line(B, H), Line(G, H) we get H == line_intersection(Line(B, H), Line(G, H))
By line_intersection_definition on E, Line(E, center(Circle(B, C, E))), Line(E, H) we get E == line_intersection(Line(E, H), Line(E, center(Circle(B, C, E))))
By line_intersection_definition on center(Circle(C, D, E)), Line(C, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(C, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on D, Line(D, F), Line(D, center(Circle(A, C, D))) we get D == line_intersection(Line(D, F), Line(D, center(Circle(A, C, D))))
By perpendicular_line_definition on H, Line(B, H), Line(A, H) we get Line(B, H) == perpendicular_line(H, Line(A, H))
By perpendicular_line_definition on H, Line(A, H), Line(B, H) we get Line(A, H) == perpendicular_line(H, Line(B, H))
By line_intersection_definition on center(c), Line(E, center(c)), Line(I, center(c)) we get center(c) == line_intersection(Line(E, center(c)), Line(I, center(c)))
By line_intersection_definition on B, Line(B, I), Line(B, center(Circle(B, C, E))) we get B == line_intersection(Line(B, I), Line(B, center(Circle(B, C, E))))
By line_intersection_definition on I, Line(A, I), Line(I, center(c)) we get I == line_intersection(Line(A, I), Line(I, center(c)))
By line_intersection_definition on H, Line(F, H), Line(A, H) we get H == line_intersection(Line(A, H), Line(F, H))
By line_intersection_definition on F, Line(F, I), Line(D, F) we get F == line_intersection(Line(D, F), Line(F, I))
By line_intersection_definition on E, Line(E, center(Circle(B, C, E))), Line(E, F) we get E == line_intersection(Line(E, F), Line(E, center(Circle(B, C, E))))
By line_intersection_definition on center(Circle(A, C, D)), Line(F, center(Circle(A, C, D))), Line(A, center(Circle(A, C, D))) we get center(Circle(A, C, D)) == line_intersection(Line(A, center(Circle(A, C, D))), Line(F, center(Circle(A, C, D))))
By line_intersection_definition on F, Line(F, H), Line(E, F) we get F == line_intersection(Line(E, F), Line(F, H))
By line_intersection_definition on D, i, Line(D, center(Circle(C, D, E))) we get D == line_intersection(i, Line(D, center(Circle(C, D, E))))
By line_intersection_definition on C, Line(C, F), Line(C, center(Circle(B, C, E))) we get C == line_intersection(Line(C, F), Line(C, center(Circle(B, C, E))))
By line_intersection_definition on E, Line(E, center(Circle(B, C, E))), h we get E == line_intersection(h, Line(E, center(Circle(B, C, E))))
By line_intersection_definition on F, f, Line(F, center(Circle(A, C, D))) we get F == line_intersection(f, Line(F, center(Circle(A, C, D))))
By line_intersection_definition on H, Line(E, H), Line(F, H) we get H == line_intersection(Line(E, H), Line(F, H))
By line_intersection_definition on F, Line(F, center(Circle(A, C, D))), Line(C, F) we get F == line_intersection(Line(C, F), Line(F, center(Circle(A, C, D))))
By line_intersection_definition on D, Line(D, center(Circle(C, D, E))), Line(D, I) we get D == line_intersection(Line(D, I), Line(D, center(Circle(C, D, E))))
By line_intersection_definition on D, Line(D, center(Circle(A, C, D))), Line(D, H) we get D == line_intersection(Line(D, H), Line(D, center(Circle(A, C, D))))
By line_intersection_definition on C, Line(C, center(Circle(B, C, E))), k we get C == line_intersection(k, Line(C, center(Circle(B, C, E))))
By line_intersection_definition on E, Line(E, center(c)), Line(E, center(Circle(C, D, E))) we get E == line_intersection(Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on G, Line(G, center(Circle(C, D, E))), j we get G == line_intersection(j, Line(G, center(Circle(C, D, E))))
By line_intersection_definition on D, Line(D, I), Line(D, center(Circle(A, C, D))) we get D == line_intersection(Line(D, I), Line(D, center(Circle(A, C, D))))
By line_intersection_definition on center(Circle(C, D, E)), Line(D, center(Circle(C, D, E))), Line(C, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(C, center(Circle(C, D, E))), Line(D, center(Circle(C, D, E))))
By line_intersection_definition on center(Circle(C, D, E)), Line(E, center(Circle(C, D, E))), Line(D, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))))
By perpendicular_line_definition on I, Line(B, I), Line(A, I) we get Line(B, I) == perpendicular_line(I, Line(A, I))
By radical_axis_of_intersecting_circles_v0 on G, E, Circle(C, D, E), Circle(A, E, F) we get Line(E, G) == radical_axis(Circle(A, E, F), Circle(C, D, E))
By line_intersection_definition on H, Line(E, H), Line(H, center(c)) we get H == line_intersection(Line(E, H), Line(H, center(c)))
By line_intersection_definition on D, Line(D, F), Line(D, center(Circle(C, D, E))) we get D == line_intersection(Line(D, F), Line(D, center(Circle(C, D, E))))
By line_intersection_definition on D, Line(D, H), Line(D, center(c)) we get D == line_intersection(Line(D, H), Line(D, center(c)))
By line_intersection_definition on I, Line(I, center(c)), Line(E, I) we get I == line_intersection(Line(E, I), Line(I, center(c)))
By line_intersection_definition on I, Line(A, I), Line(F, I) we get I == line_intersection(Line(A, I), Line(F, I))
By line_intersection_definition on E, j, Line(E, center(Circle(B, C, E))) we get E == line_intersection(j, Line(E, center(Circle(B, C, E))))
By line_intersection_definition on E, Line(E, H), Line(E, center(c)) we get E == line_intersection(Line(E, H), Line(E, center(c)))
By line_intersection_definition on I, Line(I, center(c)), Line(G, I) we get I == line_intersection(Line(G, I), Line(I, center(c)))
By line_intersection_definition on I, Line(G, I), Line(B, I) we get I == line_intersection(Line(B, I), Line(G, I))
By line_intersection_definition on E, Line(D, E), Line(E, center(Circle(B, C, E))) we get E == line_intersection(Line(D, E), Line(E, center(Circle(B, C, E))))
By line_intersection_definition on C, g, Line(C, center(Circle(C, D, E))) we get C == line_intersection(g, Line(C, center(Circle(C, D, E))))
By line_intersection_definition on center(Circle(A, C, D)), Line(A, center(Circle(A, C, D))), Line(D, center(Circle(A, C, D))) we get center(Circle(A, C, D)) == line_intersection(Line(A, center(Circle(A, C, D))), Line(D, center(Circle(A, C, D))))
By line_intersection_definition on center(Circle(C, D, E)), Line(G, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(E, center(Circle(C, D, E))), Line(G, center(Circle(C, D, E))))
By line_intersection_definition on F, Line(F, center(Circle(B, C, E))), Line(E, F) we get F == line_intersection(Line(E, F), Line(F, center(Circle(B, C, E))))
By line_intersection_definition on G, Line(G, center(Circle(C, D, E))), Line(G, I) we get G == line_intersection(Line(G, I), Line(G, center(Circle(C, D, E))))
By line_intersection_definition on I, Line(F, I), Line(D, I) we get I == line_intersection(Line(D, I), Line(F, I))
By line_intersection_definition on F, Line(F, center(Circle(B, C, E))), Line(D, F) we get F == line_intersection(Line(D, F), Line(F, center(Circle(B, C, E))))
By line_intersection_definition on center(c), Line(A, center(c)), Line(E, center(c)) we get center(c) == line_intersection(Line(A, center(c)), Line(E, center(c)))
By line_intersection_definition on I, Line(D, I), Line(I, center(c)) we get I == line_intersection(Line(D, I), Line(I, center(c)))
By line_intersection_definition on center(c), Line(D, center(c)), Line(E, center(c)) we get center(c) == line_intersection(Line(D, center(c)), Line(E, center(c)))
By line_intersection_definition on D, Line(D, H), Line(D, center(Circle(C, D, E))) we get D == line_intersection(Line(D, H), Line(D, center(Circle(C, D, E))))
By line_intersection_definition on E, Line(E, H), Line(E, center(Circle(C, D, E))) we get E == line_intersection(Line(E, H), Line(E, center(Circle(C, D, E))))
By same_angle_converse_v1 on center(Circle(A, C, D)), A, C, D we get collinear(A, C, center(Circle(A, C, D)))
By same_angle_v0 on F, C, G, H we get angle(C, F, H) == angle(G, F, H) mod 360
By same_angle_converse_v1 on center(Circle(B, C, E)), B, C, F we get collinear(B, C, center(Circle(B, C, E)))
By same_angle_converse_v1 on center(c), A, B, H we get collinear(A, B, center(c))
By same_angle_converse_v1 on center(Circle(C, D, E)), G, C, E we get collinear(C, G, center(Circle(C, D, E)))
By same_angle_v2 on F, A, B, H we get angle(A, F, H) == angle(B, F, H) + 180 mod 360
By same_angle_v0 on H, C, I, G we get angle(C, H, G) == angle(I, H, G) mod 360
By same_angle_v0 on G, A, D, H we get angle(A, G, H) == angle(D, G, H) mod 360
By same_angle_v3 on F, B, A, I we get angle(B, F, I) == angle(A, F, I) + 180 mod 360
By same_angle_v1 on I, C, H, G we get angle(C, I, G) == angle(H, I, G) mod 360
By same_angle_v1 on G, E, B, I we get angle(B, G, I) == angle(E, G, I) mod 360
By same_angle_v0 on G, C, F, I we get angle(C, G, I) == angle(F, G, I) mod 360
By same_angle_v1 on F, G, C, I we get angle(C, F, I) == angle(G, F, I) mod 360
By same_angle_v1 on G, C, F, H we get angle(C, G, H) == angle(F, G, H) mod 360
By same_angle_v0 on G, D, A, I we get angle(A, G, I) == angle(D, G, I) mod 360
By same_angle_v1 on H, C, I, F we get angle(C, H, F) == angle(I, H, F) mod 360
By same_angle_v1 on G, E, B, H we get angle(B, G, H) == angle(E, G, H) mod 360
By same_angle_v0 on I, H, C, F we get angle(C, I, F) == angle(H, I, F) mod 360
By projection_definition on A, I, Line(B, I) we get I == projection(A, Line(B, I))
By projection_definition on B, I, Line(A, I) we get I == projection(B, Line(A, I))
By projection_definition on A, H, Line(B, H) we get H == projection(A, Line(B, H))
By projection_definition on B, H, Line(A, H) we get H == projection(B, Line(A, H))
By reverse_direction on G, I we get 180 == direction(G, I) - direction(I, G) mod 360
By reverse_direction on F, H we get 180 == direction(F, H) - direction(H, F) mod 360
By reverse_direction on I, F we get 180 == direction(I, F) - direction(F, I) mod 360
By reverse_direction on I, G we get 180 == direction(I, G) - direction(G, I) mod 360
By reverse_direction on H, G we get 180 == direction(H, G) - direction(G, H) mod 360
By reverse_direction on G, H we get 180 == direction(G, H) - direction(H, G) mod 360
By reverse_direction on F, I we get 180 == direction(F, I) - direction(I, F) mod 360
By reverse_direction on H, F we get 180 == direction(H, F) - direction(F, H) mod 360
By internal_angle_bisector_definition_v0_r on A, C, A, center(Circle(A, C, D)) we get Line(C, center(Circle(A, C, D))) == internal_angle_bisector(A, center(Circle(A, C, D)), A)
By internal_angle_bisector_definition_v0_r on B, A, B, center(c) we get Line(A, center(c)) == internal_angle_bisector(B, center(c), B)
By reverse_direction on center(c), E we get 180 == direction(center(c), E) - direction(E, center(c)) mod 360
By power_of_a_point_in_circle on G, Circle(B, D, F) we get 0 == power_of_a_point(G, Circle(B, D, F))
By power_of_a_point_in_circle on B, Circle(B, D, F) we get 0 == power_of_a_point(B, Circle(B, D, F))
By power_of_a_point_in_circle on E, Circle(A, E, F) we get 0 == power_of_a_point(E, Circle(A, E, F))
By reverse_direction on center(Circle(A, C, D)), D we get 180 == direction(center(Circle(A, C, D)), D) - direction(D, center(Circle(A, C, D))) mod 360
By power_of_a_point_on_circle on D, Circle(B, D, F) we get 0 == power_of_a_point(D, Circle(B, D, F))
By internal_angle_bisector_definition_v0_r on G, C, G, center(Circle(C, D, E)) we get Line(C, center(Circle(C, D, E))) == internal_angle_bisector(G, center(Circle(C, D, E)), G)
By internal_angle_bisector_definition_v0_r on C, B, C, center(Circle(B, C, E)) we get Line(B, center(Circle(B, C, E))) == internal_angle_bisector(C, center(Circle(B, C, E)), C)
By internal_angle_bisector_definition_v0_r on B, C, B, center(Circle(B, C, E)) we get Line(C, center(Circle(B, C, E))) == internal_angle_bisector(B, center(Circle(B, C, E)), B)
By reverse_direction on center(Circle(C, D, E)), D we get 180 == direction(center(Circle(C, D, E)), D) - direction(D, center(Circle(C, D, E))) mod 360
By reverse_direction on center(Circle(A, C, D)), F we get 180 == direction(center(Circle(A, C, D)), F) - direction(F, center(Circle(A, C, D))) mod 360
By reverse_direction on center(Circle(C, D, E)), E we get 180 == direction(center(Circle(C, D, E)), E) - direction(E, center(Circle(C, D, E))) mod 360
By reverse_direction on center(Circle(B, C, E)), B we get 180 == direction(center(Circle(B, C, E)), B) - direction(B, center(Circle(B, C, E))) mod 360
By internal_angle_bisector_definition_v0_r on A, B, A, center(c) we get Line(B, center(c)) == internal_angle_bisector(A, center(c), A)
By reverse_direction on center(Circle(B, C, E)), E we get 180 == direction(center(Circle(B, C, E)), E) - direction(E, center(Circle(B, C, E))) mod 360
By reverse_direction on center(Circle(C, D, E)), G we get 180 == direction(center(Circle(C, D, E)), G) - direction(G, center(Circle(C, D, E))) mod 360
By reverse_direction on center(Circle(A, C, D)), C we get 180 == direction(center(Circle(A, C, D)), C) - direction(C, center(Circle(A, C, D))) mod 360
By reverse_direction on center(Circle(B, C, E)), C we get 180 == direction(center(Circle(B, C, E)), C) - direction(C, center(Circle(B, C, E))) mod 360
By reverse_direction on center(c), D we get 180 == direction(center(c), D) - direction(D, center(c)) mod 360
By power_of_a_point_on_circle on F, Circle(A, E, F) we get 0 == power_of_a_point(F, Circle(A, E, F))
By reverse_direction on center(c), B we get 180 == direction(center(c), B) - direction(B, center(c)) mod 360
By reverse_direction on center(c), H we get 180 == direction(center(c), H) - direction(H, center(c)) mod 360
By reverse_direction on center(Circle(C, D, E)), C we get 180 == direction(center(Circle(C, D, E)), C) - direction(C, center(Circle(C, D, E))) mod 360
By reverse_direction on center(Circle(B, C, E)), F we get 180 == direction(center(Circle(B, C, E)), F) - direction(F, center(Circle(B, C, E))) mod 360
By power_of_a_point_in_circle on A, Circle(A, E, F) we get 0 == power_of_a_point(A, Circle(A, E, F))
By reverse_direction on center(c), A we get 180 == direction(center(c), A) - direction(A, center(c)) mod 360
By internal_angle_bisector_definition_v0_r on C, G, C, center(Circle(C, D, E)) we get Line(G, center(Circle(C, D, E))) == internal_angle_bisector(C, center(Circle(C, D, E)), C)
By power_of_a_point_on_circle on F, Circle(B, D, F) we get 0 == power_of_a_point(F, Circle(B, D, F))
By power_of_a_point_in_circle on G, Circle(A, E, F) we get 0 == power_of_a_point(G, Circle(A, E, F))
By reverse_direction on center(Circle(A, C, D)), A we get 180 == direction(center(Circle(A, C, D)), A) - direction(A, center(Circle(A, C, D))) mod 360
By internal_angle_bisector_definition_v0_r on C, A, C, center(Circle(A, C, D)) we get Line(A, center(Circle(A, C, D))) == internal_angle_bisector(C, center(Circle(A, C, D)), C)
By reverse_direction on center(c), I we get 180 == direction(center(c), I) - direction(I, center(c)) mod 360
By anti_similar_triangle_basic_properties on I, C, F, G, C, H we get angle(I, C, F) == 0 - angle(G, C, H) mod 360, angle(C, F, I) == 0 - angle(C, H, G) mod 360, angle(F, I, C) == 0 - angle(H, G, C) mod 360, log(distance(C, G)) + log(distance(C, F)) == log(distance(C, I)) + log(distance(C, H)), log(distance(C, F)) + log(distance(G, H)) == log(distance(C, H)) + log(distance(F, I)), log(distance(F, I)) + log(distance(C, G)) == log(distance(G, H)) + log(distance(C, I))
By altitude_definition on A, B, I, Line(A, I) we get Line(A, I) == altitude(A, B, I)
By power_of_a_point_definition on C, G, F, Circle(B, D, F) we get log(distance(C, G)) + log(distance(C, F)) == log(power_of_a_point(C, Circle(B, D, F)))
By isosceles_triangle_properties on center(Circle(C, D, E)), E, C we get distance(C, center(Circle(C, D, E))) == distance(E, center(Circle(C, D, E))), angle(E, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), E, C) mod 360
By isosceles_triangle_properties on center(c), B, H we get distance(B, center(c)) == distance(H, center(c)), angle(B, H, center(c)) == angle(center(c), B, H) mod 360
By isosceles_triangle_properties on center(Circle(C, D, E)), E, G we get distance(E, center(Circle(C, D, E))) == distance(G, center(Circle(C, D, E))), angle(E, G, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), E, G) mod 360
By isosceles_triangle_properties on center(c), E, B we get distance(B, center(c)) == distance(E, center(c)), angle(E, B, center(c)) == angle(center(c), E, B) mod 360
By sas_anti_congruence on B, center(Circle(B, C, E)), F, F, center(Circle(B, C, E)), B we get anti_congruent_triangles(B, F, center(Circle(B, C, E)), F, B, center(Circle(B, C, E)))
By sas_anti_congruence on B, center(c), I, I, center(c), B we get anti_congruent_triangles(B, I, center(c), I, B, center(c))
By isosceles_triangle_properties on center(c), H, I we get distance(H, center(c)) == distance(I, center(c)), angle(H, I, center(c)) == angle(center(c), H, I) mod 360
By isosceles_triangle_properties on center(c), E, D we get distance(D, center(c)) == distance(E, center(c)), angle(E, D, center(c)) == angle(center(c), E, D) mod 360
By anti_similar_triangle_basic_properties on G, C, I, H, C, F we get angle(G, C, I) == 0 - angle(H, C, F) mod 360, angle(C, I, G) == 0 - angle(C, F, H) mod 360, angle(I, G, C) == 0 - angle(F, H, C) mod 360, log(distance(C, G)) + log(distance(C, F)) == log(distance(C, H)) + log(distance(C, I)), log(distance(C, F)) + log(distance(G, I)) == log(distance(C, I)) + log(distance(F, H)), log(distance(F, H)) + log(distance(C, G)) == log(distance(G, I)) + log(distance(C, H))
By anti_similar_triangle_basic_properties on C, H, F, C, G, I we get angle(C, H, F) == 0 - angle(C, G, I) mod 360, angle(H, F, C) == 0 - angle(G, I, C) mod 360, angle(F, C, H) == 0 - angle(I, C, G) mod 360, log(distance(C, G)) + log(distance(F, H)) == log(distance(C, H)) + log(distance(G, I)), log(distance(F, H)) + log(distance(C, I)) == log(distance(G, I)) + log(distance(C, F)), log(distance(C, F)) + log(distance(C, G)) == log(distance(C, I)) + log(distance(C, H))
By sas_anti_congruence on E, center(c), B, B, center(c), E we get anti_congruent_triangles(B, E, center(c), E, B, center(c))
By sas_anti_congruence on C, center(Circle(C, D, E)), E, E, center(Circle(C, D, E)), C we get anti_congruent_triangles(C, E, center(Circle(C, D, E)), E, C, center(Circle(C, D, E)))
By sas_anti_congruence on A, center(Circle(A, C, D)), D, D, center(Circle(A, C, D)), A we get anti_congruent_triangles(A, D, center(Circle(A, C, D)), D, A, center(Circle(A, C, D)))
By isosceles_triangle_properties on center(c), D, E we get distance(D, center(c)) == distance(E, center(c)), angle(D, E, center(c)) == angle(center(c), D, E) mod 360
By sas_anti_congruence on D, center(c), E, E, center(c), D we get anti_congruent_triangles(D, E, center(c), E, D, center(c))
By sas_anti_congruence on E, center(Circle(C, D, E)), D, D, center(Circle(C, D, E)), E we get anti_congruent_triangles(D, E, center(Circle(C, D, E)), E, D, center(Circle(C, D, E)))
By sas_anti_congruence on D, center(Circle(C, D, E)), E, E, center(Circle(C, D, E)), D we get anti_congruent_triangles(D, E, center(Circle(C, D, E)), E, D, center(Circle(C, D, E)))
By anti_similar_triangle_basic_properties on C, G, H, C, I, F we get angle(C, G, H) == 0 - angle(C, I, F) mod 360, angle(G, H, C) == 0 - angle(I, F, C) mod 360, angle(H, C, G) == 0 - angle(F, C, I) mod 360, log(distance(C, G)) + log(distance(F, I)) == log(distance(C, I)) + log(distance(G, H)), log(distance(F, I)) + log(distance(C, H)) == log(distance(G, H)) + log(distance(C, F)), log(distance(C, F)) + log(distance(C, G)) == log(distance(C, H)) + log(distance(C, I))
By power_of_a_point_definition on A, G, D, Circle(B, D, F) we get log(distance(A, G)) + log(distance(A, D)) == log(power_of_a_point(A, Circle(B, D, F)))
By isosceles_triangle_properties on center(c), E, H we get distance(E, center(c)) == distance(H, center(c)), angle(E, H, center(c)) == angle(center(c), E, H) mod 360
By altitude_definition on A, H, B, Line(A, H) we get Line(A, H) == altitude(A, B, H)
By isosceles_triangle_properties on center(c), D, H we get distance(D, center(c)) == distance(H, center(c)), angle(D, H, center(c)) == angle(center(c), D, H) mod 360
By isosceles_triangle_properties on center(c), A, I we get distance(A, center(c)) == distance(I, center(c)), angle(A, I, center(c)) == angle(center(c), A, I) mod 360
By sas_anti_congruence on C, center(Circle(C, D, E)), D, D, center(Circle(C, D, E)), C we get anti_congruent_triangles(C, D, center(Circle(C, D, E)), D, C, center(Circle(C, D, E)))
By isosceles_triangle_properties on center(Circle(B, C, E)), F, B we get distance(B, center(Circle(B, C, E))) == distance(F, center(Circle(B, C, E))), angle(F, B, center(Circle(B, C, E))) == angle(center(Circle(B, C, E)), F, B) mod 360
By sas_anti_congruence on B, center(c), E, E, center(c), B we get anti_congruent_triangles(B, E, center(c), E, B, center(c))
By sas_anti_congruence on F, center(Circle(B, C, E)), B, B, center(Circle(B, C, E)), F we get anti_congruent_triangles(B, F, center(Circle(B, C, E)), F, B, center(Circle(B, C, E)))
By isosceles_triangle_properties on center(c), H, E we get distance(E, center(c)) == distance(H, center(c)), angle(H, E, center(c)) == angle(center(c), H, E) mod 360
By altitude_definition on B, H, A, Line(B, H) we get Line(B, H) == altitude(B, A, H)
By isosceles_triangle_properties on center(c), B, E we get distance(B, center(c)) == distance(E, center(c)), angle(B, E, center(c)) == angle(center(c), B, E) mod 360
By isosceles_triangle_properties on center(c), E, I we get distance(E, center(c)) == distance(I, center(c)), angle(E, I, center(c)) == angle(center(c), E, I) mod 360
By isosceles_triangle_properties on center(Circle(B, C, E)), C, E we get distance(C, center(Circle(B, C, E))) == distance(E, center(Circle(B, C, E))), angle(C, E, center(Circle(B, C, E))) == angle(center(Circle(B, C, E)), C, E) mod 360
By isosceles_triangle_properties on center(c), H, A we get distance(A, center(c)) == distance(H, center(c)), angle(H, A, center(c)) == angle(center(c), H, A) mod 360
By sas_anti_congruence on H, center(c), E, E, center(c), H we get anti_congruent_triangles(E, H, center(c), H, E, center(c))
By sas_anti_congruence on C, center(Circle(A, C, D)), D, D, center(Circle(A, C, D)), C we get anti_congruent_triangles(C, D, center(Circle(A, C, D)), D, C, center(Circle(A, C, D)))
By sas_anti_congruence on E, center(c), A, A, center(c), E we get anti_congruent_triangles(A, E, center(c), E, A, center(c))
By isosceles_triangle_properties on center(c), I, E we get distance(E, center(c)) == distance(I, center(c)), angle(I, E, center(c)) == angle(center(c), I, E) mod 360
By sas_anti_congruence on E, center(Circle(C, D, E)), G, G, center(Circle(C, D, E)), E we get anti_congruent_triangles(E, G, center(Circle(C, D, E)), G, E, center(Circle(C, D, E)))
By sas_anti_congruence on C, center(Circle(A, C, D)), F, F, center(Circle(A, C, D)), C we get anti_congruent_triangles(C, F, center(Circle(A, C, D)), F, C, center(Circle(A, C, D)))
By isosceles_triangle_properties on center(c), D, B we get distance(B, center(c)) == distance(D, center(c)), angle(D, B, center(c)) == angle(center(c), D, B) mod 360
By isosceles_triangle_properties on center(Circle(C, D, E)), C, E we get distance(C, center(Circle(C, D, E))) == distance(E, center(Circle(C, D, E))), angle(C, E, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, E) mod 360
By isosceles_triangle_properties on center(c), A, D we get distance(A, center(c)) == distance(D, center(c)), angle(A, D, center(c)) == angle(center(c), A, D) mod 360
By sas_anti_congruence on I, center(c), D, D, center(c), I we get anti_congruent_triangles(D, I, center(c), I, D, center(c))
By sas_anti_congruence on E, center(Circle(B, C, E)), F, F, center(Circle(B, C, E)), E we get anti_congruent_triangles(E, F, center(Circle(B, C, E)), F, E, center(Circle(B, C, E)))
By sas_anti_congruence on A, center(Circle(A, C, D)), F, F, center(Circle(A, C, D)), A we get anti_congruent_triangles(A, F, center(Circle(A, C, D)), F, A, center(Circle(A, C, D)))
By sas_anti_congruence on F, center(Circle(B, C, E)), C, C, center(Circle(B, C, E)), F we get anti_congruent_triangles(C, F, center(Circle(B, C, E)), F, C, center(Circle(B, C, E)))
By sas_anti_congruence on I, center(c), E, E, center(c), I we get anti_congruent_triangles(E, I, center(c), I, E, center(c))
By sas_anti_congruence on D, center(Circle(C, D, E)), G, G, center(Circle(C, D, E)), D we get anti_congruent_triangles(D, G, center(Circle(C, D, E)), G, D, center(Circle(C, D, E)))
By sas_anti_congruence on I, center(c), A, A, center(c), I we get anti_congruent_triangles(A, I, center(c), I, A, center(c))
By isosceles_triangle_properties on center(Circle(C, D, E)), G, D we get distance(D, center(Circle(C, D, E))) == distance(G, center(Circle(C, D, E))), angle(G, D, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), G, D) mod 360
By sas_anti_congruence on B, center(c), H, H, center(c), B we get anti_congruent_triangles(B, H, center(c), H, B, center(c))
By isosceles_triangle_properties on center(c), I, A we get distance(A, center(c)) == distance(I, center(c)), angle(I, A, center(c)) == angle(center(c), I, A) mod 360
By isosceles_triangle_properties on center(Circle(B, C, E)), B, F we get distance(B, center(Circle(B, C, E))) == distance(F, center(Circle(B, C, E))), angle(B, F, center(Circle(B, C, E))) == angle(center(Circle(B, C, E)), B, F) mod 360
By sas_anti_congruence on D, center(c), A, A, center(c), D we get anti_congruent_triangles(A, D, center(c), D, A, center(c))
By sas_anti_congruence on I, center(c), B, B, center(c), I we get anti_congruent_triangles(B, I, center(c), I, B, center(c))
By sas_anti_congruence on H, center(c), D, D, center(c), H we get anti_congruent_triangles(D, H, center(c), H, D, center(c))
By sas_anti_congruence on H, center(c), I, I, center(c), H we get anti_congruent_triangles(H, I, center(c), I, H, center(c))
By power_of_a_point_definition on C, G, F, Circle(A, E, F) we get log(distance(C, G)) + log(distance(C, F)) == log(power_of_a_point(C, Circle(A, E, F)))
By power_of_a_point_definition on B, G, E, Circle(A, E, F) we get log(distance(B, G)) + log(distance(B, E)) == log(power_of_a_point(B, Circle(A, E, F)))
By isosceles_triangle_properties on center(c), B, I we get distance(B, center(c)) == distance(I, center(c)), angle(B, I, center(c)) == angle(center(c), B, I) mod 360
By sas_anti_congruence on E, center(c), H, H, center(c), E we get anti_congruent_triangles(E, H, center(c), H, E, center(c))
By sas_anti_congruence on E, center(Circle(B, C, E)), B, B, center(Circle(B, C, E)), E we get anti_congruent_triangles(B, E, center(Circle(B, C, E)), E, B, center(Circle(B, C, E)))
By sas_anti_congruence on G, center(Circle(C, D, E)), E, E, center(Circle(C, D, E)), G we get anti_congruent_triangles(E, G, center(Circle(C, D, E)), G, E, center(Circle(C, D, E)))
By sas_anti_congruence on E, center(c), D, D, center(c), E we get anti_congruent_triangles(D, E, center(c), E, D, center(c))
By isosceles_triangle_properties on center(Circle(A, C, D)), C, D we get distance(C, center(Circle(A, C, D))) == distance(D, center(Circle(A, C, D))), angle(C, D, center(Circle(A, C, D))) == angle(center(Circle(A, C, D)), C, D) mod 360
By isosceles_triangle_properties on center(c), A, E we get distance(A, center(c)) == distance(E, center(c)), angle(A, E, center(c)) == angle(center(c), A, E) mod 360
By altitude_definition on B, I, A, Line(B, I) we get Line(B, I) == altitude(B, A, I)
By sas_anti_congruence on D, center(Circle(A, C, D)), F, F, center(Circle(A, C, D)), D we get anti_congruent_triangles(D, F, center(Circle(A, C, D)), F, D, center(Circle(A, C, D)))
By isosceles_triangle_properties on center(c), I, D we get distance(D, center(c)) == distance(I, center(c)), angle(I, D, center(c)) == angle(center(c), I, D) mod 360
By isosceles_triangle_properties on center(Circle(B, C, E)), E, C we get distance(C, center(Circle(B, C, E))) == distance(E, center(Circle(B, C, E))), angle(E, C, center(Circle(B, C, E))) == angle(center(Circle(B, C, E)), E, C) mod 360
By isosceles_triangle_properties on center(c), I, H we get distance(H, center(c)) == distance(I, center(c)), angle(I, H, center(c)) == angle(center(c), I, H) mod 360
By sas_anti_congruence on D, center(Circle(A, C, D)), C, C, center(Circle(A, C, D)), D we get anti_congruent_triangles(C, D, center(Circle(A, C, D)), D, C, center(Circle(A, C, D)))
By sas_anti_congruence on D, center(c), I, I, center(c), D we get anti_congruent_triangles(D, I, center(c), I, D, center(c))
By sas_anti_congruence on A, center(c), H, H, center(c), A we get anti_congruent_triangles(A, H, center(c), H, A, center(c))
By isosceles_triangle_properties on center(Circle(C, D, E)), G, E we get distance(E, center(Circle(C, D, E))) == distance(G, center(Circle(C, D, E))), angle(G, E, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), G, E) mod 360
By isosceles_triangle_properties on center(Circle(B, C, E)), C, F we get distance(C, center(Circle(B, C, E))) == distance(F, center(Circle(B, C, E))), angle(C, F, center(Circle(B, C, E))) == angle(center(Circle(B, C, E)), C, F) mod 360
By power_of_a_point_definition on C, B, D, Circle(B, D, F) we get log(distance(B, C)) + log(distance(C, D)) == log(power_of_a_point(C, Circle(B, D, F)))
By sas_anti_congruence on F, center(Circle(A, C, D)), D, D, center(Circle(A, C, D)), F we get anti_congruent_triangles(D, F, center(Circle(A, C, D)), F, D, center(Circle(A, C, D)))
By sas_anti_congruence on B, center(c), D, D, center(c), B we get anti_congruent_triangles(B, D, center(c), D, B, center(c))
By sas_anti_congruence on H, center(c), A, A, center(c), H we get anti_congruent_triangles(A, H, center(c), H, A, center(c))
By sas_anti_congruence on D, center(c), B, B, center(c), D we get anti_congruent_triangles(B, D, center(c), D, B, center(c))
By isosceles_triangle_properties on center(Circle(C, D, E)), D, G we get distance(D, center(Circle(C, D, E))) == distance(G, center(Circle(C, D, E))), angle(D, G, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), D, G) mod 360
By sas_anti_congruence on E, center(Circle(C, D, E)), C, C, center(Circle(C, D, E)), E we get anti_congruent_triangles(C, E, center(Circle(C, D, E)), E, C, center(Circle(C, D, E)))
By power_of_a_point_definition on D, A, G, Circle(A, E, F) we get log(distance(A, D)) + log(distance(D, G)) == log(power_of_a_point(D, Circle(A, E, F)))
By isosceles_triangle_properties on center(Circle(A, C, D)), D, C we get distance(C, center(Circle(A, C, D))) == distance(D, center(Circle(A, C, D))), angle(D, C, center(Circle(A, C, D))) == angle(center(Circle(A, C, D)), D, C) mod 360
By isosceles_triangle_properties on center(c), B, D we get distance(B, center(c)) == distance(D, center(c)), angle(B, D, center(c)) == angle(center(c), B, D) mod 360
By sas_anti_congruence on D, center(Circle(C, D, E)), C, C, center(Circle(C, D, E)), D we get anti_congruent_triangles(C, D, center(Circle(C, D, E)), D, C, center(Circle(C, D, E)))
By sas_anti_congruence on C, center(Circle(B, C, E)), E, E, center(Circle(B, C, E)), C we get anti_congruent_triangles(C, E, center(Circle(B, C, E)), E, C, center(Circle(B, C, E)))
By sas_anti_congruence on G, center(Circle(C, D, E)), D, D, center(Circle(C, D, E)), G we get anti_congruent_triangles(D, G, center(Circle(C, D, E)), G, D, center(Circle(C, D, E)))
By isosceles_triangle_properties on center(c), I, B we get distance(B, center(c)) == distance(I, center(c)), angle(I, B, center(c)) == angle(center(c), I, B) mod 360
By isosceles_triangle_properties on center(Circle(B, C, E)), F, E we get distance(E, center(Circle(B, C, E))) == distance(F, center(Circle(B, C, E))), angle(F, E, center(Circle(B, C, E))) == angle(center(Circle(B, C, E)), F, E) mod 360
By isosceles_triangle_properties on center(c), H, B we get distance(B, center(c)) == distance(H, center(c)), angle(H, B, center(c)) == angle(center(c), H, B) mod 360
By sas_anti_congruence on A, center(c), D, D, center(c), A we get anti_congruent_triangles(A, D, center(c), D, A, center(c))
By isosceles_triangle_properties on center(Circle(B, C, E)), E, F we get distance(E, center(Circle(B, C, E))) == distance(F, center(Circle(B, C, E))), angle(E, F, center(Circle(B, C, E))) == angle(center(Circle(B, C, E)), E, F) mod 360
By isosceles_triangle_properties on center(Circle(A, C, D)), A, D we get distance(A, center(Circle(A, C, D))) == distance(D, center(Circle(A, C, D))), angle(A, D, center(Circle(A, C, D))) == angle(center(Circle(A, C, D)), A, D) mod 360
By isosceles_triangle_properties on center(Circle(A, C, D)), D, A we get distance(A, center(Circle(A, C, D))) == distance(D, center(Circle(A, C, D))), angle(D, A, center(Circle(A, C, D))) == angle(center(Circle(A, C, D)), D, A) mod 360
By isosceles_triangle_properties on center(Circle(A, C, D)), F, A we get distance(A, center(Circle(A, C, D))) == distance(F, center(Circle(A, C, D))), angle(F, A, center(Circle(A, C, D))) == angle(center(Circle(A, C, D)), F, A) mod 360
By isosceles_triangle_properties on center(Circle(B, C, E)), E, B we get distance(B, center(Circle(B, C, E))) == distance(E, center(Circle(B, C, E))), angle(E, B, center(Circle(B, C, E))) == angle(center(Circle(B, C, E)), E, B) mod 360
By sas_anti_congruence on F, center(Circle(B, C, E)), E, E, center(Circle(B, C, E)), F we get anti_congruent_triangles(E, F, center(Circle(B, C, E)), F, E, center(Circle(B, C, E)))
By sas_anti_congruence on C, center(Circle(B, C, E)), F, F, center(Circle(B, C, E)), C we get anti_congruent_triangles(C, F, center(Circle(B, C, E)), F, C, center(Circle(B, C, E)))
By isosceles_triangle_properties on center(Circle(A, C, D)), A, F we get distance(A, center(Circle(A, C, D))) == distance(F, center(Circle(A, C, D))), angle(A, F, center(Circle(A, C, D))) == angle(center(Circle(A, C, D)), A, F) mod 360
By isosceles_triangle_properties on center(c), D, A we get distance(A, center(c)) == distance(D, center(c)), angle(D, A, center(c)) == angle(center(c), D, A) mod 360
By isosceles_triangle_properties on center(Circle(B, C, E)), B, E we get distance(B, center(Circle(B, C, E))) == distance(E, center(Circle(B, C, E))), angle(B, E, center(Circle(B, C, E))) == angle(center(Circle(B, C, E)), B, E) mod 360
By isosceles_triangle_properties on center(Circle(C, D, E)), C, D we get distance(C, center(Circle(C, D, E))) == distance(D, center(Circle(C, D, E))), angle(C, D, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, D) mod 360
By isosceles_triangle_properties on center(Circle(C, D, E)), D, C we get distance(C, center(Circle(C, D, E))) == distance(D, center(Circle(C, D, E))), angle(D, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), D, C) mod 360
By sas_anti_congruence on F, center(Circle(A, C, D)), C, C, center(Circle(A, C, D)), F we get anti_congruent_triangles(C, F, center(Circle(A, C, D)), F, C, center(Circle(A, C, D)))
By sas_anti_congruence on D, center(c), H, H, center(c), D we get anti_congruent_triangles(D, H, center(c), H, D, center(c))
By power_of_a_point_definition on B, A, F, Circle(A, E, F) we get log(distance(A, B)) + log(distance(B, F)) == log(power_of_a_point(B, Circle(A, E, F)))
By isosceles_triangle_properties on center(c), E, A we get distance(A, center(c)) == distance(E, center(c)), angle(E, A, center(c)) == angle(center(c), E, A) mod 360
By power_of_a_point_definition on E, B, G, Circle(B, D, F) we get log(distance(B, E)) + log(distance(E, G)) == log(power_of_a_point(E, Circle(B, D, F)))
By sas_anti_congruence on F, center(Circle(A, C, D)), A, A, center(Circle(A, C, D)), F we get anti_congruent_triangles(A, F, center(Circle(A, C, D)), F, A, center(Circle(A, C, D)))
By isosceles_triangle_properties on center(Circle(C, D, E)), D, E we get distance(D, center(Circle(C, D, E))) == distance(E, center(Circle(C, D, E))), angle(D, E, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), D, E) mod 360
By isosceles_triangle_properties on center(c), H, D we get distance(D, center(c)) == distance(H, center(c)), angle(H, D, center(c)) == angle(center(c), H, D) mod 360
By sas_anti_congruence on I, center(c), H, H, center(c), I we get anti_congruent_triangles(H, I, center(c), I, H, center(c))
By isosceles_triangle_properties on center(Circle(A, C, D)), F, D we get distance(D, center(Circle(A, C, D))) == distance(F, center(Circle(A, C, D))), angle(F, D, center(Circle(A, C, D))) == angle(center(Circle(A, C, D)), F, D) mod 360
By sas_anti_congruence on A, center(c), I, I, center(c), A we get anti_congruent_triangles(A, I, center(c), I, A, center(c))
By isosceles_triangle_properties on center(Circle(A, C, D)), C, F we get distance(C, center(Circle(A, C, D))) == distance(F, center(Circle(A, C, D))), angle(C, F, center(Circle(A, C, D))) == angle(center(Circle(A, C, D)), C, F) mod 360
By isosceles_triangle_properties on center(c), D, I we get distance(D, center(c)) == distance(I, center(c)), angle(D, I, center(c)) == angle(center(c), D, I) mod 360
By isosceles_triangle_properties on center(Circle(B, C, E)), F, C we get distance(C, center(Circle(B, C, E))) == distance(F, center(Circle(B, C, E))), angle(F, C, center(Circle(B, C, E))) == angle(center(Circle(B, C, E)), F, C) mod 360
By power_of_a_point_definition on A, F, B, Circle(B, D, F) we get log(distance(A, F)) + log(distance(A, B)) == log(power_of_a_point(A, Circle(B, D, F)))
By sas_anti_congruence on H, center(c), B, B, center(c), H we get anti_congruent_triangles(B, H, center(c), H, B, center(c))
By sas_anti_congruence on E, center(Circle(B, C, E)), C, C, center(Circle(B, C, E)), E we get anti_congruent_triangles(C, E, center(Circle(B, C, E)), E, C, center(Circle(B, C, E)))
By isosceles_triangle_properties on center(c), A, H we get distance(A, center(c)) == distance(H, center(c)), angle(A, H, center(c)) == angle(center(c), A, H) mod 360
By sas_anti_congruence on E, center(c), I, I, center(c), E we get anti_congruent_triangles(E, I, center(c), I, E, center(c))
By power_of_a_point_definition on C, E, A, Circle(A, E, F) we get log(distance(C, E)) + log(distance(A, C)) == log(power_of_a_point(C, Circle(A, E, F)))
By sas_anti_congruence on A, center(c), E, E, center(c), A we get anti_congruent_triangles(A, E, center(c), E, A, center(c))
By isosceles_triangle_properties on center(Circle(A, C, D)), D, F we get distance(D, center(Circle(A, C, D))) == distance(F, center(Circle(A, C, D))), angle(D, F, center(Circle(A, C, D))) == angle(center(Circle(A, C, D)), D, F) mod 360
By isosceles_triangle_properties on center(Circle(C, D, E)), E, D we get distance(D, center(Circle(C, D, E))) == distance(E, center(Circle(C, D, E))), angle(E, D, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), E, D) mod 360
By sas_anti_congruence on B, center(Circle(B, C, E)), E, E, center(Circle(B, C, E)), B we get anti_congruent_triangles(B, E, center(Circle(B, C, E)), E, B, center(Circle(B, C, E)))
By isosceles_triangle_properties on center(Circle(A, C, D)), F, C we get distance(C, center(Circle(A, C, D))) == distance(F, center(Circle(A, C, D))), angle(F, C, center(Circle(A, C, D))) == angle(center(Circle(A, C, D)), F, C) mod 360
By sas_anti_congruence on D, center(Circle(A, C, D)), A, A, center(Circle(A, C, D)), D we get anti_congruent_triangles(A, D, center(Circle(A, C, D)), D, A, center(Circle(A, C, D)))
By excenter_concurrency_alternate on E, F, D we get excenter(E, D, F) in external_angle_bisector(D, F, E), excenter(E, D, F) in external_angle_bisector(E, D, F), excenter(E, D, F) in internal_angle_bisector(D, E, F)
By excenter_concurrency_alternate on F, D, E we get excenter(F, D, E) in external_angle_bisector(E, D, F), excenter(F, D, E) in external_angle_bisector(D, E, F), excenter(F, D, E) in internal_angle_bisector(D, F, E)
By incenter_concurrency on E, F, D we get incenter(D, E, F) in internal_angle_bisector(D, F, E), incenter(D, E, F) in internal_angle_bisector(E, D, F), incenter(D, E, F) in internal_angle_bisector(D, E, F)
By excenter_concurrency on D, F, E we get excenter(D, E, F) in external_angle_bisector(D, F, E), excenter(D, E, F) in external_angle_bisector(D, E, F), excenter(D, E, F) in internal_angle_bisector(E, D, F)
By concurrent_sufficient_conditions on Line(H, center(c)), Line(E, H), Line(B, H) we get concurrent(Line(B, H), Line(E, H), Line(H, center(c)))
By concurrent_sufficient_conditions on j, Line(E, center(Circle(B, C, E))), Line(E, I) we get concurrent(j, Line(E, I), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(E, F), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on j, Line(E, center(c)), Line(E, F) we get concurrent(j, Line(E, F), Line(E, center(c)))
By concurrent_sufficient_conditions on g, Line(D, H), Line(D, center(Circle(C, D, E))) we get concurrent(g, Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, center(c)), i, Line(A, center(Circle(A, C, D))) we get concurrent(i, Line(A, center(c)), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(B, C, E))), f we get concurrent(f, Line(D, F), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(B, C, E))), Line(C, center(Circle(C, D, E))), k we get concurrent(k, Line(C, center(Circle(B, C, E))), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(C, D, E))), j we get concurrent(j, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(D, E), Line(D, center(Circle(C, D, E))) we get concurrent(g, Line(D, E), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, H), i we get concurrent(i, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(D, E), Line(E, center(c)) we get concurrent(Line(D, E), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(D, E), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, center(Circle(A, C, D))), Line(D, E) we get concurrent(Line(D, E), Line(D, center(c)), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, H), Line(D, E) we get concurrent(Line(D, E), Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(F, center(Circle(A, C, D))), Line(F, H) we get concurrent(Line(F, H), Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, C, E))), j, Line(B, I) we get concurrent(j, Line(B, I), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(F, center(Circle(A, C, D))), Line(D, F) we get concurrent(Line(D, F), Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(G, H), Line(H, center(c)) we get concurrent(Line(E, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(G, H), Line(A, H), Line(B, H) we get concurrent(Line(A, H), Line(B, H), Line(G, H))
By concurrent_sufficient_conditions on g, Line(C, F), Line(C, center(Circle(A, C, D))) we get concurrent(g, Line(C, F), Line(C, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on j, i, Line(G, center(Circle(C, D, E))) we get concurrent(i, j, Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(B, C, E))), Line(F, I) we get concurrent(Line(E, F), Line(F, I), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, I), Line(I, center(c)), Line(E, I) we get concurrent(Line(D, I), Line(E, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, I), k, Line(I, center(c)) we get concurrent(k, Line(D, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(C, D, E))), Line(E, H) we get concurrent(Line(E, F), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(E, I), Line(G, I) we get concurrent(Line(E, I), Line(G, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, I), g, Line(D, center(Circle(A, C, D))) we get concurrent(g, Line(D, I), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, H), k, Line(H, center(c)) we get concurrent(k, Line(E, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, E), Line(D, F) we get concurrent(Line(D, E), Line(D, F), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(G, I), Line(A, I), Line(I, center(c)) we get concurrent(Line(A, I), Line(G, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(B, H), k we get concurrent(k, Line(B, H), Line(F, H))
By concurrent_sufficient_conditions on Line(D, E), Line(E, H), Line(E, center(c)) we get concurrent(Line(D, E), Line(E, H), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(A, H), Line(H, center(c)), k we get concurrent(k, Line(A, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, I), h, Line(E, center(Circle(C, D, E))) we get concurrent(h, Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, center(Circle(B, C, E))), Line(E, I) we get concurrent(Line(E, I), Line(E, center(c)), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, F), f, Line(F, I) we get concurrent(f, Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on i, Line(D, center(Circle(A, C, D))), Line(D, F) we get concurrent(i, Line(D, F), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(G, H), Line(B, H), Line(H, center(c)) we get concurrent(Line(B, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(E, center(c)), Line(B, center(c)) we get concurrent(Line(B, center(c)), Line(D, center(c)), Line(E, center(c)))
By concurrent_sufficient_conditions on f, Line(C, F), Line(F, I) we get concurrent(f, Line(C, F), Line(F, I))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), g, Line(D, center(Circle(C, D, E))) we get concurrent(g, Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(B, C, E))), Line(C, center(Circle(C, D, E))), Line(C, center(Circle(A, C, D))) we get concurrent(Line(C, center(Circle(A, C, D))), Line(C, center(Circle(B, C, E))), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on j, f, Line(B, center(Circle(B, C, E))) we get concurrent(f, j, Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, H), g, Line(D, center(Circle(A, C, D))) we get concurrent(g, Line(D, H), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(I, center(c)), k, Line(A, I) we get concurrent(k, Line(A, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(E, center(c)), j, Line(D, E) we get concurrent(j, Line(D, E), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(G, I), Line(E, I), Line(F, I) we get concurrent(Line(E, I), Line(F, I), Line(G, I))
By concurrent_sufficient_conditions on Line(D, F), Line(D, center(Circle(A, C, D))), Line(D, H) we get concurrent(Line(D, F), Line(D, H), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(Circle(B, C, E))), Line(E, F) we get concurrent(Line(E, F), Line(F, I), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(B, I), Line(I, center(c)), Line(G, I) we get concurrent(Line(B, I), Line(G, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(E, I), Line(E, center(Circle(C, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(H, center(c)), Line(B, center(c)) we get concurrent(Line(B, center(c)), Line(H, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(B, I), k, Line(F, I) we get concurrent(k, Line(B, I), Line(F, I))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(E, F), Line(E, I) we get concurrent(Line(E, F), Line(E, I), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), k, Line(C, center(Circle(B, C, E))) we get concurrent(k, Line(C, center(Circle(B, C, E))), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), i, Line(D, H) we get concurrent(i, Line(D, H), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(G, I), Line(E, I), Line(D, I) we get concurrent(Line(D, I), Line(E, I), Line(G, I))
By concyclic_sufficient_conditions_v0 on G, F, I, H we get concyclic(F, G, H, I)
By concurrent_sufficient_conditions on h, Line(C, F), Line(C, center(Circle(B, C, E))) we get concurrent(h, Line(C, F), Line(C, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(A, H), Line(A, center(c)), i we get concurrent(i, Line(A, H), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(A, I), Line(A, center(Circle(A, C, D))), Line(A, center(c)) we get concurrent(Line(A, I), Line(A, center(c)), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, F), Line(C, F), Line(F, I) we get concurrent(Line(C, F), Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(E, F), Line(F, H), Line(F, center(Circle(A, C, D))) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(C, D, E))), j we get concurrent(j, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(H, center(c)), Line(B, center(c)) we get concurrent(Line(B, center(c)), Line(E, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, F), Line(G, I), Line(G, H) we get concurrent(Line(C, F), Line(G, H), Line(G, I))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, D, E))), i, j we get concurrent(i, j, Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, H), j, Line(E, center(c)) we get concurrent(j, Line(E, H), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(D, I), k we get concurrent(k, Line(D, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(F, I), Line(G, I) we get concurrent(Line(F, I), Line(G, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, F), i we get concurrent(i, Line(D, F), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on j, Line(E, center(Circle(C, D, E))), Line(E, I) we get concurrent(j, Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, j, Line(G, H) we get concurrent(i, j, Line(G, H))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), h, Line(E, I) we get concurrent(h, Line(E, I), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on h, Line(A, H), Line(A, center(c)) we get concurrent(h, Line(A, H), Line(A, center(c)))
By concurrent_sufficient_conditions on k, Line(D, I), Line(I, center(c)) we get concurrent(k, Line(D, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(B, H), Line(G, H) we get concurrent(Line(B, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(B, H), Line(E, H), Line(F, H) we get concurrent(Line(B, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(G, I), Line(D, I) we get concurrent(Line(D, I), Line(G, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(Circle(A, C, D))), Line(D, center(c)) we get concurrent(Line(D, E), Line(D, center(c)), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(G, H), j, i we get concurrent(i, j, Line(G, H))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, I), g we get concurrent(g, Line(D, I), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, F), i, Line(D, center(c)) we get concurrent(i, Line(D, F), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, H), Line(E, center(Circle(B, C, E))) we get concurrent(Line(E, H), Line(E, center(c)), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(G, H), Line(D, H) we get concurrent(Line(D, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(F, H), Line(F, center(Circle(A, C, D))) we get concurrent(Line(F, H), Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, center(c)), Line(D, E) we get concurrent(Line(D, E), Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, k, Line(C, center(Circle(B, C, E))) we get concurrent(h, k, Line(C, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(G, I), i, Line(G, H) we get concurrent(i, Line(G, H), Line(G, I))
By concurrent_sufficient_conditions on Line(E, F), Line(F, H), Line(F, center(Circle(B, C, E))) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, I), Line(D, center(Circle(A, C, D))) we get concurrent(Line(D, I), Line(D, center(c)), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, H), Line(H, center(c)), Line(A, H) we get concurrent(Line(A, H), Line(E, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(I, center(c)), Line(B, center(c)) we get concurrent(Line(B, center(c)), Line(D, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on k, g, Line(C, center(Circle(C, D, E))) we get concurrent(g, k, Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, I), Line(I, center(c)), Line(A, I) we get concurrent(Line(A, I), Line(D, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(Circle(C, D, E))), g we get concurrent(g, Line(D, E), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, F), k, Line(C, center(Circle(B, C, E))) we get concurrent(k, Line(C, F), Line(C, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(E, H), Line(A, H) we get concurrent(Line(A, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(B, H), k, Line(F, H) we get concurrent(k, Line(B, H), Line(F, H))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, F), h we get concurrent(h, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(A, C, D))), Line(E, F) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(B, H), Line(G, H), Line(D, H) we get concurrent(Line(B, H), Line(D, H), Line(G, H))
By concurrent_sufficient_conditions on Line(A, I), Line(I, center(c)), Line(E, I) we get concurrent(Line(A, I), Line(E, I), Line(I, center(c)))
By concurrent_sufficient_conditions on k, Line(F, H), Line(B, H) we get concurrent(k, Line(B, H), Line(F, H))
By concurrent_sufficient_conditions on Line(A, H), Line(A, center(Circle(A, C, D))), i we get concurrent(i, Line(A, H), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(B, I), j, Line(B, center(Circle(B, C, E))) we get concurrent(j, Line(B, I), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), i, Line(D, F) we get concurrent(i, Line(D, F), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), f, Line(D, F) we get concurrent(f, Line(D, F), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on f, Line(B, I), Line(B, center(Circle(B, C, E))) we get concurrent(f, Line(B, I), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(G, H), Line(B, H), Line(E, H) we get concurrent(Line(B, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on k, Line(D, H), Line(H, center(c)) we get concurrent(k, Line(D, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(E, F), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(E, center(c)), h we get concurrent(h, Line(E, center(c)), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, F), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, C, E))), f, Line(B, H) we get concurrent(f, Line(B, H), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(A, center(c)), Line(E, center(c)) we get concurrent(Line(A, center(c)), Line(E, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(E, H), Line(E, center(Circle(B, C, E))), j we get concurrent(j, Line(E, H), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(H, center(c)), Line(D, center(c)) we get concurrent(Line(D, center(c)), Line(H, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(G, H), Line(C, F), j we get concurrent(j, Line(C, F), Line(G, H))
By concurrent_sufficient_conditions on i, Line(G, H), Line(G, I) we get concurrent(i, Line(G, H), Line(G, I))
By concurrent_sufficient_conditions on f, Line(F, center(Circle(B, C, E))), Line(D, F) we get concurrent(f, Line(D, F), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(E, I), Line(A, I) we get concurrent(Line(A, I), Line(E, I), Line(F, I))
By concurrent_sufficient_conditions on Line(F, I), Line(E, F), Line(F, center(Circle(B, C, E))) we get concurrent(Line(E, F), Line(F, I), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(B, I), Line(F, I), Line(A, I) we get concurrent(Line(A, I), Line(B, I), Line(F, I))
By concurrent_sufficient_conditions on Line(B, I), Line(A, I), Line(I, center(c)) we get concurrent(Line(A, I), Line(B, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(A, I), Line(A, center(c)), i we get concurrent(i, Line(A, I), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(A, I), i we get concurrent(i, Line(A, I), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(A, H), Line(F, H) we get concurrent(Line(A, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(B, C, E))), h we get concurrent(h, Line(E, F), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), j, Line(E, H) we get concurrent(j, Line(E, H), Line(E, center(c)))
By concurrent_sufficient_conditions on k, Line(C, center(Circle(C, D, E))), g we get concurrent(g, k, Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, F), g we get concurrent(g, Line(D, F), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, center(Circle(C, D, E))), Line(D, I) we get concurrent(Line(D, I), Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(B, C, E))), Line(F, center(Circle(A, C, D))) we get concurrent(Line(F, H), Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(E, H), j we get concurrent(j, Line(E, H), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on g, Line(D, center(Circle(C, D, E))), Line(D, E) we get concurrent(g, Line(D, E), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(G, I), Line(B, I) we get concurrent(Line(B, I), Line(F, I), Line(G, I))
By concurrent_sufficient_conditions on Line(B, I), Line(G, I), Line(I, center(c)) we get concurrent(Line(B, I), Line(G, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), j, Line(E, F) we get concurrent(j, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, center(Circle(C, D, E))), i we get concurrent(i, Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), g, Line(D, E) we get concurrent(g, Line(D, E), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(E, center(c)), j we get concurrent(h, j, Line(E, center(c)))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(C, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))) we get concurrent(Line(C, center(Circle(C, D, E))), Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, H), g we get concurrent(g, Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, Line(E, I), Line(F, I) we get concurrent(k, Line(E, I), Line(F, I))
By concurrent_sufficient_conditions on Line(E, F), Line(E, I), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(E, H), Line(E, F) we get concurrent(Line(E, F), Line(E, H), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on k, Line(G, I), Line(E, I) we get concurrent(k, Line(E, I), Line(G, I))
By concurrent_sufficient_conditions on Line(F, H), Line(E, F), Line(F, I) we get concurrent(Line(E, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(C, F), h, Line(C, center(Circle(B, C, E))) we get concurrent(h, Line(C, F), Line(C, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(F, center(Circle(A, C, D))), f we get concurrent(f, Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on g, Line(C, center(Circle(A, C, D))), k we get concurrent(g, k, Line(C, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(D, E), Line(E, center(c)) we get concurrent(Line(D, E), Line(E, center(c)), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on j, Line(G, H), i we get concurrent(i, j, Line(G, H))
By concurrent_sufficient_conditions on i, Line(A, H), Line(A, center(Circle(A, C, D))) we get concurrent(i, Line(A, H), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(G, I), Line(E, I), Line(I, center(c)) we get concurrent(Line(E, I), Line(G, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(I, center(c)), k, Line(D, I) we get concurrent(k, Line(D, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(A, I), Line(A, center(Circle(A, C, D))), f we get concurrent(f, Line(A, I), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, H), Line(A, H), Line(G, H) we get concurrent(Line(A, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on k, Line(H, center(c)), Line(E, H) we get concurrent(k, Line(E, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(G, H), j, Line(G, I) we get concurrent(j, Line(G, H), Line(G, I))
By concurrent_sufficient_conditions on Line(A, H), Line(A, I), Line(A, center(Circle(A, C, D))) we get concurrent(Line(A, H), Line(A, I), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, center(c)), Line(E, center(Circle(B, C, E))) we get concurrent(Line(E, center(c)), Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, H), j we get concurrent(j, Line(E, H), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(C, center(Circle(B, C, E))), Line(C, F), h we get concurrent(h, Line(C, F), Line(C, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on h, Line(E, center(Circle(C, D, E))), Line(E, center(c)) we get concurrent(h, Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, I), Line(D, E), Line(D, center(c)) we get concurrent(Line(D, E), Line(D, I), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(G, I), Line(A, I), Line(B, I) we get concurrent(Line(A, I), Line(B, I), Line(G, I))
By concurrent_sufficient_conditions on Line(D, F), Line(D, E), Line(D, center(Circle(A, C, D))) we get concurrent(Line(D, E), Line(D, F), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(D, center(c)), Line(I, center(c)) we get concurrent(Line(A, center(c)), Line(D, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, F), Line(D, center(c)), Line(D, I) we get concurrent(Line(D, F), Line(D, I), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(G, I), Line(A, I) we get concurrent(Line(A, I), Line(G, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(A, I), Line(G, I), Line(I, center(c)) we get concurrent(Line(A, I), Line(G, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(A, I), Line(A, H), Line(A, center(Circle(A, C, D))) we get concurrent(Line(A, H), Line(A, I), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(Circle(A, C, D))), g we get concurrent(g, Line(D, E), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, H), Line(F, H), Line(A, H) we get concurrent(Line(A, H), Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on Line(E, I), Line(D, I), Line(F, I) we get concurrent(Line(D, I), Line(E, I), Line(F, I))
By concurrent_sufficient_conditions on Line(D, F), Line(D, I), Line(D, center(c)) we get concurrent(Line(D, F), Line(D, I), Line(D, center(c)))
By concurrent_sufficient_conditions on i, Line(D, center(Circle(A, C, D))), g we get concurrent(g, i, Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(D, center(c)), Line(E, center(c)) we get concurrent(Line(D, center(c)), Line(E, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, I), Line(D, center(c)), Line(D, center(Circle(A, C, D))) we get concurrent(Line(D, I), Line(D, center(c)), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(B, H), k we get concurrent(k, Line(B, H), Line(H, center(c)))
By concurrent_sufficient_conditions on f, Line(C, F), Line(F, center(Circle(A, C, D))) we get concurrent(f, Line(C, F), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, I), Line(D, center(Circle(A, C, D))), Line(D, center(c)) we get concurrent(Line(D, I), Line(D, center(c)), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, center(c)), Line(E, I) we get concurrent(Line(E, I), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(C, center(Circle(C, D, E))), h we get concurrent(g, h, Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, Line(F, H), Line(E, H) we get concurrent(k, Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(G, H), k we get concurrent(k, Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, H), Line(D, E), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(C, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, center(c)), g we get concurrent(g, Line(D, center(c)), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on k, Line(F, I), Line(G, I) we get concurrent(k, Line(F, I), Line(G, I))
By concurrent_sufficient_conditions on g, Line(D, center(Circle(C, D, E))), Line(D, F) we get concurrent(g, Line(D, F), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(H, center(c)), Line(E, center(c)) we get concurrent(Line(E, center(c)), Line(H, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(C, F), Line(F, H) we get concurrent(Line(C, F), Line(F, H), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(G, H), Line(F, H), k we get concurrent(k, Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(D, I), Line(D, center(c)), Line(D, F) we get concurrent(Line(D, F), Line(D, I), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(C, center(Circle(A, C, D))), k, Line(C, center(Circle(C, D, E))) we get concurrent(k, Line(C, center(Circle(A, C, D))), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(C, F), Line(F, I) we get concurrent(Line(C, F), Line(F, I), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(B, H), Line(G, H), k we get concurrent(k, Line(B, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(F, H), Line(E, F) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, I), Line(D, center(c)), i we get concurrent(i, Line(D, I), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(E, H), k, Line(F, H) we get concurrent(k, Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(G, I), Line(B, I), Line(E, I) we get concurrent(Line(B, I), Line(E, I), Line(G, I))
By concurrent_sufficient_conditions on Line(C, center(Circle(A, C, D))), Line(C, F), k we get concurrent(k, Line(C, F), Line(C, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on i, Line(D, center(Circle(C, D, E))), Line(D, E) we get concurrent(i, Line(D, E), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, Line(B, H), Line(F, H) we get concurrent(k, Line(B, H), Line(F, H))
By concurrent_sufficient_conditions on i, Line(G, center(Circle(C, D, E))), Line(G, I) we get concurrent(i, Line(G, I), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(E, F), Line(F, H) we get concurrent(Line(E, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(H, center(c)), k, Line(F, H) we get concurrent(k, Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(F, H), Line(E, F) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, I), Line(F, I), Line(G, I) we get concurrent(Line(D, I), Line(F, I), Line(G, I))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, E), i we get concurrent(i, Line(D, E), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(D, E), Line(E, H) we get concurrent(Line(D, E), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, I), Line(B, center(Circle(B, C, E))), f we get concurrent(f, Line(B, I), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, H), h we get concurrent(h, Line(E, H), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), h, Line(E, F) we get concurrent(h, Line(E, F), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, H), Line(E, I) we get concurrent(Line(E, H), Line(E, I), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, D, E))), j, Line(G, H) we get concurrent(j, Line(G, H), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, H), j, Line(C, F) we get concurrent(j, Line(C, F), Line(G, H))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(A, C, D))), f we get concurrent(f, Line(D, F), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(B, C, E))), j we get concurrent(j, Line(E, F), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, I), Line(F, I), Line(I, center(c)) we get concurrent(Line(E, I), Line(F, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(D, F), Line(D, center(c)) we get concurrent(i, Line(D, F), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), k, Line(E, H) we get concurrent(k, Line(E, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(C, F), Line(F, center(Circle(A, C, D))) we get concurrent(Line(C, F), Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), i, Line(D, center(c)) we get concurrent(i, Line(D, center(c)), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, center(c)), i, g we get concurrent(g, i, Line(D, center(c)))
By concurrent_sufficient_conditions on Line(D, I), Line(B, I), Line(G, I) we get concurrent(Line(B, I), Line(D, I), Line(G, I))
By concurrent_sufficient_conditions on Line(B, H), Line(F, H), Line(G, H) we get concurrent(Line(B, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(A, I), Line(D, I), Line(G, I) we get concurrent(Line(A, I), Line(D, I), Line(G, I))
By concurrent_sufficient_conditions on Line(D, H), Line(D, F), Line(D, center(Circle(A, C, D))) we get concurrent(Line(D, F), Line(D, H), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(E, H), k we get concurrent(k, Line(E, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(E, F), Line(C, F) we get concurrent(Line(C, F), Line(E, F), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on f, Line(F, H), Line(F, center(Circle(A, C, D))) we get concurrent(f, Line(F, H), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, H), Line(E, center(c)) we get concurrent(Line(E, F), Line(E, H), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, C, D))), Line(F, center(Circle(A, C, D))), Line(D, center(Circle(A, C, D))) we get concurrent(Line(A, center(Circle(A, C, D))), Line(D, center(Circle(A, C, D))), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), Line(C, center(Circle(B, C, E))), Line(C, center(Circle(A, C, D))) we get concurrent(Line(C, center(Circle(A, C, D))), Line(C, center(Circle(B, C, E))), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, H), Line(F, H), Line(A, H) we get concurrent(Line(A, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(E, H), Line(E, F), Line(E, center(c)) we get concurrent(Line(E, F), Line(E, H), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(B, C, E))), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, center(c)), i we get concurrent(i, Line(D, center(c)), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(C, F), Line(F, H), Line(D, F) we get concurrent(Line(C, F), Line(D, F), Line(F, H))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, H), i we get concurrent(i, Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(A, center(c)), Line(E, center(c)) we get concurrent(Line(A, center(c)), Line(D, center(c)), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), Line(F, H) we get concurrent(Line(D, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(B, center(c)), Line(E, center(c)) we get concurrent(Line(B, center(c)), Line(D, center(c)), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(E, I), h we get concurrent(h, Line(E, I), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(A, H), Line(H, center(c)), Line(G, H) we get concurrent(Line(A, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(B, I), Line(A, I), Line(F, I) we get concurrent(Line(A, I), Line(B, I), Line(F, I))
By concurrent_sufficient_conditions on k, Line(A, I), Line(I, center(c)) we get concurrent(k, Line(A, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, C, D))), Line(A, center(c)), Line(A, I) we get concurrent(Line(A, I), Line(A, center(c)), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(E, H), Line(E, I) we get concurrent(Line(E, H), Line(E, I), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, H), Line(E, center(c)) we get concurrent(Line(E, H), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(E, center(Circle(C, D, E))), Line(E, center(Circle(B, C, E))) we get concurrent(Line(E, H), Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, H), Line(E, H), Line(G, H) we get concurrent(Line(B, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, center(Circle(C, D, E))), Line(E, H) we get concurrent(Line(E, H), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, F), Line(E, F), Line(F, H) we get concurrent(Line(C, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(F, I), Line(C, F), Line(E, F) we get concurrent(Line(C, F), Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(B, I), Line(E, I) we get concurrent(Line(B, I), Line(E, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), g, i we get concurrent(g, i, Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(A, C, D))), Line(C, center(Circle(C, D, E))), g we get concurrent(g, Line(C, center(Circle(A, C, D))), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), i, Line(D, center(Circle(C, D, E))) we get concurrent(i, Line(D, E), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, H), Line(D, F) we get concurrent(Line(D, F), Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on j, h, Line(E, center(Circle(C, D, E))) we get concurrent(h, j, Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(F, H), Line(A, H) we get concurrent(Line(A, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on f, Line(E, F), Line(F, H) we get concurrent(f, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(C, center(Circle(B, C, E))), Line(F, center(Circle(B, C, E))) we get concurrent(Line(C, center(Circle(B, C, E))), Line(E, center(Circle(B, C, E))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(A, I), k, Line(G, I) we get concurrent(k, Line(A, I), Line(G, I))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, F), Line(D, I) we get concurrent(Line(D, F), Line(D, I), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, H), Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, H), Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, C, D))), Line(D, center(Circle(A, C, D))), Line(F, center(Circle(A, C, D))) we get concurrent(Line(A, center(Circle(A, C, D))), Line(D, center(Circle(A, C, D))), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, H), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(H, center(c)), Line(A, center(c)) we get concurrent(Line(A, center(c)), Line(H, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(E, H), Line(E, center(Circle(B, C, E))), Line(E, F) we get concurrent(Line(E, F), Line(E, H), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on i, Line(G, I), j we get concurrent(i, j, Line(G, I))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(I, center(c)), Line(A, center(c)) we get concurrent(Line(A, center(c)), Line(E, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(D, center(c)), Line(H, center(c)) we get concurrent(Line(A, center(c)), Line(D, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, I), Line(E, H) we get concurrent(Line(E, H), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, H), h, Line(E, center(c)) we get concurrent(h, Line(E, H), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(B, center(c)), Line(I, center(c)), Line(D, center(c)) we get concurrent(Line(B, center(c)), Line(D, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(C, center(Circle(A, C, D))), k, Line(C, center(Circle(B, C, E))) we get concurrent(k, Line(C, center(Circle(A, C, D))), Line(C, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(A, C, D))), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, H), g, Line(D, center(c)) we get concurrent(g, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on k, Line(F, H), Line(A, H) we get concurrent(k, Line(A, H), Line(F, H))
By concurrent_sufficient_conditions on Line(E, I), Line(B, I), Line(I, center(c)) we get concurrent(Line(B, I), Line(E, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(G, H), Line(H, center(c)), Line(A, H) we get concurrent(Line(A, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, center(Circle(B, C, E))), Line(D, E) we get concurrent(Line(D, E), Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, center(c)), j, g we get concurrent(g, j, Line(B, center(c)))
By concurrent_sufficient_conditions on Line(D, F), Line(C, F), Line(F, center(Circle(B, C, E))) we get concurrent(Line(C, F), Line(D, F), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(G, H), Line(A, H), Line(E, H) we get concurrent(Line(A, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(Circle(A, C, D))), i we get concurrent(i, Line(D, E), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(G, I), k, Line(D, I) we get concurrent(k, Line(D, I), Line(G, I))
By concurrent_sufficient_conditions on j, Line(B, center(c)), Line(B, H) we get concurrent(j, Line(B, H), Line(B, center(c)))
By concurrent_sufficient_conditions on Line(E, F), j, Line(E, center(Circle(C, D, E))) we get concurrent(j, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), f, Line(F, center(Circle(B, C, E))) we get concurrent(f, Line(E, F), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(D, E), Line(E, center(Circle(B, C, E))) we get concurrent(Line(D, E), Line(E, H), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(B, I), Line(B, H), Line(B, center(c)) we get concurrent(Line(B, H), Line(B, I), Line(B, center(c)))
By concurrent_sufficient_conditions on Line(C, F), Line(G, I), i we get concurrent(i, Line(C, F), Line(G, I))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), j, Line(E, center(Circle(C, D, E))) we get concurrent(j, Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, I), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(D, I), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, H), k, Line(F, H) we get concurrent(k, Line(A, H), Line(F, H))
By concurrent_sufficient_conditions on Line(D, F), Line(D, center(c)), g we get concurrent(g, Line(D, F), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(A, C, D))), f we get concurrent(f, Line(F, H), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on j, Line(E, center(c)), Line(E, center(Circle(B, C, E))) we get concurrent(j, Line(E, center(c)), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on g, Line(D, center(c)), Line(D, I) we get concurrent(g, Line(D, I), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), Line(C, center(Circle(A, C, D))), k we get concurrent(k, Line(C, center(Circle(A, C, D))), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, Line(F, I), Line(D, I) we get concurrent(k, Line(D, I), Line(F, I))
By concurrent_sufficient_conditions on Line(D, H), Line(D, center(Circle(C, D, E))), Line(D, center(Circle(A, C, D))) we get concurrent(Line(D, H), Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(Circle(A, C, D))), f we get concurrent(f, Line(F, I), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(D, E), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, H), Line(D, center(c)), Line(D, I) we get concurrent(Line(D, H), Line(D, I), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(A, H), i we get concurrent(i, Line(A, H), Line(A, center(c)))
By concurrent_sufficient_conditions on k, Line(C, center(Circle(A, C, D))), Line(C, center(Circle(C, D, E))) we get concurrent(k, Line(C, center(Circle(A, C, D))), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on j, Line(G, H), Line(G, center(Circle(C, D, E))) we get concurrent(j, Line(G, H), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(D, F), Line(F, center(Circle(B, C, E))) we get concurrent(Line(D, F), Line(F, I), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on k, Line(F, I), Line(I, center(c)) we get concurrent(k, Line(F, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, D, E))), j, i we get concurrent(i, j, Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, I), Line(D, center(Circle(A, C, D))), g we get concurrent(g, Line(D, I), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), i, Line(D, I) we get concurrent(i, Line(D, I), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, H), Line(E, center(Circle(B, C, E))) we get concurrent(Line(D, E), Line(E, H), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, I), g we get concurrent(g, Line(D, I), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, F), i, Line(G, H) we get concurrent(i, Line(C, F), Line(G, H))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(E, F), Line(E, center(c)) we get concurrent(Line(E, F), Line(E, center(c)), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, center(Circle(A, C, D))), g we get concurrent(g, Line(D, center(c)), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), f, Line(F, I) we get concurrent(f, Line(F, I), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), h, Line(E, F) we get concurrent(h, Line(E, F), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(G, I), Line(D, I), k we get concurrent(k, Line(D, I), Line(G, I))
By concurrent_sufficient_conditions on i, j, Line(G, center(Circle(C, D, E))) we get concurrent(i, j, Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(E, F), Line(F, center(Circle(B, C, E))) we get concurrent(Line(E, F), Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, center(Circle(C, D, E))), Line(D, H) we get concurrent(Line(D, H), Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, H), Line(H, center(c)), Line(A, H) we get concurrent(Line(A, H), Line(B, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, H), Line(D, E), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(B, C, E))), Line(C, F), k we get concurrent(k, Line(C, F), Line(C, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(C, F), Line(G, H), i we get concurrent(i, Line(C, F), Line(G, H))
By concurrent_sufficient_conditions on Line(D, F), Line(F, I), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, center(c)), Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, I), Line(D, center(c)), Line(D, E) we get concurrent(Line(D, E), Line(D, I), Line(D, center(c)))
By concurrent_sufficient_conditions on i, Line(D, center(c)), Line(D, E) we get concurrent(i, Line(D, E), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, F), j we get concurrent(j, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, H), h, Line(E, center(Circle(B, C, E))) we get concurrent(h, Line(E, H), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(A, H), Line(A, I) we get concurrent(Line(A, H), Line(A, I), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, center(Circle(A, C, D))), Line(D, I) we get concurrent(Line(D, I), Line(D, center(c)), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, I), Line(D, F), Line(D, center(c)) we get concurrent(Line(D, F), Line(D, I), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(A, H), Line(F, H), k we get concurrent(k, Line(A, H), Line(F, H))
By concurrent_sufficient_conditions on Line(G, H), Line(H, center(c)), k we get concurrent(k, Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, I), Line(C, F), f we get concurrent(f, Line(C, F), Line(F, I))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(E, center(c)), Line(A, center(c)) we get concurrent(Line(A, center(c)), Line(D, center(c)), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, H), Line(E, center(c)), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, H), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(D, E), Line(E, center(Circle(C, D, E))) we get concurrent(h, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(B, H), Line(G, H) we get concurrent(Line(B, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), Line(E, center(Circle(B, C, E))) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(C, D, E))), h we get concurrent(h, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, F), Line(F, I), Line(F, H) we get concurrent(Line(C, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on k, Line(C, center(Circle(C, D, E))), Line(C, center(Circle(B, C, E))) we get concurrent(k, Line(C, center(Circle(B, C, E))), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, center(c)), Line(D, F) we get concurrent(Line(D, F), Line(D, center(c)), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on j, Line(G, I), Line(G, H) we get concurrent(j, Line(G, H), Line(G, I))
By concurrent_sufficient_conditions on f, Line(F, center(Circle(B, C, E))), Line(F, center(Circle(A, C, D))) we get concurrent(f, Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on i, j, Line(G, I) we get concurrent(i, j, Line(G, I))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(F, H), Line(F, center(Circle(B, C, E))) we get concurrent(Line(F, H), Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(C, F), Line(D, F), Line(F, center(Circle(B, C, E))) we get concurrent(Line(C, F), Line(D, F), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, H), Line(G, H), k we get concurrent(k, Line(D, H), Line(G, H))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, I), Line(E, F) we get concurrent(Line(E, F), Line(E, I), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), j, Line(E, I) we get concurrent(j, Line(E, I), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(G, I), Line(E, I), Line(B, I) we get concurrent(Line(B, I), Line(E, I), Line(G, I))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, I), Line(D, F) we get concurrent(Line(D, F), Line(D, I), Line(D, center(c)))
By concurrent_sufficient_conditions on j, Line(E, center(Circle(B, C, E))), Line(E, H) we get concurrent(j, Line(E, H), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on g, Line(D, center(c)), Line(D, center(Circle(C, D, E))) we get concurrent(g, Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(B, center(c)), Line(B, H) we get concurrent(g, Line(B, H), Line(B, center(c)))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(G, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, I), i we get concurrent(i, Line(D, I), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(A, I), Line(I, center(c)), Line(B, I) we get concurrent(Line(A, I), Line(B, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(I, center(c)), Line(A, center(c)) we get concurrent(Line(A, center(c)), Line(H, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(I, center(c)), Line(E, center(c)) we get concurrent(Line(A, center(c)), Line(E, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(F, I), Line(E, F) we get concurrent(Line(E, F), Line(F, I), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, I), Line(E, center(Circle(C, D, E))), Line(E, center(Circle(B, C, E))) we get concurrent(Line(E, I), Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(D, center(c)), Line(D, H) we get concurrent(g, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), f, Line(F, H) we get concurrent(f, Line(F, H), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, I), Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, I), Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, H), Line(D, center(Circle(C, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on j, Line(G, I), i we get concurrent(i, j, Line(G, I))
By concurrent_sufficient_conditions on g, Line(D, I), Line(D, center(Circle(A, C, D))) we get concurrent(g, Line(D, I), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on i, Line(A, center(Circle(A, C, D))), Line(A, I) we get concurrent(i, Line(A, I), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, C, E))), f, j we get concurrent(f, j, Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(A, H), Line(F, H), Line(E, H) we get concurrent(Line(A, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), h, Line(E, F) we get concurrent(h, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, Line(G, H), Line(A, H) we get concurrent(k, Line(A, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(D, F), Line(F, H) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(B, center(c)), Line(D, center(c)) we get concurrent(Line(B, center(c)), Line(D, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on f, Line(A, center(Circle(A, C, D))), Line(A, I) we get concurrent(f, Line(A, I), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, I), Line(C, F) we get concurrent(Line(C, F), Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, I), Line(D, H) we get concurrent(Line(D, H), Line(D, I), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, I), Line(E, center(Circle(B, C, E))) we get concurrent(Line(E, I), Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(I, center(c)), Line(B, center(c)) we get concurrent(Line(B, center(c)), Line(H, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(F, H), k we get concurrent(k, Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(D, H), Line(A, H) we get concurrent(Line(A, H), Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, E), Line(D, center(Circle(A, C, D))) we get concurrent(Line(D, E), Line(D, center(c)), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on g, Line(D, center(Circle(C, D, E))), i we get concurrent(g, i, Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, H), Line(E, H), k we get concurrent(k, Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(D, I), Line(G, I), Line(I, center(c)) we get concurrent(Line(D, I), Line(G, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(F, I), Line(E, F), Line(C, F) we get concurrent(Line(C, F), Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(E, I), Line(A, I), Line(F, I) we get concurrent(Line(A, I), Line(E, I), Line(F, I))
By concurrent_sufficient_conditions on h, i, Line(A, center(c)) we get concurrent(h, i, Line(A, center(c)))
By concurrent_sufficient_conditions on Line(B, H), Line(G, H), Line(H, center(c)) we get concurrent(Line(B, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on j, Line(G, center(Circle(C, D, E))), Line(G, H) we get concurrent(j, Line(G, H), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(D, center(Circle(C, D, E))), g we get concurrent(g, Line(D, F), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, I), j, Line(E, center(Circle(B, C, E))) we get concurrent(j, Line(E, I), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, H), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, H), Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, I), Line(B, I), Line(G, I) we get concurrent(Line(A, I), Line(B, I), Line(G, I))
By concurrent_sufficient_conditions on Line(D, H), Line(H, center(c)), k we get concurrent(k, Line(D, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(B, H), Line(F, H), Line(E, H) we get concurrent(Line(B, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(A, I), Line(A, center(c)), Line(A, center(Circle(A, C, D))) we get concurrent(Line(A, I), Line(A, center(c)), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), h, g we get concurrent(g, h, Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on j, Line(E, center(Circle(C, D, E))), h we get concurrent(h, j, Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(A, center(c)), Line(A, H) we get concurrent(i, Line(A, H), Line(A, center(c)))
By concurrent_sufficient_conditions on h, Line(E, I), Line(E, center(c)) we get concurrent(h, Line(E, I), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(D, H), k, Line(G, H) we get concurrent(k, Line(D, H), Line(G, H))
By concurrent_sufficient_conditions on Line(G, I), Line(F, I), k we get concurrent(k, Line(F, I), Line(G, I))
By concurrent_sufficient_conditions on Line(G, I), Line(F, I), Line(D, I) we get concurrent(Line(D, I), Line(F, I), Line(G, I))
By concurrent_sufficient_conditions on Line(G, I), Line(F, I), Line(E, I) we get concurrent(Line(E, I), Line(F, I), Line(G, I))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(D, H), Line(F, H) we get concurrent(Line(D, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(B, center(c)), Line(E, center(c)), Line(I, center(c)) we get concurrent(Line(B, center(c)), Line(E, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on k, h, Line(C, center(Circle(C, D, E))) we get concurrent(h, k, Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, I), Line(E, H), Line(E, center(Circle(B, C, E))) we get concurrent(Line(E, H), Line(E, I), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(D, center(c)), Line(D, H) we get concurrent(Line(D, F), Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(F, I), Line(G, I), k we get concurrent(k, Line(F, I), Line(G, I))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, center(Circle(C, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, H), Line(E, H), Line(B, H) we get concurrent(Line(B, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(A, I), i, Line(A, center(c)) we get concurrent(i, Line(A, I), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(B, H), Line(E, H) we get concurrent(Line(B, H), Line(E, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, H), Line(E, center(Circle(B, C, E))) we get concurrent(Line(E, H), Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, F), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), j, Line(E, center(c)) we get concurrent(j, Line(E, F), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(B, H), Line(D, H), Line(G, H) we get concurrent(Line(B, H), Line(D, H), Line(G, H))
By concurrent_sufficient_conditions on Line(E, F), f, Line(F, H) we get concurrent(f, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, center(Circle(C, D, E))), j we get concurrent(j, Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), i, Line(D, center(c)) we get concurrent(i, Line(D, E), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(E, I), Line(G, I), k we get concurrent(k, Line(E, I), Line(G, I))
By concurrent_sufficient_conditions on Line(F, I), Line(F, H), Line(F, center(Circle(A, C, D))) we get concurrent(Line(F, H), Line(F, I), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(G, I), Line(F, I), Line(B, I) we get concurrent(Line(B, I), Line(F, I), Line(G, I))
By concurrent_sufficient_conditions on j, Line(G, center(Circle(C, D, E))), Line(G, I) we get concurrent(j, Line(G, I), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(D, center(Circle(C, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(D, F), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, H), Line(D, H), Line(G, H) we get concurrent(Line(A, H), Line(D, H), Line(G, H))
By concurrent_sufficient_conditions on h, Line(E, center(Circle(C, D, E))), Line(E, center(Circle(B, C, E))) we get concurrent(h, Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(D, E), j we get concurrent(j, Line(D, E), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), i, Line(D, center(c)) we get concurrent(i, Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, F), Line(F, H), Line(F, center(Circle(B, C, E))) we get concurrent(Line(C, F), Line(F, H), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, I), Line(F, I), k we get concurrent(k, Line(E, I), Line(F, I))
By concurrent_sufficient_conditions on Line(H, center(c)), k, Line(B, H) we get concurrent(k, Line(B, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(E, F), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(F, H), Line(D, F), f we get concurrent(f, Line(D, F), Line(F, H))
By concurrent_sufficient_conditions on Line(F, I), Line(G, I), Line(D, I) we get concurrent(Line(D, I), Line(F, I), Line(G, I))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(D, F), Line(C, F) we get concurrent(Line(C, F), Line(D, F), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(Circle(A, C, D))), Line(D, H) we get concurrent(Line(D, E), Line(D, H), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(F, I), k, Line(G, I) we get concurrent(k, Line(F, I), Line(G, I))
By concurrent_sufficient_conditions on Line(D, H), Line(G, H), Line(F, H) we get concurrent(Line(D, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(E, I), Line(I, center(c)), Line(G, I) we get concurrent(Line(E, I), Line(G, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(C, D, E))), Line(E, I) we get concurrent(Line(D, E), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(A, H), Line(H, center(c)) we get concurrent(Line(A, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(D, center(c)), Line(B, center(c)) we get concurrent(Line(B, center(c)), Line(D, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on j, Line(B, center(c)), g we get concurrent(g, j, Line(B, center(c)))
By concurrent_sufficient_conditions on Line(D, F), Line(F, I), Line(C, F) we get concurrent(Line(C, F), Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(D, E), h we get concurrent(h, Line(D, E), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(F, I), Line(D, I), Line(I, center(c)) we get concurrent(Line(D, I), Line(F, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(A, H), Line(G, H), Line(D, H) we get concurrent(Line(A, H), Line(D, H), Line(G, H))
By concurrent_sufficient_conditions on Line(G, I), Line(I, center(c)), Line(B, I) we get concurrent(Line(B, I), Line(G, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(G, H), Line(A, H) we get concurrent(Line(A, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(A, H), Line(H, center(c)), Line(D, H) we get concurrent(Line(A, H), Line(D, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), h, Line(E, center(c)) we get concurrent(h, Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, H), Line(D, H), Line(A, H) we get concurrent(Line(A, H), Line(D, H), Line(G, H))
By concurrent_sufficient_conditions on Line(B, H), Line(H, center(c)), Line(D, H) we get concurrent(Line(B, H), Line(D, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(B, I), Line(D, I), Line(G, I) we get concurrent(Line(B, I), Line(D, I), Line(G, I))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(c)), Line(E, center(Circle(B, C, E))) we get concurrent(Line(E, F), Line(E, center(c)), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), j, Line(E, center(Circle(C, D, E))) we get concurrent(j, Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, F), Line(D, H) we get concurrent(Line(D, F), Line(D, H), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, I), Line(D, H) we get concurrent(Line(D, H), Line(D, I), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(C, center(Circle(C, D, E))) we get concurrent(Line(C, center(Circle(C, D, E))), Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, I), Line(G, center(Circle(C, D, E))), j we get concurrent(j, Line(G, I), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), k, Line(A, H) we get concurrent(k, Line(A, H), Line(F, H))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), i, g we get concurrent(g, i, Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), i, Line(D, I) we get concurrent(i, Line(D, I), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(D, center(c)), Line(D, center(Circle(A, C, D))) we get concurrent(i, Line(D, center(c)), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(C, center(Circle(A, C, D))), Line(F, center(Circle(A, C, D))), Line(D, center(Circle(A, C, D))) we get concurrent(Line(C, center(Circle(A, C, D))), Line(D, center(Circle(A, C, D))), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(F, I), Line(I, center(c)), Line(B, I) we get concurrent(Line(B, I), Line(F, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))), Line(C, F) we get concurrent(Line(C, F), Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, C, E))), Line(B, H), j we get concurrent(j, Line(B, H), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on k, Line(G, H), Line(E, H) we get concurrent(k, Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(B, I), Line(B, H), Line(B, center(Circle(B, C, E))) we get concurrent(Line(B, H), Line(B, I), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(A, center(c)), Line(D, center(c)) we get concurrent(Line(A, center(c)), Line(D, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, center(Circle(A, C, D))), Line(C, F), g we get concurrent(g, Line(C, F), Line(C, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, F), Line(D, center(c)), Line(D, E) we get concurrent(Line(D, E), Line(D, F), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(A, center(Circle(A, C, D))), i we get concurrent(i, Line(A, center(c)), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on i, Line(C, F), Line(G, H) we get concurrent(i, Line(C, F), Line(G, H))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, H), Line(D, E) we get concurrent(Line(D, E), Line(D, H), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))) we get concurrent(Line(F, I), Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(F, H), Line(B, H) we get concurrent(Line(B, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(c)), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(I, center(c)), Line(H, center(c)) we get concurrent(Line(D, center(c)), Line(H, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(E, I), Line(I, center(c)), Line(B, I) we get concurrent(Line(B, I), Line(E, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(B, center(c)), Line(H, center(c)), Line(E, center(c)) we get concurrent(Line(B, center(c)), Line(E, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(A, H), Line(G, H), Line(H, center(c)) we get concurrent(Line(A, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(D, F), f we get concurrent(f, Line(D, F), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on i, Line(D, center(c)), Line(D, H) we get concurrent(i, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(C, F), Line(F, H), f we get concurrent(f, Line(C, F), Line(F, H))
By concurrent_sufficient_conditions on Line(F, H), Line(G, H), Line(B, H) we get concurrent(Line(B, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on h, Line(E, center(c)), Line(E, I) we get concurrent(h, Line(E, I), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, I), Line(E, center(c)), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, I), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(A, H), Line(F, H) we get concurrent(Line(A, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(E, center(c)), Line(I, center(c)) we get concurrent(Line(D, center(c)), Line(E, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, I), Line(D, E), Line(D, center(Circle(A, C, D))) we get concurrent(Line(D, E), Line(D, I), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on f, Line(F, I), Line(F, center(Circle(B, C, E))) we get concurrent(f, Line(F, I), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(A, C, D))), Line(C, center(Circle(B, C, E))), Line(C, center(Circle(C, D, E))) we get concurrent(Line(C, center(Circle(A, C, D))), Line(C, center(Circle(B, C, E))), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, I), Line(A, I), Line(E, I) we get concurrent(Line(A, I), Line(E, I), Line(G, I))
By concurrent_sufficient_conditions on Line(D, center(c)), i, Line(D, center(Circle(C, D, E))) we get concurrent(i, Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(G, center(Circle(C, D, E))), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(A, C, D))), Line(D, F) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(F, H), f, Line(F, center(Circle(B, C, E))) we get concurrent(f, Line(F, H), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))), Line(D, F) we get concurrent(Line(D, F), Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on j, Line(B, center(Circle(B, C, E))), Line(B, H) we get concurrent(j, Line(B, H), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(E, F), Line(C, F) we get concurrent(Line(C, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))) we get concurrent(Line(E, F), Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, C, E))), Line(B, I), Line(B, H) we get concurrent(Line(B, H), Line(B, I), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(D, center(c)), Line(D, center(Circle(A, C, D))) we get concurrent(Line(D, F), Line(D, center(c)), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(F, H), Line(D, F) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, H), Line(D, center(Circle(A, C, D))), Line(D, I) we get concurrent(Line(D, H), Line(D, I), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, I), Line(E, center(c)), Line(D, E) we get concurrent(Line(D, E), Line(E, I), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(C, F), Line(C, center(Circle(B, C, E))), k we get concurrent(k, Line(C, F), Line(C, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(G, H), k we get concurrent(k, Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(E, H), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, H), Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(F, I), Line(D, F) we get concurrent(f, Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(D, E), Line(E, center(Circle(B, C, E))) we get concurrent(Line(D, E), Line(E, center(c)), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(E, H), Line(G, H) we get concurrent(Line(E, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, F), Line(D, center(c)), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, I), k, Line(I, center(c)) we get concurrent(k, Line(A, I), Line(I, center(c)))
By concurrent_sufficient_conditions on j, Line(B, H), Line(B, center(c)) we get concurrent(j, Line(B, H), Line(B, center(c)))
By concurrent_sufficient_conditions on Line(D, I), Line(G, I), Line(F, I) we get concurrent(Line(D, I), Line(F, I), Line(G, I))
By concurrent_sufficient_conditions on Line(C, center(Circle(B, C, E))), h, k we get concurrent(h, k, Line(C, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(D, E), Line(E, center(c)) we get concurrent(Line(D, E), Line(E, H), Line(E, center(c)))
By concurrent_sufficient_conditions on h, Line(C, center(Circle(C, D, E))), g we get concurrent(g, h, Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, H), Line(A, center(c)), Line(A, I) we get concurrent(Line(A, H), Line(A, I), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(C, F), Line(F, center(Circle(A, C, D))), Line(D, F) we get concurrent(Line(C, F), Line(D, F), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, center(Circle(B, C, E))), Line(E, H) we get concurrent(Line(E, H), Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(B, C, E))), j we get concurrent(j, Line(D, E), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on i, Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))) we get concurrent(i, Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, center(c)), Line(B, I), j we get concurrent(j, Line(B, I), Line(B, center(c)))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(F, I), Line(D, I) we get concurrent(Line(D, I), Line(F, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(G, I), j, Line(C, F) we get concurrent(j, Line(C, F), Line(G, I))
By concurrent_sufficient_conditions on h, Line(C, center(Circle(C, D, E))), Line(C, center(Circle(B, C, E))) we get concurrent(h, Line(C, center(Circle(B, C, E))), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(F, center(Circle(B, C, E))), Line(F, H) we get concurrent(f, Line(F, H), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, H), Line(D, E) we get concurrent(Line(D, E), Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(E, I), Line(E, center(Circle(B, C, E))), h we get concurrent(h, Line(E, I), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, H), Line(D, center(Circle(C, D, E))), Line(D, center(c)) we get concurrent(Line(D, H), Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(A, center(c)), Line(E, center(c)) we get concurrent(Line(A, center(c)), Line(E, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on g, Line(D, center(Circle(A, C, D))), Line(D, center(c)) we get concurrent(g, Line(D, center(c)), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(F, H), Line(D, F) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(E, H), Line(D, E) we get concurrent(Line(D, E), Line(E, H), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on j, Line(E, H), Line(E, center(c)) we get concurrent(j, Line(E, H), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, I), Line(E, F), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, E), i we get concurrent(i, Line(D, E), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), f, Line(E, F) we get concurrent(f, Line(E, F), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(B, center(c)), Line(D, center(c)) we get concurrent(Line(B, center(c)), Line(D, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(D, center(c)), Line(A, center(c)) we get concurrent(Line(A, center(c)), Line(D, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(B, I), Line(G, I), Line(E, I) we get concurrent(Line(B, I), Line(E, I), Line(G, I))
By concurrent_sufficient_conditions on Line(D, I), Line(D, center(Circle(C, D, E))), Line(D, H) we get concurrent(Line(D, H), Line(D, I), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, center(c)), Line(D, F) we get concurrent(Line(D, F), Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), h, Line(E, center(Circle(C, D, E))) we get concurrent(h, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), i, Line(D, E) we get concurrent(i, Line(D, E), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(C, F), Line(D, F), Line(F, center(Circle(A, C, D))) we get concurrent(Line(C, F), Line(D, F), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(F, H), f, Line(E, F) we get concurrent(f, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(H, center(c)), k, Line(A, H) we get concurrent(k, Line(A, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, I), Line(I, center(c)), Line(B, I) we get concurrent(Line(B, I), Line(D, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, F), Line(D, center(Circle(C, D, E))), i we get concurrent(i, Line(D, F), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(A, center(c)), Line(A, center(Circle(A, C, D))) we get concurrent(i, Line(A, center(c)), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(C, center(Circle(A, C, D))), Line(C, center(Circle(B, C, E))), k we get concurrent(k, Line(C, center(Circle(A, C, D))), Line(C, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(A, I), Line(F, I), Line(D, I) we get concurrent(Line(A, I), Line(D, I), Line(F, I))
By concurrent_sufficient_conditions on Line(D, E), Line(E, I), Line(E, center(Circle(B, C, E))) we get concurrent(Line(D, E), Line(E, I), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(A, I), k we get concurrent(k, Line(A, I), Line(F, I))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(B, center(c)), Line(I, center(c)) we get concurrent(Line(B, center(c)), Line(E, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(B, C, E))), Line(D, F) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(A, center(c)), i, h we get concurrent(h, i, Line(A, center(c)))
By concurrent_sufficient_conditions on j, Line(B, center(Circle(B, C, E))), Line(B, center(c)) we get concurrent(j, Line(B, center(c)), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(C, F), Line(G, I), j we get concurrent(j, Line(C, F), Line(G, I))
By concurrent_sufficient_conditions on Line(F, I), f, Line(E, F) we get concurrent(f, Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(F, H), Line(G, H), Line(D, H) we get concurrent(Line(D, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(B, center(c)), j, Line(B, I) we get concurrent(j, Line(B, I), Line(B, center(c)))
By concurrent_sufficient_conditions on Line(D, H), Line(B, H), Line(F, H) we get concurrent(Line(B, H), Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on Line(E, H), Line(E, F), Line(E, center(Circle(B, C, E))) we get concurrent(Line(E, F), Line(E, H), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(I, center(c)), Line(H, center(c)) we get concurrent(Line(A, center(c)), Line(H, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, F), Line(F, H), Line(F, center(Circle(B, C, E))) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(I, center(c)), k, Line(B, I) we get concurrent(k, Line(B, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, F), Line(D, I), Line(D, center(Circle(A, C, D))) we get concurrent(Line(D, F), Line(D, I), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on h, Line(A, I), Line(A, center(c)) we get concurrent(h, Line(A, I), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, center(c)), Line(E, F) we get concurrent(Line(E, F), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))), Line(E, I) we get concurrent(Line(E, I), Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, E), g we get concurrent(g, Line(D, E), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(F, I), Line(D, I), Line(G, I) we get concurrent(Line(D, I), Line(F, I), Line(G, I))
By concurrent_sufficient_conditions on Line(D, I), i, Line(D, center(Circle(C, D, E))) we get concurrent(i, Line(D, I), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(B, C, E))), k, Line(C, center(Circle(A, C, D))) we get concurrent(k, Line(C, center(Circle(A, C, D))), Line(C, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(C, F), g, Line(C, center(Circle(A, C, D))) we get concurrent(g, Line(C, F), Line(C, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, I), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, I), Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, center(c)), h, Line(A, I) we get concurrent(h, Line(A, I), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(C, center(Circle(B, C, E))), Line(C, center(Circle(A, C, D))), k we get concurrent(k, Line(C, center(Circle(A, C, D))), Line(C, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, I), Line(D, center(Circle(C, D, E))), Line(D, F) we get concurrent(Line(D, F), Line(D, I), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), g, Line(D, center(Circle(C, D, E))) we get concurrent(g, Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, I), Line(E, center(Circle(B, C, E))), j we get concurrent(j, Line(E, I), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, H), Line(D, center(c)) we get concurrent(Line(D, H), Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, H), Line(G, I), j we get concurrent(j, Line(G, H), Line(G, I))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(D, F), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(A, I), Line(A, H), Line(A, center(c)) we get concurrent(Line(A, H), Line(A, I), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(E, I), Line(E, center(c)), Line(E, H) we get concurrent(Line(E, H), Line(E, I), Line(E, center(c)))
By concurrent_sufficient_conditions on j, Line(B, I), Line(B, center(c)) we get concurrent(j, Line(B, I), Line(B, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(F, center(Circle(A, C, D))), Line(F, I) we get concurrent(Line(F, I), Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(E, I), Line(E, center(c)) we get concurrent(Line(E, I), Line(E, center(c)), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(A, H), Line(H, center(c)) we get concurrent(Line(A, H), Line(E, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, center(Circle(B, C, E))), k, h we get concurrent(h, k, Line(C, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on i, Line(D, I), Line(D, center(c)) we get concurrent(i, Line(D, I), Line(D, center(c)))
By concurrent_sufficient_conditions on h, Line(E, H), Line(E, center(Circle(C, D, E))) we get concurrent(h, Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, I), f, Line(A, center(Circle(A, C, D))) we get concurrent(f, Line(A, I), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on j, Line(B, H), Line(B, center(Circle(B, C, E))) we get concurrent(j, Line(B, H), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(C, F), j, Line(G, H) we get concurrent(j, Line(C, F), Line(G, H))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(D, I), Line(F, I) we get concurrent(Line(D, I), Line(F, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(A, I), i, Line(A, center(Circle(A, C, D))) we get concurrent(i, Line(A, I), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, center(c)), Line(D, center(Circle(A, C, D))) we get concurrent(Line(D, center(c)), Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))), Line(D, center(c)) we get concurrent(Line(D, center(c)), Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(B, C, E))), h we get concurrent(h, Line(D, E), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(B, C, E))), k, Line(C, F) we get concurrent(k, Line(C, F), Line(C, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, C, D))), f, Line(A, I) we get concurrent(f, Line(A, I), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(B, center(c)), Line(B, center(Circle(B, C, E))), Line(B, H) we get concurrent(Line(B, H), Line(B, center(c)), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, center(c)), Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))) we get concurrent(f, Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, E), g, Line(D, center(Circle(C, D, E))) we get concurrent(g, Line(D, E), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, F), Line(D, H) we get concurrent(Line(D, F), Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(C, F), Line(E, F) we get concurrent(Line(C, F), Line(E, F), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on h, Line(C, center(Circle(B, C, E))), k we get concurrent(h, k, Line(C, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(G, I), j, i we get concurrent(i, j, Line(G, I))
By concurrent_sufficient_conditions on Line(G, I), Line(A, I), Line(F, I) we get concurrent(Line(A, I), Line(F, I), Line(G, I))
By concurrent_sufficient_conditions on Line(F, I), Line(D, F), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(D, I), g, Line(D, center(Circle(C, D, E))) we get concurrent(g, Line(D, I), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, I), Line(F, I), Line(B, I) we get concurrent(Line(B, I), Line(E, I), Line(F, I))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(c)), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), f, Line(D, F) we get concurrent(f, Line(D, F), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), h, j we get concurrent(h, j, Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on f, Line(B, center(Circle(B, C, E))), Line(B, H) we get concurrent(f, Line(B, H), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(c)), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, E), Line(D, I) we get concurrent(Line(D, E), Line(D, I), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(E, center(c)), Line(E, I) we get concurrent(Line(E, I), Line(E, center(c)), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(B, H), Line(D, H), Line(H, center(c)) we get concurrent(Line(B, H), Line(D, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(G, H), Line(F, H), Line(E, H) we get concurrent(Line(E, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on h, Line(C, center(Circle(B, C, E))), Line(C, center(Circle(C, D, E))) we get concurrent(h, Line(C, center(Circle(B, C, E))), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(A, center(c)), i we get concurrent(h, i, Line(A, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(E, H), h we get concurrent(h, Line(E, H), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(A, H), Line(G, H), k we get concurrent(k, Line(A, H), Line(G, H))
By concurrent_sufficient_conditions on Line(C, F), Line(D, F), Line(F, H) we get concurrent(Line(C, F), Line(D, F), Line(F, H))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, C, D))), Line(A, I), i we get concurrent(i, Line(A, I), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(F, I), Line(I, center(c)), Line(E, I) we get concurrent(Line(E, I), Line(F, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(D, E), Line(E, H) we get concurrent(Line(D, E), Line(E, H), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on j, Line(G, center(Circle(C, D, E))), i we get concurrent(i, j, Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, H), Line(E, H), Line(H, center(c)) we get concurrent(Line(B, H), Line(E, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, C, D))), i, Line(A, H) we get concurrent(i, Line(A, H), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(G, I), Line(D, I), Line(B, I) we get concurrent(Line(B, I), Line(D, I), Line(G, I))
By concurrent_sufficient_conditions on k, Line(D, I), Line(G, I) we get concurrent(k, Line(D, I), Line(G, I))
By concurrent_sufficient_conditions on Line(E, center(c)), j, Line(E, F) we get concurrent(j, Line(E, F), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(E, center(c)), j we get concurrent(j, Line(E, center(c)), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), f, Line(F, center(Circle(A, C, D))) we get concurrent(f, Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(B, center(c)), g, j we get concurrent(g, j, Line(B, center(c)))
By concurrent_sufficient_conditions on g, Line(D, E), Line(D, center(Circle(A, C, D))) we get concurrent(g, Line(D, E), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, E), g we get concurrent(g, Line(D, E), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), i, Line(D, I) we get concurrent(i, Line(D, I), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(D, F), Line(F, center(Circle(B, C, E))) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, H), g, Line(D, center(Circle(C, D, E))) we get concurrent(g, Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))), f we get concurrent(f, Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(E, F), f we get concurrent(f, Line(E, F), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(B, C, E))), Line(C, F), Line(C, center(Circle(A, C, D))) we get concurrent(Line(C, F), Line(C, center(Circle(A, C, D))), Line(C, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, H), Line(E, F) we get concurrent(Line(E, F), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, H), Line(H, center(c)), Line(F, H) we get concurrent(Line(F, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, I), k, Line(D, I) we get concurrent(k, Line(D, I), Line(F, I))
By concurrent_sufficient_conditions on Line(B, I), k, Line(I, center(c)) we get concurrent(k, Line(B, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), g, h we get concurrent(g, h, Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, I), Line(D, center(Circle(A, C, D))), i we get concurrent(i, Line(D, I), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, C, E))), Line(B, I), f we get concurrent(f, Line(B, I), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(A, I), Line(G, I), Line(D, I) we get concurrent(Line(A, I), Line(D, I), Line(G, I))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), g, Line(D, H) we get concurrent(g, Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(D, I), Line(B, I) we get concurrent(Line(B, I), Line(D, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(A, H), Line(A, center(c)), Line(A, center(Circle(A, C, D))) we get concurrent(Line(A, H), Line(A, center(c)), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on k, Line(G, H), Line(F, H) we get concurrent(k, Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on h, Line(E, center(c)), Line(E, H) we get concurrent(h, Line(E, H), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, I), Line(D, E) we get concurrent(Line(D, E), Line(E, I), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, I), Line(E, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, center(c)), Line(D, I) we get concurrent(Line(D, I), Line(D, center(c)), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, F), Line(D, center(Circle(A, C, D))), Line(D, center(c)) we get concurrent(Line(D, F), Line(D, center(c)), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(G, H), Line(A, H), Line(D, H) we get concurrent(Line(A, H), Line(D, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, I), Line(G, I), Line(E, I) we get concurrent(Line(E, I), Line(F, I), Line(G, I))
By concurrent_sufficient_conditions on Line(F, H), Line(E, H), Line(H, center(c)) we get concurrent(Line(E, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, D, E))), i, Line(G, I) we get concurrent(i, Line(G, I), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(B, H), Line(A, H) we get concurrent(Line(A, H), Line(B, H), Line(F, H))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(A, C, D))), Line(C, F) we get concurrent(Line(C, F), Line(E, F), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), j, Line(E, center(c)) we get concurrent(j, Line(E, center(c)), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(H, center(c)), k, Line(G, H) we get concurrent(k, Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, H), Line(A, H), Line(F, H) we get concurrent(Line(A, H), Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on f, Line(F, H), Line(F, center(Circle(B, C, E))) we get concurrent(f, Line(F, H), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, F), f, Line(F, center(Circle(B, C, E))) we get concurrent(f, Line(D, F), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(B, center(c)), Line(I, center(c)), Line(H, center(c)) we get concurrent(Line(B, center(c)), Line(H, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(B, I), Line(D, I), Line(I, center(c)) we get concurrent(Line(B, I), Line(D, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(G, H), k we get concurrent(k, Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, H), Line(D, H), Line(G, H) we get concurrent(Line(D, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on g, Line(D, center(Circle(C, D, E))), Line(D, H) we get concurrent(g, Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, I), Line(I, center(c)), Line(A, I) we get concurrent(Line(A, I), Line(G, I), Line(I, center(c)))
By concurrent_sufficient_conditions on j, Line(E, center(c)), h we get concurrent(h, j, Line(E, center(c)))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(D, I), Line(E, I) we get concurrent(Line(D, I), Line(E, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(E, I), Line(E, H), Line(E, center(c)) we get concurrent(Line(E, H), Line(E, I), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(B, H), Line(B, center(Circle(B, C, E))), Line(B, I) we get concurrent(Line(B, H), Line(B, I), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, C, E))), Line(B, H), Line(B, center(c)) we get concurrent(Line(B, H), Line(B, center(c)), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(A, center(Circle(A, C, D))), Line(D, center(Circle(A, C, D))) we get concurrent(Line(A, center(Circle(A, C, D))), Line(D, center(Circle(A, C, D))), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), f, Line(F, H) we get concurrent(f, Line(F, H), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(F, I), Line(B, I) we get concurrent(Line(B, I), Line(F, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(G, H), Line(F, H) we get concurrent(Line(F, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(G, H), Line(D, H), Line(H, center(c)) we get concurrent(Line(D, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(F, H), Line(E, H) we get concurrent(Line(E, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, F), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(I, center(c)), Line(G, I) we get concurrent(Line(F, I), Line(G, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(C, D, E))), Line(E, I) we get concurrent(Line(E, F), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, D, E))), Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, g, Line(C, center(Circle(C, D, E))) we get concurrent(g, h, Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, H), Line(G, H), Line(A, H) we get concurrent(Line(A, H), Line(B, H), Line(G, H))
By concurrent_sufficient_conditions on Line(D, F), Line(F, H), f we get concurrent(f, Line(D, F), Line(F, H))
By concurrent_sufficient_conditions on Line(D, F), g, Line(D, center(c)) we get concurrent(g, Line(D, F), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(B, C, E))), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on j, Line(D, E), Line(E, center(Circle(C, D, E))) we get concurrent(j, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(B, I), Line(E, I) we get concurrent(Line(B, I), Line(E, I), Line(F, I))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, center(Circle(A, C, D))), Line(D, F) we get concurrent(Line(D, F), Line(D, center(c)), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, H), Line(D, E) we get concurrent(Line(D, E), Line(E, H), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(D, H), Line(G, H) we get concurrent(Line(D, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, F), Line(F, I), Line(F, center(Circle(A, C, D))) we get concurrent(Line(C, F), Line(F, I), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, H), Line(E, F) we get concurrent(Line(E, F), Line(E, H), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(B, C, E))), Line(E, center(c)) we get concurrent(Line(E, F), Line(E, center(c)), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on k, Line(H, center(c)), Line(D, H) we get concurrent(k, Line(D, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, F), Line(G, H), Line(G, I) we get concurrent(Line(C, F), Line(G, H), Line(G, I))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(D, center(Circle(A, C, D))), Line(A, center(Circle(A, C, D))) we get concurrent(Line(A, center(Circle(A, C, D))), Line(D, center(Circle(A, C, D))), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, H), i we get concurrent(i, Line(D, H), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), i, g we get concurrent(g, i, Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(D, center(c)), Line(E, center(c)) we get concurrent(Line(D, center(c)), Line(E, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(F, H), Line(B, H) we get concurrent(Line(B, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, Line(E, H), Line(G, H) we get concurrent(k, Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(I, center(c)), k, Line(E, I) we get concurrent(k, Line(E, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(A, I), Line(A, center(c)), h we get concurrent(h, Line(A, I), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(G, H), Line(A, H), Line(H, center(c)) we get concurrent(Line(A, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(G, H), Line(H, center(c)), Line(B, H) we get concurrent(Line(B, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, I), Line(D, E), Line(E, center(Circle(B, C, E))) we get concurrent(Line(D, E), Line(E, I), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, I), h we get concurrent(h, Line(E, I), Line(E, center(c)))
By concurrent_sufficient_conditions on k, Line(C, center(Circle(B, C, E))), h we get concurrent(h, k, Line(C, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on j, Line(G, H), Line(G, I) we get concurrent(j, Line(G, H), Line(G, I))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(C, D, E))), Line(E, center(c)) we get concurrent(Line(E, F), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, C, D))), Line(A, center(c)), Line(A, H) we get concurrent(Line(A, H), Line(A, center(c)), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(F, I), Line(I, center(c)), Line(D, I) we get concurrent(Line(D, I), Line(F, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), Line(E, center(c)) we get concurrent(Line(D, E), Line(E, F), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, I), Line(E, F), Line(E, center(Circle(B, C, E))) we get concurrent(Line(E, F), Line(E, I), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, I), Line(I, center(c)), Line(D, I) we get concurrent(Line(D, I), Line(E, I), Line(I, center(c)))
By concurrent_sufficient_conditions on i, Line(D, center(Circle(C, D, E))), Line(D, center(Circle(A, C, D))) we get concurrent(i, Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))), Line(E, F) we get concurrent(Line(E, F), Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, F), Line(D, center(Circle(A, C, D))) we get concurrent(Line(D, F), Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, F), Line(E, F), Line(F, center(Circle(A, C, D))) we get concurrent(Line(C, F), Line(E, F), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, H), Line(E, center(c)), Line(D, E) we get concurrent(Line(D, E), Line(E, H), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(G, I), Line(I, center(c)), Line(F, I) we get concurrent(Line(F, I), Line(G, I), Line(I, center(c)))
By concurrent_sufficient_conditions on j, Line(B, center(Circle(B, C, E))), Line(B, I) we get concurrent(j, Line(B, I), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on g, Line(D, F), Line(D, center(Circle(C, D, E))) we get concurrent(g, Line(D, F), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(A, center(c)), Line(I, center(c)) we get concurrent(Line(A, center(c)), Line(H, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, I), Line(E, center(c)) we get concurrent(Line(E, I), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(E, F), Line(F, I) we get concurrent(Line(E, F), Line(F, I), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(D, E), j we get concurrent(j, Line(D, E), Line(E, center(c)))
By concurrent_sufficient_conditions on h, Line(E, center(c)), Line(E, center(Circle(C, D, E))) we get concurrent(h, Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(F, H), Line(E, F) we get concurrent(f, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(F, I), Line(A, I), Line(I, center(c)) we get concurrent(Line(A, I), Line(F, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(D, F), f we get concurrent(f, Line(D, F), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(E, F), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), k, g we get concurrent(g, k, Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, I), Line(D, center(c)), Line(D, H) we get concurrent(Line(D, H), Line(D, I), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(F, I), Line(B, I), Line(G, I) we get concurrent(Line(B, I), Line(F, I), Line(G, I))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(H, center(c)), Line(E, center(c)) we get concurrent(Line(D, center(c)), Line(E, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, F), Line(E, I) we get concurrent(Line(E, F), Line(E, I), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), g, Line(D, center(c)) we get concurrent(g, Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), Line(F, center(Circle(B, C, E))) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(A, C, D))), Line(C, F) we get concurrent(Line(C, F), Line(D, F), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(G, H), Line(E, H), Line(H, center(c)) we get concurrent(Line(E, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, I), Line(F, I), k we get concurrent(k, Line(D, I), Line(F, I))
By concurrent_sufficient_conditions on Line(C, F), f, Line(F, center(Circle(B, C, E))) we get concurrent(f, Line(C, F), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(c)), j we get concurrent(j, Line(D, E), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(D, I), k, Line(G, I) we get concurrent(k, Line(D, I), Line(G, I))
By concurrent_sufficient_conditions on Line(E, H), Line(H, center(c)), Line(G, H) we get concurrent(Line(E, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(G, I), Line(F, I), Line(A, I) we get concurrent(Line(A, I), Line(F, I), Line(G, I))
By concurrent_sufficient_conditions on Line(A, I), Line(F, I), Line(G, I) we get concurrent(Line(A, I), Line(F, I), Line(G, I))
By concurrent_sufficient_conditions on g, i, Line(D, center(c)) we get concurrent(g, i, Line(D, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(D, F), Line(C, F) we get concurrent(Line(C, F), Line(D, F), Line(F, H))
By concurrent_sufficient_conditions on Line(A, H), i, Line(A, center(Circle(A, C, D))) we get concurrent(i, Line(A, H), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(G, I), k, Line(I, center(c)) we get concurrent(k, Line(G, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), j, Line(E, H) we get concurrent(j, Line(E, H), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, I), Line(F, center(Circle(B, C, E))) we get concurrent(Line(F, H), Line(F, I), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, I), Line(E, center(Circle(C, D, E))), Line(E, center(c)) we get concurrent(Line(E, I), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, h, Line(C, center(Circle(C, D, E))) we get concurrent(g, h, Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(D, center(Circle(C, D, E))), Line(D, center(c)) we get concurrent(i, Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(Circle(A, C, D))), Line(E, F) we get concurrent(Line(E, F), Line(F, I), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on k, Line(C, center(Circle(A, C, D))), Line(C, center(Circle(B, C, E))) we get concurrent(k, Line(C, center(Circle(A, C, D))), Line(C, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(A, center(c)), Line(D, center(c)) we get concurrent(Line(A, center(c)), Line(D, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(B, H), Line(F, H), Line(A, H) we get concurrent(Line(A, H), Line(B, H), Line(F, H))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(c)), h we get concurrent(h, Line(D, E), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(D, E), h, Line(E, center(Circle(B, C, E))) we get concurrent(h, Line(D, E), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, I), Line(D, center(Circle(A, C, D))) we get concurrent(Line(D, I), Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(D, I), Line(D, center(Circle(C, D, E))) we get concurrent(g, Line(D, I), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(B, center(c)), Line(D, center(c)) we get concurrent(Line(B, center(c)), Line(D, center(c)), Line(E, center(c)))
By concurrent_sufficient_conditions on k, Line(C, center(Circle(B, C, E))), Line(C, center(Circle(C, D, E))) we get concurrent(k, Line(C, center(Circle(B, C, E))), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, center(Circle(C, D, E))), Line(D, center(Circle(A, C, D))) we get concurrent(Line(D, center(c)), Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, F), Line(G, H), j we get concurrent(j, Line(C, F), Line(G, H))
By concurrent_sufficient_conditions on Line(E, center(c)), h, Line(D, E) we get concurrent(h, Line(D, E), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, I), Line(A, I), Line(G, I) we get concurrent(Line(A, I), Line(E, I), Line(G, I))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, C, E))), Line(B, center(c)), Line(B, H) we get concurrent(Line(B, H), Line(B, center(c)), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, center(Circle(B, C, E))), Line(E, center(c)) we get concurrent(Line(E, center(c)), Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, I), Line(E, I), Line(G, I) we get concurrent(Line(B, I), Line(E, I), Line(G, I))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(Circle(B, C, E))), f we get concurrent(f, Line(F, I), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), Line(F, center(Circle(A, C, D))) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, center(Circle(C, D, E))), h we get concurrent(h, Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, H), Line(F, H), Line(G, H) we get concurrent(Line(D, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(E, I), h, Line(E, center(Circle(B, C, E))) we get concurrent(h, Line(E, I), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(B, H), Line(A, H) we get concurrent(Line(A, H), Line(B, H), Line(H, center(c)))
By concurrent_sufficient_conditions on f, j, Line(B, center(Circle(B, C, E))) we get concurrent(f, j, Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(B, I), Line(G, I), Line(F, I) we get concurrent(Line(B, I), Line(F, I), Line(G, I))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(B, C, E))), Line(F, H) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(A, I), Line(B, I), Line(F, I) we get concurrent(Line(A, I), Line(B, I), Line(F, I))
By concurrent_sufficient_conditions on Line(A, H), Line(A, center(Circle(A, C, D))), f we get concurrent(f, Line(A, H), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(E, F), Line(C, F) we get concurrent(Line(C, F), Line(E, F), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, center(c)), g, Line(D, H) we get concurrent(g, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(B, center(c)), Line(H, center(c)), Line(I, center(c)) we get concurrent(Line(B, center(c)), Line(H, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on i, Line(A, center(Circle(A, C, D))), Line(A, H) we get concurrent(i, Line(A, H), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on i, Line(G, H), Line(G, center(Circle(C, D, E))) we get concurrent(i, Line(G, H), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(E, center(c)), Line(D, center(c)) we get concurrent(Line(A, center(c)), Line(D, center(c)), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(E, center(c)), Line(D, E) we get concurrent(Line(D, E), Line(E, center(c)), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(B, H), Line(F, H) we get concurrent(Line(B, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on j, Line(E, center(c)), Line(E, H) we get concurrent(j, Line(E, H), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(D, H), Line(B, H), Line(H, center(c)) we get concurrent(Line(B, H), Line(D, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(E, H), k we get concurrent(k, Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(G, H), Line(E, H), Line(F, H) we get concurrent(Line(E, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, I), f, Line(F, H) we get concurrent(f, Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(D, F), Line(F, H), Line(C, F) we get concurrent(Line(C, F), Line(D, F), Line(F, H))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, C, D))), i, Line(A, I) we get concurrent(i, Line(A, I), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, I), Line(F, I), Line(B, I) we get concurrent(Line(B, I), Line(D, I), Line(F, I))
By concurrent_sufficient_conditions on g, Line(D, H), Line(D, center(c)) we get concurrent(g, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(F, I), Line(I, center(c)), k we get concurrent(k, Line(F, I), Line(I, center(c)))
By concurrent_sufficient_conditions on g, Line(B, H), Line(B, center(c)) we get concurrent(g, Line(B, H), Line(B, center(c)))
By concurrent_sufficient_conditions on i, Line(D, center(Circle(A, C, D))), Line(D, center(c)) we get concurrent(i, Line(D, center(c)), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, center(Circle(C, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, F), Line(D, I) we get concurrent(Line(D, F), Line(D, I), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(E, F), Line(F, I) we get concurrent(f, Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))), Line(F, I) we get concurrent(Line(F, I), Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, H), Line(D, center(c)), Line(D, F) we get concurrent(Line(D, F), Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on f, Line(F, I), Line(C, F) we get concurrent(f, Line(C, F), Line(F, I))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(D, E), Line(E, I) we get concurrent(Line(D, E), Line(E, I), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(D, H), Line(D, F), Line(D, center(c)) we get concurrent(Line(D, F), Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(D, I), Line(D, center(Circle(A, C, D))), Line(D, F) we get concurrent(Line(D, F), Line(D, I), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, H), Line(D, center(Circle(A, C, D))), i we get concurrent(i, Line(D, H), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on j, Line(E, center(Circle(B, C, E))), Line(E, center(c)) we get concurrent(j, Line(E, center(c)), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, center(c)), h we get concurrent(h, Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, center(c)), Line(D, center(c)), Line(H, center(c)) we get concurrent(Line(B, center(c)), Line(D, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, H), k, Line(E, H) we get concurrent(k, Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(D, H), Line(D, center(Circle(A, C, D))), g we get concurrent(g, Line(D, H), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, H), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, H), Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), g, Line(D, center(Circle(C, D, E))) we get concurrent(g, Line(D, F), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(C, F), Line(D, F) we get concurrent(Line(C, F), Line(D, F), Line(F, H))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), g, Line(D, F) we get concurrent(g, Line(D, F), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(D, center(c)), Line(H, center(c)) we get concurrent(Line(D, center(c)), Line(H, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(F, H), f we get concurrent(f, Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(D, I), Line(A, I), Line(I, center(c)) we get concurrent(Line(A, I), Line(D, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(G, H), Line(G, I), Line(C, F) we get concurrent(Line(C, F), Line(G, H), Line(G, I))
By concurrent_sufficient_conditions on Line(I, center(c)), k, Line(F, I) we get concurrent(k, Line(F, I), Line(I, center(c)))
By concurrent_sufficient_conditions on k, h, Line(C, center(Circle(B, C, E))) we get concurrent(h, k, Line(C, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, D, E))), Line(G, I), j we get concurrent(j, Line(G, I), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(D, center(Circle(C, D, E))), Line(D, center(Circle(A, C, D))) we get concurrent(Line(D, F), Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, H), g, Line(B, center(c)) we get concurrent(g, Line(B, H), Line(B, center(c)))
By concurrent_sufficient_conditions on Line(A, I), Line(G, I), Line(B, I) we get concurrent(Line(A, I), Line(B, I), Line(G, I))
By concurrent_sufficient_conditions on Line(F, I), Line(B, I), Line(D, I) we get concurrent(Line(B, I), Line(D, I), Line(F, I))
By concurrent_sufficient_conditions on Line(B, H), Line(B, center(c)), g we get concurrent(g, Line(B, H), Line(B, center(c)))
By concurrent_sufficient_conditions on Line(G, I), Line(A, I), Line(D, I) we get concurrent(Line(A, I), Line(D, I), Line(G, I))
By concurrent_sufficient_conditions on j, Line(E, center(Circle(B, C, E))), Line(D, E) we get concurrent(j, Line(D, E), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), h, Line(D, E) we get concurrent(h, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(B, C, E))), Line(C, F) we get concurrent(Line(C, F), Line(F, H), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(E, F), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on j, Line(D, E), Line(E, center(Circle(B, C, E))) we get concurrent(j, Line(D, E), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(B, I), k, Line(G, I) we get concurrent(k, Line(B, I), Line(G, I))
By concurrent_sufficient_conditions on Line(C, center(Circle(B, C, E))), Line(C, center(Circle(A, C, D))), Line(C, center(Circle(C, D, E))) we get concurrent(Line(C, center(Circle(A, C, D))), Line(C, center(Circle(B, C, E))), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, F), i we get concurrent(i, Line(D, F), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(E, F), f, Line(F, center(Circle(A, C, D))) we get concurrent(f, Line(E, F), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(Circle(A, C, D))), Line(F, H) we get concurrent(Line(F, H), Line(F, I), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, I), Line(E, center(c)), h we get concurrent(h, Line(E, I), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, H), Line(F, H), Line(G, H) we get concurrent(Line(E, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(C, F), Line(F, I), f we get concurrent(f, Line(C, F), Line(F, I))
By concurrent_sufficient_conditions on Line(E, H), Line(E, center(Circle(B, C, E))), h we get concurrent(h, Line(E, H), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(C, F), Line(E, F) we get concurrent(Line(C, F), Line(E, F), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on k, Line(H, center(c)), Line(B, H) we get concurrent(k, Line(B, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), k, Line(D, H) we get concurrent(k, Line(D, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(D, E), j we get concurrent(j, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(B, I), k we get concurrent(k, Line(B, I), Line(I, center(c)))
By concurrent_sufficient_conditions on f, Line(B, H), Line(B, center(Circle(B, C, E))) we get concurrent(f, Line(B, H), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(C, F), Line(F, center(Circle(A, C, D))) we get concurrent(Line(C, F), Line(E, F), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(B, H), Line(D, H), Line(F, H) we get concurrent(Line(B, H), Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on g, Line(C, center(Circle(A, C, D))), Line(C, center(Circle(C, D, E))) we get concurrent(g, Line(C, center(Circle(A, C, D))), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, I), Line(I, center(c)), Line(D, I) we get concurrent(Line(D, I), Line(G, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, I), h we get concurrent(h, Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, I), Line(D, E), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(D, I), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, H), Line(F, H), Line(E, H) we get concurrent(Line(D, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), i, Line(D, center(Circle(A, C, D))) we get concurrent(i, Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(E, H), Line(D, H) we get concurrent(Line(D, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(B, H), Line(A, H), Line(F, H) we get concurrent(Line(A, H), Line(B, H), Line(F, H))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(D, H), Line(E, H) we get concurrent(Line(D, H), Line(E, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, H), k, Line(H, center(c)) we get concurrent(k, Line(D, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, E), g, Line(D, center(c)) we get concurrent(g, Line(D, E), Line(D, center(c)))
By concurrent_sufficient_conditions on f, Line(A, center(Circle(A, C, D))), Line(A, H) we get concurrent(f, Line(A, H), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), j, Line(E, F) we get concurrent(j, Line(E, F), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, I), j, Line(E, center(Circle(C, D, E))) we get concurrent(j, Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on j, h, Line(E, center(Circle(B, C, E))) we get concurrent(h, j, Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(c)), Line(D, H) we get concurrent(Line(D, E), Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(C, F), Line(F, center(Circle(B, C, E))), Line(F, center(Circle(A, C, D))) we get concurrent(Line(C, F), Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on g, Line(D, center(c)), Line(D, center(Circle(A, C, D))) we get concurrent(g, Line(D, center(c)), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), Line(F, I) we get concurrent(Line(D, F), Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), Line(C, center(Circle(A, C, D))), Line(C, center(Circle(B, C, E))) we get concurrent(Line(C, center(Circle(A, C, D))), Line(C, center(Circle(B, C, E))), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(E, center(Circle(C, D, E))), Line(E, I) we get concurrent(h, Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, center(Circle(C, D, E))), Line(D, F) we get concurrent(Line(D, F), Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, I), Line(B, center(Circle(B, C, E))), j we get concurrent(j, Line(B, I), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(F, I), Line(E, F) we get concurrent(Line(E, F), Line(F, I), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), i, Line(D, E) we get concurrent(i, Line(D, E), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, center(Circle(B, C, E))), Line(E, H) we get concurrent(Line(E, H), Line(E, center(c)), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(C, F), f we get concurrent(f, Line(C, F), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(C, center(Circle(A, C, D))), g, k we get concurrent(g, k, Line(C, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on f, Line(A, H), Line(A, center(Circle(A, C, D))) we get concurrent(f, Line(A, H), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, center(c)), i, Line(D, F) we get concurrent(i, Line(D, F), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(D, center(c)), Line(E, center(c)) we get concurrent(Line(A, center(c)), Line(D, center(c)), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(D, H), Line(G, H), Line(E, H) we get concurrent(Line(D, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(E, F), Line(F, H), f we get concurrent(f, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on k, Line(B, H), Line(G, H) we get concurrent(k, Line(B, H), Line(G, H))
By concurrent_sufficient_conditions on Line(D, I), Line(F, I), Line(E, I) we get concurrent(Line(D, I), Line(E, I), Line(F, I))
By concurrent_sufficient_conditions on k, Line(A, I), Line(G, I) we get concurrent(k, Line(A, I), Line(G, I))
By concurrent_sufficient_conditions on f, Line(C, F), Line(F, center(Circle(B, C, E))) we get concurrent(f, Line(C, F), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(C, F), Line(C, center(Circle(B, C, E))), h we get concurrent(h, Line(C, F), Line(C, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), g, Line(C, center(Circle(A, C, D))) we get concurrent(g, Line(C, center(Circle(A, C, D))), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(E, center(c)), Line(H, center(c)) we get concurrent(Line(E, center(c)), Line(H, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, I), Line(D, center(c)) we get concurrent(Line(D, I), Line(D, center(c)), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, H), Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, H), Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(B, center(Circle(B, C, E))), Line(E, center(Circle(B, C, E))) we get concurrent(Line(B, center(Circle(B, C, E))), Line(E, center(Circle(B, C, E))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(A, H), Line(E, H) we get concurrent(Line(A, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(A, C, D))), Line(C, F) we get concurrent(Line(C, F), Line(F, H), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on k, Line(A, H), Line(G, H) we get concurrent(k, Line(A, H), Line(G, H))
By concurrent_sufficient_conditions on Line(B, center(c)), Line(B, I), Line(B, center(Circle(B, C, E))) we get concurrent(Line(B, I), Line(B, center(c)), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on k, Line(F, I), Line(B, I) we get concurrent(k, Line(B, I), Line(F, I))
By concurrent_sufficient_conditions on Line(E, H), Line(H, center(c)), Line(D, H) we get concurrent(Line(D, H), Line(E, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(c)), Line(D, I) we get concurrent(Line(D, E), Line(D, I), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(D, H), Line(B, H) we get concurrent(Line(B, H), Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on Line(B, center(c)), g, Line(B, H) we get concurrent(g, Line(B, H), Line(B, center(c)))
By concurrent_sufficient_conditions on Line(E, H), Line(E, I), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, H), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))), j we get concurrent(j, Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(E, F), Line(F, H) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(B, I), Line(B, center(Circle(B, C, E))), Line(B, H) we get concurrent(Line(B, H), Line(B, I), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(A, C, D))), Line(C, center(Circle(C, D, E))), k we get concurrent(k, Line(C, center(Circle(A, C, D))), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(D, F), Line(F, center(Circle(B, C, E))) we get concurrent(Line(D, F), Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(E, center(Circle(C, D, E))), Line(E, center(c)) we get concurrent(Line(E, H), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(D, F), Line(F, center(Circle(A, C, D))) we get concurrent(Line(D, F), Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(B, I), Line(I, center(c)), Line(A, I) we get concurrent(Line(A, I), Line(B, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))), h we get concurrent(h, Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, H), i, Line(A, center(c)) we get concurrent(i, Line(A, H), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(F, H), f, Line(F, center(Circle(A, C, D))) we get concurrent(f, Line(F, H), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on i, f, Line(A, center(Circle(A, C, D))) we get concurrent(f, i, Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on g, Line(D, center(Circle(C, D, E))), Line(D, center(Circle(A, C, D))) we get concurrent(g, Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, H), g we get concurrent(g, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, D, E))), Line(G, I), Line(G, H) we get concurrent(Line(G, H), Line(G, I), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(E, center(Circle(B, C, E))), Line(C, center(Circle(B, C, E))) we get concurrent(Line(C, center(Circle(B, C, E))), Line(E, center(Circle(B, C, E))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, H), Line(G, H), Line(B, H) we get concurrent(Line(B, H), Line(D, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, H), Line(H, center(c)), Line(D, H) we get concurrent(Line(D, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(B, H), Line(B, center(Circle(B, C, E))), j we get concurrent(j, Line(B, H), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(G, I), i, j we get concurrent(i, j, Line(G, I))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(D, center(Circle(A, C, D))), Line(C, center(Circle(A, C, D))) we get concurrent(Line(C, center(Circle(A, C, D))), Line(D, center(Circle(A, C, D))), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on f, Line(F, center(Circle(A, C, D))), Line(F, I) we get concurrent(f, Line(F, I), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(G, H), Line(G, center(Circle(C, D, E))), j we get concurrent(j, Line(G, H), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(A, C, D))), g, Line(C, center(Circle(C, D, E))) we get concurrent(g, Line(C, center(Circle(A, C, D))), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(C, center(Circle(B, C, E))), Line(C, F) we get concurrent(h, Line(C, F), Line(C, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(A, I), Line(I, center(c)), Line(F, I) we get concurrent(Line(A, I), Line(F, I), Line(I, center(c)))
By concurrent_sufficient_conditions on j, Line(E, H), Line(E, center(Circle(C, D, E))) we get concurrent(j, Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(E, F), Line(F, center(Circle(B, C, E))) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, I), Line(F, I), Line(D, I) we get concurrent(Line(D, I), Line(E, I), Line(F, I))
By concurrent_sufficient_conditions on Line(E, H), Line(H, center(c)), Line(B, H) we get concurrent(Line(B, H), Line(E, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, I), Line(C, F), Line(F, H) we get concurrent(Line(C, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(G, H), Line(B, H), Line(A, H) we get concurrent(Line(A, H), Line(B, H), Line(G, H))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), g, Line(D, E) we get concurrent(g, Line(D, E), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on f, Line(A, I), Line(A, center(Circle(A, C, D))) we get concurrent(f, Line(A, I), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, E), i, Line(D, center(Circle(A, C, D))) we get concurrent(i, Line(D, E), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(G, I), k, Line(A, I) we get concurrent(k, Line(A, I), Line(G, I))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, C, E))), j, Line(B, center(c)) we get concurrent(j, Line(B, center(c)), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on g, Line(D, center(Circle(C, D, E))), Line(D, I) we get concurrent(g, Line(D, I), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), h, Line(D, E) we get concurrent(h, Line(D, E), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))), Line(E, center(c)) we get concurrent(Line(E, center(c)), Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, F), Line(C, center(Circle(B, C, E))), Line(C, center(Circle(A, C, D))) we get concurrent(Line(C, F), Line(C, center(Circle(A, C, D))), Line(C, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(F, H), Line(F, I) we get concurrent(Line(F, H), Line(F, I), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on h, Line(E, F), Line(E, center(Circle(C, D, E))) we get concurrent(h, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(I, center(c)), Line(H, center(c)) we get concurrent(Line(E, center(c)), Line(H, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))) we get concurrent(Line(D, F), Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on j, Line(E, I), Line(E, center(c)) we get concurrent(j, Line(E, I), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, center(c)), g we get concurrent(g, Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, I), Line(A, center(Circle(A, C, D))), i we get concurrent(i, Line(A, I), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, H), Line(E, center(Circle(C, D, E))), j we get concurrent(j, Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), f, Line(F, H) we get concurrent(f, Line(D, F), Line(F, H))
By concurrent_sufficient_conditions on h, Line(E, center(Circle(C, D, E))), j we get concurrent(h, j, Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, H), Line(G, I), i we get concurrent(i, Line(G, H), Line(G, I))
By concurrent_sufficient_conditions on Line(D, E), Line(D, F), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(D, F), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, I), f, Line(B, center(Circle(B, C, E))) we get concurrent(f, Line(B, I), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, center(Circle(B, C, E))), j we get concurrent(j, Line(E, center(c)), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, C, E))), Line(F, center(Circle(B, C, E))), Line(E, center(Circle(B, C, E))) we get concurrent(Line(B, center(Circle(B, C, E))), Line(E, center(Circle(B, C, E))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), j, Line(E, center(Circle(B, C, E))) we get concurrent(j, Line(E, center(c)), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(D, H), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, H), Line(D, I) we get concurrent(Line(D, H), Line(D, I), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(E, H), j, Line(E, center(Circle(B, C, E))) we get concurrent(j, Line(E, H), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(D, I), Line(B, I) we get concurrent(Line(B, I), Line(D, I), Line(F, I))
By concurrent_sufficient_conditions on k, Line(G, H), Line(H, center(c)) we get concurrent(k, Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, I), Line(A, I), Line(I, center(c)) we get concurrent(Line(A, I), Line(E, I), Line(I, center(c)))
By concurrent_sufficient_conditions on k, Line(C, center(Circle(A, C, D))), g we get concurrent(g, k, Line(C, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, H), Line(E, I), Line(E, center(Circle(B, C, E))) we get concurrent(Line(E, H), Line(E, I), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, H), Line(D, E) we get concurrent(Line(D, E), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, center(Circle(A, C, D))), i we get concurrent(i, Line(D, center(c)), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(G, I), Line(G, H), i we get concurrent(i, Line(G, H), Line(G, I))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(G, I), Line(E, I) we get concurrent(Line(E, I), Line(G, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(F, H), k, Line(G, H) we get concurrent(k, Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(B, H), Line(B, center(Circle(B, C, E))), Line(B, center(c)) we get concurrent(Line(B, H), Line(B, center(c)), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(D, F), Line(F, H) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(D, E), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(D, center(Circle(C, D, E))) we get concurrent(Line(C, center(Circle(C, D, E))), Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, H), k, Line(H, center(c)) we get concurrent(k, Line(B, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(F, I), Line(F, H) we get concurrent(Line(F, H), Line(F, I), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on j, Line(C, F), Line(G, H) we get concurrent(j, Line(C, F), Line(G, H))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, D, E))), Line(G, H), j we get concurrent(j, Line(G, H), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(E, F), Line(F, center(Circle(B, C, E))) we get concurrent(f, Line(E, F), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(D, E), Line(E, center(Circle(B, C, E))) we get concurrent(Line(D, E), Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(C, F), Line(D, F) we get concurrent(Line(C, F), Line(D, F), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(F, H), Line(G, H) we get concurrent(Line(F, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, F), Line(F, center(Circle(A, C, D))), Line(F, H) we get concurrent(Line(C, F), Line(F, H), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(G, I), Line(A, I), k we get concurrent(k, Line(A, I), Line(G, I))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, C, D))), Line(A, I), Line(A, center(c)) we get concurrent(Line(A, I), Line(A, center(c)), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, H), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, H), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(D, E), Line(E, H) we get concurrent(Line(D, E), Line(E, H), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(B, H), Line(B, center(c)), Line(B, I) we get concurrent(Line(B, H), Line(B, I), Line(B, center(c)))
By concurrent_sufficient_conditions on f, Line(F, center(Circle(A, C, D))), Line(C, F) we get concurrent(f, Line(C, F), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(C, F), Line(E, F), Line(F, I) we get concurrent(Line(C, F), Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(D, I), Line(G, I), Line(E, I) we get concurrent(Line(D, I), Line(E, I), Line(G, I))
By concurrent_sufficient_conditions on Line(C, center(Circle(A, C, D))), Line(D, center(Circle(A, C, D))), Line(F, center(Circle(A, C, D))) we get concurrent(Line(C, center(Circle(A, C, D))), Line(D, center(Circle(A, C, D))), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, E), i we get concurrent(i, Line(D, E), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on i, Line(D, center(c)), g we get concurrent(g, i, Line(D, center(c)))
By concurrent_sufficient_conditions on Line(E, H), Line(F, H), Line(D, H) we get concurrent(Line(D, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, center(Circle(C, D, E))), Line(E, center(Circle(B, C, E))) we get concurrent(Line(E, center(c)), Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(F, H), Line(F, I) we get concurrent(Line(F, H), Line(F, I), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(F, I), Line(I, center(c)), Line(A, I) we get concurrent(Line(A, I), Line(F, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(B, center(c)), Line(B, I), Line(B, H) we get concurrent(Line(B, H), Line(B, I), Line(B, center(c)))
By concurrent_sufficient_conditions on Line(F, H), k, Line(H, center(c)) we get concurrent(k, Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(E, I), Line(E, center(c)) we get concurrent(Line(E, F), Line(E, I), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(A, H), Line(A, I), Line(A, center(c)) we get concurrent(Line(A, H), Line(A, I), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(Circle(B, C, E))), Line(D, F) we get concurrent(Line(D, F), Line(F, I), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, I), Line(D, center(Circle(C, D, E))), Line(D, center(c)) we get concurrent(Line(D, I), Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(D, center(c)), Line(B, center(c)) we get concurrent(Line(B, center(c)), Line(D, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(E, F), h we get concurrent(h, Line(E, F), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(D, I), Line(A, I) we get concurrent(Line(A, I), Line(D, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, F), Line(D, I) we get concurrent(Line(D, F), Line(D, I), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(E, I), Line(D, E), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, I), Line(D, H), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, H), Line(D, I), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, H), Line(G, H), Line(E, H) we get concurrent(Line(A, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(G, H), j, Line(G, center(Circle(C, D, E))) we get concurrent(j, Line(G, H), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, Line(F, I), Line(A, I) we get concurrent(k, Line(A, I), Line(F, I))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(D, F), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(A, C, D))), Line(C, center(Circle(C, D, E))), Line(C, center(Circle(B, C, E))) we get concurrent(Line(C, center(Circle(A, C, D))), Line(C, center(Circle(B, C, E))), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(B, center(c)), Line(H, center(c)) we get concurrent(Line(B, center(c)), Line(E, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(D, center(c)), Line(B, center(c)) we get concurrent(Line(B, center(c)), Line(D, center(c)), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), h, j we get concurrent(h, j, Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(I, center(c)), k, Line(G, I) we get concurrent(k, Line(G, I), Line(I, center(c)))
By concurrent_sufficient_conditions on k, Line(G, H), Line(B, H) we get concurrent(k, Line(B, H), Line(G, H))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), h, Line(C, center(Circle(B, C, E))) we get concurrent(h, Line(C, center(Circle(B, C, E))), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(E, center(c)), Line(A, center(c)) we get concurrent(Line(A, center(c)), Line(E, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(B, I), Line(I, center(c)), k we get concurrent(k, Line(B, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(c)), Line(E, H) we get concurrent(Line(D, E), Line(E, H), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(H, center(c)), Line(I, center(c)) we get concurrent(Line(E, center(c)), Line(H, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, center(c)), Line(D, I) we get concurrent(Line(D, I), Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(B, I), Line(A, I) we get concurrent(Line(A, I), Line(B, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(F, I), Line(E, I), Line(D, I) we get concurrent(Line(D, I), Line(E, I), Line(F, I))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), g, Line(D, F) we get concurrent(g, Line(D, F), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(C, F), Line(E, F), Line(F, center(Circle(B, C, E))) we get concurrent(Line(C, F), Line(E, F), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(G, I), k, Line(B, I) we get concurrent(k, Line(B, I), Line(G, I))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, C, D))), Line(A, I), Line(A, H) we get concurrent(Line(A, H), Line(A, I), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(F, I), Line(D, I), Line(A, I) we get concurrent(Line(A, I), Line(D, I), Line(F, I))
By concurrent_sufficient_conditions on f, Line(D, F), Line(F, center(Circle(A, C, D))) we get concurrent(f, Line(D, F), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, I), Line(F, center(Circle(A, C, D))) we get concurrent(Line(D, F), Line(F, I), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, D, E))), j, Line(G, I) we get concurrent(j, Line(G, I), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(F, I), Line(D, F) we get concurrent(Line(D, F), Line(F, I), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, H), k, Line(D, H) we get concurrent(k, Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on Line(F, I), Line(G, I), Line(I, center(c)) we get concurrent(Line(F, I), Line(G, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(B, I), Line(I, center(c)), Line(F, I) we get concurrent(Line(B, I), Line(F, I), Line(I, center(c)))
By concurrent_sufficient_conditions on g, k, Line(C, center(Circle(A, C, D))) we get concurrent(g, k, Line(C, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, I), k, Line(F, I) we get concurrent(k, Line(F, I), Line(G, I))
By concurrent_sufficient_conditions on Line(B, I), Line(B, center(c)), Line(B, H) we get concurrent(Line(B, H), Line(B, I), Line(B, center(c)))
By concurrent_sufficient_conditions on Line(G, H), Line(B, H), k we get concurrent(k, Line(B, H), Line(G, H))
By concurrent_sufficient_conditions on i, Line(D, center(Circle(C, D, E))), Line(D, I) we get concurrent(i, Line(D, I), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, H), k, Line(H, center(c)) we get concurrent(k, Line(A, H), Line(H, center(c)))
By concurrent_sufficient_conditions on k, Line(C, center(Circle(B, C, E))), Line(C, F) we get concurrent(k, Line(C, F), Line(C, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(A, center(c)), Line(I, center(c)) we get concurrent(Line(A, center(c)), Line(E, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on k, Line(G, I), Line(F, I) we get concurrent(k, Line(F, I), Line(G, I))
By concurrent_sufficient_conditions on Line(B, H), Line(F, H), k we get concurrent(k, Line(B, H), Line(F, H))
By concurrent_sufficient_conditions on k, Line(B, H), Line(H, center(c)) we get concurrent(k, Line(B, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(F, I), Line(F, H) we get concurrent(Line(F, H), Line(F, I), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(A, C, D))), g, Line(C, F) we get concurrent(g, Line(C, F), Line(C, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, F), j we get concurrent(j, Line(E, F), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(G, I), Line(G, H), Line(G, center(Circle(C, D, E))) we get concurrent(Line(G, H), Line(G, I), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(D, center(Circle(C, D, E))), Line(D, H) we get concurrent(i, Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), i, Line(D, center(Circle(C, D, E))) we get concurrent(i, Line(D, F), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(B, H), Line(H, center(c)) we get concurrent(Line(B, H), Line(E, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, center(c)), h, Line(E, H) we get concurrent(h, Line(E, H), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, I), Line(E, center(Circle(B, C, E))), Line(E, center(c)) we get concurrent(Line(E, I), Line(E, center(c)), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(C, F), Line(F, center(Circle(B, C, E))) we get concurrent(Line(C, F), Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, H), Line(D, E), Line(D, center(Circle(A, C, D))) we get concurrent(Line(D, E), Line(D, H), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on k, Line(I, center(c)), Line(B, I) we get concurrent(k, Line(B, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(B, C, E))), Line(E, I) we get concurrent(Line(D, E), Line(E, I), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(C, F), j, Line(G, I) we get concurrent(j, Line(C, F), Line(G, I))
By concurrent_sufficient_conditions on k, Line(F, I), Line(E, I) we get concurrent(k, Line(E, I), Line(F, I))
By concurrent_sufficient_conditions on h, Line(A, center(c)), Line(A, H) we get concurrent(h, Line(A, H), Line(A, center(c)))
By concurrent_sufficient_conditions on k, Line(F, H), Line(G, H) we get concurrent(k, Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(E, I), Line(E, center(c)), Line(E, center(Circle(B, C, E))) we get concurrent(Line(E, I), Line(E, center(c)), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(E, I), Line(F, I) we get concurrent(Line(E, I), Line(F, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))), Line(D, H) we get concurrent(Line(D, H), Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(Circle(A, C, D))), Line(C, F) we get concurrent(Line(C, F), Line(F, I), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(F, H), Line(H, center(c)), Line(A, H) we get concurrent(Line(A, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(B, center(c)), j, Line(B, H) we get concurrent(j, Line(B, H), Line(B, center(c)))
By concurrent_sufficient_conditions on Line(A, H), Line(H, center(c)), Line(B, H) we get concurrent(Line(A, H), Line(B, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, I), Line(C, F), Line(F, center(Circle(B, C, E))) we get concurrent(Line(C, F), Line(F, I), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(A, H), Line(B, H), Line(F, H) we get concurrent(Line(A, H), Line(B, H), Line(F, H))
By concurrent_sufficient_conditions on i, Line(D, center(c)), Line(D, F) we get concurrent(i, Line(D, F), Line(D, center(c)))
By concurrent_sufficient_conditions on k, Line(C, center(Circle(C, D, E))), Line(C, center(Circle(A, C, D))) we get concurrent(k, Line(C, center(Circle(A, C, D))), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, I), Line(B, I), Line(I, center(c)) we get concurrent(Line(B, I), Line(G, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, E), Line(D, I), Line(D, center(Circle(A, C, D))) we get concurrent(Line(D, E), Line(D, I), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, I), Line(E, center(Circle(B, C, E))), Line(E, H) we get concurrent(Line(E, H), Line(E, I), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(Circle(B, C, E))), Line(F, H) we get concurrent(Line(F, H), Line(F, I), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, center(Circle(B, C, E))), Line(E, F) we get concurrent(Line(E, F), Line(E, center(c)), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, center(c)), Line(D, E) we get concurrent(Line(D, E), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, I), Line(F, I), Line(I, center(c)) we get concurrent(Line(F, I), Line(G, I), Line(I, center(c)))
By concurrent_sufficient_conditions on g, Line(D, H), Line(D, center(Circle(A, C, D))) we get concurrent(g, Line(D, H), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(F, I), Line(C, F) we get concurrent(Line(C, F), Line(F, I), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(D, E), h we get concurrent(h, Line(D, E), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(F, H), Line(H, center(c)) we get concurrent(Line(E, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), Line(F, I) we get concurrent(Line(D, F), Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(Circle(C, D, E))), Line(D, F) we get concurrent(Line(D, E), Line(D, F), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(A, H), k we get concurrent(k, Line(A, H), Line(F, H))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(Circle(B, C, E))), Line(F, center(Circle(A, C, D))) we get concurrent(Line(F, I), Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(C, F), i, Line(G, I) we get concurrent(i, Line(C, F), Line(G, I))
By concurrent_sufficient_conditions on j, Line(E, I), Line(E, center(Circle(C, D, E))) we get concurrent(j, Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(A, H), Line(A, center(c)) we get concurrent(i, Line(A, H), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), j, Line(E, I) we get concurrent(j, Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(B, I), Line(F, I) we get concurrent(Line(B, I), Line(F, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, E), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), h, Line(E, H) we get concurrent(h, Line(E, H), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), f, Line(C, F) we get concurrent(f, Line(C, F), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(E, F), j we get concurrent(j, Line(E, F), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(C, F), Line(F, center(Circle(A, C, D))) we get concurrent(Line(C, F), Line(D, F), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on i, Line(D, H), Line(D, center(Circle(A, C, D))) we get concurrent(i, Line(D, H), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, F), f, Line(F, I) we get concurrent(f, Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(F, H), Line(F, I), Line(F, center(Circle(A, C, D))) we get concurrent(Line(F, H), Line(F, I), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(G, I), Line(C, F), j we get concurrent(j, Line(C, F), Line(G, I))
By concurrent_sufficient_conditions on Line(D, H), Line(D, center(Circle(C, D, E))), g we get concurrent(g, Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(B, C, E))), Line(E, I) we get concurrent(Line(E, F), Line(E, I), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(G, H), Line(B, H) we get concurrent(Line(B, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, F), Line(E, H) we get concurrent(Line(E, F), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, H), i, Line(D, center(Circle(A, C, D))) we get concurrent(i, Line(D, H), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), g, k we get concurrent(g, k, Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(B, C, E))), f we get concurrent(f, Line(E, F), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, H), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(C, F), Line(F, H) we get concurrent(Line(C, F), Line(D, F), Line(F, H))
By concurrent_sufficient_conditions on Line(F, H), Line(D, H), Line(E, H) we get concurrent(Line(D, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(C, F), f, Line(F, I) we get concurrent(f, Line(C, F), Line(F, I))
By concurrent_sufficient_conditions on Line(E, H), Line(E, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, I), Line(D, center(Circle(C, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(D, I), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(D, H), Line(B, H) we get concurrent(Line(B, H), Line(D, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, F), f, Line(F, center(Circle(A, C, D))) we get concurrent(f, Line(D, F), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on k, Line(C, center(Circle(C, D, E))), h we get concurrent(h, k, Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, F), Line(D, F), Line(F, I) we get concurrent(Line(C, F), Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(G, H), Line(F, H), Line(D, H) we get concurrent(Line(D, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, I), Line(D, F) we get concurrent(Line(D, F), Line(D, I), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, I), k, Line(I, center(c)) we get concurrent(k, Line(E, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, H), Line(F, H), Line(B, H) we get concurrent(Line(B, H), Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), g, Line(D, H) we get concurrent(g, Line(D, H), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, I), Line(E, center(Circle(C, D, E))), j we get concurrent(j, Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(Circle(B, C, E))), Line(C, F) we get concurrent(Line(C, F), Line(F, I), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, H), g we get concurrent(g, Line(D, H), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(c)), i we get concurrent(i, Line(D, E), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(C, F), Line(F, I), Line(F, center(Circle(B, C, E))) we get concurrent(Line(C, F), Line(F, I), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(A, center(c)), h, i we get concurrent(h, i, Line(A, center(c)))
By concurrent_sufficient_conditions on f, Line(F, I), Line(E, F) we get concurrent(f, Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(A, H), Line(A, center(Circle(A, C, D))), Line(A, I) we get concurrent(Line(A, H), Line(A, I), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(c)), Line(D, F) we get concurrent(Line(D, E), Line(D, F), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(E, I), Line(G, I), Line(A, I) we get concurrent(Line(A, I), Line(E, I), Line(G, I))
By concurrent_sufficient_conditions on j, Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))) we get concurrent(j, Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(G, I), Line(B, I) we get concurrent(Line(B, I), Line(G, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(A, H), Line(A, center(Circle(A, C, D))), Line(A, center(c)) we get concurrent(Line(A, H), Line(A, center(c)), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(E, center(c)), Line(I, center(c)) we get concurrent(Line(A, center(c)), Line(E, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(A, I), Line(A, center(Circle(A, C, D))) we get concurrent(Line(A, I), Line(A, center(c)), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(D, center(c)), Line(I, center(c)) we get concurrent(Line(D, center(c)), Line(E, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(C, F), Line(F, H), Line(E, F) we get concurrent(Line(C, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(B, center(c)), Line(H, center(c)) we get concurrent(Line(B, center(c)), Line(H, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on i, Line(A, center(c)), h we get concurrent(h, i, Line(A, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(A, H), k we get concurrent(k, Line(A, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, H), Line(E, center(c)), Line(E, I) we get concurrent(Line(E, H), Line(E, I), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(A, center(c)), Line(I, center(c)) we get concurrent(Line(A, center(c)), Line(D, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(A, I), k we get concurrent(k, Line(A, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(G, I), Line(I, center(c)), k we get concurrent(k, Line(G, I), Line(I, center(c)))
By concurrent_sufficient_conditions on k, Line(E, H), Line(H, center(c)) we get concurrent(k, Line(E, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, H), Line(D, I), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, H), Line(D, I), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, H), k, Line(G, H) we get concurrent(k, Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(A, I), Line(I, center(c)), Line(D, I) we get concurrent(Line(A, I), Line(D, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(B, C, E))), Line(E, H) we get concurrent(Line(E, F), Line(E, H), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(C, D, E))), Line(E, center(Circle(B, C, E))) we get concurrent(Line(D, E), Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(E, center(c)), Line(E, F) we get concurrent(h, Line(E, F), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), k, Line(C, center(Circle(A, C, D))) we get concurrent(k, Line(C, center(Circle(A, C, D))), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, H), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(E, F), Line(F, H) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on g, Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))) we get concurrent(g, Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, I), Line(E, H), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, H), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on j, Line(B, center(c)), Line(B, center(Circle(B, C, E))) we get concurrent(j, Line(B, center(c)), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, I), Line(B, I), Line(G, I) we get concurrent(Line(B, I), Line(E, I), Line(G, I))
By concurrent_sufficient_conditions on Line(D, I), Line(G, I), k we get concurrent(k, Line(D, I), Line(G, I))
By concurrent_sufficient_conditions on Line(G, H), Line(G, center(Circle(C, D, E))), Line(G, I) we get concurrent(Line(G, H), Line(G, I), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(C, D, E))), Line(E, center(c)) we get concurrent(Line(D, E), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, F), Line(C, center(Circle(A, C, D))), Line(C, center(Circle(B, C, E))) we get concurrent(Line(C, F), Line(C, center(Circle(A, C, D))), Line(C, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, I), k, Line(I, center(c)) we get concurrent(k, Line(F, I), Line(I, center(c)))
By concurrent_sufficient_conditions on j, Line(D, E), Line(E, center(c)) we get concurrent(j, Line(D, E), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(A, H), Line(G, H), Line(F, H) we get concurrent(Line(A, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, H), Line(E, F), f we get concurrent(f, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(F, I), Line(E, I), Line(I, center(c)) we get concurrent(Line(E, I), Line(F, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, center(c)), g, i we get concurrent(g, i, Line(D, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(F, I), Line(C, F) we get concurrent(Line(C, F), Line(F, I), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(B, H), Line(H, center(c)), k we get concurrent(k, Line(B, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, I), Line(E, I), Line(B, I) we get concurrent(Line(B, I), Line(E, I), Line(F, I))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(F, center(Circle(A, C, D))), Line(E, F) we get concurrent(Line(E, F), Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, I), Line(A, I), Line(F, I) we get concurrent(Line(A, I), Line(D, I), Line(F, I))
By concurrent_sufficient_conditions on j, Line(E, center(c)), Line(E, I) we get concurrent(j, Line(E, I), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(A, H), Line(F, H), Line(B, H) we get concurrent(Line(A, H), Line(B, H), Line(F, H))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(A, H), Line(G, H) we get concurrent(Line(A, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, center(Circle(A, C, D))), k, Line(C, F) we get concurrent(k, Line(C, F), Line(C, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on k, Line(F, H), Line(D, H) we get concurrent(k, Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, H), Line(E, I) we get concurrent(Line(E, H), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, I), Line(D, center(Circle(C, D, E))), Line(D, center(Circle(A, C, D))) we get concurrent(Line(D, I), Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(Circle(A, C, D))), Line(D, F) we get concurrent(Line(D, F), Line(F, I), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, I), Line(I, center(c)), Line(G, I) we get concurrent(Line(D, I), Line(G, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, F), Line(D, I), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(D, I), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, C, D))), Line(A, H), i we get concurrent(i, Line(A, H), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on i, Line(D, center(Circle(A, C, D))), Line(D, E) we get concurrent(i, Line(D, E), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(B, I), Line(I, center(c)), Line(E, I) we get concurrent(Line(B, I), Line(E, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(E, H), Line(B, H), Line(F, H) we get concurrent(Line(B, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(A, center(Circle(A, C, D))), Line(A, H) we get concurrent(Line(A, H), Line(A, center(c)), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(C, center(Circle(B, C, E))), Line(E, center(Circle(B, C, E))) we get concurrent(Line(C, center(Circle(B, C, E))), Line(E, center(Circle(B, C, E))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(A, H), Line(B, H) we get concurrent(Line(A, H), Line(B, H), Line(F, H))
By concurrent_sufficient_conditions on Line(E, F), Line(C, F), Line(F, H) we get concurrent(Line(C, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(A, I), Line(A, center(c)), Line(A, H) we get concurrent(Line(A, H), Line(A, I), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(G, H), Line(E, H) we get concurrent(Line(E, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, center(Circle(B, C, E))), h we get concurrent(h, Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, F), Line(F, center(Circle(B, C, E))), Line(D, F) we get concurrent(Line(C, F), Line(D, F), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on h, Line(E, center(c)), Line(D, E) we get concurrent(h, Line(D, E), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), Line(F, H) we get concurrent(Line(D, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(G, I), Line(B, I), Line(F, I) we get concurrent(Line(B, I), Line(F, I), Line(G, I))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(D, E), h we get concurrent(h, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), g, Line(D, E) we get concurrent(g, Line(D, E), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(A, I), Line(I, center(c)), k we get concurrent(k, Line(A, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, I), Line(G, I), Line(B, I) we get concurrent(Line(B, I), Line(D, I), Line(G, I))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, E), Line(D, center(c)) we get concurrent(Line(D, E), Line(D, center(c)), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, F), Line(D, E) we get concurrent(Line(D, E), Line(D, F), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(E, H), Line(A, H) we get concurrent(Line(A, H), Line(E, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(A, center(c)), Line(D, center(c)) we get concurrent(Line(A, center(c)), Line(D, center(c)), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(F, I), Line(A, I), Line(G, I) we get concurrent(Line(A, I), Line(F, I), Line(G, I))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(D, I), Line(G, I) we get concurrent(Line(D, I), Line(G, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(E, H), Line(G, H), Line(B, H) we get concurrent(Line(B, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(C, center(Circle(A, C, D))), Line(D, center(Circle(A, C, D))) we get concurrent(Line(C, center(Circle(A, C, D))), Line(D, center(Circle(A, C, D))), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(D, center(c)), Line(A, center(c)) we get concurrent(Line(A, center(c)), Line(D, center(c)), Line(E, center(c)))
By concurrent_sufficient_conditions on i, Line(G, H), Line(C, F) we get concurrent(i, Line(C, F), Line(G, H))
By concurrent_sufficient_conditions on Line(G, H), Line(G, I), Line(G, center(Circle(C, D, E))) we get concurrent(Line(G, H), Line(G, I), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, I), Line(D, H), Line(D, center(c)) we get concurrent(Line(D, H), Line(D, I), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, I), i we get concurrent(i, Line(D, I), Line(D, center(c)))
By concurrent_sufficient_conditions on k, Line(I, center(c)), Line(E, I) we get concurrent(k, Line(E, I), Line(I, center(c)))
By concurrent_sufficient_conditions on h, Line(E, H), Line(E, center(c)) we get concurrent(h, Line(E, H), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(A, C, D))), Line(F, H) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, I), Line(G, I), Line(D, I) we get concurrent(Line(D, I), Line(E, I), Line(G, I))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(E, center(c)), Line(D, center(c)) we get concurrent(Line(D, center(c)), Line(E, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on k, Line(H, center(c)), Line(F, H) we get concurrent(k, Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on i, Line(D, I), Line(D, center(Circle(A, C, D))) we get concurrent(i, Line(D, I), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, I), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, I), Line(E, center(Circle(B, C, E))) we get concurrent(Line(E, I), Line(E, center(c)), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on k, Line(C, F), Line(C, center(Circle(B, C, E))) we get concurrent(k, Line(C, F), Line(C, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(B, center(c)), Line(E, center(c)), Line(H, center(c)) we get concurrent(Line(B, center(c)), Line(E, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(F, I), f we get concurrent(f, Line(F, I), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(B, C, E))), h, Line(C, center(Circle(C, D, E))) we get concurrent(h, Line(C, center(Circle(B, C, E))), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(H, center(c)), Line(D, center(c)) we get concurrent(Line(A, center(c)), Line(D, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on f, Line(F, center(Circle(B, C, E))), Line(E, F) we get concurrent(f, Line(E, F), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, I), g, Line(D, center(c)) we get concurrent(g, Line(D, I), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(A, I), Line(F, I), Line(B, I) we get concurrent(Line(A, I), Line(B, I), Line(F, I))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(A, I), Line(A, H) we get concurrent(Line(A, H), Line(A, I), Line(A, center(c)))
By concurrent_sufficient_conditions on k, Line(A, H), Line(H, center(c)) we get concurrent(k, Line(A, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(G, H), Line(C, F), Line(G, I) we get concurrent(Line(C, F), Line(G, H), Line(G, I))
By concurrent_sufficient_conditions on Line(E, I), Line(D, I), Line(I, center(c)) we get concurrent(Line(D, I), Line(E, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, H), Line(D, center(Circle(A, C, D))), Line(D, center(c)) we get concurrent(Line(D, H), Line(D, center(c)), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, center(Circle(A, C, D))), Line(D, F) we get concurrent(Line(D, F), Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, I), Line(A, center(Circle(A, C, D))), Line(A, H) we get concurrent(Line(A, H), Line(A, I), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, center(Circle(A, C, D))), Line(D, H) we get concurrent(Line(D, H), Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(H, center(c)), Line(G, H) we get concurrent(Line(F, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on g, Line(B, I), Line(B, center(c)) we get concurrent(g, Line(B, I), Line(B, center(c)))
By concurrent_sufficient_conditions on Line(F, I), Line(F, H), Line(D, F) we get concurrent(Line(D, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(E, H), Line(E, center(c)), Line(E, center(Circle(B, C, E))) we get concurrent(Line(E, H), Line(E, center(c)), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(E, center(c)), Line(B, center(c)) we get concurrent(Line(B, center(c)), Line(E, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(E, I), Line(B, I), Line(F, I) we get concurrent(Line(B, I), Line(E, I), Line(F, I))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(H, center(c)), Line(E, center(c)) we get concurrent(Line(A, center(c)), Line(E, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), h, k we get concurrent(h, k, Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, C, D))), Line(A, H), Line(A, center(c)) we get concurrent(Line(A, H), Line(A, center(c)), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(F, I), Line(F, H), Line(F, center(Circle(B, C, E))) we get concurrent(Line(F, H), Line(F, I), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on k, Line(D, H), Line(F, H) we get concurrent(k, Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on Line(D, F), Line(D, center(Circle(A, C, D))), i we get concurrent(i, Line(D, F), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(F, I), k, Line(B, I) we get concurrent(k, Line(B, I), Line(F, I))
By concurrent_sufficient_conditions on g, k, Line(C, center(Circle(C, D, E))) we get concurrent(g, k, Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, F), Line(C, center(Circle(A, C, D))), k we get concurrent(k, Line(C, F), Line(C, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(c)), g we get concurrent(g, Line(D, E), Line(D, center(c)))
By concurrent_sufficient_conditions on i, Line(D, center(c)), Line(D, center(Circle(C, D, E))) we get concurrent(i, Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, H), Line(D, I) we get concurrent(Line(D, H), Line(D, I), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, F), h we get concurrent(h, Line(E, F), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, C, D))), Line(A, center(c)), i we get concurrent(i, Line(A, center(c)), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(I, center(c)), Line(E, center(c)) we get concurrent(Line(E, center(c)), Line(H, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, center(Circle(B, C, E))), Line(E, F) we get concurrent(Line(E, F), Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, H), Line(D, center(Circle(A, C, D))), Line(D, F) we get concurrent(Line(D, F), Line(D, H), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, I), Line(G, I), Line(F, I) we get concurrent(Line(E, I), Line(F, I), Line(G, I))
By concurrent_sufficient_conditions on Line(F, I), Line(G, I), Line(A, I) we get concurrent(Line(A, I), Line(F, I), Line(G, I))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), Line(F, center(Circle(B, C, E))) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(B, center(Circle(B, C, E))), Line(F, center(Circle(B, C, E))) we get concurrent(Line(B, center(Circle(B, C, E))), Line(E, center(Circle(B, C, E))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(A, I), Line(F, I), k we get concurrent(k, Line(A, I), Line(F, I))
By concurrent_sufficient_conditions on g, Line(D, center(Circle(A, C, D))), i we get concurrent(g, i, Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(B, I), Line(A, I), Line(G, I) we get concurrent(Line(A, I), Line(B, I), Line(G, I))
By concurrent_sufficient_conditions on Line(F, H), Line(D, F), Line(F, I) we get concurrent(Line(D, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(G, I), Line(D, I), Line(A, I) we get concurrent(Line(A, I), Line(D, I), Line(G, I))
By concurrent_sufficient_conditions on f, i, Line(A, center(Circle(A, C, D))) we get concurrent(f, i, Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(B, I), Line(G, I), Line(A, I) we get concurrent(Line(A, I), Line(B, I), Line(G, I))
By concurrent_sufficient_conditions on j, Line(E, center(c)), Line(D, E) we get concurrent(j, Line(D, E), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(G, H), Line(B, H), Line(D, H) we get concurrent(Line(B, H), Line(D, H), Line(G, H))
By concurrent_sufficient_conditions on Line(D, I), Line(D, H), Line(D, center(Circle(A, C, D))) we get concurrent(Line(D, H), Line(D, I), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, H), Line(D, center(Circle(A, C, D))) we get concurrent(Line(D, H), Line(D, center(c)), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(B, C, E))), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, F), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(D, F), Line(F, I), Line(F, H) we get concurrent(Line(D, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(C, F), Line(F, H) we get concurrent(Line(C, F), Line(F, H), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(B, I), Line(B, center(c)), Line(B, center(Circle(B, C, E))) we get concurrent(Line(B, I), Line(B, center(c)), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(E, I), Line(E, F) we get concurrent(Line(E, F), Line(E, I), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, H), h, Line(E, center(Circle(C, D, E))) we get concurrent(h, Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, H), Line(F, H), k we get concurrent(k, Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(A, center(Circle(A, C, D))), Line(A, I) we get concurrent(Line(A, I), Line(A, center(c)), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, H), Line(E, center(Circle(B, C, E))), Line(D, E) we get concurrent(Line(D, E), Line(E, H), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), f, Line(F, center(Circle(B, C, E))) we get concurrent(f, Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(I, center(c)), Line(D, center(c)) we get concurrent(Line(D, center(c)), Line(E, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(F, I), Line(D, F), Line(F, H) we get concurrent(Line(D, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(D, I), Line(A, I), Line(G, I) we get concurrent(Line(A, I), Line(D, I), Line(G, I))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(D, E), Line(E, I) we get concurrent(Line(D, E), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(A, I), Line(D, I) we get concurrent(Line(A, I), Line(D, I), Line(F, I))
By concurrent_sufficient_conditions on i, Line(D, H), Line(D, center(Circle(C, D, E))) we get concurrent(i, Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, H), Line(D, center(c)), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, H), Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, H), Line(H, center(c)), Line(G, H) we get concurrent(Line(D, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(A, I), Line(F, I), Line(E, I) we get concurrent(Line(A, I), Line(E, I), Line(F, I))
By concurrent_sufficient_conditions on Line(C, F), Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))) we get concurrent(Line(C, F), Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, I), Line(F, I), Line(I, center(c)) we get concurrent(Line(D, I), Line(F, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(I, center(c)), Line(B, center(c)) we get concurrent(Line(B, center(c)), Line(E, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(B, center(c)), Line(B, center(Circle(B, C, E))), j we get concurrent(j, Line(B, center(c)), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on g, Line(D, center(Circle(A, C, D))), Line(D, I) we get concurrent(g, Line(D, I), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, I), j, Line(E, center(c)) we get concurrent(j, Line(E, I), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, H), Line(G, H), Line(F, H) we get concurrent(Line(E, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on h, Line(E, F), Line(E, center(c)) we get concurrent(h, Line(E, F), Line(E, center(c)))
By concurrent_sufficient_conditions on k, Line(A, I), Line(F, I) we get concurrent(k, Line(A, I), Line(F, I))
By concurrent_sufficient_conditions on Line(D, I), Line(E, I), Line(G, I) we get concurrent(Line(D, I), Line(E, I), Line(G, I))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, center(Circle(A, C, D))), Line(D, I) we get concurrent(Line(D, I), Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(D, center(c)), i we get concurrent(i, Line(D, F), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(D, H), Line(D, I), Line(D, center(Circle(A, C, D))) we get concurrent(Line(D, H), Line(D, I), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, I), Line(E, center(Circle(C, D, E))), Line(E, H) we get concurrent(Line(E, H), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(G, H), Line(A, H) we get concurrent(Line(A, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(D, H), Line(D, center(Circle(C, D, E))), Line(D, F) we get concurrent(Line(D, F), Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, E), Line(D, F) we get concurrent(Line(D, E), Line(D, F), Line(D, center(c)))
By concurrent_sufficient_conditions on j, Line(B, center(c)), Line(B, I) we get concurrent(j, Line(B, I), Line(B, center(c)))
By concurrent_sufficient_conditions on Line(E, I), Line(E, center(Circle(B, C, E))), Line(E, F) we get concurrent(Line(E, F), Line(E, I), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(E, F), Line(F, center(Circle(A, C, D))) we get concurrent(Line(E, F), Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(C, F), Line(F, center(Circle(B, C, E))), Line(F, H) we get concurrent(Line(C, F), Line(F, H), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(C, F), f, Line(F, H) we get concurrent(f, Line(C, F), Line(F, H))
By concurrent_sufficient_conditions on i, Line(D, I), Line(D, center(Circle(C, D, E))) we get concurrent(i, Line(D, I), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on j, Line(E, F), Line(E, center(Circle(C, D, E))) we get concurrent(j, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, F), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, Line(D, I), Line(F, I) we get concurrent(k, Line(D, I), Line(F, I))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, center(Circle(A, C, D))), Line(D, center(c)) we get concurrent(Line(D, center(c)), Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on j, Line(B, center(Circle(B, C, E))), f we get concurrent(f, j, Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(A, H), k, Line(G, H) we get concurrent(k, Line(A, H), Line(G, H))
By concurrent_sufficient_conditions on k, Line(F, H), Line(H, center(c)) we get concurrent(k, Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on j, Line(E, center(Circle(B, C, E))), Line(E, F) we get concurrent(j, Line(E, F), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), h, Line(E, H) we get concurrent(h, Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, H), Line(B, center(c)), Line(B, center(Circle(B, C, E))) we get concurrent(Line(B, H), Line(B, center(c)), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(H, center(c)), Line(I, center(c)) we get concurrent(Line(D, center(c)), Line(H, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, C, E))), f, Line(B, I) we get concurrent(f, Line(B, I), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on j, Line(E, center(c)), Line(E, center(Circle(C, D, E))) we get concurrent(j, Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(E, H), Line(G, H) we get concurrent(Line(E, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on f, Line(F, center(Circle(A, C, D))), Line(D, F) we get concurrent(f, Line(D, F), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on f, Line(F, H), Line(C, F) we get concurrent(f, Line(C, F), Line(F, H))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(A, C, D))), Line(F, I) we get concurrent(Line(F, H), Line(F, I), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on j, Line(E, center(Circle(C, D, E))), Line(E, F) we get concurrent(j, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, I), Line(E, center(Circle(C, D, E))), h we get concurrent(h, Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(B, center(c)), Line(E, center(c)) we get concurrent(Line(B, center(c)), Line(E, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, center(Circle(B, C, E))), Line(E, I) we get concurrent(Line(E, I), Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on j, i, Line(G, H) we get concurrent(i, j, Line(G, H))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(D, E), Line(E, I) we get concurrent(Line(D, E), Line(E, I), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on g, Line(D, I), Line(D, center(c)) we get concurrent(g, Line(D, I), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(E, H), Line(E, center(Circle(C, D, E))), h we get concurrent(h, Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(H, center(c)), Line(F, H) we get concurrent(Line(E, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on h, Line(E, I), Line(E, center(Circle(B, C, E))) we get concurrent(h, Line(E, I), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(A, H), Line(G, H) we get concurrent(Line(A, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, H), Line(D, F) we get concurrent(Line(D, F), Line(D, H), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(B, I), Line(D, I), Line(F, I) we get concurrent(Line(B, I), Line(D, I), Line(F, I))
By concurrent_sufficient_conditions on Line(D, H), Line(D, F), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(A, H), Line(B, H) we get concurrent(Line(A, H), Line(B, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, center(Circle(A, C, D))), i we get concurrent(i, Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(C, F), Line(D, F) we get concurrent(Line(C, F), Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on j, Line(C, F), Line(G, I) we get concurrent(j, Line(C, F), Line(G, I))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(D, F), Line(F, I) we get concurrent(Line(D, F), Line(F, I), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, I), Line(D, center(c)) we get concurrent(Line(D, E), Line(D, I), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(F, I), f, Line(D, F) we get concurrent(f, Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(D, F), Line(F, I), Line(F, center(Circle(B, C, E))) we get concurrent(Line(D, F), Line(F, I), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on g, Line(C, center(Circle(C, D, E))), Line(C, center(Circle(A, C, D))) we get concurrent(g, Line(C, center(Circle(A, C, D))), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(B, center(Circle(B, C, E))), Line(B, I) we get concurrent(f, Line(B, I), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(D, center(c)), Line(I, center(c)) we get concurrent(Line(D, center(c)), Line(H, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on i, g, Line(D, center(c)) we get concurrent(g, i, Line(D, center(c)))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), g, Line(D, center(c)) we get concurrent(g, Line(D, center(c)), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, H), Line(D, F) we get concurrent(Line(D, F), Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(D, H), Line(G, H), Line(H, center(c)) we get concurrent(Line(D, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on h, Line(D, E), Line(E, center(c)) we get concurrent(h, Line(D, E), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(c)), Line(E, I) we get concurrent(Line(E, F), Line(E, I), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), f, Line(C, F) we get concurrent(f, Line(C, F), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(G, I), Line(C, F), Line(G, H) we get concurrent(Line(C, F), Line(G, H), Line(G, I))
By concurrent_sufficient_conditions on g, Line(D, center(Circle(C, D, E))), Line(D, center(c)) we get concurrent(g, Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, center(Circle(A, C, D))), Line(D, E) we get concurrent(Line(D, E), Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(G, I), Line(G, H) we get concurrent(i, Line(G, H), Line(G, I))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, E), Line(D, I) we get concurrent(Line(D, E), Line(D, I), Line(D, center(c)))
By concurrent_sufficient_conditions on h, Line(E, center(Circle(C, D, E))), Line(D, E) we get concurrent(h, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))), Line(D, I) we get concurrent(Line(D, I), Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(C, F), Line(D, F) we get concurrent(Line(C, F), Line(D, F), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, I), Line(G, I), Line(B, I) we get concurrent(Line(B, I), Line(E, I), Line(G, I))
By concurrent_sufficient_conditions on Line(D, H), Line(H, center(c)), Line(F, H) we get concurrent(Line(D, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, I), Line(F, H), Line(E, F) we get concurrent(Line(E, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(E, F), f we get concurrent(f, Line(E, F), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, I), Line(G, I), Line(I, center(c)) we get concurrent(Line(E, I), Line(G, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(B, I), Line(F, I), Line(D, I) we get concurrent(Line(B, I), Line(D, I), Line(F, I))
By concurrent_sufficient_conditions on Line(F, I), Line(E, I), Line(G, I) we get concurrent(Line(E, I), Line(F, I), Line(G, I))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, I), Line(D, E) we get concurrent(Line(D, E), Line(D, I), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, I), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, F), g we get concurrent(g, Line(D, F), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, I), Line(G, H), Line(C, F) we get concurrent(Line(C, F), Line(G, H), Line(G, I))
By concurrent_sufficient_conditions on Line(E, center(c)), h, j we get concurrent(h, j, Line(E, center(c)))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(A, center(Circle(A, C, D))), Line(F, center(Circle(A, C, D))) we get concurrent(Line(A, center(Circle(A, C, D))), Line(D, center(Circle(A, C, D))), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), i, Line(D, F) we get concurrent(i, Line(D, F), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on i, Line(D, center(c)), Line(D, I) we get concurrent(i, Line(D, I), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(D, F), Line(D, E), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(D, F), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))), Line(D, F) we get concurrent(Line(D, F), Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(B, H), Line(H, center(c)), Line(E, H) we get concurrent(Line(B, H), Line(E, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(B, I), Line(G, I), Line(D, I) we get concurrent(Line(B, I), Line(D, I), Line(G, I))
By concurrent_sufficient_conditions on k, Line(E, I), Line(G, I) we get concurrent(k, Line(E, I), Line(G, I))
By concurrent_sufficient_conditions on j, Line(E, center(Circle(C, D, E))), Line(E, center(c)) we get concurrent(j, Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))) we get concurrent(Line(C, center(Circle(C, D, E))), Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, I), h, Line(A, center(c)) we get concurrent(h, Line(A, I), Line(A, center(c)))
By concurrent_sufficient_conditions on j, Line(E, H), Line(E, center(Circle(B, C, E))) we get concurrent(j, Line(E, H), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(c)), h we get concurrent(h, Line(E, F), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(D, F), Line(F, H), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, F), Line(D, center(c)) we get concurrent(Line(D, F), Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, H), Line(H, center(c)), Line(F, H) we get concurrent(Line(B, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(G, I), Line(G, center(Circle(C, D, E))), i we get concurrent(i, Line(G, I), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, I), Line(E, I), k we get concurrent(k, Line(E, I), Line(G, I))
By concurrent_sufficient_conditions on k, Line(G, I), Line(A, I) we get concurrent(k, Line(A, I), Line(G, I))
By concurrent_sufficient_conditions on Line(G, H), k, Line(E, H) we get concurrent(k, Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(B, center(c)), j, Line(B, center(Circle(B, C, E))) we get concurrent(j, Line(B, center(c)), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on h, Line(E, center(Circle(B, C, E))), j we get concurrent(h, j, Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on g, i, Line(D, center(Circle(C, D, E))) we get concurrent(g, i, Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(E, F), Line(F, I) we get concurrent(Line(E, F), Line(F, I), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on h, Line(E, center(Circle(B, C, E))), Line(E, I) we get concurrent(h, Line(E, I), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, E), Line(D, H) we get concurrent(Line(D, E), Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(D, I), Line(E, I), Line(F, I) we get concurrent(Line(D, I), Line(E, I), Line(F, I))
By concurrent_sufficient_conditions on g, j, Line(B, center(c)) we get concurrent(g, j, Line(B, center(c)))
By concurrent_sufficient_conditions on Line(B, H), Line(H, center(c)), Line(G, H) we get concurrent(Line(B, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on i, Line(G, center(Circle(C, D, E))), j we get concurrent(i, j, Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(c)), Line(E, I) we get concurrent(Line(D, E), Line(E, I), Line(E, center(c)))
By concurrent_sufficient_conditions on k, Line(H, center(c)), Line(G, H) we get concurrent(k, Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on k, Line(D, H), Line(G, H) we get concurrent(k, Line(D, H), Line(G, H))
By concurrent_sufficient_conditions on f, Line(F, I), Line(F, center(Circle(A, C, D))) we get concurrent(f, Line(F, I), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(B, H), Line(B, center(Circle(B, C, E))), f we get concurrent(f, Line(B, H), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(C, F), Line(F, I) we get concurrent(Line(C, F), Line(F, I), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on h, Line(A, center(c)), Line(A, I) we get concurrent(h, Line(A, I), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, F), Line(E, center(Circle(B, C, E))) we get concurrent(Line(E, F), Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(A, I), Line(E, I) we get concurrent(Line(A, I), Line(E, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(E, H), Line(F, H) we get concurrent(Line(E, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), g, i we get concurrent(g, i, Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(B, center(c)), Line(H, center(c)) we get concurrent(Line(B, center(c)), Line(D, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), Line(F, center(Circle(A, C, D))) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, F), Line(D, center(Circle(C, D, E))), Line(D, H) we get concurrent(Line(D, F), Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(F, I), f we get concurrent(f, Line(F, I), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(G, I), j, Line(G, center(Circle(C, D, E))) we get concurrent(j, Line(G, I), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(G, H), Line(H, center(c)) we get concurrent(Line(F, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(A, I), Line(F, I), Line(I, center(c)) we get concurrent(Line(A, I), Line(F, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(A, I), Line(G, I), k we get concurrent(k, Line(A, I), Line(G, I))
By concurrent_sufficient_conditions on Line(B, I), Line(F, I), Line(G, I) we get concurrent(Line(B, I), Line(F, I), Line(G, I))
By concurrent_sufficient_conditions on Line(F, H), Line(C, F), Line(F, center(Circle(B, C, E))) we get concurrent(Line(C, F), Line(F, H), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(G, I), k, Line(E, I) we get concurrent(k, Line(E, I), Line(G, I))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, H), Line(D, I) we get concurrent(Line(D, H), Line(D, I), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(B, C, E))), Line(F, I) we get concurrent(Line(F, H), Line(F, I), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(C, F), k, Line(C, center(Circle(A, C, D))) we get concurrent(k, Line(C, F), Line(C, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(F, H), f we get concurrent(f, Line(F, H), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, F), Line(C, F), Line(F, I) we get concurrent(Line(C, F), Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(E, I), Line(A, I) we get concurrent(Line(A, I), Line(E, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))), Line(F, H) we get concurrent(Line(F, H), Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), h, Line(E, I) we get concurrent(h, Line(E, I), Line(E, center(c)))
By concurrent_sufficient_conditions on j, Line(E, F), Line(E, center(Circle(B, C, E))) we get concurrent(j, Line(E, F), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(D, center(Circle(C, D, E))), Line(D, I) we get concurrent(Line(D, F), Line(D, I), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(F, I), Line(E, I) we get concurrent(Line(E, I), Line(F, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), Line(C, center(Circle(B, C, E))), k we get concurrent(k, Line(C, center(Circle(B, C, E))), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), k, Line(E, I) we get concurrent(k, Line(E, I), Line(F, I))
By concurrent_sufficient_conditions on Line(G, H), k, Line(H, center(c)) we get concurrent(k, Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on h, j, Line(E, center(c)) we get concurrent(h, j, Line(E, center(c)))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, C, D))), f, Line(A, H) we get concurrent(f, Line(A, H), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(F, H), Line(A, H) we get concurrent(Line(A, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(A, H), Line(B, H), Line(H, center(c)) we get concurrent(Line(A, H), Line(B, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, H), Line(B, H), Line(G, H) we get concurrent(Line(B, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, I), g we get concurrent(g, Line(D, I), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(D, H), Line(E, H), Line(F, H) we get concurrent(Line(D, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(D, F), i, Line(D, center(Circle(A, C, D))) we get concurrent(i, Line(D, F), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(B, I), Line(B, center(Circle(B, C, E))), Line(B, center(c)) we get concurrent(Line(B, I), Line(B, center(c)), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, F), g we get concurrent(g, Line(D, F), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), i, Line(D, center(Circle(C, D, E))) we get concurrent(i, Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, H), Line(F, H), Line(H, center(c)) we get concurrent(Line(F, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), j, Line(D, E) we get concurrent(j, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), k, h we get concurrent(h, k, Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, center(c)), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, center(c)), Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, F), Line(F, center(Circle(A, C, D))), Line(E, F) we get concurrent(Line(C, F), Line(E, F), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, E), j, Line(E, center(Circle(B, C, E))) we get concurrent(j, Line(D, E), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, H), j, Line(E, center(Circle(C, D, E))) we get concurrent(j, Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, I), Line(D, H) we get concurrent(Line(D, H), Line(D, I), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(F, I), Line(A, I), Line(E, I) we get concurrent(Line(A, I), Line(E, I), Line(F, I))
By concurrent_sufficient_conditions on Line(D, H), Line(E, H), Line(G, H) we get concurrent(Line(D, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(D, H), Line(E, H), Line(H, center(c)) we get concurrent(Line(D, H), Line(E, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, I), Line(D, E) we get concurrent(Line(D, E), Line(D, I), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(C, F), Line(C, center(Circle(A, C, D))), g we get concurrent(g, Line(C, F), Line(C, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(B, H), Line(G, H), Line(F, H) we get concurrent(Line(B, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(C, D, E))), Line(E, center(Circle(B, C, E))) we get concurrent(Line(E, F), Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(c)), j we get concurrent(j, Line(E, F), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(D, F), Line(F, I), f we get concurrent(f, Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(C, F), Line(F, I), Line(D, F) we get concurrent(Line(C, F), Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on g, Line(D, center(Circle(A, C, D))), Line(D, F) we get concurrent(g, Line(D, F), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on k, Line(G, I), Line(B, I) we get concurrent(k, Line(B, I), Line(G, I))
By concurrent_sufficient_conditions on Line(G, H), Line(G, center(Circle(C, D, E))), i we get concurrent(i, Line(G, H), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, H), Line(F, H), Line(H, center(c)) we get concurrent(Line(B, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(E, H), Line(D, H) we get concurrent(Line(D, H), Line(E, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(B, C, E))), Line(F, I) we get concurrent(Line(D, F), Line(F, I), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on k, Line(E, H), Line(F, H) we get concurrent(k, Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(G, H), i, Line(C, F) we get concurrent(i, Line(C, F), Line(G, H))
By concurrent_sufficient_conditions on f, Line(D, F), Line(F, H) we get concurrent(f, Line(D, F), Line(F, H))
By concurrent_sufficient_conditions on Line(F, H), Line(B, H), Line(D, H) we get concurrent(Line(B, H), Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on k, Line(I, center(c)), Line(A, I) we get concurrent(k, Line(A, I), Line(I, center(c)))
By concurrent_sufficient_conditions on g, Line(C, center(Circle(A, C, D))), Line(C, F) we get concurrent(g, Line(C, F), Line(C, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(B, center(c)), Line(B, H), Line(B, center(Circle(B, C, E))) we get concurrent(Line(B, H), Line(B, center(c)), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, D, E))), Line(G, I), i we get concurrent(i, Line(G, I), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, I), i, Line(G, center(Circle(C, D, E))) we get concurrent(i, Line(G, I), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, I), Line(D, E), Line(E, center(c)) we get concurrent(Line(D, E), Line(E, I), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, I), k, Line(F, I) we get concurrent(k, Line(E, I), Line(F, I))
By concurrent_sufficient_conditions on Line(G, H), Line(D, H), Line(B, H) we get concurrent(Line(B, H), Line(D, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, I), Line(A, I), Line(B, I) we get concurrent(Line(A, I), Line(B, I), Line(F, I))
By concurrent_sufficient_conditions on Line(D, E), h, Line(E, center(c)) we get concurrent(h, Line(D, E), Line(E, center(c)))
By concurrent_sufficient_conditions on j, h, Line(E, center(c)) we get concurrent(h, j, Line(E, center(c)))
By concurrent_sufficient_conditions on Line(D, H), Line(D, E), Line(D, center(c)) we get concurrent(Line(D, E), Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(D, center(Circle(C, D, E))), Line(C, center(Circle(C, D, E))) we get concurrent(Line(C, center(Circle(C, D, E))), Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, H), Line(D, center(Circle(C, D, E))), i we get concurrent(i, Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, I), k, Line(G, I) we get concurrent(k, Line(E, I), Line(G, I))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, center(Circle(C, D, E))), Line(E, I) we get concurrent(Line(E, I), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))), i we get concurrent(i, Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, F), Line(F, I), Line(E, F) we get concurrent(Line(C, F), Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on j, Line(E, center(Circle(C, D, E))), Line(E, H) we get concurrent(j, Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(C, center(Circle(C, D, E))), k we get concurrent(h, k, Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, H), j we get concurrent(j, Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(D, center(c)), i we get concurrent(g, i, Line(D, center(c)))
By concurrent_sufficient_conditions on Line(B, center(c)), Line(B, H), g we get concurrent(g, Line(B, H), Line(B, center(c)))
By concurrent_sufficient_conditions on h, Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))) we get concurrent(h, Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(E, center(c)), h we get concurrent(h, Line(E, H), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(G, I), Line(F, I) we get concurrent(Line(F, I), Line(G, I), Line(I, center(c)))
By concurrent_sufficient_conditions on f, Line(F, center(Circle(A, C, D))), Line(E, F) we get concurrent(f, Line(E, F), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, H), Line(G, H), Line(A, H) we get concurrent(Line(A, H), Line(D, H), Line(G, H))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(E, center(c)), Line(B, center(c)) we get concurrent(Line(B, center(c)), Line(E, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), f, Line(F, I) we get concurrent(f, Line(F, I), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(C, center(Circle(B, C, E))), Line(E, center(Circle(B, C, E))), Line(F, center(Circle(B, C, E))) we get concurrent(Line(C, center(Circle(B, C, E))), Line(E, center(Circle(B, C, E))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, I), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, I), Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(B, H), Line(D, H) we get concurrent(Line(B, H), Line(D, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(A, H), Line(E, H) we get concurrent(Line(A, H), Line(E, H), Line(H, center(c)))
By concurrent_sufficient_conditions on g, Line(C, center(Circle(C, D, E))), k we get concurrent(g, k, Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(D, F), Line(F, I) we get concurrent(f, Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(B, C, E))), Line(F, center(Circle(A, C, D))) we get concurrent(Line(D, F), Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, H), Line(D, center(c)), i we get concurrent(i, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, I), Line(E, F) we get concurrent(Line(E, F), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(D, H), Line(A, H) we get concurrent(Line(A, H), Line(D, H), Line(H, center(c)))
By concurrent_sufficient_conditions on h, Line(E, center(Circle(C, D, E))), Line(E, H) we get concurrent(h, Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, I), g, Line(B, center(c)) we get concurrent(g, Line(B, I), Line(B, center(c)))
By concurrent_sufficient_conditions on Line(E, I), Line(F, I), Line(A, I) we get concurrent(Line(A, I), Line(E, I), Line(F, I))
By concurrent_sufficient_conditions on f, Line(A, center(Circle(A, C, D))), i we get concurrent(f, i, Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on k, Line(C, F), Line(C, center(Circle(A, C, D))) we get concurrent(k, Line(C, F), Line(C, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(F, I), f, Line(F, center(Circle(B, C, E))) we get concurrent(f, Line(F, I), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(I, center(c)), Line(D, center(c)) we get concurrent(Line(D, center(c)), Line(H, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, H), Line(H, center(c)), Line(E, H) we get concurrent(Line(D, H), Line(E, H), Line(H, center(c)))
By concurrent_sufficient_conditions on j, Line(E, center(Circle(C, D, E))), Line(E, center(Circle(B, C, E))) we get concurrent(j, Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), f, Line(C, F) we get concurrent(f, Line(C, F), Line(F, H))
By concurrent_sufficient_conditions on Line(D, I), Line(I, center(c)), Line(F, I) we get concurrent(Line(D, I), Line(F, I), Line(I, center(c)))
By concurrent_sufficient_conditions on f, Line(B, center(Circle(B, C, E))), j we get concurrent(f, j, Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on k, Line(C, center(Circle(B, C, E))), Line(C, center(Circle(A, C, D))) we get concurrent(k, Line(C, center(Circle(A, C, D))), Line(C, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(F, center(Circle(A, C, D))), Line(C, F) we get concurrent(Line(C, F), Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(E, I), j we get concurrent(j, Line(E, I), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, H), h we get concurrent(h, Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, E), Line(D, H) we get concurrent(Line(D, E), Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(Circle(C, D, E))), Line(D, I) we get concurrent(Line(D, E), Line(D, I), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, I), Line(E, F), Line(E, center(c)) we get concurrent(Line(E, F), Line(E, I), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(D, I), Line(D, center(Circle(C, D, E))), i we get concurrent(i, Line(D, I), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, H), Line(B, H), Line(F, H) we get concurrent(Line(B, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(C, F), f we get concurrent(f, Line(C, F), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on j, g, Line(B, center(c)) we get concurrent(g, j, Line(B, center(c)))
By concurrent_sufficient_conditions on j, Line(G, I), Line(C, F) we get concurrent(j, Line(C, F), Line(G, I))
By concurrent_sufficient_conditions on h, Line(E, center(Circle(B, C, E))), Line(D, E) we get concurrent(h, Line(D, E), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(E, center(c)), Line(I, center(c)) we get concurrent(Line(E, center(c)), Line(H, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(E, center(Circle(B, C, E))), Line(B, center(Circle(B, C, E))) we get concurrent(Line(B, center(Circle(B, C, E))), Line(E, center(Circle(B, C, E))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, I), Line(F, center(Circle(B, C, E))) we get concurrent(Line(E, F), Line(F, I), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, C, E))), Line(B, H), f we get concurrent(f, Line(B, H), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(F, I), Line(F, center(Circle(B, C, E))) we get concurrent(Line(F, I), Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(D, I), k we get concurrent(k, Line(D, I), Line(F, I))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, H), Line(D, center(c)) we get concurrent(Line(D, H), Line(D, center(c)), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, center(Circle(B, C, E))), Line(D, E) we get concurrent(Line(D, E), Line(E, center(c)), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(A, center(c)), Line(H, center(c)) we get concurrent(Line(A, center(c)), Line(H, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(A, center(c)), Line(H, center(c)) we get concurrent(Line(A, center(c)), Line(D, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(c)), Line(E, H) we get concurrent(Line(E, F), Line(E, H), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(D, H), k we get concurrent(k, Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(B, C, E))), Line(C, F) we get concurrent(Line(C, F), Line(E, F), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on f, Line(F, I), Line(F, H) we get concurrent(f, Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on h, Line(E, center(Circle(C, D, E))), Line(E, F) we get concurrent(h, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(E, center(Circle(B, C, E))), Line(E, center(c)) we get concurrent(h, Line(E, center(c)), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(G, H), Line(A, H), k we get concurrent(k, Line(A, H), Line(G, H))
By concurrent_sufficient_conditions on Line(B, H), Line(B, I), Line(B, center(c)) we get concurrent(Line(B, H), Line(B, I), Line(B, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(F, I), Line(D, F) we get concurrent(Line(D, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on g, Line(D, center(Circle(A, C, D))), Line(D, H) we get concurrent(g, Line(D, H), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on i, Line(D, E), Line(D, center(Circle(A, C, D))) we get concurrent(i, Line(D, E), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(C, F), Line(F, center(Circle(B, C, E))), Line(E, F) we get concurrent(Line(C, F), Line(E, F), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(A, H), Line(D, H), Line(F, H) we get concurrent(Line(A, H), Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on Line(D, F), Line(D, center(Circle(A, C, D))), Line(D, I) we get concurrent(Line(D, F), Line(D, I), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, center(c)), g, Line(D, F) we get concurrent(g, Line(D, F), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(F, I), f, Line(C, F) we get concurrent(f, Line(C, F), Line(F, I))
By concurrent_sufficient_conditions on i, Line(D, E), Line(D, center(c)) we get concurrent(i, Line(D, E), Line(D, center(c)))
By concurrent_sufficient_conditions on f, Line(F, center(Circle(B, C, E))), Line(F, I) we get concurrent(f, Line(F, I), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), j, Line(E, center(c)) we get concurrent(j, Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), j, h we get concurrent(h, j, Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(D, F), f we get concurrent(f, Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(D, center(c)), Line(H, center(c)) we get concurrent(Line(D, center(c)), Line(E, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, C, D))), Line(A, I), f we get concurrent(f, Line(A, I), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(B, center(c)), Line(I, center(c)) we get concurrent(Line(B, center(c)), Line(H, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, F), Line(E, H) we get concurrent(Line(E, F), Line(E, H), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(B, center(c)), Line(D, center(c)), Line(E, center(c)) we get concurrent(Line(B, center(c)), Line(D, center(c)), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(G, I), Line(B, I), Line(D, I) we get concurrent(Line(B, I), Line(D, I), Line(G, I))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(E, I), Line(E, H) we get concurrent(Line(E, H), Line(E, I), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, E), j, Line(E, center(c)) we get concurrent(j, Line(D, E), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(F, center(Circle(B, C, E))), Line(B, center(Circle(B, C, E))) we get concurrent(Line(B, center(Circle(B, C, E))), Line(E, center(Circle(B, C, E))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(E, I), Line(E, center(c)) we get concurrent(Line(E, H), Line(E, I), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))) we get concurrent(Line(F, H), Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(H, center(c)), Line(E, H) we get concurrent(Line(E, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on i, Line(D, E), Line(D, center(Circle(C, D, E))) we get concurrent(i, Line(D, E), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(E, center(Circle(B, C, E))), Line(E, H) we get concurrent(h, Line(E, H), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, I), Line(E, F) we get concurrent(Line(E, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, center(Circle(B, C, E))), j we get concurrent(j, Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, H), Line(E, center(Circle(B, C, E))) we get concurrent(Line(E, F), Line(E, H), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, C, E))), Line(B, H), Line(B, I) we get concurrent(Line(B, H), Line(B, I), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on h, Line(D, E), Line(E, center(Circle(B, C, E))) we get concurrent(h, Line(D, E), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on h, Line(E, I), Line(E, center(Circle(C, D, E))) we get concurrent(h, Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), Line(E, center(c)) we get concurrent(Line(D, E), Line(E, F), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, I), Line(F, center(Circle(A, C, D))) we get concurrent(Line(E, F), Line(F, I), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(F, H), Line(D, F), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(B, I), Line(I, center(c)), Line(D, I) we get concurrent(Line(B, I), Line(D, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(B, H), j, Line(B, center(Circle(B, C, E))) we get concurrent(j, Line(B, H), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(H, center(c)), Line(A, center(c)) we get concurrent(Line(A, center(c)), Line(D, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, I), Line(E, I), Line(I, center(c)) we get concurrent(Line(D, I), Line(E, I), Line(I, center(c)))
By concurrent_sufficient_conditions on i, Line(A, center(Circle(A, C, D))), f we get concurrent(f, i, Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(G, I), Line(B, I), k we get concurrent(k, Line(B, I), Line(G, I))
By concurrent_sufficient_conditions on Line(B, center(c)), Line(D, center(c)), Line(I, center(c)) we get concurrent(Line(B, center(c)), Line(D, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, I), Line(D, center(c)), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, I), Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(D, center(Circle(A, C, D))), Line(D, I) we get concurrent(i, Line(D, I), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, I), Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, I), Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), Line(C, center(Circle(A, C, D))), g we get concurrent(g, Line(C, center(Circle(A, C, D))), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, H), Line(A, center(c)), h we get concurrent(h, Line(A, H), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(H, center(c)), k we get concurrent(k, Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(B, I), Line(E, I), Line(F, I) we get concurrent(Line(B, I), Line(E, I), Line(F, I))
By concurrent_sufficient_conditions on Line(D, H), Line(B, H), Line(G, H) we get concurrent(Line(B, H), Line(D, H), Line(G, H))
By concurrent_sufficient_conditions on i, Line(C, F), Line(G, I) we get concurrent(i, Line(C, F), Line(G, I))
By concurrent_sufficient_conditions on Line(F, I), Line(F, H), Line(C, F) we get concurrent(Line(C, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(B, I), Line(G, I) we get concurrent(Line(B, I), Line(G, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, F), Line(D, E), Line(D, center(c)) we get concurrent(Line(D, E), Line(D, F), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(E, center(c)), Line(H, center(c)) we get concurrent(Line(D, center(c)), Line(E, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on j, Line(E, F), Line(E, center(c)) we get concurrent(j, Line(E, F), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(D, F), Line(D, H), Line(D, center(Circle(A, C, D))) we get concurrent(Line(D, F), Line(D, H), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(A, I), Line(B, I), Line(I, center(c)) we get concurrent(Line(A, I), Line(B, I), Line(I, center(c)))
By concurrent_sufficient_conditions on i, Line(A, center(c)), Line(A, I) we get concurrent(i, Line(A, I), Line(A, center(c)))
By concurrent_sufficient_conditions on h, Line(E, F), Line(E, center(Circle(B, C, E))) we get concurrent(h, Line(E, F), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, F), j, Line(E, center(Circle(B, C, E))) we get concurrent(j, Line(E, F), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(D, center(c)), Line(A, center(c)) we get concurrent(Line(A, center(c)), Line(D, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, C, D))), Line(A, H), Line(A, I) we get concurrent(Line(A, H), Line(A, I), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, I), Line(D, F), Line(D, center(Circle(A, C, D))) we get concurrent(Line(D, F), Line(D, I), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, center(c)), Line(D, H) we get concurrent(Line(D, H), Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, H), Line(B, center(c)), j we get concurrent(j, Line(B, H), Line(B, center(c)))
By concurrent_sufficient_conditions on Line(B, H), Line(F, H), Line(D, H) we get concurrent(Line(B, H), Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on k, Line(A, H), Line(F, H) we get concurrent(k, Line(A, H), Line(F, H))
By concurrent_sufficient_conditions on Line(C, center(Circle(B, C, E))), Line(F, center(Circle(B, C, E))), Line(E, center(Circle(B, C, E))) we get concurrent(Line(C, center(Circle(B, C, E))), Line(E, center(Circle(B, C, E))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(G, H), Line(D, H), Line(E, H) we get concurrent(Line(D, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, D, E))), Line(G, H), Line(G, I) we get concurrent(Line(G, H), Line(G, I), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(c)), Line(D, center(Circle(A, C, D))) we get concurrent(Line(D, E), Line(D, center(c)), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, I), Line(B, I), Line(F, I) we get concurrent(Line(B, I), Line(D, I), Line(F, I))
By concurrent_sufficient_conditions on Line(B, H), Line(A, H), Line(G, H) we get concurrent(Line(A, H), Line(B, H), Line(G, H))
By concurrent_sufficient_conditions on f, Line(E, F), Line(F, center(Circle(A, C, D))) we get concurrent(f, Line(E, F), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(F, H), Line(E, H), Line(B, H) we get concurrent(Line(B, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on h, Line(E, center(c)), Line(E, center(Circle(B, C, E))) we get concurrent(h, Line(E, center(c)), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(D, center(Circle(C, D, E))), Line(G, center(Circle(C, D, E))) we get concurrent(Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), i, Line(D, center(Circle(A, C, D))) we get concurrent(i, Line(D, center(c)), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on i, h, Line(A, center(c)) we get concurrent(h, i, Line(A, center(c)))
By concurrent_sufficient_conditions on k, Line(G, I), Line(D, I) we get concurrent(k, Line(D, I), Line(G, I))
By concurrent_sufficient_conditions on Line(F, H), Line(E, F), Line(F, center(Circle(A, C, D))) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), h, Line(E, I) we get concurrent(h, Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, F), Line(F, center(Circle(A, C, D))), f we get concurrent(f, Line(C, F), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, F), Line(C, F), Line(F, center(Circle(B, C, E))) we get concurrent(Line(C, F), Line(E, F), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(E, F), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, center(c)), Line(D, H) we get concurrent(Line(D, H), Line(D, center(c)), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(E, center(c)), Line(H, center(c)) we get concurrent(Line(A, center(c)), Line(E, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, center(c)), Line(E, H) we get concurrent(Line(E, H), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(E, center(Circle(B, C, E))), Line(E, center(c)) we get concurrent(Line(E, H), Line(E, center(c)), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(B, C, E))), Line(E, H) we get concurrent(Line(D, E), Line(E, H), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, H), k, Line(F, H) we get concurrent(k, Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(H, center(c)), Line(I, center(c)) we get concurrent(Line(A, center(c)), Line(H, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(A, I), Line(E, I), Line(G, I) we get concurrent(Line(A, I), Line(E, I), Line(G, I))
By concurrent_sufficient_conditions on Line(G, I), Line(D, I), Line(E, I) we get concurrent(Line(D, I), Line(E, I), Line(G, I))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, C, E))), Line(B, center(c)), Line(B, I) we get concurrent(Line(B, I), Line(B, center(c)), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, H), Line(F, I) we get concurrent(Line(D, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, D, E))), i, Line(G, H) we get concurrent(i, Line(G, H), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), Line(E, center(Circle(B, C, E))) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, F), Line(D, center(c)) we get concurrent(Line(D, F), Line(D, center(c)), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, I), Line(D, F), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(D, I), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(A, I), h we get concurrent(h, Line(A, I), Line(A, center(c)))
By concurrent_sufficient_conditions on i, Line(D, F), Line(D, center(Circle(A, C, D))) we get concurrent(i, Line(D, F), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(B, I), Line(E, I), Line(I, center(c)) we get concurrent(Line(B, I), Line(E, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, H), i, Line(D, center(Circle(C, D, E))) we get concurrent(i, Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(C, D, E))), h we get concurrent(h, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), g, Line(D, center(Circle(A, C, D))) we get concurrent(g, Line(D, F), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(F, I), Line(B, I), Line(A, I) we get concurrent(Line(A, I), Line(B, I), Line(F, I))
By concurrent_sufficient_conditions on Line(A, I), Line(D, I), Line(F, I) we get concurrent(Line(A, I), Line(D, I), Line(F, I))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(B, C, E))), Line(E, F) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(G, H), Line(E, H), Line(A, H) we get concurrent(Line(A, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(B, C, E))), f we get concurrent(f, Line(F, H), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(F, center(Circle(A, C, D))), Line(C, center(Circle(A, C, D))) we get concurrent(Line(C, center(Circle(A, C, D))), Line(D, center(Circle(A, C, D))), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(E, center(c)), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, center(c)), Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), h, Line(E, center(Circle(C, D, E))) we get concurrent(h, Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(D, F), Line(D, center(c)) we get concurrent(g, Line(D, F), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(E, I), h, Line(E, center(c)) we get concurrent(h, Line(E, I), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(B, center(c)), Line(E, center(c)), Line(D, center(c)) we get concurrent(Line(B, center(c)), Line(D, center(c)), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, F), h, Line(E, center(c)) we get concurrent(h, Line(E, F), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(D, F), Line(F, I) we get concurrent(Line(D, F), Line(F, I), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(B, I), Line(F, I), k we get concurrent(k, Line(B, I), Line(F, I))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(Circle(A, C, D))), Line(D, I) we get concurrent(Line(D, E), Line(D, I), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, C, D))), i, Line(A, center(c)) we get concurrent(i, Line(A, center(c)), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, center(Circle(B, C, E))), h we get concurrent(h, Line(E, center(c)), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(B, C, E))), h, Line(C, F) we get concurrent(h, Line(C, F), Line(C, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, I), Line(D, center(c)), g we get concurrent(g, Line(D, I), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, I), Line(D, E) we get concurrent(Line(D, E), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), j, Line(D, E) we get concurrent(j, Line(D, E), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(B, H), Line(E, H) we get concurrent(Line(B, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on i, Line(D, F), Line(D, center(Circle(C, D, E))) we get concurrent(i, Line(D, F), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(B, C, E))), Line(E, center(c)) we get concurrent(Line(D, E), Line(E, center(c)), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(A, H), Line(D, H), Line(H, center(c)) we get concurrent(Line(A, H), Line(D, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, E), Line(D, F), Line(D, center(c)) we get concurrent(Line(D, E), Line(D, F), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(G, H), i, j we get concurrent(i, j, Line(G, H))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, F), Line(D, H) we get concurrent(Line(D, F), Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(I, center(c)), Line(D, center(c)) we get concurrent(Line(A, center(c)), Line(D, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(F, I), Line(D, F), Line(C, F) we get concurrent(Line(C, F), Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(E, I), Line(F, I), Line(G, I) we get concurrent(Line(E, I), Line(F, I), Line(G, I))
By concurrent_sufficient_conditions on Line(G, H), Line(E, H), Line(D, H) we get concurrent(Line(D, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(F, H), f we get concurrent(f, Line(F, H), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, I), i, Line(D, center(c)) we get concurrent(i, Line(D, I), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(B, H), f, Line(B, center(Circle(B, C, E))) we get concurrent(f, Line(B, H), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(B, C, E))), Line(F, H) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on i, Line(A, I), Line(A, center(c)) we get concurrent(i, Line(A, I), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(F, I), Line(A, I) we get concurrent(Line(A, I), Line(F, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(E, I), Line(B, I) we get concurrent(Line(B, I), Line(E, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(I, center(c)), Line(A, center(c)) we get concurrent(Line(A, center(c)), Line(D, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, F), Line(E, center(c)) we get concurrent(Line(E, F), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(E, center(c)), Line(E, F) we get concurrent(Line(E, F), Line(E, H), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(A, center(c)), Line(H, center(c)) we get concurrent(Line(A, center(c)), Line(E, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on i, Line(D, center(Circle(C, D, E))), g we get concurrent(g, i, Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, Line(I, center(c)), Line(F, I) we get concurrent(k, Line(F, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, H), Line(F, H), Line(H, center(c)) we get concurrent(Line(D, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on k, Line(H, center(c)), Line(A, H) we get concurrent(k, Line(A, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(D, E), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, I), j we get concurrent(j, Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, H), Line(G, H), Line(E, H) we get concurrent(Line(B, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(C, F), Line(F, center(Circle(B, C, E))), Line(F, I) we get concurrent(Line(C, F), Line(F, I), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, F), Line(D, E) we get concurrent(Line(D, E), Line(D, F), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, Line(I, center(c)), Line(D, I) we get concurrent(k, Line(D, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(B, center(c)), g, Line(B, I) we get concurrent(g, Line(B, I), Line(B, center(c)))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, H), Line(D, center(Circle(A, C, D))) we get concurrent(Line(D, H), Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(G, I), k we get concurrent(k, Line(G, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, I), j we get concurrent(j, Line(E, I), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(A, H), Line(D, H) we get concurrent(Line(A, H), Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(c)), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(G, H), Line(D, H) we get concurrent(Line(D, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on f, Line(F, center(Circle(A, C, D))), Line(F, H) we get concurrent(f, Line(F, H), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, C, D))), i, f we get concurrent(f, i, Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(E, center(c)), Line(E, H) we get concurrent(Line(E, H), Line(E, center(c)), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(H, center(c)), Line(B, H) we get concurrent(Line(B, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(G, H), Line(A, H), Line(F, H) we get concurrent(Line(A, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(A, I), k, Line(F, I) we get concurrent(k, Line(A, I), Line(F, I))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(C, center(Circle(C, D, E))), Line(D, center(Circle(C, D, E))) we get concurrent(Line(C, center(Circle(C, D, E))), Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, H), Line(H, center(c)), Line(D, H) we get concurrent(Line(D, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on h, k, Line(C, center(Circle(C, D, E))) we get concurrent(h, k, Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, H), Line(A, H), Line(H, center(c)) we get concurrent(Line(A, H), Line(B, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(G, I), Line(D, I), Line(I, center(c)) we get concurrent(Line(D, I), Line(G, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(A, H), Line(A, center(Circle(A, C, D))) we get concurrent(Line(A, H), Line(A, center(c)), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(B, center(c)), Line(B, center(Circle(B, C, E))), Line(B, I) we get concurrent(Line(B, I), Line(B, center(c)), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(G, H), k, Line(F, H) we get concurrent(k, Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(B, C, E))), Line(C, F) we get concurrent(Line(C, F), Line(D, F), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, F), Line(D, center(Circle(A, C, D))) we get concurrent(Line(D, E), Line(D, F), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on g, Line(D, center(c)), Line(D, E) we get concurrent(g, Line(D, E), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, C, E))), j, Line(B, H) we get concurrent(j, Line(B, H), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(B, I), Line(B, center(c)), j we get concurrent(j, Line(B, I), Line(B, center(c)))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(G, center(Circle(C, D, E))) we get concurrent(Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(E, H), Line(E, center(Circle(B, C, E))) we get concurrent(h, Line(E, H), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on k, Line(E, I), Line(I, center(c)) we get concurrent(k, Line(E, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, I), Line(F, H) we get concurrent(Line(E, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on h, j, Line(E, center(Circle(C, D, E))) we get concurrent(h, j, Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, I), j, Line(G, H) we get concurrent(j, Line(G, H), Line(G, I))
By concurrent_sufficient_conditions on h, j, Line(E, center(Circle(B, C, E))) we get concurrent(h, j, Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, H), Line(D, center(c)), g we get concurrent(g, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(D, H), Line(D, center(Circle(A, C, D))), Line(D, E) we get concurrent(Line(D, E), Line(D, H), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(F, I), f, Line(F, center(Circle(A, C, D))) we get concurrent(f, Line(F, I), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on g, Line(D, E), Line(D, center(c)) we get concurrent(g, Line(D, E), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(C, center(Circle(C, D, E))), Line(C, center(Circle(B, C, E))), h we get concurrent(h, Line(C, center(Circle(B, C, E))), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, I), Line(G, I), k we get concurrent(k, Line(B, I), Line(G, I))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(E, center(c)), Line(E, F) we get concurrent(Line(E, F), Line(E, center(c)), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(D, E), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on j, Line(E, I), Line(E, center(Circle(B, C, E))) we get concurrent(j, Line(E, I), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(A, C, D))), f we get concurrent(f, Line(E, F), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(A, I), Line(G, I), Line(E, I) we get concurrent(Line(A, I), Line(E, I), Line(G, I))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, F), Line(E, I) we get concurrent(Line(E, F), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, H), Line(G, H), Line(B, H) we get concurrent(Line(A, H), Line(B, H), Line(G, H))
By concurrent_sufficient_conditions on Line(D, I), Line(F, I), Line(A, I) we get concurrent(Line(A, I), Line(D, I), Line(F, I))
By concurrent_sufficient_conditions on Line(F, I), Line(D, F), Line(F, center(Circle(A, C, D))) we get concurrent(Line(D, F), Line(F, I), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on i, Line(A, center(Circle(A, C, D))), Line(A, center(c)) we get concurrent(i, Line(A, center(c)), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(F, I), Line(E, I), k we get concurrent(k, Line(E, I), Line(F, I))
By concurrent_sufficient_conditions on f, Line(F, H), Line(F, I) we get concurrent(f, Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on k, Line(B, I), Line(I, center(c)) we get concurrent(k, Line(B, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, F), Line(D, center(Circle(C, D, E))), Line(D, center(c)) we get concurrent(Line(D, F), Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(C, F), f we get concurrent(f, Line(C, F), Line(F, H))
By concurrent_sufficient_conditions on Line(F, I), Line(D, I), Line(E, I) we get concurrent(Line(D, I), Line(E, I), Line(F, I))
By concurrent_sufficient_conditions on j, Line(G, I), Line(G, center(Circle(C, D, E))) we get concurrent(j, Line(G, I), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, H), k, Line(B, H) we get concurrent(k, Line(B, H), Line(G, H))
By concurrent_sufficient_conditions on Line(D, I), k, Line(F, I) we get concurrent(k, Line(D, I), Line(F, I))
By concurrent_sufficient_conditions on Line(G, I), Line(G, H), j we get concurrent(j, Line(G, H), Line(G, I))
By concurrent_sufficient_conditions on Line(E, H), Line(E, center(Circle(C, D, E))), Line(E, I) we get concurrent(Line(E, H), Line(E, I), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(B, H), Line(H, center(c)) we get concurrent(Line(B, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, I), Line(B, I), Line(I, center(c)) we get concurrent(Line(B, I), Line(F, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), g, Line(D, I) we get concurrent(g, Line(D, I), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(I, center(c)), Line(E, center(c)) we get concurrent(Line(D, center(c)), Line(E, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, E), g, Line(D, center(Circle(A, C, D))) we get concurrent(g, Line(D, E), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(G, H), k, Line(D, H) we get concurrent(k, Line(D, H), Line(G, H))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, H), h, Line(A, center(c)) we get concurrent(h, Line(A, H), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(F, I), f we get concurrent(f, Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(D, E), Line(D, H), Line(D, center(Circle(A, C, D))) we get concurrent(Line(D, E), Line(D, H), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(B, C, E))), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(G, H), i, Line(G, center(Circle(C, D, E))) we get concurrent(i, Line(G, H), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(A, I), Line(G, I) we get concurrent(Line(A, I), Line(G, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, center(c)), j we get concurrent(j, Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, center(c)), i we get concurrent(i, Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(E, center(Circle(B, C, E))), Line(E, F) we get concurrent(h, Line(E, F), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, F), Line(D, E) we get concurrent(Line(D, E), Line(D, F), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, E), Line(D, F) we get concurrent(Line(D, E), Line(D, F), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(H, center(c)), Line(B, center(c)) we get concurrent(Line(B, center(c)), Line(D, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on g, Line(D, F), Line(D, center(Circle(A, C, D))) we get concurrent(g, Line(D, F), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, E), Line(D, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(A, C, D))), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(F, I), Line(E, F), Line(F, center(Circle(A, C, D))) we get concurrent(Line(E, F), Line(F, I), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), j, h we get concurrent(h, j, Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, C, E))), Line(B, I), Line(B, center(c)) we get concurrent(Line(B, I), Line(B, center(c)), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(A, I), Line(B, I) we get concurrent(Line(A, I), Line(B, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(G, H), Line(D, H), Line(F, H) we get concurrent(Line(D, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(H, center(c)), Line(A, center(c)) we get concurrent(Line(A, center(c)), Line(E, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(A, center(c)), h, Line(A, H) we get concurrent(h, Line(A, H), Line(A, center(c)))
By concurrent_sufficient_conditions on j, Line(E, center(Circle(C, D, E))), Line(D, E) we get concurrent(j, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on k, Line(G, H), Line(D, H) we get concurrent(k, Line(D, H), Line(G, H))
By concurrent_sufficient_conditions on Line(B, H), k, Line(G, H) we get concurrent(k, Line(B, H), Line(G, H))
By concurrent_sufficient_conditions on Line(A, I), Line(I, center(c)), Line(G, I) we get concurrent(Line(A, I), Line(G, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(G, H), Line(F, H), Line(B, H) we get concurrent(Line(B, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(B, center(c)), Line(H, center(c)), Line(D, center(c)) we get concurrent(Line(B, center(c)), Line(D, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(E, I), k we get concurrent(k, Line(E, I), Line(I, center(c)))
By concurrent_sufficient_conditions on k, Line(I, center(c)), Line(G, I) we get concurrent(k, Line(G, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(E, I), Line(E, center(Circle(B, C, E))), Line(D, E) we get concurrent(Line(D, E), Line(E, I), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), g, Line(D, I) we get concurrent(g, Line(D, I), Line(D, center(c)))
By concurrent_sufficient_conditions on i, Line(A, I), Line(A, center(Circle(A, C, D))) we get concurrent(i, Line(A, I), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(C, center(Circle(A, C, D))), k, g we get concurrent(g, k, Line(C, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, H), Line(E, center(Circle(C, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(F, H), Line(D, F) we get concurrent(f, Line(D, F), Line(F, H))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(Circle(C, D, E))), i we get concurrent(i, Line(D, E), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, H), Line(B, I), Line(B, center(Circle(B, C, E))) we get concurrent(Line(B, H), Line(B, I), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(B, I), j, Line(B, center(c)) we get concurrent(j, Line(B, I), Line(B, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), h, Line(E, center(Circle(B, C, E))) we get concurrent(h, Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, I), i, Line(C, F) we get concurrent(i, Line(C, F), Line(G, I))
By concurrent_sufficient_conditions on Line(D, F), Line(F, H), Line(F, center(Circle(A, C, D))) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(A, H), Line(F, H), Line(D, H) we get concurrent(Line(A, H), Line(D, H), Line(F, H))
By concurrent_sufficient_conditions on Line(A, center(c)), Line(A, H), h we get concurrent(h, Line(A, H), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), j, Line(E, H) we get concurrent(j, Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, H), Line(D, H), k we get concurrent(k, Line(D, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, H), Line(C, F), Line(F, center(Circle(A, C, D))) we get concurrent(Line(C, F), Line(F, H), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(C, F), f, Line(F, center(Circle(A, C, D))) we get concurrent(f, Line(C, F), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(C, center(Circle(B, C, E))), k, Line(C, center(Circle(C, D, E))) we get concurrent(k, Line(C, center(Circle(B, C, E))), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(D, center(Circle(A, C, D))), Line(D, E) we get concurrent(g, Line(D, E), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(E, H), Line(E, center(c)) we get concurrent(Line(E, H), Line(E, center(c)), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(A, C, D))), Line(F, I) we get concurrent(Line(D, F), Line(F, I), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on k, g, Line(C, center(Circle(A, C, D))) we get concurrent(g, k, Line(C, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on k, Line(B, I), Line(F, I) we get concurrent(k, Line(B, I), Line(F, I))
By concurrent_sufficient_conditions on Line(B, H), j, Line(B, center(c)) we get concurrent(j, Line(B, H), Line(B, center(c)))
By concurrent_sufficient_conditions on Line(E, center(c)), j, h we get concurrent(h, j, Line(E, center(c)))
By concurrent_sufficient_conditions on Line(A, H), f, Line(A, center(Circle(A, C, D))) we get concurrent(f, Line(A, H), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, H), i, Line(D, center(c)) we get concurrent(i, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(A, H), Line(E, H), Line(F, H) we get concurrent(Line(A, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(F, I), Line(F, center(Circle(A, C, D))) we get concurrent(Line(F, I), Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))), Line(E, H) we get concurrent(Line(E, H), Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, H), Line(B, H), Line(G, H) we get concurrent(Line(A, H), Line(B, H), Line(G, H))
By concurrent_sufficient_conditions on Line(C, center(Circle(B, C, E))), Line(C, center(Circle(C, D, E))), h we get concurrent(h, Line(C, center(Circle(B, C, E))), Line(C, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(B, C, E))), Line(F, center(Circle(A, C, D))) we get concurrent(Line(E, F), Line(F, center(Circle(A, C, D))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on i, Line(D, center(Circle(A, C, D))), Line(D, H) we get concurrent(i, Line(D, H), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(G, center(Circle(C, D, E))), Line(G, H), i we get concurrent(i, Line(G, H), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(B, I), k we get concurrent(k, Line(B, I), Line(F, I))
By concurrent_sufficient_conditions on Line(D, H), Line(A, H), Line(H, center(c)) we get concurrent(Line(A, H), Line(D, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, F), Line(D, H), Line(D, center(c)) we get concurrent(Line(D, F), Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(A, center(c)), i, Line(A, H) we get concurrent(i, Line(A, H), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, H), Line(F, I) we get concurrent(Line(E, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(G, H), Line(C, F), i we get concurrent(i, Line(C, F), Line(G, H))
By concurrent_sufficient_conditions on Line(B, I), Line(F, I), Line(E, I) we get concurrent(Line(B, I), Line(E, I), Line(F, I))
By concurrent_sufficient_conditions on Line(G, H), i, Line(G, I) we get concurrent(i, Line(G, H), Line(G, I))
By concurrent_sufficient_conditions on j, Line(B, I), Line(B, center(Circle(B, C, E))) we get concurrent(j, Line(B, I), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(B, center(c)), Line(B, I), g we get concurrent(g, Line(B, I), Line(B, center(c)))
By concurrent_sufficient_conditions on Line(B, center(c)), Line(B, H), Line(B, I) we get concurrent(Line(B, H), Line(B, I), Line(B, center(c)))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, I), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, I), Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(D, H), Line(F, H) we get concurrent(Line(D, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(G, H), Line(H, center(c)), Line(E, H) we get concurrent(Line(E, H), Line(G, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(F, I), k we get concurrent(k, Line(F, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(E, I), Line(I, center(c)), k we get concurrent(k, Line(E, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, I), Line(D, center(Circle(C, D, E))), g we get concurrent(g, Line(D, I), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(G, H), j we get concurrent(i, j, Line(G, H))
By concurrent_sufficient_conditions on Line(A, I), Line(G, I), Line(F, I) we get concurrent(Line(A, I), Line(F, I), Line(G, I))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), i, Line(D, H) we get concurrent(i, Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(D, center(Circle(C, D, E))), Line(D, F) we get concurrent(i, Line(D, F), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, E), Line(D, I) we get concurrent(Line(D, E), Line(D, I), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, H), Line(D, center(c)), Line(D, center(Circle(A, C, D))) we get concurrent(Line(D, H), Line(D, center(c)), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(A, C, D))), Line(F, I) we get concurrent(Line(E, F), Line(F, I), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(G, I), Line(I, center(c)), Line(E, I) we get concurrent(Line(E, I), Line(G, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(E, H), Line(F, H), k we get concurrent(k, Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(D, I), Line(D, center(Circle(A, C, D))), Line(D, H) we get concurrent(Line(D, H), Line(D, I), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, H), Line(D, center(c)), Line(D, E) we get concurrent(Line(D, E), Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(B, center(c)), Line(I, center(c)), Line(E, center(c)) we get concurrent(Line(B, center(c)), Line(E, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, center(Circle(A, C, D))), g we get concurrent(g, Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(Circle(C, D, E))), Line(D, H) we get concurrent(Line(D, E), Line(D, H), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(D, H), k we get concurrent(k, Line(D, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(C, D, E))), Line(E, H) we get concurrent(Line(D, E), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, I), Line(D, center(c)) we get concurrent(Line(D, I), Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, I), Line(E, I), Line(F, I) we get concurrent(Line(A, I), Line(E, I), Line(F, I))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, C, E))), Line(E, center(Circle(B, C, E))), Line(F, center(Circle(B, C, E))) we get concurrent(Line(B, center(Circle(B, C, E))), Line(E, center(Circle(B, C, E))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, H), Line(H, center(c)), Line(B, H) we get concurrent(Line(B, H), Line(D, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(G, I), Line(D, I), Line(F, I) we get concurrent(Line(D, I), Line(F, I), Line(G, I))
By concurrent_sufficient_conditions on Line(G, I), Line(B, I), Line(A, I) we get concurrent(Line(A, I), Line(B, I), Line(G, I))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(c)), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, center(c)))
By concurrent_sufficient_conditions on j, Line(E, center(Circle(B, C, E))), h we get concurrent(h, j, Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))), g we get concurrent(g, Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, center(Circle(A, C, D))), Line(C, center(Circle(B, C, E))), Line(C, F) we get concurrent(Line(C, F), Line(C, center(Circle(A, C, D))), Line(C, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(G, I), Line(G, center(Circle(C, D, E))), Line(G, H) we get concurrent(Line(G, H), Line(G, I), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, center(Circle(A, C, D))), Line(D, H) we get concurrent(Line(D, H), Line(D, center(c)), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on i, g, Line(D, center(Circle(C, D, E))) we get concurrent(g, i, Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(F, center(Circle(A, C, D))), Line(A, center(Circle(A, C, D))) we get concurrent(Line(A, center(Circle(A, C, D))), Line(D, center(Circle(A, C, D))), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(A, I), Line(D, I), Line(I, center(c)) we get concurrent(Line(A, I), Line(D, I), Line(I, center(c)))
By concurrent_sufficient_conditions on f, Line(D, F), Line(F, center(Circle(B, C, E))) we get concurrent(f, Line(D, F), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), i, Line(D, H) we get concurrent(i, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on i, Line(G, I), Line(C, F) we get concurrent(i, Line(C, F), Line(G, I))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(F, H), Line(D, H) we get concurrent(Line(D, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, I), k, Line(A, I) we get concurrent(k, Line(A, I), Line(F, I))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, C, D))), Line(A, H), f we get concurrent(f, Line(A, H), Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(A, H), Line(F, H), Line(H, center(c)) we get concurrent(Line(A, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, E), g we get concurrent(g, Line(D, E), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on g, Line(B, center(c)), j we get concurrent(g, j, Line(B, center(c)))
By concurrent_sufficient_conditions on Line(C, F), Line(F, center(Circle(B, C, E))), f we get concurrent(f, Line(C, F), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(E, F), f we get concurrent(f, Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(D, F), Line(D, center(Circle(A, C, D))), Line(D, E) we get concurrent(Line(D, E), Line(D, F), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(A, I), Line(E, I), Line(I, center(c)) we get concurrent(Line(A, I), Line(E, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(E, H), Line(D, H), Line(G, H) we get concurrent(Line(D, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(B, I), Line(F, I), Line(I, center(c)) we get concurrent(Line(B, I), Line(F, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, C, E))), Line(B, I), j we get concurrent(j, Line(B, I), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(A, H), Line(F, H), Line(G, H) we get concurrent(Line(A, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(A, H), Line(E, H), Line(G, H) we get concurrent(Line(A, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(A, H), Line(H, center(c)), Line(E, H) we get concurrent(Line(A, H), Line(E, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(C, center(Circle(A, C, D))), Line(F, center(Circle(A, C, D))) we get concurrent(Line(C, center(Circle(A, C, D))), Line(D, center(Circle(A, C, D))), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, C, E))), Line(B, center(c)), j we get concurrent(j, Line(B, center(c)), Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), h, Line(E, center(Circle(B, C, E))) we get concurrent(h, Line(E, center(c)), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(G, I), Line(C, F), i we get concurrent(i, Line(C, F), Line(G, I))
By concurrent_sufficient_conditions on Line(C, center(Circle(B, C, E))), Line(C, center(Circle(A, C, D))), Line(C, F) we get concurrent(Line(C, F), Line(C, center(Circle(A, C, D))), Line(C, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(B, I), Line(B, center(c)), g we get concurrent(g, Line(B, I), Line(B, center(c)))
By concurrent_sufficient_conditions on Line(D, center(c)), g, Line(D, center(Circle(A, C, D))) we get concurrent(g, Line(D, center(c)), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(E, I), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, I), Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(E, center(c)), Line(A, center(c)) we get concurrent(Line(A, center(c)), Line(E, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on f, Line(F, center(Circle(B, C, E))), Line(C, F) we get concurrent(f, Line(C, F), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on j, i, Line(G, I) we get concurrent(i, j, Line(G, I))
By concurrent_sufficient_conditions on Line(E, H), Line(E, center(c)), j we get concurrent(j, Line(E, H), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, E), Line(D, H) we get concurrent(Line(D, E), Line(D, H), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(G, H), k, Line(A, H) we get concurrent(k, Line(A, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(D, F), Line(C, F) we get concurrent(Line(C, F), Line(D, F), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on g, i, Line(D, center(Circle(A, C, D))) we get concurrent(g, i, Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, H), Line(D, I), Line(D, center(c)) we get concurrent(Line(D, H), Line(D, I), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(C, F), Line(E, F) we get concurrent(Line(C, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(F, H), Line(D, F), Line(F, center(Circle(A, C, D))) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(Circle(C, D, E))), Line(D, center(Circle(A, C, D))) we get concurrent(Line(D, E), Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, H), Line(E, H), Line(H, center(c)) we get concurrent(Line(A, H), Line(E, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, H), f, Line(F, I) we get concurrent(f, Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(E, F), Line(F, I), f we get concurrent(f, Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on i, g, Line(D, center(Circle(A, C, D))) we get concurrent(g, i, Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, F), Line(D, center(Circle(A, C, D))), g we get concurrent(g, Line(D, F), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, E), Line(D, center(c)) we get concurrent(Line(D, E), Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), f, Line(D, F) we get concurrent(f, Line(D, F), Line(F, H))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), g, Line(D, I) we get concurrent(g, Line(D, I), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(c)), Line(E, center(Circle(B, C, E))) we get concurrent(Line(D, E), Line(E, center(c)), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, I), Line(E, center(Circle(B, C, E))) we get concurrent(Line(E, F), Line(E, I), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(E, center(Circle(B, C, E))), Line(E, I) we get concurrent(Line(E, H), Line(E, I), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), h, Line(E, center(c)) we get concurrent(h, Line(E, center(c)), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, I), Line(I, center(c)), Line(A, I) we get concurrent(Line(A, I), Line(E, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(A, H), Line(D, H) we get concurrent(Line(A, H), Line(D, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, E), j, Line(E, center(Circle(C, D, E))) we get concurrent(j, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(A, C, D))), Line(F, H) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(E, I), Line(D, E) we get concurrent(Line(D, E), Line(E, I), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on i, Line(G, I), Line(G, center(Circle(C, D, E))) we get concurrent(i, Line(G, I), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on j, Line(G, H), Line(C, F) we get concurrent(j, Line(C, F), Line(G, H))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, F), Line(E, center(Circle(B, C, E))) we get concurrent(Line(E, F), Line(E, center(c)), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on k, Line(G, I), Line(I, center(c)) we get concurrent(k, Line(G, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(A, I), Line(D, I) we get concurrent(Line(A, I), Line(D, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(B, center(Circle(B, C, E))), j, f we get concurrent(f, j, Line(B, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(A, center(c)), i, Line(A, I) we get concurrent(i, Line(A, I), Line(A, center(c)))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(E, I), Line(D, I) we get concurrent(Line(D, I), Line(E, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(B, I), Line(D, I) we get concurrent(Line(B, I), Line(D, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(F, I), Line(C, F) we get concurrent(Line(C, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on g, Line(D, center(c)), Line(D, F) we get concurrent(g, Line(D, F), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, center(c)), Line(D, E) we get concurrent(Line(D, E), Line(D, center(c)), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), f, Line(E, F) we get concurrent(f, Line(E, F), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(A, center(Circle(A, C, D))), f, i we get concurrent(f, i, Line(A, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(A, I), Line(F, I) we get concurrent(Line(A, I), Line(F, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(E, center(c)), j, Line(E, I) we get concurrent(j, Line(E, I), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(Circle(C, D, E))), Line(D, center(c)) we get concurrent(Line(D, E), Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, center(Circle(A, C, D))), Line(D, F) we get concurrent(Line(D, E), Line(D, F), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, F), Line(D, center(Circle(A, C, D))) we get concurrent(Line(D, F), Line(D, center(c)), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(C, F), Line(F, H), Line(F, I) we get concurrent(Line(C, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(I, center(c)), Line(E, center(c)), Line(D, center(c)) we get concurrent(Line(D, center(c)), Line(E, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on i, Line(D, H), Line(D, center(c)) we get concurrent(i, Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on i, Line(G, center(Circle(C, D, E))), Line(G, H) we get concurrent(i, Line(G, H), Line(G, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), j, Line(E, center(Circle(B, C, E))) we get concurrent(j, Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, I), Line(B, I), Line(I, center(c)) we get concurrent(Line(B, I), Line(D, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(E, H), Line(H, center(c)), k we get concurrent(k, Line(E, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, F), i we get concurrent(i, Line(D, F), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, I), Line(E, center(c)), j we get concurrent(j, Line(E, I), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(E, center(c)), h, Line(E, center(Circle(C, D, E))) we get concurrent(h, Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(C, F), Line(F, I) we get concurrent(Line(C, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(D, I), Line(G, I), Line(A, I) we get concurrent(Line(A, I), Line(D, I), Line(G, I))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(D, center(Circle(C, D, E))), g we get concurrent(g, Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, I), Line(I, center(c)), Line(F, I) we get concurrent(Line(E, I), Line(F, I), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(F, center(Circle(B, C, E))), Line(C, center(Circle(B, C, E))) we get concurrent(Line(C, center(Circle(B, C, E))), Line(E, center(Circle(B, C, E))), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, H), Line(C, F) we get concurrent(Line(C, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(D, center(c)), i, Line(D, E) we get concurrent(i, Line(D, E), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(D, H), Line(A, H), Line(G, H) we get concurrent(Line(A, H), Line(D, H), Line(G, H))
By concurrent_sufficient_conditions on Line(D, E), Line(E, I), Line(E, center(c)) we get concurrent(Line(D, E), Line(E, I), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(D, I), Line(I, center(c)), k we get concurrent(k, Line(D, I), Line(I, center(c)))
By concurrent_sufficient_conditions on k, Line(C, center(Circle(A, C, D))), Line(C, F) we get concurrent(k, Line(C, F), Line(C, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, H), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(B, center(c)), Line(B, H), j we get concurrent(j, Line(B, H), Line(B, center(c)))
By concurrent_sufficient_conditions on g, Line(B, center(c)), Line(B, I) we get concurrent(g, Line(B, I), Line(B, center(c)))
By concurrent_sufficient_conditions on Line(F, H), Line(G, H), Line(E, H) we get concurrent(Line(E, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(C, F), Line(F, center(Circle(A, C, D))), Line(F, I) we get concurrent(Line(C, F), Line(F, I), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(D, H), Line(H, center(c)), Line(A, H) we get concurrent(Line(A, H), Line(D, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(A, H), Line(H, center(c)), Line(F, H) we get concurrent(Line(A, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, I), Line(D, I), Line(G, I) we get concurrent(Line(D, I), Line(E, I), Line(G, I))
By concurrent_sufficient_conditions on Line(D, E), Line(D, H), Line(D, center(c)) we get concurrent(Line(D, E), Line(D, H), Line(D, center(c)))
By concurrent_sufficient_conditions on Line(D, E), h, Line(E, center(Circle(C, D, E))) we get concurrent(h, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(c)), Line(B, center(c)), Line(I, center(c)) we get concurrent(Line(B, center(c)), Line(D, center(c)), Line(I, center(c)))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(H, center(c)), Line(D, center(c)) we get concurrent(Line(D, center(c)), Line(E, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(D, I), Line(D, center(Circle(A, C, D))), Line(D, E) we get concurrent(Line(D, E), Line(D, I), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(F, H), Line(C, F) we get concurrent(Line(C, F), Line(F, H), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(E, F), Line(E, H) we get concurrent(Line(E, F), Line(E, H), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(G, H), Line(A, H) we get concurrent(Line(A, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(C, F), Line(F, H), Line(F, center(Circle(A, C, D))) we get concurrent(Line(C, F), Line(F, H), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, center(Circle(B, C, E))), Line(E, F), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(E, center(Circle(B, C, E))), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(C, F), Line(F, H) we get concurrent(f, Line(C, F), Line(F, H))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, I), i we get concurrent(i, Line(D, I), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(A, C, D))), Line(F, I), Line(D, F) we get concurrent(Line(D, F), Line(F, I), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(F, center(Circle(B, C, E))), Line(F, H), Line(C, F) we get concurrent(Line(C, F), Line(F, H), Line(F, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on k, Line(B, I), Line(G, I) we get concurrent(k, Line(B, I), Line(G, I))
By concurrent_sufficient_conditions on Line(D, H), Line(D, center(Circle(C, D, E))), Line(D, I) we get concurrent(Line(D, H), Line(D, I), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), g, Line(D, center(Circle(A, C, D))) we get concurrent(g, Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, I), Line(E, I), Line(A, I) we get concurrent(Line(A, I), Line(E, I), Line(G, I))
By concurrent_sufficient_conditions on Line(D, center(Circle(A, C, D))), Line(D, I), Line(D, E) we get concurrent(Line(D, E), Line(D, I), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(H, center(c)), Line(B, center(c)), Line(E, center(c)) we get concurrent(Line(B, center(c)), Line(E, center(c)), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, I), Line(E, center(c)), Line(E, F) we get concurrent(Line(E, F), Line(E, I), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(C, center(Circle(A, C, D))), Line(C, F), Line(C, center(Circle(B, C, E))) we get concurrent(Line(C, F), Line(C, center(Circle(A, C, D))), Line(C, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(E, center(c)), Line(E, I), Line(E, H) we get concurrent(Line(E, H), Line(E, I), Line(E, center(c)))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, I), Line(D, F) we get concurrent(Line(D, F), Line(D, I), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, I), i, Line(D, center(Circle(A, C, D))) we get concurrent(i, Line(D, I), Line(D, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(F, I), Line(C, F), Line(F, center(Circle(A, C, D))) we get concurrent(Line(C, F), Line(F, I), Line(F, center(Circle(A, C, D))))
By concurrent_sufficient_conditions on Line(E, H), Line(D, H), Line(H, center(c)) we get concurrent(Line(D, H), Line(E, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(E, F), h, Line(E, center(Circle(B, C, E))) we get concurrent(h, Line(E, F), Line(E, center(Circle(B, C, E))))
By concurrent_sufficient_conditions on Line(D, center(Circle(C, D, E))), Line(D, E), Line(D, center(Circle(A, C, D))) we get concurrent(Line(D, E), Line(D, center(Circle(A, C, D))), Line(D, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(D, H), Line(H, center(c)) we get concurrent(Line(D, H), Line(F, H), Line(H, center(c)))
By concurrent_sufficient_conditions on Line(F, H), k, Line(B, H) we get concurrent(k, Line(B, H), Line(F, H))
By perpendicular_direction_conditions_v0 on B, center(c), G, center(Circle(C, D, E)) we get perpendicular(Line(B, center(c)), Line(G, center(Circle(C, D, E))))
By perpendicular_direction_conditions_v0 on A, B, G, center(Circle(C, D, E)) we get perpendicular(Line(A, B), Line(G, center(Circle(C, D, E))))
By perpendicular_direction_conditions_v0 on B, center(c), C, G we get perpendicular(Line(C, G), Line(B, center(c)))
By perpendicular_direction_conditions_v0 on C, center(Circle(C, D, E)), A, B we get perpendicular(Line(A, B), Line(C, center(Circle(C, D, E))))
By perpendicular_direction_conditions_v0 on C, center(Circle(A, C, D)), B, E we get perpendicular(Line(B, E), Line(C, center(Circle(A, C, D))))
By perpendicular_direction_conditions_v0 on F, G, center(c), A we get perpendicular(Line(F, G), Line(A, center(c)))
By perpendicular_direction_conditions_v0 on B, G, A, center(Circle(A, C, D)) we get perpendicular(Line(B, G), Line(A, center(Circle(A, C, D))))
By perpendicular_direction_conditions_v0 on G, C, A, center(c) we get perpendicular(Line(C, G), Line(A, center(c)))
By perpendicular_direction_conditions_v0 on D, center(Circle(C, D, E)), center(c), D we get perpendicular(Line(D, center(c)), Line(D, center(Circle(C, D, E))))
By perpendicular_direction_conditions_v0 on center(Circle(B, C, E)), B, G, A we get perpendicular(Line(A, G), Line(B, center(Circle(B, C, E))))
By perpendicular_direction_conditions_v0 on F, A, center(Circle(C, D, E)), G we get perpendicular(Line(A, F), Line(G, center(Circle(C, D, E))))
By perpendicular_direction_conditions_v0 on center(Circle(C, D, E)), G, center(c), A we get perpendicular(Line(A, center(c)), Line(G, center(Circle(C, D, E))))
By perpendicular_direction_conditions_v0 on D, G, C, center(Circle(B, C, E)) we get perpendicular(Line(D, G), Line(C, center(Circle(B, C, E))))
By perpendicular_direction_conditions_v0 on A, D, center(Circle(B, C, E)), C we get perpendicular(Line(A, D), Line(C, center(Circle(B, C, E))))
By perpendicular_direction_conditions_v0 on A, center(Circle(A, C, D)), G, E we get perpendicular(Line(E, G), Line(A, center(Circle(A, C, D))))
By perpendicular_direction_conditions_v0 on G, F, B, center(c) we get perpendicular(Line(F, G), Line(B, center(c)))
By perpendicular_direction_conditions_v0 on B, center(Circle(B, C, E)), G, D we get perpendicular(Line(D, G), Line(B, center(Circle(B, C, E))))
By perpendicular_direction_conditions_v0 on F, C, center(c), B we get perpendicular(Line(C, F), Line(B, center(c)))
By perpendicular_direction_conditions_v0 on B, F, center(Circle(C, D, E)), C we get perpendicular(Line(B, F), Line(C, center(Circle(C, D, E))))
By perpendicular_direction_conditions_v0 on center(c), A, C, F we get perpendicular(Line(C, F), Line(A, center(c)))
By perpendicular_direction_conditions_v0 on center(Circle(B, C, E)), C, A, G we get perpendicular(Line(A, G), Line(C, center(Circle(B, C, E))))
By perpendicular_direction_conditions_v0 on C, center(Circle(C, D, E)), B, center(c) we get perpendicular(Line(B, center(c)), Line(C, center(Circle(C, D, E))))
By perpendicular_direction_conditions_v0 on E, G, C, center(Circle(A, C, D)) we get perpendicular(Line(E, G), Line(C, center(Circle(A, C, D))))
By perpendicular_direction_conditions_v0 on E, B, A, center(Circle(A, C, D)) we get perpendicular(Line(B, E), Line(A, center(Circle(A, C, D))))
By perpendicular_direction_conditions_v0 on center(Circle(B, C, E)), B, A, D we get perpendicular(Line(A, D), Line(B, center(Circle(B, C, E))))
By perpendicular_direction_conditions_v0 on center(Circle(A, C, D)), C, G, B we get perpendicular(Line(B, G), Line(C, center(Circle(A, C, D))))
By perpendicular_direction_conditions_v0 on center(Circle(C, D, E)), G, B, F we get perpendicular(Line(B, F), Line(G, center(Circle(C, D, E))))
By perpendicular_direction_conditions_v0 on center(Circle(C, D, E)), C, F, A we get perpendicular(Line(A, F), Line(C, center(Circle(C, D, E))))
By perpendicular_direction_conditions_v0 on center(Circle(C, D, E)), C, center(c), A we get perpendicular(Line(A, center(c)), Line(C, center(Circle(C, D, E))))
By perpendicular_direction_conditions_v0 on E, center(c), center(Circle(C, D, E)), E we get perpendicular(Line(E, center(c)), Line(E, center(Circle(C, D, E))))
By circle_radius_v0_r on G, Circle(B, D, F) we get radius(Circle(B, D, F)) == distance(G, center(Circle(B, D, F)))
By circle_radius_v0_r on A, Circle(A, E, F) we get radius(Circle(A, E, F)) == distance(A, center(Circle(A, E, F)))
By circle_radius_v0_r on F, Circle(A, E, F) we get radius(Circle(A, E, F)) == distance(F, center(Circle(A, E, F)))
By circle_radius_v0_r on D, Circle(B, D, F) we get radius(Circle(B, D, F)) == distance(D, center(Circle(B, D, F)))
By circle_radius_v0_r on B, Circle(B, D, F) we get radius(Circle(B, D, F)) == distance(B, center(Circle(B, D, F)))
By circle_radius_v0_r on F, Circle(B, D, F) we get radius(Circle(B, D, F)) == distance(F, center(Circle(B, D, F)))
By circle_radius_v0_r on E, Circle(A, E, F) we get radius(Circle(A, E, F)) == distance(E, center(Circle(A, E, F)))
By circle_radius_v0_r on G, Circle(A, E, F) we get radius(Circle(A, E, F)) == distance(G, center(Circle(A, E, F)))
By angle_to_center on B, D, G, Circle(B, D, F) we get 2 * angle(B, D, G) == angle(B, center(Circle(B, D, F)), G) mod 360
By angle_to_center on D, B, G, Circle(B, D, F) we get 2 * angle(D, B, G) == angle(D, center(Circle(B, D, F)), G) mod 360
By angle_to_center on F, G, E, Circle(A, E, F) we get 2 * angle(F, G, E) == angle(F, center(Circle(A, E, F)), E) mod 360
By angle_to_center on F, E, A, Circle(A, E, F) we get 2 * angle(F, E, A) == angle(F, center(Circle(A, E, F)), A) mod 360
By angle_to_center on G, F, B, Circle(B, D, F) we get 2 * angle(G, F, B) == angle(G, center(Circle(B, D, F)), B) mod 360
By angle_to_center on E, G, A, Circle(A, E, F) we get 2 * angle(E, G, A) == angle(E, center(Circle(A, E, F)), A) mod 360
By angle_to_center on G, A, F, Circle(A, E, F) we get 2 * angle(G, A, F) == angle(G, center(Circle(A, E, F)), F) mod 360
By angle_to_center on D, F, G, Circle(B, D, F) we get 2 * angle(D, F, G) == angle(D, center(Circle(B, D, F)), G) mod 360
By angle_to_center on F, G, B, Circle(B, D, F) we get 2 * angle(F, G, B) == angle(F, center(Circle(B, D, F)), B) mod 360
By angle_to_center on F, E, G, Circle(A, E, F) we get 2 * angle(F, E, G) == angle(F, center(Circle(A, E, F)), G) mod 360
By angle_to_center on D, G, B, Circle(B, D, F) we get 2 * angle(D, G, B) == angle(D, center(Circle(B, D, F)), B) mod 360
By angle_to_center on E, F, G, Circle(A, E, F) we get 2 * angle(E, F, G) == angle(E, center(Circle(A, E, F)), G) mod 360
By angle_to_center on F, B, G, Circle(B, D, F) we get 2 * angle(F, B, G) == angle(F, center(Circle(B, D, F)), G) mod 360
By angle_to_center on A, F, E, Circle(A, E, F) we get 2 * angle(A, F, E) == angle(A, center(Circle(A, E, F)), E) mod 360
By angle_to_center on G, B, D, Circle(B, D, F) we get 2 * angle(G, B, D) == angle(G, center(Circle(B, D, F)), D) mod 360
By angle_to_center on G, F, E, Circle(A, E, F) we get 2 * angle(G, F, E) == angle(G, center(Circle(A, E, F)), E) mod 360
By angle_to_center on G, D, F, Circle(B, D, F) we get 2 * angle(G, D, F) == angle(G, center(Circle(B, D, F)), F) mod 360
By angle_to_center on A, G, F, Circle(A, E, F) we get 2 * angle(A, G, F) == angle(A, center(Circle(A, E, F)), F) mod 360
By angle_to_center on D, G, F, Circle(B, D, F) we get 2 * angle(D, G, F) == angle(D, center(Circle(B, D, F)), F) mod 360
By angle_to_center on G, F, D, Circle(B, D, F) we get 2 * angle(G, F, D) == angle(G, center(Circle(B, D, F)), D) mod 360
By angle_to_center on A, G, E, Circle(A, E, F) we get 2 * angle(A, G, E) == angle(A, center(Circle(A, E, F)), E) mod 360
By angle_to_center on D, F, B, Circle(B, D, F) we get 2 * angle(D, F, B) == angle(D, center(Circle(B, D, F)), B) mod 360
By angle_to_center on G, B, F, Circle(B, D, F) we get 2 * angle(G, B, F) == angle(G, center(Circle(B, D, F)), F) mod 360
By angle_to_center on F, G, A, Circle(A, E, F) we get 2 * angle(F, G, A) == angle(F, center(Circle(A, E, F)), A) mod 360
By angle_to_center on F, A, E, Circle(A, E, F) we get 2 * angle(F, A, E) == angle(F, center(Circle(A, E, F)), E) mod 360
By angle_to_center on B, D, F, Circle(B, D, F) we get 2 * angle(B, D, F) == angle(B, center(Circle(B, D, F)), F) mod 360
By angle_to_center on G, A, E, Circle(A, E, F) we get 2 * angle(G, A, E) == angle(G, center(Circle(A, E, F)), E) mod 360
By angle_to_center on G, E, F, Circle(A, E, F) we get 2 * angle(G, E, F) == angle(G, center(Circle(A, E, F)), F) mod 360
By angle_to_center on F, B, D, Circle(B, D, F) we get 2 * angle(F, B, D) == angle(F, center(Circle(B, D, F)), D) mod 360
By angle_to_center on B, G, D, Circle(B, D, F) we get 2 * angle(B, G, D) == angle(B, center(Circle(B, D, F)), D) mod 360
By angle_to_center on E, G, F, Circle(A, E, F) we get 2 * angle(E, G, F) == angle(E, center(Circle(A, E, F)), F) mod 360
By angle_to_center on G, F, A, Circle(A, E, F) we get 2 * angle(G, F, A) == angle(G, center(Circle(A, E, F)), A) mod 360
By angle_to_center on G, E, A, Circle(A, E, F) we get 2 * angle(G, E, A) == angle(G, center(Circle(A, E, F)), A) mod 360
By angle_to_center on F, D, G, Circle(B, D, F) we get 2 * angle(F, D, G) == angle(F, center(Circle(B, D, F)), G) mod 360
By angle_to_center on F, D, B, Circle(B, D, F) we get 2 * angle(F, D, B) == angle(F, center(Circle(B, D, F)), B) mod 360
By angle_to_center on D, B, F, Circle(B, D, F) we get 2 * angle(D, B, F) == angle(D, center(Circle(B, D, F)), F) mod 360
By angle_to_center on F, G, D, Circle(B, D, F) we get 2 * angle(F, G, D) == angle(F, center(Circle(B, D, F)), D) mod 360
By angle_to_center on E, A, F, Circle(A, E, F) we get 2 * angle(E, A, F) == angle(E, center(Circle(A, E, F)), F) mod 360
By angle_to_center on A, E, G, Circle(A, E, F) we get 2 * angle(A, E, G) == angle(A, center(Circle(A, E, F)), G) mod 360
By angle_to_center on B, G, F, Circle(B, D, F) we get 2 * angle(B, G, F) == angle(B, center(Circle(B, D, F)), F) mod 360
By angle_to_center on E, F, A, Circle(A, E, F) we get 2 * angle(E, F, A) == angle(E, center(Circle(A, E, F)), A) mod 360
By angle_to_center on G, D, B, Circle(B, D, F) we get 2 * angle(G, D, B) == angle(G, center(Circle(B, D, F)), B) mod 360
By angle_to_center on E, A, G, Circle(A, E, F) we get 2 * angle(E, A, G) == angle(E, center(Circle(A, E, F)), G) mod 360
By angle_to_center on B, F, D, Circle(B, D, F) we get 2 * angle(B, F, D) == angle(B, center(Circle(B, D, F)), D) mod 360
By angle_to_center on F, A, G, Circle(A, E, F) we get 2 * angle(F, A, G) == angle(F, center(Circle(A, E, F)), G) mod 360
By angle_to_center on B, F, G, Circle(B, D, F) we get 2 * angle(B, F, G) == angle(B, center(Circle(B, D, F)), G) mod 360
By angle_to_center on A, E, F, Circle(A, E, F) we get 2 * angle(A, E, F) == angle(A, center(Circle(A, E, F)), F) mod 360
By angle_to_center on A, F, G, Circle(A, E, F) we get 2 * angle(A, F, G) == angle(A, center(Circle(A, E, F)), G) mod 360
By collinear_definition on center(Circle(C, D, E)), G, C we get G in Line(C, center(Circle(C, D, E))), C in Line(G, center(Circle(C, D, E))), Line(C, center(Circle(C, D, E))) == Line(G, center(Circle(C, D, E))), 0 == 2 * angle(G, center(Circle(C, D, E)), C) mod 360
By collinear_definition on C, center(Circle(C, D, E)), G we get center(Circle(C, D, E)) in Line(C, G), G in Line(C, center(Circle(C, D, E))), Line(C, G) == Line(C, center(Circle(C, D, E))), 0 == 2 * angle(center(Circle(C, D, E)), C, G) mod 360
By collinear_definition on A, B, center(c) we get B in Line(A, center(c)), center(c) in Line(A, B), Line(A, B) == Line(A, center(c)), 0 == 2 * angle(B, A, center(c)) mod 360
By collinear_definition on C, center(Circle(B, C, E)), B we get center(Circle(B, C, E)) in Line(B, C), B in Line(C, center(Circle(B, C, E))), Line(B, C) == Line(C, center(Circle(B, C, E))), 0 == 2 * angle(center(Circle(B, C, E)), C, B) mod 360
By collinear_definition on center(Circle(B, C, E)), C, B we get C in Line(B, center(Circle(B, C, E))), B in Line(C, center(Circle(B, C, E))), Line(B, center(Circle(B, C, E))) == Line(C, center(Circle(B, C, E))), 0 == 2 * angle(C, center(Circle(B, C, E)), B) mod 360
By collinear_definition on B, center(Circle(B, C, E)), C we get center(Circle(B, C, E)) in Line(B, C), C in Line(B, center(Circle(B, C, E))), Line(B, C) == Line(B, center(Circle(B, C, E))), 0 == 2 * angle(center(Circle(B, C, E)), B, C) mod 360
By collinear_definition on C, A, center(Circle(A, C, D)) we get A in Line(C, center(Circle(A, C, D))), center(Circle(A, C, D)) in Line(A, C), Line(A, C) == Line(C, center(Circle(A, C, D))), 0 == 2 * angle(A, C, center(Circle(A, C, D))) mod 360
By collinear_definition on G, center(Circle(C, D, E)), C we get center(Circle(C, D, E)) in Line(C, G), C in Line(G, center(Circle(C, D, E))), Line(C, G) == Line(G, center(Circle(C, D, E))), 0 == 2 * angle(center(Circle(C, D, E)), G, C) mod 360
By collinear_definition on center(Circle(A, C, D)), C, A we get C in Line(A, center(Circle(A, C, D))), A in Line(C, center(Circle(A, C, D))), Line(A, center(Circle(A, C, D))) == Line(C, center(Circle(A, C, D))), 0 == 2 * angle(C, center(Circle(A, C, D)), A) mod 360
By collinear_definition on C, G, center(Circle(C, D, E)) we get G in Line(C, center(Circle(C, D, E))), center(Circle(C, D, E)) in Line(C, G), Line(C, G) == Line(C, center(Circle(C, D, E))), 0 == 2 * angle(G, C, center(Circle(C, D, E))) mod 360
By collinear_definition on B, A, center(c) we get A in Line(B, center(c)), center(c) in Line(A, B), Line(A, B) == Line(B, center(c)), 0 == 2 * angle(A, B, center(c)) mod 360
By collinear_definition on A, center(c), B we get center(c) in Line(A, B), B in Line(A, center(c)), Line(A, B) == Line(A, center(c)), 0 == 2 * angle(center(c), A, B) mod 360
By collinear_definition on C, B, center(Circle(B, C, E)) we get B in Line(C, center(Circle(B, C, E))), center(Circle(B, C, E)) in Line(B, C), Line(B, C) == Line(C, center(Circle(B, C, E))), 0 == 2 * angle(B, C, center(Circle(B, C, E))) mod 360
By collinear_definition on G, C, center(Circle(C, D, E)) we get C in Line(G, center(Circle(C, D, E))), center(Circle(C, D, E)) in Line(C, G), Line(C, G) == Line(G, center(Circle(C, D, E))), 0 == 2 * angle(C, G, center(Circle(C, D, E))) mod 360
By collinear_definition on center(c), B, A we get B in Line(A, center(c)), A in Line(B, center(c)), Line(A, center(c)) == Line(B, center(c)), 0 == 2 * angle(B, center(c), A) mod 360
By collinear_definition on A, center(Circle(A, C, D)), C we get center(Circle(A, C, D)) in Line(A, C), C in Line(A, center(Circle(A, C, D))), Line(A, C) == Line(A, center(Circle(A, C, D))), 0 == 2 * angle(center(Circle(A, C, D)), A, C) mod 360
By collinear_definition on C, center(Circle(A, C, D)), A we get center(Circle(A, C, D)) in Line(A, C), A in Line(C, center(Circle(A, C, D))), Line(A, C) == Line(C, center(Circle(A, C, D))), 0 == 2 * angle(center(Circle(A, C, D)), C, A) mod 360
By collinear_definition on A, C, center(Circle(A, C, D)) we get C in Line(A, center(Circle(A, C, D))), center(Circle(A, C, D)) in Line(A, C), Line(A, C) == Line(A, center(Circle(A, C, D))), 0 == 2 * angle(C, A, center(Circle(A, C, D))) mod 360
By collinear_definition on B, C, center(Circle(B, C, E)) we get C in Line(B, center(Circle(B, C, E))), center(Circle(B, C, E)) in Line(B, C), Line(B, C) == Line(B, center(Circle(B, C, E))), 0 == 2 * angle(C, B, center(Circle(B, C, E))) mod 360
By collinear_definition on B, center(c), A we get center(c) in Line(A, B), A in Line(B, center(c)), Line(A, B) == Line(B, center(c)), 0 == 2 * angle(center(c), B, A) mod 360
By concyclic_definition_0 on center(Circle(C, D, E)), D, center(c), E we get E in Circle(D, center(c), center(Circle(C, D, E)))
By concyclic_definition_0 on center(c), center(Circle(C, D, E)), E, D we get D in Circle(E, center(c), center(Circle(C, D, E)))
By concyclic_definition_0 on E, D, center(c), center(Circle(C, D, E)) we get center(Circle(C, D, E)) in Circle(D, E, center(c))
By concyclic_definition_0 on E, D, center(Circle(C, D, E)), center(c) we get center(c) in Circle(D, E, center(Circle(C, D, E)))
By anti_similar_triangle_basic_properties on center(Circle(B, C, E)), E, C, center(Circle(B, C, E)), C, E we get angle(center(Circle(B, C, E)), E, C) == 0 - angle(center(Circle(B, C, E)), C, E) mod 360, angle(E, C, center(Circle(B, C, E))) == 0 - angle(C, E, center(Circle(B, C, E))) mod 360, angle(C, center(Circle(B, C, E)), E) == 0 - angle(E, center(Circle(B, C, E)), C) mod 360, log(distance(C, center(Circle(B, C, E)))) + log(distance(C, E)) == log(distance(E, center(Circle(B, C, E)))) + log(distance(C, E)), log(distance(C, E)) + log(distance(C, center(Circle(B, C, E)))) == log(distance(C, E)) + log(distance(E, center(Circle(B, C, E)))), log(distance(C, center(Circle(B, C, E)))) + log(distance(C, center(Circle(B, C, E)))) == log(distance(E, center(Circle(B, C, E)))) + log(distance(E, center(Circle(B, C, E))))
By anti_similar_triangle_basic_properties on center(c), B, E, center(c), E, B we get angle(center(c), B, E) == 0 - angle(center(c), E, B) mod 360, angle(B, E, center(c)) == 0 - angle(E, B, center(c)) mod 360, angle(E, center(c), B) == 0 - angle(B, center(c), E) mod 360, log(distance(B, center(c))) + log(distance(B, E)) == log(distance(E, center(c))) + log(distance(B, E)), log(distance(B, E)) + log(distance(B, center(c))) == log(distance(B, E)) + log(distance(E, center(c))), log(distance(B, center(c))) + log(distance(B, center(c))) == log(distance(E, center(c))) + log(distance(E, center(c)))
By anti_similar_triangle_basic_properties on E, H, center(c), H, E, center(c) we get angle(E, H, center(c)) == 0 - angle(H, E, center(c)) mod 360, angle(H, center(c), E) == 0 - angle(E, center(c), H) mod 360, angle(center(c), E, H) == 0 - angle(center(c), H, E) mod 360, log(distance(E, H)) + log(distance(E, center(c))) == log(distance(E, H)) + log(distance(H, center(c))), log(distance(E, center(c))) + log(distance(E, center(c))) == log(distance(H, center(c))) + log(distance(H, center(c))), log(distance(E, center(c))) + log(distance(E, H)) == log(distance(H, center(c))) + log(distance(E, H))
By concyclic_definition_1 on D, center(Circle(C, D, E)), E, center(c) we get Circle(D, E, center(Circle(C, D, E))) == Circle(E, center(c), center(Circle(C, D, E)))
By anti_similar_triangle_basic_properties on center(Circle(B, C, E)), B, E, center(Circle(B, C, E)), E, B we get angle(center(Circle(B, C, E)), B, E) == 0 - angle(center(Circle(B, C, E)), E, B) mod 360, angle(B, E, center(Circle(B, C, E))) == 0 - angle(E, B, center(Circle(B, C, E))) mod 360, angle(E, center(Circle(B, C, E)), B) == 0 - angle(B, center(Circle(B, C, E)), E) mod 360, log(distance(B, center(Circle(B, C, E)))) + log(distance(B, E)) == log(distance(E, center(Circle(B, C, E)))) + log(distance(B, E)), log(distance(B, E)) + log(distance(B, center(Circle(B, C, E)))) == log(distance(B, E)) + log(distance(E, center(Circle(B, C, E)))), log(distance(B, center(Circle(B, C, E)))) + log(distance(B, center(Circle(B, C, E)))) == log(distance(E, center(Circle(B, C, E)))) + log(distance(E, center(Circle(B, C, E))))
By anti_similar_triangle_basic_properties on center(c), E, A, center(c), A, E we get angle(center(c), E, A) == 0 - angle(center(c), A, E) mod 360, angle(E, A, center(c)) == 0 - angle(A, E, center(c)) mod 360, angle(A, center(c), E) == 0 - angle(E, center(c), A) mod 360, log(distance(A, center(c))) + log(distance(A, E)) == log(distance(E, center(c))) + log(distance(A, E)), log(distance(A, E)) + log(distance(A, center(c))) == log(distance(A, E)) + log(distance(E, center(c))), log(distance(A, center(c))) + log(distance(A, center(c))) == log(distance(E, center(c))) + log(distance(E, center(c)))
By anti_similar_triangle_basic_properties on E, center(Circle(B, C, E)), F, F, center(Circle(B, C, E)), E we get angle(E, center(Circle(B, C, E)), F) == 0 - angle(F, center(Circle(B, C, E)), E) mod 360, angle(center(Circle(B, C, E)), F, E) == 0 - angle(center(Circle(B, C, E)), E, F) mod 360, angle(F, E, center(Circle(B, C, E))) == 0 - angle(E, F, center(Circle(B, C, E))) mod 360, log(distance(E, center(Circle(B, C, E)))) + log(distance(E, center(Circle(B, C, E)))) == log(distance(F, center(Circle(B, C, E)))) + log(distance(F, center(Circle(B, C, E)))), log(distance(E, center(Circle(B, C, E)))) + log(distance(E, F)) == log(distance(F, center(Circle(B, C, E)))) + log(distance(E, F)), log(distance(E, F)) + log(distance(E, center(Circle(B, C, E)))) == log(distance(E, F)) + log(distance(F, center(Circle(B, C, E))))
By anti_similar_triangle_basic_properties on center(Circle(A, C, D)), D, A, center(Circle(A, C, D)), A, D we get angle(center(Circle(A, C, D)), D, A) == 0 - angle(center(Circle(A, C, D)), A, D) mod 360, angle(D, A, center(Circle(A, C, D))) == 0 - angle(A, D, center(Circle(A, C, D))) mod 360, angle(A, center(Circle(A, C, D)), D) == 0 - angle(D, center(Circle(A, C, D)), A) mod 360, log(distance(A, center(Circle(A, C, D)))) + log(distance(A, D)) == log(distance(D, center(Circle(A, C, D)))) + log(distance(A, D)), log(distance(A, D)) + log(distance(A, center(Circle(A, C, D)))) == log(distance(A, D)) + log(distance(D, center(Circle(A, C, D)))), log(distance(A, center(Circle(A, C, D)))) + log(distance(A, center(Circle(A, C, D)))) == log(distance(D, center(Circle(A, C, D)))) + log(distance(D, center(Circle(A, C, D))))
By anti_similar_triangle_basic_properties on E, center(Circle(C, D, E)), D, D, center(Circle(C, D, E)), E we get angle(E, center(Circle(C, D, E)), D) == 0 - angle(D, center(Circle(C, D, E)), E) mod 360, angle(center(Circle(C, D, E)), D, E) == 0 - angle(center(Circle(C, D, E)), E, D) mod 360, angle(D, E, center(Circle(C, D, E))) == 0 - angle(E, D, center(Circle(C, D, E))) mod 360, log(distance(D, center(Circle(C, D, E)))) + log(distance(D, center(Circle(C, D, E)))) == log(distance(E, center(Circle(C, D, E)))) + log(distance(E, center(Circle(C, D, E)))), log(distance(D, center(Circle(C, D, E)))) + log(distance(D, E)) == log(distance(E, center(Circle(C, D, E)))) + log(distance(D, E)), log(distance(D, E)) + log(distance(D, center(Circle(C, D, E)))) == log(distance(D, E)) + log(distance(E, center(Circle(C, D, E))))
By anti_similar_triangle_basic_properties on center(Circle(C, D, E)), E, C, center(Circle(C, D, E)), C, E we get angle(center(Circle(C, D, E)), E, C) == 0 - angle(center(Circle(C, D, E)), C, E) mod 360, angle(E, C, center(Circle(C, D, E))) == 0 - angle(C, E, center(Circle(C, D, E))) mod 360, angle(C, center(Circle(C, D, E)), E) == 0 - angle(E, center(Circle(C, D, E)), C) mod 360, log(distance(C, center(Circle(C, D, E)))) + log(distance(C, E)) == log(distance(E, center(Circle(C, D, E)))) + log(distance(C, E)), log(distance(C, E)) + log(distance(C, center(Circle(C, D, E)))) == log(distance(C, E)) + log(distance(E, center(Circle(C, D, E)))), log(distance(C, center(Circle(C, D, E)))) + log(distance(C, center(Circle(C, D, E)))) == log(distance(E, center(Circle(C, D, E)))) + log(distance(E, center(Circle(C, D, E))))
By anti_similar_triangle_basic_properties on H, A, center(c), A, H, center(c) we get angle(H, A, center(c)) == 0 - angle(A, H, center(c)) mod 360, angle(A, center(c), H) == 0 - angle(H, center(c), A) mod 360, angle(center(c), H, A) == 0 - angle(center(c), A, H) mod 360, log(distance(A, H)) + log(distance(A, center(c))) == log(distance(A, H)) + log(distance(H, center(c))), log(distance(A, center(c))) + log(distance(A, center(c))) == log(distance(H, center(c))) + log(distance(H, center(c))), log(distance(A, center(c))) + log(distance(A, H)) == log(distance(H, center(c))) + log(distance(A, H))
By concyclic_definition_1 on center(Circle(C, D, E)), E, D, center(c) we get Circle(D, E, center(c)) == Circle(D, E, center(Circle(C, D, E)))
By anti_similar_triangle_basic_properties on B, center(c), I, I, center(c), B we get angle(B, center(c), I) == 0 - angle(I, center(c), B) mod 360, angle(center(c), I, B) == 0 - angle(center(c), B, I) mod 360, angle(I, B, center(c)) == 0 - angle(B, I, center(c)) mod 360, log(distance(B, center(c))) + log(distance(B, center(c))) == log(distance(I, center(c))) + log(distance(I, center(c))), log(distance(B, center(c))) + log(distance(B, I)) == log(distance(I, center(c))) + log(distance(B, I)), log(distance(B, I)) + log(distance(B, center(c))) == log(distance(B, I)) + log(distance(I, center(c)))
By anti_similar_triangle_basic_properties on D, G, center(Circle(C, D, E)), G, D, center(Circle(C, D, E)) we get angle(D, G, center(Circle(C, D, E))) == 0 - angle(G, D, center(Circle(C, D, E))) mod 360, angle(G, center(Circle(C, D, E)), D) == 0 - angle(D, center(Circle(C, D, E)), G) mod 360, angle(center(Circle(C, D, E)), D, G) == 0 - angle(center(Circle(C, D, E)), G, D) mod 360, log(distance(D, G)) + log(distance(D, center(Circle(C, D, E)))) == log(distance(D, G)) + log(distance(G, center(Circle(C, D, E)))), log(distance(D, center(Circle(C, D, E)))) + log(distance(D, center(Circle(C, D, E)))) == log(distance(G, center(Circle(C, D, E)))) + log(distance(G, center(Circle(C, D, E)))), log(distance(D, center(Circle(C, D, E)))) + log(distance(D, G)) == log(distance(G, center(Circle(C, D, E)))) + log(distance(D, G))
By concyclic_definition_1 on center(Circle(C, D, E)), E, center(c), D we get Circle(D, E, center(c)) == Circle(E, center(c), center(Circle(C, D, E)))
By anti_similar_triangle_basic_properties on center(c), D, H, center(c), H, D we get angle(center(c), D, H) == 0 - angle(center(c), H, D) mod 360, angle(D, H, center(c)) == 0 - angle(H, D, center(c)) mod 360, angle(H, center(c), D) == 0 - angle(D, center(c), H) mod 360, log(distance(D, center(c))) + log(distance(D, H)) == log(distance(H, center(c))) + log(distance(D, H)), log(distance(D, H)) + log(distance(D, center(c))) == log(distance(D, H)) + log(distance(H, center(c))), log(distance(D, center(c))) + log(distance(D, center(c))) == log(distance(H, center(c))) + log(distance(H, center(c)))
By anti_similar_triangle_basic_properties on F, C, center(Circle(B, C, E)), C, F, center(Circle(B, C, E)) we get angle(F, C, center(Circle(B, C, E))) == 0 - angle(C, F, center(Circle(B, C, E))) mod 360, angle(C, center(Circle(B, C, E)), F) == 0 - angle(F, center(Circle(B, C, E)), C) mod 360, angle(center(Circle(B, C, E)), F, C) == 0 - angle(center(Circle(B, C, E)), C, F) mod 360, log(distance(C, F)) + log(distance(C, center(Circle(B, C, E)))) == log(distance(C, F)) + log(distance(F, center(Circle(B, C, E)))), log(distance(C, center(Circle(B, C, E)))) + log(distance(C, center(Circle(B, C, E)))) == log(distance(F, center(Circle(B, C, E)))) + log(distance(F, center(Circle(B, C, E)))), log(distance(C, center(Circle(B, C, E)))) + log(distance(C, F)) == log(distance(F, center(Circle(B, C, E)))) + log(distance(C, F))
By anti_similar_triangle_basic_properties on C, center(Circle(A, C, D)), F, F, center(Circle(A, C, D)), C we get angle(C, center(Circle(A, C, D)), F) == 0 - angle(F, center(Circle(A, C, D)), C) mod 360, angle(center(Circle(A, C, D)), F, C) == 0 - angle(center(Circle(A, C, D)), C, F) mod 360, angle(F, C, center(Circle(A, C, D))) == 0 - angle(C, F, center(Circle(A, C, D))) mod 360, log(distance(C, center(Circle(A, C, D)))) + log(distance(C, center(Circle(A, C, D)))) == log(distance(F, center(Circle(A, C, D)))) + log(distance(F, center(Circle(A, C, D)))), log(distance(C, center(Circle(A, C, D)))) + log(distance(C, F)) == log(distance(F, center(Circle(A, C, D)))) + log(distance(C, F)), log(distance(C, F)) + log(distance(C, center(Circle(A, C, D)))) == log(distance(C, F)) + log(distance(F, center(Circle(A, C, D))))
By anti_similar_triangle_basic_properties on D, center(Circle(A, C, D)), F, F, center(Circle(A, C, D)), D we get angle(D, center(Circle(A, C, D)), F) == 0 - angle(F, center(Circle(A, C, D)), D) mod 360, angle(center(Circle(A, C, D)), F, D) == 0 - angle(center(Circle(A, C, D)), D, F) mod 360, angle(F, D, center(Circle(A, C, D))) == 0 - angle(D, F, center(Circle(A, C, D))) mod 360, log(distance(D, center(Circle(A, C, D)))) + log(distance(D, center(Circle(A, C, D)))) == log(distance(F, center(Circle(A, C, D)))) + log(distance(F, center(Circle(A, C, D)))), log(distance(D, center(Circle(A, C, D)))) + log(distance(D, F)) == log(distance(F, center(Circle(A, C, D)))) + log(distance(D, F)), log(distance(D, F)) + log(distance(D, center(Circle(A, C, D)))) == log(distance(D, F)) + log(distance(F, center(Circle(A, C, D))))
By anti_similar_triangle_basic_properties on center(c), I, E, center(c), E, I we get angle(center(c), I, E) == 0 - angle(center(c), E, I) mod 360, angle(I, E, center(c)) == 0 - angle(E, I, center(c)) mod 360, angle(E, center(c), I) == 0 - angle(I, center(c), E) mod 360, log(distance(E, center(c))) + log(distance(E, I)) == log(distance(I, center(c))) + log(distance(E, I)), log(distance(E, I)) + log(distance(E, center(c))) == log(distance(E, I)) + log(distance(I, center(c))), log(distance(E, center(c))) + log(distance(E, center(c))) == log(distance(I, center(c))) + log(distance(I, center(c)))
By anti_similar_triangle_basic_properties on B, center(Circle(B, C, E)), F, F, center(Circle(B, C, E)), B we get angle(B, center(Circle(B, C, E)), F) == 0 - angle(F, center(Circle(B, C, E)), B) mod 360, angle(center(Circle(B, C, E)), F, B) == 0 - angle(center(Circle(B, C, E)), B, F) mod 360, angle(F, B, center(Circle(B, C, E))) == 0 - angle(B, F, center(Circle(B, C, E))) mod 360, log(distance(B, center(Circle(B, C, E)))) + log(distance(B, center(Circle(B, C, E)))) == log(distance(F, center(Circle(B, C, E)))) + log(distance(F, center(Circle(B, C, E)))), log(distance(B, center(Circle(B, C, E)))) + log(distance(B, F)) == log(distance(F, center(Circle(B, C, E)))) + log(distance(B, F)), log(distance(B, F)) + log(distance(B, center(Circle(B, C, E)))) == log(distance(B, F)) + log(distance(F, center(Circle(B, C, E))))
By anti_similar_triangle_basic_properties on center(c), E, D, center(c), D, E we get angle(center(c), E, D) == 0 - angle(center(c), D, E) mod 360, angle(E, D, center(c)) == 0 - angle(D, E, center(c)) mod 360, angle(D, center(c), E) == 0 - angle(E, center(c), D) mod 360, log(distance(D, center(c))) + log(distance(D, E)) == log(distance(E, center(c))) + log(distance(D, E)), log(distance(D, E)) + log(distance(D, center(c))) == log(distance(D, E)) + log(distance(E, center(c))), log(distance(D, center(c))) + log(distance(D, center(c))) == log(distance(E, center(c))) + log(distance(E, center(c)))
By concyclic_definition_1 on E, D, center(Circle(C, D, E)), center(c) we get Circle(D, E, center(Circle(C, D, E))) == Circle(D, center(c), center(Circle(C, D, E)))
By anti_similar_triangle_basic_properties on center(Circle(C, D, E)), E, G, center(Circle(C, D, E)), G, E we get angle(center(Circle(C, D, E)), E, G) == 0 - angle(center(Circle(C, D, E)), G, E) mod 360, angle(E, G, center(Circle(C, D, E))) == 0 - angle(G, E, center(Circle(C, D, E))) mod 360, angle(G, center(Circle(C, D, E)), E) == 0 - angle(E, center(Circle(C, D, E)), G) mod 360, log(distance(E, center(Circle(C, D, E)))) + log(distance(E, G)) == log(distance(G, center(Circle(C, D, E)))) + log(distance(E, G)), log(distance(E, G)) + log(distance(E, center(Circle(C, D, E)))) == log(distance(E, G)) + log(distance(G, center(Circle(C, D, E)))), log(distance(E, center(Circle(C, D, E)))) + log(distance(E, center(Circle(C, D, E)))) == log(distance(G, center(Circle(C, D, E)))) + log(distance(G, center(Circle(C, D, E))))
By concyclic_definition_1 on E, center(Circle(C, D, E)), center(c), D we get Circle(D, center(c), center(Circle(C, D, E))) == Circle(E, center(c), center(Circle(C, D, E)))
By anti_similar_triangle_basic_properties on C, center(Circle(C, D, E)), D, D, center(Circle(C, D, E)), C we get angle(C, center(Circle(C, D, E)), D) == 0 - angle(D, center(Circle(C, D, E)), C) mod 360, angle(center(Circle(C, D, E)), D, C) == 0 - angle(center(Circle(C, D, E)), C, D) mod 360, angle(D, C, center(Circle(C, D, E))) == 0 - angle(C, D, center(Circle(C, D, E))) mod 360, log(distance(C, center(Circle(C, D, E)))) + log(distance(C, center(Circle(C, D, E)))) == log(distance(D, center(Circle(C, D, E)))) + log(distance(D, center(Circle(C, D, E)))), log(distance(C, center(Circle(C, D, E)))) + log(distance(C, D)) == log(distance(D, center(Circle(C, D, E)))) + log(distance(C, D)), log(distance(C, D)) + log(distance(C, center(Circle(C, D, E)))) == log(distance(C, D)) + log(distance(D, center(Circle(C, D, E))))
By anti_similar_triangle_basic_properties on I, center(c), D, D, center(c), I we get angle(I, center(c), D) == 0 - angle(D, center(c), I) mod 360, angle(center(c), D, I) == 0 - angle(center(c), I, D) mod 360, angle(D, I, center(c)) == 0 - angle(I, D, center(c)) mod 360, log(distance(D, center(c))) + log(distance(D, center(c))) == log(distance(I, center(c))) + log(distance(I, center(c))), log(distance(D, center(c))) + log(distance(D, I)) == log(distance(I, center(c))) + log(distance(D, I)), log(distance(D, I)) + log(distance(D, center(c))) == log(distance(D, I)) + log(distance(I, center(c)))
By anti_similar_triangle_basic_properties on H, center(c), B, B, center(c), H we get angle(H, center(c), B) == 0 - angle(B, center(c), H) mod 360, angle(center(c), B, H) == 0 - angle(center(c), H, B) mod 360, angle(B, H, center(c)) == 0 - angle(H, B, center(c)) mod 360, log(distance(B, center(c))) + log(distance(B, center(c))) == log(distance(H, center(c))) + log(distance(H, center(c))), log(distance(B, center(c))) + log(distance(B, H)) == log(distance(H, center(c))) + log(distance(B, H)), log(distance(B, H)) + log(distance(B, center(c))) == log(distance(B, H)) + log(distance(H, center(c)))
By anti_similar_triangle_basic_properties on D, center(Circle(A, C, D)), C, C, center(Circle(A, C, D)), D we get angle(D, center(Circle(A, C, D)), C) == 0 - angle(C, center(Circle(A, C, D)), D) mod 360, angle(center(Circle(A, C, D)), C, D) == 0 - angle(center(Circle(A, C, D)), D, C) mod 360, angle(C, D, center(Circle(A, C, D))) == 0 - angle(D, C, center(Circle(A, C, D))) mod 360, log(distance(C, center(Circle(A, C, D)))) + log(distance(C, center(Circle(A, C, D)))) == log(distance(D, center(Circle(A, C, D)))) + log(distance(D, center(Circle(A, C, D)))), log(distance(C, center(Circle(A, C, D)))) + log(distance(C, D)) == log(distance(D, center(Circle(A, C, D)))) + log(distance(C, D)), log(distance(C, D)) + log(distance(C, center(Circle(A, C, D)))) == log(distance(C, D)) + log(distance(D, center(Circle(A, C, D))))
By concyclic_definition_1 on center(Circle(C, D, E)), center(c), D, E we get Circle(D, E, center(c)) == Circle(D, center(c), center(Circle(C, D, E)))
By anti_similar_triangle_basic_properties on center(c), D, B, center(c), B, D we get angle(center(c), D, B) == 0 - angle(center(c), B, D) mod 360, angle(D, B, center(c)) == 0 - angle(B, D, center(c)) mod 360, angle(B, center(c), D) == 0 - angle(D, center(c), B) mod 360, log(distance(B, center(c))) + log(distance(B, D)) == log(distance(D, center(c))) + log(distance(B, D)), log(distance(B, D)) + log(distance(B, center(c))) == log(distance(B, D)) + log(distance(D, center(c))), log(distance(B, center(c))) + log(distance(B, center(c))) == log(distance(D, center(c))) + log(distance(D, center(c)))
By anti_similar_triangle_basic_properties on center(c), D, A, center(c), A, D we get angle(center(c), D, A) == 0 - angle(center(c), A, D) mod 360, angle(D, A, center(c)) == 0 - angle(A, D, center(c)) mod 360, angle(A, center(c), D) == 0 - angle(D, center(c), A) mod 360, log(distance(A, center(c))) + log(distance(A, D)) == log(distance(D, center(c))) + log(distance(A, D)), log(distance(A, D)) + log(distance(A, center(c))) == log(distance(A, D)) + log(distance(D, center(c))), log(distance(A, center(c))) + log(distance(A, center(c))) == log(distance(D, center(c))) + log(distance(D, center(c)))
By anti_similar_triangle_basic_properties on F, center(Circle(A, C, D)), A, A, center(Circle(A, C, D)), F we get angle(F, center(Circle(A, C, D)), A) == 0 - angle(A, center(Circle(A, C, D)), F) mod 360, angle(center(Circle(A, C, D)), A, F) == 0 - angle(center(Circle(A, C, D)), F, A) mod 360, angle(A, F, center(Circle(A, C, D))) == 0 - angle(F, A, center(Circle(A, C, D))) mod 360, log(distance(A, center(Circle(A, C, D)))) + log(distance(A, center(Circle(A, C, D)))) == log(distance(F, center(Circle(A, C, D)))) + log(distance(F, center(Circle(A, C, D)))), log(distance(A, center(Circle(A, C, D)))) + log(distance(A, F)) == log(distance(F, center(Circle(A, C, D)))) + log(distance(A, F)), log(distance(A, F)) + log(distance(A, center(Circle(A, C, D)))) == log(distance(A, F)) + log(distance(F, center(Circle(A, C, D))))
By anti_similar_triangle_basic_properties on A, center(c), I, I, center(c), A we get angle(A, center(c), I) == 0 - angle(I, center(c), A) mod 360, angle(center(c), I, A) == 0 - angle(center(c), A, I) mod 360, angle(I, A, center(c)) == 0 - angle(A, I, center(c)) mod 360, log(distance(A, center(c))) + log(distance(A, center(c))) == log(distance(I, center(c))) + log(distance(I, center(c))), log(distance(A, center(c))) + log(distance(A, I)) == log(distance(I, center(c))) + log(distance(A, I)), log(distance(A, I)) + log(distance(A, center(c))) == log(distance(A, I)) + log(distance(I, center(c)))
By anti_similar_triangle_basic_properties on H, center(c), I, I, center(c), H we get angle(H, center(c), I) == 0 - angle(I, center(c), H) mod 360, angle(center(c), I, H) == 0 - angle(center(c), H, I) mod 360, angle(I, H, center(c)) == 0 - angle(H, I, center(c)) mod 360, log(distance(H, center(c))) + log(distance(H, center(c))) == log(distance(I, center(c))) + log(distance(I, center(c))), log(distance(H, center(c))) + log(distance(H, I)) == log(distance(I, center(c))) + log(distance(H, I)), log(distance(H, I)) + log(distance(H, center(c))) == log(distance(H, I)) + log(distance(I, center(c)))
By power_of_a_point_definition on center(Circle(B, C, E)), B, C, Circle(B, C, E) we get log(power_of_a_point(center(Circle(B, C, E)), Circle(B, C, E))) == log(distance(B, center(Circle(B, C, E)))) + log(distance(C, center(Circle(B, C, E))))
By power_of_a_point_definition on center(Circle(C, D, E)), G, C, Circle(C, D, E) we get log(power_of_a_point(center(Circle(C, D, E)), Circle(C, D, E))) == log(distance(G, center(Circle(C, D, E)))) + log(distance(C, center(Circle(C, D, E))))
By power_of_a_point_definition on center(c), A, B, c we get log(power_of_a_point(center(c), c)) == log(distance(A, center(c))) + log(distance(B, center(c)))
By power_of_a_point_definition on center(Circle(A, C, D)), C, A, Circle(A, C, D) we get log(power_of_a_point(center(Circle(A, C, D)), Circle(A, C, D))) == log(distance(C, center(Circle(A, C, D)))) + log(distance(A, center(Circle(A, C, D))))
