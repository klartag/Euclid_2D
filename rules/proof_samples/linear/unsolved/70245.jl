Assumptions:
A, B, C, D, E, F, G, H, I, J: Point
f, g, h, i: Line
c, d: Circle
distinct(A, B, C, D, E, F, G, H, I, J)
distinct(f, g, h, i)
distinct(c, d)
f == Line(B, C)
g == Line(A, C)
h == internal_angle_bisector(B, A, C)
i == internal_angle_bisector(A, B, C)
D == line_intersection(h, i)
E == projection(D, f)
F == projection(D, g)
c == Circle(A, E, F)
G in f, c
H == center(c)
I == line_intersection(f, h)
d == Circle(F, G, I)
J in h, d

Embedding:
C := {"x": "2.62918116333623697045140943373553454875946044921875", "y": "-6.7850323848387432690287823788821697235107421875"}
B := {"x": "-2.41313698377224117308514905744232237339019775390625", "y": "2.507082800153061175052471298840828239917755126953125"}
A := {"x": "-6.3712046484541584590033380663953721523284912109375", "y": "-2.5892940784099369722071060095913708209991455078125"}
i := {"point": {"x": "-2.41313698377224117308514905744232237339019775390625", "y": "2.507082800153061175052471298840828239917755126953125"}, "direction": {"x": "-0.13643454002016489354579703125589508615147904304134696402422852335285851748747621651985872286447613077851778421384314210877934304521335472781947734704099993585569934434412009380468879086927775588651898356869097724821604838208138699965745483596546327202506436985062061575593779845565143413843062661967385355637876696375891512977401003696641819944053415914584390691276873201987055068835149291000891817652535217136367851634395692755965051472443968127537092388467558788833003521246917455478194819442856246218005056606843853566941452808788755119154956669928087933261633440790273824756977887312169414394804715226985506824823132721164797636039957526427430346585429515101855940254796083228903381621396258904937414942078832929324341986258731094371538786559802447809304639091459023819573286602051799544401977592540655405177312022843312183242656401095596156484603597380899880044772097940527962537560908476509267337873112232005907817950132165558134003680477873229674207398595841528932326648855521865070286920883529415844441669190767710250784796947362859466046012389964593709105882775830037515930528983691992854293704877714329129277089781222320660032714895346711146191842922178468281863894722098064523457644404043835441111271650685184017493915354431494638450415675396108376575173123217399382431200974509516820843250133469216330145810521626151223939155887550826862776906435262426757190460960705900105178030401625265475709626515211652712862053356024320423422758735197982846535734036458273822381456755854191175620290223644631912060189827470152877662245661600452194575112824388266473286908193652056176759531775658203012166525384955932342269909569691248470760904282349610515967691490538674559153369328768252490764631585235201638252021974322702534127498784037505598586116392320394004108465555430233706937160528798223032037374040540265561212974672733977456184155649997702853472142818902435545878365745071046748688560392273024036094533621075066637127203031206127622300867280019398262163676892515447679713941494239155130557", "y": "-1.6687178480606859511516930663591626485115623499862194078556893710035067227921071913011483911746112085591570812220425205948483577494981275707336296576986179262004930725337458908935921192581563580938675683301543485027461101003344585889803917524676879959592272709015610555164528742032973995858007080175280163703626783791185580746956499243264603671754912640884556956414681901333841297468604962496319340258821792247652522811500771987502314033771648035692111969736315239009894546673944301544533675120236586007609625849512183958545773470597789768550467174859949875713139681831077988828338776223112797665469858455213036658772196357334919472333809630165678674829724397135946155490232357512115800447136556724402618568416032570196163129562789842016040460843259381829368061210454643130119665611012590507739792643211825354356221123590979129504608705165404951030201361496072652354742276793570993848488799057601644609175832623378966933265956187235747329758031302557715779467293839399245276266316322103486097081710022371261542840376429472056353937841671725095490541899325491924829653398686722313204224360859860898775438136360466176316652770755164286078322354545255931128026326579220744528752607961564273481663414259479697098958234521332495581727390108540341003494427017114357918236005086639105293859660021551817596270237508598307328821963025564268265968028679913972892584824340857423540421445593951760696801547699486341639369201257659362458757826765176639438532605732627068078103855360017388079548198035772921799041807060975270139861728154707951024806710400068221827018810851644582951757292191026481196344403718067567955408070122924444492509231866444440223008337434371271636647325692536881781527707842198832450132620251361755675252282466609157674445853905141430728108742349510903465125602307412936405814710824864214686211312004515185409597197037577462066069473309723119459204284166117048450219818713948359089714339061091669711931281220437650466850302537324466169327660056563871566126904200220534946917834868441361875"}}
h := {"point": {"x": "-6.3712046484541584590033380663953721523284912109375", "y": "-2.5892940784099369722071060095913708209991455078125"}, "direction": {"x": "1.5197367272355997240145075775039453412590571172000413481914848651952500054599412865322252476689759623141142461049359501033315597790902144078121246100992067709768011494170447804301767138276033028518811365676058949518775709749787824722882863345541233445531787443927704456973058381093524488050354499715604402283595574595906671285411233940099969215278109597815744998495431204600033628142500281408688069465973214607417526105672388761545771903303680285817556577850038097325438515168941284348477995862567297608890505533490544814638527578326738679954548825781789121278068610014543552517734024960706963946272638280474631802141199514609117377558684226783030047962532985586496363353502287684961191523442072952181484238706671154601342712825164505210466436008726436779875544017073981068154004327090100146093513038281798309306762211422237842744734357093780027341132072252402572970614037654699501499769408172490591359547463226503254275038428738907046654360449095483928035205898640952332987310865821898084108963118697459034996228702610446688475776765533582382361579957843203422164489898652010342346261287792914334021079488934827494821513987234588564130994790279173580394298575226167388182773437122631235422359514628629819577758364648690882064561013102249792895939884143482419401007755573259289757825456664082870790440005901651102380108642366500195487069354696970581625843382191172137070271263062699786462241399291270576474820767730322121808739062203818545328402428840482140559654199813980939264621305007102795533924646151925620855183243646026054054296939142875632037587313873480975521960620536987644135746648395621332836291901845776523229103486142312024267587509132350165680165753935583392924174786163862018592722951742924701700572191335360141921312434814470546630905622070038575457917956922460955684376673678308231911912496592093909191794565870464144597249954536339949343967687927094103048157023467813746858141874795311391141076038128679269156107918429355033643591361053637402073350194113286722754480990329182778948", "y": "0.36726805002954025971746331454733942667421576691488678777545143947282228585236059729829805345220735818555496163797804433958531954442848961415069029421790679408772504342344270899510713174528460381849587957480815510766056970145703120735808138850207985914330550208042824284715558958872725007031225496569773784844831213527356119703843678268433751741534502899355838746911277412112461076344036911218685700532003092817695275107211998381873877923877993458155524861141821100227189693435282226723014832649356847106379659337979292773530277674530413184974052680161876826567490285287373103407034586554701292442948023821421343108962372442433535114923069480708671175179753749270342765242583784995030266604302965975954901847460661601514911521913114208493483305173006623231002057802465217284449918463888973272707765940491253875687914406224305287332321217395518475015380681424539754835747727391364655206544405908691989627697907094038855524508277202457013372946920624268200652239654962221286528157831088897523096629755527273331792023996578114716987894610563638169202812063878945300859199917770244632464009930517054820872434570788254742855798433869640447646529803444830430200916439060569201215505777121850592379437383620156945546497553464361192977575092755307294173527974223576972294988369178933367230694442920135156812928671898307911315612785965890897694803233897341852372222604350172878242568502864170420474978743533453941268866675012038243764458062321698369232036808971312796038977033314406246284931196937475931993514680058460058537591636874570502314951441989989802464279200171434490476406733372747904394921968585189518722029502680647759116300289522076832474365290597570148752998211502972938632261516520769246261936541250459105207555916399793699483233758294283818810905780723009100086253202924832819005095158486908085639381584571101985903386662433191669261821301916219510829801451088751796808166138049550899692817800064448962638108231467446243262653948758729205876701101252925244740350275159220071717196548683945691576"}}
g := {"point": {"x": "-6.3712046484541584590033380663953721523284912109375", "y": "-2.5892940784099369722071060095913708209991455078125"}, "direction": {"x": "9.00038581179039542945474750013090670108795166015625", "y": "-4.1957383064288062968216763692907989025115966796875"}}
f := {"point": {"x": "-2.41313698377224117308514905744232237339019775390625", "y": "2.507082800153061175052471298840828239917755126953125"}, "direction": {"x": "5.042318147108478143536558491177856922149658203125", "y": "-9.292115184991804444081253677722997963428497314453125"}}
D := {"x": "-2.7584339754659297917998081616606384590491136913685176664771668322536373524500381573900287798872819025167123219373510462410839697926790751493675634819656673961126135842206144000617595404396532764252493082541808821980349424170345652778831198968142765243683546065010174527362290112999908754198364121406048858395388575363343643796397016030924596414166279724867512617517927379718190790107309220178381084334579321261436263865664865253668961605967226833047581578601870523877446707103140642899305596694427477546035483064078577279418294911732743576108377312822427068899063514391602502974178606152230011371990706146901710387001401729027406028618074536577823442487005564154274979577398231660355892903714282809614794056923615293176375387983759974662755220623308289535380357675131277199478575368835800537974637503964989314597450674841944575579500617218890520399964653238490444618503606460168798029926049862349952066769036004340636816575958383503842574262953684970491612425938817216816707728592522627744281670419306462898359520078717869205394863588196883587109145548123468828012196719512864229446662524811160301617907829118212226036323079799491854613789625857278979238657893014711688132960086693062734427274094194155392596070230709609083986607634835026544288442704229499960617776664953312504652757942512317732019677467687582797241844758701800696787966893656970923957231441195186188191302651414198964306052680690056454090835111236897609935713199648770165627337189430002518389181348048602081483918045876982757288017027379850744677019249045594326680510917183935358224668144448991474030303017681757607763708343930174280930598064487282341035276748912214848889886770621116288528482556886987180037493819224742311649010592227471214390606606445501252522678471872311630678505228185998863939322674872667622391997151377990231494482558096438189516355738649971175614385608437414185044883451107236768494585165472348697705595553470187452662684511082474627220672396894980488964360400486945050875177758896167294244388060916327444759", "y": "-1.716211776394478310372151639810552674143697358036962636264832705609980876255927079805814887885848741532207903212412236151395015598525209581823935835545631337899948046742662915583220082968225391786605733926170389816228817157733747465129934219181975813153704535766129388707694633200062618923883763362652752029182997671042754869328341612244982312269757460500753006243931277915687690394907475334797392467599347110009548080783285163610244569451249553222497390421731936981585321110848469715357542074766421539548572444664181292958421657547303593305023193496885914396556020715635109262643774022512896824847895023353660572807824875366825312276651260381523603695645186857231559917747570833078481411557335304627695226827128862292611551229739899060519827757164234581814048320632260865906285353020486072030425462207493026170960389739525522334259072587620949047173590706272763975966846625470884475137633768941644587117570395367452456449820422315544944229355143572367661905717054303645302629121462764300159506784128353913168539646785574577405202227940420810765459244622785891098655875891351084275696303720414983659850197393051850071973417471037152848084721655593676295079865545563617931275434895694781677918281014970790195063464675277835130703418875037064891100215381904344176467812070265730255633038382446134902352219219874357091995915497166801077570286704402127613298739096553546745387585946560138386267136484286328731785140015745395993502091907995315627542819288295370921266910575142410899062532442751359299905576658890149907125209768134842870474350624978153392068753580810516224635130357970162565146304714459328319834770387800073850019840982227959731216546476128563885920148735109378335188678543340649629462935188920426457994119824262921030697317154423810689451379581686280630205098465250016724592518271434025873290497279761469504677918612520946438617900125453800093609744469054735996061325555527504447135779581229045375538757497497572777195767965460733213162664899148124935559689945001986914701424339635270825"}
F := {"x": "-3.7377393801914679113199408785299188275079531178775416184043712335636543085961023798949916455809171126247288670733358589041669296000721526682840171165366279907350639952056868499721615713133390791908236136275285267704690119174652911006243208619770050499565849115116671722254822428594533356813639139399668184671007431937593525080742751703856980579703363733956553761254355235846114746818624098825743962492444731589270063206184165416973285439362496615625853748052516365210593348764323789999581585146618168918689247940721051660071762632052131518606028281084240281046416695011893999581942221069517254844341882497920317324157443392098514755359965181804081418586563564584750935987043663412352036812561445552451599857602017037097845644017307415681334029358569849747164553302460859258229381595580810634839107810366010804245876647441912648172461123903831953931664773702252227423960422829716931275513417846320382210215956707485330849381501407678533993012895159098018375589316589840139564123962093755236498434012048334988990424212782410664445435319678972954263224546754823889254348696199673504750864428834194375399895303388009175574204642222746967455093334446194118084778032388396556256817703089529798294964776240011139467564004233994815398525000523556993411932665891706643914404482853106896252735862541101135147280368884002784778998633781150395592124952352122018087359938022895403364178074188140267892330095284679680489696090965373039421151572758966448465242715287980056105825945736519502612475426520147563426643663510651112035116502493006247555626601432746652963079958393094277624002922970920770773965669444663577477846431447855240376797758069998564197571568458427478206586058228573102191137723270070755510450731730544450909155060606351140731715438065307071707006825340116780686332782822203542496857065408943247624654035302142042123942890073997256837777833415420805496823776824619096796094765515648306666810554815815969833559791350443520765414947043199725603419190403762824230650403925239428714232189866119905856", "y": "-3.8169449075805148118606533100667307809690695313211761510811621853848936075014709023888490346104435226718436356566670280903536282498947154289116801665007826570703995079080859881062928975073261353714689396463874251081710921712034680322133306815065867194617827938960830083993707422498828169589818665508678284110077850387776124008166280898146715016633500723351784261368608025687331522415311114079668974767739681044581292775210771461241938498720941288649587732814939349397530434547968960193392107683152150055146810076285785993949889616319921535450800996428762533587039041396287741965864267397832719702201081250842072788592355321002578465091057626330837822844081219691158182717806994909849522224384033263393763699835945613968272391268316812339334732571947501506562151882119119674718743638834886888895048959945476929567669062373313864845818287406733574033929329035044367278753524393727074598224290862601402632162312657824058287535576226825534511866628078666790294401298083546307454828784869737554492853965368710405157217045042469926741382047204740036306584408822032726906307204737872932469796003241740918656142737234874130449366990816210872753286287675860683179699218612946371339104437806013649737855536675680289705994054160141739724045466591003161933822045968370220265200179583286421468855380483214323133741460629724432027569417996740016856593698651431564558848649644295265984095710436789968913481182735720536252901141870474627577888867490516061036429670564287136101330068788503968342812662073040186363809354848100702385069389210632168719401578901299008830957717565288501077176348450813690334364462940807611415179300927411741531416779216409392212145474491127322660957585799411769064843134209655200775654643997545810927185122930726653885776175696402144334459843448905944896048709925268491354834130876973249750543517550380123294636092109904327341864632103054999453011593721782556745429477879173647032297537421602892365931451858240194254644472247896885500888151734793544579000222446879064150917080147654600638"}
E := {"x": "-0.72126095826478996720543729685235177153066353977450371593179880913823850057639900790502923314167923421520344865645334659259438734596991953834574815896664457868969426275352311526181980694875639668642214511425537412181711825294413871997268733631478993838790552943998447493387678275073095664503213277687558309250665332249942703397784150318527956557329417528958564698802700855874136230995680921660306423700733414863453796848161908915585885883695405897593677693890250836943647442189631715385183138837088954408714670571461554689365946259612043058345623370444494881503551212906492276726174918432705951326220113117713724982345003591063501334426728421701187052631965088235591993774757897967762592865340816801508244385995210303742583549411923230573253019642471613694820869348217658505560041064279448286970985279712919935859935946059357762476661491429605144747774963460054295056810904006389983495633375687515602381638777861321133500322249172174790051277419878714555749716572819137670706687514408528525285875260107077532820277690758289002161194276583670133852113735116359645928691607032535737851916452533525457929877893753578687858255195465414260258072263963514096707820077553285715975904353986826096147001657116014147045909301081013621510137331217022706707416550356712441093564086102686563230011652186878375725419780990881895016780793224756708075723871607177898117520139933566667929819945874942254078993982300237715969720441092141168641750751241137050798218086070892464734211433808234630370963791808361675294748216397177003807958158723276263794165127799935763574766678357984717835268731919155950107104739009387495061591193824146348313905379906798658920743683994670394079415200321689452559431365548975786285618342252115847112070934121966751636185415267239463643494356059309103484727497832216134051084356930258239992335792640564163047685662477227574069193903233915312365497372018548017332974308410436745665774375425764512165281007142502428306356266475197813331857348531659267425345059969837914379752889980342241158", "y": "-0.61075039661907262009504536072240447035982444938443205725408310734431507916538594234198203820163593444658253227866881517409941582669041619574484492081530865380073828697818892889582412968490750363282829123276163471005348961066413014429209842415294828846114789562252196022663181845291389827032010414517326710906963758740343858022465299518718197679165841468873556664543975577332524621851780587123062425318640684953134700787544802522063300940067477477273883378108425345570727980894386817297439967922015703656632588361748290072769704575044909412875790296416318586532628564642662577163899239315258796272125028325658327671099640851692086001484351319407493121664975651052551987703286090740449369152507206474363977434954480286261685489521453383585478066129036743828420982205456995790374513139543826942355189496226231264299435939624154370444627297551228655711655374293070981333542701765827565672273086231912985481179443879976631102829153059453479838627353441663633126834015812103620647966860741191024016056103002045933278340048204581301204531312415835694447469223731227931932789372601482566065328039597558370007856455986086474998283908911252284849368508944687906226424479395417628460822571307571124749323008186473342816084044734715544667027548734168450720174743511710665287094991732199576531542556268824185589486246420889404758530954494341230202800656781622779134001548208815405420745226010155135113821431838441071598451272433474498988464153402128930798106496683367769745219680691264193034129123555290949508308849867628456080895350714084335358149880593746140309078702944204960263461163553063291412235575489424274323798887368096236715219723751757204840864079176345845822119711368002234383017787545576365166818565831915243206973825159262175923531709725448635613517653540016229485233257310661528093549862262404982661071011918239432139175730830068039110617189900127012029549374893225989833239784224023422337264529362074649295164486376808507844413507984265407381580787951918218702807447185221416370501743619603140688"}
c := {"center": {"x": "-3.872638028257565126894389661780872379015569354644264857269406819035726726873931205852923520862868432499041764507317500644643946828351747494125965086990598233144362595123222368143376388942357444652297389093597820863649623696913563946695957758210781722878182437824382760202951705607698485285063585961634255528745043865975993544024278001798775473764852142109070756699266282501752693993220969183253236830953336026546830375375828067628567610378602571408517711055844539658499426144117252585764455288469970445285271080814162527394719674100712471615544604319458700606540722259376108675895064694332115461268239284388238502644508036289134110909272390558048113918416084866803416331583075956155754442166430061170735333343567627075039617173998039288098852733800896930135824542684866973021257031814394573344757529640819401522762362416062919860742060857365696426633750929341867721967763943448001682213697961884649893192015168198077959148927970683347869337672413619985273413032525062369485556852120522207735749641544056176984612484612868032695368945703118249697865701007726846706004682013696167874974961228113170196645892701183729948440621015984649569231380235507158112183752166753771772396531610520802309079537933177487030058315075049435792333084338849232621393330238397291392840256458157170741227175397700489222756442111164790538267861167867069209030494282092498609533765241044519275414300241271597886407448398325784490441588614687383842188407771593947232048254908994227459840917237683499557491563875536127683840992595210277559835434292285271942264498444626984989124208565483317548747453662325570270605815016371767041224536113357292123139703969172998268249645255333840821075393638314429397580069840220296126128435863839560996029673341545606910079633677232481695260876967248815902797700198588299986670590113933411094548065804550384412218056301139861730880978829813277914379914705231830991737602820103170287845957051402926773862668879551456183682121656523466153078146880985217111801797496860538342791224480994046781", "y": "-0.66793710953361913395872730896180819600397455842799821068346538697621567161572017285578233701618961333636527847969844822745034283801997473623648634334225314942969487726797298178733107336532186319015524114616835599649062113288758779018816509217881605763102427685195673814399094630893191244429867202993663102801820217911835041846096917875906904660586264701512360650390277796627414547235821616404601500784522128469442472170350990857391866667970048924744390544464264732533337189722871459746015991479567366247718004696799356769746925827845549667897219380227231546653945963146766983670488219267916039524324676541693161882626388930859762828559491375601130043021692188330538058964921084031762058429829569289184688264600770907611763578170827631938051882191868445061408939016479662904272048468473040665346496397287183114591837929736303873790809917068362204429047881414566505981535013576474608023839379502331476784609052366599011755744433177060127918455780218743448998301144713633733327703182887742772772862645802645462468483216233376277498310216554237471859270820813951863271570962631487297015150445361932829971349812913967314270607305954491400847290863874007452573395268607637306233678535383239374174112957178220065715254244191218376481519235502699923109734677856737318786528939906959247865785959620423026919370132827888764497856853110331597330563295122270604800436944302125078471464278291776436078355539228021295225991529157010013218033797192947700973462808108591196145912222327247577142244722367298783895981255642514382708356915023726366334250347748157987126501183131102010679123529030324508963957793898420088542289688604575647474354637913020358844139171048962604378568992941424991075517682641085902073089102387618481261062843129706506061839680514906742855576223648526020639976771713276824673854926720832893541030717944226455650863517160471581594536533296361994743675715798846983203025543862197226357615320181106966330263147341329342602514246713771447418246740917308998769404481255899288234010832109353784348"}, "radius_squared": "9.9344477574102192688530059283208893755621062920424887221028120923905183193643340709666248141134351274955863068055732516660409485255614352096803015817107213803883928795878574241382964754771607976397932056735195410785839865758856463917667611533425807650507225649033242229949121259726105963091498747111659465743143143237533556408609457767505919445921940563352935559306805421128078517500878474719626502490048755302852369128261682307513407530221610115330227607781106658115182123206416813743358764117818483985877674538969862086358077264281475187549687317397972001744810673338670840116968037302893850233840965479738169537535382112266684063720103423157833640755095770819336691451144456687728542492167875299416162676343399707205500401114175511137520868718813891392092256715627870957768038833540359797548939356570529932069421741034679861683466662513843321305320660061347984363748905433348234868145664529818194673655435594459826008033051726184168683742275561039618910642672026105511772286381409411699600764252944487116047442475143599032871824719125673726367424838816182333889473938886462045716999083930433181592369494436256455643928280661286744170884119528033615404989479602595728050679727336721183094129642168182810098595370105629136118073403544811582031119761381941615239730528885162903287334748438532888341578766514757506562756894408118194107138913203342185135360464122342801456499848348245715020060759679752699805940805093087803407398214651083588119150711128878465451437969556697291309841568655746382441634085682011277698233271113546248493503891427338755343329379585791375551831223595232212786898543009022328215467541530206888665430578507860618441860557767327921485830706742625063994413981509287190836366492658376156814318607923601085495710942065062347486742077106804690414160389987316937993114603660623695347573789594195610265328935195285591480124939096409800157315165311329035985909930974040569927157114098617312250795110138937674345336646177294890404480362875544868239404831579697940211625487024214607906"}
I := {"x": "-0.42711403692092927217764579410250606929412961882477120938550551972325348722967562572912578170469847884357965287545213364300190836522116727963175842206671204055834154742241705473721212839770909672525595360390843774271490751959724431149627256525649755161743776024327335086257419283321597262568041573980610647925384925894436264146674214754728862696557062094778840429547851250800619039249950081909063831523176916623209000525340591348422697419030590950056577419604493190043329704318019231976084265390947737048072737988048800126816455808137001245384830990513652463344974225634943798111402847755957746255999687127649000531455036218205287690231742890285184050910377255885339461651050513307756856873070575579902398508227484083823237200383768098181527219951787572779495090345717309687306991149034189013832892347716700701167718321666288685879265944204456446322435906160224603080699274252240000673863969756626570055567019426715713899171515544400100000460605694454522229444444274990385653027906998700074830871195493211756752415565926866291540676923332090322021272239932446218722740529168313730126845681208868822414214019429254027289466766925769769146578299616386840004734300489145331490869586868569102744543423332344293047748412464383236376967174927330498474402134709676173265976610481593237308031035855790789571499830642409077567060059907916896376717740519225060304680392332637034956907399748256850192196631474517822831377757036754429938095215794486327806457533356111614828042820816422319647287665338576011815382495797431559526831864389700441369496928274286838270029127961150327505948377712956801928704688689747640708794731473946950025037561378175686131207405654867378046137681098032288803718877222300003903765499495408295793528227717268003011481143241480644290538159616193455683051218385253632065233573777889380095651456708373698751016329865469209723272803281113214610804660376804737487439136824560231968036539346443680804904884009566714989370370026459571335107081348979664651019432344498507137882769103020432285", "y": "-1.1528120029469598946211405732173209949957085749269615951256994102012217785276246390276835067149310291790992829869986379333713306706044193058404522522321855657105238560348195352936338966120536347804911221727579965546850251802955938673944242308324739812573063127153132942987091024041263001634985361004870451570160029420954803819677493252138296930944605735105549731000010582656477858942961634615567145494066703254430343459246161930229895422375605270828897666770065064538662782418399347566274669671580751160192295533990159957428719124849580446991181534056163820915621092530443841193850540643127296669455036175959005471148876717521558758110016778350697694872305440192446251741050738809518459701123077811661091180238727718417820369156935605096579421658603444030269737012630247813862675028478814699895758974953324474936792267106311301115035375654767757039676029853099493438902778437192130827201151427854351001052637813540235668421616892738639809764678182344200332078647621852911031258154492637354071639386994019363393371566542803101732715935691873951279285645892043906918915204635192045167519405745241401613811140341153985302204499743020368731982781633719780461514365366394560038913630283083467111326071644817978025402562416460808919865539018022362873499426552628724491793935088244181416279245072003318325262918464313653764939980515140275779337981170959526398289807499018218724312773215354665804114123371201055178887059219021858254763204016772744541234198382589334221167760994521101323997888491414613804611188372119824538956679913399136107206932610530141437945518844190753282496745559129184066126542186910953137863930612658511905882660170346838196811404060044506973383462237890101903462613254238045099000873995987926759367744278715383179789119069579162365440932243497879859162228676319810831405034339100894330846445927648635035021419643819335222150715636439107461628239578299171501781551360088982449651759093948935159452347803831456061454391547995246151603783386732620326238120785835267751878082664070816422"}
G := {"x": "-2.1070600899234954341735692218219178233598052541585927981794152478064813589604532423841965180501031517917728018114058303115960948698143275607273550037922408237162484117449118417637178512093142198044073313133143025971445798101876897453550029871038505562040703882969867452927922456124194127314175002046373743850245447674698319378996045030864045118458968513901994627828640272105899410897822824357093813862261512818043926127614610529404488829352219187999459035149518404782792720350145111997803036559925625054811965923616970166721815016725074737217284878384439567250407072683333624974999651218575403224756352919457924907921653556623098291928676969238577186369466194040557521556675077464606282883444848000325125061002310498411702774384094993393120383039386654670860263837271845407289859532764032527957297515005230276352370291993227467678529988352784681114684355223593368916114386009518285443550938423592886949730334064526892903889277525011015628364238948524243974715854055180355502199978944188690192918685813943301976775265217076510624273713494145184773612132307322945567648703147381212588851392488927073563388887204639510289297429275266909570400483332066971737923146410767299225796876861672159810558652477403020016267711511318738582099750229664735512034684957034983949993736545248835509747910334054005923678322096939617135300102376796297329505889446166482115864038946111675179244075433315675800606984444049931021294138084123020106894244447979453460603268476972521202017436616313225263511582879861958994335673704996517286795278040013813392548781889520163379424481833864497110716556842124412537965546554056930798554092255166008973656943950888937928009755079900214404959017691612647482156224005718301870260964832612024140742338066321647096875471363074407278448760297631506417710474110633640509352393033175455307394766577195258569196509992418535986584698143428604064065642007157173878710162914073047222320922829365199761493958186799497809783583678815015182977512065418314978150188199581057090443819170986266025", "y": "1.9430363298330541758041749800897536788026878534742468193786591380966716231514288805040852113362381720782897553947142650739869547690238815642167297447397635349145495754126905159813632917706223436680663823099317863011286207682336383760615536457374568159800862795105686214562859745673115440560562036601878612705822842154770571430765312059162572667052815000129840442178279190092151005835786853098059629198099938568461818332624307063988330721966178501235446717055014534983929624538889080288202634690502934801415023909073160873256272766608134374918282299853276551440603656276163485472044979271355898434358193217633597432023385515564406109580362858313928674340890363734721285213275682711244828682785728943600369725483097062872359392692096720462026205810072420249649073384456505102022650434315435573139492552601309374104186536731229444704865690622313362557047067842453151530423507535606197282565953428077912812704816241952980314622832993266233063573808460402395449069164365130613007381467991134612299063463574421706959097687849647130644350771537974475269556914433960682623701208134013921056765906212468042036523000619212474434732215003432478405757538089088485366487718263567090342786939810109704485503955144654919441848884215810023458199656267152655869119111574099535543917996697587969013297230894591003066645696461326245104529331443241396166007696035146215366208035561031010183937778586386362295949489531553497790927270633380612552343143367203195335251077807197664172095284504411309706118551373335691561332104267549572603752238846238100284337714397787942665210093061563288956389629848797941217475366651964006243545697712273703683380154626516774103312607940066264636611952448831032016538851210215717680585362618099060480011963495257414464398065519499230400033110924763742359894111448986268441009302104326379997368435575932206578527365371247812635113973398510019889523321518599888952979475650859983790255504008972347298850339129623605391939236149858029075323617910196234853758278348632144967527317952452245035"}
d := {"center": {"x": "-3.4477642207137998572253003658685167948839226992722108309340901549601002223075972695745067166226568810175706390955276703743347638474387428179433847156234870206866318738140562569879236312378896716827748666772199883769096309901337094886224663757908888641403641182105606228461542557688033628118570799867718421521134253050264638209001842812725658407045190383828763428339718524231415240317583088992492457626629411298300209836594916934610887681807795658360760535509991657550599966655758343772824758599981408790134911006944056881453365301843288343787987983161471776034828225709822434376888404260315016186550054210600121548534105802024344915475062315552351945353241046977331724156438792471309540774581246176398686037343001526559516569110880965218630575325022723421347886821322055859104731843239003374113026870648211548261188191803775776861979762300619679048827317201924885322742681600017853788702421127881418952140010841047555605435709424465241409397420607623799510708007124295728109841125019349074741905756013043857439410219150917436573752956965860776139593945020133846210362670886357330552843554252948143584853018823505485727899323117709306697061976476465500744836257859562648981345958242641103427351469684428797438181827775048511444797827777522546612594888191714399315536030462500518395269218839650861733338701530853309799076977007686579869582063685858844127064960648883831284743500498328879846994648834813036421656831315152606559574284139195956984551152806630661785396273159999385090450444515265675892191886312207294089752834533818897752799128715308597380191942418614006752998912854131049449317534425796724404721249438573048904232389492582267351740472359990042338127573224594821270960798915996247764113880113813879530595010432294323833205025535262375139914184417686150875048106435230621296045950406430448891122548287215551202269813381390011236167396304915511963103257845839592879382913182346722617706224109738189252302036468544301584351967765790603958642633939794579986794280130833153275515638330811451984", "y": "-0.78822099421690054169153256415840946712500623573830985633332983596093962408160892408285998710642228106419103540359217678386031453758607454712187826138967777884649474459738660415065546730919606014763357788527519765228725574297398321744025245796147027629731561861358959178124302228173281670868361868028348493563642516143214823281132949914425078988118925558230799587456993737195569201459536720580021844265915897867749771591119695730429578973377836307660531992438603074887847428888084417484068434518897236846773564364538180259412063128816428273437820000543725145624017238198098077177311265837792566307880532959733952713850430718388325180625381712882994638985601659740044577401748623417112880225952116192709350338374193752531103454665169396557189038087588566576792127653541712096978454536574753226510732461015163868117340448744924209970810060731604189083985831096161550547626430065823249805663209711697371466915853982602860390674358692721152810214764134097602359571971126214975443242696942977903814273360708883105881366144229444576332764082993008011258643179847893448242816118071313458920577253624610852139446883579015378953726613192121795537206163345536899569590728824548012485160518022259662522686324182217303489709917239673610256784487580560562076624486254164325461258048954557895217966984564638514807610647290965299178822606123752562775674511435574589451173373408394698115453168053679466846619602004274292502105450443103348569656016808556130982342889933653712064173325563835043749293881092005873807467142531769235526557704942898669408008271632399024426200721682348889231366289447729812026823988266199763660652137234212860963738721870177688252174086489920284232623643362878495394956034440846407211305028242673593263570239833835057156281048293311520979125996171071800406477817962759697154682687688674872358311175781088615333369709107796288935313149293758496461267959702643597530236837056131095413095945371786105030158292430910666700010545339152311445275456764598904852808878496568184320728342415654703052"}, "radius_squared": "9.2572541364947050605695271894207052211935844044680937110224877567508549834072834709244476963145105208880603222226998794279899903852092377003064461416810754331852479807838933695607999146098167529505833800546798591533643411115227899807855582419486927880745432897647094574185243306576069148180941908158586248265750964675422023230425132786408491207509420312674758611793754058546772249447692397614090165792409094357372225507540305304065333812249872000299263211116576902319462064591098095132630444455408118910394397494987899138076876483469234454313824111072365076717807444058926375097824423444972698353046445400855001080350585110799589476729688988453842765728206322327184977653927140683474083542058046694371921834641630354495044513649051178535135122059253832603482443030896333572688068368475585927760145761050102149968420802971089491157379558066189214462840033383153970590280539269114071028203921401051786039364727569503606599889405785578764311376263755389711306900779749266278938953796386733130567501969164990249988304371915583895139614889681491913208759806911205304182541810264174385113026051155963362986350562928110477136460804680674848160993423087295742926525815881929713930272860990759325765100696242807716248430349462745915192810329897045723975959643139093867641974267482917790654045767506414091892878286822842127315878593348617278074312790197825172319332015611388417516058013994170491371958475502130046196366956309705616573314684112815792719070077770512750178969357486719008413194560584564579114427781882845416574945779672212691278522930262851095673567490628436144589379338305298356129889086082701557290008031983881480292475985579031562735451800156386153877735739386181771341490368244179887599134923425155580469433272621827521649306069890244059687936840721463875613901701776956319326449257814878195590268069022061653604032448601370530318930906789541432905723421408263035005404005555255703349527811544212579160559832485758668170472564242119648821827707608461388015028133433983071507958449228034024817"}
J := {"x": "-5.9685631176412667958111163790734994179341004125883886300268305130919010238149817412531946628564924175123606437810473495551064732134783876615015253737938735806623986095465653413305017705798693409834079863141485091306501352485729542329861340212053238167059399041948614639067470498432290810219872669307213401107588946016920688819622766979792440444921287490612239785263009451888962759793396570501096014593259387717307393512406999109526916262310172515138937120159168738434929410447888534715845340038305463957861677445967575876679904365940952961851602198729615132549550527331757817882545109008707999532708051788337218855522784372864023267713687643233658093475707306941894994138093326522855067227852417318068084241784304532205755041514399651950511375221271656493879828940655856163841329652982583758547519665040649403862706076454502589420755991064292961627772929836509670933700489342420365961173169008643785142431712386679149327274082858589811113154772987440657719487407242018001574272768486036370352733768820081232533696904143932072159853835480073598829652817299455483293266603852790217521818158585311245514648342124157081742924401025679943098544919270046017110008759322274341895321822254197918426797806950654285078194526085179356293892663609411379289299389959692828930916291042490368260414755303602257117744539336591429332973372451296716065098571065348112263698658405330734613104600967884762768794804374655909278578338372593643701854923697581835179317310652339424220476971718732813054064173692809373993127158936278974037668495962867380095137105393427824896225704711774010424621181762340920240328817558945817105914596632404580199784710154681940437632847902484796105400461813532553211109793358150057124300967570300013415582025465751756977486119556398133280621685041723188530314419469640229138019424146995932132062512824376623191330497706552818149186092039117065618072797499954444852592400822364671625964525540977997010702374212658483083374749105626735982409750253773273583130265574340218596378858264075686135", "y": "-2.491989481348873227063974795176755137899405938168297157746158076985456977060088917536622598256168809106417880549938962389444901214785821648208632129256837375312629107155129734642118191545595768793453089765238560828398317372531766726119453526251774751358889528148044354323680254529351926286640248157957992324673754940013385784936681412982296274055838339230985762727512654819818444772265219985600956601603136828857566606088973932215745355427141750421712592731071810127880359468442513452720364304749923336883633809006018665694739600635154803224486253962012169735155088998676487874802439026748095208102516947230756484325822046341910155154375343370947671097587461475654553758649930423557223142326124228626304289808523008879357779511451081931628135835676287803727630737470248032305826604052255577759652258107707627254721338316465653262461430932317684621313856530946938108546514832612961613825164798465026745544055944440821326884896444392579650108527153015122097678974704988322573807397232759219107290544929111605451809515867397720169649917462523390918768506337709162710827977977267700566233436171098601121206989043692714639383228879179837194977374489853513764898434036011967520426734814361534201889746406366641840470596034923244283064314607753356699928373562567741568353542993680967304376728228446198508766493987833618818885290618593783057870819481180503802704583901313935336004413016867017972684265869756437746618916792700105588803449525160282772830077577462866404713321706623459964879205365267814124456314343410193667469794366592414066823550032408405899510912744360744859864870580619989920110313820500512794083552695893488194174523819246654100656665884377294744549066717203015534121059546286266113168141275970639530750145756667370300862616050109893083499451699250217598711331402322449843548969314970083840582515074284593933274638324637133181245090431470109746328998712390985082718617818214164628948248066885743781459473322187933115151254029448498106539704171330805991414202054936012726335847472195602659"}
H := {"x": "-3.872638028257565126894389661780872379015569354644264857269406819035726726873931205852923520862868432499041764507317500644643946828351747494125965086990598233144362595123222368143376388942357444652297389093597820863649623696913563946695957758210781722878182437824382760202951705607698485285063585961634255528745043865975993544024278001798775473764852142109070756699266282501752693993220969183253236830953336026546830375375828067628567610378602571408517711055844539658499426144117252585764455288469970445285271080814162527394719674100712471615544604319458700606540722259376108675895064694332115461268239284388238502644508036289134110909272390558048113918416084866803416331583075956155754442166430061170735333343567627075039617173998039288098852733800896930135824542684866973021257031814394573344757529640819401522762362416062919860742060857365696426633750929341867721967763943448001682213697961884649893192015168198077959148927970683347869337672413619985273413032525062369485556852120522207735749641544056176984612484612868032695368945703118249697865701007726846706004682013696167874974961228113170196645892701183729948440621015984649569231380235507158112183752166753771772396531610520802309079537933177487030058315075049435792333084338849232621393330238397291392840256458157170741227175397700489222756442111164790538267861167867069209030494282092498609533765241044519275414300241271597886407448398325784490441588614687383842188407771593947232048254908994227459840917237683499557491563875536127683840992595210277559835434292285271942264498444626984989124208565483317548747453662325570270605815016371767041224536113357292123139703969172998268249645255333840821075393638314429397580069840220296126128435863839560996029673341545606910079633677232481695260876967248815902797700198588299986670590113933411094548065804550384412218056301139861730880978829813277914379914705231830991737602820103170287845957051402926773862668879551456183682121656523466153078146880985217111801797496860538342791224480994046781", "y": "-0.66793710953361913395872730896180819600397455842799821068346538697621567161572017285578233701618961333636527847969844822745034283801997473623648634334225314942969487726797298178733107336532186319015524114616835599649062113288758779018816509217881605763102427685195673814399094630893191244429867202993663102801820217911835041846096917875906904660586264701512360650390277796627414547235821616404601500784522128469442472170350990857391866667970048924744390544464264732533337189722871459746015991479567366247718004696799356769746925827845549667897219380227231546653945963146766983670488219267916039524324676541693161882626388930859762828559491375601130043021692188330538058964921084031762058429829569289184688264600770907611763578170827631938051882191868445061408939016479662904272048468473040665346496397287183114591837929736303873790809917068362204429047881414566505981535013576474608023839379502331476784609052366599011755744433177060127918455780218743448998301144713633733327703182887742772772862645802645462468483216233376277498310216554237471859270820813951863271570962631487297015150445361932829971349812913967314270607305954491400847290863874007452573395268607637306233678535383239374174112957178220065715254244191218376481519235502699923109734677856737318786528939906959247865785959620423026919370132827888764497856853110331597330563295122270604800436944302125078471464278291776436078355539228021295225991529157010013218033797192947700973462808108591196145912222327247577142244722367298783895981255642514382708356915023726366334250347748157987126501183131102010679123529030324508963957793898420088542289688604575647474354637913020358844139171048962604378568992941424991075517682641085902073089102387618481261062843129706506061839680514906742855576223648526020639976771713276824673854926720832893541030717944226455650863517160471581594536533296361994743675715798846983203025543862197226357615320181106966330263147341329342602514246713771447418246740917308998769404481255899288234010832109353784348"}

Need to prove:
concyclic(D, F, H, J)

Proof:
By line_definition on D, I, h we get h == Line(D, I)
By line_definition on D, A, h we get h == Line(A, D)
By line_definition on A, F, g we get g == Line(A, F)
By line_definition on I, E, f we get f == Line(E, I)
By line_definition on J, A, h we get h == Line(A, J)
By line_definition on D, F, perpendicular_line(D, g) we get Line(D, F) == perpendicular_line(D, g)
By line_definition on D, E, perpendicular_line(D, f) we get Line(D, E) == perpendicular_line(D, f)
By line_definition on I, G, f we get f == Line(G, I)
By line_definition on C, E, f we get f == Line(C, E)
By line_definition on B, E, f we get f == Line(B, E)
By line_definition on I, B, f we get f == Line(B, I)
By line_definition on C, F, g we get g == Line(C, F)
By line_definition on D, J, h we get h == Line(D, J)
By line_definition on D, B, i we get i == Line(B, D)
By line_definition on G, C, f we get f == Line(C, G)
By line_definition on E, G, f we get f == Line(E, G)
By line_definition on J, I, h we get h == Line(I, J)
By line_definition on C, I, f we get f == Line(C, I)
By line_definition on G, B, f we get f == Line(B, G)
By line_definition on A, I, h we get h == Line(A, I)
By line_intersection_definition on A, g, h we get A == line_intersection(g, h)
By perpendicular_line_definition on C, g, perpendicular_line(D, g) we get g == perpendicular_line(C, perpendicular_line(D, g))
By circle_definition on J, I, F, d we get d == Circle(F, I, J)
By line_intersection_definition on D, perpendicular_line(D, g), h we get D == line_intersection(h, perpendicular_line(D, g))
By circle_definition on G, I, J, d we get d == Circle(G, I, J)
By circle_definition on A, F, G, c we get c == Circle(A, F, G)
By line_intersection_definition on D, perpendicular_line(D, f), h we get D == line_intersection(h, perpendicular_line(D, f))
By perpendicular_line_definition on E, f, perpendicular_line(D, f) we get f == perpendicular_line(E, perpendicular_line(D, f))
By circle_definition on F, G, J, d we get d == Circle(F, G, J)
By perpendicular_line_definition on F, g, perpendicular_line(D, g) we get g == perpendicular_line(F, perpendicular_line(D, g))
By circle_definition on E, G, A, c we get c == Circle(A, E, G)
By circle_definition on F, G, E, c we get c == Circle(E, F, G)
By perpendicular_line_definition on F, perpendicular_line(D, g), g we get perpendicular_line(D, g) == perpendicular_line(F, g)
By line_intersection_definition on D, perpendicular_line(D, g), i we get D == line_intersection(i, perpendicular_line(D, g))
By line_intersection_definition on C, f, g we get C == line_intersection(f, g)
By perpendicular_line_definition on E, perpendicular_line(D, f), f we get perpendicular_line(D, f) == perpendicular_line(E, f)
By perpendicular_line_definition on G, f, perpendicular_line(D, f) we get f == perpendicular_line(G, perpendicular_line(D, f))
By line_intersection_definition on D, i, perpendicular_line(D, f) we get D == line_intersection(i, perpendicular_line(D, f))
By perpendicular_line_definition on B, f, perpendicular_line(D, f) we get f == perpendicular_line(B, perpendicular_line(D, f))
By line_intersection_definition on D, perpendicular_line(D, g), perpendicular_line(D, f) we get D == line_intersection(perpendicular_line(D, f), perpendicular_line(D, g))
By perpendicular_line_definition on C, f, perpendicular_line(D, f) we get f == perpendicular_line(C, perpendicular_line(D, f))
By line_intersection_definition on B, f, i we get B == line_intersection(f, i)
By perpendicular_line_definition on I, f, perpendicular_line(D, f) we get f == perpendicular_line(I, perpendicular_line(D, f))
By perpendicular_line_definition on A, g, perpendicular_line(D, g) we get g == perpendicular_line(A, perpendicular_line(D, g))
By circle_radius_v0_r on G, c we get radius(c) == distance(G, center(c))
By circle_radius_v0_r on A, c we get radius(c) == distance(A, center(c))
By circle_radius_v0_r on E, c we get radius(c) == distance(E, center(c))
By circle_radius_v0_r on F, c we get radius(c) == distance(F, center(c))
By in_imply_collinear on G, B, C we get collinear(B, C, G)
By in_imply_collinear on E, C, B we get collinear(B, C, E)
By in_imply_collinear on I, B, C we get collinear(B, C, I)
By in_imply_concyclic on I, G, F, J we get concyclic(F, G, I, J)
By in_imply_collinear on F, C, A we get collinear(A, C, F)
By in_imply_concyclic on F, A, E, G we get concyclic(A, E, F, G)
By angle_bisector_draw_angle_v0 on A, B, C we get exists(Line(A, B), Line(B, C))
By angle_bisector_draw_angle_v0 on C, B, A we get exists(Line(A, B), Line(B, C))
By angle_bisector_draw_angle_v0 on B, A, C we get exists(Line(A, B), Line(A, C))
By angle_bisector_draw_angle_v0 on C, A, B we get exists(Line(A, B), Line(A, C))
By power_of_a_point_on_circle on J, d we get 0 == power_of_a_point(J, d)
By power_of_a_point_on_circle on A, c we get 0 == power_of_a_point(A, c)
By power_of_a_point_in_circle on I, d we get 0 == power_of_a_point(I, d)
By power_of_a_point_on_circle on E, c we get 0 == power_of_a_point(E, c)
By angles_on_chord_v0 on A, F, G, E, c we get angle(A, E, F) == angle(A, G, F) mod 360
By power_of_a_point_in_circle on G, d we get 0 == power_of_a_point(G, d)
By power_of_a_point_in_circle on G, c we get 0 == power_of_a_point(G, c)
By power_of_a_point_on_circle on F, d we get 0 == power_of_a_point(F, d)
By power_of_a_point_on_circle on F, c we get 0 == power_of_a_point(F, c)
By angles_on_chord_v1 on E, F, A, G, c we get angle(E, A, F) == angle(E, G, F) mod 360
By angles_on_chord_v1 on G, I, J, F, d we get angle(G, F, I) == angle(G, J, I) mod 360
By angles_on_chord_v1 on G, E, F, A, c we get angle(G, A, E) == angle(G, F, E) mod 360
By angles_on_chord_v1 on I, F, J, G, d we get angle(I, G, F) == angle(I, J, F) mod 360
By angles_on_chord_v2 on I, J, F, G, d we get angle(I, F, J) == angle(I, G, J) + 180 mod 360
By angles_on_chord_v0 on J, F, G, I, d we get angle(J, G, F) == angle(J, I, F) mod 360
By angles_on_chord_v0 on F, I, G, J, d we get angle(F, G, I) == angle(F, J, I) mod 360
By angles_on_chord_v3 on G, F, J, I, d we get angle(G, J, F) == angle(G, I, F) + 180 mod 360
By angle_to_center on G, F, E, c we get 2 * angle(G, F, E) == angle(G, center(c), E) mod 360
By angles_on_chord_v0 on G, A, F, E, c we get angle(G, E, A) == angle(G, F, A) mod 360
By angles_on_chord_v2 on J, I, G, F, d we get angle(J, G, I) == angle(J, F, I) + 180 mod 360
By angles_on_chord_v3 on J, I, F, G, d we get angle(J, F, I) == angle(J, G, I) + 180 mod 360
By angles_on_chord_v0 on I, G, J, F, d we get angle(I, F, G) == angle(I, J, G) mod 360
By angles_on_chord_v3 on G, F, A, E, c we get angle(G, A, F) == angle(G, E, F) + 180 mod 360
By angles_on_chord_v0 on G, J, F, I, d we get angle(G, F, J) == angle(G, I, J) mod 360
By angles_on_chord_v2 on G, F, E, A, c we get angle(G, E, F) == angle(G, A, F) + 180 mod 360
By angles_on_chord_v3 on A, E, F, G, c we get angle(A, F, E) == angle(A, G, E) + 180 mod 360
By angle_to_center on G, E, A, c we get 2 * angle(G, E, A) == angle(G, center(c), A) mod 360
By angles_on_chord_v1 on F, A, G, E, c we get angle(F, E, A) == angle(F, G, A) mod 360
By angles_on_chord_v0 on E, G, F, A, c we get angle(E, A, G) == angle(E, F, G) mod 360
By angles_on_chord_v2 on G, F, I, J, d we get angle(G, I, F) == angle(G, J, F) + 180 mod 360
By angles_on_chord_v1 on J, G, F, I, d we get angle(J, F, G) == angle(J, I, G) mod 360
By angles_on_chord_v1 on F, J, G, I, d we get angle(F, G, J) == angle(F, I, J) mod 360
By angles_on_chord_v3 on I, J, G, F, d we get angle(I, G, J) == angle(I, F, J) + 180 mod 360
By angles_on_chord_v3 on F, G, I, J, d we get angle(F, I, G) == angle(F, J, G) + 180 mod 360
By angles_on_chord_v0 on F, E, G, A, c we get angle(F, A, E) == angle(F, G, E) mod 360
By angles_on_chord_v2 on A, E, G, F, c we get angle(A, G, E) == angle(A, F, E) + 180 mod 360
By angles_on_chord_v2 on F, G, A, E, c we get angle(F, A, G) == angle(F, E, G) + 180 mod 360
By angles_on_chord_v3 on E, A, G, F, c we get angle(E, G, A) == angle(E, F, A) + 180 mod 360
By angle_to_center on A, F, G, c we get 2 * angle(A, F, G) == angle(A, center(c), G) mod 360
By angles_on_chord_v3 on F, G, E, A, c we get angle(F, E, G) == angle(F, A, G) + 180 mod 360
By angle_to_center on A, G, F, c we get 2 * angle(A, G, F) == angle(A, center(c), F) mod 360
By angle_to_center on E, G, F, c we get 2 * angle(E, G, F) == angle(E, center(c), F) mod 360
By angles_on_chord_v1 on A, G, F, E, c we get angle(A, E, G) == angle(A, F, G) mod 360
By angles_on_chord_v2 on F, G, J, I, d we get angle(F, J, G) == angle(F, I, G) + 180 mod 360
By angles_on_chord_v2 on E, A, F, G, c we get angle(E, F, A) == angle(E, G, A) + 180 mod 360
By angle_to_center on F, G, E, c we get 2 * angle(F, G, E) == angle(F, center(c), E) mod 360
By angle_to_center on G, A, F, c we get 2 * angle(G, A, F) == angle(G, center(c), F) mod 360
By angle_to_center on A, F, E, c we get 2 * angle(A, F, E) == angle(A, center(c), E) mod 360
By angle_to_center on F, A, G, c we get 2 * angle(F, A, G) == angle(F, center(c), G) mod 360
By angle_to_center on E, F, A, c we get 2 * angle(E, F, A) == angle(E, center(c), A) mod 360
By angle_to_center on E, G, A, c we get 2 * angle(E, G, A) == angle(E, center(c), A) mod 360
By angle_to_center on A, G, E, c we get 2 * angle(A, G, E) == angle(A, center(c), E) mod 360
By angle_to_center on E, F, G, c we get 2 * angle(E, F, G) == angle(E, center(c), G) mod 360
By angle_to_center on G, F, A, c we get 2 * angle(G, F, A) == angle(G, center(c), A) mod 360
By angle_to_center on G, E, F, c we get 2 * angle(G, E, F) == angle(G, center(c), F) mod 360
By angle_to_center on F, E, A, c we get 2 * angle(F, E, A) == angle(F, center(c), A) mod 360
By angle_to_center on F, E, G, c we get 2 * angle(F, E, G) == angle(F, center(c), G) mod 360
By angle_to_center on A, E, G, c we get 2 * angle(A, E, G) == angle(A, center(c), G) mod 360
By angle_to_center on E, A, G, c we get 2 * angle(E, A, G) == angle(E, center(c), G) mod 360
By angle_to_center on E, A, F, c we get 2 * angle(E, A, F) == angle(E, center(c), F) mod 360
By angle_to_center on F, A, E, c we get 2 * angle(F, A, E) == angle(F, center(c), E) mod 360
By angle_to_center on A, E, F, c we get 2 * angle(A, E, F) == angle(A, center(c), F) mod 360
By angle_to_center on G, A, E, c we get 2 * angle(G, A, E) == angle(G, center(c), E) mod 360
By angle_to_center on F, G, A, c we get 2 * angle(F, G, A) == angle(F, center(c), A) mod 360
By altitude_definition on D, C, A, perpendicular_line(D, g) we get altitude(D, A, C) == perpendicular_line(D, g)
By altitude_definition on D, C, B, perpendicular_line(D, f) we get altitude(D, B, C) == perpendicular_line(D, f)
By incenter_concurrency on C, B, A we get incenter(A, B, C) in internal_angle_bisector(A, B, C), incenter(A, B, C) in internal_angle_bisector(B, A, C), incenter(A, B, C) in internal_angle_bisector(A, C, B)
By line_definition on C, D, internal_angle_bisector(A, C, B) we get Line(C, D) == internal_angle_bisector(A, C, B)
By concurrent_sufficient_conditions on h, i, Line(D, E) we get concurrent(h, i, Line(D, E))
By concurrent_sufficient_conditions on i, Line(D, F), Line(D, E) we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, E), Line(D, F), h we get concurrent(h, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on i, Line(D, E), h we get concurrent(h, i, Line(D, E))
By concurrent_sufficient_conditions on Line(D, E), i, h we get concurrent(h, i, Line(D, E))
By concurrent_sufficient_conditions on Line(D, E), h, i we get concurrent(h, i, Line(D, E))
By concurrent_sufficient_conditions on Line(D, E), Line(D, F), i we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on h, Line(D, F), i we get concurrent(h, i, Line(D, F))
By concurrent_sufficient_conditions on h, Line(D, F), Line(D, E) we get concurrent(h, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), i, h we get concurrent(h, i, Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), Line(D, E), h we get concurrent(h, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, E), i, Line(D, F) we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), h, i we get concurrent(h, i, Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), h, Line(D, E) we get concurrent(h, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on i, h, Line(D, E) we get concurrent(h, i, Line(D, E))
By concurrent_sufficient_conditions on i, Line(D, F), h we get concurrent(h, i, Line(D, F))
By concurrent_sufficient_conditions on h, Line(D, E), i we get concurrent(h, i, Line(D, E))
By concurrent_sufficient_conditions on i, h, Line(D, F) we get concurrent(h, i, Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), Line(D, E), i we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, E), h, Line(D, F) we get concurrent(h, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), i, Line(D, E) we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on i, Line(D, E), Line(D, F) we get concurrent(i, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on h, Line(D, E), Line(D, F) we get concurrent(h, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on h, i, Line(D, F) we get concurrent(h, i, Line(D, F))
By line_intersection_definition on F, Line(F, G), Line(D, F) we get F == line_intersection(Line(D, F), Line(F, G))
By line_intersection_definition on E, Line(E, H), Line(A, E) we get E == line_intersection(Line(A, E), Line(E, H))
By line_intersection_definition on F, Line(E, F), Line(F, J) we get F == line_intersection(Line(E, F), Line(F, J))
By line_intersection_definition on D, Line(D, E), internal_angle_bisector(A, C, B) we get D == line_intersection(Line(D, E), internal_angle_bisector(A, C, B))
By line_intersection_definition on E, Line(A, E), f we get E == line_intersection(f, Line(A, E))
By line_intersection_definition on F, Line(F, J), Line(F, I) we get F == line_intersection(Line(F, I), Line(F, J))
By line_intersection_definition on F, Line(F, J), Line(F, H) we get F == line_intersection(Line(F, H), Line(F, J))
By line_intersection_definition on B, f, Line(A, B) we get B == line_intersection(f, Line(A, B))
By line_intersection_definition on F, Line(F, I), Line(D, F) we get F == line_intersection(Line(D, F), Line(F, I))
By line_intersection_definition on F, Line(E, F), g we get F == line_intersection(g, Line(E, F))
By line_intersection_definition on E, Line(E, H), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, H))
By line_intersection_definition on C, internal_angle_bisector(A, C, B), g we get C == line_intersection(g, internal_angle_bisector(A, C, B))
By line_intersection_definition on E, Line(A, E), Line(D, E) we get E == line_intersection(Line(A, E), Line(D, E))
By line_intersection_definition on A, g, Line(A, G) we get A == line_intersection(g, Line(A, G))
By line_intersection_definition on J, Line(G, J), h we get J == line_intersection(h, Line(G, J))
By line_intersection_definition on G, Line(G, J), Line(A, G) we get G == line_intersection(Line(A, G), Line(G, J))
By line_intersection_definition on A, Line(A, E), h we get A == line_intersection(h, Line(A, E))
By radical_axis_of_intersecting_circles_v0 on F, G, c, d we get Line(F, G) == radical_axis(c, d)
By line_intersection_definition on G, Line(F, G), Line(G, J) we get G == line_intersection(Line(F, G), Line(G, J))
By line_intersection_definition on F, Line(F, G), Line(E, F) we get F == line_intersection(Line(E, F), Line(F, G))
By line_intersection_definition on F, Line(D, F), Line(F, J) we get F == line_intersection(Line(D, F), Line(F, J))
By concurrent_sufficient_conditions on Line(D, E), internal_angle_bisector(A, C, B), h we get concurrent(h, Line(D, E), internal_angle_bisector(A, C, B))
By line_intersection_definition on J, h, Line(F, J) we get J == line_intersection(h, Line(F, J))
By line_intersection_definition on E, Line(E, F), Line(A, E) we get E == line_intersection(Line(A, E), Line(E, F))
By line_intersection_definition on D, internal_angle_bisector(A, C, B), Line(D, F) we get D == line_intersection(Line(D, F), internal_angle_bisector(A, C, B))
By line_intersection_definition on A, Line(A, H), g we get A == line_intersection(g, Line(A, H))
By line_intersection_definition on G, Line(F, G), Line(G, H) we get G == line_intersection(Line(F, G), Line(G, H))
By line_intersection_definition on H, Line(E, H), Line(F, H) we get H == line_intersection(Line(E, H), Line(F, H))
By line_intersection_definition on F, g, Line(F, J) we get F == line_intersection(g, Line(F, J))
By line_intersection_definition on G, Line(A, G), Line(G, H) we get G == line_intersection(Line(A, G), Line(G, H))
By line_intersection_definition on G, f, Line(G, H) we get G == line_intersection(f, Line(G, H))
By line_intersection_definition on H, Line(A, H), Line(E, H) we get H == line_intersection(Line(A, H), Line(E, H))
By line_intersection_definition on A, h, Line(A, B) we get A == line_intersection(h, Line(A, B))
By line_intersection_definition on B, i, Line(A, B) we get B == line_intersection(i, Line(A, B))
By line_intersection_definition on F, g, Line(F, I) we get F == line_intersection(g, Line(F, I))
By line_intersection_definition on F, Line(F, J), Line(F, G) we get F == line_intersection(Line(F, G), Line(F, J))
By line_intersection_definition on A, Line(A, H), Line(A, E) we get A == line_intersection(Line(A, E), Line(A, H))
By line_intersection_definition on E, f, Line(E, F) we get E == line_intersection(f, Line(E, F))
By concurrent_sufficient_conditions on internal_angle_bisector(A, C, B), Line(D, F), i we get concurrent(i, Line(D, F), internal_angle_bisector(A, C, B))
By line_intersection_definition on F, Line(F, G), Line(F, I) we get F == line_intersection(Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on internal_angle_bisector(A, C, B), Line(D, E), h we get concurrent(h, Line(D, E), internal_angle_bisector(A, C, B))
By line_intersection_definition on H, Line(G, H), Line(E, H) we get H == line_intersection(Line(E, H), Line(G, H))
By line_intersection_definition on A, Line(A, H), Line(A, G) we get A == line_intersection(Line(A, G), Line(A, H))
By line_intersection_definition on E, f, Line(E, H) we get E == line_intersection(f, Line(E, H))
By line_intersection_definition on A, Line(A, E), Line(A, B) we get A == line_intersection(Line(A, B), Line(A, E))
By line_intersection_definition on G, f, Line(G, J) we get G == line_intersection(f, Line(G, J))
By line_intersection_definition on A, Line(A, H), h we get A == line_intersection(h, Line(A, H))
By line_intersection_definition on A, g, Line(A, E) we get A == line_intersection(g, Line(A, E))
By line_intersection_definition on H, Line(G, H), Line(A, H) we get H == line_intersection(Line(A, H), Line(G, H))
By line_intersection_definition on H, Line(G, H), Line(F, H) we get H == line_intersection(Line(F, H), Line(G, H))
By line_intersection_definition on C, f, internal_angle_bisector(A, C, B) we get C == line_intersection(f, internal_angle_bisector(A, C, B))
By line_intersection_definition on E, Line(E, H), Line(E, F) we get E == line_intersection(Line(E, F), Line(E, H))
By line_intersection_definition on G, Line(F, G), f we get G == line_intersection(f, Line(F, G))
By line_intersection_definition on J, Line(F, J), Line(G, J) we get J == line_intersection(Line(F, J), Line(G, J))
By line_intersection_definition on I, Line(F, I), f we get I == line_intersection(f, Line(F, I))
By line_intersection_definition on A, Line(A, E), Line(A, G) we get A == line_intersection(Line(A, E), Line(A, G))
By line_intersection_definition on F, Line(F, I), Line(F, H) we get F == line_intersection(Line(F, H), Line(F, I))
By line_intersection_definition on F, Line(F, I), Line(E, F) we get F == line_intersection(Line(E, F), Line(F, I))
By line_intersection_definition on G, Line(G, J), Line(G, H) we get G == line_intersection(Line(G, H), Line(G, J))
By line_intersection_definition on F, Line(F, G), g we get F == line_intersection(g, Line(F, G))
By line_intersection_definition on E, Line(E, F), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, F))
By line_intersection_definition on A, Line(A, B), Line(A, H) we get A == line_intersection(Line(A, B), Line(A, H))
By line_intersection_definition on H, Line(A, H), Line(F, H) we get H == line_intersection(Line(A, H), Line(F, H))
By line_intersection_definition on G, Line(A, G), Line(F, G) we get G == line_intersection(Line(A, G), Line(F, G))
By line_intersection_definition on F, g, Line(F, H) we get F == line_intersection(g, Line(F, H))
By line_intersection_definition on A, Line(A, B), g we get A == line_intersection(g, Line(A, B))
By line_intersection_definition on F, Line(F, H), Line(F, G) we get F == line_intersection(Line(F, G), Line(F, H))
By line_intersection_definition on F, Line(D, F), Line(F, H) we get F == line_intersection(Line(D, F), Line(F, H))
By concurrent_sufficient_conditions on Line(D, F), internal_angle_bisector(A, C, B), i we get concurrent(i, Line(D, F), internal_angle_bisector(A, C, B))
By line_intersection_definition on F, Line(E, F), Line(F, H) we get F == line_intersection(Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(D, E), internal_angle_bisector(A, C, B), i we get concurrent(i, Line(D, E), internal_angle_bisector(A, C, B))
By line_intersection_definition on I, h, Line(F, I) we get I == line_intersection(h, Line(F, I))
By line_intersection_definition on A, Line(A, B), Line(A, G) we get A == line_intersection(Line(A, B), Line(A, G))
By concurrent_sufficient_conditions on internal_angle_bisector(A, C, B), Line(D, F), h we get concurrent(h, Line(D, F), internal_angle_bisector(A, C, B))
By line_intersection_definition on F, Line(E, F), Line(D, F) we get F == line_intersection(Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on internal_angle_bisector(A, C, B), Line(D, E), i we get concurrent(i, Line(D, E), internal_angle_bisector(A, C, B))
By line_intersection_definition on A, h, Line(A, G) we get A == line_intersection(h, Line(A, G))
By line_intersection_definition on G, Line(A, G), f we get G == line_intersection(f, Line(A, G))
By concurrent_sufficient_conditions on Line(D, F), internal_angle_bisector(A, C, B), h we get concurrent(h, Line(D, F), internal_angle_bisector(A, C, B))
By projection_definition on I, E, Line(D, E) we get E == projection(I, Line(D, E))
By projection_definition on C, E, Line(D, E) we get E == projection(C, Line(D, E))
By projection_definition on G, E, Line(D, E) we get E == projection(G, Line(D, E))
By projection_definition on A, F, Line(D, F) we get F == projection(A, Line(D, F))
By projection_definition on C, F, Line(D, F) we get F == projection(C, Line(D, F))
By projection_definition on B, E, Line(D, E) we get E == projection(B, Line(D, E))
By perpendicular_direction_conditions_v0_r on E, D, E, G we get 180 == 2 * direction(E, D) - 2 * direction(E, G) mod 360
By same_angle_v2 on F, C, A, G we get angle(C, F, G) == angle(A, F, G) + 180 mod 360
By perpendicular_direction_conditions_v0_r on D, E, I, G we get 180 == 2 * direction(D, E) - 2 * direction(I, G) mod 360
By same_angle_v2 on F, C, A, E we get angle(C, F, E) == angle(A, F, E) + 180 mod 360
By perpendicular_direction_conditions_v0_r on E, D, I, G we get 180 == 2 * direction(E, D) - 2 * direction(I, G) mod 360
By same_angle_v3 on F, C, A, I we get angle(C, F, I) == angle(A, F, I) + 180 mod 360
By same_angle_v0 on A, C, F, E we get angle(C, A, E) == angle(F, A, E) mod 360
By perpendicular_direction_conditions_v0_r on D, F, A, F we get 180 == 2 * direction(D, F) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on D, E, E, G we get 180 == 2 * direction(D, E) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on E, D, G, I we get 180 == 2 * direction(E, D) - 2 * direction(G, I) mod 360
By perpendicular_direction_conditions_v0_r on E, D, G, E we get 180 == 2 * direction(E, D) - 2 * direction(G, E) mod 360
By same_angle_v0 on A, F, C, G we get angle(C, A, G) == angle(F, A, G) mod 360
By perpendicular_direction_conditions_v0_r on F, A, F, D we get 180 == 2 * direction(F, A) - 2 * direction(F, D) mod 360
By same_angle_v2 on F, C, A, J we get angle(C, F, J) == angle(A, F, J) + 180 mod 360
By perpendicular_direction_conditions_v0_r on F, D, A, F we get 180 == 2 * direction(F, D) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on A, F, D, F we get 180 == 2 * direction(A, F) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on F, D, F, A we get 180 == 2 * direction(F, D) - 2 * direction(F, A) mod 360
By in_imply_collinear on A, D, I we get collinear(A, D, I)
By perpendicular_direction_conditions_v0_r on D, F, F, A we get 180 == 2 * direction(D, F) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on D, E, G, E we get 180 == 2 * direction(D, E) - 2 * direction(G, E) mod 360
By in_imply_collinear on C, I, G we get collinear(C, G, I)
By perpendicular_direction_conditions_v0_r on E, G, E, D we get 180 == 2 * direction(E, G) - 2 * direction(E, D) mod 360
By probably_between_and_collinear_implies_between on C, E, B we get between(B, E, C)
By perpendicular_direction_conditions_v0_r on D, E, G, I we get 180 == 2 * direction(D, E) - 2 * direction(G, I) mod 360
By perpendicular_direction_conditions_v0_r on E, G, D, E we get 180 == 2 * direction(E, G) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on G, E, D, E we get 180 == 2 * direction(G, E) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on I, G, E, D we get 180 == 2 * direction(I, G) - 2 * direction(E, D) mod 360
By in_imply_collinear on B, I, E we get collinear(B, E, I)
By perpendicular_direction_conditions_v0_r on G, I, D, E we get 180 == 2 * direction(G, I) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on A, F, F, D we get 180 == 2 * direction(A, F) - 2 * direction(F, D) mod 360
By in_imply_collinear on B, E, G we get collinear(B, E, G)
By probably_between_and_collinear_implies_between on B, G, C we get between(B, G, C)
By perpendicular_direction_conditions_v0_r on G, E, E, D we get 180 == 2 * direction(G, E) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on F, A, D, F we get 180 == 2 * direction(F, A) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on G, I, E, D we get 180 == 2 * direction(G, I) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on I, G, D, E we get 180 == 2 * direction(I, G) - 2 * direction(D, E) mod 360
By in_imply_collinear on J, I, A we get collinear(A, I, J)
By in_imply_collinear on I, E, G we get collinear(E, G, I)
By in_imply_collinear on A, D, J we get collinear(A, D, J)
By probably_between_and_collinear_implies_between on C, F, A we get between(A, F, C)
By in_imply_collinear on C, I, E we get collinear(C, E, I)
By probably_between_and_collinear_implies_between on C, I, B we get between(B, I, C)
By in_imply_collinear on J, I, D we get collinear(D, I, J)
By in_imply_collinear on G, I, B we get collinear(B, G, I)
By in_imply_collinear on G, E, C we get collinear(C, E, G)
By reverse_direction on F, I we get 180 == direction(F, I) - direction(I, F) mod 360
By reverse_direction on J, G we get 180 == direction(J, G) - direction(G, J) mod 360
By reverse_direction on F, J we get 180 == direction(F, J) - direction(J, F) mod 360
By reverse_direction on E, G we get 180 == direction(E, G) - direction(G, E) mod 360
By reverse_direction on E, A we get 180 == direction(E, A) - direction(A, E) mod 360
By reverse_direction on F, E we get 180 == direction(F, E) - direction(E, F) mod 360
By reverse_direction on E, F we get 180 == direction(E, F) - direction(F, E) mod 360
By reverse_direction on F, A we get 180 == direction(F, A) - direction(A, F) mod 360
By reverse_direction on A, G we get 180 == direction(A, G) - direction(G, A) mod 360
By reverse_direction on G, F we get 180 == direction(G, F) - direction(F, G) mod 360
By reverse_direction on J, F we get 180 == direction(J, F) - direction(F, J) mod 360
By reverse_direction on G, A we get 180 == direction(G, A) - direction(A, G) mod 360
By reverse_direction on I, G we get 180 == direction(I, G) - direction(G, I) mod 360
By reverse_direction on I, F we get 180 == direction(I, F) - direction(F, I) mod 360
By reverse_direction on G, I we get 180 == direction(G, I) - direction(I, G) mod 360
By reverse_direction on G, E we get 180 == direction(G, E) - direction(E, G) mod 360
By reverse_direction on F, G we get 180 == direction(F, G) - direction(G, F) mod 360
By reverse_direction on I, J we get 180 == direction(I, J) - direction(J, I) mod 360
By reverse_direction on J, I we get 180 == direction(J, I) - direction(I, J) mod 360
By reverse_direction on A, F we get 180 == direction(A, F) - direction(F, A) mod 360
By reverse_direction on A, E we get 180 == direction(A, E) - direction(E, A) mod 360
By reverse_direction on G, J we get 180 == direction(G, J) - direction(J, G) mod 360
By perpendicular_direction_conditions_v0_r on D, E, E, C we get 180 == 2 * direction(D, E) - 2 * direction(E, C) mod 360
By same_angle_v0 on A, F, C, I we get angle(C, A, I) == angle(F, A, I) mod 360
By perpendicular_direction_conditions_v0_r on B, E, E, D we get 180 == 2 * direction(B, E) - 2 * direction(E, D) mod 360
By same_angle_v3 on I, B, C, F we get angle(B, I, F) == angle(C, I, F) + 180 mod 360
By same_angle_v0 on A, F, C, H we get angle(C, A, H) == angle(F, A, H) mod 360
By perpendicular_direction_conditions_v0_r on E, D, I, C we get 180 == 2 * direction(E, D) - 2 * direction(I, C) mod 360
By same_angle_v3 on G, B, C, A we get angle(B, G, A) == angle(C, G, A) + 180 mod 360
By same_angle_v3 on E, B, C, A we get angle(B, E, A) == angle(C, E, A) + 180 mod 360
By same_angle_v3 on F, C, A, D we get angle(C, F, D) == angle(A, F, D) + 180 mod 360
By same_angle_v0 on A, C, F, B we get angle(C, A, B) == angle(F, A, B) mod 360
By same_angle_v3 on G, B, C, F we get angle(B, G, F) == angle(C, G, F) + 180 mod 360
By perpendicular_direction_conditions_v0_r on D, E, E, I we get 180 == 2 * direction(D, E) - 2 * direction(E, I) mod 360
By same_angle_v3 on I, B, C, J we get angle(B, I, J) == angle(C, I, J) + 180 mod 360
By perpendicular_direction_conditions_v0_r on C, F, F, D we get 180 == 2 * direction(C, F) - 2 * direction(F, D) mod 360
By same_angle_v0 on A, C, F, D we get angle(C, A, D) == angle(F, A, D) mod 360
By same_angle_v2 on F, C, A, H we get angle(C, F, H) == angle(A, F, H) + 180 mod 360
By same_angle_v2 on G, B, C, J we get angle(B, G, J) == angle(C, G, J) + 180 mod 360
By perpendicular_direction_conditions_v0_r on D, E, G, B we get 180 == 2 * direction(D, E) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on E, D, C, E we get 180 == 2 * direction(E, D) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on E, C, D, E we get 180 == 2 * direction(E, C) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on E, D, C, B we get 180 == 2 * direction(E, D) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on D, E, B, G we get 180 == 2 * direction(D, E) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on G, C, D, E we get 180 == 2 * direction(G, C) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on E, I, D, E we get 180 == 2 * direction(E, I) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on D, F, F, C we get 180 == 2 * direction(D, F) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on D, E, B, I we get 180 == 2 * direction(D, E) - 2 * direction(B, I) mod 360
By same_angle_v3 on E, B, C, F we get angle(B, E, F) == angle(C, E, F) + 180 mod 360
By perpendicular_direction_conditions_v0_r on E, D, C, I we get 180 == 2 * direction(E, D) - 2 * direction(C, I) mod 360
By perpendicular_direction_conditions_v0_r on G, B, E, D we get 180 == 2 * direction(G, B) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on E, D, G, C we get 180 == 2 * direction(E, D) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on C, G, E, D we get 180 == 2 * direction(C, G) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on D, E, C, B we get 180 == 2 * direction(D, E) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on C, A, D, F we get 180 == 2 * direction(C, A) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on B, G, E, D we get 180 == 2 * direction(B, G) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on A, C, F, D we get 180 == 2 * direction(A, C) - 2 * direction(F, D) mod 360
By same_angle_v0 on A, F, C, J we get angle(C, A, J) == angle(F, A, J) mod 360
By perpendicular_direction_conditions_v0_r on A, C, D, F we get 180 == 2 * direction(A, C) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on E, D, B, G we get 180 == 2 * direction(E, D) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on F, D, A, C we get 180 == 2 * direction(F, D) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on C, F, D, F we get 180 == 2 * direction(C, F) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on D, E, G, C we get 180 == 2 * direction(D, E) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on F, D, C, F we get 180 == 2 * direction(F, D) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on I, B, D, E we get 180 == 2 * direction(I, B) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on C, I, D, E we get 180 == 2 * direction(C, I) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on I, E, E, D we get 180 == 2 * direction(I, E) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on E, D, I, E we get 180 == 2 * direction(E, D) - 2 * direction(I, E) mod 360
By perpendicular_direction_conditions_v0_r on B, I, D, E we get 180 == 2 * direction(B, I) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on F, C, D, F we get 180 == 2 * direction(F, C) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on D, F, C, A we get 180 == 2 * direction(D, F) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on D, E, I, B we get 180 == 2 * direction(D, E) - 2 * direction(I, B) mod 360
By perpendicular_direction_conditions_v0_r on D, E, E, B we get 180 == 2 * direction(D, E) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on D, E, C, I we get 180 == 2 * direction(D, E) - 2 * direction(C, I) mod 360
By perpendicular_direction_conditions_v0_r on F, D, F, C we get 180 == 2 * direction(F, D) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on C, B, D, E we get 180 == 2 * direction(C, B) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on E, D, C, G we get 180 == 2 * direction(E, D) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on I, B, E, D we get 180 == 2 * direction(I, B) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on E, D, E, I we get 180 == 2 * direction(E, D) - 2 * direction(E, I) mod 360
By perpendicular_direction_conditions_v0_r on C, B, E, D we get 180 == 2 * direction(C, B) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on E, D, B, C we get 180 == 2 * direction(E, D) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on E, D, G, B we get 180 == 2 * direction(E, D) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on D, F, A, C we get 180 == 2 * direction(D, F) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on C, A, F, D we get 180 == 2 * direction(C, A) - 2 * direction(F, D) mod 360
By radical_axis_definition_v0_r on G, d, c we get G in radical_axis(c, d)
By perpendicular_direction_conditions_v0_r on E, D, B, E we get 180 == 2 * direction(E, D) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on E, I, E, D we get 180 == 2 * direction(E, I) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on D, E, B, C we get 180 == 2 * direction(D, E) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on D, E, C, E we get 180 == 2 * direction(D, E) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on C, I, E, D we get 180 == 2 * direction(C, I) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on I, C, D, E we get 180 == 2 * direction(I, C) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on C, E, D, E we get 180 == 2 * direction(C, E) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on B, C, E, D we get 180 == 2 * direction(B, C) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on E, D, I, B we get 180 == 2 * direction(E, D) - 2 * direction(I, B) mod 360
By perpendicular_direction_conditions_v0_r on F, C, F, D we get 180 == 2 * direction(F, C) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on I, E, D, E we get 180 == 2 * direction(I, E) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on I, C, E, D we get 180 == 2 * direction(I, C) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on D, E, C, G we get 180 == 2 * direction(D, E) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on B, G, D, E we get 180 == 2 * direction(B, G) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on E, D, B, I we get 180 == 2 * direction(E, D) - 2 * direction(B, I) mod 360
By perpendicular_direction_conditions_v0_r on E, D, E, B we get 180 == 2 * direction(E, D) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on B, I, E, D we get 180 == 2 * direction(B, I) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on D, F, C, F we get 180 == 2 * direction(D, F) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on G, B, D, E we get 180 == 2 * direction(G, B) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on E, B, E, D we get 180 == 2 * direction(E, B) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on C, E, E, D we get 180 == 2 * direction(C, E) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on D, E, B, E we get 180 == 2 * direction(D, E) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on G, C, E, D we get 180 == 2 * direction(G, C) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on C, G, D, E we get 180 == 2 * direction(C, G) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on E, D, E, C we get 180 == 2 * direction(E, D) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on B, C, D, E we get 180 == 2 * direction(B, C) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on E, C, E, D we get 180 == 2 * direction(E, C) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on E, B, D, E we get 180 == 2 * direction(E, B) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on D, E, I, C we get 180 == 2 * direction(D, E) - 2 * direction(I, C) mod 360
By perpendicular_direction_conditions_v0_r on B, E, D, E we get 180 == 2 * direction(B, E) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on D, E, I, E we get 180 == 2 * direction(D, E) - 2 * direction(I, E) mod 360
By perpendicular_direction_conditions_v0_r on F, D, C, A we get 180 == 2 * direction(F, D) - 2 * direction(C, A) mod 360
By perpendicular_angle_conditions_v0 on G, E, D we get angle(G, E, D) == orientation(D, G, E) mod 360
By reverse_direction on H, G we get 180 == direction(H, G) - direction(G, H) mod 360
By perpendicular_angle_conditions_v0 on D, F, A we get angle(D, F, A) == orientation(A, D, F) mod 360
By altitude_definition on A, D, F, g we get g == altitude(A, D, F)
By perpendicular_angle_conditions_v0 on D, E, G we get angle(D, E, G) == orientation(D, E, G) mod 360
By altitude_definition on C, E, D, f we get f == altitude(C, D, E)
By perpendicular_angle_conditions_v0 on A, F, D we get angle(A, F, D) == orientation(A, F, D) mod 360
By altitude_definition on C, F, D, g we get g == altitude(C, D, F)
By collinear_definition on F, C, A we get C in Line(A, F), A in Line(C, F), Line(A, F) == Line(C, F), 0 == 2 * angle(C, F, A) mod 360
By altitude_definition on I, E, D, f we get f == altitude(I, D, E)
By reverse_direction on H, F we get 180 == direction(H, F) - direction(F, H) mod 360
By radical_axis_definition_v0_r on F, d, c we get F in radical_axis(c, d)
By altitude_definition on G, E, D, f we get f == altitude(G, D, E)
By reverse_direction on H, E we get 180 == direction(H, E) - direction(E, H) mod 360
By reverse_direction on H, A we get 180 == direction(H, A) - direction(A, H) mod 360
By altitude_definition on B, E, D, f we get f == altitude(B, D, E)
By collinear_definition on A, C, F we get C in Line(A, F), F in Line(A, C), Line(A, C) == Line(A, F), 0 == 2 * angle(C, A, F) mod 360
By collinear_definition on F, A, C we get A in Line(C, F), C in Line(A, F), Line(A, F) == Line(C, F), 0 == 2 * angle(A, F, C) mod 360
By collinear_definition on A, F, C we get F in Line(A, C), C in Line(A, F), Line(A, C) == Line(A, F), 0 == 2 * angle(F, A, C) mod 360
By same_angle_v1 on B, E, C, D we get angle(C, B, D) == angle(E, B, D) mod 360
By same_angle_v1 on C, A, F, E we get angle(A, C, E) == angle(F, C, E) mod 360
By same_angle_v1 on B, C, I, D we get angle(C, B, D) == angle(I, B, D) mod 360
By same_angle_v0 on C, B, E, F we get angle(B, C, F) == angle(E, C, F) mod 360
By same_angle_v1 on C, F, A, G we get angle(A, C, G) == angle(F, C, G) mod 360
By same_angle_v3 on E, B, C, D we get angle(B, E, D) == angle(C, E, D) + 180 mod 360
By same_angle_v0 on C, G, B, F we get angle(B, C, F) == angle(G, C, F) mod 360
By same_angle_v1 on B, C, G, D we get angle(C, B, D) == angle(G, B, D) mod 360
By same_angle_v0 on C, I, B, F we get angle(B, C, F) == angle(I, C, F) mod 360
By same_angle_v3 on I, B, C, A we get angle(B, I, A) == angle(C, I, A) + 180 mod 360
By same_angle_v3 on G, B, C, H we get angle(B, G, H) == angle(C, G, H) + 180 mod 360
By same_angle_v1 on C, A, F, I we get angle(A, C, I) == angle(F, C, I) mod 360
By same_angle_v3 on I, B, C, D we get angle(B, I, D) == angle(C, I, D) + 180 mod 360
By same_angle_v0 on C, G, B, A we get angle(B, C, A) == angle(G, C, A) mod 360
By same_angle_v0 on C, E, B, A we get angle(B, C, A) == angle(E, C, A) mod 360
By same_angle_v1 on B, G, C, A we get angle(C, B, A) == angle(G, B, A) mod 360
By same_angle_v1 on C, F, A, B we get angle(A, C, B) == angle(F, C, B) mod 360
By same_angle_v0 on C, I, B, A we get angle(B, C, A) == angle(I, C, A) mod 360
By same_angle_v3 on E, B, C, H we get angle(B, E, H) == angle(C, E, H) + 180 mod 360
By same_angle_v1 on B, C, I, A we get angle(C, B, A) == angle(I, B, A) mod 360
By same_angle_v1 on B, E, C, A we get angle(C, B, A) == angle(E, B, A) mod 360
By isosceles_triangle_properties on H, G, F we get distance(F, H) == distance(G, H), angle(G, F, H) == angle(H, G, F) mod 360
By altitude_definition on D, C, F, Line(D, F) we get Line(D, F) == altitude(D, C, F)
By isosceles_triangle_properties on H, A, F we get distance(A, H) == distance(F, H), angle(A, F, H) == angle(H, A, F) mod 360
By altitude_definition on D, B, G, Line(D, E) we get Line(D, E) == altitude(D, B, G)
By altitude_definition on D, E, G, Line(D, E) we get Line(D, E) == altitude(D, E, G)
By altitude_definition on D, E, I, Line(D, E) we get Line(D, E) == altitude(D, E, I)
By collinear_definition on B, C, E we get C in Line(B, E), E in Line(B, C), Line(B, C) == Line(B, E), 0 == 2 * angle(C, B, E) mod 360
By sas_anti_congruence on E, H, G, G, H, E we get anti_congruent_triangles(E, G, H, G, E, H)
By altitude_definition on D, E, B, Line(D, E) we get Line(D, E) == altitude(D, B, E)
By perpendicular_angle_conditions_v0 on B, E, D we get angle(B, E, D) == orientation(B, E, D) mod 360
By isosceles_triangle_properties on H, G, A we get distance(A, H) == distance(G, H), angle(G, A, H) == angle(H, G, A) mod 360
By perpendicular_angle_conditions_v0 on D, E, I we get angle(D, E, I) == orientation(D, E, I) mod 360
By isosceles_triangle_properties on H, G, E we get distance(E, H) == distance(G, H), angle(G, E, H) == angle(H, G, E) mod 360
By altitude_definition on D, C, I, Line(D, E) we get Line(D, E) == altitude(D, C, I)
By sas_anti_congruence on F, H, G, G, H, F we get anti_congruent_triangles(F, G, H, G, F, H)
By sas_anti_congruence on A, H, F, F, H, A we get anti_congruent_triangles(A, F, H, F, A, H)
By perpendicular_angle_conditions_v0 on I, E, D we get angle(I, E, D) == orientation(D, I, E) mod 360
By sas_anti_congruence on F, H, A, A, H, F we get anti_congruent_triangles(A, F, H, F, A, H)
By collinear_definition on C, A, F we get A in Line(C, F), F in Line(A, C), Line(A, C) == Line(C, F), 0 == 2 * angle(A, C, F) mod 360
By collinear_definition on I, B, C we get B in Line(C, I), C in Line(B, I), Line(B, I) == Line(C, I), 0 == 2 * angle(B, I, C) mod 360
By sas_anti_congruence on G, H, A, A, H, G we get anti_congruent_triangles(A, G, H, G, A, H)
By perpendicular_angle_conditions_v0 on C, E, D we get angle(C, E, D) == orientation(C, E, D) mod 360
By altitude_definition on D, I, B, Line(D, E) we get Line(D, E) == altitude(D, B, I)
By sas_anti_congruence on A, H, E, E, H, A we get anti_congruent_triangles(A, E, H, E, A, H)
By isosceles_triangle_properties on H, E, G we get distance(E, H) == distance(G, H), angle(E, G, H) == angle(H, E, G) mod 360
By altitude_definition on D, C, E, Line(D, E) we get Line(D, E) == altitude(D, C, E)
By sas_anti_congruence on A, H, G, G, H, A we get anti_congruent_triangles(A, G, H, G, A, H)
By collinear_definition on B, C, G we get C in Line(B, G), G in Line(B, C), Line(B, C) == Line(B, G), 0 == 2 * angle(C, B, G) mod 360
By altitude_definition on D, G, C, Line(D, E) we get Line(D, E) == altitude(D, C, G)
By collinear_definition on B, I, C we get I in Line(B, C), C in Line(B, I), Line(B, C) == Line(B, I), 0 == 2 * angle(I, B, C) mod 360
By collinear_definition on C, I, B we get I in Line(B, C), B in Line(C, I), Line(B, C) == Line(C, I), 0 == 2 * angle(I, C, B) mod 360
By collinear_definition on E, C, B we get C in Line(B, E), B in Line(C, E), Line(B, E) == Line(C, E), 0 == 2 * angle(C, E, B) mod 360
By altitude_definition on D, G, I, Line(D, E) we get Line(D, E) == altitude(D, G, I)
By isosceles_triangle_properties on H, F, A we get distance(A, H) == distance(F, H), angle(F, A, H) == angle(H, F, A) mod 360
By collinear_definition on C, F, A we get F in Line(A, C), A in Line(C, F), Line(A, C) == Line(C, F), 0 == 2 * angle(F, C, A) mod 360
By collinear_definition on B, C, I we get C in Line(B, I), I in Line(B, C), Line(B, C) == Line(B, I), 0 == 2 * angle(C, B, I) mod 360
By sas_anti_congruence on G, H, E, E, H, G we get anti_congruent_triangles(E, G, H, G, E, H)
By collinear_definition on I, C, B we get C in Line(B, I), B in Line(C, I), Line(B, I) == Line(C, I), 0 == 2 * angle(C, I, B) mod 360
By altitude_definition on D, A, F, Line(D, F) we get Line(D, F) == altitude(D, A, F)
By sas_anti_congruence on G, H, F, F, H, G we get anti_congruent_triangles(F, G, H, G, F, H)
By perpendicular_angle_conditions_v0 on D, F, C we get angle(D, F, C) == orientation(C, D, F) mod 360
By isosceles_triangle_properties on H, E, A we get distance(A, H) == distance(E, H), angle(E, A, H) == angle(H, E, A) mod 360
By collinear_definition on C, B, I we get B in Line(C, I), I in Line(B, C), Line(B, C) == Line(C, I), 0 == 2 * angle(B, C, I) mod 360
By perpendicular_angle_conditions_v0 on D, E, B we get angle(D, E, B) == orientation(B, D, E) mod 360
By isosceles_triangle_properties on H, E, F we get distance(E, H) == distance(F, H), angle(E, F, H) == angle(H, E, F) mod 360
By collinear_definition on C, B, E we get B in Line(C, E), E in Line(B, C), Line(B, C) == Line(C, E), 0 == 2 * angle(B, C, E) mod 360
By collinear_definition on B, G, C we get G in Line(B, C), C in Line(B, G), Line(B, C) == Line(B, G), 0 == 2 * angle(G, B, C) mod 360
By perpendicular_angle_conditions_v0 on D, E, C we get angle(D, E, C) == orientation(C, D, E) mod 360
By isosceles_triangle_properties on H, F, E we get distance(E, H) == distance(F, H), angle(F, E, H) == angle(H, F, E) mod 360
By collinear_definition on G, B, C we get B in Line(C, G), C in Line(B, G), Line(B, G) == Line(C, G), 0 == 2 * angle(B, G, C) mod 360
By perpendicular_angle_conditions_v0 on C, F, D we get angle(C, F, D) == orientation(C, F, D) mod 360
By sas_anti_congruence on F, H, E, E, H, F we get anti_congruent_triangles(E, F, H, F, E, H)
By collinear_definition on C, B, G we get B in Line(C, G), G in Line(B, C), Line(B, C) == Line(C, G), 0 == 2 * angle(B, C, G) mod 360
By isosceles_triangle_properties on H, F, G we get distance(F, H) == distance(G, H), angle(F, G, H) == angle(H, F, G) mod 360
By collinear_definition on B, E, C we get E in Line(B, C), C in Line(B, E), Line(B, C) == Line(B, E), 0 == 2 * angle(E, B, C) mod 360
By isosceles_triangle_properties on H, A, E we get distance(A, H) == distance(E, H), angle(A, E, H) == angle(H, A, E) mod 360
By isosceles_triangle_properties on H, A, G we get distance(A, H) == distance(G, H), angle(A, G, H) == angle(H, A, G) mod 360
By collinear_definition on C, G, B we get G in Line(B, C), B in Line(C, G), Line(B, C) == Line(C, G), 0 == 2 * angle(G, C, B) mod 360
By collinear_definition on E, B, C we get B in Line(C, E), C in Line(B, E), Line(B, E) == Line(C, E), 0 == 2 * angle(B, E, C) mod 360
By sas_anti_congruence on E, H, A, A, H, E we get anti_congruent_triangles(A, E, H, E, A, H)
By collinear_definition on G, C, B we get C in Line(B, G), B in Line(C, G), Line(B, G) == Line(C, G), 0 == 2 * angle(C, G, B) mod 360
By sas_anti_congruence on E, H, F, F, H, E we get anti_congruent_triangles(E, F, H, F, E, H)
By collinear_definition on C, E, B we get E in Line(B, C), B in Line(C, E), Line(B, C) == Line(C, E), 0 == 2 * angle(E, C, B) mod 360
By internal_angle_bisector_definition_v0 on C, D, B, A we get angle(C, A, D) == angle(D, A, B) mod 360
By internal_angle_bisector_definition_v0 on C, D, A, B we get angle(C, B, D) == angle(D, B, A) mod 360
By internal_angle_bisector_definition_v0 on A, D, C, B we get angle(A, B, D) == angle(D, B, C) mod 360
By internal_angle_bisector_definition_v0 on C, J, B, A we get angle(C, A, J) == angle(J, A, B) mod 360
By internal_angle_bisector_definition_v0 on B, D, C, A we get angle(B, A, D) == angle(D, A, C) mod 360
By internal_angle_bisector_definition_v0 on B, J, C, A we get angle(B, A, J) == angle(J, A, C) mod 360
By internal_angle_bisector_definition_v0 on C, I, B, A we get angle(C, A, I) == angle(I, A, B) mod 360
By internal_angle_bisector_definition_v0 on B, I, C, A we get angle(B, A, I) == angle(I, A, C) mod 360
By power_of_a_point_definition on C, F, A, c we get log(power_of_a_point(C, c)) == log(distance(C, F)) + log(distance(A, C))
By concurrent_sufficient_conditions on Line(A, G), Line(A, B), Line(A, H) we get concurrent(Line(A, B), Line(A, G), Line(A, H))
By concurrent_sufficient_conditions on Line(G, J), Line(F, G), Line(A, G) we get concurrent(Line(A, G), Line(F, G), Line(G, J))
By concurrent_sufficient_conditions on Line(E, H), f, Line(A, E) we get concurrent(f, Line(A, E), Line(E, H))
By concurrent_sufficient_conditions on Line(A, G), Line(G, J), f we get concurrent(f, Line(A, G), Line(G, J))
By concurrent_sufficient_conditions on Line(F, G), f, Line(G, J) we get concurrent(f, Line(F, G), Line(G, J))
By concurrent_sufficient_conditions on Line(E, H), Line(A, H), Line(F, H) we get concurrent(Line(A, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(G, J), Line(F, J), h we get concurrent(h, Line(F, J), Line(G, J))
By concurrent_sufficient_conditions on Line(F, I), Line(E, F), Line(F, H) we get concurrent(Line(E, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(D, F), Line(F, I), Line(F, H) we get concurrent(Line(D, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on g, h, Line(A, G) we get concurrent(g, h, Line(A, G))
By concurrent_sufficient_conditions on Line(F, G), Line(F, H), Line(F, J) we get concurrent(Line(F, G), Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on Line(F, J), g, Line(F, I) we get concurrent(g, Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on g, Line(A, H), Line(A, G) we get concurrent(g, Line(A, G), Line(A, H))
By concurrent_sufficient_conditions on Line(F, I), g, Line(F, G) we get concurrent(g, Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on Line(A, H), h, Line(A, E) we get concurrent(h, Line(A, E), Line(A, H))
By concurrent_sufficient_conditions on Line(A, H), Line(A, E), Line(A, B) we get concurrent(Line(A, B), Line(A, E), Line(A, H))
By concyclic_sufficient_conditions_v1 on D, E, C, F we get concyclic(C, D, E, F)
By concurrent_sufficient_conditions on Line(F, H), Line(E, H), Line(G, H) we get concurrent(Line(E, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, J), Line(F, G), Line(F, I) we get concurrent(Line(F, G), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(A, B), h, g we get concurrent(g, h, Line(A, B))
By concurrent_sufficient_conditions on Line(F, I), Line(F, H), Line(D, F) we get concurrent(Line(D, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(E, F), Line(F, I), Line(F, H) we get concurrent(Line(E, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(A, B), Line(A, G), Line(A, E) we get concurrent(Line(A, B), Line(A, E), Line(A, G))
By concurrent_sufficient_conditions on g, Line(F, I), Line(D, F) we get concurrent(g, Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(D, F), g, Line(F, J) we get concurrent(g, Line(D, F), Line(F, J))
By concurrent_sufficient_conditions on h, g, Line(A, G) we get concurrent(g, h, Line(A, G))
By concurrent_sufficient_conditions on Line(A, G), Line(A, E), Line(A, B) we get concurrent(Line(A, B), Line(A, E), Line(A, G))
By concurrent_sufficient_conditions on Line(F, G), Line(F, H), Line(E, F) we get concurrent(Line(E, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on g, Line(F, H), Line(F, G) we get concurrent(g, Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(A, H), Line(A, E), Line(A, G) we get concurrent(Line(A, E), Line(A, G), Line(A, H))
By concurrent_sufficient_conditions on Line(G, J), Line(A, G), Line(G, H) we get concurrent(Line(A, G), Line(G, H), Line(G, J))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), Line(F, J) we get concurrent(Line(D, F), Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on Line(A, B), h, Line(A, E) we get concurrent(h, Line(A, B), Line(A, E))
By concurrent_sufficient_conditions on Line(F, G), Line(D, F), Line(F, I) we get concurrent(Line(D, F), Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on Line(E, F), Line(A, E), f we get concurrent(f, Line(A, E), Line(E, F))
By concurrent_sufficient_conditions on Line(F, H), Line(F, G), Line(E, F) we get concurrent(Line(E, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(A, E), g, Line(A, B) we get concurrent(g, Line(A, B), Line(A, E))
By concurrent_sufficient_conditions on Line(F, J), Line(D, F), g we get concurrent(g, Line(D, F), Line(F, J))
By concurrent_sufficient_conditions on Line(F, H), g, Line(F, I) we get concurrent(g, Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on i, f, Line(A, B) we get concurrent(f, i, Line(A, B))
By concurrent_sufficient_conditions on Line(A, E), Line(E, H), Line(E, F) we get concurrent(Line(A, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(E, F), Line(E, H), f we get concurrent(f, Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(F, J), g, Line(E, F) we get concurrent(g, Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on h, g, Line(A, B) we get concurrent(g, h, Line(A, B))
By concurrent_sufficient_conditions on Line(A, E), Line(A, B), Line(A, G) we get concurrent(Line(A, B), Line(A, E), Line(A, G))
By concurrent_sufficient_conditions on Line(A, B), f, i we get concurrent(f, i, Line(A, B))
By concurrent_sufficient_conditions on Line(A, E), Line(E, F), f we get concurrent(f, Line(A, E), Line(E, F))
By concurrent_sufficient_conditions on Line(F, G), Line(D, F), g we get concurrent(g, Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on Line(A, E), Line(D, E), Line(E, H) we get concurrent(Line(A, E), Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on g, Line(F, J), Line(D, F) we get concurrent(g, Line(D, F), Line(F, J))
By concurrent_sufficient_conditions on Line(A, E), h, Line(A, B) we get concurrent(h, Line(A, B), Line(A, E))
By concurrent_sufficient_conditions on Line(F, I), g, Line(E, F) we get concurrent(g, Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(F, H), Line(D, F), Line(F, G) we get concurrent(Line(D, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(F, G), Line(E, F), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(D, E), Line(A, E), f we get concurrent(f, Line(A, E), Line(D, E))
By concurrent_sufficient_conditions on Line(E, H), Line(E, F), Line(A, E) we get concurrent(Line(A, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(A, B), g, Line(A, H) we get concurrent(g, Line(A, B), Line(A, H))
By concurrent_sufficient_conditions on Line(D, F), Line(F, H), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(E, F), g, Line(F, G) we get concurrent(g, Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(E, F), Line(E, H), Line(A, E) we get concurrent(Line(A, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(G, J), f, Line(F, G) we get concurrent(f, Line(F, G), Line(G, J))
By concurrent_sufficient_conditions on Line(A, H), Line(F, H), Line(E, H) we get concurrent(Line(A, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(F, H), Line(F, J), Line(E, F) we get concurrent(Line(E, F), Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on h, f, Line(F, I) we get concurrent(f, h, Line(F, I))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), Line(F, G) we get concurrent(Line(D, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), Line(F, J) we get concurrent(Line(D, F), Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on Line(A, B), h, Line(A, G) we get concurrent(h, Line(A, B), Line(A, G))
By concurrent_sufficient_conditions on Line(A, G), Line(A, E), g we get concurrent(g, Line(A, E), Line(A, G))
By concurrent_sufficient_conditions on Line(G, H), Line(F, G), Line(G, J) we get concurrent(Line(F, G), Line(G, H), Line(G, J))
By concurrent_sufficient_conditions on Line(G, H), Line(A, G), f we get concurrent(f, Line(A, G), Line(G, H))
By concurrent_sufficient_conditions on g, Line(D, F), Line(F, I) we get concurrent(g, Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(F, H), Line(F, I), Line(F, G) we get concurrent(Line(F, G), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(F, I), Line(F, J), Line(E, F) we get concurrent(Line(E, F), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(G, J), Line(A, G), Line(F, G) we get concurrent(Line(A, G), Line(F, G), Line(G, J))
By concurrent_sufficient_conditions on Line(D, E), Line(E, H), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), Line(F, G) we get concurrent(Line(D, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on g, Line(A, E), Line(A, G) we get concurrent(g, Line(A, E), Line(A, G))
By concurrent_sufficient_conditions on Line(F, G), Line(F, J), g we get concurrent(g, Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(A, H), Line(E, H), Line(F, H) we get concurrent(Line(A, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(F, G), Line(D, F), Line(F, H) we get concurrent(Line(D, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(A, B), g, Line(A, G) we get concurrent(g, Line(A, B), Line(A, G))
By concurrent_sufficient_conditions on Line(D, F), Line(F, H), Line(F, I) we get concurrent(Line(D, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), Line(E, H) we get concurrent(Line(D, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(D, F), Line(F, J), Line(F, G) we get concurrent(Line(D, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(A, H), Line(E, H), Line(G, H) we get concurrent(Line(A, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(E, F), Line(F, H), Line(F, J) we get concurrent(Line(E, F), Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on Line(D, F), g, Line(F, G) we get concurrent(g, Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on Line(F, I), Line(F, H), g we get concurrent(g, Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(F, J), Line(E, F), Line(F, G) we get concurrent(Line(E, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(E, F), Line(F, J), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on f, Line(G, H), Line(G, J) we get concurrent(f, Line(G, H), Line(G, J))
By concurrent_sufficient_conditions on Line(A, B), Line(A, H), g we get concurrent(g, Line(A, B), Line(A, H))
By concurrent_sufficient_conditions on Line(A, G), Line(A, E), h we get concurrent(h, Line(A, E), Line(A, G))
By concurrent_sufficient_conditions on Line(A, B), Line(A, H), Line(A, E) we get concurrent(Line(A, B), Line(A, E), Line(A, H))
By concurrent_sufficient_conditions on Line(D, F), Line(F, J), Line(F, H) we get concurrent(Line(D, F), Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on Line(A, G), g, Line(A, H) we get concurrent(g, Line(A, G), Line(A, H))
By concurrent_sufficient_conditions on Line(A, G), h, Line(A, E) we get concurrent(h, Line(A, E), Line(A, G))
By concurrent_sufficient_conditions on f, Line(A, E), Line(E, F) we get concurrent(f, Line(A, E), Line(E, F))
By concurrent_sufficient_conditions on Line(E, F), Line(F, G), Line(F, I) we get concurrent(Line(E, F), Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on Line(D, E), Line(E, H), Line(A, E) we get concurrent(Line(A, E), Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(G, H), Line(G, J), f we get concurrent(f, Line(G, H), Line(G, J))
By concurrent_sufficient_conditions on Line(F, J), Line(F, G), Line(F, H) we get concurrent(Line(F, G), Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on g, Line(A, G), h we get concurrent(g, h, Line(A, G))
By concurrent_sufficient_conditions on Line(A, H), Line(A, B), h we get concurrent(h, Line(A, B), Line(A, H))
By concurrent_sufficient_conditions on Line(F, J), Line(F, I), Line(F, H) we get concurrent(Line(F, H), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(E, F), Line(F, H), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on h, Line(G, J), Line(F, J) we get concurrent(h, Line(F, J), Line(G, J))
By concurrent_sufficient_conditions on g, Line(F, G), Line(E, F) we get concurrent(g, Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(F, J), Line(F, H), Line(D, F) we get concurrent(Line(D, F), Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on Line(F, I), Line(F, J), g we get concurrent(g, Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(D, F), Line(F, G), Line(F, J) we get concurrent(Line(D, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(F, J), Line(D, F), Line(F, G) we get concurrent(Line(D, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(A, G), Line(A, H), Line(A, E) we get concurrent(Line(A, E), Line(A, G), Line(A, H))
By concurrent_sufficient_conditions on Line(F, G), Line(F, I), Line(F, H) we get concurrent(Line(F, G), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on f, Line(D, E), Line(A, E) we get concurrent(f, Line(A, E), Line(D, E))
By concurrent_sufficient_conditions on h, Line(A, G), Line(A, E) we get concurrent(h, Line(A, E), Line(A, G))
By concurrent_sufficient_conditions on g, Line(A, G), Line(A, E) we get concurrent(g, Line(A, E), Line(A, G))
By concurrent_sufficient_conditions on Line(F, I), Line(F, J), Line(F, H) we get concurrent(Line(F, H), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(G, H), Line(G, J), Line(A, G) we get concurrent(Line(A, G), Line(G, H), Line(G, J))
By concurrent_sufficient_conditions on Line(F, H), Line(F, I), g we get concurrent(g, Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on g, Line(F, G), Line(D, F) we get concurrent(g, Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on Line(A, G), h, g we get concurrent(g, h, Line(A, G))
By concurrent_sufficient_conditions on Line(A, G), Line(G, J), Line(F, G) we get concurrent(Line(A, G), Line(F, G), Line(G, J))
By concurrent_sufficient_conditions on Line(F, G), Line(G, J), f we get concurrent(f, Line(F, G), Line(G, J))
By concurrent_sufficient_conditions on h, Line(A, B), Line(A, G) we get concurrent(h, Line(A, B), Line(A, G))
By concurrent_sufficient_conditions on f, Line(E, F), Line(D, E) we get concurrent(f, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on g, Line(A, H), h we get concurrent(g, h, Line(A, H))
By concurrent_sufficient_conditions on Line(A, H), Line(A, G), g we get concurrent(g, Line(A, G), Line(A, H))
By concurrent_sufficient_conditions on Line(F, G), Line(E, F), Line(F, J) we get concurrent(Line(E, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on g, Line(F, H), Line(D, F) we get concurrent(g, Line(D, F), Line(F, H))
By concurrent_sufficient_conditions on f, h, Line(F, I) we get concurrent(f, h, Line(F, I))
By concurrent_sufficient_conditions on Line(D, E), f, Line(A, E) we get concurrent(f, Line(A, E), Line(D, E))
By concurrent_sufficient_conditions on Line(A, G), Line(F, G), Line(G, H) we get concurrent(Line(A, G), Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(F, G), Line(G, H), Line(G, J) we get concurrent(Line(F, G), Line(G, H), Line(G, J))
By concurrent_sufficient_conditions on Line(F, J), Line(F, I), g we get concurrent(g, Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on f, Line(A, E), Line(E, H) we get concurrent(f, Line(A, E), Line(E, H))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), Line(A, E) we get concurrent(Line(A, E), Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(A, B), Line(A, E), h we get concurrent(h, Line(A, B), Line(A, E))
By concurrent_sufficient_conditions on Line(F, H), Line(D, F), g we get concurrent(g, Line(D, F), Line(F, H))
By concurrent_sufficient_conditions on Line(F, H), Line(F, J), Line(F, G) we get concurrent(Line(F, G), Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on Line(F, H), Line(A, H), Line(E, H) we get concurrent(Line(A, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(E, H), Line(A, E), Line(D, E) we get concurrent(Line(A, E), Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(A, H), Line(A, E), g we get concurrent(g, Line(A, E), Line(A, H))
By concurrent_sufficient_conditions on Line(F, G), g, Line(E, F) we get concurrent(g, Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), Line(F, I) we get concurrent(Line(D, F), Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(D, E), Line(E, H), f we get concurrent(f, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(A, E), f, Line(E, H) we get concurrent(f, Line(A, E), Line(E, H))
By concurrent_sufficient_conditions on h, g, Line(A, E) we get concurrent(g, h, Line(A, E))
By concurrent_sufficient_conditions on Line(G, H), Line(F, H), Line(A, H) we get concurrent(Line(A, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, H), Line(F, I), Line(E, F) we get concurrent(Line(E, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on g, Line(C, D), f we get concurrent(f, g, Line(C, D))
By concurrent_sufficient_conditions on Line(F, H), Line(F, I), Line(D, F) we get concurrent(Line(D, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(A, E), f, Line(D, E) we get concurrent(f, Line(A, E), Line(D, E))
By concurrent_sufficient_conditions on Line(F, I), Line(F, G), Line(D, F) we get concurrent(Line(D, F), Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on Line(E, H), f, Line(D, E) we get concurrent(f, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(F, I), f, h we get concurrent(f, h, Line(F, I))
By concurrent_sufficient_conditions on Line(D, F), Line(F, I), g we get concurrent(g, Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(G, J), Line(F, G), Line(G, H) we get concurrent(Line(F, G), Line(G, H), Line(G, J))
By concurrent_sufficient_conditions on Line(A, E), Line(E, F), Line(E, H) we get concurrent(Line(A, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(E, H), Line(D, E), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on h, Line(A, B), Line(A, H) we get concurrent(h, Line(A, B), Line(A, H))
By concurrent_sufficient_conditions on Line(E, H), Line(F, H), Line(G, H) we get concurrent(Line(E, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, G), Line(G, H), f we get concurrent(f, Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(F, I), Line(F, H), Line(F, G) we get concurrent(Line(F, G), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(A, B), Line(A, H), Line(A, G) we get concurrent(Line(A, B), Line(A, G), Line(A, H))
By concurrent_sufficient_conditions on f, Line(F, G), Line(A, G) we get concurrent(f, Line(A, G), Line(F, G))
By concurrent_sufficient_conditions on Line(A, E), Line(E, F), Line(D, E) we get concurrent(Line(A, E), Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(A, G), h, Line(A, B) we get concurrent(h, Line(A, B), Line(A, G))
By concurrent_sufficient_conditions on Line(F, H), Line(E, H), Line(A, H) we get concurrent(Line(A, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on f, Line(F, I), h we get concurrent(f, h, Line(F, I))
By concurrent_sufficient_conditions on g, Line(E, F), Line(D, F) we get concurrent(g, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(A, B), g, h we get concurrent(g, h, Line(A, B))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), Line(F, H) we get concurrent(Line(D, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(E, F), g, Line(D, F) we get concurrent(g, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on g, Line(F, J), Line(F, H) we get concurrent(g, Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on h, Line(A, H), Line(A, B) we get concurrent(h, Line(A, B), Line(A, H))
By concurrent_sufficient_conditions on Line(A, E), Line(A, H), Line(A, G) we get concurrent(Line(A, E), Line(A, G), Line(A, H))
By concurrent_sufficient_conditions on Line(F, J), Line(G, J), h we get concurrent(h, Line(F, J), Line(G, J))
By concurrent_sufficient_conditions on Line(F, G), Line(A, G), Line(G, J) we get concurrent(Line(A, G), Line(F, G), Line(G, J))
By concurrent_sufficient_conditions on Line(F, H), Line(A, H), Line(G, H) we get concurrent(Line(A, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on f, Line(G, H), Line(F, G) we get concurrent(f, Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(F, H), Line(G, H), Line(E, H) we get concurrent(Line(E, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, G), Line(D, F), Line(F, J) we get concurrent(Line(D, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(F, J), Line(F, H), Line(F, I) we get concurrent(Line(F, H), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(F, H), Line(D, F), Line(F, I) we get concurrent(Line(D, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(F, J), Line(F, H), g we get concurrent(g, Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on Line(D, E), f, Line(E, H) we get concurrent(f, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(A, G), f, Line(G, H) we get concurrent(f, Line(A, G), Line(G, H))
By concurrent_sufficient_conditions on Line(A, G), g, Line(A, E) we get concurrent(g, Line(A, E), Line(A, G))
By concurrent_sufficient_conditions on Line(A, B), Line(A, E), Line(A, G) we get concurrent(Line(A, B), Line(A, E), Line(A, G))
By concurrent_sufficient_conditions on Line(A, G), Line(A, B), g we get concurrent(g, Line(A, B), Line(A, G))
By concurrent_sufficient_conditions on Line(A, E), Line(E, H), f we get concurrent(f, Line(A, E), Line(E, H))
By concurrent_sufficient_conditions on Line(A, E), Line(A, G), Line(A, H) we get concurrent(Line(A, E), Line(A, G), Line(A, H))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), g we get concurrent(g, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(A, E), h, Line(A, G) we get concurrent(h, Line(A, E), Line(A, G))
By concurrent_sufficient_conditions on h, Line(A, G), Line(A, H) we get concurrent(h, Line(A, G), Line(A, H))
By concurrent_sufficient_conditions on Line(D, E), Line(A, E), Line(E, H) we get concurrent(Line(A, E), Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on g, Line(A, B), Line(A, G) we get concurrent(g, Line(A, B), Line(A, G))
By concurrent_sufficient_conditions on g, Line(F, J), Line(F, G) we get concurrent(g, Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on f, g, Line(C, D) we get concurrent(f, g, Line(C, D))
By concurrent_sufficient_conditions on Line(F, H), Line(F, G), Line(F, J) we get concurrent(Line(F, G), Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on g, Line(F, I), Line(F, G) we get concurrent(g, Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on Line(E, H), Line(E, F), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on f, Line(E, F), Line(A, E) we get concurrent(f, Line(A, E), Line(E, F))
By concurrent_sufficient_conditions on Line(A, E), h, Line(A, H) we get concurrent(h, Line(A, E), Line(A, H))
By concurrent_sufficient_conditions on Line(D, F), g, Line(F, I) we get concurrent(g, Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(E, F), Line(F, G), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(A, G), g, Line(A, B) we get concurrent(g, Line(A, B), Line(A, G))
By concurrent_sufficient_conditions on Line(A, G), Line(G, J), Line(G, H) we get concurrent(Line(A, G), Line(G, H), Line(G, J))
By concurrent_sufficient_conditions on Line(F, J), Line(E, F), Line(F, H) we get concurrent(Line(E, F), Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on Line(A, E), h, g we get concurrent(g, h, Line(A, E))
By concurrent_sufficient_conditions on Line(G, H), Line(A, H), Line(E, H) we get concurrent(Line(A, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, G), Line(G, J), Line(G, H) we get concurrent(Line(F, G), Line(G, H), Line(G, J))
By concurrent_sufficient_conditions on g, f, Line(C, D) we get concurrent(f, g, Line(C, D))
By concurrent_sufficient_conditions on Line(A, E), Line(A, B), h we get concurrent(h, Line(A, B), Line(A, E))
By concurrent_sufficient_conditions on Line(A, G), Line(F, G), f we get concurrent(f, Line(A, G), Line(F, G))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), f we get concurrent(f, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on h, Line(A, H), Line(A, E) we get concurrent(h, Line(A, E), Line(A, H))
By concurrent_sufficient_conditions on Line(G, H), f, Line(F, G) we get concurrent(f, Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(F, H), g, Line(F, J) we get concurrent(g, Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on Line(G, H), Line(E, H), Line(F, H) we get concurrent(Line(E, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on g, Line(F, J), Line(F, I) we get concurrent(g, Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(A, E), Line(A, H), g we get concurrent(g, Line(A, E), Line(A, H))
By concurrent_sufficient_conditions on Line(G, H), Line(A, G), Line(G, J) we get concurrent(Line(A, G), Line(G, H), Line(G, J))
By concurrent_sufficient_conditions on Line(F, I), Line(F, G), Line(F, J) we get concurrent(Line(F, G), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(E, F), Line(E, H), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(F, J), Line(F, I), Line(F, G) we get concurrent(Line(F, G), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(D, F), Line(F, G), Line(F, I) we get concurrent(Line(D, F), Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on h, g, Line(A, H) we get concurrent(g, h, Line(A, H))
By concurrent_sufficient_conditions on f, Line(E, H), Line(E, F) we get concurrent(f, Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(F, I), g, Line(F, H) we get concurrent(g, Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(E, H), Line(E, F), f we get concurrent(f, Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(A, E), g, Line(A, H) we get concurrent(g, Line(A, E), Line(A, H))
By concurrent_sufficient_conditions on Line(E, F), Line(F, J), Line(F, I) we get concurrent(Line(E, F), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(F, G), g, Line(F, J) we get concurrent(g, Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(A, G), Line(A, B), Line(A, E) we get concurrent(Line(A, B), Line(A, E), Line(A, G))
By concurrent_sufficient_conditions on Line(A, H), g, Line(A, B) we get concurrent(g, Line(A, B), Line(A, H))
By concurrent_sufficient_conditions on Line(E, F), Line(F, I), g we get concurrent(g, Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(G, J), Line(G, H), f we get concurrent(f, Line(G, H), Line(G, J))
By concurrent_sufficient_conditions on Line(A, H), h, Line(A, G) we get concurrent(h, Line(A, G), Line(A, H))
By concurrent_sufficient_conditions on g, Line(F, J), Line(E, F) we get concurrent(g, Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on Line(E, F), Line(F, H), Line(F, G) we get concurrent(Line(E, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on g, Line(D, F), Line(F, G) we get concurrent(g, Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), Line(F, H) we get concurrent(Line(D, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on g, Line(A, E), h we get concurrent(g, h, Line(A, E))
By concurrent_sufficient_conditions on Line(E, F), Line(F, G), g we get concurrent(g, Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(E, H), Line(D, E), Line(A, E) we get concurrent(Line(A, E), Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(A, G), Line(G, H), f we get concurrent(f, Line(A, G), Line(G, H))
By concurrent_sufficient_conditions on Line(F, H), Line(F, G), g we get concurrent(g, Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(D, F), Line(F, H), g we get concurrent(g, Line(D, F), Line(F, H))
By concurrent_sufficient_conditions on f, Line(G, J), Line(F, G) we get concurrent(f, Line(F, G), Line(G, J))
By concurrent_sufficient_conditions on Line(F, G), Line(F, I), Line(D, F) we get concurrent(Line(D, F), Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on Line(E, H), Line(F, H), Line(A, H) we get concurrent(Line(A, H), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on f, Line(G, J), Line(A, G) we get concurrent(f, Line(A, G), Line(G, J))
By concurrent_sufficient_conditions on Line(F, G), g, Line(F, H) we get concurrent(g, Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(F, G), Line(F, H), Line(D, F) we get concurrent(Line(D, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on g, Line(E, F), Line(F, G) we get concurrent(g, Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on g, Line(F, G), Line(F, H) we get concurrent(g, Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(E, H), Line(A, E), Line(E, F) we get concurrent(Line(A, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on f, Line(D, E), Line(E, F) we get concurrent(f, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(F, G), Line(F, H), g we get concurrent(g, Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(A, H), Line(G, H), Line(F, H) we get concurrent(Line(A, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(A, G), Line(F, G), Line(G, J) we get concurrent(Line(A, G), Line(F, G), Line(G, J))
By concurrent_sufficient_conditions on Line(F, H), Line(E, F), g we get concurrent(g, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(D, E), Line(A, E), Line(E, F) we get concurrent(Line(A, E), Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(F, I), Line(E, F), Line(F, G) we get concurrent(Line(E, F), Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on Line(E, H), f, Line(E, F) we get concurrent(f, Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(A, G), Line(G, H), Line(F, G) we get concurrent(Line(A, G), Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(F, J), Line(E, F), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on Line(F, I), Line(F, J), Line(F, G) we get concurrent(Line(F, G), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(E, F), Line(F, I), Line(F, J) we get concurrent(Line(E, F), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(D, F), Line(F, I), Line(F, J) we get concurrent(Line(D, F), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(E, F), Line(F, J), g we get concurrent(g, Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on Line(F, J), Line(D, F), Line(F, H) we get concurrent(Line(D, F), Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on g, Line(F, G), Line(F, I) we get concurrent(g, Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on Line(F, G), Line(D, F), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on f, Line(G, J), Line(G, H) we get concurrent(f, Line(G, H), Line(G, J))
By concurrent_sufficient_conditions on Line(F, G), Line(F, J), Line(F, I) we get concurrent(Line(F, G), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(F, J), Line(F, G), Line(E, F) we get concurrent(Line(E, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on f, Line(E, H), Line(D, E) we get concurrent(f, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on h, Line(A, B), Line(A, E) we get concurrent(h, Line(A, B), Line(A, E))
By concurrent_sufficient_conditions on Line(F, G), Line(F, J), Line(F, H) we get concurrent(Line(F, G), Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on Line(A, B), Line(A, E), g we get concurrent(g, Line(A, B), Line(A, E))
By concurrent_sufficient_conditions on Line(F, G), Line(F, J), Line(E, F) we get concurrent(Line(E, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(E, H), Line(G, H), Line(F, H) we get concurrent(Line(E, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(A, H), Line(A, B), g we get concurrent(g, Line(A, B), Line(A, H))
By concurrent_sufficient_conditions on g, Line(F, I), Line(F, H) we get concurrent(g, Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(F, G), Line(E, F), Line(F, I) we get concurrent(Line(E, F), Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on g, Line(A, H), Line(A, E) we get concurrent(g, Line(A, E), Line(A, H))
By concurrent_sufficient_conditions on g, h, Line(A, H) we get concurrent(g, h, Line(A, H))
By concurrent_sufficient_conditions on Line(E, F), Line(F, G), Line(F, H) we get concurrent(Line(E, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on f, i, Line(A, B) we get concurrent(f, i, Line(A, B))
By concurrent_sufficient_conditions on Line(E, F), f, Line(D, E) we get concurrent(f, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on g, h, Line(A, E) we get concurrent(g, h, Line(A, E))
By concurrent_sufficient_conditions on Line(F, J), Line(F, H), Line(E, F) we get concurrent(Line(E, F), Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on Line(A, H), g, h we get concurrent(g, h, Line(A, H))
By concurrent_sufficient_conditions on Line(G, H), Line(G, J), Line(F, G) we get concurrent(Line(F, G), Line(G, H), Line(G, J))
By concurrent_sufficient_conditions on Line(F, H), g, Line(E, F) we get concurrent(g, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on f, Line(C, D), g we get concurrent(f, g, Line(C, D))
By concurrent_sufficient_conditions on g, Line(E, F), Line(F, I) we get concurrent(g, Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(D, F), Line(F, H), Line(F, J) we get concurrent(Line(D, F), Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on Line(G, H), Line(A, H), Line(F, H) we get concurrent(Line(A, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(A, G), g, h we get concurrent(g, h, Line(A, G))
By concurrent_sufficient_conditions on g, Line(F, H), Line(F, I) we get concurrent(g, Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on g, Line(A, B), Line(A, E) we get concurrent(g, Line(A, B), Line(A, E))
By concurrent_sufficient_conditions on f, Line(E, F), Line(E, H) we get concurrent(f, Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(A, H), Line(F, H), Line(G, H) we get concurrent(Line(A, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(E, F), f, Line(A, E) we get concurrent(f, Line(A, E), Line(E, F))
By concurrent_sufficient_conditions on Line(A, H), g, Line(A, G) we get concurrent(g, Line(A, G), Line(A, H))
By concurrent_sufficient_conditions on g, Line(A, G), Line(A, H) we get concurrent(g, Line(A, G), Line(A, H))
By concurrent_sufficient_conditions on Line(G, H), Line(F, H), Line(E, H) we get concurrent(Line(E, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(A, G), f, Line(G, J) we get concurrent(f, Line(A, G), Line(G, J))
By concurrent_sufficient_conditions on Line(A, E), Line(A, H), h we get concurrent(h, Line(A, E), Line(A, H))
By concurrent_sufficient_conditions on Line(C, D), g, f we get concurrent(f, g, Line(C, D))
By concurrent_sufficient_conditions on Line(F, J), Line(D, F), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on Line(A, B), Line(A, E), Line(A, H) we get concurrent(Line(A, B), Line(A, E), Line(A, H))
By concurrent_sufficient_conditions on h, Line(A, E), Line(A, H) we get concurrent(h, Line(A, E), Line(A, H))
By concurrent_sufficient_conditions on Line(F, H), Line(F, I), Line(F, J) we get concurrent(Line(F, H), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(A, H), Line(A, G), Line(A, B) we get concurrent(Line(A, B), Line(A, G), Line(A, H))
By concurrent_sufficient_conditions on Line(F, I), g, Line(D, F) we get concurrent(g, Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(E, F), Line(F, I), Line(F, G) we get concurrent(Line(E, F), Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on Line(F, I), Line(D, F), g we get concurrent(g, Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on Line(F, G), Line(F, H), Line(F, I) we get concurrent(Line(F, G), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(A, H), Line(A, G), h we get concurrent(h, Line(A, G), Line(A, H))
By concurrent_sufficient_conditions on Line(A, E), Line(D, E), f we get concurrent(f, Line(A, E), Line(D, E))
By concurrent_sufficient_conditions on Line(D, F), Line(F, G), Line(F, H) we get concurrent(Line(D, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(G, J), f, Line(A, G) we get concurrent(f, Line(A, G), Line(G, J))
By concurrent_sufficient_conditions on Line(E, F), g, Line(F, I) we get concurrent(g, Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(F, G), f, Line(G, H) we get concurrent(f, Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(F, G), Line(F, J), Line(D, F) we get concurrent(Line(D, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(A, B), i, f we get concurrent(f, i, Line(A, B))
By concurrent_sufficient_conditions on Line(F, H), Line(D, F), Line(F, J) we get concurrent(Line(D, F), Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on Line(A, E), g, h we get concurrent(g, h, Line(A, E))
By concurrent_sufficient_conditions on Line(G, J), Line(A, G), f we get concurrent(f, Line(A, G), Line(G, J))
By concurrent_sufficient_conditions on Line(F, H), Line(E, F), Line(F, G) we get concurrent(Line(E, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(A, H), Line(A, G), Line(A, E) we get concurrent(Line(A, E), Line(A, G), Line(A, H))
By concurrent_sufficient_conditions on h, Line(A, G), Line(A, B) we get concurrent(h, Line(A, B), Line(A, G))
By concurrent_sufficient_conditions on Line(F, H), Line(D, F), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(A, E), Line(A, G), h we get concurrent(h, Line(A, E), Line(A, G))
By concurrent_sufficient_conditions on Line(A, H), Line(A, B), Line(A, E) we get concurrent(Line(A, B), Line(A, E), Line(A, H))
By concurrent_sufficient_conditions on Line(G, H), Line(F, G), f we get concurrent(f, Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(F, J), h, Line(G, J) we get concurrent(h, Line(F, J), Line(G, J))
By concurrent_sufficient_conditions on Line(F, G), f, Line(A, G) we get concurrent(f, Line(A, G), Line(F, G))
By concurrent_sufficient_conditions on Line(D, F), Line(F, J), g we get concurrent(g, Line(D, F), Line(F, J))
By concurrent_sufficient_conditions on h, Line(A, H), g we get concurrent(g, h, Line(A, H))
By concurrent_sufficient_conditions on Line(F, G), Line(A, G), Line(G, H) we get concurrent(Line(A, G), Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on f, Line(E, H), Line(A, E) we get concurrent(f, Line(A, E), Line(E, H))
By concurrent_sufficient_conditions on Line(F, J), g, Line(F, G) we get concurrent(g, Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on g, Line(E, F), Line(F, H) we get concurrent(g, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(F, H), g, Line(D, F) we get concurrent(g, Line(D, F), Line(F, H))
By concurrent_sufficient_conditions on Line(F, J), Line(E, F), g we get concurrent(g, Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on g, Line(D, F), Line(F, J) we get concurrent(g, Line(D, F), Line(F, J))
By concurrent_sufficient_conditions on Line(F, H), Line(F, G), Line(D, F) we get concurrent(Line(D, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(F, J), Line(F, I), Line(D, F) we get concurrent(Line(D, F), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(D, E), f, Line(E, F) we get concurrent(f, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(A, H), Line(G, H), Line(E, H) we get concurrent(Line(A, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, J), Line(D, F), Line(F, I) we get concurrent(Line(D, F), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(G, J), f, Line(G, H) we get concurrent(f, Line(G, H), Line(G, J))
By concurrent_sufficient_conditions on Line(A, E), Line(A, H), Line(A, B) we get concurrent(Line(A, B), Line(A, E), Line(A, H))
By concurrent_sufficient_conditions on Line(F, I), Line(F, G), Line(E, F) we get concurrent(Line(E, F), Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on g, Line(A, G), Line(A, B) we get concurrent(g, Line(A, B), Line(A, G))
By concurrent_sufficient_conditions on Line(A, G), Line(A, B), h we get concurrent(h, Line(A, B), Line(A, G))
By concurrent_sufficient_conditions on Line(F, I), Line(D, F), Line(F, J) we get concurrent(Line(D, F), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(F, J), g, Line(F, H) we get concurrent(g, Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on Line(A, G), h, Line(A, H) we get concurrent(h, Line(A, G), Line(A, H))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), Line(E, H) we get concurrent(Line(D, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(F, J), Line(F, G), Line(D, F) we get concurrent(Line(D, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(E, F), Line(F, H), Line(F, I) we get concurrent(Line(E, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(F, H), Line(F, J), Line(F, I) we get concurrent(Line(F, H), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(F, I), g, Line(F, J) we get concurrent(g, Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(F, H), Line(E, F), Line(F, J) we get concurrent(Line(E, F), Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on Line(A, E), g, Line(A, G) we get concurrent(g, Line(A, E), Line(A, G))
By concurrent_sufficient_conditions on h, Line(A, E), Line(A, G) we get concurrent(h, Line(A, E), Line(A, G))
By concurrent_sufficient_conditions on Line(A, G), f, Line(F, G) we get concurrent(f, Line(A, G), Line(F, G))
By concurrent_sufficient_conditions on Line(F, G), g, Line(F, I) we get concurrent(g, Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on h, Line(A, G), g we get concurrent(g, h, Line(A, G))
By concurrent_sufficient_conditions on Line(E, F), Line(F, H), g we get concurrent(g, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(D, F), Line(F, J), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), Line(F, I) we get concurrent(Line(D, F), Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(G, H), Line(A, G), Line(F, G) we get concurrent(Line(A, G), Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on f, Line(A, G), Line(F, G) we get concurrent(f, Line(A, G), Line(F, G))
By concurrent_sufficient_conditions on Line(F, I), Line(E, F), Line(F, J) we get concurrent(Line(E, F), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on h, Line(A, E), g we get concurrent(g, h, Line(A, E))
By concurrent_sufficient_conditions on g, h, Line(A, B) we get concurrent(g, h, Line(A, B))
By concurrent_sufficient_conditions on Line(E, F), g, Line(F, J) we get concurrent(g, Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on Line(F, J), Line(F, I), Line(E, F) we get concurrent(Line(E, F), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(G, J), Line(G, H), Line(A, G) we get concurrent(Line(A, G), Line(G, H), Line(G, J))
By concurrent_sufficient_conditions on f, Line(A, B), i we get concurrent(f, i, Line(A, B))
By concurrent_sufficient_conditions on g, Line(F, I), Line(F, J) we get concurrent(g, Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(F, I), Line(D, F), Line(F, H) we get concurrent(Line(D, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(F, H), Line(E, F), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(E, H), Line(A, E), f we get concurrent(f, Line(A, E), Line(E, H))
By concurrent_sufficient_conditions on Line(A, H), h, g we get concurrent(g, h, Line(A, H))
By concurrent_sufficient_conditions on g, Line(A, B), Line(A, H) we get concurrent(g, Line(A, B), Line(A, H))
By concurrent_sufficient_conditions on Line(G, J), Line(G, H), Line(F, G) we get concurrent(Line(F, G), Line(G, H), Line(G, J))
By concurrent_sufficient_conditions on Line(D, F), Line(F, G), g we get concurrent(g, Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on g, Line(A, B), h we get concurrent(g, h, Line(A, B))
By concurrent_sufficient_conditions on f, Line(F, G), Line(G, J) we get concurrent(f, Line(F, G), Line(G, J))
By concurrent_sufficient_conditions on Line(F, G), Line(F, I), g we get concurrent(g, Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on Line(F, I), Line(F, H), Line(E, F) we get concurrent(Line(E, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(D, F), Line(F, I), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on h, Line(A, E), Line(A, B) we get concurrent(h, Line(A, B), Line(A, E))
By concurrent_sufficient_conditions on Line(E, F), f, Line(E, H) we get concurrent(f, Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(D, F), g, Line(E, F) we get concurrent(g, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), g we get concurrent(g, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(A, G), Line(G, H), Line(G, J) we get concurrent(Line(A, G), Line(G, H), Line(G, J))
By concurrent_sufficient_conditions on Line(G, H), Line(F, G), Line(A, G) we get concurrent(Line(A, G), Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(F, I), Line(F, G), g we get concurrent(g, Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on Line(A, B), h, Line(A, H) we get concurrent(h, Line(A, B), Line(A, H))
By concurrent_sufficient_conditions on Line(F, I), Line(E, F), g we get concurrent(g, Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on f, Line(D, E), Line(E, H) we get concurrent(f, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(F, I), Line(D, F), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(F, G), Line(E, F), Line(F, H) we get concurrent(Line(E, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on g, Line(F, H), Line(E, F) we get concurrent(g, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(F, I), Line(D, F), Line(F, G) we get concurrent(Line(D, F), Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on Line(G, H), f, Line(A, G) we get concurrent(f, Line(A, G), Line(G, H))
By concurrent_sufficient_conditions on Line(A, E), Line(A, G), Line(A, B) we get concurrent(Line(A, B), Line(A, E), Line(A, G))
By concurrent_sufficient_conditions on Line(A, E), Line(A, G), g we get concurrent(g, Line(A, E), Line(A, G))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), Line(A, E) we get concurrent(Line(A, E), Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(F, G), Line(E, F), g we get concurrent(g, Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(A, H), Line(A, B), Line(A, G) we get concurrent(Line(A, B), Line(A, G), Line(A, H))
By concurrent_sufficient_conditions on Line(A, H), Line(A, E), h we get concurrent(h, Line(A, E), Line(A, H))
By concurrent_sufficient_conditions on Line(F, I), Line(F, G), Line(F, H) we get concurrent(Line(F, G), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(E, F), Line(F, I), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on g, Line(F, H), Line(F, J) we get concurrent(g, Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on Line(D, F), Line(F, G), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(A, G), Line(A, E), Line(A, H) we get concurrent(Line(A, E), Line(A, G), Line(A, H))
By concurrent_sufficient_conditions on Line(F, I), Line(E, F), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on g, Line(A, E), Line(A, B) we get concurrent(g, Line(A, B), Line(A, E))
By concurrent_sufficient_conditions on f, Line(G, H), Line(A, G) we get concurrent(f, Line(A, G), Line(G, H))
By concurrent_sufficient_conditions on Line(A, G), Line(A, H), h we get concurrent(h, Line(A, G), Line(A, H))
By concurrent_sufficient_conditions on Line(D, F), Line(F, H), Line(F, G) we get concurrent(Line(D, F), Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(A, B), g, Line(A, E) we get concurrent(g, Line(A, B), Line(A, E))
By concurrent_sufficient_conditions on Line(E, H), Line(G, H), Line(A, H) we get concurrent(Line(A, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, H), Line(F, J), Line(D, F) we get concurrent(Line(D, F), Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on Line(E, F), Line(F, J), Line(F, H) we get concurrent(Line(E, F), Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on Line(F, I), h, f we get concurrent(f, h, Line(F, I))
By concurrent_sufficient_conditions on Line(F, H), g, Line(F, G) we get concurrent(g, Line(F, G), Line(F, H))
By concurrent_sufficient_conditions on Line(F, I), Line(F, H), Line(F, J) we get concurrent(Line(F, H), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(G, H), f, Line(G, J) we get concurrent(f, Line(G, H), Line(G, J))
By concurrent_sufficient_conditions on Line(C, D), f, g we get concurrent(f, g, Line(C, D))
By concurrent_sufficient_conditions on g, Line(E, F), Line(F, J) we get concurrent(g, Line(E, F), Line(F, J))
By concurrent_sufficient_conditions on Line(E, F), g, Line(F, H) we get concurrent(g, Line(E, F), Line(F, H))
By concurrent_sufficient_conditions on Line(D, F), Line(F, J), Line(F, I) we get concurrent(Line(D, F), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(E, H), Line(D, E), f we get concurrent(f, Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(A, G), Line(A, H), g we get concurrent(g, Line(A, G), Line(A, H))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), f we get concurrent(f, Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(A, B), Line(A, G), Line(A, H) we get concurrent(Line(A, B), Line(A, G), Line(A, H))
By concurrent_sufficient_conditions on Line(D, F), g, Line(F, H) we get concurrent(g, Line(D, F), Line(F, H))
By concurrent_sufficient_conditions on Line(A, H), g, Line(A, E) we get concurrent(g, Line(A, E), Line(A, H))
By concurrent_sufficient_conditions on Line(G, H), Line(E, H), Line(A, H) we get concurrent(Line(A, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(E, F), Line(F, G), Line(F, J) we get concurrent(Line(E, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(D, F), Line(F, I), Line(F, G) we get concurrent(Line(D, F), Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on f, Line(A, G), Line(G, H) we get concurrent(f, Line(A, G), Line(G, H))
By concurrent_sufficient_conditions on h, Line(F, I), f we get concurrent(f, h, Line(F, I))
By concurrent_sufficient_conditions on Line(F, G), Line(F, I), Line(F, J) we get concurrent(Line(F, G), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on g, Line(D, F), Line(E, F) we get concurrent(g, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(F, G), Line(A, G), f we get concurrent(f, Line(A, G), Line(F, G))
By concurrent_sufficient_conditions on Line(E, F), Line(A, E), Line(E, H) we get concurrent(Line(A, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on f, Line(F, G), Line(G, H) we get concurrent(f, Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(F, J), g, Line(D, F) we get concurrent(g, Line(D, F), Line(F, J))
By concurrent_sufficient_conditions on Line(E, F), Line(F, J), Line(F, G) we get concurrent(Line(E, F), Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on i, Line(A, B), f we get concurrent(f, i, Line(A, B))
By concurrent_sufficient_conditions on h, Line(A, H), Line(A, G) we get concurrent(h, Line(A, G), Line(A, H))
By concurrent_sufficient_conditions on Line(F, G), Line(G, H), Line(A, G) we get concurrent(Line(A, G), Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(A, E), f, Line(E, F) we get concurrent(f, Line(A, E), Line(E, F))
By concurrent_sufficient_conditions on Line(A, E), Line(A, B), Line(A, H) we get concurrent(Line(A, B), Line(A, E), Line(A, H))
By concurrent_sufficient_conditions on g, Line(A, E), Line(A, H) we get concurrent(g, Line(A, E), Line(A, H))
By concurrent_sufficient_conditions on f, Line(A, G), Line(G, J) we get concurrent(f, Line(A, G), Line(G, J))
By concurrent_sufficient_conditions on Line(A, H), h, Line(A, B) we get concurrent(h, Line(A, B), Line(A, H))
By concurrent_sufficient_conditions on Line(A, E), Line(E, H), Line(D, E) we get concurrent(Line(A, E), Line(D, E), Line(E, H))
By concurrent_sufficient_conditions on Line(F, J), Line(F, H), Line(F, G) we get concurrent(Line(F, G), Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on h, Line(F, J), Line(G, J) we get concurrent(h, Line(F, J), Line(G, J))
By concurrent_sufficient_conditions on Line(F, G), Line(G, J), Line(A, G) we get concurrent(Line(A, G), Line(F, G), Line(G, J))
By concurrent_sufficient_conditions on Line(A, B), Line(A, H), h we get concurrent(h, Line(A, B), Line(A, H))
By concurrent_sufficient_conditions on f, Line(A, E), Line(D, E) we get concurrent(f, Line(A, E), Line(D, E))
By concurrent_sufficient_conditions on Line(A, B), Line(A, G), g we get concurrent(g, Line(A, B), Line(A, G))
By concurrent_sufficient_conditions on Line(A, E), Line(D, E), Line(E, F) we get concurrent(Line(A, E), Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(G, J), h, Line(F, J) we get concurrent(h, Line(F, J), Line(G, J))
By concurrent_sufficient_conditions on Line(A, B), Line(A, G), h we get concurrent(h, Line(A, B), Line(A, G))
By concurrent_sufficient_conditions on Line(F, H), Line(F, G), Line(F, I) we get concurrent(Line(F, G), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on Line(G, J), Line(F, G), f we get concurrent(f, Line(F, G), Line(G, J))
By concurrent_sufficient_conditions on g, Line(A, H), Line(A, B) we get concurrent(g, Line(A, B), Line(A, H))
By concurrent_sufficient_conditions on Line(F, H), Line(F, J), g we get concurrent(g, Line(F, H), Line(F, J))
By concurrent_sufficient_conditions on Line(A, G), Line(A, H), Line(A, B) we get concurrent(Line(A, B), Line(A, G), Line(A, H))
By concurrent_sufficient_conditions on Line(A, E), Line(A, B), g we get concurrent(g, Line(A, B), Line(A, E))
By concurrent_sufficient_conditions on Line(F, H), Line(E, F), Line(F, I) we get concurrent(Line(E, F), Line(F, H), Line(F, I))
By concurrent_sufficient_conditions on g, Line(F, I), Line(E, F) we get concurrent(g, Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on g, Line(F, G), Line(F, J) we get concurrent(g, Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on Line(F, H), Line(G, H), Line(A, H) we get concurrent(Line(A, H), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(E, H), Line(A, H), Line(G, H) we get concurrent(Line(A, H), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, G), g, Line(D, F) we get concurrent(g, Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on Line(E, F), Line(A, E), Line(D, E) we get concurrent(Line(A, E), Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(F, J), Line(F, G), g we get concurrent(g, Line(F, G), Line(F, J))
By concurrent_sufficient_conditions on g, Line(D, F), Line(F, H) we get concurrent(g, Line(D, F), Line(F, H))
By concurrent_sufficient_conditions on Line(F, I), Line(F, J), Line(D, F) we get concurrent(Line(D, F), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on h, Line(A, B), g we get concurrent(g, h, Line(A, B))
By concurrent_sufficient_conditions on Line(F, J), Line(E, F), Line(F, I) we get concurrent(Line(E, F), Line(F, I), Line(F, J))
By concurrent_sufficient_conditions on Line(F, G), Line(F, I), Line(E, F) we get concurrent(Line(E, F), Line(F, G), Line(F, I))
By same_angle_v3 on E, B, I, F we get angle(B, E, F) == angle(I, E, F) + 180 mod 360
By same_angle_v0 on I, A, J, C we get angle(A, I, C) == angle(J, I, C) mod 360
By same_angle_v0 on A, D, J, B we get angle(D, A, B) == angle(J, A, B) mod 360
By same_angle_v1 on G, E, C, J we get angle(C, G, J) == angle(E, G, J) mod 360
By same_angle_v1 on G, I, E, F we get angle(E, G, F) == angle(I, G, F) mod 360
By same_angle_v1 on G, I, C, F we get angle(C, G, F) == angle(I, G, F) mod 360
By same_angle_v2 on G, B, I, J we get angle(B, G, J) == angle(I, G, J) + 180 mod 360
By same_angle_v0 on I, B, E, D we get angle(B, I, D) == angle(E, I, D) mod 360
By same_angle_v1 on I, D, J, B we get angle(D, I, B) == angle(J, I, B) mod 360
By same_angle_v0 on I, D, A, F we get angle(A, I, F) == angle(D, I, F) mod 360
By same_angle_v2 on E, G, I, H we get angle(G, E, H) == angle(I, E, H) + 180 mod 360
By same_angle_v0 on A, D, I, B we get angle(D, A, B) == angle(I, A, B) mod 360
By same_angle_v2 on G, B, I, A we get angle(B, G, A) == angle(I, G, A) + 180 mod 360
By same_angle_v3 on I, G, C, J we get angle(G, I, J) == angle(C, I, J) + 180 mod 360
By same_angle_v1 on I, J, A, E we get angle(A, I, E) == angle(J, I, E) mod 360
By same_angle_v0 on A, J, D, H we get angle(D, A, H) == angle(J, A, H) mod 360
By same_angle_v1 on G, I, E, H we get angle(E, G, H) == angle(I, G, H) mod 360
By same_angle_v3 on G, B, E, J we get angle(B, G, J) == angle(E, G, J) + 180 mod 360
By same_angle_v1 on I, A, J, G we get angle(A, I, G) == angle(J, I, G) mod 360
By same_angle_v2 on I, G, C, A we get angle(G, I, A) == angle(C, I, A) + 180 mod 360
By same_angle_v1 on G, I, E, A we get angle(E, G, A) == angle(I, G, A) mod 360
By same_angle_v1 on A, J, I, F we get angle(I, A, F) == angle(J, A, F) mod 360
By same_angle_v2 on G, B, E, H we get angle(B, G, H) == angle(E, G, H) + 180 mod 360
By same_angle_v0 on I, B, G, D we get angle(B, I, D) == angle(G, I, D) mod 360
By same_angle_v0 on I, E, G, A we get angle(E, I, A) == angle(G, I, A) mod 360
By same_angle_v0 on A, D, I, H we get angle(D, A, H) == angle(I, A, H) mod 360
By same_angle_v0 on A, I, J, H we get angle(I, A, H) == angle(J, A, H) mod 360
By same_angle_v0 on I, G, E, F we get angle(E, I, F) == angle(G, I, F) mod 360
By same_angle_v1 on A, I, D, F we get angle(D, A, F) == angle(I, A, F) mod 360
By same_angle_v3 on G, B, E, F we get angle(B, G, F) == angle(E, G, F) + 180 mod 360
By same_angle_v1 on G, I, C, A we get angle(C, G, A) == angle(I, G, A) mod 360
By same_angle_v1 on I, D, A, E we get angle(A, I, E) == angle(D, I, E) mod 360
By same_angle_v0 on I, G, B, F we get angle(B, I, F) == angle(G, I, F) mod 360
By same_angle_v1 on G, E, I, J we get angle(E, G, J) == angle(I, G, J) mod 360
By same_angle_v3 on E, B, I, A we get angle(B, E, A) == angle(I, E, A) + 180 mod 360
By same_angle_v0 on I, D, J, F we get angle(D, I, F) == angle(J, I, F) mod 360
By same_angle_v0 on I, G, B, J we get angle(B, I, J) == angle(G, I, J) mod 360
By same_angle_v1 on A, I, J, C we get angle(I, A, C) == angle(J, A, C) mod 360
By same_angle_v2 on E, B, I, H we get angle(B, E, H) == angle(I, E, H) + 180 mod 360
By same_angle_v3 on G, B, E, A we get angle(B, G, A) == angle(E, G, A) + 180 mod 360
By same_angle_v1 on G, C, I, J we get angle(C, G, J) == angle(I, G, J) mod 360
By same_angle_v0 on I, G, E, D we get angle(E, I, D) == angle(G, I, D) mod 360
By same_angle_v0 on A, I, J, E we get angle(I, A, E) == angle(J, A, E) mod 360
By same_angle_v0 on A, I, D, E we get angle(D, A, E) == angle(I, A, E) mod 360
By same_angle_v2 on I, E, C, D we get angle(E, I, D) == angle(C, I, D) + 180 mod 360
By same_angle_v3 on I, G, C, D we get angle(G, I, D) == angle(C, I, D) + 180 mod 360
By same_angle_v1 on G, E, C, A we get angle(C, G, A) == angle(E, G, A) mod 360
By same_angle_v0 on A, I, J, G we get angle(I, A, G) == angle(J, A, G) mod 360
By same_angle_v3 on E, G, I, A we get angle(G, E, A) == angle(I, E, A) + 180 mod 360
By same_angle_v2 on G, B, I, F we get angle(B, G, F) == angle(I, G, F) + 180 mod 360
By same_angle_v1 on A, D, J, C we get angle(D, A, C) == angle(J, A, C) mod 360
By same_angle_v0 on I, J, D, C we get angle(D, I, C) == angle(J, I, C) mod 360
By same_angle_v2 on I, E, C, J we get angle(E, I, J) == angle(C, I, J) + 180 mod 360
By same_angle_v0 on I, A, D, C we get angle(A, I, C) == angle(D, I, C) mod 360
By same_angle_v0 on A, J, D, G we get angle(D, A, G) == angle(J, A, G) mod 360
By same_angle_v0 on I, J, A, F we get angle(A, I, F) == angle(J, I, F) mod 360
By same_angle_v2 on E, G, I, F we get angle(G, E, F) == angle(I, E, F) + 180 mod 360
By same_angle_v1 on G, E, C, F we get angle(C, G, F) == angle(E, G, F) mod 360
By same_angle_v1 on E, I, C, A we get angle(C, E, A) == angle(I, E, A) mod 360
By same_angle_v0 on A, D, I, G we get angle(D, A, G) == angle(I, A, G) mod 360
By same_angle_v1 on E, C, I, F we get angle(C, E, F) == angle(I, E, F) mod 360
By same_angle_v1 on I, J, D, E we get angle(D, I, E) == angle(J, I, E) mod 360
By same_angle_v1 on E, I, C, H we get angle(C, E, H) == angle(I, E, H) mod 360
By same_angle_v1 on G, E, C, H we get angle(C, G, H) == angle(E, G, H) mod 360
By same_angle_v1 on I, D, A, G we get angle(A, I, G) == angle(D, I, G) mod 360
By same_angle_v0 on I, B, E, J we get angle(B, I, J) == angle(E, I, J) mod 360
By same_angle_v1 on I, D, A, B we get angle(A, I, B) == angle(D, I, B) mod 360
By same_angle_v1 on A, I, D, C we get angle(D, A, C) == angle(I, A, C) mod 360
By same_angle_v0 on I, G, E, J we get angle(E, I, J) == angle(G, I, J) mod 360
By same_angle_v3 on I, G, C, F we get angle(G, I, F) == angle(C, I, F) + 180 mod 360
By same_angle_v3 on G, B, I, H we get angle(B, G, H) == angle(I, G, H) + 180 mod 360
By same_angle_v3 on I, E, C, A we get angle(E, I, A) == angle(C, I, A) + 180 mod 360
By same_angle_v1 on A, D, J, F we get angle(D, A, F) == angle(J, A, F) mod 360
By same_angle_v0 on A, D, J, E we get angle(D, A, E) == angle(J, A, E) mod 360
By same_angle_v0 on A, J, I, B we get angle(I, A, B) == angle(J, A, B) mod 360
By same_angle_v0 on I, B, G, A we get angle(B, I, A) == angle(G, I, A) mod 360
By same_angle_v1 on I, A, J, B we get angle(A, I, B) == angle(J, I, B) mod 360
By same_angle_v2 on I, E, C, F we get angle(E, I, F) == angle(C, I, F) + 180 mod 360
By same_angle_v1 on I, J, D, G we get angle(D, I, G) == angle(J, I, G) mod 360
By same_angle_v0 on I, B, E, A we get angle(B, I, A) == angle(E, I, A) mod 360
By same_angle_v1 on G, I, C, H we get angle(C, G, H) == angle(I, G, H) mod 360
By same_angle_v0 on I, E, B, F we get angle(B, I, F) == angle(E, I, F) mod 360
By between_imply_not_between on C, G, B we get collinear_and_not_between(B, C, G)
By between_imply_not_between on B, G, C we get collinear_and_not_between(C, B, G)
By between_imply_not_between on C, I, B we get collinear_and_not_between(B, C, I)
By between_imply_not_between on B, E, C we get collinear_and_not_between(C, B, E)
By between_imply_not_between on C, E, B we get collinear_and_not_between(B, C, E)
By between_imply_not_between on B, I, C we get collinear_and_not_between(C, B, I)
By between_imply_not_between on C, F, A we get collinear_and_not_between(A, C, F)
By between_imply_not_between on A, F, C we get collinear_and_not_between(C, A, F)
By circle_radius_v0_r on I, d we get radius(d) == distance(I, center(d))
By circle_radius_v0_r on F, d we get radius(d) == distance(F, center(d))
By circle_radius_v0_r on G, d we get radius(d) == distance(G, center(d))
By circle_radius_v0_r on J, d we get radius(d) == distance(J, center(d))
By angle_to_center on J, I, F, d we get 2 * angle(J, I, F) == angle(J, center(d), F) mod 360
By angle_to_center on G, I, F, d we get 2 * angle(G, I, F) == angle(G, center(d), F) mod 360
By angle_to_center on F, I, G, d we get 2 * angle(F, I, G) == angle(F, center(d), G) mod 360
By angle_to_center on G, I, J, d we get 2 * angle(G, I, J) == angle(G, center(d), J) mod 360
By angle_to_center on G, J, I, d we get 2 * angle(G, J, I) == angle(G, center(d), I) mod 360
By angle_to_center on I, F, G, d we get 2 * angle(I, F, G) == angle(I, center(d), G) mod 360
By angle_to_center on I, F, J, d we get 2 * angle(I, F, J) == angle(I, center(d), J) mod 360
By angle_to_center on F, I, J, d we get 2 * angle(F, I, J) == angle(F, center(d), J) mod 360
By angle_to_center on J, F, G, d we get 2 * angle(J, F, G) == angle(J, center(d), G) mod 360
By angle_to_center on I, J, F, d we get 2 * angle(I, J, F) == angle(I, center(d), F) mod 360
By angle_to_center on G, F, I, d we get 2 * angle(G, F, I) == angle(G, center(d), I) mod 360
By angle_to_center on J, F, I, d we get 2 * angle(J, F, I) == angle(J, center(d), I) mod 360
By angle_to_center on I, J, G, d we get 2 * angle(I, J, G) == angle(I, center(d), G) mod 360
By angle_to_center on G, F, J, d we get 2 * angle(G, F, J) == angle(G, center(d), J) mod 360
By angle_to_center on I, G, F, d we get 2 * angle(I, G, F) == angle(I, center(d), F) mod 360
By angle_to_center on J, I, G, d we get 2 * angle(J, I, G) == angle(J, center(d), G) mod 360
By angle_to_center on G, J, F, d we get 2 * angle(G, J, F) == angle(G, center(d), F) mod 360
By divide_by_2_mod_180_v1 on J, A, C, B, A, D we get angle(B, A, D) == angle(J, A, C) mod 360
By angle_to_center on J, G, I, d we get 2 * angle(J, G, I) == angle(J, center(d), I) mod 360
By angle_to_center on J, G, F, d we get 2 * angle(J, G, F) == angle(J, center(d), F) mod 360
By angle_to_center on F, G, I, d we get 2 * angle(F, G, I) == angle(F, center(d), I) mod 360
By angle_to_center on F, J, I, d we get 2 * angle(F, J, I) == angle(F, center(d), I) mod 360
By angle_to_center on F, G, J, d we get 2 * angle(F, G, J) == angle(F, center(d), J) mod 360
By angle_to_center on F, J, G, d we get 2 * angle(F, J, G) == angle(F, center(d), G) mod 360
By angle_to_center on I, G, J, d we get 2 * angle(I, G, J) == angle(I, center(d), J) mod 360
By probably_between_and_collinear_implies_between on G, I, C we get between(C, I, G)
By same_angle_v2 on J, A, I, F we get angle(A, J, F) == angle(I, J, F) + 180 mod 360
By same_angle_v0 on C, E, B, D we get angle(B, C, D) == angle(E, C, D) mod 360
By same_angle_v0 on C, I, B, D we get angle(B, C, D) == angle(I, C, D) mod 360
By collinear_definition on I, E, G we get E in Line(G, I), G in Line(E, I), Line(E, I) == Line(G, I), 0 == 2 * angle(E, I, G) mod 360
By same_angle_v1 on C, A, F, D we get angle(A, C, D) == angle(F, C, D) mod 360
By same_angle_v0 on C, B, G, D we get angle(B, C, D) == angle(G, C, D) mod 360
By divide_by_2_mod_180_v3 on C, I, F, G, I, F we get angle(C, I, F) == angle(G, I, F) + 180 mod 360
By same_angle_v1 on J, I, D, F we get angle(D, J, F) == angle(I, J, F) mod 360
By same_angle_v0 on C, G, I, D we get angle(G, C, D) == angle(I, C, D) mod 360
By same_angle_v0 on J, D, I, G we get angle(D, J, G) == angle(I, J, G) mod 360
By same_angle_v0 on C, I, E, D we get angle(E, C, D) == angle(I, C, D) mod 360
By same_angle_v3 on J, I, A, G we get angle(I, J, G) == angle(A, J, G) + 180 mod 360
By same_angle_v0 on C, E, G, D we get angle(E, C, D) == angle(G, C, D) mod 360
By divide_by_2_mod_180_v0 on F, G, E, F, J, I we get angle(F, G, E) == angle(F, J, I) mod 360
By divide_by_2_mod_180_v0 on C, A, J, C, A, D we get angle(C, A, D) == angle(C, A, J) mod 360
By probably_between_and_collinear_implies_between on G, E, C we get between(C, E, G)
By divide_by_2_mod_180_v2 on G, E, H, H, G, B we get angle(G, E, H) == angle(H, G, B) + 180 mod 360
By probably_between_and_collinear_implies_between on I, D, J we get between(I, D, J)
By divide_by_2_mod_180_v2 on F, G, I, F, G, B we get angle(F, G, I) == angle(F, G, B) + 180 mod 360
By divide_by_2_mod_180_v0 on A, G, C, C, F, E we get angle(A, G, C) == angle(C, F, E) mod 360
By collinear_definition on B, G, E we get G in Line(B, E), E in Line(B, G), Line(B, E) == Line(B, G), 0 == 2 * angle(G, B, E) mod 360
By divide_by_2_mod_180_v0 on D, A, B, F, A, J we get angle(D, A, B) == angle(F, A, J) mod 360
By collinear_definition on E, B, G we get B in Line(E, G), G in Line(B, E), Line(B, E) == Line(E, G), 0 == 2 * angle(B, E, G) mod 360
By divide_by_2_mod_180_v1 on J, A, C, I, A, F we get angle(I, A, F) == angle(J, A, C) mod 360
By probably_between_and_collinear_implies_between on I, E, G we get between(G, E, I)
By divide_by_2_mod_180_v0 on F, A, J, F, A, I we get angle(F, A, I) == angle(F, A, J) mod 360
By probably_between_and_collinear_implies_between on I, E, B we get between(B, E, I)
By probably_between_and_collinear_implies_between on E, G, B we get between(B, G, E)
By divide_by_2_mod_180_v1 on C, G, A, E, F, C we get angle(C, G, A) == angle(E, F, C) mod 360
By divide_by_2_mod_180_v1 on I, A, F, B, A, J we get angle(B, A, J) == angle(I, A, F) mod 360
By divide_by_2_mod_180_v1 on J, I, B, J, F, G we get angle(J, F, G) == angle(J, I, B) mod 360
By divide_by_2_mod_180_v3 on F, G, B, C, A, E we get angle(F, G, B) == angle(C, A, E) + 180 mod 360
By divide_by_2_mod_180_v0 on F, G, I, F, G, C we get angle(F, G, C) == angle(F, G, I) mod 360
By probably_between_and_collinear_implies_between on D, J, A we get between(A, J, D)
By divide_by_2_mod_180_v3 on E, A, F, B, G, F we get angle(E, A, F) == angle(B, G, F) + 180 mod 360
By probably_between_and_collinear_implies_between on C, I, E we get between(C, I, E)
By reverse_direction on I, E we get 180 == direction(I, E) - direction(E, I) mod 360
By collinear_definition on B, E, G we get E in Line(B, G), G in Line(B, E), Line(B, E) == Line(B, G), 0 == 2 * angle(E, B, G) mod 360
By divide_by_2_mod_180_v1 on E, A, C, I, G, F we get angle(E, A, C) == angle(I, G, F) mod 360
By divide_by_2_mod_180_v1 on C, G, F, I, J, F we get angle(C, G, F) == angle(I, J, F) mod 360
By probably_between_and_collinear_implies_between on A, D, I we get between(A, D, I)
By collinear_definition on B, I, E we get I in Line(B, E), E in Line(B, I), Line(B, E) == Line(B, I), 0 == 2 * angle(I, B, E) mod 360
By probably_between_and_collinear_implies_between on A, J, I we get between(A, J, I)
By divide_by_2_mod_180_v1 on B, A, D, I, A, C we get angle(B, A, D) == angle(I, A, C) mod 360
By divide_by_2_mod_180_v1 on C, E, H, H, G, B we get angle(C, E, H) == angle(H, G, B) mod 360
By divide_by_2_mod_180_v1 on I, A, C, J, A, F we get angle(I, A, C) == angle(J, A, F) mod 360
By divide_by_2_mod_180_v0 on C, A, I, C, A, J we get angle(C, A, I) == angle(C, A, J) mod 360
By divide_by_2_mod_180_v1 on D, A, C, J, A, F we get angle(D, A, C) == angle(J, A, F) mod 360
By divide_by_2_mod_180_v1 on I, A, C, D, A, F we get angle(D, A, F) == angle(I, A, C) mod 360
By divide_by_2_mod_180_v1 on C, G, F, E, A, F we get angle(C, G, F) == angle(E, A, F) mod 360
By divide_by_2_mod_180_v3 on A, G, B, C, F, E we get angle(A, G, B) == angle(C, F, E) + 180 mod 360
By divide_by_2_mod_180_v0 on C, A, D, C, A, I we get angle(C, A, D) == angle(C, A, I) mod 360
By divide_by_2_mod_180_v3 on F, G, B, F, G, E we get angle(F, G, B) == angle(F, G, E) + 180 mod 360
By probably_between_and_collinear_implies_between on B, G, I we get between(B, G, I)
By divide_by_2_mod_180_v0 on F, A, E, F, G, I we get angle(F, A, E) == angle(F, G, I) mod 360
By divide_by_2_mod_180_v2 on B, G, F, E, A, F we get angle(B, G, F) == angle(E, A, F) + 180 mod 360
By divide_by_2_mod_180_v0 on F, J, I, F, G, C we get angle(F, G, C) == angle(F, J, I) mod 360
By divide_by_2_mod_180_v2 on F, J, I, F, G, B we get angle(F, J, I) == angle(F, G, B) + 180 mod 360
By divide_by_2_mod_180_v0 on J, G, C, J, G, I we get angle(J, G, C) == angle(J, G, I) mod 360
By divide_by_2_mod_180_v0 on I, A, B, C, A, D we get angle(C, A, D) == angle(I, A, B) mod 360
By divide_by_2_mod_180_v1 on J, A, F, B, A, I we get angle(B, A, I) == angle(J, A, F) mod 360
By collinear_definition on G, B, I we get B in Line(G, I), I in Line(B, G), Line(B, G) == Line(G, I), 0 == 2 * angle(B, G, I) mod 360
By divide_by_2_mod_180_v3 on E, G, F, B, G, F we get angle(E, G, F) == angle(B, G, F) + 180 mod 360
By divide_by_2_mod_180_v3 on J, I, G, J, I, C we get angle(J, I, G) == angle(J, I, C) + 180 mod 360
By divide_by_2_mod_180_v3 on H, G, B, B, E, H we get angle(H, G, B) == angle(B, E, H) + 180 mod 360
By divide_by_2_mod_180_v2 on I, F, J, C, G, J we get angle(I, F, J) == angle(C, G, J) + 180 mod 360
By divide_by_2_mod_180_v0 on J, A, B, F, A, I we get angle(F, A, I) == angle(J, A, B) mod 360
By divide_by_2_mod_180_v0 on C, A, D, F, A, J we get angle(C, A, D) == angle(F, A, J) mod 360
By reverse_direction on G, C we get 180 == direction(G, C) - direction(C, G) mod 360
By divide_by_2_mod_180_v2 on J, I, C, J, F, G we get angle(J, I, C) == angle(J, F, G) + 180 mod 360
By divide_by_2_mod_180_v0 on F, G, C, F, G, E we get angle(F, G, C) == angle(F, G, E) mod 360
By divide_by_2_mod_180_v2 on B, I, F, G, J, F we get angle(B, I, F) == angle(G, J, F) + 180 mod 360
By divide_by_2_mod_180_v0 on F, A, J, I, A, B we get angle(F, A, J) == angle(I, A, B) mod 360
By divide_by_2_mod_180_v0 on J, A, B, C, A, D we get angle(C, A, D) == angle(J, A, B) mod 360
By divide_by_2_mod_180_v1 on B, A, J, D, A, C we get angle(B, A, J) == angle(D, A, C) mod 360
By divide_by_2_mod_180_v1 on J, A, C, D, A, F we get angle(D, A, F) == angle(J, A, C) mod 360
By divide_by_2_mod_180_v1 on B, A, I, J, A, C we get angle(B, A, I) == angle(J, A, C) mod 360
By divide_by_2_mod_180_v3 on E, G, A, B, G, A we get angle(E, G, A) == angle(B, G, A) + 180 mod 360
By divide_by_2_mod_180_v3 on C, I, J, G, I, J we get angle(C, I, J) == angle(G, I, J) + 180 mod 360
By divide_by_2_mod_180_v1 on B, A, J, B, A, I we get angle(B, A, I) == angle(B, A, J) mod 360
By divide_by_2_mod_180_v2 on F, I, C, F, I, G we get angle(F, I, C) == angle(F, I, G) + 180 mod 360
By divide_by_2_mod_180_v0 on B, G, H, H, E, C we get angle(B, G, H) == angle(H, E, C) mod 360
By divide_by_2_mod_180_v0 on D, A, B, C, A, J we get angle(C, A, J) == angle(D, A, B) mod 360
By divide_by_2_mod_180_v0 on F, A, D, C, A, J we get angle(C, A, J) == angle(F, A, D) mod 360
By divide_by_2_mod_180_v0 on F, G, I, F, G, E we get angle(F, G, E) == angle(F, G, I) mod 360
By between_imply_segment_sum on B, I, C we get distance(B, C) == distance(B, I) + distance(C, I)
By collinear_definition on A, J, I we get J in Line(A, I), I in Line(A, J), Line(A, I) == Line(A, J), 0 == 2 * angle(J, A, I) mod 360
By divide_by_2_mod_180_v0 on F, A, E, F, G, C we get angle(F, A, E) == angle(F, G, C) mod 360
By divide_by_2_mod_180_v1 on E, A, F, I, J, F we get angle(E, A, F) == angle(I, J, F) mod 360
By divide_by_2_mod_180_v1 on I, A, F, D, A, C we get angle(D, A, C) == angle(I, A, F) mod 360
By divide_by_2_mod_180_v2 on J, G, I, J, G, B we get angle(J, G, I) == angle(J, G, B) + 180 mod 360
By divide_by_2_mod_180_v1 on B, A, I, B, A, D we get angle(B, A, D) == angle(B, A, I) mod 360
By divide_by_2_mod_180_v0 on F, J, G, F, I, C we get angle(F, I, C) == angle(F, J, G) mod 360
By divide_by_2_mod_180_v2 on F, A, E, F, G, B we get angle(F, A, E) == angle(F, G, B) + 180 mod 360
By divide_by_2_mod_180_v2 on E, F, A, C, G, A we get angle(E, F, A) == angle(C, G, A) + 180 mod 360
By divide_by_2_mod_180_v2 on H, E, C, C, G, H we get angle(H, E, C) == angle(C, G, H) + 180 mod 360
By collinear_definition on I, J, D we get J in Line(D, I), D in Line(I, J), Line(D, I) == Line(I, J), 0 == 2 * angle(J, I, D) mod 360
By divide_by_2_mod_180_v0 on B, E, H, H, G, C we get angle(B, E, H) == angle(H, G, C) mod 360
By divide_by_2_mod_180_v2 on B, E, H, H, G, B we get angle(B, E, H) == angle(H, G, B) + 180 mod 360
By divide_by_2_mod_180_v0 on J, A, B, F, A, D we get angle(F, A, D) == angle(J, A, B) mod 360
By divide_by_2_mod_180_v3 on A, F, E, A, G, C we get angle(A, F, E) == angle(A, G, C) + 180 mod 360
By divide_by_2_mod_180_v1 on C, G, H, H, E, G we get angle(C, G, H) == angle(H, E, G) mod 360
By collinear_definition on A, J, D we get J in Line(A, D), D in Line(A, J), Line(A, D) == Line(A, J), 0 == 2 * angle(J, A, D) mod 360
By divide_by_2_mod_180_v3 on J, G, B, J, G, I we get angle(J, G, B) == angle(J, G, I) + 180 mod 360
By divide_by_2_mod_180_v1 on G, J, F, C, I, F we get angle(C, I, F) == angle(G, J, F) mod 360
By divide_by_2_mod_180_v1 on A, F, E, A, G, B we get angle(A, F, E) == angle(A, G, B) mod 360
By divide_by_2_mod_180_v0 on E, F, A, B, G, A we get angle(B, G, A) == angle(E, F, A) mod 360
By divide_by_2_mod_180_v0 on F, G, C, C, A, E we get angle(C, A, E) == angle(F, G, C) mod 360
By divide_by_2_mod_180_v2 on F, G, E, F, G, B we get angle(F, G, E) == angle(F, G, B) + 180 mod 360
By divide_by_2_mod_180_v3 on F, G, B, F, A, E we get angle(F, G, B) == angle(F, A, E) + 180 mod 360
By divide_by_2_mod_180_v3 on F, G, B, F, G, I we get angle(F, G, B) == angle(F, G, I) + 180 mod 360
By divide_by_2_mod_180_v3 on C, G, A, E, F, A we get angle(C, G, A) == angle(E, F, A) + 180 mod 360
By divide_by_2_mod_180_v0 on F, A, E, F, J, I we get angle(F, A, E) == angle(F, J, I) mod 360
By divide_by_2_mod_180_v3 on H, E, G, B, G, H we get angle(H, E, G) == angle(B, G, H) + 180 mod 360
By reverse_direction on C, F we get 180 == direction(C, F) - direction(F, C) mod 360
By divide_by_2_mod_180_v1 on I, G, F, E, A, F we get angle(E, A, F) == angle(I, G, F) mod 360
By divide_by_2_mod_180_v1 on F, I, G, F, I, B we get angle(F, I, B) == angle(F, I, G) mod 360
By divide_by_2_mod_180_v1 on B, A, I, D, A, C we get angle(B, A, I) == angle(D, A, C) mod 360
By divide_by_2_mod_180_v2 on H, G, E, H, G, B we get angle(H, G, E) == angle(H, G, B) + 180 mod 360
By collinear_definition on E, C, G we get C in Line(E, G), G in Line(C, E), Line(C, E) == Line(E, G), 0 == 2 * angle(C, E, G) mod 360
By divide_by_2_mod_180_v0 on F, A, I, D, A, B we get angle(D, A, B) == angle(F, A, I) mod 360
By divide_by_2_mod_180_v2 on G, F, J, C, I, J we get angle(G, F, J) == angle(C, I, J) + 180 mod 360
By collinear_definition on E, C, I we get C in Line(E, I), I in Line(C, E), Line(C, E) == Line(E, I), 0 == 2 * angle(C, E, I) mod 360
By divide_by_2_mod_180_v2 on A, G, E, A, G, B we get angle(A, G, E) == angle(A, G, B) + 180 mod 360
By divide_by_2_mod_180_v1 on B, A, J, B, A, D we get angle(B, A, D) == angle(B, A, J) mod 360
By divide_by_2_mod_180_v3 on H, G, B, G, E, H we get angle(H, G, B) == angle(G, E, H) + 180 mod 360
By divide_by_2_mod_180_v0 on F, G, I, C, A, E we get angle(C, A, E) == angle(F, G, I) mod 360
By divide_by_2_mod_180_v3 on J, F, I, J, G, C we get angle(J, F, I) == angle(J, G, C) + 180 mod 360
By divide_by_2_mod_180_v0 on F, A, D, I, A, B we get angle(F, A, D) == angle(I, A, B) mod 360
By divide_by_2_mod_180_v0 on I, A, B, C, A, J we get angle(C, A, J) == angle(I, A, B) mod 360
By divide_by_2_mod_180_v3 on E, F, C, B, G, A we get angle(E, F, C) == angle(B, G, A) + 180 mod 360
By divide_by_2_mod_180_v0 on G, E, H, H, G, C we get angle(G, E, H) == angle(H, G, C) mod 360
By divide_by_2_mod_180_v2 on B, G, H, H, E, B we get angle(B, G, H) == angle(H, E, B) + 180 mod 360
By collinear_definition on A, D, I we get D in Line(A, I), I in Line(A, D), Line(A, D) == Line(A, I), 0 == 2 * angle(D, A, I) mod 360
By collinear_definition on G, E, C we get E in Line(C, G), C in Line(E, G), Line(C, G) == Line(E, G), 0 == 2 * angle(E, G, C) mod 360
By aa_anti_similarity on G, A, C, F, E, C we get anti_similar_triangles(A, C, G, E, C, F)
By divide_by_2_mod_180_v3 on C, E, H, H, G, C we get angle(C, E, H) == angle(H, G, C) + 180 mod 360
By divide_by_2_mod_180_v0 on A, G, E, A, G, C we get angle(A, G, C) == angle(A, G, E) mod 360
By collinear_definition on I, B, E we get B in Line(E, I), E in Line(B, I), Line(B, I) == Line(E, I), 0 == 2 * angle(B, I, E) mod 360
By divide_by_2_mod_180_v3 on I, J, F, B, G, F we get angle(I, J, F) == angle(B, G, F) + 180 mod 360
By collinear_definition on G, I, C we get I in Line(C, G), C in Line(G, I), Line(C, G) == Line(G, I), 0 == 2 * angle(I, G, C) mod 360
By divide_by_2_mod_180_v1 on H, E, B, C, G, H we get angle(C, G, H) == angle(H, E, B) mod 360
By divide_by_2_mod_180_v1 on D, A, F, B, A, I we get angle(B, A, I) == angle(D, A, F) mod 360
By reverse_direction on C, A we get 180 == direction(C, A) - direction(A, C) mod 360
By reverse_direction on B, A we get 180 == direction(B, A) - direction(A, B) mod 360
By divide_by_2_mod_180_v1 on J, A, F, B, A, D we get angle(B, A, D) == angle(J, A, F) mod 360
By divide_by_2_mod_180_v2 on J, G, C, J, F, I we get angle(J, G, C) == angle(J, F, I) + 180 mod 360
By divide_by_2_mod_180_v1 on J, I, B, J, I, G we get angle(J, I, B) == angle(J, I, G) mod 360
By divide_by_2_mod_180_v3 on C, G, H, H, E, C we get angle(C, G, H) == angle(H, E, C) + 180 mod 360
By divide_by_2_mod_180_v2 on J, I, C, J, I, G we get angle(J, I, C) == angle(J, I, G) + 180 mod 360
By reverse_direction on B, C we get 180 == direction(B, C) - direction(C, B) mod 360
By reverse_direction on D, F we get 180 == direction(D, F) - direction(F, D) mod 360
By reverse_direction on B, G we get 180 == direction(B, G) - direction(G, B) mod 360
By divide_by_2_mod_180_v3 on C, G, J, I, F, J we get angle(C, G, J) == angle(I, F, J) + 180 mod 360
By between_imply_segment_sum on A, F, C we get distance(A, C) == distance(A, F) + distance(C, F)
By divide_by_2_mod_180_v0 on J, A, B, C, A, I we get angle(C, A, I) == angle(J, A, B) mod 360
By divide_by_2_mod_180_v1 on J, G, B, J, F, I we get angle(J, F, I) == angle(J, G, B) mod 360
By aa_anti_similarity on G, F, C, A, E, C we get anti_similar_triangles(A, C, E, G, C, F)
By divide_by_2_mod_180_v0 on B, G, J, I, F, J we get angle(B, G, J) == angle(I, F, J) mod 360
By divide_by_2_mod_180_v2 on C, F, E, A, G, B we get angle(C, F, E) == angle(A, G, B) + 180 mod 360
By divide_by_2_mod_180_v0 on F, A, D, F, A, I we get angle(F, A, D) == angle(F, A, I) mod 360
By divide_by_2_mod_180_v0 on H, G, E, H, G, C we get angle(H, G, C) == angle(H, G, E) mod 360
By divide_by_2_mod_180_v1 on B, A, D, I, A, F we get angle(B, A, D) == angle(I, A, F) mod 360
By divide_by_2_mod_180_v3 on H, E, B, B, G, H we get angle(H, E, B) == angle(B, G, H) + 180 mod 360
By collinear_definition on I, A, J we get A in Line(I, J), J in Line(A, I), Line(A, I) == Line(I, J), 0 == 2 * angle(A, I, J) mod 360
By collinear_definition on I, G, C we get G in Line(C, I), C in Line(G, I), Line(C, I) == Line(G, I), 0 == 2 * angle(G, I, C) mod 360
By collinear_definition on E, I, C we get I in Line(C, E), C in Line(E, I), Line(C, E) == Line(E, I), 0 == 2 * angle(I, E, C) mod 360
By divide_by_2_mod_180_v1 on B, A, J, D, A, F we get angle(B, A, J) == angle(D, A, F) mod 360
By divide_by_2_mod_180_v2 on C, A, E, F, G, B we get angle(C, A, E) == angle(F, G, B) + 180 mod 360
By collinear_definition on C, G, E we get G in Line(C, E), E in Line(C, G), Line(C, E) == Line(C, G), 0 == 2 * angle(G, C, E) mod 360
By divide_by_2_mod_180_v3 on F, G, B, F, J, I we get angle(F, G, B) == angle(F, J, I) + 180 mod 360
By divide_by_2_mod_180_v0 on C, A, I, F, A, D we get angle(C, A, I) == angle(F, A, D) mod 360
By divide_by_2_mod_180_v0 on G, F, J, B, I, J we get angle(B, I, J) == angle(G, F, J) mod 360
By divide_by_2_mod_180_v0 on F, J, I, C, A, E we get angle(C, A, E) == angle(F, J, I) mod 360
By collinear_definition on C, I, G we get I in Line(C, G), G in Line(C, I), Line(C, G) == Line(C, I), 0 == 2 * angle(I, C, G) mod 360
By divide_by_2_mod_180_v2 on F, J, G, F, I, B we get angle(F, J, G) == angle(F, I, B) + 180 mod 360
By divide_by_2_mod_180_v1 on E, A, C, C, G, F we get angle(C, G, F) == angle(E, A, C) mod 360
By divide_by_2_mod_180_v2 on B, G, H, H, E, G we get angle(B, G, H) == angle(H, E, G) + 180 mod 360
By divide_by_2_mod_180_v2 on H, G, C, C, E, H we get angle(H, G, C) == angle(C, E, H) + 180 mod 360
By divide_by_2_mod_180_v3 on A, G, B, A, G, E we get angle(A, G, B) == angle(A, G, E) + 180 mod 360
By divide_by_2_mod_180_v3 on I, G, J, B, G, J we get angle(I, G, J) == angle(B, G, J) + 180 mod 360
By between_imply_segment_sum on C, G, B we get distance(B, C) == distance(C, G) + distance(B, G)
By collinear_definition on I, C, E we get C in Line(E, I), E in Line(C, I), Line(C, I) == Line(E, I), 0 == 2 * angle(C, I, E) mod 360
By divide_by_2_mod_180_v2 on B, G, F, I, J, F we get angle(B, G, F) == angle(I, J, F) + 180 mod 360
By divide_by_2_mod_180_v3 on F, I, G, F, I, C we get angle(F, I, G) == angle(F, I, C) + 180 mod 360
By divide_by_2_mod_180_v0 on D, A, B, C, A, I we get angle(C, A, I) == angle(D, A, B) mod 360
By divide_by_2_mod_180_v0 on C, A, J, F, A, I we get angle(C, A, J) == angle(F, A, I) mod 360
By divide_by_2_mod_180_v1 on I, J, F, E, A, C we get angle(E, A, C) == angle(I, J, F) mod 360
By divide_by_2_mod_180_v3 on E, A, C, B, G, F we get angle(E, A, C) == angle(B, G, F) + 180 mod 360
By collinear_definition on G, C, I we get C in Line(G, I), I in Line(C, G), Line(C, G) == Line(G, I), 0 == 2 * angle(C, G, I) mod 360
By divide_by_2_mod_180_v0 on F, A, I, C, A, D we get angle(C, A, D) == angle(F, A, I) mod 360
By divide_by_2_mod_180_v0 on C, A, I, F, A, J we get angle(C, A, I) == angle(F, A, J) mod 360
By divide_by_2_mod_180_v3 on E, G, H, B, G, H we get angle(E, G, H) == angle(B, G, H) + 180 mod 360
By divide_by_2_mod_180_v3 on J, F, G, J, I, C we get angle(J, F, G) == angle(J, I, C) + 180 mod 360
By divide_by_2_mod_180_v2 on B, G, F, E, A, C we get angle(B, G, F) == angle(E, A, C) + 180 mod 360
By aa_anti_similarity on F, C, E, G, C, A we get anti_similar_triangles(A, C, G, E, C, F)
By collinear_definition on G, I, E we get I in Line(E, G), E in Line(G, I), Line(E, G) == Line(G, I), 0 == 2 * angle(I, G, E) mod 360
By collinear_definition on G, B, E we get B in Line(E, G), E in Line(B, G), Line(B, G) == Line(E, G), 0 == 2 * angle(B, G, E) mod 360
By divide_by_2_mod_180_v2 on B, G, A, E, F, C we get angle(B, G, A) == angle(E, F, C) + 180 mod 360
By divide_by_2_mod_180_v3 on I, G, F, B, G, F we get angle(I, G, F) == angle(B, G, F) + 180 mod 360
By divide_by_2_mod_180_v1 on I, A, C, B, A, J we get angle(B, A, J) == angle(I, A, C) mod 360
By divide_by_2_mod_180_v0 on F, A, J, F, A, D we get angle(F, A, D) == angle(F, A, J) mod 360
By collinear_definition on I, E, C we get E in Line(C, I), C in Line(E, I), Line(C, I) == Line(E, I), 0 == 2 * angle(E, I, C) mod 360
By reverse_direction on C, G we get 180 == direction(C, G) - direction(G, C) mod 360
By divide_by_2_mod_180_v2 on A, G, C, A, F, E we get angle(A, G, C) == angle(A, F, E) + 180 mod 360
By collinear_definition on E, G, B we get G in Line(B, E), B in Line(E, G), Line(B, E) == Line(E, G), 0 == 2 * angle(G, E, B) mod 360
By divide_by_2_mod_180_v1 on E, G, F, I, J, F we get angle(E, G, F) == angle(I, J, F) mod 360
By divide_by_2_mod_180_v3 on G, J, F, B, I, F we get angle(G, J, F) == angle(B, I, F) + 180 mod 360
By reverse_direction on A, B we get 180 == direction(A, B) - direction(B, A) mod 360
By collinear_definition on C, I, E we get I in Line(C, E), E in Line(C, I), Line(C, E) == Line(C, I), 0 == 2 * angle(I, C, E) mod 360
By between_imply_segment_sum on C, E, B we get distance(B, C) == distance(C, E) + distance(B, E)
By collinear_definition on I, B, G we get B in Line(G, I), G in Line(B, I), Line(B, I) == Line(G, I), 0 == 2 * angle(B, I, G) mod 360
By collinear_definition on I, G, B we get G in Line(B, I), B in Line(G, I), Line(B, I) == Line(G, I), 0 == 2 * angle(G, I, B) mod 360
By aa_anti_similarity on G, C, A, F, C, E we get anti_similar_triangles(A, C, G, E, C, F)
By reverse_direction on E, I we get 180 == direction(E, I) - direction(I, E) mod 360
By reverse_direction on F, D we get 180 == direction(F, D) - direction(D, F) mod 360
By divide_by_2_mod_180_v3 on C, I, J, G, F, J we get angle(C, I, J) == angle(G, F, J) + 180 mod 360
By reverse_direction on I, A we get 180 == direction(I, A) - direction(A, I) mod 360
By collinear_definition on E, I, B we get I in Line(B, E), B in Line(E, I), Line(B, E) == Line(E, I), 0 == 2 * angle(I, E, B) mod 360
By reverse_direction on C, E we get 180 == direction(C, E) - direction(E, C) mod 360
By collinear_definition on B, E, I we get E in Line(B, I), I in Line(B, E), Line(B, E) == Line(B, I), 0 == 2 * angle(E, B, I) mod 360
By collinear_definition on E, I, G we get I in Line(E, G), G in Line(E, I), Line(E, G) == Line(E, I), 0 == 2 * angle(I, E, G) mod 360
By collinear_definition on I, D, A we get D in Line(A, I), A in Line(D, I), Line(A, I) == Line(D, I), 0 == 2 * angle(D, I, A) mod 360
By aa_anti_similarity on G, C, F, A, C, E we get anti_similar_triangles(A, C, E, G, C, F)
By collinear_definition on G, I, B we get I in Line(B, G), B in Line(G, I), Line(B, G) == Line(G, I), 0 == 2 * angle(I, G, B) mod 360
By divide_by_2_mod_180_v3 on H, G, B, H, G, E we get angle(H, G, B) == angle(H, G, E) + 180 mod 360
By collinear_definition on B, I, G we get I in Line(B, G), G in Line(B, I), Line(B, G) == Line(B, I), 0 == 2 * angle(I, B, G) mod 360
By divide_by_2_mod_180_v3 on F, I, B, F, J, G we get angle(F, I, B) == angle(F, J, G) + 180 mod 360
By reverse_direction on E, B we get 180 == direction(E, B) - direction(B, E) mod 360
By collinear_definition on I, A, D we get A in Line(D, I), D in Line(A, I), Line(A, I) == Line(D, I), 0 == 2 * angle(A, I, D) mod 360
By collinear_definition on G, C, E we get C in Line(E, G), E in Line(C, G), Line(C, G) == Line(E, G), 0 == 2 * angle(C, G, E) mod 360
By aa_anti_similarity on A, C, E, G, C, F we get anti_similar_triangles(A, C, E, G, C, F)
By collinear_definition on B, G, I we get G in Line(B, I), I in Line(B, G), Line(B, G) == Line(B, I), 0 == 2 * angle(G, B, I) mod 360
By reverse_direction on I, B we get 180 == direction(I, B) - direction(B, I) mod 360
By reverse_direction on A, I we get 180 == direction(A, I) - direction(I, A) mod 360
By collinear_definition on I, J, A we get J in Line(A, I), A in Line(I, J), Line(A, I) == Line(I, J), 0 == 2 * angle(J, I, A) mod 360
By collinear_definition on I, E, B we get E in Line(B, I), B in Line(E, I), Line(B, I) == Line(E, I), 0 == 2 * angle(E, I, B) mod 360
By reverse_direction on C, B we get 180 == direction(C, B) - direction(B, C) mod 360
By reverse_direction on F, C we get 180 == direction(F, C) - direction(C, F) mod 360
By collinear_definition on A, I, D we get I in Line(A, D), D in Line(A, I), Line(A, D) == Line(A, I), 0 == 2 * angle(I, A, D) mod 360
By aa_anti_similarity on A, E, C, G, F, C we get anti_similar_triangles(A, C, E, G, C, F)
By aa_anti_similarity on F, E, C, G, A, C we get anti_similar_triangles(A, C, G, E, C, F)
By collinear_definition on A, I, J we get I in Line(A, J), J in Line(A, I), Line(A, I) == Line(A, J), 0 == 2 * angle(I, A, J) mod 360
By reverse_direction on C, I we get 180 == direction(C, I) - direction(I, C) mod 360
By collinear_definition on A, D, J we get D in Line(A, J), J in Line(A, D), Line(A, D) == Line(A, J), 0 == 2 * angle(D, A, J) mod 360
By reverse_direction on B, I we get 180 == direction(B, I) - direction(I, B) mod 360
By collinear_definition on E, B, I we get B in Line(E, I), I in Line(B, E), Line(B, E) == Line(E, I), 0 == 2 * angle(B, E, I) mod 360
By reverse_direction on A, C we get 180 == direction(A, C) - direction(C, A) mod 360
By collinear_definition on I, C, G we get C in Line(G, I), G in Line(C, I), Line(C, I) == Line(G, I), 0 == 2 * angle(C, I, G) mod 360
By reverse_direction on I, C we get 180 == direction(I, C) - direction(C, I) mod 360
By collinear_definition on I, D, J we get D in Line(I, J), J in Line(D, I), Line(D, I) == Line(I, J), 0 == 2 * angle(D, I, J) mod 360
By reverse_direction on E, C we get 180 == direction(E, C) - direction(C, E) mod 360
By reverse_direction on B, E we get 180 == direction(B, E) - direction(E, B) mod 360
By collinear_definition on G, E, B we get E in Line(B, G), B in Line(E, G), Line(B, G) == Line(E, G), 0 == 2 * angle(E, G, B) mod 360
By collinear_definition on E, G, C we get G in Line(C, E), C in Line(E, G), Line(C, E) == Line(E, G), 0 == 2 * angle(G, E, C) mod 360
By collinear_definition on I, G, E we get G in Line(E, I), E in Line(G, I), Line(E, I) == Line(G, I), 0 == 2 * angle(G, I, E) mod 360
By collinear_definition on G, E, I we get E in Line(G, I), I in Line(E, G), Line(E, G) == Line(G, I), 0 == 2 * angle(E, G, I) mod 360
By collinear_definition on C, E, I we get E in Line(C, I), I in Line(C, E), Line(C, E) == Line(C, I), 0 == 2 * angle(E, C, I) mod 360
By collinear_definition on C, G, I we get G in Line(C, I), I in Line(C, G), Line(C, G) == Line(C, I), 0 == 2 * angle(G, C, I) mod 360
By reverse_direction on G, B we get 180 == direction(G, B) - direction(B, G) mod 360
By collinear_definition on C, E, G we get E in Line(C, G), G in Line(C, E), Line(C, E) == Line(C, G), 0 == 2 * angle(E, C, G) mod 360
By collinear_definition on E, G, I we get G in Line(E, I), I in Line(E, G), Line(E, G) == Line(E, I), 0 == 2 * angle(G, E, I) mod 360
By reverse_direction on E, D we get 180 == direction(E, D) - direction(D, E) mod 360
By reverse_direction on D, E we get 180 == direction(D, E) - direction(E, D) mod 360
By same_angle_v3 on D, J, I, F we get angle(J, D, F) == angle(I, D, F) + 180 mod 360
By same_angle_v1 on D, A, J, E we get angle(A, D, E) == angle(J, D, E) mod 360
By same_angle_v2 on D, A, I, F we get angle(A, D, F) == angle(I, D, F) + 180 mod 360
By same_angle_v3 on J, D, A, G we get angle(D, J, G) == angle(A, J, G) + 180 mod 360
By same_angle_v2 on D, I, J, E we get angle(I, D, E) == angle(J, D, E) + 180 mod 360
By same_angle_v0 on D, A, J, F we get angle(A, D, F) == angle(J, D, F) mod 360
By same_angle_v2 on D, I, A, E we get angle(I, D, E) == angle(A, D, E) + 180 mod 360
By same_angle_v2 on J, A, D, F we get angle(A, J, F) == angle(D, J, F) + 180 mod 360
By external_angle_bisector_definition_v0_r on D, B, D, E we get Line(B, E) == external_angle_bisector(D, E, D)
By internal_angle_bisector_definition_v0_r on F, J, B, A we get Line(A, J) == internal_angle_bisector(B, A, F)
By internal_angle_bisector_definition_v0 on A, D, B, C we get angle(A, C, D) == angle(D, C, B) mod 360
By internal_angle_bisector_definition_v0_r on E, B, E, C we get Line(B, C) == internal_angle_bisector(E, C, E)
By internal_angle_bisector_definition_v0_r on C, B, C, G we get Line(B, G) == internal_angle_bisector(C, G, C)
By external_angle_bisector_definition_v0_r on C, D, I, E we get Line(D, E) == external_angle_bisector(C, E, I)
By internal_angle_bisector_definition_v0_r on I, B, I, C we get Line(B, C) == internal_angle_bisector(I, C, I)
By external_angle_bisector_definition_v0_r on D, C, D, E we get Line(C, E) == external_angle_bisector(D, E, D)
By external_angle_bisector_definition_v0_r on D, C, D, F we get Line(C, F) == external_angle_bisector(D, F, D)
By internal_angle_bisector_definition_v0_r on B, C, B, E we get Line(C, E) == internal_angle_bisector(B, E, B)
By internal_angle_bisector_definition_v0_r on B, I, B, C we get Line(C, I) == internal_angle_bisector(B, C, B)
By external_angle_bisector_definition_v0_r on D, A, D, F we get Line(A, F) == external_angle_bisector(D, F, D)
By internal_angle_bisector_definition_v0_r on B, E, B, C we get Line(C, E) == internal_angle_bisector(B, C, B)
By internal_angle_bisector_definition_v0_r on G, C, I, B we get Line(B, C) == internal_angle_bisector(G, B, I)
By collinear_definition on J, D, I we get D in Line(I, J), I in Line(D, J), Line(D, J) == Line(I, J), 0 == 2 * angle(D, J, I) mod 360
By internal_angle_bisector_definition_v0_r on C, B, C, I we get Line(B, I) == internal_angle_bisector(C, I, C)
By external_angle_bisector_definition_v0_r on G, D, B, E we get Line(D, E) == external_angle_bisector(B, E, G)
By internal_angle_bisector_definition_v0 on B, D, A, C we get angle(B, C, D) == angle(D, C, A) mod 360
By external_angle_bisector_definition_v0_r on A, D, A, F we get Line(D, F) == external_angle_bisector(A, F, A)
By internal_angle_bisector_definition_v0_r on G, C, E, B we get Line(B, C) == internal_angle_bisector(E, B, G)
By internal_angle_bisector_definition_v0_r on B, G, B, C we get Line(C, G) == internal_angle_bisector(B, C, B)
By internal_angle_bisector_definition_v0_r on B, D, I, E we get Line(D, E) == internal_angle_bisector(B, E, I)
By external_angle_bisector_definition_v0_r on B, D, B, E we get Line(D, E) == external_angle_bisector(B, E, B)
By external_angle_bisector_definition_v0_r on D, G, D, E we get Line(E, G) == external_angle_bisector(D, E, D)
By external_angle_bisector_definition_v0_r on C, D, C, E we get Line(D, E) == external_angle_bisector(C, E, C)
By external_angle_bisector_definition_v0_r on I, D, I, E we get Line(D, E) == external_angle_bisector(I, E, I)
By internal_angle_bisector_definition_v0_r on I, B, G, C we get Line(B, C) == internal_angle_bisector(G, C, I)
By internal_angle_bisector_definition_v0_r on I, C, I, B we get Line(B, C) == internal_angle_bisector(I, B, I)
By internal_angle_bisector_definition_v0_r on C, A, C, F we get Line(A, F) == internal_angle_bisector(C, F, C)
By internal_angle_bisector_definition_v0_r on C, E, C, B we get Line(B, E) == internal_angle_bisector(C, B, C)
By external_angle_bisector_definition_v0_r on C, D, C, F we get Line(D, F) == external_angle_bisector(C, F, C)
By internal_angle_bisector_definition_v0_r on G, C, G, B we get Line(B, C) == internal_angle_bisector(G, B, G)
By external_angle_bisector_definition_v0_r on D, I, D, E we get Line(E, I) == external_angle_bisector(D, E, D)
By internal_angle_bisector_definition_v0_r on F, A, F, C we get Line(A, C) == internal_angle_bisector(F, C, F)
By internal_angle_bisector_definition_v0_r on E, C, E, B we get Line(B, C) == internal_angle_bisector(E, B, E)
By reverse_direction on B, D we get 180 == direction(B, D) - direction(D, B) mod 360
By collinear_definition on J, I, A we get I in Line(A, J), A in Line(I, J), Line(A, J) == Line(I, J), 0 == 2 * angle(I, J, A) mod 360
By external_angle_bisector_definition_v0_r on G, D, G, E we get Line(D, E) == external_angle_bisector(G, E, G)
By internal_angle_bisector_definition_v0_r on B, C, B, G we get Line(C, G) == internal_angle_bisector(B, G, B)
By internal_angle_bisector_definition_v0_r on B, D, C, E we get Line(D, E) == internal_angle_bisector(B, E, C)
By internal_angle_bisector_definition_v0_r on C, D, G, E we get Line(D, E) == internal_angle_bisector(C, E, G)
By internal_angle_bisector_definition_v0_r on A, F, A, C we get Line(C, F) == internal_angle_bisector(A, C, A)
By reverse_direction on A, D we get 180 == direction(A, D) - direction(D, A) mod 360
By internal_angle_bisector_definition_v0_r on E, B, I, C we get Line(B, C) == internal_angle_bisector(E, C, I)
By internal_angle_bisector_definition_v0_r on G, B, E, C we get Line(B, C) == internal_angle_bisector(E, C, G)
By internal_angle_bisector_definition_v0_r on C, G, C, B we get Line(B, G) == internal_angle_bisector(C, B, C)
By internal_angle_bisector_definition_v0_r on A, D, C, F we get Line(D, F) == internal_angle_bisector(A, F, C)
By internal_angle_bisector_definition_v0_r on F, D, B, A we get Line(A, D) == internal_angle_bisector(B, A, F)
By collinear_definition on J, A, I we get A in Line(I, J), I in Line(A, J), Line(A, J) == Line(I, J), 0 == 2 * angle(A, J, I) mod 360
By internal_angle_bisector_definition_v0_r on B, C, B, I we get Line(C, I) == internal_angle_bisector(B, I, B)
By internal_angle_bisector_definition_v0_r on C, B, C, E we get Line(B, E) == internal_angle_bisector(C, E, C)
By internal_angle_bisector_definition_v0_r on E, C, I, B we get Line(B, C) == internal_angle_bisector(E, B, I)
By internal_angle_bisector_definition_v0_r on A, D, E, B we get Line(B, D) == internal_angle_bisector(A, B, E)
By internal_angle_bisector_definition_v0_r on G, D, I, E we get Line(D, E) == internal_angle_bisector(G, E, I)
By internal_angle_bisector_definition_v0_r on I, D, A, B we get Line(B, D) == internal_angle_bisector(A, B, I)
By collinear_definition on J, I, D we get I in Line(D, J), D in Line(I, J), Line(D, J) == Line(I, J), 0 == 2 * angle(I, J, D) mod 360
By reverse_direction on A, J we get 180 == direction(A, J) - direction(J, A) mod 360
By internal_angle_bisector_definition_v0_r on C, F, C, A we get Line(A, F) == internal_angle_bisector(C, A, C)
By internal_angle_bisector_definition_v0_r on F, C, F, A we get Line(A, C) == internal_angle_bisector(F, A, F)
By reverse_direction on I, D we get 180 == direction(I, D) - direction(D, I) mod 360
By internal_angle_bisector_definition_v0_r on F, I, B, A we get Line(A, I) == internal_angle_bisector(B, A, F)
By internal_angle_bisector_definition_v0_r on C, I, C, B we get Line(B, I) == internal_angle_bisector(C, B, C)
By internal_angle_bisector_definition_v0_r on G, B, G, C we get Line(B, C) == internal_angle_bisector(G, C, G)
By internal_angle_bisector_definition_v0_r on A, D, G, B we get Line(B, D) == internal_angle_bisector(A, B, G)
By internal_angle_bisector_definition_v0_r on A, C, A, F we get Line(C, F) == internal_angle_bisector(A, F, A)
By same_angle_v1 on D, A, J, B we get angle(A, D, B) == angle(J, D, B) mod 360
By same_angle_v2 on D, A, I, C we get angle(A, D, C) == angle(I, D, C) + 180 mod 360
By same_angle_v3 on D, J, I, C we get angle(J, D, C) == angle(I, D, C) + 180 mod 360
By same_angle_v0 on D, A, J, C we get angle(A, D, C) == angle(J, D, C) mod 360
By same_angle_v2 on D, I, J, B we get angle(I, D, B) == angle(J, D, B) + 180 mod 360
By same_angle_v3 on D, I, A, B we get angle(I, D, B) == angle(A, D, B) + 180 mod 360
By power_of_a_point_definition on C, G, E, c we get log(power_of_a_point(C, c)) == log(distance(C, G)) + log(distance(C, E))
By collinear_definition on D, A, I we get A in Line(D, I), I in Line(A, D), Line(A, D) == Line(D, I), 0 == 2 * angle(A, D, I) mod 360
By collinear_definition on J, D, A we get D in Line(A, J), A in Line(D, J), Line(A, J) == Line(D, J), 0 == 2 * angle(D, J, A) mod 360
By collinear_definition on D, I, J we get I in Line(D, J), J in Line(D, I), Line(D, I) == Line(D, J), 0 == 2 * angle(I, D, J) mod 360
By collinear_definition on J, A, D we get A in Line(D, J), D in Line(A, J), Line(A, J) == Line(D, J), 0 == 2 * angle(A, J, D) mod 360
By collinear_definition on D, I, A we get I in Line(A, D), A in Line(D, I), Line(A, D) == Line(D, I), 0 == 2 * angle(I, D, A) mod 360
By collinear_definition on D, J, I we get J in Line(D, I), I in Line(D, J), Line(D, I) == Line(D, J), 0 == 2 * angle(J, D, I) mod 360
By collinear_definition on D, A, J we get A in Line(D, J), J in Line(A, D), Line(A, D) == Line(D, J), 0 == 2 * angle(A, D, J) mod 360
By collinear_definition on D, J, A we get J in Line(A, D), A in Line(D, J), Line(A, D) == Line(D, J), 0 == 2 * angle(J, D, A) mod 360
By anti_similar_triangle_basic_properties on H, A, G, H, G, A we get angle(H, A, G) == 0 - angle(H, G, A) mod 360, angle(A, G, H) == 0 - angle(G, A, H) mod 360, angle(G, H, A) == 0 - angle(A, H, G) mod 360, log(distance(A, H)) + log(distance(A, G)) == log(distance(G, H)) + log(distance(A, G)), log(distance(A, G)) + log(distance(A, H)) == log(distance(A, G)) + log(distance(G, H)), log(distance(A, H)) + log(distance(A, H)) == log(distance(G, H)) + log(distance(G, H))
By anti_similar_triangle_basic_properties on G, E, H, E, G, H we get angle(G, E, H) == 0 - angle(E, G, H) mod 360, angle(E, H, G) == 0 - angle(G, H, E) mod 360, angle(H, G, E) == 0 - angle(H, E, G) mod 360, log(distance(E, G)) + log(distance(E, H)) == log(distance(E, G)) + log(distance(G, H)), log(distance(E, H)) + log(distance(E, H)) == log(distance(G, H)) + log(distance(G, H)), log(distance(E, H)) + log(distance(E, G)) == log(distance(G, H)) + log(distance(E, G))
By anti_similar_triangle_basic_properties on F, A, H, A, F, H we get angle(F, A, H) == 0 - angle(A, F, H) mod 360, angle(A, H, F) == 0 - angle(F, H, A) mod 360, angle(H, F, A) == 0 - angle(H, A, F) mod 360, log(distance(A, F)) + log(distance(A, H)) == log(distance(A, F)) + log(distance(F, H)), log(distance(A, H)) + log(distance(A, H)) == log(distance(F, H)) + log(distance(F, H)), log(distance(A, H)) + log(distance(A, F)) == log(distance(F, H)) + log(distance(A, F))
By anti_similar_triangle_basic_properties on E, A, H, A, E, H we get angle(E, A, H) == 0 - angle(A, E, H) mod 360, angle(A, H, E) == 0 - angle(E, H, A) mod 360, angle(H, E, A) == 0 - angle(H, A, E) mod 360, log(distance(A, E)) + log(distance(A, H)) == log(distance(A, E)) + log(distance(E, H)), log(distance(A, H)) + log(distance(A, H)) == log(distance(E, H)) + log(distance(E, H)), log(distance(A, H)) + log(distance(A, E)) == log(distance(E, H)) + log(distance(A, E))
By anti_similar_triangle_basic_properties on H, G, F, H, F, G we get angle(H, G, F) == 0 - angle(H, F, G) mod 360, angle(G, F, H) == 0 - angle(F, G, H) mod 360, angle(F, H, G) == 0 - angle(G, H, F) mod 360, log(distance(F, H)) + log(distance(F, G)) == log(distance(G, H)) + log(distance(F, G)), log(distance(F, G)) + log(distance(F, H)) == log(distance(F, G)) + log(distance(G, H)), log(distance(F, H)) + log(distance(F, H)) == log(distance(G, H)) + log(distance(G, H))
By anti_similar_triangle_basic_properties on E, H, F, F, H, E we get angle(E, H, F) == 0 - angle(F, H, E) mod 360, angle(H, F, E) == 0 - angle(H, E, F) mod 360, angle(F, E, H) == 0 - angle(E, F, H) mod 360, log(distance(E, H)) + log(distance(E, H)) == log(distance(F, H)) + log(distance(F, H)), log(distance(E, H)) + log(distance(E, F)) == log(distance(F, H)) + log(distance(E, F)), log(distance(E, F)) + log(distance(E, H)) == log(distance(E, F)) + log(distance(F, H))
By power_of_a_point_definition on C, I, G, d we get log(power_of_a_point(C, d)) == log(distance(C, I)) + log(distance(C, G))
By power_of_a_point_definition on B, G, I, d we get log(power_of_a_point(B, d)) == log(distance(B, G)) + log(distance(B, I))
By power_of_a_point_definition on D, I, J, d we get log(power_of_a_point(D, d)) == log(distance(D, I)) + log(distance(D, J))
By power_of_a_point_definition on E, G, I, d we get log(power_of_a_point(E, d)) == log(distance(E, G)) + log(distance(E, I))
By power_of_a_point_definition on A, J, I, d we get log(power_of_a_point(A, d)) == log(distance(A, J)) + log(distance(A, I))
By power_of_a_point_definition on I, G, E, c we get log(power_of_a_point(I, c)) == log(distance(G, I)) + log(distance(E, I))
By power_of_a_point_definition on B, G, E, c we get log(power_of_a_point(B, c)) == log(distance(B, G)) + log(distance(B, E))
By line_intersection_definition on center(d), Line(I, center(d)), Line(G, center(d)) we get center(d) == line_intersection(Line(G, center(d)), Line(I, center(d)))
By line_intersection_definition on F, Line(F, G), Line(F, center(d)) we get F == line_intersection(Line(F, G), Line(F, center(d)))
By line_intersection_definition on F, Line(F, center(d)), Line(D, F) we get F == line_intersection(Line(D, F), Line(F, center(d)))
By line_intersection_definition on center(d), Line(F, center(d)), Line(G, center(d)) we get center(d) == line_intersection(Line(F, center(d)), Line(G, center(d)))
By line_intersection_definition on center(d), Line(I, center(d)), Line(J, center(d)) we get center(d) == line_intersection(Line(I, center(d)), Line(J, center(d)))
By line_intersection_definition on G, Line(G, center(d)), Line(F, G) we get G == line_intersection(Line(F, G), Line(G, center(d)))
By line_intersection_definition on F, Line(F, center(d)), Line(F, J) we get F == line_intersection(Line(F, J), Line(F, center(d)))
By line_intersection_definition on J, Line(J, center(d)), h we get J == line_intersection(h, Line(J, center(d)))
By line_intersection_definition on G, f, Line(G, center(d)) we get G == line_intersection(f, Line(G, center(d)))
By line_intersection_definition on center(d), Line(F, center(d)), Line(J, center(d)) we get center(d) == line_intersection(Line(F, center(d)), Line(J, center(d)))
By line_intersection_definition on J, Line(J, center(d)), Line(G, J) we get J == line_intersection(Line(G, J), Line(J, center(d)))
By line_intersection_definition on I, Line(F, I), Line(I, center(d)) we get I == line_intersection(Line(F, I), Line(I, center(d)))
By line_intersection_definition on F, Line(F, center(d)), Line(F, I) we get F == line_intersection(Line(F, I), Line(F, center(d)))
By line_intersection_definition on F, Line(F, center(d)), Line(E, F) we get F == line_intersection(Line(E, F), Line(F, center(d)))
By line_intersection_definition on I, Line(I, center(d)), f we get I == line_intersection(f, Line(I, center(d)))
By line_intersection_definition on F, Line(F, center(d)), Line(F, H) we get F == line_intersection(Line(F, H), Line(F, center(d)))
By line_intersection_definition on I, h, Line(I, center(d)) we get I == line_intersection(h, Line(I, center(d)))
By line_intersection_definition on J, Line(F, J), Line(J, center(d)) we get J == line_intersection(Line(F, J), Line(J, center(d)))
By line_intersection_definition on G, Line(G, center(d)), Line(G, H) we get G == line_intersection(Line(G, H), Line(G, center(d)))
By line_intersection_definition on G, Line(G, center(d)), Line(G, J) we get G == line_intersection(Line(G, J), Line(G, center(d)))
By line_intersection_definition on G, Line(A, G), Line(G, center(d)) we get G == line_intersection(Line(A, G), Line(G, center(d)))
By line_intersection_definition on center(d), Line(G, center(d)), Line(J, center(d)) we get center(d) == line_intersection(Line(G, center(d)), Line(J, center(d)))
By line_intersection_definition on F, g, Line(F, center(d)) we get F == line_intersection(g, Line(F, center(d)))
By line_intersection_definition on center(d), Line(F, center(d)), Line(I, center(d)) we get center(d) == line_intersection(Line(F, center(d)), Line(I, center(d)))
By between_imply_not_between on A, J, D we get collinear_and_not_between(D, A, J)
By between_imply_not_between on A, D, I we get collinear_and_not_between(D, A, I)
By between_imply_not_between on E, I, C we get collinear_and_not_between(C, E, I)
By between_imply_not_between on C, I, E we get collinear_and_not_between(E, C, I)
By between_imply_not_between on E, G, B we get collinear_and_not_between(B, E, G)
By between_imply_not_between on D, J, A we get collinear_and_not_between(A, D, J)
By between_imply_not_between on G, I, C we get collinear_and_not_between(C, G, I)
By between_imply_not_between on I, E, B we get collinear_and_not_between(B, I, E)
By between_imply_not_between on C, I, G we get collinear_and_not_between(G, C, I)
By between_imply_not_between on C, E, G we get collinear_and_not_between(E, C, G)
By between_imply_not_between on I, D, J we get collinear_and_not_between(D, I, J)
By between_imply_not_between on B, E, I we get collinear_and_not_between(E, B, I)
By between_imply_not_between on G, E, I we get collinear_and_not_between(E, G, I)
By between_imply_not_between on G, E, C we get collinear_and_not_between(C, G, E)
By between_imply_not_between on I, D, A we get collinear_and_not_between(A, I, D)
By between_imply_not_between on A, J, I we get collinear_and_not_between(I, A, J)
By between_imply_not_between on I, G, B we get collinear_and_not_between(B, I, G)
By between_imply_not_between on J, D, I we get collinear_and_not_between(D, J, I)
By between_imply_not_between on I, E, G we get collinear_and_not_between(E, I, G)
By between_imply_not_between on I, J, A we get collinear_and_not_between(A, I, J)
By between_imply_not_between on B, G, I we get collinear_and_not_between(G, B, I)
By between_imply_not_between on B, G, E we get collinear_and_not_between(E, B, G)
By between_imply_segment_sum on E, G, B we get distance(B, E) == distance(E, G) + distance(B, G)
By anti_similar_triangle_basic_properties on F, C, E, G, C, A we get angle(F, C, E) == 0 - angle(G, C, A) mod 360, angle(C, E, F) == 0 - angle(C, A, G) mod 360, angle(E, F, C) == 0 - angle(A, G, C) mod 360, log(distance(C, F)) + log(distance(A, C)) == log(distance(C, G)) + log(distance(C, E)), log(distance(A, C)) + log(distance(E, F)) == log(distance(C, E)) + log(distance(A, G)), log(distance(A, G)) + log(distance(C, F)) == log(distance(E, F)) + log(distance(C, G))
By aa_anti_similarity on D, E, C, D, F, C we get anti_similar_triangles(C, D, E, C, D, F)
By anti_similar_triangle_basic_properties on G, A, C, F, E, C we get angle(G, A, C) == 0 - angle(F, E, C) mod 360, angle(A, C, G) == 0 - angle(E, C, F) mod 360, angle(C, G, A) == 0 - angle(C, F, E) mod 360, log(distance(A, G)) + log(distance(C, E)) == log(distance(E, F)) + log(distance(A, C)), log(distance(A, C)) + log(distance(C, F)) == log(distance(C, E)) + log(distance(C, G)), log(distance(C, F)) + log(distance(A, G)) == log(distance(C, G)) + log(distance(E, F))
By aa_anti_similarity on D, F, C, D, E, C we get anti_similar_triangles(C, D, E, C, D, F)
By between_imply_segment_sum on I, D, A we get distance(A, I) == distance(D, I) + distance(A, D)
By reverse_direction on C, D we get 180 == direction(C, D) - direction(D, C) mod 360
By between_imply_segment_sum on B, E, I we get distance(B, I) == distance(B, E) + distance(E, I)
By between_imply_segment_sum on A, J, D we get distance(A, D) == distance(A, J) + distance(D, J)
By anti_similar_triangle_basic_properties on F, C, G, E, C, A we get angle(F, C, G) == 0 - angle(E, C, A) mod 360, angle(C, G, F) == 0 - angle(C, A, E) mod 360, angle(G, F, C) == 0 - angle(A, E, C) mod 360, log(distance(C, E)) + log(distance(C, G)) == log(distance(C, F)) + log(distance(A, C)), log(distance(A, C)) + log(distance(F, G)) == log(distance(C, G)) + log(distance(A, E)), log(distance(A, E)) + log(distance(C, F)) == log(distance(F, G)) + log(distance(C, E))
By anti_similar_triangle_basic_properties on C, F, G, C, E, A we get angle(C, F, G) == 0 - angle(C, E, A) mod 360, angle(F, G, C) == 0 - angle(E, A, C) mod 360, angle(G, C, F) == 0 - angle(A, C, E) mod 360, log(distance(C, E)) + log(distance(F, G)) == log(distance(C, F)) + log(distance(A, E)), log(distance(A, E)) + log(distance(C, G)) == log(distance(F, G)) + log(distance(A, C)), log(distance(A, C)) + log(distance(C, F)) == log(distance(C, G)) + log(distance(C, E))
By between_imply_segment_sum on G, E, I we get distance(G, I) == distance(E, G) + distance(E, I)
By between_imply_segment_sum on C, I, E we get distance(C, E) == distance(C, I) + distance(E, I)
By between_imply_segment_sum on G, E, C we get distance(C, G) == distance(E, G) + distance(C, E)
By between_imply_segment_sum on A, J, I we get distance(A, I) == distance(A, J) + distance(I, J)
By between_imply_segment_sum on J, D, I we get distance(I, J) == distance(D, J) + distance(D, I)
By aa_anti_similarity on D, C, F, D, C, E we get anti_similar_triangles(C, D, E, C, D, F)
By reverse_direction on D, C we get 180 == direction(D, C) - direction(C, D) mod 360
By between_imply_segment_sum on C, I, G we get distance(C, G) == distance(C, I) + distance(G, I)
By between_imply_segment_sum on I, G, B we get distance(B, I) == distance(G, I) + distance(B, G)
By aa_anti_similarity on D, C, E, D, C, F we get anti_similar_triangles(C, D, E, C, D, F)
By concyclic_definition_0 on E, F, D, C we get C in Circle(D, E, F)
By external_angle_bisector_definition_v0_r on C, E, G, I we get Line(E, I) == external_angle_bisector(C, I, G)
By external_angle_bisector_definition_v0_r on C, G, B, I we get Line(G, I) == external_angle_bisector(B, I, C)
By external_angle_bisector_definition_v0_r on C, I, G, E we get Line(E, I) == external_angle_bisector(C, E, G)
By external_angle_bisector_definition_v0_r on G, B, I, E we get Line(B, E) == external_angle_bisector(G, E, I)
By external_angle_bisector_definition_v0_r on B, C, E, G we get Line(C, G) == external_angle_bisector(B, G, E)
By external_angle_bisector_definition_v0_r on G, C, I, E we get Line(C, E) == external_angle_bisector(G, E, I)
By internal_angle_bisector_definition_v0_r on E, B, E, I we get Line(B, I) == internal_angle_bisector(E, I, E)
By external_angle_bisector_definition_v0_r on G, B, C, I we get Line(B, I) == external_angle_bisector(C, I, G)
By external_angle_bisector_definition_v0_r on I, G, B, E we get Line(E, G) == external_angle_bisector(B, E, I)
By external_angle_bisector_definition_v0_r on C, B, G, E we get Line(B, E) == external_angle_bisector(C, E, G)
By external_angle_bisector_definition_v0_r on J, A, I, D we get Line(A, D) == external_angle_bisector(I, D, J)
By external_angle_bisector_definition_v0_r on B, E, I, G we get Line(E, G) == external_angle_bisector(B, G, I)
By external_angle_bisector_definition_v0_r on B, C, I, G we get Line(C, G) == external_angle_bisector(B, G, I)
By external_angle_bisector_definition_v0_r on B, I, C, E we get Line(E, I) == external_angle_bisector(B, E, C)
By internal_angle_bisector_definition_v0_r on E, I, E, G we get Line(G, I) == internal_angle_bisector(E, G, E)
By internal_angle_bisector_definition_v0_r on D, I, D, J we get Line(I, J) == internal_angle_bisector(D, J, D)
By external_angle_bisector_definition_v0_r on A, I, D, J we get Line(I, J) == external_angle_bisector(A, J, D)
By external_angle_bisector_definition_v0_r on C, G, E, I we get Line(G, I) == external_angle_bisector(C, I, E)
By external_angle_bisector_definition_v0_r on E, I, B, G we get Line(G, I) == external_angle_bisector(B, G, E)
By internal_angle_bisector_definition_v0_r on F, D, G, C we get Line(C, D) == internal_angle_bisector(F, C, G)
By external_angle_bisector_definition_v0_r on B, G, C, E we get Line(E, G) == external_angle_bisector(B, E, C)
By internal_angle_bisector_definition_v0_r on I, G, C, E we get Line(E, G) == internal_angle_bisector(C, E, I)
By external_angle_bisector_definition_v0_r on E, B, C, I we get Line(B, I) == external_angle_bisector(C, I, E)
By internal_angle_bisector_definition_v0_r on B, E, I, C we get Line(C, E) == internal_angle_bisector(B, C, I)
By internal_angle_bisector_definition_v0_r on E, G, B, C we get Line(C, G) == internal_angle_bisector(B, C, E)
By internal_angle_bisector_definition_v0_r on A, I, A, D we get Line(D, I) == internal_angle_bisector(A, D, A)
By concyclic_definition_0 on E, F, C, D we get D in Circle(C, E, F)
By internal_angle_bisector_definition_v0_r on I, A, D, J we get Line(A, J) == internal_angle_bisector(D, J, I)
By internal_angle_bisector_definition_v0_r on B, D, F, C we get Line(C, D) == internal_angle_bisector(B, C, F)
By internal_angle_bisector_definition_v0_r on E, C, G, I we get Line(C, I) == internal_angle_bisector(E, I, G)
By internal_angle_bisector_definition_v0_r on J, A, J, I we get Line(A, I) == internal_angle_bisector(J, I, J)
By external_angle_bisector_definition_v0_r on B, I, C, G we get Line(G, I) == external_angle_bisector(B, G, C)
By internal_angle_bisector_definition_v0_r on J, A, J, D we get Line(A, D) == internal_angle_bisector(J, D, J)
By external_angle_bisector_definition_v0_r on C, E, B, G we get Line(E, G) == external_angle_bisector(B, G, C)
By internal_angle_bisector_definition_v0_r on E, B, G, I we get Line(B, I) == internal_angle_bisector(E, I, G)
By external_angle_bisector_definition_v0_r on B, E, C, I we get Line(E, I) == external_angle_bisector(B, I, C)
By external_angle_bisector_definition_v0_r on I, D, A, J we get Line(D, J) == external_angle_bisector(A, J, I)
By internal_angle_bisector_definition_v0_r on E, B, C, G we get Line(B, G) == internal_angle_bisector(C, G, E)
By external_angle_bisector_definition_v0_r on I, C, B, E we get Line(C, E) == external_angle_bisector(B, E, I)
By internal_angle_bisector_definition_v0_r on B, I, E, C we get Line(C, I) == internal_angle_bisector(B, C, E)
By internal_angle_bisector_definition_v0_r on E, I, C, G we get Line(G, I) == internal_angle_bisector(C, G, E)
By internal_angle_bisector_definition_v0_r on G, I, C, B we get Line(B, I) == internal_angle_bisector(C, B, G)
By internal_angle_bisector_definition_v0_r on I, C, E, G we get Line(C, G) == internal_angle_bisector(E, G, I)
By internal_angle_bisector_definition_v0_r on J, A, D, I we get Line(A, I) == internal_angle_bisector(D, I, J)
By internal_angle_bisector_definition_v0_r on I, A, I, D we get Line(A, D) == internal_angle_bisector(I, D, I)
By internal_angle_bisector_definition_v0_r on D, J, I, A we get Line(A, J) == internal_angle_bisector(D, A, I)
By internal_angle_bisector_definition_v0_r on I, C, I, G we get Line(C, G) == internal_angle_bisector(I, G, I)
By concyclic_definition_0 on D, E, C, F we get F in Circle(C, D, E)
By internal_angle_bisector_definition_v0_r on I, D, F, C we get Line(C, D) == internal_angle_bisector(F, C, I)
By internal_angle_bisector_definition_v0_r on A, D, A, J we get Line(D, J) == internal_angle_bisector(A, J, A)
By internal_angle_bisector_definition_v0_r on B, G, I, C we get Line(C, G) == internal_angle_bisector(B, C, I)
By internal_angle_bisector_definition_v0_r on A, D, J, I we get Line(D, I) == internal_angle_bisector(A, I, J)
By internal_angle_bisector_definition_v0_r on I, B, I, G we get Line(B, G) == internal_angle_bisector(I, G, I)
By internal_angle_bisector_definition_v0_r on C, G, E, B we get Line(B, G) == internal_angle_bisector(C, B, E)
By internal_angle_bisector_definition_v0_r on I, D, J, A we get Line(A, D) == internal_angle_bisector(I, A, J)
By internal_angle_bisector_definition_v0_r on I, G, I, E we get Line(E, G) == internal_angle_bisector(I, E, I)
By internal_angle_bisector_definition_v0_r on B, C, E, I we get Line(C, I) == internal_angle_bisector(B, I, E)
By internal_angle_bisector_definition_v0_r on I, J, I, D we get Line(D, J) == internal_angle_bisector(I, D, I)
By internal_angle_bisector_definition_v0_r on E, D, F, C we get Line(C, D) == internal_angle_bisector(E, C, F)
By internal_angle_bisector_definition_v0_r on J, D, J, A we get Line(A, D) == internal_angle_bisector(J, A, J)
By external_angle_bisector_definition_v0_r on A, J, I, D we get Line(D, J) == external_angle_bisector(A, D, I)
By internal_angle_bisector_definition_v0_r on G, I, B, E we get Line(E, I) == internal_angle_bisector(B, E, G)
By internal_angle_bisector_definition_v0_r on G, C, G, I we get Line(C, I) == internal_angle_bisector(G, I, G)
By internal_angle_bisector_definition_v0_r on I, E, C, G we get Line(E, G) == internal_angle_bisector(C, G, I)
By internal_angle_bisector_definition_v0_r on I, E, C, B we get Line(B, E) == internal_angle_bisector(C, B, I)
By internal_angle_bisector_definition_v0_r on G, C, B, I we get Line(C, I) == internal_angle_bisector(B, I, G)
By concyclic_definition_0 on C, F, D, E we get E in Circle(C, D, F)
By internal_angle_bisector_definition_v0_r on C, G, I, B we get Line(B, G) == internal_angle_bisector(C, B, I)
By internal_angle_bisector_definition_v0_r on G, I, B, C we get Line(C, I) == internal_angle_bisector(B, C, G)
By internal_angle_bisector_definition_v0_r on E, D, A, C we get Line(C, D) == internal_angle_bisector(A, C, E)
By internal_angle_bisector_definition_v0_r on D, A, D, J we get Line(A, J) == internal_angle_bisector(D, J, D)
By internal_angle_bisector_definition_v0_r on I, B, C, G we get Line(B, G) == internal_angle_bisector(C, G, I)
By internal_angle_bisector_definition_v0_r on C, E, G, B we get Line(B, E) == internal_angle_bisector(C, B, G)
By internal_angle_bisector_definition_v0_r on G, C, G, E we get Line(C, E) == internal_angle_bisector(G, E, G)
By internal_angle_bisector_definition_v0_r on E, G, B, I we get Line(G, I) == internal_angle_bisector(B, I, E)
By internal_angle_bisector_definition_v0_r on I, D, I, J we get Line(D, J) == internal_angle_bisector(I, J, I)
By internal_angle_bisector_definition_v0_r on G, B, G, E we get Line(B, E) == internal_angle_bisector(G, E, G)
By internal_angle_bisector_definition_v0_r on E, C, E, G we get Line(C, G) == internal_angle_bisector(E, G, E)
By internal_angle_bisector_definition_v0_r on I, A, I, J we get Line(A, J) == internal_angle_bisector(I, J, I)
By internal_angle_bisector_definition_v0_r on E, I, C, B we get Line(B, I) == internal_angle_bisector(C, B, E)
By internal_angle_bisector_definition_v0_r on D, A, D, I we get Line(A, I) == internal_angle_bisector(D, I, D)
By internal_angle_bisector_definition_v0_r on B, E, G, C we get Line(C, E) == internal_angle_bisector(B, C, G)
By internal_angle_bisector_definition_v0_r on I, D, I, A we get Line(A, D) == internal_angle_bisector(I, A, I)
By internal_angle_bisector_definition_v0_r on E, B, E, G we get Line(B, G) == internal_angle_bisector(E, G, E)
By internal_angle_bisector_definition_v0_r on I, D, A, C we get Line(C, D) == internal_angle_bisector(A, C, I)
By internal_angle_bisector_definition_v0_r on I, B, C, E we get Line(B, E) == internal_angle_bisector(C, E, I)
By reverse_direction on center(d), G we get 180 == direction(center(d), G) - direction(G, center(d)) mod 360
By internal_angle_bisector_definition_v0_r on B, E, G, I we get Line(E, I) == internal_angle_bisector(B, I, G)
By internal_angle_bisector_definition_v0_r on D, J, D, I we get Line(I, J) == internal_angle_bisector(D, I, D)
By internal_angle_bisector_definition_v0_r on B, C, G, E we get Line(C, E) == internal_angle_bisector(B, E, G)
By internal_angle_bisector_definition_v0_r on J, I, J, A we get Line(A, I) == internal_angle_bisector(J, A, J)
By internal_angle_bisector_definition_v0_r on G, E, G, I we get Line(E, I) == internal_angle_bisector(G, I, G)
By internal_angle_bisector_definition_v0_r on I, B, I, E we get Line(B, E) == internal_angle_bisector(I, E, I)
By internal_angle_bisector_definition_v0_r on J, D, J, I we get Line(D, I) == internal_angle_bisector(J, I, J)
By internal_angle_bisector_definition_v0_r on G, B, G, I we get Line(B, I) == internal_angle_bisector(G, I, G)
By reverse_direction on center(d), J we get 180 == direction(center(d), J) - direction(J, center(d)) mod 360
By internal_angle_bisector_definition_v0_r on E, C, E, I we get Line(C, I) == internal_angle_bisector(E, I, E)
By internal_angle_bisector_definition_v0_r on G, D, A, C we get Line(C, D) == internal_angle_bisector(A, C, G)
By internal_angle_bisector_definition_v0_r on A, I, A, J we get Line(I, J) == internal_angle_bisector(A, J, A)
By internal_angle_bisector_definition_v0_r on J, I, J, D we get Line(D, I) == internal_angle_bisector(J, D, J)
By reverse_direction on center(d), F we get 180 == direction(center(d), F) - direction(F, center(d)) mod 360
By internal_angle_bisector_definition_v0_r on A, J, A, I we get Line(I, J) == internal_angle_bisector(A, I, A)
By internal_angle_bisector_definition_v0_r on I, J, I, A we get Line(A, J) == internal_angle_bisector(I, A, I)
By internal_angle_bisector_definition_v0_r on D, J, A, I we get Line(I, J) == internal_angle_bisector(A, I, D)
By internal_angle_bisector_definition_v0_r on E, B, I, G we get Line(B, G) == internal_angle_bisector(E, G, I)
By internal_angle_bisector_definition_v0_r on D, J, D, A we get Line(A, J) == internal_angle_bisector(D, A, D)
By internal_angle_bisector_definition_v0_r on D, I, D, A we get Line(A, I) == internal_angle_bisector(D, A, D)
By internal_angle_bisector_definition_v0_r on J, I, D, A we get Line(A, I) == internal_angle_bisector(D, A, J)
By internal_angle_bisector_definition_v0_r on A, I, J, D we get Line(D, I) == internal_angle_bisector(A, D, J)
By internal_angle_bisector_definition_v0_r on A, J, A, D we get Line(D, J) == internal_angle_bisector(A, D, A)
By internal_angle_bisector_definition_v0_r on G, I, G, E we get Line(E, I) == internal_angle_bisector(G, E, G)
By internal_angle_bisector_definition_v0_r on I, E, I, G we get Line(E, G) == internal_angle_bisector(I, G, I)
By reverse_direction on center(d), I we get 180 == direction(center(d), I) - direction(I, center(d)) mod 360
By internal_angle_bisector_definition_v0_r on E, G, E, I we get Line(G, I) == internal_angle_bisector(E, I, E)
By internal_angle_bisector_definition_v0_r on A, D, A, I we get Line(D, I) == internal_angle_bisector(A, I, A)
By internal_angle_bisector_definition_v0_r on I, C, I, E we get Line(C, E) == internal_angle_bisector(I, E, I)
By concyclic_definition_1 on F, D, C, E we get Circle(C, D, E) == Circle(C, D, F)
By isosceles_triangle_properties on center(d), J, G we get distance(G, center(d)) == distance(J, center(d)), angle(J, G, center(d)) == angle(center(d), J, G) mod 360
By isosceles_triangle_properties on center(d), G, F we get distance(F, center(d)) == distance(G, center(d)), angle(G, F, center(d)) == angle(center(d), G, F) mod 360
By isosceles_triangle_properties on center(d), I, G we get distance(G, center(d)) == distance(I, center(d)), angle(I, G, center(d)) == angle(center(d), I, G) mod 360
By concyclic_definition_1 on D, F, C, E we get Circle(C, D, F) == Circle(C, E, F)
By sas_anti_congruence on I, center(d), J, J, center(d), I we get anti_congruent_triangles(I, J, center(d), J, I, center(d))
By isosceles_triangle_properties on center(d), I, J we get distance(I, center(d)) == distance(J, center(d)), angle(I, J, center(d)) == angle(center(d), I, J) mod 360
By concyclic_definition_1 on E, F, D, C we get Circle(C, D, F) == Circle(D, E, F)
By concyclic_definition_1 on C, E, D, F we get Circle(C, D, E) == Circle(D, E, F)
By sas_anti_congruence on J, center(d), I, I, center(d), J we get anti_congruent_triangles(I, J, center(d), J, I, center(d))
By sas_anti_congruence on F, center(d), G, G, center(d), F we get anti_congruent_triangles(F, G, center(d), G, F, center(d))
By concyclic_definition_1 on D, E, F, C we get Circle(C, E, F) == Circle(D, E, F)
By isosceles_triangle_properties on center(d), G, J we get distance(G, center(d)) == distance(J, center(d)), angle(G, J, center(d)) == angle(center(d), G, J) mod 360
By concyclic_definition_1 on F, C, E, D we get Circle(C, D, E) == Circle(C, E, F)
By sas_anti_congruence on G, center(d), J, J, center(d), G we get anti_congruent_triangles(G, J, center(d), J, G, center(d))
By sas_anti_congruence on J, center(d), F, F, center(d), J we get anti_congruent_triangles(F, J, center(d), J, F, center(d))
By sas_anti_congruence on G, center(d), I, I, center(d), G we get anti_congruent_triangles(G, I, center(d), I, G, center(d))
By sas_anti_congruence on J, center(d), G, G, center(d), J we get anti_congruent_triangles(G, J, center(d), J, G, center(d))
By isosceles_triangle_properties on center(d), J, F we get distance(F, center(d)) == distance(J, center(d)), angle(J, F, center(d)) == angle(center(d), J, F) mod 360
By sas_anti_congruence on I, center(d), F, F, center(d), I we get anti_congruent_triangles(F, I, center(d), I, F, center(d))
By sas_anti_congruence on F, center(d), I, I, center(d), F we get anti_congruent_triangles(F, I, center(d), I, F, center(d))
By sas_anti_congruence on I, center(d), G, G, center(d), I we get anti_congruent_triangles(G, I, center(d), I, G, center(d))
By sas_anti_congruence on F, center(d), J, J, center(d), F we get anti_congruent_triangles(F, J, center(d), J, F, center(d))
By isosceles_triangle_properties on center(d), G, I we get distance(G, center(d)) == distance(I, center(d)), angle(G, I, center(d)) == angle(center(d), G, I) mod 360
By isosceles_triangle_properties on center(d), I, F we get distance(F, center(d)) == distance(I, center(d)), angle(I, F, center(d)) == angle(center(d), I, F) mod 360
By isosceles_triangle_properties on center(d), F, J we get distance(F, center(d)) == distance(J, center(d)), angle(F, J, center(d)) == angle(center(d), F, J) mod 360
By isosceles_triangle_properties on center(d), F, I we get distance(F, center(d)) == distance(I, center(d)), angle(F, I, center(d)) == angle(center(d), F, I) mod 360
By sas_anti_congruence on G, center(d), F, F, center(d), G we get anti_congruent_triangles(F, G, center(d), G, F, center(d))
By isosceles_triangle_properties on center(d), F, G we get distance(F, center(d)) == distance(G, center(d)), angle(F, G, center(d)) == angle(center(d), F, G) mod 360
By isosceles_triangle_properties on center(d), J, I we get distance(I, center(d)) == distance(J, center(d)), angle(J, I, center(d)) == angle(center(d), J, I) mod 360
By concurrent_sufficient_conditions on Line(G, center(d)), Line(G, J), Line(F, G) we get concurrent(Line(F, G), Line(G, J), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(d)), g we get concurrent(g, Line(E, F), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(d)), Line(F, I) we get concurrent(Line(F, G), Line(F, I), Line(F, center(d)))
By concurrent_sufficient_conditions on f, Line(G, J), Line(G, center(d)) we get concurrent(f, Line(G, J), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(d)), Line(E, F) we get concurrent(Line(E, F), Line(F, I), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, J), Line(D, F) we get concurrent(Line(D, F), Line(F, J), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, I), Line(F, G) we get concurrent(Line(F, G), Line(F, I), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(G, H), f, Line(G, center(d)) we get concurrent(f, Line(G, H), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(G, J), Line(G, center(d)), Line(A, G) we get concurrent(Line(A, G), Line(G, J), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(F, I), Line(F, H), Line(F, center(d)) we get concurrent(Line(F, H), Line(F, I), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, H), g we get concurrent(g, Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on g, Line(F, center(d)), Line(E, F) we get concurrent(g, Line(E, F), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, I), Line(F, center(d)) we get concurrent(Line(E, F), Line(F, I), Line(F, center(d)))
By concurrent_sufficient_conditions on g, Line(F, I), Line(F, center(d)) we get concurrent(g, Line(F, I), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(d)), Line(G, J) we get concurrent(Line(F, G), Line(G, J), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, I), Line(F, H) we get concurrent(Line(F, H), Line(F, I), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, I), Line(D, F) we get concurrent(Line(D, F), Line(F, I), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(D, F), Line(F, J), Line(F, center(d)) we get concurrent(Line(D, F), Line(F, J), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), g, Line(E, F) we get concurrent(g, Line(E, F), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(d)), Line(F, J) we get concurrent(Line(E, F), Line(F, J), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(d)), Line(E, F) we get concurrent(Line(E, F), Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(E, F), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(D, F), Line(F, H) we get concurrent(Line(D, F), Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(I, center(d)), Line(G, center(d)), Line(F, center(d)) we get concurrent(Line(F, center(d)), Line(G, center(d)), Line(I, center(d)))
By concurrent_sufficient_conditions on Line(F, G), Line(G, J), Line(G, center(d)) we get concurrent(Line(F, G), Line(G, J), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(F, I), Line(F, J), Line(F, center(d)) we get concurrent(Line(F, I), Line(F, J), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(d)), Line(F, H) we get concurrent(Line(F, H), Line(F, J), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, H), Line(D, F) we get concurrent(Line(D, F), Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(d)), Line(F, I) we get concurrent(Line(E, F), Line(F, I), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), Line(F, center(d)) we get concurrent(Line(D, F), Line(E, F), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(G, H), Line(G, center(d)), Line(F, G) we get concurrent(Line(F, G), Line(G, H), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(A, G), Line(G, center(d)), f we get concurrent(f, Line(A, G), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(d)), Line(D, F) we get concurrent(Line(D, F), Line(F, G), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(I, center(d)), Line(F, center(d)), Line(J, center(d)) we get concurrent(Line(F, center(d)), Line(I, center(d)), Line(J, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(G, center(d)), Line(J, center(d)) we get concurrent(Line(F, center(d)), Line(G, center(d)), Line(J, center(d)))
By concurrent_sufficient_conditions on Line(F, I), Line(D, F), Line(F, center(d)) we get concurrent(Line(D, F), Line(F, I), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(G, J), f, Line(G, center(d)) we get concurrent(f, Line(G, J), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(I, center(d)), Line(F, center(d)), Line(G, center(d)) we get concurrent(Line(F, center(d)), Line(G, center(d)), Line(I, center(d)))
By concurrent_sufficient_conditions on g, Line(F, G), Line(F, center(d)) we get concurrent(g, Line(F, G), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(A, G), Line(G, center(d)), Line(G, J) we get concurrent(Line(A, G), Line(G, J), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(d)), g we get concurrent(g, Line(D, F), Line(F, center(d)))
By concurrent_sufficient_conditions on f, Line(I, center(d)), Line(F, I) we get concurrent(f, Line(F, I), Line(I, center(d)))
By concurrent_sufficient_conditions on Line(D, F), Line(F, H), Line(F, center(d)) we get concurrent(Line(D, F), Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, G), Line(E, F), Line(F, center(d)) we get concurrent(Line(E, F), Line(F, G), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(G, J), Line(J, center(d)), Line(F, J) we get concurrent(Line(F, J), Line(G, J), Line(J, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(E, F), Line(F, I) we get concurrent(Line(E, F), Line(F, I), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, J), Line(F, G) we get concurrent(Line(F, G), Line(F, J), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, J), Line(F, center(d)) we get concurrent(Line(E, F), Line(F, J), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), g, Line(F, J) we get concurrent(g, Line(F, J), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, G), Line(F, I) we get concurrent(Line(F, G), Line(F, I), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(d)), Line(F, J) we get concurrent(Line(F, G), Line(F, J), Line(F, center(d)))
By concurrent_sufficient_conditions on f, Line(G, center(d)), Line(G, J) we get concurrent(f, Line(G, J), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, H), Line(F, I) we get concurrent(Line(F, H), Line(F, I), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(G, center(d)), Line(J, center(d)), Line(F, center(d)) we get concurrent(Line(F, center(d)), Line(G, center(d)), Line(J, center(d)))
By concurrent_sufficient_conditions on Line(F, H), Line(F, G), Line(F, center(d)) we get concurrent(Line(F, G), Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(I, center(d)), h, f we get concurrent(f, h, Line(I, center(d)))
By concurrent_sufficient_conditions on Line(G, J), Line(G, center(d)), Line(F, G) we get concurrent(Line(F, G), Line(G, J), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), g, Line(F, G) we get concurrent(g, Line(F, G), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(J, center(d)), Line(G, center(d)) we get concurrent(Line(F, center(d)), Line(G, center(d)), Line(J, center(d)))
By concurrent_sufficient_conditions on Line(I, center(d)), Line(G, center(d)), Line(J, center(d)) we get concurrent(Line(G, center(d)), Line(I, center(d)), Line(J, center(d)))
By concurrent_sufficient_conditions on Line(J, center(d)), Line(F, center(d)), Line(I, center(d)) we get concurrent(Line(F, center(d)), Line(I, center(d)), Line(J, center(d)))
By concurrent_sufficient_conditions on Line(I, center(d)), Line(J, center(d)), Line(G, center(d)) we get concurrent(Line(G, center(d)), Line(I, center(d)), Line(J, center(d)))
By concurrent_sufficient_conditions on Line(F, J), Line(G, J), Line(J, center(d)) we get concurrent(Line(F, J), Line(G, J), Line(J, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, I), Line(E, F) we get concurrent(Line(E, F), Line(F, I), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(J, center(d)), Line(G, center(d)), Line(F, center(d)) we get concurrent(Line(F, center(d)), Line(G, center(d)), Line(J, center(d)))
By concurrent_sufficient_conditions on Line(F, G), Line(A, G), Line(G, center(d)) we get concurrent(Line(A, G), Line(F, G), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(D, F), g, Line(F, center(d)) we get concurrent(g, Line(D, F), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, I), Line(I, center(d)), f we get concurrent(f, Line(F, I), Line(I, center(d)))
By concurrent_sufficient_conditions on Line(G, center(d)), Line(A, G), f we get concurrent(f, Line(A, G), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(G, H), Line(G, center(d)), Line(A, G) we get concurrent(Line(A, G), Line(G, H), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(G, center(d)), Line(F, center(d)), Line(J, center(d)) we get concurrent(Line(F, center(d)), Line(G, center(d)), Line(J, center(d)))
By concurrent_sufficient_conditions on Line(I, center(d)), h, Line(F, I) we get concurrent(h, Line(F, I), Line(I, center(d)))
By concurrent_sufficient_conditions on Line(A, G), Line(G, J), Line(G, center(d)) we get concurrent(Line(A, G), Line(G, J), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(d)), Line(F, G) we get concurrent(Line(D, F), Line(F, G), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, H), Line(F, G) we get concurrent(Line(F, G), Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, I), Line(F, J) we get concurrent(Line(F, I), Line(F, J), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(G, H), Line(F, G), Line(G, center(d)) we get concurrent(Line(F, G), Line(G, H), Line(G, center(d)))
By concurrent_sufficient_conditions on f, Line(F, G), Line(G, center(d)) we get concurrent(f, Line(F, G), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(J, center(d)), h, Line(G, J) we get concurrent(h, Line(G, J), Line(J, center(d)))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(d)), g we get concurrent(g, Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, G), g we get concurrent(g, Line(F, G), Line(F, center(d)))
By concurrent_sufficient_conditions on g, Line(D, F), Line(F, center(d)) we get concurrent(g, Line(D, F), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(d)), Line(F, I) we get concurrent(Line(F, I), Line(F, J), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(G, center(d)), Line(G, H), Line(A, G) we get concurrent(Line(A, G), Line(G, H), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(d)), Line(D, F) we get concurrent(Line(D, F), Line(F, I), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(J, center(d)), Line(F, J), Line(G, J) we get concurrent(Line(F, J), Line(G, J), Line(J, center(d)))
By concurrent_sufficient_conditions on Line(G, center(d)), Line(F, G), Line(G, J) we get concurrent(Line(F, G), Line(G, J), Line(G, center(d)))
By concurrent_sufficient_conditions on g, Line(F, center(d)), Line(F, I) we get concurrent(g, Line(F, I), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, I), Line(I, center(d)), h we get concurrent(h, Line(F, I), Line(I, center(d)))
By concurrent_sufficient_conditions on Line(A, G), Line(G, H), Line(G, center(d)) we get concurrent(Line(A, G), Line(G, H), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), g, Line(F, H) we get concurrent(g, Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on g, Line(F, center(d)), Line(D, F) we get concurrent(g, Line(D, F), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, H), Line(F, center(d)) we get concurrent(Line(E, F), Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, J), h, Line(J, center(d)) we get concurrent(h, Line(F, J), Line(J, center(d)))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(d)), Line(F, J) we get concurrent(Line(F, H), Line(F, J), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(G, center(d)), Line(I, center(d)), Line(J, center(d)) we get concurrent(Line(G, center(d)), Line(I, center(d)), Line(J, center(d)))
By concurrent_sufficient_conditions on Line(G, center(d)), Line(A, G), Line(G, J) we get concurrent(Line(A, G), Line(G, J), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(d)), Line(F, G) we get concurrent(Line(E, F), Line(F, G), Line(F, center(d)))
By concurrent_sufficient_conditions on h, Line(G, J), Line(J, center(d)) we get concurrent(h, Line(G, J), Line(J, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), g, Line(D, F) we get concurrent(g, Line(D, F), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), Line(F, center(d)) we get concurrent(Line(D, F), Line(E, F), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, J), Line(F, H), Line(F, center(d)) we get concurrent(Line(F, H), Line(F, J), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, G), Line(F, J), Line(F, center(d)) we get concurrent(Line(F, G), Line(F, J), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, J), Line(E, F) we get concurrent(Line(E, F), Line(F, J), Line(F, center(d)))
By concurrent_sufficient_conditions on g, Line(F, center(d)), Line(F, G) we get concurrent(g, Line(F, G), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(G, center(d)), Line(A, G), Line(F, G) we get concurrent(Line(A, G), Line(F, G), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(G, center(d)), f, Line(G, H) we get concurrent(f, Line(G, H), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(D, F), g we get concurrent(g, Line(D, F), Line(F, center(d)))
By concurrent_sufficient_conditions on g, Line(E, F), Line(F, center(d)) we get concurrent(g, Line(E, F), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, G), Line(F, H) we get concurrent(Line(F, G), Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(d)), Line(E, F) we get concurrent(Line(E, F), Line(F, J), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, G), Line(D, F) we get concurrent(Line(D, F), Line(F, G), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(G, H), Line(G, center(d)), Line(G, J) we get concurrent(Line(G, H), Line(G, J), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(G, center(d)), Line(G, H), Line(G, J) we get concurrent(Line(G, H), Line(G, J), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(J, center(d)), Line(G, center(d)), Line(I, center(d)) we get concurrent(Line(G, center(d)), Line(I, center(d)), Line(J, center(d)))
By concurrent_sufficient_conditions on Line(F, G), f, Line(G, center(d)) we get concurrent(f, Line(F, G), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(E, F), g, Line(F, center(d)) we get concurrent(g, Line(E, F), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(d)), Line(A, G) we get concurrent(Line(A, G), Line(F, G), Line(G, center(d)))
By concurrent_sufficient_conditions on f, Line(F, I), Line(I, center(d)) we get concurrent(f, Line(F, I), Line(I, center(d)))
By concurrent_sufficient_conditions on Line(F, H), g, Line(F, center(d)) we get concurrent(g, Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(D, F), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(d)), Line(F, G) we get concurrent(Line(F, G), Line(F, I), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(G, center(d)), Line(F, G), Line(G, H) we get concurrent(Line(F, G), Line(G, H), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(F, I), f, Line(I, center(d)) we get concurrent(f, Line(F, I), Line(I, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, J), Line(F, I) we get concurrent(Line(F, I), Line(F, J), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(E, F), g we get concurrent(g, Line(E, F), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, J), Line(F, G), Line(F, center(d)) we get concurrent(Line(F, G), Line(F, J), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(G, J), Line(G, center(d)), Line(G, H) we get concurrent(Line(G, H), Line(G, J), Line(G, center(d)))
By concurrent_sufficient_conditions on f, Line(G, center(d)), Line(A, G) we get concurrent(f, Line(A, G), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(J, center(d)), Line(I, center(d)), Line(G, center(d)) we get concurrent(Line(G, center(d)), Line(I, center(d)), Line(J, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, G), Line(F, J) we get concurrent(Line(F, G), Line(F, J), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(G, center(d)), Line(G, J), Line(A, G) we get concurrent(Line(A, G), Line(G, J), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(J, center(d)), Line(F, center(d)), Line(G, center(d)) we get concurrent(Line(F, center(d)), Line(G, center(d)), Line(J, center(d)))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(d)), Line(F, H) we get concurrent(Line(F, G), Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, J), Line(J, center(d)), h we get concurrent(h, Line(F, J), Line(J, center(d)))
By concurrent_sufficient_conditions on Line(D, F), Line(F, I), Line(F, center(d)) we get concurrent(Line(D, F), Line(F, I), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(I, center(d)), Line(F, I), h we get concurrent(h, Line(F, I), Line(I, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(D, F), Line(F, J) we get concurrent(Line(D, F), Line(F, J), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(G, center(d)), Line(J, center(d)), Line(I, center(d)) we get concurrent(Line(G, center(d)), Line(I, center(d)), Line(J, center(d)))
By concurrent_sufficient_conditions on Line(G, J), h, Line(J, center(d)) we get concurrent(h, Line(G, J), Line(J, center(d)))
By concurrent_sufficient_conditions on Line(F, G), Line(D, F), Line(F, center(d)) we get concurrent(Line(D, F), Line(F, G), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(G, J), Line(J, center(d)), h we get concurrent(h, Line(G, J), Line(J, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, H), Line(F, J) we get concurrent(Line(F, H), Line(F, J), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(G, J), Line(F, G), Line(G, center(d)) we get concurrent(Line(F, G), Line(G, J), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(G, center(d)), Line(I, center(d)), Line(F, center(d)) we get concurrent(Line(F, center(d)), Line(G, center(d)), Line(I, center(d)))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(d)), g we get concurrent(g, Line(F, G), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(d)), g we get concurrent(g, Line(F, I), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(I, center(d)), Line(F, I), f we get concurrent(f, Line(F, I), Line(I, center(d)))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(d)), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(I, center(d)), Line(J, center(d)), Line(F, center(d)) we get concurrent(Line(F, center(d)), Line(I, center(d)), Line(J, center(d)))
By concurrent_sufficient_conditions on Line(G, center(d)), Line(G, H), f we get concurrent(f, Line(G, H), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(d)), Line(G, H) we get concurrent(Line(F, G), Line(G, H), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(G, center(d)), Line(F, G), Line(A, G) we get concurrent(Line(A, G), Line(F, G), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(D, F), Line(F, G) we get concurrent(Line(D, F), Line(F, G), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(G, center(d)), f, Line(A, G) we get concurrent(f, Line(A, G), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(G, H), Line(G, center(d)), f we get concurrent(f, Line(G, H), Line(G, center(d)))
By concurrent_sufficient_conditions on f, Line(I, center(d)), h we get concurrent(f, h, Line(I, center(d)))
By concurrent_sufficient_conditions on h, Line(F, I), Line(I, center(d)) we get concurrent(h, Line(F, I), Line(I, center(d)))
By concurrent_sufficient_conditions on Line(I, center(d)), f, Line(F, I) we get concurrent(f, Line(F, I), Line(I, center(d)))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(d)), Line(E, F) we get concurrent(Line(E, F), Line(F, G), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(E, F), Line(F, J) we get concurrent(Line(E, F), Line(F, J), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(d)), Line(F, J) we get concurrent(Line(D, F), Line(F, J), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(E, F), Line(F, H) we get concurrent(Line(E, F), Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(J, center(d)), Line(G, J), Line(F, J) we get concurrent(Line(F, J), Line(G, J), Line(J, center(d)))
By concurrent_sufficient_conditions on h, Line(J, center(d)), Line(G, J) we get concurrent(h, Line(G, J), Line(J, center(d)))
By concurrent_sufficient_conditions on Line(F, I), Line(F, G), Line(F, center(d)) we get concurrent(Line(F, G), Line(F, I), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(d)), Line(D, F) we get concurrent(Line(D, F), Line(F, J), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(G, center(d)), Line(A, G), Line(G, H) we get concurrent(Line(A, G), Line(G, H), Line(G, center(d)))
By concurrent_sufficient_conditions on g, Line(F, J), Line(F, center(d)) we get concurrent(g, Line(F, J), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, H), Line(F, I), Line(F, center(d)) we get concurrent(Line(F, H), Line(F, I), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(G, center(d)), Line(I, center(d)) we get concurrent(Line(F, center(d)), Line(G, center(d)), Line(I, center(d)))
By concurrent_sufficient_conditions on Line(F, I), h, Line(I, center(d)) we get concurrent(h, Line(F, I), Line(I, center(d)))
By concurrent_sufficient_conditions on Line(A, G), Line(F, G), Line(G, center(d)) we get concurrent(Line(A, G), Line(F, G), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(d)), Line(F, H) we get concurrent(Line(E, F), Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on f, Line(G, H), Line(G, center(d)) we get concurrent(f, Line(G, H), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(D, F), Line(F, G), Line(F, center(d)) we get concurrent(Line(D, F), Line(F, G), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(G, H), Line(G, J), Line(G, center(d)) we get concurrent(Line(G, H), Line(G, J), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(I, center(d)), Line(J, center(d)) we get concurrent(Line(F, center(d)), Line(I, center(d)), Line(J, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(E, F), Line(F, G) we get concurrent(Line(E, F), Line(F, G), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(G, H), Line(A, G), Line(G, center(d)) we get concurrent(Line(A, G), Line(G, H), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(d)), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(d)), Line(F, G) we get concurrent(Line(F, G), Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(J, center(d)), Line(G, J), h we get concurrent(h, Line(G, J), Line(J, center(d)))
By concurrent_sufficient_conditions on h, f, Line(I, center(d)) we get concurrent(f, h, Line(I, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(J, center(d)), Line(I, center(d)) we get concurrent(Line(F, center(d)), Line(I, center(d)), Line(J, center(d)))
By concurrent_sufficient_conditions on Line(G, center(d)), Line(G, J), f we get concurrent(f, Line(G, J), Line(G, center(d)))
By concurrent_sufficient_conditions on h, Line(J, center(d)), Line(F, J) we get concurrent(h, Line(F, J), Line(J, center(d)))
By concurrent_sufficient_conditions on f, h, Line(I, center(d)) we get concurrent(f, h, Line(I, center(d)))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(d)), Line(F, J) we get concurrent(Line(F, I), Line(F, J), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(d)), Line(D, F) we get concurrent(Line(D, F), Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(G, J), Line(F, J), Line(J, center(d)) we get concurrent(Line(F, J), Line(G, J), Line(J, center(d)))
By concurrent_sufficient_conditions on Line(F, G), g, Line(F, center(d)) we get concurrent(g, Line(F, G), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(G, center(d)), Line(G, J), Line(G, H) we get concurrent(Line(G, H), Line(G, J), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(G, J), Line(A, G), Line(G, center(d)) we get concurrent(Line(A, G), Line(G, J), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(J, center(d)), Line(I, center(d)), Line(F, center(d)) we get concurrent(Line(F, center(d)), Line(I, center(d)), Line(J, center(d)))
By concurrent_sufficient_conditions on Line(G, center(d)), Line(G, H), Line(F, G) we get concurrent(Line(F, G), Line(G, H), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(F, H), Line(E, F), Line(F, center(d)) we get concurrent(Line(E, F), Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(d)), Line(F, I) we get concurrent(Line(D, F), Line(F, I), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, J), Line(F, I), Line(F, center(d)) we get concurrent(Line(F, I), Line(F, J), Line(F, center(d)))
By concurrent_sufficient_conditions on h, Line(F, J), Line(J, center(d)) we get concurrent(h, Line(F, J), Line(J, center(d)))
By concurrent_sufficient_conditions on h, Line(I, center(d)), f we get concurrent(f, h, Line(I, center(d)))
By concurrent_sufficient_conditions on g, Line(F, H), Line(F, center(d)) we get concurrent(g, Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(J, center(d)), Line(F, J), h we get concurrent(h, Line(F, J), Line(J, center(d)))
By concurrent_sufficient_conditions on f, Line(G, center(d)), Line(F, G) we get concurrent(f, Line(F, G), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, I), g we get concurrent(g, Line(F, I), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, G), Line(E, F) we get concurrent(Line(E, F), Line(F, G), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(I, center(d)), Line(G, center(d)) we get concurrent(Line(F, center(d)), Line(G, center(d)), Line(I, center(d)))
By concurrent_sufficient_conditions on Line(G, center(d)), f, Line(G, J) we get concurrent(f, Line(G, J), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(A, G), Line(G, center(d)), Line(G, H) we get concurrent(Line(A, G), Line(G, H), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(d)), Line(F, I) we get concurrent(Line(F, H), Line(F, I), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(J, center(d)), h, Line(F, J) we get concurrent(h, Line(F, J), Line(J, center(d)))
By concurrent_sufficient_conditions on Line(F, J), g, Line(F, center(d)) we get concurrent(g, Line(F, J), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, J), Line(E, F), Line(F, center(d)) we get concurrent(Line(E, F), Line(F, J), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(d)), Line(F, H) we get concurrent(Line(D, F), Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(d)), Line(F, H) we get concurrent(Line(F, H), Line(F, I), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, G), Line(G, H), Line(G, center(d)) we get concurrent(Line(F, G), Line(G, H), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, G), Line(F, center(d)) we get concurrent(Line(E, F), Line(F, G), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(A, G), f, Line(G, center(d)) we get concurrent(f, Line(A, G), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(D, F), Line(F, I) we get concurrent(Line(D, F), Line(F, I), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(G, center(d)), Line(F, center(d)), Line(I, center(d)) we get concurrent(Line(F, center(d)), Line(G, center(d)), Line(I, center(d)))
By concurrent_sufficient_conditions on Line(F, J), Line(J, center(d)), Line(G, J) we get concurrent(Line(F, J), Line(G, J), Line(J, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, J), Line(F, H) we get concurrent(Line(F, H), Line(F, J), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, J), Line(D, F), Line(F, center(d)) we get concurrent(Line(D, F), Line(F, J), Line(F, center(d)))
By concurrent_sufficient_conditions on g, Line(F, center(d)), Line(F, J) we get concurrent(g, Line(F, J), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, H), Line(E, F) we get concurrent(Line(E, F), Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(G, J), Line(G, H), Line(G, center(d)) we get concurrent(Line(G, H), Line(G, J), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), g, Line(F, I) we get concurrent(g, Line(F, I), Line(F, center(d)))
By concurrent_sufficient_conditions on h, Line(I, center(d)), Line(F, I) we get concurrent(h, Line(F, I), Line(I, center(d)))
By concurrent_sufficient_conditions on f, Line(G, center(d)), Line(G, H) we get concurrent(f, Line(G, H), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(A, G), Line(G, center(d)), Line(F, G) we get concurrent(Line(A, G), Line(F, G), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(d)), f we get concurrent(f, Line(F, G), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(F, H), Line(D, F), Line(F, center(d)) we get concurrent(Line(D, F), Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(G, center(d)), f, Line(F, G) we get concurrent(f, Line(F, G), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(F, H), Line(F, J), Line(F, center(d)) we get concurrent(Line(F, H), Line(F, J), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, I), g, Line(F, center(d)) we get concurrent(g, Line(F, I), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(G, center(d)), Line(F, G), f we get concurrent(f, Line(F, G), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(F, G), Line(F, H), Line(F, center(d)) we get concurrent(Line(F, G), Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on f, Line(A, G), Line(G, center(d)) we get concurrent(f, Line(A, G), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(F, G), Line(F, I), Line(F, center(d)) we get concurrent(Line(F, G), Line(F, I), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, I), Line(E, F), Line(F, center(d)) we get concurrent(Line(E, F), Line(F, I), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, J), g we get concurrent(g, Line(F, J), Line(F, center(d)))
By concurrent_sufficient_conditions on g, Line(F, center(d)), Line(F, H) we get concurrent(g, Line(F, H), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(d)), g we get concurrent(g, Line(F, J), Line(F, center(d)))
By concurrent_sufficient_conditions on Line(I, center(d)), f, h we get concurrent(f, h, Line(I, center(d)))
By concurrent_sufficient_conditions on Line(G, J), Line(G, center(d)), f we get concurrent(f, Line(G, J), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(d)), Line(F, G) we get concurrent(Line(F, G), Line(F, J), Line(F, center(d)))
By angles_on_chord_v0 on F, C, D, E, Circle(C, D, E) we get angle(F, D, C) == angle(F, E, C) mod 360
By angles_on_chord_v1 on D, E, C, F, Circle(C, D, E) we get angle(D, C, E) == angle(D, F, E) mod 360
By angles_on_chord_v0 on C, E, F, D, Circle(C, D, E) we get angle(C, D, E) == angle(C, F, E) mod 360
By angles_on_chord_v0 on E, D, C, F, Circle(C, D, E) we get angle(E, C, D) == angle(E, F, D) mod 360
By angles_on_chord_v1 on E, C, F, D, Circle(C, D, E) we get angle(E, D, C) == angle(E, F, C) mod 360
By angles_on_chord_v3 on E, F, D, C, Circle(C, D, E) we get angle(E, D, F) == angle(E, C, F) + 180 mod 360
By angles_on_chord_v3 on F, E, C, D, Circle(C, D, E) we get angle(F, C, E) == angle(F, D, E) + 180 mod 360
By angles_on_chord_v1 on F, D, E, C, Circle(C, D, E) we get angle(F, C, D) == angle(F, E, D) mod 360
By angles_on_chord_v1 on C, F, D, E, Circle(C, D, E) we get angle(C, D, F) == angle(C, E, F) mod 360
By chords_on_equal_angles_v0 on C, D, F, E, D, C, Circle(C, D, E) we get distance(C, E) == distance(C, F)
By angles_on_chord_v0 on D, F, E, C, Circle(C, D, E) we get angle(D, C, F) == angle(D, E, F) mod 360
By angles_on_chord_v2 on F, E, D, C, Circle(C, D, E) we get angle(F, D, E) == angle(F, C, E) + 180 mod 360
By angles_on_chord_v2 on E, F, C, D, Circle(C, D, E) we get angle(E, C, F) == angle(E, D, F) + 180 mod 360
By chords_on_equal_angles_v0 on D, C, E, F, C, D, Circle(C, D, E) we get distance(D, E) == distance(D, F)
By radical_axis_of_intersecting_circles_v0 on F, E, c, Circle(C, D, E) we get Line(E, F) == radical_axis(c, Circle(C, D, E))
By divide_by_2_mod_180_v3 on C, D, F, B, D, J we get angle(C, D, F) == angle(B, D, J) + 180 mod 360
By divide_by_2_mod_180_v3 on J, D, B, F, D, C we get angle(J, D, B) == angle(F, D, C) + 180 mod 360
By divide_by_2_mod_180_v2 on B, D, J, E, D, C we get angle(B, D, J) == angle(E, D, C) + 180 mod 360
By divide_by_2_mod_180_v0 on C, D, E, I, D, B we get angle(C, D, E) == angle(I, D, B) mod 360
By divide_by_2_mod_180_v2 on B, D, J, C, D, F we get angle(B, D, J) == angle(C, D, F) + 180 mod 360
By divide_by_2_mod_180_v2 on C, D, E, J, D, B we get angle(C, D, E) == angle(J, D, B) + 180 mod 360
By divide_by_2_mod_180_v1 on E, D, C, B, D, I we get angle(B, D, I) == angle(E, D, C) mod 360
By divide_by_2_mod_180_v3 on C, D, F, B, D, A we get angle(C, D, F) == angle(B, D, A) + 180 mod 360
By divide_by_2_mod_180_v2 on B, D, A, E, D, C we get angle(B, D, A) == angle(E, D, C) + 180 mod 360
By divide_by_2_mod_180_v1 on C, D, F, B, D, I we get angle(B, D, I) == angle(C, D, F) mod 360
By divide_by_2_mod_180_v3 on J, D, B, C, D, E we get angle(J, D, B) == angle(C, D, E) + 180 mod 360
By divide_by_2_mod_180_v0 on F, D, C, I, D, B we get angle(F, D, C) == angle(I, D, B) mod 360
By divide_by_2_mod_180_v3 on A, D, B, F, D, C we get angle(A, D, B) == angle(F, D, C) + 180 mod 360
By divide_by_2_mod_180_v3 on E, D, C, B, D, J we get angle(E, D, C) == angle(B, D, J) + 180 mod 360
By divide_by_2_mod_180_v2 on F, D, C, A, D, B we get angle(F, D, C) == angle(A, D, B) + 180 mod 360
By divide_by_2_mod_180_v2 on B, D, A, C, D, F we get angle(B, D, A) == angle(C, D, F) + 180 mod 360
By divide_by_2_mod_180_v2 on C, D, E, A, D, B we get angle(C, D, E) == angle(A, D, B) + 180 mod 360
By divide_by_2_mod_180_v2 on F, D, C, J, D, B we get angle(F, D, C) == angle(J, D, B) + 180 mod 360
By divide_by_2_mod_180_v3 on A, D, B, C, D, E we get angle(A, D, B) == angle(C, D, E) + 180 mod 360
By divide_by_2_mod_180_v3 on E, D, C, B, D, A we get angle(E, D, C) == angle(B, D, A) + 180 mod 360
By power_of_a_point_on_circle on F, Circle(C, D, E) we get 0 == power_of_a_point(F, Circle(C, D, E))
By power_of_a_point_on_circle on C, Circle(C, D, E) we get 0 == power_of_a_point(C, Circle(C, D, E))
By power_of_a_point_on_circle on E, Circle(C, D, E) we get 0 == power_of_a_point(E, Circle(C, D, E))
By internal_angle_bisector_definition_v0_r on F, C, E, D we get Line(C, D) == internal_angle_bisector(E, D, F)
By power_of_a_point_on_circle on D, Circle(C, D, E) we get 0 == power_of_a_point(D, Circle(C, D, E))
By power_of_a_point_definition on G, E, C, Circle(C, D, E) we get log(distance(E, G)) + log(distance(C, G)) == log(power_of_a_point(G, Circle(C, D, E)))
By power_of_a_point_definition on I, E, C, Circle(C, D, E) we get log(distance(E, I)) + log(distance(C, I)) == log(power_of_a_point(I, Circle(C, D, E)))
By anti_similar_triangle_basic_properties on G, F, center(d), F, G, center(d) we get angle(G, F, center(d)) == 0 - angle(F, G, center(d)) mod 360, angle(F, center(d), G) == 0 - angle(G, center(d), F) mod 360, angle(center(d), G, F) == 0 - angle(center(d), F, G) mod 360, log(distance(F, G)) + log(distance(F, center(d))) == log(distance(F, G)) + log(distance(G, center(d))), log(distance(F, center(d))) + log(distance(F, center(d))) == log(distance(G, center(d))) + log(distance(G, center(d))), log(distance(F, center(d))) + log(distance(F, G)) == log(distance(G, center(d))) + log(distance(F, G))
By anti_similar_triangle_basic_properties on I, G, center(d), G, I, center(d) we get angle(I, G, center(d)) == 0 - angle(G, I, center(d)) mod 360, angle(G, center(d), I) == 0 - angle(I, center(d), G) mod 360, angle(center(d), I, G) == 0 - angle(center(d), G, I) mod 360, log(distance(G, I)) + log(distance(G, center(d))) == log(distance(G, I)) + log(distance(I, center(d))), log(distance(G, center(d))) + log(distance(G, center(d))) == log(distance(I, center(d))) + log(distance(I, center(d))), log(distance(G, center(d))) + log(distance(G, I)) == log(distance(I, center(d))) + log(distance(G, I))
By power_of_a_point_definition on A, C, F, Circle(C, D, E) we get log(distance(A, C)) + log(distance(A, F)) == log(power_of_a_point(A, Circle(C, D, E)))
By anti_similar_triangle_basic_properties on I, center(d), J, J, center(d), I we get angle(I, center(d), J) == 0 - angle(J, center(d), I) mod 360, angle(center(d), J, I) == 0 - angle(center(d), I, J) mod 360, angle(J, I, center(d)) == 0 - angle(I, J, center(d)) mod 360, log(distance(I, center(d))) + log(distance(I, center(d))) == log(distance(J, center(d))) + log(distance(J, center(d))), log(distance(I, center(d))) + log(distance(I, J)) == log(distance(J, center(d))) + log(distance(I, J)), log(distance(I, J)) + log(distance(I, center(d))) == log(distance(I, J)) + log(distance(J, center(d)))
By anti_similar_triangle_basic_properties on center(d), J, F, center(d), F, J we get angle(center(d), J, F) == 0 - angle(center(d), F, J) mod 360, angle(J, F, center(d)) == 0 - angle(F, J, center(d)) mod 360, angle(F, center(d), J) == 0 - angle(J, center(d), F) mod 360, log(distance(F, center(d))) + log(distance(F, J)) == log(distance(J, center(d))) + log(distance(F, J)), log(distance(F, J)) + log(distance(F, center(d))) == log(distance(F, J)) + log(distance(J, center(d))), log(distance(F, center(d))) + log(distance(F, center(d))) == log(distance(J, center(d))) + log(distance(J, center(d)))
By anti_similar_triangle_basic_properties on F, C, D, E, C, D we get angle(F, C, D) == 0 - angle(E, C, D) mod 360, angle(C, D, F) == 0 - angle(C, D, E) mod 360, angle(D, F, C) == 0 - angle(D, E, C) mod 360, log(distance(C, E)) + log(distance(C, D)) == log(distance(C, F)) + log(distance(C, D)), log(distance(C, D)) + log(distance(D, E)) == log(distance(C, D)) + log(distance(D, F)), log(distance(D, E)) + log(distance(C, F)) == log(distance(D, F)) + log(distance(C, E))
By anti_similar_triangle_basic_properties on F, center(d), I, I, center(d), F we get angle(F, center(d), I) == 0 - angle(I, center(d), F) mod 360, angle(center(d), I, F) == 0 - angle(center(d), F, I) mod 360, angle(I, F, center(d)) == 0 - angle(F, I, center(d)) mod 360, log(distance(F, center(d))) + log(distance(F, center(d))) == log(distance(I, center(d))) + log(distance(I, center(d))), log(distance(F, center(d))) + log(distance(F, I)) == log(distance(I, center(d))) + log(distance(F, I)), log(distance(F, I)) + log(distance(F, center(d))) == log(distance(F, I)) + log(distance(I, center(d)))
By anti_similar_triangle_basic_properties on D, C, F, D, C, E we get angle(D, C, F) == 0 - angle(D, C, E) mod 360, angle(C, F, D) == 0 - angle(C, E, D) mod 360, angle(F, D, C) == 0 - angle(E, D, C) mod 360, log(distance(C, D)) + log(distance(C, E)) == log(distance(C, D)) + log(distance(C, F)), log(distance(C, E)) + log(distance(D, F)) == log(distance(C, F)) + log(distance(D, E)), log(distance(D, E)) + log(distance(C, D)) == log(distance(D, F)) + log(distance(C, D))
By anti_similar_triangle_basic_properties on J, center(d), G, G, center(d), J we get angle(J, center(d), G) == 0 - angle(G, center(d), J) mod 360, angle(center(d), G, J) == 0 - angle(center(d), J, G) mod 360, angle(G, J, center(d)) == 0 - angle(J, G, center(d)) mod 360, log(distance(G, center(d))) + log(distance(G, center(d))) == log(distance(J, center(d))) + log(distance(J, center(d))), log(distance(G, center(d))) + log(distance(G, J)) == log(distance(J, center(d))) + log(distance(G, J)), log(distance(G, J)) + log(distance(G, center(d))) == log(distance(G, J)) + log(distance(J, center(d)))
By power_of_a_point_definition on B, E, C, Circle(C, D, E) we get log(distance(B, E)) + log(distance(B, C)) == log(power_of_a_point(B, Circle(C, D, E)))
By concyclic_sufficient_conditions_v1 on A, H, E, C we get concyclic(A, C, E, H)
By concyclic_sufficient_conditions_v1 on G, C, F, H we get concyclic(C, F, G, H)
By concyclic_sufficient_conditions_v0 on B, G, A, D we get concyclic(A, B, D, G)
By chords_on_equal_angles_v0 on A, G, F, E, A, G, c we get distance(A, F) == distance(E, G)
By perpendicular_direction_conditions_v0 on E, F, D, C we get perpendicular(Line(C, D), Line(E, F))
By perpendicular_direction_conditions_v0 on A, G, C, D we get perpendicular(Line(A, G), Line(C, D))
By circle_radius_v0_r on D, Circle(C, D, E) we get radius(Circle(C, D, E)) == distance(D, center(Circle(C, D, E)))
By circle_radius_v0_r on F, Circle(C, D, E) we get radius(Circle(C, D, E)) == distance(F, center(Circle(C, D, E)))
By circle_radius_v0_r on C, Circle(C, D, E) we get radius(Circle(C, D, E)) == distance(C, center(Circle(C, D, E)))
By circle_radius_v0_r on E, Circle(C, D, E) we get radius(Circle(C, D, E)) == distance(E, center(Circle(C, D, E)))
By angle_to_center on D, C, F, Circle(C, D, E) we get 2 * angle(D, C, F) == angle(D, center(Circle(C, D, E)), F) mod 360
By angle_to_center on F, C, E, Circle(C, D, E) we get 2 * angle(F, C, E) == angle(F, center(Circle(C, D, E)), E) mod 360
By angle_to_center on D, E, C, Circle(C, D, E) we get 2 * angle(D, E, C) == angle(D, center(Circle(C, D, E)), C) mod 360
By angle_to_center on C, F, D, Circle(C, D, E) we get 2 * angle(C, F, D) == angle(C, center(Circle(C, D, E)), D) mod 360
By angle_to_center on E, F, C, Circle(C, D, E) we get 2 * angle(E, F, C) == angle(E, center(Circle(C, D, E)), C) mod 360
By angle_to_center on F, D, C, Circle(C, D, E) we get 2 * angle(F, D, C) == angle(F, center(Circle(C, D, E)), C) mod 360
By angle_to_center on E, C, F, Circle(C, D, E) we get 2 * angle(E, C, F) == angle(E, center(Circle(C, D, E)), F) mod 360
By angle_to_center on F, E, C, Circle(C, D, E) we get 2 * angle(F, E, C) == angle(F, center(Circle(C, D, E)), C) mod 360
By angle_to_center on F, D, E, Circle(C, D, E) we get 2 * angle(F, D, E) == angle(F, center(Circle(C, D, E)), E) mod 360
By angle_to_center on C, F, E, Circle(C, D, E) we get 2 * angle(C, F, E) == angle(C, center(Circle(C, D, E)), E) mod 360
By angle_to_center on D, F, C, Circle(C, D, E) we get 2 * angle(D, F, C) == angle(D, center(Circle(C, D, E)), C) mod 360
By angle_to_center on D, F, E, Circle(C, D, E) we get 2 * angle(D, F, E) == angle(D, center(Circle(C, D, E)), E) mod 360
By angle_to_center on E, D, C, Circle(C, D, E) we get 2 * angle(E, D, C) == angle(E, center(Circle(C, D, E)), C) mod 360
By angle_to_center on D, C, E, Circle(C, D, E) we get 2 * angle(D, C, E) == angle(D, center(Circle(C, D, E)), E) mod 360
By angle_to_center on E, D, F, Circle(C, D, E) we get 2 * angle(E, D, F) == angle(E, center(Circle(C, D, E)), F) mod 360
By angle_to_center on E, C, D, Circle(C, D, E) we get 2 * angle(E, C, D) == angle(E, center(Circle(C, D, E)), D) mod 360
By angle_to_center on D, E, F, Circle(C, D, E) we get 2 * angle(D, E, F) == angle(D, center(Circle(C, D, E)), F) mod 360
By angle_to_center on C, D, F, Circle(C, D, E) we get 2 * angle(C, D, F) == angle(C, center(Circle(C, D, E)), F) mod 360
By angle_to_center on F, C, D, Circle(C, D, E) we get 2 * angle(F, C, D) == angle(F, center(Circle(C, D, E)), D) mod 360
By angle_to_center on E, F, D, Circle(C, D, E) we get 2 * angle(E, F, D) == angle(E, center(Circle(C, D, E)), D) mod 360
By angle_to_center on C, D, E, Circle(C, D, E) we get 2 * angle(C, D, E) == angle(C, center(Circle(C, D, E)), E) mod 360
By angle_to_center on F, E, D, Circle(C, D, E) we get 2 * angle(F, E, D) == angle(F, center(Circle(C, D, E)), D) mod 360
By angle_to_center on C, E, D, Circle(C, D, E) we get 2 * angle(C, E, D) == angle(C, center(Circle(C, D, E)), D) mod 360
By angle_to_center on C, E, F, Circle(C, D, E) we get 2 * angle(C, E, F) == angle(C, center(Circle(C, D, E)), F) mod 360
By divide_by_2_mod_180_v1 on D, C, I, A, E, H we get angle(A, E, H) == angle(D, C, I) mod 360
By asa_anti_congruence on H, F, A, H, E, G we get anti_congruent_triangles(A, F, H, G, E, H)
By divide_by_2_mod_180_v0 on H, G, F, G, C, D we get angle(G, C, D) == angle(H, G, F) mod 360
By divide_by_2_mod_180_v1 on A, C, D, H, A, E we get angle(A, C, D) == angle(H, A, E) mod 360
By divide_by_2_mod_180_v0 on H, G, F, D, C, F we get angle(D, C, F) == angle(H, G, F) mod 360
By parallel_line_angles_v1 on G, A, F, E we get parallel(Line(A, G), Line(E, F))
By divide_by_2_mod_180_v1 on D, C, B, F, G, H we get angle(D, C, B) == angle(F, G, H) mod 360
By divide_by_2_mod_180_v0 on H, G, F, I, C, D we get angle(H, G, F) == angle(I, C, D) mod 360
By divide_by_2_mod_180_v1 on D, C, B, A, E, H we get angle(A, E, H) == angle(D, C, B) mod 360
By divide_by_2_mod_180_v0 on E, A, H, I, C, D we get angle(E, A, H) == angle(I, C, D) mod 360
By sas_similarity on E, D, F, G, H, F we get similar_triangles(D, E, F, H, G, F)
By divide_by_2_mod_180_v1 on F, G, H, A, C, D we get angle(A, C, D) == angle(F, G, H) mod 360
By divide_by_2_mod_180_v1 on A, E, H, F, E, D we get angle(A, E, H) == angle(F, E, D) mod 360
By divide_by_2_mod_180_v0 on G, F, H, G, C, D we get angle(G, C, D) == angle(G, F, H) mod 360
By divide_by_2_mod_180_v1 on F, G, H, D, C, G we get angle(D, C, G) == angle(F, G, H) mod 360
By divide_by_2_mod_180_v1 on D, C, E, H, A, E we get angle(D, C, E) == angle(H, A, E) mod 360
By divide_by_2_mod_180_v0 on E, A, H, E, C, D we get angle(E, A, H) == angle(E, C, D) mod 360
By anti_similar_triangle_basic_properties on H, A, F, H, G, E we get angle(H, A, F) == 0 - angle(H, G, E) mod 360, angle(A, F, H) == 0 - angle(G, E, H) mod 360, angle(F, H, A) == 0 - angle(E, H, G) mod 360, log(distance(A, H)) + log(distance(E, G)) == log(distance(G, H)) + log(distance(A, F)), log(distance(A, F)) + log(distance(E, H)) == log(distance(E, G)) + log(distance(F, H)), log(distance(E, H)) + log(distance(A, H)) == log(distance(F, H)) + log(distance(G, H))
By divide_by_2_mod_180_v0 on E, A, H, D, C, F we get angle(D, C, F) == angle(E, A, H) mod 360
By divide_by_2_mod_180_v1 on F, C, D, H, F, G we get angle(F, C, D) == angle(H, F, G) mod 360
By divide_by_2_mod_180_v1 on F, G, H, F, C, D we get angle(F, C, D) == angle(F, G, H) mod 360
By sas_anti_similarity on G, H, F, F, D, E we get anti_similar_triangles(D, E, F, H, F, G)
By divide_by_2_mod_180_v0 on E, C, D, H, G, F we get angle(E, C, D) == angle(H, G, F) mod 360
By divide_by_2_mod_180_v1 on H, A, E, D, C, I we get angle(D, C, I) == angle(H, A, E) mod 360
By divide_by_2_mod_180_v1 on H, A, E, D, F, E we get angle(D, F, E) == angle(H, A, E) mod 360
By divide_by_2_mod_180_v0 on H, E, A, I, C, D we get angle(H, E, A) == angle(I, C, D) mod 360
By divide_by_2_mod_180_v1 on H, A, E, F, C, D we get angle(F, C, D) == angle(H, A, E) mod 360
By divide_by_2_mod_180_v1 on D, C, I, H, F, G we get angle(D, C, I) == angle(H, F, G) mod 360
By anti_similar_triangle_basic_properties on E, A, F, F, G, E we get angle(E, A, F) == 0 - angle(F, G, E) mod 360, angle(A, F, E) == 0 - angle(G, E, F) mod 360, angle(F, E, A) == 0 - angle(E, F, G) mod 360, log(distance(A, E)) + log(distance(E, G)) == log(distance(F, G)) + log(distance(A, F)), log(distance(A, F)) + log(distance(E, F)) == log(distance(E, G)) + log(distance(E, F)), log(distance(E, F)) + log(distance(A, E)) == log(distance(E, F)) + log(distance(F, G))
By divide_by_2_mod_180_v1 on A, C, D, H, F, G we get angle(A, C, D) == angle(H, F, G) mod 360
By divide_by_2_mod_180_v1 on H, A, E, D, C, B we get angle(D, C, B) == angle(H, A, E) mod 360
By sas_anti_similarity on I, center(d), F, F, H, E we get anti_similar_triangles(E, F, H, F, I, center(d))
By divide_by_2_mod_180_v0 on E, F, D, H, E, A we get angle(E, F, D) == angle(H, E, A) mod 360
By divide_by_2_mod_180_v0 on D, C, A, E, A, H we get angle(D, C, A) == angle(E, A, H) mod 360
By similar_triangle_basic_properties on H, A, F, H, E, G we get angle(H, A, F) == angle(H, E, G) mod 360, angle(A, F, H) == angle(E, G, H) mod 360, angle(F, H, A) == angle(G, H, E) mod 360, log(distance(A, H)) + log(distance(E, G)) == log(distance(E, H)) + log(distance(A, F)), log(distance(A, F)) + log(distance(G, H)) == log(distance(E, G)) + log(distance(F, H)), log(distance(F, H)) + log(distance(E, H)) == log(distance(G, H)) + log(distance(A, H))
By divide_by_2_mod_180_v1 on A, E, H, F, C, D we get angle(A, E, H) == angle(F, C, D) mod 360
By divide_by_2_mod_180_v1 on D, C, I, F, G, H we get angle(D, C, I) == angle(F, G, H) mod 360
By divide_by_2_mod_180_v0 on E, A, H, B, C, D we get angle(B, C, D) == angle(E, A, H) mod 360
By divide_by_2_mod_180_v0 on H, E, A, D, E, F we get angle(D, E, F) == angle(H, E, A) mod 360
By sas_anti_similarity on E, D, F, F, H, G we get anti_similar_triangles(D, E, F, H, F, G)
By divide_by_2_mod_180_v0 on G, C, D, H, E, A we get angle(G, C, D) == angle(H, E, A) mod 360
By divide_by_2_mod_180_v1 on A, E, H, A, C, D we get angle(A, C, D) == angle(A, E, H) mod 360
By anti_congruence_from_anti_similar_triangles on E, F, G, F, E, A we get anti_congruent_triangles(A, E, F, G, F, E)
By divide_by_2_mod_180_v1 on D, F, E, F, G, H we get angle(D, F, E) == angle(F, G, H) mod 360
By divide_by_2_mod_180_v0 on I, C, D, G, F, H we get angle(G, F, H) == angle(I, C, D) mod 360
By divide_by_2_mod_180_v1 on F, E, D, F, G, H we get angle(F, E, D) == angle(F, G, H) mod 360
By divide_by_2_mod_180_v1 on D, C, E, H, F, G we get angle(D, C, E) == angle(H, F, G) mod 360
By divide_by_2_mod_180_v1 on H, F, G, F, E, D we get angle(F, E, D) == angle(H, F, G) mod 360
By asa_anti_congruence on G, A, E, A, G, F we get anti_congruent_triangles(A, E, G, G, F, A)
By divide_by_2_mod_180_v0 on G, F, H, D, E, F we get angle(D, E, F) == angle(G, F, H) mod 360
By anti_similar_triangle_basic_properties on A, G, F, G, A, E we get angle(A, G, F) == 0 - angle(G, A, E) mod 360, angle(G, F, A) == 0 - angle(A, E, G) mod 360, angle(F, A, G) == 0 - angle(E, G, A) mod 360, log(distance(A, G)) + log(distance(A, E)) == log(distance(A, G)) + log(distance(F, G)), log(distance(A, E)) + log(distance(A, F)) == log(distance(F, G)) + log(distance(E, G)), log(distance(A, F)) + log(distance(A, G)) == log(distance(E, G)) + log(distance(A, G))
By divide_by_2_mod_180_v0 on E, F, D, E, A, H we get angle(E, A, H) == angle(E, F, D) mod 360
By divide_by_2_mod_180_v1 on D, C, B, H, F, G we get angle(D, C, B) == angle(H, F, G) mod 360
By sas_anti_congruence on A, H, F, G, H, E we get anti_congruent_triangles(A, F, H, G, E, H)
By sas_similarity on G, H, F, E, D, F we get similar_triangles(D, E, F, H, G, F)
By divide_by_2_mod_180_v1 on A, E, H, D, C, G we get angle(A, E, H) == angle(D, C, G) mod 360
By divide_by_2_mod_180_v1 on H, F, G, D, F, E we get angle(D, F, E) == angle(H, F, G) mod 360
By anti_similar_triangle_basic_properties on G, H, E, A, H, F we get angle(G, H, E) == 0 - angle(A, H, F) mod 360, angle(H, E, G) == 0 - angle(H, F, A) mod 360, angle(E, G, H) == 0 - angle(F, A, H) mod 360, log(distance(A, H)) + log(distance(E, H)) == log(distance(G, H)) + log(distance(F, H)), log(distance(E, H)) + log(distance(A, F)) == log(distance(F, H)) + log(distance(E, G)), log(distance(A, F)) + log(distance(G, H)) == log(distance(E, G)) + log(distance(A, H))
By congruence_from_similar_triangles on H, E, G, H, A, F we get congruent_triangles(A, F, H, E, G, H)
By asa_congruence on H, E, G, H, A, F we get congruent_triangles(A, F, H, E, G, H)
By anti_congruence_from_anti_similar_triangles on A, G, E, G, A, F we get anti_congruent_triangles(A, E, G, G, F, A)
By anti_congruence_from_anti_similar_triangles on F, E, A, E, F, G we get anti_congruent_triangles(A, E, F, G, F, E)
By sas_similarity on A, H, E, F, D, E we get similar_triangles(A, E, H, F, E, D)
By divide_by_2_mod_180_v1 on A, E, H, D, C, E we get angle(A, E, H) == angle(D, C, E) mod 360
By anti_similar_triangle_basic_properties on G, F, E, A, E, F we get angle(G, F, E) == 0 - angle(A, E, F) mod 360, angle(F, E, G) == 0 - angle(E, F, A) mod 360, angle(E, G, F) == 0 - angle(F, A, E) mod 360, log(distance(A, E)) + log(distance(E, F)) == log(distance(F, G)) + log(distance(E, F)), log(distance(E, F)) + log(distance(A, F)) == log(distance(E, F)) + log(distance(E, G)), log(distance(A, F)) + log(distance(F, G)) == log(distance(E, G)) + log(distance(A, E))
By divide_by_2_mod_180_v0 on H, G, F, B, C, D we get angle(B, C, D) == angle(H, G, F) mod 360
By divide_by_2_mod_180_v1 on D, C, G, H, F, G we get angle(D, C, G) == angle(H, F, G) mod 360
By divide_by_2_mod_180_v0 on E, C, D, G, F, H we get angle(E, C, D) == angle(G, F, H) mod 360
By divide_by_2_mod_180_v0 on G, F, H, D, C, A we get angle(D, C, A) == angle(G, F, H) mod 360
By anti_congruence_from_anti_similar_triangles on H, F, A, H, E, G we get anti_congruent_triangles(A, F, H, G, E, H)
By divide_by_2_mod_180_v1 on D, C, E, F, G, H we get angle(D, C, E) == angle(F, G, H) mod 360
By asa_anti_congruence on G, A, F, A, G, E we get anti_congruent_triangles(A, E, G, G, F, A)
By sas_similarity on I, center(d), F, E, H, F we get similar_triangles(E, F, H, I, F, center(d))
By divide_by_2_mod_180_v0 on D, C, F, H, E, A we get angle(D, C, F) == angle(H, E, A) mod 360
By sas_anti_similarity on F, H, E, I, center(d), F we get anti_similar_triangles(E, F, H, F, I, center(d))
By divide_by_2_mod_180_v0 on H, G, F, E, F, D we get angle(E, F, D) == angle(H, G, F) mod 360
By divide_by_2_mod_180_v0 on G, F, H, B, C, D we get angle(B, C, D) == angle(G, F, H) mod 360
By divide_by_2_mod_180_v0 on E, A, H, D, E, F we get angle(D, E, F) == angle(E, A, H) mod 360
By divide_by_2_mod_180_v1 on D, F, E, A, E, H we get angle(A, E, H) == angle(D, F, E) mod 360
By asa_congruence on E, H, G, A, H, F we get congruent_triangles(A, F, H, E, G, H)
By divide_by_2_mod_180_v0 on H, E, A, D, C, A we get angle(D, C, A) == angle(H, E, A) mod 360
By divide_by_2_mod_180_v0 on H, E, A, E, C, D we get angle(E, C, D) == angle(H, E, A) mod 360
By divide_by_2_mod_180_v0 on G, F, H, D, C, F we get angle(D, C, F) == angle(G, F, H) mod 360
By similar_triangle_basic_properties on H, G, E, H, F, A we get angle(H, F, A) == angle(H, G, E) mod 360, angle(F, A, H) == angle(G, E, H) mod 360, angle(A, H, F) == angle(E, H, G) mod 360, log(distance(F, H)) + log(distance(E, G)) == log(distance(G, H)) + log(distance(A, F)), log(distance(A, F)) + log(distance(E, H)) == log(distance(E, G)) + log(distance(A, H)), log(distance(A, H)) + log(distance(G, H)) == log(distance(E, H)) + log(distance(F, H))
By anti_congruence_from_anti_similar_triangles on H, E, G, H, F, A we get anti_congruent_triangles(A, F, H, G, E, H)
By sas_congruence on E, H, G, A, H, F we get congruent_triangles(A, F, H, E, G, H)
By divide_by_2_mod_180_v0 on B, C, D, H, E, A we get angle(B, C, D) == angle(H, E, A) mod 360
By sas_similarity on F, center(d), I, F, H, E we get similar_triangles(E, F, H, I, F, center(d))
By divide_by_2_mod_180_v0 on H, G, F, D, C, A we get angle(D, C, A) == angle(H, G, F) mod 360
By asa_congruence on F, H, A, G, H, E we get congruent_triangles(A, F, H, E, G, H)
By asa_anti_congruence on E, F, G, F, E, A we get anti_congruent_triangles(A, E, F, G, F, E)
By asa_anti_congruence on A, H, F, G, H, E we get anti_congruent_triangles(A, F, H, G, E, H)
By divide_by_2_mod_180_v1 on F, E, D, H, A, E we get angle(F, E, D) == angle(H, A, E) mod 360
By sas_anti_congruence on F, H, A, E, H, G we get anti_congruent_triangles(A, F, H, G, E, H)
By sas_congruence on F, H, A, G, H, E we get congruent_triangles(A, F, H, E, G, H)
By sas_similarity on F, H, E, F, center(d), I we get similar_triangles(E, F, H, I, F, center(d))
By asa_congruence on G, H, E, F, H, A we get congruent_triangles(A, F, H, E, G, H)
By anti_congruence_from_anti_similar_triangles on H, G, E, H, A, F we get anti_congruent_triangles(A, F, H, G, E, H)
By divide_by_2_mod_180_v1 on H, A, E, D, C, G we get angle(D, C, G) == angle(H, A, E) mod 360
By asa_anti_congruence on A, G, F, G, A, E we get anti_congruent_triangles(A, E, G, G, F, A)
By sas_similarity on F, D, E, F, H, G we get similar_triangles(D, E, F, H, G, F)
By sas_anti_similarity on F, D, E, G, H, F we get anti_similar_triangles(D, E, F, H, F, G)
By asa_congruence on A, H, F, E, H, G we get congruent_triangles(A, F, H, E, G, H)
By anti_congruence_from_anti_similar_triangles on A, G, F, G, A, E we get anti_congruent_triangles(A, E, G, G, F, A)
By asa_congruence on H, G, E, H, F, A we get congruent_triangles(A, F, H, E, G, H)
By asa_anti_congruence on H, E, G, H, F, A we get anti_congruent_triangles(A, F, H, G, E, H)
By sas_similarity on E, H, A, E, D, F we get similar_triangles(A, E, H, F, E, D)
By asa_anti_congruence on H, A, F, H, G, E we get anti_congruent_triangles(A, F, H, G, E, H)
By asa_anti_congruence on G, H, E, A, H, F we get anti_congruent_triangles(A, F, H, G, E, H)
By sas_anti_similarity on F, D, E, E, H, A we get anti_similar_triangles(A, E, H, E, F, D)
By divide_by_2_mod_180_v0 on G, C, D, E, A, H we get angle(E, A, H) == angle(G, C, D) mod 360
By congruence_from_similar_triangles on H, A, F, H, E, G we get congruent_triangles(A, F, H, E, G, H)
By sas_similarity on E, H, F, I, center(d), F we get similar_triangles(E, F, H, I, F, center(d))
By sas_congruence on A, H, F, E, H, G we get congruent_triangles(A, F, H, E, G, H)
By congruence_from_similar_triangles on A, H, F, E, H, G we get congruent_triangles(A, F, H, E, G, H)
By asa_congruence on H, F, A, H, G, E we get congruent_triangles(A, F, H, E, G, H)
By congruence_from_similar_triangles on G, H, E, F, H, A we get congruent_triangles(A, F, H, E, G, H)
By asa_anti_congruence on H, G, E, H, A, F we get anti_congruent_triangles(A, F, H, G, E, H)
By sas_anti_similarity on A, H, E, E, D, F we get anti_similar_triangles(A, E, H, E, F, D)
By sas_similarity on E, D, F, E, H, A we get similar_triangles(A, E, H, F, E, D)
By anti_congruence_from_anti_similar_triangles on G, H, E, A, H, F we get anti_congruent_triangles(A, F, H, G, E, H)
By congruence_from_similar_triangles on H, F, A, H, G, E we get congruent_triangles(A, F, H, E, G, H)
By asa_anti_congruence on E, F, A, F, E, G we get anti_congruent_triangles(A, E, F, G, F, E)
By asa_anti_congruence on F, H, A, E, H, G we get anti_congruent_triangles(A, F, H, G, E, H)
By sas_anti_congruence on G, H, E, A, H, F we get anti_congruent_triangles(A, F, H, G, E, H)
By asa_anti_congruence on E, H, G, F, H, A we get anti_congruent_triangles(A, F, H, G, E, H)
By congruence_from_similar_triangles on F, H, A, G, H, E we get congruent_triangles(A, F, H, E, G, H)
By anti_congruence_from_anti_similar_triangles on F, H, A, E, H, G we get anti_congruent_triangles(A, F, H, G, E, H)
By anti_congruence_from_anti_similar_triangles on F, E, G, E, F, A we get anti_congruent_triangles(A, E, F, G, F, E)
By anti_congruence_from_anti_similar_triangles on G, A, E, A, G, F we get anti_congruent_triangles(A, E, G, G, F, A)
By sas_anti_similarity on F, H, G, E, D, F we get anti_similar_triangles(D, E, F, H, F, G)
By congruence_from_similar_triangles on H, G, E, H, F, A we get congruent_triangles(A, F, H, E, G, H)
By sas_similarity on F, H, G, F, D, E we get similar_triangles(D, E, F, H, G, F)
By sas_similarity on F, D, E, A, H, E we get similar_triangles(A, E, H, F, E, D)
By sas_anti_similarity on E, H, F, F, center(d), I we get anti_similar_triangles(E, F, H, F, I, center(d))
By sas_congruence on G, H, E, F, H, A we get congruent_triangles(A, F, H, E, G, H)
By sas_anti_similarity on E, D, F, A, H, E we get anti_similar_triangles(A, E, H, E, F, D)
By sas_anti_congruence on E, H, G, F, H, A we get anti_congruent_triangles(A, F, H, G, E, H)
By congruence_from_similar_triangles on E, H, G, A, H, F we get congruent_triangles(A, F, H, E, G, H)
By asa_anti_congruence on A, G, E, G, A, F we get anti_congruent_triangles(A, E, G, G, F, A)
By asa_anti_congruence on F, E, G, E, F, A we get anti_congruent_triangles(A, E, F, G, F, E)
By anti_congruence_from_anti_similar_triangles on G, A, F, A, G, E we get anti_congruent_triangles(A, E, G, G, F, A)
By anti_congruence_from_anti_similar_triangles on E, F, A, F, E, G we get anti_congruent_triangles(A, E, F, G, F, E)
By asa_anti_congruence on F, E, A, E, F, G we get anti_congruent_triangles(A, E, F, G, F, E)
By asa_congruence on H, A, F, H, E, G we get congruent_triangles(A, F, H, E, G, H)
By anti_congruence_from_anti_similar_triangles on A, H, F, G, H, E we get anti_congruent_triangles(A, F, H, G, E, H)
By anti_congruence_from_anti_similar_triangles on E, H, G, F, H, A we get anti_congruent_triangles(A, F, H, G, E, H)
By sas_anti_similarity on F, center(d), I, E, H, F we get anti_similar_triangles(E, F, H, F, I, center(d))
By anti_congruence_from_anti_similar_triangles on H, A, F, H, G, E we get anti_congruent_triangles(A, F, H, G, E, H)
By sas_anti_similarity on E, H, A, F, D, E we get anti_similar_triangles(A, E, H, E, F, D)
By anti_similar_triangle_basic_properties on G, A, I, D, B, I we get angle(G, A, I) == 0 - angle(D, B, I) mod 360, angle(A, I, G) == 0 - angle(B, I, D) mod 360, angle(I, G, A) == 0 - angle(I, D, B) mod 360, log(distance(A, G)) + log(distance(B, I)) == log(distance(B, D)) + log(distance(A, I)), log(distance(A, I)) + log(distance(D, I)) == log(distance(B, I)) + log(distance(G, I)), log(distance(D, I)) + log(distance(A, G)) == log(distance(G, I)) + log(distance(B, D))
By anti_similar_triangle_basic_properties on A, G, I, B, D, I we get angle(A, G, I) == 0 - angle(B, D, I) mod 360, angle(G, I, A) == 0 - angle(D, I, B) mod 360, angle(I, A, G) == 0 - angle(I, B, D) mod 360, log(distance(A, G)) + log(distance(D, I)) == log(distance(B, D)) + log(distance(G, I)), log(distance(D, I)) + log(distance(A, I)) == log(distance(G, I)) + log(distance(B, I)), log(distance(A, I)) + log(distance(B, D)) == log(distance(B, I)) + log(distance(A, G))
By radical_axis_definition_v0_r on F, Circle(C, D, E), d we get F in radical_axis(d, Circle(C, D, E))
By sas_anti_congruence on C, F, H, C, E, H we get anti_congruent_triangles(C, E, H, C, F, H)
By sas_anti_similarity on H, A, C, H, G, C we get anti_similar_triangles(A, C, H, G, C, H)
By sas_anti_similarity on C, G, H, C, A, H we get anti_similar_triangles(A, C, H, G, C, H)
By sas_anti_similarity on C, E, H, C, F, H we get anti_similar_triangles(C, E, H, C, F, H)
By sas_anti_similarity on A, C, D, G, C, D we get anti_similar_triangles(A, C, D, G, C, D)
By sas_anti_similarity on H, F, C, H, E, C we get anti_similar_triangles(C, E, H, C, F, H)
By sas_anti_similarity on H, E, C, H, F, C we get anti_similar_triangles(C, E, H, C, F, H)
By sas_anti_similarity on C, A, H, C, G, H we get anti_similar_triangles(A, C, H, G, C, H)
By sas_anti_similarity on G, C, D, A, C, D we get anti_similar_triangles(A, C, D, G, C, D)
By sas_anti_similarity on D, C, A, D, C, G we get anti_similar_triangles(A, C, D, G, C, D)
By sas_anti_congruence on H, E, C, H, F, C we get anti_congruent_triangles(C, E, H, C, F, H)
By sas_anti_congruence on H, F, C, H, E, C we get anti_congruent_triangles(C, E, H, C, F, H)
By sas_anti_congruence on C, E, H, C, F, H we get anti_congruent_triangles(C, E, H, C, F, H)
By sas_anti_similarity on C, F, H, C, E, H we get anti_similar_triangles(C, E, H, C, F, H)
By sas_anti_similarity on D, C, G, D, C, A we get anti_similar_triangles(A, C, D, G, C, D)
By sas_anti_similarity on H, G, C, H, A, C we get anti_similar_triangles(A, C, H, G, C, H)
By perpendicular_bisector_sufficient_conditions on F, E, C, D we get Line(C, D) == perpendicular_bisector(E, F)
By isosceles_triangle_altitude_v2 on C, E, F we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, C, F), perpendicular_line(C, Line(E, F)))
By isosceles_triangle_altitude_v2 on C, F, E we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, C, F), perpendicular_line(C, Line(E, F)))
By isosceles_triangle_altitude_v2 on D, F, E we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, D, F), perpendicular_line(D, Line(E, F)))
By isosceles_triangle_altitude_v2 on D, E, F we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, D, F), perpendicular_line(D, Line(E, F)))
By line_definition on C, midpoint(E, F), Line(C, D) we get Line(C, D) == Line(C, midpoint(E, F))
By line_definition on midpoint(E, F), D, Line(C, D) we get Line(C, D) == Line(D, midpoint(E, F))
By line_intersection_definition on F, radical_axis(d, Circle(C, D, E)), Line(F, J) we get F == line_intersection(Line(F, J), radical_axis(d, Circle(C, D, E)))
By median_definition on C, E, F, Line(C, D) we get Line(C, D) == median(C, E, F)
By line_intersection_definition on F, radical_axis(d, Circle(C, D, E)), Line(F, center(d)) we get F == line_intersection(Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By line_intersection_definition on G, Line(G, J), Line(D, G) we get G == line_intersection(Line(D, G), Line(G, J))
By line_intersection_definition on F, Line(F, center(Circle(C, D, E))), g we get F == line_intersection(g, Line(F, center(Circle(C, D, E))))
By line_intersection_definition on F, Line(F, H), Line(F, center(Circle(C, D, E))) we get F == line_intersection(Line(F, H), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on F, g, radical_axis(d, Circle(C, D, E)) we get F == line_intersection(g, radical_axis(d, Circle(C, D, E)))
By line_intersection_definition on D, Line(C, D), Line(D, G) we get D == line_intersection(Line(C, D), Line(D, G))
By line_intersection_definition on F, Line(F, center(Circle(C, D, E))), Line(D, F) we get F == line_intersection(Line(D, F), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on C, Line(C, H), f we get C == line_intersection(f, Line(C, H))
By line_intersection_definition on center(Circle(C, D, E)), Line(E, center(Circle(C, D, E))), Line(C, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(C, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on F, Line(F, J), Line(F, center(Circle(C, D, E))) we get F == line_intersection(Line(F, J), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on E, Line(E, H), Line(E, center(Circle(C, D, E))) we get E == line_intersection(Line(E, H), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on D, Line(D, F), Line(D, G) we get D == line_intersection(Line(D, F), Line(D, G))
By line_intersection_definition on F, radical_axis(d, Circle(C, D, E)), Line(E, F) we get F == line_intersection(Line(E, F), radical_axis(d, Circle(C, D, E)))
By line_intersection_definition on center(Circle(C, D, E)), Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(D, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on F, Line(D, F), radical_axis(d, Circle(C, D, E)) we get F == line_intersection(Line(D, F), radical_axis(d, Circle(C, D, E)))
By line_intersection_definition on F, radical_axis(d, Circle(C, D, E)), Line(F, G) we get F == line_intersection(Line(F, G), radical_axis(d, Circle(C, D, E)))
By line_intersection_definition on center(Circle(C, D, E)), Line(F, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on G, Line(D, G), Line(G, center(d)) we get G == line_intersection(Line(D, G), Line(G, center(d)))
By median_definition on D, E, F, Line(C, D) we get Line(C, D) == median(D, E, F)
By line_intersection_definition on C, Line(C, center(Circle(C, D, E))), g we get C == line_intersection(g, Line(C, center(Circle(C, D, E))))
By line_intersection_definition on H, Line(A, H), Line(C, H) we get H == line_intersection(Line(A, H), Line(C, H))
By line_intersection_definition on D, Line(D, center(Circle(C, D, E))), h we get D == line_intersection(h, Line(D, center(Circle(C, D, E))))
By line_intersection_definition on C, Line(C, center(Circle(C, D, E))), f we get C == line_intersection(f, Line(C, center(Circle(C, D, E))))
By perpendicular_line_definition on A, Line(A, G), Line(C, D) we get Line(A, G) == perpendicular_line(A, Line(C, D))
By line_intersection_definition on E, Line(E, F), Line(E, center(Circle(C, D, E))) we get E == line_intersection(Line(E, F), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on E, Line(A, E), Line(E, center(Circle(C, D, E))) we get E == line_intersection(Line(A, E), Line(E, center(Circle(C, D, E))))
By line_intersection_definition on G, Line(D, G), Line(G, H) we get G == line_intersection(Line(D, G), Line(G, H))
By line_intersection_definition on H, Line(C, H), Line(G, H) we get H == line_intersection(Line(C, H), Line(G, H))
By line_intersection_definition on D, Line(D, center(Circle(C, D, E))), Line(D, G) we get D == line_intersection(Line(D, G), Line(D, center(Circle(C, D, E))))
By line_intersection_definition on G, Line(D, G), Line(F, G) we get G == line_intersection(Line(D, G), Line(F, G))
By line_intersection_definition on center(Circle(C, D, E)), Line(D, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(D, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on F, radical_axis(d, Circle(C, D, E)), Line(F, I) we get F == line_intersection(Line(F, I), radical_axis(d, Circle(C, D, E)))
By line_intersection_definition on F, Line(F, center(Circle(C, D, E))), Line(F, center(d)) we get F == line_intersection(Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on D, Line(D, G), h we get D == line_intersection(h, Line(D, G))
By line_intersection_definition on D, Line(D, F), Line(D, center(Circle(C, D, E))) we get D == line_intersection(Line(D, F), Line(D, center(Circle(C, D, E))))
By line_intersection_definition on G, Line(D, G), Line(A, G) we get G == line_intersection(Line(A, G), Line(D, G))
By line_intersection_definition on H, Line(C, H), Line(F, H) we get H == line_intersection(Line(C, H), Line(F, H))
By line_intersection_definition on F, Line(F, center(Circle(C, D, E))), Line(F, G) we get F == line_intersection(Line(F, G), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on C, g, Line(C, H) we get C == line_intersection(g, Line(C, H))
By perpendicular_line_definition on C, Line(C, D), Line(A, G) we get Line(C, D) == perpendicular_line(C, Line(A, G))
By line_intersection_definition on E, Line(E, center(Circle(C, D, E))), f we get E == line_intersection(f, Line(E, center(Circle(C, D, E))))
By line_intersection_definition on F, Line(F, center(Circle(C, D, E))), Line(E, F) we get F == line_intersection(Line(E, F), Line(F, center(Circle(C, D, E))))
By perpendicular_line_definition on E, Line(E, F), Line(C, D) we get Line(E, F) == perpendicular_line(E, Line(C, D))
By line_intersection_definition on D, Line(D, E), Line(D, G) we get D == line_intersection(Line(D, E), Line(D, G))
By line_intersection_definition on F, Line(F, center(Circle(C, D, E))), Line(F, I) we get F == line_intersection(Line(F, I), Line(F, center(Circle(C, D, E))))
By perpendicular_line_definition on G, Line(A, G), Line(C, D) we get Line(A, G) == perpendicular_line(G, Line(C, D))
By line_intersection_definition on center(Circle(C, D, E)), Line(F, center(Circle(C, D, E))), Line(C, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(C, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By line_intersection_definition on F, radical_axis(d, Circle(C, D, E)), Line(F, H) we get F == line_intersection(Line(F, H), radical_axis(d, Circle(C, D, E)))
By line_intersection_definition on D, i, Line(D, G) we get D == line_intersection(i, Line(D, G))
By line_intersection_definition on D, Line(D, center(Circle(C, D, E))), Line(D, E) we get D == line_intersection(Line(D, E), Line(D, center(Circle(C, D, E))))
By line_intersection_definition on H, Line(E, H), Line(C, H) we get H == line_intersection(Line(C, H), Line(E, H))
By line_intersection_definition on E, Line(D, E), Line(E, center(Circle(C, D, E))) we get E == line_intersection(Line(D, E), Line(E, center(Circle(C, D, E))))
By perpendicular_line_definition on midpoint(E, F), Line(C, D), Line(A, G) we get Line(C, D) == perpendicular_line(midpoint(E, F), Line(A, G))
By line_intersection_definition on D, i, Line(D, center(Circle(C, D, E))) we get D == line_intersection(i, Line(D, center(Circle(C, D, E))))
By line_intersection_definition on F, radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))) we get F == line_intersection(radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By perpendicular_line_definition on D, Line(C, D), Line(A, G) we get Line(C, D) == perpendicular_line(D, Line(A, G))
By perpendicular_line_definition on F, Line(E, F), Line(C, D) we get Line(E, F) == perpendicular_line(F, Line(C, D))
By line_intersection_definition on G, f, Line(D, G) we get G == line_intersection(f, Line(D, G))
By same_angle_converse_v1 on center(Circle(C, D, E)), D, C, F we get collinear(C, D, center(Circle(C, D, E)))
By same_angle_v2 on D, I, A, G we get angle(I, D, G) == angle(A, D, G) + 180 mod 360
By perpendicular_direction_conditions_v0 on A, G, H, C we get perpendicular(Line(A, G), Line(C, H))
By same_angle_v0 on C, E, I, H we get angle(E, C, H) == angle(I, C, H) mod 360
By same_angle_v0 on C, G, I, H we get angle(G, C, H) == angle(I, C, H) mod 360
By perpendicular_direction_conditions_v0 on C, H, E, F we get perpendicular(Line(C, H), Line(E, F))
By same_angle_v2 on G, B, C, D we get angle(B, G, D) == angle(C, G, D) + 180 mod 360
By same_angle_v1 on G, I, E, D we get angle(E, G, D) == angle(I, G, D) mod 360
By same_angle_v2 on G, B, I, D we get angle(B, G, D) == angle(I, G, D) + 180 mod 360
By same_angle_v1 on G, C, I, D we get angle(C, G, D) == angle(I, G, D) mod 360
By same_angle_v1 on G, E, C, D we get angle(C, G, D) == angle(E, G, D) mod 360
By same_angle_v0 on C, B, I, H we get angle(B, C, H) == angle(I, C, H) mod 360
By between_imply_not_between on F, midpoint(E, F), E we get collinear_and_not_between(E, F, midpoint(E, F))
By same_angle_v0 on C, B, E, H we get angle(B, C, H) == angle(E, C, H) mod 360
By same_angle_v0 on C, G, B, H we get angle(B, C, H) == angle(G, C, H) mod 360
By same_angle_v3 on D, I, J, G we get angle(I, D, G) == angle(J, D, G) + 180 mod 360
By same_angle_v1 on D, J, A, G we get angle(A, D, G) == angle(J, D, G) mod 360
By same_angle_v3 on G, B, E, D we get angle(B, G, D) == angle(E, G, D) + 180 mod 360
By parallel_line_definition on E, Line(E, F), Line(A, G) we get Line(E, F) == parallel_line(E, Line(A, G))
By between_imply_not_between on E, midpoint(E, F), F we get collinear_and_not_between(F, E, midpoint(E, F))
By parallel_line_definition on G, Line(A, G), Line(E, F) we get Line(A, G) == parallel_line(G, Line(E, F))
By parallel_line_definition on A, Line(A, G), Line(E, F) we get Line(A, G) == parallel_line(A, Line(E, F))
By parallel_line_definition on F, Line(E, F), Line(A, G) we get Line(E, F) == parallel_line(F, Line(A, G))
By divide_by_2_mod_180_v2 on B, E, A, G, H, C we get angle(B, E, A) == angle(G, H, C) + 180 mod 360
By divide_by_2_mod_180_v0 on B, C, D, H, C, A we get angle(B, C, D) == angle(H, C, A) mod 360
By anti_congruence_from_anti_similar_triangles on C, G, D, C, A, D we get anti_congruent_triangles(A, C, D, G, C, D)
By divide_by_2_mod_180_v0 on H, C, A, E, C, D we get angle(E, C, D) == angle(H, C, A) mod 360
By similar_triangle_basic_properties on center(d), I, F, H, E, F we get angle(H, E, F) == angle(center(d), I, F) mod 360, angle(E, F, H) == angle(I, F, center(d)) mod 360, angle(F, H, E) == angle(F, center(d), I) mod 360, log(distance(E, H)) + log(distance(F, I)) == log(distance(I, center(d))) + log(distance(E, F)), log(distance(F, I)) + log(distance(F, H)) == log(distance(E, F)) + log(distance(F, center(d))), log(distance(F, H)) + log(distance(I, center(d))) == log(distance(F, center(d))) + log(distance(E, H))
By divide_by_2_mod_180_v0 on G, C, D, H, C, A we get angle(G, C, D) == angle(H, C, A) mod 360
By in_imply_collinear on midpoint(E, F), C, D we get collinear(C, D, midpoint(E, F))
By divide_by_2_mod_180_v1 on E, H, C, C, G, F we get angle(C, G, F) == angle(E, H, C) mod 360
By divide_by_2_mod_180_v0 on E, C, D, E, C, H we get angle(E, C, D) == angle(E, C, H) mod 360
By divide_by_2_mod_180_v1 on D, J, F, E, H, C we get angle(D, J, F) == angle(E, H, C) mod 360
By divide_by_2_mod_180_v0 on B, C, D, G, C, H we get angle(B, C, D) == angle(G, C, H) mod 360
By divide_by_2_mod_180_v1 on A, C, H, F, G, H we get angle(A, C, H) == angle(F, G, H) mod 360
By divide_by_2_mod_180_v1 on F, G, H, H, C, G we get angle(F, G, H) == angle(H, C, G) mod 360
By divide_by_2_mod_180_v1 on D, C, I, F, C, H we get angle(D, C, I) == angle(F, C, H) mod 360
By divide_by_2_mod_180_v1 on H, C, E, F, C, D we get angle(F, C, D) == angle(H, C, E) mod 360
By divide_by_2_mod_180_v2 on C, H, E, F, G, B we get angle(C, H, E) == angle(F, G, B) + 180 mod 360
By divide_by_2_mod_180_v3 on E, H, C, B, G, F we get angle(E, H, C) == angle(B, G, F) + 180 mod 360
By divide_by_2_mod_180_v0 on H, C, F, E, C, D we get angle(E, C, D) == angle(H, C, F) mod 360
By divide_by_2_mod_180_v1 on H, C, E, F, G, H we get angle(F, G, H) == angle(H, C, E) mod 360
By divide_by_2_mod_180_v0 on E, A, H, H, C, F we get angle(E, A, H) == angle(H, C, F) mod 360
By divide_by_2_mod_180_v0 on E, C, H, D, C, A we get angle(D, C, A) == angle(E, C, H) mod 360
By divide_by_2_mod_180_v0 on E, F, D, H, C, F we get angle(E, F, D) == angle(H, C, F) mod 360
By divide_by_2_mod_180_v1 on H, A, E, F, C, H we get angle(F, C, H) == angle(H, A, E) mod 360
By divide_by_2_mod_180_v0 on H, G, F, H, C, A we get angle(H, C, A) == angle(H, G, F) mod 360
By divide_by_2_mod_180_v2 on B, G, F, C, H, F we get angle(B, G, F) == angle(C, H, F) + 180 mod 360
By divide_by_2_mod_180_v0 on E, C, H, I, C, D we get angle(E, C, H) == angle(I, C, D) mod 360
By divide_by_2_mod_180_v1 on H, C, E, F, E, D we get angle(F, E, D) == angle(H, C, E) mod 360
By similar_triangle_basic_properties on D, E, F, H, G, F we get angle(D, E, F) == angle(H, G, F) mod 360, angle(E, F, D) == angle(G, F, H) mod 360, angle(F, D, E) == angle(F, H, G) mod 360, log(distance(D, E)) + log(distance(F, G)) == log(distance(G, H)) + log(distance(E, F)), log(distance(E, F)) + log(distance(F, H)) == log(distance(F, G)) + log(distance(D, F)), log(distance(D, F)) + log(distance(G, H)) == log(distance(F, H)) + log(distance(D, E))
By divide_by_2_mod_180_v0 on E, A, H, E, C, H we get angle(E, A, H) == angle(E, C, H) mod 360
By divide_by_2_mod_180_v1 on E, H, C, I, G, F we get angle(E, H, C) == angle(I, G, F) mod 360
By divide_by_2_mod_180_v0 on C, H, E, F, A, E we get angle(C, H, E) == angle(F, A, E) mod 360
By divide_by_2_mod_180_v0 on D, C, F, H, C, F we get angle(D, C, F) == angle(H, C, F) mod 360
By divide_by_2_mod_180_v1 on E, A, F, E, H, C we get angle(E, A, F) == angle(E, H, C) mod 360
By divide_by_2_mod_180_v1 on F, G, H, F, C, H we get angle(F, C, H) == angle(F, G, H) mod 360
By divide_by_2_mod_180_v2 on A, H, C, A, E, B we get angle(A, H, C) == angle(A, E, B) + 180 mod 360
By divide_by_2_mod_180_v0 on F, H, C, F, J, D we get angle(F, H, C) == angle(F, J, D) mod 360
By divide_by_2_mod_180_v0 on C, A, E, F, H, C we get angle(C, A, E) == angle(F, H, C) mod 360
By divide_by_2_mod_180_v2 on F, H, C, F, J, A we get angle(F, H, C) == angle(F, J, A) + 180 mod 360
By divide_by_2_mod_180_v1 on F, C, D, A, C, H we get angle(A, C, H) == angle(F, C, D) mod 360
By divide_by_2_mod_180_v0 on G, C, H, H, G, F we get angle(G, C, H) == angle(H, G, F) mod 360
By divide_by_2_mod_180_v1 on A, C, H, D, C, I we get angle(A, C, H) == angle(D, C, I) mod 360
By divide_by_2_mod_180_v1 on A, C, H, D, C, B we get angle(A, C, H) == angle(D, C, B) mod 360
By divide_by_2_mod_180_v1 on H, C, E, D, C, I we get angle(D, C, I) == angle(H, C, E) mod 360
By divide_by_2_mod_180_v1 on A, C, H, A, E, H we get angle(A, C, H) == angle(A, E, H) mod 360
By divide_by_2_mod_180_v2 on B, G, F, E, H, C we get angle(B, G, F) == angle(E, H, C) + 180 mod 360
By divide_by_2_mod_180_v1 on D, C, G, H, C, E we get angle(D, C, G) == angle(H, C, E) mod 360
By divide_by_2_mod_180_v0 on F, G, C, C, H, E we get angle(C, H, E) == angle(F, G, C) mod 360
By divide_by_2_mod_180_v1 on H, A, E, A, C, H we get angle(A, C, H) == angle(H, A, E) mod 360
By divide_by_2_mod_180_v0 on H, E, A, E, C, H we get angle(E, C, H) == angle(H, E, A) mod 360
By divide_by_2_mod_180_v0 on F, H, C, F, G, C we get angle(F, G, C) == angle(F, H, C) mod 360
By divide_by_2_mod_180_v1 on H, F, G, F, C, H we get angle(F, C, H) == angle(H, F, G) mod 360
By anti_similar_triangle_basic_properties on F, E, H, I, F, center(d) we get angle(F, E, H) == 0 - angle(I, F, center(d)) mod 360, angle(E, H, F) == 0 - angle(F, center(d), I) mod 360, angle(H, F, E) == 0 - angle(center(d), I, F) mod 360, log(distance(F, I)) + log(distance(E, H)) == log(distance(E, F)) + log(distance(F, center(d))), log(distance(E, H)) + log(distance(I, center(d))) == log(distance(F, center(d))) + log(distance(F, H)), log(distance(F, H)) + log(distance(F, I)) == log(distance(I, center(d))) + log(distance(E, F))
By divide_by_2_mod_180_v1 on F, E, D, F, C, H we get angle(F, C, H) == angle(F, E, D) mod 360
By divide_by_2_mod_180_v1 on H, C, E, D, C, E we get angle(D, C, E) == angle(H, C, E) mod 360
By perpendicular_bisector_sufficient_conditions on F, E, center(Circle(C, D, E)), D we get perpendicular_bisector(E, F) == Line(D, center(Circle(C, D, E)))
By divide_by_2_mod_180_v3 on F, G, B, F, H, C we get angle(F, G, B) == angle(F, H, C) + 180 mod 360
By divide_by_2_mod_180_v3 on A, E, G, C, H, G we get angle(A, E, G) == angle(C, H, G) + 180 mod 360
By divide_by_2_mod_180_v0 on E, F, D, G, C, H we get angle(E, F, D) == angle(G, C, H) mod 360
By divide_by_2_mod_180_v1 on C, G, F, C, H, F we get angle(C, G, F) == angle(C, H, F) mod 360
By anti_similar_triangle_basic_properties on H, G, F, D, F, E we get angle(H, G, F) == 0 - angle(D, F, E) mod 360, angle(G, F, H) == 0 - angle(F, E, D) mod 360, angle(F, H, G) == 0 - angle(E, D, F) mod 360, log(distance(D, F)) + log(distance(F, G)) == log(distance(G, H)) + log(distance(E, F)), log(distance(E, F)) + log(distance(F, H)) == log(distance(F, G)) + log(distance(D, E)), log(distance(D, E)) + log(distance(G, H)) == log(distance(F, H)) + log(distance(D, F))
By divide_by_2_mod_180_v0 on D, C, F, G, C, H we get angle(D, C, F) == angle(G, C, H) mod 360
By divide_by_2_mod_180_v1 on C, E, A, C, H, A we get angle(C, E, A) == angle(C, H, A) mod 360
By divide_by_2_mod_180_v0 on A, E, I, C, H, G we get angle(A, E, I) == angle(C, H, G) mod 360
By divide_by_2_mod_180_v1 on E, A, F, C, H, F we get angle(C, H, F) == angle(E, A, F) mod 360
By divide_by_2_mod_180_v1 on E, H, C, E, A, C we get angle(E, A, C) == angle(E, H, C) mod 360
By divide_by_2_mod_180_v0 on C, H, G, A, E, C we get angle(A, E, C) == angle(C, H, G) mod 360
By divide_by_2_mod_180_v1 on A, C, D, F, C, H we get angle(A, C, D) == angle(F, C, H) mod 360
By divide_by_2_mod_180_v1 on C, H, F, I, J, F we get angle(C, H, F) == angle(I, J, F) mod 360
By divide_by_2_mod_180_v3 on C, H, F, A, J, F we get angle(C, H, F) == angle(A, J, F) + 180 mod 360
By divide_by_2_mod_180_v0 on H, E, A, H, C, A we get angle(H, C, A) == angle(H, E, A) mod 360
By divide_by_2_mod_180_v2 on A, J, F, E, H, C we get angle(A, J, F) == angle(E, H, C) + 180 mod 360
By divide_by_2_mod_180_v0 on H, C, F, H, G, F we get angle(H, C, F) == angle(H, G, F) mod 360
By divide_by_2_mod_180_v1 on H, C, G, A, E, H we get angle(A, E, H) == angle(H, C, G) mod 360
By divide_by_2_mod_180_v0 on H, C, F, B, C, D we get angle(B, C, D) == angle(H, C, F) mod 360
By divide_by_2_mod_180_v1 on F, C, H, D, F, E we get angle(D, F, E) == angle(F, C, H) mod 360
By divide_by_2_mod_180_v1 on D, C, B, F, C, H we get angle(D, C, B) == angle(F, C, H) mod 360
By divide_by_2_mod_180_v3 on C, H, A, B, E, A we get angle(C, H, A) == angle(B, E, A) + 180 mod 360
By divide_by_2_mod_180_v3 on E, H, C, A, J, F we get angle(E, H, C) == angle(A, J, F) + 180 mod 360
By divide_by_2_mod_180_v0 on C, H, E, F, G, I we get angle(C, H, E) == angle(F, G, I) mod 360
By divide_by_2_mod_180_v0 on D, E, F, H, C, F we get angle(D, E, F) == angle(H, C, F) mod 360
By divide_by_2_mod_180_v0 on H, C, F, G, F, H we get angle(G, F, H) == angle(H, C, F) mod 360
By divide_by_2_mod_180_v1 on H, C, G, H, F, G we get angle(H, C, G) == angle(H, F, G) mod 360
By divide_by_2_mod_180_v0 on E, C, H, D, E, F we get angle(D, E, F) == angle(E, C, H) mod 360
By divide_by_2_mod_180_v0 on E, C, D, G, C, H we get angle(E, C, D) == angle(G, C, H) mod 360
By divide_by_2_mod_180_v1 on F, C, D, F, C, H we get angle(F, C, D) == angle(F, C, H) mod 360
By divide_by_2_mod_180_v0 on A, H, C, A, E, I we get angle(A, E, I) == angle(A, H, C) mod 360
By divide_by_2_mod_180_v1 on H, C, G, A, C, D we get angle(A, C, D) == angle(H, C, G) mod 360
By divide_by_2_mod_180_v1 on H, C, G, D, C, I we get angle(D, C, I) == angle(H, C, G) mod 360
By divide_by_2_mod_180_v0 on D, C, F, E, C, H we get angle(D, C, F) == angle(E, C, H) mod 360
By divide_by_2_mod_180_v0 on E, C, H, E, F, D we get angle(E, C, H) == angle(E, F, D) mod 360
By divide_by_2_mod_180_v1 on H, C, G, D, C, E we get angle(D, C, E) == angle(H, C, G) mod 360
By divide_by_2_mod_180_v1 on A, C, H, A, C, D we get angle(A, C, D) == angle(A, C, H) mod 360
By divide_by_2_mod_180_v0 on E, C, H, G, C, D we get angle(E, C, H) == angle(G, C, D) mod 360
By divide_by_2_mod_180_v0 on F, G, E, C, H, E we get angle(C, H, E) == angle(F, G, E) mod 360
By divide_by_2_mod_180_v0 on F, H, C, F, A, E we get angle(F, A, E) == angle(F, H, C) mod 360
By divide_by_2_mod_180_v3 on F, G, B, C, H, E we get angle(F, G, B) == angle(C, H, E) + 180 mod 360
By sas_anti_similarity on G, E, D, A, F, D we get anti_similar_triangles(A, D, F, G, D, E)
By divide_by_2_mod_180_v0 on A, H, C, C, F, G we get angle(A, H, C) == angle(C, F, G) mod 360
By anti_similar_triangle_basic_properties on D, F, E, H, E, A we get angle(D, F, E) == 0 - angle(H, E, A) mod 360, angle(F, E, D) == 0 - angle(E, A, H) mod 360, angle(E, D, F) == 0 - angle(A, H, E) mod 360, log(distance(D, F)) + log(distance(A, E)) == log(distance(E, H)) + log(distance(E, F)), log(distance(A, E)) + log(distance(D, E)) == log(distance(E, F)) + log(distance(A, H)), log(distance(A, H)) + log(distance(D, F)) == log(distance(D, E)) + log(distance(E, H))
By divide_by_2_mod_180_v0 on H, C, A, E, A, H we get angle(E, A, H) == angle(H, C, A) mod 360
By divide_by_2_mod_180_v1 on F, E, D, H, C, G we get angle(F, E, D) == angle(H, C, G) mod 360
By divide_by_2_mod_180_v1 on A, E, H, H, C, E we get angle(A, E, H) == angle(H, C, E) mod 360
By divide_by_2_mod_180_v1 on D, C, G, F, C, H we get angle(D, C, G) == angle(F, C, H) mod 360
By divide_by_2_mod_180_v1 on D, C, B, H, C, E we get angle(D, C, B) == angle(H, C, E) mod 360
By divide_by_2_mod_180_v1 on G, H, C, I, E, A we get angle(G, H, C) == angle(I, E, A) mod 360
By divide_by_2_mod_180_v1 on E, H, C, I, J, F we get angle(E, H, C) == angle(I, J, F) mod 360
By divide_by_2_mod_180_v3 on G, H, C, G, F, A we get angle(G, H, C) == angle(G, F, A) + 180 mod 360
By divide_by_2_mod_180_v0 on H, C, A, G, F, H we get angle(G, F, H) == angle(H, C, A) mod 360
By divide_by_2_mod_180_v0 on C, H, E, F, J, I we get angle(C, H, E) == angle(F, J, I) mod 360
By divide_by_2_mod_180_v2 on G, F, A, C, H, A we get angle(G, F, A) == angle(C, H, A) + 180 mod 360
By divide_by_2_mod_180_v1 on G, H, C, C, E, A we get angle(C, E, A) == angle(G, H, C) mod 360
By divide_by_2_mod_180_v1 on A, C, H, D, F, E we get angle(A, C, H) == angle(D, F, E) mod 360
By divide_by_2_mod_180_v0 on G, C, H, H, E, A we get angle(G, C, H) == angle(H, E, A) mod 360
By divide_by_2_mod_180_v1 on E, G, F, C, H, F we get angle(C, H, F) == angle(E, G, F) mod 360
By divide_by_2_mod_180_v2 on B, E, A, C, H, A we get angle(B, E, A) == angle(C, H, A) + 180 mod 360
By divide_by_2_mod_180_v1 on E, G, F, E, H, C we get angle(E, G, F) == angle(E, H, C) mod 360
By divide_by_2_mod_180_v0 on D, E, F, H, C, A we get angle(D, E, F) == angle(H, C, A) mod 360
By divide_by_2_mod_180_v1 on D, C, B, H, C, G we get angle(D, C, B) == angle(H, C, G) mod 360
By divide_by_2_mod_180_v1 on H, C, E, H, F, G we get angle(H, C, E) == angle(H, F, G) mod 360
By divide_by_2_mod_180_v0 on G, C, H, D, E, F we get angle(D, E, F) == angle(G, C, H) mod 360
By divide_by_2_mod_180_v0 on I, C, D, G, C, H we get angle(G, C, H) == angle(I, C, D) mod 360
By divide_by_2_mod_180_v1 on D, F, E, H, C, G we get angle(D, F, E) == angle(H, C, G) mod 360
By divide_by_2_mod_180_v0 on G, C, H, E, A, H we get angle(E, A, H) == angle(G, C, H) mod 360
By divide_by_2_mod_180_v1 on H, A, E, H, C, G we get angle(H, A, E) == angle(H, C, G) mod 360
By divide_by_2_mod_180_v0 on G, C, D, G, C, H we get angle(G, C, D) == angle(G, C, H) mod 360
By divide_by_2_mod_180_v0 on H, C, F, D, C, A we get angle(D, C, A) == angle(H, C, F) mod 360
By divide_by_2_mod_180_v0 on I, C, D, H, C, F we get angle(H, C, F) == angle(I, C, D) mod 360
By divide_by_2_mod_180_v1 on D, C, E, F, C, H we get angle(D, C, E) == angle(F, C, H) mod 360
By anti_congruence_from_anti_similar_triangles on D, C, A, D, C, G we get anti_congruent_triangles(A, C, D, G, C, D)
By divide_by_2_mod_180_v0 on C, H, E, F, J, D we get angle(C, H, E) == angle(F, J, D) mod 360
By divide_by_2_mod_180_v0 on H, G, F, E, C, H we get angle(E, C, H) == angle(H, G, F) mod 360
By divide_by_2_mod_180_v0 on H, C, F, G, C, D we get angle(G, C, D) == angle(H, C, F) mod 360
By divide_by_2_mod_180_v0 on C, F, G, C, H, G we get angle(C, F, G) == angle(C, H, G) mod 360
By divide_by_2_mod_180_v1 on D, J, F, C, H, F we get angle(C, H, F) == angle(D, J, F) mod 360
By similar_triangle_basic_properties on F, E, D, A, E, H we get angle(A, E, H) == angle(F, E, D) mod 360, angle(E, D, F) == angle(E, H, A) mod 360, angle(D, F, E) == angle(H, A, E) mod 360, log(distance(A, E)) + log(distance(D, E)) == log(distance(E, F)) + log(distance(E, H)), log(distance(D, E)) + log(distance(A, H)) == log(distance(E, H)) + log(distance(D, F)), log(distance(A, H)) + log(distance(E, F)) == log(distance(D, F)) + log(distance(A, E))
By divide_by_2_mod_180_v1 on I, E, A, C, H, A we get angle(C, H, A) == angle(I, E, A) mod 360
By divide_by_2_mod_180_v1 on C, H, F, I, G, F we get angle(C, H, F) == angle(I, G, F) mod 360
By perpendicular_bisector_sufficient_conditions on E, F, C, H we get Line(C, H) == perpendicular_bisector(E, F)
By divide_by_2_mod_180_v1 on A, E, H, F, C, H we get angle(A, E, H) == angle(F, C, H) mod 360
By divide_by_2_mod_180_v2 on A, J, F, C, H, F we get angle(A, J, F) == angle(C, H, F) + 180 mod 360
By divide_by_2_mod_180_v1 on F, E, D, A, C, H we get angle(A, C, H) == angle(F, E, D) mod 360
By divide_by_2_mod_180_v1 on C, H, F, E, A, C we get angle(C, H, F) == angle(E, A, C) mod 360
By divide_by_2_mod_180_v3 on C, H, F, B, G, F we get angle(C, H, F) == angle(B, G, F) + 180 mod 360
By divide_by_2_mod_180_v3 on A, F, G, C, H, G we get angle(A, F, G) == angle(C, H, G) + 180 mod 360
By divide_by_2_mod_180_v0 on G, F, H, G, C, H we get angle(G, C, H) == angle(G, F, H) mod 360
By divide_by_2_mod_180_v3 on A, E, B, A, H, C we get angle(A, E, B) == angle(A, H, C) + 180 mod 360
By divide_by_2_mod_180_v3 on A, E, G, A, H, C we get angle(A, E, G) == angle(A, H, C) + 180 mod 360
By divide_by_2_mod_180_v1 on H, C, E, H, A, E we get angle(H, A, E) == angle(H, C, E) mod 360
By sas_anti_similarity on D, I, G, B, I, A we get anti_similar_triangles(A, B, I, G, D, I)
By divide_by_2_mod_180_v0 on I, C, D, H, C, A we get angle(H, C, A) == angle(I, C, D) mod 360
By divide_by_2_mod_180_v1 on A, C, H, D, C, E we get angle(A, C, H) == angle(D, C, E) mod 360
By divide_by_2_mod_180_v1 on G, F, C, C, H, A we get angle(C, H, A) == angle(G, F, C) mod 360
By anti_congruence_from_anti_similar_triangles on C, A, D, C, G, D we get anti_congruent_triangles(A, C, D, G, C, D)
By divide_by_2_mod_180_v2 on A, H, C, A, E, G we get angle(A, H, C) == angle(A, E, G) + 180 mod 360
By divide_by_2_mod_180_v1 on D, C, G, H, C, G we get angle(D, C, G) == angle(H, C, G) mod 360
By divide_by_2_mod_180_v2 on C, H, G, A, E, B we get angle(C, H, G) == angle(A, E, B) + 180 mod 360
By divide_by_2_mod_180_v1 on G, F, C, G, H, C we get angle(G, F, C) == angle(G, H, C) mod 360
By anti_similar_triangle_basic_properties on E, F, D, F, G, H we get angle(E, F, D) == 0 - angle(F, G, H) mod 360, angle(F, D, E) == 0 - angle(G, H, F) mod 360, angle(D, E, F) == 0 - angle(H, F, G) mod 360, log(distance(E, F)) + log(distance(G, H)) == log(distance(F, G)) + log(distance(D, F)), log(distance(D, F)) + log(distance(F, H)) == log(distance(G, H)) + log(distance(D, E)), log(distance(D, E)) + log(distance(F, G)) == log(distance(F, H)) + log(distance(E, F))
By divide_by_2_mod_180_v1 on A, C, D, H, C, E we get angle(A, C, D) == angle(H, C, E) mod 360
By divide_by_2_mod_180_v3 on A, F, G, A, H, C we get angle(A, F, G) == angle(A, H, C) + 180 mod 360
By divide_by_2_mod_180_v0 on C, H, E, C, A, E we get angle(C, A, E) == angle(C, H, E) mod 360
By similar_triangle_basic_properties on D, F, E, H, F, G we get angle(D, F, E) == angle(H, F, G) mod 360, angle(F, E, D) == angle(F, G, H) mod 360, angle(E, D, F) == angle(G, H, F) mod 360, log(distance(D, F)) + log(distance(F, G)) == log(distance(F, H)) + log(distance(E, F)), log(distance(E, F)) + log(distance(G, H)) == log(distance(F, G)) + log(distance(D, E)), log(distance(D, E)) + log(distance(F, H)) == log(distance(G, H)) + log(distance(D, F))
By divide_by_2_mod_180_v3 on F, J, A, F, H, C we get angle(F, J, A) == angle(F, H, C) + 180 mod 360
By divide_by_2_mod_180_v0 on F, H, C, F, G, I we get angle(F, G, I) == angle(F, H, C) mod 360
By anti_congruence_from_anti_similar_triangles on C, D, A, C, D, G we get anti_congruent_triangles(A, C, D, G, C, D)
By divide_by_2_mod_180_v1 on D, F, E, H, C, E we get angle(D, F, E) == angle(H, C, E) mod 360
By divide_by_2_mod_180_v0 on F, H, C, F, J, I we get angle(F, H, C) == angle(F, J, I) mod 360
By internal_angle_bisector_definition_v0_r on F, H, G, C we get Line(C, H) == internal_angle_bisector(F, C, G)
By similar_triangle_basic_properties on A, H, E, F, D, E we get angle(A, H, E) == angle(F, D, E) mod 360, angle(D, E, F) == angle(H, E, A) mod 360, angle(E, A, H) == angle(E, F, D) mod 360, log(distance(A, H)) + log(distance(D, E)) == log(distance(D, F)) + log(distance(E, H)), log(distance(D, E)) + log(distance(A, E)) == log(distance(E, H)) + log(distance(E, F)), log(distance(A, E)) + log(distance(D, F)) == log(distance(E, F)) + log(distance(A, H))
By perpendicular_bisector_sufficient_conditions on F, E, C, center(Circle(C, D, E)) we get perpendicular_bisector(E, F) == Line(C, center(Circle(C, D, E)))
By sas_anti_congruence on D, E, G, D, F, A we get anti_congruent_triangles(A, D, F, G, D, E)
By divide_by_2_mod_180_v0 on H, C, A, E, F, D we get angle(E, F, D) == angle(H, C, A) mod 360
By divide_by_2_mod_180_v3 on C, H, A, G, E, A we get angle(C, H, A) == angle(G, E, A) + 180 mod 360
By divide_by_2_mod_180_v3 on C, H, A, G, F, A we get angle(C, H, A) == angle(G, F, A) + 180 mod 360
By divide_by_2_mod_180_v0 on G, F, H, E, C, H we get angle(E, C, H) == angle(G, F, H) mod 360
By internal_angle_bisector_definition_v0_r on A, H, G, C we get Line(C, H) == internal_angle_bisector(A, C, G)
By divide_by_2_mod_180_v1 on H, C, G, F, C, D we get angle(F, C, D) == angle(H, C, G) mod 360
By divide_by_2_mod_180_v0 on G, C, H, D, C, A we get angle(D, C, A) == angle(G, C, H) mod 360
By sas_anti_congruence on D, C, G, D, C, A we get anti_congruent_triangles(A, C, D, G, C, D)
By divide_by_2_mod_180_v0 on A, H, C, A, E, C we get angle(A, E, C) == angle(A, H, C) mod 360
By sas_anti_similarity on D, E, G, D, F, A we get anti_similar_triangles(A, D, F, G, D, E)
By divide_by_2_mod_180_v0 on H, C, A, D, C, A we get angle(D, C, A) == angle(H, C, A) mod 360
By anti_congruence_from_anti_similar_triangles on A, C, D, G, C, D we get anti_congruent_triangles(A, C, D, G, C, D)
By isosceles_trapezoid_properties on A, G, E, F we get parallel(Line(A, G), Line(E, F)), distance(A, F) == distance(E, G), angle(A, G, E) == angle(F, A, G), angle(E, F, A) == angle(G, E, F)
By divide_by_2_mod_180_v1 on A, C, H, H, F, G we get angle(A, C, H) == angle(H, F, G) mod 360
By divide_by_2_mod_180_v0 on B, C, D, E, C, H we get angle(B, C, D) == angle(E, C, H) mod 360
By divide_by_2_mod_180_v3 on A, E, B, C, H, G we get angle(A, E, B) == angle(C, H, G) + 180 mod 360
By divide_by_2_mod_180_v0 on H, C, F, H, E, A we get angle(H, C, F) == angle(H, E, A) mod 360
By divide_by_2_mod_180_v3 on G, H, C, B, E, A we get angle(G, H, C) == angle(B, E, A) + 180 mod 360
By divide_by_2_mod_180_v2 on C, H, G, A, E, G we get angle(C, H, G) == angle(A, E, G) + 180 mod 360
By anti_similar_triangle_basic_properties on A, E, H, E, F, D we get angle(A, E, H) == 0 - angle(E, F, D) mod 360, angle(E, H, A) == 0 - angle(F, D, E) mod 360, angle(H, A, E) == 0 - angle(D, E, F) mod 360, log(distance(A, E)) + log(distance(D, F)) == log(distance(E, F)) + log(distance(E, H)), log(distance(D, F)) + log(distance(A, H)) == log(distance(E, H)) + log(distance(D, E)), log(distance(A, H)) + log(distance(E, F)) == log(distance(D, E)) + log(distance(A, E))
By divide_by_2_mod_180_v2 on C, H, E, F, J, A we get angle(C, H, E) == angle(F, J, A) + 180 mod 360
By divide_by_2_mod_180_v0 on F, G, E, F, H, C we get angle(F, G, E) == angle(F, H, C) mod 360
By asa_anti_congruence on C, A, D, C, G, D we get anti_congruent_triangles(A, C, D, G, C, D)
By asa_anti_congruence on D, C, G, D, C, A we get anti_congruent_triangles(A, C, D, G, C, D)
By divide_by_2_mod_180_v3 on G, H, C, G, E, A we get angle(G, H, C) == angle(G, E, A) + 180 mod 360
By divide_by_2_mod_180_v0 on D, C, F, H, C, A we get angle(D, C, F) == angle(H, C, A) mod 360
By divide_by_2_mod_180_v1 on D, C, G, A, C, H we get angle(A, C, H) == angle(D, C, G) mod 360
By divide_by_2_mod_180_v2 on G, F, A, G, H, C we get angle(G, F, A) == angle(G, H, C) + 180 mod 360
By divide_by_2_mod_180_v3 on F, J, A, C, H, E we get angle(F, J, A) == angle(C, H, E) + 180 mod 360
By internal_angle_bisector_definition_v0_r on E, H, A, C we get Line(C, H) == internal_angle_bisector(A, C, E)
By divide_by_2_mod_180_v2 on G, E, A, C, H, A we get angle(G, E, A) == angle(C, H, A) + 180 mod 360
By isosceles_trapezoid_properties on F, E, G, A we get parallel(Line(A, G), Line(E, F)), distance(A, F) == distance(E, G), angle(A, F, E) == angle(F, E, G), angle(E, G, A) == angle(G, A, F)
By divide_by_2_mod_180_v2 on A, H, C, A, F, G we get angle(A, H, C) == angle(A, F, G) + 180 mod 360
By sas_anti_congruence on A, C, D, G, C, D we get anti_congruent_triangles(A, C, D, G, C, D)
By sas_anti_similarity on G, I, D, A, I, B we get anti_similar_triangles(A, B, I, G, D, I)
By divide_by_2_mod_180_v2 on G, E, A, G, H, C we get angle(G, E, A) == angle(G, H, C) + 180 mod 360
By divide_by_2_mod_180_v2 on C, H, G, A, F, G we get angle(C, H, G) == angle(A, F, G) + 180 mod 360
By divide_by_2_mod_180_v2 on F, H, C, F, G, B we get angle(F, H, C) == angle(F, G, B) + 180 mod 360
By reverse_direction on H, C we get 180 == direction(H, C) - direction(C, H) mod 360
By asa_anti_congruence on C, G, D, C, A, D we get anti_congruent_triangles(A, C, D, G, C, D)
By internal_angle_bisector_definition_v0_r on F, H, E, C we get Line(C, H) == internal_angle_bisector(E, C, F)
By sas_anti_similarity on D, F, A, D, E, G we get anti_similar_triangles(A, D, F, G, D, E)
By sas_anti_similarity on B, I, A, D, I, G we get anti_similar_triangles(A, B, I, G, D, I)
By anti_congruence_from_anti_similar_triangles on G, C, D, A, C, D we get anti_congruent_triangles(A, C, D, G, C, D)
By asa_anti_congruence on A, C, D, G, C, D we get anti_congruent_triangles(A, C, D, G, C, D)
By asa_anti_congruence on C, D, G, C, D, A we get anti_congruent_triangles(A, C, D, G, C, D)
By sas_anti_congruence on G, E, D, A, F, D we get anti_congruent_triangles(A, D, F, G, D, E)
By asa_anti_congruence on G, C, D, A, C, D we get anti_congruent_triangles(A, C, D, G, C, D)
By sas_anti_similarity on A, I, B, G, I, D we get anti_similar_triangles(A, B, I, G, D, I)
By anti_congruence_from_anti_similar_triangles on C, D, G, C, D, A we get anti_congruent_triangles(A, C, D, G, C, D)
By sas_anti_congruence on A, F, D, G, E, D we get anti_congruent_triangles(A, D, F, G, D, E)
By anti_congruence_from_anti_similar_triangles on D, C, G, D, C, A we get anti_congruent_triangles(A, C, D, G, C, D)
By sas_anti_congruence on D, F, A, D, E, G we get anti_congruent_triangles(A, D, F, G, D, E)
By asa_anti_congruence on D, C, A, D, C, G we get anti_congruent_triangles(A, C, D, G, C, D)
By sas_anti_congruence on D, C, A, D, C, G we get anti_congruent_triangles(A, C, D, G, C, D)
By sas_anti_similarity on A, F, D, G, E, D we get anti_similar_triangles(A, D, F, G, D, E)
By sas_anti_congruence on G, C, D, A, C, D we get anti_congruent_triangles(A, C, D, G, C, D)
By asa_anti_congruence on C, D, A, C, D, G we get anti_congruent_triangles(A, C, D, G, C, D)
By reverse_direction on C, H we get 180 == direction(C, H) - direction(H, C) mod 360
By reverse_direction on center(Circle(C, D, E)), F we get 180 == direction(center(Circle(C, D, E)), F) - direction(F, center(Circle(C, D, E))) mod 360
By reverse_direction on center(Circle(C, D, E)), C we get 180 == direction(center(Circle(C, D, E)), C) - direction(C, center(Circle(C, D, E))) mod 360
By concyclic_definition_0 on B, G, A, D we get D in Circle(A, B, G)
By anti_similar_triangle_basic_properties on C, F, H, C, E, H we get angle(C, F, H) == 0 - angle(C, E, H) mod 360, angle(F, H, C) == 0 - angle(E, H, C) mod 360, angle(H, C, F) == 0 - angle(H, C, E) mod 360, log(distance(C, E)) + log(distance(F, H)) == log(distance(C, F)) + log(distance(E, H)), log(distance(E, H)) + log(distance(C, H)) == log(distance(F, H)) + log(distance(C, H)), log(distance(C, H)) + log(distance(C, E)) == log(distance(C, H)) + log(distance(C, F))
By concyclic_definition_0 on C, G, H, F we get F in Circle(C, G, H)
By external_angle_bisector_definition_v0_r on G, C, I, D we get Line(C, D) == external_angle_bisector(G, D, I)
By concyclic_definition_0 on G, D, A, B we get B in Circle(A, D, G)
By concyclic_definition_0 on G, F, H, C we get C in Circle(F, G, H)
By isosceles_triangle_midpoint on center(Circle(C, D, E)), F, E we get midpoint(E, F) in median(center(Circle(C, D, E)), E, F)
By isosceles_triangle_midpoint on C, F, E we get midpoint(E, F) in median(C, E, F)
By collinear_definition on E, midpoint(E, F), F we get midpoint(E, F) in Line(E, F), F in Line(E, midpoint(E, F)), Line(E, F) == Line(E, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), E, F) mod 360
By concyclic_definition_0 on H, E, C, A we get A in Circle(C, E, H)
By concyclic_definition_0 on A, H, C, E we get E in Circle(A, C, H)
By concyclic_definition_0 on G, C, F, H we get H in Circle(C, F, G)
By anti_similar_triangle_basic_properties on G, H, C, A, H, C we get angle(G, H, C) == 0 - angle(A, H, C) mod 360, angle(H, C, G) == 0 - angle(H, C, A) mod 360, angle(C, G, H) == 0 - angle(C, A, H) mod 360, log(distance(A, H)) + log(distance(C, H)) == log(distance(G, H)) + log(distance(C, H)), log(distance(C, H)) + log(distance(A, C)) == log(distance(C, H)) + log(distance(C, G)), log(distance(A, C)) + log(distance(G, H)) == log(distance(C, G)) + log(distance(A, H))
By concyclic_definition_0 on A, E, C, H we get H in Circle(A, C, E)
By concyclic_definition_0 on F, C, H, G we get G in Circle(C, F, H)
By concyclic_definition_0 on D, B, G, A we get A in Circle(B, D, G)
By internal_angle_bisector_definition_v0_r on F, D, E, center(Circle(C, D, E)) we get Line(D, center(Circle(C, D, E))) == internal_angle_bisector(E, center(Circle(C, D, E)), F)
By concyclic_definition_0 on A, H, E, C we get C in Circle(A, E, H)
By altitude_definition on C, F, E, Line(C, D) we get Line(C, D) == altitude(C, E, F)
By concyclic_definition_0 on A, B, D, G we get G in Circle(A, B, D)
By isosceles_triangle_midpoint on H, F, E we get midpoint(E, F) in median(H, E, F)
By internal_angle_bisector_definition_v0_r on F, C, E, H we get Line(C, H) == internal_angle_bisector(E, H, F)
By internal_angle_bisector_definition_v0_r on C, D, C, center(Circle(C, D, E)) we get Line(D, center(Circle(C, D, E))) == internal_angle_bisector(C, center(Circle(C, D, E)), C)
By internal_angle_bisector_definition_v0_r on G, C, A, H we get Line(C, H) == internal_angle_bisector(A, H, G)
By internal_angle_bisector_definition_v0_r on F, C, E, center(Circle(C, D, E)) we get Line(C, center(Circle(C, D, E))) == internal_angle_bisector(E, center(Circle(C, D, E)), F)
By collinear_definition on F, midpoint(E, F), E we get midpoint(E, F) in Line(E, F), E in Line(F, midpoint(E, F)), Line(E, F) == Line(F, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), F, E) mod 360
By log_of_2_times_distance on E, F, E, midpoint(E, F) we get log(distance(E, F)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(E, midpoint(E, F)))
By internal_angle_bisector_definition_v0_r on G, C, J, D we get Line(C, D) == internal_angle_bisector(G, D, J)
By reverse_direction on center(Circle(C, D, E)), E we get 180 == direction(center(Circle(C, D, E)), E) - direction(E, center(Circle(C, D, E))) mod 360
By internal_angle_bisector_definition_v0_r on G, C, A, D we get Line(C, D) == internal_angle_bisector(A, D, G)
By altitude_definition on D, E, F, Line(C, D) we get Line(C, D) == altitude(D, E, F)
By reverse_direction on center(Circle(C, D, E)), D we get 180 == direction(center(Circle(C, D, E)), D) - direction(D, center(Circle(C, D, E))) mod 360
By perpendicular_lines_draw_intersection on Line(A, G), Line(C, D) we get exists(line_intersection(Line(A, G), Line(C, D)))
By perpendicular_bisector_properties on E, F we get perpendicular(Line(E, F), perpendicular_bisector(E, F)), midpoint(E, F) == line_intersection(Line(E, F), perpendicular_bisector(E, F))
By collinear_definition on F, E, midpoint(E, F) we get E in Line(F, midpoint(E, F)), midpoint(E, F) in Line(E, F), Line(E, F) == Line(F, midpoint(E, F)), 0 == 2 * angle(E, F, midpoint(E, F)) mod 360
By internal_angle_bisector_definition_v0_r on D, C, D, center(Circle(C, D, E)) we get Line(C, center(Circle(C, D, E))) == internal_angle_bisector(D, center(Circle(C, D, E)), D)
By log_of_2_times_distance on F, E, F, midpoint(E, F) we get log(distance(E, F)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(F, midpoint(E, F)))
By isosceles_triangle_midpoint on D, E, F we get midpoint(E, F) in median(D, E, F)
By collinear_definition on E, F, midpoint(E, F) we get F in Line(E, midpoint(E, F)), midpoint(E, F) in Line(E, F), Line(E, F) == Line(E, midpoint(E, F)), 0 == 2 * angle(F, E, midpoint(E, F)) mod 360
By perpendicular_lines_draw_intersection on Line(E, F), Line(C, D) we get exists(line_intersection(Line(C, D), Line(E, F)))
By concyclic_definition_1 on B, G, D, A we get Circle(A, D, G) == Circle(B, D, G)
By anti_similar_triangle_basic_properties on A, D, C, G, D, C we get angle(A, D, C) == 0 - angle(G, D, C) mod 360, angle(D, C, A) == 0 - angle(D, C, G) mod 360, angle(C, A, D) == 0 - angle(C, G, D) mod 360, log(distance(A, D)) + log(distance(C, D)) == log(distance(D, G)) + log(distance(C, D)), log(distance(C, D)) + log(distance(A, C)) == log(distance(C, D)) + log(distance(C, G)), log(distance(A, C)) + log(distance(D, G)) == log(distance(C, G)) + log(distance(A, D))
By concyclic_definition_1 on A, D, B, G we get Circle(A, B, D) == Circle(B, D, G)
By isosceles_triangle_properties on center(Circle(C, D, E)), D, E we get distance(D, center(Circle(C, D, E))) == distance(E, center(Circle(C, D, E))), angle(D, E, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), D, E) mod 360
By concyclic_definition_1 on D, A, B, G we get Circle(A, B, D) == Circle(A, B, G)
By concyclic_definition_1 on H, G, C, F we get Circle(C, F, G) == Circle(C, G, H)
By concyclic_definition_1 on H, A, C, E we get Circle(A, C, E) == Circle(A, C, H)
By sas_anti_congruence on E, center(Circle(C, D, E)), C, C, center(Circle(C, D, E)), E we get anti_congruent_triangles(C, E, center(Circle(C, D, E)), E, C, center(Circle(C, D, E)))
By altitude_definition on A, D, C, Line(A, G) we get Line(A, G) == altitude(A, C, D)
By collinear_definition on midpoint(E, F), E, F we get E in Line(F, midpoint(E, F)), F in Line(E, midpoint(E, F)), Line(E, midpoint(E, F)) == Line(F, midpoint(E, F)), 0 == 2 * angle(E, midpoint(E, F), F) mod 360
By concyclic_definition_1 on G, A, D, B we get Circle(A, B, D) == Circle(A, D, G)
By concyclic_definition_1 on H, C, F, G we get Circle(C, F, G) == Circle(C, F, H)
By altitude_definition on midpoint(E, F), A, G, Line(C, D) we get Line(C, D) == altitude(midpoint(E, F), A, G)
By concyclic_definition_1 on C, H, G, F we get Circle(C, G, H) == Circle(F, G, H)
By concyclic_definition_1 on F, C, H, G we get Circle(C, F, H) == Circle(C, G, H)
By altitude_definition on F, C, D, Line(E, F) we get Line(E, F) == altitude(F, C, D)
By sas_anti_congruence on D, center(Circle(C, D, E)), F, F, center(Circle(C, D, E)), D we get anti_congruent_triangles(D, F, center(Circle(C, D, E)), F, D, center(Circle(C, D, E)))
By concyclic_definition_1 on E, H, A, C we get Circle(A, C, H) == Circle(A, E, H)
By altitude_definition on E, C, D, Line(E, F) we get Line(E, F) == altitude(E, C, D)
By anti_similar_triangle_basic_properties on A, C, D, G, C, D we get angle(A, C, D) == 0 - angle(G, C, D) mod 360, angle(C, D, A) == 0 - angle(C, D, G) mod 360, angle(D, A, C) == 0 - angle(D, G, C) mod 360, log(distance(A, C)) + log(distance(C, D)) == log(distance(C, G)) + log(distance(C, D)), log(distance(C, D)) + log(distance(A, D)) == log(distance(C, D)) + log(distance(D, G)), log(distance(A, D)) + log(distance(C, G)) == log(distance(D, G)) + log(distance(A, C))
By altitude_definition on C, A, G, Line(C, D) we get Line(C, D) == altitude(C, A, G)
By concyclic_definition_1 on C, A, E, H we get Circle(A, C, E) == Circle(A, E, H)
By concyclic_definition_1 on H, C, E, A we get Circle(A, C, E) == Circle(C, E, H)
By concyclic_definition_1 on H, F, G, C we get Circle(C, F, G) == Circle(F, G, H)
By concyclic_definition_1 on C, H, E, A we get Circle(A, E, H) == Circle(C, E, H)
By isosceles_triangle_altitude_v3 on center(Circle(C, D, E)), E, F we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, center(Circle(C, D, E)), F), perpendicular_line(center(Circle(C, D, E)), Line(E, F)))
By concyclic_definition_1 on D, G, B, A we get Circle(A, B, G) == Circle(B, D, G)
By sas_anti_congruence on E, center(Circle(C, D, E)), F, F, center(Circle(C, D, E)), E we get anti_congruent_triangles(E, F, center(Circle(C, D, E)), F, E, center(Circle(C, D, E)))
By concyclic_definition_1 on D, G, A, B we get Circle(A, B, G) == Circle(A, D, G)
By isosceles_triangle_altitude_v3 on center(Circle(C, D, E)), F, E we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, center(Circle(C, D, E)), F), perpendicular_line(center(Circle(C, D, E)), Line(E, F)))
By concyclic_definition_1 on A, H, C, E we get Circle(A, C, H) == Circle(C, E, H)
By sas_anti_congruence on C, center(Circle(C, D, E)), E, E, center(Circle(C, D, E)), C we get anti_congruent_triangles(C, E, center(Circle(C, D, E)), E, C, center(Circle(C, D, E)))
By isosceles_triangle_properties on center(Circle(C, D, E)), F, C we get distance(C, center(Circle(C, D, E))) == distance(F, center(Circle(C, D, E))), angle(F, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), F, C) mod 360
By collinear_definition on midpoint(E, F), F, E we get F in Line(E, midpoint(E, F)), E in Line(F, midpoint(E, F)), Line(E, midpoint(E, F)) == Line(F, midpoint(E, F)), 0 == 2 * angle(F, midpoint(E, F), E) mod 360
By isosceles_triangle_altitude_v3 on H, E, F we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, H, F), perpendicular_line(H, Line(E, F)))
By isosceles_triangle_properties on center(Circle(C, D, E)), D, F we get distance(D, center(Circle(C, D, E))) == distance(F, center(Circle(C, D, E))), angle(D, F, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), D, F) mod 360
By sas_anti_congruence on F, center(Circle(C, D, E)), E, E, center(Circle(C, D, E)), F we get anti_congruent_triangles(E, F, center(Circle(C, D, E)), F, E, center(Circle(C, D, E)))
By sas_anti_congruence on D, center(Circle(C, D, E)), E, E, center(Circle(C, D, E)), D we get anti_congruent_triangles(D, E, center(Circle(C, D, E)), E, D, center(Circle(C, D, E)))
By isosceles_triangle_properties on center(Circle(C, D, E)), E, F we get distance(E, center(Circle(C, D, E))) == distance(F, center(Circle(C, D, E))), angle(E, F, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), E, F) mod 360
By altitude_definition on G, D, C, Line(A, G) we get Line(A, G) == altitude(G, C, D)
By isosceles_triangle_properties on center(Circle(C, D, E)), F, E we get distance(E, center(Circle(C, D, E))) == distance(F, center(Circle(C, D, E))), angle(F, E, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), F, E) mod 360
By sas_anti_congruence on F, center(Circle(C, D, E)), C, C, center(Circle(C, D, E)), F we get anti_congruent_triangles(C, F, center(Circle(C, D, E)), F, C, center(Circle(C, D, E)))
By concyclic_definition_1 on G, H, F, C we get Circle(C, F, H) == Circle(F, G, H)
By sas_anti_congruence on E, center(Circle(C, D, E)), D, D, center(Circle(C, D, E)), E we get anti_congruent_triangles(D, E, center(Circle(C, D, E)), E, D, center(Circle(C, D, E)))
By isosceles_triangle_properties on center(Circle(C, D, E)), F, D we get distance(D, center(Circle(C, D, E))) == distance(F, center(Circle(C, D, E))), angle(F, D, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), F, D) mod 360
By sas_anti_congruence on C, center(Circle(C, D, E)), F, F, center(Circle(C, D, E)), C we get anti_congruent_triangles(C, F, center(Circle(C, D, E)), F, C, center(Circle(C, D, E)))
By isosceles_triangle_properties on center(Circle(C, D, E)), C, E we get distance(C, center(Circle(C, D, E))) == distance(E, center(Circle(C, D, E))), angle(C, E, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, E) mod 360
By isosceles_triangle_properties on center(Circle(C, D, E)), E, C we get distance(C, center(Circle(C, D, E))) == distance(E, center(Circle(C, D, E))), angle(E, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), E, C) mod 360
By altitude_definition on D, A, G, Line(C, D) we get Line(C, D) == altitude(D, A, G)
By sas_anti_congruence on F, center(Circle(C, D, E)), D, D, center(Circle(C, D, E)), F we get anti_congruent_triangles(D, F, center(Circle(C, D, E)), F, D, center(Circle(C, D, E)))
By isosceles_triangle_properties on center(Circle(C, D, E)), E, D we get distance(D, center(Circle(C, D, E))) == distance(E, center(Circle(C, D, E))), angle(E, D, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), E, D) mod 360
By isosceles_triangle_properties on center(Circle(C, D, E)), C, F we get distance(C, center(Circle(C, D, E))) == distance(F, center(Circle(C, D, E))), angle(C, F, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, F) mod 360
By isosceles_triangle_altitude_v3 on H, F, E we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, H, F), perpendicular_line(H, Line(E, F)))
By sas_anti_congruence on F, center(Circle(C, D, E)), D, E, center(Circle(C, D, E)), D we get anti_congruent_triangles(D, E, center(Circle(C, D, E)), D, F, center(Circle(C, D, E)))
By sas_congruence on C, center(Circle(C, D, E)), F, E, center(Circle(C, D, E)), C we get congruent_triangles(C, E, center(Circle(C, D, E)), F, C, center(Circle(C, D, E)))
By perpendicular_bisector_sufficient_conditions on A, G, H, C we get Line(C, H) == perpendicular_bisector(A, G)
By sas_anti_congruence on C, center(Circle(C, D, E)), E, C, center(Circle(C, D, E)), F we get anti_congruent_triangles(C, E, center(Circle(C, D, E)), C, F, center(Circle(C, D, E)))
By sas_congruence on D, center(Circle(C, D, E)), E, F, center(Circle(C, D, E)), D we get congruent_triangles(D, E, center(Circle(C, D, E)), F, D, center(Circle(C, D, E)))
By sas_congruence on C, center(Circle(C, D, E)), E, F, center(Circle(C, D, E)), C we get congruent_triangles(C, E, center(Circle(C, D, E)), F, C, center(Circle(C, D, E)))
By sas_congruence on F, center(Circle(C, D, E)), C, C, center(Circle(C, D, E)), E we get congruent_triangles(C, E, center(Circle(C, D, E)), F, C, center(Circle(C, D, E)))
By sas_congruence on D, center(Circle(C, D, E)), F, E, center(Circle(C, D, E)), D we get congruent_triangles(D, E, center(Circle(C, D, E)), F, D, center(Circle(C, D, E)))
By sas_anti_congruence on D, center(Circle(C, D, E)), E, D, center(Circle(C, D, E)), F we get anti_congruent_triangles(D, E, center(Circle(C, D, E)), D, F, center(Circle(C, D, E)))
By sas_congruence on E, center(Circle(C, D, E)), D, D, center(Circle(C, D, E)), F we get congruent_triangles(D, E, center(Circle(C, D, E)), F, D, center(Circle(C, D, E)))
By sas_anti_congruence on E, center(Circle(C, D, E)), C, F, center(Circle(C, D, E)), C we get anti_congruent_triangles(C, E, center(Circle(C, D, E)), C, F, center(Circle(C, D, E)))
By sas_anti_congruence on C, center(Circle(C, D, E)), F, C, center(Circle(C, D, E)), E we get anti_congruent_triangles(C, E, center(Circle(C, D, E)), C, F, center(Circle(C, D, E)))
By sas_anti_congruence on F, center(Circle(C, D, E)), C, E, center(Circle(C, D, E)), C we get anti_congruent_triangles(C, E, center(Circle(C, D, E)), C, F, center(Circle(C, D, E)))
By sas_congruence on E, center(Circle(C, D, E)), C, C, center(Circle(C, D, E)), F we get congruent_triangles(C, E, center(Circle(C, D, E)), F, C, center(Circle(C, D, E)))
By sas_anti_congruence on E, center(Circle(C, D, E)), D, F, center(Circle(C, D, E)), D we get anti_congruent_triangles(D, E, center(Circle(C, D, E)), D, F, center(Circle(C, D, E)))
By sas_congruence on F, center(Circle(C, D, E)), D, D, center(Circle(C, D, E)), E we get congruent_triangles(D, E, center(Circle(C, D, E)), F, D, center(Circle(C, D, E)))
By sas_anti_congruence on D, center(Circle(C, D, E)), F, D, center(Circle(C, D, E)), E we get anti_congruent_triangles(D, E, center(Circle(C, D, E)), D, F, center(Circle(C, D, E)))
By isosceles_trapezoid_perpendicular_bisector on E, F, A, G we get perpendicular_bisector(A, G) == perpendicular_bisector(E, F)
By power_of_a_point_definition on midpoint(E, F), F, E, c we get log(power_of_a_point(midpoint(E, F), c)) == log(distance(F, midpoint(E, F))) + log(distance(E, midpoint(E, F)))
By isosceles_triangle_altitude_v2 on C, A, G we get identical(perpendicular_bisector(A, G), internal_angle_bisector(A, C, G), perpendicular_line(C, Line(A, G)))
By between_implies_angles on F, midpoint(E, F), E we get 180 == angle(F, midpoint(E, F), E) mod 360, 0 == angle(midpoint(E, F), E, F) mod 360, 0 == angle(E, F, midpoint(E, F)) mod 360
By power_of_a_point_definition on midpoint(E, F), E, F, Circle(C, D, E) we get log(power_of_a_point(midpoint(E, F), Circle(C, D, E))) == log(distance(E, midpoint(E, F))) + log(distance(F, midpoint(E, F)))
By between_implies_angles on E, midpoint(E, F), F we get 180 == angle(E, midpoint(E, F), F) mod 360, 0 == angle(midpoint(E, F), F, E) mod 360, 0 == angle(F, E, midpoint(E, F)) mod 360
By isosceles_triangle_altitude_v2 on C, G, A we get identical(perpendicular_bisector(A, G), internal_angle_bisector(A, C, G), perpendicular_line(C, Line(A, G)))
By concurrent_sufficient_conditions on f, Line(A, E), Line(E, center(Circle(C, D, E))) we get concurrent(f, Line(A, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(D, G), f we get concurrent(f, Line(D, G), Line(F, G))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, F), Line(E, H) we get concurrent(Line(E, F), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, H), Line(G, center(d)), Line(D, G) we get concurrent(Line(D, G), Line(G, H), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(D, F), Line(F, I), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(D, F), Line(F, I), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(D, E), Line(E, H) we get concurrent(Line(D, E), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, H), g we get concurrent(g, Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(D, E), Line(D, G) we get concurrent(Line(D, E), Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, J), Line(E, F) we get concurrent(Line(E, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(G, H), Line(C, D) we get concurrent(Line(C, D), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(A, E), Line(E, F), Line(E, center(Circle(C, D, E))) we get concurrent(Line(A, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(d)), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(F, H), Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, J), Line(D, F) we get concurrent(Line(D, F), Line(F, J), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, F), Line(A, E) we get concurrent(Line(A, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(Circle(C, D, E))), g we get concurrent(g, Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(Circle(C, D, E))), Line(F, center(d)) we get concurrent(Line(F, G), Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, F), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(D, F), Line(F, J) we get concurrent(Line(D, F), Line(F, J), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, center(d)), radical_axis(d, Circle(C, D, E)), Line(E, F) we get concurrent(Line(E, F), Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))), Line(C, D) we get concurrent(Line(C, D), Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, J), Line(F, G) we get concurrent(Line(F, G), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(C, D, E))), Line(D, F) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(C, D), Line(E, H) we get concurrent(Line(C, D), Line(E, H), Line(F, H))
By median_definition on H, E, F, Line(C, D) we get Line(C, D) == median(H, E, F)
By line_definition on H, line_intersection(Line(A, G), Line(C, D)), Line(C, D) we get Line(C, D) == Line(H, line_intersection(Line(A, G), Line(C, D)))
By concurrent_sufficient_conditions on g, radical_axis(d, Circle(C, D, E)), Line(F, H) we get concurrent(g, Line(F, H), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, F), radical_axis(d, Circle(C, D, E)), Line(F, J) we get concurrent(Line(D, F), Line(F, J), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(A, E), Line(E, center(Circle(C, D, E))), Line(E, H) we get concurrent(Line(A, E), Line(E, H), Line(E, center(Circle(C, D, E))))
By line_definition on D, H, Line(C, D) we get Line(C, D) == Line(D, H)
By concurrent_sufficient_conditions on Line(F, G), Line(D, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, G), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, G), Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), radical_axis(d, Circle(C, D, E)), Line(E, F) we get concurrent(Line(E, F), Line(F, G), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(Circle(C, D, E))), Line(F, H) we get concurrent(Line(F, G), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), radical_axis(d, Circle(C, D, E)), Line(E, F) we get concurrent(Line(E, F), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(D, F), Line(F, center(d)) we get concurrent(Line(D, F), Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, radical_axis(d, Circle(C, D, E)), Line(E, F) we get concurrent(g, Line(E, F), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(C, D), Line(G, H), Line(E, H) we get concurrent(Line(C, D), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, J), Line(F, G), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(F, G), Line(F, J), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(C, D), Line(E, H), Line(F, H) we get concurrent(Line(C, D), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, J), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(F, J), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, G), Line(G, H), f we get concurrent(f, Line(D, G), Line(G, H))
By concurrent_sufficient_conditions on f, Line(E, center(Circle(C, D, E))), Line(E, F) we get concurrent(f, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, F), f we get concurrent(f, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, G), Line(F, G), Line(G, center(d)) we get concurrent(Line(D, G), Line(F, G), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, center(Circle(C, D, E))), Line(F, G) we get concurrent(Line(F, G), Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(D, G), Line(A, G) we get concurrent(Line(A, G), Line(D, G), Line(F, G))
By concurrent_sufficient_conditions on Line(C, D), Line(A, H), Line(G, H) we get concurrent(Line(A, H), Line(C, D), Line(G, H))
By concurrent_sufficient_conditions on g, radical_axis(d, Circle(C, D, E)), Line(F, G) we get concurrent(g, Line(F, G), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on g, Line(D, F), radical_axis(d, Circle(C, D, E)) we get concurrent(g, Line(D, F), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, E), Line(D, G), i we get concurrent(i, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(D, G), Line(D, E), h we get concurrent(h, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(A, G), Line(D, G), Line(G, H) we get concurrent(Line(A, G), Line(D, G), Line(G, H))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, H), Line(F, center(d)) we get concurrent(Line(F, H), Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(Circle(C, D, E))), g we get concurrent(g, Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, D), Line(D, G), Line(D, F) we get concurrent(Line(C, D), Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(A, G), Line(D, G), Line(F, G) we get concurrent(Line(A, G), Line(D, G), Line(F, G))
By concurrent_sufficient_conditions on Line(F, I), g, radical_axis(d, Circle(C, D, E)) we get concurrent(g, Line(F, I), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, I), Line(F, J) we get concurrent(Line(F, I), Line(F, J), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, H), Line(F, center(d)) we get concurrent(Line(F, H), Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, I), Line(E, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(D, F), Line(F, H) we get concurrent(Line(D, F), Line(F, H), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, H), Line(D, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(A, E), Line(E, center(Circle(C, D, E))) we get concurrent(Line(A, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, H), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(F, H), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, center(d)), Line(F, G) we get concurrent(Line(F, G), Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By line_definition on center(Circle(C, D, E)), line_intersection(Line(A, G), Line(C, D)), Line(C, D) we get Line(C, D) == Line(center(Circle(C, D, E)), line_intersection(Line(A, G), Line(C, D)))
By concurrent_sufficient_conditions on g, Line(F, center(Circle(C, D, E))), Line(D, F) we get concurrent(g, Line(D, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, H), Line(D, E) we get concurrent(Line(D, E), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, J), Line(E, F), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(E, F), Line(F, J), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, I), Line(D, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), g, radical_axis(d, Circle(C, D, E)) we get concurrent(g, Line(F, H), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(G, H), Line(D, G), Line(G, J) we get concurrent(Line(D, G), Line(G, H), Line(G, J))
By concurrent_sufficient_conditions on g, Line(F, center(Circle(C, D, E))), Line(F, I) we get concurrent(g, Line(F, I), Line(F, center(Circle(C, D, E))))
By median_definition on center(Circle(C, D, E)), F, E, Line(C, D) we get Line(C, D) == median(center(Circle(C, D, E)), E, F)
By concurrent_sufficient_conditions on Line(G, H), Line(G, J), Line(D, G) we get concurrent(Line(D, G), Line(G, H), Line(G, J))
By concurrent_sufficient_conditions on Line(G, center(d)), Line(D, G), Line(G, J) we get concurrent(Line(D, G), Line(G, J), Line(G, center(d)))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, I), Line(E, F) we get concurrent(Line(E, F), Line(F, I), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, F), Line(F, H), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(D, F), Line(F, H), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))), Line(F, H) we get concurrent(Line(F, H), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, I), Line(D, F) we get concurrent(Line(D, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(F, G), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, G), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(A, H), Line(C, D) we get concurrent(Line(A, H), Line(C, D), Line(E, H))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(D, E), f we get concurrent(f, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, G), h we get concurrent(h, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), f, Line(E, F) we get concurrent(f, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(D, F), Line(F, center(Circle(C, D, E))) we get concurrent(g, Line(D, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(F, G), Line(F, center(Circle(C, D, E))) we get concurrent(g, Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, I), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), radical_axis(d, Circle(C, D, E)), Line(F, G) we get concurrent(Line(F, G), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, J), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, J), Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, H), f, Line(D, G) we get concurrent(f, Line(D, G), Line(G, H))
By line_definition on C, midpoint(A, G), Line(C, D) we get Line(C, D) == Line(C, midpoint(A, G))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, J), g we get concurrent(g, Line(F, J), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, I), Line(F, H), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, H), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(D, F), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(D, F), Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, G), Line(F, H) we get concurrent(Line(F, G), Line(F, H), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(E, F), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, J), radical_axis(d, Circle(C, D, E)), Line(F, H) we get concurrent(Line(F, H), Line(F, J), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(Circle(C, D, E))), Line(F, center(d)) we get concurrent(Line(F, J), Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(d)), Line(D, G), Line(A, G) we get concurrent(Line(A, G), Line(D, G), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, G), Line(F, J) we get concurrent(Line(F, G), Line(F, J), Line(F, center(Circle(C, D, E))))
By line_definition on line_intersection(Line(A, G), Line(C, D)), D, Line(C, D) we get Line(C, D) == Line(D, line_intersection(Line(A, G), Line(C, D)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, I), g we get concurrent(g, Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(d)), radical_axis(d, Circle(C, D, E)), g we get concurrent(g, Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), g, Line(E, F) we get concurrent(g, Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(E, center(Circle(C, D, E))), Line(A, E) we get concurrent(Line(A, E), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), g, radical_axis(d, Circle(C, D, E)) we get concurrent(g, Line(E, F), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, G), h, Line(D, F) we get concurrent(h, Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, H), Line(D, F) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(C, D, E))), Line(E, H) we get concurrent(Line(E, F), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, G), Line(A, G), f we get concurrent(f, Line(A, G), Line(D, G))
By concurrent_sufficient_conditions on Line(G, H), Line(F, G), Line(D, G) we get concurrent(Line(D, G), Line(F, G), Line(G, H))
By line_definition on midpoint(A, G), midpoint(E, F), Line(C, D) we get Line(C, D) == Line(midpoint(A, G), midpoint(E, F))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(d)), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, J), Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), g, Line(F, I) we get concurrent(g, Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), h, Line(D, G) we get concurrent(h, Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(E, F), Line(F, H), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, J), Line(F, H), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, H), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(Circle(C, D, E))), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(F, I), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, G), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(F, G), Line(F, H), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on i, Line(D, G), h we get concurrent(h, i, Line(D, G))
By concurrent_sufficient_conditions on Line(F, center(d)), radical_axis(d, Circle(C, D, E)), Line(D, F) we get concurrent(Line(D, F), Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By line_definition on line_intersection(Line(A, G), Line(C, D)), C, Line(C, D) we get Line(C, D) == Line(C, line_intersection(Line(A, G), Line(C, D)))
By concurrent_sufficient_conditions on Line(D, F), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, G), Line(C, D), i we get concurrent(i, Line(C, D), Line(D, G))
By concurrent_sufficient_conditions on Line(D, G), Line(D, F), Line(D, E) we get concurrent(Line(D, E), Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(C, D, E))), f we get concurrent(f, Line(E, F), Line(E, center(Circle(C, D, E))))
By line_definition on midpoint(E, F), H, Line(C, D) we get Line(C, D) == Line(H, midpoint(E, F))
By concurrent_sufficient_conditions on Line(D, F), radical_axis(d, Circle(C, D, E)), Line(F, I) we get concurrent(Line(D, F), Line(F, I), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, E), f, Line(E, center(Circle(C, D, E))) we get concurrent(f, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, G), Line(G, center(d)), Line(F, G) we get concurrent(Line(D, G), Line(F, G), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, center(d)), Line(F, H) we get concurrent(Line(F, H), Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, G), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(F, G), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), radical_axis(d, Circle(C, D, E)), Line(F, H) we get concurrent(Line(F, H), Line(F, I), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, I), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(F, I), Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), radical_axis(d, Circle(C, D, E)), g we get concurrent(g, radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(D, G), Line(D, E) we get concurrent(h, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(D, F), Line(F, I), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(Circle(C, D, E))), Line(D, F) we get concurrent(Line(D, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(F, center(Circle(C, D, E))), Line(F, J) we get concurrent(g, Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, H), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(C, D, E))), Line(F, center(d)) we get concurrent(Line(F, H), Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, G), Line(F, G), f we get concurrent(f, Line(D, G), Line(F, G))
By concurrent_sufficient_conditions on Line(F, H), Line(F, I), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(F, H), Line(F, I), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(A, G), Line(F, G), Line(D, G) we get concurrent(Line(A, G), Line(D, G), Line(F, G))
By line_definition on H, midpoint(A, G), Line(C, D) we get Line(C, D) == Line(H, midpoint(A, G))
By concurrent_sufficient_conditions on Line(E, F), Line(F, H), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(E, F), Line(F, H), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(C, D), Line(D, G), h we get concurrent(h, Line(C, D), Line(D, G))
By concurrent_sufficient_conditions on Line(F, G), radical_axis(d, Circle(C, D, E)), Line(F, J) we get concurrent(Line(F, G), Line(F, J), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(A, E), Line(D, E) we get concurrent(Line(A, E), Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, H), Line(F, G) we get concurrent(Line(F, G), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, I), g we get concurrent(g, Line(F, I), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(E, F), Line(F, J) we get concurrent(Line(E, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(d)), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, G), Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), radical_axis(d, Circle(C, D, E)), Line(F, center(d)) we get concurrent(Line(D, F), Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, I), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(E, F), Line(F, I), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), g, Line(F, center(d)) we get concurrent(g, Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, J), Line(F, center(d)) we get concurrent(Line(F, J), Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(E, center(Circle(C, D, E))), Line(D, E) we get concurrent(f, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, G), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(D, F), Line(F, G), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, H), Line(C, D), Line(A, H) we get concurrent(Line(A, H), Line(C, D), Line(F, H))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, center(d)), Line(F, I) we get concurrent(Line(F, I), Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, J), g, Line(F, center(Circle(C, D, E))) we get concurrent(g, Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, I), Line(F, H) we get concurrent(Line(F, H), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, radical_axis(d, Circle(C, D, E)), Line(F, I) we get concurrent(g, Line(F, I), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(E, center(Circle(C, D, E))), Line(E, H) we get concurrent(f, Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, G), Line(G, J), f we get concurrent(f, Line(D, G), Line(G, J))
By concurrent_sufficient_conditions on Line(F, G), radical_axis(d, Circle(C, D, E)), Line(F, I) we get concurrent(Line(F, G), Line(F, I), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(G, H), Line(A, G), Line(D, G) we get concurrent(Line(A, G), Line(D, G), Line(G, H))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(D, F), Line(E, F) we get concurrent(Line(D, F), Line(E, F), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, center(Circle(C, D, E))), Line(F, I) we get concurrent(Line(F, I), Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), radical_axis(d, Circle(C, D, E)), Line(F, center(d)) we get concurrent(Line(E, F), Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(G, J), Line(D, G), Line(A, G) we get concurrent(Line(A, G), Line(D, G), Line(G, J))
By concurrent_sufficient_conditions on f, Line(A, G), Line(D, G) we get concurrent(f, Line(A, G), Line(D, G))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, H), Line(F, I) we get concurrent(Line(F, H), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(D, F), Line(F, I) we get concurrent(Line(D, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(A, G), Line(D, G) we get concurrent(Line(A, G), Line(D, G), Line(F, G))
By concurrent_sufficient_conditions on i, Line(D, E), Line(D, G) we get concurrent(i, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(F, G), Line(E, F), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(E, F), Line(F, G), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(Circle(C, D, E))), Line(D, F) we get concurrent(Line(D, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By line_definition on line_intersection(Line(A, G), Line(C, D)), A, Line(A, G) we get Line(A, G) == Line(A, line_intersection(Line(A, G), Line(C, D)))
By concurrent_sufficient_conditions on Line(D, F), radical_axis(d, Circle(C, D, E)), Line(F, G) we get concurrent(Line(D, F), Line(F, G), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, center(d)), Line(F, J) we get concurrent(Line(F, J), Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, J), g we get concurrent(g, Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(D, G), Line(D, E) we get concurrent(i, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(E, F), Line(F, G), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(E, F), Line(F, G), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(C, D, E))), g we get concurrent(g, Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, center(Circle(C, D, E))), Line(D, F) we get concurrent(Line(D, F), Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(D, E), Line(A, E) we get concurrent(Line(A, E), Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(E, F), Line(D, F) we get concurrent(Line(D, F), Line(E, F), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, I), radical_axis(d, Circle(C, D, E)), Line(F, G) we get concurrent(Line(F, G), Line(F, I), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, I), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, I), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By line_definition on line_intersection(Line(A, G), Line(C, D)), G, Line(A, G) we get Line(A, G) == Line(G, line_intersection(Line(A, G), Line(C, D)))
By concurrent_sufficient_conditions on Line(C, D), Line(D, G), Line(D, E) we get concurrent(Line(C, D), Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(A, E), f, Line(E, center(Circle(C, D, E))) we get concurrent(f, Line(A, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), radical_axis(d, Circle(C, D, E)), Line(F, H) we get concurrent(Line(F, H), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, G), Line(G, center(d)), Line(G, J) we get concurrent(Line(D, G), Line(G, J), Line(G, center(d)))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, H), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, H), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, I), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, I), Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, G), Line(G, J), Line(A, G) we get concurrent(Line(A, G), Line(D, G), Line(G, J))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(C, D, E))), Line(F, J) we get concurrent(Line(D, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(D, F), Line(F, center(d)) we get concurrent(Line(D, F), Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, G), f, Line(A, G) we get concurrent(f, Line(A, G), Line(D, G))
By concurrent_sufficient_conditions on Line(F, H), radical_axis(d, Circle(C, D, E)), Line(F, G) we get concurrent(Line(F, G), Line(F, H), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(C, D), Line(F, center(Circle(C, D, E))) we get concurrent(Line(C, D), Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By line_definition on center(Circle(C, D, E)), H, Line(C, D) we get Line(C, D) == Line(H, center(Circle(C, D, E)))
By concurrent_sufficient_conditions on g, radical_axis(d, Circle(C, D, E)), Line(F, center(d)) we get concurrent(g, Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, center(d)), Line(F, I) we get concurrent(Line(F, I), Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, I), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, G), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(D, G), Line(A, G) we get concurrent(f, Line(A, G), Line(D, G))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), f, Line(E, H) we get concurrent(f, Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(E, F), Line(F, H) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(d)), Line(D, G), f we get concurrent(f, Line(D, G), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(F, J), radical_axis(d, Circle(C, D, E)), Line(F, I) we get concurrent(Line(F, I), Line(F, J), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, G), Line(A, G), Line(G, center(d)) we get concurrent(Line(A, G), Line(D, G), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, center(Circle(C, D, E))), g we get concurrent(g, Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(Circle(C, D, E))), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(F, J), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(C, D), Line(D, G) we get concurrent(Line(C, D), Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(C, D, E))), Line(F, J) we get concurrent(Line(F, H), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, G), Line(D, E), Line(C, D) we get concurrent(Line(C, D), Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, J), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(F, J), Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(C, D, E))), Line(F, H) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, D), Line(G, H), Line(A, H) we get concurrent(Line(A, H), Line(C, D), Line(G, H))
By concurrent_sufficient_conditions on Line(E, H), Line(G, H), Line(C, D) we get concurrent(Line(C, D), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(D, G), Line(A, G), Line(F, G) we get concurrent(Line(A, G), Line(D, G), Line(F, G))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, H), Line(F, J) we get concurrent(Line(F, H), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(F, G), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(F, G), Line(F, I), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, center(d)), radical_axis(d, Circle(C, D, E)), Line(F, G) we get concurrent(Line(F, G), Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(D, F), g we get concurrent(g, Line(D, F), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, center(d)), g, radical_axis(d, Circle(C, D, E)) we get concurrent(g, Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(A, E), Line(E, H) we get concurrent(Line(A, E), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, i, Line(D, G) we get concurrent(h, i, Line(D, G))
By concurrent_sufficient_conditions on Line(D, G), h, Line(D, E) we get concurrent(h, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on i, h, Line(D, G) we get concurrent(h, i, Line(D, G))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(C, D, E))), g we get concurrent(g, Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, H), Line(A, E) we get concurrent(Line(A, E), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, G), Line(D, G), Line(G, center(d)) we get concurrent(Line(A, G), Line(D, G), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(G, J), Line(D, G), f we get concurrent(f, Line(D, G), Line(G, J))
By line_definition on center(Circle(C, D, E)), midpoint(A, G), Line(C, D) we get Line(C, D) == Line(midpoint(A, G), center(Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(C, D, E))), Line(F, center(d)) we get concurrent(Line(D, F), Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, G), i, Line(C, D) we get concurrent(i, Line(C, D), Line(D, G))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, G), Line(D, F) we get concurrent(Line(D, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, G), Line(G, H), Line(F, G) we get concurrent(Line(D, G), Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, center(d)), Line(F, H) we get concurrent(Line(F, H), Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, H), Line(E, F) we get concurrent(Line(E, F), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(D, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, I), Line(F, center(d)) we get concurrent(Line(F, I), Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(D, G), Line(G, J) we get concurrent(f, Line(D, G), Line(G, J))
By concurrent_sufficient_conditions on Line(E, H), Line(E, F), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), g, Line(F, center(Circle(C, D, E))) we get concurrent(g, radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(E, F), Line(F, I) we get concurrent(Line(E, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, G), i, Line(D, F) we get concurrent(i, Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, G), Line(E, F) we get concurrent(Line(E, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, J), Line(F, H), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(F, H), Line(F, J), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(D, E), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, H), Line(F, G) we get concurrent(Line(F, G), Line(F, H), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(C, D, E))), Line(F, J) we get concurrent(Line(E, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(d)), radical_axis(d, Circle(C, D, E)), Line(F, I) we get concurrent(Line(F, I), Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, center(d)), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, center(d)), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, G), Line(G, center(d)), f we get concurrent(f, Line(D, G), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(d)), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(D, F), Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), g, Line(F, J) we get concurrent(g, Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(D, F), Line(F, H) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, J), Line(A, G), Line(D, G) we get concurrent(Line(A, G), Line(D, G), Line(G, J))
By concurrent_sufficient_conditions on Line(F, H), Line(F, J), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, H), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, H), Line(E, H), Line(C, D) we get concurrent(Line(A, H), Line(C, D), Line(E, H))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))), Line(F, center(d)) we get concurrent(Line(F, center(d)), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, J), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, J), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(E, center(Circle(C, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(E, H), Line(E, center(Circle(C, D, E))))
By line_definition on midpoint(E, F), line_intersection(Line(A, G), Line(C, D)), Line(C, D) we get Line(C, D) == Line(midpoint(E, F), line_intersection(Line(A, G), Line(C, D)))
By concurrent_sufficient_conditions on Line(E, H), Line(A, E), Line(E, center(Circle(C, D, E))) we get concurrent(Line(A, E), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, G), Line(F, I) we get concurrent(Line(F, G), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, H), Line(F, J) we get concurrent(Line(F, H), Line(F, J), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(d)), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(F, I), Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, F), g, radical_axis(d, Circle(C, D, E)) we get concurrent(g, Line(D, F), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, H), Line(C, D), Line(G, H) we get concurrent(Line(C, D), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, J), Line(F, I), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, I), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(E, F), g we get concurrent(g, Line(E, F), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, center(d)), radical_axis(d, Circle(C, D, E)), Line(F, J) we get concurrent(Line(F, J), Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, radical_axis(d, Circle(C, D, E)), Line(F, J) we get concurrent(g, Line(F, J), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on g, Line(F, center(d)), radical_axis(d, Circle(C, D, E)) we get concurrent(g, Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(G, J), Line(G, center(d)), Line(D, G) we get concurrent(Line(D, G), Line(G, J), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), g, Line(F, center(Circle(C, D, E))) we get concurrent(g, Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, E), Line(D, E), Line(E, center(Circle(C, D, E))) we get concurrent(Line(A, E), Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(F, center(Circle(C, D, E))), Line(F, H) we get concurrent(g, Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), radical_axis(d, Circle(C, D, E)), Line(D, F) we get concurrent(Line(D, F), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), radical_axis(d, Circle(C, D, E)), Line(E, F) we get concurrent(Line(E, F), Line(F, I), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, H), Line(E, H), Line(C, D) we get concurrent(Line(C, D), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(E, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, F), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), radical_axis(d, Circle(C, D, E)), Line(F, center(d)) we get concurrent(Line(F, I), Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, F), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, G), g we get concurrent(g, Line(F, G), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, G), f, Line(D, G) we get concurrent(f, Line(D, G), Line(F, G))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, center(d)), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, center(d)), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, D), Line(A, H), Line(F, H) we get concurrent(Line(A, H), Line(C, D), Line(F, H))
By concurrent_sufficient_conditions on Line(D, G), Line(C, D), h we get concurrent(h, Line(C, D), Line(D, G))
By concurrent_sufficient_conditions on Line(D, G), Line(G, H), Line(G, center(d)) we get concurrent(Line(D, G), Line(G, H), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(Circle(C, D, E))), Line(F, I) we get concurrent(Line(F, G), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(C, D, E))), Line(F, G) we get concurrent(Line(E, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, H), Line(C, D), Line(A, H) we get concurrent(Line(A, H), Line(C, D), Line(G, H))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, I), Line(F, J) we get concurrent(Line(F, I), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(D, F), Line(F, G) we get concurrent(Line(D, F), Line(F, G), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), g, radical_axis(d, Circle(C, D, E)) we get concurrent(g, radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, H), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, G), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, G), f, Line(G, J) we get concurrent(f, Line(D, G), Line(G, J))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(Circle(C, D, E))), Line(F, J) we get concurrent(Line(F, I), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), radical_axis(d, Circle(C, D, E)), Line(F, I) we get concurrent(Line(F, I), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(C, D, E))), Line(F, I) we get concurrent(Line(E, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(d)), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(F, G), Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(d)), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(E, center(Circle(C, D, E))), f we get concurrent(f, Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, D), h, Line(D, G) we get concurrent(h, Line(C, D), Line(D, G))
By concurrent_sufficient_conditions on Line(F, G), Line(D, G), Line(G, H) we get concurrent(Line(D, G), Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(C, D, E))), Line(E, H) we get concurrent(Line(D, E), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(D, F), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(D, F), Line(F, I), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, J), radical_axis(d, Circle(C, D, E)), Line(F, center(d)) we get concurrent(Line(F, J), Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, G), Line(A, G), Line(G, H) we get concurrent(Line(A, G), Line(D, G), Line(G, H))
By concurrent_sufficient_conditions on Line(D, G), f, Line(G, H) we get concurrent(f, Line(D, G), Line(G, H))
By concurrent_sufficient_conditions on f, Line(E, center(Circle(C, D, E))), Line(A, E) we get concurrent(f, Line(A, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, J), Line(F, G), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, G), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, H), Line(C, D), Line(E, H) we get concurrent(Line(C, D), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(C, D), Line(E, H), Line(G, H) we get concurrent(Line(C, D), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on Line(C, D), Line(F, H), Line(G, H) we get concurrent(Line(C, D), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(d)), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(F, J), Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, I), radical_axis(d, Circle(C, D, E)), g we get concurrent(g, Line(F, I), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(Circle(C, D, E))), Line(F, I) we get concurrent(Line(F, I), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, J), Line(F, I), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(F, I), Line(F, J), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, I), Line(F, H) we get concurrent(Line(F, H), Line(F, I), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on f, Line(E, H), Line(E, center(Circle(C, D, E))) we get concurrent(f, Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, G), f, Line(G, center(d)) we get concurrent(f, Line(D, G), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(D, E), Line(D, G), Line(C, D) we get concurrent(Line(C, D), Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(D, G), Line(F, G), Line(A, G) we get concurrent(Line(A, G), Line(D, G), Line(F, G))
By concurrent_sufficient_conditions on g, Line(F, center(Circle(C, D, E))), Line(F, G) we get concurrent(g, Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(D, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, E), Line(E, H), Line(E, center(Circle(C, D, E))) we get concurrent(Line(A, E), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, J), Line(D, F), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(D, F), Line(F, J), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(C, D, E))), g we get concurrent(g, Line(D, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, J), Line(D, F) we get concurrent(Line(D, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(Circle(C, D, E))), Line(F, center(d)) we get concurrent(Line(F, I), Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(D, G), Line(D, F) we get concurrent(i, Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(D, G), Line(G, H), Line(G, J) we get concurrent(Line(D, G), Line(G, H), Line(G, J))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, G), Line(D, F) we get concurrent(Line(D, F), Line(F, G), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(G, J), Line(D, G), Line(F, G) we get concurrent(Line(D, G), Line(F, G), Line(G, J))
By concurrent_sufficient_conditions on Line(F, J), g, radical_axis(d, Circle(C, D, E)) we get concurrent(g, Line(F, J), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(G, H), Line(C, D), Line(F, H) we get concurrent(Line(C, D), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(D, F), radical_axis(d, Circle(C, D, E)), Line(F, H) we get concurrent(Line(D, F), Line(F, H), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(C, D), Line(D, F), Line(D, G) we get concurrent(Line(C, D), Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(E, H), f, Line(E, center(Circle(C, D, E))) we get concurrent(f, Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(F, center(Circle(C, D, E))), Line(E, F) we get concurrent(g, Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(Circle(C, D, E))), Line(F, J) we get concurrent(Line(F, G), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(d)), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, H), Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, H), Line(C, D), Line(F, H) we get concurrent(Line(A, H), Line(C, D), Line(F, H))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(Circle(C, D, E))), Line(F, H) we get concurrent(Line(F, H), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(d)), Line(F, G), Line(D, G) we get concurrent(Line(D, G), Line(F, G), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, J), Line(F, I) we get concurrent(Line(F, I), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(C, D, E))), Line(F, I) we get concurrent(Line(D, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(E, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, G), Line(F, H) we get concurrent(Line(F, G), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, J), Line(E, F) we get concurrent(Line(E, F), Line(F, J), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on f, Line(G, J), Line(D, G) we get concurrent(f, Line(D, G), Line(G, J))
By concurrent_sufficient_conditions on Line(F, I), Line(E, F), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(E, F), Line(F, I), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on g, Line(F, I), radical_axis(d, Circle(C, D, E)) we get concurrent(g, Line(F, I), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, F), radical_axis(d, Circle(C, D, E)), g we get concurrent(g, Line(E, F), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(G, J), Line(D, G), Line(G, center(d)) we get concurrent(Line(D, G), Line(G, J), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(C, D), Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))) we get concurrent(Line(C, D), Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), radical_axis(d, Circle(C, D, E)), g we get concurrent(g, Line(D, F), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, center(Circle(C, D, E))), Line(F, J) we get concurrent(Line(F, J), Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, center(d)), Line(D, F) we get concurrent(Line(D, F), Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, H), Line(D, G), Line(G, center(d)) we get concurrent(Line(D, G), Line(G, H), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(C, D, E))), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, G), Line(D, G), f we get concurrent(f, Line(A, G), Line(D, G))
By concurrent_sufficient_conditions on Line(E, F), Line(F, J), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, J), Line(F, I) we get concurrent(Line(F, I), Line(F, J), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, G), Line(G, J), Line(F, G) we get concurrent(Line(D, G), Line(F, G), Line(G, J))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, J), Line(F, G), Line(D, G) we get concurrent(Line(D, G), Line(F, G), Line(G, J))
By concurrent_sufficient_conditions on Line(G, J), f, Line(D, G) we get concurrent(f, Line(D, G), Line(G, J))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), g, Line(D, F) we get concurrent(g, Line(D, F), Line(F, center(Circle(C, D, E))))
By line_definition on midpoint(A, G), D, Line(C, D) we get Line(C, D) == Line(D, midpoint(A, G))
By concurrent_sufficient_conditions on f, Line(G, center(d)), Line(D, G) we get concurrent(f, Line(D, G), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(C, D, E))), Line(A, E) we get concurrent(Line(A, E), Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, J), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(F, H), Line(F, J), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, J), Line(F, H) we get concurrent(Line(F, H), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(D, G), Line(F, G) we get concurrent(f, Line(D, G), Line(F, G))
By concurrent_sufficient_conditions on f, Line(E, F), Line(E, center(Circle(C, D, E))) we get concurrent(f, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, center(d)), Line(F, G) we get concurrent(Line(F, G), Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, F), Line(D, G), h we get concurrent(h, Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, I), Line(E, F) we get concurrent(Line(E, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(C, D), Line(A, H) we get concurrent(Line(A, H), Line(C, D), Line(E, H))
By concurrent_sufficient_conditions on Line(E, F), Line(F, J), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(E, F), Line(F, J), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, H), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, H), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(E, F), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(E, F), Line(F, H), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, G), h, Line(C, D) we get concurrent(h, Line(C, D), Line(D, G))
By concurrent_sufficient_conditions on Line(D, G), f, Line(F, G) we get concurrent(f, Line(D, G), Line(F, G))
By concurrent_sufficient_conditions on Line(F, J), radical_axis(d, Circle(C, D, E)), Line(E, F) we get concurrent(Line(E, F), Line(F, J), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(A, H), Line(G, H), Line(C, D) we get concurrent(Line(A, H), Line(C, D), Line(G, H))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, G), Line(F, I) we get concurrent(Line(F, G), Line(F, I), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, H), Line(E, F) we get concurrent(Line(E, F), Line(F, H), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), g, Line(F, G) we get concurrent(g, Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, G), Line(D, G), Line(G, J) we get concurrent(Line(A, G), Line(D, G), Line(G, J))
By concurrent_sufficient_conditions on h, Line(D, G), Line(D, F) we get concurrent(h, Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(F, H), g, Line(F, center(Circle(C, D, E))) we get concurrent(g, Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(E, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(G, H), Line(D, G) we get concurrent(f, Line(D, G), Line(G, H))
By concurrent_sufficient_conditions on g, Line(F, center(d)), Line(F, center(Circle(C, D, E))) we get concurrent(g, Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), g, Line(F, H) we get concurrent(g, Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(E, F), Line(F, G) we get concurrent(Line(E, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, D), Line(F, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))) we get concurrent(Line(C, D), Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(D, F), g we get concurrent(g, Line(D, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(D, F), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(D, F), Line(F, G), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, J), Line(D, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), g, Line(F, center(d)) we get concurrent(g, Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, G), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(F, G), Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, G), Line(G, J), Line(G, H) we get concurrent(Line(D, G), Line(G, H), Line(G, J))
By concurrent_sufficient_conditions on g, Line(E, F), radical_axis(d, Circle(C, D, E)) we get concurrent(g, Line(E, F), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(A, G), f, Line(D, G) we get concurrent(f, Line(A, G), Line(D, G))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), g, Line(E, F) we get concurrent(g, Line(E, F), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(G, center(d)), Line(G, H), Line(D, G) we get concurrent(Line(D, G), Line(G, H), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(Circle(C, D, E))), Line(D, F) we get concurrent(Line(D, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(D, G), Line(G, center(d)) we get concurrent(f, Line(D, G), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(D, E), Line(C, D), Line(D, G) we get concurrent(Line(C, D), Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(d)), radical_axis(d, Circle(C, D, E)), Line(F, H) we get concurrent(Line(F, H), Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, H), radical_axis(d, Circle(C, D, E)), Line(F, I) we get concurrent(Line(F, H), Line(F, I), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), radical_axis(d, Circle(C, D, E)), Line(F, center(d)) we get concurrent(Line(F, center(d)), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(F, H), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(F, H), Line(F, I), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(C, D, E))), Line(F, H) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(F, J), radical_axis(d, Circle(C, D, E)) we get concurrent(g, Line(F, J), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, G), Line(F, H), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(F, G), Line(F, H), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(C, D), Line(D, G), i we get concurrent(i, Line(C, D), Line(D, G))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(d)), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, I), Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), g, Line(F, I) we get concurrent(g, Line(F, I), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on g, Line(F, H), Line(F, center(Circle(C, D, E))) we get concurrent(g, Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, G), Line(G, H), Line(D, G) we get concurrent(Line(A, G), Line(D, G), Line(G, H))
By concurrent_sufficient_conditions on i, Line(D, G), Line(C, D) we get concurrent(i, Line(C, D), Line(D, G))
By concurrent_sufficient_conditions on g, radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))) we get concurrent(g, radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(D, G), Line(C, D) we get concurrent(Line(C, D), Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), radical_axis(d, Circle(C, D, E)), Line(F, J) we get concurrent(Line(F, J), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(E, F), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(E, F), Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, E), i, Line(D, G) we get concurrent(i, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(C, D), i, Line(D, G) we get concurrent(i, Line(C, D), Line(D, G))
By concurrent_sufficient_conditions on Line(G, H), Line(D, G), f we get concurrent(f, Line(D, G), Line(G, H))
By concurrent_sufficient_conditions on Line(D, F), i, Line(D, G) we get concurrent(i, Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, H), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, H), Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(E, H), f we get concurrent(f, Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), radical_axis(d, Circle(C, D, E)), Line(D, F) we get concurrent(Line(D, F), Line(F, I), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(A, E), Line(E, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(A, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, I), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(F, I), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, H), Line(C, D), Line(E, H) we get concurrent(Line(A, H), Line(C, D), Line(E, H))
By concurrent_sufficient_conditions on Line(D, F), Line(F, G), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(A, E), Line(E, F) we get concurrent(Line(A, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(G, H), Line(D, G) we get concurrent(Line(D, G), Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(C, D, E))), Line(F, G) we get concurrent(Line(D, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, J), Line(F, center(d)) we get concurrent(Line(F, J), Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, H), Line(F, G), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, G), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(Circle(C, D, E))), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(D, F), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(E, F), g we get concurrent(g, Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(C, D, E))), Line(D, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(D, F), Line(E, F), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, J), radical_axis(d, Circle(C, D, E)), g we get concurrent(g, Line(F, J), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on g, Line(F, I), Line(F, center(Circle(C, D, E))) we get concurrent(g, Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, G), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(D, F), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(D, F), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), g, Line(F, center(Circle(C, D, E))) we get concurrent(g, Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, H), Line(F, H), Line(C, D) we get concurrent(Line(C, D), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(D, G), i, Line(D, E) we get concurrent(i, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(Circle(C, D, E))), g we get concurrent(g, Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, J), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, G), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), Line(F, center(d)), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By line_definition on midpoint(E, F), center(Circle(C, D, E)), Line(C, D) we get Line(C, D) == Line(midpoint(E, F), center(Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, G), Line(F, center(Circle(C, D, E))), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(F, G), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on i, Line(D, F), Line(D, G) we get concurrent(i, Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, G), Line(F, center(d)) we get concurrent(Line(F, G), Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(G, center(d)), f, Line(D, G) we get concurrent(f, Line(D, G), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, H), Line(E, F) we get concurrent(Line(E, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, G), Line(G, center(d)), Line(G, H) we get concurrent(Line(D, G), Line(G, H), Line(G, center(d)))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), g, Line(F, J) we get concurrent(g, Line(F, J), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(A, G), Line(G, center(d)), Line(D, G) we get concurrent(Line(A, G), Line(D, G), Line(G, center(d)))
By concurrent_sufficient_conditions on g, radical_axis(d, Circle(C, D, E)), Line(D, F) we get concurrent(g, Line(D, F), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), f, Line(D, E) we get concurrent(f, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, center(d)), g we get concurrent(g, Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, H), Line(A, H), Line(C, D) we get concurrent(Line(A, H), Line(C, D), Line(G, H))
By concurrent_sufficient_conditions on Line(F, I), radical_axis(d, Circle(C, D, E)), Line(F, J) we get concurrent(Line(F, I), Line(F, J), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, center(d)), Line(F, J) we get concurrent(Line(F, J), Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(D, F), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(D, F), Line(F, H), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on h, Line(D, F), Line(D, G) we get concurrent(h, Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, H), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(F, H), Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), g, Line(F, G) we get concurrent(g, Line(F, G), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, F), radical_axis(d, Circle(C, D, E)), Line(E, F) we get concurrent(Line(D, F), Line(E, F), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, F), Line(D, G), Line(D, E) we get concurrent(Line(D, E), Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, J), Line(F, H) we get concurrent(Line(F, H), Line(F, J), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), f, Line(A, E) we get concurrent(f, Line(A, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), radical_axis(d, Circle(C, D, E)), Line(F, I) we get concurrent(Line(E, F), Line(F, I), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, H), Line(C, D), Line(F, H) we get concurrent(Line(C, D), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on f, Line(D, G), Line(G, H) we get concurrent(f, Line(D, G), Line(G, H))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), g, Line(D, F) we get concurrent(g, Line(D, F), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, F), Line(E, H), Line(E, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))), g we get concurrent(g, radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, I), Line(F, G) we get concurrent(Line(F, G), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(E, F), Line(F, center(d)) we get concurrent(Line(E, F), Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(C, D), Line(E, H), Line(A, H) we get concurrent(Line(A, H), Line(C, D), Line(E, H))
By concurrent_sufficient_conditions on Line(F, J), Line(E, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(C, D, E))), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(E, F), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(D, F), Line(D, G) we get concurrent(Line(D, E), Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, G), g we get concurrent(g, Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(F, G), Line(D, G) we get concurrent(f, Line(D, G), Line(F, G))
By concurrent_sufficient_conditions on Line(A, E), Line(E, center(Circle(C, D, E))), f we get concurrent(f, Line(A, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), radical_axis(d, Circle(C, D, E)), Line(D, F) we get concurrent(Line(D, F), Line(F, H), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, G), Line(D, G), Line(G, center(d)) we get concurrent(Line(D, G), Line(F, G), Line(G, center(d)))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, H), Line(F, I) we get concurrent(Line(F, H), Line(F, I), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))), Line(F, G) we get concurrent(Line(F, G), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, G), Line(D, E), Line(D, F) we get concurrent(Line(D, E), Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, I), Line(F, G) we get concurrent(Line(F, G), Line(F, I), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, F), Line(F, J), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(E, F), Line(F, J) we get concurrent(Line(E, F), Line(F, J), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, F), g, Line(F, center(Circle(C, D, E))) we get concurrent(g, Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, D), Line(F, H), Line(A, H) we get concurrent(Line(A, H), Line(C, D), Line(F, H))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, I), Line(D, F) we get concurrent(Line(D, F), Line(F, I), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on h, Line(D, G), i we get concurrent(h, i, Line(D, G))
By concurrent_sufficient_conditions on Line(G, J), Line(D, G), Line(G, H) we get concurrent(Line(D, G), Line(G, H), Line(G, J))
By concurrent_sufficient_conditions on Line(F, G), Line(F, I), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(F, G), Line(F, I), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))), Line(F, J) we get concurrent(Line(F, J), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, G), Line(D, F), i we get concurrent(i, Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(G, center(d)), Line(A, G), Line(D, G) we get concurrent(Line(A, G), Line(D, G), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(D, G), Line(G, center(d)), Line(A, G) we get concurrent(Line(A, G), Line(D, G), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(G, center(d)), Line(G, J), Line(D, G) we get concurrent(Line(D, G), Line(G, J), Line(G, center(d)))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(E, F), Line(F, G) we get concurrent(Line(E, F), Line(F, G), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(E, F), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, I), Line(F, center(d)) we get concurrent(Line(F, I), Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, G), radical_axis(d, Circle(C, D, E)), Line(F, H) we get concurrent(Line(F, G), Line(F, H), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, F), radical_axis(d, Circle(C, D, E)), Line(F, G) we get concurrent(Line(E, F), Line(F, G), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, G), Line(F, J) we get concurrent(Line(F, G), Line(F, J), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, G), radical_axis(d, Circle(C, D, E)), g we get concurrent(g, Line(F, G), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(D, F), Line(F, G) we get concurrent(Line(D, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, J), radical_axis(d, Circle(C, D, E)), Line(D, F) we get concurrent(Line(D, F), Line(F, J), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, F), Line(F, J), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(D, F), Line(F, J), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, F), Line(F, H), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, G), Line(G, J), Line(D, G) we get concurrent(Line(A, G), Line(D, G), Line(G, J))
By concurrent_sufficient_conditions on Line(G, H), Line(D, G), Line(A, G) we get concurrent(Line(A, G), Line(D, G), Line(G, H))
By concurrent_sufficient_conditions on Line(F, G), g, Line(F, center(Circle(C, D, E))) we get concurrent(g, Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, G), Line(F, G), Line(G, J) we get concurrent(Line(D, G), Line(F, G), Line(G, J))
By concurrent_sufficient_conditions on Line(F, J), radical_axis(d, Circle(C, D, E)), Line(F, G) we get concurrent(Line(F, G), Line(F, J), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, G), h, i we get concurrent(h, i, Line(D, G))
By concurrent_sufficient_conditions on Line(C, D), Line(G, H), Line(F, H) we get concurrent(Line(C, D), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), g, Line(F, H) we get concurrent(g, Line(F, H), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, F), radical_axis(d, Circle(C, D, E)), Line(F, J) we get concurrent(Line(E, F), Line(F, J), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, E), Line(A, E), Line(E, center(Circle(C, D, E))) we get concurrent(Line(A, E), Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, G), Line(D, E), i we get concurrent(i, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(G, H), Line(E, H), Line(C, D) we get concurrent(Line(C, D), Line(E, H), Line(G, H))
By concurrent_sufficient_conditions on g, Line(F, G), radical_axis(d, Circle(C, D, E)) we get concurrent(g, Line(F, G), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(D, F), Line(E, F) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(E, center(Circle(C, D, E))), Line(E, F) we get concurrent(Line(E, F), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on h, Line(C, D), Line(D, G) we get concurrent(h, Line(C, D), Line(D, G))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(E, F), Line(F, center(d)) we get concurrent(Line(E, F), Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(D, F), Line(E, F), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, H), Line(C, D), Line(G, H) we get concurrent(Line(C, D), Line(F, H), Line(G, H))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(Circle(C, D, E))), Line(F, G) we get concurrent(Line(F, G), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(E, F), Line(F, I) we get concurrent(Line(E, F), Line(F, I), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(C, D), Line(F, H), Line(E, H) we get concurrent(Line(C, D), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(D, E), Line(D, G), Line(D, F) we get concurrent(Line(D, E), Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on g, Line(F, J), Line(F, center(Circle(C, D, E))) we get concurrent(g, Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(C, D, E))), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(F, H), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, G), Line(C, D), Line(D, E) we get concurrent(Line(C, D), Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(F, G), radical_axis(d, Circle(C, D, E)), Line(D, F) we get concurrent(Line(D, F), Line(F, G), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(G, J), Line(G, H), Line(D, G) we get concurrent(Line(D, G), Line(G, H), Line(G, J))
By concurrent_sufficient_conditions on Line(D, G), Line(D, F), Line(C, D) we get concurrent(Line(C, D), Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(E, F), radical_axis(d, Circle(C, D, E)), Line(D, F) we get concurrent(Line(D, F), Line(E, F), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on g, Line(F, H), radical_axis(d, Circle(C, D, E)) we get concurrent(g, Line(F, H), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(A, E), Line(E, center(Circle(C, D, E))), Line(D, E) we get concurrent(Line(A, E), Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, center(d)), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(F, center(d)), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(D, G), Line(G, J) we get concurrent(Line(D, G), Line(F, G), Line(G, J))
By concurrent_sufficient_conditions on Line(E, F), Line(F, G), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(F, G), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(A, H), Line(C, D), Line(G, H) we get concurrent(Line(A, H), Line(C, D), Line(G, H))
By concurrent_sufficient_conditions on Line(F, G), Line(G, J), Line(D, G) we get concurrent(Line(D, G), Line(F, G), Line(G, J))
By concurrent_sufficient_conditions on Line(G, center(d)), Line(D, G), Line(F, G) we get concurrent(Line(D, G), Line(F, G), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(E, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, center(d)), Line(D, F) we get concurrent(Line(D, F), Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, I), Line(F, center(Circle(C, D, E))) we get concurrent(Line(E, F), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, H), Line(F, H), Line(C, D) we get concurrent(Line(C, D), Line(E, H), Line(F, H))
By concurrent_sufficient_conditions on Line(D, G), Line(C, D), Line(D, F) we get concurrent(Line(C, D), Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(d)), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(E, F), Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, G), Line(E, F) we get concurrent(Line(E, F), Line(F, G), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, J), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, J), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))), Line(D, F) we get concurrent(Line(D, F), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, F), g, Line(F, center(Circle(C, D, E))) we get concurrent(g, Line(D, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(C, D, E))), Line(F, G) we get concurrent(Line(F, G), Line(F, H), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, center(d)), Line(D, G), Line(G, H) we get concurrent(Line(D, G), Line(G, H), Line(G, center(d)))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), Line(F, center(Circle(C, D, E))) we get concurrent(Line(D, F), Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on f, Line(D, E), Line(E, center(Circle(C, D, E))) we get concurrent(f, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, D), Line(A, H), Line(E, H) we get concurrent(Line(A, H), Line(C, D), Line(E, H))
By concurrent_sufficient_conditions on Line(F, H), Line(A, H), Line(C, D) we get concurrent(Line(A, H), Line(C, D), Line(F, H))
By concurrent_sufficient_conditions on g, Line(F, center(Circle(C, D, E))), radical_axis(d, Circle(C, D, E)) we get concurrent(g, radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(E, center(Circle(C, D, E))), Line(C, D) we get concurrent(Line(C, D), Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), Line(F, I), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, H), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, G), Line(F, J), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(F, G), Line(F, J), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, F), radical_axis(d, Circle(C, D, E)), Line(F, H) we get concurrent(Line(E, F), Line(F, H), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(C, D), Line(E, center(Circle(C, D, E))) we get concurrent(Line(C, D), Line(E, center(Circle(C, D, E))), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, center(Circle(C, D, E))), Line(F, H) we get concurrent(Line(F, H), Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(C, D), Line(D, E), Line(D, G) we get concurrent(Line(C, D), Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(A, H), Line(F, H), Line(C, D) we get concurrent(Line(A, H), Line(C, D), Line(F, H))
By concurrent_sufficient_conditions on i, Line(C, D), Line(D, G) we get concurrent(i, Line(C, D), Line(D, G))
By concurrent_sufficient_conditions on Line(F, H), radical_axis(d, Circle(C, D, E)), g we get concurrent(g, Line(F, H), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, J), Line(F, G) we get concurrent(Line(F, G), Line(F, J), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(D, F), Line(D, G), i we get concurrent(i, Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(F, G), radical_axis(d, Circle(C, D, E)), Line(F, center(d)) we get concurrent(Line(F, G), Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, F), Line(F, center(Circle(C, D, E))), Line(F, center(d)) we get concurrent(Line(E, F), Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(E, F), Line(F, center(Circle(C, D, E))) we get concurrent(g, Line(E, F), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, G), i, h we get concurrent(h, i, Line(D, G))
By concurrent_sufficient_conditions on Line(F, I), Line(F, J), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(F, I), Line(F, J), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, H), Line(F, center(Circle(C, D, E))), Line(F, I) we get concurrent(Line(F, H), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, center(d)), Line(E, F) we get concurrent(Line(E, F), Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, H), Line(D, E), Line(E, center(Circle(C, D, E))) we get concurrent(Line(D, E), Line(E, H), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(E, F), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(E, F), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), h, Line(D, G) we get concurrent(h, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(D, G), Line(G, J), Line(G, center(d)) we get concurrent(Line(D, G), Line(G, J), Line(G, center(d)))
By concurrent_sufficient_conditions on h, Line(D, E), Line(D, G) we get concurrent(h, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, center(d)), g we get concurrent(g, Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))), Line(F, I) we get concurrent(Line(F, I), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on g, Line(F, center(Circle(C, D, E))), Line(F, center(d)) we get concurrent(g, Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, E), Line(E, center(Circle(C, D, E))), f we get concurrent(f, Line(D, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(d)), Line(F, center(Circle(C, D, E))), radical_axis(d, Circle(C, D, E)) we get concurrent(Line(F, center(d)), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(F, center(Circle(C, D, E))), Line(F, H) we get concurrent(Line(F, H), Line(F, I), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(E, center(Circle(C, D, E))), Line(A, E), f we get concurrent(f, Line(A, E), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(G, H), Line(D, G), Line(F, G) we get concurrent(Line(D, G), Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, H), Line(D, F) we get concurrent(Line(D, F), Line(F, H), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, G), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, G), radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(D, F), Line(F, J) we get concurrent(Line(D, F), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, G), Line(F, center(d)) we get concurrent(Line(F, G), Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), radical_axis(d, Circle(C, D, E)), Line(F, J) we get concurrent(Line(F, H), Line(F, J), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, center(Circle(C, D, E))), Line(F, center(d)), Line(E, F) we get concurrent(Line(E, F), Line(F, center(d)), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, G), Line(D, F), h we get concurrent(h, Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(F, G), g, radical_axis(d, Circle(C, D, E)) we get concurrent(g, Line(F, G), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, J), Line(F, center(Circle(C, D, E))), Line(F, G) we get concurrent(Line(F, G), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, H), radical_axis(d, Circle(C, D, E)), Line(E, F) we get concurrent(Line(E, F), Line(F, H), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, H), radical_axis(d, Circle(C, D, E)), Line(F, center(d)) we get concurrent(Line(F, H), Line(F, center(d)), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(F, G), Line(G, center(d)), Line(D, G) we get concurrent(Line(D, G), Line(F, G), Line(G, center(d)))
By concurrent_sufficient_conditions on h, Line(D, G), Line(C, D) we get concurrent(h, Line(C, D), Line(D, G))
By concurrent_sufficient_conditions on Line(D, G), Line(G, H), Line(A, G) we get concurrent(Line(A, G), Line(D, G), Line(G, H))
By concurrent_sufficient_conditions on Line(D, G), Line(F, G), Line(G, H) we get concurrent(Line(D, G), Line(F, G), Line(G, H))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(D, F), Line(F, I) we get concurrent(Line(D, F), Line(F, I), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on Line(E, F), f, Line(E, center(Circle(C, D, E))) we get concurrent(f, Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(D, G), Line(A, G), Line(G, J) we get concurrent(Line(A, G), Line(D, G), Line(G, J))
By concurrent_sufficient_conditions on Line(E, F), Line(E, center(Circle(C, D, E))), Line(A, E) we get concurrent(Line(A, E), Line(E, F), Line(E, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on Line(F, I), Line(F, J), Line(F, center(Circle(C, D, E))) we get concurrent(Line(F, I), Line(F, J), Line(F, center(Circle(C, D, E))))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(E, F), Line(F, H) we get concurrent(Line(E, F), Line(F, H), radical_axis(d, Circle(C, D, E)))
By concurrent_sufficient_conditions on radical_axis(d, Circle(C, D, E)), Line(F, H), g we get concurrent(g, Line(F, H), radical_axis(d, Circle(C, D, E)))
By angles_on_chord_v1 on D, A, G, B, Circle(A, B, D) we get angle(D, B, A) == angle(D, G, A) mod 360
By angles_on_chord_v0 on G, B, A, D, Circle(A, B, D) we get angle(G, A, B) == angle(G, D, B) mod 360
By angles_on_chord_v0 on A, D, B, G, Circle(A, B, D) we get angle(A, B, D) == angle(A, G, D) mod 360
By angles_on_chord_v1 on B, G, D, A, Circle(A, B, D) we get angle(B, A, G) == angle(B, D, G) mod 360
By median_definition on midpoint(A, G), E, F, Line(C, D) we get Line(C, D) == median(midpoint(A, G), E, F)
By line_intersection_definition on H, median(H, E, F), Line(G, H) we get H == line_intersection(Line(G, H), median(H, E, F))
By median_definition on line_intersection(Line(A, G), Line(C, D)), F, E, Line(C, D) we get Line(C, D) == median(line_intersection(Line(A, G), Line(C, D)), E, F)
By line_intersection_definition on midpoint(E, F), Line(E, F), median(center(Circle(C, D, E)), E, F) we get midpoint(E, F) == line_intersection(Line(E, F), median(center(Circle(C, D, E)), E, F))
By radical_axis_of_intersecting_circles_v0 on E, A, c, Circle(A, C, E) we get Line(A, E) == radical_axis(c, Circle(A, C, E))
By midpoint_definition_v0 on D, C, center(Circle(C, D, E)) we get midpoint(C, D) == center(Circle(C, D, E))
By median_definition on center(Circle(C, D, E)), A, G, Line(C, D) we get Line(C, D) == median(center(Circle(C, D, E)), A, G)
By radical_axis_of_intersecting_circles_v0 on F, G, Circle(C, F, G), d we get Line(F, G) == radical_axis(d, Circle(C, F, G))
By median_definition on H, G, A, Line(C, D) we get Line(C, D) == median(H, A, G)
By line_intersection_definition on center(Circle(C, D, E)), median(center(Circle(C, D, E)), E, F), Line(F, center(Circle(C, D, E))) we get center(Circle(C, D, E)) == line_intersection(Line(F, center(Circle(C, D, E))), median(center(Circle(C, D, E)), E, F))
By perpendicular_line_definition on H, Line(C, D), Line(A, G) we get Line(C, D) == perpendicular_line(H, Line(A, G))
By radical_axis_of_intersecting_circles_v0 on F, G, Circle(C, F, G), c we get Line(F, G) == radical_axis(c, Circle(C, F, G))
By radical_axis_of_intersecting_circles_v0 on E, C, Circle(A, C, E), Circle(C, D, E) we get Line(C, E) == radical_axis(Circle(A, C, E), Circle(C, D, E))
By perpendicular_line_definition on line_intersection(Line(A, G), Line(C, D)), Line(C, D), Line(E, F) we get Line(C, D) == perpendicular_line(line_intersection(Line(A, G), Line(C, D)), Line(E, F))
By median_definition on midpoint(E, F), G, A, Line(C, D) we get Line(C, D) == median(midpoint(E, F), A, G)
By radical_axis_of_intersecting_circles_v0 on C, H, Circle(C, F, G), Circle(A, C, E) we get Line(C, H) == radical_axis(Circle(A, C, E), Circle(C, F, G))
By radical_axis_of_intersecting_circles_v0 on F, C, Circle(C, D, E), Circle(C, F, G) we get Line(C, F) == radical_axis(Circle(C, D, E), Circle(C, F, G))
By line_intersection_definition on H, median(H, E, F), Line(F, H) we get H == line_intersection(Line(F, H), median(H, E, F))
By radical_axis_of_intersecting_circles_v0 on G, A, Circle(A, B, D), c we get Line(A, G) == radical_axis(c, Circle(A, B, D))
By perpendicular_line_definition on center(Circle(C, D, E)), Line(C, D), Line(A, G) we get Line(C, D) == perpendicular_line(center(Circle(C, D, E)), Line(A, G))
By line_intersection_definition on H, Line(A, H), median(H, E, F) we get H == line_intersection(Line(A, H), median(H, E, F))
By perpendicular_line_definition on line_intersection(Line(A, G), Line(C, D)), Line(A, G), Line(C, D) we get Line(A, G) == perpendicular_line(line_intersection(Line(A, G), Line(C, D)), Line(C, D))
By line_intersection_definition on center(Circle(C, D, E)), Line(E, center(Circle(C, D, E))), median(center(Circle(C, D, E)), E, F) we get center(Circle(C, D, E)) == line_intersection(Line(E, center(Circle(C, D, E))), median(center(Circle(C, D, E)), E, F))
By perpendicular_line_definition on line_intersection(Line(A, G), Line(C, D)), Line(C, D), Line(A, G) we get Line(C, D) == perpendicular_line(line_intersection(Line(A, G), Line(C, D)), Line(A, G))
By line_intersection_definition on H, median(H, E, F), Line(E, H) we get H == line_intersection(Line(E, H), median(H, E, F))
By line_intersection_definition on midpoint(E, F), Line(E, F), median(H, E, F) we get midpoint(E, F) == line_intersection(Line(E, F), median(H, E, F))
By median_definition on C, G, A, Line(C, D) we get Line(C, D) == median(C, A, G)
By perpendicular_line_definition on midpoint(E, F), Line(E, F), Line(C, D) we get Line(E, F) == perpendicular_line(midpoint(E, F), Line(C, D))
By perpendicular_line_definition on midpoint(A, G), Line(C, D), Line(E, F) we get Line(C, D) == perpendicular_line(midpoint(A, G), Line(E, F))
By median_definition on D, G, A, Line(C, D) we get Line(C, D) == median(D, A, G)
By same_angle_converse_v0 on C, H, D, A we get collinear(C, D, H)
By perpendicular_direction_conditions_v0_r on C, H, midpoint(E, F), F we get 180 == 2 * direction(C, H) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on D, C, midpoint(E, F), F we get 180 == 2 * direction(D, C) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on H, C, midpoint(E, F), E we get 180 == 2 * direction(H, C) - 2 * direction(midpoint(E, F), E) mod 360
By projection_definition on F, midpoint(E, F), Line(C, D) we get midpoint(E, F) == projection(F, Line(C, D))
By perpendicular_direction_conditions_v0_r on center(Circle(C, D, E)), D, midpoint(E, F), F we get 180 == 2 * direction(center(Circle(C, D, E)), D) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, C, center(Circle(C, D, E)) we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(C, center(Circle(C, D, E))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, C, H we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, D, center(Circle(C, D, E)) we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(D, center(Circle(C, D, E))) mod 360
By perpendicular_direction_conditions_v0_r on center(Circle(C, D, E)), C, midpoint(E, F), E we get 180 == 2 * direction(center(Circle(C, D, E)), C) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on C, H, midpoint(E, F), E we get 180 == 2 * direction(C, H) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on H, C, midpoint(E, F), F we get 180 == 2 * direction(H, C) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, D, C we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, C, H we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on C, center(Circle(C, D, E)), midpoint(E, F), F we get 180 == 2 * direction(C, center(Circle(C, D, E))) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, C, D we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(C, D) mod 360
By projection_definition on C, midpoint(E, F), Line(E, F) we get midpoint(E, F) == projection(C, Line(E, F))
By perpendicular_direction_conditions_v0_r on center(Circle(C, D, E)), C, midpoint(E, F), F we get 180 == 2 * direction(center(Circle(C, D, E)), C) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, center(Circle(C, D, E)), D we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(center(Circle(C, D, E)), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, center(Circle(C, D, E)), D we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(center(Circle(C, D, E)), D) mod 360
By perpendicular_direction_conditions_v0_r on D, center(Circle(C, D, E)), midpoint(E, F), E we get 180 == 2 * direction(D, center(Circle(C, D, E))) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on D, C, midpoint(E, F), E we get 180 == 2 * direction(D, C) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on C, center(Circle(C, D, E)), midpoint(E, F), E we get 180 == 2 * direction(C, center(Circle(C, D, E))) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, C, D we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, center(Circle(C, D, E)), C we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(center(Circle(C, D, E)), C) mod 360
By perpendicular_direction_conditions_v0_r on C, D, midpoint(E, F), F we get 180 == 2 * direction(C, D) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, C, center(Circle(C, D, E)) we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(C, center(Circle(C, D, E))) mod 360
By projection_definition on E, midpoint(E, F), Line(C, D) we get midpoint(E, F) == projection(E, Line(C, D))
By perpendicular_direction_conditions_v0_r on center(Circle(C, D, E)), D, midpoint(E, F), E we get 180 == 2 * direction(center(Circle(C, D, E)), D) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on D, center(Circle(C, D, E)), midpoint(E, F), F we get 180 == 2 * direction(D, center(Circle(C, D, E))) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, H, C we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, D, center(Circle(C, D, E)) we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(D, center(Circle(C, D, E))) mod 360
By perpendicular_direction_conditions_v0_r on C, D, midpoint(E, F), E we get 180 == 2 * direction(C, D) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, D, C we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(D, C) mod 360
By projection_definition on D, midpoint(E, F), Line(E, F) we get midpoint(E, F) == projection(D, Line(E, F))
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, H, C we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, center(Circle(C, D, E)), C we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(center(Circle(C, D, E)), C) mod 360
By between_imply_not_between on A, midpoint(A, G), G we get collinear_and_not_between(G, A, midpoint(A, G))
By between_imply_not_between on G, midpoint(A, G), A we get collinear_and_not_between(A, G, midpoint(A, G))
By parallel_line_definition on midpoint(E, F), Line(E, F), Line(A, G) we get Line(E, F) == parallel_line(midpoint(E, F), Line(A, G))
By parallel_line_definition on line_intersection(Line(A, G), Line(C, D)), Line(A, G), Line(E, F) we get Line(A, G) == parallel_line(line_intersection(Line(A, G), Line(C, D)), Line(E, F))
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), midpoint(E, F), C we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(midpoint(E, F), C) mod 360
By sss_anti_similarity_v0 on D, A, E, D, G, F we get anti_similar_triangles(A, D, E, G, D, F)
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), A, G we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, midpoint(E, F), C we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(midpoint(E, F), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, midpoint(E, F), F we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on A, G, midpoint(E, F), C we get 180 == 2 * direction(A, G) - 2 * direction(midpoint(E, F), C) mod 360
By sss_anti_similarity_v1 on F, D, G, E, D, A we get anti_similar_triangles(A, D, E, G, D, F)
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), midpoint(E, F), C we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(midpoint(E, F), C) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), F, E we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on A, G, midpoint(E, F), D we get 180 == 2 * direction(A, G) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), F, E we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(F, E) mod 360
By orthocenter_concurrency on G, D, C we get orthocenter(C, D, G) in altitude(G, C, D), orthocenter(C, D, G) in altitude(D, C, G), orthocenter(C, D, G) in altitude(C, D, G)
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, C, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on G, A, midpoint(E, F), C we get 180 == 2 * direction(G, A) - 2 * direction(midpoint(E, F), C) mod 360
By perpendicular_direction_conditions_v0_r on F, E, C, midpoint(E, F) we get 180 == 2 * direction(F, E) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on F, E, midpoint(E, F), C we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(E, F), C) mod 360
By perpendicular_direction_conditions_v0_r on A, G, C, midpoint(E, F) we get 180 == 2 * direction(A, G) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, F, midpoint(E, F), C we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(E, F), C) mod 360
By orthocenter_concurrency on A, D, C we get orthocenter(A, C, D) in altitude(A, C, D), orthocenter(A, C, D) in altitude(D, A, C), orthocenter(A, C, D) in altitude(C, A, D)
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, F, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on G, A, midpoint(E, F), D we get 180 == 2 * direction(G, A) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, midpoint(E, F), F we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on G, A, C, midpoint(E, F) we get 180 == 2 * direction(G, A) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), F, midpoint(E, F) we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(F, midpoint(E, F)) mod 360
By in_imply_collinear on midpoint(E, F), center(Circle(C, D, E)), C we get collinear(C, midpoint(E, F), center(Circle(C, D, E)))
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, midpoint(E, F), D we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on A, G, D, midpoint(E, F) we get 180 == 2 * direction(A, G) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, D, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, F, midpoint(E, F), D we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), C, midpoint(E, F) we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), E, F we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, E, F we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), C, midpoint(E, F) we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on G, A, D, midpoint(E, F) we get 180 == 2 * direction(G, A) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), midpoint(E, F), E we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), E, F we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), D, midpoint(E, F) we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, E, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), midpoint(E, F), F we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on E, F, C, midpoint(E, F) we get 180 == 2 * direction(E, F) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), E, midpoint(E, F) we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, A, G we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, F, E we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), E, midpoint(E, F) we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(E, midpoint(E, F)) mod 360
By in_imply_collinear on midpoint(A, G), D, C we get collinear(C, D, midpoint(A, G))
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), G, A we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), midpoint(E, F), E we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on F, E, midpoint(E, F), D we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on F, E, D, midpoint(E, F) we get 180 == 2 * direction(F, E) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, C, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, midpoint(E, F), D we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(midpoint(E, F), D) mod 360
By in_imply_collinear on center(Circle(C, D, E)), midpoint(E, F), D we get collinear(D, midpoint(E, F), center(Circle(C, D, E)))
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, midpoint(E, F), E we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), F, midpoint(E, F) we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), D, midpoint(E, F) we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), midpoint(E, F), D we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, E, F we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on E, F, D, midpoint(E, F) we get 180 == 2 * direction(E, F) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), midpoint(E, F), F we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, F, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, midpoint(E, F), C we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(midpoint(E, F), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, D, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(D, midpoint(E, F)) mod 360
By in_imply_collinear on line_intersection(Line(A, G), Line(C, D)), C, D we get collinear(C, D, line_intersection(Line(A, G), Line(C, D)))
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, G, A we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), A, G we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, midpoint(E, F), E we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, G, A we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), G, A we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), midpoint(E, F), D we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, E, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, F, E we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, A, G we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(A, G) mod 360
By in_imply_collinear on line_intersection(Line(A, G), Line(C, D)), G, A we get collinear(A, G, line_intersection(Line(A, G), Line(C, D)))
By in_imply_collinear on midpoint(A, G), midpoint(E, F), D we get collinear(D, midpoint(A, G), midpoint(E, F))
By in_imply_collinear on midpoint(A, G), center(Circle(C, D, E)), C we get collinear(C, midpoint(A, G), center(Circle(C, D, E)))
By in_imply_collinear on midpoint(E, F), C, H we get collinear(C, H, midpoint(E, F))
By in_imply_collinear on line_intersection(Line(A, G), Line(C, D)), C, H we get collinear(C, H, line_intersection(Line(A, G), Line(C, D)))
By in_imply_collinear on center(Circle(C, D, E)), C, H we get collinear(C, H, center(Circle(C, D, E)))
By in_imply_collinear on midpoint(A, G), midpoint(E, F), C we get collinear(C, midpoint(A, G), midpoint(E, F))
By in_imply_collinear on line_intersection(Line(A, G), Line(C, D)), C, center(Circle(C, D, E)) we get collinear(C, center(Circle(C, D, E)), line_intersection(Line(A, G), Line(C, D)))
By in_imply_collinear on midpoint(A, G), D, center(Circle(C, D, E)) we get collinear(D, midpoint(A, G), center(Circle(C, D, E)))
By in_imply_collinear on line_intersection(Line(A, G), Line(C, D)), D, midpoint(E, F) we get collinear(D, midpoint(E, F), line_intersection(Line(A, G), Line(C, D)))
By external_angle_bisector_definition_v0 on G, center(Circle(C, D, E)), I, D we get 180 == angle(G, D, center(Circle(C, D, E))) + angle(I, D, center(Circle(C, D, E))) mod 360
By sss_anti_congruence_v1 on A, D, G, G, D, A we get anti_congruent_triangles(A, D, G, G, D, A)
By sss_anti_congruence_v1 on A, D, G, G, D, A we get anti_congruent_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v1 on G, A, D, A, G, D we get anti_similar_triangles(A, D, G, G, D, A)
By in_imply_collinear on H, midpoint(E, F), D we get collinear(D, H, midpoint(E, F))
By sss_anti_similarity_v1 on G, F, D, A, E, D we get anti_similar_triangles(A, D, E, G, D, F)
By reverse_direction on midpoint(E, F), F we get 180 == direction(midpoint(E, F), F) - direction(F, midpoint(E, F)) mod 360
By in_imply_collinear on line_intersection(Line(A, G), Line(C, D)), D, center(Circle(C, D, E)) we get collinear(D, center(Circle(C, D, E)), line_intersection(Line(A, G), Line(C, D)))
By sss_anti_similarity_v1 on A, D, E, G, D, F we get anti_similar_triangles(A, D, E, G, D, F)
By in_imply_collinear on H, center(Circle(C, D, E)), D we get collinear(D, H, center(Circle(C, D, E)))
By sss_anti_similarity_v1 on G, F, D, A, E, D we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_similarity_v1 on D, G, F, D, A, E we get anti_similar_triangles(A, D, E, G, D, F)
By internal_angle_bisector_definition_v0 on G, center(Circle(C, D, E)), A, C we get angle(G, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, A) mod 360
By in_imply_collinear on midpoint(A, G), H, C we get collinear(C, H, midpoint(A, G))
By internal_angle_bisector_definition_v0 on B, center(Circle(C, D, E)), F, C we get angle(B, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, F) mod 360
By sss_anti_congruence_v0 on G, D, A, A, D, G we get anti_congruent_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v0 on E, D, A, F, D, G we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_similarity_v0 on A, G, D, G, A, D we get anti_similar_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v1 on A, D, E, G, D, F we get anti_similar_triangles(A, D, E, G, D, F)
By in_imply_collinear on line_intersection(Line(A, G), Line(C, D)), C, midpoint(E, F) we get collinear(C, midpoint(E, F), line_intersection(Line(A, G), Line(C, D)))
By sss_anti_congruence_v1 on G, A, D, A, G, D we get anti_congruent_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v0 on F, G, D, E, A, D we get anti_similar_triangles(A, D, E, G, D, F)
By collinear_definition on C, center(Circle(C, D, E)), D we get center(Circle(C, D, E)) in Line(C, D), D in Line(C, center(Circle(C, D, E))), Line(C, D) == Line(C, center(Circle(C, D, E))), 0 == 2 * angle(center(Circle(C, D, E)), C, D) mod 360
By sss_anti_similarity_v1 on E, A, D, F, G, D we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_similarity_v0 on F, G, D, E, A, D we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_congruence_v1 on G, A, D, A, G, D we get anti_congruent_triangles(A, D, G, G, D, A)
By sss_anti_congruence_v1 on D, G, A, D, A, G we get anti_congruent_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v0 on G, D, A, A, D, G we get anti_similar_triangles(A, D, G, G, D, A)
By sss_anti_congruence_v0 on D, A, G, D, G, A we get anti_congruent_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v0 on G, D, F, A, D, E we get anti_similar_triangles(A, D, E, G, D, F)
By isosceles_triangle_properties on D, G, A we get distance(A, D) == distance(D, G), angle(D, G, A) == angle(G, A, D) mod 360
By internal_angle_bisector_definition_v0 on A, center(Circle(C, D, E)), E, C we get angle(A, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, E) mod 360
By internal_angle_bisector_definition_v0 on I, center(Circle(C, D, E)), F, C we get angle(I, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, F) mod 360
By sss_anti_similarity_v0 on D, A, E, D, G, F we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_similarity_v1 on D, E, A, D, F, G we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_similarity_v1 on G, A, D, A, G, D we get anti_similar_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v0 on E, D, A, F, D, G we get anti_similar_triangles(A, D, E, G, D, F)
By point_on_perpendicular_bisector on F, E, line_intersection(Line(A, G), Line(C, D)), Line(C, D) we get distance(E, line_intersection(Line(A, G), Line(C, D))) == distance(F, line_intersection(Line(A, G), Line(C, D)))
By sas_anti_similarity on G, D, A, A, D, G we get anti_similar_triangles(A, D, G, G, D, A)
By internal_angle_bisector_definition_v0 on B, center(Circle(C, D, E)), A, C we get angle(B, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, A) mod 360
By sss_anti_similarity_v1 on F, D, G, E, D, A we get anti_similar_triangles(A, D, E, G, D, F)
By internal_angle_bisector_definition_v0 on A, center(Circle(C, D, E)), B, C we get angle(A, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, B) mod 360
By sss_anti_similarity_v0 on D, F, G, D, E, A we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_congruence_v1 on D, G, A, D, A, G we get anti_congruent_triangles(A, D, G, G, D, A)
By internal_angle_bisector_definition_v0 on J, center(Circle(C, D, E)), G, D we get angle(J, D, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), D, G) mod 360
By sss_anti_similarity_v0 on D, A, G, D, G, A we get anti_similar_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v1 on F, D, G, E, D, A we get anti_similar_triangles(A, D, E, G, D, F)
By perpendicular_bisector_sufficient_conditions on E, F, H, midpoint(E, F) we get perpendicular_bisector(E, F) == Line(H, midpoint(E, F))
By internal_angle_bisector_definition_v0 on I, center(Circle(C, D, E)), A, C we get angle(I, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, A) mod 360
By perpendicular_bisector_sufficient_conditions on F, E, center(Circle(C, D, E)), midpoint(E, F) we get perpendicular_bisector(E, F) == Line(midpoint(E, F), center(Circle(C, D, E)))
By sss_anti_similarity_v1 on D, G, F, D, A, E we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_similarity_v1 on G, A, D, A, G, D we get anti_similar_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v0 on E, D, A, F, D, G we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_similarity_v0 on F, G, D, E, A, D we get anti_similar_triangles(A, D, E, G, D, F)
By collinear_definition on D, C, center(Circle(C, D, E)) we get C in Line(D, center(Circle(C, D, E))), center(Circle(C, D, E)) in Line(C, D), Line(C, D) == Line(D, center(Circle(C, D, E))), 0 == 2 * angle(C, D, center(Circle(C, D, E))) mod 360
By collinear_definition on D, center(Circle(C, D, E)), C we get center(Circle(C, D, E)) in Line(C, D), C in Line(D, center(Circle(C, D, E))), Line(C, D) == Line(D, center(Circle(C, D, E))), 0 == 2 * angle(center(Circle(C, D, E)), D, C) mod 360
By sss_anti_similarity_v0 on D, F, G, D, E, A we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_similarity_v1 on F, D, G, E, D, A we get anti_similar_triangles(A, D, E, G, D, F)
By point_on_perpendicular_bisector on A, G, center(Circle(C, D, E)), Line(C, D) we get distance(A, center(Circle(C, D, E))) == distance(G, center(Circle(C, D, E)))
By sss_anti_similarity_v0 on F, G, D, E, A, D we get anti_similar_triangles(A, D, E, G, D, F)
By internal_angle_bisector_definition_v0 on A, center(Circle(C, D, E)), I, C we get angle(A, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, I) mod 360
By sas_anti_similarity on A, D, G, G, D, A we get anti_similar_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v0 on D, A, G, D, G, A we get anti_similar_triangles(A, D, G, G, D, A)
By sss_anti_congruence_v0 on A, G, D, G, A, D we get anti_congruent_triangles(A, D, G, G, D, A)
By sss_anti_congruence_v1 on D, G, A, D, A, G we get anti_congruent_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v0 on D, A, G, D, G, A we get anti_similar_triangles(A, D, G, G, D, A)
By sss_anti_congruence_v0 on A, G, D, G, A, D we get anti_congruent_triangles(A, D, G, G, D, A)
By sss_anti_congruence_v0 on D, A, G, D, G, A we get anti_congruent_triangles(A, D, G, G, D, A)
By sss_anti_congruence_v1 on D, G, A, D, A, G we get anti_congruent_triangles(A, D, G, G, D, A)
By point_on_perpendicular_bisector on A, G, midpoint(E, F), Line(C, D) we get distance(A, midpoint(E, F)) == distance(G, midpoint(E, F))
By internal_angle_bisector_definition_v0 on A, center(Circle(C, D, E)), G, C we get angle(A, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, G) mod 360
By sss_anti_similarity_v0 on D, A, G, D, G, A we get anti_similar_triangles(A, D, G, G, D, A)
By sss_anti_congruence_v0 on A, G, D, G, A, D we get anti_congruent_triangles(A, D, G, G, D, A)
By internal_angle_bisector_definition_v0 on G, center(Circle(C, D, E)), J, D we get angle(G, D, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), D, J) mod 360
By sss_anti_similarity_v0 on A, G, D, G, A, D we get anti_similar_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v0 on G, D, A, A, D, G we get anti_similar_triangles(A, D, G, G, D, A)
By sas_anti_congruence on A, D, G, G, D, A we get anti_congruent_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v0 on A, E, D, G, F, D we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_similarity_v0 on G, D, F, A, D, E we get anti_similar_triangles(A, D, E, G, D, F)
By collinear_definition on C, D, center(Circle(C, D, E)) we get D in Line(C, center(Circle(C, D, E))), center(Circle(C, D, E)) in Line(C, D), Line(C, D) == Line(C, center(Circle(C, D, E))), 0 == 2 * angle(D, C, center(Circle(C, D, E))) mod 360
By internal_angle_bisector_definition_v0 on G, center(Circle(C, D, E)), A, D we get angle(G, D, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), D, A) mod 360
By sss_anti_similarity_v1 on D, G, A, D, A, G we get anti_similar_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v1 on G, A, D, A, G, D we get anti_similar_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v1 on E, A, D, F, G, D we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_similarity_v0 on D, A, G, D, G, A we get anti_similar_triangles(A, D, G, G, D, A)
By internal_angle_bisector_definition_v0 on G, center(Circle(C, D, E)), F, C we get angle(G, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, F) mod 360
By internal_angle_bisector_definition_v0 on F, center(Circle(C, D, E)), B, C we get angle(F, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, B) mod 360
By sss_anti_similarity_v1 on D, G, F, D, A, E we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_similarity_v0 on A, G, D, G, A, D we get anti_similar_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v0 on G, D, F, A, D, E we get anti_similar_triangles(A, D, E, G, D, F)
By point_on_perpendicular_bisector on E, F, midpoint(A, G), Line(C, D) we get distance(E, midpoint(A, G)) == distance(F, midpoint(A, G))
By sss_anti_similarity_v1 on D, G, F, D, A, E we get anti_similar_triangles(A, D, E, G, D, F)
By sas_anti_congruence on G, D, A, A, D, G we get anti_congruent_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v0 on G, D, A, A, D, G we get anti_similar_triangles(A, D, G, G, D, A)
By point_on_perpendicular_bisector on G, A, line_intersection(Line(A, G), Line(C, D)), Line(C, D) we get distance(A, line_intersection(Line(A, G), Line(C, D))) == distance(G, line_intersection(Line(A, G), Line(C, D)))
By sss_anti_similarity_v1 on F, D, G, E, D, A we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_similarity_v0 on G, D, A, A, D, G we get anti_similar_triangles(A, D, G, G, D, A)
By sss_anti_congruence_v0 on G, D, A, A, D, G we get anti_congruent_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v0 on D, A, E, D, G, F we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_similarity_v0 on G, D, F, A, D, E we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_congruence_v0 on G, D, A, A, D, G we get anti_congruent_triangles(A, D, G, G, D, A)
By sss_anti_congruence_v1 on D, G, A, D, A, G we get anti_congruent_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v0 on D, A, E, D, G, F we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_similarity_v1 on D, E, A, D, F, G we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_congruence_v0 on D, A, G, D, G, A we get anti_congruent_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v1 on G, F, D, A, E, D we get anti_similar_triangles(A, D, E, G, D, F)
By internal_angle_bisector_definition_v0 on A, center(Circle(C, D, E)), G, D we get angle(A, D, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), D, G) mod 360
By sss_anti_similarity_v1 on G, A, D, A, G, D we get anti_similar_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v0 on A, G, D, G, A, D we get anti_similar_triangles(A, D, G, G, D, A)
By isosceles_triangle_properties on D, A, G we get distance(A, D) == distance(D, G), angle(A, G, D) == angle(D, A, G) mod 360
By sss_anti_similarity_v1 on A, D, G, G, D, A we get anti_similar_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v1 on E, A, D, F, G, D we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_similarity_v0 on D, F, G, D, E, A we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_congruence_v0 on G, D, A, A, D, G we get anti_congruent_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v0 on D, F, G, D, E, A we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_congruence_v1 on G, A, D, A, G, D we get anti_congruent_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v0 on F, G, D, E, A, D we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_similarity_v0 on E, D, A, F, D, G we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_congruence_v0 on D, A, G, D, G, A we get anti_congruent_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v0 on E, D, A, F, D, G we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_similarity_v0 on A, G, D, G, A, D we get anti_similar_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v1 on D, G, A, D, A, G we get anti_similar_triangles(A, D, G, G, D, A)
By internal_angle_bisector_definition_v0 on E, center(Circle(C, D, E)), A, C we get angle(E, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, A) mod 360
By sss_anti_similarity_v1 on G, F, D, A, E, D we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_similarity_v1 on A, D, G, G, D, A we get anti_similar_triangles(A, D, G, G, D, A)
By reverse_direction on F, midpoint(E, F) we get 180 == direction(F, midpoint(E, F)) - direction(midpoint(E, F), F) mod 360
By sss_anti_similarity_v0 on D, A, G, D, G, A we get anti_similar_triangles(A, D, G, G, D, A)
By sss_anti_congruence_v1 on A, D, G, G, D, A we get anti_congruent_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v0 on A, E, D, G, F, D we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_congruence_v1 on G, A, D, A, G, D we get anti_congruent_triangles(A, D, G, G, D, A)
By internal_angle_bisector_definition_v0 on F, center(Circle(C, D, E)), I, C we get angle(F, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, I) mod 360
By sss_anti_congruence_v0 on A, G, D, G, A, D we get anti_congruent_triangles(A, D, G, G, D, A)
By sss_anti_congruence_v0 on G, D, A, A, D, G we get anti_congruent_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v1 on A, D, G, G, D, A we get anti_similar_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v1 on D, G, A, D, A, G we get anti_similar_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v0 on D, A, E, D, G, F we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_similarity_v1 on D, G, F, D, A, E we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_similarity_v0 on D, A, E, D, G, F we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_similarity_v1 on A, D, E, G, D, F we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_similarity_v0 on A, E, D, G, F, D we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_similarity_v1 on E, A, D, F, G, D we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_similarity_v1 on A, D, E, G, D, F we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_similarity_v1 on D, G, A, D, A, G we get anti_similar_triangles(A, D, G, G, D, A)
By internal_angle_bisector_definition_v0 on F, center(Circle(C, D, E)), G, C we get angle(F, C, center(Circle(C, D, E))) == angle(center(Circle(C, D, E)), C, G) mod 360
By sss_anti_similarity_v0 on E, D, A, F, D, G we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_congruence_v1 on A, D, G, G, D, A we get anti_congruent_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v0 on A, E, D, G, F, D we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_similarity_v0 on F, G, D, E, A, D we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_similarity_v0 on G, D, F, A, D, E we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_similarity_v1 on A, D, E, G, D, F we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_congruence_v1 on D, G, A, D, A, G we get anti_congruent_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v1 on F, D, G, E, D, A we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_congruence_v1 on G, A, D, A, G, D we get anti_congruent_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v1 on A, D, E, G, D, F we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_congruence_v0 on A, G, D, G, A, D we get anti_congruent_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v1 on A, D, G, G, D, A we get anti_similar_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v1 on A, D, G, G, D, A we get anti_similar_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v1 on G, F, D, A, E, D we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_similarity_v1 on G, A, D, A, G, D we get anti_similar_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v0 on G, D, A, A, D, G we get anti_similar_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v0 on D, F, G, D, E, A we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_similarity_v1 on D, E, A, D, F, G we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_similarity_v0 on D, F, G, D, E, A we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_similarity_v1 on A, D, G, G, D, A we get anti_similar_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v0 on G, D, F, A, D, E we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_similarity_v1 on E, A, D, F, G, D we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_congruence_v1 on A, D, G, G, D, A we get anti_congruent_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v1 on D, E, A, D, F, G we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_congruence_v0 on D, A, G, D, G, A we get anti_congruent_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v1 on D, G, F, D, A, E we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_similarity_v1 on D, G, A, D, A, G we get anti_similar_triangles(A, D, G, G, D, A)
By sss_anti_congruence_v0 on G, D, A, A, D, G we get anti_congruent_triangles(A, D, G, G, D, A)
By sss_anti_congruence_v0 on A, G, D, G, A, D we get anti_congruent_triangles(A, D, G, G, D, A)
By reverse_direction on midpoint(E, F), E we get 180 == direction(midpoint(E, F), E) - direction(E, midpoint(E, F)) mod 360
By sss_anti_similarity_v0 on G, D, A, A, D, G we get anti_similar_triangles(A, D, G, G, D, A)
By sss_anti_congruence_v1 on G, A, D, A, G, D we get anti_congruent_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v1 on D, E, A, D, F, G we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_similarity_v1 on D, E, A, D, F, G we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_similarity_v1 on D, G, A, D, A, G we get anti_similar_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v0 on A, G, D, G, A, D we get anti_similar_triangles(A, D, G, G, D, A)
By sss_anti_congruence_v0 on D, A, G, D, G, A we get anti_congruent_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v0 on A, E, D, G, F, D we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_similarity_v0 on A, E, D, G, F, D we get anti_similar_triangles(A, D, E, G, D, F)
By sss_anti_similarity_v1 on G, F, D, A, E, D we get anti_similar_triangles(A, D, E, G, D, F)
By reverse_direction on E, midpoint(E, F) we get 180 == direction(E, midpoint(E, F)) - direction(midpoint(E, F), E) mod 360
By sss_anti_congruence_v1 on A, D, G, G, D, A we get anti_congruent_triangles(A, D, G, G, D, A)
By sss_anti_similarity_v1 on E, A, D, F, G, D we get anti_similar_triangles(A, D, E, G, D, F)
By power_of_a_point_in_circle on G, Circle(C, F, G) we get 0 == power_of_a_point(G, Circle(C, F, G))
By internal_angle_bisector_definition_v0 on A, midpoint(E, F), E, C we get angle(A, C, midpoint(E, F)) == angle(midpoint(E, F), C, E) mod 360
By internal_angle_bisector_definition_v0 on E, midpoint(E, F), F, C we get angle(E, C, midpoint(E, F)) == angle(midpoint(E, F), C, F) mod 360
By anti_similar_triangle_basic_properties on I, G, D, I, A, B we get angle(I, G, D) == 0 - angle(I, A, B) mod 360, angle(G, D, I) == 0 - angle(A, B, I) mod 360, angle(D, I, G) == 0 - angle(B, I, A) mod 360, log(distance(A, I)) + log(distance(D, G)) == log(distance(G, I)) + log(distance(A, B)), log(distance(A, B)) + log(distance(D, I)) == log(distance(D, G)) + log(distance(B, I)), log(distance(B, I)) + log(distance(G, I)) == log(distance(D, I)) + log(distance(A, I))
By power_of_a_point_in_circle on H, Circle(C, F, G) we get 0 == power_of_a_point(H, Circle(C, F, G))
By internal_angle_bisector_definition_v0 on F, midpoint(E, F), I, C we get angle(F, C, midpoint(E, F)) == angle(midpoint(E, F), C, I) mod 360
By altitude_definition on H, F, E, Line(C, D) we get Line(C, D) == altitude(H, E, F)
By internal_angle_bisector_definition_v0_r on midpoint(E, F), F, midpoint(E, F), E we get Line(E, F) == internal_angle_bisector(midpoint(E, F), E, midpoint(E, F))
By internal_angle_bisector_definition_v0 on E, midpoint(E, F), F, D we get angle(E, D, midpoint(E, F)) == angle(midpoint(E, F), D, F) mod 360
By anti_similar_triangle_basic_properties on I, B, A, I, D, G we get angle(I, B, A) == 0 - angle(I, D, G) mod 360, angle(B, A, I) == 0 - angle(D, G, I) mod 360, angle(A, I, B) == 0 - angle(G, I, D) mod 360, log(distance(B, I)) + log(distance(D, G)) == log(distance(D, I)) + log(distance(A, B)), log(distance(A, B)) + log(distance(G, I)) == log(distance(D, G)) + log(distance(A, I)), log(distance(A, I)) + log(distance(D, I)) == log(distance(G, I)) + log(distance(B, I))
By power_of_a_point_in_circle on C, Circle(C, F, G) we get 0 == power_of_a_point(C, Circle(C, F, G))
By external_angle_bisector_definition_v0 on G, midpoint(E, F), I, D we get 180 == angle(G, D, midpoint(E, F)) + angle(I, D, midpoint(E, F)) mod 360
By power_of_a_point_on_circle on B, Circle(A, B, D) we get 0 == power_of_a_point(B, Circle(A, B, D))
By internal_angle_bisector_definition_v0 on B, midpoint(E, F), A, C we get angle(B, C, midpoint(E, F)) == angle(midpoint(E, F), C, A) mod 360
By perpendicular_angle_conditions_v0 on C, midpoint(E, F), E we get angle(C, midpoint(E, F), E) == orientation(C, midpoint(E, F), E) mod 360
By perpendicular_angle_conditions_v0 on F, midpoint(E, F), D we get angle(F, midpoint(E, F), D) == orientation(D, F, midpoint(E, F)) mod 360
By power_of_a_point_on_circle on F, Circle(C, F, G) we get 0 == power_of_a_point(F, Circle(C, F, G))
By power_of_a_point_in_circle on A, Circle(A, C, E) we get 0 == power_of_a_point(A, Circle(A, C, E))
By power_of_a_point_on_circle on D, Circle(A, B, D) we get 0 == power_of_a_point(D, Circle(A, B, D))
By internal_angle_bisector_definition_v0_r on E, midpoint(E, F), E, F we get internal_angle_bisector(E, F, E) == Line(F, midpoint(E, F))
By altitude_definition on center(Circle(C, D, E)), E, F, Line(C, D) we get Line(C, D) == altitude(center(Circle(C, D, E)), E, F)
By power_of_a_point_in_circle on G, Circle(A, B, D) we get 0 == power_of_a_point(G, Circle(A, B, D))
By collinear_definition on G, A, midpoint(A, G) we get A in Line(G, midpoint(A, G)), midpoint(A, G) in Line(A, G), Line(A, G) == Line(G, midpoint(A, G)), 0 == 2 * angle(A, G, midpoint(A, G)) mod 360
By internal_angle_bisector_definition_v0 on G, midpoint(E, F), F, C we get angle(G, C, midpoint(E, F)) == angle(midpoint(E, F), C, F) mod 360
By collinear_definition on C, midpoint(E, F), D we get midpoint(E, F) in Line(C, D), D in Line(C, midpoint(E, F)), Line(C, D) == Line(C, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), C, D) mod 360
By power_of_a_point_in_circle on A, Circle(A, B, D) we get 0 == power_of_a_point(A, Circle(A, B, D))
By isosceles_triangle_midpoint on D, G, A we get midpoint(A, G) in median(D, A, G)
By collinear_definition on A, G, midpoint(A, G) we get G in Line(A, midpoint(A, G)), midpoint(A, G) in Line(A, G), Line(A, G) == Line(A, midpoint(A, G)), 0 == 2 * angle(G, A, midpoint(A, G)) mod 360
By log_of_2_times_distance on A, G, midpoint(A, G), G we get log(distance(A, G)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(G, midpoint(A, G)))
By power_of_a_point_in_circle on E, Circle(A, C, E) we get 0 == power_of_a_point(E, Circle(A, C, E))
By internal_angle_bisector_definition_v0_r on F, midpoint(E, F), F, E we get internal_angle_bisector(F, E, F) == Line(E, midpoint(E, F))
By internal_angle_bisector_definition_v0 on E, midpoint(E, F), A, C we get angle(E, C, midpoint(E, F)) == angle(midpoint(E, F), C, A) mod 360
By internal_angle_bisector_definition_v0 on I, midpoint(E, F), A, C we get angle(I, C, midpoint(E, F)) == angle(midpoint(E, F), C, A) mod 360
By internal_angle_bisector_definition_v0 on F, midpoint(E, F), B, C we get angle(F, C, midpoint(E, F)) == angle(midpoint(E, F), C, B) mod 360
By internal_angle_bisector_definition_v0_r on E, F, E, midpoint(E, F) we get Line(F, midpoint(E, F)) == internal_angle_bisector(E, midpoint(E, F), E)
By internal_angle_bisector_definition_v0 on A, midpoint(E, F), G, D we get angle(A, D, midpoint(E, F)) == angle(midpoint(E, F), D, G) mod 360
By collinear_definition on D, midpoint(E, F), C we get midpoint(E, F) in Line(C, D), C in Line(D, midpoint(E, F)), Line(C, D) == Line(D, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), D, C) mod 360
By internal_angle_bisector_definition_v0 on A, midpoint(E, F), B, C we get angle(A, C, midpoint(E, F)) == angle(midpoint(E, F), C, B) mod 360
By perpendicular_angle_conditions_v0 on C, midpoint(E, F), F we get angle(C, midpoint(E, F), F) == orientation(C, midpoint(E, F), F) mod 360
By internal_angle_bisector_definition_v0 on I, midpoint(E, F), F, C we get angle(I, C, midpoint(E, F)) == angle(midpoint(E, F), C, F) mod 360
By internal_angle_bisector_definition_v0 on G, midpoint(E, F), A, C we get angle(G, C, midpoint(E, F)) == angle(midpoint(E, F), C, A) mod 360
By collinear_definition on D, C, midpoint(E, F) we get C in Line(D, midpoint(E, F)), midpoint(E, F) in Line(C, D), Line(C, D) == Line(D, midpoint(E, F)), 0 == 2 * angle(C, D, midpoint(E, F)) mod 360
By power_of_a_point_in_circle on C, Circle(A, C, E) we get 0 == power_of_a_point(C, Circle(A, C, E))
By perpendicular_angle_conditions_v0 on E, midpoint(E, F), C we get angle(E, midpoint(E, F), C) == orientation(C, E, midpoint(E, F)) mod 360
By internal_angle_bisector_definition_v0 on J, midpoint(E, F), G, D we get angle(J, D, midpoint(E, F)) == angle(midpoint(E, F), D, G) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(E, F), E, midpoint(E, F), F we get Line(E, F) == internal_angle_bisector(midpoint(E, F), F, midpoint(E, F))
By isosceles_triangle_midpoint on C, G, A we get midpoint(A, G) in median(C, A, G)
By collinear_definition on C, D, midpoint(E, F) we get D in Line(C, midpoint(E, F)), midpoint(E, F) in Line(C, D), Line(C, D) == Line(C, midpoint(E, F)), 0 == 2 * angle(D, C, midpoint(E, F)) mod 360
By internal_angle_bisector_definition_v0_r on F, E, F, midpoint(E, F) we get Line(E, midpoint(E, F)) == internal_angle_bisector(F, midpoint(E, F), F)
By log_of_2_times_distance on G, A, A, midpoint(A, G) we get log(distance(A, G)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(A, midpoint(A, G)))
By perpendicular_angle_conditions_v0 on D, midpoint(E, F), E we get angle(D, midpoint(E, F), E) == orientation(D, midpoint(E, F), E) mod 360
By internal_angle_bisector_definition_v0 on F, midpoint(E, F), E, D we get angle(F, D, midpoint(E, F)) == angle(midpoint(E, F), D, E) mod 360
By power_of_a_point_in_circle on H, Circle(A, C, E) we get 0 == power_of_a_point(H, Circle(A, C, E))
By isosceles_triangle_midpoint on H, A, G we get midpoint(A, G) in median(H, A, G)
By collinear_definition on G, midpoint(A, G), A we get midpoint(A, G) in Line(A, G), A in Line(G, midpoint(A, G)), Line(A, G) == Line(G, midpoint(A, G)), 0 == 2 * angle(midpoint(A, G), G, A) mod 360
By internal_angle_bisector_definition_v0 on F, midpoint(E, F), G, C we get angle(F, C, midpoint(E, F)) == angle(midpoint(E, F), C, G) mod 360
By internal_angle_bisector_definition_v0 on G, midpoint(E, F), A, D we get angle(G, D, midpoint(E, F)) == angle(midpoint(E, F), D, A) mod 360
By internal_angle_bisector_definition_v0 on B, midpoint(E, F), F, C we get angle(B, C, midpoint(E, F)) == angle(midpoint(E, F), C, F) mod 360
By internal_angle_bisector_definition_v0 on G, midpoint(E, F), J, D we get angle(G, D, midpoint(E, F)) == angle(midpoint(E, F), D, J) mod 360
By perpendicular_angle_conditions_v0 on F, midpoint(E, F), C we get angle(F, midpoint(E, F), C) == orientation(C, F, midpoint(E, F)) mod 360
By perpendicular_angle_conditions_v0 on E, midpoint(E, F), D we get angle(E, midpoint(E, F), D) == orientation(D, E, midpoint(E, F)) mod 360
By perpendicular_bisector_properties on A, G we get perpendicular(Line(A, G), perpendicular_bisector(A, G)), midpoint(A, G) == line_intersection(Line(A, G), perpendicular_bisector(A, G))
By internal_angle_bisector_definition_v0 on A, midpoint(E, F), I, C we get angle(A, C, midpoint(E, F)) == angle(midpoint(E, F), C, I) mod 360
By collinear_definition on A, midpoint(A, G), G we get midpoint(A, G) in Line(A, G), G in Line(A, midpoint(A, G)), Line(A, G) == Line(A, midpoint(A, G)), 0 == 2 * angle(midpoint(A, G), A, G) mod 360
By internal_angle_bisector_definition_v0 on F, midpoint(E, F), E, C we get angle(F, C, midpoint(E, F)) == angle(midpoint(E, F), C, E) mod 360
By internal_angle_bisector_definition_v0 on A, midpoint(E, F), G, C we get angle(A, C, midpoint(E, F)) == angle(midpoint(E, F), C, G) mod 360
By perpendicular_angle_conditions_v0 on D, midpoint(E, F), F we get angle(D, midpoint(E, F), F) == orientation(D, midpoint(E, F), F) mod 360
By isosceles_triangle_altitude_v3 on H, G, A we get identical(perpendicular_bisector(A, G), internal_angle_bisector(A, H, G), perpendicular_line(H, Line(A, G)))
By isosceles_triangle_altitude_v3 on H, A, G we get identical(perpendicular_bisector(A, G), internal_angle_bisector(A, H, G), perpendicular_line(H, Line(A, G)))
By isosceles_triangle_altitude_v2 on H, G, A we get identical(perpendicular_bisector(A, G), internal_angle_bisector(A, H, G), perpendicular_line(H, Line(A, G)))
By isosceles_triangle_altitude_v2 on H, A, G we get identical(perpendicular_bisector(A, G), internal_angle_bisector(A, H, G), perpendicular_line(H, Line(A, G)))
By altitude_definition on F, C, H, Line(E, F) we get Line(E, F) == altitude(F, C, H)
By anti_similar_triangle_basic_properties on C, center(Circle(C, D, E)), E, E, center(Circle(C, D, E)), C we get angle(C, center(Circle(C, D, E)), E) == 0 - angle(E, center(Circle(C, D, E)), C) mod 360, angle(center(Circle(C, D, E)), E, C) == 0 - angle(center(Circle(C, D, E)), C, E) mod 360, angle(E, C, center(Circle(C, D, E))) == 0 - angle(C, E, center(Circle(C, D, E))) mod 360, log(distance(C, center(Circle(C, D, E)))) + log(distance(C, center(Circle(C, D, E)))) == log(distance(E, center(Circle(C, D, E)))) + log(distance(E, center(Circle(C, D, E)))), log(distance(C, center(Circle(C, D, E)))) + log(distance(C, E)) == log(distance(E, center(Circle(C, D, E)))) + log(distance(C, E)), log(distance(C, E)) + log(distance(C, center(Circle(C, D, E)))) == log(distance(C, E)) + log(distance(E, center(Circle(C, D, E))))
By altitude_definition on E, C, center(Circle(C, D, E)), Line(E, F) we get Line(E, F) == altitude(E, C, center(Circle(C, D, E)))
By anti_similar_triangle_basic_properties on D, E, center(Circle(C, D, E)), E, D, center(Circle(C, D, E)) we get angle(D, E, center(Circle(C, D, E))) == 0 - angle(E, D, center(Circle(C, D, E))) mod 360, angle(E, center(Circle(C, D, E)), D) == 0 - angle(D, center(Circle(C, D, E)), E) mod 360, angle(center(Circle(C, D, E)), D, E) == 0 - angle(center(Circle(C, D, E)), E, D) mod 360, log(distance(D, E)) + log(distance(D, center(Circle(C, D, E)))) == log(distance(D, E)) + log(distance(E, center(Circle(C, D, E)))), log(distance(D, center(Circle(C, D, E)))) + log(distance(D, center(Circle(C, D, E)))) == log(distance(E, center(Circle(C, D, E)))) + log(distance(E, center(Circle(C, D, E)))), log(distance(D, center(Circle(C, D, E)))) + log(distance(D, E)) == log(distance(E, center(Circle(C, D, E)))) + log(distance(D, E))
By power_of_a_point_definition on I, B, G, Circle(A, B, D) we get log(distance(B, I)) + log(distance(G, I)) == log(power_of_a_point(I, Circle(A, B, D)))
By altitude_definition on E, C, H, Line(E, F) we get Line(E, F) == altitude(E, C, H)
By anti_similar_triangle_basic_properties on F, center(Circle(C, D, E)), E, E, center(Circle(C, D, E)), F we get angle(F, center(Circle(C, D, E)), E) == 0 - angle(E, center(Circle(C, D, E)), F) mod 360, angle(center(Circle(C, D, E)), E, F) == 0 - angle(center(Circle(C, D, E)), F, E) mod 360, angle(E, F, center(Circle(C, D, E))) == 0 - angle(F, E, center(Circle(C, D, E))) mod 360, log(distance(E, center(Circle(C, D, E)))) + log(distance(E, center(Circle(C, D, E)))) == log(distance(F, center(Circle(C, D, E)))) + log(distance(F, center(Circle(C, D, E)))), log(distance(E, center(Circle(C, D, E)))) + log(distance(E, F)) == log(distance(F, center(Circle(C, D, E)))) + log(distance(E, F)), log(distance(E, F)) + log(distance(E, center(Circle(C, D, E)))) == log(distance(E, F)) + log(distance(F, center(Circle(C, D, E))))
By altitude_definition on D, midpoint(E, F), E, Line(C, D) we get Line(C, D) == altitude(D, E, midpoint(E, F))
By altitude_definition on G, D, midpoint(E, F), Line(A, G) we get Line(A, G) == altitude(G, D, midpoint(E, F))
By altitude_definition on A, C, midpoint(E, F), Line(A, G) we get Line(A, G) == altitude(A, C, midpoint(E, F))
By anti_similar_triangle_basic_properties on center(Circle(C, D, E)), F, C, center(Circle(C, D, E)), C, F we get angle(center(Circle(C, D, E)), F, C) == 0 - angle(center(Circle(C, D, E)), C, F) mod 360, angle(F, C, center(Circle(C, D, E))) == 0 - angle(C, F, center(Circle(C, D, E))) mod 360, angle(C, center(Circle(C, D, E)), F) == 0 - angle(F, center(Circle(C, D, E)), C) mod 360, log(distance(C, center(Circle(C, D, E)))) + log(distance(C, F)) == log(distance(F, center(Circle(C, D, E)))) + log(distance(C, F)), log(distance(C, F)) + log(distance(C, center(Circle(C, D, E)))) == log(distance(C, F)) + log(distance(F, center(Circle(C, D, E)))), log(distance(C, center(Circle(C, D, E)))) + log(distance(C, center(Circle(C, D, E)))) == log(distance(F, center(Circle(C, D, E)))) + log(distance(F, center(Circle(C, D, E))))
By anti_similar_triangle_basic_properties on center(Circle(C, D, E)), F, D, center(Circle(C, D, E)), D, F we get angle(center(Circle(C, D, E)), F, D) == 0 - angle(center(Circle(C, D, E)), D, F) mod 360, angle(F, D, center(Circle(C, D, E))) == 0 - angle(D, F, center(Circle(C, D, E))) mod 360, angle(D, center(Circle(C, D, E)), F) == 0 - angle(F, center(Circle(C, D, E)), D) mod 360, log(distance(D, center(Circle(C, D, E)))) + log(distance(D, F)) == log(distance(F, center(Circle(C, D, E)))) + log(distance(D, F)), log(distance(D, F)) + log(distance(D, center(Circle(C, D, E)))) == log(distance(D, F)) + log(distance(F, center(Circle(C, D, E)))), log(distance(D, center(Circle(C, D, E)))) + log(distance(D, center(Circle(C, D, E)))) == log(distance(F, center(Circle(C, D, E)))) + log(distance(F, center(Circle(C, D, E))))
By altitude_definition on midpoint(A, G), F, midpoint(E, F), Line(C, D) we get Line(C, D) == altitude(midpoint(A, G), F, midpoint(E, F))
By altitude_definition on D, F, midpoint(E, F), Line(C, D) we get Line(C, D) == altitude(D, F, midpoint(E, F))
By power_of_a_point_definition on midpoint(E, F), C, D, Circle(C, D, E) we get log(power_of_a_point(midpoint(E, F), Circle(C, D, E))) == log(distance(C, midpoint(E, F))) + log(distance(D, midpoint(E, F)))
By altitude_definition on A, D, midpoint(E, F), Line(A, G) we get Line(A, G) == altitude(A, D, midpoint(E, F))
By altitude_definition on C, midpoint(E, F), E, Line(C, D) we get Line(C, D) == altitude(C, E, midpoint(E, F))
By altitude_definition on E, C, midpoint(E, F), Line(E, F) we get Line(E, F) == altitude(E, C, midpoint(E, F))
By power_of_a_point_definition on I, A, D, Circle(A, B, D) we get log(distance(A, I)) + log(distance(D, I)) == log(power_of_a_point(I, Circle(A, B, D)))
By altitude_definition on H, G, A, Line(C, D) we get Line(C, D) == altitude(H, A, G)
By altitude_definition on center(Circle(C, D, E)), E, midpoint(E, F), Line(C, D) we get Line(C, D) == altitude(center(Circle(C, D, E)), E, midpoint(E, F))
By power_of_a_point_definition on I, G, C, Circle(C, F, G) we get log(distance(G, I)) + log(distance(C, I)) == log(power_of_a_point(I, Circle(C, F, G)))
By altitude_definition on G, D, center(Circle(C, D, E)), Line(A, G) we get Line(A, G) == altitude(G, D, center(Circle(C, D, E)))
By altitude_definition on line_intersection(Line(A, G), Line(C, D)), midpoint(E, F), E, Line(C, D) we get Line(C, D) == altitude(line_intersection(Line(A, G), Line(C, D)), E, midpoint(E, F))
By power_of_a_point_definition on A, F, C, Circle(C, F, G) we get log(distance(A, F)) + log(distance(A, C)) == log(power_of_a_point(A, Circle(C, F, G)))
By altitude_definition on F, center(Circle(C, D, E)), D, Line(E, F) we get Line(E, F) == altitude(F, D, center(Circle(C, D, E)))
By altitude_definition on midpoint(A, G), midpoint(E, F), E, Line(C, D) we get Line(C, D) == altitude(midpoint(A, G), E, midpoint(E, F))
By altitude_definition on G, C, H, Line(A, G) we get Line(A, G) == altitude(G, C, H)
By altitude_definition on E, D, center(Circle(C, D, E)), Line(E, F) we get Line(E, F) == altitude(E, D, center(Circle(C, D, E)))
By altitude_definition on F, C, center(Circle(C, D, E)), Line(E, F) we get Line(E, F) == altitude(F, C, center(Circle(C, D, E)))
By altitude_definition on G, C, midpoint(E, F), Line(A, G) we get Line(A, G) == altitude(G, C, midpoint(E, F))
By altitude_definition on center(Circle(C, D, E)), A, G, Line(C, D) we get Line(C, D) == altitude(center(Circle(C, D, E)), A, G)
By altitude_definition on C, F, midpoint(E, F), Line(C, D) we get Line(C, D) == altitude(C, F, midpoint(E, F))
By altitude_definition on E, midpoint(E, F), D, Line(E, F) we get Line(E, F) == altitude(E, D, midpoint(E, F))
By altitude_definition on H, midpoint(E, F), E, Line(C, D) we get Line(C, D) == altitude(H, E, midpoint(E, F))
By altitude_definition on F, midpoint(E, F), D, Line(E, F) we get Line(E, F) == altitude(F, D, midpoint(E, F))
By altitude_definition on H, midpoint(E, F), F, Line(C, D) we get Line(C, D) == altitude(H, F, midpoint(E, F))
By altitude_definition on A, D, center(Circle(C, D, E)), Line(A, G) we get Line(A, G) == altitude(A, D, center(Circle(C, D, E)))
By power_of_a_point_definition on G, C, E, Circle(A, C, E) we get log(distance(C, G)) + log(distance(E, G)) == log(power_of_a_point(G, Circle(A, C, E)))
By collinear_definition on midpoint(A, G), A, G we get A in Line(G, midpoint(A, G)), G in Line(A, midpoint(A, G)), Line(A, midpoint(A, G)) == Line(G, midpoint(A, G)), 0 == 2 * angle(A, midpoint(A, G), G) mod 360
By altitude_definition on line_intersection(Line(A, G), Line(C, D)), E, F, Line(C, D) we get Line(C, D) == altitude(line_intersection(Line(A, G), Line(C, D)), E, F)
By altitude_definition on A, C, H, Line(A, G) we get Line(A, G) == altitude(A, C, H)
By power_of_a_point_definition on I, C, E, Circle(A, C, E) we get log(distance(C, I)) + log(distance(E, I)) == log(power_of_a_point(I, Circle(A, C, E)))
By altitude_definition on midpoint(A, G), F, E, Line(C, D) we get Line(C, D) == altitude(midpoint(A, G), E, F)
By collinear_definition on midpoint(E, F), C, D we get C in Line(D, midpoint(E, F)), D in Line(C, midpoint(E, F)), Line(C, midpoint(E, F)) == Line(D, midpoint(E, F)), 0 == 2 * angle(C, midpoint(E, F), D) mod 360
By altitude_definition on center(Circle(C, D, E)), F, midpoint(E, F), Line(C, D) we get Line(C, D) == altitude(center(Circle(C, D, E)), F, midpoint(E, F))
By power_of_a_point_definition on B, C, E, Circle(A, C, E) we get log(distance(B, C)) + log(distance(B, E)) == log(power_of_a_point(B, Circle(A, C, E)))
By power_of_a_point_definition on E, C, G, Circle(C, F, G) we get log(distance(C, E)) + log(distance(E, G)) == log(power_of_a_point(E, Circle(C, F, G)))
By altitude_definition on G, C, center(Circle(C, D, E)), Line(A, G) we get Line(A, G) == altitude(G, C, center(Circle(C, D, E)))
By power_of_a_point_definition on F, A, C, Circle(A, C, E) we get log(distance(A, F)) + log(distance(C, F)) == log(power_of_a_point(F, Circle(A, C, E)))
By altitude_definition on F, midpoint(E, F), C, Line(E, F) we get Line(E, F) == altitude(F, C, midpoint(E, F))
By altitude_definition on line_intersection(Line(A, G), Line(C, D)), midpoint(E, F), F, Line(C, D) we get Line(C, D) == altitude(line_intersection(Line(A, G), Line(C, D)), F, midpoint(E, F))
By power_of_a_point_definition on J, A, D, Circle(A, B, D) we get log(distance(A, J)) + log(distance(D, J)) == log(power_of_a_point(J, Circle(A, B, D)))
By power_of_a_point_definition on B, C, G, Circle(C, F, G) we get log(distance(B, C)) + log(distance(B, G)) == log(power_of_a_point(B, Circle(C, F, G)))
By collinear_definition on midpoint(A, G), G, A we get G in Line(A, midpoint(A, G)), A in Line(G, midpoint(A, G)), Line(A, midpoint(A, G)) == Line(G, midpoint(A, G)), 0 == 2 * angle(G, midpoint(A, G), A) mod 360
By collinear_definition on midpoint(E, F), D, C we get D in Line(C, midpoint(E, F)), C in Line(D, midpoint(E, F)), Line(C, midpoint(E, F)) == Line(D, midpoint(E, F)), 0 == 2 * angle(D, midpoint(E, F), C) mod 360
By altitude_definition on A, center(Circle(C, D, E)), C, Line(A, G) we get Line(A, G) == altitude(A, C, center(Circle(C, D, E)))
By power_of_a_point_definition on C, B, G, Circle(A, B, D) we get log(distance(B, C)) + log(distance(C, G)) == log(power_of_a_point(C, Circle(A, B, D)))
By power_of_a_point_definition on E, G, B, Circle(A, B, D) we get log(distance(E, G)) + log(distance(B, E)) == log(power_of_a_point(E, Circle(A, B, D)))
By similar_triangle_basic_properties on D, center(Circle(C, D, E)), F, E, center(Circle(C, D, E)), D we get angle(D, center(Circle(C, D, E)), F) == angle(E, center(Circle(C, D, E)), D) mod 360, angle(center(Circle(C, D, E)), D, E) == angle(center(Circle(C, D, E)), F, D) mod 360, angle(D, E, center(Circle(C, D, E))) == angle(F, D, center(Circle(C, D, E))) mod 360, log(distance(D, center(Circle(C, D, E)))) + log(distance(D, center(Circle(C, D, E)))) == log(distance(E, center(Circle(C, D, E)))) + log(distance(F, center(Circle(C, D, E)))), log(distance(D, center(Circle(C, D, E)))) + log(distance(D, F)) == log(distance(F, center(Circle(C, D, E)))) + log(distance(D, E)), log(distance(D, E)) + log(distance(D, center(Circle(C, D, E)))) == log(distance(D, F)) + log(distance(E, center(Circle(C, D, E))))
By similar_triangle_basic_properties on center(Circle(C, D, E)), E, D, center(Circle(C, D, E)), D, F we get angle(center(Circle(C, D, E)), D, F) == angle(center(Circle(C, D, E)), E, D) mod 360, angle(D, F, center(Circle(C, D, E))) == angle(E, D, center(Circle(C, D, E))) mod 360, angle(D, center(Circle(C, D, E)), E) == angle(F, center(Circle(C, D, E)), D) mod 360, log(distance(D, center(Circle(C, D, E)))) + log(distance(D, E)) == log(distance(E, center(Circle(C, D, E)))) + log(distance(D, F)), log(distance(D, E)) + log(distance(F, center(Circle(C, D, E)))) == log(distance(D, F)) + log(distance(D, center(Circle(C, D, E)))), log(distance(D, center(Circle(C, D, E)))) + log(distance(D, center(Circle(C, D, E)))) == log(distance(F, center(Circle(C, D, E)))) + log(distance(E, center(Circle(C, D, E))))
By similar_triangle_basic_properties on C, center(Circle(C, D, E)), E, F, center(Circle(C, D, E)), C we get angle(C, center(Circle(C, D, E)), E) == angle(F, center(Circle(C, D, E)), C) mod 360, angle(center(Circle(C, D, E)), C, F) == angle(center(Circle(C, D, E)), E, C) mod 360, angle(C, F, center(Circle(C, D, E))) == angle(E, C, center(Circle(C, D, E))) mod 360, log(distance(C, center(Circle(C, D, E)))) + log(distance(C, center(Circle(C, D, E)))) == log(distance(F, center(Circle(C, D, E)))) + log(distance(E, center(Circle(C, D, E)))), log(distance(C, center(Circle(C, D, E)))) + log(distance(C, E)) == log(distance(E, center(Circle(C, D, E)))) + log(distance(C, F)), log(distance(C, E)) + log(distance(F, center(Circle(C, D, E)))) == log(distance(C, F)) + log(distance(C, center(Circle(C, D, E))))
By similar_triangle_basic_properties on F, C, center(Circle(C, D, E)), C, E, center(Circle(C, D, E)) we get angle(C, E, center(Circle(C, D, E))) == angle(F, C, center(Circle(C, D, E))) mod 360, angle(C, center(Circle(C, D, E)), F) == angle(E, center(Circle(C, D, E)), C) mod 360, angle(center(Circle(C, D, E)), C, E) == angle(center(Circle(C, D, E)), F, C) mod 360, log(distance(C, E)) + log(distance(C, center(Circle(C, D, E)))) == log(distance(C, F)) + log(distance(E, center(Circle(C, D, E)))), log(distance(C, center(Circle(C, D, E)))) + log(distance(C, center(Circle(C, D, E)))) == log(distance(E, center(Circle(C, D, E)))) + log(distance(F, center(Circle(C, D, E)))), log(distance(C, center(Circle(C, D, E)))) + log(distance(C, F)) == log(distance(F, center(Circle(C, D, E)))) + log(distance(C, E))
By anti_similar_triangle_basic_properties on E, center(Circle(C, D, E)), D, F, center(Circle(C, D, E)), D we get angle(E, center(Circle(C, D, E)), D) == 0 - angle(F, center(Circle(C, D, E)), D) mod 360, angle(center(Circle(C, D, E)), D, E) == 0 - angle(center(Circle(C, D, E)), D, F) mod 360, angle(D, E, center(Circle(C, D, E))) == 0 - angle(D, F, center(Circle(C, D, E))) mod 360, log(distance(E, center(Circle(C, D, E)))) + log(distance(D, center(Circle(C, D, E)))) == log(distance(F, center(Circle(C, D, E)))) + log(distance(D, center(Circle(C, D, E)))), log(distance(D, center(Circle(C, D, E)))) + log(distance(D, E)) == log(distance(D, center(Circle(C, D, E)))) + log(distance(D, F)), log(distance(D, E)) + log(distance(F, center(Circle(C, D, E)))) == log(distance(D, F)) + log(distance(E, center(Circle(C, D, E))))
By anti_similar_triangle_basic_properties on E, C, center(Circle(C, D, E)), F, C, center(Circle(C, D, E)) we get angle(E, C, center(Circle(C, D, E))) == 0 - angle(F, C, center(Circle(C, D, E))) mod 360, angle(C, center(Circle(C, D, E)), E) == 0 - angle(C, center(Circle(C, D, E)), F) mod 360, angle(center(Circle(C, D, E)), E, C) == 0 - angle(center(Circle(C, D, E)), F, C) mod 360, log(distance(C, E)) + log(distance(C, center(Circle(C, D, E)))) == log(distance(C, F)) + log(distance(C, center(Circle(C, D, E)))), log(distance(C, center(Circle(C, D, E)))) + log(distance(E, center(Circle(C, D, E)))) == log(distance(C, center(Circle(C, D, E)))) + log(distance(F, center(Circle(C, D, E)))), log(distance(E, center(Circle(C, D, E)))) + log(distance(C, F)) == log(distance(F, center(Circle(C, D, E)))) + log(distance(C, E))
By anti_similar_triangle_basic_properties on E, D, center(Circle(C, D, E)), F, D, center(Circle(C, D, E)) we get angle(E, D, center(Circle(C, D, E))) == 0 - angle(F, D, center(Circle(C, D, E))) mod 360, angle(D, center(Circle(C, D, E)), E) == 0 - angle(D, center(Circle(C, D, E)), F) mod 360, angle(center(Circle(C, D, E)), E, D) == 0 - angle(center(Circle(C, D, E)), F, D) mod 360, log(distance(D, E)) + log(distance(D, center(Circle(C, D, E)))) == log(distance(D, F)) + log(distance(D, center(Circle(C, D, E)))), log(distance(D, center(Circle(C, D, E)))) + log(distance(E, center(Circle(C, D, E)))) == log(distance(D, center(Circle(C, D, E)))) + log(distance(F, center(Circle(C, D, E)))), log(distance(E, center(Circle(C, D, E)))) + log(distance(D, F)) == log(distance(F, center(Circle(C, D, E)))) + log(distance(D, E))
By anti_similar_triangle_basic_properties on F, center(Circle(C, D, E)), C, E, center(Circle(C, D, E)), C we get angle(F, center(Circle(C, D, E)), C) == 0 - angle(E, center(Circle(C, D, E)), C) mod 360, angle(center(Circle(C, D, E)), C, F) == 0 - angle(center(Circle(C, D, E)), C, E) mod 360, angle(C, F, center(Circle(C, D, E))) == 0 - angle(C, E, center(Circle(C, D, E))) mod 360, log(distance(E, center(Circle(C, D, E)))) + log(distance(C, center(Circle(C, D, E)))) == log(distance(F, center(Circle(C, D, E)))) + log(distance(C, center(Circle(C, D, E)))), log(distance(C, center(Circle(C, D, E)))) + log(distance(C, E)) == log(distance(C, center(Circle(C, D, E)))) + log(distance(C, F)), log(distance(C, E)) + log(distance(F, center(Circle(C, D, E)))) == log(distance(C, F)) + log(distance(E, center(Circle(C, D, E))))
By power_of_a_point_definition on center(Circle(C, D, E)), D, C, Circle(C, D, E) we get log(power_of_a_point(center(Circle(C, D, E)), Circle(C, D, E))) == log(distance(D, center(Circle(C, D, E)))) + log(distance(C, center(Circle(C, D, E))))
By power_of_a_point_definition on midpoint(A, G), A, G, c we get log(power_of_a_point(midpoint(A, G), c)) == log(distance(A, midpoint(A, G))) + log(distance(G, midpoint(A, G)))
By between_implies_angles on A, midpoint(A, G), G we get 180 == angle(A, midpoint(A, G), G) mod 360, 0 == angle(midpoint(A, G), G, A) mod 360, 0 == angle(G, A, midpoint(A, G)) mod 360
By power_of_a_point_definition on midpoint(A, G), G, A, Circle(A, B, D) we get log(power_of_a_point(midpoint(A, G), Circle(A, B, D))) == log(distance(G, midpoint(A, G))) + log(distance(A, midpoint(A, G)))
By between_implies_angles on G, midpoint(A, G), A we get 180 == angle(G, midpoint(A, G), A) mod 360, 0 == angle(midpoint(A, G), A, G) mod 360, 0 == angle(A, G, midpoint(A, G)) mod 360
By line_definition on orthocenter(C, D, G), C, altitude(C, D, G) we get altitude(C, D, G) == Line(C, orthocenter(C, D, G))
By line_definition on orthocenter(A, C, D), F, Line(D, F) we get Line(D, F) == Line(F, orthocenter(A, C, D))
By line_definition on D, orthocenter(A, C, D), Line(D, F) we get Line(D, F) == Line(D, orthocenter(A, C, D))
By line_definition on orthocenter(A, C, D), G, Line(A, G) we get Line(A, G) == Line(G, orthocenter(A, C, D))
By line_definition on orthocenter(A, C, D), midpoint(A, G), Line(A, G) we get Line(A, G) == Line(midpoint(A, G), orthocenter(A, C, D))
By line_definition on orthocenter(C, D, G), orthocenter(A, C, D), Line(A, G) we get Line(A, G) == Line(orthocenter(A, C, D), orthocenter(C, D, G))
By line_definition on A, orthocenter(C, D, G), Line(A, G) we get Line(A, G) == Line(A, orthocenter(C, D, G))
By line_definition on A, orthocenter(A, C, D), Line(A, G) we get Line(A, G) == Line(A, orthocenter(A, C, D))
By line_definition on orthocenter(A, C, D), C, altitude(C, A, D) we get altitude(C, A, D) == Line(C, orthocenter(A, C, D))
By line_definition on D, orthocenter(C, D, G), Line(D, E) we get Line(D, E) == Line(D, orthocenter(C, D, G))
By line_definition on G, orthocenter(C, D, G), Line(A, G) we get Line(A, G) == Line(G, orthocenter(C, D, G))
By line_definition on E, orthocenter(C, D, G), Line(D, E) we get Line(D, E) == Line(E, orthocenter(C, D, G))
By line_definition on orthocenter(C, D, G), midpoint(A, G), Line(A, G) we get Line(A, G) == Line(midpoint(A, G), orthocenter(C, D, G))
By line_intersection_definition on C, f, altitude(C, A, D) we get C == line_intersection(f, altitude(C, A, D))
By perpendicular_line_definition on D, Line(D, G), altitude(C, D, G) we get Line(D, G) == perpendicular_line(D, altitude(C, D, G))
By line_intersection_definition on C, altitude(C, D, G), Line(C, D) we get C == line_intersection(Line(C, D), altitude(C, D, G))
By line_intersection_definition on C, altitude(C, D, G), f we get C == line_intersection(f, altitude(C, D, G))
By line_intersection_definition on orthocenter(A, C, D), Line(A, G), Line(D, F) we get orthocenter(A, C, D) == line_intersection(Line(A, G), Line(D, F))
By median_definition on F, D, C, Line(F, midpoint(C, D)) we get median(F, C, D) == Line(F, midpoint(C, D))
By line_intersection_definition on C, altitude(C, D, G), altitude(C, A, D) we get C == line_intersection(altitude(C, A, D), altitude(C, D, G))
By line_intersection_definition on orthocenter(C, D, G), Line(D, E), altitude(C, D, G) we get orthocenter(C, D, G) == line_intersection(Line(D, E), altitude(C, D, G))
By perpendicular_line_definition on G, Line(D, G), altitude(C, D, G) we get Line(D, G) == perpendicular_line(G, altitude(C, D, G))
By perpendicular_line_definition on orthocenter(A, C, D), altitude(C, A, D), h we get altitude(C, A, D) == perpendicular_line(orthocenter(A, C, D), h)
By perpendicular_line_definition on D, h, altitude(C, A, D) we get h == perpendicular_line(D, altitude(C, A, D))
By median_definition on E, D, C, Line(E, midpoint(C, D)) we get median(E, C, D) == Line(E, midpoint(C, D))
By perpendicular_line_definition on orthocenter(C, D, G), Line(D, E), f we get Line(D, E) == perpendicular_line(orthocenter(C, D, G), f)
By line_intersection_definition on orthocenter(C, D, G), Line(A, G), Line(D, E) we get orthocenter(C, D, G) == line_intersection(Line(A, G), Line(D, E))
By line_intersection_definition on C, g, altitude(C, D, G) we get C == line_intersection(g, altitude(C, D, G))
By line_intersection_definition on orthocenter(C, D, G), Line(A, G), altitude(C, D, G) we get orthocenter(C, D, G) == line_intersection(Line(A, G), altitude(C, D, G))
By line_intersection_definition on orthocenter(A, C, D), altitude(C, A, D), Line(D, F) we get orthocenter(A, C, D) == line_intersection(Line(D, F), altitude(C, A, D))
By perpendicular_line_definition on orthocenter(A, C, D), Line(D, F), g we get Line(D, F) == perpendicular_line(orthocenter(A, C, D), g)
By perpendicular_line_definition on I, h, altitude(C, A, D) we get h == perpendicular_line(I, altitude(C, A, D))
By perpendicular_line_definition on orthocenter(C, D, G), Line(A, G), Line(C, D) we get Line(A, G) == perpendicular_line(orthocenter(C, D, G), Line(C, D))
By line_intersection_definition on orthocenter(A, C, D), Line(A, G), altitude(C, A, D) we get orthocenter(A, C, D) == line_intersection(Line(A, G), altitude(C, A, D))
By perpendicular_line_definition on A, h, altitude(C, A, D) we get h == perpendicular_line(A, altitude(C, A, D))
By line_intersection_definition on C, altitude(C, A, D), Line(C, D) we get C == line_intersection(Line(C, D), altitude(C, A, D))
By line_intersection_definition on C, altitude(C, A, D), g we get C == line_intersection(g, altitude(C, A, D))
By perpendicular_line_definition on orthocenter(C, D, G), altitude(C, D, G), Line(D, G) we get altitude(C, D, G) == perpendicular_line(orthocenter(C, D, G), Line(D, G))
By perpendicular_line_definition on orthocenter(A, C, D), Line(A, G), Line(C, D) we get Line(A, G) == perpendicular_line(orthocenter(A, C, D), Line(C, D))
By perpendicular_line_definition on J, h, altitude(C, A, D) we get h == perpendicular_line(J, altitude(C, A, D))
By perpendicular_direction_conditions_v0_r on midpoint(A, G), G, midpoint(E, F), C we get 180 == 2 * direction(midpoint(A, G), G) - 2 * direction(midpoint(E, F), C) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, D), midpoint(A, G), G we get 180 == 2 * direction(C, midpoint(C, D)) - 2 * direction(midpoint(A, G), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, midpoint(A, G), G we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(midpoint(A, G), G) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), midpoint(A, G), A we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(midpoint(A, G), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, midpoint(A, G), A we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(midpoint(A, G), A) mod 360
By projection_definition on G, midpoint(A, G), Line(C, D) we get midpoint(A, G) == projection(G, Line(C, D))
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, midpoint(A, G), A we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(midpoint(A, G), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), A, D, C we get 180 == 2 * direction(midpoint(A, G), A) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(C, D), midpoint(A, G), A we get 180 == 2 * direction(D, midpoint(C, D)) - 2 * direction(midpoint(A, G), A) mod 360
By projection_definition on midpoint(A, G), midpoint(E, F), Line(E, F) we get midpoint(E, F) == projection(midpoint(A, G), Line(E, F))
By projection_definition on A, midpoint(A, G), Line(C, D) we get midpoint(A, G) == projection(A, Line(C, D))
By perpendicular_direction_conditions_v0_r on midpoint(A, G), G, C, D we get 180 == 2 * direction(midpoint(A, G), G) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), midpoint(A, G), A we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(midpoint(A, G), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, midpoint(A, G), A we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(midpoint(A, G), A) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, D), midpoint(A, G), A we get 180 == 2 * direction(C, midpoint(C, D)) - 2 * direction(midpoint(A, G), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), G, D, midpoint(E, F) we get 180 == 2 * direction(midpoint(A, G), G) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), G, C, midpoint(E, F) we get 180 == 2 * direction(midpoint(A, G), G) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on C, D, midpoint(A, G), G we get 180 == 2 * direction(C, D) - 2 * direction(midpoint(A, G), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, midpoint(A, G), A we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(midpoint(A, G), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), A, C, D we get 180 == 2 * direction(midpoint(A, G), A) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, midpoint(A, G), G we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(midpoint(A, G), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), A, midpoint(E, F), D we get 180 == 2 * direction(midpoint(A, G), A) - 2 * direction(midpoint(E, F), D) mod 360
By projection_definition on midpoint(C, D), midpoint(E, F), Line(E, F) we get midpoint(E, F) == projection(midpoint(C, D), Line(E, F))
By perpendicular_direction_conditions_v0_r on midpoint(A, G), A, C, midpoint(C, D) we get 180 == 2 * direction(midpoint(A, G), A) - 2 * direction(C, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), G, C, H we get 180 == 2 * direction(midpoint(A, G), G) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), A, midpoint(C, D), D we get 180 == 2 * direction(midpoint(A, G), A) - 2 * direction(midpoint(C, D), D) mod 360
By between_imply_not_between on C, midpoint(C, D), D we get collinear_and_not_between(D, C, midpoint(C, D))
By projection_definition on H, midpoint(E, F), Line(E, F) we get midpoint(E, F) == projection(H, Line(E, F))
By perpendicular_direction_conditions_v0_r on midpoint(A, G), A, H, C we get 180 == 2 * direction(midpoint(A, G), A) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on C, H, midpoint(A, G), G we get 180 == 2 * direction(C, H) - 2 * direction(midpoint(A, G), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), A, D, midpoint(E, F) we get 180 == 2 * direction(midpoint(A, G), A) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), G, D, C we get 180 == 2 * direction(midpoint(A, G), G) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), G, midpoint(C, D), C we get 180 == 2 * direction(midpoint(A, G), G) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), A, midpoint(C, D), C we get 180 == 2 * direction(midpoint(A, G), A) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on D, C, midpoint(A, G), A we get 180 == 2 * direction(D, C) - 2 * direction(midpoint(A, G), A) mod 360
By projection_definition on midpoint(E, F), midpoint(A, G), Line(A, G) we get midpoint(A, G) == projection(midpoint(E, F), Line(A, G))
By perpendicular_direction_conditions_v0_r on H, C, midpoint(A, G), A we get 180 == 2 * direction(H, C) - 2 * direction(midpoint(A, G), A) mod 360
By projection_definition on C, midpoint(A, G), Line(A, G) we get midpoint(A, G) == projection(C, Line(A, G))
By perpendicular_direction_conditions_v0_r on midpoint(A, G), A, D, midpoint(C, D) we get 180 == 2 * direction(midpoint(A, G), A) - 2 * direction(D, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, midpoint(A, G), G we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(midpoint(A, G), G) mod 360
By perpendicular_direction_conditions_v0_r on C, H, midpoint(A, G), A we get 180 == 2 * direction(C, H) - 2 * direction(midpoint(A, G), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), G, midpoint(E, F), D we get 180 == 2 * direction(midpoint(A, G), G) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), A, midpoint(E, F), C we get 180 == 2 * direction(midpoint(A, G), A) - 2 * direction(midpoint(E, F), C) mod 360
By perpendicular_direction_conditions_v0_r on D, C, midpoint(A, G), G we get 180 == 2 * direction(D, C) - 2 * direction(midpoint(A, G), G) mod 360
By perpendicular_direction_conditions_v0_r on H, C, midpoint(A, G), G we get 180 == 2 * direction(H, C) - 2 * direction(midpoint(A, G), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), G, D, midpoint(C, D) we get 180 == 2 * direction(midpoint(A, G), G) - 2 * direction(D, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), G, C, midpoint(C, D) we get 180 == 2 * direction(midpoint(A, G), G) - 2 * direction(C, midpoint(C, D)) mod 360
By projection_definition on H, midpoint(A, G), Line(A, G) we get midpoint(A, G) == projection(H, Line(A, G))
By perpendicular_direction_conditions_v0_r on C, D, midpoint(A, G), A we get 180 == 2 * direction(C, D) - 2 * direction(midpoint(A, G), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), A, C, midpoint(E, F) we get 180 == 2 * direction(midpoint(A, G), A) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), G, H, C we get 180 == 2 * direction(midpoint(A, G), G) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), A, C, H we get 180 == 2 * direction(midpoint(A, G), A) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, midpoint(A, G), G we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(midpoint(A, G), G) mod 360
By projection_definition on midpoint(C, D), midpoint(A, G), Line(A, G) we get midpoint(A, G) == projection(midpoint(C, D), Line(A, G))
By projection_definition on D, midpoint(A, G), Line(A, G) we get midpoint(A, G) == projection(D, Line(A, G))
By perpendicular_direction_conditions_v0_r on midpoint(A, G), G, midpoint(C, D), D we get 180 == 2 * direction(midpoint(A, G), G) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), midpoint(A, G), G we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(midpoint(A, G), G) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(C, D), midpoint(A, G), G we get 180 == 2 * direction(D, midpoint(C, D)) - 2 * direction(midpoint(A, G), G) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), midpoint(A, G), G we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(midpoint(A, G), G) mod 360
By between_imply_not_between on D, midpoint(C, D), C we get collinear_and_not_between(C, D, midpoint(C, D))
By circle_radius_v0_r on H, Circle(C, F, G) we get radius(Circle(C, F, G)) == distance(H, center(Circle(C, F, G)))
By circle_radius_v0_r on A, Circle(A, C, E) we get radius(Circle(A, C, E)) == distance(A, center(Circle(A, C, E)))
By circle_radius_v0_r on C, Circle(C, F, G) we get radius(Circle(C, F, G)) == distance(C, center(Circle(C, F, G)))
By circle_radius_v0_r on G, Circle(A, B, D) we get radius(Circle(A, B, D)) == distance(G, center(Circle(A, B, D)))
By circle_radius_v0_r on B, Circle(A, B, D) we get radius(Circle(A, B, D)) == distance(B, center(Circle(A, B, D)))
By parallel_line_definition on orthocenter(A, C, D), Line(A, G), Line(E, F) we get Line(A, G) == parallel_line(orthocenter(A, C, D), Line(E, F))
By parallel_line_definition on orthocenter(C, D, G), Line(A, G), Line(E, F) we get Line(A, G) == parallel_line(orthocenter(C, D, G), Line(E, F))
By circle_radius_v0_r on D, Circle(A, B, D) we get radius(Circle(A, B, D)) == distance(D, center(Circle(A, B, D)))
By circle_radius_v0_r on C, Circle(A, C, E) we get radius(Circle(A, C, E)) == distance(C, center(Circle(A, C, E)))
By circle_radius_v0_r on H, Circle(A, C, E) we get radius(Circle(A, C, E)) == distance(H, center(Circle(A, C, E)))
By circle_radius_v0_r on F, Circle(C, F, G) we get radius(Circle(C, F, G)) == distance(F, center(Circle(C, F, G)))
By circle_radius_v0_r on E, Circle(A, C, E) we get radius(Circle(A, C, E)) == distance(E, center(Circle(A, C, E)))
By circle_radius_v0_r on A, Circle(A, B, D) we get radius(Circle(A, B, D)) == distance(A, center(Circle(A, B, D)))
By circle_radius_v0_r on G, Circle(C, F, G) we get radius(Circle(C, F, G)) == distance(G, center(Circle(C, F, G)))
By angle_to_center on A, H, C, Circle(A, C, E) we get 2 * angle(A, H, C) == angle(A, center(Circle(A, C, E)), C) mod 360
By angle_to_center on B, G, D, Circle(A, B, D) we get 2 * angle(B, G, D) == angle(B, center(Circle(A, B, D)), D) mod 360
By angle_to_center on B, D, A, Circle(A, B, D) we get 2 * angle(B, D, A) == angle(B, center(Circle(A, B, D)), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(A, G), E, F we get 180 == 2 * direction(midpoint(C, D), midpoint(A, G)) - 2 * direction(E, F) mod 360
By angle_to_center on C, H, F, Circle(C, F, G) we get 2 * angle(C, H, F) == angle(C, center(Circle(C, F, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, D, H we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(D, H) mod 360
By angle_to_center on C, F, H, Circle(C, F, G) we get 2 * angle(C, F, H) == angle(C, center(Circle(C, F, G)), H) mod 360
By perpendicular_direction_conditions_v0_r on G, A, midpoint(E, F), midpoint(A, G) we get 180 == 2 * direction(G, A) - 2 * direction(midpoint(E, F), midpoint(A, G)) mod 360
By angle_to_center on A, D, G, Circle(A, B, D) we get 2 * angle(A, D, G) == angle(A, center(Circle(A, B, D)), G) mod 360
By angle_to_center on H, C, E, Circle(A, C, E) we get 2 * angle(H, C, E) == angle(H, center(Circle(A, C, E)), E) mod 360
By angle_to_center on A, B, D, Circle(A, B, D) we get 2 * angle(A, B, D) == angle(A, center(Circle(A, B, D)), D) mod 360
By angle_to_center on C, E, A, Circle(A, C, E) we get 2 * angle(C, E, A) == angle(C, center(Circle(A, C, E)), A) mod 360
By angle_to_center on H, G, C, Circle(C, F, G) we get 2 * angle(H, G, C) == angle(H, center(Circle(C, F, G)), C) mod 360
By angle_to_center on C, H, E, Circle(A, C, E) we get 2 * angle(C, H, E) == angle(C, center(Circle(A, C, E)), E) mod 360
By angle_to_center on C, H, A, Circle(A, C, E) we get 2 * angle(C, H, A) == angle(C, center(Circle(A, C, E)), A) mod 360
By angle_to_center on E, A, C, Circle(A, C, E) we get 2 * angle(E, A, C) == angle(E, center(Circle(A, C, E)), C) mod 360
By angle_to_center on A, E, C, Circle(A, C, E) we get 2 * angle(A, E, C) == angle(A, center(Circle(A, C, E)), C) mod 360
By angle_to_center on H, E, A, Circle(A, C, E) we get 2 * angle(H, E, A) == angle(H, center(Circle(A, C, E)), A) mod 360
By angle_to_center on F, G, H, Circle(C, F, G) we get 2 * angle(F, G, H) == angle(F, center(Circle(C, F, G)), H) mod 360
By angle_to_center on G, H, C, Circle(C, F, G) we get 2 * angle(G, H, C) == angle(G, center(Circle(C, F, G)), C) mod 360
By angle_to_center on H, F, C, Circle(C, F, G) we get 2 * angle(H, F, C) == angle(H, center(Circle(C, F, G)), C) mod 360
By angle_to_center on H, C, A, Circle(A, C, E) we get 2 * angle(H, C, A) == angle(H, center(Circle(A, C, E)), A) mod 360
By angle_to_center on G, A, D, Circle(A, B, D) we get 2 * angle(G, A, D) == angle(G, center(Circle(A, B, D)), D) mod 360
By angle_to_center on G, D, A, Circle(A, B, D) we get 2 * angle(G, D, A) == angle(G, center(Circle(A, B, D)), A) mod 360
By angle_to_center on F, H, G, Circle(C, F, G) we get 2 * angle(F, H, G) == angle(F, center(Circle(C, F, G)), G) mod 360
By angle_to_center on G, F, H, Circle(C, F, G) we get 2 * angle(G, F, H) == angle(G, center(Circle(C, F, G)), H) mod 360
By angle_to_center on D, B, A, Circle(A, B, D) we get 2 * angle(D, B, A) == angle(D, center(Circle(A, B, D)), A) mod 360
By angle_to_center on F, G, C, Circle(C, F, G) we get 2 * angle(F, G, C) == angle(F, center(Circle(C, F, G)), C) mod 360
By perpendicular_direction_conditions_v0_r on E, F, midpoint(C, D), H we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(C, D), H) mod 360
By angle_to_center on D, G, B, Circle(A, B, D) we get 2 * angle(D, G, B) == angle(D, center(Circle(A, B, D)), B) mod 360
By angle_to_center on C, G, H, Circle(C, F, G) we get 2 * angle(C, G, H) == angle(C, center(Circle(C, F, G)), H) mod 360
By angle_to_center on B, A, G, Circle(A, B, D) we get 2 * angle(B, A, G) == angle(B, center(Circle(A, B, D)), G) mod 360
By angle_to_center on E, C, A, Circle(A, C, E) we get 2 * angle(E, C, A) == angle(E, center(Circle(A, C, E)), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), H, A, G we get 180 == 2 * direction(midpoint(A, G), H) - 2 * direction(A, G) mod 360
By angle_to_center on D, G, A, Circle(A, B, D) we get 2 * angle(D, G, A) == angle(D, center(Circle(A, B, D)), A) mod 360
By angle_to_center on A, D, B, Circle(A, B, D) we get 2 * angle(A, D, B) == angle(A, center(Circle(A, B, D)), B) mod 360
By angle_to_center on A, G, D, Circle(A, B, D) we get 2 * angle(A, G, D) == angle(A, center(Circle(A, B, D)), D) mod 360
By angle_to_center on H, F, G, Circle(C, F, G) we get 2 * angle(H, F, G) == angle(H, center(Circle(C, F, G)), G) mod 360
By angle_to_center on E, H, A, Circle(A, C, E) we get 2 * angle(E, H, A) == angle(E, center(Circle(A, C, E)), A) mod 360
By angle_to_center on G, B, A, Circle(A, B, D) we get 2 * angle(G, B, A) == angle(G, center(Circle(A, B, D)), A) mod 360
By angle_to_center on C, H, G, Circle(C, F, G) we get 2 * angle(C, H, G) == angle(C, center(Circle(C, F, G)), G) mod 360
By angle_to_center on A, H, E, Circle(A, C, E) we get 2 * angle(A, H, E) == angle(A, center(Circle(A, C, E)), E) mod 360
By angle_to_center on G, C, H, Circle(C, F, G) we get 2 * angle(G, C, H) == angle(G, center(Circle(C, F, G)), H) mod 360
By angle_to_center on H, G, F, Circle(C, F, G) we get 2 * angle(H, G, F) == angle(H, center(Circle(C, F, G)), F) mod 360
By angle_to_center on H, C, G, Circle(C, F, G) we get 2 * angle(H, C, G) == angle(H, center(Circle(C, F, G)), G) mod 360
By angle_to_center on F, C, H, Circle(C, F, G) we get 2 * angle(F, C, H) == angle(F, center(Circle(C, F, G)), H) mod 360
By angle_to_center on G, H, F, Circle(C, F, G) we get 2 * angle(G, H, F) == angle(G, center(Circle(C, F, G)), F) mod 360
By angle_to_center on G, B, D, Circle(A, B, D) we get 2 * angle(G, B, D) == angle(G, center(Circle(A, B, D)), D) mod 360
By angle_to_center on G, C, F, Circle(C, F, G) we get 2 * angle(G, C, F) == angle(G, center(Circle(C, F, G)), F) mod 360
By angle_to_center on C, F, G, Circle(C, F, G) we get 2 * angle(C, F, G) == angle(C, center(Circle(C, F, G)), G) mod 360
By angle_to_center on H, C, F, Circle(C, F, G) we get 2 * angle(H, C, F) == angle(H, center(Circle(C, F, G)), F) mod 360
By angle_to_center on C, E, H, Circle(A, C, E) we get 2 * angle(C, E, H) == angle(C, center(Circle(A, C, E)), H) mod 360
By angle_to_center on D, A, G, Circle(A, B, D) we get 2 * angle(D, A, G) == angle(D, center(Circle(A, B, D)), G) mod 360
By angle_to_center on D, A, B, Circle(A, B, D) we get 2 * angle(D, A, B) == angle(D, center(Circle(A, B, D)), B) mod 360
By angle_to_center on B, G, A, Circle(A, B, D) we get 2 * angle(B, G, A) == angle(B, center(Circle(A, B, D)), A) mod 360
By angle_to_center on G, A, B, Circle(A, B, D) we get 2 * angle(G, A, B) == angle(G, center(Circle(A, B, D)), B) mod 360
By angle_to_center on A, E, H, Circle(A, C, E) we get 2 * angle(A, E, H) == angle(A, center(Circle(A, C, E)), H) mod 360
By angle_to_center on A, C, E, Circle(A, C, E) we get 2 * angle(A, C, E) == angle(A, center(Circle(A, C, E)), E) mod 360
By angle_to_center on H, A, C, Circle(A, C, E) we get 2 * angle(H, A, C) == angle(H, center(Circle(A, C, E)), C) mod 360
By angle_to_center on E, A, H, Circle(A, C, E) we get 2 * angle(E, A, H) == angle(E, center(Circle(A, C, E)), H) mod 360
By angle_to_center on C, A, E, Circle(A, C, E) we get 2 * angle(C, A, E) == angle(C, center(Circle(A, C, E)), E) mod 360
By angle_to_center on A, C, H, Circle(A, C, E) we get 2 * angle(A, C, H) == angle(A, center(Circle(A, C, E)), H) mod 360
By angle_to_center on H, A, E, Circle(A, C, E) we get 2 * angle(H, A, E) == angle(H, center(Circle(A, C, E)), E) mod 360
By angle_to_center on A, B, G, Circle(A, B, D) we get 2 * angle(A, B, G) == angle(A, center(Circle(A, B, D)), G) mod 360
By angle_to_center on B, A, D, Circle(A, B, D) we get 2 * angle(B, A, D) == angle(B, center(Circle(A, B, D)), D) mod 360
By angle_to_center on C, G, F, Circle(C, F, G) we get 2 * angle(C, G, F) == angle(C, center(Circle(C, F, G)), F) mod 360
By angle_to_center on F, C, G, Circle(C, F, G) we get 2 * angle(F, C, G) == angle(F, center(Circle(C, F, G)), G) mod 360
By angle_to_center on C, A, H, Circle(A, C, E) we get 2 * angle(C, A, H) == angle(C, center(Circle(A, C, E)), H) mod 360
By angle_to_center on G, F, C, Circle(C, F, G) we get 2 * angle(G, F, C) == angle(G, center(Circle(C, F, G)), C) mod 360
By angle_to_center on H, E, C, Circle(A, C, E) we get 2 * angle(H, E, C) == angle(H, center(Circle(A, C, E)), C) mod 360
By angle_to_center on E, H, C, Circle(A, C, E) we get 2 * angle(E, H, C) == angle(E, center(Circle(A, C, E)), C) mod 360
By angle_to_center on E, C, H, Circle(A, C, E) we get 2 * angle(E, C, H) == angle(E, center(Circle(A, C, E)), H) mod 360
By angle_to_center on B, D, G, Circle(A, B, D) we get 2 * angle(B, D, G) == angle(B, center(Circle(A, B, D)), G) mod 360
By angle_to_center on D, B, G, Circle(A, B, D) we get 2 * angle(D, B, G) == angle(D, center(Circle(A, B, D)), G) mod 360
By angle_to_center on F, H, C, Circle(C, F, G) we get 2 * angle(F, H, C) == angle(F, center(Circle(C, F, G)), C) mod 360
By angle_to_center on A, G, B, Circle(A, B, D) we get 2 * angle(A, G, B) == angle(A, center(Circle(A, B, D)), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(A, G), midpoint(E, F), E we get 180 == 2 * direction(midpoint(C, D), midpoint(A, G)) - 2 * direction(midpoint(E, F), E) mod 360
By angle_to_center on G, D, B, Circle(A, B, D) we get 2 * angle(G, D, B) == angle(G, center(Circle(A, B, D)), B) mod 360
By perpendicular_direction_conditions_v0_r on F, E, midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By same_angle_v3 on D, H, C, A we get angle(H, D, A) == angle(C, D, A) + 180 mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(E, F), midpoint(A, G), A we get 180 == 2 * direction(H, midpoint(E, F)) - 2 * direction(midpoint(A, G), A) mod 360
By same_angle_v2 on D, I, J, H we get angle(I, D, H) == angle(J, D, H) + 180 mod 360
By same_angle_v1 on D, J, A, H we get angle(A, D, H) == angle(J, D, H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), D, A, midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), D) - 2 * direction(A, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), D, midpoint(E, F), E we get 180 == 2 * direction(midpoint(A, G), D) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on A, G, midpoint(A, G), C we get 180 == 2 * direction(A, G) - 2 * direction(midpoint(A, G), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), H, F, E we get 180 == 2 * direction(midpoint(A, G), H) - 2 * direction(F, E) mod 360
By same_angle_v3 on D, C, H, B we get angle(C, D, B) == angle(H, D, B) + 180 mod 360
By same_angle_v2 on D, C, H, E we get angle(C, D, E) == angle(H, D, E) + 180 mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(A, G), G, A we get 180 == 2 * direction(midpoint(C, D), midpoint(A, G)) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), G, H, D we get 180 == 2 * direction(midpoint(A, G), G) - 2 * direction(H, D) mod 360
By same_angle_v2 on D, C, H, G we get angle(C, D, G) == angle(H, D, G) + 180 mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(A, G), midpoint(E, F), F we get 180 == 2 * direction(midpoint(C, D), midpoint(A, G)) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, midpoint(A, G), C we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(midpoint(A, G), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), midpoint(E, F), E we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(midpoint(E, F), E) mod 360
By same_angle_v1 on H, D, C, F we get angle(C, H, F) == angle(D, H, F) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, G), E, F we get 180 == 2 * direction(C, midpoint(A, G)) - 2 * direction(E, F) mod 360
By same_angle_v0 on H, C, D, G we get angle(C, H, G) == angle(D, H, G) mod 360
By same_angle_v0 on H, C, D, E we get angle(C, H, E) == angle(D, H, E) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), F, E we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(E, F), midpoint(E, F), E we get 180 == 2 * direction(H, midpoint(E, F)) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), H, E, F we get 180 == 2 * direction(midpoint(E, F), H) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, E, midpoint(E, F) we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on F, E, D, H we get 180 == 2 * direction(F, E) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(E, F), E, midpoint(E, F) we get 180 == 2 * direction(midpoint(A, G), midpoint(E, F)) - 2 * direction(E, midpoint(E, F)) mod 360
By same_angle_v2 on D, C, H, I we get angle(C, D, I) == angle(H, D, I) + 180 mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, C, midpoint(A, G) we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(C, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, A, C, midpoint(A, G) we get 180 == 2 * direction(G, A) - 2 * direction(C, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on E, F, midpoint(A, G), C we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(A, G), C) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, G), D, H we get 180 == 2 * direction(G, midpoint(A, G)) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(A, G), A, G we get 180 == 2 * direction(H, midpoint(A, G)) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, A, midpoint(A, G) we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(A, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), H, midpoint(E, F), F we get 180 == 2 * direction(midpoint(E, F), H) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), C, F, midpoint(E, F) we get 180 == 2 * direction(midpoint(A, G), C) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(C, D), E, midpoint(E, F) we get 180 == 2 * direction(midpoint(A, G), midpoint(C, D)) - 2 * direction(E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, H, F, E we get 180 == 2 * direction(D, H) - 2 * direction(F, E) mod 360
By same_angle_v3 on D, I, A, H we get angle(I, D, H) == angle(A, D, H) + 180 mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(A, G), midpoint(A, G), A we get 180 == 2 * direction(midpoint(C, D), midpoint(A, G)) - 2 * direction(midpoint(A, G), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), H, E, F we get 180 == 2 * direction(midpoint(A, G), H) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), H, F, midpoint(E, F) we get 180 == 2 * direction(midpoint(A, G), H) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(A, G), F, E we get 180 == 2 * direction(H, midpoint(A, G)) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), D, H we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(A, G), F, E we get 180 == 2 * direction(midpoint(C, D), midpoint(A, G)) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, G), midpoint(E, F), H we get 180 == 2 * direction(G, midpoint(A, G)) - 2 * direction(midpoint(E, F), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), G, C, midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), G) - 2 * direction(C, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, G), H, midpoint(A, G) we get 180 == 2 * direction(A, midpoint(A, G)) - 2 * direction(H, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, G), midpoint(A, G), midpoint(E, F) we get 180 == 2 * direction(G, midpoint(A, G)) - 2 * direction(midpoint(A, G), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on F, E, midpoint(E, F), midpoint(A, G) we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(E, F), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(A, G), A, midpoint(A, G) we get 180 == 2 * direction(H, midpoint(A, G)) - 2 * direction(A, midpoint(A, G)) mod 360
By same_angle_v3 on D, H, C, F we get angle(H, D, F) == angle(C, D, F) + 180 mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), A, G we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(A, G), A, G we get 180 == 2 * direction(midpoint(E, F), midpoint(A, G)) - 2 * direction(A, G) mod 360
By same_angle_v1 on H, C, D, A we get angle(C, H, A) == angle(D, H, A) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), midpoint(A, G), midpoint(C, D) we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(midpoint(A, G), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, G), midpoint(A, G), C we get 180 == 2 * direction(A, midpoint(A, G)) - 2 * direction(midpoint(A, G), C) mod 360
By perpendicular_direction_conditions_v0_r on F, E, midpoint(A, G), midpoint(E, F) we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(A, G), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, G), midpoint(A, G), G we get 180 == 2 * direction(C, midpoint(A, G)) - 2 * direction(midpoint(A, G), G) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), midpoint(A, G), D we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(midpoint(A, G), D) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(A, G), midpoint(E, F), F we get 180 == 2 * direction(H, midpoint(A, G)) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), midpoint(A, G), G we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(midpoint(A, G), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), A, midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(midpoint(A, G), A) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, midpoint(A, G), H we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(midpoint(A, G), H) mod 360
By in_imply_collinear on H, midpoint(E, F), midpoint(C, D) we get collinear(H, midpoint(C, D), midpoint(E, F))
By perpendicular_direction_conditions_v0_r on midpoint(A, G), G, midpoint(A, G), midpoint(E, F) we get 180 == 2 * direction(midpoint(A, G), G) - 2 * direction(midpoint(A, G), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), A, midpoint(C, D), midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), A) - 2 * direction(midpoint(C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(E, F), F, E we get 180 == 2 * direction(midpoint(A, G), midpoint(E, F)) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), midpoint(E, F), H we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(midpoint(E, F), H) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), H, midpoint(C, D) we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(A, G), midpoint(E, F), F we get 180 == 2 * direction(midpoint(E, F), midpoint(A, G)) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(C, D), G, midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), midpoint(C, D)) - 2 * direction(G, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, H, E, midpoint(E, F) we get 180 == 2 * direction(D, H) - 2 * direction(E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(A, G), E, midpoint(E, F) we get 180 == 2 * direction(midpoint(C, D), midpoint(A, G)) - 2 * direction(E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), E, F we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, G), midpoint(A, G), H we get 180 == 2 * direction(A, midpoint(A, G)) - 2 * direction(midpoint(A, G), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), A, H, midpoint(E, F) we get 180 == 2 * direction(midpoint(A, G), A) - 2 * direction(H, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, G), midpoint(A, G), midpoint(C, D) we get 180 == 2 * direction(A, midpoint(A, G)) - 2 * direction(midpoint(A, G), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), G, midpoint(C, D), H we get 180 == 2 * direction(midpoint(A, G), G) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, G), C, midpoint(A, G) we get 180 == 2 * direction(G, midpoint(A, G)) - 2 * direction(C, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), midpoint(C, D), H we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on A, G, H, D we get 180 == 2 * direction(A, G) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on E, F, H, midpoint(A, G) we get 180 == 2 * direction(E, F) - 2 * direction(H, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(E, F), G, midpoint(A, G) we get 180 == 2 * direction(H, midpoint(E, F)) - 2 * direction(G, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, G), midpoint(C, D), H we get 180 == 2 * direction(G, midpoint(A, G)) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on F, E, H, midpoint(E, F) we get 180 == 2 * direction(F, E) - 2 * direction(H, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, H, midpoint(E, F), E we get 180 == 2 * direction(D, H) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), D, midpoint(A, G), A we get 180 == 2 * direction(midpoint(A, G), D) - 2 * direction(midpoint(A, G), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), A, midpoint(A, G), midpoint(C, D) we get 180 == 2 * direction(midpoint(A, G), A) - 2 * direction(midpoint(A, G), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(A, G), E, midpoint(E, F) we get 180 == 2 * direction(D, midpoint(A, G)) - 2 * direction(E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(A, G), A, G we get 180 == 2 * direction(midpoint(C, D), midpoint(A, G)) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, G), A, midpoint(A, G) we get 180 == 2 * direction(C, midpoint(A, G)) - 2 * direction(A, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on E, F, H, midpoint(C, D) we get 180 == 2 * direction(E, F) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), G, midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(midpoint(A, G), G) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By same_angle_v2 on D, H, C, J we get angle(H, D, J) == angle(C, D, J) + 180 mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, C, midpoint(A, G) we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(C, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), H, D we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(C, D), F, E we get 180 == 2 * direction(midpoint(A, G), midpoint(C, D)) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on H, D, F, E we get 180 == 2 * direction(H, D) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), H, midpoint(A, G) we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(H, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), H, midpoint(E, F) we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(H, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, F, midpoint(A, G), D we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(A, G), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), A, midpoint(A, G), midpoint(E, F) we get 180 == 2 * direction(midpoint(A, G), A) - 2 * direction(midpoint(A, G), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), H, midpoint(A, G), A we get 180 == 2 * direction(midpoint(A, G), H) - 2 * direction(midpoint(A, G), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), G, midpoint(A, G), D we get 180 == 2 * direction(midpoint(A, G), G) - 2 * direction(midpoint(A, G), D) mod 360
By in_imply_collinear on orthocenter(C, D, G), G, A we get collinear(A, G, orthocenter(C, D, G))
By perpendicular_direction_conditions_v0_r on A, G, midpoint(A, G), D we get 180 == 2 * direction(A, G) - 2 * direction(midpoint(A, G), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), A, midpoint(E, F), midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), A) - 2 * direction(midpoint(E, F), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, G), midpoint(A, G), midpoint(C, D) we get 180 == 2 * direction(G, midpoint(A, G)) - 2 * direction(midpoint(A, G), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(A, G), G, A we get 180 == 2 * direction(midpoint(E, F), midpoint(A, G)) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, midpoint(A, G), H we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(midpoint(A, G), H) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, G), D, H we get 180 == 2 * direction(A, midpoint(A, G)) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), C, midpoint(E, F), F we get 180 == 2 * direction(midpoint(A, G), C) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), D, E, F we get 180 == 2 * direction(midpoint(A, G), D) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, G), H, D we get 180 == 2 * direction(A, midpoint(A, G)) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, G), F, midpoint(E, F) we get 180 == 2 * direction(C, midpoint(A, G)) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, E, F we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(E, F), E, midpoint(E, F) we get 180 == 2 * direction(H, midpoint(E, F)) - 2 * direction(E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(A, G), A, G we get 180 == 2 * direction(D, midpoint(A, G)) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(A, G), midpoint(A, G), A we get 180 == 2 * direction(midpoint(E, F), midpoint(A, G)) - 2 * direction(midpoint(A, G), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(A, G), E, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), midpoint(A, G)) - 2 * direction(E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, midpoint(C, D), H we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), midpoint(E, F), midpoint(A, G) we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(midpoint(E, F), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, midpoint(C, D), midpoint(A, G) we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(midpoint(C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), G, midpoint(A, G) we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(G, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on E, F, midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), C, G, A we get 180 == 2 * direction(midpoint(A, G), C) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on D, H, midpoint(E, F), F we get 180 == 2 * direction(D, H) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, G), midpoint(A, G), C we get 180 == 2 * direction(G, midpoint(A, G)) - 2 * direction(midpoint(A, G), C) mod 360
By perpendicular_direction_conditions_v0_r on G, A, D, H we get 180 == 2 * direction(G, A) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), G, A we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, G), midpoint(E, F), H we get 180 == 2 * direction(A, midpoint(A, G)) - 2 * direction(midpoint(E, F), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), F, E we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, D, H we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, H, midpoint(A, G) we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(H, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, G), midpoint(E, F), F we get 180 == 2 * direction(C, midpoint(A, G)) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on H, D, A, midpoint(A, G) we get 180 == 2 * direction(H, D) - 2 * direction(A, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), A, C, midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), A) - 2 * direction(C, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, G, midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(A, G) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), G, A we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(A, G), G, A we get 180 == 2 * direction(H, midpoint(A, G)) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), H, G, midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), H) - 2 * direction(G, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, A, H, midpoint(E, F) we get 180 == 2 * direction(G, A) - 2 * direction(H, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on G, A, midpoint(A, G), H we get 180 == 2 * direction(G, A) - 2 * direction(midpoint(A, G), H) mod 360
By perpendicular_direction_conditions_v0_r on A, G, midpoint(E, F), midpoint(A, G) we get 180 == 2 * direction(A, G) - 2 * direction(midpoint(E, F), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), G, D, midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), G) - 2 * direction(D, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, G, H, midpoint(E, F) we get 180 == 2 * direction(A, G) - 2 * direction(H, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, H, E, F we get 180 == 2 * direction(D, H) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(E, F), midpoint(E, F), F we get 180 == 2 * direction(midpoint(A, G), midpoint(E, F)) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, midpoint(E, F), E we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, midpoint(A, G), D we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(midpoint(A, G), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), C, midpoint(E, F), E we get 180 == 2 * direction(midpoint(A, G), C) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(A, G), A, midpoint(A, G) we get 180 == 2 * direction(midpoint(C, D), midpoint(A, G)) - 2 * direction(A, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), A, midpoint(E, F), H we get 180 == 2 * direction(midpoint(A, G), A) - 2 * direction(midpoint(E, F), H) mod 360
By perpendicular_direction_conditions_v0_r on G, A, H, midpoint(C, D) we get 180 == 2 * direction(G, A) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, H, midpoint(A, G) we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(H, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), E, midpoint(E, F) we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on F, E, midpoint(E, F), H we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(E, F), H) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, G), H, midpoint(C, D) we get 180 == 2 * direction(G, midpoint(A, G)) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, A, midpoint(A, G), C we get 180 == 2 * direction(G, A) - 2 * direction(midpoint(A, G), C) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), midpoint(A, G), H we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(midpoint(A, G), H) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), E, F we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), H, E, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), H) - 2 * direction(E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(C, D), E, F we get 180 == 2 * direction(midpoint(A, G), midpoint(C, D)) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on H, D, E, F we get 180 == 2 * direction(H, D) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on H, D, midpoint(A, G), A we get 180 == 2 * direction(H, D) - 2 * direction(midpoint(A, G), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), A, midpoint(A, G) we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(A, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, A, midpoint(A, G), D we get 180 == 2 * direction(G, A) - 2 * direction(midpoint(A, G), D) mod 360
By perpendicular_direction_conditions_v0_r on F, E, midpoint(C, D), midpoint(A, G) we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, G), D, midpoint(A, G) we get 180 == 2 * direction(A, midpoint(A, G)) - 2 * direction(D, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, G, midpoint(A, G), midpoint(C, D) we get 180 == 2 * direction(A, G) - 2 * direction(midpoint(A, G), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, F, C, midpoint(A, G) we get 180 == 2 * direction(E, F) - 2 * direction(C, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), midpoint(A, G), A we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(midpoint(A, G), A) mod 360
By perpendicular_direction_conditions_v0_r on A, G, midpoint(A, G), H we get 180 == 2 * direction(A, G) - 2 * direction(midpoint(A, G), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), F, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, F, D, H we get 180 == 2 * direction(E, F) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), F, midpoint(E, F) we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(A, G), F, midpoint(E, F) we get 180 == 2 * direction(D, midpoint(A, G)) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(C, D), G, A we get 180 == 2 * direction(midpoint(A, G), midpoint(C, D)) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), C, E, F we get 180 == 2 * direction(midpoint(A, G), C) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), midpoint(A, G), midpoint(E, F) we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(midpoint(A, G), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), midpoint(E, F), E we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), D, midpoint(A, G) we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(D, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, G), midpoint(E, F), midpoint(A, G) we get 180 == 2 * direction(G, midpoint(A, G)) - 2 * direction(midpoint(E, F), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on F, E, midpoint(A, G), midpoint(C, D) we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(A, G), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(E, F), G, midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), midpoint(E, F)) - 2 * direction(G, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(A, G), G, midpoint(A, G) we get 180 == 2 * direction(midpoint(E, F), midpoint(A, G)) - 2 * direction(G, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, G), midpoint(C, D), H we get 180 == 2 * direction(A, midpoint(A, G)) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, G), midpoint(C, D), midpoint(A, G) we get 180 == 2 * direction(A, midpoint(A, G)) - 2 * direction(midpoint(C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), A, midpoint(C, D), H we get 180 == 2 * direction(midpoint(A, G), A) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), D, H we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on F, E, midpoint(C, D), H we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(E, F), E, F we get 180 == 2 * direction(H, midpoint(E, F)) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), midpoint(A, G), G we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(midpoint(A, G), G) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), F, midpoint(E, F) we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), C, midpoint(A, G) we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(C, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), G, midpoint(E, F), H we get 180 == 2 * direction(midpoint(A, G), G) - 2 * direction(midpoint(E, F), H) mod 360
By perpendicular_direction_conditions_v0_r on A, G, H, midpoint(C, D) we get 180 == 2 * direction(A, G) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on F, E, D, midpoint(A, G) we get 180 == 2 * direction(F, E) - 2 * direction(D, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on A, G, D, H we get 180 == 2 * direction(A, G) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, G), midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(A, midpoint(A, G)) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, G), midpoint(A, G), midpoint(E, F) we get 180 == 2 * direction(A, midpoint(A, G)) - 2 * direction(midpoint(A, G), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on A, G, H, midpoint(A, G) we get 180 == 2 * direction(A, G) - 2 * direction(H, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on F, E, C, midpoint(A, G) we get 180 == 2 * direction(F, E) - 2 * direction(C, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), C, G, midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), C) - 2 * direction(G, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), A, G we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(E, F), F, midpoint(E, F) we get 180 == 2 * direction(H, midpoint(E, F)) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), midpoint(A, G), midpoint(C, D) we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(midpoint(A, G), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on A, G, midpoint(A, G), midpoint(E, F) we get 180 == 2 * direction(A, G) - 2 * direction(midpoint(A, G), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(E, F), E, F we get 180 == 2 * direction(midpoint(A, G), midpoint(E, F)) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(E, F), A, G we get 180 == 2 * direction(midpoint(A, G), midpoint(E, F)) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, G), G, A we get 180 == 2 * direction(C, midpoint(A, G)) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on A, G, midpoint(E, F), H we get 180 == 2 * direction(A, G) - 2 * direction(midpoint(E, F), H) mod 360
By perpendicular_direction_conditions_v0_r on F, E, H, midpoint(C, D) we get 180 == 2 * direction(F, E) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, H, midpoint(C, D) we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on A, G, midpoint(C, D), H we get 180 == 2 * direction(A, G) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), midpoint(C, D), midpoint(A, G) we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(midpoint(C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, G, midpoint(A, G) we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(G, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, H, midpoint(A, G), A we get 180 == 2 * direction(D, H) - 2 * direction(midpoint(A, G), A) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), midpoint(C, D), H we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on G, A, H, midpoint(A, G) we get 180 == 2 * direction(G, A) - 2 * direction(H, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, G), H, D we get 180 == 2 * direction(G, midpoint(A, G)) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on E, F, D, midpoint(A, G) we get 180 == 2 * direction(E, F) - 2 * direction(D, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, G), G, midpoint(A, G) we get 180 == 2 * direction(C, midpoint(A, G)) - 2 * direction(G, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), G, midpoint(C, D), midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), G) - 2 * direction(midpoint(C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, A, G we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(A, G), F, midpoint(E, F) we get 180 == 2 * direction(H, midpoint(A, G)) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), F, E we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), midpoint(A, G), C we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(midpoint(A, G), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), midpoint(E, F), F we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on H, D, midpoint(A, G), G we get 180 == 2 * direction(H, D) - 2 * direction(midpoint(A, G), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, D, midpoint(A, G) we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(D, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on E, F, midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, H, G, A we get 180 == 2 * direction(D, H) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, midpoint(E, F), midpoint(A, G) we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(midpoint(E, F), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), C, midpoint(A, G), G we get 180 == 2 * direction(midpoint(A, G), C) - 2 * direction(midpoint(A, G), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), G, midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(midpoint(A, G), G) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, midpoint(E, F), H we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(midpoint(E, F), H) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), C, midpoint(A, G) we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(C, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, H, G, midpoint(A, G) we get 180 == 2 * direction(D, H) - 2 * direction(G, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), H, midpoint(A, G) we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(H, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), midpoint(A, G), C we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(midpoint(A, G), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), G, midpoint(E, F), midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), G) - 2 * direction(midpoint(E, F), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), midpoint(A, G), D we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(midpoint(A, G), D) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), A, G we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on G, A, D, midpoint(A, G) we get 180 == 2 * direction(G, A) - 2 * direction(D, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), G, D, H we get 180 == 2 * direction(midpoint(A, G), G) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), H, F, E we get 180 == 2 * direction(midpoint(E, F), H) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(E, F), A, midpoint(A, G) we get 180 == 2 * direction(H, midpoint(E, F)) - 2 * direction(A, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(A, G), midpoint(E, F), E we get 180 == 2 * direction(D, midpoint(A, G)) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(A, G), E, F we get 180 == 2 * direction(D, midpoint(A, G)) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), midpoint(E, F), midpoint(A, G) we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(midpoint(E, F), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on F, E, H, D we get 180 == 2 * direction(F, E) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(A, G), midpoint(A, G), G we get 180 == 2 * direction(H, midpoint(A, G)) - 2 * direction(midpoint(A, G), G) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), H, midpoint(C, D) we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, F, midpoint(E, F) we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), midpoint(A, G), A we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(midpoint(A, G), A) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), midpoint(A, G), midpoint(E, F) we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(midpoint(A, G), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on F, E, midpoint(A, G), D we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(A, G), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, midpoint(A, G), midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(midpoint(A, G), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), D, F, E we get 180 == 2 * direction(midpoint(A, G), D) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), G, midpoint(A, G) we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(G, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), A, H, midpoint(C, D) we get 180 == 2 * direction(midpoint(A, G), A) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, G), midpoint(A, G), H we get 180 == 2 * direction(G, midpoint(A, G)) - 2 * direction(midpoint(A, G), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), G, midpoint(A, G), H we get 180 == 2 * direction(midpoint(A, G), G) - 2 * direction(midpoint(A, G), H) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), A, midpoint(A, G) we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(A, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(A, G), G, midpoint(A, G) we get 180 == 2 * direction(D, midpoint(A, G)) - 2 * direction(G, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(A, G), F, midpoint(E, F) we get 180 == 2 * direction(midpoint(C, D), midpoint(A, G)) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), E, midpoint(E, F) we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, F, H, D we get 180 == 2 * direction(E, F) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on E, F, midpoint(A, G), midpoint(C, D) we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(A, G), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), H, midpoint(E, F), F we get 180 == 2 * direction(midpoint(A, G), H) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on F, E, midpoint(A, G), C we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(A, G), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), H, midpoint(A, G), G we get 180 == 2 * direction(midpoint(E, F), H) - 2 * direction(midpoint(A, G), G) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), G, A we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), H, E, midpoint(E, F) we get 180 == 2 * direction(midpoint(A, G), H) - 2 * direction(E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), midpoint(C, D), midpoint(A, G) we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(midpoint(C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, G, C, midpoint(A, G) we get 180 == 2 * direction(A, G) - 2 * direction(C, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, G), midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(G, midpoint(A, G)) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), E, F we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(A, G), E, F we get 180 == 2 * direction(midpoint(E, F), midpoint(A, G)) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(C, D), F, midpoint(E, F) we get 180 == 2 * direction(midpoint(A, G), midpoint(C, D)) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on A, G, midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(A, G) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(C, D), midpoint(E, F), E we get 180 == 2 * direction(midpoint(A, G), midpoint(C, D)) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on G, A, midpoint(A, G), midpoint(E, F) we get 180 == 2 * direction(G, A) - 2 * direction(midpoint(A, G), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on F, E, H, midpoint(A, G) we get 180 == 2 * direction(F, E) - 2 * direction(H, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), H, midpoint(A, G), G we get 180 == 2 * direction(midpoint(A, G), H) - 2 * direction(midpoint(A, G), G) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, G), H, midpoint(E, F) we get 180 == 2 * direction(A, midpoint(A, G)) - 2 * direction(H, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), C, E, midpoint(E, F) we get 180 == 2 * direction(midpoint(A, G), C) - 2 * direction(E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, midpoint(E, F), F we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), G, H, midpoint(C, D) we get 180 == 2 * direction(midpoint(A, G), G) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, midpoint(A, G), C we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(midpoint(A, G), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), D, A, G we get 180 == 2 * direction(midpoint(A, G), D) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(A, G), midpoint(A, G), G we get 180 == 2 * direction(midpoint(E, F), midpoint(A, G)) - 2 * direction(midpoint(A, G), G) mod 360
By perpendicular_direction_conditions_v0_r on G, A, H, D we get 180 == 2 * direction(G, A) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), C, F, E we get 180 == 2 * direction(midpoint(A, G), C) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), D, midpoint(A, G), G we get 180 == 2 * direction(midpoint(A, G), D) - 2 * direction(midpoint(A, G), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, H, midpoint(C, D) we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(C, D), A, G we get 180 == 2 * direction(midpoint(A, G), midpoint(C, D)) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), midpoint(A, G), H we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(midpoint(A, G), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(E, F), F, midpoint(E, F) we get 180 == 2 * direction(midpoint(A, G), midpoint(E, F)) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, G), E, midpoint(E, F) we get 180 == 2 * direction(C, midpoint(A, G)) - 2 * direction(E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on H, D, G, midpoint(A, G) we get 180 == 2 * direction(H, D) - 2 * direction(G, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, F, E we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), A, midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(midpoint(A, G), A) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), midpoint(A, G), G we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(midpoint(A, G), G) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, G), midpoint(C, D), midpoint(A, G) we get 180 == 2 * direction(G, midpoint(A, G)) - 2 * direction(midpoint(C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(A, G), F, E we get 180 == 2 * direction(D, midpoint(A, G)) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), midpoint(E, F), E we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(E, F), midpoint(A, G), A we get 180 == 2 * direction(midpoint(A, G), midpoint(E, F)) - 2 * direction(midpoint(A, G), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, midpoint(A, G), midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(midpoint(A, G), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, midpoint(A, G), midpoint(C, D) we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(midpoint(A, G), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), C, midpoint(A, G), A we get 180 == 2 * direction(midpoint(A, G), C) - 2 * direction(midpoint(A, G), A) mod 360
By perpendicular_direction_conditions_v0_r on H, D, midpoint(E, F), F we get 180 == 2 * direction(H, D) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(C, D), midpoint(A, G), G we get 180 == 2 * direction(midpoint(A, G), midpoint(C, D)) - 2 * direction(midpoint(A, G), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(A, G), F, E we get 180 == 2 * direction(midpoint(E, F), midpoint(A, G)) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on H, D, G, A we get 180 == 2 * direction(H, D) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), H, midpoint(E, F), E we get 180 == 2 * direction(midpoint(E, F), H) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on D, H, A, G we get 180 == 2 * direction(D, H) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), D, midpoint(A, G) we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(D, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(A, G), E, F we get 180 == 2 * direction(H, midpoint(A, G)) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(A, G), G, midpoint(A, G) we get 180 == 2 * direction(midpoint(C, D), midpoint(A, G)) - 2 * direction(G, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on H, D, A, G we get 180 == 2 * direction(H, D) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(E, F), A, midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), midpoint(E, F)) - 2 * direction(A, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, G), midpoint(E, F), E we get 180 == 2 * direction(C, midpoint(A, G)) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), H, G, A we get 180 == 2 * direction(midpoint(A, G), H) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, midpoint(A, G), G we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(midpoint(A, G), G) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(E, F), A, G we get 180 == 2 * direction(H, midpoint(E, F)) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), H, A, midpoint(A, G) we get 180 == 2 * direction(midpoint(E, F), H) - 2 * direction(A, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(E, F), midpoint(E, F), E we get 180 == 2 * direction(midpoint(A, G), midpoint(E, F)) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, G), H, midpoint(E, F) we get 180 == 2 * direction(G, midpoint(A, G)) - 2 * direction(H, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on H, D, F, midpoint(E, F) we get 180 == 2 * direction(H, D) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, D, midpoint(A, G) we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(D, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), H, G, midpoint(A, G) we get 180 == 2 * direction(midpoint(E, F), H) - 2 * direction(G, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, G), midpoint(A, G), A we get 180 == 2 * direction(C, midpoint(A, G)) - 2 * direction(midpoint(A, G), A) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(A, G), midpoint(A, G), A we get 180 == 2 * direction(H, midpoint(A, G)) - 2 * direction(midpoint(A, G), A) mod 360
By perpendicular_direction_conditions_v0_r on E, F, midpoint(A, G), midpoint(E, F) we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(A, G), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), H, F, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), H) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, F, midpoint(C, D), midpoint(A, G) we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, G), midpoint(E, F), midpoint(A, G) we get 180 == 2 * direction(A, midpoint(A, G)) - 2 * direction(midpoint(E, F), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), H, midpoint(A, G), A we get 180 == 2 * direction(midpoint(E, F), H) - 2 * direction(midpoint(A, G), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, midpoint(C, D), midpoint(A, G) we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(midpoint(C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, midpoint(E, F), H we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(midpoint(E, F), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), D, G, A we get 180 == 2 * direction(midpoint(A, G), D) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), D, E, midpoint(E, F) we get 180 == 2 * direction(midpoint(A, G), D) - 2 * direction(E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, midpoint(E, F), midpoint(A, G) we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(midpoint(E, F), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on H, D, E, midpoint(E, F) we get 180 == 2 * direction(H, D) - 2 * direction(E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(E, F), G, A we get 180 == 2 * direction(H, midpoint(E, F)) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, midpoint(C, D), H we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), A, H, midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), A) - 2 * direction(H, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), G, H, midpoint(E, F) we get 180 == 2 * direction(midpoint(A, G), G) - 2 * direction(H, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, H, D we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, G), midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(A, midpoint(A, G)) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, G), midpoint(A, G), D we get 180 == 2 * direction(A, midpoint(A, G)) - 2 * direction(midpoint(A, G), D) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), H, midpoint(E, F) we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(H, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(E, F), midpoint(A, G), G we get 180 == 2 * direction(midpoint(A, G), midpoint(E, F)) - 2 * direction(midpoint(A, G), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, H, D we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), A, H, D we get 180 == 2 * direction(midpoint(A, G), A) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), G, H, midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), G) - 2 * direction(H, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), midpoint(E, F), H we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(midpoint(E, F), H) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), midpoint(E, F), F we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on G, A, midpoint(C, D), midpoint(A, G) we get 180 == 2 * direction(G, A) - 2 * direction(midpoint(C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), A, D, H we get 180 == 2 * direction(midpoint(A, G), A) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on D, H, midpoint(A, G), G we get 180 == 2 * direction(D, H) - 2 * direction(midpoint(A, G), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), G, midpoint(A, G) we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(G, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, A, midpoint(A, G), midpoint(C, D) we get 180 == 2 * direction(G, A) - 2 * direction(midpoint(A, G), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, H, F, midpoint(E, F) we get 180 == 2 * direction(D, H) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, G), midpoint(A, G), D we get 180 == 2 * direction(G, midpoint(A, G)) - 2 * direction(midpoint(A, G), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, midpoint(A, G), midpoint(C, D) we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(midpoint(A, G), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(E, F), G, A we get 180 == 2 * direction(midpoint(A, G), midpoint(E, F)) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), E, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, F, H, midpoint(E, F) we get 180 == 2 * direction(E, F) - 2 * direction(H, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), C, A, G we get 180 == 2 * direction(midpoint(A, G), C) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(A, G), midpoint(E, F), E we get 180 == 2 * direction(H, midpoint(A, G)) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(A, G), E, midpoint(E, F) we get 180 == 2 * direction(H, midpoint(A, G)) - 2 * direction(E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), D, F, midpoint(E, F) we get 180 == 2 * direction(midpoint(A, G), D) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), A, midpoint(A, G), C we get 180 == 2 * direction(midpoint(A, G), A) - 2 * direction(midpoint(A, G), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), G, midpoint(A, G), midpoint(C, D) we get 180 == 2 * direction(midpoint(A, G), G) - 2 * direction(midpoint(A, G), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, F, midpoint(E, F), midpoint(A, G) we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(E, F), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, G, D, midpoint(A, G) we get 180 == 2 * direction(A, G) - 2 * direction(D, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(C, D), A, midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), midpoint(C, D)) - 2 * direction(A, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), H, A, G we get 180 == 2 * direction(midpoint(E, F), H) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, G), F, E we get 180 == 2 * direction(C, midpoint(A, G)) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(A, G), G, A we get 180 == 2 * direction(D, midpoint(A, G)) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, G), H, midpoint(C, D) we get 180 == 2 * direction(A, midpoint(A, G)) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(E, F), midpoint(A, G), G we get 180 == 2 * direction(H, midpoint(E, F)) - 2 * direction(midpoint(A, G), G) mod 360
By perpendicular_direction_conditions_v0_r on F, E, midpoint(A, G), H we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(A, G), H) mod 360
By perpendicular_direction_conditions_v0_r on D, H, A, midpoint(A, G) we get 180 == 2 * direction(D, H) - 2 * direction(A, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, midpoint(A, G), D we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(midpoint(A, G), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), H, midpoint(E, F), E we get 180 == 2 * direction(midpoint(A, G), H) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(C, D), midpoint(A, G), A we get 180 == 2 * direction(midpoint(A, G), midpoint(C, D)) - 2 * direction(midpoint(A, G), A) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(A, G), midpoint(E, F), F we get 180 == 2 * direction(D, midpoint(A, G)) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on A, G, midpoint(C, D), midpoint(A, G) we get 180 == 2 * direction(A, G) - 2 * direction(midpoint(C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, G), C, midpoint(A, G) we get 180 == 2 * direction(A, midpoint(A, G)) - 2 * direction(C, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, G), A, G we get 180 == 2 * direction(C, midpoint(A, G)) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(A, G), midpoint(A, G), G we get 180 == 2 * direction(D, midpoint(A, G)) - 2 * direction(midpoint(A, G), G) mod 360
By perpendicular_direction_conditions_v0_r on H, D, midpoint(E, F), E we get 180 == 2 * direction(H, D) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), C, A, midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), C) - 2 * direction(A, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, A, midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(G, A) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on G, A, midpoint(C, D), H we get 180 == 2 * direction(G, A) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), D, midpoint(E, F), F we get 180 == 2 * direction(midpoint(A, G), D) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(A, G), midpoint(E, F), E we get 180 == 2 * direction(midpoint(E, F), midpoint(A, G)) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), midpoint(E, F), F we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(A, G), G, midpoint(A, G) we get 180 == 2 * direction(H, midpoint(A, G)) - 2 * direction(G, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(A, G), F, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), midpoint(A, G)) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(A, G), A, midpoint(A, G) we get 180 == 2 * direction(D, midpoint(A, G)) - 2 * direction(A, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), H, A, midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), H) - 2 * direction(A, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), A, midpoint(A, G), D we get 180 == 2 * direction(midpoint(A, G), A) - 2 * direction(midpoint(A, G), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(A, G), midpoint(A, G), G we get 180 == 2 * direction(midpoint(C, D), midpoint(A, G)) - 2 * direction(midpoint(A, G), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(C, D), midpoint(E, F), F we get 180 == 2 * direction(midpoint(A, G), midpoint(C, D)) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(E, F), F, E we get 180 == 2 * direction(H, midpoint(E, F)) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on F, E, midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, A, midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(G, A) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(A, G), midpoint(A, G), A we get 180 == 2 * direction(D, midpoint(A, G)) - 2 * direction(midpoint(A, G), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, H, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(H, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, G, A we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), H, G, A we get 180 == 2 * direction(midpoint(E, F), H) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), midpoint(A, G), A we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(midpoint(A, G), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), G, midpoint(A, G), C we get 180 == 2 * direction(midpoint(A, G), G) - 2 * direction(midpoint(A, G), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, midpoint(A, G), A we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(midpoint(A, G), A) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, G), H, midpoint(A, G) we get 180 == 2 * direction(G, midpoint(A, G)) - 2 * direction(H, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, G), midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(G, midpoint(A, G)) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), A, midpoint(A, G), H we get 180 == 2 * direction(midpoint(A, G), A) - 2 * direction(midpoint(A, G), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), A, D, midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), A) - 2 * direction(D, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(A, G), D, midpoint(A, G) we get 180 == 2 * direction(G, midpoint(A, G)) - 2 * direction(D, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(E, F), midpoint(E, F), F we get 180 == 2 * direction(H, midpoint(E, F)) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), A, midpoint(A, G) we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(A, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on E, F, midpoint(E, F), H we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(E, F), H) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), H, D we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(A, G), A, midpoint(A, G) we get 180 == 2 * direction(midpoint(E, F), midpoint(A, G)) - 2 * direction(A, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, H, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(H, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, F, midpoint(A, G), H we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(A, G), H) mod 360
By perpendicular_direction_conditions_v0_r on G, A, midpoint(E, F), H we get 180 == 2 * direction(G, A) - 2 * direction(midpoint(E, F), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), D, G, midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), D) - 2 * direction(G, midpoint(A, G)) mod 360
By in_imply_collinear on midpoint(E, F), H, midpoint(A, G) we get collinear(H, midpoint(A, G), midpoint(E, F))
By in_imply_collinear on orthocenter(C, D, G), A, midpoint(A, G) we get collinear(A, midpoint(A, G), orthocenter(C, D, G))
By in_imply_collinear on midpoint(A, G), D, H we get collinear(D, H, midpoint(A, G))
By in_imply_collinear on midpoint(A, G), midpoint(C, D), H we get collinear(H, midpoint(A, G), midpoint(C, D))
By in_imply_collinear on orthocenter(A, C, D), D, F we get collinear(D, F, orthocenter(A, C, D))
By probably_between_and_collinear_implies_between on H, D, C we get between(C, D, H)
By in_imply_collinear on midpoint(A, G), midpoint(C, D), midpoint(E, F) we get collinear(midpoint(A, G), midpoint(C, D), midpoint(E, F))
By in_imply_collinear on orthocenter(A, C, D), midpoint(A, G), A we get collinear(A, midpoint(A, G), orthocenter(A, C, D))
By sas_anti_similarity on G, C, A, F, midpoint(C, D), D we get anti_similar_triangles(A, C, G, D, midpoint(C, D), F)
By in_imply_collinear on orthocenter(C, D, G), D, E we get collinear(D, E, orthocenter(C, D, G))
By in_imply_collinear on orthocenter(A, C, D), A, G we get collinear(A, G, orthocenter(A, C, D))
By sas_anti_similarity on C, midpoint(C, D), E, G, H, F we get anti_similar_triangles(C, E, midpoint(C, D), G, F, H)
By sas_similarity on C, midpoint(C, D), E, A, H, E we get similar_triangles(A, E, H, C, E, midpoint(C, D))
By sas_anti_similarity on midpoint(E, F), D, F, midpoint(E, F), D, E we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_similarity on E, midpoint(C, D), C, E, D, F we get similar_triangles(C, E, midpoint(C, D), F, E, D)
By sas_similarity on E, H, A, C, midpoint(C, D), F we get similar_triangles(A, E, H, F, C, midpoint(C, D))
By in_imply_collinear on orthocenter(A, C, D), G, midpoint(A, G) we get collinear(G, midpoint(A, G), orthocenter(A, C, D))
By aa_anti_similarity on E, midpoint(E, F), C, F, midpoint(E, F), C we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_anti_similarity on G, H, F, C, midpoint(C, D), E we get anti_similar_triangles(C, E, midpoint(C, D), G, F, H)
By sas_similarity on C, midpoint(C, D), F, E, D, F we get similar_triangles(C, F, midpoint(C, D), E, F, D)
By in_imply_collinear on orthocenter(C, D, G), midpoint(A, G), G we get collinear(G, midpoint(A, G), orthocenter(C, D, G))
By sas_anti_congruence on E, midpoint(E, F), D, F, midpoint(E, F), D we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_anti_similarity on E, C, midpoint(E, F), F, C, midpoint(E, F) we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By collinear_definition on C, H, midpoint(E, F) we get H in Line(C, midpoint(E, F)), midpoint(E, F) in Line(C, H), Line(C, H) == Line(C, midpoint(E, F)), 0 == 2 * angle(H, C, midpoint(E, F)) mod 360
By sas_anti_similarity on G, H, F, F, midpoint(C, D), C we get anti_similar_triangles(C, F, midpoint(C, D), F, G, H)
By sas_anti_congruence on F, C, midpoint(E, F), E, C, midpoint(E, F) we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By log_of_2_times_distance on D, C, midpoint(C, D), D we get log(distance(C, D)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(D, midpoint(C, D)))
By sas_anti_similarity on F, midpoint(C, D), D, E, C, F we get anti_similar_triangles(C, E, F, midpoint(C, D), F, D)
By collinear_definition on C, midpoint(C, D), H we get midpoint(C, D) in Line(C, H), H in Line(C, midpoint(C, D)), Line(C, H) == Line(C, midpoint(C, D)), 0 == 2 * angle(midpoint(C, D), C, H) mod 360
By sas_anti_congruence on D, midpoint(E, F), F, D, midpoint(E, F), E we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By aa_anti_similarity on F, C, midpoint(E, F), E, C, midpoint(E, F) we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_anti_similarity on E, midpoint(E, F), D, F, midpoint(E, F), D we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By asa_anti_congruence on C, midpoint(E, F), F, C, midpoint(E, F), E we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_similarity on A, C, G, D, midpoint(C, D), E we get similar_triangles(A, C, G, D, midpoint(C, D), E)
By aa_anti_similarity on F, midpoint(E, F), C, E, midpoint(E, F), C we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_anti_similarity on D, midpoint(E, F), E, D, midpoint(E, F), F we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_anti_similarity on A, C, G, D, midpoint(C, D), F we get anti_similar_triangles(A, C, G, D, midpoint(C, D), F)
By sas_anti_congruence on F, midpoint(E, F), C, E, midpoint(E, F), C we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By collinear_definition on D, midpoint(E, F), midpoint(C, D) we get midpoint(E, F) in Line(D, midpoint(C, D)), midpoint(C, D) in Line(D, midpoint(E, F)), Line(D, midpoint(C, D)) == Line(D, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), D, midpoint(C, D)) mod 360
By aa_anti_similarity on E, midpoint(E, F), D, F, midpoint(E, F), D we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_similarity on G, H, F, E, midpoint(C, D), C we get similar_triangles(C, E, midpoint(C, D), F, G, H)
By sas_similarity on E, C, F, E, midpoint(C, D), D we get similar_triangles(C, E, F, midpoint(C, D), E, D)
By sas_similarity on C, midpoint(C, D), E, F, D, E we get similar_triangles(C, E, midpoint(C, D), F, E, D)
By sas_similarity on A, H, E, F, midpoint(C, D), C we get similar_triangles(A, E, H, F, C, midpoint(C, D))
By collinear_definition on C, midpoint(C, D), midpoint(E, F) we get midpoint(C, D) in Line(C, midpoint(E, F)), midpoint(E, F) in Line(C, midpoint(C, D)), Line(C, midpoint(C, D)) == Line(C, midpoint(E, F)), 0 == 2 * angle(midpoint(C, D), C, midpoint(E, F)) mod 360
By sas_anti_congruence on E, C, midpoint(E, F), F, C, midpoint(E, F) we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_similarity on G, H, F, C, midpoint(C, D), F we get similar_triangles(C, F, midpoint(C, D), G, F, H)
By sas_anti_congruence on C, midpoint(E, F), E, C, midpoint(E, F), F we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_anti_similarity on E, midpoint(C, D), D, F, C, E we get anti_similar_triangles(C, E, F, midpoint(C, D), D, E)
By sas_anti_similarity on F, D, midpoint(E, F), E, D, midpoint(E, F) we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_similarity on E, midpoint(C, D), D, G, C, A we get similar_triangles(A, C, G, D, midpoint(C, D), E)
By sas_anti_similarity on D, midpoint(C, D), F, A, C, G we get anti_similar_triangles(A, C, G, D, midpoint(C, D), F)
By asa_anti_congruence on D, midpoint(E, F), F, D, midpoint(E, F), E we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_anti_similarity on E, D, F, C, midpoint(C, D), E we get anti_similar_triangles(C, E, midpoint(C, D), E, F, D)
By sas_anti_similarity on F, midpoint(C, D), C, E, D, F we get anti_similar_triangles(C, F, midpoint(C, D), F, E, D)
By sas_anti_congruence on midpoint(E, F), D, E, midpoint(E, F), D, F we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_anti_similarity on C, midpoint(E, F), F, C, midpoint(E, F), E we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By between_implies_angles on D, midpoint(C, D), C we get 180 == angle(D, midpoint(C, D), C) mod 360, 0 == angle(midpoint(C, D), C, D) mod 360, 0 == angle(C, D, midpoint(C, D)) mod 360
By log_of_2_times_distance on C, D, midpoint(C, D), E we get log(distance(C, D)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(E, midpoint(C, D)))
By sas_anti_similarity on C, midpoint(C, D), E, E, H, A we get anti_similar_triangles(A, E, H, E, C, midpoint(C, D))
By log_of_2_times_distance on D, C, F, midpoint(C, D) we get log(distance(C, D)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(F, midpoint(C, D)))
By sas_similarity on F, midpoint(C, D), D, A, C, G we get similar_triangles(A, C, G, F, midpoint(C, D), D)
By collinear_definition on C, H, midpoint(C, D) we get H in Line(C, midpoint(C, D)), midpoint(C, D) in Line(C, H), Line(C, H) == Line(C, midpoint(C, D)), 0 == 2 * angle(H, C, midpoint(C, D)) mod 360
By asa_anti_congruence on midpoint(E, F), D, F, midpoint(E, F), D, E we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_similarity on A, C, G, F, midpoint(C, D), D we get similar_triangles(A, C, G, F, midpoint(C, D), D)
By sas_anti_similarity on C, midpoint(C, D), F, F, D, E we get anti_similar_triangles(C, F, midpoint(C, D), F, E, D)
By sas_anti_similarity on F, midpoint(E, F), C, E, midpoint(E, F), C we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By aa_anti_similarity on F, midpoint(E, F), D, E, midpoint(E, F), D we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By collinear_definition on C, D, H we get D in Line(C, H), H in Line(C, D), Line(C, D) == Line(C, H), 0 == 2 * angle(D, C, H) mod 360
By sas_anti_similarity on E, C, F, F, midpoint(C, D), D we get anti_similar_triangles(C, E, F, midpoint(C, D), F, D)
By sas_anti_similarity on E, midpoint(C, D), D, A, C, G we get anti_similar_triangles(A, C, G, E, midpoint(C, D), D)
By sas_anti_congruence on D, midpoint(E, F), E, D, midpoint(E, F), F we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_similarity on F, H, G, F, midpoint(C, D), C we get similar_triangles(C, F, midpoint(C, D), G, F, H)
By sas_anti_congruence on E, midpoint(E, F), C, F, midpoint(E, F), C we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_anti_similarity on F, H, G, E, midpoint(C, D), C we get anti_similar_triangles(C, E, midpoint(C, D), G, F, H)
By between_implies_angles on C, midpoint(C, D), D we get 180 == angle(C, midpoint(C, D), D) mod 360, 0 == angle(midpoint(C, D), D, C) mod 360, 0 == angle(D, C, midpoint(C, D)) mod 360
By sas_anti_similarity on E, D, midpoint(E, F), F, D, midpoint(E, F) we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_anti_congruence on midpoint(E, F), D, F, midpoint(E, F), D, E we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_anti_similarity on E, midpoint(C, D), C, A, H, E we get anti_similar_triangles(A, E, H, E, C, midpoint(C, D))
By sas_similarity on G, C, A, D, midpoint(C, D), F we get similar_triangles(A, C, G, F, midpoint(C, D), D)
By sas_anti_similarity on F, D, E, E, midpoint(C, D), C we get anti_similar_triangles(C, E, midpoint(C, D), E, F, D)
By sas_anti_similarity on F, H, G, C, midpoint(C, D), F we get anti_similar_triangles(C, F, midpoint(C, D), F, G, H)
By sas_anti_congruence on F, D, midpoint(E, F), E, D, midpoint(E, F) we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_anti_similarity on F, midpoint(C, D), C, G, H, F we get anti_similar_triangles(C, F, midpoint(C, D), F, G, H)
By sas_similarity on E, midpoint(C, D), C, G, H, F we get similar_triangles(C, E, midpoint(C, D), F, G, H)
By sas_similarity on E, C, F, D, midpoint(C, D), F we get similar_triangles(C, E, F, midpoint(C, D), D, F)
By sas_anti_similarity on C, midpoint(C, D), F, F, H, G we get anti_similar_triangles(C, F, midpoint(C, D), F, G, H)
By asa_anti_congruence on midpoint(E, F), C, F, midpoint(E, F), C, E we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_similarity on E, midpoint(C, D), C, E, H, A we get similar_triangles(A, E, H, C, E, midpoint(C, D))
By reverse_direction on midpoint(A, G), G we get 180 == direction(midpoint(A, G), G) - direction(G, midpoint(A, G)) mod 360
By sas_anti_similarity on E, D, F, F, midpoint(C, D), C we get anti_similar_triangles(C, F, midpoint(C, D), F, E, D)
By sas_anti_similarity on midpoint(E, F), C, E, midpoint(E, F), C, F we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_anti_similarity on C, midpoint(C, D), E, E, D, F we get anti_similar_triangles(C, E, midpoint(C, D), E, F, D)
By sas_similarity on C, midpoint(C, D), F, E, H, A we get similar_triangles(A, E, H, F, C, midpoint(C, D))
By sas_anti_similarity on E, midpoint(E, F), C, F, midpoint(E, F), C we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_similarity on E, H, A, E, midpoint(C, D), C we get similar_triangles(A, E, H, C, E, midpoint(C, D))
By sas_anti_similarity on A, H, E, E, midpoint(C, D), C we get anti_similar_triangles(A, E, H, E, C, midpoint(C, D))
By sas_anti_congruence on midpoint(E, F), C, F, midpoint(E, F), C, E we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_similarity on E, D, F, C, midpoint(C, D), F we get similar_triangles(C, F, midpoint(C, D), E, F, D)
By collinear_definition on D, midpoint(C, D), midpoint(E, F) we get midpoint(C, D) in Line(D, midpoint(E, F)), midpoint(E, F) in Line(D, midpoint(C, D)), Line(D, midpoint(C, D)) == Line(D, midpoint(E, F)), 0 == 2 * angle(midpoint(C, D), D, midpoint(E, F)) mod 360
By sas_similarity on F, midpoint(C, D), C, F, D, E we get similar_triangles(C, F, midpoint(C, D), E, F, D)
By sas_anti_congruence on C, midpoint(E, F), F, C, midpoint(E, F), E we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By log_of_2_times_distance on D, C, midpoint(C, D), C we get log(distance(C, D)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(C, midpoint(C, D)))
By sas_anti_congruence on midpoint(E, F), C, E, midpoint(E, F), C, F we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_similarity on D, midpoint(C, D), E, A, C, G we get similar_triangles(A, C, G, D, midpoint(C, D), E)
By asa_anti_congruence on midpoint(E, F), D, E, midpoint(E, F), D, F we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_anti_similarity on F, midpoint(E, F), D, E, midpoint(E, F), D we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By reverse_direction on midpoint(E, F), C we get 180 == direction(midpoint(E, F), C) - direction(C, midpoint(E, F)) mod 360
By sas_similarity on F, H, G, C, midpoint(C, D), E we get similar_triangles(C, E, midpoint(C, D), F, G, H)
By sas_similarity on F, D, E, C, midpoint(C, D), E we get similar_triangles(C, E, midpoint(C, D), F, E, D)
By sas_anti_similarity on F, midpoint(C, D), C, E, H, A we get anti_similar_triangles(A, E, H, C, F, midpoint(C, D))
By reverse_direction on C, midpoint(E, F) we get 180 == direction(C, midpoint(E, F)) - direction(midpoint(E, F), C) mod 360
By sas_similarity on C, midpoint(C, D), E, F, H, G we get similar_triangles(C, E, midpoint(C, D), F, G, H)
By collinear_definition on C, H, D we get H in Line(C, D), D in Line(C, H), Line(C, D) == Line(C, H), 0 == 2 * angle(H, C, D) mod 360
By sas_anti_similarity on E, midpoint(C, D), C, F, H, G we get anti_similar_triangles(C, E, midpoint(C, D), G, F, H)
By reverse_direction on midpoint(A, G), A we get 180 == direction(midpoint(A, G), A) - direction(A, midpoint(A, G)) mod 360
By sas_anti_similarity on D, midpoint(E, F), F, D, midpoint(E, F), E we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_anti_similarity on E, midpoint(C, D), C, F, D, E we get anti_similar_triangles(C, E, midpoint(C, D), E, F, D)
By sas_similarity on E, midpoint(C, D), D, E, C, F we get similar_triangles(C, E, F, midpoint(C, D), E, D)
By sas_anti_similarity on midpoint(E, F), D, E, midpoint(E, F), D, F we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_anti_similarity on midpoint(E, F), C, F, midpoint(E, F), C, E we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By asa_anti_congruence on C, midpoint(E, F), E, C, midpoint(E, F), F we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By aa_anti_similarity on E, D, midpoint(E, F), F, D, midpoint(E, F) we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_similarity on G, C, A, E, midpoint(C, D), D we get similar_triangles(A, C, G, D, midpoint(C, D), E)
By sas_similarity on D, midpoint(C, D), E, F, C, E we get similar_triangles(C, E, F, midpoint(C, D), E, D)
By sas_anti_similarity on F, D, E, C, midpoint(C, D), F we get anti_similar_triangles(C, F, midpoint(C, D), F, E, D)
By sas_similarity on A, H, E, C, midpoint(C, D), E we get similar_triangles(A, E, H, C, E, midpoint(C, D))
By sas_anti_similarity on F, C, midpoint(E, F), E, C, midpoint(E, F) we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By collinear_definition on C, midpoint(E, F), H we get midpoint(E, F) in Line(C, H), H in Line(C, midpoint(E, F)), Line(C, H) == Line(C, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), C, H) mod 360
By reverse_direction on midpoint(E, F), D we get 180 == direction(midpoint(E, F), D) - direction(D, midpoint(E, F)) mod 360
By sas_similarity on C, midpoint(C, D), F, G, H, F we get similar_triangles(C, F, midpoint(C, D), G, F, H)
By sas_similarity on F, D, E, F, midpoint(C, D), C we get similar_triangles(C, F, midpoint(C, D), E, F, D)
By sas_anti_similarity on G, C, A, D, midpoint(C, D), E we get anti_similar_triangles(A, C, G, E, midpoint(C, D), D)
By sas_anti_similarity on D, midpoint(C, D), E, G, C, A we get anti_similar_triangles(A, C, G, E, midpoint(C, D), D)
By sas_anti_congruence on F, midpoint(E, F), D, E, midpoint(E, F), D we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_similarity on E, D, F, E, midpoint(C, D), C we get similar_triangles(C, E, midpoint(C, D), F, E, D)
By sas_anti_similarity on F, midpoint(C, D), D, G, C, A we get anti_similar_triangles(A, C, G, D, midpoint(C, D), F)
By sas_anti_similarity on E, H, A, F, midpoint(C, D), C we get anti_similar_triangles(A, E, H, C, F, midpoint(C, D))
By sas_similarity on F, midpoint(C, D), C, F, H, G we get similar_triangles(C, F, midpoint(C, D), G, F, H)
By sas_anti_similarity on D, midpoint(C, D), E, E, C, F we get anti_similar_triangles(C, E, F, midpoint(C, D), D, E)
By sas_anti_similarity on D, midpoint(C, D), F, F, C, E we get anti_similar_triangles(C, E, F, midpoint(C, D), F, D)
By sas_similarity on D, midpoint(C, D), F, E, C, F we get similar_triangles(C, E, F, midpoint(C, D), D, F)
By aa_anti_similarity on F, D, midpoint(E, F), E, D, midpoint(E, F) we get anti_similar_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By reverse_direction on G, midpoint(A, G) we get 180 == direction(G, midpoint(A, G)) - direction(midpoint(A, G), G) mod 360
By reverse_direction on D, midpoint(E, F) we get 180 == direction(D, midpoint(E, F)) - direction(midpoint(E, F), D) mod 360
By sas_anti_similarity on E, C, F, D, midpoint(C, D), E we get anti_similar_triangles(C, E, F, midpoint(C, D), D, E)
By collinear_definition on C, midpoint(E, F), midpoint(C, D) we get midpoint(E, F) in Line(C, midpoint(C, D)), midpoint(C, D) in Line(C, midpoint(E, F)), Line(C, midpoint(C, D)) == Line(C, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), C, midpoint(C, D)) mod 360
By sas_similarity on F, midpoint(C, D), C, A, H, E we get similar_triangles(A, E, H, F, C, midpoint(C, D))
By asa_anti_congruence on D, midpoint(E, F), E, D, midpoint(E, F), F we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_similarity on F, C, E, D, midpoint(C, D), E we get similar_triangles(C, E, F, midpoint(C, D), E, D)
By sas_anti_congruence on E, D, midpoint(E, F), F, D, midpoint(E, F) we get anti_congruent_triangles(D, E, midpoint(E, F), D, F, midpoint(E, F))
By sas_similarity on F, midpoint(C, D), D, F, C, E we get similar_triangles(C, E, F, midpoint(C, D), D, F)
By aa_anti_similarity on E, C, midpoint(E, F), F, C, midpoint(E, F) we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_similarity on D, midpoint(C, D), F, G, C, A we get similar_triangles(A, C, G, F, midpoint(C, D), D)
By sas_anti_similarity on F, C, E, E, midpoint(C, D), D we get anti_similar_triangles(C, E, F, midpoint(C, D), D, E)
By sas_anti_similarity on A, C, G, E, midpoint(C, D), D we get anti_similar_triangles(A, C, G, E, midpoint(C, D), D)
By reverse_direction on A, midpoint(A, G) we get 180 == direction(A, midpoint(A, G)) - direction(midpoint(A, G), A) mod 360
By sas_anti_similarity on C, midpoint(C, D), F, A, H, E we get anti_similar_triangles(A, E, H, C, F, midpoint(C, D))
By asa_anti_congruence on midpoint(E, F), C, E, midpoint(E, F), C, F we get anti_congruent_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By sas_anti_similarity on A, H, E, C, midpoint(C, D), F we get anti_similar_triangles(A, E, H, C, F, midpoint(C, D))
By sas_anti_similarity on E, H, A, C, midpoint(C, D), E we get anti_similar_triangles(A, E, H, E, C, midpoint(C, D))
By sas_anti_similarity on F, C, E, D, midpoint(C, D), F we get anti_similar_triangles(C, E, F, midpoint(C, D), F, D)
By sas_similarity on F, C, E, F, midpoint(C, D), D we get similar_triangles(C, E, F, midpoint(C, D), D, F)
By sas_anti_similarity on C, midpoint(E, F), E, C, midpoint(E, F), F we get anti_similar_triangles(C, E, midpoint(E, F), C, F, midpoint(E, F))
By internal_angle_bisector_definition_v0_r on midpoint(C, D), D, midpoint(C, D), C we get Line(C, D) == internal_angle_bisector(midpoint(C, D), C, midpoint(C, D))
By collinear_definition on C, D, midpoint(A, G) we get D in Line(C, midpoint(A, G)), midpoint(A, G) in Line(C, D), Line(C, D) == Line(C, midpoint(A, G)), 0 == 2 * angle(D, C, midpoint(A, G)) mod 360
By internal_angle_bisector_definition_v0_r on F, C, E, midpoint(E, F) we get Line(C, midpoint(E, F)) == internal_angle_bisector(E, midpoint(E, F), F)
By collinear_definition on midpoint(E, F), midpoint(A, G), C we get midpoint(A, G) in Line(C, midpoint(E, F)), C in Line(midpoint(A, G), midpoint(E, F)), Line(C, midpoint(E, F)) == Line(midpoint(A, G), midpoint(E, F)), 0 == 2 * angle(midpoint(A, G), midpoint(E, F), C) mod 360
By perpendicular_angle_conditions_v0 on A, midpoint(A, G), H we get angle(A, midpoint(A, G), H) == orientation(A, midpoint(A, G), H) mod 360
By radical_axis_definition_v0_r on D, Circle(C, D, E), Circle(A, B, D) we get D in radical_axis(Circle(A, B, D), Circle(C, D, E))
By internal_angle_bisector_definition_v0_r on midpoint(C, D), C, midpoint(C, D), D we get Line(C, D) == internal_angle_bisector(midpoint(C, D), D, midpoint(C, D))
By perpendicular_angle_conditions_v0 on midpoint(C, D), midpoint(A, G), G we get angle(midpoint(C, D), midpoint(A, G), G) == orientation(G, midpoint(C, D), midpoint(A, G)) mod 360
By collinear_definition on midpoint(E, F), C, midpoint(C, D) we get C in Line(midpoint(C, D), midpoint(E, F)), midpoint(C, D) in Line(C, midpoint(E, F)), Line(C, midpoint(E, F)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(C, midpoint(E, F), midpoint(C, D)) mod 360
By internal_angle_bisector_definition_v0 on A, midpoint(A, G), E, C we get angle(A, C, midpoint(A, G)) == angle(midpoint(A, G), C, E) mod 360
By collinear_definition on C, midpoint(A, G), H we get midpoint(A, G) in Line(C, H), H in Line(C, midpoint(A, G)), Line(C, H) == Line(C, midpoint(A, G)), 0 == 2 * angle(midpoint(A, G), C, H) mod 360
By internal_angle_bisector_definition_v0 on A, midpoint(E, F), G, H we get angle(A, H, midpoint(E, F)) == angle(midpoint(E, F), H, G) mod 360
By internal_angle_bisector_definition_v0 on I, midpoint(A, G), F, C we get angle(I, C, midpoint(A, G)) == angle(midpoint(A, G), C, F) mod 360
By internal_angle_bisector_definition_v0 on E, H, F, D we get angle(E, D, H) == angle(H, D, F) mod 360
By external_angle_bisector_definition_v0_r on D, F, D, midpoint(E, F) we get Line(F, midpoint(E, F)) == external_angle_bisector(D, midpoint(E, F), D)
By internal_angle_bisector_definition_v0_r on C, midpoint(E, F), C, D we get internal_angle_bisector(C, D, C) == Line(D, midpoint(E, F))
By internal_angle_bisector_definition_v0 on F, midpoint(A, G), E, H we get angle(F, H, midpoint(A, G)) == angle(midpoint(A, G), H, E) mod 360
By collinear_definition on midpoint(C, D), D, H we get D in Line(H, midpoint(C, D)), H in Line(D, midpoint(C, D)), Line(D, midpoint(C, D)) == Line(H, midpoint(C, D)), 0 == 2 * angle(D, midpoint(C, D), H) mod 360
By external_angle_bisector_definition_v0_r on E, C, E, midpoint(E, F) we get Line(C, midpoint(E, F)) == external_angle_bisector(E, midpoint(E, F), E)
By collinear_definition on D, C, midpoint(A, G) we get C in Line(D, midpoint(A, G)), midpoint(A, G) in Line(C, D), Line(C, D) == Line(D, midpoint(A, G)), 0 == 2 * angle(C, D, midpoint(A, G)) mod 360
By perpendicular_angle_conditions_v0 on midpoint(E, F), midpoint(A, G), G we get angle(midpoint(E, F), midpoint(A, G), G) == orientation(G, midpoint(E, F), midpoint(A, G)) mod 360
By internal_angle_bisector_definition_v0_r on C, D, C, midpoint(E, F) we get Line(D, midpoint(E, F)) == internal_angle_bisector(C, midpoint(E, F), C)
By right_triangle_circumcenter_v1 on C, F, D we get midpoint(C, D) == circumcenter(C, D, F)
By internal_angle_bisector_definition_v0 on E, midpoint(A, G), F, midpoint(C, D) we get angle(E, midpoint(C, D), midpoint(A, G)) == angle(midpoint(A, G), midpoint(C, D), F) mod 360
By external_angle_bisector_definition_v0_r on F, C, F, midpoint(E, F) we get Line(C, midpoint(E, F)) == external_angle_bisector(F, midpoint(E, F), F)
By collinear_definition on midpoint(C, D), C, H we get C in Line(H, midpoint(C, D)), H in Line(C, midpoint(C, D)), Line(C, midpoint(C, D)) == Line(H, midpoint(C, D)), 0 == 2 * angle(C, midpoint(C, D), H) mod 360
By external_angle_bisector_definition_v0_r on E, D, E, midpoint(E, F) we get Line(D, midpoint(E, F)) == external_angle_bisector(E, midpoint(E, F), E)
By internal_angle_bisector_definition_v0 on E, D, F, H we get angle(D, H, F) == angle(E, H, D) mod 360
By collinear_definition on midpoint(C, D), H, C we get H in Line(C, midpoint(C, D)), C in Line(H, midpoint(C, D)), Line(C, midpoint(C, D)) == Line(H, midpoint(C, D)), 0 == 2 * angle(H, midpoint(C, D), C) mod 360
By perpendicular_angle_conditions_v0 on A, midpoint(A, G), midpoint(E, F) we get angle(A, midpoint(A, G), midpoint(E, F)) == orientation(A, midpoint(A, G), midpoint(E, F)) mod 360
By internal_angle_bisector_definition_v0 on J, H, G, D we get angle(H, D, G) == angle(J, D, H) mod 360
By internal_angle_bisector_definition_v0 on D, midpoint(A, G), D, midpoint(C, D) we get angle(D, midpoint(C, D), midpoint(A, G)) == angle(midpoint(A, G), midpoint(C, D), D) mod 360
By external_angle_bisector_definition_v0_r on D, E, D, midpoint(E, F) we get Line(E, midpoint(E, F)) == external_angle_bisector(D, midpoint(E, F), D)
By perpendicular_angle_conditions_v0 on F, midpoint(E, F), H we get angle(F, midpoint(E, F), H) == orientation(F, midpoint(E, F), H) mod 360
By collinear_definition on D, H, midpoint(E, F) we get H in Line(D, midpoint(E, F)), midpoint(E, F) in Line(D, H), Line(D, H) == Line(D, midpoint(E, F)), 0 == 2 * angle(H, D, midpoint(E, F)) mod 360
By internal_angle_bisector_definition_v0 on G, midpoint(E, F), A, H we get angle(G, H, midpoint(E, F)) == angle(midpoint(E, F), H, A) mod 360
By collinear_definition on midpoint(C, D), midpoint(A, G), C we get midpoint(A, G) in Line(C, midpoint(C, D)), C in Line(midpoint(A, G), midpoint(C, D)), Line(C, midpoint(C, D)) == Line(midpoint(A, G), midpoint(C, D)), 0 == 2 * angle(midpoint(A, G), midpoint(C, D), C) mod 360
By internal_angle_bisector_definition_v0_r on D, C, D, midpoint(E, F) we get Line(C, midpoint(E, F)) == internal_angle_bisector(D, midpoint(E, F), D)
By external_angle_bisector_definition_v0_r on C, F, C, midpoint(E, F) we get Line(F, midpoint(E, F)) == external_angle_bisector(C, midpoint(E, F), C)
By collinear_definition on D, midpoint(A, G), C we get midpoint(A, G) in Line(C, D), C in Line(D, midpoint(A, G)), Line(C, D) == Line(D, midpoint(A, G)), 0 == 2 * angle(midpoint(A, G), D, C) mod 360
By internal_angle_bisector_definition_v0 on G, midpoint(A, G), J, D we get angle(G, D, midpoint(A, G)) == angle(midpoint(A, G), D, J) mod 360
By external_angle_bisector_definition_v0 on G, H, I, D we get 180 == angle(G, D, H) + angle(I, D, H) mod 360
By perpendicular_angle_conditions_v0 on midpoint(C, D), midpoint(E, F), F we get angle(midpoint(C, D), midpoint(E, F), F) == orientation(F, midpoint(C, D), midpoint(E, F)) mod 360
By right_triangle_circumcenter_v1 on D, E, C we get midpoint(C, D) == circumcenter(C, D, E)
By internal_angle_bisector_definition_v0 on F, H, E, midpoint(C, D) we get angle(F, midpoint(C, D), H) == angle(H, midpoint(C, D), E) mod 360
By collinear_definition on midpoint(C, D), C, midpoint(A, G) we get C in Line(midpoint(A, G), midpoint(C, D)), midpoint(A, G) in Line(C, midpoint(C, D)), Line(C, midpoint(C, D)) == Line(midpoint(A, G), midpoint(C, D)), 0 == 2 * angle(C, midpoint(C, D), midpoint(A, G)) mod 360
By internal_angle_bisector_definition_v0 on E, midpoint(E, F), F, H we get angle(E, H, midpoint(E, F)) == angle(midpoint(E, F), H, F) mod 360
By internal_angle_bisector_definition_v0 on E, H, F, midpoint(C, D) we get angle(E, midpoint(C, D), H) == angle(H, midpoint(C, D), F) mod 360
By collinear_definition on C, midpoint(C, D), midpoint(A, G) we get midpoint(C, D) in Line(C, midpoint(A, G)), midpoint(A, G) in Line(C, midpoint(C, D)), Line(C, midpoint(A, G)) == Line(C, midpoint(C, D)), 0 == 2 * angle(midpoint(C, D), C, midpoint(A, G)) mod 360
By external_angle_bisector_definition_v0_r on C, E, C, midpoint(E, F) we get Line(E, midpoint(E, F)) == external_angle_bisector(C, midpoint(E, F), C)
By internal_angle_bisector_definition_v0 on A, midpoint(C, D), G, H we get angle(A, H, midpoint(C, D)) == angle(midpoint(C, D), H, G) mod 360
By collinear_definition on D, midpoint(E, F), H we get midpoint(E, F) in Line(D, H), H in Line(D, midpoint(E, F)), Line(D, H) == Line(D, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), D, H) mod 360
By perpendicular_angle_conditions_v0 on H, midpoint(A, G), A we get angle(H, midpoint(A, G), A) == orientation(A, H, midpoint(A, G)) mod 360
By perpendicular_angle_conditions_v0 on midpoint(C, D), midpoint(E, F), E we get angle(midpoint(C, D), midpoint(E, F), E) == orientation(E, midpoint(C, D), midpoint(E, F)) mod 360
By internal_angle_bisector_definition_v0 on F, midpoint(A, G), E, D we get angle(F, D, midpoint(A, G)) == angle(midpoint(A, G), D, E) mod 360
By external_angle_bisector_definition_v0_r on F, D, F, midpoint(E, F) we get Line(D, midpoint(E, F)) == external_angle_bisector(F, midpoint(E, F), F)
By radical_axis_definition_v0_r on G, d, Circle(A, B, D) we get G in radical_axis(d, Circle(A, B, D))
By internal_angle_bisector_definition_v0 on A, midpoint(A, G), G, C we get angle(A, C, midpoint(A, G)) == angle(midpoint(A, G), C, G) mod 360
By internal_angle_bisector_definition_v0 on G, midpoint(A, G), A, D we get angle(G, D, midpoint(A, G)) == angle(midpoint(A, G), D, A) mod 360
By internal_angle_bisector_definition_v0 on G, midpoint(A, G), A, H we get angle(G, H, midpoint(A, G)) == angle(midpoint(A, G), H, A) mod 360
By collinear_definition on C, midpoint(E, F), midpoint(A, G) we get midpoint(E, F) in Line(C, midpoint(A, G)), midpoint(A, G) in Line(C, midpoint(E, F)), Line(C, midpoint(A, G)) == Line(C, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), C, midpoint(A, G)) mod 360
By internal_angle_bisector_definition_v0 on C, midpoint(A, G), C, midpoint(C, D) we get angle(C, midpoint(C, D), midpoint(A, G)) == angle(midpoint(A, G), midpoint(C, D), C) mod 360
By collinear_definition on midpoint(C, D), midpoint(E, F), D we get midpoint(E, F) in Line(D, midpoint(C, D)), D in Line(midpoint(C, D), midpoint(E, F)), Line(D, midpoint(C, D)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), midpoint(C, D), D) mod 360
By internal_angle_bisector_definition_v0 on A, D, G, H we get angle(A, H, D) == angle(D, H, G) mod 360
By perpendicular_angle_conditions_v0 on A, midpoint(A, G), midpoint(C, D) we get angle(A, midpoint(A, G), midpoint(C, D)) == orientation(A, midpoint(A, G), midpoint(C, D)) mod 360
By perpendicular_angle_conditions_v0 on F, midpoint(E, F), midpoint(C, D) we get angle(F, midpoint(E, F), midpoint(C, D)) == orientation(F, midpoint(E, F), midpoint(C, D)) mod 360
By radical_axis_definition_v0_r on G, Circle(C, F, G), Circle(A, B, D) we get G in radical_axis(Circle(A, B, D), Circle(C, F, G))
By collinear_definition on C, midpoint(A, G), midpoint(E, F) we get midpoint(A, G) in Line(C, midpoint(E, F)), midpoint(E, F) in Line(C, midpoint(A, G)), Line(C, midpoint(A, G)) == Line(C, midpoint(E, F)), 0 == 2 * angle(midpoint(A, G), C, midpoint(E, F)) mod 360
By internal_angle_bisector_definition_v0_r on F, D, E, midpoint(E, F) we get Line(D, midpoint(E, F)) == internal_angle_bisector(E, midpoint(E, F), F)
By internal_angle_bisector_definition_v0 on G, D, A, H we get angle(D, H, A) == angle(G, H, D) mod 360
By internal_angle_bisector_definition_v0 on E, midpoint(E, F), F, midpoint(C, D) we get angle(E, midpoint(C, D), midpoint(E, F)) == angle(midpoint(E, F), midpoint(C, D), F) mod 360
By collinear_definition on midpoint(E, F), D, midpoint(A, G) we get D in Line(midpoint(A, G), midpoint(E, F)), midpoint(A, G) in Line(D, midpoint(E, F)), Line(D, midpoint(E, F)) == Line(midpoint(A, G), midpoint(E, F)), 0 == 2 * angle(D, midpoint(E, F), midpoint(A, G)) mod 360
By collinear_definition on midpoint(C, D), midpoint(E, F), C we get midpoint(E, F) in Line(C, midpoint(C, D)), C in Line(midpoint(C, D), midpoint(E, F)), Line(C, midpoint(C, D)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), midpoint(C, D), C) mod 360
By internal_angle_bisector_definition_v0 on A, midpoint(A, G), G, D we get angle(A, D, midpoint(A, G)) == angle(midpoint(A, G), D, G) mod 360
By internal_angle_bisector_definition_v0 on G, midpoint(C, D), A, H we get angle(G, H, midpoint(C, D)) == angle(midpoint(C, D), H, A) mod 360
By internal_angle_bisector_definition_v0 on A, midpoint(A, G), B, C we get angle(A, C, midpoint(A, G)) == angle(midpoint(A, G), C, B) mod 360
By internal_angle_bisector_definition_v0 on I, midpoint(A, G), A, C we get angle(I, C, midpoint(A, G)) == angle(midpoint(A, G), C, A) mod 360
By perpendicular_angle_conditions_v0 on G, midpoint(A, G), midpoint(E, F) we get angle(G, midpoint(A, G), midpoint(E, F)) == orientation(G, midpoint(A, G), midpoint(E, F)) mod 360
By internal_angle_bisector_definition_v0 on A, midpoint(A, G), G, H we get angle(A, H, midpoint(A, G)) == angle(midpoint(A, G), H, G) mod 360
By internal_angle_bisector_definition_v0 on D, midpoint(E, F), D, midpoint(C, D) we get angle(D, midpoint(C, D), midpoint(E, F)) == angle(midpoint(E, F), midpoint(C, D), D) mod 360
By perpendicular_angle_conditions_v0 on H, midpoint(A, G), G we get angle(H, midpoint(A, G), G) == orientation(G, H, midpoint(A, G)) mod 360
By internal_angle_bisector_definition_v0 on G, H, J, D we get angle(G, D, H) == angle(H, D, J) mod 360
By collinear_definition on midpoint(E, F), D, midpoint(C, D) we get D in Line(midpoint(C, D), midpoint(E, F)), midpoint(C, D) in Line(D, midpoint(E, F)), Line(D, midpoint(E, F)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(D, midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_angle_conditions_v0 on C, midpoint(A, G), A we get angle(C, midpoint(A, G), A) == orientation(A, C, midpoint(A, G)) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(E, F), D, midpoint(E, F), C we get Line(C, D) == internal_angle_bisector(midpoint(E, F), C, midpoint(E, F))
By internal_angle_bisector_definition_v0 on E, midpoint(A, G), A, C we get angle(E, C, midpoint(A, G)) == angle(midpoint(A, G), C, A) mod 360
By external_angle_bisector_definition_v0 on I, midpoint(A, G), G, D we get 180 == angle(I, D, midpoint(A, G)) + angle(G, D, midpoint(A, G)) mod 360
By collinear_definition on C, midpoint(A, G), midpoint(C, D) we get midpoint(A, G) in Line(C, midpoint(C, D)), midpoint(C, D) in Line(C, midpoint(A, G)), Line(C, midpoint(A, G)) == Line(C, midpoint(C, D)), 0 == 2 * angle(midpoint(A, G), C, midpoint(C, D)) mod 360
By internal_angle_bisector_definition_v0 on J, midpoint(A, G), G, D we get angle(J, D, midpoint(A, G)) == angle(midpoint(A, G), D, G) mod 360
By internal_angle_bisector_definition_v0 on E, midpoint(A, G), F, C we get angle(E, C, midpoint(A, G)) == angle(midpoint(A, G), C, F) mod 360
By collinear_definition on midpoint(C, D), midpoint(A, G), D we get midpoint(A, G) in Line(D, midpoint(C, D)), D in Line(midpoint(A, G), midpoint(C, D)), Line(D, midpoint(C, D)) == Line(midpoint(A, G), midpoint(C, D)), 0 == 2 * angle(midpoint(A, G), midpoint(C, D), D) mod 360
By internal_angle_bisector_definition_v0 on F, midpoint(A, G), I, C we get angle(F, C, midpoint(A, G)) == angle(midpoint(A, G), C, I) mod 360
By collinear_definition on midpoint(E, F), midpoint(C, D), D we get midpoint(C, D) in Line(D, midpoint(E, F)), D in Line(midpoint(C, D), midpoint(E, F)), Line(D, midpoint(E, F)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(midpoint(C, D), midpoint(E, F), D) mod 360
By radical_axis_definition_v0_r on A, Circle(A, B, D), Circle(A, C, E) we get A in radical_axis(Circle(A, B, D), Circle(A, C, E))
By collinear_definition on midpoint(C, D), D, midpoint(E, F) we get D in Line(midpoint(C, D), midpoint(E, F)), midpoint(E, F) in Line(D, midpoint(C, D)), Line(D, midpoint(C, D)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(D, midpoint(C, D), midpoint(E, F)) mod 360
By collinear_definition on H, C, midpoint(A, G) we get C in Line(H, midpoint(A, G)), midpoint(A, G) in Line(C, H), Line(C, H) == Line(H, midpoint(A, G)), 0 == 2 * angle(C, H, midpoint(A, G)) mod 360
By perpendicular_angle_conditions_v0 on E, midpoint(E, F), midpoint(A, G) we get angle(E, midpoint(E, F), midpoint(A, G)) == orientation(E, midpoint(E, F), midpoint(A, G)) mod 360
By perpendicular_angle_conditions_v0 on G, midpoint(A, G), midpoint(C, D) we get angle(G, midpoint(A, G), midpoint(C, D)) == orientation(G, midpoint(A, G), midpoint(C, D)) mod 360
By perpendicular_angle_conditions_v0 on G, midpoint(A, G), H we get angle(G, midpoint(A, G), H) == orientation(G, midpoint(A, G), H) mod 360
By perpendicular_angle_conditions_v0 on A, midpoint(A, G), D we get angle(A, midpoint(A, G), D) == orientation(A, midpoint(A, G), D) mod 360
By perpendicular_angle_conditions_v0 on midpoint(C, D), midpoint(A, G), A we get angle(midpoint(C, D), midpoint(A, G), A) == orientation(A, midpoint(C, D), midpoint(A, G)) mod 360
By collinear_definition on midpoint(E, F), D, H we get D in Line(H, midpoint(E, F)), H in Line(D, midpoint(E, F)), Line(D, midpoint(E, F)) == Line(H, midpoint(E, F)), 0 == 2 * angle(D, midpoint(E, F), H) mod 360
By internal_angle_bisector_definition_v0 on G, midpoint(A, G), A, C we get angle(G, C, midpoint(A, G)) == angle(midpoint(A, G), C, A) mod 360
By perpendicular_angle_conditions_v0 on E, midpoint(E, F), H we get angle(E, midpoint(E, F), H) == orientation(E, midpoint(E, F), H) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(A, G), A, midpoint(A, G), G we get Line(A, G) == internal_angle_bisector(midpoint(A, G), G, midpoint(A, G))
By perpendicular_angle_conditions_v0 on H, midpoint(E, F), E we get angle(H, midpoint(E, F), E) == orientation(E, H, midpoint(E, F)) mod 360
By collinear_definition on D, midpoint(A, G), midpoint(C, D) we get midpoint(A, G) in Line(D, midpoint(C, D)), midpoint(C, D) in Line(D, midpoint(A, G)), Line(D, midpoint(A, G)) == Line(D, midpoint(C, D)), 0 == 2 * angle(midpoint(A, G), D, midpoint(C, D)) mod 360
By collinear_definition on midpoint(E, F), midpoint(A, G), D we get midpoint(A, G) in Line(D, midpoint(E, F)), D in Line(midpoint(A, G), midpoint(E, F)), Line(D, midpoint(E, F)) == Line(midpoint(A, G), midpoint(E, F)), 0 == 2 * angle(midpoint(A, G), midpoint(E, F), D) mod 360
By collinear_definition on D, midpoint(E, F), midpoint(A, G) we get midpoint(E, F) in Line(D, midpoint(A, G)), midpoint(A, G) in Line(D, midpoint(E, F)), Line(D, midpoint(A, G)) == Line(D, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), D, midpoint(A, G)) mod 360
By collinear_definition on midpoint(E, F), C, midpoint(A, G) we get C in Line(midpoint(A, G), midpoint(E, F)), midpoint(A, G) in Line(C, midpoint(E, F)), Line(C, midpoint(E, F)) == Line(midpoint(A, G), midpoint(E, F)), 0 == 2 * angle(C, midpoint(E, F), midpoint(A, G)) mod 360
By collinear_definition on H, C, midpoint(E, F) we get C in Line(H, midpoint(E, F)), midpoint(E, F) in Line(C, H), Line(C, H) == Line(H, midpoint(E, F)), 0 == 2 * angle(C, H, midpoint(E, F)) mod 360
By internal_angle_bisector_definition_v0 on E, midpoint(C, D), F, H we get angle(E, H, midpoint(C, D)) == angle(midpoint(C, D), H, F) mod 360
By collinear_definition on D, midpoint(C, D), midpoint(A, G) we get midpoint(C, D) in Line(D, midpoint(A, G)), midpoint(A, G) in Line(D, midpoint(C, D)), Line(D, midpoint(A, G)) == Line(D, midpoint(C, D)), 0 == 2 * angle(midpoint(C, D), D, midpoint(A, G)) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(A, G), G, midpoint(A, G), A we get Line(A, G) == internal_angle_bisector(midpoint(A, G), A, midpoint(A, G))
By internal_angle_bisector_definition_v0 on C, midpoint(E, F), C, midpoint(C, D) we get angle(C, midpoint(C, D), midpoint(E, F)) == angle(midpoint(E, F), midpoint(C, D), C) mod 360
By perpendicular_angle_conditions_v0 on E, midpoint(E, F), midpoint(C, D) we get angle(E, midpoint(E, F), midpoint(C, D)) == orientation(E, midpoint(E, F), midpoint(C, D)) mod 360
By collinear_definition on midpoint(C, D), D, midpoint(A, G) we get D in Line(midpoint(A, G), midpoint(C, D)), midpoint(A, G) in Line(D, midpoint(C, D)), Line(D, midpoint(C, D)) == Line(midpoint(A, G), midpoint(C, D)), 0 == 2 * angle(D, midpoint(C, D), midpoint(A, G)) mod 360
By internal_angle_bisector_definition_v0 on E, midpoint(A, G), F, H we get angle(E, H, midpoint(A, G)) == angle(midpoint(A, G), H, F) mod 360
By internal_angle_bisector_definition_v0 on F, midpoint(E, F), E, H we get angle(F, H, midpoint(E, F)) == angle(midpoint(E, F), H, E) mod 360
By internal_angle_bisector_definition_v0 on F, H, E, D we get angle(F, D, H) == angle(H, D, E) mod 360
By collinear_definition on D, midpoint(A, G), midpoint(E, F) we get midpoint(A, G) in Line(D, midpoint(E, F)), midpoint(E, F) in Line(D, midpoint(A, G)), Line(D, midpoint(A, G)) == Line(D, midpoint(E, F)), 0 == 2 * angle(midpoint(A, G), D, midpoint(E, F)) mod 360
By collinear_definition on C, midpoint(A, G), D we get midpoint(A, G) in Line(C, D), D in Line(C, midpoint(A, G)), Line(C, D) == Line(C, midpoint(A, G)), 0 == 2 * angle(midpoint(A, G), C, D) mod 360
By perpendicular_angle_conditions_v0 on G, midpoint(A, G), D we get angle(G, midpoint(A, G), D) == orientation(D, G, midpoint(A, G)) mod 360
By collinear_definition on midpoint(C, D), C, midpoint(E, F) we get C in Line(midpoint(C, D), midpoint(E, F)), midpoint(E, F) in Line(C, midpoint(C, D)), Line(C, midpoint(C, D)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(C, midpoint(C, D), midpoint(E, F)) mod 360
By internal_angle_bisector_definition_v0 on F, midpoint(A, G), B, C we get angle(F, C, midpoint(A, G)) == angle(midpoint(A, G), C, B) mod 360
By collinear_definition on H, C, midpoint(C, D) we get C in Line(H, midpoint(C, D)), midpoint(C, D) in Line(C, H), Line(C, H) == Line(H, midpoint(C, D)), 0 == 2 * angle(C, H, midpoint(C, D)) mod 360
By internal_angle_bisector_definition_v0 on F, midpoint(E, F), E, midpoint(C, D) we get angle(F, midpoint(C, D), midpoint(E, F)) == angle(midpoint(E, F), midpoint(C, D), E) mod 360
By perpendicular_angle_conditions_v0 on D, midpoint(A, G), G we get angle(D, midpoint(A, G), G) == orientation(D, midpoint(A, G), G) mod 360
By perpendicular_angle_conditions_v0 on midpoint(A, G), midpoint(E, F), F we get angle(midpoint(A, G), midpoint(E, F), F) == orientation(F, midpoint(A, G), midpoint(E, F)) mod 360
By collinear_definition on D, midpoint(C, D), H we get midpoint(C, D) in Line(D, H), H in Line(D, midpoint(C, D)), Line(D, H) == Line(D, midpoint(C, D)), 0 == 2 * angle(midpoint(C, D), D, H) mod 360
By internal_angle_bisector_definition_v0_r on A, G, A, midpoint(A, G) we get Line(G, midpoint(A, G)) == internal_angle_bisector(A, midpoint(A, G), A)
By collinear_definition on midpoint(E, F), H, C we get H in Line(C, midpoint(E, F)), C in Line(H, midpoint(E, F)), Line(C, midpoint(E, F)) == Line(H, midpoint(E, F)), 0 == 2 * angle(H, midpoint(E, F), C) mod 360
By perpendicular_angle_conditions_v0 on midpoint(E, F), midpoint(A, G), A we get angle(midpoint(E, F), midpoint(A, G), A) == orientation(A, midpoint(E, F), midpoint(A, G)) mod 360
By internal_angle_bisector_definition_v0_r on G, midpoint(A, G), G, A we get internal_angle_bisector(G, A, G) == Line(A, midpoint(A, G))
By collinear_definition on H, midpoint(A, G), C we get midpoint(A, G) in Line(C, H), C in Line(H, midpoint(A, G)), Line(C, H) == Line(H, midpoint(A, G)), 0 == 2 * angle(midpoint(A, G), H, C) mod 360
By internal_angle_bisector_definition_v0 on G, H, A, D we get angle(G, D, H) == angle(H, D, A) mod 360
By internal_angle_bisector_definition_v0 on B, midpoint(A, G), A, C we get angle(B, C, midpoint(A, G)) == angle(midpoint(A, G), C, A) mod 360
By internal_angle_bisector_definition_v0_r on G, A, G, midpoint(A, G) we get Line(A, midpoint(A, G)) == internal_angle_bisector(G, midpoint(A, G), G)
By collinear_definition on midpoint(E, F), midpoint(C, D), C we get midpoint(C, D) in Line(C, midpoint(E, F)), C in Line(midpoint(C, D), midpoint(E, F)), Line(C, midpoint(E, F)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(midpoint(C, D), midpoint(E, F), C) mod 360
By internal_angle_bisector_definition_v0 on D, H, D, midpoint(C, D) we get angle(D, midpoint(C, D), H) == angle(H, midpoint(C, D), D) mod 360
By collinear_definition on midpoint(E, F), C, H we get C in Line(H, midpoint(E, F)), H in Line(C, midpoint(E, F)), Line(C, midpoint(E, F)) == Line(H, midpoint(E, F)), 0 == 2 * angle(C, midpoint(E, F), H) mod 360
By internal_angle_bisector_definition_v0 on F, midpoint(C, D), E, H we get angle(F, H, midpoint(C, D)) == angle(midpoint(C, D), H, E) mod 360
By internal_angle_bisector_definition_v0 on F, midpoint(A, G), E, C we get angle(F, C, midpoint(A, G)) == angle(midpoint(A, G), C, E) mod 360
By collinear_definition on H, midpoint(C, D), C we get midpoint(C, D) in Line(C, H), C in Line(H, midpoint(C, D)), Line(C, H) == Line(H, midpoint(C, D)), 0 == 2 * angle(midpoint(C, D), H, C) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(E, F), C, midpoint(E, F), D we get Line(C, D) == internal_angle_bisector(midpoint(E, F), D, midpoint(E, F))
By internal_angle_bisector_definition_v0 on F, midpoint(A, G), E, midpoint(C, D) we get angle(F, midpoint(C, D), midpoint(A, G)) == angle(midpoint(A, G), midpoint(C, D), E) mod 360
By perpendicular_angle_conditions_v0 on F, midpoint(E, F), midpoint(A, G) we get angle(F, midpoint(E, F), midpoint(A, G)) == orientation(F, midpoint(E, F), midpoint(A, G)) mod 360
By perpendicular_angle_conditions_v0 on D, midpoint(A, G), A we get angle(D, midpoint(A, G), A) == orientation(A, D, midpoint(A, G)) mod 360
By collinear_definition on D, H, C we get H in Line(C, D), C in Line(D, H), Line(C, D) == Line(D, H), 0 == 2 * angle(H, D, C) mod 360
By internal_angle_bisector_definition_v0_r on D, midpoint(C, D), D, C we get internal_angle_bisector(D, C, D) == Line(C, midpoint(C, D))
By perpendicular_angle_conditions_v0 on C, midpoint(A, G), G we get angle(C, midpoint(A, G), G) == orientation(C, midpoint(A, G), G) mod 360
By internal_angle_bisector_definition_v0 on A, midpoint(A, G), I, C we get angle(A, C, midpoint(A, G)) == angle(midpoint(A, G), C, I) mod 360
By internal_angle_bisector_definition_v0 on E, midpoint(A, G), F, D we get angle(E, D, midpoint(A, G)) == angle(midpoint(A, G), D, F) mod 360
By collinear_definition on midpoint(E, F), H, D we get H in Line(D, midpoint(E, F)), D in Line(H, midpoint(E, F)), Line(D, midpoint(E, F)) == Line(H, midpoint(E, F)), 0 == 2 * angle(H, midpoint(E, F), D) mod 360
By internal_angle_bisector_definition_v0 on F, D, E, H we get angle(D, H, E) == angle(F, H, D) mod 360
By internal_angle_bisector_definition_v0 on C, H, C, midpoint(C, D) we get angle(C, midpoint(C, D), H) == angle(H, midpoint(C, D), C) mod 360
By internal_angle_bisector_definition_v0 on A, H, G, D we get angle(A, D, H) == angle(H, D, G) mod 360
By perpendicular_angle_conditions_v0 on H, midpoint(E, F), F we get angle(H, midpoint(E, F), F) == orientation(F, H, midpoint(E, F)) mod 360
By internal_angle_bisector_definition_v0_r on D, midpoint(E, F), D, C we get internal_angle_bisector(D, C, D) == Line(C, midpoint(E, F))
By collinear_definition on D, H, midpoint(C, D) we get H in Line(D, midpoint(C, D)), midpoint(C, D) in Line(D, H), Line(D, H) == Line(D, midpoint(C, D)), 0 == 2 * angle(H, D, midpoint(C, D)) mod 360
By collinear_definition on H, midpoint(E, F), C we get midpoint(E, F) in Line(C, H), C in Line(H, midpoint(E, F)), Line(C, H) == Line(H, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), H, C) mod 360
By perpendicular_angle_conditions_v0 on A, midpoint(A, G), C we get angle(A, midpoint(A, G), C) == orientation(A, midpoint(A, G), C) mod 360
By collinear_definition on midpoint(C, D), H, D we get H in Line(D, midpoint(C, D)), D in Line(H, midpoint(C, D)), Line(D, midpoint(C, D)) == Line(H, midpoint(C, D)), 0 == 2 * angle(H, midpoint(C, D), D) mod 360
By collinear_definition on D, C, H we get C in Line(D, H), H in Line(C, D), Line(C, D) == Line(D, H), 0 == 2 * angle(C, D, H) mod 360
By collinear_definition on H, D, C we get D in Line(C, H), C in Line(D, H), Line(C, H) == Line(D, H), 0 == 2 * angle(D, H, C) mod 360
By internal_angle_bisector_definition_v0 on F, midpoint(A, G), G, C we get angle(F, C, midpoint(A, G)) == angle(midpoint(A, G), C, G) mod 360
By collinear_definition on C, H, midpoint(A, G) we get H in Line(C, midpoint(A, G)), midpoint(A, G) in Line(C, H), Line(C, H) == Line(C, midpoint(A, G)), 0 == 2 * angle(H, C, midpoint(A, G)) mod 360
By internal_angle_bisector_definition_v0_r on A, midpoint(A, G), A, G we get internal_angle_bisector(A, G, A) == Line(G, midpoint(A, G))
By internal_angle_bisector_definition_v0_r on C, midpoint(C, D), C, D we get internal_angle_bisector(C, D, C) == Line(D, midpoint(C, D))
By perpendicular_angle_conditions_v0 on midpoint(A, G), midpoint(E, F), E we get angle(midpoint(A, G), midpoint(E, F), E) == orientation(E, midpoint(A, G), midpoint(E, F)) mod 360
By perpendicular_angle_conditions_v0 on G, midpoint(A, G), C we get angle(G, midpoint(A, G), C) == orientation(C, G, midpoint(A, G)) mod 360
By collinear_definition on H, C, D we get C in Line(D, H), D in Line(C, H), Line(C, H) == Line(D, H), 0 == 2 * angle(C, H, D) mod 360
By internal_angle_bisector_definition_v0 on B, midpoint(A, G), F, C we get angle(B, C, midpoint(A, G)) == angle(midpoint(A, G), C, F) mod 360
By internal_angle_bisector_definition_v0 on G, midpoint(A, G), F, C we get angle(G, C, midpoint(A, G)) == angle(midpoint(A, G), C, F) mod 360
By perpendicular_lines_draw_intersection on h, altitude(C, A, D) we get exists(line_intersection(h, altitude(C, A, D)))
By perpendicular_lines_draw_intersection on altitude(C, D, G), Line(D, G) we get exists(line_intersection(Line(D, G), altitude(C, D, G)))
By collinear_definition on midpoint(A, G), midpoint(C, D), C we get midpoint(C, D) in Line(C, midpoint(A, G)), C in Line(midpoint(A, G), midpoint(C, D)), Line(C, midpoint(A, G)) == Line(midpoint(A, G), midpoint(C, D)), 0 == 2 * angle(midpoint(C, D), midpoint(A, G), C) mod 360
By altitude_definition on E, midpoint(A, G), D, Line(E, F) we get Line(E, F) == altitude(E, D, midpoint(A, G))
By altitude_definition on F, D, midpoint(A, G), Line(E, F) we get Line(E, F) == altitude(F, D, midpoint(A, G))
By altitude_definition on G, H, midpoint(A, G), Line(A, G) we get Line(A, G) == altitude(G, H, midpoint(A, G))
By altitude_definition on E, H, D, Line(E, F) we get Line(E, F) == altitude(E, D, H)
By altitude_definition on G, midpoint(A, G), midpoint(C, D), Line(A, G) we get Line(A, G) == altitude(G, midpoint(A, G), midpoint(C, D))
By altitude_definition on orthocenter(A, C, D), H, D, Line(A, G) we get Line(A, G) == altitude(orthocenter(A, C, D), D, H)
By altitude_definition on C, A, I, altitude(C, A, D) we get altitude(C, A, D) == altitude(C, A, I)
By collinear_definition on midpoint(A, G), C, midpoint(C, D) we get C in Line(midpoint(A, G), midpoint(C, D)), midpoint(C, D) in Line(C, midpoint(A, G)), Line(C, midpoint(A, G)) == Line(midpoint(A, G), midpoint(C, D)), 0 == 2 * angle(C, midpoint(A, G), midpoint(C, D)) mod 360
By altitude_definition on F, H, midpoint(A, G), Line(E, F) we get Line(E, F) == altitude(F, H, midpoint(A, G))
By collinear_definition on midpoint(A, G), midpoint(E, F), C we get midpoint(E, F) in Line(C, midpoint(A, G)), C in Line(midpoint(A, G), midpoint(E, F)), Line(C, midpoint(A, G)) == Line(midpoint(A, G), midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), midpoint(A, G), C) mod 360
By altitude_definition on A, midpoint(C, D), H, Line(A, G) we get Line(A, G) == altitude(A, H, midpoint(C, D))
By altitude_definition on orthocenter(A, C, D), I, A, altitude(C, A, D) we get altitude(C, A, D) == altitude(orthocenter(A, C, D), A, I)
By altitude_definition on orthocenter(C, D, G), E, C, Line(D, E) we get Line(D, E) == altitude(orthocenter(C, D, G), C, E)
By altitude_definition on midpoint(C, D), A, midpoint(A, G), Line(C, D) we get Line(C, D) == altitude(midpoint(C, D), A, midpoint(A, G))
By altitude_definition on orthocenter(C, D, G), I, E, Line(D, E) we get Line(D, E) == altitude(orthocenter(C, D, G), E, I)
By altitude_definition on orthocenter(C, D, G), midpoint(C, D), C, Line(A, G) we get Line(A, G) == altitude(orthocenter(C, D, G), C, midpoint(C, D))
By altitude_definition on F, midpoint(C, D), H, Line(E, F) we get Line(E, F) == altitude(F, H, midpoint(C, D))
By altitude_definition on orthocenter(A, C, D), D, midpoint(C, D), Line(A, G) we get Line(A, G) == altitude(orthocenter(A, C, D), D, midpoint(C, D))
By altitude_definition on orthocenter(C, D, G), midpoint(E, F), midpoint(A, G), Line(A, G) we get Line(A, G) == altitude(orthocenter(C, D, G), midpoint(A, G), midpoint(E, F))
By altitude_definition on G, midpoint(E, F), H, Line(A, G) we get Line(A, G) == altitude(G, H, midpoint(E, F))
By altitude_definition on orthocenter(A, C, D), D, J, altitude(C, A, D) we get altitude(C, A, D) == altitude(orthocenter(A, C, D), D, J)
By altitude_definition on orthocenter(A, C, D), midpoint(C, D), C, Line(A, G) we get Line(A, G) == altitude(orthocenter(A, C, D), C, midpoint(C, D))
By altitude_definition on orthocenter(C, D, G), E, G, Line(D, E) we get Line(D, E) == altitude(orthocenter(C, D, G), E, G)
By altitude_definition on orthocenter(A, C, D), C, H, Line(A, G) we get Line(A, G) == altitude(orthocenter(A, C, D), C, H)
By altitude_definition on orthocenter(A, C, D), I, D, altitude(C, A, D) we get altitude(C, A, D) == altitude(orthocenter(A, C, D), D, I)
By altitude_definition on orthocenter(C, D, G), midpoint(C, D), midpoint(A, G), Line(A, G) we get Line(A, G) == altitude(orthocenter(C, D, G), midpoint(A, G), midpoint(C, D))
By altitude_definition on orthocenter(A, C, D), D, midpoint(E, F), Line(A, G) we get Line(A, G) == altitude(orthocenter(A, C, D), D, midpoint(E, F))
By altitude_definition on orthocenter(C, D, G), midpoint(E, F), C, Line(A, G) we get Line(A, G) == altitude(orthocenter(C, D, G), C, midpoint(E, F))
By collinear_definition on midpoint(A, G), C, D we get C in Line(D, midpoint(A, G)), D in Line(C, midpoint(A, G)), Line(C, midpoint(A, G)) == Line(D, midpoint(A, G)), 0 == 2 * angle(C, midpoint(A, G), D) mod 360
By altitude_definition on midpoint(E, F), midpoint(A, G), A, Line(C, D) we get Line(C, D) == altitude(midpoint(E, F), A, midpoint(A, G))
By collinear_definition on midpoint(A, G), C, midpoint(E, F) we get C in Line(midpoint(A, G), midpoint(E, F)), midpoint(E, F) in Line(C, midpoint(A, G)), Line(C, midpoint(A, G)) == Line(midpoint(A, G), midpoint(E, F)), 0 == 2 * angle(C, midpoint(A, G), midpoint(E, F)) mod 360
By altitude_definition on orthocenter(A, C, D), C, D, Line(A, G) we get Line(A, G) == altitude(orthocenter(A, C, D), C, D)
By altitude_definition on C, A, J, altitude(C, A, D) we get altitude(C, A, D) == altitude(C, A, J)
By radical_axis_definition_v0 on orthocenter(A, C, D), Circle(A, B, D), c we get power_of_a_point(orthocenter(A, C, D), c) == power_of_a_point(orthocenter(A, C, D), Circle(A, B, D))
By altitude_definition on G, H, midpoint(C, D), Line(A, G) we get Line(A, G) == altitude(G, H, midpoint(C, D))
By altitude_definition on orthocenter(C, D, G), D, midpoint(C, D), Line(A, G) we get Line(A, G) == altitude(orthocenter(C, D, G), D, midpoint(C, D))
By altitude_definition on H, midpoint(A, G), A, Line(C, D) we get Line(C, D) == altitude(H, A, midpoint(A, G))
By collinear_definition on midpoint(A, G), midpoint(E, F), D we get midpoint(E, F) in Line(D, midpoint(A, G)), D in Line(midpoint(A, G), midpoint(E, F)), Line(D, midpoint(A, G)) == Line(midpoint(A, G), midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), midpoint(A, G), D) mod 360
By altitude_definition on A, midpoint(A, G), midpoint(E, F), Line(A, G) we get Line(A, G) == altitude(A, midpoint(A, G), midpoint(E, F))
By radical_axis_definition_v0 on midpoint(A, G), Circle(A, C, E), Circle(C, F, G) we get power_of_a_point(midpoint(A, G), Circle(A, C, E)) == power_of_a_point(midpoint(A, G), Circle(C, F, G))
By altitude_definition on orthocenter(A, C, D), A, J, altitude(C, A, D) we get altitude(C, A, D) == altitude(orthocenter(A, C, D), A, J)
By altitude_definition on F, midpoint(E, F), midpoint(C, D), Line(E, F) we get Line(E, F) == altitude(F, midpoint(C, D), midpoint(E, F))
By altitude_definition on F, H, midpoint(E, F), Line(E, F) we get Line(E, F) == altitude(F, H, midpoint(E, F))
By altitude_definition on orthocenter(A, C, D), J, I, altitude(C, A, D) we get altitude(C, A, D) == altitude(orthocenter(A, C, D), I, J)
By altitude_definition on orthocenter(C, D, G), I, B, Line(D, E) we get Line(D, E) == altitude(orthocenter(C, D, G), B, I)
By altitude_definition on F, midpoint(A, G), midpoint(C, D), Line(E, F) we get Line(E, F) == altitude(F, midpoint(A, G), midpoint(C, D))
By altitude_definition on C, midpoint(A, G), A, Line(C, D) we get Line(C, D) == altitude(C, A, midpoint(A, G))
By collinear_definition on midpoint(A, G), D, midpoint(C, D) we get D in Line(midpoint(A, G), midpoint(C, D)), midpoint(C, D) in Line(D, midpoint(A, G)), Line(D, midpoint(A, G)) == Line(midpoint(A, G), midpoint(C, D)), 0 == 2 * angle(D, midpoint(A, G), midpoint(C, D)) mod 360
By altitude_definition on F, midpoint(A, G), midpoint(E, F), Line(E, F) we get Line(E, F) == altitude(F, midpoint(A, G), midpoint(E, F))
By altitude_definition on orthocenter(C, D, G), D, midpoint(A, G), Line(A, G) we get Line(A, G) == altitude(orthocenter(C, D, G), D, midpoint(A, G))
By altitude_definition on orthocenter(A, C, D), C, F, Line(D, F) we get Line(D, F) == altitude(orthocenter(A, C, D), C, F)
By altitude_definition on midpoint(C, D), G, midpoint(A, G), Line(C, D) we get Line(C, D) == altitude(midpoint(C, D), G, midpoint(A, G))
By altitude_definition on D, midpoint(A, G), G, Line(C, D) we get Line(C, D) == altitude(D, G, midpoint(A, G))
By altitude_definition on orthocenter(C, D, G), C, H, Line(A, G) we get Line(A, G) == altitude(orthocenter(C, D, G), C, H)
By altitude_definition on G, D, midpoint(A, G), Line(A, G) we get Line(A, G) == altitude(G, D, midpoint(A, G))
By radical_axis_definition_v0 on midpoint(E, F), Circle(A, C, E), Circle(C, F, G) we get power_of_a_point(midpoint(E, F), Circle(A, C, E)) == power_of_a_point(midpoint(E, F), Circle(C, F, G))
By collinear_definition on midpoint(A, G), midpoint(C, D), D we get midpoint(C, D) in Line(D, midpoint(A, G)), D in Line(midpoint(A, G), midpoint(C, D)), Line(D, midpoint(A, G)) == Line(midpoint(A, G), midpoint(C, D)), 0 == 2 * angle(midpoint(C, D), midpoint(A, G), D) mod 360
By altitude_definition on E, H, midpoint(E, F), Line(E, F) we get Line(E, F) == altitude(E, H, midpoint(E, F))
By altitude_definition on G, midpoint(E, F), midpoint(A, G), Line(A, G) we get Line(A, G) == altitude(G, midpoint(A, G), midpoint(E, F))
By altitude_definition on A, midpoint(C, D), midpoint(E, F), Line(A, G) we get Line(A, G) == altitude(A, midpoint(C, D), midpoint(E, F))
By altitude_definition on D, A, midpoint(A, G), Line(C, D) we get Line(C, D) == altitude(D, A, midpoint(A, G))
By altitude_definition on C, G, midpoint(A, G), Line(C, D) we get Line(C, D) == altitude(C, G, midpoint(A, G))
By altitude_definition on A, midpoint(A, G), D, Line(A, G) we get Line(A, G) == altitude(A, D, midpoint(A, G))
By radical_axis_definition_v0 on D, Circle(C, F, G), Circle(A, C, E) we get power_of_a_point(D, Circle(A, C, E)) == power_of_a_point(D, Circle(C, F, G))
By altitude_definition on orthocenter(A, C, D), F, A, Line(D, F) we get Line(D, F) == altitude(orthocenter(A, C, D), A, F)
By radical_axis_definition_v0 on midpoint(C, D), Circle(A, C, E), Circle(C, F, G) we get power_of_a_point(midpoint(C, D), Circle(A, C, E)) == power_of_a_point(midpoint(C, D), Circle(C, F, G))
By altitude_definition on H, midpoint(A, G), G, Line(C, D) we get Line(C, D) == altitude(H, G, midpoint(A, G))
By altitude_definition on G, midpoint(E, F), midpoint(C, D), Line(A, G) we get Line(A, G) == altitude(G, midpoint(C, D), midpoint(E, F))
By altitude_definition on orthocenter(C, D, G), C, midpoint(A, G), Line(A, G) we get Line(A, G) == altitude(orthocenter(C, D, G), C, midpoint(A, G))
By altitude_definition on orthocenter(A, C, D), midpoint(C, D), midpoint(A, G), Line(A, G) we get Line(A, G) == altitude(orthocenter(A, C, D), midpoint(A, G), midpoint(C, D))
By altitude_definition on A, C, midpoint(A, G), Line(A, G) we get Line(A, G) == altitude(A, C, midpoint(A, G))
By altitude_definition on E, H, midpoint(C, D), Line(E, F) we get Line(E, F) == altitude(E, H, midpoint(C, D))
By altitude_definition on orthocenter(A, C, D), A, C, Line(D, F) we get Line(D, F) == altitude(orthocenter(A, C, D), A, C)
By altitude_definition on E, midpoint(E, F), midpoint(A, G), Line(E, F) we get Line(E, F) == altitude(E, midpoint(A, G), midpoint(E, F))
By altitude_definition on orthocenter(C, D, G), D, G, altitude(C, D, G) we get altitude(C, D, G) == altitude(orthocenter(C, D, G), D, G)
By altitude_definition on C, I, D, altitude(C, A, D) we get altitude(C, A, D) == altitude(C, D, I)
By altitude_definition on A, H, midpoint(A, G), Line(A, G) we get Line(A, G) == altitude(A, H, midpoint(A, G))
By altitude_definition on orthocenter(C, D, G), H, D, Line(A, G) we get Line(A, G) == altitude(orthocenter(C, D, G), D, H)
By altitude_definition on A, midpoint(A, G), midpoint(C, D), Line(A, G) we get Line(A, G) == altitude(A, midpoint(A, G), midpoint(C, D))
By altitude_definition on orthocenter(A, C, D), A, D, altitude(C, A, D) we get altitude(C, A, D) == altitude(orthocenter(A, C, D), A, D)
By altitude_definition on E, midpoint(E, F), midpoint(C, D), Line(E, F) we get Line(E, F) == altitude(E, midpoint(C, D), midpoint(E, F))
By altitude_definition on A, midpoint(E, F), H, Line(A, G) we get Line(A, G) == altitude(A, H, midpoint(E, F))
By altitude_definition on orthocenter(C, D, G), B, G, Line(D, E) we get Line(D, E) == altitude(orthocenter(C, D, G), B, G)
By altitude_definition on C, J, I, altitude(C, A, D) we get altitude(C, A, D) == altitude(C, I, J)
By collinear_definition on midpoint(A, G), D, C we get D in Line(C, midpoint(A, G)), C in Line(D, midpoint(A, G)), Line(C, midpoint(A, G)) == Line(D, midpoint(A, G)), 0 == 2 * angle(D, midpoint(A, G), C) mod 360
By altitude_definition on orthocenter(A, C, D), midpoint(E, F), H, Line(A, G) we get Line(A, G) == altitude(orthocenter(A, C, D), H, midpoint(E, F))
By collinear_definition on H, D, midpoint(C, D) we get D in Line(H, midpoint(C, D)), midpoint(C, D) in Line(D, H), Line(D, H) == Line(H, midpoint(C, D)), 0 == 2 * angle(D, H, midpoint(C, D)) mod 360
By altitude_definition on F, C, midpoint(A, G), Line(E, F) we get Line(E, F) == altitude(F, C, midpoint(A, G))
By altitude_definition on orthocenter(C, D, G), D, C, Line(A, G) we get Line(A, G) == altitude(orthocenter(C, D, G), C, D)
By altitude_definition on G, D, H, Line(A, G) we get Line(A, G) == altitude(G, D, H)
By altitude_definition on A, D, H, Line(A, G) we get Line(A, G) == altitude(A, D, H)
By altitude_definition on orthocenter(A, C, D), midpoint(E, F), C, Line(A, G) we get Line(A, G) == altitude(orthocenter(A, C, D), C, midpoint(E, F))
By altitude_definition on orthocenter(C, D, G), midpoint(E, F), midpoint(C, D), Line(A, G) we get Line(A, G) == altitude(orthocenter(C, D, G), midpoint(C, D), midpoint(E, F))
By altitude_definition on E, C, midpoint(A, G), Line(E, F) we get Line(E, F) == altitude(E, C, midpoint(A, G))
By altitude_definition on C, J, D, altitude(C, A, D) we get altitude(C, A, D) == altitude(C, D, J)
By altitude_definition on orthocenter(A, C, D), H, midpoint(A, G), Line(A, G) we get Line(A, G) == altitude(orthocenter(A, C, D), H, midpoint(A, G))
By altitude_definition on orthocenter(C, D, G), G, I, Line(D, E) we get Line(D, E) == altitude(orthocenter(C, D, G), G, I)
By altitude_definition on orthocenter(A, C, D), C, midpoint(A, G), Line(A, G) we get Line(A, G) == altitude(orthocenter(A, C, D), C, midpoint(A, G))
By altitude_definition on F, H, D, Line(E, F) we get Line(E, F) == altitude(F, D, H)
By radical_axis_definition_v0 on orthocenter(C, D, G), c, Circle(A, B, D) we get power_of_a_point(orthocenter(C, D, G), c) == power_of_a_point(orthocenter(C, D, G), Circle(A, B, D))
By altitude_definition on midpoint(E, F), G, midpoint(A, G), Line(C, D) we get Line(C, D) == altitude(midpoint(E, F), G, midpoint(A, G))
By altitude_definition on orthocenter(C, D, G), C, B, Line(D, E) we get Line(D, E) == altitude(orthocenter(C, D, G), B, C)
By altitude_definition on orthocenter(C, D, G), B, E, Line(D, E) we get Line(D, E) == altitude(orthocenter(C, D, G), B, E)
By altitude_definition on orthocenter(C, D, G), H, midpoint(A, G), Line(A, G) we get Line(A, G) == altitude(orthocenter(C, D, G), H, midpoint(A, G))
By altitude_definition on G, midpoint(A, G), C, Line(A, G) we get Line(A, G) == altitude(G, C, midpoint(A, G))
By altitude_definition on orthocenter(C, D, G), I, C, Line(D, E) we get Line(D, E) == altitude(orthocenter(C, D, G), C, I)
By altitude_definition on orthocenter(A, C, D), midpoint(A, G), D, Line(A, G) we get Line(A, G) == altitude(orthocenter(A, C, D), D, midpoint(A, G))
By altitude_definition on orthocenter(A, C, D), midpoint(E, F), midpoint(C, D), Line(A, G) we get Line(A, G) == altitude(orthocenter(A, C, D), midpoint(C, D), midpoint(E, F))
By collinear_definition on midpoint(A, G), H, C we get H in Line(C, midpoint(A, G)), C in Line(H, midpoint(A, G)), Line(C, midpoint(A, G)) == Line(H, midpoint(A, G)), 0 == 2 * angle(H, midpoint(A, G), C) mod 360
By altitude_definition on orthocenter(A, C, D), midpoint(C, D), H, Line(A, G) we get Line(A, G) == altitude(orthocenter(A, C, D), H, midpoint(C, D))
By collinear_definition on midpoint(A, G), C, H we get C in Line(H, midpoint(A, G)), H in Line(C, midpoint(A, G)), Line(C, midpoint(A, G)) == Line(H, midpoint(A, G)), 0 == 2 * angle(C, midpoint(A, G), H) mod 360
By collinear_definition on H, midpoint(E, F), D we get midpoint(E, F) in Line(D, H), D in Line(H, midpoint(E, F)), Line(D, H) == Line(H, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), H, D) mod 360
By collinear_definition on midpoint(A, G), D, midpoint(E, F) we get D in Line(midpoint(A, G), midpoint(E, F)), midpoint(E, F) in Line(D, midpoint(A, G)), Line(D, midpoint(A, G)) == Line(midpoint(A, G), midpoint(E, F)), 0 == 2 * angle(D, midpoint(A, G), midpoint(E, F)) mod 360
By altitude_definition on orthocenter(C, D, G), midpoint(C, D), H, Line(A, G) we get Line(A, G) == altitude(orthocenter(C, D, G), H, midpoint(C, D))
By altitude_definition on orthocenter(C, D, G), D, midpoint(E, F), Line(A, G) we get Line(A, G) == altitude(orthocenter(C, D, G), D, midpoint(E, F))
By altitude_definition on orthocenter(A, C, D), midpoint(A, G), midpoint(E, F), Line(A, G) we get Line(A, G) == altitude(orthocenter(A, C, D), midpoint(A, G), midpoint(E, F))
By collinear_definition on H, D, midpoint(E, F) we get D in Line(H, midpoint(E, F)), midpoint(E, F) in Line(D, H), Line(D, H) == Line(H, midpoint(E, F)), 0 == 2 * angle(D, H, midpoint(E, F)) mod 360
By altitude_definition on orthocenter(C, D, G), H, midpoint(E, F), Line(A, G) we get Line(A, G) == altitude(orthocenter(C, D, G), H, midpoint(E, F))
By altitude_definition on E, midpoint(C, D), midpoint(A, G), Line(E, F) we get Line(E, F) == altitude(E, midpoint(A, G), midpoint(C, D))
By altitude_definition on E, midpoint(A, G), H, Line(E, F) we get Line(E, F) == altitude(E, H, midpoint(A, G))
By altitude_definition on orthocenter(C, D, G), C, G, Line(D, E) we get Line(D, E) == altitude(orthocenter(C, D, G), C, G)
By collinear_definition on H, midpoint(C, D), D we get midpoint(C, D) in Line(D, H), D in Line(H, midpoint(C, D)), Line(D, H) == Line(H, midpoint(C, D)), 0 == 2 * angle(midpoint(C, D), H, D) mod 360
By power_of_a_point_definition on midpoint(E, F), C, H, Circle(C, F, G) we get log(power_of_a_point(midpoint(E, F), Circle(C, F, G))) == log(distance(C, midpoint(E, F))) + log(distance(H, midpoint(E, F)))
By power_of_a_point_definition on midpoint(C, D), C, H, Circle(C, F, G) we get log(power_of_a_point(midpoint(C, D), Circle(C, F, G))) == log(distance(C, midpoint(C, D))) + log(distance(H, midpoint(C, D)))
By power_of_a_point_definition on D, C, H, Circle(C, F, G) we get log(distance(C, D)) + log(distance(D, H)) == log(power_of_a_point(D, Circle(C, F, G)))
By power_of_a_point_definition on D, H, C, Circle(A, C, E) we get log(distance(D, H)) + log(distance(C, D)) == log(power_of_a_point(D, Circle(A, C, E)))
By power_of_a_point_definition on H, C, D, Circle(C, D, E) we get log(distance(C, H)) + log(distance(D, H)) == log(power_of_a_point(H, Circle(C, D, E)))
By power_of_a_point_definition on midpoint(E, F), C, H, Circle(A, C, E) we get log(power_of_a_point(midpoint(E, F), Circle(A, C, E))) == log(distance(C, midpoint(E, F))) + log(distance(H, midpoint(E, F)))
By power_of_a_point_definition on midpoint(C, D), H, C, Circle(A, C, E) we get log(power_of_a_point(midpoint(C, D), Circle(A, C, E))) == log(distance(H, midpoint(C, D))) + log(distance(C, midpoint(C, D)))
By sas_anti_similarity on midpoint(C, D), C, G, midpoint(C, D), C, A we get anti_similar_triangles(A, C, midpoint(C, D), G, C, midpoint(C, D))
By sas_anti_congruence on A, C, midpoint(C, D), G, C, midpoint(C, D) we get anti_congruent_triangles(A, C, midpoint(C, D), G, C, midpoint(C, D))
By sas_anti_congruence on midpoint(E, F), C, A, midpoint(E, F), C, G we get anti_congruent_triangles(A, C, midpoint(E, F), G, C, midpoint(E, F))
By sas_anti_congruence on midpoint(E, F), D, A, midpoint(E, F), D, G we get anti_congruent_triangles(A, D, midpoint(E, F), G, D, midpoint(E, F))
By sas_anti_similarity on midpoint(C, D), D, A, midpoint(C, D), D, G we get anti_similar_triangles(A, D, midpoint(C, D), G, D, midpoint(C, D))
By sas_anti_congruence on midpoint(C, D), D, A, midpoint(C, D), D, G we get anti_congruent_triangles(A, D, midpoint(C, D), G, D, midpoint(C, D))
By sas_anti_congruence on A, D, midpoint(E, F), G, D, midpoint(E, F) we get anti_congruent_triangles(A, D, midpoint(E, F), G, D, midpoint(E, F))
By sas_anti_similarity on midpoint(E, F), D, G, midpoint(E, F), D, A we get anti_similar_triangles(A, D, midpoint(E, F), G, D, midpoint(E, F))
By sas_anti_similarity on G, D, midpoint(C, D), A, D, midpoint(C, D) we get anti_similar_triangles(A, D, midpoint(C, D), G, D, midpoint(C, D))
By sas_anti_congruence on midpoint(E, F), D, G, midpoint(E, F), D, A we get anti_congruent_triangles(A, D, midpoint(E, F), G, D, midpoint(E, F))
By sas_anti_similarity on midpoint(E, F), C, G, midpoint(E, F), C, A we get anti_similar_triangles(A, C, midpoint(E, F), G, C, midpoint(E, F))
By sas_anti_congruence on G, D, midpoint(E, F), A, D, midpoint(E, F) we get anti_congruent_triangles(A, D, midpoint(E, F), G, D, midpoint(E, F))
By sas_anti_congruence on G, C, midpoint(C, D), A, C, midpoint(C, D) we get anti_congruent_triangles(A, C, midpoint(C, D), G, C, midpoint(C, D))
By sas_anti_congruence on A, D, midpoint(C, D), G, D, midpoint(C, D) we get anti_congruent_triangles(A, D, midpoint(C, D), G, D, midpoint(C, D))
By sas_anti_congruence on midpoint(E, F), C, G, midpoint(E, F), C, A we get anti_congruent_triangles(A, C, midpoint(E, F), G, C, midpoint(E, F))
By sas_anti_similarity on G, D, midpoint(E, F), A, D, midpoint(E, F) we get anti_similar_triangles(A, D, midpoint(E, F), G, D, midpoint(E, F))
By sas_anti_similarity on A, D, midpoint(E, F), G, D, midpoint(E, F) we get anti_similar_triangles(A, D, midpoint(E, F), G, D, midpoint(E, F))
By sas_anti_similarity on midpoint(E, F), C, A, midpoint(E, F), C, G we get anti_similar_triangles(A, C, midpoint(E, F), G, C, midpoint(E, F))
By sas_anti_congruence on midpoint(C, D), C, G, midpoint(C, D), C, A we get anti_congruent_triangles(A, C, midpoint(C, D), G, C, midpoint(C, D))
By sas_anti_congruence on G, C, midpoint(E, F), A, C, midpoint(E, F) we get anti_congruent_triangles(A, C, midpoint(E, F), G, C, midpoint(E, F))
By sas_anti_similarity on A, C, midpoint(E, F), G, C, midpoint(E, F) we get anti_similar_triangles(A, C, midpoint(E, F), G, C, midpoint(E, F))
By sas_anti_similarity on midpoint(E, F), D, A, midpoint(E, F), D, G we get anti_similar_triangles(A, D, midpoint(E, F), G, D, midpoint(E, F))
By sas_anti_similarity on A, D, midpoint(C, D), G, D, midpoint(C, D) we get anti_similar_triangles(A, D, midpoint(C, D), G, D, midpoint(C, D))
By sas_anti_congruence on midpoint(C, D), C, A, midpoint(C, D), C, G we get anti_congruent_triangles(A, C, midpoint(C, D), G, C, midpoint(C, D))
By sas_anti_similarity on G, C, midpoint(C, D), A, C, midpoint(C, D) we get anti_similar_triangles(A, C, midpoint(C, D), G, C, midpoint(C, D))
By sas_anti_similarity on A, C, midpoint(C, D), G, C, midpoint(C, D) we get anti_similar_triangles(A, C, midpoint(C, D), G, C, midpoint(C, D))
By sas_anti_congruence on midpoint(C, D), D, G, midpoint(C, D), D, A we get anti_congruent_triangles(A, D, midpoint(C, D), G, D, midpoint(C, D))
By sas_anti_congruence on G, D, midpoint(C, D), A, D, midpoint(C, D) we get anti_congruent_triangles(A, D, midpoint(C, D), G, D, midpoint(C, D))
By power_of_a_point_definition on midpoint(A, G), H, C, Circle(C, F, G) we get log(power_of_a_point(midpoint(A, G), Circle(C, F, G))) == log(distance(H, midpoint(A, G))) + log(distance(C, midpoint(A, G)))
By sas_anti_similarity on midpoint(C, D), D, G, midpoint(C, D), D, A we get anti_similar_triangles(A, D, midpoint(C, D), G, D, midpoint(C, D))
By sas_anti_similarity on midpoint(C, D), C, A, midpoint(C, D), C, G we get anti_similar_triangles(A, C, midpoint(C, D), G, C, midpoint(C, D))
By sas_anti_congruence on A, C, midpoint(E, F), G, C, midpoint(E, F) we get anti_congruent_triangles(A, C, midpoint(E, F), G, C, midpoint(E, F))
By sas_anti_similarity on G, C, midpoint(E, F), A, C, midpoint(E, F) we get anti_similar_triangles(A, C, midpoint(E, F), G, C, midpoint(E, F))
By power_of_a_point_definition on midpoint(A, G), C, H, Circle(A, C, E) we get log(power_of_a_point(midpoint(A, G), Circle(A, C, E))) == log(distance(C, midpoint(A, G))) + log(distance(H, midpoint(A, G)))
By power_of_a_point_definition on midpoint(A, G), C, D, Circle(C, D, E) we get log(power_of_a_point(midpoint(A, G), Circle(C, D, E))) == log(distance(C, midpoint(A, G))) + log(distance(D, midpoint(A, G)))
By concyclic_sufficient_conditions_v1 on A, C, B, center(Circle(A, B, D)) we get concyclic(A, B, C, center(Circle(A, B, D)))
By line_definition on line_intersection(h, altitude(C, A, D)), J, h we get h == Line(J, line_intersection(h, altitude(C, A, D)))
By concurrent_sufficient_conditions on altitude(C, A, D), Line(A, G), Line(D, F) we get concurrent(Line(A, G), Line(D, F), altitude(C, A, D))
By line_definition on D, line_intersection(Line(D, G), altitude(C, D, G)), Line(D, G) we get Line(D, G) == Line(D, line_intersection(Line(D, G), altitude(C, D, G)))
By concurrent_sufficient_conditions on Line(C, D), altitude(C, D, G), f we get concurrent(f, Line(C, D), altitude(C, D, G))
By concurrent_sufficient_conditions on Line(C, D), altitude(C, D, G), altitude(C, A, D) we get concurrent(Line(C, D), altitude(C, A, D), altitude(C, D, G))
By concurrent_sufficient_conditions on g, altitude(C, A, D), f we get concurrent(f, g, altitude(C, A, D))
By concurrent_sufficient_conditions on g, altitude(C, D, G), altitude(C, A, D) we get concurrent(g, altitude(C, A, D), altitude(C, D, G))
By concurrent_sufficient_conditions on altitude(C, D, G), altitude(C, A, D), g we get concurrent(g, altitude(C, A, D), altitude(C, D, G))
By line_definition on A, line_intersection(h, altitude(C, A, D)), h we get h == Line(A, line_intersection(h, altitude(C, A, D)))
By concurrent_sufficient_conditions on altitude(C, A, D), altitude(C, D, G), Line(C, D) we get concurrent(Line(C, D), altitude(C, A, D), altitude(C, D, G))
By concurrent_sufficient_conditions on f, altitude(C, D, G), g we get concurrent(f, g, altitude(C, D, G))
By concurrent_sufficient_conditions on altitude(C, D, G), Line(D, E), Line(A, G) we get concurrent(Line(A, G), Line(D, E), altitude(C, D, G))
By concurrent_sufficient_conditions on g, Line(C, D), altitude(C, D, G) we get concurrent(g, Line(C, D), altitude(C, D, G))
By line_definition on orthocenter(C, D, G), line_intersection(Line(D, G), altitude(C, D, G)), altitude(C, D, G) we get altitude(C, D, G) == Line(orthocenter(C, D, G), line_intersection(Line(D, G), altitude(C, D, G)))
By concurrent_sufficient_conditions on altitude(C, D, G), Line(C, D), f we get concurrent(f, Line(C, D), altitude(C, D, G))
By concyclic_sufficient_conditions_v0 on D, J, F, H we get concyclic(D, F, H, J)
By concurrent_sufficient_conditions on Line(C, D), altitude(C, A, D), f we get concurrent(f, Line(C, D), altitude(C, A, D))
By concurrent_sufficient_conditions on Line(C, D), f, altitude(C, A, D) we get concurrent(f, Line(C, D), altitude(C, A, D))
By concurrent_sufficient_conditions on altitude(C, A, D), g, Line(C, D) we get concurrent(g, Line(C, D), altitude(C, A, D))
By concurrent_sufficient_conditions on f, altitude(C, D, G), Line(C, D) we get concurrent(f, Line(C, D), altitude(C, D, G))
By concurrent_sufficient_conditions on altitude(C, A, D), f, g we get concurrent(f, g, altitude(C, A, D))
By line_definition on D, line_intersection(h, altitude(C, A, D)), h we get h == Line(D, line_intersection(h, altitude(C, A, D)))
By line_definition on line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D), altitude(C, A, D) we get altitude(C, A, D) == Line(orthocenter(A, C, D), line_intersection(h, altitude(C, A, D)))
By concurrent_sufficient_conditions on f, altitude(C, A, D), altitude(C, D, G) we get concurrent(f, altitude(C, A, D), altitude(C, D, G))
By concurrent_sufficient_conditions on g, f, altitude(C, D, G) we get concurrent(f, g, altitude(C, D, G))
By concurrent_sufficient_conditions on Line(C, D), altitude(C, A, D), altitude(C, D, G) we get concurrent(Line(C, D), altitude(C, A, D), altitude(C, D, G))
By concurrent_sufficient_conditions on Line(C, D), g, altitude(C, A, D) we get concurrent(g, Line(C, D), altitude(C, A, D))
By concurrent_sufficient_conditions on Line(A, G), altitude(C, A, D), Line(D, F) we get concurrent(Line(A, G), Line(D, F), altitude(C, A, D))
By concurrent_sufficient_conditions on g, altitude(C, D, G), Line(C, D) we get concurrent(g, Line(C, D), altitude(C, D, G))
By concurrent_sufficient_conditions on altitude(C, D, G), f, g we get concurrent(f, g, altitude(C, D, G))
By concurrent_sufficient_conditions on f, g, altitude(C, D, G) we get concurrent(f, g, altitude(C, D, G))
By concurrent_sufficient_conditions on altitude(C, D, G), f, altitude(C, A, D) we get concurrent(f, altitude(C, A, D), altitude(C, D, G))
By concurrent_sufficient_conditions on altitude(C, D, G), g, Line(C, D) we get concurrent(g, Line(C, D), altitude(C, D, G))
By concurrent_sufficient_conditions on altitude(C, A, D), Line(D, F), Line(A, G) we get concurrent(Line(A, G), Line(D, F), altitude(C, A, D))
By concurrent_sufficient_conditions on Line(C, D), f, altitude(C, D, G) we get concurrent(f, Line(C, D), altitude(C, D, G))
By concurrent_sufficient_conditions on altitude(C, A, D), g, altitude(C, D, G) we get concurrent(g, altitude(C, A, D), altitude(C, D, G))
By concurrent_sufficient_conditions on altitude(C, A, D), altitude(C, D, G), g we get concurrent(g, altitude(C, A, D), altitude(C, D, G))
By concurrent_sufficient_conditions on Line(C, D), altitude(C, D, G), g we get concurrent(g, Line(C, D), altitude(C, D, G))
By concurrent_sufficient_conditions on altitude(C, A, D), f, Line(C, D) we get concurrent(f, Line(C, D), altitude(C, A, D))
By concurrent_sufficient_conditions on Line(A, G), altitude(C, D, G), Line(D, E) we get concurrent(Line(A, G), Line(D, E), altitude(C, D, G))
By concurrent_sufficient_conditions on g, altitude(C, A, D), altitude(C, D, G) we get concurrent(g, altitude(C, A, D), altitude(C, D, G))
By concurrent_sufficient_conditions on f, Line(C, D), altitude(C, D, G) we get concurrent(f, Line(C, D), altitude(C, D, G))
By concurrent_sufficient_conditions on f, altitude(C, D, G), altitude(C, A, D) we get concurrent(f, altitude(C, A, D), altitude(C, D, G))
By line_definition on line_intersection(h, altitude(C, A, D)), I, h we get h == Line(I, line_intersection(h, altitude(C, A, D)))
By concurrent_sufficient_conditions on altitude(C, D, G), Line(C, D), g we get concurrent(g, Line(C, D), altitude(C, D, G))
By line_definition on G, line_intersection(Line(D, G), altitude(C, D, G)), Line(D, G) we get Line(D, G) == Line(G, line_intersection(Line(D, G), altitude(C, D, G)))
By line_definition on C, line_intersection(Line(D, G), altitude(C, D, G)), altitude(C, D, G) we get altitude(C, D, G) == Line(C, line_intersection(Line(D, G), altitude(C, D, G)))
By concurrent_sufficient_conditions on f, altitude(C, A, D), g we get concurrent(f, g, altitude(C, A, D))
By concurrent_sufficient_conditions on f, g, altitude(C, A, D) we get concurrent(f, g, altitude(C, A, D))
By concurrent_sufficient_conditions on altitude(C, D, G), altitude(C, A, D), f we get concurrent(f, altitude(C, A, D), altitude(C, D, G))
By concurrent_sufficient_conditions on altitude(C, A, D), g, f we get concurrent(f, g, altitude(C, A, D))
By concurrent_sufficient_conditions on altitude(C, A, D), f, altitude(C, D, G) we get concurrent(f, altitude(C, A, D), altitude(C, D, G))
By concurrent_sufficient_conditions on Line(D, E), Line(A, G), altitude(C, D, G) we get concurrent(Line(A, G), Line(D, E), altitude(C, D, G))
By concurrent_sufficient_conditions on altitude(C, D, G), f, Line(C, D) we get concurrent(f, Line(C, D), altitude(C, D, G))
By concurrent_sufficient_conditions on altitude(C, D, G), Line(A, G), Line(D, E) we get concurrent(Line(A, G), Line(D, E), altitude(C, D, G))
By concurrent_sufficient_conditions on Line(C, D), altitude(C, A, D), g we get concurrent(g, Line(C, D), altitude(C, A, D))
By concurrent_sufficient_conditions on Line(D, E), altitude(C, D, G), Line(A, G) we get concurrent(Line(A, G), Line(D, E), altitude(C, D, G))
By line_definition on C, line_intersection(h, altitude(C, A, D)), altitude(C, A, D) we get altitude(C, A, D) == Line(C, line_intersection(h, altitude(C, A, D)))
By concurrent_sufficient_conditions on altitude(C, A, D), Line(C, D), f we get concurrent(f, Line(C, D), altitude(C, A, D))
By concurrent_sufficient_conditions on f, altitude(C, A, D), Line(C, D) we get concurrent(f, Line(C, D), altitude(C, A, D))
By concurrent_sufficient_conditions on Line(A, G), Line(D, E), altitude(C, D, G) we get concurrent(Line(A, G), Line(D, E), altitude(C, D, G))
By concurrent_sufficient_conditions on g, altitude(C, D, G), f we get concurrent(f, g, altitude(C, D, G))
By concurrent_sufficient_conditions on g, f, altitude(C, A, D) we get concurrent(f, g, altitude(C, A, D))
By concurrent_sufficient_conditions on f, Line(C, D), altitude(C, A, D) we get concurrent(f, Line(C, D), altitude(C, A, D))
By concurrent_sufficient_conditions on g, altitude(C, A, D), Line(C, D) we get concurrent(g, Line(C, D), altitude(C, A, D))
By concurrent_sufficient_conditions on altitude(C, D, G), Line(C, D), altitude(C, A, D) we get concurrent(Line(C, D), altitude(C, A, D), altitude(C, D, G))
By concurrent_sufficient_conditions on g, Line(C, D), altitude(C, A, D) we get concurrent(g, Line(C, D), altitude(C, A, D))
By concurrent_sufficient_conditions on altitude(C, A, D), Line(C, D), altitude(C, D, G) we get concurrent(Line(C, D), altitude(C, A, D), altitude(C, D, G))
By concurrent_sufficient_conditions on altitude(C, D, G), altitude(C, A, D), Line(C, D) we get concurrent(Line(C, D), altitude(C, A, D), altitude(C, D, G))
By concurrent_sufficient_conditions on altitude(C, A, D), altitude(C, D, G), f we get concurrent(f, altitude(C, A, D), altitude(C, D, G))
By concurrent_sufficient_conditions on Line(C, D), g, altitude(C, D, G) we get concurrent(g, Line(C, D), altitude(C, D, G))
By concurrent_sufficient_conditions on altitude(C, D, G), g, altitude(C, A, D) we get concurrent(g, altitude(C, A, D), altitude(C, D, G))
By concurrent_sufficient_conditions on Line(D, F), Line(A, G), altitude(C, A, D) we get concurrent(Line(A, G), Line(D, F), altitude(C, A, D))
By concurrent_sufficient_conditions on Line(A, G), Line(D, F), altitude(C, A, D) we get concurrent(Line(A, G), Line(D, F), altitude(C, A, D))
By concurrent_sufficient_conditions on Line(D, F), altitude(C, A, D), Line(A, G) we get concurrent(Line(A, G), Line(D, F), altitude(C, A, D))
By concurrent_sufficient_conditions on altitude(C, A, D), Line(C, D), g we get concurrent(g, Line(C, D), altitude(C, A, D))
By concurrent_sufficient_conditions on altitude(C, D, G), g, f we get concurrent(f, g, altitude(C, D, G))
By radical_axis_is_perpendicular_to_center_line on Line(A, E), Circle(A, C, E), c we get perpendicular(Line(A, E), Line(center(c), center(Circle(A, C, E))))
By radical_axis_is_perpendicular_to_center_line on Line(F, G), c, Circle(C, F, G) we get perpendicular(Line(F, G), Line(center(c), center(Circle(C, F, G))))
By line_intersection_definition on D, radical_axis(Circle(A, B, D), Circle(C, D, E)), Line(D, F) we get D == line_intersection(Line(D, F), radical_axis(Circle(A, B, D), Circle(C, D, E)))
By line_intersection_definition on midpoint(E, F), Line(E, F), Line(G, midpoint(E, F)) we get midpoint(E, F) == line_intersection(Line(E, F), Line(G, midpoint(E, F)))
By line_intersection_definition on A, Line(A, midpoint(C, D)), Line(A, B) we get A == line_intersection(Line(A, B), Line(A, midpoint(C, D)))
By line_intersection_definition on G, Line(G, midpoint(C, D)), Line(G, midpoint(E, F)) we get G == line_intersection(Line(G, midpoint(C, D)), Line(G, midpoint(E, F)))
By line_intersection_definition on midpoint(C, D), Line(C, D), Line(A, midpoint(C, D)) we get midpoint(C, D) == line_intersection(Line(C, D), Line(A, midpoint(C, D)))
By line_intersection_definition on center(Circle(C, F, G)), Line(H, center(Circle(C, F, G))), Line(G, center(Circle(C, F, G))) we get center(Circle(C, F, G)) == line_intersection(Line(G, center(Circle(C, F, G))), Line(H, center(Circle(C, F, G))))
By line_intersection_definition on B, i, Line(B, center(Circle(A, B, D))) we get B == line_intersection(i, Line(B, center(Circle(A, B, D))))
By line_intersection_definition on G, Line(A, G), radical_axis(d, Circle(A, B, D)) we get G == line_intersection(Line(A, G), radical_axis(d, Circle(A, B, D)))
By line_intersection_definition on center(Circle(C, F, G)), Line(C, center(Circle(C, F, G))), Line(G, center(Circle(C, F, G))) we get center(Circle(C, F, G)) == line_intersection(Line(C, center(Circle(C, F, G))), Line(G, center(Circle(C, F, G))))
By line_intersection_definition on H, Line(A, H), Line(H, center(Circle(C, F, G))) we get H == line_intersection(Line(A, H), Line(H, center(Circle(C, F, G))))
By line_intersection_definition on F, Line(F, center(d)), Line(F, center(Circle(C, F, G))) we get F == line_intersection(Line(F, center(d)), Line(F, center(Circle(C, F, G))))
By line_intersection_definition on G, radical_axis(d, Circle(A, B, D)), Line(G, center(Circle(C, F, G))) we get G == line_intersection(radical_axis(d, Circle(A, B, D)), Line(G, center(Circle(C, F, G))))
By line_intersection_definition on G, Line(G, center(d)), Line(G, center(Circle(C, F, G))) we get G == line_intersection(Line(G, center(d)), Line(G, center(Circle(C, F, G))))
By line_intersection_definition on A, radical_axis(Circle(A, B, D), Circle(A, C, E)), g we get A == line_intersection(g, radical_axis(Circle(A, B, D), Circle(A, C, E)))
By line_intersection_definition on C, f, Line(C, center(Circle(A, C, E))) we get C == line_intersection(f, Line(C, center(Circle(A, C, E))))
By line_intersection_definition on A, Line(A, center(Circle(A, C, E))), Line(A, B) we get A == line_intersection(Line(A, B), Line(A, center(Circle(A, C, E))))
By line_intersection_definition on C, g, Line(C, center(Circle(A, C, E))) we get C == line_intersection(g, Line(C, center(Circle(A, C, E))))
By line_intersection_definition on F, Line(F, J), Line(F, center(Circle(C, F, G))) we get F == line_intersection(Line(F, J), Line(F, center(Circle(C, F, G))))
By line_intersection_definition on A, Line(A, H), radical_axis(Circle(A, B, D), Circle(A, C, E)) we get A == line_intersection(Line(A, H), radical_axis(Circle(A, B, D), Circle(A, C, E)))
By line_intersection_definition on midpoint(C, D), Line(G, midpoint(C, D)), Line(A, midpoint(C, D)) we get midpoint(C, D) == line_intersection(Line(A, midpoint(C, D)), Line(G, midpoint(C, D)))
By line_intersection_definition on G, Line(G, H), radical_axis(d, Circle(A, B, D)) we get G == line_intersection(Line(G, H), radical_axis(d, Circle(A, B, D)))
By line_intersection_definition on E, Line(E, center(Circle(A, C, E))), median(E, C, D) we get E == line_intersection(median(E, C, D), Line(E, center(Circle(A, C, E))))
By perpendicular_line_definition on line_intersection(Line(D, G), altitude(C, D, G)), altitude(C, D, G), Line(D, G) we get altitude(C, D, G) == perpendicular_line(line_intersection(Line(D, G), altitude(C, D, G)), Line(D, G))
By line_intersection_definition on A, Line(A, midpoint(E, F)), h we get A == line_intersection(h, Line(A, midpoint(E, F)))
By line_intersection_definition on D, Line(D, G), Line(D, center(Circle(A, B, D))) we get D == line_intersection(Line(D, G), Line(D, center(Circle(A, B, D))))
By line_intersection_definition on H, Line(A, H), Line(H, center(Circle(A, C, E))) we get H == line_intersection(Line(A, H), Line(H, center(Circle(A, C, E))))
By line_intersection_definition on A, Line(A, center(Circle(A, C, E))), Line(A, E) we get A == line_intersection(Line(A, E), Line(A, center(Circle(A, C, E))))
By line_intersection_definition on G, Line(G, midpoint(E, F)), Line(G, center(Circle(A, B, D))) we get G == line_intersection(Line(G, midpoint(E, F)), Line(G, center(Circle(A, B, D))))
By line_intersection_definition on A, Line(A, G), Line(A, midpoint(C, D)) we get A == line_intersection(Line(A, G), Line(A, midpoint(C, D)))
By line_intersection_definition on A, Line(A, center(Circle(A, B, D))), Line(A, midpoint(C, D)) we get A == line_intersection(Line(A, midpoint(C, D)), Line(A, center(Circle(A, B, D))))
By median_definition on A, F, E, Line(A, midpoint(E, F)) we get median(A, E, F) == Line(A, midpoint(E, F))
By line_intersection_definition on H, Line(E, H), Line(H, center(Circle(A, C, E))) we get H == line_intersection(Line(E, H), Line(H, center(Circle(A, C, E))))
By line_intersection_definition on C, Line(C, center(Circle(C, F, G))), altitude(C, D, G) we get C == line_intersection(altitude(C, D, G), Line(C, center(Circle(C, F, G))))
By line_intersection_definition on G, Line(G, J), Line(G, midpoint(C, D)) we get G == line_intersection(Line(G, J), Line(G, midpoint(C, D)))
By line_intersection_definition on A, Line(A, center(Circle(A, B, D))), Line(A, midpoint(E, F)) we get A == line_intersection(Line(A, midpoint(E, F)), Line(A, center(Circle(A, B, D))))
By line_intersection_definition on midpoint(E, F), Line(A, midpoint(E, F)), Line(C, D) we get midpoint(E, F) == line_intersection(Line(C, D), Line(A, midpoint(E, F)))
By line_intersection_definition on midpoint(C, D), median(F, C, D), Line(G, midpoint(C, D)) we get midpoint(C, D) == line_intersection(median(F, C, D), Line(G, midpoint(C, D)))
By line_intersection_definition on D, Line(C, D), radical_axis(Circle(A, B, D), Circle(C, D, E)) we get D == line_intersection(Line(C, D), radical_axis(Circle(A, B, D), Circle(C, D, E)))
By line_intersection_definition on C, altitude(C, A, D), Line(C, center(Circle(A, C, E))) we get C == line_intersection(altitude(C, A, D), Line(C, center(Circle(A, C, E))))
By line_intersection_definition on D, i, radical_axis(Circle(A, B, D), Circle(C, D, E)) we get D == line_intersection(i, radical_axis(Circle(A, B, D), Circle(C, D, E)))
By line_intersection_definition on F, Line(F, center(Circle(C, F, G))), g we get F == line_intersection(g, Line(F, center(Circle(C, F, G))))
By line_intersection_definition on H, Line(H, center(Circle(C, F, G))), Line(F, H) we get H == line_intersection(Line(F, H), Line(H, center(Circle(C, F, G))))
By line_intersection_definition on A, radical_axis(Circle(A, B, D), Circle(A, C, E)), Line(A, midpoint(E, F)) we get A == line_intersection(Line(A, midpoint(E, F)), radical_axis(Circle(A, B, D), Circle(A, C, E)))
By line_intersection_definition on center(Circle(A, C, E)), Line(A, center(Circle(A, C, E))), Line(H, center(Circle(A, C, E))) we get center(Circle(A, C, E)) == line_intersection(Line(A, center(Circle(A, C, E))), Line(H, center(Circle(A, C, E))))
By line_intersection_definition on F, Line(E, F), Line(F, center(Circle(C, F, G))) we get F == line_intersection(Line(E, F), Line(F, center(Circle(C, F, G))))
By line_intersection_definition on G, Line(G, center(Circle(C, F, G))), radical_axis(Circle(A, B, D), Circle(C, F, G)) we get G == line_intersection(radical_axis(Circle(A, B, D), Circle(C, F, G)), Line(G, center(Circle(C, F, G))))
By line_intersection_definition on G, radical_axis(Circle(A, B, D), Circle(C, F, G)), Line(A, G) we get G == line_intersection(Line(A, G), radical_axis(Circle(A, B, D), Circle(C, F, G)))
By line_intersection_definition on A, Line(A, center(Circle(A, C, E))), radical_axis(Circle(A, B, D), Circle(A, C, E)) we get A == line_intersection(radical_axis(Circle(A, B, D), Circle(A, C, E)), Line(A, center(Circle(A, C, E))))
By line_intersection_definition on C, altitude(C, A, D), Line(C, center(Circle(C, F, G))) we get C == line_intersection(altitude(C, A, D), Line(C, center(Circle(C, F, G))))
By line_intersection_definition on G, Line(G, midpoint(C, D)), Line(G, center(Circle(C, F, G))) we get G == line_intersection(Line(G, midpoint(C, D)), Line(G, center(Circle(C, F, G))))
By line_intersection_definition on G, Line(G, center(d)), Line(G, midpoint(E, F)) we get G == line_intersection(Line(G, center(d)), Line(G, midpoint(E, F)))
By line_intersection_definition on G, Line(F, G), radical_axis(Circle(A, B, D), Circle(C, F, G)) we get G == line_intersection(Line(F, G), radical_axis(Circle(A, B, D), Circle(C, F, G)))
By line_intersection_definition on G, Line(D, G), Line(G, midpoint(E, F)) we get G == line_intersection(Line(D, G), Line(G, midpoint(E, F)))
By line_intersection_definition on A, Line(A, midpoint(C, D)), radical_axis(Circle(A, B, D), Circle(A, C, E)) we get A == line_intersection(Line(A, midpoint(C, D)), radical_axis(Circle(A, B, D), Circle(A, C, E)))
By line_intersection_definition on center(Circle(A, B, D)), Line(B, center(Circle(A, B, D))), Line(G, center(Circle(A, B, D))) we get center(Circle(A, B, D)) == line_intersection(Line(B, center(Circle(A, B, D))), Line(G, center(Circle(A, B, D))))
By line_intersection_definition on B, f, Line(B, center(Circle(A, B, D))) we get B == line_intersection(f, Line(B, center(Circle(A, B, D))))
By line_intersection_definition on midpoint(E, F), Line(E, F), Line(A, midpoint(E, F)) we get midpoint(E, F) == line_intersection(Line(E, F), Line(A, midpoint(E, F)))
By line_intersection_definition on G, Line(G, center(d)), radical_axis(Circle(A, B, D), Circle(C, F, G)) we get G == line_intersection(Line(G, center(d)), radical_axis(Circle(A, B, D), Circle(C, F, G)))
By line_intersection_definition on A, Line(A, B), Line(A, center(Circle(A, B, D))) we get A == line_intersection(Line(A, B), Line(A, center(Circle(A, B, D))))
By line_intersection_definition on A, Line(A, center(Circle(A, B, D))), Line(A, H) we get A == line_intersection(Line(A, H), Line(A, center(Circle(A, B, D))))
By line_intersection_definition on midpoint(E, F), Line(A, midpoint(E, F)), Line(G, midpoint(E, F)) we get midpoint(E, F) == line_intersection(Line(A, midpoint(E, F)), Line(G, midpoint(E, F)))
By line_intersection_definition on A, Line(A, midpoint(E, F)), Line(A, midpoint(C, D)) we get A == line_intersection(Line(A, midpoint(C, D)), Line(A, midpoint(E, F)))
By line_intersection_definition on center(Circle(A, C, E)), Line(E, center(Circle(A, C, E))), Line(H, center(Circle(A, C, E))) we get center(Circle(A, C, E)) == line_intersection(Line(E, center(Circle(A, C, E))), Line(H, center(Circle(A, C, E))))
By line_intersection_definition on midpoint(C, D), Line(G, midpoint(C, D)), median(E, C, D) we get midpoint(C, D) == line_intersection(median(E, C, D), Line(G, midpoint(C, D)))
By line_intersection_definition on center(Circle(A, B, D)), Line(D, center(Circle(A, B, D))), Line(G, center(Circle(A, B, D))) we get center(Circle(A, B, D)) == line_intersection(Line(D, center(Circle(A, B, D))), Line(G, center(Circle(A, B, D))))
By line_intersection_definition on G, radical_axis(Circle(A, B, D), Circle(C, F, G)), Line(G, midpoint(C, D)) we get G == line_intersection(Line(G, midpoint(C, D)), radical_axis(Circle(A, B, D), Circle(C, F, G)))
By line_intersection_definition on G, Line(F, G), Line(G, center(Circle(C, F, G))) we get G == line_intersection(Line(F, G), Line(G, center(Circle(C, F, G))))
By line_intersection_definition on G, Line(G, center(Circle(C, F, G))), Line(G, midpoint(E, F)) we get G == line_intersection(Line(G, midpoint(E, F)), Line(G, center(Circle(C, F, G))))
By line_intersection_definition on midpoint(E, F), Line(C, D), Line(G, midpoint(E, F)) we get midpoint(E, F) == line_intersection(Line(C, D), Line(G, midpoint(E, F)))
By line_intersection_definition on F, radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, F, G))) we get F == line_intersection(radical_axis(d, Circle(C, D, E)), Line(F, center(Circle(C, F, G))))
By line_intersection_definition on G, Line(G, J), Line(G, center(Circle(C, F, G))) we get G == line_intersection(Line(G, J), Line(G, center(Circle(C, F, G))))
By line_intersection_definition on A, Line(A, center(Circle(A, B, D))), g we get A == line_intersection(g, Line(A, center(Circle(A, B, D))))
By line_intersection_definition on G, Line(G, midpoint(C, D)), Line(G, center(Circle(A, B, D))) we get G == line_intersection(Line(G, midpoint(C, D)), Line(G, center(Circle(A, B, D))))
By line_intersection_definition on A, Line(A, midpoint(C, D)), g we get A == line_intersection(g, Line(A, midpoint(C, D)))
By line_intersection_definition on G, Line(G, J), radical_axis(Circle(A, B, D), Circle(C, F, G)) we get G == line_intersection(Line(G, J), radical_axis(Circle(A, B, D), Circle(C, F, G)))
By line_intersection_definition on C, Line(C, center(Circle(C, F, G))), g we get C == line_intersection(g, Line(C, center(Circle(C, F, G))))
By line_intersection_definition on H, Line(H, center(Circle(C, F, G))), Line(C, D) we get H == line_intersection(Line(C, D), Line(H, center(Circle(C, F, G))))
By line_intersection_definition on G, f, radical_axis(Circle(A, B, D), Circle(C, F, G)) we get G == line_intersection(f, radical_axis(Circle(A, B, D), Circle(C, F, G)))
By line_intersection_definition on A, Line(A, midpoint(E, F)), g we get A == line_intersection(g, Line(A, midpoint(E, F)))
By line_intersection_definition on H, Line(H, center(Circle(A, C, E))), Line(C, D) we get H == line_intersection(Line(C, D), Line(H, center(Circle(A, C, E))))
By line_intersection_definition on G, Line(D, G), Line(G, center(Circle(A, B, D))) we get G == line_intersection(Line(D, G), Line(G, center(Circle(A, B, D))))
By line_intersection_definition on G, Line(G, J), Line(G, midpoint(E, F)) we get G == line_intersection(Line(G, J), Line(G, midpoint(E, F)))
By line_intersection_definition on G, Line(G, H), Line(G, midpoint(E, F)) we get G == line_intersection(Line(G, H), Line(G, midpoint(E, F)))
By line_intersection_definition on center(Circle(C, F, G)), Line(G, center(Circle(C, F, G))), Line(F, center(Circle(C, F, G))) we get center(Circle(C, F, G)) == line_intersection(Line(F, center(Circle(C, F, G))), Line(G, center(Circle(C, F, G))))
By line_intersection_definition on G, Line(G, center(Circle(C, F, G))), Line(G, center(Circle(A, B, D))) we get G == line_intersection(Line(G, center(Circle(A, B, D))), Line(G, center(Circle(C, F, G))))
By line_intersection_definition on G, f, Line(G, midpoint(C, D)) we get G == line_intersection(f, Line(G, midpoint(C, D)))
By line_intersection_definition on G, Line(G, H), Line(G, center(Circle(C, F, G))) we get G == line_intersection(Line(G, H), Line(G, center(Circle(C, F, G))))
By line_intersection_definition on A, Line(A, E), Line(A, midpoint(C, D)) we get A == line_intersection(Line(A, E), Line(A, midpoint(C, D)))
By line_intersection_definition on C, Line(C, center(Circle(A, C, E))), Line(C, center(Circle(C, F, G))) we get C == line_intersection(Line(C, center(Circle(A, C, E))), Line(C, center(Circle(C, F, G))))
By line_intersection_definition on midpoint(C, D), median(E, C, D), Line(A, midpoint(C, D)) we get midpoint(C, D) == line_intersection(median(E, C, D), Line(A, midpoint(C, D)))
By line_intersection_definition on A, Line(A, center(Circle(A, C, E))), Line(A, H) we get A == line_intersection(Line(A, H), Line(A, center(Circle(A, C, E))))
By line_intersection_definition on C, Line(C, D), Line(C, center(Circle(A, C, E))) we get C == line_intersection(Line(C, D), Line(C, center(Circle(A, C, E))))
By line_intersection_definition on A, radical_axis(Circle(A, B, D), Circle(A, C, E)), Line(A, B) we get A == line_intersection(Line(A, B), radical_axis(Circle(A, B, D), Circle(A, C, E)))
By line_intersection_definition on H, Line(G, H), Line(H, center(Circle(A, C, E))) we get H == line_intersection(Line(G, H), Line(H, center(Circle(A, C, E))))
By line_intersection_definition on A, Line(A, midpoint(E, F)), Line(A, H) we get A == line_intersection(Line(A, H), Line(A, midpoint(E, F)))
By line_intersection_definition on G, radical_axis(d, Circle(A, B, D)), Line(G, midpoint(E, F)) we get G == line_intersection(Line(G, midpoint(E, F)), radical_axis(d, Circle(A, B, D)))
By line_intersection_definition on F, Line(F, center(Circle(C, F, G))), median(F, C, D) we get F == line_intersection(median(F, C, D), Line(F, center(Circle(C, F, G))))
By perpendicular_line_definition on line_intersection(Line(D, G), altitude(C, D, G)), Line(D, G), altitude(C, D, G) we get Line(D, G) == perpendicular_line(line_intersection(Line(D, G), altitude(C, D, G)), altitude(C, D, G))
By line_intersection_definition on center(Circle(C, F, G)), Line(F, center(Circle(C, F, G))), Line(C, center(Circle(C, F, G))) we get center(Circle(C, F, G)) == line_intersection(Line(C, center(Circle(C, F, G))), Line(F, center(Circle(C, F, G))))
By line_intersection_definition on A, radical_axis(Circle(A, B, D), Circle(A, C, E)), Line(A, E) we get A == line_intersection(Line(A, E), radical_axis(Circle(A, B, D), Circle(A, C, E)))
By line_intersection_definition on H, Line(H, center(Circle(C, F, G))), Line(H, center(Circle(A, C, E))) we get H == line_intersection(Line(H, center(Circle(A, C, E))), Line(H, center(Circle(C, F, G))))
By line_intersection_definition on G, f, Line(G, midpoint(E, F)) we get G == line_intersection(f, Line(G, midpoint(E, F)))
By line_intersection_definition on A, Line(A, center(Circle(A, C, E))), g we get A == line_intersection(g, Line(A, center(Circle(A, C, E))))
By line_intersection_definition on center(Circle(C, F, G)), Line(H, center(Circle(C, F, G))), Line(F, center(Circle(C, F, G))) we get center(Circle(C, F, G)) == line_intersection(Line(F, center(Circle(C, F, G))), Line(H, center(Circle(C, F, G))))
By line_intersection_definition on G, Line(G, center(Circle(C, F, G))), f we get G == line_intersection(f, Line(G, center(Circle(C, F, G))))
By line_intersection_definition on A, Line(A, midpoint(E, F)), Line(A, center(Circle(A, C, E))) we get A == line_intersection(Line(A, midpoint(E, F)), Line(A, center(Circle(A, C, E))))
By line_intersection_definition on A, Line(A, midpoint(E, F)), Line(A, E) we get A == line_intersection(Line(A, E), Line(A, midpoint(E, F)))
By line_intersection_definition on G, Line(G, midpoint(C, D)), radical_axis(d, Circle(A, B, D)) we get G == line_intersection(Line(G, midpoint(C, D)), radical_axis(d, Circle(A, B, D)))
By line_intersection_definition on G, Line(D, G), Line(G, center(Circle(C, F, G))) we get G == line_intersection(Line(D, G), Line(G, center(Circle(C, F, G))))
By line_intersection_definition on G, f, radical_axis(d, Circle(A, B, D)) we get G == line_intersection(f, radical_axis(d, Circle(A, B, D)))
By line_intersection_definition on G, Line(G, center(Circle(A, B, D))), radical_axis(d, Circle(A, B, D)) we get G == line_intersection(radical_axis(d, Circle(A, B, D)), Line(G, center(Circle(A, B, D))))
By line_intersection_definition on B, Line(B, center(Circle(A, B, D))), Line(A, B) we get B == line_intersection(Line(A, B), Line(B, center(Circle(A, B, D))))
By line_intersection_definition on G, Line(F, G), Line(G, midpoint(E, F)) we get G == line_intersection(Line(F, G), Line(G, midpoint(E, F)))
By line_intersection_definition on G, radical_axis(Circle(A, B, D), Circle(C, F, G)), Line(D, G) we get G == line_intersection(Line(D, G), radical_axis(Circle(A, B, D), Circle(C, F, G)))
By line_intersection_definition on G, radical_axis(d, Circle(A, B, D)), radical_axis(Circle(A, B, D), Circle(C, F, G)) we get G == line_intersection(radical_axis(d, Circle(A, B, D)), radical_axis(Circle(A, B, D), Circle(C, F, G)))
By line_intersection_definition on D, Line(D, F), Line(D, center(Circle(A, B, D))) we get D == line_intersection(Line(D, F), Line(D, center(Circle(A, B, D))))
By line_intersection_definition on center(Circle(A, B, D)), Line(D, center(Circle(A, B, D))), Line(B, center(Circle(A, B, D))) we get center(Circle(A, B, D)) == line_intersection(Line(B, center(Circle(A, B, D))), Line(D, center(Circle(A, B, D))))
By line_intersection_definition on H, Line(H, center(Circle(A, C, E))), Line(F, H) we get H == line_intersection(Line(F, H), Line(H, center(Circle(A, C, E))))
By line_intersection_definition on F, Line(F, center(Circle(C, F, G))), Line(D, F) we get F == line_intersection(Line(D, F), Line(F, center(Circle(C, F, G))))
By line_intersection_definition on G, Line(G, H), radical_axis(Circle(A, B, D), Circle(C, F, G)) we get G == line_intersection(Line(G, H), radical_axis(Circle(A, B, D), Circle(C, F, G)))
By line_intersection_definition on A, Line(A, center(Circle(A, C, E))), Line(A, center(Circle(A, B, D))) we get A == line_intersection(Line(A, center(Circle(A, B, D))), Line(A, center(Circle(A, C, E))))
By line_intersection_definition on C, altitude(C, D, G), Line(C, center(Circle(A, C, E))) we get C == line_intersection(altitude(C, D, G), Line(C, center(Circle(A, C, E))))
By line_intersection_definition on midpoint(C, D), Line(C, D), Line(G, midpoint(C, D)) we get midpoint(C, D) == line_intersection(Line(C, D), Line(G, midpoint(C, D)))
By line_intersection_definition on G, Line(G, midpoint(E, F)), Line(A, G) we get G == line_intersection(Line(A, G), Line(G, midpoint(E, F)))
By line_intersection_definition on A, radical_axis(Circle(A, B, D), Circle(A, C, E)), h we get A == line_intersection(h, radical_axis(Circle(A, B, D), Circle(A, C, E)))
By line_intersection_definition on G, Line(G, center(Circle(A, B, D))), Line(G, center(d)) we get G == line_intersection(Line(G, center(d)), Line(G, center(Circle(A, B, D))))
By median_definition on A, D, C, Line(A, midpoint(C, D)) we get median(A, C, D) == Line(A, midpoint(C, D))
By line_intersection_definition on C, Line(C, D), Line(C, center(Circle(C, F, G))) we get C == line_intersection(Line(C, D), Line(C, center(Circle(C, F, G))))
By line_intersection_definition on G, Line(G, J), radical_axis(d, Circle(A, B, D)) we get G == line_intersection(Line(G, J), radical_axis(d, Circle(A, B, D)))
By line_intersection_definition on center(Circle(A, B, D)), Line(A, center(Circle(A, B, D))), Line(D, center(Circle(A, B, D))) we get center(Circle(A, B, D)) == line_intersection(Line(A, center(Circle(A, B, D))), Line(D, center(Circle(A, B, D))))
By line_intersection_definition on G, Line(G, center(d)), radical_axis(d, Circle(A, B, D)) we get G == line_intersection(Line(G, center(d)), radical_axis(d, Circle(A, B, D)))
By line_intersection_definition on center(Circle(A, C, E)), Line(C, center(Circle(A, C, E))), Line(H, center(Circle(A, C, E))) we get center(Circle(A, C, E)) == line_intersection(Line(C, center(Circle(A, C, E))), Line(H, center(Circle(A, C, E))))
By line_intersection_definition on G, Line(G, H), Line(G, midpoint(C, D)) we get G == line_intersection(Line(G, H), Line(G, midpoint(C, D)))
By line_intersection_definition on A, Line(A, E), Line(A, center(Circle(A, B, D))) we get A == line_intersection(Line(A, E), Line(A, center(Circle(A, B, D))))
By line_intersection_definition on D, Line(D, E), Line(D, center(Circle(A, B, D))) we get D == line_intersection(Line(D, E), Line(D, center(Circle(A, B, D))))
By line_intersection_definition on A, radical_axis(Circle(A, B, D), Circle(A, C, E)), Line(A, G) we get A == line_intersection(Line(A, G), radical_axis(Circle(A, B, D), Circle(A, C, E)))
By line_intersection_definition on A, Line(A, center(Circle(A, C, E))), h we get A == line_intersection(h, Line(A, center(Circle(A, C, E))))
By line_intersection_definition on center(Circle(C, F, G)), Line(H, center(Circle(C, F, G))), Line(C, center(Circle(C, F, G))) we get center(Circle(C, F, G)) == line_intersection(Line(C, center(Circle(C, F, G))), Line(H, center(Circle(C, F, G))))
By line_intersection_definition on D, Line(D, center(Circle(A, B, D))), i we get D == line_intersection(i, Line(D, center(Circle(A, B, D))))
By line_intersection_definition on H, Line(H, center(Circle(C, F, G))), Line(E, H) we get H == line_intersection(Line(E, H), Line(H, center(Circle(C, F, G))))
By line_intersection_definition on G, Line(G, center(Circle(A, B, D))), Line(F, G) we get G == line_intersection(Line(F, G), Line(G, center(Circle(A, B, D))))
By line_intersection_definition on G, Line(D, G), Line(G, midpoint(C, D)) we get G == line_intersection(Line(D, G), Line(G, midpoint(C, D)))
By line_intersection_definition on E, Line(E, center(Circle(A, C, E))), Line(E, H) we get E == line_intersection(Line(E, H), Line(E, center(Circle(A, C, E))))
By line_intersection_definition on G, Line(G, midpoint(E, F)), radical_axis(Circle(A, B, D), Circle(C, F, G)) we get G == line_intersection(Line(G, midpoint(E, F)), radical_axis(Circle(A, B, D), Circle(C, F, G)))
By line_intersection_definition on A, Line(A, G), Line(A, center(Circle(A, C, E))) we get A == line_intersection(Line(A, G), Line(A, center(Circle(A, C, E))))
By line_intersection_definition on center(Circle(A, B, D)), Line(A, center(Circle(A, B, D))), Line(B, center(Circle(A, B, D))) we get center(Circle(A, B, D)) == line_intersection(Line(A, center(Circle(A, B, D))), Line(B, center(Circle(A, B, D))))
By line_intersection_definition on D, Line(D, E), radical_axis(Circle(A, B, D), Circle(C, D, E)) we get D == line_intersection(Line(D, E), radical_axis(Circle(A, B, D), Circle(C, D, E)))
By line_intersection_definition on A, Line(A, center(Circle(A, C, E))), Line(A, midpoint(C, D)) we get A == line_intersection(Line(A, midpoint(C, D)), Line(A, center(Circle(A, C, E))))
By line_intersection_definition on H, Line(G, H), Line(H, center(Circle(C, F, G))) we get H == line_intersection(Line(G, H), Line(H, center(Circle(C, F, G))))
By line_intersection_definition on F, Line(F, center(Circle(C, F, G))), Line(F, I) we get F == line_intersection(Line(F, I), Line(F, center(Circle(C, F, G))))
By line_intersection_definition on G, Line(G, J), Line(G, center(Circle(A, B, D))) we get G == line_intersection(Line(G, J), Line(G, center(Circle(A, B, D))))
By line_intersection_definition on G, Line(G, midpoint(C, D)), Line(G, center(d)) we get G == line_intersection(Line(G, center(d)), Line(G, midpoint(C, D)))
By line_intersection_definition on C, Line(C, center(Circle(C, F, G))), f we get C == line_intersection(f, Line(C, center(Circle(C, F, G))))
By line_intersection_definition on D, Line(D, center(Circle(A, B, D))), h we get D == line_intersection(h, Line(D, center(Circle(A, B, D))))
By line_intersection_definition on G, radical_axis(Circle(A, B, D), Circle(C, F, G)), Line(G, center(Circle(A, B, D))) we get G == line_intersection(radical_axis(Circle(A, B, D), Circle(C, F, G)), Line(G, center(Circle(A, B, D))))
By median_definition on G, D, C, Line(G, midpoint(C, D)) we get median(G, C, D) == Line(G, midpoint(C, D))
By line_intersection_definition on G, Line(G, H), Line(G, center(Circle(A, B, D))) we get G == line_intersection(Line(G, H), Line(G, center(Circle(A, B, D))))
By line_intersection_definition on E, Line(E, F), Line(E, center(Circle(A, C, E))) we get E == line_intersection(Line(E, F), Line(E, center(Circle(A, C, E))))
By line_intersection_definition on G, Line(G, midpoint(C, D)), Line(F, G) we get G == line_intersection(Line(F, G), Line(G, midpoint(C, D)))
By line_intersection_definition on center(Circle(A, C, E)), Line(C, center(Circle(A, C, E))), Line(E, center(Circle(A, C, E))) we get center(Circle(A, C, E)) == line_intersection(Line(C, center(Circle(A, C, E))), Line(E, center(Circle(A, C, E))))
By line_intersection_definition on G, f, Line(G, center(Circle(A, B, D))) we get G == line_intersection(f, Line(G, center(Circle(A, B, D))))
By line_intersection_definition on A, Line(A, center(Circle(A, B, D))), Line(A, G) we get A == line_intersection(Line(A, G), Line(A, center(Circle(A, B, D))))
By line_intersection_definition on E, Line(E, center(Circle(A, C, E))), Line(A, E) we get E == line_intersection(Line(A, E), Line(E, center(Circle(A, C, E))))
By line_intersection_definition on F, Line(F, center(Circle(C, F, G))), Line(F, G) we get F == line_intersection(Line(F, G), Line(F, center(Circle(C, F, G))))
By line_intersection_definition on A, Line(A, center(Circle(A, B, D))), h we get A == line_intersection(h, Line(A, center(Circle(A, B, D))))
By line_intersection_definition on G, Line(G, midpoint(C, D)), Line(A, G) we get G == line_intersection(Line(A, G), Line(G, midpoint(C, D)))
By line_intersection_definition on G, Line(F, G), radical_axis(d, Circle(A, B, D)) we get G == line_intersection(Line(F, G), radical_axis(d, Circle(A, B, D)))
By line_intersection_definition on D, h, radical_axis(Circle(A, B, D), Circle(C, D, E)) we get D == line_intersection(h, radical_axis(Circle(A, B, D), Circle(C, D, E)))
By line_intersection_definition on G, Line(A, G), Line(G, center(Circle(C, F, G))) we get G == line_intersection(Line(A, G), Line(G, center(Circle(C, F, G))))
By line_intersection_definition on A, Line(A, midpoint(C, D)), h we get A == line_intersection(h, Line(A, midpoint(C, D)))
By perpendicular_line_definition on line_intersection(h, altitude(C, A, D)), h, altitude(C, A, D) we get h == perpendicular_line(line_intersection(h, altitude(C, A, D)), altitude(C, A, D))
By line_intersection_definition on center(Circle(A, C, E)), Line(C, center(Circle(A, C, E))), Line(A, center(Circle(A, C, E))) we get center(Circle(A, C, E)) == line_intersection(Line(A, center(Circle(A, C, E))), Line(C, center(Circle(A, C, E))))
By line_intersection_definition on E, Line(E, center(Circle(A, C, E))), f we get E == line_intersection(f, Line(E, center(Circle(A, C, E))))
By line_intersection_definition on A, radical_axis(Circle(A, B, D), Circle(A, C, E)), Line(A, center(Circle(A, B, D))) we get A == line_intersection(radical_axis(Circle(A, B, D), Circle(A, C, E)), Line(A, center(Circle(A, B, D))))
By line_intersection_definition on F, Line(F, center(Circle(C, F, G))), Line(F, H) we get F == line_intersection(Line(F, H), Line(F, center(Circle(C, F, G))))
By line_intersection_definition on A, Line(A, midpoint(E, F)), Line(A, G) we get A == line_intersection(Line(A, G), Line(A, midpoint(E, F)))
By perpendicular_line_definition on line_intersection(h, altitude(C, A, D)), altitude(C, A, D), h we get altitude(C, A, D) == perpendicular_line(line_intersection(h, altitude(C, A, D)), h)
By line_intersection_definition on center(Circle(A, B, D)), Line(A, center(Circle(A, B, D))), Line(G, center(Circle(A, B, D))) we get center(Circle(A, B, D)) == line_intersection(Line(A, center(Circle(A, B, D))), Line(G, center(Circle(A, B, D))))
By line_intersection_definition on G, Line(D, G), radical_axis(d, Circle(A, B, D)) we get G == line_intersection(Line(D, G), radical_axis(d, Circle(A, B, D)))
By line_intersection_definition on midpoint(C, D), Line(A, midpoint(C, D)), median(F, C, D) we get midpoint(C, D) == line_intersection(median(F, C, D), Line(A, midpoint(C, D)))
By line_intersection_definition on A, Line(A, midpoint(E, F)), Line(A, B) we get A == line_intersection(Line(A, B), Line(A, midpoint(E, F)))
By line_intersection_definition on D, radical_axis(Circle(A, B, D), Circle(C, D, E)), Line(D, G) we get D == line_intersection(Line(D, G), radical_axis(Circle(A, B, D), Circle(C, D, E)))
By line_intersection_definition on E, Line(E, center(Circle(A, C, E))), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, center(Circle(A, C, E))))
By median_definition on G, E, F, Line(G, midpoint(E, F)) we get median(G, E, F) == Line(G, midpoint(E, F))
By line_intersection_definition on A, Line(A, H), Line(A, midpoint(C, D)) we get A == line_intersection(Line(A, H), Line(A, midpoint(C, D)))
By line_intersection_definition on center(Circle(A, C, E)), Line(E, center(Circle(A, C, E))), Line(A, center(Circle(A, C, E))) we get center(Circle(A, C, E)) == line_intersection(Line(A, center(Circle(A, C, E))), Line(E, center(Circle(A, C, E))))
By line_intersection_definition on G, Line(G, center(Circle(A, B, D))), Line(A, G) we get G == line_intersection(Line(A, G), Line(G, center(Circle(A, B, D))))
By line_intersection_definition on D, Line(D, center(Circle(A, B, D))), radical_axis(Circle(A, B, D), Circle(C, D, E)) we get D == line_intersection(radical_axis(Circle(A, B, D), Circle(C, D, E)), Line(D, center(Circle(A, B, D))))
By projection_definition on orthocenter(A, C, D), F, g we get F == projection(orthocenter(A, C, D), g)
By projection_definition on orthocenter(C, D, G), E, f we get E == projection(orthocenter(C, D, G), f)
By projection_definition on orthocenter(A, C, D), midpoint(A, G), Line(C, D) we get midpoint(A, G) == projection(orthocenter(A, C, D), Line(C, D))
By projection_definition on orthocenter(C, D, G), midpoint(A, G), Line(C, D) we get midpoint(A, G) == projection(orthocenter(C, D, G), Line(C, D))
By between_imply_not_between on H, D, C we get collinear_and_not_between(C, H, D)
By between_imply_not_between on C, D, H we get collinear_and_not_between(D, C, H)
By perpendicular_direction_conditions_v0_r on G, orthocenter(C, D, G), midpoint(E, F), H we get 180 == 2 * direction(G, orthocenter(C, D, G)) - 2 * direction(midpoint(E, F), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), H, orthocenter(A, C, D), orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(A, G), H) - 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(A, G), A, orthocenter(A, C, D) we get 180 == 2 * direction(D, midpoint(A, G)) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on A, F, orthocenter(A, C, D), D we get 180 == 2 * direction(A, F) - 2 * direction(orthocenter(A, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), A, D, midpoint(E, F) we get 180 == 2 * direction(orthocenter(C, D, G), A) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), D, C, A we get 180 == 2 * direction(orthocenter(A, C, D), D) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), D, orthocenter(C, D, G), G we get 180 == 2 * direction(midpoint(A, G), D) - 2 * direction(orthocenter(C, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), A, orthocenter(A, C, D) we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(A, C, D), midpoint(E, F), C we get 180 == 2 * direction(G, orthocenter(A, C, D)) - 2 * direction(midpoint(E, F), C) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(C, D, G), C, midpoint(E, F) we get 180 == 2 * direction(A, orthocenter(C, D, G)) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), orthocenter(C, D, G), H, D we get 180 == 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), A, orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(A, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(C, D, G), D, midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), orthocenter(C, D, G)) - 2 * direction(D, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on I, J, C, orthocenter(A, C, D) we get 180 == 2 * direction(I, J) - 2 * direction(C, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on I, J, orthocenter(A, C, D), C we get 180 == 2 * direction(I, J) - 2 * direction(orthocenter(A, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on D, H, A, orthocenter(A, C, D) we get 180 == 2 * direction(D, H) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), F, C, A we get 180 == 2 * direction(orthocenter(A, C, D), F) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on C, B, E, orthocenter(C, D, G) we get 180 == 2 * direction(C, B) - 2 * direction(E, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), midpoint(A, G), orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(midpoint(A, G), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on E, I, orthocenter(C, D, G), E we get 180 == 2 * direction(E, I) - 2 * direction(orthocenter(C, D, G), E) mod 360
By perpendicular_direction_conditions_v0_r on G, I, D, orthocenter(C, D, G) we get 180 == 2 * direction(G, I) - 2 * direction(D, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, E, orthocenter(C, D, G), E we get 180 == 2 * direction(G, E) - 2 * direction(orthocenter(C, D, G), E) mod 360
By in_imply_collinear on orthocenter(A, C, D), orthocenter(C, D, G), midpoint(A, G) we get collinear(midpoint(A, G), orthocenter(A, C, D), orthocenter(C, D, G))
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), G, C, midpoint(C, D) we get 180 == 2 * direction(orthocenter(A, C, D), G) - 2 * direction(C, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), midpoint(A, G), C, midpoint(E, F) we get 180 == 2 * direction(orthocenter(C, D, G), midpoint(A, G)) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), midpoint(A, G), orthocenter(C, D, G) we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(midpoint(A, G), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, orthocenter(C, D, G), midpoint(A, G) we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(orthocenter(C, D, G), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), midpoint(A, G), H, midpoint(E, F) we get 180 == 2 * direction(orthocenter(C, D, G), midpoint(A, G)) - 2 * direction(H, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), D, B, G we get 180 == 2 * direction(orthocenter(C, D, G), D) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), orthocenter(A, C, D), G we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(orthocenter(A, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), orthocenter(A, C, D), midpoint(A, G) we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(orthocenter(A, C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(A, C, D), midpoint(E, F), H we get 180 == 2 * direction(midpoint(A, G), orthocenter(A, C, D)) - 2 * direction(midpoint(E, F), H) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(C, D, G), E, C we get 180 == 2 * direction(D, orthocenter(C, D, G)) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), G, midpoint(A, G), D we get 180 == 2 * direction(orthocenter(A, C, D), G) - 2 * direction(midpoint(A, G), D) mod 360
By perpendicular_direction_conditions_v0_r on D, C, midpoint(A, G), orthocenter(A, C, D) we get 180 == 2 * direction(D, C) - 2 * direction(midpoint(A, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), H, orthocenter(A, C, D), orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(E, F), H) - 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), orthocenter(C, D, G), midpoint(A, G) we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(orthocenter(C, D, G), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, midpoint(A, G), orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(midpoint(A, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(A, C, D), A, F we get 180 == 2 * direction(D, orthocenter(A, C, D)) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on E, orthocenter(C, D, G), C, I we get 180 == 2 * direction(E, orthocenter(C, D, G)) - 2 * direction(C, I) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), D, G, B we get 180 == 2 * direction(orthocenter(C, D, G), D) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), midpoint(A, G), midpoint(E, F) we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(midpoint(A, G), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), orthocenter(C, D, G), A we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(orthocenter(C, D, G), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, midpoint(A, G), orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(midpoint(A, G), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on B, I, D, orthocenter(C, D, G) we get 180 == 2 * direction(B, I) - 2 * direction(D, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(C, D, G), H, midpoint(A, G) we get 180 == 2 * direction(G, orthocenter(C, D, G)) - 2 * direction(H, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), F, F, A we get 180 == 2 * direction(orthocenter(A, C, D), F) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on C, H, orthocenter(C, D, G), A we get 180 == 2 * direction(C, H) - 2 * direction(orthocenter(C, D, G), A) mod 360
By perpendicular_direction_conditions_v0_r on I, C, E, orthocenter(C, D, G) we get 180 == 2 * direction(I, C) - 2 * direction(E, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on C, D, orthocenter(C, D, G), midpoint(A, G) we get 180 == 2 * direction(C, D) - 2 * direction(orthocenter(C, D, G), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), G, C, midpoint(A, G) we get 180 == 2 * direction(orthocenter(C, D, G), G) - 2 * direction(C, midpoint(A, G)) mod 360
By sss_anti_similarity_v0 on A, H, D, G, H, D we get anti_similar_triangles(A, D, H, G, D, H)
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), G, H, C we get 180 == 2 * direction(orthocenter(A, C, D), G) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), orthocenter(A, C, D), orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), E, I, E we get 180 == 2 * direction(orthocenter(C, D, G), E) - 2 * direction(I, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), orthocenter(C, D, G), A we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(orthocenter(C, D, G), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(A, C, D), midpoint(C, D), H we get 180 == 2 * direction(midpoint(A, G), orthocenter(A, C, D)) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), G, orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(G, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on H, C, orthocenter(C, D, G), orthocenter(A, C, D) we get 180 == 2 * direction(H, C) - 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(A, G), orthocenter(C, D, G), midpoint(A, G) we get 180 == 2 * direction(midpoint(E, F), midpoint(A, G)) - 2 * direction(orthocenter(C, D, G), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on E, B, orthocenter(C, D, G), E we get 180 == 2 * direction(E, B) - 2 * direction(orthocenter(C, D, G), E) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), A, orthocenter(A, C, D) we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(C, D), orthocenter(A, C, D), orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(A, G), midpoint(C, D)) - 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(C, D, G), G, C we get 180 == 2 * direction(D, orthocenter(C, D, G)) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), E, C, I we get 180 == 2 * direction(orthocenter(C, D, G), E) - 2 * direction(C, I) mod 360
By perpendicular_direction_conditions_v0_r on C, H, midpoint(A, G), orthocenter(A, C, D) we get 180 == 2 * direction(C, H) - 2 * direction(midpoint(A, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, D, orthocenter(A, C, D), midpoint(A, G) we get 180 == 2 * direction(C, D) - 2 * direction(orthocenter(A, C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, C, orthocenter(C, D, G), midpoint(A, G) we get 180 == 2 * direction(D, C) - 2 * direction(orthocenter(C, D, G), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(E, F), midpoint(A, G), orthocenter(A, C, D) we get 180 == 2 * direction(H, midpoint(E, F)) - 2 * direction(midpoint(A, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on F, orthocenter(A, C, D), F, A we get 180 == 2 * direction(F, orthocenter(A, C, D)) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on H, D, midpoint(A, G), orthocenter(C, D, G) we get 180 == 2 * direction(H, D) - 2 * direction(midpoint(A, G), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), C, orthocenter(A, C, D), midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), C) - 2 * direction(orthocenter(A, C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), D, orthocenter(A, C, D), G we get 180 == 2 * direction(midpoint(A, G), D) - 2 * direction(orthocenter(A, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(A, G), orthocenter(C, D, G), midpoint(A, G) we get 180 == 2 * direction(D, midpoint(A, G)) - 2 * direction(orthocenter(C, D, G), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on H, D, A, orthocenter(C, D, G) we get 180 == 2 * direction(H, D) - 2 * direction(A, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), E, C, E we get 180 == 2 * direction(orthocenter(C, D, G), E) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), C, D, J we get 180 == 2 * direction(orthocenter(A, C, D), C) - 2 * direction(D, J) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), H, midpoint(E, F) we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(H, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(C, D, G), H, midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), orthocenter(C, D, G)) - 2 * direction(H, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), F, F, C we get 180 == 2 * direction(orthocenter(A, C, D), F) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(A, C, D), D, H we get 180 == 2 * direction(G, orthocenter(A, C, D)) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(C, D, G), H, midpoint(C, D) we get 180 == 2 * direction(A, orthocenter(C, D, G)) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), orthocenter(A, C, D), orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), G, H, midpoint(E, F) we get 180 == 2 * direction(orthocenter(C, D, G), G) - 2 * direction(H, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), D, B, C we get 180 == 2 * direction(orthocenter(C, D, G), D) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), orthocenter(C, D, G), D, midpoint(E, F) we get 180 == 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), orthocenter(A, C, D), C, midpoint(A, G) we get 180 == 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) - 2 * direction(C, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), A, orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(A, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(C, D, G), midpoint(E, F), C we get 180 == 2 * direction(midpoint(A, G), orthocenter(C, D, G)) - 2 * direction(midpoint(E, F), C) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(C, D, G), I, B we get 180 == 2 * direction(D, orthocenter(C, D, G)) - 2 * direction(I, B) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, D), orthocenter(C, D, G), A we get 180 == 2 * direction(C, midpoint(C, D)) - 2 * direction(orthocenter(C, D, G), A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, midpoint(C, D), H we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, A, orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), E, B, G we get 180 == 2 * direction(orthocenter(C, D, G), E) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on D, C, orthocenter(C, D, G), G we get 180 == 2 * direction(D, C) - 2 * direction(orthocenter(C, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(A, C, D), D, midpoint(E, F) we get 180 == 2 * direction(midpoint(A, G), orthocenter(A, C, D)) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), G, orthocenter(A, C, D) we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(G, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, E, D, orthocenter(C, D, G) we get 180 == 2 * direction(G, E) - 2 * direction(D, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), D, A, C we get 180 == 2 * direction(orthocenter(A, C, D), D) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(A, G), A, orthocenter(C, D, G) we get 180 == 2 * direction(H, midpoint(A, G)) - 2 * direction(A, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on E, orthocenter(C, D, G), E, G we get 180 == 2 * direction(E, orthocenter(C, D, G)) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), C, orthocenter(C, D, G), midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), C) - 2 * direction(orthocenter(C, D, G), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(C, D), orthocenter(C, D, G), G we get 180 == 2 * direction(D, midpoint(C, D)) - 2 * direction(orthocenter(C, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), orthocenter(C, D, G), midpoint(A, G), midpoint(E, F) we get 180 == 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) - 2 * direction(midpoint(A, G), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), G, C, midpoint(A, G) we get 180 == 2 * direction(orthocenter(A, C, D), G) - 2 * direction(C, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on H, C, G, orthocenter(A, C, D) we get 180 == 2 * direction(H, C) - 2 * direction(G, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), C, I, J we get 180 == 2 * direction(orthocenter(A, C, D), C) - 2 * direction(I, J) mod 360
By perpendicular_direction_conditions_v0_r on C, D, midpoint(A, G), orthocenter(A, C, D) we get 180 == 2 * direction(C, D) - 2 * direction(midpoint(A, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, B, orthocenter(C, D, G), E we get 180 == 2 * direction(C, B) - 2 * direction(orthocenter(C, D, G), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), orthocenter(C, D, G), midpoint(A, G) we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(orthocenter(C, D, G), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(C, D, G), midpoint(E, F), D we get 180 == 2 * direction(midpoint(A, G), orthocenter(C, D, G)) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on D, H, midpoint(A, G), orthocenter(A, C, D) we get 180 == 2 * direction(D, H) - 2 * direction(midpoint(A, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on A, F, orthocenter(A, C, D), F we get 180 == 2 * direction(A, F) - 2 * direction(orthocenter(A, C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(C, D, G), C, H we get 180 == 2 * direction(midpoint(A, G), orthocenter(C, D, G)) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on A, I, orthocenter(A, C, D), C we get 180 == 2 * direction(A, I) - 2 * direction(orthocenter(A, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), orthocenter(A, C, D), orthocenter(C, D, G) we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), A, H, midpoint(E, F) we get 180 == 2 * direction(orthocenter(C, D, G), A) - 2 * direction(H, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(A, G), orthocenter(A, C, D), orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(E, F), midpoint(A, G)) - 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), H, orthocenter(C, D, G), midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), H) - 2 * direction(orthocenter(C, D, G), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(A, C, D), midpoint(C, D), midpoint(A, G) we get 180 == 2 * direction(G, orthocenter(A, C, D)) - 2 * direction(midpoint(C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), orthocenter(C, D, G), midpoint(C, D), D we get 180 == 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), C, G, orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(A, G), C) - 2 * direction(G, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on H, C, orthocenter(A, C, D), midpoint(A, G) we get 180 == 2 * direction(H, C) - 2 * direction(orthocenter(A, C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), orthocenter(C, D, G), midpoint(C, D), C we get 180 == 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on E, C, D, orthocenter(C, D, G) we get 180 == 2 * direction(E, C) - 2 * direction(D, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, G), orthocenter(A, C, D), midpoint(A, G) we get 180 == 2 * direction(C, midpoint(A, G)) - 2 * direction(orthocenter(A, C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, orthocenter(A, C, D), A we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), G, C, D we get 180 == 2 * direction(orthocenter(C, D, G), G) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(A, G), orthocenter(A, C, D), A we get 180 == 2 * direction(H, midpoint(A, G)) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), midpoint(A, G), D, midpoint(E, F) we get 180 == 2 * direction(orthocenter(C, D, G), midpoint(A, G)) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), D, orthocenter(C, D, G), orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(A, G), D) - 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), midpoint(A, G), C, midpoint(E, F) we get 180 == 2 * direction(orthocenter(A, C, D), midpoint(A, G)) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(E, F), orthocenter(C, D, G), orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(A, G), midpoint(E, F)) - 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(C, D, G), midpoint(C, D), midpoint(A, G) we get 180 == 2 * direction(A, orthocenter(C, D, G)) - 2 * direction(midpoint(C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), G, midpoint(C, D), C we get 180 == 2 * direction(orthocenter(A, C, D), G) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(C, D, G), C, midpoint(C, D) we get 180 == 2 * direction(G, orthocenter(C, D, G)) - 2 * direction(C, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(A, G), orthocenter(A, C, D), orthocenter(C, D, G) we get 180 == 2 * direction(D, midpoint(A, G)) - 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(A, C, D), D, midpoint(A, G) we get 180 == 2 * direction(G, orthocenter(A, C, D)) - 2 * direction(D, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), C, G, orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(A, G), C) - 2 * direction(G, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, H, C we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on D, I, orthocenter(A, C, D), C we get 180 == 2 * direction(D, I) - 2 * direction(orthocenter(A, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(A, G), orthocenter(C, D, G), orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(E, F), midpoint(A, G)) - 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), C, D, I we get 180 == 2 * direction(orthocenter(A, C, D), C) - 2 * direction(D, I) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), midpoint(A, G), midpoint(C, D), midpoint(A, G) we get 180 == 2 * direction(orthocenter(A, C, D), midpoint(A, G)) - 2 * direction(midpoint(C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), H, C we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on C, orthocenter(A, C, D), A, J we get 180 == 2 * direction(C, orthocenter(A, C, D)) - 2 * direction(A, J) mod 360
By perpendicular_direction_conditions_v0_r on H, D, orthocenter(A, C, D), orthocenter(C, D, G) we get 180 == 2 * direction(H, D) - 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(C, D, G), D, midpoint(E, F) we get 180 == 2 * direction(A, orthocenter(C, D, G)) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, G), orthocenter(C, D, G), G we get 180 == 2 * direction(C, midpoint(A, G)) - 2 * direction(orthocenter(C, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(C, D, G), midpoint(A, G), H we get 180 == 2 * direction(A, orthocenter(C, D, G)) - 2 * direction(midpoint(A, G), H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), midpoint(A, G), D, C we get 180 == 2 * direction(orthocenter(C, D, G), midpoint(A, G)) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, G), orthocenter(C, D, G), orthocenter(A, C, D) we get 180 == 2 * direction(C, midpoint(A, G)) - 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, orthocenter(C, D, G), orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, D), A, orthocenter(A, C, D) we get 180 == 2 * direction(C, midpoint(C, D)) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), D, B, E we get 180 == 2 * direction(orthocenter(C, D, G), D) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(A, C, D), midpoint(A, G), midpoint(E, F) we get 180 == 2 * direction(G, orthocenter(A, C, D)) - 2 * direction(midpoint(A, G), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), orthocenter(C, D, G), midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(C, D, G), midpoint(A, G), C we get 180 == 2 * direction(midpoint(A, G), orthocenter(C, D, G)) - 2 * direction(midpoint(A, G), C) mod 360
By perpendicular_direction_conditions_v0_r on A, C, orthocenter(A, C, D), F we get 180 == 2 * direction(A, C) - 2 * direction(orthocenter(A, C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), orthocenter(C, D, G), D, H we get 180 == 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on H, C, orthocenter(A, C, D), G we get 180 == 2 * direction(H, C) - 2 * direction(orthocenter(A, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(C, D, G), D, C we get 180 == 2 * direction(midpoint(A, G), orthocenter(C, D, G)) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), H, A, orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(A, G), H) - 2 * direction(A, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), C, A, D we get 180 == 2 * direction(orthocenter(A, C, D), C) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, midpoint(C, D), C we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(C, D), midpoint(A, G), orthocenter(C, D, G) we get 180 == 2 * direction(D, midpoint(C, D)) - 2 * direction(midpoint(A, G), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), orthocenter(A, C, D), H, midpoint(C, D) we get 180 == 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), midpoint(A, G), midpoint(C, D), C we get 180 == 2 * direction(orthocenter(C, D, G), midpoint(A, G)) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(C, D, G), H, D we get 180 == 2 * direction(G, orthocenter(C, D, G)) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on A, J, C, orthocenter(A, C, D) we get 180 == 2 * direction(A, J) - 2 * direction(C, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), H, D we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on C, orthocenter(A, C, D), D, A we get 180 == 2 * direction(C, orthocenter(A, C, D)) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), A, orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), orthocenter(A, C, D), G we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(orthocenter(A, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(C, D, G), midpoint(A, G), midpoint(C, D) we get 180 == 2 * direction(G, orthocenter(C, D, G)) - 2 * direction(midpoint(A, G), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(C, D, G), C, D we get 180 == 2 * direction(midpoint(A, G), orthocenter(C, D, G)) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, orthocenter(A, C, D), A we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on E, orthocenter(C, D, G), G, I we get 180 == 2 * direction(E, orthocenter(C, D, G)) - 2 * direction(G, I) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, D), midpoint(A, G), orthocenter(C, D, G) we get 180 == 2 * direction(C, midpoint(C, D)) - 2 * direction(midpoint(A, G), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(A, G), orthocenter(C, D, G), A we get 180 == 2 * direction(D, midpoint(A, G)) - 2 * direction(orthocenter(C, D, G), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, orthocenter(C, D, G), G we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(orthocenter(C, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, D), orthocenter(A, C, D), A we get 180 == 2 * direction(C, midpoint(C, D)) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), midpoint(A, G), D, midpoint(A, G) we get 180 == 2 * direction(orthocenter(A, C, D), midpoint(A, G)) - 2 * direction(D, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(A, C, D), midpoint(E, F), C we get 180 == 2 * direction(midpoint(A, G), orthocenter(A, C, D)) - 2 * direction(midpoint(E, F), C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), C, J, D we get 180 == 2 * direction(orthocenter(A, C, D), C) - 2 * direction(J, D) mod 360
By perpendicular_direction_conditions_v0_r on C, D, G, orthocenter(C, D, G) we get 180 == 2 * direction(C, D) - 2 * direction(G, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), C, midpoint(A, G) we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(C, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), G, D, C we get 180 == 2 * direction(orthocenter(C, D, G), G) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, orthocenter(A, C, D), G we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(orthocenter(A, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), midpoint(A, G), C, midpoint(A, G) we get 180 == 2 * direction(orthocenter(C, D, G), midpoint(A, G)) - 2 * direction(C, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), orthocenter(C, D, G), midpoint(E, F), D we get 180 == 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(A, G), orthocenter(C, D, G), midpoint(A, G) we get 180 == 2 * direction(midpoint(C, D), midpoint(A, G)) - 2 * direction(orthocenter(C, D, G), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, G), midpoint(A, G), orthocenter(C, D, G) we get 180 == 2 * direction(C, midpoint(A, G)) - 2 * direction(midpoint(A, G), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(C, D, G), D, midpoint(C, D) we get 180 == 2 * direction(G, orthocenter(C, D, G)) - 2 * direction(D, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), E, B, I we get 180 == 2 * direction(orthocenter(C, D, G), E) - 2 * direction(B, I) mod 360
By perpendicular_direction_conditions_v0_r on C, H, midpoint(A, G), orthocenter(C, D, G) we get 180 == 2 * direction(C, H) - 2 * direction(midpoint(A, G), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on E, orthocenter(C, D, G), B, E we get 180 == 2 * direction(E, orthocenter(C, D, G)) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(A, C, D), C, midpoint(C, D) we get 180 == 2 * direction(midpoint(A, G), orthocenter(A, C, D)) - 2 * direction(C, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), midpoint(A, G), D, H we get 180 == 2 * direction(orthocenter(C, D, G), midpoint(A, G)) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), E, C, B we get 180 == 2 * direction(orthocenter(C, D, G), E) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on H, D, orthocenter(A, C, D), A we get 180 == 2 * direction(H, D) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(C, D), midpoint(A, G), orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(A, G), midpoint(C, D)) - 2 * direction(midpoint(A, G), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), orthocenter(A, C, D), midpoint(E, F), H we get 180 == 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) - 2 * direction(midpoint(E, F), H) mod 360
By perpendicular_direction_conditions_v0_r on C, H, orthocenter(A, C, D), G we get 180 == 2 * direction(C, H) - 2 * direction(orthocenter(A, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on E, B, orthocenter(C, D, G), D we get 180 == 2 * direction(E, B) - 2 * direction(orthocenter(C, D, G), D) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), D, C we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(C, D, G), H, midpoint(E, F) we get 180 == 2 * direction(G, orthocenter(C, D, G)) - 2 * direction(H, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), midpoint(A, G), H, C we get 180 == 2 * direction(orthocenter(A, C, D), midpoint(A, G)) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on I, E, E, orthocenter(C, D, G) we get 180 == 2 * direction(I, E) - 2 * direction(E, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(A, C, D), D, midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), orthocenter(A, C, D)) - 2 * direction(D, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(C, D), orthocenter(A, C, D), midpoint(A, G) we get 180 == 2 * direction(D, midpoint(C, D)) - 2 * direction(orthocenter(A, C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), orthocenter(A, C, D), midpoint(E, F), D we get 180 == 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on A, J, orthocenter(A, C, D), C we get 180 == 2 * direction(A, J) - 2 * direction(orthocenter(A, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), G, midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(orthocenter(A, C, D), G) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), orthocenter(A, C, D), midpoint(A, G), C we get 180 == 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) - 2 * direction(midpoint(A, G), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), orthocenter(C, D, G), G we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(orthocenter(C, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(A, C, D), D, C we get 180 == 2 * direction(G, orthocenter(A, C, D)) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, midpoint(A, G), orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(midpoint(A, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, midpoint(A, G), midpoint(C, D) we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(midpoint(A, G), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(C, D, G), B, I we get 180 == 2 * direction(D, orthocenter(C, D, G)) - 2 * direction(B, I) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), orthocenter(C, D, G), H, midpoint(C, D) we get 180 == 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, G, orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(G, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), midpoint(A, G), midpoint(C, D), H we get 180 == 2 * direction(orthocenter(C, D, G), midpoint(A, G)) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(A, C, D), C, F we get 180 == 2 * direction(D, orthocenter(A, C, D)) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on C, orthocenter(A, C, D), J, D we get 180 == 2 * direction(C, orthocenter(A, C, D)) - 2 * direction(J, D) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(A, G), G, orthocenter(C, D, G) we get 180 == 2 * direction(D, midpoint(A, G)) - 2 * direction(G, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on H, D, G, orthocenter(C, D, G) we get 180 == 2 * direction(H, D) - 2 * direction(G, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, H, midpoint(A, G) we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(H, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on E, orthocenter(C, D, G), C, G we get 180 == 2 * direction(E, orthocenter(C, D, G)) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), orthocenter(A, C, D), D, midpoint(A, G) we get 180 == 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) - 2 * direction(D, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(C, D), orthocenter(C, D, G), midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), midpoint(C, D)) - 2 * direction(orthocenter(C, D, G), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(A, G), orthocenter(C, D, G), A we get 180 == 2 * direction(H, midpoint(A, G)) - 2 * direction(orthocenter(C, D, G), A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), E, I, B we get 180 == 2 * direction(orthocenter(C, D, G), E) - 2 * direction(I, B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(C, D, G), midpoint(C, D), midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), orthocenter(C, D, G)) - 2 * direction(midpoint(C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), C, G, D we get 180 == 2 * direction(orthocenter(C, D, G), C) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, midpoint(A, G), orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(midpoint(A, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(C, D, G), H, midpoint(C, D) we get 180 == 2 * direction(G, orthocenter(C, D, G)) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), C, orthocenter(C, D, G), A we get 180 == 2 * direction(midpoint(A, G), C) - 2 * direction(orthocenter(C, D, G), A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), midpoint(A, G), midpoint(E, F), C we get 180 == 2 * direction(orthocenter(A, C, D), midpoint(A, G)) - 2 * direction(midpoint(E, F), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(A, C, D), midpoint(C, D), C we get 180 == 2 * direction(midpoint(A, G), orthocenter(A, C, D)) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, orthocenter(A, C, D), A we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), G, midpoint(E, F), H we get 180 == 2 * direction(orthocenter(A, C, D), G) - 2 * direction(midpoint(E, F), H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), G, D, C we get 180 == 2 * direction(orthocenter(A, C, D), G) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on C, G, orthocenter(C, D, G), D we get 180 == 2 * direction(C, G) - 2 * direction(orthocenter(C, D, G), D) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, G), G, orthocenter(C, D, G) we get 180 == 2 * direction(C, midpoint(A, G)) - 2 * direction(G, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on B, C, D, orthocenter(C, D, G) we get 180 == 2 * direction(B, C) - 2 * direction(D, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(A, C, D), midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(G, orthocenter(A, C, D)) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), A, C, H we get 180 == 2 * direction(orthocenter(C, D, G), A) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, orthocenter(C, D, G), G we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(orthocenter(C, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on C, D, orthocenter(A, C, D), G we get 180 == 2 * direction(C, D) - 2 * direction(orthocenter(A, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, orthocenter(A, C, D), midpoint(A, G) we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(orthocenter(A, C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), D, G, C we get 180 == 2 * direction(orthocenter(C, D, G), D) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(E, F), orthocenter(A, C, D), A we get 180 == 2 * direction(H, midpoint(E, F)) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, orthocenter(A, C, D), A we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), D, orthocenter(C, D, G), midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), D) - 2 * direction(orthocenter(C, D, G), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on C, D, orthocenter(C, D, G), A we get 180 == 2 * direction(C, D) - 2 * direction(orthocenter(C, D, G), A) mod 360
By perpendicular_direction_conditions_v0_r on C, F, orthocenter(A, C, D), F we get 180 == 2 * direction(C, F) - 2 * direction(orthocenter(A, C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on E, G, orthocenter(C, D, G), D we get 180 == 2 * direction(E, G) - 2 * direction(orthocenter(C, D, G), D) mod 360
By perpendicular_direction_conditions_v0_r on G, D, orthocenter(C, D, G), C we get 180 == 2 * direction(G, D) - 2 * direction(orthocenter(C, D, G), C) mod 360
By perpendicular_direction_conditions_v0_r on I, E, orthocenter(C, D, G), E we get 180 == 2 * direction(I, E) - 2 * direction(orthocenter(C, D, G), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), H, G, orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(A, G), H) - 2 * direction(G, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), orthocenter(C, D, G), D, C we get 180 == 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) - 2 * direction(D, C) mod 360
By asa_anti_congruence on H, D, A, H, D, G we get anti_congruent_triangles(A, D, H, G, D, H)
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, G, orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(G, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), G, midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(orthocenter(C, D, G), G) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, orthocenter(A, C, D), orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(A, G), midpoint(A, G), orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(C, D), midpoint(A, G)) - 2 * direction(midpoint(A, G), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), A, midpoint(A, G), midpoint(C, D) we get 180 == 2 * direction(orthocenter(C, D, G), A) - 2 * direction(midpoint(A, G), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, midpoint(A, G), orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(midpoint(A, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), D, G, I we get 180 == 2 * direction(orthocenter(C, D, G), D) - 2 * direction(G, I) mod 360
By perpendicular_direction_conditions_v0_r on E, orthocenter(C, D, G), I, B we get 180 == 2 * direction(E, orthocenter(C, D, G)) - 2 * direction(I, B) mod 360
By perpendicular_direction_conditions_v0_r on C, E, D, orthocenter(C, D, G) we get 180 == 2 * direction(C, E) - 2 * direction(D, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on C, orthocenter(A, C, D), I, D we get 180 == 2 * direction(C, orthocenter(A, C, D)) - 2 * direction(I, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(A, G), G, orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(C, D), midpoint(A, G)) - 2 * direction(G, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), C, orthocenter(C, D, G), G we get 180 == 2 * direction(midpoint(A, G), C) - 2 * direction(orthocenter(C, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), midpoint(A, G), midpoint(A, G), H we get 180 == 2 * direction(orthocenter(A, C, D), midpoint(A, G)) - 2 * direction(midpoint(A, G), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(C, D, G), H, D we get 180 == 2 * direction(midpoint(A, G), orthocenter(C, D, G)) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), orthocenter(A, C, D), midpoint(A, G) we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(orthocenter(A, C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(E, F), orthocenter(A, C, D), A we get 180 == 2 * direction(midpoint(A, G), midpoint(E, F)) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), midpoint(A, G), midpoint(C, D), C we get 180 == 2 * direction(orthocenter(A, C, D), midpoint(A, G)) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, C, D we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(A, C, D), D, midpoint(E, F) we get 180 == 2 * direction(G, orthocenter(A, C, D)) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on I, A, C, orthocenter(A, C, D) we get 180 == 2 * direction(I, A) - 2 * direction(C, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, C, orthocenter(A, C, D), G we get 180 == 2 * direction(D, C) - 2 * direction(orthocenter(A, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on G, E, orthocenter(C, D, G), D we get 180 == 2 * direction(G, E) - 2 * direction(orthocenter(C, D, G), D) mod 360
By perpendicular_direction_conditions_v0_r on F, A, orthocenter(A, C, D), D we get 180 == 2 * direction(F, A) - 2 * direction(orthocenter(A, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), E, E, I we get 180 == 2 * direction(orthocenter(C, D, G), E) - 2 * direction(E, I) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(E, F), orthocenter(C, D, G), orthocenter(A, C, D) we get 180 == 2 * direction(H, midpoint(E, F)) - 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, midpoint(A, G), orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(midpoint(A, G), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), D, E, G we get 180 == 2 * direction(orthocenter(C, D, G), D) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(C, D, G), midpoint(A, G), midpoint(E, F) we get 180 == 2 * direction(G, orthocenter(C, D, G)) - 2 * direction(midpoint(A, G), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, C, orthocenter(C, D, G), E we get 180 == 2 * direction(E, C) - 2 * direction(orthocenter(C, D, G), E) mod 360
By perpendicular_direction_conditions_v0_r on F, orthocenter(A, C, D), C, F we get 180 == 2 * direction(F, orthocenter(A, C, D)) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on G, B, orthocenter(C, D, G), D we get 180 == 2 * direction(G, B) - 2 * direction(orthocenter(C, D, G), D) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(A, C, D), F, C we get 180 == 2 * direction(D, orthocenter(A, C, D)) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), midpoint(A, G), C, D we get 180 == 2 * direction(orthocenter(A, C, D), midpoint(A, G)) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on F, C, orthocenter(A, C, D), D we get 180 == 2 * direction(F, C) - 2 * direction(orthocenter(A, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(C, D, G), I, G we get 180 == 2 * direction(D, orthocenter(C, D, G)) - 2 * direction(I, G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), orthocenter(A, C, D), midpoint(E, F), C we get 180 == 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) - 2 * direction(midpoint(E, F), C) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(C, D, G), midpoint(C, D), midpoint(A, G) we get 180 == 2 * direction(G, orthocenter(C, D, G)) - 2 * direction(midpoint(C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), midpoint(E, F), D we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(midpoint(E, F), D) mod 360
By sas_anti_similarity on F, midpoint(E, F), H, E, midpoint(E, F), H we get anti_similar_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), F, A, F we get 180 == 2 * direction(orthocenter(A, C, D), F) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(C, D, G), H, D we get 180 == 2 * direction(A, orthocenter(C, D, G)) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on E, G, orthocenter(C, D, G), E we get 180 == 2 * direction(E, G) - 2 * direction(orthocenter(C, D, G), E) mod 360
By perpendicular_direction_conditions_v0_r on D, H, midpoint(A, G), orthocenter(C, D, G) we get 180 == 2 * direction(D, H) - 2 * direction(midpoint(A, G), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), orthocenter(C, D, G), midpoint(A, G) we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(orthocenter(C, D, G), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), midpoint(A, G), C, H we get 180 == 2 * direction(orthocenter(C, D, G), midpoint(A, G)) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(C, D, G), C, midpoint(A, G) we get 180 == 2 * direction(G, orthocenter(C, D, G)) - 2 * direction(C, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), orthocenter(A, C, D), A we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), orthocenter(C, D, G), orthocenter(A, C, D) we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on I, G, E, orthocenter(C, D, G) we get 180 == 2 * direction(I, G) - 2 * direction(E, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), C, midpoint(E, F) we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, D), orthocenter(A, C, D), orthocenter(C, D, G) we get 180 == 2 * direction(C, midpoint(C, D)) - 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), A, H, D we get 180 == 2 * direction(orthocenter(C, D, G), A) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, orthocenter(C, D, G), midpoint(A, G) we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(orthocenter(C, D, G), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(A, C, D), midpoint(A, G), midpoint(C, D) we get 180 == 2 * direction(midpoint(A, G), orthocenter(A, C, D)) - 2 * direction(midpoint(A, G), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on H, D, orthocenter(C, D, G), G we get 180 == 2 * direction(H, D) - 2 * direction(orthocenter(C, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), A, D, H we get 180 == 2 * direction(orthocenter(C, D, G), A) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), midpoint(A, G), midpoint(A, G), D we get 180 == 2 * direction(orthocenter(A, C, D), midpoint(A, G)) - 2 * direction(midpoint(A, G), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, orthocenter(C, D, G), A we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(orthocenter(C, D, G), A) mod 360
By perpendicular_direction_conditions_v0_r on H, D, orthocenter(C, D, G), A we get 180 == 2 * direction(H, D) - 2 * direction(orthocenter(C, D, G), A) mod 360
By perpendicular_direction_conditions_v0_r on D, J, orthocenter(A, C, D), C we get 180 == 2 * direction(D, J) - 2 * direction(orthocenter(A, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(A, C, D), C, midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), orthocenter(A, C, D)) - 2 * direction(C, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, C, D, orthocenter(C, D, G) we get 180 == 2 * direction(G, C) - 2 * direction(D, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, orthocenter(C, D, G), G we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(orthocenter(C, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(E, F), orthocenter(A, C, D), G we get 180 == 2 * direction(H, midpoint(E, F)) - 2 * direction(orthocenter(A, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(C, D, G), midpoint(E, F), D we get 180 == 2 * direction(A, orthocenter(C, D, G)) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(C, D), orthocenter(A, C, D), G we get 180 == 2 * direction(midpoint(A, G), midpoint(C, D)) - 2 * direction(orthocenter(A, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), orthocenter(A, C, D), H, D we get 180 == 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), orthocenter(C, D, G), D, midpoint(A, G) we get 180 == 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) - 2 * direction(D, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), midpoint(A, G), H, D we get 180 == 2 * direction(orthocenter(A, C, D), midpoint(A, G)) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, D), A, orthocenter(C, D, G) we get 180 == 2 * direction(C, midpoint(C, D)) - 2 * direction(A, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(C, D, G), H, midpoint(E, F) we get 180 == 2 * direction(A, orthocenter(C, D, G)) - 2 * direction(H, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, I, D, orthocenter(C, D, G) we get 180 == 2 * direction(E, I) - 2 * direction(D, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), midpoint(A, G), midpoint(C, D), D we get 180 == 2 * direction(orthocenter(A, C, D), midpoint(A, G)) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(C, D, G), D, midpoint(A, G) we get 180 == 2 * direction(A, orthocenter(C, D, G)) - 2 * direction(D, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(A, C, D), H, D we get 180 == 2 * direction(G, orthocenter(A, C, D)) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), G, C, H we get 180 == 2 * direction(orthocenter(C, D, G), G) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), orthocenter(A, C, D), C, midpoint(E, F) we get 180 == 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), midpoint(A, G), midpoint(A, G), midpoint(E, F) we get 180 == 2 * direction(orthocenter(A, C, D), midpoint(A, G)) - 2 * direction(midpoint(A, G), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, C, G, orthocenter(C, D, G) we get 180 == 2 * direction(D, C) - 2 * direction(G, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(A, G), orthocenter(C, D, G), orthocenter(A, C, D) we get 180 == 2 * direction(H, midpoint(A, G)) - 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(C, D, G), midpoint(A, G), D we get 180 == 2 * direction(midpoint(A, G), orthocenter(C, D, G)) - 2 * direction(midpoint(A, G), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), G, D, midpoint(C, D) we get 180 == 2 * direction(orthocenter(A, C, D), G) - 2 * direction(D, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(A, G), G, orthocenter(C, D, G) we get 180 == 2 * direction(H, midpoint(A, G)) - 2 * direction(G, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(A, G), A, orthocenter(C, D, G) we get 180 == 2 * direction(D, midpoint(A, G)) - 2 * direction(A, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(C, D, G), midpoint(E, F), C we get 180 == 2 * direction(G, orthocenter(C, D, G)) - 2 * direction(midpoint(E, F), C) mod 360
By perpendicular_direction_conditions_v0_r on H, D, midpoint(A, G), orthocenter(A, C, D) we get 180 == 2 * direction(H, D) - 2 * direction(midpoint(A, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(C, D, G), C, midpoint(E, F) we get 180 == 2 * direction(midpoint(A, G), orthocenter(C, D, G)) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), F, C, F we get 180 == 2 * direction(orthocenter(A, C, D), F) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), C, I, A we get 180 == 2 * direction(orthocenter(A, C, D), C) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(A, C, D), midpoint(C, D), H we get 180 == 2 * direction(G, orthocenter(A, C, D)) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(A, C, D), midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(G, orthocenter(A, C, D)) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), orthocenter(A, C, D), A we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), G, midpoint(E, F), midpoint(A, G) we get 180 == 2 * direction(orthocenter(A, C, D), G) - 2 * direction(midpoint(E, F), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), G, C, midpoint(E, F) we get 180 == 2 * direction(orthocenter(C, D, G), G) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), midpoint(A, G), midpoint(A, G), midpoint(E, F) we get 180 == 2 * direction(orthocenter(C, D, G), midpoint(A, G)) - 2 * direction(midpoint(A, G), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(C, D), midpoint(A, G), orthocenter(A, C, D) we get 180 == 2 * direction(D, midpoint(C, D)) - 2 * direction(midpoint(A, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), midpoint(E, F), midpoint(A, G) we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(midpoint(E, F), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), D, A, F we get 180 == 2 * direction(orthocenter(A, C, D), D) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), G, midpoint(C, D), midpoint(A, G) we get 180 == 2 * direction(orthocenter(C, D, G), G) - 2 * direction(midpoint(C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(C, D), orthocenter(C, D, G), midpoint(A, G) we get 180 == 2 * direction(D, midpoint(C, D)) - 2 * direction(orthocenter(C, D, G), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), orthocenter(A, C, D), D, midpoint(C, D) we get 180 == 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) - 2 * direction(D, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), G, midpoint(C, D), H we get 180 == 2 * direction(orthocenter(A, C, D), G) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), orthocenter(C, D, G), D, midpoint(C, D) we get 180 == 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) - 2 * direction(D, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), orthocenter(C, D, G), C, midpoint(C, D) we get 180 == 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) - 2 * direction(C, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(A, C, D), H, C we get 180 == 2 * direction(midpoint(A, G), orthocenter(A, C, D)) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(A, C, D), midpoint(C, D), C we get 180 == 2 * direction(G, orthocenter(A, C, D)) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(E, F), A, orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(A, G), midpoint(E, F)) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), C, D we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(C, D, G), C, H we get 180 == 2 * direction(G, orthocenter(C, D, G)) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(C, D), G, orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(A, G), midpoint(C, D)) - 2 * direction(G, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), H, orthocenter(A, C, D), A we get 180 == 2 * direction(midpoint(E, F), H) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), midpoint(A, G), H, midpoint(A, G) we get 180 == 2 * direction(orthocenter(A, C, D), midpoint(A, G)) - 2 * direction(H, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, midpoint(A, G), midpoint(E, F) we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(midpoint(A, G), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), G, midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(orthocenter(C, D, G), G) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(C, D, G), H, C we get 180 == 2 * direction(G, orthocenter(C, D, G)) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on B, C, E, orthocenter(C, D, G) we get 180 == 2 * direction(B, C) - 2 * direction(E, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(C, D, G), midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(midpoint(A, G), orthocenter(C, D, G)) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(A, G), orthocenter(C, D, G), orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(C, D), midpoint(A, G)) - 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(A, G), orthocenter(A, C, D), midpoint(A, G) we get 180 == 2 * direction(midpoint(E, F), midpoint(A, G)) - 2 * direction(orthocenter(A, C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), H, orthocenter(C, D, G), G we get 180 == 2 * direction(midpoint(E, F), H) - 2 * direction(orthocenter(C, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), orthocenter(C, D, G), midpoint(E, F), C we get 180 == 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) - 2 * direction(midpoint(E, F), C) mod 360
By perpendicular_direction_conditions_v0_r on C, orthocenter(A, C, D), A, D we get 180 == 2 * direction(C, orthocenter(A, C, D)) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on D, C, G, orthocenter(A, C, D) we get 180 == 2 * direction(D, C) - 2 * direction(G, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(A, C, D), H, C we get 180 == 2 * direction(G, orthocenter(A, C, D)) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on G, B, D, orthocenter(C, D, G) we get 180 == 2 * direction(G, B) - 2 * direction(D, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(A, C, D), midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(midpoint(A, G), orthocenter(A, C, D)) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(C, D, G), E, B we get 180 == 2 * direction(D, orthocenter(C, D, G)) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), G, H, midpoint(C, D) we get 180 == 2 * direction(orthocenter(C, D, G), G) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(A, C, D), H, midpoint(C, D) we get 180 == 2 * direction(G, orthocenter(A, C, D)) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(A, G), orthocenter(C, D, G), A we get 180 == 2 * direction(midpoint(C, D), midpoint(A, G)) - 2 * direction(orthocenter(C, D, G), A) mod 360
By perpendicular_direction_conditions_v0_r on C, H, A, orthocenter(C, D, G) we get 180 == 2 * direction(C, H) - 2 * direction(A, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(C, D), orthocenter(A, C, D), orthocenter(C, D, G) we get 180 == 2 * direction(D, midpoint(C, D)) - 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), D, C, I we get 180 == 2 * direction(orthocenter(C, D, G), D) - 2 * direction(C, I) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(A, G), G, orthocenter(A, C, D) we get 180 == 2 * direction(H, midpoint(A, G)) - 2 * direction(G, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(C, D, G), midpoint(C, D), D we get 180 == 2 * direction(G, orthocenter(C, D, G)) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on D, C, orthocenter(A, C, D), orthocenter(C, D, G) we get 180 == 2 * direction(D, C) - 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, C, midpoint(C, D) we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(C, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), midpoint(A, G), H, midpoint(C, D) we get 180 == 2 * direction(orthocenter(A, C, D), midpoint(A, G)) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(A, G), G, orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(C, D), midpoint(A, G)) - 2 * direction(G, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), midpoint(C, D), C we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(C, D, G), C, midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), orthocenter(C, D, G)) - 2 * direction(C, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), E, B, E we get 180 == 2 * direction(orthocenter(C, D, G), E) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), G, midpoint(A, G), C we get 180 == 2 * direction(orthocenter(C, D, G), G) - 2 * direction(midpoint(A, G), C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), G, D, midpoint(E, F) we get 180 == 2 * direction(orthocenter(C, D, G), G) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), orthocenter(A, C, D), midpoint(E, F), midpoint(A, G) we get 180 == 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) - 2 * direction(midpoint(E, F), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, midpoint(E, F), midpoint(A, G) we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(midpoint(E, F), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), D, orthocenter(A, C, D), midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), D) - 2 * direction(orthocenter(A, C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), H, midpoint(A, G), orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(E, F), H) - 2 * direction(midpoint(A, G), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(C, D), G, orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(A, G), midpoint(C, D)) - 2 * direction(G, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on C, D, orthocenter(A, C, D), A we get 180 == 2 * direction(C, D) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on C, orthocenter(A, C, D), J, I we get 180 == 2 * direction(C, orthocenter(A, C, D)) - 2 * direction(J, I) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), orthocenter(C, D, G), H, midpoint(A, G) we get 180 == 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) - 2 * direction(H, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), G, H, D we get 180 == 2 * direction(orthocenter(C, D, G), G) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(C, D, G), midpoint(C, D), H we get 180 == 2 * direction(midpoint(A, G), orthocenter(C, D, G)) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(A, C, D), D, midpoint(C, D) we get 180 == 2 * direction(G, orthocenter(A, C, D)) - 2 * direction(D, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, orthocenter(A, C, D), J, A we get 180 == 2 * direction(C, orthocenter(A, C, D)) - 2 * direction(J, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(C, D), orthocenter(C, D, G), orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(A, G), midpoint(C, D)) - 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), orthocenter(A, C, D), H, midpoint(A, G) we get 180 == 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) - 2 * direction(H, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(E, F), orthocenter(A, C, D), orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(A, G), midpoint(E, F)) - 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), D, orthocenter(A, C, D), orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(A, G), D) - 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, G), A, orthocenter(C, D, G) we get 180 == 2 * direction(C, midpoint(A, G)) - 2 * direction(A, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, orthocenter(A, C, D), midpoint(A, G) we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(orthocenter(A, C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, orthocenter(C, D, G), midpoint(A, G) we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(orthocenter(C, D, G), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(A, G), A, orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(E, F), midpoint(A, G)) - 2 * direction(A, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(A, G), orthocenter(A, C, D), midpoint(A, G) we get 180 == 2 * direction(midpoint(C, D), midpoint(A, G)) - 2 * direction(orthocenter(A, C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, A, orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, orthocenter(C, D, G), I, C we get 180 == 2 * direction(E, orthocenter(C, D, G)) - 2 * direction(I, C) mod 360
By perpendicular_direction_conditions_v0_r on I, G, orthocenter(C, D, G), D we get 180 == 2 * direction(I, G) - 2 * direction(orthocenter(C, D, G), D) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), A, orthocenter(C, D, G) we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(A, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(C, D, G), B, G we get 180 == 2 * direction(D, orthocenter(C, D, G)) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(A, C, D), H, midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), orthocenter(A, C, D)) - 2 * direction(H, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, midpoint(C, D), D we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), midpoint(A, G), orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(midpoint(A, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(C, D, G), midpoint(A, G), H we get 180 == 2 * direction(G, orthocenter(C, D, G)) - 2 * direction(midpoint(A, G), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(E, F), orthocenter(C, D, G), A we get 180 == 2 * direction(midpoint(A, G), midpoint(E, F)) - 2 * direction(orthocenter(C, D, G), A) mod 360
By sss_anti_similarity_v1 on H, D, G, H, D, A we get anti_similar_triangles(A, D, H, G, D, H)
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), E, E, C we get 180 == 2 * direction(orthocenter(C, D, G), E) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), G, C, midpoint(E, F) we get 180 == 2 * direction(orthocenter(A, C, D), G) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), midpoint(A, G), orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(midpoint(A, G), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), midpoint(C, D), D we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on C, I, orthocenter(C, D, G), E we get 180 == 2 * direction(C, I) - 2 * direction(orthocenter(C, D, G), E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), midpoint(A, G), midpoint(E, F), D we get 180 == 2 * direction(orthocenter(C, D, G), midpoint(A, G)) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, orthocenter(C, D, G), A we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(orthocenter(C, D, G), A) mod 360
By perpendicular_direction_conditions_v0_r on B, I, orthocenter(C, D, G), E we get 180 == 2 * direction(B, I) - 2 * direction(orthocenter(C, D, G), E) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(C, D, G), midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(G, orthocenter(C, D, G)) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, H, orthocenter(C, D, G), midpoint(A, G) we get 180 == 2 * direction(C, H) - 2 * direction(orthocenter(C, D, G), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on C, H, orthocenter(A, C, D), A we get 180 == 2 * direction(C, H) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), H, orthocenter(A, C, D), midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), H) - 2 * direction(orthocenter(A, C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(C, D), orthocenter(C, D, G), A we get 180 == 2 * direction(midpoint(A, G), midpoint(C, D)) - 2 * direction(orthocenter(C, D, G), A) mod 360
By perpendicular_direction_conditions_v0_r on C, G, D, orthocenter(C, D, G) we get 180 == 2 * direction(C, G) - 2 * direction(D, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(A, C, D), midpoint(C, D), D we get 180 == 2 * direction(midpoint(A, G), orthocenter(A, C, D)) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, G), orthocenter(A, C, D), G we get 180 == 2 * direction(C, midpoint(A, G)) - 2 * direction(orthocenter(A, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), H, orthocenter(C, D, G), A we get 180 == 2 * direction(midpoint(E, F), H) - 2 * direction(orthocenter(C, D, G), A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), G, midpoint(E, F), D we get 180 == 2 * direction(orthocenter(C, D, G), G) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, orthocenter(A, C, D), midpoint(A, G) we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(orthocenter(A, C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(C, D), orthocenter(C, D, G), orthocenter(A, C, D) we get 180 == 2 * direction(D, midpoint(C, D)) - 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), orthocenter(C, D, G), A we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(orthocenter(C, D, G), A) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(C, D, G), midpoint(A, G), midpoint(C, D) we get 180 == 2 * direction(A, orthocenter(C, D, G)) - 2 * direction(midpoint(A, G), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), C, J, I we get 180 == 2 * direction(orthocenter(A, C, D), C) - 2 * direction(J, I) mod 360
By perpendicular_direction_conditions_v0_r on C, E, orthocenter(C, D, G), E we get 180 == 2 * direction(C, E) - 2 * direction(orthocenter(C, D, G), E) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(E, F), A, orthocenter(A, C, D) we get 180 == 2 * direction(H, midpoint(E, F)) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on H, D, A, orthocenter(A, C, D) we get 180 == 2 * direction(H, D) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), H, G, orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(A, G), H) - 2 * direction(G, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), orthocenter(C, D, G), midpoint(A, G), H we get 180 == 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) - 2 * direction(midpoint(A, G), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(C, D, G), midpoint(A, G), H we get 180 == 2 * direction(midpoint(A, G), orthocenter(C, D, G)) - 2 * direction(midpoint(A, G), H) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(C, D, G), G, E we get 180 == 2 * direction(D, orthocenter(C, D, G)) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), A, midpoint(A, G), C we get 180 == 2 * direction(orthocenter(C, D, G), A) - 2 * direction(midpoint(A, G), C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), G, H, midpoint(A, G) we get 180 == 2 * direction(orthocenter(A, C, D), G) - 2 * direction(H, midpoint(A, G)) mod 360
By in_imply_collinear on A, orthocenter(A, C, D), orthocenter(C, D, G) we get collinear(A, orthocenter(A, C, D), orthocenter(C, D, G))
By perpendicular_direction_conditions_v0_r on A, C, orthocenter(A, C, D), D we get 180 == 2 * direction(A, C) - 2 * direction(orthocenter(A, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), orthocenter(A, C, D), D, H we get 180 == 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on C, orthocenter(A, C, D), A, I we get 180 == 2 * direction(C, orthocenter(A, C, D)) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on I, C, orthocenter(C, D, G), D we get 180 == 2 * direction(I, C) - 2 * direction(orthocenter(C, D, G), D) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(C, D, G), C, E we get 180 == 2 * direction(D, orthocenter(C, D, G)) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on E, orthocenter(C, D, G), G, E we get 180 == 2 * direction(E, orthocenter(C, D, G)) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on B, G, orthocenter(C, D, G), D we get 180 == 2 * direction(B, G) - 2 * direction(orthocenter(C, D, G), D) mod 360
By perpendicular_direction_conditions_v0_r on E, orthocenter(C, D, G), C, B we get 180 == 2 * direction(E, orthocenter(C, D, G)) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), D, G, E we get 180 == 2 * direction(orthocenter(C, D, G), D) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, orthocenter(A, C, D), G we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(orthocenter(A, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), G, C, H we get 180 == 2 * direction(orthocenter(A, C, D), G) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), C, A, orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(A, G), C) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on B, G, orthocenter(C, D, G), E we get 180 == 2 * direction(B, G) - 2 * direction(orthocenter(C, D, G), E) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), midpoint(E, F), C we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(midpoint(E, F), C) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(A, G), midpoint(A, G), orthocenter(A, C, D) we get 180 == 2 * direction(H, midpoint(A, G)) - 2 * direction(midpoint(A, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on H, C, orthocenter(C, D, G), midpoint(A, G) we get 180 == 2 * direction(H, C) - 2 * direction(orthocenter(C, D, G), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, midpoint(A, G), C we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(midpoint(A, G), C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), A, midpoint(E, F), H we get 180 == 2 * direction(orthocenter(C, D, G), A) - 2 * direction(midpoint(E, F), H) mod 360
By perpendicular_direction_conditions_v0_r on C, F, orthocenter(A, C, D), D we get 180 == 2 * direction(C, F) - 2 * direction(orthocenter(A, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), midpoint(A, G), orthocenter(A, C, D) we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(midpoint(A, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, D), orthocenter(A, C, D), midpoint(A, G) we get 180 == 2 * direction(C, midpoint(C, D)) - 2 * direction(orthocenter(A, C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), A, D, midpoint(C, D) we get 180 == 2 * direction(orthocenter(C, D, G), A) - 2 * direction(D, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), midpoint(C, D), H we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), G, midpoint(C, D), H we get 180 == 2 * direction(orthocenter(C, D, G), G) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(C, D, G), midpoint(A, G), midpoint(E, F) we get 180 == 2 * direction(midpoint(A, G), orthocenter(C, D, G)) - 2 * direction(midpoint(A, G), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(A, G), orthocenter(A, C, D), A we get 180 == 2 * direction(D, midpoint(A, G)) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(A, G), orthocenter(C, D, G), A we get 180 == 2 * direction(midpoint(E, F), midpoint(A, G)) - 2 * direction(orthocenter(C, D, G), A) mod 360
By perpendicular_direction_conditions_v0_r on D, C, A, orthocenter(A, C, D) we get 180 == 2 * direction(D, C) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, A, orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(A, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on F, orthocenter(A, C, D), C, A we get 180 == 2 * direction(F, orthocenter(A, C, D)) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(C, D, G), midpoint(E, F), C we get 180 == 2 * direction(A, orthocenter(C, D, G)) - 2 * direction(midpoint(E, F), C) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), orthocenter(C, D, G), G we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(orthocenter(C, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, orthocenter(A, C, D), orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(C, D, G), D, midpoint(C, D) we get 180 == 2 * direction(midpoint(A, G), orthocenter(C, D, G)) - 2 * direction(D, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), G, midpoint(A, G), H we get 180 == 2 * direction(orthocenter(C, D, G), G) - 2 * direction(midpoint(A, G), H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), D, E, I we get 180 == 2 * direction(orthocenter(C, D, G), D) - 2 * direction(E, I) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(C, D, G), D, midpoint(E, F) we get 180 == 2 * direction(G, orthocenter(C, D, G)) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(C, D, G), midpoint(A, G), C we get 180 == 2 * direction(A, orthocenter(C, D, G)) - 2 * direction(midpoint(A, G), C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), G, H, midpoint(A, G) we get 180 == 2 * direction(orthocenter(C, D, G), G) - 2 * direction(H, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(E, F), orthocenter(C, D, G), G we get 180 == 2 * direction(H, midpoint(E, F)) - 2 * direction(orthocenter(C, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, midpoint(E, F), C we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(midpoint(E, F), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, G, orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(G, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on I, B, E, orthocenter(C, D, G) we get 180 == 2 * direction(I, B) - 2 * direction(E, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), D, E, B we get 180 == 2 * direction(orthocenter(C, D, G), D) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), orthocenter(C, D, G), H, C we get 180 == 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), A, C, D we get 180 == 2 * direction(orthocenter(C, D, G), A) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on G, I, orthocenter(C, D, G), D we get 180 == 2 * direction(G, I) - 2 * direction(orthocenter(C, D, G), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), midpoint(A, G), H, C we get 180 == 2 * direction(orthocenter(C, D, G), midpoint(A, G)) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), orthocenter(C, D, G), orthocenter(A, C, D) we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, C, midpoint(A, G), orthocenter(C, D, G) we get 180 == 2 * direction(D, C) - 2 * direction(midpoint(A, G), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on C, G, orthocenter(C, D, G), E we get 180 == 2 * direction(C, G) - 2 * direction(orthocenter(C, D, G), E) mod 360
By perpendicular_direction_conditions_v0_r on F, C, orthocenter(A, C, D), F we get 180 == 2 * direction(F, C) - 2 * direction(orthocenter(A, C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, H, D we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, G), orthocenter(A, C, D), orthocenter(C, D, G) we get 180 == 2 * direction(C, midpoint(A, G)) - 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on C, D, A, orthocenter(A, C, D) we get 180 == 2 * direction(C, D) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), H, orthocenter(C, D, G), G we get 180 == 2 * direction(midpoint(A, G), H) - 2 * direction(orthocenter(C, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), midpoint(A, G), midpoint(E, F), H we get 180 == 2 * direction(orthocenter(A, C, D), midpoint(A, G)) - 2 * direction(midpoint(E, F), H) mod 360
By perpendicular_direction_conditions_v0_r on I, B, D, orthocenter(C, D, G) we get 180 == 2 * direction(I, B) - 2 * direction(D, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(A, C, D), C, midpoint(C, D) we get 180 == 2 * direction(G, orthocenter(A, C, D)) - 2 * direction(C, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, orthocenter(C, D, G), G, D we get 180 == 2 * direction(C, orthocenter(C, D, G)) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(C, D, G), D, H we get 180 == 2 * direction(G, orthocenter(C, D, G)) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), G, D, midpoint(A, G) we get 180 == 2 * direction(orthocenter(C, D, G), G) - 2 * direction(D, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(A, C, D), midpoint(C, D), midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), orthocenter(A, C, D)) - 2 * direction(midpoint(C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on I, C, orthocenter(C, D, G), E we get 180 == 2 * direction(I, C) - 2 * direction(orthocenter(C, D, G), E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), A, D, midpoint(A, G) we get 180 == 2 * direction(orthocenter(C, D, G), A) - 2 * direction(D, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, D, midpoint(A, G) we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(D, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, A, orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(A, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(C, D, G), D, midpoint(E, F) we get 180 == 2 * direction(midpoint(A, G), orthocenter(C, D, G)) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, midpoint(E, F), D we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(C, D, G), midpoint(C, D), C we get 180 == 2 * direction(midpoint(A, G), orthocenter(C, D, G)) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on H, D, orthocenter(C, D, G), orthocenter(A, C, D) we get 180 == 2 * direction(H, D) - 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), C, midpoint(A, G), orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(A, G), C) - 2 * direction(midpoint(A, G), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), H, midpoint(A, G), orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(A, G), H) - 2 * direction(midpoint(A, G), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(C, D, G), midpoint(A, G), D we get 180 == 2 * direction(G, orthocenter(C, D, G)) - 2 * direction(midpoint(A, G), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), D, G, orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(A, G), D) - 2 * direction(G, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(A, C, D), midpoint(A, G), H we get 180 == 2 * direction(midpoint(A, G), orthocenter(A, C, D)) - 2 * direction(midpoint(A, G), H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), A, C, midpoint(A, G) we get 180 == 2 * direction(orthocenter(C, D, G), A) - 2 * direction(C, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), orthocenter(A, C, D), G we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(orthocenter(A, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), C, orthocenter(A, C, D), A we get 180 == 2 * direction(midpoint(A, G), C) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(C, D), A, orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(A, G), midpoint(C, D)) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), orthocenter(A, C, D), C, D we get 180 == 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), D, orthocenter(A, C, D), A we get 180 == 2 * direction(midpoint(A, G), D) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), orthocenter(A, C, D), G we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(orthocenter(A, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on G, I, orthocenter(C, D, G), E we get 180 == 2 * direction(G, I) - 2 * direction(orthocenter(C, D, G), E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), G, midpoint(E, F), C we get 180 == 2 * direction(orthocenter(A, C, D), G) - 2 * direction(midpoint(E, F), C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), midpoint(A, G), midpoint(C, D), H we get 180 == 2 * direction(orthocenter(A, C, D), midpoint(A, G)) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), D, C, G we get 180 == 2 * direction(orthocenter(C, D, G), D) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), midpoint(A, G), midpoint(A, G), D we get 180 == 2 * direction(orthocenter(C, D, G), midpoint(A, G)) - 2 * direction(midpoint(A, G), D) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, D), orthocenter(C, D, G), G we get 180 == 2 * direction(C, midpoint(C, D)) - 2 * direction(orthocenter(C, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on E, B, E, orthocenter(C, D, G) we get 180 == 2 * direction(E, B) - 2 * direction(E, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, G, orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(G, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), C, orthocenter(A, C, D), G we get 180 == 2 * direction(midpoint(A, G), C) - 2 * direction(orthocenter(A, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), D, C, E we get 180 == 2 * direction(orthocenter(C, D, G), D) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on C, H, orthocenter(C, D, G), G we get 180 == 2 * direction(C, H) - 2 * direction(orthocenter(C, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), orthocenter(A, C, D), midpoint(A, G) we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(orthocenter(A, C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(A, G), orthocenter(A, C, D), G we get 180 == 2 * direction(H, midpoint(A, G)) - 2 * direction(orthocenter(A, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on J, D, C, orthocenter(A, C, D) we get 180 == 2 * direction(J, D) - 2 * direction(C, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(E, F), orthocenter(A, C, D), G we get 180 == 2 * direction(midpoint(A, G), midpoint(E, F)) - 2 * direction(orthocenter(A, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, C, midpoint(A, G) we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(C, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), G, midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(orthocenter(A, C, D), G) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), midpoint(A, G), H, midpoint(A, G) we get 180 == 2 * direction(orthocenter(C, D, G), midpoint(A, G)) - 2 * direction(H, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), H, midpoint(A, G) we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(H, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, orthocenter(C, D, G), A we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(orthocenter(C, D, G), A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, C, midpoint(E, F) we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), G, D, H we get 180 == 2 * direction(orthocenter(A, C, D), G) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), midpoint(A, G), orthocenter(C, D, G) we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(midpoint(A, G), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), G, midpoint(C, D), D we get 180 == 2 * direction(orthocenter(C, D, G), G) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on C, E, E, orthocenter(C, D, G) we get 180 == 2 * direction(C, E) - 2 * direction(E, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), A, C, midpoint(C, D) we get 180 == 2 * direction(orthocenter(C, D, G), A) - 2 * direction(C, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), A, orthocenter(A, C, D) we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(C, D, G), midpoint(E, F), D we get 180 == 2 * direction(G, orthocenter(C, D, G)) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), H, A, orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(E, F), H) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, orthocenter(A, C, D), orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, C, orthocenter(C, D, G), A we get 180 == 2 * direction(D, C) - 2 * direction(orthocenter(C, D, G), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(C, D), midpoint(A, G), orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(A, G), midpoint(C, D)) - 2 * direction(midpoint(A, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), G, D, midpoint(C, D) we get 180 == 2 * direction(orthocenter(C, D, G), G) - 2 * direction(D, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(A, C, D), midpoint(E, F), midpoint(A, G) we get 180 == 2 * direction(G, orthocenter(A, C, D)) - 2 * direction(midpoint(E, F), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), C, midpoint(A, G), orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(A, G), C) - 2 * direction(midpoint(A, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), H, orthocenter(C, D, G), orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(A, G), H) - 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, orthocenter(C, D, G), midpoint(A, G) we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(orthocenter(C, D, G), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, H, A, orthocenter(C, D, G) we get 180 == 2 * direction(D, H) - 2 * direction(A, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(A, G), midpoint(A, G), orthocenter(C, D, G) we get 180 == 2 * direction(D, midpoint(A, G)) - 2 * direction(midpoint(A, G), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(C, D, G), H, midpoint(C, D) we get 180 == 2 * direction(midpoint(A, G), orthocenter(C, D, G)) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), orthocenter(C, D, G), midpoint(A, G), midpoint(C, D) we get 180 == 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) - 2 * direction(midpoint(A, G), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(C, D, G), D, H we get 180 == 2 * direction(A, orthocenter(C, D, G)) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), E, G, C we get 180 == 2 * direction(orthocenter(C, D, G), E) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(A, C, D), C, midpoint(E, F) we get 180 == 2 * direction(G, orthocenter(A, C, D)) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(C, D, G), midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(A, orthocenter(C, D, G)) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), midpoint(A, G), D, H we get 180 == 2 * direction(orthocenter(A, C, D), midpoint(A, G)) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), G, C, midpoint(C, D) we get 180 == 2 * direction(orthocenter(C, D, G), G) - 2 * direction(C, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, D), G, orthocenter(A, C, D) we get 180 == 2 * direction(C, midpoint(C, D)) - 2 * direction(G, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), G, H, D we get 180 == 2 * direction(orthocenter(A, C, D), G) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, orthocenter(A, C, D), midpoint(A, G) we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(orthocenter(A, C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), orthocenter(A, C, D), midpoint(C, D), C we get 180 == 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on C, I, orthocenter(C, D, G), D we get 180 == 2 * direction(C, I) - 2 * direction(orthocenter(C, D, G), D) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), midpoint(A, G), orthocenter(A, C, D) we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(midpoint(A, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), G, H, midpoint(E, F) we get 180 == 2 * direction(orthocenter(A, C, D), G) - 2 * direction(H, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(A, C, D), C, D we get 180 == 2 * direction(G, orthocenter(A, C, D)) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(E, F), orthocenter(C, D, G), midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), midpoint(E, F)) - 2 * direction(orthocenter(C, D, G), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(C, D), orthocenter(C, D, G), A we get 180 == 2 * direction(D, midpoint(C, D)) - 2 * direction(orthocenter(C, D, G), A) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, D), orthocenter(A, C, D), G we get 180 == 2 * direction(C, midpoint(C, D)) - 2 * direction(orthocenter(A, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, G, orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(G, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on H, C, orthocenter(C, D, G), G we get 180 == 2 * direction(H, C) - 2 * direction(orthocenter(C, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), orthocenter(C, D, G), midpoint(A, G) we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(orthocenter(C, D, G), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), orthocenter(A, C, D), midpoint(A, G) we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(orthocenter(A, C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, G, orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(G, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(C, D, G), midpoint(C, D), C we get 180 == 2 * direction(G, orthocenter(C, D, G)) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(A, G), A, orthocenter(A, C, D) we get 180 == 2 * direction(H, midpoint(A, G)) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), H, A, orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(A, G), H) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), orthocenter(A, C, D), C, H we get 180 == 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(A, C, D), A, C we get 180 == 2 * direction(D, orthocenter(A, C, D)) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), midpoint(A, G), midpoint(C, D) we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(midpoint(A, G), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on B, G, E, orthocenter(C, D, G) we get 180 == 2 * direction(B, G) - 2 * direction(E, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on J, A, C, orthocenter(A, C, D) we get 180 == 2 * direction(J, A) - 2 * direction(C, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), C, J, A we get 180 == 2 * direction(orthocenter(A, C, D), C) - 2 * direction(J, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(A, C, D), midpoint(A, G), D we get 180 == 2 * direction(midpoint(A, G), orthocenter(A, C, D)) - 2 * direction(midpoint(A, G), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, orthocenter(A, C, D), orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, H, orthocenter(A, C, D), G we get 180 == 2 * direction(D, H) - 2 * direction(orthocenter(A, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, G), orthocenter(C, D, G), midpoint(A, G) we get 180 == 2 * direction(C, midpoint(A, G)) - 2 * direction(orthocenter(C, D, G), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), orthocenter(C, D, G), orthocenter(A, C, D) we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), midpoint(A, G), midpoint(E, F), H we get 180 == 2 * direction(orthocenter(C, D, G), midpoint(A, G)) - 2 * direction(midpoint(E, F), H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), G, D, H we get 180 == 2 * direction(orthocenter(C, D, G), G) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on E, orthocenter(C, D, G), B, G we get 180 == 2 * direction(E, orthocenter(C, D, G)) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on H, D, G, orthocenter(A, C, D) we get 180 == 2 * direction(H, D) - 2 * direction(G, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(E, F), orthocenter(C, D, G), G we get 180 == 2 * direction(midpoint(A, G), midpoint(E, F)) - 2 * direction(orthocenter(C, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), orthocenter(C, D, G), midpoint(A, G) we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(orthocenter(C, D, G), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(C, D, G), midpoint(C, D), D we get 180 == 2 * direction(A, orthocenter(C, D, G)) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on C, orthocenter(A, C, D), I, J we get 180 == 2 * direction(C, orthocenter(A, C, D)) - 2 * direction(I, J) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), orthocenter(A, C, D), A we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, G, orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(G, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on C, D, G, orthocenter(A, C, D) we get 180 == 2 * direction(C, D) - 2 * direction(G, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(A, G), orthocenter(A, C, D), G we get 180 == 2 * direction(D, midpoint(A, G)) - 2 * direction(orthocenter(A, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(A, G), orthocenter(C, D, G), midpoint(A, G) we get 180 == 2 * direction(H, midpoint(A, G)) - 2 * direction(orthocenter(C, D, G), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, G), orthocenter(A, C, D), A we get 180 == 2 * direction(C, midpoint(A, G)) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, A, orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(A, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), G, midpoint(A, G), midpoint(C, D) we get 180 == 2 * direction(orthocenter(C, D, G), G) - 2 * direction(midpoint(A, G), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(A, C, D), midpoint(E, F), H we get 180 == 2 * direction(G, orthocenter(A, C, D)) - 2 * direction(midpoint(E, F), H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), G, D, midpoint(E, F) we get 180 == 2 * direction(orthocenter(A, C, D), G) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), midpoint(A, G), C, H we get 180 == 2 * direction(orthocenter(A, C, D), midpoint(A, G)) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on I, E, orthocenter(C, D, G), D we get 180 == 2 * direction(I, E) - 2 * direction(orthocenter(C, D, G), D) mod 360
By perpendicular_direction_conditions_v0_r on E, orthocenter(C, D, G), G, C we get 180 == 2 * direction(E, orthocenter(C, D, G)) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), midpoint(A, G), orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(midpoint(A, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), E, G, B we get 180 == 2 * direction(orthocenter(C, D, G), E) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), D, C, F we get 180 == 2 * direction(orthocenter(A, C, D), D) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), C, orthocenter(A, C, D), orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(A, G), C) - 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), orthocenter(C, D, G), A we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(orthocenter(C, D, G), A) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(C, D, G), D, C we get 180 == 2 * direction(G, orthocenter(C, D, G)) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), G, orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(G, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), A, midpoint(A, G), H we get 180 == 2 * direction(orthocenter(C, D, G), A) - 2 * direction(midpoint(A, G), H) mod 360
By perpendicular_direction_conditions_v0_r on E, G, D, orthocenter(C, D, G) we get 180 == 2 * direction(E, G) - 2 * direction(D, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), orthocenter(C, D, G), C, H we get 180 == 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), orthocenter(C, D, G), midpoint(A, G), D we get 180 == 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) - 2 * direction(midpoint(A, G), D) mod 360
By perpendicular_direction_conditions_v0_r on D, H, G, orthocenter(C, D, G) we get 180 == 2 * direction(D, H) - 2 * direction(G, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), H, orthocenter(A, C, D), G we get 180 == 2 * direction(midpoint(A, G), H) - 2 * direction(orthocenter(A, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, midpoint(C, D), midpoint(A, G) we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(midpoint(C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), G, midpoint(A, G), D we get 180 == 2 * direction(orthocenter(C, D, G), G) - 2 * direction(midpoint(A, G), D) mod 360
By perpendicular_direction_conditions_v0_r on C, A, orthocenter(A, C, D), F we get 180 == 2 * direction(C, A) - 2 * direction(orthocenter(A, C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on C, orthocenter(A, C, D), I, A we get 180 == 2 * direction(C, orthocenter(A, C, D)) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), G, midpoint(E, F), H we get 180 == 2 * direction(orthocenter(C, D, G), G) - 2 * direction(midpoint(E, F), H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), orthocenter(A, C, D), C, midpoint(C, D) we get 180 == 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) - 2 * direction(C, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, orthocenter(A, C, D), orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on I, G, D, orthocenter(C, D, G) we get 180 == 2 * direction(I, G) - 2 * direction(D, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), midpoint(A, G), midpoint(A, G), midpoint(C, D) we get 180 == 2 * direction(orthocenter(C, D, G), midpoint(A, G)) - 2 * direction(midpoint(A, G), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(E, F), orthocenter(A, C, D), midpoint(A, G) we get 180 == 2 * direction(H, midpoint(E, F)) - 2 * direction(orthocenter(A, C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, orthocenter(C, D, G), A we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(orthocenter(C, D, G), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, A, orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(A, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(C, D, G), midpoint(C, D), H we get 180 == 2 * direction(A, orthocenter(C, D, G)) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, midpoint(A, G), orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(midpoint(A, G), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(A, G), orthocenter(C, D, G), G we get 180 == 2 * direction(D, midpoint(A, G)) - 2 * direction(orthocenter(C, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), G, midpoint(E, F), D we get 180 == 2 * direction(orthocenter(A, C, D), G) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), midpoint(A, G), D, midpoint(C, D) we get 180 == 2 * direction(orthocenter(A, C, D), midpoint(A, G)) - 2 * direction(D, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, orthocenter(C, D, G), E, C we get 180 == 2 * direction(E, orthocenter(C, D, G)) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, A, orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(A, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on B, E, D, orthocenter(C, D, G) we get 180 == 2 * direction(B, E) - 2 * direction(D, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, C, orthocenter(A, C, D), midpoint(A, G) we get 180 == 2 * direction(D, C) - 2 * direction(orthocenter(A, C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), midpoint(A, G), C, midpoint(A, G) we get 180 == 2 * direction(orthocenter(A, C, D), midpoint(A, G)) - 2 * direction(C, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on C, I, E, orthocenter(C, D, G) we get 180 == 2 * direction(C, I) - 2 * direction(E, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), H, midpoint(A, G), orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(A, G), H) - 2 * direction(midpoint(A, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on J, I, orthocenter(A, C, D), C we get 180 == 2 * direction(J, I) - 2 * direction(orthocenter(A, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), C, midpoint(C, D) we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(C, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, orthocenter(A, C, D), G we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(orthocenter(A, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(C, D, G), D, midpoint(A, G) we get 180 == 2 * direction(G, orthocenter(C, D, G)) - 2 * direction(D, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), midpoint(A, G), D, midpoint(C, D) we get 180 == 2 * direction(orthocenter(C, D, G), midpoint(A, G)) - 2 * direction(D, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), D, orthocenter(C, D, G), A we get 180 == 2 * direction(midpoint(A, G), D) - 2 * direction(orthocenter(C, D, G), A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), D, I, E we get 180 == 2 * direction(orthocenter(C, D, G), D) - 2 * direction(I, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), G, orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(G, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), G, H, midpoint(C, D) we get 180 == 2 * direction(orthocenter(A, C, D), G) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, A, F, orthocenter(A, C, D) we get 180 == 2 * direction(C, A) - 2 * direction(F, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(A, G), orthocenter(C, D, G), G we get 180 == 2 * direction(midpoint(C, D), midpoint(A, G)) - 2 * direction(orthocenter(C, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), orthocenter(A, C, D), orthocenter(C, D, G) we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), midpoint(A, G), H, midpoint(E, F) we get 180 == 2 * direction(orthocenter(A, C, D), midpoint(A, G)) - 2 * direction(H, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), orthocenter(A, C, D), midpoint(C, D), H we get 180 == 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(A, G), orthocenter(A, C, D), orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(C, D), midpoint(A, G)) - 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), midpoint(A, G), D, midpoint(E, F) we get 180 == 2 * direction(orthocenter(A, C, D), midpoint(A, G)) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), A, H, midpoint(A, G) we get 180 == 2 * direction(orthocenter(C, D, G), A) - 2 * direction(H, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), orthocenter(C, D, G), A we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(orthocenter(C, D, G), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), H, A, orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(E, F), H) - 2 * direction(A, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, C, A, orthocenter(C, D, G) we get 180 == 2 * direction(D, C) - 2 * direction(A, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(C, D, G), B, C we get 180 == 2 * direction(D, orthocenter(C, D, G)) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), C, A, orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(A, G), C) - 2 * direction(A, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(C, D, G), H, midpoint(A, G) we get 180 == 2 * direction(A, orthocenter(C, D, G)) - 2 * direction(H, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(C, D, G), midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(G, orthocenter(C, D, G)) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), A, midpoint(A, G), midpoint(E, F) we get 180 == 2 * direction(orthocenter(C, D, G), A) - 2 * direction(midpoint(A, G), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(C, D, G), D, C we get 180 == 2 * direction(A, orthocenter(C, D, G)) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on I, D, C, orthocenter(A, C, D) we get 180 == 2 * direction(I, D) - 2 * direction(C, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, G, C, orthocenter(C, D, G) we get 180 == 2 * direction(D, G) - 2 * direction(C, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), orthocenter(C, D, G), midpoint(C, D), midpoint(A, G) we get 180 == 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) - 2 * direction(midpoint(C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), midpoint(A, G), C, midpoint(C, D) we get 180 == 2 * direction(orthocenter(C, D, G), midpoint(A, G)) - 2 * direction(C, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(C, D, G), midpoint(C, D), C we get 180 == 2 * direction(A, orthocenter(C, D, G)) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), D, I, C we get 180 == 2 * direction(orthocenter(C, D, G), D) - 2 * direction(I, C) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(C, D), A, orthocenter(A, C, D) we get 180 == 2 * direction(D, midpoint(C, D)) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), midpoint(A, G), C, D we get 180 == 2 * direction(orthocenter(C, D, G), midpoint(A, G)) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, A, orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(A, G), midpoint(A, G), orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(E, F), midpoint(A, G)) - 2 * direction(midpoint(A, G), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), A, midpoint(C, D), H we get 180 == 2 * direction(orthocenter(C, D, G), A) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), midpoint(C, D), midpoint(A, G) we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(midpoint(C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, midpoint(E, F), H we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(midpoint(E, F), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, orthocenter(C, D, G), orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), H, orthocenter(A, C, D), A we get 180 == 2 * direction(midpoint(A, G), H) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on H, C, midpoint(A, G), orthocenter(A, C, D) we get 180 == 2 * direction(H, C) - 2 * direction(midpoint(A, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, H, orthocenter(A, C, D), orthocenter(C, D, G) we get 180 == 2 * direction(D, H) - 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), midpoint(A, G), midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(orthocenter(A, C, D), midpoint(A, G)) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(A, G), orthocenter(A, C, D), A we get 180 == 2 * direction(midpoint(C, D), midpoint(A, G)) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), G, midpoint(A, G), C we get 180 == 2 * direction(orthocenter(A, C, D), G) - 2 * direction(midpoint(A, G), C) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(C, D, G), midpoint(E, F), H we get 180 == 2 * direction(A, orthocenter(C, D, G)) - 2 * direction(midpoint(E, F), H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), E, C, G we get 180 == 2 * direction(orthocenter(C, D, G), E) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on H, C, A, orthocenter(C, D, G) we get 180 == 2 * direction(H, C) - 2 * direction(A, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, E, E, orthocenter(C, D, G) we get 180 == 2 * direction(G, E) - 2 * direction(E, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(A, G), G, orthocenter(A, C, D) we get 180 == 2 * direction(D, midpoint(A, G)) - 2 * direction(G, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on F, orthocenter(A, C, D), A, C we get 180 == 2 * direction(F, orthocenter(A, C, D)) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), orthocenter(A, C, D), A we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on I, C, D, orthocenter(C, D, G) we get 180 == 2 * direction(I, C) - 2 * direction(D, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, orthocenter(C, D, G), midpoint(A, G) we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(orthocenter(C, D, G), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(C, D, G), C, midpoint(C, D) we get 180 == 2 * direction(A, orthocenter(C, D, G)) - 2 * direction(C, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, D, midpoint(C, D) we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(D, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, D, orthocenter(C, D, G), G we get 180 == 2 * direction(C, D) - 2 * direction(orthocenter(C, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on E, C, E, orthocenter(C, D, G) we get 180 == 2 * direction(E, C) - 2 * direction(E, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), H, midpoint(A, G), orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(E, F), H) - 2 * direction(midpoint(A, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on H, C, A, orthocenter(A, C, D) we get 180 == 2 * direction(H, C) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), G, orthocenter(A, C, D) we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(G, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, H, midpoint(C, D) we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(C, D), orthocenter(A, C, D), A we get 180 == 2 * direction(D, midpoint(C, D)) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(A, C, D), midpoint(A, G), midpoint(C, D) we get 180 == 2 * direction(G, orthocenter(A, C, D)) - 2 * direction(midpoint(A, G), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on A, D, C, orthocenter(A, C, D) we get 180 == 2 * direction(A, D) - 2 * direction(C, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on B, C, orthocenter(C, D, G), E we get 180 == 2 * direction(B, C) - 2 * direction(orthocenter(C, D, G), E) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), G, orthocenter(C, D, G) we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(G, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), orthocenter(C, D, G), C, D we get 180 == 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(C, D), orthocenter(C, D, G), G we get 180 == 2 * direction(midpoint(A, G), midpoint(C, D)) - 2 * direction(orthocenter(C, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on B, E, E, orthocenter(C, D, G) we get 180 == 2 * direction(B, E) - 2 * direction(E, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on C, H, orthocenter(A, C, D), orthocenter(C, D, G) we get 180 == 2 * direction(C, H) - 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, G), midpoint(A, G), orthocenter(A, C, D) we get 180 == 2 * direction(C, midpoint(A, G)) - 2 * direction(midpoint(A, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, F, F, orthocenter(A, C, D) we get 180 == 2 * direction(C, F) - 2 * direction(F, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), orthocenter(A, C, D), midpoint(C, D), midpoint(A, G) we get 180 == 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) - 2 * direction(midpoint(C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), midpoint(A, G), midpoint(E, F), midpoint(A, G) we get 180 == 2 * direction(orthocenter(A, C, D), midpoint(A, G)) - 2 * direction(midpoint(E, F), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), C, D, G we get 180 == 2 * direction(orthocenter(C, D, G), C) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on I, B, orthocenter(C, D, G), D we get 180 == 2 * direction(I, B) - 2 * direction(orthocenter(C, D, G), D) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), orthocenter(C, D, G), G we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(orthocenter(C, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, D), orthocenter(C, D, G), midpoint(A, G) we get 180 == 2 * direction(C, midpoint(C, D)) - 2 * direction(orthocenter(C, D, G), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, D), midpoint(A, G), orthocenter(A, C, D) we get 180 == 2 * direction(C, midpoint(C, D)) - 2 * direction(midpoint(A, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), midpoint(A, G), D, C we get 180 == 2 * direction(orthocenter(A, C, D), midpoint(A, G)) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), orthocenter(A, C, D), D, midpoint(E, F) we get 180 == 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(C, D, G), G, I we get 180 == 2 * direction(D, orthocenter(C, D, G)) - 2 * direction(G, I) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(A, C, D), H, midpoint(E, F) we get 180 == 2 * direction(midpoint(A, G), orthocenter(A, C, D)) - 2 * direction(H, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(A, G), orthocenter(A, C, D), A we get 180 == 2 * direction(midpoint(E, F), midpoint(A, G)) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), midpoint(A, G), D we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(midpoint(A, G), D) mod 360
By perpendicular_direction_conditions_v0_r on B, G, D, orthocenter(C, D, G) we get 180 == 2 * direction(B, G) - 2 * direction(D, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), D, F, A we get 180 == 2 * direction(orthocenter(A, C, D), D) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, orthocenter(C, D, G), orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(A, C, D), midpoint(C, D), D we get 180 == 2 * direction(G, orthocenter(A, C, D)) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(C, D, G), midpoint(C, D), H we get 180 == 2 * direction(G, orthocenter(C, D, G)) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), A, midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(orthocenter(C, D, G), A) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), F, A, C we get 180 == 2 * direction(orthocenter(A, C, D), F) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, orthocenter(C, D, G), G we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(orthocenter(C, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(A, C, D), D, H we get 180 == 2 * direction(midpoint(A, G), orthocenter(A, C, D)) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), midpoint(E, F), H we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(midpoint(E, F), H) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(E, F), midpoint(A, G), orthocenter(C, D, G) we get 180 == 2 * direction(H, midpoint(E, F)) - 2 * direction(midpoint(A, G), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), orthocenter(A, C, D), D, C we get 180 == 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, D, midpoint(E, F) we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), D, I, B we get 180 == 2 * direction(orthocenter(C, D, G), D) - 2 * direction(I, B) mod 360
By perpendicular_direction_conditions_v0_r on C, D, midpoint(A, G), orthocenter(C, D, G) we get 180 == 2 * direction(C, D) - 2 * direction(midpoint(A, G), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), C, orthocenter(C, D, G), A we get 180 == 2 * direction(midpoint(C, D), C) - 2 * direction(orthocenter(C, D, G), A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), G, midpoint(C, D), midpoint(A, G) we get 180 == 2 * direction(orthocenter(A, C, D), G) - 2 * direction(midpoint(C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), midpoint(A, G), H, midpoint(C, D) we get 180 == 2 * direction(orthocenter(C, D, G), midpoint(A, G)) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, C, orthocenter(C, D, G), D we get 180 == 2 * direction(G, C) - 2 * direction(orthocenter(C, D, G), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(A, G), G, orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(E, F), midpoint(A, G)) - 2 * direction(G, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), H, G, orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(E, F), H) - 2 * direction(G, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on C, I, D, orthocenter(C, D, G) we get 180 == 2 * direction(C, I) - 2 * direction(D, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), orthocenter(C, D, G), midpoint(E, F), H we get 180 == 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) - 2 * direction(midpoint(E, F), H) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(C, D, G), C, midpoint(E, F) we get 180 == 2 * direction(G, orthocenter(C, D, G)) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(E, F), A, orthocenter(C, D, G) we get 180 == 2 * direction(H, midpoint(E, F)) - 2 * direction(A, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(A, G), G, orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(E, F), midpoint(A, G)) - 2 * direction(G, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on E, C, orthocenter(C, D, G), D we get 180 == 2 * direction(E, C) - 2 * direction(orthocenter(C, D, G), D) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(A, C, D), midpoint(A, G), C we get 180 == 2 * direction(G, orthocenter(A, C, D)) - 2 * direction(midpoint(A, G), C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), orthocenter(C, D, G), H, midpoint(E, F) we get 180 == 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) - 2 * direction(H, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, orthocenter(C, D, G), G we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(orthocenter(C, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on D, H, orthocenter(C, D, G), orthocenter(A, C, D) we get 180 == 2 * direction(D, H) - 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(C, D, G), C, I we get 180 == 2 * direction(D, orthocenter(C, D, G)) - 2 * direction(C, I) mod 360
By perpendicular_direction_conditions_v0_r on E, orthocenter(C, D, G), I, E we get 180 == 2 * direction(E, orthocenter(C, D, G)) - 2 * direction(I, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), D, midpoint(A, G), orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(A, G), D) - 2 * direction(midpoint(A, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on F, orthocenter(A, C, D), F, C we get 180 == 2 * direction(F, orthocenter(A, C, D)) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(A, C, D), midpoint(E, F), D we get 180 == 2 * direction(G, orthocenter(A, C, D)) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on G, I, E, orthocenter(C, D, G) we get 180 == 2 * direction(G, I) - 2 * direction(E, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, A, orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on F, C, D, orthocenter(A, C, D) we get 180 == 2 * direction(F, C) - 2 * direction(D, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), A, H, midpoint(C, D) we get 180 == 2 * direction(orthocenter(C, D, G), A) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(C, D, G), B, E we get 180 == 2 * direction(D, orthocenter(C, D, G)) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, D, H we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(E, F), orthocenter(A, C, D), midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), midpoint(E, F)) - 2 * direction(orthocenter(A, C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), orthocenter(A, C, D), midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), orthocenter(A, C, D), orthocenter(C, D, G) we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(C, D, G), C, midpoint(C, D) we get 180 == 2 * direction(midpoint(A, G), orthocenter(C, D, G)) - 2 * direction(C, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on I, B, orthocenter(C, D, G), E we get 180 == 2 * direction(I, B) - 2 * direction(orthocenter(C, D, G), E) mod 360
By perpendicular_direction_conditions_v0_r on F, A, F, orthocenter(A, C, D) we get 180 == 2 * direction(F, A) - 2 * direction(F, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(C, D), G, orthocenter(C, D, G) we get 180 == 2 * direction(D, midpoint(C, D)) - 2 * direction(G, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(E, F), G, orthocenter(A, C, D) we get 180 == 2 * direction(H, midpoint(E, F)) - 2 * direction(G, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), orthocenter(C, D, G), G we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(orthocenter(C, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(C, D), A, orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(A, G), midpoint(C, D)) - 2 * direction(A, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on F, orthocenter(A, C, D), A, F we get 180 == 2 * direction(F, orthocenter(A, C, D)) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(A, C, D), midpoint(A, G), midpoint(E, F) we get 180 == 2 * direction(midpoint(A, G), orthocenter(A, C, D)) - 2 * direction(midpoint(A, G), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, H, orthocenter(C, D, G), A we get 180 == 2 * direction(D, H) - 2 * direction(orthocenter(C, D, G), A) mod 360
By perpendicular_direction_conditions_v0_r on B, I, E, orthocenter(C, D, G) we get 180 == 2 * direction(B, I) - 2 * direction(E, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, midpoint(A, G), orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(midpoint(A, G), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on H, C, orthocenter(A, C, D), A we get 180 == 2 * direction(H, C) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on H, C, orthocenter(A, C, D), orthocenter(C, D, G) we get 180 == 2 * direction(H, C) - 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), D, I, G we get 180 == 2 * direction(orthocenter(C, D, G), D) - 2 * direction(I, G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), orthocenter(A, C, D), midpoint(A, G), midpoint(C, D) we get 180 == 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) - 2 * direction(midpoint(A, G), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, D, orthocenter(C, D, G), orthocenter(A, C, D) we get 180 == 2 * direction(C, D) - 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), A, midpoint(C, D), C we get 180 == 2 * direction(orthocenter(C, D, G), A) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), orthocenter(A, C, D), midpoint(C, D), D we get 180 == 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(A, C, D), midpoint(A, G), D we get 180 == 2 * direction(G, orthocenter(A, C, D)) - 2 * direction(midpoint(A, G), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), midpoint(A, G), midpoint(E, F), C we get 180 == 2 * direction(orthocenter(C, D, G), midpoint(A, G)) - 2 * direction(midpoint(E, F), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, orthocenter(A, C, D), G we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(orthocenter(A, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), midpoint(A, G), midpoint(C, D), midpoint(A, G) we get 180 == 2 * direction(orthocenter(C, D, G), midpoint(A, G)) - 2 * direction(midpoint(C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), G, orthocenter(A, C, D) we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(G, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), orthocenter(C, D, G), orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), midpoint(A, G), H, D we get 180 == 2 * direction(orthocenter(C, D, G), midpoint(A, G)) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(C, D, G), E, G we get 180 == 2 * direction(D, orthocenter(C, D, G)) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), H, orthocenter(C, D, G), midpoint(A, G) we get 180 == 2 * direction(midpoint(E, F), H) - 2 * direction(orthocenter(C, D, G), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), D, G, orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(A, G), D) - 2 * direction(G, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, midpoint(A, G), orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(midpoint(A, G), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, C, orthocenter(C, D, G), E we get 180 == 2 * direction(G, C) - 2 * direction(orthocenter(C, D, G), E) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(C, D, G), midpoint(E, F), midpoint(A, G) we get 180 == 2 * direction(G, orthocenter(C, D, G)) - 2 * direction(midpoint(E, F), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), G, midpoint(A, G), H we get 180 == 2 * direction(orthocenter(A, C, D), G) - 2 * direction(midpoint(A, G), H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), D, F, C we get 180 == 2 * direction(orthocenter(A, C, D), D) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, midpoint(A, G), H we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(midpoint(A, G), H) mod 360
By perpendicular_direction_conditions_v0_r on I, D, orthocenter(A, C, D), C we get 180 == 2 * direction(I, D) - 2 * direction(orthocenter(A, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), A, midpoint(C, D), midpoint(A, G) we get 180 == 2 * direction(orthocenter(C, D, G), A) - 2 * direction(midpoint(C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(C, D, G), H, midpoint(E, F) we get 180 == 2 * direction(midpoint(A, G), orthocenter(C, D, G)) - 2 * direction(H, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, I, C, orthocenter(A, C, D) we get 180 == 2 * direction(D, I) - 2 * direction(C, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), H, orthocenter(A, C, D), G we get 180 == 2 * direction(midpoint(E, F), H) - 2 * direction(orthocenter(A, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), D, E, C we get 180 == 2 * direction(orthocenter(C, D, G), D) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), midpoint(A, G), midpoint(A, G), H we get 180 == 2 * direction(orthocenter(C, D, G), midpoint(A, G)) - 2 * direction(midpoint(A, G), H) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, D), orthocenter(C, D, G), orthocenter(A, C, D) we get 180 == 2 * direction(C, midpoint(C, D)) - 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), A, D, C we get 180 == 2 * direction(orthocenter(C, D, G), A) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(C, D, G), midpoint(A, G), midpoint(C, D) we get 180 == 2 * direction(midpoint(A, G), orthocenter(C, D, G)) - 2 * direction(midpoint(A, G), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, B, orthocenter(C, D, G), D we get 180 == 2 * direction(C, B) - 2 * direction(orthocenter(C, D, G), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(E, F), midpoint(A, G), orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(A, G), midpoint(E, F)) - 2 * direction(midpoint(A, G), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), orthocenter(A, C, D), H, C we get 180 == 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) - 2 * direction(H, C) mod 360
By orthocenter_concurrency on C, D, I we get orthocenter(C, D, I) in altitude(C, D, I), orthocenter(C, D, I) in altitude(D, C, I), orthocenter(C, D, I) in altitude(I, C, D)
By perpendicular_direction_conditions_v0_r on A, orthocenter(C, D, G), D, midpoint(C, D) we get 180 == 2 * direction(A, orthocenter(C, D, G)) - 2 * direction(D, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(C, D, G), C, G we get 180 == 2 * direction(D, orthocenter(C, D, G)) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(E, F), G, orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(A, G), midpoint(E, F)) - 2 * direction(G, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(A, C, D), H, midpoint(A, G) we get 180 == 2 * direction(G, orthocenter(A, C, D)) - 2 * direction(H, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), orthocenter(A, C, D), midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on A, F, F, orthocenter(A, C, D) we get 180 == 2 * direction(A, F) - 2 * direction(F, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), D, B, I we get 180 == 2 * direction(orthocenter(C, D, G), D) - 2 * direction(B, I) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), E, I, G we get 180 == 2 * direction(orthocenter(C, D, G), E) - 2 * direction(I, G) mod 360
By perpendicular_direction_conditions_v0_r on J, A, orthocenter(A, C, D), C we get 180 == 2 * direction(J, A) - 2 * direction(orthocenter(A, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), H, G, orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(E, F), H) - 2 * direction(G, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(E, F), G, orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(A, G), midpoint(E, F)) - 2 * direction(G, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), A, midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(orthocenter(C, D, G), A) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), C, H we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on D, H, G, orthocenter(A, C, D) we get 180 == 2 * direction(D, H) - 2 * direction(G, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), midpoint(A, G), midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(orthocenter(C, D, G), midpoint(A, G)) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(E, F), midpoint(A, G), orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(A, G), midpoint(E, F)) - 2 * direction(midpoint(A, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, A, orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(C, D), orthocenter(A, C, D), midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), midpoint(C, D)) - 2 * direction(orthocenter(A, C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on F, A, D, orthocenter(A, C, D) we get 180 == 2 * direction(F, A) - 2 * direction(D, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, H, G, orthocenter(C, D, G) we get 180 == 2 * direction(C, H) - 2 * direction(G, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(A, C, D), midpoint(A, G), C we get 180 == 2 * direction(midpoint(A, G), orthocenter(A, C, D)) - 2 * direction(midpoint(A, G), C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, H, midpoint(E, F) we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(H, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), midpoint(A, G), midpoint(C, D), D we get 180 == 2 * direction(orthocenter(C, D, G), midpoint(A, G)) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), E, B, C we get 180 == 2 * direction(orthocenter(C, D, G), E) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, orthocenter(A, C, D), G we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(orthocenter(A, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, G), G, orthocenter(A, C, D) we get 180 == 2 * direction(C, midpoint(A, G)) - 2 * direction(G, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), midpoint(A, G), C, midpoint(C, D) we get 180 == 2 * direction(orthocenter(A, C, D), midpoint(A, G)) - 2 * direction(C, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, B, E, orthocenter(C, D, G) we get 180 == 2 * direction(G, B) - 2 * direction(E, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), A, orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, G, orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(G, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(C, D, G), C, H we get 180 == 2 * direction(A, orthocenter(C, D, G)) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(C, D, G), C, midpoint(A, G) we get 180 == 2 * direction(A, orthocenter(C, D, G)) - 2 * direction(C, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, C, D, orthocenter(A, C, D) we get 180 == 2 * direction(A, C) - 2 * direction(D, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), G, midpoint(C, D), C we get 180 == 2 * direction(orthocenter(C, D, G), G) - 2 * direction(midpoint(C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on C, E, orthocenter(C, D, G), D we get 180 == 2 * direction(C, E) - 2 * direction(orthocenter(C, D, G), D) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), D, midpoint(E, F) we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), orthocenter(C, D, G), G we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(orthocenter(C, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), C, I, D we get 180 == 2 * direction(orthocenter(A, C, D), C) - 2 * direction(I, D) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), G, orthocenter(C, D, G) we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(G, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(C, D, G), C, D we get 180 == 2 * direction(A, orthocenter(C, D, G)) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), orthocenter(A, C, D), midpoint(A, G), H we get 180 == 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) - 2 * direction(midpoint(A, G), H) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, G), orthocenter(C, D, G), A we get 180 == 2 * direction(C, midpoint(A, G)) - 2 * direction(orthocenter(C, D, G), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(A, G), orthocenter(A, C, D), G we get 180 == 2 * direction(midpoint(C, D), midpoint(A, G)) - 2 * direction(orthocenter(A, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on C, H, orthocenter(C, D, G), orthocenter(A, C, D) we get 180 == 2 * direction(C, H) - 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on B, I, orthocenter(C, D, G), D we get 180 == 2 * direction(B, I) - 2 * direction(orthocenter(C, D, G), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), H, orthocenter(C, D, G), orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(E, F), H) - 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on B, E, orthocenter(C, D, G), E we get 180 == 2 * direction(B, E) - 2 * direction(orthocenter(C, D, G), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, orthocenter(C, D, G), orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), D, midpoint(C, D) we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(D, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, H, orthocenter(C, D, G), midpoint(A, G) we get 180 == 2 * direction(D, H) - 2 * direction(orthocenter(C, D, G), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on I, E, D, orthocenter(C, D, G) we get 180 == 2 * direction(I, E) - 2 * direction(D, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(C, D, G), midpoint(A, G), midpoint(E, F) we get 180 == 2 * direction(A, orthocenter(C, D, G)) - 2 * direction(midpoint(A, G), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), A, midpoint(A, G), D we get 180 == 2 * direction(orthocenter(C, D, G), A) - 2 * direction(midpoint(A, G), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, orthocenter(A, C, D), A we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(A, C, D), H, D we get 180 == 2 * direction(midpoint(A, G), orthocenter(A, C, D)) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on E, orthocenter(C, D, G), G, B we get 180 == 2 * direction(E, orthocenter(C, D, G)) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(A, G), A, orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(E, F), midpoint(A, G)) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), orthocenter(C, D, G), C, midpoint(A, G) we get 180 == 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) - 2 * direction(C, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), C, A, I we get 180 == 2 * direction(orthocenter(A, C, D), C) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), C, orthocenter(C, D, G), orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(A, G), C) - 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, G), A, orthocenter(A, C, D) we get 180 == 2 * direction(C, midpoint(A, G)) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, C, orthocenter(A, C, D), A we get 180 == 2 * direction(D, C) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, D, C we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), midpoint(A, G), orthocenter(A, C, D) we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(midpoint(A, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(A, C, D), D, midpoint(C, D) we get 180 == 2 * direction(midpoint(A, G), orthocenter(A, C, D)) - 2 * direction(D, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), A, midpoint(E, F), midpoint(A, G) we get 180 == 2 * direction(orthocenter(C, D, G), A) - 2 * direction(midpoint(E, F), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, C, F, orthocenter(A, C, D) we get 180 == 2 * direction(A, C) - 2 * direction(F, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(A, C, D), midpoint(E, F), D we get 180 == 2 * direction(midpoint(A, G), orthocenter(A, C, D)) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), D, G, orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(C, D), D) - 2 * direction(G, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), midpoint(A, G), D, midpoint(A, G) we get 180 == 2 * direction(orthocenter(C, D, G), midpoint(A, G)) - 2 * direction(D, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(C, D, G), D, H we get 180 == 2 * direction(midpoint(A, G), orthocenter(C, D, G)) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(A, C, D), C, D we get 180 == 2 * direction(midpoint(A, G), orthocenter(A, C, D)) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(C, D), G, orthocenter(C, D, G) we get 180 == 2 * direction(C, midpoint(C, D)) - 2 * direction(G, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(C, D, G), midpoint(A, G), D we get 180 == 2 * direction(A, orthocenter(C, D, G)) - 2 * direction(midpoint(A, G), D) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(A, C, D), C, midpoint(A, G) we get 180 == 2 * direction(G, orthocenter(A, C, D)) - 2 * direction(C, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on E, G, E, orthocenter(C, D, G) we get 180 == 2 * direction(E, G) - 2 * direction(E, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), H, midpoint(A, G), orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(C, D), H) - 2 * direction(midpoint(A, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), E, G, E we get 180 == 2 * direction(orthocenter(C, D, G), E) - 2 * direction(G, E) mod 360
By in_imply_collinear on orthocenter(A, C, D), G, orthocenter(C, D, G) we get collinear(G, orthocenter(A, C, D), orthocenter(C, D, G))
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), orthocenter(A, C, D), H, midpoint(E, F) we get 180 == 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) - 2 * direction(H, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on C, A, D, orthocenter(A, C, D) we get 180 == 2 * direction(C, A) - 2 * direction(D, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on A, F, D, orthocenter(A, C, D) we get 180 == 2 * direction(A, F) - 2 * direction(D, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(A, C, D), midpoint(A, G), H we get 180 == 2 * direction(G, orthocenter(A, C, D)) - 2 * direction(midpoint(A, G), H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), midpoint(A, G), midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(orthocenter(A, C, D), midpoint(A, G)) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(A, G), orthocenter(C, D, G), G we get 180 == 2 * direction(H, midpoint(A, G)) - 2 * direction(orthocenter(C, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(A, C, D), D, C we get 180 == 2 * direction(midpoint(A, G), orthocenter(A, C, D)) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, C, H we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, orthocenter(A, C, D), midpoint(A, G) we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(orthocenter(A, C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(A, C, D), C, midpoint(E, F) we get 180 == 2 * direction(midpoint(A, G), orthocenter(A, C, D)) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), G, midpoint(A, G), midpoint(E, F) we get 180 == 2 * direction(orthocenter(C, D, G), G) - 2 * direction(midpoint(A, G), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(E, F), orthocenter(C, D, G), A we get 180 == 2 * direction(H, midpoint(E, F)) - 2 * direction(orthocenter(C, D, G), A) mod 360
By perpendicular_direction_conditions_v0_r on E, I, E, orthocenter(C, D, G) we get 180 == 2 * direction(E, I) - 2 * direction(E, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(C, D, G), H, C we get 180 == 2 * direction(midpoint(A, G), orthocenter(C, D, G)) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on C, orthocenter(A, C, D), D, J we get 180 == 2 * direction(C, orthocenter(A, C, D)) - 2 * direction(D, J) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), E, E, B we get 180 == 2 * direction(orthocenter(C, D, G), E) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), C, D, A we get 180 == 2 * direction(orthocenter(A, C, D), C) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(C, D, G), midpoint(E, F), midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), orthocenter(C, D, G)) - 2 * direction(midpoint(E, F), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(A, C, D), H, midpoint(C, D) we get 180 == 2 * direction(midpoint(A, G), orthocenter(A, C, D)) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), midpoint(A, G), C we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(midpoint(A, G), C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), midpoint(A, G), midpoint(A, G), midpoint(C, D) we get 180 == 2 * direction(orthocenter(A, C, D), midpoint(A, G)) - 2 * direction(midpoint(A, G), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), A, orthocenter(C, D, G) we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(A, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on C, D, orthocenter(A, C, D), orthocenter(C, D, G) we get 180 == 2 * direction(C, D) - 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), D, midpoint(A, G), orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(A, G), D) - 2 * direction(midpoint(A, G), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), orthocenter(C, D, G), midpoint(A, G), C we get 180 == 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) - 2 * direction(midpoint(A, G), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(C, D), orthocenter(A, C, D), A we get 180 == 2 * direction(midpoint(A, G), midpoint(C, D)) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), D, A, orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(A, G), D) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, H, G, orthocenter(A, C, D) we get 180 == 2 * direction(C, H) - 2 * direction(G, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, A, orthocenter(A, C, D), C we get 180 == 2 * direction(D, A) - 2 * direction(orthocenter(A, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), A, H, C we get 180 == 2 * direction(orthocenter(C, D, G), A) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), midpoint(A, G), midpoint(A, G), C we get 180 == 2 * direction(orthocenter(C, D, G), midpoint(A, G)) - 2 * direction(midpoint(A, G), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(A, G), A, orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(C, D), midpoint(A, G)) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, G, orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(G, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(C, D), orthocenter(A, C, D), G we get 180 == 2 * direction(D, midpoint(C, D)) - 2 * direction(orthocenter(A, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on H, C, midpoint(A, G), orthocenter(C, D, G) we get 180 == 2 * direction(H, C) - 2 * direction(midpoint(A, G), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(E, F), G, orthocenter(C, D, G) we get 180 == 2 * direction(H, midpoint(E, F)) - 2 * direction(G, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on E, orthocenter(C, D, G), B, I we get 180 == 2 * direction(E, orthocenter(C, D, G)) - 2 * direction(B, I) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(C, D, G), H, C we get 180 == 2 * direction(A, orthocenter(C, D, G)) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(C, D, G), G, B we get 180 == 2 * direction(D, orthocenter(C, D, G)) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(C, D, G), midpoint(E, F), H we get 180 == 2 * direction(midpoint(A, G), orthocenter(C, D, G)) - 2 * direction(midpoint(E, F), H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), G, midpoint(E, F), C we get 180 == 2 * direction(orthocenter(C, D, G), G) - 2 * direction(midpoint(E, F), C) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(C, D, G), C, D we get 180 == 2 * direction(G, orthocenter(C, D, G)) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(C, D, G), midpoint(A, G), C we get 180 == 2 * direction(G, orthocenter(C, D, G)) - 2 * direction(midpoint(A, G), C) mod 360
By perpendicular_direction_conditions_v0_r on G, C, E, orthocenter(C, D, G) we get 180 == 2 * direction(G, C) - 2 * direction(E, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), G, midpoint(C, D), D we get 180 == 2 * direction(orthocenter(A, C, D), G) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), E, I, C we get 180 == 2 * direction(orthocenter(C, D, G), E) - 2 * direction(I, C) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), D, midpoint(A, G) we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(D, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on E, orthocenter(C, D, G), E, I we get 180 == 2 * direction(E, orthocenter(C, D, G)) - 2 * direction(E, I) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(A, G), A, orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(C, D), midpoint(A, G)) - 2 * direction(A, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), A, midpoint(E, F), C we get 180 == 2 * direction(orthocenter(C, D, G), A) - 2 * direction(midpoint(E, F), C) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(C, D), midpoint(A, G), orthocenter(C, D, G) we get 180 == 2 * direction(H, midpoint(C, D)) - 2 * direction(midpoint(A, G), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), D, C, B we get 180 == 2 * direction(orthocenter(C, D, G), D) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(A, G), midpoint(A, G), orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(C, D), midpoint(A, G)) - 2 * direction(midpoint(A, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, G, orthocenter(C, D, G), C we get 180 == 2 * direction(D, G) - 2 * direction(orthocenter(C, D, G), C) mod 360
By perpendicular_direction_conditions_v0_r on D, A, C, orthocenter(A, C, D) we get 180 == 2 * direction(D, A) - 2 * direction(C, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(C, D, G), C, B we get 180 == 2 * direction(D, orthocenter(C, D, G)) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on D, C, orthocenter(C, D, G), orthocenter(A, C, D) we get 180 == 2 * direction(D, C) - 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, orthocenter(C, D, G), E, B we get 180 == 2 * direction(E, orthocenter(C, D, G)) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on G, D, C, orthocenter(C, D, G) we get 180 == 2 * direction(G, D) - 2 * direction(C, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(C, D, G), I, E we get 180 == 2 * direction(D, orthocenter(C, D, G)) - 2 * direction(I, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(C, D), orthocenter(A, C, D), G we get 180 == 2 * direction(midpoint(E, F), midpoint(C, D)) - 2 * direction(orthocenter(A, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(E, F), orthocenter(C, D, G), midpoint(A, G) we get 180 == 2 * direction(H, midpoint(E, F)) - 2 * direction(orthocenter(C, D, G), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), A, C, midpoint(E, F) we get 180 == 2 * direction(orthocenter(C, D, G), A) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), orthocenter(C, D, G), orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), midpoint(A, G), midpoint(E, F), midpoint(A, G) we get 180 == 2 * direction(orthocenter(C, D, G), midpoint(A, G)) - 2 * direction(midpoint(E, F), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(A, G), orthocenter(A, C, D), G we get 180 == 2 * direction(midpoint(E, F), midpoint(A, G)) - 2 * direction(orthocenter(A, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), E, G, I we get 180 == 2 * direction(orthocenter(C, D, G), E) - 2 * direction(G, I) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), orthocenter(A, C, D), midpoint(A, G), midpoint(E, F) we get 180 == 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) - 2 * direction(midpoint(A, G), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on F, C, F, orthocenter(A, C, D) we get 180 == 2 * direction(F, C) - 2 * direction(F, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(A, G), orthocenter(A, C, D), orthocenter(C, D, G) we get 180 == 2 * direction(H, midpoint(A, G)) - 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, J, C, orthocenter(A, C, D) we get 180 == 2 * direction(D, J) - 2 * direction(C, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, orthocenter(C, D, G), I, G we get 180 == 2 * direction(E, orthocenter(C, D, G)) - 2 * direction(I, G) mod 360
By perpendicular_direction_conditions_v0_r on E, B, D, orthocenter(C, D, G) we get 180 == 2 * direction(E, B) - 2 * direction(D, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on H, C, G, orthocenter(C, D, G) we get 180 == 2 * direction(H, C) - 2 * direction(G, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), G, D, midpoint(A, G) we get 180 == 2 * direction(orthocenter(A, C, D), G) - 2 * direction(D, midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), G, C, D we get 180 == 2 * direction(orthocenter(A, C, D), G) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on D, H, orthocenter(A, C, D), A we get 180 == 2 * direction(D, H) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on D, H, orthocenter(A, C, D), midpoint(A, G) we get 180 == 2 * direction(D, H) - 2 * direction(orthocenter(A, C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), G, H, C we get 180 == 2 * direction(orthocenter(C, D, G), G) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), midpoint(E, F), A, orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(A, G), midpoint(E, F)) - 2 * direction(A, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(A, C, D), C, A we get 180 == 2 * direction(D, orthocenter(A, C, D)) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(A, G), orthocenter(A, C, D), midpoint(A, G) we get 180 == 2 * direction(D, midpoint(A, G)) - 2 * direction(orthocenter(A, C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), D, A, orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(A, G), D) - 2 * direction(A, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on H, D, orthocenter(A, C, D), midpoint(A, G) we get 180 == 2 * direction(H, D) - 2 * direction(orthocenter(A, C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on I, A, orthocenter(A, C, D), C we get 180 == 2 * direction(I, A) - 2 * direction(orthocenter(A, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(A, G), orthocenter(A, C, D), midpoint(A, G) we get 180 == 2 * direction(H, midpoint(A, G)) - 2 * direction(orthocenter(A, C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(C, D, G), midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(midpoint(A, G), orthocenter(C, D, G)) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), orthocenter(C, D, G), C, midpoint(E, F) we get 180 == 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on H, D, orthocenter(C, D, G), midpoint(A, G) we get 180 == 2 * direction(H, D) - 2 * direction(orthocenter(C, D, G), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(C, D), A, orthocenter(C, D, G) we get 180 == 2 * direction(D, midpoint(C, D)) - 2 * direction(A, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), A, midpoint(A, G), D we get 180 == 2 * direction(orthocenter(A, C, D), A) - 2 * direction(midpoint(A, G), D) mod 360
By perpendicular_direction_conditions_v0_r on C, orthocenter(A, C, D), D, I we get 180 == 2 * direction(C, orthocenter(A, C, D)) - 2 * direction(D, I) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(E, F), orthocenter(A, C, D), orthocenter(C, D, G) we get 180 == 2 * direction(H, midpoint(E, F)) - 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on B, C, orthocenter(C, D, G), D we get 180 == 2 * direction(B, C) - 2 * direction(orthocenter(C, D, G), D) mod 360
By perpendicular_direction_conditions_v0_r on C, G, E, orthocenter(C, D, G) we get 180 == 2 * direction(C, G) - 2 * direction(E, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), G, orthocenter(C, D, G) we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(G, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(A, C, D), C, H we get 180 == 2 * direction(midpoint(A, G), orthocenter(A, C, D)) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), orthocenter(C, D, G), midpoint(C, D), H we get 180 == 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) - 2 * direction(midpoint(C, D), H) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(A, G), midpoint(A, G), orthocenter(C, D, G) we get 180 == 2 * direction(H, midpoint(A, G)) - 2 * direction(midpoint(A, G), orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), A, midpoint(C, D), D we get 180 == 2 * direction(orthocenter(C, D, G), A) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), orthocenter(C, D, G), midpoint(C, D), midpoint(E, F) we get 180 == 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) - 2 * direction(midpoint(C, D), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), A, orthocenter(C, D, G) we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(A, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on J, I, C, orthocenter(A, C, D) we get 180 == 2 * direction(J, I) - 2 * direction(C, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), midpoint(A, G), midpoint(A, G), C we get 180 == 2 * direction(orthocenter(A, C, D), midpoint(A, G)) - 2 * direction(midpoint(A, G), C) mod 360
By perpendicular_direction_conditions_v0_r on A, I, C, orthocenter(A, C, D) we get 180 == 2 * direction(A, I) - 2 * direction(C, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(A, G), orthocenter(C, D, G), G we get 180 == 2 * direction(midpoint(E, F), midpoint(A, G)) - 2 * direction(orthocenter(C, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), H, orthocenter(A, C, D), midpoint(A, G) we get 180 == 2 * direction(midpoint(E, F), H) - 2 * direction(orthocenter(A, C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(C, D, G), midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(A, orthocenter(C, D, G)) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, F, D, orthocenter(A, C, D) we get 180 == 2 * direction(C, F) - 2 * direction(D, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), A, midpoint(E, F), D we get 180 == 2 * direction(orthocenter(C, D, G), A) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(C, D), G, orthocenter(A, C, D) we get 180 == 2 * direction(D, midpoint(C, D)) - 2 * direction(G, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(C, D, G), midpoint(E, F), midpoint(A, G) we get 180 == 2 * direction(A, orthocenter(C, D, G)) - 2 * direction(midpoint(E, F), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), midpoint(A, G), midpoint(A, G), orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(E, F), midpoint(A, G)) - 2 * direction(midpoint(A, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(A, G), midpoint(A, G), orthocenter(A, C, D) we get 180 == 2 * direction(D, midpoint(A, G)) - 2 * direction(midpoint(A, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on B, E, orthocenter(C, D, G), D we get 180 == 2 * direction(B, E) - 2 * direction(orthocenter(C, D, G), D) mod 360
By perpendicular_direction_conditions_v0_r on H, C, orthocenter(C, D, G), A we get 180 == 2 * direction(H, C) - 2 * direction(orthocenter(C, D, G), A) mod 360
By perpendicular_direction_conditions_v0_r on H, D, orthocenter(A, C, D), G we get 180 == 2 * direction(H, D) - 2 * direction(orthocenter(A, C, D), G) mod 360
By perpendicular_direction_conditions_v0_r on J, D, orthocenter(A, C, D), C we get 180 == 2 * direction(J, D) - 2 * direction(orthocenter(A, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(A, C, D), midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(midpoint(A, G), orthocenter(A, C, D)) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), orthocenter(C, D, G), midpoint(E, F), midpoint(A, G) we get 180 == 2 * direction(orthocenter(A, C, D), orthocenter(C, D, G)) - 2 * direction(midpoint(E, F), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on C, H, orthocenter(A, C, D), midpoint(A, G) we get 180 == 2 * direction(C, H) - 2 * direction(orthocenter(A, C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(A, C, D), C, H we get 180 == 2 * direction(G, orthocenter(A, C, D)) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on E, I, orthocenter(C, D, G), D we get 180 == 2 * direction(E, I) - 2 * direction(orthocenter(C, D, G), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), G, midpoint(A, G), midpoint(E, F) we get 180 == 2 * direction(orthocenter(A, C, D), G) - 2 * direction(midpoint(A, G), midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(C, D, G), midpoint(C, D), D we get 180 == 2 * direction(midpoint(A, G), orthocenter(C, D, G)) - 2 * direction(midpoint(C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on A, D, orthocenter(A, C, D), C we get 180 == 2 * direction(A, D) - 2 * direction(orthocenter(A, C, D), C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), midpoint(A, G), midpoint(E, F), midpoint(C, D) we get 180 == 2 * direction(orthocenter(C, D, G), midpoint(A, G)) - 2 * direction(midpoint(E, F), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), H, midpoint(C, D) we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(H, midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on C, D, A, orthocenter(C, D, G) we get 180 == 2 * direction(C, D) - 2 * direction(A, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on C, A, orthocenter(A, C, D), D we get 180 == 2 * direction(C, A) - 2 * direction(orthocenter(A, C, D), D) mod 360
By perpendicular_direction_conditions_v0_r on E, orthocenter(C, D, G), C, E we get 180 == 2 * direction(E, orthocenter(C, D, G)) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), D, H we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), orthocenter(A, C, D), midpoint(A, G) we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(orthocenter(A, C, D), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), orthocenter(A, C, D), A we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(orthocenter(A, C, D), A) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(C, D, G), E, I we get 180 == 2 * direction(D, orthocenter(C, D, G)) - 2 * direction(E, I) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, C, D), midpoint(A, G), H we get 180 == 2 * direction(A, orthocenter(A, C, D)) - 2 * direction(midpoint(A, G), H) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(A, G), orthocenter(C, D, G), orthocenter(A, C, D) we get 180 == 2 * direction(D, midpoint(A, G)) - 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), C, A, J we get 180 == 2 * direction(orthocenter(A, C, D), C) - 2 * direction(A, J) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(C, D), midpoint(E, F), G, orthocenter(C, D, G) we get 180 == 2 * direction(midpoint(C, D), midpoint(E, F)) - 2 * direction(G, orthocenter(C, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, H, orthocenter(C, D, G), G we get 180 == 2 * direction(D, H) - 2 * direction(orthocenter(C, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, orthocenter(C, D, G), orthocenter(A, C, D) we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), midpoint(A, G), midpoint(E, F), D we get 180 == 2 * direction(orthocenter(A, C, D), midpoint(A, G)) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on C, orthocenter(C, D, G), D, G we get 180 == 2 * direction(C, orthocenter(C, D, G)) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on E, orthocenter(C, D, G), B, C we get 180 == 2 * direction(E, orthocenter(C, D, G)) - 2 * direction(B, C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), G, midpoint(E, F), midpoint(A, G) we get 180 == 2 * direction(orthocenter(C, D, G), G) - 2 * direction(midpoint(E, F), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), H, orthocenter(C, D, G), A we get 180 == 2 * direction(midpoint(A, G), H) - 2 * direction(orthocenter(C, D, G), A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, C, D), G, midpoint(A, G), midpoint(C, D) we get 180 == 2 * direction(orthocenter(A, C, D), G) - 2 * direction(midpoint(A, G), midpoint(C, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), orthocenter(A, C, D), midpoint(A, G), D we get 180 == 2 * direction(orthocenter(C, D, G), orthocenter(A, C, D)) - 2 * direction(midpoint(A, G), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, G), orthocenter(A, C, D), midpoint(E, F), midpoint(A, G) we get 180 == 2 * direction(midpoint(A, G), orthocenter(A, C, D)) - 2 * direction(midpoint(E, F), midpoint(A, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, B, orthocenter(C, D, G), E we get 180 == 2 * direction(G, B) - 2 * direction(orthocenter(C, D, G), E) mod 360
By perpendicular_direction_conditions_v0_r on C, H, A, orthocenter(A, C, D) we get 180 == 2 * direction(C, H) - 2 * direction(A, orthocenter(A, C, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(C, D, G), I, C we get 180 == 2 * direction(D, orthocenter(C, D, G)) - 2 * direction(I, C) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(A, C, D), H, midpoint(E, F) we get 180 == 2 * direction(G, orthocenter(A, C, D)) - 2 * direction(H, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(A, C, D), F, A we get 180 == 2 * direction(D, orthocenter(A, C, D)) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on I, G, orthocenter(C, D, G), E we get 180 == 2 * direction(I, G) - 2 * direction(orthocenter(C, D, G), E) mod 360
By perpendicular_direction_conditions_v0_r on F, A, orthocenter(A, C, D), F we get 180 == 2 * direction(F, A) - 2 * direction(orthocenter(A, C, D), F) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(C, D, G), E, E, G we get 180 == 2 * direction(orthocenter(C, D, G), E) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on C, B, D, orthocenter(C, D, G) we get 180 == 2 * direction(C, B) - 2 * direction(D, orthocenter(C, D, G)) mod 360
By sss_anti_congruence_v0 on H, D, F, H, D, E we get anti_congruent_triangles(D, E, H, D, F, H)
By sas_anti_congruence on E, D, H, F, D, H we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v0 on H, D, F, H, D, E we get anti_congruent_triangles(D, E, H, D, F, H)
By similar_triangle_basic_properties on E, midpoint(C, D), D, E, C, F we get angle(E, C, F) == angle(E, midpoint(C, D), D) mod 360, angle(C, F, E) == angle(midpoint(C, D), D, E) mod 360, angle(F, E, C) == angle(D, E, midpoint(C, D)) mod 360, log(distance(C, E)) + log(distance(D, midpoint(C, D))) == log(distance(E, midpoint(C, D))) + log(distance(C, F)), log(distance(C, F)) + log(distance(D, E)) == log(distance(D, midpoint(C, D))) + log(distance(E, F)), log(distance(D, E)) + log(distance(C, E)) == log(distance(E, F)) + log(distance(E, midpoint(C, D)))
By in_imply_collinear on line_intersection(h, altitude(C, A, D)), A, D we get collinear(A, D, line_intersection(h, altitude(C, A, D)))
By sss_anti_similarity_v0 on H, G, D, H, A, D we get anti_similar_triangles(A, D, H, G, D, H)
By similar_triangle_basic_properties on G, C, A, D, midpoint(C, D), F we get angle(G, C, A) == angle(D, midpoint(C, D), F) mod 360, angle(C, A, G) == angle(midpoint(C, D), F, D) mod 360, angle(A, G, C) == angle(F, D, midpoint(C, D)) mod 360, log(distance(C, G)) + log(distance(F, midpoint(C, D))) == log(distance(D, midpoint(C, D))) + log(distance(A, C)), log(distance(A, C)) + log(distance(D, F)) == log(distance(F, midpoint(C, D))) + log(distance(A, G)), log(distance(D, F)) + log(distance(C, G)) == log(distance(A, G)) + log(distance(D, midpoint(C, D)))
By isosceles_triangle_properties on midpoint(C, D), G, A we get distance(A, midpoint(C, D)) == distance(G, midpoint(C, D)), angle(G, A, midpoint(C, D)) == angle(midpoint(C, D), G, A) mod 360
By sss_anti_similarity_v1 on F, D, H, E, D, H we get anti_similar_triangles(D, E, H, D, F, H)
By in_imply_collinear on line_intersection(h, altitude(C, A, D)), J, A we get collinear(A, J, line_intersection(h, altitude(C, A, D)))
By aa_anti_similarity on E, midpoint(C, D), midpoint(E, F), F, midpoint(C, D), midpoint(E, F) we get anti_similar_triangles(E, midpoint(C, D), midpoint(E, F), F, midpoint(C, D), midpoint(E, F))
By similar_triangle_basic_properties on F, C, midpoint(C, D), F, G, H we get angle(F, G, H) == angle(F, C, midpoint(C, D)) mod 360, angle(G, H, F) == angle(C, midpoint(C, D), F) mod 360, angle(H, F, G) == angle(midpoint(C, D), F, C) mod 360, log(distance(C, F)) + log(distance(G, H)) == log(distance(F, G)) + log(distance(C, midpoint(C, D))), log(distance(C, midpoint(C, D))) + log(distance(F, H)) == log(distance(G, H)) + log(distance(F, midpoint(C, D))), log(distance(F, H)) + log(distance(C, F)) == log(distance(F, midpoint(C, D))) + log(distance(F, G))
By anti_similar_triangle_basic_properties on G, C, A, D, midpoint(C, D), E we get angle(G, C, A) == 0 - angle(D, midpoint(C, D), E) mod 360, angle(C, A, G) == 0 - angle(midpoint(C, D), E, D) mod 360, angle(A, G, C) == 0 - angle(E, D, midpoint(C, D)) mod 360, log(distance(C, G)) + log(distance(E, midpoint(C, D))) == log(distance(D, midpoint(C, D))) + log(distance(A, C)), log(distance(A, C)) + log(distance(D, E)) == log(distance(E, midpoint(C, D))) + log(distance(A, G)), log(distance(D, E)) + log(distance(C, G)) == log(distance(A, G)) + log(distance(D, midpoint(C, D)))
By sss_anti_similarity_v0 on H, D, F, H, D, E we get anti_similar_triangles(D, E, H, D, F, H)
By anti_similar_triangle_basic_properties on C, midpoint(C, D), F, F, H, G we get 0 - angle(F, H, G) == angle(C, midpoint(C, D), F) mod 360, 0 - angle(H, G, F) == angle(midpoint(C, D), F, C) mod 360, 0 - angle(G, F, H) == angle(F, C, midpoint(C, D)) mod 360, log(distance(C, midpoint(C, D))) + log(distance(G, H)) == log(distance(F, H)) + log(distance(F, midpoint(C, D))), log(distance(G, H)) + log(distance(C, F)) == log(distance(F, midpoint(C, D))) + log(distance(F, G)), log(distance(C, F)) + log(distance(F, H)) == log(distance(F, G)) + log(distance(C, midpoint(C, D)))
By in_imply_collinear on line_intersection(h, altitude(C, A, D)), orthocenter(A, C, D), C we get collinear(C, orthocenter(A, C, D), line_intersection(h, altitude(C, A, D)))
By collinear_definition on midpoint(A, G), midpoint(C, D), H we get midpoint(C, D) in Line(H, midpoint(A, G)), H in Line(midpoint(A, G), midpoint(C, D)), Line(H, midpoint(A, G)) == Line(midpoint(A, G), midpoint(C, D)), 0 == 2 * angle(midpoint(C, D), midpoint(A, G), H) mod 360
By anti_similar_triangle_basic_properties on G, C, A, F, midpoint(C, D), D we get angle(G, C, A) == 0 - angle(F, midpoint(C, D), D) mod 360, angle(C, A, G) == 0 - angle(midpoint(C, D), D, F) mod 360, angle(A, G, C) == 0 - angle(D, F, midpoint(C, D)) mod 360, log(distance(C, G)) + log(distance(D, midpoint(C, D))) == log(distance(F, midpoint(C, D))) + log(distance(A, C)), log(distance(A, C)) + log(distance(D, F)) == log(distance(D, midpoint(C, D))) + log(distance(A, G)), log(distance(D, F)) + log(distance(C, G)) == log(distance(A, G)) + log(distance(F, midpoint(C, D)))
By in_imply_collinear on line_intersection(h, altitude(C, A, D)), I, D we get collinear(D, I, line_intersection(h, altitude(C, A, D)))
By sss_anti_congruence_v0 on A, H, D, G, H, D we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v1 on G, H, D, A, H, D we get anti_congruent_triangles(A, D, H, G, D, H)
By anti_similar_triangle_basic_properties on H, A, E, midpoint(C, D), C, F we get angle(H, A, E) == 0 - angle(midpoint(C, D), C, F) mod 360, angle(A, E, H) == 0 - angle(C, F, midpoint(C, D)) mod 360, angle(E, H, A) == 0 - angle(F, midpoint(C, D), C) mod 360, log(distance(A, H)) + log(distance(C, F)) == log(distance(C, midpoint(C, D))) + log(distance(A, E)), log(distance(C, F)) + log(distance(E, H)) == log(distance(A, E)) + log(distance(F, midpoint(C, D))), log(distance(E, H)) + log(distance(C, midpoint(C, D))) == log(distance(F, midpoint(C, D))) + log(distance(A, H))
By similar_triangle_basic_properties on C, E, midpoint(C, D), A, E, H we get angle(A, E, H) == angle(C, E, midpoint(C, D)) mod 360, angle(E, H, A) == angle(E, midpoint(C, D), C) mod 360, angle(H, A, E) == angle(midpoint(C, D), C, E) mod 360, log(distance(C, E)) + log(distance(E, H)) == log(distance(A, E)) + log(distance(E, midpoint(C, D))), log(distance(E, H)) + log(distance(C, midpoint(C, D))) == log(distance(E, midpoint(C, D))) + log(distance(A, H)), log(distance(A, H)) + log(distance(C, E)) == log(distance(C, midpoint(C, D))) + log(distance(A, E))
By asa_anti_congruence on H, D, E, H, D, F we get anti_congruent_triangles(D, E, H, D, F, H)
By in_imply_collinear on line_intersection(h, altitude(C, A, D)), A, I we get collinear(A, I, line_intersection(h, altitude(C, A, D)))
By sss_anti_similarity_v0 on D, F, H, D, E, H we get anti_similar_triangles(D, E, H, D, F, H)
By asa_anti_congruence on H, midpoint(A, G), G, H, midpoint(A, G), A we get anti_congruent_triangles(A, H, midpoint(A, G), G, H, midpoint(A, G))
By collinear_definition on midpoint(E, F), H, midpoint(A, G) we get H in Line(midpoint(A, G), midpoint(E, F)), midpoint(A, G) in Line(H, midpoint(E, F)), Line(H, midpoint(E, F)) == Line(midpoint(A, G), midpoint(E, F)), 0 == 2 * angle(H, midpoint(E, F), midpoint(A, G)) mod 360
By perpendicular_bisector_sufficient_conditions on G, A, center(Circle(A, B, D)), D we get perpendicular_bisector(A, G) == Line(D, center(Circle(A, B, D)))
By sss_anti_congruence_v1 on H, F, D, H, E, D we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v0 on E, D, H, F, D, H we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v1 on H, A, D, H, G, D we get anti_similar_triangles(A, D, H, G, D, H)
By asa_anti_congruence on H, midpoint(E, F), E, H, midpoint(E, F), F we get anti_congruent_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By sas_anti_congruence on midpoint(C, D), H, E, midpoint(C, D), H, F we get anti_congruent_triangles(E, H, midpoint(C, D), F, H, midpoint(C, D))
By sas_anti_congruence on D, H, A, D, H, G we get anti_congruent_triangles(A, D, H, G, D, H)
By reverse_direction on midpoint(C, D), midpoint(A, G) we get 180 == direction(midpoint(C, D), midpoint(A, G)) - direction(midpoint(A, G), midpoint(C, D)) mod 360
By sss_anti_congruence_v0 on F, H, D, E, H, D we get anti_congruent_triangles(D, E, H, D, F, H)
By sas_anti_similarity on G, D, H, A, D, H we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v0 on H, E, D, H, F, D we get anti_congruent_triangles(D, E, H, D, F, H)
By anti_similar_triangle_basic_properties on E, C, midpoint(C, D), F, G, H we get 0 - angle(F, G, H) == angle(E, C, midpoint(C, D)) mod 360, 0 - angle(G, H, F) == angle(C, midpoint(C, D), E) mod 360, 0 - angle(H, F, G) == angle(midpoint(C, D), E, C) mod 360, log(distance(C, E)) + log(distance(G, H)) == log(distance(F, G)) + log(distance(C, midpoint(C, D))), log(distance(C, midpoint(C, D))) + log(distance(F, H)) == log(distance(G, H)) + log(distance(E, midpoint(C, D))), log(distance(F, H)) + log(distance(C, E)) == log(distance(E, midpoint(C, D))) + log(distance(F, G))
By in_imply_collinear on line_intersection(Line(D, G), altitude(C, D, G)), orthocenter(C, D, G), C we get collinear(C, orthocenter(C, D, G), line_intersection(Line(D, G), altitude(C, D, G)))
By sss_anti_similarity_v1 on F, D, H, E, D, H we get anti_similar_triangles(D, E, H, D, F, H)
By in_imply_collinear on line_intersection(h, altitude(C, A, D)), J, D we get collinear(D, J, line_intersection(h, altitude(C, A, D)))
By sss_anti_congruence_v1 on E, H, D, F, H, D we get anti_congruent_triangles(D, E, H, D, F, H)
By similar_triangle_basic_properties on C, F, midpoint(C, D), E, F, D we get angle(E, F, D) == angle(C, F, midpoint(C, D)) mod 360, angle(F, D, E) == angle(F, midpoint(C, D), C) mod 360, angle(D, E, F) == angle(midpoint(C, D), C, F) mod 360, log(distance(C, F)) + log(distance(D, F)) == log(distance(E, F)) + log(distance(F, midpoint(C, D))), log(distance(D, F)) + log(distance(C, midpoint(C, D))) == log(distance(F, midpoint(C, D))) + log(distance(D, E)), log(distance(D, E)) + log(distance(C, F)) == log(distance(C, midpoint(C, D))) + log(distance(E, F))
By in_imply_collinear on line_intersection(h, altitude(C, A, D)), I, J we get collinear(I, J, line_intersection(h, altitude(C, A, D)))
By sas_anti_similarity on A, C, midpoint(A, G), G, C, midpoint(A, G) we get anti_similar_triangles(A, C, midpoint(A, G), G, C, midpoint(A, G))
By collinear_definition on midpoint(A, G), midpoint(C, D), midpoint(E, F) we get midpoint(C, D) in Line(midpoint(A, G), midpoint(E, F)), midpoint(E, F) in Line(midpoint(A, G), midpoint(C, D)), Line(midpoint(A, G), midpoint(C, D)) == Line(midpoint(A, G), midpoint(E, F)), 0 == 2 * angle(midpoint(C, D), midpoint(A, G), midpoint(E, F)) mod 360
By anti_similar_triangle_basic_properties on D, F, midpoint(C, D), F, E, C we get 0 - angle(F, E, C) == angle(D, F, midpoint(C, D)) mod 360, 0 - angle(E, C, F) == angle(F, midpoint(C, D), D) mod 360, 0 - angle(C, F, E) == angle(midpoint(C, D), D, F) mod 360, log(distance(D, F)) + log(distance(C, E)) == log(distance(E, F)) + log(distance(F, midpoint(C, D))), log(distance(C, E)) + log(distance(D, midpoint(C, D))) == log(distance(F, midpoint(C, D))) + log(distance(C, F)), log(distance(C, F)) + log(distance(D, F)) == log(distance(D, midpoint(C, D))) + log(distance(E, F))
By sas_anti_congruence on midpoint(E, F), H, F, midpoint(E, F), H, E we get anti_congruent_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By sss_anti_similarity_v1 on D, H, A, D, H, G we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v1 on D, H, F, D, H, E we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v1 on D, G, H, D, A, H we get anti_congruent_triangles(A, D, H, G, D, H)
By aa_similarity on F, D, H, F, E, G we get similar_triangles(D, F, H, E, F, G)
By in_imply_collinear on line_intersection(Line(D, G), altitude(C, D, G)), D, G we get collinear(D, G, line_intersection(Line(D, G), altitude(C, D, G)))
By sss_anti_similarity_v1 on G, H, D, A, H, D we get anti_similar_triangles(A, D, H, G, D, H)
By aa_anti_similarity on F, H, D, E, A, F we get anti_similar_triangles(A, E, F, H, F, D)
By sss_anti_congruence_v1 on H, F, D, H, E, D we get anti_congruent_triangles(D, E, H, D, F, H)
By reverse_direction on midpoint(E, F), midpoint(C, D) we get 180 == direction(midpoint(E, F), midpoint(C, D)) - direction(midpoint(C, D), midpoint(E, F)) mod 360
By collinear_definition on midpoint(C, D), midpoint(E, F), H we get midpoint(E, F) in Line(H, midpoint(C, D)), H in Line(midpoint(C, D), midpoint(E, F)), Line(H, midpoint(C, D)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), midpoint(C, D), H) mod 360
By sss_anti_similarity_v0 on D, F, H, D, E, H we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v0 on H, G, D, H, A, D we get anti_congruent_triangles(A, D, H, G, D, H)
By similar_triangle_basic_properties on E, F, C, D, F, midpoint(C, D) we get angle(E, F, C) == angle(D, F, midpoint(C, D)) mod 360, angle(F, C, E) == angle(F, midpoint(C, D), D) mod 360, angle(C, E, F) == angle(midpoint(C, D), D, F) mod 360, log(distance(D, F)) + log(distance(C, F)) == log(distance(E, F)) + log(distance(F, midpoint(C, D))), log(distance(C, F)) + log(distance(D, midpoint(C, D))) == log(distance(F, midpoint(C, D))) + log(distance(C, E)), log(distance(C, E)) + log(distance(D, F)) == log(distance(D, midpoint(C, D))) + log(distance(E, F))
By sss_anti_congruence_v0 on A, H, D, G, H, D we get anti_congruent_triangles(A, D, H, G, D, H)
By collinear_definition on H, midpoint(A, G), midpoint(E, F) we get midpoint(A, G) in Line(H, midpoint(E, F)), midpoint(E, F) in Line(H, midpoint(A, G)), Line(H, midpoint(A, G)) == Line(H, midpoint(E, F)), 0 == 2 * angle(midpoint(A, G), H, midpoint(E, F)) mod 360
By sss_anti_congruence_v1 on E, H, D, F, H, D we get anti_congruent_triangles(D, E, H, D, F, H)
By sas_anti_congruence on E, midpoint(E, F), H, F, midpoint(E, F), H we get anti_congruent_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By collinear_definition on D, H, midpoint(A, G) we get H in Line(D, midpoint(A, G)), midpoint(A, G) in Line(D, H), Line(D, H) == Line(D, midpoint(A, G)), 0 == 2 * angle(H, D, midpoint(A, G)) mod 360
By sss_anti_similarity_v0 on D, H, E, D, H, F we get anti_similar_triangles(D, E, H, D, F, H)
By asa_anti_congruence on D, H, G, D, H, A we get anti_congruent_triangles(A, D, H, G, D, H)
By aa_anti_similarity on A, midpoint(A, G), D, G, midpoint(A, G), D we get anti_similar_triangles(A, D, midpoint(A, G), G, D, midpoint(A, G))
By collinear_definition on midpoint(C, D), H, midpoint(A, G) we get H in Line(midpoint(A, G), midpoint(C, D)), midpoint(A, G) in Line(H, midpoint(C, D)), Line(H, midpoint(C, D)) == Line(midpoint(A, G), midpoint(C, D)), 0 == 2 * angle(H, midpoint(C, D), midpoint(A, G)) mod 360
By sss_anti_congruence_v0 on H, E, D, H, F, D we get anti_congruent_triangles(D, E, H, D, F, H)
By sas_anti_similarity on F, H, midpoint(C, D), E, H, midpoint(C, D) we get anti_similar_triangles(E, H, midpoint(C, D), F, H, midpoint(C, D))
By collinear_definition on midpoint(A, G), midpoint(E, F), midpoint(C, D) we get midpoint(E, F) in Line(midpoint(A, G), midpoint(C, D)), midpoint(C, D) in Line(midpoint(A, G), midpoint(E, F)), Line(midpoint(A, G), midpoint(C, D)) == Line(midpoint(A, G), midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), midpoint(A, G), midpoint(C, D)) mod 360
By sas_anti_congruence on H, D, A, H, D, G we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v1 on F, D, H, E, D, H we get anti_congruent_triangles(D, E, H, D, F, H)
By aa_anti_similarity on A, C, midpoint(A, G), G, C, midpoint(A, G) we get anti_similar_triangles(A, C, midpoint(A, G), G, C, midpoint(A, G))
By reverse_direction on H, midpoint(C, D) we get 180 == direction(H, midpoint(C, D)) - direction(midpoint(C, D), H) mod 360
By sss_anti_congruence_v1 on A, D, H, G, D, H we get anti_congruent_triangles(A, D, H, G, D, H)
By similar_triangle_basic_properties on F, D, E, C, midpoint(C, D), E we get angle(F, D, E) == angle(C, midpoint(C, D), E) mod 360, angle(D, E, F) == angle(midpoint(C, D), E, C) mod 360, angle(E, F, D) == angle(E, C, midpoint(C, D)) mod 360, log(distance(C, midpoint(C, D))) + log(distance(D, E)) == log(distance(D, F)) + log(distance(E, midpoint(C, D))), log(distance(D, E)) + log(distance(C, E)) == log(distance(E, midpoint(C, D))) + log(distance(E, F)), log(distance(C, E)) + log(distance(D, F)) == log(distance(E, F)) + log(distance(C, midpoint(C, D)))
By sss_anti_similarity_v0 on D, F, H, D, E, H we get anti_similar_triangles(D, E, H, D, F, H)
By collinear_definition on D, midpoint(A, G), H we get midpoint(A, G) in Line(D, H), H in Line(D, midpoint(A, G)), Line(D, H) == Line(D, midpoint(A, G)), 0 == 2 * angle(midpoint(A, G), D, H) mod 360
By similar_triangle_basic_properties on midpoint(C, D), C, E, H, F, G we get angle(H, F, G) == angle(midpoint(C, D), C, E) mod 360, angle(F, G, H) == angle(C, E, midpoint(C, D)) mod 360, angle(G, H, F) == angle(E, midpoint(C, D), C) mod 360, log(distance(F, H)) + log(distance(C, E)) == log(distance(C, midpoint(C, D))) + log(distance(F, G)), log(distance(C, E)) + log(distance(G, H)) == log(distance(F, G)) + log(distance(E, midpoint(C, D))), log(distance(E, midpoint(C, D))) + log(distance(F, H)) == log(distance(G, H)) + log(distance(C, midpoint(C, D)))
By sss_anti_similarity_v1 on H, D, E, H, D, F we get anti_similar_triangles(D, E, H, D, F, H)
By sas_anti_congruence on D, midpoint(A, G), G, D, midpoint(A, G), A we get anti_congruent_triangles(A, D, midpoint(A, G), G, D, midpoint(A, G))
By sss_anti_congruence_v1 on D, H, F, D, H, E we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v0 on D, H, E, D, H, F we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v1 on F, D, H, E, D, H we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v1 on E, H, D, F, H, D we get anti_similar_triangles(D, E, H, D, F, H)
By similar_triangle_basic_properties on C, G, A, midpoint(C, D), E, D we get angle(C, G, A) == angle(midpoint(C, D), E, D) mod 360, angle(G, A, C) == angle(E, D, midpoint(C, D)) mod 360, angle(A, C, G) == angle(D, midpoint(C, D), E) mod 360, log(distance(C, G)) + log(distance(D, E)) == log(distance(E, midpoint(C, D))) + log(distance(A, G)), log(distance(D, E)) + log(distance(A, C)) == log(distance(A, G)) + log(distance(D, midpoint(C, D))), log(distance(A, C)) + log(distance(E, midpoint(C, D))) == log(distance(D, midpoint(C, D))) + log(distance(C, G))
By reverse_direction on H, midpoint(A, G) we get 180 == direction(H, midpoint(A, G)) - direction(midpoint(A, G), H) mod 360
By reverse_direction on midpoint(A, G), C we get 180 == direction(midpoint(A, G), C) - direction(C, midpoint(A, G)) mod 360
By sas_anti_similarity on H, midpoint(A, G), G, H, midpoint(A, G), A we get anti_similar_triangles(A, H, midpoint(A, G), G, H, midpoint(A, G))
By anti_similar_triangle_basic_properties on D, E, midpoint(C, D), E, F, C we get 0 - angle(E, F, C) == angle(D, E, midpoint(C, D)) mod 360, 0 - angle(F, C, E) == angle(E, midpoint(C, D), D) mod 360, 0 - angle(C, E, F) == angle(midpoint(C, D), D, E) mod 360, log(distance(D, E)) + log(distance(C, F)) == log(distance(E, F)) + log(distance(E, midpoint(C, D))), log(distance(C, F)) + log(distance(D, midpoint(C, D))) == log(distance(E, midpoint(C, D))) + log(distance(C, E)), log(distance(C, E)) + log(distance(D, E)) == log(distance(D, midpoint(C, D))) + log(distance(E, F))
By sss_anti_similarity_v0 on H, D, F, H, D, E we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v0 on G, D, H, A, D, H we get anti_similar_triangles(A, D, H, G, D, H)
By sas_anti_congruence on D, midpoint(A, G), A, D, midpoint(A, G), G we get anti_congruent_triangles(A, D, midpoint(A, G), G, D, midpoint(A, G))
By sss_anti_congruence_v1 on D, H, A, D, H, G we get anti_congruent_triangles(A, D, H, G, D, H)
By similar_triangle_basic_properties on A, E, H, F, C, midpoint(C, D) we get angle(A, E, H) == angle(F, C, midpoint(C, D)) mod 360, angle(E, H, A) == angle(C, midpoint(C, D), F) mod 360, angle(H, A, E) == angle(midpoint(C, D), F, C) mod 360, log(distance(C, F)) + log(distance(E, H)) == log(distance(A, E)) + log(distance(C, midpoint(C, D))), log(distance(C, midpoint(C, D))) + log(distance(A, H)) == log(distance(E, H)) + log(distance(F, midpoint(C, D))), log(distance(A, H)) + log(distance(C, F)) == log(distance(F, midpoint(C, D))) + log(distance(A, E))
By sss_anti_congruence_v1 on H, D, G, H, D, A we get anti_congruent_triangles(A, D, H, G, D, H)
By between_imply_segment_sum on H, D, C we get distance(C, H) == distance(D, H) + distance(C, D)
By sas_anti_congruence on A, midpoint(A, G), C, G, midpoint(A, G), C we get anti_congruent_triangles(A, C, midpoint(A, G), G, C, midpoint(A, G))
By sss_anti_congruence_v1 on D, G, H, D, A, H we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v0 on G, D, H, A, D, H we get anti_congruent_triangles(A, D, H, G, D, H)
By aa_anti_similarity on A, D, H, G, D, H we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v0 on H, E, D, H, F, D we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v1 on H, A, D, H, G, D we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v0 on F, H, D, E, H, D we get anti_congruent_triangles(D, E, H, D, F, H)
By sas_anti_congruence on G, H, D, A, H, D we get anti_congruent_triangles(A, D, H, G, D, H)
By asa_anti_congruence on midpoint(C, D), H, F, midpoint(C, D), H, E we get anti_congruent_triangles(E, H, midpoint(C, D), F, H, midpoint(C, D))
By sss_anti_congruence_v1 on H, D, G, H, D, A we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v1 on D, E, H, D, F, H we get anti_similar_triangles(D, E, H, D, F, H)
By sas_anti_congruence on F, H, midpoint(C, D), E, H, midpoint(C, D) we get anti_congruent_triangles(E, H, midpoint(C, D), F, H, midpoint(C, D))
By collinear_definition on midpoint(C, D), midpoint(E, F), midpoint(A, G) we get midpoint(E, F) in Line(midpoint(A, G), midpoint(C, D)), midpoint(A, G) in Line(midpoint(C, D), midpoint(E, F)), Line(midpoint(A, G), midpoint(C, D)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), midpoint(C, D), midpoint(A, G)) mod 360
By sas_anti_congruence on midpoint(E, F), H, E, midpoint(E, F), H, F we get anti_congruent_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By sss_anti_similarity_v0 on D, F, H, D, E, H we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v1 on H, A, D, H, G, D we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v0 on A, H, D, G, H, D we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v0 on H, G, D, H, A, D we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v1 on E, H, D, F, H, D we get anti_similar_triangles(D, E, H, D, F, H)
By reverse_direction on midpoint(C, D), midpoint(E, F) we get 180 == direction(midpoint(C, D), midpoint(E, F)) - direction(midpoint(E, F), midpoint(C, D)) mod 360
By sss_anti_similarity_v0 on H, D, A, H, D, G we get anti_similar_triangles(A, D, H, G, D, H)
By anti_similar_triangle_basic_properties on midpoint(C, D), C, F, D, F, E we get 0 - angle(D, F, E) == angle(midpoint(C, D), C, F) mod 360, 0 - angle(F, E, D) == angle(C, F, midpoint(C, D)) mod 360, 0 - angle(E, D, F) == angle(F, midpoint(C, D), C) mod 360, log(distance(D, F)) + log(distance(C, F)) == log(distance(C, midpoint(C, D))) + log(distance(E, F)), log(distance(C, F)) + log(distance(D, E)) == log(distance(E, F)) + log(distance(F, midpoint(C, D))), log(distance(D, E)) + log(distance(C, midpoint(C, D))) == log(distance(F, midpoint(C, D))) + log(distance(D, F))
By sss_anti_similarity_v1 on H, A, D, H, G, D we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v0 on H, D, A, H, D, G we get anti_similar_triangles(A, D, H, G, D, H)
By sas_anti_similarity on G, midpoint(A, G), C, A, midpoint(A, G), C we get anti_similar_triangles(A, C, midpoint(A, G), G, C, midpoint(A, G))
By sss_anti_similarity_v1 on H, D, G, H, D, A we get anti_similar_triangles(A, D, H, G, D, H)
By sas_anti_congruence on G, H, midpoint(E, F), A, H, midpoint(E, F) we get anti_congruent_triangles(A, H, midpoint(E, F), G, H, midpoint(E, F))
By reverse_direction on G, midpoint(E, F) we get 180 == direction(G, midpoint(E, F)) - direction(midpoint(E, F), G) mod 360
By aa_anti_similarity on F, midpoint(C, D), H, E, midpoint(C, D), H we get anti_similar_triangles(E, H, midpoint(C, D), F, H, midpoint(C, D))
By sss_anti_congruence_v0 on H, D, F, H, D, E we get anti_congruent_triangles(D, E, H, D, F, H)
By sas_anti_congruence on midpoint(E, F), H, G, midpoint(E, F), H, A we get anti_congruent_triangles(A, H, midpoint(E, F), G, H, midpoint(E, F))
By sas_anti_similarity on A, H, midpoint(A, G), G, H, midpoint(A, G) we get anti_similar_triangles(A, H, midpoint(A, G), G, H, midpoint(A, G))
By sss_anti_congruence_v0 on D, H, G, D, H, A we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v0 on D, F, H, D, E, H we get anti_congruent_triangles(D, E, H, D, F, H)
By aa_anti_similarity on E, A, F, F, H, D we get anti_similar_triangles(A, E, F, H, F, D)
By collinear_definition on midpoint(E, F), midpoint(C, D), H we get midpoint(C, D) in Line(H, midpoint(E, F)), H in Line(midpoint(C, D), midpoint(E, F)), Line(H, midpoint(E, F)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(midpoint(C, D), midpoint(E, F), H) mod 360
By aa_anti_similarity on E, H, midpoint(E, F), F, H, midpoint(E, F) we get anti_similar_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By sas_anti_congruence on H, D, E, H, D, F we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v1 on D, E, H, D, F, H we get anti_similar_triangles(D, E, H, D, F, H)
By sas_anti_congruence on A, D, midpoint(A, G), G, D, midpoint(A, G) we get anti_congruent_triangles(A, D, midpoint(A, G), G, D, midpoint(A, G))
By sas_anti_similarity on midpoint(C, D), H, G, midpoint(C, D), H, A we get anti_similar_triangles(A, H, midpoint(C, D), G, H, midpoint(C, D))
By sss_anti_congruence_v0 on D, F, H, D, E, H we get anti_congruent_triangles(D, E, H, D, F, H)
By aa_anti_similarity on E, H, midpoint(C, D), F, H, midpoint(C, D) we get anti_similar_triangles(E, H, midpoint(C, D), F, H, midpoint(C, D))
By sss_anti_similarity_v0 on D, A, H, D, G, H we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v1 on F, D, H, E, D, H we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v0 on D, H, G, D, H, A we get anti_congruent_triangles(A, D, H, G, D, H)
By aa_anti_similarity on E, midpoint(E, F), H, F, midpoint(E, F), H we get anti_similar_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By aa_anti_similarity on E, midpoint(C, D), H, F, midpoint(C, D), H we get anti_similar_triangles(E, H, midpoint(C, D), F, H, midpoint(C, D))
By sss_anti_similarity_v0 on D, H, E, D, H, F we get anti_similar_triangles(D, E, H, D, F, H)
By aa_anti_similarity on A, midpoint(A, G), C, G, midpoint(A, G), C we get anti_similar_triangles(A, C, midpoint(A, G), G, C, midpoint(A, G))
By collinear_definition on H, midpoint(E, F), midpoint(C, D) we get midpoint(E, F) in Line(H, midpoint(C, D)), midpoint(C, D) in Line(H, midpoint(E, F)), Line(H, midpoint(C, D)) == Line(H, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), H, midpoint(C, D)) mod 360
By sas_anti_similarity on midpoint(A, G), C, G, midpoint(A, G), C, A we get anti_similar_triangles(A, C, midpoint(A, G), G, C, midpoint(A, G))
By sss_anti_congruence_v0 on D, H, G, D, H, A we get anti_congruent_triangles(A, D, H, G, D, H)
By aa_anti_similarity on F, H, midpoint(C, D), E, H, midpoint(C, D) we get anti_similar_triangles(E, H, midpoint(C, D), F, H, midpoint(C, D))
By sss_anti_congruence_v1 on H, A, D, H, G, D we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v1 on E, H, D, F, H, D we get anti_similar_triangles(D, E, H, D, F, H)
By sas_anti_similarity on G, C, midpoint(A, G), A, C, midpoint(A, G) we get anti_similar_triangles(A, C, midpoint(A, G), G, C, midpoint(A, G))
By aa_anti_similarity on F, midpoint(C, D), midpoint(E, F), E, midpoint(C, D), midpoint(E, F) we get anti_similar_triangles(E, midpoint(C, D), midpoint(E, F), F, midpoint(C, D), midpoint(E, F))
By sss_anti_congruence_v0 on A, H, D, G, H, D we get anti_congruent_triangles(A, D, H, G, D, H)
By asa_anti_congruence on H, D, F, H, D, E we get anti_congruent_triangles(D, E, H, D, F, H)
By isosceles_triangle_properties on midpoint(C, D), A, G we get distance(A, midpoint(C, D)) == distance(G, midpoint(C, D)), angle(A, G, midpoint(C, D)) == angle(midpoint(C, D), A, G) mod 360
By sas_anti_similarity on midpoint(C, D), H, F, midpoint(C, D), H, E we get anti_similar_triangles(E, H, midpoint(C, D), F, H, midpoint(C, D))
By sss_anti_similarity_v1 on H, D, E, H, D, F we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v0 on H, E, D, H, F, D we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v1 on D, H, F, D, H, E we get anti_congruent_triangles(D, E, H, D, F, H)
By collinear_definition on midpoint(A, G), D, H we get D in Line(H, midpoint(A, G)), H in Line(D, midpoint(A, G)), Line(D, midpoint(A, G)) == Line(H, midpoint(A, G)), 0 == 2 * angle(D, midpoint(A, G), H) mod 360
By reverse_direction on A, midpoint(C, D) we get 180 == direction(A, midpoint(C, D)) - direction(midpoint(C, D), A) mod 360
By sss_anti_congruence_v0 on H, D, A, H, D, G we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v0 on E, D, H, F, D, H we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v0 on G, D, H, A, D, H we get anti_congruent_triangles(A, D, H, G, D, H)
By sas_anti_congruence on midpoint(C, D), H, G, midpoint(C, D), H, A we get anti_congruent_triangles(A, H, midpoint(C, D), G, H, midpoint(C, D))
By sss_anti_congruence_v0 on D, A, H, D, G, H we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v0 on D, H, G, D, H, A we get anti_congruent_triangles(A, D, H, G, D, H)
By reverse_direction on midpoint(A, G), D we get 180 == direction(midpoint(A, G), D) - direction(D, midpoint(A, G)) mod 360
By sss_anti_similarity_v0 on G, D, H, A, D, H we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v0 on F, H, D, E, H, D we get anti_congruent_triangles(D, E, H, D, F, H)
By sas_anti_similarity on A, H, D, G, H, D we get anti_similar_triangles(A, D, H, G, D, H)
By sas_anti_similarity on A, H, midpoint(C, D), G, H, midpoint(C, D) we get anti_similar_triangles(A, H, midpoint(C, D), G, H, midpoint(C, D))
By aa_anti_similarity on E, H, D, F, H, D we get anti_similar_triangles(D, E, H, D, F, H)
By collinear_definition on H, D, midpoint(A, G) we get D in Line(H, midpoint(A, G)), midpoint(A, G) in Line(D, H), Line(D, H) == Line(H, midpoint(A, G)), 0 == 2 * angle(D, H, midpoint(A, G)) mod 360
By sas_anti_congruence on midpoint(A, G), C, G, midpoint(A, G), C, A we get anti_congruent_triangles(A, C, midpoint(A, G), G, C, midpoint(A, G))
By sss_anti_similarity_v1 on D, H, F, D, H, E we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v1 on H, A, D, H, G, D we get anti_congruent_triangles(A, D, H, G, D, H)
By sas_anti_similarity on D, H, E, D, H, F we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v1 on G, H, D, A, H, D we get anti_similar_triangles(A, D, H, G, D, H)
By sas_anti_congruence on A, midpoint(A, G), D, G, midpoint(A, G), D we get anti_congruent_triangles(A, D, midpoint(A, G), G, D, midpoint(A, G))
By sss_anti_similarity_v0 on D, A, H, D, G, H we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v1 on D, E, H, D, F, H we get anti_similar_triangles(D, E, H, D, F, H)
By sas_anti_congruence on F, H, D, E, H, D we get anti_congruent_triangles(D, E, H, D, F, H)
By sas_anti_similarity on H, midpoint(A, G), A, H, midpoint(A, G), G we get anti_similar_triangles(A, H, midpoint(A, G), G, H, midpoint(A, G))
By collinear_definition on midpoint(E, F), midpoint(C, D), midpoint(A, G) we get midpoint(C, D) in Line(midpoint(A, G), midpoint(E, F)), midpoint(A, G) in Line(midpoint(C, D), midpoint(E, F)), Line(midpoint(A, G), midpoint(E, F)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(midpoint(C, D), midpoint(E, F), midpoint(A, G)) mod 360
By sss_anti_congruence_v0 on H, D, A, H, D, G we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v1 on H, F, D, H, E, D we get anti_similar_triangles(D, E, H, D, F, H)
By collinear_definition on H, midpoint(C, D), midpoint(A, G) we get midpoint(C, D) in Line(H, midpoint(A, G)), midpoint(A, G) in Line(H, midpoint(C, D)), Line(H, midpoint(A, G)) == Line(H, midpoint(C, D)), 0 == 2 * angle(midpoint(C, D), H, midpoint(A, G)) mod 360
By anti_similar_triangle_basic_properties on C, midpoint(C, D), E, E, H, A we get 0 - angle(E, H, A) == angle(C, midpoint(C, D), E) mod 360, 0 - angle(H, A, E) == angle(midpoint(C, D), E, C) mod 360, 0 - angle(A, E, H) == angle(E, C, midpoint(C, D)) mod 360, log(distance(C, midpoint(C, D))) + log(distance(A, H)) == log(distance(E, H)) + log(distance(E, midpoint(C, D))), log(distance(A, H)) + log(distance(C, E)) == log(distance(E, midpoint(C, D))) + log(distance(A, E)), log(distance(C, E)) + log(distance(E, H)) == log(distance(A, E)) + log(distance(C, midpoint(C, D)))
By sas_anti_similarity on midpoint(E, F), H, E, midpoint(E, F), H, F we get anti_similar_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By sas_anti_similarity on D, H, F, D, H, E we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v1 on D, E, H, D, F, H we get anti_congruent_triangles(D, E, H, D, F, H)
By aa_anti_similarity on G, midpoint(A, G), D, A, midpoint(A, G), D we get anti_similar_triangles(A, D, midpoint(A, G), G, D, midpoint(A, G))
By sas_anti_congruence on F, H, midpoint(E, F), E, H, midpoint(E, F) we get anti_congruent_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By sss_anti_similarity_v1 on D, H, A, D, H, G we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v0 on D, A, H, D, G, H we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v0 on F, H, D, E, H, D we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v0 on H, G, D, H, A, D we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v1 on D, H, F, D, H, E we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v1 on H, D, E, H, D, F we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v0 on D, H, E, D, H, F we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v1 on A, D, H, G, D, H we get anti_similar_triangles(A, D, H, G, D, H)
By sas_anti_congruence on A, C, midpoint(A, G), G, C, midpoint(A, G) we get anti_congruent_triangles(A, C, midpoint(A, G), G, C, midpoint(A, G))
By collinear_definition on midpoint(C, D), H, midpoint(E, F) we get H in Line(midpoint(C, D), midpoint(E, F)), midpoint(E, F) in Line(H, midpoint(C, D)), Line(H, midpoint(C, D)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(H, midpoint(C, D), midpoint(E, F)) mod 360
By aa_anti_similarity on G, C, midpoint(A, G), A, C, midpoint(A, G) we get anti_similar_triangles(A, C, midpoint(A, G), G, C, midpoint(A, G))
By collinear_definition on midpoint(E, F), midpoint(A, G), midpoint(C, D) we get midpoint(A, G) in Line(midpoint(C, D), midpoint(E, F)), midpoint(C, D) in Line(midpoint(A, G), midpoint(E, F)), Line(midpoint(A, G), midpoint(E, F)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(midpoint(A, G), midpoint(E, F), midpoint(C, D)) mod 360
By asa_anti_congruence on C, midpoint(A, G), A, C, midpoint(A, G), G we get anti_congruent_triangles(A, C, midpoint(A, G), G, C, midpoint(A, G))
By sss_anti_similarity_v1 on F, D, H, E, D, H we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v1 on D, E, H, D, F, H we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v1 on D, E, H, D, F, H we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v1 on H, D, G, H, D, A we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v1 on H, F, D, H, E, D we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v0 on H, D, F, H, D, E we get anti_congruent_triangles(D, E, H, D, F, H)
By sas_anti_congruence on midpoint(A, G), C, A, midpoint(A, G), C, G we get anti_congruent_triangles(A, C, midpoint(A, G), G, C, midpoint(A, G))
By sas_anti_similarity on midpoint(A, G), D, A, midpoint(A, G), D, G we get anti_similar_triangles(A, D, midpoint(A, G), G, D, midpoint(A, G))
By sss_anti_congruence_v1 on G, H, D, A, H, D we get anti_congruent_triangles(A, D, H, G, D, H)
By aa_similarity on F, G, E, F, H, D we get similar_triangles(D, F, H, E, F, G)
By sss_anti_similarity_v0 on E, D, H, F, D, H we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v1 on G, H, D, A, H, D we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v1 on H, D, E, H, D, F we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v1 on D, G, H, D, A, H we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v1 on G, H, D, A, H, D we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v1 on H, F, D, H, E, D we get anti_similar_triangles(D, E, H, D, F, H)
By sas_anti_congruence on A, H, midpoint(A, G), G, H, midpoint(A, G) we get anti_congruent_triangles(A, H, midpoint(A, G), G, H, midpoint(A, G))
By sas_anti_congruence on G, midpoint(A, G), H, A, midpoint(A, G), H we get anti_congruent_triangles(A, H, midpoint(A, G), G, H, midpoint(A, G))
By sas_anti_congruence on C, midpoint(A, G), A, C, midpoint(A, G), G we get anti_congruent_triangles(A, C, midpoint(A, G), G, C, midpoint(A, G))
By sss_anti_similarity_v1 on D, H, A, D, H, G we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v0 on D, H, E, D, H, F we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v0 on H, D, F, H, D, E we get anti_similar_triangles(D, E, H, D, F, H)
By sas_anti_congruence on D, H, F, D, H, E we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v1 on H, F, D, H, E, D we get anti_congruent_triangles(D, E, H, D, F, H)
By sas_anti_congruence on F, D, H, E, D, H we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v0 on H, D, F, H, D, E we get anti_congruent_triangles(D, E, H, D, F, H)
By aa_anti_similarity on E, H, D, F, G, E we get anti_similar_triangles(D, E, H, E, F, G)
By sss_anti_similarity_v0 on G, D, H, A, D, H we get anti_similar_triangles(A, D, H, G, D, H)
By aa_anti_similarity on G, midpoint(A, G), H, A, midpoint(A, G), H we get anti_similar_triangles(A, H, midpoint(A, G), G, H, midpoint(A, G))
By sss_anti_congruence_v1 on H, F, D, H, E, D we get anti_congruent_triangles(D, E, H, D, F, H)
By sas_anti_congruence on G, D, midpoint(A, G), A, D, midpoint(A, G) we get anti_congruent_triangles(A, D, midpoint(A, G), G, D, midpoint(A, G))
By sss_anti_similarity_v0 on A, H, D, G, H, D we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v1 on D, H, A, D, H, G we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v1 on H, D, G, H, D, A we get anti_similar_triangles(A, D, H, G, D, H)
By aa_similarity on F, H, D, F, G, E we get similar_triangles(D, F, H, E, F, G)
By sas_anti_congruence on midpoint(C, D), H, F, midpoint(C, D), H, E we get anti_congruent_triangles(E, H, midpoint(C, D), F, H, midpoint(C, D))
By aa_anti_similarity on F, D, H, E, D, H we get anti_similar_triangles(D, E, H, D, F, H)
By sas_anti_similarity on D, midpoint(A, G), G, D, midpoint(A, G), A we get anti_similar_triangles(A, D, midpoint(A, G), G, D, midpoint(A, G))
By sss_anti_similarity_v0 on D, A, H, D, G, H we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v0 on F, H, D, E, H, D we get anti_similar_triangles(D, E, H, D, F, H)
By sas_anti_similarity on F, D, H, E, D, H we get anti_similar_triangles(D, E, H, D, F, H)
By sas_anti_similarity on C, midpoint(A, G), A, C, midpoint(A, G), G we get anti_similar_triangles(A, C, midpoint(A, G), G, C, midpoint(A, G))
By aa_anti_similarity on F, H, midpoint(E, F), E, H, midpoint(E, F) we get anti_similar_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By sss_anti_similarity_v1 on A, D, H, G, D, H we get anti_similar_triangles(A, D, H, G, D, H)
By sas_anti_congruence on G, C, midpoint(A, G), A, C, midpoint(A, G) we get anti_congruent_triangles(A, C, midpoint(A, G), G, C, midpoint(A, G))
By sss_anti_congruence_v1 on A, D, H, G, D, H we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v0 on E, D, H, F, D, H we get anti_congruent_triangles(D, E, H, D, F, H)
By sas_anti_similarity on A, midpoint(A, G), H, G, midpoint(A, G), H we get anti_similar_triangles(A, H, midpoint(A, G), G, H, midpoint(A, G))
By reverse_direction on midpoint(E, F), A we get 180 == direction(midpoint(E, F), A) - direction(A, midpoint(E, F)) mod 360
By aa_anti_similarity on G, H, midpoint(A, G), A, H, midpoint(A, G) we get anti_similar_triangles(A, H, midpoint(A, G), G, H, midpoint(A, G))
By sas_anti_similarity on midpoint(E, F), H, G, midpoint(E, F), H, A we get anti_similar_triangles(A, H, midpoint(E, F), G, H, midpoint(E, F))
By sss_anti_congruence_v1 on H, D, E, H, D, F we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v1 on H, D, G, H, D, A we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v1 on H, F, D, H, E, D we get anti_similar_triangles(D, E, H, D, F, H)
By anti_similar_triangle_basic_properties on C, midpoint(C, D), E, E, D, F we get 0 - angle(E, D, F) == angle(C, midpoint(C, D), E) mod 360, 0 - angle(D, F, E) == angle(midpoint(C, D), E, C) mod 360, 0 - angle(F, E, D) == angle(E, C, midpoint(C, D)) mod 360, log(distance(C, midpoint(C, D))) + log(distance(D, F)) == log(distance(D, E)) + log(distance(E, midpoint(C, D))), log(distance(D, F)) + log(distance(C, E)) == log(distance(E, midpoint(C, D))) + log(distance(E, F)), log(distance(C, E)) + log(distance(D, E)) == log(distance(E, F)) + log(distance(C, midpoint(C, D)))
By sss_anti_similarity_v1 on D, G, H, D, A, H we get anti_similar_triangles(A, D, H, G, D, H)
By sas_anti_similarity on G, midpoint(A, G), H, A, midpoint(A, G), H we get anti_similar_triangles(A, H, midpoint(A, G), G, H, midpoint(A, G))
By asa_anti_congruence on H, midpoint(E, F), F, H, midpoint(E, F), E we get anti_congruent_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By sas_anti_congruence on A, D, H, G, D, H we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v0 on E, D, H, F, D, H we get anti_congruent_triangles(D, E, H, D, F, H)
By sas_anti_congruence on E, midpoint(C, D), H, F, midpoint(C, D), H we get anti_congruent_triangles(E, H, midpoint(C, D), F, H, midpoint(C, D))
By sas_anti_similarity on midpoint(A, G), C, A, midpoint(A, G), C, G we get anti_similar_triangles(A, C, midpoint(A, G), G, C, midpoint(A, G))
By collinear_definition on midpoint(A, G), H, D we get H in Line(D, midpoint(A, G)), D in Line(H, midpoint(A, G)), Line(D, midpoint(A, G)) == Line(H, midpoint(A, G)), 0 == 2 * angle(H, midpoint(A, G), D) mod 360
By sas_anti_congruence on H, midpoint(A, G), A, H, midpoint(A, G), G we get anti_congruent_triangles(A, H, midpoint(A, G), G, H, midpoint(A, G))
By sss_anti_congruence_v0 on D, H, E, D, H, F we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v1 on H, A, D, H, G, D we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v0 on G, D, H, A, D, H we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v0 on D, A, H, D, G, H we get anti_congruent_triangles(A, D, H, G, D, H)
By sas_anti_congruence on midpoint(A, G), D, G, midpoint(A, G), D, A we get anti_congruent_triangles(A, D, midpoint(A, G), G, D, midpoint(A, G))
By sss_anti_congruence_v1 on H, A, D, H, G, D we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v1 on H, A, D, H, G, D we get anti_similar_triangles(A, D, H, G, D, H)
By collinear_definition on H, midpoint(A, G), D we get midpoint(A, G) in Line(D, H), D in Line(H, midpoint(A, G)), Line(D, H) == Line(H, midpoint(A, G)), 0 == 2 * angle(midpoint(A, G), H, D) mod 360
By sas_anti_congruence on H, D, G, H, D, A we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v0 on D, H, G, D, H, A we get anti_congruent_triangles(A, D, H, G, D, H)
By aa_anti_similarity on G, D, midpoint(A, G), A, D, midpoint(A, G) we get anti_similar_triangles(A, D, midpoint(A, G), G, D, midpoint(A, G))
By sss_anti_similarity_v1 on H, D, E, H, D, F we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v0 on H, G, D, H, A, D we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v0 on D, H, E, D, H, F we get anti_congruent_triangles(D, E, H, D, F, H)
By sas_anti_congruence on A, H, midpoint(C, D), G, H, midpoint(C, D) we get anti_congruent_triangles(A, H, midpoint(C, D), G, H, midpoint(C, D))
By sss_anti_congruence_v0 on D, A, H, D, G, H we get anti_congruent_triangles(A, D, H, G, D, H)
By reverse_direction on midpoint(E, F), G we get 180 == direction(midpoint(E, F), G) - direction(G, midpoint(E, F)) mod 360
By sas_anti_similarity on midpoint(C, D), H, E, midpoint(C, D), H, F we get anti_similar_triangles(E, H, midpoint(C, D), F, H, midpoint(C, D))
By reverse_direction on midpoint(A, G), midpoint(C, D) we get 180 == direction(midpoint(A, G), midpoint(C, D)) - direction(midpoint(C, D), midpoint(A, G)) mod 360
By collinear_definition on midpoint(A, G), midpoint(E, F), H we get midpoint(E, F) in Line(H, midpoint(A, G)), H in Line(midpoint(A, G), midpoint(E, F)), Line(H, midpoint(A, G)) == Line(midpoint(A, G), midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), midpoint(A, G), H) mod 360
By sss_anti_similarity_v1 on G, H, D, A, H, D we get anti_similar_triangles(A, D, H, G, D, H)
By isosceles_triangle_properties on midpoint(E, F), A, G we get distance(A, midpoint(E, F)) == distance(G, midpoint(E, F)), angle(A, G, midpoint(E, F)) == angle(midpoint(E, F), A, G) mod 360
By sas_anti_similarity on E, H, D, F, H, D we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v0 on H, D, A, H, D, G we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v1 on D, G, H, D, A, H we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v0 on E, D, H, F, D, H we get anti_congruent_triangles(D, E, H, D, F, H)
By reverse_direction on midpoint(C, D), G we get 180 == direction(midpoint(C, D), G) - direction(G, midpoint(C, D)) mod 360
By sas_anti_similarity on midpoint(A, G), D, G, midpoint(A, G), D, A we get anti_similar_triangles(A, D, midpoint(A, G), G, D, midpoint(A, G))
By asa_anti_congruence on midpoint(E, F), H, F, midpoint(E, F), H, E we get anti_congruent_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By aa_anti_similarity on G, H, D, A, H, D we get anti_similar_triangles(A, D, H, G, D, H)
By sas_anti_similarity on G, midpoint(A, G), D, A, midpoint(A, G), D we get anti_similar_triangles(A, D, midpoint(A, G), G, D, midpoint(A, G))
By sas_anti_similarity on H, midpoint(E, F), F, H, midpoint(E, F), E we get anti_similar_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By sss_anti_similarity_v1 on D, G, H, D, A, H we get anti_similar_triangles(A, D, H, G, D, H)
By sas_anti_congruence on D, H, E, D, H, F we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v0 on H, D, A, H, D, G we get anti_similar_triangles(A, D, H, G, D, H)
By sas_anti_similarity on D, midpoint(A, G), A, D, midpoint(A, G), G we get anti_similar_triangles(A, D, midpoint(A, G), G, D, midpoint(A, G))
By sss_anti_congruence_v1 on A, D, H, G, D, H we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v0 on D, F, H, D, E, H we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v0 on F, H, D, E, H, D we get anti_similar_triangles(D, E, H, D, F, H)
By reverse_direction on A, midpoint(E, F) we get 180 == direction(A, midpoint(E, F)) - direction(midpoint(E, F), A) mod 360
By sss_anti_similarity_v0 on H, G, D, H, A, D we get anti_similar_triangles(A, D, H, G, D, H)
By sas_anti_similarity on F, H, midpoint(E, F), E, H, midpoint(E, F) we get anti_similar_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By sss_anti_congruence_v1 on H, F, D, H, E, D we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v1 on H, D, G, H, D, A we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v0 on F, H, D, E, H, D we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v1 on H, A, D, H, G, D we get anti_congruent_triangles(A, D, H, G, D, H)
By aa_anti_similarity on F, G, E, E, H, D we get anti_similar_triangles(D, E, H, E, F, G)
By sss_anti_similarity_v1 on H, D, G, H, D, A we get anti_similar_triangles(A, D, H, G, D, H)
By sas_anti_congruence on E, H, D, F, H, D we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v1 on A, D, H, G, D, H we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v1 on G, H, D, A, H, D we get anti_congruent_triangles(A, D, H, G, D, H)
By sas_anti_congruence on midpoint(A, G), D, A, midpoint(A, G), D, G we get anti_congruent_triangles(A, D, midpoint(A, G), G, D, midpoint(A, G))
By sss_anti_congruence_v0 on D, H, E, D, H, F we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v1 on F, D, H, E, D, H we get anti_congruent_triangles(D, E, H, D, F, H)
By sas_anti_similarity on midpoint(A, G), H, G, midpoint(A, G), H, A we get anti_similar_triangles(A, H, midpoint(A, G), G, H, midpoint(A, G))
By sss_anti_congruence_v0 on D, H, E, D, H, F we get anti_congruent_triangles(D, E, H, D, F, H)
By reverse_direction on C, midpoint(A, G) we get 180 == direction(C, midpoint(A, G)) - direction(midpoint(A, G), C) mod 360
By aa_anti_similarity on F, E, G, E, D, H we get anti_similar_triangles(D, E, H, E, F, G)
By asa_anti_congruence on D, H, F, D, H, E we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v1 on H, D, E, H, D, F we get anti_congruent_triangles(D, E, H, D, F, H)
By aa_anti_similarity on A, H, D, G, H, D we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v0 on F, H, D, E, H, D we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v1 on E, H, D, F, H, D we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v1 on A, D, H, G, D, H we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v0 on F, H, D, E, H, D we get anti_congruent_triangles(D, E, H, D, F, H)
By sas_anti_congruence on F, midpoint(E, F), H, E, midpoint(E, F), H we get anti_congruent_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By sss_anti_congruence_v1 on D, H, A, D, H, G we get anti_congruent_triangles(A, D, H, G, D, H)
By sas_anti_congruence on E, H, midpoint(C, D), F, H, midpoint(C, D) we get anti_congruent_triangles(E, H, midpoint(C, D), F, H, midpoint(C, D))
By sas_anti_congruence on H, midpoint(C, D), F, H, midpoint(C, D), E we get anti_congruent_triangles(E, H, midpoint(C, D), F, H, midpoint(C, D))
By aa_anti_similarity on A, midpoint(A, G), H, G, midpoint(A, G), H we get anti_similar_triangles(A, H, midpoint(A, G), G, H, midpoint(A, G))
By sss_anti_similarity_v0 on D, A, H, D, G, H we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v1 on D, G, H, D, A, H we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v0 on H, D, A, H, D, G we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v0 on H, D, A, H, D, G we get anti_congruent_triangles(A, D, H, G, D, H)
By sas_anti_similarity on A, H, midpoint(E, F), G, H, midpoint(E, F) we get anti_similar_triangles(A, H, midpoint(E, F), G, H, midpoint(E, F))
By sas_anti_congruence on H, midpoint(E, F), F, H, midpoint(E, F), E we get anti_congruent_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By sss_anti_congruence_v0 on D, F, H, D, E, H we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v0 on D, A, H, D, G, H we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v1 on F, D, H, E, D, H we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v0 on H, E, D, H, F, D we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v1 on D, G, H, D, A, H we get anti_congruent_triangles(A, D, H, G, D, H)
By sas_anti_congruence on A, H, D, G, H, D we get anti_congruent_triangles(A, D, H, G, D, H)
By asa_anti_congruence on D, H, E, D, H, F we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v0 on H, D, A, H, D, G we get anti_similar_triangles(A, D, H, G, D, H)
By asa_anti_congruence on midpoint(A, G), H, A, midpoint(A, G), H, G we get anti_congruent_triangles(A, H, midpoint(A, G), G, H, midpoint(A, G))
By sss_anti_similarity_v1 on H, A, D, H, G, D we get anti_similar_triangles(A, D, H, G, D, H)
By collinear_definition on H, midpoint(A, G), midpoint(C, D) we get midpoint(A, G) in Line(H, midpoint(C, D)), midpoint(C, D) in Line(H, midpoint(A, G)), Line(H, midpoint(A, G)) == Line(H, midpoint(C, D)), 0 == 2 * angle(midpoint(A, G), H, midpoint(C, D)) mod 360
By sas_anti_congruence on H, midpoint(E, F), E, H, midpoint(E, F), F we get anti_congruent_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By sss_anti_congruence_v1 on D, H, A, D, H, G we get anti_congruent_triangles(A, D, H, G, D, H)
By sas_anti_similarity on midpoint(C, D), H, A, midpoint(C, D), H, G we get anti_similar_triangles(A, H, midpoint(C, D), G, H, midpoint(C, D))
By sss_anti_congruence_v1 on A, D, H, G, D, H we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v0 on D, A, H, D, G, H we get anti_similar_triangles(A, D, H, G, D, H)
By sas_anti_similarity on G, D, midpoint(A, G), A, D, midpoint(A, G) we get anti_similar_triangles(A, D, midpoint(A, G), G, D, midpoint(A, G))
By reverse_direction on midpoint(C, D), A we get 180 == direction(midpoint(C, D), A) - direction(A, midpoint(C, D)) mod 360
By sss_anti_congruence_v1 on D, H, A, D, H, G we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v0 on G, D, H, A, D, H we get anti_congruent_triangles(A, D, H, G, D, H)
By sas_anti_similarity on C, midpoint(A, G), G, C, midpoint(A, G), A we get anti_similar_triangles(A, C, midpoint(A, G), G, C, midpoint(A, G))
By aa_similarity on E, A, F, E, H, D we get similar_triangles(A, E, F, H, E, D)
By sss_anti_congruence_v1 on A, D, H, G, D, H we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v0 on G, D, H, A, D, H we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v0 on D, F, H, D, E, H we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v0 on H, G, D, H, A, D we get anti_congruent_triangles(A, D, H, G, D, H)
By sas_anti_similarity on D, H, A, D, H, G we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v0 on D, H, G, D, H, A we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v0 on F, H, D, E, H, D we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v1 on D, G, H, D, A, H we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v1 on H, D, G, H, D, A we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v1 on G, H, D, A, H, D we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v0 on D, H, G, D, H, A we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v1 on H, F, D, H, E, D we get anti_similar_triangles(D, E, H, D, F, H)
By sas_anti_similarity on E, midpoint(E, F), H, F, midpoint(E, F), H we get anti_similar_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By sas_anti_similarity on E, H, midpoint(E, F), F, H, midpoint(E, F) we get anti_similar_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By sss_anti_similarity_v1 on D, E, H, D, F, H we get anti_similar_triangles(D, E, H, D, F, H)
By sas_anti_similarity on E, H, midpoint(C, D), F, H, midpoint(C, D) we get anti_similar_triangles(E, H, midpoint(C, D), F, H, midpoint(C, D))
By sas_anti_similarity on H, midpoint(C, D), F, H, midpoint(C, D), E we get anti_similar_triangles(E, H, midpoint(C, D), F, H, midpoint(C, D))
By sss_anti_congruence_v0 on H, D, A, H, D, G we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v1 on A, D, H, G, D, H we get anti_similar_triangles(A, D, H, G, D, H)
By aa_anti_similarity on E, midpoint(E, F), midpoint(C, D), F, midpoint(E, F), midpoint(C, D) we get anti_similar_triangles(E, midpoint(C, D), midpoint(E, F), F, midpoint(C, D), midpoint(E, F))
By sas_anti_congruence on A, midpoint(A, G), H, G, midpoint(A, G), H we get anti_congruent_triangles(A, H, midpoint(A, G), G, H, midpoint(A, G))
By sss_anti_congruence_v0 on D, A, H, D, G, H we get anti_congruent_triangles(A, D, H, G, D, H)
By aa_anti_similarity on G, D, H, A, D, H we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v1 on G, H, D, A, H, D we get anti_congruent_triangles(A, D, H, G, D, H)
By sas_anti_congruence on F, midpoint(C, D), H, E, midpoint(C, D), H we get anti_congruent_triangles(E, H, midpoint(C, D), F, H, midpoint(C, D))
By sas_anti_similarity on G, H, midpoint(C, D), A, H, midpoint(C, D) we get anti_similar_triangles(A, H, midpoint(C, D), G, H, midpoint(C, D))
By sas_anti_similarity on H, D, A, H, D, G we get anti_similar_triangles(A, D, H, G, D, H)
By collinear_definition on H, midpoint(E, F), midpoint(A, G) we get midpoint(E, F) in Line(H, midpoint(A, G)), midpoint(A, G) in Line(H, midpoint(E, F)), Line(H, midpoint(A, G)) == Line(H, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), H, midpoint(A, G)) mod 360
By asa_anti_congruence on H, midpoint(A, G), A, H, midpoint(A, G), G we get anti_congruent_triangles(A, H, midpoint(A, G), G, H, midpoint(A, G))
By sss_anti_congruence_v1 on E, H, D, F, H, D we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v0 on D, H, E, D, H, F we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v0 on D, A, H, D, G, H we get anti_congruent_triangles(A, D, H, G, D, H)
By sas_anti_similarity on midpoint(A, G), H, A, midpoint(A, G), H, G we get anti_similar_triangles(A, H, midpoint(A, G), G, H, midpoint(A, G))
By sas_anti_congruence on A, H, midpoint(E, F), G, H, midpoint(E, F) we get anti_congruent_triangles(A, H, midpoint(E, F), G, H, midpoint(E, F))
By collinear_definition on midpoint(C, D), midpoint(A, G), H we get midpoint(A, G) in Line(H, midpoint(C, D)), H in Line(midpoint(A, G), midpoint(C, D)), Line(H, midpoint(C, D)) == Line(midpoint(A, G), midpoint(C, D)), 0 == 2 * angle(midpoint(A, G), midpoint(C, D), H) mod 360
By sss_anti_similarity_v1 on F, D, H, E, D, H we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v1 on D, H, F, D, H, E we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v0 on E, D, H, F, D, H we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v0 on G, D, H, A, D, H we get anti_similar_triangles(A, D, H, G, D, H)
By sas_anti_similarity on F, midpoint(C, D), H, E, midpoint(C, D), H we get anti_similar_triangles(E, H, midpoint(C, D), F, H, midpoint(C, D))
By sss_anti_congruence_v0 on E, D, H, F, D, H we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v0 on H, D, F, H, D, E we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v1 on D, H, F, D, H, E we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v1 on D, G, H, D, A, H we get anti_congruent_triangles(A, D, H, G, D, H)
By sas_anti_similarity on H, midpoint(C, D), E, H, midpoint(C, D), F we get anti_similar_triangles(E, H, midpoint(C, D), F, H, midpoint(C, D))
By aa_anti_similarity on F, midpoint(E, F), H, E, midpoint(E, F), H we get anti_similar_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By sss_anti_similarity_v0 on H, G, D, H, A, D we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v1 on A, D, H, G, D, H we get anti_congruent_triangles(A, D, H, G, D, H)
By sas_anti_congruence on G, H, midpoint(C, D), A, H, midpoint(C, D) we get anti_congruent_triangles(A, H, midpoint(C, D), G, H, midpoint(C, D))
By sss_anti_similarity_v1 on G, H, D, A, H, D we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v1 on D, H, F, D, H, E we get anti_congruent_triangles(D, E, H, D, F, H)
By sas_anti_similarity on E, D, H, F, D, H we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v0 on H, D, F, H, D, E we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v0 on A, H, D, G, H, D we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v1 on E, H, D, F, H, D we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v1 on D, G, H, D, A, H we get anti_congruent_triangles(A, D, H, G, D, H)
By sas_anti_congruence on midpoint(E, F), H, A, midpoint(E, F), H, G we get anti_congruent_triangles(A, H, midpoint(E, F), G, H, midpoint(E, F))
By sas_anti_congruence on midpoint(C, D), H, A, midpoint(C, D), H, G we get anti_congruent_triangles(A, H, midpoint(C, D), G, H, midpoint(C, D))
By reverse_direction on midpoint(A, G), H we get 180 == direction(midpoint(A, G), H) - direction(H, midpoint(A, G)) mod 360
By sss_anti_congruence_v0 on H, D, A, H, D, G we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v0 on A, H, D, G, H, D we get anti_similar_triangles(A, D, H, G, D, H)
By aa_anti_similarity on G, midpoint(A, G), C, A, midpoint(A, G), C we get anti_similar_triangles(A, C, midpoint(A, G), G, C, midpoint(A, G))
By sss_anti_similarity_v0 on H, E, D, H, F, D we get anti_similar_triangles(D, E, H, D, F, H)
By collinear_definition on midpoint(C, D), midpoint(A, G), midpoint(E, F) we get midpoint(A, G) in Line(midpoint(C, D), midpoint(E, F)), midpoint(E, F) in Line(midpoint(A, G), midpoint(C, D)), Line(midpoint(A, G), midpoint(C, D)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(midpoint(A, G), midpoint(C, D), midpoint(E, F)) mod 360
By sss_anti_congruence_v1 on D, E, H, D, F, H we get anti_congruent_triangles(D, E, H, D, F, H)
By reverse_direction on midpoint(E, F), H we get 180 == direction(midpoint(E, F), H) - direction(H, midpoint(E, F)) mod 360
By sss_anti_similarity_v1 on E, H, D, F, H, D we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v1 on H, A, D, H, G, D we get anti_similar_triangles(A, D, H, G, D, H)
By asa_anti_congruence on H, D, G, H, D, A we get anti_congruent_triangles(A, D, H, G, D, H)
By sas_anti_similarity on H, D, E, H, D, F we get anti_similar_triangles(D, E, H, D, F, H)
By sas_anti_similarity on A, D, H, G, D, H we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v1 on D, H, F, D, H, E we get anti_similar_triangles(D, E, H, D, F, H)
By sas_anti_similarity on H, D, G, H, D, A we get anti_similar_triangles(A, D, H, G, D, H)
By sas_anti_congruence on H, midpoint(A, G), G, H, midpoint(A, G), A we get anti_congruent_triangles(A, H, midpoint(A, G), G, H, midpoint(A, G))
By sss_anti_congruence_v1 on H, D, G, H, D, A we get anti_congruent_triangles(A, D, H, G, D, H)
By asa_anti_congruence on midpoint(E, F), H, E, midpoint(E, F), H, F we get anti_congruent_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By sss_anti_congruence_v0 on H, E, D, H, F, D we get anti_congruent_triangles(D, E, H, D, F, H)
By isosceles_triangle_properties on midpoint(E, F), G, A we get distance(A, midpoint(E, F)) == distance(G, midpoint(E, F)), angle(G, A, midpoint(E, F)) == angle(midpoint(E, F), G, A) mod 360
By sss_anti_congruence_v1 on D, H, A, D, H, G we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v0 on D, H, G, D, H, A we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v1 on H, D, G, H, D, A we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v0 on H, G, D, H, A, D we get anti_similar_triangles(A, D, H, G, D, H)
By sas_anti_congruence on H, midpoint(C, D), E, H, midpoint(C, D), F we get anti_congruent_triangles(E, H, midpoint(C, D), F, H, midpoint(C, D))
By sas_anti_similarity on F, H, D, E, H, D we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v1 on F, D, H, E, D, H we get anti_congruent_triangles(D, E, H, D, F, H)
By sas_anti_similarity on A, D, midpoint(A, G), G, D, midpoint(A, G) we get anti_similar_triangles(A, D, midpoint(A, G), G, D, midpoint(A, G))
By sss_anti_similarity_v1 on H, D, E, H, D, F we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v0 on E, D, H, F, D, H we get anti_similar_triangles(D, E, H, D, F, H)
By collinear_definition on H, midpoint(C, D), midpoint(E, F) we get midpoint(C, D) in Line(H, midpoint(E, F)), midpoint(E, F) in Line(H, midpoint(C, D)), Line(H, midpoint(C, D)) == Line(H, midpoint(E, F)), 0 == 2 * angle(midpoint(C, D), H, midpoint(E, F)) mod 360
By sss_anti_congruence_v1 on H, D, E, H, D, F we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v0 on D, H, E, D, H, F we get anti_similar_triangles(D, E, H, D, F, H)
By sas_anti_similarity on A, midpoint(A, G), C, G, midpoint(A, G), C we get anti_similar_triangles(A, C, midpoint(A, G), G, C, midpoint(A, G))
By sss_anti_congruence_v1 on D, E, H, D, F, H we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v1 on F, D, H, E, D, H we get anti_congruent_triangles(D, E, H, D, F, H)
By asa_anti_congruence on midpoint(A, G), C, G, midpoint(A, G), C, A we get anti_congruent_triangles(A, C, midpoint(A, G), G, C, midpoint(A, G))
By sss_anti_similarity_v0 on E, D, H, F, D, H we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v1 on E, H, D, F, H, D we get anti_similar_triangles(D, E, H, D, F, H)
By aa_anti_similarity on F, D, H, E, F, A we get anti_similar_triangles(A, E, F, H, F, D)
By reverse_direction on H, midpoint(E, F) we get 180 == direction(H, midpoint(E, F)) - direction(midpoint(E, F), H) mod 360
By sss_anti_similarity_v0 on G, D, H, A, D, H we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v0 on D, F, H, D, E, H we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v0 on E, D, H, F, D, H we get anti_similar_triangles(D, E, H, D, F, H)
By sas_anti_congruence on E, H, midpoint(E, F), F, H, midpoint(E, F) we get anti_congruent_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By sss_anti_similarity_v1 on D, H, A, D, H, G we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v1 on H, F, D, H, E, D we get anti_similar_triangles(D, E, H, D, F, H)
By aa_anti_similarity on A, H, midpoint(A, G), G, H, midpoint(A, G) we get anti_similar_triangles(A, H, midpoint(A, G), G, H, midpoint(A, G))
By asa_anti_congruence on midpoint(A, G), D, G, midpoint(A, G), D, A we get anti_congruent_triangles(A, D, midpoint(A, G), G, D, midpoint(A, G))
By asa_anti_congruence on D, midpoint(A, G), A, D, midpoint(A, G), G we get anti_congruent_triangles(A, D, midpoint(A, G), G, D, midpoint(A, G))
By reverse_direction on D, midpoint(A, G) we get 180 == direction(D, midpoint(A, G)) - direction(midpoint(A, G), D) mod 360
By collinear_definition on midpoint(E, F), midpoint(A, G), H we get midpoint(A, G) in Line(H, midpoint(E, F)), H in Line(midpoint(A, G), midpoint(E, F)), Line(H, midpoint(E, F)) == Line(midpoint(A, G), midpoint(E, F)), 0 == 2 * angle(midpoint(A, G), midpoint(E, F), H) mod 360
By sss_anti_similarity_v0 on F, H, D, E, H, D we get anti_similar_triangles(D, E, H, D, F, H)
By asa_anti_congruence on midpoint(A, G), C, A, midpoint(A, G), C, G we get anti_congruent_triangles(A, C, midpoint(A, G), G, C, midpoint(A, G))
By sas_anti_similarity on H, D, F, H, D, E we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v0 on H, G, D, H, A, D we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v0 on A, H, D, G, H, D we get anti_similar_triangles(A, D, H, G, D, H)
By sas_anti_congruence on C, midpoint(A, G), G, C, midpoint(A, G), A we get anti_congruent_triangles(A, C, midpoint(A, G), G, C, midpoint(A, G))
By sss_anti_similarity_v1 on D, H, A, D, H, G we get anti_similar_triangles(A, D, H, G, D, H)
By aa_anti_similarity on E, D, H, F, D, H we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v1 on E, H, D, F, H, D we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v1 on D, H, F, D, H, E we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v0 on A, H, D, G, H, D we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v0 on H, G, D, H, A, D we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v0 on H, E, D, H, F, D we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v1 on A, D, H, G, D, H we get anti_similar_triangles(A, D, H, G, D, H)
By reverse_direction on G, midpoint(C, D) we get 180 == direction(G, midpoint(C, D)) - direction(midpoint(C, D), G) mod 360
By sss_anti_similarity_v0 on D, H, G, D, H, A we get anti_similar_triangles(A, D, H, G, D, H)
By asa_anti_congruence on H, midpoint(C, D), E, H, midpoint(C, D), F we get anti_congruent_triangles(E, H, midpoint(C, D), F, H, midpoint(C, D))
By aa_anti_similarity on F, H, D, E, H, D we get anti_similar_triangles(D, E, H, D, F, H)
By sas_anti_similarity on midpoint(E, F), H, F, midpoint(E, F), H, E we get anti_similar_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By sss_anti_similarity_v1 on D, H, F, D, H, E we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v0 on F, H, D, E, H, D we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v0 on H, E, D, H, F, D we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v1 on E, H, D, F, H, D we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v0 on D, H, G, D, H, A we get anti_similar_triangles(A, D, H, G, D, H)
By sas_anti_similarity on G, H, midpoint(E, F), A, H, midpoint(E, F) we get anti_similar_triangles(A, H, midpoint(E, F), G, H, midpoint(E, F))
By asa_anti_congruence on D, H, A, D, H, G we get anti_congruent_triangles(A, D, H, G, D, H)
By asa_anti_congruence on C, midpoint(A, G), G, C, midpoint(A, G), A we get anti_congruent_triangles(A, C, midpoint(A, G), G, C, midpoint(A, G))
By aa_similarity on E, H, D, E, A, F we get similar_triangles(A, E, F, H, E, D)
By sss_anti_similarity_v0 on D, F, H, D, E, H we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v1 on D, G, H, D, A, H we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v0 on E, D, H, F, D, H we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v0 on D, H, E, D, H, F we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v1 on D, E, H, D, F, H we get anti_congruent_triangles(D, E, H, D, F, H)
By sas_anti_similarity on D, H, G, D, H, A we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v1 on D, H, F, D, H, E we get anti_similar_triangles(D, E, H, D, F, H)
By asa_anti_congruence on midpoint(A, G), D, A, midpoint(A, G), D, G we get anti_congruent_triangles(A, D, midpoint(A, G), G, D, midpoint(A, G))
By aa_similarity on F, E, G, F, D, H we get similar_triangles(D, F, H, E, F, G)
By collinear_definition on midpoint(A, G), H, midpoint(C, D) we get H in Line(midpoint(A, G), midpoint(C, D)), midpoint(C, D) in Line(H, midpoint(A, G)), Line(H, midpoint(A, G)) == Line(midpoint(A, G), midpoint(C, D)), 0 == 2 * angle(H, midpoint(A, G), midpoint(C, D)) mod 360
By sas_anti_congruence on G, H, midpoint(A, G), A, H, midpoint(A, G) we get anti_congruent_triangles(A, H, midpoint(A, G), G, H, midpoint(A, G))
By sas_anti_similarity on H, midpoint(E, F), E, H, midpoint(E, F), F we get anti_similar_triangles(E, H, midpoint(E, F), F, H, midpoint(E, F))
By sss_anti_similarity_v1 on H, D, E, H, D, F we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v0 on H, D, F, H, D, E we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v0 on D, H, G, D, H, A we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v1 on D, E, H, D, F, H we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v1 on D, E, H, D, F, H we get anti_similar_triangles(D, E, H, D, F, H)
By asa_anti_congruence on H, midpoint(C, D), F, H, midpoint(C, D), E we get anti_congruent_triangles(E, H, midpoint(C, D), F, H, midpoint(C, D))
By asa_anti_congruence on midpoint(A, G), H, G, midpoint(A, G), H, A we get anti_congruent_triangles(A, H, midpoint(A, G), G, H, midpoint(A, G))
By sss_anti_congruence_v0 on G, D, H, A, D, H we get anti_congruent_triangles(A, D, H, G, D, H)
By sas_anti_similarity on G, H, D, A, H, D we get anti_similar_triangles(A, D, H, G, D, H)
By sas_anti_congruence on G, midpoint(A, G), D, A, midpoint(A, G), D we get anti_congruent_triangles(A, D, midpoint(A, G), G, D, midpoint(A, G))
By sas_anti_congruence on G, midpoint(A, G), C, A, midpoint(A, G), C we get anti_congruent_triangles(A, C, midpoint(A, G), G, C, midpoint(A, G))
By sss_anti_similarity_v0 on H, D, A, H, D, G we get anti_similar_triangles(A, D, H, G, D, H)
By sas_anti_similarity on G, H, midpoint(A, G), A, H, midpoint(A, G) we get anti_similar_triangles(A, H, midpoint(A, G), G, H, midpoint(A, G))
By sas_anti_congruence on midpoint(A, G), H, A, midpoint(A, G), H, G we get anti_congruent_triangles(A, H, midpoint(A, G), G, H, midpoint(A, G))
By sss_anti_similarity_v0 on D, H, G, D, H, A we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v1 on F, D, H, E, D, H we get anti_similar_triangles(D, E, H, D, F, H)
By sas_anti_congruence on G, D, H, A, D, H we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v0 on H, G, D, H, A, D we get anti_congruent_triangles(A, D, H, G, D, H)
By sas_anti_similarity on E, midpoint(C, D), H, F, midpoint(C, D), H we get anti_similar_triangles(E, H, midpoint(C, D), F, H, midpoint(C, D))
By sas_anti_congruence on H, D, F, H, D, E we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v0 on H, E, D, H, F, D we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v0 on A, H, D, G, H, D we get anti_congruent_triangles(A, D, H, G, D, H)
By collinear_definition on midpoint(A, G), H, midpoint(E, F) we get H in Line(midpoint(A, G), midpoint(E, F)), midpoint(E, F) in Line(H, midpoint(A, G)), Line(H, midpoint(A, G)) == Line(midpoint(A, G), midpoint(E, F)), 0 == 2 * angle(H, midpoint(A, G), midpoint(E, F)) mod 360
By sss_anti_similarity_v1 on H, D, E, H, D, F we get anti_similar_triangles(D, E, H, D, F, H)
By aa_anti_similarity on E, D, H, F, E, G we get anti_similar_triangles(D, E, H, E, F, G)
By collinear_definition on midpoint(E, F), H, midpoint(C, D) we get H in Line(midpoint(C, D), midpoint(E, F)), midpoint(C, D) in Line(H, midpoint(E, F)), Line(H, midpoint(E, F)) == Line(midpoint(C, D), midpoint(E, F)), 0 == 2 * angle(H, midpoint(E, F), midpoint(C, D)) mod 360
By reverse_direction on midpoint(C, D), H we get 180 == direction(midpoint(C, D), H) - direction(H, midpoint(C, D)) mod 360
By sss_anti_congruence_v0 on D, F, H, D, E, H we get anti_congruent_triangles(D, E, H, D, F, H)
By aa_anti_similarity on A, D, midpoint(A, G), G, D, midpoint(A, G) we get anti_similar_triangles(A, D, midpoint(A, G), G, D, midpoint(A, G))
By sss_anti_congruence_v1 on H, D, E, H, D, F we get anti_congruent_triangles(D, E, H, D, F, H)
By sss_anti_congruence_v0 on A, H, D, G, H, D we get anti_congruent_triangles(A, D, H, G, D, H)
By asa_anti_congruence on midpoint(C, D), H, E, midpoint(C, D), H, F we get anti_congruent_triangles(E, H, midpoint(C, D), F, H, midpoint(C, D))
By sss_anti_congruence_v0 on G, D, H, A, D, H we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v1 on G, H, D, A, H, D we get anti_similar_triangles(A, D, H, G, D, H)
By sss_anti_congruence_v0 on H, E, D, H, F, D we get anti_congruent_triangles(D, E, H, D, F, H)
By sas_anti_congruence on D, H, G, D, H, A we get anti_congruent_triangles(A, D, H, G, D, H)
By sss_anti_similarity_v1 on H, F, D, H, E, D we get anti_similar_triangles(D, E, H, D, F, H)
By reverse_direction on midpoint(E, F), midpoint(A, G) we get 180 == direction(midpoint(E, F), midpoint(A, G)) - direction(midpoint(A, G), midpoint(E, F)) mod 360
By asa_anti_congruence on D, midpoint(A, G), G, D, midpoint(A, G), A we get anti_congruent_triangles(A, D, midpoint(A, G), G, D, midpoint(A, G))
By aa_anti_similarity on F, midpoint(E, F), midpoint(C, D), E, midpoint(E, F), midpoint(C, D) we get anti_similar_triangles(E, midpoint(C, D), midpoint(E, F), F, midpoint(C, D), midpoint(E, F))
By sss_anti_similarity_v0 on H, E, D, H, F, D we get anti_similar_triangles(D, E, H, D, F, H)
By sss_anti_similarity_v0 on H, D, F, H, D, E we get anti_similar_triangles(D, E, H, D, F, H)
By sas_anti_similarity on A, midpoint(A, G), D, G, midpoint(A, G), D we get anti_similar_triangles(A, D, midpoint(A, G), G, D, midpoint(A, G))
By aa_anti_similarity on E, F, A, F, D, H we get anti_similar_triangles(A, E, F, H, F, D)
By aa_similarity on E, D, H, E, F, A we get similar_triangles(A, E, F, H, E, D)
By reverse_direction on midpoint(A, G), midpoint(E, F) we get 180 == direction(midpoint(A, G), midpoint(E, F)) - direction(midpoint(E, F), midpoint(A, G)) mod 360
By aa_similarity on E, F, A, E, D, H we get similar_triangles(A, E, F, H, E, D)
By sas_anti_congruence on midpoint(A, G), H, G, midpoint(A, G), H, A we get anti_congruent_triangles(A, H, midpoint(A, G), G, H, midpoint(A, G))
By sas_anti_similarity on midpoint(E, F), H, A, midpoint(E, F), H, G we get anti_similar_triangles(A, H, midpoint(E, F), G, H, midpoint(E, F))
By sss_anti_congruence_v1 on D, H, A, D, H, G we get anti_congruent_triangles(A, D, H, G, D, H)
By external_angle_bisector_definition_v0_r on C, midpoint(E, F), D, midpoint(C, D) we get Line(midpoint(C, D), midpoint(E, F)) == external_angle_bisector(C, midpoint(C, D), D)
By internal_angle_bisector_definition_v0_r on D, midpoint(C, D), C, H we get internal_angle_bisector(C, H, D) == Line(H, midpoint(C, D))
By internal_angle_bisector_definition_v0_r on midpoint(A, G), C, midpoint(A, G), midpoint(C, D) we get Line(C, midpoint(C, D)) == internal_angle_bisector(midpoint(A, G), midpoint(C, D), midpoint(A, G))
By internal_angle_bisector_definition_v0_r on H, midpoint(C, D), H, C we get internal_angle_bisector(H, C, H) == Line(C, midpoint(C, D))
By reverse_direction on center(Circle(A, B, D)), D we get 180 == direction(center(Circle(A, B, D)), D) - direction(D, center(Circle(A, B, D))) mod 360
By collinear_definition on G, orthocenter(C, D, G), midpoint(A, G) we get orthocenter(C, D, G) in Line(G, midpoint(A, G)), midpoint(A, G) in Line(G, orthocenter(C, D, G)), Line(G, midpoint(A, G)) == Line(G, orthocenter(C, D, G)), 0 == 2 * angle(orthocenter(C, D, G), G, midpoint(A, G)) mod 360
By external_angle_bisector_definition_v0_r on H, F, H, midpoint(E, F) we get Line(F, midpoint(E, F)) == external_angle_bisector(H, midpoint(E, F), H)
By internal_angle_bisector_definition_v0 on midpoint(A, G), orthocenter(C, D, G), midpoint(A, G), G we get angle(midpoint(A, G), G, orthocenter(C, D, G)) == angle(orthocenter(C, D, G), G, midpoint(A, G)) mod 360
By external_angle_bisector_definition_v0_r on A, D, A, midpoint(A, G) we get Line(D, midpoint(A, G)) == external_angle_bisector(A, midpoint(A, G), A)
By external_angle_bisector_definition_v0_r on D, H, C, midpoint(C, D) we get Line(H, midpoint(C, D)) == external_angle_bisector(C, midpoint(C, D), D)
By external_angle_bisector_definition_v0_r on H, C, midpoint(C, D), D we get Line(C, D) == external_angle_bisector(H, D, midpoint(C, D))
By internal_angle_bisector_definition_v0_r on midpoint(E, F), C, midpoint(E, F), H we get Line(C, H) == internal_angle_bisector(midpoint(E, F), H, midpoint(E, F))
By external_angle_bisector_definition_v0_r on C, midpoint(A, G), D, midpoint(C, D) we get Line(midpoint(A, G), midpoint(C, D)) == external_angle_bisector(C, midpoint(C, D), D)
By internal_angle_bisector_definition_v0_r on midpoint(A, G), midpoint(E, F), midpoint(A, G), C we get Line(C, midpoint(E, F)) == internal_angle_bisector(midpoint(A, G), C, midpoint(A, G))
By internal_angle_bisector_definition_v0 on G, orthocenter(C, D, G), G, midpoint(A, G) we get angle(G, midpoint(A, G), orthocenter(C, D, G)) == angle(orthocenter(C, D, G), midpoint(A, G), G) mod 360
By external_angle_bisector_definition_v0_r on C, A, C, midpoint(A, G) we get Line(A, midpoint(A, G)) == external_angle_bisector(C, midpoint(A, G), C)
By external_angle_bisector_definition_v0_r on C, midpoint(E, F), H, D we get external_angle_bisector(C, D, H) == Line(D, midpoint(E, F))
By internal_angle_bisector_definition_v0_r on midpoint(E, F), D, midpoint(E, F), midpoint(C, D) we get Line(D, midpoint(C, D)) == internal_angle_bisector(midpoint(E, F), midpoint(C, D), midpoint(E, F))
By internal_angle_bisector_definition_v0 on I, orthocenter(C, D, G), G, E we get angle(I, E, orthocenter(C, D, G)) == angle(orthocenter(C, D, G), E, G) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(C, D), C, midpoint(C, D), midpoint(A, G) we get Line(C, midpoint(A, G)) == internal_angle_bisector(midpoint(C, D), midpoint(A, G), midpoint(C, D))
By internal_angle_bisector_definition_v0_r on midpoint(E, F), D, midpoint(E, F), midpoint(A, G) we get Line(D, midpoint(A, G)) == internal_angle_bisector(midpoint(E, F), midpoint(A, G), midpoint(E, F))
By external_angle_bisector_definition_v0_r on G, H, G, midpoint(A, G) we get Line(H, midpoint(A, G)) == external_angle_bisector(G, midpoint(A, G), G)
By collinear_definition on A, G, orthocenter(A, C, D) we get G in Line(A, orthocenter(A, C, D)), orthocenter(A, C, D) in Line(A, G), Line(A, G) == Line(A, orthocenter(A, C, D)), 0 == 2 * angle(G, A, orthocenter(A, C, D)) mod 360
By reverse_direction on center(Circle(C, F, G)), F we get 180 == direction(center(Circle(C, F, G)), F) - direction(F, center(Circle(C, F, G))) mod 360
By external_angle_bisector_definition_v0_r on C, midpoint(C, D), H, D we get external_angle_bisector(C, D, H) == Line(D, midpoint(C, D))
By external_angle_bisector_definition_v0_r on C, G, C, midpoint(A, G) we get Line(G, midpoint(A, G)) == external_angle_bisector(C, midpoint(A, G), C)
By internal_angle_bisector_definition_v0_r on C, midpoint(E, F), C, H we get internal_angle_bisector(C, H, C) == Line(H, midpoint(E, F))
By internal_angle_bisector_definition_v0_r on midpoint(C, D), C, midpoint(C, D), midpoint(E, F) we get Line(C, midpoint(E, F)) == internal_angle_bisector(midpoint(C, D), midpoint(E, F), midpoint(C, D))
By perpendicular_angle_conditions_v0 on H, midpoint(A, G), orthocenter(C, D, G) we get angle(H, midpoint(A, G), orthocenter(C, D, G)) == orientation(H, midpoint(A, G), orthocenter(C, D, G)) mod 360
By external_angle_bisector_definition_v0_r on G, midpoint(C, D), G, midpoint(A, G) we get Line(midpoint(A, G), midpoint(C, D)) == external_angle_bisector(G, midpoint(A, G), G)
By external_angle_bisector_definition_v0 on B, orthocenter(C, D, G), B, E we get 180 == angle(B, E, orthocenter(C, D, G)) + angle(B, E, orthocenter(C, D, G)) mod 360
By internal_angle_bisector_definition_v0_r on D, midpoint(A, G), midpoint(C, D), C we get Line(C, midpoint(A, G)) == internal_angle_bisector(D, C, midpoint(C, D))
By internal_angle_bisector_definition_v0 on A, orthocenter(C, D, G), A, midpoint(A, G) we get angle(A, midpoint(A, G), orthocenter(C, D, G)) == angle(orthocenter(C, D, G), midpoint(A, G), A) mod 360
By external_angle_bisector_definition_v0_r on midpoint(C, D), A, midpoint(C, D), midpoint(A, G) we get Line(A, midpoint(A, G)) == external_angle_bisector(midpoint(C, D), midpoint(A, G), midpoint(C, D))
By external_angle_bisector_definition_v0_r on A, C, A, midpoint(A, G) we get Line(C, midpoint(A, G)) == external_angle_bisector(A, midpoint(A, G), A)
By perpendicular_angle_conditions_v0 on orthocenter(C, D, G), midpoint(A, G), H we get angle(orthocenter(C, D, G), midpoint(A, G), H) == orientation(H, orthocenter(C, D, G), midpoint(A, G)) mod 360
By reverse_direction on center(Circle(C, F, G)), H we get 180 == direction(center(Circle(C, F, G)), H) - direction(H, center(Circle(C, F, G))) mod 360
By internal_angle_bisector_definition_v0_r on G, H, A, midpoint(A, G) we get Line(H, midpoint(A, G)) == internal_angle_bisector(A, midpoint(A, G), G)
By perpendicular_angle_conditions_v0 on orthocenter(A, C, D), midpoint(A, G), midpoint(E, F) we get angle(orthocenter(A, C, D), midpoint(A, G), midpoint(E, F)) == orientation(midpoint(A, G), midpoint(E, F), orthocenter(A, C, D)) mod 360
By collinear_definition on midpoint(A, G), orthocenter(C, D, G), A we get orthocenter(C, D, G) in Line(A, midpoint(A, G)), A in Line(midpoint(A, G), orthocenter(C, D, G)), Line(A, midpoint(A, G)) == Line(midpoint(A, G), orthocenter(C, D, G)), 0 == 2 * angle(orthocenter(C, D, G), midpoint(A, G), A) mod 360
By external_angle_bisector_definition_v0_r on midpoint(C, D), midpoint(E, F), H, D we get Line(D, midpoint(E, F)) == external_angle_bisector(H, D, midpoint(C, D))
By external_angle_bisector_definition_v0_r on midpoint(E, F), A, midpoint(E, F), midpoint(A, G) we get Line(A, midpoint(A, G)) == external_angle_bisector(midpoint(E, F), midpoint(A, G), midpoint(E, F))
By reverse_direction on center(Circle(C, F, G)), G we get 180 == direction(center(Circle(C, F, G)), G) - direction(G, center(Circle(C, F, G))) mod 360
By external_angle_bisector_definition_v0_r on midpoint(C, D), G, midpoint(C, D), midpoint(A, G) we get Line(G, midpoint(A, G)) == external_angle_bisector(midpoint(C, D), midpoint(A, G), midpoint(C, D))
By external_angle_bisector_definition_v0_r on midpoint(E, F), G, midpoint(E, F), midpoint(A, G) we get Line(G, midpoint(A, G)) == external_angle_bisector(midpoint(E, F), midpoint(A, G), midpoint(E, F))
By perpendicular_angle_conditions_v0 on H, midpoint(A, G), orthocenter(A, C, D) we get angle(H, midpoint(A, G), orthocenter(A, C, D)) == orientation(H, midpoint(A, G), orthocenter(A, C, D)) mod 360
By internal_angle_bisector_definition_v0 on C, orthocenter(A, C, D), A, F we get angle(C, F, orthocenter(A, C, D)) == angle(orthocenter(A, C, D), F, A) mod 360
By perpendicular_angle_conditions_v0 on C, E, orthocenter(C, D, G) we get angle(C, E, orthocenter(C, D, G)) == orientation(C, E, orthocenter(C, D, G)) mod 360
By external_angle_bisector_definition_v0 on C, orthocenter(C, D, G), C, E we get 180 == angle(C, E, orthocenter(C, D, G)) + angle(C, E, orthocenter(C, D, G)) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(C, D), H, C, D we get Line(D, H) == internal_angle_bisector(C, D, midpoint(C, D))
By external_angle_bisector_definition_v0_r on G, C, G, midpoint(A, G) we get Line(C, midpoint(A, G)) == external_angle_bisector(G, midpoint(A, G), G)
By internal_angle_bisector_definition_v0_r on D, H, midpoint(C, D), C we get Line(C, H) == internal_angle_bisector(D, C, midpoint(C, D))
By external_angle_bisector_definition_v0_r on G, D, G, midpoint(A, G) we get Line(D, midpoint(A, G)) == external_angle_bisector(G, midpoint(A, G), G)
By external_angle_bisector_definition_v0_r on midpoint(C, D), E, midpoint(C, D), midpoint(E, F) we get Line(E, midpoint(E, F)) == external_angle_bisector(midpoint(C, D), midpoint(E, F), midpoint(C, D))
By reverse_direction on center(Circle(A, C, E)), H we get 180 == direction(center(Circle(A, C, E)), H) - direction(H, center(Circle(A, C, E))) mod 360
By perpendicular_angle_conditions_v0 on C, F, orthocenter(A, C, D) we get angle(C, F, orthocenter(A, C, D)) == orientation(C, F, orthocenter(A, C, D)) mod 360
By collinear_definition on G, orthocenter(A, C, D), A we get orthocenter(A, C, D) in Line(A, G), A in Line(G, orthocenter(A, C, D)), Line(A, G) == Line(G, orthocenter(A, C, D)), 0 == 2 * angle(orthocenter(A, C, D), G, A) mod 360
By reverse_direction on center(Circle(A, C, E)), E we get 180 == direction(center(Circle(A, C, E)), E) - direction(E, center(Circle(A, C, E))) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(C, D), D, midpoint(C, D), midpoint(E, F) we get Line(D, midpoint(E, F)) == internal_angle_bisector(midpoint(C, D), midpoint(E, F), midpoint(C, D))
By internal_angle_bisector_definition_v0_r on midpoint(C, D), D, midpoint(C, D), H we get Line(D, H) == internal_angle_bisector(midpoint(C, D), H, midpoint(C, D))
By internal_angle_bisector_definition_v0_r on C, midpoint(E, F), midpoint(C, D), D we get Line(D, midpoint(E, F)) == internal_angle_bisector(C, D, midpoint(C, D))
By internal_angle_bisector_definition_v0_r on midpoint(C, D), midpoint(E, F), D, C we get Line(C, midpoint(E, F)) == internal_angle_bisector(D, C, midpoint(C, D))
By perpendicular_angle_conditions_v0 on orthocenter(C, D, G), midpoint(A, G), midpoint(C, D) we get angle(orthocenter(C, D, G), midpoint(A, G), midpoint(C, D)) == orientation(midpoint(A, G), midpoint(C, D), orthocenter(C, D, G)) mod 360
By internal_angle_bisector_definition_v0 on G, orthocenter(C, D, G), C, E we get angle(G, E, orthocenter(C, D, G)) == angle(orthocenter(C, D, G), E, C) mod 360
By internal_angle_bisector_definition_v0_r on H, C, H, D we get Line(C, D) == internal_angle_bisector(H, D, H)
By external_angle_bisector_definition_v0_r on A, midpoint(E, F), A, midpoint(A, G) we get Line(midpoint(A, G), midpoint(E, F)) == external_angle_bisector(A, midpoint(A, G), A)
By internal_angle_bisector_definition_v0 on midpoint(A, G), orthocenter(A, C, D), midpoint(A, G), G we get angle(midpoint(A, G), G, orthocenter(A, C, D)) == angle(orthocenter(A, C, D), G, midpoint(A, G)) mod 360
By external_angle_bisector_definition_v0_r on D, G, D, midpoint(A, G) we get Line(G, midpoint(A, G)) == external_angle_bisector(D, midpoint(A, G), D)
By internal_angle_bisector_definition_v0_r on A, H, E, center(Circle(A, C, E)) we get Line(H, center(Circle(A, C, E))) == internal_angle_bisector(A, center(Circle(A, C, E)), E)
By internal_angle_bisector_definition_v0 on G, orthocenter(A, C, D), G, A we get angle(G, A, orthocenter(A, C, D)) == angle(orthocenter(A, C, D), A, G) mod 360
By external_angle_bisector_definition_v0_r on H, E, H, midpoint(E, F) we get Line(E, midpoint(E, F)) == external_angle_bisector(H, midpoint(E, F), H)
By internal_angle_bisector_definition_v0 on midpoint(A, G), orthocenter(C, D, G), midpoint(A, G), A we get angle(midpoint(A, G), A, orthocenter(C, D, G)) == angle(orthocenter(C, D, G), A, midpoint(A, G)) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(A, G), D, midpoint(A, G), C we get Line(C, D) == internal_angle_bisector(midpoint(A, G), C, midpoint(A, G))
By external_angle_bisector_definition_v0_r on A, midpoint(C, D), A, midpoint(A, G) we get Line(midpoint(A, G), midpoint(C, D)) == external_angle_bisector(A, midpoint(A, G), A)
By external_angle_bisector_definition_v0_r on H, A, H, midpoint(A, G) we get Line(A, midpoint(A, G)) == external_angle_bisector(H, midpoint(A, G), H)
By internal_angle_bisector_definition_v0_r on C, D, C, H we get Line(D, H) == internal_angle_bisector(C, H, C)
By internal_angle_bisector_definition_v0 on B, orthocenter(C, D, G), C, E we get angle(B, E, orthocenter(C, D, G)) == angle(orthocenter(C, D, G), E, C) mod 360
By internal_angle_bisector_definition_v0_r on A, D, G, center(Circle(A, B, D)) we get Line(D, center(Circle(A, B, D))) == internal_angle_bisector(A, center(Circle(A, B, D)), G)
By external_angle_bisector_definition_v0_r on A, H, A, midpoint(A, G) we get Line(H, midpoint(A, G)) == external_angle_bisector(A, midpoint(A, G), A)
By internal_angle_bisector_definition_v0_r on H, midpoint(A, G), midpoint(C, D), C we get Line(C, midpoint(A, G)) == internal_angle_bisector(H, C, midpoint(C, D))
By internal_angle_bisector_definition_v0_r on midpoint(A, G), H, midpoint(A, G), C we get Line(C, H) == internal_angle_bisector(midpoint(A, G), C, midpoint(A, G))
By internal_angle_bisector_definition_v0_r on midpoint(C, D), C, midpoint(C, D), H we get Line(C, H) == internal_angle_bisector(midpoint(C, D), H, midpoint(C, D))
By internal_angle_bisector_definition_v0_r on C, midpoint(E, F), C, midpoint(A, G) we get Line(midpoint(A, G), midpoint(E, F)) == internal_angle_bisector(C, midpoint(A, G), C)
By internal_angle_bisector_definition_v0_r on H, D, H, midpoint(C, D) we get Line(D, midpoint(C, D)) == internal_angle_bisector(H, midpoint(C, D), H)
By internal_angle_bisector_definition_v0_r on G, D, A, midpoint(C, D) we get Line(D, midpoint(C, D)) == internal_angle_bisector(A, midpoint(C, D), G)
By collinear_definition on midpoint(A, G), G, orthocenter(A, C, D) we get G in Line(midpoint(A, G), orthocenter(A, C, D)), orthocenter(A, C, D) in Line(G, midpoint(A, G)), Line(G, midpoint(A, G)) == Line(midpoint(A, G), orthocenter(A, C, D)), 0 == 2 * angle(G, midpoint(A, G), orthocenter(A, C, D)) mod 360
By perpendicular_angle_conditions_v0 on I, E, orthocenter(C, D, G) we get angle(I, E, orthocenter(C, D, G)) == orientation(E, orthocenter(C, D, G), I) mod 360
By external_angle_bisector_definition_v0_r on G, midpoint(E, F), G, midpoint(A, G) we get Line(midpoint(A, G), midpoint(E, F)) == external_angle_bisector(G, midpoint(A, G), G)
By reverse_direction on center(Circle(A, C, E)), C we get 180 == direction(center(Circle(A, C, E)), C) - direction(C, center(Circle(A, C, E))) mod 360
By collinear_definition on G, orthocenter(A, C, D), midpoint(A, G) we get orthocenter(A, C, D) in Line(G, midpoint(A, G)), midpoint(A, G) in Line(G, orthocenter(A, C, D)), Line(G, midpoint(A, G)) == Line(G, orthocenter(A, C, D)), 0 == 2 * angle(orthocenter(A, C, D), G, midpoint(A, G)) mod 360
By external_angle_bisector_definition_v0 on B, orthocenter(C, D, G), G, E we get 180 == angle(B, E, orthocenter(C, D, G)) + angle(G, E, orthocenter(C, D, G)) mod 360
By internal_angle_bisector_definition_v0_r on D, midpoint(E, F), D, H we get internal_angle_bisector(D, H, D) == Line(H, midpoint(E, F))
By isosceles_triangle_midpoint on center(Circle(A, B, D)), A, G we get midpoint(A, G) in median(center(Circle(A, B, D)), A, G)
By perpendicular_angle_conditions_v0 on B, E, orthocenter(C, D, G) we get angle(B, E, orthocenter(C, D, G)) == orientation(B, E, orthocenter(C, D, G)) mod 360
By internal_angle_bisector_definition_v0_r on H, D, midpoint(C, D), C we get Line(C, D) == internal_angle_bisector(H, C, midpoint(C, D))
By external_angle_bisector_definition_v0 on A, orthocenter(A, C, D), A, F we get 180 == angle(A, F, orthocenter(A, C, D)) + angle(A, F, orthocenter(A, C, D)) mod 360
By internal_angle_bisector_definition_v0_r on A, D, G, midpoint(E, F) we get Line(D, midpoint(E, F)) == internal_angle_bisector(A, midpoint(E, F), G)
By internal_angle_bisector_definition_v0_r on H, C, H, midpoint(E, F) we get Line(C, midpoint(E, F)) == internal_angle_bisector(H, midpoint(E, F), H)
By internal_angle_bisector_definition_v0_r on H, midpoint(A, G), H, C we get internal_angle_bisector(H, C, H) == Line(C, midpoint(A, G))
By internal_angle_bisector_definition_v0_r on H, midpoint(E, F), H, C we get internal_angle_bisector(H, C, H) == Line(C, midpoint(E, F))
By internal_angle_bisector_definition_v0_r on D, midpoint(E, F), D, midpoint(A, G) we get Line(midpoint(A, G), midpoint(E, F)) == internal_angle_bisector(D, midpoint(A, G), D)
By external_angle_bisector_definition_v0_r on midpoint(A, G), E, midpoint(A, G), midpoint(E, F) we get Line(E, midpoint(E, F)) == external_angle_bisector(midpoint(A, G), midpoint(E, F), midpoint(A, G))
By internal_angle_bisector_definition_v0_r on G, C, A, midpoint(C, D) we get Line(C, midpoint(C, D)) == internal_angle_bisector(A, midpoint(C, D), G)
By collinear_definition on A, orthocenter(C, D, G), G we get orthocenter(C, D, G) in Line(A, G), G in Line(A, orthocenter(C, D, G)), Line(A, G) == Line(A, orthocenter(C, D, G)), 0 == 2 * angle(orthocenter(C, D, G), A, G) mod 360
By perpendicular_angle_conditions_v0 on G, E, orthocenter(C, D, G) we get angle(G, E, orthocenter(C, D, G)) == orientation(E, orthocenter(C, D, G), G) mod 360
By internal_angle_bisector_definition_v0_r on D, midpoint(C, D), D, H we get internal_angle_bisector(D, H, D) == Line(H, midpoint(C, D))
By external_angle_bisector_definition_v0_r on midpoint(C, D), F, midpoint(C, D), midpoint(E, F) we get Line(F, midpoint(E, F)) == external_angle_bisector(midpoint(C, D), midpoint(E, F), midpoint(C, D))
By collinear_definition on D, orthocenter(A, C, D), F we get orthocenter(A, C, D) in Line(D, F), F in Line(D, orthocenter(A, C, D)), Line(D, F) == Line(D, orthocenter(A, C, D)), 0 == 2 * angle(orthocenter(A, C, D), D, F) mod 360
By external_angle_bisector_definition_v0_r on D, A, D, midpoint(A, G) we get Line(A, midpoint(A, G)) == external_angle_bisector(D, midpoint(A, G), D)
By internal_angle_bisector_definition_v0_r on midpoint(C, D), midpoint(A, G), C, D we get Line(D, midpoint(A, G)) == internal_angle_bisector(C, D, midpoint(C, D))
By external_angle_bisector_definition_v0 on C, orthocenter(A, C, D), C, F we get 180 == angle(C, F, orthocenter(A, C, D)) + angle(C, F, orthocenter(A, C, D)) mod 360
By collinear_definition on midpoint(A, G), A, orthocenter(A, C, D) we get A in Line(midpoint(A, G), orthocenter(A, C, D)), orthocenter(A, C, D) in Line(A, midpoint(A, G)), Line(A, midpoint(A, G)) == Line(midpoint(A, G), orthocenter(A, C, D)), 0 == 2 * angle(A, midpoint(A, G), orthocenter(A, C, D)) mod 360
By internal_angle_bisector_definition_v0_r on H, midpoint(E, F), H, D we get internal_angle_bisector(H, D, H) == Line(D, midpoint(E, F))
By perpendicular_angle_conditions_v0 on orthocenter(C, D, G), E, B we get angle(orthocenter(C, D, G), E, B) == orientation(B, orthocenter(C, D, G), E) mod 360
By internal_angle_bisector_definition_v0 on C, orthocenter(C, D, G), G, E we get angle(C, E, orthocenter(C, D, G)) == angle(orthocenter(C, D, G), E, G) mod 360
By perpendicular_angle_conditions_v0 on orthocenter(C, D, G), E, C we get angle(orthocenter(C, D, G), E, C) == orientation(C, orthocenter(C, D, G), E) mod 360
By perpendicular_angle_conditions_v0 on D, midpoint(A, G), orthocenter(A, C, D) we get angle(D, midpoint(A, G), orthocenter(A, C, D)) == orientation(D, midpoint(A, G), orthocenter(A, C, D)) mod 360
By internal_angle_bisector_definition_v0_r on G, C, A, midpoint(E, F) we get Line(C, midpoint(E, F)) == internal_angle_bisector(A, midpoint(E, F), G)
By isosceles_triangle_altitude_v0 on midpoint(A, G), E, F we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, midpoint(A, G), F), perpendicular_line(midpoint(A, G), Line(E, F)))
By internal_angle_bisector_definition_v0 on B, orthocenter(C, D, G), I, E we get angle(B, E, orthocenter(C, D, G)) == angle(orthocenter(C, D, G), E, I) mod 360
By perpendicular_angle_conditions_v0 on midpoint(E, F), midpoint(A, G), orthocenter(C, D, G) we get angle(midpoint(E, F), midpoint(A, G), orthocenter(C, D, G)) == orientation(midpoint(A, G), orthocenter(C, D, G), midpoint(E, F)) mod 360
By internal_angle_bisector_definition_v0_r on A, C, G, midpoint(A, G) we get Line(C, midpoint(A, G)) == internal_angle_bisector(A, midpoint(A, G), G)
By internal_angle_bisector_definition_v0_r on C, D, C, midpoint(A, G) we get Line(D, midpoint(A, G)) == internal_angle_bisector(C, midpoint(A, G), C)
By external_angle_bisector_definition_v0_r on H, G, H, midpoint(A, G) we get Line(G, midpoint(A, G)) == external_angle_bisector(H, midpoint(A, G), H)
By internal_angle_bisector_definition_v0 on A, orthocenter(A, C, D), A, G we get angle(A, G, orthocenter(A, C, D)) == angle(orthocenter(A, C, D), G, A) mod 360
By collinear_definition on A, midpoint(A, G), orthocenter(A, C, D) we get midpoint(A, G) in Line(A, orthocenter(A, C, D)), orthocenter(A, C, D) in Line(A, midpoint(A, G)), Line(A, midpoint(A, G)) == Line(A, orthocenter(A, C, D)), 0 == 2 * angle(midpoint(A, G), A, orthocenter(A, C, D)) mod 360
By perpendicular_angle_conditions_v0 on C, midpoint(A, G), orthocenter(C, D, G) we get angle(C, midpoint(A, G), orthocenter(C, D, G)) == orientation(C, midpoint(A, G), orthocenter(C, D, G)) mod 360
By internal_angle_bisector_definition_v0_r on D, C, D, midpoint(A, G) we get Line(C, midpoint(A, G)) == internal_angle_bisector(D, midpoint(A, G), D)
By perpendicular_angle_conditions_v0 on orthocenter(A, C, D), F, A we get angle(orthocenter(A, C, D), F, A) == orientation(A, orthocenter(A, C, D), F) mod 360
By isosceles_triangle_altitude_v0 on midpoint(E, F), G, A we get identical(perpendicular_bisector(A, G), internal_angle_bisector(A, midpoint(E, F), G), perpendicular_line(midpoint(E, F), Line(A, G)))
By perpendicular_angle_conditions_v0 on A, F, orthocenter(A, C, D) we get angle(A, F, orthocenter(A, C, D)) == orientation(A, F, orthocenter(A, C, D)) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(C, D), D, midpoint(C, D), midpoint(A, G) we get Line(D, midpoint(A, G)) == internal_angle_bisector(midpoint(C, D), midpoint(A, G), midpoint(C, D))
By internal_angle_bisector_definition_v0 on A, orthocenter(A, C, D), A, midpoint(A, G) we get angle(A, midpoint(A, G), orthocenter(A, C, D)) == angle(orthocenter(A, C, D), midpoint(A, G), A) mod 360
By perpendicular_angle_conditions_v0 on orthocenter(C, D, G), E, G we get angle(orthocenter(C, D, G), E, G) == orientation(E, G, orthocenter(C, D, G)) mod 360
By internal_angle_bisector_definition_v0_r on H, C, H, midpoint(A, G) we get Line(C, midpoint(A, G)) == internal_angle_bisector(H, midpoint(A, G), H)
By internal_angle_bisector_definition_v0 on G, orthocenter(A, C, D), G, midpoint(A, G) we get angle(G, midpoint(A, G), orthocenter(A, C, D)) == angle(orthocenter(A, C, D), midpoint(A, G), G) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(A, G), midpoint(C, D), midpoint(A, G), C we get Line(C, midpoint(C, D)) == internal_angle_bisector(midpoint(A, G), C, midpoint(A, G))
By internal_angle_bisector_definition_v0_r on G, midpoint(E, F), A, midpoint(A, G) we get Line(midpoint(A, G), midpoint(E, F)) == internal_angle_bisector(A, midpoint(A, G), G)
By collinear_definition on D, orthocenter(C, D, G), E we get orthocenter(C, D, G) in Line(D, E), E in Line(D, orthocenter(C, D, G)), Line(D, E) == Line(D, orthocenter(C, D, G)), 0 == 2 * angle(orthocenter(C, D, G), D, E) mod 360
By external_angle_bisector_definition_v0_r on midpoint(A, G), F, midpoint(A, G), midpoint(E, F) we get Line(F, midpoint(E, F)) == external_angle_bisector(midpoint(A, G), midpoint(E, F), midpoint(A, G))
By collinear_definition on midpoint(A, G), orthocenter(A, C, D), A we get orthocenter(A, C, D) in Line(A, midpoint(A, G)), A in Line(midpoint(A, G), orthocenter(A, C, D)), Line(A, midpoint(A, G)) == Line(midpoint(A, G), orthocenter(A, C, D)), 0 == 2 * angle(orthocenter(A, C, D), midpoint(A, G), A) mod 360
By collinear_definition on G, orthocenter(C, D, G), A we get orthocenter(C, D, G) in Line(A, G), A in Line(G, orthocenter(C, D, G)), Line(A, G) == Line(G, orthocenter(C, D, G)), 0 == 2 * angle(orthocenter(C, D, G), G, A) mod 360
By collinear_definition on D, F, orthocenter(A, C, D) we get F in Line(D, orthocenter(A, C, D)), orthocenter(A, C, D) in Line(D, F), Line(D, F) == Line(D, orthocenter(A, C, D)), 0 == 2 * angle(F, D, orthocenter(A, C, D)) mod 360
By internal_angle_bisector_definition_v0_r on D, midpoint(E, F), C, H we get internal_angle_bisector(C, H, D) == Line(H, midpoint(E, F))
By internal_angle_bisector_definition_v0_r on H, D, H, C we get Line(C, D) == internal_angle_bisector(H, C, H)
By collinear_definition on midpoint(A, G), A, orthocenter(C, D, G) we get A in Line(midpoint(A, G), orthocenter(C, D, G)), orthocenter(C, D, G) in Line(A, midpoint(A, G)), Line(A, midpoint(A, G)) == Line(midpoint(A, G), orthocenter(C, D, G)), 0 == 2 * angle(A, midpoint(A, G), orthocenter(C, D, G)) mod 360
By collinear_definition on G, midpoint(A, G), orthocenter(C, D, G) we get midpoint(A, G) in Line(G, orthocenter(C, D, G)), orthocenter(C, D, G) in Line(G, midpoint(A, G)), Line(G, midpoint(A, G)) == Line(G, orthocenter(C, D, G)), 0 == 2 * angle(midpoint(A, G), G, orthocenter(C, D, G)) mod 360
By internal_angle_bisector_definition_v0 on A, orthocenter(A, C, D), C, F we get angle(A, F, orthocenter(A, C, D)) == angle(orthocenter(A, C, D), F, C) mod 360
By internal_angle_bisector_definition_v0 on C, orthocenter(C, D, G), B, E we get angle(C, E, orthocenter(C, D, G)) == angle(orthocenter(C, D, G), E, B) mod 360
By internal_angle_bisector_definition_v0_r on D, midpoint(C, D), H, C we get internal_angle_bisector(D, C, H) == Line(C, midpoint(C, D))
By internal_angle_bisector_definition_v0_r on C, midpoint(C, D), C, H we get internal_angle_bisector(C, H, C) == Line(H, midpoint(C, D))
By internal_angle_bisector_definition_v0_r on D, midpoint(A, G), H, C we get internal_angle_bisector(D, C, H) == Line(C, midpoint(A, G))
By internal_angle_bisector_definition_v0_r on D, midpoint(C, D), D, midpoint(A, G) we get Line(midpoint(A, G), midpoint(C, D)) == internal_angle_bisector(D, midpoint(A, G), D)
By internal_angle_bisector_definition_v0_r on midpoint(A, G), midpoint(C, D), midpoint(A, G), D we get Line(D, midpoint(C, D)) == internal_angle_bisector(midpoint(A, G), D, midpoint(A, G))
By collinear_definition on A, midpoint(A, G), orthocenter(C, D, G) we get midpoint(A, G) in Line(A, orthocenter(C, D, G)), orthocenter(C, D, G) in Line(A, midpoint(A, G)), Line(A, midpoint(A, G)) == Line(A, orthocenter(C, D, G)), 0 == 2 * angle(midpoint(A, G), A, orthocenter(C, D, G)) mod 360
By collinear_definition on F, orthocenter(A, C, D), D we get orthocenter(A, C, D) in Line(D, F), D in Line(F, orthocenter(A, C, D)), Line(D, F) == Line(F, orthocenter(A, C, D)), 0 == 2 * angle(orthocenter(A, C, D), F, D) mod 360
By collinear_definition on G, A, orthocenter(C, D, G) we get A in Line(G, orthocenter(C, D, G)), orthocenter(C, D, G) in Line(A, G), Line(A, G) == Line(G, orthocenter(C, D, G)), 0 == 2 * angle(A, G, orthocenter(C, D, G)) mod 360
By collinear_definition on G, midpoint(A, G), orthocenter(A, C, D) we get midpoint(A, G) in Line(G, orthocenter(A, C, D)), orthocenter(A, C, D) in Line(G, midpoint(A, G)), Line(G, midpoint(A, G)) == Line(G, orthocenter(A, C, D)), 0 == 2 * angle(midpoint(A, G), G, orthocenter(A, C, D)) mod 360
By internal_angle_bisector_definition_v0_r on H, midpoint(E, F), midpoint(C, D), C we get Line(C, midpoint(E, F)) == internal_angle_bisector(H, C, midpoint(C, D))
By collinear_definition on D, E, orthocenter(C, D, G) we get E in Line(D, orthocenter(C, D, G)), orthocenter(C, D, G) in Line(D, E), Line(D, E) == Line(D, orthocenter(C, D, G)), 0 == 2 * angle(E, D, orthocenter(C, D, G)) mod 360
By perpendicular_angle_conditions_v0 on orthocenter(C, D, G), midpoint(A, G), midpoint(E, F) we get angle(orthocenter(C, D, G), midpoint(A, G), midpoint(E, F)) == orientation(midpoint(A, G), midpoint(E, F), orthocenter(C, D, G)) mod 360
By perpendicular_angle_conditions_v0 on D, midpoint(A, G), orthocenter(C, D, G) we get angle(D, midpoint(A, G), orthocenter(C, D, G)) == orientation(D, midpoint(A, G), orthocenter(C, D, G)) mod 360
By internal_angle_bisector_definition_v0_r on C, midpoint(A, G), C, H we get internal_angle_bisector(C, H, C) == Line(H, midpoint(A, G))
By internal_angle_bisector_definition_v0_r on H, D, H, midpoint(E, F) we get Line(D, midpoint(E, F)) == internal_angle_bisector(H, midpoint(E, F), H)
By collinear_definition on midpoint(A, G), orthocenter(A, C, D), G we get orthocenter(A, C, D) in Line(G, midpoint(A, G)), G in Line(midpoint(A, G), orthocenter(A, C, D)), Line(G, midpoint(A, G)) == Line(midpoint(A, G), orthocenter(A, C, D)), 0 == 2 * angle(orthocenter(A, C, D), midpoint(A, G), G) mod 360
By perpendicular_angle_conditions_v0 on orthocenter(C, D, G), E, I we get angle(orthocenter(C, D, G), E, I) == orientation(E, I, orthocenter(C, D, G)) mod 360
By perpendicular_angle_conditions_v0 on orthocenter(A, C, D), midpoint(A, G), D we get angle(orthocenter(A, C, D), midpoint(A, G), D) == orientation(D, orthocenter(A, C, D), midpoint(A, G)) mod 360
By internal_angle_bisector_definition_v0_r on H, midpoint(C, D), H, D we get internal_angle_bisector(H, D, H) == Line(D, midpoint(C, D))
By internal_angle_bisector_definition_v0_r on C, H, C, midpoint(A, G) we get Line(H, midpoint(A, G)) == internal_angle_bisector(C, midpoint(A, G), C)
By internal_angle_bisector_definition_v0_r on midpoint(A, G), C, midpoint(A, G), D we get Line(C, D) == internal_angle_bisector(midpoint(A, G), D, midpoint(A, G))
By internal_angle_bisector_definition_v0_r on midpoint(A, G), midpoint(E, F), midpoint(A, G), D we get Line(D, midpoint(E, F)) == internal_angle_bisector(midpoint(A, G), D, midpoint(A, G))
By perpendicular_angle_conditions_v0 on C, midpoint(A, G), orthocenter(A, C, D) we get angle(C, midpoint(A, G), orthocenter(A, C, D)) == orientation(C, midpoint(A, G), orthocenter(A, C, D)) mod 360
By internal_angle_bisector_definition_v0_r on D, C, D, H we get Line(C, H) == internal_angle_bisector(D, H, D)
By external_angle_bisector_definition_v0 on G, orthocenter(C, D, G), G, E we get 180 == angle(G, E, orthocenter(C, D, G)) + angle(G, E, orthocenter(C, D, G)) mod 360
By reverse_direction on center(Circle(A, C, E)), A we get 180 == direction(center(Circle(A, C, E)), A) - direction(A, center(Circle(A, C, E))) mod 360
By collinear_definition on G, A, orthocenter(A, C, D) we get A in Line(G, orthocenter(A, C, D)), orthocenter(A, C, D) in Line(A, G), Line(A, G) == Line(G, orthocenter(A, C, D)), 0 == 2 * angle(A, G, orthocenter(A, C, D)) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(E, F), D, midpoint(E, F), H we get Line(D, H) == internal_angle_bisector(midpoint(E, F), H, midpoint(E, F))
By perpendicular_angle_conditions_v0 on orthocenter(C, D, G), midpoint(A, G), C we get angle(orthocenter(C, D, G), midpoint(A, G), C) == orientation(C, orthocenter(C, D, G), midpoint(A, G)) mod 360
By perpendicular_angle_conditions_v0 on orthocenter(A, C, D), midpoint(A, G), C we get angle(orthocenter(A, C, D), midpoint(A, G), C) == orientation(C, orthocenter(A, C, D), midpoint(A, G)) mod 360
By external_angle_bisector_definition_v0 on C, orthocenter(C, D, G), I, E we get 180 == angle(C, E, orthocenter(C, D, G)) + angle(I, E, orthocenter(C, D, G)) mod 360
By internal_angle_bisector_definition_v0_r on G, midpoint(C, D), A, midpoint(A, G) we get Line(midpoint(A, G), midpoint(C, D)) == internal_angle_bisector(A, midpoint(A, G), G)
By perpendicular_angle_conditions_v0 on orthocenter(A, C, D), midpoint(A, G), midpoint(C, D) we get angle(orthocenter(A, C, D), midpoint(A, G), midpoint(C, D)) == orientation(midpoint(A, G), midpoint(C, D), orthocenter(A, C, D)) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(E, F), C, midpoint(E, F), midpoint(A, G) we get Line(C, midpoint(A, G)) == internal_angle_bisector(midpoint(E, F), midpoint(A, G), midpoint(E, F))
By reverse_direction on center(Circle(A, B, D)), A we get 180 == direction(center(Circle(A, B, D)), A) - direction(A, center(Circle(A, B, D))) mod 360
By internal_angle_bisector_definition_v0_r on H, midpoint(E, F), D, C we get internal_angle_bisector(D, C, H) == Line(C, midpoint(E, F))
By internal_angle_bisector_definition_v0_r on G, H, F, center(Circle(C, F, G)) we get Line(H, center(Circle(C, F, G))) == internal_angle_bisector(F, center(Circle(C, F, G)), G)
By internal_angle_bisector_definition_v0_r on G, D, A, midpoint(A, G) we get Line(D, midpoint(A, G)) == internal_angle_bisector(A, midpoint(A, G), G)
By external_angle_bisector_definition_v0 on I, orthocenter(C, D, G), I, E we get 180 == angle(I, E, orthocenter(C, D, G)) + angle(I, E, orthocenter(C, D, G)) mod 360
By perpendicular_angle_conditions_v0 on orthocenter(A, C, D), midpoint(A, G), H we get angle(orthocenter(A, C, D), midpoint(A, G), H) == orientation(H, orthocenter(A, C, D), midpoint(A, G)) mod 360
By collinear_definition on A, orthocenter(C, D, G), midpoint(A, G) we get orthocenter(C, D, G) in Line(A, midpoint(A, G)), midpoint(A, G) in Line(A, orthocenter(C, D, G)), Line(A, midpoint(A, G)) == Line(A, orthocenter(C, D, G)), 0 == 2 * angle(orthocenter(C, D, G), A, midpoint(A, G)) mod 360
By perpendicular_angle_conditions_v0 on orthocenter(A, C, D), F, C we get angle(orthocenter(A, C, D), F, C) == orientation(C, orthocenter(A, C, D), F) mod 360
By reverse_direction on center(Circle(A, B, D)), G we get 180 == direction(center(Circle(A, B, D)), G) - direction(G, center(Circle(A, B, D))) mod 360
By internal_angle_bisector_definition_v0 on A, orthocenter(C, D, G), A, G we get angle(A, G, orthocenter(C, D, G)) == angle(orthocenter(C, D, G), G, A) mod 360
By internal_angle_bisector_definition_v0 on I, orthocenter(C, D, G), B, E we get angle(I, E, orthocenter(C, D, G)) == angle(orthocenter(C, D, G), E, B) mod 360
By internal_angle_bisector_definition_v0_r on H, C, H, midpoint(C, D) we get Line(C, midpoint(C, D)) == internal_angle_bisector(H, midpoint(C, D), H)
By internal_angle_bisector_definition_v0_r on C, midpoint(C, D), C, midpoint(A, G) we get Line(midpoint(A, G), midpoint(C, D)) == internal_angle_bisector(C, midpoint(A, G), C)
By internal_angle_bisector_definition_v0_r on midpoint(A, G), D, midpoint(A, G), midpoint(C, D) we get Line(D, midpoint(C, D)) == internal_angle_bisector(midpoint(A, G), midpoint(C, D), midpoint(A, G))
By internal_angle_bisector_definition_v0 on midpoint(A, G), orthocenter(A, C, D), midpoint(A, G), A we get angle(midpoint(A, G), A, orthocenter(A, C, D)) == angle(orthocenter(A, C, D), A, midpoint(A, G)) mod 360
By internal_angle_bisector_definition_v0 on G, orthocenter(C, D, G), G, A we get angle(G, A, orthocenter(C, D, G)) == angle(orthocenter(C, D, G), A, G) mod 360
By reverse_direction on center(Circle(A, B, D)), B we get 180 == direction(center(Circle(A, B, D)), B) - direction(B, center(Circle(A, B, D))) mod 360
By perpendicular_angle_conditions_v0 on orthocenter(C, D, G), midpoint(A, G), D we get angle(orthocenter(C, D, G), midpoint(A, G), D) == orientation(D, orthocenter(C, D, G), midpoint(A, G)) mod 360
By perpendicular_angle_conditions_v0 on midpoint(E, F), midpoint(A, G), orthocenter(A, C, D) we get angle(midpoint(E, F), midpoint(A, G), orthocenter(A, C, D)) == orientation(midpoint(A, G), orthocenter(A, C, D), midpoint(E, F)) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(A, G), C, midpoint(A, G), H we get Line(C, H) == internal_angle_bisector(midpoint(A, G), H, midpoint(A, G))
By internal_angle_bisector_definition_v0_r on midpoint(A, G), D, midpoint(A, G), midpoint(E, F) we get Line(D, midpoint(E, F)) == internal_angle_bisector(midpoint(A, G), midpoint(E, F), midpoint(A, G))
By internal_angle_bisector_definition_v0_r on midpoint(E, F), C, midpoint(E, F), midpoint(C, D) we get Line(C, midpoint(C, D)) == internal_angle_bisector(midpoint(E, F), midpoint(C, D), midpoint(E, F))
By collinear_definition on E, orthocenter(C, D, G), D we get orthocenter(C, D, G) in Line(D, E), D in Line(E, orthocenter(C, D, G)), Line(D, E) == Line(E, orthocenter(C, D, G)), 0 == 2 * angle(orthocenter(C, D, G), E, D) mod 360
By collinear_definition on midpoint(A, G), G, orthocenter(C, D, G) we get G in Line(midpoint(A, G), orthocenter(C, D, G)), orthocenter(C, D, G) in Line(G, midpoint(A, G)), Line(G, midpoint(A, G)) == Line(midpoint(A, G), orthocenter(C, D, G)), 0 == 2 * angle(G, midpoint(A, G), orthocenter(C, D, G)) mod 360
By collinear_definition on E, D, orthocenter(C, D, G) we get D in Line(E, orthocenter(C, D, G)), orthocenter(C, D, G) in Line(D, E), Line(D, E) == Line(E, orthocenter(C, D, G)), 0 == 2 * angle(D, E, orthocenter(C, D, G)) mod 360
By collinear_definition on midpoint(A, G), orthocenter(C, D, G), G we get orthocenter(C, D, G) in Line(G, midpoint(A, G)), G in Line(midpoint(A, G), orthocenter(C, D, G)), Line(G, midpoint(A, G)) == Line(midpoint(A, G), orthocenter(C, D, G)), 0 == 2 * angle(orthocenter(C, D, G), midpoint(A, G), G) mod 360
By internal_angle_bisector_definition_v0 on G, orthocenter(C, D, G), I, E we get angle(G, E, orthocenter(C, D, G)) == angle(orthocenter(C, D, G), E, I) mod 360
By reverse_direction on center(Circle(C, F, G)), C we get 180 == direction(center(Circle(C, F, G)), C) - direction(C, center(Circle(C, F, G))) mod 360
By collinear_definition on A, orthocenter(A, C, D), G we get orthocenter(A, C, D) in Line(A, G), G in Line(A, orthocenter(A, C, D)), Line(A, G) == Line(A, orthocenter(A, C, D)), 0 == 2 * angle(orthocenter(A, C, D), A, G) mod 360
By collinear_definition on A, orthocenter(A, C, D), midpoint(A, G) we get orthocenter(A, C, D) in Line(A, midpoint(A, G)), midpoint(A, G) in Line(A, orthocenter(A, C, D)), Line(A, midpoint(A, G)) == Line(A, orthocenter(A, C, D)), 0 == 2 * angle(orthocenter(A, C, D), A, midpoint(A, G)) mod 360
By perpendicular_angle_conditions_v0 on midpoint(C, D), midpoint(A, G), orthocenter(C, D, G) we get angle(midpoint(C, D), midpoint(A, G), orthocenter(C, D, G)) == orientation(midpoint(A, G), orthocenter(C, D, G), midpoint(C, D)) mod 360
By collinear_definition on A, G, orthocenter(C, D, G) we get G in Line(A, orthocenter(C, D, G)), orthocenter(C, D, G) in Line(A, G), Line(A, G) == Line(A, orthocenter(C, D, G)), 0 == 2 * angle(G, A, orthocenter(C, D, G)) mod 360
By collinear_definition on F, D, orthocenter(A, C, D) we get D in Line(F, orthocenter(A, C, D)), orthocenter(A, C, D) in Line(D, F), Line(D, F) == Line(F, orthocenter(A, C, D)), 0 == 2 * angle(D, F, orthocenter(A, C, D)) mod 360
By perpendicular_angle_conditions_v0 on midpoint(C, D), midpoint(A, G), orthocenter(A, C, D) we get angle(midpoint(C, D), midpoint(A, G), orthocenter(A, C, D)) == orientation(midpoint(A, G), orthocenter(A, C, D), midpoint(C, D)) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(A, G), C, midpoint(A, G), midpoint(E, F) we get Line(C, midpoint(E, F)) == internal_angle_bisector(midpoint(A, G), midpoint(E, F), midpoint(A, G))
By isosceles_triangle_altitude_v1 on midpoint(E, F), A, G we get identical(perpendicular_bisector(A, G), internal_angle_bisector(A, midpoint(E, F), G), perpendicular_line(midpoint(E, F), Line(A, G)))
By isosceles_triangle_altitude_v0 on midpoint(C, D), A, G we get identical(perpendicular_bisector(A, G), internal_angle_bisector(A, midpoint(C, D), G), perpendicular_line(midpoint(C, D), Line(A, G)))
By isosceles_triangle_altitude_v0 on midpoint(A, G), F, E we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, midpoint(A, G), F), perpendicular_line(midpoint(A, G), Line(E, F)))
By isosceles_triangle_altitude_v1 on midpoint(C, D), G, A we get identical(perpendicular_bisector(A, G), internal_angle_bisector(A, midpoint(C, D), G), perpendicular_line(midpoint(C, D), Line(A, G)))
By isosceles_triangle_altitude_v0 on midpoint(E, F), A, G we get identical(perpendicular_bisector(A, G), internal_angle_bisector(A, midpoint(E, F), G), perpendicular_line(midpoint(E, F), Line(A, G)))
By isosceles_triangle_altitude_v3 on midpoint(E, F), A, G we get identical(perpendicular_bisector(A, G), internal_angle_bisector(A, midpoint(E, F), G), perpendicular_line(midpoint(E, F), Line(A, G)))
By isosceles_triangle_altitude_v1 on midpoint(C, D), A, G we get identical(perpendicular_bisector(A, G), internal_angle_bisector(A, midpoint(C, D), G), perpendicular_line(midpoint(C, D), Line(A, G)))
By isosceles_triangle_altitude_v1 on midpoint(A, G), F, E we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, midpoint(A, G), F), perpendicular_line(midpoint(A, G), Line(E, F)))
By isosceles_triangle_altitude_v3 on midpoint(E, F), G, A we get identical(perpendicular_bisector(A, G), internal_angle_bisector(A, midpoint(E, F), G), perpendicular_line(midpoint(E, F), Line(A, G)))
By isosceles_triangle_altitude_v1 on midpoint(A, G), E, F we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, midpoint(A, G), F), perpendicular_line(midpoint(A, G), Line(E, F)))
By isosceles_triangle_altitude_v3 on midpoint(C, D), A, G we get identical(perpendicular_bisector(A, G), internal_angle_bisector(A, midpoint(C, D), G), perpendicular_line(midpoint(C, D), Line(A, G)))
By isosceles_triangle_altitude_v1 on midpoint(E, F), G, A we get identical(perpendicular_bisector(A, G), internal_angle_bisector(A, midpoint(E, F), G), perpendicular_line(midpoint(E, F), Line(A, G)))
By isosceles_triangle_altitude_v3 on midpoint(A, G), E, F we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, midpoint(A, G), F), perpendicular_line(midpoint(A, G), Line(E, F)))
By isosceles_triangle_altitude_v3 on midpoint(A, G), F, E we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, midpoint(A, G), F), perpendicular_line(midpoint(A, G), Line(E, F)))
By isosceles_triangle_altitude_v0 on midpoint(C, D), G, A we get identical(perpendicular_bisector(A, G), internal_angle_bisector(A, midpoint(C, D), G), perpendicular_line(midpoint(C, D), Line(A, G)))
By isosceles_triangle_altitude_v3 on midpoint(C, D), G, A we get identical(perpendicular_bisector(A, G), internal_angle_bisector(A, midpoint(C, D), G), perpendicular_line(midpoint(C, D), Line(A, G)))
By collinear_definition on orthocenter(A, C, D), G, midpoint(A, G) we get G in Line(midpoint(A, G), orthocenter(A, C, D)), midpoint(A, G) in Line(G, orthocenter(A, C, D)), Line(G, orthocenter(A, C, D)) == Line(midpoint(A, G), orthocenter(A, C, D)), 0 == 2 * angle(G, orthocenter(A, C, D), midpoint(A, G)) mod 360
By anti_similar_triangle_basic_properties on D, midpoint(C, D), G, D, midpoint(C, D), A we get angle(D, midpoint(C, D), G) == 0 - angle(D, midpoint(C, D), A) mod 360, angle(midpoint(C, D), G, D) == 0 - angle(midpoint(C, D), A, D) mod 360, angle(G, D, midpoint(C, D)) == 0 - angle(A, D, midpoint(C, D)) mod 360, log(distance(D, midpoint(C, D))) + log(distance(A, midpoint(C, D))) == log(distance(D, midpoint(C, D))) + log(distance(G, midpoint(C, D))), log(distance(A, midpoint(C, D))) + log(distance(D, G)) == log(distance(G, midpoint(C, D))) + log(distance(A, D)), log(distance(A, D)) + log(distance(D, midpoint(C, D))) == log(distance(D, G)) + log(distance(D, midpoint(C, D)))
By altitude_definition on C, orthocenter(C, D, G), A, Line(C, D) we get Line(C, D) == altitude(C, A, orthocenter(C, D, G))
By altitude_definition on midpoint(C, D), A, orthocenter(A, C, D), Line(C, D) we get Line(C, D) == altitude(midpoint(C, D), A, orthocenter(A, C, D))
By altitude_definition on D, A, orthocenter(A, C, D), Line(C, D) we get Line(C, D) == altitude(D, A, orthocenter(A, C, D))
By anti_similar_triangle_basic_properties on midpoint(C, D), C, G, midpoint(C, D), C, A we get angle(midpoint(C, D), C, G) == 0 - angle(midpoint(C, D), C, A) mod 360, angle(C, G, midpoint(C, D)) == 0 - angle(C, A, midpoint(C, D)) mod 360, angle(G, midpoint(C, D), C) == 0 - angle(A, midpoint(C, D), C) mod 360, log(distance(C, midpoint(C, D))) + log(distance(A, C)) == log(distance(C, midpoint(C, D))) + log(distance(C, G)), log(distance(A, C)) + log(distance(G, midpoint(C, D))) == log(distance(C, G)) + log(distance(A, midpoint(C, D))), log(distance(A, midpoint(C, D))) + log(distance(C, midpoint(C, D))) == log(distance(G, midpoint(C, D))) + log(distance(C, midpoint(C, D)))
By altitude_definition on C, orthocenter(A, C, D), F, g we get g == altitude(C, F, orthocenter(A, C, D))
By altitude_definition on G, D, orthocenter(C, D, G), f we get f == altitude(G, D, orthocenter(C, D, G))
By anti_similar_triangle_basic_properties on G, D, midpoint(E, F), A, D, midpoint(E, F) we get angle(G, D, midpoint(E, F)) == 0 - angle(A, D, midpoint(E, F)) mod 360, angle(D, midpoint(E, F), G) == 0 - angle(D, midpoint(E, F), A) mod 360, angle(midpoint(E, F), G, D) == 0 - angle(midpoint(E, F), A, D) mod 360, log(distance(A, D)) + log(distance(D, midpoint(E, F))) == log(distance(D, G)) + log(distance(D, midpoint(E, F))), log(distance(D, midpoint(E, F))) + log(distance(A, midpoint(E, F))) == log(distance(D, midpoint(E, F))) + log(distance(G, midpoint(E, F))), log(distance(A, midpoint(E, F))) + log(distance(D, G)) == log(distance(G, midpoint(E, F))) + log(distance(A, D))
By sas_anti_congruence on D, center(Circle(A, B, D)), A, A, center(Circle(A, B, D)), D we get anti_congruent_triangles(A, D, center(Circle(A, B, D)), D, A, center(Circle(A, B, D)))
By isosceles_triangle_properties on center(Circle(A, B, D)), D, B we get distance(B, center(Circle(A, B, D))) == distance(D, center(Circle(A, B, D))), angle(D, B, center(Circle(A, B, D))) == angle(center(Circle(A, B, D)), D, B) mod 360
By isosceles_triangle_properties on center(Circle(A, C, E)), A, E we get distance(A, center(Circle(A, C, E))) == distance(E, center(Circle(A, C, E))), angle(A, E, center(Circle(A, C, E))) == angle(center(Circle(A, C, E)), A, E) mod 360
By anti_similar_triangle_basic_properties on C, G, midpoint(E, F), C, A, midpoint(E, F) we get angle(C, G, midpoint(E, F)) == 0 - angle(C, A, midpoint(E, F)) mod 360, angle(G, midpoint(E, F), C) == 0 - angle(A, midpoint(E, F), C) mod 360, angle(midpoint(E, F), C, G) == 0 - angle(midpoint(E, F), C, A) mod 360, log(distance(A, C)) + log(distance(G, midpoint(E, F))) == log(distance(C, G)) + log(distance(A, midpoint(E, F))), log(distance(A, midpoint(E, F))) + log(distance(C, midpoint(E, F))) == log(distance(G, midpoint(E, F))) + log(distance(C, midpoint(E, F))), log(distance(C, midpoint(E, F))) + log(distance(A, C)) == log(distance(C, midpoint(E, F))) + log(distance(C, G))
By altitude_definition on midpoint(C, D), orthocenter(A, C, D), orthocenter(C, D, G), Line(C, D) we get Line(C, D) == altitude(midpoint(C, D), orthocenter(A, C, D), orthocenter(C, D, G))
By isosceles_triangle_properties on midpoint(A, G), F, E we get distance(E, midpoint(A, G)) == distance(F, midpoint(A, G)), angle(F, E, midpoint(A, G)) == angle(midpoint(A, G), F, E) mod 360
By sas_anti_congruence on G, center(Circle(C, F, G)), F, F, center(Circle(C, F, G)), G we get anti_congruent_triangles(F, G, center(Circle(C, F, G)), G, F, center(Circle(C, F, G)))
By anti_similar_triangle_basic_properties on C, midpoint(C, D), G, C, midpoint(C, D), A we get angle(C, midpoint(C, D), G) == 0 - angle(C, midpoint(C, D), A) mod 360, angle(midpoint(C, D), G, C) == 0 - angle(midpoint(C, D), A, C) mod 360, angle(G, C, midpoint(C, D)) == 0 - angle(A, C, midpoint(C, D)) mod 360, log(distance(C, midpoint(C, D))) + log(distance(A, midpoint(C, D))) == log(distance(C, midpoint(C, D))) + log(distance(G, midpoint(C, D))), log(distance(A, midpoint(C, D))) + log(distance(C, G)) == log(distance(G, midpoint(C, D))) + log(distance(A, C)), log(distance(A, C)) + log(distance(C, midpoint(C, D))) == log(distance(C, G)) + log(distance(C, midpoint(C, D)))
By isosceles_triangle_properties on center(Circle(C, F, G)), G, C we get distance(C, center(Circle(C, F, G))) == distance(G, center(Circle(C, F, G))), angle(G, C, center(Circle(C, F, G))) == angle(center(Circle(C, F, G)), G, C) mod 360
By altitude_definition on midpoint(E, F), orthocenter(A, C, D), midpoint(A, G), Line(C, D) we get Line(C, D) == altitude(midpoint(E, F), midpoint(A, G), orthocenter(A, C, D))
By sas_anti_congruence on E, center(Circle(A, C, E)), H, H, center(Circle(A, C, E)), E we get anti_congruent_triangles(E, H, center(Circle(A, C, E)), H, E, center(Circle(A, C, E)))
By isosceles_triangle_properties on center(Circle(A, B, D)), B, D we get distance(B, center(Circle(A, B, D))) == distance(D, center(Circle(A, B, D))), angle(B, D, center(Circle(A, B, D))) == angle(center(Circle(A, B, D)), B, D) mod 360
By altitude_definition on midpoint(E, F), G, orthocenter(A, C, D), Line(C, D) we get Line(C, D) == altitude(midpoint(E, F), G, orthocenter(A, C, D))
By altitude_definition on midpoint(C, D), midpoint(A, G), orthocenter(C, D, G), Line(C, D) we get Line(C, D) == altitude(midpoint(C, D), midpoint(A, G), orthocenter(C, D, G))
By altitude_definition on midpoint(E, F), A, orthocenter(C, D, G), Line(C, D) we get Line(C, D) == altitude(midpoint(E, F), A, orthocenter(C, D, G))
By collinear_definition on orthocenter(C, D, G), G, midpoint(A, G) we get G in Line(midpoint(A, G), orthocenter(C, D, G)), midpoint(A, G) in Line(G, orthocenter(C, D, G)), Line(G, orthocenter(C, D, G)) == Line(midpoint(A, G), orthocenter(C, D, G)), 0 == 2 * angle(G, orthocenter(C, D, G), midpoint(A, G)) mod 360
By anti_similar_triangle_basic_properties on G, midpoint(E, F), D, A, midpoint(E, F), D we get angle(G, midpoint(E, F), D) == 0 - angle(A, midpoint(E, F), D) mod 360, angle(midpoint(E, F), D, G) == 0 - angle(midpoint(E, F), D, A) mod 360, angle(D, G, midpoint(E, F)) == 0 - angle(D, A, midpoint(E, F)) mod 360, log(distance(A, midpoint(E, F))) + log(distance(D, midpoint(E, F))) == log(distance(G, midpoint(E, F))) + log(distance(D, midpoint(E, F))), log(distance(D, midpoint(E, F))) + log(distance(A, D)) == log(distance(D, midpoint(E, F))) + log(distance(D, G)), log(distance(A, D)) + log(distance(G, midpoint(E, F))) == log(distance(D, G)) + log(distance(A, midpoint(E, F)))
By collinear_definition on orthocenter(C, D, G), G, A we get G in Line(A, orthocenter(C, D, G)), A in Line(G, orthocenter(C, D, G)), Line(A, orthocenter(C, D, G)) == Line(G, orthocenter(C, D, G)), 0 == 2 * angle(G, orthocenter(C, D, G), A) mod 360
By altitude_definition on I, E, orthocenter(C, D, G), f we get f == altitude(I, E, orthocenter(C, D, G))
By altitude_definition on midpoint(C, D), G, orthocenter(A, C, D), Line(C, D) we get Line(C, D) == altitude(midpoint(C, D), G, orthocenter(A, C, D))
By anti_similar_triangle_basic_properties on midpoint(C, D), D, A, midpoint(C, D), D, G we get angle(midpoint(C, D), D, A) == 0 - angle(midpoint(C, D), D, G) mod 360, angle(D, A, midpoint(C, D)) == 0 - angle(D, G, midpoint(C, D)) mod 360, angle(A, midpoint(C, D), D) == 0 - angle(G, midpoint(C, D), D) mod 360, log(distance(D, midpoint(C, D))) + log(distance(A, D)) == log(distance(D, midpoint(C, D))) + log(distance(D, G)), log(distance(A, D)) + log(distance(G, midpoint(C, D))) == log(distance(D, G)) + log(distance(A, midpoint(C, D))), log(distance(A, midpoint(C, D))) + log(distance(D, midpoint(C, D))) == log(distance(G, midpoint(C, D))) + log(distance(D, midpoint(C, D)))
By collinear_definition on orthocenter(A, C, D), A, G we get A in Line(G, orthocenter(A, C, D)), G in Line(A, orthocenter(A, C, D)), Line(A, orthocenter(A, C, D)) == Line(G, orthocenter(A, C, D)), 0 == 2 * angle(A, orthocenter(A, C, D), G) mod 360
By sas_anti_congruence on E, center(Circle(A, C, E)), C, C, center(Circle(A, C, E)), E we get anti_congruent_triangles(C, E, center(Circle(A, C, E)), E, C, center(Circle(A, C, E)))
By anti_similar_triangle_basic_properties on G, C, midpoint(E, F), A, C, midpoint(E, F) we get angle(G, C, midpoint(E, F)) == 0 - angle(A, C, midpoint(E, F)) mod 360, angle(C, midpoint(E, F), G) == 0 - angle(C, midpoint(E, F), A) mod 360, angle(midpoint(E, F), G, C) == 0 - angle(midpoint(E, F), A, C) mod 360, log(distance(A, C)) + log(distance(C, midpoint(E, F))) == log(distance(C, G)) + log(distance(C, midpoint(E, F))), log(distance(C, midpoint(E, F))) + log(distance(A, midpoint(E, F))) == log(distance(C, midpoint(E, F))) + log(distance(G, midpoint(E, F))), log(distance(A, midpoint(E, F))) + log(distance(C, G)) == log(distance(G, midpoint(E, F))) + log(distance(A, C))
By altitude_definition on H, orthocenter(C, D, G), midpoint(A, G), Line(C, D) we get Line(C, D) == altitude(H, midpoint(A, G), orthocenter(C, D, G))
By isosceles_triangle_properties on center(Circle(A, B, D)), G, D we get distance(D, center(Circle(A, B, D))) == distance(G, center(Circle(A, B, D))), angle(G, D, center(Circle(A, B, D))) == angle(center(Circle(A, B, D)), G, D) mod 360
By isosceles_triangle_properties on center(Circle(A, B, D)), B, G we get distance(B, center(Circle(A, B, D))) == distance(G, center(Circle(A, B, D))), angle(B, G, center(Circle(A, B, D))) == angle(center(Circle(A, B, D)), B, G) mod 360
By isosceles_triangle_properties on center(Circle(C, F, G)), C, G we get distance(C, center(Circle(C, F, G))) == distance(G, center(Circle(C, F, G))), angle(C, G, center(Circle(C, F, G))) == angle(center(Circle(C, F, G)), C, G) mod 360
By isosceles_triangle_properties on center(Circle(C, F, G)), G, H we get distance(G, center(Circle(C, F, G))) == distance(H, center(Circle(C, F, G))), angle(G, H, center(Circle(C, F, G))) == angle(center(Circle(C, F, G)), G, H) mod 360
By altitude_definition on C, orthocenter(A, C, D), G, Line(C, D) we get Line(C, D) == altitude(C, G, orthocenter(A, C, D))
By altitude_definition on C, midpoint(A, G), orthocenter(A, C, D), Line(C, D) we get Line(C, D) == altitude(C, midpoint(A, G), orthocenter(A, C, D))
By altitude_definition on B, orthocenter(C, D, G), D, f we get f == altitude(B, D, orthocenter(C, D, G))
By sas_anti_congruence on A, center(Circle(A, B, D)), G, G, center(Circle(A, B, D)), A we get anti_congruent_triangles(A, G, center(Circle(A, B, D)), G, A, center(Circle(A, B, D)))
By sas_anti_congruence on H, center(Circle(C, F, G)), C, C, center(Circle(C, F, G)), H we get anti_congruent_triangles(C, H, center(Circle(C, F, G)), H, C, center(Circle(C, F, G)))
By collinear_definition on orthocenter(C, D, G), A, G we get A in Line(G, orthocenter(C, D, G)), G in Line(A, orthocenter(C, D, G)), Line(A, orthocenter(C, D, G)) == Line(G, orthocenter(C, D, G)), 0 == 2 * angle(A, orthocenter(C, D, G), G) mod 360
By sas_anti_congruence on A, center(Circle(A, C, E)), C, C, center(Circle(A, C, E)), A we get anti_congruent_triangles(A, C, center(Circle(A, C, E)), C, A, center(Circle(A, C, E)))
By altitude_definition on H, A, orthocenter(C, D, G), Line(C, D) we get Line(C, D) == altitude(H, A, orthocenter(C, D, G))
By isosceles_triangle_properties on midpoint(A, G), E, F we get distance(E, midpoint(A, G)) == distance(F, midpoint(A, G)), angle(E, F, midpoint(A, G)) == angle(midpoint(A, G), E, F) mod 360
By sas_anti_congruence on D, center(Circle(A, B, D)), B, B, center(Circle(A, B, D)), D we get anti_congruent_triangles(B, D, center(Circle(A, B, D)), D, B, center(Circle(A, B, D)))
By sas_anti_congruence on F, center(Circle(C, F, G)), C, C, center(Circle(C, F, G)), F we get anti_congruent_triangles(C, F, center(Circle(C, F, G)), F, C, center(Circle(C, F, G)))
By collinear_definition on orthocenter(C, D, G), midpoint(A, G), A we get midpoint(A, G) in Line(A, orthocenter(C, D, G)), A in Line(midpoint(A, G), orthocenter(C, D, G)), Line(A, orthocenter(C, D, G)) == Line(midpoint(A, G), orthocenter(C, D, G)), 0 == 2 * angle(midpoint(A, G), orthocenter(C, D, G), A) mod 360
By altitude_definition on A, orthocenter(A, C, D), F, g we get g == altitude(A, F, orthocenter(A, C, D))
By altitude_definition on G, orthocenter(C, D, G), C, Line(D, G) we get Line(D, G) == altitude(G, C, orthocenter(C, D, G))
By sas_anti_congruence on F, center(Circle(C, F, G)), G, G, center(Circle(C, F, G)), F we get anti_congruent_triangles(F, G, center(Circle(C, F, G)), G, F, center(Circle(C, F, G)))
By altitude_definition on D, orthocenter(A, C, D), midpoint(A, G), Line(C, D) we get Line(C, D) == altitude(D, midpoint(A, G), orthocenter(A, C, D))
By isosceles_triangle_properties on center(Circle(A, C, E)), C, H we get distance(C, center(Circle(A, C, E))) == distance(H, center(Circle(A, C, E))), angle(C, H, center(Circle(A, C, E))) == angle(center(Circle(A, C, E)), C, H) mod 360
By sas_anti_congruence on E, center(Circle(A, C, E)), A, A, center(Circle(A, C, E)), E we get anti_congruent_triangles(A, E, center(Circle(A, C, E)), E, A, center(Circle(A, C, E)))
By collinear_definition on orthocenter(A, C, D), D, F we get D in Line(F, orthocenter(A, C, D)), F in Line(D, orthocenter(A, C, D)), Line(D, orthocenter(A, C, D)) == Line(F, orthocenter(A, C, D)), 0 == 2 * angle(D, orthocenter(A, C, D), F) mod 360
By sas_anti_congruence on A, center(Circle(A, B, D)), B, B, center(Circle(A, B, D)), A we get anti_congruent_triangles(A, B, center(Circle(A, B, D)), B, A, center(Circle(A, B, D)))
By altitude_definition on C, A, orthocenter(A, C, D), Line(C, D) we get Line(C, D) == altitude(C, A, orthocenter(A, C, D))
By isosceles_triangle_properties on center(Circle(C, F, G)), H, C we get distance(C, center(Circle(C, F, G))) == distance(H, center(Circle(C, F, G))), angle(H, C, center(Circle(C, F, G))) == angle(center(Circle(C, F, G)), H, C) mod 360
By isosceles_triangle_properties on center(Circle(A, C, E)), E, A we get distance(A, center(Circle(A, C, E))) == distance(E, center(Circle(A, C, E))), angle(E, A, center(Circle(A, C, E))) == angle(center(Circle(A, C, E)), E, A) mod 360
By altitude_definition on midpoint(C, D), midpoint(A, G), orthocenter(A, C, D), Line(C, D) we get Line(C, D) == altitude(midpoint(C, D), midpoint(A, G), orthocenter(A, C, D))
By sas_anti_congruence on D, center(Circle(A, B, D)), G, G, center(Circle(A, B, D)), D we get anti_congruent_triangles(D, G, center(Circle(A, B, D)), G, D, center(Circle(A, B, D)))
By collinear_definition on orthocenter(C, D, G), D, E we get D in Line(E, orthocenter(C, D, G)), E in Line(D, orthocenter(C, D, G)), Line(D, orthocenter(C, D, G)) == Line(E, orthocenter(C, D, G)), 0 == 2 * angle(D, orthocenter(C, D, G), E) mod 360
By collinear_definition on orthocenter(A, C, D), midpoint(A, G), A we get midpoint(A, G) in Line(A, orthocenter(A, C, D)), A in Line(midpoint(A, G), orthocenter(A, C, D)), Line(A, orthocenter(A, C, D)) == Line(midpoint(A, G), orthocenter(A, C, D)), 0 == 2 * angle(midpoint(A, G), orthocenter(A, C, D), A) mod 360
By isosceles_triangle_properties on center(Circle(A, B, D)), A, G we get distance(A, center(Circle(A, B, D))) == distance(G, center(Circle(A, B, D))), angle(A, G, center(Circle(A, B, D))) == angle(center(Circle(A, B, D)), A, G) mod 360
By altitude_definition on H, orthocenter(A, C, D), orthocenter(C, D, G), Line(C, D) we get Line(C, D) == altitude(H, orthocenter(A, C, D), orthocenter(C, D, G))
By sas_anti_congruence on H, center(Circle(A, C, E)), E, E, center(Circle(A, C, E)), H we get anti_congruent_triangles(E, H, center(Circle(A, C, E)), H, E, center(Circle(A, C, E)))
By sas_anti_congruence on G, center(Circle(A, B, D)), B, B, center(Circle(A, B, D)), G we get anti_congruent_triangles(B, G, center(Circle(A, B, D)), G, B, center(Circle(A, B, D)))
By altitude_definition on midpoint(E, F), A, orthocenter(A, C, D), Line(C, D) we get Line(C, D) == altitude(midpoint(E, F), A, orthocenter(A, C, D))
By isosceles_triangle_properties on center(Circle(C, F, G)), C, F we get distance(C, center(Circle(C, F, G))) == distance(F, center(Circle(C, F, G))), angle(C, F, center(Circle(C, F, G))) == angle(center(Circle(C, F, G)), C, F) mod 360
By isosceles_triangle_properties on center(Circle(C, F, G)), F, G we get distance(F, center(Circle(C, F, G))) == distance(G, center(Circle(C, F, G))), angle(F, G, center(Circle(C, F, G))) == angle(center(Circle(C, F, G)), F, G) mod 360
By sas_anti_congruence on G, center(Circle(A, B, D)), D, D, center(Circle(A, B, D)), G we get anti_congruent_triangles(D, G, center(Circle(A, B, D)), G, D, center(Circle(A, B, D)))
By isosceles_triangle_properties on center(Circle(C, F, G)), H, G we get distance(G, center(Circle(C, F, G))) == distance(H, center(Circle(C, F, G))), angle(H, G, center(Circle(C, F, G))) == angle(center(Circle(C, F, G)), H, G) mod 360
By altitude_definition on midpoint(C, D), G, orthocenter(C, D, G), Line(C, D) we get Line(C, D) == altitude(midpoint(C, D), G, orthocenter(C, D, G))
By altitude_definition on C, orthocenter(A, C, D), D, g we get g == altitude(C, D, orthocenter(A, C, D))
By sas_anti_congruence on A, center(Circle(A, C, E)), H, H, center(Circle(A, C, E)), A we get anti_congruent_triangles(A, H, center(Circle(A, C, E)), H, A, center(Circle(A, C, E)))
By altitude_definition on A, orthocenter(A, C, D), D, g we get g == altitude(A, D, orthocenter(A, C, D))
By isosceles_triangle_properties on center(Circle(A, B, D)), D, A we get distance(A, center(Circle(A, B, D))) == distance(D, center(Circle(A, B, D))), angle(D, A, center(Circle(A, B, D))) == angle(center(Circle(A, B, D)), D, A) mod 360
By altitude_definition on C, midpoint(A, G), orthocenter(C, D, G), Line(C, D) we get Line(C, D) == altitude(C, midpoint(A, G), orthocenter(C, D, G))
By altitude_definition on H, G, orthocenter(C, D, G), Line(C, D) we get Line(C, D) == altitude(H, G, orthocenter(C, D, G))
By altitude_definition on C, orthocenter(C, D, G), E, f we get f == altitude(C, E, orthocenter(C, D, G))
By altitude_definition on D, A, orthocenter(C, D, G), Line(C, D) we get Line(C, D) == altitude(D, A, orthocenter(C, D, G))
By sas_anti_congruence on A, center(Circle(A, C, E)), E, E, center(Circle(A, C, E)), A we get anti_congruent_triangles(A, E, center(Circle(A, C, E)), E, A, center(Circle(A, C, E)))
By altitude_definition on midpoint(E, F), orthocenter(C, D, G), orthocenter(A, C, D), Line(C, D) we get Line(C, D) == altitude(midpoint(E, F), orthocenter(A, C, D), orthocenter(C, D, G))
By altitude_definition on J, orthocenter(A, C, D), C, h we get h == altitude(J, C, orthocenter(A, C, D))
By altitude_definition on C, D, orthocenter(C, D, G), f we get f == altitude(C, D, orthocenter(C, D, G))
By altitude_definition on G, E, orthocenter(C, D, G), f we get f == altitude(G, E, orthocenter(C, D, G))
By collinear_definition on orthocenter(A, C, D), midpoint(A, G), G we get midpoint(A, G) in Line(G, orthocenter(A, C, D)), G in Line(midpoint(A, G), orthocenter(A, C, D)), Line(G, orthocenter(A, C, D)) == Line(midpoint(A, G), orthocenter(A, C, D)), 0 == 2 * angle(midpoint(A, G), orthocenter(A, C, D), G) mod 360
By isosceles_triangle_properties on center(Circle(A, C, E)), A, C we get distance(A, center(Circle(A, C, E))) == distance(C, center(Circle(A, C, E))), angle(A, C, center(Circle(A, C, E))) == angle(center(Circle(A, C, E)), A, C) mod 360
By isosceles_triangle_properties on center(Circle(C, F, G)), F, C we get distance(C, center(Circle(C, F, G))) == distance(F, center(Circle(C, F, G))), angle(F, C, center(Circle(C, F, G))) == angle(center(Circle(C, F, G)), F, C) mod 360
By altitude_definition on C, orthocenter(C, D, G), orthocenter(A, C, D), Line(C, D) we get Line(C, D) == altitude(C, orthocenter(A, C, D), orthocenter(C, D, G))
By altitude_definition on D, C, orthocenter(A, C, D), h we get h == altitude(D, C, orthocenter(A, C, D))
By altitude_definition on H, orthocenter(A, C, D), G, Line(C, D) we get Line(C, D) == altitude(H, G, orthocenter(A, C, D))
By altitude_definition on D, orthocenter(A, C, D), G, Line(C, D) we get Line(C, D) == altitude(D, G, orthocenter(A, C, D))
By isosceles_triangle_properties on center(Circle(A, C, E)), C, A we get distance(A, center(Circle(A, C, E))) == distance(C, center(Circle(A, C, E))), angle(C, A, center(Circle(A, C, E))) == angle(center(Circle(A, C, E)), C, A) mod 360
By sas_anti_congruence on H, center(Circle(C, F, G)), G, G, center(Circle(C, F, G)), H we get anti_congruent_triangles(G, H, center(Circle(C, F, G)), H, G, center(Circle(C, F, G)))
By altitude_definition on B, E, orthocenter(C, D, G), f we get f == altitude(B, E, orthocenter(C, D, G))
By collinear_definition on orthocenter(A, C, D), G, A we get G in Line(A, orthocenter(A, C, D)), A in Line(G, orthocenter(A, C, D)), Line(A, orthocenter(A, C, D)) == Line(G, orthocenter(A, C, D)), 0 == 2 * angle(G, orthocenter(A, C, D), A) mod 360
By sas_anti_congruence on C, center(Circle(A, C, E)), H, H, center(Circle(A, C, E)), C we get anti_congruent_triangles(C, H, center(Circle(A, C, E)), H, C, center(Circle(A, C, E)))
By isosceles_triangle_properties on center(Circle(A, C, E)), A, H we get distance(A, center(Circle(A, C, E))) == distance(H, center(Circle(A, C, E))), angle(A, H, center(Circle(A, C, E))) == angle(center(Circle(A, C, E)), A, H) mod 360
By sas_anti_congruence on C, center(Circle(A, C, E)), A, A, center(Circle(A, C, E)), C we get anti_congruent_triangles(A, C, center(Circle(A, C, E)), C, A, center(Circle(A, C, E)))
By altitude_definition on I, C, orthocenter(A, C, D), h we get h == altitude(I, C, orthocenter(A, C, D))
By altitude_definition on H, orthocenter(A, C, D), midpoint(A, G), Line(C, D) we get Line(C, D) == altitude(H, midpoint(A, G), orthocenter(A, C, D))
By altitude_definition on H, orthocenter(A, C, D), A, Line(C, D) we get Line(C, D) == altitude(H, A, orthocenter(A, C, D))
By altitude_definition on D, orthocenter(C, D, G), G, Line(C, D) we get Line(C, D) == altitude(D, G, orthocenter(C, D, G))
By sas_anti_congruence on C, center(Circle(C, F, G)), F, F, center(Circle(C, F, G)), C we get anti_congruent_triangles(C, F, center(Circle(C, F, G)), F, C, center(Circle(C, F, G)))
By isosceles_triangle_properties on center(Circle(C, F, G)), G, F we get distance(F, center(Circle(C, F, G))) == distance(G, center(Circle(C, F, G))), angle(G, F, center(Circle(C, F, G))) == angle(center(Circle(C, F, G)), G, F) mod 360
By altitude_definition on D, C, orthocenter(C, D, G), Line(D, G) we get Line(D, G) == altitude(D, C, orthocenter(C, D, G))
By sas_anti_congruence on F, center(Circle(C, F, G)), H, H, center(Circle(C, F, G)), F we get anti_congruent_triangles(F, H, center(Circle(C, F, G)), H, F, center(Circle(C, F, G)))
By altitude_definition on midpoint(E, F), midpoint(A, G), orthocenter(C, D, G), Line(C, D) we get Line(C, D) == altitude(midpoint(E, F), midpoint(A, G), orthocenter(C, D, G))
By isosceles_triangle_properties on center(Circle(A, B, D)), D, G we get distance(D, center(Circle(A, B, D))) == distance(G, center(Circle(A, B, D))), angle(D, G, center(Circle(A, B, D))) == angle(center(Circle(A, B, D)), D, G) mod 360
By isosceles_triangle_properties on center(Circle(C, F, G)), C, H we get distance(C, center(Circle(C, F, G))) == distance(H, center(Circle(C, F, G))), angle(C, H, center(Circle(C, F, G))) == angle(center(Circle(C, F, G)), C, H) mod 360
By sas_anti_congruence on H, center(Circle(A, C, E)), C, C, center(Circle(A, C, E)), H we get anti_congruent_triangles(C, H, center(Circle(A, C, E)), H, C, center(Circle(A, C, E)))
By altitude_definition on C, G, orthocenter(C, D, G), Line(C, D) we get Line(C, D) == altitude(C, G, orthocenter(C, D, G))
By isosceles_triangle_properties on center(Circle(A, C, E)), H, E we get distance(E, center(Circle(A, C, E))) == distance(H, center(Circle(A, C, E))), angle(H, E, center(Circle(A, C, E))) == angle(center(Circle(A, C, E)), H, E) mod 360
By sas_anti_congruence on C, center(Circle(C, F, G)), H, H, center(Circle(C, F, G)), C we get anti_congruent_triangles(C, H, center(Circle(C, F, G)), H, C, center(Circle(C, F, G)))
By altitude_definition on I, D, orthocenter(C, D, G), f we get f == altitude(I, D, orthocenter(C, D, G))
By altitude_definition on A, C, orthocenter(A, C, D), h we get h == altitude(A, C, orthocenter(A, C, D))
By altitude_definition on D, orthocenter(C, D, G), midpoint(A, G), Line(C, D) we get Line(C, D) == altitude(D, midpoint(A, G), orthocenter(C, D, G))
By isosceles_triangle_properties on center(Circle(A, B, D)), B, A we get distance(A, center(Circle(A, B, D))) == distance(B, center(Circle(A, B, D))), angle(B, A, center(Circle(A, B, D))) == angle(center(Circle(A, B, D)), B, A) mod 360
By sas_anti_congruence on C, center(Circle(C, F, G)), G, G, center(Circle(C, F, G)), C we get anti_congruent_triangles(C, G, center(Circle(C, F, G)), G, C, center(Circle(C, F, G)))
By altitude_definition on D, orthocenter(C, D, G), orthocenter(A, C, D), Line(C, D) we get Line(C, D) == altitude(D, orthocenter(A, C, D), orthocenter(C, D, G))
By isosceles_triangle_properties on center(Circle(A, C, E)), E, H we get distance(E, center(Circle(A, C, E))) == distance(H, center(Circle(A, C, E))), angle(E, H, center(Circle(A, C, E))) == angle(center(Circle(A, C, E)), E, H) mod 360
By sas_anti_congruence on B, center(Circle(A, B, D)), G, G, center(Circle(A, B, D)), B we get anti_congruent_triangles(B, G, center(Circle(A, B, D)), G, B, center(Circle(A, B, D)))
By collinear_definition on orthocenter(C, D, G), A, midpoint(A, G) we get A in Line(midpoint(A, G), orthocenter(C, D, G)), midpoint(A, G) in Line(A, orthocenter(C, D, G)), Line(A, orthocenter(C, D, G)) == Line(midpoint(A, G), orthocenter(C, D, G)), 0 == 2 * angle(A, orthocenter(C, D, G), midpoint(A, G)) mod 360
By sas_anti_congruence on H, center(Circle(C, F, G)), F, F, center(Circle(C, F, G)), H we get anti_congruent_triangles(F, H, center(Circle(C, F, G)), H, F, center(Circle(C, F, G)))
By isosceles_triangle_properties on center(Circle(A, C, E)), E, C we get distance(C, center(Circle(A, C, E))) == distance(E, center(Circle(A, C, E))), angle(E, C, center(Circle(A, C, E))) == angle(center(Circle(A, C, E)), E, C) mod 360
By altitude_definition on midpoint(E, F), G, orthocenter(C, D, G), Line(C, D) we get Line(C, D) == altitude(midpoint(E, F), G, orthocenter(C, D, G))
By sas_anti_congruence on G, center(Circle(C, F, G)), H, H, center(Circle(C, F, G)), G we get anti_congruent_triangles(G, H, center(Circle(C, F, G)), H, G, center(Circle(C, F, G)))
By isosceles_triangle_properties on center(Circle(C, F, G)), H, F we get distance(F, center(Circle(C, F, G))) == distance(H, center(Circle(C, F, G))), angle(H, F, center(Circle(C, F, G))) == angle(center(Circle(C, F, G)), H, F) mod 360
By isosceles_triangle_properties on center(Circle(A, B, D)), A, D we get distance(A, center(Circle(A, B, D))) == distance(D, center(Circle(A, B, D))), angle(A, D, center(Circle(A, B, D))) == angle(center(Circle(A, B, D)), A, D) mod 360
By sas_anti_congruence on B, center(Circle(A, B, D)), D, D, center(Circle(A, B, D)), B we get anti_congruent_triangles(B, D, center(Circle(A, B, D)), D, B, center(Circle(A, B, D)))
By sas_anti_congruence on C, center(Circle(A, C, E)), E, E, center(Circle(A, C, E)), C we get anti_congruent_triangles(C, E, center(Circle(A, C, E)), E, C, center(Circle(A, C, E)))
By altitude_definition on midpoint(C, D), orthocenter(C, D, G), A, Line(C, D) we get Line(C, D) == altitude(midpoint(C, D), A, orthocenter(C, D, G))
By collinear_definition on orthocenter(C, D, G), E, D we get E in Line(D, orthocenter(C, D, G)), D in Line(E, orthocenter(C, D, G)), Line(D, orthocenter(C, D, G)) == Line(E, orthocenter(C, D, G)), 0 == 2 * angle(E, orthocenter(C, D, G), D) mod 360
By collinear_definition on orthocenter(A, C, D), F, D we get F in Line(D, orthocenter(A, C, D)), D in Line(F, orthocenter(A, C, D)), Line(D, orthocenter(A, C, D)) == Line(F, orthocenter(A, C, D)), 0 == 2 * angle(F, orthocenter(A, C, D), D) mod 360
By collinear_definition on orthocenter(A, C, D), A, midpoint(A, G) we get A in Line(midpoint(A, G), orthocenter(A, C, D)), midpoint(A, G) in Line(A, orthocenter(A, C, D)), Line(A, orthocenter(A, C, D)) == Line(midpoint(A, G), orthocenter(A, C, D)), 0 == 2 * angle(A, orthocenter(A, C, D), midpoint(A, G)) mod 360
By sas_anti_congruence on B, center(Circle(A, B, D)), A, A, center(Circle(A, B, D)), B we get anti_congruent_triangles(A, B, center(Circle(A, B, D)), B, A, center(Circle(A, B, D)))
By isosceles_triangle_properties on center(Circle(A, C, E)), H, A we get distance(A, center(Circle(A, C, E))) == distance(H, center(Circle(A, C, E))), angle(H, A, center(Circle(A, C, E))) == angle(center(Circle(A, C, E)), H, A) mod 360
By collinear_definition on orthocenter(C, D, G), midpoint(A, G), G we get midpoint(A, G) in Line(G, orthocenter(C, D, G)), G in Line(midpoint(A, G), orthocenter(C, D, G)), Line(G, orthocenter(C, D, G)) == Line(midpoint(A, G), orthocenter(C, D, G)), 0 == 2 * angle(midpoint(A, G), orthocenter(C, D, G), G) mod 360
By isosceles_triangle_properties on center(Circle(A, C, E)), C, E we get distance(C, center(Circle(A, C, E))) == distance(E, center(Circle(A, C, E))), angle(C, E, center(Circle(A, C, E))) == angle(center(Circle(A, C, E)), C, E) mod 360
By isosceles_triangle_properties on center(Circle(A, C, E)), H, C we get distance(C, center(Circle(A, C, E))) == distance(H, center(Circle(A, C, E))), angle(H, C, center(Circle(A, C, E))) == angle(center(Circle(A, C, E)), H, C) mod 360
By sas_anti_congruence on G, center(Circle(A, B, D)), A, A, center(Circle(A, B, D)), G we get anti_congruent_triangles(A, G, center(Circle(A, B, D)), G, A, center(Circle(A, B, D)))
By isosceles_triangle_properties on center(Circle(C, F, G)), F, H we get distance(F, center(Circle(C, F, G))) == distance(H, center(Circle(C, F, G))), angle(F, H, center(Circle(C, F, G))) == angle(center(Circle(C, F, G)), F, H) mod 360
By isosceles_triangle_properties on center(Circle(A, B, D)), G, A we get distance(A, center(Circle(A, B, D))) == distance(G, center(Circle(A, B, D))), angle(G, A, center(Circle(A, B, D))) == angle(center(Circle(A, B, D)), G, A) mod 360
By sas_anti_congruence on H, center(Circle(A, C, E)), A, A, center(Circle(A, C, E)), H we get anti_congruent_triangles(A, H, center(Circle(A, C, E)), H, A, center(Circle(A, C, E)))
By sas_anti_congruence on A, center(Circle(A, B, D)), D, D, center(Circle(A, B, D)), A we get anti_congruent_triangles(A, D, center(Circle(A, B, D)), D, A, center(Circle(A, B, D)))
By isosceles_triangle_properties on center(Circle(A, B, D)), G, B we get distance(B, center(Circle(A, B, D))) == distance(G, center(Circle(A, B, D))), angle(G, B, center(Circle(A, B, D))) == angle(center(Circle(A, B, D)), G, B) mod 360
By isosceles_triangle_properties on center(Circle(A, B, D)), A, B we get distance(A, center(Circle(A, B, D))) == distance(B, center(Circle(A, B, D))), angle(A, B, center(Circle(A, B, D))) == angle(center(Circle(A, B, D)), A, B) mod 360
By sas_anti_congruence on G, center(Circle(C, F, G)), C, C, center(Circle(C, F, G)), G we get anti_congruent_triangles(C, G, center(Circle(C, F, G)), G, C, center(Circle(C, F, G)))
By isosceles_triangle_altitude_v3 on center(Circle(A, B, D)), G, A we get identical(perpendicular_bisector(A, G), internal_angle_bisector(A, center(Circle(A, B, D)), G), perpendicular_line(center(Circle(A, B, D)), Line(A, G)))
By isosceles_triangle_altitude_v3 on center(Circle(A, B, D)), A, G we get identical(perpendicular_bisector(A, G), internal_angle_bisector(A, center(Circle(A, B, D)), G), perpendicular_line(center(Circle(A, B, D)), Line(A, G)))
By sas_anti_congruence on H, center(Circle(C, F, G)), F, H, center(Circle(C, F, G)), G we get anti_congruent_triangles(F, H, center(Circle(C, F, G)), G, H, center(Circle(C, F, G)))
By sas_anti_congruence on F, center(Circle(C, F, G)), H, G, center(Circle(C, F, G)), H we get anti_congruent_triangles(F, H, center(Circle(C, F, G)), G, H, center(Circle(C, F, G)))
By sas_anti_congruence on H, center(Circle(C, F, G)), G, H, center(Circle(C, F, G)), F we get anti_congruent_triangles(F, H, center(Circle(C, F, G)), G, H, center(Circle(C, F, G)))
By perpendicular_bisector_sufficient_conditions on E, A, H, center(Circle(A, C, E)) we get perpendicular_bisector(A, E) == Line(H, center(Circle(A, C, E)))
By power_of_a_point_definition on orthocenter(C, D, G), A, G, Circle(A, B, D) we get log(power_of_a_point(orthocenter(C, D, G), Circle(A, B, D))) == log(distance(A, orthocenter(C, D, G))) + log(distance(G, orthocenter(C, D, G)))
By sas_congruence on G, center(Circle(C, F, G)), H, H, center(Circle(C, F, G)), F we get congruent_triangles(F, H, center(Circle(C, F, G)), H, G, center(Circle(C, F, G)))
By perpendicular_bisector_sufficient_conditions on G, F, H, center(Circle(C, F, G)) we get perpendicular_bisector(F, G) == Line(H, center(Circle(C, F, G)))
By sas_anti_congruence on H, center(Circle(A, C, E)), A, H, center(Circle(A, C, E)), E we get anti_congruent_triangles(A, H, center(Circle(A, C, E)), E, H, center(Circle(A, C, E)))
By sas_congruence on H, center(Circle(A, C, E)), A, E, center(Circle(A, C, E)), H we get congruent_triangles(A, H, center(Circle(A, C, E)), H, E, center(Circle(A, C, E)))
By sas_congruence on H, center(Circle(C, F, G)), G, F, center(Circle(C, F, G)), H we get congruent_triangles(F, H, center(Circle(C, F, G)), H, G, center(Circle(C, F, G)))
By sas_congruence on A, center(Circle(A, C, E)), H, H, center(Circle(A, C, E)), E we get congruent_triangles(A, H, center(Circle(A, C, E)), H, E, center(Circle(A, C, E)))
By power_of_a_point_definition on orthocenter(A, C, D), G, A, c we get log(power_of_a_point(orthocenter(A, C, D), c)) == log(distance(G, orthocenter(A, C, D))) + log(distance(A, orthocenter(A, C, D)))
By sas_anti_congruence on G, center(Circle(A, B, D)), D, A, center(Circle(A, B, D)), D we get anti_congruent_triangles(A, D, center(Circle(A, B, D)), G, D, center(Circle(A, B, D)))
By sas_anti_congruence on A, center(Circle(A, C, E)), H, E, center(Circle(A, C, E)), H we get anti_congruent_triangles(A, H, center(Circle(A, C, E)), E, H, center(Circle(A, C, E)))
By sas_anti_congruence on H, center(Circle(A, C, E)), E, H, center(Circle(A, C, E)), A we get anti_congruent_triangles(A, H, center(Circle(A, C, E)), E, H, center(Circle(A, C, E)))
By sas_anti_congruence on D, center(Circle(A, B, D)), G, D, center(Circle(A, B, D)), A we get anti_congruent_triangles(A, D, center(Circle(A, B, D)), G, D, center(Circle(A, B, D)))
By sas_congruence on A, center(Circle(A, B, D)), D, D, center(Circle(A, B, D)), G we get congruent_triangles(A, D, center(Circle(A, B, D)), D, G, center(Circle(A, B, D)))
By sas_congruence on E, center(Circle(A, C, E)), H, H, center(Circle(A, C, E)), A we get congruent_triangles(A, H, center(Circle(A, C, E)), H, E, center(Circle(A, C, E)))
By power_of_a_point_definition on orthocenter(C, D, G), A, G, c we get log(power_of_a_point(orthocenter(C, D, G), c)) == log(distance(A, orthocenter(C, D, G))) + log(distance(G, orthocenter(C, D, G)))
By sas_anti_congruence on A, center(Circle(A, B, D)), D, G, center(Circle(A, B, D)), D we get anti_congruent_triangles(A, D, center(Circle(A, B, D)), G, D, center(Circle(A, B, D)))
By sas_anti_congruence on D, center(Circle(A, B, D)), A, D, center(Circle(A, B, D)), G we get anti_congruent_triangles(A, D, center(Circle(A, B, D)), G, D, center(Circle(A, B, D)))
By sas_anti_congruence on G, center(Circle(C, F, G)), H, F, center(Circle(C, F, G)), H we get anti_congruent_triangles(F, H, center(Circle(C, F, G)), G, H, center(Circle(C, F, G)))
By sas_congruence on D, center(Circle(A, B, D)), A, G, center(Circle(A, B, D)), D we get congruent_triangles(A, D, center(Circle(A, B, D)), D, G, center(Circle(A, B, D)))
By sas_congruence on F, center(Circle(C, F, G)), H, H, center(Circle(C, F, G)), G we get congruent_triangles(F, H, center(Circle(C, F, G)), H, G, center(Circle(C, F, G)))
By sas_congruence on H, center(Circle(C, F, G)), F, G, center(Circle(C, F, G)), H we get congruent_triangles(F, H, center(Circle(C, F, G)), H, G, center(Circle(C, F, G)))
By sas_congruence on D, center(Circle(A, B, D)), G, A, center(Circle(A, B, D)), D we get congruent_triangles(A, D, center(Circle(A, B, D)), D, G, center(Circle(A, B, D)))
By sas_anti_congruence on E, center(Circle(A, C, E)), H, A, center(Circle(A, C, E)), H we get anti_congruent_triangles(A, H, center(Circle(A, C, E)), E, H, center(Circle(A, C, E)))
By power_of_a_point_definition on orthocenter(A, C, D), A, G, Circle(A, B, D) we get log(power_of_a_point(orthocenter(A, C, D), Circle(A, B, D))) == log(distance(A, orthocenter(A, C, D))) + log(distance(G, orthocenter(A, C, D)))
By sas_congruence on H, center(Circle(A, C, E)), E, A, center(Circle(A, C, E)), H we get congruent_triangles(A, H, center(Circle(A, C, E)), H, E, center(Circle(A, C, E)))
By sas_congruence on G, center(Circle(A, B, D)), D, D, center(Circle(A, B, D)), A we get congruent_triangles(A, D, center(Circle(A, B, D)), D, G, center(Circle(A, B, D)))
By sas_anti_similarity on E, D, midpoint(A, G), F, D, midpoint(A, G) we get anti_similar_triangles(D, E, midpoint(A, G), D, F, midpoint(A, G))
By sas_anti_congruence on midpoint(A, G), H, F, midpoint(A, G), H, E we get anti_congruent_triangles(E, H, midpoint(A, G), F, H, midpoint(A, G))
By sas_anti_congruence on F, H, midpoint(A, G), E, H, midpoint(A, G) we get anti_congruent_triangles(E, H, midpoint(A, G), F, H, midpoint(A, G))
By sas_anti_similarity on F, H, midpoint(A, G), E, H, midpoint(A, G) we get anti_similar_triangles(E, H, midpoint(A, G), F, H, midpoint(A, G))
By power_of_a_point_definition on orthocenter(A, C, D), F, D, Circle(C, D, E) we get log(power_of_a_point(orthocenter(A, C, D), Circle(C, D, E))) == log(distance(F, orthocenter(A, C, D))) + log(distance(D, orthocenter(A, C, D)))
By sas_anti_similarity on midpoint(A, G), D, F, midpoint(A, G), D, E we get anti_similar_triangles(D, E, midpoint(A, G), D, F, midpoint(A, G))
By sas_anti_similarity on F, C, midpoint(A, G), E, C, midpoint(A, G) we get anti_similar_triangles(C, E, midpoint(A, G), C, F, midpoint(A, G))
By sas_anti_congruence on midpoint(A, G), D, E, midpoint(A, G), D, F we get anti_congruent_triangles(D, E, midpoint(A, G), D, F, midpoint(A, G))
By sas_anti_similarity on F, D, midpoint(A, G), E, D, midpoint(A, G) we get anti_similar_triangles(D, E, midpoint(A, G), D, F, midpoint(A, G))
By power_of_a_point_definition on orthocenter(C, D, G), E, D, Circle(C, D, E) we get log(power_of_a_point(orthocenter(C, D, G), Circle(C, D, E))) == log(distance(E, orthocenter(C, D, G))) + log(distance(D, orthocenter(C, D, G)))
By sas_anti_congruence on midpoint(A, G), C, F, midpoint(A, G), C, E we get anti_congruent_triangles(C, E, midpoint(A, G), C, F, midpoint(A, G))
By sas_anti_congruence on F, C, midpoint(A, G), E, C, midpoint(A, G) we get anti_congruent_triangles(C, E, midpoint(A, G), C, F, midpoint(A, G))
By sas_anti_congruence on E, H, midpoint(A, G), F, H, midpoint(A, G) we get anti_congruent_triangles(E, H, midpoint(A, G), F, H, midpoint(A, G))
By sas_anti_congruence on midpoint(A, G), H, E, midpoint(A, G), H, F we get anti_congruent_triangles(E, H, midpoint(A, G), F, H, midpoint(A, G))
By sas_anti_similarity on midpoint(A, G), H, F, midpoint(A, G), H, E we get anti_similar_triangles(E, H, midpoint(A, G), F, H, midpoint(A, G))
By sas_anti_congruence on midpoint(A, G), C, E, midpoint(A, G), C, F we get anti_congruent_triangles(C, E, midpoint(A, G), C, F, midpoint(A, G))
By sas_anti_similarity on midpoint(A, G), D, E, midpoint(A, G), D, F we get anti_similar_triangles(D, E, midpoint(A, G), D, F, midpoint(A, G))
By sas_anti_congruence on F, D, midpoint(A, G), E, D, midpoint(A, G) we get anti_congruent_triangles(D, E, midpoint(A, G), D, F, midpoint(A, G))
By sas_anti_similarity on E, H, midpoint(A, G), F, H, midpoint(A, G) we get anti_similar_triangles(E, H, midpoint(A, G), F, H, midpoint(A, G))
By sas_anti_congruence on E, C, midpoint(A, G), F, C, midpoint(A, G) we get anti_congruent_triangles(C, E, midpoint(A, G), C, F, midpoint(A, G))
By sas_anti_congruence on midpoint(A, G), D, F, midpoint(A, G), D, E we get anti_congruent_triangles(D, E, midpoint(A, G), D, F, midpoint(A, G))
By sas_anti_similarity on midpoint(A, G), C, E, midpoint(A, G), C, F we get anti_similar_triangles(C, E, midpoint(A, G), C, F, midpoint(A, G))
By sas_anti_congruence on E, D, midpoint(A, G), F, D, midpoint(A, G) we get anti_congruent_triangles(D, E, midpoint(A, G), D, F, midpoint(A, G))
By sas_anti_similarity on midpoint(A, G), C, F, midpoint(A, G), C, E we get anti_similar_triangles(C, E, midpoint(A, G), C, F, midpoint(A, G))
By sas_anti_similarity on midpoint(A, G), H, E, midpoint(A, G), H, F we get anti_similar_triangles(E, H, midpoint(A, G), F, H, midpoint(A, G))
By sas_anti_similarity on E, C, midpoint(A, G), F, C, midpoint(A, G) we get anti_similar_triangles(C, E, midpoint(A, G), C, F, midpoint(A, G))
