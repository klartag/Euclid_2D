Assumptions:
A, B, C, D, E, F, G, H, I, J: Point
f, g, h, i, j, k: Line
c, d: Circle
distinct(A, B, C, D, E, F, G, H, I, J)
distinct(f, g, h, i, j, k)
distinct(c, d)
f == Line(A, B)
g == Line(B, C)
h == Line(A, C)
i == internal_angle_bisector(B, A, C)
j == internal_angle_bisector(A, B, C)
D == line_intersection(i, j)
E == projection(D, g)
F == projection(D, h)
G == projection(D, f)
c == Circle(E, F, G)
H == line_intersection(h, j)
k == Line(G, H)
I in k, c
d == Circle(D, E, I)
J in h, d

Embedding:
C := {"x": "0.7176297280137362566421188603271730244159698486328125", "y": "0.30174675027520692083271569572389125823974609375"}
B := {"x": "0.407239040312197764226453955416218377649784088134765625", "y": "-1.2940975926241049531739690792164765298366546630859375"}
A := {"x": "-1.11150183664352031343014459707774221897125244140625", "y": "0.07375139321548286608365430083722458221018314361572265625"}
j := {"point": {"x": "0.407239040312197764226453955416218377649784088134765625", "y": "-1.2940975926241049531739690792164765298366546630859375"}, "direction": {"x": "-0.55213356173762137837985980329670225644677202064940284150378613306865606681831248157777981673226085207139828654950813279574089835462426604459278668675974648696856321219576602891330148115781343985347841152934350228866089036082879745232072868728071891973703963901932389580592763723206131744844073103935814753649273858410974628344713005801225487197752881749433359982872063788944790935987311986199812143668187650500208173490208877251237318326724131865496967799140728297822325024346569561065852452137904419423107646732286668366397810719938725932223953448299724601329600931282479257600384231548547217214660280615590443174998275529199127597496139754868173755829411771979381874683942058624616613239094681459348383523632286389810518549184327163840400712373305444193362078601889964946710320913589744260719188181935963296655517263346766949138910363830409651589109173010459995777299803130407785476384608867243758647743528499029096742012533949848110272285856374736955566544579747516571943534810564699596638649285053947528317030499768381768417709230707941714039920663602337975066370296559808751108485367379694029895544053680302297568040970493014847650102677392025448010340968447895506684463655556185427477587970709525536069827974913273964840659778981344130812613790814307620643562563297842306696731595508653897668537867427728802408925681456883022991870311627564682001735020898435282199770840197632405473044039126727278419433624219999081027127595370438573791554413318247446746052798143728209788539415635877050603417329709370238514031863135860469116081442676226351855104357380325133378450321820688232126382088528742001093784290773446453146150247300204691639340138870810476842207442034662126427692640625920095837447249720988580217208708858977820431698381027262459176000662465900147998835343383097073235877907180836372177913280046256274851402171623792324712050011603532117688393204597893868576865954668049994328578908853905397089864747598589394137918484931045710510756300909028001079837285756112309019150416577216894746", "y": "1.6508354748272458149511522279694855100319842312826557627021265411320279207747285405289750531762364834642075237319732495022425809787712659930744856880551003526889706687238739081356772109984908540508009822323308556463683567522085613437022460053350897532197418476777471012694224273264042082438341631325960510297452878205044321615993511164999995351604005239346356203997319543248280789830024533136220176645923361774332185328318357452066645077139076938980300242094219982573195888455987746635312222697428688018493432981766983525631691069283067774994713642704422638365275408900753319959682228806239823335298712892887638447140817207332271550895324804823647536530353293759246319480497682481395135084993783750695722564450732770773715026261323748931657641261494806619881065612762746984834072148560393742195833560603211889155976547556732381795517743172820702982973178521427632506765306020419070946003667454990418785061405383031265487240638217603189037643960410526950060066137139428954776326815355480583294075798218967703082190054236551230293249776922116024628487399342365345011444960095279814848014332273333026809075536605330789268957266518830661259812378839537817067338370035412359145682295838464627890763034417245362887069951739472012213328487964287059767283080942503511375459355329617215774323940656524849972100182213173270847717544123498469072303209605428018281322128645809468361027408798332188261722216891712560849027750417236017466077633182519580655287873105013380135408156000217338078936152259072734734941630942340925578944722185661385276875634179163865038708757870580798291127855639939167253325863462461232754672671854927843446127890610008033669037178672423042722044767648985741620387594758972980534294659123630062046046381616960042163281697497650236534094128494111159440576487661812610818873557482859932006754612150853958382166576453248145879087170229252491077351731238582657951807841695095495235366553645824337336440982939002583583259298935405408309107031661919762039159914551720795887788075874539839112"}}
i := {"point": {"x": "-1.11150183664352031343014459707774221897125244140625", "y": "0.07375139321548286608365430083722458221018314361572265625"}, "direction": {"x": "1.7353761091296854844859343884185802381442508353454645062450574618874416061088663995183418115344292134474708514173010131669710083523837705435863541806051759663132498339116919821490392562963738932743204771972444845129236877372679462264014639059240043183523718389652475934412047845339092398683015883594798770578574048103939125330300702265086076384873203498064964827119574522391674242766103033013133181048044496743618832234786568303484191684950721936781894435472860822398079728255698535348579482990584749425751663796810444591921784018982342733928140704486645453613044506963156880741975296615836131947248501369561181356032611390631506113778586591033248017517440365664508376449945088450627072391388065765998059227164792400461007529668988265111552382342477962104271715268994565324574614708355144367917751176408566375508823515659505669748805382548613748829407663164186266151750706768320500112712788377995145686058520740470885102252070077755214165275525417720883226673541742940615987341792520688869296441980959154409384666946373891843400930249628871244103195465330353250482929614372585467342688872585657873482468451790251900426908689313330891807463210002650457160824264765455550365125694373690794808835048783857358073726787898321507466421454786505622559740476599812998928460074627416873403913489174454283223499526495513395242354594255866324100391558386459142510984128330676307354063429392280287779467364210198887040106267395333902113173807450202700170258365434466194288796364037343181386031684723430583502933694562191939772244863807357395498862303859740967645602740196613356939152156946448550862787896854923427088491230377571439881595378311249123628277459814170098335439084658916998028951432865493869203257105822383109260645103163556800292661971933125622423373357805987253760372882884725954785090795017649384750474380442746301448347480432745674538557751774450465793257846049877180223477612995339781769579222953867332435587439270322017947342978040968364353196042698749594669967581593942319916846365194620881319", "y": "-0.54554057399944265179388871710149891451325556025941012977593371276706896937370506480317246602301310654033184206370373034733025934318576069169743644022270503920592378821872947284052817723884757200347067253432391509548884215933980357903196334574371975644931494098680433916597711022855843193235834499112350996121367881579814731483407893730336475282212180015850629417365255154958112847711875740906683231386734123551973201011041032974728069948561523189742503373367630788700528239386413600937439929229039069029077332282146670868284795695892509846204459261641679815592354663559040378016300039531310543157465941552004138332900263149526955947614757011854480073053521176318524249947865054356305786843384987595115080459607409687172501875544120135008100648669334792082884403969510381665673545629075671848785125269370020642046275479424423454588980142540808030218746999969105933471111430369751743508819178868099190269472961358866807415854219254024406454322100153214248926614330180627165053186694359822269584201254865289895856952978264397001607484553016481264239063316156255523687743247882105864281860407861337944798574872929927906225914780410049404151332096063343724612627299511844133196822253530126946488546212404214305750342575577073835585704419630259690942996625241134350994997861692145474297565676346652907647764658838494023433531002848986900762003787290651487581098911971445873869723680844704673472453000839604295459141903104467874780600989062464257956514718874448202415610482940533876893949645666819095932068178887825857469160677919340745845324006324459714997646258574068376832906392202293550327383507999859177268940087684153605453190981991626928638678836320732847286731546431878871606144173308879637821793800521617051402066617853285542421525483518356687552342859945360949875611449232026177430186062691949968166426181565217524216997669426751610536218952570726758183067225523061936791950783204077789420973427434995980938444042073651415699521398995397458686615843462754975130611545008540611462048611372388553434"}}
h := {"point": {"x": "-1.11150183664352031343014459707774221897125244140625", "y": "0.07375139321548286608365430083722458221018314361572265625"}, "direction": {"x": "1.8291315646572565700722634574049152433872222900390625", "y": "0.22799535705972405474906139488666667602956295013427734375"}}
g := {"point": {"x": "0.407239040312197764226453955416218377649784088134765625", "y": "-1.2940975926241049531739690792164765298366546630859375"}, "direction": {"x": "0.310390687701538492415664904910954646766185760498046875", "y": "1.5958443428993118740066847749403677880764007568359375"}}
f := {"point": {"x": "-1.11150183664352031343014459707774221897125244140625", "y": "0.07375139321548286608365430083722458221018314361572265625"}, "direction": {"x": "1.518740876955718077656598552493960596621036529541015625", "y": "-1.36784898583958781925762338005370111204683780670166015625"}}
D := {"x": "0.0744443596853182058927772452663765626146125685548011387367922166030469139369330500258761373978561074978024607578548583987791626731448464510988301073379474778917698478825709552714114687213304787175551668106996600118488485042986066594210612835818756734655716856955622201082605334513450729230131069500756943825299038244121434790752330396153923447038436760012428198456187406200910866382732357481698887950644648178038517809649773858926099187998630049107698789303033404222713977770424345582375373828004798283685152881554959293192769217887032747461322766729708829897389470597918796426472615781881665132627377034542235480373444223234559347351994703161002107684625685382112552256746232478428502184855287811393671857416653776352341152211626280386294357318650911635983621705686682124427752121659035460926962374831469295756048636884750514870351642878516344918518257466645557579714485722578599949245583304881370952596952023190463895042177285553178162932028138293685505693214797793744763539468764415677356112531525621555580616608789897931140927133139788352740993842870853656106584966278584980643666653584892598072954823098657510848240287459220921051343452977856554810453884711845125785114383916460132398924553261956351256116183319563508793207795759053792502431907366867911738299568324314223780761722613567586420024718321200971168468415180981008113289294625558540303884378136158815349390064034500572091684339247901153506815536944486378911943176358720754745154033441861765842299076083246677819252691121861540141480400736982425632098496574858001323677867037766465071009113562140912039486945244186426989291641354342225781693806377750714685350559344968574663060297502111225856614713661749564677134100226865133265993906186190396625804703385403543953971658975458416049613244276413645050332594360712885767606733110155192138966036058556936401984121793893988244045640174752168583603952445755513019754223548240709664116590496537784032602301086676040269728933218227328094790100146607549530449433625344666559769153612475656367", "y": "-0.29906794276244548822887271793778528614138026278815450580316570945717957031904208782772160532004290310074318063769963347595150222336053614941469359545000776145006324259527403338588781805023168520455009464782238736021980414002308442751943747694778387907864076277840461775383211884876668883674703138780460019188333942357747398062336643992507996671097571716741035385556972007246367387748437064523409591586804697046157506758510129541538694115984410486378098570511792217479809371832662297047180571120625762906292058154204027305399105447847669123183122180456285047922187366857395350911809344896153787179242550221225852394678730436792012127826185523763033266775868780990901934596188252535261946557282065432620677911112338750305854317735749665088249609747684706048259736544483067975073769336924243197848104068524385312665307252908035984499051068939911266471777568227855759076774265912167140428466739229283661329974316332041814533209060448045940402637786199604231048698016441577330233983854611512194340133911532928606868055766449023604970180344804094304921642429768011897958627436175984607944749406565878541700081203241776784552408411518046352172739646634469791418756198792520697128926695205534913129281276384523955591949486519900278897380097087278075605232355206932307629915982222950294114720449938293134959692993935397101263138904139559361530661997305861005050722028946804595061089500638842090486413060084150037532356078377294253716302066400898405572389642196422487572691681953472458996513557342855798423461644879559388394907043015840190137150091725762277105464083553733558529162140989336965381283456656907635101748339066839217542930393775139617760560124597545582044180484496117589341828728766475346401078362359350993662095393528584961197022535457481643729896321216683407842287399398083307592188768044997583890847771528885370494811911830001527827994095283800224887616601187094014940478767021472632759975429393288588252579269559572023144442916239411928006276594175956349112614118530556704720370750425213440623"}
G := {"x": "-0.27131051271688665771465454117148235849891617681824050470093236486764827186352476708862762958041204193687253628142113738920268127778577600557190700761345325420070478037314744695958409742809539764646699724119596564625779944470118863359942076357301995754346785676203148961913131230479719198561578629594078078461621185284051331296706866884478277049612606585955850596430533074545192016926108897806910511181308715306217896873887832568718685831080222618492628049612486061372188525082908077684414709835205326085151640289763081561913107689140661995090225670232775591757664126340849669446175586643407333347461015908437719672784686573777625888023970820818487323561218425293210554769857160958948430703617191307801901430133389746911522134542797567122706613829277553943733988486458120365654184173658666987038960877559003903372571331831864766856526076717005294857705924728295956249579416909400149730490759006721700142363007415128025617670099876466186442451174138493368408369310920071905761366003261221491011867838764956004003714133669532251533861439917430789460188661605780904298242391070184781020731538986945580751629410570194600289806956111450220844486755909876105847805600275878085478087768371794600063418121876026703510049783514435185615588227817086751744824865467520607602471069583439537965938533723533366322558752553306903050044809444627135330633263161053288378449630174769907705985681563007031799390387126748601811874723972704589409102206414382899661834012299217820338290121725730656638649785157932228535679595785083030720595103827067649954920352118263748882271160735238624973423637509124685523909304672253130590432088778556461061652049304532291502897209563829520743896381205156946611128489046659517582499964587343233298311546763231605099335197806999088581445276323546731924504649169033531628107746265534760595983558078041584489681907327666560454487856044512588609122380579163821015231035782909029312927977213195489087773577557905704675166374517115845107623099194976545971392925278510987686621008433264826679", "y": "-0.68296416490389952374893100674068290654943361354560674850358008558190676442191144360582319516183762061817873094767117231667009222568472391469940582427398661031749885713879648678283735941764335349205430272198960487648347784435981334493302284466280817272051402192840066043891477819945454945359221508822137259877712627996517618488052279292390973056176270901081647045823473423170069702336141506241068032566038095842698782323610910436207460415919092147332381278917613757476812487836570118129324993567462266464911331520369115899926096496398771006130282158707485772977527984642530826625387503945488092327945024079882821074283393704762952367213600009700266584062915921152131427201203037948658658421144426500805784423784888139488198214826570361332870164901290065531377569427737059456568445884548326941056302599655487174097616690366174939189103307868193713182827602695066746715696410773852178850747326546606207886197751580089336993948439283143265180361601039960594969414273675798422764126975513714272910369040681668888104815466256300941941576904475412151253796901842412240866278769509271711715270866722030484446275775174206208244461540824912983801319026457154695020718802893560940630426674060541040205786969596397670404916259323190488169910208277197745917431201453746794366191691814094532105913660719758663414473325780537705719277243689056015396785771835188326760889459639815654708292031999771380686879911996604315359440898495242348112920674826776153364347176840302888776235058743223020563979594049268221554728829189623328208369116607932339421193601735469493786386448229048264010739341514185929036550715801393819901702162205099909819401249844159918816634569917112435488865624645631600270728627328906653350078588730431653097812580317050643934505142528978878500659531217780257945244774380632334677173343414066797228288000899812517295389950340776489119906595947205249038570796642020624947063447564354413962411674157343949535832209405197583931074438189643930370053780610574921419005924750500638370114760990843077291"}
F := {"x": "0.010540658866165333873185850035698888643805423589093192747091593824385497722892588909724205821451656428318973947538404578327927443022997912923085683004733663737340761449197611538969331434046333185659935849560117637428496841983907860270204305644182426900487904549356033397247194348052214527870647901553260333892277371610549605307794748958996253951111561939182332459282936205115864715106440598272202521170399210458288052695814673935169834487745000536837347411755072064590660091276196838380168123956198666922800437907957702681309093303638207713984486415731564232090362181888285981157710008489063123375791301802632266705592829811739882211554202255717302562307381180015577870759550632422965969238457700633228047460577019074987616399476889507834240126422006373863819711227265599689013320698439934458797530855875594065376892060020947701201620137312836345733274780762008507620026364661809550453054494270025324103472968861238310066639807592097088093666995737883409713039367160113602445073062662326660840333989058453967978863077229375904688951872774235917708399863407114113568831506576633306543957034315373911796393224574158210861939133870731708936737908456549476810790596865236016171042313699616539859663657008180635336218144381982906507876044756474299379441183418223266227552596523836823611417819286483779124913546584917576451441486960780314787784215869883495425379748796270920900439054298810898478818071905244968108944583526885014671844531536786648368468901472144094841880765477250080735063683954906224087435180661291638534574720447494861067247111149583121424943423984889028454918521605828352703285037459737524086705642516095372465090828540166868687304289076597386822285807203356980067130490389071025192424760215788413949352816927056004220490711739241261920859825967994343775799526925788209033577023349281058649693379976403292778793621745998483432686528957060231931135228637014588543838256789852936344056398767741721169125641929012814652036935246679765549589024206092591936201584098649069807092261431828146386", "y": "0.21361037566535948329591408366423777011944795841169262785071780001341969472840023997897076484526123595918494440293242924321496877936251882184083746909262780285128283930441270660635644715056904315267153518684343606910399541472729050481434257634174846736092794982110895164847486542539301489730706339492940340638433631997552236364665690359166413744554421002486909477380710688717007788712942164841444527182765417239748173513415026395258403337170571373516839047675882801672841442897318709947736487302705661112242019176813431464957654804838075706368273876708292036232510076250734725040776106693682575054684618183443954261361491899964480151693039126824789136771787095442342835775933882240208266121152110406809199664620429258424681842705176275310245092207211861340116074392184188705318062542790271908395502143064976890913275769887379809706998792968477872883612054455022614659052592445856765233104917600247090219803301471622641445860182100494451471420845913995656568179150034795894122055226257201650870635236770550979722320501195820792852719755002569972742636107419783711691574126868136988922592253336586795626550960882372841883102984142604627519599638012229086663712612939526990202683687161584904464632760913481411268634696546321303691533779576393735893950534818580261514809218722543460279209497076630187927566811754402685873000252344658578875161665379427852212149509526719373483450336341310702556611328780799004466023521866079131177334498652681647314957180542271099841713626835047665690139432776391706292168383593091354425428150275646410124231638937327465248968236712299431105287825412362301012925807345377366081747342536423179734255549458382742526556400742480620676333524775421530379351406326484461096924019598272568895005408858018664913965123487151975409848163388641462673422213884472324660468330379127882727839530551656615907691107764418510218350426566954665770525437612989138363227533435396913456572226951552998189133999261736022055690331445971352582326724102437324701458903258500468454808144352111492804"}
E := {"x": "0.58158647578721409801988751339647317159489265732629868355071841197073425275044455356551935738322967827804123773321058209736987031475260916240297854083549309808911101203742537109271763446600078681358661920760323621275976077029331027877613040268926439903425589052756898699520733701614040636435871149879410856508559426012163909257722235662065825466391176905485827604665153915356955528710374272733098172105725417501562458375889510531449714926479234673308850078959547080627148020319955640821043549989415974807052460478695338757662329436305701304265057574702637130789055606065529902592599102251021764509153188771553193440412755846272633420462431967727639758165322331138371355022241560976758516409050649117749939759263673027137788434147130078584045240122997463563570983672882889826659942988053167734548293504830011337958958112132107325173542943164659649847981894199481102237949399647374204624299896893472683627275146878286995629640240228772418557381430780584509370216949754089863747584574485587347994034668243917657078800507651129363144333425175069431447497089304172679552812513314635721745753646537864978579000426236327361890566376432838705214065726387818988898116566190639735901376756946498067110363161344755316226220410925886535393173479564842889111399125886512341804953127721668415765201617439704336414145057546495263727192107416045753385289130095820813059497340563331579000235483449394407580283277452774324861146221449850906290812625926771250082951961759411450006825020927007100089045306530859537917122146615550283619076296923348972810376135600698010462302960397819982100099331226055794306720006786434396565561148386983613949452181116757985885516959642195620429087493902985091605082350829525876076418637855157932488329515929138120938335770331936888698375143081833373270639186483436216893149934893386397722332955414517138332677809075496224970207898985104903360895213277147152917984018760794752416895450793847849346695492036209311426750184877860450441202012316228335443523145346027108274099827228588394538", "y": "-0.39770675479927375717779544664076691536908128670062541073144322723376726089390875953297491165840774685798829905644925007126277910246899013744043029044218159012245583599559240807920077720833423684513578052513881345176839096632101801616098525415570269350253497673212956921784820818045806813057246679055724965163988660141141083056628745540791092837951793938940206263366578294954946701173561117533325820489945337636494666792596366638513842033867081738971331337041888714108493375096620048048456565088973259563900152389757444055062245820016942421238637846157990785941764283828693405052389963714100142694343945886136935210226748639708146727776987969110650205272483336079877598702210128381706488026551456281759025142272818627430965889027322895959553562616218946516597823232437443070012160130127981960949021155006813205285554448508573724763292651151600264937442680746527766241574698093979633466468061176113385277878105202946518764926117952569096612145039840671156950180541352826802679462153357844512303497851302046710054805675521202519927189940825880626847393484840003477589752533262358152416014759275577661936819071733342384393883490487130313419285442532049214009466219430292055708417438939973894450247659093543104916944462666376745945028464940160184966643242499380981920081431406801968164077342198474187629952577480371603546995403063140628480060810722663793447725236452862177170811390223760107556953565903167271522597406533347979913134307193552965880569310153854722781055674582035031600546718651926038632246669096103700479290180791322620681052835757275716612686631055153604647584158686638496299782543959419619847653267620519204076222798543833313204382378990732362580668909367341179515349873646045745281545499752719938534581508125504994463024290155098447870470282648792571099349908109247529156179610855048004457348660634658630161117076851889205203234393368959827169984084936821052129224121504350970638740331853299572955074095409350326472429369205680510410881546963442472751036758144209574700256665451805773786"}
c := {"center": {"x": "0.07444435968531820589277724526637656261461256855480113873679221660304691393693305002587613739785610749780246075785485839877916267314484645109883010733794747789176984788257095527141146872133047871755516681069966001184884850429860665942106128358187567346557168569556222010826053345134507292301310695007569438252990382441214347907523303961539234470384367600124281984561874062009108663827323574816988879506446481780385178096497738589260991879986300491076987893030334042227139777704243455823753738280047982836851528815549592931927692178870327474613227667297088298973894705979187964264726157818816651326273770345422354803734442232345593473519947031610021076846256853821125522567462324784285021848552878113936718574166537763523411522116262803862943573186509116359836217056866821244277521216590354609269623748314692957560486368847505148703516428785163449185182574666455575797144857225785999492455833048813709525969520231904638950421772855531781629320281382936855056932147977937447635394687644156773561125315256215555806166087898979311409271331397883527409938428708536561065849662785849806436666535848925980729548230986575108482402874592209210513434529778565548104538847118451257851143839164601323989245532619563512561161833195635087932077957590537925024319073668679117382995683243142237807617226135675864200247183212009711684684151809810081132892946255585403038843781361588153493900640345005720916843392479011535068155369444863789119431763587207547451540334418617658422990760832466778192526911218615401414804007369824256320984965748580013236778670377664650710091135621409120394869452441864269892916413543422257816938063777507146853505593449685746630602975021112258566147136617495646771341002268651332659939061861903966258047033854035439539716589754584160496132442764136450503325943607128857676067331101551921389660360585569364019841217938939882440456401747521685836039524457555130197542235482407096641165904965377840326023010866760402697289332182273280947901001466075495304494336253446665597691536124756563676", "y": "-0.29906794276244548822887271793778528614138026278815450580316570945717957031904208782772160532004290310074318063769963347595150222336053614941469359545000776145006324259527403338588781805023168520455009464782238736021980414002308442751943747694778387907864076277840461775383211884876668883674703138780460019188333942357747398062336643992507996671097571716741035385556972007246367387748437064523409591586804697046157506758510129541538694115984410486378098570511792217479809371832662297047180571120625762906292058154204027305399105447847669123183122180456285047922187366857395350911809344896153787179242550221225852394678730436792012127826185523763033266775868780990901934596188252535261946557282065432620677911112338750305854317735749665088249609747684706048259736544483067975073769336924243197848104068524385312665307252908035984499051068939911266471777568227855759076774265912167140428466739229283661329974316332041814533209060448045940402637786199604231048698016441577330233983854611512194340133911532928606868055766449023604970180344804094304921642429768011897958627436175984607944749406565878541700081203241776784552408411518046352172739646634469791418756198792520697128926695205534913129281276384523955591949486519900278897380097087278075605232355206932307629915982222950294114720449938293134959692993935397101263138904139559361530661997305861005050722028946804595061089500638842090486413060084150037532356078377294253716302066400898405572389642196422487572691681953472458996513557342855798423461644879559388394907043015840190137150091725762277105464083553733558529162140989336965381283456656907635101748339066839217542930393775139617760560124597545582044180484496117589341828728766475346401078362359350993662095393528584961197022535457481643729896321216683407842287399398083307592188768044997583890847771528885370494811911830001527827994095283800224887616601187094014940478767021472632759975429393288588252579269559572023144442916239411928006276594175956349112614118530556704720370750425213440621"}, "radius_squared": "0.26692274116434559009611643219392381100654900299451769645945351401608065462981018266779719720886878155751319251281330525881093292496176934502834096058793414491345329193845187274085115263665420968817776448323750975714540828925695793804889688536241558429360606605515397873365230619546805226720530637873683454765804177015038143822247569730610743021355886257566682743661698114808508945229908553308982292315826382458635202721605164428029883189063019624374355294889295782944155135908022482484669585579463746160854217687979384024138615826842044685811316334858243715824774383180001663933199378741111258446846562185575075837559244898215935139395313328200705063697394098331822528450236685555599524529165358026118947098823442057972322311265163237618447541160334661337182908357636853500934748174117801775143909402619534297983267311515271034152380287980770213785989719457884356509524033224806890589539066451636776972442574411100788759972862434463498673811794283770157071024844234200415276711063081649794096215689208814637954883363164891284197288244702815578474550143845103588192879747043256076055769741866342578628277283840958286102102814000478502785622579451572763807667983485993771414639690477045757382519812128569598058774607367068726602423846325451310483208576962257077763540730241686063169618496713113765465936223195368974072970103010311488762730026956243394701018382327410860522777601841530219823513014219069466484218216091288630074721039061145425654990881867420688053323429414350743418945740710021743428443456541564159395391783020229532271685632644218682754765123640871540267507817694735822227447040722896945725861188053423089938030119538770719111051815685655494858254819271087846222399012410751675728047418371783724998569402869399570634830410040260716083122825462781953245692388653254313594906665085185397623642438574506102274409407192338325895253414743607117328223142247360017609480098431495814497298015146611355324984535068410060801235752461225622823390445524818850139379682371733254700128493423971709273"}
H := {"x": "-0.0927196975656869482345187852780631929759430055218154396348299928314440167985855156756384562437267484173739471286457612001587935516243824663311761276858963126842145015488314311622613905212687446424678453839632966540273051620472402361681048859859639602841409270149770007396051113826613803001972832216393643539182322726483854906780331597947269979123111594608995484880953326674936087399702090075093178872483104307402634840887003804117518773883462489797875064546659558257757954259502942946726530951506971544034175097410793095403497989790694090310414982837824354177391932634301372506917942864319695232876100858144792636406378253752006913729932332843671605270187609675115753356324399863353173398459398952745821954959380858372145757462316965450913482244460709040095579599736619289590161562939717903279173009515949575221842827442432364587512083699369574571777519278073036295464352584446439005646374558538456105648620443745812870184906367574161114360978465142091639542429674964850984396686264616355536378537263259037071201116436387794877851134003294304442803621511967024765014152028644396866790907267515423310277636410106525898329266709348419714384071924448834206295325230830521392838889348183636214439377534668476152730010594003640017711876365519159004937735288383010736181074809965788135751717561545085889280694644490898978085730113908996358405364667340210394333047756213751074829743365163310814733798171229608172181567262864230511058889864937574123876606857793213686221856345774745486593680574400028312454684072162876007337202394819825474055876321954746237558915328049635315720011119092530421367951375853201775457010554966371634834997991421012914945720590385367585600063369875717407591772458956271976264518190587822637925310580429707701847135006738660531244601916690389743988384311997379745988693223589462307957209454786829009681478663688182984782367052140483044550388435251608170337463920620234818214368050658832064719783293235867322512553720433403111765630015909191940383494130998490256290413106267281326", "y": "0.20073930488527264500587342111671410482387725062593945171013082376956113420618664391284179587778259977773113151131450045248041369202351667764147670611945486403418798529053764137970932223276202391313184629959984950510172860038643701466124094861968072567692545523931666322590905019406141249297997970645989649181317251470775865004176175622286893554549321924975950482135985490529346819003094291677203178937640416930435707037869316638848054040933984741371358725843246504246890641380010215739154642243190904106315090002166196585462760766668033694613779837086864494001763855319683062734839881107141112729991691303520371639655580092357069048232631639305113839203646627092218256357978392064147229210566371462710038265845676916269538835070939586958495152737958422046514859055662946895430960541766027319168411921659408377267070937854427714676072793202607559913748231906071678199572819878627688633807123303472103372248145073480542267236152292243885634387845533064771962790271668670725800507178620376331943942544085158655541319942696587854016149082411817842296948728459017173629838911658792664791165637413602107074450600290938221968601318559419731912538253532797031109942221556980808174341919422772331421112096763756680883562376220002230948386913449611784718114508239888928995783229650140693517889387919811349636623101702995374740760696076983734575437510263166971234710250520361434230276624429416764673126408585066284603910933657691986182477089567280720781678099863080573247409058969415525886340037161416765119722940762442798451395420946361097505879356388670234395512936552069584951621848630614918275627851282495528658502208125340986211098221735938366043354454150476985214322884487055062245089060862929489136267652663147108230557824240264691506291499300805916460467889702627568987252635238873663237588183663717282024218042996572526715442519261071461125627907435695701703557716651632501826119121963904379933954432286015467238742489708705519498057173956822804727101604054809287023269099182988491693413352228763551044"}
k := {"point": {"x": "-0.27131051271688665771465454117148235849891617681824050470093236486764827186352476708862762958041204193687253628142113738920268127778577600557190700761345325420070478037314744695958409742809539764646699724119596564625779944470118863359942076357301995754346785676203148961913131230479719198561578629594078078461621185284051331296706866884478277049612606585955850596430533074545192016926108897806910511181308715306217896873887832568718685831080222618492628049612486061372188525082908077684414709835205326085151640289763081561913107689140661995090225670232775591757664126340849669446175586643407333347461015908437719672784686573777625888023970820818487323561218425293210554769857160958948430703617191307801901430133389746911522134542797567122706613829277553943733988486458120365654184173658666987038960877559003903372571331831864766856526076717005294857705924728295956249579416909400149730490759006721700142363007415128025617670099876466186442451174138493368408369310920071905761366003261221491011867838764956004003714133669532251533861439917430789460188661605780904298242391070184781020731538986945580751629410570194600289806956111450220844486755909876105847805600275878085478087768371794600063418121876026703510049783514435185615588227817086751744824865467520607602471069583439537965938533723533366322558752553306903050044809444627135330633263161053288378449630174769907705985681563007031799390387126748601811874723972704589409102206414382899661834012299217820338290121725730656638649785157932228535679595785083030720595103827067649954920352118263748882271160735238624973423637509124685523909304672253130590432088778556461061652049304532291502897209563829520743896381205156946611128489046659517582499964587343233298311546763231605099335197806999088581445276323546731924504649169033531628107746265534760595983558078041584489681907327666560454487856044512588609122380579163821015231035782909029312927977213195489087773577557905704675166374517115845107623099194976545971392925278510987686621008433264826679", "y": "-0.68296416490389952374893100674068290654943361354560674850358008558190676442191144360582319516183762061817873094767117231667009222568472391469940582427398661031749885713879648678283735941764335349205430272198960487648347784435981334493302284466280817272051402192840066043891477819945454945359221508822137259877712627996517618488052279292390973056176270901081647045823473423170069702336141506241068032566038095842698782323610910436207460415919092147332381278917613757476812487836570118129324993567462266464911331520369115899926096496398771006130282158707485772977527984642530826625387503945488092327945024079882821074283393704762952367213600009700266584062915921152131427201203037948658658421144426500805784423784888139488198214826570361332870164901290065531377569427737059456568445884548326941056302599655487174097616690366174939189103307868193713182827602695066746715696410773852178850747326546606207886197751580089336993948439283143265180361601039960594969414273675798422764126975513714272910369040681668888104815466256300941941576904475412151253796901842412240866278769509271711715270866722030484446275775174206208244461540824912983801319026457154695020718802893560940630426674060541040205786969596397670404916259323190488169910208277197745917431201453746794366191691814094532105913660719758663414473325780537705719277243689056015396785771835188326760889459639815654708292031999771380686879911996604315359440898495242348112920674826776153364347176840302888776235058743223020563979594049268221554728829189623328208369116607932339421193601735469493786386448229048264010739341514185929036550715801393819901702162205099909819401249844159918816634569917112435488865624645631600270728627328906653350078588730431653097812580317050643934505142528978878500659531217780257945244774380632334677173343414066797228288000899812517295389950340776489119906595947205249038570796642020624947063447564354413962411674157343949535832209405197583931074438189643930370053780610574921419005924750500638370114760990843077291"}, "direction": {"x": "0.17859081515119970948013575589341916552297317129642506506610237203620425506493925141298917333668529351949858915277537618904388772616139353924073087992755694151649027882431601579732270690682665300399915185723266899223049428265394839743131587758705599725932692974705448887952620092213581168541850307430141643069797958019212782228903550905005577258381490639865895747620999807795831142929087997055978722456477672232191548465017794527543498092245597720513877404145890478794608982487878648217149400320135610644809889315655150607878127791233721091986075841854532049983744799997835944376996158000210381018700007326989793308720904036257556750724647492381771270859342328542053021206613162325416696719023201780343681880539581163190064559919627912613571791384670463542778192489091927469752568544261487954247230782399508151154143057407541120981405239723309549139930731947565593294935891064935759674027013421337139085876802977669896915821036200724575298841389487072452012945014170423395917399140615057935648082466132365633291702969305654302755350099884487745032152446486110656648100870783740812352822466311791347648853046469129341306514289017966023700646036665387763784852347967572871549698874889958237919024346529341941982749677574398785438469464161895161695447512583690500240660321483781656608421358108082507429751806108397913269187508305537171746579616487651184435119152612632396957688247911373923652052405414452520090059051344062284298513307765007158423067943721285683476071558267983201772712979413931945411132755063454270647223079878869395214361588898716286506682007454742271816223526318199381310229790913721112835861983228892744713302069390322162353440003659975844887895747506399772535210764457096797819854782681465006919058440958934528080863847739612483268999257156642834484620806049059734168220814029640137516411463530173294392867120690784730606664185523107758163618496226647739311856396576706681130784296706607168440575744625547031450040837312781813989966799035884626567557983968526085123716877370592013419", "y": "0.88370346978917216875480442785739701137331086417154620021371090935146789862809808751866499103962022039590986245898567276915050591770824059234088253039344147435168684242933412816254668165040537740518614902158945438158520644474625035959426379328248889839743947716771732366482382839351596194657219479468126909059029879467293483492228454914677866610725592826057597527959458913699416521339235797918271211503678512773134489361480227075055514456853076888703740004760860261723703129216580333868479635810653170571226421522535312485388857263066804700744061995794350266979291839962213889360227385052629205057936715383403192713938973797120021415446231649005380423266562548244349683559181430012805887631710797963515822689630565055757737049897509948291365317639248487577892428483400006351999406426314354260224714521314895551364687628220602653865176101070801273096575834601138424915269230652479867484554449850078311258445896653569879261184591575387150814749446573025366932204545344469148564634154134090604854311584766827543646135408952888795957725986887229993550745630301429414496117681168064376506436504135632591520726375465144430213062859384332715713857279989951726130661024450541748804768593483313371626899066360154351288478635543192719118297121726809530635545709693635723361974921464235225623803048639570013051096427483533080460037939766039749972223282098355297995599710160177088938568656429188145360006320581670599963351832152934334295397764394056874146025276703383462023644117712638546450319631210684986674451769952066126659764537554293436927072958124139728181899384781117848962361190144800847312178567083889348560204370330440896030499471580098284859989024067589420703188509132686662515817688191836142486346241393578761328370404557315335440796641829784794961127420920407826932497409619505997914761527077784079252506043896385044010832469601847950245534503382900950742128513293653126773182569528258793896366106443359416774574699113903103429131612146466735097155384665384208442275023933489130063528113219606628335"}}
I := {"x": "-0.09509886045980790037941984592661385174418394645787801370837268403502441241598144005693246537325911182776955085589751184692840432214729984628163558744336943784367164258312847215870839055275390070148039844225921866738553488871424940109944398178511911193111736875547381128268907545514627923111290915178275833169399937202928079706274626943286371635902037892563068550642911204529934584739784445210369008836614969404884408211455743488449599431295946458080585420031054514282659199409897517696112784808756077261919382011928977393167422622212156667653999017052120101545393573864479555901630377408898370772447824573953963228432231463094507616354779512663232354614264047401460796110632397349635438091659793005484584688159908071216052080825726100080992922108120906524809114531960308011486495189832772962240111425308702496457325139409657916958024513051400908295381023869921629154379000403557866750751248751923659999676323925457510046566416571019654300109021846785203672054599097396377077698814710196051199776562101197897318757376915312140252345277467114547955252633022454785915293230305190781454943730593886034717639243607607154772602630743049206514102926736733879291025739798398989077896668997858754622287411804985047534681500778634774793035886738460642450881964828409842288981424858792342584763214942538927138539916733805314401858694167563900280286692342092359120077904521779838286242948945451589075394123714382409185201424739523421969032311681102130985303927275083810374841111767891796397546970402160759405673549348537058652752281997197163963002929432433786177983271543789074086143013269783588063483328725610210756749974755073944284665499499407411651141440077253109652088266318338976177047718024794602915913262902246491518515748826821787731845380839272281108498246379720467770917470550150856077547096366259610757369889660228649417231801023606145880852907918198465947261029307762125879166083461764251201444628440788098038287086370190586391732808068064058823879633185083728639360154053207883029255563633730165463", "y": "0.18896672574704359492021079859747298087226898964330815058852424060253155051331122769459236356993330311517961563612418557112439915953336639060192897741279566681188362791052119057560252588491891496470182680621556273223260663094155975301152333890184551891096719955229344019211460012152988603240123253744191719964189029456587665632731334341844175611858554458620086483326407846126614800084503043588229972813564647939080950579661701175456696356173641713899305362312912706654443146965862208358094707017867919975360000471954718365391629991485728178946544034210468700831430280253241184044148859776763908112426028374684474597344010005229984984032031040568181337617959858459563606132576641858048073159251037716622002347881762033510073257224243554717569035684151756345282006643953465430698182677086322247121425483437585416608719890231806686809168447680084153365710703214981048831608982249377706748747935964456559290116721635888717989712884289290158579477714776568390385179398268858753466085062337081952549011360644513618301414824089523225800984299390804479884450910102256689435840499293150162220805969608004285949027206878895066012936284993262412334720089467172492665832214240472892060663839324022053421908938815031560844277436523507129617449196473218344392926023476119266537344298158196325249252347997206060969608751693004937035501466438070610106291230831511263866151264826539151659666047866872965038291515227975494360200984507581327833854669323420468533831727057272782799795655078738494759710070701489296869259433147073447892465743430967635633714677489967690311282759157295237450346125451016674569724259494238754000285960161075757474804796093638695281586600475349666753832156184767481101422159089985280125660650455186712251962856742123868917543402297736474007135124657164418283183757018110528968567443837644239306177629649648553421162969234522113898042253563045956536048303030924257573487884056777681650021399292728997291480699867171015904653272857768512256462363716174590480117330363040912474981737719437086411"}
d := {"center": {"x": "0.41372182238933444244951074167486241048922612609706691283605421084547567321354376292206069108787252034439565164647879203235298488532516241481947980524618277061297021274463531447797811508661431612356571001919621230255582214353577081995495156763721022115586950725851954989451395002404645081203740388864111716549555412384196630790227540127332790228764930852717675975324009625957263898640527661706477318143563476355636677902903493648657450416306277153042116797969812658123819636387945915788073604749730188637959466517726946559609212243003108900544940421792158029528194052445133369746136239515895501492304312222651698772279864189175694422161188711112319697335209881421340116083872242007159639063885794343498283711354980160190454130743803265862058971206847219066246835265281057721730371990250102082709174866580583683554829392119901945619471266934690127763599010170202619911806216446030505096057533098167795091161167718753351449210310206018539071771031252444970095642971702408615375987046957800882164933063688322348011975150862709258069396272924540115926679506875280404025771231581653994099333923187862023690955941311232886168143822474071790864218618176546003805512160684147047508532197485271640972136928864139860470590563423807085027199226306651301425763094450929498656722883225404830611453986782647154558860800383793953505120601029960260331016528621247467015695525426937026423540392166359203530539111541862272516987555276257031323955205486773527022730546061822730758006574237923061821298095480588175993956501032211971403648724011119112607523745571408937393641242295383335193550645765249656053423296104722670954507067408198776709025566080903070931543846518617880386397546866948591236012515139552915868689384360785838902759298620857152052539136193854019910220854149972756835363178885121903422358149006210160847423845298634520147467321139656287716732921601620668401728784139187199293131570456699198230940485834460032075933561789576931161411622371444753063869538585198356729649110793920745272951246908642290605", "y": "0.09226401878644240663239495127731187941457580517434823378033476842310731671099030691150589399661116295840738015838727583149321279804535059778380664610688497124941011482990732189719564678573954831580856825125576301113088337475634214373186905762685625220788849973922932276224053684874126845509385847587721353561295647142069919367395385893275414954473289437500642832089986449933145344609005698846776073180167198693534412527395807330014441851575342903937827189218111933724854079691612829183872676903691357647891704190503952853077336222832754932796521101044960097579769067949231171717836490290928494912868996149851970143677520745825386072812290052683789866646994230646820976555407318944978668117014992226102337283628486043635925541332303065144742838327100772776251177841590239289924993998228181336996295259946481718689004595618828440804068190171301723428859271014494064704981360051674503098274073263251478740992533202127402239499772504630503888655603460355085465760654527565128532951883431368686733481705911819838867898101593436397083319544970625561469716731420706668145609119245981842862251732702250220927855913444929204039689386353910774895068840893454675190335615436925250106979147730339536313152974856269311032380119366672500269964818628949162510049793075392653262405598086957155089856337312782808003091143448777564859586679564523539228574979908876475343968597025669373726508368464463686289438466859966335221917460629484003161213036750957565536083551809384636605988667294723834920739717156099640360760662157887298680833055822743722247843508995911677121418404577901202214621504249835339670316263238821516649608949862820030266299565972541458492206267628947872189235440198962272843884371734678407745761818168838830087041165341833988025928103722989642101626861349719398205088321620693789863598659412003504181334898980002881144943411356287175337406989380459520559451183392774345357502184375196591482004597749119889896656481508356077949277287421050996712556636065286173436924240999175248414840220635876669111"}, "radius_squared": "0.26824990082857540221888050168414156516124611731178048059617551631432724899319464222528123524174492702540411087944626703301551646098577952335902232542980384812940030240313363274808595289987041906093400111861960323156418998092091395741327342791279818224880354468437503727274745034923173939643948540200403846597511909028685447563479552011660145652016251184155982695202982484425145992652172432294539061044226444461630466621129782626919464577552514478825411724684623965985726955474861178879791116824394926763154824416401820843484885631673534956331726845085767199478532299737501018064543679425956056711644175772361947813760814622597386767021978627025569920592633240390656497125882963348078710925206740173434567087098350067435166674514896877387756699621680474603155842237426336932695954691103390553590984668244659810043844548003165642911250229653246252077652420315521977197507482323489548082570545986056983925605472776239646717297936167980606307653975791035649131588296147221249346916970854350669076499989775969975530829249599096404468538669245646229547830560319767497768851975113508260701056938198606473198687116094156290776729561594433499614354362352498671998634273165004475846815372317537503355921366911270848402695069003139206682392685790031986320898177355426720474133136867205829720504299568653111848521065309578165102725731139542328915896722715879378010833633627828390724142533818152401355970085800633578237678146326011850965047871986859760804860667750820858657266756772142582363808319415846910437464629772377252525870492579439084328709521705140611507396022112871707425432592894377543166878596982997666245200844476457947869995304772027377601312717215976398296925234692299952800551478723293586058068388851326472352239501522161588215820965557376313918800879241529722576174671086832221650742151394226732300453838745248074601646559853932758775366350648374078353581319857993589415128470108889907621952526483096172334210144935043756511834255815314727057082964474844017014669307143057494085640638312328301265"}
J := {"x": "0.87803865520917390323622767763259600903347694376388213650284302748289729231958507526759997232377427373794129501218000785145228267141487472446012908055160046481344877323613233206804503727685649273697003421393936347866350401919132125366806420305139084862949771925626155184521012892130634491739187666627954254391014286956904566955890912792701256664227474183159119962526877617052879355794332794982556067538368139087354269596539049124096931516763525762625038883640598203218909656556048748598477446344893455462799542784679827830624904948283825539493391885976230972420950997324267118689501862857397889537517123141247433938454393863383758581395025037593197306408149149958714775052228966864809700524182232573889159512128693831055557581482743103392331682824911104855931449428772480625143131501759679666174318268757957588961950423262262031849335118027798494687512014710025218596035017542043197668887054054997545579538457517377762455216847599300212060915602582251311399302564714911052795706653706010743096033585087077077779969804039045247755032565473992046813282368455267162573103143845954304161994206759731424276659742519290584672412019211527279127459967406751441585519062137752072461757746949298556881964137789453511973093742508074305583763620411495825643369773396600887057683595852593420267647373796942460106257306517328839817882703935364450546509180488165049499483245155193123343611192509887845948484668162205068090077671740377307029449719028038540348853538729280832956920633759312888355582868215073311062576041658966879237271702379852991197166039430557774166633392398699163299773384877061611586627484057960735058673723509001790960220835885606453580450736004044864100003261533164077844164473768928635676814281179941213039335968011586699563235184986018291672915540394594726620526146775160245039185150826750907153116435150693309806135187709276287229669808956128959009073666920819367475244637997721632868999154286404583782734344952791347416335787543624844161095160936771423294643001196565370696521693335544549008", "y": "0.32174120629912013507638192635147652047545156696808370918226082041197952650239787978329741677563185457588666125434183687731855825716658558767518610635079208847171272276713563335908325503957204987909451714100231304759033961637222426864409036064977584656909900436666164806092293107545554378088842549419213124045122261394605432799486934897921386253275435073502819876288997201871910426251488573346237392691442885826164012388116254177921647096370579758848369510582963097845480658730034299198881005953686843804449037695812230281483546447279763202653928784613580651836170410862640912471170377515338659049584793003771172814456123067563230776239457557209583541504445728909343369546464800350693487030854233547802372897426405620933352253924490483015992948323563489382589823050784103719600204773054391170743680091473383424931273935966392446477158767396297823224909869318317486240463028943038490008363092009729945375747509267774734761632814635901560010977550022004658751395552357392204347984363044694030123831647103038473963890244400669343772330540573381931507056399535998856784153238996276980814607603361600851057040285631306420217129296568673508710854053971378298243720847766717381918225077090067933743039833382351773811474845014545809025057715148528766749771261082451772267294761938245955871927704854786218569041406501098957590816879502209795516640260927027117218812155758050293590957333764692426902699824974732342625388156783156086739365292336841433208178013620967687823026464464910863115152355926223882607739793497331779823793406785455812801771773304142038925980155230075782853629655277382675213562680917806034642523591683027855070032043247551863583317526352396499038078091573279537203701553474288100861267153339212161909539452220272895873149854970970404860366979184581152171257067057365190481922642067505663311816670407957357975873779171500179795947938714215988414952935208465205995844324909853987364500215494537530280932312217267250847717223203490920977812438032330184903926091997488269437979440300617260826"}

Need to prove:
concyclic(A, E, G, J)

Proof:
By line_definition on H, C, h we get h == Line(C, H)
By line_definition on F, D, perpendicular_line(D, h) we get Line(D, F) == perpendicular_line(D, h)
By line_definition on F, H, h we get h == Line(F, H)
By line_definition on G, A, f we get f == Line(A, G)
By line_definition on H, I, k we get k == Line(H, I)
By line_definition on B, E, g we get g == Line(B, E)
By line_definition on J, A, h we get h == Line(A, J)
By line_definition on B, H, j we get j == Line(B, H)
By line_definition on G, I, k we get k == Line(G, I)
By line_definition on D, G, perpendicular_line(D, f) we get Line(D, G) == perpendicular_line(D, f)
By line_definition on F, C, h we get h == Line(C, F)
By line_definition on D, E, perpendicular_line(D, g) we get Line(D, E) == perpendicular_line(D, g)
By line_definition on H, A, h we get h == Line(A, H)
By line_definition on B, D, j we get j == Line(B, D)
By line_definition on D, H, j we get j == Line(D, H)
By line_definition on H, J, h we get h == Line(H, J)
By line_definition on A, F, h we get h == Line(A, F)
By line_definition on F, J, h we get h == Line(F, J)
By line_definition on C, J, h we get h == Line(C, J)
By line_definition on A, D, i we get i == Line(A, D)
By line_definition on G, B, f we get f == Line(B, G)
By line_definition on C, E, g we get g == Line(C, E)
By circle_definition on E, I, G, c we get c == Circle(E, G, I)
By line_intersection_definition on C, g, h we get C == line_intersection(g, h)
By circle_definition on F, I, G, c we get c == Circle(F, G, I)
By perpendicular_line_definition on H, h, perpendicular_line(D, h) we get h == perpendicular_line(H, perpendicular_line(D, h))
By line_intersection_definition on B, f, j we get B == line_intersection(f, j)
By circle_definition on D, J, E, d we get d == Circle(D, E, J)
By line_intersection_definition on A, i, f we get A == line_intersection(f, i)
By perpendicular_line_definition on C, h, perpendicular_line(D, h) we get h == perpendicular_line(C, perpendicular_line(D, h))
By line_intersection_definition on B, g, f we get B == line_intersection(f, g)
By perpendicular_line_definition on G, perpendicular_line(D, f), f we get perpendicular_line(D, f) == perpendicular_line(G, f)
By perpendicular_line_definition on F, perpendicular_line(D, h), h we get perpendicular_line(D, h) == perpendicular_line(F, h)
By circle_definition on I, D, J, d we get d == Circle(D, I, J)
By perpendicular_line_definition on F, h, perpendicular_line(D, h) we get h == perpendicular_line(F, perpendicular_line(D, h))
By circle_definition on J, I, E, d we get d == Circle(E, I, J)
By line_intersection_definition on G, k, f we get G == line_intersection(f, k)
By perpendicular_line_definition on B, g, perpendicular_line(D, g) we get g == perpendicular_line(B, perpendicular_line(D, g))
By line_intersection_definition on B, g, j we get B == line_intersection(g, j)
By circle_definition on E, I, F, c we get c == Circle(E, F, I)
By line_intersection_definition on H, h, k we get H == line_intersection(h, k)
By perpendicular_line_definition on E, g, perpendicular_line(D, g) we get g == perpendicular_line(E, perpendicular_line(D, g))
By line_intersection_definition on A, h, i we get A == line_intersection(h, i)
By perpendicular_line_definition on A, f, perpendicular_line(D, f) we get f == perpendicular_line(A, perpendicular_line(D, f))
By perpendicular_line_definition on G, f, perpendicular_line(D, f) we get f == perpendicular_line(G, perpendicular_line(D, f))
By line_intersection_definition on A, h, f we get A == line_intersection(f, h)
By perpendicular_line_definition on E, perpendicular_line(D, g), g we get perpendicular_line(D, g) == perpendicular_line(E, g)
By line_intersection_definition on H, j, k we get H == line_intersection(j, k)
By perpendicular_line_definition on C, g, perpendicular_line(D, g) we get g == perpendicular_line(C, perpendicular_line(D, g))
By perpendicular_line_definition on A, h, perpendicular_line(D, h) we get h == perpendicular_line(A, perpendicular_line(D, h))
By perpendicular_line_definition on J, h, perpendicular_line(D, h) we get h == perpendicular_line(J, perpendicular_line(D, h))
By perpendicular_line_definition on B, f, perpendicular_line(D, f) we get f == perpendicular_line(B, perpendicular_line(D, f))
By line_unique_intersection_v1 on i, j, D, H we get H not in i
By line_unique_intersection_v1 on j, h, H, J we get J not in j
By line_unique_intersection_v1 on f, j, B, D we get D not in f
By line_unique_intersection_v1 on k, f, G, A we get A not in k
By line_unique_intersection_v1 on i, j, D, B we get B not in i
By line_unique_intersection_v1 on g, j, B, D we get D not in g
By line_unique_intersection_v1 on g, h, C, A we get A not in g
By line_unique_intersection_v1 on f, h, A, J we get J not in f
By line_unique_intersection_v1 on k, h, H, F we get F not in k
By line_unique_intersection_v1 on g, h, C, F we get F not in g
By line_unique_intersection_v1 on f, g, B, E we get E not in f
By line_unique_intersection_v1 on j, f, B, G we get G not in j
By line_unique_intersection_v1 on j, h, H, C we get C not in j
By line_unique_intersection_v1 on h, g, C, E we get E not in h
By line_unique_intersection_v1 on f, k, G, H we get H not in f
By line_unique_intersection_v1 on j, k, H, I we get I not in j
By line_unique_intersection_v1 on k, h, H, C we get C not in k
By line_unique_intersection_v1 on j, h, H, A we get A not in j
By line_unique_intersection_v1 on h, i, A, D we get D not in h
By line_unique_intersection_v1 on j, g, B, E we get E not in j
By line_unique_intersection_v1 on f, h, A, C we get C not in f
By line_unique_intersection_v1 on g, h, C, H we get H not in g
By line_unique_intersection_v1 on k, f, G, B we get B not in k
By line_unique_intersection_v1 on h, k, H, G we get G not in h
By line_unique_intersection_v1 on k, j, H, D we get D not in k
By line_unique_intersection_v1 on k, h, H, J we get J not in k
By line_unique_intersection_v1 on i, h, A, C we get C not in i
By line_unique_intersection_v1 on g, h, C, J we get J not in g
By line_unique_intersection_v1 on h, g, C, B we get B not in h
By line_unique_intersection_v1 on i, h, A, J we get J not in i
By line_unique_intersection_v1 on f, h, A, F we get F not in f
By line_unique_intersection_v1 on h, k, H, I we get I not in h
By line_unique_intersection_v1 on f, k, G, I we get I not in f
By line_unique_intersection_v1 on j, h, H, F we get F not in j
By line_unique_intersection_v1 on g, f, B, G we get G not in g
By line_unique_intersection_v1 on i, h, A, F we get F not in i
By line_unique_intersection_v1 on i, f, A, G we get G not in i
By different_points_v1 on C, A we get 0 != distance(A, C)
By different_points_v1 on B, A we get 0 != distance(A, B)
By different_points_v1 on H, G we get 0 != distance(G, H)
By different_points_v1 on B, C we get 0 != distance(B, C)
By reverse_orientation on A, I, C we get orientation(A, I, C) == 0 - orientation(A, C, I) mod 360
By in_imply_collinear on H, C, A we get collinear(A, C, H)
By reverse_orientation on G, C, B we get orientation(B, G, C) == 0 - orientation(B, C, G) mod 360
By reverse_orientation on I, C, D we get orientation(C, D, I) == 0 - orientation(C, I, D) mod 360
By reverse_orientation on C, E, I we get orientation(C, E, I) == 0 - orientation(C, I, E) mod 360
By reverse_orientation on D, I, J we get orientation(D, I, J) == 0 - orientation(D, J, I) mod 360
By reverse_orientation on H, G, E we get orientation(E, H, G) == 0 - orientation(E, G, H) mod 360
By reverse_orientation on H, B, F we get orientation(B, F, H) == 0 - orientation(B, H, F) mod 360
By reverse_orientation on H, B, A we get orientation(A, H, B) == 0 - orientation(A, B, H) mod 360
By reverse_orientation on C, B, F we get orientation(B, F, C) == 0 - orientation(B, C, F) mod 360
By in_imply_collinear on F, C, A we get collinear(A, C, F)
By reverse_orientation on H, J, G we get orientation(G, H, J) == 0 - orientation(G, J, H) mod 360
By in_imply_concyclic on E, G, F, I we get concyclic(E, F, G, I)
By in_imply_collinear on E, B, C we get collinear(B, C, E)
By reverse_orientation on B, E, I we get orientation(B, E, I) == 0 - orientation(B, I, E) mod 360
By in_imply_collinear on I, H, G we get collinear(G, H, I)
By not_in_line_equivalent_to_not_collinear_v0_r on C, G, H we get C not in Line(G, H)
By reverse_orientation on B, J, C we get orientation(B, J, C) == 0 - orientation(B, C, J) mod 360
By reverse_orientation on H, B, E we get orientation(B, E, H) == 0 - orientation(B, H, E) mod 360
By in_imply_collinear on G, A, B we get collinear(A, B, G)
By reverse_orientation on H, I, E we get orientation(E, H, I) == 0 - orientation(E, I, H) mod 360
By in_imply_collinear on J, C, A we get collinear(A, C, J)
By reverse_orientation on C, D, H we get orientation(C, D, H) == 0 - orientation(C, H, D) mod 360
By reverse_orientation on B, G, I we get orientation(B, G, I) == 0 - orientation(B, I, G) mod 360
By reverse_orientation on F, C, G we get orientation(C, G, F) == 0 - orientation(C, F, G) mod 360
By reverse_orientation on F, J, D we get orientation(D, F, J) == 0 - orientation(D, J, F) mod 360
By reverse_orientation on H, G, F we get orientation(F, H, G) == 0 - orientation(F, G, H) mod 360
By reverse_orientation on F, I, G we get orientation(F, I, G) == 0 - orientation(F, G, I) mod 360
By reverse_orientation on C, G, H we get orientation(C, G, H) == 0 - orientation(C, H, G) mod 360
By reverse_orientation on H, J, E we get orientation(E, H, J) == 0 - orientation(E, J, H) mod 360
By reverse_orientation on C, G, I we get orientation(C, G, I) == 0 - orientation(C, I, G) mod 360
By reverse_orientation on H, J, B we get orientation(B, H, J) == 0 - orientation(B, J, H) mod 360
By reverse_orientation on I, D, E we get orientation(D, E, I) == 0 - orientation(D, I, E) mod 360
By reverse_orientation on A, D, J we get orientation(A, D, J) == 0 - orientation(A, J, D) mod 360
By reverse_orientation on I, A, F we get orientation(A, F, I) == 0 - orientation(A, I, F) mod 360
By reverse_orientation on C, H, I we get orientation(C, H, I) == 0 - orientation(C, I, H) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on E, A, C we get E not in Line(A, C)
By reverse_orientation on I, J, B we get orientation(B, I, J) == 0 - orientation(B, J, I) mod 360
By reverse_orientation on D, E, A we get orientation(A, D, E) == 0 - orientation(A, E, D) mod 360
By reverse_orientation on A, H, I we get orientation(A, H, I) == 0 - orientation(A, I, H) mod 360
By reverse_orientation on H, D, E we get orientation(D, E, H) == 0 - orientation(D, H, E) mod 360
By reverse_orientation on E, C, G we get orientation(C, G, E) == 0 - orientation(C, E, G) mod 360
By reverse_orientation on F, H, I we get orientation(F, H, I) == 0 - orientation(F, I, H) mod 360
By reverse_orientation on D, J, B we get orientation(B, D, J) == 0 - orientation(B, J, D) mod 360
By reverse_orientation on A, D, C we get orientation(A, D, C) == 0 - orientation(A, C, D) mod 360
By reverse_orientation on F, I, J we get orientation(F, I, J) == 0 - orientation(F, J, I) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on G, C, A we get G not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, C we get D not in Line(B, C)
By reverse_orientation on I, J, E we get orientation(E, I, J) == 0 - orientation(E, J, I) mod 360
By reverse_orientation on J, F, E we get orientation(E, J, F) == 0 - orientation(E, F, J) mod 360
By reverse_orientation on D, C, B we get orientation(B, D, C) == 0 - orientation(B, C, D) mod 360
By reverse_orientation on I, J, A we get orientation(A, I, J) == 0 - orientation(A, J, I) mod 360
By in_imply_concyclic on E, D, I, J we get concyclic(D, E, I, J)
By reverse_orientation on E, C, F we get orientation(C, F, E) == 0 - orientation(C, E, F) mod 360
By reverse_orientation on D, G, B we get orientation(B, D, G) == 0 - orientation(B, G, D) mod 360
By reverse_orientation on B, G, J we get orientation(B, G, J) == 0 - orientation(B, J, G) mod 360
By reverse_orientation on E, D, G we get orientation(D, G, E) == 0 - orientation(D, E, G) mod 360
By reverse_orientation on H, C, B we get orientation(B, H, C) == 0 - orientation(B, C, H) mod 360
By reverse_orientation on E, G, F we get orientation(E, G, F) == 0 - orientation(E, F, G) mod 360
By reverse_orientation on I, J, G we get orientation(G, I, J) == 0 - orientation(G, J, I) mod 360
By reverse_orientation on C, F, I we get orientation(C, F, I) == 0 - orientation(C, I, F) mod 360
By reverse_orientation on I, B, D we get orientation(B, D, I) == 0 - orientation(B, I, D) mod 360
By reverse_orientation on B, A, E we get orientation(A, E, B) == 0 - orientation(A, B, E) mod 360
By reverse_orientation on F, D, G we get orientation(D, G, F) == 0 - orientation(D, F, G) mod 360
By reverse_orientation on E, D, F we get orientation(D, F, E) == 0 - orientation(D, E, F) mod 360
By reverse_orientation on I, C, B we get orientation(B, I, C) == 0 - orientation(B, C, I) mod 360
By reverse_orientation on J, D, G we get orientation(D, G, J) == 0 - orientation(D, J, G) mod 360
By reverse_orientation on C, A, E we get orientation(A, E, C) == 0 - orientation(A, C, E) mod 360
By reverse_orientation on G, C, A we get orientation(A, G, C) == 0 - orientation(A, C, G) mod 360
By reverse_orientation on F, E, I we get orientation(E, I, F) == 0 - orientation(E, F, I) mod 360
By reverse_orientation on G, H, A we get orientation(A, G, H) == 0 - orientation(A, H, G) mod 360
By reverse_orientation on A, E, J we get orientation(A, E, J) == 0 - orientation(A, J, E) mod 360
By reverse_orientation on B, D, E we get orientation(B, D, E) == 0 - orientation(B, E, D) mod 360
By reverse_orientation on I, B, F we get orientation(B, F, I) == 0 - orientation(B, I, F) mod 360
By reverse_orientation on J, B, F we get orientation(B, F, J) == 0 - orientation(B, J, F) mod 360
By reverse_orientation on A, D, F we get orientation(A, D, F) == 0 - orientation(A, F, D) mod 360
By reverse_orientation on E, J, B we get orientation(B, E, J) == 0 - orientation(B, J, E) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, A we get C not in Line(A, B)
By reverse_orientation on A, G, J we get orientation(A, G, J) == 0 - orientation(A, J, G) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on G, C, B we get G not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on D, A, B we get D not in Line(A, B)
By reverse_orientation on B, D, F we get orientation(B, D, F) == 0 - orientation(B, F, D) mod 360
By reverse_orientation on G, E, I we get orientation(E, I, G) == 0 - orientation(E, G, I) mod 360
By reverse_orientation on J, C, G we get orientation(C, G, J) == 0 - orientation(C, J, G) mod 360
By reverse_orientation on D, F, I we get orientation(D, F, I) == 0 - orientation(D, I, F) mod 360
By reverse_orientation on A, D, G we get orientation(A, D, G) == 0 - orientation(A, G, D) mod 360
By reverse_orientation on H, I, J we get orientation(H, I, J) == 0 - orientation(H, J, I) mod 360
By reverse_orientation on J, C, E we get orientation(C, E, J) == 0 - orientation(C, J, E) mod 360
By reverse_orientation on G, I, D we get orientation(D, G, I) == 0 - orientation(D, I, G) mod 360
By reverse_orientation on F, H, D we get orientation(D, F, H) == 0 - orientation(D, H, F) mod 360
By reverse_orientation on B, A, I we get orientation(A, I, B) == 0 - orientation(A, B, I) mod 360
By reverse_orientation on G, I, A we get orientation(A, G, I) == 0 - orientation(A, I, G) mod 360
By reverse_orientation on C, D, E we get orientation(C, D, E) == 0 - orientation(C, E, D) mod 360
By reverse_orientation on E, J, D we get orientation(D, E, J) == 0 - orientation(D, J, E) mod 360
By circle_circle_intersection_has_at_most_two_points_0 on E, I, D, d, c we get D not in c
By reverse_orientation on H, A, D we get orientation(A, D, H) == 0 - orientation(A, H, D) mod 360
By reverse_orientation on G, E, B we get orientation(B, G, E) == 0 - orientation(B, E, G) mod 360
By reverse_orientation on E, H, C we get orientation(C, E, H) == 0 - orientation(C, H, E) mod 360
By circle_circle_intersection_has_at_most_two_points_0 on E, I, F, c, d we get F not in d
By reverse_orientation on J, D, H we get orientation(D, H, J) == 0 - orientation(D, J, H) mod 360
By reverse_orientation on A, J, B we get orientation(A, J, B) == 0 - orientation(A, B, J) mod 360
By reverse_orientation on C, D, F we get orientation(C, D, F) == 0 - orientation(C, F, D) mod 360
By reverse_orientation on F, B, G we get orientation(B, G, F) == 0 - orientation(B, F, G) mod 360
By reverse_orientation on B, A, C we get orientation(A, C, B) == 0 - orientation(A, B, C) mod 360
By reverse_orientation on H, I, D we get orientation(D, H, I) == 0 - orientation(D, I, H) mod 360
By reverse_orientation on A, D, I we get orientation(A, D, I) == 0 - orientation(A, I, D) mod 360
By reverse_orientation on H, B, G we get orientation(B, G, H) == 0 - orientation(B, H, G) mod 360
By reverse_orientation on D, G, C we get orientation(C, D, G) == 0 - orientation(C, G, D) mod 360
By reverse_orientation on F, A, G we get orientation(A, G, F) == 0 - orientation(A, F, G) mod 360
By reverse_orientation on H, A, E we get orientation(A, E, H) == 0 - orientation(A, H, E) mod 360
By reverse_orientation on E, H, F we get orientation(E, H, F) == 0 - orientation(E, F, H) mod 360
By reverse_orientation on D, J, C we get orientation(C, D, J) == 0 - orientation(C, J, D) mod 360
By reverse_orientation on B, F, E we get orientation(B, F, E) == 0 - orientation(B, E, F) mod 360
By reverse_orientation on I, B, H we get orientation(B, H, I) == 0 - orientation(B, I, H) mod 360
By reverse_orientation on F, B, A we get orientation(A, F, B) == 0 - orientation(A, B, F) mod 360
By reverse_orientation on I, A, E we get orientation(A, E, I) == 0 - orientation(A, I, E) mod 360
By reverse_orientation on J, C, I we get orientation(C, I, J) == 0 - orientation(C, J, I) mod 360
By reverse_orientation on J, G, E we get orientation(E, J, G) == 0 - orientation(E, G, J) mod 360
By reverse_orientation on G, E, A we get orientation(A, G, E) == 0 - orientation(A, E, G) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on E, A, B we get E not in Line(A, B)
By reverse_orientation on J, G, F we get orientation(F, J, G) == 0 - orientation(F, G, J) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, A we get F not in Line(A, B)
By reverse_orientation on B, A, D we get orientation(A, D, B) == 0 - orientation(A, B, D) mod 360
By reverse_orientation on A, F, E we get orientation(A, F, E) == 0 - orientation(A, E, F) mod 360
By reverse_orientation on H, D, G we get orientation(D, G, H) == 0 - orientation(D, H, G) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on D, A, C we get D not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on B, A, C we get B not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on H, C, B we get H not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on I, A, B we get I not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on E, G, H we get E not in Line(G, H)
By circle_circle_intersection_has_at_most_two_points_0 on E, I, G, c, d we get G not in d
By not_in_line_equivalent_to_not_collinear_v0_r on I, C, B we get I not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on J, B, A we get J not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on J, C, B we get J not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on A, C, B we get A not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on J, H, G we get J not in Line(G, H)
By circle_circle_intersection_has_at_most_two_points_0 on I, E, J, d, c we get J not in c
By not_in_line_equivalent_to_not_collinear_v0_r on I, C, A we get I not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on F, H, G we get F not in Line(G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on D, G, H we get D not in Line(G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on F, C, B we get F not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on H, A, B we get H not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on A, H, G we get A not in Line(G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on B, H, G we get B not in Line(G, H)
By power_of_a_point_in_circle on I, d we get 0 == power_of_a_point(I, d)
By power_of_a_point_in_circle on G, c we get 0 == power_of_a_point(G, c)
By power_of_a_point_in_circle on F, c we get 0 == power_of_a_point(F, c)
By power_of_a_point_in_circle on J, d we get 0 == power_of_a_point(J, d)
By power_of_a_point_on_circle on I, c we get 0 == power_of_a_point(I, c)
By power_of_a_point_on_circle on E, d we get 0 == power_of_a_point(E, d)
By power_of_a_point_in_circle on E, c we get 0 == power_of_a_point(E, c)
By power_of_a_point_on_circle on D, d we get 0 == power_of_a_point(D, d)
By angles_on_chord_v0 on E, D, I, J, d we get angle(E, I, D) == angle(E, J, D) mod 360
By angles_on_chord_v1 on I, E, J, D, d we get angle(I, J, E) == angle(I, D, E) + 180 mod 360
By angles_on_chord_v1 on I, E, F, G, c we get angle(I, F, E) == angle(I, G, E) + 180 mod 360
By angles_on_chord_v1 on D, J, I, E, d we get angle(D, I, J) == angle(D, E, J) + 180 mod 360
By angles_on_chord_v0 on E, F, I, G, c we get angle(E, G, F) == angle(E, I, F) mod 360
By angles_on_chord_v0 on G, I, F, E, c we get angle(G, E, I) == angle(G, F, I) mod 360
By angles_on_chord_v0 on J, I, E, D, d we get angle(J, D, I) == angle(J, E, I) mod 360
By angles_on_chord_v1 on I, E, G, F, c we get angle(I, G, E) == angle(I, F, E) + 180 mod 360
By angles_on_chord_v1 on F, G, E, I, c we get angle(F, E, G) == angle(F, I, G) + 180 mod 360
By angles_on_chord_v1 on I, E, D, J, d we get angle(I, D, E) == angle(I, J, E) + 180 mod 360
By angles_on_chord_v1 on D, J, E, I, d we get angle(D, E, J) == angle(D, I, J) + 180 mod 360
By angles_on_chord_v1 on F, G, I, E, c we get angle(F, I, G) == angle(F, E, G) + 180 mod 360
By altitude_definition on D, A, C, perpendicular_line(D, h) we get altitude(D, A, C) == perpendicular_line(D, h)
By altitude_definition on D, B, A, perpendicular_line(D, f) we get altitude(D, A, B) == perpendicular_line(D, f)
By altitude_definition on D, C, B, perpendicular_line(D, g) we get altitude(D, B, C) == perpendicular_line(D, g)
By incenter_concurrency on C, B, A we get incenter(A, B, C) in internal_angle_bisector(A, B, C), incenter(A, B, C) in internal_angle_bisector(B, A, C), incenter(A, B, C) in internal_angle_bisector(A, C, B)
By line_definition on C, D, internal_angle_bisector(A, C, B) we get Line(C, D) == internal_angle_bisector(A, C, B)
By angles_on_chord_v0 on J, E, I, D, d we get angle(J, D, E) == angle(J, I, E) mod 360
By angles_on_chord_v0 on E, G, F, I, c we get angle(E, F, G) == angle(E, I, G) mod 360
By angles_on_chord_v0 on I, D, E, J, d we get angle(I, E, D) == angle(I, J, D) mod 360
By angles_on_chord_v0 on E, J, I, D, d we get angle(E, D, J) == angle(E, I, J) mod 360
By angles_on_chord_v0 on D, I, J, E, d we get angle(D, E, I) == angle(D, J, I) mod 360
By angles_on_chord_v0 on F, I, E, G, c we get angle(F, E, I) == angle(F, G, I) mod 360
By angles_on_chord_v0 on G, E, I, F, c we get angle(G, F, E) == angle(G, I, E) mod 360
By angles_on_chord_v0 on I, F, G, E, c we get angle(I, E, F) == angle(I, G, F) mod 360
By radical_axis_of_intersecting_circles_v0 on E, I, c, d we get Line(E, I) == radical_axis(c, d)
By line_unique_intersection_v1 on internal_angle_bisector(A, C, B), i, D, A we get A not in internal_angle_bisector(A, C, B)
By line_unique_intersection_v1 on internal_angle_bisector(A, C, B), j, D, H we get H not in internal_angle_bisector(A, C, B)
By line_unique_intersection_v1 on internal_angle_bisector(A, C, B), j, D, B we get B not in internal_angle_bisector(A, C, B)
By projection_definition on B, E, Line(D, E) we get E == projection(B, Line(D, E))
By projection_definition on C, F, Line(D, F) we get F == projection(C, Line(D, F))
By projection_definition on B, G, Line(D, G) we get G == projection(B, Line(D, G))
By projection_definition on A, G, Line(D, G) we get G == projection(A, Line(D, G))
By projection_definition on H, F, Line(D, F) we get F == projection(H, Line(D, F))
By projection_definition on C, E, Line(D, E) we get E == projection(C, Line(D, E))
By projection_definition on A, F, Line(D, F) we get F == projection(A, Line(D, F))
By projection_definition on J, F, Line(D, F) we get F == projection(J, Line(D, F))
By different_points_v1 on B, H we get 0 != distance(B, H)
By different_points_v1 on F, A we get 0 != distance(A, F)
By different_points_v1 on I, J we get 0 != distance(I, J)
By different_points_v1 on F, G we get 0 != distance(F, G)
By different_points_v1 on H, D we get 0 != distance(D, H)
By different_points_v1 on A, H we get 0 != distance(A, H)
By different_points_v1 on E, J we get 0 != distance(E, J)
By different_points_v1 on A, J we get 0 != distance(A, J)
By different_points_v1 on G, A we get 0 != distance(A, G)
By different_points_v1 on D, J we get 0 != distance(D, J)
By different_points_v1 on I, F we get 0 != distance(F, I)
By different_points_v1 on F, H we get 0 != distance(F, H)
By different_points_v1 on D, B we get 0 != distance(B, D)
By different_points_v1 on G, I we get 0 != distance(G, I)
By different_points_v1 on D, I we get 0 != distance(D, I)
By same_angle_v0 on G, I, H, F we get angle(H, G, F) == angle(I, G, F) mod 360
By different_points_v1 on G, B we get 0 != distance(B, G)
By different_points_v1 on D, E we get 0 != distance(D, E)
By different_points_v1 on I, H we get 0 != distance(H, I)
By different_points_v1 on A, D we get 0 != distance(A, D)
By different_points_v1 on I, E we get 0 != distance(E, I)
By different_points_v1 on F, E we get 0 != distance(E, F)
By different_points_v1 on E, B we get 0 != distance(B, E)
By different_points_v1 on E, G we get 0 != distance(E, G)
By different_points_v1 on G, D we get 0 != distance(D, G)
By different_points_v1 on F, D we get 0 != distance(D, F)
By different_points_v1 on F, C we get 0 != distance(C, F)
By different_points_v1 on C, J we get 0 != distance(C, J)
By different_points_v1 on C, H we get 0 != distance(C, H)
By different_points_v1 on J, H we get 0 != distance(H, J)
By perpendicular_direction_conditions_v0_r on D, E, B, E we get 180 == 2 * direction(D, E) - 2 * direction(B, E) mod 360
By different_points_v1 on J, F we get 0 != distance(F, J)
By different_points_v1 on C, E we get 0 != distance(C, E)
By in_imply_collinear on F, C, H we get collinear(C, F, H)
By same_angle_v1 on I, G, H, F we get angle(G, I, F) == angle(H, I, F) + 180 mod 360
By same_angle_v1 on I, H, G, D we get angle(H, I, D) == angle(G, I, D) + 180 mod 360
By perpendicular_direction_conditions_v0_r on D, E, B, C we get 180 == 2 * direction(D, E) - 2 * direction(B, C) mod 360
By same_angle_v1 on I, H, G, F we get angle(H, I, F) == angle(G, I, F) + 180 mod 360
By perpendicular_direction_conditions_v0_r on E, D, E, B we get 180 == 2 * direction(E, D) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on B, C, D, E we get 180 == 2 * direction(B, C) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on D, E, C, B we get 180 == 2 * direction(D, E) - 2 * direction(C, B) mod 360
By same_angle_v1 on I, H, G, E we get angle(H, I, E) == angle(G, I, E) + 180 mod 360
By same_angle_v1 on I, G, H, E we get angle(G, I, E) == angle(H, I, E) + 180 mod 360
By perpendicular_direction_conditions_v0_r on C, B, D, E we get 180 == 2 * direction(C, B) - 2 * direction(D, E) mod 360
By in_imply_collinear on J, A, F we get collinear(A, F, J)
By perpendicular_direction_conditions_v0_r on C, E, D, E we get 180 == 2 * direction(C, E) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on B, E, E, D we get 180 == 2 * direction(B, E) - 2 * direction(E, D) mod 360
By same_angle_v0 on G, I, H, E we get angle(H, G, E) == angle(I, G, E) mod 360
By same_angle_v1 on I, G, H, J we get angle(G, I, J) == angle(H, I, J) + 180 mod 360
By perpendicular_direction_conditions_v0_r on E, B, D, E we get 180 == 2 * direction(E, B) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on C, E, E, D we get 180 == 2 * direction(C, E) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on B, C, E, D we get 180 == 2 * direction(B, C) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on E, D, E, C we get 180 == 2 * direction(E, D) - 2 * direction(E, C) mod 360
By same_angle_v1 on I, G, H, D we get angle(G, I, D) == angle(H, I, D) + 180 mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on J, E, F we get J not in Line(E, F)
By perpendicular_direction_conditions_v0_r on E, D, B, E we get 180 == 2 * direction(E, D) - 2 * direction(B, E) mod 360
By perpendicular_direction_conditions_v0_r on E, C, D, E we get 180 == 2 * direction(E, C) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on C, B, E, D we get 180 == 2 * direction(C, B) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on E, D, C, B we get 180 == 2 * direction(E, D) - 2 * direction(C, B) mod 360
By perpendicular_direction_conditions_v0_r on E, C, E, D we get 180 == 2 * direction(E, C) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on B, E, D, E we get 180 == 2 * direction(B, E) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on E, B, E, D we get 180 == 2 * direction(E, B) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on D, E, E, B we get 180 == 2 * direction(D, E) - 2 * direction(E, B) mod 360
By perpendicular_direction_conditions_v0_r on E, D, C, E we get 180 == 2 * direction(E, D) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on D, E, C, E we get 180 == 2 * direction(D, E) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on E, D, B, C we get 180 == 2 * direction(E, D) - 2 * direction(B, C) mod 360
By same_angle_v1 on I, H, G, J we get angle(H, I, J) == angle(G, I, J) + 180 mod 360
By perpendicular_direction_conditions_v0_r on D, E, E, C we get 180 == 2 * direction(D, E) - 2 * direction(E, C) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on H, F, E we get H not in Line(E, F)
By in_imply_collinear on C, F, J we get collinear(C, F, J)
By in_imply_collinear on D, H, B we get collinear(B, D, H)
By reverse_direction on E, I we get 180 == direction(E, I) - direction(I, E) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on C, D, I we get C not in Line(D, I)
By in_imply_collinear on C, J, H we get collinear(C, H, J)
By in_imply_collinear on A, J, H we get collinear(A, H, J)
By in_imply_collinear on H, A, F we get collinear(A, F, H)
By not_in_line_equivalent_to_not_collinear_v0_r on G, J, D we get G not in Line(D, J)
By in_imply_collinear on J, H, F we get collinear(F, H, J)
By reverse_direction on J, E we get 180 == direction(J, E) - direction(E, J) mod 360
By reverse_direction on F, G we get 180 == direction(F, G) - direction(G, F) mod 360
By reverse_direction on F, E we get 180 == direction(F, E) - direction(E, F) mod 360
By line_inequality on Line(F, G), h, G we get h != Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on G, I, F we get G not in Line(F, I)
By line_inequality on Line(I, J), g, I we get g != Line(I, J)
By not_in_line_equivalent_to_not_collinear_v0_r on A, E, G we get A not in Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on J, I, F we get J not in Line(F, I)
By line_inequality on Line(D, G), g, D we get g != Line(D, G)
By line_inequality on Line(E, F), g, F we get g != Line(E, F)
By directions_draw_angle on D, I, G we get exists(angle(D, I, G))
By line_inequality on internal_angle_bisector(A, C, B), g, D we get g != internal_angle_bisector(A, C, B)
By not_in_line_equivalent_to_not_collinear_v0_r on D, I, J we get D not in Line(I, J)
By directions_draw_angle on E, I, G we get exists(angle(E, I, G))
By reverse_direction on I, F we get 180 == direction(I, F) - direction(F, I) mod 360
By line_inequality on Line(E, F), h, E we get h != Line(E, F)
By line_inequality on Line(D, J), g, D we get g != Line(D, J)
By reverse_direction on D, E we get 180 == direction(D, E) - direction(E, D) mod 360
By reverse_direction on E, J we get 180 == direction(E, J) - direction(J, E) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on C, I, E we get C not in Line(E, I)
By not_in_line_equivalent_to_not_collinear_v0_r on F, E, I we get F not in Line(E, I)
By line_inequality on Line(F, G), j, G we get j != Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on A, F, D we get A not in Line(D, F)
By reverse_direction on F, I we get 180 == direction(F, I) - direction(I, F) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on I, D, J we get I not in Line(D, J)
By not_in_line_equivalent_to_not_collinear_v0_r on A, E, J we get A not in Line(E, J)
By reverse_direction on J, D we get 180 == direction(J, D) - direction(D, J) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on I, D, A we get I not in Line(A, D)
By reverse_direction on G, F we get 180 == direction(G, F) - direction(F, G) mod 360
By directions_draw_angle on G, I, J we get exists(angle(G, I, J))
By not_in_line_equivalent_to_not_collinear_v0_r on F, D, J we get F not in Line(D, J)
By not_in_line_equivalent_to_not_collinear_v0_r on H, D, G we get H not in Line(D, G)
By reverse_direction on G, I we get 180 == direction(G, I) - direction(I, G) mod 360
By line_inequality on internal_angle_bisector(A, C, B), f, D we get f != internal_angle_bisector(A, C, B)
By line_inequality on Line(D, J), i, J we get i != Line(D, J)
By not_in_line_equivalent_to_not_collinear_v0_r on H, D, I we get H not in Line(D, I)
By not_in_line_equivalent_to_not_collinear_v0_r on A, F, G we get A not in Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on F, D, E we get F not in Line(D, E)
By line_inequality on Line(F, I), g, F we get g != Line(F, I)
By not_in_line_equivalent_to_not_collinear_v0_r on C, G, F we get C not in Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on J, G, F we get J not in Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on G, D, F we get G not in Line(D, F)
By reverse_direction on D, J we get 180 == direction(D, J) - direction(J, D) mod 360
By directions_draw_angle on I, G, F we get exists(angle(I, G, F))
By not_in_line_equivalent_to_not_collinear_v0_r on B, E, D we get B not in Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on A, D, I we get A not in Line(D, I)
By line_inequality on Line(D, I), f, D we get f != Line(D, I)
By reverse_direction on E, F we get 180 == direction(E, F) - direction(F, E) mod 360
By directions_draw_angle on F, E, I we get exists(angle(F, E, I))
By line_inequality on Line(E, F), i, F we get i != Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on J, I, E we get J not in Line(E, I)
By not_in_line_equivalent_to_not_collinear_v0_r on A, J, I we get A not in Line(I, J)
By directions_draw_angle on F, G, I we get exists(angle(F, G, I))
By not_in_line_equivalent_to_not_collinear_v0_r on B, J, D we get B not in Line(D, J)
By directions_draw_angle on G, E, J we get exists(angle(G, E, J))
By line_inequality on Line(F, I), i, F we get i != Line(F, I)
By not_in_line_equivalent_to_not_collinear_v0_r on G, D, E we get G not in Line(D, E)
By line_inequality on Line(E, F), f, F we get f != Line(E, F)
By line_inequality on Line(I, J), h, I we get h != Line(I, J)
By reverse_direction on I, J we get 180 == direction(I, J) - direction(J, I) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on E, F, D we get E not in Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on H, G, E we get H not in Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on G, J, I we get G not in Line(I, J)
By not_in_line_equivalent_to_not_collinear_v0_r on H, D, F we get H not in Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, J we get C not in Line(E, J)
By not_in_line_equivalent_to_not_collinear_v0_r on C, F, E we get C not in Line(E, F)
By line_inequality on Line(D, J), h, D we get h != Line(D, J)
By line_inequality on Line(F, I), j, F we get j != Line(F, I)
By reverse_direction on I, G we get 180 == direction(I, G) - direction(G, I) mod 360
By reverse_direction on D, I we get 180 == direction(D, I) - direction(I, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on D, J, E we get D not in Line(E, J)
By directions_draw_angle on G, I, D we get exists(angle(G, I, D))
By line_inequality on Line(E, I), f, I we get f != Line(E, I)
By reverse_direction on G, E we get 180 == direction(G, E) - direction(E, G) mod 360
By reverse_direction on I, E we get 180 == direction(I, E) - direction(E, I) mod 360
By reverse_direction on I, D we get 180 == direction(I, D) - direction(D, I) mod 360
By reverse_direction on E, D we get 180 == direction(E, D) - direction(D, E) mod 360
By directions_draw_angle on D, E, F we get exists(angle(D, E, F))
By not_in_line_equivalent_to_not_collinear_v0_r on I, E, F we get I not in Line(E, F)
By directions_draw_angle on G, E, D we get exists(angle(G, E, D))
By reverse_direction on E, G we get 180 == direction(E, G) - direction(G, E) mod 360
By reverse_direction on J, I we get 180 == direction(J, I) - direction(I, J) mod 360
By line_inequality on Line(E, F), k, E we get k != Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on F, D, G we get F not in Line(D, G)
By line_inequality on Line(D, J), f, J we get f != Line(D, J)
By line_inequality on Line(D, F), k, F we get k != Line(D, F)
By line_inequality on Line(D, F), h, D we get h != Line(D, F)
By line_inequality on Line(F, G), i, F we get i != Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on E, I, D we get E not in Line(D, I)
By line_inequality on Line(I, J), f, J we get f != Line(I, J)
By line_inequality on Line(F, G), k, F we get k != Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on A, I, F we get A not in Line(F, I)
By not_in_line_equivalent_to_not_collinear_v0_r on H, G, F we get H not in Line(F, G)
By line_inequality on Line(E, G), i, G we get i != Line(E, G)
By directions_draw_angle on J, I, G we get exists(angle(J, I, G))
By directions_draw_angle on I, E, D we get exists(angle(I, E, D))
By directions_draw_angle on G, I, E we get exists(angle(G, I, E))
By line_inequality on Line(D, G), j, G we get j != Line(D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on J, G, D we get J not in Line(D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on D, I, F we get D not in Line(F, I)
By directions_draw_angle on D, E, G we get exists(angle(D, E, G))
By directions_draw_angle on F, E, J we get exists(angle(F, E, J))
By not_in_line_equivalent_to_not_collinear_v0_r on C, J, I we get C not in Line(I, J)
By not_in_line_equivalent_to_not_collinear_v0_r on I, D, E we get I not in Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on F, G, E we get F not in Line(E, G)
By directions_draw_angle on J, D, E we get exists(angle(J, D, E))
By directions_draw_angle on E, I, J we get exists(angle(E, I, J))
By not_in_line_equivalent_to_not_collinear_v0_r on H, E, I we get H not in Line(E, I)
By not_in_line_equivalent_to_not_collinear_v0_r on C, J, D we get C not in Line(D, J)
By not_in_line_equivalent_to_not_collinear_v0_r on B, I, J we get B not in Line(I, J)
By not_in_line_equivalent_to_not_collinear_v0_r on C, D, G we get C not in Line(D, G)
By line_inequality on Line(E, G), f, E we get f != Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on E, G, F we get E not in Line(F, G)
By line_inequality on Line(E, J), f, E we get f != Line(E, J)
By line_inequality on Line(D, I), g, D we get g != Line(D, I)
By line_inequality on Line(F, G), g, G we get g != Line(F, G)
By line_inequality on Line(D, J), k, J we get k != Line(D, J)
By line_inequality on Line(E, G), j, E we get j != Line(E, G)
By line_inequality on Line(D, F), f, F we get f != Line(D, F)
By directions_draw_angle on E, D, J we get exists(angle(E, D, J))
By not_in_line_equivalent_to_not_collinear_v0_r on B, G, D we get B not in Line(D, G)
By line_inequality on Line(D, F), g, F we get g != Line(D, F)
By directions_draw_angle on F, I, D we get exists(angle(F, I, D))
By line_inequality on internal_angle_bisector(A, C, B), k, C we get k != internal_angle_bisector(A, C, B)
By directions_draw_angle on I, E, F we get exists(angle(I, E, F))
By not_in_line_equivalent_to_not_collinear_v0_r on A, D, E we get A not in Line(D, E)
By line_inequality on Line(E, J), h, E we get h != Line(E, J)
By line_inequality on Line(D, J), j, J we get j != Line(D, J)
By not_in_line_equivalent_to_not_collinear_v0_r on F, J, E we get F not in Line(E, J)
By directions_draw_angle on J, E, G we get exists(angle(J, E, G))
By line_inequality on Line(E, I), k, E we get k != Line(E, I)
By not_in_line_equivalent_to_not_collinear_v0_r on D, I, E we get D not in Line(E, I)
By directions_draw_angle on F, E, D we get exists(angle(F, E, D))
By not_in_line_equivalent_to_not_collinear_v0_r on H, E, D we get H not in Line(D, E)
By directions_draw_angle on D, E, I we get exists(angle(D, E, I))
By not_in_line_equivalent_to_not_collinear_v0_r on A, E, F we get A not in Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on B, J, E we get B not in Line(E, J)
By not_in_line_equivalent_to_not_collinear_v0_r on B, F, G we get B not in Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on H, J, E we get H not in Line(E, J)
By line_inequality on Line(I, J), j, I we get j != Line(I, J)
By line_inequality on Line(E, F), j, F we get j != Line(E, F)
By directions_draw_angle on G, F, E we get exists(angle(G, F, E))
By not_in_line_equivalent_to_not_collinear_v0_r on I, J, E we get I not in Line(E, J)
By line_inequality on Line(D, E), k, D we get k != Line(D, E)
By line_inequality on Line(E, J), i, J we get i != Line(E, J)
By directions_draw_angle on F, I, J we get exists(angle(F, I, J))
By line_inequality on Line(D, G), f, D we get f != Line(D, G)
By directions_draw_angle on D, J, I we get exists(angle(D, J, I))
By directions_draw_angle on E, F, G we get exists(angle(E, F, G))
By line_circle_intersection_has_at_most_two_points_0 on G, I, H, c we get H not in c
By not_in_line_equivalent_to_not_collinear_v0_r on B, F, E we get B not in Line(E, F)
By line_inequality on Line(E, I), h, I we get h != Line(E, I)
By not_in_line_equivalent_to_not_collinear_v0_r on I, G, F we get I not in Line(F, G)
By directions_draw_angle on J, E, F we get exists(angle(J, E, F))
By directions_draw_angle on J, I, E we get exists(angle(J, I, E))
By line_inequality on Line(D, I), h, I we get h != Line(D, I)
By directions_draw_angle on I, J, D we get exists(angle(I, J, D))
By not_in_line_equivalent_to_not_collinear_v0_r on H, I, J we get H not in Line(I, J)
By not_in_line_equivalent_to_not_collinear_v0_r on J, F, D we get J not in Line(D, F)
By directions_draw_angle on D, I, F we get exists(angle(D, I, F))
By line_inequality on Line(E, I), g, I we get g != Line(E, I)
By line_inequality on Line(F, I), f, I we get f != Line(F, I)
By directions_draw_angle on J, I, F we get exists(angle(J, I, F))
By not_in_line_equivalent_to_not_collinear_v0_r on E, J, D we get E not in Line(D, J)
By line_inequality on Line(D, E), f, E we get f != Line(D, E)
By line_inequality on Line(D, F), j, F we get j != Line(D, F)
By line_inequality on Line(F, G), f, F we get f != Line(F, G)
By line_inequality on Line(E, G), h, E we get h != Line(E, G)
By line_inequality on Line(E, I), j, E we get j != Line(E, I)
By not_in_line_equivalent_to_not_collinear_v0_r on C, F, D we get C not in Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on I, D, F we get I not in Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on J, I, D we get J not in Line(D, I)
By not_in_line_equivalent_to_not_collinear_v0_r on B, I, E we get B not in Line(E, I)
By line_inequality on Line(I, J), k, J we get k != Line(I, J)
By not_in_line_equivalent_to_not_collinear_v0_r on B, E, G we get B not in Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on A, J, D we get A not in Line(D, J)
By not_in_line_equivalent_to_not_collinear_v0_r on E, A, D we get E not in Line(A, D)
By line_inequality on Line(E, G), k, E we get k != Line(E, G)
By line_inequality on Line(E, G), g, G we get g != Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on G, J, E we get G not in Line(E, J)
By not_in_line_equivalent_to_not_collinear_v0_r on H, F, I we get H not in Line(F, I)
By not_in_line_equivalent_to_not_collinear_v0_r on H, J, D we get H not in Line(D, J)
By line_inequality on Line(D, E), j, E we get j != Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, G we get C not in Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on J, D, E we get J not in Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on E, J, I we get E not in Line(I, J)
By not_in_line_equivalent_to_not_collinear_v0_r on C, F, I we get C not in Line(F, I)
By not_in_line_equivalent_to_not_collinear_v0_r on F, I, D we get F not in Line(D, I)
By not_in_line_equivalent_to_not_collinear_v0_r on D, F, G we get D not in Line(F, G)
By line_inequality on Line(E, J), g, J we get g != Line(E, J)
By not_in_line_equivalent_to_not_collinear_v0_r on E, G, D we get E not in Line(D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on E, I, F we get E not in Line(F, I)
By not_in_line_equivalent_to_not_collinear_v0_r on A, E, I we get A not in Line(E, I)
By line_inequality on Line(F, I), k, F we get k != Line(F, I)
By line_inequality on Line(D, I), k, D we get k != Line(D, I)
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, F we get G not in Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on B, F, D we get B not in Line(D, F)
By line_inequality on Line(D, I), j, I we get j != Line(D, I)
By line_inequality on Line(I, J), i, J we get i != Line(I, J)
By line_inequality on Line(E, J), j, E we get j != Line(E, J)
By line_inequality on internal_angle_bisector(A, C, B), h, D we get h != internal_angle_bisector(A, C, B)
By not_in_line_equivalent_to_not_collinear_v0_r on D, F, E we get D not in Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on D, G, E we get D not in Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on A, D, G we get A not in Line(D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on I, D, G we get I not in Line(D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on B, I, F we get B not in Line(F, I)
By line_inequality on Line(F, I), h, I we get h != Line(F, I)
By not_in_line_equivalent_to_not_collinear_v0_r on I, G, E we get I not in Line(E, G)
By line_inequality on Line(D, G), i, G we get i != Line(D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, D we get C not in Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on F, I, J we get F not in Line(I, J)
By not_in_line_equivalent_to_not_collinear_v0_r on J, E, G we get J not in Line(E, G)
By line_inequality on Line(D, E), h, E we get h != Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on B, I, D we get B not in Line(D, I)
By not_in_line_equivalent_to_not_collinear_v0_r on G, D, I we get G not in Line(D, I)
By not_in_line_equivalent_to_not_collinear_v0_r on G, I, E we get G not in Line(E, I)
By line_inequality on Line(D, E), g, D we get g != Line(D, E)
By line_inequality on Line(D, G), h, D we get h != Line(D, G)
By line_inequality on Line(D, F), i, F we get i != Line(D, F)
By line_inequality on Line(D, G), k, D we get k != Line(D, G)
By line_inequality on Line(E, J), k, E we get k != Line(E, J)
By same_angle_v1 on F, A, C, G we get angle(A, F, G) == angle(C, F, G) + 180 mod 360
By same_angle_v0 on J, C, A, E we get angle(A, J, E) == angle(C, J, E) mod 360
By perpendicular_direction_conditions_v0_r on J, C, D, F we get 180 == 2 * direction(J, C) - 2 * direction(D, F) mod 360
By same_angle_v1 on G, A, B, I we get angle(A, G, I) == angle(B, G, I) + 180 mod 360
By perpendicular_direction_conditions_v0_r on D, F, J, F we get 180 == 2 * direction(D, F) - 2 * direction(J, F) mod 360
By perpendicular_direction_conditions_v0_r on F, D, J, C we get 180 == 2 * direction(F, D) - 2 * direction(J, C) mod 360
By perpendicular_direction_conditions_v0_r on F, D, C, A we get 180 == 2 * direction(F, D) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on F, D, F, A we get 180 == 2 * direction(F, D) - 2 * direction(F, A) mod 360
By same_angle_v0 on G, H, I, B we get angle(H, G, B) == angle(I, G, B) mod 360
By perpendicular_direction_conditions_v0_r on A, H, F, D we get 180 == 2 * direction(A, H) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on F, D, F, H we get 180 == 2 * direction(F, D) - 2 * direction(F, H) mod 360
By perpendicular_direction_conditions_v0_r on D, F, H, F we get 180 == 2 * direction(D, F) - 2 * direction(H, F) mod 360
By perpendicular_direction_conditions_v0_r on F, J, F, D we get 180 == 2 * direction(F, J) - 2 * direction(F, D) mod 360
By same_angle_v0 on J, C, A, I we get angle(A, J, I) == angle(C, J, I) mod 360
By perpendicular_direction_conditions_v0_r on G, D, G, B we get 180 == 2 * direction(G, D) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on C, F, F, D we get 180 == 2 * direction(C, F) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on D, F, A, C we get 180 == 2 * direction(D, F) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on D, F, C, A we get 180 == 2 * direction(D, F) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on F, D, H, F we get 180 == 2 * direction(F, D) - 2 * direction(H, F) mod 360
By perpendicular_direction_conditions_v0_r on A, F, F, D we get 180 == 2 * direction(A, F) - 2 * direction(F, D) mod 360
By same_angle_v1 on G, B, A, E we get angle(B, G, E) == angle(A, G, E) + 180 mod 360
By perpendicular_direction_conditions_v0_r on J, F, D, F we get 180 == 2 * direction(J, F) - 2 * direction(D, F) mod 360
By same_angle_v0 on J, C, A, D we get angle(A, J, D) == angle(C, J, D) mod 360
By perpendicular_direction_conditions_v0_r on F, D, A, C we get 180 == 2 * direction(F, D) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on J, C, F, D we get 180 == 2 * direction(J, C) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on A, C, F, D we get 180 == 2 * direction(A, C) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on C, H, F, D we get 180 == 2 * direction(C, H) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on A, H, D, F we get 180 == 2 * direction(A, H) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on A, G, D, G we get 180 == 2 * direction(A, G) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on F, D, F, J we get 180 == 2 * direction(F, D) - 2 * direction(F, J) mod 360
By perpendicular_direction_conditions_v0_r on D, F, H, A we get 180 == 2 * direction(D, F) - 2 * direction(H, A) mod 360
By perpendicular_direction_conditions_v0_r on C, A, D, F we get 180 == 2 * direction(C, A) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on C, J, D, F we get 180 == 2 * direction(C, J) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on B, G, G, D we get 180 == 2 * direction(B, G) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on F, D, F, C we get 180 == 2 * direction(F, D) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on A, B, D, G we get 180 == 2 * direction(A, B) - 2 * direction(D, G) mod 360
By same_angle_v1 on E, B, C, F we get angle(B, E, F) == angle(C, E, F) + 180 mod 360
By perpendicular_direction_conditions_v0_r on H, C, D, F we get 180 == 2 * direction(H, C) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on C, F, D, F we get 180 == 2 * direction(C, F) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on D, F, F, C we get 180 == 2 * direction(D, F) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on F, D, A, J we get 180 == 2 * direction(F, D) - 2 * direction(A, J) mod 360
By perpendicular_direction_conditions_v0_r on F, A, F, D we get 180 == 2 * direction(F, A) - 2 * direction(F, D) mod 360
By same_angle_v1 on F, A, C, I we get angle(A, F, I) == angle(C, F, I) + 180 mod 360
By perpendicular_direction_conditions_v0_r on G, A, D, G we get 180 == 2 * direction(G, A) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on F, A, D, F we get 180 == 2 * direction(F, A) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on F, C, D, F we get 180 == 2 * direction(F, C) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on D, F, C, F we get 180 == 2 * direction(D, F) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on J, A, F, D we get 180 == 2 * direction(J, A) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on D, F, A, F we get 180 == 2 * direction(D, F) - 2 * direction(A, F) mod 360
By same_angle_v1 on F, A, C, E we get angle(A, F, E) == angle(C, F, E) + 180 mod 360
By perpendicular_direction_conditions_v0_r on F, D, J, F we get 180 == 2 * direction(F, D) - 2 * direction(J, F) mod 360
By perpendicular_direction_conditions_v0_r on A, F, D, F we get 180 == 2 * direction(A, F) - 2 * direction(D, F) mod 360
By same_angle_v1 on E, B, C, I we get angle(B, E, I) == angle(C, E, I) + 180 mod 360
By perpendicular_direction_conditions_v0_r on J, A, D, F we get 180 == 2 * direction(J, A) - 2 * direction(D, F) mod 360
By same_angle_v1 on G, A, B, F we get angle(A, G, F) == angle(B, G, F) + 180 mod 360
By perpendicular_direction_conditions_v0_r on D, G, G, A we get 180 == 2 * direction(D, G) - 2 * direction(G, A) mod 360
By same_angle_v1 on E, C, B, F we get angle(C, E, F) == angle(B, E, F) + 180 mod 360
By same_angle_v1 on G, B, A, I we get angle(B, G, I) == angle(A, G, I) + 180 mod 360
By same_angle_v1 on F, C, A, G we get angle(C, F, G) == angle(A, F, G) + 180 mod 360
By same_angle_v0 on G, H, I, D we get angle(H, G, D) == angle(I, G, D) mod 360
By same_angle_v1 on G, A, B, E we get angle(A, G, E) == angle(B, G, E) + 180 mod 360
By perpendicular_direction_conditions_v0_r on G, D, B, A we get 180 == 2 * direction(G, D) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on D, G, A, G we get 180 == 2 * direction(D, G) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on H, F, F, D we get 180 == 2 * direction(H, F) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on F, H, D, F we get 180 == 2 * direction(F, H) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on D, G, G, B we get 180 == 2 * direction(D, G) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on D, F, A, H we get 180 == 2 * direction(D, F) - 2 * direction(A, H) mod 360
By perpendicular_direction_conditions_v0_r on G, B, D, G we get 180 == 2 * direction(G, B) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on D, F, F, A we get 180 == 2 * direction(D, F) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on D, G, B, G we get 180 == 2 * direction(D, G) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on D, F, C, J we get 180 == 2 * direction(D, F) - 2 * direction(C, J) mod 360
By same_angle_v1 on G, B, A, F we get angle(B, G, F) == angle(A, G, F) + 180 mod 360
By perpendicular_direction_conditions_v0_r on D, F, J, H we get 180 == 2 * direction(D, F) - 2 * direction(J, H) mod 360
By perpendicular_direction_conditions_v0_r on A, J, D, F we get 180 == 2 * direction(A, J) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on F, D, H, C we get 180 == 2 * direction(F, D) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on B, A, D, G we get 180 == 2 * direction(B, A) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on F, C, F, D we get 180 == 2 * direction(F, C) - 2 * direction(F, D) mod 360
By same_angle_v1 on E, B, C, D we get angle(B, E, D) == angle(C, E, D) + 180 mod 360
By perpendicular_direction_conditions_v0_r on F, H, F, D we get 180 == 2 * direction(F, H) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on F, D, J, H we get 180 == 2 * direction(F, D) - 2 * direction(J, H) mod 360
By same_angle_v1 on E, B, C, J we get angle(B, E, J) == angle(C, E, J) + 180 mod 360
By perpendicular_direction_conditions_v0_r on H, J, F, D we get 180 == 2 * direction(H, J) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on H, F, D, F we get 180 == 2 * direction(H, F) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on F, D, H, A we get 180 == 2 * direction(F, D) - 2 * direction(H, A) mod 360
By perpendicular_direction_conditions_v0_r on D, F, F, H we get 180 == 2 * direction(D, F) - 2 * direction(F, H) mod 360
By perpendicular_direction_conditions_v0_r on A, B, G, D we get 180 == 2 * direction(A, B) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on D, F, F, J we get 180 == 2 * direction(D, F) - 2 * direction(F, J) mod 360
By perpendicular_direction_conditions_v0_r on D, F, J, C we get 180 == 2 * direction(D, F) - 2 * direction(J, C) mod 360
By perpendicular_direction_conditions_v0_r on A, J, F, D we get 180 == 2 * direction(A, J) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on F, D, C, J we get 180 == 2 * direction(F, D) - 2 * direction(C, J) mod 360
By perpendicular_direction_conditions_v0_r on D, G, A, B we get 180 == 2 * direction(D, G) - 2 * direction(A, B) mod 360
By same_angle_v1 on F, C, A, E we get angle(C, F, E) == angle(A, F, E) + 180 mod 360
By perpendicular_direction_conditions_v0_r on F, D, C, H we get 180 == 2 * direction(F, D) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on A, C, D, F we get 180 == 2 * direction(A, C) - 2 * direction(D, F) mod 360
By same_angle_v1 on E, C, B, G we get angle(C, E, G) == angle(B, E, G) + 180 mod 360
By perpendicular_direction_conditions_v0_r on D, G, B, A we get 180 == 2 * direction(D, G) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on B, G, D, G we get 180 == 2 * direction(B, G) - 2 * direction(D, G) mod 360
By same_angle_v1 on E, C, B, J we get angle(C, E, J) == angle(B, E, J) + 180 mod 360
By perpendicular_direction_conditions_v0_r on G, D, A, B we get 180 == 2 * direction(G, D) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on D, F, A, J we get 180 == 2 * direction(D, F) - 2 * direction(A, J) mod 360
By perpendicular_direction_conditions_v0_r on F, D, H, J we get 180 == 2 * direction(F, D) - 2 * direction(H, J) mod 360
By perpendicular_direction_conditions_v0_r on G, A, G, D we get 180 == 2 * direction(G, A) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on D, F, H, J we get 180 == 2 * direction(D, F) - 2 * direction(H, J) mod 360
By perpendicular_direction_conditions_v0_r on F, D, C, F we get 180 == 2 * direction(F, D) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on A, G, G, D we get 180 == 2 * direction(A, G) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on H, A, F, D we get 180 == 2 * direction(H, A) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on H, J, D, F we get 180 == 2 * direction(H, J) - 2 * direction(D, F) mod 360
By same_angle_v1 on E, C, B, D we get angle(C, E, D) == angle(B, E, D) + 180 mod 360
By perpendicular_direction_conditions_v0_r on D, F, H, C we get 180 == 2 * direction(D, F) - 2 * direction(H, C) mod 360
By perpendicular_direction_conditions_v0_r on G, D, B, G we get 180 == 2 * direction(G, D) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on J, H, D, F we get 180 == 2 * direction(J, H) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on C, A, F, D we get 180 == 2 * direction(C, A) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on G, B, G, D we get 180 == 2 * direction(G, B) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on G, D, A, G we get 180 == 2 * direction(G, D) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on J, F, F, D we get 180 == 2 * direction(J, F) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on H, C, F, D we get 180 == 2 * direction(H, C) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on F, D, A, H we get 180 == 2 * direction(F, D) - 2 * direction(A, H) mod 360
By perpendicular_direction_conditions_v0_r on C, H, D, F we get 180 == 2 * direction(C, H) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on F, J, D, F we get 180 == 2 * direction(F, J) - 2 * direction(D, F) mod 360
By same_angle_v1 on F, C, A, I we get angle(C, F, I) == angle(A, F, I) + 180 mod 360
By same_angle_v0 on G, H, I, A we get angle(H, G, A) == angle(I, G, A) mod 360
By perpendicular_direction_conditions_v0_r on F, D, A, F we get 180 == 2 * direction(F, D) - 2 * direction(A, F) mod 360
By same_angle_v1 on E, B, C, G we get angle(B, E, G) == angle(C, E, G) + 180 mod 360
By perpendicular_direction_conditions_v0_r on B, A, G, D we get 180 == 2 * direction(B, A) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on G, D, G, A we get 180 == 2 * direction(G, D) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on J, H, F, D we get 180 == 2 * direction(J, H) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on C, J, F, D we get 180 == 2 * direction(C, J) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on F, D, J, A we get 180 == 2 * direction(F, D) - 2 * direction(J, A) mod 360
By perpendicular_direction_conditions_v0_r on H, A, D, F we get 180 == 2 * direction(H, A) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on D, F, C, H we get 180 == 2 * direction(D, F) - 2 * direction(C, H) mod 360
By perpendicular_direction_conditions_v0_r on D, F, J, A we get 180 == 2 * direction(D, F) - 2 * direction(J, A) mod 360
By same_angle_v1 on E, C, B, I we get angle(C, E, I) == angle(B, E, I) + 180 mod 360
By collinear_definition on I, H, G we get H in Line(G, I), G in Line(H, I), Line(G, I) == Line(H, I), 0 == 2 * angle(H, I, G) mod 360
By radical_axis_definition_v0_r on E, c, d we get E in radical_axis(c, d)
By altitude_definition on C, D, F, h we get h == altitude(C, D, F)
By altitude_definition on B, D, G, f we get f == altitude(B, D, G)
By altitude_definition on C, D, E, g we get g == altitude(C, D, E)
By altitude_definition on A, G, D, f we get f == altitude(A, D, G)
By altitude_definition on H, D, F, h we get h == altitude(H, D, F)
By perpendicular_angle_conditions_v0 on B, E, D we get angle(B, E, D) == orientation(B, E, D) mod 360
By collinear_definition on I, G, H we get G in Line(H, I), H in Line(G, I), Line(G, I) == Line(H, I), 0 == 2 * angle(G, I, H) mod 360
By altitude_definition on A, F, D, h we get h == altitude(A, D, F)
By radical_axis_definition_v0_r on I, c, d we get I in radical_axis(c, d)
By collinear_definition on G, H, I we get H in Line(G, I), I in Line(G, H), Line(G, H) == Line(G, I), 0 == 2 * angle(H, G, I) mod 360
By incenter_isogonal_conjugate on B, A, C we get incenter(A, B, C) == isogonal_conjugate(incenter(A, B, C), A, B, C)
By collinear_definition on G, I, H we get I in Line(G, H), H in Line(G, I), Line(G, H) == Line(G, I), 0 == 2 * angle(I, G, H) mod 360
By altitude_definition on J, F, D, h we get h == altitude(J, D, F)
By altitude_definition on B, E, D, g we get g == altitude(B, D, E)
By perpendicular_angle_conditions_v0 on C, E, D we get angle(C, E, D) == orientation(C, E, D) mod 360
By perpendicular_angle_conditions_v0 on D, E, C we get angle(D, E, C) == orientation(C, D, E) mod 360
By perpendicular_angle_conditions_v0 on D, E, B we get angle(D, E, B) == orientation(B, D, E) mod 360
By same_angle_v0 on A, B, G, C we get angle(B, A, C) == angle(G, A, C) mod 360
By same_angle_v0 on B, G, A, D we get angle(A, B, D) == angle(G, B, D) mod 360
By same_angle_v1 on G, B, A, D we get angle(B, G, D) == angle(A, G, D) + 180 mod 360
By same_angle_v0 on B, A, G, C we get angle(A, B, C) == angle(G, B, C) mod 360
By same_angle_v0 on A, F, C, D we get angle(C, A, D) == angle(F, A, D) mod 360
By same_angle_v0 on C, H, A, B we get angle(A, C, B) == angle(H, C, B) mod 360
By same_angle_v1 on C, A, J, B we get angle(A, C, B) == angle(J, C, B) + 180 mod 360
By same_angle_v1 on H, C, A, I we get angle(C, H, I) == angle(A, H, I) + 180 mod 360
By same_angle_v0 on B, E, C, A we get angle(C, B, A) == angle(E, B, A) mod 360
By same_angle_v0 on A, B, G, H we get angle(B, A, H) == angle(G, A, H) mod 360
By same_angle_v1 on H, A, C, D we get angle(A, H, D) == angle(C, H, D) + 180 mod 360
By same_angle_v0 on B, E, C, H we get angle(C, B, H) == angle(E, B, H) mod 360
By same_angle_v0 on C, A, F, B we get angle(A, C, B) == angle(F, C, B) mod 360
By same_angle_v0 on B, A, G, H we get angle(A, B, H) == angle(G, B, H) mod 360
By same_angle_v0 on A, C, H, B we get angle(C, A, B) == angle(H, A, B) mod 360
By same_angle_v0 on C, B, E, A we get angle(B, C, A) == angle(E, C, A) mod 360
By same_angle_v1 on G, A, B, H we get angle(A, G, H) == angle(B, G, H) + 180 mod 360
By same_angle_v1 on F, A, C, D we get angle(A, F, D) == angle(C, F, D) + 180 mod 360
By same_angle_v0 on C, F, A, E we get angle(A, C, E) == angle(F, C, E) mod 360
By same_angle_v0 on B, E, C, G we get angle(C, B, G) == angle(E, B, G) mod 360
By same_angle_v1 on C, J, A, E we get angle(J, C, E) == angle(A, C, E) + 180 mod 360
By same_angle_v1 on G, A, B, D we get angle(A, G, D) == angle(B, G, D) + 180 mod 360
By same_angle_v0 on B, E, C, D we get angle(C, B, D) == angle(E, B, D) mod 360
By same_angle_v1 on H, C, A, D we get angle(C, H, D) == angle(A, H, D) + 180 mod 360
By same_angle_v1 on C, J, A, B we get angle(J, C, B) == angle(A, C, B) + 180 mod 360
By same_angle_v0 on A, C, F, B we get angle(C, A, B) == angle(F, A, B) mod 360
By same_angle_v0 on H, G, I, B we get angle(G, H, B) == angle(I, H, B) mod 360
By same_angle_v0 on A, C, J, D we get angle(C, A, D) == angle(J, A, D) mod 360
By same_angle_v0 on A, B, G, D we get angle(B, A, D) == angle(G, A, D) mod 360
By same_angle_v0 on H, I, G, C we get angle(G, H, C) == angle(I, H, C) mod 360
By same_angle_v0 on A, C, J, B we get angle(C, A, B) == angle(J, A, B) mod 360
By same_angle_v0 on C, H, A, E we get angle(A, C, E) == angle(H, C, E) mod 360
By same_angle_v0 on C, B, E, F we get angle(B, C, F) == angle(E, C, F) mod 360
By same_angle_v1 on H, A, C, B we get angle(A, H, B) == angle(C, H, B) + 180 mod 360
By same_angle_v0 on A, B, G, J we get angle(B, A, J) == angle(G, A, J) mod 360
By same_angle_v0 on H, I, G, J we get angle(G, H, J) == angle(I, H, J) mod 360
By same_angle_v0 on B, A, G, E we get angle(A, B, E) == angle(G, B, E) mod 360
By same_angle_v0 on A, G, B, F we get angle(B, A, F) == angle(G, A, F) mod 360
By same_angle_v0 on H, G, I, D we get angle(G, H, D) == angle(I, H, D) mod 360
By same_angle_v0 on C, E, B, H we get angle(B, C, H) == angle(E, C, H) mod 360
By same_angle_v0 on A, C, J, G we get angle(C, A, G) == angle(J, A, G) mod 360
By same_angle_v0 on C, B, E, J we get angle(B, C, J) == angle(E, C, J) mod 360
By same_angle_v0 on H, I, G, F we get angle(G, H, F) == angle(I, H, F) mod 360
By same_angle_v1 on G, B, A, H we get angle(B, G, H) == angle(A, G, H) + 180 mod 360
By same_angle_v1 on F, C, A, D we get angle(C, F, D) == angle(A, F, D) + 180 mod 360
By same_angle_v1 on H, A, C, G we get angle(A, H, G) == angle(C, H, G) + 180 mod 360
By same_angle_v1 on H, A, C, I we get angle(A, H, I) == angle(C, H, I) + 180 mod 360
By same_angle_v0 on A, H, C, D we get angle(C, A, D) == angle(H, A, D) mod 360
By same_angle_v0 on H, G, I, A we get angle(G, H, A) == angle(I, H, A) mod 360
By same_angle_v1 on H, C, A, G we get angle(C, H, G) == angle(A, H, G) + 180 mod 360
By same_angle_v1 on C, A, J, E we get angle(A, C, E) == angle(J, C, E) + 180 mod 360
By same_angle_v0 on A, F, C, G we get angle(C, A, G) == angle(F, A, G) mod 360
By same_angle_v0 on A, H, C, G we get angle(C, A, G) == angle(H, A, G) mod 360
By same_angle_v1 on H, C, A, B we get angle(C, H, B) == angle(A, H, B) + 180 mod 360
By altitude_definition on D, A, G, Line(D, G) we get Line(D, G) == altitude(D, A, G)
By collinear_definition on G, B, A we get B in Line(A, G), A in Line(B, G), Line(A, G) == Line(B, G), 0 == 2 * angle(B, G, A) mod 360
By collinear_definition on A, C, H we get C in Line(A, H), H in Line(A, C), Line(A, C) == Line(A, H), 0 == 2 * angle(C, A, H) mod 360
By perpendicular_angle_conditions_v0 on J, F, D we get angle(J, F, D) == orientation(D, J, F) mod 360
By collinear_definition on C, H, A we get H in Line(A, C), A in Line(C, H), Line(A, C) == Line(C, H), 0 == 2 * angle(H, C, A) mod 360
By collinear_definition on A, F, C we get F in Line(A, C), C in Line(A, F), Line(A, C) == Line(A, F), 0 == 2 * angle(F, A, C) mod 360
By altitude_definition on D, F, H, Line(D, F) we get Line(D, F) == altitude(D, F, H)
By altitude_definition on D, B, E, Line(D, E) we get Line(D, E) == altitude(D, B, E)
By altitude_definition on D, J, F, Line(D, F) we get Line(D, F) == altitude(D, F, J)
By altitude_definition on D, E, C, Line(D, E) we get Line(D, E) == altitude(D, C, E)
By altitude_definition on D, A, H, Line(D, F) we get Line(D, F) == altitude(D, A, H)
By collinear_definition on F, A, C we get A in Line(C, F), C in Line(A, F), Line(A, F) == Line(C, F), 0 == 2 * angle(A, F, C) mod 360
By collinear_definition on B, C, E we get C in Line(B, E), E in Line(B, C), Line(B, C) == Line(B, E), 0 == 2 * angle(C, B, E) mod 360
By altitude_definition on D, J, C, Line(D, F) we get Line(D, F) == altitude(D, C, J)
By perpendicular_angle_conditions_v0 on D, G, A we get angle(D, G, A) == orientation(A, D, G) mod 360
By altitude_definition on D, F, C, Line(D, F) we get Line(D, F) == altitude(D, C, F)
By perpendicular_angle_conditions_v0 on D, F, A we get angle(D, F, A) == orientation(A, D, F) mod 360
By collinear_definition on E, B, C we get B in Line(C, E), C in Line(B, E), Line(B, E) == Line(C, E), 0 == 2 * angle(B, E, C) mod 360
By altitude_definition on D, G, B, Line(D, G) we get Line(D, G) == altitude(D, B, G)
By collinear_definition on G, A, B we get A in Line(B, G), B in Line(A, G), Line(A, G) == Line(B, G), 0 == 2 * angle(A, G, B) mod 360
By collinear_definition on J, C, A we get C in Line(A, J), A in Line(C, J), Line(A, J) == Line(C, J), 0 == 2 * angle(C, J, A) mod 360
By altitude_definition on D, A, F, Line(D, F) we get Line(D, F) == altitude(D, A, F)
By collinear_definition on C, A, J we get A in Line(C, J), J in Line(A, C), Line(A, C) == Line(C, J), 0 == 2 * angle(A, C, J) mod 360
By collinear_definition on C, F, A we get F in Line(A, C), A in Line(C, F), Line(A, C) == Line(C, F), 0 == 2 * angle(F, C, A) mod 360
By altitude_definition on D, A, J, Line(D, F) we get Line(D, F) == altitude(D, A, J)
By perpendicular_angle_conditions_v0 on D, F, J we get angle(D, F, J) == orientation(D, F, J) mod 360
By collinear_definition on C, A, F we get A in Line(C, F), F in Line(A, C), Line(A, C) == Line(C, F), 0 == 2 * angle(A, C, F) mod 360
By perpendicular_angle_conditions_v0 on A, F, D we get angle(A, F, D) == orientation(A, F, D) mod 360
By collinear_definition on B, E, C we get E in Line(B, C), C in Line(B, E), Line(B, C) == Line(B, E), 0 == 2 * angle(E, B, C) mod 360
By perpendicular_angle_conditions_v0 on D, F, C we get angle(D, F, C) == orientation(C, D, F) mod 360
By collinear_definition on H, A, C we get A in Line(C, H), C in Line(A, H), Line(A, H) == Line(C, H), 0 == 2 * angle(A, H, C) mod 360
By collinear_definition on C, B, E we get B in Line(C, E), E in Line(B, C), Line(B, C) == Line(C, E), 0 == 2 * angle(B, C, E) mod 360
By collinear_definition on H, I, G we get I in Line(G, H), G in Line(H, I), Line(G, H) == Line(H, I), 0 == 2 * angle(I, H, G) mod 360
By altitude_definition on D, J, H, Line(D, F) we get Line(D, F) == altitude(D, H, J)
By collinear_definition on A, B, G we get B in Line(A, G), G in Line(A, B), Line(A, B) == Line(A, G), 0 == 2 * angle(B, A, G) mod 360
By perpendicular_angle_conditions_v0 on D, G, B we get angle(D, G, B) == orientation(B, D, G) mod 360
By collinear_definition on C, E, B we get E in Line(B, C), B in Line(C, E), Line(B, C) == Line(C, E), 0 == 2 * angle(E, C, B) mod 360
By collinear_definition on C, J, A we get J in Line(A, C), A in Line(C, J), Line(A, C) == Line(C, J), 0 == 2 * angle(J, C, A) mod 360
By collinear_definition on F, C, A we get C in Line(A, F), A in Line(C, F), Line(A, F) == Line(C, F), 0 == 2 * angle(C, F, A) mod 360
By collinear_definition on H, G, I we get G in Line(H, I), I in Line(G, H), Line(G, H) == Line(H, I), 0 == 2 * angle(G, H, I) mod 360
By collinear_definition on A, J, C we get J in Line(A, C), C in Line(A, J), Line(A, C) == Line(A, J), 0 == 2 * angle(J, A, C) mod 360
By collinear_definition on B, G, A we get G in Line(A, B), A in Line(B, G), Line(A, B) == Line(B, G), 0 == 2 * angle(G, B, A) mod 360
By perpendicular_angle_conditions_v0 on A, G, D we get angle(A, G, D) == orientation(A, G, D) mod 360
By altitude_definition on D, C, H, Line(D, F) we get Line(D, F) == altitude(D, C, H)
By perpendicular_angle_conditions_v0 on H, F, D we get angle(H, F, D) == orientation(D, H, F) mod 360
By perpendicular_angle_conditions_v0 on D, F, H we get angle(D, F, H) == orientation(D, F, H) mod 360
By collinear_definition on H, C, A we get C in Line(A, H), A in Line(C, H), Line(A, H) == Line(C, H), 0 == 2 * angle(C, H, A) mod 360
By perpendicular_angle_conditions_v0 on B, G, D we get angle(B, G, D) == orientation(B, G, D) mod 360
By collinear_definition on A, C, J we get C in Line(A, J), J in Line(A, C), Line(A, C) == Line(A, J), 0 == 2 * angle(C, A, J) mod 360
By collinear_definition on A, H, C we get H in Line(A, C), C in Line(A, H), Line(A, C) == Line(A, H), 0 == 2 * angle(H, A, C) mod 360
By collinear_definition on C, A, H we get A in Line(C, H), H in Line(A, C), Line(A, C) == Line(C, H), 0 == 2 * angle(A, C, H) mod 360
By collinear_definition on E, C, B we get C in Line(B, E), B in Line(C, E), Line(B, E) == Line(C, E), 0 == 2 * angle(C, E, B) mod 360
By collinear_definition on A, C, F we get C in Line(A, F), F in Line(A, C), Line(A, C) == Line(A, F), 0 == 2 * angle(C, A, F) mod 360
By collinear_definition on B, A, G we get A in Line(B, G), G in Line(A, B), Line(A, B) == Line(B, G), 0 == 2 * angle(A, B, G) mod 360
By perpendicular_angle_conditions_v0 on C, F, D we get angle(C, F, D) == orientation(C, F, D) mod 360
By collinear_definition on J, A, C we get A in Line(C, J), C in Line(A, J), Line(A, J) == Line(C, J), 0 == 2 * angle(A, J, C) mod 360
By collinear_definition on A, G, B we get G in Line(A, B), B in Line(A, G), Line(A, B) == Line(A, G), 0 == 2 * angle(G, A, B) mod 360
By internal_angle_bisector_definition_v0 on B, D, C, A we get angle(B, A, D) == angle(D, A, C) mod 360
By internal_angle_bisector_definition_v0 on A, H, C, B we get angle(A, B, H) == angle(H, B, C) mod 360
By internal_angle_bisector_definition_v0 on C, D, B, A we get angle(C, A, D) == angle(D, A, B) mod 360
By internal_angle_bisector_definition_v0 on C, H, A, B we get angle(C, B, H) == angle(H, B, A) mod 360
By internal_angle_bisector_definition_v0 on C, D, A, B we get angle(C, B, D) == angle(D, B, A) mod 360
By internal_angle_bisector_definition_v0 on A, D, C, B we get angle(A, B, D) == angle(D, B, C) mod 360
By concyclic_sufficient_conditions_v1 on D, F, C, E we get concyclic(C, D, E, F)
By concyclic_sufficient_conditions_v1 on B, G, D, E we get concyclic(B, D, E, G)
By concyclic_sufficient_conditions_v1 on D, G, A, F we get concyclic(A, D, F, G)
By line_intersection_definition on I, Line(E, I), k we get I == line_intersection(k, Line(E, I))
By line_intersection_definition on D, Line(D, G), i we get D == line_intersection(i, Line(D, G))
By line_intersection_definition on D, Line(D, F), j we get D == line_intersection(j, Line(D, F))
By line_intersection_definition on D, Line(D, J), i we get D == line_intersection(i, Line(D, J))
By line_intersection_definition on D, Line(D, E), j we get D == line_intersection(j, Line(D, E))
By line_intersection_definition on F, h, Line(F, G) we get F == line_intersection(h, Line(F, G))
By line_intersection_definition on G, Line(E, G), f we get G == line_intersection(f, Line(E, G))
By line_intersection_definition on J, h, Line(D, J) we get J == line_intersection(h, Line(D, J))
By line_intersection_definition on E, g, Line(E, J) we get E == line_intersection(g, Line(E, J))
By line_intersection_definition on G, Line(F, G), f we get G == line_intersection(f, Line(F, G))
By line_intersection_definition on D, Line(D, G), j we get D == line_intersection(j, Line(D, G))
By line_intersection_definition on G, k, Line(E, G) we get G == line_intersection(k, Line(E, G))
By line_intersection_definition on E, Line(E, F), g we get E == line_intersection(g, Line(E, F))
By line_intersection_definition on I, Line(D, I), k we get I == line_intersection(k, Line(D, I))
By concurrent_sufficient_conditions on Line(D, G), k, f we get concurrent(f, k, Line(D, G))
By line_intersection_definition on E, g, Line(E, I) we get E == line_intersection(g, Line(E, I))
By line_intersection_definition on C, g, Line(C, D) we get C == line_intersection(g, Line(C, D))
By line_intersection_definition on C, Line(C, D), h we get C == line_intersection(h, Line(C, D))
By line_intersection_definition on F, h, Line(E, F) we get F == line_intersection(h, Line(E, F))
By line_intersection_definition on J, h, Line(I, J) we get J == line_intersection(h, Line(I, J))
By line_intersection_definition on I, Line(F, I), k we get I == line_intersection(k, Line(F, I))
By line_intersection_definition on G, k, Line(D, G) we get G == line_intersection(k, Line(D, G))
By line_intersection_definition on F, Line(F, I), h we get F == line_intersection(h, Line(F, I))
By line_intersection_definition on D, Line(D, J), j we get D == line_intersection(j, Line(D, J))
By line_intersection_definition on D, j, Line(D, I) we get D == line_intersection(j, Line(D, I))
By line_intersection_definition on J, Line(E, J), h we get J == line_intersection(h, Line(E, J))
By line_intersection_definition on D, Line(D, F), i we get D == line_intersection(i, Line(D, F))
By line_intersection_definition on E, Line(E, G), g we get E == line_intersection(g, Line(E, G))
By line_intersection_definition on I, Line(I, J), k we get I == line_intersection(k, Line(I, J))
By line_intersection_definition on G, k, Line(F, G) we get G == line_intersection(k, Line(F, G))
By concurrent_sufficient_conditions on k, Line(D, G), f we get concurrent(f, k, Line(D, G))
By line_unique_intersection_v1 on Line(C, D), h, C, F we get F not in Line(C, D)
By line_unique_intersection_v1 on Line(C, D), h, C, J we get J not in Line(C, D)
By line_unique_intersection_v1 on Line(C, D), g, C, E we get E not in Line(C, D)
By same_angle_v0 on J, F, C, I we get angle(C, J, I) == angle(F, J, I) mod 360
By same_angle_v0 on H, F, C, D we get angle(C, H, D) == angle(F, H, D) mod 360
By same_angle_v1 on H, J, A, I we get angle(J, H, I) == angle(A, H, I) + 180 mod 360
By same_angle_v0 on H, D, B, I we get angle(B, H, I) == angle(D, H, I) mod 360
By same_angle_v0 on F, J, C, G we get angle(C, F, G) == angle(J, F, G) mod 360
By same_angle_v0 on F, A, H, E we get angle(A, F, E) == angle(H, F, E) mod 360
By same_angle_v1 on F, C, H, E we get angle(C, F, E) == angle(H, F, E) + 180 mod 360
By same_angle_v1 on H, J, A, G we get angle(J, H, G) == angle(A, H, G) + 180 mod 360
By same_angle_v1 on F, J, H, E we get angle(J, F, E) == angle(H, F, E) + 180 mod 360
By same_angle_v1 on F, A, J, E we get angle(A, F, E) == angle(J, F, E) + 180 mod 360
By same_angle_v0 on J, H, A, D we get angle(A, J, D) == angle(H, J, D) mod 360
By same_angle_v1 on H, A, F, G we get angle(A, H, G) == angle(F, H, G) + 180 mod 360
By same_angle_v0 on J, F, A, D we get angle(A, J, D) == angle(F, J, D) mod 360
By same_angle_v0 on H, C, F, I we get angle(C, H, I) == angle(F, H, I) mod 360
By same_angle_v0 on J, C, F, D we get angle(C, J, D) == angle(F, J, D) mod 360
By same_angle_v0 on H, C, J, G we get angle(C, H, G) == angle(J, H, G) mod 360
By same_angle_v1 on F, H, C, I we get angle(H, F, I) == angle(C, F, I) + 180 mod 360
By same_angle_v1 on H, A, J, I we get angle(A, H, I) == angle(J, H, I) + 180 mod 360
By same_angle_v0 on H, D, B, J we get angle(B, H, J) == angle(D, H, J) mod 360
By same_angle_v0 on J, F, H, I we get angle(F, J, I) == angle(H, J, I) mod 360
By same_angle_v0 on H, D, B, C we get angle(B, H, C) == angle(D, H, C) mod 360
By same_angle_v0 on H, F, C, G we get angle(C, H, G) == angle(F, H, G) mod 360
By same_angle_v1 on F, A, J, I we get angle(A, F, I) == angle(J, F, I) + 180 mod 360
By same_angle_v0 on H, J, F, B we get angle(F, H, B) == angle(J, H, B) mod 360
By same_angle_v1 on H, A, J, D we get angle(A, H, D) == angle(J, H, D) + 180 mod 360
By same_angle_v0 on H, B, D, A we get angle(B, H, A) == angle(D, H, A) mod 360
By same_angle_v0 on J, A, F, E we get angle(A, J, E) == angle(F, J, E) mod 360
By same_angle_v0 on H, D, B, G we get angle(B, H, G) == angle(D, H, G) mod 360
By same_angle_v0 on J, F, H, D we get angle(F, J, D) == angle(H, J, D) mod 360
By same_angle_v1 on H, A, F, B we get angle(A, H, B) == angle(F, H, B) + 180 mod 360
By same_angle_v0 on H, F, C, B we get angle(C, H, B) == angle(F, H, B) mod 360
By same_angle_v0 on F, H, A, G we get angle(A, F, G) == angle(H, F, G) mod 360
By same_angle_v0 on J, A, F, I we get angle(A, J, I) == angle(F, J, I) mod 360
By same_angle_v0 on H, F, J, I we get angle(F, H, I) == angle(J, H, I) mod 360
By same_angle_v1 on H, J, A, B we get angle(J, H, B) == angle(A, H, B) + 180 mod 360
By same_angle_v0 on H, C, J, I we get angle(C, H, I) == angle(J, H, I) mod 360
By same_angle_v0 on B, H, D, A we get angle(D, B, A) == angle(H, B, A) mod 360
By same_angle_v1 on F, H, J, G we get angle(H, F, G) == angle(J, F, G) + 180 mod 360
By same_angle_v0 on F, J, C, E we get angle(C, F, E) == angle(J, F, E) mod 360
By same_angle_v0 on H, J, C, B we get angle(C, H, B) == angle(J, H, B) mod 360
By same_angle_v0 on H, D, B, F we get angle(B, H, F) == angle(D, H, F) mod 360
By same_angle_v0 on J, F, C, E we get angle(C, J, E) == angle(F, J, E) mod 360
By same_angle_v0 on F, J, C, I we get angle(C, F, I) == angle(J, F, I) mod 360
By same_angle_v1 on F, H, C, E we get angle(H, F, E) == angle(C, F, E) + 180 mod 360
By same_angle_v1 on F, J, H, G we get angle(J, F, G) == angle(H, F, G) + 180 mod 360
By same_angle_v0 on H, J, C, D we get angle(C, H, D) == angle(J, H, D) mod 360
By same_angle_v0 on F, H, A, I we get angle(A, F, I) == angle(H, F, I) mod 360
By same_angle_v0 on H, J, F, G we get angle(F, H, G) == angle(J, H, G) mod 360
By same_angle_v0 on H, F, J, D we get angle(F, H, D) == angle(J, H, D) mod 360
By same_angle_v0 on J, C, H, D we get angle(C, J, D) == angle(H, J, D) mod 360
By same_angle_v1 on H, F, A, G we get angle(F, H, G) == angle(A, H, G) + 180 mod 360
By same_angle_v1 on F, H, J, I we get angle(H, F, I) == angle(J, F, I) + 180 mod 360
By same_angle_v0 on J, F, H, E we get angle(F, J, E) == angle(H, J, E) mod 360
By same_angle_v1 on H, F, A, I we get angle(F, H, I) == angle(A, H, I) + 180 mod 360
By same_angle_v1 on F, C, H, I we get angle(C, F, I) == angle(H, F, I) + 180 mod 360
By same_angle_v1 on H, A, J, G we get angle(A, H, G) == angle(J, H, G) + 180 mod 360
By same_angle_v0 on J, H, C, I we get angle(C, J, I) == angle(H, J, I) mod 360
By same_angle_v0 on J, H, A, I we get angle(A, J, I) == angle(H, J, I) mod 360
By same_angle_v0 on B, D, H, C we get angle(D, B, C) == angle(H, B, C) mod 360
By same_angle_v0 on J, H, A, E we get angle(A, J, E) == angle(H, J, E) mod 360
By same_angle_v1 on H, F, A, B we get angle(F, H, B) == angle(A, H, B) + 180 mod 360
By same_angle_v0 on B, H, D, G we get angle(D, B, G) == angle(H, B, G) mod 360
By same_angle_v1 on F, J, H, I we get angle(J, F, I) == angle(H, F, I) + 180 mod 360
By same_angle_v1 on H, A, F, I we get angle(A, H, I) == angle(F, H, I) + 180 mod 360
By same_angle_v1 on H, F, A, D we get angle(F, H, D) == angle(A, H, D) + 180 mod 360
By same_angle_v1 on F, A, J, G we get angle(A, F, G) == angle(J, F, G) + 180 mod 360
By same_angle_v1 on H, A, J, B we get angle(A, H, B) == angle(J, H, B) + 180 mod 360
By same_angle_v1 on F, J, A, G we get angle(J, F, G) == angle(A, F, G) + 180 mod 360
By same_angle_v0 on B, H, D, E we get angle(D, B, E) == angle(H, B, E) mod 360
By same_angle_v1 on H, J, A, D we get angle(J, H, D) == angle(A, H, D) + 180 mod 360
By same_angle_v1 on F, H, C, G we get angle(H, F, G) == angle(C, F, G) + 180 mod 360
By same_angle_v0 on J, H, C, E we get angle(C, J, E) == angle(H, J, E) mod 360
By same_angle_v1 on F, H, J, E we get angle(H, F, E) == angle(J, F, E) + 180 mod 360
By same_angle_v1 on F, C, H, G we get angle(C, F, G) == angle(H, F, G) + 180 mod 360
By same_angle_v1 on F, J, A, I we get angle(J, F, I) == angle(A, F, I) + 180 mod 360
By same_angle_v1 on F, J, A, E we get angle(J, F, E) == angle(A, F, E) + 180 mod 360
By same_angle_v1 on H, A, F, D we get angle(A, H, D) == angle(F, H, D) + 180 mod 360
By circle_radius_v0_r on E, c we get radius(c) == distance(E, center(c))
By circle_radius_v0_r on F, c we get radius(c) == distance(F, center(c))
By circle_radius_v0_r on J, d we get radius(d) == distance(J, center(d))
By circle_radius_v0_r on I, c we get radius(c) == distance(I, center(c))
By circle_radius_v0_r on G, c we get radius(c) == distance(G, center(c))
By circle_radius_v0_r on E, d we get radius(d) == distance(E, center(d))
By circle_radius_v0_r on D, d we get radius(d) == distance(D, center(d))
By circle_radius_v0_r on I, d we get radius(d) == distance(I, center(d))
By angle_to_center on G, I, F, c we get 2 * angle(G, I, F) == angle(G, center(c), F) mod 360
By angle_to_center on E, J, I, d we get 2 * angle(E, J, I) == angle(E, center(d), I) mod 360
By angle_to_center on I, D, E, d we get 2 * angle(I, D, E) == angle(I, center(d), E) mod 360
By angle_to_center on F, I, E, c we get 2 * angle(F, I, E) == angle(F, center(c), E) mod 360
By angle_to_center on D, J, I, d we get 2 * angle(D, J, I) == angle(D, center(d), I) mod 360
By angle_to_center on I, E, F, c we get 2 * angle(I, E, F) == angle(I, center(c), F) mod 360
By angle_to_center on I, G, E, c we get 2 * angle(I, G, E) == angle(I, center(c), E) mod 360
By angle_to_center on F, I, G, c we get 2 * angle(F, I, G) == angle(F, center(c), G) mod 360
By angle_to_center on I, F, G, c we get 2 * angle(I, F, G) == angle(I, center(c), G) mod 360
By angle_to_center on E, G, I, c we get 2 * angle(E, G, I) == angle(E, center(c), I) mod 360
By angle_to_center on G, F, I, c we get 2 * angle(G, F, I) == angle(G, center(c), I) mod 360
By angle_to_center on E, I, J, d we get 2 * angle(E, I, J) == angle(E, center(d), J) mod 360
By angle_to_center on I, G, F, c we get 2 * angle(I, G, F) == angle(I, center(c), F) mod 360
By angle_to_center on I, J, E, d we get 2 * angle(I, J, E) == angle(I, center(d), E) mod 360
By angle_to_center on J, D, I, d we get 2 * angle(J, D, I) == angle(J, center(d), I) mod 360
By angle_to_center on E, I, D, d we get 2 * angle(E, I, D) == angle(E, center(d), D) mod 360
By angle_to_center on E, J, D, d we get 2 * angle(E, J, D) == angle(E, center(d), D) mod 360
By angle_to_center on D, I, J, d we get 2 * angle(D, I, J) == angle(D, center(d), J) mod 360
By angle_to_center on D, E, I, d we get 2 * angle(D, E, I) == angle(D, center(d), I) mod 360
By angle_to_center on E, D, J, d we get 2 * angle(E, D, J) == angle(E, center(d), J) mod 360
By angle_to_center on J, I, E, d we get 2 * angle(J, I, E) == angle(J, center(d), E) mod 360
By angle_to_center on F, G, I, c we get 2 * angle(F, G, I) == angle(F, center(c), I) mod 360
By angle_to_center on J, D, E, d we get 2 * angle(J, D, E) == angle(J, center(d), E) mod 360
By angle_to_center on E, G, F, c we get 2 * angle(E, G, F) == angle(E, center(c), F) mod 360
By angle_to_center on I, D, J, d we get 2 * angle(I, D, J) == angle(I, center(d), J) mod 360
By angle_to_center on D, J, E, d we get 2 * angle(D, J, E) == angle(D, center(d), E) mod 360
By angle_to_center on I, E, D, d we get 2 * angle(I, E, D) == angle(I, center(d), D) mod 360
By angle_to_center on J, I, D, d we get 2 * angle(J, I, D) == angle(J, center(d), D) mod 360
By angle_to_center on E, I, F, c we get 2 * angle(E, I, F) == angle(E, center(c), F) mod 360
By angle_to_center on J, E, D, d we get 2 * angle(J, E, D) == angle(J, center(d), D) mod 360
By angle_to_center on F, E, G, c we get 2 * angle(F, E, G) == angle(F, center(c), G) mod 360
By angle_to_center on I, E, J, d we get 2 * angle(I, E, J) == angle(I, center(d), J) mod 360
By angle_to_center on F, G, E, c we get 2 * angle(F, G, E) == angle(F, center(c), E) mod 360
By angle_to_center on G, F, E, c we get 2 * angle(G, F, E) == angle(G, center(c), E) mod 360
By angle_to_center on I, E, G, c we get 2 * angle(I, E, G) == angle(I, center(c), G) mod 360
By angle_to_center on J, E, I, d we get 2 * angle(J, E, I) == angle(J, center(d), I) mod 360
By angle_to_center on G, I, E, c we get 2 * angle(G, I, E) == angle(G, center(c), E) mod 360
By center_not_on_circle on d we get center(d) not in d
By angle_to_center on F, E, I, c we get 2 * angle(F, E, I) == angle(F, center(c), I) mod 360
By angle_to_center on D, E, J, d we get 2 * angle(D, E, J) == angle(D, center(d), J) mod 360
By angle_to_center on E, F, G, c we get 2 * angle(E, F, G) == angle(E, center(c), G) mod 360
By angle_to_center on G, E, F, c we get 2 * angle(G, E, F) == angle(G, center(c), F) mod 360
By angle_to_center on I, F, E, c we get 2 * angle(I, F, E) == angle(I, center(c), E) mod 360
By angle_to_center on E, D, I, d we get 2 * angle(E, D, I) == angle(E, center(d), I) mod 360
By angle_to_center on I, J, D, d we get 2 * angle(I, J, D) == angle(I, center(d), D) mod 360
By angle_to_center on E, I, G, c we get 2 * angle(E, I, G) == angle(E, center(c), G) mod 360
By angle_to_center on E, F, I, c we get 2 * angle(E, F, I) == angle(E, center(c), I) mod 360
By angle_to_center on G, E, I, c we get 2 * angle(G, E, I) == angle(G, center(c), I) mod 360
By angle_to_center on D, I, E, d we get 2 * angle(D, I, E) == angle(D, center(d), E) mod 360
By center_not_on_circle on c we get center(c) not in c
By same_angle_v1 on C, H, J, D we get angle(H, C, D) == angle(J, C, D) + 180 mod 360
By different_points_v1 on C, D we get 0 != distance(C, D)
By divide_by_2_mod_180_v0 on H, B, A, D, B, G we get angle(D, B, G) == angle(H, B, A) mod 360
By same_angle_v0 on C, A, H, D we get angle(A, C, D) == angle(H, C, D) mod 360
By orthocenter_concurrency on H, D, F we get orthocenter(D, F, H) in altitude(H, D, F), orthocenter(D, F, H) in altitude(D, F, H), orthocenter(D, F, H) in altitude(F, D, H)
By same_angle_v0 on C, E, B, D we get angle(B, C, D) == angle(E, C, D) mod 360
By orthocenter_concurrency on C, D, E we get orthocenter(C, D, E) in altitude(C, D, E), orthocenter(C, D, E) in altitude(D, C, E), orthocenter(C, D, E) in altitude(E, C, D)
By orthocenter_concurrency on A, D, G we get orthocenter(A, D, G) in altitude(A, D, G), orthocenter(A, D, G) in altitude(D, A, G), orthocenter(A, D, G) in altitude(G, A, D)
By same_angle_v0 on C, A, F, D we get angle(A, C, D) == angle(F, C, D) mod 360
By same_angle_v0 on C, H, F, D we get angle(F, C, D) == angle(H, C, D) mod 360
By orthocenter_concurrency on D, B, E we get orthocenter(B, D, E) in altitude(D, B, E), orthocenter(B, D, E) in altitude(B, D, E), orthocenter(B, D, E) in altitude(E, B, D)
By same_angle_v1 on C, A, J, D we get angle(A, C, D) == angle(J, C, D) + 180 mod 360
By same_angle_v1 on C, J, A, D we get angle(J, C, D) == angle(A, C, D) + 180 mod 360
By orthocenter_concurrency on D, A, F we get orthocenter(A, D, F) in altitude(D, A, F), orthocenter(A, D, F) in altitude(A, D, F), orthocenter(A, D, F) in altitude(F, A, D)
By orthocenter_concurrency on C, D, F we get orthocenter(C, D, F) in altitude(C, D, F), orthocenter(C, D, F) in altitude(D, C, F), orthocenter(C, D, F) in altitude(F, C, D)
By orthocenter_concurrency on D, J, F we get orthocenter(D, F, J) in altitude(D, F, J), orthocenter(D, F, J) in altitude(J, D, F), orthocenter(D, F, J) in altitude(F, D, J)
By same_angle_v1 on C, J, F, D we get angle(J, C, D) == angle(F, C, D) + 180 mod 360
By orthocenter_concurrency on D, B, G we get orthocenter(B, D, G) in altitude(D, B, G), orthocenter(B, D, G) in altitude(B, D, G), orthocenter(B, D, G) in altitude(G, B, D)
By same_angle_v1 on C, J, H, D we get angle(J, C, D) == angle(H, C, D) + 180 mod 360
By same_angle_v1 on C, F, J, D we get angle(F, C, D) == angle(J, C, D) + 180 mod 360
By directions_draw_angle on B, H, F we get exists(angle(B, H, F))
By divide_by_2_mod_180_v0 on I, H, F, I, H, J we get angle(I, H, F) == angle(I, H, J) mod 360
By directions_draw_angle on G, D, I we get exists(angle(G, D, I))
By divide_by_2_mod_180_v1 on J, H, G, A, H, I we get angle(J, H, G) == angle(A, H, I) + 180 mod 360
By line_inequality on Line(E, F), Line(D, E), F we get Line(D, E) != Line(E, F)
By directions_draw_angle on H, J, I we get exists(angle(H, J, I))
By collinear_definition on J, F, C we get F in Line(C, J), C in Line(F, J), Line(C, J) == Line(F, J), 0 == 2 * angle(F, J, C) mod 360
By collinear_definition on H, A, J we get A in Line(H, J), J in Line(A, H), Line(A, H) == Line(H, J), 0 == 2 * angle(A, H, J) mod 360
By collinear_definition on F, C, H we get C in Line(F, H), H in Line(C, F), Line(C, F) == Line(F, H), 0 == 2 * angle(C, F, H) mod 360
By line_inequality on Line(E, J), Line(F, G), J we get Line(E, J) != Line(F, G)
By divide_by_2_mod_180_v0 on G, H, C, I, H, F we get angle(G, H, C) == angle(I, H, F) mod 360
By collinear_definition on J, H, C we get H in Line(C, J), C in Line(H, J), Line(C, J) == Line(H, J), 0 == 2 * angle(H, J, C) mod 360
By reverse_direction on B, E we get 180 == direction(B, E) - direction(E, B) mod 360
By divide_by_2_mod_180_v0 on H, B, C, A, B, D we get angle(A, B, D) == angle(H, B, C) mod 360
By divide_by_2_mod_180_v1 on I, H, J, G, H, A we get angle(I, H, J) == angle(G, H, A) + 180 mod 360
By collinear_definition on F, J, C we get J in Line(C, F), C in Line(F, J), Line(C, F) == Line(F, J), 0 == 2 * angle(J, F, C) mod 360
By reverse_direction on J, H we get 180 == direction(J, H) - direction(H, J) mod 360
By line_inequality on Line(D, G), Line(F, I), D we get Line(D, G) != Line(F, I)
By reverse_direction on B, H we get 180 == direction(B, H) - direction(H, B) mod 360
By line_inequality on Line(E, G), Line(I, J), E we get Line(E, G) != Line(I, J)
By divide_by_2_mod_180_v0 on G, H, J, I, H, F we get angle(G, H, J) == angle(I, H, F) mod 360
By line_inequality on Line(E, F), Line(D, G), F we get Line(D, G) != Line(E, F)
By divide_by_2_mod_180_v0 on C, H, G, F, H, I we get angle(C, H, G) == angle(F, H, I) mod 360
By divide_by_2_mod_180_v0 on G, H, C, G, H, F we get angle(G, H, C) == angle(G, H, F) mod 360
By reverse_direction on C, H we get 180 == direction(C, H) - direction(H, C) mod 360
By reverse_direction on G, B we get 180 == direction(G, B) - direction(B, G) mod 360
By divide_by_2_mod_180_v0 on C, H, I, J, H, G we get angle(C, H, I) == angle(J, H, G) mod 360
By line_inequality on Line(D, F), Line(E, J), F we get Line(D, F) != Line(E, J)
By divide_by_2_mod_180_v0 on H, B, C, D, B, E we get angle(D, B, E) == angle(H, B, C) mod 360
By directions_draw_angle on H, J, E we get exists(angle(H, J, E))
By divide_by_2_mod_180_v0 on E, B, D, H, B, A we get angle(E, B, D) == angle(H, B, A) mod 360
By collinear_definition on A, H, F we get H in Line(A, F), F in Line(A, H), Line(A, F) == Line(A, H), 0 == 2 * angle(H, A, F) mod 360
By divide_by_2_mod_180_v1 on G, H, F, I, H, A we get angle(G, H, F) == angle(I, H, A) + 180 mod 360
By divide_by_2_mod_180_v0 on C, B, H, D, B, G we get angle(C, B, H) == angle(D, B, G) mod 360
By divide_by_2_mod_180_v0 on F, H, G, C, H, I we get angle(C, H, I) == angle(F, H, G) mod 360
By directions_draw_angle on F, J, E we get exists(angle(F, J, E))
By collinear_definition on J, A, H we get A in Line(H, J), H in Line(A, J), Line(A, J) == Line(H, J), 0 == 2 * angle(A, J, H) mod 360
By divide_by_2_mod_180_v0 on I, H, J, G, H, C we get angle(G, H, C) == angle(I, H, J) mod 360
By divide_by_2_mod_180_v0 on A, B, H, G, B, D we get angle(A, B, H) == angle(G, B, D) mod 360
By directions_draw_angle on H, J, D we get exists(angle(H, J, D))
By collinear_definition on F, A, J we get A in Line(F, J), J in Line(A, F), Line(A, F) == Line(F, J), 0 == 2 * angle(A, F, J) mod 360
By directions_draw_angle on H, J, A we get exists(angle(H, J, A))
By divide_by_2_mod_180_v1 on G, H, A, I, H, F we get angle(G, H, A) == angle(I, H, F) + 180 mod 360
By divide_by_2_mod_180_v0 on D, B, A, C, B, H we get angle(C, B, H) == angle(D, B, A) mod 360
By directions_draw_angle on E, F, J we get exists(angle(E, F, J))
By line_inequality on Line(E, J), Line(E, F), J we get Line(E, F) != Line(E, J)
By line_inequality on Line(F, G), Line(D, F), G we get Line(D, F) != Line(F, G)
By collinear_definition on J, A, F we get A in Line(F, J), F in Line(A, J), Line(A, J) == Line(F, J), 0 == 2 * angle(A, J, F) mod 360
By divide_by_2_mod_180_v0 on G, B, H, D, B, E we get angle(D, B, E) == angle(G, B, H) mod 360
By reverse_direction on H, J we get 180 == direction(H, J) - direction(J, H) mod 360
By divide_by_2_mod_180_v0 on C, H, G, J, H, I we get angle(C, H, G) == angle(J, H, I) mod 360
By divide_by_2_mod_180_v0 on D, B, A, H, B, G we get angle(D, B, A) == angle(H, B, G) mod 360
By line_inequality on Line(I, J), Line(D, F), J we get Line(D, F) != Line(I, J)
By line_inequality on Line(D, J), Line(F, G), J we get Line(D, J) != Line(F, G)
By reverse_direction on G, A we get 180 == direction(G, A) - direction(A, G) mod 360
By reverse_direction on G, D we get 180 == direction(G, D) - direction(D, G) mod 360
By directions_draw_angle on A, J, F we get exists(angle(A, J, F))
By line_inequality on Line(I, J), Line(D, E), I we get Line(D, E) != Line(I, J)
By divide_by_2_mod_180_v0 on A, B, H, A, B, D we get angle(A, B, D) == angle(A, B, H) mod 360
By reverse_direction on F, D we get 180 == direction(F, D) - direction(D, F) mod 360
By divide_by_2_mod_180_v1 on G, H, J, I, H, A we get angle(G, H, J) == angle(I, H, A) + 180 mod 360
By directions_draw_angle on A, F, J we get exists(angle(A, F, J))
By directions_draw_angle on F, H, J we get exists(angle(F, H, J))
By line_inequality on Line(F, I), Line(D, J), I we get Line(D, J) != Line(F, I)
By line_inequality on Line(E, J), Line(E, G), J we get Line(E, G) != Line(E, J)
By divide_by_2_mod_180_v0 on I, H, C, I, H, F we get angle(I, H, C) == angle(I, H, F) mod 360
By line_inequality on Line(E, G), Line(F, G), E we get Line(E, G) != Line(F, G)
By divide_by_2_mod_180_v1 on I, H, A, G, H, J we get angle(I, H, A) == angle(G, H, J) + 180 mod 360
By directions_draw_angle on A, J, H we get exists(angle(A, J, H))
By divide_by_2_mod_180_v1 on A, H, I, J, H, G we get angle(A, H, I) == angle(J, H, G) + 180 mod 360
By line_inequality on Line(D, I), Line(E, J), D we get Line(D, I) != Line(E, J)
By not_in_line_equivalent_to_not_collinear_v0_r on G, C, D we get G not in Line(C, D)
By reverse_direction on B, A we get 180 == direction(B, A) - direction(A, B) mod 360
By divide_by_2_mod_180_v0 on G, H, J, G, H, C we get angle(G, H, C) == angle(G, H, J) mod 360
By directions_draw_angle on E, D, F we get exists(angle(E, D, F))
By collinear_definition on H, J, F we get J in Line(F, H), F in Line(H, J), Line(F, H) == Line(H, J), 0 == 2 * angle(J, H, F) mod 360
By divide_by_2_mod_180_v0 on F, H, G, J, H, I we get angle(F, H, G) == angle(J, H, I) mod 360
By collinear_definition on B, H, D we get H in Line(B, D), D in Line(B, H), Line(B, D) == Line(B, H), 0 == 2 * angle(H, B, D) mod 360
By line_inequality on Line(E, G), Line(E, I), G we get Line(E, G) != Line(E, I)
By divide_by_2_mod_180_v0 on A, B, D, G, B, H we get angle(A, B, D) == angle(G, B, H) mod 360
By line_inequality on Line(D, G), Line(I, J), D we get Line(D, G) != Line(I, J)
By divide_by_2_mod_180_v0 on E, B, D, C, B, H we get angle(C, B, H) == angle(E, B, D) mod 360
By reverse_direction on F, A we get 180 == direction(F, A) - direction(A, F) mod 360
By line_inequality on Line(E, J), Line(I, J), E we get Line(E, J) != Line(I, J)
By collinear_definition on J, H, F we get H in Line(F, J), F in Line(H, J), Line(F, J) == Line(H, J), 0 == 2 * angle(H, J, F) mod 360
By directions_draw_angle on F, J, A we get exists(angle(F, J, A))
By line_inequality on Line(D, G), Line(E, G), D we get Line(D, G) != Line(E, G)
By directions_draw_angle on I, F, J we get exists(angle(I, F, J))
By divide_by_2_mod_180_v0 on E, B, H, D, B, A we get angle(D, B, A) == angle(E, B, H) mod 360
By divide_by_2_mod_180_v0 on A, B, D, H, B, E we get angle(A, B, D) == angle(H, B, E) mod 360
By directions_draw_angle on F, J, H we get exists(angle(F, J, H))
By line_inequality on Line(D, G), Line(E, I), D we get Line(D, G) != Line(E, I)
By directions_draw_angle on J, D, F we get exists(angle(J, D, F))
By reverse_direction on J, C we get 180 == direction(J, C) - direction(C, J) mod 360
By directions_draw_angle on B, H, J we get exists(angle(B, H, J))
By divide_by_2_mod_180_v1 on J, H, I, A, H, G we get angle(J, H, I) == angle(A, H, G) + 180 mod 360
By divide_by_2_mod_180_v0 on C, B, D, H, B, G we get angle(C, B, D) == angle(H, B, G) mod 360
By collinear_definition on J, H, A we get H in Line(A, J), A in Line(H, J), Line(A, J) == Line(H, J), 0 == 2 * angle(H, J, A) mod 360
By collinear_definition on H, F, A we get F in Line(A, H), A in Line(F, H), Line(A, H) == Line(F, H), 0 == 2 * angle(F, H, A) mod 360
By collinear_definition on F, J, H we get J in Line(F, H), H in Line(F, J), Line(F, H) == Line(F, J), 0 == 2 * angle(J, F, H) mod 360
By directions_draw_angle on J, A, H we get exists(angle(J, A, H))
By reverse_direction on G, H we get 180 == direction(G, H) - direction(H, G) mod 360
By divide_by_2_mod_180_v0 on H, B, E, D, B, C we get angle(D, B, C) == angle(H, B, E) mod 360
By collinear_definition on C, H, J we get H in Line(C, J), J in Line(C, H), Line(C, H) == Line(C, J), 0 == 2 * angle(H, C, J) mod 360
By divide_by_2_mod_180_v0 on G, H, J, G, H, F we get angle(G, H, F) == angle(G, H, J) mod 360
By reverse_direction on H, B we get 180 == direction(H, B) - direction(B, H) mod 360
By collinear_definition on J, C, F we get C in Line(F, J), F in Line(C, J), Line(C, J) == Line(F, J), 0 == 2 * angle(C, J, F) mod 360
By reverse_direction on H, C we get 180 == direction(H, C) - direction(C, H) mod 360
By divide_by_2_mod_180_v0 on J, H, G, F, H, I we get angle(F, H, I) == angle(J, H, G) mod 360
By directions_draw_angle on E, J, H we get exists(angle(E, J, H))
By reverse_direction on A, C we get 180 == direction(A, C) - direction(C, A) mod 360
By line_inequality on Line(E, G), Line(D, I), G we get Line(D, I) != Line(E, G)
By divide_by_2_mod_180_v0 on G, B, H, D, B, C we get angle(D, B, C) == angle(G, B, H) mod 360
By directions_draw_angle on I, F, H we get exists(angle(I, F, H))
By directions_draw_angle on C, H, F we get exists(angle(C, H, F))
By line_inequality on Line(E, F), Line(I, J), F we get Line(E, F) != Line(I, J)
By divide_by_2_mod_180_v0 on E, B, H, D, B, G we get angle(D, B, G) == angle(E, B, H) mod 360
By directions_draw_angle on H, F, G we get exists(angle(H, F, G))
By directions_draw_angle on A, H, F we get exists(angle(A, H, F))
By collinear_definition on H, C, F we get C in Line(F, H), F in Line(C, H), Line(C, H) == Line(F, H), 0 == 2 * angle(C, H, F) mod 360
By collinear_definition on F, H, J we get H in Line(F, J), J in Line(F, H), Line(F, H) == Line(F, J), 0 == 2 * angle(H, F, J) mod 360
By collinear_definition on C, H, F we get H in Line(C, F), F in Line(C, H), Line(C, F) == Line(C, H), 0 == 2 * angle(H, C, F) mod 360
By collinear_definition on A, J, H we get J in Line(A, H), H in Line(A, J), Line(A, H) == Line(A, J), 0 == 2 * angle(J, A, H) mod 360
By line_inequality on Line(D, G), Line(D, I), G we get Line(D, G) != Line(D, I)
By divide_by_2_mod_180_v0 on D, B, C, A, B, H we get angle(A, B, H) == angle(D, B, C) mod 360
By directions_draw_angle on H, B, D we get exists(angle(H, B, D))
By directions_draw_angle on G, D, E we get exists(angle(G, D, E))
By directions_draw_angle on D, H, J we get exists(angle(D, H, J))
By divide_by_2_mod_180_v0 on G, B, D, H, B, C we get angle(G, B, D) == angle(H, B, C) mod 360
By divide_by_2_mod_180_v0 on G, H, F, I, H, C we get angle(G, H, F) == angle(I, H, C) mod 360
By line_inequality on Line(F, I), Line(D, I), F we get Line(D, I) != Line(F, I)
By divide_by_2_mod_180_v1 on A, H, G, J, H, I we get angle(A, H, G) == angle(J, H, I) + 180 mod 360
By divide_by_2_mod_180_v0 on H, B, G, E, B, D we get angle(E, B, D) == angle(H, B, G) mod 360
By collinear_definition on J, F, H we get F in Line(H, J), H in Line(F, J), Line(F, J) == Line(H, J), 0 == 2 * angle(F, J, H) mod 360
By collinear_definition on F, H, A we get H in Line(A, F), A in Line(F, H), Line(A, F) == Line(F, H), 0 == 2 * angle(H, F, A) mod 360
By divide_by_2_mod_180_v1 on I, H, A, G, H, F we get angle(I, H, A) == angle(G, H, F) + 180 mod 360
By directions_draw_angle on I, F, D we get exists(angle(I, F, D))
By directions_draw_angle on D, G, E we get exists(angle(D, G, E))
By reverse_direction on J, F we get 180 == direction(J, F) - direction(F, J) mod 360
By reverse_direction on C, J we get 180 == direction(C, J) - direction(J, C) mod 360
By collinear_definition on H, J, A we get J in Line(A, H), A in Line(H, J), Line(A, H) == Line(H, J), 0 == 2 * angle(J, H, A) mod 360
By reverse_direction on J, A we get 180 == direction(J, A) - direction(A, J) mod 360
By line_inequality on Line(D, G), Line(D, F), G we get Line(D, F) != Line(D, G)
By reverse_direction on A, F we get 180 == direction(A, F) - direction(F, A) mod 360
By directions_draw_angle on G, D, F we get exists(angle(G, D, F))
By line_inequality on Line(D, I), Line(I, J), D we get Line(D, I) != Line(I, J)
By divide_by_2_mod_180_v0 on G, H, J, I, H, C we get angle(G, H, J) == angle(I, H, C) mod 360
By line_inequality on Line(D, I), Line(D, F), I we get Line(D, F) != Line(D, I)
By collinear_definition on A, F, J we get F in Line(A, J), J in Line(A, F), Line(A, F) == Line(A, J), 0 == 2 * angle(F, A, J) mod 360
By line_inequality on Line(D, E), Line(F, G), D we get Line(D, E) != Line(F, G)
By divide_by_2_mod_180_v1 on I, H, A, I, H, F we get angle(I, H, A) == angle(I, H, F) + 180 mod 360
By collinear_definition on J, C, H we get C in Line(H, J), H in Line(C, J), Line(C, J) == Line(H, J), 0 == 2 * angle(C, J, H) mod 360
By divide_by_2_mod_180_v0 on C, B, H, C, B, D we get angle(C, B, D) == angle(C, B, H) mod 360
By reverse_direction on A, G we get 180 == direction(A, G) - direction(G, A) mod 360
By divide_by_2_mod_180_v1 on A, H, I, F, H, G we get angle(A, H, I) == angle(F, H, G) + 180 mod 360
By collinear_definition on C, F, H we get F in Line(C, H), H in Line(C, F), Line(C, F) == Line(C, H), 0 == 2 * angle(F, C, H) mod 360
By directions_draw_angle on C, J, H we get exists(angle(C, J, H))
By divide_by_2_mod_180_v1 on F, H, G, A, H, I we get angle(F, H, G) == angle(A, H, I) + 180 mod 360
By divide_by_2_mod_180_v1 on G, H, J, G, H, A we get angle(G, H, J) == angle(G, H, A) + 180 mod 360
By reverse_direction on A, H we get 180 == direction(A, H) - direction(H, A) mod 360
By divide_by_2_mod_180_v0 on A, B, H, D, B, E we get angle(A, B, H) == angle(D, B, E) mod 360
By collinear_definition on H, J, C we get J in Line(C, H), C in Line(H, J), Line(C, H) == Line(H, J), 0 == 2 * angle(J, H, C) mod 360
By collinear_definition on C, F, J we get F in Line(C, J), J in Line(C, F), Line(C, F) == Line(C, J), 0 == 2 * angle(F, C, J) mod 360
By line_inequality on Line(F, G), Line(E, F), G we get Line(E, F) != Line(F, G)
By directions_draw_angle on J, F, A we get exists(angle(J, F, A))
By line_inequality on Line(D, E), Line(E, I), D we get Line(D, E) != Line(E, I)
By reverse_direction on C, F we get 180 == direction(C, F) - direction(F, C) mod 360
By reverse_direction on C, B we get 180 == direction(C, B) - direction(B, C) mod 360
By divide_by_2_mod_180_v1 on G, H, A, G, H, F we get angle(G, H, A) == angle(G, H, F) + 180 mod 360
By directions_draw_angle on I, J, H we get exists(angle(I, J, H))
By line_inequality on Line(E, I), Line(E, F), I we get Line(E, F) != Line(E, I)
By collinear_definition on C, J, H we get J in Line(C, H), H in Line(C, J), Line(C, H) == Line(C, J), 0 == 2 * angle(J, C, H) mod 360
By line_inequality on Line(E, I), i, E we get i != Line(E, I)
By divide_by_2_mod_180_v1 on I, H, F, I, H, A we get angle(I, H, F) == angle(I, H, A) + 180 mod 360
By directions_draw_angle on J, H, B we get exists(angle(J, H, B))
By line_inequality on Line(D, F), Line(E, G), D we get Line(D, F) != Line(E, G)
By directions_draw_angle on F, H, B we get exists(angle(F, H, B))
By reverse_direction on E, C we get 180 == direction(E, C) - direction(C, E) mod 360
By divide_by_2_mod_180_v0 on G, B, D, H, B, E we get angle(G, B, D) == angle(H, B, E) mod 360
By reverse_direction on B, G we get 180 == direction(B, G) - direction(G, B) mod 360
By reverse_direction on D, G we get 180 == direction(D, G) - direction(G, D) mod 360
By directions_draw_angle on G, F, H we get exists(angle(G, F, H))
By line_inequality on Line(I, J), Line(F, G), I we get Line(F, G) != Line(I, J)
By collinear_definition on A, F, H we get F in Line(A, H), H in Line(A, F), Line(A, F) == Line(A, H), 0 == 2 * angle(F, A, H) mod 360
By divide_by_2_mod_180_v0 on I, H, J, I, H, C we get angle(I, H, C) == angle(I, H, J) mod 360
By reverse_direction on H, I we get 180 == direction(H, I) - direction(I, H) mod 360
By line_inequality on Line(F, I), Line(E, J), F we get Line(E, J) != Line(F, I)
By line_inequality on Line(D, E), Line(D, J), E we get Line(D, E) != Line(D, J)
By divide_by_2_mod_180_v0 on E, B, D, E, B, H we get angle(E, B, D) == angle(E, B, H) mod 360
By collinear_definition on J, F, A we get F in Line(A, J), A in Line(F, J), Line(A, J) == Line(F, J), 0 == 2 * angle(F, J, A) mod 360
By reverse_direction on C, E we get 180 == direction(C, E) - direction(E, C) mod 360
By line_inequality on Line(D, J), Line(E, J), D we get Line(D, J) != Line(E, J)
By collinear_definition on A, H, J we get H in Line(A, J), J in Line(A, H), Line(A, H) == Line(A, J), 0 == 2 * angle(H, A, J) mod 360
By reverse_direction on F, C we get 180 == direction(F, C) - direction(C, F) mod 360
By directions_draw_angle on J, H, D we get exists(angle(J, H, D))
By divide_by_2_mod_180_v1 on I, H, J, I, H, A we get angle(I, H, J) == angle(I, H, A) + 180 mod 360
By divide_by_2_mod_180_v1 on G, H, F, G, H, A we get angle(G, H, F) == angle(G, H, A) + 180 mod 360
By divide_by_2_mod_180_v1 on A, H, G, F, H, I we get angle(A, H, G) == angle(F, H, I) + 180 mod 360
By directions_draw_angle on H, F, E we get exists(angle(H, F, E))
By collinear_definition on B, D, H we get D in Line(B, H), H in Line(B, D), Line(B, D) == Line(B, H), 0 == 2 * angle(D, B, H) mod 360
By divide_by_2_mod_180_v1 on G, H, A, G, H, J we get angle(G, H, A) == angle(G, H, J) + 180 mod 360
By reverse_direction on D, F we get 180 == direction(D, F) - direction(F, D) mod 360
By collinear_definition on H, C, J we get C in Line(H, J), J in Line(C, H), Line(C, H) == Line(H, J), 0 == 2 * angle(C, H, J) mod 360
By directions_draw_angle on J, C, H we get exists(angle(J, C, H))
By collinear_definition on C, J, F we get J in Line(C, F), F in Line(C, J), Line(C, F) == Line(C, J), 0 == 2 * angle(J, C, F) mod 360
By divide_by_2_mod_180_v1 on G, H, A, I, H, J we get angle(G, H, A) == angle(I, H, J) + 180 mod 360
By divide_by_2_mod_180_v0 on G, B, D, G, B, H we get angle(G, B, D) == angle(G, B, H) mod 360
By directions_draw_angle on J, F, I we get exists(angle(J, F, I))
By reverse_direction on I, H we get 180 == direction(I, H) - direction(H, I) mod 360
By divide_by_2_mod_180_v1 on F, H, I, A, H, G we get angle(F, H, I) == angle(A, H, G) + 180 mod 360
By divide_by_2_mod_180_v0 on E, B, H, C, B, D we get angle(C, B, D) == angle(E, B, H) mod 360
By divide_by_2_mod_180_v1 on I, H, F, G, H, A we get angle(I, H, F) == angle(G, H, A) + 180 mod 360
By directions_draw_angle on H, J, C we get exists(angle(H, J, C))
By collinear_definition on F, H, C we get H in Line(C, F), C in Line(F, H), Line(C, F) == Line(F, H), 0 == 2 * angle(H, F, C) mod 360
By directions_draw_angle on A, F, H we get exists(angle(A, F, H))
By directions_draw_angle on D, F, I we get exists(angle(D, F, I))
By directions_draw_angle on C, J, F we get exists(angle(C, J, F))
By line_inequality on Line(D, I), Line(E, F), D we get Line(D, I) != Line(E, F)
By reverse_direction on H, F we get 180 == direction(H, F) - direction(F, H) mod 360
By collinear_definition on H, F, C we get F in Line(C, H), C in Line(F, H), Line(C, H) == Line(F, H), 0 == 2 * angle(F, H, C) mod 360
By reverse_direction on E, B we get 180 == direction(E, B) - direction(B, E) mod 360
By reverse_direction on C, A we get 180 == direction(C, A) - direction(A, C) mod 360
By collinear_definition on F, A, H we get A in Line(F, H), H in Line(A, F), Line(A, F) == Line(F, H), 0 == 2 * angle(A, F, H) mod 360
By directions_draw_angle on G, F, D we get exists(angle(G, F, D))
By collinear_definition on A, J, F we get J in Line(A, F), F in Line(A, J), Line(A, F) == Line(A, J), 0 == 2 * angle(J, A, F) mod 360
By reverse_direction on A, J we get 180 == direction(A, J) - direction(J, A) mod 360
By reverse_direction on F, H we get 180 == direction(F, H) - direction(H, F) mod 360
By collinear_definition on F, C, J we get C in Line(F, J), J in Line(C, F), Line(C, F) == Line(F, J), 0 == 2 * angle(C, F, J) mod 360
By reverse_direction on B, C we get 180 == direction(B, C) - direction(C, B) mod 360
By reverse_direction on H, A we get 180 == direction(H, A) - direction(A, H) mod 360
By collinear_definition on H, A, F we get A in Line(F, H), F in Line(A, H), Line(A, H) == Line(F, H), 0 == 2 * angle(A, H, F) mod 360
By divide_by_2_mod_180_v0 on H, B, A, C, B, D we get angle(C, B, D) == angle(H, B, A) mod 360
By collinear_definition on H, D, B we get D in Line(B, H), B in Line(D, H), Line(B, H) == Line(D, H), 0 == 2 * angle(D, H, B) mod 360
By directions_draw_angle on F, C, H we get exists(angle(F, C, H))
By reverse_direction on H, G we get 180 == direction(H, G) - direction(G, H) mod 360
By collinear_definition on H, F, J we get F in Line(H, J), J in Line(F, H), Line(F, H) == Line(H, J), 0 == 2 * angle(F, H, J) mod 360
By collinear_definition on F, J, A we get J in Line(A, F), A in Line(F, J), Line(A, F) == Line(F, J), 0 == 2 * angle(J, F, A) mod 360
By directions_draw_angle on F, D, I we get exists(angle(F, D, I))
By directions_draw_angle on F, D, J we get exists(angle(F, D, J))
By directions_draw_angle on F, D, E we get exists(angle(F, D, E))
By directions_draw_angle on D, H, F we get exists(angle(D, H, F))
By reverse_direction on F, J we get 180 == direction(F, J) - direction(J, F) mod 360
By collinear_definition on H, B, D we get B in Line(D, H), D in Line(B, H), Line(B, H) == Line(D, H), 0 == 2 * angle(B, H, D) mod 360
By directions_draw_angle on E, F, D we get exists(angle(E, F, D))
By divide_by_2_mod_180_v1 on I, H, A, I, H, J we get angle(I, H, A) == angle(I, H, J) + 180 mod 360
By reverse_direction on A, B we get 180 == direction(A, B) - direction(B, A) mod 360
By divide_by_2_mod_180_v0 on I, H, J, G, H, F we get angle(G, H, F) == angle(I, H, J) mod 360
By line_inequality on Line(E, F), Line(F, I), E we get Line(E, F) != Line(F, I)
By line_inequality on Line(E, G), Line(D, E), G we get Line(D, E) != Line(E, G)
By directions_draw_angle on F, A, J we get exists(angle(F, A, J))
By directions_draw_angle on D, H, B we get exists(angle(D, H, B))
By directions_draw_angle on C, F, J we get exists(angle(C, F, J))
By directions_draw_angle on D, J, H we get exists(angle(D, J, H))
By line_inequality on Line(E, F), Line(D, J), E we get Line(D, J) != Line(E, F)
By directions_draw_angle on J, A, F we get exists(angle(J, A, F))
By directions_draw_angle on E, F, H we get exists(angle(E, F, H))
By directions_draw_angle on H, J, F we get exists(angle(H, J, F))
By line_inequality on Line(F, G), Line(D, I), F we get Line(D, I) != Line(F, G)
By line_inequality on Line(C, D), Line(F, I), D we get Line(C, D) != Line(F, I)
By line_inequality on Line(I, J), Line(D, J), I we get Line(D, J) != Line(I, J)
By line_inequality on Line(D, I), Line(D, E), I we get Line(D, E) != Line(D, I)
By directions_draw_angle on D, B, H we get exists(angle(D, B, H))
By directions_draw_angle on J, F, C we get exists(angle(J, F, C))
By directions_draw_angle on J, H, F we get exists(angle(J, H, F))
By directions_draw_angle on F, G, D we get exists(angle(F, G, D))
By directions_draw_angle on J, F, E we get exists(angle(J, F, E))
By line_inequality on Line(D, I), Line(E, I), D we get Line(D, I) != Line(E, I)
By directions_draw_angle on H, C, F we get exists(angle(H, C, F))
By line_inequality on Line(E, F), Line(E, G), F we get Line(E, F) != Line(E, G)
By directions_draw_angle on D, F, E we get exists(angle(D, F, E))
By line_inequality on Line(F, I), Line(D, F), I we get Line(D, F) != Line(F, I)
By directions_draw_angle on F, D, G we get exists(angle(F, D, G))
By directions_draw_angle on H, F, J we get exists(angle(H, F, J))
By directions_draw_angle on H, F, C we get exists(angle(H, F, C))
By directions_draw_angle on J, H, C we get exists(angle(J, H, C))
By line_inequality on Line(D, G), Line(D, J), G we get Line(D, G) != Line(D, J)
By directions_draw_angle on J, C, F we get exists(angle(J, C, F))
By directions_draw_angle on F, H, A we get exists(angle(F, H, A))
By directions_draw_angle on G, D, J we get exists(angle(G, D, J))
By line_inequality on Line(C, D), Line(E, F), D we get Line(C, D) != Line(E, F)
By line_inequality on Line(E, G), Line(D, J), E we get Line(D, J) != Line(E, G)
By directions_draw_angle on F, J, D we get exists(angle(F, J, D))
By line_inequality on Line(D, J), Line(E, I), D we get Line(D, J) != Line(E, I)
By directions_draw_angle on F, J, I we get exists(angle(F, J, I))
By line_inequality on Line(F, I), Line(D, E), I we get Line(D, E) != Line(F, I)
By directions_draw_angle on C, H, J we get exists(angle(C, H, J))
By line_inequality on Line(D, E), Line(D, F), E we get Line(D, E) != Line(D, F)
By directions_draw_angle on D, F, G we get exists(angle(D, F, G))
By directions_draw_angle on F, A, H we get exists(angle(F, A, H))
By directions_draw_angle on J, F, H we get exists(angle(J, F, H))
By line_inequality on Line(F, G), Line(E, I), G we get Line(E, I) != Line(F, G)
By line_inequality on Line(C, D), Line(D, G), C we get Line(C, D) != Line(D, G)
By directions_draw_angle on H, A, J we get exists(angle(H, A, J))
By directions_draw_angle on D, G, F we get exists(angle(D, G, F))
By directions_draw_angle on F, J, C we get exists(angle(F, J, C))
By directions_draw_angle on H, C, J we get exists(angle(H, C, J))
By line_inequality on Line(D, E), Line(E, J), D we get Line(D, E) != Line(E, J)
By directions_draw_angle on J, H, A we get exists(angle(J, H, A))
By line_inequality on Line(D, I), i, I we get i != Line(D, I)
By line_inequality on Line(E, G), Line(F, I), E we get Line(E, G) != Line(F, I)
By directions_draw_angle on A, H, J we get exists(angle(A, H, J))
By directions_draw_angle on J, D, G we get exists(angle(J, D, G))
By directions_draw_angle on D, J, F we get exists(angle(D, J, F))
By directions_draw_angle on E, J, F we get exists(angle(E, J, F))
By line_inequality on Line(D, F), Line(D, J), F we get Line(D, F) != Line(D, J)
By directions_draw_angle on E, G, D we get exists(angle(E, G, D))
By directions_draw_angle on E, D, G we get exists(angle(E, D, G))
By directions_draw_angle on J, F, G we get exists(angle(J, F, G))
By directions_draw_angle on I, D, F we get exists(angle(I, D, F))
By directions_draw_angle on G, F, J we get exists(angle(G, F, J))
By directions_draw_angle on F, H, C we get exists(angle(F, H, C))
By directions_draw_angle on I, D, G we get exists(angle(I, D, G))
By directions_draw_angle on B, H, D we get exists(angle(B, H, D))
By directions_draw_angle on F, H, D we get exists(angle(F, H, D))
By directions_draw_angle on I, J, F we get exists(angle(I, J, F))
By line_inequality on Line(F, I), Line(E, I), F we get Line(E, I) != Line(F, I)
By directions_draw_angle on H, F, A we get exists(angle(H, F, A))
By line_inequality on Line(E, I), Line(I, J), E we get Line(E, I) != Line(I, J)
By directions_draw_angle on C, F, H we get exists(angle(C, F, H))
By line_inequality on Line(C, D), Line(D, I), C we get Line(C, D) != Line(D, I)
By directions_draw_angle on F, C, J we get exists(angle(F, C, J))
By directions_draw_angle on H, A, F we get exists(angle(H, A, F))
By directions_draw_angle on H, F, I we get exists(angle(H, F, I))
By line_inequality on Line(E, J), Line(D, G), J we get Line(D, G) != Line(E, J)
By line_inequality on Line(E, I), Line(D, F), E we get Line(D, F) != Line(E, I)
By line_inequality on Line(F, G), Line(D, G), F we get Line(D, G) != Line(F, G)
By line_inequality on Line(C, D), Line(E, G), D we get Line(C, D) != Line(E, G)
By line_inequality on Line(C, D), Line(F, G), C we get Line(C, D) != Line(F, G)
By line_inequality on Line(I, J), Line(F, I), J we get Line(F, I) != Line(I, J)
By line_inequality on Line(C, D), Line(D, E), C we get Line(C, D) != Line(D, E)
By line_inequality on Line(D, F), Line(E, F), D we get Line(D, F) != Line(E, F)
By line_inequality on Line(C, D), Line(I, J), D we get Line(C, D) != Line(I, J)
By line_inequality on Line(C, D), Line(D, J), C we get Line(C, D) != Line(D, J)
By line_inequality on Line(C, D), Line(E, I), C we get Line(C, D) != Line(E, I)
By not_in_line_equivalent_to_not_collinear_v0_r on I, C, D we get I not in Line(C, D)
By line_inequality on Line(C, D), Line(E, J), C we get Line(C, D) != Line(E, J)
By line_inequality on Line(D, G), Line(D, E), G we get Line(D, E) != Line(D, G)
By line_inequality on Line(E, J), Line(E, I), J we get Line(E, I) != Line(E, J)
By line_inequality on Line(D, J), Line(D, I), J we get Line(D, I) != Line(D, J)
By line_inequality on Line(F, G), Line(F, I), G we get Line(F, G) != Line(F, I)
By line_inequality on Line(D, E), i, E we get i != Line(D, E)
By line_inequality on Line(C, D), Line(D, F), C we get Line(C, D) != Line(D, F)
By same_angle_v1 on D, B, H, J we get angle(B, D, J) == angle(H, D, J) + 180 mod 360
By same_angle_v1 on D, H, B, J we get angle(H, D, J) == angle(B, D, J) + 180 mod 360
By same_angle_v1 on D, H, B, E we get angle(H, D, E) == angle(B, D, E) + 180 mod 360
By same_angle_v1 on D, B, H, E we get angle(B, D, E) == angle(H, D, E) + 180 mod 360
By same_angle_v1 on D, B, H, G we get angle(B, D, G) == angle(H, D, G) + 180 mod 360
By same_angle_v1 on D, H, B, G we get angle(H, D, G) == angle(B, D, G) + 180 mod 360
By same_angle_v1 on D, B, H, I we get angle(B, D, I) == angle(H, D, I) + 180 mod 360
By internal_angle_bisector_definition_v0_r on C, D, G, A we get Line(A, D) == internal_angle_bisector(C, A, G)
By same_angle_v1 on D, B, H, F we get angle(B, D, F) == angle(H, D, F) + 180 mod 360
By same_angle_v1 on D, H, B, F we get angle(H, D, F) == angle(B, D, F) + 180 mod 360
By same_angle_v1 on D, H, B, I we get angle(H, D, I) == angle(B, D, I) + 180 mod 360
By external_angle_bisector_definition_v0_r on D, A, D, G we get Line(A, G) == external_angle_bisector(D, G, D)
By external_angle_bisector_definition_v0_r on D, J, D, F we get Line(F, J) == external_angle_bisector(D, F, D)
By external_angle_bisector_definition_v0_r on C, D, C, E we get Line(D, E) == external_angle_bisector(C, E, C)
By external_angle_bisector_definition_v0_r on D, C, D, E we get Line(C, E) == external_angle_bisector(D, E, D)
By internal_angle_bisector_definition_v0_r on H, D, C, F we get Line(D, F) == internal_angle_bisector(C, F, H)
By external_angle_bisector_definition_v0_r on J, D, J, F we get Line(D, F) == external_angle_bisector(J, F, J)
By internal_angle_bisector_definition_v0_r on G, H, E, B we get Line(B, H) == internal_angle_bisector(E, B, G)
By external_angle_bisector_definition_v0_r on B, D, B, E we get Line(D, E) == external_angle_bisector(B, E, B)
By external_angle_bisector_definition_v0_r on A, D, A, G we get Line(D, G) == external_angle_bisector(A, G, A)
By internal_angle_bisector_definition_v0_r on A, C, A, H we get Line(C, H) == internal_angle_bisector(A, H, A)
By internal_angle_bisector_definition_v0_r on B, D, F, A we get Line(A, D) == internal_angle_bisector(B, A, F)
By external_angle_bisector_definition_v0_r on A, D, A, F we get Line(D, F) == external_angle_bisector(A, F, A)
By internal_angle_bisector_definition_v0 on A, D, B, C we get angle(A, C, D) == angle(D, C, B) mod 360
By internal_angle_bisector_definition_v0_r on F, A, H, C we get Line(A, C) == internal_angle_bisector(F, C, H)
By aa_anti_similarity on D, B, G, D, B, E we get anti_similar_triangles(B, D, E, B, D, G)
By internal_angle_bisector_definition_v0_r on A, D, E, B we get Line(B, D) == internal_angle_bisector(A, B, E)
By internal_angle_bisector_definition_v0_r on B, D, A, G we get Line(D, G) == internal_angle_bisector(A, G, B)
By internal_angle_bisector_definition_v0_r on B, E, B, C we get Line(C, E) == internal_angle_bisector(B, C, B)
By external_angle_bisector_definition_v0_r on J, A, H, C we get Line(A, C) == external_angle_bisector(H, C, J)
By external_angle_bisector_definition_v0_r on C, D, C, F we get Line(D, F) == external_angle_bisector(C, F, C)
By external_angle_bisector_definition_v0_r on F, A, J, C we get Line(A, C) == external_angle_bisector(F, C, J)
By aa_anti_similarity on D, A, F, D, A, G we get anti_similar_triangles(A, D, F, A, D, G)
By internal_angle_bisector_definition_v0_r on C, F, C, A we get Line(A, F) == internal_angle_bisector(C, A, C)
By external_angle_bisector_definition_v0_r on J, D, C, F we get Line(D, F) == external_angle_bisector(C, F, J)
By external_angle_bisector_definition_v0_r on H, D, H, F we get Line(D, F) == external_angle_bisector(H, F, H)
By internal_angle_bisector_definition_v0_r on B, D, C, E we get Line(D, E) == internal_angle_bisector(B, E, C)
By internal_angle_bisector_definition_v0_r on A, B, A, G we get Line(B, G) == internal_angle_bisector(A, G, A)
By external_angle_bisector_definition_v0_r on A, D, H, F we get Line(D, F) == external_angle_bisector(A, F, H)
By internal_angle_bisector_definition_v0_r on G, B, G, A we get Line(A, B) == internal_angle_bisector(G, A, G)
By external_angle_bisector_definition_v0_r on D, H, D, F we get Line(F, H) == external_angle_bisector(D, F, D)
By external_angle_bisector_definition_v0_r on D, B, D, E we get Line(B, E) == external_angle_bisector(D, E, D)
By internal_angle_bisector_definition_v0_r on C, H, C, A we get Line(A, H) == internal_angle_bisector(C, A, C)
By reverse_direction on B, D we get 180 == direction(B, D) - direction(D, B) mod 360
By internal_angle_bisector_definition_v0_r on J, C, J, A we get Line(A, C) == internal_angle_bisector(J, A, J)
By isogonal_conjugate_definition_v2 on A, C, B, D, D we get angle(B, C, D) == angle(D, C, A) mod 360
By internal_angle_bisector_definition_v0_r on A, D, C, F we get Line(D, F) == internal_angle_bisector(A, F, C)
By internal_angle_bisector_definition_v0_r on C, E, C, B we get Line(B, E) == internal_angle_bisector(C, B, C)
By internal_angle_bisector_definition_v0_r on C, A, C, F we get Line(A, F) == internal_angle_bisector(C, F, C)
By external_angle_bisector_definition_v0_r on D, C, D, F we get Line(C, F) == external_angle_bisector(D, F, D)
By external_angle_bisector_definition_v0_r on B, D, B, G we get Line(D, G) == external_angle_bisector(B, G, B)
By internal_angle_bisector_definition_v0_r on F, C, F, A we get Line(A, C) == internal_angle_bisector(F, A, F)
By external_angle_bisector_definition_v0_r on D, A, D, F we get Line(A, F) == external_angle_bisector(D, F, D)
By internal_angle_bisector_definition_v0_r on C, A, C, H we get Line(A, H) == internal_angle_bisector(C, H, C)
By internal_angle_bisector_definition_v0_r on H, G, H, I we get Line(G, I) == internal_angle_bisector(H, I, H)
By internal_angle_bisector_definition_v0_r on J, C, F, A we get Line(A, C) == internal_angle_bisector(F, A, J)
By internal_angle_bisector_definition_v0_r on E, D, G, B we get Line(B, D) == internal_angle_bisector(E, B, G)
By internal_angle_bisector_definition_v0_r on H, A, H, C we get Line(A, C) == internal_angle_bisector(H, C, H)
By internal_angle_bisector_definition_v0_r on B, A, B, G we get Line(A, G) == internal_angle_bisector(B, G, B)
By internal_angle_bisector_definition_v0_r on F, D, G, A we get Line(A, D) == internal_angle_bisector(F, A, G)
By internal_angle_bisector_definition_v0_r on C, H, G, B we get Line(B, H) == internal_angle_bisector(C, B, G)
By internal_angle_bisector_definition_v0_r on H, C, F, A we get Line(A, C) == internal_angle_bisector(F, A, H)
By external_angle_bisector_definition_v0_r on D, B, D, G we get Line(B, G) == external_angle_bisector(D, G, D)
By reverse_direction on A, D we get 180 == direction(A, D) - direction(D, A) mod 360
By internal_angle_bisector_definition_v0_r on E, B, E, C we get Line(B, C) == internal_angle_bisector(E, C, E)
By internal_angle_bisector_definition_v0_r on A, F, A, C we get Line(C, F) == internal_angle_bisector(A, C, A)
By internal_angle_bisector_definition_v0_r on B, D, J, A we get Line(A, D) == internal_angle_bisector(B, A, J)
By internal_angle_bisector_definition_v0_r on J, D, H, F we get Line(D, F) == internal_angle_bisector(H, F, J)
By internal_angle_bisector_definition_v0_r on I, G, I, H we get Line(G, H) == internal_angle_bisector(I, H, I)
By internal_angle_bisector_definition_v0_r on B, D, H, A we get Line(A, D) == internal_angle_bisector(B, A, H)
By aa_anti_similarity on D, E, B, D, G, B we get anti_similar_triangles(B, D, E, B, D, G)
By internal_angle_bisector_definition_v0_r on G, D, C, B we get Line(B, D) == internal_angle_bisector(C, B, G)
By internal_angle_bisector_definition_v0_r on G, I, G, H we get Line(H, I) == internal_angle_bisector(G, H, G)
By internal_angle_bisector_definition_v0_r on C, B, C, E we get Line(B, E) == internal_angle_bisector(C, E, C)
By internal_angle_bisector_definition_v0_r on A, H, A, C we get Line(C, H) == internal_angle_bisector(A, C, A)
By internal_angle_bisector_definition_v0_r on G, H, G, I we get Line(H, I) == internal_angle_bisector(G, I, G)
By internal_angle_bisector_definition_v0_r on I, H, I, G we get Line(G, H) == internal_angle_bisector(I, G, I)
By internal_angle_bisector_definition_v0_r on B, G, B, A we get Line(A, G) == internal_angle_bisector(B, A, B)
By internal_angle_bisector_definition_v0_r on F, A, F, C we get Line(A, C) == internal_angle_bisector(F, C, F)
By internal_angle_bisector_definition_v0_r on J, C, H, A we get Line(A, C) == internal_angle_bisector(H, A, J)
By internal_angle_bisector_definition_v0_r on A, H, E, B we get Line(B, H) == internal_angle_bisector(A, B, E)
By internal_angle_bisector_definition_v0_r on G, D, H, A we get Line(A, D) == internal_angle_bisector(G, A, H)
By aa_anti_similarity on D, B, E, D, B, G we get anti_similar_triangles(B, D, E, B, D, G)
By internal_angle_bisector_definition_v0_r on J, D, G, A we get Line(A, D) == internal_angle_bisector(G, A, J)
By internal_angle_bisector_definition_v0_r on B, C, B, E we get Line(C, E) == internal_angle_bisector(B, E, B)
By aa_anti_similarity on D, F, A, D, G, A we get anti_similar_triangles(A, D, F, A, D, G)
By internal_angle_bisector_definition_v0_r on C, J, C, A we get Line(A, J) == internal_angle_bisector(C, A, C)
By reverse_direction on H, D we get 180 == direction(H, D) - direction(D, H) mod 360
By internal_angle_bisector_definition_v0_r on A, C, A, J we get Line(C, J) == internal_angle_bisector(A, J, A)
By internal_angle_bisector_definition_v0_r on G, A, G, B we get Line(A, B) == internal_angle_bisector(G, B, G)
By internal_angle_bisector_definition_v0_r on A, D, J, F we get Line(D, F) == internal_angle_bisector(A, F, J)
By internal_angle_bisector_definition_v0_r on H, C, H, A we get Line(A, C) == internal_angle_bisector(H, A, H)
By internal_angle_bisector_definition_v0_r on A, J, A, C we get Line(C, J) == internal_angle_bisector(A, C, A)
By internal_angle_bisector_definition_v0_r on H, I, H, G we get Line(G, I) == internal_angle_bisector(H, G, H)
By internal_angle_bisector_definition_v0_r on C, A, C, J we get Line(A, J) == internal_angle_bisector(C, J, C)
By aa_anti_similarity on D, G, A, D, F, A we get anti_similar_triangles(A, D, F, A, D, G)
By aa_anti_similarity on D, A, G, D, A, F we get anti_similar_triangles(A, D, F, A, D, G)
By internal_angle_bisector_definition_v0_r on E, C, E, B we get Line(B, C) == internal_angle_bisector(E, B, E)
By internal_angle_bisector_definition_v0_r on J, A, J, C we get Line(A, C) == internal_angle_bisector(J, C, J)
By internal_angle_bisector_definition_v0_r on A, C, A, F we get Line(C, F) == internal_angle_bisector(A, F, A)
By aa_anti_similarity on D, G, B, D, E, B we get anti_similar_triangles(B, D, E, B, D, G)
By internal_angle_bisector_definition_v0_r on A, G, A, B we get Line(B, G) == internal_angle_bisector(A, B, A)
By same_angle_v1 on D, H, B, A we get angle(H, D, A) == angle(B, D, A) + 180 mod 360
By same_angle_v1 on D, B, H, A we get angle(B, D, A) == angle(H, D, A) + 180 mod 360
By same_angle_v1 on D, H, B, C we get angle(H, D, C) == angle(B, D, C) + 180 mod 360
By same_angle_v1 on D, B, H, C we get angle(B, D, C) == angle(H, D, C) + 180 mod 360
By collinear_definition on D, H, B we get H in Line(B, D), B in Line(D, H), Line(B, D) == Line(D, H), 0 == 2 * angle(H, D, B) mod 360
By collinear_definition on D, B, H we get B in Line(D, H), H in Line(B, D), Line(B, D) == Line(D, H), 0 == 2 * angle(B, D, H) mod 360
By power_of_a_point_definition on H, I, G, c we get log(power_of_a_point(H, c)) == log(distance(H, I)) + log(distance(G, H))
By line_intersection_definition on orthocenter(B, D, G), Line(D, G), f we get orthocenter(B, D, G) == line_intersection(f, Line(D, G))
By line_intersection_definition on orthocenter(D, F, J), Line(D, F), h we get orthocenter(D, F, J) == line_intersection(h, Line(D, F))
By line_intersection_definition on orthocenter(C, D, E), g, Line(D, E) we get orthocenter(C, D, E) == line_intersection(g, Line(D, E))
By line_intersection_definition on orthocenter(A, D, G), f, Line(D, G) we get orthocenter(A, D, G) == line_intersection(f, Line(D, G))
By line_intersection_definition on orthocenter(B, D, E), Line(D, E), g we get orthocenter(B, D, E) == line_intersection(g, Line(D, E))
By line_intersection_definition on orthocenter(A, D, F), Line(D, F), h we get orthocenter(A, D, F) == line_intersection(h, Line(D, F))
By line_intersection_definition on orthocenter(D, F, H), h, Line(D, F) we get orthocenter(D, F, H) == line_intersection(h, Line(D, F))
By line_intersection_definition on orthocenter(C, D, F), Line(D, F), h we get orthocenter(C, D, F) == line_intersection(h, Line(D, F))
By line_intersection_definition on D, Line(D, F), Line(D, J) we get D == line_intersection(Line(D, F), Line(D, J))
By line_intersection_definition on G, Line(D, G), Line(E, G) we get G == line_intersection(Line(D, G), Line(E, G))
By concurrent_sufficient_conditions on Line(C, D), Line(D, G), i we get concurrent(i, Line(C, D), Line(D, G))
By concurrent_sufficient_conditions on Line(D, G), Line(F, G), f we get concurrent(f, Line(D, G), Line(F, G))
By concurrent_sufficient_conditions on Line(D, E), Line(E, I), g we get concurrent(g, Line(D, E), Line(E, I))
By concurrent_sufficient_conditions on Line(D, J), Line(D, G), i we get concurrent(i, Line(D, G), Line(D, J))
By perpendicular_line_definition on D, j, altitude(F, D, H) we get j == perpendicular_line(D, altitude(F, D, H))
By concurrent_sufficient_conditions on Line(D, F), Line(D, G), i we get concurrent(i, Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(D, I), Line(F, I), k we get concurrent(k, Line(D, I), Line(F, I))
By line_intersection_definition on J, Line(E, J), Line(I, J) we get J == line_intersection(Line(E, J), Line(I, J))
By perpendicular_line_definition on D, j, altitude(G, B, D) we get j == perpendicular_line(D, altitude(G, B, D))
By concurrent_sufficient_conditions on Line(E, G), Line(E, F), g we get concurrent(g, Line(E, F), Line(E, G))
By line_intersection_definition on F, Line(F, G), Line(D, F) we get F == line_intersection(Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on Line(E, G), Line(E, J), g we get concurrent(g, Line(E, G), Line(E, J))
By concurrent_sufficient_conditions on Line(D, I), Line(D, J), j we get concurrent(j, Line(D, I), Line(D, J))
By perpendicular_line_definition on orthocenter(D, F, J), altitude(F, D, J), Line(D, J) we get altitude(F, D, J) == perpendicular_line(orthocenter(D, F, J), Line(D, J))
By concurrent_sufficient_conditions on Line(D, G), Line(C, D), i we get concurrent(i, Line(C, D), Line(D, G))
By perpendicular_line_definition on orthocenter(C, D, E), altitude(E, C, D), Line(C, D) we get altitude(E, C, D) == perpendicular_line(orthocenter(C, D, E), Line(C, D))
By line_intersection_definition on D, Line(D, I), Line(D, E) we get D == line_intersection(Line(D, E), Line(D, I))
By concurrent_sufficient_conditions on Line(D, I), i, j we get concurrent(i, j, Line(D, I))
By concurrent_sufficient_conditions on Line(F, G), Line(E, G), k we get concurrent(k, Line(E, G), Line(F, G))
By perpendicular_line_definition on D, i, altitude(F, A, D) we get i == perpendicular_line(D, altitude(F, A, D))
By concurrent_sufficient_conditions on Line(E, F), Line(F, I), h we get concurrent(h, Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(D, F), Line(F, G), h we get concurrent(h, Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on Line(I, J), Line(F, I), k we get concurrent(k, Line(F, I), Line(I, J))
By concurrent_sufficient_conditions on Line(C, D), Line(D, F), i we get concurrent(i, Line(C, D), Line(D, F))
By concurrent_sufficient_conditions on Line(D, J), Line(D, G), j we get concurrent(j, Line(D, G), Line(D, J))
By concurrent_sufficient_conditions on Line(E, J), Line(D, J), h we get concurrent(h, Line(D, J), Line(E, J))
By concurrent_sufficient_conditions on Line(F, G), Line(E, F), h we get concurrent(h, Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(D, J), Line(E, J), h we get concurrent(h, Line(D, J), Line(E, J))
By perpendicular_line_definition on A, i, altitude(F, A, D) we get i == perpendicular_line(A, altitude(F, A, D))
By line_intersection_definition on I, Line(I, J), Line(D, I) we get I == line_intersection(Line(D, I), Line(I, J))
By concurrent_sufficient_conditions on Line(E, J), Line(E, G), g we get concurrent(g, Line(E, G), Line(E, J))
By concurrent_sufficient_conditions on Line(E, G), Line(E, I), g we get concurrent(g, Line(E, G), Line(E, I))
By concurrent_sufficient_conditions on Line(D, E), i, j we get concurrent(i, j, Line(D, E))
By line_intersection_definition on E, Line(E, G), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, G))
By perpendicular_line_definition on orthocenter(B, D, G), altitude(G, B, D), j we get altitude(G, B, D) == perpendicular_line(orthocenter(B, D, G), j)
By concurrent_sufficient_conditions on Line(D, G), Line(D, J), i we get concurrent(i, Line(D, G), Line(D, J))
By perpendicular_line_definition on orthocenter(A, D, F), h, Line(D, F) we get h == perpendicular_line(orthocenter(A, D, F), Line(D, F))
By perpendicular_line_definition on orthocenter(A, D, G), f, Line(D, G) we get f == perpendicular_line(orthocenter(A, D, G), Line(D, G))
By line_intersection_definition on J, Line(E, J), Line(D, J) we get J == line_intersection(Line(D, J), Line(E, J))
By concurrent_sufficient_conditions on Line(D, E), Line(D, F), j we get concurrent(j, Line(D, E), Line(D, F))
By perpendicular_line_definition on orthocenter(C, D, E), Line(D, E), g we get Line(D, E) == perpendicular_line(orthocenter(C, D, E), g)
By concurrent_sufficient_conditions on Line(D, G), Line(D, E), j we get concurrent(j, Line(D, E), Line(D, G))
By line_intersection_definition on I, Line(F, I), Line(I, J) we get I == line_intersection(Line(F, I), Line(I, J))
By perpendicular_line_definition on orthocenter(C, D, F), h, Line(D, F) we get h == perpendicular_line(orthocenter(C, D, F), Line(D, F))
By concurrent_sufficient_conditions on Line(F, I), Line(D, I), k we get concurrent(k, Line(D, I), Line(F, I))
By concurrent_sufficient_conditions on Line(D, I), Line(D, E), j we get concurrent(j, Line(D, E), Line(D, I))
By concurrent_sufficient_conditions on Line(D, J), Line(D, F), i we get concurrent(i, Line(D, F), Line(D, J))
By concurrent_sufficient_conditions on Line(E, F), Line(D, E), g we get concurrent(g, Line(D, E), Line(E, F))
By perpendicular_line_definition on orthocenter(C, D, F), altitude(F, C, D), Line(C, D) we get altitude(F, C, D) == perpendicular_line(orthocenter(C, D, F), Line(C, D))
By concurrent_sufficient_conditions on Line(C, D), Line(D, J), j we get concurrent(j, Line(C, D), Line(D, J))
By perpendicular_line_definition on orthocenter(A, D, G), Line(D, G), f we get Line(D, G) == perpendicular_line(orthocenter(A, D, G), f)
By perpendicular_line_definition on orthocenter(D, F, H), Line(D, F), h we get Line(D, F) == perpendicular_line(orthocenter(D, F, H), h)
By concurrent_sufficient_conditions on Line(E, F), Line(E, I), g we get concurrent(g, Line(E, F), Line(E, I))
By line_intersection_definition on G, Line(D, G), Line(F, G) we get G == line_intersection(Line(D, G), Line(F, G))
By concurrent_sufficient_conditions on Line(E, F), Line(F, G), h we get concurrent(h, Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(C, D), Line(D, F), j we get concurrent(j, Line(C, D), Line(D, F))
By perpendicular_line_definition on D, Line(C, D), altitude(F, C, D) we get Line(C, D) == perpendicular_line(D, altitude(F, C, D))
By perpendicular_line_definition on orthocenter(C, D, F), Line(D, F), h we get Line(D, F) == perpendicular_line(orthocenter(C, D, F), h)
By perpendicular_line_definition on J, Line(D, J), altitude(F, D, J) we get Line(D, J) == perpendicular_line(J, altitude(F, D, J))
By concurrent_sufficient_conditions on Line(D, E), Line(C, D), j we get concurrent(j, Line(C, D), Line(D, E))
By line_intersection_definition on J, Line(I, J), Line(D, J) we get J == line_intersection(Line(D, J), Line(I, J))
By line_intersection_definition on F, Line(E, F), Line(D, F) we get F == line_intersection(Line(D, F), Line(E, F))
By line_intersection_definition on D, Line(D, F), Line(C, D) we get D == line_intersection(Line(C, D), Line(D, F))
By line_intersection_definition on D, Line(D, F), Line(D, G) we get D == line_intersection(Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(E, I), Line(F, I), k we get concurrent(k, Line(E, I), Line(F, I))
By line_intersection_definition on D, Line(D, G), Line(D, J) we get D == line_intersection(Line(D, G), Line(D, J))
By perpendicular_line_definition on D, i, altitude(G, A, D) we get i == perpendicular_line(D, altitude(G, A, D))
By concurrent_sufficient_conditions on Line(F, G), Line(F, I), h we get concurrent(h, Line(F, G), Line(F, I))
By line_intersection_definition on G, Line(F, G), Line(E, G) we get G == line_intersection(Line(E, G), Line(F, G))
By concurrent_sufficient_conditions on Line(D, J), Line(D, E), j we get concurrent(j, Line(D, E), Line(D, J))
By concurrent_sufficient_conditions on Line(E, G), Line(D, E), g we get concurrent(g, Line(D, E), Line(E, G))
By line_intersection_definition on D, Line(D, F), Line(D, I) we get D == line_intersection(Line(D, F), Line(D, I))
By concurrent_sufficient_conditions on Line(D, I), Line(I, J), k we get concurrent(k, Line(D, I), Line(I, J))
By concurrent_sufficient_conditions on Line(D, F), Line(D, E), j we get concurrent(j, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(C, D), Line(D, E), j we get concurrent(j, Line(C, D), Line(D, E))
By line_intersection_definition on D, Line(D, I), Line(D, J) we get D == line_intersection(Line(D, I), Line(D, J))
By line_intersection_definition on E, Line(E, J), Line(E, I) we get E == line_intersection(Line(E, I), Line(E, J))
By concurrent_sufficient_conditions on Line(D, F), Line(D, J), i we get concurrent(i, Line(D, F), Line(D, J))
By perpendicular_line_definition on orthocenter(A, D, F), altitude(F, A, D), i we get altitude(F, A, D) == perpendicular_line(orthocenter(A, D, F), i)
By concurrent_sufficient_conditions on Line(E, G), Line(F, G), k we get concurrent(k, Line(E, G), Line(F, G))
By line_intersection_definition on E, Line(D, E), Line(E, F) we get E == line_intersection(Line(D, E), Line(E, F))
By concurrent_sufficient_conditions on Line(E, G), Line(F, G), f we get concurrent(f, Line(E, G), Line(F, G))
By line_intersection_definition on E, Line(E, J), Line(E, F) we get E == line_intersection(Line(E, F), Line(E, J))
By line_intersection_definition on E, Line(E, J), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, J))
By concurrent_sufficient_conditions on Line(C, D), Line(D, J), i we get concurrent(i, Line(C, D), Line(D, J))
By concurrent_sufficient_conditions on Line(D, J), Line(I, J), h we get concurrent(h, Line(D, J), Line(I, J))
By line_intersection_definition on E, Line(E, I), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, I))
By concurrent_sufficient_conditions on i, Line(D, I), j we get concurrent(i, j, Line(D, I))
By line_intersection_definition on E, Line(E, I), Line(E, G) we get E == line_intersection(Line(E, G), Line(E, I))
By perpendicular_line_definition on C, Line(C, D), altitude(E, C, D) we get Line(C, D) == perpendicular_line(C, altitude(E, C, D))
By line_intersection_definition on E, Line(E, G), Line(E, F) we get E == line_intersection(Line(E, F), Line(E, G))
By line_intersection_definition on D, Line(C, D), Line(D, E) we get D == line_intersection(Line(C, D), Line(D, E))
By line_unique_intersection_v0 on Line(D, F), h, F, orthocenter(D, F, H) we get F == orthocenter(D, F, H)
By concurrent_sufficient_conditions on Line(D, G), Line(E, G), f we get concurrent(f, Line(D, G), Line(E, G))
By concurrent_sufficient_conditions on Line(E, G), Line(D, G), k we get concurrent(k, Line(D, G), Line(E, G))
By line_intersection_definition on D, Line(D, I), i we get D == line_intersection(i, Line(D, I))
By perpendicular_line_definition on A, i, altitude(G, A, D) we get i == perpendicular_line(A, altitude(G, A, D))
By concurrent_sufficient_conditions on Line(D, I), Line(E, I), k we get concurrent(k, Line(D, I), Line(E, I))
By concurrent_sufficient_conditions on Line(D, E), Line(E, F), g we get concurrent(g, Line(D, E), Line(E, F))
By line_intersection_definition on F, Line(E, F), Line(F, I) we get F == line_intersection(Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(F, G), Line(D, G), k we get concurrent(k, Line(D, G), Line(F, G))
By concurrent_sufficient_conditions on Line(C, D), Line(D, I), j we get concurrent(j, Line(C, D), Line(D, I))
By line_unique_intersection_v0 on Line(D, F), h, orthocenter(A, D, F), orthocenter(D, F, J) we get orthocenter(A, D, F) == orthocenter(D, F, J)
By concurrent_sufficient_conditions on Line(D, G), Line(D, I), j we get concurrent(j, Line(D, G), Line(D, I))
By perpendicular_line_definition on C, Line(C, D), altitude(F, C, D) we get Line(C, D) == perpendicular_line(C, altitude(F, C, D))
By concurrent_sufficient_conditions on Line(D, E), Line(E, J), g we get concurrent(g, Line(D, E), Line(E, J))
By perpendicular_line_definition on H, j, altitude(G, B, D) we get j == perpendicular_line(H, altitude(G, B, D))
By line_intersection_definition on E, Line(E, I), Line(E, F) we get E == line_intersection(Line(E, F), Line(E, I))
By perpendicular_line_definition on D, Line(D, J), altitude(F, D, J) we get Line(D, J) == perpendicular_line(D, altitude(F, D, J))
By line_intersection_definition on F, Line(D, F), Line(F, I) we get F == line_intersection(Line(D, F), Line(F, I))
By line_intersection_definition on D, Line(D, J), Line(C, D) we get D == line_intersection(Line(C, D), Line(D, J))
By concurrent_sufficient_conditions on Line(E, J), Line(E, F), g we get concurrent(g, Line(E, F), Line(E, J))
By concurrent_sufficient_conditions on Line(D, G), Line(C, D), j we get concurrent(j, Line(C, D), Line(D, G))
By perpendicular_line_definition on B, j, altitude(E, B, D) we get j == perpendicular_line(B, altitude(E, B, D))
By concurrent_sufficient_conditions on Line(D, J), Line(C, D), i we get concurrent(i, Line(C, D), Line(D, J))
By line_intersection_definition on I, Line(E, I), Line(F, I) we get I == line_intersection(Line(E, I), Line(F, I))
By line_intersection_definition on D, i, Line(D, E) we get D == line_intersection(i, Line(D, E))
By line_intersection_definition on D, Line(C, D), Line(D, I) we get D == line_intersection(Line(C, D), Line(D, I))
By concurrent_sufficient_conditions on Line(E, F), Line(D, F), h we get concurrent(h, Line(D, F), Line(E, F))
By line_unique_intersection_v0 on Line(D, E), g, orthocenter(C, D, E), orthocenter(B, D, E) we get orthocenter(B, D, E) == orthocenter(C, D, E)
By concurrent_sufficient_conditions on Line(E, G), Line(D, G), f we get concurrent(f, Line(D, G), Line(E, G))
By concurrent_sufficient_conditions on Line(F, I), Line(F, G), h we get concurrent(h, Line(F, G), Line(F, I))
By perpendicular_line_definition on orthocenter(B, D, E), g, Line(D, E) we get g == perpendicular_line(orthocenter(B, D, E), Line(D, E))
By concurrent_sufficient_conditions on Line(D, F), Line(C, D), j we get concurrent(j, Line(C, D), Line(D, F))
By line_intersection_definition on I, Line(F, I), Line(D, I) we get I == line_intersection(Line(D, I), Line(F, I))
By perpendicular_line_definition on D, Line(C, D), altitude(E, C, D) we get Line(C, D) == perpendicular_line(D, altitude(E, C, D))
By line_intersection_definition on D, Line(D, I), Line(D, G) we get D == line_intersection(Line(D, G), Line(D, I))
By concurrent_sufficient_conditions on Line(D, F), Line(C, D), i we get concurrent(i, Line(C, D), Line(D, F))
By line_intersection_definition on I, Line(E, I), Line(I, J) we get I == line_intersection(Line(E, I), Line(I, J))
By concurrent_sufficient_conditions on Line(I, J), Line(E, J), h we get concurrent(h, Line(E, J), Line(I, J))
By line_intersection_definition on D, Line(D, E), Line(D, J) we get D == line_intersection(Line(D, E), Line(D, J))
By perpendicular_line_definition on orthocenter(D, F, H), altitude(F, D, H), j we get altitude(F, D, H) == perpendicular_line(orthocenter(D, F, H), j)
By concurrent_sufficient_conditions on Line(E, F), Line(E, J), g we get concurrent(g, Line(E, F), Line(E, J))
By concurrent_sufficient_conditions on Line(F, I), Line(D, F), h we get concurrent(h, Line(D, F), Line(F, I))
By perpendicular_line_definition on H, j, altitude(F, D, H) we get j == perpendicular_line(H, altitude(F, D, H))
By concurrent_sufficient_conditions on Line(E, I), Line(I, J), k we get concurrent(k, Line(E, I), Line(I, J))
By perpendicular_line_definition on orthocenter(D, F, J), h, Line(D, F) we get h == perpendicular_line(orthocenter(D, F, J), Line(D, F))
By concurrent_sufficient_conditions on Line(E, J), Line(D, E), g we get concurrent(g, Line(D, E), Line(E, J))
By concurrent_sufficient_conditions on Line(D, F), Line(D, I), j we get concurrent(j, Line(D, F), Line(D, I))
By concurrent_sufficient_conditions on Line(D, J), Line(D, I), j we get concurrent(j, Line(D, I), Line(D, J))
By concurrent_sufficient_conditions on Line(D, E), Line(D, I), j we get concurrent(j, Line(D, E), Line(D, I))
By line_intersection_definition on E, Line(E, G), Line(E, J) we get E == line_intersection(Line(E, G), Line(E, J))
By line_intersection_definition on F, Line(F, G), Line(E, F) we get F == line_intersection(Line(E, F), Line(F, G))
By concurrent_sufficient_conditions on Line(C, D), Line(D, G), j we get concurrent(j, Line(C, D), Line(D, G))
By concurrent_sufficient_conditions on Line(D, J), Line(D, F), j we get concurrent(j, Line(D, F), Line(D, J))
By concurrent_sufficient_conditions on Line(E, I), Line(D, I), k we get concurrent(k, Line(D, I), Line(E, I))
By concurrent_sufficient_conditions on Line(F, G), Line(D, F), h we get concurrent(h, Line(D, F), Line(F, G))
By concurrent_sufficient_conditions on Line(E, J), Line(I, J), h we get concurrent(h, Line(E, J), Line(I, J))
By perpendicular_line_definition on orthocenter(D, F, J), Line(D, F), h we get Line(D, F) == perpendicular_line(orthocenter(D, F, J), h)
By perpendicular_line_definition on orthocenter(B, D, G), Line(D, G), f we get Line(D, G) == perpendicular_line(orthocenter(B, D, G), f)
By concurrent_sufficient_conditions on Line(D, G), Line(E, G), k we get concurrent(k, Line(D, G), Line(E, G))
By concurrent_sufficient_conditions on Line(D, E), Line(D, G), j we get concurrent(j, Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(D, I), Line(D, G), j we get concurrent(j, Line(D, G), Line(D, I))
By concurrent_sufficient_conditions on Line(F, I), Line(E, I), k we get concurrent(k, Line(E, I), Line(F, I))
By perpendicular_line_definition on orthocenter(C, D, E), g, Line(D, E) we get g == perpendicular_line(orthocenter(C, D, E), Line(D, E))
By line_intersection_definition on I, Line(E, I), Line(D, I) we get I == line_intersection(Line(D, I), Line(E, I))
By line_intersection_definition on D, Line(D, E), Line(D, F) we get D == line_intersection(Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(E, I), Line(D, E), g we get concurrent(g, Line(D, E), Line(E, I))
By line_intersection_definition on D, Line(D, G), Line(D, E) we get D == line_intersection(Line(D, E), Line(D, G))
By concurrent_sufficient_conditions on Line(E, I), Line(E, G), g we get concurrent(g, Line(E, G), Line(E, I))
By concurrent_sufficient_conditions on Line(E, I), Line(E, F), g we get concurrent(g, Line(E, F), Line(E, I))
By concurrent_sufficient_conditions on Line(F, G), Line(D, G), f we get concurrent(f, Line(D, G), Line(F, G))
By concurrent_sufficient_conditions on Line(D, F), Line(D, G), j we get concurrent(j, Line(D, F), Line(D, G))
By line_intersection_definition on F, Line(F, I), Line(F, G) we get F == line_intersection(Line(F, G), Line(F, I))
By concurrent_sufficient_conditions on Line(F, I), Line(I, J), k we get concurrent(k, Line(F, I), Line(I, J))
By perpendicular_line_definition on orthocenter(B, D, E), altitude(E, B, D), j we get altitude(E, B, D) == perpendicular_line(orthocenter(B, D, E), j)
By perpendicular_line_definition on D, j, altitude(E, B, D) we get j == perpendicular_line(D, altitude(E, B, D))
By concurrent_sufficient_conditions on Line(D, F), Line(E, F), h we get concurrent(h, Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(D, J), Line(C, D), j we get concurrent(j, Line(C, D), Line(D, J))
By concurrent_sufficient_conditions on Line(D, I), Line(D, F), j we get concurrent(j, Line(D, F), Line(D, I))
By line_intersection_definition on D, Line(C, D), Line(D, G) we get D == line_intersection(Line(C, D), Line(D, G))
By concurrent_sufficient_conditions on Line(F, G), Line(E, G), f we get concurrent(f, Line(E, G), Line(F, G))
By perpendicular_line_definition on orthocenter(A, D, F), Line(D, F), h we get Line(D, F) == perpendicular_line(orthocenter(A, D, F), h)
By concurrent_sufficient_conditions on Line(D, E), Line(D, J), j we get concurrent(j, Line(D, E), Line(D, J))
By concurrent_sufficient_conditions on Line(D, G), Line(F, G), k we get concurrent(k, Line(D, G), Line(F, G))
By concurrent_sufficient_conditions on Line(D, E), Line(E, G), g we get concurrent(g, Line(D, E), Line(E, G))
By concurrent_sufficient_conditions on Line(I, J), Line(D, J), h we get concurrent(h, Line(D, J), Line(I, J))
By concurrent_sufficient_conditions on Line(D, G), Line(D, F), i we get concurrent(i, Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(F, I), Line(E, F), h we get concurrent(h, Line(E, F), Line(F, I))
By concurrent_sufficient_conditions on Line(D, G), Line(D, J), j we get concurrent(j, Line(D, G), Line(D, J))
By concurrent_sufficient_conditions on Line(D, F), Line(D, J), j we get concurrent(j, Line(D, F), Line(D, J))
By concurrent_sufficient_conditions on Line(E, F), Line(E, G), g we get concurrent(g, Line(E, F), Line(E, G))
By perpendicular_line_definition on orthocenter(B, D, E), Line(D, E), g we get Line(D, E) == perpendicular_line(orthocenter(B, D, E), g)
By perpendicular_line_definition on orthocenter(B, D, G), f, Line(D, G) we get f == perpendicular_line(orthocenter(B, D, G), Line(D, G))
By concurrent_sufficient_conditions on Line(E, J), Line(E, I), g we get concurrent(g, Line(E, I), Line(E, J))
By perpendicular_line_definition on B, j, altitude(G, B, D) we get j == perpendicular_line(B, altitude(G, B, D))
By concurrent_sufficient_conditions on Line(I, J), Line(E, I), k we get concurrent(k, Line(E, I), Line(I, J))
By concurrent_sufficient_conditions on Line(D, I), Line(C, D), j we get concurrent(j, Line(C, D), Line(D, I))
By concurrent_sufficient_conditions on Line(D, F), Line(F, I), h we get concurrent(h, Line(D, F), Line(F, I))
By concurrent_sufficient_conditions on i, Line(D, E), j we get concurrent(i, j, Line(D, E))
By concurrent_sufficient_conditions on Line(E, I), Line(E, J), g we get concurrent(g, Line(E, I), Line(E, J))
By perpendicular_line_definition on H, j, altitude(E, B, D) we get j == perpendicular_line(H, altitude(E, B, D))
By perpendicular_line_definition on orthocenter(D, F, H), h, Line(D, F) we get h == perpendicular_line(orthocenter(D, F, H), Line(D, F))
By concurrent_sufficient_conditions on Line(D, G), Line(D, F), j we get concurrent(j, Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(I, J), Line(D, I), k we get concurrent(k, Line(D, I), Line(I, J))
By perpendicular_line_definition on orthocenter(A, D, G), altitude(G, A, D), i we get altitude(G, A, D) == perpendicular_line(orthocenter(A, D, G), i)
By perpendicular_line_definition on B, j, altitude(F, D, H) we get j == perpendicular_line(B, altitude(F, D, H))
By line_unique_intersection_v0 on h, Line(D, F), F, orthocenter(A, D, F) we get F == orthocenter(A, D, F)
By line_unique_intersection_v0 on Line(D, G), f, orthocenter(B, D, G), G we get G == orthocenter(B, D, G)
By line_unique_intersection_v0 on h, Line(D, F), orthocenter(A, D, F), orthocenter(D, F, H) we get orthocenter(A, D, F) == orthocenter(D, F, H)
By line_unique_intersection_v0 on f, Line(D, G), orthocenter(A, D, G), orthocenter(B, D, G) we get orthocenter(A, D, G) == orthocenter(B, D, G)
By line_unique_intersection_v0 on Line(D, F), h, F, orthocenter(D, F, J) we get F == orthocenter(D, F, J)
By line_unique_intersection_v0 on f, Line(D, G), orthocenter(A, D, G), G we get G == orthocenter(A, D, G)
By line_unique_intersection_v0 on g, Line(D, E), E, orthocenter(B, D, E) we get E == orthocenter(B, D, E)
By line_unique_intersection_v0 on Line(D, F), h, orthocenter(A, D, F), orthocenter(C, D, F) we get orthocenter(A, D, F) == orthocenter(C, D, F)
By line_unique_intersection_v0 on g, Line(D, E), orthocenter(C, D, E), E we get E == orthocenter(C, D, E)
By line_unique_intersection_v0 on h, Line(D, F), orthocenter(C, D, F), orthocenter(D, F, H) we get orthocenter(C, D, F) == orthocenter(D, F, H)
By line_unique_intersection_v0 on h, Line(D, F), orthocenter(C, D, F), F we get F == orthocenter(C, D, F)
By line_unique_intersection_v0 on h, Line(D, F), orthocenter(C, D, F), orthocenter(D, F, J) we get orthocenter(C, D, F) == orthocenter(D, F, J)
By line_unique_intersection_v0 on h, Line(D, F), orthocenter(D, F, J), orthocenter(D, F, H) we get orthocenter(D, F, H) == orthocenter(D, F, J)
By different_points_v1 on D, center(d) we get 0 != distance(D, center(d))
By different_points_v1 on center(c), E we get 0 != distance(E, center(c))
By different_points_v1 on I, center(c) we get 0 != distance(I, center(c))
By different_points_v1 on F, center(c) we get 0 != distance(F, center(c))
By different_points_v1 on center(d), J we get 0 != distance(J, center(d))
By different_points_v1 on G, center(c) we get 0 != distance(G, center(c))
By different_points_v1 on center(d), I we get 0 != distance(I, center(d))
By different_points_v1 on center(d), E we get 0 != distance(E, center(d))
By in_imply_collinear on orthocenter(D, F, H), H, J we get collinear(H, J, orthocenter(D, F, H))
By in_imply_collinear on orthocenter(A, D, F), H, A we get collinear(A, H, orthocenter(A, D, F))
By in_imply_collinear on orthocenter(A, D, F), H, J we get collinear(H, J, orthocenter(A, D, F))
By in_imply_collinear on orthocenter(B, D, E), B, C we get collinear(B, C, orthocenter(B, D, E))
By in_imply_collinear on orthocenter(C, D, E), E, D we get collinear(D, E, orthocenter(C, D, E))
By in_imply_collinear on orthocenter(A, D, F), J, C we get collinear(C, J, orthocenter(A, D, F))
By in_imply_collinear on orthocenter(D, F, H), J, F we get collinear(F, J, orthocenter(D, F, H))
By in_imply_collinear on orthocenter(D, F, J), F, D we get collinear(D, F, orthocenter(D, F, J))
By in_imply_collinear on orthocenter(C, D, E), B, E we get collinear(B, E, orthocenter(C, D, E))
By in_imply_collinear on orthocenter(C, D, F), J, H we get collinear(H, J, orthocenter(C, D, F))
By in_imply_collinear on orthocenter(C, D, F), A, J we get collinear(A, J, orthocenter(C, D, F))
By in_imply_collinear on orthocenter(D, F, J), H, C we get collinear(C, H, orthocenter(D, F, J))
By line_containment_inequality on orthocenter(A, D, G), C, f we get C != orthocenter(A, D, G)
By in_imply_collinear on orthocenter(B, D, E), B, E we get collinear(B, E, orthocenter(B, D, E))
By in_imply_collinear on orthocenter(A, D, F), H, C we get collinear(C, H, orthocenter(A, D, F))
By in_imply_collinear on orthocenter(C, D, E), E, C we get collinear(C, E, orthocenter(C, D, E))
By in_imply_collinear on orthocenter(A, D, G), D, G we get collinear(D, G, orthocenter(A, D, G))
By double_perpendicular_and_parallel_v0 on altitude(G, B, D), j, altitude(E, B, D) we get parallel(altitude(E, B, D), altitude(G, B, D))
By line_containment_inequality on orthocenter(D, F, H), B, Line(D, F) we get B != orthocenter(D, F, H)
By in_imply_collinear on orthocenter(A, D, F), J, A we get collinear(A, J, orthocenter(A, D, F))
By in_imply_collinear on orthocenter(D, F, J), C, J we get collinear(C, J, orthocenter(D, F, J))
By in_imply_collinear on orthocenter(D, F, H), H, F we get collinear(F, H, orthocenter(D, F, H))
By line_inequality on Line(I, center(c)), Line(D, G), I we get Line(D, G) != Line(I, center(c))
By in_imply_collinear on orthocenter(C, D, F), F, H we get collinear(F, H, orthocenter(C, D, F))
By in_imply_collinear on orthocenter(A, D, G), G, A we get collinear(A, G, orthocenter(A, D, G))
By in_imply_collinear on orthocenter(D, F, J), A, F we get collinear(A, F, orthocenter(D, F, J))
By double_perpendicular_and_parallel_v0 on altitude(F, D, H), j, altitude(G, B, D) we get parallel(altitude(F, D, H), altitude(G, B, D))
By in_imply_collinear on orthocenter(A, D, F), H, F we get collinear(F, H, orthocenter(A, D, F))
By in_imply_collinear on orthocenter(B, D, E), D, E we get collinear(D, E, orthocenter(B, D, E))
By in_imply_collinear on orthocenter(D, F, J), C, A we get collinear(A, C, orthocenter(D, F, J))
By in_imply_collinear on orthocenter(B, D, G), D, G we get collinear(D, G, orthocenter(B, D, G))
By in_imply_collinear on orthocenter(B, D, E), E, C we get collinear(C, E, orthocenter(B, D, E))
By in_imply_collinear on orthocenter(C, D, F), F, D we get collinear(D, F, orthocenter(C, D, F))
By in_imply_collinear on orthocenter(A, D, G), A, B we get collinear(A, B, orthocenter(A, D, G))
By in_imply_collinear on orthocenter(A, D, F), A, C we get collinear(A, C, orthocenter(A, D, F))
By in_imply_collinear on orthocenter(D, F, J), C, F we get collinear(C, F, orthocenter(D, F, J))
By in_imply_collinear on orthocenter(B, D, G), A, G we get collinear(A, G, orthocenter(B, D, G))
By in_imply_collinear on orthocenter(A, D, G), B, G we get collinear(B, G, orthocenter(A, D, G))
By in_imply_collinear on orthocenter(B, D, G), B, G we get collinear(B, G, orthocenter(B, D, G))
By in_imply_collinear on orthocenter(C, D, F), A, C we get collinear(A, C, orthocenter(C, D, F))
By in_imply_collinear on orthocenter(C, D, F), C, H we get collinear(C, H, orthocenter(C, D, F))
By in_imply_collinear on orthocenter(D, F, H), F, D we get collinear(D, F, orthocenter(D, F, H))
By in_imply_collinear on orthocenter(D, F, J), H, J we get collinear(H, J, orthocenter(D, F, J))
By in_imply_collinear on orthocenter(C, D, F), H, A we get collinear(A, H, orthocenter(C, D, F))
By in_imply_collinear on orthocenter(D, F, H), C, F we get collinear(C, F, orthocenter(D, F, H))
By in_imply_collinear on orthocenter(D, F, H), C, H we get collinear(C, H, orthocenter(D, F, H))
By in_imply_collinear on orthocenter(B, D, G), A, B we get collinear(A, B, orthocenter(B, D, G))
By in_imply_collinear on orthocenter(D, F, J), F, J we get collinear(F, J, orthocenter(D, F, J))
By reverse_direction on C, D we get 180 == direction(C, D) - direction(D, C) mod 360
By in_imply_collinear on orthocenter(D, F, H), C, A we get collinear(A, C, orthocenter(D, F, H))
By line_containment_inequality on orthocenter(D, F, H), E, h we get E != orthocenter(D, F, H)
By in_imply_collinear on orthocenter(C, D, F), C, F we get collinear(C, F, orthocenter(C, D, F))
By in_imply_collinear on orthocenter(D, F, J), H, A we get collinear(A, H, orthocenter(D, F, J))
By in_imply_collinear on orthocenter(D, F, J), A, J we get collinear(A, J, orthocenter(D, F, J))
By in_imply_collinear on orthocenter(A, D, F), F, J we get collinear(F, J, orthocenter(A, D, F))
By directions_draw_angle on A, D, E we get exists(angle(A, D, E))
By in_imply_collinear on orthocenter(D, F, H), C, J we get collinear(C, J, orthocenter(D, F, H))
By in_imply_collinear on orthocenter(D, F, J), F, H we get collinear(F, H, orthocenter(D, F, J))
By in_imply_collinear on orthocenter(D, F, H), J, A we get collinear(A, J, orthocenter(D, F, H))
By in_imply_collinear on orthocenter(D, F, H), F, A we get collinear(A, F, orthocenter(D, F, H))
By in_imply_collinear on orthocenter(A, D, F), F, A we get collinear(A, F, orthocenter(A, D, F))
By in_imply_collinear on orthocenter(A, D, F), F, D we get collinear(D, F, orthocenter(A, D, F))
By in_imply_collinear on orthocenter(C, D, E), B, C we get collinear(B, C, orthocenter(C, D, E))
By in_imply_collinear on orthocenter(A, D, F), F, C we get collinear(C, F, orthocenter(A, D, F))
By in_imply_collinear on orthocenter(C, D, F), C, J we get collinear(C, J, orthocenter(C, D, F))
By in_imply_collinear on orthocenter(D, F, H), H, A we get collinear(A, H, orthocenter(D, F, H))
By double_perpendicular_and_parallel_v0 on altitude(F, D, H), j, altitude(E, B, D) we get parallel(altitude(E, B, D), altitude(F, D, H))
By in_imply_collinear on orthocenter(C, D, F), A, F we get collinear(A, F, orthocenter(C, D, F))
By in_imply_collinear on orthocenter(C, D, F), F, J we get collinear(F, J, orthocenter(C, D, F))
By line_inequality on altitude(E, B, D), j, E we get j != altitude(E, B, D)
By double_perpendicular_and_parallel_v0 on altitude(F, A, D), i, altitude(G, A, D) we get parallel(altitude(F, A, D), altitude(G, A, D))
By anti_congruence_from_anti_similar_triangles on D, B, G, D, B, E we get anti_congruent_triangles(B, D, E, B, D, G)
By anti_congruence_from_anti_similar_triangles on A, D, F, A, D, G we get anti_congruent_triangles(A, D, F, A, D, G)
By line_inequality on Line(E, center(c)), i, E we get i != Line(E, center(c))
By line_inequality on altitude(E, B, D), i, E we get i != altitude(E, B, D)
By asa_anti_congruence on D, B, E, D, B, G we get anti_congruent_triangles(B, D, E, B, D, G)
By line_inequality on altitude(E, B, D), Line(F, G), E we get Line(F, G) != altitude(E, B, D)
By asa_anti_congruence on D, A, F, D, A, G we get anti_congruent_triangles(A, D, F, A, D, G)
By line_inequality on Line(G, center(c)), Line(E, I), G we get Line(E, I) != Line(G, center(c))
By line_inequality on altitude(G, A, D), j, G we get j != altitude(G, A, D)
By line_inequality on Line(F, center(c)), Line(D, J), F we get Line(D, J) != Line(F, center(c))
By line_inequality on Line(F, center(c)), g, F we get g != Line(F, center(c))
By anti_congruence_from_anti_similar_triangles on A, D, G, A, D, F we get anti_congruent_triangles(A, D, F, A, D, G)
By line_containment_inequality on orthocenter(D, F, H), J, Line(D, F) we get J != orthocenter(D, F, H)
By line_inequality on Line(J, center(d)), Line(E, G), J we get Line(E, G) != Line(J, center(d))
By line_inequality on Line(E, center(d)), Line(D, J), E we get Line(D, J) != Line(E, center(d))
By line_inequality on altitude(G, B, D), Line(D, F), G we get Line(D, F) != altitude(G, B, D)
By asa_anti_congruence on A, D, G, A, D, F we get anti_congruent_triangles(A, D, F, A, D, G)
By line_containment_inequality on orthocenter(D, F, H), C, Line(D, F) we get C != orthocenter(D, F, H)
By line_inequality on Line(E, center(d)), Line(D, F), E we get Line(D, F) != Line(E, center(d))
By line_inequality on Line(E, center(d)), i, E we get i != Line(E, center(d))
By anti_congruence_from_anti_similar_triangles on D, A, G, D, A, F we get anti_congruent_triangles(A, D, F, A, D, G)
By line_containment_inequality on orthocenter(B, D, G), C, Line(D, G) we get C != orthocenter(B, D, G)
By asa_anti_congruence on A, D, F, A, D, G we get anti_congruent_triangles(A, D, F, A, D, G)
By line_inequality on Line(I, center(c)), Line(F, G), I we get Line(F, G) != Line(I, center(c))
By line_inequality on altitude(G, A, D), i, G we get i != altitude(G, A, D)
By line_inequality on Line(I, center(d)), Line(E, G), I we get Line(E, G) != Line(I, center(d))
By line_inequality on Line(E, center(d)), Line(D, I), E we get Line(D, I) != Line(E, center(d))
By asa_anti_congruence on D, A, G, D, A, F we get anti_congruent_triangles(A, D, F, A, D, G)
By line_containment_inequality on orthocenter(D, F, J), D, h we get D != orthocenter(D, F, J)
By line_inequality on altitude(G, A, D), Line(D, J), G we get Line(D, J) != altitude(G, A, D)
By directions_draw_angle on F, D, C we get exists(angle(F, D, C))
By directions_draw_angle on C, D, F we get exists(angle(C, D, F))
By double_perpendicular_and_parallel_v0 on altitude(E, C, D), Line(C, D), altitude(F, C, D) we get parallel(altitude(E, C, D), altitude(F, C, D))
By line_inequality on Line(I, center(d)), Line(D, G), I we get Line(D, G) != Line(I, center(d))
By line_inequality on altitude(F, A, D), Line(D, E), F we get Line(D, E) != altitude(F, A, D)
By line_inequality on altitude(F, A, D), Line(E, G), F we get Line(E, G) != altitude(F, A, D)
By line_containment_inequality on orthocenter(D, F, J), E, h we get E != orthocenter(D, F, J)
By directions_draw_angle on J, D, C we get exists(angle(J, D, C))
By line_containment_inequality on orthocenter(C, D, F), J, Line(D, F) we get J != orthocenter(C, D, F)
By directions_draw_angle on A, D, C we get exists(angle(A, D, C))
By line_inequality on Line(I, center(d)), f, I we get f != Line(I, center(d))
By line_containment_inequality on orthocenter(D, F, H), D, h we get D != orthocenter(D, F, H)
By line_inequality on altitude(F, C, D), Line(D, G), F we get Line(D, G) != altitude(F, C, D)
By aa_anti_similarity on D, C, E, D, C, F we get anti_similar_triangles(C, D, E, C, D, F)
By directions_draw_angle on J, D, A we get exists(angle(J, D, A))
By anti_congruence_from_anti_similar_triangles on B, D, G, B, D, E we get anti_congruent_triangles(B, D, E, B, D, G)
By aa_anti_similarity on D, E, C, D, F, C we get anti_similar_triangles(C, D, E, C, D, F)
By reverse_direction on D, C we get 180 == direction(D, C) - direction(C, D) mod 360
By line_inequality on Line(D, center(d)), f, D we get f != Line(D, center(d))
By line_inequality on altitude(E, C, D), Line(D, I), E we get Line(D, I) != altitude(E, C, D)
By line_containment_inequality on orthocenter(A, D, G), I, Line(D, G) we get I != orthocenter(A, D, G)
By line_inequality on Line(J, center(d)), Line(E, I), J we get Line(E, I) != Line(J, center(d))
By line_inequality on altitude(E, C, D), h, E we get h != altitude(E, C, D)
By line_inequality on Line(E, center(c)), Line(D, J), E we get Line(D, J) != Line(E, center(c))
By line_inequality on Line(I, center(d)), g, I we get g != Line(I, center(d))
By aa_anti_similarity on D, F, C, D, E, C we get anti_similar_triangles(C, D, E, C, D, F)
By line_containment_inequality on orthocenter(A, D, F), A, Line(D, F) we get A != orthocenter(A, D, F)
By line_inequality on altitude(E, B, D), Line(D, F), E we get Line(D, F) != altitude(E, B, D)
By line_containment_inequality on orthocenter(B, D, E), I, Line(D, E) we get I != orthocenter(B, D, E)
By line_inequality on altitude(G, A, D), Line(E, J), G we get Line(E, J) != altitude(G, A, D)
By line_containment_inequality on orthocenter(D, F, H), G, h we get G != orthocenter(D, F, H)
By line_inequality on Line(E, center(d)), Line(C, D), E we get Line(C, D) != Line(E, center(d))
By line_containment_inequality on orthocenter(A, D, F), D, h we get D != orthocenter(A, D, F)
By line_inequality on altitude(E, C, D), f, E we get f != altitude(E, C, D)
By line_containment_inequality on orthocenter(A, D, F), I, h we get I != orthocenter(A, D, F)
By line_inequality on Line(E, center(c)), Line(I, J), E we get Line(I, J) != Line(E, center(c))
By line_containment_inequality on orthocenter(C, D, E), A, Line(D, E) we get A != orthocenter(C, D, E)
By line_inequality on altitude(F, D, H), Line(D, E), F we get Line(D, E) != altitude(F, D, H)
By anti_congruence_from_anti_similar_triangles on D, B, E, D, B, G we get anti_congruent_triangles(B, D, E, B, D, G)
By anti_congruence_from_anti_similar_triangles on B, D, E, B, D, G we get anti_congruent_triangles(B, D, E, B, D, G)
By line_inequality on Line(E, center(d)), Line(D, G), E we get Line(D, G) != Line(E, center(d))
By line_inequality on altitude(G, A, D), Line(D, F), G we get Line(D, F) != altitude(G, A, D)
By asa_anti_congruence on B, D, E, B, D, G we get anti_congruent_triangles(B, D, E, B, D, G)
By asa_anti_congruence on B, D, G, B, D, E we get anti_congruent_triangles(B, D, E, B, D, G)
By line_containment_inequality on orthocenter(C, D, E), H, g we get H != orthocenter(C, D, E)
By line_inequality on altitude(E, C, D), k, E we get k != altitude(E, C, D)
By line_inequality on Line(F, center(c)), i, F we get i != Line(F, center(c))
By line_containment_inequality on orthocenter(A, D, G), H, f we get H != orthocenter(A, D, G)
By directions_draw_angle on A, D, I we get exists(angle(A, D, I))
By aa_anti_similarity on D, C, F, D, C, E we get anti_similar_triangles(C, D, E, C, D, F)
By line_containment_inequality on orthocenter(B, D, G), H, Line(D, G) we get H != orthocenter(B, D, G)
By line_inequality on Line(I, center(c)), Line(E, J), I we get Line(E, J) != Line(I, center(c))
By line_containment_inequality on orthocenter(C, D, E), G, Line(D, E) we get G != orthocenter(C, D, E)
By line_inequality on altitude(E, B, D), Line(C, D), E we get Line(C, D) != altitude(E, B, D)
By anti_congruence_from_anti_similar_triangles on D, A, F, D, A, G we get anti_congruent_triangles(A, D, F, A, D, G)
By line_inequality on altitude(G, B, D), i, G we get i != altitude(G, B, D)
By asa_anti_congruence on D, B, G, D, B, E we get anti_congruent_triangles(B, D, E, B, D, G)
By line_inequality on Line(I, center(c)), Line(D, F), I we get Line(D, F) != Line(I, center(c))
By line_inequality on Line(E, center(d)), h, E we get h != Line(E, center(d))
By line_inequality on Line(F, center(c)), f, F we get f != Line(F, center(c))
By directions_draw_angle on C, D, I we get exists(angle(C, D, I))
By line_containment_inequality on orthocenter(C, D, E), F, Line(D, E) we get F != orthocenter(C, D, E)
By line_inequality on altitude(F, D, J), Line(I, J), F we get Line(I, J) != altitude(F, D, J)
By line_inequality on Line(G, center(c)), Line(D, E), G we get Line(D, E) != Line(G, center(c))
By line_inequality on Line(D, center(d)), h, D we get h != Line(D, center(d))
By line_inequality on Line(I, center(d)), Line(D, F), I we get Line(D, F) != Line(I, center(d))
By line_containment_inequality on orthocenter(C, D, F), G, h we get G != orthocenter(C, D, F)
By line_inequality on altitude(F, D, H), Line(E, I), F we get Line(E, I) != altitude(F, D, H)
By directions_draw_angle on G, D, C we get exists(angle(G, D, C))
By line_inequality on altitude(F, A, D), g, F we get g != altitude(F, A, D)
By line_containment_inequality on orthocenter(C, D, F), C, Line(D, F) we get C != orthocenter(C, D, F)
By line_inequality on altitude(F, A, D), j, F we get j != altitude(F, A, D)
By line_inequality on Line(E, center(d)), j, E we get j != Line(E, center(d))
By line_inequality on altitude(E, B, D), Line(I, J), E we get Line(I, J) != altitude(E, B, D)
By line_inequality on Line(J, center(d)), Line(F, I), J we get Line(F, I) != Line(J, center(d))
By line_inequality on altitude(G, A, D), Line(C, D), G we get Line(C, D) != altitude(G, A, D)
By directions_draw_angle on C, D, A we get exists(angle(C, D, A))
By line_containment_inequality on orthocenter(D, F, H), H, Line(D, F) we get H != orthocenter(D, F, H)
By line_inequality on Line(E, center(c)), Line(C, D), E we get Line(C, D) != Line(E, center(c))
By line_inequality on Line(E, center(c)), k, E we get k != Line(E, center(c))
By line_inequality on altitude(F, D, H), f, F we get f != altitude(F, D, H)
By line_inequality on Line(I, center(d)), i, I we get i != Line(I, center(d))
By line_inequality on Line(G, center(c)), Line(F, I), G we get Line(F, I) != Line(G, center(c))
By directions_draw_angle on A, D, J we get exists(angle(A, D, J))
By line_containment_inequality on orthocenter(C, D, F), I, Line(D, F) we get I != orthocenter(C, D, F)
By line_inequality on Line(F, center(c)), Line(D, I), F we get Line(D, I) != Line(F, center(c))
By line_containment_inequality on orthocenter(B, D, E), C, Line(D, E) we get C != orthocenter(B, D, E)
By line_inequality on Line(J, center(d)), Line(D, G), J we get Line(D, G) != Line(J, center(d))
By line_inequality on altitude(F, C, D), Line(C, D), F we get Line(C, D) != altitude(F, C, D)
By line_inequality on Line(I, center(c)), Line(E, G), I we get Line(E, G) != Line(I, center(c))
By line_containment_inequality on orthocenter(B, D, G), J, f we get J != orthocenter(B, D, G)
By line_inequality on Line(I, center(c)), Line(E, F), I we get Line(E, F) != Line(I, center(c))
By line_inequality on Line(I, center(c)), f, I we get f != Line(I, center(c))
By line_inequality on altitude(G, A, D), h, G we get h != altitude(G, A, D)
By line_inequality on altitude(F, A, D), k, F we get k != altitude(F, A, D)
By line_containment_inequality on orthocenter(A, D, F), H, Line(D, F) we get H != orthocenter(A, D, F)
By directions_draw_angle on C, D, G we get exists(angle(C, D, G))
By line_containment_inequality on orthocenter(B, D, E), H, Line(D, E) we get H != orthocenter(B, D, E)
By line_containment_inequality on orthocenter(B, D, G), A, Line(D, G) we get A != orthocenter(B, D, G)
By line_containment_inequality on orthocenter(B, D, E), F, g we get F != orthocenter(B, D, E)
By line_inequality on altitude(F, C, D), g, F we get g != altitude(F, C, D)
By line_inequality on Line(D, center(d)), Line(E, J), D we get Line(E, J) != Line(D, center(d))
By line_inequality on altitude(F, D, H), Line(E, G), F we get Line(E, G) != altitude(F, D, H)
By line_inequality on Line(I, center(c)), Line(C, D), I we get Line(C, D) != Line(I, center(c))
By line_containment_inequality on orthocenter(B, D, G), B, Line(D, G) we get B != orthocenter(B, D, G)
By line_containment_inequality on orthocenter(B, D, E), G, g we get G != orthocenter(B, D, E)
By line_containment_inequality on orthocenter(B, D, E), B, Line(D, E) we get B != orthocenter(B, D, E)
By line_containment_inequality on orthocenter(A, D, F), C, Line(D, F) we get C != orthocenter(A, D, F)
By line_inequality on altitude(E, C, D), Line(F, I), E we get Line(F, I) != altitude(E, C, D)
By line_inequality on Line(E, center(d)), Line(F, I), E we get Line(F, I) != Line(E, center(d))
By line_inequality on Line(D, center(d)), Line(E, F), D we get Line(E, F) != Line(D, center(d))
By line_inequality on Line(F, center(c)), Line(E, G), F we get Line(E, G) != Line(F, center(c))
By line_containment_inequality on orthocenter(D, F, J), A, Line(D, F) we get A != orthocenter(D, F, J)
By line_containment_inequality on orthocenter(A, D, G), E, Line(D, G) we get E != orthocenter(A, D, G)
By directions_draw_angle on E, D, C we get exists(angle(E, D, C))
By line_inequality on altitude(G, B, D), Line(D, E), G we get Line(D, E) != altitude(G, B, D)
By line_inequality on altitude(F, A, D), Line(E, J), F we get Line(E, J) != altitude(F, A, D)
By line_containment_inequality on orthocenter(B, D, E), A, g we get A != orthocenter(B, D, E)
By line_containment_inequality on orthocenter(C, D, E), C, Line(D, E) we get C != orthocenter(C, D, E)
By line_inequality on altitude(F, C, D), Line(D, J), F we get Line(D, J) != altitude(F, C, D)
By line_inequality on altitude(F, C, D), Line(E, G), F we get Line(E, G) != altitude(F, C, D)
By directions_draw_angle on I, D, C we get exists(angle(I, D, C))
By line_containment_inequality on orthocenter(B, D, G), E, f we get E != orthocenter(B, D, G)
By directions_draw_angle on C, D, E we get exists(angle(C, D, E))
By line_inequality on Line(E, center(c)), Line(F, G), E we get Line(F, G) != Line(E, center(c))
By line_inequality on altitude(G, B, D), h, G we get h != altitude(G, B, D)
By line_inequality on Line(I, center(c)), Line(D, J), I we get Line(D, J) != Line(I, center(c))
By line_inequality on Line(D, center(d)), Line(I, J), D we get Line(I, J) != Line(D, center(d))
By line_inequality on Line(J, center(d)), Line(D, I), J we get Line(D, I) != Line(J, center(d))
By line_inequality on Line(I, center(c)), j, I we get j != Line(I, center(c))
By line_inequality on Line(G, center(c)), Line(I, J), G we get Line(I, J) != Line(G, center(c))
By line_containment_inequality on orthocenter(D, F, J), I, Line(D, F) we get I != orthocenter(D, F, J)
By line_inequality on Line(G, center(c)), Line(E, F), G we get Line(E, F) != Line(G, center(c))
By line_inequality on Line(E, center(c)), Line(D, I), E we get Line(D, I) != Line(E, center(c))
By line_containment_inequality on orthocenter(B, D, G), F, f we get F != orthocenter(B, D, G)
By line_inequality on Line(E, center(c)), Line(F, I), E we get Line(F, I) != Line(E, center(c))
By directions_draw_angle on I, D, A we get exists(angle(I, D, A))
By line_inequality on altitude(E, C, D), Line(D, G), E we get Line(D, G) != altitude(E, C, D)
By line_containment_inequality on orthocenter(B, D, G), I, f we get I != orthocenter(B, D, G)
By line_containment_inequality on orthocenter(C, D, F), H, Line(D, F) we get H != orthocenter(C, D, F)
By line_inequality on altitude(F, D, H), Line(I, J), F we get Line(I, J) != altitude(F, D, H)
By line_inequality on altitude(F, C, D), Line(I, J), F we get Line(I, J) != altitude(F, C, D)
By line_inequality on altitude(F, C, D), i, F we get i != altitude(F, C, D)
By line_inequality on Line(J, center(d)), i, J we get i != Line(J, center(d))
By line_inequality on altitude(F, C, D), k, F we get k != altitude(F, C, D)
By line_inequality on altitude(F, D, J), Line(E, I), F we get Line(E, I) != altitude(F, D, J)
By line_containment_inequality on orthocenter(D, F, H), A, Line(D, F) we get A != orthocenter(D, F, H)
By line_inequality on Line(G, center(c)), Line(D, I), G we get Line(D, I) != Line(G, center(c))
By directions_draw_angle on E, D, A we get exists(angle(E, D, A))
By directions_draw_angle on C, D, J we get exists(angle(C, D, J))
By line_inequality on altitude(E, B, D), Line(D, J), E we get Line(D, J) != altitude(E, B, D)
By line_inequality on Line(J, center(d)), f, J we get f != Line(J, center(d))
By line_containment_inequality on orthocenter(D, F, J), C, Line(D, F) we get C != orthocenter(D, F, J)
By line_inequality on altitude(E, C, D), i, E we get i != altitude(E, C, D)
By line_containment_inequality on orthocenter(B, D, E), D, g we get D != orthocenter(B, D, E)
By line_inequality on Line(J, center(d)), j, J we get j != Line(J, center(d))
By line_inequality on altitude(F, A, D), i, F we get i != altitude(F, A, D)
By line_inequality on Line(I, center(c)), i, I we get i != Line(I, center(c))
By line_inequality on altitude(G, B, D), Line(C, D), G we get Line(C, D) != altitude(G, B, D)
By line_inequality on altitude(F, A, D), Line(D, J), F we get Line(D, J) != altitude(F, A, D)
By line_inequality on Line(F, center(c)), Line(D, E), F we get Line(D, E) != Line(F, center(c))
By line_inequality on altitude(F, D, H), Line(D, G), F we get Line(D, G) != altitude(F, D, H)
By line_containment_inequality on orthocenter(C, D, E), D, g we get D != orthocenter(C, D, E)
By line_inequality on altitude(E, B, D), Line(D, G), E we get Line(D, G) != altitude(E, B, D)
By line_inequality on altitude(F, D, J), Line(D, J), F we get Line(D, J) != altitude(F, D, J)
By line_containment_inequality on orthocenter(A, D, G), J, f we get J != orthocenter(A, D, G)
By line_inequality on Line(D, center(d)), Line(F, I), D we get Line(F, I) != Line(D, center(d))
By line_inequality on Line(I, center(d)), j, I we get j != Line(I, center(d))
By line_inequality on Line(I, center(d)), Line(C, D), I we get Line(C, D) != Line(I, center(d))
By line_inequality on altitude(F, D, J), i, F we get i != altitude(F, D, J)
By line_inequality on altitude(F, A, D), Line(C, D), F we get Line(C, D) != altitude(F, A, D)
By line_inequality on Line(I, center(d)), Line(D, E), I we get Line(D, E) != Line(I, center(d))
By line_inequality on Line(D, center(d)), Line(F, G), D we get Line(F, G) != Line(D, center(d))
By line_inequality on altitude(G, A, D), Line(D, I), G we get Line(D, I) != altitude(G, A, D)
By line_containment_inequality on orthocenter(A, D, F), E, Line(D, F) we get E != orthocenter(A, D, F)
By line_inequality on altitude(G, A, D), g, G we get g != altitude(G, A, D)
By line_containment_inequality on orthocenter(A, D, F), B, Line(D, F) we get B != orthocenter(A, D, F)
By line_containment_inequality on orthocenter(D, F, J), G, Line(D, F) we get G != orthocenter(D, F, J)
By line_containment_inequality on orthocenter(A, D, F), J, Line(D, F) we get J != orthocenter(A, D, F)
By line_inequality on Line(I, center(c)), g, I we get g != Line(I, center(c))
By line_inequality on altitude(F, D, J), Line(D, I), F we get Line(D, I) != altitude(F, D, J)
By line_inequality on Line(I, center(c)), h, I we get h != Line(I, center(c))
By line_containment_inequality on orthocenter(C, D, E), J, Line(D, E) we get J != orthocenter(C, D, E)
By line_inequality on altitude(G, B, D), Line(E, F), G we get Line(E, F) != altitude(G, B, D)
By line_inequality on altitude(F, D, J), g, F we get g != altitude(F, D, J)
By line_inequality on altitude(G, B, D), Line(F, I), G we get Line(F, I) != altitude(G, B, D)
By line_inequality on altitude(F, C, D), Line(E, I), F we get Line(E, I) != altitude(F, C, D)
By line_containment_inequality on orthocenter(A, D, G), F, f we get F != orthocenter(A, D, G)
By line_inequality on altitude(G, A, D), Line(I, J), G we get Line(I, J) != altitude(G, A, D)
By line_containment_inequality on orthocenter(C, D, E), I, Line(D, E) we get I != orthocenter(C, D, E)
By line_containment_inequality on orthocenter(A, D, F), G, h we get G != orthocenter(A, D, F)
By line_inequality on altitude(F, D, H), Line(E, J), F we get Line(E, J) != altitude(F, D, H)
By line_inequality on altitude(G, A, D), Line(D, E), G we get Line(D, E) != altitude(G, A, D)
By line_inequality on Line(F, center(c)), j, F we get j != Line(F, center(c))
By line_inequality on altitude(E, B, D), Line(F, I), E we get Line(F, I) != altitude(E, B, D)
By line_inequality on altitude(F, D, J), Line(D, E), F we get Line(D, E) != altitude(F, D, J)
By line_inequality on altitude(G, B, D), j, G we get j != altitude(G, B, D)
By line_inequality on altitude(F, D, J), j, F we get j != altitude(F, D, J)
By line_inequality on Line(G, center(c)), j, G we get j != Line(G, center(c))
By line_inequality on Line(I, center(d)), Line(F, G), I we get Line(F, G) != Line(I, center(d))
By line_inequality on Line(D, center(d)), Line(E, I), D we get Line(E, I) != Line(D, center(d))
By line_inequality on altitude(E, C, D), j, E we get j != altitude(E, C, D)
By line_containment_inequality on orthocenter(A, D, G), A, Line(D, G) we get A != orthocenter(A, D, G)
By line_inequality on altitude(G, A, D), Line(F, I), G we get Line(F, I) != altitude(G, A, D)
By line_inequality on altitude(E, B, D), Line(D, I), E we get Line(D, I) != altitude(E, B, D)
By line_inequality on altitude(G, B, D), Line(I, J), G we get Line(I, J) != altitude(G, B, D)
By line_inequality on altitude(F, D, J), Line(E, J), F we get Line(E, J) != altitude(F, D, J)
By line_containment_inequality on orthocenter(C, D, E), B, Line(D, E) we get B != orthocenter(C, D, E)
By line_containment_inequality on orthocenter(D, F, J), B, Line(D, F) we get B != orthocenter(D, F, J)
By line_inequality on altitude(F, C, D), Line(D, E), F we get Line(D, E) != altitude(F, C, D)
By line_inequality on altitude(F, C, D), Line(E, J), F we get Line(E, J) != altitude(F, C, D)
By line_inequality on Line(E, center(d)), f, E we get f != Line(E, center(d))
By line_inequality on altitude(F, D, H), Line(D, I), F we get Line(D, I) != altitude(F, D, H)
By line_containment_inequality on orthocenter(A, D, G), B, Line(D, G) we get B != orthocenter(A, D, G)
By line_inequality on Line(G, center(c)), i, G we get i != Line(G, center(c))
By line_inequality on Line(J, center(d)), Line(C, D), J we get Line(C, D) != Line(J, center(d))
By line_inequality on altitude(E, C, D), Line(C, D), E we get Line(C, D) != altitude(E, C, D)
By line_inequality on Line(G, center(c)), Line(C, D), G we get Line(C, D) != Line(G, center(c))
By line_inequality on Line(G, center(c)), Line(E, J), G we get Line(E, J) != Line(G, center(c))
By line_inequality on altitude(F, D, J), Line(E, G), F we get Line(E, G) != altitude(F, D, J)
By line_inequality on altitude(E, C, D), Line(F, G), E we get Line(F, G) != altitude(E, C, D)
By line_inequality on altitude(G, B, D), Line(E, I), G we get Line(E, I) != altitude(G, B, D)
By line_containment_inequality on orthocenter(B, D, E), J, Line(D, E) we get J != orthocenter(B, D, E)
By line_inequality on altitude(E, C, D), Line(I, J), E we get Line(I, J) != altitude(E, C, D)
By line_containment_inequality on orthocenter(A, D, G), D, f we get D != orthocenter(A, D, G)
By line_inequality on altitude(F, A, D), Line(D, G), F we get Line(D, G) != altitude(F, A, D)
By line_inequality on Line(J, center(d)), g, J we get g != Line(J, center(d))
By line_inequality on Line(F, center(c)), Line(C, D), F we get Line(C, D) != Line(F, center(c))
By line_inequality on Line(E, center(d)), Line(I, J), E we get Line(I, J) != Line(E, center(d))
By line_containment_inequality on orthocenter(D, F, J), J, Line(D, F) we get J != orthocenter(D, F, J)
By line_containment_inequality on orthocenter(C, D, F), B, h we get B != orthocenter(C, D, F)
By line_inequality on Line(F, center(c)), k, F we get k != Line(F, center(c))
By line_inequality on altitude(E, C, D), Line(D, F), E we get Line(D, F) != altitude(E, C, D)
By line_inequality on altitude(E, C, D), Line(D, J), E we get Line(D, J) != altitude(E, C, D)
By line_containment_inequality on orthocenter(D, F, H), I, h we get I != orthocenter(D, F, H)
By line_inequality on altitude(F, C, D), f, F we get f != altitude(F, C, D)
By line_inequality on altitude(F, D, H), j, F we get j != altitude(F, D, H)
By line_inequality on altitude(F, C, D), j, F we get j != altitude(F, C, D)
By line_inequality on Line(G, center(c)), g, G we get g != Line(G, center(c))
By line_inequality on Line(E, center(c)), h, E we get h != Line(E, center(c))
By line_inequality on altitude(F, A, D), Line(D, I), F we get Line(D, I) != altitude(F, A, D)
By line_containment_inequality on orthocenter(D, F, J), H, Line(D, F) we get H != orthocenter(D, F, J)
By line_inequality on Line(J, center(d)), Line(F, G), J we get Line(F, G) != Line(J, center(d))
By line_inequality on altitude(G, A, D), Line(E, I), G we get Line(E, I) != altitude(G, A, D)
By line_inequality on altitude(G, B, D), Line(D, I), G we get Line(D, I) != altitude(G, B, D)
By line_inequality on altitude(G, B, D), g, G we get g != altitude(G, B, D)
By line_containment_inequality on orthocenter(B, D, G), D, f we get D != orthocenter(B, D, G)
By line_inequality on altitude(F, A, D), Line(I, J), F we get Line(I, J) != altitude(F, A, D)
By line_inequality on Line(F, center(c)), Line(D, G), F we get Line(D, G) != Line(F, center(c))
By line_inequality on Line(D, center(d)), g, D we get g != Line(D, center(d))
By line_inequality on Line(E, center(c)), Line(D, F), E we get Line(D, F) != Line(E, center(c))
By line_inequality on altitude(F, A, D), Line(E, I), F we get Line(E, I) != altitude(F, A, D)
By line_inequality on altitude(F, D, H), k, F we get k != altitude(F, D, H)
By line_inequality on Line(J, center(d)), Line(E, F), J we get Line(E, F) != Line(J, center(d))
By line_inequality on Line(F, center(c)), Line(E, J), F we get Line(E, J) != Line(F, center(c))
By line_inequality on Line(G, center(c)), Line(D, J), G we get Line(D, J) != Line(G, center(c))
By line_inequality on Line(I, center(d)), Line(D, J), I we get Line(D, J) != Line(I, center(d))
By line_inequality on altitude(F, D, H), g, F we get g != altitude(F, D, H)
By line_inequality on Line(I, center(d)), Line(E, J), I we get Line(E, J) != Line(I, center(d))
By line_inequality on altitude(F, C, D), Line(D, I), F we get Line(D, I) != altitude(F, C, D)
By line_inequality on Line(D, center(d)), k, D we get k != Line(D, center(d))
By line_inequality on Line(I, center(d)), Line(E, F), I we get Line(E, F) != Line(I, center(d))
By line_inequality on Line(I, center(d)), h, I we get h != Line(I, center(d))
By line_containment_inequality on orthocenter(C, D, F), A, Line(D, F) we get A != orthocenter(C, D, F)
By line_containment_inequality on orthocenter(C, D, F), E, h we get E != orthocenter(C, D, F)
By line_inequality on Line(J, center(d)), Line(D, E), J we get Line(D, E) != Line(J, center(d))
By line_inequality on Line(J, center(d)), k, J we get k != Line(J, center(d))
By line_inequality on Line(E, center(c)), j, E we get j != Line(E, center(c))
By line_inequality on altitude(G, B, D), Line(E, J), G we get Line(E, J) != altitude(G, B, D)
By line_inequality on altitude(F, D, H), Line(C, D), F we get Line(C, D) != altitude(F, D, H)
By line_inequality on Line(I, center(c)), Line(D, E), I we get Line(D, E) != Line(I, center(c))
By line_inequality on altitude(F, D, J), k, F we get k != altitude(F, D, J)
By line_inequality on altitude(F, D, H), Line(D, J), F we get Line(D, J) != altitude(F, D, H)
By line_inequality on altitude(F, D, H), i, F we get i != altitude(F, D, H)
By line_containment_inequality on orthocenter(C, D, F), D, h we get D != orthocenter(C, D, F)
By line_inequality on altitude(F, D, J), f, F we get f != altitude(F, D, J)
By line_inequality on altitude(F, A, D), f, F we get f != altitude(F, A, D)
By line_inequality on altitude(G, B, D), Line(D, J), G we get Line(D, J) != altitude(G, B, D)
By line_inequality on altitude(F, D, J), Line(C, D), F we get Line(C, D) != altitude(F, D, J)
By line_inequality on Line(G, center(c)), h, G we get h != Line(G, center(c))
By line_inequality on Line(E, center(c)), f, E we get f != Line(E, center(c))
By line_inequality on Line(E, center(d)), k, E we get k != Line(E, center(d))
By line_inequality on altitude(E, B, D), h, E we get h != altitude(E, B, D)
By line_inequality on Line(F, center(c)), Line(I, J), F we get Line(I, J) != Line(F, center(c))
By line_inequality on Line(J, center(d)), Line(D, F), J we get Line(D, F) != Line(J, center(d))
By line_inequality on Line(G, center(c)), Line(D, F), G we get Line(D, F) != Line(G, center(c))
By line_inequality on Line(E, center(d)), Line(F, G), E we get Line(F, G) != Line(E, center(d))
By line_inequality on altitude(E, B, D), f, E we get f != altitude(E, B, D)
By line_inequality on altitude(G, A, D), Line(E, F), G we get Line(E, F) != altitude(G, A, D)
By line_inequality on Line(D, center(d)), Line(E, G), D we get Line(E, G) != Line(D, center(d))
By line_inequality on Line(F, center(c)), Line(E, I), F we get Line(E, I) != Line(F, center(c))
By line_inequality on Line(E, center(c)), Line(D, G), E we get Line(D, G) != Line(E, center(c))
By line_inequality on altitude(F, D, J), Line(D, G), F we get Line(D, G) != altitude(F, D, J)
By line_inequality on altitude(E, B, D), k, E we get k != altitude(E, B, D)
By concyclic_definition_0 on D, F, A, G we get G in Circle(A, D, F)
By external_angle_bisector_definition_v0_r on J, H, A, C we get Line(C, H) == external_angle_bisector(A, C, J)
By external_angle_bisector_definition_v0_r on A, J, F, H we get Line(H, J) == external_angle_bisector(A, H, F)
By external_angle_bisector_definition_v0_r on J, D, E, C we get Line(C, D) == external_angle_bisector(E, C, J)
By external_angle_bisector_definition_v0_r on C, H, A, F we get Line(F, H) == external_angle_bisector(A, F, C)
By internal_angle_bisector_definition_v0_r on B, D, B, H we get Line(D, H) == internal_angle_bisector(B, H, B)
By external_angle_bisector_definition_v0_r on J, A, H, F we get Line(A, F) == external_angle_bisector(H, F, J)
By internal_angle_bisector_definition_v0_r on J, C, J, H we get Line(C, H) == internal_angle_bisector(J, H, J)
By internal_angle_bisector_definition_v0_r on F, C, J, H we get Line(C, H) == internal_angle_bisector(F, H, J)
By external_angle_bisector_definition_v0_r on J, F, A, H we get Line(F, H) == external_angle_bisector(A, H, J)
By external_angle_bisector_definition_v0_r on C, J, H, F we get Line(F, J) == external_angle_bisector(C, F, H)
By external_angle_bisector_definition_v0_r on H, C, J, F we get Line(C, F) == external_angle_bisector(H, F, J)
By concyclic_definition_0 on C, E, D, F we get F in Circle(C, D, E)
By internal_angle_bisector_definition_v0_r on J, A, J, F we get Line(A, F) == internal_angle_bisector(J, F, J)
By internal_angle_bisector_definition_v0_r on A, F, C, J we get Line(F, J) == internal_angle_bisector(A, J, C)
By external_angle_bisector_definition_v0_r on C, J, A, F we get Line(F, J) == external_angle_bisector(A, F, C)
By internal_angle_bisector_definition_v0_r on C, A, J, F we get Line(A, F) == internal_angle_bisector(C, F, J)
By external_angle_bisector_definition_v0_r on J, H, A, F we get Line(F, H) == external_angle_bisector(A, F, J)
By external_angle_bisector_definition_v0_r on H, A, C, F we get Line(A, F) == external_angle_bisector(C, F, H)
By external_angle_bisector_definition_v0_r on A, C, J, H we get Line(C, H) == external_angle_bisector(A, H, J)
By internal_angle_bisector_definition_v0_r on E, D, F, C we get Line(C, D) == internal_angle_bisector(E, C, F)
By concyclic_definition_0 on D, G, A, F we get F in Circle(A, D, G)
By concyclic_definition_0 on F, D, E, C we get C in Circle(D, E, F)
By external_angle_bisector_definition_v0_r on C, J, A, H we get Line(H, J) == external_angle_bisector(A, H, C)
By internal_angle_bisector_definition_v0_r on J, A, F, H we get Line(A, H) == internal_angle_bisector(F, H, J)
By concyclic_definition_0 on F, C, E, D we get D in Circle(C, E, F)
By internal_angle_bisector_definition_v0_r on A, D, E, C we get Line(C, D) == internal_angle_bisector(A, C, E)
By internal_angle_bisector_definition_v0_r on H, J, A, F we get Line(F, J) == internal_angle_bisector(A, F, H)
By internal_angle_bisector_definition_v0_r on F, A, C, J we get Line(A, J) == internal_angle_bisector(C, J, F)
By concyclic_definition_0 on G, D, F, A we get A in Circle(D, F, G)
By internal_angle_bisector_definition_v0_r on A, F, H, C we get Line(C, F) == internal_angle_bisector(A, C, H)
By internal_angle_bisector_definition_v0_r on G, A, F, D we get Line(A, D) == internal_angle_bisector(F, D, G)
By internal_angle_bisector_definition_v0_r on A, H, F, C we get Line(C, H) == internal_angle_bisector(A, C, F)
By concyclic_definition_0 on E, D, G, B we get B in Circle(D, E, G)
By internal_angle_bisector_definition_v0_r on F, J, F, H we get Line(H, J) == internal_angle_bisector(F, H, F)
By reverse_direction on center(c), G we get 180 == direction(center(c), G) - direction(G, center(c)) mod 360
By internal_angle_bisector_definition_v0_r on C, J, H, A we get Line(A, J) == internal_angle_bisector(C, A, H)
By internal_angle_bisector_definition_v0_r on C, F, H, A we get Line(A, F) == internal_angle_bisector(C, A, H)
By external_angle_bisector_definition_v0_r on F, C, A, H we get Line(C, H) == external_angle_bisector(A, H, F)
By perpendicular_lines_draw_intersection on altitude(G, A, D), i we get exists(line_intersection(i, altitude(G, A, D)))
By internal_angle_bisector_definition_v0_r on C, F, H, J we get Line(F, J) == internal_angle_bisector(C, J, H)
By external_angle_bisector_definition_v0_r on A, F, C, H we get Line(F, H) == external_angle_bisector(A, H, C)
By internal_angle_bisector_definition_v0_r on C, F, J, A we get Line(A, F) == internal_angle_bisector(C, A, J)
By reverse_direction on center(c), E we get 180 == direction(center(c), E) - direction(E, center(c)) mod 360
By internal_angle_bisector_definition_v0_r on C, F, J, H we get Line(F, H) == internal_angle_bisector(C, H, J)
By perpendicular_lines_draw_intersection on altitude(G, B, D), j we get exists(line_intersection(j, altitude(G, B, D)))
By internal_angle_bisector_definition_v0_r on F, H, F, J we get Line(H, J) == internal_angle_bisector(F, J, F)
By external_angle_bisector_definition_v0_r on B, D, J, C we get Line(C, D) == external_angle_bisector(B, C, J)
By external_angle_bisector_definition_v0_r on A, C, J, F we get Line(C, F) == external_angle_bisector(A, F, J)
By internal_angle_bisector_definition_v0_r on E, B, G, D we get Line(B, D) == internal_angle_bisector(E, D, G)
By internal_angle_bisector_definition_v0_r on G, H, E, D we get Line(D, H) == internal_angle_bisector(E, D, G)
By internal_angle_bisector_definition_v0_r on F, H, A, J we get Line(H, J) == internal_angle_bisector(A, J, F)
By concyclic_definition_0 on E, G, B, D we get D in Circle(B, E, G)
By internal_angle_bisector_definition_v0_r on C, H, F, A we get Line(A, H) == internal_angle_bisector(C, A, F)
By concyclic_definition_0 on F, A, G, D we get D in Circle(A, F, G)
By internal_angle_bisector_definition_v0_r on F, A, F, J we get Line(A, J) == internal_angle_bisector(F, J, F)
By internal_angle_bisector_definition_v0_r on H, D, B, C we get Line(C, D) == internal_angle_bisector(B, C, H)
By internal_angle_bisector_definition_v0_r on C, H, J, F we get Line(F, H) == internal_angle_bisector(C, F, J)
By internal_angle_bisector_definition_v0_r on F, A, H, J we get Line(A, J) == internal_angle_bisector(F, J, H)
By external_angle_bisector_definition_v0_r on J, F, A, C we get Line(C, F) == external_angle_bisector(A, C, J)
By internal_angle_bisector_definition_v0_r on C, J, F, A we get Line(A, J) == internal_angle_bisector(C, A, F)
By internal_angle_bisector_definition_v0_r on H, C, H, F we get Line(C, F) == internal_angle_bisector(H, F, H)
By internal_angle_bisector_definition_v0_r on J, A, J, H we get Line(A, H) == internal_angle_bisector(J, H, J)
By reverse_direction on center(c), F we get 180 == direction(center(c), F) - direction(F, center(c)) mod 360
By reverse_direction on center(d), E we get 180 == direction(center(d), E) - direction(E, center(d)) mod 360
By internal_angle_bisector_definition_v0_r on F, C, H, J we get Line(C, J) == internal_angle_bisector(F, J, H)
By internal_angle_bisector_definition_v0_r on H, C, A, J we get Line(C, J) == internal_angle_bisector(A, J, H)
By internal_angle_bisector_definition_v0_r on H, F, H, J we get Line(F, J) == internal_angle_bisector(H, J, H)
By concyclic_definition_0 on B, G, D, E we get E in Circle(B, D, G)
By internal_angle_bisector_definition_v0_r on A, H, C, J we get Line(H, J) == internal_angle_bisector(A, J, C)
By internal_angle_bisector_definition_v0_r on C, J, F, H we get Line(H, J) == internal_angle_bisector(C, H, F)
By internal_angle_bisector_definition_v0_r on H, D, E, C we get Line(C, D) == internal_angle_bisector(E, C, H)
By concyclic_definition_0 on C, F, D, E we get E in Circle(C, D, F)
By internal_angle_bisector_definition_v0_r on J, A, C, H we get Line(A, H) == internal_angle_bisector(C, H, J)
By perpendicular_lines_draw_intersection on altitude(F, A, D), i we get exists(line_intersection(i, altitude(F, A, D)))
By internal_angle_bisector_definition_v0_r on A, J, H, C we get Line(C, J) == internal_angle_bisector(A, C, H)
By internal_angle_bisector_definition_v0_r on C, A, H, J we get Line(A, J) == internal_angle_bisector(C, J, H)
By internal_angle_bisector_definition_v0_r on F, H, C, J we get Line(H, J) == internal_angle_bisector(C, J, F)
By internal_angle_bisector_definition_v0_r on D, B, D, H we get Line(B, H) == internal_angle_bisector(D, H, D)
By internal_angle_bisector_definition_v0_r on C, A, F, H we get Line(A, H) == internal_angle_bisector(C, H, F)
By internal_angle_bisector_definition_v0_r on H, B, H, D we get Line(B, D) == internal_angle_bisector(H, D, H)
By internal_angle_bisector_definition_v0_r on D, H, D, B we get Line(B, H) == internal_angle_bisector(D, B, D)
By concyclic_definition_0 on E, D, B, G we get G in Circle(B, D, E)
By internal_angle_bisector_definition_v0_r on H, D, H, B we get Line(B, D) == internal_angle_bisector(H, B, H)
By internal_angle_bisector_definition_v0_r on H, C, H, J we get Line(C, J) == internal_angle_bisector(H, J, H)
By internal_angle_bisector_definition_v0_r on A, J, F, C we get Line(C, J) == internal_angle_bisector(A, C, F)
By internal_angle_bisector_definition_v0_r on J, H, J, F we get Line(F, H) == internal_angle_bisector(J, F, J)
By perpendicular_lines_draw_intersection on Line(C, D), altitude(E, C, D) we get exists(line_intersection(Line(C, D), altitude(E, C, D)))
By perpendicular_lines_draw_intersection on j, altitude(F, D, H) we get exists(line_intersection(j, altitude(F, D, H)))
By internal_angle_bisector_definition_v0_r on F, D, B, C we get Line(C, D) == internal_angle_bisector(B, C, F)
By internal_angle_bisector_definition_v0_r on A, F, H, J we get Line(F, J) == internal_angle_bisector(A, J, H)
By internal_angle_bisector_definition_v0_r on H, A, H, F we get Line(A, F) == internal_angle_bisector(H, F, H)
By internal_angle_bisector_definition_v0_r on H, J, H, F we get Line(F, J) == internal_angle_bisector(H, F, H)
By reverse_direction on center(d), J we get 180 == direction(center(d), J) - direction(J, center(d)) mod 360
By internal_angle_bisector_definition_v0_r on F, C, F, H we get Line(C, H) == internal_angle_bisector(F, H, F)
By internal_angle_bisector_definition_v0_r on F, C, F, J we get Line(C, J) == internal_angle_bisector(F, J, F)
By internal_angle_bisector_definition_v0_r on A, C, H, F we get Line(C, F) == internal_angle_bisector(A, F, H)
By internal_angle_bisector_definition_v0_r on F, A, F, H we get Line(A, H) == internal_angle_bisector(F, H, F)
By internal_angle_bisector_definition_v0_r on J, F, J, H we get Line(F, H) == internal_angle_bisector(J, H, J)
By reverse_direction on center(c), I we get 180 == direction(center(c), I) - direction(I, center(c)) mod 360
By internal_angle_bisector_definition_v0_r on J, H, C, A we get Line(A, H) == internal_angle_bisector(C, A, J)
By reverse_direction on center(d), D we get 180 == direction(center(d), D) - direction(D, center(d)) mod 360
By reverse_direction on center(d), I we get 180 == direction(center(d), I) - direction(I, center(d)) mod 360
By internal_angle_bisector_definition_v0_r on H, A, H, J we get Line(A, J) == internal_angle_bisector(H, J, H)
By internal_angle_bisector_definition_v0_r on F, C, A, J we get Line(C, J) == internal_angle_bisector(A, J, F)
By internal_angle_bisector_definition_v0_r on B, H, B, D we get Line(D, H) == internal_angle_bisector(B, D, B)
By internal_angle_bisector_definition_v0_r on J, C, J, F we get Line(C, F) == internal_angle_bisector(J, F, J)
By perpendicular_lines_draw_intersection on Line(D, J), altitude(F, D, J) we get exists(line_intersection(Line(D, J), altitude(F, D, J)))
By perpendicular_lines_draw_intersection on altitude(E, B, D), j we get exists(line_intersection(j, altitude(E, B, D)))
By perpendicular_lines_draw_intersection on Line(C, D), altitude(F, C, D) we get exists(line_intersection(Line(C, D), altitude(F, C, D)))
By isosceles_triangle_properties on center(d), I, J we get distance(I, center(d)) == distance(J, center(d)), angle(I, J, center(d)) == angle(center(d), I, J) mod 360
By concyclic_definition_1 on F, D, C, E we get Circle(C, D, E) == Circle(C, D, F)
By concyclic_definition_1 on B, G, E, D we get Circle(B, E, G) == Circle(D, E, G)
By concyclic_definition_1 on E, D, G, B we get Circle(B, D, G) == Circle(D, E, G)
By concyclic_definition_1 on F, G, A, D we get Circle(A, D, G) == Circle(A, F, G)
By concyclic_definition_1 on D, G, F, A we get Circle(A, F, G) == Circle(D, F, G)
By concyclic_definition_1 on E, F, C, D we get Circle(C, D, F) == Circle(C, E, F)
By concyclic_definition_1 on C, D, F, E we get Circle(C, D, F) == Circle(D, E, F)
By isosceles_triangle_properties on center(d), I, D we get distance(D, center(d)) == distance(I, center(d)), angle(I, D, center(d)) == angle(center(d), I, D) mod 360
By isosceles_triangle_properties on center(c), I, F we get distance(F, center(c)) == distance(I, center(c)), angle(I, F, center(c)) == angle(center(c), I, F) mod 360
By concyclic_definition_1 on G, B, D, E we get Circle(B, D, E) == Circle(B, D, G)
By isosceles_triangle_properties on center(c), G, E we get distance(E, center(c)) == distance(G, center(c)), angle(G, E, center(c)) == angle(center(c), G, E) mod 360
By isosceles_triangle_properties on center(c), E, G we get distance(E, center(c)) == distance(G, center(c)), angle(E, G, center(c)) == angle(center(c), E, G) mod 360
By concyclic_definition_1 on F, D, G, A we get Circle(A, D, G) == Circle(D, F, G)
By isosceles_triangle_properties on center(c), F, G we get distance(F, center(c)) == distance(G, center(c)), angle(F, G, center(c)) == angle(center(c), F, G) mod 360
By altitude_definition on G, H, D, altitude(G, B, D) we get altitude(G, B, D) == altitude(G, D, H)
By altitude_definition on E, D, H, altitude(E, B, D) we get altitude(E, B, D) == altitude(E, D, H)
By concyclic_definition_1 on G, A, F, D we get Circle(A, D, F) == Circle(A, F, G)
By concyclic_definition_1 on E, B, G, D we get Circle(B, D, G) == Circle(B, E, G)
By concyclic_definition_1 on B, D, E, G we get Circle(B, D, E) == Circle(D, E, G)
By isosceles_triangle_properties on center(d), D, E we get distance(D, center(d)) == distance(E, center(d)), angle(D, E, center(d)) == angle(center(d), D, E) mod 360
By concyclic_definition_1 on C, E, F, D we get Circle(C, E, F) == Circle(D, E, F)
By concyclic_definition_1 on A, D, F, G we get Circle(A, D, F) == Circle(D, F, G)
By isosceles_triangle_properties on center(c), F, I we get distance(F, center(c)) == distance(I, center(c)), angle(F, I, center(c)) == angle(center(c), F, I) mod 360
By concyclic_definition_1 on D, B, E, G we get Circle(B, D, E) == Circle(B, E, G)
By isosceles_triangle_properties on center(c), E, F we get distance(E, center(c)) == distance(F, center(c)), angle(E, F, center(c)) == angle(center(c), E, F) mod 360
By concyclic_definition_1 on F, A, D, G we get Circle(A, D, F) == Circle(A, D, G)
By isosceles_triangle_properties on center(c), I, G we get distance(G, center(c)) == distance(I, center(c)), angle(I, G, center(c)) == angle(center(c), I, G) mod 360
By isosceles_triangle_properties on center(d), D, I we get distance(D, center(d)) == distance(I, center(d)), angle(D, I, center(d)) == angle(center(d), D, I) mod 360
By concyclic_definition_1 on F, C, E, D we get Circle(C, D, E) == Circle(C, E, F)
By isosceles_triangle_properties on center(c), G, I we get distance(G, center(c)) == distance(I, center(c)), angle(G, I, center(c)) == angle(center(c), G, I) mod 360
By altitude_definition on E, H, B, altitude(E, B, D) we get altitude(E, B, D) == altitude(E, B, H)
By isosceles_triangle_properties on center(d), J, D we get distance(D, center(d)) == distance(J, center(d)), angle(J, D, center(d)) == angle(center(d), J, D) mod 360
By altitude_definition on F, B, H, altitude(F, D, H) we get altitude(F, B, H) == altitude(F, D, H)
By isosceles_triangle_properties on center(c), E, I we get distance(E, center(c)) == distance(I, center(c)), angle(E, I, center(c)) == angle(center(c), E, I) mod 360
By isosceles_triangle_properties on center(d), E, D we get distance(D, center(d)) == distance(E, center(d)), angle(E, D, center(d)) == angle(center(d), E, D) mod 360
By altitude_definition on F, D, B, altitude(F, D, H) we get altitude(F, B, D) == altitude(F, D, H)
By isosceles_triangle_properties on center(d), E, J we get distance(E, center(d)) == distance(J, center(d)), angle(E, J, center(d)) == angle(center(d), E, J) mod 360
By isosceles_triangle_properties on center(d), I, E we get distance(E, center(d)) == distance(I, center(d)), angle(I, E, center(d)) == angle(center(d), I, E) mod 360
By altitude_definition on G, H, B, altitude(G, B, D) we get altitude(G, B, D) == altitude(G, B, H)
By concyclic_definition_1 on F, E, D, C we get Circle(C, D, E) == Circle(D, E, F)
By isosceles_triangle_properties on center(d), E, I we get distance(E, center(d)) == distance(I, center(d)), angle(E, I, center(d)) == angle(center(d), E, I) mod 360
By isosceles_triangle_properties on center(c), I, E we get distance(E, center(c)) == distance(I, center(c)), angle(I, E, center(c)) == angle(center(c), I, E) mod 360
By isosceles_triangle_properties on center(d), J, E we get distance(E, center(d)) == distance(J, center(d)), angle(J, E, center(d)) == angle(center(d), J, E) mod 360
By isosceles_triangle_properties on center(c), G, F we get distance(F, center(c)) == distance(G, center(c)), angle(G, F, center(c)) == angle(center(c), G, F) mod 360
By isosceles_triangle_properties on center(c), F, E we get distance(E, center(c)) == distance(F, center(c)), angle(F, E, center(c)) == angle(center(c), F, E) mod 360
By isosceles_triangle_properties on center(d), D, J we get distance(D, center(d)) == distance(J, center(d)), angle(D, J, center(d)) == angle(center(d), D, J) mod 360
By isosceles_triangle_properties on center(d), J, I we get distance(I, center(d)) == distance(J, center(d)), angle(J, I, center(d)) == angle(center(d), J, I) mod 360
By anti_similar_triangle_basic_properties on F, A, D, G, A, D we get not_collinear(A, D, F), not_collinear(A, D, G), angle(F, A, D) == 0 - angle(G, A, D) mod 360, angle(A, D, F) == 0 - angle(A, D, G) mod 360, angle(D, F, A) == 0 - angle(D, G, A) mod 360, log(distance(A, F)) + log(distance(A, D)) == log(distance(A, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(D, F)) == log(distance(A, D)) + log(distance(D, G)), log(distance(D, F)) + log(distance(A, G)) == log(distance(D, G)) + log(distance(A, F))
By anti_similar_triangle_basic_properties on D, A, F, D, A, G we get not_collinear(A, D, F), not_collinear(A, D, G), angle(D, A, F) == 0 - angle(D, A, G) mod 360, angle(A, F, D) == 0 - angle(A, G, D) mod 360, angle(F, D, A) == 0 - angle(G, D, A) mod 360, log(distance(A, D)) + log(distance(A, F)) == log(distance(A, D)) + log(distance(A, G)), log(distance(A, F)) + log(distance(D, G)) == log(distance(A, G)) + log(distance(D, F)), log(distance(D, F)) + log(distance(A, D)) == log(distance(D, G)) + log(distance(A, D))
By anti_similar_triangle_basic_properties on G, B, D, E, B, D we get not_collinear(B, D, G), not_collinear(B, D, E), angle(G, B, D) == 0 - angle(E, B, D) mod 360, angle(B, D, G) == 0 - angle(B, D, E) mod 360, angle(D, G, B) == 0 - angle(D, E, B) mod 360, log(distance(B, E)) + log(distance(B, D)) == log(distance(B, G)) + log(distance(B, D)), log(distance(B, D)) + log(distance(D, E)) == log(distance(B, D)) + log(distance(D, G)), log(distance(D, E)) + log(distance(B, G)) == log(distance(D, G)) + log(distance(B, E))
By anti_similar_triangle_basic_properties on B, E, D, B, G, D we get not_collinear(B, D, E), not_collinear(B, D, G), angle(B, E, D) == 0 - angle(B, G, D) mod 360, angle(E, D, B) == 0 - angle(G, D, B) mod 360, angle(D, B, E) == 0 - angle(D, B, G) mod 360, log(distance(B, E)) + log(distance(D, G)) == log(distance(B, G)) + log(distance(D, E)), log(distance(D, E)) + log(distance(B, D)) == log(distance(D, G)) + log(distance(B, D)), log(distance(B, D)) + log(distance(B, E)) == log(distance(B, D)) + log(distance(B, G))
By angles_on_chord_v0 on E, B, D, G, Circle(B, D, E) we get angle(E, D, B) == angle(E, G, B) mod 360
By angles_on_chord_v0 on F, A, G, D, Circle(A, D, F) we get angle(F, D, A) == angle(F, G, A) mod 360
By angles_on_chord_v0 on D, G, B, E, Circle(B, D, E) we get angle(D, B, G) == angle(D, E, G) mod 360
By angles_on_chord_v0 on C, F, E, D, Circle(C, D, E) we get angle(C, D, F) == angle(C, E, F) mod 360
By angles_on_chord_v0 on B, E, D, G, Circle(B, D, E) we get angle(B, D, E) == angle(B, G, E) mod 360
By angles_on_chord_v0 on D, E, B, G, Circle(B, D, E) we get angle(D, B, E) == angle(D, G, E) mod 360
By angles_on_chord_v0 on E, C, D, F, Circle(C, D, E) we get angle(E, D, C) == angle(E, F, C) mod 360
By angles_on_chord_v0 on F, C, D, E, Circle(C, D, E) we get angle(F, D, C) == angle(F, E, C) mod 360
By angles_on_chord_v0 on G, D, F, A, Circle(A, D, F) we get angle(G, A, D) == angle(G, F, D) mod 360
By chords_on_equal_angles_v0 on E, D, C, C, D, F, Circle(C, D, E) we get distance(C, E) == distance(C, F)
By angles_on_chord_v0 on D, F, E, C, Circle(C, D, E) we get angle(D, C, F) == angle(D, E, F) mod 360
By angles_on_chord_v0 on F, D, G, A, Circle(A, D, F) we get angle(F, A, D) == angle(F, G, D) mod 360
By angles_on_chord_v0 on E, D, C, F, Circle(C, D, E) we get angle(E, C, D) == angle(E, F, D) mod 360
By angles_on_chord_v0 on D, G, A, F, Circle(A, D, F) we get angle(D, A, G) == angle(D, F, G) mod 360
By angles_on_chord_v0 on B, G, E, D, Circle(B, D, E) we get angle(B, D, G) == angle(B, E, G) mod 360
By angles_on_chord_v0 on E, D, G, B, Circle(B, D, E) we get angle(E, B, D) == angle(E, G, D) mod 360
By angles_on_chord_v0 on D, E, F, C, Circle(C, D, E) we get angle(D, C, E) == angle(D, F, E) mod 360
By angles_on_chord_v0 on A, F, G, D, Circle(A, D, F) we get angle(A, D, F) == angle(A, G, F) mod 360
By angles_on_chord_v0 on G, D, E, B, Circle(B, D, E) we get angle(G, B, D) == angle(G, E, D) mod 360
By angles_on_chord_v0 on C, E, D, F, Circle(C, D, E) we get angle(C, D, E) == angle(C, F, E) mod 360
By angles_on_chord_v0 on G, A, D, F, Circle(A, D, F) we get angle(G, D, A) == angle(G, F, A) mod 360
By angles_on_chord_v0 on D, F, G, A, Circle(A, D, F) we get angle(D, A, F) == angle(D, G, F) mod 360
By angles_on_chord_v0 on G, B, E, D, Circle(B, D, E) we get angle(G, D, B) == angle(G, E, B) mod 360
By angles_on_chord_v0 on F, D, C, E, Circle(C, D, E) we get angle(F, C, D) == angle(F, E, D) mod 360
By angles_on_chord_v0 on A, G, F, D, Circle(A, D, F) we get angle(A, D, G) == angle(A, F, G) mod 360
By perpendicular_line_definition on line_intersection(j, altitude(E, B, D)), altitude(E, B, D), j we get altitude(E, B, D) == perpendicular_line(line_intersection(j, altitude(E, B, D)), j)
By perpendicular_line_definition on line_intersection(i, altitude(F, A, D)), altitude(F, A, D), i we get altitude(F, A, D) == perpendicular_line(line_intersection(i, altitude(F, A, D)), i)
By perpendicular_line_definition on line_intersection(Line(C, D), altitude(E, C, D)), Line(C, D), altitude(E, C, D) we get Line(C, D) == perpendicular_line(line_intersection(Line(C, D), altitude(E, C, D)), altitude(E, C, D))
By perpendicular_line_definition on line_intersection(Line(C, D), altitude(F, C, D)), Line(C, D), altitude(E, C, D) we get Line(C, D) == perpendicular_line(line_intersection(Line(C, D), altitude(F, C, D)), altitude(E, C, D))
By perpendicular_line_definition on line_intersection(j, altitude(E, B, D)), j, altitude(F, B, D) we get j == perpendicular_line(line_intersection(j, altitude(E, B, D)), altitude(F, B, D))
By perpendicular_line_definition on line_intersection(j, altitude(F, B, D)), j, altitude(F, B, D) we get j == perpendicular_line(line_intersection(j, altitude(F, B, D)), altitude(F, B, D))
By perpendicular_line_definition on line_intersection(Line(C, D), altitude(F, C, D)), altitude(F, C, D), Line(C, D) we get altitude(F, C, D) == perpendicular_line(line_intersection(Line(C, D), altitude(F, C, D)), Line(C, D))
By perpendicular_line_definition on line_intersection(i, altitude(G, A, D)), altitude(G, A, D), i we get altitude(G, A, D) == perpendicular_line(line_intersection(i, altitude(G, A, D)), i)
By perpendicular_line_definition on line_intersection(i, altitude(F, A, D)), i, altitude(G, A, D) we get i == perpendicular_line(line_intersection(i, altitude(F, A, D)), altitude(G, A, D))
By perpendicular_line_definition on line_intersection(j, altitude(F, B, D)), j, altitude(E, B, D) we get j == perpendicular_line(line_intersection(j, altitude(F, B, D)), altitude(E, B, D))
By perpendicular_line_definition on line_intersection(i, altitude(G, A, D)), i, altitude(G, A, D) we get i == perpendicular_line(line_intersection(i, altitude(G, A, D)), altitude(G, A, D))
By perpendicular_line_definition on line_intersection(Line(C, D), altitude(F, C, D)), Line(C, D), altitude(F, C, D) we get Line(C, D) == perpendicular_line(line_intersection(Line(C, D), altitude(F, C, D)), altitude(F, C, D))
By perpendicular_line_definition on line_intersection(j, altitude(F, B, D)), altitude(F, B, D), j we get altitude(F, B, D) == perpendicular_line(line_intersection(j, altitude(F, B, D)), j)
By perpendicular_line_definition on line_intersection(Line(C, D), altitude(E, C, D)), Line(C, D), altitude(F, C, D) we get Line(C, D) == perpendicular_line(line_intersection(Line(C, D), altitude(E, C, D)), altitude(F, C, D))
By perpendicular_line_definition on line_intersection(Line(C, D), altitude(E, C, D)), altitude(E, C, D), Line(C, D) we get altitude(E, C, D) == perpendicular_line(line_intersection(Line(C, D), altitude(E, C, D)), Line(C, D))
By perpendicular_line_definition on line_intersection(j, altitude(G, B, D)), j, altitude(F, B, D) we get j == perpendicular_line(line_intersection(j, altitude(G, B, D)), altitude(F, B, D))
By perpendicular_line_definition on line_intersection(j, altitude(E, B, D)), j, altitude(G, B, D) we get j == perpendicular_line(line_intersection(j, altitude(E, B, D)), altitude(G, B, D))
By perpendicular_line_definition on line_intersection(Line(D, J), altitude(F, D, J)), altitude(F, D, J), Line(D, J) we get altitude(F, D, J) == perpendicular_line(line_intersection(Line(D, J), altitude(F, D, J)), Line(D, J))
By perpendicular_line_definition on line_intersection(j, altitude(G, B, D)), altitude(G, B, D), j we get altitude(G, B, D) == perpendicular_line(line_intersection(j, altitude(G, B, D)), j)
By perpendicular_line_definition on line_intersection(j, altitude(E, B, D)), j, altitude(E, B, D) we get j == perpendicular_line(line_intersection(j, altitude(E, B, D)), altitude(E, B, D))
By perpendicular_line_definition on line_intersection(j, altitude(G, B, D)), j, altitude(E, B, D) we get j == perpendicular_line(line_intersection(j, altitude(G, B, D)), altitude(E, B, D))
By perpendicular_line_definition on line_intersection(j, altitude(G, B, D)), j, altitude(G, B, D) we get j == perpendicular_line(line_intersection(j, altitude(G, B, D)), altitude(G, B, D))
By perpendicular_line_definition on line_intersection(Line(D, J), altitude(F, D, J)), Line(D, J), altitude(F, D, J) we get Line(D, J) == perpendicular_line(line_intersection(Line(D, J), altitude(F, D, J)), altitude(F, D, J))
By perpendicular_line_definition on line_intersection(j, altitude(F, B, D)), j, altitude(G, B, D) we get j == perpendicular_line(line_intersection(j, altitude(F, B, D)), altitude(G, B, D))
By perpendicular_line_definition on line_intersection(i, altitude(F, A, D)), i, altitude(F, A, D) we get i == perpendicular_line(line_intersection(i, altitude(F, A, D)), altitude(F, A, D))
By perpendicular_line_definition on line_intersection(i, altitude(G, A, D)), i, altitude(F, A, D) we get i == perpendicular_line(line_intersection(i, altitude(G, A, D)), altitude(F, A, D))
By circle_by_three_points_and_center on D, F, G, E we get D == center(Circle(E, F, G))
By parallel_line_definition on line_intersection(j, altitude(G, B, D)), altitude(G, B, D), altitude(E, B, D) we get altitude(G, B, D) == parallel_line(line_intersection(j, altitude(G, B, D)), altitude(E, B, D))
By parallel_line_definition on line_intersection(j, altitude(F, B, D)), altitude(F, B, D), altitude(G, B, D) we get altitude(F, B, D) == parallel_line(line_intersection(j, altitude(F, B, D)), altitude(G, B, D))
By parallel_line_definition on line_intersection(i, altitude(F, A, D)), altitude(F, A, D), altitude(G, A, D) we get altitude(F, A, D) == parallel_line(line_intersection(i, altitude(F, A, D)), altitude(G, A, D))
By parallel_line_definition on line_intersection(i, altitude(G, A, D)), altitude(G, A, D), altitude(F, A, D) we get altitude(G, A, D) == parallel_line(line_intersection(i, altitude(G, A, D)), altitude(F, A, D))
By parallel_line_definition on line_intersection(Line(C, D), altitude(F, C, D)), altitude(F, C, D), altitude(E, C, D) we get altitude(F, C, D) == parallel_line(line_intersection(Line(C, D), altitude(F, C, D)), altitude(E, C, D))
By parallel_line_definition on E, altitude(E, C, D), altitude(F, C, D) we get altitude(E, C, D) == parallel_line(E, altitude(F, C, D))
By parallel_line_definition on F, altitude(F, C, D), altitude(E, C, D) we get altitude(F, C, D) == parallel_line(F, altitude(E, C, D))
By parallel_line_definition on line_intersection(Line(C, D), altitude(E, C, D)), altitude(E, C, D), altitude(F, C, D) we get altitude(E, C, D) == parallel_line(line_intersection(Line(C, D), altitude(E, C, D)), altitude(F, C, D))
By parallel_line_definition on line_intersection(j, altitude(E, B, D)), altitude(E, B, D), altitude(G, B, D) we get altitude(E, B, D) == parallel_line(line_intersection(j, altitude(E, B, D)), altitude(G, B, D))
By parallel_line_definition on G, altitude(G, A, D), altitude(F, A, D) we get altitude(G, A, D) == parallel_line(G, altitude(F, A, D))
By parallel_line_definition on line_intersection(j, altitude(G, B, D)), altitude(G, B, D), altitude(F, B, D) we get altitude(G, B, D) == parallel_line(line_intersection(j, altitude(G, B, D)), altitude(F, B, D))
By parallel_line_definition on E, altitude(E, B, D), altitude(G, B, D) we get altitude(E, B, D) == parallel_line(E, altitude(G, B, D))
By parallel_line_definition on F, altitude(F, B, D), altitude(E, B, D) we get altitude(F, B, D) == parallel_line(F, altitude(E, B, D))
By parallel_line_definition on E, altitude(E, B, D), altitude(F, B, D) we get altitude(E, B, D) == parallel_line(E, altitude(F, B, D))
By parallel_line_definition on line_intersection(j, altitude(E, B, D)), altitude(E, B, D), altitude(F, B, D) we get altitude(E, B, D) == parallel_line(line_intersection(j, altitude(E, B, D)), altitude(F, B, D))
By parallel_line_definition on F, altitude(F, A, D), altitude(G, A, D) we get altitude(F, A, D) == parallel_line(F, altitude(G, A, D))
By parallel_line_definition on G, altitude(G, B, D), altitude(F, B, D) we get altitude(G, B, D) == parallel_line(G, altitude(F, B, D))
By parallel_line_definition on G, altitude(G, B, D), altitude(E, B, D) we get altitude(G, B, D) == parallel_line(G, altitude(E, B, D))
By parallel_line_definition on F, altitude(F, B, D), altitude(G, B, D) we get altitude(F, B, D) == parallel_line(F, altitude(G, B, D))
By parallel_line_definition on line_intersection(j, altitude(F, B, D)), altitude(F, B, D), altitude(E, B, D) we get altitude(F, B, D) == parallel_line(line_intersection(j, altitude(F, B, D)), altitude(E, B, D))
By anti_congruence_from_anti_similar_triangles on D, C, F, D, C, E we get anti_congruent_triangles(C, D, E, C, D, F)
By in_imply_collinear on line_intersection(j, altitude(G, B, D)), D, B we get collinear(B, D, line_intersection(j, altitude(G, B, D)))
By in_imply_collinear on line_intersection(i, altitude(F, A, D)), A, D we get collinear(A, D, line_intersection(i, altitude(F, A, D)))
By in_imply_collinear on line_intersection(j, altitude(F, B, D)), H, D we get collinear(D, H, line_intersection(j, altitude(F, B, D)))
By in_imply_collinear on line_intersection(Line(C, D), altitude(E, C, D)), D, C we get collinear(C, D, line_intersection(Line(C, D), altitude(E, C, D)))
By in_imply_collinear on line_intersection(j, altitude(G, B, D)), D, H we get collinear(D, H, line_intersection(j, altitude(G, B, D)))
By divide_by_2_mod_180_v1 on E, D, B, C, D, A we get angle(E, D, B) == angle(C, D, A) + 180 mod 360
By divide_by_2_mod_180_v1 on A, D, F, B, D, C we get angle(A, D, F) == angle(B, D, C) + 180 mod 360
By in_imply_collinear on line_intersection(Line(D, J), altitude(F, D, J)), J, D we get collinear(D, J, line_intersection(Line(D, J), altitude(F, D, J)))
By divide_by_2_mod_180_v0 on H, D, C, A, D, F we get angle(A, D, F) == angle(H, D, C) mod 360
By in_imply_collinear on line_intersection(j, altitude(E, B, D)), H, D we get collinear(D, H, line_intersection(j, altitude(E, B, D)))
By directions_draw_angle on center(d), D, G we get exists(angle(center(d), D, G))
By divide_by_2_mod_180_v1 on A, D, C, B, D, E we get angle(A, D, C) == angle(B, D, E) + 180 mod 360
By asa_anti_congruence on F, D, C, E, D, C we get anti_congruent_triangles(C, D, E, C, D, F)
By sss_anti_congruence on D, G, E, D, E, G we get anti_congruent_triangles(D, E, G, D, G, E)
By sas_anti_congruence on G, B, E, E, B, G we get anti_congruent_triangles(B, E, G, B, G, E)
By in_imply_collinear on line_intersection(j, altitude(E, B, D)), B, H we get collinear(B, H, line_intersection(j, altitude(E, B, D)))
By line_containment_inequality on line_intersection(j, altitude(F, B, D)), F, j we get F != line_intersection(j, altitude(F, B, D))
By in_imply_collinear on line_intersection(i, altitude(G, A, D)), A, D we get collinear(A, D, line_intersection(i, altitude(G, A, D)))
By line_containment_inequality on line_intersection(j, altitude(E, B, D)), G, j we get G != line_intersection(j, altitude(E, B, D))
By in_imply_collinear on line_intersection(j, altitude(E, B, D)), D, B we get collinear(B, D, line_intersection(j, altitude(E, B, D)))
By in_imply_collinear on line_intersection(j, altitude(F, B, D)), D, B we get collinear(B, D, line_intersection(j, altitude(F, B, D)))
By in_imply_collinear on line_intersection(j, altitude(G, B, D)), H, B we get collinear(B, H, line_intersection(j, altitude(G, B, D)))
By line_containment_inequality on line_intersection(Line(C, D), altitude(E, C, D)), I, Line(C, D) we get I != line_intersection(Line(C, D), altitude(E, C, D))
By in_imply_collinear on line_intersection(j, altitude(F, B, D)), B, H we get collinear(B, H, line_intersection(j, altitude(F, B, D)))
By in_imply_collinear on line_intersection(Line(C, D), altitude(F, C, D)), C, D we get collinear(C, D, line_intersection(Line(C, D), altitude(F, C, D)))
By sss_anti_congruence on B, G, E, B, E, G we get anti_congruent_triangles(B, E, G, B, G, E)
By line_containment_inequality on line_intersection(i, altitude(F, A, D)), E, i we get E != line_intersection(i, altitude(F, A, D))
By directions_draw_angle on J, I, center(c) we get exists(angle(J, I, center(c)))
By line_circle_intersection_has_at_most_two_points_0 on A, F, C, Circle(A, D, F) we get C not in Circle(A, D, F)
By divide_by_2_mod_180_v1 on F, D, A, C, D, B we get angle(F, D, A) == angle(C, D, B) + 180 mod 360
By anti_congruence_from_anti_similar_triangles on C, D, E, C, D, F we get anti_congruent_triangles(C, D, E, C, D, F)
By sss_anti_congruence on E, D, G, G, D, E we get anti_congruent_triangles(D, E, G, D, G, E)
By sss_anti_congruence on E, B, G, G, B, E we get anti_congruent_triangles(B, E, G, B, G, E)
By line_circle_intersection_has_at_most_two_points_0 on F, C, H, Circle(C, D, E) we get H not in Circle(C, D, E)
By line_containment_inequality on line_intersection(Line(C, D), altitude(F, C, D)), J, Line(C, D) we get J != line_intersection(Line(C, D), altitude(F, C, D))
By directions_draw_angle on B, E, center(d) we get exists(angle(B, E, center(d)))
By sas_anti_congruence on G, A, F, F, A, G we get anti_congruent_triangles(A, F, G, A, G, F)
By sas_anti_congruence on F, D, E, E, D, F we get anti_congruent_triangles(D, E, F, D, F, E)
By line_containment_inequality on line_intersection(j, altitude(F, B, D)), C, j we get C != line_intersection(j, altitude(F, B, D))
By divide_by_2_mod_180_v0 on C, D, H, F, D, A we get angle(C, D, H) == angle(F, D, A) mod 360
By asa_anti_congruence on C, D, F, C, D, E we get anti_congruent_triangles(C, D, E, C, D, F)
By sss_anti_congruence on F, E, D, E, F, D we get anti_congruent_triangles(D, E, F, D, F, E)
By sss_anti_congruence on F, D, G, G, D, F we get anti_congruent_triangles(D, F, G, D, G, F)
By sss_anti_congruence on E, G, B, G, E, B we get anti_congruent_triangles(B, E, G, B, G, E)
By line_containment_inequality on line_intersection(j, altitude(F, B, D)), G, j we get G != line_intersection(j, altitude(F, B, D))
By line_circle_intersection_has_at_most_two_points_0 on A, F, H, Circle(A, D, F) we get H not in Circle(A, D, F)
By sss_anti_congruence on D, F, G, D, G, F we get anti_congruent_triangles(D, F, G, D, G, F)
By divide_by_2_mod_180_v1 on C, D, A, B, D, G we get angle(C, D, A) == angle(B, D, G) + 180 mod 360
By isosceles_triangle_properties on D, E, F we get distance(D, E) == distance(D, F), angle(D, E, F) == angle(E, F, D) mod 360
By directions_draw_angle on center(c), E, C we get exists(angle(center(c), E, C))
By divide_by_2_mod_180_v1 on A, D, C, G, D, B we get angle(A, D, C) == angle(G, D, B) + 180 mod 360
By line_containment_inequality on line_intersection(j, altitude(E, B, D)), I, j we get I != line_intersection(j, altitude(E, B, D))
By directions_draw_angle on G, I, center(d) we get exists(angle(G, I, center(d)))
By directions_draw_angle on center(d), J, H we get exists(angle(center(d), J, H))
By line_containment_inequality on line_intersection(Line(D, J), altitude(F, D, J)), C, Line(D, J) we get C != line_intersection(Line(D, J), altitude(F, D, J))
By sas_anti_similarity on G, B, E, E, B, G we get anti_similar_triangles(B, E, G, B, G, E)
By sas_anti_similarity on G, D, E, E, D, G we get anti_similar_triangles(D, E, G, D, G, E)
By directions_draw_angle on J, E, center(c) we get exists(angle(J, E, center(c)))
By isosceles_triangle_properties on D, F, G we get distance(D, F) == distance(D, G), angle(D, F, G) == angle(F, G, D) mod 360
By anti_congruence_from_anti_similar_triangles on D, E, C, D, F, C we get anti_congruent_triangles(C, D, E, C, D, F)
By divide_by_2_mod_180_v1 on A, D, B, C, D, E we get angle(A, D, B) == angle(C, D, E) + 180 mod 360
By sss_anti_congruence on D, E, G, D, G, E we get anti_congruent_triangles(D, E, G, D, G, E)
By directions_draw_angle on C, F, center(c) we get exists(angle(C, F, center(c)))
By sss_anti_congruence on A, F, G, A, G, F we get anti_congruent_triangles(A, F, G, A, G, F)
By divide_by_2_mod_180_v0 on H, D, A, C, D, F we get angle(C, D, F) == angle(H, D, A) mod 360
By sas_anti_congruence on G, D, F, F, D, G we get anti_congruent_triangles(D, F, G, D, G, F)
By asa_anti_congruence on D, E, C, D, F, C we get anti_congruent_triangles(C, D, E, C, D, F)
By asa_anti_congruence on D, C, F, D, C, E we get anti_congruent_triangles(C, D, E, C, D, F)
By sas_anti_similarity on F, A, G, G, A, F we get anti_similar_triangles(A, F, G, A, G, F)
By sas_anti_congruence on E, D, G, G, D, E we get anti_congruent_triangles(D, E, G, D, G, E)
By divide_by_2_mod_180_v1 on B, D, C, G, D, A we get angle(B, D, C) == angle(G, D, A) + 180 mod 360
By sas_anti_congruence on F, D, G, G, D, F we get anti_congruent_triangles(D, F, G, D, G, F)
By sss_anti_congruence on D, G, F, D, F, G we get anti_congruent_triangles(D, F, G, D, G, F)
By anti_congruence_from_anti_similar_triangles on F, D, C, E, D, C we get anti_congruent_triangles(C, D, E, C, D, F)
By sss_anti_congruence on G, D, E, E, D, G we get anti_congruent_triangles(D, E, G, D, G, E)
By sss_anti_congruence on F, D, E, E, D, F we get anti_congruent_triangles(D, E, F, D, F, E)
By divide_by_2_mod_180_v0 on H, D, C, G, D, A we get angle(G, D, A) == angle(H, D, C) mod 360
By divide_by_2_mod_180_v0 on E, D, C, H, D, A we get angle(E, D, C) == angle(H, D, A) mod 360
By divide_by_2_mod_180_v1 on C, D, F, B, D, A we get angle(C, D, F) == angle(B, D, A) + 180 mod 360
By directions_draw_angle on center(c), G, A we get exists(angle(center(c), G, A))
By sas_anti_congruence on F, A, G, G, A, F we get anti_congruent_triangles(A, F, G, A, G, F)
By divide_by_2_mod_180_v0 on C, D, E, A, D, H we get angle(A, D, H) == angle(C, D, E) mod 360
By asa_anti_congruence on C, D, E, C, D, F we get anti_congruent_triangles(C, D, E, C, D, F)
By directions_draw_angle on J, F, center(c) we get exists(angle(J, F, center(c)))
By directions_draw_angle on A, J, center(d) we get exists(angle(A, J, center(d)))
By directions_draw_angle on center(d), E, center(c) we get exists(angle(center(d), E, center(c)))
By divide_by_2_mod_180_v1 on C, D, E, A, D, B we get angle(C, D, E) == angle(A, D, B) + 180 mod 360
By sss_anti_congruence on F, G, A, G, F, A we get anti_congruent_triangles(A, F, G, A, G, F)
By asa_anti_congruence on D, F, C, D, E, C we get anti_congruent_triangles(C, D, E, C, D, F)
By divide_by_2_mod_180_v0 on H, D, E, A, D, C we get angle(A, D, C) == angle(H, D, E) mod 360
By sss_anti_congruence on G, F, A, F, G, A we get anti_congruent_triangles(A, F, G, A, G, F)
By directions_draw_angle on C, J, center(d) we get exists(angle(C, J, center(d)))
By directions_draw_angle on center(c), F, A we get exists(angle(center(c), F, A))
By sss_anti_congruence on G, D, F, F, D, G we get anti_congruent_triangles(D, F, G, D, G, F)
By divide_by_2_mod_180_v0 on C, D, H, A, D, G we get angle(A, D, G) == angle(C, D, H) mod 360
By directions_draw_angle on center(c), G, D we get exists(angle(center(c), G, D))
By sas_anti_similarity on G, D, F, F, D, G we get anti_similar_triangles(D, F, G, D, G, F)
By sss_anti_congruence on F, G, D, G, F, D we get anti_congruent_triangles(D, F, G, D, G, F)
By line_containment_inequality on line_intersection(Line(C, D), altitude(F, C, D)), H, Line(C, D) we get H != line_intersection(Line(C, D), altitude(F, C, D))
By divide_by_2_mod_180_v1 on G, D, A, B, D, C we get angle(G, D, A) == angle(B, D, C) + 180 mod 360
By directions_draw_angle on center(d), E, C we get exists(angle(center(d), E, C))
By isosceles_triangle_properties on B, E, G we get distance(B, E) == distance(B, G), angle(B, E, G) == angle(E, G, B) mod 360
By divide_by_2_mod_180_v1 on B, D, C, A, D, F we get angle(B, D, C) == angle(A, D, F) + 180 mod 360
By directions_draw_angle on H, D, center(d) we get exists(angle(H, D, center(d)))
By sas_anti_congruence on E, D, C, F, D, C we get anti_congruent_triangles(C, D, E, C, D, F)
By sas_anti_congruence on G, D, E, E, D, G we get anti_congruent_triangles(D, E, G, D, G, E)
By sas_anti_congruence on E, B, G, G, B, E we get anti_congruent_triangles(B, E, G, B, G, E)
By sss_anti_congruence on G, E, D, E, G, D we get anti_congruent_triangles(D, E, G, D, G, E)
By sss_anti_congruence on A, G, F, A, F, G we get anti_congruent_triangles(A, F, G, A, G, F)
By isosceles_triangle_properties on D, E, G we get distance(D, E) == distance(D, G), angle(D, E, G) == angle(E, G, D) mod 360
By divide_by_2_mod_180_v0 on E, D, H, C, D, A we get angle(C, D, A) == angle(E, D, H) mod 360
By line_containment_inequality on line_intersection(Line(C, D), altitude(F, C, D)), F, Line(C, D) we get F != line_intersection(Line(C, D), altitude(F, C, D))
By sss_anti_congruence on G, E, B, E, G, B we get anti_congruent_triangles(B, E, G, B, G, E)
By directions_draw_angle on D, I, center(c) we get exists(angle(D, I, center(c)))
By directions_draw_angle on center(d), D, B we get exists(angle(center(d), D, B))
By divide_by_2_mod_180_v1 on A, D, G, C, D, B we get angle(A, D, G) == angle(C, D, B) + 180 mod 360
By anti_congruence_from_anti_similar_triangles on C, D, F, C, D, E we get anti_congruent_triangles(C, D, E, C, D, F)
By sas_anti_congruence on F, D, C, E, D, C we get anti_congruent_triangles(C, D, E, C, D, F)
By sss_anti_congruence on E, F, D, F, E, D we get anti_congruent_triangles(D, E, F, D, F, E)
By divide_by_2_mod_180_v1 on E, D, C, B, D, A we get angle(E, D, C) == angle(B, D, A) + 180 mod 360
By divide_by_2_mod_180_v1 on B, D, G, C, D, A we get angle(B, D, G) == angle(C, D, A) + 180 mod 360
By sss_anti_congruence on G, A, F, F, A, G we get anti_congruent_triangles(A, F, G, A, G, F)
By directions_draw_angle on center(c), G, H we get exists(angle(center(c), G, H))
By divide_by_2_mod_180_v1 on C, D, B, F, D, A we get angle(C, D, B) == angle(F, D, A) + 180 mod 360
By sss_anti_congruence on E, G, D, G, E, D we get anti_congruent_triangles(D, E, G, D, G, E)
By divide_by_2_mod_180_v1 on G, D, B, A, D, C we get angle(G, D, B) == angle(A, D, C) + 180 mod 360
By isosceles_triangle_properties on A, F, G we get distance(A, F) == distance(A, G), angle(A, F, G) == angle(F, G, A) mod 360
By divide_by_2_mod_180_v0 on A, D, H, F, D, C we get angle(A, D, H) == angle(F, D, C) mod 360
By directions_draw_angle on C, E, center(c) we get exists(angle(C, E, center(c)))
By directions_draw_angle on center(d), E, G we get exists(angle(center(d), E, G))
By asa_anti_congruence on E, D, C, F, D, C we get anti_congruent_triangles(C, D, E, C, D, F)
By sas_anti_similarity on E, D, F, F, D, E we get anti_similar_triangles(D, E, F, D, F, E)
By sss_anti_congruence on D, E, F, D, F, E we get anti_congruent_triangles(D, E, F, D, F, E)
By anti_congruence_from_anti_similar_triangles on D, C, E, D, C, F we get anti_congruent_triangles(C, D, E, C, D, F)
By divide_by_2_mod_180_v1 on B, D, E, A, D, C we get angle(B, D, E) == angle(A, D, C) + 180 mod 360
By divide_by_2_mod_180_v1 on C, D, B, A, D, G we get angle(C, D, B) == angle(A, D, G) + 180 mod 360
By line_circle_intersection_has_at_most_two_points_0 on D, B, H, Circle(B, D, E) we get H not in Circle(B, D, E)
By directions_draw_angle on center(d), I, center(c) we get exists(angle(center(d), I, center(c)))
By anti_congruence_from_anti_similar_triangles on E, D, C, F, D, C we get anti_congruent_triangles(C, D, E, C, D, F)
By directions_draw_angle on center(c), E, J we get exists(angle(center(c), E, J))
By line_circle_intersection_has_at_most_two_points_0 on C, E, B, Circle(C, D, E) we get B not in Circle(C, D, E)
By divide_by_2_mod_180_v1 on C, D, A, E, D, B we get angle(C, D, A) == angle(E, D, B) + 180 mod 360
By divide_by_2_mod_180_v1 on B, D, A, C, D, F we get angle(B, D, A) == angle(C, D, F) + 180 mod 360
By asa_anti_congruence on D, C, E, D, C, F we get anti_congruent_triangles(C, D, E, C, D, F)
By sss_anti_congruence on B, E, G, B, G, E we get anti_congruent_triangles(B, E, G, B, G, E)
By sss_anti_congruence on F, A, G, G, A, F we get anti_congruent_triangles(A, F, G, A, G, F)
By divide_by_2_mod_180_v1 on B, D, A, E, D, C we get angle(B, D, A) == angle(E, D, C) + 180 mod 360
By isosceles_triangle_properties on D, F, E we get distance(D, E) == distance(D, F), angle(D, F, E) == angle(F, E, D) mod 360
By sss_anti_congruence on G, B, E, E, B, G we get anti_congruent_triangles(B, E, G, B, G, E)
By divide_by_2_mod_180_v1 on A, D, B, F, D, C we get angle(A, D, B) == angle(F, D, C) + 180 mod 360
By divide_by_2_mod_180_v0 on H, D, G, C, D, A we get angle(C, D, A) == angle(H, D, G) mod 360
By line_circle_intersection_has_at_most_two_points_0 on F, C, A, Circle(C, D, E) we get A not in Circle(C, D, E)
By line_containment_inequality on line_intersection(Line(C, D), altitude(E, C, D)), A, Line(C, D) we get A != line_intersection(Line(C, D), altitude(E, C, D))
By isosceles_triangle_properties on A, G, F we get distance(A, F) == distance(A, G), angle(A, G, F) == angle(G, F, A) mod 360
By line_containment_inequality on line_intersection(j, altitude(G, B, D)), G, j we get G != line_intersection(j, altitude(G, B, D))
By sas_anti_congruence on E, D, F, F, D, E we get anti_congruent_triangles(D, E, F, D, F, E)
By isosceles_triangle_properties on D, G, F we get distance(D, F) == distance(D, G), angle(D, G, F) == angle(G, F, D) mod 360
By sas_anti_similarity on F, D, E, E, D, F we get anti_similar_triangles(D, E, F, D, F, E)
By sss_anti_congruence on D, F, E, D, E, F we get anti_congruent_triangles(D, E, F, D, F, E)
By sas_anti_similarity on G, A, F, F, A, G we get anti_similar_triangles(A, F, G, A, G, F)
By divide_by_2_mod_180_v0 on A, D, C, G, D, H we get angle(A, D, C) == angle(G, D, H) mod 360
By directions_draw_angle on center(d), D, F we get exists(angle(center(d), D, F))
By sas_anti_similarity on F, D, G, G, D, F we get anti_similar_triangles(D, F, G, D, G, F)
By directions_draw_angle on A, D, center(d) we get exists(angle(A, D, center(d)))
By directions_draw_angle on center(c), F, J we get exists(angle(center(c), F, J))
By isosceles_triangle_properties on D, G, E we get distance(D, E) == distance(D, G), angle(D, G, E) == angle(G, E, D) mod 360
By anti_congruence_from_anti_similar_triangles on D, F, C, D, E, C we get anti_congruent_triangles(C, D, E, C, D, F)
By sss_anti_congruence on E, D, F, F, D, E we get anti_congruent_triangles(D, E, F, D, F, E)
By directions_draw_angle on center(d), I, F we get exists(angle(center(d), I, F))
By line_containment_inequality on line_intersection(Line(D, J), altitude(F, D, J)), F, Line(D, J) we get F != line_intersection(Line(D, J), altitude(F, D, J))
By sas_anti_similarity on E, B, G, G, B, E we get anti_similar_triangles(B, E, G, B, G, E)
By sss_anti_congruence on G, F, D, F, G, D we get anti_congruent_triangles(D, F, G, D, G, F)
By sas_anti_congruence on C, D, F, C, D, E we get anti_congruent_triangles(C, D, E, C, D, F)
By sas_anti_similarity on E, D, G, G, D, E we get anti_similar_triangles(D, E, G, D, G, E)
By isosceles_triangle_properties on B, G, E we get distance(B, E) == distance(B, G), angle(B, G, E) == angle(G, E, B) mod 360
By sas_anti_congruence on C, D, E, C, D, F we get anti_congruent_triangles(C, D, E, C, D, F)
By divide_by_2_mod_180_v1 on F, D, C, A, D, B we get angle(F, D, C) == angle(A, D, B) + 180 mod 360
By line_containment_inequality on line_intersection(Line(D, J), altitude(F, D, J)), B, Line(D, J) we get B != line_intersection(Line(D, J), altitude(F, D, J))
By directions_draw_angle on C, D, center(d) we get exists(angle(C, D, center(d)))
By directions_draw_angle on center(d), J, F we get exists(angle(center(d), J, F))
By directions_draw_angle on center(c), I, center(d) we get exists(angle(center(c), I, center(d)))
By line_containment_inequality on line_intersection(Line(C, D), altitude(E, C, D)), G, Line(C, D) we get G != line_intersection(Line(C, D), altitude(E, C, D))
By directions_draw_angle on center(d), D, C we get exists(angle(center(d), D, C))
By directions_draw_angle on center(c), F, C we get exists(angle(center(c), F, C))
By directions_draw_angle on A, G, center(c) we get exists(angle(A, G, center(c)))
By directions_draw_angle on center(d), J, C we get exists(angle(center(d), J, C))
By line_containment_inequality on line_intersection(Line(C, D), altitude(F, C, D)), I, Line(C, D) we get I != line_intersection(Line(C, D), altitude(F, C, D))
By directions_draw_angle on center(d), J, A we get exists(angle(center(d), J, A))
By directions_draw_angle on F, D, center(d) we get exists(angle(F, D, center(d)))
By directions_draw_angle on center(c), F, D we get exists(angle(center(c), F, D))
By directions_draw_angle on D, F, center(c) we get exists(angle(D, F, center(c)))
By directions_draw_angle on H, I, center(d) we get exists(angle(H, I, center(d)))
By directions_draw_angle on H, G, center(c) we get exists(angle(H, G, center(c)))
By directions_draw_angle on center(d), E, B we get exists(angle(center(d), E, B))
By directions_draw_angle on H, J, center(d) we get exists(angle(H, J, center(d)))
By directions_draw_angle on center(c), F, H we get exists(angle(center(c), F, H))
By line_containment_inequality on line_intersection(i, altitude(G, A, D)), F, i we get F != line_intersection(i, altitude(G, A, D))
By line_containment_inequality on line_intersection(i, altitude(F, A, D)), J, i we get J != line_intersection(i, altitude(F, A, D))
By directions_draw_angle on center(d), I, H we get exists(angle(center(d), I, H))
By line_circle_intersection_has_at_most_two_points_0 on E, B, C, Circle(B, D, E) we get C not in Circle(B, D, E)
By line_containment_inequality on line_intersection(i, altitude(F, A, D)), B, i we get B != line_intersection(i, altitude(F, A, D))
By directions_draw_angle on center(d), D, H we get exists(angle(center(d), D, H))
By directions_draw_angle on center(c), I, H we get exists(angle(center(c), I, H))
By line_containment_inequality on line_intersection(i, altitude(G, A, D)), H, i we get H != line_intersection(i, altitude(G, A, D))
By directions_draw_angle on B, E, center(c) we get exists(angle(B, E, center(c)))
By line_containment_inequality on line_intersection(Line(C, D), altitude(F, C, D)), G, Line(C, D) we get G != line_intersection(Line(C, D), altitude(F, C, D))
By directions_draw_angle on B, G, center(c) we get exists(angle(B, G, center(c)))
By line_containment_inequality on line_intersection(Line(C, D), altitude(E, C, D)), B, Line(C, D) we get B != line_intersection(Line(C, D), altitude(E, C, D))
By directions_draw_angle on A, F, center(c) we get exists(angle(A, F, center(c)))
By line_containment_inequality on line_intersection(i, altitude(G, A, D)), E, i we get E != line_intersection(i, altitude(G, A, D))
By directions_draw_angle on G, E, center(d) we get exists(angle(G, E, center(d)))
By line_containment_inequality on line_intersection(i, altitude(G, A, D)), B, i we get B != line_intersection(i, altitude(G, A, D))
By directions_draw_angle on F, E, center(d) we get exists(angle(F, E, center(d)))
By directions_draw_angle on center(c), I, J we get exists(angle(center(c), I, J))
By line_containment_inequality on line_intersection(Line(D, J), altitude(F, D, J)), I, Line(D, J) we get I != line_intersection(Line(D, J), altitude(F, D, J))
By directions_draw_angle on H, I, center(c) we get exists(angle(H, I, center(c)))
By line_circle_intersection_has_at_most_two_points_0 on B, G, A, Circle(B, D, E) we get A not in Circle(B, D, E)
By line_containment_inequality on line_intersection(j, altitude(E, B, D)), J, j we get J != line_intersection(j, altitude(E, B, D))
By line_containment_inequality on line_intersection(Line(C, D), altitude(F, C, D)), E, Line(C, D) we get E != line_intersection(Line(C, D), altitude(F, C, D))
By directions_draw_angle on F, J, center(d) we get exists(angle(F, J, center(d)))
By directions_draw_angle on C, E, center(d) we get exists(angle(C, E, center(d)))
By directions_draw_angle on H, F, center(c) we get exists(angle(H, F, center(c)))
By line_containment_inequality on line_intersection(Line(D, J), altitude(F, D, J)), A, Line(D, J) we get A != line_intersection(Line(D, J), altitude(F, D, J))
By directions_draw_angle on center(c), E, D we get exists(angle(center(c), E, D))
By directions_draw_angle on center(c), I, D we get exists(angle(center(c), I, D))
By line_circle_intersection_has_at_most_two_points_0 on F, C, J, Circle(C, D, E) we get J not in Circle(C, D, E)
By directions_draw_angle on G, D, center(d) we get exists(angle(G, D, center(d)))
By directions_draw_angle on center(d), D, A we get exists(angle(center(d), D, A))
By line_containment_inequality on line_intersection(i, altitude(F, A, D)), I, i we get I != line_intersection(i, altitude(F, A, D))
By line_containment_inequality on line_intersection(j, altitude(G, B, D)), A, j we get A != line_intersection(j, altitude(G, B, D))
By directions_draw_angle on F, I, center(d) we get exists(angle(F, I, center(d)))
By directions_draw_angle on center(c), G, B we get exists(angle(center(c), G, B))
By directions_draw_angle on center(d), I, G we get exists(angle(center(d), I, G))
By directions_draw_angle on D, G, center(c) we get exists(angle(D, G, center(c)))
By directions_draw_angle on D, E, center(c) we get exists(angle(D, E, center(c)))
By directions_draw_angle on center(c), E, B we get exists(angle(center(c), E, B))
By directions_draw_angle on center(c), E, center(d) we get exists(angle(center(c), E, center(d)))
By directions_draw_angle on B, D, center(d) we get exists(angle(B, D, center(d)))
By directions_draw_angle on center(d), E, F we get exists(angle(center(d), E, F))
By line_containment_inequality on line_intersection(j, altitude(F, B, D)), I, j we get I != line_intersection(j, altitude(F, B, D))
By line_containment_inequality on line_intersection(j, altitude(G, B, D)), E, j we get E != line_intersection(j, altitude(G, B, D))
By line_containment_inequality on line_intersection(Line(D, J), altitude(F, D, J)), E, Line(D, J) we get E != line_intersection(Line(D, J), altitude(F, D, J))
By line_containment_inequality on line_intersection(j, altitude(F, B, D)), J, j we get J != line_intersection(j, altitude(F, B, D))
By line_containment_inequality on line_intersection(j, altitude(F, B, D)), E, j we get E != line_intersection(j, altitude(F, B, D))
By line_circle_intersection_has_at_most_two_points_0 on A, F, J, Circle(A, D, F) we get J not in Circle(A, D, F)
By line_containment_inequality on line_intersection(j, altitude(G, B, D)), C, j we get C != line_intersection(j, altitude(G, B, D))
By line_circle_intersection_has_at_most_two_points_0 on A, G, B, Circle(A, D, F) we get B not in Circle(A, D, F)
By line_containment_inequality on line_intersection(i, altitude(G, A, D)), G, i we get G != line_intersection(i, altitude(G, A, D))
By line_containment_inequality on line_intersection(j, altitude(G, B, D)), F, j we get F != line_intersection(j, altitude(G, B, D))
By line_containment_inequality on line_intersection(j, altitude(G, B, D)), I, j we get I != line_intersection(j, altitude(G, B, D))
By line_containment_inequality on line_intersection(Line(D, J), altitude(F, D, J)), H, Line(D, J) we get H != line_intersection(Line(D, J), altitude(F, D, J))
By line_containment_inequality on line_intersection(j, altitude(E, B, D)), E, j we get E != line_intersection(j, altitude(E, B, D))
By line_containment_inequality on line_intersection(Line(C, D), altitude(E, C, D)), F, Line(C, D) we get F != line_intersection(Line(C, D), altitude(E, C, D))
By line_containment_inequality on line_intersection(i, altitude(F, A, D)), G, i we get G != line_intersection(i, altitude(F, A, D))
By line_containment_inequality on line_intersection(j, altitude(E, B, D)), C, j we get C != line_intersection(j, altitude(E, B, D))
By line_containment_inequality on line_intersection(Line(C, D), altitude(F, C, D)), A, Line(C, D) we get A != line_intersection(Line(C, D), altitude(F, C, D))
By line_containment_inequality on line_intersection(Line(C, D), altitude(E, C, D)), H, Line(C, D) we get H != line_intersection(Line(C, D), altitude(E, C, D))
By line_containment_inequality on line_intersection(i, altitude(F, A, D)), F, i we get F != line_intersection(i, altitude(F, A, D))
By line_containment_inequality on line_intersection(Line(C, D), altitude(E, C, D)), E, Line(C, D) we get E != line_intersection(Line(C, D), altitude(E, C, D))
By line_containment_inequality on line_intersection(Line(C, D), altitude(E, C, D)), J, Line(C, D) we get J != line_intersection(Line(C, D), altitude(E, C, D))
By line_containment_inequality on line_intersection(j, altitude(F, B, D)), A, j we get A != line_intersection(j, altitude(F, B, D))
By line_containment_inequality on line_intersection(j, altitude(E, B, D)), A, j we get A != line_intersection(j, altitude(E, B, D))
By line_containment_inequality on line_intersection(i, altitude(G, A, D)), J, i we get J != line_intersection(i, altitude(G, A, D))
By line_containment_inequality on line_intersection(j, altitude(E, B, D)), F, j we get F != line_intersection(j, altitude(E, B, D))
By line_containment_inequality on line_intersection(Line(D, J), altitude(F, D, J)), G, Line(D, J) we get G != line_intersection(Line(D, J), altitude(F, D, J))
By line_containment_inequality on line_intersection(i, altitude(G, A, D)), C, i we get C != line_intersection(i, altitude(G, A, D))
By line_containment_inequality on line_intersection(i, altitude(G, A, D)), I, i we get I != line_intersection(i, altitude(G, A, D))
By line_containment_inequality on line_intersection(Line(C, D), altitude(F, C, D)), B, Line(C, D) we get B != line_intersection(Line(C, D), altitude(F, C, D))
By line_containment_inequality on line_intersection(j, altitude(G, B, D)), J, j we get J != line_intersection(j, altitude(G, B, D))
By line_containment_inequality on line_intersection(i, altitude(F, A, D)), H, i we get H != line_intersection(i, altitude(F, A, D))
By line_containment_inequality on line_intersection(i, altitude(F, A, D)), C, i we get C != line_intersection(i, altitude(F, A, D))
By power_of_a_point_in_circle on B, Circle(B, D, E) we get 0 == power_of_a_point(B, Circle(B, D, E))
By power_of_a_point_on_circle on E, Circle(B, D, E) we get 0 == power_of_a_point(E, Circle(B, D, E))
By power_of_a_point_on_circle on D, Circle(C, D, E) we get 0 == power_of_a_point(D, Circle(C, D, E))
By power_of_a_point_on_circle on G, Circle(B, D, E) we get 0 == power_of_a_point(G, Circle(B, D, E))
By power_of_a_point_on_circle on E, Circle(C, D, E) we get 0 == power_of_a_point(E, Circle(C, D, E))
By power_of_a_point_on_circle on A, Circle(A, D, F) we get 0 == power_of_a_point(A, Circle(A, D, F))
By power_of_a_point_in_circle on C, Circle(C, D, E) we get 0 == power_of_a_point(C, Circle(C, D, E))
By power_of_a_point_on_circle on G, Circle(A, D, F) we get 0 == power_of_a_point(G, Circle(A, D, F))
By power_of_a_point_in_circle on D, Circle(B, D, E) we get 0 == power_of_a_point(D, Circle(B, D, E))
By power_of_a_point_on_circle on F, Circle(A, D, F) we get 0 == power_of_a_point(F, Circle(A, D, F))
By power_of_a_point_in_circle on D, Circle(A, D, F) we get 0 == power_of_a_point(D, Circle(A, D, F))
By internal_angle_bisector_definition_v0_r on F, C, E, D we get Line(C, D) == internal_angle_bisector(E, D, F)
By power_of_a_point_on_circle on F, Circle(C, D, E) we get 0 == power_of_a_point(F, Circle(C, D, E))
By sas_anti_congruence on H, D, G, H, D, E we get anti_congruent_triangles(D, E, H, D, G, H)
By sas_anti_congruence on H, D, E, H, D, G we get anti_congruent_triangles(D, E, H, D, G, H)
By sas_anti_congruence on H, B, G, H, B, E we get anti_congruent_triangles(B, E, H, B, G, H)
By sas_anti_congruence on G, B, H, E, B, H we get anti_congruent_triangles(B, E, H, B, G, H)
By sas_anti_congruence on E, B, H, G, B, H we get anti_congruent_triangles(B, E, H, B, G, H)
By sas_anti_congruence on H, B, E, H, B, G we get anti_congruent_triangles(B, E, H, B, G, H)
By sas_anti_congruence on G, D, H, E, D, H we get anti_congruent_triangles(D, E, H, D, G, H)
By sas_anti_congruence on E, D, H, G, D, H we get anti_congruent_triangles(D, E, H, D, G, H)
By perpendicular_bisector_sufficient_conditions on G, F, A, D we get Line(A, D) == perpendicular_bisector(F, G)
By anti_similar_triangle_basic_properties on D, C, F, D, C, E we get not_collinear(C, D, F), not_collinear(C, D, E), angle(D, C, F) == 0 - angle(D, C, E) mod 360, angle(C, F, D) == 0 - angle(C, E, D) mod 360, angle(F, D, C) == 0 - angle(E, D, C) mod 360, log(distance(C, D)) + log(distance(C, E)) == log(distance(C, D)) + log(distance(C, F)), log(distance(C, E)) + log(distance(D, F)) == log(distance(C, F)) + log(distance(D, E)), log(distance(D, E)) + log(distance(C, D)) == log(distance(D, F)) + log(distance(C, D))
By anti_similar_triangle_basic_properties on E, C, D, F, C, D we get not_collinear(C, D, E), not_collinear(C, D, F), angle(E, C, D) == 0 - angle(F, C, D) mod 360, angle(C, D, E) == 0 - angle(C, D, F) mod 360, angle(D, E, C) == 0 - angle(D, F, C) mod 360, log(distance(C, E)) + log(distance(C, D)) == log(distance(C, F)) + log(distance(C, D)), log(distance(C, D)) + log(distance(D, E)) == log(distance(C, D)) + log(distance(D, F)), log(distance(D, E)) + log(distance(C, F)) == log(distance(D, F)) + log(distance(C, E))
By perpendicular_bisector_sufficient_conditions on E, G, B, D we get Line(B, D) == perpendicular_bisector(E, G)
By isosceles_triangle_altitude_v2 on D, G, F we get identical(perpendicular_bisector(F, G), internal_angle_bisector(F, D, G), perpendicular_line(D, Line(F, G)))
By isosceles_triangle_altitude_v2 on D, E, G we get identical(perpendicular_bisector(E, G), internal_angle_bisector(E, D, G), perpendicular_line(D, Line(E, G)))
By isosceles_triangle_altitude_v2 on B, G, E we get identical(perpendicular_bisector(E, G), internal_angle_bisector(E, B, G), perpendicular_line(B, Line(E, G)))
By isosceles_triangle_altitude_v2 on B, E, G we get identical(perpendicular_bisector(E, G), internal_angle_bisector(E, B, G), perpendicular_line(B, Line(E, G)))
By isosceles_triangle_altitude_v2 on A, F, G we get identical(perpendicular_bisector(F, G), internal_angle_bisector(F, A, G), perpendicular_line(A, Line(F, G)))
By isosceles_triangle_altitude_v2 on D, F, G we get identical(perpendicular_bisector(F, G), internal_angle_bisector(F, D, G), perpendicular_line(D, Line(F, G)))
By isosceles_triangle_altitude_v2 on A, G, F we get identical(perpendicular_bisector(F, G), internal_angle_bisector(F, A, G), perpendicular_line(A, Line(F, G)))
By isosceles_triangle_altitude_v2 on D, G, E we get identical(perpendicular_bisector(E, G), internal_angle_bisector(E, D, G), perpendicular_line(D, Line(E, G)))
By concyclic_sufficient_conditions_v0 on H, D, J, I we get concyclic(D, H, I, J)
By tangent_definition_from_perpendicularity_v0_r on G, f, c we get tangent(f, c)
By tangent_definition_from_perpendicularity_v0_r on F, h, c we get tangent(h, c)
By tangent_definition_from_perpendicularity_v0_r on E, g, c we get tangent(g, c)
By concyclic_sufficient_conditions_v0 on I, E, D, H we get concyclic(D, E, H, I)
By line_definition on F, line_intersection(Line(D, J), altitude(F, D, J)), altitude(F, D, J) we get altitude(F, D, J) == Line(F, line_intersection(Line(D, J), altitude(F, D, J)))
By line_definition on G, line_intersection(i, altitude(G, A, D)), altitude(G, A, D) we get altitude(G, A, D) == Line(G, line_intersection(i, altitude(G, A, D)))
By perpendicular_line_definition on F, Line(F, G), i we get Line(F, G) == perpendicular_line(F, i)
By concyclic_sufficient_conditions_v0 on E, H, D, J we get concyclic(D, E, H, J)
By line_definition on E, line_intersection(Line(C, D), altitude(E, C, D)), altitude(E, C, D) we get altitude(E, C, D) == Line(E, line_intersection(Line(C, D), altitude(E, C, D)))
By line_definition on line_intersection(j, altitude(E, B, D)), E, altitude(E, B, D) we get altitude(E, B, D) == Line(E, line_intersection(j, altitude(E, B, D)))
By line_definition on line_intersection(Line(C, D), altitude(F, C, D)), F, altitude(F, C, D) we get altitude(F, C, D) == Line(F, line_intersection(Line(C, D), altitude(F, C, D)))
By line_definition on F, line_intersection(i, altitude(F, A, D)), altitude(F, A, D) we get altitude(F, A, D) == Line(F, line_intersection(i, altitude(F, A, D)))
By perpendicular_line_definition on E, Line(E, G), j we get Line(E, G) == perpendicular_line(E, j)
By radical_axis_is_perpendicular_to_center_line on Line(E, I), d, c we get perpendicular(Line(E, I), Line(center(c), center(d)))
By line_definition on line_intersection(j, altitude(G, B, D)), G, altitude(G, B, D) we get altitude(G, B, D) == Line(G, line_intersection(j, altitude(G, B, D)))
By line_definition on line_intersection(j, altitude(F, B, D)), F, altitude(F, B, D) we get altitude(F, B, D) == Line(F, line_intersection(j, altitude(F, B, D)))
By perpendicular_line_definition on G, Line(E, G), j we get Line(E, G) == perpendicular_line(G, j)
By perpendicular_line_definition on G, Line(F, G), i we get Line(F, G) == perpendicular_line(G, i)
By median_definition on D, G, F, i we get i == median(D, F, G)
By median_definition on D, E, G, j we get j == median(D, E, G)
By perpendicular_line_definition on line_intersection(j, altitude(E, B, D)), j, Line(E, G) we get j == perpendicular_line(line_intersection(j, altitude(E, B, D)), Line(E, G))
By perpendicular_line_definition on midpoint(E, G), j, altitude(E, B, D) we get j == perpendicular_line(midpoint(E, G), altitude(E, B, D))
By perpendicular_line_definition on midpoint(F, G), i, altitude(F, A, D) we get i == perpendicular_line(midpoint(F, G), altitude(F, A, D))
By median_definition on A, G, F, i we get i == median(A, F, G)
By median_definition on H, G, E, j we get j == median(H, E, G)
By perpendicular_line_definition on midpoint(F, G), i, altitude(G, A, D) we get i == perpendicular_line(midpoint(F, G), altitude(G, A, D))
By perpendicular_line_definition on line_intersection(j, altitude(G, B, D)), j, Line(E, G) we get j == perpendicular_line(line_intersection(j, altitude(G, B, D)), Line(E, G))
By perpendicular_line_definition on H, j, Line(E, G) we get j == perpendicular_line(H, Line(E, G))
By perpendicular_line_definition on line_intersection(i, altitude(F, A, D)), i, Line(F, G) we get i == perpendicular_line(line_intersection(i, altitude(F, A, D)), Line(F, G))
By median_definition on B, G, E, j we get j == median(B, E, G)
By perpendicular_line_definition on midpoint(E, G), j, altitude(G, B, D) we get j == perpendicular_line(midpoint(E, G), altitude(G, B, D))
By perpendicular_line_definition on midpoint(E, G), j, altitude(F, B, D) we get j == perpendicular_line(midpoint(E, G), altitude(F, B, D))
By perpendicular_line_definition on line_intersection(i, altitude(G, A, D)), i, Line(F, G) we get i == perpendicular_line(line_intersection(i, altitude(G, A, D)), Line(F, G))
By perpendicular_line_definition on line_intersection(j, altitude(F, B, D)), j, Line(E, G) we get j == perpendicular_line(line_intersection(j, altitude(F, B, D)), Line(E, G))
By same_angle_v1 on H, F, A, E we get angle(F, H, E) == angle(A, H, E) + 180 mod 360
By perpendicular_direction_conditions_v0 on E, I, center(d), D we get perpendicular(Line(E, I), Line(D, center(d)))
By perpendicular_direction_conditions_v0 on E, F, D, C we get perpendicular(Line(C, D), Line(E, F))
By same_angle_v0 on H, C, J, E we get angle(C, H, E) == angle(J, H, E) mod 360
By same_angle_v1 on H, A, F, E we get angle(A, H, E) == angle(F, H, E) + 180 mod 360
By same_angle_v1 on E, B, C, H we get angle(B, E, H) == angle(C, E, H) + 180 mod 360
By same_angle_v0 on H, G, I, E we get angle(G, H, E) == angle(I, H, E) mod 360
By same_angle_v1 on H, A, C, E we get angle(A, H, E) == angle(C, H, E) + 180 mod 360
By same_angle_v1 on E, C, B, H we get angle(C, E, H) == angle(B, E, H) + 180 mod 360
By same_angle_v1 on H, A, J, E we get angle(A, H, E) == angle(J, H, E) + 180 mod 360
By same_angle_v0 on H, F, C, E we get angle(C, H, E) == angle(F, H, E) mod 360
By same_angle_v1 on H, J, A, E we get angle(J, H, E) == angle(A, H, E) + 180 mod 360
By same_angle_v1 on H, C, A, E we get angle(C, H, E) == angle(A, H, E) + 180 mod 360
By same_angle_v0 on H, F, J, E we get angle(F, H, E) == angle(J, H, E) mod 360
By between_imply_not_between on E, midpoint(E, G), G we get collinear_and_not_between(G, E, midpoint(E, G))
By between_imply_not_between on G, midpoint(F, G), F we get collinear_and_not_between(F, G, midpoint(F, G))
By between_imply_not_between on G, midpoint(E, G), E we get collinear_and_not_between(E, G, midpoint(E, G))
By between_imply_not_between on F, midpoint(F, G), G we get collinear_and_not_between(G, F, midpoint(F, G))
By in_imply_collinear on midpoint(E, G), D, H we get collinear(D, H, midpoint(E, G))
By tangent_chord_angle_v1 on E, G, I, C we get tangent(Line(C, E), Circle(E, G, I))
By in_imply_collinear on midpoint(E, G), H, B we get collinear(B, H, midpoint(E, G))
By point_on_perpendicular_bisector on G, E, line_intersection(j, altitude(F, B, D)), j we get distance(E, line_intersection(j, altitude(F, B, D))) == distance(G, line_intersection(j, altitude(F, B, D)))
By tangent_chord_angle_v1 on F, G, E, J we get tangent(Line(F, J), Circle(E, F, G))
By tangent_chord_angle_v0 on G, F, E, A we get tangent(Line(A, G), Circle(E, F, G))
By tangent_chord_angle_v1 on G, E, I, A we get tangent(Line(A, G), Circle(E, G, I))
By tangent_chord_angle_v0 on E, G, F, B we get tangent(Line(B, E), Circle(E, F, G))
By tangent_chord_angle_v1 on F, E, G, H we get tangent(Line(F, H), Circle(E, F, G))
By tangent_chord_angle_v1 on E, G, F, C we get tangent(Line(C, E), Circle(E, F, G))
By in_imply_collinear on midpoint(E, G), D, B we get collinear(B, D, midpoint(E, G))
By tangent_chord_angle_v1 on F, E, G, A we get tangent(Line(A, F), Circle(E, F, G))
By tangent_chord_angle_v1 on G, F, E, B we get tangent(Line(B, G), Circle(E, F, G))
By double_perpendicular_and_parallel_v0 on altitude(F, B, D), j, Line(E, G) we get parallel(Line(E, G), altitude(F, B, D))
By tangent_chord_angle_v1 on F, I, G, J we get tangent(Line(F, J), Circle(F, G, I))
By point_on_perpendicular_bisector on G, E, line_intersection(j, altitude(E, B, D)), j we get distance(E, line_intersection(j, altitude(E, B, D))) == distance(G, line_intersection(j, altitude(E, B, D)))
By tangent_chord_angle_v0 on F, E, I, J we get tangent(Line(F, J), Circle(E, F, I))
By tangent_chord_angle_v0 on F, I, E, H we get tangent(Line(F, H), Circle(E, F, I))
By tangent_chord_angle_v0 on G, I, F, A we get tangent(Line(A, G), Circle(F, G, I))
By tangent_chord_angle_v1 on E, F, I, B we get tangent(Line(B, E), Circle(E, F, I))
By tangent_chord_angle_v1 on E, I, F, C we get tangent(Line(C, E), Circle(E, F, I))
By directions_draw_angle on E, H, J we get exists(angle(E, H, J))
By tangent_chord_angle_v1 on F, G, E, C we get tangent(Line(C, F), Circle(E, F, G))
By point_on_perpendicular_bisector on F, G, line_intersection(i, altitude(G, A, D)), i we get distance(F, line_intersection(i, altitude(G, A, D))) == distance(G, line_intersection(i, altitude(G, A, D)))
By tangent_chord_angle_v1 on F, I, G, C we get tangent(Line(C, F), Circle(F, G, I))
By tangent_chord_angle_v1 on F, I, E, C we get tangent(Line(C, F), Circle(E, F, I))
By in_imply_collinear on midpoint(F, G), D, A we get collinear(A, D, midpoint(F, G))
By tangent_chord_angle_v0 on F, I, G, A we get tangent(Line(A, F), Circle(F, G, I))
By tangent_chord_angle_v1 on G, I, F, B we get tangent(Line(B, G), Circle(F, G, I))
By tangent_chord_angle_v1 on G, I, E, B we get tangent(Line(B, G), Circle(E, G, I))
By tangent_chord_angle_v1 on F, E, I, A we get tangent(Line(A, F), Circle(E, F, I))
By tangent_chord_angle_v1 on F, G, I, H we get tangent(Line(F, H), Circle(F, G, I))
By altitude_definition on E, D, H, Line(E, G) we get Line(E, G) == altitude(E, D, H)
By altitude_definition on G, D, B, Line(E, G) we get Line(E, G) == altitude(G, B, D)
By altitude_definition on G, D, H, Line(E, G) we get Line(E, G) == altitude(G, D, H)
By sss_anti_congruence on G, H, E, E, H, G we get anti_congruent_triangles(E, G, H, G, E, H)
By directions_draw_angle on F, E, H we get exists(angle(F, E, H))
By line_containment_inequality on midpoint(F, G), B, i we get B != midpoint(F, G)
By tangent_chord_angle_v1 on E, I, G, B we get tangent(Line(B, E), Circle(E, G, I))
By point_on_perpendicular_bisector on G, E, line_intersection(j, altitude(G, B, D)), j we get distance(E, line_intersection(j, altitude(G, B, D))) == distance(G, line_intersection(j, altitude(G, B, D)))
By directions_draw_angle on J, H, E we get exists(angle(J, H, E))
By point_on_perpendicular_bisector on F, G, line_intersection(i, altitude(F, A, D)), i we get distance(F, line_intersection(i, altitude(F, A, D))) == distance(G, line_intersection(i, altitude(F, A, D)))
By double_perpendicular_and_parallel_v0 on altitude(E, B, D), j, Line(E, G) we get parallel(Line(E, G), altitude(E, B, D))
By altitude_definition on G, B, H, Line(E, G) we get Line(E, G) == altitude(G, B, H)
By not_in_line_equivalent_to_not_collinear_v0_r on F, E, H we get F not in Line(E, H)
By isosceles_triangle_properties on H, E, G we get distance(E, H) == distance(G, H), angle(E, G, H) == angle(H, E, G) mod 360
By altitude_definition on G, A, D, Line(F, G) we get Line(F, G) == altitude(G, A, D)
By double_perpendicular_and_parallel_v0 on altitude(G, A, D), i, Line(F, G) we get parallel(Line(F, G), altitude(G, A, D))
By altitude_definition on E, H, B, Line(E, G) we get Line(E, G) == altitude(E, B, H)
By line_inequality on Line(E, H), Line(C, D), H we get Line(C, D) != Line(E, H)
By isosceles_triangle_properties on H, G, E we get distance(E, H) == distance(G, H), angle(G, E, H) == angle(H, G, E) mod 360
By sss_anti_congruence on E, H, G, G, H, E we get anti_congruent_triangles(E, G, H, G, E, H)
By double_perpendicular_and_parallel_v0 on Line(F, G), i, altitude(F, A, D) we get parallel(Line(F, G), altitude(F, A, D))
By directions_draw_angle on F, H, E we get exists(angle(F, H, E))
By altitude_definition on F, D, A, Line(F, G) we get Line(F, G) == altitude(F, A, D)
By double_perpendicular_and_parallel_v0 on Line(E, G), j, altitude(G, B, D) we get parallel(Line(E, G), altitude(G, B, D))
By altitude_definition on E, D, B, Line(E, G) we get Line(E, G) == altitude(E, B, D)
By sss_anti_congruence on H, G, E, H, E, G we get anti_congruent_triangles(E, G, H, G, E, H)
By directions_draw_angle on I, H, E we get exists(angle(I, H, E))
By sss_anti_congruence on E, G, H, G, E, H we get anti_congruent_triangles(E, G, H, G, E, H)
By line_inequality on Line(E, H), Line(F, I), H we get Line(E, H) != Line(F, I)
By line_inequality on Line(E, H), Line(D, I), H we get Line(D, I) != Line(E, H)
By sss_anti_congruence on G, E, H, E, G, H we get anti_congruent_triangles(E, G, H, G, E, H)
By line_inequality on Line(E, H), Line(E, G), H we get Line(E, G) != Line(E, H)
By directions_draw_angle on I, E, H we get exists(angle(I, E, H))
By directions_draw_angle on J, E, H we get exists(angle(J, E, H))
By sss_anti_congruence on H, E, G, H, G, E we get anti_congruent_triangles(E, G, H, G, E, H)
By line_containment_inequality on midpoint(E, G), C, j we get C != midpoint(E, G)
By directions_draw_angle on E, H, G we get exists(angle(E, H, G))
By line_containment_inequality on midpoint(E, G), F, j we get F != midpoint(E, G)
By line_circle_intersection_has_at_most_two_points_0 on F, G, midpoint(F, G), Circle(A, D, F) we get midpoint(F, G) not in Circle(A, D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, H we get D not in Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on J, E, H we get J not in Line(E, H)
By line_inequality on Line(E, H), i, E we get i != Line(E, H)
By directions_draw_angle on C, H, E we get exists(angle(C, H, E))
By directions_draw_angle on G, H, E we get exists(angle(G, H, E))
By directions_draw_angle on H, E, G we get exists(angle(H, E, G))
By directions_draw_angle on E, H, I we get exists(angle(E, H, I))
By directions_draw_angle on H, E, F we get exists(angle(H, E, F))
By line_inequality on Line(E, H), Line(D, E), H we get Line(D, E) != Line(E, H)
By line_inequality on Line(E, H), j, E we get j != Line(E, H)
By directions_draw_angle on A, H, E we get exists(angle(A, H, E))
By directions_draw_angle on E, H, F we get exists(angle(E, H, F))
By directions_draw_angle on H, E, C we get exists(angle(H, E, C))
By line_inequality on Line(E, H), g, H we get g != Line(E, H)
By line_circle_intersection_has_at_most_two_points_0 on E, G, midpoint(E, G), Circle(B, D, E) we get midpoint(E, G) not in Circle(B, D, E)
By directions_draw_angle on H, E, center(d) we get exists(angle(H, E, center(d)))
By line_inequality on Line(E, H), Line(E, J), H we get Line(E, H) != Line(E, J)
By directions_draw_angle on E, H, C we get exists(angle(E, H, C))
By directions_draw_angle on center(d), E, H we get exists(angle(center(d), E, H))
By directions_draw_angle on E, H, A we get exists(angle(E, H, A))
By line_inequality on Line(E, H), Line(D, F), E we get Line(D, F) != Line(E, H)
By directions_draw_angle on H, E, I we get exists(angle(H, E, I))
By directions_draw_angle on C, E, H we get exists(angle(C, E, H))
By directions_draw_angle on H, E, J we get exists(angle(H, E, J))
By directions_draw_angle on G, E, H we get exists(angle(G, E, H))
By line_inequality on Line(E, H), Line(F, G), E we get Line(E, H) != Line(F, G)
By line_inequality on Line(E, H), Line(I, J), E we get Line(E, H) != Line(I, J)
By line_circle_intersection_has_at_most_two_points_0 on E, G, midpoint(E, G), c we get midpoint(E, G) not in c
By not_in_line_equivalent_to_not_collinear_v0_r on I, H, E we get I not in Line(E, H)
By line_containment_inequality on midpoint(F, G), E, i we get E != midpoint(F, G)
By line_containment_inequality on midpoint(F, G), H, i we get H != midpoint(F, G)
By line_inequality on Line(E, H), f, H we get f != Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on B, E, H we get B not in Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, H we get G not in Line(E, H)
By line_inequality on Line(E, H), k, E we get k != Line(E, H)
By line_circle_intersection_has_at_most_two_points_0 on G, F, midpoint(F, G), c we get midpoint(F, G) not in c
By line_inequality on Line(E, H), Line(D, G), E we get Line(D, G) != Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on C, H, E we get C not in Line(E, H)
By line_inequality on Line(E, H), h, E we get h != Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on A, E, H we get A not in Line(E, H)
By line_inequality on Line(E, H), Line(D, J), E we get Line(D, J) != Line(E, H)
By line_containment_inequality on midpoint(F, G), I, i we get I != midpoint(F, G)
By line_containment_inequality on midpoint(F, G), C, i we get C != midpoint(F, G)
By line_containment_inequality on midpoint(E, G), A, j we get A != midpoint(E, G)
By line_inequality on Line(E, H), Line(E, F), H we get Line(E, F) != Line(E, H)
By line_containment_inequality on midpoint(E, G), I, j we get I != midpoint(E, G)
By line_containment_inequality on midpoint(F, G), J, i we get J != midpoint(F, G)
By line_containment_inequality on midpoint(E, G), J, j we get J != midpoint(E, G)
By line_inequality on Line(E, H), Line(E, I), H we get Line(E, H) != Line(E, I)
By internal_angle_bisector_definition_v0_r on E, D, I, H we get Line(D, H) == internal_angle_bisector(E, H, I)
By circumcenter_perpendicular_bisectors on E, G, F we get circumcenter(E, F, G) in perpendicular_bisector(E, G), circumcenter(E, F, G) in perpendicular_bisector(F, G), circumcenter(E, F, G) in perpendicular_bisector(E, F)
By isosceles_triangle_midpoint on A, G, F we get midpoint(F, G) in median(A, F, G)
By altitude_definition on D, G, E, j we get j == altitude(D, E, G)
By isosceles_triangle_midpoint on D, G, F we get midpoint(F, G) in median(D, F, G)
By collinear_definition on G, E, midpoint(E, G) we get E in Line(G, midpoint(E, G)), midpoint(E, G) in Line(E, G), Line(E, G) == Line(G, midpoint(E, G)), 0 == 2 * angle(E, G, midpoint(E, G)) mod 360
By internal_angle_bisector_definition_v0_r on D, D, D, G we get Line(D, G) == internal_angle_bisector(D, G, D)
By perpendicular_bisector_properties on G, E we get perpendicular(Line(E, G), perpendicular_bisector(E, G)), midpoint(E, G) == line_intersection(Line(E, G), perpendicular_bisector(E, G))
By isosceles_triangle_midpoint on H, G, E we get midpoint(E, G) in median(H, E, G)
By collinear_definition on F, midpoint(F, G), G we get midpoint(F, G) in Line(F, G), G in Line(F, midpoint(F, G)), Line(F, G) == Line(F, midpoint(F, G)), 0 == 2 * angle(midpoint(F, G), F, G) mod 360
By internal_angle_bisector_definition_v0_r on D, D, D, I we get Line(D, I) == internal_angle_bisector(D, I, D)
By internal_angle_bisector_definition_v0_r on I, D, E, J we get Line(D, J) == internal_angle_bisector(E, J, I)
By internal_angle_bisector_definition_v0_r on G, B, E, H we get Line(B, H) == internal_angle_bisector(E, H, G)
By collinear_definition on G, midpoint(E, G), E we get midpoint(E, G) in Line(E, G), E in Line(G, midpoint(E, G)), Line(E, G) == Line(G, midpoint(E, G)), 0 == 2 * angle(midpoint(E, G), G, E) mod 360
By altitude_definition on A, G, F, i we get i == altitude(A, F, G)
By isosceles_triangle_midpoint on B, G, E we get midpoint(E, G) in median(B, E, G)
By perpendicular_bisector_properties on G, F we get perpendicular(Line(F, G), perpendicular_bisector(F, G)), midpoint(F, G) == line_intersection(Line(F, G), perpendicular_bisector(F, G))
By altitude_definition on D, F, G, i we get i == altitude(D, F, G)
By isosceles_triangle_altitude_v3 on midpoint(E, G), E, G we get identical(perpendicular_bisector(E, G), internal_angle_bisector(E, midpoint(E, G), G), perpendicular_line(midpoint(E, G), Line(E, G)))
By collinear_definition on E, G, midpoint(E, G) we get G in Line(E, midpoint(E, G)), midpoint(E, G) in Line(E, G), Line(E, G) == Line(E, midpoint(E, G)), 0 == 2 * angle(G, E, midpoint(E, G)) mod 360
By internal_angle_bisector_definition_v0_r on D, D, D, E we get Line(D, E) == internal_angle_bisector(D, E, D)
By internal_angle_bisector_definition_v0_r on E, D, I, center(d) we get Line(D, center(d)) == internal_angle_bisector(E, center(d), I)
By internal_angle_bisector_definition_v0_r on E, B, I, H we get Line(B, H) == internal_angle_bisector(E, H, I)
By collinear_definition on F, G, midpoint(F, G) we get G in Line(F, midpoint(F, G)), midpoint(F, G) in Line(F, G), Line(F, G) == Line(F, midpoint(F, G)), 0 == 2 * angle(G, F, midpoint(F, G)) mod 360
By isosceles_triangle_altitude_v3 on midpoint(E, G), G, E we get identical(perpendicular_bisector(E, G), internal_angle_bisector(E, midpoint(E, G), G), perpendicular_line(midpoint(E, G), Line(E, G)))
By internal_angle_bisector_definition_v0_r on I, center(d), E, D we get Line(D, center(d)) == internal_angle_bisector(E, D, I)
By internal_angle_bisector_definition_v0_r on G, D, E, H we get Line(D, H) == internal_angle_bisector(E, H, G)
By collinear_definition on G, midpoint(F, G), F we get midpoint(F, G) in Line(F, G), F in Line(G, midpoint(F, G)), Line(F, G) == Line(G, midpoint(F, G)), 0 == 2 * angle(midpoint(F, G), G, F) mod 360
By collinear_definition on G, F, midpoint(F, G) we get F in Line(G, midpoint(F, G)), midpoint(F, G) in Line(F, G), Line(F, G) == Line(G, midpoint(F, G)), 0 == 2 * angle(F, G, midpoint(F, G)) mod 360
By altitude_definition on B, G, E, j we get j == altitude(B, E, G)
By collinear_definition on E, midpoint(E, G), G we get midpoint(E, G) in Line(E, G), G in Line(E, midpoint(E, G)), Line(E, G) == Line(E, midpoint(E, G)), 0 == 2 * angle(midpoint(E, G), E, G) mod 360
By isosceles_triangle_midpoint on D, E, G we get midpoint(E, G) in median(D, E, G)
By isosceles_triangle_altitude_v1 on midpoint(F, G), G, F we get identical(perpendicular_bisector(F, G), internal_angle_bisector(F, midpoint(F, G), G), perpendicular_line(midpoint(F, G), Line(F, G)))
By internal_angle_bisector_definition_v0_r on D, D, D, F we get Line(D, F) == internal_angle_bisector(D, F, D)
By isosceles_triangle_altitude_v3 on midpoint(F, G), F, G we get identical(perpendicular_bisector(F, G), internal_angle_bisector(F, midpoint(F, G), G), perpendicular_line(midpoint(F, G), Line(F, G)))
By isosceles_triangle_altitude_v3 on midpoint(F, G), G, F we get identical(perpendicular_bisector(F, G), internal_angle_bisector(F, midpoint(F, G), G), perpendicular_line(midpoint(F, G), Line(F, G)))
By isosceles_triangle_altitude_v1 on midpoint(E, G), G, E we get identical(perpendicular_bisector(E, G), internal_angle_bisector(E, midpoint(E, G), G), perpendicular_line(midpoint(E, G), Line(E, G)))
By isosceles_triangle_altitude_v1 on midpoint(E, G), E, G we get identical(perpendicular_bisector(E, G), internal_angle_bisector(E, midpoint(E, G), G), perpendicular_line(midpoint(E, G), Line(E, G)))
By perpendicular_lines_draw_intersection on Line(F, G), i we get exists(line_intersection(i, Line(F, G)))
By perpendicular_lines_draw_intersection on j, Line(E, G) we get exists(line_intersection(j, Line(E, G)))
By isosceles_triangle_altitude_v1 on midpoint(F, G), F, G we get identical(perpendicular_bisector(F, G), internal_angle_bisector(F, midpoint(F, G), G), perpendicular_line(midpoint(F, G), Line(F, G)))
By collinear_definition on midpoint(E, G), G, E we get G in Line(E, midpoint(E, G)), E in Line(G, midpoint(E, G)), Line(E, midpoint(E, G)) == Line(G, midpoint(E, G)), 0 == 2 * angle(G, midpoint(E, G), E) mod 360
By isosceles_triangle_properties on midpoint(F, G), F, G we get distance(F, midpoint(F, G)) == distance(G, midpoint(F, G)), angle(F, G, midpoint(F, G)) == angle(midpoint(F, G), F, G) mod 360
By collinear_definition on midpoint(F, G), F, G we get F in Line(G, midpoint(F, G)), G in Line(F, midpoint(F, G)), Line(F, midpoint(F, G)) == Line(G, midpoint(F, G)), 0 == 2 * angle(F, midpoint(F, G), G) mod 360
By anti_similar_triangle_basic_properties on E, B, H, G, B, H we get not_collinear(B, E, H), not_collinear(B, G, H), angle(E, B, H) == 0 - angle(G, B, H) mod 360, angle(B, H, E) == 0 - angle(B, H, G) mod 360, angle(H, E, B) == 0 - angle(H, G, B) mod 360, log(distance(B, E)) + log(distance(B, H)) == log(distance(B, G)) + log(distance(B, H)), log(distance(B, H)) + log(distance(E, H)) == log(distance(B, H)) + log(distance(G, H)), log(distance(E, H)) + log(distance(B, G)) == log(distance(G, H)) + log(distance(B, E))
By anti_similar_triangle_basic_properties on F, I, D, I, F, D we get not_collinear(D, F, I), not_collinear(D, F, I), angle(F, I, D) == 0 - angle(I, F, D) mod 360, angle(I, D, F) == 0 - angle(F, D, I) mod 360, angle(D, F, I) == 0 - angle(D, I, F) mod 360, log(distance(F, I)) + log(distance(D, F)) == log(distance(F, I)) + log(distance(D, I)), log(distance(D, F)) + log(distance(D, F)) == log(distance(D, I)) + log(distance(D, I)), log(distance(D, F)) + log(distance(F, I)) == log(distance(D, I)) + log(distance(F, I))
By log_of_2_times_distance on E, G, G, midpoint(E, G) we get log(distance(E, G)) == 0.6931471805599453 + log(distance(G, midpoint(E, G)))
By anti_similar_triangle_basic_properties on G, H, B, E, H, B we get not_collinear(B, G, H), not_collinear(B, E, H), angle(G, H, B) == 0 - angle(E, H, B) mod 360, angle(H, B, G) == 0 - angle(H, B, E) mod 360, angle(B, G, H) == 0 - angle(B, E, H) mod 360, log(distance(E, H)) + log(distance(B, H)) == log(distance(G, H)) + log(distance(B, H)), log(distance(B, H)) + log(distance(B, E)) == log(distance(B, H)) + log(distance(B, G)), log(distance(B, E)) + log(distance(G, H)) == log(distance(B, G)) + log(distance(E, H))
By altitude_definition on H, E, G, j we get j == altitude(H, E, G)
By anti_similar_triangle_basic_properties on I, D, G, G, D, I we get not_collinear(D, G, I), not_collinear(D, G, I), angle(I, D, G) == 0 - angle(G, D, I) mod 360, angle(D, G, I) == 0 - angle(D, I, G) mod 360, angle(G, I, D) == 0 - angle(I, G, D) mod 360, log(distance(D, G)) + log(distance(D, G)) == log(distance(D, I)) + log(distance(D, I)), log(distance(D, G)) + log(distance(G, I)) == log(distance(D, I)) + log(distance(G, I)), log(distance(G, I)) + log(distance(D, G)) == log(distance(G, I)) + log(distance(D, I))
By isosceles_triangle_properties on midpoint(F, G), G, F we get distance(F, midpoint(F, G)) == distance(G, midpoint(F, G)), angle(G, F, midpoint(F, G)) == angle(midpoint(F, G), G, F) mod 360
By anti_similar_triangle_basic_properties on E, D, H, G, D, H we get not_collinear(D, E, H), not_collinear(D, G, H), angle(E, D, H) == 0 - angle(G, D, H) mod 360, angle(D, H, E) == 0 - angle(D, H, G) mod 360, angle(H, E, D) == 0 - angle(H, G, D) mod 360, log(distance(D, E)) + log(distance(D, H)) == log(distance(D, G)) + log(distance(D, H)), log(distance(D, H)) + log(distance(E, H)) == log(distance(D, H)) + log(distance(G, H)), log(distance(E, H)) + log(distance(D, G)) == log(distance(G, H)) + log(distance(D, E))
By log_of_2_times_distance on G, E, midpoint(E, G), E we get log(distance(E, G)) == 0.6931471805599453 + log(distance(E, midpoint(E, G)))
By anti_similar_triangle_basic_properties on D, E, H, D, G, H we get not_collinear(D, E, H), not_collinear(D, G, H), angle(D, E, H) == 0 - angle(D, G, H) mod 360, angle(E, H, D) == 0 - angle(G, H, D) mod 360, angle(H, D, E) == 0 - angle(H, D, G) mod 360, log(distance(D, E)) + log(distance(G, H)) == log(distance(D, G)) + log(distance(E, H)), log(distance(E, H)) + log(distance(D, H)) == log(distance(G, H)) + log(distance(D, H)), log(distance(D, H)) + log(distance(D, E)) == log(distance(D, H)) + log(distance(D, G))
By anti_similar_triangle_basic_properties on D, E, I, D, I, E we get not_collinear(D, E, I), not_collinear(D, E, I), angle(D, E, I) == 0 - angle(D, I, E) mod 360, angle(E, I, D) == 0 - angle(I, E, D) mod 360, angle(I, D, E) == 0 - angle(E, D, I) mod 360, log(distance(D, E)) + log(distance(E, I)) == log(distance(D, I)) + log(distance(E, I)), log(distance(E, I)) + log(distance(D, E)) == log(distance(E, I)) + log(distance(D, I)), log(distance(D, E)) + log(distance(D, E)) == log(distance(D, I)) + log(distance(D, I))
By log_of_2_times_distance on F, G, midpoint(F, G), G we get log(distance(F, G)) == 0.6931471805599453 + log(distance(G, midpoint(F, G)))
By isosceles_triangle_properties on midpoint(E, G), E, G we get distance(E, midpoint(E, G)) == distance(G, midpoint(E, G)), angle(E, G, midpoint(E, G)) == angle(midpoint(E, G), E, G) mod 360
By isosceles_triangle_properties on midpoint(E, G), G, E we get distance(E, midpoint(E, G)) == distance(G, midpoint(E, G)), angle(G, E, midpoint(E, G)) == angle(midpoint(E, G), G, E) mod 360
By log_of_2_times_distance on F, G, midpoint(F, G), F we get log(distance(F, G)) == 0.6931471805599453 + log(distance(F, midpoint(F, G)))
By collinear_definition on midpoint(F, G), G, F we get G in Line(F, midpoint(F, G)), F in Line(G, midpoint(F, G)), Line(F, midpoint(F, G)) == Line(G, midpoint(F, G)), 0 == 2 * angle(G, midpoint(F, G), F) mod 360
By collinear_definition on midpoint(E, G), E, G we get E in Line(G, midpoint(E, G)), G in Line(E, midpoint(E, G)), Line(E, midpoint(E, G)) == Line(G, midpoint(E, G)), 0 == 2 * angle(E, midpoint(E, G), G) mod 360
By isosceles_triangle_altitude_v3 on H, E, G we get identical(perpendicular_bisector(E, G), internal_angle_bisector(E, H, G), perpendicular_line(H, Line(E, G)))
By isosceles_triangle_altitude_v3 on H, G, E we get identical(perpendicular_bisector(E, G), internal_angle_bisector(E, H, G), perpendicular_line(H, Line(E, G)))
By anti_similar_triangle_basic_properties on F, H, I, G, H, F we get not_collinear(F, H, I), not_collinear(F, G, H), angle(F, H, I) == 0 - angle(G, H, F) mod 360, angle(H, I, F) == 0 - angle(H, F, G) mod 360, angle(I, F, H) == 0 - angle(F, G, H) mod 360, log(distance(F, H)) + log(distance(F, H)) == log(distance(G, H)) + log(distance(H, I)), log(distance(F, H)) + log(distance(F, I)) == log(distance(H, I)) + log(distance(F, G)), log(distance(F, G)) + log(distance(F, H)) == log(distance(F, I)) + log(distance(G, H))
By power_of_a_point_definition on C, E, B, Circle(B, D, E) we get log(distance(C, E)) + log(distance(B, C)) == log(power_of_a_point(C, Circle(B, D, E)))
By anti_similar_triangle_basic_properties on G, F, H, F, I, H we get not_collinear(F, G, H), not_collinear(F, H, I), angle(G, F, H) == 0 - angle(F, I, H) mod 360, angle(F, H, G) == 0 - angle(I, H, F) mod 360, angle(H, G, F) == 0 - angle(H, F, I) mod 360, log(distance(F, G)) + log(distance(H, I)) == log(distance(F, I)) + log(distance(F, H)), log(distance(F, H)) + log(distance(F, H)) == log(distance(H, I)) + log(distance(G, H)), log(distance(F, H)) + log(distance(F, G)) == log(distance(G, H)) + log(distance(F, I))
By perpendicular_bisector_sufficient_conditions on F, E, C, D we get Line(C, D) == perpendicular_bisector(E, F)
By power_of_a_point_definition on B, C, E, Circle(C, D, E) we get log(distance(B, C)) + log(distance(B, E)) == log(power_of_a_point(B, Circle(C, D, E)))
By power_of_a_point_definition on A, C, F, Circle(C, D, E) we get log(distance(A, C)) + log(distance(A, F)) == log(power_of_a_point(A, Circle(C, D, E)))
By perpendicular_bisector_sufficient_conditions on I, E, center(d), D we get Line(D, center(d)) == perpendicular_bisector(E, I)
By power_of_a_point_definition on B, A, G, Circle(A, D, F) we get log(distance(A, B)) + log(distance(B, G)) == log(power_of_a_point(B, Circle(A, D, F)))
By power_of_a_point_definition on C, F, A, Circle(A, D, F) we get log(distance(C, F)) + log(distance(A, C)) == log(power_of_a_point(C, Circle(A, D, F)))
By power_of_a_point_definition on A, G, B, Circle(B, D, E) we get log(distance(A, G)) + log(distance(A, B)) == log(power_of_a_point(A, Circle(B, D, E)))
By isosceles_triangle_altitude_v2 on D, F, E we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, D, F), perpendicular_line(D, Line(E, F)))
By isosceles_triangle_altitude_v2 on D, E, F we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, D, F), perpendicular_line(D, Line(E, F)))
By power_of_a_point_definition on H, B, D, Circle(B, D, E) we get log(distance(B, H)) + log(distance(D, H)) == log(power_of_a_point(H, Circle(B, D, E)))
By power_of_a_point_definition on J, C, F, Circle(C, D, E) we get log(distance(C, J)) + log(distance(F, J)) == log(power_of_a_point(J, Circle(C, D, E)))
By isosceles_triangle_altitude_v2 on C, E, F we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, C, F), perpendicular_line(C, Line(E, F)))
By isosceles_triangle_altitude_v2 on C, F, E we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, C, F), perpendicular_line(C, Line(E, F)))
By power_of_a_point_definition on J, F, A, Circle(A, D, F) we get log(distance(F, J)) + log(distance(A, J)) == log(power_of_a_point(J, Circle(A, D, F)))
By power_of_a_point_definition on H, F, C, Circle(C, D, E) we get log(distance(F, H)) + log(distance(C, H)) == log(power_of_a_point(H, Circle(C, D, E)))
By power_of_a_point_definition on H, A, F, Circle(A, D, F) we get log(distance(A, H)) + log(distance(F, H)) == log(power_of_a_point(H, Circle(A, D, F)))
By concyclic_sufficient_conditions_v0 on I, J, E, H we get concyclic(E, H, I, J)
By perpendicular_line_definition on F, Line(E, F), Line(C, D) we get Line(E, F) == perpendicular_line(F, Line(C, D))
By perpendicular_line_definition on E, Line(E, F), Line(C, D) we get Line(E, F) == perpendicular_line(E, Line(C, D))
By line_intersection_definition on H, Line(E, H), h we get H == line_intersection(h, Line(E, H))
By perpendicular_line_definition on line_intersection(Line(C, D), altitude(F, C, D)), Line(C, D), Line(E, F) we get Line(C, D) == perpendicular_line(line_intersection(Line(C, D), altitude(F, C, D)), Line(E, F))
By perpendicular_line_definition on midpoint(E, F), Line(C, D), altitude(E, C, D) we get Line(C, D) == perpendicular_line(midpoint(E, F), altitude(E, C, D))
By line_intersection_definition on H, Line(E, H), j we get H == line_intersection(j, Line(E, H))
By line_intersection_definition on E, Line(E, I), Line(E, H) we get E == line_intersection(Line(E, H), Line(E, I))
By perpendicular_line_definition on I, Line(E, I), Line(D, center(d)) we get Line(E, I) == perpendicular_line(I, Line(D, center(d)))
By median_definition on D, F, E, Line(C, D) we get Line(C, D) == median(D, E, F)
By line_intersection_definition on E, Line(E, H), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, H))
By line_intersection_definition on E, Line(E, F), Line(E, H) we get E == line_intersection(Line(E, F), Line(E, H))
By line_intersection_definition on E, g, Line(E, H) we get E == line_intersection(g, Line(E, H))
By line_intersection_definition on E, Line(E, G), Line(E, H) we get E == line_intersection(Line(E, G), Line(E, H))
By perpendicular_line_definition on midpoint(E, F), Line(C, D), altitude(F, C, D) we get Line(C, D) == perpendicular_line(midpoint(E, F), altitude(F, C, D))
By perpendicular_line_definition on D, Line(D, center(d)), Line(E, I) we get Line(D, center(d)) == perpendicular_line(D, Line(E, I))
By perpendicular_line_definition on line_intersection(Line(C, D), altitude(E, C, D)), Line(C, D), Line(E, F) we get Line(C, D) == perpendicular_line(line_intersection(Line(C, D), altitude(E, C, D)), Line(E, F))
By line_intersection_definition on H, k, Line(E, H) we get H == line_intersection(k, Line(E, H))
By median_definition on C, E, F, Line(C, D) we get Line(C, D) == median(C, E, F)
By median_definition on D, E, I, Line(D, center(d)) we get median(D, E, I) == Line(D, center(d))
By perpendicular_line_definition on center(d), Line(D, center(d)), Line(E, I) we get Line(D, center(d)) == perpendicular_line(center(d), Line(E, I))
By perpendicular_line_definition on E, Line(E, I), Line(D, center(d)) we get Line(E, I) == perpendicular_line(E, Line(D, center(d)))
By line_intersection_definition on E, Line(E, H), Line(E, J) we get E == line_intersection(Line(E, H), Line(E, J))
By line_unique_intersection_v1 on Line(C, D), j, D, midpoint(E, G) we get midpoint(E, G) not in Line(C, D)
By line_unique_intersection_v1 on j, i, D, midpoint(F, G) we get midpoint(F, G) not in j
By line_unique_intersection_v1 on Line(D, G), Line(E, G), G, midpoint(E, G) we get midpoint(E, G) not in Line(D, G)
By line_unique_intersection_v1 on Line(D, E), Line(E, G), E, midpoint(E, G) we get midpoint(E, G) not in Line(D, E)
By line_unique_intersection_v1 on h, Line(F, G), F, midpoint(F, G) we get midpoint(F, G) not in h
By line_unique_intersection_v1 on k, Line(E, G), G, midpoint(E, G) we get midpoint(E, G) not in k
By line_unique_intersection_v1 on f, i, A, midpoint(F, G) we get midpoint(F, G) not in f
By line_unique_intersection_v1 on Line(D, E), i, D, midpoint(F, G) we get midpoint(F, G) not in Line(D, E)
By line_unique_intersection_v1 on Line(F, I), Line(F, G), F, midpoint(F, G) we get midpoint(F, G) not in Line(F, I)
By line_unique_intersection_v1 on f, j, B, midpoint(E, G) we get midpoint(E, G) not in f
By line_unique_intersection_v1 on Line(F, G), Line(E, G), G, midpoint(E, G) we get midpoint(E, G) not in Line(F, G)
By line_unique_intersection_v1 on Line(E, J), Line(E, G), E, midpoint(E, G) we get midpoint(E, G) not in Line(E, J)
By line_unique_intersection_v1 on Line(D, F), i, D, midpoint(F, G) we get midpoint(F, G) not in Line(D, F)
By line_unique_intersection_v1 on Line(E, F), Line(E, G), E, midpoint(E, G) we get midpoint(E, G) not in Line(E, F)
By line_unique_intersection_v1 on Line(D, F), j, D, midpoint(E, G) we get midpoint(E, G) not in Line(D, F)
By line_unique_intersection_v1 on g, j, B, midpoint(E, G) we get midpoint(E, G) not in g
By line_unique_intersection_v1 on Line(E, F), Line(F, G), F, midpoint(F, G) we get midpoint(F, G) not in Line(E, F)
By line_unique_intersection_v1 on Line(D, I), j, D, midpoint(E, G) we get midpoint(E, G) not in Line(D, I)
By line_unique_intersection_v1 on i, j, D, midpoint(E, G) we get midpoint(E, G) not in i
By line_unique_intersection_v1 on Line(C, D), i, D, midpoint(F, G) we get midpoint(F, G) not in Line(C, D)
By line_unique_intersection_v1 on Line(D, I), i, D, midpoint(F, G) we get midpoint(F, G) not in Line(D, I)
By line_unique_intersection_v1 on Line(E, G), Line(F, G), G, midpoint(F, G) we get midpoint(F, G) not in Line(E, G)
By line_unique_intersection_v1 on Line(E, H), Line(E, G), E, midpoint(E, G) we get midpoint(E, G) not in Line(E, H)
By line_unique_intersection_v1 on Line(D, G), i, D, midpoint(F, G) we get midpoint(F, G) not in Line(D, G)
By line_unique_intersection_v1 on Line(D, J), j, D, midpoint(E, G) we get midpoint(E, G) not in Line(D, J)
By line_unique_intersection_v1 on k, Line(F, G), G, midpoint(F, G) we get midpoint(F, G) not in k
By line_unique_intersection_v1 on Line(E, I), Line(E, G), E, midpoint(E, G) we get midpoint(E, G) not in Line(E, I)
By line_unique_intersection_v1 on Line(D, J), i, D, midpoint(F, G) we get midpoint(F, G) not in Line(D, J)
By line_unique_intersection_v1 on h, j, H, midpoint(E, G) we get midpoint(E, G) not in h
By collinear_and_not_between_implies_orientation on I, midpoint(F, G), G, F we get orientation(F, I, G) == orientation(G, midpoint(F, G), I) mod 360
By collinear_and_not_between_implies_orientation on C, midpoint(E, G), E, G we get orientation(C, E, G) == orientation(C, E, midpoint(E, G)) mod 360
By collinear_and_not_between_implies_orientation on H, midpoint(F, G), F, G we get orientation(F, G, H) == orientation(F, midpoint(F, G), H) mod 360
By collinear_and_not_between_implies_orientation on E, F, G, midpoint(F, G) we get orientation(E, G, F) == orientation(E, G, midpoint(F, G)) mod 360
By projection_definition on F, line_intersection(Line(C, D), altitude(F, C, D)), Line(C, D) we get projection(F, Line(C, D)) == line_intersection(Line(C, D), altitude(F, C, D))
By collinear_and_not_between_implies_orientation on A, midpoint(F, G), G, F we get orientation(A, G, F) == orientation(A, G, midpoint(F, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, H, midpoint(E, G), G we get 180 == 2 * direction(D, H) - 2 * direction(midpoint(E, G), G) mod 360
By collinear_and_not_between_implies_orientation on B, G, F, midpoint(F, G) we get orientation(B, F, G) == orientation(B, F, midpoint(F, G)) mod 360
By perpendicular_direction_conditions_v0_r on H, D, midpoint(E, G), E we get 180 == 2 * direction(H, D) - 2 * direction(midpoint(E, G), E) mod 360
By between_implies_orientation on D, F, midpoint(F, G), G we get orientation(D, F, midpoint(F, G)) == orientation(D, midpoint(F, G), G) mod 360, orientation(D, F, G) == orientation(D, F, midpoint(F, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, H, midpoint(E, G), E we get 180 == 2 * direction(D, H) - 2 * direction(midpoint(E, G), E) mod 360
By between_implies_orientation on C, G, midpoint(F, G), F we get orientation(C, G, midpoint(F, G)) == orientation(C, midpoint(F, G), F) mod 360, orientation(C, G, F) == orientation(C, G, midpoint(F, G)) mod 360
By between_implies_orientation on B, F, midpoint(F, G), G we get orientation(B, F, midpoint(F, G)) == orientation(B, midpoint(F, G), G) mod 360, orientation(B, F, G) == orientation(B, F, midpoint(F, G)) mod 360
By projection_definition on E, midpoint(E, G), j we get midpoint(E, G) == projection(E, j)
By collinear_and_not_between_implies_orientation on E, G, F, midpoint(F, G) we get orientation(E, F, G) == orientation(E, F, midpoint(F, G)) mod 360
By between_implies_orientation on J, F, midpoint(F, G), G we get orientation(F, midpoint(F, G), J) == orientation(G, J, midpoint(F, G)) mod 360, orientation(F, G, J) == orientation(F, midpoint(F, G), J) mod 360
By projection_definition on E, line_intersection(Line(C, D), altitude(E, C, D)), Line(C, D) we get projection(E, Line(C, D)) == line_intersection(Line(C, D), altitude(E, C, D))
By collinear_and_not_between_implies_orientation on A, E, G, midpoint(E, G) we get orientation(A, G, E) == orientation(A, G, midpoint(E, G)) mod 360
By between_implies_orientation on J, G, midpoint(E, G), E we get orientation(E, J, midpoint(E, G)) == orientation(G, midpoint(E, G), J) mod 360, orientation(E, J, G) == orientation(G, midpoint(E, G), J) mod 360
By collinear_and_not_between_implies_orientation on C, G, F, midpoint(F, G) we get orientation(C, F, G) == orientation(C, F, midpoint(F, G)) mod 360
By between_implies_orientation on I, F, midpoint(F, G), G we get orientation(F, midpoint(F, G), I) == orientation(G, I, midpoint(F, G)) mod 360, orientation(F, G, I) == orientation(F, midpoint(F, G), I) mod 360
By collinear_and_not_between_implies_orientation on D, midpoint(E, G), E, G we get orientation(D, E, G) == orientation(D, E, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), G, B, H we get 180 == 2 * direction(midpoint(E, G), G) - 2 * direction(B, H) mod 360
By projection_definition on B, midpoint(E, G), Line(E, G) we get midpoint(E, G) == projection(B, Line(E, G))
By collinear_and_not_between_implies_orientation on J, midpoint(F, G), G, F we get orientation(F, J, G) == orientation(G, midpoint(F, G), J) mod 360
By collinear_and_not_between_implies_orientation on B, midpoint(E, G), G, E we get orientation(B, G, E) == orientation(B, G, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), G, D, B we get 180 == 2 * direction(midpoint(E, G), G) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), E, H, D we get 180 == 2 * direction(midpoint(E, G), E) - 2 * direction(H, D) mod 360
By collinear_and_not_between_implies_orientation on D, midpoint(F, G), G, F we get orientation(D, G, F) == orientation(D, G, midpoint(F, G)) mod 360
By between_implies_orientation on D, G, midpoint(E, G), E we get orientation(D, G, midpoint(E, G)) == orientation(D, midpoint(E, G), E) mod 360, orientation(D, G, E) == orientation(D, G, midpoint(E, G)) mod 360
By between_implies_orientation on B, G, midpoint(F, G), F we get orientation(B, G, midpoint(F, G)) == orientation(B, midpoint(F, G), F) mod 360, orientation(B, G, F) == orientation(B, G, midpoint(F, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), G, H, D we get 180 == 2 * direction(midpoint(E, G), G) - 2 * direction(H, D) mod 360
By between_implies_orientation on E, G, midpoint(F, G), F we get orientation(E, G, midpoint(F, G)) == orientation(E, midpoint(F, G), F) mod 360, orientation(E, G, F) == orientation(E, G, midpoint(F, G)) mod 360
By collinear_and_not_between_implies_orientation on C, E, G, midpoint(E, G) we get orientation(C, G, E) == orientation(C, G, midpoint(E, G)) mod 360
By between_implies_orientation on I, E, midpoint(E, G), G we get orientation(E, midpoint(E, G), I) == orientation(G, I, midpoint(E, G)) mod 360, orientation(E, G, I) == orientation(E, midpoint(E, G), I) mod 360
By perpendicular_direction_conditions_v0_r on D, B, midpoint(E, G), E we get 180 == 2 * direction(D, B) - 2 * direction(midpoint(E, G), E) mod 360
By collinear_and_not_between_implies_orientation on F, midpoint(E, G), E, G we get orientation(E, G, F) == orientation(E, midpoint(E, G), F) mod 360
By projection_definition on G, midpoint(E, G), j we get midpoint(E, G) == projection(G, j)
By between_implies_orientation on D, E, midpoint(E, G), G we get orientation(D, E, midpoint(E, G)) == orientation(D, midpoint(E, G), G) mod 360, orientation(D, E, G) == orientation(D, E, midpoint(E, G)) mod 360
By collinear_and_not_between_implies_orientation on F, midpoint(E, G), G, E we get orientation(E, F, G) == orientation(F, G, midpoint(E, G)) mod 360
By projection_definition on F, line_intersection(Line(D, J), altitude(F, D, J)), Line(D, J) we get projection(F, Line(D, J)) == line_intersection(Line(D, J), altitude(F, D, J))
By perpendicular_direction_conditions_v0_r on midpoint(F, G), F, D, A we get 180 == 2 * direction(midpoint(F, G), F) - 2 * direction(D, A) mod 360
By collinear_and_not_between_implies_orientation on I, midpoint(E, G), G, E we get orientation(E, I, G) == orientation(G, midpoint(E, G), I) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), G, B, D we get 180 == 2 * direction(midpoint(E, G), G) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on A, D, midpoint(F, G), G we get 180 == 2 * direction(A, D) - 2 * direction(midpoint(F, G), G) mod 360
By perpendicular_direction_conditions_v0_r on H, D, midpoint(E, G), G we get 180 == 2 * direction(H, D) - 2 * direction(midpoint(E, G), G) mod 360
By collinear_and_not_between_implies_orientation on H, E, G, midpoint(E, G) we get orientation(E, H, G) == orientation(G, midpoint(E, G), H) mod 360
By between_implies_orientation on A, E, midpoint(E, G), G we get orientation(A, E, midpoint(E, G)) == orientation(A, midpoint(E, G), G) mod 360, orientation(A, E, G) == orientation(A, E, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), E, B, H we get 180 == 2 * direction(midpoint(E, G), E) - 2 * direction(B, H) mod 360
By perpendicular_direction_conditions_v0_r on H, B, midpoint(E, G), E we get 180 == 2 * direction(H, B) - 2 * direction(midpoint(E, G), E) mod 360
By between_implies_orientation on B, E, midpoint(E, G), G we get orientation(B, E, midpoint(E, G)) == orientation(B, midpoint(E, G), G) mod 360, orientation(B, E, G) == orientation(B, E, midpoint(E, G)) mod 360
By between_implies_orientation on I, G, midpoint(E, G), E we get orientation(E, I, midpoint(E, G)) == orientation(G, midpoint(E, G), I) mod 360, orientation(E, I, G) == orientation(G, midpoint(E, G), I) mod 360
By between_implies_orientation on A, G, midpoint(E, G), E we get orientation(A, G, midpoint(E, G)) == orientation(A, midpoint(E, G), E) mod 360, orientation(A, G, E) == orientation(A, G, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, G), F, A, D we get 180 == 2 * direction(midpoint(F, G), F) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on B, H, midpoint(E, G), G we get 180 == 2 * direction(B, H) - 2 * direction(midpoint(E, G), G) mod 360
By perpendicular_direction_conditions_v0_r on H, B, midpoint(E, G), G we get 180 == 2 * direction(H, B) - 2 * direction(midpoint(E, G), G) mod 360
By between_implies_orientation on A, F, midpoint(F, G), G we get orientation(A, F, midpoint(F, G)) == orientation(A, midpoint(F, G), G) mod 360, orientation(A, F, G) == orientation(A, F, midpoint(F, G)) mod 360
By collinear_and_not_between_implies_orientation on H, G, E, midpoint(E, G) we get orientation(E, G, H) == orientation(E, midpoint(E, G), H) mod 360
By between_implies_orientation on H, G, midpoint(F, G), F we get orientation(F, H, midpoint(F, G)) == orientation(G, midpoint(F, G), H) mod 360, orientation(F, H, G) == orientation(G, midpoint(F, G), H) mod 360
By between_implies_orientation on A, G, midpoint(F, G), F we get orientation(A, G, midpoint(F, G)) == orientation(A, midpoint(F, G), F) mod 360, orientation(A, G, F) == orientation(A, G, midpoint(F, G)) mod 360
By collinear_and_not_between_implies_orientation on J, G, E, midpoint(E, G) we get orientation(E, G, J) == orientation(E, midpoint(E, G), J) mod 360
By perpendicular_direction_conditions_v0_r on B, D, midpoint(E, G), G we get 180 == 2 * direction(B, D) - 2 * direction(midpoint(E, G), G) mod 360
By between_implies_orientation on H, G, midpoint(E, G), E we get orientation(E, H, midpoint(E, G)) == orientation(G, midpoint(E, G), H) mod 360, orientation(E, H, G) == orientation(G, midpoint(E, G), H) mod 360
By projection_definition on D, midpoint(E, G), Line(E, G) we get midpoint(E, G) == projection(D, Line(E, G))
By between_implies_orientation on E, F, midpoint(F, G), G we get orientation(E, F, midpoint(F, G)) == orientation(E, midpoint(F, G), G) mod 360, orientation(E, F, G) == orientation(E, F, midpoint(F, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), E, B, D we get 180 == 2 * direction(midpoint(E, G), E) - 2 * direction(B, D) mod 360
By projection_definition on F, line_intersection(j, altitude(F, B, D)), j we get projection(F, j) == line_intersection(j, altitude(F, B, D))
By perpendicular_direction_conditions_v0_r on midpoint(E, G), E, D, H we get 180 == 2 * direction(midpoint(E, G), E) - 2 * direction(D, H) mod 360
By between_implies_orientation on C, F, midpoint(F, G), G we get orientation(C, F, midpoint(F, G)) == orientation(C, midpoint(F, G), G) mod 360, orientation(C, F, G) == orientation(C, F, midpoint(F, G)) mod 360
By projection_definition on G, midpoint(F, G), i we get midpoint(F, G) == projection(G, i)
By between_implies_orientation on D, G, midpoint(F, G), F we get orientation(D, G, midpoint(F, G)) == orientation(D, midpoint(F, G), F) mod 360, orientation(D, G, F) == orientation(D, G, midpoint(F, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, G), G, A, D we get 180 == 2 * direction(midpoint(F, G), G) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on B, H, midpoint(E, G), E we get 180 == 2 * direction(B, H) - 2 * direction(midpoint(E, G), E) mod 360
By between_implies_orientation on F, G, midpoint(E, G), E we get orientation(E, F, midpoint(E, G)) == orientation(F, G, midpoint(E, G)) mod 360, orientation(E, F, G) == orientation(F, G, midpoint(E, G)) mod 360
By between_implies_orientation on F, E, midpoint(E, G), G we get orientation(E, midpoint(E, G), F) == orientation(F, midpoint(E, G), G) mod 360, orientation(E, G, F) == orientation(E, midpoint(E, G), F) mod 360
By perpendicular_direction_conditions_v0_r on B, D, midpoint(E, G), E we get 180 == 2 * direction(B, D) - 2 * direction(midpoint(E, G), E) mod 360
By between_implies_orientation on H, E, midpoint(E, G), G we get orientation(E, midpoint(E, G), H) == orientation(G, H, midpoint(E, G)) mod 360, orientation(E, G, H) == orientation(E, midpoint(E, G), H) mod 360
By between_implies_orientation on C, E, midpoint(E, G), G we get orientation(C, E, midpoint(E, G)) == orientation(C, midpoint(E, G), G) mod 360, orientation(C, E, G) == orientation(C, E, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, B, midpoint(E, G), G we get 180 == 2 * direction(D, B) - 2 * direction(midpoint(E, G), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, G), G, D, A we get 180 == 2 * direction(midpoint(F, G), G) - 2 * direction(D, A) mod 360
By between_implies_orientation on I, G, midpoint(F, G), F we get orientation(F, I, midpoint(F, G)) == orientation(G, midpoint(F, G), I) mod 360, orientation(F, I, G) == orientation(G, midpoint(F, G), I) mod 360
By perpendicular_direction_conditions_v0_r on D, A, midpoint(F, G), G we get 180 == 2 * direction(D, A) - 2 * direction(midpoint(F, G), G) mod 360
By perpendicular_direction_conditions_v0_r on A, D, midpoint(F, G), F we get 180 == 2 * direction(A, D) - 2 * direction(midpoint(F, G), F) mod 360
By projection_definition on H, midpoint(E, G), Line(E, G) we get midpoint(E, G) == projection(H, Line(E, G))
By between_implies_orientation on C, G, midpoint(E, G), E we get orientation(C, G, midpoint(E, G)) == orientation(C, midpoint(E, G), E) mod 360, orientation(C, G, E) == orientation(C, G, midpoint(E, G)) mod 360
By projection_definition on D, midpoint(F, G), Line(F, G) we get midpoint(F, G) == projection(D, Line(F, G))
By perpendicular_direction_conditions_v0_r on midpoint(E, G), E, H, B we get 180 == 2 * direction(midpoint(E, G), E) - 2 * direction(H, B) mod 360
By between_implies_orientation on H, F, midpoint(F, G), G we get orientation(F, midpoint(F, G), H) == orientation(G, H, midpoint(F, G)) mod 360, orientation(F, G, H) == orientation(F, midpoint(F, G), H) mod 360
By between_implies_orientation on B, G, midpoint(E, G), E we get orientation(B, G, midpoint(E, G)) == orientation(B, midpoint(E, G), E) mod 360, orientation(B, G, E) == orientation(B, G, midpoint(E, G)) mod 360
By between_implies_orientation on J, E, midpoint(E, G), G we get orientation(E, midpoint(E, G), J) == orientation(G, J, midpoint(E, G)) mod 360, orientation(E, G, J) == orientation(E, midpoint(E, G), J) mod 360
By between_implies_orientation on J, G, midpoint(F, G), F we get orientation(F, J, midpoint(F, G)) == orientation(G, midpoint(F, G), J) mod 360, orientation(F, J, G) == orientation(G, midpoint(F, G), J) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), G, D, H we get 180 == 2 * direction(midpoint(E, G), G) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on D, A, midpoint(F, G), F we get 180 == 2 * direction(D, A) - 2 * direction(midpoint(F, G), F) mod 360
By projection_definition on F, midpoint(F, G), i we get midpoint(F, G) == projection(F, i)
By projection_definition on A, midpoint(F, G), Line(F, G) we get midpoint(F, G) == projection(A, Line(F, G))
By perpendicular_direction_conditions_v0_r on midpoint(E, G), E, D, B we get 180 == 2 * direction(midpoint(E, G), E) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), G, H, B we get 180 == 2 * direction(midpoint(E, G), G) - 2 * direction(H, B) mod 360
By between_imply_not_between on I, midpoint(E, I), E we get collinear_and_not_between(E, I, midpoint(E, I))
By between_imply_not_between on E, midpoint(E, I), I we get collinear_and_not_between(I, E, midpoint(E, I))
By between_imply_not_between on E, midpoint(E, F), F we get collinear_and_not_between(F, E, midpoint(E, F))
By between_imply_not_between on F, midpoint(E, F), E we get collinear_and_not_between(E, F, midpoint(E, F))
By perpendicular_direction_conditions_v0_r on midpoint(E, G), B, midpoint(E, G), G we get 180 == 2 * direction(midpoint(E, G), B) - 2 * direction(midpoint(E, G), G) mod 360
By tangent_lengths_equal on B, g, f, c we get distance(B, line_circle_tangent_point(f, c)) == distance(B, line_circle_tangent_point(g, c))
By tangent_lengths_equal on A, h, f, c we get distance(A, line_circle_tangent_point(f, c)) == distance(A, line_circle_tangent_point(h, c))
By different_points_v1 on line_intersection(Line(C, D), altitude(F, C, D)), F we get 0 != distance(F, line_intersection(Line(C, D), altitude(F, C, D)))
By different_points_v1 on A, midpoint(F, G) we get 0 != distance(A, midpoint(F, G))
By perpendicular_direction_conditions_v0_r on G, E, midpoint(E, G), D we get 180 == 2 * direction(G, E) - 2 * direction(midpoint(E, G), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), G, D, midpoint(E, G) we get 180 == 2 * direction(midpoint(E, G), G) - 2 * direction(D, midpoint(E, G)) mod 360
By different_points_v1 on E, line_intersection(Line(C, D), altitude(E, C, D)) we get 0 != distance(E, line_intersection(Line(C, D), altitude(E, C, D)))
By different_points_v1 on line_intersection(j, altitude(F, B, D)), F we get 0 != distance(F, line_intersection(j, altitude(F, B, D)))
By tangent_lengths_equal on C, h, g, c we get distance(C, line_circle_tangent_point(g, c)) == distance(C, line_circle_tangent_point(h, c))
By perpendicular_direction_conditions_v0_r on H, midpoint(E, G), G, E we get 180 == 2 * direction(H, midpoint(E, G)) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(F, G), midpoint(F, G), G we get 180 == 2 * direction(D, midpoint(F, G)) - 2 * direction(midpoint(F, G), G) mod 360
By different_points_v1 on line_intersection(Line(D, J), altitude(F, D, J)), F we get 0 != distance(F, line_intersection(Line(D, J), altitude(F, D, J)))
By different_points_v1 on D, midpoint(E, G) we get 0 != distance(D, midpoint(E, G))
By different_points_v1 on midpoint(E, G), B we get 0 != distance(B, midpoint(E, G))
By different_points_v1 on H, midpoint(E, G) we get 0 != distance(H, midpoint(E, G))
By perpendicular_direction_conditions_v0_r on G, midpoint(E, G), midpoint(E, G), D we get 180 == 2 * direction(G, midpoint(E, G)) - 2 * direction(midpoint(E, G), D) mod 360
By different_points_v1 on midpoint(F, G), D we get 0 != distance(D, midpoint(F, G))
By perpendicular_direction_conditions_v0_r on H, midpoint(E, G), midpoint(E, G), G we get 180 == 2 * direction(H, midpoint(E, G)) - 2 * direction(midpoint(E, G), G) mod 360
By perpendicular_direction_conditions_v0_r on E, G, H, midpoint(E, G) we get 180 == 2 * direction(E, G) - 2 * direction(H, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, G), D, midpoint(F, G), F we get 180 == 2 * direction(midpoint(F, G), D) - 2 * direction(midpoint(F, G), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, G), D, G, midpoint(F, G) we get 180 == 2 * direction(midpoint(F, G), D) - 2 * direction(G, midpoint(F, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, G), D, F, midpoint(F, G) we get 180 == 2 * direction(midpoint(F, G), D) - 2 * direction(F, midpoint(F, G)) mod 360
By perpendicular_direction_conditions_v0_r on F, G, A, midpoint(F, G) we get 180 == 2 * direction(F, G) - 2 * direction(A, midpoint(F, G)) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(E, G), midpoint(E, G), G we get 180 == 2 * direction(B, midpoint(E, G)) - 2 * direction(midpoint(E, G), G) mod 360
By perpendicular_direction_conditions_v0_r on E, G, D, midpoint(E, G) we get 180 == 2 * direction(E, G) - 2 * direction(D, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on B, H, line_intersection(j, altitude(F, B, D)), F we get 180 == 2 * direction(B, H) - 2 * direction(line_intersection(j, altitude(F, B, D)), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), G, midpoint(E, G), D we get 180 == 2 * direction(midpoint(E, G), G) - 2 * direction(midpoint(E, G), D) mod 360
By perpendicular_direction_conditions_v0_r on G, F, D, midpoint(F, G) we get 180 == 2 * direction(G, F) - 2 * direction(D, midpoint(F, G)) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(j, altitude(F, B, D)), B, H we get 180 == 2 * direction(F, line_intersection(j, altitude(F, B, D))) - 2 * direction(B, H) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(E, G), midpoint(E, G), E we get 180 == 2 * direction(B, midpoint(E, G)) - 2 * direction(midpoint(E, G), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), H, G, E we get 180 == 2 * direction(midpoint(E, G), H) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(F, G), midpoint(F, G), F we get 180 == 2 * direction(D, midpoint(F, G)) - 2 * direction(midpoint(F, G), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, G), D, midpoint(F, G), G we get 180 == 2 * direction(midpoint(F, G), D) - 2 * direction(midpoint(F, G), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), D, E, midpoint(E, G) we get 180 == 2 * direction(midpoint(E, G), D) - 2 * direction(E, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, F, A, midpoint(F, G) we get 180 == 2 * direction(G, F) - 2 * direction(A, midpoint(F, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, E, midpoint(E, G), B we get 180 == 2 * direction(G, E) - 2 * direction(midpoint(E, G), B) mod 360
By perpendicular_direction_conditions_v0_r on G, F, midpoint(F, G), D we get 180 == 2 * direction(G, F) - 2 * direction(midpoint(F, G), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, G), A, midpoint(F, G), F we get 180 == 2 * direction(midpoint(F, G), A) - 2 * direction(midpoint(F, G), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), D, E, G we get 180 == 2 * direction(midpoint(E, G), D) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(E, G), D, midpoint(E, G) we get 180 == 2 * direction(G, midpoint(E, G)) - 2 * direction(D, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(F, G), F, G we get 180 == 2 * direction(D, midpoint(F, G)) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(C, D), altitude(E, C, D)), E, D, C we get 180 == 2 * direction(line_intersection(Line(C, D), altitude(E, C, D)), E) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), G, H, midpoint(E, G) we get 180 == 2 * direction(midpoint(E, G), G) - 2 * direction(H, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(D, J), altitude(F, D, J)), F, J, D we get 180 == 2 * direction(line_intersection(Line(D, J), altitude(F, D, J)), F) - 2 * direction(J, D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(D, J), altitude(F, D, J)), F, D, J we get 180 == 2 * direction(line_intersection(Line(D, J), altitude(F, D, J)), F) - 2 * direction(D, J) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(E, G), E, G we get 180 == 2 * direction(H, midpoint(E, G)) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(j, altitude(F, B, D)), H, D we get 180 == 2 * direction(F, line_intersection(j, altitude(F, B, D))) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(F, G), midpoint(F, G), A we get 180 == 2 * direction(F, midpoint(F, G)) - 2 * direction(midpoint(F, G), A) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(E, G), E, G we get 180 == 2 * direction(B, midpoint(E, G)) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, altitude(F, B, D)), F, H, B we get 180 == 2 * direction(line_intersection(j, altitude(F, B, D)), F) - 2 * direction(H, B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), E, midpoint(E, G), D we get 180 == 2 * direction(midpoint(E, G), E) - 2 * direction(midpoint(E, G), D) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(F, G), midpoint(F, G), A we get 180 == 2 * direction(G, midpoint(F, G)) - 2 * direction(midpoint(F, G), A) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(F, G), G, F we get 180 == 2 * direction(A, midpoint(F, G)) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(C, D), altitude(F, C, D)), C, D we get 180 == 2 * direction(F, line_intersection(Line(C, D), altitude(F, C, D))) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on E, G, midpoint(E, G), H we get 180 == 2 * direction(E, G) - 2 * direction(midpoint(E, G), H) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(E, G), midpoint(E, G), E we get 180 == 2 * direction(H, midpoint(E, G)) - 2 * direction(midpoint(E, G), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), E, midpoint(E, G), H we get 180 == 2 * direction(midpoint(E, G), E) - 2 * direction(midpoint(E, G), H) mod 360
By perpendicular_direction_conditions_v0_r on G, F, midpoint(F, G), A we get 180 == 2 * direction(G, F) - 2 * direction(midpoint(F, G), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, altitude(F, B, D)), F, D, B we get 180 == 2 * direction(line_intersection(j, altitude(F, B, D)), F) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(F, G), F, midpoint(F, G) we get 180 == 2 * direction(A, midpoint(F, G)) - 2 * direction(F, midpoint(F, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, H, F, line_intersection(j, altitude(F, B, D)) we get 180 == 2 * direction(D, H) - 2 * direction(F, line_intersection(j, altitude(F, B, D))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), G, B, midpoint(E, G) we get 180 == 2 * direction(midpoint(E, G), G) - 2 * direction(B, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on B, H, F, line_intersection(j, altitude(F, B, D)) we get 180 == 2 * direction(B, H) - 2 * direction(F, line_intersection(j, altitude(F, B, D))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), H, midpoint(E, G), E we get 180 == 2 * direction(midpoint(E, G), H) - 2 * direction(midpoint(E, G), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, G), G, midpoint(F, G), D we get 180 == 2 * direction(midpoint(F, G), G) - 2 * direction(midpoint(F, G), D) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(F, G), F, G we get 180 == 2 * direction(A, midpoint(F, G)) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on C, D, line_intersection(Line(C, D), altitude(E, C, D)), E we get 180 == 2 * direction(C, D) - 2 * direction(line_intersection(Line(C, D), altitude(E, C, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(C, D), altitude(E, C, D)), C, D we get 180 == 2 * direction(E, line_intersection(Line(C, D), altitude(E, C, D))) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), H, midpoint(E, G), G we get 180 == 2 * direction(midpoint(E, G), H) - 2 * direction(midpoint(E, G), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, G), F, midpoint(F, G), D we get 180 == 2 * direction(midpoint(F, G), F) - 2 * direction(midpoint(F, G), D) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, G), E, G we get 180 == 2 * direction(D, midpoint(E, G)) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, altitude(F, B, D)), F, B, D we get 180 == 2 * direction(line_intersection(j, altitude(F, B, D)), F) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(F, G), A, midpoint(F, G) we get 180 == 2 * direction(G, midpoint(F, G)) - 2 * direction(A, midpoint(F, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(E, G), midpoint(E, G), B we get 180 == 2 * direction(G, midpoint(E, G)) - 2 * direction(midpoint(E, G), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), G, midpoint(E, G), B we get 180 == 2 * direction(midpoint(E, G), G) - 2 * direction(midpoint(E, G), B) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(F, G), midpoint(F, G), D we get 180 == 2 * direction(F, midpoint(F, G)) - 2 * direction(midpoint(F, G), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), B, G, midpoint(E, G) we get 180 == 2 * direction(midpoint(E, G), B) - 2 * direction(G, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(j, altitude(F, B, D)), D, H we get 180 == 2 * direction(F, line_intersection(j, altitude(F, B, D))) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), D, midpoint(E, G), G we get 180 == 2 * direction(midpoint(E, G), D) - 2 * direction(midpoint(E, G), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, G), G, D, midpoint(F, G) we get 180 == 2 * direction(midpoint(F, G), G) - 2 * direction(D, midpoint(F, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(F, G), midpoint(F, G), G we get 180 == 2 * direction(A, midpoint(F, G)) - 2 * direction(midpoint(F, G), G) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(E, G), E, midpoint(E, G) we get 180 == 2 * direction(H, midpoint(E, G)) - 2 * direction(E, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on E, G, midpoint(E, G), B we get 180 == 2 * direction(E, G) - 2 * direction(midpoint(E, G), B) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(D, J), altitude(F, D, J)), J, D we get 180 == 2 * direction(F, line_intersection(Line(D, J), altitude(F, D, J))) - 2 * direction(J, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, G), F, D, midpoint(F, G) we get 180 == 2 * direction(midpoint(F, G), F) - 2 * direction(D, midpoint(F, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, G), midpoint(E, G), E we get 180 == 2 * direction(D, midpoint(E, G)) - 2 * direction(midpoint(E, G), E) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(C, D), altitude(F, C, D)), D, C we get 180 == 2 * direction(F, line_intersection(Line(C, D), altitude(F, C, D))) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on G, E, midpoint(E, G), H we get 180 == 2 * direction(G, E) - 2 * direction(midpoint(E, G), H) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(C, D), altitude(F, C, D)), F, D, C we get 180 == 2 * direction(line_intersection(Line(C, D), altitude(F, C, D)), F) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on F, G, midpoint(F, G), D we get 180 == 2 * direction(F, G) - 2 * direction(midpoint(F, G), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), E, midpoint(E, G), B we get 180 == 2 * direction(midpoint(E, G), E) - 2 * direction(midpoint(E, G), B) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(F, G), midpoint(F, G), D we get 180 == 2 * direction(G, midpoint(F, G)) - 2 * direction(midpoint(F, G), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, G), A, F, midpoint(F, G) we get 180 == 2 * direction(midpoint(F, G), A) - 2 * direction(F, midpoint(F, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), G, midpoint(E, G), H we get 180 == 2 * direction(midpoint(E, G), G) - 2 * direction(midpoint(E, G), H) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, G), midpoint(E, G), G we get 180 == 2 * direction(D, midpoint(E, G)) - 2 * direction(midpoint(E, G), G) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(F, G), A, midpoint(F, G) we get 180 == 2 * direction(F, midpoint(F, G)) - 2 * direction(A, midpoint(F, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(F, G), G, F we get 180 == 2 * direction(D, midpoint(F, G)) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(F, G), D, midpoint(F, G) we get 180 == 2 * direction(F, midpoint(F, G)) - 2 * direction(D, midpoint(F, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, G), A, G, F we get 180 == 2 * direction(midpoint(F, G), A) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, G), F, midpoint(F, G), A we get 180 == 2 * direction(midpoint(F, G), F) - 2 * direction(midpoint(F, G), A) mod 360
By perpendicular_direction_conditions_v0_r on D, C, line_intersection(Line(C, D), altitude(F, C, D)), F we get 180 == 2 * direction(D, C) - 2 * direction(line_intersection(Line(C, D), altitude(F, C, D)), F) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(E, G), G, E we get 180 == 2 * direction(B, midpoint(E, G)) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on G, E, D, midpoint(E, G) we get 180 == 2 * direction(G, E) - 2 * direction(D, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, B, line_intersection(j, altitude(F, B, D)), F we get 180 == 2 * direction(D, B) - 2 * direction(line_intersection(j, altitude(F, B, D)), F) mod 360
By perpendicular_direction_conditions_v0_r on F, G, D, midpoint(F, G) we get 180 == 2 * direction(F, G) - 2 * direction(D, midpoint(F, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(E, G), B, midpoint(E, G) we get 180 == 2 * direction(G, midpoint(E, G)) - 2 * direction(B, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, altitude(F, B, D)), F, D, H we get 180 == 2 * direction(line_intersection(j, altitude(F, B, D)), F) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, G), A, F, G we get 180 == 2 * direction(midpoint(F, G), A) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), E, D, midpoint(E, G) we get 180 == 2 * direction(midpoint(E, G), E) - 2 * direction(D, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, altitude(F, B, D)), F, B, H we get 180 == 2 * direction(line_intersection(j, altitude(F, B, D)), F) - 2 * direction(B, H) mod 360
By perpendicular_direction_conditions_v0_r on D, C, E, line_intersection(Line(C, D), altitude(E, C, D)) we get 180 == 2 * direction(D, C) - 2 * direction(E, line_intersection(Line(C, D), altitude(E, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on C, D, line_intersection(Line(C, D), altitude(F, C, D)), F we get 180 == 2 * direction(C, D) - 2 * direction(line_intersection(Line(C, D), altitude(F, C, D)), F) mod 360
By perpendicular_direction_conditions_v0_r on D, C, line_intersection(Line(C, D), altitude(E, C, D)), E we get 180 == 2 * direction(D, C) - 2 * direction(line_intersection(Line(C, D), altitude(E, C, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on H, B, F, line_intersection(j, altitude(F, B, D)) we get 180 == 2 * direction(H, B) - 2 * direction(F, line_intersection(j, altitude(F, B, D))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), H, G, midpoint(E, G) we get 180 == 2 * direction(midpoint(E, G), H) - 2 * direction(G, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, G), A, G, midpoint(F, G) we get 180 == 2 * direction(midpoint(F, G), A) - 2 * direction(G, midpoint(F, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, G), G, midpoint(E, G) we get 180 == 2 * direction(D, midpoint(E, G)) - 2 * direction(G, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(j, altitude(F, B, D)), D, B we get 180 == 2 * direction(F, line_intersection(j, altitude(F, B, D))) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(j, altitude(F, B, D)), H, B we get 180 == 2 * direction(F, line_intersection(j, altitude(F, B, D))) - 2 * direction(H, B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), B, G, E we get 180 == 2 * direction(midpoint(E, G), B) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(E, G), G, midpoint(E, G) we get 180 == 2 * direction(B, midpoint(E, G)) - 2 * direction(G, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, G), midpoint(E, G), H we get 180 == 2 * direction(E, midpoint(E, G)) - 2 * direction(midpoint(E, G), H) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, G), D, midpoint(E, G) we get 180 == 2 * direction(E, midpoint(E, G)) - 2 * direction(D, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, G), A, midpoint(F, G), G we get 180 == 2 * direction(midpoint(F, G), A) - 2 * direction(midpoint(F, G), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), D, midpoint(E, G), E we get 180 == 2 * direction(midpoint(E, G), D) - 2 * direction(midpoint(E, G), E) mod 360
By perpendicular_direction_conditions_v0_r on H, B, line_intersection(j, altitude(F, B, D)), F we get 180 == 2 * direction(H, B) - 2 * direction(line_intersection(j, altitude(F, B, D)), F) mod 360
By perpendicular_direction_conditions_v0_r on J, D, F, line_intersection(Line(D, J), altitude(F, D, J)) we get 180 == 2 * direction(J, D) - 2 * direction(F, line_intersection(Line(D, J), altitude(F, D, J))) mod 360
By perpendicular_direction_conditions_v0_r on D, H, line_intersection(j, altitude(F, B, D)), F we get 180 == 2 * direction(D, H) - 2 * direction(line_intersection(j, altitude(F, B, D)), F) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(C, D), altitude(E, C, D)), D, C we get 180 == 2 * direction(E, line_intersection(Line(C, D), altitude(E, C, D))) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on E, G, midpoint(E, G), D we get 180 == 2 * direction(E, G) - 2 * direction(midpoint(E, G), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, G), G, midpoint(F, G), A we get 180 == 2 * direction(midpoint(F, G), G) - 2 * direction(midpoint(F, G), A) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, G), B, midpoint(E, G) we get 180 == 2 * direction(E, midpoint(E, G)) - 2 * direction(B, midpoint(E, G)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on F, midpoint(E, G), B we get not_collinear(B, F, midpoint(E, G)), exists(Line(B, midpoint(E, G)))
By perpendicular_direction_conditions_v0_r on midpoint(E, G), H, E, G we get 180 == 2 * direction(midpoint(E, G), H) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on H, D, line_intersection(j, altitude(F, B, D)), F we get 180 == 2 * direction(H, D) - 2 * direction(line_intersection(j, altitude(F, B, D)), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), H, E, midpoint(E, G) we get 180 == 2 * direction(midpoint(E, G), H) - 2 * direction(E, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), D, G, E we get 180 == 2 * direction(midpoint(E, G), D) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on F, G, midpoint(F, G), A we get 180 == 2 * direction(F, G) - 2 * direction(midpoint(F, G), A) mod 360
By perpendicular_direction_conditions_v0_r on C, D, F, line_intersection(Line(C, D), altitude(F, C, D)) we get 180 == 2 * direction(C, D) - 2 * direction(F, line_intersection(Line(C, D), altitude(F, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), B, E, midpoint(E, G) we get 180 == 2 * direction(midpoint(E, G), B) - 2 * direction(E, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, G), E, midpoint(E, G) we get 180 == 2 * direction(D, midpoint(E, G)) - 2 * direction(E, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on J, D, line_intersection(Line(D, J), altitude(F, D, J)), F we get 180 == 2 * direction(J, D) - 2 * direction(line_intersection(Line(D, J), altitude(F, D, J)), F) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(E, G), H, midpoint(E, G) we get 180 == 2 * direction(G, midpoint(E, G)) - 2 * direction(H, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(F, G), F, midpoint(F, G) we get 180 == 2 * direction(D, midpoint(F, G)) - 2 * direction(F, midpoint(F, G)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(E, G), G, midpoint(E, G) we get 180 == 2 * direction(H, midpoint(E, G)) - 2 * direction(G, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(F, G), G, midpoint(F, G) we get 180 == 2 * direction(A, midpoint(F, G)) - 2 * direction(G, midpoint(F, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(F, G), G, midpoint(F, G) we get 180 == 2 * direction(D, midpoint(F, G)) - 2 * direction(G, midpoint(F, G)) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(j, altitude(F, B, D)), B, D we get 180 == 2 * direction(F, line_intersection(j, altitude(F, B, D))) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on D, J, line_intersection(Line(D, J), altitude(F, D, J)), F we get 180 == 2 * direction(D, J) - 2 * direction(line_intersection(Line(D, J), altitude(F, D, J)), F) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, G), midpoint(E, G), B we get 180 == 2 * direction(E, midpoint(E, G)) - 2 * direction(midpoint(E, G), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), E, B, midpoint(E, G) we get 180 == 2 * direction(midpoint(E, G), E) - 2 * direction(B, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, G), D, F, G we get 180 == 2 * direction(midpoint(F, G), D) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(F, G), midpoint(F, G), F we get 180 == 2 * direction(A, midpoint(F, G)) - 2 * direction(midpoint(F, G), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(C, D), altitude(F, C, D)), F, C, D we get 180 == 2 * direction(line_intersection(Line(C, D), altitude(F, C, D)), F) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on B, D, line_intersection(j, altitude(F, B, D)), F we get 180 == 2 * direction(B, D) - 2 * direction(line_intersection(j, altitude(F, B, D)), F) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(E, G), E, midpoint(E, G) we get 180 == 2 * direction(B, midpoint(E, G)) - 2 * direction(E, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on H, D, F, line_intersection(j, altitude(F, B, D)) we get 180 == 2 * direction(H, D) - 2 * direction(F, line_intersection(j, altitude(F, B, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(C, D), altitude(E, C, D)), E, C, D we get 180 == 2 * direction(line_intersection(Line(C, D), altitude(E, C, D)), E) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on D, B, F, line_intersection(j, altitude(F, B, D)) we get 180 == 2 * direction(D, B) - 2 * direction(F, line_intersection(j, altitude(F, B, D))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, G), D, G, F we get 180 == 2 * direction(midpoint(F, G), D) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on C, D, E, line_intersection(Line(C, D), altitude(E, C, D)) we get 180 == 2 * direction(C, D) - 2 * direction(E, line_intersection(Line(C, D), altitude(E, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on G, E, B, midpoint(E, G) we get 180 == 2 * direction(G, E) - 2 * direction(B, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), B, midpoint(E, G), E we get 180 == 2 * direction(midpoint(E, G), B) - 2 * direction(midpoint(E, G), E) mod 360
By perpendicular_direction_conditions_v0_r on E, G, B, midpoint(E, G) we get 180 == 2 * direction(E, G) - 2 * direction(B, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, G), G, E we get 180 == 2 * direction(D, midpoint(E, G)) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, G), H, midpoint(E, G) we get 180 == 2 * direction(E, midpoint(E, G)) - 2 * direction(H, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(F, G), D, midpoint(F, G) we get 180 == 2 * direction(G, midpoint(F, G)) - 2 * direction(D, midpoint(F, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, C, F, line_intersection(Line(C, D), altitude(F, C, D)) we get 180 == 2 * direction(D, C) - 2 * direction(F, line_intersection(Line(C, D), altitude(F, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), D, G, midpoint(E, G) we get 180 == 2 * direction(midpoint(E, G), D) - 2 * direction(G, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), E, H, midpoint(E, G) we get 180 == 2 * direction(midpoint(E, G), E) - 2 * direction(H, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on B, D, F, line_intersection(j, altitude(F, B, D)) we get 180 == 2 * direction(B, D) - 2 * direction(F, line_intersection(j, altitude(F, B, D))) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(E, G), midpoint(E, G), H we get 180 == 2 * direction(G, midpoint(E, G)) - 2 * direction(midpoint(E, G), H) mod 360
By perpendicular_direction_conditions_v0_r on D, J, F, line_intersection(Line(D, J), altitude(F, D, J)) we get 180 == 2 * direction(D, J) - 2 * direction(F, line_intersection(Line(D, J), altitude(F, D, J))) mod 360
By perpendicular_direction_conditions_v0_r on G, E, H, midpoint(E, G) we get 180 == 2 * direction(G, E) - 2 * direction(H, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(D, J), altitude(F, D, J)), D, J we get 180 == 2 * direction(F, line_intersection(Line(D, J), altitude(F, D, J))) - 2 * direction(D, J) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), B, E, G we get 180 == 2 * direction(midpoint(E, G), B) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, altitude(F, B, D)), F, H, D we get 180 == 2 * direction(line_intersection(j, altitude(F, B, D)), F) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, G), midpoint(E, G), D we get 180 == 2 * direction(E, midpoint(E, G)) - 2 * direction(midpoint(E, G), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, G), G, A, midpoint(F, G) we get 180 == 2 * direction(midpoint(F, G), G) - 2 * direction(A, midpoint(F, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, G), F, A, midpoint(F, G) we get 180 == 2 * direction(midpoint(F, G), F) - 2 * direction(A, midpoint(F, G)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on E, midpoint(F, G), F we get not_collinear(E, F, midpoint(F, G)), exists(Line(F, midpoint(F, G)))
By point_on_perpendicular_bisector on E, F, line_intersection(Line(C, D), altitude(E, C, D)), Line(C, D) we get distance(E, line_intersection(Line(C, D), altitude(E, C, D))) == distance(F, line_intersection(Line(C, D), altitude(E, C, D)))
By in_imply_collinear on midpoint(E, F), D, C we get collinear(C, D, midpoint(E, F))
By in_imply_collinear on line_intersection(j, altitude(F, B, D)), B, midpoint(E, G) we get collinear(B, midpoint(E, G), line_intersection(j, altitude(F, B, D)))
By in_imply_collinear on line_intersection(j, altitude(F, B, D)), midpoint(E, G), D we get collinear(D, midpoint(E, G), line_intersection(j, altitude(F, B, D)))
By in_imply_collinear on line_intersection(j, altitude(F, B, D)), H, midpoint(E, G) we get collinear(H, midpoint(E, G), line_intersection(j, altitude(F, B, D)))
By reverse_direction on midpoint(F, G), F we get 180 == direction(midpoint(F, G), F) - direction(F, midpoint(F, G)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on D, midpoint(F, G), F we get not_collinear(D, F, midpoint(F, G)), exists(Line(F, midpoint(F, G)))
By directions_draw_angle on A, G, midpoint(E, G) we get exists(angle(A, G, midpoint(E, G)))
By concyclic_definition_0 on J, I, D, H we get H in Circle(D, I, J)
By not_in_line_equivalent_to_not_collinear_v0 on B, midpoint(F, G), G we get not_collinear(B, G, midpoint(F, G)), exists(Line(G, midpoint(F, G)))
By not_in_line_equivalent_to_not_collinear_v0 on I, G, midpoint(F, G) we get not_collinear(G, I, midpoint(F, G)), exists(Line(G, midpoint(F, G)))
By in_imply_collinear on midpoint(E, I), D, center(d) we get collinear(D, center(d), midpoint(E, I))
By concyclic_definition_0 on E, J, D, H we get H in Circle(D, E, J)
By directions_draw_angle on midpoint(F, G), G, A we get exists(angle(midpoint(F, G), G, A))
By not_in_line_equivalent_to_not_collinear_v0 on C, midpoint(E, G), E we get not_collinear(C, E, midpoint(E, G)), exists(Line(E, midpoint(E, G)))
By not_in_line_equivalent_to_not_collinear_v0 on E, midpoint(F, G), A we get not_collinear(A, E, midpoint(F, G)), exists(Line(A, midpoint(F, G)))
By line_circle_intersection_has_at_most_two_points_0 on E, I, midpoint(E, I), d we get midpoint(E, I) not in d
By directions_draw_angle on midpoint(E, G), E, J we get exists(angle(midpoint(E, G), E, J))
By not_in_line_equivalent_to_not_collinear_v0 on E, midpoint(E, G), D we get not_collinear(D, E, midpoint(E, G)), exists(Line(D, midpoint(E, G)))
By directions_draw_angle on E, G, midpoint(F, G) we get exists(angle(E, G, midpoint(F, G)))
By not_in_line_equivalent_to_not_collinear_v0 on I, midpoint(E, G), E we get not_collinear(E, I, midpoint(E, G)), exists(Line(E, midpoint(E, G)))
By concyclic_definition_0 on D, E, I, H we get H in Circle(D, E, I)
By line_inequality on Line(D, center(d)), Line(E, H), D we get Line(E, H) != Line(D, center(d))
By not_in_line_equivalent_to_not_collinear_v0 on H, midpoint(F, G), F we get not_collinear(F, H, midpoint(F, G)), exists(Line(F, midpoint(F, G)))
By not_in_line_equivalent_to_not_collinear_v0 on I, midpoint(E, G), H we get not_collinear(H, I, midpoint(E, G)), exists(Line(H, midpoint(E, G)))
By reverse_direction on F, midpoint(F, G) we get 180 == direction(F, midpoint(F, G)) - direction(midpoint(F, G), F) mod 360
By directions_draw_angle on I, G, midpoint(F, G) we get exists(angle(I, G, midpoint(F, G)))
By line_circle_intersection_has_at_most_two_points_0 on E, F, midpoint(E, F), c we get midpoint(E, F) not in c
By double_perpendicular_and_parallel_v0 on altitude(E, C, D), Line(C, D), Line(E, F) we get parallel(Line(E, F), altitude(E, C, D))
By reverse_direction on midpoint(E, G), G we get 180 == direction(midpoint(E, G), G) - direction(G, midpoint(E, G)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on H, A, midpoint(F, G) we get not_collinear(A, H, midpoint(F, G)), exists(Line(A, midpoint(F, G)))
By directions_draw_angle on H, F, midpoint(F, G) we get exists(angle(H, F, midpoint(F, G)))
By not_in_line_equivalent_to_not_collinear_v0 on B, E, midpoint(E, G) we get not_collinear(B, E, midpoint(E, G)), exists(Line(E, midpoint(E, G)))
By directions_draw_angle on B, G, midpoint(E, G) we get exists(angle(B, G, midpoint(E, G)))
By not_in_line_equivalent_to_not_collinear_v0 on H, G, midpoint(E, G) we get not_collinear(G, H, midpoint(E, G)), exists(Line(G, midpoint(E, G)))
By directions_draw_angle on midpoint(E, G), E, center(d) we get exists(angle(midpoint(E, G), E, center(d)))
By not_in_line_equivalent_to_not_collinear_v0 on J, midpoint(F, G), G we get not_collinear(G, J, midpoint(F, G)), exists(Line(G, midpoint(F, G)))
By not_in_line_equivalent_to_not_collinear_v0 on B, midpoint(F, G), A we get not_collinear(A, B, midpoint(F, G)), exists(Line(A, midpoint(F, G)))
By not_in_line_equivalent_to_not_collinear_v0 on I, G, midpoint(E, G) we get not_collinear(G, I, midpoint(E, G)), exists(Line(G, midpoint(E, G)))
By altitude_definition on F, C, D, Line(E, F) we get Line(E, F) == altitude(F, C, D)
By not_in_line_equivalent_to_not_collinear_v0 on C, midpoint(E, G), G we get not_collinear(C, G, midpoint(E, G)), exists(Line(G, midpoint(E, G)))
By reverse_direction on midpoint(F, G), G we get 180 == direction(midpoint(F, G), G) - direction(G, midpoint(F, G)) mod 360
By directions_draw_angle on H, G, midpoint(E, G) we get exists(angle(H, G, midpoint(E, G)))
By directions_draw_angle on I, E, midpoint(E, G) we get exists(angle(I, E, midpoint(E, G)))
By point_on_perpendicular_bisector on F, E, line_intersection(Line(C, D), altitude(F, C, D)), Line(C, D) we get distance(E, line_intersection(Line(C, D), altitude(F, C, D))) == distance(F, line_intersection(Line(C, D), altitude(F, C, D)))
By not_in_line_equivalent_to_not_collinear_v0 on F, E, midpoint(E, G) we get not_collinear(E, F, midpoint(E, G)), exists(Line(E, midpoint(E, G)))
By not_in_line_equivalent_to_not_collinear_v0 on A, G, midpoint(E, G) we get not_collinear(A, G, midpoint(E, G)), exists(Line(G, midpoint(E, G)))
By not_in_line_equivalent_to_not_collinear_v0 on C, G, midpoint(F, G) we get not_collinear(C, G, midpoint(F, G)), exists(Line(G, midpoint(F, G)))
By directions_draw_angle on midpoint(E, G), G, A we get exists(angle(midpoint(E, G), G, A))
By not_in_line_equivalent_to_not_collinear_v0 on C, midpoint(F, G), A we get not_collinear(A, C, midpoint(F, G)), exists(Line(A, midpoint(F, G)))
By not_in_line_equivalent_to_not_collinear_v0 on G, D, midpoint(F, G) we get not_collinear(D, G, midpoint(F, G)), exists(Line(D, midpoint(F, G)))
By directions_draw_angle on midpoint(E, G), G, B we get exists(angle(midpoint(E, G), G, B))
By not_in_line_equivalent_to_not_collinear_v0 on C, B, midpoint(E, G) we get not_collinear(B, C, midpoint(E, G)), exists(Line(B, midpoint(E, G)))
By directions_draw_angle on midpoint(F, G), F, C we get exists(angle(midpoint(F, G), F, C))
By not_in_line_equivalent_to_not_collinear_v0 on C, midpoint(E, G), D we get not_collinear(C, D, midpoint(E, G)), exists(Line(D, midpoint(E, G)))
By not_in_line_equivalent_to_not_collinear_v0 on G, B, midpoint(E, G) we get not_collinear(B, G, midpoint(E, G)), exists(Line(B, midpoint(E, G)))
By line_circle_intersection_has_at_most_two_points_0 on E, I, midpoint(E, I), c we get midpoint(E, I) not in c
By not_in_line_equivalent_to_not_collinear_v0 on E, midpoint(F, G), D we get not_collinear(D, E, midpoint(F, G)), exists(Line(D, midpoint(F, G)))
By double_perpendicular_and_parallel_v0 on Line(E, F), Line(C, D), altitude(F, C, D) we get parallel(Line(E, F), altitude(F, C, D))
By reverse_direction on G, midpoint(F, G) we get 180 == direction(G, midpoint(F, G)) - direction(midpoint(F, G), G) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on E, G, midpoint(F, G) we get not_collinear(E, G, midpoint(F, G)), exists(Line(G, midpoint(F, G)))
By not_in_line_equivalent_to_not_collinear_v0 on D, midpoint(E, G), G we get not_collinear(D, G, midpoint(E, G)), exists(Line(G, midpoint(E, G)))
By directions_draw_angle on midpoint(E, G), E, D we get exists(angle(midpoint(E, G), E, D))
By altitude_definition on E, C, D, Line(E, F) we get Line(E, F) == altitude(E, C, D)
By not_in_line_equivalent_to_not_collinear_v0 on J, F, midpoint(F, G) we get not_collinear(F, J, midpoint(F, G)), exists(Line(F, midpoint(F, G)))
By not_in_line_equivalent_to_not_collinear_v0 on I, A, midpoint(F, G) we get not_collinear(A, I, midpoint(F, G)), exists(Line(A, midpoint(F, G)))
By not_in_line_equivalent_to_not_collinear_v0 on A, midpoint(E, G), E we get not_collinear(A, E, midpoint(E, G)), exists(Line(E, midpoint(E, G)))
By directions_draw_angle on D, G, midpoint(E, G) we get exists(angle(D, G, midpoint(E, G)))
By directions_draw_angle on midpoint(E, G), E, C we get exists(angle(midpoint(E, G), E, C))
By directions_draw_angle on midpoint(F, G), F, H we get exists(angle(midpoint(F, G), F, H))
By not_in_line_equivalent_to_not_collinear_v0 on A, midpoint(E, G), D we get not_collinear(A, D, midpoint(E, G)), exists(Line(D, midpoint(E, G)))
By directions_draw_angle on B, G, midpoint(F, G) we get exists(angle(B, G, midpoint(F, G)))
By directions_draw_angle on midpoint(F, G), G, H we get exists(angle(midpoint(F, G), G, H))
By directions_draw_angle on midpoint(E, G), E, I we get exists(angle(midpoint(E, G), E, I))
By not_in_line_equivalent_to_not_collinear_v0 on A, midpoint(F, G), F we get not_collinear(A, F, midpoint(F, G)), exists(Line(F, midpoint(F, G)))
By reverse_direction on E, midpoint(E, G) we get 180 == direction(E, midpoint(E, G)) - direction(midpoint(E, G), E) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on H, E, midpoint(E, G) we get not_collinear(E, H, midpoint(E, G)), exists(Line(E, midpoint(E, G)))
By not_in_line_equivalent_to_not_collinear_v0 on I, midpoint(F, G), D we get not_collinear(D, I, midpoint(F, G)), exists(Line(D, midpoint(F, G)))
By not_in_line_equivalent_to_not_collinear_v0 on F, midpoint(E, G), G we get not_collinear(F, G, midpoint(E, G)), exists(Line(G, midpoint(E, G)))
By directions_draw_angle on midpoint(F, G), F, J we get exists(angle(midpoint(F, G), F, J))
By not_in_line_equivalent_to_not_collinear_v0 on B, midpoint(F, G), D we get not_collinear(B, D, midpoint(F, G)), exists(Line(D, midpoint(F, G)))
By directions_draw_angle on midpoint(E, G), G, H we get exists(angle(midpoint(E, G), G, H))
By not_in_line_equivalent_to_not_collinear_v0 on C, D, midpoint(F, G) we get not_collinear(C, D, midpoint(F, G)), exists(Line(D, midpoint(F, G)))
By directions_draw_angle on H, E, midpoint(E, G) we get exists(angle(H, E, midpoint(E, G)))
By reverse_direction on midpoint(E, G), E we get 180 == direction(midpoint(E, G), E) - direction(E, midpoint(E, G)) mod 360
By directions_draw_angle on C, E, midpoint(E, G) we get exists(angle(C, E, midpoint(E, G)))
By directions_draw_angle on midpoint(F, G), F, I we get exists(angle(midpoint(F, G), F, I))
By directions_draw_angle on midpoint(F, G), F, D we get exists(angle(midpoint(F, G), F, D))
By reverse_direction on G, midpoint(E, G) we get 180 == direction(G, midpoint(E, G)) - direction(midpoint(E, G), G) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on F, D, midpoint(E, G) we get not_collinear(D, F, midpoint(E, G)), exists(Line(D, midpoint(E, G)))
By not_in_line_equivalent_to_not_collinear_v0 on J, D, midpoint(F, G) we get not_collinear(D, J, midpoint(F, G)), exists(Line(D, midpoint(F, G)))
By directions_draw_angle on J, E, midpoint(E, G) we get exists(angle(J, E, midpoint(E, G)))
By not_in_line_equivalent_to_not_collinear_v0 on C, H, midpoint(E, G) we get not_collinear(C, H, midpoint(E, G)), exists(Line(H, midpoint(E, G)))
By not_in_line_equivalent_to_not_collinear_v0 on J, midpoint(E, G), H we get not_collinear(H, J, midpoint(E, G)), exists(Line(H, midpoint(E, G)))
By not_in_line_equivalent_to_not_collinear_v0 on J, G, midpoint(E, G) we get not_collinear(G, J, midpoint(E, G)), exists(Line(G, midpoint(E, G)))
By not_in_line_equivalent_to_not_collinear_v0 on H, midpoint(F, G), D we get not_collinear(D, H, midpoint(F, G)), exists(Line(D, midpoint(F, G)))
By directions_draw_angle on E, F, midpoint(F, G) we get exists(angle(E, F, midpoint(F, G)))
By directions_draw_angle on midpoint(E, G), G, I we get exists(angle(midpoint(E, G), G, I))
By not_in_line_equivalent_to_not_collinear_v0 on A, B, midpoint(E, G) we get not_collinear(A, B, midpoint(E, G)), exists(Line(B, midpoint(E, G)))
By directions_draw_angle on D, E, midpoint(E, G) we get exists(angle(D, E, midpoint(E, G)))
By line_inequality on altitude(F, D, J), Line(E, H), F we get Line(E, H) != altitude(F, D, J)
By directions_draw_angle on F, E, midpoint(E, G) we get exists(angle(F, E, midpoint(E, G)))
By not_in_line_equivalent_to_not_collinear_v0 on I, F, midpoint(F, G) we get not_collinear(F, I, midpoint(F, G)), exists(Line(F, midpoint(F, G)))
By line_containment_inequality on midpoint(E, F), A, Line(C, D) we get A != midpoint(E, F)
By not_in_line_equivalent_to_not_collinear_v0 on G, midpoint(F, G), A we get not_collinear(A, G, midpoint(F, G)), exists(Line(A, midpoint(F, G)))
By not_in_line_equivalent_to_not_collinear_v0 on H, G, midpoint(F, G) we get not_collinear(G, H, midpoint(F, G)), exists(Line(G, midpoint(F, G)))
By not_in_line_equivalent_to_not_collinear_v0 on B, F, midpoint(F, G) we get not_collinear(B, F, midpoint(F, G)), exists(Line(F, midpoint(F, G)))
By directions_draw_angle on midpoint(E, G), G, midpoint(F, G) we get exists(angle(midpoint(E, G), G, midpoint(F, G)))
By directions_draw_angle on A, F, midpoint(F, G) we get exists(angle(A, F, midpoint(F, G)))
By line_circle_intersection_has_at_most_two_points_0 on F, E, midpoint(E, F), Circle(C, D, E) we get midpoint(E, F) not in Circle(C, D, E)
By not_in_line_equivalent_to_not_collinear_v0 on I, D, midpoint(E, G) we get not_collinear(D, I, midpoint(E, G)), exists(Line(D, midpoint(E, G)))
By directions_draw_angle on midpoint(E, G), G, F we get exists(angle(midpoint(E, G), G, F))
By not_in_line_equivalent_to_not_collinear_v0 on I, midpoint(E, G), B we get not_collinear(B, I, midpoint(E, G)), exists(Line(B, midpoint(E, G)))
By directions_draw_angle on midpoint(E, G), E, F we get exists(angle(midpoint(E, G), E, F))
By directions_draw_angle on C, F, midpoint(F, G) we get exists(angle(C, F, midpoint(F, G)))
By directions_draw_angle on A, G, midpoint(F, G) we get exists(angle(A, G, midpoint(F, G)))
By directions_draw_angle on D, F, midpoint(F, G) we get exists(angle(D, F, midpoint(F, G)))
By directions_draw_angle on midpoint(F, G), G, E we get exists(angle(midpoint(F, G), G, E))
By not_in_line_equivalent_to_not_collinear_v0 on A, H, midpoint(E, G) we get not_collinear(A, H, midpoint(E, G)), exists(Line(H, midpoint(E, G)))
By directions_draw_angle on D, G, midpoint(F, G) we get exists(angle(D, G, midpoint(F, G)))
By not_in_line_equivalent_to_not_collinear_v0 on J, midpoint(F, G), A we get not_collinear(A, J, midpoint(F, G)), exists(Line(A, midpoint(F, G)))
By directions_draw_angle on midpoint(E, G), E, B we get exists(angle(midpoint(E, G), E, B))
By not_in_line_equivalent_to_not_collinear_v0 on J, midpoint(E, G), D we get not_collinear(D, J, midpoint(E, G)), exists(Line(D, midpoint(E, G)))
By directions_draw_angle on center(d), E, midpoint(E, G) we get exists(angle(center(d), E, midpoint(E, G)))
By not_in_line_equivalent_to_not_collinear_v0 on F, midpoint(E, G), H we get not_collinear(F, H, midpoint(E, G)), exists(Line(H, midpoint(E, G)))
By directions_draw_angle on H, G, midpoint(F, G) we get exists(angle(H, G, midpoint(F, G)))
By directions_draw_angle on midpoint(E, G), E, H we get exists(angle(midpoint(E, G), E, H))
By directions_draw_angle on midpoint(F, G), G, D we get exists(angle(midpoint(F, G), G, D))
By directions_draw_angle on I, G, midpoint(E, G) we get exists(angle(I, G, midpoint(E, G)))
By directions_draw_angle on midpoint(F, G), F, A we get exists(angle(midpoint(F, G), F, A))
By directions_draw_angle on I, F, midpoint(F, G) we get exists(angle(I, F, midpoint(F, G)))
By directions_draw_angle on J, F, midpoint(F, G) we get exists(angle(J, F, midpoint(F, G)))
By directions_draw_angle on midpoint(F, G), F, E we get exists(angle(midpoint(F, G), F, E))
By not_in_line_equivalent_to_not_collinear_v0 on J, midpoint(E, G), B we get not_collinear(B, J, midpoint(E, G)), exists(Line(B, midpoint(E, G)))
By not_in_line_equivalent_to_not_collinear_v0 on J, midpoint(E, G), E we get not_collinear(E, J, midpoint(E, G)), exists(Line(E, midpoint(E, G)))
By directions_draw_angle on B, E, midpoint(E, G) we get exists(angle(B, E, midpoint(E, G)))
By directions_draw_angle on F, G, midpoint(E, G) we get exists(angle(F, G, midpoint(E, G)))
By not_in_line_equivalent_to_not_collinear_v0 on C, F, midpoint(F, G) we get not_collinear(C, F, midpoint(F, G)), exists(Line(F, midpoint(F, G)))
By directions_draw_angle on midpoint(E, G), G, D we get exists(angle(midpoint(E, G), G, D))
By line_containment_inequality on midpoint(E, F), J, Line(C, D) we get J != midpoint(E, F)
By line_containment_inequality on midpoint(E, F), H, Line(C, D) we get H != midpoint(E, F)
By directions_draw_angle on midpoint(F, G), G, midpoint(E, G) we get exists(angle(midpoint(F, G), G, midpoint(E, G)))
By directions_draw_angle on midpoint(F, G), G, B we get exists(angle(midpoint(F, G), G, B))
By directions_draw_angle on midpoint(F, G), G, I we get exists(angle(midpoint(F, G), G, I))
By line_inequality on altitude(F, C, D), Line(E, H), F we get Line(E, H) != altitude(F, C, D)
By line_inequality on altitude(F, B, D), Line(E, H), F we get Line(E, H) != altitude(F, B, D)
By line_containment_inequality on midpoint(E, F), I, Line(C, D) we get I != midpoint(E, F)
By line_inequality on Line(I, center(d)), Line(E, H), I we get Line(E, H) != Line(I, center(d))
By line_containment_inequality on midpoint(E, F), B, Line(C, D) we get B != midpoint(E, F)
By line_inequality on Line(J, center(d)), Line(E, H), J we get Line(E, H) != Line(J, center(d))
By line_containment_inequality on midpoint(E, F), G, Line(C, D) we get G != midpoint(E, F)
By perpendicular_direction_conditions_v0_r on F, line_intersection(j, altitude(F, B, D)), midpoint(E, G), D we get 180 == 2 * direction(F, line_intersection(j, altitude(F, B, D))) - 2 * direction(midpoint(E, G), D) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(j, altitude(F, B, D)), midpoint(E, G), B we get 180 == 2 * direction(F, line_intersection(j, altitude(F, B, D))) - 2 * direction(midpoint(E, G), B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, altitude(F, B, D)), F, H, midpoint(E, G) we get 180 == 2 * direction(line_intersection(j, altitude(F, B, D)), F) - 2 * direction(H, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(E, G), line_intersection(j, altitude(F, B, D)), F we get 180 == 2 * direction(H, midpoint(E, G)) - 2 * direction(line_intersection(j, altitude(F, B, D)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, altitude(F, B, D)), F, midpoint(E, G), D we get 180 == 2 * direction(line_intersection(j, altitude(F, B, D)), F) - 2 * direction(midpoint(E, G), D) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(j, altitude(F, B, D)), B, midpoint(E, G) we get 180 == 2 * direction(F, line_intersection(j, altitude(F, B, D))) - 2 * direction(B, midpoint(E, G)) mod 360
By circumcenter_perpendicular_bisectors on F, E, I we get circumcenter(E, F, I) in perpendicular_bisector(E, F), circumcenter(E, F, I) in perpendicular_bisector(E, I), circumcenter(E, F, I) in perpendicular_bisector(F, I)
By concyclic_definition_1 on H, I, D, E we get Circle(D, E, I) == Circle(D, H, I)
By perpendicular_direction_conditions_v0_r on midpoint(E, G), H, F, line_intersection(j, altitude(F, B, D)) we get 180 == 2 * direction(midpoint(E, G), H) - 2 * direction(F, line_intersection(j, altitude(F, B, D))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(j, altitude(F, B, D)), D, midpoint(E, G) we get 180 == 2 * direction(F, line_intersection(j, altitude(F, B, D))) - 2 * direction(D, midpoint(E, G)) mod 360
By circumcenter_perpendicular_bisectors on I, E, G we get circumcenter(E, G, I) in perpendicular_bisector(E, I), circumcenter(E, G, I) in perpendicular_bisector(E, G), circumcenter(E, G, I) in perpendicular_bisector(G, I)
By perpendicular_direction_conditions_v0_r on D, midpoint(E, G), F, line_intersection(j, altitude(F, B, D)) we get 180 == 2 * direction(D, midpoint(E, G)) - 2 * direction(F, line_intersection(j, altitude(F, B, D))) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(E, G), line_intersection(j, altitude(F, B, D)), F we get 180 == 2 * direction(B, midpoint(E, G)) - 2 * direction(line_intersection(j, altitude(F, B, D)), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), B, F, line_intersection(j, altitude(F, B, D)) we get 180 == 2 * direction(midpoint(E, G), B) - 2 * direction(F, line_intersection(j, altitude(F, B, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, altitude(F, B, D)), F, midpoint(E, G), H we get 180 == 2 * direction(line_intersection(j, altitude(F, B, D)), F) - 2 * direction(midpoint(E, G), H) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(j, altitude(F, B, D)), midpoint(E, G), H we get 180 == 2 * direction(F, line_intersection(j, altitude(F, B, D))) - 2 * direction(midpoint(E, G), H) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, altitude(F, B, D)), F, midpoint(E, G), B we get 180 == 2 * direction(line_intersection(j, altitude(F, B, D)), F) - 2 * direction(midpoint(E, G), B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, altitude(F, B, D)), F, B, midpoint(E, G) we get 180 == 2 * direction(line_intersection(j, altitude(F, B, D)), F) - 2 * direction(B, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on H, midpoint(E, G), F, line_intersection(j, altitude(F, B, D)) we get 180 == 2 * direction(H, midpoint(E, G)) - 2 * direction(F, line_intersection(j, altitude(F, B, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(j, altitude(F, B, D)), F, D, midpoint(E, G) we get 180 == 2 * direction(line_intersection(j, altitude(F, B, D)), F) - 2 * direction(D, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), B, line_intersection(j, altitude(F, B, D)), F we get 180 == 2 * direction(midpoint(E, G), B) - 2 * direction(line_intersection(j, altitude(F, B, D)), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), D, F, line_intersection(j, altitude(F, B, D)) we get 180 == 2 * direction(midpoint(E, G), D) - 2 * direction(F, line_intersection(j, altitude(F, B, D))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), D, line_intersection(j, altitude(F, B, D)), F we get 180 == 2 * direction(midpoint(E, G), D) - 2 * direction(line_intersection(j, altitude(F, B, D)), F) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(j, altitude(F, B, D)), H, midpoint(E, G) we get 180 == 2 * direction(F, line_intersection(j, altitude(F, B, D))) - 2 * direction(H, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, G), line_intersection(j, altitude(F, B, D)), F we get 180 == 2 * direction(D, midpoint(E, G)) - 2 * direction(line_intersection(j, altitude(F, B, D)), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, G), H, line_intersection(j, altitude(F, B, D)), F we get 180 == 2 * direction(midpoint(E, G), H) - 2 * direction(line_intersection(j, altitude(F, B, D)), F) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(E, G), F, line_intersection(j, altitude(F, B, D)) we get 180 == 2 * direction(B, midpoint(E, G)) - 2 * direction(F, line_intersection(j, altitude(F, B, D))) mod 360
By concyclic_definition_0 on D, E, H, I we get I in Circle(D, E, H)
By collinear_definition on D, midpoint(F, G), A we get midpoint(F, G) in Line(A, D), A in Line(D, midpoint(F, G)), Line(A, D) == Line(D, midpoint(F, G)), 0 == 2 * angle(midpoint(F, G), D, A) mod 360
By internal_angle_bisector_definition_v0_r on F, G, F, midpoint(F, G) we get Line(G, midpoint(F, G)) == internal_angle_bisector(F, midpoint(F, G), F)
By perpendicular_angle_conditions_v0 on A, midpoint(F, G), F we get angle(A, midpoint(F, G), F) == orientation(A, midpoint(F, G), F) mod 360
By concyclic_definition_0 on I, D, H, J we get J in Circle(D, H, I)
By internal_angle_bisector_definition_v0 on H, midpoint(F, G), G, A we get angle(H, A, midpoint(F, G)) == angle(midpoint(F, G), A, G) mod 360
By concyclic_definition_0 on J, I, H, D we get D in Circle(H, I, J)
By concyclic_definition_1 on I, J, D, H we get Circle(D, H, J) == Circle(D, I, J)
By concyclic_definition_0 on H, D, J, E we get E in Circle(D, H, J)
By collinear_definition on I, midpoint(E, I), E we get midpoint(E, I) in Line(E, I), E in Line(I, midpoint(E, I)), Line(E, I) == Line(I, midpoint(E, I)), 0 == 2 * angle(midpoint(E, I), I, E) mod 360
By concyclic_definition_0 on I, E, H, D we get D in Circle(E, H, I)
By perpendicular_angle_conditions_v0 on G, midpoint(F, G), D we get angle(G, midpoint(F, G), D) == orientation(D, G, midpoint(F, G)) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(F, G), F, midpoint(F, G), G we get Line(F, G) == internal_angle_bisector(midpoint(F, G), G, midpoint(F, G))
By perpendicular_lines_draw_intersection on Line(E, I), Line(D, center(d)) we get exists(line_intersection(Line(E, I), Line(D, center(d))))
By internal_angle_bisector_definition_v0 on G, B, E, midpoint(E, G) we get angle(B, midpoint(E, G), E) == angle(G, midpoint(E, G), B) mod 360
By collinear_definition on H, midpoint(E, G), B we get midpoint(E, G) in Line(B, H), B in Line(H, midpoint(E, G)), Line(B, H) == Line(H, midpoint(E, G)), 0 == 2 * angle(midpoint(E, G), H, B) mod 360
By internal_angle_bisector_definition_v0 on G, H, E, midpoint(E, G) we get angle(G, midpoint(E, G), H) == angle(H, midpoint(E, G), E) mod 360
By collinear_definition on B, midpoint(E, G), H we get midpoint(E, G) in Line(B, H), H in Line(B, midpoint(E, G)), Line(B, H) == Line(B, midpoint(E, G)), 0 == 2 * angle(midpoint(E, G), B, H) mod 360
By internal_angle_bisector_definition_v0_r on G, F, G, midpoint(F, G) we get Line(F, midpoint(F, G)) == internal_angle_bisector(G, midpoint(F, G), G)
By isosceles_triangle_altitude_v3 on D, I, E we get identical(perpendicular_bisector(E, I), internal_angle_bisector(E, D, I), perpendicular_line(D, Line(E, I)))
By internal_angle_bisector_definition_v0 on J, midpoint(F, G), G, A we get angle(J, A, midpoint(F, G)) == angle(midpoint(F, G), A, G) mod 360
By concyclic_definition_1 on E, J, D, H we get Circle(D, E, J) == Circle(D, H, J)
By concyclic_definition_1 on I, D, E, H we get Circle(D, E, H) == Circle(D, E, I)
By concyclic_definition_1 on H, D, E, J we get Circle(D, E, H) == Circle(D, E, J)
By concyclic_definition_0 on H, E, D, J we get J in Circle(D, E, H)
By perpendicular_angle_conditions_v0 on D, midpoint(E, G), G we get angle(D, midpoint(E, G), G) == orientation(D, midpoint(E, G), G) mod 360
By collinear_definition on F, E, midpoint(E, F) we get E in Line(F, midpoint(E, F)), midpoint(E, F) in Line(E, F), Line(E, F) == Line(F, midpoint(E, F)), 0 == 2 * angle(E, F, midpoint(E, F)) mod 360
By collinear_definition on B, D, midpoint(E, G) we get D in Line(B, midpoint(E, G)), midpoint(E, G) in Line(B, D), Line(B, D) == Line(B, midpoint(E, G)), 0 == 2 * angle(D, B, midpoint(E, G)) mod 360
By concyclic_definition_1 on H, I, E, D we get Circle(D, E, I) == Circle(E, H, I)
By internal_angle_bisector_definition_v0 on E, midpoint(E, G), I, H we get angle(E, H, midpoint(E, G)) == angle(midpoint(E, G), H, I) mod 360
By internal_angle_bisector_definition_v0 on E, H, G, midpoint(E, G) we get angle(E, midpoint(E, G), H) == angle(H, midpoint(E, G), G) mod 360
By concyclic_definition_0 on D, H, J, I we get I in Circle(D, H, J)
By perpendicular_angle_conditions_v0 on H, midpoint(E, G), E we get angle(H, midpoint(E, G), E) == orientation(E, H, midpoint(E, G)) mod 360
By internal_angle_bisector_definition_v0 on F, D, G, midpoint(F, G) we get angle(D, midpoint(F, G), G) == angle(F, midpoint(F, G), D) mod 360
By perpendicular_angle_conditions_v0 on G, midpoint(E, G), D we get angle(G, midpoint(E, G), D) == orientation(D, G, midpoint(E, G)) mod 360
By concyclic_definition_0 on D, I, H, E we get E in Circle(D, H, I)
By perpendicular_lines_draw_intersection on Line(E, F), Line(C, D) we get exists(line_intersection(Line(C, D), Line(E, F)))
By internal_angle_bisector_definition_v0 on C, midpoint(F, G), B, A we get angle(C, A, midpoint(F, G)) == angle(midpoint(F, G), A, B) mod 360
By concyclic_definition_1 on J, I, D, H we get Circle(D, H, I) == Circle(D, I, J)
By concyclic_definition_1 on D, J, I, H we get Circle(D, I, J) == Circle(H, I, J)
By collinear_definition on E, I, midpoint(E, I) we get I in Line(E, midpoint(E, I)), midpoint(E, I) in Line(E, I), Line(E, I) == Line(E, midpoint(E, I)), 0 == 2 * angle(I, E, midpoint(E, I)) mod 360
By isosceles_triangle_midpoint on C, E, F we get midpoint(E, F) in median(C, E, F)
By internal_angle_bisector_definition_v0 on E, midpoint(E, G), A, B we get angle(E, B, midpoint(E, G)) == angle(midpoint(E, G), B, A) mod 360
By internal_angle_bisector_definition_v0 on C, midpoint(E, G), A, B we get angle(C, B, midpoint(E, G)) == angle(midpoint(E, G), B, A) mod 360
By internal_angle_bisector_definition_v0 on F, midpoint(F, G), B, A we get angle(F, A, midpoint(F, G)) == angle(midpoint(F, G), A, B) mod 360
By perpendicular_angle_conditions_v0 on E, midpoint(E, G), H we get angle(E, midpoint(E, G), H) == orientation(E, midpoint(E, G), H) mod 360
By perpendicular_angle_conditions_v0 on B, midpoint(E, G), G we get angle(B, midpoint(E, G), G) == orientation(B, midpoint(E, G), G) mod 360
By concyclic_definition_1 on D, J, E, H we get Circle(D, E, J) == Circle(E, H, J)
By collinear_definition on E, midpoint(E, F), F we get midpoint(E, F) in Line(E, F), F in Line(E, midpoint(E, F)), Line(E, F) == Line(E, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), E, F) mod 360
By internal_angle_bisector_definition_v0 on G, A, F, midpoint(F, G) we get angle(A, midpoint(F, G), F) == angle(G, midpoint(F, G), A) mod 360
By internal_angle_bisector_definition_v0 on B, midpoint(F, G), J, A we get angle(B, A, midpoint(F, G)) == angle(midpoint(F, G), A, J) mod 360
By internal_angle_bisector_definition_v0 on G, midpoint(E, G), C, B we get angle(G, B, midpoint(E, G)) == angle(midpoint(E, G), B, C) mod 360
By internal_angle_bisector_definition_v0 on G, midpoint(F, G), F, A we get angle(G, A, midpoint(F, G)) == angle(midpoint(F, G), A, F) mod 360
By concyclic_definition_0 on H, E, J, D we get D in Circle(E, H, J)
By internal_angle_bisector_definition_v0_r on midpoint(E, G), G, midpoint(E, G), E we get Line(E, G) == internal_angle_bisector(midpoint(E, G), E, midpoint(E, G))
By internal_angle_bisector_definition_v0 on G, D, E, midpoint(E, G) we get angle(D, midpoint(E, G), E) == angle(G, midpoint(E, G), D) mod 360
By perpendicular_angle_conditions_v0 on E, midpoint(E, G), B we get angle(E, midpoint(E, G), B) == orientation(B, E, midpoint(E, G)) mod 360
By isosceles_triangle_midpoint on D, F, E we get midpoint(E, F) in median(D, E, F)
By isosceles_triangle_midpoint on D, E, I we get midpoint(E, I) in median(D, E, I)
By collinear_definition on H, B, midpoint(E, G) we get B in Line(H, midpoint(E, G)), midpoint(E, G) in Line(B, H), Line(B, H) == Line(H, midpoint(E, G)), 0 == 2 * angle(B, H, midpoint(E, G)) mod 360
By internal_angle_bisector_definition_v0 on E, D, G, midpoint(E, G) we get angle(D, midpoint(E, G), G) == angle(E, midpoint(E, G), D) mod 360
By internal_angle_bisector_definition_v0 on F, midpoint(F, G), G, A we get angle(F, A, midpoint(F, G)) == angle(midpoint(F, G), A, G) mod 360
By perpendicular_angle_conditions_v0 on G, midpoint(E, G), B we get angle(G, midpoint(E, G), B) == orientation(B, G, midpoint(E, G)) mod 360
By collinear_definition on D, midpoint(E, G), B we get midpoint(E, G) in Line(B, D), B in Line(D, midpoint(E, G)), Line(B, D) == Line(D, midpoint(E, G)), 0 == 2 * angle(midpoint(E, G), D, B) mod 360
By internal_angle_bisector_definition_v0 on H, midpoint(E, G), H, B we get angle(H, B, midpoint(E, G)) == angle(midpoint(E, G), B, H) mod 360
By internal_angle_bisector_definition_v0 on F, A, G, midpoint(F, G) we get angle(A, midpoint(F, G), G) == angle(F, midpoint(F, G), A) mod 360
By collinear_definition on D, A, midpoint(F, G) we get A in Line(D, midpoint(F, G)), midpoint(F, G) in Line(A, D), Line(A, D) == Line(D, midpoint(F, G)), 0 == 2 * angle(A, D, midpoint(F, G)) mod 360
By collinear_definition on A, D, midpoint(F, G) we get D in Line(A, midpoint(F, G)), midpoint(F, G) in Line(A, D), Line(A, D) == Line(A, midpoint(F, G)), 0 == 2 * angle(D, A, midpoint(F, G)) mod 360
By internal_angle_bisector_definition_v0 on G, midpoint(E, G), E, D we get angle(G, D, midpoint(E, G)) == angle(midpoint(E, G), D, E) mod 360
By collinear_definition on E, midpoint(E, I), I we get midpoint(E, I) in Line(E, I), I in Line(E, midpoint(E, I)), Line(E, I) == Line(E, midpoint(E, I)), 0 == 2 * angle(midpoint(E, I), E, I) mod 360
By internal_angle_bisector_definition_v0 on G, midpoint(E, G), E, H we get angle(G, H, midpoint(E, G)) == angle(midpoint(E, G), H, E) mod 360
By collinear_definition on I, E, midpoint(E, I) we get E in Line(I, midpoint(E, I)), midpoint(E, I) in Line(E, I), Line(E, I) == Line(I, midpoint(E, I)), 0 == 2 * angle(E, I, midpoint(E, I)) mod 360
By internal_angle_bisector_definition_v0_r on G, midpoint(F, G), G, F we get Line(F, midpoint(F, G)) == internal_angle_bisector(G, F, G)
By internal_angle_bisector_definition_v0 on G, midpoint(F, G), F, D we get angle(G, D, midpoint(F, G)) == angle(midpoint(F, G), D, F) mod 360
By collinear_definition on F, midpoint(E, F), E we get midpoint(E, F) in Line(E, F), E in Line(F, midpoint(E, F)), Line(E, F) == Line(F, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), F, E) mod 360
By perpendicular_angle_conditions_v0 on H, midpoint(E, G), G we get angle(H, midpoint(E, G), G) == orientation(G, H, midpoint(E, G)) mod 360
By collinear_definition on H, D, midpoint(E, G) we get D in Line(H, midpoint(E, G)), midpoint(E, G) in Line(D, H), Line(D, H) == Line(H, midpoint(E, G)), 0 == 2 * angle(D, H, midpoint(E, G)) mod 360
By internal_angle_bisector_definition_v0 on H, midpoint(F, G), B, A we get angle(H, A, midpoint(F, G)) == angle(midpoint(F, G), A, B) mod 360
By internal_angle_bisector_definition_v0 on G, midpoint(F, G), H, A we get angle(G, A, midpoint(F, G)) == angle(midpoint(F, G), A, H) mod 360
By internal_angle_bisector_definition_v0 on E, midpoint(E, G), G, B we get angle(E, B, midpoint(E, G)) == angle(midpoint(E, G), B, G) mod 360
By perpendicular_angle_conditions_v0 on B, midpoint(E, G), E we get angle(B, midpoint(E, G), E) == orientation(B, midpoint(E, G), E) mod 360
By altitude_definition on C, E, F, Line(C, D) we get Line(C, D) == altitude(C, E, F)
By internal_angle_bisector_definition_v0 on B, midpoint(F, G), C, A we get angle(B, A, midpoint(F, G)) == angle(midpoint(F, G), A, C) mod 360
By internal_angle_bisector_definition_v0_r on E, G, E, midpoint(E, G) we get Line(G, midpoint(E, G)) == internal_angle_bisector(E, midpoint(E, G), E)
By internal_angle_bisector_definition_v0 on D, midpoint(E, G), D, H we get angle(D, H, midpoint(E, G)) == angle(midpoint(E, G), H, D) mod 360
By internal_angle_bisector_definition_v0_r on E, midpoint(E, G), E, G we get Line(G, midpoint(E, G)) == internal_angle_bisector(E, G, E)
By internal_angle_bisector_definition_v0 on C, midpoint(F, G), G, A we get angle(C, A, midpoint(F, G)) == angle(midpoint(F, G), A, G) mod 360
By perpendicular_bisector_properties on I, E we get perpendicular(Line(E, I), perpendicular_bisector(E, I)), midpoint(E, I) == line_intersection(Line(E, I), perpendicular_bisector(E, I))
By internal_angle_bisector_definition_v0 on E, midpoint(E, G), G, D we get angle(E, D, midpoint(E, G)) == angle(midpoint(E, G), D, G) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(F, G), G, midpoint(F, G), F we get Line(F, G) == internal_angle_bisector(midpoint(F, G), F, midpoint(F, G))
By collinear_definition on H, midpoint(E, G), D we get midpoint(E, G) in Line(D, H), D in Line(H, midpoint(E, G)), Line(D, H) == Line(H, midpoint(E, G)), 0 == 2 * angle(midpoint(E, G), H, D) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(E, G), E, midpoint(E, G), G we get Line(E, G) == internal_angle_bisector(midpoint(E, G), G, midpoint(E, G))
By collinear_definition on B, H, midpoint(E, G) we get H in Line(B, midpoint(E, G)), midpoint(E, G) in Line(B, H), Line(B, H) == Line(B, midpoint(E, G)), 0 == 2 * angle(H, B, midpoint(E, G)) mod 360
By internal_angle_bisector_definition_v0 on A, midpoint(E, G), E, B we get angle(A, B, midpoint(E, G)) == angle(midpoint(E, G), B, E) mod 360
By perpendicular_angle_conditions_v0 on D, midpoint(E, G), E we get angle(D, midpoint(E, G), E) == orientation(D, midpoint(E, G), E) mod 360
By internal_angle_bisector_definition_v0 on B, midpoint(F, G), H, A we get angle(B, A, midpoint(F, G)) == angle(midpoint(F, G), A, H) mod 360
By perpendicular_bisector_properties on E, F we get perpendicular(Line(E, F), perpendicular_bisector(E, F)), midpoint(E, F) == line_intersection(Line(E, F), perpendicular_bisector(E, F))
By perpendicular_angle_conditions_v0 on G, midpoint(E, G), H we get angle(G, midpoint(E, G), H) == orientation(G, midpoint(E, G), H) mod 360
By log_of_2_times_distance on I, E, midpoint(E, I), E we get log(distance(E, I)) == 0.6931471805599453 + log(distance(E, midpoint(E, I)))
By internal_angle_bisector_definition_v0 on J, midpoint(F, G), B, A we get angle(J, A, midpoint(F, G)) == angle(midpoint(F, G), A, B) mod 360
By log_of_2_times_distance on E, I, I, midpoint(E, I) we get log(distance(E, I)) == 0.6931471805599453 + log(distance(I, midpoint(E, I)))
By isosceles_triangle_altitude_v1 on midpoint(E, F), F, E we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, midpoint(E, F), F), perpendicular_line(midpoint(E, F), Line(E, F)))
By internal_angle_bisector_definition_v0 on H, midpoint(E, G), H, D we get angle(H, D, midpoint(E, G)) == angle(midpoint(E, G), D, H) mod 360
By collinear_definition on D, H, midpoint(E, G) we get H in Line(D, midpoint(E, G)), midpoint(E, G) in Line(D, H), Line(D, H) == Line(D, midpoint(E, G)), 0 == 2 * angle(H, D, midpoint(E, G)) mod 360
By internal_angle_bisector_definition_v0 on E, B, G, midpoint(E, G) we get angle(B, midpoint(E, G), G) == angle(E, midpoint(E, G), B) mod 360
By isosceles_triangle_altitude_v2 on center(d), I, E we get identical(perpendicular_bisector(E, I), internal_angle_bisector(E, center(d), I), perpendicular_line(center(d), Line(E, I)))
By perpendicular_angle_conditions_v0 on E, midpoint(E, G), D we get angle(E, midpoint(E, G), D) == orientation(D, E, midpoint(E, G)) mod 360
By internal_angle_bisector_definition_v0 on G, D, F, midpoint(F, G) we get angle(D, midpoint(F, G), F) == angle(G, midpoint(F, G), D) mod 360
By internal_angle_bisector_definition_v0 on F, midpoint(F, G), G, D we get angle(F, D, midpoint(F, G)) == angle(midpoint(F, G), D, G) mod 360
By isosceles_triangle_altitude_v3 on line_intersection(j, altitude(F, B, D)), E, G we get identical(perpendicular_bisector(E, G), internal_angle_bisector(E, line_intersection(j, altitude(F, B, D)), G), perpendicular_line(line_intersection(j, altitude(F, B, D)), Line(E, G)))
By perpendicular_angle_conditions_v0 on F, midpoint(F, G), A we get angle(F, midpoint(F, G), A) == orientation(A, F, midpoint(F, G)) mod 360
By internal_angle_bisector_definition_v0 on D, midpoint(E, G), D, B we get angle(D, B, midpoint(E, G)) == angle(midpoint(E, G), B, D) mod 360
By collinear_definition on A, midpoint(F, G), D we get midpoint(F, G) in Line(A, D), D in Line(A, midpoint(F, G)), Line(A, D) == Line(A, midpoint(F, G)), 0 == 2 * angle(midpoint(F, G), A, D) mod 360
By perpendicular_angle_conditions_v0 on F, midpoint(F, G), D we get angle(F, midpoint(F, G), D) == orientation(D, F, midpoint(F, G)) mod 360
By internal_angle_bisector_definition_v0_r on G, E, G, midpoint(E, G) we get Line(E, midpoint(E, G)) == internal_angle_bisector(G, midpoint(E, G), G)
By internal_angle_bisector_definition_v0 on C, midpoint(E, G), G, B we get angle(C, B, midpoint(E, G)) == angle(midpoint(E, G), B, G) mod 360
By internal_angle_bisector_definition_v0 on E, midpoint(E, G), G, H we get angle(E, H, midpoint(E, G)) == angle(midpoint(E, G), H, G) mod 360
By collinear_definition on D, B, midpoint(E, G) we get B in Line(D, midpoint(E, G)), midpoint(E, G) in Line(B, D), Line(B, D) == Line(D, midpoint(E, G)), 0 == 2 * angle(B, D, midpoint(E, G)) mod 360
By internal_angle_bisector_definition_v0 on B, midpoint(F, G), F, A we get angle(B, A, midpoint(F, G)) == angle(midpoint(F, G), A, F) mod 360
By altitude_definition on D, E, F, Line(C, D) we get Line(C, D) == altitude(D, E, F)
By collinear_definition on E, F, midpoint(E, F) we get F in Line(E, midpoint(E, F)), midpoint(E, F) in Line(E, F), Line(E, F) == Line(E, midpoint(E, F)), 0 == 2 * angle(F, E, midpoint(E, F)) mod 360
By collinear_definition on D, midpoint(E, G), H we get midpoint(E, G) in Line(D, H), H in Line(D, midpoint(E, G)), Line(D, H) == Line(D, midpoint(E, G)), 0 == 2 * angle(midpoint(E, G), D, H) mod 360
By perpendicular_angle_conditions_v0 on D, midpoint(F, G), G we get angle(D, midpoint(F, G), G) == orientation(D, midpoint(F, G), G) mod 360
By internal_angle_bisector_definition_v0 on G, midpoint(F, G), J, A we get angle(G, A, midpoint(F, G)) == angle(midpoint(F, G), A, J) mod 360
By isosceles_triangle_altitude_v1 on midpoint(E, F), E, F we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, midpoint(E, F), F), perpendicular_line(midpoint(E, F), Line(E, F)))
By internal_angle_bisector_definition_v0_r on G, midpoint(E, G), G, E we get Line(E, midpoint(E, G)) == internal_angle_bisector(G, E, G)
By internal_angle_bisector_definition_v0 on I, midpoint(E, G), E, H we get angle(I, H, midpoint(E, G)) == angle(midpoint(E, G), H, E) mod 360
By internal_angle_bisector_definition_v0_r on F, midpoint(F, G), F, G we get Line(G, midpoint(F, G)) == internal_angle_bisector(F, G, F)
By internal_angle_bisector_definition_v0 on B, midpoint(E, G), B, D we get angle(B, D, midpoint(E, G)) == angle(midpoint(E, G), D, B) mod 360
By collinear_definition on B, midpoint(E, G), D we get midpoint(E, G) in Line(B, D), D in Line(B, midpoint(E, G)), Line(B, D) == Line(B, midpoint(E, G)), 0 == 2 * angle(midpoint(E, G), B, D) mod 360
By internal_angle_bisector_definition_v0 on B, midpoint(E, G), B, H we get angle(B, H, midpoint(E, G)) == angle(midpoint(E, G), H, B) mod 360
By internal_angle_bisector_definition_v0 on G, midpoint(E, G), E, B we get angle(G, B, midpoint(E, G)) == angle(midpoint(E, G), B, E) mod 360
By perpendicular_angle_conditions_v0 on G, midpoint(F, G), A we get angle(G, midpoint(F, G), A) == orientation(A, G, midpoint(F, G)) mod 360
By perpendicular_angle_conditions_v0 on A, midpoint(F, G), G we get angle(A, midpoint(F, G), G) == orientation(A, midpoint(F, G), G) mod 360
By internal_angle_bisector_definition_v0 on G, midpoint(F, G), C, A we get angle(G, A, midpoint(F, G)) == angle(midpoint(F, G), A, C) mod 360
By perpendicular_angle_conditions_v0 on D, midpoint(F, G), F we get angle(D, midpoint(F, G), F) == orientation(D, midpoint(F, G), F) mod 360
By internal_angle_bisector_definition_v0 on A, midpoint(E, G), C, B we get angle(A, B, midpoint(E, G)) == angle(midpoint(E, G), B, C) mod 360
By isosceles_triangle_altitude_v2 on center(d), E, I we get identical(perpendicular_bisector(E, I), internal_angle_bisector(E, center(d), I), perpendicular_line(center(d), Line(E, I)))
By isosceles_triangle_altitude_v3 on center(d), I, E we get identical(perpendicular_bisector(E, I), internal_angle_bisector(E, center(d), I), perpendicular_line(center(d), Line(E, I)))
By isosceles_triangle_altitude_v2 on D, E, I we get identical(perpendicular_bisector(E, I), internal_angle_bisector(E, D, I), perpendicular_line(D, Line(E, I)))
By isosceles_triangle_altitude_v3 on center(d), E, I we get identical(perpendicular_bisector(E, I), internal_angle_bisector(E, center(d), I), perpendicular_line(center(d), Line(E, I)))
By draw_point_of_tangency on h, c we get exists(line_circle_tangent_point(h, c))
By isosceles_triangle_altitude_v3 on line_intersection(j, altitude(F, B, D)), G, E we get identical(perpendicular_bisector(E, G), internal_angle_bisector(E, line_intersection(j, altitude(F, B, D)), G), perpendicular_line(line_intersection(j, altitude(F, B, D)), Line(E, G)))
By draw_point_of_tangency on g, c we get exists(line_circle_tangent_point(g, c))
By isosceles_triangle_altitude_v1 on midpoint(E, I), E, I we get identical(perpendicular_bisector(E, I), internal_angle_bisector(E, midpoint(E, I), I), perpendicular_line(midpoint(E, I), Line(E, I)))
By isosceles_triangle_altitude_v1 on line_intersection(j, altitude(F, B, D)), G, E we get identical(perpendicular_bisector(E, G), internal_angle_bisector(E, line_intersection(j, altitude(F, B, D)), G), perpendicular_line(line_intersection(j, altitude(F, B, D)), Line(E, G)))
By isosceles_triangle_altitude_v3 on midpoint(E, F), F, E we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, midpoint(E, F), F), perpendicular_line(midpoint(E, F), Line(E, F)))
By draw_point_of_tangency on f, c we get exists(line_circle_tangent_point(f, c))
By isosceles_triangle_altitude_v3 on D, E, I we get identical(perpendicular_bisector(E, I), internal_angle_bisector(E, D, I), perpendicular_line(D, Line(E, I)))
By isosceles_triangle_altitude_v2 on D, I, E we get identical(perpendicular_bisector(E, I), internal_angle_bisector(E, D, I), perpendicular_line(D, Line(E, I)))
By isosceles_triangle_altitude_v1 on midpoint(E, I), I, E we get identical(perpendicular_bisector(E, I), internal_angle_bisector(E, midpoint(E, I), I), perpendicular_line(midpoint(E, I), Line(E, I)))
By isosceles_triangle_altitude_v3 on midpoint(E, F), E, F we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, midpoint(E, F), F), perpendicular_line(midpoint(E, F), Line(E, F)))
By isosceles_triangle_altitude_v3 on midpoint(E, I), I, E we get identical(perpendicular_bisector(E, I), internal_angle_bisector(E, midpoint(E, I), I), perpendicular_line(midpoint(E, I), Line(E, I)))
By isosceles_triangle_altitude_v3 on midpoint(E, I), E, I we get identical(perpendicular_bisector(E, I), internal_angle_bisector(E, midpoint(E, I), I), perpendicular_line(midpoint(E, I), Line(E, I)))
By isosceles_triangle_altitude_v1 on line_intersection(j, altitude(F, B, D)), E, G we get identical(perpendicular_bisector(E, G), internal_angle_bisector(E, line_intersection(j, altitude(F, B, D)), G), perpendicular_line(line_intersection(j, altitude(F, B, D)), Line(E, G)))
By concyclic_definition_1 on I, D, H, J we get Circle(D, H, I) == Circle(D, H, J)
By log_of_2_times_distance on F, E, midpoint(E, F), E we get log(distance(E, F)) == 0.6931471805599453 + log(distance(E, midpoint(E, F)))
By collinear_definition on midpoint(E, G), D, H we get D in Line(H, midpoint(E, G)), H in Line(D, midpoint(E, G)), Line(D, midpoint(E, G)) == Line(H, midpoint(E, G)), 0 == 2 * angle(D, midpoint(E, G), H) mod 360
By concyclic_definition_1 on D, I, H, E we get Circle(D, H, I) == Circle(E, H, I)
By collinear_definition on midpoint(E, I), I, E we get I in Line(E, midpoint(E, I)), E in Line(I, midpoint(E, I)), Line(E, midpoint(E, I)) == Line(I, midpoint(E, I)), 0 == 2 * angle(I, midpoint(E, I), E) mod 360
By concyclic_definition_1 on E, H, J, D we get Circle(D, H, J) == Circle(E, H, J)
By collinear_definition on midpoint(E, F), F, E we get F in Line(E, midpoint(E, F)), E in Line(F, midpoint(E, F)), Line(E, midpoint(E, F)) == Line(F, midpoint(E, F)), 0 == 2 * angle(F, midpoint(E, F), E) mod 360
By concyclic_definition_1 on D, I, H, J we get Circle(D, H, I) == Circle(H, I, J)
By power_of_a_point_definition on midpoint(E, G), G, E, c we get log(power_of_a_point(midpoint(E, G), c)) == log(distance(G, midpoint(E, G))) + log(distance(E, midpoint(E, G)))
By isosceles_triangle_properties on line_intersection(j, altitude(F, B, D)), E, G we get distance(E, line_intersection(j, altitude(F, B, D))) == distance(G, line_intersection(j, altitude(F, B, D))), angle(E, G, line_intersection(j, altitude(F, B, D))) == angle(line_intersection(j, altitude(F, B, D)), E, G) mod 360
By collinear_definition on midpoint(E, G), H, B we get H in Line(B, midpoint(E, G)), B in Line(H, midpoint(E, G)), Line(B, midpoint(E, G)) == Line(H, midpoint(E, G)), 0 == 2 * angle(H, midpoint(E, G), B) mod 360
By log_of_2_times_distance on E, F, F, midpoint(E, F) we get log(distance(E, F)) == 0.6931471805599453 + log(distance(F, midpoint(E, F)))
By power_of_a_point_definition on midpoint(F, G), F, G, Circle(A, D, F) we get log(power_of_a_point(midpoint(F, G), Circle(A, D, F))) == log(distance(F, midpoint(F, G))) + log(distance(G, midpoint(F, G)))
By isosceles_triangle_properties on midpoint(E, I), E, I we get distance(E, midpoint(E, I)) == distance(I, midpoint(E, I)), angle(E, I, midpoint(E, I)) == angle(midpoint(E, I), E, I) mod 360
By power_of_a_point_definition on midpoint(E, G), G, E, Circle(B, D, E) we get log(power_of_a_point(midpoint(E, G), Circle(B, D, E))) == log(distance(G, midpoint(E, G))) + log(distance(E, midpoint(E, G)))
By collinear_definition on midpoint(E, G), D, B we get D in Line(B, midpoint(E, G)), B in Line(D, midpoint(E, G)), Line(B, midpoint(E, G)) == Line(D, midpoint(E, G)), 0 == 2 * angle(D, midpoint(E, G), B) mod 360
By concyclic_definition_1 on I, E, H, D we get Circle(D, E, H) == Circle(E, H, I)
By concyclic_definition_1 on D, E, H, J we get Circle(D, E, H) == Circle(E, H, J)
By collinear_definition on midpoint(E, I), E, I we get E in Line(I, midpoint(E, I)), I in Line(E, midpoint(E, I)), Line(E, midpoint(E, I)) == Line(I, midpoint(E, I)), 0 == 2 * angle(E, midpoint(E, I), I) mod 360
By concyclic_definition_1 on I, H, J, D we get Circle(D, H, J) == Circle(H, I, J)
By collinear_definition on midpoint(F, G), A, D we get A in Line(D, midpoint(F, G)), D in Line(A, midpoint(F, G)), Line(A, midpoint(F, G)) == Line(D, midpoint(F, G)), 0 == 2 * angle(A, midpoint(F, G), D) mod 360
By concyclic_definition_1 on E, D, H, I we get Circle(D, E, H) == Circle(D, H, I)
By concyclic_definition_1 on J, H, D, E we get Circle(D, E, H) == Circle(D, H, J)
By collinear_definition on midpoint(E, G), B, H we get B in Line(H, midpoint(E, G)), H in Line(B, midpoint(E, G)), Line(B, midpoint(E, G)) == Line(H, midpoint(E, G)), 0 == 2 * angle(B, midpoint(E, G), H) mod 360
By altitude_definition on D, I, E, Line(D, center(d)) we get altitude(D, E, I) == Line(D, center(d))
By collinear_definition on midpoint(F, G), D, A we get D in Line(A, midpoint(F, G)), A in Line(D, midpoint(F, G)), Line(A, midpoint(F, G)) == Line(D, midpoint(F, G)), 0 == 2 * angle(D, midpoint(F, G), A) mod 360
By power_of_a_point_tangent on A, F, c we get 2 * log(distance(A, F)) == log(power_of_a_point(A, c))
By isosceles_triangle_properties on midpoint(E, I), I, E we get distance(E, midpoint(E, I)) == distance(I, midpoint(E, I)), angle(I, E, midpoint(E, I)) == angle(midpoint(E, I), I, E) mod 360
By collinear_definition on midpoint(E, F), E, F we get E in Line(F, midpoint(E, F)), F in Line(E, midpoint(E, F)), Line(E, midpoint(E, F)) == Line(F, midpoint(E, F)), 0 == 2 * angle(E, midpoint(E, F), F) mod 360
By isosceles_triangle_properties on midpoint(E, F), E, F we get distance(E, midpoint(E, F)) == distance(F, midpoint(E, F)), angle(E, F, midpoint(E, F)) == angle(midpoint(E, F), E, F) mod 360
By isosceles_triangle_properties on line_intersection(j, altitude(F, B, D)), G, E we get distance(E, line_intersection(j, altitude(F, B, D))) == distance(G, line_intersection(j, altitude(F, B, D))), angle(G, E, line_intersection(j, altitude(F, B, D))) == angle(line_intersection(j, altitude(F, B, D)), G, E) mod 360
By power_of_a_point_tangent on J, F, c we get 2 * log(distance(F, J)) == log(power_of_a_point(J, c))
By isosceles_triangle_properties on midpoint(E, F), F, E we get distance(E, midpoint(E, F)) == distance(F, midpoint(E, F)), angle(F, E, midpoint(E, F)) == angle(midpoint(E, F), F, E) mod 360
By collinear_definition on midpoint(E, G), H, D we get H in Line(D, midpoint(E, G)), D in Line(H, midpoint(E, G)), Line(D, midpoint(E, G)) == Line(H, midpoint(E, G)), 0 == 2 * angle(H, midpoint(E, G), D) mod 360
By collinear_definition on midpoint(E, G), B, D we get B in Line(D, midpoint(E, G)), D in Line(B, midpoint(E, G)), Line(B, midpoint(E, G)) == Line(D, midpoint(E, G)), 0 == 2 * angle(B, midpoint(E, G), D) mod 360
By power_of_a_point_tangent on B, G, c we get 2 * log(distance(B, G)) == log(power_of_a_point(B, c))
By power_of_a_point_definition on midpoint(F, G), F, G, c we get log(power_of_a_point(midpoint(F, G), c)) == log(distance(F, midpoint(F, G))) + log(distance(G, midpoint(F, G)))
By power_of_a_point_tangent on B, E, c we get 2 * log(distance(B, E)) == log(power_of_a_point(B, c))
By power_of_a_point_tangent on C, E, c we get 2 * log(distance(C, E)) == log(power_of_a_point(C, c))
By power_of_a_point_tangent on C, F, c we get 2 * log(distance(C, F)) == log(power_of_a_point(C, c))
By power_of_a_point_tangent on A, G, c we get 2 * log(distance(A, G)) == log(power_of_a_point(A, c))
By power_of_a_point_definition on midpoint(E, G), D, B, Circle(B, D, E) we get log(power_of_a_point(midpoint(E, G), Circle(B, D, E))) == log(distance(D, midpoint(E, G))) + log(distance(B, midpoint(E, G)))
By power_of_a_point_definition on midpoint(F, G), A, D, Circle(A, D, F) we get log(power_of_a_point(midpoint(F, G), Circle(A, D, F))) == log(distance(A, midpoint(F, G))) + log(distance(D, midpoint(F, G)))
By concyclic_sufficient_conditions_v1 on D, midpoint(F, G), G, midpoint(E, G) we get concyclic(D, G, midpoint(E, G), midpoint(F, G))
By tangent_definition_from_perpendicularity_v0 on line_circle_tangent_point(g, c), g, c we get perpendicular(g, Line(center(c), line_circle_tangent_point(g, c)))
By tangent_definition_from_perpendicularity_v0 on line_circle_tangent_point(f, c), f, c we get perpendicular(f, Line(center(c), line_circle_tangent_point(f, c)))
By tangent_definition_from_perpendicularity_v0 on line_circle_tangent_point(h, c), h, c we get perpendicular(h, Line(center(c), line_circle_tangent_point(h, c)))
By angles_on_chord_v1 on H, E, D, J, d we get angle(H, D, E) == angle(H, J, E) + 180 mod 360
By angle_to_center on I, H, J, d we get 2 * angle(I, H, J) == angle(I, center(d), J) mod 360
By angles_on_chord_v1 on H, E, J, I, d we get angle(H, J, E) == angle(H, I, E) + 180 mod 360
By angles_on_chord_v1 on J, I, E, H, d we get angle(J, E, I) == angle(J, H, I) + 180 mod 360
By angles_on_chord_v0 on I, H, J, E, d we get angle(I, E, H) == angle(I, J, H) mod 360
By angles_on_chord_v1 on H, E, I, J, d we get angle(H, I, E) == angle(H, J, E) + 180 mod 360
By angle_to_center on J, H, I, d we get 2 * angle(J, H, I) == angle(J, center(d), I) mod 360
By angles_on_chord_v1 on D, J, E, H, d we get angle(D, E, J) == angle(D, H, J) + 180 mod 360
By angles_on_chord_v0 on D, H, J, E, d we get angle(D, E, H) == angle(D, J, H) mod 360
By angles_on_chord_v1 on E, H, J, I, d we get angle(E, J, H) == angle(E, I, H) + 180 mod 360
By angles_on_chord_v0 on J, E, D, H, d we get angle(J, D, E) == angle(J, H, E) mod 360
By angles_on_chord_v0 on E, J, I, H, d we get angle(E, H, J) == angle(E, I, J) mod 360
By angles_on_chord_v1 on J, D, H, E, d we get angle(J, H, D) == angle(J, E, D) + 180 mod 360
By angles_on_chord_v1 on I, J, H, D, d we get angle(I, H, J) == angle(I, D, J) + 180 mod 360
By angles_on_chord_v1 on I, J, D, H, d we get angle(I, D, J) == angle(I, H, J) + 180 mod 360
By angles_on_chord_v0 on J, E, I, H, d we get angle(J, H, E) == angle(J, I, E) mod 360
By angles_on_chord_v1 on H, D, J, I, d we get angle(H, J, D) == angle(H, I, D) + 180 mod 360
By angles_on_chord_v1 on J, I, H, E, d we get angle(J, H, I) == angle(J, E, I) + 180 mod 360
By angles_on_chord_v0 on E, J, D, H, d we get angle(E, D, J) == angle(E, H, J) mod 360
By angle_to_center on J, H, E, d we get 2 * angle(J, H, E) == angle(J, center(d), E) mod 360
By angles_on_chord_v0 on H, I, J, E, d we get angle(H, E, I) == angle(H, J, I) mod 360
By angles_on_chord_v1 on D, H, I, J, d we get angle(D, I, H) == angle(D, J, H) + 180 mod 360
By angles_on_chord_v0 on I, H, J, D, d we get angle(I, D, H) == angle(I, J, H) mod 360
By angles_on_chord_v1 on H, D, I, J, d we get angle(H, I, D) == angle(H, J, D) + 180 mod 360
By angles_on_chord_v0 on H, D, J, E, d we get angle(H, E, D) == angle(H, J, D) mod 360
By angles_on_chord_v1 on E, H, J, D, d we get angle(E, J, H) == angle(E, D, H) + 180 mod 360
By angles_on_chord_v1 on D, J, H, E, d we get angle(D, H, J) == angle(D, E, J) + 180 mod 360
By angles_on_chord_v1 on D, H, J, I, d we get angle(D, J, H) == angle(D, I, H) + 180 mod 360
By angles_on_chord_v1 on J, I, D, H, d we get angle(J, D, I) == angle(J, H, I) + 180 mod 360
By angles_on_chord_v1 on H, E, J, D, d we get angle(H, J, E) == angle(H, D, E) + 180 mod 360
By angles_on_chord_v0 on H, I, J, D, d we get angle(H, D, I) == angle(H, J, I) mod 360
By angles_on_chord_v0 on J, D, H, I, d we get angle(J, H, D) == angle(J, I, D) mod 360
By angles_on_chord_v1 on I, J, E, H, d we get angle(I, E, J) == angle(I, H, J) + 180 mod 360
By angles_on_chord_v0 on D, J, H, I, d we get angle(D, H, J) == angle(D, I, J) mod 360
By angles_on_chord_v1 on E, H, D, J, d we get angle(E, D, H) == angle(E, J, H) + 180 mod 360
By angles_on_chord_v1 on I, J, H, E, d we get angle(I, H, J) == angle(I, E, J) + 180 mod 360
By angles_on_chord_v1 on J, D, E, H, d we get angle(J, E, D) == angle(J, H, D) + 180 mod 360
By angles_on_chord_v1 on J, I, H, D, d we get angle(J, H, I) == angle(J, D, I) + 180 mod 360
By angles_on_chord_v1 on E, H, I, J, d we get angle(E, I, H) == angle(E, J, H) + 180 mod 360
By angle_to_center on D, H, J, d we get 2 * angle(D, H, J) == angle(D, center(d), J) mod 360
By angle_to_center on E, H, J, d we get 2 * angle(E, H, J) == angle(E, center(d), J) mod 360
By angle_to_center on J, H, D, d we get 2 * angle(J, H, D) == angle(J, center(d), D) mod 360
By perpendicular_line_definition on I, Line(F, I), perpendicular_bisector(F, I) we get Line(F, I) == perpendicular_line(I, perpendicular_bisector(F, I))
By median_definition on D, I, F, perpendicular_bisector(F, I) we get median(D, F, I) == perpendicular_bisector(F, I)
By circumcenter_perpendicular_bisectors on F, I, G we get circumcenter(F, G, I) in perpendicular_bisector(F, I), circumcenter(F, G, I) in perpendicular_bisector(G, I), circumcenter(F, G, I) in perpendicular_bisector(F, G)
By perpendicular_line_definition on I, k, perpendicular_bisector(G, I) we get k == perpendicular_line(I, perpendicular_bisector(G, I))
By perpendicular_line_definition on line_circle_tangent_point(g, c), g, Line(D, E) we get g == perpendicular_line(line_circle_tangent_point(g, c), Line(D, E))
By perpendicular_line_definition on F, Line(F, I), perpendicular_bisector(F, I) we get Line(F, I) == perpendicular_line(F, perpendicular_bisector(F, I))
By perpendicular_line_definition on D, perpendicular_bisector(F, I), Line(F, I) we get perpendicular_bisector(F, I) == perpendicular_line(D, Line(F, I))
By perpendicular_line_definition on line_circle_tangent_point(f, c), f, Line(D, G) we get f == perpendicular_line(line_circle_tangent_point(f, c), Line(D, G))
By perpendicular_line_definition on H, k, perpendicular_bisector(G, I) we get k == perpendicular_line(H, perpendicular_bisector(G, I))
By perpendicular_line_definition on D, perpendicular_bisector(G, I), k we get perpendicular_line(D, k) == perpendicular_bisector(G, I)
By median_definition on D, I, G, perpendicular_bisector(G, I) we get median(D, G, I) == perpendicular_bisector(G, I)
By perpendicular_line_definition on midpoint(E, I), Line(E, I), median(D, E, I) we get Line(E, I) == perpendicular_line(midpoint(E, I), median(D, E, I))
By perpendicular_line_definition on G, k, perpendicular_bisector(G, I) we get k == perpendicular_line(G, perpendicular_bisector(G, I))
By perpendicular_line_definition on line_circle_tangent_point(h, c), h, Line(D, F) we get h == perpendicular_line(line_circle_tangent_point(h, c), Line(D, F))
By circle_radius_v0_r on line_circle_tangent_point(h, c), c we get radius(c) == distance(center(c), line_circle_tangent_point(h, c))
By line_unique_intersection_v1 on Line(D, F), Line(E, F), F, midpoint(E, F) we get midpoint(E, F) not in Line(D, F)
By circle_radius_v0_r on line_circle_tangent_point(f, c), c we get radius(c) == distance(center(c), line_circle_tangent_point(f, c))
By line_unique_intersection_v1 on g, Line(E, F), E, midpoint(E, F) we get midpoint(E, F) not in g
By circle_radius_v0_r on line_circle_tangent_point(g, c), c we get radius(c) == distance(center(c), line_circle_tangent_point(g, c))
By line_unique_intersection_v1 on median(D, E, I), Line(E, I), midpoint(E, I), E we get E not in median(D, E, I)
By line_unique_intersection_v1 on h, Line(C, D), C, midpoint(E, F) we get midpoint(E, F) not in h
By line_unique_intersection_v1 on Line(E, H), Line(E, F), E, midpoint(E, F) we get midpoint(E, F) not in Line(E, H)
By line_unique_intersection_v1 on i, Line(C, D), D, midpoint(E, F) we get midpoint(E, F) not in i
By line_unique_intersection_v1 on Line(E, I), Line(E, F), E, midpoint(E, F) we get midpoint(E, F) not in Line(E, I)
By line_unique_intersection_v1 on Line(E, F), Line(E, I), E, midpoint(E, I) we get midpoint(E, I) not in Line(E, F)
By line_unique_intersection_v1 on Line(E, H), Line(E, I), E, midpoint(E, I) we get midpoint(E, I) not in Line(E, H)
By circle_radius_v0_r on H, d we get radius(d) == distance(H, center(d))
By line_unique_intersection_v1 on Line(F, I), Line(E, F), F, midpoint(E, F) we get midpoint(E, F) not in Line(F, I)
By line_unique_intersection_v1 on Line(D, I), Line(E, I), I, midpoint(E, I) we get midpoint(E, I) not in Line(D, I)
By line_unique_intersection_v1 on Line(D, J), Line(C, D), D, midpoint(E, F) we get midpoint(E, F) not in Line(D, J)
By line_unique_intersection_v1 on g, Line(E, I), E, midpoint(E, I) we get midpoint(E, I) not in g
By line_unique_intersection_v1 on j, Line(C, D), D, midpoint(E, F) we get midpoint(E, F) not in j
By line_unique_intersection_v1 on Line(E, G), Line(E, F), E, midpoint(E, F) we get midpoint(E, F) not in Line(E, G)
By line_unique_intersection_v1 on Line(F, I), Line(E, I), I, midpoint(E, I) we get midpoint(E, I) not in Line(F, I)
By line_unique_intersection_v1 on k, Line(E, I), I, midpoint(E, I) we get midpoint(E, I) not in k
By line_unique_intersection_v1 on Line(F, G), Line(E, F), F, midpoint(E, F) we get midpoint(E, F) not in Line(F, G)
By line_unique_intersection_v1 on Line(D, E), Line(E, F), E, midpoint(E, F) we get midpoint(E, F) not in Line(D, E)
By line_unique_intersection_v1 on median(D, E, I), Line(E, I), midpoint(E, I), I we get I not in median(D, E, I)
By line_unique_intersection_v1 on Line(I, J), Line(E, I), I, midpoint(E, I) we get midpoint(E, I) not in Line(I, J)
By line_unique_intersection_v1 on Line(D, I), Line(C, D), D, midpoint(E, F) we get midpoint(E, F) not in Line(D, I)
By line_unique_intersection_v1 on Line(D, G), Line(C, D), D, midpoint(E, F) we get midpoint(E, F) not in Line(D, G)
By line_unique_intersection_v1 on Line(E, G), Line(E, I), E, midpoint(E, I) we get midpoint(E, I) not in Line(E, G)
By line_unique_intersection_v1 on Line(E, J), Line(E, I), E, midpoint(E, I) we get midpoint(E, I) not in Line(E, J)
By line_unique_intersection_v1 on Line(D, E), Line(E, I), E, midpoint(E, I) we get midpoint(E, I) not in Line(D, E)
By line_unique_intersection_v1 on Line(E, J), Line(E, F), E, midpoint(E, F) we get midpoint(E, F) not in Line(E, J)
By angle_to_center on I, E, H, d we get 2 * angle(I, E, H) == angle(I, center(d), H) mod 360
By angle_to_center on I, D, H, d we get 2 * angle(I, D, H) == angle(I, center(d), H) mod 360
By angle_to_center on E, J, H, d we get 2 * angle(E, J, H) == angle(E, center(d), H) mod 360
By angle_to_center on H, J, E, d we get 2 * angle(H, J, E) == angle(H, center(d), E) mod 360
By angle_to_center on H, D, J, d we get 2 * angle(H, D, J) == angle(H, center(d), J) mod 360
By angle_to_center on H, E, I, d we get 2 * angle(H, E, I) == angle(H, center(d), I) mod 360
By angle_to_center on D, I, H, d we get 2 * angle(D, I, H) == angle(D, center(d), H) mod 360
By angle_to_center on H, J, D, d we get 2 * angle(H, J, D) == angle(H, center(d), D) mod 360
By angle_to_center on J, I, H, d we get 2 * angle(J, I, H) == angle(J, center(d), H) mod 360
By angle_to_center on H, I, D, d we get 2 * angle(H, I, D) == angle(H, center(d), D) mod 360
By angle_to_center on E, D, H, d we get 2 * angle(E, D, H) == angle(E, center(d), H) mod 360
By projection_definition on E, midpoint(E, I), median(D, E, I) we get midpoint(E, I) == projection(E, median(D, E, I))
By angle_to_center on H, D, I, d we get 2 * angle(H, D, I) == angle(H, center(d), I) mod 360
By angle_to_center on H, I, J, d we get 2 * angle(H, I, J) == angle(H, center(d), J) mod 360
By angle_to_center on D, J, H, d we get 2 * angle(D, J, H) == angle(D, center(d), H) mod 360
By angle_to_center on D, E, H, d we get 2 * angle(D, E, H) == angle(D, center(d), H) mod 360
By angle_to_center on I, J, H, d we get 2 * angle(I, J, H) == angle(I, center(d), H) mod 360
By angle_to_center on E, I, H, d we get 2 * angle(E, I, H) == angle(E, center(d), H) mod 360
By angle_to_center on H, D, E, d we get 2 * angle(H, D, E) == angle(H, center(d), E) mod 360
By angle_to_center on H, J, I, d we get 2 * angle(H, J, I) == angle(H, center(d), I) mod 360
By angle_to_center on H, I, E, d we get 2 * angle(H, I, E) == angle(H, center(d), E) mod 360
By angle_to_center on J, E, H, d we get 2 * angle(J, E, H) == angle(J, center(d), H) mod 360
By angle_to_center on J, D, H, d we get 2 * angle(J, D, H) == angle(J, center(d), H) mod 360
By angle_to_center on H, E, D, d we get 2 * angle(H, E, D) == angle(H, center(d), D) mod 360
By angle_to_center on H, E, J, d we get 2 * angle(H, E, J) == angle(H, center(d), J) mod 360
By between_implies_orientation on J, E, midpoint(E, F), F we get orientation(E, midpoint(E, F), J) == orientation(F, J, midpoint(E, F)) mod 360, orientation(E, F, J) == orientation(E, midpoint(E, F), J) mod 360
By collinear_and_not_between_implies_orientation on B, E, F, midpoint(E, F) we get orientation(B, F, E) == orientation(B, F, midpoint(E, F)) mod 360
By same_angle_v0 on E, G, midpoint(E, G), B we get angle(G, E, B) == angle(midpoint(E, G), E, B) mod 360
By projection_definition on D, midpoint(E, F), Line(E, F) we get midpoint(E, F) == projection(D, Line(E, F))
By projection_definition on D, midpoint(E, I), Line(E, I) we get midpoint(E, I) == projection(D, Line(E, I))
By same_angle_v0 on G, E, midpoint(E, G), B we get angle(E, G, B) == angle(midpoint(E, G), G, B) mod 360
By same_angle_v0 on H, midpoint(E, G), B, E we get angle(B, H, E) == angle(midpoint(E, G), H, E) mod 360
By same_angle_v0 on G, midpoint(E, G), E, D we get angle(E, G, D) == angle(midpoint(E, G), G, D) mod 360
By same_angle_v0 on F, G, midpoint(F, G), E we get angle(G, F, E) == angle(midpoint(F, G), F, E) mod 360
By same_angle_v0 on G, F, midpoint(F, G), E we get angle(F, G, E) == angle(midpoint(F, G), G, E) mod 360
By same_angle_v0 on E, midpoint(E, G), G, C we get angle(G, E, C) == angle(midpoint(E, G), E, C) mod 360
By between_implies_orientation on B, E, midpoint(E, F), F we get orientation(B, E, midpoint(E, F)) == orientation(B, midpoint(E, F), F) mod 360, orientation(B, E, F) == orientation(B, E, midpoint(E, F)) mod 360
By same_angle_v0 on B, H, midpoint(E, G), E we get angle(H, B, E) == angle(midpoint(E, G), B, E) mod 360
By same_angle_v0 on G, F, midpoint(F, G), A we get angle(F, G, A) == angle(midpoint(F, G), G, A) mod 360
By collinear_and_not_between_implies_orientation on D, midpoint(E, F), E, F we get orientation(D, E, F) == orientation(D, E, midpoint(E, F)) mod 360
By same_angle_v0 on E, G, midpoint(E, G), J we get angle(G, E, J) == angle(midpoint(E, G), E, J) mod 360
By same_angle_v0 on E, G, midpoint(E, G), D we get angle(G, E, D) == angle(midpoint(E, G), E, D) mod 360
By same_angle_v1 on D, midpoint(E, G), H, G we get angle(H, D, G) + 180 == angle(midpoint(E, G), D, G) mod 360
By same_angle_v0 on E, G, midpoint(E, G), I we get angle(G, E, I) == angle(midpoint(E, G), E, I) mod 360
By collinear_and_not_between_implies_orientation on H, midpoint(E, F), E, F we get orientation(E, F, H) == orientation(E, midpoint(E, F), H) mod 360
By same_angle_v0 on F, midpoint(F, G), G, I we get angle(G, F, I) == angle(midpoint(F, G), F, I) mod 360
By same_angle_v0 on F, midpoint(F, G), G, A we get angle(G, F, A) == angle(midpoint(F, G), F, A) mod 360
By between_implies_orientation on I, F, midpoint(E, F), E we get orientation(E, I, midpoint(E, F)) == orientation(F, midpoint(E, F), I) mod 360, orientation(E, I, F) == orientation(F, midpoint(E, F), I) mod 360
By same_angle_v0 on E, midpoint(E, G), G, H we get angle(G, E, H) == angle(midpoint(E, G), E, H) mod 360
By same_angle_v0 on H, B, midpoint(E, G), G we get angle(B, H, G) == angle(midpoint(E, G), H, G) mod 360
By same_angle_v0 on G, E, midpoint(E, G), F we get angle(E, G, F) == angle(midpoint(E, G), G, F) mod 360
By between_imply_not_between on G, midpoint(G, I), I we get collinear_and_not_between(I, G, midpoint(G, I))
By collinear_and_not_between_implies_orientation on G, E, F, midpoint(E, F) we get orientation(E, G, F) == orientation(F, midpoint(E, F), G) mod 360
By between_implies_orientation on D, F, midpoint(E, F), E we get orientation(D, F, midpoint(E, F)) == orientation(D, midpoint(E, F), E) mod 360, orientation(D, F, E) == orientation(D, F, midpoint(E, F)) mod 360
By same_angle_v0 on F, midpoint(F, G), G, D we get angle(G, F, D) == angle(midpoint(F, G), F, D) mod 360
By same_angle_v0 on G, midpoint(E, G), E, I we get angle(E, G, I) == angle(midpoint(E, G), G, I) mod 360
By perpendicular_direction_conditions_v0_r on center(d), D, midpoint(E, I), I we get 180 == 2 * direction(center(d), D) - 2 * direction(midpoint(E, I), I) mod 360
By projection_definition on I, midpoint(E, I), median(D, E, I) we get midpoint(E, I) == projection(I, median(D, E, I))
By perpendicular_direction_conditions_v0_r on D, center(d), midpoint(E, I), E we get 180 == 2 * direction(D, center(d)) - 2 * direction(midpoint(E, I), E) mod 360
By same_angle_v0 on G, midpoint(F, G), F, B we get angle(F, G, B) == angle(midpoint(F, G), G, B) mod 360
By same_angle_v0 on G, midpoint(E, G), E, A we get angle(E, G, A) == angle(midpoint(E, G), G, A) mod 360
By between_implies_orientation on B, F, midpoint(E, F), E we get orientation(B, F, midpoint(E, F)) == orientation(B, midpoint(E, F), E) mod 360, orientation(B, F, E) == orientation(B, F, midpoint(E, F)) mod 360
By between_implies_orientation on D, I, midpoint(E, I), E we get orientation(D, I, midpoint(E, I)) == orientation(D, midpoint(E, I), E) mod 360, orientation(D, I, E) == orientation(D, I, midpoint(E, I)) mod 360
By same_angle_v0 on B, midpoint(E, G), D, E we get angle(D, B, E) == angle(midpoint(E, G), B, E) mod 360
By same_angle_v0 on D, midpoint(E, G), B, G we get angle(B, D, G) == angle(midpoint(E, G), D, G) mod 360
By between_implies_orientation on A, E, midpoint(E, F), F we get orientation(A, E, midpoint(E, F)) == orientation(A, midpoint(E, F), F) mod 360, orientation(A, E, F) == orientation(A, E, midpoint(E, F)) mod 360
By projection_definition on C, midpoint(E, F), Line(E, F) we get midpoint(E, F) == projection(C, Line(E, F))
By collinear_and_not_between_implies_orientation on C, midpoint(E, F), E, F we get orientation(C, E, F) == orientation(C, E, midpoint(E, F)) mod 360
By same_angle_v0 on B, H, midpoint(E, G), G we get angle(H, B, G) == angle(midpoint(E, G), B, G) mod 360
By between_implies_orientation on D, E, midpoint(E, I), I we get orientation(D, E, midpoint(E, I)) == orientation(D, midpoint(E, I), I) mod 360, orientation(D, E, I) == orientation(D, E, midpoint(E, I)) mod 360
By collinear_and_not_between_implies_orientation on G, F, E, midpoint(E, F) we get orientation(E, F, G) == orientation(E, midpoint(E, F), G) mod 360
By same_angle_v0 on F, midpoint(F, G), G, C we get angle(G, F, C) == angle(midpoint(F, G), F, C) mod 360
By same_angle_v0 on G, midpoint(F, G), F, D we get angle(F, G, D) == angle(midpoint(F, G), G, D) mod 360
By same_angle_v0 on G, midpoint(F, G), F, H we get angle(F, G, H) == angle(midpoint(F, G), G, H) mod 360
By same_angle_v0 on F, midpoint(F, G), G, J we get angle(G, F, J) == angle(midpoint(F, G), F, J) mod 360
By same_angle_v0 on B, D, midpoint(E, G), G we get angle(D, B, G) == angle(midpoint(E, G), B, G) mod 360
By same_angle_v0 on A, D, midpoint(F, G), F we get angle(D, A, F) == angle(midpoint(F, G), A, F) mod 360
By collinear_and_not_between_implies_orientation on J, midpoint(E, F), F, E we get orientation(E, J, F) == orientation(F, midpoint(E, F), J) mod 360
By collinear_and_not_between_implies_orientation on C, midpoint(E, F), F, E we get orientation(C, F, E) == orientation(C, F, midpoint(E, F)) mod 360
By collinear_and_not_between_implies_orientation on H, midpoint(E, F), F, E we get orientation(E, H, F) == orientation(F, midpoint(E, F), H) mod 360
By same_angle_v0 on G, F, midpoint(F, G), I we get angle(F, G, I) == angle(midpoint(F, G), G, I) mod 360
By collinear_and_not_between_implies_orientation on A, midpoint(E, F), F, E we get orientation(A, F, E) == orientation(A, F, midpoint(E, F)) mod 360
By between_implies_orientation on G, E, midpoint(E, F), F we get orientation(E, midpoint(E, F), G) == orientation(F, G, midpoint(E, F)) mod 360, orientation(E, F, G) == orientation(E, midpoint(E, F), G) mod 360
By same_angle_v1 on D, H, midpoint(E, G), G we get angle(H, D, G) == angle(midpoint(E, G), D, G) + 180 mod 360
By same_angle_v0 on H, D, midpoint(E, G), G we get angle(D, H, G) == angle(midpoint(E, G), H, G) mod 360
By same_angle_v0 on D, A, midpoint(F, G), F we get angle(A, D, F) == angle(midpoint(F, G), D, F) mod 360
By between_implies_orientation on C, F, midpoint(E, F), E we get orientation(C, F, midpoint(E, F)) == orientation(C, midpoint(E, F), E) mod 360, orientation(C, F, E) == orientation(C, F, midpoint(E, F)) mod 360
By same_angle_v0 on F, midpoint(F, G), G, H we get angle(G, F, H) == angle(midpoint(F, G), F, H) mod 360
By between_implies_orientation on H, F, midpoint(E, F), E we get orientation(E, H, midpoint(E, F)) == orientation(F, midpoint(E, F), H) mod 360, orientation(E, H, F) == orientation(F, midpoint(E, F), H) mod 360
By same_angle_v0 on E, G, midpoint(E, G), F we get angle(G, E, F) == angle(midpoint(E, G), E, F) mod 360
By between_implies_orientation on G, F, midpoint(E, F), E we get orientation(E, G, midpoint(E, F)) == orientation(F, midpoint(E, F), G) mod 360, orientation(E, G, F) == orientation(F, midpoint(E, F), G) mod 360
By same_angle_v0 on D, midpoint(E, G), B, E we get angle(B, D, E) == angle(midpoint(E, G), D, E) mod 360
By perpendicular_direction_conditions_v0_r on center(d), D, midpoint(E, I), E we get 180 == 2 * direction(center(d), D) - 2 * direction(midpoint(E, I), E) mod 360
By between_implies_orientation on H, E, midpoint(E, F), F we get orientation(E, midpoint(E, F), H) == orientation(F, H, midpoint(E, F)) mod 360, orientation(E, F, H) == orientation(E, midpoint(E, F), H) mod 360
By same_angle_v0 on H, D, midpoint(E, G), E we get angle(D, H, E) == angle(midpoint(E, G), H, E) mod 360
By between_implies_orientation on J, F, midpoint(E, F), E we get orientation(E, J, midpoint(E, F)) == orientation(F, midpoint(E, F), J) mod 360, orientation(E, J, F) == orientation(F, midpoint(E, F), J) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, I), E, center(d), D we get 180 == 2 * direction(midpoint(E, I), E) - 2 * direction(center(d), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, I), I, D, center(d) we get 180 == 2 * direction(midpoint(E, I), I) - 2 * direction(D, center(d)) mod 360
By same_angle_v0 on A, D, midpoint(F, G), G we get angle(D, A, G) == angle(midpoint(F, G), A, G) mod 360
By same_angle_v1 on D, midpoint(E, G), H, E we get angle(H, D, E) + 180 == angle(midpoint(E, G), D, E) mod 360
By between_implies_orientation on I, E, midpoint(E, F), F we get orientation(E, midpoint(E, F), I) == orientation(F, I, midpoint(E, F)) mod 360, orientation(E, F, I) == orientation(E, midpoint(E, F), I) mod 360
By perpendicular_direction_conditions_v0_r on D, center(d), midpoint(E, I), I we get 180 == 2 * direction(D, center(d)) - 2 * direction(midpoint(E, I), I) mod 360
By same_angle_v0 on D, midpoint(F, G), A, G we get angle(A, D, G) == angle(midpoint(F, G), D, G) mod 360
By between_implies_orientation on D, E, midpoint(E, F), F we get orientation(D, E, midpoint(E, F)) == orientation(D, midpoint(E, F), F) mod 360, orientation(D, E, F) == orientation(D, E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, I), I, center(d), D we get 180 == 2 * direction(midpoint(E, I), I) - 2 * direction(center(d), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, I), E, D, center(d) we get 180 == 2 * direction(midpoint(E, I), E) - 2 * direction(D, center(d)) mod 360
By same_angle_v0 on G, E, midpoint(E, G), H we get angle(E, G, H) == angle(midpoint(E, G), G, H) mod 360
By between_implies_orientation on A, F, midpoint(E, F), E we get orientation(A, F, midpoint(E, F)) == orientation(A, midpoint(E, F), E) mod 360, orientation(A, F, E) == orientation(A, F, midpoint(E, F)) mod 360
By between_imply_not_between on I, midpoint(G, I), G we get collinear_and_not_between(G, I, midpoint(G, I))
By same_angle_v1 on D, H, midpoint(E, G), E we get angle(H, D, E) == angle(midpoint(E, G), D, E) + 180 mod 360
By between_implies_orientation on C, E, midpoint(E, F), F we get orientation(C, E, midpoint(E, F)) == orientation(C, midpoint(E, F), F) mod 360, orientation(C, E, F) == orientation(C, E, midpoint(E, F)) mod 360
By between_imply_not_between on F, midpoint(F, I), I we get collinear_and_not_between(I, F, midpoint(F, I))
By between_imply_not_between on I, midpoint(F, I), F we get collinear_and_not_between(F, I, midpoint(F, I))
By different_points_v1 on midpoint(E, I), D we get 0 != distance(D, midpoint(E, I))
By different_points_v1 on midpoint(E, F), D we get 0 != distance(D, midpoint(E, F))
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), midpoint(E, F), D we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(midpoint(E, F), D) mod 360
By divide_by_2_mod_180_v1 on B, E, midpoint(E, G), E, D, H we get angle(E, D, H) + 180 == angle(B, E, midpoint(E, G)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), midpoint(E, F), E we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(midpoint(E, F), E) mod 360
By different_points_v1 on projection(F, j), G we get 0 != distance(G, projection(F, j))
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), midpoint(E, F), E we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(midpoint(E, F), E) mod 360
By different_points_v1 on midpoint(E, F), C we get 0 != distance(C, midpoint(E, F))
By different_points_v1 on projection(F, j), E we get 0 != distance(E, projection(F, j))
By perpendicular_direction_conditions_v0_r on E, midpoint(E, I), D, midpoint(E, I) we get 180 == 2 * direction(E, midpoint(E, I)) - 2 * direction(D, midpoint(E, I)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, I), I, D, midpoint(E, I) we get 180 == 2 * direction(midpoint(E, I), I) - 2 * direction(D, midpoint(E, I)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, I), D, midpoint(E, I), I we get 180 == 2 * direction(midpoint(E, I), D) - 2 * direction(midpoint(E, I), I) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, C, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), midpoint(E, F), C we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(midpoint(E, F), C) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), F, midpoint(E, F) we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, I), D, E, I we get 180 == 2 * direction(midpoint(E, I), D) - 2 * direction(E, I) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, I), D, I, E we get 180 == 2 * direction(midpoint(E, I), D) - 2 * direction(I, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, I), I, midpoint(E, I), D we get 180 == 2 * direction(midpoint(E, I), I) - 2 * direction(midpoint(E, I), D) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, I), E, midpoint(E, I) we get 180 == 2 * direction(D, midpoint(E, I)) - 2 * direction(E, midpoint(E, I)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, midpoint(E, F), E we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(midpoint(E, F), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, C, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, F, C, midpoint(E, F) we get 180 == 2 * direction(E, F) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, D, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), F, E we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), C, midpoint(E, F) we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(C, midpoint(E, F)) mod 360
By directions_draw_angle on projection(F, Line(D, J)), F, midpoint(E, F) we get exists(angle(projection(F, Line(D, J)), F, midpoint(E, F)))
By perpendicular_direction_conditions_v0_r on midpoint(E, I), D, midpoint(E, I), E we get 180 == 2 * direction(midpoint(E, I), D) - 2 * direction(midpoint(E, I), E) mod 360
By perpendicular_direction_conditions_v0_r on F, E, midpoint(E, F), D we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on E, F, D, midpoint(E, F) we get 180 == 2 * direction(E, F) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), E, F we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(E, F) mod 360
By in_imply_collinear on line_circle_tangent_point(h, c), F, C we get collinear(C, F, line_circle_tangent_point(h, c))
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), midpoint(E, F), D we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, E, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, I, D, midpoint(E, I) we get 180 == 2 * direction(E, I) - 2 * direction(D, midpoint(E, I)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, midpoint(E, F), D we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, F, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, I), midpoint(E, I), E we get 180 == 2 * direction(D, midpoint(E, I)) - 2 * direction(midpoint(E, I), E) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), E, midpoint(E, F) we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), D, midpoint(E, F) we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on I, E, D, midpoint(E, I) we get 180 == 2 * direction(I, E) - 2 * direction(D, midpoint(E, I)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), F, midpoint(E, F) we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, I, midpoint(E, I), D we get 180 == 2 * direction(E, I) - 2 * direction(midpoint(E, I), D) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), midpoint(E, F), F we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(midpoint(E, F), F) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), A, G, C, A, D we get angle(C, A, D) == angle(midpoint(F, G), A, G) mod 360
By divide_by_2_mod_180_v0 on H, G, F, H, G, midpoint(F, G) we get angle(H, G, F) == angle(H, G, midpoint(F, G)) mod 360
By perpendicular_direction_conditions_v0_r on F, E, C, midpoint(E, F) we get 180 == 2 * direction(F, E) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on F, E, D, midpoint(E, F) we get 180 == 2 * direction(F, E) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, I), midpoint(E, I), D we get 180 == 2 * direction(E, midpoint(E, I)) - 2 * direction(midpoint(E, I), D) mod 360
By perpendicular_direction_conditions_v0_r on E, F, midpoint(E, F), D we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), E, F we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on E, F, midpoint(E, F), C we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(E, F), C) mod 360
By divide_by_2_mod_180_v1 on B, D, A, midpoint(E, G), G, F we get angle(B, D, A) == angle(midpoint(E, G), G, F) + 180 mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, E, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on E, B, H, midpoint(E, G), G, D we get angle(E, B, H) == angle(midpoint(E, G), G, D) mod 360
By divide_by_2_mod_180_v1 on J, F, I, midpoint(F, G), G, H we get angle(J, F, I) == angle(midpoint(F, G), G, H) + 180 mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(E, F), C, midpoint(E, F) we get 180 == 2 * direction(F, midpoint(E, F)) - 2 * direction(C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, midpoint(E, F), D we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(midpoint(E, F), D) mod 360
By perpendicular_direction_conditions_v0_r on I, E, midpoint(E, I), D we get 180 == 2 * direction(I, E) - 2 * direction(midpoint(E, I), D) mod 360
By in_imply_concyclic on I, F, E, line_circle_tangent_point(g, c) we get concyclic(E, F, I, line_circle_tangent_point(g, c))
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), D, midpoint(E, F) we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, I), E, I we get 180 == 2 * direction(D, midpoint(E, I)) - 2 * direction(E, I) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, I), I, E we get 180 == 2 * direction(D, midpoint(E, I)) - 2 * direction(I, E) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(E, F), F, E we get 180 == 2 * direction(C, midpoint(E, F)) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, F, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, D, midpoint(E, F) we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(D, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, midpoint(E, F), E we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(midpoint(E, F), E) mod 360
By divide_by_2_mod_180_v0 on G, D, midpoint(F, G), G, D, A we get angle(G, D, A) == angle(G, D, midpoint(F, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, E, F we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), E, midpoint(E, F), C we get 180 == 2 * direction(midpoint(E, F), E) - 2 * direction(midpoint(E, F), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, F, E we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, I), E, midpoint(E, I), D we get 180 == 2 * direction(midpoint(E, I), E) - 2 * direction(midpoint(E, I), D) mod 360
By in_imply_concyclic on F, E, I, line_circle_tangent_point(h, c) we get concyclic(E, F, I, line_circle_tangent_point(h, c))
By divide_by_2_mod_180_v0 on D, G, midpoint(F, G), D, A, H we get angle(D, A, H) == angle(D, G, midpoint(F, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, I), I, midpoint(E, I) we get 180 == 2 * direction(D, midpoint(E, I)) - 2 * direction(I, midpoint(E, I)) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(E, I), midpoint(E, I), D we get 180 == 2 * direction(I, midpoint(E, I)) - 2 * direction(midpoint(E, I), D) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(E, F), midpoint(E, F), C we get 180 == 2 * direction(E, midpoint(E, F)) - 2 * direction(midpoint(E, F), C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, I), D, I, midpoint(E, I) we get 180 == 2 * direction(midpoint(E, I), D) - 2 * direction(I, midpoint(E, I)) mod 360
By perpendicular_direction_conditions_v0_r on F, E, midpoint(E, F), C we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(E, F), C) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), E, midpoint(E, F) we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, F), midpoint(E, F), F we get 180 == 2 * direction(D, midpoint(E, F)) - 2 * direction(midpoint(E, F), F) mod 360
By in_imply_collinear on line_circle_tangent_point(g, c), B, E we get collinear(B, E, line_circle_tangent_point(g, c))
By perpendicular_direction_conditions_v0_r on midpoint(E, F), F, midpoint(E, F), C we get 180 == 2 * direction(midpoint(E, F), F) - 2 * direction(midpoint(E, F), C) mod 360
By in_imply_collinear on line_circle_tangent_point(f, c), A, B we get collinear(A, B, line_circle_tangent_point(f, c))
By perpendicular_direction_conditions_v0_r on midpoint(E, I), D, E, midpoint(E, I) we get 180 == 2 * direction(midpoint(E, I), D) - 2 * direction(E, midpoint(E, I)) mod 360
By divide_by_2_mod_180_v0 on G, A, midpoint(F, G), D, A, F we get angle(D, A, F) == angle(G, A, midpoint(F, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, I), E, D, midpoint(E, I) we get 180 == 2 * direction(midpoint(E, I), E) - 2 * direction(D, midpoint(E, I)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, E, F we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(E, I), midpoint(E, I), I we get 180 == 2 * direction(D, midpoint(E, I)) - 2 * direction(midpoint(E, I), I) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, midpoint(E, F), F we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(midpoint(E, F), F) mod 360
By in_imply_collinear on line_circle_tangent_point(h, c), J, F we get collinear(F, J, line_circle_tangent_point(h, c))
By perpendicular_direction_conditions_v0_r on midpoint(E, F), D, midpoint(E, F), F we get 180 == 2 * direction(midpoint(E, F), D) - 2 * direction(midpoint(E, F), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(E, F), C, F, E we get 180 == 2 * direction(midpoint(E, F), C) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(E, I), D, midpoint(E, I) we get 180 == 2 * direction(I, midpoint(E, I)) - 2 * direction(D, midpoint(E, I)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), G, F, E, G, midpoint(F, G) we get angle(E, G, midpoint(F, G)) == angle(midpoint(E, G), G, F) mod 360
By divide_by_2_mod_180_v0 on D, G, midpoint(E, G), A, B, H we get angle(A, B, H) == angle(D, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), F, E, midpoint(E, G), E, C we get angle(midpoint(F, G), F, E) == angle(midpoint(E, G), E, C) + 180 mod 360
By divide_by_2_mod_180_v0 on A, D, H, F, G, midpoint(E, G) we get angle(A, D, H) == angle(F, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), G, I, F, G, H we get angle(F, G, H) == angle(midpoint(F, G), G, I) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), F, D, D, G, F we get angle(D, G, F) == angle(midpoint(F, G), F, D) mod 360
By divide_by_2_mod_180_v0 on G, A, D, D, G, midpoint(F, G) we get angle(G, A, D) == angle(D, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on F, A, D, D, F, midpoint(F, G) we get angle(F, A, D) == angle(D, F, midpoint(F, G)) mod 360
By tangent_point_is_unique on E, line_circle_tangent_point(g, c), c, g we get E == line_circle_tangent_point(g, c)
By in_imply_collinear on line_circle_tangent_point(g, c), C, E we get collinear(C, E, line_circle_tangent_point(g, c))
By divide_by_2_mod_180_v0 on B, D, E, midpoint(F, G), F, E we get angle(B, D, E) == angle(midpoint(F, G), F, E) mod 360
By divide_by_2_mod_180_v1 on G, I, E, A, G, midpoint(E, G) we get angle(G, I, E) == angle(A, G, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on H, D, G, midpoint(E, G), G, A we get angle(H, D, G) == angle(midpoint(E, G), G, A) mod 360
By directions_draw_angle on midpoint(E, I), E, center(d) we get exists(angle(midpoint(E, I), E, center(d)))
By divide_by_2_mod_180_v0 on A, G, midpoint(F, G), A, G, F we get angle(A, G, F) == angle(A, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on E, G, H, H, E, midpoint(E, G) we get angle(E, G, H) == angle(H, E, midpoint(E, G)) mod 360
By in_imply_concyclic on I, G, E, line_circle_tangent_point(h, c) we get concyclic(E, G, I, line_circle_tangent_point(h, c))
By in_imply_collinear on line_circle_tangent_point(h, c), A, J we get collinear(A, J, line_circle_tangent_point(h, c))
By in_imply_collinear on line_circle_tangent_point(h, c), C, H we get collinear(C, H, line_circle_tangent_point(h, c))
By divide_by_2_mod_180_v0 on F, D, midpoint(F, G), midpoint(F, G), G, A we get angle(F, D, midpoint(F, G)) == angle(midpoint(F, G), G, A) mod 360
By divide_by_2_mod_180_v0 on H, F, G, midpoint(F, G), D, G we get angle(H, F, G) == angle(midpoint(F, G), D, G) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), F, E, G, I, E we get angle(G, I, E) == angle(midpoint(F, G), F, E) mod 360
By in_imply_collinear on line_circle_tangent_point(h, c), J, C we get collinear(C, J, line_circle_tangent_point(h, c))
By divide_by_2_mod_180_v1 on A, G, midpoint(E, G), G, D, midpoint(E, G) we get angle(A, G, midpoint(E, G)) == angle(G, D, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on G, E, D, D, G, midpoint(E, G) we get angle(G, E, D) == angle(D, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), G, E, A, D, B we get angle(A, D, B) + 180 == angle(midpoint(F, G), G, E) mod 360
By sas_anti_similarity on G, midpoint(E, G), D, B, midpoint(E, G), E we get anti_similar_triangles(B, E, midpoint(E, G), G, D, midpoint(E, G))
By divide_by_2_mod_180_v0 on D, G, midpoint(E, G), D, G, E we get angle(D, G, E) == angle(D, G, midpoint(E, G)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, G), C, A we get not_collinear(A, C, midpoint(E, G)), exists(Line(A, C))
By divide_by_2_mod_180_v1 on C, D, B, F, D, midpoint(F, G) we get angle(C, D, B) == angle(F, D, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), F, A, G, E, F we get angle(G, E, F) == angle(midpoint(F, G), F, A) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), G, A, A, D, G we get angle(A, D, G) == angle(midpoint(F, G), G, A) mod 360
By divide_by_2_mod_180_v1 on B, E, H, I, F, midpoint(F, G) we get angle(B, E, H) == angle(I, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on G, D, midpoint(F, G), G, E, F we get angle(G, E, F) == angle(G, D, midpoint(F, G)) mod 360
By in_imply_concyclic on I, E, F, line_circle_tangent_point(f, c) we get concyclic(E, F, I, line_circle_tangent_point(f, c))
By divide_by_2_mod_180_v0 on B, G, midpoint(E, G), B, D, E we get angle(B, D, E) == angle(B, G, midpoint(E, G)) mod 360
By in_imply_collinear on line_circle_tangent_point(h, c), H, J we get collinear(H, J, line_circle_tangent_point(h, c))
By divide_by_2_mod_180_v1 on C, E, midpoint(E, G), E, D, B we get angle(E, D, B) + 180 == angle(C, E, midpoint(E, G)) mod 360
By in_imply_collinear on line_circle_tangent_point(g, c), B, C we get collinear(B, C, line_circle_tangent_point(g, c))
By in_imply_collinear on line_circle_tangent_point(h, c), A, H we get collinear(A, H, line_circle_tangent_point(h, c))
By divide_by_2_mod_180_v0 on D, A, H, G, A, midpoint(F, G) we get angle(D, A, H) == angle(G, A, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on E, D, C, E, G, midpoint(F, G) we get angle(E, D, C) == angle(E, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), E, D, midpoint(E, G), B, E we get angle(midpoint(E, G), B, E) == angle(midpoint(E, G), E, D) mod 360
By divide_by_2_mod_180_v0 on H, D, A, E, G, midpoint(F, G) we get angle(H, D, A) == angle(E, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on J, F, I, midpoint(F, G), G, I we get angle(J, F, I) == angle(midpoint(F, G), G, I) + 180 mod 360
By divide_by_2_mod_180_v1 on F, E, B, F, G, midpoint(E, G) we get angle(F, E, B) == angle(F, G, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), G, D, D, B, A we get angle(D, B, A) == angle(midpoint(E, G), G, D) mod 360
By divide_by_2_mod_180_v0 on A, D, G, F, E, midpoint(E, G) we get angle(A, D, G) == angle(F, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on F, D, A, F, E, midpoint(E, G) we get angle(F, D, A) == angle(F, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on B, G, midpoint(E, G), H, D, E we get angle(H, D, E) + 180 == angle(B, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on D, G, E, midpoint(E, G), E, D we get angle(D, G, E) == angle(midpoint(E, G), E, D) mod 360
By divide_by_2_mod_180_v0 on D, E, midpoint(E, G), E, G, D we get angle(E, G, D) == angle(D, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on E, I, H, midpoint(E, G), G, B we get angle(E, I, H) == angle(midpoint(E, G), G, B) + 180 mod 360
By divide_by_2_mod_180_v1 on I, F, C, H, G, midpoint(F, G) we get angle(I, F, C) == angle(H, G, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on E, D, B, B, E, midpoint(E, G) we get angle(E, D, B) == angle(B, E, midpoint(E, G)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on J, I, midpoint(E, I) we get not_collinear(I, J, midpoint(E, I)), exists(Line(I, midpoint(E, I)))
By divide_by_2_mod_180_v0 on midpoint(F, G), F, D, midpoint(F, G), A, F we get angle(midpoint(F, G), A, F) == angle(midpoint(F, G), F, D) mod 360
By divide_by_2_mod_180_v1 on H, F, midpoint(F, G), F, I, G we get angle(F, I, G) + 180 == angle(H, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), F, J, G, F, C we get angle(G, F, C) == angle(midpoint(F, G), F, J) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on J, midpoint(E, F), D we get not_collinear(D, J, midpoint(E, F)), exists(Line(D, midpoint(E, F)))
By divide_by_2_mod_180_v1 on midpoint(E, G), E, C, G, F, E we get angle(G, F, E) + 180 == angle(midpoint(E, G), E, C) mod 360
By directions_draw_angle on projection(F, j), E, D we get exists(angle(projection(F, j), E, D))
By divide_by_2_mod_180_v0 on I, G, midpoint(F, G), I, F, H we get angle(I, F, H) == angle(I, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on F, D, midpoint(F, G), F, I, G we get angle(F, I, G) + 180 == angle(F, D, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on F, I, H, C, F, midpoint(F, G) we get angle(F, I, H) == angle(C, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), E, C, G, I, E we get angle(G, I, E) + 180 == angle(midpoint(E, G), E, C) mod 360
By divide_by_2_mod_180_v1 on C, D, A, midpoint(E, G), G, B we get angle(C, D, A) == angle(midpoint(E, G), G, B) + 180 mod 360
By divide_by_2_mod_180_v0 on B, G, F, B, G, midpoint(F, G) we get angle(B, G, F) == angle(B, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), E, F, A, G, midpoint(F, G) we get angle(A, G, midpoint(F, G)) == angle(midpoint(E, G), E, F) mod 360
By divide_by_2_mod_180_v0 on D, F, midpoint(F, G), F, A, midpoint(F, G) we get angle(D, F, midpoint(F, G)) == angle(F, A, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), G, D, D, A, B we get angle(D, A, B) == angle(midpoint(F, G), G, D) mod 360
By divide_by_2_mod_180_v1 on A, D, C, midpoint(E, G), D, E we get angle(A, D, C) == angle(midpoint(E, G), D, E) + 180 mod 360
By directions_draw_angle on F, E, midpoint(E, I) we get exists(angle(F, E, midpoint(E, I)))
By in_imply_collinear on line_circle_tangent_point(h, c), A, F we get collinear(A, F, line_circle_tangent_point(h, c))
By divide_by_2_mod_180_v1 on midpoint(F, G), D, F, midpoint(F, G), F, C we get angle(midpoint(F, G), D, F) == angle(midpoint(F, G), F, C) + 180 mod 360
By directions_draw_angle on projection(F, j), G, H we get exists(angle(projection(F, j), G, H))
By divide_by_2_mod_180_v0 on D, F, midpoint(F, G), D, A, B we get angle(D, A, B) == angle(D, F, midpoint(F, G)) mod 360
By in_imply_collinear on line_circle_tangent_point(h, c), A, C we get collinear(A, C, line_circle_tangent_point(h, c))
By divide_by_2_mod_180_v0 on G, H, midpoint(E, G), I, E, D we get angle(I, E, D) == angle(G, H, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on F, D, midpoint(F, G), C, D, H we get angle(C, D, H) == angle(F, D, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on C, D, A, midpoint(E, G), D, G we get angle(C, D, A) == angle(midpoint(E, G), D, G) + 180 mod 360
By divide_by_2_mod_180_v0 on D, A, B, F, A, midpoint(F, G) we get angle(D, A, B) == angle(F, A, midpoint(F, G)) mod 360
By in_imply_concyclic on G, I, F, line_circle_tangent_point(f, c) we get concyclic(F, G, I, line_circle_tangent_point(f, c))
By divide_by_2_mod_180_v1 on B, G, I, midpoint(E, G), E, I we get angle(B, G, I) == angle(midpoint(E, G), E, I) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), F, A, G, F, C we get angle(G, F, C) + 180 == angle(midpoint(F, G), F, A) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), D, F, B, G, F we get angle(B, G, F) + 180 == angle(midpoint(F, G), D, F) mod 360
By divide_by_2_mod_180_v1 on G, F, A, midpoint(F, G), F, C we get angle(G, F, A) == angle(midpoint(F, G), F, C) + 180 mod 360
By sas_similarity on A, midpoint(F, G), F, F, midpoint(F, G), D we get similar_triangles(A, F, midpoint(F, G), F, D, midpoint(F, G))
By in_imply_concyclic on I, G, F, line_circle_tangent_point(h, c) we get concyclic(F, G, I, line_circle_tangent_point(h, c))
By divide_by_2_mod_180_v1 on E, D, B, midpoint(E, G), G, A we get angle(E, D, B) == angle(midpoint(E, G), G, A) + 180 mod 360
By divide_by_2_mod_180_v0 on G, I, F, midpoint(F, G), F, C we get angle(G, I, F) == angle(midpoint(F, G), F, C) mod 360
By directions_draw_angle on A, H, midpoint(E, G) we get exists(angle(A, H, midpoint(E, G)))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, G), C, F we get not_collinear(C, F, midpoint(E, G)), exists(Line(C, F))
By divide_by_2_mod_180_v0 on F, I, H, midpoint(F, G), G, A we get angle(F, I, H) == angle(midpoint(F, G), G, A) mod 360
By line_inequality on Line(G, projection(F, j)), Line(E, J), G we get Line(E, J) != Line(G, projection(F, j))
By divide_by_2_mod_180_v0 on D, E, midpoint(E, G), C, B, H we get angle(C, B, H) == angle(D, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on E, I, G, midpoint(E, G), D, G we get angle(E, I, G) == angle(midpoint(E, G), D, G) mod 360
By divide_by_2_mod_180_v0 on C, F, E, F, G, midpoint(E, G) we get angle(C, F, E) == angle(F, G, midpoint(E, G)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on I, midpoint(E, F), F we get not_collinear(F, I, midpoint(E, F)), exists(Line(F, midpoint(E, F)))
By directions_draw_angle on midpoint(E, G), D, J we get exists(angle(midpoint(E, G), D, J))
By sas_similarity on G, midpoint(F, G), A, D, midpoint(F, G), G we get similar_triangles(A, G, midpoint(F, G), G, D, midpoint(F, G))
By divide_by_2_mod_180_v1 on F, G, B, F, E, midpoint(E, G) we get angle(F, G, B) == angle(F, E, midpoint(E, G)) + 180 mod 360
By in_imply_collinear on line_circle_tangent_point(f, c), B, G we get collinear(B, G, line_circle_tangent_point(f, c))
By divide_by_2_mod_180_v1 on H, I, F, midpoint(F, G), F, C we get angle(H, I, F) == angle(midpoint(F, G), F, C) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), D, E, G, E, C we get angle(G, E, C) + 180 == angle(midpoint(E, G), D, E) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on F, midpoint(E, F), C we get not_collinear(C, F, midpoint(E, F)), exists(Line(C, midpoint(E, F)))
By divide_by_2_mod_180_v0 on I, G, F, H, G, midpoint(F, G) we get angle(I, G, F) == angle(H, G, midpoint(F, G)) mod 360
By sas_anti_similarity on B, midpoint(E, G), E, G, midpoint(E, G), D we get anti_similar_triangles(B, E, midpoint(E, G), G, D, midpoint(E, G))
By directions_draw_angle on D, E, midpoint(E, F) we get exists(angle(D, E, midpoint(E, F)))
By divide_by_2_mod_180_v0 on F, G, midpoint(E, G), C, D, E we get angle(C, D, E) == angle(F, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on C, D, H, A, F, midpoint(F, G) we get angle(C, D, H) == angle(A, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), G, F, C, D, F we get angle(C, D, F) == angle(midpoint(E, G), G, F) mod 360
By divide_by_2_mod_180_v1 on J, F, G, F, E, midpoint(E, G) we get angle(J, F, G) == angle(F, E, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on G, H, midpoint(E, G), B, H, E we get angle(B, H, E) == angle(G, H, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on C, F, midpoint(F, G), A, D, G we get angle(A, D, G) + 180 == angle(C, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on H, G, midpoint(F, G), I, F, C we get angle(I, F, C) + 180 == angle(H, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on H, G, E, midpoint(E, G), E, H we get angle(H, G, E) == angle(midpoint(E, G), E, H) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), G, B, midpoint(F, G), D, G we get angle(midpoint(F, G), G, B) == angle(midpoint(F, G), D, G) + 180 mod 360
By line_inequality on perpendicular_bisector(G, I), Line(E, I), D we get Line(E, I) != perpendicular_bisector(G, I)
By divide_by_2_mod_180_v1 on J, F, midpoint(F, G), A, D, G we get angle(A, D, G) + 180 == angle(J, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), E, F, midpoint(F, G), F, A we get angle(midpoint(E, G), E, F) == angle(midpoint(F, G), F, A) mod 360
By in_imply_collinear on line_circle_tangent_point(f, c), A, G we get collinear(A, G, line_circle_tangent_point(f, c))
By divide_by_2_mod_180_v0 on A, G, E, midpoint(E, G), E, C we get angle(A, G, E) == angle(midpoint(E, G), E, C) mod 360
By divide_by_2_mod_180_v0 on E, J, D, midpoint(E, G), H, G we get angle(E, J, D) == angle(midpoint(E, G), H, G) mod 360
By in_imply_concyclic on G, E, F, line_circle_tangent_point(h, c) we get concyclic(E, F, G, line_circle_tangent_point(h, c))
By divide_by_2_mod_180_v0 on H, F, midpoint(F, G), F, D, A we get angle(F, D, A) == angle(H, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on F, E, midpoint(E, G), midpoint(F, G), G, B we get angle(F, E, midpoint(E, G)) == angle(midpoint(F, G), G, B) + 180 mod 360
By divide_by_2_mod_180_v0 on I, E, midpoint(E, G), C, E, H we get angle(C, E, H) == angle(I, E, midpoint(E, G)) mod 360
By sas_anti_similarity on F, midpoint(F, G), D, A, midpoint(F, G), G we get anti_similar_triangles(A, G, midpoint(F, G), F, D, midpoint(F, G))
By divide_by_2_mod_180_v0 on midpoint(F, G), F, H, G, E, F we get angle(G, E, F) == angle(midpoint(F, G), F, H) mod 360
By divide_by_2_mod_180_v1 on A, G, midpoint(F, G), B, D, C we get angle(B, D, C) + 180 == angle(A, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), G, H, H, E, G we get angle(H, E, G) == angle(midpoint(E, G), G, H) mod 360
By divide_by_2_mod_180_v1 on G, F, H, midpoint(F, G), F, J we get angle(G, F, H) == angle(midpoint(F, G), F, J) + 180 mod 360
By divide_by_2_mod_180_v0 on B, G, E, midpoint(F, G), F, E we get angle(B, G, E) == angle(midpoint(F, G), F, E) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), G, B, E, D, H we get angle(E, D, H) + 180 == angle(midpoint(E, G), G, B) mod 360
By divide_by_2_mod_180_v1 on F, D, A, C, F, midpoint(F, G) we get angle(F, D, A) == angle(C, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on E, F, G, C, E, midpoint(E, G) we get angle(E, F, G) == angle(C, E, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on E, H, midpoint(E, G), E, H, B we get angle(E, H, B) == angle(E, H, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on G, H, midpoint(E, G), G, H, B we get angle(G, H, B) == angle(G, H, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on B, H, I, E, H, midpoint(E, G) we get angle(B, H, I) == angle(E, H, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on A, D, F, midpoint(E, G), E, F we get angle(A, D, F) == angle(midpoint(E, G), E, F) mod 360
By divide_by_2_mod_180_v1 on F, E, midpoint(E, G), J, F, G we get angle(J, F, G) + 180 == angle(F, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on D, H, G, E, H, midpoint(E, G) we get angle(D, H, G) == angle(E, H, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on F, E, midpoint(E, G), F, I, G we get angle(F, I, G) + 180 == angle(F, E, midpoint(E, G)) mod 360
By in_imply_collinear on line_circle_tangent_point(h, c), H, F we get collinear(F, H, line_circle_tangent_point(h, c))
By divide_by_2_mod_180_v1 on midpoint(E, G), E, C, G, E, B we get angle(G, E, B) + 180 == angle(midpoint(E, G), E, C) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), G, E, H, F, E we get angle(H, F, E) + 180 == angle(midpoint(F, G), G, E) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), D, E, midpoint(F, G), F, E we get angle(midpoint(E, G), D, E) == angle(midpoint(F, G), F, E) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), F, E, A, G, midpoint(E, G) we get angle(midpoint(F, G), F, E) == angle(A, G, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on E, B, D, D, E, midpoint(E, G) we get angle(E, B, D) == angle(D, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), D, G, H, F, midpoint(F, G) we get angle(H, F, midpoint(F, G)) == angle(midpoint(F, G), D, G) mod 360
By divide_by_2_mod_180_v1 on A, D, C, midpoint(E, G), E, B we get angle(A, D, C) == angle(midpoint(E, G), E, B) + 180 mod 360
By divide_by_2_mod_180_v1 on E, D, H, E, F, midpoint(F, G) we get angle(E, D, H) == angle(E, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on E, G, A, E, D, midpoint(E, G) we get angle(E, G, A) == angle(E, D, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on D, G, E, G, B, midpoint(E, G) we get angle(D, G, E) == angle(G, B, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on F, G, A, C, F, midpoint(F, G) we get angle(F, G, A) == angle(C, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on A, D, F, midpoint(F, G), F, J we get angle(A, D, F) == angle(midpoint(F, G), F, J) + 180 mod 360
By divide_by_2_mod_180_v0 on B, G, midpoint(E, G), G, E, B we get angle(G, E, B) == angle(B, G, midpoint(E, G)) mod 360
By directions_draw_angle on G, E, midpoint(E, F) we get exists(angle(G, E, midpoint(E, F)))
By divide_by_2_mod_180_v0 on C, F, midpoint(F, G), C, F, G we get angle(C, F, G) == angle(C, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on G, B, midpoint(E, G), A, B, H we get angle(A, B, H) == angle(G, B, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on F, D, midpoint(F, G), H, F, midpoint(F, G) we get angle(F, D, midpoint(F, G)) == angle(H, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on F, D, midpoint(F, G), C, F, G we get angle(C, F, G) + 180 == angle(F, D, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on G, D, A, midpoint(E, G), E, F we get angle(G, D, A) == angle(midpoint(E, G), E, F) mod 360
By divide_by_2_mod_180_v0 on A, G, H, midpoint(E, G), E, I we get angle(A, G, H) == angle(midpoint(E, G), E, I) mod 360
By divide_by_2_mod_180_v0 on C, E, G, C, E, midpoint(E, G) we get angle(C, E, G) == angle(C, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on G, F, H, A, G, midpoint(F, G) we get angle(G, F, H) == angle(A, G, midpoint(F, G)) mod 360
By reverse_direction on midpoint(E, G), H we get 180 == direction(midpoint(E, G), H) - direction(H, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on B, G, midpoint(E, G), H, I, E we get angle(H, I, E) + 180 == angle(B, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), G, B, A, F, G we get angle(A, F, G) + 180 == angle(midpoint(F, G), G, B) mod 360
By divide_by_2_mod_180_v0 on G, D, B, midpoint(E, G), E, B we get angle(G, D, B) == angle(midpoint(E, G), E, B) mod 360
By divide_by_2_mod_180_v0 on D, B, E, G, B, midpoint(E, G) we get angle(D, B, E) == angle(G, B, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on F, A, midpoint(F, G), D, A, G we get angle(D, A, G) == angle(F, A, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on E, F, I, midpoint(E, G), G, I we get angle(E, F, I) == angle(midpoint(E, G), G, I) + 180 mod 360
By divide_by_2_mod_180_v0 on B, A, D, midpoint(F, G), F, D we get angle(B, A, D) == angle(midpoint(F, G), F, D) mod 360
By divide_by_2_mod_180_v1 on G, D, midpoint(E, G), G, E, C we get angle(G, E, C) + 180 == angle(G, D, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on F, G, midpoint(E, G), H, F, E we get angle(H, F, E) + 180 == angle(F, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on C, F, midpoint(F, G), F, I, G we get angle(F, I, G) == angle(C, F, midpoint(F, G)) mod 360
By line_inequality on Line(G, projection(F, j)), Line(D, J), G we get Line(D, J) != Line(G, projection(F, j))
By divide_by_2_mod_180_v0 on D, G, E, midpoint(E, G), B, E we get angle(D, G, E) == angle(midpoint(E, G), B, E) mod 360
By divide_by_2_mod_180_v1 on E, F, midpoint(F, G), H, D, G we get angle(H, D, G) + 180 == angle(E, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), D, G, C, E, midpoint(E, G) we get angle(midpoint(E, G), D, G) == angle(C, E, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on D, A, C, midpoint(F, G), F, D we get angle(D, A, C) == angle(midpoint(F, G), F, D) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), D, G, F, D, A we get angle(F, D, A) == angle(midpoint(F, G), D, G) mod 360
By divide_by_2_mod_180_v0 on D, B, A, D, E, midpoint(E, G) we get angle(D, B, A) == angle(D, E, midpoint(E, G)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(F, G), J, H we get not_collinear(H, J, midpoint(F, G)), exists(Line(H, J))
By divide_by_2_mod_180_v1 on F, I, G, F, E, midpoint(E, G) we get angle(F, I, G) == angle(F, E, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on B, E, G, E, D, midpoint(E, G) we get angle(B, E, G) == angle(E, D, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), G, D, C, B, D we get angle(C, B, D) == angle(midpoint(E, G), G, D) mod 360
By divide_by_2_mod_180_v0 on H, I, F, G, D, midpoint(F, G) we get angle(H, I, F) == angle(G, D, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on G, I, F, B, G, midpoint(F, G) we get angle(G, I, F) == angle(B, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on A, D, C, B, G, midpoint(E, G) we get angle(A, D, C) == angle(B, G, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), G, I, J, F, I we get angle(J, F, I) + 180 == angle(midpoint(F, G), G, I) mod 360
By tangent_point_is_unique on F, line_circle_tangent_point(h, c), c, h we get F == line_circle_tangent_point(h, c)
By divide_by_2_mod_180_v0 on I, G, midpoint(F, G), I, G, F we get angle(I, G, F) == angle(I, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on A, F, midpoint(F, G), F, I, H we get angle(F, I, H) == angle(A, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on I, G, E, H, G, midpoint(E, G) we get angle(I, G, E) == angle(H, G, midpoint(E, G)) mod 360
By in_imply_concyclic on G, E, F, line_circle_tangent_point(g, c) we get concyclic(E, F, G, line_circle_tangent_point(g, c))
By divide_by_2_mod_180_v0 on H, E, midpoint(E, G), H, E, G we get angle(H, E, G) == angle(H, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on G, E, H, H, G, midpoint(E, G) we get angle(G, E, H) == angle(H, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on D, J, I, midpoint(E, G), H, G we get angle(D, J, I) == angle(midpoint(E, G), H, G) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), E, F, G, I, F we get angle(G, I, F) + 180 == angle(midpoint(E, G), E, F) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), F, I, H, E, B we get angle(H, E, B) + 180 == angle(midpoint(F, G), F, I) mod 360
By directions_draw_angle on J, F, midpoint(E, F) we get exists(angle(J, F, midpoint(E, F)))
By divide_by_2_mod_180_v0 on B, E, midpoint(E, G), E, G, B we get angle(E, G, B) == angle(B, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on H, F, midpoint(F, G), F, G, B we get angle(F, G, B) + 180 == angle(H, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), E, B, B, G, E we get angle(B, G, E) == angle(midpoint(E, G), E, B) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), F, A, H, I, F we get angle(H, I, F) == angle(midpoint(F, G), F, A) mod 360
By divide_by_2_mod_180_v0 on C, F, E, midpoint(F, G), G, E we get angle(C, F, E) == angle(midpoint(F, G), G, E) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), G, H, A, F, I we get angle(A, F, I) == angle(midpoint(F, G), G, H) mod 360
By divide_by_2_mod_180_v0 on G, B, D, midpoint(E, G), E, D we get angle(G, B, D) == angle(midpoint(E, G), E, D) mod 360
By divide_by_2_mod_180_v0 on A, D, F, G, D, midpoint(F, G) we get angle(A, D, F) == angle(G, D, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on B, G, F, midpoint(F, G), F, C we get angle(B, G, F) == angle(midpoint(F, G), F, C) mod 360
By divide_by_2_mod_180_v1 on E, D, midpoint(E, G), C, E, G we get angle(C, E, G) + 180 == angle(E, D, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on A, F, midpoint(F, G), J, F, G we get angle(J, F, G) + 180 == angle(A, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on B, G, midpoint(E, G), midpoint(E, G), D, E we get angle(B, G, midpoint(E, G)) == angle(midpoint(E, G), D, E) mod 360
By divide_by_2_mod_180_v0 on E, I, H, midpoint(E, G), G, A we get angle(E, I, H) == angle(midpoint(E, G), G, A) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), F, H, G, D, midpoint(F, G) we get angle(G, D, midpoint(F, G)) == angle(midpoint(F, G), F, H) mod 360
By divide_by_2_mod_180_v1 on E, D, midpoint(E, G), E, I, H we get angle(E, I, H) + 180 == angle(E, D, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on C, B, D, midpoint(E, G), B, G we get angle(C, B, D) == angle(midpoint(E, G), B, G) mod 360
By divide_by_2_mod_180_v0 on F, D, midpoint(F, G), A, F, G we get angle(A, F, G) == angle(F, D, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on E, F, I, midpoint(E, G), G, H we get angle(E, F, I) == angle(midpoint(E, G), G, H) + 180 mod 360
By divide_by_2_mod_180_v1 on A, F, midpoint(F, G), F, G, B we get angle(F, G, B) + 180 == angle(A, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on E, G, midpoint(F, G), E, G, F we get angle(E, G, F) == angle(E, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on A, F, midpoint(F, G), A, D, G we get angle(A, D, G) == angle(A, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), G, B, C, F, G we get angle(C, F, G) == angle(midpoint(F, G), G, B) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), D, G, F, E, midpoint(E, G) we get angle(F, E, midpoint(E, G)) == angle(midpoint(F, G), D, G) mod 360
By line_inequality on Line(E, projection(F, j)), Line(F, G), E we get Line(F, G) != Line(E, projection(F, j))
By divide_by_2_mod_180_v0 on G, H, midpoint(E, G), G, H, D we get angle(G, H, D) == angle(G, H, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on C, E, G, midpoint(E, G), G, A we get angle(C, E, G) == angle(midpoint(E, G), G, A) mod 360
By sas_similarity on B, midpoint(E, G), G, G, midpoint(E, G), D we get similar_triangles(B, G, midpoint(E, G), G, D, midpoint(E, G))
By divide_by_2_mod_180_v1 on F, D, A, J, F, midpoint(F, G) we get angle(F, D, A) == angle(J, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), D, G, B, E, midpoint(E, G) we get angle(B, E, midpoint(E, G)) == angle(midpoint(E, G), D, G) mod 360
By divide_by_2_mod_180_v0 on B, D, C, B, G, midpoint(F, G) we get angle(B, D, C) == angle(B, G, midpoint(F, G)) mod 360
By directions_draw_angle on center(d), E, midpoint(E, I) we get exists(angle(center(d), E, midpoint(E, I)))
By divide_by_2_mod_180_v1 on midpoint(E, G), D, G, E, G, A we get angle(E, G, A) + 180 == angle(midpoint(E, G), D, G) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), G, A, F, E, midpoint(E, G) we get angle(F, E, midpoint(E, G)) == angle(midpoint(F, G), G, A) mod 360
By sas_similarity on F, midpoint(F, G), D, A, midpoint(F, G), F we get similar_triangles(A, F, midpoint(F, G), F, D, midpoint(F, G))
By divide_by_2_mod_180_v1 on B, G, midpoint(E, G), G, E, C we get angle(G, E, C) + 180 == angle(B, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), G, B, F, I, G we get angle(F, I, G) == angle(midpoint(F, G), G, B) mod 360
By divide_by_2_mod_180_v0 on C, A, D, F, A, midpoint(F, G) we get angle(C, A, D) == angle(F, A, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on D, B, A, E, B, midpoint(E, G) we get angle(D, B, A) == angle(E, B, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on G, H, midpoint(E, G), I, J, D we get angle(I, J, D) == angle(G, H, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on F, E, midpoint(E, G), C, D, H we get angle(C, D, H) == angle(F, E, midpoint(E, G)) mod 360
By directions_draw_angle on midpoint(E, I), E, midpoint(E, G) we get exists(angle(midpoint(E, I), E, midpoint(E, G)))
By divide_by_2_mod_180_v0 on F, I, H, F, D, midpoint(F, G) we get angle(F, I, H) == angle(F, D, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on E, B, D, midpoint(E, G), B, G we get angle(E, B, D) == angle(midpoint(E, G), B, G) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on J, midpoint(E, F), E we get not_collinear(E, J, midpoint(E, F)), exists(Line(E, midpoint(E, F)))
By directions_draw_angle on projection(F, j), G, F we get exists(angle(projection(F, j), G, F))
By divide_by_2_mod_180_v0 on H, D, C, midpoint(E, G), E, F we get angle(H, D, C) == angle(midpoint(E, G), E, F) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), E, D, D, B, C we get angle(D, B, C) == angle(midpoint(E, G), E, D) mod 360
By divide_by_2_mod_180_v1 on A, D, G, C, F, midpoint(F, G) we get angle(A, D, G) == angle(C, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on B, D, E, midpoint(E, G), E, B we get angle(B, D, E) == angle(midpoint(E, G), E, B) mod 360
By divide_by_2_mod_180_v0 on D, F, midpoint(F, G), midpoint(F, G), A, G we get angle(D, F, midpoint(F, G)) == angle(midpoint(F, G), A, G) mod 360
By divide_by_2_mod_180_v1 on F, E, midpoint(E, G), C, D, B we get angle(C, D, B) + 180 == angle(F, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on D, G, F, midpoint(F, G), A, F we get angle(D, G, F) == angle(midpoint(F, G), A, F) mod 360
By divide_by_2_mod_180_v1 on C, F, midpoint(F, G), H, F, G we get angle(H, F, G) + 180 == angle(C, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on D, E, I, midpoint(E, G), H, G we get angle(D, E, I) == angle(midpoint(E, G), H, G) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), G, F, B, E, F we get angle(B, E, F) + 180 == angle(midpoint(E, G), G, F) mod 360
By divide_by_2_mod_180_v0 on A, B, D, G, B, midpoint(E, G) we get angle(A, B, D) == angle(G, B, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on E, G, A, B, E, midpoint(E, G) we get angle(E, G, A) == angle(B, E, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), G, I, C, E, I we get angle(C, E, I) == angle(midpoint(E, G), G, I) mod 360
By in_imply_concyclic on I, E, G, line_circle_tangent_point(g, c) we get concyclic(E, G, I, line_circle_tangent_point(g, c))
By divide_by_2_mod_180_v0 on G, H, B, midpoint(E, G), H, E we get angle(G, H, B) == angle(midpoint(E, G), H, E) mod 360
By divide_by_2_mod_180_v0 on H, E, midpoint(E, G), E, G, I we get angle(E, G, I) == angle(H, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on B, G, F, midpoint(F, G), F, A we get angle(B, G, F) == angle(midpoint(F, G), F, A) + 180 mod 360
By divide_by_2_mod_180_v0 on I, G, midpoint(E, G), I, E, C we get angle(I, E, C) == angle(I, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), G, A, C, D, B we get angle(C, D, B) + 180 == angle(midpoint(F, G), G, A) mod 360
By divide_by_2_mod_180_v0 on G, F, H, midpoint(F, G), D, F we get angle(G, F, H) == angle(midpoint(F, G), D, F) mod 360
By divide_by_2_mod_180_v1 on G, F, C, midpoint(F, G), F, A we get angle(G, F, C) == angle(midpoint(F, G), F, A) + 180 mod 360
By sas_anti_similarity on A, midpoint(F, G), G, F, midpoint(F, G), D we get anti_similar_triangles(A, G, midpoint(F, G), F, D, midpoint(F, G))
By divide_by_2_mod_180_v0 on D, G, midpoint(F, G), G, A, midpoint(F, G) we get angle(D, G, midpoint(F, G)) == angle(G, A, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), G, D, E, B, midpoint(E, G) we get angle(E, B, midpoint(E, G)) == angle(midpoint(E, G), G, D) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), H, E, D, J, E we get angle(D, J, E) == angle(midpoint(E, G), H, E) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), G, D, D, E, G we get angle(D, E, G) == angle(midpoint(E, G), G, D) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), E, H, I, E, B we get angle(I, E, B) + 180 == angle(midpoint(E, G), E, H) mod 360
By divide_by_2_mod_180_v0 on I, E, G, I, E, midpoint(E, G) we get angle(I, E, G) == angle(I, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), G, B, B, E, G we get angle(B, E, G) == angle(midpoint(E, G), G, B) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), G, A, E, I, G we get angle(E, I, G) + 180 == angle(midpoint(E, G), G, A) mod 360
By divide_by_2_mod_180_v0 on B, G, F, midpoint(F, G), F, J we get angle(B, G, F) == angle(midpoint(F, G), F, J) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on H, midpoint(E, F), C we get not_collinear(C, H, midpoint(E, F)), exists(Line(C, midpoint(E, F)))
By divide_by_2_mod_180_v0 on C, D, E, midpoint(F, G), G, E we get angle(C, D, E) == angle(midpoint(F, G), G, E) mod 360
By divide_by_2_mod_180_v0 on B, G, E, G, D, midpoint(E, G) we get angle(B, G, E) == angle(G, D, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on I, H, B, midpoint(E, G), H, E we get angle(I, H, B) == angle(midpoint(E, G), H, E) mod 360
By divide_by_2_mod_180_v0 on H, F, midpoint(F, G), H, F, G we get angle(H, F, G) == angle(H, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), D, F, H, I, F we get angle(H, I, F) == angle(midpoint(F, G), D, F) mod 360
By divide_by_2_mod_180_v0 on G, D, B, G, D, midpoint(E, G) we get angle(G, D, B) == angle(G, D, midpoint(E, G)) mod 360
By line_containment_inequality on line_circle_tangent_point(f, c), midpoint(F, G), f we get midpoint(F, G) != line_circle_tangent_point(f, c)
By divide_by_2_mod_180_v1 on midpoint(E, G), G, A, B, D, G we get angle(B, D, G) + 180 == angle(midpoint(E, G), G, A) mod 360
By divide_by_2_mod_180_v1 on B, G, midpoint(F, G), G, E, F we get angle(G, E, F) + 180 == angle(B, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), H, G, D, H, I we get angle(D, H, I) == angle(midpoint(E, G), H, G) mod 360
By divide_by_2_mod_180_v0 on G, H, D, midpoint(E, G), H, E we get angle(G, H, D) == angle(midpoint(E, G), H, E) mod 360
By divide_by_2_mod_180_v0 on H, I, F, midpoint(E, G), E, F we get angle(H, I, F) == angle(midpoint(E, G), E, F) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, G), A, F we get not_collinear(A, F, midpoint(E, G)), exists(Line(A, F))
By divide_by_2_mod_180_v0 on I, G, midpoint(F, G), I, E, F we get angle(I, E, F) == angle(I, G, midpoint(F, G)) mod 360
By in_imply_concyclic on G, E, F, line_circle_tangent_point(f, c) we get concyclic(E, F, G, line_circle_tangent_point(f, c))
By divide_by_2_mod_180_v0 on midpoint(E, G), G, B, E, F, midpoint(F, G) we get angle(E, F, midpoint(F, G)) == angle(midpoint(E, G), G, B) mod 360
By divide_by_2_mod_180_v1 on F, G, A, J, F, midpoint(F, G) we get angle(F, G, A) == angle(J, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on A, F, midpoint(F, G), C, D, B we get angle(C, D, B) + 180 == angle(A, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), G, E, F, E, C we get angle(F, E, C) == angle(midpoint(F, G), G, E) mod 360
By divide_by_2_mod_180_v0 on D, E, G, midpoint(E, G), B, G we get angle(D, E, G) == angle(midpoint(E, G), B, G) mod 360
By divide_by_2_mod_180_v0 on G, H, midpoint(E, G), D, I, E we get angle(D, I, E) == angle(G, H, midpoint(E, G)) mod 360
By sas_anti_similarity on B, midpoint(E, G), G, E, midpoint(E, G), D we get anti_similar_triangles(B, G, midpoint(E, G), E, D, midpoint(E, G))
By divide_by_2_mod_180_v1 on C, F, G, F, E, midpoint(E, G) we get angle(C, F, G) == angle(F, E, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on A, G, midpoint(E, G), G, E, B we get angle(G, E, B) + 180 == angle(A, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on G, I, E, midpoint(E, G), E, B we get angle(G, I, E) == angle(midpoint(E, G), E, B) mod 360
By divide_by_2_mod_180_v0 on G, F, H, midpoint(E, G), E, F we get angle(G, F, H) == angle(midpoint(E, G), E, F) mod 360
By sas_anti_similarity on D, midpoint(E, G), E, G, midpoint(E, G), B we get anti_similar_triangles(B, G, midpoint(E, G), E, D, midpoint(E, G))
By divide_by_2_mod_180_v1 on midpoint(F, G), F, H, G, F, J we get angle(G, F, J) + 180 == angle(midpoint(F, G), F, H) mod 360
By divide_by_2_mod_180_v0 on G, I, E, B, G, midpoint(E, G) we get angle(G, I, E) == angle(B, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on F, G, B, midpoint(F, G), D, G we get angle(F, G, B) == angle(midpoint(F, G), D, G) + 180 mod 360
By divide_by_2_mod_180_v0 on A, F, midpoint(F, G), F, G, A we get angle(F, G, A) == angle(A, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on J, F, G, midpoint(F, G), D, G we get angle(J, F, G) == angle(midpoint(F, G), D, G) + 180 mod 360
By in_imply_concyclic on G, E, I, line_circle_tangent_point(f, c) we get concyclic(E, G, I, line_circle_tangent_point(f, c))
By divide_by_2_mod_180_v0 on G, D, midpoint(E, G), G, F, E we get angle(G, F, E) == angle(G, D, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on G, E, C, G, D, midpoint(E, G) we get angle(G, E, C) == angle(G, D, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), F, A, B, G, F we get angle(B, G, F) + 180 == angle(midpoint(F, G), F, A) mod 360
By tangent_point_is_unique on G, line_circle_tangent_point(f, c), c, f we get G == line_circle_tangent_point(f, c)
By divide_by_2_mod_180_v0 on D, F, midpoint(F, G), J, A, D we get angle(J, A, D) == angle(D, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), D, G, F, I, G we get angle(F, I, G) + 180 == angle(midpoint(F, G), D, G) mod 360
By divide_by_2_mod_180_v0 on H, F, midpoint(F, G), A, D, G we get angle(A, D, G) == angle(H, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), E, C, G, D, H we get angle(G, D, H) == angle(midpoint(E, G), E, C) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), D, G, midpoint(F, G), G, A we get angle(midpoint(F, G), D, G) == angle(midpoint(F, G), G, A) mod 360
By divide_by_2_mod_180_v1 on G, E, F, midpoint(F, G), F, C we get angle(G, E, F) == angle(midpoint(F, G), F, C) + 180 mod 360
By divide_by_2_mod_180_v1 on F, E, midpoint(E, G), F, G, B we get angle(F, G, B) + 180 == angle(F, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on A, G, midpoint(E, G), B, D, E we get angle(B, D, E) + 180 == angle(A, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on D, F, midpoint(F, G), C, A, D we get angle(C, A, D) == angle(D, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on G, A, D, midpoint(F, G), F, D we get angle(G, A, D) == angle(midpoint(F, G), F, D) mod 360
By divide_by_2_mod_180_v0 on D, A, H, midpoint(F, G), F, D we get angle(D, A, H) == angle(midpoint(F, G), F, D) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), D, F, midpoint(E, G), E, F we get angle(midpoint(E, G), E, F) == angle(midpoint(F, G), D, F) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), F, C, G, D, A we get angle(G, D, A) + 180 == angle(midpoint(F, G), F, C) mod 360
By divide_by_2_mod_180_v0 on H, I, E, A, G, midpoint(E, G) we get angle(H, I, E) == angle(A, G, midpoint(E, G)) mod 360
By directions_draw_angle on I, F, midpoint(E, F) we get exists(angle(I, F, midpoint(E, F)))
By divide_by_2_mod_180_v0 on midpoint(E, G), E, C, H, I, E we get angle(H, I, E) == angle(midpoint(E, G), E, C) mod 360
By divide_by_2_mod_180_v1 on C, F, G, midpoint(F, G), G, A we get angle(C, F, G) == angle(midpoint(F, G), G, A) + 180 mod 360
By divide_by_2_mod_180_v0 on G, F, E, B, G, midpoint(E, G) we get angle(G, F, E) == angle(B, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on C, F, midpoint(F, G), F, D, A we get angle(F, D, A) + 180 == angle(C, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on H, I, E, midpoint(E, G), D, E we get angle(H, I, E) == angle(midpoint(E, G), D, E) + 180 mod 360
By divide_by_2_mod_180_v0 on D, A, G, D, F, midpoint(F, G) we get angle(D, A, G) == angle(D, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on B, E, midpoint(E, G), E, F, midpoint(F, G) we get angle(B, E, midpoint(E, G)) == angle(E, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), E, F, A, G, F we get angle(A, G, F) == angle(midpoint(E, G), E, F) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), F, C, G, E, F we get angle(G, E, F) + 180 == angle(midpoint(F, G), F, C) mod 360
By divide_by_2_mod_180_v1 on G, F, A, midpoint(F, G), F, J we get angle(G, F, A) == angle(midpoint(F, G), F, J) + 180 mod 360
By divide_by_2_mod_180_v1 on G, D, midpoint(F, G), B, G, F we get angle(B, G, F) + 180 == angle(G, D, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on H, B, G, midpoint(E, G), G, D we get angle(H, B, G) == angle(midpoint(E, G), G, D) mod 360
By divide_by_2_mod_180_v1 on J, F, midpoint(F, G), F, D, A we get angle(F, D, A) + 180 == angle(J, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), G, H, C, E, I we get angle(C, E, I) == angle(midpoint(E, G), G, H) mod 360
By directions_draw_angle on C, E, midpoint(E, I) we get exists(angle(C, E, midpoint(E, I)))
By not_in_line_equivalent_to_not_collinear_v0 on J, midpoint(E, I), E we get not_collinear(E, J, midpoint(E, I)), exists(Line(E, midpoint(E, I)))
By divide_by_2_mod_180_v0 on J, A, D, midpoint(F, G), A, G we get angle(J, A, D) == angle(midpoint(F, G), A, G) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), F, A, B, D, C we get angle(B, D, C) + 180 == angle(midpoint(F, G), F, A) mod 360
By divide_by_2_mod_180_v1 on E, F, H, midpoint(E, G), G, F we get angle(E, F, H) == angle(midpoint(E, G), G, F) + 180 mod 360
By divide_by_2_mod_180_v0 on G, F, J, B, G, midpoint(F, G) we get angle(G, F, J) == angle(B, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), F, E, H, D, E we get angle(H, D, E) + 180 == angle(midpoint(F, G), F, E) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), G, B, E, D, midpoint(E, G) we get angle(E, D, midpoint(E, G)) == angle(midpoint(E, G), G, B) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), E, C, G, D, B we get angle(G, D, B) + 180 == angle(midpoint(E, G), E, C) mod 360
By divide_by_2_mod_180_v0 on B, A, D, D, G, midpoint(F, G) we get angle(B, A, D) == angle(D, G, midpoint(F, G)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(F, G), midpoint(E, G), E we get not_collinear(E, midpoint(E, G), midpoint(F, G)), exists(Line(E, midpoint(E, G)))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, G), midpoint(F, G), D we get not_collinear(D, midpoint(E, G), midpoint(F, G)), exists(Line(D, midpoint(F, G)))
By divide_by_2_mod_180_v0 on F, G, B, C, F, midpoint(F, G) we get angle(F, G, B) == angle(C, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on F, A, midpoint(F, G), J, A, D we get angle(J, A, D) == angle(F, A, midpoint(F, G)) mod 360
By directions_draw_angle on midpoint(E, F), F, projection(F, j) we get exists(angle(midpoint(E, F), F, projection(F, j)))
By divide_by_2_mod_180_v0 on midpoint(F, G), F, H, A, D, F we get angle(A, D, F) == angle(midpoint(F, G), F, H) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), F, J, H, D, C we get angle(H, D, C) + 180 == angle(midpoint(F, G), F, J) mod 360
By divide_by_2_mod_180_v1 on E, D, H, E, D, midpoint(E, G) we get angle(E, D, H) == angle(E, D, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on H, G, midpoint(E, G), I, E, C we get angle(I, E, C) == angle(H, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on I, H, D, midpoint(E, G), H, E we get angle(I, H, D) == angle(midpoint(E, G), H, E) mod 360
By divide_by_2_mod_180_v0 on I, F, midpoint(F, G), I, F, G we get angle(I, F, G) == angle(I, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on J, F, midpoint(F, G), F, G, A we get angle(F, G, A) + 180 == angle(J, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on E, I, F, midpoint(E, G), G, F we get angle(E, I, F) == angle(midpoint(E, G), G, F) mod 360
By divide_by_2_mod_180_v0 on H, B, A, midpoint(E, G), B, G we get angle(H, B, A) == angle(midpoint(E, G), B, G) mod 360
By directions_draw_angle on midpoint(F, G), D, C we get exists(angle(midpoint(F, G), D, C))
By reverse_direction on F, projection(F, j) we get 180 == direction(F, projection(F, j)) - direction(projection(F, j), F) mod 360
By divide_by_2_mod_180_v0 on G, A, midpoint(F, G), B, A, D we get angle(B, A, D) == angle(G, A, midpoint(F, G)) mod 360
By line_inequality on perpendicular_bisector(F, I), Line(E, J), D we get Line(E, J) != perpendicular_bisector(F, I)
By directions_draw_angle on projection(F, j), F, E we get exists(angle(projection(F, j), F, E))
By divide_by_2_mod_180_v1 on A, G, midpoint(E, G), midpoint(E, G), D, E we get angle(A, G, midpoint(E, G)) == angle(midpoint(E, G), D, E) + 180 mod 360
By divide_by_2_mod_180_v1 on B, D, C, midpoint(F, G), F, H we get angle(B, D, C) == angle(midpoint(F, G), F, H) + 180 mod 360
By divide_by_2_mod_180_v0 on G, B, H, D, G, midpoint(E, G) we get angle(G, B, H) == angle(D, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on G, D, B, B, G, midpoint(E, G) we get angle(G, D, B) == angle(B, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on H, F, G, midpoint(F, G), G, A we get angle(H, F, G) == angle(midpoint(F, G), G, A) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), D, F, G, D, A we get angle(G, D, A) == angle(midpoint(F, G), D, F) mod 360
By divide_by_2_mod_180_v0 on D, G, midpoint(E, G), midpoint(E, G), B, E we get angle(D, G, midpoint(E, G)) == angle(midpoint(E, G), B, E) mod 360
By divide_by_2_mod_180_v0 on A, F, midpoint(F, G), H, F, G we get angle(H, F, G) == angle(A, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on A, F, G, H, F, midpoint(F, G) we get angle(A, F, G) == angle(H, F, midpoint(F, G)) mod 360
By reverse_direction on E, midpoint(E, F) we get 180 == direction(E, midpoint(E, F)) - direction(midpoint(E, F), E) mod 360
By directions_draw_angle on projection(F, j), F, midpoint(E, F) we get exists(angle(projection(F, j), F, midpoint(E, F)))
By divide_by_2_mod_180_v0 on A, G, midpoint(E, G), A, G, E we get angle(A, G, E) == angle(A, G, midpoint(E, G)) mod 360
By directions_draw_angle on J, E, projection(F, j) we get exists(angle(J, E, projection(F, j)))
By divide_by_2_mod_180_v1 on B, D, C, A, G, midpoint(F, G) we get angle(B, D, C) == angle(A, G, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on G, D, A, A, G, midpoint(F, G) we get angle(G, D, A) == angle(A, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on C, E, midpoint(E, G), H, D, G we get angle(H, D, G) == angle(C, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), F, H, G, F, A we get angle(G, F, A) == angle(midpoint(F, G), F, H) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), G, B, H, F, G we get angle(H, F, G) + 180 == angle(midpoint(F, G), G, B) mod 360
By line_containment_inequality on line_circle_tangent_point(g, c), F, g we get F != line_circle_tangent_point(g, c)
By divide_by_2_mod_180_v1 on midpoint(F, G), F, I, B, G, H we get angle(B, G, H) + 180 == angle(midpoint(F, G), F, I) mod 360
By divide_by_2_mod_180_v0 on D, A, C, D, G, midpoint(F, G) we get angle(D, A, C) == angle(D, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on C, A, D, midpoint(F, G), G, D we get angle(C, A, D) == angle(midpoint(F, G), G, D) mod 360
By divide_by_2_mod_180_v0 on D, B, E, midpoint(E, G), E, D we get angle(D, B, E) == angle(midpoint(E, G), E, D) mod 360
By divide_by_2_mod_180_v0 on B, G, E, midpoint(E, G), D, E we get angle(B, G, E) == angle(midpoint(E, G), D, E) mod 360
By divide_by_2_mod_180_v0 on B, E, midpoint(E, G), E, D, midpoint(E, G) we get angle(B, E, midpoint(E, G)) == angle(E, D, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), G, B, C, D, H we get angle(C, D, H) + 180 == angle(midpoint(F, G), G, B) mod 360
By divide_by_2_mod_180_v1 on I, F, C, I, G, midpoint(F, G) we get angle(I, F, C) == angle(I, G, midpoint(F, G)) + 180 mod 360
By sas_anti_similarity on G, midpoint(E, G), B, D, midpoint(E, G), E we get anti_similar_triangles(B, G, midpoint(E, G), E, D, midpoint(E, G))
By divide_by_2_mod_180_v1 on A, G, midpoint(E, G), G, F, E we get angle(G, F, E) + 180 == angle(A, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on H, G, midpoint(F, G), I, F, H we get angle(I, F, H) == angle(H, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), D, F, G, F, J we get angle(G, F, J) + 180 == angle(midpoint(F, G), D, F) mod 360
By divide_by_2_mod_180_v1 on A, G, midpoint(E, G), B, G, E we get angle(B, G, E) + 180 == angle(A, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on H, B, A, E, B, midpoint(E, G) we get angle(H, B, A) == angle(E, B, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on G, B, D, D, G, midpoint(E, G) we get angle(G, B, D) == angle(D, G, midpoint(E, G)) mod 360
By reverse_direction on projection(F, j), F we get 180 == direction(projection(F, j), F) - direction(F, projection(F, j)) mod 360
By divide_by_2_mod_180_v1 on E, I, H, midpoint(E, G), D, G we get angle(E, I, H) == angle(midpoint(E, G), D, G) + 180 mod 360
By divide_by_2_mod_180_v1 on F, D, midpoint(F, G), midpoint(F, G), G, B we get angle(F, D, midpoint(F, G)) == angle(midpoint(F, G), G, B) + 180 mod 360
By divide_by_2_mod_180_v1 on E, D, H, midpoint(E, G), G, B we get angle(E, D, H) == angle(midpoint(E, G), G, B) + 180 mod 360
By divide_by_2_mod_180_v1 on A, G, midpoint(E, G), midpoint(F, G), F, E we get angle(A, G, midpoint(E, G)) == angle(midpoint(F, G), F, E) + 180 mod 360
By divide_by_2_mod_180_v1 on E, D, H, midpoint(E, G), D, G we get angle(E, D, H) == angle(midpoint(E, G), D, G) + 180 mod 360
By divide_by_2_mod_180_v0 on C, D, B, C, F, midpoint(F, G) we get angle(C, D, B) == angle(C, F, midpoint(F, G)) mod 360
By directions_draw_angle on projection(F, Line(D, J)), F, G we get exists(angle(projection(F, Line(D, J)), F, G))
By divide_by_2_mod_180_v1 on G, D, midpoint(F, G), B, D, C we get angle(B, D, C) + 180 == angle(G, D, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on E, F, H, E, G, midpoint(F, G) we get angle(E, F, H) == angle(E, G, midpoint(F, G)) + 180 mod 360
By directions_draw_angle on projection(F, j), F, G we get exists(angle(projection(F, j), F, G))
By divide_by_2_mod_180_v0 on midpoint(F, G), A, F, G, F, D we get angle(G, F, D) == angle(midpoint(F, G), A, F) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), G, A, E, D, midpoint(E, G) we get angle(midpoint(E, G), G, A) == angle(E, D, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), F, J, G, F, A we get angle(G, F, A) + 180 == angle(midpoint(F, G), F, J) mod 360
By divide_by_2_mod_180_v0 on C, D, A, midpoint(E, G), G, A we get angle(C, D, A) == angle(midpoint(E, G), G, A) mod 360
By divide_by_2_mod_180_v0 on H, A, D, D, F, midpoint(F, G) we get angle(H, A, D) == angle(D, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), D, E, midpoint(E, G), E, C we get angle(midpoint(E, G), D, E) == angle(midpoint(E, G), E, C) + 180 mod 360
By divide_by_2_mod_180_v0 on G, E, F, midpoint(F, G), D, F we get angle(G, E, F) == angle(midpoint(F, G), D, F) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), F, H, G, F, C we get angle(G, F, C) + 180 == angle(midpoint(F, G), F, H) mod 360
By divide_by_2_mod_180_v0 on D, B, C, D, G, midpoint(E, G) we get angle(D, B, C) == angle(D, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on E, D, midpoint(E, G), E, G, B we get angle(E, G, B) == angle(E, D, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on F, E, I, midpoint(F, G), G, I we get angle(F, E, I) == angle(midpoint(F, G), G, I) mod 360
By divide_by_2_mod_180_v1 on F, E, G, C, F, midpoint(F, G) we get angle(F, E, G) == angle(C, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on G, F, H, midpoint(F, G), F, A we get angle(G, F, H) == angle(midpoint(F, G), F, A) mod 360
By divide_by_2_mod_180_v0 on A, G, midpoint(E, G), G, D, H we get angle(G, D, H) == angle(A, G, midpoint(E, G)) mod 360
By directions_draw_angle on H, I, midpoint(E, I) we get exists(angle(H, I, midpoint(E, I)))
By divide_by_2_mod_180_v0 on D, E, I, E, H, midpoint(E, G) we get angle(D, E, I) == angle(E, H, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on E, I, H, E, D, midpoint(E, G) we get angle(E, I, H) == angle(E, D, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on H, D, G, B, E, midpoint(E, G) we get angle(H, D, G) == angle(B, E, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), F, I, A, G, I we get angle(A, G, I) == angle(midpoint(F, G), F, I) mod 360
By divide_by_2_mod_180_v0 on C, D, H, midpoint(F, G), D, G we get angle(C, D, H) == angle(midpoint(F, G), D, G) mod 360
By divide_by_2_mod_180_v0 on I, F, midpoint(F, G), I, E, G we get angle(I, E, G) == angle(I, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), D, G, E, F, G we get angle(E, F, G) == angle(midpoint(E, G), D, G) mod 360
By divide_by_2_mod_180_v1 on B, G, F, midpoint(E, G), E, F we get angle(B, G, F) == angle(midpoint(E, G), E, F) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), F, A, H, D, C we get angle(H, D, C) == angle(midpoint(F, G), F, A) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), D, G, C, E, G we get angle(C, E, G) + 180 == angle(midpoint(E, G), D, G) mod 360
By divide_by_2_mod_180_v1 on B, E, F, midpoint(E, G), G, F we get angle(B, E, F) == angle(midpoint(E, G), G, F) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), G, H, J, F, I we get angle(J, F, I) + 180 == angle(midpoint(F, G), G, H) mod 360
By divide_by_2_mod_180_v0 on G, H, midpoint(E, G), I, H, D we get angle(I, H, D) == angle(G, H, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on B, E, midpoint(E, G), H, D, G we get angle(H, D, G) + 180 == angle(B, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on D, H, I, E, H, midpoint(E, G) we get angle(D, H, I) == angle(E, H, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on E, G, D, midpoint(E, G), B, G we get angle(E, G, D) == angle(midpoint(E, G), B, G) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), E, C, midpoint(F, G), F, E we get angle(midpoint(E, G), E, C) == angle(midpoint(F, G), F, E) + 180 mod 360
By divide_by_2_mod_180_v1 on G, D, midpoint(F, G), midpoint(F, G), F, J we get angle(G, D, midpoint(F, G)) == angle(midpoint(F, G), F, J) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), H, E, I, J, D we get angle(I, J, D) == angle(midpoint(E, G), H, E) mod 360
By divide_by_2_mod_180_v0 on I, F, A, I, G, midpoint(F, G) we get angle(I, F, A) == angle(I, G, midpoint(F, G)) mod 360
By line_inequality on Line(G, projection(F, j)), Line(F, I), G we get Line(F, I) != Line(G, projection(F, j))
By divide_by_2_mod_180_v0 on midpoint(F, G), F, H, G, D, A we get angle(G, D, A) == angle(midpoint(F, G), F, H) mod 360
By directions_draw_angle on D, F, midpoint(E, F) we get exists(angle(D, F, midpoint(E, F)))
By divide_by_2_mod_180_v0 on midpoint(E, G), H, G, E, H, B we get angle(E, H, B) == angle(midpoint(E, G), H, G) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), F, H, midpoint(E, G), E, F we get angle(midpoint(E, G), E, F) == angle(midpoint(F, G), F, H) mod 360
By in_imply_concyclic on G, I, F, line_circle_tangent_point(g, c) we get concyclic(F, G, I, line_circle_tangent_point(g, c))
By divide_by_2_mod_180_v0 on midpoint(E, G), D, G, E, D, B we get angle(E, D, B) == angle(midpoint(E, G), D, G) mod 360
By sas_anti_similarity on E, midpoint(E, G), B, D, midpoint(E, G), G we get anti_similar_triangles(B, E, midpoint(E, G), G, D, midpoint(E, G))
By divide_by_2_mod_180_v1 on midpoint(F, G), D, G, midpoint(F, G), G, B we get angle(midpoint(F, G), D, G) == angle(midpoint(F, G), G, B) + 180 mod 360
By divide_by_2_mod_180_v0 on D, A, C, G, A, midpoint(F, G) we get angle(D, A, C) == angle(G, A, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on A, G, midpoint(F, G), G, E, F we get angle(G, E, F) == angle(A, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on J, F, E, F, G, midpoint(E, G) we get angle(J, F, E) == angle(F, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), D, F, A, G, F we get angle(A, G, F) == angle(midpoint(F, G), D, F) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on B, F, midpoint(E, F) we get not_collinear(B, F, midpoint(E, F)), exists(Line(F, midpoint(E, F)))
By divide_by_2_mod_180_v1 on C, D, A, E, F, midpoint(F, G) we get angle(C, D, A) == angle(E, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on E, G, midpoint(F, G), B, E, F we get angle(B, E, F) + 180 == angle(E, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on F, E, G, A, F, midpoint(F, G) we get angle(F, E, G) == angle(A, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on A, G, midpoint(F, G), H, D, C we get angle(H, D, C) == angle(A, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on I, G, midpoint(E, G), I, F, E we get angle(I, F, E) + 180 == angle(I, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), F, A, A, G, F we get angle(A, G, F) == angle(midpoint(F, G), F, A) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), A, F, D, A, C we get angle(D, A, C) == angle(midpoint(F, G), A, F) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), F, E, B, G, midpoint(E, G) we get angle(B, G, midpoint(E, G)) == angle(midpoint(F, G), F, E) mod 360
By divide_by_2_mod_180_v0 on H, G, A, I, E, midpoint(E, G) we get angle(H, G, A) == angle(I, E, midpoint(E, G)) mod 360
By sas_anti_similarity on D, midpoint(F, G), F, G, midpoint(F, G), A we get anti_similar_triangles(A, G, midpoint(F, G), F, D, midpoint(F, G))
By divide_by_2_mod_180_v0 on B, A, D, midpoint(F, G), A, F we get angle(B, A, D) == angle(midpoint(F, G), A, F) mod 360
By reverse_direction on projection(F, Line(D, J)), F we get 180 == direction(projection(F, Line(D, J)), F) - direction(F, projection(F, Line(D, J))) mod 360
By divide_by_2_mod_180_v1 on C, E, midpoint(E, G), E, F, midpoint(F, G) we get angle(C, E, midpoint(E, G)) == angle(E, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on G, F, E, midpoint(E, G), D, E we get angle(G, F, E) == angle(midpoint(E, G), D, E) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, G), midpoint(E, F), F we get not_collinear(F, midpoint(E, F), midpoint(E, G)), exists(Line(F, midpoint(E, F)))
By not_in_line_equivalent_to_not_collinear_v0 on C, E, midpoint(E, F) we get not_collinear(C, E, midpoint(E, F)), exists(Line(E, midpoint(E, F)))
By divide_by_2_mod_180_v1 on J, F, G, A, F, midpoint(F, G) we get angle(J, F, G) == angle(A, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on F, D, midpoint(F, G), A, D, G we get angle(A, D, G) == angle(F, D, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), G, H, E, F, I we get angle(E, F, I) + 180 == angle(midpoint(E, G), G, H) mod 360
By divide_by_2_mod_180_v0 on F, A, midpoint(F, G), H, A, D we get angle(H, A, D) == angle(F, A, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on A, D, C, G, D, midpoint(E, G) we get angle(A, D, C) == angle(G, D, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on B, G, midpoint(E, G), A, G, E we get angle(A, G, E) + 180 == angle(B, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on J, F, midpoint(F, G), F, E, G we get angle(F, E, G) + 180 == angle(J, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on C, E, midpoint(E, G), E, I, H we get angle(E, I, H) == angle(C, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), G, B, J, F, G we get angle(J, F, G) == angle(midpoint(F, G), G, B) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), F, E, G, E, B we get angle(G, E, B) == angle(midpoint(F, G), F, E) mod 360
By divide_by_2_mod_180_v0 on A, F, G, A, F, midpoint(F, G) we get angle(A, F, G) == angle(A, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on E, H, D, midpoint(E, G), H, G we get angle(E, H, D) == angle(midpoint(E, G), H, G) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), G, D, H, B, A we get angle(H, B, A) == angle(midpoint(E, G), G, D) mod 360
By directions_draw_angle on projection(F, Line(D, J)), F, D we get exists(angle(projection(F, Line(D, J)), F, D))
By divide_by_2_mod_180_v0 on E, H, D, E, H, midpoint(E, G) we get angle(E, H, D) == angle(E, H, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), E, C, G, D, midpoint(E, G) we get angle(midpoint(E, G), E, C) == angle(G, D, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), E, D, G, B, H we get angle(G, B, H) == angle(midpoint(E, G), E, D) mod 360
By divide_by_2_mod_180_v0 on G, F, E, midpoint(E, G), E, B we get angle(G, F, E) == angle(midpoint(E, G), E, B) mod 360
By directions_draw_angle on H, F, projection(F, j) we get exists(angle(H, F, projection(F, j)))
By divide_by_2_mod_180_v1 on A, G, midpoint(E, G), G, I, E we get angle(G, I, E) + 180 == angle(A, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), E, D, H, B, E we get angle(H, B, E) == angle(midpoint(E, G), E, D) mod 360
By divide_by_2_mod_180_v1 on G, F, C, A, G, midpoint(F, G) we get angle(G, F, C) == angle(A, G, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on E, B, midpoint(E, G), C, B, D we get angle(C, B, D) == angle(E, B, midpoint(E, G)) mod 360
By directions_draw_angle on C, H, midpoint(E, G) we get exists(angle(C, H, midpoint(E, G)))
By divide_by_2_mod_180_v1 on B, G, I, midpoint(F, G), F, I we get angle(B, G, I) == angle(midpoint(F, G), F, I) + 180 mod 360
By divide_by_2_mod_180_v0 on H, E, G, midpoint(E, G), G, I we get angle(H, E, G) == angle(midpoint(E, G), G, I) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), E, C, B, D, E we get angle(B, D, E) + 180 == angle(midpoint(E, G), E, C) mod 360
By directions_draw_angle on midpoint(E, F), F, midpoint(F, G) we get exists(angle(midpoint(E, F), F, midpoint(F, G)))
By divide_by_2_mod_180_v1 on midpoint(F, G), F, J, G, E, F we get angle(G, E, F) + 180 == angle(midpoint(F, G), F, J) mod 360
By divide_by_2_mod_180_v1 on H, F, midpoint(F, G), J, F, G we get angle(J, F, G) + 180 == angle(H, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on J, F, midpoint(F, G), C, F, G we get angle(C, F, G) == angle(J, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on B, E, midpoint(E, G), E, I, H we get angle(E, I, H) + 180 == angle(B, E, midpoint(E, G)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on B, E, midpoint(E, F) we get not_collinear(B, E, midpoint(E, F)), exists(Line(E, midpoint(E, F)))
By divide_by_2_mod_180_v1 on midpoint(F, G), F, J, G, D, A we get angle(G, D, A) + 180 == angle(midpoint(F, G), F, J) mod 360
By divide_by_2_mod_180_v1 on E, G, midpoint(F, G), E, F, A we get angle(E, F, A) + 180 == angle(E, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on G, D, midpoint(F, G), A, G, F we get angle(A, G, F) == angle(G, D, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on B, G, midpoint(F, G), midpoint(F, G), D, F we get angle(B, G, midpoint(F, G)) == angle(midpoint(F, G), D, F) + 180 mod 360
By divide_by_2_mod_180_v1 on E, G, A, midpoint(E, G), D, G we get angle(E, G, A) == angle(midpoint(E, G), D, G) + 180 mod 360
By divide_by_2_mod_180_v1 on H, D, E, midpoint(F, G), F, E we get angle(H, D, E) == angle(midpoint(F, G), F, E) + 180 mod 360
By divide_by_2_mod_180_v1 on C, E, G, E, D, midpoint(E, G) we get angle(C, E, G) == angle(E, D, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on E, H, midpoint(E, G), D, J, I we get angle(D, J, I) == angle(E, H, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on D, G, midpoint(E, G), D, B, E we get angle(D, B, E) == angle(D, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), G, B, F, D, midpoint(F, G) we get angle(midpoint(F, G), G, B) == angle(F, D, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), G, A, E, F, midpoint(F, G) we get angle(midpoint(E, G), G, A) == angle(E, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), G, A, F, I, G we get angle(F, I, G) + 180 == angle(midpoint(F, G), G, A) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), F, C, G, F, J we get angle(G, F, J) == angle(midpoint(F, G), F, C) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), G, A, J, F, G we get angle(J, F, G) + 180 == angle(midpoint(F, G), G, A) mod 360
By divide_by_2_mod_180_v0 on H, B, E, D, G, midpoint(E, G) we get angle(H, B, E) == angle(D, G, midpoint(E, G)) mod 360
By directions_draw_angle on midpoint(E, I), E, G we get exists(angle(midpoint(E, I), E, G))
By divide_by_2_mod_180_v0 on C, D, A, C, E, midpoint(E, G) we get angle(C, D, A) == angle(C, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on H, D, A, midpoint(E, G), G, F we get angle(H, D, A) == angle(midpoint(E, G), G, F) mod 360
By divide_by_2_mod_180_v0 on B, D, G, E, F, midpoint(F, G) we get angle(B, D, G) == angle(E, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), E, I, G, F, I we get angle(G, F, I) == angle(midpoint(E, G), E, I) mod 360
By divide_by_2_mod_180_v0 on F, G, A, H, F, midpoint(F, G) we get angle(F, G, A) == angle(H, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), G, E, A, F, E we get angle(A, F, E) + 180 == angle(midpoint(F, G), G, E) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), G, A, C, D, H we get angle(C, D, H) == angle(midpoint(F, G), G, A) mod 360
By divide_by_2_mod_180_v1 on B, D, C, G, D, midpoint(F, G) we get angle(B, D, C) == angle(G, D, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on A, F, midpoint(F, G), midpoint(F, G), D, G we get angle(A, F, midpoint(F, G)) == angle(midpoint(F, G), D, G) mod 360
By divide_by_2_mod_180_v1 on J, F, midpoint(F, G), H, F, G we get angle(H, F, G) + 180 == angle(J, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on D, I, E, midpoint(E, G), H, E we get angle(D, I, E) == angle(midpoint(E, G), H, E) mod 360
By divide_by_2_mod_180_v1 on C, E, midpoint(E, G), B, D, G we get angle(B, D, G) + 180 == angle(C, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on D, A, B, midpoint(F, G), A, G we get angle(D, A, B) == angle(midpoint(F, G), A, G) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), D, G, F, G, A we get angle(F, G, A) == angle(midpoint(F, G), D, G) mod 360
By divide_by_2_mod_180_v0 on D, J, E, G, H, midpoint(E, G) we get angle(D, J, E) == angle(G, H, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on B, D, C, midpoint(F, G), F, J we get angle(B, D, C) == angle(midpoint(F, G), F, J) mod 360
By divide_by_2_mod_180_v0 on E, B, midpoint(E, G), E, B, H we get angle(E, B, H) == angle(E, B, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on B, D, C, midpoint(E, G), E, F we get angle(B, D, C) == angle(midpoint(E, G), E, F) + 180 mod 360
By divide_by_2_mod_180_v1 on F, E, midpoint(E, G), C, F, G we get angle(C, F, G) + 180 == angle(F, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on C, D, B, midpoint(F, G), G, A we get angle(C, D, B) == angle(midpoint(F, G), G, A) + 180 mod 360
By sas_similarity on F, midpoint(F, G), A, D, midpoint(F, G), F we get similar_triangles(A, F, midpoint(F, G), F, D, midpoint(F, G))
By divide_by_2_mod_180_v0 on H, G, E, I, G, midpoint(E, G) we get angle(H, G, E) == angle(I, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on G, F, E, midpoint(E, G), E, C we get angle(G, F, E) == angle(midpoint(E, G), E, C) + 180 mod 360
By divide_by_2_mod_180_v1 on E, F, midpoint(F, G), C, E, midpoint(E, G) we get angle(E, F, midpoint(F, G)) == angle(C, E, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on A, G, E, G, D, midpoint(E, G) we get angle(A, G, E) == angle(G, D, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on E, G, midpoint(F, G), C, D, F we get angle(C, D, F) == angle(E, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on I, E, midpoint(E, G), B, E, H we get angle(B, E, H) + 180 == angle(I, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on E, B, H, D, E, midpoint(E, G) we get angle(E, B, H) == angle(D, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), D, E, A, G, midpoint(E, G) we get angle(midpoint(E, G), D, E) == angle(A, G, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), E, B, midpoint(E, G), D, E we get angle(midpoint(E, G), D, E) == angle(midpoint(E, G), E, B) mod 360
By divide_by_2_mod_180_v0 on H, A, D, midpoint(F, G), A, G we get angle(H, A, D) == angle(midpoint(F, G), A, G) mod 360
By sas_similarity on D, midpoint(F, G), F, F, midpoint(F, G), A we get similar_triangles(A, F, midpoint(F, G), F, D, midpoint(F, G))
By divide_by_2_mod_180_v0 on H, G, A, I, F, midpoint(F, G) we get angle(H, G, A) == angle(I, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), G, B, E, F, G we get angle(E, F, G) == angle(midpoint(E, G), G, B) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), F, E, G, D, midpoint(E, G) we get angle(G, D, midpoint(E, G)) == angle(midpoint(F, G), F, E) mod 360
By divide_by_2_mod_180_v0 on G, D, midpoint(F, G), midpoint(E, G), E, F we get angle(G, D, midpoint(F, G)) == angle(midpoint(E, G), E, F) mod 360
By divide_by_2_mod_180_v0 on B, D, G, E, D, midpoint(E, G) we get angle(B, D, G) == angle(E, D, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on H, F, G, F, D, midpoint(F, G) we get angle(H, F, G) == angle(F, D, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on E, B, midpoint(E, G), E, G, D we get angle(E, G, D) == angle(E, B, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on G, A, midpoint(F, G), G, A, D we get angle(G, A, D) == angle(G, A, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on G, I, E, G, D, midpoint(E, G) we get angle(G, I, E) == angle(G, D, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on G, E, B, A, G, midpoint(E, G) we get angle(G, E, B) == angle(A, G, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on G, D, H, midpoint(F, G), F, E we get angle(G, D, H) == angle(midpoint(F, G), F, E) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), F, H, H, D, C we get angle(H, D, C) == angle(midpoint(F, G), F, H) mod 360
By reverse_direction on midpoint(E, F), E we get 180 == direction(midpoint(E, F), E) - direction(E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), G, B, C, D, B we get angle(C, D, B) == angle(midpoint(F, G), G, B) mod 360
By divide_by_2_mod_180_v0 on A, G, H, midpoint(F, G), F, I we get angle(A, G, H) == angle(midpoint(F, G), F, I) mod 360
By divide_by_2_mod_180_v0 on G, E, I, midpoint(F, G), F, I we get angle(G, E, I) == angle(midpoint(F, G), F, I) mod 360
By sas_similarity on E, midpoint(E, G), D, B, midpoint(E, G), E we get similar_triangles(B, E, midpoint(E, G), E, D, midpoint(E, G))
By divide_by_2_mod_180_v1 on B, G, midpoint(F, G), G, D, A we get angle(G, D, A) + 180 == angle(B, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on E, H, midpoint(E, G), E, I, D we get angle(E, I, D) == angle(E, H, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on G, F, D, G, A, midpoint(F, G) we get angle(G, F, D) == angle(G, A, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), D, G, F, E, G we get angle(F, E, G) == angle(midpoint(F, G), D, G) mod 360
By divide_by_2_mod_180_v1 on E, G, B, midpoint(E, G), G, A we get angle(E, G, B) == angle(midpoint(E, G), G, A) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), G, I, E, G, H we get angle(E, G, H) == angle(midpoint(E, G), G, I) mod 360
By divide_by_2_mod_180_v1 on B, G, midpoint(E, G), A, D, C we get angle(A, D, C) + 180 == angle(B, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on G, D, H, G, D, midpoint(E, G) we get angle(G, D, H) == angle(G, D, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), E, B, H, D, E we get angle(H, D, E) + 180 == angle(midpoint(E, G), E, B) mod 360
By divide_by_2_mod_180_v0 on G, D, midpoint(F, G), G, F, A we get angle(G, F, A) == angle(G, D, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on A, F, G, C, F, midpoint(F, G) we get angle(A, F, G) == angle(C, F, midpoint(F, G)) + 180 mod 360
By directions_draw_angle on H, F, midpoint(E, F) we get exists(angle(H, F, midpoint(E, F)))
By divide_by_2_mod_180_v1 on B, G, midpoint(F, G), G, F, H we get angle(G, F, H) + 180 == angle(B, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on E, G, midpoint(F, G), E, I, F we get angle(E, I, F) == angle(E, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), F, C, H, D, C we get angle(H, D, C) + 180 == angle(midpoint(F, G), F, C) mod 360
By directions_draw_angle on I, F, projection(F, j) we get exists(angle(I, F, projection(F, j)))
By divide_by_2_mod_180_v0 on midpoint(F, G), A, G, F, G, D we get angle(F, G, D) == angle(midpoint(F, G), A, G) mod 360
By divide_by_2_mod_180_v1 on G, F, C, midpoint(F, G), D, F we get angle(G, F, C) == angle(midpoint(F, G), D, F) + 180 mod 360
By divide_by_2_mod_180_v1 on I, F, E, midpoint(E, G), E, H we get angle(I, F, E) == angle(midpoint(E, G), E, H) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), D, F, B, D, C we get angle(B, D, C) + 180 == angle(midpoint(F, G), D, F) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), G, D, J, A, D we get angle(J, A, D) == angle(midpoint(F, G), G, D) mod 360
By divide_by_2_mod_180_v1 on B, E, G, midpoint(E, G), G, A we get angle(B, E, G) == angle(midpoint(E, G), G, A) + 180 mod 360
By divide_by_2_mod_180_v0 on F, G, I, midpoint(F, G), G, H we get angle(F, G, I) == angle(midpoint(F, G), G, H) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), G, B, A, D, G we get angle(A, D, G) + 180 == angle(midpoint(F, G), G, B) mod 360
By divide_by_2_mod_180_v1 on C, F, G, midpoint(F, G), D, G we get angle(C, F, G) == angle(midpoint(F, G), D, G) + 180 mod 360
By directions_draw_angle on projection(F, j), E, B we get exists(angle(projection(F, j), E, B))
By divide_by_2_mod_180_v1 on midpoint(F, G), D, G, F, G, B we get angle(F, G, B) + 180 == angle(midpoint(F, G), D, G) mod 360
By divide_by_2_mod_180_v0 on F, E, C, F, G, midpoint(E, G) we get angle(F, E, C) == angle(F, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), G, F, E, F, H we get angle(E, F, H) + 180 == angle(midpoint(E, G), G, F) mod 360
By divide_by_2_mod_180_v1 on C, F, I, midpoint(F, G), G, I we get angle(C, F, I) == angle(midpoint(F, G), G, I) + 180 mod 360
By divide_by_2_mod_180_v1 on B, G, H, midpoint(F, G), F, I we get angle(B, G, H) == angle(midpoint(F, G), F, I) + 180 mod 360
By divide_by_2_mod_180_v0 on F, G, D, D, F, midpoint(F, G) we get angle(F, G, D) == angle(D, F, midpoint(F, G)) mod 360
By directions_draw_angle on I, E, midpoint(E, F) we get exists(angle(I, E, midpoint(E, F)))
By divide_by_2_mod_180_v0 on midpoint(E, G), G, B, midpoint(E, G), D, G we get angle(midpoint(E, G), D, G) == angle(midpoint(E, G), G, B) mod 360
By divide_by_2_mod_180_v1 on F, D, A, midpoint(F, G), G, B we get angle(F, D, A) == angle(midpoint(F, G), G, B) + 180 mod 360
By divide_by_2_mod_180_v1 on B, D, E, midpoint(E, G), E, C we get angle(B, D, E) == angle(midpoint(E, G), E, C) + 180 mod 360
By divide_by_2_mod_180_v0 on E, D, B, E, D, midpoint(E, G) we get angle(E, D, B) == angle(E, D, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on B, G, F, midpoint(F, G), D, F we get angle(B, G, F) == angle(midpoint(F, G), D, F) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), G, I, H, F, I we get angle(H, F, I) == angle(midpoint(F, G), G, I) mod 360
By reverse_direction on midpoint(E, F), F we get 180 == direction(midpoint(E, F), F) - direction(F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on A, B, D, D, G, midpoint(E, G) we get angle(A, B, D) == angle(D, G, midpoint(E, G)) mod 360
By reverse_direction on midpoint(F, G), D we get 180 == direction(midpoint(F, G), D) - direction(D, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), G, B, E, G, A we get angle(E, G, A) + 180 == angle(midpoint(E, G), G, B) mod 360
By divide_by_2_mod_180_v1 on J, F, midpoint(F, G), F, E, midpoint(E, G) we get angle(J, F, midpoint(F, G)) == angle(F, E, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on A, G, midpoint(E, G), A, D, C we get angle(A, D, C) == angle(A, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on B, H, G, E, H, midpoint(E, G) we get angle(B, H, G) == angle(E, H, midpoint(E, G)) mod 360
By reverse_direction on midpoint(E, G), B we get 180 == direction(midpoint(E, G), B) - direction(B, midpoint(E, G)) mod 360
By sas_anti_similarity on E, midpoint(E, G), D, B, midpoint(E, G), G we get anti_similar_triangles(B, G, midpoint(E, G), E, D, midpoint(E, G))
By line_containment_inequality on line_circle_tangent_point(h, c), B, h we get B != line_circle_tangent_point(h, c)
By divide_by_2_mod_180_v1 on E, D, midpoint(E, G), midpoint(E, G), G, A we get angle(E, D, midpoint(E, G)) == angle(midpoint(E, G), G, A) + 180 mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(F, G), midpoint(E, F), D we get not_collinear(D, midpoint(E, F), midpoint(F, G)), exists(Line(D, midpoint(E, F)))
By sas_anti_similarity on G, midpoint(F, G), A, D, midpoint(F, G), F we get anti_similar_triangles(A, G, midpoint(F, G), F, D, midpoint(F, G))
By divide_by_2_mod_180_v0 on midpoint(F, G), A, F, D, G, midpoint(F, G) we get angle(D, G, midpoint(F, G)) == angle(midpoint(F, G), A, F) mod 360
By divide_by_2_mod_180_v1 on E, F, midpoint(F, G), midpoint(E, G), G, A we get angle(E, F, midpoint(F, G)) == angle(midpoint(E, G), G, A) + 180 mod 360
By divide_by_2_mod_180_v1 on G, D, midpoint(E, G), G, D, H we get angle(G, D, H) + 180 == angle(G, D, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), F, A, G, D, A we get angle(G, D, A) == angle(midpoint(F, G), F, A) mod 360
By reverse_direction on midpoint(E, I), I we get 180 == direction(midpoint(E, I), I) - direction(I, midpoint(E, I)) mod 360
By divide_by_2_mod_180_v0 on H, G, E, H, G, midpoint(E, G) we get angle(H, G, E) == angle(H, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), E, I, A, G, I we get angle(A, G, I) == angle(midpoint(E, G), E, I) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on F, E, midpoint(E, I) we get not_collinear(E, F, midpoint(E, I)), exists(Line(E, midpoint(E, I)))
By divide_by_2_mod_180_v1 on H, E, midpoint(E, G), E, F, I we get angle(E, F, I) + 180 == angle(H, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), G, H, H, F, I we get angle(H, F, I) == angle(midpoint(F, G), G, H) mod 360
By divide_by_2_mod_180_v1 on B, D, E, A, G, midpoint(E, G) we get angle(B, D, E) == angle(A, G, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on G, D, midpoint(E, G), H, I, E we get angle(H, I, E) + 180 == angle(G, D, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), G, F, E, D, C we get angle(E, D, C) == angle(midpoint(E, G), G, F) mod 360
By divide_by_2_mod_180_v0 on G, F, D, D, G, midpoint(F, G) we get angle(G, F, D) == angle(D, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on F, E, midpoint(E, G), F, D, midpoint(F, G) we get angle(F, D, midpoint(F, G)) == angle(F, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), D, G, E, D, H we get angle(E, D, H) + 180 == angle(midpoint(E, G), D, G) mod 360
By divide_by_2_mod_180_v0 on E, F, midpoint(F, G), E, F, G we get angle(E, F, G) == angle(E, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on G, D, H, midpoint(E, G), D, E we get angle(G, D, H) == angle(midpoint(E, G), D, E) + 180 mod 360
By divide_by_2_mod_180_v0 on J, F, G, C, F, midpoint(F, G) we get angle(J, F, G) == angle(C, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on I, F, G, I, E, midpoint(E, G) we get angle(I, F, G) == angle(I, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on A, G, midpoint(F, G), A, D, F we get angle(A, D, F) == angle(A, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on B, G, H, midpoint(E, G), E, I we get angle(B, G, H) == angle(midpoint(E, G), E, I) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), D, E, A, G, E we get angle(A, G, E) + 180 == angle(midpoint(E, G), D, E) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), G, D, D, F, G we get angle(D, F, G) == angle(midpoint(F, G), G, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, G), midpoint(E, I), E we get not_collinear(E, midpoint(E, G), midpoint(E, I)), exists(Line(E, midpoint(E, I)))
By divide_by_2_mod_180_v0 on D, B, G, D, E, midpoint(E, G) we get angle(D, B, G) == angle(D, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), G, E, F, E, B we get angle(F, E, B) + 180 == angle(midpoint(F, G), G, E) mod 360
By reverse_direction on I, midpoint(E, I) we get 180 == direction(I, midpoint(E, I)) - direction(midpoint(E, I), I) mod 360
By divide_by_2_mod_180_v0 on F, A, midpoint(F, G), F, A, D we get angle(F, A, D) == angle(F, A, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on G, A, D, midpoint(F, G), A, F we get angle(G, A, D) == angle(midpoint(F, G), A, F) mod 360
By divide_by_2_mod_180_v1 on F, G, midpoint(E, G), A, F, E we get angle(A, F, E) + 180 == angle(F, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), F, J, H, I, F we get angle(H, I, F) + 180 == angle(midpoint(F, G), F, J) mod 360
By divide_by_2_mod_180_v0 on D, E, midpoint(E, G), midpoint(E, G), B, G we get angle(D, E, midpoint(E, G)) == angle(midpoint(E, G), B, G) mod 360
By divide_by_2_mod_180_v1 on F, E, midpoint(E, G), J, F, midpoint(F, G) we get angle(F, E, midpoint(E, G)) == angle(J, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on B, G, E, B, G, midpoint(E, G) we get angle(B, G, E) == angle(B, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on J, F, midpoint(F, G), F, I, G we get angle(F, I, G) == angle(J, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), D, F, midpoint(F, G), F, A we get angle(midpoint(F, G), D, F) == angle(midpoint(F, G), F, A) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), G, D, E, B, D we get angle(E, B, D) == angle(midpoint(E, G), G, D) mod 360
By divide_by_2_mod_180_v0 on F, E, midpoint(E, G), F, G, A we get angle(F, G, A) == angle(F, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on F, E, midpoint(E, G), C, F, midpoint(F, G) we get angle(F, E, midpoint(E, G)) == angle(C, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), D, G, F, I, H we get angle(F, I, H) == angle(midpoint(F, G), D, G) mod 360
By divide_by_2_mod_180_v0 on E, B, midpoint(E, G), E, B, D we get angle(E, B, D) == angle(E, B, midpoint(E, G)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on H, E, midpoint(E, I) we get not_collinear(E, H, midpoint(E, I)), exists(Line(E, midpoint(E, I)))
By divide_by_2_mod_180_v0 on midpoint(F, G), F, H, A, G, F we get angle(A, G, F) == angle(midpoint(F, G), F, H) mod 360
By divide_by_2_mod_180_v1 on B, E, midpoint(E, G), C, E, G we get angle(C, E, G) + 180 == angle(B, E, midpoint(E, G)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(F, G), midpoint(E, G), H we get not_collinear(H, midpoint(E, G), midpoint(F, G)), exists(Line(H, midpoint(E, G)))
By reverse_direction on D, midpoint(F, G) we get 180 == direction(D, midpoint(F, G)) - direction(midpoint(F, G), D) mod 360
By divide_by_2_mod_180_v0 on H, E, midpoint(E, G), C, E, I we get angle(C, E, I) == angle(H, E, midpoint(E, G)) mod 360
By sas_similarity on D, midpoint(E, G), G, G, midpoint(E, G), B we get similar_triangles(B, G, midpoint(E, G), G, D, midpoint(E, G))
By divide_by_2_mod_180_v0 on midpoint(F, G), F, A, A, D, F we get angle(A, D, F) == angle(midpoint(F, G), F, A) mod 360
By divide_by_2_mod_180_v0 on A, F, midpoint(F, G), F, D, A we get angle(F, D, A) == angle(A, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on H, E, B, midpoint(E, G), E, I we get angle(H, E, B) == angle(midpoint(E, G), E, I) + 180 mod 360
By divide_by_2_mod_180_v1 on B, G, midpoint(F, G), H, I, F we get angle(H, I, F) + 180 == angle(B, G, midpoint(F, G)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, G), F, midpoint(F, G) we get not_collinear(F, midpoint(E, G), midpoint(F, G)), exists(Line(F, midpoint(F, G)))
By divide_by_2_mod_180_v0 on D, E, G, D, E, midpoint(E, G) we get angle(D, E, G) == angle(D, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), G, E, F, I, E we get angle(F, I, E) == angle(midpoint(F, G), G, E) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), G, F, E, F, J we get angle(E, F, J) == angle(midpoint(E, G), G, F) mod 360
By divide_by_2_mod_180_v1 on C, E, midpoint(E, G), E, D, midpoint(E, G) we get angle(C, E, midpoint(E, G)) == angle(E, D, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on H, F, midpoint(F, G), F, E, midpoint(E, G) we get angle(F, E, midpoint(E, G)) == angle(H, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on H, D, C, midpoint(F, G), D, F we get angle(H, D, C) == angle(midpoint(F, G), D, F) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(F, G), midpoint(E, G), B we get not_collinear(B, midpoint(E, G), midpoint(F, G)), exists(Line(B, midpoint(E, G)))
By divide_by_2_mod_180_v0 on E, F, C, E, G, midpoint(F, G) we get angle(E, F, C) == angle(E, G, midpoint(F, G)) mod 360
By directions_draw_angle on projection(F, j), E, I we get exists(angle(projection(F, j), E, I))
By divide_by_2_mod_180_v0 on A, F, G, midpoint(F, G), G, A we get angle(A, F, G) == angle(midpoint(F, G), G, A) mod 360
By directions_draw_angle on D, I, midpoint(E, I) we get exists(angle(D, I, midpoint(E, I)))
By divide_by_2_mod_180_v1 on B, D, A, E, G, midpoint(F, G) we get angle(B, D, A) == angle(E, G, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on I, E, B, I, G, midpoint(E, G) we get angle(I, E, B) == angle(I, G, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on F, D, midpoint(F, G), F, D, A we get angle(F, D, A) == angle(F, D, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on H, D, E, midpoint(E, G), E, B we get angle(H, D, E) == angle(midpoint(E, G), E, B) + 180 mod 360
By divide_by_2_mod_180_v1 on C, E, G, midpoint(E, G), D, G we get angle(C, E, G) == angle(midpoint(E, G), D, G) + 180 mod 360
By divide_by_2_mod_180_v1 on F, D, midpoint(F, G), C, F, midpoint(F, G) we get angle(F, D, midpoint(F, G)) == angle(C, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), E, I, midpoint(F, G), F, I we get angle(midpoint(E, G), E, I) == angle(midpoint(F, G), F, I) mod 360
By divide_by_2_mod_180_v0 on D, B, C, G, B, midpoint(E, G) we get angle(D, B, C) == angle(G, B, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on F, D, A, midpoint(F, G), G, A we get angle(F, D, A) == angle(midpoint(F, G), G, A) mod 360
By divide_by_2_mod_180_v0 on B, G, midpoint(F, G), G, F, C we get angle(G, F, C) == angle(B, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on E, I, G, midpoint(E, G), G, A we get angle(E, I, G) == angle(midpoint(E, G), G, A) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), H, G, B, H, I we get angle(B, H, I) == angle(midpoint(E, G), H, G) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), G, D, D, B, G we get angle(D, B, G) == angle(midpoint(E, G), G, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(F, G), midpoint(E, F), F we get not_collinear(F, midpoint(E, F), midpoint(F, G)), exists(Line(F, midpoint(E, F)))
By divide_by_2_mod_180_v1 on F, I, G, midpoint(F, G), G, A we get angle(F, I, G) == angle(midpoint(F, G), G, A) + 180 mod 360
By divide_by_2_mod_180_v0 on G, A, midpoint(F, G), D, A, J we get angle(D, A, J) == angle(G, A, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on A, F, G, midpoint(F, G), D, G we get angle(A, F, G) == angle(midpoint(F, G), D, G) mod 360
By divide_by_2_mod_180_v1 on A, D, G, J, F, midpoint(F, G) we get angle(A, D, G) == angle(J, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on E, G, B, midpoint(E, G), D, G we get angle(E, G, B) == angle(midpoint(E, G), D, G) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), D, E, H, I, E we get angle(H, I, E) + 180 == angle(midpoint(E, G), D, E) mod 360
By divide_by_2_mod_180_v0 on F, E, I, midpoint(F, G), G, H we get angle(F, E, I) == angle(midpoint(F, G), G, H) mod 360
By divide_by_2_mod_180_v0 on G, B, midpoint(E, G), G, E, D we get angle(G, E, D) == angle(G, B, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on B, E, midpoint(E, G), B, E, G we get angle(B, E, G) == angle(B, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), D, E, A, D, C we get angle(A, D, C) + 180 == angle(midpoint(E, G), D, E) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), E, C, H, D, E we get angle(H, D, E) == angle(midpoint(E, G), E, C) mod 360
By divide_by_2_mod_180_v0 on A, B, H, midpoint(E, G), B, E we get angle(A, B, H) == angle(midpoint(E, G), B, E) mod 360
By divide_by_2_mod_180_v0 on E, D, midpoint(E, G), E, F, midpoint(F, G) we get angle(E, D, midpoint(E, G)) == angle(E, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on C, D, A, E, D, midpoint(E, G) we get angle(C, D, A) == angle(E, D, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on G, F, A, A, G, midpoint(F, G) we get angle(G, F, A) == angle(A, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on J, F, midpoint(F, G), midpoint(F, G), D, G we get angle(J, F, midpoint(F, G)) == angle(midpoint(F, G), D, G) + 180 mod 360
By divide_by_2_mod_180_v0 on E, F, midpoint(F, G), B, E, G we get angle(B, E, G) == angle(E, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on E, F, midpoint(F, G), C, D, A we get angle(C, D, A) + 180 == angle(E, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on G, B, H, G, B, midpoint(E, G) we get angle(G, B, H) == angle(G, B, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), G, H, C, F, I we get angle(C, F, I) + 180 == angle(midpoint(F, G), G, H) mod 360
By divide_by_2_mod_180_v0 on G, B, H, midpoint(E, G), B, E we get angle(G, B, H) == angle(midpoint(E, G), B, E) mod 360
By divide_by_2_mod_180_v1 on A, F, midpoint(F, G), F, I, G we get angle(F, I, G) + 180 == angle(A, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on F, A, midpoint(F, G), midpoint(F, G), G, D we get angle(F, A, midpoint(F, G)) == angle(midpoint(F, G), G, D) mod 360
By divide_by_2_mod_180_v1 on B, G, F, A, G, midpoint(F, G) we get angle(B, G, F) == angle(A, G, midpoint(F, G)) + 180 mod 360
By reverse_direction on B, midpoint(E, G) we get 180 == direction(B, midpoint(E, G)) - direction(midpoint(E, G), B) mod 360
By divide_by_2_mod_180_v0 on E, D, B, midpoint(E, G), G, B we get angle(E, D, B) == angle(midpoint(E, G), G, B) mod 360
By divide_by_2_mod_180_v1 on E, F, A, midpoint(E, G), G, F we get angle(E, F, A) == angle(midpoint(E, G), G, F) + 180 mod 360
By directions_draw_angle on H, D, midpoint(F, G) we get exists(angle(H, D, midpoint(F, G)))
By divide_by_2_mod_180_v0 on B, E, midpoint(E, G), E, I, G we get angle(E, I, G) == angle(B, E, midpoint(E, G)) mod 360
By directions_draw_angle on midpoint(E, I), I, H we get exists(angle(midpoint(E, I), I, H))
By divide_by_2_mod_180_v1 on G, D, midpoint(E, G), A, D, C we get angle(A, D, C) + 180 == angle(G, D, midpoint(E, G)) mod 360
By reverse_direction on midpoint(F, G), A we get 180 == direction(midpoint(F, G), A) - direction(A, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on C, F, midpoint(F, G), midpoint(F, G), D, G we get angle(C, F, midpoint(F, G)) == angle(midpoint(F, G), D, G) + 180 mod 360
By sas_anti_similarity on A, midpoint(F, G), F, G, midpoint(F, G), D we get anti_similar_triangles(A, F, midpoint(F, G), G, D, midpoint(F, G))
By divide_by_2_mod_180_v1 on E, F, midpoint(F, G), E, I, H we get angle(E, I, H) + 180 == angle(E, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), E, F, midpoint(F, G), F, J we get angle(midpoint(E, G), E, F) == angle(midpoint(F, G), F, J) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), F, E, G, E, C we get angle(G, E, C) + 180 == angle(midpoint(F, G), F, E) mod 360
By divide_by_2_mod_180_v1 on H, G, midpoint(E, G), I, F, E we get angle(I, F, E) + 180 == angle(H, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on H, D, G, E, F, midpoint(F, G) we get angle(H, D, G) == angle(E, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on H, F, G, midpoint(F, G), G, B we get angle(H, F, G) == angle(midpoint(F, G), G, B) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), G, B, F, D, A we get angle(F, D, A) + 180 == angle(midpoint(F, G), G, B) mod 360
By divide_by_2_mod_180_v0 on E, D, H, C, E, midpoint(E, G) we get angle(E, D, H) == angle(C, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), G, B, B, D, G we get angle(B, D, G) == angle(midpoint(E, G), G, B) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on B, midpoint(E, I), I we get not_collinear(B, I, midpoint(E, I)), exists(Line(I, midpoint(E, I)))
By divide_by_2_mod_180_v1 on midpoint(E, G), G, A, E, F, G we get angle(E, F, G) + 180 == angle(midpoint(E, G), G, A) mod 360
By divide_by_2_mod_180_v1 on G, D, midpoint(E, G), H, D, E we get angle(H, D, E) + 180 == angle(G, D, midpoint(E, G)) mod 360
By line_containment_inequality on midpoint(E, I), J, Line(E, I) we get J != midpoint(E, I)
By divide_by_2_mod_180_v1 on G, D, midpoint(F, G), midpoint(F, G), F, C we get angle(G, D, midpoint(F, G)) == angle(midpoint(F, G), F, C) + 180 mod 360
By divide_by_2_mod_180_v1 on F, I, H, J, F, midpoint(F, G) we get angle(F, I, H) == angle(J, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), G, D, F, A, D we get angle(F, A, D) == angle(midpoint(F, G), G, D) mod 360
By sas_anti_similarity on D, midpoint(F, G), G, F, midpoint(F, G), A we get anti_similar_triangles(A, F, midpoint(F, G), G, D, midpoint(F, G))
By directions_draw_angle on midpoint(E, F), E, J we get exists(angle(midpoint(E, F), E, J))
By divide_by_2_mod_180_v0 on E, F, midpoint(F, G), E, G, B we get angle(E, G, B) == angle(E, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on B, G, F, midpoint(F, G), F, H we get angle(B, G, F) == angle(midpoint(F, G), F, H) + 180 mod 360
By divide_by_2_mod_180_v1 on J, F, midpoint(F, G), F, I, H we get angle(F, I, H) + 180 == angle(J, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), F, J, A, D, F we get angle(A, D, F) + 180 == angle(midpoint(F, G), F, J) mod 360
By divide_by_2_mod_180_v0 on G, I, E, midpoint(E, G), D, E we get angle(G, I, E) == angle(midpoint(E, G), D, E) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), D, F, G, F, C we get angle(G, F, C) + 180 == angle(midpoint(F, G), D, F) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, G), A, J we get not_collinear(A, J, midpoint(E, G)), exists(Line(A, J))
By line_containment_inequality on line_circle_tangent_point(h, c), E, h we get E != line_circle_tangent_point(h, c)
By divide_by_2_mod_180_v1 on midpoint(F, G), F, H, G, I, F we get angle(G, I, F) + 180 == angle(midpoint(F, G), F, H) mod 360
By directions_draw_angle on midpoint(E, G), D, midpoint(F, G) we get exists(angle(midpoint(E, G), D, midpoint(F, G)))
By divide_by_2_mod_180_v1 on G, F, C, midpoint(E, G), E, F we get angle(G, F, C) == angle(midpoint(E, G), E, F) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), E, B, midpoint(F, G), F, E we get angle(midpoint(E, G), E, B) == angle(midpoint(F, G), F, E) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), E, D, G, B, midpoint(E, G) we get angle(G, B, midpoint(E, G)) == angle(midpoint(E, G), E, D) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), B, E, G, E, D we get angle(G, E, D) == angle(midpoint(E, G), B, E) mod 360
By divide_by_2_mod_180_v1 on H, F, E, midpoint(F, G), G, E we get angle(H, F, E) == angle(midpoint(F, G), G, E) + 180 mod 360
By directions_draw_angle on H, E, midpoint(E, F) we get exists(angle(H, E, midpoint(E, F)))
By sas_similarity on D, midpoint(F, G), G, G, midpoint(F, G), A we get similar_triangles(A, G, midpoint(F, G), G, D, midpoint(F, G))
By divide_by_2_mod_180_v1 on B, D, C, midpoint(F, G), D, F we get angle(B, D, C) == angle(midpoint(F, G), D, F) + 180 mod 360
By divide_by_2_mod_180_v0 on C, B, H, midpoint(E, G), G, D we get angle(C, B, H) == angle(midpoint(E, G), G, D) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), E, F, G, F, A we get angle(G, F, A) == angle(midpoint(E, G), E, F) mod 360
By divide_by_2_mod_180_v1 on H, D, C, midpoint(F, G), F, C we get angle(H, D, C) == angle(midpoint(F, G), F, C) + 180 mod 360
By not_in_line_equivalent_to_not_collinear_v0 on B, C, midpoint(E, F) we get not_collinear(B, C, midpoint(E, F)), exists(Line(C, midpoint(E, F)))
By divide_by_2_mod_180_v1 on B, G, midpoint(F, G), H, D, C we get angle(H, D, C) + 180 == angle(B, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on E, B, H, midpoint(E, G), B, G we get angle(E, B, H) == angle(midpoint(E, G), B, G) mod 360
By divide_by_2_mod_180_v1 on G, E, C, B, G, midpoint(E, G) we get angle(G, E, C) == angle(B, G, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on D, H, E, G, H, midpoint(E, G) we get angle(D, H, E) == angle(G, H, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on F, E, midpoint(E, G), A, F, midpoint(F, G) we get angle(A, F, midpoint(F, G)) == angle(F, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), G, B, E, I, G we get angle(E, I, G) == angle(midpoint(E, G), G, B) mod 360
By divide_by_2_mod_180_v1 on A, G, F, midpoint(F, G), F, C we get angle(A, G, F) == angle(midpoint(F, G), F, C) + 180 mod 360
By divide_by_2_mod_180_v0 on F, E, G, midpoint(F, G), G, A we get angle(F, E, G) == angle(midpoint(F, G), G, A) mod 360
By divide_by_2_mod_180_v1 on E, G, midpoint(F, G), B, D, A we get angle(B, D, A) + 180 == angle(E, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on F, A, midpoint(F, G), D, F, G we get angle(D, F, G) == angle(F, A, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), G, D, H, A, D we get angle(H, A, D) == angle(midpoint(F, G), G, D) mod 360
By divide_by_2_mod_180_v0 on B, E, G, midpoint(E, G), D, G we get angle(B, E, G) == angle(midpoint(E, G), D, G) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), F, J, midpoint(F, G), D, F we get angle(midpoint(F, G), F, J) == angle(midpoint(F, G), D, F) + 180 mod 360
By divide_by_2_mod_180_v0 on D, A, G, midpoint(F, G), G, D we get angle(D, A, G) == angle(midpoint(F, G), G, D) mod 360
By divide_by_2_mod_180_v1 on C, E, midpoint(E, G), E, F, G we get angle(E, F, G) + 180 == angle(C, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), F, C, G, F, A we get angle(G, F, A) + 180 == angle(midpoint(F, G), F, C) mod 360
By divide_by_2_mod_180_v0 on C, D, H, H, F, midpoint(F, G) we get angle(C, D, H) == angle(H, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on G, D, midpoint(F, G), G, I, F we get angle(G, I, F) + 180 == angle(G, D, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), G, A, E, D, H we get angle(E, D, H) == angle(midpoint(E, G), G, A) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on G, midpoint(E, F), E we get not_collinear(E, G, midpoint(E, F)), exists(Line(E, midpoint(E, F)))
By divide_by_2_mod_180_v0 on F, G, midpoint(E, G), F, D, C we get angle(F, D, C) == angle(F, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), E, B, G, D, H we get angle(G, D, H) + 180 == angle(midpoint(E, G), E, B) mod 360
By divide_by_2_mod_180_v0 on I, G, A, I, E, midpoint(E, G) we get angle(I, G, A) == angle(I, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), D, G, midpoint(E, G), G, A we get angle(midpoint(E, G), D, G) == angle(midpoint(E, G), G, A) + 180 mod 360
By divide_by_2_mod_180_v0 on E, D, B, E, F, midpoint(F, G) we get angle(E, D, B) == angle(E, F, midpoint(F, G)) mod 360
By directions_draw_angle on projection(F, j), F, projection(F, Line(D, J)) we get exists(angle(projection(F, j), F, projection(F, Line(D, J))))
By divide_by_2_mod_180_v1 on C, F, midpoint(F, G), A, F, G we get angle(A, F, G) + 180 == angle(C, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on G, E, C, midpoint(F, G), F, E we get angle(G, E, C) == angle(midpoint(F, G), F, E) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), D, G, C, F, midpoint(F, G) we get angle(midpoint(F, G), D, G) == angle(C, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on H, G, midpoint(E, G), I, E, B we get angle(I, E, B) + 180 == angle(H, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on G, F, J, midpoint(F, G), D, F we get angle(G, F, J) == angle(midpoint(F, G), D, F) + 180 mod 360
By divide_by_2_mod_180_v0 on F, I, H, F, E, midpoint(E, G) we get angle(F, I, H) == angle(F, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on D, B, G, E, B, midpoint(E, G) we get angle(D, B, G) == angle(E, B, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on H, D, C, G, D, midpoint(F, G) we get angle(H, D, C) == angle(G, D, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on J, F, midpoint(F, G), C, D, H we get angle(C, D, H) + 180 == angle(J, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), G, B, H, D, G we get angle(H, D, G) + 180 == angle(midpoint(E, G), G, B) mod 360
By divide_by_2_mod_180_v0 on J, F, E, midpoint(F, G), G, E we get angle(J, F, E) == angle(midpoint(F, G), G, E) mod 360
By directions_draw_angle on projection(F, j), F, I we get exists(angle(projection(F, j), F, I))
By divide_by_2_mod_180_v1 on I, F, E, I, G, midpoint(E, G) we get angle(I, F, E) == angle(I, G, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on G, E, C, midpoint(E, G), D, E we get angle(G, E, C) == angle(midpoint(E, G), D, E) + 180 mod 360
By divide_by_2_mod_180_v0 on D, A, H, midpoint(F, G), A, F we get angle(D, A, H) == angle(midpoint(F, G), A, F) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on H, I, midpoint(E, I) we get not_collinear(H, I, midpoint(E, I)), exists(Line(I, midpoint(E, I)))
By divide_by_2_mod_180_v1 on midpoint(F, G), G, A, C, F, G we get angle(C, F, G) + 180 == angle(midpoint(F, G), G, A) mod 360
By divide_by_2_mod_180_v1 on B, G, F, G, D, midpoint(F, G) we get angle(B, G, F) == angle(G, D, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on B, G, midpoint(F, G), A, D, F we get angle(A, D, F) + 180 == angle(B, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), F, E, G, D, B we get angle(G, D, B) == angle(midpoint(F, G), F, E) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), D, F, G, F, A we get angle(G, F, A) == angle(midpoint(F, G), D, F) mod 360
By divide_by_2_mod_180_v0 on E, G, I, midpoint(E, G), G, H we get angle(E, G, I) == angle(midpoint(E, G), G, H) mod 360
By divide_by_2_mod_180_v0 on E, F, G, E, D, midpoint(E, G) we get angle(E, F, G) == angle(E, D, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on I, F, midpoint(F, G), I, G, A we get angle(I, G, A) == angle(I, F, midpoint(F, G)) mod 360
By directions_draw_angle on projection(F, j), E, midpoint(E, G) we get exists(angle(projection(F, j), E, midpoint(E, G)))
By divide_by_2_mod_180_v1 on midpoint(F, G), F, C, midpoint(F, G), D, F we get angle(midpoint(F, G), F, C) == angle(midpoint(F, G), D, F) + 180 mod 360
By directions_draw_angle on midpoint(E, F), F, A we get exists(angle(midpoint(E, F), F, A))
By directions_draw_angle on G, F, projection(F, Line(D, J)) we get exists(angle(G, F, projection(F, Line(D, J))))
By divide_by_2_mod_180_v1 on H, F, midpoint(F, G), C, F, G we get angle(C, F, G) + 180 == angle(H, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), G, B, E, I, H we get angle(E, I, H) + 180 == angle(midpoint(E, G), G, B) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), E, I, H, E, C we get angle(H, E, C) == angle(midpoint(E, G), E, I) mod 360
By sas_similarity on B, midpoint(E, G), E, E, midpoint(E, G), D we get similar_triangles(B, E, midpoint(E, G), E, D, midpoint(E, G))
By divide_by_2_mod_180_v1 on C, E, midpoint(E, G), E, I, G we get angle(E, I, G) + 180 == angle(C, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on F, E, G, midpoint(F, G), G, B we get angle(F, E, G) == angle(midpoint(F, G), G, B) + 180 mod 360
By directions_draw_angle on J, F, projection(F, j) we get exists(angle(J, F, projection(F, j)))
By divide_by_2_mod_180_v0 on D, A, J, midpoint(F, G), F, D we get angle(D, A, J) == angle(midpoint(F, G), F, D) mod 360
By divide_by_2_mod_180_v0 on A, G, midpoint(F, G), H, I, F we get angle(H, I, F) == angle(A, G, midpoint(F, G)) mod 360
By directions_draw_angle on midpoint(F, G), D, I we get exists(angle(midpoint(F, G), D, I))
By divide_by_2_mod_180_v0 on midpoint(E, G), E, C, A, D, C we get angle(A, D, C) == angle(midpoint(E, G), E, C) mod 360
By divide_by_2_mod_180_v1 on B, E, I, H, E, midpoint(E, G) we get angle(B, E, I) == angle(H, E, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), D, E, G, E, B we get angle(G, E, B) == angle(midpoint(E, G), D, E) mod 360
By divide_by_2_mod_180_v1 on A, G, F, B, G, midpoint(F, G) we get angle(A, G, F) == angle(B, G, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on I, G, midpoint(F, G), H, G, F we get angle(H, G, F) == angle(I, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on A, G, midpoint(F, G), G, I, F we get angle(G, I, F) + 180 == angle(A, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on A, D, H, midpoint(F, G), G, E we get angle(A, D, H) == angle(midpoint(F, G), G, E) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), G, I, B, E, I we get angle(B, E, I) + 180 == angle(midpoint(E, G), G, I) mod 360
By divide_by_2_mod_180_v1 on G, D, midpoint(E, G), A, G, midpoint(E, G) we get angle(G, D, midpoint(E, G)) == angle(A, G, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on B, G, E, A, G, midpoint(E, G) we get angle(B, G, E) == angle(A, G, midpoint(E, G)) + 180 mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(F, G), I, H we get not_collinear(H, I, midpoint(F, G)), exists(Line(H, I))
By divide_by_2_mod_180_v0 on E, F, J, E, G, midpoint(F, G) we get angle(E, F, J) == angle(E, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), E, F, G, F, J we get angle(G, F, J) + 180 == angle(midpoint(E, G), E, F) mod 360
By divide_by_2_mod_180_v0 on G, F, H, G, D, midpoint(F, G) we get angle(G, F, H) == angle(G, D, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), E, B, H, I, E we get angle(H, I, E) + 180 == angle(midpoint(E, G), E, B) mod 360
By sas_anti_similarity on D, midpoint(E, G), G, E, midpoint(E, G), B we get anti_similar_triangles(B, E, midpoint(E, G), G, D, midpoint(E, G))
By divide_by_2_mod_180_v1 on E, D, B, C, E, midpoint(E, G) we get angle(E, D, B) == angle(C, E, midpoint(E, G)) + 180 mod 360
By directions_draw_angle on center(d), I, midpoint(E, I) we get exists(angle(center(d), I, midpoint(E, I)))
By divide_by_2_mod_180_v1 on F, D, midpoint(F, G), J, F, G we get angle(J, F, G) + 180 == angle(F, D, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on A, F, G, J, F, midpoint(F, G) we get angle(A, F, G) == angle(J, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on E, D, midpoint(E, G), E, D, H we get angle(E, D, H) + 180 == angle(E, D, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on G, F, E, A, G, midpoint(E, G) we get angle(G, F, E) == angle(A, G, midpoint(E, G)) + 180 mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, G), A, midpoint(F, G) we get not_collinear(A, midpoint(E, G), midpoint(F, G)), exists(Line(A, midpoint(F, G)))
By divide_by_2_mod_180_v1 on I, F, midpoint(F, G), H, G, B we get angle(H, G, B) + 180 == angle(I, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), G, B, F, E, G we get angle(F, E, G) + 180 == angle(midpoint(F, G), G, B) mod 360
By directions_draw_angle on B, E, projection(F, j) we get exists(angle(B, E, projection(F, j)))
By divide_by_2_mod_180_v1 on G, I, F, midpoint(F, G), D, F we get angle(G, I, F) == angle(midpoint(F, G), D, F) + 180 mod 360
By divide_by_2_mod_180_v1 on F, I, G, H, F, midpoint(F, G) we get angle(F, I, G) == angle(H, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on G, F, J, A, G, midpoint(F, G) we get angle(G, F, J) == angle(A, G, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), B, E, A, B, D we get angle(A, B, D) == angle(midpoint(E, G), B, E) mod 360
By divide_by_2_mod_180_v1 on E, D, H, B, E, midpoint(E, G) we get angle(E, D, H) == angle(B, E, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on G, F, H, midpoint(F, G), F, C we get angle(G, F, H) == angle(midpoint(F, G), F, C) + 180 mod 360
By divide_by_2_mod_180_v0 on D, G, F, G, A, midpoint(F, G) we get angle(D, G, F) == angle(G, A, midpoint(F, G)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(F, G), midpoint(E, F), C we get not_collinear(C, midpoint(E, F), midpoint(F, G)), exists(Line(C, midpoint(E, F)))
By divide_by_2_mod_180_v0 on F, I, H, H, F, midpoint(F, G) we get angle(F, I, H) == angle(H, F, midpoint(F, G)) mod 360
By directions_draw_angle on midpoint(E, I), I, J we get exists(angle(midpoint(E, I), I, J))
By divide_by_2_mod_180_v0 on H, E, C, midpoint(F, G), F, I we get angle(H, E, C) == angle(midpoint(F, G), F, I) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), A, G, D, F, G we get angle(D, F, G) == angle(midpoint(F, G), A, G) mod 360
By divide_by_2_mod_180_v1 on A, D, B, midpoint(F, G), G, E we get angle(A, D, B) == angle(midpoint(F, G), G, E) + 180 mod 360
By divide_by_2_mod_180_v0 on J, F, G, J, F, midpoint(F, G) we get angle(J, F, G) == angle(J, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), D, G, C, D, A we get angle(C, D, A) + 180 == angle(midpoint(E, G), D, G) mod 360
By divide_by_2_mod_180_v1 on E, D, midpoint(E, G), C, E, midpoint(E, G) we get angle(E, D, midpoint(E, G)) == angle(C, E, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on F, G, B, F, D, midpoint(F, G) we get angle(F, G, B) == angle(F, D, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on I, F, midpoint(F, G), C, E, H we get angle(C, E, H) == angle(I, F, midpoint(F, G)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on J, midpoint(E, F), F we get not_collinear(F, J, midpoint(E, F)), exists(Line(F, midpoint(E, F)))
By divide_by_2_mod_180_v1 on midpoint(F, G), F, I, B, G, I we get angle(B, G, I) + 180 == angle(midpoint(F, G), F, I) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), E, H, I, G, E we get angle(I, G, E) == angle(midpoint(E, G), E, H) mod 360
By directions_draw_angle on J, E, midpoint(E, F) we get exists(angle(J, E, midpoint(E, F)))
By divide_by_2_mod_180_v1 on E, F, I, H, E, midpoint(E, G) we get angle(E, F, I) == angle(H, E, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on C, D, B, H, F, midpoint(F, G) we get angle(C, D, B) == angle(H, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), G, F, C, E, F we get angle(C, E, F) == angle(midpoint(E, G), G, F) mod 360
By divide_by_2_mod_180_v1 on F, I, G, A, F, midpoint(F, G) we get angle(F, I, G) == angle(A, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on F, D, midpoint(F, G), F, G, B we get angle(F, G, B) + 180 == angle(F, D, midpoint(F, G)) mod 360
By reverse_direction on midpoint(E, G), D we get 180 == direction(midpoint(E, G), D) - direction(D, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on I, G, midpoint(E, G), I, G, E we get angle(I, G, E) == angle(I, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on J, F, G, midpoint(F, G), G, A we get angle(J, F, G) == angle(midpoint(F, G), G, A) + 180 mod 360
By directions_draw_angle on C, E, midpoint(E, F) we get exists(angle(C, E, midpoint(E, F)))
By divide_by_2_mod_180_v0 on A, G, midpoint(E, G), H, D, E we get angle(H, D, E) == angle(A, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on H, F, G, C, F, midpoint(F, G) we get angle(H, F, G) == angle(C, F, midpoint(F, G)) + 180 mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, G), midpoint(E, F), D we get not_collinear(D, midpoint(E, F), midpoint(E, G)), exists(Line(D, midpoint(E, F)))
By divide_by_2_mod_180_v0 on D, G, midpoint(F, G), D, A, F we get angle(D, A, F) == angle(D, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on H, D, G, E, D, midpoint(E, G) we get angle(H, D, G) == angle(E, D, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), E, B, A, D, C we get angle(A, D, C) + 180 == angle(midpoint(E, G), E, B) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), G, B, C, D, A we get angle(C, D, A) + 180 == angle(midpoint(E, G), G, B) mod 360
By divide_by_2_mod_180_v1 on A, D, G, midpoint(F, G), G, B we get angle(A, D, G) == angle(midpoint(F, G), G, B) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), E, D, H, B, C we get angle(H, B, C) == angle(midpoint(E, G), E, D) mod 360
By directions_draw_angle on B, E, midpoint(E, F) we get exists(angle(B, E, midpoint(E, F)))
By divide_by_2_mod_180_v1 on I, F, midpoint(F, G), B, E, H we get angle(B, E, H) + 180 == angle(I, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on G, D, midpoint(F, G), B, G, midpoint(F, G) we get angle(G, D, midpoint(F, G)) == angle(B, G, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), F, E, A, G, E we get angle(A, G, E) + 180 == angle(midpoint(F, G), F, E) mod 360
By divide_by_2_mod_180_v1 on H, G, B, I, E, midpoint(E, G) we get angle(H, G, B) == angle(I, E, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on H, I, E, midpoint(F, G), F, E we get angle(H, I, E) == angle(midpoint(F, G), F, E) + 180 mod 360
By directions_draw_angle on C, E, projection(F, j) we get exists(angle(C, E, projection(F, j)))
By divide_by_2_mod_180_v0 on F, E, midpoint(E, G), A, F, G we get angle(A, F, G) == angle(F, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on C, F, midpoint(F, G), F, E, G we get angle(F, E, G) + 180 == angle(C, F, midpoint(F, G)) mod 360
By directions_draw_angle on midpoint(E, I), I, F we get exists(angle(midpoint(E, I), I, F))
By divide_by_2_mod_180_v1 on H, D, C, B, G, midpoint(F, G) we get angle(H, D, C) == angle(B, G, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), H, G, E, I, D we get angle(E, I, D) == angle(midpoint(E, G), H, G) mod 360
By directions_draw_angle on midpoint(E, G), D, A we get exists(angle(midpoint(E, G), D, A))
By divide_by_2_mod_180_v1 on G, D, H, B, G, midpoint(E, G) we get angle(G, D, H) == angle(B, G, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on I, G, midpoint(E, G), G, E, H we get angle(G, E, H) == angle(I, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on F, D, midpoint(F, G), F, E, G we get angle(F, E, G) == angle(F, D, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), G, I, A, F, I we get angle(A, F, I) == angle(midpoint(F, G), G, I) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), F, A, G, D, midpoint(F, G) we get angle(G, D, midpoint(F, G)) == angle(midpoint(F, G), F, A) mod 360
By divide_by_2_mod_180_v0 on A, G, midpoint(E, G), G, E, C we get angle(G, E, C) == angle(A, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on C, D, H, midpoint(F, G), G, B we get angle(C, D, H) == angle(midpoint(F, G), G, B) + 180 mod 360
By divide_by_2_mod_180_v1 on E, I, G, C, E, midpoint(E, G) we get angle(E, I, G) == angle(C, E, midpoint(E, G)) + 180 mod 360
By not_in_line_equivalent_to_not_collinear_v0 on G, C, midpoint(E, F) we get not_collinear(C, G, midpoint(E, F)), exists(Line(C, midpoint(E, F)))
By divide_by_2_mod_180_v0 on E, I, G, E, D, midpoint(E, G) we get angle(E, I, G) == angle(E, D, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), E, B, A, G, E we get angle(A, G, E) + 180 == angle(midpoint(E, G), E, B) mod 360
By divide_by_2_mod_180_v1 on G, F, J, midpoint(E, G), E, F we get angle(G, F, J) == angle(midpoint(E, G), E, F) + 180 mod 360
By divide_by_2_mod_180_v1 on A, D, F, midpoint(F, G), F, C we get angle(A, D, F) == angle(midpoint(F, G), F, C) + 180 mod 360
By divide_by_2_mod_180_v0 on E, G, A, C, E, midpoint(E, G) we get angle(E, G, A) == angle(C, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on E, F, G, midpoint(E, G), G, A we get angle(E, F, G) == angle(midpoint(E, G), G, A) + 180 mod 360
By reverse_direction on E, midpoint(E, I) we get 180 == direction(E, midpoint(E, I)) - direction(midpoint(E, I), E) mod 360
By divide_by_2_mod_180_v1 on E, I, H, B, E, midpoint(E, G) we get angle(E, I, H) == angle(B, E, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on C, F, midpoint(F, G), F, D, midpoint(F, G) we get angle(C, F, midpoint(F, G)) == angle(F, D, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on E, F, midpoint(F, G), midpoint(E, G), D, G we get angle(E, F, midpoint(F, G)) == angle(midpoint(E, G), D, G) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), G, F, E, F, C we get angle(E, F, C) == angle(midpoint(E, G), G, F) mod 360
By divide_by_2_mod_180_v0 on J, E, midpoint(E, G), J, E, G we get angle(J, E, G) == angle(J, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), G, F, B, D, A we get angle(B, D, A) + 180 == angle(midpoint(E, G), G, F) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), D, E, G, D, B we get angle(G, D, B) == angle(midpoint(E, G), D, E) mod 360
By divide_by_2_mod_180_v0 on D, G, midpoint(F, G), D, A, J we get angle(D, A, J) == angle(D, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on I, F, J, H, G, midpoint(F, G) we get angle(I, F, J) == angle(H, G, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on D, A, J, midpoint(F, G), A, F we get angle(D, A, J) == angle(midpoint(F, G), A, F) mod 360
By directions_draw_angle on midpoint(E, I), E, J we get exists(angle(midpoint(E, I), E, J))
By divide_by_2_mod_180_v0 on C, B, H, midpoint(E, G), B, G we get angle(C, B, H) == angle(midpoint(E, G), B, G) mod 360
By directions_draw_angle on projection(F, j), G, B we get exists(angle(projection(F, j), G, B))
By divide_by_2_mod_180_v1 on midpoint(F, G), F, H, B, D, C we get angle(B, D, C) + 180 == angle(midpoint(F, G), F, H) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on A, midpoint(E, I), E we get not_collinear(A, E, midpoint(E, I)), exists(Line(E, midpoint(E, I)))
By sas_similarity on G, midpoint(E, G), D, B, midpoint(E, G), G we get similar_triangles(B, G, midpoint(E, G), G, D, midpoint(E, G))
By divide_by_2_mod_180_v1 on A, G, midpoint(F, G), B, G, F we get angle(B, G, F) + 180 == angle(A, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on G, I, F, G, D, midpoint(F, G) we get angle(G, I, F) == angle(G, D, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on F, G, B, H, F, midpoint(F, G) we get angle(F, G, B) == angle(H, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on C, E, G, B, E, midpoint(E, G) we get angle(C, E, G) == angle(B, E, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on F, D, midpoint(F, G), C, D, B we get angle(C, D, B) + 180 == angle(F, D, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on I, E, midpoint(E, G), I, F, midpoint(F, G) we get angle(I, E, midpoint(E, G)) == angle(I, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on E, D, midpoint(E, G), C, D, A we get angle(C, D, A) + 180 == angle(E, D, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), F, D, D, A, F we get angle(D, A, F) == angle(midpoint(F, G), F, D) mod 360
By divide_by_2_mod_180_v1 on E, F, midpoint(F, G), E, G, A we get angle(E, G, A) + 180 == angle(E, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on G, D, A, midpoint(F, G), F, C we get angle(G, D, A) == angle(midpoint(F, G), F, C) + 180 mod 360
By not_in_line_equivalent_to_not_collinear_v0 on B, midpoint(E, I), E we get not_collinear(B, E, midpoint(E, I)), exists(Line(E, midpoint(E, I)))
By divide_by_2_mod_180_v0 on J, F, midpoint(F, G), C, D, B we get angle(C, D, B) == angle(J, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on E, G, B, C, E, midpoint(E, G) we get angle(E, G, B) == angle(C, E, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on E, D, midpoint(E, G), E, G, A we get angle(E, G, A) + 180 == angle(E, D, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), D, G, C, D, B we get angle(C, D, B) + 180 == angle(midpoint(F, G), D, G) mod 360
By divide_by_2_mod_180_v1 on I, G, B, I, E, midpoint(E, G) we get angle(I, G, B) == angle(I, E, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), D, G, J, F, G we get angle(J, F, G) + 180 == angle(midpoint(F, G), D, G) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on J, midpoint(E, F), C we get not_collinear(C, J, midpoint(E, F)), exists(Line(C, midpoint(E, F)))
By divide_by_2_mod_180_v0 on I, F, A, H, G, midpoint(F, G) we get angle(I, F, A) == angle(H, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on A, G, E, midpoint(F, G), F, E we get angle(A, G, E) == angle(midpoint(F, G), F, E) + 180 mod 360
By sas_similarity on G, midpoint(E, G), B, D, midpoint(E, G), G we get similar_triangles(B, G, midpoint(E, G), G, D, midpoint(E, G))
By divide_by_2_mod_180_v1 on I, E, midpoint(E, G), H, G, B we get angle(H, G, B) + 180 == angle(I, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on I, G, midpoint(E, G), I, E, B we get angle(I, E, B) + 180 == angle(I, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on G, I, F, midpoint(F, G), F, A we get angle(G, I, F) == angle(midpoint(F, G), F, A) + 180 mod 360
By divide_by_2_mod_180_v1 on A, G, E, B, G, midpoint(E, G) we get angle(A, G, E) == angle(B, G, midpoint(E, G)) + 180 mod 360
By sas_similarity on E, midpoint(E, G), B, D, midpoint(E, G), E we get similar_triangles(B, E, midpoint(E, G), E, D, midpoint(E, G))
By divide_by_2_mod_180_v0 on F, A, D, midpoint(F, G), A, G we get angle(F, A, D) == angle(midpoint(F, G), A, G) mod 360
By divide_by_2_mod_180_v0 on A, B, H, midpoint(E, G), E, D we get angle(A, B, H) == angle(midpoint(E, G), E, D) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), G, B, C, E, G we get angle(C, E, G) + 180 == angle(midpoint(E, G), G, B) mod 360
By divide_by_2_mod_180_v0 on F, G, midpoint(E, G), F, G, E we get angle(F, G, E) == angle(F, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on F, E, G, H, F, midpoint(F, G) we get angle(F, E, G) == angle(H, F, midpoint(F, G)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, G), J, F we get not_collinear(F, J, midpoint(E, G)), exists(Line(F, J))
By divide_by_2_mod_180_v1 on B, G, midpoint(F, G), G, F, A we get angle(G, F, A) + 180 == angle(B, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on A, G, midpoint(E, G), G, D, B we get angle(G, D, B) + 180 == angle(A, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on H, B, C, D, G, midpoint(E, G) we get angle(H, B, C) == angle(D, G, midpoint(E, G)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on D, midpoint(E, I), I we get not_collinear(D, I, midpoint(E, I)), exists(Line(I, midpoint(E, I)))
By divide_by_2_mod_180_v1 on C, D, B, A, F, midpoint(F, G) we get angle(C, D, B) == angle(A, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on G, I, F, A, G, midpoint(F, G) we get angle(G, I, F) == angle(A, G, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on G, D, midpoint(E, G), midpoint(E, G), E, B we get angle(G, D, midpoint(E, G)) == angle(midpoint(E, G), E, B) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), D, G, J, F, midpoint(F, G) we get angle(midpoint(F, G), D, G) == angle(J, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on G, B, midpoint(E, G), G, B, D we get angle(G, B, D) == angle(G, B, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on C, F, I, midpoint(F, G), G, H we get angle(C, F, I) == angle(midpoint(F, G), G, H) + 180 mod 360
By divide_by_2_mod_180_v1 on J, F, G, H, F, midpoint(F, G) we get angle(J, F, G) == angle(H, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), D, F, A, G, midpoint(F, G) we get angle(A, G, midpoint(F, G)) == angle(midpoint(F, G), D, F) mod 360
By divide_by_2_mod_180_v1 on C, F, midpoint(F, G), C, D, H we get angle(C, D, H) + 180 == angle(C, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on G, D, midpoint(E, G), B, D, E we get angle(B, D, E) == angle(G, D, midpoint(E, G)) mod 360
By directions_draw_angle on midpoint(E, F), F, J we get exists(angle(midpoint(E, F), F, J))
By divide_by_2_mod_180_v1 on midpoint(F, G), G, B, F, I, H we get angle(F, I, H) + 180 == angle(midpoint(F, G), G, B) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), B, E, D, B, C we get angle(D, B, C) == angle(midpoint(E, G), B, E) mod 360
By divide_by_2_mod_180_v0 on F, D, midpoint(F, G), F, G, A we get angle(F, G, A) == angle(F, D, midpoint(F, G)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(F, G), C, H we get not_collinear(C, H, midpoint(F, G)), exists(Line(C, H))
By directions_draw_angle on projection(F, j), F, H we get exists(angle(projection(F, j), F, H))
By line_containment_inequality on line_circle_tangent_point(h, c), G, h we get G != line_circle_tangent_point(h, c)
By divide_by_2_mod_180_v0 on D, B, A, midpoint(E, G), B, G we get angle(D, B, A) == angle(midpoint(E, G), B, G) mod 360
By reverse_direction on midpoint(E, I), E we get 180 == direction(midpoint(E, I), E) - direction(E, midpoint(E, I)) mod 360
By divide_by_2_mod_180_v1 on H, E, midpoint(E, G), B, E, I we get angle(B, E, I) + 180 == angle(H, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on B, E, midpoint(E, G), C, D, A we get angle(C, D, A) + 180 == angle(B, E, midpoint(E, G)) mod 360
By reverse_direction on H, midpoint(E, G) we get 180 == direction(H, midpoint(E, G)) - direction(midpoint(E, G), H) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), B, E, H, B, C we get angle(H, B, C) == angle(midpoint(E, G), B, E) mod 360
By divide_by_2_mod_180_v1 on G, E, B, midpoint(E, G), E, C we get angle(G, E, B) == angle(midpoint(E, G), E, C) + 180 mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, G), midpoint(E, F), C we get not_collinear(C, midpoint(E, F), midpoint(E, G)), exists(Line(C, midpoint(E, F)))
By divide_by_2_mod_180_v1 on G, F, C, G, D, midpoint(F, G) we get angle(G, F, C) == angle(G, D, midpoint(F, G)) + 180 mod 360
By sas_similarity on A, midpoint(F, G), G, G, midpoint(F, G), D we get similar_triangles(A, G, midpoint(F, G), G, D, midpoint(F, G))
By divide_by_2_mod_180_v0 on D, E, G, E, B, midpoint(E, G) we get angle(D, E, G) == angle(E, B, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on G, B, D, midpoint(E, G), B, E we get angle(G, B, D) == angle(midpoint(E, G), B, E) mod 360
By directions_draw_angle on midpoint(F, G), D, B we get exists(angle(midpoint(F, G), D, B))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, G), G, midpoint(F, G) we get not_collinear(G, midpoint(E, G), midpoint(F, G)), exists(Line(G, midpoint(F, G)))
By divide_by_2_mod_180_v0 on H, F, G, F, E, midpoint(E, G) we get angle(H, F, G) == angle(F, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), D, G, E, I, H we get angle(E, I, H) + 180 == angle(midpoint(E, G), D, G) mod 360
By divide_by_2_mod_180_v1 on E, F, midpoint(F, G), E, D, H we get angle(E, D, H) + 180 == angle(E, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), D, G, C, F, G we get angle(C, F, G) + 180 == angle(midpoint(F, G), D, G) mod 360
By divide_by_2_mod_180_v1 on G, F, J, midpoint(F, G), F, A we get angle(G, F, J) == angle(midpoint(F, G), F, A) + 180 mod 360
By divide_by_2_mod_180_v1 on F, I, G, F, D, midpoint(F, G) we get angle(F, I, G) == angle(F, D, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on H, D, G, midpoint(E, G), G, B we get angle(H, D, G) == angle(midpoint(E, G), G, B) + 180 mod 360
By divide_by_2_mod_180_v1 on C, F, midpoint(F, G), F, E, midpoint(E, G) we get angle(C, F, midpoint(F, G)) == angle(F, E, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on E, I, H, E, F, midpoint(F, G) we get angle(E, I, H) == angle(E, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), F, E, G, D, H we get angle(G, D, H) + 180 == angle(midpoint(F, G), F, E) mod 360
By divide_by_2_mod_180_v1 on F, G, B, midpoint(F, G), G, A we get angle(F, G, B) == angle(midpoint(F, G), G, A) + 180 mod 360
By divide_by_2_mod_180_v1 on F, G, B, A, F, midpoint(F, G) we get angle(F, G, B) == angle(A, F, midpoint(F, G)) + 180 mod 360
By line_inequality on Line(G, projection(F, j)), h, G we get h != Line(G, projection(F, j))
By directions_draw_angle on projection(F, j), F, J we get exists(angle(projection(F, j), F, J))
By divide_by_2_mod_180_v1 on midpoint(F, G), F, J, G, F, H we get angle(G, F, H) + 180 == angle(midpoint(F, G), F, J) mod 360
By divide_by_2_mod_180_v0 on D, E, midpoint(E, G), H, B, A we get angle(H, B, A) == angle(D, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on H, G, midpoint(F, G), I, E, F we get angle(I, E, F) == angle(H, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on G, D, A, midpoint(F, G), F, J we get angle(G, D, A) == angle(midpoint(F, G), F, J) + 180 mod 360
By directions_draw_angle on midpoint(E, F), F, H we get exists(angle(midpoint(E, F), F, H))
By divide_by_2_mod_180_v1 on midpoint(F, G), F, A, G, I, F we get angle(G, I, F) + 180 == angle(midpoint(F, G), F, A) mod 360
By divide_by_2_mod_180_v1 on J, F, midpoint(F, G), A, F, G we get angle(A, F, G) + 180 == angle(J, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on C, D, B, midpoint(F, G), D, G we get angle(C, D, B) == angle(midpoint(F, G), D, G) + 180 mod 360
By divide_by_2_mod_180_v0 on D, F, G, D, F, midpoint(F, G) we get angle(D, F, G) == angle(D, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on F, I, H, midpoint(F, G), G, B we get angle(F, I, H) == angle(midpoint(F, G), G, B) + 180 mod 360
By divide_by_2_mod_180_v1 on A, F, E, F, G, midpoint(E, G) we get angle(A, F, E) == angle(F, G, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), D, E, G, D, H we get angle(G, D, H) + 180 == angle(midpoint(E, G), D, E) mod 360
By divide_by_2_mod_180_v0 on B, D, C, midpoint(F, G), F, C we get angle(B, D, C) == angle(midpoint(F, G), F, C) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), G, H, B, E, I we get angle(B, E, I) + 180 == angle(midpoint(E, G), G, H) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), E, D, A, B, D we get angle(A, B, D) == angle(midpoint(E, G), E, D) mod 360
By divide_by_2_mod_180_v1 on H, G, B, I, F, midpoint(F, G) we get angle(H, G, B) == angle(I, F, midpoint(F, G)) + 180 mod 360
By directions_draw_angle on projection(F, j), F, C we get exists(angle(projection(F, j), F, C))
By divide_by_2_mod_180_v1 on F, G, midpoint(E, G), F, E, B we get angle(F, E, B) + 180 == angle(F, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), D, F, B, G, midpoint(F, G) we get angle(midpoint(F, G), D, F) == angle(B, G, midpoint(F, G)) + 180 mod 360
By directions_draw_angle on C, D, midpoint(F, G) we get exists(angle(C, D, midpoint(F, G)))
By divide_by_2_mod_180_v1 on H, D, E, G, D, midpoint(E, G) we get angle(H, D, E) == angle(G, D, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on C, D, H, C, F, midpoint(F, G) we get angle(C, D, H) == angle(C, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on A, G, E, midpoint(E, G), E, B we get angle(A, G, E) == angle(midpoint(E, G), E, B) + 180 mod 360
By divide_by_2_mod_180_v1 on A, G, midpoint(F, G), G, F, J we get angle(G, F, J) + 180 == angle(A, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on B, E, I, midpoint(E, G), G, H we get angle(B, E, I) == angle(midpoint(E, G), G, H) + 180 mod 360
By divide_by_2_mod_180_v1 on B, G, midpoint(F, G), A, G, F we get angle(A, G, F) + 180 == angle(B, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on I, E, B, H, G, midpoint(E, G) we get angle(I, E, B) == angle(H, G, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on E, G, A, E, F, midpoint(F, G) we get angle(E, G, A) == angle(E, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), G, A, E, G, B we get angle(E, G, B) + 180 == angle(midpoint(E, G), G, A) mod 360
By divide_by_2_mod_180_v1 on G, F, A, B, G, midpoint(F, G) we get angle(G, F, A) == angle(B, G, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on G, I, F, midpoint(E, G), E, F we get angle(G, I, F) == angle(midpoint(E, G), E, F) + 180 mod 360
By divide_by_2_mod_180_v0 on D, G, F, D, G, midpoint(F, G) we get angle(D, G, F) == angle(D, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on H, D, E, B, G, midpoint(E, G) we get angle(H, D, E) == angle(B, G, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), G, B, F, E, midpoint(E, G) we get angle(midpoint(F, G), G, B) == angle(F, E, midpoint(E, G)) + 180 mod 360
By not_in_line_equivalent_to_not_collinear_v0 on G, midpoint(E, F), D we get not_collinear(D, G, midpoint(E, F)), exists(Line(D, midpoint(E, F)))
By directions_draw_angle on A, G, projection(F, j) we get exists(angle(A, G, projection(F, j)))
By divide_by_2_mod_180_v1 on G, D, A, B, G, midpoint(F, G) we get angle(G, D, A) == angle(B, G, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), G, A, F, G, B we get angle(F, G, B) + 180 == angle(midpoint(F, G), G, A) mod 360
By divide_by_2_mod_180_v1 on G, F, J, G, D, midpoint(F, G) we get angle(G, F, J) == angle(G, D, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), E, F, B, G, midpoint(F, G) we get angle(midpoint(E, G), E, F) == angle(B, G, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on D, E, midpoint(E, G), H, B, G we get angle(H, B, G) == angle(D, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on G, D, B, midpoint(E, G), E, C we get angle(G, D, B) == angle(midpoint(E, G), E, C) + 180 mod 360
By divide_by_2_mod_180_v1 on H, G, midpoint(F, G), I, F, J we get angle(I, F, J) + 180 == angle(H, G, midpoint(F, G)) mod 360
By directions_draw_angle on projection(F, Line(D, J)), F, I we get exists(angle(projection(F, Line(D, J)), F, I))
By divide_by_2_mod_180_v1 on G, E, F, B, G, midpoint(F, G) we get angle(G, E, F) == angle(B, G, midpoint(F, G)) + 180 mod 360
By sas_similarity on D, midpoint(E, G), E, E, midpoint(E, G), B we get similar_triangles(B, E, midpoint(E, G), E, D, midpoint(E, G))
By not_in_line_equivalent_to_not_collinear_v0 on I, D, midpoint(E, F) we get not_collinear(D, I, midpoint(E, F)), exists(Line(D, midpoint(E, F)))
By directions_draw_angle on projection(F, Line(D, J)), F, H we get exists(angle(projection(F, Line(D, J)), F, H))
By divide_by_2_mod_180_v0 on G, H, midpoint(E, G), I, H, B we get angle(I, H, B) == angle(G, H, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), F, D, G, A, midpoint(F, G) we get angle(G, A, midpoint(F, G)) == angle(midpoint(F, G), F, D) mod 360
By reverse_direction on A, midpoint(F, G) we get 180 == direction(A, midpoint(F, G)) - direction(midpoint(F, G), A) mod 360
By divide_by_2_mod_180_v1 on H, I, F, midpoint(F, G), F, J we get angle(H, I, F) == angle(midpoint(F, G), F, J) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), E, F, G, F, C we get angle(G, F, C) + 180 == angle(midpoint(E, G), E, F) mod 360
By directions_draw_angle on midpoint(E, G), H, A we get exists(angle(midpoint(E, G), H, A))
By divide_by_2_mod_180_v1 on midpoint(E, G), E, C, B, G, E we get angle(B, G, E) + 180 == angle(midpoint(E, G), E, C) mod 360
By divide_by_2_mod_180_v1 on C, F, G, F, D, midpoint(F, G) we get angle(C, F, G) == angle(F, D, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on I, F, E, H, G, midpoint(E, G) we get angle(I, F, E) == angle(H, G, midpoint(E, G)) + 180 mod 360
By not_in_line_equivalent_to_not_collinear_v0 on A, midpoint(E, F), D we get not_collinear(A, D, midpoint(E, F)), exists(Line(D, midpoint(E, F)))
By directions_draw_angle on midpoint(E, G), D, F we get exists(angle(midpoint(E, G), D, F))
By divide_by_2_mod_180_v1 on A, F, E, midpoint(F, G), G, E we get angle(A, F, E) == angle(midpoint(F, G), G, E) + 180 mod 360
By divide_by_2_mod_180_v1 on G, D, midpoint(F, G), G, F, J we get angle(G, F, J) + 180 == angle(G, D, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), F, C, midpoint(E, G), E, F we get angle(midpoint(F, G), F, C) == angle(midpoint(E, G), E, F) + 180 mod 360
By divide_by_2_mod_180_v1 on H, F, G, J, F, midpoint(F, G) we get angle(H, F, G) == angle(J, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on B, G, midpoint(F, G), midpoint(E, G), E, F we get angle(B, G, midpoint(F, G)) == angle(midpoint(E, G), E, F) + 180 mod 360
By divide_by_2_mod_180_v0 on E, F, midpoint(F, G), E, I, G we get angle(E, I, G) == angle(E, F, midpoint(F, G)) mod 360
By reverse_direction on F, projection(F, Line(D, J)) we get 180 == direction(F, projection(F, Line(D, J))) - direction(projection(F, Line(D, J)), F) mod 360
By divide_by_2_mod_180_v1 on E, G, A, midpoint(E, G), G, B we get angle(E, G, A) == angle(midpoint(E, G), G, B) + 180 mod 360
By divide_by_2_mod_180_v1 on H, D, C, midpoint(F, G), F, J we get angle(H, D, C) == angle(midpoint(F, G), F, J) + 180 mod 360
By directions_draw_angle on midpoint(E, I), E, F we get exists(angle(midpoint(E, I), E, F))
By divide_by_2_mod_180_v1 on B, E, midpoint(E, G), E, G, A we get angle(E, G, A) + 180 == angle(B, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on I, G, midpoint(F, G), I, F, J we get angle(I, F, J) + 180 == angle(I, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), F, J, G, I, F we get angle(G, I, F) == angle(midpoint(F, G), F, J) mod 360
By divide_by_2_mod_180_v1 on G, D, midpoint(E, G), A, G, E we get angle(A, G, E) + 180 == angle(G, D, midpoint(E, G)) mod 360
By directions_draw_angle on I, E, projection(F, j) we get exists(angle(I, E, projection(F, j)))
By divide_by_2_mod_180_v1 on midpoint(E, G), E, F, B, D, C we get angle(B, D, C) + 180 == angle(midpoint(E, G), E, F) mod 360
By divide_by_2_mod_180_v1 on G, D, midpoint(E, G), midpoint(E, G), E, C we get angle(G, D, midpoint(E, G)) == angle(midpoint(E, G), E, C) + 180 mod 360
By divide_by_2_mod_180_v0 on F, E, G, F, E, midpoint(E, G) we get angle(F, E, G) == angle(F, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on J, F, G, F, D, midpoint(F, G) we get angle(J, F, G) == angle(F, D, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on I, E, midpoint(E, G), I, G, B we get angle(I, G, B) + 180 == angle(I, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), F, E, A, D, C we get angle(A, D, C) + 180 == angle(midpoint(F, G), F, E) mod 360
By divide_by_2_mod_180_v0 on C, B, H, E, B, midpoint(E, G) we get angle(C, B, H) == angle(E, B, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), F, C, A, G, F we get angle(A, G, F) + 180 == angle(midpoint(F, G), F, C) mod 360
By divide_by_2_mod_180_v1 on C, F, midpoint(F, G), F, G, A we get angle(F, G, A) + 180 == angle(C, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on I, E, C, midpoint(E, G), E, H we get angle(I, E, C) == angle(midpoint(E, G), E, H) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), F, C, H, I, F we get angle(H, I, F) + 180 == angle(midpoint(F, G), F, C) mod 360
By divide_by_2_mod_180_v1 on F, G, A, midpoint(F, G), G, B we get angle(F, G, A) == angle(midpoint(F, G), G, B) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), E, F, midpoint(F, G), F, C we get angle(midpoint(E, G), E, F) == angle(midpoint(F, G), F, C) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), E, I, H, E, B we get angle(H, E, B) + 180 == angle(midpoint(E, G), E, I) mod 360
By divide_by_2_mod_180_v0 on G, D, midpoint(E, G), G, E, B we get angle(G, E, B) == angle(G, D, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on C, E, F, E, G, midpoint(F, G) we get angle(C, E, F) == angle(E, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on G, D, B, A, G, midpoint(E, G) we get angle(G, D, B) == angle(A, G, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on C, D, B, F, E, midpoint(E, G) we get angle(C, D, B) == angle(F, E, midpoint(E, G)) + 180 mod 360
By line_containment_inequality on line_circle_tangent_point(h, c), D, h we get D != line_circle_tangent_point(h, c)
By directions_draw_angle on midpoint(E, F), F, projection(F, Line(D, J)) we get exists(angle(midpoint(E, F), F, projection(F, Line(D, J))))
By divide_by_2_mod_180_v1 on A, F, G, midpoint(F, G), G, B we get angle(A, F, G) == angle(midpoint(F, G), G, B) + 180 mod 360
By divide_by_2_mod_180_v0 on D, E, midpoint(E, G), E, B, midpoint(E, G) we get angle(D, E, midpoint(E, G)) == angle(E, B, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on F, G, midpoint(E, G), A, D, B we get angle(A, D, B) + 180 == angle(F, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), F, J, midpoint(E, G), E, F we get angle(midpoint(F, G), F, J) == angle(midpoint(E, G), E, F) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), G, A, B, E, G we get angle(B, E, G) + 180 == angle(midpoint(E, G), G, A) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), F, J, A, G, F we get angle(A, G, F) + 180 == angle(midpoint(F, G), F, J) mod 360
By divide_by_2_mod_180_v0 on E, H, midpoint(E, G), E, J, D we get angle(E, J, D) == angle(E, H, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), F, C, G, F, H we get angle(G, F, H) + 180 == angle(midpoint(F, G), F, C) mod 360
By directions_draw_angle on midpoint(E, I), E, B we get exists(angle(midpoint(E, I), E, B))
By divide_by_2_mod_180_v1 on A, F, midpoint(F, G), C, F, G we get angle(C, F, G) + 180 == angle(A, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), F, A, G, F, J we get angle(G, F, J) + 180 == angle(midpoint(F, G), F, A) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), E, H, I, F, E we get angle(I, F, E) + 180 == angle(midpoint(E, G), E, H) mod 360
By divide_by_2_mod_180_v1 on G, E, C, midpoint(E, G), E, B we get angle(G, E, C) == angle(midpoint(E, G), E, B) + 180 mod 360
By divide_by_2_mod_180_v0 on F, I, E, F, G, midpoint(E, G) we get angle(F, I, E) == angle(F, G, midpoint(E, G)) mod 360
By directions_draw_angle on E, D, midpoint(F, G) we get exists(angle(E, D, midpoint(F, G)))
By divide_by_2_mod_180_v0 on G, B, midpoint(E, G), H, B, C we get angle(H, B, C) == angle(G, B, midpoint(E, G)) mod 360
By directions_draw_angle on projection(F, j), G, I we get exists(angle(projection(F, j), G, I))
By not_in_line_equivalent_to_not_collinear_v0 on G, I, midpoint(E, I) we get not_collinear(G, I, midpoint(E, I)), exists(Line(I, midpoint(E, I)))
By divide_by_2_mod_180_v1 on G, I, E, midpoint(E, G), E, C we get angle(G, I, E) == angle(midpoint(E, G), E, C) + 180 mod 360
By divide_by_2_mod_180_v1 on B, D, G, C, E, midpoint(E, G) we get angle(B, D, G) == angle(C, E, midpoint(E, G)) + 180 mod 360
By not_in_line_equivalent_to_not_collinear_v0 on G, midpoint(E, F), F we get not_collinear(F, G, midpoint(E, F)), exists(Line(F, midpoint(E, F)))
By divide_by_2_mod_180_v1 on midpoint(F, G), F, E, H, I, E we get angle(H, I, E) + 180 == angle(midpoint(F, G), F, E) mod 360
By divide_by_2_mod_180_v1 on G, F, J, midpoint(F, G), F, H we get angle(G, F, J) == angle(midpoint(F, G), F, H) + 180 mod 360
By divide_by_2_mod_180_v1 on B, E, I, midpoint(E, G), G, I we get angle(B, E, I) == angle(midpoint(E, G), G, I) + 180 mod 360
By directions_draw_angle on projection(F, j), E, center(d) we get exists(angle(projection(F, j), E, center(d)))
By divide_by_2_mod_180_v1 on G, I, F, midpoint(F, G), F, H we get angle(G, I, F) == angle(midpoint(F, G), F, H) + 180 mod 360
By divide_by_2_mod_180_v1 on B, E, F, E, G, midpoint(F, G) we get angle(B, E, F) == angle(E, G, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on C, F, G, A, F, midpoint(F, G) we get angle(C, F, G) == angle(A, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on D, G, midpoint(E, G), G, B, midpoint(E, G) we get angle(D, G, midpoint(E, G)) == angle(G, B, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on C, F, midpoint(F, G), F, I, H we get angle(F, I, H) + 180 == angle(C, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on D, E, midpoint(E, G), C, B, D we get angle(C, B, D) == angle(D, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on I, E, B, midpoint(E, G), E, H we get angle(I, E, B) == angle(midpoint(E, G), E, H) + 180 mod 360
By directions_draw_angle on midpoint(E, I), I, D we get exists(angle(midpoint(E, I), I, D))
By divide_by_2_mod_180_v1 on I, F, midpoint(F, G), I, G, B we get angle(I, G, B) + 180 == angle(I, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on I, G, B, I, F, midpoint(F, G) we get angle(I, G, B) == angle(I, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on I, G, midpoint(F, G), I, F, C we get angle(I, F, C) + 180 == angle(I, G, midpoint(F, G)) mod 360
By directions_draw_angle on center(d), D, midpoint(E, G) we get exists(angle(center(d), D, midpoint(E, G)))
By divide_by_2_mod_180_v1 on H, I, E, midpoint(E, G), E, B we get angle(H, I, E) == angle(midpoint(E, G), E, B) + 180 mod 360
By divide_by_2_mod_180_v1 on A, G, E, midpoint(E, G), D, E we get angle(A, G, E) == angle(midpoint(E, G), D, E) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), G, F, E, F, A we get angle(E, F, A) + 180 == angle(midpoint(E, G), G, F) mod 360
By sas_anti_similarity on F, midpoint(F, G), A, D, midpoint(F, G), G we get anti_similar_triangles(A, F, midpoint(F, G), G, D, midpoint(F, G))
By divide_by_2_mod_180_v1 on B, G, midpoint(F, G), G, D, midpoint(F, G) we get angle(B, G, midpoint(F, G)) == angle(G, D, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on C, E, midpoint(E, G), midpoint(E, G), D, G we get angle(C, E, midpoint(E, G)) == angle(midpoint(E, G), D, G) + 180 mod 360
By not_in_line_equivalent_to_not_collinear_v0 on F, midpoint(E, I), I we get not_collinear(F, I, midpoint(E, I)), exists(Line(I, midpoint(E, I)))
By divide_by_2_mod_180_v1 on C, E, G, midpoint(E, G), G, B we get angle(C, E, G) == angle(midpoint(E, G), G, B) + 180 mod 360
By divide_by_2_mod_180_v1 on F, I, G, midpoint(F, G), D, G we get angle(F, I, G) == angle(midpoint(F, G), D, G) + 180 mod 360
By divide_by_2_mod_180_v1 on G, F, C, midpoint(F, G), F, H we get angle(G, F, C) == angle(midpoint(F, G), F, H) + 180 mod 360
By divide_by_2_mod_180_v1 on G, D, H, midpoint(E, G), E, B we get angle(G, D, H) == angle(midpoint(E, G), E, B) + 180 mod 360
By divide_by_2_mod_180_v1 on H, E, B, midpoint(F, G), F, I we get angle(H, E, B) == angle(midpoint(F, G), F, I) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), F, H, B, G, F we get angle(B, G, F) + 180 == angle(midpoint(F, G), F, H) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), E, I, B, G, H we get angle(B, G, H) + 180 == angle(midpoint(E, G), E, I) mod 360
By line_circle_intersection_has_at_most_two_points_0 on J, H, A, d we get A not in d
By divide_by_2_mod_180_v1 on H, F, midpoint(F, G), C, D, B we get angle(C, D, B) + 180 == angle(H, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on F, E, G, J, F, midpoint(F, G) we get angle(F, E, G) == angle(J, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on A, D, B, F, G, midpoint(E, G) we get angle(A, D, B) == angle(F, G, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on H, B, E, G, B, midpoint(E, G) we get angle(H, B, E) == angle(G, B, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on B, E, H, I, E, midpoint(E, G) we get angle(B, E, H) == angle(I, E, midpoint(E, G)) + 180 mod 360
By line_containment_inequality on midpoint(E, I), midpoint(E, G), Line(E, I) we get midpoint(E, G) != midpoint(E, I)
By reverse_direction on F, midpoint(E, F) we get 180 == direction(F, midpoint(E, F)) - direction(midpoint(E, F), F) mod 360
By divide_by_2_mod_180_v1 on H, I, F, B, G, midpoint(F, G) we get angle(H, I, F) == angle(B, G, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), F, J, G, D, midpoint(F, G) we get angle(midpoint(F, G), F, J) == angle(G, D, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on F, D, C, midpoint(F, G), G, E we get angle(F, D, C) == angle(midpoint(F, G), G, E) mod 360
By reverse_direction on D, midpoint(E, G) we get 180 == direction(D, midpoint(E, G)) - direction(midpoint(E, G), D) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), E, B, G, E, C we get angle(G, E, C) + 180 == angle(midpoint(E, G), E, B) mod 360
By divide_by_2_mod_180_v0 on F, A, midpoint(F, G), F, G, D we get angle(F, G, D) == angle(F, A, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), E, C, midpoint(E, G), D, E we get angle(midpoint(E, G), E, C) == angle(midpoint(E, G), D, E) + 180 mod 360
By directions_draw_angle on E, F, projection(F, Line(D, J)) we get exists(angle(E, F, projection(F, Line(D, J))))
By divide_by_2_mod_180_v1 on C, E, midpoint(E, G), E, G, B we get angle(E, G, B) + 180 == angle(C, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on C, E, midpoint(E, G), B, E, G we get angle(B, E, G) + 180 == angle(C, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), F, H, H, I, F we get angle(H, I, F) == angle(midpoint(F, G), F, H) mod 360
By divide_by_2_mod_180_v1 on H, F, E, F, G, midpoint(E, G) we get angle(H, F, E) == angle(F, G, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), D, F, midpoint(F, G), F, J we get angle(midpoint(F, G), D, F) == angle(midpoint(F, G), F, J) + 180 mod 360
By divide_by_2_mod_180_v1 on A, D, C, midpoint(F, G), F, E we get angle(A, D, C) == angle(midpoint(F, G), F, E) + 180 mod 360
By divide_by_2_mod_180_v1 on C, D, A, B, E, midpoint(E, G) we get angle(C, D, A) == angle(B, E, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on C, E, G, E, F, midpoint(F, G) we get angle(C, E, G) == angle(E, F, midpoint(F, G)) + 180 mod 360
By not_in_line_equivalent_to_not_collinear_v0 on F, D, midpoint(E, F) we get not_collinear(D, F, midpoint(E, F)), exists(Line(D, midpoint(E, F)))
By divide_by_2_mod_180_v1 on E, D, midpoint(E, G), H, D, G we get angle(H, D, G) + 180 == angle(E, D, midpoint(E, G)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, G), E, midpoint(E, F) we get not_collinear(E, midpoint(E, F), midpoint(E, G)), exists(Line(E, midpoint(E, F)))
By line_containment_inequality on line_circle_tangent_point(f, c), H, f we get H != line_circle_tangent_point(f, c)
By divide_by_2_mod_180_v0 on B, E, midpoint(E, G), E, F, G we get angle(E, F, G) == angle(B, E, midpoint(E, G)) mod 360
By directions_draw_angle on projection(F, j), F, D we get exists(angle(projection(F, j), F, D))
By directions_draw_angle on midpoint(E, I), E, midpoint(E, F) we get exists(angle(midpoint(E, I), E, midpoint(E, F)))
By line_containment_inequality on projection(F, j), midpoint(F, G), j we get midpoint(F, G) != projection(F, j)
By divide_by_2_mod_180_v1 on midpoint(E, G), E, F, B, G, F we get angle(B, G, F) + 180 == angle(midpoint(E, G), E, F) mod 360
By divide_by_2_mod_180_v1 on A, G, F, midpoint(F, G), F, J we get angle(A, G, F) == angle(midpoint(F, G), F, J) + 180 mod 360
By divide_by_2_mod_180_v0 on B, E, midpoint(E, G), B, D, G we get angle(B, D, G) == angle(B, E, midpoint(E, G)) mod 360
By sas_similarity on G, midpoint(F, G), D, A, midpoint(F, G), G we get similar_triangles(A, G, midpoint(F, G), G, D, midpoint(F, G))
By divide_by_2_mod_180_v1 on B, G, midpoint(E, G), G, D, H we get angle(G, D, H) + 180 == angle(B, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), H, E, I, E, D we get angle(I, E, D) == angle(midpoint(E, G), H, E) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on H, midpoint(E, F), E we get not_collinear(E, H, midpoint(E, F)), exists(Line(E, midpoint(E, F)))
By divide_by_2_mod_180_v0 on F, G, midpoint(E, G), midpoint(F, G), G, E we get angle(F, G, midpoint(E, G)) == angle(midpoint(F, G), G, E) mod 360
By divide_by_2_mod_180_v1 on G, F, H, B, G, midpoint(F, G) we get angle(G, F, H) == angle(B, G, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on J, F, midpoint(F, G), F, G, B we get angle(F, G, B) == angle(J, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on F, D, midpoint(F, G), J, F, midpoint(F, G) we get angle(F, D, midpoint(F, G)) == angle(J, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on H, I, E, G, D, midpoint(E, G) we get angle(H, I, E) == angle(G, D, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on F, E, B, midpoint(F, G), G, E we get angle(F, E, B) == angle(midpoint(F, G), G, E) + 180 mod 360
By divide_by_2_mod_180_v1 on E, F, midpoint(F, G), C, E, G we get angle(C, E, G) + 180 == angle(E, F, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), G, A, E, D, B we get angle(E, D, B) + 180 == angle(midpoint(E, G), G, A) mod 360
By sas_anti_similarity on G, midpoint(F, G), D, A, midpoint(F, G), F we get anti_similar_triangles(A, F, midpoint(F, G), G, D, midpoint(F, G))
By divide_by_2_mod_180_v1 on C, F, G, H, F, midpoint(F, G) we get angle(C, F, G) == angle(H, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on E, F, A, E, G, midpoint(F, G) we get angle(E, F, A) == angle(E, G, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), F, H, midpoint(F, G), D, F we get angle(midpoint(F, G), D, F) == angle(midpoint(F, G), F, H) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), G, A, midpoint(E, G), D, G we get angle(midpoint(E, G), G, A) == angle(midpoint(E, G), D, G) + 180 mod 360
By divide_by_2_mod_180_v1 on C, D, H, J, F, midpoint(F, G) we get angle(C, D, H) == angle(J, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), G, B, F, G, A we get angle(F, G, A) + 180 == angle(midpoint(F, G), G, B) mod 360
By divide_by_2_mod_180_v1 on B, G, E, midpoint(E, G), E, C we get angle(B, G, E) == angle(midpoint(E, G), E, C) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), G, I, C, F, I we get angle(C, F, I) + 180 == angle(midpoint(F, G), G, I) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), D, F, G, I, F we get angle(G, I, F) + 180 == angle(midpoint(F, G), D, F) mod 360
By line_inequality on perpendicular_bisector(F, I), Line(F, I), D we get Line(F, I) != perpendicular_bisector(F, I)
By not_in_line_equivalent_to_not_collinear_v0 on B, midpoint(E, F), D we get not_collinear(B, D, midpoint(E, F)), exists(Line(D, midpoint(E, F)))
By divide_by_2_mod_180_v1 on midpoint(F, G), F, C, G, D, midpoint(F, G) we get angle(midpoint(F, G), F, C) == angle(G, D, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on G, D, midpoint(F, G), G, F, C we get angle(G, F, C) + 180 == angle(G, D, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on A, D, F, B, G, midpoint(F, G) we get angle(A, D, F) == angle(B, G, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on I, F, J, I, G, midpoint(F, G) we get angle(I, F, J) == angle(I, G, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on A, G, midpoint(F, G), G, F, C we get angle(G, F, C) + 180 == angle(A, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on B, E, G, C, E, midpoint(E, G) we get angle(B, E, G) == angle(C, E, midpoint(E, G)) + 180 mod 360
By directions_draw_angle on F, I, midpoint(E, I) we get exists(angle(F, I, midpoint(E, I)))
By divide_by_2_mod_180_v1 on B, D, G, midpoint(E, G), G, A we get angle(B, D, G) == angle(midpoint(E, G), G, A) + 180 mod 360
By divide_by_2_mod_180_v0 on E, B, midpoint(E, G), H, B, G we get angle(H, B, G) == angle(E, B, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), F, C, A, D, F we get angle(A, D, F) + 180 == angle(midpoint(F, G), F, C) mod 360
By divide_by_2_mod_180_v1 on H, I, E, B, G, midpoint(E, G) we get angle(H, I, E) == angle(B, G, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on J, F, midpoint(F, G), F, D, midpoint(F, G) we get angle(J, F, midpoint(F, G)) == angle(F, D, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), G, I, E, F, I we get angle(E, F, I) + 180 == angle(midpoint(E, G), G, I) mod 360
By divide_by_2_mod_180_v1 on B, D, C, midpoint(F, G), F, A we get angle(B, D, C) == angle(midpoint(F, G), F, A) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), E, I, B, G, I we get angle(B, G, I) + 180 == angle(midpoint(E, G), E, I) mod 360
By divide_by_2_mod_180_v1 on E, G, midpoint(F, G), E, F, H we get angle(E, F, H) + 180 == angle(E, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v1 on G, E, F, midpoint(F, G), F, J we get angle(G, E, F) == angle(midpoint(F, G), F, J) + 180 mod 360
By line_inequality on perpendicular_bisector(G, I), Line(E, H), D we get Line(E, H) != perpendicular_bisector(G, I)
By not_in_line_equivalent_to_not_collinear_v0 on H, midpoint(E, F), D we get not_collinear(D, H, midpoint(E, F)), exists(Line(D, midpoint(E, F)))
By line_inequality on Line(G, projection(F, j)), Line(C, D), G we get Line(C, D) != Line(G, projection(F, j))
By directions_draw_angle on midpoint(E, F), E, G we get exists(angle(midpoint(E, F), E, G))
By line_containment_inequality on line_circle_tangent_point(f, c), F, f we get F != line_circle_tangent_point(f, c)
By directions_draw_angle on midpoint(E, F), E, midpoint(E, I) we get exists(angle(midpoint(E, F), E, midpoint(E, I)))
By directions_draw_angle on midpoint(E, G), D, center(d) we get exists(angle(midpoint(E, G), D, center(d)))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(F, G), C, J we get not_collinear(C, J, midpoint(F, G)), exists(Line(C, J))
By directions_draw_angle on projection(F, Line(D, J)), F, E we get exists(angle(projection(F, Line(D, J)), F, E))
By directions_draw_angle on midpoint(E, I), I, center(d) we get exists(angle(midpoint(E, I), I, center(d)))
By directions_draw_angle on projection(F, j), E, C we get exists(angle(projection(F, j), E, C))
By directions_draw_angle on midpoint(F, G), D, center(d) we get exists(angle(midpoint(F, G), D, center(d)))
By line_inequality on perpendicular_bisector(F, I), g, D we get g != perpendicular_bisector(F, I)
By line_inequality on Line(G, projection(F, j)), Line(D, I), G we get Line(D, I) != Line(G, projection(F, j))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(F, G), B, H we get not_collinear(B, H, midpoint(F, G)), exists(Line(B, H))
By line_inequality on perpendicular_bisector(G, I), Line(E, F), D we get Line(E, F) != perpendicular_bisector(G, I)
By directions_draw_angle on midpoint(E, F), E, midpoint(E, G) we get exists(angle(midpoint(E, F), E, midpoint(E, G)))
By directions_draw_angle on G, I, midpoint(E, I) we get exists(angle(G, I, midpoint(E, I)))
By not_in_line_equivalent_to_not_collinear_v0 on A, E, midpoint(E, F) we get not_collinear(A, E, midpoint(E, F)), exists(Line(E, midpoint(E, F)))
By directions_draw_angle on J, E, midpoint(E, I) we get exists(angle(J, E, midpoint(E, I)))
By directions_draw_angle on midpoint(E, G), E, midpoint(E, F) we get exists(angle(midpoint(E, G), E, midpoint(E, F)))
By directions_draw_angle on I, G, projection(F, j) we get exists(angle(I, G, projection(F, j)))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, G), C, J we get not_collinear(C, J, midpoint(E, G)), exists(Line(C, J))
By line_inequality on Line(G, projection(F, j)), i, G we get i != Line(G, projection(F, j))
By directions_draw_angle on A, F, projection(F, j) we get exists(angle(A, F, projection(F, j)))
By line_inequality on perpendicular_bisector(G, I), Line(I, J), D we get Line(I, J) != perpendicular_bisector(G, I)
By line_circle_intersection_has_at_most_two_points_0 on G, I, midpoint(G, I), c we get midpoint(G, I) not in c
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(F, G), midpoint(E, F), E we get not_collinear(E, midpoint(E, F), midpoint(F, G)), exists(Line(E, midpoint(E, F)))
By not_in_line_equivalent_to_not_collinear_v0 on D, midpoint(E, F), E we get not_collinear(D, E, midpoint(E, F)), exists(Line(E, midpoint(E, F)))
By directions_draw_angle on projection(F, j), G, D we get exists(angle(projection(F, j), G, D))
By directions_draw_angle on center(d), E, projection(F, j) we get exists(angle(center(d), E, projection(F, j)))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, G), I, midpoint(E, I) we get not_collinear(I, midpoint(E, G), midpoint(E, I)), exists(Line(I, midpoint(E, I)))
By not_in_line_equivalent_to_not_collinear_v0 on C, midpoint(E, I), E we get not_collinear(C, E, midpoint(E, I)), exists(Line(E, midpoint(E, I)))
By directions_draw_angle on midpoint(E, F), E, H we get exists(angle(midpoint(E, F), E, H))
By directions_draw_angle on midpoint(E, G), E, projection(F, j) we get exists(angle(midpoint(E, G), E, projection(F, j)))
By directions_draw_angle on midpoint(E, F), F, D we get exists(angle(midpoint(E, F), F, D))
By line_inequality on Line(G, projection(F, j)), g, G we get g != Line(G, projection(F, j))
By directions_draw_angle on midpoint(E, F), F, G we get exists(angle(midpoint(E, F), F, G))
By directions_draw_angle on J, I, midpoint(E, I) we get exists(angle(J, I, midpoint(E, I)))
By directions_draw_angle on midpoint(E, G), H, J we get exists(angle(midpoint(E, G), H, J))
By not_in_line_equivalent_to_not_collinear_v0 on H, F, midpoint(E, F) we get not_collinear(F, H, midpoint(E, F)), exists(Line(F, midpoint(E, F)))
By directions_draw_angle on midpoint(E, I), E, D we get exists(angle(midpoint(E, I), E, D))
By not_in_line_equivalent_to_not_collinear_v0 on I, E, midpoint(E, F) we get not_collinear(E, I, midpoint(E, F)), exists(Line(E, midpoint(E, F)))
By not_in_line_equivalent_to_not_collinear_v0 on G, E, midpoint(E, I) we get not_collinear(E, G, midpoint(E, I)), exists(Line(E, midpoint(E, I)))
By directions_draw_angle on midpoint(F, G), D, H we get exists(angle(midpoint(F, G), D, H))
By directions_draw_angle on midpoint(E, I), E, projection(F, j) we get exists(angle(midpoint(E, I), E, projection(F, j)))
By directions_draw_angle on G, E, midpoint(E, I) we get exists(angle(G, E, midpoint(E, I)))
By line_inequality on Line(E, projection(F, j)), f, E we get f != Line(E, projection(F, j))
By not_in_line_equivalent_to_not_collinear_v0 on A, C, midpoint(E, F) we get not_collinear(A, C, midpoint(E, F)), exists(Line(C, midpoint(E, F)))
By directions_draw_angle on projection(F, j), E, F we get exists(angle(projection(F, j), E, F))
By directions_draw_angle on center(d), E, midpoint(E, F) we get exists(angle(center(d), E, midpoint(E, F)))
By directions_draw_angle on I, F, projection(F, Line(D, J)) we get exists(angle(I, F, projection(F, Line(D, J))))
By directions_draw_angle on midpoint(E, G), D, C we get exists(angle(midpoint(E, G), D, C))
By directions_draw_angle on midpoint(E, F), F, I we get exists(angle(midpoint(E, F), F, I))
By directions_draw_angle on I, D, midpoint(E, G) we get exists(angle(I, D, midpoint(E, G)))
By line_containment_inequality on line_circle_tangent_point(g, c), I, g we get I != line_circle_tangent_point(g, c)
By line_containment_inequality on line_circle_tangent_point(f, c), D, f we get D != line_circle_tangent_point(f, c)
By directions_draw_angle on midpoint(F, G), G, projection(F, j) we get exists(angle(midpoint(F, G), G, projection(F, j)))
By directions_draw_angle on J, D, midpoint(E, G) we get exists(angle(J, D, midpoint(E, G)))
By not_in_line_equivalent_to_not_collinear_v0 on A, midpoint(E, F), F we get not_collinear(A, F, midpoint(E, F)), exists(Line(F, midpoint(E, F)))
By directions_draw_angle on A, F, projection(F, Line(D, J)) we get exists(angle(A, F, projection(F, Line(D, J))))
By directions_draw_angle on midpoint(E, G), D, I we get exists(angle(midpoint(E, G), D, I))
By line_inequality on Line(G, projection(F, j)), Line(E, F), G we get Line(E, F) != Line(G, projection(F, j))
By line_containment_inequality on line_circle_tangent_point(f, c), J, f we get J != line_circle_tangent_point(f, c)
By directions_draw_angle on midpoint(E, F), E, C we get exists(angle(midpoint(E, F), E, C))
By line_containment_inequality on midpoint(E, I), A, Line(E, I) we get A != midpoint(E, I)
By line_circle_intersection_has_at_most_two_points_0 on H, J, C, d we get C not in d
By line_circle_intersection_has_at_most_two_points_0 on F, I, midpoint(F, I), c we get midpoint(F, I) not in c
By directions_draw_angle on projection(F, j), F, midpoint(F, G) we get exists(angle(projection(F, j), F, midpoint(F, G)))
By directions_draw_angle on H, G, projection(F, j) we get exists(angle(H, G, projection(F, j)))
By directions_draw_angle on projection(F, j), E, midpoint(E, F) we get exists(angle(projection(F, j), E, midpoint(E, F)))
By not_in_line_equivalent_to_not_collinear_v0 on D, midpoint(E, I), E we get not_collinear(D, E, midpoint(E, I)), exists(Line(E, midpoint(E, I)))
By directions_draw_angle on midpoint(E, I), E, C we get exists(angle(midpoint(E, I), E, C))
By directions_draw_angle on projection(F, Line(D, J)), F, A we get exists(angle(projection(F, Line(D, J)), F, A))
By line_circle_intersection_has_at_most_two_points_0 on D, H, B, d we get B not in d
By directions_draw_angle on midpoint(F, G), F, projection(F, Line(D, J)) we get exists(angle(midpoint(F, G), F, projection(F, Line(D, J))))
By directions_draw_angle on midpoint(E, F), E, projection(F, j) we get exists(angle(midpoint(E, F), E, projection(F, j)))
By directions_draw_angle on J, F, projection(F, Line(D, J)) we get exists(angle(J, F, projection(F, Line(D, J))))
By line_inequality on perpendicular_bisector(G, I), Line(F, I), D we get Line(F, I) != perpendicular_bisector(G, I)
By line_inequality on perpendicular_bisector(G, I), f, D we get f != perpendicular_bisector(G, I)
By directions_draw_angle on midpoint(F, G), D, E we get exists(angle(midpoint(F, G), D, E))
By directions_draw_angle on D, G, projection(F, j) we get exists(angle(D, G, projection(F, j)))
By directions_draw_angle on midpoint(E, I), I, G we get exists(angle(midpoint(E, I), I, G))
By directions_draw_angle on projection(F, j), E, H we get exists(angle(projection(F, j), E, H))
By directions_draw_angle on F, G, projection(F, j) we get exists(angle(F, G, projection(F, j)))
By directions_draw_angle on midpoint(E, G), H, C we get exists(angle(midpoint(E, G), H, C))
By directions_draw_angle on F, D, midpoint(E, G) we get exists(angle(F, D, midpoint(E, G)))
By directions_draw_angle on center(d), D, midpoint(F, G) we get exists(angle(center(d), D, midpoint(F, G)))
By directions_draw_angle on midpoint(F, G), D, J we get exists(angle(midpoint(F, G), D, J))
By directions_draw_angle on midpoint(E, G), G, projection(F, j) we get exists(angle(midpoint(E, G), G, projection(F, j)))
By line_containment_inequality on midpoint(E, F), midpoint(E, G), Line(C, D) we get midpoint(E, F) != midpoint(E, G)
By directions_draw_angle on C, F, projection(F, Line(D, J)) we get exists(angle(C, F, projection(F, Line(D, J))))
By line_containment_inequality on projection(F, Line(D, J)), midpoint(F, G), Line(D, J) we get midpoint(F, G) != projection(F, Line(D, J))
By directions_draw_angle on projection(F, Line(D, J)), F, projection(F, j) we get exists(angle(projection(F, Line(D, J)), F, projection(F, j)))
By directions_draw_angle on F, H, midpoint(E, G) we get exists(angle(F, H, midpoint(E, G)))
By line_inequality on perpendicular_bisector(F, I), Line(F, G), D we get Line(F, G) != perpendicular_bisector(F, I)
By directions_draw_angle on midpoint(E, F), E, I we get exists(angle(midpoint(E, F), E, I))
By directions_draw_angle on G, F, midpoint(E, F) we get exists(angle(G, F, midpoint(E, F)))
By line_inequality on Line(E, projection(F, j)), Line(D, F), E we get Line(D, F) != Line(E, projection(F, j))
By directions_draw_angle on J, D, midpoint(F, G) we get exists(angle(J, D, midpoint(F, G)))
By line_inequality on Line(E, projection(F, j)), h, E we get h != Line(E, projection(F, j))
By line_inequality on perpendicular_bisector(F, I), Line(E, I), D we get Line(E, I) != perpendicular_bisector(F, I)
By directions_draw_angle on F, E, projection(F, j) we get exists(angle(F, E, projection(F, j)))
By directions_draw_angle on J, H, midpoint(E, G) we get exists(angle(J, H, midpoint(E, G)))
By directions_draw_angle on projection(F, j), F, A we get exists(angle(projection(F, j), F, A))
By directions_draw_angle on E, F, projection(F, j) we get exists(angle(E, F, projection(F, j)))
By not_in_line_equivalent_to_not_collinear_v0 on A, I, midpoint(E, I) we get not_collinear(A, I, midpoint(E, I)), exists(Line(I, midpoint(E, I)))
By directions_draw_angle on projection(F, j), E, midpoint(E, I) we get exists(angle(projection(F, j), E, midpoint(E, I)))
By directions_draw_angle on midpoint(E, G), H, F we get exists(angle(midpoint(E, G), H, F))
By directions_draw_angle on D, F, projection(F, Line(D, J)) we get exists(angle(D, F, projection(F, Line(D, J))))
By line_inequality on Line(E, projection(F, j)), Line(I, J), E we get Line(I, J) != Line(E, projection(F, j))
By directions_draw_angle on D, E, projection(F, j) we get exists(angle(D, E, projection(F, j)))
By line_inequality on Line(E, projection(F, j)), Line(C, D), E we get Line(C, D) != Line(E, projection(F, j))
By line_containment_inequality on midpoint(E, G), midpoint(F, G), j we get midpoint(E, G) != midpoint(F, G)
By directions_draw_angle on midpoint(E, F), E, center(d) we get exists(angle(midpoint(E, F), E, center(d)))
By directions_draw_angle on midpoint(E, F), E, D we get exists(angle(midpoint(E, F), E, D))
By line_inequality on perpendicular_bisector(G, I), h, D we get h != perpendicular_bisector(G, I)
By directions_draw_angle on H, E, projection(F, j) we get exists(angle(H, E, projection(F, j)))
By directions_draw_angle on projection(F, j), E, J we get exists(angle(projection(F, j), E, J))
By directions_draw_angle on projection(F, Line(D, J)), F, J we get exists(angle(projection(F, Line(D, J)), F, J))
By directions_draw_angle on B, D, midpoint(F, G) we get exists(angle(B, D, midpoint(F, G)))
By directions_draw_angle on H, F, projection(F, Line(D, J)) we get exists(angle(H, F, projection(F, Line(D, J))))
By directions_draw_angle on projection(F, j), G, midpoint(E, G) we get exists(angle(projection(F, j), G, midpoint(E, G)))
By directions_draw_angle on C, F, midpoint(E, F) we get exists(angle(C, F, midpoint(E, F)))
By directions_draw_angle on D, F, projection(F, j) we get exists(angle(D, F, projection(F, j)))
By directions_draw_angle on D, E, midpoint(E, I) we get exists(angle(D, E, midpoint(E, I)))
By directions_draw_angle on midpoint(E, I), E, H we get exists(angle(midpoint(E, I), E, H))
By directions_draw_angle on B, E, midpoint(E, I) we get exists(angle(B, E, midpoint(E, I)))
By not_in_line_equivalent_to_not_collinear_v0 on C, I, midpoint(E, I) we get not_collinear(C, I, midpoint(E, I)), exists(Line(I, midpoint(E, I)))
By directions_draw_angle on A, D, midpoint(E, G) we get exists(angle(A, D, midpoint(E, G)))
By directions_draw_angle on midpoint(F, G), D, midpoint(E, G) we get exists(angle(midpoint(F, G), D, midpoint(E, G)))
By directions_draw_angle on midpoint(E, F), E, B we get exists(angle(midpoint(E, F), E, B))
By line_inequality on perpendicular_bisector(G, I), Line(F, G), D we get Line(F, G) != perpendicular_bisector(G, I)
By directions_draw_angle on projection(F, Line(D, J)), F, C we get exists(angle(projection(F, Line(D, J)), F, C))
By directions_draw_angle on H, E, midpoint(E, I) we get exists(angle(H, E, midpoint(E, I)))
By directions_draw_angle on B, G, projection(F, j) we get exists(angle(B, G, projection(F, j)))
By line_containment_inequality on midpoint(E, F), midpoint(F, G), Line(C, D) we get midpoint(E, F) != midpoint(F, G)
By directions_draw_angle on midpoint(E, G), E, midpoint(E, I) we get exists(angle(midpoint(E, G), E, midpoint(E, I)))
By directions_draw_angle on C, F, projection(F, j) we get exists(angle(C, F, projection(F, j)))
By not_in_line_equivalent_to_not_collinear_v0 on I, midpoint(E, F), C we get not_collinear(C, I, midpoint(E, F)), exists(Line(C, midpoint(E, F)))
By line_containment_inequality on line_circle_tangent_point(g, c), H, g we get H != line_circle_tangent_point(g, c)
By directions_draw_angle on projection(F, Line(D, J)), F, midpoint(F, G) we get exists(angle(projection(F, Line(D, J)), F, midpoint(F, G)))
By directions_draw_angle on C, D, midpoint(E, G) we get exists(angle(C, D, midpoint(E, G)))
By directions_draw_angle on I, D, midpoint(F, G) we get exists(angle(I, D, midpoint(F, G)))
By directions_draw_angle on midpoint(E, F), F, C we get exists(angle(midpoint(E, F), F, C))
By directions_draw_angle on midpoint(F, G), F, projection(F, j) we get exists(angle(midpoint(F, G), F, projection(F, j)))
By directions_draw_angle on midpoint(F, G), F, midpoint(E, F) we get exists(angle(midpoint(F, G), F, midpoint(E, F)))
By line_inequality on Line(G, projection(F, j)), Line(D, E), G we get Line(D, E) != Line(G, projection(F, j))
By directions_draw_angle on G, F, projection(F, j) we get exists(angle(G, F, projection(F, j)))
By directions_draw_angle on projection(F, j), G, A we get exists(angle(projection(F, j), G, A))
By directions_draw_angle on A, F, midpoint(E, F) we get exists(angle(A, F, midpoint(E, F)))
By directions_draw_angle on projection(F, j), G, midpoint(F, G) we get exists(angle(projection(F, j), G, midpoint(F, G)))
By line_inequality on perpendicular_bisector(F, I), Line(I, J), D we get Line(I, J) != perpendicular_bisector(F, I)
By line_containment_inequality on line_circle_tangent_point(h, c), I, h we get I != line_circle_tangent_point(h, c)
By line_inequality on perpendicular_bisector(G, I), Line(E, G), D we get Line(E, G) != perpendicular_bisector(G, I)
By line_inequality on Line(E, projection(F, j)), Line(D, I), E we get Line(D, I) != Line(E, projection(F, j))
By line_containment_inequality on midpoint(E, I), F, Line(E, I) we get F != midpoint(E, I)
By line_containment_inequality on line_circle_tangent_point(g, c), G, g we get G != line_circle_tangent_point(g, c)
By line_inequality on perpendicular_bisector(G, I), Line(E, J), D we get Line(E, J) != perpendicular_bisector(G, I)
By line_inequality on Line(E, projection(F, j)), Line(D, G), E we get Line(D, G) != Line(E, projection(F, j))
By line_inequality on perpendicular_bisector(F, I), k, D we get k != perpendicular_bisector(F, I)
By line_containment_inequality on midpoint(E, I), B, Line(E, I) we get B != midpoint(E, I)
By line_inequality on Line(G, projection(F, j)), Line(E, H), G we get Line(E, H) != Line(G, projection(F, j))
By line_inequality on Line(G, projection(F, j)), Line(I, J), G we get Line(I, J) != Line(G, projection(F, j))
By line_inequality on perpendicular_bisector(G, I), g, D we get g != perpendicular_bisector(G, I)
By line_containment_inequality on line_circle_tangent_point(f, c), E, f we get E != line_circle_tangent_point(f, c)
By line_inequality on perpendicular_bisector(F, I), f, D we get f != perpendicular_bisector(F, I)
By line_containment_inequality on line_circle_tangent_point(h, c), midpoint(E, G), h we get midpoint(E, G) != line_circle_tangent_point(h, c)
By line_inequality on perpendicular_bisector(F, I), h, D we get h != perpendicular_bisector(F, I)
By line_inequality on Line(E, projection(F, j)), i, E we get i != Line(E, projection(F, j))
By line_inequality on perpendicular_bisector(F, I), Line(E, G), D we get Line(E, G) != perpendicular_bisector(F, I)
By line_inequality on Line(G, projection(F, j)), j, G we get j != Line(G, projection(F, j))
By line_containment_inequality on midpoint(E, I), H, Line(E, I) we get H != midpoint(E, I)
By line_containment_inequality on midpoint(E, I), G, Line(E, I) we get G != midpoint(E, I)
By line_inequality on Line(G, projection(F, j)), Line(E, I), G we get Line(E, I) != Line(G, projection(F, j))
By line_inequality on Line(E, projection(F, j)), Line(F, I), E we get Line(F, I) != Line(E, projection(F, j))
By line_inequality on perpendicular_bisector(F, I), Line(E, H), D we get Line(E, H) != perpendicular_bisector(F, I)
By line_inequality on Line(G, projection(F, j)), Line(D, F), G we get Line(D, F) != Line(G, projection(F, j))
By line_containment_inequality on line_circle_tangent_point(h, c), midpoint(F, G), h we get midpoint(F, G) != line_circle_tangent_point(h, c)
By line_inequality on perpendicular_bisector(F, I), Line(E, F), D we get Line(E, F) != perpendicular_bisector(F, I)
By line_inequality on Line(E, projection(F, j)), j, E we get j != Line(E, projection(F, j))
By line_containment_inequality on line_circle_tangent_point(g, c), J, g we get J != line_circle_tangent_point(g, c)
By line_containment_inequality on line_circle_tangent_point(g, c), D, g we get D != line_circle_tangent_point(g, c)
By line_containment_inequality on line_circle_tangent_point(g, c), midpoint(E, G), g we get midpoint(E, G) != line_circle_tangent_point(g, c)
By line_containment_inequality on line_circle_tangent_point(f, c), C, f we get C != line_circle_tangent_point(f, c)
By line_inequality on perpendicular_bisector(G, I), k, D we get k != perpendicular_bisector(G, I)
By line_containment_inequality on projection(F, Line(D, J)), midpoint(E, G), Line(D, J) we get midpoint(E, G) != projection(F, Line(D, J))
By line_containment_inequality on line_circle_tangent_point(g, c), A, g we get A != line_circle_tangent_point(g, c)
By line_containment_inequality on line_circle_tangent_point(f, c), I, f we get I != line_circle_tangent_point(f, c)
By line_inequality on Line(E, projection(F, j)), k, E we get k != Line(E, projection(F, j))
By line_circle_intersection_has_at_most_two_points_0 on D, H, midpoint(E, G), d we get midpoint(E, G) not in d
By line_containment_inequality on midpoint(E, I), C, Line(E, I) we get C != midpoint(E, I)
By line_inequality on Line(E, projection(F, j)), Line(D, J), E we get Line(D, J) != Line(E, projection(F, j))
By line_containment_inequality on line_circle_tangent_point(f, c), midpoint(E, G), f we get midpoint(E, G) != line_circle_tangent_point(f, c)
By tangent_chord_angle_v1 on E, B, midpoint(E, G), D we get tangent(Line(D, E), Circle(B, E, midpoint(E, G)))
By internal_angle_bisector_definition_v0_r on midpoint(E, G), D, midpoint(E, G), B we get Line(B, D) == internal_angle_bisector(midpoint(E, G), B, midpoint(E, G))
By external_angle_bisector_definition_v0_r on D, F, D, midpoint(F, G) we get Line(F, midpoint(F, G)) == external_angle_bisector(D, midpoint(F, G), D)
By tangent_chord_angle_v1 on G, A, midpoint(F, G), D we get tangent(Line(D, G), Circle(A, G, midpoint(F, G)))
By collinear_definition on F, I, midpoint(F, I) we get I in Line(F, midpoint(F, I)), midpoint(F, I) in Line(F, I), Line(F, I) == Line(F, midpoint(F, I)), 0 == 2 * angle(I, F, midpoint(F, I)) mod 360
By tangent_chord_angle_v1 on G, D, midpoint(E, G), B we get tangent(Line(B, G), Circle(D, G, midpoint(E, G)))
By tangent_chord_angle_v1 on E, D, midpoint(E, G), B we get tangent(Line(B, E), Circle(D, E, midpoint(E, G)))
By external_angle_bisector_definition_v0_r on H, midpoint(E, G), B, D we get Line(D, midpoint(E, G)) == external_angle_bisector(B, D, H)
By tangent_chord_angle_v1 on G, D, midpoint(F, G), A we get tangent(Line(A, G), Circle(D, G, midpoint(F, G)))
By external_angle_bisector_definition_v0_r on G, D, G, midpoint(E, G) we get Line(D, midpoint(E, G)) == external_angle_bisector(G, midpoint(E, G), G)
By tangent_chord_angle_v0 on G, D, midpoint(E, G), A we get tangent(Line(A, G), Circle(D, G, midpoint(E, G)))
By external_angle_bisector_definition_v0_r on B, G, B, midpoint(E, G) we get Line(G, midpoint(E, G)) == external_angle_bisector(B, midpoint(E, G), B)
By tangent_chord_angle_v1 on F, A, midpoint(F, G), D we get tangent(Line(D, F), Circle(A, F, midpoint(F, G)))
By tangent_chord_angle_v0 on F, D, midpoint(F, G), J we get tangent(Line(F, J), Circle(D, F, midpoint(F, G)))
By external_angle_bisector_definition_v0_r on D, G, D, midpoint(E, G) we get Line(G, midpoint(E, G)) == external_angle_bisector(D, midpoint(E, G), D)
By external_angle_bisector_definition_v0_r on F, A, F, midpoint(F, G) we get Line(A, midpoint(F, G)) == external_angle_bisector(F, midpoint(F, G), F)
By external_angle_bisector_definition_v0_r on B, H, D, midpoint(E, G) we get Line(H, midpoint(E, G)) == external_angle_bisector(B, midpoint(E, G), D)
By internal_angle_bisector_definition_v0_r on midpoint(E, G), D, midpoint(E, G), H we get Line(D, H) == internal_angle_bisector(midpoint(E, G), H, midpoint(E, G))
By external_angle_bisector_definition_v0 on B, midpoint(E, F), J, C we get 180 == angle(B, C, midpoint(E, F)) + angle(J, C, midpoint(E, F)) mod 360
By external_angle_bisector_definition_v0_r on F, D, F, midpoint(F, G) we get Line(D, midpoint(F, G)) == external_angle_bisector(F, midpoint(F, G), F)
By tangent_chord_angle_v1 on F, D, midpoint(F, G), H we get tangent(Line(F, H), Circle(D, F, midpoint(F, G)))
By tangent_chord_angle_v1 on F, D, midpoint(F, G), A we get tangent(Line(A, F), Circle(D, F, midpoint(F, G)))
By external_angle_bisector_definition_v0 on E, midpoint(E, F), J, C we get 180 == angle(E, C, midpoint(E, F)) + angle(J, C, midpoint(E, F)) mod 360
By internal_angle_bisector_definition_v0 on I, D, E, midpoint(E, I) we get angle(D, midpoint(E, I), E) == angle(I, midpoint(E, I), D) mod 360
By tangent_chord_angle_v1 on G, B, midpoint(E, G), D we get tangent(Line(D, G), Circle(B, G, midpoint(E, G)))
By isosceles_triangle_altitude_v3 on midpoint(G, I), I, G we get identical(perpendicular_bisector(G, I), internal_angle_bisector(G, midpoint(G, I), I), perpendicular_line(midpoint(G, I), Line(G, I)))
By external_angle_bisector_definition_v0_r on G, B, G, midpoint(E, G) we get Line(B, midpoint(E, G)) == external_angle_bisector(G, midpoint(E, G), G)
By external_angle_bisector_definition_v0_r on H, E, H, midpoint(E, G) we get Line(E, midpoint(E, G)) == external_angle_bisector(H, midpoint(E, G), H)
By external_angle_bisector_definition_v0_r on H, G, H, midpoint(E, G) we get Line(G, midpoint(E, G)) == external_angle_bisector(H, midpoint(E, G), H)
By external_angle_bisector_definition_v0_r on A, F, A, midpoint(F, G) we get Line(F, midpoint(F, G)) == external_angle_bisector(A, midpoint(F, G), A)
By perpendicular_angle_conditions_v0 on E, midpoint(E, F), C we get angle(E, midpoint(E, F), C) == orientation(C, E, midpoint(E, F)) mod 360
By tangent_chord_angle_v0 on F, D, midpoint(F, G), C we get tangent(Line(C, F), Circle(D, F, midpoint(F, G)))
By external_angle_bisector_definition_v0_r on G, A, G, midpoint(F, G) we get Line(A, midpoint(F, G)) == external_angle_bisector(G, midpoint(F, G), G)
By internal_angle_bisector_definition_v0_r on D, midpoint(E, G), H, B we get Line(B, midpoint(E, G)) == internal_angle_bisector(D, B, H)
By internal_angle_bisector_definition_v0_r on midpoint(E, G), B, midpoint(E, G), H we get Line(B, H) == internal_angle_bisector(midpoint(E, G), H, midpoint(E, G))
By external_angle_bisector_definition_v0_r on A, G, A, midpoint(F, G) we get Line(G, midpoint(F, G)) == external_angle_bisector(A, midpoint(F, G), A)
By external_angle_bisector_definition_v0_r on D, G, H, midpoint(E, G) we get Line(G, midpoint(E, G)) == external_angle_bisector(D, midpoint(E, G), H)
By internal_angle_bisector_definition_v0 on F, D, E, midpoint(E, F) we get angle(D, midpoint(E, F), E) == angle(F, midpoint(E, F), D) mod 360
By external_angle_bisector_definition_v0_r on G, H, G, midpoint(E, G) we get Line(H, midpoint(E, G)) == external_angle_bisector(G, midpoint(E, G), G)
By perpendicular_angle_conditions_v0 on C, midpoint(E, F), E we get angle(C, midpoint(E, F), E) == orientation(C, midpoint(E, F), E) mod 360
By tangent_chord_angle_v0 on E, D, midpoint(E, G), C we get tangent(Line(C, E), Circle(D, E, midpoint(E, G)))
By internal_angle_bisector_definition_v0_r on I, E, I, midpoint(E, I) we get Line(E, midpoint(E, I)) == internal_angle_bisector(I, midpoint(E, I), I)
By perpendicular_angle_conditions_v0 on F, midpoint(E, F), C we get angle(F, midpoint(E, F), C) == orientation(C, F, midpoint(E, F)) mod 360
By internal_angle_bisector_definition_v0_r on A, G, D, midpoint(F, G) we get Line(G, midpoint(F, G)) == internal_angle_bisector(A, midpoint(F, G), D)
By collinear_definition on C, D, midpoint(E, F) we get D in Line(C, midpoint(E, F)), midpoint(E, F) in Line(C, D), Line(C, D) == Line(C, midpoint(E, F)), 0 == 2 * angle(D, C, midpoint(E, F)) mod 360
By reverse_direction on G, projection(F, j) we get 180 == direction(G, projection(F, j)) - direction(projection(F, j), G) mod 360
By internal_angle_bisector_definition_v0_r on D, B, H, midpoint(E, G) we get Line(B, midpoint(E, G)) == internal_angle_bisector(D, midpoint(E, G), H)
By internal_angle_bisector_definition_v0 on I, midpoint(E, I), E, D we get angle(I, D, midpoint(E, I)) == angle(midpoint(E, I), D, E) mod 360
By external_angle_bisector_definition_v0_r on D, E, H, midpoint(E, G) we get Line(E, midpoint(E, G)) == external_angle_bisector(D, midpoint(E, G), H)
By external_angle_bisector_definition_v0_r on E, H, E, midpoint(E, G) we get Line(H, midpoint(E, G)) == external_angle_bisector(E, midpoint(E, G), E)
By external_angle_bisector_definition_v0_r on E, D, E, midpoint(E, G) we get Line(D, midpoint(E, G)) == external_angle_bisector(E, midpoint(E, G), E)
By log_of_2_times_distance on I, F, I, midpoint(F, I) we get log(distance(F, I)) == 0.6931471805599453 + log(distance(I, midpoint(F, I)))
By internal_angle_bisector_definition_v0_r on B, midpoint(E, G), D, H we get Line(H, midpoint(E, G)) == internal_angle_bisector(B, H, D)
By internal_angle_bisector_definition_v0_r on D, E, B, midpoint(E, G) we get Line(E, midpoint(E, G)) == internal_angle_bisector(B, midpoint(E, G), D)
By external_angle_bisector_definition_v0_r on H, D, B, midpoint(E, G) we get Line(D, midpoint(E, G)) == external_angle_bisector(B, midpoint(E, G), H)
By internal_angle_bisector_definition_v0_r on midpoint(E, I), I, midpoint(E, I), E we get Line(E, I) == internal_angle_bisector(midpoint(E, I), E, midpoint(E, I))
By internal_angle_bisector_definition_v0_r on midpoint(E, G), H, midpoint(E, G), D we get Line(D, H) == internal_angle_bisector(midpoint(E, G), D, midpoint(E, G))
By tangent_chord_angle_v0 on G, D, midpoint(F, G), B we get tangent(Line(B, G), Circle(D, G, midpoint(F, G)))
By internal_angle_bisector_definition_v0_r on H, B, H, midpoint(E, G) we get Line(B, midpoint(E, G)) == internal_angle_bisector(H, midpoint(E, G), H)
By perpendicular_lines_draw_intersection on perpendicular_bisector(F, I), Line(F, I) we get exists(line_intersection(Line(F, I), perpendicular_bisector(F, I)))
By internal_angle_bisector_definition_v0 on E, midpoint(E, F), A, C we get angle(E, C, midpoint(E, F)) == angle(midpoint(E, F), C, A) mod 360
By internal_angle_bisector_definition_v0 on H, midpoint(E, F), B, C we get angle(H, C, midpoint(E, F)) == angle(midpoint(E, F), C, B) mod 360
By internal_angle_bisector_definition_v0 on E, midpoint(E, F), F, D we get angle(E, D, midpoint(E, F)) == angle(midpoint(E, F), D, F) mod 360
By log_of_2_times_distance on I, G, I, midpoint(G, I) we get log(distance(G, I)) == 0.6931471805599453 + log(distance(I, midpoint(G, I)))
By internal_angle_bisector_definition_v0_r on midpoint(F, G), A, midpoint(F, G), D we get Line(A, D) == internal_angle_bisector(midpoint(F, G), D, midpoint(F, G))
By log_of_2_times_distance on I, F, F, midpoint(F, I) we get log(distance(F, I)) == 0.6931471805599453 + log(distance(F, midpoint(F, I)))
By internal_angle_bisector_definition_v0_r on E, midpoint(E, F), E, F we get Line(F, midpoint(E, F)) == internal_angle_bisector(E, F, E)
By isosceles_triangle_altitude_v1 on midpoint(G, I), I, G we get identical(perpendicular_bisector(G, I), internal_angle_bisector(G, midpoint(G, I), I), perpendicular_line(midpoint(G, I), Line(G, I)))
By external_angle_bisector_definition_v0_r on E, B, E, midpoint(E, G) we get Line(B, midpoint(E, G)) == external_angle_bisector(E, midpoint(E, G), E)
By external_angle_bisector_definition_v0_r on B, E, B, midpoint(E, G) we get Line(E, midpoint(E, G)) == external_angle_bisector(B, midpoint(E, G), B)
By internal_angle_bisector_definition_v0 on A, midpoint(E, F), B, C we get angle(A, C, midpoint(E, F)) == angle(midpoint(E, F), C, B) mod 360
By internal_angle_bisector_definition_v0_r on H, D, H, midpoint(E, G) we get Line(D, midpoint(E, G)) == internal_angle_bisector(H, midpoint(E, G), H)
By external_angle_bisector_definition_v0_r on G, D, G, midpoint(F, G) we get Line(D, midpoint(F, G)) == external_angle_bisector(G, midpoint(F, G), G)
By collinear_definition on D, center(d), midpoint(E, I) we get center(d) in Line(D, midpoint(E, I)), midpoint(E, I) in Line(D, center(d)), Line(D, center(d)) == Line(D, midpoint(E, I)), 0 == 2 * angle(center(d), D, midpoint(E, I)) mod 360
By external_angle_bisector_definition_v0_r on D, G, D, midpoint(F, G) we get Line(G, midpoint(F, G)) == external_angle_bisector(D, midpoint(F, G), D)
By isosceles_triangle_midpoint on D, F, I we get midpoint(F, I) in median(D, F, I)
By internal_angle_bisector_definition_v0_r on H, G, B, midpoint(E, G) we get Line(G, midpoint(E, G)) == internal_angle_bisector(B, midpoint(E, G), H)
By internal_angle_bisector_definition_v0_r on B, D, B, midpoint(E, G) we get Line(D, midpoint(E, G)) == internal_angle_bisector(B, midpoint(E, G), B)
By power_of_a_point_in_circle on line_circle_tangent_point(h, c), c we get 0 == power_of_a_point(line_circle_tangent_point(h, c), c)
By external_angle_bisector_definition_v0_r on D, E, D, midpoint(E, G) we get Line(E, midpoint(E, G)) == external_angle_bisector(D, midpoint(E, G), D)
By internal_angle_bisector_definition_v0_r on D, H, D, midpoint(E, G) we get Line(H, midpoint(E, G)) == internal_angle_bisector(D, midpoint(E, G), D)
By internal_angle_bisector_definition_v0 on F, C, E, midpoint(E, F) we get angle(C, midpoint(E, F), E) == angle(F, midpoint(E, F), C) mod 360
By internal_angle_bisector_definition_v0_r on A, midpoint(F, G), A, D we get Line(D, midpoint(F, G)) == internal_angle_bisector(A, D, A)
By perpendicular_angle_conditions_v0 on F, midpoint(E, F), D we get angle(F, midpoint(E, F), D) == orientation(D, F, midpoint(E, F)) mod 360
By perpendicular_bisector_properties on F, I we get perpendicular(Line(F, I), perpendicular_bisector(F, I)), midpoint(F, I) == line_intersection(Line(F, I), perpendicular_bisector(F, I))
By internal_angle_bisector_definition_v0_r on F, midpoint(E, F), F, E we get Line(E, midpoint(E, F)) == internal_angle_bisector(F, E, F)
By power_of_a_point_in_circle on H, d we get 0 == power_of_a_point(H, d)
By perpendicular_angle_conditions_v0 on C, midpoint(E, F), F we get angle(C, midpoint(E, F), F) == orientation(C, midpoint(E, F), F) mod 360
By internal_angle_bisector_definition_v0_r on D, midpoint(F, G), D, A we get Line(A, midpoint(F, G)) == internal_angle_bisector(D, A, D)
By internal_angle_bisector_definition_v0_r on F, E, F, midpoint(E, F) we get Line(E, midpoint(E, F)) == internal_angle_bisector(F, midpoint(E, F), F)
By power_of_a_point_in_circle on line_circle_tangent_point(f, c), c we get 0 == power_of_a_point(line_circle_tangent_point(f, c), c)
By collinear_definition on I, F, midpoint(F, I) we get F in Line(I, midpoint(F, I)), midpoint(F, I) in Line(F, I), Line(F, I) == Line(I, midpoint(F, I)), 0 == 2 * angle(F, I, midpoint(F, I)) mod 360
By perpendicular_lines_draw_intersection on k, perpendicular_bisector(G, I) we get exists(line_intersection(k, perpendicular_bisector(G, I)))
By collinear_definition on F, midpoint(F, I), I we get midpoint(F, I) in Line(F, I), I in Line(F, midpoint(F, I)), Line(F, I) == Line(F, midpoint(F, I)), 0 == 2 * angle(midpoint(F, I), F, I) mod 360
By log_of_2_times_distance on G, I, midpoint(G, I), G we get log(distance(G, I)) == 0.6931471805599453 + log(distance(G, midpoint(G, I)))
By collinear_definition on G, I, midpoint(G, I) we get I in Line(G, midpoint(G, I)), midpoint(G, I) in Line(G, I), Line(G, I) == Line(G, midpoint(G, I)), 0 == 2 * angle(I, G, midpoint(G, I)) mod 360
By power_of_a_point_in_circle on line_circle_tangent_point(g, c), c we get 0 == power_of_a_point(line_circle_tangent_point(g, c), c)
By internal_angle_bisector_definition_v0_r on A, D, A, midpoint(F, G) we get Line(D, midpoint(F, G)) == internal_angle_bisector(A, midpoint(F, G), A)
By internal_angle_bisector_definition_v0 on E, midpoint(E, I), I, D we get angle(E, D, midpoint(E, I)) == angle(midpoint(E, I), D, I) mod 360
By collinear_definition on D, C, midpoint(E, F) we get C in Line(D, midpoint(E, F)), midpoint(E, F) in Line(C, D), Line(C, D) == Line(D, midpoint(E, F)), 0 == 2 * angle(C, D, midpoint(E, F)) mod 360
By perpendicular_angle_conditions_v0 on D, midpoint(E, F), F we get angle(D, midpoint(E, F), F) == orientation(D, midpoint(E, F), F) mod 360
By internal_angle_bisector_definition_v0_r on E, midpoint(E, I), E, I we get Line(I, midpoint(E, I)) == internal_angle_bisector(E, I, E)
By internal_angle_bisector_definition_v0 on F, midpoint(E, F), E, D we get angle(F, D, midpoint(E, F)) == angle(midpoint(E, F), D, E) mod 360
By collinear_definition on I, G, midpoint(G, I) we get G in Line(I, midpoint(G, I)), midpoint(G, I) in Line(G, I), Line(G, I) == Line(I, midpoint(G, I)), 0 == 2 * angle(G, I, midpoint(G, I)) mod 360
By perpendicular_angle_conditions_v0 on D, midpoint(E, I), I we get angle(D, midpoint(E, I), I) == orientation(D, midpoint(E, I), I) mod 360
By internal_angle_bisector_definition_v0 on F, midpoint(E, F), B, C we get angle(F, C, midpoint(E, F)) == angle(midpoint(E, F), C, B) mod 360
By internal_angle_bisector_definition_v0 on F, midpoint(E, F), E, C we get angle(F, C, midpoint(E, F)) == angle(midpoint(E, F), C, E) mod 360
By collinear_definition on I, midpoint(F, I), F we get midpoint(F, I) in Line(F, I), F in Line(I, midpoint(F, I)), Line(F, I) == Line(I, midpoint(F, I)), 0 == 2 * angle(midpoint(F, I), I, F) mod 360
By internal_angle_bisector_definition_v0_r on I, midpoint(E, I), I, E we get Line(E, midpoint(E, I)) == internal_angle_bisector(I, E, I)
By perpendicular_angle_conditions_v0 on E, midpoint(E, F), D we get angle(E, midpoint(E, F), D) == orientation(D, E, midpoint(E, F)) mod 360
By collinear_definition on D, midpoint(E, F), C we get midpoint(E, F) in Line(C, D), C in Line(D, midpoint(E, F)), Line(C, D) == Line(D, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), D, C) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(E, F), F, midpoint(E, F), E we get Line(E, F) == internal_angle_bisector(midpoint(E, F), E, midpoint(E, F))
By perpendicular_angle_conditions_v0 on E, midpoint(E, I), D we get angle(E, midpoint(E, I), D) == orientation(D, E, midpoint(E, I)) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(E, G), H, midpoint(E, G), B we get Line(B, H) == internal_angle_bisector(midpoint(E, G), B, midpoint(E, G))
By internal_angle_bisector_definition_v0_r on D, G, B, midpoint(E, G) we get Line(G, midpoint(E, G)) == internal_angle_bisector(B, midpoint(E, G), D)
By internal_angle_bisector_definition_v0_r on D, B, D, midpoint(E, G) we get Line(B, midpoint(E, G)) == internal_angle_bisector(D, midpoint(E, G), D)
By internal_angle_bisector_definition_v0 on E, D, F, midpoint(E, F) we get angle(D, midpoint(E, F), F) == angle(E, midpoint(E, F), D) mod 360
By internal_angle_bisector_definition_v0_r on A, F, D, midpoint(F, G) we get Line(F, midpoint(F, G)) == internal_angle_bisector(A, midpoint(F, G), D)
By internal_angle_bisector_definition_v0 on A, midpoint(E, F), E, C we get angle(A, C, midpoint(E, F)) == angle(midpoint(E, F), C, E) mod 360
By internal_angle_bisector_definition_v0_r on E, F, E, midpoint(E, F) we get Line(F, midpoint(E, F)) == internal_angle_bisector(E, midpoint(E, F), E)
By internal_angle_bisector_definition_v0_r on B, H, B, midpoint(E, G) we get Line(H, midpoint(E, G)) == internal_angle_bisector(B, midpoint(E, G), B)
By perpendicular_angle_conditions_v0 on D, midpoint(E, F), E we get angle(D, midpoint(E, F), E) == orientation(D, midpoint(E, F), E) mod 360
By internal_angle_bisector_definition_v0 on B, midpoint(E, F), A, C we get angle(B, C, midpoint(E, F)) == angle(midpoint(E, F), C, A) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(E, G), B, midpoint(E, G), D we get Line(B, D) == internal_angle_bisector(midpoint(E, G), D, midpoint(E, G))
By collinear_definition on I, midpoint(G, I), G we get midpoint(G, I) in Line(G, I), G in Line(I, midpoint(G, I)), Line(G, I) == Line(I, midpoint(G, I)), 0 == 2 * angle(midpoint(G, I), I, G) mod 360
By internal_angle_bisector_definition_v0_r on D, A, D, midpoint(F, G) we get Line(A, midpoint(F, G)) == internal_angle_bisector(D, midpoint(F, G), D)
By internal_angle_bisector_definition_v0 on E, midpoint(E, F), H, C we get angle(E, C, midpoint(E, F)) == angle(midpoint(E, F), C, H) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(E, I), E, midpoint(E, I), I we get Line(E, I) == internal_angle_bisector(midpoint(E, I), I, midpoint(E, I))
By internal_angle_bisector_definition_v0_r on midpoint(F, G), D, midpoint(F, G), A we get Line(A, D) == internal_angle_bisector(midpoint(F, G), A, midpoint(F, G))
By perpendicular_angle_conditions_v0 on I, midpoint(E, I), D we get angle(I, midpoint(E, I), D) == orientation(D, I, midpoint(E, I)) mod 360
By internal_angle_bisector_definition_v0 on B, midpoint(E, F), H, C we get angle(B, C, midpoint(E, F)) == angle(midpoint(E, F), C, H) mod 360
By perpendicular_bisector_properties on G, I we get perpendicular(Line(G, I), perpendicular_bisector(G, I)), midpoint(G, I) == line_intersection(Line(G, I), perpendicular_bisector(G, I))
By perpendicular_angle_conditions_v0 on D, midpoint(E, I), E we get angle(D, midpoint(E, I), E) == orientation(D, midpoint(E, I), E) mod 360
By internal_angle_bisector_definition_v0 on E, midpoint(E, F), F, C we get angle(E, C, midpoint(E, F)) == angle(midpoint(E, F), C, F) mod 360
By isosceles_triangle_midpoint on D, I, G we get midpoint(G, I) in median(D, G, I)
By internal_angle_bisector_definition_v0 on H, midpoint(E, F), E, C we get angle(H, C, midpoint(E, F)) == angle(midpoint(E, F), C, E) mod 360
By internal_angle_bisector_definition_v0_r on B, E, H, midpoint(E, G) we get Line(E, midpoint(E, G)) == internal_angle_bisector(B, midpoint(E, G), H)
By reverse_direction on E, projection(F, j) we get 180 == direction(E, projection(F, j)) - direction(projection(F, j), E) mod 360
By internal_angle_bisector_definition_v0_r on E, I, E, midpoint(E, I) we get Line(I, midpoint(E, I)) == internal_angle_bisector(E, midpoint(E, I), E)
By collinear_definition on G, midpoint(G, I), I we get midpoint(G, I) in Line(G, I), I in Line(G, midpoint(G, I)), Line(G, I) == Line(G, midpoint(G, I)), 0 == 2 * angle(midpoint(G, I), G, I) mod 360
By internal_angle_bisector_definition_v0 on E, D, I, midpoint(E, I) we get angle(D, midpoint(E, I), I) == angle(E, midpoint(E, I), D) mod 360
By isosceles_triangle_altitude_v3 on midpoint(G, I), G, I we get identical(perpendicular_bisector(G, I), internal_angle_bisector(G, midpoint(G, I), I), perpendicular_line(midpoint(G, I), Line(G, I)))
By internal_angle_bisector_definition_v0 on E, C, F, midpoint(E, F) we get angle(C, midpoint(E, F), F) == angle(E, midpoint(E, F), C) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(E, F), E, midpoint(E, F), F we get Line(E, F) == internal_angle_bisector(midpoint(E, F), F, midpoint(E, F))
By collinear_definition on C, midpoint(E, F), D we get midpoint(E, F) in Line(C, D), D in Line(C, midpoint(E, F)), Line(C, D) == Line(C, midpoint(E, F)), 0 == 2 * angle(midpoint(E, F), C, D) mod 360
By collinear_definition on D, midpoint(E, I), center(d) we get midpoint(E, I) in Line(D, center(d)), center(d) in Line(D, midpoint(E, I)), Line(D, center(d)) == Line(D, midpoint(E, I)), 0 == 2 * angle(midpoint(E, I), D, center(d)) mod 360
By internal_angle_bisector_definition_v0 on B, midpoint(E, F), F, C we get angle(B, C, midpoint(E, F)) == angle(midpoint(E, F), C, F) mod 360
By isosceles_triangle_altitude_v3 on midpoint(F, I), I, F we get identical(perpendicular_bisector(F, I), internal_angle_bisector(F, midpoint(F, I), I), perpendicular_line(midpoint(F, I), Line(F, I)))
By isosceles_triangle_altitude_v1 on midpoint(G, I), G, I we get identical(perpendicular_bisector(G, I), internal_angle_bisector(G, midpoint(G, I), I), perpendicular_line(midpoint(G, I), Line(G, I)))
By isosceles_triangle_altitude_v1 on midpoint(F, I), I, F we get identical(perpendicular_bisector(F, I), internal_angle_bisector(F, midpoint(F, I), I), perpendicular_line(midpoint(F, I), Line(F, I)))
By isosceles_triangle_altitude_v1 on midpoint(F, I), F, I we get identical(perpendicular_bisector(F, I), internal_angle_bisector(F, midpoint(F, I), I), perpendicular_line(midpoint(F, I), Line(F, I)))
By isosceles_triangle_altitude_v3 on midpoint(F, I), F, I we get identical(perpendicular_bisector(F, I), internal_angle_bisector(F, midpoint(F, I), I), perpendicular_line(midpoint(F, I), Line(F, I)))
By altitude_definition on D, I, F, perpendicular_bisector(F, I) we get altitude(D, F, I) == perpendicular_bisector(F, I)
By radical_axis_definition_v0 on midpoint(E, I), d, c we get power_of_a_point(midpoint(E, I), c) == power_of_a_point(midpoint(E, I), d)
By altitude_definition on F, midpoint(E, G), D, altitude(F, B, D) we get altitude(F, B, D) == altitude(F, D, midpoint(E, G))
By altitude_definition on H, E, midpoint(E, G), j we get j == altitude(H, E, midpoint(E, G))
By power_of_a_point_definition on G, H, I, d we get log(power_of_a_point(G, d)) == log(distance(G, H)) + log(distance(G, I))
By altitude_definition on F, A, midpoint(F, G), Line(F, G) we get Line(F, G) == altitude(F, A, midpoint(F, G))
By altitude_definition on G, A, midpoint(F, G), Line(F, G) we get Line(F, G) == altitude(G, A, midpoint(F, G))
By isosceles_triangle_altitude_v3 on D, G, I we get identical(perpendicular_bisector(G, I), internal_angle_bisector(G, D, I), perpendicular_line(D, Line(G, I)))
By altitude_definition on D, F, midpoint(F, G), i we get i == altitude(D, F, midpoint(F, G))
By collinear_definition on midpoint(G, I), I, G we get I in Line(G, midpoint(G, I)), G in Line(I, midpoint(G, I)), Line(G, midpoint(G, I)) == Line(I, midpoint(G, I)), 0 == 2 * angle(I, midpoint(G, I), G) mod 360
By altitude_definition on F, B, midpoint(E, G), altitude(F, B, D) we get altitude(F, B, D) == altitude(F, B, midpoint(E, G))
By altitude_definition on D, midpoint(E, G), E, j we get j == altitude(D, E, midpoint(E, G))
By altitude_definition on D, G, H, perpendicular_bisector(G, I) we get altitude(D, G, H) == perpendicular_bisector(G, I)
By isosceles_triangle_altitude_v3 on D, F, I we get identical(perpendicular_bisector(F, I), internal_angle_bisector(F, D, I), perpendicular_line(D, Line(F, I)))
By altitude_definition on D, H, I, perpendicular_bisector(G, I) we get altitude(D, H, I) == perpendicular_bisector(G, I)
By isosceles_triangle_properties on midpoint(G, I), G, I we get distance(G, midpoint(G, I)) == distance(I, midpoint(G, I)), angle(G, I, midpoint(G, I)) == angle(midpoint(G, I), G, I) mod 360
By altitude_definition on D, I, G, perpendicular_bisector(G, I) we get altitude(D, G, I) == perpendicular_bisector(G, I)
By isosceles_triangle_properties on midpoint(G, I), I, G we get distance(G, midpoint(G, I)) == distance(I, midpoint(G, I)), angle(I, G, midpoint(G, I)) == angle(midpoint(G, I), I, G) mod 360
By isosceles_triangle_properties on midpoint(F, I), I, F we get distance(F, midpoint(F, I)) == distance(I, midpoint(F, I)), angle(I, F, midpoint(F, I)) == angle(midpoint(F, I), I, F) mod 360
By altitude_definition on G, B, midpoint(E, G), Line(E, G) we get Line(E, G) == altitude(G, B, midpoint(E, G))
By altitude_definition on H, G, midpoint(E, G), j we get j == altitude(H, G, midpoint(E, G))
By altitude_definition on D, G, midpoint(F, G), i we get i == altitude(D, G, midpoint(F, G))
By power_of_a_point_definition on F, J, H, d we get log(power_of_a_point(F, d)) == log(distance(F, J)) + log(distance(F, H))
By altitude_definition on D, midpoint(E, G), G, j we get j == altitude(D, G, midpoint(E, G))
By power_of_a_point_definition on midpoint(E, I), I, E, d we get log(power_of_a_point(midpoint(E, I), d)) == log(distance(I, midpoint(E, I))) + log(distance(E, midpoint(E, I)))
By altitude_definition on E, midpoint(E, G), D, Line(E, G) we get Line(E, G) == altitude(E, D, midpoint(E, G))
By altitude_definition on A, midpoint(F, G), F, i we get i == altitude(A, F, midpoint(F, G))
By altitude_definition on B, midpoint(E, G), G, j we get j == altitude(B, G, midpoint(E, G))
By collinear_definition on midpoint(G, I), G, I we get G in Line(I, midpoint(G, I)), I in Line(G, midpoint(G, I)), Line(G, midpoint(G, I)) == Line(I, midpoint(G, I)), 0 == 2 * angle(G, midpoint(G, I), I) mod 360
By collinear_definition on midpoint(F, I), I, F we get I in Line(F, midpoint(F, I)), F in Line(I, midpoint(F, I)), Line(F, midpoint(F, I)) == Line(I, midpoint(F, I)), 0 == 2 * angle(I, midpoint(F, I), F) mod 360
By altitude_definition on B, midpoint(E, G), E, j we get j == altitude(B, E, midpoint(E, G))
By power_of_a_point_definition on midpoint(E, F), E, F, c we get log(power_of_a_point(midpoint(E, F), c)) == log(distance(E, midpoint(E, F))) + log(distance(F, midpoint(E, F)))
By power_of_a_point_definition on midpoint(E, I), E, I, c we get log(power_of_a_point(midpoint(E, I), c)) == log(distance(E, midpoint(E, I))) + log(distance(I, midpoint(E, I)))
By altitude_definition on A, midpoint(F, G), G, i we get i == altitude(A, G, midpoint(F, G))
By isosceles_triangle_properties on midpoint(F, I), F, I we get distance(F, midpoint(F, I)) == distance(I, midpoint(F, I)), angle(F, I, midpoint(F, I)) == angle(midpoint(F, I), F, I) mod 360
By collinear_definition on midpoint(E, F), C, D we get C in Line(D, midpoint(E, F)), D in Line(C, midpoint(E, F)), Line(C, midpoint(E, F)) == Line(D, midpoint(E, F)), 0 == 2 * angle(C, midpoint(E, F), D) mod 360
By altitude_definition on G, D, midpoint(E, G), Line(E, G) we get Line(E, G) == altitude(G, D, midpoint(E, G))
By altitude_definition on E, H, midpoint(E, G), Line(E, G) we get Line(E, G) == altitude(E, H, midpoint(E, G))
By collinear_definition on midpoint(F, I), F, I we get F in Line(I, midpoint(F, I)), I in Line(F, midpoint(F, I)), Line(F, midpoint(F, I)) == Line(I, midpoint(F, I)), 0 == 2 * angle(F, midpoint(F, I), I) mod 360
By altitude_definition on G, D, midpoint(F, G), Line(F, G) we get Line(F, G) == altitude(G, D, midpoint(F, G))
By altitude_definition on F, H, midpoint(E, G), altitude(F, B, D) we get altitude(F, B, D) == altitude(F, H, midpoint(E, G))
By altitude_definition on F, D, midpoint(F, G), Line(F, G) we get Line(F, G) == altitude(F, D, midpoint(F, G))
By isosceles_triangle_altitude_v3 on D, I, F we get identical(perpendicular_bisector(F, I), internal_angle_bisector(F, D, I), perpendicular_line(D, Line(F, I)))
By altitude_definition on G, H, midpoint(E, G), Line(E, G) we get Line(E, G) == altitude(G, H, midpoint(E, G))
By altitude_definition on E, midpoint(E, G), B, Line(E, G) we get Line(E, G) == altitude(E, B, midpoint(E, G))
By collinear_definition on midpoint(E, F), D, C we get D in Line(C, midpoint(E, F)), C in Line(D, midpoint(E, F)), Line(C, midpoint(E, F)) == Line(D, midpoint(E, F)), 0 == 2 * angle(D, midpoint(E, F), C) mod 360
By power_of_a_point_definition on midpoint(E, F), F, E, Circle(C, D, E) we get log(power_of_a_point(midpoint(E, F), Circle(C, D, E))) == log(distance(F, midpoint(E, F))) + log(distance(E, midpoint(E, F)))
By isosceles_triangle_altitude_v3 on D, I, G we get identical(perpendicular_bisector(G, I), internal_angle_bisector(G, D, I), perpendicular_line(D, Line(G, I)))
By power_of_a_point_definition on midpoint(E, F), D, C, Circle(C, D, E) we get log(power_of_a_point(midpoint(E, F), Circle(C, D, E))) == log(distance(D, midpoint(E, F))) + log(distance(C, midpoint(E, F)))
By concyclic_sufficient_conditions_v1 on F, midpoint(F, G), D, midpoint(E, F) we get concyclic(D, F, midpoint(E, F), midpoint(F, G))
By concyclic_sufficient_conditions_v1 on E, midpoint(E, I), D, midpoint(E, G) we get concyclic(D, E, midpoint(E, G), midpoint(E, I))
By concyclic_sufficient_conditions_v1 on D, midpoint(E, G), E, midpoint(E, F) we get concyclic(D, E, midpoint(E, F), midpoint(E, G))
By concyclic_sufficient_conditions_v1 on E, G, A, J we get concyclic(A, E, G, J)
By concyclic_sufficient_conditions_v0 on E, midpoint(E, F), D, midpoint(E, I) we get concyclic(D, E, midpoint(E, F), midpoint(E, I))
By projection_definition on D, midpoint(G, I), k we get midpoint(G, I) == projection(D, k)
By perpendicular_line_definition on midpoint(G, I), k, median(D, G, I) we get k == perpendicular_line(midpoint(G, I), median(D, G, I))
By line_intersection_definition on projection(F, j), j, Line(G, projection(F, j)) we get projection(F, j) == line_intersection(j, Line(G, projection(F, j)))
By line_intersection_definition on projection(F, j), j, Line(E, projection(F, j)) we get projection(F, j) == line_intersection(j, Line(E, projection(F, j)))
By perpendicular_line_definition on midpoint(F, I), Line(F, I), median(D, F, I) we get Line(F, I) == perpendicular_line(midpoint(F, I), median(D, F, I))
By line_unique_intersection_v1 on f, k, G, midpoint(G, I) we get midpoint(G, I) not in f
By line_unique_intersection_v1 on Line(E, F), Line(F, I), F, midpoint(F, I) we get midpoint(F, I) not in Line(E, F)
By line_unique_intersection_v1 on Line(D, I), k, I, midpoint(G, I) we get midpoint(G, I) not in Line(D, I)
By line_unique_intersection_v1 on Line(E, I), Line(F, I), I, midpoint(F, I) we get midpoint(F, I) not in Line(E, I)
By line_unique_intersection_v1 on Line(F, I), k, I, midpoint(G, I) we get midpoint(G, I) not in Line(F, I)
By line_unique_intersection_v1 on median(D, G, I), k, midpoint(G, I), I we get I not in median(D, G, I)
By line_unique_intersection_v1 on Line(I, J), k, I, midpoint(G, I) we get midpoint(G, I) not in Line(I, J)
By line_unique_intersection_v1 on Line(E, I), k, I, midpoint(G, I) we get midpoint(G, I) not in Line(E, I)
By line_unique_intersection_v1 on Line(F, G), Line(F, I), F, midpoint(F, I) we get midpoint(F, I) not in Line(F, G)
By line_unique_intersection_v1 on Line(D, F), Line(F, I), F, midpoint(F, I) we get midpoint(F, I) not in Line(D, F)
By line_unique_intersection_v1 on h, Line(F, I), F, midpoint(F, I) we get midpoint(F, I) not in h
By line_unique_intersection_v1 on median(D, G, I), k, midpoint(G, I), G we get G not in median(D, G, I)
By line_unique_intersection_v1 on k, Line(F, I), I, midpoint(F, I) we get midpoint(F, I) not in k
By line_unique_intersection_v1 on Line(I, J), Line(F, I), I, midpoint(F, I) we get midpoint(F, I) not in Line(I, J)
By line_unique_intersection_v1 on median(D, F, I), Line(F, I), midpoint(F, I), F we get F not in median(D, F, I)
By line_unique_intersection_v1 on Line(E, G), k, G, midpoint(G, I) we get midpoint(G, I) not in Line(E, G)
By line_unique_intersection_v1 on Line(D, I), Line(F, I), I, midpoint(F, I) we get midpoint(F, I) not in Line(D, I)
By line_unique_intersection_v1 on Line(F, G), k, G, midpoint(G, I) we get midpoint(G, I) not in Line(F, G)
By line_unique_intersection_v1 on Line(D, G), k, G, midpoint(G, I) we get midpoint(G, I) not in Line(D, G)
By line_unique_intersection_v1 on median(D, F, I), Line(F, I), midpoint(F, I), I we get I not in median(D, F, I)
By between_implies_orientation on midpoint(F, G), G, midpoint(E, G), E we get orientation(E, midpoint(F, G), midpoint(E, G)) == orientation(G, midpoint(E, G), midpoint(F, G)) mod 360, orientation(E, midpoint(F, G), G) == orientation(G, midpoint(E, G), midpoint(F, G)) mod 360
By between_implies_orientation on midpoint(F, G), E, midpoint(E, F), F we get orientation(E, midpoint(E, F), midpoint(F, G)) == orientation(F, midpoint(F, G), midpoint(E, F)) mod 360, orientation(E, F, midpoint(F, G)) == orientation(E, midpoint(E, F), midpoint(F, G)) mod 360
By between_implies_orientation on midpoint(E, G), G, midpoint(F, G), F we get orientation(F, midpoint(E, G), midpoint(F, G)) == orientation(G, midpoint(F, G), midpoint(E, G)) mod 360, orientation(F, midpoint(E, G), G) == orientation(G, midpoint(F, G), midpoint(E, G)) mod 360
By collinear_and_not_between_implies_orientation on midpoint(E, F), G, E, midpoint(E, G) we get orientation(E, G, midpoint(E, F)) == orientation(E, midpoint(E, G), midpoint(E, F)) mod 360
By collinear_and_not_between_implies_orientation on midpoint(E, I), G, E, midpoint(E, G) we get orientation(E, G, midpoint(E, I)) == orientation(E, midpoint(E, G), midpoint(E, I)) mod 360
By collinear_and_not_between_implies_orientation on midpoint(E, G), midpoint(E, I), I, E we get orientation(E, midpoint(E, G), I) == orientation(I, midpoint(E, I), midpoint(E, G)) mod 360
By collinear_and_not_between_implies_orientation on G, I, E, midpoint(E, I) we get orientation(E, I, G) == orientation(E, midpoint(E, I), G) mod 360
By collinear_and_not_between_implies_orientation on J, I, E, midpoint(E, I) we get orientation(E, I, J) == orientation(E, midpoint(E, I), J) mod 360
By same_angle_v0 on F, E, midpoint(E, F), I we get angle(E, F, I) == angle(midpoint(E, F), F, I) mod 360
By collinear_and_not_between_implies_orientation on midpoint(E, G), midpoint(E, F), F, E we get orientation(E, midpoint(E, G), F) == orientation(F, midpoint(E, F), midpoint(E, G)) mod 360
By same_angle_v0 on F, E, midpoint(E, F), G we get angle(E, F, G) == angle(midpoint(E, F), F, G) mod 360
By collinear_and_not_between_implies_orientation on G, midpoint(E, I), I, E we get orientation(E, G, I) == orientation(G, I, midpoint(E, I)) mod 360
By collinear_and_not_between_implies_orientation on projection(F, j), G, F, midpoint(F, G) we get orientation(F, G, projection(F, j)) == orientation(F, midpoint(F, G), projection(F, j)) mod 360
By collinear_and_not_between_implies_orientation on midpoint(E, F), F, G, midpoint(F, G) we get orientation(F, midpoint(E, F), G) == orientation(G, midpoint(F, G), midpoint(E, F)) mod 360
By same_angle_v0 on E, F, midpoint(E, F), D we get angle(F, E, D) == angle(midpoint(E, F), E, D) mod 360
By collinear_and_not_between_implies_orientation on midpoint(F, G), E, F, midpoint(E, F) we get orientation(E, midpoint(F, G), F) == orientation(F, midpoint(E, F), midpoint(F, G)) mod 360
By same_angle_v0 on E, F, midpoint(E, F), I we get angle(F, E, I) == angle(midpoint(E, F), E, I) mod 360
By collinear_and_not_between_implies_orientation on midpoint(E, G), midpoint(F, G), F, G we get orientation(F, G, midpoint(E, G)) == orientation(F, midpoint(F, G), midpoint(E, G)) mod 360
By same_angle_v0 on E, midpoint(E, F), F, J we get angle(F, E, J) == angle(midpoint(E, F), E, J) mod 360
By same_angle_v0 on F, E, midpoint(E, F), H we get angle(E, F, H) == angle(midpoint(E, F), F, H) mod 360
By between_implies_orientation on D, I, midpoint(F, I), F we get orientation(D, I, midpoint(F, I)) == orientation(D, midpoint(F, I), F) mod 360, orientation(D, I, F) == orientation(D, I, midpoint(F, I)) mod 360
By collinear_and_not_between_implies_orientation on F, E, I, midpoint(E, I) we get orientation(E, F, I) == orientation(F, I, midpoint(E, I)) mod 360
By collinear_and_not_between_implies_orientation on midpoint(E, F), E, G, midpoint(E, G) we get orientation(E, midpoint(E, F), G) == orientation(G, midpoint(E, G), midpoint(E, F)) mod 360
By same_angle_v0 on E, midpoint(E, F), F, G we get angle(F, E, G) == angle(midpoint(E, F), E, G) mod 360
By same_angle_v0 on E, F, midpoint(E, F), C we get angle(F, E, C) == angle(midpoint(E, F), E, C) mod 360
By collinear_and_not_between_implies_orientation on midpoint(F, G), midpoint(E, G), E, G we get orientation(E, G, midpoint(F, G)) == orientation(E, midpoint(E, G), midpoint(F, G)) mod 360
By between_implies_orientation on J, E, midpoint(E, I), I we get orientation(E, midpoint(E, I), J) == orientation(I, J, midpoint(E, I)) mod 360, orientation(E, I, J) == orientation(E, midpoint(E, I), J) mod 360
By between_implies_orientation on B, I, midpoint(E, I), E we get orientation(B, I, midpoint(E, I)) == orientation(B, midpoint(E, I), E) mod 360, orientation(B, I, E) == orientation(B, I, midpoint(E, I)) mod 360
By collinear_and_not_between_implies_orientation on C, E, I, midpoint(E, I) we get orientation(C, I, E) == orientation(C, I, midpoint(E, I)) mod 360
By same_angle_v0 on I, midpoint(E, I), E, D we get angle(E, I, D) == angle(midpoint(E, I), I, D) mod 360
By collinear_and_not_between_implies_orientation on B, I, E, midpoint(E, I) we get orientation(B, E, I) == orientation(B, E, midpoint(E, I)) mod 360
By collinear_and_not_between_implies_orientation on midpoint(E, G), midpoint(E, I), E, I we get orientation(E, I, midpoint(E, G)) == orientation(E, midpoint(E, I), midpoint(E, G)) mod 360
By collinear_and_not_between_implies_orientation on H, midpoint(E, I), E, I we get orientation(E, I, H) == orientation(E, midpoint(E, I), H) mod 360
By between_implies_orientation on A, E, midpoint(E, I), I we get orientation(A, E, midpoint(E, I)) == orientation(A, midpoint(E, I), I) mod 360, orientation(A, E, I) == orientation(A, E, midpoint(E, I)) mod 360
By collinear_and_not_between_implies_orientation on A, midpoint(E, I), I, E we get orientation(A, I, E) == orientation(A, I, midpoint(E, I)) mod 360
By between_implies_orientation on J, I, midpoint(E, I), E we get orientation(E, J, midpoint(E, I)) == orientation(I, midpoint(E, I), J) mod 360, orientation(E, J, I) == orientation(I, midpoint(E, I), J) mod 360
By same_angle_v0 on F, midpoint(E, F), E, C we get angle(E, F, C) == angle(midpoint(E, F), F, C) mod 360
By same_angle_v0 on D, midpoint(E, F), C, E we get angle(C, D, E) == angle(midpoint(E, F), D, E) mod 360
By projection_definition on F, midpoint(F, I), median(D, F, I) we get midpoint(F, I) == projection(F, median(D, F, I))
By collinear_and_not_between_implies_orientation on D, I, G, midpoint(G, I) we get orientation(D, G, I) == orientation(D, G, midpoint(G, I)) mod 360
By between_implies_orientation on midpoint(E, F), G, midpoint(E, G), E we get orientation(E, midpoint(E, F), midpoint(E, G)) == orientation(G, midpoint(E, G), midpoint(E, F)) mod 360, orientation(E, midpoint(E, F), G) == orientation(G, midpoint(E, G), midpoint(E, F)) mod 360
By collinear_and_not_between_implies_orientation on C, midpoint(E, I), E, I we get orientation(C, E, I) == orientation(C, E, midpoint(E, I)) mod 360
By between_implies_orientation on midpoint(E, G), E, midpoint(E, I), I we get orientation(E, midpoint(E, I), midpoint(E, G)) == orientation(I, midpoint(E, G), midpoint(E, I)) mod 360, orientation(E, I, midpoint(E, G)) == orientation(E, midpoint(E, I), midpoint(E, G)) mod 360
By same_angle_v0 on E, midpoint(E, I), I, D we get angle(I, E, D) == angle(midpoint(E, I), E, D) mod 360
By collinear_and_not_between_implies_orientation on projection(F, Line(D, J)), G, E, midpoint(E, G) we get orientation(E, G, projection(F, Line(D, J))) == orientation(E, midpoint(E, G), projection(F, Line(D, J))) mod 360
By collinear_and_not_between_implies_orientation on projection(F, Line(D, J)), G, F, midpoint(F, G) we get orientation(F, G, projection(F, Line(D, J))) == orientation(F, midpoint(F, G), projection(F, Line(D, J))) mod 360
By between_implies_orientation on projection(F, Line(D, J)), G, midpoint(F, G), F we get orientation(F, projection(F, Line(D, J)), midpoint(F, G)) == orientation(G, midpoint(F, G), projection(F, Line(D, J))) mod 360, orientation(F, projection(F, Line(D, J)), G) == orientation(G, midpoint(F, G), projection(F, Line(D, J))) mod 360
By collinear_and_not_between_implies_orientation on D, I, F, midpoint(F, I) we get orientation(D, F, I) == orientation(D, F, midpoint(F, I)) mod 360
By collinear_and_not_between_implies_orientation on midpoint(E, G), F, E, midpoint(E, F) we get orientation(E, F, midpoint(E, G)) == orientation(E, midpoint(E, F), midpoint(E, G)) mod 360
By collinear_and_not_between_implies_orientation on projection(F, j), F, G, midpoint(F, G) we get orientation(F, projection(F, j), G) == orientation(G, midpoint(F, G), projection(F, j)) mod 360
By between_implies_orientation on G, I, midpoint(E, I), E we get orientation(E, G, midpoint(E, I)) == orientation(G, I, midpoint(E, I)) mod 360, orientation(E, G, I) == orientation(G, I, midpoint(E, I)) mod 360
By same_angle_v0 on F, midpoint(E, F), E, A we get angle(E, F, A) == angle(midpoint(E, F), F, A) mod 360
By between_implies_orientation on projection(F, j), G, midpoint(F, G), F we get orientation(F, projection(F, j), midpoint(F, G)) == orientation(G, midpoint(F, G), projection(F, j)) mod 360, orientation(F, projection(F, j), G) == orientation(G, midpoint(F, G), projection(F, j)) mod 360
By same_angle_v0 on F, midpoint(E, F), E, J we get angle(E, F, J) == angle(midpoint(E, F), F, J) mod 360
By between_implies_orientation on midpoint(E, I), G, midpoint(E, G), E we get orientation(E, midpoint(E, I), midpoint(E, G)) == orientation(G, midpoint(E, G), midpoint(E, I)) mod 360, orientation(E, midpoint(E, I), G) == orientation(G, midpoint(E, G), midpoint(E, I)) mod 360
By collinear_and_not_between_implies_orientation on F, midpoint(E, I), E, I we get orientation(E, I, F) == orientation(E, midpoint(E, I), F) mod 360
By between_implies_orientation on D, F, midpoint(F, I), I we get orientation(D, F, midpoint(F, I)) == orientation(D, midpoint(F, I), I) mod 360, orientation(D, F, I) == orientation(D, F, midpoint(F, I)) mod 360
By same_angle_v0 on F, midpoint(E, F), E, D we get angle(E, F, D) == angle(midpoint(E, F), F, D) mod 360
By same_angle_v0 on E, midpoint(E, F), F, H we get angle(F, E, H) == angle(midpoint(E, F), E, H) mod 360
By between_implies_orientation on F, I, midpoint(E, I), E we get orientation(E, F, midpoint(E, I)) == orientation(F, I, midpoint(E, I)) mod 360, orientation(E, F, I) == orientation(F, I, midpoint(E, I)) mod 360
By between_implies_orientation on H, I, midpoint(E, I), E we get orientation(E, H, midpoint(E, I)) == orientation(H, I, midpoint(E, I)) mod 360, orientation(E, H, I) == orientation(H, I, midpoint(E, I)) mod 360
By same_angle_v0 on C, D, midpoint(E, F), E we get angle(D, C, E) == angle(midpoint(E, F), C, E) mod 360
By collinear_and_not_between_implies_orientation on D, G, I, midpoint(G, I) we get orientation(D, I, G) == orientation(D, I, midpoint(G, I)) mod 360
By between_implies_orientation on H, E, midpoint(E, I), I we get orientation(E, midpoint(E, I), H) == orientation(H, midpoint(E, I), I) mod 360, orientation(E, I, H) == orientation(E, midpoint(E, I), H) mod 360
By between_implies_orientation on projection(F, Line(D, J)), G, midpoint(E, G), E we get orientation(E, projection(F, Line(D, J)), midpoint(E, G)) == orientation(G, midpoint(E, G), projection(F, Line(D, J))) mod 360, orientation(E, projection(F, Line(D, J)), G) == orientation(G, midpoint(E, G), projection(F, Line(D, J))) mod 360
By same_angle_v0 on E, F, midpoint(E, F), B we get angle(F, E, B) == angle(midpoint(E, F), E, B) mod 360
By between_implies_orientation on midpoint(E, G), I, midpoint(E, I), E we get orientation(E, midpoint(E, G), midpoint(E, I)) == orientation(I, midpoint(E, I), midpoint(E, G)) mod 360, orientation(E, midpoint(E, G), I) == orientation(I, midpoint(E, I), midpoint(E, G)) mod 360
By between_implies_orientation on D, G, midpoint(G, I), I we get orientation(D, G, midpoint(G, I)) == orientation(D, midpoint(G, I), I) mod 360, orientation(D, G, I) == orientation(D, G, midpoint(G, I)) mod 360
By between_implies_orientation on midpoint(E, F), F, midpoint(F, G), G we get orientation(F, midpoint(F, G), midpoint(E, F)) == orientation(G, midpoint(E, F), midpoint(F, G)) mod 360, orientation(F, G, midpoint(E, F)) == orientation(F, midpoint(F, G), midpoint(E, F)) mod 360
By between_implies_orientation on B, E, midpoint(E, I), I we get orientation(B, E, midpoint(E, I)) == orientation(B, midpoint(E, I), I) mod 360, orientation(B, E, I) == orientation(B, E, midpoint(E, I)) mod 360
By same_angle_v0 on C, D, midpoint(E, F), F we get angle(D, C, F) == angle(midpoint(E, F), C, F) mod 360
By between_implies_orientation on midpoint(E, G), F, midpoint(E, F), E we get orientation(E, midpoint(E, G), midpoint(E, F)) == orientation(F, midpoint(E, F), midpoint(E, G)) mod 360, orientation(E, midpoint(E, G), F) == orientation(F, midpoint(E, F), midpoint(E, G)) mod 360
By between_implies_orientation on A, I, midpoint(E, I), E we get orientation(A, I, midpoint(E, I)) == orientation(A, midpoint(E, I), E) mod 360, orientation(A, I, E) == orientation(A, I, midpoint(E, I)) mod 360
By between_implies_orientation on D, I, midpoint(G, I), G we get orientation(D, I, midpoint(G, I)) == orientation(D, midpoint(G, I), G) mod 360, orientation(D, I, G) == orientation(D, I, midpoint(G, I)) mod 360
By between_implies_orientation on projection(F, Line(D, J)), F, midpoint(F, G), G we get orientation(F, midpoint(F, G), projection(F, Line(D, J))) == orientation(G, projection(F, Line(D, J)), midpoint(F, G)) mod 360, orientation(F, G, projection(F, Line(D, J))) == orientation(F, midpoint(F, G), projection(F, Line(D, J))) mod 360
By projection_definition on I, midpoint(F, I), median(D, F, I) we get midpoint(F, I) == projection(I, median(D, F, I))
By between_implies_orientation on projection(F, Line(D, J)), E, midpoint(E, G), G we get orientation(E, midpoint(E, G), projection(F, Line(D, J))) == orientation(G, projection(F, Line(D, J)), midpoint(E, G)) mod 360, orientation(E, G, projection(F, Line(D, J))) == orientation(E, midpoint(E, G), projection(F, Line(D, J))) mod 360
By between_implies_orientation on G, E, midpoint(E, I), I we get orientation(E, midpoint(E, I), G) == orientation(G, midpoint(E, I), I) mod 360, orientation(E, I, G) == orientation(E, midpoint(E, I), G) mod 360
By between_implies_orientation on projection(F, j), F, midpoint(F, G), G we get orientation(F, midpoint(F, G), projection(F, j)) == orientation(G, projection(F, j), midpoint(F, G)) mod 360, orientation(F, G, projection(F, j)) == orientation(F, midpoint(F, G), projection(F, j)) mod 360
By between_implies_orientation on midpoint(E, G), E, midpoint(E, F), F we get orientation(E, midpoint(E, F), midpoint(E, G)) == orientation(F, midpoint(E, G), midpoint(E, F)) mod 360, orientation(E, F, midpoint(E, G)) == orientation(E, midpoint(E, F), midpoint(E, G)) mod 360
By projection_definition on G, midpoint(G, I), median(D, G, I) we get midpoint(G, I) == projection(G, median(D, G, I))
By between_implies_orientation on midpoint(E, G), F, midpoint(F, G), G we get orientation(F, midpoint(F, G), midpoint(E, G)) == orientation(G, midpoint(E, G), midpoint(F, G)) mod 360, orientation(F, G, midpoint(E, G)) == orientation(F, midpoint(F, G), midpoint(E, G)) mod 360
By same_angle_v0 on D, midpoint(E, F), C, F we get angle(C, D, F) == angle(midpoint(E, F), D, F) mod 360
By between_implies_orientation on midpoint(E, F), G, midpoint(F, G), F we get orientation(F, midpoint(E, F), midpoint(F, G)) == orientation(G, midpoint(F, G), midpoint(E, F)) mod 360, orientation(F, midpoint(E, F), G) == orientation(G, midpoint(F, G), midpoint(E, F)) mod 360
By between_implies_orientation on C, E, midpoint(E, I), I we get orientation(C, E, midpoint(E, I)) == orientation(C, midpoint(E, I), I) mod 360, orientation(C, E, I) == orientation(C, E, midpoint(E, I)) mod 360
By between_implies_orientation on F, E, midpoint(E, I), I we get orientation(E, midpoint(E, I), F) == orientation(F, midpoint(E, I), I) mod 360, orientation(E, I, F) == orientation(E, midpoint(E, I), F) mod 360
By between_implies_orientation on midpoint(E, F), E, midpoint(E, G), G we get orientation(E, midpoint(E, G), midpoint(E, F)) == orientation(G, midpoint(E, F), midpoint(E, G)) mod 360, orientation(E, G, midpoint(E, F)) == orientation(E, midpoint(E, G), midpoint(E, F)) mod 360
By projection_definition on D, midpoint(F, I), Line(F, I) we get midpoint(F, I) == projection(D, Line(F, I))
By between_implies_orientation on midpoint(E, I), E, midpoint(E, G), G we get orientation(E, midpoint(E, G), midpoint(E, I)) == orientation(G, midpoint(E, I), midpoint(E, G)) mod 360, orientation(E, G, midpoint(E, I)) == orientation(E, midpoint(E, G), midpoint(E, I)) mod 360
By between_implies_orientation on C, I, midpoint(E, I), E we get orientation(C, I, midpoint(E, I)) == orientation(C, midpoint(E, I), E) mod 360, orientation(C, I, E) == orientation(C, I, midpoint(E, I)) mod 360
By between_implies_orientation on midpoint(F, G), E, midpoint(E, G), G we get orientation(E, midpoint(E, G), midpoint(F, G)) == orientation(G, midpoint(F, G), midpoint(E, G)) mod 360, orientation(E, G, midpoint(F, G)) == orientation(E, midpoint(E, G), midpoint(F, G)) mod 360
By projection_definition on I, midpoint(G, I), median(D, G, I) we get midpoint(G, I) == projection(I, median(D, G, I))
By between_implies_orientation on midpoint(F, G), F, midpoint(E, F), E we get orientation(E, midpoint(F, G), midpoint(E, F)) == orientation(F, midpoint(E, F), midpoint(F, G)) mod 360, orientation(E, midpoint(F, G), F) == orientation(F, midpoint(E, F), midpoint(F, G)) mod 360
By different_points_v1 on D, midpoint(G, I) we get 0 != distance(D, midpoint(G, I))
By divide_by_2_mod_180_v1 on midpoint(E, G), G, F, midpoint(E, F), F, H we get angle(midpoint(E, G), G, F) == angle(midpoint(E, F), F, H) + 180 mod 360
By different_points_v1 on D, midpoint(F, I) we get 0 != distance(D, midpoint(F, I))
By perpendicular_direction_conditions_v0_r on midpoint(F, I), D, midpoint(F, I), I we get 180 == 2 * direction(midpoint(F, I), D) - 2 * direction(midpoint(F, I), I) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, I), I, midpoint(F, I), D we get 180 == 2 * direction(midpoint(F, I), I) - 2 * direction(midpoint(F, I), D) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(F, I), F, midpoint(F, I) we get 180 == 2 * direction(D, midpoint(F, I)) - 2 * direction(F, midpoint(F, I)) mod 360
By perpendicular_direction_conditions_v0_r on H, I, midpoint(G, I), D we get 180 == 2 * direction(H, I) - 2 * direction(midpoint(G, I), D) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(G, I), H, G we get 180 == 2 * direction(D, midpoint(G, I)) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(F, I), D, midpoint(F, I) we get 180 == 2 * direction(F, midpoint(F, I)) - 2 * direction(D, midpoint(F, I)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(F, I), I, midpoint(F, I) we get 180 == 2 * direction(D, midpoint(F, I)) - 2 * direction(I, midpoint(F, I)) mod 360
By orthocenter_concurrency on B, G, midpoint(E, G) we get orthocenter(B, G, midpoint(E, G)) in altitude(B, G, midpoint(E, G)), orthocenter(B, G, midpoint(E, G)) in altitude(G, B, midpoint(E, G)), orthocenter(B, G, midpoint(E, G)) in altitude(midpoint(E, G), B, G)
By divide_by_2_mod_180_v1 on midpoint(E, I), D, I, midpoint(E, F), F, I we get angle(midpoint(E, I), D, I) == angle(midpoint(E, F), F, I) + 180 mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(F, I), midpoint(F, I), I we get 180 == 2 * direction(D, midpoint(F, I)) - 2 * direction(midpoint(F, I), I) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(G, I), G, I we get 180 == 2 * direction(D, midpoint(G, I)) - 2 * direction(G, I) mod 360
By orthocenter_concurrency on G, D, midpoint(F, G) we get orthocenter(D, G, midpoint(F, G)) in altitude(G, D, midpoint(F, G)), orthocenter(D, G, midpoint(F, G)) in altitude(D, G, midpoint(F, G)), orthocenter(D, G, midpoint(F, G)) in altitude(midpoint(F, G), D, G)
By perpendicular_direction_conditions_v0_r on D, midpoint(F, I), midpoint(F, I), F we get 180 == 2 * direction(D, midpoint(F, I)) - 2 * direction(midpoint(F, I), F) mod 360
By orthocenter_concurrency on E, D, midpoint(E, G) we get orthocenter(D, E, midpoint(E, G)) in altitude(E, D, midpoint(E, G)), orthocenter(D, E, midpoint(E, G)) in altitude(D, E, midpoint(E, G)), orthocenter(D, E, midpoint(E, G)) in altitude(midpoint(E, G), D, E)
By perpendicular_direction_conditions_v0_r on I, F, midpoint(F, I), D we get 180 == 2 * direction(I, F) - 2 * direction(midpoint(F, I), D) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(G, I), G, H we get 180 == 2 * direction(D, midpoint(G, I)) - 2 * direction(G, H) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(G, I), midpoint(G, I), D we get 180 == 2 * direction(I, midpoint(G, I)) - 2 * direction(midpoint(G, I), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, I), D, I, midpoint(F, I) we get 180 == 2 * direction(midpoint(F, I), D) - 2 * direction(I, midpoint(F, I)) mod 360
By orthocenter_concurrency on H, E, midpoint(E, G) we get orthocenter(E, H, midpoint(E, G)) in altitude(H, E, midpoint(E, G)), orthocenter(E, H, midpoint(E, G)) in altitude(E, H, midpoint(E, G)), orthocenter(E, H, midpoint(E, G)) in altitude(midpoint(E, G), E, H)
By perpendicular_direction_conditions_v0_r on G, I, D, midpoint(G, I) we get 180 == 2 * direction(G, I) - 2 * direction(D, midpoint(G, I)) mod 360
By perpendicular_direction_conditions_v0_r on G, I, midpoint(G, I), D we get 180 == 2 * direction(G, I) - 2 * direction(midpoint(G, I), D) mod 360
By orthocenter_concurrency on D, F, midpoint(F, G) we get orthocenter(D, F, midpoint(F, G)) in altitude(D, F, midpoint(F, G)), orthocenter(D, F, midpoint(F, G)) in altitude(F, D, midpoint(F, G)), orthocenter(D, F, midpoint(F, G)) in altitude(midpoint(F, G), D, F)
By perpendicular_direction_conditions_v0_r on D, midpoint(G, I), H, I we get 180 == 2 * direction(D, midpoint(G, I)) - 2 * direction(H, I) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(G, I), midpoint(G, I), D we get 180 == 2 * direction(G, midpoint(G, I)) - 2 * direction(midpoint(G, I), D) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), F, C, H, D, A we get angle(H, D, A) == angle(midpoint(E, F), F, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, I), F, D, midpoint(F, I) we get 180 == 2 * direction(midpoint(F, I), F) - 2 * direction(D, midpoint(F, I)) mod 360
By perpendicular_direction_conditions_v0_r on I, H, midpoint(G, I), D we get 180 == 2 * direction(I, H) - 2 * direction(midpoint(G, I), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(G, I), D, I, midpoint(G, I) we get 180 == 2 * direction(midpoint(G, I), D) - 2 * direction(I, midpoint(G, I)) mod 360
By perpendicular_direction_conditions_v0_r on I, F, D, midpoint(F, I) we get 180 == 2 * direction(I, F) - 2 * direction(D, midpoint(F, I)) mod 360
By orthocenter_concurrency on G, A, midpoint(F, G) we get orthocenter(A, G, midpoint(F, G)) in altitude(G, A, midpoint(F, G)), orthocenter(A, G, midpoint(F, G)) in altitude(A, G, midpoint(F, G)), orthocenter(A, G, midpoint(F, G)) in altitude(midpoint(F, G), A, G)
By perpendicular_direction_conditions_v0_r on midpoint(G, I), D, midpoint(G, I), I we get 180 == 2 * direction(midpoint(G, I), D) - 2 * direction(midpoint(G, I), I) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(G, I), D, I, G we get 180 == 2 * direction(midpoint(G, I), D) - 2 * direction(I, G) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(G, I), G, midpoint(G, I) we get 180 == 2 * direction(D, midpoint(G, I)) - 2 * direction(G, midpoint(G, I)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(G, I), D, midpoint(G, I) we get 180 == 2 * direction(G, midpoint(G, I)) - 2 * direction(D, midpoint(G, I)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(F, I), I, F we get 180 == 2 * direction(D, midpoint(F, I)) - 2 * direction(I, F) mod 360
By orthocenter_concurrency on G, D, H we get orthocenter(D, G, H) in altitude(G, D, H), orthocenter(D, G, H) in altitude(D, G, H), orthocenter(D, G, H) in altitude(H, D, G)
By divide_by_2_mod_180_v0 on E, C, D, midpoint(E, F), F, D we get angle(E, C, D) == angle(midpoint(E, F), F, D) mod 360
By orthocenter_concurrency on D, G, midpoint(E, G) we get orthocenter(D, G, midpoint(E, G)) in altitude(D, G, midpoint(E, G)), orthocenter(D, G, midpoint(E, G)) in altitude(G, D, midpoint(E, G)), orthocenter(D, G, midpoint(E, G)) in altitude(midpoint(E, G), D, G)
By perpendicular_direction_conditions_v0_r on I, G, D, midpoint(G, I) we get 180 == 2 * direction(I, G) - 2 * direction(D, midpoint(G, I)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(G, I), G, midpoint(G, I), D we get 180 == 2 * direction(midpoint(G, I), G) - 2 * direction(midpoint(G, I), D) mod 360
By perpendicular_direction_conditions_v0_r on I, H, D, midpoint(G, I) we get 180 == 2 * direction(I, H) - 2 * direction(D, midpoint(G, I)) mod 360
By perpendicular_direction_conditions_v0_r on F, I, D, midpoint(F, I) we get 180 == 2 * direction(F, I) - 2 * direction(D, midpoint(F, I)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, I), I, D, midpoint(F, I) we get 180 == 2 * direction(midpoint(F, I), I) - 2 * direction(D, midpoint(F, I)) mod 360
By divide_by_2_mod_180_v0 on B, E, G, midpoint(E, F), F, G we get angle(B, E, G) == angle(midpoint(E, F), F, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(G, I), D, G, midpoint(G, I) we get 180 == 2 * direction(midpoint(G, I), D) - 2 * direction(G, midpoint(G, I)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(G, I), I, D, midpoint(G, I) we get 180 == 2 * direction(midpoint(G, I), I) - 2 * direction(D, midpoint(G, I)) mod 360
By perpendicular_direction_conditions_v0_r on G, H, midpoint(G, I), D we get 180 == 2 * direction(G, H) - 2 * direction(midpoint(G, I), D) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(F, I), midpoint(F, I), D we get 180 == 2 * direction(I, midpoint(F, I)) - 2 * direction(midpoint(F, I), D) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(G, I), I, H we get 180 == 2 * direction(D, midpoint(G, I)) - 2 * direction(I, H) mod 360
By orthocenter_concurrency on A, F, midpoint(F, G) we get orthocenter(A, F, midpoint(F, G)) in altitude(A, F, midpoint(F, G)), orthocenter(A, F, midpoint(F, G)) in altitude(F, A, midpoint(F, G)), orthocenter(A, F, midpoint(F, G)) in altitude(midpoint(F, G), A, F)
By perpendicular_direction_conditions_v0_r on D, midpoint(G, I), midpoint(G, I), G we get 180 == 2 * direction(D, midpoint(G, I)) - 2 * direction(midpoint(G, I), G) mod 360
By orthocenter_concurrency on G, H, midpoint(E, G) we get orthocenter(G, H, midpoint(E, G)) in altitude(G, H, midpoint(E, G)), orthocenter(G, H, midpoint(E, G)) in altitude(H, G, midpoint(E, G)), orthocenter(G, H, midpoint(E, G)) in altitude(midpoint(E, G), G, H)
By perpendicular_direction_conditions_v0_r on midpoint(F, I), D, F, midpoint(F, I) we get 180 == 2 * direction(midpoint(F, I), D) - 2 * direction(F, midpoint(F, I)) mod 360
By orthocenter_concurrency on B, E, midpoint(E, G) we get orthocenter(B, E, midpoint(E, G)) in altitude(B, E, midpoint(E, G)), orthocenter(B, E, midpoint(E, G)) in altitude(E, B, midpoint(E, G)), orthocenter(B, E, midpoint(E, G)) in altitude(midpoint(E, G), B, E)
By divide_by_2_mod_180_v0 on midpoint(E, F), D, E, C, F, E we get angle(C, F, E) == angle(midpoint(E, F), D, E) mod 360
By perpendicular_direction_conditions_v0_r on I, G, midpoint(G, I), D we get 180 == 2 * direction(I, G) - 2 * direction(midpoint(G, I), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(G, I), D, midpoint(G, I), G we get 180 == 2 * direction(midpoint(G, I), D) - 2 * direction(midpoint(G, I), G) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(G, I), I, G we get 180 == 2 * direction(D, midpoint(G, I)) - 2 * direction(I, G) mod 360
By perpendicular_direction_conditions_v0_r on F, I, midpoint(F, I), D we get 180 == 2 * direction(F, I) - 2 * direction(midpoint(F, I), D) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(F, I), F, I we get 180 == 2 * direction(D, midpoint(F, I)) - 2 * direction(F, I) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(G, I), I, midpoint(G, I) we get 180 == 2 * direction(D, midpoint(G, I)) - 2 * direction(I, midpoint(G, I)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(G, I), D, G, I we get 180 == 2 * direction(midpoint(G, I), D) - 2 * direction(G, I) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(G, I), I, midpoint(G, I), D we get 180 == 2 * direction(midpoint(G, I), I) - 2 * direction(midpoint(G, I), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, I), D, I, F we get 180 == 2 * direction(midpoint(F, I), D) - 2 * direction(I, F) mod 360
By divide_by_2_mod_180_v0 on G, E, midpoint(E, F), G, F, H we get angle(G, F, H) == angle(G, E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, I), D, midpoint(F, I), F we get 180 == 2 * direction(midpoint(F, I), D) - 2 * direction(midpoint(F, I), F) mod 360
By perpendicular_direction_conditions_v0_r on H, I, D, midpoint(G, I) we get 180 == 2 * direction(H, I) - 2 * direction(D, midpoint(G, I)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(G, I), midpoint(G, I), I we get 180 == 2 * direction(D, midpoint(G, I)) - 2 * direction(midpoint(G, I), I) mod 360
By divide_by_2_mod_180_v1 on C, E, midpoint(E, F), B, E, F we get angle(B, E, F) + 180 == angle(C, E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on H, G, midpoint(G, I), D we get 180 == 2 * direction(H, G) - 2 * direction(midpoint(G, I), D) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(G, I), D, midpoint(G, I) we get 180 == 2 * direction(I, midpoint(G, I)) - 2 * direction(D, midpoint(G, I)) mod 360
By divide_by_2_mod_180_v0 on E, C, midpoint(E, F), D, E, midpoint(E, F) we get angle(D, E, midpoint(E, F)) == angle(E, C, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(G, I), D, I, H we get 180 == 2 * direction(midpoint(G, I), D) - 2 * direction(I, H) mod 360
By divide_by_2_mod_180_v0 on J, E, midpoint(E, F), midpoint(F, G), D, G we get angle(J, E, midpoint(E, F)) == angle(midpoint(F, G), D, G) mod 360
By divide_by_2_mod_180_v0 on C, D, J, H, E, midpoint(E, F) we get angle(C, D, J) == angle(H, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), D, E, G, F, midpoint(E, F) we get angle(G, F, midpoint(E, F)) == angle(midpoint(E, G), D, E) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(F, I), midpoint(F, I), D we get 180 == 2 * direction(F, midpoint(F, I)) - 2 * direction(midpoint(F, I), D) mod 360
By divide_by_2_mod_180_v0 on G, E, midpoint(E, F), H, D, C we get angle(H, D, C) == angle(G, E, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, I), F, midpoint(F, I), D we get 180 == 2 * direction(midpoint(F, I), F) - 2 * direction(midpoint(F, I), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(G, I), D, G, H we get 180 == 2 * direction(midpoint(G, I), D) - 2 * direction(G, H) mod 360
By divide_by_2_mod_180_v1 on A, D, H, midpoint(E, F), E, B we get angle(A, D, H) == angle(midpoint(E, F), E, B) + 180 mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(F, I), D, midpoint(F, I) we get 180 == 2 * direction(I, midpoint(F, I)) - 2 * direction(D, midpoint(F, I)) mod 360
By divide_by_2_mod_180_v0 on G, F, E, G, F, midpoint(E, F) we get angle(G, F, E) == angle(G, F, midpoint(E, F)) mod 360
By perpendicular_direction_conditions_v0_r on G, H, D, midpoint(G, I) we get 180 == 2 * direction(G, H) - 2 * direction(D, midpoint(G, I)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(G, I), D, H, I we get 180 == 2 * direction(midpoint(G, I), D) - 2 * direction(H, I) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(F, I), D, F, I we get 180 == 2 * direction(midpoint(F, I), D) - 2 * direction(F, I) mod 360
By perpendicular_direction_conditions_v0_r on H, G, D, midpoint(G, I) we get 180 == 2 * direction(H, G) - 2 * direction(D, midpoint(G, I)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(G, I), D, H, G we get 180 == 2 * direction(midpoint(G, I), D) - 2 * direction(H, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(G, I), G, D, midpoint(G, I) we get 180 == 2 * direction(midpoint(G, I), G) - 2 * direction(D, midpoint(G, I)) mod 360
By divide_by_2_mod_180_v0 on E, F, C, midpoint(E, F), F, J we get angle(E, F, C) == angle(midpoint(E, F), F, J) mod 360
By divide_by_2_mod_180_v1 on H, E, G, midpoint(E, F), F, I we get angle(H, E, G) == angle(midpoint(E, F), F, I) + 180 mod 360
By similar_triangle_basic_properties on midpoint(F, G), D, F, G, D, A we get not_collinear(D, F, midpoint(F, G)), not_collinear(A, D, G), angle(G, D, A) == angle(midpoint(F, G), D, F) mod 360, angle(D, A, G) == angle(D, F, midpoint(F, G)) mod 360, angle(A, G, D) == angle(F, midpoint(F, G), D) mod 360, log(distance(D, G)) + log(distance(D, F)) == log(distance(D, midpoint(F, G))) + log(distance(A, D)), log(distance(D, F)) + log(distance(A, G)) == log(distance(A, D)) + log(distance(F, midpoint(F, G))), log(distance(A, G)) + log(distance(D, midpoint(F, G))) == log(distance(F, midpoint(F, G))) + log(distance(D, G))
By divide_by_2_mod_180_v0 on C, D, F, midpoint(E, F), F, C we get angle(C, D, F) == angle(midpoint(E, F), F, C) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), E, G, C, D, B we get angle(C, D, B) + 180 == angle(midpoint(E, F), E, G) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), F, C, midpoint(E, G), G, F we get angle(midpoint(E, F), F, C) == angle(midpoint(E, G), G, F) mod 360
By divide_by_2_mod_180_v0 on A, F, midpoint(E, F), H, F, E we get angle(H, F, E) == angle(A, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on E, D, midpoint(E, F), C, D, F we get angle(C, D, F) == angle(E, D, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on G, F, J, G, E, midpoint(E, F) we get angle(G, F, J) == angle(G, E, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on B, E, midpoint(E, F), E, D, midpoint(E, F) we get angle(B, E, midpoint(E, F)) == angle(E, D, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), F, J, G, E, midpoint(E, F) we get angle(midpoint(F, G), F, J) == angle(G, E, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on A, F, midpoint(E, F), midpoint(E, F), D, E we get angle(A, F, midpoint(E, F)) == angle(midpoint(E, F), D, E) + 180 mod 360
By in_imply_collinear on midpoint(G, I), H, G we get collinear(G, H, midpoint(G, I))
By divide_by_2_mod_180_v0 on midpoint(E, I), I, D, E, H, D we get angle(E, H, D) == angle(midpoint(E, I), I, D) mod 360
By similar_triangle_basic_properties on B, midpoint(E, G), E, B, G, D we get not_collinear(B, E, midpoint(E, G)), not_collinear(B, D, G), angle(B, G, D) == angle(B, midpoint(E, G), E) mod 360, angle(G, D, B) == angle(midpoint(E, G), E, B) mod 360, angle(D, B, G) == angle(E, B, midpoint(E, G)) mod 360, log(distance(B, G)) + log(distance(E, midpoint(E, G))) == log(distance(B, midpoint(E, G))) + log(distance(D, G)), log(distance(D, G)) + log(distance(B, E)) == log(distance(E, midpoint(E, G))) + log(distance(B, D)), log(distance(B, E)) + log(distance(B, G)) == log(distance(B, D)) + log(distance(B, midpoint(E, G)))
By divide_by_2_mod_180_v0 on D, C, A, midpoint(E, F), C, F we get angle(D, C, A) == angle(midpoint(E, F), C, F) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), E, C, C, F, E we get angle(C, F, E) == angle(midpoint(E, F), E, C) mod 360
By divide_by_2_mod_180_v0 on E, C, D, D, E, midpoint(E, F) we get angle(E, C, D) == angle(D, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on D, H, E, midpoint(E, I), E, D we get angle(D, H, E) == angle(midpoint(E, I), E, D) mod 360
By line_circle_intersection_has_at_most_two_points_0 on B, midpoint(E, G), H, Circle(B, G, midpoint(E, G)) we get H not in Circle(B, G, midpoint(E, G))
By concyclic_definition_0 on D, G, midpoint(E, G), midpoint(F, G) we get midpoint(F, G) in Circle(D, G, midpoint(E, G))
By divide_by_2_mod_180_v0 on B, H, G, D, E, midpoint(E, I) we get angle(B, H, G) == angle(D, E, midpoint(E, I)) mod 360
By concyclic_definition_0 on D, midpoint(F, G), G, midpoint(E, G) we get midpoint(E, G) in Circle(D, G, midpoint(F, G))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(F, G), midpoint(F, I), I we get not_collinear(I, midpoint(F, G), midpoint(F, I)), exists(Line(I, midpoint(F, I)))
By divide_by_2_mod_180_v1 on H, F, midpoint(E, F), C, F, E we get angle(C, F, E) + 180 == angle(H, F, midpoint(E, F)) mod 360
By directions_draw_angle on C, D, midpoint(E, I) we get exists(angle(C, D, midpoint(E, I)))
By divide_by_2_mod_180_v0 on midpoint(E, F), F, D, D, C, A we get angle(D, C, A) == angle(midpoint(E, F), F, D) mod 360
By similar_triangle_basic_properties on F, A, D, midpoint(F, G), G, D we get not_collinear(A, D, F), not_collinear(D, G, midpoint(F, G)), angle(F, A, D) == angle(midpoint(F, G), G, D) mod 360, angle(A, D, F) == angle(G, D, midpoint(F, G)) mod 360, angle(D, F, A) == angle(D, midpoint(F, G), G) mod 360, log(distance(A, F)) + log(distance(D, G)) == log(distance(G, midpoint(F, G))) + log(distance(A, D)), log(distance(D, G)) + log(distance(D, F)) == log(distance(A, D)) + log(distance(D, midpoint(F, G))), log(distance(D, F)) + log(distance(G, midpoint(F, G))) == log(distance(D, midpoint(F, G))) + log(distance(A, F))
By divide_by_2_mod_180_v0 on G, D, midpoint(F, G), midpoint(E, F), E, J we get angle(G, D, midpoint(F, G)) == angle(midpoint(E, F), E, J) mod 360
By divide_by_2_mod_180_v1 on F, D, midpoint(E, F), A, F, midpoint(E, F) we get angle(F, D, midpoint(E, F)) == angle(A, F, midpoint(E, F)) + 180 mod 360
By similar_triangle_basic_properties on G, D, midpoint(E, G), B, D, E we get not_collinear(D, G, midpoint(E, G)), not_collinear(B, D, E), angle(B, D, E) == angle(G, D, midpoint(E, G)) mod 360, angle(D, E, B) == angle(D, midpoint(E, G), G) mod 360, angle(E, B, D) == angle(midpoint(E, G), G, D) mod 360, log(distance(D, G)) + log(distance(D, E)) == log(distance(B, D)) + log(distance(D, midpoint(E, G))), log(distance(D, E)) + log(distance(G, midpoint(E, G))) == log(distance(D, midpoint(E, G))) + log(distance(B, E)), log(distance(B, E)) + log(distance(D, G)) == log(distance(G, midpoint(E, G))) + log(distance(B, D))
By anti_similar_triangle_basic_properties on A, D, F, A, F, midpoint(F, G) we get not_collinear(A, D, F), not_collinear(A, F, midpoint(F, G)), angle(A, D, F) == 0 - angle(A, F, midpoint(F, G)) mod 360, angle(D, F, A) == 0 - angle(F, midpoint(F, G), A) mod 360, angle(F, A, D) == 0 - angle(midpoint(F, G), A, F) mod 360, log(distance(A, F)) + log(distance(D, F)) == log(distance(A, D)) + log(distance(F, midpoint(F, G))), log(distance(D, F)) + log(distance(A, midpoint(F, G))) == log(distance(F, midpoint(F, G))) + log(distance(A, F)), log(distance(A, F)) + log(distance(A, F)) == log(distance(A, midpoint(F, G))) + log(distance(A, D))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, F), midpoint(E, G), H we get not_collinear(H, midpoint(E, F), midpoint(E, G)), exists(Line(H, midpoint(E, G)))
By divide_by_2_mod_180_v0 on C, F, E, F, D, midpoint(E, F) we get angle(C, F, E) == angle(F, D, midpoint(E, F)) mod 360
By directions_draw_angle on midpoint(E, F), D, center(d) we get exists(angle(midpoint(E, F), D, center(d)))
By divide_by_2_mod_180_v0 on C, J, E, G, F, midpoint(E, F) we get angle(C, J, E) == angle(G, F, midpoint(E, F)) mod 360
By anti_similar_triangle_basic_properties on B, G, midpoint(E, G), E, D, midpoint(E, G) we get not_collinear(B, G, midpoint(E, G)), not_collinear(D, E, midpoint(E, G)), angle(B, G, midpoint(E, G)) == 0 - angle(E, D, midpoint(E, G)) mod 360, angle(G, midpoint(E, G), B) == 0 - angle(D, midpoint(E, G), E) mod 360, angle(midpoint(E, G), B, G) == 0 - angle(midpoint(E, G), E, D) mod 360, log(distance(B, G)) + log(distance(D, midpoint(E, G))) == log(distance(D, E)) + log(distance(G, midpoint(E, G))), log(distance(D, midpoint(E, G))) + log(distance(B, midpoint(E, G))) == log(distance(G, midpoint(E, G))) + log(distance(E, midpoint(E, G))), log(distance(B, midpoint(E, G))) + log(distance(D, E)) == log(distance(E, midpoint(E, G))) + log(distance(B, G))
By divide_by_2_mod_180_v0 on I, G, E, midpoint(E, I), D, E we get angle(I, G, E) == angle(midpoint(E, I), D, E) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, I), I, D, E, H, midpoint(E, G) we get angle(E, H, midpoint(E, G)) == angle(midpoint(E, I), I, D) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), F, J, E, I, F we get angle(E, I, F) == angle(midpoint(E, F), F, J) mod 360
By divide_by_2_mod_180_v1 on B, G, F, G, E, midpoint(E, F) we get angle(B, G, F) == angle(G, E, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v0 on E, G, midpoint(F, G), midpoint(E, F), D, F we get angle(E, G, midpoint(F, G)) == angle(midpoint(E, F), D, F) mod 360
By divide_by_2_mod_180_v1 on H, F, midpoint(E, F), F, G, E we get angle(F, G, E) + 180 == angle(H, F, midpoint(E, F)) mod 360
By line_inequality on Line(H, center(d)), Line(D, J), H we get Line(D, J) != Line(H, center(d))
By divide_by_2_mod_180_v1 on B, D, A, midpoint(E, F), F, J we get angle(B, D, A) == angle(midpoint(E, F), F, J) + 180 mod 360
By divide_by_2_mod_180_v1 on E, F, I, midpoint(E, I), D, I we get angle(E, F, I) == angle(midpoint(E, I), D, I) + 180 mod 360
By anti_similar_triangle_basic_properties on A, G, midpoint(F, G), F, D, midpoint(F, G) we get not_collinear(A, G, midpoint(F, G)), not_collinear(D, F, midpoint(F, G)), angle(A, G, midpoint(F, G)) == 0 - angle(F, D, midpoint(F, G)) mod 360, angle(G, midpoint(F, G), A) == 0 - angle(D, midpoint(F, G), F) mod 360, angle(midpoint(F, G), A, G) == 0 - angle(midpoint(F, G), F, D) mod 360, log(distance(A, G)) + log(distance(D, midpoint(F, G))) == log(distance(D, F)) + log(distance(G, midpoint(F, G))), log(distance(D, midpoint(F, G))) + log(distance(A, midpoint(F, G))) == log(distance(G, midpoint(F, G))) + log(distance(F, midpoint(F, G))), log(distance(A, midpoint(F, G))) + log(distance(D, F)) == log(distance(F, midpoint(F, G))) + log(distance(A, G))
By line_circle_intersection_has_at_most_two_points_0 on midpoint(F, G), D, A, Circle(D, G, midpoint(F, G)) we get A not in Circle(D, G, midpoint(F, G))
By divide_by_2_mod_180_v1 on C, F, midpoint(F, G), midpoint(E, F), E, G we get angle(C, F, midpoint(F, G)) == angle(midpoint(E, F), E, G) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), C, F, D, E, midpoint(E, F) we get angle(D, E, midpoint(E, F)) == angle(midpoint(E, F), C, F) mod 360
By divide_by_2_mod_180_v0 on C, E, midpoint(E, F), E, I, F we get angle(E, I, F) == angle(C, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on I, F, A, I, E, midpoint(E, F) we get angle(I, F, A) == angle(I, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on J, F, midpoint(E, F), H, F, E we get angle(H, F, E) + 180 == angle(J, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on H, E, midpoint(E, G), midpoint(E, I), D, I we get angle(H, E, midpoint(E, G)) == angle(midpoint(E, I), D, I) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), E, J, G, I, F we get angle(G, I, F) + 180 == angle(midpoint(E, F), E, J) mod 360
By divide_by_2_mod_180_v1 on H, D, E, G, F, midpoint(E, F) we get angle(H, D, E) == angle(G, F, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on A, F, E, J, F, midpoint(E, F) we get angle(A, F, E) == angle(J, F, midpoint(E, F)) + 180 mod 360
By anti_similar_triangle_basic_properties on midpoint(E, G), B, G, G, B, D we get not_collinear(B, G, midpoint(E, G)), not_collinear(B, D, G), 0 - angle(G, B, D) == angle(midpoint(E, G), B, G) mod 360, 0 - angle(B, D, G) == angle(B, G, midpoint(E, G)) mod 360, 0 - angle(D, G, B) == angle(G, midpoint(E, G), B) mod 360, log(distance(B, G)) + log(distance(B, G)) == log(distance(B, midpoint(E, G))) + log(distance(B, D)), log(distance(B, G)) + log(distance(D, G)) == log(distance(B, D)) + log(distance(G, midpoint(E, G))), log(distance(D, G)) + log(distance(B, midpoint(E, G))) == log(distance(G, midpoint(E, G))) + log(distance(B, G))
By divide_by_2_mod_180_v0 on midpoint(E, I), I, D, midpoint(E, G), H, G we get angle(midpoint(E, G), H, G) == angle(midpoint(E, I), I, D) mod 360
By in_imply_collinear on H, I, midpoint(G, I) we get collinear(H, I, midpoint(G, I))
By divide_by_2_mod_180_v1 on midpoint(E, F), F, G, E, G, A we get angle(E, G, A) + 180 == angle(midpoint(E, F), F, G) mod 360
By sas_anti_similarity on E, midpoint(E, F), C, D, midpoint(E, F), F we get anti_similar_triangles(C, E, midpoint(E, F), F, D, midpoint(E, F))
By divide_by_2_mod_180_v1 on E, G, F, midpoint(E, F), F, H we get angle(E, G, F) == angle(midpoint(E, F), F, H) + 180 mod 360
By anti_similar_triangle_basic_properties on F, D, A, midpoint(F, G), F, A we get not_collinear(A, D, F), not_collinear(A, F, midpoint(F, G)), angle(F, D, A) == 0 - angle(midpoint(F, G), F, A) mod 360, angle(D, A, F) == 0 - angle(F, A, midpoint(F, G)) mod 360, angle(A, F, D) == 0 - angle(A, midpoint(F, G), F) mod 360, log(distance(D, F)) + log(distance(A, F)) == log(distance(F, midpoint(F, G))) + log(distance(A, D)), log(distance(A, F)) + log(distance(A, F)) == log(distance(A, D)) + log(distance(A, midpoint(F, G))), log(distance(A, F)) + log(distance(F, midpoint(F, G))) == log(distance(A, midpoint(F, G))) + log(distance(D, F))
By divide_by_2_mod_180_v1 on G, E, midpoint(E, F), G, F, C we get angle(G, F, C) + 180 == angle(G, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on A, F, midpoint(E, F), A, D, B we get angle(A, D, B) == angle(A, F, midpoint(E, F)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on E, midpoint(F, I), I we get not_collinear(E, I, midpoint(F, I)), exists(Line(I, midpoint(F, I)))
By divide_by_2_mod_180_v0 on G, F, midpoint(E, F), G, D, B we get angle(G, D, B) == angle(G, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on D, E, F, midpoint(E, F), C, F we get angle(D, E, F) == angle(midpoint(E, F), C, F) mod 360
By divide_by_2_mod_180_v1 on I, F, E, midpoint(E, I), D, E we get angle(I, F, E) == angle(midpoint(E, I), D, E) + 180 mod 360
By divide_by_2_mod_180_v1 on A, G, E, G, F, midpoint(E, F) we get angle(A, G, E) == angle(G, F, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), E, B, C, D, E we get angle(C, D, E) + 180 == angle(midpoint(E, F), E, B) mod 360
By anti_similar_triangle_basic_properties on G, midpoint(F, G), A, D, G, A we get not_collinear(A, G, midpoint(F, G)), not_collinear(A, D, G), 0 - angle(D, G, A) == angle(G, midpoint(F, G), A) mod 360, 0 - angle(G, A, D) == angle(midpoint(F, G), A, G) mod 360, 0 - angle(A, D, G) == angle(A, G, midpoint(F, G)) mod 360, log(distance(D, G)) + log(distance(A, midpoint(F, G))) == log(distance(G, midpoint(F, G))) + log(distance(A, G)), log(distance(A, G)) + log(distance(A, G)) == log(distance(A, midpoint(F, G))) + log(distance(A, D)), log(distance(A, G)) + log(distance(D, G)) == log(distance(A, D)) + log(distance(G, midpoint(F, G)))
By directions_draw_angle on midpoint(E, G), D, midpoint(E, F) we get exists(angle(midpoint(E, G), D, midpoint(E, F)))
By similar_triangle_basic_properties on F, midpoint(F, G), A, D, G, A we get not_collinear(A, F, midpoint(F, G)), not_collinear(A, D, G), angle(D, G, A) == angle(F, midpoint(F, G), A) mod 360, angle(G, A, D) == angle(midpoint(F, G), A, F) mod 360, angle(A, D, G) == angle(A, F, midpoint(F, G)) mod 360, log(distance(D, G)) + log(distance(A, midpoint(F, G))) == log(distance(F, midpoint(F, G))) + log(distance(A, G)), log(distance(A, G)) + log(distance(A, F)) == log(distance(A, midpoint(F, G))) + log(distance(A, D)), log(distance(A, F)) + log(distance(D, G)) == log(distance(A, D)) + log(distance(F, midpoint(F, G)))
By divide_by_2_mod_180_v0 on E, G, midpoint(F, G), E, D, midpoint(E, F) we get angle(E, D, midpoint(E, F)) == angle(E, G, midpoint(F, G)) mod 360
By divide_by_2_mod_180_v0 on D, F, midpoint(E, F), A, C, D we get angle(A, C, D) == angle(D, F, midpoint(E, F)) mod 360
By similar_triangle_basic_properties on D, G, B, D, midpoint(E, G), E we get not_collinear(B, D, G), not_collinear(D, E, midpoint(E, G)), angle(D, G, B) == angle(D, midpoint(E, G), E) mod 360, angle(G, B, D) == angle(midpoint(E, G), E, D) mod 360, angle(B, D, G) == angle(E, D, midpoint(E, G)) mod 360, log(distance(D, G)) + log(distance(E, midpoint(E, G))) == log(distance(D, midpoint(E, G))) + log(distance(B, G)), log(distance(B, G)) + log(distance(D, E)) == log(distance(E, midpoint(E, G))) + log(distance(B, D)), log(distance(D, E)) + log(distance(D, G)) == log(distance(B, D)) + log(distance(D, midpoint(E, G)))
By divide_by_2_mod_180_v0 on midpoint(E, F), E, G, A, D, G we get angle(A, D, G) == angle(midpoint(E, F), E, G) mod 360
By divide_by_2_mod_180_v1 on I, D, midpoint(E, I), I, F, E we get angle(I, F, E) + 180 == angle(I, D, midpoint(E, I)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, G, C, E, midpoint(E, G) we get angle(midpoint(E, F), F, G) == angle(C, E, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on J, C, D, midpoint(E, F), E, D we get angle(J, C, D) == angle(midpoint(E, F), E, D) + 180 mod 360
By divide_by_2_mod_180_v0 on B, G, E, G, F, midpoint(E, F) we get angle(B, G, E) == angle(G, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on F, E, B, J, F, midpoint(E, F) we get angle(F, E, B) == angle(J, F, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), H, G, D, E, midpoint(E, I) we get angle(D, E, midpoint(E, I)) == angle(midpoint(E, G), H, G) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), D, E, F, E, C we get angle(F, E, C) == angle(midpoint(E, F), D, E) mod 360
By anti_similar_triangle_basic_properties on D, G, B, D, midpoint(E, G), G we get not_collinear(B, D, G), not_collinear(D, G, midpoint(E, G)), angle(D, G, B) == 0 - angle(D, midpoint(E, G), G) mod 360, angle(G, B, D) == 0 - angle(midpoint(E, G), G, D) mod 360, angle(B, D, G) == 0 - angle(G, D, midpoint(E, G)) mod 360, log(distance(D, G)) + log(distance(G, midpoint(E, G))) == log(distance(D, midpoint(E, G))) + log(distance(B, G)), log(distance(B, G)) + log(distance(D, G)) == log(distance(G, midpoint(E, G))) + log(distance(B, D)), log(distance(D, G)) + log(distance(D, G)) == log(distance(B, D)) + log(distance(D, midpoint(E, G)))
By divide_by_2_mod_180_v1 on F, E, B, midpoint(E, F), E, C we get angle(F, E, B) == angle(midpoint(E, F), E, C) + 180 mod 360
By divide_by_2_mod_180_v0 on F, G, E, C, F, midpoint(E, F) we get angle(F, G, E) == angle(C, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, I), D, E, G, E, H we get angle(G, E, H) == angle(midpoint(E, I), D, E) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), E, C, C, D, E we get angle(C, D, E) == angle(midpoint(E, F), E, C) mod 360
By divide_by_2_mod_180_v0 on G, D, A, G, E, midpoint(E, F) we get angle(G, D, A) == angle(G, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), E, I, midpoint(F, G), G, H we get angle(midpoint(E, F), E, I) == angle(midpoint(F, G), G, H) mod 360
By similar_triangle_basic_properties on midpoint(F, G), A, G, F, A, D we get not_collinear(A, G, midpoint(F, G)), not_collinear(A, D, F), angle(F, A, D) == angle(midpoint(F, G), A, G) mod 360, angle(A, D, F) == angle(A, G, midpoint(F, G)) mod 360, angle(D, F, A) == angle(G, midpoint(F, G), A) mod 360, log(distance(A, F)) + log(distance(A, G)) == log(distance(A, midpoint(F, G))) + log(distance(A, D)), log(distance(A, G)) + log(distance(D, F)) == log(distance(A, D)) + log(distance(G, midpoint(F, G))), log(distance(D, F)) + log(distance(A, midpoint(F, G))) == log(distance(G, midpoint(F, G))) + log(distance(A, F))
By divide_by_2_mod_180_v1 on F, G, midpoint(E, G), H, F, midpoint(E, F) we get angle(F, G, midpoint(E, G)) == angle(H, F, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on E, F, H, E, D, midpoint(E, F) we get angle(E, F, H) == angle(E, D, midpoint(E, F)) + 180 mod 360
By anti_similar_triangle_basic_properties on midpoint(F, G), G, A, midpoint(F, G), D, F we get not_collinear(A, G, midpoint(F, G)), not_collinear(D, F, midpoint(F, G)), angle(midpoint(F, G), G, A) == 0 - angle(midpoint(F, G), D, F) mod 360, angle(G, A, midpoint(F, G)) == 0 - angle(D, F, midpoint(F, G)) mod 360, angle(A, midpoint(F, G), G) == 0 - angle(F, midpoint(F, G), D) mod 360, log(distance(D, midpoint(F, G))) + log(distance(A, G)) == log(distance(G, midpoint(F, G))) + log(distance(D, F)), log(distance(A, G)) + log(distance(F, midpoint(F, G))) == log(distance(D, F)) + log(distance(A, midpoint(F, G))), log(distance(A, midpoint(F, G))) + log(distance(D, midpoint(F, G))) == log(distance(F, midpoint(F, G))) + log(distance(G, midpoint(F, G)))
By divide_by_2_mod_180_v1 on B, D, A, midpoint(E, F), F, C we get angle(B, D, A) == angle(midpoint(E, F), F, C) + 180 mod 360
By divide_by_2_mod_180_v0 on E, G, B, midpoint(E, F), F, G we get angle(E, G, B) == angle(midpoint(E, F), F, G) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, G, E, I, H we get angle(E, I, H) + 180 == angle(midpoint(E, F), F, G) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, I), I, D, D, H, I we get angle(D, H, I) == angle(midpoint(E, I), I, D) mod 360
By divide_by_2_mod_180_v0 on H, D, A, midpoint(E, F), F, J we get angle(H, D, A) == angle(midpoint(E, F), F, J) mod 360
By divide_by_2_mod_180_v0 on B, H, E, midpoint(E, I), E, D we get angle(B, H, E) == angle(midpoint(E, I), E, D) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), E, J, midpoint(F, G), D, F we get angle(midpoint(E, F), E, J) == angle(midpoint(F, G), D, F) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), E, C, A, F, E we get angle(A, F, E) + 180 == angle(midpoint(E, F), E, C) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), E, I, midpoint(F, G), G, I we get angle(midpoint(E, F), E, I) == angle(midpoint(F, G), G, I) mod 360
By divide_by_2_mod_180_v1 on H, F, midpoint(E, F), midpoint(E, F), D, E we get angle(H, F, midpoint(E, F)) == angle(midpoint(E, F), D, E) + 180 mod 360
By divide_by_2_mod_180_v1 on D, C, J, midpoint(E, F), C, F we get angle(D, C, J) == angle(midpoint(E, F), C, F) + 180 mod 360
By divide_by_2_mod_180_v0 on F, G, E, J, F, midpoint(E, F) we get angle(F, G, E) == angle(J, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on G, H, midpoint(E, G), midpoint(E, I), E, D we get angle(G, H, midpoint(E, G)) == angle(midpoint(E, I), E, D) mod 360
By divide_by_2_mod_180_v0 on F, E, D, midpoint(E, F), C, E we get angle(F, E, D) == angle(midpoint(E, F), C, E) mod 360
By divide_by_2_mod_180_v0 on D, H, G, D, E, midpoint(E, I) we get angle(D, H, G) == angle(D, E, midpoint(E, I)) mod 360
By divide_by_2_mod_180_v1 on F, E, B, C, F, midpoint(E, F) we get angle(F, E, B) == angle(C, F, midpoint(E, F)) + 180 mod 360
By directions_draw_angle on midpoint(E, I), I, midpoint(F, I) we get exists(angle(midpoint(E, I), I, midpoint(F, I)))
By similar_triangle_basic_properties on D, B, E, G, B, midpoint(E, G) we get not_collinear(B, D, E), not_collinear(B, G, midpoint(E, G)), angle(D, B, E) == angle(G, B, midpoint(E, G)) mod 360, angle(B, E, D) == angle(B, midpoint(E, G), G) mod 360, angle(E, D, B) == angle(midpoint(E, G), G, B) mod 360, log(distance(B, G)) + log(distance(B, E)) == log(distance(B, D)) + log(distance(B, midpoint(E, G))), log(distance(B, E)) + log(distance(G, midpoint(E, G))) == log(distance(B, midpoint(E, G))) + log(distance(D, E)), log(distance(D, E)) + log(distance(B, G)) == log(distance(G, midpoint(E, G))) + log(distance(B, D))
By divide_by_2_mod_180_v1 on F, D, C, midpoint(E, F), E, B we get angle(F, D, C) == angle(midpoint(E, F), E, B) + 180 mod 360
By divide_by_2_mod_180_v1 on A, D, H, A, F, midpoint(E, F) we get angle(A, D, H) == angle(A, F, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on H, G, E, I, F, midpoint(E, F) we get angle(H, G, E) == angle(I, F, midpoint(E, F)) + 180 mod 360
By similar_triangle_basic_properties on B, E, D, G, midpoint(E, G), D we get not_collinear(B, D, E), not_collinear(D, G, midpoint(E, G)), angle(B, E, D) == angle(G, midpoint(E, G), D) mod 360, angle(E, D, B) == angle(midpoint(E, G), D, G) mod 360, angle(D, B, E) == angle(D, G, midpoint(E, G)) mod 360, log(distance(B, E)) + log(distance(D, midpoint(E, G))) == log(distance(G, midpoint(E, G))) + log(distance(D, E)), log(distance(D, E)) + log(distance(D, G)) == log(distance(D, midpoint(E, G))) + log(distance(B, D)), log(distance(D, G)) + log(distance(B, E)) == log(distance(B, D)) + log(distance(G, midpoint(E, G)))
By divide_by_2_mod_180_v0 on A, C, D, F, C, midpoint(E, F) we get angle(A, C, D) == angle(F, C, midpoint(E, F)) mod 360
By directions_draw_angle on G, F, midpoint(F, I) we get exists(angle(G, F, midpoint(F, I)))
By divide_by_2_mod_180_v1 on H, G, midpoint(E, G), I, F, midpoint(E, F) we get angle(H, G, midpoint(E, G)) == angle(I, F, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v0 on J, E, midpoint(E, F), A, F, G we get angle(A, F, G) == angle(J, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on I, D, midpoint(E, I), I, G, E we get angle(I, G, E) == angle(I, D, midpoint(E, I)) mod 360
By divide_by_2_mod_180_v1 on B, G, midpoint(F, G), G, E, midpoint(E, F) we get angle(B, G, midpoint(F, G)) == angle(G, E, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v0 on A, D, H, J, F, midpoint(E, F) we get angle(A, D, H) == angle(J, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on F, I, E, J, F, midpoint(E, F) we get angle(F, I, E) == angle(J, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on B, E, midpoint(E, F), E, F, A we get angle(E, F, A) == angle(B, E, midpoint(E, F)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on C, F, midpoint(F, I) we get not_collinear(C, F, midpoint(F, I)), exists(Line(F, midpoint(F, I)))
By divide_by_2_mod_180_v0 on midpoint(E, F), E, C, midpoint(E, F), D, E we get angle(midpoint(E, F), D, E) == angle(midpoint(E, F), E, C) mod 360
By divide_by_2_mod_180_v1 on A, F, midpoint(E, F), F, I, E we get angle(F, I, E) + 180 == angle(A, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on I, F, midpoint(E, F), I, D, midpoint(E, I) we get angle(I, F, midpoint(E, F)) == angle(I, D, midpoint(E, I)) + 180 mod 360
By divide_by_2_mod_180_v1 on J, C, D, F, C, midpoint(E, F) we get angle(J, C, D) == angle(F, C, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v0 on D, C, E, midpoint(E, F), E, D we get angle(D, C, E) == angle(midpoint(E, F), E, D) mod 360
By divide_by_2_mod_180_v1 on H, F, E, C, F, midpoint(E, F) we get angle(H, F, E) == angle(C, F, midpoint(E, F)) + 180 mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, I), B, C we get not_collinear(B, C, midpoint(E, I)), exists(Line(B, C))
By divide_by_2_mod_180_v0 on F, G, E, midpoint(E, F), E, C we get angle(F, G, E) == angle(midpoint(E, F), E, C) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), C, F, D, C, H we get angle(D, C, H) == angle(midpoint(E, F), C, F) mod 360
By divide_by_2_mod_180_v0 on H, G, midpoint(E, G), midpoint(E, I), D, E we get angle(H, G, midpoint(E, G)) == angle(midpoint(E, I), D, E) mod 360
By divide_by_2_mod_180_v1 on B, D, A, E, D, midpoint(E, F) we get angle(B, D, A) == angle(E, D, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v0 on E, J, H, midpoint(E, F), F, G we get angle(E, J, H) == angle(midpoint(E, F), F, G) mod 360
By divide_by_2_mod_180_v0 on C, F, midpoint(E, F), F, I, E we get angle(F, I, E) == angle(C, F, midpoint(E, F)) mod 360
By similar_triangle_basic_properties on D, G, midpoint(F, G), D, A, F we get not_collinear(D, G, midpoint(F, G)), not_collinear(A, D, F), angle(D, A, F) == angle(D, G, midpoint(F, G)) mod 360, angle(A, F, D) == angle(G, midpoint(F, G), D) mod 360, angle(F, D, A) == angle(midpoint(F, G), D, G) mod 360, log(distance(D, G)) + log(distance(A, F)) == log(distance(A, D)) + log(distance(G, midpoint(F, G))), log(distance(A, F)) + log(distance(D, midpoint(F, G))) == log(distance(G, midpoint(F, G))) + log(distance(D, F)), log(distance(D, F)) + log(distance(D, G)) == log(distance(D, midpoint(F, G))) + log(distance(A, D))
By divide_by_2_mod_180_v0 on B, D, A, midpoint(E, F), F, H we get angle(B, D, A) == angle(midpoint(E, F), F, H) mod 360
By divide_by_2_mod_180_v0 on F, C, midpoint(E, F), D, F, E we get angle(D, F, E) == angle(F, C, midpoint(E, F)) mod 360
By reverse_direction on midpoint(E, F), D we get 180 == direction(midpoint(E, F), D) - direction(D, midpoint(E, F)) mod 360
By anti_similar_triangle_basic_properties on B, midpoint(E, G), G, B, G, D we get not_collinear(B, G, midpoint(E, G)), not_collinear(B, D, G), 0 - angle(B, G, D) == angle(B, midpoint(E, G), G) mod 360, 0 - angle(G, D, B) == angle(midpoint(E, G), G, B) mod 360, 0 - angle(D, B, G) == angle(G, B, midpoint(E, G)) mod 360, log(distance(B, G)) + log(distance(G, midpoint(E, G))) == log(distance(B, midpoint(E, G))) + log(distance(D, G)), log(distance(D, G)) + log(distance(B, G)) == log(distance(G, midpoint(E, G))) + log(distance(B, D)), log(distance(B, G)) + log(distance(B, G)) == log(distance(B, D)) + log(distance(B, midpoint(E, G)))
By divide_by_2_mod_180_v1 on midpoint(E, F), F, C, B, E, F we get angle(B, E, F) + 180 == angle(midpoint(E, F), F, C) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on F, midpoint(G, I), I we get not_collinear(F, I, midpoint(G, I)), exists(Line(I, midpoint(G, I)))
By divide_by_2_mod_180_v1 on I, F, midpoint(E, F), midpoint(E, I), D, E we get angle(I, F, midpoint(E, F)) == angle(midpoint(E, I), D, E) + 180 mod 360
By divide_by_2_mod_180_v0 on H, G, midpoint(E, G), I, D, midpoint(E, I) we get angle(H, G, midpoint(E, G)) == angle(I, D, midpoint(E, I)) mod 360
By anti_similar_triangle_basic_properties on G, D, midpoint(F, G), A, F, midpoint(F, G) we get not_collinear(D, G, midpoint(F, G)), not_collinear(A, F, midpoint(F, G)), angle(G, D, midpoint(F, G)) == 0 - angle(A, F, midpoint(F, G)) mod 360, angle(D, midpoint(F, G), G) == 0 - angle(F, midpoint(F, G), A) mod 360, angle(midpoint(F, G), G, D) == 0 - angle(midpoint(F, G), A, F) mod 360, log(distance(A, F)) + log(distance(D, midpoint(F, G))) == log(distance(D, G)) + log(distance(F, midpoint(F, G))), log(distance(D, midpoint(F, G))) + log(distance(A, midpoint(F, G))) == log(distance(F, midpoint(F, G))) + log(distance(G, midpoint(F, G))), log(distance(A, midpoint(F, G))) + log(distance(D, G)) == log(distance(G, midpoint(F, G))) + log(distance(A, F))
By divide_by_2_mod_180_v0 on A, F, E, H, F, midpoint(E, F) we get angle(A, F, E) == angle(H, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), E, B, J, F, E we get angle(J, F, E) + 180 == angle(midpoint(E, F), E, B) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), G, E, H, F, midpoint(E, F) we get angle(midpoint(F, G), G, E) == angle(H, F, midpoint(E, F)) + 180 mod 360
By anti_similar_triangle_basic_properties on D, G, midpoint(F, G), D, A, G we get not_collinear(D, G, midpoint(F, G)), not_collinear(A, D, G), 0 - angle(D, A, G) == angle(D, G, midpoint(F, G)) mod 360, 0 - angle(A, G, D) == angle(G, midpoint(F, G), D) mod 360, 0 - angle(G, D, A) == angle(midpoint(F, G), D, G) mod 360, log(distance(D, G)) + log(distance(A, G)) == log(distance(A, D)) + log(distance(G, midpoint(F, G))), log(distance(A, G)) + log(distance(D, midpoint(F, G))) == log(distance(G, midpoint(F, G))) + log(distance(D, G)), log(distance(D, G)) + log(distance(D, G)) == log(distance(D, midpoint(F, G))) + log(distance(A, D))
By divide_by_2_mod_180_v1 on midpoint(E, F), D, F, E, F, H we get angle(E, F, H) + 180 == angle(midpoint(E, F), D, F) mod 360
By divide_by_2_mod_180_v0 on B, D, G, midpoint(E, F), F, G we get angle(B, D, G) == angle(midpoint(E, F), F, G) mod 360
By divide_by_2_mod_180_v0 on J, F, E, midpoint(E, F), D, E we get angle(J, F, E) == angle(midpoint(E, F), D, E) mod 360
By divide_by_2_mod_180_v0 on F, D, midpoint(E, F), J, F, E we get angle(J, F, E) == angle(F, D, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on F, G, midpoint(E, G), midpoint(E, F), D, E we get angle(F, G, midpoint(E, G)) == angle(midpoint(E, F), D, E) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), E, I, F, G, H we get angle(F, G, H) == angle(midpoint(E, F), E, I) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), G, I, E, D, midpoint(E, I) we get angle(E, D, midpoint(E, I)) == angle(midpoint(E, G), G, I) mod 360
By divide_by_2_mod_180_v1 on F, I, G, J, E, midpoint(E, F) we get angle(F, I, G) == angle(J, E, midpoint(E, F)) + 180 mod 360
By similar_triangle_basic_properties on B, E, midpoint(E, G), B, D, G we get not_collinear(B, E, midpoint(E, G)), not_collinear(B, D, G), angle(B, D, G) == angle(B, E, midpoint(E, G)) mod 360, angle(D, G, B) == angle(E, midpoint(E, G), B) mod 360, angle(G, B, D) == angle(midpoint(E, G), B, E) mod 360, log(distance(B, E)) + log(distance(D, G)) == log(distance(B, D)) + log(distance(E, midpoint(E, G))), log(distance(D, G)) + log(distance(B, midpoint(E, G))) == log(distance(E, midpoint(E, G))) + log(distance(B, G)), log(distance(B, G)) + log(distance(B, E)) == log(distance(B, midpoint(E, G))) + log(distance(B, D))
By not_in_line_equivalent_to_not_collinear_v0 on G, midpoint(F, I), F we get not_collinear(F, G, midpoint(F, I)), exists(Line(F, midpoint(F, I)))
By divide_by_2_mod_180_v0 on midpoint(E, F), F, J, C, E, F we get angle(C, E, F) == angle(midpoint(E, F), F, J) mod 360
By divide_by_2_mod_180_v0 on I, H, D, D, I, midpoint(E, I) we get angle(I, H, D) == angle(D, I, midpoint(E, I)) mod 360
By divide_by_2_mod_180_v1 on G, I, F, midpoint(E, F), E, J we get angle(G, I, F) == angle(midpoint(E, F), E, J) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), D, F, E, F, C we get angle(E, F, C) == angle(midpoint(E, F), D, F) mod 360
By reverse_direction on D, midpoint(E, F) we get 180 == direction(D, midpoint(E, F)) - direction(midpoint(E, F), D) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, I, H, E, midpoint(E, G) we get angle(midpoint(E, F), F, I) == angle(H, E, midpoint(E, G)) + 180 mod 360
By similar_triangle_basic_properties on midpoint(F, G), F, D, midpoint(F, G), A, F we get not_collinear(D, F, midpoint(F, G)), not_collinear(A, F, midpoint(F, G)), angle(midpoint(F, G), A, F) == angle(midpoint(F, G), F, D) mod 360, angle(A, F, midpoint(F, G)) == angle(F, D, midpoint(F, G)) mod 360, angle(D, midpoint(F, G), F) == angle(F, midpoint(F, G), A) mod 360, log(distance(A, midpoint(F, G))) + log(distance(D, F)) == log(distance(F, midpoint(F, G))) + log(distance(A, F)), log(distance(A, F)) + log(distance(D, midpoint(F, G))) == log(distance(D, F)) + log(distance(F, midpoint(F, G))), log(distance(D, midpoint(F, G))) + log(distance(A, midpoint(F, G))) == log(distance(F, midpoint(F, G))) + log(distance(F, midpoint(F, G)))
By divide_by_2_mod_180_v0 on E, I, F, midpoint(E, F), D, F we get angle(E, I, F) == angle(midpoint(E, F), D, F) mod 360
By divide_by_2_mod_180_v0 on D, F, midpoint(E, F), F, E, D we get angle(F, E, D) == angle(D, F, midpoint(E, F)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on B, midpoint(F, I), F we get not_collinear(B, F, midpoint(F, I)), exists(Line(F, midpoint(F, I)))
By divide_by_2_mod_180_v0 on D, J, I, D, E, midpoint(E, I) we get angle(D, J, I) == angle(D, E, midpoint(E, I)) mod 360
By divide_by_2_mod_180_v0 on B, C, D, D, E, midpoint(E, F) we get angle(B, C, D) == angle(D, E, midpoint(E, F)) mod 360
By sas_anti_similarity on C, midpoint(E, F), F, E, midpoint(E, F), D we get anti_similar_triangles(C, F, midpoint(E, F), E, D, midpoint(E, F))
By divide_by_2_mod_180_v0 on F, J, E, G, F, midpoint(E, F) we get angle(F, J, E) == angle(G, F, midpoint(E, F)) mod 360
By anti_similar_triangle_basic_properties on midpoint(E, G), E, B, E, D, B we get not_collinear(B, E, midpoint(E, G)), not_collinear(B, D, E), 0 - angle(E, D, B) == angle(midpoint(E, G), E, B) mod 360, 0 - angle(D, B, E) == angle(E, B, midpoint(E, G)) mod 360, 0 - angle(B, E, D) == angle(B, midpoint(E, G), E) mod 360, log(distance(D, E)) + log(distance(B, E)) == log(distance(E, midpoint(E, G))) + log(distance(B, D)), log(distance(B, E)) + log(distance(B, E)) == log(distance(B, D)) + log(distance(B, midpoint(E, G))), log(distance(B, E)) + log(distance(E, midpoint(E, G))) == log(distance(B, midpoint(E, G))) + log(distance(D, E))
By sas_anti_similarity on C, midpoint(E, F), E, F, midpoint(E, F), D we get anti_similar_triangles(C, E, midpoint(E, F), F, D, midpoint(E, F))
By divide_by_2_mod_180_v0 on J, F, E, C, F, midpoint(E, F) we get angle(J, F, E) == angle(C, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on H, G, E, midpoint(E, I), D, E we get angle(H, G, E) == angle(midpoint(E, I), D, E) mod 360
By divide_by_2_mod_180_v1 on J, E, midpoint(E, F), C, D, B we get angle(C, D, B) + 180 == angle(J, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), E, F, midpoint(E, F), E, J we get angle(midpoint(E, F), E, J) == angle(midpoint(E, G), E, F) mod 360
By divide_by_2_mod_180_v1 on E, F, H, midpoint(E, F), F, C we get angle(E, F, H) == angle(midpoint(E, F), F, C) + 180 mod 360
By divide_by_2_mod_180_v1 on F, G, B, J, E, midpoint(E, F) we get angle(F, G, B) == angle(J, E, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v0 on D, E, midpoint(E, I), E, H, B we get angle(E, H, B) == angle(D, E, midpoint(E, I)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, G, C, E, G we get angle(C, E, G) + 180 == angle(midpoint(E, F), F, G) mod 360
By divide_by_2_mod_180_v0 on J, F, midpoint(E, F), J, F, E we get angle(J, F, E) == angle(J, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on H, F, E, F, D, midpoint(E, F) we get angle(H, F, E) == angle(F, D, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), E, J, H, D, C we get angle(H, D, C) == angle(midpoint(E, F), E, J) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), G, E, J, F, midpoint(E, F) we get angle(J, F, midpoint(E, F)) == angle(midpoint(F, G), G, E) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on A, I, midpoint(G, I) we get not_collinear(A, I, midpoint(G, I)), exists(Line(I, midpoint(G, I)))
By divide_by_2_mod_180_v0 on D, J, E, midpoint(E, I), E, D we get angle(D, J, E) == angle(midpoint(E, I), E, D) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, H, C, E, F we get angle(C, E, F) + 180 == angle(midpoint(E, F), F, H) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on E, G, midpoint(G, I) we get not_collinear(E, G, midpoint(G, I)), exists(Line(G, midpoint(G, I)))
By divide_by_2_mod_180_v0 on I, E, C, midpoint(E, I), D, E we get angle(I, E, C) == angle(midpoint(E, I), D, E) mod 360
By divide_by_2_mod_180_v0 on E, F, D, D, E, midpoint(E, F) we get angle(E, F, D) == angle(D, E, midpoint(E, F)) mod 360
By sas_anti_similarity on E, midpoint(E, F), D, C, midpoint(E, F), F we get anti_similar_triangles(C, F, midpoint(E, F), E, D, midpoint(E, F))
By divide_by_2_mod_180_v1 on midpoint(E, F), E, B, F, D, C we get angle(F, D, C) + 180 == angle(midpoint(E, F), E, B) mod 360
By divide_by_2_mod_180_v1 on A, D, B, C, F, midpoint(E, F) we get angle(A, D, B) == angle(C, F, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v0 on C, E, midpoint(E, F), E, F, C we get angle(E, F, C) == angle(C, E, midpoint(E, F)) mod 360
By anti_similar_triangle_basic_properties on A, midpoint(F, G), F, G, midpoint(F, G), D we get not_collinear(A, F, midpoint(F, G)), not_collinear(D, G, midpoint(F, G)), angle(A, midpoint(F, G), F) == 0 - angle(G, midpoint(F, G), D) mod 360, angle(midpoint(F, G), F, A) == 0 - angle(midpoint(F, G), D, G) mod 360, angle(F, A, midpoint(F, G)) == 0 - angle(D, G, midpoint(F, G)) mod 360, log(distance(A, midpoint(F, G))) + log(distance(D, midpoint(F, G))) == log(distance(G, midpoint(F, G))) + log(distance(F, midpoint(F, G))), log(distance(D, midpoint(F, G))) + log(distance(A, F)) == log(distance(F, midpoint(F, G))) + log(distance(D, G)), log(distance(A, F)) + log(distance(G, midpoint(F, G))) == log(distance(D, G)) + log(distance(A, midpoint(F, G)))
By not_in_line_equivalent_to_not_collinear_v0 on D, I, midpoint(F, I) we get not_collinear(D, I, midpoint(F, I)), exists(Line(I, midpoint(F, I)))
By divide_by_2_mod_180_v1 on J, F, E, midpoint(E, F), E, B we get angle(J, F, E) == angle(midpoint(E, F), E, B) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, I), I, D, B, H, G we get angle(B, H, G) == angle(midpoint(E, I), I, D) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), E, C, J, F, E we get angle(J, F, E) == angle(midpoint(E, F), E, C) mod 360
By divide_by_2_mod_180_v1 on F, I, G, midpoint(E, F), E, G we get angle(F, I, G) == angle(midpoint(E, F), E, G) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), F, J, C, D, F we get angle(C, D, F) == angle(midpoint(E, F), F, J) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), D, G, midpoint(E, F), E, G we get angle(midpoint(E, F), E, G) == angle(midpoint(F, G), D, G) mod 360
By divide_by_2_mod_180_v0 on E, D, C, midpoint(E, F), D, F we get angle(E, D, C) == angle(midpoint(E, F), D, F) mod 360
By anti_similar_triangle_basic_properties on D, E, midpoint(E, G), G, B, midpoint(E, G) we get not_collinear(D, E, midpoint(E, G)), not_collinear(B, G, midpoint(E, G)), angle(D, E, midpoint(E, G)) == 0 - angle(G, B, midpoint(E, G)) mod 360, angle(E, midpoint(E, G), D) == 0 - angle(B, midpoint(E, G), G) mod 360, angle(midpoint(E, G), D, E) == 0 - angle(midpoint(E, G), G, B) mod 360, log(distance(B, G)) + log(distance(E, midpoint(E, G))) == log(distance(D, E)) + log(distance(B, midpoint(E, G))), log(distance(B, midpoint(E, G))) + log(distance(D, midpoint(E, G))) == log(distance(E, midpoint(E, G))) + log(distance(G, midpoint(E, G))), log(distance(D, midpoint(E, G))) + log(distance(B, G)) == log(distance(G, midpoint(E, G))) + log(distance(D, E))
By divide_by_2_mod_180_v0 on E, F, J, midpoint(E, F), F, C we get angle(E, F, J) == angle(midpoint(E, F), F, C) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), D, F, E, F, J we get angle(E, F, J) == angle(midpoint(E, F), D, F) mod 360
By divide_by_2_mod_180_v0 on C, E, midpoint(E, F), midpoint(E, F), D, F we get angle(C, E, midpoint(E, F)) == angle(midpoint(E, F), D, F) mod 360
By divide_by_2_mod_180_v1 on B, E, midpoint(E, F), E, D, C we get angle(E, D, C) + 180 == angle(B, E, midpoint(E, F)) mod 360
By line_containment_inequality on midpoint(F, I), G, Line(F, I) we get G != midpoint(F, I)
By divide_by_2_mod_180_v1 on C, E, F, midpoint(E, F), F, A we get angle(C, E, F) == angle(midpoint(E, F), F, A) + 180 mod 360
By divide_by_2_mod_180_v0 on D, J, E, D, I, midpoint(E, I) we get angle(D, J, E) == angle(D, I, midpoint(E, I)) mod 360
By divide_by_2_mod_180_v1 on I, F, midpoint(E, F), H, G, E we get angle(H, G, E) + 180 == angle(I, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on G, E, F, G, E, midpoint(E, F) we get angle(G, E, F) == angle(G, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), C, E, midpoint(E, F), E, D we get angle(midpoint(E, F), C, E) == angle(midpoint(E, F), E, D) mod 360
By divide_by_2_mod_180_v0 on E, D, midpoint(E, F), E, F, C we get angle(E, F, C) == angle(E, D, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on D, I, midpoint(E, I), G, H, D we get angle(G, H, D) == angle(D, I, midpoint(E, I)) mod 360
By divide_by_2_mod_180_v1 on E, F, C, midpoint(E, F), F, A we get angle(E, F, C) == angle(midpoint(E, F), F, A) + 180 mod 360
By divide_by_2_mod_180_v1 on J, F, midpoint(E, F), A, D, B we get angle(A, D, B) + 180 == angle(J, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on E, G, I, E, D, midpoint(E, I) we get angle(E, G, I) == angle(E, D, midpoint(E, I)) mod 360
By divide_by_2_mod_180_v1 on H, F, E, midpoint(E, F), D, E we get angle(H, F, E) == angle(midpoint(E, F), D, E) + 180 mod 360
By divide_by_2_mod_180_v0 on G, D, midpoint(E, G), G, F, midpoint(E, F) we get angle(G, D, midpoint(E, G)) == angle(G, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on A, F, E, midpoint(E, F), E, B we get angle(A, F, E) == angle(midpoint(E, F), E, B) mod 360
By similar_triangle_basic_properties on E, midpoint(E, G), D, B, G, D we get not_collinear(D, E, midpoint(E, G)), not_collinear(B, D, G), angle(B, G, D) == angle(E, midpoint(E, G), D) mod 360, angle(G, D, B) == angle(midpoint(E, G), D, E) mod 360, angle(D, B, G) == angle(D, E, midpoint(E, G)) mod 360, log(distance(B, G)) + log(distance(D, midpoint(E, G))) == log(distance(E, midpoint(E, G))) + log(distance(D, G)), log(distance(D, G)) + log(distance(D, E)) == log(distance(D, midpoint(E, G))) + log(distance(B, D)), log(distance(D, E)) + log(distance(B, G)) == log(distance(B, D)) + log(distance(E, midpoint(E, G)))
By divide_by_2_mod_180_v0 on F, I, E, F, D, midpoint(E, F) we get angle(F, I, E) == angle(F, D, midpoint(E, F)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, F), midpoint(E, G), G we get not_collinear(G, midpoint(E, F), midpoint(E, G)), exists(Line(G, midpoint(E, G)))
By divide_by_2_mod_180_v0 on F, C, D, F, C, midpoint(E, F) we get angle(F, C, D) == angle(F, C, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on D, E, I, D, E, midpoint(E, I) we get angle(D, E, I) == angle(D, E, midpoint(E, I)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, I), D, E, I, G, midpoint(E, G) we get angle(I, G, midpoint(E, G)) == angle(midpoint(E, I), D, E) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, I), E, midpoint(E, F) we get not_collinear(E, midpoint(E, F), midpoint(E, I)), exists(Line(E, midpoint(E, F)))
By divide_by_2_mod_180_v0 on midpoint(F, G), G, A, J, E, midpoint(E, F) we get angle(J, E, midpoint(E, F)) == angle(midpoint(F, G), G, A) mod 360
By divide_by_2_mod_180_v1 on E, F, H, midpoint(E, F), D, F we get angle(E, F, H) == angle(midpoint(E, F), D, F) + 180 mod 360
By divide_by_2_mod_180_v1 on I, F, E, I, D, midpoint(E, I) we get angle(I, F, E) == angle(I, D, midpoint(E, I)) + 180 mod 360
By divide_by_2_mod_180_v0 on F, D, midpoint(E, F), C, D, E we get angle(C, D, E) == angle(F, D, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on B, E, F, midpoint(E, F), D, F we get angle(B, E, F) == angle(midpoint(E, F), D, F) + 180 mod 360
By divide_by_2_mod_180_v0 on E, G, I, midpoint(E, I), D, I we get angle(E, G, I) == angle(midpoint(E, I), D, I) mod 360
By divide_by_2_mod_180_v1 on E, F, A, midpoint(E, F), F, J we get angle(E, F, A) == angle(midpoint(E, F), F, J) + 180 mod 360
By directions_draw_angle on A, G, midpoint(G, I) we get exists(angle(A, G, midpoint(G, I)))
By divide_by_2_mod_180_v1 on midpoint(E, F), E, J, B, G, F we get angle(B, G, F) + 180 == angle(midpoint(E, F), E, J) mod 360
By divide_by_2_mod_180_v1 on E, D, midpoint(E, F), B, D, A we get angle(B, D, A) + 180 == angle(E, D, midpoint(E, F)) mod 360
By similar_triangle_basic_properties on B, D, E, B, G, midpoint(E, G) we get not_collinear(B, D, E), not_collinear(B, G, midpoint(E, G)), angle(B, D, E) == angle(B, G, midpoint(E, G)) mod 360, angle(D, E, B) == angle(G, midpoint(E, G), B) mod 360, angle(E, B, D) == angle(midpoint(E, G), B, G) mod 360, log(distance(B, G)) + log(distance(D, E)) == log(distance(B, D)) + log(distance(G, midpoint(E, G))), log(distance(D, E)) + log(distance(B, midpoint(E, G))) == log(distance(G, midpoint(E, G))) + log(distance(B, E)), log(distance(B, E)) + log(distance(B, G)) == log(distance(B, midpoint(E, G))) + log(distance(B, D))
By divide_by_2_mod_180_v1 on midpoint(E, F), F, A, C, E, F we get angle(C, E, F) + 180 == angle(midpoint(E, F), F, A) mod 360
By divide_by_2_mod_180_v0 on J, E, midpoint(E, F), F, D, midpoint(F, G) we get angle(F, D, midpoint(F, G)) == angle(J, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, I), D, I, midpoint(E, G), G, H we get angle(midpoint(E, G), G, H) == angle(midpoint(E, I), D, I) mod 360
By divide_by_2_mod_180_v0 on I, D, midpoint(E, I), midpoint(E, G), E, H we get angle(I, D, midpoint(E, I)) == angle(midpoint(E, G), E, H) mod 360
By divide_by_2_mod_180_v0 on J, E, midpoint(E, F), F, E, midpoint(E, G) we get angle(F, E, midpoint(E, G)) == angle(J, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on A, D, B, midpoint(E, F), E, B we get angle(A, D, B) == angle(midpoint(E, F), E, B) mod 360
By divide_by_2_mod_180_v1 on D, C, J, D, E, midpoint(E, F) we get angle(D, C, J) == angle(D, E, midpoint(E, F)) + 180 mod 360
By directions_draw_angle on center(d), I, midpoint(G, I) we get exists(angle(center(d), I, midpoint(G, I)))
By divide_by_2_mod_180_v0 on C, E, midpoint(E, F), C, D, F we get angle(C, D, F) == angle(C, E, midpoint(E, F)) mod 360
By concyclic_definition_1 on midpoint(F, G), D, G, midpoint(E, G) we get Circle(D, G, midpoint(E, G)) == Circle(D, G, midpoint(F, G))
By divide_by_2_mod_180_v0 on midpoint(E, F), C, F, E, C, D we get angle(E, C, D) == angle(midpoint(E, F), C, F) mod 360
By divide_by_2_mod_180_v1 on A, F, midpoint(E, F), F, D, C we get angle(F, D, C) + 180 == angle(A, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), D, E, F, D, C we get angle(F, D, C) == angle(midpoint(E, F), D, E) mod 360
By anti_similar_triangle_basic_properties on B, midpoint(E, G), E, G, midpoint(E, G), D we get not_collinear(B, E, midpoint(E, G)), not_collinear(D, G, midpoint(E, G)), angle(B, midpoint(E, G), E) == 0 - angle(G, midpoint(E, G), D) mod 360, angle(midpoint(E, G), E, B) == 0 - angle(midpoint(E, G), D, G) mod 360, angle(E, B, midpoint(E, G)) == 0 - angle(D, G, midpoint(E, G)) mod 360, log(distance(B, midpoint(E, G))) + log(distance(D, midpoint(E, G))) == log(distance(G, midpoint(E, G))) + log(distance(E, midpoint(E, G))), log(distance(D, midpoint(E, G))) + log(distance(B, E)) == log(distance(E, midpoint(E, G))) + log(distance(D, G)), log(distance(B, E)) + log(distance(G, midpoint(E, G))) == log(distance(D, G)) + log(distance(B, midpoint(E, G)))
By divide_by_2_mod_180_v0 on C, F, midpoint(E, F), midpoint(E, F), D, E we get angle(C, F, midpoint(E, F)) == angle(midpoint(E, F), D, E) mod 360
By divide_by_2_mod_180_v1 on B, E, midpoint(E, F), E, F, C we get angle(E, F, C) + 180 == angle(B, E, midpoint(E, F)) mod 360
By similar_triangle_basic_properties on A, G, D, A, midpoint(F, G), F we get not_collinear(A, D, G), not_collinear(A, F, midpoint(F, G)), angle(A, G, D) == angle(A, midpoint(F, G), F) mod 360, angle(G, D, A) == angle(midpoint(F, G), F, A) mod 360, angle(D, A, G) == angle(F, A, midpoint(F, G)) mod 360, log(distance(A, G)) + log(distance(F, midpoint(F, G))) == log(distance(A, midpoint(F, G))) + log(distance(D, G)), log(distance(D, G)) + log(distance(A, F)) == log(distance(F, midpoint(F, G))) + log(distance(A, D)), log(distance(A, F)) + log(distance(A, G)) == log(distance(A, D)) + log(distance(A, midpoint(F, G)))
By divide_by_2_mod_180_v1 on midpoint(F, G), F, J, midpoint(E, F), E, J we get angle(midpoint(F, G), F, J) == angle(midpoint(E, F), E, J) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), E, G, F, I, G we get angle(F, I, G) + 180 == angle(midpoint(E, F), E, G) mod 360
By divide_by_2_mod_180_v1 on J, F, G, midpoint(E, F), E, G we get angle(J, F, G) == angle(midpoint(E, F), E, G) + 180 mod 360
By divide_by_2_mod_180_v0 on H, F, E, midpoint(E, F), E, B we get angle(H, F, E) == angle(midpoint(E, F), E, B) mod 360
By reverse_direction on midpoint(G, I), G we get 180 == direction(midpoint(G, I), G) - direction(G, midpoint(G, I)) mod 360
By similar_triangle_basic_properties on B, midpoint(E, G), G, G, midpoint(E, G), D we get not_collinear(B, G, midpoint(E, G)), not_collinear(D, G, midpoint(E, G)), angle(B, midpoint(E, G), G) == angle(G, midpoint(E, G), D) mod 360, angle(midpoint(E, G), D, G) == angle(midpoint(E, G), G, B) mod 360, angle(D, G, midpoint(E, G)) == angle(G, B, midpoint(E, G)) mod 360, log(distance(B, midpoint(E, G))) + log(distance(D, midpoint(E, G))) == log(distance(G, midpoint(E, G))) + log(distance(G, midpoint(E, G))), log(distance(D, midpoint(E, G))) + log(distance(B, G)) == log(distance(G, midpoint(E, G))) + log(distance(D, G)), log(distance(B, G)) + log(distance(G, midpoint(E, G))) == log(distance(D, G)) + log(distance(B, midpoint(E, G)))
By divide_by_2_mod_180_v1 on C, E, G, midpoint(E, F), F, G we get angle(C, E, G) == angle(midpoint(E, F), F, G) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), F, J, midpoint(E, F), D, F we get angle(midpoint(E, F), D, F) == angle(midpoint(E, F), F, J) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), E, B, F, I, E we get angle(F, I, E) + 180 == angle(midpoint(E, F), E, B) mod 360
By divide_by_2_mod_180_v0 on I, F, midpoint(E, F), I, F, E we get angle(I, F, E) == angle(I, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), F, J, midpoint(E, G), G, F we get angle(midpoint(E, F), F, J) == angle(midpoint(E, G), G, F) mod 360
By divide_by_2_mod_180_v0 on F, C, D, midpoint(E, F), E, D we get angle(F, C, D) == angle(midpoint(E, F), E, D) mod 360
By directions_draw_angle on midpoint(E, F), D, H we get exists(angle(midpoint(E, F), D, H))
By divide_by_2_mod_180_v0 on midpoint(E, F), E, C, F, I, E we get angle(F, I, E) == angle(midpoint(E, F), E, C) mod 360
By divide_by_2_mod_180_v1 on B, E, midpoint(E, F), midpoint(E, G), G, F we get angle(B, E, midpoint(E, F)) == angle(midpoint(E, G), G, F) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), G, E, F, D, midpoint(E, F) we get angle(F, D, midpoint(E, F)) == angle(midpoint(F, G), G, E) mod 360
By divide_by_2_mod_180_v0 on F, E, D, F, C, midpoint(E, F) we get angle(F, E, D) == angle(F, C, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, A, midpoint(E, G), G, F we get angle(midpoint(E, F), F, A) == angle(midpoint(E, G), G, F) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), E, I, F, G, I we get angle(F, G, I) == angle(midpoint(E, F), E, I) mod 360
By divide_by_2_mod_180_v0 on C, D, E, J, F, midpoint(E, F) we get angle(C, D, E) == angle(J, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), E, G, F, I, H we get angle(F, I, H) == angle(midpoint(E, F), E, G) mod 360
By divide_by_2_mod_180_v0 on H, C, D, midpoint(E, F), E, D we get angle(H, C, D) == angle(midpoint(E, F), E, D) mod 360
By anti_similar_triangle_basic_properties on F, midpoint(F, G), D, A, F, D we get not_collinear(D, F, midpoint(F, G)), not_collinear(A, D, F), 0 - angle(A, F, D) == angle(F, midpoint(F, G), D) mod 360, 0 - angle(F, D, A) == angle(midpoint(F, G), D, F) mod 360, 0 - angle(D, A, F) == angle(D, F, midpoint(F, G)) mod 360, log(distance(A, F)) + log(distance(D, midpoint(F, G))) == log(distance(F, midpoint(F, G))) + log(distance(D, F)), log(distance(D, F)) + log(distance(D, F)) == log(distance(D, midpoint(F, G))) + log(distance(A, D)), log(distance(D, F)) + log(distance(A, F)) == log(distance(A, D)) + log(distance(F, midpoint(F, G)))
By divide_by_2_mod_180_v1 on B, E, F, C, E, midpoint(E, F) we get angle(B, E, F) == angle(C, E, midpoint(E, F)) + 180 mod 360
By anti_similar_triangle_basic_properties on midpoint(F, G), G, A, G, D, A we get not_collinear(A, G, midpoint(F, G)), not_collinear(A, D, G), 0 - angle(G, D, A) == angle(midpoint(F, G), G, A) mod 360, 0 - angle(D, A, G) == angle(G, A, midpoint(F, G)) mod 360, 0 - angle(A, G, D) == angle(A, midpoint(F, G), G) mod 360, log(distance(D, G)) + log(distance(A, G)) == log(distance(G, midpoint(F, G))) + log(distance(A, D)), log(distance(A, G)) + log(distance(A, G)) == log(distance(A, D)) + log(distance(A, midpoint(F, G))), log(distance(A, G)) + log(distance(G, midpoint(F, G))) == log(distance(A, midpoint(F, G))) + log(distance(D, G))
By divide_by_2_mod_180_v0 on midpoint(F, G), F, A, midpoint(E, F), E, J we get angle(midpoint(E, F), E, J) == angle(midpoint(F, G), F, A) mod 360
By divide_by_2_mod_180_v1 on A, F, E, midpoint(E, F), D, E we get angle(A, F, E) == angle(midpoint(E, F), D, E) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), E, I, C, F, I we get angle(C, F, I) + 180 == angle(midpoint(E, F), E, I) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, F), A, H we get not_collinear(A, H, midpoint(E, F)), exists(Line(A, H))
By divide_by_2_mod_180_v1 on A, D, B, midpoint(E, F), D, E we get angle(A, D, B) == angle(midpoint(E, F), D, E) + 180 mod 360
By divide_by_2_mod_180_v0 on G, F, midpoint(E, F), midpoint(E, G), E, B we get angle(G, F, midpoint(E, F)) == angle(midpoint(E, G), E, B) mod 360
By divide_by_2_mod_180_v1 on C, E, midpoint(E, F), E, F, H we get angle(E, F, H) + 180 == angle(C, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, G, H, D, G we get angle(H, D, G) + 180 == angle(midpoint(E, F), F, G) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, I), I, D, D, E, I we get angle(D, E, I) == angle(midpoint(E, I), I, D) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, A, E, F, J we get angle(E, F, J) + 180 == angle(midpoint(E, F), F, A) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), F, C, midpoint(E, F), D, F we get angle(midpoint(E, F), D, F) == angle(midpoint(E, F), F, C) mod 360
By divide_by_2_mod_180_v1 on G, D, H, G, F, midpoint(E, F) we get angle(G, D, H) == angle(G, F, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v0 on D, F, midpoint(E, F), D, C, B we get angle(D, C, B) == angle(D, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on A, G, F, midpoint(E, F), E, J we get angle(A, G, F) == angle(midpoint(E, F), E, J) mod 360
By directions_draw_angle on G, I, midpoint(F, I) we get exists(angle(G, I, midpoint(F, I)))
By divide_by_2_mod_180_v0 on midpoint(E, I), D, I, midpoint(E, G), G, I we get angle(midpoint(E, G), G, I) == angle(midpoint(E, I), D, I) mod 360
By divide_by_2_mod_180_v0 on H, F, midpoint(E, F), H, F, E we get angle(H, F, E) == angle(H, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on E, C, midpoint(E, F), D, C, F we get angle(D, C, F) == angle(E, C, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), F, H, B, E, F we get angle(B, E, F) == angle(midpoint(E, F), F, H) mod 360
By divide_by_2_mod_180_v0 on C, F, midpoint(E, F), F, D, midpoint(E, F) we get angle(C, F, midpoint(E, F)) == angle(F, D, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on F, G, midpoint(E, G), midpoint(E, F), E, C we get angle(F, G, midpoint(E, G)) == angle(midpoint(E, F), E, C) mod 360
By divide_by_2_mod_180_v1 on C, D, E, H, F, midpoint(E, F) we get angle(C, D, E) == angle(H, F, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), G, B, midpoint(E, F), E, G we get angle(midpoint(F, G), G, B) == angle(midpoint(E, F), E, G) + 180 mod 360
By divide_by_2_mod_180_v0 on F, E, G, J, E, midpoint(E, F) we get angle(F, E, G) == angle(J, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on A, J, E, G, F, midpoint(E, F) we get angle(A, J, E) == angle(G, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), G, B, J, E, midpoint(E, F) we get angle(midpoint(F, G), G, B) == angle(J, E, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), F, C, G, E, midpoint(E, F) we get angle(midpoint(F, G), F, C) == angle(G, E, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on C, F, I, midpoint(E, F), E, I we get angle(C, F, I) == angle(midpoint(E, F), E, I) + 180 mod 360
By divide_by_2_mod_180_v0 on A, F, G, midpoint(E, F), E, G we get angle(A, F, G) == angle(midpoint(E, F), E, G) mod 360
By anti_similar_triangle_basic_properties on D, midpoint(E, G), G, E, midpoint(E, G), B we get not_collinear(D, G, midpoint(E, G)), not_collinear(B, E, midpoint(E, G)), angle(D, midpoint(E, G), G) == 0 - angle(E, midpoint(E, G), B) mod 360, angle(midpoint(E, G), G, D) == 0 - angle(midpoint(E, G), B, E) mod 360, angle(G, D, midpoint(E, G)) == 0 - angle(B, E, midpoint(E, G)) mod 360, log(distance(D, midpoint(E, G))) + log(distance(B, midpoint(E, G))) == log(distance(E, midpoint(E, G))) + log(distance(G, midpoint(E, G))), log(distance(B, midpoint(E, G))) + log(distance(D, G)) == log(distance(G, midpoint(E, G))) + log(distance(B, E)), log(distance(B, E)) + log(distance(D, midpoint(E, G))) == log(distance(D, G)) + log(distance(E, midpoint(E, G)))
By divide_by_2_mod_180_v0 on G, E, midpoint(E, F), G, D, midpoint(F, G) we get angle(G, D, midpoint(F, G)) == angle(G, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, A, C, D, F we get angle(C, D, F) + 180 == angle(midpoint(E, F), F, A) mod 360
By divide_by_2_mod_180_v1 on A, F, midpoint(E, F), F, D, midpoint(E, F) we get angle(A, F, midpoint(E, F)) == angle(F, D, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v0 on J, F, midpoint(E, F), F, D, midpoint(E, F) we get angle(F, D, midpoint(E, F)) == angle(J, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), F, J, E, D, midpoint(E, F) we get angle(E, D, midpoint(E, F)) == angle(midpoint(E, F), F, J) mod 360
By divide_by_2_mod_180_v0 on F, G, midpoint(E, G), J, F, midpoint(E, F) we get angle(F, G, midpoint(E, G)) == angle(J, F, midpoint(E, F)) mod 360
By directions_draw_angle on midpoint(F, I), I, center(d) we get exists(angle(midpoint(F, I), I, center(d)))
By divide_by_2_mod_180_v1 on F, E, C, H, F, midpoint(E, F) we get angle(F, E, C) == angle(H, F, midpoint(E, F)) + 180 mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, F), midpoint(F, I), F we get not_collinear(F, midpoint(E, F), midpoint(F, I)), exists(Line(F, midpoint(F, I)))
By divide_by_2_mod_180_v0 on J, E, midpoint(E, F), F, D, A we get angle(F, D, A) == angle(J, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on E, F, C, B, E, midpoint(E, F) we get angle(E, F, C) == angle(B, E, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v0 on C, F, midpoint(E, F), F, E, C we get angle(F, E, C) == angle(C, F, midpoint(E, F)) mod 360
By directions_draw_angle on midpoint(E, F), D, midpoint(E, G) we get exists(angle(midpoint(E, F), D, midpoint(E, G)))
By similar_triangle_basic_properties on E, midpoint(E, G), D, B, midpoint(E, G), E we get not_collinear(D, E, midpoint(E, G)), not_collinear(B, E, midpoint(E, G)), angle(B, midpoint(E, G), E) == angle(E, midpoint(E, G), D) mod 360, angle(midpoint(E, G), D, E) == angle(midpoint(E, G), E, B) mod 360, angle(D, E, midpoint(E, G)) == angle(E, B, midpoint(E, G)) mod 360, log(distance(B, midpoint(E, G))) + log(distance(D, midpoint(E, G))) == log(distance(E, midpoint(E, G))) + log(distance(E, midpoint(E, G))), log(distance(D, midpoint(E, G))) + log(distance(B, E)) == log(distance(E, midpoint(E, G))) + log(distance(D, E)), log(distance(B, E)) + log(distance(E, midpoint(E, G))) == log(distance(D, E)) + log(distance(B, midpoint(E, G)))
By divide_by_2_mod_180_v0 on midpoint(E, F), F, C, E, G, F we get angle(E, G, F) == angle(midpoint(E, F), F, C) mod 360
By divide_by_2_mod_180_v1 on E, F, A, C, E, midpoint(E, F) we get angle(E, F, A) == angle(C, E, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), E, I, H, F, I we get angle(H, F, I) == angle(midpoint(E, F), E, I) mod 360
By divide_by_2_mod_180_v0 on F, D, midpoint(E, F), A, D, H we get angle(A, D, H) == angle(F, D, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on I, D, midpoint(E, I), G, E, H we get angle(G, E, H) == angle(I, D, midpoint(E, I)) mod 360
By divide_by_2_mod_180_v0 on G, I, E, G, F, midpoint(E, F) we get angle(G, I, E) == angle(G, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on C, E, midpoint(E, F), midpoint(E, G), G, F we get angle(C, E, midpoint(E, F)) == angle(midpoint(E, G), G, F) mod 360
By divide_by_2_mod_180_v1 on C, F, G, midpoint(E, F), E, G we get angle(C, F, G) == angle(midpoint(E, F), E, G) + 180 mod 360
By similar_triangle_basic_properties on D, A, F, G, A, midpoint(F, G) we get not_collinear(A, D, F), not_collinear(A, G, midpoint(F, G)), angle(D, A, F) == angle(G, A, midpoint(F, G)) mod 360, angle(A, F, D) == angle(A, midpoint(F, G), G) mod 360, angle(F, D, A) == angle(midpoint(F, G), G, A) mod 360, log(distance(A, G)) + log(distance(A, F)) == log(distance(A, D)) + log(distance(A, midpoint(F, G))), log(distance(A, F)) + log(distance(G, midpoint(F, G))) == log(distance(A, midpoint(F, G))) + log(distance(D, F)), log(distance(D, F)) + log(distance(A, G)) == log(distance(G, midpoint(F, G))) + log(distance(A, D))
By divide_by_2_mod_180_v0 on midpoint(E, F), F, J, E, G, midpoint(F, G) we get angle(E, G, midpoint(F, G)) == angle(midpoint(E, F), F, J) mod 360
By divide_by_2_mod_180_v0 on D, E, midpoint(E, F), D, E, F we get angle(D, E, F) == angle(D, E, midpoint(E, F)) mod 360
By directions_draw_angle on midpoint(G, I), I, D we get exists(angle(midpoint(G, I), I, D))
By divide_by_2_mod_180_v0 on D, I, midpoint(E, I), I, H, B we get angle(I, H, B) == angle(D, I, midpoint(E, I)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), D, E, A, F, E we get angle(A, F, E) + 180 == angle(midpoint(E, F), D, E) mod 360
By divide_by_2_mod_180_v0 on H, F, midpoint(F, G), J, E, midpoint(E, F) we get angle(H, F, midpoint(F, G)) == angle(J, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, A, E, D, C we get angle(E, D, C) + 180 == angle(midpoint(E, F), F, A) mod 360
By divide_by_2_mod_180_v1 on B, E, midpoint(E, F), C, E, F we get angle(C, E, F) + 180 == angle(B, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on B, H, I, midpoint(E, I), I, D we get angle(B, H, I) == angle(midpoint(E, I), I, D) mod 360
By divide_by_2_mod_180_v0 on G, E, B, G, F, midpoint(E, F) we get angle(G, E, B) == angle(G, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on E, D, C, B, E, midpoint(E, F) we get angle(E, D, C) == angle(B, E, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v0 on D, I, midpoint(E, I), D, H, E we get angle(D, H, E) == angle(D, I, midpoint(E, I)) mod 360
By divide_by_2_mod_180_v0 on E, I, F, E, D, midpoint(E, F) we get angle(E, I, F) == angle(E, D, midpoint(E, F)) mod 360
By anti_similar_triangle_basic_properties on B, D, E, E, D, midpoint(E, G) we get not_collinear(B, D, E), not_collinear(D, E, midpoint(E, G)), angle(B, D, E) == 0 - angle(E, D, midpoint(E, G)) mod 360, angle(D, E, B) == 0 - angle(D, midpoint(E, G), E) mod 360, angle(E, B, D) == 0 - angle(midpoint(E, G), E, D) mod 360, log(distance(D, E)) + log(distance(D, E)) == log(distance(B, D)) + log(distance(D, midpoint(E, G))), log(distance(D, E)) + log(distance(E, midpoint(E, G))) == log(distance(D, midpoint(E, G))) + log(distance(B, E)), log(distance(B, E)) + log(distance(D, E)) == log(distance(E, midpoint(E, G))) + log(distance(B, D))
By divide_by_2_mod_180_v1 on D, C, J, E, C, midpoint(E, F) we get angle(D, C, J) == angle(E, C, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v0 on C, F, E, J, F, midpoint(E, F) we get angle(C, F, E) == angle(J, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on H, F, midpoint(E, F), F, D, C we get angle(F, D, C) + 180 == angle(H, F, midpoint(E, F)) mod 360
By directions_draw_angle on midpoint(E, I), D, midpoint(E, F) we get exists(angle(midpoint(E, I), D, midpoint(E, F)))
By divide_by_2_mod_180_v1 on A, F, midpoint(E, F), J, F, E we get angle(J, F, E) + 180 == angle(A, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on H, C, D, D, F, midpoint(E, F) we get angle(H, C, D) == angle(D, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on G, F, H, midpoint(E, F), E, J we get angle(G, F, H) == angle(midpoint(E, F), E, J) mod 360
By divide_by_2_mod_180_v1 on E, D, C, midpoint(E, F), F, A we get angle(E, D, C) == angle(midpoint(E, F), F, A) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, I, E, G, H we get angle(E, G, H) + 180 == angle(midpoint(E, F), F, I) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), D, F, C, E, F we get angle(C, E, F) == angle(midpoint(E, F), D, F) mod 360
By divide_by_2_mod_180_v1 on F, G, midpoint(E, G), A, F, midpoint(E, F) we get angle(F, G, midpoint(E, G)) == angle(A, F, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v0 on A, C, D, midpoint(E, F), C, E we get angle(A, C, D) == angle(midpoint(E, F), C, E) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), F, A, B, E, F we get angle(B, E, F) == angle(midpoint(E, F), F, A) mod 360
By divide_by_2_mod_180_v0 on I, E, midpoint(E, F), H, G, midpoint(F, G) we get angle(H, G, midpoint(F, G)) == angle(I, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on E, D, midpoint(E, F), B, E, F we get angle(B, E, F) + 180 == angle(E, D, midpoint(E, F)) mod 360
By line_circle_intersection_has_at_most_two_points_0 on midpoint(E, G), B, D, Circle(B, E, midpoint(E, G)) we get D not in Circle(B, E, midpoint(E, G))
By divide_by_2_mod_180_v0 on midpoint(E, F), D, E, A, D, H we get angle(A, D, H) == angle(midpoint(E, F), D, E) mod 360
By divide_by_2_mod_180_v0 on E, G, midpoint(F, G), C, E, midpoint(E, F) we get angle(C, E, midpoint(E, F)) == angle(E, G, midpoint(F, G)) mod 360
By directions_draw_angle on midpoint(G, I), G, midpoint(E, G) we get exists(angle(midpoint(G, I), G, midpoint(E, G)))
By divide_by_2_mod_180_v0 on E, D, midpoint(E, G), midpoint(E, F), F, G we get angle(E, D, midpoint(E, G)) == angle(midpoint(E, F), F, G) mod 360
By divide_by_2_mod_180_v0 on I, G, midpoint(F, G), I, E, midpoint(E, F) we get angle(I, E, midpoint(E, F)) == angle(I, G, midpoint(F, G)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on E, D, center(d) we get not_collinear(D, E, center(d)), exists(Line(D, center(d)))
By sas_similarity on E, midpoint(E, F), D, C, midpoint(E, F), E we get similar_triangles(C, E, midpoint(E, F), E, D, midpoint(E, F))
By divide_by_2_mod_180_v0 on D, I, midpoint(E, I), G, H, midpoint(E, G) we get angle(D, I, midpoint(E, I)) == angle(G, H, midpoint(E, G)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, F), I, midpoint(F, I) we get not_collinear(I, midpoint(E, F), midpoint(F, I)), exists(Line(I, midpoint(F, I)))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, F), G, midpoint(F, G) we get not_collinear(G, midpoint(E, F), midpoint(F, G)), exists(Line(G, midpoint(F, G)))
By sas_anti_similarity on D, midpoint(E, F), E, F, midpoint(E, F), C we get anti_similar_triangles(C, F, midpoint(E, F), E, D, midpoint(E, F))
By directions_draw_angle on midpoint(G, I), G, D we get exists(angle(midpoint(G, I), G, D))
By divide_by_2_mod_180_v0 on midpoint(E, F), F, C, E, D, midpoint(E, F) we get angle(E, D, midpoint(E, F)) == angle(midpoint(E, F), F, C) mod 360
By divide_by_2_mod_180_v0 on A, F, midpoint(F, G), J, E, midpoint(E, F) we get angle(A, F, midpoint(F, G)) == angle(J, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on I, F, midpoint(E, F), H, G, midpoint(E, G) we get angle(I, F, midpoint(E, F)) == angle(H, G, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on I, E, F, I, E, midpoint(E, F) we get angle(I, E, F) == angle(I, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on D, H, G, midpoint(E, I), I, D we get angle(D, H, G) == angle(midpoint(E, I), I, D) mod 360
By divide_by_2_mod_180_v0 on B, H, E, D, I, midpoint(E, I) we get angle(B, H, E) == angle(D, I, midpoint(E, I)) mod 360
By divide_by_2_mod_180_v1 on G, F, midpoint(E, F), H, D, E we get angle(H, D, E) + 180 == angle(G, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on H, D, A, B, E, midpoint(E, F) we get angle(H, D, A) == angle(B, E, midpoint(E, F)) + 180 mod 360
By anti_similar_triangle_basic_properties on B, D, E, B, E, midpoint(E, G) we get not_collinear(B, D, E), not_collinear(B, E, midpoint(E, G)), angle(B, D, E) == 0 - angle(B, E, midpoint(E, G)) mod 360, angle(D, E, B) == 0 - angle(E, midpoint(E, G), B) mod 360, angle(E, B, D) == 0 - angle(midpoint(E, G), B, E) mod 360, log(distance(B, E)) + log(distance(D, E)) == log(distance(B, D)) + log(distance(E, midpoint(E, G))), log(distance(D, E)) + log(distance(B, midpoint(E, G))) == log(distance(E, midpoint(E, G))) + log(distance(B, E)), log(distance(B, E)) + log(distance(B, E)) == log(distance(B, midpoint(E, G))) + log(distance(B, D))
By divide_by_2_mod_180_v0 on F, E, J, G, E, midpoint(E, F) we get angle(F, E, J) == angle(G, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), E, J, midpoint(F, G), F, H we get angle(midpoint(E, F), E, J) == angle(midpoint(F, G), F, H) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, G), midpoint(G, I), I we get not_collinear(I, midpoint(E, G), midpoint(G, I)), exists(Line(I, midpoint(G, I)))
By divide_by_2_mod_180_v1 on midpoint(E, I), D, E, I, E, B we get angle(I, E, B) + 180 == angle(midpoint(E, I), D, E) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), E, J, A, G, midpoint(F, G) we get angle(A, G, midpoint(F, G)) == angle(midpoint(E, F), E, J) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), D, E, J, F, midpoint(E, F) we get angle(J, F, midpoint(E, F)) == angle(midpoint(E, F), D, E) mod 360
By divide_by_2_mod_180_v0 on A, D, H, C, F, midpoint(E, F) we get angle(A, D, H) == angle(C, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on J, E, midpoint(E, F), J, F, midpoint(F, G) we get angle(J, E, midpoint(E, F)) == angle(J, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on G, E, midpoint(E, F), G, I, F we get angle(G, I, F) + 180 == angle(G, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, I, E, G, I we get angle(E, G, I) + 180 == angle(midpoint(E, F), F, I) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), E, J, B, G, midpoint(F, G) we get angle(midpoint(E, F), E, J) == angle(B, G, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, I), D, E, midpoint(E, G), E, H we get angle(midpoint(E, G), E, H) == angle(midpoint(E, I), D, E) mod 360
By divide_by_2_mod_180_v0 on H, F, midpoint(E, F), F, E, B we get angle(F, E, B) == angle(H, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), E, D, D, C, B we get angle(D, C, B) == angle(midpoint(E, F), E, D) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, H, E, I, F we get angle(E, I, F) + 180 == angle(midpoint(E, F), F, H) mod 360
By divide_by_2_mod_180_v0 on D, E, midpoint(E, F), D, C, F we get angle(D, C, F) == angle(D, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on J, D, C, midpoint(E, F), E, H we get angle(J, D, C) == angle(midpoint(E, F), E, H) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), E, B, midpoint(E, F), D, E we get angle(midpoint(E, F), E, B) == angle(midpoint(E, F), D, E) + 180 mod 360
By divide_by_2_mod_180_v0 on H, E, midpoint(E, F), H, E, F we get angle(H, E, F) == angle(H, E, midpoint(E, F)) mod 360
By similar_triangle_basic_properties on D, midpoint(F, G), F, D, G, A we get not_collinear(D, F, midpoint(F, G)), not_collinear(A, D, G), angle(D, G, A) == angle(D, midpoint(F, G), F) mod 360, angle(G, A, D) == angle(midpoint(F, G), F, D) mod 360, angle(A, D, G) == angle(F, D, midpoint(F, G)) mod 360, log(distance(D, G)) + log(distance(F, midpoint(F, G))) == log(distance(D, midpoint(F, G))) + log(distance(A, G)), log(distance(A, G)) + log(distance(D, F)) == log(distance(F, midpoint(F, G))) + log(distance(A, D)), log(distance(D, F)) + log(distance(D, G)) == log(distance(A, D)) + log(distance(D, midpoint(F, G)))
By divide_by_2_mod_180_v1 on F, E, C, A, F, midpoint(E, F) we get angle(F, E, C) == angle(A, F, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on F, D, midpoint(E, F), A, F, E we get angle(A, F, E) + 180 == angle(F, D, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), E, G, J, F, midpoint(F, G) we get angle(midpoint(E, F), E, G) == angle(J, F, midpoint(F, G)) + 180 mod 360
By line_circle_intersection_has_at_most_two_points_0 on G, B, A, Circle(B, G, midpoint(E, G)) we get A not in Circle(B, G, midpoint(E, G))
By divide_by_2_mod_180_v0 on midpoint(F, G), F, E, G, F, midpoint(E, F) we get angle(G, F, midpoint(E, F)) == angle(midpoint(F, G), F, E) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), C, E, F, C, D we get angle(F, C, D) == angle(midpoint(E, F), C, E) mod 360
By line_containment_inequality on midpoint(G, I), E, k we get E != midpoint(G, I)
By divide_by_2_mod_180_v0 on midpoint(E, F), E, C, F, D, midpoint(E, F) we get angle(F, D, midpoint(E, F)) == angle(midpoint(E, F), E, C) mod 360
By divide_by_2_mod_180_v0 on G, F, A, midpoint(E, F), E, J we get angle(G, F, A) == angle(midpoint(E, F), E, J) mod 360
By divide_by_2_mod_180_v0 on J, E, F, midpoint(E, F), E, G we get angle(J, E, F) == angle(midpoint(E, F), E, G) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, J, B, E, F we get angle(B, E, F) + 180 == angle(midpoint(E, F), F, J) mod 360
By divide_by_2_mod_180_v0 on D, F, E, midpoint(E, F), E, D we get angle(D, F, E) == angle(midpoint(E, F), E, D) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), E, F, G, E, midpoint(E, F) we get angle(G, E, midpoint(E, F)) == angle(midpoint(E, G), E, F) mod 360
By divide_by_2_mod_180_v1 on F, G, B, midpoint(E, F), E, G we get angle(F, G, B) == angle(midpoint(E, F), E, G) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, H, E, D, midpoint(E, F) we get angle(midpoint(E, F), F, H) == angle(E, D, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, I), D, I, E, G, H we get angle(E, G, H) == angle(midpoint(E, I), D, I) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), E, G, F, G, A we get angle(F, G, A) == angle(midpoint(E, F), E, G) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), G, B, midpoint(E, F), F, G we get angle(midpoint(E, F), F, G) == angle(midpoint(E, G), G, B) mod 360
By divide_by_2_mod_180_v1 on F, D, midpoint(E, F), H, F, midpoint(E, F) we get angle(F, D, midpoint(E, F)) == angle(H, F, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on E, F, J, B, E, midpoint(E, F) we get angle(E, F, J) == angle(B, E, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on E, I, F, B, E, midpoint(E, F) we get angle(E, I, F) == angle(B, E, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v0 on E, D, midpoint(E, F), H, D, A we get angle(H, D, A) == angle(E, D, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on I, F, J, I, E, midpoint(E, F) we get angle(I, F, J) == angle(I, E, midpoint(E, F)) + 180 mod 360
By line_inequality on Line(D, I), median(D, E, I), I we get Line(D, I) != median(D, E, I)
By divide_by_2_mod_180_v1 on D, C, J, midpoint(E, F), F, D we get angle(D, C, J) == angle(midpoint(E, F), F, D) + 180 mod 360
By divide_by_2_mod_180_v0 on J, F, midpoint(E, F), F, E, C we get angle(F, E, C) == angle(J, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on D, F, midpoint(E, F), midpoint(E, F), C, E we get angle(D, F, midpoint(E, F)) == angle(midpoint(E, F), C, E) mod 360
By internal_angle_bisector_definition_v0 on H, midpoint(G, I), H, I we get angle(H, I, midpoint(G, I)) == angle(midpoint(G, I), I, H) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, J, B, D, A we get angle(B, D, A) + 180 == angle(midpoint(E, F), F, J) mod 360
By divide_by_2_mod_180_v0 on C, E, midpoint(E, F), H, D, A we get angle(H, D, A) == angle(C, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on F, D, midpoint(F, G), midpoint(E, F), E, G we get angle(F, D, midpoint(F, G)) == angle(midpoint(E, F), E, G) mod 360
By divide_by_2_mod_180_v1 on H, D, A, midpoint(E, F), F, A we get angle(H, D, A) == angle(midpoint(E, F), F, A) + 180 mod 360
By divide_by_2_mod_180_v1 on E, G, midpoint(F, G), midpoint(E, F), F, H we get angle(E, G, midpoint(F, G)) == angle(midpoint(E, F), F, H) + 180 mod 360
By divide_by_2_mod_180_v1 on F, I, E, H, F, midpoint(E, F) we get angle(F, I, E) == angle(H, F, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), F, A, B, D, A we get angle(B, D, A) == angle(midpoint(E, F), F, A) mod 360
By divide_by_2_mod_180_v0 on F, D, midpoint(E, F), F, E, C we get angle(F, E, C) == angle(F, D, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, I), D, I, E, F, I we get angle(E, F, I) + 180 == angle(midpoint(E, I), D, I) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), D, F, E, G, F we get angle(E, G, F) == angle(midpoint(E, F), D, F) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), E, B, midpoint(F, G), G, E we get angle(midpoint(E, F), E, B) == angle(midpoint(F, G), G, E) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), C, F, D, C, J we get angle(D, C, J) + 180 == angle(midpoint(E, F), C, F) mod 360
By divide_by_2_mod_180_v1 on H, F, midpoint(E, F), F, E, C we get angle(F, E, C) + 180 == angle(H, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on B, E, midpoint(E, F), B, D, A we get angle(B, D, A) == angle(B, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on C, F, E, C, F, midpoint(E, F) we get angle(C, F, E) == angle(C, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), D, G, midpoint(E, F), F, G we get angle(midpoint(E, F), F, G) == angle(midpoint(E, G), D, G) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), E, J, A, D, F we get angle(A, D, F) == angle(midpoint(E, F), E, J) mod 360
By directions_draw_angle on A, D, midpoint(E, I) we get exists(angle(A, D, midpoint(E, I)))
By divide_by_2_mod_180_v1 on H, F, midpoint(E, F), midpoint(F, G), G, E we get angle(H, F, midpoint(E, F)) == angle(midpoint(F, G), G, E) + 180 mod 360
By divide_by_2_mod_180_v1 on F, D, midpoint(E, F), F, E, B we get angle(F, E, B) + 180 == angle(F, D, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on C, F, midpoint(F, G), J, E, midpoint(E, F) we get angle(C, F, midpoint(F, G)) == angle(J, E, midpoint(E, F)) + 180 mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, F), A, J we get not_collinear(A, J, midpoint(E, F)), exists(Line(A, J))
By divide_by_2_mod_180_v1 on G, E, midpoint(E, F), G, F, J we get angle(G, F, J) + 180 == angle(G, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on A, C, D, midpoint(E, F), E, D we get angle(A, C, D) == angle(midpoint(E, F), E, D) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, A, E, I, F we get angle(E, I, F) + 180 == angle(midpoint(E, F), F, A) mod 360
By divide_by_2_mod_180_v0 on E, D, midpoint(E, F), E, D, C we get angle(E, D, C) == angle(E, D, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, H, E, D, C we get angle(E, D, C) + 180 == angle(midpoint(E, F), F, H) mod 360
By divide_by_2_mod_180_v0 on A, D, F, G, E, midpoint(E, F) we get angle(A, D, F) == angle(G, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on F, C, midpoint(E, F), D, C, B we get angle(D, C, B) == angle(F, C, midpoint(E, F)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on G, I, midpoint(F, I) we get not_collinear(G, I, midpoint(F, I)), exists(Line(I, midpoint(F, I)))
By divide_by_2_mod_180_v0 on midpoint(E, I), E, D, I, J, D we get angle(I, J, D) == angle(midpoint(E, I), E, D) mod 360
By anti_similar_triangle_basic_properties on F, A, D, midpoint(F, G), F, D we get not_collinear(A, D, F), not_collinear(D, F, midpoint(F, G)), angle(F, A, D) == 0 - angle(midpoint(F, G), F, D) mod 360, angle(A, D, F) == 0 - angle(F, D, midpoint(F, G)) mod 360, angle(D, F, A) == 0 - angle(D, midpoint(F, G), F) mod 360, log(distance(A, F)) + log(distance(D, F)) == log(distance(F, midpoint(F, G))) + log(distance(A, D)), log(distance(D, F)) + log(distance(D, F)) == log(distance(A, D)) + log(distance(D, midpoint(F, G))), log(distance(D, F)) + log(distance(F, midpoint(F, G))) == log(distance(D, midpoint(F, G))) + log(distance(A, F))
By divide_by_2_mod_180_v1 on E, D, C, midpoint(E, F), F, H we get angle(E, D, C) == angle(midpoint(E, F), F, H) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, C, E, F, H we get angle(E, F, H) + 180 == angle(midpoint(E, F), F, C) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, I), D, I, B, E, I we get angle(B, E, I) + 180 == angle(midpoint(E, I), D, I) mod 360
By divide_by_2_mod_180_v1 on B, G, F, midpoint(E, F), E, J we get angle(B, G, F) == angle(midpoint(E, F), E, J) + 180 mod 360
By divide_by_2_mod_180_v1 on H, F, midpoint(E, F), J, F, E we get angle(J, F, E) + 180 == angle(H, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on G, F, midpoint(E, F), B, G, midpoint(E, G) we get angle(B, G, midpoint(E, G)) == angle(G, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on D, H, I, D, E, midpoint(E, I) we get angle(D, H, I) == angle(D, E, midpoint(E, I)) mod 360
By divide_by_2_mod_180_v1 on F, G, E, H, F, midpoint(E, F) we get angle(F, G, E) == angle(H, F, midpoint(E, F)) + 180 mod 360
By not_in_line_equivalent_to_not_collinear_v0 on D, midpoint(G, I), G we get not_collinear(D, G, midpoint(G, I)), exists(Line(G, midpoint(G, I)))
By not_in_line_equivalent_to_not_collinear_v0 on C, midpoint(F, I), I we get not_collinear(C, I, midpoint(F, I)), exists(Line(I, midpoint(F, I)))
By divide_by_2_mod_180_v1 on midpoint(E, F), E, B, C, F, E we get angle(C, F, E) + 180 == angle(midpoint(E, F), E, B) mod 360
By anti_similar_triangle_basic_properties on D, midpoint(F, G), G, D, G, A we get not_collinear(D, G, midpoint(F, G)), not_collinear(A, D, G), 0 - angle(D, G, A) == angle(D, midpoint(F, G), G) mod 360, 0 - angle(G, A, D) == angle(midpoint(F, G), G, D) mod 360, 0 - angle(A, D, G) == angle(G, D, midpoint(F, G)) mod 360, log(distance(D, G)) + log(distance(G, midpoint(F, G))) == log(distance(D, midpoint(F, G))) + log(distance(A, G)), log(distance(A, G)) + log(distance(D, G)) == log(distance(G, midpoint(F, G))) + log(distance(A, D)), log(distance(D, G)) + log(distance(D, G)) == log(distance(A, D)) + log(distance(D, midpoint(F, G)))
By divide_by_2_mod_180_v1 on C, F, E, H, F, midpoint(E, F) we get angle(C, F, E) == angle(H, F, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v0 on D, C, B, midpoint(E, F), C, E we get angle(D, C, B) == angle(midpoint(E, F), C, E) mod 360
By divide_by_2_mod_180_v1 on F, D, C, A, F, midpoint(E, F) we get angle(F, D, C) == angle(A, F, midpoint(E, F)) + 180 mod 360
By reverse_direction on G, midpoint(G, I) we get 180 == direction(G, midpoint(G, I)) - direction(midpoint(G, I), G) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), E, B, F, D, midpoint(E, F) we get angle(midpoint(E, F), E, B) == angle(F, D, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), C, F, E, F, D we get angle(E, F, D) == angle(midpoint(E, F), C, F) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, A, H, D, A we get angle(H, D, A) + 180 == angle(midpoint(E, F), F, A) mod 360
By divide_by_2_mod_180_v1 on G, F, midpoint(E, F), midpoint(E, G), E, C we get angle(G, F, midpoint(E, F)) == angle(midpoint(E, G), E, C) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), D, E, H, F, midpoint(E, F) we get angle(midpoint(E, F), D, E) == angle(H, F, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on E, D, midpoint(E, I), B, E, I we get angle(B, E, I) + 180 == angle(E, D, midpoint(E, I)) mod 360
By divide_by_2_mod_180_v0 on E, D, midpoint(E, F), E, G, F we get angle(E, G, F) == angle(E, D, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), E, C, A, D, B we get angle(A, D, B) + 180 == angle(midpoint(E, F), E, C) mod 360
By divide_by_2_mod_180_v0 on I, E, D, D, I, midpoint(E, I) we get angle(I, E, D) == angle(D, I, midpoint(E, I)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, D, D, C, J we get angle(D, C, J) + 180 == angle(midpoint(E, F), F, D) mod 360
By divide_by_2_mod_180_v0 on B, C, D, midpoint(E, F), C, F we get angle(B, C, D) == angle(midpoint(E, F), C, F) mod 360
By divide_by_2_mod_180_v0 on J, E, midpoint(E, F), A, D, G we get angle(A, D, G) == angle(J, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on E, F, A, midpoint(E, F), F, C we get angle(E, F, A) == angle(midpoint(E, F), F, C) + 180 mod 360
By directions_draw_angle on midpoint(F, I), I, D we get exists(angle(midpoint(F, I), I, D))
By divide_by_2_mod_180_v0 on F, E, midpoint(E, G), midpoint(E, F), E, G we get angle(F, E, midpoint(E, G)) == angle(midpoint(E, F), E, G) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, H, midpoint(E, G), G, F we get angle(midpoint(E, F), F, H) == angle(midpoint(E, G), G, F) + 180 mod 360
By divide_by_2_mod_180_v0 on F, D, midpoint(E, F), F, G, E we get angle(F, G, E) == angle(F, D, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, H, E, F, J we get angle(E, F, J) + 180 == angle(midpoint(E, F), F, H) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), E, G, C, F, G we get angle(C, F, G) + 180 == angle(midpoint(E, F), E, G) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, F), B, midpoint(E, G) we get not_collinear(B, midpoint(E, F), midpoint(E, G)), exists(Line(B, midpoint(E, G)))
By divide_by_2_mod_180_v1 on E, G, F, midpoint(E, F), F, A we get angle(E, G, F) == angle(midpoint(E, F), F, A) + 180 mod 360
By divide_by_2_mod_180_v1 on A, F, E, F, D, midpoint(E, F) we get angle(A, F, E) == angle(F, D, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), F, C, E, I, F we get angle(E, I, F) == angle(midpoint(E, F), F, C) mod 360
By directions_draw_angle on H, D, midpoint(E, I) we get exists(angle(H, D, midpoint(E, I)))
By divide_by_2_mod_180_v0 on G, E, midpoint(E, F), midpoint(F, G), D, F we get angle(G, E, midpoint(E, F)) == angle(midpoint(F, G), D, F) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, A, midpoint(E, F), D, F we get angle(midpoint(E, F), F, A) == angle(midpoint(E, F), D, F) + 180 mod 360
By divide_by_2_mod_180_v0 on D, F, midpoint(E, F), F, C, D we get angle(F, C, D) == angle(D, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on G, F, A, G, E, midpoint(E, F) we get angle(G, F, A) == angle(G, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on F, I, J, H, E, midpoint(E, F) we get angle(F, I, J) == angle(H, E, midpoint(E, F)) mod 360
By line_containment_inequality on midpoint(F, I), E, Line(F, I) we get E != midpoint(F, I)
By divide_by_2_mod_180_v1 on B, E, midpoint(E, F), C, D, F we get angle(C, D, F) + 180 == angle(B, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on C, D, E, C, F, midpoint(E, F) we get angle(C, D, E) == angle(C, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), D, F, E, F, A we get angle(E, F, A) + 180 == angle(midpoint(E, F), D, F) mod 360
By directions_draw_angle on projection(F, Line(D, J)), F, midpoint(F, I) we get exists(angle(projection(F, Line(D, J)), F, midpoint(F, I)))
By divide_by_2_mod_180_v0 on B, E, midpoint(E, G), midpoint(E, F), F, G we get angle(B, E, midpoint(E, G)) == angle(midpoint(E, F), F, G) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), D, E, F, I, E we get angle(F, I, E) == angle(midpoint(E, F), D, E) mod 360
By divide_by_2_mod_180_v1 on E, D, midpoint(E, F), E, F, H we get angle(E, F, H) + 180 == angle(E, D, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on A, D, B, J, F, midpoint(E, F) we get angle(A, D, B) == angle(J, F, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on A, D, B, F, D, midpoint(E, F) we get angle(A, D, B) == angle(F, D, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, C, B, D, A we get angle(B, D, A) + 180 == angle(midpoint(E, F), F, C) mod 360
By divide_by_2_mod_180_v1 on E, I, H, midpoint(E, F), F, G we get angle(E, I, H) == angle(midpoint(E, F), F, G) + 180 mod 360
By divide_by_2_mod_180_v1 on G, F, C, midpoint(E, F), E, J we get angle(G, F, C) == angle(midpoint(E, F), E, J) + 180 mod 360
By divide_by_2_mod_180_v0 on H, G, E, I, D, midpoint(E, I) we get angle(H, G, E) == angle(I, D, midpoint(E, I)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on J, midpoint(G, I), I we get not_collinear(I, J, midpoint(G, I)), exists(Line(I, midpoint(G, I)))
By divide_by_2_mod_180_v1 on midpoint(E, F), E, B, F, G, midpoint(E, G) we get angle(midpoint(E, F), E, B) == angle(F, G, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on E, G, F, C, E, midpoint(E, F) we get angle(E, G, F) == angle(C, E, midpoint(E, F)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, F), midpoint(F, G), A we get not_collinear(A, midpoint(E, F), midpoint(F, G)), exists(Line(A, midpoint(F, G)))
By divide_by_2_mod_180_v1 on I, F, C, I, E, midpoint(E, F) we get angle(I, F, C) == angle(I, E, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on J, F, G, J, E, midpoint(E, F) we get angle(J, F, G) == angle(J, E, midpoint(E, F)) + 180 mod 360
By line_circle_intersection_has_at_most_two_points_0 on midpoint(F, G), F, G, Circle(A, F, midpoint(F, G)) we get G not in Circle(A, F, midpoint(F, G))
By divide_by_2_mod_180_v0 on G, H, B, D, I, midpoint(E, I) we get angle(G, H, B) == angle(D, I, midpoint(E, I)) mod 360
By divide_by_2_mod_180_v1 on G, E, H, I, F, midpoint(E, F) we get angle(G, E, H) == angle(I, F, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v0 on D, E, midpoint(E, I), E, H, midpoint(E, G) we get angle(D, E, midpoint(E, I)) == angle(E, H, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on E, D, midpoint(E, I), H, E, G we get angle(H, E, G) == angle(E, D, midpoint(E, I)) mod 360
By divide_by_2_mod_180_v0 on E, C, midpoint(E, F), D, C, H we get angle(D, C, H) == angle(E, C, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on C, E, midpoint(E, F), B, D, A we get angle(B, D, A) + 180 == angle(C, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on J, E, midpoint(E, F), H, F, G we get angle(H, F, G) == angle(J, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), E, J, G, D, A we get angle(G, D, A) == angle(midpoint(E, F), E, J) mod 360
By divide_by_2_mod_180_v0 on I, H, D, midpoint(E, I), E, D we get angle(I, H, D) == angle(midpoint(E, I), E, D) mod 360
By divide_by_2_mod_180_v0 on D, E, F, E, C, midpoint(E, F) we get angle(D, E, F) == angle(E, C, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on E, D, C, C, E, midpoint(E, F) we get angle(E, D, C) == angle(C, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on D, E, midpoint(E, F), D, C, A we get angle(D, C, A) == angle(D, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on H, F, midpoint(E, F), F, G, midpoint(E, G) we get angle(H, F, midpoint(E, F)) == angle(F, G, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), H, E, midpoint(E, I), E, D we get angle(midpoint(E, G), H, E) == angle(midpoint(E, I), E, D) mod 360
By divide_by_2_mod_180_v0 on F, G, midpoint(E, G), F, D, midpoint(E, F) we get angle(F, D, midpoint(E, F)) == angle(F, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on B, E, midpoint(E, F), midpoint(E, F), D, F we get angle(B, E, midpoint(E, F)) == angle(midpoint(E, F), D, F) + 180 mod 360
By divide_by_2_mod_180_v0 on D, C, E, D, F, midpoint(E, F) we get angle(D, C, E) == angle(D, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on G, F, midpoint(E, F), H, I, E we get angle(H, I, E) + 180 == angle(G, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), D, F, midpoint(E, F), F, H we get angle(midpoint(E, F), D, F) == angle(midpoint(E, F), F, H) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), F, H, G, E, midpoint(E, F) we get angle(G, E, midpoint(E, F)) == angle(midpoint(F, G), F, H) mod 360
By directions_draw_angle on E, projection(F, j), G we get exists(angle(E, projection(F, j), G))
By divide_by_2_mod_180_v1 on midpoint(E, F), D, E, H, F, E we get angle(H, F, E) + 180 == angle(midpoint(E, F), D, E) mod 360
By directions_draw_angle on J, D, midpoint(E, F) we get exists(angle(J, D, midpoint(E, F)))
By divide_by_2_mod_180_v1 on midpoint(E, F), F, I, H, E, G we get angle(H, E, G) + 180 == angle(midpoint(E, F), F, I) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), E, G, midpoint(F, G), G, A we get angle(midpoint(E, F), E, G) == angle(midpoint(F, G), G, A) mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), G, E, midpoint(E, F), D, E we get angle(midpoint(E, F), D, E) == angle(midpoint(F, G), G, E) mod 360
By divide_by_2_mod_180_v0 on E, D, midpoint(E, I), C, E, I we get angle(C, E, I) == angle(E, D, midpoint(E, I)) mod 360
By divide_by_2_mod_180_v0 on E, J, A, midpoint(E, F), F, G we get angle(E, J, A) == angle(midpoint(E, F), F, G) mod 360
By divide_by_2_mod_180_v1 on F, G, midpoint(E, G), midpoint(E, F), E, B we get angle(F, G, midpoint(E, G)) == angle(midpoint(E, F), E, B) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), F, A, G, E, midpoint(E, F) we get angle(G, E, midpoint(E, F)) == angle(midpoint(F, G), F, A) mod 360
By divide_by_2_mod_180_v0 on G, F, midpoint(E, F), B, D, E we get angle(B, D, E) == angle(G, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on I, F, midpoint(E, F), I, E, C we get angle(I, E, C) + 180 == angle(I, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on D, C, F, midpoint(E, F), F, D we get angle(D, C, F) == angle(midpoint(E, F), F, D) mod 360
By divide_by_2_mod_180_v0 on F, D, C, F, D, midpoint(E, F) we get angle(F, D, C) == angle(F, D, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on I, E, midpoint(E, F), H, G, F we get angle(H, G, F) == angle(I, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), F, D, D, E, F we get angle(D, E, F) == angle(midpoint(E, F), F, D) mod 360
By divide_by_2_mod_180_v0 on E, H, B, midpoint(E, I), I, D we get angle(E, H, B) == angle(midpoint(E, I), I, D) mod 360
By reverse_direction on I, midpoint(G, I) we get 180 == direction(I, midpoint(G, I)) - direction(midpoint(G, I), I) mod 360
By directions_draw_angle on B, G, midpoint(G, I) we get exists(angle(B, G, midpoint(G, I)))
By divide_by_2_mod_180_v0 on C, E, midpoint(E, F), C, E, F we get angle(C, E, F) == angle(C, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on E, D, midpoint(E, I), midpoint(E, F), F, I we get angle(E, D, midpoint(E, I)) == angle(midpoint(E, F), F, I) + 180 mod 360
By directions_draw_angle on midpoint(G, I), I, J we get exists(angle(midpoint(G, I), I, J))
By divide_by_2_mod_180_v1 on midpoint(E, F), F, I, midpoint(E, G), G, H we get angle(midpoint(E, F), F, I) == angle(midpoint(E, G), G, H) + 180 mod 360
By divide_by_2_mod_180_v1 on D, F, midpoint(E, F), J, C, D we get angle(J, C, D) + 180 == angle(D, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on G, F, midpoint(E, F), A, G, midpoint(E, G) we get angle(G, F, midpoint(E, F)) == angle(A, G, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on D, E, midpoint(E, I), E, J, D we get angle(E, J, D) == angle(D, E, midpoint(E, I)) mod 360
By divide_by_2_mod_180_v1 on F, E, B, F, D, midpoint(E, F) we get angle(F, E, B) == angle(F, D, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, H, H, D, A we get angle(H, D, A) + 180 == angle(midpoint(E, F), F, H) mod 360
By directions_draw_angle on midpoint(F, I), F, E we get exists(angle(midpoint(F, I), F, E))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, F), I, midpoint(E, I) we get not_collinear(I, midpoint(E, F), midpoint(E, I)), exists(Line(I, midpoint(E, I)))
By reverse_direction on midpoint(G, I), I we get 180 == direction(midpoint(G, I), I) - direction(I, midpoint(G, I)) mod 360
By divide_by_2_mod_180_v0 on E, D, C, midpoint(E, F), F, J we get angle(E, D, C) == angle(midpoint(E, F), F, J) mod 360
By reverse_direction on I, midpoint(F, I) we get 180 == direction(I, midpoint(F, I)) - direction(midpoint(F, I), I) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), G, I, midpoint(E, F), F, I we get angle(midpoint(E, G), G, I) == angle(midpoint(E, F), F, I) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), G, A, midpoint(E, F), F, G we get angle(midpoint(E, G), G, A) == angle(midpoint(E, F), F, G) + 180 mod 360
By divide_by_2_mod_180_v0 on D, E, midpoint(E, I), E, I, D we get angle(E, I, D) == angle(D, E, midpoint(E, I)) mod 360
By divide_by_2_mod_180_v0 on F, C, midpoint(E, F), H, C, D we get angle(H, C, D) == angle(F, C, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on F, D, midpoint(E, F), A, D, B we get angle(A, D, B) + 180 == angle(F, D, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on F, C, midpoint(E, F), D, F, midpoint(E, F) we get angle(D, F, midpoint(E, F)) == angle(F, C, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on F, E, B, midpoint(E, F), D, E we get angle(F, E, B) == angle(midpoint(E, F), D, E) + 180 mod 360
By divide_by_2_mod_180_v0 on B, E, midpoint(E, F), E, F, H we get angle(E, F, H) == angle(B, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on B, E, midpoint(E, F), B, E, F we get angle(B, E, F) == angle(B, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on E, G, midpoint(F, G), midpoint(E, F), F, A we get angle(E, G, midpoint(F, G)) == angle(midpoint(E, F), F, A) + 180 mod 360
By divide_by_2_mod_180_v1 on F, I, E, A, F, midpoint(E, F) we get angle(F, I, E) == angle(A, F, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v0 on J, E, midpoint(E, F), J, E, F we get angle(J, E, F) == angle(J, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on E, D, midpoint(E, F), E, F, A we get angle(E, F, A) + 180 == angle(E, D, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on C, D, E, A, F, midpoint(E, F) we get angle(C, D, E) == angle(A, F, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), C, F, midpoint(E, F), F, D we get angle(midpoint(E, F), C, F) == angle(midpoint(E, F), F, D) mod 360
By divide_by_2_mod_180_v1 on E, F, A, E, D, midpoint(E, F) we get angle(E, F, A) == angle(E, D, midpoint(E, F)) + 180 mod 360
By reverse_direction on midpoint(E, F), C we get 180 == direction(midpoint(E, F), C) - direction(C, midpoint(E, F)) mod 360
By sas_similarity on D, midpoint(E, F), E, E, midpoint(E, F), C we get similar_triangles(C, E, midpoint(E, F), E, D, midpoint(E, F))
By divide_by_2_mod_180_v0 on F, I, H, J, E, midpoint(E, F) we get angle(F, I, H) == angle(J, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on C, E, F, midpoint(E, F), F, H we get angle(C, E, F) == angle(midpoint(E, F), F, H) + 180 mod 360
By divide_by_2_mod_180_v0 on C, E, I, midpoint(E, I), D, I we get angle(C, E, I) == angle(midpoint(E, I), D, I) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), D, F, B, E, midpoint(E, F) we get angle(midpoint(E, F), D, F) == angle(B, E, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on G, F, J, midpoint(E, F), E, J we get angle(G, F, J) == angle(midpoint(E, F), E, J) + 180 mod 360
By divide_by_2_mod_180_v0 on H, C, D, midpoint(E, F), C, E we get angle(H, C, D) == angle(midpoint(E, F), C, E) mod 360
By divide_by_2_mod_180_v1 on E, F, J, midpoint(E, F), F, A we get angle(E, F, J) == angle(midpoint(E, F), F, A) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), E, D, F, C, midpoint(E, F) we get angle(F, C, midpoint(E, F)) == angle(midpoint(E, F), E, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on A, G, midpoint(G, I) we get not_collinear(A, G, midpoint(G, I)), exists(Line(G, midpoint(G, I)))
By divide_by_2_mod_180_v1 on E, D, midpoint(E, F), B, E, midpoint(E, F) we get angle(E, D, midpoint(E, F)) == angle(B, E, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), E, C, G, F, midpoint(E, F) we get angle(midpoint(E, G), E, C) == angle(G, F, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, H, E, G, midpoint(F, G) we get angle(midpoint(E, F), F, H) == angle(E, G, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on C, E, I, midpoint(E, F), F, I we get angle(C, E, I) == angle(midpoint(E, F), F, I) + 180 mod 360
By divide_by_2_mod_180_v1 on F, E, C, midpoint(E, F), E, B we get angle(F, E, C) == angle(midpoint(E, F), E, B) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), G, H, E, D, midpoint(E, I) we get angle(E, D, midpoint(E, I)) == angle(midpoint(E, G), G, H) mod 360
By divide_by_2_mod_180_v0 on E, C, midpoint(E, F), E, F, D we get angle(E, F, D) == angle(E, C, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on B, C, D, midpoint(E, F), F, D we get angle(B, C, D) == angle(midpoint(E, F), F, D) mod 360
By sas_anti_similarity on F, midpoint(E, F), C, D, midpoint(E, F), E we get anti_similar_triangles(C, F, midpoint(E, F), E, D, midpoint(E, F))
By divide_by_2_mod_180_v0 on A, F, midpoint(E, F), A, F, E we get angle(A, F, E) == angle(A, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on J, F, midpoint(E, F), F, E, B we get angle(F, E, B) + 180 == angle(J, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on J, E, midpoint(E, F), C, F, midpoint(F, G) we get angle(J, E, midpoint(E, F)) == angle(C, F, midpoint(F, G)) + 180 mod 360
By line_circle_intersection_has_at_most_two_points_0 on G, midpoint(F, G), F, Circle(D, G, midpoint(F, G)) we get F not in Circle(D, G, midpoint(F, G))
By divide_by_2_mod_180_v0 on midpoint(E, I), E, D, G, H, D we get angle(G, H, D) == angle(midpoint(E, I), E, D) mod 360
By divide_by_2_mod_180_v0 on D, J, I, midpoint(E, I), I, D we get angle(D, J, I) == angle(midpoint(E, I), I, D) mod 360
By divide_by_2_mod_180_v0 on F, G, A, J, E, midpoint(E, F) we get angle(F, G, A) == angle(J, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on G, F, midpoint(E, F), G, E, C we get angle(G, E, C) + 180 == angle(G, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), F, I, B, E, I we get angle(B, E, I) == angle(midpoint(E, F), F, I) mod 360
By sas_anti_similarity on D, midpoint(E, F), F, E, midpoint(E, F), C we get anti_similar_triangles(C, E, midpoint(E, F), F, D, midpoint(E, F))
By divide_by_2_mod_180_v1 on midpoint(E, F), D, E, midpoint(E, F), E, B we get angle(midpoint(E, F), D, E) == angle(midpoint(E, F), E, B) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), F, A, E, F, H we get angle(E, F, H) == angle(midpoint(E, F), F, A) mod 360
By divide_by_2_mod_180_v0 on C, F, midpoint(E, F), F, D, C we get angle(F, D, C) == angle(C, F, midpoint(E, F)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on I, D, center(d) we get not_collinear(D, I, center(d)), exists(Line(D, center(d)))
By divide_by_2_mod_180_v0 on H, I, F, G, E, midpoint(E, F) we get angle(H, I, F) == angle(G, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on H, I, E, G, F, midpoint(E, F) we get angle(H, I, E) == angle(G, F, midpoint(E, F)) + 180 mod 360
By not_in_line_equivalent_to_not_collinear_v0 on H, I, midpoint(F, I) we get not_collinear(H, I, midpoint(F, I)), exists(Line(I, midpoint(F, I)))
By divide_by_2_mod_180_v1 on E, G, I, midpoint(E, F), F, I we get angle(E, G, I) == angle(midpoint(E, F), F, I) + 180 mod 360
By divide_by_2_mod_180_v1 on I, E, C, I, F, midpoint(E, F) we get angle(I, E, C) == angle(I, F, midpoint(E, F)) + 180 mod 360
By line_circle_intersection_has_at_most_two_points_0 on midpoint(F, G), F, G, Circle(D, F, midpoint(F, G)) we get G not in Circle(D, F, midpoint(F, G))
By divide_by_2_mod_180_v1 on C, F, midpoint(E, F), F, E, B we get angle(F, E, B) + 180 == angle(C, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on H, F, E, J, F, midpoint(E, F) we get angle(H, F, E) == angle(J, F, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), F, J, E, G, F we get angle(E, G, F) == angle(midpoint(E, F), F, J) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), E, H, J, I, F we get angle(J, I, F) == angle(midpoint(E, F), E, H) mod 360
By sas_similarity on F, midpoint(E, F), C, D, midpoint(E, F), F we get similar_triangles(C, F, midpoint(E, F), F, D, midpoint(E, F))
By divide_by_2_mod_180_v1 on J, F, midpoint(F, G), midpoint(E, F), E, G we get angle(J, F, midpoint(F, G)) == angle(midpoint(E, F), E, G) + 180 mod 360
By divide_by_2_mod_180_v0 on B, C, D, E, C, midpoint(E, F) we get angle(B, C, D) == angle(E, C, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), D, F, midpoint(E, G), G, F we get angle(midpoint(E, F), D, F) == angle(midpoint(E, G), G, F) mod 360
By directions_draw_angle on midpoint(G, I), G, E we get exists(angle(midpoint(G, I), G, E))
By divide_by_2_mod_180_v0 on D, I, midpoint(E, I), midpoint(E, G), H, E we get angle(D, I, midpoint(E, I)) == angle(midpoint(E, G), H, E) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on C, G, midpoint(G, I) we get not_collinear(C, G, midpoint(G, I)), exists(Line(G, midpoint(G, I)))
By divide_by_2_mod_180_v0 on midpoint(E, I), E, D, D, I, E we get angle(D, I, E) == angle(midpoint(E, I), E, D) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), E, J, B, D, C we get angle(B, D, C) + 180 == angle(midpoint(E, F), E, J) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, G), E, H, I, F, midpoint(E, F) we get angle(midpoint(E, G), E, H) == angle(I, F, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v0 on G, F, midpoint(E, F), H, J, E we get angle(H, J, E) == angle(G, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on A, F, midpoint(E, F), midpoint(F, G), G, E we get angle(A, F, midpoint(E, F)) == angle(midpoint(F, G), G, E) + 180 mod 360
By divide_by_2_mod_180_v0 on I, F, midpoint(E, F), I, E, B we get angle(I, E, B) == angle(I, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on G, E, midpoint(E, F), midpoint(F, G), F, J we get angle(G, E, midpoint(E, F)) == angle(midpoint(F, G), F, J) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), E, I, A, F, I we get angle(A, F, I) == angle(midpoint(E, F), E, I) mod 360
By divide_by_2_mod_180_v0 on D, F, E, midpoint(E, F), C, E we get angle(D, F, E) == angle(midpoint(E, F), C, E) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, G, C, D, A we get angle(C, D, A) + 180 == angle(midpoint(E, F), F, G) mod 360
By divide_by_2_mod_180_v1 on J, E, midpoint(E, F), midpoint(F, G), G, B we get angle(J, E, midpoint(E, F)) == angle(midpoint(F, G), G, B) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), E, B, A, D, H we get angle(A, D, H) + 180 == angle(midpoint(E, F), E, B) mod 360
By divide_by_2_mod_180_v0 on E, F, midpoint(F, G), midpoint(E, F), F, G we get angle(E, F, midpoint(F, G)) == angle(midpoint(E, F), F, G) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), E, C, F, D, C we get angle(F, D, C) == angle(midpoint(E, F), E, C) mod 360
By divide_by_2_mod_180_v1 on G, F, C, G, E, midpoint(E, F) we get angle(G, F, C) == angle(G, E, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on B, E, F, E, D, midpoint(E, F) we get angle(B, E, F) == angle(E, D, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), G, E, midpoint(E, F), E, C we get angle(midpoint(E, F), E, C) == angle(midpoint(F, G), G, E) mod 360
By directions_draw_angle on midpoint(F, I), I, E we get exists(angle(midpoint(F, I), I, E))
By divide_by_2_mod_180_v1 on C, D, A, midpoint(E, F), F, G we get angle(C, D, A) == angle(midpoint(E, F), F, G) + 180 mod 360
By divide_by_2_mod_180_v0 on E, C, midpoint(E, F), midpoint(E, F), F, D we get angle(E, C, midpoint(E, F)) == angle(midpoint(E, F), F, D) mod 360
By divide_by_2_mod_180_v1 on E, D, midpoint(E, F), midpoint(E, F), F, A we get angle(E, D, midpoint(E, F)) == angle(midpoint(E, F), F, A) + 180 mod 360
By divide_by_2_mod_180_v0 on E, D, B, midpoint(E, F), F, G we get angle(E, D, B) == angle(midpoint(E, F), F, G) mod 360
By divide_by_2_mod_180_v0 on F, D, C, J, F, midpoint(E, F) we get angle(F, D, C) == angle(J, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on B, H, I, D, E, midpoint(E, I) we get angle(B, H, I) == angle(D, E, midpoint(E, I)) mod 360
By divide_by_2_mod_180_v1 on D, E, midpoint(E, F), D, C, J we get angle(D, C, J) + 180 == angle(D, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), C, E, J, C, D we get angle(J, C, D) + 180 == angle(midpoint(E, F), C, E) mod 360
By directions_draw_angle on midpoint(F, I), F, projection(F, Line(D, J)) we get exists(angle(midpoint(F, I), F, projection(F, Line(D, J))))
By directions_draw_angle on F, projection(F, j), E we get exists(angle(F, projection(F, j), E))
By divide_by_2_mod_180_v1 on midpoint(F, G), F, C, midpoint(E, F), E, J we get angle(midpoint(F, G), F, C) == angle(midpoint(E, F), E, J) + 180 mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, I), midpoint(F, I), F we get not_collinear(F, midpoint(E, I), midpoint(F, I)), exists(Line(F, midpoint(F, I)))
By divide_by_2_mod_180_v1 on midpoint(E, G), G, F, B, E, midpoint(E, F) we get angle(midpoint(E, G), G, F) == angle(B, E, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v0 on G, E, F, midpoint(E, F), E, J we get angle(G, E, F) == angle(midpoint(E, F), E, J) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), E, J, G, F, J we get angle(G, F, J) + 180 == angle(midpoint(E, F), E, J) mod 360
By sas_similarity on D, midpoint(E, F), F, F, midpoint(E, F), C we get similar_triangles(C, F, midpoint(E, F), F, D, midpoint(E, F))
By divide_by_2_mod_180_v1 on C, E, midpoint(E, G), midpoint(E, F), F, G we get angle(C, E, midpoint(E, G)) == angle(midpoint(E, F), F, G) + 180 mod 360
By divide_by_2_mod_180_v0 on J, E, midpoint(E, F), C, D, H we get angle(C, D, H) == angle(J, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on E, C, midpoint(E, F), E, C, D we get angle(E, C, D) == angle(E, C, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), E, G, F, D, A we get angle(F, D, A) == angle(midpoint(E, F), E, G) mod 360
By divide_by_2_mod_180_v1 on E, D, H, midpoint(E, F), F, G we get angle(E, D, H) == angle(midpoint(E, F), F, G) + 180 mod 360
By divide_by_2_mod_180_v1 on E, F, H, C, E, midpoint(E, F) we get angle(E, F, H) == angle(C, E, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v0 on E, J, F, midpoint(E, F), F, G we get angle(E, J, F) == angle(midpoint(E, F), F, G) mod 360
By divide_by_2_mod_180_v1 on E, C, midpoint(E, F), D, C, J we get angle(D, C, J) + 180 == angle(E, C, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on A, F, midpoint(E, F), A, D, H we get angle(A, D, H) + 180 == angle(A, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on E, F, I, E, D, midpoint(E, I) we get angle(E, F, I) == angle(E, D, midpoint(E, I)) + 180 mod 360
By divide_by_2_mod_180_v1 on H, D, G, midpoint(E, F), F, G we get angle(H, D, G) == angle(midpoint(E, F), F, G) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), E, G, H, F, G we get angle(H, F, G) == angle(midpoint(E, F), E, G) mod 360
By directions_draw_angle on B, D, midpoint(E, I) we get exists(angle(B, D, midpoint(E, I)))
By divide_by_2_mod_180_v1 on I, E, midpoint(E, F), I, F, J we get angle(I, F, J) + 180 == angle(I, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, H, C, D, F we get angle(C, D, F) + 180 == angle(midpoint(E, F), F, H) mod 360
By divide_by_2_mod_180_v0 on D, C, H, midpoint(E, F), F, D we get angle(D, C, H) == angle(midpoint(E, F), F, D) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, A, E, D, midpoint(E, F) we get angle(midpoint(E, F), F, A) == angle(E, D, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on F, G, E, midpoint(E, F), E, B we get angle(F, G, E) == angle(midpoint(E, F), E, B) + 180 mod 360
By divide_by_2_mod_180_v1 on E, F, C, midpoint(E, F), F, H we get angle(E, F, C) == angle(midpoint(E, F), F, H) + 180 mod 360
By divide_by_2_mod_180_v1 on J, C, D, D, F, midpoint(E, F) we get angle(J, C, D) == angle(D, F, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, A, E, G, F we get angle(E, G, F) + 180 == angle(midpoint(E, F), F, A) mod 360
By directions_draw_angle on midpoint(E, F), D, midpoint(E, I) we get exists(angle(midpoint(E, F), D, midpoint(E, I)))
By reverse_direction on D, midpoint(E, I) we get 180 == direction(D, midpoint(E, I)) - direction(midpoint(E, I), D) mod 360
By divide_by_2_mod_180_v1 on G, F, midpoint(E, F), G, D, H we get angle(G, D, H) + 180 == angle(G, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on F, D, midpoint(E, F), H, F, E we get angle(H, F, E) + 180 == angle(F, D, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on D, F, midpoint(E, F), D, F, E we get angle(D, F, E) == angle(D, F, midpoint(E, F)) mod 360
By sas_similarity on F, midpoint(E, F), D, C, midpoint(E, F), F we get similar_triangles(C, F, midpoint(E, F), F, D, midpoint(E, F))
By divide_by_2_mod_180_v0 on D, C, E, F, C, midpoint(E, F) we get angle(D, C, E) == angle(F, C, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), D, E, A, D, B we get angle(A, D, B) + 180 == angle(midpoint(E, F), D, E) mod 360
By divide_by_2_mod_180_v1 on I, F, midpoint(E, F), midpoint(E, G), E, H we get angle(I, F, midpoint(E, F)) == angle(midpoint(E, G), E, H) + 180 mod 360
By divide_by_2_mod_180_v0 on A, D, H, midpoint(E, F), E, C we get angle(A, D, H) == angle(midpoint(E, F), E, C) mod 360
By line_circle_intersection_has_at_most_two_points_0 on A, midpoint(F, G), D, Circle(A, G, midpoint(F, G)) we get D not in Circle(A, G, midpoint(F, G))
By divide_by_2_mod_180_v1 on C, F, midpoint(E, F), A, D, B we get angle(A, D, B) + 180 == angle(C, F, midpoint(E, F)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, F), B, H we get not_collinear(B, H, midpoint(E, F)), exists(Line(B, H))
By divide_by_2_mod_180_v0 on C, F, midpoint(E, F), F, G, midpoint(E, G) we get angle(C, F, midpoint(E, F)) == angle(F, G, midpoint(E, G)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(F, G), midpoint(G, I), I we get not_collinear(I, midpoint(F, G), midpoint(G, I)), exists(Line(I, midpoint(G, I)))
By divide_by_2_mod_180_v1 on E, G, F, B, E, midpoint(E, F) we get angle(E, G, F) == angle(B, E, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v0 on C, E, F, midpoint(E, F), F, C we get angle(C, E, F) == angle(midpoint(E, F), F, C) mod 360
By divide_by_2_mod_180_v0 on D, E, midpoint(E, I), E, H, D we get angle(E, H, D) == angle(D, E, midpoint(E, I)) mod 360
By divide_by_2_mod_180_v1 on A, G, midpoint(E, G), G, F, midpoint(E, F) we get angle(A, G, midpoint(E, G)) == angle(G, F, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), D, E, F, E, B we get angle(F, E, B) + 180 == angle(midpoint(E, F), D, E) mod 360
By divide_by_2_mod_180_v0 on D, I, midpoint(E, I), I, J, D we get angle(I, J, D) == angle(D, I, midpoint(E, I)) mod 360
By divide_by_2_mod_180_v1 on C, D, F, midpoint(E, F), F, A we get angle(C, D, F) == angle(midpoint(E, F), F, A) + 180 mod 360
By divide_by_2_mod_180_v1 on I, E, midpoint(E, F), I, F, C we get angle(I, F, C) + 180 == angle(I, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on I, D, midpoint(E, I), I, E, C we get angle(I, E, C) == angle(I, D, midpoint(E, I)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), E, G, F, G, B we get angle(F, G, B) + 180 == angle(midpoint(E, F), E, G) mod 360
By directions_draw_angle on midpoint(E, I), D, C we get exists(angle(midpoint(E, I), D, C))
By divide_by_2_mod_180_v1 on B, E, midpoint(E, F), E, F, J we get angle(E, F, J) + 180 == angle(B, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on B, E, I, E, D, midpoint(E, I) we get angle(B, E, I) == angle(E, D, midpoint(E, I)) + 180 mod 360
By divide_by_2_mod_180_v0 on H, I, F, midpoint(E, F), E, J we get angle(H, I, F) == angle(midpoint(E, F), E, J) mod 360
By line_circle_intersection_has_at_most_two_points_0 on B, midpoint(E, G), H, Circle(B, E, midpoint(E, G)) we get H not in Circle(B, E, midpoint(E, G))
By divide_by_2_mod_180_v1 on C, F, midpoint(E, F), A, F, E we get angle(A, F, E) + 180 == angle(C, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), E, J, G, F, C we get angle(G, F, C) + 180 == angle(midpoint(E, F), E, J) mod 360
By directions_draw_angle on G, D, midpoint(E, F) we get exists(angle(G, D, midpoint(E, F)))
By divide_by_2_mod_180_v1 on I, D, midpoint(E, I), I, E, B we get angle(I, E, B) + 180 == angle(I, D, midpoint(E, I)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), E, G, J, F, G we get angle(J, F, G) + 180 == angle(midpoint(E, F), E, G) mod 360
By divide_by_2_mod_180_v1 on H, D, A, midpoint(E, F), F, H we get angle(H, D, A) == angle(midpoint(E, F), F, H) + 180 mod 360
By divide_by_2_mod_180_v1 on H, F, midpoint(E, F), A, D, H we get angle(A, D, H) + 180 == angle(H, F, midpoint(E, F)) mod 360
By line_containment_inequality on midpoint(E, F), midpoint(E, I), Line(E, F) we get midpoint(E, F) != midpoint(E, I)
By divide_by_2_mod_180_v0 on midpoint(E, I), D, I, H, E, G we get angle(H, E, G) == angle(midpoint(E, I), D, I) mod 360
By divide_by_2_mod_180_v1 on J, F, midpoint(F, G), J, E, midpoint(E, F) we get angle(J, F, midpoint(F, G)) == angle(J, E, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, H, E, G, F we get angle(E, G, F) + 180 == angle(midpoint(E, F), F, H) mod 360
By divide_by_2_mod_180_v1 on G, I, F, G, E, midpoint(E, F) we get angle(G, I, F) == angle(G, E, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v0 on H, D, A, midpoint(E, F), D, F we get angle(H, D, A) == angle(midpoint(E, F), D, F) mod 360
By divide_by_2_mod_180_v1 on E, D, midpoint(E, I), E, F, I we get angle(E, F, I) + 180 == angle(E, D, midpoint(E, I)) mod 360
By divide_by_2_mod_180_v0 on E, D, midpoint(E, I), E, G, H we get angle(E, G, H) == angle(E, D, midpoint(E, I)) mod 360
By divide_by_2_mod_180_v0 on E, D, midpoint(E, I), H, E, midpoint(E, G) we get angle(E, D, midpoint(E, I)) == angle(H, E, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), F, G, E, J, C we get angle(E, J, C) == angle(midpoint(E, F), F, G) mod 360
By divide_by_2_mod_180_v1 on A, F, midpoint(E, F), F, G, midpoint(E, G) we get angle(A, F, midpoint(E, F)) == angle(F, G, midpoint(E, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), E, D, J, C, D we get angle(J, C, D) + 180 == angle(midpoint(E, F), E, D) mod 360
By divide_by_2_mod_180_v1 on F, D, C, H, F, midpoint(E, F) we get angle(F, D, C) == angle(H, F, midpoint(E, F)) + 180 mod 360
By reverse_direction on F, midpoint(F, I) we get 180 == direction(F, midpoint(F, I)) - direction(midpoint(F, I), F) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, A, E, G, midpoint(F, G) we get angle(midpoint(E, F), F, A) == angle(E, G, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), D, E, F, G, E we get angle(F, G, E) == angle(midpoint(E, F), D, E) mod 360
By divide_by_2_mod_180_v1 on E, G, midpoint(F, G), B, E, midpoint(E, F) we get angle(E, G, midpoint(F, G)) == angle(B, E, midpoint(E, F)) + 180 mod 360
By directions_draw_angle on midpoint(E, I), D, H we get exists(angle(midpoint(E, I), D, H))
By divide_by_2_mod_180_v1 on I, F, midpoint(E, F), I, G, midpoint(E, G) we get angle(I, F, midpoint(E, F)) == angle(I, G, midpoint(E, G)) + 180 mod 360
By directions_draw_angle on F, D, midpoint(E, I) we get exists(angle(F, D, midpoint(E, I)))
By divide_by_2_mod_180_v0 on E, I, G, midpoint(E, F), F, G we get angle(E, I, G) == angle(midpoint(E, F), F, G) mod 360
By line_circle_intersection_has_at_most_two_points_0 on midpoint(E, G), E, G, Circle(B, E, midpoint(E, G)) we get G not in Circle(B, E, midpoint(E, G))
By line_circle_intersection_has_at_most_two_points_0 on D, midpoint(E, G), B, Circle(D, G, midpoint(E, G)) we get B not in Circle(D, G, midpoint(E, G))
By divide_by_2_mod_180_v0 on E, F, J, C, E, midpoint(E, F) we get angle(E, F, J) == angle(C, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, I), I, D, E, J, D we get angle(E, J, D) == angle(midpoint(E, I), I, D) mod 360
By divide_by_2_mod_180_v1 on C, F, G, J, E, midpoint(E, F) we get angle(C, F, G) == angle(J, E, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on J, F, midpoint(E, F), A, F, E we get angle(A, F, E) + 180 == angle(J, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on G, F, midpoint(E, F), A, D, C we get angle(A, D, C) + 180 == angle(G, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), G, E, midpoint(E, F), E, B we get angle(midpoint(F, G), G, E) == angle(midpoint(E, F), E, B) + 180 mod 360
By divide_by_2_mod_180_v0 on I, G, F, I, E, midpoint(E, F) we get angle(I, G, F) == angle(I, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on J, E, midpoint(E, F), J, F, G we get angle(J, F, G) + 180 == angle(J, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on A, D, H, H, F, midpoint(E, F) we get angle(A, D, H) == angle(H, F, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(F, G), G, E, A, F, midpoint(E, F) we get angle(midpoint(F, G), G, E) == angle(A, F, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on B, E, midpoint(E, F), E, G, midpoint(F, G) we get angle(B, E, midpoint(E, F)) == angle(E, G, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v0 on A, G, F, G, E, midpoint(E, F) we get angle(A, G, F) == angle(G, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on E, G, midpoint(F, G), midpoint(E, F), F, C we get angle(E, G, midpoint(F, G)) == angle(midpoint(E, F), F, C) mod 360
By divide_by_2_mod_180_v1 on A, F, midpoint(E, F), F, G, E we get angle(F, G, E) + 180 == angle(A, F, midpoint(E, F)) mod 360
By directions_draw_angle on midpoint(F, I), F, D we get exists(angle(midpoint(F, I), F, D))
By divide_by_2_mod_180_v1 on C, F, E, midpoint(E, F), E, B we get angle(C, F, E) == angle(midpoint(E, F), E, B) + 180 mod 360
By divide_by_2_mod_180_v1 on B, E, F, midpoint(E, F), F, C we get angle(B, E, F) == angle(midpoint(E, F), F, C) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), E, G, midpoint(F, G), G, B we get angle(midpoint(E, F), E, G) == angle(midpoint(F, G), G, B) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, G), G, F, E, D, midpoint(E, F) we get angle(E, D, midpoint(E, F)) == angle(midpoint(E, G), G, F) mod 360
By divide_by_2_mod_180_v0 on I, F, H, I, E, midpoint(E, F) we get angle(I, F, H) == angle(I, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on C, E, midpoint(E, F), E, F, A we get angle(E, F, A) + 180 == angle(C, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on B, D, C, G, E, midpoint(E, F) we get angle(B, D, C) == angle(G, E, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v0 on E, F, A, midpoint(E, F), F, H we get angle(E, F, A) == angle(midpoint(E, F), F, H) mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), F, C, E, D, C we get angle(E, D, C) == angle(midpoint(E, F), F, C) mod 360
By divide_by_2_mod_180_v1 on E, I, F, midpoint(E, F), F, A we get angle(E, I, F) == angle(midpoint(E, F), F, A) + 180 mod 360
By divide_by_2_mod_180_v1 on J, E, midpoint(E, F), F, G, B we get angle(F, G, B) + 180 == angle(J, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, J, E, F, H we get angle(E, F, H) + 180 == angle(midpoint(E, F), F, J) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, C, E, F, A we get angle(E, F, A) + 180 == angle(midpoint(E, F), F, C) mod 360
By divide_by_2_mod_180_v1 on C, F, midpoint(E, F), H, F, E we get angle(H, F, E) + 180 == angle(C, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, I), D, E, I, F, midpoint(E, F) we get angle(midpoint(E, I), D, E) == angle(I, F, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), D, F, B, D, A we get angle(B, D, A) + 180 == angle(midpoint(E, F), D, F) mod 360
By divide_by_2_mod_180_v1 on B, E, midpoint(E, F), H, D, A we get angle(H, D, A) + 180 == angle(B, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on J, F, I, midpoint(E, F), E, I we get angle(J, F, I) == angle(midpoint(E, F), E, I) + 180 mod 360
By directions_draw_angle on E, projection(F, j), F we get exists(angle(E, projection(F, j), F))
By divide_by_2_mod_180_v1 on J, F, E, H, F, midpoint(E, F) we get angle(J, F, E) == angle(H, F, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, H, midpoint(E, F), D, F we get angle(midpoint(E, F), F, H) == angle(midpoint(E, F), D, F) + 180 mod 360
By divide_by_2_mod_180_v0 on E, F, J, E, D, midpoint(E, F) we get angle(E, F, J) == angle(E, D, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on A, F, midpoint(E, F), C, F, E we get angle(C, F, E) + 180 == angle(A, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), E, J, midpoint(F, G), F, J we get angle(midpoint(E, F), E, J) == angle(midpoint(F, G), F, J) + 180 mod 360
By divide_by_2_mod_180_v1 on C, D, B, midpoint(E, F), E, G we get angle(C, D, B) == angle(midpoint(E, F), E, G) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, G, E, D, H we get angle(E, D, H) + 180 == angle(midpoint(E, F), F, G) mod 360
By directions_draw_angle on C, F, midpoint(F, I) we get exists(angle(C, F, midpoint(F, I)))
By divide_by_2_mod_180_v1 on midpoint(E, F), E, C, H, F, E we get angle(H, F, E) + 180 == angle(midpoint(E, F), E, C) mod 360
By divide_by_2_mod_180_v1 on C, D, B, J, E, midpoint(E, F) we get angle(C, D, B) == angle(J, E, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v0 on G, H, B, midpoint(E, I), E, D we get angle(G, H, B) == angle(midpoint(E, I), E, D) mod 360
By divide_by_2_mod_180_v1 on H, F, midpoint(E, F), C, D, E we get angle(C, D, E) + 180 == angle(H, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v0 on D, C, H, D, E, midpoint(E, F) we get angle(D, C, H) == angle(D, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on A, F, E, midpoint(E, F), E, C we get angle(A, F, E) == angle(midpoint(E, F), E, C) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(E, F), E, G, A, F, midpoint(F, G) we get angle(A, F, midpoint(F, G)) == angle(midpoint(E, F), E, G) mod 360
By reverse_direction on C, midpoint(E, F) we get 180 == direction(C, midpoint(E, F)) - direction(midpoint(E, F), C) mod 360
By divide_by_2_mod_180_v0 on H, F, midpoint(E, F), A, D, B we get angle(A, D, B) == angle(H, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on G, E, midpoint(E, F), B, D, C we get angle(B, D, C) + 180 == angle(G, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on B, D, A, midpoint(E, F), D, F we get angle(B, D, A) == angle(midpoint(E, F), D, F) + 180 mod 360
By divide_by_2_mod_180_v1 on A, D, B, midpoint(E, F), E, C we get angle(A, D, B) == angle(midpoint(E, F), E, C) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), E, B, F, G, E we get angle(F, G, E) + 180 == angle(midpoint(E, F), E, B) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, I), midpoint(E, G), G we get not_collinear(G, midpoint(E, G), midpoint(E, I)), exists(Line(G, midpoint(E, G)))
By divide_by_2_mod_180_v0 on C, E, F, E, D, midpoint(E, F) we get angle(C, E, F) == angle(E, D, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, J, E, F, A we get angle(E, F, A) + 180 == angle(midpoint(E, F), F, J) mod 360
By divide_by_2_mod_180_v1 on I, G, midpoint(E, G), I, F, midpoint(E, F) we get angle(I, G, midpoint(E, G)) == angle(I, F, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on A, F, E, C, F, midpoint(E, F) we get angle(A, F, E) == angle(C, F, midpoint(E, F)) + 180 mod 360
By sas_anti_similarity on F, midpoint(E, F), D, C, midpoint(E, F), E we get anti_similar_triangles(C, E, midpoint(E, F), F, D, midpoint(E, F))
By divide_by_2_mod_180_v1 on I, E, B, midpoint(E, I), D, E we get angle(I, E, B) == angle(midpoint(E, I), D, E) + 180 mod 360
By divide_by_2_mod_180_v1 on B, G, midpoint(F, G), midpoint(E, F), E, J we get angle(B, G, midpoint(F, G)) == angle(midpoint(E, F), E, J) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), D, F, B, E, F we get angle(B, E, F) + 180 == angle(midpoint(E, F), D, F) mod 360
By divide_by_2_mod_180_v1 on J, F, E, A, F, midpoint(E, F) we get angle(J, F, E) == angle(A, F, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on B, D, A, C, E, midpoint(E, F) we get angle(B, D, A) == angle(C, E, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on G, E, C, G, F, midpoint(E, F) we get angle(G, E, C) == angle(G, F, midpoint(E, F)) + 180 mod 360
By directions_draw_angle on midpoint(F, I), I, midpoint(E, I) we get exists(angle(midpoint(F, I), I, midpoint(E, I)))
By directions_draw_angle on F, projection(F, j), G we get exists(angle(F, projection(F, j), G))
By divide_by_2_mod_180_v0 on E, C, midpoint(E, F), D, C, A we get angle(D, C, A) == angle(E, C, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on E, F, A, midpoint(E, F), D, F we get angle(E, F, A) == angle(midpoint(E, F), D, F) + 180 mod 360
By internal_angle_bisector_definition_v0 on H, midpoint(G, I), H, G we get angle(H, G, midpoint(G, I)) == angle(midpoint(G, I), G, H) mod 360
By divide_by_2_mod_180_v1 on A, F, midpoint(E, F), C, D, E we get angle(C, D, E) + 180 == angle(A, F, midpoint(E, F)) mod 360
By directions_draw_angle on midpoint(G, I), G, B we get exists(angle(midpoint(G, I), G, B))
By divide_by_2_mod_180_v1 on midpoint(E, G), G, F, midpoint(E, F), F, A we get angle(midpoint(E, G), G, F) == angle(midpoint(E, F), F, A) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), D, F, midpoint(E, F), F, A we get angle(midpoint(E, F), D, F) == angle(midpoint(E, F), F, A) + 180 mod 360
By directions_draw_angle on midpoint(E, I), D, B we get exists(angle(midpoint(E, I), D, B))
By reverse_direction on midpoint(F, I), I we get 180 == direction(midpoint(F, I), I) - direction(I, midpoint(F, I)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), E, B, F, E, C we get angle(F, E, C) + 180 == angle(midpoint(E, F), E, B) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on C, I, midpoint(G, I) we get not_collinear(C, I, midpoint(G, I)), exists(Line(I, midpoint(G, I)))
By not_in_line_equivalent_to_not_collinear_v0 on B, I, midpoint(G, I) we get not_collinear(B, I, midpoint(G, I)), exists(Line(I, midpoint(G, I)))
By divide_by_2_mod_180_v0 on G, E, midpoint(E, F), A, G, midpoint(F, G) we get angle(A, G, midpoint(F, G)) == angle(G, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on I, G, E, I, F, midpoint(E, F) we get angle(I, G, E) == angle(I, F, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v0 on C, D, H, midpoint(E, F), E, G we get angle(C, D, H) == angle(midpoint(E, F), E, G) mod 360
By divide_by_2_mod_180_v1 on C, D, F, midpoint(E, F), F, H we get angle(C, D, F) == angle(midpoint(E, F), F, H) + 180 mod 360
By divide_by_2_mod_180_v1 on C, E, F, B, E, midpoint(E, F) we get angle(C, E, F) == angle(B, E, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on B, E, I, midpoint(E, I), D, I we get angle(B, E, I) == angle(midpoint(E, I), D, I) + 180 mod 360
By divide_by_2_mod_180_v1 on A, F, midpoint(E, F), F, E, C we get angle(F, E, C) + 180 == angle(A, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on I, F, midpoint(E, F), I, G, E we get angle(I, G, E) + 180 == angle(I, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), D, E, A, F, midpoint(E, F) we get angle(midpoint(E, F), D, E) == angle(A, F, midpoint(E, F)) + 180 mod 360
By directions_draw_angle on midpoint(E, I), D, G we get exists(angle(midpoint(E, I), D, G))
By divide_by_2_mod_180_v1 on midpoint(E, G), G, H, midpoint(E, F), F, I we get angle(midpoint(E, G), G, H) == angle(midpoint(E, F), F, I) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, I, E, D, midpoint(E, I) we get angle(midpoint(E, F), F, I) == angle(E, D, midpoint(E, I)) + 180 mod 360
By divide_by_2_mod_180_v0 on midpoint(F, G), G, E, C, F, midpoint(E, F) we get angle(C, F, midpoint(E, F)) == angle(midpoint(F, G), G, E) mod 360
By divide_by_2_mod_180_v1 on F, C, midpoint(E, F), J, C, D we get angle(J, C, D) + 180 == angle(F, C, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on C, D, F, B, E, midpoint(E, F) we get angle(C, D, F) == angle(B, E, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on A, D, C, G, F, midpoint(E, F) we get angle(A, D, C) == angle(G, F, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, H, E, F, C we get angle(E, F, C) + 180 == angle(midpoint(E, F), F, H) mod 360
By divide_by_2_mod_180_v1 on I, F, midpoint(E, F), G, E, H we get angle(G, E, H) + 180 == angle(I, F, midpoint(E, F)) mod 360
By sas_similarity on C, midpoint(E, F), F, F, midpoint(E, F), D we get similar_triangles(C, F, midpoint(E, F), F, D, midpoint(E, F))
By divide_by_2_mod_180_v0 on midpoint(E, I), E, D, I, H, B we get angle(I, H, B) == angle(midpoint(E, I), E, D) mod 360
By divide_by_2_mod_180_v0 on F, E, B, A, F, midpoint(E, F) we get angle(F, E, B) == angle(A, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on G, F, midpoint(E, F), A, G, E we get angle(A, G, E) + 180 == angle(G, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on E, I, F, midpoint(E, F), F, H we get angle(E, I, F) == angle(midpoint(E, F), F, H) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, G, midpoint(E, G), G, A we get angle(midpoint(E, F), F, G) == angle(midpoint(E, G), G, A) + 180 mod 360
By divide_by_2_mod_180_v1 on H, E, midpoint(E, G), midpoint(E, F), F, I we get angle(H, E, midpoint(E, G)) == angle(midpoint(E, F), F, I) + 180 mod 360
By divide_by_2_mod_180_v1 on F, G, E, A, F, midpoint(E, F) we get angle(F, G, E) == angle(A, F, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v0 on I, G, midpoint(E, G), I, D, midpoint(E, I) we get angle(I, D, midpoint(E, I)) == angle(I, G, midpoint(E, G)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, I, C, E, I we get angle(C, E, I) + 180 == angle(midpoint(E, F), F, I) mod 360
By divide_by_2_mod_180_v1 on E, F, J, midpoint(E, F), F, H we get angle(E, F, J) == angle(midpoint(E, F), F, H) + 180 mod 360
By not_in_line_equivalent_to_not_collinear_v0 on J, I, midpoint(F, I) we get not_collinear(I, J, midpoint(F, I)), exists(Line(I, midpoint(F, I)))
By divide_by_2_mod_180_v1 on G, E, midpoint(E, F), B, G, F we get angle(B, G, F) + 180 == angle(G, E, midpoint(E, F)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(F, G), midpoint(F, I), F we get not_collinear(F, midpoint(F, G), midpoint(F, I)), exists(Line(F, midpoint(F, I)))
By directions_draw_angle on midpoint(F, I), I, J we get exists(angle(midpoint(F, I), I, J))
By divide_by_2_mod_180_v1 on midpoint(E, F), E, J, midpoint(F, G), F, C we get angle(midpoint(E, F), E, J) == angle(midpoint(F, G), F, C) + 180 mod 360
By reverse_direction on midpoint(E, I), D we get 180 == direction(midpoint(E, I), D) - direction(D, midpoint(E, I)) mod 360
By divide_by_2_mod_180_v1 on B, E, F, midpoint(E, F), F, J we get angle(B, E, F) == angle(midpoint(E, F), F, J) + 180 mod 360
By not_in_line_equivalent_to_not_collinear_v0 on E, I, midpoint(G, I) we get not_collinear(E, I, midpoint(G, I)), exists(Line(I, midpoint(G, I)))
By divide_by_2_mod_180_v1 on midpoint(E, F), E, I, J, F, I we get angle(J, F, I) + 180 == angle(midpoint(E, F), E, I) mod 360
By divide_by_2_mod_180_v0 on D, I, midpoint(E, I), D, I, E we get angle(D, I, E) == angle(D, I, midpoint(E, I)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, A, E, F, C we get angle(E, F, C) + 180 == angle(midpoint(E, F), F, A) mod 360
By directions_draw_angle on G, D, midpoint(E, I) we get exists(angle(G, D, midpoint(E, I)))
By divide_by_2_mod_180_v1 on midpoint(E, F), F, I, midpoint(E, I), D, I we get angle(midpoint(E, F), F, I) == angle(midpoint(E, I), D, I) + 180 mod 360
By directions_draw_angle on H, I, midpoint(F, I) we get exists(angle(H, I, midpoint(F, I)))
By divide_by_2_mod_180_v0 on midpoint(E, F), E, G, H, F, midpoint(F, G) we get angle(H, F, midpoint(F, G)) == angle(midpoint(E, F), E, G) mod 360
By divide_by_2_mod_180_v1 on I, E, B, I, D, midpoint(E, I) we get angle(I, E, B) == angle(I, D, midpoint(E, I)) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, I), D, E, I, F, E we get angle(I, F, E) + 180 == angle(midpoint(E, I), D, E) mod 360
By divide_by_2_mod_180_v1 on H, F, midpoint(E, F), F, I, E we get angle(F, I, E) + 180 == angle(H, F, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on E, G, H, midpoint(E, F), F, I we get angle(E, G, H) == angle(midpoint(E, F), F, I) + 180 mod 360
By sas_similarity on E, midpoint(E, F), C, D, midpoint(E, F), E we get similar_triangles(C, E, midpoint(E, F), E, D, midpoint(E, F))
By sas_similarity on C, midpoint(E, F), E, E, midpoint(E, F), D we get similar_triangles(C, E, midpoint(E, F), E, D, midpoint(E, F))
By reverse_direction on midpoint(F, I), F we get 180 == direction(midpoint(F, I), F) - direction(F, midpoint(F, I)) mod 360
By divide_by_2_mod_180_v1 on J, E, midpoint(E, F), F, I, G we get angle(F, I, G) + 180 == angle(J, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on B, D, C, midpoint(E, F), E, J we get angle(B, D, C) == angle(midpoint(E, F), E, J) + 180 mod 360
By divide_by_2_mod_180_v1 on H, F, E, midpoint(E, F), E, C we get angle(H, F, E) == angle(midpoint(E, F), E, C) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), E, C, F, E, B we get angle(F, E, B) + 180 == angle(midpoint(E, F), E, C) mod 360
By divide_by_2_mod_180_v1 on B, E, midpoint(E, F), E, I, F we get angle(E, I, F) + 180 == angle(B, E, midpoint(E, F)) mod 360
By directions_draw_angle on midpoint(F, I), F, A we get exists(angle(midpoint(F, I), F, A))
By divide_by_2_mod_180_v1 on F, D, midpoint(E, F), midpoint(E, F), E, B we get angle(F, D, midpoint(E, F)) == angle(midpoint(E, F), E, B) + 180 mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), F, I, midpoint(E, G), G, I we get angle(midpoint(E, F), F, I) == angle(midpoint(E, G), G, I) + 180 mod 360
By divide_by_2_mod_180_v1 on J, C, D, midpoint(E, F), C, E we get angle(J, C, D) == angle(midpoint(E, F), C, E) + 180 mod 360
By divide_by_2_mod_180_v1 on C, F, E, A, F, midpoint(E, F) we get angle(C, F, E) == angle(A, F, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on J, E, midpoint(E, F), C, F, G we get angle(C, F, G) + 180 == angle(J, E, midpoint(E, F)) mod 360
By divide_by_2_mod_180_v1 on midpoint(E, F), E, G, C, F, midpoint(F, G) we get angle(midpoint(E, F), E, G) == angle(C, F, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on G, E, midpoint(E, F), midpoint(F, G), F, C we get angle(G, E, midpoint(E, F)) == angle(midpoint(F, G), F, C) + 180 mod 360
By divide_by_2_mod_180_v1 on E, G, A, midpoint(E, F), F, G we get angle(E, G, A) == angle(midpoint(E, F), F, G) + 180 mod 360
By divide_by_2_mod_180_v1 on F, I, E, midpoint(E, F), E, B we get angle(F, I, E) == angle(midpoint(E, F), E, B) + 180 mod 360
By divide_by_2_mod_180_v1 on E, F, H, midpoint(E, F), F, J we get angle(E, F, H) == angle(midpoint(E, F), F, J) + 180 mod 360
By divide_by_2_mod_180_v1 on H, F, midpoint(E, F), F, D, midpoint(E, F) we get angle(H, F, midpoint(E, F)) == angle(F, D, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on I, D, midpoint(E, I), I, F, midpoint(E, F) we get angle(I, D, midpoint(E, I)) == angle(I, F, midpoint(E, F)) + 180 mod 360
By divide_by_2_mod_180_v1 on E, D, midpoint(E, F), midpoint(E, F), F, H we get angle(E, D, midpoint(E, F)) == angle(midpoint(E, F), F, H) + 180 mod 360
By divide_by_2_mod_180_v1 on G, E, midpoint(E, F), B, G, midpoint(F, G) we get angle(G, E, midpoint(E, F)) == angle(B, G, midpoint(F, G)) + 180 mod 360
By divide_by_2_mod_180_v1 on B, E, midpoint(E, F), E, G, F we get angle(E, G, F) + 180 == angle(B, E, midpoint(E, F)) mod 360
By directions_draw_angle on midpoint(G, I), G, F we get exists(angle(midpoint(G, I), G, F))
By divide_by_2_mod_180_v1 on C, D, E, midpoint(E, F), E, B we get angle(C, D, E) == angle(midpoint(E, F), E, B) + 180 mod 360
By not_in_line_equivalent_to_not_collinear_v0 on B, G, midpoint(G, I) we get not_collinear(B, G, midpoint(G, I)), exists(Line(G, midpoint(G, I)))
By directions_draw_angle on B, D, midpoint(E, F) we get exists(angle(B, D, midpoint(E, F)))
By directions_draw_angle on E, I, midpoint(F, I) we get exists(angle(E, I, midpoint(F, I)))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(F, G), G, midpoint(G, I) we get not_collinear(G, midpoint(F, G), midpoint(G, I)), exists(Line(G, midpoint(G, I)))
By directions_draw_angle on midpoint(F, I), F, midpoint(F, G) we get exists(angle(midpoint(F, I), F, midpoint(F, G)))
By not_in_line_equivalent_to_not_collinear_v0 on A, midpoint(F, I), F we get not_collinear(A, F, midpoint(F, I)), exists(Line(F, midpoint(F, I)))
By directions_draw_angle on F, I, midpoint(G, I) we get exists(angle(F, I, midpoint(G, I)))
By line_inequality on Line(H, center(d)), g, H we get g != Line(H, center(d))
By line_inequality on Line(H, center(d)), Line(I, J), H we get Line(I, J) != Line(H, center(d))
By not_in_line_equivalent_to_not_collinear_v0 on B, midpoint(F, I), I we get not_collinear(B, I, midpoint(F, I)), exists(Line(I, midpoint(F, I)))
By directions_draw_angle on midpoint(E, F), D, G we get exists(angle(midpoint(E, F), D, G))
By line_circle_intersection_has_at_most_two_points_0 on A, G, B, Circle(A, G, midpoint(F, G)) we get B not in Circle(A, G, midpoint(F, G))
By directions_draw_angle on midpoint(E, F), D, J we get exists(angle(midpoint(E, F), D, J))
By directions_draw_angle on midpoint(E, I), D, J we get exists(angle(midpoint(E, I), D, J))
By line_inequality on Line(H, center(d)), Line(E, I), H we get Line(E, I) != Line(H, center(d))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, I), F, midpoint(E, F) we get not_collinear(F, midpoint(E, F), midpoint(E, I)), exists(Line(F, midpoint(E, F)))
By directions_draw_angle on midpoint(E, F), D, A we get exists(angle(midpoint(E, F), D, A))
By directions_draw_angle on H, I, midpoint(G, I) we get exists(angle(H, I, midpoint(G, I)))
By not_in_line_equivalent_to_not_collinear_v0 on H, midpoint(F, I), F we get not_collinear(F, H, midpoint(F, I)), exists(Line(F, midpoint(F, I)))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, I), H, G we get not_collinear(G, H, midpoint(E, I)), exists(Line(G, H))
By line_circle_intersection_has_at_most_two_points_0 on midpoint(F, G), G, F, Circle(A, G, midpoint(F, G)) we get F not in Circle(A, G, midpoint(F, G))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, F), J, H we get not_collinear(H, J, midpoint(E, F)), exists(Line(H, J))
By directions_draw_angle on center(d), D, midpoint(E, F) we get exists(angle(center(d), D, midpoint(E, F)))
By not_in_line_equivalent_to_not_collinear_v0 on D, I, midpoint(G, I) we get not_collinear(D, I, midpoint(G, I)), exists(Line(I, midpoint(G, I)))
By directions_draw_angle on midpoint(G, I), G, midpoint(F, G) we get exists(angle(midpoint(G, I), G, midpoint(F, G)))
By directions_draw_angle on E, F, midpoint(F, I) we get exists(angle(E, F, midpoint(F, I)))
By directions_draw_angle on midpoint(E, F), D, I we get exists(angle(midpoint(E, F), D, I))
By directions_draw_angle on midpoint(E, G), D, midpoint(E, I) we get exists(angle(midpoint(E, G), D, midpoint(E, I)))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, I), G, midpoint(G, I) we get not_collinear(G, midpoint(E, I), midpoint(G, I)), exists(Line(G, midpoint(G, I)))
By not_in_line_equivalent_to_not_collinear_v0 on J, midpoint(F, I), F we get not_collinear(F, J, midpoint(F, I)), exists(Line(F, midpoint(F, I)))
By directions_draw_angle on midpoint(G, I), I, center(d) we get exists(angle(midpoint(G, I), I, center(d)))
By directions_draw_angle on midpoint(G, I), I, midpoint(F, I) we get exists(angle(midpoint(G, I), I, midpoint(F, I)))
By not_in_line_equivalent_to_not_collinear_v0 on D, midpoint(F, I), F we get not_collinear(D, F, midpoint(F, I)), exists(Line(F, midpoint(F, I)))
By directions_draw_angle on midpoint(F, G), G, midpoint(G, I) we get exists(angle(midpoint(F, G), G, midpoint(G, I)))
By directions_draw_angle on J, D, midpoint(E, I) we get exists(angle(J, D, midpoint(E, I)))
By directions_draw_angle on E, G, midpoint(G, I) we get exists(angle(E, G, midpoint(G, I)))
By directions_draw_angle on E, I, midpoint(G, I) we get exists(angle(E, I, midpoint(G, I)))
By line_containment_inequality on midpoint(F, I), midpoint(F, G), Line(F, I) we get midpoint(F, G) != midpoint(F, I)
By line_circle_intersection_has_at_most_two_points_0 on midpoint(E, G), B, D, Circle(B, G, midpoint(E, G)) we get D not in Circle(B, G, midpoint(E, G))
By line_circle_intersection_has_at_most_two_points_0 on midpoint(F, G), D, A, Circle(D, F, midpoint(F, G)) we get A not in Circle(D, F, midpoint(F, G))
By directions_draw_angle on A, D, midpoint(E, F) we get exists(angle(A, D, midpoint(E, F)))
By directions_draw_angle on midpoint(G, I), I, E we get exists(angle(midpoint(G, I), I, E))
By directions_draw_angle on midpoint(F, I), F, H we get exists(angle(midpoint(F, I), F, H))
By directions_draw_angle on D, G, midpoint(G, I) we get exists(angle(D, G, midpoint(G, I)))
By line_circle_intersection_has_at_most_two_points_0 on midpoint(F, G), A, D, Circle(A, F, midpoint(F, G)) we get D not in Circle(A, F, midpoint(F, G))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, I), midpoint(F, I), I we get not_collinear(I, midpoint(E, I), midpoint(F, I)), exists(Line(I, midpoint(F, I)))
By line_inequality on Line(H, center(d)), f, H we get f != Line(H, center(d))
By directions_draw_angle on midpoint(E, I), D, F we get exists(angle(midpoint(E, I), D, F))
By directions_draw_angle on midpoint(E, F), F, midpoint(F, I) we get exists(angle(midpoint(E, F), F, midpoint(F, I)))
By directions_draw_angle on midpoint(E, I), D, midpoint(E, G) we get exists(angle(midpoint(E, I), D, midpoint(E, G)))
By line_circle_intersection_has_at_most_two_points_0 on midpoint(E, G), D, H, Circle(D, E, midpoint(E, G)) we get H not in Circle(D, E, midpoint(E, G))
By directions_draw_angle on F, G, midpoint(G, I) we get exists(angle(F, G, midpoint(G, I)))
By directions_draw_angle on midpoint(F, I), F, projection(F, j) we get exists(angle(midpoint(F, I), F, projection(F, j)))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, G), midpoint(G, I), G we get not_collinear(G, midpoint(E, G), midpoint(G, I)), exists(Line(G, midpoint(G, I)))
By directions_draw_angle on midpoint(G, I), G, projection(F, j) we get exists(angle(midpoint(G, I), G, projection(F, j)))
By directions_draw_angle on projection(F, j), F, midpoint(F, I) we get exists(angle(projection(F, j), F, midpoint(F, I)))
By line_containment_inequality on midpoint(G, I), midpoint(E, G), k we get midpoint(E, G) != midpoint(G, I)
By directions_draw_angle on midpoint(G, I), I, H we get exists(angle(midpoint(G, I), I, H))
By directions_draw_angle on midpoint(E, I), D, midpoint(F, G) we get exists(angle(midpoint(E, I), D, midpoint(F, G)))
By directions_draw_angle on midpoint(F, G), D, midpoint(E, F) we get exists(angle(midpoint(F, G), D, midpoint(E, F)))
By directions_draw_angle on D, I, midpoint(F, I) we get exists(angle(D, I, midpoint(F, I)))
By directions_draw_angle on midpoint(G, I), I, F we get exists(angle(midpoint(G, I), I, F))
By directions_draw_angle on midpoint(G, I), G, A we get exists(angle(midpoint(G, I), G, A))
By not_in_line_equivalent_to_not_collinear_v0 on E, F, midpoint(F, I) we get not_collinear(E, F, midpoint(F, I)), exists(Line(F, midpoint(F, I)))
By directions_draw_angle on midpoint(E, F), D, midpoint(F, G) we get exists(angle(midpoint(E, F), D, midpoint(F, G)))
By directions_draw_angle on H, G, midpoint(G, I) we get exists(angle(H, G, midpoint(G, I)))
By line_inequality on median(D, E, I), Line(D, E), midpoint(E, I) we get Line(D, E) != median(D, E, I)
By directions_draw_angle on H, F, midpoint(F, I) we get exists(angle(H, F, midpoint(F, I)))
By directions_draw_angle on midpoint(F, I), F, midpoint(E, F) we get exists(angle(midpoint(F, I), F, midpoint(E, F)))
By directions_draw_angle on G, projection(F, j), F we get exists(angle(G, projection(F, j), F))
By line_containment_inequality on midpoint(F, I), J, Line(F, I) we get J != midpoint(F, I)
By not_in_line_equivalent_to_not_collinear_v0 on J, midpoint(G, I), G we get not_collinear(G, J, midpoint(G, I)), exists(Line(G, midpoint(G, I)))
By directions_draw_angle on midpoint(F, I), F, J we get exists(angle(midpoint(F, I), F, J))
By directions_draw_angle on midpoint(F, G), D, midpoint(E, I) we get exists(angle(midpoint(F, G), D, midpoint(E, I)))
By directions_draw_angle on D, F, midpoint(F, I) we get exists(angle(D, F, midpoint(F, I)))
By directions_draw_angle on midpoint(E, I), I, midpoint(G, I) we get exists(angle(midpoint(E, I), I, midpoint(G, I)))
By line_containment_inequality on midpoint(G, I), C, k we get C != midpoint(G, I)
By directions_draw_angle on A, F, midpoint(F, I) we get exists(angle(A, F, midpoint(F, I)))
By directions_draw_angle on J, I, midpoint(F, I) we get exists(angle(J, I, midpoint(F, I)))
By directions_draw_angle on midpoint(G, I), G, H we get exists(angle(midpoint(G, I), G, H))
By directions_draw_angle on midpoint(F, I), F, C we get exists(angle(midpoint(F, I), F, C))
By directions_draw_angle on center(d), I, midpoint(F, I) we get exists(angle(center(d), I, midpoint(F, I)))
By directions_draw_angle on midpoint(F, I), I, midpoint(G, I) we get exists(angle(midpoint(F, I), I, midpoint(G, I)))
By directions_draw_angle on midpoint(F, I), I, H we get exists(angle(midpoint(F, I), I, H))
By directions_draw_angle on midpoint(E, G), G, midpoint(G, I) we get exists(angle(midpoint(E, G), G, midpoint(G, I)))
By directions_draw_angle on midpoint(E, I), D, A we get exists(angle(midpoint(E, I), D, A))
By line_circle_intersection_has_at_most_two_points_0 on G, midpoint(E, G), E, Circle(B, G, midpoint(E, G)) we get E not in Circle(B, G, midpoint(E, G))
By directions_draw_angle on midpoint(F, G), F, midpoint(F, I) we get exists(angle(midpoint(F, G), F, midpoint(F, I)))
By directions_draw_angle on midpoint(E, F), D, B we get exists(angle(midpoint(E, F), D, B))
By line_inequality on Line(E, center(d)), median(D, E, I), E we get median(D, E, I) != Line(E, center(d))
By directions_draw_angle on G, projection(F, j), E we get exists(angle(G, projection(F, j), E))
By not_in_line_equivalent_to_not_collinear_v0 on F, midpoint(G, I), G we get not_collinear(F, G, midpoint(G, I)), exists(Line(G, midpoint(G, I)))
By directions_draw_angle on J, F, midpoint(F, I) we get exists(angle(J, F, midpoint(F, I)))
By not_in_line_equivalent_to_not_collinear_v0 on A, midpoint(F, I), I we get not_collinear(A, I, midpoint(F, I)), exists(Line(I, midpoint(F, I)))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(E, I), I, midpoint(G, I) we get not_collinear(I, midpoint(E, I), midpoint(G, I)), exists(Line(I, midpoint(G, I)))
By directions_draw_angle on midpoint(G, I), I, midpoint(E, I) we get exists(angle(midpoint(G, I), I, midpoint(E, I)))
By directions_draw_angle on I, D, midpoint(E, F) we get exists(angle(I, D, midpoint(E, F)))
By directions_draw_angle on projection(F, j), G, midpoint(G, I) we get exists(angle(projection(F, j), G, midpoint(G, I)))
By directions_draw_angle on midpoint(F, I), I, G we get exists(angle(midpoint(F, I), I, G))
By line_containment_inequality on midpoint(F, I), A, Line(F, I) we get A != midpoint(F, I)
By line_containment_inequality on projection(F, j), midpoint(E, F), j we get midpoint(E, F) != projection(F, j)
By directions_draw_angle on D, I, midpoint(G, I) we get exists(angle(D, I, midpoint(G, I)))
By directions_draw_angle on H, D, midpoint(E, F) we get exists(angle(H, D, midpoint(E, F)))
By directions_draw_angle on J, I, midpoint(G, I) we get exists(angle(J, I, midpoint(G, I)))
By directions_draw_angle on midpoint(F, I), F, G we get exists(angle(midpoint(F, I), F, G))
By line_containment_inequality on midpoint(G, I), F, k we get F != midpoint(G, I)
By line_circle_intersection_has_at_most_two_points_0 on midpoint(E, G), E, G, Circle(D, E, midpoint(E, G)) we get G not in Circle(D, E, midpoint(E, G))
By line_inequality on Line(H, center(d)), Line(E, J), H we get Line(E, J) != Line(H, center(d))
By line_circle_intersection_has_at_most_two_points_0 on E, B, C, Circle(B, E, midpoint(E, G)) we get C not in Circle(B, E, midpoint(E, G))
By line_circle_intersection_has_at_most_two_points_0 on midpoint(E, G), D, H, Circle(D, G, midpoint(E, G)) we get H not in Circle(D, G, midpoint(E, G))
By line_containment_inequality on projection(F, Line(D, J)), midpoint(E, F), Line(D, J) we get midpoint(E, F) != projection(F, Line(D, J))
By line_inequality on Line(H, center(d)), Line(E, G), H we get Line(E, G) != Line(H, center(d))
By line_containment_inequality on midpoint(F, I), C, Line(F, I) we get C != midpoint(F, I)
By line_circle_intersection_has_at_most_two_points_0 on G, midpoint(E, G), E, Circle(D, G, midpoint(E, G)) we get E not in Circle(D, G, midpoint(E, G))
By line_containment_inequality on midpoint(G, I), B, k we get B != midpoint(G, I)
By line_inequality on Line(H, center(d)), Line(F, G), H we get Line(F, G) != Line(H, center(d))
By line_circle_intersection_has_at_most_two_points_0 on midpoint(E, G), D, B, Circle(D, E, midpoint(E, G)) we get B not in Circle(D, E, midpoint(E, G))
By line_inequality on Line(I, center(d)), median(D, E, I), I we get median(D, E, I) != Line(I, center(d))
By line_circle_intersection_has_at_most_two_points_0 on F, A, C, Circle(A, F, midpoint(F, G)) we get C not in Circle(A, F, midpoint(F, G))
By line_inequality on Line(H, center(d)), Line(D, F), H we get Line(D, F) != Line(H, center(d))
By line_inequality on Line(E, projection(F, j)), median(D, E, I), E we get median(D, E, I) != Line(E, projection(F, j))
By line_containment_inequality on midpoint(G, I), J, k we get J != midpoint(G, I)
By line_containment_inequality on midpoint(F, I), midpoint(E, I), Line(F, I) we get midpoint(E, I) != midpoint(F, I)
By line_inequality on Line(H, center(d)), Line(D, E), H we get Line(D, E) != Line(H, center(d))
By line_inequality on Line(H, center(d)), Line(E, F), H we get Line(E, F) != Line(H, center(d))
By line_containment_inequality on midpoint(F, I), midpoint(E, F), Line(F, I) we get midpoint(E, F) != midpoint(F, I)
By line_containment_inequality on midpoint(F, I), B, Line(F, I) we get B != midpoint(F, I)
By line_containment_inequality on midpoint(G, I), midpoint(E, I), k we get midpoint(E, I) != midpoint(G, I)
By line_inequality on Line(H, center(d)), Line(C, D), H we get Line(C, D) != Line(H, center(d))
By line_inequality on Line(H, center(d)), Line(F, I), H we get Line(F, I) != Line(H, center(d))
By line_circle_intersection_has_at_most_two_points_0 on F, A, J, Circle(A, F, midpoint(F, G)) we get J not in Circle(A, F, midpoint(F, G))
By line_containment_inequality on midpoint(G, I), A, k we get A != midpoint(G, I)
By line_circle_intersection_has_at_most_two_points_0 on A, F, H, Circle(A, F, midpoint(F, G)) we get H not in Circle(A, F, midpoint(F, G))
By line_containment_inequality on midpoint(G, I), midpoint(F, G), k we get midpoint(F, G) != midpoint(G, I)
By line_inequality on Line(H, center(d)), Line(D, I), H we get Line(D, I) != Line(H, center(d))
By line_containment_inequality on midpoint(F, I), H, Line(F, I) we get H != midpoint(F, I)
By line_inequality on Line(H, center(d)), Line(D, G), H we get Line(D, G) != Line(H, center(d))
By line_inequality on Line(H, center(d)), i, H we get i != Line(H, center(d))
By tangent_chord_angle_v1 on E, C, midpoint(E, F), D we get tangent(Line(D, E), Circle(C, E, midpoint(E, F)))
By external_angle_bisector_definition_v0_r on F, D, F, midpoint(E, F) we get Line(D, midpoint(E, F)) == external_angle_bisector(F, midpoint(E, F), F)
By tangent_chord_angle_v1 on F, C, midpoint(E, F), D we get tangent(Line(D, F), Circle(C, F, midpoint(E, F)))
By external_angle_bisector_definition_v0_r on C, F, C, midpoint(E, F) we get Line(F, midpoint(E, F)) == external_angle_bisector(C, midpoint(E, F), C)
By tangent_chord_angle_v1 on F, J, E, midpoint(F, G) we get tangent(Line(F, midpoint(F, G)), Circle(E, F, J))
By external_angle_bisector_definition_v0_r on E, C, E, midpoint(E, F) we get Line(C, midpoint(E, F)) == external_angle_bisector(E, midpoint(E, F), E)
By internal_angle_bisector_definition_v0 on F, D, I, midpoint(F, I) we get angle(D, midpoint(F, I), I) == angle(F, midpoint(F, I), D) mod 360
By similar_triangle_basic_properties on F, J, E, G, F, E we get not_collinear(E, F, J), not_collinear(E, F, G), angle(F, J, E) == angle(G, F, E) mod 360, angle(F, E, G) == angle(J, E, F) mod 360, angle(E, F, J) == angle(E, G, F) mod 360, log(distance(F, G)) + log(distance(E, J)) == log(distance(F, J)) + log(distance(E, F)), log(distance(E, F)) + log(distance(E, F)) == log(distance(E, J)) + log(distance(E, G)), log(distance(E, F)) + log(distance(F, G)) == log(distance(E, G)) + log(distance(F, J))
By internal_angle_bisector_definition_v0_r on J, F, midpoint(E, G), E we get Line(E, F) == internal_angle_bisector(J, E, midpoint(E, G))
By isogonal_conjugate_sufficient_conditions_v1 on H, E, I, B, midpoint(E, G) we get B == isogonal_conjugate(midpoint(E, G), E, H, I)
By concyclic_definition_0 on G, midpoint(E, G), midpoint(F, G), D we get D in Circle(G, midpoint(E, G), midpoint(F, G))
By power_of_a_point_on_circle on A, Circle(A, G, midpoint(F, G)) we get 0 == power_of_a_point(A, Circle(A, G, midpoint(F, G)))
By power_of_a_point_on_circle on D, Circle(D, F, midpoint(F, G)) we get 0 == power_of_a_point(D, Circle(D, F, midpoint(F, G)))
By perpendicular_angle_conditions_v0 on I, midpoint(G, I), D we get angle(I, midpoint(G, I), D) == orientation(D, I, midpoint(G, I)) mod 360
By tangent_chord_angle_v1 on E, D, midpoint(E, I), C we get tangent(Line(C, E), Circle(D, E, midpoint(E, I)))
By tangent_chord_angle_v0 on F, D, midpoint(E, F), H we get tangent(Line(F, H), Circle(D, F, midpoint(E, F)))
By tangent_chord_angle_v1 on F, D, midpoint(E, F), J we get tangent(Line(F, J), Circle(D, F, midpoint(E, F)))
By tangent_chord_angle_v1 on E, D, midpoint(E, F), C we get tangent(Line(C, E), Circle(D, E, midpoint(E, F)))
By power_of_a_point_on_circle on G, Circle(A, G, midpoint(F, G)) we get 0 == power_of_a_point(G, Circle(A, G, midpoint(F, G)))
By internal_angle_bisector_definition_v0_r on midpoint(F, I), F, midpoint(F, I), I we get Line(F, I) == internal_angle_bisector(midpoint(F, I), I, midpoint(F, I))
By tangent_chord_angle_v1 on F, J, E, G we get tangent(Line(F, G), Circle(E, F, J))
By power_of_a_point_on_circle on midpoint(F, G), Circle(D, F, midpoint(F, G)) we get 0 == power_of_a_point(midpoint(F, G), Circle(D, F, midpoint(F, G)))
By internal_angle_bisector_definition_v0 on F, midpoint(F, I), I, D we get angle(F, D, midpoint(F, I)) == angle(midpoint(F, I), D, I) mod 360
By tangent_chord_angle_v1 on F, D, midpoint(E, F), C we get tangent(Line(C, F), Circle(D, F, midpoint(E, F)))
By concyclic_definition_1 on G, D, midpoint(E, G), midpoint(F, G) we get Circle(D, G, midpoint(E, G)) == Circle(D, midpoint(E, G), midpoint(F, G))
By isogonal_conjugate_sufficient_conditions_v1 on H, E, I, midpoint(E, G), B we get midpoint(E, G) == isogonal_conjugate(B, E, H, I)
By external_angle_bisector_definition_v0_r on D, F, D, midpoint(E, F) we get Line(F, midpoint(E, F)) == external_angle_bisector(D, midpoint(E, F), D)
By similar_triangle_basic_properties on F, E, J, G, E, F we get not_collinear(E, F, J), not_collinear(E, F, G), angle(F, E, J) == angle(G, E, F) mod 360, angle(E, F, G) == angle(E, J, F) mod 360, angle(F, G, E) == angle(J, F, E) mod 360, log(distance(E, F)) + log(distance(E, F)) == log(distance(E, G)) + log(distance(E, J)), log(distance(E, F)) + log(distance(F, J)) == log(distance(E, J)) + log(distance(F, G)), log(distance(F, G)) + log(distance(E, F)) == log(distance(F, J)) + log(distance(E, G))
By internal_angle_bisector_definition_v0_r on midpoint(G, I), G, midpoint(G, I), I we get Line(G, I) == internal_angle_bisector(midpoint(G, I), I, midpoint(G, I))
By external_angle_bisector_definition_v0_r on E, D, E, midpoint(E, I) we get Line(D, midpoint(E, I)) == external_angle_bisector(E, midpoint(E, I), E)
By draw_point_of_tangency on f, Circle(D, G, midpoint(F, G)) we get exists(line_circle_tangent_point(f, Circle(D, G, midpoint(F, G))))
By external_angle_bisector_definition_v0_r on E, D, E, midpoint(E, F) we get Line(D, midpoint(E, F)) == external_angle_bisector(E, midpoint(E, F), E)
By internal_angle_bisector_definition_v0_r on midpoint(E, G), D, H, B we get Line(B, D) == internal_angle_bisector(H, B, midpoint(E, G))
By internal_angle_bisector_definition_v0_r on midpoint(E, G), H, D, B we get Line(B, H) == internal_angle_bisector(D, B, midpoint(E, G))
By external_angle_bisector_definition_v0_r on F, C, F, midpoint(E, F) we get Line(C, midpoint(E, F)) == external_angle_bisector(F, midpoint(E, F), F)
By isosceles_triangle_properties on center(d), D, H we get distance(D, center(d)) == distance(H, center(d)), angle(D, H, center(d)) == angle(center(d), D, H) mod 360
By perpendicular_angle_conditions_v0 on D, midpoint(F, I), I we get angle(D, midpoint(F, I), I) == orientation(D, midpoint(F, I), I) mod 360
By concyclic_definition_1 on midpoint(F, G), midpoint(E, G), G, D we get Circle(D, G, midpoint(E, G)) == Circle(G, midpoint(E, G), midpoint(F, G))
By tangent_chord_angle_v0 on E, D, midpoint(E, I), B we get tangent(Line(B, E), Circle(D, E, midpoint(E, I)))
By tangent_chord_angle_v0 on E, D, midpoint(E, F), B we get tangent(Line(B, E), Circle(D, E, midpoint(E, F)))
By external_angle_bisector_definition_v0_r on midpoint(E, G), B, H, D we get Line(B, D) == external_angle_bisector(H, D, midpoint(E, G))
By internal_angle_bisector_definition_v0_r on midpoint(E, F), D, midpoint(E, F), C we get Line(C, D) == internal_angle_bisector(midpoint(E, F), C, midpoint(E, F))
By power_of_a_point_on_circle on midpoint(E, G), Circle(D, G, midpoint(E, G)) we get 0 == power_of_a_point(midpoint(E, G), Circle(D, G, midpoint(E, G)))
By external_angle_bisector_definition_v0_r on D, I, D, midpoint(E, I) we get Line(I, midpoint(E, I)) == external_angle_bisector(D, midpoint(E, I), D)
By internal_angle_bisector_definition_v0_r on G, midpoint(E, F), J, E we get Line(E, midpoint(E, F)) == internal_angle_bisector(G, E, J)
By perpendicular_angle_conditions_v0 on G, midpoint(G, I), D we get angle(G, midpoint(G, I), D) == orientation(D, G, midpoint(G, I)) mod 360
By tangent_chord_angle_v0 on F, D, midpoint(E, F), A we get tangent(Line(A, F), Circle(D, F, midpoint(E, F)))
By power_of_a_point_on_circle on A, Circle(A, F, midpoint(F, G)) we get 0 == power_of_a_point(A, Circle(A, F, midpoint(F, G)))
By isosceles_triangle_properties on center(d), J, H we get distance(H, center(d)) == distance(J, center(d)), angle(J, H, center(d)) == angle(center(d), J, H) mod 360
By external_angle_bisector_definition_v0_r on D, E, D, midpoint(E, I) we get Line(E, midpoint(E, I)) == external_angle_bisector(D, midpoint(E, I), D)
By concyclic_definition_1 on midpoint(E, G), G, midpoint(F, G), D we get Circle(D, G, midpoint(F, G)) == Circle(G, midpoint(E, G), midpoint(F, G))
By power_of_a_point_on_circle on G, Circle(D, G, midpoint(F, G)) we get 0 == power_of_a_point(G, Circle(D, G, midpoint(F, G)))
By draw_point_of_tangency on f, Circle(D, G, midpoint(E, G)) we get exists(line_circle_tangent_point(f, Circle(D, G, midpoint(E, G))))
By external_angle_bisector_definition_v0_r on D, E, D, midpoint(E, F) we get Line(E, midpoint(E, F)) == external_angle_bisector(D, midpoint(E, F), D)
By isosceles_triangle_properties on center(d), H, E we get distance(E, center(d)) == distance(H, center(d)), angle(H, E, center(d)) == angle(center(d), H, E) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(G, I), I, midpoint(G, I), G we get Line(G, I) == internal_angle_bisector(midpoint(G, I), G, midpoint(G, I))
By perpendicular_angle_conditions_v0 on D, midpoint(G, I), G we get angle(D, midpoint(G, I), G) == orientation(D, midpoint(G, I), G) mod 360
By power_of_a_point_in_circle on G, Circle(B, G, midpoint(E, G)) we get 0 == power_of_a_point(G, Circle(B, G, midpoint(E, G)))
By power_of_a_point_on_circle on midpoint(F, G), Circle(A, G, midpoint(F, G)) we get 0 == power_of_a_point(midpoint(F, G), Circle(A, G, midpoint(F, G)))
By power_of_a_point_in_circle on F, Circle(A, F, midpoint(F, G)) we get 0 == power_of_a_point(F, Circle(A, F, midpoint(F, G)))
By power_of_a_point_on_circle on B, Circle(B, E, midpoint(E, G)) we get 0 == power_of_a_point(B, Circle(B, E, midpoint(E, G)))
By power_of_a_point_on_circle on E, Circle(B, E, midpoint(E, G)) we get 0 == power_of_a_point(E, Circle(B, E, midpoint(E, G)))
By isosceles_triangle_properties on center(d), H, J we get distance(H, center(d)) == distance(J, center(d)), angle(H, J, center(d)) == angle(center(d), H, J) mod 360
By power_of_a_point_in_circle on B, Circle(B, G, midpoint(E, G)) we get 0 == power_of_a_point(B, Circle(B, G, midpoint(E, G)))
By internal_angle_bisector_definition_v0_r on C, F, D, midpoint(E, F) we get Line(F, midpoint(E, F)) == internal_angle_bisector(C, midpoint(E, F), D)
By isosceles_triangle_properties on center(d), H, I we get distance(H, center(d)) == distance(I, center(d)), angle(H, I, center(d)) == angle(center(d), H, I) mod 360
By power_of_a_point_in_circle on F, Circle(D, F, midpoint(F, G)) we get 0 == power_of_a_point(F, Circle(D, F, midpoint(F, G)))
By perpendicular_angle_conditions_v0 on I, midpoint(F, I), D we get angle(I, midpoint(F, I), D) == orientation(D, I, midpoint(F, I)) mod 360
By power_of_a_point_in_circle on D, Circle(D, E, midpoint(E, G)) we get 0 == power_of_a_point(D, Circle(D, E, midpoint(E, G)))
By external_angle_bisector_definition_v0_r on C, E, C, midpoint(E, F) we get Line(E, midpoint(E, F)) == external_angle_bisector(C, midpoint(E, F), C)
By draw_point_of_tangency on g, Circle(D, E, midpoint(E, G)) we get exists(line_circle_tangent_point(g, Circle(D, E, midpoint(E, G))))
By internal_angle_bisector_definition_v0_r on B, D, midpoint(E, G), H we get Line(D, H) == internal_angle_bisector(B, H, midpoint(E, G))
By internal_angle_bisector_definition_v0 on I, D, G, midpoint(G, I) we get angle(D, midpoint(G, I), G) == angle(I, midpoint(G, I), D) mod 360
By internal_angle_bisector_definition_v0_r on I, midpoint(F, I), I, F we get Line(F, midpoint(F, I)) == internal_angle_bisector(I, F, I)
By power_of_a_point_on_circle on midpoint(E, G), Circle(B, E, midpoint(E, G)) we get 0 == power_of_a_point(midpoint(E, G), Circle(B, E, midpoint(E, G)))
By power_of_a_point_in_circle on D, Circle(D, G, midpoint(E, G)) we get 0 == power_of_a_point(D, Circle(D, G, midpoint(E, G)))
By internal_angle_bisector_definition_v0_r on F, I, F, midpoint(F, I) we get Line(I, midpoint(F, I)) == internal_angle_bisector(F, midpoint(F, I), F)
By power_of_a_point_in_circle on midpoint(E, G), Circle(D, E, midpoint(E, G)) we get 0 == power_of_a_point(midpoint(E, G), Circle(D, E, midpoint(E, G)))
By internal_angle_bisector_definition_v0 on G, D, I, midpoint(G, I) we get angle(D, midpoint(G, I), I) == angle(G, midpoint(G, I), D) mod 360
By concyclic_definition_0 on midpoint(F, G), midpoint(E, G), D, G we get G in Circle(D, midpoint(E, G), midpoint(F, G))
By internal_angle_bisector_definition_v0_r on D, E, C, midpoint(E, F) we get Line(E, midpoint(E, F)) == internal_angle_bisector(C, midpoint(E, F), D)
By internal_angle_bisector_definition_v0_r on midpoint(E, I), center(d), midpoint(E, I), D we get Line(D, center(d)) == internal_angle_bisector(midpoint(E, I), D, midpoint(E, I))
By perpendicular_angle_conditions_v0 on D, midpoint(F, I), F we get angle(D, midpoint(F, I), F) == orientation(D, midpoint(F, I), F) mod 360
By concyclic_definition_1 on G, midpoint(F, G), D, midpoint(E, G) we get Circle(D, G, midpoint(F, G)) == Circle(D, midpoint(E, G), midpoint(F, G))
By isosceles_triangle_properties on center(d), I, H we get distance(H, center(d)) == distance(I, center(d)), angle(I, H, center(d)) == angle(center(d), I, H) mod 360
By perpendicular_angle_conditions_v0 on D, midpoint(G, I), I we get angle(D, midpoint(G, I), I) == orientation(D, midpoint(G, I), I) mod 360
By internal_angle_bisector_definition_v0_r on I, F, I, midpoint(F, I) we get Line(F, midpoint(F, I)) == internal_angle_bisector(I, midpoint(F, I), I)
By power_of_a_point_on_circle on D, Circle(D, G, midpoint(F, G)) we get 0 == power_of_a_point(D, Circle(D, G, midpoint(F, G)))
By reverse_direction on center(d), H we get 180 == direction(center(d), H) - direction(H, center(d)) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(E, G), H, B, D we get Line(D, H) == internal_angle_bisector(B, D, midpoint(E, G))
By internal_angle_bisector_definition_v0_r on center(d), midpoint(E, I), center(d), D we get Line(D, midpoint(E, I)) == internal_angle_bisector(center(d), D, center(d))
By internal_angle_bisector_definition_v0_r on J, midpoint(E, F), midpoint(E, G), E we get Line(E, midpoint(E, F)) == internal_angle_bisector(J, E, midpoint(E, G))
By external_angle_bisector_definition_v0_r on I, D, I, midpoint(E, I) we get Line(D, midpoint(E, I)) == external_angle_bisector(I, midpoint(E, I), I)
By isosceles_triangle_properties on center(d), E, H we get distance(E, center(d)) == distance(H, center(d)), angle(E, H, center(d)) == angle(center(d), E, H) mod 360
By draw_point_of_tangency on Line(D, F), Circle(A, F, midpoint(F, G)) we get exists(line_circle_tangent_point(Line(D, F), Circle(A, F, midpoint(F, G))))
By power_of_a_point_on_circle on midpoint(E, G), Circle(B, G, midpoint(E, G)) we get 0 == power_of_a_point(midpoint(E, G), Circle(B, G, midpoint(E, G)))
By internal_angle_bisector_definition_v0_r on G, I, G, midpoint(G, I) we get Line(I, midpoint(G, I)) == internal_angle_bisector(G, midpoint(G, I), G)
By internal_angle_bisector_definition_v0_r on midpoint(E, G), B, D, H we get Line(B, H) == internal_angle_bisector(D, H, midpoint(E, G))
By internal_angle_bisector_definition_v0_r on midpoint(F, I), I, midpoint(F, I), F we get Line(F, I) == internal_angle_bisector(midpoint(F, I), F, midpoint(F, I))
By internal_angle_bisector_definition_v0 on I, D, F, midpoint(F, I) we get angle(D, midpoint(F, I), F) == angle(I, midpoint(F, I), D) mod 360
By isosceles_triangle_properties on center(d), H, D we get distance(D, center(d)) == distance(H, center(d)), angle(H, D, center(d)) == angle(center(d), H, D) mod 360
By internal_angle_bisector_definition_v0_r on G, F, J, E we get Line(E, F) == internal_angle_bisector(G, E, J)
By internal_angle_bisector_definition_v0 on G, midpoint(G, I), I, D we get angle(G, D, midpoint(G, I)) == angle(midpoint(G, I), D, I) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(E, F), C, midpoint(E, F), D we get Line(C, D) == internal_angle_bisector(midpoint(E, F), D, midpoint(E, F))
By internal_angle_bisector_definition_v0_r on D, midpoint(E, F), D, C we get Line(C, midpoint(E, F)) == internal_angle_bisector(D, C, D)
By internal_angle_bisector_definition_v0 on I, midpoint(G, I), G, D we get angle(I, D, midpoint(G, I)) == angle(midpoint(G, I), D, G) mod 360
By internal_angle_bisector_definition_v0 on I, midpoint(F, I), F, D we get angle(I, D, midpoint(F, I)) == angle(midpoint(F, I), D, F) mod 360
By power_of_a_point_in_circle on G, Circle(D, G, midpoint(E, G)) we get 0 == power_of_a_point(G, Circle(D, G, midpoint(E, G)))
By power_of_a_point_on_circle on midpoint(F, G), Circle(D, G, midpoint(F, G)) we get 0 == power_of_a_point(midpoint(F, G), Circle(D, G, midpoint(F, G)))
By internal_angle_bisector_definition_v0_r on C, midpoint(E, F), C, D we get Line(D, midpoint(E, F)) == internal_angle_bisector(C, D, C)
By draw_point_of_tangency on h, Circle(D, F, midpoint(F, G)) we get exists(line_circle_tangent_point(h, Circle(D, F, midpoint(F, G))))
By internal_angle_bisector_definition_v0_r on F, midpoint(F, I), F, I we get Line(I, midpoint(F, I)) == internal_angle_bisector(F, I, F)
By power_of_a_point_in_circle on midpoint(F, G), Circle(A, F, midpoint(F, G)) we get 0 == power_of_a_point(midpoint(F, G), Circle(A, F, midpoint(F, G)))
By perpendicular_angle_conditions_v0 on F, midpoint(F, I), D we get angle(F, midpoint(F, I), D) == orientation(D, F, midpoint(F, I)) mod 360
By power_of_a_point_on_circle on E, Circle(D, E, midpoint(E, G)) we get 0 == power_of_a_point(E, Circle(D, E, midpoint(E, G)))
By internal_angle_bisector_definition_v0_r on D, C, D, midpoint(E, F) we get Line(C, midpoint(E, F)) == internal_angle_bisector(D, midpoint(E, F), D)
By internal_angle_bisector_definition_v0_r on C, D, C, midpoint(E, F) we get Line(D, midpoint(E, F)) == internal_angle_bisector(C, midpoint(E, F), C)
By internal_angle_bisector_definition_v0_r on I, G, I, midpoint(G, I) we get Line(G, midpoint(G, I)) == internal_angle_bisector(I, midpoint(G, I), I)
By draw_point_of_tangency on Line(D, G), Circle(B, G, midpoint(E, G)) we get exists(line_circle_tangent_point(Line(D, G), Circle(B, G, midpoint(E, G))))
By draw_point_of_tangency on Line(D, E), Circle(B, E, midpoint(E, G)) we get exists(line_circle_tangent_point(Line(D, E), Circle(B, E, midpoint(E, G))))
By draw_point_of_tangency on Line(D, G), Circle(A, G, midpoint(F, G)) we get exists(line_circle_tangent_point(Line(D, G), Circle(A, G, midpoint(F, G))))
By sas_similarity on F, G, E, midpoint(F, G), G, midpoint(E, G) we get similar_triangles(E, F, G, midpoint(E, G), midpoint(F, G), G)
By power_of_a_point_definition on C, H, J, d we get log(power_of_a_point(C, d)) == log(distance(C, H)) + log(distance(C, J))
By altitude_definition on F, midpoint(E, F), D, Line(E, F) we get Line(E, F) == altitude(F, D, midpoint(E, F))
By altitude_definition on E, midpoint(E, F), D, Line(E, F) we get Line(E, F) == altitude(E, D, midpoint(E, F))
By altitude_definition on C, midpoint(E, F), F, Line(C, D) we get Line(C, D) == altitude(C, F, midpoint(E, F))
By concyclic_definition_1 on G, midpoint(E, G), midpoint(F, G), D we get Circle(D, midpoint(E, G), midpoint(F, G)) == Circle(G, midpoint(E, G), midpoint(F, G))
By altitude_definition on D, F, midpoint(E, F), Line(C, D) we get Line(C, D) == altitude(D, F, midpoint(E, F))
By power_of_a_point_definition on midpoint(F, I), F, I, c we get log(power_of_a_point(midpoint(F, I), c)) == log(distance(F, midpoint(F, I))) + log(distance(I, midpoint(F, I)))
By altitude_definition on D, E, midpoint(E, F), Line(C, D) we get Line(C, D) == altitude(D, E, midpoint(E, F))
By power_of_a_point_definition on A, H, J, d we get log(power_of_a_point(A, d)) == log(distance(A, H)) + log(distance(A, J))
By altitude_definition on F, midpoint(E, F), C, Line(E, F) we get Line(E, F) == altitude(F, C, midpoint(E, F))
By power_of_a_point_definition on B, H, D, d we get log(power_of_a_point(B, d)) == log(distance(B, H)) + log(distance(B, D))
By altitude_definition on E, midpoint(E, F), C, Line(E, F) we get Line(E, F) == altitude(E, C, midpoint(E, F))
By altitude_definition on D, I, midpoint(E, I), median(D, E, I) we get median(D, E, I) == altitude(D, I, midpoint(E, I))
By power_of_a_point_tangent on A, G, Circle(D, G, midpoint(F, G)) we get 2 * log(distance(A, G)) == log(power_of_a_point(A, Circle(D, G, midpoint(F, G))))
By power_of_a_point_tangent on D, G, Circle(B, G, midpoint(E, G)) we get 2 * log(distance(D, G)) == log(power_of_a_point(D, Circle(B, G, midpoint(E, G))))
By sas_similarity on E, G, F, midpoint(E, G), G, midpoint(F, G) we get similar_triangles(E, F, G, midpoint(E, G), midpoint(F, G), G)
By sas_similarity on midpoint(F, G), G, midpoint(E, G), F, G, E we get similar_triangles(E, F, G, midpoint(E, G), midpoint(F, G), G)
By altitude_definition on D, midpoint(E, I), E, median(D, E, I) we get median(D, E, I) == altitude(D, E, midpoint(E, I))
By altitude_definition on E, midpoint(E, I), D, Line(E, I) we get Line(E, I) == altitude(E, D, midpoint(E, I))
By altitude_definition on C, midpoint(E, F), E, Line(C, D) we get Line(C, D) == altitude(C, E, midpoint(E, F))
By power_of_a_point_tangent on D, G, Circle(A, G, midpoint(F, G)) we get 2 * log(distance(D, G)) == log(power_of_a_point(D, Circle(A, G, midpoint(F, G))))
By altitude_definition on I, D, midpoint(E, I), Line(E, I) we get Line(E, I) == altitude(I, D, midpoint(E, I))
By power_of_a_point_definition on midpoint(G, I), I, G, c we get log(power_of_a_point(midpoint(G, I), c)) == log(distance(I, midpoint(G, I))) + log(distance(G, midpoint(G, I)))
By power_of_a_point_tangent on C, F, Circle(D, F, midpoint(F, G)) we get 2 * log(distance(C, F)) == log(power_of_a_point(C, Circle(D, F, midpoint(F, G))))
By power_of_a_point_tangent on B, G, Circle(D, G, midpoint(E, G)) we get 2 * log(distance(B, G)) == log(power_of_a_point(B, Circle(D, G, midpoint(E, G))))
By sas_similarity on midpoint(E, G), G, midpoint(F, G), E, G, F we get similar_triangles(E, F, G, midpoint(E, G), midpoint(F, G), G)
By power_of_a_point_tangent on B, G, Circle(D, G, midpoint(F, G)) we get 2 * log(distance(B, G)) == log(power_of_a_point(B, Circle(D, G, midpoint(F, G))))
By power_of_a_point_tangent on A, F, Circle(D, F, midpoint(F, G)) we get 2 * log(distance(A, F)) == log(power_of_a_point(A, Circle(D, F, midpoint(F, G))))
By power_of_a_point_tangent on C, E, Circle(D, E, midpoint(E, G)) we get 2 * log(distance(C, E)) == log(power_of_a_point(C, Circle(D, E, midpoint(E, G))))
By power_of_a_point_tangent on D, E, Circle(B, E, midpoint(E, G)) we get 2 * log(distance(D, E)) == log(power_of_a_point(D, Circle(B, E, midpoint(E, G))))
By power_of_a_point_tangent on J, F, Circle(D, F, midpoint(F, G)) we get 2 * log(distance(F, J)) == log(power_of_a_point(J, Circle(D, F, midpoint(F, G))))
By power_of_a_point_tangent on D, F, Circle(A, F, midpoint(F, G)) we get 2 * log(distance(D, F)) == log(power_of_a_point(D, Circle(A, F, midpoint(F, G))))
By power_of_a_point_tangent on A, G, Circle(D, G, midpoint(E, G)) we get 2 * log(distance(A, G)) == log(power_of_a_point(A, Circle(D, G, midpoint(E, G))))
By power_of_a_point_tangent on H, F, Circle(D, F, midpoint(F, G)) we get 2 * log(distance(F, H)) == log(power_of_a_point(H, Circle(D, F, midpoint(F, G))))
By power_of_a_point_tangent on B, E, Circle(D, E, midpoint(E, G)) we get 2 * log(distance(B, E)) == log(power_of_a_point(B, Circle(D, E, midpoint(E, G))))
By power_of_a_point_definition on midpoint(E, G), D, H, d we get log(power_of_a_point(midpoint(E, G), d)) == log(distance(D, midpoint(E, G))) + log(distance(H, midpoint(E, G)))
