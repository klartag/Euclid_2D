Assumptions:
A, B, C, D, E, F, G, H, I: Point
f, g, h, i: Line
c, d: Circle
distinct(A, B, C, D, E, F, G, H, I)
distinct(f, g, h, i)
distinct(c, d)
f == Line(A, B)
g == Line(A, C)
h == internal_angle_bisector(B, A, C)
i == internal_angle_bisector(A, B, C)
D == line_intersection(h, i)
E == projection(D, g)
F == projection(D, f)
c == Circle(C, E, F)
d == Circle(B, C, D)
G in g, d
H in f, c
I == center(d)

Embedding:
C := {"x": "0.5983573316365795591309506562538444995880126953125", "y": "0.84178756447028735276916222574072889983654022216796875"}
B := {"x": "0.443746020643480287848348098123096860945224761962890625", "y": "0.66167466991328482972534175132750533521175384521484375"}
A := {"x": "0.2266739977336859335199648057823651470243930816650390625", "y": "-0.299265614415217762189769246106152422726154327392578125"}
i := {"point": {"x": "0.443746020643480287848348098123096860945224761962890625", "y": "0.66167466991328482972534175132750533521175384521484375"}, "direction": {"x": "0.43100347013141851928915652792003487216875232688305270612392767452262360273708572395402505364591455499643423739618679863239797485604585348713670199584485574092943980590485591897645693462266781454778103971189522510282752046999373060925143677170231664530953682577827367326288069450732875275905446647366901902029982942675627928651171182173978672539020170944082131695304526476728249097968467900202980095797873156221903047364463623744922567121516329468366824747298186952684735663943681730305171184327929042955617544992811243835146590159588515472323735093905085383859284971507381637013552009880363676316950110649888950853792495599459501656786371208431642516151100736348429248816291315365968604038123681379851640782370347052897270514003232068897015494901354334567179104618139869972229100730817556782293184844700594779580446923731811878701204316169109825661219303662985444470318166087602820657635198689493837783125107090366105516546671081016740786899348799648901925978297394483683769589087447187779170335834021306558655296870525802248783910954358963800950309599870613126632352298465013437982770813568301812263064808368256509394064123025928541429828950887320214828073395540074190384441550492235860042589287460995763854837413304015552826417352699003331934669220117410965911739785180024331649762882015459906005684682583420100148663812808354235623810933329211581006436196724890518108641994704903189375171702796392698825512013976401807905357801705352457279354152011071533886355588367870329885674903282929939694297902217156100855226099773492717812323863557070835174489667294031642254884150250243576924348195969608532778642085854187480952648472904903588757265147001821244347511406022828608704294553789957674500071568641310657402101621090707465336634104818840257339241317549919411506822632902480625993985927394600956730159967947797830095061782647939734109840005341197250161985914502602619843808128529618668891572446959186460729345081554805437531738894602974741828421965505760525226428649012161368968725908717748209540", "y": "-0.21664228839700130141614784522912961797801915553937818660551226299732582033943449129378013385282853174639411421796079670743511063060728320896514706882038563272681608525320238384414863574692342277363993743140979990193114145692062354131233376941789779623620614685434039824648398264548649167470053469375699716238505036984737107716089171121042415562833458426344875561449276232170136200376023327587618243986680796806929141710886364578013694237964146796641601337089156092401938877874000196124428921997858608985161940556568192675682259548710875829402591006929578184735898899223684347398055218289433246911582998737779521507237638233102203457793065430938460738431163857632531176321564590318689722088863141906440284627829746363472467187838711196738271391171995332089529008677985577708403872945481462343256142310896744733407440181509306968950187891609290715950933452646438597478216223953812307482556568226992867107997130269171518082493028463977689506851970740712997301752375041348287968801977313595995836062885513662563994204180287089529204535623424881858805197524315587102304643749490047913366720734218802309001817435480484138603148810365926526231021915448755653165941860766779442209510145000840619679938488172804521754814775579556426767249716073407470119613892111044622553287891325796539988156189471405583360774184603859049030845794252147904132540804464678890220142164907541313714902794791961598245254936776403096329609982972326672403424964869563601031444788529521664243212129357547309270987401012744437505359828917332256087251868264241656977738901750762675913691450430477400718088556474299454104423671361249809164349931666702954312009969033309424914631084726584737634079502684039442232596172908356387619730718222399140458605120396586324699480992534714469836739504936117953213288235449047152923343481798678481088342189292664760632867705652900057603222616613680622172235262680376893927810581234931326881408342429276023782921238932496810613921408718175488912997072763536001050858247967564773073124142285063255525"}}
h := {"point": {"x": "0.2266739977336859335199648057823651470243930816650390625", "y": "-0.299265614415217762189769246106152422726154327392578125"}, "direction": {"x": "0.53006334403298015658092266480207544525223530373775548037806147179275181483317517563880243511942262007795293756600964026995836009171450141700399625605318487000255876079405187104172512622366320672408694318029598805398642099483284625386218447257800496660928544737626253289568835966427331065570922026760007879517498156150493769096701846664679648949918433818905521261999316107857850898381928030507378932056961546255108043464818407938967519200806424843546600845356000427772426980008107449587140022762119431114175092129873149834900558755454923155735054411374445948430546019351377760819598791709210068022153007570298651000555033913525657662312943981784579552761713091728144047802602404265907269963915033103648068671390596816715615701959991111573444447046171433833745252861681705101965367833461717330192094268025849327940290402339148592811236626930332079514427450104261603099909944334090058408102758124084456133480942565438057130223625092786953198601066136213335498044047030579562755970018713921933301073037085949286662509299616448684436507029899693274842879355109404746871307248624190505989082681083449050223418229355439132940502124407054600025917672341881614909782502817557694572441362836416231420402011371765698231202133401109634225471767472744308395718298346995498300333632203588495307352341909041560311338675276917124039693767394564595972729520325749473206987055946871828547803068732396725459669584392944941951888018242835977098634050127294347172245574407286290440601746288970530820721218582392452319764087904865105065323807700877526516779102497094351840011072563982003445137338918000304490799903173949129025244084628688446287340162889449055974389414638024880942122477651270013136287962287123510831032430464920379133790416240264534569745350763786726296680436944801918862871769850738342329046848832510951826300297224812448921363271773287343418065649939853797411306642127780203785658661194376624276085884169595472153004144041138815235946083737203569046517219243333306318728939804487445220384368043127020002", "y": "1.9262501952849254189567952768478394113507722696499305219494403645130559010319276197074557844053551626098170015797313433688156999535316997585316815785037526143229605359021250398742680981443835140048078638762517703797787400325814039253657460520062393503834064433348291278620631876030520467436482028155071953075913901411029095252660860052551959712988558825624886059756626642690485646933757613319949795264922353707641923627513647814736791247869758226055326309206371628912809604099022832032839156302786805966449713755507216195289655602143154042777540958926080242763259845496293606591067298149841495018353739390529891440082888243194353640169768528076500216987442826635512264214229247497308339737531107446750402497448116950836637350598639281371535861206329977303165003855592068908304625721372878044505213818364640395678665368823878436521395475917148040745729350388803221906688201187467351507427310830697663161561980453265334281672222070753975724913368302711099105489640555355125654181663452880920482102389259467601663000360049338988961197262095133765521669572985300375631620073713896787614243536937150114603696645207721764348310967680533702677019444115786459938172195801059746114723198420566505260328226698923470636098372039682399756445423655698527023619489709226476497818229366329496605616032440934157255471320214755123459459060321529970954172139505703063172200500361007536713657749055235874562629639008187679110954590612945294003196476053546057397164974054085409583888353205263487558626014564208814677474554611094560879419080900555741316980148594189538068573849614966353237420109680518408094709978049621437887534989911363097405938477542510740680945315879635585954692241512601275678605480300254681631882512052932371846809358110466258499068457769562549409115522122266659549846042067193751809224959465938158689390485266766366042545231438181102305231509270105722024287092463901295989651252063638795841950583815840412412270433764252356619205334788452037807711600810916264508582833837553626253041166623151614978"}}
D := {"x": "0.48534990460451039805022480513775828351745884508477263317177160889450028408638450634924282932103019916557342452939052748903164377907743512649545778496158967477335915521997404861201031221830173476044106488475530228655189845511302700575680941386276377881681723924669088164718960998292079275278710697738923664374114368467070008306266651462440681622737724444762751965695341992923017702007636089808141416368246517400728883592763486694902738849058852461489095705752462176651687906358410724067450437857944832393199766129126183572229537133661439532092714420549427605072024024831868942130623492395972526898482603713792983232739171745356804497701478356913517291778976851166404516860215378193125142699454656455255849846640616577657759165289118076554290634567330808396320630137718415069895681383306211070890935578257737745583203960895543638401411545375706334146462083393010424688155214215729631787034365138738366522147027407535915179850917870330386898107866943120473974045751346075010980314630026092590395817203584372509206958165940126684594100281097701958708372552572026061725881888572436475801482707299811012177845994275157731778066488690555209854344143014814405540416824634869717074071855650121444055228583302867106859816406136037450732405686227106684287527855004948685541180370236437116042485201769153655750061086762175476235812954235906984342693553374409471901790111222178836390235709346729115715947127771198704408663003571963472818916067073622423097863316431388307399549412053737705603078344419991693135069237960445947788292185604432168166604813761465837423204160243227840400504116834887067447610785476998317533442839289382375681661968252021819907188284538289209712452154580366854129613322403991442039420735287940443539889339979972655163329615174855678566330491130578334827815623290568892179602841126420425040383576354711411339079495245354681988987095759832492350989042016686858027903321165779722655050138267542596962349174455361080192887817625551540485133524266352303122818565290951646248041998851619642634", "y": "0.64076263265109612155738765433844596093626699836589914706648718467997772709597193019879460391656098434201009004519884430830245920318125803526658104183298586904563220117826057059769446222318146537781062153521656922729802244640836015478802105678264627058239174182129876403404338195278917834185528128024261593900515006932326866472123666414495300340003767631828205495250072704471287736865054923071343553715378085209066020154259617661812041117900899141441959456983286019292726598122424067893181044521765100222832146820005809591247278743684625559393899506912032992455053120216631710088711355620175821507768558075564203478661780170339495251315114894329092432304784249396591943104057004597119808602954567213987972903052210348011920467635579219976221551471539462803614672034419046035726272873461691979885935776955810821247805589222347831527597102152967094930466622494151421928602563130787716074683347369984309397442915991595790443613643749104621338339118566147799943075944439402724670257818220307683373321954750082860820465715710168222455674968849586206386624971063369106922878283223915549411679347155769758766010050673500766079313740380998802579116572983520675171286932715665015858860034227905425008907159180332580110617287247691907813834845447823242235150346116481126187312053798086869061637276868562296986445776105660686671961412792908741304594774939145520126101576206513182285462689192834828198508249153329981225184329529291872479940462742395042751940081283914482897411425263522448926484984876659650553318820300681334311570518361817501116457516646266108922041176059500568674312036296058051054691895024397047068597688591455438257773043125466889934027766510864057665111409662947764143756744795067214510381195073889105147645472840531583221938085153416434312544609386643565182165232143820051338961919664639486714623640202168842454840343059436821872092078841943733393756020481859692878192398589115507566614013024086332400010279702130356345622774178755099586627070074700075830906319633202531682725787037958874173"}
d := {"center": {"x": "0.51687313067003477202350901494340836206626561758958923620854937971701220815794714592935930606179700997612739877045113829527260302618170715780054072827490357816585600779950569502837778220997089615105495651855991912479148685460675982663389189514772373051395816345469906951968813611081927713641306619075048136799263236957675536000798324946538163415306256196719788702865169094084646787479300974792277519452711087525687298302079554356848388753828194076242971658027317563294689037530910405881508072110622909235462403841740231893875093341217940053099796297468396297093006512339294979547716449675477480891941720816208451718809121174106512889056803490604707052946768651375303099778107604852078961479143443033519301233869839237640694553162083307871472560035440283734521096762049081298072265131613012819932753551620433675849426726574135756617483738223274262551143190063596736465896217226258231336567334058684546821289025231895763126673140675009141303430020399804712443161205799868524506373618989207450353285928066391858240489900159706765433309243143387206987519554197524611926656351161749653362110861922141376059817562496284115512083910321171627006179879791021198078478826500759308987774645903981505782504171025796352538271433666702308861198926948120468606132047166151397663864999746874005670403146016761022590966959925302423226501696625531004680363116730427755162327668811228306115593070376796021683140044614411965124875871335951112917934555282450382907343568747414306329316235158240954544363904636823187517647303489873662029684375885899105257026381288220287269145973915220687870111976128703657083627967607445174210163136135116211582700363959133267604461491377182951514950452075542133405816002171009796094612399423688912998438596334771638817398769740906682996694170863360124932668580637952457043018122862337302478445670769322178905647280477243633884683095650772009751876200865612695396769028016638131101684036251743300172885569688557108967522124828073600901236965458735456825907046507260098756113190405371931007", "y": "0.75531803635573169693403781899487048802567457905417552505954057848249985185574240780787600511303065799849193814423562337155073750091314929739052863134267081782126756313514823035517969289158467131702820088502023226486773862002085757265760709649993168140540338542999468941415130200648996950782983113037524431733487019743290966640029242451463413764510901249289925013225634747897519492534196800492840409683226225098353146495472999958246241460618518944283028160991933011967995960585376452765421103505843631790161944506102396045648741627554836626272172274355647808685378476201969148855162515363571863679138614161781532307401660050407285023309761016438712391836930687185324188115738038278609588769048849483367146686833680554256091151274159905338599163976476336650542193583260083054416544577864081484052943344428729505847396758835176176028658310561431566376125234861181861127516574506511357416831323980956280151432657947643039932061656379211911957955834247288442277898501846577242807286194092791704048777495020557325256701456734045972873760673426404859902733162283718238239225274775351694628966909005762252341428333428257620233319377671538771866597833575399188526496973409879681000774982741956724420183205026401157493987245815404084174165221154202279672880830625660002104186982977130487070985871672536841093404924475609068588724263495233655866537171451612029456569868169273749400155916368187565876908709340182326580191796862863015459854783969644252644349300288242404209755089253991792204943566576941429330068186373576094855497211380658382637321125234012807411237460755608970463234544499803161535110436448577250102229274583016258430855756142946672586321194832794517646992916979790774598265966424745125086607268671555830660599128026976280174495606807946322615320792228866460706600992085482500633668128834382734000436085100929446105581012454684561617360259349358487768716858287197934555460247360013400446605129585958413174470474354984651959792492358127944391834148094788114788089092718701682868441478204718328389"}, "radius_squared": "0.014116654299510189410159522691309624464474174994839465339246286568817037256733801337030936483139512040929212797695046083051879813356189200185084420098202282913327990631286123965758297872506920279831061496329041733465036852784099927441850405764737231203554205230836427885219522018699707179217947835383006683036394147436433305100958030372304010166430950762270707840178412772655811374938041306907858613402139370354890351984563909749335090652781058445756927516664365781049874670078545808474252230838736788277192886071083846851342417899700093137757025922384935078219886616953867232517200463162226910079094988307061763352862278418680874223308221522404432112692569483317749223606614248198037421447470158236215695075580586077687664675192154496125237629319517571668858544587036525654146785928283803807999771310218626910407483220774100639877248976857279475515811219180168575125511160061875680937829761697570273302252590615707664104808008003600156664509009802631476526740576875431299445259464346571131897427548078863534383650167934681546244853394992086781060449415839594375893125877260482723340878706883906578198367984613466652038168158984004667827860930462742397362840718777063453978423143040193940973753514424926399270274012520525202007691167840233895712768751098295482705905320449562853820161691016150442675814591925919183671979259244760613003455850482207521157308861538261350347371256273183746826519952852494774730218757504707822225599850110306693191683352916143634545220788467067713489319903595859456838234960742041527119281547864451170462025561091811957285201197886156568452392296985259701628262327324977217062727311848185306725900579380389406932959490424859289104696619549766374139525690027291134775280976791554059821093773344150984184565729406822179109358418574487331033876846632110576836745999783722018301785225666155224722603893637827695797063089696828076277592798540716230667302236795748610108483012475144482808952055995279652340572168588760463887239513676672732326761276423396373659821612437932493856"}
g := {"point": {"x": "0.2266739977336859335199648057823651470243930816650390625", "y": "-0.299265614415217762189769246106152422726154327392578125"}, "direction": {"x": "0.3716833339028936256109858504714793525636196136474609375", "y": "1.141053178885505114958931471846881322562694549560546875"}}
f := {"point": {"x": "0.2266739977336859335199648057823651470243930816650390625", "y": "-0.299265614415217762189769246106152422726154327392578125"}, "direction": {"x": "0.2170720229097943543283832923407317139208316802978515625", "y": "0.960940284328502591915110997433657757937908172607421875"}}
F := {"x": "0.44127135982418922719406256888679398750384451669094097216946343579689740220974152002187910861265706707541426424410509296488209092307858219314737046236372901836119661653139219888921350584712028996437614453693317306092745335816095396598854496209686646747396350968032072487670860333069215705881904728512665294620331054461911442559700744302019059654335339547471931267886708757501019183285176025041771082651488269791741692329901643353477067470758140589431451686385853742909605852583549011282939655773625369309818410575963838997146635047554442265586397808022900143440023952709280698295646209231404353073806774226741614796123889770245800165791528079083394884803051266591305424873123342554340481676147393079094867857628366767625088547246519945677984822680883577357986482444009149679786270570441163699894095905744074516182789244518136567326208645884163243549620374392935064688827797352824224829772387601640463395426643109262406079610018304751868241870559485559864771230450402703378884040536974034425006070436804618191724613537703213581473388331371033880220730856839995547526017913689050374482903295505181186592231750078947595020639919016939075889444955384469863435815926014762057877360579279438045999772719683663181327119458811503179442191033767170199947064741798300357616011814264113483841414180011768347407472638313635343047811760483476570366803607693864698566766120780993700111095387451670207723031865459428085108958690268999909362027496399017227207574652762166512487332341053321540645622547863767390770656235262026427509942613857968733767782513544066367570337756853406078567699522189811218997036075739350486294003736097688921058076743634264961647578215645280692812838930817093425762792281657281570152410573918347291449220551123442376247841118907583896170050073522545830850983658342780829806185347010445186670712711527310241708360630221853233667648983543248396729467011888472097793409688981748964192960585762829654394934877384806725269870570987325647468180926278463342947754038014638046265242769834024266891", "y": "0.65071977466962484690131140906743782314758745924755336094596506482191943878050622787984587564906117727516317261906733674939415677396173127556174850752853790155240390602303117362465724932456306589462669127337925589411246257292862924052164511091967104395483006514441794219320344888438393249604129064244684190412825156882498187462584923534451442289862521757767999659083609122486158677956080158436096112957208318364787635904687072661555691100089182264192255349210810824803430989443629486497878712418707576336076063939632293165869595505440015010417341595837023808224256986173223547078573893076963878053613758880683234764760555099203014710292754403779663232354852959212851098674110848946466301434790078130850230675664514938945879211828663812102575201160694825002650700991741429332695259225022964895042672615389493579013840951673297488900923129603223656674535023430264248033822213403725678417030357767682125696469472377549446148606000969951784328029745528974303951660747069166542789091381800738309322479979230436895143469922360280522861846853990857805701744563507692694706736978174957044690451722230808618670182439460774983495235524260014755103984216750184514254245199477248849149853468520188317748345408036782363706706253653995563539138109742953216801840988139718099792718522672679290887333192290890608049619698117850080943854849753141504729969865112897199864016134805019717117003138157868311657077422813440591493477142920324225697536483837273514086654533353221432427135597168460234031035157766595308047975048750698755320550745486157682953092083100240357220624911141153416504008876924511173762679876244823263471768904678691741049704116644490874219768999398742626242866677926652760062153269298072036983606031404307258840757932617594934967843436975943452092903902315102535553668493562781751633461775659541402147966505386174760404732998897348572626430741507333044580588594126062419971305555603547376827828859800469104077630322123606248979875554421730473377876700580374556924537569130404252823807638703900975444"}
E := {"x": "0.52831704363305382634393238456924700388722268310618416156869325275237633027078214417815444019184087598347516918931598788830738476736067185792924397490630373357511165794155628665192466333655780561539404260957719053463497875586003659528133509022053255469126149969015843631040527189493784547670331317970614381046202430759876642039530650827580848520676709144765361846922216674238316473513541171868108988802910589969940604175651777818396785948467106985977946190763116361633709363809525503437864892038038205364616551593951593543150976331328607594815557445535391302726283552997118131489812542411206300395808770794853221730779989335664826261861528678844543221812922202457638706734943916594599231056500824620650410861409279705141431358362585128805954026931156458036548216619712765455453861808221381446787922970602064423626102103396338060398007296528877032910480731606295393808765011746397942371649516844467602627586922602642081987494772621669620772572957606323082035395906149128758682631426616243791033616323980091521047763757556308706140317380494955811459935092701511011785129861453820263792024208976572977215558184951378814198200560212519452540843214466440148726604448683416225877276962307886187888498173560675834107772332910525161086473066875611982434931529710655106613026780536558093863351795077807659969554091707882205139674216369531478861844017050183273363615037773510132434099578055048494944835511106840586154672977008178334520000700459340731802414802975156015624587120543212492351000681749803526761923545338207207388841057429340712500910776294762225352008777000830994706970329277150791814266772707908467676092870374367282462647107779683865775807561150399044513350278817165770451949500138195996087053923142628585777232119164263178001695395095670248965953812590469974741290300531447257029888276943601310554504666423580266434582421105156657272295438040431269002547793919980171087502074980341822402063799166493341834460259271885836949537756283160118025017078948517772335750303674844319197710261176748774255", "y": "0.62676664212417202205450141472921443065383577031864167097311291502051396235022002296696261808646533312656411400185997576758903271823416409449875638622196314695723807857152012406496040640159372450177466718149611750042508674314560692266836260208915413282209506684236273776453514112559047449930782612853909572826192776910985767059625975660521794705445182704904765151208540891951697466936570405563126551587250503341704349610150976796159686410967096127242213162890422850813889227319196318632409322568713566905639988082934172727366436858793870485291596041432232028103109725227688809849575264852886101775500150764067574997913432520212349783047972856352740772338551052236483849567506933722233110636757950245913875828687192658222840707230776008719720731500606942806966117191913774066455079747652649394772874719749142357346370982267049307457747862731425109526164192953197661901722231300389239738682212205601063738957673878284588623845380676229509891989396580812784400315670778312203866866974389157591914114493055753582802046889603605656494373042084667623769172379068442396158883955361682710285651449730215975810148643188650791759891808488165248614169418794127255821068031083863091820076130712225753726206643027870582130221721088799962414348148808500498191174815987794332952653211949290773718847446783209455493200747189511662840483862004392456253843193558610329123585307191568087872720471457527069424955222587666881756036222323434971649822843303888802261217159717149103059895303344504105856265456418587500840213505514822221135969802892154369333693667174181986057384933344806066815404428727204907535837526583846147706350412590949943988008253883176483919519193392336501785182347209541222729335777554521654023192509533779383899127170309663855416994211548970227589995048728644036410939339620002796484652453993459908972412061542027064450118281685195228637294155820242341508950454563765944337347587483358230634406142303780909845870761720634037200965459694425231540234448540985748307755047006287139021240231170808707394"}
c := {"center": {"x": "0.51538165117235612637145574810080984138328385303727938261539055885934796284711305352448088502890680503214624102174211295405527969924967669679930582478656861843813981251139263858075844666141694949129310940696112010419640743772389081301189438776127486689949737957932404244482568982496626241938183575756560569397902689073056556145633256881766093926032688565000582385117608119392123510439479200550139005018881289558388516824304494266110980357268174196192866494040542204240660981729305065920917562020422215776375725912927117821028357187352720787331781797710438273180355570011099637287391456825659994934062593092003688274711160174695233595703902431549846460974686916334547143286475596529618075886981215454959009227119303420542610203222684732655467185108916598739672160325199521419923486398931812184180394814774705523642901314188018560406930004063753560428859654530760192353975279210219285515101286884108030508751122102328379791181463647247084174173284049539901214670440566569745409697159288572684575120350486091157338636200479507369529392510758672309180874085363781993632295781448983548784058178659269969545966287006104609435949659666095730422548270732490417198059113936702850178792582821353184905898940561009643961602950895601596512891788818726915764483413979244060584475792376246277558624826868255690964667368238535338584207125219951353679124443946444509927762630567442334136453227990076730277157751122267123532409117090138388622737985045411022946606207187087766918524650840557993452478372683658270238442265738358495505438704596446793467726998878147549934263582170463790230367230266202990000856414820245622111064046154224457819194162434129423552242423458362469439048495663433350953900886590844339663785440111477671905963556510762752821961303624731880022873243603168627107104961900475253587539449577875085886521312029628940625261217477316268762458919202956022219092815970492761972628769298035278536951157301353522290537033658437116885199849170286124934192123803075276292957501750226224217823302661090507588", "y": "0.74989799985253180767175520170997160509040731652901713343266479339625724133399716037153286507082311415375843587526723208118592277936427080029223178959541872864874169230905443004122915260117801483822735963415606721438524429440072109111100860229063088105403826972697289741499003120501277135485667731184427719353574026277159103997469299473479470357449972895231036680651403184799614707350809700543450764851353064040110696021393243635228160898270021656554307599563848904405985302816284366494445167449120042122713084109303201128484005030900531587803193945277393323460448489093731047800083364573152638442235305358105634751024706114794789656852554843694702555811042961449670059815216883984887690305726732759091273801083321446941499972619141906786448510974966521406035122744951122154953450050393786470696728954126606483135506059744086602043346430458832014908778728107852736686162704057120039686664437243056500216065083028173237633700939198091869810202403628327230648639912560733134393882791635026713331497508781401223987987636258363446999072291364775115721925892890640482354492655643124448397922309894313403601986346138236162664305668400761096208011657344417810031921584818930450196262121027469929767494748015220978691163347572800875086188530403605084748220303711181412818163120294113182933934763695900387963336966966134027041695814488407031423702667786220486704656045100476839895029773464455761359997520572599673860315743273404880403103841506784157505625493528679243398475562650072991001697220250487158587356684161496041345913762572853295863896762052936613484462495603861676707618704849398535116167610324225190139674734484952886185273611817329617297287905424955560040734350766766068137468399660103895121567143296622621799245647531605377468922303238773181138749189190611297710140802334444973375068325293017410925437370680693690892251639020407942153167249325767995013691949616875750076051908294912071764630214488073235405840088282289893473425892523194272959573490792433958222579293408903557340323388888743587922"}, "radius_squared": "0.015328655634141582002598179880122584183164039668884550220991118683716993037421530150301510789093457114223829015173722175563670723688115859419226589414642527964346908952030572452864564213382587943681968418370927337956247065287138986891163751033738582885049261462973347386299249625048104391046793487756672102947712403952997471155729224119220825800403193302495501343794313019516280705974405654802756316225622282913050308222278151534802217987845576622838199565053824023275154738148412579405836492872472947716873814136077631264313055577303435813268345556485141854928166686182260644679200738223693030368016740914739762284570297088891394035318624663906064598711199175306155521142025546798420498487494963430374296120055401765225549034373731681954571625399065289879977675178909091211955759821503953618343482111074856437675028254484108349917262897017859853991031191649421202263303457357919182938686820701208351598557479128059289615003309964705623056279277633792155848403871823101442005043901785577568902689909049156578888465067690238190669470523134556649831910822037306591939590986633643653507277421347246425959940047931811335336542596905767243503000299104670674573134355627169838699187218325407871124734591064161485827074191192996888785034477918370802624063063157883500469326177460209804552592216070323911112735779957945244317891434569903138448638655550225164526989496194040609790128060723561634956531124294387611635779799559262054923241167648564051159105153038205668941793565856942615126285452348724996831457737115167570397460445048263853371830188548707637190873532503413563323753413221116911516242794389947660509587038774464455625631180857163789997468417961471693333967875890463351274355824947519732052401939138128671961881696224619462867157313738313662056855151113405859616607976317051135459208816308891893210125438030203486731399646320108550733667179489673374862077500438533750780757124474476182185044003124716242646381795295991097381579940209701214268635814097855159667181034517754599857262651007807697743"}
I := {"x": "0.51687313067003477202350901494340836206626561758958923620854937971701220815794714592935930606179700997612739877045113829527260302618170715780054072827490357816585600779950569502837778220997089615105495651855991912479148685460675982663389189514772373051395816345469906951968813611081927713641306619075048136799263236957675536000798324946538163415306256196719788702865169094084646787479300974792277519452711087525687298302079554356848388753828194076242971658027317563294689037530910405881508072110622909235462403841740231893875093341217940053099796297468396297093006512339294979547716449675477480891941720816208451718809121174106512889056803490604707052946768651375303099778107604852078961479143443033519301233869839237640694553162083307871472560035440283734521096762049081298072265131613012819932753551620433675849426726574135756617483738223274262551143190063596736465896217226258231336567334058684546821289025231895763126673140675009141303430020399804712443161205799868524506373618989207450353285928066391858240489900159706765433309243143387206987519554197524611926656351161749653362110861922141376059817562496284115512083910321171627006179879791021198078478826500759308987774645903981505782504171025796352538271433666702308861198926948120468606132047166151397663864999746874005670403146016761022590966959925302423226501696625531004680363116730427755162327668811228306115593070376796021683140044614411965124875871335951112917934555282450382907343568747414306329316235158240954544363904636823187517647303489873662029684375885899105257026381288220287269145973915220687870111976128703657083627967607445174210163136135116211582700363959133267604461491377182951514950452075542133405816002171009796094612399423688912998438596334771638817398769740906682996694170863360124932668580637952457043018122862337302478445670769322178905647280477243633884683095650772009751876200865612695396769028016638131101684036251743300172885569688557108967522124828073600901236965458735456825907046507260098756113190405371931007", "y": "0.75531803635573169693403781899487048802567457905417552505954057848249985185574240780787600511303065799849193814423562337155073750091314929739052863134267081782126756313514823035517969289158467131702820088502023226486773862002085757265760709649993168140540338542999468941415130200648996950782983113037524431733487019743290966640029242451463413764510901249289925013225634747897519492534196800492840409683226225098353146495472999958246241460618518944283028160991933011967995960585376452765421103505843631790161944506102396045648741627554836626272172274355647808685378476201969148855162515363571863679138614161781532307401660050407285023309761016438712391836930687185324188115738038278609588769048849483367146686833680554256091151274159905338599163976476336650542193583260083054416544577864081484052943344428729505847396758835176176028658310561431566376125234861181861127516574506511357416831323980956280151432657947643039932061656379211911957955834247288442277898501846577242807286194092791704048777495020557325256701456734045972873760673426404859902733162283718238239225274775351694628966909005762252341428333428257620233319377671538771866597833575399188526496973409879681000774982741956724420183205026401157493987245815404084174165221154202279672880830625660002104186982977130487070985871672536841093404924475609068588724263495233655866537171451612029456569868169273749400155916368187565876908709340182326580191796862863015459854783969644252644349300288242404209755089253991792204943566576941429330068186373576094855497211380658382637321125234012807411237460755608970463234544499803161535110436448577250102229274583016258430855756142946672586321194832794517646992916979790774598265966424745125086607268671555830660599128026976280174495606807946322615320792228866460706600992085482500633668128834382734000436085100929446105581012454684561617360259349358487768716858287197934555460247360013400446605129585958413174470474354984651959792492358127944391834148094788114788089092718701682868441478204718328389"}
H := {"x": "0.49109999419831004211311216593808648344913405383094408715349129355427241362209468094168579533740785469274928525972210550877745353927079020713603739030748752134195014405818296655091587553972888117704418026678554217319962072286702657447884629320702313769734304463411118120135800968623716623608576499589363666240176900483930151338714014907553216441295218731023937526799381432662166503146417963768808048420394924477879729224791589456849334814863906861595284826968191084809311302693426499674696098612599052368278922144995828737876376244329415097456519942414803509416222963304856991628531604812114149086647402091315802566455948541877123017574836637274733508395820191341825213650373752955452952722037245510259684640753634657929985538088756073551556059695211993867769295517541426949075387180178723170149141735024460756465394957642276315716763800802298145214162523959696204012249497851246484063378252433940764992928655381421860264532803163238613338232722357130835161511092074205227527990012300926425956460998955970861931829268121839358721121484455669258176026783132267710366816695968019525453305045459001980653173178365325343587696312306614966530669016938082071547460004513089996103095943135973453153047004529785770304376514437080560804243880195749267629807216644047947760185491912990936330222993590756512127372509282866304894407041008191375148212333458771361921743852830280768923773438568119935220907080502069907201085914110811896264411387714798587944659370567238247142491466272919495934726858528496987037300782135048877321667282657382232614856798999297128904404383146091103411807626525326944345385917953388305404922163930981259121206466262297967754477752663177984338825428825569127652553127681255878116885762904391092485937710674470691127810594823601002931450109205622442334989422241181824015217996640375574639381640937573705203423096731727701075988978464116223392830876311251641795088803887502623998892983426370977099356698305385703376503568314009999890539282164154377012316180859823260110262195757183322389", "y": "0.87130251693792011391708631568284790807200039649238403194485352922959586207964040672747712539479964124760960679519401764137894620218347453321876982285119388493917971718868754985106747839589802670808083557915401122301400589507909472824342149187625627891678379776223505242412901390602777009750401043796464159334342506411727077414215002786056758085222147657643141320292892250021330244053316701758854220267839039738436887344673504564517693936003441919942642401584879646926885218552661506958052487673706917768641135756154729805699907064429027367669220818318928383481622948372326997905325639840697367472834205480817009894819073650563202380705170859467494291216201760243633083333000963088414727820696754377286248704954311250671634892604639986514542083495548085095717078818977212840115653620229809400534467827471922122745831393255099135717775805483850377968552206788660470475177098443582765538563113570779363864381654916817238551759055072723898732040924479081841822396456596415390150911436051247362393334930757310474694989345192462825130808323734567537818853782618977009014395450181994632602167966512835823110186248326159981927140174345687052603731772271220506554123928819806863434614207204424287432265039649254245899273130201129716109261836957600807973023114134716729495678920612533151465408072355999304788650085708155328763051435931118682274806600361448407331844857664284936770730924967751257463469967640671821394067546880403116840936456641587849397102873447907635237392008403710564325421571268827167829729650845610269755638798245419484179412628899747715216175742542291980038767213003290082387329529149693023464851853203898796679143679336297083762276510836787487999399556623980289189676002914932435258733272132220516140251000760318657985705084582104537187897052647498795645606880144131232388569755853086294151871234116929808019074475666883250513637988055907704492052143998360459360194659464022418670175166873338257905437833719048671257840972520287029455365864039663965480622958223100372686606467493805877956"}
G := {"x": "0.53179548446674855932596394328076353754849779999613415682467015827128540216352521499044137013266343267443360487580641868137665431685768735019494183262254739783611062143878526130708617710934204212722674647312138976525515129530501595609549703277031434885114407226662371893832720228873545466125477673093284167128371388701051954085786415878342359993243862800283046445260243577648695435851120645144879803593802194104678946000339768036609720659489697015651937268538575188883445002881577610883684222336337294799112862499126056349397131812634027346891432910583631927965262606581088484501107077838082538355416946325817987759756306304735718126434684637729726085892340102627751554123509522366805133595718676157955395067562597873818498909497658758539097387838247032243363357472977631069057331784375750655948396375805972897355996585891809546864418391935654286897094172926200526044397935511361262710012000431479275242344805342766380138565247467246322668478163998481517495977137276589730854635372757029850098098053091073679205722028627044115287437670462432883599704258588612793283550200513104704101432268859313082451257681234579900208236455791417066599782442283018903356741497743675584302252070601320417079815944650583655188715893016566240060506970824520349725609106342685324107046765198013159629326233663955193589265744900427415033233062395749020090827557680149216797072907065965591649493886828320008168816729432093889326994161075858492316359991589059325663045544172319190714649223140094444184525742315715075307125638322565541154308106741139356088947826518489706805506686274352761760130058742650952981307172978841810191359185948619089088930473062595201482706932997197798647980579224082549387193391311341334981497275308226346354646082888214385997430702088977750393128794587636900864508708368269486610034734941742888792144766176518118678659279255996470009327613832556641805761845089215266023056579900787113958872769902241599872493527019645756206535002768162911978651556380040000144946342713293066839914369244242355296", "y": "0.63744531832193097034828167192238270406247681226794948853769167102851494744296791075090239222240436927594176929186238968415233310668775234993227270223589730532044799261269946614687939023779143851312943242615166229608912555245608330816697850813069621160266847737489653683000742555376570426625216074635208944839545878775147226925096169382397355161399826386766988084219191706379788607409003413593409354915395595555604862377689498195541211800872098042423064593411936393679421730983480432088448979602773371598797188086361736798793106069064533058123179029617370034994263788135964133126362309306162414199376065382249415342881258472874947935940626580244938899770725719369055377155533767482308207537797113169053536855778897528796378562128100512696951295992497756270111689904550089460101661777521993094764270545378503870207854788820546362973344424290034639287214392983015167411616344858711610046849446836032954564627757241264860657722706454772639230737794020655236969403885129539606261633695522078651438189470056252016910177168383963801596467132483130293325717599726008019466721055229969155891205077494892869589315275890033931804941583313794395204915767720935610576683392287243031606128493442580997442002235118905491171071690054082995412784919705755504625745312608723344787628796287221997266825875863959782917030497215313035100016691576138241822059468782652067396135754304666635087897093336284391275867238696622055840841228315311592331806125315956920610907963924750592290195725543744982314672724332244258273583820122901511475742783169166589286409955046049293346097959965710552433710645271619064812725098159505232273047926597130980418797077880641164313305339375595259589735205771479634177773965713347132671635163546137928540825940403932954790476349304897479441200797057215363926411638588341602708822272752851291009408667885438666588562126183203728327871433591817307931254791369018013153115630122413500999560021571524194995957678367794242718097865610248860288768563145417030583616693110206735945240535117762279150"}

Need to prove:
concyclic(A, G, H, I)

Proof:
By line_definition on D, E, perpendicular_line(D, g) we get Line(D, E) == perpendicular_line(D, g)
By line_definition on G, E, g we get g == Line(E, G)
By line_definition on E, C, g we get g == Line(C, E)
By line_definition on A, E, g we get g == Line(A, E)
By line_definition on F, B, f we get f == Line(B, F)
By line_definition on D, A, h we get h == Line(A, D)
By line_definition on H, F, f we get f == Line(F, H)
By line_definition on H, A, f we get f == Line(A, H)
By line_definition on D, F, perpendicular_line(D, f) we get Line(D, F) == perpendicular_line(D, f)
By line_definition on D, B, i we get i == Line(B, D)
By line_definition on G, A, g we get g == Line(A, G)
By line_definition on A, F, f we get f == Line(A, F)
By line_definition on H, B, f we get f == Line(B, H)
By line_definition on G, C, g we get g == Line(C, G)
By line_intersection_definition on B, i, f we get B == line_intersection(f, i)
By circle_definition on G, B, D, d we get d == Circle(B, D, G)
By circle_definition on C, G, B, d we get d == Circle(B, C, G)
By circle_definition on C, H, E, c we get c == Circle(C, E, H)
By circle_definition on C, H, F, c we get c == Circle(C, F, H)
By perpendicular_line_definition on G, g, perpendicular_line(D, g) we get g == perpendicular_line(G, perpendicular_line(D, g))
By line_intersection_definition on A, h, f we get A == line_intersection(f, h)
By line_intersection_definition on A, h, g we get A == line_intersection(g, h)
By line_intersection_definition on A, f, g we get A == line_intersection(f, g)
By perpendicular_line_definition on A, f, perpendicular_line(D, f) we get f == perpendicular_line(A, perpendicular_line(D, f))
By perpendicular_line_definition on E, g, perpendicular_line(D, g) we get g == perpendicular_line(E, perpendicular_line(D, g))
By circle_definition on D, C, G, d we get d == Circle(C, D, G)
By perpendicular_line_definition on B, f, perpendicular_line(D, f) we get f == perpendicular_line(B, perpendicular_line(D, f))
By circle_definition on F, E, H, c we get c == Circle(E, F, H)
By perpendicular_line_definition on H, f, perpendicular_line(D, f) we get f == perpendicular_line(H, perpendicular_line(D, f))
By perpendicular_line_definition on C, g, perpendicular_line(D, g) we get g == perpendicular_line(C, perpendicular_line(D, g))
By perpendicular_line_definition on F, perpendicular_line(D, f), f we get perpendicular_line(D, f) == perpendicular_line(F, f)
By perpendicular_line_definition on F, f, perpendicular_line(D, f) we get f == perpendicular_line(F, perpendicular_line(D, f))
By perpendicular_line_definition on A, g, perpendicular_line(D, g) we get g == perpendicular_line(A, perpendicular_line(D, g))
By perpendicular_line_definition on E, perpendicular_line(D, g), g we get perpendicular_line(D, g) == perpendicular_line(E, g)
By line_unique_intersection_v1 on h, g, A, G we get G not in h
By line_unique_intersection_v1 on h, f, A, B we get B not in h
By line_unique_intersection_v1 on f, g, A, G we get G not in f
By line_unique_intersection_v1 on i, f, B, H we get H not in i
By line_unique_intersection_v1 on h, f, A, F we get F not in h
By line_unique_intersection_v1 on g, f, A, F we get F not in g
By line_unique_intersection_v1 on f, h, A, D we get D not in f
By line_unique_intersection_v1 on i, f, B, F we get F not in i
By line_unique_intersection_v1 on i, h, D, A we get A not in i
By line_unique_intersection_v1 on f, g, A, C we get C not in f
By line_unique_intersection_v1 on g, f, A, B we get B not in g
By line_unique_intersection_v1 on h, g, A, E we get E not in h
By line_unique_intersection_v1 on h, g, A, C we get C not in h
By line_unique_intersection_v1 on h, f, A, H we get H not in h
By line_unique_intersection_v1 on g, h, A, D we get D not in g
By line_unique_intersection_v1 on g, f, A, H we get H not in g
By line_unique_intersection_v1 on f, g, A, E we get E not in f
By circle_radius_v0_r on B, d we get radius(d) == distance(B, center(d))
By circle_radius_v0_r on G, d we get radius(d) == distance(G, center(d))
By circle_radius_v0_r on C, d we get radius(d) == distance(C, center(d))
By circle_radius_v0_r on D, d we get radius(d) == distance(D, center(d))
By center_not_on_circle on d we get center(d) not in d
By different_points_v1 on A, B we get 0 != distance(A, B)
By reverse_orientation on E, B, A we get orientation(A, E, B) == 0 - orientation(A, B, E) mod 360
By different_points_v1 on A, C we get 0 != distance(A, C)
By reverse_orientation on D, C, B we get orientation(B, D, C) == 0 - orientation(B, C, D) mod 360
By reverse_orientation on A, D, E we get orientation(A, D, E) == 0 - orientation(A, E, D) mod 360
By in_imply_collinear on G, A, C we get collinear(A, C, G)
By reverse_orientation on I, D, E we get orientation(D, E, I) == 0 - orientation(D, I, E) mod 360
By reverse_orientation on B, F, C we get orientation(B, F, C) == 0 - orientation(B, C, F) mod 360
By reverse_orientation on F, E, B we get orientation(B, F, E) == 0 - orientation(B, E, F) mod 360
By reverse_orientation on D, B, A we get orientation(A, D, B) == 0 - orientation(A, B, D) mod 360
By reverse_orientation on H, B, D we get orientation(B, D, H) == 0 - orientation(B, H, D) mod 360
By in_imply_concyclic on D, B, C, G we get concyclic(B, C, D, G)
By in_imply_collinear on H, B, A we get collinear(A, B, H)
By in_imply_collinear on E, A, C we get collinear(A, C, E)
By in_imply_collinear on F, A, B we get collinear(A, B, F)
By reverse_orientation on F, I, A we get orientation(A, F, I) == 0 - orientation(A, I, F) mod 360
By reverse_orientation on C, E, H we get orientation(C, E, H) == 0 - orientation(C, H, E) mod 360
By reverse_orientation on D, F, A we get orientation(A, D, F) == 0 - orientation(A, F, D) mod 360
By reverse_orientation on E, I, G we get orientation(E, I, G) == 0 - orientation(E, G, I) mod 360
By reverse_orientation on A, I, H we get orientation(A, I, H) == 0 - orientation(A, H, I) mod 360
By reverse_orientation on C, B, A we get orientation(A, C, B) == 0 - orientation(A, B, C) mod 360
By reverse_orientation on G, B, E we get orientation(B, E, G) == 0 - orientation(B, G, E) mod 360
By reverse_orientation on B, D, G we get orientation(B, D, G) == 0 - orientation(B, G, D) mod 360
By in_imply_concyclic on F, E, C, H we get concyclic(C, E, F, H)
By reverse_orientation on C, I, G we get orientation(C, I, G) == 0 - orientation(C, G, I) mod 360
By reverse_orientation on E, A, F we get orientation(A, F, E) == 0 - orientation(A, E, F) mod 360
By reverse_orientation on I, C, F we get orientation(C, F, I) == 0 - orientation(C, I, F) mod 360
By reverse_orientation on B, G, C we get orientation(B, G, C) == 0 - orientation(B, C, G) mod 360
By reverse_orientation on F, I, B we get orientation(B, F, I) == 0 - orientation(B, I, F) mod 360
By reverse_orientation on D, C, A we get orientation(A, D, C) == 0 - orientation(A, C, D) mod 360
By reverse_orientation on E, C, B we get orientation(B, E, C) == 0 - orientation(B, C, E) mod 360
By reverse_orientation on G, A, D we get orientation(A, D, G) == 0 - orientation(A, G, D) mod 360
By reverse_orientation on E, G, F we get orientation(E, G, F) == 0 - orientation(E, F, G) mod 360
By reverse_orientation on B, E, I we get orientation(B, E, I) == 0 - orientation(B, I, E) mod 360
By reverse_orientation on F, C, A we get orientation(A, F, C) == 0 - orientation(A, C, F) mod 360
By reverse_orientation on H, G, D we get orientation(D, H, G) == 0 - orientation(D, G, H) mod 360
By reverse_orientation on I, G, F we get orientation(F, I, G) == 0 - orientation(F, G, I) mod 360
By reverse_orientation on D, F, I we get orientation(D, F, I) == 0 - orientation(D, I, F) mod 360
By reverse_orientation on C, A, I we get orientation(A, I, C) == 0 - orientation(A, C, I) mod 360
By reverse_orientation on E, D, F we get orientation(D, F, E) == 0 - orientation(D, E, F) mod 360
By reverse_orientation on H, D, F we get orientation(D, F, H) == 0 - orientation(D, H, F) mod 360
By reverse_orientation on B, I, H we get orientation(B, I, H) == 0 - orientation(B, H, I) mod 360
By reverse_orientation on I, F, E we get orientation(E, I, F) == 0 - orientation(E, F, I) mod 360
By reverse_orientation on F, H, C we get orientation(C, F, H) == 0 - orientation(C, H, F) mod 360
By reverse_orientation on D, I, H we get orientation(D, I, H) == 0 - orientation(D, H, I) mod 360
By reverse_orientation on I, G, D we get orientation(D, I, G) == 0 - orientation(D, G, I) mod 360
By reverse_orientation on I, H, G we get orientation(G, I, H) == 0 - orientation(G, H, I) mod 360
By reverse_orientation on F, E, H we get orientation(E, H, F) == 0 - orientation(E, F, H) mod 360
By reverse_orientation on B, A, G we get orientation(A, G, B) == 0 - orientation(A, B, G) mod 360
By reverse_orientation on A, I, B we get orientation(A, I, B) == 0 - orientation(A, B, I) mod 360
By reverse_orientation on E, H, B we get orientation(B, E, H) == 0 - orientation(B, H, E) mod 360
By reverse_orientation on I, H, F we get orientation(F, I, H) == 0 - orientation(F, H, I) mod 360
By reverse_orientation on C, E, I we get orientation(C, E, I) == 0 - orientation(C, I, E) mod 360
By reverse_orientation on E, G, D we get orientation(D, E, G) == 0 - orientation(D, G, E) mod 360
By reverse_orientation on I, C, B we get orientation(B, I, C) == 0 - orientation(B, C, I) mod 360
By reverse_orientation on F, C, D we get orientation(C, D, F) == 0 - orientation(C, F, D) mod 360
By reverse_orientation on F, H, G we get orientation(F, H, G) == 0 - orientation(F, G, H) mod 360
By reverse_orientation on C, F, G we get orientation(C, F, G) == 0 - orientation(C, G, F) mod 360
By reverse_orientation on A, I, G we get orientation(A, I, G) == 0 - orientation(A, G, I) mod 360
By reverse_orientation on A, H, C we get orientation(A, H, C) == 0 - orientation(A, C, H) mod 360
By reverse_orientation on C, D, H we get orientation(C, D, H) == 0 - orientation(C, H, D) mod 360
By reverse_orientation on E, H, A we get orientation(A, E, H) == 0 - orientation(A, H, E) mod 360
By reverse_orientation on B, F, G we get orientation(B, F, G) == 0 - orientation(B, G, F) mod 360
By reverse_orientation on F, E, C we get orientation(C, F, E) == 0 - orientation(C, E, F) mod 360
By reverse_orientation on D, H, A we get orientation(A, D, H) == 0 - orientation(A, H, D) mod 360
By reverse_orientation on C, D, I we get orientation(C, D, I) == 0 - orientation(C, I, D) mod 360
By reverse_orientation on B, H, C we get orientation(B, H, C) == 0 - orientation(B, C, H) mod 360
By reverse_orientation on H, G, B we get orientation(B, H, G) == 0 - orientation(B, G, H) mod 360
By reverse_orientation on G, C, H we get orientation(C, H, G) == 0 - orientation(C, G, H) mod 360
By reverse_orientation on I, A, E we get orientation(A, E, I) == 0 - orientation(A, I, E) mod 360
By reverse_orientation on F, B, D we get orientation(B, D, F) == 0 - orientation(B, F, D) mod 360
By reverse_orientation on E, H, D we get orientation(D, E, H) == 0 - orientation(D, H, E) mod 360
By reverse_orientation on C, D, G we get orientation(C, D, G) == 0 - orientation(C, G, D) mod 360
By reverse_orientation on F, G, D we get orientation(D, F, G) == 0 - orientation(D, G, F) mod 360
By reverse_orientation on E, H, G we get orientation(E, H, G) == 0 - orientation(E, G, H) mod 360
By reverse_orientation on I, H, C we get orientation(C, I, H) == 0 - orientation(C, H, I) mod 360
By reverse_orientation on F, G, A we get orientation(A, F, G) == 0 - orientation(A, G, F) mod 360
By reverse_orientation on D, I, B we get orientation(B, D, I) == 0 - orientation(B, I, D) mod 360
By reverse_orientation on D, E, B we get orientation(B, D, E) == 0 - orientation(B, E, D) mod 360
By reverse_orientation on C, D, E we get orientation(C, D, E) == 0 - orientation(C, E, D) mod 360
By reverse_orientation on B, I, G we get orientation(B, I, G) == 0 - orientation(B, G, I) mod 360
By reverse_orientation on I, H, E we get orientation(E, I, H) == 0 - orientation(E, H, I) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on I, B, A we get I not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on E, B, A we get E not in Line(A, B)
By reverse_orientation on A, H, G we get orientation(A, H, G) == 0 - orientation(A, G, H) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on G, A, B we get G not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on D, A, C we get D not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on C, A, B we get C not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on B, A, C we get B not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on H, A, C we get H not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on I, C, A we get I not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on F, A, C we get F not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, A we get D not in Line(A, B)
By power_of_a_point_on_circle on F, c we get 0 == power_of_a_point(F, c)
By power_of_a_point_in_circle on D, d we get 0 == power_of_a_point(D, d)
By power_of_a_point_on_circle on C, c we get 0 == power_of_a_point(C, c)
By power_of_a_point_in_circle on C, d we get 0 == power_of_a_point(C, d)
By power_of_a_point_on_circle on H, c we get 0 == power_of_a_point(H, c)
By power_of_a_point_on_circle on G, d we get 0 == power_of_a_point(G, d)
By power_of_a_point_on_circle on E, c we get 0 == power_of_a_point(E, c)
By power_of_a_point_in_circle on B, d we get 0 == power_of_a_point(B, d)
By angle_to_center on C, D, B, d we get 2 * angle(C, D, B) == angle(C, center(d), B) mod 360
By angle_to_center on D, G, B, d we get 2 * angle(D, G, B) == angle(D, center(d), B) mod 360
By angle_to_center on B, D, G, d we get 2 * angle(B, D, G) == angle(B, center(d), G) mod 360
By angle_to_center on D, C, G, d we get 2 * angle(D, C, G) == angle(D, center(d), G) mod 360
By angle_to_center on D, C, B, d we get 2 * angle(D, C, B) == angle(D, center(d), B) mod 360
By angle_to_center on D, B, C, d we get 2 * angle(D, B, C) == angle(D, center(d), C) mod 360
By angle_to_center on B, D, C, d we get 2 * angle(B, D, C) == angle(B, center(d), C) mod 360
By angle_to_center on G, D, C, d we get 2 * angle(G, D, C) == angle(G, center(d), C) mod 360
By angle_to_center on G, B, D, d we get 2 * angle(G, B, D) == angle(G, center(d), D) mod 360
By angle_to_center on G, C, B, d we get 2 * angle(G, C, B) == angle(G, center(d), B) mod 360
By angle_to_center on C, D, G, d we get 2 * angle(C, D, G) == angle(C, center(d), G) mod 360
By angle_to_center on C, G, D, d we get 2 * angle(C, G, D) == angle(C, center(d), D) mod 360
By angle_to_center on C, B, D, d we get 2 * angle(C, B, D) == angle(C, center(d), D) mod 360
By angle_to_center on G, B, C, d we get 2 * angle(G, B, C) == angle(G, center(d), C) mod 360
By angle_to_center on B, C, G, d we get 2 * angle(B, C, G) == angle(B, center(d), G) mod 360
By angle_to_center on C, G, B, d we get 2 * angle(C, G, B) == angle(C, center(d), B) mod 360
By angle_to_center on G, C, D, d we get 2 * angle(G, C, D) == angle(G, center(d), D) mod 360
By angle_to_center on D, G, C, d we get 2 * angle(D, G, C) == angle(D, center(d), C) mod 360
By angle_to_center on B, C, D, d we get 2 * angle(B, C, D) == angle(B, center(d), D) mod 360
By angle_to_center on G, D, B, d we get 2 * angle(G, D, B) == angle(G, center(d), B) mod 360
By angle_to_center on B, G, C, d we get 2 * angle(B, G, C) == angle(B, center(d), C) mod 360
By angle_to_center on B, G, D, d we get 2 * angle(B, G, D) == angle(B, center(d), D) mod 360
By angle_to_center on C, B, G, d we get 2 * angle(C, B, G) == angle(C, center(d), G) mod 360
By angle_to_center on D, B, G, d we get 2 * angle(D, B, G) == angle(D, center(d), G) mod 360
By altitude_definition on D, C, A, perpendicular_line(D, g) we get altitude(D, A, C) == perpendicular_line(D, g)
By altitude_definition on D, A, B, perpendicular_line(D, f) we get altitude(D, A, B) == perpendicular_line(D, f)
By incenter_concurrency on C, B, A we get incenter(A, B, C) in internal_angle_bisector(A, B, C), incenter(A, B, C) in internal_angle_bisector(B, A, C), incenter(A, B, C) in internal_angle_bisector(A, C, B)
By line_definition on C, D, internal_angle_bisector(A, C, B) we get Line(C, D) == internal_angle_bisector(A, C, B)
By line_unique_intersection_v1 on i, internal_angle_bisector(A, C, B), D, C we get C not in i
By line_unique_intersection_v1 on internal_angle_bisector(A, C, B), i, D, B we get B not in internal_angle_bisector(A, C, B)
By line_unique_intersection_v1 on internal_angle_bisector(A, C, B), h, D, A we get A not in internal_angle_bisector(A, C, B)
By projection_definition on H, F, Line(D, F) we get F == projection(H, Line(D, F))
By projection_definition on B, F, Line(D, F) we get F == projection(B, Line(D, F))
By projection_definition on A, E, Line(D, E) we get E == projection(A, Line(D, E))
By projection_definition on A, F, Line(D, F) we get F == projection(A, Line(D, F))
By projection_definition on G, E, Line(D, E) we get E == projection(G, Line(D, E))
By projection_definition on C, E, Line(D, E) we get E == projection(C, Line(D, E))
By different_points_v1 on G, B we get 0 != distance(B, G)
By different_points_v1 on E, A we get 0 != distance(A, E)
By different_points_v1 on F, A we get 0 != distance(A, F)
By different_points_v1 on F, D we get 0 != distance(D, F)
By different_points_v1 on B, H we get 0 != distance(B, H)
By different_points_v1 on E, D we get 0 != distance(D, E)
By different_points_v1 on B, F we get 0 != distance(B, F)
By different_points_v1 on B, D we get 0 != distance(B, D)
By different_points_v1 on B, I we get 0 != distance(B, I)
By different_points_v1 on E, C we get 0 != distance(C, E)
By different_points_v1 on A, D we get 0 != distance(A, D)
By different_points_v1 on G, D we get 0 != distance(D, G)
By different_points_v1 on F, H we get 0 != distance(F, H)
By different_points_v1 on A, H we get 0 != distance(A, H)
By different_points_v1 on I, D we get 0 != distance(D, I)
By different_points_v1 on I, C we get 0 != distance(C, I)
By different_points_v1 on B, C we get 0 != distance(B, C)
By different_points_v1 on E, G we get 0 != distance(E, G)
By different_points_v1 on A, G we get 0 != distance(A, G)
By different_points_v1 on C, G we get 0 != distance(C, G)
By different_points_v1 on D, C we get 0 != distance(C, D)
By different_points_v1 on G, I we get 0 != distance(G, I)
By perpendicular_direction_conditions_v0_r on E, D, G, C we get 180 == 2 * direction(E, D) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on G, C, E, D we get 180 == 2 * direction(G, C) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on D, E, C, G we get 180 == 2 * direction(D, E) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on D, E, G, C we get 180 == 2 * direction(D, E) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on E, D, C, G we get 180 == 2 * direction(E, D) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on G, C, D, E we get 180 == 2 * direction(G, C) - 2 * direction(D, E) mod 360
By in_imply_collinear on G, A, E we get collinear(A, E, G)
By perpendicular_direction_conditions_v0_r on C, G, E, D we get 180 == 2 * direction(C, G) - 2 * direction(E, D) mod 360
By in_imply_collinear on A, H, F we get collinear(A, F, H)
By perpendicular_direction_conditions_v0_r on C, G, D, E we get 180 == 2 * direction(C, G) - 2 * direction(D, E) mod 360
By in_imply_collinear on G, C, E we get collinear(C, E, G)
By reverse_direction on D, C we get 180 == direction(D, C) - direction(C, D) mod 360
By in_imply_collinear on H, B, F we get collinear(B, F, H)
By not_in_line_equivalent_to_not_collinear_v0_r on F, D, E we get F not in Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on H, F, D we get H not in Line(D, F)
By reverse_direction on B, G we get 180 == direction(B, G) - direction(G, B) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on E, B, I we get E not in Line(B, I)
By not_in_line_equivalent_to_not_collinear_v0_r on F, C, I we get F not in Line(C, I)
By not_in_line_equivalent_to_not_collinear_v0_r on H, I, D we get H not in Line(D, I)
By reverse_direction on C, D we get 180 == direction(C, D) - direction(D, C) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on G, F, D we get G not in Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on I, D, G we get I not in Line(D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on F, I, B we get F not in Line(B, I)
By reverse_direction on D, G we get 180 == direction(D, G) - direction(G, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on F, C, B we get F not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on F, I, D we get F not in Line(D, I)
By not_in_line_equivalent_to_not_collinear_v0_r on B, C, I we get B not in Line(C, I)
By reverse_direction on B, C we get 180 == direction(B, C) - direction(C, B) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on E, B, C we get E not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on G, I, C we get G not in Line(C, I)
By not_in_line_equivalent_to_not_collinear_v0_r on B, G, D we get B not in Line(D, G)
By line_inequality on internal_angle_bisector(A, C, B), g, D we get g != internal_angle_bisector(A, C, B)
By not_in_line_equivalent_to_not_collinear_v0_r on E, I, G we get E not in Line(G, I)
By not_in_line_equivalent_to_not_collinear_v0_r on A, I, C we get A not in Line(C, I)
By not_in_line_equivalent_to_not_collinear_v0_r on B, F, D we get B not in Line(D, F)
By line_inequality on Line(D, E), g, D we get g != Line(D, E)
By line_inequality on internal_angle_bisector(A, C, B), f, C we get f != internal_angle_bisector(A, C, B)
By not_in_line_equivalent_to_not_collinear_v0_r on H, I, G we get H not in Line(G, I)
By reverse_direction on G, C we get 180 == direction(G, C) - direction(C, G) mod 360
By reverse_direction on B, D we get 180 == direction(B, D) - direction(D, B) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on E, D, B we get E not in Line(B, D)
By line_inequality on Line(G, I), g, I we get g != Line(G, I)
By line_inequality on Line(D, F), h, F we get h != Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on C, D, I we get C not in Line(D, I)
By not_in_line_equivalent_to_not_collinear_v0_r on I, E, D we get I not in Line(D, E)
By reverse_direction on C, G we get 180 == direction(C, G) - direction(G, C) mod 360
By reverse_direction on G, B we get 180 == direction(G, B) - direction(B, G) mod 360
By line_inequality on Line(D, G), h, G we get h != Line(D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on C, G, D we get C not in Line(D, G)
By reverse_direction on C, B we get 180 == direction(C, B) - direction(B, C) mod 360
By line_inequality on Line(B, G), g, B we get g != Line(B, G)
By reverse_direction on G, D we get 180 == direction(G, D) - direction(D, G) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on I, D, C we get I not in Line(C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on A, D, C we get A not in Line(C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on C, D, E we get C not in Line(D, E)
By reverse_direction on D, B we get 180 == direction(D, B) - direction(B, D) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on G, D, C we get G not in Line(C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on B, I, G we get B not in Line(G, I)
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, D we get G not in Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, C we get D not in Line(B, C)
By line_inequality on Line(B, G), h, G we get h != Line(B, G)
By line_inequality on Line(D, E), f, E we get f != Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on E, G, B we get E not in Line(B, G)
By line_inequality on Line(B, I), g, I we get g != Line(B, I)
By line_inequality on Line(G, I), f, I we get f != Line(G, I)
By line_inequality on Line(D, F), f, D we get f != Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on G, I, B we get G not in Line(B, I)
By not_in_line_equivalent_to_not_collinear_v0_r on A, G, B we get A not in Line(B, G)
By line_inequality on Line(B, G), f, G we get f != Line(B, G)
By line_inequality on Line(B, C), f, C we get f != Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, D we get C not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on A, I, G we get A not in Line(G, I)
By not_in_line_equivalent_to_not_collinear_v0_r on D, I, B we get D not in Line(B, I)
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, G we get C not in Line(B, G)
By line_circle_intersection_has_at_most_two_points_0 on E, C, A, c we get A not in c
By not_in_line_equivalent_to_not_collinear_v0_r on I, B, D we get I not in Line(B, D)
By line_circle_intersection_has_at_most_two_points_0 on C, G, A, d we get A not in d
By not_in_line_equivalent_to_not_collinear_v0_r on C, I, G we get C not in Line(G, I)
By not_in_line_equivalent_to_not_collinear_v0_r on H, G, D we get H not in Line(D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on I, D, F we get I not in Line(D, F)
By line_inequality on Line(C, D), f, C we get f != Line(C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on A, D, G we get A not in Line(D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on E, C, I we get E not in Line(C, I)
By not_in_line_equivalent_to_not_collinear_v0_r on I, G, B we get I not in Line(B, G)
By not_in_line_equivalent_to_not_collinear_v0_r on F, G, D we get F not in Line(D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on C, I, B we get C not in Line(B, I)
By not_in_line_equivalent_to_not_collinear_v0_r on H, I, B we get H not in Line(B, I)
By not_in_line_equivalent_to_not_collinear_v0_r on B, C, D we get B not in Line(C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on B, I, D we get B not in Line(D, I)
By not_in_line_equivalent_to_not_collinear_v0_r on E, F, D we get E not in Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on H, G, B we get H not in Line(B, G)
By line_inequality on Line(B, C), h, B we get h != Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on G, C, B we get G not in Line(B, C)
By line_inequality on Line(B, C), g, B we get g != Line(B, C)
By line_inequality on Line(C, D), g, D we get g != Line(C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on C, D, F we get C not in Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on A, C, B we get A not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on D, G, I we get D not in Line(G, I)
By line_inequality on Line(D, F), g, D we get g != Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on A, I, B we get A not in Line(B, I)
By not_in_line_equivalent_to_not_collinear_v0_r on E, D, G we get E not in Line(D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on F, I, G we get F not in Line(G, I)
By line_inequality on Line(C, I), g, I we get g != Line(C, I)
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, G we get F not in Line(B, G)
By line_inequality on Line(C, I), f, C we get f != Line(C, I)
By not_in_line_equivalent_to_not_collinear_v0_r on E, C, D we get E not in Line(C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on A, D, F we get A not in Line(D, F)
By line_inequality on Line(D, I), f, D we get f != Line(D, I)
By not_in_line_equivalent_to_not_collinear_v0_r on I, C, B we get I not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on H, C, B we get H not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on H, C, I we get H not in Line(C, I)
By not_in_line_equivalent_to_not_collinear_v0_r on D, C, I we get D not in Line(C, I)
By line_inequality on Line(B, I), h, B we get h != Line(B, I)
By not_in_line_equivalent_to_not_collinear_v0_r on G, I, D we get G not in Line(D, I)
By not_in_line_equivalent_to_not_collinear_v0_r on H, C, D we get H not in Line(C, D)
By line_inequality on Line(D, E), h, E we get h != Line(D, E)
By line_inequality on Line(G, I), h, G we get h != Line(G, I)
By line_inequality on Line(C, I), h, C we get h != Line(C, I)
By not_in_line_equivalent_to_not_collinear_v0_r on E, D, I we get E not in Line(D, I)
By line_inequality on Line(B, I), f, I we get f != Line(B, I)
By line_inequality on Line(D, G), f, D we get f != Line(D, G)
By line_inequality on Line(C, D), h, C we get h != Line(C, D)
By line_inequality on Line(D, I), g, D we get g != Line(D, I)
By not_in_line_equivalent_to_not_collinear_v0_r on A, E, D we get A not in Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on F, C, D we get F not in Line(C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on B, D, E we get B not in Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, G we get D not in Line(B, G)
By line_inequality on Line(D, G), g, D we get g != Line(D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on H, D, E we get H not in Line(D, E)
By line_inequality on Line(D, F), i, F we get i != Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on G, B, D we get G not in Line(B, D)
By perpendicular_direction_conditions_v0_r on E, G, E, D we get 180 == 2 * direction(E, G) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on F, D, A, H we get 180 == 2 * direction(F, D) - 2 * direction(A, H) mod 360
By perpendicular_direction_conditions_v0_r on D, F, F, A we get 180 == 2 * direction(D, F) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on B, H, D, F we get 180 == 2 * direction(B, H) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on D, F, F, H we get 180 == 2 * direction(D, F) - 2 * direction(F, H) mod 360
By perpendicular_direction_conditions_v0_r on F, D, B, H we get 180 == 2 * direction(F, D) - 2 * direction(B, H) mod 360
By perpendicular_direction_conditions_v0_r on D, E, E, C we get 180 == 2 * direction(D, E) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on D, E, E, A we get 180 == 2 * direction(D, E) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on D, E, C, E we get 180 == 2 * direction(D, E) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on A, H, D, F we get 180 == 2 * direction(A, H) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on F, D, H, B we get 180 == 2 * direction(F, D) - 2 * direction(H, B) mod 360
By perpendicular_direction_conditions_v0_r on F, D, B, F we get 180 == 2 * direction(F, D) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on F, H, D, F we get 180 == 2 * direction(F, H) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on D, F, B, F we get 180 == 2 * direction(D, F) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on E, D, E, A we get 180 == 2 * direction(E, D) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on F, D, B, A we get 180 == 2 * direction(F, D) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on H, F, D, F we get 180 == 2 * direction(H, F) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on G, E, D, E we get 180 == 2 * direction(G, E) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on G, E, E, D we get 180 == 2 * direction(G, E) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on D, E, C, A we get 180 == 2 * direction(D, E) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on D, E, G, A we get 180 == 2 * direction(D, E) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on B, F, D, F we get 180 == 2 * direction(B, F) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on D, F, A, B we get 180 == 2 * direction(D, F) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on F, D, F, A we get 180 == 2 * direction(F, D) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on H, B, F, D we get 180 == 2 * direction(H, B) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on C, A, D, E we get 180 == 2 * direction(C, A) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on A, F, D, F we get 180 == 2 * direction(A, F) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on D, F, F, B we get 180 == 2 * direction(D, F) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on D, E, G, E we get 180 == 2 * direction(D, E) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on B, A, D, F we get 180 == 2 * direction(B, A) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on D, F, B, A we get 180 == 2 * direction(D, F) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on F, D, H, F we get 180 == 2 * direction(F, D) - 2 * direction(H, F) mod 360
By perpendicular_direction_conditions_v0_r on H, B, D, F we get 180 == 2 * direction(H, B) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on G, A, E, D we get 180 == 2 * direction(G, A) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on H, F, F, D we get 180 == 2 * direction(H, F) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on E, D, G, A we get 180 == 2 * direction(E, D) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on E, D, A, E we get 180 == 2 * direction(E, D) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on D, E, A, C we get 180 == 2 * direction(D, E) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on E, D, G, E we get 180 == 2 * direction(E, D) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on D, F, H, A we get 180 == 2 * direction(D, F) - 2 * direction(H, A) mod 360
By perpendicular_direction_conditions_v0_r on F, B, F, D we get 180 == 2 * direction(F, B) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on A, C, E, D we get 180 == 2 * direction(A, C) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on D, F, A, F we get 180 == 2 * direction(D, F) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on F, A, F, D we get 180 == 2 * direction(F, A) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on E, A, E, D we get 180 == 2 * direction(E, A) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on E, C, E, D we get 180 == 2 * direction(E, C) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on B, H, F, D we get 180 == 2 * direction(B, H) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on A, C, D, E we get 180 == 2 * direction(A, C) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on F, D, A, F we get 180 == 2 * direction(F, D) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on F, D, F, H we get 180 == 2 * direction(F, D) - 2 * direction(F, H) mod 360
By perpendicular_direction_conditions_v0_r on C, A, E, D we get 180 == 2 * direction(C, A) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on E, D, A, G we get 180 == 2 * direction(E, D) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on C, E, E, D we get 180 == 2 * direction(C, E) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on F, D, F, B we get 180 == 2 * direction(F, D) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on A, F, F, D we get 180 == 2 * direction(A, F) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on E, D, C, A we get 180 == 2 * direction(E, D) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on A, G, D, E we get 180 == 2 * direction(A, G) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on D, F, A, H we get 180 == 2 * direction(D, F) - 2 * direction(A, H) mod 360
By perpendicular_direction_conditions_v0_r on D, E, A, G we get 180 == 2 * direction(D, E) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on E, D, E, G we get 180 == 2 * direction(E, D) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on F, A, D, F we get 180 == 2 * direction(F, A) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on D, F, B, H we get 180 == 2 * direction(D, F) - 2 * direction(B, H) mod 360
By perpendicular_direction_conditions_v0_r on E, D, C, E we get 180 == 2 * direction(E, D) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on A, E, D, E we get 180 == 2 * direction(A, E) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on F, H, F, D we get 180 == 2 * direction(F, H) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on H, A, F, D we get 180 == 2 * direction(H, A) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on B, A, F, D we get 180 == 2 * direction(B, A) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on D, E, E, G we get 180 == 2 * direction(D, E) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on A, G, E, D we get 180 == 2 * direction(A, G) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on F, D, H, A we get 180 == 2 * direction(F, D) - 2 * direction(H, A) mod 360
By perpendicular_direction_conditions_v0_r on F, D, A, B we get 180 == 2 * direction(F, D) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on A, B, D, F we get 180 == 2 * direction(A, B) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on C, E, D, E we get 180 == 2 * direction(C, E) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on E, D, E, C we get 180 == 2 * direction(E, D) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on E, G, D, E we get 180 == 2 * direction(E, G) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on D, F, H, B we get 180 == 2 * direction(D, F) - 2 * direction(H, B) mod 360
By perpendicular_direction_conditions_v0_r on A, H, F, D we get 180 == 2 * direction(A, H) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on B, F, F, D we get 180 == 2 * direction(B, F) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on H, A, D, F we get 180 == 2 * direction(H, A) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on E, A, D, E we get 180 == 2 * direction(E, A) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on G, A, D, E we get 180 == 2 * direction(G, A) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on D, F, H, F we get 180 == 2 * direction(D, F) - 2 * direction(H, F) mod 360
By perpendicular_direction_conditions_v0_r on A, E, E, D we get 180 == 2 * direction(A, E) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on F, B, D, F we get 180 == 2 * direction(F, B) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on E, C, D, E we get 180 == 2 * direction(E, C) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on D, E, A, E we get 180 == 2 * direction(D, E) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on E, D, A, C we get 180 == 2 * direction(E, D) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on A, B, F, D we get 180 == 2 * direction(A, B) - 2 * direction(F, D) mod 360
By reverse_direction on I, C we get 180 == direction(I, C) - direction(C, I) mod 360
By reverse_direction on I, D we get 180 == direction(I, D) - direction(D, I) mod 360
By altitude_definition on A, D, F, f we get f == altitude(A, D, F)
By incenter_isogonal_conjugate on C, A, B we get incenter(A, B, C) == isogonal_conjugate(incenter(A, B, C), A, B, C)
By altitude_definition on G, D, E, g we get g == altitude(G, D, E)
By reverse_direction on I, B we get 180 == direction(I, B) - direction(B, I) mod 360
By altitude_definition on H, F, D, f we get f == altitude(H, D, F)
By internal_angle_bisector_definition_v0 on A, D, C, B we get angle(A, B, D) == angle(D, B, C) mod 360
By altitude_definition on A, D, E, g we get g == altitude(A, D, E)
By reverse_direction on I, G we get 180 == direction(I, G) - direction(G, I) mod 360
By internal_angle_bisector_definition_v0 on C, D, A, B we get angle(C, B, D) == angle(D, B, A) mod 360
By collinear_definition on G, C, A we get C in Line(A, G), A in Line(C, G), Line(A, G) == Line(C, G), 0 == 2 * angle(C, G, A) mod 360
By altitude_definition on B, D, F, f we get f == altitude(B, D, F)
By collinear_definition on C, A, G we get A in Line(C, G), G in Line(A, C), Line(A, C) == Line(C, G), 0 == 2 * angle(A, C, G) mod 360
By radical_axis_definition_v0_r on C, c, d we get C in radical_axis(c, d)
By collinear_definition on C, G, A we get G in Line(A, C), A in Line(C, G), Line(A, C) == Line(C, G), 0 == 2 * angle(G, C, A) mod 360
By altitude_definition on C, E, D, g we get g == altitude(C, D, E)
By collinear_definition on G, A, C we get A in Line(C, G), C in Line(A, G), Line(A, G) == Line(C, G), 0 == 2 * angle(A, G, C) mod 360
By perpendicular_angle_conditions_v0 on B, F, D we get angle(B, F, D) == orientation(B, F, D) mod 360
By altitude_definition on D, B, F, Line(D, F) we get Line(D, F) == altitude(D, B, F)
By collinear_definition on E, A, C we get A in Line(C, E), C in Line(A, E), Line(A, E) == Line(C, E), 0 == 2 * angle(A, E, C) mod 360
By collinear_definition on A, C, G we get C in Line(A, G), G in Line(A, C), Line(A, C) == Line(A, G), 0 == 2 * angle(C, A, G) mod 360
By altitude_definition on D, C, G, Line(D, E) we get Line(D, E) == altitude(D, C, G)
By sas_anti_congruence on C, I, D, D, I, C we get anti_congruent_triangles(C, D, I, D, C, I)
By isosceles_triangle_properties on I, G, D we get distance(D, I) == distance(G, I), angle(G, D, I) == angle(I, G, D) mod 360
By perpendicular_angle_conditions_v0 on D, F, B we get angle(D, F, B) == orientation(B, D, F) mod 360
By altitude_definition on D, C, E, Line(D, E) we get Line(D, E) == altitude(D, C, E)
By isosceles_triangle_properties on I, G, B we get distance(B, I) == distance(G, I), angle(G, B, I) == angle(I, G, B) mod 360
By perpendicular_angle_conditions_v0 on D, F, A we get angle(D, F, A) == orientation(A, D, F) mod 360
By altitude_definition on D, A, F, Line(D, F) we get Line(D, F) == altitude(D, A, F)
By collinear_definition on F, A, B we get A in Line(B, F), B in Line(A, F), Line(A, F) == Line(B, F), 0 == 2 * angle(A, F, B) mod 360
By sas_anti_congruence on D, I, B, B, I, D we get anti_congruent_triangles(B, D, I, D, B, I)
By collinear_definition on B, H, A we get H in Line(A, B), A in Line(B, H), Line(A, B) == Line(B, H), 0 == 2 * angle(H, B, A) mod 360
By perpendicular_angle_conditions_v0 on D, E, A we get angle(D, E, A) == orientation(A, D, E) mod 360
By collinear_definition on A, C, E we get C in Line(A, E), E in Line(A, C), Line(A, C) == Line(A, E), 0 == 2 * angle(C, A, E) mod 360
By altitude_definition on D, H, A, Line(D, F) we get Line(D, F) == altitude(D, A, H)
By isosceles_triangle_properties on I, C, D we get distance(C, I) == distance(D, I), angle(C, D, I) == angle(I, C, D) mod 360
By isosceles_triangle_properties on I, C, G we get distance(C, I) == distance(G, I), angle(C, G, I) == angle(I, C, G) mod 360
By altitude_definition on D, F, H, Line(D, F) we get Line(D, F) == altitude(D, F, H)
By collinear_definition on B, F, A we get F in Line(A, B), A in Line(B, F), Line(A, B) == Line(B, F), 0 == 2 * angle(F, B, A) mod 360
By sas_anti_congruence on B, I, D, D, I, B we get anti_congruent_triangles(B, D, I, D, B, I)
By altitude_definition on D, E, G, Line(D, E) we get Line(D, E) == altitude(D, E, G)
By isosceles_triangle_properties on I, C, B we get distance(B, I) == distance(C, I), angle(C, B, I) == angle(I, C, B) mod 360
By collinear_definition on H, B, A we get B in Line(A, H), A in Line(B, H), Line(A, H) == Line(B, H), 0 == 2 * angle(B, H, A) mod 360
By altitude_definition on D, E, A, Line(D, E) we get Line(D, E) == altitude(D, A, E)
By collinear_definition on A, G, C we get G in Line(A, C), C in Line(A, G), Line(A, C) == Line(A, G), 0 == 2 * angle(G, A, C) mod 360
By collinear_definition on H, A, B we get A in Line(B, H), B in Line(A, H), Line(A, H) == Line(B, H), 0 == 2 * angle(A, H, B) mod 360
By perpendicular_angle_conditions_v0 on G, E, D we get angle(G, E, D) == orientation(D, G, E) mod 360
By isosceles_triangle_properties on I, B, G we get distance(B, I) == distance(G, I), angle(B, G, I) == angle(I, B, G) mod 360
By altitude_definition on D, G, A, Line(D, E) we get Line(D, E) == altitude(D, A, G)
By isosceles_triangle_properties on I, B, D we get distance(B, I) == distance(D, I), angle(B, D, I) == angle(I, B, D) mod 360
By sas_anti_congruence on G, I, C, C, I, G we get anti_congruent_triangles(C, G, I, G, C, I)
By sas_anti_congruence on C, I, B, B, I, C we get anti_congruent_triangles(B, C, I, C, B, I)
By collinear_definition on B, A, H we get A in Line(B, H), H in Line(A, B), Line(A, B) == Line(B, H), 0 == 2 * angle(A, B, H) mod 360
By collinear_definition on A, F, B we get F in Line(A, B), B in Line(A, F), Line(A, B) == Line(A, F), 0 == 2 * angle(F, A, B) mod 360
By perpendicular_angle_conditions_v0 on D, E, C we get angle(D, E, C) == orientation(C, D, E) mod 360
By perpendicular_angle_conditions_v0 on D, E, G we get angle(D, E, G) == orientation(D, E, G) mod 360
By collinear_definition on A, B, H we get B in Line(A, H), H in Line(A, B), Line(A, B) == Line(A, H), 0 == 2 * angle(B, A, H) mod 360
By perpendicular_angle_conditions_v0 on A, F, D we get angle(A, F, D) == orientation(A, F, D) mod 360
By isosceles_triangle_properties on I, G, C we get distance(C, I) == distance(G, I), angle(G, C, I) == angle(I, G, C) mod 360
By collinear_definition on A, B, F we get B in Line(A, F), F in Line(A, B), Line(A, B) == Line(A, F), 0 == 2 * angle(B, A, F) mod 360
By sas_anti_congruence on G, I, D, D, I, G we get anti_congruent_triangles(D, G, I, G, D, I)
By isosceles_triangle_properties on I, D, B we get distance(B, I) == distance(D, I), angle(D, B, I) == angle(I, D, B) mod 360
By altitude_definition on D, B, H, Line(D, F) we get Line(D, F) == altitude(D, B, H)
By collinear_definition on C, A, E we get A in Line(C, E), E in Line(A, C), Line(A, C) == Line(C, E), 0 == 2 * angle(A, C, E) mod 360
By collinear_definition on F, B, A we get B in Line(A, F), A in Line(B, F), Line(A, F) == Line(B, F), 0 == 2 * angle(B, F, A) mod 360
By perpendicular_angle_conditions_v0 on A, E, D we get angle(A, E, D) == orientation(A, E, D) mod 360
By perpendicular_angle_conditions_v0 on D, F, H we get angle(D, F, H) == orientation(D, F, H) mod 360
By sas_anti_congruence on D, I, C, C, I, D we get anti_congruent_triangles(C, D, I, D, C, I)
By collinear_definition on A, H, B we get H in Line(A, B), B in Line(A, H), Line(A, B) == Line(A, H), 0 == 2 * angle(H, A, B) mod 360
By sas_anti_congruence on B, I, C, C, I, B we get anti_congruent_triangles(B, C, I, C, B, I)
By collinear_definition on A, E, C we get E in Line(A, C), C in Line(A, E), Line(A, C) == Line(A, E), 0 == 2 * angle(E, A, C) mod 360
By sas_anti_congruence on G, I, B, B, I, G we get anti_congruent_triangles(B, G, I, G, B, I)
By sas_anti_congruence on D, I, G, G, I, D we get anti_congruent_triangles(D, G, I, G, D, I)
By perpendicular_angle_conditions_v0 on H, F, D we get angle(H, F, D) == orientation(D, H, F) mod 360
By isosceles_triangle_properties on I, D, G we get distance(D, I) == distance(G, I), angle(D, G, I) == angle(I, D, G) mod 360
By collinear_definition on C, E, A we get E in Line(A, C), A in Line(C, E), Line(A, C) == Line(C, E), 0 == 2 * angle(E, C, A) mod 360
By sas_anti_congruence on B, I, G, G, I, B we get anti_congruent_triangles(B, G, I, G, B, I)
By perpendicular_angle_conditions_v0 on C, E, D we get angle(C, E, D) == orientation(C, E, D) mod 360
By collinear_definition on E, C, A we get C in Line(A, E), A in Line(C, E), Line(A, E) == Line(C, E), 0 == 2 * angle(C, E, A) mod 360
By isosceles_triangle_properties on I, D, C we get distance(C, I) == distance(D, I), angle(D, C, I) == angle(I, D, C) mod 360
By sas_anti_congruence on C, I, G, G, I, C we get anti_congruent_triangles(C, G, I, G, C, I)
By isosceles_triangle_properties on I, B, C we get distance(B, I) == distance(C, I), angle(B, C, I) == angle(I, B, C) mod 360
By collinear_definition on B, A, F we get A in Line(B, F), F in Line(A, B), Line(A, B) == Line(B, F), 0 == 2 * angle(A, B, F) mod 360
By internal_angle_bisector_definition_v0 on C, D, B, A we get angle(C, A, D) == angle(D, A, B) mod 360
By internal_angle_bisector_definition_v0 on B, D, C, A we get angle(B, A, D) == angle(D, A, C) mod 360
By concyclic_sufficient_conditions_v1 on D, E, A, F we get concyclic(A, D, E, F)
By line_intersection_definition on C, g, Line(C, D) we get C == line_intersection(g, Line(C, D))
By line_intersection_definition on D, h, Line(D, E) we get D == line_intersection(h, Line(D, E))
By line_intersection_definition on D, h, Line(D, F) we get D == line_intersection(h, Line(D, F))
By line_intersection_definition on D, Line(D, F), i we get D == line_intersection(i, Line(D, F))
By line_intersection_definition on B, Line(B, I), f we get B == line_intersection(f, Line(B, I))
By line_intersection_definition on B, Line(B, C), f we get B == line_intersection(f, Line(B, C))
By line_intersection_definition on B, f, Line(B, G) we get B == line_intersection(f, Line(B, G))
By line_intersection_definition on C, Line(C, I), g we get C == line_intersection(g, Line(C, I))
By line_intersection_definition on C, Line(B, C), g we get C == line_intersection(g, Line(B, C))
By line_intersection_definition on G, g, Line(B, G) we get G == line_intersection(g, Line(B, G))
By line_intersection_definition on G, Line(D, G), g we get G == line_intersection(g, Line(D, G))
By line_intersection_definition on G, g, Line(G, I) we get G == line_intersection(g, Line(G, I))
By line_intersection_definition on D, Line(D, G), h we get D == line_intersection(h, Line(D, G))
By circle_radius_v0_r on C, c we get radius(c) == distance(C, center(c))
By circle_radius_v0_r on H, c we get radius(c) == distance(H, center(c))
By circle_radius_v0_r on E, c we get radius(c) == distance(E, center(c))
By circle_radius_v0_r on F, c we get radius(c) == distance(F, center(c))
By center_not_on_circle on c we get center(c) not in c
By orthocenter_concurrency on G, D, E we get orthocenter(D, E, G) in altitude(G, D, E), orthocenter(D, E, G) in altitude(D, E, G), orthocenter(D, E, G) in altitude(E, D, G)
By orthocenter_concurrency on D, B, F we get orthocenter(B, D, F) in altitude(D, B, F), orthocenter(B, D, F) in altitude(B, D, F), orthocenter(B, D, F) in altitude(F, B, D)
By orthocenter_concurrency on D, H, F we get orthocenter(D, F, H) in altitude(D, F, H), orthocenter(D, F, H) in altitude(H, D, F), orthocenter(D, F, H) in altitude(F, D, H)
By orthocenter_concurrency on D, C, E we get orthocenter(C, D, E) in altitude(D, C, E), orthocenter(C, D, E) in altitude(C, D, E), orthocenter(C, D, E) in altitude(E, C, D)
By orthocenter_concurrency on A, D, F we get orthocenter(A, D, F) in altitude(A, D, F), orthocenter(A, D, F) in altitude(D, A, F), orthocenter(A, D, F) in altitude(F, A, D)
By orthocenter_concurrency on D, A, E we get orthocenter(A, D, E) in altitude(D, A, E), orthocenter(A, D, E) in altitude(A, D, E), orthocenter(A, D, E) in altitude(E, A, D)
By directions_draw_angle on G, D, E we get exists(angle(G, D, E))
By internal_angle_bisector_definition_v0 on A, D, B, C we get angle(A, C, D) == angle(D, C, B) mod 360
By directions_draw_angle on A, G, D we get exists(angle(A, G, D))
By directions_draw_angle on H, A, G we get exists(angle(H, A, G))
By line_inequality on Line(C, D), Line(B, I), C we get Line(B, I) != Line(C, D)
By directions_draw_angle on F, A, C we get exists(angle(F, A, C))
By reverse_direction on A, F we get 180 == direction(A, F) - direction(F, A) mod 360
By reverse_direction on F, H we get 180 == direction(F, H) - direction(H, F) mod 360
By directions_draw_angle on I, C, A we get exists(angle(I, C, A))
By directions_draw_angle on B, G, A we get exists(angle(B, G, A))
By line_inequality on Line(B, I), Line(C, I), B we get Line(B, I) != Line(C, I)
By line_inequality on Line(C, I), Line(G, I), C we get Line(C, I) != Line(G, I)
By directions_draw_angle on B, C, E we get exists(angle(B, C, E))
By line_inequality on Line(B, C), Line(D, I), C we get Line(B, C) != Line(D, I)
By collinear_definition on E, G, C we get G in Line(C, E), C in Line(E, G), Line(C, E) == Line(E, G), 0 == 2 * angle(G, E, C) mod 360
By reverse_direction on F, B we get 180 == direction(F, B) - direction(B, F) mod 360
By reverse_direction on D, E we get 180 == direction(D, E) - direction(E, D) mod 360
By directions_draw_angle on E, C, G we get exists(angle(E, C, G))
By collinear_definition on C, G, E we get G in Line(C, E), E in Line(C, G), Line(C, E) == Line(C, G), 0 == 2 * angle(G, C, E) mod 360
By directions_draw_angle on E, A, G we get exists(angle(E, A, G))
By reverse_direction on A, G we get 180 == direction(A, G) - direction(G, A) mod 360
By directions_draw_angle on H, B, F we get exists(angle(H, B, F))
By reverse_direction on C, E we get 180 == direction(C, E) - direction(E, C) mod 360
By directions_draw_angle on D, C, E we get exists(angle(D, C, E))
By reverse_direction on E, C we get 180 == direction(E, C) - direction(C, E) mod 360
By directions_draw_angle on I, B, F we get exists(angle(I, B, F))
By directions_draw_angle on B, G, E we get exists(angle(B, G, E))
By directions_draw_angle on H, A, F we get exists(angle(H, A, F))
By directions_draw_angle on H, A, D we get exists(angle(H, A, D))
By directions_draw_angle on H, A, E we get exists(angle(H, A, E))
By directions_draw_angle on A, B, G we get exists(angle(A, B, G))
By collinear_definition on A, F, H we get F in Line(A, H), H in Line(A, F), Line(A, F) == Line(A, H), 0 == 2 * angle(F, A, H) mod 360
By collinear_definition on F, A, H we get A in Line(F, H), H in Line(A, F), Line(A, F) == Line(F, H), 0 == 2 * angle(A, F, H) mod 360
By collinear_definition on G, E, A we get E in Line(A, G), A in Line(E, G), Line(A, G) == Line(E, G), 0 == 2 * angle(E, G, A) mod 360
By line_inequality on Line(G, I), Line(B, C), I we get Line(B, C) != Line(G, I)
By line_inequality on Line(B, C), Line(D, G), C we get Line(B, C) != Line(D, G)
By directions_draw_angle on F, B, C we get exists(angle(F, B, C))
By line_inequality on Line(C, I), Line(D, G), I we get Line(C, I) != Line(D, G)
By directions_draw_angle on G, E, C we get exists(angle(G, E, C))
By line_inequality on Line(B, I), Line(D, G), I we get Line(B, I) != Line(D, G)
By angle_to_center on E, C, F, c we get 2 * angle(E, C, F) == angle(E, center(c), F) mod 360
By reverse_direction on G, A we get 180 == direction(G, A) - direction(A, G) mod 360
By directions_draw_angle on G, C, E we get exists(angle(G, C, E))
By line_inequality on radical_axis(c, d), Line(D, F), C we get Line(D, F) != radical_axis(c, d)
By line_inequality on Line(D, G), i, G we get i != Line(D, G)
By line_inequality on Line(B, I), Line(D, E), B we get Line(B, I) != Line(D, E)
By collinear_definition on A, H, F we get H in Line(A, F), F in Line(A, H), Line(A, F) == Line(A, H), 0 == 2 * angle(H, A, F) mod 360
By directions_draw_angle on G, A, F we get exists(angle(G, A, F))
By line_inequality on Line(D, G), Line(B, G), D we get Line(B, G) != Line(D, G)
By line_inequality on Line(B, C), Line(D, F), B we get Line(B, C) != Line(D, F)
By reverse_direction on A, C we get 180 == direction(A, C) - direction(C, A) mod 360
By directions_draw_angle on E, G, B we get exists(angle(E, G, B))
By directions_draw_angle on E, C, I we get exists(angle(E, C, I))
By reverse_direction on E, G we get 180 == direction(E, G) - direction(G, E) mod 360
By directions_draw_angle on B, A, E we get exists(angle(B, A, E))
By internal_angle_bisector_definition_v0 on B, D, A, C we get angle(B, C, D) == angle(D, C, A) mod 360
By reverse_direction on A, E we get 180 == direction(A, E) - direction(E, A) mod 360
By reverse_direction on G, E we get 180 == direction(G, E) - direction(E, G) mod 360
By collinear_definition on G, A, E we get A in Line(E, G), E in Line(A, G), Line(A, G) == Line(E, G), 0 == 2 * angle(A, G, E) mod 360
By collinear_definition on H, B, F we get B in Line(F, H), F in Line(B, H), Line(B, H) == Line(F, H), 0 == 2 * angle(B, H, F) mod 360
By directions_draw_angle on C, B, F we get exists(angle(C, B, F))
By reverse_direction on A, H we get 180 == direction(A, H) - direction(H, A) mod 360
By directions_draw_angle on F, A, H we get exists(angle(F, A, H))
By directions_draw_angle on A, G, B we get exists(angle(A, G, B))
By line_inequality on Line(D, I), i, I we get i != Line(D, I)
By reverse_direction on A, B we get 180 == direction(A, B) - direction(B, A) mod 360
By directions_draw_angle on E, G, C we get exists(angle(E, G, C))
By collinear_definition on A, E, G we get E in Line(A, G), G in Line(A, E), Line(A, E) == Line(A, G), 0 == 2 * angle(E, A, G) mod 360
By directions_draw_angle on A, F, H we get exists(angle(A, F, H))
By line_inequality on i, Line(G, I), B we get i != Line(G, I)
By directions_draw_angle on C, A, F we get exists(angle(C, A, F))
By directions_draw_angle on C, B, H we get exists(angle(C, B, H))
By directions_draw_angle on H, B, G we get exists(angle(H, B, G))
By directions_draw_angle on E, D, B we get exists(angle(E, D, B))
By directions_draw_angle on B, H, F we get exists(angle(B, H, F))
By collinear_definition on F, H, A we get H in Line(A, F), A in Line(F, H), Line(A, F) == Line(F, H), 0 == 2 * angle(H, F, A) mod 360
By directions_draw_angle on F, B, D we get exists(angle(F, B, D))
By directions_draw_angle on F, B, I we get exists(angle(F, B, I))
By reverse_direction on D, F we get 180 == direction(D, F) - direction(F, D) mod 360
By collinear_definition on G, E, C we get E in Line(C, G), C in Line(E, G), Line(C, G) == Line(E, G), 0 == 2 * angle(E, G, C) mod 360
By directions_draw_angle on E, A, B we get exists(angle(E, A, B))
By reverse_direction on E, A we get 180 == direction(E, A) - direction(A, E) mod 360
By collinear_definition on B, F, H we get F in Line(B, H), H in Line(B, F), Line(B, F) == Line(B, H), 0 == 2 * angle(F, B, H) mod 360
By line_inequality on i, Line(C, I), B we get i != Line(C, I)
By reverse_direction on H, A we get 180 == direction(H, A) - direction(A, H) mod 360
By directions_draw_angle on D, A, G we get exists(angle(D, A, G))
By directions_draw_angle on F, B, H we get exists(angle(F, B, H))
By collinear_definition on H, F, B we get F in Line(B, H), B in Line(F, H), Line(B, H) == Line(F, H), 0 == 2 * angle(F, H, B) mod 360
By directions_draw_angle on E, G, D we get exists(angle(E, G, D))
By directions_draw_angle on E, D, G we get exists(angle(E, D, G))
By collinear_definition on H, A, F we get A in Line(F, H), F in Line(A, H), Line(A, H) == Line(F, H), 0 == 2 * angle(A, H, F) mod 360
By directions_draw_angle on I, B, A we get exists(angle(I, B, A))
By line_inequality on Line(D, E), Line(D, F), E we get Line(D, E) != Line(D, F)
By reverse_direction on F, D we get 180 == direction(F, D) - direction(D, F) mod 360
By directions_draw_angle on F, D, I we get exists(angle(F, D, I))
By collinear_definition on F, B, H we get B in Line(F, H), H in Line(B, F), Line(B, F) == Line(F, H), 0 == 2 * angle(B, F, H) mod 360
By reverse_direction on C, A we get 180 == direction(C, A) - direction(A, C) mod 360
By directions_draw_angle on A, C, I we get exists(angle(A, C, I))
By directions_draw_angle on E, D, F we get exists(angle(E, D, F))
By directions_draw_angle on H, B, I we get exists(angle(H, B, I))
By collinear_definition on E, G, A we get G in Line(A, E), A in Line(E, G), Line(A, E) == Line(E, G), 0 == 2 * angle(G, E, A) mod 360
By line_inequality on Line(D, F), Line(B, I), F we get Line(B, I) != Line(D, F)
By reverse_direction on F, A we get 180 == direction(F, A) - direction(A, F) mod 360
By directions_draw_angle on C, D, F we get exists(angle(C, D, F))
By directions_draw_angle on I, G, E we get exists(angle(I, G, E))
By line_inequality on Line(B, G), Line(D, E), B we get Line(B, G) != Line(D, E)
By collinear_definition on F, H, B we get H in Line(B, F), B in Line(F, H), Line(B, F) == Line(F, H), 0 == 2 * angle(H, F, B) mod 360
By reverse_direction on H, F we get 180 == direction(H, F) - direction(F, H) mod 360
By collinear_definition on E, A, G we get A in Line(E, G), G in Line(A, E), Line(A, E) == Line(E, G), 0 == 2 * angle(A, E, G) mod 360
By reverse_direction on B, F we get 180 == direction(B, F) - direction(F, B) mod 360
By reverse_direction on E, D we get 180 == direction(E, D) - direction(D, E) mod 360
By directions_draw_angle on D, A, H we get exists(angle(D, A, H))
By collinear_definition on G, C, E we get C in Line(E, G), E in Line(C, G), Line(C, G) == Line(E, G), 0 == 2 * angle(C, G, E) mod 360
By collinear_definition on C, E, G we get E in Line(C, G), G in Line(C, E), Line(C, E) == Line(C, G), 0 == 2 * angle(E, C, G) mod 360
By reverse_direction on H, B we get 180 == direction(H, B) - direction(B, H) mod 360
By line_inequality on Line(D, E), Line(B, C), D we get Line(B, C) != Line(D, E)
By line_inequality on Line(B, C), Line(C, I), B we get Line(B, C) != Line(C, I)
By directions_draw_angle on E, A, H we get exists(angle(E, A, H))
By directions_draw_angle on C, G, E we get exists(angle(C, G, E))
By directions_draw_angle on D, G, E we get exists(angle(D, G, E))
By directions_draw_angle on A, G, E we get exists(angle(A, G, E))
By reverse_direction on B, A we get 180 == direction(B, A) - direction(A, B) mod 360
By reverse_direction on B, H we get 180 == direction(B, H) - direction(H, B) mod 360
By collinear_definition on A, G, E we get G in Line(A, E), E in Line(A, G), Line(A, E) == Line(A, G), 0 == 2 * angle(G, A, E) mod 360
By directions_draw_angle on E, D, C we get exists(angle(E, D, C))
By line_inequality on Line(C, D), Line(G, I), C we get Line(C, D) != Line(G, I)
By directions_draw_angle on I, B, H we get exists(angle(I, B, H))
By directions_draw_angle on B, F, H we get exists(angle(B, F, H))
By directions_draw_angle on F, H, A we get exists(angle(F, H, A))
By line_inequality on Line(B, G), Line(C, D), G we get Line(B, G) != Line(C, D)
By directions_draw_angle on G, E, A we get exists(angle(G, E, A))
By directions_draw_angle on B, A, C we get exists(angle(B, A, C))
By line_inequality on Line(B, I), i, I we get i != Line(B, I)
By directions_draw_angle on G, B, F we get exists(angle(G, B, F))
By collinear_definition on B, H, F we get H in Line(B, F), F in Line(B, H), Line(B, F) == Line(B, H), 0 == 2 * angle(H, B, F) mod 360
By directions_draw_angle on F, A, G we get exists(angle(F, A, G))
By collinear_definition on H, F, A we get F in Line(A, H), A in Line(F, H), Line(A, H) == Line(F, H), 0 == 2 * angle(F, H, A) mod 360
By collinear_definition on E, C, G we get C in Line(E, G), G in Line(C, E), Line(C, E) == Line(E, G), 0 == 2 * angle(C, E, G) mod 360
By directions_draw_angle on G, A, E we get exists(angle(G, A, E))
By directions_draw_angle on I, D, E we get exists(angle(I, D, E))
By directions_draw_angle on F, D, B we get exists(angle(F, D, B))
By line_inequality on Line(D, E), Line(D, G), E we get Line(D, E) != Line(D, G)
By line_inequality on Line(D, F), Line(C, D), F we get Line(C, D) != Line(D, F)
By line_inequality on Line(D, E), Line(G, I), E we get Line(D, E) != Line(G, I)
By directions_draw_angle on D, B, F we get exists(angle(D, B, F))
By directions_draw_angle on E, C, B we get exists(angle(E, C, B))
By directions_draw_angle on E, A, D we get exists(angle(E, A, D))
By line_inequality on i, Line(D, E), B we get i != Line(D, E)
By line_inequality on Line(D, E), Line(C, I), E we get Line(C, I) != Line(D, E)
By directions_draw_angle on C, E, G we get exists(angle(C, E, G))
By directions_draw_angle on D, B, H we get exists(angle(D, B, H))
By directions_draw_angle on E, C, D we get exists(angle(E, C, D))
By directions_draw_angle on C, A, B we get exists(angle(C, A, B))
By line_inequality on radical_axis(c, d), Line(B, I), C we get Line(B, I) != radical_axis(c, d)
By directions_draw_angle on E, G, A we get exists(angle(E, G, A))
By directions_draw_angle on A, H, F we get exists(angle(A, H, F))
By directions_draw_angle on C, B, A we get exists(angle(C, B, A))
By directions_draw_angle on A, C, D we get exists(angle(A, C, D))
By line_inequality on Line(D, I), Line(B, I), D we get Line(B, I) != Line(D, I)
By directions_draw_angle on G, B, A we get exists(angle(G, B, A))
By line_inequality on i, Line(B, C), D we get i != Line(B, C)
By directions_draw_angle on A, G, I we get exists(angle(A, G, I))
By directions_draw_angle on B, D, F we get exists(angle(B, D, F))
By directions_draw_angle on F, D, C we get exists(angle(F, D, C))
By directions_draw_angle on B, A, G we get exists(angle(B, A, G))
By line_inequality on Line(C, D), Line(B, C), D we get Line(B, C) != Line(C, D)
By line_inequality on Line(G, I), Line(D, F), G we get Line(D, F) != Line(G, I)
By directions_draw_angle on F, D, G we get exists(angle(F, D, G))
By line_inequality on Line(D, G), Line(D, F), G we get Line(D, F) != Line(D, G)
By directions_draw_angle on A, C, B we get exists(angle(A, C, B))
By directions_draw_angle on C, D, E we get exists(angle(C, D, E))
By directions_draw_angle on A, B, I we get exists(angle(A, B, I))
By line_circle_intersection_has_at_most_two_points_0 on E, C, G, c we get G not in c
By directions_draw_angle on F, D, E we get exists(angle(F, D, E))
By directions_draw_angle on D, C, A we get exists(angle(D, C, A))
By line_inequality on Line(D, F), Line(B, G), D we get Line(B, G) != Line(D, F)
By directions_draw_angle on G, B, H we get exists(angle(G, B, H))
By directions_draw_angle on B, C, A we get exists(angle(B, C, A))
By directions_draw_angle on H, B, C we get exists(angle(H, B, C))
By line_inequality on Line(D, G), Line(D, I), G we get Line(D, G) != Line(D, I)
By directions_draw_angle on E, D, I we get exists(angle(E, D, I))
By directions_draw_angle on I, C, E we get exists(angle(I, C, E))
By line_circle_intersection_has_at_most_two_points_0 on C, G, E, d we get E not in d
By directions_draw_angle on A, B, C we get exists(angle(A, B, C))
By directions_draw_angle on E, A, F we get exists(angle(E, A, F))
By line_inequality on Line(C, D), Line(C, I), D we get Line(C, D) != Line(C, I)
By directions_draw_angle on H, F, A we get exists(angle(H, F, A))
By line_inequality on Line(B, I), Line(B, G), I we get Line(B, G) != Line(B, I)
By line_inequality on Line(B, G), Line(B, C), G we get Line(B, C) != Line(B, G)
By directions_draw_angle on H, A, C we get exists(angle(H, A, C))
By directions_draw_angle on C, A, H we get exists(angle(C, A, H))
By directions_draw_angle on D, A, F we get exists(angle(D, A, F))
By directions_draw_angle on A, E, G we get exists(angle(A, E, G))
By directions_draw_angle on D, A, E we get exists(angle(D, A, E))
By directions_draw_angle on G, A, D we get exists(angle(G, A, D))
By directions_draw_angle on I, G, A we get exists(angle(I, G, A))
By directions_draw_angle on I, D, F we get exists(angle(I, D, F))
By line_inequality on Line(B, G), Line(C, I), B we get Line(B, G) != Line(C, I)
By directions_draw_angle on B, D, E we get exists(angle(B, D, E))
By directions_draw_angle on G, A, B we get exists(angle(G, A, B))
By line_inequality on Line(D, E), Line(C, D), E we get Line(C, D) != Line(D, E)
By line_inequality on Line(B, G), Line(D, I), B we get Line(B, G) != Line(D, I)
By directions_draw_angle on D, G, A we get exists(angle(D, G, A))
By directions_draw_angle on E, G, I we get exists(angle(E, G, I))
By directions_draw_angle on F, B, G we get exists(angle(F, B, G))
By directions_draw_angle on G, A, H we get exists(angle(G, A, H))
By directions_draw_angle on H, F, B we get exists(angle(H, F, B))
By directions_draw_angle on F, A, E we get exists(angle(F, A, E))
By directions_draw_angle on F, H, B we get exists(angle(F, H, B))
By directions_draw_angle on G, D, F we get exists(angle(G, D, F))
By line_inequality on Line(D, F), Line(D, I), F we get Line(D, F) != Line(D, I)
By line_inequality on Line(G, I), Line(B, I), G we get Line(B, I) != Line(G, I)
By directions_draw_angle on H, B, D we get exists(angle(H, B, D))
By directions_draw_angle on F, A, D we get exists(angle(F, A, D))
By line_inequality on Line(G, I), Line(D, I), G we get Line(D, I) != Line(G, I)
By line_inequality on Line(B, I), Line(B, C), I we get Line(B, C) != Line(B, I)
By line_inequality on Line(D, I), Line(D, E), I we get Line(D, E) != Line(D, I)
By line_inequality on radical_axis(c, d), i, C we get i != radical_axis(c, d)
By line_inequality on radical_axis(c, d), Line(G, I), C we get Line(G, I) != radical_axis(c, d)
By line_inequality on radical_axis(c, d), f, C we get f != radical_axis(c, d)
By line_inequality on Line(C, I), Line(D, F), I we get Line(C, I) != Line(D, F)
By line_inequality on radical_axis(c, d), Line(B, G), C we get Line(B, G) != radical_axis(c, d)
By line_inequality on radical_axis(c, d), Line(D, G), C we get Line(D, G) != radical_axis(c, d)
By line_inequality on i, Line(B, G), D we get i != Line(B, G)
By line_inequality on radical_axis(c, d), Line(D, E), C we get Line(D, E) != radical_axis(c, d)
By line_inequality on Line(D, I), Line(C, D), I we get Line(C, D) != Line(D, I)
By line_inequality on Line(G, I), Line(D, G), I we get Line(D, G) != Line(G, I)
By line_inequality on Line(C, I), Line(D, I), C we get Line(C, I) != Line(D, I)
By line_inequality on Line(G, I), Line(B, G), I we get Line(B, G) != Line(G, I)
By line_circle_intersection_has_at_most_two_points_0 on H, F, B, c we get B not in c
By line_inequality on radical_axis(c, d), h, C we get h != radical_axis(c, d)
By line_inequality on radical_axis(c, d), Line(D, I), C we get Line(D, I) != radical_axis(c, d)
By line_inequality on Line(D, G), Line(C, D), G we get Line(C, D) != Line(D, G)
By angle_to_center on H, F, C, c we get 2 * angle(H, F, C) == angle(H, center(c), C) mod 360
By angle_to_center on F, H, E, c we get 2 * angle(F, H, E) == angle(F, center(c), E) mod 360
By angle_to_center on C, H, F, c we get 2 * angle(C, H, F) == angle(C, center(c), F) mod 360
By angle_to_center on H, F, E, c we get 2 * angle(H, F, E) == angle(H, center(c), E) mod 360
By angle_to_center on H, E, C, c we get 2 * angle(H, E, C) == angle(H, center(c), C) mod 360
By angle_to_center on H, C, E, c we get 2 * angle(H, C, E) == angle(H, center(c), E) mod 360
By angle_to_center on C, F, H, c we get 2 * angle(C, F, H) == angle(C, center(c), H) mod 360
By angle_to_center on C, E, H, c we get 2 * angle(C, E, H) == angle(C, center(c), H) mod 360
By angle_to_center on E, C, H, c we get 2 * angle(E, C, H) == angle(E, center(c), H) mod 360
By angle_to_center on F, E, C, c we get 2 * angle(F, E, C) == angle(F, center(c), C) mod 360
By angle_to_center on F, C, E, c we get 2 * angle(F, C, E) == angle(F, center(c), E) mod 360
By angle_to_center on E, H, F, c we get 2 * angle(E, H, F) == angle(E, center(c), F) mod 360
By angle_to_center on C, E, F, c we get 2 * angle(C, E, F) == angle(C, center(c), F) mod 360
By angle_to_center on F, H, C, c we get 2 * angle(F, H, C) == angle(F, center(c), C) mod 360
By angle_to_center on E, F, H, c we get 2 * angle(E, F, H) == angle(E, center(c), H) mod 360
By external_angle_bisector_definition_v0_r on H, D, H, F we get Line(D, F) == external_angle_bisector(H, F, H)
By internal_angle_bisector_definition_v0_r on A, F, A, B we get Line(B, F) == internal_angle_bisector(A, B, A)
By internal_angle_bisector_definition_v0_r on B, A, B, F we get Line(A, F) == internal_angle_bisector(B, F, B)
By external_angle_bisector_definition_v0_r on D, G, D, E we get Line(E, G) == external_angle_bisector(D, E, D)
By external_angle_bisector_definition_v0_r on B, D, B, F we get Line(D, F) == external_angle_bisector(B, F, B)
By internal_angle_bisector_definition_v0_r on G, A, G, C we get Line(A, C) == internal_angle_bisector(G, C, G)
By internal_angle_bisector_definition_v0_r on A, D, C, E we get Line(D, E) == internal_angle_bisector(A, E, C)
By external_angle_bisector_definition_v0_r on C, D, G, E we get Line(D, E) == external_angle_bisector(C, E, G)
By internal_angle_bisector_definition_v0_r on E, C, E, A we get Line(A, C) == internal_angle_bisector(E, A, E)
By external_angle_bisector_definition_v0_r on A, D, A, F we get Line(D, F) == external_angle_bisector(A, F, A)
By internal_angle_bisector_definition_v0_r on C, G, C, A we get Line(A, G) == internal_angle_bisector(C, A, C)
By external_angle_bisector_definition_v0_r on B, D, H, F we get Line(D, F) == external_angle_bisector(B, F, H)
By external_angle_bisector_definition_v0_r on D, A, D, F we get Line(A, F) == external_angle_bisector(D, F, D)
By external_angle_bisector_definition_v0_r on A, D, A, E we get Line(D, E) == external_angle_bisector(A, E, A)
By internal_angle_bisector_definition_v0_r on B, F, B, A we get Line(A, F) == internal_angle_bisector(B, A, B)
By internal_angle_bisector_definition_v0_r on A, E, A, C we get Line(C, E) == internal_angle_bisector(A, C, A)
By external_angle_bisector_definition_v0_r on G, D, G, E we get Line(D, E) == external_angle_bisector(G, E, G)
By internal_angle_bisector_definition_v0_r on C, A, C, G we get Line(A, G) == internal_angle_bisector(C, G, C)
By internal_angle_bisector_definition_v0_r on G, D, A, E we get Line(D, E) == internal_angle_bisector(A, E, G)
By internal_angle_bisector_definition_v0_r on A, B, A, H we get Line(B, H) == internal_angle_bisector(A, H, A)
By internal_angle_bisector_definition_v0_r on A, C, A, E we get Line(C, E) == internal_angle_bisector(A, E, A)
By external_angle_bisector_definition_v0_r on D, H, D, F we get Line(F, H) == external_angle_bisector(D, F, D)
By reverse_direction on A, D we get 180 == direction(A, D) - direction(D, A) mod 360
By external_angle_bisector_definition_v0_r on D, A, D, E we get Line(A, E) == external_angle_bisector(D, E, D)
By internal_angle_bisector_definition_v0_r on B, H, B, A we get Line(A, H) == internal_angle_bisector(B, A, B)
By external_angle_bisector_definition_v0_r on D, B, D, F we get Line(B, F) == external_angle_bisector(D, F, D)
By internal_angle_bisector_definition_v0_r on F, B, F, A we get Line(A, B) == internal_angle_bisector(F, A, F)
By external_angle_bisector_definition_v0_r on D, C, D, E we get Line(C, E) == external_angle_bisector(D, E, D)
By external_angle_bisector_definition_v0_r on C, D, C, E we get Line(D, E) == external_angle_bisector(C, E, C)
By internal_angle_bisector_definition_v0_r on A, G, A, C we get Line(C, G) == internal_angle_bisector(A, C, A)
By internal_angle_bisector_definition_v0_r on H, B, H, A we get Line(A, B) == internal_angle_bisector(H, A, H)
By internal_angle_bisector_definition_v0_r on E, A, E, C we get Line(A, C) == internal_angle_bisector(E, C, E)
By internal_angle_bisector_definition_v0_r on A, H, A, B we get Line(B, H) == internal_angle_bisector(A, B, A)
By internal_angle_bisector_definition_v0_r on A, B, A, F we get Line(B, F) == internal_angle_bisector(A, F, A)
By internal_angle_bisector_definition_v0_r on A, D, B, F we get Line(D, F) == internal_angle_bisector(A, F, B)
By internal_angle_bisector_definition_v0_r on G, C, G, A we get Line(A, C) == internal_angle_bisector(G, A, G)
By internal_angle_bisector_definition_v0_r on A, D, H, F we get Line(D, F) == internal_angle_bisector(A, F, H)
By internal_angle_bisector_definition_v0_r on C, E, C, A we get Line(A, E) == internal_angle_bisector(C, A, C)
By internal_angle_bisector_definition_v0_r on H, A, H, B we get Line(A, B) == internal_angle_bisector(H, B, H)
By internal_angle_bisector_definition_v0_r on B, A, B, H we get Line(A, H) == internal_angle_bisector(B, H, B)
By internal_angle_bisector_definition_v0_r on F, A, F, B we get Line(A, B) == internal_angle_bisector(F, B, F)
By internal_angle_bisector_definition_v0_r on A, C, A, G we get Line(C, G) == internal_angle_bisector(A, G, A)
By internal_angle_bisector_definition_v0_r on C, A, C, E we get Line(A, E) == internal_angle_bisector(C, E, C)
By angle_to_center on C, H, E, c we get 2 * angle(C, H, E) == angle(C, center(c), E) mod 360
By angle_to_center on E, F, C, c we get 2 * angle(E, F, C) == angle(E, center(c), C) mod 360
By angle_to_center on F, E, H, c we get 2 * angle(F, E, H) == angle(F, center(c), H) mod 360
By angle_to_center on E, H, C, c we get 2 * angle(E, H, C) == angle(E, center(c), C) mod 360
By angle_to_center on H, E, F, c we get 2 * angle(H, E, F) == angle(H, center(c), F) mod 360
By angle_to_center on F, C, H, c we get 2 * angle(F, C, H) == angle(F, center(c), H) mod 360
By angle_to_center on C, F, E, c we get 2 * angle(C, F, E) == angle(C, center(c), E) mod 360
By angle_to_center on H, C, F, c we get 2 * angle(H, C, F) == angle(H, center(c), F) mod 360
By anti_similar_triangle_basic_properties on B, C, I, C, B, I we get not_collinear(B, C, I), not_collinear(B, C, I), angle(B, C, I) == 0 - angle(C, B, I) mod 360, angle(C, I, B) == 0 - angle(B, I, C) mod 360, angle(I, B, C) == 0 - angle(I, C, B) mod 360, log(distance(B, C)) + log(distance(B, I)) == log(distance(B, C)) + log(distance(C, I)), log(distance(B, I)) + log(distance(B, I)) == log(distance(C, I)) + log(distance(C, I)), log(distance(B, I)) + log(distance(B, C)) == log(distance(C, I)) + log(distance(B, C))
By anti_similar_triangle_basic_properties on B, G, I, G, B, I we get not_collinear(B, G, I), not_collinear(B, G, I), angle(B, G, I) == 0 - angle(G, B, I) mod 360, angle(G, I, B) == 0 - angle(B, I, G) mod 360, angle(I, B, G) == 0 - angle(I, G, B) mod 360, log(distance(B, G)) + log(distance(B, I)) == log(distance(B, G)) + log(distance(G, I)), log(distance(B, I)) + log(distance(B, I)) == log(distance(G, I)) + log(distance(G, I)), log(distance(B, I)) + log(distance(B, G)) == log(distance(G, I)) + log(distance(B, G))
By anti_similar_triangle_basic_properties on I, G, D, I, D, G we get not_collinear(D, G, I), not_collinear(D, G, I), angle(I, G, D) == 0 - angle(I, D, G) mod 360, angle(G, D, I) == 0 - angle(D, G, I) mod 360, angle(D, I, G) == 0 - angle(G, I, D) mod 360, log(distance(D, I)) + log(distance(D, G)) == log(distance(G, I)) + log(distance(D, G)), log(distance(D, G)) + log(distance(D, I)) == log(distance(D, G)) + log(distance(G, I)), log(distance(D, I)) + log(distance(D, I)) == log(distance(G, I)) + log(distance(G, I))
By anti_similar_triangle_basic_properties on D, I, C, C, I, D we get not_collinear(C, D, I), not_collinear(C, D, I), angle(D, I, C) == 0 - angle(C, I, D) mod 360, angle(I, C, D) == 0 - angle(I, D, C) mod 360, angle(C, D, I) == 0 - angle(D, C, I) mod 360, log(distance(C, I)) + log(distance(C, I)) == log(distance(D, I)) + log(distance(D, I)), log(distance(C, I)) + log(distance(C, D)) == log(distance(D, I)) + log(distance(C, D)), log(distance(C, D)) + log(distance(C, I)) == log(distance(C, D)) + log(distance(D, I))
By anti_similar_triangle_basic_properties on D, B, I, B, D, I we get not_collinear(B, D, I), not_collinear(B, D, I), angle(D, B, I) == 0 - angle(B, D, I) mod 360, angle(B, I, D) == 0 - angle(D, I, B) mod 360, angle(I, D, B) == 0 - angle(I, B, D) mod 360, log(distance(B, D)) + log(distance(B, I)) == log(distance(B, D)) + log(distance(D, I)), log(distance(B, I)) + log(distance(B, I)) == log(distance(D, I)) + log(distance(D, I)), log(distance(B, I)) + log(distance(B, D)) == log(distance(D, I)) + log(distance(B, D))
By anti_similar_triangle_basic_properties on C, G, I, G, C, I we get not_collinear(C, G, I), not_collinear(C, G, I), angle(C, G, I) == 0 - angle(G, C, I) mod 360, angle(G, I, C) == 0 - angle(C, I, G) mod 360, angle(I, C, G) == 0 - angle(I, G, C) mod 360, log(distance(C, G)) + log(distance(C, I)) == log(distance(C, G)) + log(distance(G, I)), log(distance(C, I)) + log(distance(C, I)) == log(distance(G, I)) + log(distance(G, I)), log(distance(C, I)) + log(distance(C, G)) == log(distance(G, I)) + log(distance(C, G))
By power_of_a_point_definition on A, H, F, c we get log(power_of_a_point(A, c)) == log(distance(A, H)) + log(distance(A, F))
By power_of_a_point_definition on A, G, C, d we get log(power_of_a_point(A, d)) == log(distance(A, G)) + log(distance(A, C))
By power_of_a_point_definition on A, C, E, c we get log(power_of_a_point(A, c)) == log(distance(A, C)) + log(distance(A, E))
By concyclic_sufficient_conditions_v1 on B, I, C, A we get concyclic(A, B, C, I)
By line_intersection_definition on orthocenter(D, E, G), Line(D, E), g we get orthocenter(D, E, G) == line_intersection(g, Line(D, E))
By line_intersection_definition on orthocenter(B, D, F), f, Line(D, F) we get orthocenter(B, D, F) == line_intersection(f, Line(D, F))
By line_intersection_definition on orthocenter(A, D, E), g, Line(D, E) we get orthocenter(A, D, E) == line_intersection(g, Line(D, E))
By line_intersection_definition on orthocenter(A, D, F), Line(D, F), f we get orthocenter(A, D, F) == line_intersection(f, Line(D, F))
By line_intersection_definition on orthocenter(C, D, E), g, Line(D, E) we get orthocenter(C, D, E) == line_intersection(g, Line(D, E))
By line_intersection_definition on orthocenter(D, F, H), Line(D, F), f we get orthocenter(D, F, H) == line_intersection(f, Line(D, F))
By line_intersection_definition on B, Line(B, C), i we get B == line_intersection(i, Line(B, C))
By perpendicular_line_definition on orthocenter(D, E, G), g, Line(D, E) we get g == perpendicular_line(orthocenter(D, E, G), Line(D, E))
By line_intersection_definition on I, Line(D, I), Line(B, I) we get I == line_intersection(Line(B, I), Line(D, I))
By line_intersection_definition on C, Line(C, D), Line(C, I) we get C == line_intersection(Line(C, D), Line(C, I))
By perpendicular_line_definition on D, h, altitude(F, A, D) we get h == perpendicular_line(D, altitude(F, A, D))
By concurrent_sufficient_conditions on Line(B, I), Line(B, C), f we get concurrent(f, Line(B, C), Line(B, I))
By line_intersection_definition on G, Line(G, I), Line(D, G) we get G == line_intersection(Line(D, G), Line(G, I))
By perpendicular_line_definition on orthocenter(B, D, F), Line(D, F), f we get Line(D, F) == perpendicular_line(orthocenter(B, D, F), f)
By perpendicular_line_definition on orthocenter(A, D, E), altitude(E, A, D), h we get altitude(E, A, D) == perpendicular_line(orthocenter(A, D, E), h)
By concurrent_sufficient_conditions on i, Line(D, G), h we get concurrent(h, i, Line(D, G))
By line_intersection_definition on D, Line(D, F), Line(C, D) we get D == line_intersection(Line(C, D), Line(D, F))
By line_intersection_definition on B, Line(B, C), Line(B, G) we get B == line_intersection(Line(B, C), Line(B, G))
By line_intersection_definition on G, Line(D, G), Line(B, G) we get G == line_intersection(Line(B, G), Line(D, G))
By line_intersection_definition on D, Line(D, E), Line(C, D) we get D == line_intersection(Line(C, D), Line(D, E))
By concurrent_sufficient_conditions on Line(B, G), Line(G, I), g we get concurrent(g, Line(B, G), Line(G, I))
By perpendicular_line_definition on D, i, altitude(F, B, D) we get i == perpendicular_line(D, altitude(F, B, D))
By perpendicular_line_definition on D, Line(D, G), altitude(E, D, G) we get Line(D, G) == perpendicular_line(D, altitude(E, D, G))
By line_intersection_definition on G, Line(B, G), Line(G, I) we get G == line_intersection(Line(B, G), Line(G, I))
By line_intersection_definition on I, Line(B, I), Line(G, I) we get I == line_intersection(Line(B, I), Line(G, I))
By perpendicular_line_definition on orthocenter(B, D, F), altitude(F, B, D), i we get altitude(F, B, D) == perpendicular_line(orthocenter(B, D, F), i)
By concurrent_sufficient_conditions on Line(D, E), Line(C, D), h we get concurrent(h, Line(C, D), Line(D, E))
By line_intersection_definition on D, Line(D, I), Line(D, E) we get D == line_intersection(Line(D, E), Line(D, I))
By perpendicular_line_definition on orthocenter(C, D, E), altitude(E, C, D), Line(C, D) we get altitude(E, C, D) == perpendicular_line(orthocenter(C, D, E), Line(C, D))
By concurrent_sufficient_conditions on Line(C, D), Line(D, F), i we get concurrent(i, Line(C, D), Line(D, F))
By line_intersection_definition on D, Line(D, F), Line(D, E) we get D == line_intersection(Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, G), Line(D, F), h we get concurrent(h, Line(D, F), Line(D, G))
By line_intersection_definition on B, i, Line(B, I) we get B == line_intersection(i, Line(B, I))
By perpendicular_line_definition on orthocenter(B, D, F), f, Line(D, F) we get f == perpendicular_line(orthocenter(B, D, F), Line(D, F))
By line_intersection_definition on D, Line(C, D), Line(D, I) we get D == line_intersection(Line(C, D), Line(D, I))
By perpendicular_line_definition on D, Line(D, H), altitude(F, D, H) we get Line(D, H) == perpendicular_line(D, altitude(F, D, H))
By concurrent_sufficient_conditions on Line(B, G), Line(B, C), f we get concurrent(f, Line(B, C), Line(B, G))
By concurrent_sufficient_conditions on Line(C, I), Line(C, D), g we get concurrent(g, Line(C, D), Line(C, I))
By concurrent_sufficient_conditions on Line(D, G), i, h we get concurrent(h, i, Line(D, G))
By concurrent_sufficient_conditions on Line(D, E), i, h we get concurrent(h, i, Line(D, E))
By perpendicular_line_definition on orthocenter(A, D, E), Line(D, E), g we get Line(D, E) == perpendicular_line(orthocenter(A, D, E), g)
By perpendicular_line_definition on orthocenter(D, F, H), altitude(F, D, H), Line(D, H) we get altitude(F, D, H) == perpendicular_line(orthocenter(D, F, H), Line(D, H))
By line_intersection_definition on D, i, Line(D, G) we get D == line_intersection(i, Line(D, G))
By perpendicular_line_definition on orthocenter(A, D, F), f, Line(D, F) we get f == perpendicular_line(orthocenter(A, D, F), Line(D, F))
By concurrent_sufficient_conditions on Line(B, C), Line(C, I), g we get concurrent(g, Line(B, C), Line(C, I))
By perpendicular_line_definition on orthocenter(D, E, G), Line(D, E), g we get Line(D, E) == perpendicular_line(orthocenter(D, E, G), g)
By line_intersection_definition on D, i, Line(D, E) we get D == line_intersection(i, Line(D, E))
By perpendicular_line_definition on H, Line(D, H), altitude(F, D, H) we get Line(D, H) == perpendicular_line(H, altitude(F, D, H))
By concurrent_sufficient_conditions on Line(D, E), Line(D, G), h we get concurrent(h, Line(D, E), Line(D, G))
By perpendicular_line_definition on orthocenter(C, D, E), g, Line(D, E) we get g == perpendicular_line(orthocenter(C, D, E), Line(D, E))
By perpendicular_line_definition on B, i, altitude(F, B, D) we get i == perpendicular_line(B, altitude(F, B, D))
By concurrent_sufficient_conditions on i, Line(B, G), f we get concurrent(f, i, Line(B, G))
By concurrent_sufficient_conditions on Line(C, D), Line(D, F), h we get concurrent(h, Line(C, D), Line(D, F))
By line_intersection_definition on C, Line(B, C), Line(C, I) we get C == line_intersection(Line(B, C), Line(C, I))
By concurrent_sufficient_conditions on Line(C, I), Line(B, C), g we get concurrent(g, Line(B, C), Line(C, I))
By concurrent_sufficient_conditions on Line(G, I), Line(D, G), g we get concurrent(g, Line(D, G), Line(G, I))
By line_intersection_definition on B, Line(B, G), Line(B, I) we get B == line_intersection(Line(B, G), Line(B, I))
By perpendicular_line_definition on D, h, altitude(E, A, D) we get h == perpendicular_line(D, altitude(E, A, D))
By perpendicular_line_definition on A, h, altitude(F, A, D) we get h == perpendicular_line(A, altitude(F, A, D))
By concurrent_sufficient_conditions on Line(D, G), Line(C, D), h we get concurrent(h, Line(C, D), Line(D, G))
By concurrent_sufficient_conditions on Line(B, C), Line(B, I), f we get concurrent(f, Line(B, C), Line(B, I))
By line_intersection_definition on D, Line(D, G), Line(D, I) we get D == line_intersection(Line(D, G), Line(D, I))
By perpendicular_line_definition on A, h, altitude(E, A, D) we get h == perpendicular_line(A, altitude(E, A, D))
By concurrent_sufficient_conditions on Line(C, D), Line(B, C), g we get concurrent(g, Line(B, C), Line(C, D))
By line_intersection_definition on D, Line(D, G), Line(D, E) we get D == line_intersection(Line(D, E), Line(D, G))
By perpendicular_line_definition on orthocenter(C, D, E), Line(D, E), g we get Line(D, E) == perpendicular_line(orthocenter(C, D, E), g)
By concurrent_sufficient_conditions on Line(B, C), Line(B, G), f we get concurrent(f, Line(B, C), Line(B, G))
By perpendicular_line_definition on G, Line(D, G), altitude(E, D, G) we get Line(D, G) == perpendicular_line(G, altitude(E, D, G))
By line_unique_intersection_v0 on g, Line(D, E), orthocenter(A, D, E), orthocenter(C, D, E) we get orthocenter(A, D, E) == orthocenter(C, D, E)
By line_intersection_definition on I, Line(B, I), Line(C, I) we get I == line_intersection(Line(B, I), Line(C, I))
By perpendicular_line_definition on orthocenter(D, F, H), Line(D, F), f we get Line(D, F) == perpendicular_line(orthocenter(D, F, H), f)
By line_intersection_definition on D, Line(D, F), Line(D, G) we get D == line_intersection(Line(D, F), Line(D, G))
By concurrent_sufficient_conditions on Line(B, C), i, f we get concurrent(f, i, Line(B, C))
By concurrent_sufficient_conditions on Line(C, D), Line(C, I), g we get concurrent(g, Line(C, D), Line(C, I))
By line_intersection_definition on D, i, Line(D, I) we get D == line_intersection(i, Line(D, I))
By line_intersection_definition on D, Line(D, F), Line(D, I) we get D == line_intersection(Line(D, F), Line(D, I))
By concurrent_sufficient_conditions on Line(C, D), Line(D, E), h we get concurrent(h, Line(C, D), Line(D, E))
By concurrent_sufficient_conditions on Line(D, F), Line(C, D), h we get concurrent(h, Line(C, D), Line(D, F))
By concurrent_sufficient_conditions on Line(D, E), Line(D, F), h we get concurrent(h, Line(D, E), Line(D, F))
By concurrent_sufficient_conditions on Line(D, F), Line(C, D), i we get concurrent(i, Line(C, D), Line(D, F))
By line_intersection_definition on I, Line(D, I), Line(G, I) we get I == line_intersection(Line(D, I), Line(G, I))
By concurrent_sufficient_conditions on Line(B, G), i, f we get concurrent(f, i, Line(B, G))
By line_intersection_definition on C, Line(B, C), Line(C, D) we get C == line_intersection(Line(B, C), Line(C, D))
By perpendicular_line_definition on orthocenter(A, D, E), g, Line(D, E) we get g == perpendicular_line(orthocenter(A, D, E), Line(D, E))
By concurrent_sufficient_conditions on Line(D, F), Line(D, E), h we get concurrent(h, Line(D, E), Line(D, F))
By perpendicular_line_definition on orthocenter(D, E, G), altitude(E, D, G), Line(D, G) we get altitude(E, D, G) == perpendicular_line(orthocenter(D, E, G), Line(D, G))
By concurrent_sufficient_conditions on Line(D, G), Line(D, E), h we get concurrent(h, Line(D, E), Line(D, G))
By perpendicular_line_definition on orthocenter(A, D, F), altitude(F, A, D), h we get altitude(F, A, D) == perpendicular_line(orthocenter(A, D, F), h)
By concurrent_sufficient_conditions on Line(B, I), i, f we get concurrent(f, i, Line(B, I))
By line_intersection_definition on B, Line(B, I), Line(B, C) we get B == line_intersection(Line(B, C), Line(B, I))
By line_intersection_definition on I, Line(G, I), Line(C, I) we get I == line_intersection(Line(C, I), Line(G, I))
By concurrent_sufficient_conditions on i, Line(B, I), f we get concurrent(f, i, Line(B, I))
By concurrent_sufficient_conditions on Line(G, I), Line(B, G), g we get concurrent(g, Line(B, G), Line(G, I))
By concurrent_sufficient_conditions on Line(B, G), Line(B, I), f we get concurrent(f, Line(B, G), Line(B, I))
By line_intersection_definition on D, Line(D, G), Line(C, D) we get D == line_intersection(Line(C, D), Line(D, G))
By perpendicular_line_definition on D, Line(C, D), altitude(E, C, D) we get Line(C, D) == perpendicular_line(D, altitude(E, C, D))
By line_unique_intersection_v0 on Line(D, E), g, orthocenter(D, E, G), E we get E == orthocenter(D, E, G)
By line_intersection_definition on B, i, Line(B, G) we get B == line_intersection(i, Line(B, G))
By perpendicular_line_definition on orthocenter(A, D, F), Line(D, F), f we get Line(D, F) == perpendicular_line(orthocenter(A, D, F), f)
By concurrent_sufficient_conditions on i, Line(B, C), f we get concurrent(f, i, Line(B, C))
By concurrent_sufficient_conditions on Line(C, D), Line(D, G), h we get concurrent(h, Line(C, D), Line(D, G))
By line_intersection_definition on I, Line(D, I), Line(C, I) we get I == line_intersection(Line(C, I), Line(D, I))
By concurrent_sufficient_conditions on Line(D, F), Line(D, G), h we get concurrent(h, Line(D, F), Line(D, G))
By perpendicular_line_definition on C, Line(C, D), altitude(E, C, D) we get Line(C, D) == perpendicular_line(C, altitude(E, C, D))
By concurrent_sufficient_conditions on i, Line(D, E), h we get concurrent(h, i, Line(D, E))
By concurrent_sufficient_conditions on Line(D, G), Line(G, I), g we get concurrent(g, Line(D, G), Line(G, I))
By concurrent_sufficient_conditions on Line(B, G), Line(D, G), g we get concurrent(g, Line(B, G), Line(D, G))
By concurrent_sufficient_conditions on Line(B, C), Line(C, D), g we get concurrent(g, Line(B, C), Line(C, D))
By concurrent_sufficient_conditions on Line(D, G), Line(B, G), g we get concurrent(g, Line(B, G), Line(D, G))
By perpendicular_line_definition on orthocenter(D, F, H), f, Line(D, F) we get f == perpendicular_line(orthocenter(D, F, H), Line(D, F))
By concurrent_sufficient_conditions on Line(B, I), Line(B, G), f we get concurrent(f, Line(B, G), Line(B, I))
By line_unique_intersection_v0 on Line(D, E), g, E, orthocenter(A, D, E) we get E == orthocenter(A, D, E)
By line_unique_intersection_v0 on Line(D, F), f, F, orthocenter(B, D, F) we get F == orthocenter(B, D, F)
By line_unique_intersection_v0 on f, Line(D, F), orthocenter(B, D, F), orthocenter(D, F, H) we get orthocenter(B, D, F) == orthocenter(D, F, H)
By line_unique_intersection_v0 on f, Line(D, F), orthocenter(D, F, H), F we get F == orthocenter(D, F, H)
By line_unique_intersection_v0 on Line(D, E), g, E, orthocenter(C, D, E) we get E == orthocenter(C, D, E)
By line_unique_intersection_v0 on Line(D, E), g, orthocenter(C, D, E), orthocenter(D, E, G) we get orthocenter(C, D, E) == orthocenter(D, E, G)
By line_unique_intersection_v0 on Line(D, F), f, orthocenter(D, F, H), orthocenter(A, D, F) we get orthocenter(A, D, F) == orthocenter(D, F, H)
By line_unique_intersection_v0 on Line(D, F), f, orthocenter(B, D, F), orthocenter(A, D, F) we get orthocenter(A, D, F) == orthocenter(B, D, F)
By line_unique_intersection_v0 on f, Line(D, F), F, orthocenter(A, D, F) we get F == orthocenter(A, D, F)
By line_unique_intersection_v0 on Line(D, E), g, orthocenter(A, D, E), orthocenter(D, E, G) we get orthocenter(A, D, E) == orthocenter(D, E, G)
By perpendicular_direction_conditions_v0 on D, A, G, B we get perpendicular(Line(A, D), Line(B, G))
By perpendicular_direction_conditions_v0 on B, G, I, D we get perpendicular(Line(B, G), Line(D, I))
By different_points_v1 on E, center(c) we get 0 != distance(E, center(c))
By different_points_v1 on center(c), H we get 0 != distance(H, center(c))
By different_points_v1 on C, H we get 0 != distance(C, H)
By different_points_v1 on F, C we get 0 != distance(C, F)
By different_points_v1 on center(c), C we get 0 != distance(C, center(c))
By different_points_v1 on D, H we get 0 != distance(D, H)
By different_points_v1 on F, E we get 0 != distance(E, F)
By different_points_v1 on H, E we get 0 != distance(E, H)
By different_points_v1 on center(c), F we get 0 != distance(F, center(c))
By directions_draw_angle on H, E, D we get exists(angle(H, E, D))
By in_imply_collinear on orthocenter(B, D, F), F, D we get collinear(D, F, orthocenter(B, D, F))
By in_imply_collinear on orthocenter(D, F, H), A, B we get collinear(A, B, orthocenter(D, F, H))
By in_imply_collinear on orthocenter(C, D, E), A, E we get collinear(A, E, orthocenter(C, D, E))
By line_inequality on Line(C, H), Line(D, G), H we get Line(C, H) != Line(D, G)
By in_imply_collinear on orthocenter(A, D, F), B, F we get collinear(B, F, orthocenter(A, D, F))
By in_imply_collinear on orthocenter(D, E, G), E, G we get collinear(E, G, orthocenter(D, E, G))
By in_imply_collinear on orthocenter(D, F, H), F, A we get collinear(A, F, orthocenter(D, F, H))
By in_imply_collinear on orthocenter(A, D, E), E, A we get collinear(A, E, orthocenter(A, D, E))
By line_inequality on Line(E, F), Line(C, D), E we get Line(C, D) != Line(E, F)
By in_imply_collinear on orthocenter(D, E, G), A, G we get collinear(A, G, orthocenter(D, E, G))
By line_inequality on Line(E, center(c)), f, E we get f != Line(E, center(c))
By in_imply_collinear on orthocenter(B, D, F), B, F we get collinear(B, F, orthocenter(B, D, F))
By directions_draw_angle on B, H, C we get exists(angle(B, H, C))
By line_inequality on Line(E, F), Line(D, F), E we get Line(D, F) != Line(E, F)
By in_imply_collinear on orthocenter(D, F, H), B, F we get collinear(B, F, orthocenter(D, F, H))
By in_imply_collinear on orthocenter(A, D, F), F, D we get collinear(D, F, orthocenter(A, D, F))
By in_imply_collinear on orthocenter(B, D, F), F, H we get collinear(F, H, orthocenter(B, D, F))
By line_inequality on altitude(E, A, D), Line(D, I), E we get Line(D, I) != altitude(E, A, D)
By in_imply_collinear on orthocenter(B, D, F), A, H we get collinear(A, H, orthocenter(B, D, F))
By in_imply_collinear on orthocenter(D, F, H), F, D we get collinear(D, F, orthocenter(D, F, H))
By sas_anti_similarity on D, I, G, D, I, B we get anti_similar_triangles(B, D, I, G, D, I)
By in_imply_collinear on orthocenter(B, D, F), B, A we get collinear(A, B, orthocenter(B, D, F))
By in_imply_collinear on orthocenter(A, D, F), B, H we get collinear(B, H, orthocenter(A, D, F))
By in_imply_collinear on orthocenter(A, D, E), G, A we get collinear(A, G, orthocenter(A, D, E))
By in_imply_collinear on orthocenter(C, D, E), E, G we get collinear(E, G, orthocenter(C, D, E))
By in_imply_collinear on orthocenter(C, D, E), E, C we get collinear(C, E, orthocenter(C, D, E))
By in_imply_collinear on orthocenter(A, D, F), H, F we get collinear(F, H, orthocenter(A, D, F))
By in_imply_collinear on orthocenter(B, D, F), H, B we get collinear(B, H, orthocenter(B, D, F))
By line_containment_inequality on orthocenter(D, E, G), B, Line(D, E) we get B != orthocenter(D, E, G)
By in_imply_collinear on orthocenter(D, E, G), C, G we get collinear(C, G, orthocenter(D, E, G))
By in_imply_collinear on orthocenter(C, D, E), G, A we get collinear(A, G, orthocenter(C, D, E))
By in_imply_collinear on orthocenter(D, E, G), E, D we get collinear(D, E, orthocenter(D, E, G))
By in_imply_collinear on orthocenter(A, D, E), D, E we get collinear(D, E, orthocenter(A, D, E))
By in_imply_collinear on orthocenter(A, D, E), E, G we get collinear(E, G, orthocenter(A, D, E))
By in_imply_collinear on orthocenter(D, F, H), H, A we get collinear(A, H, orthocenter(D, F, H))
By in_imply_collinear on orthocenter(D, E, G), C, E we get collinear(C, E, orthocenter(D, E, G))
By in_imply_collinear on orthocenter(C, D, E), D, E we get collinear(D, E, orthocenter(C, D, E))
By in_imply_collinear on orthocenter(D, E, G), C, A we get collinear(A, C, orthocenter(D, E, G))
By in_imply_collinear on orthocenter(A, D, E), E, C we get collinear(C, E, orthocenter(A, D, E))
By in_imply_collinear on orthocenter(D, F, H), F, H we get collinear(F, H, orthocenter(D, F, H))
By in_imply_collinear on orthocenter(A, D, E), A, C we get collinear(A, C, orthocenter(A, D, E))
By in_imply_collinear on orthocenter(A, D, F), A, B we get collinear(A, B, orthocenter(A, D, F))
By in_imply_collinear on orthocenter(C, D, E), A, C we get collinear(A, C, orthocenter(C, D, E))
By in_imply_collinear on orthocenter(A, D, F), H, A we get collinear(A, H, orthocenter(A, D, F))
By in_imply_collinear on orthocenter(B, D, F), F, A we get collinear(A, F, orthocenter(B, D, F))
By directions_draw_angle on F, C, D we get exists(angle(F, C, D))
By line_inequality on altitude(E, A, D), Line(B, C), E we get Line(B, C) != altitude(E, A, D)
By line_containment_inequality on orthocenter(A, D, E), A, Line(D, E) we get A != orthocenter(A, D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on I, H, E we get I not in Line(E, H)
By in_imply_collinear on orthocenter(C, D, E), C, G we get collinear(C, G, orthocenter(C, D, E))
By line_inequality on Line(F, center(c)), Line(B, G), F we get Line(B, G) != Line(F, center(c))
By in_imply_collinear on orthocenter(A, D, E), G, C we get collinear(C, G, orthocenter(A, D, E))
By in_imply_collinear on orthocenter(D, E, G), A, E we get collinear(A, E, orthocenter(D, E, G))
By line_inequality on altitude(F, B, D), Line(D, E), F we get Line(D, E) != altitude(F, B, D)
By in_imply_collinear on orthocenter(A, D, F), A, F we get collinear(A, F, orthocenter(A, D, F))
By in_imply_collinear on orthocenter(D, F, H), H, B we get collinear(B, H, orthocenter(D, F, H))
By line_containment_inequality on orthocenter(A, D, F), B, Line(D, F) we get B != orthocenter(A, D, F)
By line_containment_inequality on orthocenter(D, E, G), H, g we get H != orthocenter(D, E, G)
By line_inequality on Line(H, center(c)), g, H we get g != Line(H, center(c))
By directions_draw_angle on A, H, E we get exists(angle(A, H, E))
By directions_draw_angle on G, E, H we get exists(angle(G, E, H))
By line_inequality on Line(C, F), h, C we get h != Line(C, F)
By line_inequality on Line(E, H), Line(D, I), H we get Line(D, I) != Line(E, H)
By line_inequality on Line(F, center(c)), Line(B, I), F we get Line(B, I) != Line(F, center(c))
By line_inequality on Line(C, F), Line(B, I), F we get Line(B, I) != Line(C, F)
By line_inequality on Line(H, center(c)), Line(B, G), H we get Line(B, G) != Line(H, center(c))
By directions_draw_angle on C, H, B we get exists(angle(C, H, B))
By directions_draw_angle on A, E, F we get exists(angle(A, E, F))
By not_in_line_equivalent_to_not_collinear_v0_r on D, C, F we get D not in Line(C, F)
By sas_congruence on D, I, G, B, I, D we get congruent_triangles(B, D, I, D, G, I)
By line_inequality on altitude(F, A, D), h, F we get h != altitude(F, A, D)
By line_inequality on Line(H, center(c)), Line(C, D), H we get Line(C, D) != Line(H, center(c))
By sas_congruence on B, I, D, D, I, G we get congruent_triangles(B, D, I, D, G, I)
By reverse_direction on C, F we get 180 == direction(C, F) - direction(F, C) mod 360
By sas_anti_similarity on B, I, D, G, I, D we get anti_similar_triangles(B, D, I, G, D, I)
By line_inequality on Line(C, center(c)), Line(D, E), C we get Line(D, E) != Line(C, center(c))
By directions_draw_angle on F, E, A we get exists(angle(F, E, A))
By line_inequality on Line(E, F), h, F we get h != Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on G, H, E we get G not in Line(E, H)
By line_inequality on Line(E, F), Line(D, I), E we get Line(D, I) != Line(E, F)
By sas_anti_congruence on D, I, B, D, I, G we get anti_congruent_triangles(B, D, I, G, D, I)
By line_inequality on Line(D, H), Line(B, G), H we get Line(B, G) != Line(D, H)
By line_inequality on Line(C, F), Line(C, I), F we get Line(C, F) != Line(C, I)
By line_inequality on Line(C, F), Line(D, I), F we get Line(C, F) != Line(D, I)
By line_containment_inequality on orthocenter(B, D, F), H, Line(D, F) we get H != orthocenter(B, D, F)
By directions_draw_angle on E, F, D we get exists(angle(E, F, D))
By not_in_line_equivalent_to_not_collinear_v0_r on H, E, F we get H not in Line(E, F)
By line_inequality on altitude(F, B, D), Line(D, G), F we get Line(D, G) != altitude(F, B, D)
By line_inequality on Line(C, H), Line(C, D), H we get Line(C, D) != Line(C, H)
By directions_draw_angle on D, F, E we get exists(angle(D, F, E))
By not_in_line_equivalent_to_not_collinear_v0_r on G, C, H we get G not in Line(C, H)
By line_inequality on Line(E, center(c)), Line(C, D), E we get Line(C, D) != Line(E, center(c))
By directions_draw_angle on B, H, E we get exists(angle(B, H, E))
By line_inequality on Line(E, H), Line(B, I), H we get Line(B, I) != Line(E, H)
By line_containment_inequality on orthocenter(D, E, G), I, g we get I != orthocenter(D, E, G)
By sas_anti_congruence on D, I, G, D, I, B we get anti_congruent_triangles(B, D, I, G, D, I)
By line_inequality on altitude(F, D, H), Line(C, I), F we get Line(C, I) != altitude(F, D, H)
By directions_draw_angle on D, E, H we get exists(angle(D, E, H))
By directions_draw_angle on F, E, G we get exists(angle(F, E, G))
By sas_congruence on G, I, D, D, I, B we get congruent_triangles(B, D, I, D, G, I)
By double_perpendicular_and_parallel_v0 on altitude(F, A, D), h, altitude(E, A, D) we get parallel(altitude(E, A, D), altitude(F, A, D))
By line_inequality on altitude(E, D, G), Line(B, I), E we get Line(B, I) != altitude(E, D, G)
By directions_draw_angle on G, C, F we get exists(angle(G, C, F))
By directions_draw_angle on G, C, H we get exists(angle(G, C, H))
By line_containment_inequality on orthocenter(A, D, E), H, g we get H != orthocenter(A, D, E)
By line_containment_inequality on orthocenter(D, F, H), C, f we get C != orthocenter(D, F, H)
By sas_congruence on D, I, B, G, I, D we get congruent_triangles(B, D, I, D, G, I)
By directions_draw_angle on B, F, E we get exists(angle(B, F, E))
By line_inequality on altitude(E, A, D), i, E we get i != altitude(E, A, D)
By line_inequality on Line(H, center(c)), Line(B, C), H we get Line(B, C) != Line(H, center(c))
By line_containment_inequality on orthocenter(A, D, F), G, Line(D, F) we get G != orthocenter(A, D, F)
By sas_similarity on D, I, G, B, I, D we get similar_triangles(B, D, I, D, G, I)
By not_in_line_equivalent_to_not_collinear_v0_r on B, H, E we get B not in Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on D, F, E we get D not in Line(E, F)
By reverse_direction on H, C we get 180 == direction(H, C) - direction(C, H) mod 360
By line_containment_inequality on orthocenter(D, F, H), B, Line(D, F) we get B != orthocenter(D, F, H)
By line_inequality on Line(E, F), Line(B, I), E we get Line(B, I) != Line(E, F)
By directions_draw_angle on H, C, B we get exists(angle(H, C, B))
By line_inequality on Line(C, F), Line(D, E), F we get Line(C, F) != Line(D, E)
By reverse_direction on H, E we get 180 == direction(H, E) - direction(E, H) mod 360
By directions_draw_angle on F, C, G we get exists(angle(F, C, G))
By line_containment_inequality on orthocenter(D, E, G), F, g we get F != orthocenter(D, E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on E, D, H we get E not in Line(D, H)
By line_inequality on Line(D, H), Line(B, C), H we get Line(B, C) != Line(D, H)
By directions_draw_angle on F, D, A we get exists(angle(F, D, A))
By not_in_line_equivalent_to_not_collinear_v0_r on E, C, F we get E not in Line(C, F)
By line_inequality on Line(E, H), Line(C, I), E we get Line(C, I) != Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on B, E, F we get B not in Line(E, F)
By directions_draw_angle on A, F, C we get exists(angle(A, F, C))
By directions_draw_angle on D, F, C we get exists(angle(D, F, C))
By line_inequality on altitude(E, A, D), f, E we get f != altitude(E, A, D)
By line_inequality on Line(E, F), Line(B, C), F we get Line(B, C) != Line(E, F)
By line_inequality on Line(E, H), f, E we get f != Line(E, H)
By sas_anti_similarity on G, I, D, B, I, D we get anti_similar_triangles(B, D, I, G, D, I)
By line_inequality on Line(E, center(c)), Line(G, I), E we get Line(G, I) != Line(E, center(c))
By sas_similarity on B, I, D, D, I, G we get similar_triangles(B, D, I, D, G, I)
By line_inequality on altitude(E, D, G), Line(G, I), E we get Line(G, I) != altitude(E, D, G)
By line_containment_inequality on orthocenter(C, D, E), A, Line(D, E) we get A != orthocenter(C, D, E)
By directions_draw_angle on A, F, E we get exists(angle(A, F, E))
By reverse_direction on E, H we get 180 == direction(E, H) - direction(H, E) mod 360
By line_inequality on Line(C, center(c)), Line(B, G), C we get Line(B, G) != Line(C, center(c))
By line_inequality on Line(E, center(c)), Line(B, C), E we get Line(B, C) != Line(E, center(c))
By directions_draw_angle on F, C, A we get exists(angle(F, C, A))
By sas_anti_congruence on B, I, D, G, I, D we get anti_congruent_triangles(B, D, I, G, D, I)
By line_inequality on Line(E, H), Line(C, D), E we get Line(C, D) != Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on A, H, E we get A not in Line(E, H)
By reverse_direction on E, F we get 180 == direction(E, F) - direction(F, E) mod 360
By line_inequality on Line(E, H), h, H we get h != Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on A, F, C we get A not in Line(C, F)
By sas_anti_congruence on G, I, D, B, I, D we get anti_congruent_triangles(B, D, I, G, D, I)
By directions_draw_angle on A, D, B we get exists(angle(A, D, B))
By not_in_line_equivalent_to_not_collinear_v0_r on I, E, F we get I not in Line(E, F)
By reverse_direction on F, C we get 180 == direction(F, C) - direction(C, F) mod 360
By line_inequality on altitude(E, C, D), Line(B, C), E we get Line(B, C) != altitude(E, C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on F, H, E we get F not in Line(E, H)
By directions_draw_angle on C, F, A we get exists(angle(C, F, A))
By line_inequality on altitude(F, D, H), Line(C, D), F we get Line(C, D) != altitude(F, D, H)
By line_containment_inequality on orthocenter(B, D, F), E, Line(D, F) we get E != orthocenter(B, D, F)
By line_inequality on Line(D, H), g, D we get g != Line(D, H)
By directions_draw_angle on A, E, H we get exists(angle(A, E, H))
By directions_draw_angle on E, F, A we get exists(angle(E, F, A))
By sas_similarity on G, I, D, D, I, B we get similar_triangles(B, D, I, D, G, I)
By not_in_line_equivalent_to_not_collinear_v0_r on B, H, C we get B not in Line(C, H)
By line_inequality on Line(C, F), Line(C, D), F we get Line(C, D) != Line(C, F)
By sas_anti_similarity on D, I, B, D, I, G we get anti_similar_triangles(B, D, I, G, D, I)
By line_inequality on Line(C, H), Line(B, I), H we get Line(B, I) != Line(C, H)
By line_inequality on Line(E, F), Line(B, G), E we get Line(B, G) != Line(E, F)
By directions_draw_angle on B, D, A we get exists(angle(B, D, A))
By line_inequality on Line(F, center(c)), g, F we get g != Line(F, center(c))
By line_inequality on altitude(E, A, D), Line(G, I), E we get Line(G, I) != altitude(E, A, D)
By line_containment_inequality on orthocenter(C, D, E), C, Line(D, E) we get C != orthocenter(C, D, E)
By directions_draw_angle on A, H, C we get exists(angle(A, H, C))
By line_inequality on Line(C, H), Line(G, I), H we get Line(C, H) != Line(G, I)
By line_inequality on altitude(F, A, D), g, F we get g != altitude(F, A, D)
By reverse_direction on C, H we get 180 == direction(C, H) - direction(H, C) mod 360
By line_inequality on Line(C, F), Line(B, C), F we get Line(B, C) != Line(C, F)
By line_inequality on Line(E, center(c)), Line(C, I), E we get Line(C, I) != Line(E, center(c))
By directions_draw_angle on I, C, H we get exists(angle(I, C, H))
By sas_similarity on D, I, B, G, I, D we get similar_triangles(B, D, I, D, G, I)
By line_containment_inequality on orthocenter(B, D, F), C, Line(D, F) we get C != orthocenter(B, D, F)
By reverse_direction on F, E we get 180 == direction(F, E) - direction(E, F) mod 360
By directions_draw_angle on I, C, F we get exists(angle(I, C, F))
By line_inequality on altitude(E, A, D), Line(D, G), E we get Line(D, G) != altitude(E, A, D)
By line_inequality on Line(E, H), Line(D, F), E we get Line(D, F) != Line(E, H)
By directions_draw_angle on D, E, F we get exists(angle(D, E, F))
By line_containment_inequality on orthocenter(C, D, E), H, g we get H != orthocenter(C, D, E)
By line_inequality on altitude(E, D, G), h, E we get h != altitude(E, D, G)
By directions_draw_angle on F, E, D we get exists(angle(F, E, D))
By line_inequality on Line(D, H), Line(B, I), H we get Line(B, I) != Line(D, H)
By line_inequality on altitude(E, D, G), Line(D, F), E we get Line(D, F) != altitude(E, D, G)
By line_inequality on altitude(E, C, D), Line(C, I), E we get Line(C, I) != altitude(E, C, D)
By line_inequality on Line(C, F), Line(D, F), C we get Line(C, F) != Line(D, F)
By line_inequality on Line(C, H), Line(D, F), H we get Line(C, H) != Line(D, F)
By line_inequality on Line(D, H), Line(C, D), H we get Line(C, D) != Line(D, H)
By line_inequality on Line(C, F), Line(G, I), F we get Line(C, F) != Line(G, I)
By line_containment_inequality on orthocenter(C, D, E), B, g we get B != orthocenter(C, D, E)
By directions_draw_angle on A, C, F we get exists(angle(A, C, F))
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, F we get G not in Line(E, F)
By line_inequality on Line(D, H), Line(D, F), H we get Line(D, F) != Line(D, H)
By directions_draw_angle on G, E, F we get exists(angle(G, E, F))
By directions_draw_angle on A, D, F we get exists(angle(A, D, F))
By directions_draw_angle on B, F, C we get exists(angle(B, F, C))
By line_inequality on altitude(E, C, D), Line(B, G), E we get Line(B, G) != altitude(E, C, D)
By line_containment_inequality on orthocenter(A, D, E), C, Line(D, E) we get C != orthocenter(A, D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on I, C, H we get I not in Line(C, H)
By directions_draw_angle on H, C, I we get exists(angle(H, C, I))
By line_containment_inequality on orthocenter(A, D, E), I, g we get I != orthocenter(A, D, E)
By directions_draw_angle on A, D, I we get exists(angle(A, D, I))
By line_inequality on Line(D, H), Line(C, I), D we get Line(C, I) != Line(D, H)
By line_inequality on Line(E, F), Line(G, I), E we get Line(E, F) != Line(G, I)
By line_inequality on altitude(F, D, H), Line(G, I), F we get Line(G, I) != altitude(F, D, H)
By directions_draw_angle on D, C, H we get exists(angle(D, C, H))
By line_inequality on Line(C, H), Line(B, G), C we get Line(B, G) != Line(C, H)
By directions_draw_angle on H, E, A we get exists(angle(H, E, A))
By directions_draw_angle on G, D, A we get exists(angle(G, D, A))
By directions_draw_angle on I, D, A we get exists(angle(I, D, A))
By line_containment_inequality on orthocenter(D, F, H), I, f we get I != orthocenter(D, F, H)
By directions_draw_angle on C, F, B we get exists(angle(C, F, B))
By line_inequality on altitude(F, B, D), g, F we get g != altitude(F, B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on C, D, H we get C not in Line(D, H)
By directions_draw_angle on A, D, C we get exists(angle(A, D, C))
By directions_draw_angle on H, C, A we get exists(angle(H, C, A))
By not_in_line_equivalent_to_not_collinear_v0_r on D, C, H we get D not in Line(C, H)
By line_inequality on Line(H, center(c)), Line(D, F), H we get Line(D, F) != Line(H, center(c))
By line_inequality on Line(E, H), Line(D, G), H we get Line(D, G) != Line(E, H)
By line_inequality on Line(E, H), Line(B, C), H we get Line(B, C) != Line(E, H)
By line_inequality on altitude(F, D, H), Line(B, G), F we get Line(B, G) != altitude(F, D, H)
By line_inequality on altitude(F, D, H), Line(D, E), F we get Line(D, E) != altitude(F, D, H)
By line_containment_inequality on orthocenter(A, D, E), D, g we get D != orthocenter(A, D, E)
By line_inequality on altitude(E, A, D), Line(C, D), E we get Line(C, D) != altitude(E, A, D)
By line_inequality on altitude(E, C, D), Line(D, F), E we get Line(D, F) != altitude(E, C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on H, F, C we get H not in Line(C, F)
By line_containment_inequality on orthocenter(A, D, F), I, Line(D, F) we get I != orthocenter(A, D, F)
By line_inequality on altitude(E, A, D), Line(D, F), E we get Line(D, F) != altitude(E, A, D)
By line_containment_inequality on orthocenter(D, F, H), G, Line(D, F) we get G != orthocenter(D, F, H)
By line_inequality on altitude(F, A, D), Line(C, D), F we get Line(C, D) != altitude(F, A, D)
By line_inequality on Line(E, H), Line(G, I), H we get Line(E, H) != Line(G, I)
By directions_draw_angle on C, F, D we get exists(angle(C, F, D))
By not_in_line_equivalent_to_not_collinear_v0_r on E, H, C we get E not in Line(C, H)
By directions_draw_angle on E, H, A we get exists(angle(E, H, A))
By directions_draw_angle on E, D, A we get exists(angle(E, D, A))
By directions_draw_angle on E, F, B we get exists(angle(E, F, B))
By not_in_line_equivalent_to_not_collinear_v0_r on F, H, D we get F not in Line(D, H)
By not_in_line_equivalent_to_not_collinear_v0_r on G, C, F we get G not in Line(C, F)
By line_containment_inequality on orthocenter(D, F, H), E, Line(D, F) we get E != orthocenter(D, F, H)
By line_inequality on altitude(E, A, D), Line(B, G), E we get Line(B, G) != altitude(E, A, D)
By directions_draw_angle on E, H, B we get exists(angle(E, H, B))
By line_inequality on Line(E, F), Line(C, I), E we get Line(C, I) != Line(E, F)
By directions_draw_angle on C, D, A we get exists(angle(C, D, A))
By line_inequality on altitude(F, D, H), i, F we get i != altitude(F, D, H)
By directions_draw_angle on D, C, F we get exists(angle(D, C, F))
By line_inequality on altitude(F, A, D), Line(B, G), F we get Line(B, G) != altitude(F, A, D)
By directions_draw_angle on C, H, A we get exists(angle(C, H, A))
By directions_draw_angle on B, C, H we get exists(angle(B, C, H))
By line_containment_inequality on orthocenter(C, D, E), G, Line(D, E) we get G != orthocenter(C, D, E)
By line_inequality on Line(F, center(c)), Line(D, G), F we get Line(D, G) != Line(F, center(c))
By directions_draw_angle on H, E, G we get exists(angle(H, E, G))
By line_inequality on altitude(F, D, H), Line(B, I), F we get Line(B, I) != altitude(F, D, H)
By line_inequality on Line(E, H), g, H we get g != Line(E, H)
By line_inequality on Line(C, F), Line(D, G), F we get Line(C, F) != Line(D, G)
By line_inequality on Line(D, H), i, H we get i != Line(D, H)
By directions_draw_angle on A, C, H we get exists(angle(A, C, H))
By directions_draw_angle on A, D, E we get exists(angle(A, D, E))
By line_inequality on altitude(F, B, D), Line(B, I), F we get Line(B, I) != altitude(F, B, D)
By line_inequality on Line(E, F), Line(D, G), E we get Line(D, G) != Line(E, F)
By line_containment_inequality on orthocenter(C, D, E), F, Line(D, E) we get F != orthocenter(C, D, E)
By line_containment_inequality on orthocenter(B, D, F), I, f we get I != orthocenter(B, D, F)
By line_inequality on altitude(E, D, G), Line(D, I), E we get Line(D, I) != altitude(E, D, G)
By line_inequality on Line(E, H), i, H we get i != Line(E, H)
By directions_draw_angle on B, C, F we get exists(angle(B, C, F))
By line_containment_inequality on orthocenter(A, D, F), D, f we get D != orthocenter(A, D, F)
By line_inequality on Line(F, center(c)), h, F we get h != Line(F, center(c))
By directions_draw_angle on F, C, I we get exists(angle(F, C, I))
By directions_draw_angle on F, C, B we get exists(angle(F, C, B))
By line_inequality on Line(C, F), g, F we get g != Line(C, F)
By line_inequality on Line(C, F), i, F we get i != Line(C, F)
By line_inequality on Line(C, H), g, H we get g != Line(C, H)
By line_inequality on Line(E, center(c)), Line(D, G), E we get Line(D, G) != Line(E, center(c))
By line_inequality on Line(C, center(c)), Line(D, F), C we get Line(D, F) != Line(C, center(c))
By line_inequality on altitude(F, B, D), Line(G, I), F we get Line(G, I) != altitude(F, B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on F, C, H we get F not in Line(C, H)
By line_containment_inequality on orthocenter(D, E, G), C, Line(D, E) we get C != orthocenter(D, E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on B, D, H we get B not in Line(D, H)
By directions_draw_angle on A, D, G we get exists(angle(A, D, G))
By directions_draw_angle on H, C, G we get exists(angle(H, C, G))
By not_in_line_equivalent_to_not_collinear_v0_r on A, H, D we get A not in Line(D, H)
By directions_draw_angle on H, C, D we get exists(angle(H, C, D))
By line_inequality on altitude(F, A, D), Line(D, E), F we get Line(D, E) != altitude(F, A, D)
By line_containment_inequality on orthocenter(D, E, G), D, g we get D != orthocenter(D, E, G)
By line_inequality on Line(C, F), Line(B, G), C we get Line(B, G) != Line(C, F)
By line_inequality on altitude(F, B, D), Line(D, I), F we get Line(D, I) != altitude(F, B, D)
By line_inequality on Line(C, center(c)), Line(D, G), C we get Line(D, G) != Line(C, center(c))
By line_inequality on Line(C, H), Line(D, I), H we get Line(C, H) != Line(D, I)
By line_inequality on Line(D, H), f, D we get f != Line(D, H)
By line_inequality on altitude(E, C, D), Line(C, D), E we get Line(C, D) != altitude(E, C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on I, D, H we get I not in Line(D, H)
By line_inequality on Line(H, center(c)), Line(B, I), H we get Line(B, I) != Line(H, center(c))
By line_containment_inequality on orthocenter(B, D, F), G, Line(D, F) we get G != orthocenter(B, D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on D, H, E we get D not in Line(E, H)
By line_inequality on altitude(F, B, D), i, F we get i != altitude(F, B, D)
By line_inequality on Line(C, center(c)), h, C we get h != Line(C, center(c))
By line_inequality on Line(C, H), h, C we get h != Line(C, H)
By line_inequality on altitude(E, D, G), Line(C, D), E we get Line(C, D) != altitude(E, D, G)
By line_inequality on Line(H, center(c)), Line(D, I), H we get Line(D, I) != Line(H, center(c))
By line_inequality on Line(E, F), i, E we get i != Line(E, F)
By line_inequality on altitude(E, C, D), i, E we get i != altitude(E, C, D)
By line_inequality on altitude(E, A, D), Line(B, I), E we get Line(B, I) != altitude(E, A, D)
By line_inequality on Line(H, center(c)), i, H we get i != Line(H, center(c))
By line_containment_inequality on orthocenter(B, D, F), D, f we get D != orthocenter(B, D, F)
By line_inequality on Line(F, center(c)), Line(B, C), F we get Line(B, C) != Line(F, center(c))
By line_inequality on altitude(E, D, G), i, E we get i != altitude(E, D, G)
By line_inequality on altitude(F, A, D), Line(G, I), F we get Line(G, I) != altitude(F, A, D)
By line_inequality on altitude(E, A, D), Line(C, I), E we get Line(C, I) != altitude(E, A, D)
By line_inequality on altitude(F, A, D), Line(B, C), F we get Line(B, C) != altitude(F, A, D)
By line_inequality on Line(D, H), Line(G, I), D we get Line(D, H) != Line(G, I)
By line_inequality on altitude(E, D, G), f, E we get f != altitude(E, D, G)
By line_inequality on Line(C, H), Line(C, I), H we get Line(C, H) != Line(C, I)
By line_inequality on Line(D, H), Line(D, I), H we get Line(D, H) != Line(D, I)
By not_in_line_equivalent_to_not_collinear_v0_r on G, D, H we get G not in Line(D, H)
By line_inequality on Line(E, F), Line(D, E), F we get Line(D, E) != Line(E, F)
By line_inequality on Line(H, center(c)), Line(D, E), H we get Line(D, E) != Line(H, center(c))
By line_inequality on altitude(F, A, D), Line(B, I), F we get Line(B, I) != altitude(F, A, D)
By line_containment_inequality on orthocenter(C, D, E), I, Line(D, E) we get I != orthocenter(C, D, E)
By line_inequality on altitude(E, D, G), Line(B, C), E we get Line(B, C) != altitude(E, D, G)
By line_inequality on Line(E, center(c)), Line(D, F), E we get Line(D, F) != Line(E, center(c))
By line_inequality on altitude(F, D, H), Line(D, I), F we get Line(D, I) != altitude(F, D, H)
By line_inequality on Line(D, H), h, H we get h != Line(D, H)
By line_inequality on Line(D, H), Line(D, G), H we get Line(D, G) != Line(D, H)
By line_inequality on altitude(E, C, D), Line(D, I), E we get Line(D, I) != altitude(E, C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on C, H, E we get C not in Line(E, H)
By line_containment_inequality on orthocenter(A, D, E), F, g we get F != orthocenter(A, D, E)
By line_inequality on altitude(E, C, D), f, E we get f != altitude(E, C, D)
By line_containment_inequality on orthocenter(A, D, E), B, g we get B != orthocenter(A, D, E)
By line_inequality on Line(C, center(c)), Line(G, I), C we get Line(G, I) != Line(C, center(c))
By line_inequality on Line(C, H), i, H we get i != Line(C, H)
By line_inequality on altitude(F, B, D), Line(B, C), F we get Line(B, C) != altitude(F, B, D)
By line_inequality on Line(H, center(c)), h, H we get h != Line(H, center(c))
By line_inequality on Line(F, center(c)), Line(C, D), F we get Line(C, D) != Line(F, center(c))
By line_containment_inequality on orthocenter(D, F, H), D, f we get D != orthocenter(D, F, H)
By line_containment_inequality on orthocenter(D, F, H), A, Line(D, F) we get A != orthocenter(D, F, H)
By line_inequality on altitude(E, D, G), Line(C, I), E we get Line(C, I) != altitude(E, D, G)
By line_containment_inequality on orthocenter(B, D, F), A, Line(D, F) we get A != orthocenter(B, D, F)
By line_containment_inequality on orthocenter(A, D, F), H, Line(D, F) we get H != orthocenter(A, D, F)
By line_inequality on Line(E, center(c)), Line(B, I), E we get Line(B, I) != Line(E, center(c))
By line_inequality on altitude(E, C, D), Line(D, G), E we get Line(D, G) != altitude(E, C, D)
By line_inequality on Line(C, F), f, C we get f != Line(C, F)
By line_containment_inequality on orthocenter(B, D, F), B, Line(D, F) we get B != orthocenter(B, D, F)
By line_containment_inequality on orthocenter(C, D, E), D, g we get D != orthocenter(C, D, E)
By line_inequality on altitude(E, C, D), Line(G, I), E we get Line(G, I) != altitude(E, C, D)
By line_inequality on altitude(F, A, D), i, F we get i != altitude(F, A, D)
By line_inequality on altitude(F, D, H), g, F we get g != altitude(F, D, H)
By line_inequality on Line(H, center(c)), Line(D, G), H we get Line(D, G) != Line(H, center(c))
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, F we get C not in Line(E, F)
By line_containment_inequality on orthocenter(D, E, G), A, Line(D, E) we get A != orthocenter(D, E, G)
By line_inequality on altitude(F, B, D), Line(C, D), F we get Line(C, D) != altitude(F, B, D)
By line_containment_inequality on orthocenter(A, D, F), E, f we get E != orthocenter(A, D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on A, F, E we get A not in Line(E, F)
By line_inequality on Line(D, H), Line(D, E), H we get Line(D, E) != Line(D, H)
By line_inequality on Line(E, center(c)), i, E we get i != Line(E, center(c))
By line_inequality on altitude(E, A, D), h, E we get h != altitude(E, A, D)
By line_inequality on Line(E, F), g, F we get g != Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on A, H, C we get A not in Line(C, H)
By line_inequality on altitude(F, D, H), h, F we get h != altitude(F, D, H)
By line_inequality on Line(C, H), f, C we get f != Line(C, H)
By not_in_line_equivalent_to_not_collinear_v0_r on I, F, C we get I not in Line(C, F)
By line_inequality on Line(C, center(c)), Line(B, I), C we get Line(B, I) != Line(C, center(c))
By line_inequality on Line(E, F), f, E we get f != Line(E, F)
By line_inequality on altitude(E, C, D), Line(B, I), E we get Line(B, I) != altitude(E, C, D)
By line_inequality on altitude(F, D, H), Line(D, G), F we get Line(D, G) != altitude(F, D, H)
By not_in_line_equivalent_to_not_collinear_v0_r on B, F, C we get B not in Line(C, F)
By line_inequality on Line(C, H), Line(D, E), C we get Line(C, H) != Line(D, E)
By line_inequality on Line(F, center(c)), Line(C, I), F we get Line(C, I) != Line(F, center(c))
By line_inequality on Line(E, center(c)), Line(D, I), E we get Line(D, I) != Line(E, center(c))
By line_inequality on Line(F, center(c)), Line(D, E), F we get Line(D, E) != Line(F, center(c))
By line_inequality on altitude(F, B, D), Line(C, I), F we get Line(C, I) != altitude(F, B, D)
By line_inequality on altitude(F, A, D), Line(C, I), F we get Line(C, I) != altitude(F, A, D)
By line_inequality on Line(C, center(c)), f, C we get f != Line(C, center(c))
By line_inequality on Line(C, center(c)), i, C we get i != Line(C, center(c))
By line_inequality on Line(C, H), Line(B, C), H we get Line(B, C) != Line(C, H)
By line_inequality on altitude(E, D, G), Line(D, G), E we get Line(D, G) != altitude(E, D, G)
By line_inequality on altitude(F, B, D), h, F we get h != altitude(F, B, D)
By line_inequality on Line(H, center(c)), Line(G, I), H we get Line(G, I) != Line(H, center(c))
By line_containment_inequality on orthocenter(A, D, F), C, Line(D, F) we get C != orthocenter(A, D, F)
By line_containment_inequality on orthocenter(A, D, F), A, Line(D, F) we get A != orthocenter(A, D, F)
By line_inequality on Line(C, center(c)), Line(D, I), C we get Line(D, I) != Line(C, center(c))
By line_inequality on Line(E, H), Line(D, E), H we get Line(D, E) != Line(E, H)
By line_inequality on Line(F, center(c)), i, F we get i != Line(F, center(c))
By line_containment_inequality on orthocenter(D, E, G), G, Line(D, E) we get G != orthocenter(D, E, G)
By line_containment_inequality on orthocenter(D, F, H), H, Line(D, F) we get H != orthocenter(D, F, H)
By line_inequality on Line(H, center(c)), Line(C, I), H we get Line(C, I) != Line(H, center(c))
By line_inequality on Line(E, center(c)), Line(B, G), E we get Line(B, G) != Line(E, center(c))
By line_inequality on altitude(E, D, G), Line(B, G), E we get Line(B, G) != altitude(E, D, G)
By line_inequality on altitude(E, C, D), h, E we get h != altitude(E, C, D)
By line_inequality on altitude(F, B, D), Line(B, G), F we get Line(B, G) != altitude(F, B, D)
By line_inequality on altitude(F, A, D), Line(D, G), F we get Line(D, G) != altitude(F, A, D)
By line_inequality on Line(E, H), Line(B, G), E we get Line(B, G) != Line(E, H)
By line_containment_inequality on orthocenter(A, D, E), G, Line(D, E) we get G != orthocenter(A, D, E)
By line_inequality on Line(F, center(c)), Line(G, I), F we get Line(G, I) != Line(F, center(c))
By line_inequality on Line(F, center(c)), Line(D, I), F we get Line(D, I) != Line(F, center(c))
By line_inequality on altitude(F, A, D), Line(D, I), F we get Line(D, I) != altitude(F, A, D)
By line_inequality on altitude(F, D, H), Line(B, C), F we get Line(B, C) != altitude(F, D, H)
By line_inequality on Line(E, center(c)), h, E we get h != Line(E, center(c))
By perpendicular_lines_draw_intersection on i, altitude(F, B, D) we get exists(line_intersection(i, altitude(F, B, D)))
By concyclic_definition_0 on F, A, D, E we get E in Circle(A, D, F)
By external_angle_bisector_definition_v0_r on A, B, H, F we get Line(B, F) == external_angle_bisector(A, F, H)
By external_angle_bisector_definition_v0_r on C, G, A, E we get Line(E, G) == external_angle_bisector(A, E, C)
By external_angle_bisector_definition_v0_r on B, H, A, F we get Line(F, H) == external_angle_bisector(A, F, B)
By internal_angle_bisector_definition_v0_r on G, A, G, E we get Line(A, E) == internal_angle_bisector(G, E, G)
By concyclic_definition_0 on A, E, D, F we get F in Circle(A, D, E)
By reverse_direction on center(c), E we get 180 == direction(center(c), E) - direction(E, center(c)) mod 360
By external_angle_bisector_definition_v0_r on A, C, G, E we get Line(C, E) == external_angle_bisector(A, E, G)
By perpendicular_lines_draw_intersection on altitude(E, A, D), h we get exists(line_intersection(h, altitude(E, A, D)))
By concyclic_definition_0 on F, A, E, D we get D in Circle(A, E, F)
By internal_angle_bisector_definition_v0_r on B, D, G, I we get Line(D, I) == internal_angle_bisector(B, I, G)
By reverse_direction on center(c), H we get 180 == direction(center(c), H) - direction(H, center(c)) mod 360
By internal_angle_bisector_definition_v0_r on G, A, C, E we get Line(A, E) == internal_angle_bisector(C, E, G)
By internal_angle_bisector_definition_v0_r on H, B, H, F we get Line(B, F) == internal_angle_bisector(H, F, H)
By concyclic_definition_0 on D, E, F, A we get A in Circle(D, E, F)
By internal_angle_bisector_definition_v0_r on H, A, H, F we get Line(A, F) == internal_angle_bisector(H, F, H)
By internal_angle_bisector_definition_v0_r on F, A, F, H we get Line(A, H) == internal_angle_bisector(F, H, F)
By internal_angle_bisector_definition_v0_r on H, A, B, F we get Line(A, F) == internal_angle_bisector(B, F, H)
By internal_angle_bisector_definition_v0_r on E, C, E, G we get Line(C, G) == internal_angle_bisector(E, G, E)
By reverse_direction on center(c), C we get 180 == direction(center(c), C) - direction(C, center(c)) mod 360
By perpendicular_lines_draw_intersection on Line(D, H), altitude(F, D, H) we get exists(line_intersection(Line(D, H), altitude(F, D, H)))
By internal_angle_bisector_definition_v0_r on E, A, E, G we get Line(A, G) == internal_angle_bisector(E, G, E)
By internal_angle_bisector_definition_v0_r on F, B, F, H we get Line(B, H) == internal_angle_bisector(F, H, F)
By reverse_direction on center(c), F we get 180 == direction(center(c), F) - direction(F, center(c)) mod 360
By perpendicular_lines_draw_intersection on Line(C, D), altitude(E, C, D) we get exists(line_intersection(Line(C, D), altitude(E, C, D)))
By internal_angle_bisector_definition_v0_r on G, C, G, E we get Line(C, E) == internal_angle_bisector(G, E, G)
By perpendicular_lines_draw_intersection on h, altitude(F, A, D) we get exists(line_intersection(h, altitude(F, A, D)))
By perpendicular_lines_draw_intersection on Line(D, G), altitude(E, D, G) we get exists(line_intersection(Line(D, G), altitude(E, D, G)))
By isosceles_triangle_properties on center(c), C, H we get distance(C, center(c)) == distance(H, center(c)), angle(C, H, center(c)) == angle(center(c), C, H) mod 360
By isosceles_triangle_properties on center(c), F, E we get distance(E, center(c)) == distance(F, center(c)), angle(F, E, center(c)) == angle(center(c), F, E) mod 360
By concyclic_definition_1 on F, E, A, D we get Circle(A, D, E) == Circle(A, E, F)
By concyclic_definition_1 on D, A, F, E we get Circle(A, D, F) == Circle(A, E, F)
By concyclic_definition_1 on F, D, A, E we get Circle(A, D, E) == Circle(A, D, F)
By isosceles_triangle_properties on center(c), F, C we get distance(C, center(c)) == distance(F, center(c)), angle(F, C, center(c)) == angle(center(c), F, C) mod 360
By concyclic_definition_1 on A, D, F, E we get Circle(A, D, F) == Circle(D, E, F)
By concyclic_definition_1 on D, F, E, A we get Circle(A, E, F) == Circle(D, E, F)
By isosceles_triangle_properties on center(c), E, H we get distance(E, center(c)) == distance(H, center(c)), angle(E, H, center(c)) == angle(center(c), E, H) mod 360
By concyclic_definition_1 on A, D, E, F we get Circle(A, D, E) == Circle(D, E, F)
By isosceles_triangle_properties on center(c), H, C we get distance(C, center(c)) == distance(H, center(c)), angle(H, C, center(c)) == angle(center(c), H, C) mod 360
By isosceles_triangle_properties on center(c), E, F we get distance(E, center(c)) == distance(F, center(c)), angle(E, F, center(c)) == angle(center(c), E, F) mod 360
By isosceles_triangle_properties on center(c), E, C we get distance(C, center(c)) == distance(E, center(c)), angle(E, C, center(c)) == angle(center(c), E, C) mod 360
By isosceles_triangle_properties on center(c), C, F we get distance(C, center(c)) == distance(F, center(c)), angle(C, F, center(c)) == angle(center(c), C, F) mod 360
By isosceles_triangle_properties on center(c), F, H we get distance(F, center(c)) == distance(H, center(c)), angle(F, H, center(c)) == angle(center(c), F, H) mod 360
By isosceles_triangle_properties on center(c), C, E we get distance(C, center(c)) == distance(E, center(c)), angle(C, E, center(c)) == angle(center(c), C, E) mod 360
By isosceles_triangle_properties on center(c), H, F we get distance(F, center(c)) == distance(H, center(c)), angle(H, F, center(c)) == angle(center(c), H, F) mod 360
By isosceles_triangle_properties on center(c), H, E we get distance(E, center(c)) == distance(H, center(c)), angle(H, E, center(c)) == angle(center(c), H, E) mod 360
By power_of_a_point_definition on G, E, C, c we get log(power_of_a_point(G, c)) == log(distance(E, G)) + log(distance(C, G))
By power_of_a_point_definition on B, F, H, c we get log(power_of_a_point(B, c)) == log(distance(B, F)) + log(distance(B, H))
By power_of_a_point_definition on E, G, C, d we get log(power_of_a_point(E, d)) == log(distance(E, G)) + log(distance(C, E))
By line_intersection_definition on D, Line(D, G), Line(D, H) we get D == line_intersection(Line(D, G), Line(D, H))
By line_intersection_definition on F, Line(E, F), Line(D, F) we get F == line_intersection(Line(D, F), Line(E, F))
By line_intersection_definition on E, Line(E, F), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, F))
By line_intersection_definition on E, Line(E, H), g we get E == line_intersection(g, Line(E, H))
By line_intersection_definition on D, Line(D, H), h we get D == line_intersection(h, Line(D, H))
By perpendicular_line_definition on line_intersection(h, altitude(E, A, D)), h, altitude(F, A, D) we get h == perpendicular_line(line_intersection(h, altitude(E, A, D)), altitude(F, A, D))
By perpendicular_line_definition on line_intersection(h, altitude(F, A, D)), h, Line(B, G) we get h == perpendicular_line(line_intersection(h, altitude(F, A, D)), Line(B, G))
By line_intersection_definition on E, g, Line(E, F) we get E == line_intersection(g, Line(E, F))
By line_intersection_definition on F, Line(D, F), Line(C, F) we get F == line_intersection(Line(C, F), Line(D, F))
By line_intersection_definition on C, Line(C, H), Line(B, C) we get C == line_intersection(Line(B, C), Line(C, H))
By line_intersection_definition on C, Line(C, F), Line(C, D) we get C == line_intersection(Line(C, D), Line(C, F))
By line_intersection_definition on F, Line(C, F), f we get F == line_intersection(f, Line(C, F))
By line_intersection_definition on D, i, Line(D, H) we get D == line_intersection(i, Line(D, H))
By perpendicular_line_definition on line_intersection(Line(D, G), altitude(E, D, G)), Line(D, G), altitude(E, D, G) we get Line(D, G) == perpendicular_line(line_intersection(Line(D, G), altitude(E, D, G)), altitude(E, D, G))
By line_intersection_definition on H, Line(C, H), f we get H == line_intersection(f, Line(C, H))
By line_intersection_definition on F, f, Line(E, F) we get F == line_intersection(f, Line(E, F))
By perpendicular_line_definition on line_intersection(h, altitude(E, A, D)), h, Line(B, G) we get h == perpendicular_line(line_intersection(h, altitude(E, A, D)), Line(B, G))
By line_intersection_definition on D, Line(D, H), Line(D, F) we get D == line_intersection(Line(D, F), Line(D, H))
By perpendicular_line_definition on D, h, Line(B, G) we get h == perpendicular_line(D, Line(B, G))
By perpendicular_line_definition on G, Line(B, G), h we get Line(B, G) == perpendicular_line(G, h)
By perpendicular_line_definition on line_intersection(Line(D, G), altitude(E, D, G)), altitude(E, D, G), Line(D, G) we get altitude(E, D, G) == perpendicular_line(line_intersection(Line(D, G), altitude(E, D, G)), Line(D, G))
By line_intersection_definition on C, Line(C, F), Line(C, I) we get C == line_intersection(Line(C, F), Line(C, I))
By perpendicular_line_definition on line_intersection(i, altitude(F, B, D)), i, altitude(F, B, D) we get i == perpendicular_line(line_intersection(i, altitude(F, B, D)), altitude(F, B, D))
By line_intersection_definition on D, Line(D, H), Line(C, D) we get D == line_intersection(Line(C, D), Line(D, H))
By perpendicular_line_definition on line_intersection(h, altitude(F, A, D)), h, altitude(E, A, D) we get h == perpendicular_line(line_intersection(h, altitude(F, A, D)), altitude(E, A, D))
By line_intersection_definition on E, Line(E, H), Line(D, E) we get E == line_intersection(Line(D, E), Line(E, H))
By line_intersection_definition on C, Line(C, F), Line(B, C) we get C == line_intersection(Line(B, C), Line(C, F))
By line_intersection_definition on D, Line(D, H), Line(D, I) we get D == line_intersection(Line(D, H), Line(D, I))
By line_intersection_definition on H, Line(E, H), f we get H == line_intersection(f, Line(E, H))
By perpendicular_line_definition on A, h, Line(B, G) we get h == perpendicular_line(A, Line(B, G))
By perpendicular_line_definition on line_intersection(h, altitude(F, A, D)), h, altitude(F, A, D) we get h == perpendicular_line(line_intersection(h, altitude(F, A, D)), altitude(F, A, D))
By perpendicular_line_definition on line_intersection(Line(D, H), altitude(F, D, H)), Line(D, H), altitude(F, D, H) we get Line(D, H) == perpendicular_line(line_intersection(Line(D, H), altitude(F, D, H)), altitude(F, D, H))
By line_intersection_definition on C, g, Line(C, F) we get C == line_intersection(g, Line(C, F))
By perpendicular_line_definition on line_intersection(Line(D, H), altitude(F, D, H)), altitude(F, D, H), Line(D, H) we get altitude(F, D, H) == perpendicular_line(line_intersection(Line(D, H), altitude(F, D, H)), Line(D, H))
By perpendicular_line_definition on line_intersection(Line(C, D), altitude(E, C, D)), altitude(E, C, D), Line(C, D) we get altitude(E, C, D) == perpendicular_line(line_intersection(Line(C, D), altitude(E, C, D)), Line(C, D))
By perpendicular_line_definition on B, Line(B, G), Line(D, I) we get Line(B, G) == perpendicular_line(B, Line(D, I))
By line_intersection_definition on H, f, Line(D, H) we get H == line_intersection(f, Line(D, H))
By line_intersection_definition on C, Line(C, H), Line(C, I) we get C == line_intersection(Line(C, H), Line(C, I))
By perpendicular_line_definition on line_intersection(h, altitude(F, A, D)), altitude(F, A, D), h we get altitude(F, A, D) == perpendicular_line(line_intersection(h, altitude(F, A, D)), h)
By line_intersection_definition on D, Line(D, H), Line(D, E) we get D == line_intersection(Line(D, E), Line(D, H))
By line_intersection_definition on C, Line(C, H), Line(C, D) we get C == line_intersection(Line(C, D), Line(C, H))
By perpendicular_line_definition on line_intersection(h, altitude(E, A, D)), altitude(E, A, D), h we get altitude(E, A, D) == perpendicular_line(line_intersection(h, altitude(E, A, D)), h)
By perpendicular_line_definition on I, Line(D, I), Line(B, G) we get Line(D, I) == perpendicular_line(I, Line(B, G))
By perpendicular_line_definition on line_intersection(i, altitude(F, B, D)), altitude(F, B, D), i we get altitude(F, B, D) == perpendicular_line(line_intersection(i, altitude(F, B, D)), i)
By line_intersection_definition on C, g, Line(C, H) we get C == line_intersection(g, Line(C, H))
By perpendicular_line_definition on G, Line(B, G), Line(D, I) we get Line(B, G) == perpendicular_line(G, Line(D, I))
By perpendicular_line_definition on line_intersection(Line(C, D), altitude(E, C, D)), Line(C, D), altitude(E, C, D) we get Line(C, D) == perpendicular_line(line_intersection(Line(C, D), altitude(E, C, D)), altitude(E, C, D))
By perpendicular_line_definition on B, Line(B, G), h we get Line(B, G) == perpendicular_line(B, h)
By perpendicular_line_definition on D, Line(D, I), Line(B, G) we get Line(D, I) == perpendicular_line(D, Line(B, G))
By perpendicular_line_definition on line_intersection(h, altitude(E, A, D)), h, altitude(E, A, D) we get h == perpendicular_line(line_intersection(h, altitude(E, A, D)), altitude(E, A, D))
By parallel_line_definition on E, altitude(E, A, D), altitude(F, A, D) we get altitude(E, A, D) == parallel_line(E, altitude(F, A, D))
By parallel_line_definition on F, altitude(F, A, D), altitude(E, A, D) we get altitude(F, A, D) == parallel_line(F, altitude(E, A, D))
By parallel_line_definition on line_intersection(h, altitude(F, A, D)), altitude(F, A, D), altitude(E, A, D) we get altitude(F, A, D) == parallel_line(line_intersection(h, altitude(F, A, D)), altitude(E, A, D))
By parallel_line_definition on line_intersection(h, altitude(E, A, D)), altitude(E, A, D), altitude(F, A, D) we get altitude(E, A, D) == parallel_line(line_intersection(h, altitude(E, A, D)), altitude(F, A, D))
By in_imply_collinear on line_intersection(Line(D, H), altitude(F, D, H)), D, H we get collinear(D, H, line_intersection(Line(D, H), altitude(F, D, H)))
By line_containment_inequality on line_intersection(Line(C, D), altitude(E, C, D)), G, Line(C, D) we get G != line_intersection(Line(C, D), altitude(E, C, D))
By in_imply_collinear on line_intersection(Line(D, G), altitude(E, D, G)), G, D we get collinear(D, G, line_intersection(Line(D, G), altitude(E, D, G)))
By double_perpendicular_and_parallel_v0 on Line(B, G), h, altitude(E, A, D) we get parallel(Line(B, G), altitude(E, A, D))
By in_imply_collinear on line_intersection(h, altitude(F, A, D)), D, A we get collinear(A, D, line_intersection(h, altitude(F, A, D)))
By directions_draw_angle on A, C, center(c) we get exists(angle(A, C, center(c)))
By anti_similar_triangle_basic_properties on B, I, D, G, I, D we get not_collinear(B, D, I), not_collinear(D, G, I), angle(B, I, D) == 0 - angle(G, I, D) mod 360, angle(I, D, B) == 0 - angle(I, D, G) mod 360, angle(D, B, I) == 0 - angle(D, G, I) mod 360, log(distance(B, I)) + log(distance(D, I)) == log(distance(G, I)) + log(distance(D, I)), log(distance(D, I)) + log(distance(B, D)) == log(distance(D, I)) + log(distance(D, G)), log(distance(B, D)) + log(distance(G, I)) == log(distance(D, G)) + log(distance(B, I))
By in_imply_collinear on line_intersection(Line(C, D), altitude(E, C, D)), C, D we get collinear(C, D, line_intersection(Line(C, D), altitude(E, C, D)))
By directions_draw_angle on B, H, center(c) we get exists(angle(B, H, center(c)))
By line_containment_inequality on line_intersection(Line(D, H), altitude(F, D, H)), E, Line(D, H) we get E != line_intersection(Line(D, H), altitude(F, D, H))
By directions_draw_angle on D, F, center(c) we get exists(angle(D, F, center(c)))
By similar_triangle_basic_properties on I, G, D, I, D, B we get not_collinear(D, G, I), not_collinear(B, D, I), angle(I, D, B) == angle(I, G, D) mod 360, angle(D, B, I) == angle(G, D, I) mod 360, angle(B, I, D) == angle(D, I, G) mod 360, log(distance(D, I)) + log(distance(D, G)) == log(distance(G, I)) + log(distance(B, D)), log(distance(B, D)) + log(distance(D, I)) == log(distance(D, G)) + log(distance(B, I)), log(distance(B, I)) + log(distance(G, I)) == log(distance(D, I)) + log(distance(D, I))
By in_imply_collinear on line_intersection(h, altitude(E, A, D)), D, A we get collinear(A, D, line_intersection(h, altitude(E, A, D)))
By in_imply_collinear on line_intersection(i, altitude(F, B, D)), D, B we get collinear(B, D, line_intersection(i, altitude(F, B, D)))
By directions_draw_angle on A, F, center(c) we get exists(angle(A, F, center(c)))
By anti_similar_triangle_basic_properties on G, D, B, B, D, G we get not_collinear(B, D, G), not_collinear(B, D, G), angle(G, D, B) == 0 - angle(B, D, G) mod 360, angle(D, B, G) == 0 - angle(D, G, B) mod 360, angle(B, G, D) == 0 - angle(G, B, D) mod 360, log(distance(B, D)) + log(distance(B, D)) == log(distance(D, G)) + log(distance(D, G)), log(distance(B, D)) + log(distance(B, G)) == log(distance(D, G)) + log(distance(B, G)), log(distance(B, G)) + log(distance(B, D)) == log(distance(B, G)) + log(distance(D, G))
By line_inequality on altitude(F, B, D), Line(E, H), F we get Line(E, H) != altitude(F, B, D)
By line_inequality on Line(E, center(c)), Line(D, H), E we get Line(D, H) != Line(E, center(c))
By directions_draw_angle on center(c), F, B we get exists(angle(center(c), F, B))
By line_inequality on Line(E, center(c)), Line(C, F), E we get Line(C, F) != Line(E, center(c))
By directions_draw_angle on D, E, center(c) we get exists(angle(D, E, center(c)))
By anti_similar_triangle_basic_properties on I, G, D, I, B, D we get not_collinear(D, G, I), not_collinear(B, D, I), angle(I, G, D) == 0 - angle(I, B, D) mod 360, angle(G, D, I) == 0 - angle(B, D, I) mod 360, angle(D, I, G) == 0 - angle(D, I, B) mod 360, log(distance(B, I)) + log(distance(D, G)) == log(distance(G, I)) + log(distance(B, D)), log(distance(B, D)) + log(distance(D, I)) == log(distance(D, G)) + log(distance(D, I)), log(distance(D, I)) + log(distance(B, I)) == log(distance(D, I)) + log(distance(G, I))
By line_circle_intersection_has_at_most_two_points_0 on A, E, G, Circle(A, D, E) we get G not in Circle(A, D, E)
By line_inequality on Line(D, H), Line(C, F), D we get Line(C, F) != Line(D, H)
By similar_triangle_basic_properties on D, I, B, G, I, D we get not_collinear(B, D, I), not_collinear(D, G, I), angle(D, I, B) == angle(G, I, D) mod 360, angle(I, B, D) == angle(I, D, G) mod 360, angle(B, D, I) == angle(D, G, I) mod 360, log(distance(D, I)) + log(distance(D, I)) == log(distance(G, I)) + log(distance(B, I)), log(distance(B, I)) + log(distance(D, G)) == log(distance(D, I)) + log(distance(B, D)), log(distance(B, D)) + log(distance(G, I)) == log(distance(D, G)) + log(distance(D, I))
By directions_draw_angle on A, H, center(c) we get exists(angle(A, H, center(c)))
By sas_anti_congruence on B, D, A, G, D, A we get anti_congruent_triangles(A, B, D, A, G, D)
By directions_draw_angle on G, C, center(c) we get exists(angle(G, C, center(c)))
By line_containment_inequality on line_intersection(h, altitude(F, A, D)), G, h we get G != line_intersection(h, altitude(F, A, D))
By sas_anti_congruence on G, D, A, B, D, A we get anti_congruent_triangles(A, B, D, A, G, D)
By double_perpendicular_and_parallel_v0 on h, Line(B, G), Line(D, I) we get parallel(h, Line(D, I))
By sas_anti_congruence on A, D, G, A, D, B we get anti_congruent_triangles(A, B, D, A, G, D)
By line_containment_inequality on line_intersection(i, altitude(F, B, D)), E, i we get E != line_intersection(i, altitude(F, B, D))
By directions_draw_angle on D, C, center(c) we get exists(angle(D, C, center(c)))
By directions_draw_angle on center(c), C, D we get exists(angle(center(c), C, D))
By directions_draw_angle on center(c), F, A we get exists(angle(center(c), F, A))
By line_inequality on altitude(F, B, D), Line(D, H), F we get Line(D, H) != altitude(F, B, D)
By line_containment_inequality on line_intersection(h, altitude(E, A, D)), E, h we get E != line_intersection(h, altitude(E, A, D))
By directions_draw_angle on G, E, center(c) we get exists(angle(G, E, center(c)))
By double_perpendicular_and_parallel_v0 on Line(B, G), h, altitude(F, A, D) we get parallel(Line(B, G), altitude(F, A, D))
By line_containment_inequality on line_intersection(Line(D, H), altitude(F, D, H)), I, Line(D, H) we get I != line_intersection(Line(D, H), altitude(F, D, H))
By line_inequality on Line(D, H), Line(C, H), D we get Line(C, H) != Line(D, H)
By line_inequality on Line(C, center(c)), Line(D, H), C we get Line(D, H) != Line(C, center(c))
By directions_draw_angle on B, C, center(c) we get exists(angle(B, C, center(c)))
By line_inequality on Line(E, H), Line(E, F), H we get Line(E, F) != Line(E, H)
By directions_draw_angle on center(c), C, G we get exists(angle(center(c), C, G))
By line_inequality on Line(D, H), Line(E, F), H we get Line(D, H) != Line(E, F)
By line_containment_inequality on line_intersection(i, altitude(F, B, D)), H, i we get H != line_intersection(i, altitude(F, B, D))
By sas_anti_congruence on A, D, B, A, D, G we get anti_congruent_triangles(A, B, D, A, G, D)
By line_inequality on altitude(F, A, D), Line(C, H), F we get Line(C, H) != altitude(F, A, D)
By line_inequality on Line(C, center(c)), Line(E, F), C we get Line(E, F) != Line(C, center(c))
By line_containment_inequality on line_intersection(Line(D, H), altitude(F, D, H)), B, Line(D, H) we get B != line_intersection(Line(D, H), altitude(F, D, H))
By line_containment_inequality on line_intersection(h, altitude(E, A, D)), B, h we get B != line_intersection(h, altitude(E, A, D))
By directions_draw_angle on A, E, center(c) we get exists(angle(A, E, center(c)))
By line_inequality on altitude(E, D, G), Line(C, H), E we get Line(C, H) != altitude(E, D, G)
By directions_draw_angle on center(c), C, A we get exists(angle(center(c), C, A))
By line_containment_inequality on line_intersection(Line(D, H), altitude(F, D, H)), G, Line(D, H) we get G != line_intersection(Line(D, H), altitude(F, D, H))
By line_containment_inequality on line_intersection(h, altitude(F, A, D)), E, h we get E != line_intersection(h, altitude(F, A, D))
By line_inequality on Line(E, H), Line(C, H), E we get Line(C, H) != Line(E, H)
By line_circle_intersection_has_at_most_two_points_0 on A, E, C, Circle(A, D, E) we get C not in Circle(A, D, E)
By line_inequality on Line(C, center(c)), Line(E, H), C we get Line(E, H) != Line(C, center(c))
By line_containment_inequality on line_intersection(h, altitude(F, A, D)), H, h we get H != line_intersection(h, altitude(F, A, D))
By directions_draw_angle on center(c), C, I we get exists(angle(center(c), C, I))
By directions_draw_angle on center(c), C, B we get exists(angle(center(c), C, B))
By directions_draw_angle on center(c), E, A we get exists(angle(center(c), E, A))
By directions_draw_angle on center(c), E, D we get exists(angle(center(c), E, D))
By directions_draw_angle on B, F, center(c) we get exists(angle(B, F, center(c)))
By line_inequality on altitude(E, C, D), Line(C, F), E we get Line(C, F) != altitude(E, C, D)
By line_containment_inequality on line_intersection(Line(D, G), altitude(E, D, G)), H, Line(D, G) we get H != line_intersection(Line(D, G), altitude(E, D, G))
By line_containment_inequality on line_intersection(Line(C, D), altitude(E, C, D)), B, Line(C, D) we get B != line_intersection(Line(C, D), altitude(E, C, D))
By directions_draw_angle on center(c), H, B we get exists(angle(center(c), H, B))
By line_inequality on Line(E, F), Line(C, F), E we get Line(C, F) != Line(E, F)
By line_inequality on Line(C, F), Line(E, H), F we get Line(C, F) != Line(E, H)
By line_containment_inequality on line_intersection(i, altitude(F, B, D)), C, i we get C != line_intersection(i, altitude(F, B, D))
By line_containment_inequality on line_intersection(Line(D, G), altitude(E, D, G)), F, Line(D, G) we get F != line_intersection(Line(D, G), altitude(E, D, G))
By directions_draw_angle on center(c), E, G we get exists(angle(center(c), E, G))
By line_inequality on Line(C, H), Line(C, F), H we get Line(C, F) != Line(C, H)
By line_containment_inequality on line_intersection(Line(C, D), altitude(E, C, D)), A, Line(C, D) we get A != line_intersection(Line(C, D), altitude(E, C, D))
By line_inequality on Line(E, F), Line(C, H), E we get Line(C, H) != Line(E, F)
By line_inequality on Line(H, center(c)), Line(C, F), H we get Line(C, F) != Line(H, center(c))
By line_containment_inequality on line_intersection(Line(D, G), altitude(E, D, G)), B, Line(D, G) we get B != line_intersection(Line(D, G), altitude(E, D, G))
By line_inequality on altitude(F, D, H), Line(C, H), F we get Line(C, H) != altitude(F, D, H)
By directions_draw_angle on center(c), F, D we get exists(angle(center(c), F, D))
By directions_draw_angle on I, C, center(c) we get exists(angle(I, C, center(c)))
By directions_draw_angle on center(c), H, A we get exists(angle(center(c), H, A))
By line_inequality on altitude(E, A, D), Line(C, H), E we get Line(C, H) != altitude(E, A, D)
By line_containment_inequality on line_intersection(h, altitude(F, A, D)), C, h we get C != line_intersection(h, altitude(F, A, D))
By line_inequality on Line(D, H), Line(E, H), D we get Line(D, H) != Line(E, H)
By line_containment_inequality on line_intersection(h, altitude(F, A, D)), B, h we get B != line_intersection(h, altitude(F, A, D))
By line_inequality on altitude(F, D, H), Line(E, H), F we get Line(E, H) != altitude(F, D, H)
By line_containment_inequality on line_intersection(h, altitude(E, A, D)), G, h we get G != line_intersection(h, altitude(E, A, D))
By line_containment_inequality on line_intersection(i, altitude(F, B, D)), A, i we get A != line_intersection(i, altitude(F, B, D))
By line_containment_inequality on line_intersection(Line(D, H), altitude(F, D, H)), A, Line(D, H) we get A != line_intersection(Line(D, H), altitude(F, D, H))
By line_containment_inequality on line_intersection(Line(D, G), altitude(E, D, G)), I, Line(D, G) we get I != line_intersection(Line(D, G), altitude(E, D, G))
By line_containment_inequality on line_intersection(Line(D, G), altitude(E, D, G)), C, Line(D, G) we get C != line_intersection(Line(D, G), altitude(E, D, G))
By line_inequality on altitude(F, A, D), Line(E, H), F we get Line(E, H) != altitude(F, A, D)
By line_inequality on altitude(F, B, D), Line(C, H), F we get Line(C, H) != altitude(F, B, D)
By line_containment_inequality on line_intersection(Line(C, D), altitude(E, C, D)), I, Line(C, D) we get I != line_intersection(Line(C, D), altitude(E, C, D))
By line_circle_intersection_has_at_most_two_points_0 on F, A, B, Circle(A, D, E) we get B not in Circle(A, D, E)
By line_inequality on Line(H, center(c)), Line(E, F), H we get Line(E, F) != Line(H, center(c))
By line_containment_inequality on line_intersection(i, altitude(F, B, D)), I, i we get I != line_intersection(i, altitude(F, B, D))
By line_inequality on altitude(F, D, H), Line(D, H), F we get Line(D, H) != altitude(F, D, H)
By line_inequality on radical_axis(c, d), Line(E, F), C we get Line(E, F) != radical_axis(c, d)
By line_containment_inequality on line_intersection(h, altitude(E, A, D)), H, h we get H != line_intersection(h, altitude(E, A, D))
By line_containment_inequality on line_intersection(h, altitude(E, A, D)), F, h we get F != line_intersection(h, altitude(E, A, D))
By line_inequality on altitude(F, A, D), Line(D, H), F we get Line(D, H) != altitude(F, A, D)
By line_inequality on altitude(E, A, D), Line(D, H), E we get Line(D, H) != altitude(E, A, D)
By line_inequality on Line(F, center(c)), Line(C, H), F we get Line(C, H) != Line(F, center(c))
By line_containment_inequality on line_intersection(h, altitude(F, A, D)), F, h we get F != line_intersection(h, altitude(F, A, D))
By line_inequality on altitude(E, C, D), Line(C, H), E we get Line(C, H) != altitude(E, C, D)
By line_containment_inequality on line_intersection(Line(C, D), altitude(E, C, D)), E, Line(C, D) we get E != line_intersection(Line(C, D), altitude(E, C, D))
By line_inequality on altitude(E, D, G), Line(C, F), E we get Line(C, F) != altitude(E, D, G)
By line_containment_inequality on line_intersection(Line(C, D), altitude(E, C, D)), F, Line(C, D) we get F != line_intersection(Line(C, D), altitude(E, C, D))
By line_containment_inequality on line_intersection(Line(D, G), altitude(E, D, G)), E, Line(D, G) we get E != line_intersection(Line(D, G), altitude(E, D, G))
By line_inequality on altitude(E, A, D), Line(C, F), E we get Line(C, F) != altitude(E, A, D)
By line_inequality on Line(E, center(c)), Line(C, H), E we get Line(C, H) != Line(E, center(c))
By line_containment_inequality on line_intersection(i, altitude(F, B, D)), G, i we get G != line_intersection(i, altitude(F, B, D))
By line_containment_inequality on line_intersection(Line(D, H), altitude(F, D, H)), F, Line(D, H) we get F != line_intersection(Line(D, H), altitude(F, D, H))
By line_inequality on Line(F, center(c)), Line(D, H), F we get Line(D, H) != Line(F, center(c))
By line_containment_inequality on line_intersection(Line(C, D), altitude(E, C, D)), H, Line(C, D) we get H != line_intersection(Line(C, D), altitude(E, C, D))
By line_containment_inequality on line_intersection(Line(D, G), altitude(E, D, G)), A, Line(D, G) we get A != line_intersection(Line(D, G), altitude(E, D, G))
By line_inequality on radical_axis(c, d), Line(E, H), C we get Line(E, H) != radical_axis(c, d)
By line_inequality on altitude(E, D, G), Line(D, H), E we get Line(D, H) != altitude(E, D, G)
By line_circle_intersection_has_at_most_two_points_0 on A, F, H, Circle(A, D, E) we get H not in Circle(A, D, E)
By line_containment_inequality on line_intersection(h, altitude(E, A, D)), C, h we get C != line_intersection(h, altitude(E, A, D))
By line_inequality on altitude(E, C, D), Line(D, H), E we get Line(D, H) != altitude(E, C, D)
By line_inequality on Line(F, center(c)), Line(E, H), F we get Line(E, H) != Line(F, center(c))
By line_inequality on radical_axis(c, d), Line(D, H), C we get Line(D, H) != radical_axis(c, d)
By line_containment_inequality on line_intersection(Line(D, H), altitude(F, D, H)), C, Line(D, H) we get C != line_intersection(Line(D, H), altitude(F, D, H))
By line_containment_inequality on line_intersection(i, altitude(F, B, D)), F, i we get F != line_intersection(i, altitude(F, B, D))
By tangent_chord_angle_v1 on D, G, I, B we get tangent(Line(B, D), Circle(D, G, I))
By tangent_chord_angle_v1 on D, B, I, G we get tangent(Line(D, G), Circle(B, D, I))
By internal_angle_bisector_definition_v0_r on B, A, G, D we get Line(A, D) == internal_angle_bisector(B, D, G)
By concyclic_definition_0 on C, A, I, B we get B in Circle(A, C, I)
By concyclic_definition_0 on I, B, C, A we get A in Circle(B, C, I)
By power_of_a_point_in_circle on E, Circle(A, D, E) we get 0 == power_of_a_point(E, Circle(A, D, E))
By power_of_a_point_on_circle on F, Circle(A, D, E) we get 0 == power_of_a_point(F, Circle(A, D, E))
By concyclic_definition_0 on I, A, B, C we get C in Circle(A, B, I)
By internal_angle_bisector_definition_v0_r on A, I, A, D we get Line(D, I) == internal_angle_bisector(A, D, A)
By power_of_a_point_on_circle on A, Circle(A, D, E) we get 0 == power_of_a_point(A, Circle(A, D, E))
By concyclic_definition_0 on C, A, B, I we get I in Circle(A, B, C)
By power_of_a_point_on_circle on D, Circle(A, D, E) we get 0 == power_of_a_point(D, Circle(A, D, E))
By perpendicular_lines_draw_intersection on Line(B, G), Line(D, I) we get exists(line_intersection(Line(B, G), Line(D, I)))
By internal_angle_bisector_definition_v0_r on B, I, G, D we get Line(D, I) == internal_angle_bisector(B, D, G)
By perpendicular_lines_draw_intersection on Line(B, G), h we get exists(line_intersection(h, Line(B, G)))
By internal_angle_bisector_definition_v0_r on I, A, I, D we get Line(A, D) == internal_angle_bisector(I, D, I)
By concyclic_definition_1 on C, B, A, I we get Circle(A, B, C) == Circle(A, B, I)
By concyclic_definition_1 on A, C, I, B we get Circle(A, C, I) == Circle(B, C, I)
By concyclic_definition_1 on A, C, B, I we get Circle(A, B, C) == Circle(B, C, I)
By altitude_definition on A, B, G, h we get h == altitude(A, B, G)
By altitude_definition on D, B, G, Line(D, I) we get Line(D, I) == altitude(D, B, G)
By altitude_definition on G, I, D, Line(B, G) we get Line(B, G) == altitude(G, D, I)
By concyclic_definition_1 on B, A, C, I we get Circle(A, B, C) == Circle(A, C, I)
By concyclic_definition_1 on A, B, I, C we get Circle(A, B, I) == Circle(B, C, I)
By altitude_definition on I, B, G, Line(D, I) we get Line(D, I) == altitude(I, B, G)
By concyclic_definition_1 on B, I, A, C we get Circle(A, B, I) == Circle(A, C, I)
By altitude_definition on B, A, D, Line(B, G) we get Line(B, G) == altitude(B, A, D)
By altitude_definition on B, D, I, Line(B, G) we get Line(B, G) == altitude(B, D, I)
By altitude_definition on D, B, G, h we get h == altitude(D, B, G)
By altitude_definition on G, D, A, Line(B, G) we get Line(B, G) == altitude(G, A, D)
By perpendicular_bisector_sufficient_conditions on G, B, I, D we get Line(D, I) == perpendicular_bisector(B, G)
By isosceles_triangle_altitude_v2 on I, B, G we get identical(perpendicular_bisector(B, G), internal_angle_bisector(B, I, G), perpendicular_line(I, Line(B, G)))
By isosceles_triangle_altitude_v2 on I, G, B we get identical(perpendicular_bisector(B, G), internal_angle_bisector(B, I, G), perpendicular_line(I, Line(B, G)))
By line_definition on line_intersection(i, altitude(F, B, D)), F, altitude(F, B, D) we get altitude(F, B, D) == Line(F, line_intersection(i, altitude(F, B, D)))
By line_definition on line_intersection(h, altitude(F, A, D)), F, altitude(F, A, D) we get altitude(F, A, D) == Line(F, line_intersection(h, altitude(F, A, D)))
By line_definition on line_intersection(Line(D, H), altitude(F, D, H)), F, altitude(F, D, H) we get altitude(F, D, H) == Line(F, line_intersection(Line(D, H), altitude(F, D, H)))
By line_definition on I, A, h we get h == Line(A, I)
By line_definition on line_intersection(h, altitude(E, A, D)), E, altitude(E, A, D) we get altitude(E, A, D) == Line(E, line_intersection(h, altitude(E, A, D)))
By line_definition on line_intersection(Line(D, G), altitude(E, D, G)), E, altitude(E, D, G) we get altitude(E, D, G) == Line(E, line_intersection(Line(D, G), altitude(E, D, G)))
By line_definition on line_intersection(Line(C, D), altitude(E, C, D)), E, altitude(E, C, D) we get altitude(E, C, D) == Line(E, line_intersection(Line(C, D), altitude(E, C, D)))
By concurrent_sufficient_conditions on Line(C, F), Line(C, H), g we get concurrent(g, Line(C, F), Line(C, H))
By concurrent_sufficient_conditions on Line(D, H), Line(E, H), f we get concurrent(f, Line(D, H), Line(E, H))
By perpendicular_line_definition on line_intersection(h, Line(B, G)), h, Line(B, G) we get h == perpendicular_line(line_intersection(h, Line(B, G)), Line(B, G))
By median_definition on D, G, B, h we get h == median(D, B, G)
By concurrent_sufficient_conditions on Line(C, F), Line(E, F), Line(D, F) we get concurrent(Line(C, F), Line(D, F), Line(E, F))
By median_definition on I, G, B, h we get h == median(I, B, G)
By perpendicular_line_definition on line_intersection(h, Line(B, G)), h, altitude(F, A, D) we get h == perpendicular_line(line_intersection(h, Line(B, G)), altitude(F, A, D))
By line_intersection_definition on H, Line(D, H), Line(C, H) we get H == line_intersection(Line(C, H), Line(D, H))
By concurrent_sufficient_conditions on Line(C, H), Line(D, H), f we get concurrent(f, Line(C, H), Line(D, H))
By concurrent_sufficient_conditions on Line(E, F), Line(C, F), f we get concurrent(f, Line(C, F), Line(E, F))
By line_intersection_definition on F, Line(C, F), Line(E, F) we get F == line_intersection(Line(C, F), Line(E, F))
By concurrent_sufficient_conditions on Line(C, F), Line(E, F), f we get concurrent(f, Line(C, F), Line(E, F))
By perpendicular_line_definition on midpoint(B, G), h, altitude(E, A, D) we get h == perpendicular_line(midpoint(B, G), altitude(E, A, D))
By concurrent_sufficient_conditions on Line(D, H), Line(C, H), f we get concurrent(f, Line(C, H), Line(D, H))
By concurrent_sufficient_conditions on Line(E, H), Line(E, F), g we get concurrent(g, Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(C, F), Line(C, H), Line(C, I) we get concurrent(Line(C, F), Line(C, H), Line(C, I))
By line_intersection_definition on C, Line(C, F), Line(C, H) we get C == line_intersection(Line(C, F), Line(C, H))
By concurrent_sufficient_conditions on Line(C, H), Line(C, F), g we get concurrent(g, Line(C, F), Line(C, H))
By concurrent_sufficient_conditions on Line(E, H), Line(E, F), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(C, F), Line(C, H), Line(B, C) we get concurrent(Line(B, C), Line(C, F), Line(C, H))
By perpendicular_line_definition on I, h, altitude(E, A, D) we get h == perpendicular_line(I, altitude(E, A, D))
By concurrent_sufficient_conditions on Line(E, F), Line(E, H), g we get concurrent(g, Line(E, F), Line(E, H))
By median_definition on A, G, B, h we get h == median(A, B, G)
By concurrent_sufficient_conditions on Line(E, F), Line(E, H), Line(D, E) we get concurrent(Line(D, E), Line(E, F), Line(E, H))
By concurrent_sufficient_conditions on Line(E, H), Line(D, H), f we get concurrent(f, Line(D, H), Line(E, H))
By line_intersection_definition on H, Line(C, H), Line(E, H) we get H == line_intersection(Line(C, H), Line(E, H))
By concurrent_sufficient_conditions on Line(C, H), Line(C, F), Line(C, I) we get concurrent(Line(C, F), Line(C, H), Line(C, I))
By concurrent_sufficient_conditions on Line(C, H), Line(C, F), Line(C, D) we get concurrent(Line(C, D), Line(C, F), Line(C, H))
By perpendicular_line_definition on line_intersection(h, Line(B, G)), h, altitude(E, A, D) we get h == perpendicular_line(line_intersection(h, Line(B, G)), altitude(E, A, D))
By line_intersection_definition on H, Line(D, H), Line(E, H) we get H == line_intersection(Line(D, H), Line(E, H))
By concurrent_sufficient_conditions on Line(E, F), Line(C, F), Line(D, F) we get concurrent(Line(C, F), Line(D, F), Line(E, F))
By concurrent_sufficient_conditions on Line(C, H), Line(E, H), f we get concurrent(f, Line(C, H), Line(E, H))
By perpendicular_line_definition on midpoint(B, G), h, altitude(F, A, D) we get h == perpendicular_line(midpoint(B, G), altitude(F, A, D))
By concurrent_sufficient_conditions on Line(E, H), Line(C, H), f we get concurrent(f, Line(C, H), Line(E, H))
By line_intersection_definition on E, Line(E, H), Line(E, F) we get E == line_intersection(Line(E, F), Line(E, H))
By perpendicular_line_definition on I, h, altitude(F, A, D) we get h == perpendicular_line(I, altitude(F, A, D))
By concurrent_sufficient_conditions on Line(C, F), Line(C, H), Line(C, D) we get concurrent(Line(C, D), Line(C, F), Line(C, H))
By perpendicular_line_definition on line_intersection(h, Line(B, G)), Line(B, G), h we get Line(B, G) == perpendicular_line(line_intersection(h, Line(B, G)), h)
By concurrent_sufficient_conditions on Line(C, H), Line(C, F), Line(B, C) we get concurrent(Line(B, C), Line(C, F), Line(C, H))
By between_imply_not_between on G, midpoint(B, G), B we get collinear_and_not_between(B, G, midpoint(B, G))
By between_imply_not_between on B, midpoint(B, G), G we get collinear_and_not_between(G, B, midpoint(B, G))
By parallel_line_definition on line_intersection(h, altitude(F, A, D)), altitude(F, A, D), Line(B, G) we get altitude(F, A, D) == parallel_line(line_intersection(h, altitude(F, A, D)), Line(B, G))
By parallel_line_definition on B, Line(B, G), altitude(F, A, D) we get Line(B, G) == parallel_line(B, altitude(F, A, D))
By parallel_line_definition on line_intersection(h, altitude(E, A, D)), altitude(E, A, D), Line(B, G) we get altitude(E, A, D) == parallel_line(line_intersection(h, altitude(E, A, D)), Line(B, G))
By parallel_line_definition on B, Line(B, G), altitude(E, A, D) we get Line(B, G) == parallel_line(B, altitude(E, A, D))
By parallel_line_definition on G, Line(B, G), altitude(E, A, D) we get Line(B, G) == parallel_line(G, altitude(E, A, D))
By parallel_line_definition on G, Line(B, G), altitude(F, A, D) we get Line(B, G) == parallel_line(G, altitude(F, A, D))
By parallel_line_definition on E, altitude(E, A, D), Line(B, G) we get altitude(E, A, D) == parallel_line(E, Line(B, G))
By parallel_line_definition on line_intersection(h, Line(B, G)), Line(B, G), altitude(F, A, D) we get Line(B, G) == parallel_line(line_intersection(h, Line(B, G)), altitude(F, A, D))
By parallel_line_definition on line_intersection(h, Line(B, G)), Line(B, G), altitude(E, A, D) we get Line(B, G) == parallel_line(line_intersection(h, Line(B, G)), altitude(E, A, D))
By parallel_line_definition on F, altitude(F, A, D), Line(B, G) we get altitude(F, A, D) == parallel_line(F, Line(B, G))
By in_imply_collinear on A, D, I we get collinear(A, D, I)
By orthocenter_concurrency on G, D, A we get orthocenter(A, D, G) in altitude(G, A, D), orthocenter(A, D, G) in altitude(D, A, G), orthocenter(A, D, G) in altitude(A, D, G)
By orthocenter_concurrency on D, B, A we get orthocenter(A, B, D) in altitude(D, A, B), orthocenter(A, B, D) in altitude(B, A, D), orthocenter(A, B, D) in altitude(A, B, D)
By in_imply_collinear on midpoint(B, G), D, I we get collinear(D, I, midpoint(B, G))
By in_imply_collinear on line_intersection(h, altitude(F, A, D)), D, I we get collinear(D, I, line_intersection(h, altitude(F, A, D)))
By in_imply_collinear on line_intersection(h, altitude(E, A, D)), D, I we get collinear(D, I, line_intersection(h, altitude(E, A, D)))
By in_imply_collinear on line_intersection(h, Line(B, G)), D, I we get collinear(D, I, line_intersection(h, Line(B, G)))
By in_imply_collinear on line_intersection(h, Line(B, G)), A, D we get collinear(A, D, line_intersection(h, Line(B, G)))
By in_imply_collinear on midpoint(B, G), A, D we get collinear(A, D, midpoint(B, G))
By in_imply_collinear on line_intersection(h, Line(B, G)), G, B we get collinear(B, G, line_intersection(h, Line(B, G)))
By line_containment_inequality on midpoint(B, G), E, h we get E != midpoint(B, G)
By line_containment_inequality on line_intersection(h, Line(B, G)), F, h we get F != line_intersection(h, Line(B, G))
By point_on_perpendicular_bisector on B, G, line_intersection(h, altitude(F, A, D)), h we get distance(B, line_intersection(h, altitude(F, A, D))) == distance(G, line_intersection(h, altitude(F, A, D)))
By point_on_perpendicular_bisector on G, B, line_intersection(h, Line(B, G)), h we get distance(B, line_intersection(h, Line(B, G))) == distance(G, line_intersection(h, Line(B, G)))
By point_on_perpendicular_bisector on G, B, line_intersection(h, altitude(E, A, D)), h we get distance(B, line_intersection(h, altitude(E, A, D))) == distance(G, line_intersection(h, altitude(E, A, D)))
By line_containment_inequality on line_intersection(h, Line(B, G)), E, Line(B, G) we get E != line_intersection(h, Line(B, G))
By line_containment_inequality on line_intersection(h, Line(B, G)), H, Line(B, G) we get H != line_intersection(h, Line(B, G))
By line_containment_inequality on midpoint(B, G), C, h we get C != midpoint(B, G)
By line_circle_intersection_has_at_most_two_points_0 on A, C, E, Circle(A, B, C) we get E not in Circle(A, B, C)
By line_containment_inequality on line_intersection(h, Line(B, G)), B, h we get B != line_intersection(h, Line(B, G))
By line_circle_intersection_has_at_most_two_points_0 on B, A, F, Circle(A, B, C) we get F not in Circle(A, B, C)
By line_circle_intersection_has_at_most_two_points_0 on A, C, G, Circle(A, B, C) we get G not in Circle(A, B, C)
By line_containment_inequality on line_intersection(h, Line(B, G)), A, Line(B, G) we get A != line_intersection(h, Line(B, G))
By line_circle_intersection_has_at_most_two_points_0 on G, B, midpoint(B, G), d we get midpoint(B, G) not in d
By line_circle_intersection_has_at_most_two_points_0 on A, B, H, Circle(A, B, C) we get H not in Circle(A, B, C)
By line_containment_inequality on midpoint(B, G), H, h we get H != midpoint(B, G)
By line_containment_inequality on line_intersection(h, Line(B, G)), G, h we get G != line_intersection(h, Line(B, G))
By line_containment_inequality on line_intersection(h, Line(B, G)), C, Line(B, G) we get C != line_intersection(h, Line(B, G))
By line_containment_inequality on midpoint(B, G), F, h we get F != midpoint(B, G)
By line_containment_inequality on line_intersection(h, Line(B, G)), I, Line(B, G) we get I != line_intersection(h, Line(B, G))
By line_containment_inequality on line_intersection(h, Line(B, G)), D, Line(B, G) we get D != line_intersection(h, Line(B, G))
By isosceles_triangle_midpoint on D, B, G we get midpoint(B, G) in median(D, B, G)
By power_of_a_point_on_circle on I, Circle(D, G, I) we get 0 == power_of_a_point(I, Circle(D, G, I))
By internal_angle_bisector_definition_v0_r on G, D, B, A we get Line(A, D) == internal_angle_bisector(B, A, G)
By anti_similar_triangle_basic_properties on B, G, A, G, B, A we get not_collinear(A, B, G), not_collinear(A, B, G), angle(B, G, A) == 0 - angle(G, B, A) mod 360, angle(G, A, B) == 0 - angle(B, A, G) mod 360, angle(A, B, G) == 0 - angle(A, G, B) mod 360, log(distance(B, G)) + log(distance(A, B)) == log(distance(B, G)) + log(distance(A, G)), log(distance(A, B)) + log(distance(A, B)) == log(distance(A, G)) + log(distance(A, G)), log(distance(A, B)) + log(distance(B, G)) == log(distance(A, G)) + log(distance(B, G))
By power_of_a_point_on_circle on D, Circle(B, D, I) we get 0 == power_of_a_point(D, Circle(B, D, I))
By collinear_definition on B, G, midpoint(B, G) we get G in Line(B, midpoint(B, G)), midpoint(B, G) in Line(B, G), Line(B, G) == Line(B, midpoint(B, G)), 0 == 2 * angle(G, B, midpoint(B, G)) mod 360
By log_of_2_times_distance on G, B, midpoint(B, G), G we get log(distance(B, G)) == 0.6931471805599453 + log(distance(G, midpoint(B, G)))
By power_of_a_point_on_circle on D, Circle(D, G, I) we get 0 == power_of_a_point(D, Circle(D, G, I))
By power_of_a_point_in_circle on B, Circle(B, D, I) we get 0 == power_of_a_point(B, Circle(B, D, I))
By isosceles_triangle_midpoint on I, B, G we get midpoint(B, G) in median(I, B, G)
By power_of_a_point_on_circle on A, Circle(A, B, C) we get 0 == power_of_a_point(A, Circle(A, B, C))
By isosceles_triangle_midpoint on A, G, B we get midpoint(B, G) in median(A, B, G)
By collinear_definition on B, midpoint(B, G), G we get midpoint(B, G) in Line(B, G), G in Line(B, midpoint(B, G)), Line(B, G) == Line(B, midpoint(B, G)), 0 == 2 * angle(midpoint(B, G), B, G) mod 360
By internal_angle_bisector_definition_v0_r on C, E, G, A we get Line(A, E) == internal_angle_bisector(C, A, G)
By power_of_a_point_on_circle on B, Circle(A, B, C) we get 0 == power_of_a_point(B, Circle(A, B, C))
By draw_point_of_tangency on Line(D, G), Circle(B, D, I) we get exists(line_circle_tangent_point(Line(D, G), Circle(B, D, I)))
By power_of_a_point_in_circle on C, Circle(A, B, C) we get 0 == power_of_a_point(C, Circle(A, B, C))
By log_of_2_times_distance on G, B, B, midpoint(B, G) we get log(distance(B, G)) == 0.6931471805599453 + log(distance(B, midpoint(B, G)))
By isosceles_triangle_altitude_v1 on midpoint(B, G), B, G we get identical(perpendicular_bisector(B, G), internal_angle_bisector(B, midpoint(B, G), G), perpendicular_line(midpoint(B, G), Line(B, G)))
By isosceles_triangle_altitude_v1 on A, B, G we get identical(perpendicular_bisector(B, G), internal_angle_bisector(B, A, G), perpendicular_line(A, Line(B, G)))
By isosceles_triangle_altitude_v3 on midpoint(B, G), B, G we get identical(perpendicular_bisector(B, G), internal_angle_bisector(B, midpoint(B, G), G), perpendicular_line(midpoint(B, G), Line(B, G)))
By perpendicular_bisector_properties on B, G we get perpendicular(Line(B, G), perpendicular_bisector(B, G)), midpoint(B, G) == line_intersection(Line(B, G), perpendicular_bisector(B, G))
By collinear_definition on G, midpoint(B, G), B we get midpoint(B, G) in Line(B, G), B in Line(G, midpoint(B, G)), Line(B, G) == Line(G, midpoint(B, G)), 0 == 2 * angle(midpoint(B, G), G, B) mod 360
By power_of_a_point_on_circle on I, Circle(B, D, I) we get 0 == power_of_a_point(I, Circle(B, D, I))
By power_of_a_point_in_circle on I, Circle(A, B, C) we get 0 == power_of_a_point(I, Circle(A, B, C))
By collinear_definition on G, B, midpoint(B, G) we get B in Line(G, midpoint(B, G)), midpoint(B, G) in Line(B, G), Line(B, G) == Line(G, midpoint(B, G)), 0 == 2 * angle(B, G, midpoint(B, G)) mod 360
By power_of_a_point_on_circle on G, Circle(D, G, I) we get 0 == power_of_a_point(G, Circle(D, G, I))
By isosceles_triangle_altitude_v1 on midpoint(B, G), G, B we get identical(perpendicular_bisector(B, G), internal_angle_bisector(B, midpoint(B, G), G), perpendicular_line(midpoint(B, G), Line(B, G)))
By draw_point_of_tangency on i, Circle(D, G, I) we get exists(line_circle_tangent_point(i, Circle(D, G, I)))
By isosceles_triangle_altitude_v1 on A, G, B we get identical(perpendicular_bisector(B, G), internal_angle_bisector(B, A, G), perpendicular_line(A, Line(B, G)))
By isosceles_triangle_altitude_v3 on midpoint(B, G), G, B we get identical(perpendicular_bisector(B, G), internal_angle_bisector(B, midpoint(B, G), G), perpendicular_line(midpoint(B, G), Line(B, G)))
By isosceles_triangle_altitude_v3 on A, B, G we get identical(perpendicular_bisector(B, G), internal_angle_bisector(B, A, G), perpendicular_line(A, Line(B, G)))
By isosceles_triangle_altitude_v3 on A, G, B we get identical(perpendicular_bisector(B, G), internal_angle_bisector(B, A, G), perpendicular_line(A, Line(B, G)))
By sas_anti_congruence on A, B, I, A, G, I we get anti_congruent_triangles(A, B, I, A, G, I)
By collinear_definition on midpoint(B, G), G, B we get G in Line(B, midpoint(B, G)), B in Line(G, midpoint(B, G)), Line(B, midpoint(B, G)) == Line(G, midpoint(B, G)), 0 == 2 * angle(G, midpoint(B, G), B) mod 360
By altitude_definition on E, I, D, altitude(E, A, D) we get altitude(E, A, D) == altitude(E, D, I)
By power_of_a_point_definition on G, E, A, Circle(A, D, E) we get log(distance(E, G)) + log(distance(A, G)) == log(power_of_a_point(G, Circle(A, D, E)))
By sas_anti_congruence on A, G, I, A, B, I we get anti_congruent_triangles(A, B, I, A, G, I)
By anti_similar_triangle_basic_properties on D, B, A, D, G, A we get not_collinear(A, B, D), not_collinear(A, D, G), angle(D, B, A) == 0 - angle(D, G, A) mod 360, angle(B, A, D) == 0 - angle(G, A, D) mod 360, angle(A, D, B) == 0 - angle(A, D, G) mod 360, log(distance(B, D)) + log(distance(A, G)) == log(distance(D, G)) + log(distance(A, B)), log(distance(A, B)) + log(distance(A, D)) == log(distance(A, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(B, D)) == log(distance(A, D)) + log(distance(D, G))
By altitude_definition on F, I, D, altitude(F, A, D) we get altitude(F, A, D) == altitude(F, D, I)
By anti_similar_triangle_basic_properties on G, D, A, B, D, A we get not_collinear(A, D, G), not_collinear(A, B, D), angle(G, D, A) == 0 - angle(B, D, A) mod 360, angle(D, A, G) == 0 - angle(D, A, B) mod 360, angle(A, G, D) == 0 - angle(A, B, D) mod 360, log(distance(B, D)) + log(distance(A, D)) == log(distance(D, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(A, B)) == log(distance(A, D)) + log(distance(A, G)), log(distance(A, B)) + log(distance(D, G)) == log(distance(A, G)) + log(distance(B, D))
By sas_anti_congruence on I, B, A, I, G, A we get anti_congruent_triangles(A, B, I, A, G, I)
By collinear_definition on midpoint(B, G), B, G we get B in Line(G, midpoint(B, G)), G in Line(B, midpoint(B, G)), Line(B, midpoint(B, G)) == Line(G, midpoint(B, G)), 0 == 2 * angle(B, midpoint(B, G), G) mod 360
By isosceles_triangle_properties on midpoint(B, G), G, B we get distance(B, midpoint(B, G)) == distance(G, midpoint(B, G)), angle(G, B, midpoint(B, G)) == angle(midpoint(B, G), G, B) mod 360
By isosceles_triangle_properties on midpoint(B, G), B, G we get distance(B, midpoint(B, G)) == distance(G, midpoint(B, G)), angle(B, G, midpoint(B, G)) == angle(midpoint(B, G), B, G) mod 360
By sas_anti_congruence on I, G, A, I, B, A we get anti_congruent_triangles(A, B, I, A, G, I)
By power_of_a_point_tangent on B, D, Circle(D, G, I) we get 2 * log(distance(B, D)) == log(power_of_a_point(B, Circle(D, G, I)))
By power_of_a_point_definition on C, A, E, Circle(A, D, E) we get log(distance(A, C)) + log(distance(C, E)) == log(power_of_a_point(C, Circle(A, D, E)))
By power_of_a_point_tangent on G, D, Circle(B, D, I) we get 2 * log(distance(D, G)) == log(power_of_a_point(G, Circle(B, D, I)))
By power_of_a_point_definition on B, F, A, Circle(A, D, E) we get log(distance(B, F)) + log(distance(A, B)) == log(power_of_a_point(B, Circle(A, D, E)))
By power_of_a_point_definition on H, A, F, Circle(A, D, E) we get log(distance(A, H)) + log(distance(F, H)) == log(power_of_a_point(H, Circle(A, D, E)))
By perpendicular_line_definition on orthocenter(A, B, D), Line(B, G), h we get Line(B, G) == perpendicular_line(orthocenter(A, B, D), h)
By perpendicular_line_definition on line_circle_tangent_point(i, Circle(D, G, I)), i, altitude(F, B, D) we get i == perpendicular_line(line_circle_tangent_point(i, Circle(D, G, I)), altitude(F, B, D))
By perpendicular_line_definition on D, Line(D, G), altitude(A, D, G) we get Line(D, G) == perpendicular_line(D, altitude(A, D, G))
By line_intersection_definition on orthocenter(A, D, G), Line(B, G), Line(D, E) we get orthocenter(A, D, G) == line_intersection(Line(B, G), Line(D, E))
By perpendicular_line_definition on D, i, altitude(A, B, D) we get i == perpendicular_line(D, altitude(A, B, D))
By perpendicular_line_definition on line_intersection(Line(D, G), altitude(E, D, G)), Line(D, G), altitude(A, D, G) we get Line(D, G) == perpendicular_line(line_intersection(Line(D, G), altitude(E, D, G)), altitude(A, D, G))
By perpendicular_line_definition on orthocenter(A, D, G), Line(D, E), g we get Line(D, E) == perpendicular_line(orthocenter(A, D, G), g)
By line_intersection_definition on orthocenter(A, B, D), Line(B, G), Line(D, F) we get orthocenter(A, B, D) == line_intersection(Line(B, G), Line(D, F))
By perpendicular_line_definition on orthocenter(A, B, D), altitude(A, B, D), i we get altitude(A, B, D) == perpendicular_line(orthocenter(A, B, D), i)
By perpendicular_line_definition on line_intersection(i, altitude(F, B, D)), i, altitude(A, B, D) we get i == perpendicular_line(line_intersection(i, altitude(F, B, D)), altitude(A, B, D))
By perpendicular_line_definition on orthocenter(A, D, G), Line(B, G), h we get Line(B, G) == perpendicular_line(orthocenter(A, D, G), h)
By perpendicular_line_definition on line_circle_tangent_point(i, Circle(D, G, I)), i, altitude(A, B, D) we get i == perpendicular_line(line_circle_tangent_point(i, Circle(D, G, I)), altitude(A, B, D))
By perpendicular_line_definition on orthocenter(A, B, D), Line(D, F), f we get Line(D, F) == perpendicular_line(orthocenter(A, B, D), f)
By perpendicular_line_definition on B, i, altitude(A, B, D) we get i == perpendicular_line(B, altitude(A, B, D))
By perpendicular_line_definition on line_circle_tangent_point(Line(D, G), Circle(B, D, I)), Line(D, G), altitude(E, D, G) we get Line(D, G) == perpendicular_line(line_circle_tangent_point(Line(D, G), Circle(B, D, I)), altitude(E, D, G))
By perpendicular_line_definition on line_circle_tangent_point(Line(D, G), Circle(B, D, I)), Line(D, G), altitude(A, D, G) we get Line(D, G) == perpendicular_line(line_circle_tangent_point(Line(D, G), Circle(B, D, I)), altitude(A, D, G))
By perpendicular_line_definition on orthocenter(A, D, G), altitude(A, D, G), Line(D, G) we get altitude(A, D, G) == perpendicular_line(orthocenter(A, D, G), Line(D, G))
By perpendicular_line_definition on G, Line(D, G), altitude(A, D, G) we get Line(D, G) == perpendicular_line(G, altitude(A, D, G))
By line_unique_intersection_v1 on Line(B, I), h, I, midpoint(B, G) we get midpoint(B, G) not in Line(B, I)
By line_unique_intersection_v1 on g, Line(B, G), G, midpoint(B, G) we get midpoint(B, G) not in g
By line_unique_intersection_v1 on i, Line(B, G), B, midpoint(B, G) we get midpoint(B, G) not in i
By line_unique_intersection_v1 on f, h, A, midpoint(B, G) we get midpoint(B, G) not in f
By line_unique_intersection_v1 on Line(D, E), h, D, midpoint(B, G) we get midpoint(B, G) not in Line(D, E)
By line_unique_intersection_v1 on Line(D, F), h, D, midpoint(B, G) we get midpoint(B, G) not in Line(D, F)
By line_unique_intersection_v1 on Line(D, H), h, D, midpoint(B, G) we get midpoint(B, G) not in Line(D, H)
By line_unique_intersection_v1 on Line(G, I), h, I, midpoint(B, G) we get midpoint(B, G) not in Line(G, I)
By line_unique_intersection_v1 on Line(B, C), Line(B, G), B, midpoint(B, G) we get midpoint(B, G) not in Line(B, C)
By line_unique_intersection_v1 on Line(D, G), Line(B, G), G, midpoint(B, G) we get midpoint(B, G) not in Line(D, G)
By line_unique_intersection_v1 on Line(C, I), h, I, midpoint(B, G) we get midpoint(B, G) not in Line(C, I)
By line_unique_intersection_v1 on Line(C, D), h, D, midpoint(B, G) we get midpoint(B, G) not in Line(C, D)
By between_implies_orientation on A, B, midpoint(B, G), G we get orientation(A, B, midpoint(B, G)) == orientation(A, midpoint(B, G), G) mod 360, orientation(A, B, G) == orientation(A, B, midpoint(B, G)) mod 360
By collinear_and_not_between_implies_orientation on E, B, G, midpoint(B, G) we get orientation(B, E, G) == orientation(E, G, midpoint(B, G)) mod 360
By between_implies_orientation on I, B, midpoint(B, G), G we get orientation(B, midpoint(B, G), I) == orientation(G, I, midpoint(B, G)) mod 360, orientation(B, G, I) == orientation(B, midpoint(B, G), I) mod 360
By perpendicular_direction_conditions_v0_r on I, A, midpoint(B, G), G we get 180 == 2 * direction(I, A) - 2 * direction(midpoint(B, G), G) mod 360
By between_implies_orientation on F, B, midpoint(B, G), G we get orientation(B, midpoint(B, G), F) == orientation(F, midpoint(B, G), G) mod 360, orientation(B, G, F) == orientation(B, midpoint(B, G), F) mod 360
By collinear_and_not_between_implies_orientation on H, midpoint(B, G), G, B we get orientation(B, H, G) == orientation(G, midpoint(B, G), H) mod 360
By perpendicular_direction_conditions_v0_r on A, D, midpoint(B, G), B we get 180 == 2 * direction(A, D) - 2 * direction(midpoint(B, G), B) mod 360
By projection_definition on E, line_intersection(Line(D, G), altitude(E, D, G)), Line(D, G) we get projection(E, Line(D, G)) == line_intersection(Line(D, G), altitude(E, D, G))
By perpendicular_direction_conditions_v0_r on midpoint(B, G), B, I, D we get 180 == 2 * direction(midpoint(B, G), B) - 2 * direction(I, D) mod 360
By collinear_and_not_between_implies_orientation on C, midpoint(B, G), G, B we get orientation(B, C, G) == orientation(C, G, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), G, D, I we get 180 == 2 * direction(midpoint(B, G), G) - 2 * direction(D, I) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), G, A, D we get 180 == 2 * direction(midpoint(B, G), G) - 2 * direction(A, D) mod 360
By between_implies_orientation on A, G, midpoint(B, G), B we get orientation(A, G, midpoint(B, G)) == orientation(A, midpoint(B, G), B) mod 360, orientation(A, G, B) == orientation(A, G, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on I, D, midpoint(B, G), G we get 180 == 2 * direction(I, D) - 2 * direction(midpoint(B, G), G) mod 360
By projection_definition on I, midpoint(B, G), Line(B, G) we get midpoint(B, G) == projection(I, Line(B, G))
By collinear_and_not_between_implies_orientation on F, B, G, midpoint(B, G) we get orientation(B, F, G) == orientation(F, G, midpoint(B, G)) mod 360
By collinear_and_not_between_implies_orientation on I, midpoint(B, G), G, B we get orientation(B, I, G) == orientation(G, midpoint(B, G), I) mod 360
By projection_definition on B, midpoint(B, G), h we get midpoint(B, G) == projection(B, h)
By perpendicular_direction_conditions_v0_r on midpoint(B, G), B, I, A we get 180 == 2 * direction(midpoint(B, G), B) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), B, D, I we get 180 == 2 * direction(midpoint(B, G), B) - 2 * direction(D, I) mod 360
By projection_definition on F, line_intersection(h, altitude(F, A, D)), h we get projection(F, h) == line_intersection(h, altitude(F, A, D))
By collinear_and_not_between_implies_orientation on E, midpoint(B, G), B, G we get orientation(B, G, E) == orientation(B, midpoint(B, G), E) mod 360
By projection_definition on E, line_intersection(h, altitude(E, A, D)), h we get projection(E, h) == line_intersection(h, altitude(E, A, D))
By perpendicular_direction_conditions_v0_r on I, A, midpoint(B, G), B we get 180 == 2 * direction(I, A) - 2 * direction(midpoint(B, G), B) mod 360
By perpendicular_direction_conditions_v0_r on D, I, midpoint(B, G), G we get 180 == 2 * direction(D, I) - 2 * direction(midpoint(B, G), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), B, D, A we get 180 == 2 * direction(midpoint(B, G), B) - 2 * direction(D, A) mod 360
By collinear_and_not_between_implies_orientation on H, G, B, midpoint(B, G) we get orientation(B, G, H) == orientation(B, midpoint(B, G), H) mod 360
By collinear_and_not_between_implies_orientation on D, B, G, midpoint(B, G) we get orientation(B, D, G) == orientation(D, G, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, A, midpoint(B, G), G we get 180 == 2 * direction(D, A) - 2 * direction(midpoint(B, G), G) mod 360
By projection_definition on F, line_intersection(Line(D, H), altitude(F, D, H)), Line(D, H) we get projection(F, Line(D, H)) == line_intersection(Line(D, H), altitude(F, D, H))
By collinear_and_not_between_implies_orientation on D, midpoint(B, G), B, G we get orientation(B, G, D) == orientation(B, midpoint(B, G), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), G, A, I we get 180 == 2 * direction(midpoint(B, G), G) - 2 * direction(A, I) mod 360
By between_implies_orientation on E, B, midpoint(B, G), G we get orientation(B, midpoint(B, G), E) == orientation(E, midpoint(B, G), G) mod 360, orientation(B, G, E) == orientation(B, midpoint(B, G), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), B, A, I we get 180 == 2 * direction(midpoint(B, G), B) - 2 * direction(A, I) mod 360
By projection_definition on E, line_intersection(Line(C, D), altitude(E, C, D)), Line(C, D) we get projection(E, Line(C, D)) == line_intersection(Line(C, D), altitude(E, C, D))
By between_implies_orientation on E, G, midpoint(B, G), B we get orientation(B, E, midpoint(B, G)) == orientation(E, G, midpoint(B, G)) mod 360, orientation(B, E, G) == orientation(E, G, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, I, midpoint(B, G), B we get 180 == 2 * direction(A, I) - 2 * direction(midpoint(B, G), B) mod 360
By between_implies_orientation on C, G, midpoint(B, G), B we get orientation(B, C, midpoint(B, G)) == orientation(C, G, midpoint(B, G)) mod 360, orientation(B, C, G) == orientation(C, G, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), G, I, A we get 180 == 2 * direction(midpoint(B, G), G) - 2 * direction(I, A) mod 360
By projection_definition on F, line_intersection(i, altitude(F, B, D)), i we get projection(F, i) == line_intersection(i, altitude(F, B, D))
By perpendicular_direction_conditions_v0_r on D, A, midpoint(B, G), B we get 180 == 2 * direction(D, A) - 2 * direction(midpoint(B, G), B) mod 360
By between_implies_orientation on D, B, midpoint(B, G), G we get orientation(B, midpoint(B, G), D) == orientation(D, midpoint(B, G), G) mod 360, orientation(B, G, D) == orientation(B, midpoint(B, G), D) mod 360
By perpendicular_direction_conditions_v0_r on I, D, midpoint(B, G), B we get 180 == 2 * direction(I, D) - 2 * direction(midpoint(B, G), B) mod 360
By between_implies_orientation on H, B, midpoint(B, G), G we get orientation(B, midpoint(B, G), H) == orientation(G, H, midpoint(B, G)) mod 360, orientation(B, G, H) == orientation(B, midpoint(B, G), H) mod 360
By between_implies_orientation on D, G, midpoint(B, G), B we get orientation(B, D, midpoint(B, G)) == orientation(D, G, midpoint(B, G)) mod 360, orientation(B, D, G) == orientation(D, G, midpoint(B, G)) mod 360
By between_implies_orientation on H, G, midpoint(B, G), B we get orientation(B, H, midpoint(B, G)) == orientation(G, midpoint(B, G), H) mod 360, orientation(B, H, G) == orientation(G, midpoint(B, G), H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), B, A, D we get 180 == 2 * direction(midpoint(B, G), B) - 2 * direction(A, D) mod 360
By between_implies_orientation on I, G, midpoint(B, G), B we get orientation(B, I, midpoint(B, G)) == orientation(G, midpoint(B, G), I) mod 360, orientation(B, I, G) == orientation(G, midpoint(B, G), I) mod 360
By projection_definition on D, midpoint(B, G), Line(B, G) we get midpoint(B, G) == projection(D, Line(B, G))
By perpendicular_direction_conditions_v0_r on midpoint(B, G), G, D, A we get 180 == 2 * direction(midpoint(B, G), G) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), G, I, D we get 180 == 2 * direction(midpoint(B, G), G) - 2 * direction(I, D) mod 360
By perpendicular_direction_conditions_v0_r on D, I, midpoint(B, G), B we get 180 == 2 * direction(D, I) - 2 * direction(midpoint(B, G), B) mod 360
By between_implies_orientation on C, B, midpoint(B, G), G we get orientation(B, midpoint(B, G), C) == orientation(C, midpoint(B, G), G) mod 360, orientation(B, G, C) == orientation(B, midpoint(B, G), C) mod 360
By between_implies_orientation on F, G, midpoint(B, G), B we get orientation(B, F, midpoint(B, G)) == orientation(F, G, midpoint(B, G)) mod 360, orientation(B, F, G) == orientation(F, G, midpoint(B, G)) mod 360
By projection_definition on A, midpoint(B, G), Line(B, G) we get midpoint(B, G) == projection(A, Line(B, G))
By perpendicular_direction_conditions_v0_r on A, I, midpoint(B, G), G we get 180 == 2 * direction(A, I) - 2 * direction(midpoint(B, G), G) mod 360
By projection_definition on G, midpoint(B, G), h we get midpoint(B, G) == projection(G, h)
By perpendicular_direction_conditions_v0_r on A, D, midpoint(B, G), G we get 180 == 2 * direction(A, D) - 2 * direction(midpoint(B, G), G) mod 360
By parallel_line_definition on orthocenter(A, D, G), Line(B, G), altitude(E, A, D) we get Line(B, G) == parallel_line(orthocenter(A, D, G), altitude(E, A, D))
By parallel_line_definition on orthocenter(A, D, G), Line(B, G), altitude(F, A, D) we get Line(B, G) == parallel_line(orthocenter(A, D, G), altitude(F, A, D))
By parallel_line_definition on orthocenter(A, B, D), Line(B, G), altitude(F, A, D) we get Line(B, G) == parallel_line(orthocenter(A, B, D), altitude(F, A, D))
By parallel_line_definition on orthocenter(A, B, D), Line(B, G), altitude(E, A, D) we get Line(B, G) == parallel_line(orthocenter(A, B, D), altitude(E, A, D))
By different_points_v1 on A, I we get 0 != distance(A, I)
By different_points_v1 on I, midpoint(B, G) we get 0 != distance(I, midpoint(B, G))
By different_points_v1 on line_intersection(Line(D, H), altitude(F, D, H)), F we get 0 != distance(F, line_intersection(Line(D, H), altitude(F, D, H)))
By different_points_v1 on line_intersection(Line(C, D), altitude(E, C, D)), E we get 0 != distance(E, line_intersection(Line(C, D), altitude(E, C, D)))
By perpendicular_direction_conditions_v0_r on B, G, A, midpoint(B, G) we get 180 == 2 * direction(B, G) - 2 * direction(A, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(B, G), I, midpoint(B, G) we get 180 == 2 * direction(B, midpoint(B, G)) - 2 * direction(I, midpoint(B, G)) mod 360
By different_points_v1 on line_intersection(h, altitude(E, A, D)), E we get 0 != distance(E, line_intersection(h, altitude(E, A, D)))
By different_points_v1 on A, midpoint(B, G) we get 0 != distance(A, midpoint(B, G))
By different_points_v1 on F, line_intersection(i, altitude(F, B, D)) we get 0 != distance(F, line_intersection(i, altitude(F, B, D)))
By different_points_v1 on D, midpoint(B, G) we get 0 != distance(D, midpoint(B, G))
By different_points_v1 on line_intersection(h, altitude(F, A, D)), F we get 0 != distance(F, line_intersection(h, altitude(F, A, D)))
By different_points_v1 on line_intersection(Line(D, G), altitude(E, D, G)), E we get 0 != distance(E, line_intersection(Line(D, G), altitude(E, D, G)))
By perpendicular_direction_conditions_v0_r on midpoint(B, G), G, I, midpoint(B, G) we get 180 == 2 * direction(midpoint(B, G), G) - 2 * direction(I, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(B, G), G, midpoint(B, G) we get 180 == 2 * direction(D, midpoint(B, G)) - 2 * direction(G, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, B, D, midpoint(B, G) we get 180 == 2 * direction(G, B) - 2 * direction(D, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(B, G), midpoint(B, G), G we get 180 == 2 * direction(I, midpoint(B, G)) - 2 * direction(midpoint(B, G), G) mod 360
By perpendicular_direction_conditions_v0_r on B, G, midpoint(B, G), I we get 180 == 2 * direction(B, G) - 2 * direction(midpoint(B, G), I) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), A, B, G we get 180 == 2 * direction(midpoint(B, G), A) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(B, G), B, midpoint(B, G) we get 180 == 2 * direction(D, midpoint(B, G)) - 2 * direction(B, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), A, midpoint(B, G), G we get 180 == 2 * direction(midpoint(B, G), A) - 2 * direction(midpoint(B, G), G) mod 360
By perpendicular_direction_conditions_v0_r on A, D, E, line_intersection(h, altitude(E, A, D)) we get 180 == 2 * direction(A, D) - 2 * direction(E, line_intersection(h, altitude(E, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on G, B, A, midpoint(B, G) we get 180 == 2 * direction(G, B) - 2 * direction(A, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), A, G, midpoint(B, G) we get 180 == 2 * direction(midpoint(B, G), A) - 2 * direction(G, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), B, I, midpoint(B, G) we get 180 == 2 * direction(midpoint(B, G), B) - 2 * direction(I, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), D, B, midpoint(B, G) we get 180 == 2 * direction(midpoint(B, G), D) - 2 * direction(B, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), A, G, B we get 180 == 2 * direction(midpoint(B, G), A) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(B, G), A, midpoint(B, G) we get 180 == 2 * direction(G, midpoint(B, G)) - 2 * direction(A, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(B, G), midpoint(B, G), I we get 180 == 2 * direction(G, midpoint(B, G)) - 2 * direction(midpoint(B, G), I) mod 360
By perpendicular_direction_conditions_v0_r on I, D, E, line_intersection(h, altitude(E, A, D)) we get 180 == 2 * direction(I, D) - 2 * direction(E, line_intersection(h, altitude(E, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), I, G, B we get 180 == 2 * direction(midpoint(B, G), I) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), B, D, midpoint(B, G) we get 180 == 2 * direction(midpoint(B, G), B) - 2 * direction(D, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on I, A, line_intersection(h, altitude(E, A, D)), E we get 180 == 2 * direction(I, A) - 2 * direction(line_intersection(h, altitude(E, A, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on A, I, F, line_intersection(h, altitude(F, A, D)) we get 180 == 2 * direction(A, I) - 2 * direction(F, line_intersection(h, altitude(F, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(F, A, D)), F, I, A we get 180 == 2 * direction(line_intersection(h, altitude(F, A, D)), F) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on I, D, line_intersection(h, altitude(E, A, D)), E we get 180 == 2 * direction(I, D) - 2 * direction(line_intersection(h, altitude(E, A, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), D, midpoint(B, G), B we get 180 == 2 * direction(midpoint(B, G), D) - 2 * direction(midpoint(B, G), B) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(B, G), midpoint(B, G), A we get 180 == 2 * direction(G, midpoint(B, G)) - 2 * direction(midpoint(B, G), A) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(h, altitude(E, A, D)), A, D we get 180 == 2 * direction(E, line_intersection(h, altitude(E, A, D))) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), A, B, midpoint(B, G) we get 180 == 2 * direction(midpoint(B, G), A) - 2 * direction(B, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(B, G), D, midpoint(B, G) we get 180 == 2 * direction(B, midpoint(B, G)) - 2 * direction(D, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), G, midpoint(B, G), I we get 180 == 2 * direction(midpoint(B, G), G) - 2 * direction(midpoint(B, G), I) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), B, A, midpoint(B, G) we get 180 == 2 * direction(midpoint(B, G), B) - 2 * direction(A, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(i, altitude(F, B, D)), B, D we get 180 == 2 * direction(F, line_intersection(i, altitude(F, B, D))) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), G, A, midpoint(B, G) we get 180 == 2 * direction(midpoint(B, G), G) - 2 * direction(A, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), B, midpoint(B, G), A we get 180 == 2 * direction(midpoint(B, G), B) - 2 * direction(midpoint(B, G), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), B, midpoint(B, G), I we get 180 == 2 * direction(midpoint(B, G), B) - 2 * direction(midpoint(B, G), I) mod 360
By in_imply_collinear on line_intersection(h, altitude(F, A, D)), I, A we get collinear(A, I, line_intersection(h, altitude(F, A, D)))
By perpendicular_direction_conditions_v0_r on midpoint(B, G), I, B, midpoint(B, G) we get 180 == 2 * direction(midpoint(B, G), I) - 2 * direction(B, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on C, D, line_intersection(Line(C, D), altitude(E, C, D)), E we get 180 == 2 * direction(C, D) - 2 * direction(line_intersection(Line(C, D), altitude(E, C, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on A, D, F, line_intersection(h, altitude(F, A, D)) we get 180 == 2 * direction(A, D) - 2 * direction(F, line_intersection(h, altitude(F, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on D, B, line_intersection(i, altitude(F, B, D)), F we get 180 == 2 * direction(D, B) - 2 * direction(line_intersection(i, altitude(F, B, D)), F) mod 360
By in_imply_collinear on line_intersection(h, altitude(F, A, D)), A, midpoint(B, G) we get collinear(A, midpoint(B, G), line_intersection(h, altitude(F, A, D)))
By in_imply_collinear on orthocenter(A, D, G), midpoint(B, G), B we get collinear(B, midpoint(B, G), orthocenter(A, D, G))
By perpendicular_direction_conditions_v0_r on G, D, line_intersection(Line(D, G), altitude(E, D, G)), E we get 180 == 2 * direction(G, D) - 2 * direction(line_intersection(Line(D, G), altitude(E, D, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, altitude(F, B, D)), F, B, D we get 180 == 2 * direction(line_intersection(i, altitude(F, B, D)), F) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(B, G), G, B we get 180 == 2 * direction(D, midpoint(B, G)) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), I, midpoint(B, G), G we get 180 == 2 * direction(midpoint(B, G), I) - 2 * direction(midpoint(B, G), G) mod 360
By perpendicular_direction_conditions_v0_r on A, D, line_intersection(h, altitude(F, A, D)), F we get 180 == 2 * direction(A, D) - 2 * direction(line_intersection(h, altitude(F, A, D)), F) mod 360
By perpendicular_direction_conditions_v0_r on G, B, I, midpoint(B, G) we get 180 == 2 * direction(G, B) - 2 * direction(I, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(h, altitude(F, A, D)), I, A we get 180 == 2 * direction(F, line_intersection(h, altitude(F, A, D))) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on A, I, E, line_intersection(h, altitude(E, A, D)) we get 180 == 2 * direction(A, I) - 2 * direction(E, line_intersection(h, altitude(E, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), B, midpoint(B, G), D we get 180 == 2 * direction(midpoint(B, G), B) - 2 * direction(midpoint(B, G), D) mod 360
By perpendicular_direction_conditions_v0_r on D, I, line_intersection(h, altitude(F, A, D)), F we get 180 == 2 * direction(D, I) - 2 * direction(line_intersection(h, altitude(F, A, D)), F) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(h, altitude(F, A, D)), I, D we get 180 == 2 * direction(F, line_intersection(h, altitude(F, A, D))) - 2 * direction(I, D) mod 360
By perpendicular_direction_conditions_v0_r on D, A, E, line_intersection(h, altitude(E, A, D)) we get 180 == 2 * direction(D, A) - 2 * direction(E, line_intersection(h, altitude(E, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on B, D, line_intersection(i, altitude(F, B, D)), F we get 180 == 2 * direction(B, D) - 2 * direction(line_intersection(i, altitude(F, B, D)), F) mod 360
By perpendicular_direction_conditions_v0_r on B, G, D, midpoint(B, G) we get 180 == 2 * direction(B, G) - 2 * direction(D, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), G, midpoint(B, G), D we get 180 == 2 * direction(midpoint(B, G), G) - 2 * direction(midpoint(B, G), D) mod 360
By in_imply_collinear on line_intersection(h, altitude(F, A, D)), midpoint(B, G), D we get collinear(D, midpoint(B, G), line_intersection(h, altitude(F, A, D)))
By perpendicular_direction_conditions_v0_r on I, midpoint(B, G), B, G we get 180 == 2 * direction(I, midpoint(B, G)) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on D, B, F, line_intersection(i, altitude(F, B, D)) we get 180 == 2 * direction(D, B) - 2 * direction(F, line_intersection(i, altitude(F, B, D))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(h, altitude(E, A, D)), D, I we get 180 == 2 * direction(E, line_intersection(h, altitude(E, A, D))) - 2 * direction(D, I) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(E, A, D)), E, D, A we get 180 == 2 * direction(line_intersection(h, altitude(E, A, D)), E) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on D, A, line_intersection(h, altitude(E, A, D)), E we get 180 == 2 * direction(D, A) - 2 * direction(line_intersection(h, altitude(E, A, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on B, G, I, midpoint(B, G) we get 180 == 2 * direction(B, G) - 2 * direction(I, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(C, D), altitude(E, C, D)), E, C, D we get 180 == 2 * direction(line_intersection(Line(C, D), altitude(E, C, D)), E) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(E, A, D)), E, I, A we get 180 == 2 * direction(line_intersection(h, altitude(E, A, D)), E) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(F, A, D)), F, I, D we get 180 == 2 * direction(line_intersection(h, altitude(F, A, D)), F) - 2 * direction(I, D) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(h, altitude(F, A, D)), A, I we get 180 == 2 * direction(F, line_intersection(h, altitude(F, A, D))) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(F, A, D)), F, D, A we get 180 == 2 * direction(line_intersection(h, altitude(F, A, D)), F) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on D, A, line_intersection(h, altitude(F, A, D)), F we get 180 == 2 * direction(D, A) - 2 * direction(line_intersection(h, altitude(F, A, D)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(F, A, D)), F, A, D we get 180 == 2 * direction(line_intersection(h, altitude(F, A, D)), F) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(D, G), altitude(E, D, G)), G, D we get 180 == 2 * direction(E, line_intersection(Line(D, G), altitude(E, D, G))) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on D, C, line_intersection(Line(C, D), altitude(E, C, D)), E we get 180 == 2 * direction(D, C) - 2 * direction(line_intersection(Line(C, D), altitude(E, C, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(B, G), midpoint(B, G), A we get 180 == 2 * direction(B, midpoint(B, G)) - 2 * direction(midpoint(B, G), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(E, A, D)), E, I, D we get 180 == 2 * direction(line_intersection(h, altitude(E, A, D)), E) - 2 * direction(I, D) mod 360
By perpendicular_direction_conditions_v0_r on A, D, line_intersection(h, altitude(E, A, D)), E we get 180 == 2 * direction(A, D) - 2 * direction(line_intersection(h, altitude(E, A, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), D, G, midpoint(B, G) we get 180 == 2 * direction(midpoint(B, G), D) - 2 * direction(G, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(E, A, D)), E, A, I we get 180 == 2 * direction(line_intersection(h, altitude(E, A, D)), E) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(h, altitude(F, A, D)), D, I we get 180 == 2 * direction(F, line_intersection(h, altitude(F, A, D))) - 2 * direction(D, I) mod 360
By perpendicular_direction_conditions_v0_r on I, D, line_intersection(h, altitude(F, A, D)), F we get 180 == 2 * direction(I, D) - 2 * direction(line_intersection(h, altitude(F, A, D)), F) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(B, G), midpoint(B, G), I we get 180 == 2 * direction(B, midpoint(B, G)) - 2 * direction(midpoint(B, G), I) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(B, G), midpoint(B, G), G we get 180 == 2 * direction(D, midpoint(B, G)) - 2 * direction(midpoint(B, G), G) mod 360
By perpendicular_direction_conditions_v0_r on D, I, E, line_intersection(h, altitude(E, A, D)) we get 180 == 2 * direction(D, I) - 2 * direction(E, line_intersection(h, altitude(E, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(D, G), altitude(E, D, G)), E, G, D we get 180 == 2 * direction(line_intersection(Line(D, G), altitude(E, D, G)), E) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(B, G), B, G we get 180 == 2 * direction(A, midpoint(B, G)) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(B, G), G, midpoint(B, G) we get 180 == 2 * direction(I, midpoint(B, G)) - 2 * direction(G, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on B, D, F, line_intersection(i, altitude(F, B, D)) we get 180 == 2 * direction(B, D) - 2 * direction(F, line_intersection(i, altitude(F, B, D))) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(B, G), midpoint(B, G), D we get 180 == 2 * direction(G, midpoint(B, G)) - 2 * direction(midpoint(B, G), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(F, A, D)), F, A, I we get 180 == 2 * direction(line_intersection(h, altitude(F, A, D)), F) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(B, G), D, midpoint(B, G) we get 180 == 2 * direction(G, midpoint(B, G)) - 2 * direction(D, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on C, D, E, line_intersection(Line(C, D), altitude(E, C, D)) we get 180 == 2 * direction(C, D) - 2 * direction(E, line_intersection(Line(C, D), altitude(E, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(B, G), A, midpoint(B, G) we get 180 == 2 * direction(B, midpoint(B, G)) - 2 * direction(A, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, B, midpoint(B, G), A we get 180 == 2 * direction(G, B) - 2 * direction(midpoint(B, G), A) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(B, G), I, midpoint(B, G) we get 180 == 2 * direction(G, midpoint(B, G)) - 2 * direction(I, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(E, A, D)), E, A, D we get 180 == 2 * direction(line_intersection(h, altitude(E, A, D)), E) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), I, B, G we get 180 == 2 * direction(midpoint(B, G), I) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(E, A, D)), E, D, I we get 180 == 2 * direction(line_intersection(h, altitude(E, A, D)), E) - 2 * direction(D, I) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(B, G), B, G we get 180 == 2 * direction(D, midpoint(B, G)) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(B, G), midpoint(B, G), B we get 180 == 2 * direction(A, midpoint(B, G)) - 2 * direction(midpoint(B, G), B) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(i, altitude(F, B, D)), D, B we get 180 == 2 * direction(F, line_intersection(i, altitude(F, B, D))) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(F, A, D)), F, D, I we get 180 == 2 * direction(line_intersection(h, altitude(F, A, D)), F) - 2 * direction(D, I) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(B, G), midpoint(B, G), B we get 180 == 2 * direction(D, midpoint(B, G)) - 2 * direction(midpoint(B, G), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), A, midpoint(B, G), B we get 180 == 2 * direction(midpoint(B, G), A) - 2 * direction(midpoint(B, G), B) mod 360
By perpendicular_direction_conditions_v0_r on D, I, line_intersection(h, altitude(E, A, D)), E we get 180 == 2 * direction(D, I) - 2 * direction(line_intersection(h, altitude(E, A, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(B, G), midpoint(B, G), D we get 180 == 2 * direction(B, midpoint(B, G)) - 2 * direction(midpoint(B, G), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, altitude(F, B, D)), F, D, B we get 180 == 2 * direction(line_intersection(i, altitude(F, B, D)), F) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(B, G), B, midpoint(B, G) we get 180 == 2 * direction(I, midpoint(B, G)) - 2 * direction(B, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, B, midpoint(B, G), D we get 180 == 2 * direction(G, B) - 2 * direction(midpoint(B, G), D) mod 360
By perpendicular_direction_conditions_v0_r on G, D, E, line_intersection(Line(D, G), altitude(E, D, G)) we get 180 == 2 * direction(G, D) - 2 * direction(E, line_intersection(Line(D, G), altitude(E, D, G))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(h, altitude(E, A, D)), D, A we get 180 == 2 * direction(E, line_intersection(h, altitude(E, A, D))) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), G, D, midpoint(B, G) we get 180 == 2 * direction(midpoint(B, G), G) - 2 * direction(D, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), D, G, B we get 180 == 2 * direction(midpoint(B, G), D) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), I, G, midpoint(B, G) we get 180 == 2 * direction(midpoint(B, G), I) - 2 * direction(G, midpoint(B, G)) mod 360
By in_imply_collinear on orthocenter(A, B, D), B, G we get collinear(B, G, orthocenter(A, B, D))
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(C, D), altitude(E, C, D)), D, C we get 180 == 2 * direction(E, line_intersection(Line(C, D), altitude(E, C, D))) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on B, G, midpoint(B, G), A we get 180 == 2 * direction(B, G) - 2 * direction(midpoint(B, G), A) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(h, altitude(E, A, D)), A, I we get 180 == 2 * direction(E, line_intersection(h, altitude(E, A, D))) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on D, G, E, line_intersection(Line(D, G), altitude(E, D, G)) we get 180 == 2 * direction(D, G) - 2 * direction(E, line_intersection(Line(D, G), altitude(E, D, G))) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(B, G), G, B we get 180 == 2 * direction(I, midpoint(B, G)) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(C, D), altitude(E, C, D)), C, D we get 180 == 2 * direction(E, line_intersection(Line(C, D), altitude(E, C, D))) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(D, G), altitude(E, D, G)), D, G we get 180 == 2 * direction(E, line_intersection(Line(D, G), altitude(E, D, G))) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on D, I, F, line_intersection(h, altitude(F, A, D)) we get 180 == 2 * direction(D, I) - 2 * direction(F, line_intersection(h, altitude(F, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on D, G, line_intersection(Line(D, G), altitude(E, D, G)), E we get 180 == 2 * direction(D, G) - 2 * direction(line_intersection(Line(D, G), altitude(E, D, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on B, G, midpoint(B, G), D we get 180 == 2 * direction(B, G) - 2 * direction(midpoint(B, G), D) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(h, altitude(E, A, D)), I, D we get 180 == 2 * direction(E, line_intersection(h, altitude(E, A, D))) - 2 * direction(I, D) mod 360
By perpendicular_direction_conditions_v0_r on A, I, line_intersection(h, altitude(E, A, D)), E we get 180 == 2 * direction(A, I) - 2 * direction(line_intersection(h, altitude(E, A, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on D, C, E, line_intersection(Line(C, D), altitude(E, C, D)) we get 180 == 2 * direction(D, C) - 2 * direction(E, line_intersection(Line(C, D), altitude(E, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(C, D), altitude(E, C, D)), E, D, C we get 180 == 2 * direction(line_intersection(Line(C, D), altitude(E, C, D)), E) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on D, A, F, line_intersection(h, altitude(F, A, D)) we get 180 == 2 * direction(D, A) - 2 * direction(F, line_intersection(h, altitude(F, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), G, midpoint(B, G), A we get 180 == 2 * direction(midpoint(B, G), G) - 2 * direction(midpoint(B, G), A) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(h, altitude(F, A, D)), A, D we get 180 == 2 * direction(F, line_intersection(h, altitude(F, A, D))) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(B, G), midpoint(B, G), B we get 180 == 2 * direction(I, midpoint(B, G)) - 2 * direction(midpoint(B, G), B) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(B, G), G, midpoint(B, G) we get 180 == 2 * direction(A, midpoint(B, G)) - 2 * direction(G, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), D, B, G we get 180 == 2 * direction(midpoint(B, G), D) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(h, altitude(E, A, D)), I, A we get 180 == 2 * direction(E, line_intersection(h, altitude(E, A, D))) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on G, B, midpoint(B, G), I we get 180 == 2 * direction(G, B) - 2 * direction(midpoint(B, G), I) mod 360
By perpendicular_direction_conditions_v0_r on I, A, E, line_intersection(h, altitude(E, A, D)) we get 180 == 2 * direction(I, A) - 2 * direction(E, line_intersection(h, altitude(E, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on I, A, F, line_intersection(h, altitude(F, A, D)) we get 180 == 2 * direction(I, A) - 2 * direction(F, line_intersection(h, altitude(F, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(B, G), midpoint(B, G), G we get 180 == 2 * direction(A, midpoint(B, G)) - 2 * direction(midpoint(B, G), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), I, midpoint(B, G), B we get 180 == 2 * direction(midpoint(B, G), I) - 2 * direction(midpoint(B, G), B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(D, G), altitude(E, D, G)), E, D, G we get 180 == 2 * direction(line_intersection(Line(D, G), altitude(E, D, G)), E) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), D, midpoint(B, G), G we get 180 == 2 * direction(midpoint(B, G), D) - 2 * direction(midpoint(B, G), G) mod 360
By perpendicular_direction_conditions_v0_r on A, I, line_intersection(h, altitude(F, A, D)), F we get 180 == 2 * direction(A, I) - 2 * direction(line_intersection(h, altitude(F, A, D)), F) mod 360
By perpendicular_direction_conditions_v0_r on I, A, line_intersection(h, altitude(F, A, D)), F we get 180 == 2 * direction(I, A) - 2 * direction(line_intersection(h, altitude(F, A, D)), F) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(B, G), G, B we get 180 == 2 * direction(A, midpoint(B, G)) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(h, altitude(F, A, D)), D, A we get 180 == 2 * direction(F, line_intersection(h, altitude(F, A, D))) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(B, G), B, midpoint(B, G) we get 180 == 2 * direction(A, midpoint(B, G)) - 2 * direction(B, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on I, D, F, line_intersection(h, altitude(F, A, D)) we get 180 == 2 * direction(I, D) - 2 * direction(F, line_intersection(h, altitude(F, A, D))) mod 360
By in_imply_concyclic on D, I, G, line_circle_tangent_point(i, Circle(D, G, I)) we get concyclic(D, G, I, line_circle_tangent_point(i, Circle(D, G, I)))
By in_imply_collinear on line_intersection(h, altitude(E, A, D)), midpoint(B, G), I we get collinear(I, midpoint(B, G), line_intersection(h, altitude(E, A, D)))
By in_imply_collinear on orthocenter(A, B, D), F, D we get collinear(D, F, orthocenter(A, B, D))
By in_imply_collinear on line_intersection(h, altitude(F, A, D)), midpoint(B, G), I we get collinear(I, midpoint(B, G), line_intersection(h, altitude(F, A, D)))
By in_imply_collinear on orthocenter(A, D, G), D, E we get collinear(D, E, orthocenter(A, D, G))
By in_imply_collinear on orthocenter(A, D, G), midpoint(B, G), G we get collinear(G, midpoint(B, G), orthocenter(A, D, G))
By in_imply_collinear on line_circle_tangent_point(Line(D, G), Circle(B, D, I)), D, G we get collinear(D, G, line_circle_tangent_point(Line(D, G), Circle(B, D, I)))
By in_imply_collinear on A, I, midpoint(B, G) we get collinear(A, I, midpoint(B, G))
By in_imply_collinear on line_intersection(h, altitude(E, A, D)), A, I we get collinear(A, I, line_intersection(h, altitude(E, A, D)))
By in_imply_collinear on line_circle_tangent_point(i, Circle(D, G, I)), D, B we get collinear(B, D, line_circle_tangent_point(i, Circle(D, G, I)))
By in_imply_collinear on line_intersection(h, altitude(E, A, D)), A, midpoint(B, G) we get collinear(A, midpoint(B, G), line_intersection(h, altitude(E, A, D)))
By tangent_point_is_unique on line_circle_tangent_point(Line(D, G), Circle(B, D, I)), D, Circle(B, D, I), Line(D, G) we get D == line_circle_tangent_point(Line(D, G), Circle(B, D, I))
By in_imply_collinear on line_intersection(h, altitude(E, A, D)), midpoint(B, G), D we get collinear(D, midpoint(B, G), line_intersection(h, altitude(E, A, D)))
By directions_draw_angle on E, G, midpoint(B, G) we get exists(angle(E, G, midpoint(B, G)))
By in_imply_collinear on orthocenter(A, D, G), B, G we get collinear(B, G, orthocenter(A, D, G))
By in_imply_collinear on orthocenter(A, B, D), G, midpoint(B, G) we get collinear(G, midpoint(B, G), orthocenter(A, B, D))
By line_inequality on altitude(A, B, D), Line(C, F), A we get Line(C, F) != altitude(A, B, D)
By in_imply_collinear on orthocenter(A, B, D), B, midpoint(B, G) we get collinear(B, midpoint(B, G), orthocenter(A, B, D))
By directions_draw_angle on midpoint(B, G), B, H we get exists(angle(midpoint(B, G), B, H))
By not_in_line_equivalent_to_not_collinear_v0 on F, midpoint(B, G), B we get not_collinear(B, F, midpoint(B, G)), exists(Line(B, midpoint(B, G)))
By line_circle_intersection_has_at_most_two_points_0 on D, A, I, Circle(A, D, E) we get I not in Circle(A, D, E)
By collinear_definition on A, D, I we get D in Line(A, I), I in Line(A, D), Line(A, D) == Line(A, I), 0 == 2 * angle(D, A, I) mod 360
By directions_draw_angle on H, A, I we get exists(angle(H, A, I))
By not_in_line_equivalent_to_not_collinear_v0 on H, midpoint(B, G), G we get not_collinear(G, H, midpoint(B, G)), exists(Line(G, midpoint(B, G)))
By not_in_line_equivalent_to_not_collinear_v0 on F, A, midpoint(B, G) we get not_collinear(A, F, midpoint(B, G)), exists(Line(A, midpoint(B, G)))
By internal_angle_bisector_definition_v0 on B, I, C, A we get angle(B, A, I) == angle(I, A, C) mod 360
By tangent_point_is_unique on line_circle_tangent_point(i, Circle(D, G, I)), D, Circle(D, G, I), i we get D == line_circle_tangent_point(i, Circle(D, G, I))
By line_containment_inequality on orthocenter(A, B, D), E, Line(D, F) we get E != orthocenter(A, B, D)
By not_in_line_equivalent_to_not_collinear_v0 on F, midpoint(B, G), G we get not_collinear(F, G, midpoint(B, G)), exists(Line(G, midpoint(B, G)))
By not_in_line_equivalent_to_not_collinear_v0 on C, B, midpoint(B, G) we get not_collinear(B, C, midpoint(B, G)), exists(Line(B, midpoint(B, G)))
By not_in_line_equivalent_to_not_collinear_v0 on C, midpoint(B, G), A we get not_collinear(A, C, midpoint(B, G)), exists(Line(A, midpoint(B, G)))
By reverse_direction on midpoint(B, G), G we get 180 == direction(midpoint(B, G), G) - direction(G, midpoint(B, G)) mod 360
By in_imply_concyclic on I, B, D, line_circle_tangent_point(Line(D, G), Circle(B, D, I)) we get concyclic(B, D, I, line_circle_tangent_point(Line(D, G), Circle(B, D, I)))
By directions_draw_angle on midpoint(B, G), B, F we get exists(angle(midpoint(B, G), B, F))
By not_in_line_equivalent_to_not_collinear_v0 on D, B, midpoint(B, G) we get not_collinear(B, D, midpoint(B, G)), exists(Line(B, midpoint(B, G)))
By double_perpendicular_and_parallel_v0 on altitude(A, B, D), i, altitude(F, B, D) we get parallel(altitude(A, B, D), altitude(F, B, D))
By directions_draw_angle on I, A, C we get exists(angle(I, A, C))
By not_in_line_equivalent_to_not_collinear_v0 on H, B, midpoint(B, G) we get not_collinear(B, H, midpoint(B, G)), exists(Line(B, midpoint(B, G)))
By not_in_line_equivalent_to_not_collinear_v0 on D, midpoint(B, G), G we get not_collinear(D, G, midpoint(B, G)), exists(Line(G, midpoint(B, G)))
By not_in_line_equivalent_to_not_collinear_v0 on E, A, midpoint(B, G) we get not_collinear(A, E, midpoint(B, G)), exists(Line(A, midpoint(B, G)))
By directions_draw_angle on midpoint(B, G), B, D we get exists(angle(midpoint(B, G), B, D))
By internal_angle_bisector_definition_v0 on C, I, B, A we get angle(C, A, I) == angle(I, A, B) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on A, G, midpoint(B, G) we get not_collinear(A, G, midpoint(B, G)), exists(Line(G, midpoint(B, G)))
By not_in_line_equivalent_to_not_collinear_v0 on H, midpoint(B, G), A we get not_collinear(A, H, midpoint(B, G)), exists(Line(A, midpoint(B, G)))
By line_containment_inequality on orthocenter(A, B, D), I, Line(B, G) we get I != orthocenter(A, B, D)
By reverse_direction on G, midpoint(B, G) we get 180 == direction(G, midpoint(B, G)) - direction(midpoint(B, G), G) mod 360
By line_circle_intersection_has_at_most_two_points_0 on D, I, A, Circle(D, G, I) we get A not in Circle(D, G, I)
By directions_draw_angle on midpoint(B, G), G, C we get exists(angle(midpoint(B, G), G, C))
By not_in_line_equivalent_to_not_collinear_v0 on I, midpoint(B, G), B we get not_collinear(B, I, midpoint(B, G)), exists(Line(B, midpoint(B, G)))
By directions_draw_angle on F, A, I we get exists(angle(F, A, I))
By line_containment_inequality on line_circle_tangent_point(Line(D, G), Circle(B, D, I)), A, Line(D, G) we get A != line_circle_tangent_point(Line(D, G), Circle(B, D, I))
By not_in_line_equivalent_to_not_collinear_v0 on H, D, midpoint(B, G) we get not_collinear(D, H, midpoint(B, G)), exists(Line(D, midpoint(B, G)))
By double_perpendicular_and_parallel_v0 on altitude(A, D, G), Line(D, G), altitude(E, D, G) we get parallel(altitude(A, D, G), altitude(E, D, G))
By not_in_line_equivalent_to_not_collinear_v0 on E, G, midpoint(B, G) we get not_collinear(E, G, midpoint(B, G)), exists(Line(G, midpoint(B, G)))
By line_containment_inequality on line_circle_tangent_point(i, Circle(D, G, I)), F, i we get F != line_circle_tangent_point(i, Circle(D, G, I))
By reverse_direction on B, midpoint(B, G) we get 180 == direction(B, midpoint(B, G)) - direction(midpoint(B, G), B) mod 360
By directions_draw_angle on A, G, midpoint(B, G) we get exists(angle(A, G, midpoint(B, G)))
By line_inequality on altitude(A, D, G), Line(C, I), A we get Line(C, I) != altitude(A, D, G)
By collinear_definition on I, A, D we get A in Line(D, I), D in Line(A, I), Line(A, I) == Line(D, I), 0 == 2 * angle(A, I, D) mod 360
By line_containment_inequality on orthocenter(A, D, G), I, Line(B, G) we get I != orthocenter(A, D, G)
By reverse_direction on I, A we get 180 == direction(I, A) - direction(A, I) mod 360
By reverse_direction on A, I we get 180 == direction(A, I) - direction(I, A) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on E, midpoint(B, G), I we get not_collinear(E, I, midpoint(B, G)), exists(Line(I, midpoint(B, G)))
By line_containment_inequality on orthocenter(A, D, G), G, Line(D, E) we get G != orthocenter(A, D, G)
By reverse_direction on midpoint(B, G), B we get 180 == direction(midpoint(B, G), B) - direction(B, midpoint(B, G)) mod 360
By directions_draw_angle on C, I, A we get exists(angle(C, I, A))
By line_inequality on altitude(A, B, D), Line(E, H), A we get Line(E, H) != altitude(A, B, D)
By line_inequality on altitude(A, B, D), Line(D, G), A we get Line(D, G) != altitude(A, B, D)
By directions_draw_angle on C, A, I we get exists(angle(C, A, I))
By not_in_line_equivalent_to_not_collinear_v0 on E, midpoint(B, G), B we get not_collinear(B, E, midpoint(B, G)), exists(Line(B, midpoint(B, G)))
By directions_draw_angle on midpoint(B, G), B, A we get exists(angle(midpoint(B, G), B, A))
By collinear_definition on A, I, D we get I in Line(A, D), D in Line(A, I), Line(A, D) == Line(A, I), 0 == 2 * angle(I, A, D) mod 360
By line_containment_inequality on orthocenter(A, B, D), D, Line(B, G) we get D != orthocenter(A, B, D)
By line_containment_inequality on orthocenter(A, B, D), F, Line(B, G) we get F != orthocenter(A, B, D)
By directions_draw_angle on I, A, H we get exists(angle(I, A, H))
By collinear_definition on I, D, A we get D in Line(A, I), A in Line(D, I), Line(A, I) == Line(D, I), 0 == 2 * angle(D, I, A) mod 360
By directions_draw_angle on I, G, midpoint(B, G) we get exists(angle(I, G, midpoint(B, G)))
By not_in_line_equivalent_to_not_collinear_v0 on C, G, midpoint(B, G) we get not_collinear(C, G, midpoint(B, G)), exists(Line(G, midpoint(B, G)))
By directions_draw_angle on I, B, midpoint(B, G) we get exists(angle(I, B, midpoint(B, G)))
By not_in_line_equivalent_to_not_collinear_v0 on E, midpoint(B, G), D we get not_collinear(D, E, midpoint(B, G)), exists(Line(D, midpoint(B, G)))
By directions_draw_angle on midpoint(B, G), G, I we get exists(angle(midpoint(B, G), G, I))
By line_containment_inequality on line_circle_tangent_point(i, Circle(D, G, I)), I, i we get I != line_circle_tangent_point(i, Circle(D, G, I))
By line_containment_inequality on orthocenter(A, B, D), B, Line(D, F) we get B != orthocenter(A, B, D)
By directions_draw_angle on E, A, I we get exists(angle(E, A, I))
By line_containment_inequality on orthocenter(A, B, D), C, Line(D, F) we get C != orthocenter(A, B, D)
By not_in_line_equivalent_to_not_collinear_v0 on F, I, midpoint(B, G) we get not_collinear(F, I, midpoint(B, G)), exists(Line(I, midpoint(B, G)))
By not_in_line_equivalent_to_not_collinear_v0 on C, I, midpoint(B, G) we get not_collinear(C, I, midpoint(B, G)), exists(Line(I, midpoint(B, G)))
By not_in_line_equivalent_to_not_collinear_v0 on F, midpoint(B, G), D we get not_collinear(D, F, midpoint(B, G)), exists(Line(D, midpoint(B, G)))
By directions_draw_angle on D, B, midpoint(B, G) we get exists(angle(D, B, midpoint(B, G)))
By directions_draw_angle on C, G, midpoint(B, G) we get exists(angle(C, G, midpoint(B, G)))
By not_in_line_equivalent_to_not_collinear_v0 on I, midpoint(B, G), G we get not_collinear(G, I, midpoint(B, G)), exists(Line(G, midpoint(B, G)))
By directions_draw_angle on I, A, E we get exists(angle(I, A, E))
By line_containment_inequality on orthocenter(A, D, G), H, Line(D, E) we get H != orthocenter(A, D, G)
By directions_draw_angle on midpoint(B, G), G, D we get exists(angle(midpoint(B, G), G, D))
By directions_draw_angle on D, A, I we get exists(angle(D, A, I))
By directions_draw_angle on A, I, D we get exists(angle(A, I, D))
By line_containment_inequality on orthocenter(A, D, G), B, Line(D, E) we get B != orthocenter(A, D, G)
By line_inequality on altitude(A, D, G), Line(D, E), A we get Line(D, E) != altitude(A, D, G)
By directions_draw_angle on I, A, F we get exists(angle(I, A, F))
By not_in_line_equivalent_to_not_collinear_v0 on C, midpoint(B, G), D we get not_collinear(C, D, midpoint(B, G)), exists(Line(D, midpoint(B, G)))
By not_in_line_equivalent_to_not_collinear_v0 on B, A, midpoint(B, G) we get not_collinear(A, B, midpoint(B, G)), exists(Line(A, midpoint(B, G)))
By line_inequality on altitude(A, B, D), Line(G, I), A we get Line(G, I) != altitude(A, B, D)
By directions_draw_angle on midpoint(B, G), G, A we get exists(angle(midpoint(B, G), G, A))
By directions_draw_angle on D, I, A we get exists(angle(D, I, A))
By directions_draw_angle on I, A, D we get exists(angle(I, A, D))
By directions_draw_angle on D, G, midpoint(B, G) we get exists(angle(D, G, midpoint(B, G)))
By line_containment_inequality on line_circle_tangent_point(Line(D, G), Circle(B, D, I)), F, Line(D, G) we get F != line_circle_tangent_point(Line(D, G), Circle(B, D, I))
By line_containment_inequality on orthocenter(A, D, G), C, Line(B, G) we get C != orthocenter(A, D, G)
By line_inequality on altitude(A, D, G), Line(D, G), A we get Line(D, G) != altitude(A, D, G)
By directions_draw_angle on midpoint(B, G), G, E we get exists(angle(midpoint(B, G), G, E))
By directions_draw_angle on midpoint(B, G), B, I we get exists(angle(midpoint(B, G), B, I))
By directions_draw_angle on C, B, midpoint(B, G) we get exists(angle(C, B, midpoint(B, G)))
By line_containment_inequality on orthocenter(A, D, G), D, Line(B, G) we get D != orthocenter(A, D, G)
By line_containment_inequality on orthocenter(A, D, G), A, Line(D, E) we get A != orthocenter(A, D, G)
By line_containment_inequality on orthocenter(A, B, D), G, Line(D, F) we get G != orthocenter(A, B, D)
By line_inequality on altitude(A, B, D), Line(C, D), A we get Line(C, D) != altitude(A, B, D)
By line_inequality on altitude(A, B, D), Line(B, C), A we get Line(B, C) != altitude(A, B, D)
By line_containment_inequality on line_circle_tangent_point(Line(D, G), Circle(B, D, I)), E, Line(D, G) we get E != line_circle_tangent_point(Line(D, G), Circle(B, D, I))
By line_containment_inequality on orthocenter(A, D, G), F, Line(B, G) we get F != orthocenter(A, D, G)
By line_circle_intersection_has_at_most_two_points_0 on A, I, D, Circle(A, B, C) we get D not in Circle(A, B, C)
By directions_draw_angle on H, B, midpoint(B, G) we get exists(angle(H, B, midpoint(B, G)))
By directions_draw_angle on A, I, C we get exists(angle(A, I, C))
By directions_draw_angle on A, B, midpoint(B, G) we get exists(angle(A, B, midpoint(B, G)))
By line_inequality on altitude(A, D, G), Line(E, F), A we get Line(E, F) != altitude(A, D, G)
By directions_draw_angle on F, B, midpoint(B, G) we get exists(angle(F, B, midpoint(B, G)))
By not_in_line_equivalent_to_not_collinear_v0 on H, I, midpoint(B, G) we get not_collinear(H, I, midpoint(B, G)), exists(Line(I, midpoint(B, G)))
By line_containment_inequality on orthocenter(A, B, D), A, Line(B, G) we get A != orthocenter(A, B, D)
By directions_draw_angle on midpoint(B, G), B, C we get exists(angle(midpoint(B, G), B, C))
By line_inequality on altitude(A, B, D), Line(B, G), A we get Line(B, G) != altitude(A, B, D)
By line_circle_intersection_has_at_most_two_points_0 on I, D, A, Circle(B, D, I) we get A not in Circle(B, D, I)
By line_inequality on altitude(A, B, D), Line(D, F), A we get Line(D, F) != altitude(A, B, D)
By line_circle_intersection_has_at_most_two_points_0 on D, I, midpoint(B, G), Circle(D, G, I) we get midpoint(B, G) not in Circle(D, G, I)
By line_inequality on altitude(A, B, D), Line(C, I), A we get Line(C, I) != altitude(A, B, D)
By line_inequality on altitude(A, D, G), Line(B, G), A we get Line(B, G) != altitude(A, D, G)
By line_containment_inequality on orthocenter(A, B, D), H, Line(D, F) we get H != orthocenter(A, B, D)
By line_inequality on altitude(A, D, G), Line(C, H), A we get Line(C, H) != altitude(A, D, G)
By line_containment_inequality on line_circle_tangent_point(Line(D, G), Circle(B, D, I)), H, Line(D, G) we get H != line_circle_tangent_point(Line(D, G), Circle(B, D, I))
By line_inequality on altitude(A, B, D), Line(D, E), A we get Line(D, E) != altitude(A, B, D)
By line_circle_intersection_has_at_most_two_points_0 on D, A, midpoint(B, G), Circle(A, D, E) we get midpoint(B, G) not in Circle(A, D, E)
By line_circle_intersection_has_at_most_two_points_0 on I, D, midpoint(B, G), Circle(B, D, I) we get midpoint(B, G) not in Circle(B, D, I)
By line_inequality on altitude(A, D, G), Line(G, I), A we get Line(G, I) != altitude(A, D, G)
By line_inequality on altitude(A, B, D), Line(C, H), A we get Line(C, H) != altitude(A, B, D)
By line_containment_inequality on line_circle_tangent_point(i, Circle(D, G, I)), E, i we get E != line_circle_tangent_point(i, Circle(D, G, I))
By line_inequality on altitude(A, D, G), i, A we get i != altitude(A, D, G)
By line_containment_inequality on line_circle_tangent_point(i, Circle(D, G, I)), C, i we get C != line_circle_tangent_point(i, Circle(D, G, I))
By line_containment_inequality on line_circle_tangent_point(i, Circle(D, G, I)), A, i we get A != line_circle_tangent_point(i, Circle(D, G, I))
By line_inequality on altitude(A, D, G), Line(D, F), A we get Line(D, F) != altitude(A, D, G)
By line_inequality on altitude(A, D, G), Line(B, C), A we get Line(B, C) != altitude(A, D, G)
By line_containment_inequality on orthocenter(A, D, G), E, Line(B, G) we get E != orthocenter(A, D, G)
By line_containment_inequality on line_circle_tangent_point(Line(D, G), Circle(B, D, I)), I, Line(D, G) we get I != line_circle_tangent_point(Line(D, G), Circle(B, D, I))
By line_inequality on altitude(A, D, G), Line(C, D), A we get Line(C, D) != altitude(A, D, G)
By line_containment_inequality on line_circle_tangent_point(Line(D, G), Circle(B, D, I)), C, Line(D, G) we get C != line_circle_tangent_point(Line(D, G), Circle(B, D, I))
By line_inequality on altitude(A, B, D), Line(B, I), A we get Line(B, I) != altitude(A, B, D)
By line_inequality on altitude(A, B, D), Line(D, H), A we get Line(D, H) != altitude(A, B, D)
By line_containment_inequality on line_circle_tangent_point(Line(D, G), Circle(B, D, I)), B, Line(D, G) we get B != line_circle_tangent_point(Line(D, G), Circle(B, D, I))
By line_inequality on altitude(A, D, G), Line(C, F), A we get Line(C, F) != altitude(A, D, G)
By line_inequality on altitude(A, B, D), Line(E, F), A we get Line(E, F) != altitude(A, B, D)
By line_containment_inequality on line_circle_tangent_point(i, Circle(D, G, I)), H, i we get H != line_circle_tangent_point(i, Circle(D, G, I))
By line_containment_inequality on line_circle_tangent_point(i, Circle(D, G, I)), G, i we get G != line_circle_tangent_point(i, Circle(D, G, I))
By line_inequality on altitude(A, D, G), Line(B, I), A we get Line(B, I) != altitude(A, D, G)
By line_inequality on altitude(A, B, D), i, A we get i != altitude(A, B, D)
By line_inequality on altitude(A, D, G), Line(D, H), A we get Line(D, H) != altitude(A, D, G)
By line_inequality on altitude(A, D, G), Line(E, H), A we get Line(E, H) != altitude(A, D, G)
By perpendicular_direction_conditions_v0_r on E, line_intersection(h, altitude(E, A, D)), midpoint(B, G), A we get 180 == 2 * direction(E, line_intersection(h, altitude(E, A, D))) - 2 * direction(midpoint(B, G), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(D, H), altitude(F, D, H)), F, D, H we get 180 == 2 * direction(line_intersection(Line(D, H), altitude(F, D, H)), F) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(h, altitude(E, A, D)), A, midpoint(B, G) we get 180 == 2 * direction(E, line_intersection(h, altitude(E, A, D))) - 2 * direction(A, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), I, E, line_intersection(h, altitude(E, A, D)) we get 180 == 2 * direction(midpoint(B, G), I) - 2 * direction(E, line_intersection(h, altitude(E, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), I, F, line_intersection(h, altitude(F, A, D)) we get 180 == 2 * direction(midpoint(B, G), I) - 2 * direction(F, line_intersection(h, altitude(F, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on D, H, F, line_intersection(Line(D, H), altitude(F, D, H)) we get 180 == 2 * direction(D, H) - 2 * direction(F, line_intersection(Line(D, H), altitude(F, D, H))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), A, line_intersection(h, altitude(F, A, D)), F we get 180 == 2 * direction(midpoint(B, G), A) - 2 * direction(line_intersection(h, altitude(F, A, D)), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), A, F, line_intersection(h, altitude(F, A, D)) we get 180 == 2 * direction(midpoint(B, G), A) - 2 * direction(F, line_intersection(h, altitude(F, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(D, H), altitude(F, D, H)), F, H, D we get 180 == 2 * direction(line_intersection(Line(D, H), altitude(F, D, H)), F) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(B, G), E, line_intersection(h, altitude(E, A, D)) we get 180 == 2 * direction(D, midpoint(B, G)) - 2 * direction(E, line_intersection(h, altitude(E, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(B, G), line_intersection(h, altitude(E, A, D)), E we get 180 == 2 * direction(A, midpoint(B, G)) - 2 * direction(line_intersection(h, altitude(E, A, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on H, D, F, line_intersection(Line(D, H), altitude(F, D, H)) we get 180 == 2 * direction(H, D) - 2 * direction(F, line_intersection(Line(D, H), altitude(F, D, H))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), A, E, line_intersection(h, altitude(E, A, D)) we get 180 == 2 * direction(midpoint(B, G), A) - 2 * direction(E, line_intersection(h, altitude(E, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(F, A, D)), F, midpoint(B, G), D we get 180 == 2 * direction(line_intersection(h, altitude(F, A, D)), F) - 2 * direction(midpoint(B, G), D) mod 360
By perpendicular_direction_conditions_v0_r on D, H, line_intersection(Line(D, H), altitude(F, D, H)), F we get 180 == 2 * direction(D, H) - 2 * direction(line_intersection(Line(D, H), altitude(F, D, H)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(F, A, D)), F, midpoint(B, G), A we get 180 == 2 * direction(line_intersection(h, altitude(F, A, D)), F) - 2 * direction(midpoint(B, G), A) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(D, H), altitude(F, D, H)), H, D we get 180 == 2 * direction(F, line_intersection(Line(D, H), altitude(F, D, H))) - 2 * direction(H, D) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(h, altitude(E, A, D)), midpoint(B, G), D we get 180 == 2 * direction(E, line_intersection(h, altitude(E, A, D))) - 2 * direction(midpoint(B, G), D) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(h, altitude(F, A, D)), I, midpoint(B, G) we get 180 == 2 * direction(F, line_intersection(h, altitude(F, A, D))) - 2 * direction(I, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(F, A, D)), F, A, midpoint(B, G) we get 180 == 2 * direction(line_intersection(h, altitude(F, A, D)), F) - 2 * direction(A, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(F, A, D)), F, I, midpoint(B, G) we get 180 == 2 * direction(line_intersection(h, altitude(F, A, D)), F) - 2 * direction(I, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(F, A, D)), F, D, midpoint(B, G) we get 180 == 2 * direction(line_intersection(h, altitude(F, A, D)), F) - 2 * direction(D, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(B, G), line_intersection(h, altitude(E, A, D)), E we get 180 == 2 * direction(I, midpoint(B, G)) - 2 * direction(line_intersection(h, altitude(E, A, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(E, A, D)), E, I, midpoint(B, G) we get 180 == 2 * direction(line_intersection(h, altitude(E, A, D)), E) - 2 * direction(I, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(h, altitude(E, A, D)), midpoint(B, G), I we get 180 == 2 * direction(E, line_intersection(h, altitude(E, A, D))) - 2 * direction(midpoint(B, G), I) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(B, G), line_intersection(h, altitude(F, A, D)), F we get 180 == 2 * direction(I, midpoint(B, G)) - 2 * direction(line_intersection(h, altitude(F, A, D)), F) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(B, G), line_intersection(h, altitude(E, A, D)), E we get 180 == 2 * direction(D, midpoint(B, G)) - 2 * direction(line_intersection(h, altitude(E, A, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(h, altitude(E, A, D)), I, midpoint(B, G) we get 180 == 2 * direction(E, line_intersection(h, altitude(E, A, D))) - 2 * direction(I, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(B, G), F, line_intersection(h, altitude(F, A, D)) we get 180 == 2 * direction(D, midpoint(B, G)) - 2 * direction(F, line_intersection(h, altitude(F, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(h, altitude(F, A, D)), midpoint(B, G), A we get 180 == 2 * direction(F, line_intersection(h, altitude(F, A, D))) - 2 * direction(midpoint(B, G), A) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(B, G), F, line_intersection(h, altitude(F, A, D)) we get 180 == 2 * direction(A, midpoint(B, G)) - 2 * direction(F, line_intersection(h, altitude(F, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), D, F, line_intersection(h, altitude(F, A, D)) we get 180 == 2 * direction(midpoint(B, G), D) - 2 * direction(F, line_intersection(h, altitude(F, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(E, A, D)), E, A, midpoint(B, G) we get 180 == 2 * direction(line_intersection(h, altitude(E, A, D)), E) - 2 * direction(A, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(B, G), line_intersection(h, altitude(F, A, D)), F we get 180 == 2 * direction(A, midpoint(B, G)) - 2 * direction(line_intersection(h, altitude(F, A, D)), F) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(h, altitude(F, A, D)), D, midpoint(B, G) we get 180 == 2 * direction(F, line_intersection(h, altitude(F, A, D))) - 2 * direction(D, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(h, altitude(F, A, D)), midpoint(B, G), I we get 180 == 2 * direction(F, line_intersection(h, altitude(F, A, D))) - 2 * direction(midpoint(B, G), I) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), I, line_intersection(h, altitude(F, A, D)), F we get 180 == 2 * direction(midpoint(B, G), I) - 2 * direction(line_intersection(h, altitude(F, A, D)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(E, A, D)), E, midpoint(B, G), D we get 180 == 2 * direction(line_intersection(h, altitude(E, A, D)), E) - 2 * direction(midpoint(B, G), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), D, E, line_intersection(h, altitude(E, A, D)) we get 180 == 2 * direction(midpoint(B, G), D) - 2 * direction(E, line_intersection(h, altitude(E, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(h, altitude(F, A, D)), A, midpoint(B, G) we get 180 == 2 * direction(F, line_intersection(h, altitude(F, A, D))) - 2 * direction(A, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), D, line_intersection(h, altitude(E, A, D)), E we get 180 == 2 * direction(midpoint(B, G), D) - 2 * direction(line_intersection(h, altitude(E, A, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(E, A, D)), E, midpoint(B, G), A we get 180 == 2 * direction(line_intersection(h, altitude(E, A, D)), E) - 2 * direction(midpoint(B, G), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), I, line_intersection(h, altitude(E, A, D)), E we get 180 == 2 * direction(midpoint(B, G), I) - 2 * direction(line_intersection(h, altitude(E, A, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(E, A, D)), E, D, midpoint(B, G) we get 180 == 2 * direction(line_intersection(h, altitude(E, A, D)), E) - 2 * direction(D, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(B, G), line_intersection(h, altitude(F, A, D)), F we get 180 == 2 * direction(D, midpoint(B, G)) - 2 * direction(line_intersection(h, altitude(F, A, D)), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), D, line_intersection(h, altitude(F, A, D)), F we get 180 == 2 * direction(midpoint(B, G), D) - 2 * direction(line_intersection(h, altitude(F, A, D)), F) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(B, G), E, line_intersection(h, altitude(E, A, D)) we get 180 == 2 * direction(I, midpoint(B, G)) - 2 * direction(E, line_intersection(h, altitude(E, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(F, A, D)), F, midpoint(B, G), I we get 180 == 2 * direction(line_intersection(h, altitude(F, A, D)), F) - 2 * direction(midpoint(B, G), I) mod 360
By perpendicular_direction_conditions_v0_r on H, D, line_intersection(Line(D, H), altitude(F, D, H)), F we get 180 == 2 * direction(H, D) - 2 * direction(line_intersection(Line(D, H), altitude(F, D, H)), F) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(h, altitude(F, A, D)), midpoint(B, G), D we get 180 == 2 * direction(F, line_intersection(h, altitude(F, A, D))) - 2 * direction(midpoint(B, G), D) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(h, altitude(E, A, D)), D, midpoint(B, G) we get 180 == 2 * direction(E, line_intersection(h, altitude(E, A, D))) - 2 * direction(D, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(E, A, D)), E, midpoint(B, G), I we get 180 == 2 * direction(line_intersection(h, altitude(E, A, D)), E) - 2 * direction(midpoint(B, G), I) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(D, H), altitude(F, D, H)), D, H we get 180 == 2 * direction(F, line_intersection(Line(D, H), altitude(F, D, H))) - 2 * direction(D, H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), A, line_intersection(h, altitude(E, A, D)), E we get 180 == 2 * direction(midpoint(B, G), A) - 2 * direction(line_intersection(h, altitude(E, A, D)), E) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(B, G), E, line_intersection(h, altitude(E, A, D)) we get 180 == 2 * direction(A, midpoint(B, G)) - 2 * direction(E, line_intersection(h, altitude(E, A, D))) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(B, G), F, line_intersection(h, altitude(F, A, D)) we get 180 == 2 * direction(I, midpoint(B, G)) - 2 * direction(F, line_intersection(h, altitude(F, A, D))) mod 360
By internal_angle_bisector_definition_v0_r on B, G, B, midpoint(B, G) we get Line(G, midpoint(B, G)) == internal_angle_bisector(B, midpoint(B, G), B)
By internal_angle_bisector_definition_v0 on B, A, G, midpoint(B, G) we get angle(A, midpoint(B, G), G) == angle(B, midpoint(B, G), A) mod 360
By collinear_definition on D, A, midpoint(B, G) we get A in Line(D, midpoint(B, G)), midpoint(B, G) in Line(A, D), Line(A, D) == Line(D, midpoint(B, G)), 0 == 2 * angle(A, D, midpoint(B, G)) mod 360
By perpendicular_angle_conditions_v0 on G, midpoint(B, G), D we get angle(G, midpoint(B, G), D) == orientation(D, G, midpoint(B, G)) mod 360
By internal_angle_bisector_definition_v0 on G, midpoint(B, G), B, I we get angle(G, I, midpoint(B, G)) == angle(midpoint(B, G), I, B) mod 360
By perpendicular_angle_conditions_v0 on G, midpoint(B, G), I we get angle(G, midpoint(B, G), I) == orientation(G, midpoint(B, G), I) mod 360
By isosceles_triangle_altitude_v1 on line_intersection(h, altitude(F, A, D)), G, B we get identical(perpendicular_bisector(B, G), internal_angle_bisector(B, line_intersection(h, altitude(F, A, D)), G), perpendicular_line(line_intersection(h, altitude(F, A, D)), Line(B, G)))
By internal_angle_bisector_definition_v0 on G, D, B, midpoint(B, G) we get angle(D, midpoint(B, G), B) == angle(G, midpoint(B, G), D) mod 360
By anti_similar_triangle_basic_properties on G, I, A, B, I, A we get not_collinear(A, G, I), not_collinear(A, B, I), angle(G, I, A) == 0 - angle(B, I, A) mod 360, angle(I, A, G) == 0 - angle(I, A, B) mod 360, angle(A, G, I) == 0 - angle(A, B, I) mod 360, log(distance(B, I)) + log(distance(A, I)) == log(distance(G, I)) + log(distance(A, I)), log(distance(A, I)) + log(distance(A, B)) == log(distance(A, I)) + log(distance(A, G)), log(distance(A, B)) + log(distance(G, I)) == log(distance(A, G)) + log(distance(B, I))
By internal_angle_bisector_definition_v0_r on G, B, G, midpoint(B, G) we get Line(B, midpoint(B, G)) == internal_angle_bisector(G, midpoint(B, G), G)
By perpendicular_angle_conditions_v0 on B, midpoint(B, G), D we get angle(B, midpoint(B, G), D) == orientation(B, midpoint(B, G), D) mod 360
By perpendicular_lines_draw_intersection on i, altitude(A, B, D) we get exists(line_intersection(i, altitude(A, B, D)))
By internal_angle_bisector_definition_v0_r on midpoint(B, G), G, midpoint(B, G), B we get Line(B, G) == internal_angle_bisector(midpoint(B, G), B, midpoint(B, G))
By collinear_definition on I, midpoint(B, G), D we get midpoint(B, G) in Line(D, I), D in Line(I, midpoint(B, G)), Line(D, I) == Line(I, midpoint(B, G)), 0 == 2 * angle(midpoint(B, G), I, D) mod 360
By collinear_definition on I, D, midpoint(B, G) we get D in Line(I, midpoint(B, G)), midpoint(B, G) in Line(D, I), Line(D, I) == Line(I, midpoint(B, G)), 0 == 2 * angle(D, I, midpoint(B, G)) mod 360
By internal_angle_bisector_definition_v0 on B, midpoint(B, G), G, I we get angle(B, I, midpoint(B, G)) == angle(midpoint(B, G), I, G) mod 360
By perpendicular_angle_conditions_v0 on A, midpoint(B, G), G we get angle(A, midpoint(B, G), G) == orientation(A, midpoint(B, G), G) mod 360
By power_of_a_point_in_circle on line_circle_tangent_point(Line(D, G), Circle(B, D, I)), Circle(B, D, I) we get 0 == power_of_a_point(line_circle_tangent_point(Line(D, G), Circle(B, D, I)), Circle(B, D, I))
By isosceles_triangle_altitude_v3 on line_intersection(h, altitude(F, A, D)), G, B we get identical(perpendicular_bisector(B, G), internal_angle_bisector(B, line_intersection(h, altitude(F, A, D)), G), perpendicular_line(line_intersection(h, altitude(F, A, D)), Line(B, G)))
By internal_angle_bisector_definition_v0 on C, midpoint(B, G), B, A we get angle(C, A, midpoint(B, G)) == angle(midpoint(B, G), A, B) mod 360
By perpendicular_lines_draw_intersection on altitude(A, D, G), Line(D, G) we get exists(line_intersection(Line(D, G), altitude(A, D, G)))
By internal_angle_bisector_definition_v0 on G, I, B, midpoint(B, G) we get angle(G, midpoint(B, G), I) == angle(I, midpoint(B, G), B) mod 360
By internal_angle_bisector_definition_v0_r on B, midpoint(B, G), B, G we get Line(G, midpoint(B, G)) == internal_angle_bisector(B, G, B)
By isosceles_triangle_altitude_v1 on line_intersection(h, altitude(E, A, D)), G, B we get identical(perpendicular_bisector(B, G), internal_angle_bisector(B, line_intersection(h, altitude(E, A, D)), G), perpendicular_line(line_intersection(h, altitude(E, A, D)), Line(B, G)))
By power_of_a_point_on_circle on line_circle_tangent_point(i, Circle(D, G, I)), Circle(D, G, I) we get 0 == power_of_a_point(line_circle_tangent_point(i, Circle(D, G, I)), Circle(D, G, I))
By perpendicular_angle_conditions_v0 on B, midpoint(B, G), A we get angle(B, midpoint(B, G), A) == orientation(A, B, midpoint(B, G)) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(B, G), B, midpoint(B, G), G we get Line(B, G) == internal_angle_bisector(midpoint(B, G), G, midpoint(B, G))
By internal_angle_bisector_definition_v0 on G, midpoint(B, G), B, D we get angle(G, D, midpoint(B, G)) == angle(midpoint(B, G), D, B) mod 360
By perpendicular_angle_conditions_v0 on B, midpoint(B, G), I we get angle(B, midpoint(B, G), I) == orientation(B, midpoint(B, G), I) mod 360
By perpendicular_angle_conditions_v0 on D, midpoint(B, G), G we get angle(D, midpoint(B, G), G) == orientation(D, midpoint(B, G), G) mod 360
By perpendicular_angle_conditions_v0 on I, midpoint(B, G), G we get angle(I, midpoint(B, G), G) == orientation(G, I, midpoint(B, G)) mod 360
By internal_angle_bisector_definition_v0_r on G, midpoint(B, G), G, B we get Line(B, midpoint(B, G)) == internal_angle_bisector(G, B, G)
By internal_angle_bisector_definition_v0 on B, midpoint(B, G), G, A we get angle(B, A, midpoint(B, G)) == angle(midpoint(B, G), A, G) mod 360
By perpendicular_angle_conditions_v0 on D, midpoint(B, G), B we get angle(D, midpoint(B, G), B) == orientation(B, D, midpoint(B, G)) mod 360
By internal_angle_bisector_definition_v0 on B, I, G, midpoint(B, G) we get angle(B, midpoint(B, G), I) == angle(I, midpoint(B, G), G) mod 360
By internal_angle_bisector_definition_v0 on I, midpoint(B, G), I, D we get angle(I, D, midpoint(B, G)) == angle(midpoint(B, G), D, I) mod 360
By internal_angle_bisector_definition_v0 on B, midpoint(B, G), G, D we get angle(B, D, midpoint(B, G)) == angle(midpoint(B, G), D, G) mod 360
By internal_angle_bisector_definition_v0 on B, D, G, midpoint(B, G) we get angle(B, midpoint(B, G), D) == angle(D, midpoint(B, G), G) mod 360
By perpendicular_angle_conditions_v0 on A, midpoint(B, G), B we get angle(A, midpoint(B, G), B) == orientation(A, midpoint(B, G), B) mod 360
By internal_angle_bisector_definition_v0 on A, midpoint(B, G), A, D we get angle(A, D, midpoint(B, G)) == angle(midpoint(B, G), D, A) mod 360
By perpendicular_angle_conditions_v0 on G, midpoint(B, G), A we get angle(G, midpoint(B, G), A) == orientation(A, G, midpoint(B, G)) mod 360
By collinear_definition on D, I, midpoint(B, G) we get I in Line(D, midpoint(B, G)), midpoint(B, G) in Line(D, I), Line(D, I) == Line(D, midpoint(B, G)), 0 == 2 * angle(I, D, midpoint(B, G)) mod 360
By internal_angle_bisector_definition_v0 on G, midpoint(B, G), B, A we get angle(G, A, midpoint(B, G)) == angle(midpoint(B, G), A, B) mod 360
By collinear_definition on D, midpoint(B, G), I we get midpoint(B, G) in Line(D, I), I in Line(D, midpoint(B, G)), Line(D, I) == Line(D, midpoint(B, G)), 0 == 2 * angle(midpoint(B, G), D, I) mod 360
By internal_angle_bisector_definition_v0 on B, midpoint(B, G), C, A we get angle(B, A, midpoint(B, G)) == angle(midpoint(B, G), A, C) mod 360
By collinear_definition on A, D, midpoint(B, G) we get D in Line(A, midpoint(B, G)), midpoint(B, G) in Line(A, D), Line(A, D) == Line(A, midpoint(B, G)), 0 == 2 * angle(D, A, midpoint(B, G)) mod 360
By collinear_definition on D, midpoint(B, G), A we get midpoint(B, G) in Line(A, D), A in Line(D, midpoint(B, G)), Line(A, D) == Line(D, midpoint(B, G)), 0 == 2 * angle(midpoint(B, G), D, A) mod 360
By collinear_definition on A, midpoint(B, G), D we get midpoint(B, G) in Line(A, D), D in Line(A, midpoint(B, G)), Line(A, D) == Line(A, midpoint(B, G)), 0 == 2 * angle(midpoint(B, G), A, D) mod 360
By perpendicular_angle_conditions_v0 on I, midpoint(B, G), B we get angle(I, midpoint(B, G), B) == orientation(B, I, midpoint(B, G)) mod 360
By internal_angle_bisector_definition_v0 on G, A, B, midpoint(B, G) we get angle(A, midpoint(B, G), B) == angle(G, midpoint(B, G), A) mod 360
By isosceles_triangle_altitude_v1 on line_intersection(h, altitude(E, A, D)), B, G we get identical(perpendicular_bisector(B, G), internal_angle_bisector(B, line_intersection(h, altitude(E, A, D)), G), perpendicular_line(line_intersection(h, altitude(E, A, D)), Line(B, G)))
By isosceles_triangle_altitude_v3 on line_intersection(h, altitude(E, A, D)), G, B we get identical(perpendicular_bisector(B, G), internal_angle_bisector(B, line_intersection(h, altitude(E, A, D)), G), perpendicular_line(line_intersection(h, altitude(E, A, D)), Line(B, G)))
By isosceles_triangle_altitude_v1 on line_intersection(h, altitude(F, A, D)), B, G we get identical(perpendicular_bisector(B, G), internal_angle_bisector(B, line_intersection(h, altitude(F, A, D)), G), perpendicular_line(line_intersection(h, altitude(F, A, D)), Line(B, G)))
By isosceles_triangle_altitude_v3 on line_intersection(h, altitude(E, A, D)), B, G we get identical(perpendicular_bisector(B, G), internal_angle_bisector(B, line_intersection(h, altitude(E, A, D)), G), perpendicular_line(line_intersection(h, altitude(E, A, D)), Line(B, G)))
By isosceles_triangle_altitude_v3 on line_intersection(h, altitude(F, A, D)), B, G we get identical(perpendicular_bisector(B, G), internal_angle_bisector(B, line_intersection(h, altitude(F, A, D)), G), perpendicular_line(line_intersection(h, altitude(F, A, D)), Line(B, G)))
By isosceles_triangle_properties on line_intersection(h, altitude(E, A, D)), G, B we get distance(B, line_intersection(h, altitude(E, A, D))) == distance(G, line_intersection(h, altitude(E, A, D))), angle(G, B, line_intersection(h, altitude(E, A, D))) == angle(line_intersection(h, altitude(E, A, D)), G, B) mod 360
By altitude_definition on E, I, A, altitude(E, A, D) we get altitude(E, A, D) == altitude(E, A, I)
By altitude_definition on F, I, A, altitude(F, A, D) we get altitude(F, A, D) == altitude(F, A, I)
By altitude_definition on B, I, A, Line(B, G) we get Line(B, G) == altitude(B, A, I)
By power_of_a_point_definition on midpoint(B, G), B, G, d we get log(power_of_a_point(midpoint(B, G), d)) == log(distance(B, midpoint(B, G))) + log(distance(G, midpoint(B, G)))
By power_of_a_point_definition on H, A, B, Circle(A, B, C) we get log(distance(A, H)) + log(distance(B, H)) == log(power_of_a_point(H, Circle(A, B, C)))
By power_of_a_point_definition on G, C, A, Circle(A, B, C) we get log(distance(C, G)) + log(distance(A, G)) == log(power_of_a_point(G, Circle(A, B, C)))
By isosceles_triangle_properties on line_intersection(h, altitude(F, A, D)), B, G we get distance(B, line_intersection(h, altitude(F, A, D))) == distance(G, line_intersection(h, altitude(F, A, D))), angle(B, G, line_intersection(h, altitude(F, A, D))) == angle(line_intersection(h, altitude(F, A, D)), B, G) mod 360
By collinear_definition on midpoint(B, G), D, I we get D in Line(I, midpoint(B, G)), I in Line(D, midpoint(B, G)), Line(D, midpoint(B, G)) == Line(I, midpoint(B, G)), 0 == 2 * angle(D, midpoint(B, G), I) mod 360
By isosceles_triangle_properties on line_intersection(h, altitude(F, A, D)), G, B we get distance(B, line_intersection(h, altitude(F, A, D))) == distance(G, line_intersection(h, altitude(F, A, D))), angle(G, B, line_intersection(h, altitude(F, A, D))) == angle(line_intersection(h, altitude(F, A, D)), G, B) mod 360
By power_of_a_point_definition on F, A, B, Circle(A, B, C) we get log(distance(A, F)) + log(distance(B, F)) == log(power_of_a_point(F, Circle(A, B, C)))
By collinear_definition on midpoint(B, G), A, D we get A in Line(D, midpoint(B, G)), D in Line(A, midpoint(B, G)), Line(A, midpoint(B, G)) == Line(D, midpoint(B, G)), 0 == 2 * angle(A, midpoint(B, G), D) mod 360
By altitude_definition on G, A, I, Line(B, G) we get Line(B, G) == altitude(G, A, I)
By collinear_definition on midpoint(B, G), D, A we get D in Line(A, midpoint(B, G)), A in Line(D, midpoint(B, G)), Line(A, midpoint(B, G)) == Line(D, midpoint(B, G)), 0 == 2 * angle(D, midpoint(B, G), A) mod 360
By isosceles_triangle_properties on line_intersection(h, altitude(E, A, D)), B, G we get distance(B, line_intersection(h, altitude(E, A, D))) == distance(G, line_intersection(h, altitude(E, A, D))), angle(B, G, line_intersection(h, altitude(E, A, D))) == angle(line_intersection(h, altitude(E, A, D)), B, G) mod 360
By power_of_a_point_definition on E, C, A, Circle(A, B, C) we get log(distance(C, E)) + log(distance(A, E)) == log(power_of_a_point(E, Circle(A, B, C)))
By collinear_definition on midpoint(B, G), I, D we get I in Line(D, midpoint(B, G)), D in Line(I, midpoint(B, G)), Line(D, midpoint(B, G)) == Line(I, midpoint(B, G)), 0 == 2 * angle(I, midpoint(B, G), D) mod 360
By concyclic_sufficient_conditions_v1 on D, midpoint(B, G), B, F we get concyclic(B, D, F, midpoint(B, G))
By concyclic_sufficient_conditions_v1 on D, midpoint(B, G), G, E we get concyclic(D, E, G, midpoint(B, G))
By line_definition on orthocenter(A, B, D), A, altitude(A, B, D) we get altitude(A, B, D) == Line(A, orthocenter(A, B, D))
By line_definition on G, orthocenter(A, D, G), Line(B, G) we get Line(B, G) == Line(G, orthocenter(A, D, G))
By line_definition on orthocenter(A, B, D), G, Line(B, G) we get Line(B, G) == Line(G, orthocenter(A, B, D))
By line_definition on orthocenter(A, B, D), F, Line(D, F) we get Line(D, F) == Line(F, orthocenter(A, B, D))
By line_definition on B, orthocenter(A, B, D), Line(B, G) we get Line(B, G) == Line(B, orthocenter(A, B, D))
By line_definition on A, orthocenter(A, D, G), altitude(A, D, G) we get altitude(A, D, G) == Line(A, orthocenter(A, D, G))
By line_definition on E, orthocenter(A, D, G), Line(D, E) we get Line(D, E) == Line(E, orthocenter(A, D, G))
By line_definition on orthocenter(A, B, D), D, Line(D, F) we get Line(D, F) == Line(D, orthocenter(A, B, D))
By line_definition on D, orthocenter(A, D, G), Line(D, E) we get Line(D, E) == Line(D, orthocenter(A, D, G))
By line_definition on orthocenter(A, D, G), B, Line(B, G) we get Line(B, G) == Line(B, orthocenter(A, D, G))
By perpendicular_line_definition on line_intersection(i, altitude(A, B, D)), i, altitude(A, B, D) we get i == perpendicular_line(line_intersection(i, altitude(A, B, D)), altitude(A, B, D))
By perpendicular_line_definition on line_intersection(i, altitude(A, B, D)), i, altitude(F, B, D) we get i == perpendicular_line(line_intersection(i, altitude(A, B, D)), altitude(F, B, D))
By line_intersection_definition on orthocenter(A, B, D), altitude(A, B, D), Line(B, G) we get orthocenter(A, B, D) == line_intersection(Line(B, G), altitude(A, B, D))
By perpendicular_line_definition on line_intersection(Line(D, G), altitude(A, D, G)), altitude(A, D, G), Line(D, G) we get altitude(A, D, G) == perpendicular_line(line_intersection(Line(D, G), altitude(A, D, G)), Line(D, G))
By line_intersection_definition on orthocenter(A, D, G), Line(D, E), altitude(A, D, G) we get orthocenter(A, D, G) == line_intersection(Line(D, E), altitude(A, D, G))
By perpendicular_line_definition on line_intersection(Line(D, G), altitude(A, D, G)), Line(D, G), altitude(E, D, G) we get Line(D, G) == perpendicular_line(line_intersection(Line(D, G), altitude(A, D, G)), altitude(E, D, G))
By line_intersection_definition on orthocenter(A, B, D), altitude(A, B, D), Line(D, F) we get orthocenter(A, B, D) == line_intersection(Line(D, F), altitude(A, B, D))
By perpendicular_line_definition on line_intersection(Line(D, G), altitude(A, D, G)), Line(D, G), altitude(A, D, G) we get Line(D, G) == perpendicular_line(line_intersection(Line(D, G), altitude(A, D, G)), altitude(A, D, G))
By line_intersection_definition on orthocenter(A, D, G), Line(B, G), altitude(A, D, G) we get orthocenter(A, D, G) == line_intersection(Line(B, G), altitude(A, D, G))
By perpendicular_line_definition on line_intersection(i, altitude(A, B, D)), altitude(A, B, D), i we get altitude(A, B, D) == perpendicular_line(line_intersection(i, altitude(A, B, D)), i)
By line_unique_intersection_v1 on Line(B, I), Line(B, G), B, orthocenter(A, B, D) we get orthocenter(A, B, D) not in Line(B, I)
By line_unique_intersection_v1 on Line(G, I), Line(B, G), G, orthocenter(A, D, G) we get orthocenter(A, D, G) not in Line(G, I)
By line_unique_intersection_v1 on altitude(A, B, D), Line(D, F), orthocenter(A, B, D), F we get F not in altitude(A, B, D)
By line_unique_intersection_v1 on i, Line(B, G), B, orthocenter(A, B, D) we get orthocenter(A, B, D) not in i
By line_unique_intersection_v1 on h, Line(D, F), D, orthocenter(A, B, D) we get orthocenter(A, B, D) not in h
By line_unique_intersection_v1 on altitude(A, D, G), Line(D, E), orthocenter(A, D, G), E we get E not in altitude(A, D, G)
By line_unique_intersection_v1 on g, Line(B, G), G, orthocenter(A, B, D) we get orthocenter(A, B, D) not in g
By line_unique_intersection_v1 on altitude(A, D, G), Line(D, E), orthocenter(A, D, G), D we get D not in altitude(A, D, G)
By line_unique_intersection_v1 on g, Line(B, G), G, orthocenter(A, D, G) we get orthocenter(A, D, G) not in g
By line_unique_intersection_v1 on Line(G, I), Line(B, G), G, orthocenter(A, B, D) we get orthocenter(A, B, D) not in Line(G, I)
By line_unique_intersection_v1 on Line(E, F), Line(D, E), E, orthocenter(A, D, G) we get orthocenter(A, D, G) not in Line(E, F)
By line_unique_intersection_v1 on f, Line(B, G), B, orthocenter(A, B, D) we get orthocenter(A, B, D) not in f
By line_unique_intersection_v1 on Line(E, F), Line(D, F), F, orthocenter(A, B, D) we get orthocenter(A, B, D) not in Line(E, F)
By line_unique_intersection_v1 on i, Line(D, E), D, orthocenter(A, D, G) we get orthocenter(A, D, G) not in i
By line_unique_intersection_v1 on altitude(A, D, G), Line(B, G), orthocenter(A, D, G), G we get G not in altitude(A, D, G)
By line_unique_intersection_v1 on f, Line(B, G), B, orthocenter(A, D, G) we get orthocenter(A, D, G) not in f
By line_unique_intersection_v1 on Line(B, C), Line(B, G), B, orthocenter(A, B, D) we get orthocenter(A, B, D) not in Line(B, C)
By line_unique_intersection_v1 on Line(E, H), Line(D, E), E, orthocenter(A, D, G) we get orthocenter(A, D, G) not in Line(E, H)
By line_unique_intersection_v1 on Line(D, E), Line(D, F), D, orthocenter(A, B, D) we get orthocenter(A, B, D) not in Line(D, E)
By line_unique_intersection_v1 on Line(D, H), Line(D, E), D, orthocenter(A, D, G) we get orthocenter(A, D, G) not in Line(D, H)
By line_unique_intersection_v1 on altitude(A, D, G), Line(B, G), orthocenter(A, D, G), B we get B not in altitude(A, D, G)
By line_unique_intersection_v1 on Line(D, F), Line(D, E), D, orthocenter(A, D, G) we get orthocenter(A, D, G) not in Line(D, F)
By line_unique_intersection_v1 on h, Line(D, E), D, orthocenter(A, D, G) we get orthocenter(A, D, G) not in h
By line_unique_intersection_v1 on Line(B, C), Line(B, G), B, orthocenter(A, D, G) we get orthocenter(A, D, G) not in Line(B, C)
By line_unique_intersection_v1 on altitude(A, B, D), Line(D, F), orthocenter(A, B, D), D we get D not in altitude(A, B, D)
By line_unique_intersection_v1 on Line(C, D), Line(D, F), D, orthocenter(A, B, D) we get orthocenter(A, B, D) not in Line(C, D)
By line_unique_intersection_v1 on Line(D, G), Line(B, G), G, orthocenter(A, D, G) we get orthocenter(A, D, G) not in Line(D, G)
By line_unique_intersection_v1 on altitude(A, B, D), Line(B, G), orthocenter(A, B, D), B we get B not in altitude(A, B, D)
By line_unique_intersection_v1 on Line(D, G), Line(D, F), D, orthocenter(A, B, D) we get orthocenter(A, B, D) not in Line(D, G)
By line_unique_intersection_v1 on Line(C, F), Line(D, F), F, orthocenter(A, B, D) we get orthocenter(A, B, D) not in Line(C, F)
By line_unique_intersection_v1 on Line(B, I), Line(B, G), B, orthocenter(A, D, G) we get orthocenter(A, D, G) not in Line(B, I)
By line_unique_intersection_v1 on Line(C, D), Line(D, E), D, orthocenter(A, D, G) we get orthocenter(A, D, G) not in Line(C, D)
By line_unique_intersection_v1 on Line(D, H), Line(D, F), D, orthocenter(A, B, D) we get orthocenter(A, B, D) not in Line(D, H)
By line_unique_intersection_v1 on altitude(A, B, D), Line(B, G), orthocenter(A, B, D), G we get G not in altitude(A, B, D)
By parallel_line_definition on F, altitude(F, B, D), altitude(A, B, D) we get altitude(F, B, D) == parallel_line(F, altitude(A, B, D))
By parallel_line_definition on projection(E, Line(D, G)), altitude(E, D, G), altitude(A, D, G) we get altitude(E, D, G) == parallel_line(projection(E, Line(D, G)), altitude(A, D, G))
By parallel_line_definition on A, altitude(A, D, G), altitude(E, D, G) we get altitude(A, D, G) == parallel_line(A, altitude(E, D, G))
By parallel_line_definition on orthocenter(A, D, G), altitude(A, D, G), altitude(E, D, G) we get altitude(A, D, G) == parallel_line(orthocenter(A, D, G), altitude(E, D, G))
By parallel_line_definition on E, altitude(E, D, G), altitude(A, D, G) we get altitude(E, D, G) == parallel_line(E, altitude(A, D, G))
By parallel_line_definition on A, altitude(A, B, D), altitude(F, B, D) we get altitude(A, B, D) == parallel_line(A, altitude(F, B, D))
By parallel_line_definition on orthocenter(A, B, D), altitude(A, B, D), altitude(F, B, D) we get altitude(A, B, D) == parallel_line(orthocenter(A, B, D), altitude(F, B, D))
By parallel_line_definition on line_intersection(i, altitude(A, B, D)), altitude(A, B, D), altitude(F, B, D) we get altitude(A, B, D) == parallel_line(line_intersection(i, altitude(A, B, D)), altitude(F, B, D))
By parallel_line_definition on projection(F, i), altitude(F, B, D), altitude(A, B, D) we get altitude(F, B, D) == parallel_line(projection(F, i), altitude(A, B, D))
By parallel_line_definition on line_intersection(Line(D, G), altitude(A, D, G)), altitude(A, D, G), altitude(E, D, G) we get altitude(A, D, G) == parallel_line(line_intersection(Line(D, G), altitude(A, D, G)), altitude(E, D, G))
By different_points_v1 on projection(F, h), G we get 0 != distance(G, projection(F, h))
By different_points_v1 on projection(F, h), B we get 0 != distance(B, projection(F, h))
By different_points_v1 on G, projection(E, h) we get 0 != distance(G, projection(E, h))
By different_points_v1 on B, projection(E, h) we get 0 != distance(B, projection(E, h))
By line_inequality on Line(G, projection(F, h)), Line(D, H), G we get Line(D, H) != Line(G, projection(F, h))
By directions_draw_angle on C, E, projection(E, h) we get exists(angle(C, E, projection(E, h)))
By reverse_direction on projection(F, i), F we get 180 == direction(projection(F, i), F) - direction(F, projection(F, i)) mod 360
By in_imply_collinear on line_intersection(i, altitude(A, B, D)), D, B we get collinear(B, D, line_intersection(i, altitude(A, B, D)))
By in_imply_collinear on line_intersection(Line(D, G), altitude(A, D, G)), D, G we get collinear(D, G, line_intersection(Line(D, G), altitude(A, D, G)))
By directions_draw_angle on projection(E, Line(D, G)), E, A we get exists(angle(projection(E, Line(D, G)), E, A))
By directions_draw_angle on projection(F, h), G, D we get exists(angle(projection(F, h), G, D))
By directions_draw_angle on projection(E, h), B, C we get exists(angle(projection(E, h), B, C))
By reverse_direction on F, projection(F, i) we get 180 == direction(F, projection(F, i)) - direction(projection(F, i), F) mod 360
By line_inequality on Line(B, projection(E, h)), Line(D, E), B we get Line(D, E) != Line(B, projection(E, h))
By directions_draw_angle on projection(E, Line(C, D)), E, F we get exists(angle(projection(E, Line(C, D)), E, F))
By directions_draw_angle on midpoint(B, G), A, H we get exists(angle(midpoint(B, G), A, H))
By line_inequality on Line(B, projection(F, h)), Line(C, D), B we get Line(C, D) != Line(B, projection(F, h))
By directions_draw_angle on midpoint(B, G), A, E we get exists(angle(midpoint(B, G), A, E))
By directions_draw_angle on projection(F, h), B, H we get exists(angle(projection(F, h), B, H))
By reverse_direction on F, projection(F, h) we get 180 == direction(F, projection(F, h)) - direction(projection(F, h), F) mod 360
By directions_draw_angle on B, F, projection(F, i) we get exists(angle(B, F, projection(F, i)))
By directions_draw_angle on midpoint(B, G), I, A we get exists(angle(midpoint(B, G), I, A))
By line_inequality on Line(G, projection(F, h)), Line(B, I), G we get Line(B, I) != Line(G, projection(F, h))
By reverse_direction on F, projection(F, Line(D, H)) we get 180 == direction(F, projection(F, Line(D, H))) - direction(projection(F, Line(D, H)), F) mod 360
By directions_draw_angle on projection(F, i), F, D we get exists(angle(projection(F, i), F, D))
By directions_draw_angle on A, G, projection(E, h) we get exists(angle(A, G, projection(E, h)))
By collinear_definition on A, midpoint(B, G), I we get midpoint(B, G) in Line(A, I), I in Line(A, midpoint(B, G)), Line(A, I) == Line(A, midpoint(B, G)), 0 == 2 * angle(midpoint(B, G), A, I) mod 360
By reverse_direction on E, projection(E, Line(D, G)) we get 180 == direction(E, projection(E, Line(D, G))) - direction(projection(E, Line(D, G)), E) mod 360
By directions_draw_angle on projection(E, Line(D, G)), E, D we get exists(angle(projection(E, Line(D, G)), E, D))
By directions_draw_angle on projection(F, i), F, E we get exists(angle(projection(F, i), F, E))
By directions_draw_angle on projection(F, h), B, D we get exists(angle(projection(F, h), B, D))
By reverse_direction on projection(F, Line(D, H)), F we get 180 == direction(projection(F, Line(D, H)), F) - direction(F, projection(F, Line(D, H))) mod 360
By directions_draw_angle on H, D, G we get exists(angle(H, D, G))
By line_inequality on Line(B, projection(E, h)), Line(E, H), B we get Line(E, H) != Line(B, projection(E, h))
By reverse_direction on E, projection(E, h) we get 180 == direction(E, projection(E, h)) - direction(projection(E, h), E) mod 360
By directions_draw_angle on C, H, D we get exists(angle(C, H, D))
By directions_draw_angle on B, F, projection(F, Line(D, H)) we get exists(angle(B, F, projection(F, Line(D, H))))
By directions_draw_angle on D, H, F we get exists(angle(D, H, F))
By directions_draw_angle on projection(F, Line(D, H)), F, E we get exists(angle(projection(F, Line(D, H)), F, E))
By directions_draw_angle on I, G, projection(E, h) we get exists(angle(I, G, projection(E, h)))
By reverse_direction on midpoint(B, G), I we get 180 == direction(midpoint(B, G), I) - direction(I, midpoint(B, G)) mod 360
By directions_draw_angle on midpoint(B, G), D, H we get exists(angle(midpoint(B, G), D, H))
By directions_draw_angle on projection(E, Line(C, D)), E, projection(E, h) we get exists(angle(projection(E, Line(C, D)), E, projection(E, h)))
By reverse_direction on projection(E, h), E we get 180 == direction(projection(E, h), E) - direction(E, projection(E, h)) mod 360
By directions_draw_angle on H, E, projection(E, Line(C, D)) we get exists(angle(H, E, projection(E, Line(C, D))))
By line_containment_inequality on line_intersection(Line(D, G), altitude(A, D, G)), C, Line(D, G) we get C != line_intersection(Line(D, G), altitude(A, D, G))
By directions_draw_angle on midpoint(B, G), I, C we get exists(angle(midpoint(B, G), I, C))
By directions_draw_angle on C, D, midpoint(B, G) we get exists(angle(C, D, midpoint(B, G)))
By line_inequality on Line(G, projection(F, h)), Line(E, H), G we get Line(E, H) != Line(G, projection(F, h))
By directions_draw_angle on H, A, midpoint(B, G) we get exists(angle(H, A, midpoint(B, G)))
By directions_draw_angle on projection(E, h), E, projection(E, Line(C, D)) we get exists(angle(projection(E, h), E, projection(E, Line(C, D))))
By directions_draw_angle on F, B, projection(F, h) we get exists(angle(F, B, projection(F, h)))
By directions_draw_angle on A, E, projection(E, h) we get exists(angle(A, E, projection(E, h)))
By line_inequality on Line(B, projection(E, h)), Line(C, D), B we get Line(C, D) != Line(B, projection(E, h))
By line_containment_inequality on line_intersection(i, altitude(A, B, D)), F, i we get F != line_intersection(i, altitude(A, B, D))
By directions_draw_angle on midpoint(B, G), A, I we get exists(angle(midpoint(B, G), A, I))
By directions_draw_angle on D, H, center(c) we get exists(angle(D, H, center(c)))
By directions_draw_angle on I, B, projection(E, h) we get exists(angle(I, B, projection(E, h)))
By directions_draw_angle on projection(E, h), G, projection(F, h) we get exists(angle(projection(E, h), G, projection(F, h)))
By directions_draw_angle on projection(E, Line(C, D)), E, A we get exists(angle(projection(E, Line(C, D)), E, A))
By directions_draw_angle on D, F, projection(F, i) we get exists(angle(D, F, projection(F, i)))
By directions_draw_angle on midpoint(B, G), G, projection(E, h) we get exists(angle(midpoint(B, G), G, projection(E, h)))
By directions_draw_angle on H, E, projection(E, Line(D, G)) we get exists(angle(H, E, projection(E, Line(D, G))))
By directions_draw_angle on H, D, C we get exists(angle(H, D, C))
By directions_draw_angle on F, D, midpoint(B, G) we get exists(angle(F, D, midpoint(B, G)))
By line_circle_intersection_has_at_most_two_points_0 on A, I, midpoint(B, G), Circle(A, B, C) we get midpoint(B, G) not in Circle(A, B, C)
By reverse_direction on E, projection(E, Line(C, D)) we get 180 == direction(E, projection(E, Line(C, D))) - direction(projection(E, Line(C, D)), E) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(B, G), E, C we get not_collinear(C, E, midpoint(B, G)), exists(Line(C, E))
By directions_draw_angle on projection(F, i), F, center(c) we get exists(angle(projection(F, i), F, center(c)))
By directions_draw_angle on projection(E, h), E, D we get exists(angle(projection(E, h), E, D))
By line_inequality on Line(G, projection(E, h)), Line(C, H), G we get Line(C, H) != Line(G, projection(E, h))
By directions_draw_angle on G, D, H we get exists(angle(G, D, H))
By line_inequality on Line(G, projection(F, h)), f, G we get f != Line(G, projection(F, h))
By directions_draw_angle on A, H, D we get exists(angle(A, H, D))
By directions_draw_angle on H, E, projection(E, h) we get exists(angle(H, E, projection(E, h)))
By reverse_direction on midpoint(B, G), D we get 180 == direction(midpoint(B, G), D) - direction(D, midpoint(B, G)) mod 360
By directions_draw_angle on B, D, H we get exists(angle(B, D, H))
By reverse_direction on I, midpoint(B, G) we get 180 == direction(I, midpoint(B, G)) - direction(midpoint(B, G), I) mod 360
By line_containment_inequality on line_intersection(i, altitude(A, B, D)), E, i we get E != line_intersection(i, altitude(A, B, D))
By line_inequality on Line(G, projection(E, h)), Line(D, F), G we get Line(D, F) != Line(G, projection(E, h))
By directions_draw_angle on H, F, projection(F, h) we get exists(angle(H, F, projection(F, h)))
By directions_draw_angle on projection(F, h), B, midpoint(B, G) we get exists(angle(projection(F, h), B, midpoint(B, G)))
By line_inequality on Line(B, projection(E, h)), h, B we get h != Line(B, projection(E, h))
By directions_draw_angle on projection(E, Line(D, G)), E, projection(E, h) we get exists(angle(projection(E, Line(D, G)), E, projection(E, h)))
By directions_draw_angle on projection(E, h), G, E we get exists(angle(projection(E, h), G, E))
By directions_draw_angle on projection(E, h), E, C we get exists(angle(projection(E, h), E, C))
By collinear_definition on midpoint(B, G), I, A we get I in Line(A, midpoint(B, G)), A in Line(I, midpoint(B, G)), Line(A, midpoint(B, G)) == Line(I, midpoint(B, G)), 0 == 2 * angle(I, midpoint(B, G), A) mod 360
By directions_draw_angle on projection(E, h), B, D we get exists(angle(projection(E, h), B, D))
By line_circle_intersection_has_at_most_two_points_0 on G, B, orthocenter(A, B, D), d we get orthocenter(A, B, D) not in d
By directions_draw_angle on I, B, projection(F, h) we get exists(angle(I, B, projection(F, h)))
By directions_draw_angle on A, E, projection(E, Line(C, D)) we get exists(angle(A, E, projection(E, Line(C, D))))
By collinear_definition on I, midpoint(B, G), A we get midpoint(B, G) in Line(A, I), A in Line(I, midpoint(B, G)), Line(A, I) == Line(I, midpoint(B, G)), 0 == 2 * angle(midpoint(B, G), I, A) mod 360
By directions_draw_angle on projection(F, h), F, projection(F, i) we get exists(angle(projection(F, h), F, projection(F, i)))
By directions_draw_angle on E, G, projection(F, h) we get exists(angle(E, G, projection(F, h)))
By directions_draw_angle on F, D, H we get exists(angle(F, D, H))
By reverse_direction on projection(F, h), F we get 180 == direction(projection(F, h), F) - direction(F, projection(F, h)) mod 360
By directions_draw_angle on D, H, B we get exists(angle(D, H, B))
By reverse_direction on projection(E, Line(D, G)), E we get 180 == direction(projection(E, Line(D, G)), E) - direction(E, projection(E, Line(D, G))) mod 360
By directions_draw_angle on E, F, projection(F, h) we get exists(angle(E, F, projection(F, h)))
By line_inequality on Line(B, projection(F, h)), Line(C, H), B we get Line(C, H) != Line(B, projection(F, h))
By directions_draw_angle on F, E, projection(E, Line(C, D)) we get exists(angle(F, E, projection(E, Line(C, D))))
By directions_draw_angle on projection(F, h), B, A we get exists(angle(projection(F, h), B, A))
By line_containment_inequality on projection(F, Line(D, H)), midpoint(B, G), Line(D, H) we get midpoint(B, G) != projection(F, Line(D, H))
By directions_draw_angle on projection(E, Line(C, D)), E, G we get exists(angle(projection(E, Line(C, D)), E, G))
By directions_draw_angle on center(c), F, projection(F, Line(D, H)) we get exists(angle(center(c), F, projection(F, Line(D, H))))
By reverse_direction on D, H we get 180 == direction(D, H) - direction(H, D) mod 360
By directions_draw_angle on C, E, projection(E, Line(D, G)) we get exists(angle(C, E, projection(E, Line(D, G))))
By directions_draw_angle on C, F, projection(F, Line(D, H)) we get exists(angle(C, F, projection(F, Line(D, H))))
By directions_draw_angle on projection(F, h), F, center(c) we get exists(angle(projection(F, h), F, center(c)))
By reverse_direction on D, midpoint(B, G) we get 180 == direction(D, midpoint(B, G)) - direction(midpoint(B, G), D) mod 360
By directions_draw_angle on projection(E, Line(D, G)), E, F we get exists(angle(projection(E, Line(D, G)), E, F))
By collinear_definition on A, I, midpoint(B, G) we get I in Line(A, midpoint(B, G)), midpoint(B, G) in Line(A, I), Line(A, I) == Line(A, midpoint(B, G)), 0 == 2 * angle(I, A, midpoint(B, G)) mod 360
By line_inequality on Line(B, projection(E, h)), g, B we get g != Line(B, projection(E, h))
By directions_draw_angle on A, B, projection(F, h) we get exists(angle(A, B, projection(F, h)))
By directions_draw_angle on projection(E, Line(D, G)), E, center(c) we get exists(angle(projection(E, Line(D, G)), E, center(c)))
By directions_draw_angle on projection(F, Line(D, H)), F, C we get exists(angle(projection(F, Line(D, H)), F, C))
By directions_draw_angle on D, F, projection(F, Line(D, H)) we get exists(angle(D, F, projection(F, Line(D, H))))
By directions_draw_angle on C, D, H we get exists(angle(C, D, H))
By directions_draw_angle on B, H, D we get exists(angle(B, H, D))
By directions_draw_angle on projection(E, h), B, A we get exists(angle(projection(E, h), B, A))
By directions_draw_angle on C, G, projection(E, h) we get exists(angle(C, G, projection(E, h)))
By directions_draw_angle on I, A, midpoint(B, G) we get exists(angle(I, A, midpoint(B, G)))
By directions_draw_angle on C, G, projection(F, h) we get exists(angle(C, G, projection(F, h)))
By reverse_direction on H, D we get 180 == direction(H, D) - direction(D, H) mod 360
By line_inequality on Line(B, projection(F, h)), Line(D, F), B we get Line(D, F) != Line(B, projection(F, h))
By directions_draw_angle on D, H, A we get exists(angle(D, H, A))
By directions_draw_angle on E, F, projection(F, Line(D, H)) we get exists(angle(E, F, projection(F, Line(D, H))))
By directions_draw_angle on projection(F, h), F, A we get exists(angle(projection(F, h), F, A))
By directions_draw_angle on E, D, H we get exists(angle(E, D, H))
By directions_draw_angle on projection(E, h), B, projection(F, h) we get exists(angle(projection(E, h), B, projection(F, h)))
By reverse_direction on A, midpoint(B, G) we get 180 == direction(A, midpoint(B, G)) - direction(midpoint(B, G), A) mod 360
By line_inequality on Line(G, projection(E, h)), Line(D, E), G we get Line(D, E) != Line(G, projection(E, h))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(B, G), F, H we get not_collinear(F, H, midpoint(B, G)), exists(Line(F, H))
By directions_draw_angle on projection(F, Line(D, H)), F, H we get exists(angle(projection(F, Line(D, H)), F, H))
By collinear_definition on midpoint(B, G), A, I we get A in Line(I, midpoint(B, G)), I in Line(A, midpoint(B, G)), Line(A, midpoint(B, G)) == Line(I, midpoint(B, G)), 0 == 2 * angle(A, midpoint(B, G), I) mod 360
By reverse_direction on midpoint(B, G), A we get 180 == direction(midpoint(B, G), A) - direction(A, midpoint(B, G)) mod 360
By directions_draw_angle on center(c), F, projection(F, i) we get exists(angle(center(c), F, projection(F, i)))
By directions_draw_angle on F, E, projection(E, h) we get exists(angle(F, E, projection(E, h)))
By line_inequality on Line(B, projection(F, h)), g, B we get g != Line(B, projection(F, h))
By directions_draw_angle on F, A, midpoint(B, G) we get exists(angle(F, A, midpoint(B, G)))
By collinear_definition on I, A, midpoint(B, G) we get A in Line(I, midpoint(B, G)), midpoint(B, G) in Line(A, I), Line(A, I) == Line(I, midpoint(B, G)), 0 == 2 * angle(A, I, midpoint(B, G)) mod 360
By reverse_direction on projection(E, Line(C, D)), E we get 180 == direction(projection(E, Line(C, D)), E) - direction(E, projection(E, Line(C, D))) mod 360
By directions_draw_angle on projection(F, Line(D, H)), F, D we get exists(angle(projection(F, Line(D, H)), F, D))
By directions_draw_angle on center(c), E, projection(E, h) we get exists(angle(center(c), E, projection(E, h)))
By directions_draw_angle on F, E, projection(E, Line(D, G)) we get exists(angle(F, E, projection(E, Line(D, G))))
By directions_draw_angle on D, G, projection(E, h) we get exists(angle(D, G, projection(E, h)))
By directions_draw_angle on projection(E, h), E, projection(E, Line(D, G)) we get exists(angle(projection(E, h), E, projection(E, Line(D, G))))
By directions_draw_angle on projection(E, h), G, C we get exists(angle(projection(E, h), G, C))
By directions_draw_angle on D, E, projection(E, Line(C, D)) we get exists(angle(D, E, projection(E, Line(C, D))))
By directions_draw_angle on H, F, projection(F, Line(D, H)) we get exists(angle(H, F, projection(F, Line(D, H))))
By directions_draw_angle on E, D, midpoint(B, G) we get exists(angle(E, D, midpoint(B, G)))
By directions_draw_angle on projection(F, i), F, projection(F, Line(D, H)) we get exists(angle(projection(F, i), F, projection(F, Line(D, H))))
By line_inequality on Line(B, projection(F, h)), Line(D, G), B we get Line(D, G) != Line(B, projection(F, h))
By directions_draw_angle on B, F, projection(F, h) we get exists(angle(B, F, projection(F, h)))
By directions_draw_angle on midpoint(B, G), D, F we get exists(angle(midpoint(B, G), D, F))
By directions_draw_angle on A, B, projection(E, h) we get exists(angle(A, B, projection(E, h)))
By directions_draw_angle on projection(F, h), B, I we get exists(angle(projection(F, h), B, I))
By directions_draw_angle on E, F, projection(F, i) we get exists(angle(E, F, projection(F, i)))
By line_containment_inequality on line_intersection(i, altitude(A, B, D)), A, i we get A != line_intersection(i, altitude(A, B, D))
By directions_draw_angle on projection(E, h), G, D we get exists(angle(projection(E, h), G, D))
By line_containment_inequality on line_intersection(i, altitude(A, B, D)), I, i we get I != line_intersection(i, altitude(A, B, D))
By directions_draw_angle on I, D, H we get exists(angle(I, D, H))
By directions_draw_angle on H, D, I we get exists(angle(H, D, I))
By directions_draw_angle on center(c), E, projection(E, Line(C, D)) we get exists(angle(center(c), E, projection(E, Line(C, D))))
By directions_draw_angle on projection(F, i), F, A we get exists(angle(projection(F, i), F, A))
By directions_draw_angle on projection(F, h), G, projection(E, h) we get exists(angle(projection(F, h), G, projection(E, h)))
By directions_draw_angle on H, B, projection(F, h) we get exists(angle(H, B, projection(F, h)))
By directions_draw_angle on projection(E, Line(C, D)), E, D we get exists(angle(projection(E, Line(C, D)), E, D))
By directions_draw_angle on projection(E, h), E, F we get exists(angle(projection(E, h), E, F))
By directions_draw_angle on C, I, midpoint(B, G) we get exists(angle(C, I, midpoint(B, G)))
By directions_draw_angle on projection(F, h), F, C we get exists(angle(projection(F, h), F, C))
By directions_draw_angle on projection(E, h), B, midpoint(B, G) we get exists(angle(projection(E, h), B, midpoint(B, G)))
By directions_draw_angle on F, B, projection(E, h) we get exists(angle(F, B, projection(E, h)))
By directions_draw_angle on C, B, projection(F, h) we get exists(angle(C, B, projection(F, h)))
By directions_draw_angle on projection(E, Line(D, G)), E, projection(E, Line(C, D)) we get exists(angle(projection(E, Line(D, G)), E, projection(E, Line(C, D))))
By directions_draw_angle on projection(E, Line(D, G)), E, G we get exists(angle(projection(E, Line(D, G)), E, G))
By directions_draw_angle on projection(F, i), F, B we get exists(angle(projection(F, i), F, B))
By directions_draw_angle on C, B, projection(E, h) we get exists(angle(C, B, projection(E, h)))
By directions_draw_angle on F, H, D we get exists(angle(F, H, D))
By directions_draw_angle on H, D, E we get exists(angle(H, D, E))
By directions_draw_angle on midpoint(B, G), D, E we get exists(angle(midpoint(B, G), D, E))
By directions_draw_angle on E, G, projection(E, h) we get exists(angle(E, G, projection(E, h)))
By directions_draw_angle on center(c), E, projection(E, Line(D, G)) we get exists(angle(center(c), E, projection(E, Line(D, G))))
By directions_draw_angle on projection(F, h), G, A we get exists(angle(projection(F, h), G, A))
By directions_draw_angle on projection(E, h), B, F we get exists(angle(projection(E, h), B, F))
By directions_draw_angle on D, E, projection(E, h) we get exists(angle(D, E, projection(E, h)))
By line_inequality on Line(G, projection(F, h)), Line(C, I), G we get Line(C, I) != Line(G, projection(F, h))
By directions_draw_angle on projection(E, Line(C, D)), E, projection(E, Line(D, G)) we get exists(angle(projection(E, Line(C, D)), E, projection(E, Line(D, G))))
By directions_draw_angle on projection(F, Line(D, H)), F, center(c) we get exists(angle(projection(F, Line(D, H)), F, center(c)))
By line_inequality on Line(B, projection(E, h)), Line(E, F), B we get Line(E, F) != Line(B, projection(E, h))
By directions_draw_angle on projection(F, h), B, projection(E, h) we get exists(angle(projection(F, h), B, projection(E, h)))
By directions_draw_angle on midpoint(B, G), G, projection(F, h) we get exists(angle(midpoint(B, G), G, projection(F, h)))
By directions_draw_angle on projection(E, h), G, A we get exists(angle(projection(E, h), G, A))
By directions_draw_angle on projection(F, h), B, F we get exists(angle(projection(F, h), B, F))
By directions_draw_angle on D, B, projection(F, h) we get exists(angle(D, B, projection(F, h)))
By directions_draw_angle on G, E, projection(E, h) we get exists(angle(G, E, projection(E, h)))
By directions_draw_angle on midpoint(B, G), B, projection(F, h) we get exists(angle(midpoint(B, G), B, projection(F, h)))
By directions_draw_angle on D, F, projection(F, h) we get exists(angle(D, F, projection(F, h)))
By directions_draw_angle on H, D, A we get exists(angle(H, D, A))
By directions_draw_angle on projection(F, i), F, C we get exists(angle(projection(F, i), F, C))
By directions_draw_angle on projection(F, Line(D, H)), F, projection(F, i) we get exists(angle(projection(F, Line(D, H)), F, projection(F, i)))
By directions_draw_angle on A, F, projection(F, Line(D, H)) we get exists(angle(A, F, projection(F, Line(D, H))))
By directions_draw_angle on D, G, projection(F, h) we get exists(angle(D, G, projection(F, h)))
By directions_draw_angle on projection(F, h), G, midpoint(B, G) we get exists(angle(projection(F, h), G, midpoint(B, G)))
By directions_draw_angle on D, H, C we get exists(angle(D, H, C))
By directions_draw_angle on A, I, midpoint(B, G) we get exists(angle(A, I, midpoint(B, G)))
By directions_draw_angle on projection(E, Line(C, D)), E, center(c) we get exists(angle(projection(E, Line(C, D)), E, center(c)))
By directions_draw_angle on E, A, midpoint(B, G) we get exists(angle(E, A, midpoint(B, G)))
By directions_draw_angle on C, F, projection(F, i) we get exists(angle(C, F, projection(F, i)))
By directions_draw_angle on H, B, projection(E, h) we get exists(angle(H, B, projection(E, h)))
By directions_draw_angle on A, D, H we get exists(angle(A, D, H))
By directions_draw_angle on projection(E, Line(D, G)), E, H we get exists(angle(projection(E, Line(D, G)), E, H))
By directions_draw_angle on projection(F, Line(D, H)), F, projection(F, h) we get exists(angle(projection(F, Line(D, H)), F, projection(F, h)))
By directions_draw_angle on center(c), H, D we get exists(angle(center(c), H, D))
By directions_draw_angle on projection(E, h), E, A we get exists(angle(projection(E, h), E, A))
By directions_draw_angle on projection(F, Line(D, H)), F, A we get exists(angle(projection(F, Line(D, H)), F, A))
By directions_draw_angle on midpoint(B, G), A, F we get exists(angle(midpoint(B, G), A, F))
By directions_draw_angle on projection(F, h), F, H we get exists(angle(projection(F, h), F, H))
By directions_draw_angle on projection(F, h), F, projection(F, Line(D, H)) we get exists(angle(projection(F, h), F, projection(F, Line(D, H))))
By line_circle_intersection_has_at_most_two_points_0 on D, E, orthocenter(A, D, G), Circle(A, D, E) we get orthocenter(A, D, G) not in Circle(A, D, E)
By directions_draw_angle on A, F, projection(F, i) we get exists(angle(A, F, projection(F, i)))
By directions_draw_angle on projection(E, Line(C, D)), E, H we get exists(angle(projection(E, Line(C, D)), E, H))
By directions_draw_angle on projection(F, h), F, E we get exists(angle(projection(F, h), F, E))
By directions_draw_angle on H, D, midpoint(B, G) we get exists(angle(H, D, midpoint(B, G)))
By directions_draw_angle on projection(F, h), F, D we get exists(angle(projection(F, h), F, D))
By directions_draw_angle on projection(E, h), E, G we get exists(angle(projection(E, h), E, G))
By directions_draw_angle on A, F, projection(F, h) we get exists(angle(A, F, projection(F, h)))
By directions_draw_angle on A, E, projection(E, Line(D, G)) we get exists(angle(A, E, projection(E, Line(D, G))))
By directions_draw_angle on projection(F, h), G, I we get exists(angle(projection(F, h), G, I))
By directions_draw_angle on E, H, D we get exists(angle(E, H, D))
By directions_draw_angle on H, F, projection(F, i) we get exists(angle(H, F, projection(F, i)))
By directions_draw_angle on projection(E, h), E, H we get exists(angle(projection(E, h), E, H))
By directions_draw_angle on G, E, projection(E, Line(C, D)) we get exists(angle(G, E, projection(E, Line(C, D))))
By directions_draw_angle on midpoint(B, G), B, projection(E, h) we get exists(angle(midpoint(B, G), B, projection(E, h)))
By line_inequality on Line(B, projection(E, h)), Line(D, F), B we get Line(D, F) != Line(B, projection(E, h))
By directions_draw_angle on H, D, F we get exists(angle(H, D, F))
By line_inequality on Line(G, projection(E, h)), Line(C, I), G we get Line(C, I) != Line(G, projection(E, h))
By directions_draw_angle on center(c), F, projection(F, h) we get exists(angle(center(c), F, projection(F, h)))
By directions_draw_angle on projection(E, h), G, midpoint(B, G) we get exists(angle(projection(E, h), G, midpoint(B, G)))
By directions_draw_angle on A, midpoint(B, G), I we get exists(angle(A, midpoint(B, G), I))
By directions_draw_angle on projection(E, h), B, I we get exists(angle(projection(E, h), B, I))
By directions_draw_angle on projection(E, Line(D, G)), E, C we get exists(angle(projection(E, Line(D, G)), E, C))
By directions_draw_angle on D, E, projection(E, Line(D, G)) we get exists(angle(D, E, projection(E, Line(D, G))))
By directions_draw_angle on D, B, projection(E, h) we get exists(angle(D, B, projection(E, h)))
By directions_draw_angle on H, D, B we get exists(angle(H, D, B))
By directions_draw_angle on projection(E, h), G, I we get exists(angle(projection(E, h), G, I))
By line_inequality on Line(G, projection(F, h)), Line(C, F), G we get Line(C, F) != Line(G, projection(F, h))
By directions_draw_angle on projection(E, Line(C, D)), E, C we get exists(angle(projection(E, Line(C, D)), E, C))
By directions_draw_angle on projection(F, h), B, C we get exists(angle(projection(F, h), B, C))
By directions_draw_angle on projection(F, h), G, C we get exists(angle(projection(F, h), G, C))
By line_circle_intersection_has_at_most_two_points_0 on D, F, orthocenter(A, B, D), Circle(A, D, E) we get orthocenter(A, B, D) not in Circle(A, D, E)
By directions_draw_angle on D, H, E we get exists(angle(D, H, E))
By directions_draw_angle on G, E, projection(E, Line(D, G)) we get exists(angle(G, E, projection(E, Line(D, G))))
By line_inequality on Line(G, projection(F, h)), Line(C, D), G we get Line(C, D) != Line(G, projection(F, h))
By directions_draw_angle on I, G, projection(F, h) we get exists(angle(I, G, projection(F, h)))
By directions_draw_angle on projection(F, h), F, B we get exists(angle(projection(F, h), F, B))
By directions_draw_angle on projection(E, h), B, H we get exists(angle(projection(E, h), B, H))
By directions_draw_angle on C, F, projection(F, h) we get exists(angle(C, F, projection(F, h)))
By line_containment_inequality on orthocenter(A, D, G), midpoint(B, G), Line(D, E) we get midpoint(B, G) != orthocenter(A, D, G)
By line_inequality on Line(B, projection(F, h)), Line(E, H), B we get Line(E, H) != Line(B, projection(F, h))
By directions_draw_angle on projection(E, h), E, center(c) we get exists(angle(projection(E, h), E, center(c)))
By line_inequality on Line(G, projection(F, h)), Line(E, F), G we get Line(E, F) != Line(G, projection(F, h))
By directions_draw_angle on midpoint(B, G), D, C we get exists(angle(midpoint(B, G), D, C))
By directions_draw_angle on projection(F, i), F, projection(F, h) we get exists(angle(projection(F, i), F, projection(F, h)))
By line_containment_inequality on line_intersection(Line(D, G), altitude(A, D, G)), F, Line(D, G) we get F != line_intersection(Line(D, G), altitude(A, D, G))
By directions_draw_angle on projection(F, h), G, E we get exists(angle(projection(F, h), G, E))
By directions_draw_angle on projection(F, Line(D, H)), F, B we get exists(angle(projection(F, Line(D, H)), F, B))
By directions_draw_angle on I, midpoint(B, G), A we get exists(angle(I, midpoint(B, G), A))
By directions_draw_angle on projection(F, i), F, H we get exists(angle(projection(F, i), F, H))
By directions_draw_angle on A, G, projection(F, h) we get exists(angle(A, G, projection(F, h)))
By directions_draw_angle on C, E, projection(E, Line(C, D)) we get exists(angle(C, E, projection(E, Line(C, D))))
By line_containment_inequality on line_intersection(i, altitude(A, B, D)), midpoint(B, G), i we get midpoint(B, G) != line_intersection(i, altitude(A, B, D))
By line_inequality on Line(B, projection(E, h)), Line(D, H), B we get Line(D, H) != Line(B, projection(E, h))
By line_inequality on Line(G, projection(E, h)), f, G we get f != Line(G, projection(E, h))
By line_inequality on Line(B, projection(F, h)), Line(D, H), B we get Line(D, H) != Line(B, projection(F, h))
By line_inequality on Line(B, projection(F, h)), h, B we get h != Line(B, projection(F, h))
By line_inequality on Line(B, projection(E, h)), Line(C, F), B we get Line(C, F) != Line(B, projection(E, h))
By line_inequality on Line(B, projection(E, h)), Line(G, I), B we get Line(G, I) != Line(B, projection(E, h))
By line_containment_inequality on line_intersection(i, altitude(A, B, D)), G, i we get G != line_intersection(i, altitude(A, B, D))
By line_containment_inequality on line_intersection(Line(D, G), altitude(A, D, G)), E, Line(D, G) we get E != line_intersection(Line(D, G), altitude(A, D, G))
By line_inequality on Line(G, projection(E, h)), Line(E, H), G we get Line(E, H) != Line(G, projection(E, h))
By line_inequality on Line(B, projection(F, h)), Line(D, E), B we get Line(D, E) != Line(B, projection(F, h))
By line_inequality on Line(G, projection(E, h)), i, G we get i != Line(G, projection(E, h))
By line_inequality on Line(G, projection(F, h)), i, G we get i != Line(G, projection(F, h))
By line_inequality on Line(G, projection(E, h)), Line(E, F), G we get Line(E, F) != Line(G, projection(E, h))
By line_inequality on Line(G, projection(E, h)), Line(B, C), G we get Line(B, C) != Line(G, projection(E, h))
By line_containment_inequality on projection(E, Line(D, G)), midpoint(B, G), Line(D, G) we get midpoint(B, G) != projection(E, Line(D, G))
By line_containment_inequality on line_intersection(Line(D, G), altitude(A, D, G)), H, Line(D, G) we get H != line_intersection(Line(D, G), altitude(A, D, G))
By line_inequality on Line(G, projection(F, h)), h, G we get h != Line(G, projection(F, h))
By line_inequality on Line(B, projection(F, h)), Line(C, I), B we get Line(C, I) != Line(B, projection(F, h))
By line_inequality on Line(B, projection(E, h)), Line(D, G), B we get Line(D, G) != Line(B, projection(E, h))
By line_inequality on Line(G, projection(F, h)), Line(D, F), G we get Line(D, F) != Line(G, projection(F, h))
By line_inequality on Line(G, projection(E, h)), h, G we get h != Line(G, projection(E, h))
By line_inequality on Line(G, projection(E, h)), Line(C, F), G we get Line(C, F) != Line(G, projection(E, h))
By line_circle_intersection_has_at_most_two_points_0 on B, G, orthocenter(A, D, G), d we get orthocenter(A, D, G) not in d
By line_containment_inequality on line_intersection(Line(D, G), altitude(A, D, G)), midpoint(B, G), Line(D, G) we get midpoint(B, G) != line_intersection(Line(D, G), altitude(A, D, G))
By line_containment_inequality on line_intersection(Line(D, G), altitude(A, D, G)), I, Line(D, G) we get I != line_intersection(Line(D, G), altitude(A, D, G))
By line_inequality on Line(G, projection(F, h)), Line(C, H), G we get Line(C, H) != Line(G, projection(F, h))
By line_inequality on Line(G, projection(E, h)), Line(C, D), G we get Line(C, D) != Line(G, projection(E, h))
By line_containment_inequality on projection(F, i), midpoint(B, G), i we get midpoint(B, G) != projection(F, i)
By line_inequality on Line(B, projection(F, h)), Line(G, I), B we get Line(G, I) != Line(B, projection(F, h))
By line_inequality on Line(G, projection(F, h)), Line(B, C), G we get Line(B, C) != Line(G, projection(F, h))
By line_containment_inequality on orthocenter(A, B, D), midpoint(B, G), Line(D, F) we get midpoint(B, G) != orthocenter(A, B, D)
By line_inequality on Line(G, projection(F, h)), Line(D, E), G we get Line(D, E) != Line(G, projection(F, h))
By line_inequality on Line(G, projection(E, h)), Line(D, H), G we get Line(D, H) != Line(G, projection(E, h))
By line_inequality on Line(B, projection(F, h)), Line(E, F), B we get Line(E, F) != Line(B, projection(F, h))
By line_inequality on Line(B, projection(F, h)), Line(C, F), B we get Line(C, F) != Line(B, projection(F, h))
By line_containment_inequality on line_intersection(i, altitude(A, B, D)), H, i we get H != line_intersection(i, altitude(A, B, D))
By line_containment_inequality on projection(E, Line(C, D)), midpoint(B, G), Line(C, D) we get midpoint(B, G) != projection(E, Line(C, D))
By line_inequality on Line(B, projection(E, h)), Line(C, I), B we get Line(C, I) != Line(B, projection(E, h))
By line_inequality on Line(G, projection(E, h)), Line(B, I), G we get Line(B, I) != Line(G, projection(E, h))
By line_inequality on Line(B, projection(E, h)), Line(C, H), B we get Line(C, H) != Line(B, projection(E, h))
By line_containment_inequality on line_intersection(Line(D, G), altitude(A, D, G)), B, Line(D, G) we get B != line_intersection(Line(D, G), altitude(A, D, G))
By line_containment_inequality on line_intersection(i, altitude(A, B, D)), C, i we get C != line_intersection(i, altitude(A, B, D))
By line_containment_inequality on line_intersection(Line(D, G), altitude(A, D, G)), A, Line(D, G) we get A != line_intersection(Line(D, G), altitude(A, D, G))
By external_angle_bisector_definition_v0_r on A, D, I, midpoint(B, G) we get Line(D, midpoint(B, G)) == external_angle_bisector(A, midpoint(B, G), I)
By collinear_definition on G, orthocenter(A, D, G), B we get orthocenter(A, D, G) in Line(B, G), B in Line(G, orthocenter(A, D, G)), Line(B, G) == Line(G, orthocenter(A, D, G)), 0 == 2 * angle(orthocenter(A, D, G), G, B) mod 360
By external_angle_bisector_definition_v0_r on B, I, B, midpoint(B, G) we get Line(I, midpoint(B, G)) == external_angle_bisector(B, midpoint(B, G), B)
By external_angle_bisector_definition_v0_r on D, B, A, midpoint(B, G) we get Line(B, midpoint(B, G)) == external_angle_bisector(A, midpoint(B, G), D)
By external_angle_bisector_definition_v0_r on G, A, G, midpoint(B, G) we get Line(A, midpoint(B, G)) == external_angle_bisector(G, midpoint(B, G), G)
By external_angle_bisector_definition_v0_r on G, I, G, midpoint(B, G) we get Line(I, midpoint(B, G)) == external_angle_bisector(G, midpoint(B, G), G)
By reverse_direction on G, projection(E, h) we get 180 == direction(G, projection(E, h)) - direction(projection(E, h), G) mod 360
By internal_angle_bisector_definition_v0_r on D, midpoint(B, G), D, I we get Line(I, midpoint(B, G)) == internal_angle_bisector(D, I, D)
By external_angle_bisector_definition_v0_r on G, D, G, midpoint(B, G) we get Line(D, midpoint(B, G)) == external_angle_bisector(G, midpoint(B, G), G)
By external_angle_bisector_definition_v0_r on A, G, D, midpoint(B, G) we get Line(G, midpoint(B, G)) == external_angle_bisector(A, midpoint(B, G), D)
By internal_angle_bisector_definition_v0_r on I, G, D, midpoint(B, G) we get Line(G, midpoint(B, G)) == internal_angle_bisector(D, midpoint(B, G), I)
By external_angle_bisector_definition_v0_r on B, D, B, midpoint(B, G) we get Line(D, midpoint(B, G)) == external_angle_bisector(B, midpoint(B, G), B)
By reverse_direction on B, projection(E, h) we get 180 == direction(B, projection(E, h)) - direction(projection(E, h), B) mod 360
By internal_angle_bisector_definition_v0_r on D, A, D, I we get Line(A, I) == internal_angle_bisector(D, I, D)
By collinear_definition on B, orthocenter(A, D, G), G we get orthocenter(A, D, G) in Line(B, G), G in Line(B, orthocenter(A, D, G)), Line(B, G) == Line(B, orthocenter(A, D, G)), 0 == 2 * angle(orthocenter(A, D, G), B, G) mod 360
By internal_angle_bisector_definition_v0_r on I, B, D, midpoint(B, G) we get Line(B, midpoint(B, G)) == internal_angle_bisector(D, midpoint(B, G), I)
By reverse_direction on B, projection(F, h) we get 180 == direction(B, projection(F, h)) - direction(projection(F, h), B) mod 360
By external_angle_bisector_definition_v0_r on D, G, D, midpoint(B, G) we get Line(G, midpoint(B, G)) == external_angle_bisector(D, midpoint(B, G), D)
By internal_angle_bisector_definition_v0_r on A, D, A, I we get Line(D, I) == internal_angle_bisector(A, I, A)
By collinear_definition on G, midpoint(B, G), orthocenter(A, D, G) we get midpoint(B, G) in Line(G, orthocenter(A, D, G)), orthocenter(A, D, G) in Line(G, midpoint(B, G)), Line(G, midpoint(B, G)) == Line(G, orthocenter(A, D, G)), 0 == 2 * angle(midpoint(B, G), G, orthocenter(A, D, G)) mod 360
By collinear_definition on F, orthocenter(A, B, D), D we get orthocenter(A, B, D) in Line(D, F), D in Line(F, orthocenter(A, B, D)), Line(D, F) == Line(F, orthocenter(A, B, D)), 0 == 2 * angle(orthocenter(A, B, D), F, D) mod 360
By external_angle_bisector_definition_v0_r on I, G, I, midpoint(B, G) we get Line(G, midpoint(B, G)) == external_angle_bisector(I, midpoint(B, G), I)
By collinear_definition on F, D, orthocenter(A, B, D) we get D in Line(F, orthocenter(A, B, D)), orthocenter(A, B, D) in Line(D, F), Line(D, F) == Line(F, orthocenter(A, B, D)), 0 == 2 * angle(D, F, orthocenter(A, B, D)) mod 360
By external_angle_bisector_definition_v0_r on D, B, D, midpoint(B, G) we get Line(B, midpoint(B, G)) == external_angle_bisector(D, midpoint(B, G), D)
By external_angle_bisector_definition_v0_r on A, G, A, midpoint(B, G) we get Line(G, midpoint(B, G)) == external_angle_bisector(A, midpoint(B, G), A)
By collinear_definition on D, orthocenter(A, B, D), F we get orthocenter(A, B, D) in Line(D, F), F in Line(D, orthocenter(A, B, D)), Line(D, F) == Line(D, orthocenter(A, B, D)), 0 == 2 * angle(orthocenter(A, B, D), D, F) mod 360
By external_angle_bisector_definition_v0_r on A, B, A, midpoint(B, G) we get Line(B, midpoint(B, G)) == external_angle_bisector(A, midpoint(B, G), A)
By collinear_definition on G, midpoint(B, G), orthocenter(A, B, D) we get midpoint(B, G) in Line(G, orthocenter(A, B, D)), orthocenter(A, B, D) in Line(G, midpoint(B, G)), Line(G, midpoint(B, G)) == Line(G, orthocenter(A, B, D)), 0 == 2 * angle(midpoint(B, G), G, orthocenter(A, B, D)) mod 360
By external_angle_bisector_definition_v0_r on B, A, B, midpoint(B, G) we get Line(A, midpoint(B, G)) == external_angle_bisector(B, midpoint(B, G), B)
By external_angle_bisector_definition_v0_r on I, B, I, midpoint(B, G) we get Line(B, midpoint(B, G)) == external_angle_bisector(I, midpoint(B, G), I)
By collinear_definition on D, E, orthocenter(A, D, G) we get E in Line(D, orthocenter(A, D, G)), orthocenter(A, D, G) in Line(D, E), Line(D, E) == Line(D, orthocenter(A, D, G)), 0 == 2 * angle(E, D, orthocenter(A, D, G)) mod 360
By collinear_definition on G, orthocenter(A, D, G), midpoint(B, G) we get orthocenter(A, D, G) in Line(G, midpoint(B, G)), midpoint(B, G) in Line(G, orthocenter(A, D, G)), Line(G, midpoint(B, G)) == Line(G, orthocenter(A, D, G)), 0 == 2 * angle(orthocenter(A, D, G), G, midpoint(B, G)) mod 360
By internal_angle_bisector_definition_v0_r on D, midpoint(B, G), D, A we get Line(A, midpoint(B, G)) == internal_angle_bisector(D, A, D)
By internal_angle_bisector_definition_v0_r on I, D, I, A we get Line(A, D) == internal_angle_bisector(I, A, I)
By internal_angle_bisector_definition_v0_r on I, D, I, midpoint(B, G) we get Line(D, midpoint(B, G)) == internal_angle_bisector(I, midpoint(B, G), I)
By collinear_definition on G, orthocenter(A, B, D), B we get orthocenter(A, B, D) in Line(B, G), B in Line(G, orthocenter(A, B, D)), Line(B, G) == Line(G, orthocenter(A, B, D)), 0 == 2 * angle(orthocenter(A, B, D), G, B) mod 360
By collinear_definition on D, orthocenter(A, D, G), E we get orthocenter(A, D, G) in Line(D, E), E in Line(D, orthocenter(A, D, G)), Line(D, E) == Line(D, orthocenter(A, D, G)), 0 == 2 * angle(orthocenter(A, D, G), D, E) mod 360
By internal_angle_bisector_definition_v0_r on A, B, I, midpoint(B, G) we get Line(B, midpoint(B, G)) == internal_angle_bisector(A, midpoint(B, G), I)
By collinear_definition on B, midpoint(B, G), orthocenter(A, B, D) we get midpoint(B, G) in Line(B, orthocenter(A, B, D)), orthocenter(A, B, D) in Line(B, midpoint(B, G)), Line(B, midpoint(B, G)) == Line(B, orthocenter(A, B, D)), 0 == 2 * angle(midpoint(B, G), B, orthocenter(A, B, D)) mod 360
By internal_angle_bisector_definition_v0_r on I, G, A, midpoint(B, G) we get Line(G, midpoint(B, G)) == internal_angle_bisector(A, midpoint(B, G), I)
By internal_angle_bisector_definition_v0_r on D, A, D, midpoint(B, G) we get Line(A, midpoint(B, G)) == internal_angle_bisector(D, midpoint(B, G), D)
By collinear_definition on D, F, orthocenter(A, B, D) we get F in Line(D, orthocenter(A, B, D)), orthocenter(A, B, D) in Line(D, F), Line(D, F) == Line(D, orthocenter(A, B, D)), 0 == 2 * angle(F, D, orthocenter(A, B, D)) mod 360
By collinear_definition on G, orthocenter(A, B, D), midpoint(B, G) we get orthocenter(A, B, D) in Line(G, midpoint(B, G)), midpoint(B, G) in Line(G, orthocenter(A, B, D)), Line(G, midpoint(B, G)) == Line(G, orthocenter(A, B, D)), 0 == 2 * angle(orthocenter(A, B, D), G, midpoint(B, G)) mod 360
By internal_angle_bisector_definition_v0_r on A, D, A, midpoint(B, G) we get Line(D, midpoint(B, G)) == internal_angle_bisector(A, midpoint(B, G), A)
By collinear_definition on B, G, orthocenter(A, B, D) we get G in Line(B, orthocenter(A, B, D)), orthocenter(A, B, D) in Line(B, G), Line(B, G) == Line(B, orthocenter(A, B, D)), 0 == 2 * angle(G, B, orthocenter(A, B, D)) mod 360
By internal_angle_bisector_definition_v0_r on D, I, D, A we get Line(A, I) == internal_angle_bisector(D, A, D)
By collinear_definition on B, midpoint(B, G), orthocenter(A, D, G) we get midpoint(B, G) in Line(B, orthocenter(A, D, G)), orthocenter(A, D, G) in Line(B, midpoint(B, G)), Line(B, midpoint(B, G)) == Line(B, orthocenter(A, D, G)), 0 == 2 * angle(midpoint(B, G), B, orthocenter(A, D, G)) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(B, G), I, midpoint(B, G), D we get Line(D, I) == internal_angle_bisector(midpoint(B, G), D, midpoint(B, G))
By collinear_definition on E, D, orthocenter(A, D, G) we get D in Line(E, orthocenter(A, D, G)), orthocenter(A, D, G) in Line(D, E), Line(D, E) == Line(E, orthocenter(A, D, G)), 0 == 2 * angle(D, E, orthocenter(A, D, G)) mod 360
By collinear_definition on B, orthocenter(A, B, D), midpoint(B, G) we get orthocenter(A, B, D) in Line(B, midpoint(B, G)), midpoint(B, G) in Line(B, orthocenter(A, B, D)), Line(B, midpoint(B, G)) == Line(B, orthocenter(A, B, D)), 0 == 2 * angle(orthocenter(A, B, D), B, midpoint(B, G)) mod 360
By internal_angle_bisector_definition_v0_r on D, I, D, midpoint(B, G) we get Line(I, midpoint(B, G)) == internal_angle_bisector(D, midpoint(B, G), D)
By internal_angle_bisector_definition_v0_r on midpoint(B, G), D, midpoint(B, G), I we get Line(D, I) == internal_angle_bisector(midpoint(B, G), I, midpoint(B, G))
By collinear_definition on E, orthocenter(A, D, G), D we get orthocenter(A, D, G) in Line(D, E), D in Line(E, orthocenter(A, D, G)), Line(D, E) == Line(E, orthocenter(A, D, G)), 0 == 2 * angle(orthocenter(A, D, G), E, D) mod 360
By reverse_direction on G, projection(F, h) we get 180 == direction(G, projection(F, h)) - direction(projection(F, h), G) mod 360
By collinear_definition on G, B, orthocenter(A, D, G) we get B in Line(G, orthocenter(A, D, G)), orthocenter(A, D, G) in Line(B, G), Line(B, G) == Line(G, orthocenter(A, D, G)), 0 == 2 * angle(B, G, orthocenter(A, D, G)) mod 360
By collinear_definition on B, orthocenter(A, B, D), G we get orthocenter(A, B, D) in Line(B, G), G in Line(B, orthocenter(A, B, D)), Line(B, G) == Line(B, orthocenter(A, B, D)), 0 == 2 * angle(orthocenter(A, B, D), B, G) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(B, G), A, midpoint(B, G), D we get Line(A, D) == internal_angle_bisector(midpoint(B, G), D, midpoint(B, G))
By collinear_definition on G, B, orthocenter(A, B, D) we get B in Line(G, orthocenter(A, B, D)), orthocenter(A, B, D) in Line(B, G), Line(B, G) == Line(G, orthocenter(A, B, D)), 0 == 2 * angle(B, G, orthocenter(A, B, D)) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(B, G), D, midpoint(B, G), A we get Line(A, D) == internal_angle_bisector(midpoint(B, G), A, midpoint(B, G))
By collinear_definition on B, orthocenter(A, D, G), midpoint(B, G) we get orthocenter(A, D, G) in Line(B, midpoint(B, G)), midpoint(B, G) in Line(B, orthocenter(A, D, G)), Line(B, midpoint(B, G)) == Line(B, orthocenter(A, D, G)), 0 == 2 * angle(orthocenter(A, D, G), B, midpoint(B, G)) mod 360
By collinear_definition on B, G, orthocenter(A, D, G) we get G in Line(B, orthocenter(A, D, G)), orthocenter(A, D, G) in Line(B, G), Line(B, G) == Line(B, orthocenter(A, D, G)), 0 == 2 * angle(G, B, orthocenter(A, D, G)) mod 360
By altitude_definition on E, I, midpoint(B, G), altitude(E, A, D) we get altitude(E, A, D) == altitude(E, I, midpoint(B, G))
By collinear_definition on orthocenter(A, D, G), B, G we get B in Line(G, orthocenter(A, D, G)), G in Line(B, orthocenter(A, D, G)), Line(B, orthocenter(A, D, G)) == Line(G, orthocenter(A, D, G)), 0 == 2 * angle(B, orthocenter(A, D, G), G) mod 360
By altitude_definition on B, A, midpoint(B, G), Line(B, G) we get Line(B, G) == altitude(B, A, midpoint(B, G))
By altitude_definition on I, G, midpoint(B, G), h we get h == altitude(I, G, midpoint(B, G))
By altitude_definition on F, midpoint(B, G), I, altitude(F, A, D) we get altitude(F, A, D) == altitude(F, I, midpoint(B, G))
By altitude_definition on F, A, midpoint(B, G), altitude(F, A, D) we get altitude(F, A, D) == altitude(F, A, midpoint(B, G))
By power_of_a_point_definition on A, D, I, Circle(B, D, I) we get log(distance(A, D)) + log(distance(A, I)) == log(power_of_a_point(A, Circle(B, D, I)))
By altitude_definition on D, B, midpoint(B, G), h we get h == altitude(D, B, midpoint(B, G))
By altitude_definition on E, midpoint(B, G), D, altitude(E, A, D) we get altitude(E, A, D) == altitude(E, D, midpoint(B, G))
By altitude_definition on I, B, midpoint(B, G), h we get h == altitude(I, B, midpoint(B, G))
By collinear_definition on orthocenter(A, B, D), G, B we get G in Line(B, orthocenter(A, B, D)), B in Line(G, orthocenter(A, B, D)), Line(B, orthocenter(A, B, D)) == Line(G, orthocenter(A, B, D)), 0 == 2 * angle(G, orthocenter(A, B, D), B) mod 360
By power_of_a_point_definition on D, A, I, Circle(A, B, C) we get log(distance(A, D)) + log(distance(D, I)) == log(power_of_a_point(D, Circle(A, B, C)))
By power_of_a_point_definition on I, D, A, Circle(A, D, E) we get log(distance(D, I)) + log(distance(A, I)) == log(power_of_a_point(I, Circle(A, D, E)))
By altitude_definition on G, A, midpoint(B, G), Line(B, G) we get Line(B, G) == altitude(G, A, midpoint(B, G))
By altitude_definition on B, I, midpoint(B, G), Line(B, G) we get Line(B, G) == altitude(B, I, midpoint(B, G))
By altitude_definition on G, midpoint(B, G), I, Line(B, G) we get Line(B, G) == altitude(G, I, midpoint(B, G))
By altitude_definition on F, D, midpoint(B, G), altitude(F, A, D) we get altitude(F, A, D) == altitude(F, D, midpoint(B, G))
By altitude_definition on E, A, midpoint(B, G), altitude(E, A, D) we get altitude(E, A, D) == altitude(E, A, midpoint(B, G))
By altitude_definition on A, G, midpoint(B, G), h we get h == altitude(A, G, midpoint(B, G))
By collinear_definition on orthocenter(A, D, G), D, E we get D in Line(E, orthocenter(A, D, G)), E in Line(D, orthocenter(A, D, G)), Line(D, orthocenter(A, D, G)) == Line(E, orthocenter(A, D, G)), 0 == 2 * angle(D, orthocenter(A, D, G), E) mod 360
By collinear_definition on orthocenter(A, B, D), B, G we get B in Line(G, orthocenter(A, B, D)), G in Line(B, orthocenter(A, B, D)), Line(B, orthocenter(A, B, D)) == Line(G, orthocenter(A, B, D)), 0 == 2 * angle(B, orthocenter(A, B, D), G) mod 360
By collinear_definition on orthocenter(A, B, D), D, F we get D in Line(F, orthocenter(A, B, D)), F in Line(D, orthocenter(A, B, D)), Line(D, orthocenter(A, B, D)) == Line(F, orthocenter(A, B, D)), 0 == 2 * angle(D, orthocenter(A, B, D), F) mod 360
By altitude_definition on G, midpoint(B, G), D, Line(B, G) we get Line(B, G) == altitude(G, D, midpoint(B, G))
By power_of_a_point_definition on A, D, I, Circle(D, G, I) we get log(distance(A, D)) + log(distance(A, I)) == log(power_of_a_point(A, Circle(D, G, I)))
By altitude_definition on B, midpoint(B, G), D, Line(B, G) we get Line(B, G) == altitude(B, D, midpoint(B, G))
By altitude_definition on D, midpoint(B, G), G, h we get h == altitude(D, G, midpoint(B, G))
By collinear_definition on orthocenter(A, D, G), E, D we get E in Line(D, orthocenter(A, D, G)), D in Line(E, orthocenter(A, D, G)), Line(D, orthocenter(A, D, G)) == Line(E, orthocenter(A, D, G)), 0 == 2 * angle(E, orthocenter(A, D, G), D) mod 360
By altitude_definition on A, B, midpoint(B, G), h we get h == altitude(A, B, midpoint(B, G))
By collinear_definition on orthocenter(A, B, D), F, D we get F in Line(D, orthocenter(A, B, D)), D in Line(F, orthocenter(A, B, D)), Line(D, orthocenter(A, B, D)) == Line(F, orthocenter(A, B, D)), 0 == 2 * angle(F, orthocenter(A, B, D), D) mod 360
By collinear_definition on orthocenter(A, D, G), G, B we get G in Line(B, orthocenter(A, D, G)), B in Line(G, orthocenter(A, D, G)), Line(B, orthocenter(A, D, G)) == Line(G, orthocenter(A, D, G)), 0 == 2 * angle(G, orthocenter(A, D, G), B) mod 360
By power_of_a_point_definition on midpoint(B, G), I, D, Circle(B, D, I) we get log(power_of_a_point(midpoint(B, G), Circle(B, D, I))) == log(distance(I, midpoint(B, G))) + log(distance(D, midpoint(B, G)))
By power_of_a_point_definition on midpoint(B, G), A, D, Circle(A, D, E) we get log(power_of_a_point(midpoint(B, G), Circle(A, D, E))) == log(distance(A, midpoint(B, G))) + log(distance(D, midpoint(B, G)))
By power_of_a_point_definition on midpoint(B, G), D, I, Circle(D, G, I) we get log(power_of_a_point(midpoint(B, G), Circle(D, G, I))) == log(distance(D, midpoint(B, G))) + log(distance(I, midpoint(B, G)))
By line_definition on midpoint(B, G), orthocenter(A, D, G), Line(B, G) we get Line(B, G) == Line(midpoint(B, G), orthocenter(A, D, G))
By line_definition on midpoint(B, G), orthocenter(A, B, D), Line(B, G) we get Line(B, G) == Line(midpoint(B, G), orthocenter(A, B, D))
By line_definition on line_intersection(i, altitude(A, B, D)), A, altitude(A, B, D) we get altitude(A, B, D) == Line(A, line_intersection(i, altitude(A, B, D)))
By line_definition on A, line_intersection(Line(D, G), altitude(A, D, G)), altitude(A, D, G) we get altitude(A, D, G) == Line(A, line_intersection(Line(D, G), altitude(A, D, G)))
By line_intersection_definition on projection(F, h), Line(B, projection(F, h)), h we get projection(F, h) == line_intersection(h, Line(B, projection(F, h)))
By line_intersection_definition on projection(E, h), Line(G, projection(E, h)), h we get projection(E, h) == line_intersection(h, Line(G, projection(E, h)))
By line_intersection_definition on projection(E, h), h, Line(B, projection(E, h)) we get projection(E, h) == line_intersection(h, Line(B, projection(E, h)))
By line_intersection_definition on projection(F, h), Line(G, projection(F, h)), h we get projection(F, h) == line_intersection(h, Line(G, projection(F, h)))
By line_unique_intersection_v1 on altitude(A, D, G), Line(B, G), orthocenter(A, D, G), midpoint(B, G) we get midpoint(B, G) not in altitude(A, D, G)
By line_unique_intersection_v1 on altitude(A, B, D), Line(B, G), orthocenter(A, B, D), midpoint(B, G) we get midpoint(B, G) not in altitude(A, B, D)
By perpendicular_direction_conditions_v0_r on F, A, orthocenter(A, B, D), D we get 180 == 2 * direction(F, A) - 2 * direction(orthocenter(A, B, D), D) mod 360
By perpendicular_direction_conditions_v0_r on A, E, orthocenter(A, D, G), E we get 180 == 2 * direction(A, E) - 2 * direction(orthocenter(A, D, G), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), A, orthocenter(A, B, D), G we get 180 == 2 * direction(midpoint(B, G), A) - 2 * direction(orthocenter(A, B, D), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), B, midpoint(B, G), A we get 180 == 2 * direction(orthocenter(A, B, D), B) - 2 * direction(midpoint(B, G), A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), D, A, B we get 180 == 2 * direction(orthocenter(A, B, D), D) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), A, orthocenter(A, B, D), B we get 180 == 2 * direction(midpoint(B, G), A) - 2 * direction(orthocenter(A, B, D), B) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), B, D, I we get 180 == 2 * direction(orthocenter(A, B, D), B) - 2 * direction(D, I) mod 360
By perpendicular_direction_conditions_v0_r on H, F, orthocenter(A, B, D), D we get 180 == 2 * direction(H, F) - 2 * direction(orthocenter(A, B, D), D) mod 360
By perpendicular_direction_conditions_v0_r on A, D, orthocenter(A, B, D), B we get 180 == 2 * direction(A, D) - 2 * direction(orthocenter(A, B, D), B) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), G, midpoint(B, G), I we get 180 == 2 * direction(orthocenter(A, B, D), G) - 2 * direction(midpoint(B, G), I) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(B, G), orthocenter(A, B, D), G we get 180 == 2 * direction(A, midpoint(B, G)) - 2 * direction(orthocenter(A, B, D), G) mod 360
By perpendicular_direction_conditions_v0_r on D, I, orthocenter(A, D, G), B we get 180 == 2 * direction(D, I) - 2 * direction(orthocenter(A, D, G), B) mod 360
By perpendicular_direction_conditions_v0_r on F, B, orthocenter(A, B, D), F we get 180 == 2 * direction(F, B) - 2 * direction(orthocenter(A, B, D), F) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), D, A, C we get 180 == 2 * direction(orthocenter(A, D, G), D) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on E, G, orthocenter(A, D, G), D we get 180 == 2 * direction(E, G) - 2 * direction(orthocenter(A, D, G), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), G, I, A we get 180 == 2 * direction(orthocenter(A, D, G), G) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), E, E, A we get 180 == 2 * direction(orthocenter(A, D, G), E) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(B, G), orthocenter(A, D, G), G we get 180 == 2 * direction(A, midpoint(B, G)) - 2 * direction(orthocenter(A, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on G, A, orthocenter(A, D, G), D we get 180 == 2 * direction(G, A) - 2 * direction(orthocenter(A, D, G), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), B, midpoint(B, G), D we get 180 == 2 * direction(orthocenter(A, D, G), B) - 2 * direction(midpoint(B, G), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), E, E, G we get 180 == 2 * direction(orthocenter(A, D, G), E) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), G, D, midpoint(B, G) we get 180 == 2 * direction(orthocenter(A, D, G), G) - 2 * direction(D, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), F, B, A we get 180 == 2 * direction(orthocenter(A, B, D), F) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), G, midpoint(B, G), A we get 180 == 2 * direction(orthocenter(A, D, G), G) - 2 * direction(midpoint(B, G), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), I, orthocenter(A, B, D), G we get 180 == 2 * direction(midpoint(B, G), I) - 2 * direction(orthocenter(A, B, D), G) mod 360
By perpendicular_direction_conditions_v0_r on A, B, orthocenter(A, B, D), D we get 180 == 2 * direction(A, B) - 2 * direction(orthocenter(A, B, D), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), D, H, A we get 180 == 2 * direction(orthocenter(A, B, D), D) - 2 * direction(H, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), A, orthocenter(A, D, G), G we get 180 == 2 * direction(midpoint(B, G), A) - 2 * direction(orthocenter(A, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), B, I, D we get 180 == 2 * direction(orthocenter(A, D, G), B) - 2 * direction(I, D) mod 360
By perpendicular_direction_conditions_v0_r on I, D, orthocenter(A, D, G), G we get 180 == 2 * direction(I, D) - 2 * direction(orthocenter(A, D, G), G) mod 360
By collinear_and_not_between_implies_orientation on projection(E, Line(C, D)), G, B, midpoint(B, G) we get orientation(B, G, projection(E, Line(C, D))) == orientation(B, midpoint(B, G), projection(E, Line(C, D))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), B, midpoint(B, G), I we get 180 == 2 * direction(orthocenter(A, D, G), B) - 2 * direction(midpoint(B, G), I) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), G, midpoint(B, G), D we get 180 == 2 * direction(orthocenter(A, B, D), G) - 2 * direction(midpoint(B, G), D) mod 360
By perpendicular_direction_conditions_v0_r on B, H, orthocenter(A, B, D), F we get 180 == 2 * direction(B, H) - 2 * direction(orthocenter(A, B, D), F) mod 360
By collinear_and_not_between_implies_orientation on orthocenter(A, D, G), midpoint(B, G), B, G we get orientation(B, G, orthocenter(A, D, G)) == orientation(B, midpoint(B, G), orthocenter(A, D, G)) mod 360
By collinear_and_not_between_implies_orientation on orthocenter(A, B, D), midpoint(B, G), G, B we get orientation(B, orthocenter(A, B, D), G) == orientation(G, midpoint(B, G), orthocenter(A, B, D)) mod 360
By perpendicular_direction_conditions_v0_r on B, H, orthocenter(A, B, D), D we get 180 == 2 * direction(B, H) - 2 * direction(orthocenter(A, B, D), D) mod 360
By perpendicular_direction_conditions_v0_r on G, E, orthocenter(A, D, G), D we get 180 == 2 * direction(G, E) - 2 * direction(orthocenter(A, D, G), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), D, E, G we get 180 == 2 * direction(orthocenter(A, D, G), D) - 2 * direction(E, G) mod 360
By between_implies_orientation on orthocenter(A, B, D), B, midpoint(B, G), G we get orientation(B, midpoint(B, G), orthocenter(A, B, D)) == orientation(G, orthocenter(A, B, D), midpoint(B, G)) mod 360, orientation(B, G, orthocenter(A, B, D)) == orientation(B, midpoint(B, G), orthocenter(A, B, D)) mod 360
By perpendicular_direction_conditions_v0_r on A, F, orthocenter(A, B, D), F we get 180 == 2 * direction(A, F) - 2 * direction(orthocenter(A, B, D), F) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(B, G), orthocenter(A, D, G), B we get 180 == 2 * direction(A, midpoint(B, G)) - 2 * direction(orthocenter(A, D, G), B) mod 360
By perpendicular_direction_conditions_v0_r on F, H, orthocenter(A, B, D), D we get 180 == 2 * direction(F, H) - 2 * direction(orthocenter(A, B, D), D) mod 360
By perpendicular_direction_conditions_v0_r on E, A, orthocenter(A, D, G), E we get 180 == 2 * direction(E, A) - 2 * direction(orthocenter(A, D, G), E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), G, A, midpoint(B, G) we get 180 == 2 * direction(orthocenter(A, B, D), G) - 2 * direction(A, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, I, orthocenter(A, D, G), G we get 180 == 2 * direction(D, I) - 2 * direction(orthocenter(A, D, G), G) mod 360
By projection_definition on orthocenter(A, D, G), E, g we get E == projection(orthocenter(A, D, G), g)
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), B, midpoint(B, G), A we get 180 == 2 * direction(orthocenter(A, D, G), B) - 2 * direction(midpoint(B, G), A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), E, E, C we get 180 == 2 * direction(orthocenter(A, D, G), E) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on A, C, orthocenter(A, D, G), D we get 180 == 2 * direction(A, C) - 2 * direction(orthocenter(A, D, G), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), G, D, A we get 180 == 2 * direction(orthocenter(A, D, G), G) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on A, D, orthocenter(A, B, D), G we get 180 == 2 * direction(A, D) - 2 * direction(orthocenter(A, B, D), G) mod 360
By perpendicular_direction_conditions_v0_r on C, G, orthocenter(A, D, G), E we get 180 == 2 * direction(C, G) - 2 * direction(orthocenter(A, D, G), E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), D, A, G we get 180 == 2 * direction(orthocenter(A, D, G), D) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on I, A, orthocenter(A, B, D), G we get 180 == 2 * direction(I, A) - 2 * direction(orthocenter(A, B, D), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), G, D, I we get 180 == 2 * direction(orthocenter(A, B, D), G) - 2 * direction(D, I) mod 360
By perpendicular_direction_conditions_v0_r on C, A, orthocenter(A, D, G), E we get 180 == 2 * direction(C, A) - 2 * direction(orthocenter(A, D, G), E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), D, C, G we get 180 == 2 * direction(orthocenter(A, D, G), D) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), G, D, A we get 180 == 2 * direction(orthocenter(A, B, D), G) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on A, D, orthocenter(A, D, G), G we get 180 == 2 * direction(A, D) - 2 * direction(orthocenter(A, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), B, D, A we get 180 == 2 * direction(orthocenter(A, B, D), B) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on A, C, orthocenter(A, D, G), E we get 180 == 2 * direction(A, C) - 2 * direction(orthocenter(A, D, G), E) mod 360
By perpendicular_direction_conditions_v0_r on I, A, orthocenter(A, D, G), B we get 180 == 2 * direction(I, A) - 2 * direction(orthocenter(A, D, G), B) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), G, D, midpoint(B, G) we get 180 == 2 * direction(orthocenter(A, B, D), G) - 2 * direction(D, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on F, A, orthocenter(A, B, D), F we get 180 == 2 * direction(F, A) - 2 * direction(orthocenter(A, B, D), F) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), D, F, B we get 180 == 2 * direction(orthocenter(A, B, D), D) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), D, orthocenter(A, D, G), B we get 180 == 2 * direction(midpoint(B, G), D) - 2 * direction(orthocenter(A, D, G), B) mod 360
By perpendicular_direction_conditions_v0_r on A, G, orthocenter(A, D, G), E we get 180 == 2 * direction(A, G) - 2 * direction(orthocenter(A, D, G), E) mod 360
By perpendicular_direction_conditions_v0_r on G, C, orthocenter(A, D, G), E we get 180 == 2 * direction(G, C) - 2 * direction(orthocenter(A, D, G), E) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(B, G), orthocenter(A, B, D), G we get 180 == 2 * direction(I, midpoint(B, G)) - 2 * direction(orthocenter(A, B, D), G) mod 360
By perpendicular_direction_conditions_v0_r on A, F, orthocenter(A, B, D), D we get 180 == 2 * direction(A, F) - 2 * direction(orthocenter(A, B, D), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), B, D, midpoint(B, G) we get 180 == 2 * direction(orthocenter(A, D, G), B) - 2 * direction(D, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), D, G, C we get 180 == 2 * direction(orthocenter(A, D, G), D) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on I, D, orthocenter(A, B, D), G we get 180 == 2 * direction(I, D) - 2 * direction(orthocenter(A, B, D), G) mod 360
By perpendicular_direction_conditions_v0_r on D, A, orthocenter(A, B, D), G we get 180 == 2 * direction(D, A) - 2 * direction(orthocenter(A, B, D), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), D, H, B we get 180 == 2 * direction(orthocenter(A, B, D), D) - 2 * direction(H, B) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), D, G, A we get 180 == 2 * direction(orthocenter(A, D, G), D) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), G, I, A we get 180 == 2 * direction(orthocenter(A, B, D), G) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), G, A, D we get 180 == 2 * direction(orthocenter(A, B, D), G) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), F, A, B we get 180 == 2 * direction(orthocenter(A, B, D), F) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on H, A, orthocenter(A, B, D), D we get 180 == 2 * direction(H, A) - 2 * direction(orthocenter(A, B, D), D) mod 360
By perpendicular_direction_conditions_v0_r on F, B, orthocenter(A, B, D), D we get 180 == 2 * direction(F, B) - 2 * direction(orthocenter(A, B, D), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), D, B, A we get 180 == 2 * direction(orthocenter(A, B, D), D) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), B, midpoint(B, G), D we get 180 == 2 * direction(orthocenter(A, B, D), B) - 2 * direction(midpoint(B, G), D) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(B, G), orthocenter(A, D, G), B we get 180 == 2 * direction(D, midpoint(B, G)) - 2 * direction(orthocenter(A, D, G), B) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), D, B, H we get 180 == 2 * direction(orthocenter(A, B, D), D) - 2 * direction(B, H) mod 360
By perpendicular_direction_conditions_v0_r on A, E, orthocenter(A, D, G), D we get 180 == 2 * direction(A, E) - 2 * direction(orthocenter(A, D, G), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), G, midpoint(B, G), A we get 180 == 2 * direction(orthocenter(A, B, D), G) - 2 * direction(midpoint(B, G), A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), E, A, C we get 180 == 2 * direction(orthocenter(A, D, G), E) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on E, C, orthocenter(A, D, G), D we get 180 == 2 * direction(E, C) - 2 * direction(orthocenter(A, D, G), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), F, F, A we get 180 == 2 * direction(orthocenter(A, B, D), F) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on G, A, orthocenter(A, D, G), E we get 180 == 2 * direction(G, A) - 2 * direction(orthocenter(A, D, G), E) mod 360
By perpendicular_direction_conditions_v0_r on C, G, orthocenter(A, D, G), D we get 180 == 2 * direction(C, G) - 2 * direction(orthocenter(A, D, G), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), B, I, A we get 180 == 2 * direction(orthocenter(A, B, D), B) - 2 * direction(I, A) mod 360
By projection_definition on orthocenter(A, B, D), F, f we get F == projection(orthocenter(A, B, D), f)
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), D, A, E we get 180 == 2 * direction(orthocenter(A, D, G), D) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), F, H, F we get 180 == 2 * direction(orthocenter(A, B, D), F) - 2 * direction(H, F) mod 360
By collinear_and_not_between_implies_orientation on projection(E, Line(C, D)), midpoint(B, G), G, B we get orientation(B, projection(E, Line(C, D)), G) == orientation(G, midpoint(B, G), projection(E, Line(C, D))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), E, G, C we get 180 == 2 * direction(orthocenter(A, D, G), E) - 2 * direction(G, C) mod 360
By collinear_and_not_between_implies_orientation on projection(F, Line(D, H)), G, B, midpoint(B, G) we get orientation(B, G, projection(F, Line(D, H))) == orientation(B, midpoint(B, G), projection(F, Line(D, H))) mod 360
By perpendicular_direction_conditions_v0_r on G, E, orthocenter(A, D, G), E we get 180 == 2 * direction(G, E) - 2 * direction(orthocenter(A, D, G), E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), B, D, midpoint(B, G) we get 180 == 2 * direction(orthocenter(A, B, D), B) - 2 * direction(D, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), D, B, F we get 180 == 2 * direction(orthocenter(A, B, D), D) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(B, G), orthocenter(A, B, D), B we get 180 == 2 * direction(D, midpoint(B, G)) - 2 * direction(orthocenter(A, B, D), B) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(B, G), orthocenter(A, D, G), B we get 180 == 2 * direction(I, midpoint(B, G)) - 2 * direction(orthocenter(A, D, G), B) mod 360
By perpendicular_direction_conditions_v0_r on I, D, orthocenter(A, B, D), B we get 180 == 2 * direction(I, D) - 2 * direction(orthocenter(A, B, D), B) mod 360
By collinear_and_not_between_implies_orientation on orthocenter(A, D, G), midpoint(B, G), G, B we get orientation(B, orthocenter(A, D, G), G) == orientation(G, midpoint(B, G), orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(B, G), orthocenter(A, B, D), B we get 180 == 2 * direction(I, midpoint(B, G)) - 2 * direction(orthocenter(A, B, D), B) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), D, F, H we get 180 == 2 * direction(orthocenter(A, B, D), D) - 2 * direction(F, H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), D, orthocenter(A, B, D), G we get 180 == 2 * direction(midpoint(B, G), D) - 2 * direction(orthocenter(A, B, D), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), B, midpoint(B, G), I we get 180 == 2 * direction(orthocenter(A, B, D), B) - 2 * direction(midpoint(B, G), I) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), G, I, midpoint(B, G) we get 180 == 2 * direction(orthocenter(A, D, G), G) - 2 * direction(I, midpoint(B, G)) mod 360
By between_implies_orientation on projection(F, Line(D, H)), B, midpoint(B, G), G we get orientation(B, midpoint(B, G), projection(F, Line(D, H))) == orientation(G, projection(F, Line(D, H)), midpoint(B, G)) mod 360, orientation(B, G, projection(F, Line(D, H))) == orientation(B, midpoint(B, G), projection(F, Line(D, H))) mod 360
By between_implies_orientation on projection(F, Line(D, H)), G, midpoint(B, G), B we get orientation(B, projection(F, Line(D, H)), midpoint(B, G)) == orientation(G, midpoint(B, G), projection(F, Line(D, H))) mod 360, orientation(B, projection(F, Line(D, H)), G) == orientation(G, midpoint(B, G), projection(F, Line(D, H))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), E, A, G we get 180 == 2 * direction(orthocenter(A, D, G), E) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), G, D, I we get 180 == 2 * direction(orthocenter(A, D, G), G) - 2 * direction(D, I) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), D, E, A we get 180 == 2 * direction(orthocenter(A, D, G), D) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on B, F, orthocenter(A, B, D), F we get 180 == 2 * direction(B, F) - 2 * direction(orthocenter(A, B, D), F) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), G, midpoint(B, G), D we get 180 == 2 * direction(orthocenter(A, D, G), G) - 2 * direction(midpoint(B, G), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), G, midpoint(B, G), I we get 180 == 2 * direction(orthocenter(A, D, G), G) - 2 * direction(midpoint(B, G), I) mod 360
By perpendicular_direction_conditions_v0_r on I, A, orthocenter(A, B, D), B we get 180 == 2 * direction(I, A) - 2 * direction(orthocenter(A, B, D), B) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(B, G), orthocenter(A, B, D), G we get 180 == 2 * direction(D, midpoint(B, G)) - 2 * direction(orthocenter(A, B, D), G) mod 360
By perpendicular_direction_conditions_v0_r on I, D, orthocenter(A, D, G), B we get 180 == 2 * direction(I, D) - 2 * direction(orthocenter(A, D, G), B) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), G, A, I we get 180 == 2 * direction(orthocenter(A, B, D), G) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), D, C, A we get 180 == 2 * direction(orthocenter(A, D, G), D) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), G, I, D we get 180 == 2 * direction(orthocenter(A, B, D), G) - 2 * direction(I, D) mod 360
By perpendicular_direction_conditions_v0_r on D, A, orthocenter(A, D, G), G we get 180 == 2 * direction(D, A) - 2 * direction(orthocenter(A, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on I, A, orthocenter(A, D, G), G we get 180 == 2 * direction(I, A) - 2 * direction(orthocenter(A, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), G, A, I we get 180 == 2 * direction(orthocenter(A, D, G), G) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on B, A, orthocenter(A, B, D), F we get 180 == 2 * direction(B, A) - 2 * direction(orthocenter(A, B, D), F) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), D, C, E we get 180 == 2 * direction(orthocenter(A, D, G), D) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), B, A, D we get 180 == 2 * direction(orthocenter(A, B, D), B) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), F, A, F we get 180 == 2 * direction(orthocenter(A, B, D), F) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on A, B, orthocenter(A, B, D), F we get 180 == 2 * direction(A, B) - 2 * direction(orthocenter(A, B, D), F) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), B, D, I we get 180 == 2 * direction(orthocenter(A, D, G), B) - 2 * direction(D, I) mod 360
By perpendicular_direction_conditions_v0_r on A, I, orthocenter(A, B, D), B we get 180 == 2 * direction(A, I) - 2 * direction(orthocenter(A, B, D), B) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), F, F, H we get 180 == 2 * direction(orthocenter(A, B, D), F) - 2 * direction(F, H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), D, H, F we get 180 == 2 * direction(orthocenter(A, B, D), D) - 2 * direction(H, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), A, orthocenter(A, D, G), B we get 180 == 2 * direction(midpoint(B, G), A) - 2 * direction(orthocenter(A, D, G), B) mod 360
By perpendicular_direction_conditions_v0_r on C, E, orthocenter(A, D, G), E we get 180 == 2 * direction(C, E) - 2 * direction(orthocenter(A, D, G), E) mod 360
By perpendicular_direction_conditions_v0_r on H, B, orthocenter(A, B, D), F we get 180 == 2 * direction(H, B) - 2 * direction(orthocenter(A, B, D), F) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), D, A, H we get 180 == 2 * direction(orthocenter(A, B, D), D) - 2 * direction(A, H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), B, A, D we get 180 == 2 * direction(orthocenter(A, D, G), B) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on C, A, orthocenter(A, D, G), D we get 180 == 2 * direction(C, A) - 2 * direction(orthocenter(A, D, G), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), B, I, D we get 180 == 2 * direction(orthocenter(A, B, D), B) - 2 * direction(I, D) mod 360
By perpendicular_direction_conditions_v0_r on A, H, orthocenter(A, B, D), D we get 180 == 2 * direction(A, H) - 2 * direction(orthocenter(A, B, D), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), E, G, A we get 180 == 2 * direction(orthocenter(A, D, G), E) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(B, G), orthocenter(A, B, D), B we get 180 == 2 * direction(A, midpoint(B, G)) - 2 * direction(orthocenter(A, B, D), B) mod 360
By perpendicular_direction_conditions_v0_r on H, F, orthocenter(A, B, D), F we get 180 == 2 * direction(H, F) - 2 * direction(orthocenter(A, B, D), F) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), B, A, midpoint(B, G) we get 180 == 2 * direction(orthocenter(A, B, D), B) - 2 * direction(A, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, C, orthocenter(A, D, G), D we get 180 == 2 * direction(G, C) - 2 * direction(orthocenter(A, D, G), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), B, A, I we get 180 == 2 * direction(orthocenter(A, D, G), B) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on D, I, orthocenter(A, B, D), B we get 180 == 2 * direction(D, I) - 2 * direction(orthocenter(A, B, D), B) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), F, H, B we get 180 == 2 * direction(orthocenter(A, B, D), F) - 2 * direction(H, B) mod 360
By perpendicular_direction_conditions_v0_r on E, G, orthocenter(A, D, G), E we get 180 == 2 * direction(E, G) - 2 * direction(orthocenter(A, D, G), E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), F, B, F we get 180 == 2 * direction(orthocenter(A, B, D), F) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), B, I, midpoint(B, G) we get 180 == 2 * direction(orthocenter(A, D, G), B) - 2 * direction(I, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, I, orthocenter(A, D, G), G we get 180 == 2 * direction(A, I) - 2 * direction(orthocenter(A, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), E, A, E we get 180 == 2 * direction(orthocenter(A, D, G), E) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), G, I, midpoint(B, G) we get 180 == 2 * direction(orthocenter(A, B, D), G) - 2 * direction(I, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), I, orthocenter(A, B, D), B we get 180 == 2 * direction(midpoint(B, G), I) - 2 * direction(orthocenter(A, B, D), B) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), F, B, H we get 180 == 2 * direction(orthocenter(A, B, D), F) - 2 * direction(B, H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), I, orthocenter(A, D, G), G we get 180 == 2 * direction(midpoint(B, G), I) - 2 * direction(orthocenter(A, D, G), G) mod 360
By between_implies_orientation on orthocenter(A, D, G), B, midpoint(B, G), G we get orientation(B, midpoint(B, G), orthocenter(A, D, G)) == orientation(G, orthocenter(A, D, G), midpoint(B, G)) mod 360, orientation(B, G, orthocenter(A, D, G)) == orientation(B, midpoint(B, G), orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), B, A, midpoint(B, G) we get 180 == 2 * direction(orthocenter(A, D, G), B) - 2 * direction(A, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), D, G, E we get 180 == 2 * direction(orthocenter(A, D, G), D) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on D, I, orthocenter(A, B, D), G we get 180 == 2 * direction(D, I) - 2 * direction(orthocenter(A, B, D), G) mod 360
By perpendicular_direction_conditions_v0_r on A, G, orthocenter(A, D, G), D we get 180 == 2 * direction(A, G) - 2 * direction(orthocenter(A, D, G), D) mod 360
By perpendicular_direction_conditions_v0_r on A, I, orthocenter(A, D, G), B we get 180 == 2 * direction(A, I) - 2 * direction(orthocenter(A, D, G), B) mod 360
By between_implies_orientation on orthocenter(A, B, D), G, midpoint(B, G), B we get orientation(B, orthocenter(A, B, D), midpoint(B, G)) == orientation(G, midpoint(B, G), orthocenter(A, B, D)) mod 360, orientation(B, orthocenter(A, B, D), G) == orientation(G, midpoint(B, G), orthocenter(A, B, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(B, G), orthocenter(A, D, G), G we get 180 == 2 * direction(D, midpoint(B, G)) - 2 * direction(orthocenter(A, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), G, A, midpoint(B, G) we get 180 == 2 * direction(orthocenter(A, D, G), G) - 2 * direction(A, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, A, orthocenter(A, B, D), B we get 180 == 2 * direction(D, A) - 2 * direction(orthocenter(A, B, D), B) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), D, F, A we get 180 == 2 * direction(orthocenter(A, B, D), D) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), E, C, G we get 180 == 2 * direction(orthocenter(A, D, G), E) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on H, B, orthocenter(A, B, D), D we get 180 == 2 * direction(H, B) - 2 * direction(orthocenter(A, B, D), D) mod 360
By perpendicular_direction_conditions_v0_r on E, C, orthocenter(A, D, G), E we get 180 == 2 * direction(E, C) - 2 * direction(orthocenter(A, D, G), E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), E, G, E we get 180 == 2 * direction(orthocenter(A, D, G), E) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on F, H, orthocenter(A, B, D), F we get 180 == 2 * direction(F, H) - 2 * direction(orthocenter(A, B, D), F) mod 360
By perpendicular_direction_conditions_v0_r on B, A, orthocenter(A, B, D), D we get 180 == 2 * direction(B, A) - 2 * direction(orthocenter(A, B, D), D) mod 360
By perpendicular_direction_conditions_v0_r on D, A, orthocenter(A, D, G), B we get 180 == 2 * direction(D, A) - 2 * direction(orthocenter(A, D, G), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), I, orthocenter(A, D, G), B we get 180 == 2 * direction(midpoint(B, G), I) - 2 * direction(orthocenter(A, D, G), B) mod 360
By between_implies_orientation on projection(E, Line(C, D)), G, midpoint(B, G), B we get orientation(B, projection(E, Line(C, D)), midpoint(B, G)) == orientation(G, midpoint(B, G), projection(E, Line(C, D))) mod 360, orientation(B, projection(E, Line(C, D)), G) == orientation(G, midpoint(B, G), projection(E, Line(C, D))) mod 360
By between_implies_orientation on projection(E, Line(C, D)), B, midpoint(B, G), G we get orientation(B, midpoint(B, G), projection(E, Line(C, D))) == orientation(G, projection(E, Line(C, D)), midpoint(B, G)) mod 360, orientation(B, G, projection(E, Line(C, D))) == orientation(B, midpoint(B, G), projection(E, Line(C, D))) mod 360
By perpendicular_direction_conditions_v0_r on B, F, orthocenter(A, B, D), D we get 180 == 2 * direction(B, F) - 2 * direction(orthocenter(A, B, D), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), B, I, midpoint(B, G) we get 180 == 2 * direction(orthocenter(A, B, D), B) - 2 * direction(I, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), B, D, A we get 180 == 2 * direction(orthocenter(A, D, G), B) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), G, I, D we get 180 == 2 * direction(orthocenter(A, D, G), G) - 2 * direction(I, D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), D, A, F we get 180 == 2 * direction(orthocenter(A, B, D), D) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), F, A, H we get 180 == 2 * direction(orthocenter(A, B, D), F) - 2 * direction(A, H) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), E, C, A we get 180 == 2 * direction(orthocenter(A, D, G), E) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), B, I, A we get 180 == 2 * direction(orthocenter(A, D, G), B) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on C, E, orthocenter(A, D, G), D we get 180 == 2 * direction(C, E) - 2 * direction(orthocenter(A, D, G), D) mod 360
By between_implies_orientation on orthocenter(A, D, G), G, midpoint(B, G), B we get orientation(B, orthocenter(A, D, G), midpoint(B, G)) == orientation(G, midpoint(B, G), orthocenter(A, D, G)) mod 360, orientation(B, orthocenter(A, D, G), G) == orientation(G, midpoint(B, G), orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, I, orthocenter(A, B, D), G we get 180 == 2 * direction(A, I) - 2 * direction(orthocenter(A, B, D), G) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(B, G), orthocenter(A, D, G), G we get 180 == 2 * direction(I, midpoint(B, G)) - 2 * direction(orthocenter(A, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), F, H, A we get 180 == 2 * direction(orthocenter(A, B, D), F) - 2 * direction(H, A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), D, E, C we get 180 == 2 * direction(orthocenter(A, D, G), D) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), B, A, I we get 180 == 2 * direction(orthocenter(A, B, D), B) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on E, A, orthocenter(A, D, G), D we get 180 == 2 * direction(E, A) - 2 * direction(orthocenter(A, D, G), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), E, C, E we get 180 == 2 * direction(orthocenter(A, D, G), E) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), F, F, B we get 180 == 2 * direction(orthocenter(A, B, D), F) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on H, A, orthocenter(A, B, D), F we get 180 == 2 * direction(H, A) - 2 * direction(orthocenter(A, B, D), F) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), G, A, D we get 180 == 2 * direction(orthocenter(A, D, G), G) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), D, orthocenter(A, D, G), G we get 180 == 2 * direction(midpoint(B, G), D) - 2 * direction(orthocenter(A, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on A, H, orthocenter(A, B, D), F we get 180 == 2 * direction(A, H) - 2 * direction(orthocenter(A, B, D), F) mod 360
By perpendicular_direction_conditions_v0_r on A, D, orthocenter(A, D, G), B we get 180 == 2 * direction(A, D) - 2 * direction(orthocenter(A, D, G), B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), D, orthocenter(A, B, D), B we get 180 == 2 * direction(midpoint(B, G), D) - 2 * direction(orthocenter(A, B, D), B) mod 360
By different_points_v1 on orthocenter(A, B, D), B we get 0 != distance(B, orthocenter(A, B, D))
By different_points_v1 on orthocenter(A, B, D), A we get 0 != distance(A, orthocenter(A, B, D))
By different_points_v1 on orthocenter(A, D, G), G we get 0 != distance(G, orthocenter(A, D, G))
By different_points_v1 on orthocenter(A, D, G), A we get 0 != distance(A, orthocenter(A, D, G))
By different_points_v1 on orthocenter(A, D, G), D we get 0 != distance(D, orthocenter(A, D, G))
By different_points_v1 on F, orthocenter(A, B, D) we get 0 != distance(F, orthocenter(A, B, D))
By different_points_v1 on B, orthocenter(A, D, G) we get 0 != distance(B, orthocenter(A, D, G))
By different_points_v1 on G, orthocenter(A, B, D) we get 0 != distance(G, orthocenter(A, B, D))
By different_points_v1 on orthocenter(A, D, G), E we get 0 != distance(E, orthocenter(A, D, G))
By different_points_v1 on orthocenter(A, B, D), D we get 0 != distance(D, orthocenter(A, B, D))
By not_in_line_equivalent_to_not_collinear_v0 on C, E, orthocenter(A, D, G) we get not_collinear(C, E, orthocenter(A, D, G)), exists(Line(E, orthocenter(A, D, G)))
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, D, G), G, D we get 180 == 2 * direction(A, orthocenter(A, D, G)) - 2 * direction(G, D) mod 360
By orthocenter_concurrency on A, G, midpoint(B, G) we get orthocenter(A, G, midpoint(B, G)) in altitude(A, G, midpoint(B, G)), orthocenter(A, G, midpoint(B, G)) in altitude(G, A, midpoint(B, G)), orthocenter(A, G, midpoint(B, G)) in altitude(midpoint(B, G), A, G)
By orthocenter_concurrency on A, B, midpoint(B, G) we get orthocenter(A, B, midpoint(B, G)) in altitude(A, B, midpoint(B, G)), orthocenter(A, B, midpoint(B, G)) in altitude(B, A, midpoint(B, G)), orthocenter(A, B, midpoint(B, G)) in altitude(midpoint(B, G), A, B)
By in_imply_collinear on orthocenter(A, D, G), B, orthocenter(A, B, D) we get collinear(B, orthocenter(A, B, D), orthocenter(A, D, G))
By orthocenter_concurrency on I, G, midpoint(B, G) we get orthocenter(G, I, midpoint(B, G)) in altitude(I, G, midpoint(B, G)), orthocenter(G, I, midpoint(B, G)) in altitude(G, I, midpoint(B, G)), orthocenter(G, I, midpoint(B, G)) in altitude(midpoint(B, G), G, I)
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), A, D, G we get 180 == 2 * direction(orthocenter(A, D, G), A) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on G, D, A, orthocenter(A, D, G) we get 180 == 2 * direction(G, D) - 2 * direction(A, orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, G, orthocenter(A, D, G), A we get 180 == 2 * direction(D, G) - 2 * direction(orthocenter(A, D, G), A) mod 360
By perpendicular_direction_conditions_v0_r on B, D, A, orthocenter(A, B, D) we get 180 == 2 * direction(B, D) - 2 * direction(A, orthocenter(A, B, D)) mod 360
By orthocenter_concurrency on D, B, midpoint(B, G) we get orthocenter(B, D, midpoint(B, G)) in altitude(D, B, midpoint(B, G)), orthocenter(B, D, midpoint(B, G)) in altitude(B, D, midpoint(B, G)), orthocenter(B, D, midpoint(B, G)) in altitude(midpoint(B, G), B, D)
By perpendicular_direction_conditions_v0_r on D, G, A, orthocenter(A, D, G) we get 180 == 2 * direction(D, G) - 2 * direction(A, orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), A, B, D we get 180 == 2 * direction(orthocenter(A, B, D), A) - 2 * direction(B, D) mod 360
By orthocenter_concurrency on B, I, midpoint(B, G) we get orthocenter(B, I, midpoint(B, G)) in altitude(B, I, midpoint(B, G)), orthocenter(B, I, midpoint(B, G)) in altitude(I, B, midpoint(B, G)), orthocenter(B, I, midpoint(B, G)) in altitude(midpoint(B, G), B, I)
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), A, D, B we get 180 == 2 * direction(orthocenter(A, B, D), A) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, D, G), D, G we get 180 == 2 * direction(A, orthocenter(A, D, G)) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), A, G, D we get 180 == 2 * direction(orthocenter(A, D, G), A) - 2 * direction(G, D) mod 360
By in_imply_collinear on orthocenter(A, D, G), orthocenter(A, B, D), G we get collinear(G, orthocenter(A, B, D), orthocenter(A, D, G))
By orthocenter_concurrency on D, G, midpoint(B, G) we get orthocenter(D, G, midpoint(B, G)) in altitude(D, G, midpoint(B, G)), orthocenter(D, G, midpoint(B, G)) in altitude(G, D, midpoint(B, G)), orthocenter(D, G, midpoint(B, G)) in altitude(midpoint(B, G), D, G)
By perpendicular_direction_conditions_v0_r on D, B, orthocenter(A, B, D), A we get 180 == 2 * direction(D, B) - 2 * direction(orthocenter(A, B, D), A) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, B, D), B, D we get 180 == 2 * direction(A, orthocenter(A, B, D)) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on B, D, orthocenter(A, B, D), A we get 180 == 2 * direction(B, D) - 2 * direction(orthocenter(A, B, D), A) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, B, D), D, B we get 180 == 2 * direction(A, orthocenter(A, B, D)) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on G, D, orthocenter(A, D, G), A we get 180 == 2 * direction(G, D) - 2 * direction(orthocenter(A, D, G), A) mod 360
By perpendicular_direction_conditions_v0_r on D, B, A, orthocenter(A, B, D) we get 180 == 2 * direction(D, B) - 2 * direction(A, orthocenter(A, B, D)) mod 360
By directions_draw_angle on orthocenter(A, B, D), D, G we get exists(angle(orthocenter(A, B, D), D, G))
By not_in_line_equivalent_to_not_collinear_v0 on F, orthocenter(A, D, G), B we get not_collinear(B, F, orthocenter(A, D, G)), exists(Line(B, orthocenter(A, D, G)))
By directions_draw_angle on orthocenter(A, D, G), B, F we get exists(angle(orthocenter(A, D, G), B, F))
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, B, D), D, E we get not_collinear(D, E, orthocenter(A, B, D)), exists(Line(D, E))
By directions_draw_angle on C, B, orthocenter(A, B, D) we get exists(angle(C, B, orthocenter(A, B, D)))
By reverse_direction on orthocenter(A, D, G), D we get 180 == direction(orthocenter(A, D, G), D) - direction(D, orthocenter(A, D, G)) mod 360
By external_angle_bisector_definition_v0 on C, orthocenter(A, D, G), C, E we get 180 == angle(C, E, orthocenter(A, D, G)) + angle(C, E, orthocenter(A, D, G)) mod 360
By internal_angle_bisector_definition_v0 on A, orthocenter(A, D, G), G, E we get angle(A, E, orthocenter(A, D, G)) == angle(orthocenter(A, D, G), E, G) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on A, B, orthocenter(A, B, D) we get not_collinear(A, B, orthocenter(A, B, D)), exists(Line(B, orthocenter(A, B, D)))
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, B, D), H, B we get not_collinear(B, H, orthocenter(A, B, D)), exists(Line(B, H))
By directions_draw_angle on projection(E, h), E, orthocenter(A, D, G) we get exists(angle(projection(E, h), E, orthocenter(A, D, G)))
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, B, D), E, A we get not_collinear(A, E, orthocenter(A, B, D)), exists(Line(A, E))
By in_imply_collinear on line_intersection(i, altitude(A, B, D)), A, orthocenter(A, B, D) we get collinear(A, orthocenter(A, B, D), line_intersection(i, altitude(A, B, D)))
By not_in_line_equivalent_to_not_collinear_v0 on G, D, orthocenter(A, D, G) we get not_collinear(D, G, orthocenter(A, D, G)), exists(Line(D, orthocenter(A, D, G)))
By not_in_line_equivalent_to_not_collinear_v0 on D, B, orthocenter(A, D, G) we get not_collinear(B, D, orthocenter(A, D, G)), exists(Line(B, orthocenter(A, D, G)))
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, D, G), G, E we get not_collinear(E, G, orthocenter(A, D, G)), exists(Line(E, G))
By in_imply_collinear on line_intersection(Line(D, G), altitude(A, D, G)), orthocenter(A, D, G), A we get collinear(A, orthocenter(A, D, G), line_intersection(Line(D, G), altitude(A, D, G)))
By reverse_direction on F, orthocenter(A, B, D) we get 180 == direction(F, orthocenter(A, B, D)) - direction(orthocenter(A, B, D), F) mod 360
By directions_draw_angle on A, D, orthocenter(A, B, D) we get exists(angle(A, D, orthocenter(A, B, D)))
By line_inequality on Line(B, projection(E, h)), altitude(A, B, D), B we get altitude(A, B, D) != Line(B, projection(E, h))
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, D, G), F, D we get not_collinear(D, F, orthocenter(A, D, G)), exists(Line(D, F))
By line_inequality on Line(B, projection(E, h)), altitude(A, D, G), B we get altitude(A, D, G) != Line(B, projection(E, h))
By not_in_line_equivalent_to_not_collinear_v0 on I, B, orthocenter(A, B, D) we get not_collinear(B, I, orthocenter(A, B, D)), exists(Line(B, orthocenter(A, B, D)))
By reverse_direction on B, orthocenter(A, B, D) we get 180 == direction(B, orthocenter(A, B, D)) - direction(orthocenter(A, B, D), B) mod 360
By directions_draw_angle on H, F, orthocenter(A, B, D) we get exists(angle(H, F, orthocenter(A, B, D)))
By external_angle_bisector_definition_v0 on G, orthocenter(A, D, G), G, E we get 180 == angle(G, E, orthocenter(A, D, G)) + angle(G, E, orthocenter(A, D, G)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(B, G), D, orthocenter(A, D, G) we get not_collinear(D, midpoint(B, G), orthocenter(A, D, G)), exists(Line(D, orthocenter(A, D, G)))
By external_angle_bisector_definition_v0 on G, orthocenter(A, D, G), C, E we get 180 == angle(G, E, orthocenter(A, D, G)) + angle(C, E, orthocenter(A, D, G)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on C, G, orthocenter(A, B, D) we get not_collinear(C, G, orthocenter(A, B, D)), exists(Line(G, orthocenter(A, B, D)))
By directions_draw_angle on orthocenter(A, D, G), E, G we get exists(angle(orthocenter(A, D, G), E, G))
By directions_draw_angle on B, projection(E, h), E we get exists(angle(B, projection(E, h), E))
By directions_draw_angle on orthocenter(A, D, G), G, C we get exists(angle(orthocenter(A, D, G), G, C))
By directions_draw_angle on orthocenter(A, B, D), B, projection(E, h) we get exists(angle(orthocenter(A, B, D), B, projection(E, h)))
By perpendicular_angle_conditions_v0 on C, E, orthocenter(A, D, G) we get angle(C, E, orthocenter(A, D, G)) == orientation(C, E, orthocenter(A, D, G)) mod 360
By directions_draw_angle on C, F, orthocenter(A, B, D) we get exists(angle(C, F, orthocenter(A, B, D)))
By directions_draw_angle on B, projection(E, h), G we get exists(angle(B, projection(E, h), G))
By not_in_line_equivalent_to_not_collinear_v0 on H, orthocenter(A, D, G), E we get not_collinear(E, H, orthocenter(A, D, G)), exists(Line(E, orthocenter(A, D, G)))
By line_containment_inequality on line_intersection(Line(D, G), altitude(A, D, G)), orthocenter(A, B, D), Line(D, G) we get orthocenter(A, B, D) != line_intersection(Line(D, G), altitude(A, D, G))
By not_in_line_equivalent_to_not_collinear_v0 on D, orthocenter(A, D, G), A we get not_collinear(A, D, orthocenter(A, D, G)), exists(Line(A, orthocenter(A, D, G)))
By not_in_line_equivalent_to_not_collinear_v0 on I, F, orthocenter(A, B, D) we get not_collinear(F, I, orthocenter(A, B, D)), exists(Line(F, orthocenter(A, B, D)))
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, D, G), I, G we get not_collinear(G, I, orthocenter(A, D, G)), exists(Line(G, I))
By directions_draw_angle on I, B, orthocenter(A, D, G) we get exists(angle(I, B, orthocenter(A, D, G)))
By directions_draw_angle on orthocenter(A, D, G), E, F we get exists(angle(orthocenter(A, D, G), E, F))
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, D, G), D, I we get not_collinear(D, I, orthocenter(A, D, G)), exists(Line(D, I))
By directions_draw_angle on orthocenter(A, B, D), F, E we get exists(angle(orthocenter(A, B, D), F, E))
By not_in_line_equivalent_to_not_collinear_v0 on A, G, orthocenter(A, D, G) we get not_collinear(A, G, orthocenter(A, D, G)), exists(Line(G, orthocenter(A, D, G)))
By internal_angle_bisector_definition_v0 on G, orthocenter(A, D, G), A, E we get angle(G, E, orthocenter(A, D, G)) == angle(orthocenter(A, D, G), E, A) mod 360
By reverse_direction on orthocenter(A, B, D), D we get 180 == direction(orthocenter(A, B, D), D) - direction(D, orthocenter(A, B, D)) mod 360
By directions_draw_angle on F, projection(F, h), G we get exists(angle(F, projection(F, h), G))
By reverse_direction on orthocenter(A, B, D), G we get 180 == direction(orthocenter(A, B, D), G) - direction(G, orthocenter(A, B, D)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, D, G), A, H we get not_collinear(A, H, orthocenter(A, D, G)), exists(Line(A, H))
By not_in_line_equivalent_to_not_collinear_v0 on E, orthocenter(A, D, G), B we get not_collinear(B, E, orthocenter(A, D, G)), exists(Line(B, orthocenter(A, D, G)))
By directions_draw_angle on G, D, orthocenter(A, D, G) we get exists(angle(G, D, orthocenter(A, D, G)))
By not_in_line_equivalent_to_not_collinear_v0 on H, B, orthocenter(A, D, G) we get not_collinear(B, H, orthocenter(A, D, G)), exists(Line(B, orthocenter(A, D, G)))
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, B, D), A, F we get not_collinear(A, F, orthocenter(A, B, D)), exists(Line(A, F))
By internal_angle_bisector_definition_v0 on B, orthocenter(A, B, D), A, F we get angle(B, F, orthocenter(A, B, D)) == angle(orthocenter(A, B, D), F, A) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, B, D), H, A we get not_collinear(A, H, orthocenter(A, B, D)), exists(Line(A, H))
By not_in_line_equivalent_to_not_collinear_v0 on C, G, orthocenter(A, D, G) we get not_collinear(C, G, orthocenter(A, D, G)), exists(Line(G, orthocenter(A, D, G)))
By not_in_line_equivalent_to_not_collinear_v0 on H, G, orthocenter(A, D, G) we get not_collinear(G, H, orthocenter(A, D, G)), exists(Line(G, orthocenter(A, D, G)))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(B, G), F, orthocenter(A, B, D) we get not_collinear(F, midpoint(B, G), orthocenter(A, B, D)), exists(Line(F, orthocenter(A, B, D)))
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, B, D), D, midpoint(B, G) we get not_collinear(D, midpoint(B, G), orthocenter(A, B, D)), exists(Line(D, midpoint(B, G)))
By line_containment_inequality on projection(F, i), orthocenter(A, D, G), i we get projection(F, i) != orthocenter(A, D, G)
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, B, D), C, A we get not_collinear(A, C, orthocenter(A, B, D)), exists(Line(A, C))
By reverse_direction on orthocenter(A, D, G), G we get 180 == direction(orthocenter(A, D, G), G) - direction(G, orthocenter(A, D, G)) mod 360
By directions_draw_angle on projection(F, h), G, orthocenter(A, D, G) we get exists(angle(projection(F, h), G, orthocenter(A, D, G)))
By directions_draw_angle on orthocenter(A, D, G), B, orthocenter(A, B, D) we get exists(angle(orthocenter(A, D, G), B, orthocenter(A, B, D)))
By directions_draw_angle on projection(F, h), G, orthocenter(A, B, D) we get exists(angle(projection(F, h), G, orthocenter(A, B, D)))
By reverse_direction on G, orthocenter(A, D, G) we get 180 == direction(G, orthocenter(A, D, G)) - direction(orthocenter(A, D, G), G) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on C, orthocenter(A, D, G), D we get not_collinear(C, D, orthocenter(A, D, G)), exists(Line(D, orthocenter(A, D, G)))
By directions_draw_angle on C, E, orthocenter(A, D, G) we get exists(angle(C, E, orthocenter(A, D, G)))
By directions_draw_angle on F, D, orthocenter(A, D, G) we get exists(angle(F, D, orthocenter(A, D, G)))
By internal_angle_bisector_definition_v0 on C, orthocenter(A, D, G), A, E we get angle(C, E, orthocenter(A, D, G)) == angle(orthocenter(A, D, G), E, A) mod 360
By directions_draw_angle on projection(F, Line(D, H)), F, orthocenter(A, B, D) we get exists(angle(projection(F, Line(D, H)), F, orthocenter(A, B, D)))
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, D, G), A, E we get not_collinear(A, E, orthocenter(A, D, G)), exists(Line(A, E))
By directions_draw_angle on G, orthocenter(A, B, D), F we get exists(angle(G, orthocenter(A, B, D), F))
By not_in_line_equivalent_to_not_collinear_v0 on D, orthocenter(A, B, D), G we get not_collinear(D, G, orthocenter(A, B, D)), exists(Line(G, orthocenter(A, B, D)))
By directions_draw_angle on D, B, orthocenter(A, B, D) we get exists(angle(D, B, orthocenter(A, B, D)))
By directions_draw_angle on orthocenter(A, B, D), D, midpoint(B, G) we get exists(angle(orthocenter(A, B, D), D, midpoint(B, G)))
By directions_draw_angle on center(c), E, orthocenter(A, D, G) we get exists(angle(center(c), E, orthocenter(A, D, G)))
By directions_draw_angle on orthocenter(A, D, G), B, C we get exists(angle(orthocenter(A, D, G), B, C))
By reverse_direction on orthocenter(A, B, D), F we get 180 == direction(orthocenter(A, B, D), F) - direction(F, orthocenter(A, B, D)) mod 360
By external_angle_bisector_definition_v0 on A, orthocenter(A, D, G), A, E we get 180 == angle(A, E, orthocenter(A, D, G)) + angle(A, E, orthocenter(A, D, G)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, B, D), orthocenter(A, D, G), E we get not_collinear(E, orthocenter(A, B, D), orthocenter(A, D, G)), exists(Line(E, orthocenter(A, D, G)))
By internal_angle_bisector_definition_v0 on A, orthocenter(A, B, D), B, F we get angle(A, F, orthocenter(A, B, D)) == angle(orthocenter(A, B, D), F, B) mod 360
By directions_draw_angle on orthocenter(A, D, G), B, projection(F, h) we get exists(angle(orthocenter(A, D, G), B, projection(F, h)))
By perpendicular_angle_conditions_v0 on A, E, orthocenter(A, D, G) we get angle(A, E, orthocenter(A, D, G)) == orientation(A, E, orthocenter(A, D, G)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, B, D), B, C we get not_collinear(B, C, orthocenter(A, B, D)), exists(Line(B, C))
By directions_draw_angle on orthocenter(A, D, G), G, E we get exists(angle(orthocenter(A, D, G), G, E))
By not_in_line_equivalent_to_not_collinear_v0 on D, orthocenter(A, B, D), B we get not_collinear(B, D, orthocenter(A, B, D)), exists(Line(B, orthocenter(A, B, D)))
By internal_angle_bisector_definition_v0 on A, orthocenter(A, D, G), C, E we get angle(A, E, orthocenter(A, D, G)) == angle(orthocenter(A, D, G), E, C) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, D, G), D, orthocenter(A, B, D) we get not_collinear(D, orthocenter(A, B, D), orthocenter(A, D, G)), exists(Line(D, orthocenter(A, B, D)))
By directions_draw_angle on projection(E, h), B, orthocenter(A, D, G) we get exists(angle(projection(E, h), B, orthocenter(A, D, G)))
By line_inequality on altitude(A, B, D), h, orthocenter(A, B, D) we get h != altitude(A, B, D)
By not_in_line_equivalent_to_not_collinear_v0 on E, orthocenter(A, B, D), B we get not_collinear(B, E, orthocenter(A, B, D)), exists(Line(B, orthocenter(A, B, D)))
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, D, G), B, A we get not_collinear(A, B, orthocenter(A, D, G)), exists(Line(A, B))
By directions_draw_angle on E, projection(E, h), B we get exists(angle(E, projection(E, h), B))
By not_in_line_equivalent_to_not_collinear_v0 on F, B, orthocenter(A, B, D) we get not_collinear(B, F, orthocenter(A, B, D)), exists(Line(B, orthocenter(A, B, D)))
By directions_draw_angle on I, G, orthocenter(A, B, D) we get exists(angle(I, G, orthocenter(A, B, D)))
By directions_draw_angle on orthocenter(A, B, D), F, C we get exists(angle(orthocenter(A, B, D), F, C))
By not_in_line_equivalent_to_not_collinear_v0 on D, orthocenter(A, B, D), A we get not_collinear(A, D, orthocenter(A, B, D)), exists(Line(A, orthocenter(A, B, D)))
By directions_draw_angle on orthocenter(A, B, D), B, C we get exists(angle(orthocenter(A, B, D), B, C))
By directions_draw_angle on projection(F, i), F, orthocenter(A, B, D) we get exists(angle(projection(F, i), F, orthocenter(A, B, D)))
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, D, G), A, I we get not_collinear(A, I, orthocenter(A, D, G)), exists(Line(A, I))
By directions_draw_angle on orthocenter(A, D, G), B, I we get exists(angle(orthocenter(A, D, G), B, I))
By directions_draw_angle on G, projection(F, h), B we get exists(angle(G, projection(F, h), B))
By reverse_direction on D, orthocenter(A, D, G) we get 180 == direction(D, orthocenter(A, D, G)) - direction(orthocenter(A, D, G), D) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, B, D), D, I we get not_collinear(D, I, orthocenter(A, B, D)), exists(Line(D, I))
By directions_draw_angle on C, B, orthocenter(A, D, G) we get exists(angle(C, B, orthocenter(A, D, G)))
By line_containment_inequality on projection(E, h), orthocenter(A, B, D), h we get projection(E, h) != orthocenter(A, B, D)
By directions_draw_angle on orthocenter(A, B, D), G, projection(F, h) we get exists(angle(orthocenter(A, B, D), G, projection(F, h)))
By not_in_line_equivalent_to_not_collinear_v0 on H, orthocenter(A, B, D), G we get not_collinear(G, H, orthocenter(A, B, D)), exists(Line(G, orthocenter(A, B, D)))
By line_inequality on Line(G, projection(E, h)), altitude(A, B, D), G we get altitude(A, B, D) != Line(G, projection(E, h))
By reverse_direction on G, orthocenter(A, B, D) we get 180 == direction(G, orthocenter(A, B, D)) - direction(orthocenter(A, B, D), G) mod 360
By external_angle_bisector_definition_v0 on B, orthocenter(A, B, D), H, F we get 180 == angle(B, F, orthocenter(A, B, D)) + angle(H, F, orthocenter(A, B, D)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, B, D), I, G we get not_collinear(G, I, orthocenter(A, B, D)), exists(Line(G, I))
By directions_draw_angle on E, orthocenter(A, D, G), G we get exists(angle(E, orthocenter(A, D, G), G))
By external_angle_bisector_definition_v0 on A, orthocenter(A, B, D), A, F we get 180 == angle(A, F, orthocenter(A, B, D)) + angle(A, F, orthocenter(A, B, D)) mod 360
By directions_draw_angle on A, B, orthocenter(A, D, G) we get exists(angle(A, B, orthocenter(A, D, G)))
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, D, G), A, midpoint(B, G) we get not_collinear(A, midpoint(B, G), orthocenter(A, D, G)), exists(Line(A, midpoint(B, G)))
By directions_draw_angle on orthocenter(A, B, D), F, H we get exists(angle(orthocenter(A, B, D), F, H))
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, D, G), B, I we get not_collinear(B, I, orthocenter(A, D, G)), exists(Line(B, I))
By directions_draw_angle on F, orthocenter(A, B, D), G we get exists(angle(F, orthocenter(A, B, D), G))
By directions_draw_angle on G, orthocenter(A, D, G), D we get exists(angle(G, orthocenter(A, D, G), D))
By directions_draw_angle on orthocenter(A, D, G), D, C we get exists(angle(orthocenter(A, D, G), D, C))
By perpendicular_angle_conditions_v0 on orthocenter(A, D, G), E, A we get angle(orthocenter(A, D, G), E, A) == orientation(A, orthocenter(A, D, G), E) mod 360
By reverse_direction on D, orthocenter(A, B, D) we get 180 == direction(D, orthocenter(A, B, D)) - direction(orthocenter(A, B, D), D) mod 360
By line_inequality on Line(G, projection(F, h)), altitude(A, B, D), G we get altitude(A, B, D) != Line(G, projection(F, h))
By not_in_line_equivalent_to_not_collinear_v0 on C, orthocenter(A, D, G), B we get not_collinear(B, C, orthocenter(A, D, G)), exists(Line(B, orthocenter(A, D, G)))
By directions_draw_angle on orthocenter(A, D, G), D, B we get exists(angle(orthocenter(A, D, G), D, B))
By perpendicular_angle_conditions_v0 on orthocenter(A, B, D), F, A we get angle(orthocenter(A, B, D), F, A) == orientation(A, orthocenter(A, B, D), F) mod 360
By perpendicular_angle_conditions_v0 on H, F, orthocenter(A, B, D) we get angle(H, F, orthocenter(A, B, D)) == orientation(F, orthocenter(A, B, D), H) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on A, G, orthocenter(A, B, D) we get not_collinear(A, G, orthocenter(A, B, D)), exists(Line(G, orthocenter(A, B, D)))
By directions_draw_angle on B, orthocenter(A, D, G), E we get exists(angle(B, orthocenter(A, D, G), E))
By perpendicular_angle_conditions_v0 on A, F, orthocenter(A, B, D) we get angle(A, F, orthocenter(A, B, D)) == orientation(A, F, orthocenter(A, B, D)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on E, orthocenter(A, B, D), F we get not_collinear(E, F, orthocenter(A, B, D)), exists(Line(F, orthocenter(A, B, D)))
By directions_draw_angle on H, B, orthocenter(A, D, G) we get exists(angle(H, B, orthocenter(A, D, G)))
By directions_draw_angle on orthocenter(A, D, G), E, C we get exists(angle(orthocenter(A, D, G), E, C))
By reverse_direction on orthocenter(A, D, G), B we get 180 == direction(orthocenter(A, D, G), B) - direction(B, orthocenter(A, D, G)) mod 360
By line_inequality on h, altitude(A, D, G), D we get h != altitude(A, D, G)
By directions_draw_angle on orthocenter(A, B, D), G, E we get exists(angle(orthocenter(A, B, D), G, E))
By directions_draw_angle on orthocenter(A, B, D), B, D we get exists(angle(orthocenter(A, B, D), B, D))
By directions_draw_angle on E, D, orthocenter(A, B, D) we get exists(angle(E, D, orthocenter(A, B, D)))
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, B, D), midpoint(B, G), A we get not_collinear(A, midpoint(B, G), orthocenter(A, B, D)), exists(Line(A, midpoint(B, G)))
By not_in_line_equivalent_to_not_collinear_v0 on F, G, orthocenter(A, B, D) we get not_collinear(F, G, orthocenter(A, B, D)), exists(Line(G, orthocenter(A, B, D)))
By perpendicular_angle_conditions_v0 on orthocenter(A, D, G), E, C we get angle(orthocenter(A, D, G), E, C) == orientation(C, orthocenter(A, D, G), E) mod 360
By directions_draw_angle on orthocenter(A, D, G), D, F we get exists(angle(orthocenter(A, D, G), D, F))
By directions_draw_angle on orthocenter(A, B, D), F, B we get exists(angle(orthocenter(A, B, D), F, B))
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, D, G), F, H we get not_collinear(F, H, orthocenter(A, D, G)), exists(Line(F, H))
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, B, D), C, D we get not_collinear(C, D, orthocenter(A, B, D)), exists(Line(C, D))
By internal_angle_bisector_definition_v0 on H, orthocenter(A, B, D), A, F we get angle(H, F, orthocenter(A, B, D)) == angle(orthocenter(A, B, D), F, A) mod 360
By directions_draw_angle on orthocenter(A, B, D), D, I we get exists(angle(orthocenter(A, B, D), D, I))
By reverse_direction on B, orthocenter(A, D, G) we get 180 == direction(B, orthocenter(A, D, G)) - direction(orthocenter(A, D, G), B) mod 360
By directions_draw_angle on A, E, orthocenter(A, D, G) we get exists(angle(A, E, orthocenter(A, D, G)))
By not_in_line_equivalent_to_not_collinear_v0 on H, orthocenter(A, B, D), D we get not_collinear(D, H, orthocenter(A, B, D)), exists(Line(D, orthocenter(A, B, D)))
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, B, D), midpoint(B, G), I we get not_collinear(I, midpoint(B, G), orthocenter(A, B, D)), exists(Line(I, midpoint(B, G)))
By directions_draw_angle on orthocenter(A, D, G), D, H we get exists(angle(orthocenter(A, D, G), D, H))
By reverse_direction on E, orthocenter(A, D, G) we get 180 == direction(E, orthocenter(A, D, G)) - direction(orthocenter(A, D, G), E) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, D, G), I, midpoint(B, G) we get not_collinear(I, midpoint(B, G), orthocenter(A, D, G)), exists(Line(I, midpoint(B, G)))
By directions_draw_angle on B, orthocenter(A, B, D), F we get exists(angle(B, orthocenter(A, B, D), F))
By directions_draw_angle on orthocenter(A, B, D), B, I we get exists(angle(orthocenter(A, B, D), B, I))
By directions_draw_angle on orthocenter(A, B, D), G, orthocenter(A, D, G) we get exists(angle(orthocenter(A, B, D), G, orthocenter(A, D, G)))
By directions_draw_angle on orthocenter(A, B, D), D, H we get exists(angle(orthocenter(A, B, D), D, H))
By directions_draw_angle on projection(E, h), G, orthocenter(A, B, D) we get exists(angle(projection(E, h), G, orthocenter(A, B, D)))
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, D, G), H, D we get not_collinear(D, H, orthocenter(A, D, G)), exists(Line(D, H))
By directions_draw_angle on A, B, orthocenter(A, B, D) we get exists(angle(A, B, orthocenter(A, B, D)))
By reverse_direction on orthocenter(A, D, G), E we get 180 == direction(orthocenter(A, D, G), E) - direction(E, orthocenter(A, D, G)) mod 360
By directions_draw_angle on orthocenter(A, D, G), D, I we get exists(angle(orthocenter(A, D, G), D, I))
By line_inequality on Line(F, center(c)), altitude(A, B, D), F we get altitude(A, B, D) != Line(F, center(c))
By perpendicular_angle_conditions_v0 on G, E, orthocenter(A, D, G) we get angle(G, E, orthocenter(A, D, G)) == orientation(E, orthocenter(A, D, G), G) mod 360
By external_angle_bisector_definition_v0 on B, orthocenter(A, B, D), B, F we get 180 == angle(B, F, orthocenter(A, B, D)) + angle(B, F, orthocenter(A, B, D)) mod 360
By line_containment_inequality on line_intersection(i, altitude(A, B, D)), B, altitude(A, B, D) we get B != line_intersection(i, altitude(A, B, D))
By perpendicular_angle_conditions_v0 on orthocenter(A, B, D), F, H we get angle(orthocenter(A, B, D), F, H) == orientation(F, H, orthocenter(A, B, D)) mod 360
By directions_draw_angle on B, projection(F, h), G we get exists(angle(B, projection(F, h), G))
By directions_draw_angle on orthocenter(A, B, D), D, E we get exists(angle(orthocenter(A, B, D), D, E))
By directions_draw_angle on orthocenter(A, D, G), B, projection(E, h) we get exists(angle(orthocenter(A, D, G), B, projection(E, h)))
By not_in_line_equivalent_to_not_collinear_v0 on E, G, orthocenter(A, B, D) we get not_collinear(E, G, orthocenter(A, B, D)), exists(Line(G, orthocenter(A, B, D)))
By line_containment_inequality on line_intersection(i, altitude(A, B, D)), orthocenter(A, D, G), i we get orthocenter(A, D, G) != line_intersection(i, altitude(A, B, D))
By reverse_direction on orthocenter(A, B, D), B we get 180 == direction(orthocenter(A, B, D), B) - direction(B, orthocenter(A, B, D)) mod 360
By directions_draw_angle on I, G, orthocenter(A, D, G) we get exists(angle(I, G, orthocenter(A, D, G)))
By directions_draw_angle on midpoint(B, G), D, orthocenter(A, B, D) we get exists(angle(midpoint(B, G), D, orthocenter(A, B, D)))
By directions_draw_angle on H, D, orthocenter(A, B, D) we get exists(angle(H, D, orthocenter(A, B, D)))
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, D, G), E, F we get not_collinear(E, F, orthocenter(A, D, G)), exists(Line(E, F))
By directions_draw_angle on orthocenter(A, B, D), B, projection(F, h) we get exists(angle(orthocenter(A, B, D), B, projection(F, h)))
By directions_draw_angle on orthocenter(A, D, G), B, D we get exists(angle(orthocenter(A, D, G), B, D))
By directions_draw_angle on orthocenter(A, B, D), D, B we get exists(angle(orthocenter(A, B, D), D, B))
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, B, D), I, A we get not_collinear(A, I, orthocenter(A, B, D)), exists(Line(A, I))
By directions_draw_angle on orthocenter(A, D, G), E, A we get exists(angle(orthocenter(A, D, G), E, A))
By directions_draw_angle on B, F, orthocenter(A, B, D) we get exists(angle(B, F, orthocenter(A, B, D)))
By directions_draw_angle on orthocenter(A, B, D), B, F we get exists(angle(orthocenter(A, B, D), B, F))
By directions_draw_angle on orthocenter(A, B, D), F, center(c) we get exists(angle(orthocenter(A, B, D), F, center(c)))
By directions_draw_angle on orthocenter(A, B, D), G, D we get exists(angle(orthocenter(A, B, D), G, D))
By directions_draw_angle on B, projection(F, h), F we get exists(angle(B, projection(F, h), F))
By external_angle_bisector_definition_v0 on H, orthocenter(A, B, D), H, F we get 180 == angle(H, F, orthocenter(A, B, D)) + angle(H, F, orthocenter(A, B, D)) mod 360
By perpendicular_angle_conditions_v0 on B, F, orthocenter(A, B, D) we get angle(B, F, orthocenter(A, B, D)) == orientation(B, F, orthocenter(A, B, D)) mod 360
By perpendicular_angle_conditions_v0 on orthocenter(A, B, D), F, B we get angle(orthocenter(A, B, D), F, B) == orientation(B, orthocenter(A, B, D), F) mod 360
By internal_angle_bisector_definition_v0 on A, orthocenter(A, B, D), H, F we get angle(A, F, orthocenter(A, B, D)) == angle(orthocenter(A, B, D), F, H) mod 360
By perpendicular_angle_conditions_v0 on orthocenter(A, D, G), E, G we get angle(orthocenter(A, D, G), E, G) == orientation(E, G, orthocenter(A, D, G)) mod 360
By directions_draw_angle on C, D, orthocenter(A, B, D) we get exists(angle(C, D, orthocenter(A, B, D)))
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, D, G), F, A we get not_collinear(A, F, orthocenter(A, D, G)), exists(Line(A, F))
By not_in_line_equivalent_to_not_collinear_v0 on F, orthocenter(A, D, G), G we get not_collinear(F, G, orthocenter(A, D, G)), exists(Line(G, orthocenter(A, D, G)))
By not_in_line_equivalent_to_not_collinear_v0 on C, orthocenter(A, B, D), F we get not_collinear(C, F, orthocenter(A, B, D)), exists(Line(F, orthocenter(A, B, D)))
By directions_draw_angle on orthocenter(A, D, G), E, H we get exists(angle(orthocenter(A, D, G), E, H))
By directions_draw_angle on projection(F, h), B, orthocenter(A, B, D) we get exists(angle(projection(F, h), B, orthocenter(A, B, D)))
By not_in_line_equivalent_to_not_collinear_v0 on H, orthocenter(A, B, D), F we get not_collinear(F, H, orthocenter(A, B, D)), exists(Line(F, orthocenter(A, B, D)))
By directions_draw_angle on G, orthocenter(A, B, D), D we get exists(angle(G, orthocenter(A, B, D), D))
By directions_draw_angle on projection(F, h), B, orthocenter(A, D, G) we get exists(angle(projection(F, h), B, orthocenter(A, D, G)))
By directions_draw_angle on orthocenter(A, B, D), F, A we get exists(angle(orthocenter(A, B, D), F, A))
By directions_draw_angle on orthocenter(A, D, G), E, center(c) we get exists(angle(orthocenter(A, D, G), E, center(c)))
By directions_draw_angle on B, orthocenter(A, D, G), D we get exists(angle(B, orthocenter(A, D, G), D))
By directions_draw_angle on orthocenter(A, D, G), D, G we get exists(angle(orthocenter(A, D, G), D, G))
By directions_draw_angle on E, orthocenter(A, D, G), B we get exists(angle(E, orthocenter(A, D, G), B))
By directions_draw_angle on D, G, orthocenter(A, D, G) we get exists(angle(D, G, orthocenter(A, D, G)))
By line_inequality on g, altitude(A, D, G), G we get g != altitude(A, D, G)
By directions_draw_angle on B, D, orthocenter(A, B, D) we get exists(angle(B, D, orthocenter(A, B, D)))
By line_containment_inequality on projection(E, Line(C, D)), orthocenter(A, B, D), Line(C, D) we get orthocenter(A, B, D) != projection(E, Line(C, D))
By line_containment_inequality on line_intersection(Line(D, G), altitude(A, D, G)), G, altitude(A, D, G) we get G != line_intersection(Line(D, G), altitude(A, D, G))
By directions_draw_angle on orthocenter(A, B, D), B, A we get exists(angle(orthocenter(A, B, D), B, A))
By directions_draw_angle on G, orthocenter(A, D, G), E we get exists(angle(G, orthocenter(A, D, G), E))
By directions_draw_angle on orthocenter(A, D, G), B, A we get exists(angle(orthocenter(A, D, G), B, A))
By directions_draw_angle on orthocenter(A, D, G), G, I we get exists(angle(orthocenter(A, D, G), G, I))
By directions_draw_angle on E, G, orthocenter(A, D, G) we get exists(angle(E, G, orthocenter(A, D, G)))
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, B, D), C, E we get not_collinear(C, E, orthocenter(A, B, D)), exists(Line(C, E))
By directions_draw_angle on D, B, orthocenter(A, D, G) we get exists(angle(D, B, orthocenter(A, D, G)))
By directions_draw_angle on G, D, orthocenter(A, B, D) we get exists(angle(G, D, orthocenter(A, B, D)))
By directions_draw_angle on orthocenter(A, D, G), G, projection(F, h) we get exists(angle(orthocenter(A, D, G), G, projection(F, h)))
By directions_draw_angle on C, G, orthocenter(A, B, D) we get exists(angle(C, G, orthocenter(A, B, D)))
By line_containment_inequality on orthocenter(A, B, D), orthocenter(A, D, G), Line(D, F) we get orthocenter(A, B, D) != orthocenter(A, D, G)
By directions_draw_angle on orthocenter(A, B, D), G, A we get exists(angle(orthocenter(A, B, D), G, A))
By not_in_line_equivalent_to_not_collinear_v0 on I, E, orthocenter(A, D, G) we get not_collinear(E, I, orthocenter(A, D, G)), exists(Line(E, orthocenter(A, D, G)))
By directions_draw_angle on H, D, orthocenter(A, D, G) we get exists(angle(H, D, orthocenter(A, D, G)))
By directions_draw_angle on E, F, orthocenter(A, B, D) we get exists(angle(E, F, orthocenter(A, B, D)))
By directions_draw_angle on F, B, orthocenter(A, D, G) we get exists(angle(F, B, orthocenter(A, D, G)))
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, D, G), F, orthocenter(A, B, D) we get not_collinear(F, orthocenter(A, B, D), orthocenter(A, D, G)), exists(Line(F, orthocenter(A, B, D)))
By directions_draw_angle on projection(F, h), F, orthocenter(A, B, D) we get exists(angle(projection(F, h), F, orthocenter(A, B, D)))
By directions_draw_angle on orthocenter(A, D, G), G, projection(E, h) we get exists(angle(orthocenter(A, D, G), G, projection(E, h)))
By line_inequality on altitude(A, D, G), f, orthocenter(A, D, G) we get f != altitude(A, D, G)
By directions_draw_angle on orthocenter(A, D, G), D, A we get exists(angle(orthocenter(A, D, G), D, A))
By directions_draw_angle on F, orthocenter(A, B, D), B we get exists(angle(F, orthocenter(A, B, D), B))
By directions_draw_angle on orthocenter(A, D, G), G, D we get exists(angle(orthocenter(A, D, G), G, D))
By directions_draw_angle on midpoint(B, G), D, orthocenter(A, D, G) we get exists(angle(midpoint(B, G), D, orthocenter(A, D, G)))
By directions_draw_angle on F, projection(F, h), B we get exists(angle(F, projection(F, h), B))
By directions_draw_angle on orthocenter(A, B, D), B, orthocenter(A, D, G) we get exists(angle(orthocenter(A, B, D), B, orthocenter(A, D, G)))
By directions_draw_angle on projection(E, Line(C, D)), E, orthocenter(A, D, G) we get exists(angle(projection(E, Line(C, D)), E, orthocenter(A, D, G)))
By directions_draw_angle on H, E, orthocenter(A, D, G) we get exists(angle(H, E, orthocenter(A, D, G)))
By directions_draw_angle on C, D, orthocenter(A, D, G) we get exists(angle(C, D, orthocenter(A, D, G)))
By directions_draw_angle on orthocenter(A, D, G), E, projection(E, h) we get exists(angle(orthocenter(A, D, G), E, projection(E, h)))
By directions_draw_angle on orthocenter(A, B, D), F, projection(F, i) we get exists(angle(orthocenter(A, B, D), F, projection(F, i)))
By directions_draw_angle on orthocenter(A, D, G), B, H we get exists(angle(orthocenter(A, D, G), B, H))
By directions_draw_angle on orthocenter(A, B, D), B, H we get exists(angle(orthocenter(A, B, D), B, H))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(B, G), E, orthocenter(A, D, G) we get not_collinear(E, midpoint(B, G), orthocenter(A, D, G)), exists(Line(E, orthocenter(A, D, G)))
By directions_draw_angle on orthocenter(A, B, D), G, C we get exists(angle(orthocenter(A, B, D), G, C))
By directions_draw_angle on projection(E, Line(D, G)), E, orthocenter(A, D, G) we get exists(angle(projection(E, Line(D, G)), E, orthocenter(A, D, G)))
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, D, G), C, A we get not_collinear(A, C, orthocenter(A, D, G)), exists(Line(A, C))
By directions_draw_angle on B, D, orthocenter(A, D, G) we get exists(angle(B, D, orthocenter(A, D, G)))
By line_inequality on Line(B, projection(F, h)), altitude(A, B, D), B we get altitude(A, B, D) != Line(B, projection(F, h))
By directions_draw_angle on G, projection(E, h), E we get exists(angle(G, projection(E, h), E))
By directions_draw_angle on D, orthocenter(A, B, D), G we get exists(angle(D, orthocenter(A, B, D), G))
By directions_draw_angle on E, projection(E, h), G we get exists(angle(E, projection(E, h), G))
By directions_draw_angle on orthocenter(A, B, D), G, projection(E, h) we get exists(angle(orthocenter(A, B, D), G, projection(E, h)))
By directions_draw_angle on orthocenter(A, D, G), D, midpoint(B, G) we get exists(angle(orthocenter(A, D, G), D, midpoint(B, G)))
By directions_draw_angle on D, orthocenter(A, D, G), G we get exists(angle(D, orthocenter(A, D, G), G))
By line_inequality on Line(B, projection(F, h)), altitude(A, D, G), B we get altitude(A, D, G) != Line(B, projection(F, h))
By directions_draw_angle on orthocenter(A, B, D), F, projection(F, Line(D, H)) we get exists(angle(orthocenter(A, B, D), F, projection(F, Line(D, H))))
By directions_draw_angle on E, G, orthocenter(A, B, D) we get exists(angle(E, G, orthocenter(A, B, D)))
By directions_draw_angle on I, D, orthocenter(A, B, D) we get exists(angle(I, D, orthocenter(A, B, D)))
By directions_draw_angle on F, B, orthocenter(A, B, D) we get exists(angle(F, B, orthocenter(A, B, D)))
By directions_draw_angle on projection(E, h), B, orthocenter(A, B, D) we get exists(angle(projection(E, h), B, orthocenter(A, B, D)))
By directions_draw_angle on C, G, orthocenter(A, D, G) we get exists(angle(C, G, orthocenter(A, D, G)))
By directions_draw_angle on G, projection(F, h), F we get exists(angle(G, projection(F, h), F))
By line_inequality on altitude(A, B, D), g, orthocenter(A, B, D) we get g != altitude(A, B, D)
By directions_draw_angle on G, E, orthocenter(A, D, G) we get exists(angle(G, E, orthocenter(A, D, G)))
By directions_draw_angle on D, orthocenter(A, D, G), B we get exists(angle(D, orthocenter(A, D, G), B))
By directions_draw_angle on orthocenter(A, D, G), E, projection(E, Line(D, G)) we get exists(angle(orthocenter(A, D, G), E, projection(E, Line(D, G))))
By directions_draw_angle on orthocenter(A, B, D), F, projection(F, h) we get exists(angle(orthocenter(A, B, D), F, projection(F, h)))
By line_containment_inequality on projection(E, Line(D, G)), orthocenter(A, D, G), Line(D, G) we get orthocenter(A, D, G) != projection(E, Line(D, G))
By directions_draw_angle on orthocenter(A, B, D), D, A we get exists(angle(orthocenter(A, B, D), D, A))
By directions_draw_angle on orthocenter(A, B, D), D, orthocenter(A, D, G) we get exists(angle(orthocenter(A, B, D), D, orthocenter(A, D, G)))
By directions_draw_angle on projection(E, h), G, orthocenter(A, D, G) we get exists(angle(projection(E, h), G, orthocenter(A, D, G)))
By directions_draw_angle on orthocenter(A, D, G), E, projection(E, Line(C, D)) we get exists(angle(orthocenter(A, D, G), E, projection(E, Line(C, D))))
By directions_draw_angle on A, F, orthocenter(A, B, D) we get exists(angle(A, F, orthocenter(A, B, D)))
By directions_draw_angle on orthocenter(A, D, G), G, A we get exists(angle(orthocenter(A, D, G), G, A))
By directions_draw_angle on G, projection(E, h), B we get exists(angle(G, projection(E, h), B))
By directions_draw_angle on A, G, orthocenter(A, B, D) we get exists(angle(A, G, orthocenter(A, B, D)))
By directions_draw_angle on A, D, orthocenter(A, D, G) we get exists(angle(A, D, orthocenter(A, D, G)))
By directions_draw_angle on A, G, orthocenter(A, D, G) we get exists(angle(A, G, orthocenter(A, D, G)))
By directions_draw_angle on orthocenter(A, B, D), G, I we get exists(angle(orthocenter(A, B, D), G, I))
By directions_draw_angle on D, G, orthocenter(A, B, D) we get exists(angle(D, G, orthocenter(A, B, D)))
By line_containment_inequality on line_intersection(Line(D, G), altitude(A, D, G)), orthocenter(A, D, G), Line(D, G) we get orthocenter(A, D, G) != line_intersection(Line(D, G), altitude(A, D, G))
By directions_draw_angle on orthocenter(A, D, G), D, orthocenter(A, B, D) we get exists(angle(orthocenter(A, D, G), D, orthocenter(A, B, D)))
By directions_draw_angle on D, orthocenter(A, B, D), B we get exists(angle(D, orthocenter(A, B, D), B))
By directions_draw_angle on orthocenter(A, B, D), D, C we get exists(angle(orthocenter(A, B, D), D, C))
By directions_draw_angle on F, E, orthocenter(A, D, G) we get exists(angle(F, E, orthocenter(A, D, G)))
By directions_draw_angle on H, B, orthocenter(A, B, D) we get exists(angle(H, B, orthocenter(A, B, D)))
By directions_draw_angle on I, B, orthocenter(A, B, D) we get exists(angle(I, B, orthocenter(A, B, D)))
By line_inequality on altitude(E, D, G), altitude(A, D, G), E we get altitude(A, D, G) != altitude(E, D, G)
By directions_draw_angle on center(c), F, orthocenter(A, B, D) we get exists(angle(center(c), F, orthocenter(A, B, D)))
By directions_draw_angle on B, orthocenter(A, B, D), D we get exists(angle(B, orthocenter(A, B, D), D))
By directions_draw_angle on I, D, orthocenter(A, D, G) we get exists(angle(I, D, orthocenter(A, D, G)))
By line_containment_inequality on projection(F, Line(D, H)), orthocenter(A, B, D), Line(D, H) we get orthocenter(A, B, D) != projection(F, Line(D, H))
By directions_draw_angle on orthocenter(A, D, G), G, orthocenter(A, B, D) we get exists(angle(orthocenter(A, D, G), G, orthocenter(A, B, D)))
By line_containment_inequality on projection(E, Line(C, D)), orthocenter(A, D, G), Line(C, D) we get orthocenter(A, D, G) != projection(E, Line(C, D))
By line_containment_inequality on projection(F, h), orthocenter(A, B, D), h we get projection(F, h) != orthocenter(A, B, D)
By line_inequality on altitude(F, D, H), altitude(A, B, D), F we get altitude(A, B, D) != altitude(F, D, H)
By line_inequality on Line(G, projection(E, h)), altitude(A, D, G), G we get altitude(A, D, G) != Line(G, projection(E, h))
By line_inequality on f, altitude(A, B, D), B we get f != altitude(A, B, D)
By line_containment_inequality on projection(F, i), orthocenter(A, B, D), i we get projection(F, i) != orthocenter(A, B, D)
By line_containment_inequality on line_intersection(i, altitude(A, B, D)), orthocenter(A, B, D), i we get orthocenter(A, B, D) != line_intersection(i, altitude(A, B, D))
By line_inequality on Line(G, projection(F, h)), altitude(A, D, G), G we get altitude(A, D, G) != Line(G, projection(F, h))
By line_containment_inequality on projection(E, Line(D, G)), orthocenter(A, B, D), Line(D, G) we get orthocenter(A, B, D) != projection(E, Line(D, G))
By line_inequality on altitude(E, A, D), altitude(A, D, G), E we get altitude(A, D, G) != altitude(E, A, D)
By line_inequality on altitude(F, A, D), altitude(A, B, D), F we get altitude(A, B, D) != altitude(F, A, D)
By line_inequality on altitude(F, B, D), altitude(A, B, D), F we get altitude(A, B, D) != altitude(F, B, D)
By line_inequality on altitude(E, C, D), altitude(A, D, G), E we get altitude(A, D, G) != altitude(E, C, D)
By line_containment_inequality on line_intersection(Line(D, G), altitude(A, D, G)), D, altitude(A, D, G) we get D != line_intersection(Line(D, G), altitude(A, D, G))
By line_containment_inequality on projection(E, h), orthocenter(A, D, G), h we get projection(E, h) != orthocenter(A, D, G)
By line_containment_inequality on projection(F, h), orthocenter(A, D, G), h we get projection(F, h) != orthocenter(A, D, G)
By line_containment_inequality on projection(F, Line(D, H)), orthocenter(A, D, G), Line(D, H) we get orthocenter(A, D, G) != projection(F, Line(D, H))
By line_containment_inequality on line_intersection(i, altitude(A, B, D)), D, altitude(A, B, D) we get D != line_intersection(i, altitude(A, B, D))
By line_inequality on Line(E, center(c)), altitude(A, D, G), E we get altitude(A, D, G) != Line(E, center(c))
By collinear_definition on orthocenter(A, B, D), midpoint(B, G), G we get midpoint(B, G) in Line(G, orthocenter(A, B, D)), G in Line(midpoint(B, G), orthocenter(A, B, D)), Line(G, orthocenter(A, B, D)) == Line(midpoint(B, G), orthocenter(A, B, D)), 0 == 2 * angle(midpoint(B, G), orthocenter(A, B, D), G) mod 360
By concyclic_definition_0 on E, midpoint(B, G), G, D we get D in Circle(E, G, midpoint(B, G))
By concyclic_definition_0 on G, D, E, midpoint(B, G) we get midpoint(B, G) in Circle(D, E, G)
By external_angle_bisector_definition_v0_r on D, A, I, midpoint(B, G) we get Line(A, midpoint(B, G)) == external_angle_bisector(D, midpoint(B, G), I)
By concyclic_definition_0 on D, E, midpoint(B, G), G we get G in Circle(D, E, midpoint(B, G))
By internal_angle_bisector_definition_v0_r on D, orthocenter(A, B, D), D, F we get Line(F, orthocenter(A, B, D)) == internal_angle_bisector(D, F, D)
By concyclic_definition_0 on B, midpoint(B, G), D, F we get F in Circle(B, D, midpoint(B, G))
By collinear_definition on orthocenter(A, B, D), midpoint(B, G), B we get midpoint(B, G) in Line(B, orthocenter(A, B, D)), B in Line(midpoint(B, G), orthocenter(A, B, D)), Line(B, orthocenter(A, B, D)) == Line(midpoint(B, G), orthocenter(A, B, D)), 0 == 2 * angle(midpoint(B, G), orthocenter(A, B, D), B) mod 360
By concyclic_definition_0 on midpoint(B, G), D, G, E we get E in Circle(D, G, midpoint(B, G))
By internal_angle_bisector_definition_v0_r on orthocenter(A, B, D), G, orthocenter(A, B, D), B we get Line(B, G) == internal_angle_bisector(orthocenter(A, B, D), B, orthocenter(A, B, D))
By internal_angle_bisector_definition_v0_r on G, B, G, orthocenter(A, B, D) we get Line(B, orthocenter(A, B, D)) == internal_angle_bisector(G, orthocenter(A, B, D), G)
By collinear_definition on orthocenter(A, B, D), G, midpoint(B, G) we get G in Line(midpoint(B, G), orthocenter(A, B, D)), midpoint(B, G) in Line(G, orthocenter(A, B, D)), Line(G, orthocenter(A, B, D)) == Line(midpoint(B, G), orthocenter(A, B, D)), 0 == 2 * angle(G, orthocenter(A, B, D), midpoint(B, G)) mod 360
By internal_angle_bisector_definition_v0_r on A, I, D, midpoint(B, G) we get Line(I, midpoint(B, G)) == internal_angle_bisector(A, midpoint(B, G), D)
By concyclic_definition_0 on D, F, B, midpoint(B, G) we get midpoint(B, G) in Circle(B, D, F)
By collinear_definition on midpoint(B, G), G, orthocenter(A, B, D) we get G in Line(midpoint(B, G), orthocenter(A, B, D)), orthocenter(A, B, D) in Line(G, midpoint(B, G)), Line(G, midpoint(B, G)) == Line(midpoint(B, G), orthocenter(A, B, D)), 0 == 2 * angle(G, midpoint(B, G), orthocenter(A, B, D)) mod 360
By concyclic_definition_0 on D, F, midpoint(B, G), B we get B in Circle(D, F, midpoint(B, G))
By collinear_definition on midpoint(B, G), B, orthocenter(A, D, G) we get B in Line(midpoint(B, G), orthocenter(A, D, G)), orthocenter(A, D, G) in Line(B, midpoint(B, G)), Line(B, midpoint(B, G)) == Line(midpoint(B, G), orthocenter(A, D, G)), 0 == 2 * angle(B, midpoint(B, G), orthocenter(A, D, G)) mod 360
By collinear_definition on orthocenter(A, D, G), G, midpoint(B, G) we get G in Line(midpoint(B, G), orthocenter(A, D, G)), midpoint(B, G) in Line(G, orthocenter(A, D, G)), Line(G, orthocenter(A, D, G)) == Line(midpoint(B, G), orthocenter(A, D, G)), 0 == 2 * angle(G, orthocenter(A, D, G), midpoint(B, G)) mod 360
By collinear_definition on orthocenter(A, D, G), midpoint(B, G), B we get midpoint(B, G) in Line(B, orthocenter(A, D, G)), B in Line(midpoint(B, G), orthocenter(A, D, G)), Line(B, orthocenter(A, D, G)) == Line(midpoint(B, G), orthocenter(A, D, G)), 0 == 2 * angle(midpoint(B, G), orthocenter(A, D, G), B) mod 360
By concyclic_definition_0 on F, B, midpoint(B, G), D we get D in Circle(B, F, midpoint(B, G))
By collinear_definition on orthocenter(A, D, G), midpoint(B, G), G we get midpoint(B, G) in Line(G, orthocenter(A, D, G)), G in Line(midpoint(B, G), orthocenter(A, D, G)), Line(G, orthocenter(A, D, G)) == Line(midpoint(B, G), orthocenter(A, D, G)), 0 == 2 * angle(midpoint(B, G), orthocenter(A, D, G), G) mod 360
By internal_angle_bisector_definition_v0_r on orthocenter(A, D, G), E, orthocenter(A, D, G), D we get Line(D, E) == internal_angle_bisector(orthocenter(A, D, G), D, orthocenter(A, D, G))
By internal_angle_bisector_definition_v0_r on F, orthocenter(A, B, D), F, D we get Line(D, orthocenter(A, B, D)) == internal_angle_bisector(F, D, F)
By internal_angle_bisector_definition_v0_r on orthocenter(A, B, D), midpoint(B, G), orthocenter(A, B, D), B we get Line(B, midpoint(B, G)) == internal_angle_bisector(orthocenter(A, B, D), B, orthocenter(A, B, D))
By internal_angle_bisector_definition_v0_r on orthocenter(A, D, G), B, orthocenter(A, D, G), G we get Line(B, G) == internal_angle_bisector(orthocenter(A, D, G), G, orthocenter(A, D, G))
By internal_angle_bisector_definition_v0_r on D, F, D, orthocenter(A, B, D) we get Line(F, orthocenter(A, B, D)) == internal_angle_bisector(D, orthocenter(A, B, D), D)
By collinear_definition on midpoint(B, G), orthocenter(A, D, G), G we get orthocenter(A, D, G) in Line(G, midpoint(B, G)), G in Line(midpoint(B, G), orthocenter(A, D, G)), Line(G, midpoint(B, G)) == Line(midpoint(B, G), orthocenter(A, D, G)), 0 == 2 * angle(orthocenter(A, D, G), midpoint(B, G), G) mod 360
By internal_angle_bisector_definition_v0_r on orthocenter(A, D, G), midpoint(B, G), orthocenter(A, D, G), B we get Line(B, midpoint(B, G)) == internal_angle_bisector(orthocenter(A, D, G), B, orthocenter(A, D, G))
By internal_angle_bisector_definition_v0_r on orthocenter(A, D, G), D, orthocenter(A, D, G), E we get Line(D, E) == internal_angle_bisector(orthocenter(A, D, G), E, orthocenter(A, D, G))
By internal_angle_bisector_definition_v0_r on orthocenter(A, D, G), midpoint(B, G), orthocenter(A, D, G), G we get Line(G, midpoint(B, G)) == internal_angle_bisector(orthocenter(A, D, G), G, orthocenter(A, D, G))
By internal_angle_bisector_definition_v0_r on orthocenter(A, B, D), F, orthocenter(A, B, D), D we get Line(D, F) == internal_angle_bisector(orthocenter(A, B, D), D, orthocenter(A, B, D))
By internal_angle_bisector_definition_v0_r on B, G, B, orthocenter(A, B, D) we get Line(G, orthocenter(A, B, D)) == internal_angle_bisector(B, orthocenter(A, B, D), B)
By collinear_definition on orthocenter(A, B, D), B, midpoint(B, G) we get B in Line(midpoint(B, G), orthocenter(A, B, D)), midpoint(B, G) in Line(B, orthocenter(A, B, D)), Line(B, orthocenter(A, B, D)) == Line(midpoint(B, G), orthocenter(A, B, D)), 0 == 2 * angle(B, orthocenter(A, B, D), midpoint(B, G)) mod 360
By internal_angle_bisector_definition_v0_r on D, E, D, orthocenter(A, D, G) we get Line(E, orthocenter(A, D, G)) == internal_angle_bisector(D, orthocenter(A, D, G), D)
By internal_angle_bisector_definition_v0_r on orthocenter(A, D, G), G, orthocenter(A, D, G), B we get Line(B, G) == internal_angle_bisector(orthocenter(A, D, G), B, orthocenter(A, D, G))
By collinear_definition on midpoint(B, G), orthocenter(A, B, D), G we get orthocenter(A, B, D) in Line(G, midpoint(B, G)), G in Line(midpoint(B, G), orthocenter(A, B, D)), Line(G, midpoint(B, G)) == Line(midpoint(B, G), orthocenter(A, B, D)), 0 == 2 * angle(orthocenter(A, B, D), midpoint(B, G), G) mod 360
By collinear_definition on midpoint(B, G), orthocenter(A, B, D), B we get orthocenter(A, B, D) in Line(B, midpoint(B, G)), B in Line(midpoint(B, G), orthocenter(A, B, D)), Line(B, midpoint(B, G)) == Line(midpoint(B, G), orthocenter(A, B, D)), 0 == 2 * angle(orthocenter(A, B, D), midpoint(B, G), B) mod 360
By collinear_definition on midpoint(B, G), orthocenter(A, D, G), B we get orthocenter(A, D, G) in Line(B, midpoint(B, G)), B in Line(midpoint(B, G), orthocenter(A, D, G)), Line(B, midpoint(B, G)) == Line(midpoint(B, G), orthocenter(A, D, G)), 0 == 2 * angle(orthocenter(A, D, G), midpoint(B, G), B) mod 360
By internal_angle_bisector_definition_v0_r on F, D, F, orthocenter(A, B, D) we get Line(D, orthocenter(A, B, D)) == internal_angle_bisector(F, orthocenter(A, B, D), F)
By internal_angle_bisector_definition_v0_r on E, orthocenter(A, D, G), E, D we get Line(D, orthocenter(A, D, G)) == internal_angle_bisector(E, D, E)
By collinear_definition on midpoint(B, G), B, orthocenter(A, B, D) we get B in Line(midpoint(B, G), orthocenter(A, B, D)), orthocenter(A, B, D) in Line(B, midpoint(B, G)), Line(B, midpoint(B, G)) == Line(midpoint(B, G), orthocenter(A, B, D)), 0 == 2 * angle(B, midpoint(B, G), orthocenter(A, B, D)) mod 360
By internal_angle_bisector_definition_v0_r on orthocenter(A, B, D), midpoint(B, G), orthocenter(A, B, D), G we get Line(G, midpoint(B, G)) == internal_angle_bisector(orthocenter(A, B, D), G, orthocenter(A, B, D))
By internal_angle_bisector_definition_v0_r on orthocenter(A, B, D), D, orthocenter(A, B, D), F we get Line(D, F) == internal_angle_bisector(orthocenter(A, B, D), F, orthocenter(A, B, D))
By internal_angle_bisector_definition_v0_r on E, D, E, orthocenter(A, D, G) we get Line(D, orthocenter(A, D, G)) == internal_angle_bisector(E, orthocenter(A, D, G), E)
By internal_angle_bisector_definition_v0_r on orthocenter(A, B, D), B, orthocenter(A, B, D), G we get Line(B, G) == internal_angle_bisector(orthocenter(A, B, D), G, orthocenter(A, B, D))
By collinear_definition on midpoint(B, G), G, orthocenter(A, D, G) we get G in Line(midpoint(B, G), orthocenter(A, D, G)), orthocenter(A, D, G) in Line(G, midpoint(B, G)), Line(G, midpoint(B, G)) == Line(midpoint(B, G), orthocenter(A, D, G)), 0 == 2 * angle(G, midpoint(B, G), orthocenter(A, D, G)) mod 360
By collinear_definition on orthocenter(A, D, G), B, midpoint(B, G) we get B in Line(midpoint(B, G), orthocenter(A, D, G)), midpoint(B, G) in Line(B, orthocenter(A, D, G)), Line(B, orthocenter(A, D, G)) == Line(midpoint(B, G), orthocenter(A, D, G)), 0 == 2 * angle(B, orthocenter(A, D, G), midpoint(B, G)) mod 360
By internal_angle_bisector_definition_v0_r on D, orthocenter(A, D, G), D, E we get Line(E, orthocenter(A, D, G)) == internal_angle_bisector(D, E, D)
By internal_angle_bisector_definition_v0_r on B, G, B, orthocenter(A, D, G) we get Line(G, orthocenter(A, D, G)) == internal_angle_bisector(B, orthocenter(A, D, G), B)
By internal_angle_bisector_definition_v0_r on G, B, G, orthocenter(A, D, G) we get Line(B, orthocenter(A, D, G)) == internal_angle_bisector(G, orthocenter(A, D, G), G)
By concyclic_definition_1 on midpoint(B, G), D, E, G we get Circle(D, E, G) == Circle(D, E, midpoint(B, G))
By concyclic_definition_1 on E, G, D, midpoint(B, G) we get Circle(D, E, G) == Circle(D, G, midpoint(B, G))
By concyclic_definition_1 on E, midpoint(B, G), D, G we get Circle(D, E, midpoint(B, G)) == Circle(D, G, midpoint(B, G))
By concyclic_definition_1 on E, midpoint(B, G), G, D we get Circle(D, G, midpoint(B, G)) == Circle(E, G, midpoint(B, G))
By concyclic_definition_1 on B, midpoint(B, G), D, F we get Circle(B, D, midpoint(B, G)) == Circle(D, F, midpoint(B, G))
By concyclic_definition_1 on B, F, D, midpoint(B, G) we get Circle(B, D, F) == Circle(D, F, midpoint(B, G))
By concyclic_definition_1 on B, midpoint(B, G), F, D we get Circle(B, F, midpoint(B, G)) == Circle(D, F, midpoint(B, G))
By concyclic_definition_1 on midpoint(B, G), F, B, D we get Circle(B, D, F) == Circle(B, F, midpoint(B, G))
By concyclic_definition_1 on D, E, midpoint(B, G), G we get Circle(D, E, midpoint(B, G)) == Circle(E, G, midpoint(B, G))
By concyclic_definition_1 on F, B, D, midpoint(B, G) we get Circle(B, D, F) == Circle(B, D, midpoint(B, G))
By concyclic_definition_1 on D, G, E, midpoint(B, G) we get Circle(D, E, G) == Circle(E, G, midpoint(B, G))
By power_of_a_point_definition on midpoint(B, G), I, A, Circle(A, B, C) we get log(power_of_a_point(midpoint(B, G), Circle(A, B, C))) == log(distance(I, midpoint(B, G))) + log(distance(A, midpoint(B, G)))
By concyclic_definition_1 on F, B, midpoint(B, G), D we get Circle(B, D, midpoint(B, G)) == Circle(B, F, midpoint(B, G))
By power_of_a_point_definition on orthocenter(A, B, D), F, D, Circle(A, D, E) we get log(power_of_a_point(orthocenter(A, B, D), Circle(A, D, E))) == log(distance(F, orthocenter(A, B, D))) + log(distance(D, orthocenter(A, B, D)))
By power_of_a_point_definition on orthocenter(A, D, G), B, G, d we get log(power_of_a_point(orthocenter(A, D, G), d)) == log(distance(B, orthocenter(A, D, G))) + log(distance(G, orthocenter(A, D, G)))
By power_of_a_point_definition on orthocenter(A, B, D), G, B, d we get log(power_of_a_point(orthocenter(A, B, D), d)) == log(distance(G, orthocenter(A, B, D))) + log(distance(B, orthocenter(A, B, D)))
By power_of_a_point_definition on orthocenter(A, D, G), D, E, Circle(A, D, E) we get log(power_of_a_point(orthocenter(A, D, G), Circle(A, D, E))) == log(distance(D, orthocenter(A, D, G))) + log(distance(E, orthocenter(A, D, G)))
By line_intersection_definition on orthocenter(A, B, midpoint(B, G)), Line(B, G), h we get line_intersection(h, Line(B, G)) == orthocenter(A, B, midpoint(B, G))
By line_intersection_definition on orthocenter(G, I, midpoint(B, G)), Line(B, G), h we get line_intersection(h, Line(B, G)) == orthocenter(G, I, midpoint(B, G))
By line_definition on orthocenter(A, D, G), orthocenter(A, B, D), Line(B, G) we get Line(B, G) == Line(orthocenter(A, B, D), orthocenter(A, D, G))
By line_definition on line_intersection(Line(D, G), altitude(A, D, G)), G, Line(D, G) we get Line(D, G) == Line(G, line_intersection(Line(D, G), altitude(A, D, G)))
By line_definition on orthocenter(A, D, G), line_intersection(Line(D, G), altitude(A, D, G)), altitude(A, D, G) we get altitude(A, D, G) == Line(orthocenter(A, D, G), line_intersection(Line(D, G), altitude(A, D, G)))
By line_intersection_definition on orthocenter(B, D, midpoint(B, G)), h, Line(B, G) we get line_intersection(h, Line(B, G)) == orthocenter(B, D, midpoint(B, G))
By line_definition on D, line_intersection(i, altitude(A, B, D)), i we get i == Line(D, line_intersection(i, altitude(A, B, D)))
By line_intersection_definition on orthocenter(B, I, midpoint(B, G)), h, Line(B, G) we get line_intersection(h, Line(B, G)) == orthocenter(B, I, midpoint(B, G))
By line_definition on D, line_intersection(Line(D, G), altitude(A, D, G)), Line(D, G) we get Line(D, G) == Line(D, line_intersection(Line(D, G), altitude(A, D, G)))
By line_intersection_definition on orthocenter(A, G, midpoint(B, G)), h, Line(B, G) we get line_intersection(h, Line(B, G)) == orthocenter(A, G, midpoint(B, G))
By line_definition on line_intersection(i, altitude(A, B, D)), orthocenter(A, B, D), altitude(A, B, D) we get altitude(A, B, D) == Line(orthocenter(A, B, D), line_intersection(i, altitude(A, B, D)))
By line_definition on line_intersection(i, altitude(A, B, D)), B, i we get i == Line(B, line_intersection(i, altitude(A, B, D)))
By line_intersection_definition on orthocenter(D, G, midpoint(B, G)), h, Line(B, G) we get line_intersection(h, Line(B, G)) == orthocenter(D, G, midpoint(B, G))
By perpendicular_line_definition on G, Line(D, G), altitude(midpoint(B, G), D, G) we get Line(D, G) == perpendicular_line(G, altitude(midpoint(B, G), D, G))
By perpendicular_line_definition on orthocenter(A, G, midpoint(B, G)), h, altitude(E, A, D) we get h == perpendicular_line(orthocenter(A, G, midpoint(B, G)), altitude(E, A, D))
By line_intersection_definition on A, altitude(A, D, G), h we get A == line_intersection(h, altitude(A, D, G))
By perpendicular_line_definition on orthocenter(D, G, midpoint(B, G)), Line(B, G), h we get Line(B, G) == perpendicular_line(orthocenter(D, G, midpoint(B, G)), h)
By perpendicular_line_definition on I, Line(B, I), altitude(midpoint(B, G), B, I) we get Line(B, I) == perpendicular_line(I, altitude(midpoint(B, G), B, I))
By line_intersection_definition on A, altitude(A, D, G), g we get A == line_intersection(g, altitude(A, D, G))
By perpendicular_line_definition on orthocenter(A, B, midpoint(B, G)), altitude(midpoint(B, G), A, B), f we get altitude(midpoint(B, G), A, B) == perpendicular_line(orthocenter(A, B, midpoint(B, G)), f)
By perpendicular_line_definition on B, i, altitude(midpoint(B, G), B, D) we get i == perpendicular_line(B, altitude(midpoint(B, G), B, D))
By line_intersection_definition on A, altitude(A, B, D), f we get A == line_intersection(f, altitude(A, B, D))
By perpendicular_line_definition on orthocenter(D, G, midpoint(B, G)), h, altitude(F, A, D) we get h == perpendicular_line(orthocenter(D, G, midpoint(B, G)), altitude(F, A, D))
By perpendicular_line_definition on line_intersection(i, altitude(A, B, D)), i, altitude(midpoint(B, G), B, D) we get i == perpendicular_line(line_intersection(i, altitude(A, B, D)), altitude(midpoint(B, G), B, D))
By perpendicular_line_definition on orthocenter(D, G, midpoint(B, G)), h, altitude(E, A, D) we get h == perpendicular_line(orthocenter(D, G, midpoint(B, G)), altitude(E, A, D))
By perpendicular_line_definition on orthocenter(G, I, midpoint(B, G)), Line(B, G), h we get Line(B, G) == perpendicular_line(orthocenter(G, I, midpoint(B, G)), h)
By perpendicular_line_definition on G, Line(G, I), altitude(midpoint(B, G), G, I) we get Line(G, I) == perpendicular_line(G, altitude(midpoint(B, G), G, I))
By perpendicular_line_definition on line_intersection(Line(D, G), altitude(A, D, G)), Line(D, G), altitude(midpoint(B, G), D, G) we get Line(D, G) == perpendicular_line(line_intersection(Line(D, G), altitude(A, D, G)), altitude(midpoint(B, G), D, G))
By perpendicular_line_definition on C, g, altitude(midpoint(B, G), A, G) we get g == perpendicular_line(C, altitude(midpoint(B, G), A, G))
By perpendicular_line_definition on orthocenter(G, I, midpoint(B, G)), h, altitude(F, A, D) we get h == perpendicular_line(orthocenter(G, I, midpoint(B, G)), altitude(F, A, D))
By perpendicular_line_definition on orthocenter(B, D, midpoint(B, G)), h, altitude(F, A, D) we get h == perpendicular_line(orthocenter(B, D, midpoint(B, G)), altitude(F, A, D))
By line_intersection_definition on A, altitude(A, B, D), g we get A == line_intersection(g, altitude(A, B, D))
By perpendicular_line_definition on A, g, altitude(midpoint(B, G), A, G) we get g == perpendicular_line(A, altitude(midpoint(B, G), A, G))
By perpendicular_line_definition on orthocenter(A, B, midpoint(B, G)), h, altitude(F, A, D) we get h == perpendicular_line(orthocenter(A, B, midpoint(B, G)), altitude(F, A, D))
By line_intersection_definition on A, altitude(A, D, G), f we get A == line_intersection(f, altitude(A, D, G))
By perpendicular_line_definition on projection(F, i), i, altitude(midpoint(B, G), B, D) we get i == perpendicular_line(projection(F, i), altitude(midpoint(B, G), B, D))
By perpendicular_line_definition on H, f, altitude(midpoint(B, G), A, B) we get f == perpendicular_line(H, altitude(midpoint(B, G), A, B))
By perpendicular_line_definition on B, f, altitude(midpoint(B, G), A, B) we get f == perpendicular_line(B, altitude(midpoint(B, G), A, B))
By perpendicular_line_definition on orthocenter(B, D, midpoint(B, G)), Line(B, G), h we get Line(B, G) == perpendicular_line(orthocenter(B, D, midpoint(B, G)), h)
By perpendicular_line_definition on orthocenter(B, I, midpoint(B, G)), h, Line(B, G) we get h == perpendicular_line(orthocenter(B, I, midpoint(B, G)), Line(B, G))
By perpendicular_line_definition on orthocenter(B, D, midpoint(B, G)), h, altitude(E, A, D) we get h == perpendicular_line(orthocenter(B, D, midpoint(B, G)), altitude(E, A, D))
By perpendicular_line_definition on B, Line(B, I), altitude(midpoint(B, G), B, I) we get Line(B, I) == perpendicular_line(B, altitude(midpoint(B, G), B, I))
By line_intersection_definition on A, h, altitude(A, B, D) we get A == line_intersection(h, altitude(A, B, D))
By perpendicular_line_definition on orthocenter(B, I, midpoint(B, G)), Line(B, G), h we get Line(B, G) == perpendicular_line(orthocenter(B, I, midpoint(B, G)), h)
By perpendicular_line_definition on orthocenter(A, B, midpoint(B, G)), Line(B, G), h we get Line(B, G) == perpendicular_line(orthocenter(A, B, midpoint(B, G)), h)
By perpendicular_line_definition on orthocenter(A, B, midpoint(B, G)), h, altitude(E, A, D) we get h == perpendicular_line(orthocenter(A, B, midpoint(B, G)), altitude(E, A, D))
By perpendicular_line_definition on G, g, altitude(midpoint(B, G), A, G) we get g == perpendicular_line(G, altitude(midpoint(B, G), A, G))
By perpendicular_line_definition on orthocenter(B, I, midpoint(B, G)), altitude(midpoint(B, G), B, I), Line(B, I) we get altitude(midpoint(B, G), B, I) == perpendicular_line(orthocenter(B, I, midpoint(B, G)), Line(B, I))
By perpendicular_line_definition on orthocenter(G, I, midpoint(B, G)), h, altitude(E, A, D) we get h == perpendicular_line(orthocenter(G, I, midpoint(B, G)), altitude(E, A, D))
By perpendicular_line_definition on orthocenter(G, I, midpoint(B, G)), altitude(midpoint(B, G), G, I), Line(G, I) we get altitude(midpoint(B, G), G, I) == perpendicular_line(orthocenter(G, I, midpoint(B, G)), Line(G, I))
By perpendicular_line_definition on orthocenter(A, G, midpoint(B, G)), h, altitude(F, A, D) we get h == perpendicular_line(orthocenter(A, G, midpoint(B, G)), altitude(F, A, D))
By perpendicular_line_definition on F, f, altitude(midpoint(B, G), A, B) we get f == perpendicular_line(F, altitude(midpoint(B, G), A, B))
By perpendicular_line_definition on orthocenter(A, G, midpoint(B, G)), Line(B, G), h we get Line(B, G) == perpendicular_line(orthocenter(A, G, midpoint(B, G)), h)
By perpendicular_line_definition on projection(E, Line(D, G)), Line(D, G), altitude(midpoint(B, G), D, G) we get Line(D, G) == perpendicular_line(projection(E, Line(D, G)), altitude(midpoint(B, G), D, G))
By perpendicular_line_definition on orthocenter(B, D, midpoint(B, G)), h, Line(B, G) we get h == perpendicular_line(orthocenter(B, D, midpoint(B, G)), Line(B, G))
By perpendicular_line_definition on A, f, altitude(midpoint(B, G), A, B) we get f == perpendicular_line(A, altitude(midpoint(B, G), A, B))
By perpendicular_line_definition on orthocenter(D, G, midpoint(B, G)), altitude(midpoint(B, G), D, G), Line(D, G) we get altitude(midpoint(B, G), D, G) == perpendicular_line(orthocenter(D, G, midpoint(B, G)), Line(D, G))
By perpendicular_line_definition on orthocenter(A, B, midpoint(B, G)), h, Line(B, G) we get h == perpendicular_line(orthocenter(A, B, midpoint(B, G)), Line(B, G))
By perpendicular_line_definition on orthocenter(G, I, midpoint(B, G)), h, Line(B, G) we get h == perpendicular_line(orthocenter(G, I, midpoint(B, G)), Line(B, G))
By perpendicular_line_definition on D, Line(D, G), altitude(midpoint(B, G), D, G) we get Line(D, G) == perpendicular_line(D, altitude(midpoint(B, G), D, G))
By perpendicular_line_definition on orthocenter(B, I, midpoint(B, G)), h, altitude(E, A, D) we get h == perpendicular_line(orthocenter(B, I, midpoint(B, G)), altitude(E, A, D))
By line_unique_intersection_v0 on Line(B, G), h, orthocenter(A, G, midpoint(B, G)), orthocenter(B, I, midpoint(B, G)) we get orthocenter(A, G, midpoint(B, G)) == orthocenter(B, I, midpoint(B, G))
By perpendicular_line_definition on I, Line(G, I), altitude(midpoint(B, G), G, I) we get Line(G, I) == perpendicular_line(I, altitude(midpoint(B, G), G, I))
By perpendicular_line_definition on orthocenter(A, G, midpoint(B, G)), altitude(midpoint(B, G), A, G), g we get altitude(midpoint(B, G), A, G) == perpendicular_line(orthocenter(A, G, midpoint(B, G)), g)
By perpendicular_line_definition on orthocenter(D, G, midpoint(B, G)), h, Line(B, G) we get h == perpendicular_line(orthocenter(D, G, midpoint(B, G)), Line(B, G))
By perpendicular_line_definition on D, i, altitude(midpoint(B, G), B, D) we get i == perpendicular_line(D, altitude(midpoint(B, G), B, D))
By perpendicular_line_definition on orthocenter(A, G, midpoint(B, G)), h, Line(B, G) we get h == perpendicular_line(orthocenter(A, G, midpoint(B, G)), Line(B, G))
By line_unique_intersection_v0 on Line(B, G), h, orthocenter(B, D, midpoint(B, G)), orthocenter(A, G, midpoint(B, G)) we get orthocenter(A, G, midpoint(B, G)) == orthocenter(B, D, midpoint(B, G))
By perpendicular_line_definition on E, g, altitude(midpoint(B, G), A, G) we get g == perpendicular_line(E, altitude(midpoint(B, G), A, G))
By perpendicular_line_definition on orthocenter(B, I, midpoint(B, G)), h, altitude(F, A, D) we get h == perpendicular_line(orthocenter(B, I, midpoint(B, G)), altitude(F, A, D))
By perpendicular_line_definition on orthocenter(B, D, midpoint(B, G)), altitude(midpoint(B, G), B, D), i we get altitude(midpoint(B, G), B, D) == perpendicular_line(orthocenter(B, D, midpoint(B, G)), i)
By line_unique_intersection_v0 on h, Line(B, G), orthocenter(G, I, midpoint(B, G)), midpoint(B, G) we get midpoint(B, G) == orthocenter(G, I, midpoint(B, G))
By line_unique_intersection_v0 on Line(B, G), h, orthocenter(G, I, midpoint(B, G)), orthocenter(A, B, midpoint(B, G)) we get orthocenter(A, B, midpoint(B, G)) == orthocenter(G, I, midpoint(B, G))
By line_unique_intersection_v0 on h, Line(B, G), orthocenter(D, G, midpoint(B, G)), orthocenter(B, I, midpoint(B, G)) we get orthocenter(B, I, midpoint(B, G)) == orthocenter(D, G, midpoint(B, G))
By line_unique_intersection_v0 on h, Line(B, G), orthocenter(G, I, midpoint(B, G)), orthocenter(B, D, midpoint(B, G)) we get orthocenter(B, D, midpoint(B, G)) == orthocenter(G, I, midpoint(B, G))
By line_unique_intersection_v0 on h, Line(B, G), orthocenter(D, G, midpoint(B, G)), orthocenter(B, D, midpoint(B, G)) we get orthocenter(B, D, midpoint(B, G)) == orthocenter(D, G, midpoint(B, G))
By line_unique_intersection_v0 on Line(B, G), h, orthocenter(B, I, midpoint(B, G)), orthocenter(B, D, midpoint(B, G)) we get orthocenter(B, D, midpoint(B, G)) == orthocenter(B, I, midpoint(B, G))
By line_unique_intersection_v0 on Line(B, G), h, orthocenter(A, G, midpoint(B, G)), orthocenter(A, B, midpoint(B, G)) we get orthocenter(A, B, midpoint(B, G)) == orthocenter(A, G, midpoint(B, G))
By line_unique_intersection_v0 on h, Line(B, G), orthocenter(A, B, midpoint(B, G)), orthocenter(B, I, midpoint(B, G)) we get orthocenter(A, B, midpoint(B, G)) == orthocenter(B, I, midpoint(B, G))
By line_unique_intersection_v0 on h, Line(B, G), midpoint(B, G), orthocenter(D, G, midpoint(B, G)) we get midpoint(B, G) == orthocenter(D, G, midpoint(B, G))
By line_unique_intersection_v1 on Line(D, F), i, D, line_intersection(i, altitude(A, B, D)) we get line_intersection(i, altitude(A, B, D)) not in Line(D, F)
By line_unique_intersection_v0 on h, Line(B, G), orthocenter(B, D, midpoint(B, G)), orthocenter(A, B, midpoint(B, G)) we get orthocenter(A, B, midpoint(B, G)) == orthocenter(B, D, midpoint(B, G))
By line_unique_intersection_v0 on Line(B, G), h, orthocenter(A, B, midpoint(B, G)), orthocenter(D, G, midpoint(B, G)) we get orthocenter(A, B, midpoint(B, G)) == orthocenter(D, G, midpoint(B, G))
By line_unique_intersection_v0 on h, Line(B, G), midpoint(B, G), orthocenter(B, I, midpoint(B, G)) we get midpoint(B, G) == orthocenter(B, I, midpoint(B, G))
By line_unique_intersection_v0 on Line(B, G), h, orthocenter(B, I, midpoint(B, G)), orthocenter(G, I, midpoint(B, G)) we get orthocenter(B, I, midpoint(B, G)) == orthocenter(G, I, midpoint(B, G))
By line_unique_intersection_v0 on h, Line(B, G), orthocenter(B, D, midpoint(B, G)), midpoint(B, G) we get midpoint(B, G) == orthocenter(B, D, midpoint(B, G))
By line_unique_intersection_v1 on altitude(A, B, D), h, A, I we get I not in altitude(A, B, D)
By line_unique_intersection_v0 on Line(B, G), h, midpoint(B, G), orthocenter(A, B, midpoint(B, G)) we get midpoint(B, G) == orthocenter(A, B, midpoint(B, G))
By line_unique_intersection_v0 on h, Line(B, G), orthocenter(A, G, midpoint(B, G)), orthocenter(G, I, midpoint(B, G)) we get orthocenter(A, G, midpoint(B, G)) == orthocenter(G, I, midpoint(B, G))
By line_unique_intersection_v0 on Line(B, G), h, orthocenter(A, G, midpoint(B, G)), midpoint(B, G) we get midpoint(B, G) == orthocenter(A, G, midpoint(B, G))
By line_unique_intersection_v0 on h, Line(B, G), orthocenter(G, I, midpoint(B, G)), orthocenter(D, G, midpoint(B, G)) we get orthocenter(D, G, midpoint(B, G)) == orthocenter(G, I, midpoint(B, G))
By line_unique_intersection_v0 on h, Line(B, G), orthocenter(A, G, midpoint(B, G)), orthocenter(D, G, midpoint(B, G)) we get orthocenter(A, G, midpoint(B, G)) == orthocenter(D, G, midpoint(B, G))
By line_unique_intersection_v1 on f, altitude(A, D, G), A, line_intersection(Line(D, G), altitude(A, D, G)) we get line_intersection(Line(D, G), altitude(A, D, G)) not in f
By line_unique_intersection_v1 on Line(G, I), Line(D, G), G, line_intersection(Line(D, G), altitude(A, D, G)) we get line_intersection(Line(D, G), altitude(A, D, G)) not in Line(G, I)
By line_unique_intersection_v1 on i, Line(D, G), D, line_intersection(Line(D, G), altitude(A, D, G)) we get line_intersection(Line(D, G), altitude(A, D, G)) not in i
By line_unique_intersection_v1 on h, altitude(A, B, D), A, line_intersection(i, altitude(A, B, D)) we get line_intersection(i, altitude(A, B, D)) not in h
By line_unique_intersection_v1 on Line(D, H), Line(D, G), D, line_intersection(Line(D, G), altitude(A, D, G)) we get line_intersection(Line(D, G), altitude(A, D, G)) not in Line(D, H)
By line_unique_intersection_v1 on altitude(A, D, G), Line(B, G), orthocenter(A, D, G), orthocenter(A, B, D) we get orthocenter(A, B, D) not in altitude(A, D, G)
By line_unique_intersection_v1 on Line(B, C), i, B, line_intersection(i, altitude(A, B, D)) we get line_intersection(i, altitude(A, B, D)) not in Line(B, C)
By line_unique_intersection_v1 on Line(C, D), Line(D, G), D, line_intersection(Line(D, G), altitude(A, D, G)) we get line_intersection(Line(D, G), altitude(A, D, G)) not in Line(C, D)
By line_unique_intersection_v1 on Line(B, G), altitude(A, B, D), orthocenter(A, B, D), line_intersection(i, altitude(A, B, D)) we get line_intersection(i, altitude(A, B, D)) not in Line(B, G)
By line_unique_intersection_v1 on altitude(A, D, G), h, A, I we get I not in altitude(A, D, G)
By line_unique_intersection_v1 on g, altitude(A, D, G), A, line_intersection(Line(D, G), altitude(A, D, G)) we get line_intersection(Line(D, G), altitude(A, D, G)) not in g
By line_unique_intersection_v1 on altitude(A, B, D), f, A, H we get H not in altitude(A, B, D)
By line_unique_intersection_v1 on h, altitude(A, D, G), A, line_intersection(Line(D, G), altitude(A, D, G)) we get line_intersection(Line(D, G), altitude(A, D, G)) not in h
By line_unique_intersection_v1 on Line(D, E), Line(D, G), D, line_intersection(Line(D, G), altitude(A, D, G)) we get line_intersection(Line(D, G), altitude(A, D, G)) not in Line(D, E)
By line_unique_intersection_v1 on Line(B, G), Line(D, G), G, line_intersection(Line(D, G), altitude(A, D, G)) we get line_intersection(Line(D, G), altitude(A, D, G)) not in Line(B, G)
By line_unique_intersection_v1 on g, altitude(A, B, D), A, line_intersection(i, altitude(A, B, D)) we get line_intersection(i, altitude(A, B, D)) not in g
By line_unique_intersection_v1 on Line(B, I), i, B, line_intersection(i, altitude(A, B, D)) we get line_intersection(i, altitude(A, B, D)) not in Line(B, I)
By line_unique_intersection_v1 on altitude(A, B, D), g, A, E we get E not in altitude(A, B, D)
By line_unique_intersection_v1 on altitude(A, D, G), g, A, C we get C not in altitude(A, D, G)
By line_unique_intersection_v1 on altitude(A, D, G), f, A, H we get H not in altitude(A, D, G)
By line_unique_intersection_v1 on Line(D, H), i, D, line_intersection(i, altitude(A, B, D)) we get line_intersection(i, altitude(A, B, D)) not in Line(D, H)
By line_unique_intersection_v1 on Line(D, E), i, D, line_intersection(i, altitude(A, B, D)) we get line_intersection(i, altitude(A, B, D)) not in Line(D, E)
By line_unique_intersection_v1 on Line(C, D), i, D, line_intersection(i, altitude(A, B, D)) we get line_intersection(i, altitude(A, B, D)) not in Line(C, D)
By line_unique_intersection_v1 on f, i, B, line_intersection(i, altitude(A, B, D)) we get line_intersection(i, altitude(A, B, D)) not in f
By line_unique_intersection_v1 on altitude(A, B, D), Line(B, G), orthocenter(A, B, D), orthocenter(A, D, G) we get orthocenter(A, D, G) not in altitude(A, B, D)
By line_unique_intersection_v1 on Line(D, F), Line(D, G), D, line_intersection(Line(D, G), altitude(A, D, G)) we get line_intersection(Line(D, G), altitude(A, D, G)) not in Line(D, F)
By line_unique_intersection_v1 on altitude(A, D, G), f, A, F we get F not in altitude(A, D, G)
By line_unique_intersection_v1 on altitude(A, B, D), g, A, C we get C not in altitude(A, B, D)
By line_unique_intersection_v1 on Line(D, G), i, D, line_intersection(i, altitude(A, B, D)) we get line_intersection(i, altitude(A, B, D)) not in Line(D, G)
By between_implies_orientation on line_intersection(i, altitude(A, B, D)), G, midpoint(B, G), B we get orientation(B, line_intersection(i, altitude(A, B, D)), midpoint(B, G)) == orientation(G, midpoint(B, G), line_intersection(i, altitude(A, B, D))) mod 360, orientation(B, line_intersection(i, altitude(A, B, D)), G) == orientation(G, midpoint(B, G), line_intersection(i, altitude(A, B, D))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(D, G), altitude(A, D, G)), midpoint(B, G), B, G we get orientation(B, G, line_intersection(Line(D, G), altitude(A, D, G))) == orientation(B, midpoint(B, G), line_intersection(Line(D, G), altitude(A, D, G))) mod 360
By projection_definition on orthocenter(A, B, D), midpoint(B, G), h we get midpoint(B, G) == projection(orthocenter(A, B, D), h)
By between_implies_orientation on line_intersection(i, altitude(A, B, D)), B, midpoint(B, G), G we get orientation(B, midpoint(B, G), line_intersection(i, altitude(A, B, D))) == orientation(G, line_intersection(i, altitude(A, B, D)), midpoint(B, G)) mod 360, orientation(B, G, line_intersection(i, altitude(A, B, D))) == orientation(B, midpoint(B, G), line_intersection(i, altitude(A, B, D))) mod 360
By projection_definition on orthocenter(A, D, G), midpoint(B, G), h we get midpoint(B, G) == projection(orthocenter(A, D, G), h)
By between_implies_orientation on line_intersection(Line(D, G), altitude(A, D, G)), B, midpoint(B, G), G we get orientation(B, midpoint(B, G), line_intersection(Line(D, G), altitude(A, D, G))) == orientation(G, line_intersection(Line(D, G), altitude(A, D, G)), midpoint(B, G)) mod 360, orientation(B, G, line_intersection(Line(D, G), altitude(A, D, G))) == orientation(B, midpoint(B, G), line_intersection(Line(D, G), altitude(A, D, G))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(D, G), altitude(A, D, G)), B, G, midpoint(B, G) we get orientation(B, line_intersection(Line(D, G), altitude(A, D, G)), G) == orientation(G, midpoint(B, G), line_intersection(Line(D, G), altitude(A, D, G))) mod 360
By projection_definition on A, line_intersection(Line(D, G), altitude(A, D, G)), Line(D, G) we get projection(A, Line(D, G)) == line_intersection(Line(D, G), altitude(A, D, G))
By between_implies_orientation on line_intersection(Line(D, G), altitude(A, D, G)), G, midpoint(B, G), B we get orientation(B, line_intersection(Line(D, G), altitude(A, D, G)), midpoint(B, G)) == orientation(G, midpoint(B, G), line_intersection(Line(D, G), altitude(A, D, G))) mod 360, orientation(B, line_intersection(Line(D, G), altitude(A, D, G)), G) == orientation(G, midpoint(B, G), line_intersection(Line(D, G), altitude(A, D, G))) mod 360
By projection_definition on A, line_intersection(i, altitude(A, B, D)), i we get projection(A, i) == line_intersection(i, altitude(A, B, D))
By parallel_line_definition on orthocenter(B, D, midpoint(B, G)), Line(B, G), altitude(E, A, D) we get Line(B, G) == parallel_line(orthocenter(B, D, midpoint(B, G)), altitude(E, A, D))
By parallel_line_definition on orthocenter(D, G, midpoint(B, G)), Line(B, G), altitude(F, A, D) we get Line(B, G) == parallel_line(orthocenter(D, G, midpoint(B, G)), altitude(F, A, D))
By parallel_line_definition on orthocenter(D, G, midpoint(B, G)), Line(B, G), altitude(E, A, D) we get Line(B, G) == parallel_line(orthocenter(D, G, midpoint(B, G)), altitude(E, A, D))
By parallel_line_definition on orthocenter(A, G, midpoint(B, G)), Line(B, G), altitude(E, A, D) we get Line(B, G) == parallel_line(orthocenter(A, G, midpoint(B, G)), altitude(E, A, D))
By parallel_line_definition on orthocenter(A, G, midpoint(B, G)), Line(B, G), altitude(F, A, D) we get Line(B, G) == parallel_line(orthocenter(A, G, midpoint(B, G)), altitude(F, A, D))
By parallel_line_definition on orthocenter(B, I, midpoint(B, G)), Line(B, G), altitude(F, A, D) we get Line(B, G) == parallel_line(orthocenter(B, I, midpoint(B, G)), altitude(F, A, D))
By parallel_line_definition on orthocenter(B, D, midpoint(B, G)), Line(B, G), altitude(F, A, D) we get Line(B, G) == parallel_line(orthocenter(B, D, midpoint(B, G)), altitude(F, A, D))
By parallel_line_definition on orthocenter(G, I, midpoint(B, G)), Line(B, G), altitude(E, A, D) we get Line(B, G) == parallel_line(orthocenter(G, I, midpoint(B, G)), altitude(E, A, D))
By parallel_line_definition on orthocenter(G, I, midpoint(B, G)), Line(B, G), altitude(F, A, D) we get Line(B, G) == parallel_line(orthocenter(G, I, midpoint(B, G)), altitude(F, A, D))
By parallel_line_definition on orthocenter(B, I, midpoint(B, G)), Line(B, G), altitude(E, A, D) we get Line(B, G) == parallel_line(orthocenter(B, I, midpoint(B, G)), altitude(E, A, D))
By parallel_line_definition on orthocenter(A, B, midpoint(B, G)), Line(B, G), altitude(F, A, D) we get Line(B, G) == parallel_line(orthocenter(A, B, midpoint(B, G)), altitude(F, A, D))
By parallel_line_definition on orthocenter(A, B, midpoint(B, G)), Line(B, G), altitude(E, A, D) we get Line(B, G) == parallel_line(orthocenter(A, B, midpoint(B, G)), altitude(E, A, D))
By different_points_v1 on A, line_intersection(Line(D, G), altitude(A, D, G)) we get 0 != distance(A, line_intersection(Line(D, G), altitude(A, D, G)))
By different_points_v1 on orthocenter(A, B, D), midpoint(B, G) we get 0 != distance(midpoint(B, G), orthocenter(A, B, D))
By different_points_v1 on orthocenter(A, D, G), midpoint(B, G) we get 0 != distance(midpoint(B, G), orthocenter(A, D, G))
By different_points_v1 on A, line_intersection(i, altitude(A, B, D)) we get 0 != distance(A, line_intersection(i, altitude(A, B, D)))
By perpendicular_direction_conditions_v0_r on B, D, line_intersection(i, altitude(A, B, D)), A we get 180 == 2 * direction(B, D) - 2 * direction(line_intersection(i, altitude(A, B, D)), A) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(i, altitude(A, B, D)), B, D we get 180 == 2 * direction(A, line_intersection(i, altitude(A, B, D))) - 2 * direction(B, D) mod 360
By in_imply_collinear on orthocenter(A, B, midpoint(B, G)), B, G we get collinear(B, G, orthocenter(A, B, midpoint(B, G)))
By perpendicular_direction_conditions_v0_r on B, D, A, line_intersection(i, altitude(A, B, D)) we get 180 == 2 * direction(B, D) - 2 * direction(A, line_intersection(i, altitude(A, B, D))) mod 360
By in_imply_collinear on orthocenter(B, D, midpoint(B, G)), A, D we get collinear(A, D, orthocenter(B, D, midpoint(B, G)))
By in_imply_collinear on orthocenter(A, G, midpoint(B, G)), G, orthocenter(A, D, G) we get collinear(G, orthocenter(A, D, G), orthocenter(A, G, midpoint(B, G)))
By perpendicular_direction_conditions_v0_r on G, D, line_intersection(Line(D, G), altitude(A, D, G)), A we get 180 == 2 * direction(G, D) - 2 * direction(line_intersection(Line(D, G), altitude(A, D, G)), A) mod 360
By directions_draw_angle on orthocenter(A, D, G), A, G we get exists(angle(orthocenter(A, D, G), A, G))
By in_imply_collinear on orthocenter(A, G, midpoint(B, G)), orthocenter(A, D, G), midpoint(B, G) we get collinear(midpoint(B, G), orthocenter(A, D, G), orthocenter(A, G, midpoint(B, G)))
By in_imply_collinear on orthocenter(A, B, midpoint(B, G)), A, D we get collinear(A, D, orthocenter(A, B, midpoint(B, G)))
By perpendicular_direction_conditions_v0_r on A, line_intersection(i, altitude(A, B, D)), D, B we get 180 == 2 * direction(A, line_intersection(i, altitude(A, B, D))) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(D, G), altitude(A, D, G)), A, G, D we get 180 == 2 * direction(line_intersection(Line(D, G), altitude(A, D, G)), A) - 2 * direction(G, D) mod 360
By in_imply_collinear on orthocenter(A, G, midpoint(B, G)), D, midpoint(B, G) we get collinear(D, midpoint(B, G), orthocenter(A, G, midpoint(B, G)))
By in_imply_collinear on orthocenter(A, B, midpoint(B, G)), I, D we get collinear(D, I, orthocenter(A, B, midpoint(B, G)))
By perpendicular_direction_conditions_v0_r on D, G, line_intersection(Line(D, G), altitude(A, D, G)), A we get 180 == 2 * direction(D, G) - 2 * direction(line_intersection(Line(D, G), altitude(A, D, G)), A) mod 360
By in_imply_collinear on orthocenter(D, G, midpoint(B, G)), midpoint(B, G), I we get collinear(I, midpoint(B, G), orthocenter(D, G, midpoint(B, G)))
By in_imply_collinear on orthocenter(B, D, midpoint(B, G)), orthocenter(A, B, D), G we get collinear(G, orthocenter(A, B, D), orthocenter(B, D, midpoint(B, G)))
By perpendicular_direction_conditions_v0_r on line_intersection(i, altitude(A, B, D)), A, D, B we get 180 == 2 * direction(line_intersection(i, altitude(A, B, D)), A) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, altitude(A, B, D)), A, B, D we get 180 == 2 * direction(line_intersection(i, altitude(A, B, D)), A) - 2 * direction(B, D) mod 360
By in_imply_collinear on orthocenter(A, B, midpoint(B, G)), A, midpoint(B, G) we get collinear(A, midpoint(B, G), orthocenter(A, B, midpoint(B, G)))
By line_inequality on altitude(midpoint(B, G), D, G), Line(B, I), midpoint(B, G) we get Line(B, I) != altitude(midpoint(B, G), D, G)
By perpendicular_direction_conditions_v0_r on G, D, A, line_intersection(Line(D, G), altitude(A, D, G)) we get 180 == 2 * direction(G, D) - 2 * direction(A, line_intersection(Line(D, G), altitude(A, D, G))) mod 360
By in_imply_collinear on orthocenter(D, G, midpoint(B, G)), A, I we get collinear(A, I, orthocenter(D, G, midpoint(B, G)))
By perpendicular_direction_conditions_v0_r on A, line_intersection(Line(D, G), altitude(A, D, G)), G, D we get 180 == 2 * direction(A, line_intersection(Line(D, G), altitude(A, D, G))) - 2 * direction(G, D) mod 360
By in_imply_collinear on orthocenter(B, D, midpoint(B, G)), I, A we get collinear(A, I, orthocenter(B, D, midpoint(B, G)))
By in_imply_collinear on orthocenter(B, D, midpoint(B, G)), orthocenter(A, D, G), G we get collinear(G, orthocenter(A, D, G), orthocenter(B, D, midpoint(B, G)))
By perpendicular_direction_conditions_v0_r on A, line_intersection(Line(D, G), altitude(A, D, G)), D, G we get 180 == 2 * direction(A, line_intersection(Line(D, G), altitude(A, D, G))) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on D, G, A, line_intersection(Line(D, G), altitude(A, D, G)) we get 180 == 2 * direction(D, G) - 2 * direction(A, line_intersection(Line(D, G), altitude(A, D, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(D, G), altitude(A, D, G)), A, D, G we get 180 == 2 * direction(line_intersection(Line(D, G), altitude(A, D, G)), A) - 2 * direction(D, G) mod 360
By in_imply_collinear on orthocenter(D, G, midpoint(B, G)), G, midpoint(B, G) we get collinear(G, midpoint(B, G), orthocenter(D, G, midpoint(B, G)))
By perpendicular_direction_conditions_v0_r on D, B, line_intersection(i, altitude(A, B, D)), A we get 180 == 2 * direction(D, B) - 2 * direction(line_intersection(i, altitude(A, B, D)), A) mod 360
By perpendicular_direction_conditions_v0_r on D, B, A, line_intersection(i, altitude(A, B, D)) we get 180 == 2 * direction(D, B) - 2 * direction(A, line_intersection(i, altitude(A, B, D))) mod 360
By external_angle_bisector_definition_v0 on A, orthocenter(A, D, G), A, midpoint(B, G) we get 180 == angle(A, midpoint(B, G), orthocenter(A, D, G)) + angle(A, midpoint(B, G), orthocenter(A, D, G)) mod 360
By in_imply_collinear on orthocenter(B, I, midpoint(B, G)), orthocenter(A, B, D), midpoint(B, G) we get collinear(midpoint(B, G), orthocenter(A, B, D), orthocenter(B, I, midpoint(B, G)))
By in_imply_collinear on orthocenter(A, B, midpoint(B, G)), midpoint(B, G), orthocenter(A, B, D) we get collinear(midpoint(B, G), orthocenter(A, B, D), orthocenter(A, B, midpoint(B, G)))
By in_imply_collinear on orthocenter(A, G, midpoint(B, G)), midpoint(B, G), I we get collinear(I, midpoint(B, G), orthocenter(A, G, midpoint(B, G)))
By in_imply_collinear on orthocenter(B, D, midpoint(B, G)), orthocenter(A, B, D), B we get collinear(B, orthocenter(A, B, D), orthocenter(B, D, midpoint(B, G)))
By in_imply_collinear on orthocenter(A, G, midpoint(B, G)), B, orthocenter(A, D, G) we get collinear(B, orthocenter(A, D, G), orthocenter(A, G, midpoint(B, G)))
By in_imply_collinear on orthocenter(G, I, midpoint(B, G)), A, midpoint(B, G) we get collinear(A, midpoint(B, G), orthocenter(G, I, midpoint(B, G)))
By external_angle_bisector_definition_v0 on D, orthocenter(A, B, D), A, midpoint(B, G) we get 180 == angle(D, midpoint(B, G), orthocenter(A, B, D)) + angle(A, midpoint(B, G), orthocenter(A, B, D)) mod 360
By line_inequality on altitude(midpoint(B, G), A, B), Line(B, C), midpoint(B, G) we get Line(B, C) != altitude(midpoint(B, G), A, B)
By in_imply_collinear on orthocenter(B, I, midpoint(B, G)), G, B we get collinear(B, G, orthocenter(B, I, midpoint(B, G)))
By in_imply_collinear on orthocenter(B, I, midpoint(B, G)), midpoint(B, G), D we get collinear(D, midpoint(B, G), orthocenter(B, I, midpoint(B, G)))
By in_imply_collinear on orthocenter(G, I, midpoint(B, G)), orthocenter(A, D, G), midpoint(B, G) we get collinear(midpoint(B, G), orthocenter(A, D, G), orthocenter(G, I, midpoint(B, G)))
By in_imply_collinear on orthocenter(B, D, midpoint(B, G)), midpoint(B, G), A we get collinear(A, midpoint(B, G), orthocenter(B, D, midpoint(B, G)))
By in_imply_collinear on orthocenter(G, I, midpoint(B, G)), G, orthocenter(A, B, D) we get collinear(G, orthocenter(A, B, D), orthocenter(G, I, midpoint(B, G)))
By in_imply_collinear on orthocenter(G, I, midpoint(B, G)), midpoint(B, G), orthocenter(A, B, D) we get collinear(midpoint(B, G), orthocenter(A, B, D), orthocenter(G, I, midpoint(B, G)))
By in_imply_collinear on orthocenter(B, I, midpoint(B, G)), midpoint(B, G), orthocenter(A, D, G) we get collinear(midpoint(B, G), orthocenter(A, D, G), orthocenter(B, I, midpoint(B, G)))
By in_imply_collinear on orthocenter(D, G, midpoint(B, G)), A, D we get collinear(A, D, orthocenter(D, G, midpoint(B, G)))
By in_imply_collinear on orthocenter(G, I, midpoint(B, G)), B, G we get collinear(B, G, orthocenter(G, I, midpoint(B, G)))
By in_imply_collinear on orthocenter(D, G, midpoint(B, G)), B, G we get collinear(B, G, orthocenter(D, G, midpoint(B, G)))
By in_imply_collinear on orthocenter(B, I, midpoint(B, G)), G, orthocenter(A, B, D) we get collinear(G, orthocenter(A, B, D), orthocenter(B, I, midpoint(B, G)))
By in_imply_collinear on orthocenter(A, G, midpoint(B, G)), A, I we get collinear(A, I, orthocenter(A, G, midpoint(B, G)))
By line_containment_inequality on orthocenter(B, D, midpoint(B, G)), A, Line(B, G) we get A != orthocenter(B, D, midpoint(B, G))
By in_imply_collinear on orthocenter(A, B, midpoint(B, G)), midpoint(B, G), B we get collinear(B, midpoint(B, G), orthocenter(A, B, midpoint(B, G)))
By in_imply_collinear on orthocenter(B, D, midpoint(B, G)), midpoint(B, G), orthocenter(A, B, D) we get collinear(midpoint(B, G), orthocenter(A, B, D), orthocenter(B, D, midpoint(B, G)))
By in_imply_collinear on orthocenter(G, I, midpoint(B, G)), D, I we get collinear(D, I, orthocenter(G, I, midpoint(B, G)))
By in_imply_collinear on orthocenter(B, I, midpoint(B, G)), orthocenter(A, D, G), B we get collinear(B, orthocenter(A, D, G), orthocenter(B, I, midpoint(B, G)))
By in_imply_collinear on orthocenter(D, G, midpoint(B, G)), D, midpoint(B, G) we get collinear(D, midpoint(B, G), orthocenter(D, G, midpoint(B, G)))
By in_imply_collinear on orthocenter(A, G, midpoint(B, G)), orthocenter(A, B, D), B we get collinear(B, orthocenter(A, B, D), orthocenter(A, G, midpoint(B, G)))
By directions_draw_angle on orthocenter(A, D, G), A, E we get exists(angle(orthocenter(A, D, G), A, E))
By in_imply_collinear on orthocenter(B, I, midpoint(B, G)), G, orthocenter(A, D, G) we get collinear(G, orthocenter(A, D, G), orthocenter(B, I, midpoint(B, G)))
By in_imply_collinear on orthocenter(B, I, midpoint(B, G)), D, A we get collinear(A, D, orthocenter(B, I, midpoint(B, G)))
By in_imply_collinear on orthocenter(D, G, midpoint(B, G)), I, D we get collinear(D, I, orthocenter(D, G, midpoint(B, G)))
By in_imply_collinear on orthocenter(A, B, midpoint(B, G)), I, midpoint(B, G) we get collinear(I, midpoint(B, G), orthocenter(A, B, midpoint(B, G)))
By in_imply_collinear on orthocenter(B, D, midpoint(B, G)), I, midpoint(B, G) we get collinear(I, midpoint(B, G), orthocenter(B, D, midpoint(B, G)))
By in_imply_collinear on orthocenter(A, D, G), orthocenter(A, B, D), midpoint(B, G) we get collinear(midpoint(B, G), orthocenter(A, B, D), orthocenter(A, D, G))
By in_imply_collinear on orthocenter(A, G, midpoint(B, G)), D, I we get collinear(D, I, orthocenter(A, G, midpoint(B, G)))
By in_imply_collinear on orthocenter(G, I, midpoint(B, G)), A, D we get collinear(A, D, orthocenter(G, I, midpoint(B, G)))
By in_imply_collinear on orthocenter(B, D, midpoint(B, G)), B, midpoint(B, G) we get collinear(B, midpoint(B, G), orthocenter(B, D, midpoint(B, G)))
By in_imply_collinear on orthocenter(B, I, midpoint(B, G)), B, orthocenter(A, B, D) we get collinear(B, orthocenter(A, B, D), orthocenter(B, I, midpoint(B, G)))
By in_imply_collinear on orthocenter(A, B, midpoint(B, G)), A, I we get collinear(A, I, orthocenter(A, B, midpoint(B, G)))
By in_imply_collinear on orthocenter(G, I, midpoint(B, G)), orthocenter(A, D, G), G we get collinear(G, orthocenter(A, D, G), orthocenter(G, I, midpoint(B, G)))
By point_on_perpendicular_bisector on B, G, orthocenter(B, D, midpoint(B, G)), h we get distance(B, orthocenter(B, D, midpoint(B, G))) == distance(G, orthocenter(B, D, midpoint(B, G)))
By in_imply_collinear on orthocenter(A, B, midpoint(B, G)), G, midpoint(B, G) we get collinear(G, midpoint(B, G), orthocenter(A, B, midpoint(B, G)))
By in_imply_collinear on orthocenter(G, I, midpoint(B, G)), D, midpoint(B, G) we get collinear(D, midpoint(B, G), orthocenter(G, I, midpoint(B, G)))
By in_imply_collinear on orthocenter(D, G, midpoint(B, G)), B, orthocenter(A, B, D) we get collinear(B, orthocenter(A, B, D), orthocenter(D, G, midpoint(B, G)))
By in_imply_collinear on orthocenter(A, G, midpoint(B, G)), A, D we get collinear(A, D, orthocenter(A, G, midpoint(B, G)))
By in_imply_collinear on orthocenter(A, B, midpoint(B, G)), orthocenter(A, B, D), G we get collinear(G, orthocenter(A, B, D), orthocenter(A, B, midpoint(B, G)))
By in_imply_collinear on orthocenter(G, I, midpoint(B, G)), orthocenter(A, D, G), B we get collinear(B, orthocenter(A, D, G), orthocenter(G, I, midpoint(B, G)))
By in_imply_collinear on orthocenter(B, I, midpoint(B, G)), midpoint(B, G), B we get collinear(B, midpoint(B, G), orthocenter(B, I, midpoint(B, G)))
By in_imply_collinear on orthocenter(G, I, midpoint(B, G)), A, I we get collinear(A, I, orthocenter(G, I, midpoint(B, G)))
By in_imply_collinear on orthocenter(D, G, midpoint(B, G)), orthocenter(A, D, G), G we get collinear(G, orthocenter(A, D, G), orthocenter(D, G, midpoint(B, G)))
By in_imply_collinear on orthocenter(D, G, midpoint(B, G)), G, orthocenter(A, B, D) we get collinear(G, orthocenter(A, B, D), orthocenter(D, G, midpoint(B, G)))
By in_imply_collinear on orthocenter(B, D, midpoint(B, G)), orthocenter(A, D, G), B we get collinear(B, orthocenter(A, D, G), orthocenter(B, D, midpoint(B, G)))
By in_imply_collinear on orthocenter(B, D, midpoint(B, G)), orthocenter(A, D, G), midpoint(B, G) we get collinear(midpoint(B, G), orthocenter(A, D, G), orthocenter(B, D, midpoint(B, G)))
By in_imply_collinear on orthocenter(A, G, midpoint(B, G)), B, midpoint(B, G) we get collinear(B, midpoint(B, G), orthocenter(A, G, midpoint(B, G)))
By in_imply_collinear on orthocenter(B, I, midpoint(B, G)), A, I we get collinear(A, I, orthocenter(B, I, midpoint(B, G)))
By in_imply_collinear on orthocenter(A, B, midpoint(B, G)), B, orthocenter(A, D, G) we get collinear(B, orthocenter(A, D, G), orthocenter(A, B, midpoint(B, G)))
By in_imply_collinear on orthocenter(G, I, midpoint(B, G)), midpoint(B, G), G we get collinear(G, midpoint(B, G), orthocenter(G, I, midpoint(B, G)))
By in_imply_collinear on orthocenter(A, G, midpoint(B, G)), midpoint(B, G), G we get collinear(G, midpoint(B, G), orthocenter(A, G, midpoint(B, G)))
By in_imply_collinear on orthocenter(D, G, midpoint(B, G)), B, midpoint(B, G) we get collinear(B, midpoint(B, G), orthocenter(D, G, midpoint(B, G)))
By in_imply_collinear on orthocenter(B, I, midpoint(B, G)), G, midpoint(B, G) we get collinear(G, midpoint(B, G), orthocenter(B, I, midpoint(B, G)))
By line_containment_inequality on orthocenter(B, I, midpoint(B, G)), E, Line(B, G) we get E != orthocenter(B, I, midpoint(B, G))
By in_imply_collinear on orthocenter(B, D, midpoint(B, G)), D, I we get collinear(D, I, orthocenter(B, D, midpoint(B, G)))
By in_imply_collinear on orthocenter(A, G, midpoint(B, G)), B, G we get collinear(B, G, orthocenter(A, G, midpoint(B, G)))
By in_imply_collinear on orthocenter(B, D, midpoint(B, G)), midpoint(B, G), D we get collinear(D, midpoint(B, G), orthocenter(B, D, midpoint(B, G)))
By in_imply_collinear on orthocenter(D, G, midpoint(B, G)), midpoint(B, G), orthocenter(A, B, D) we get collinear(midpoint(B, G), orthocenter(A, B, D), orthocenter(D, G, midpoint(B, G)))
By in_imply_collinear on orthocenter(D, G, midpoint(B, G)), orthocenter(A, D, G), midpoint(B, G) we get collinear(midpoint(B, G), orthocenter(A, D, G), orthocenter(D, G, midpoint(B, G)))
By in_imply_collinear on orthocenter(A, B, midpoint(B, G)), G, orthocenter(A, D, G) we get collinear(G, orthocenter(A, D, G), orthocenter(A, B, midpoint(B, G)))
By in_imply_collinear on orthocenter(A, B, midpoint(B, G)), orthocenter(A, D, G), midpoint(B, G) we get collinear(midpoint(B, G), orthocenter(A, D, G), orthocenter(A, B, midpoint(B, G)))
By in_imply_collinear on orthocenter(D, G, midpoint(B, G)), B, orthocenter(A, D, G) we get collinear(B, orthocenter(A, D, G), orthocenter(D, G, midpoint(B, G)))
By in_imply_collinear on orthocenter(B, I, midpoint(B, G)), midpoint(B, G), A we get collinear(A, midpoint(B, G), orthocenter(B, I, midpoint(B, G)))
By in_imply_collinear on orthocenter(G, I, midpoint(B, G)), orthocenter(A, B, D), B we get collinear(B, orthocenter(A, B, D), orthocenter(G, I, midpoint(B, G)))
By in_imply_collinear on orthocenter(B, D, midpoint(B, G)), G, midpoint(B, G) we get collinear(G, midpoint(B, G), orthocenter(B, D, midpoint(B, G)))
By in_imply_collinear on orthocenter(A, G, midpoint(B, G)), A, midpoint(B, G) we get collinear(A, midpoint(B, G), orthocenter(A, G, midpoint(B, G)))
By in_imply_collinear on orthocenter(A, G, midpoint(B, G)), G, orthocenter(A, B, D) we get collinear(G, orthocenter(A, B, D), orthocenter(A, G, midpoint(B, G)))
By in_imply_collinear on orthocenter(B, D, midpoint(B, G)), B, G we get collinear(B, G, orthocenter(B, D, midpoint(B, G)))
By in_imply_collinear on orthocenter(A, B, midpoint(B, G)), B, orthocenter(A, B, D) we get collinear(B, orthocenter(A, B, D), orthocenter(A, B, midpoint(B, G)))
By directions_draw_angle on midpoint(B, G), orthocenter(A, B, D), F we get exists(angle(midpoint(B, G), orthocenter(A, B, D), F))
By in_imply_collinear on orthocenter(G, I, midpoint(B, G)), midpoint(B, G), I we get collinear(I, midpoint(B, G), orthocenter(G, I, midpoint(B, G)))
By in_imply_collinear on orthocenter(A, G, midpoint(B, G)), orthocenter(A, B, D), midpoint(B, G) we get collinear(midpoint(B, G), orthocenter(A, B, D), orthocenter(A, G, midpoint(B, G)))
By in_imply_collinear on orthocenter(D, G, midpoint(B, G)), A, midpoint(B, G) we get collinear(A, midpoint(B, G), orthocenter(D, G, midpoint(B, G)))
By in_imply_collinear on orthocenter(G, I, midpoint(B, G)), B, midpoint(B, G) we get collinear(B, midpoint(B, G), orthocenter(G, I, midpoint(B, G)))
By in_imply_collinear on orthocenter(A, B, midpoint(B, G)), midpoint(B, G), D we get collinear(D, midpoint(B, G), orthocenter(A, B, midpoint(B, G)))
By external_angle_bisector_definition_v0 on I, orthocenter(A, D, G), I, midpoint(B, G) we get 180 == angle(I, midpoint(B, G), orthocenter(A, D, G)) + angle(I, midpoint(B, G), orthocenter(A, D, G)) mod 360
By in_imply_collinear on orthocenter(B, I, midpoint(B, G)), D, I we get collinear(D, I, orthocenter(B, I, midpoint(B, G)))
By in_imply_collinear on orthocenter(B, I, midpoint(B, G)), I, midpoint(B, G) we get collinear(I, midpoint(B, G), orthocenter(B, I, midpoint(B, G)))
By line_containment_inequality on orthocenter(A, G, midpoint(B, G)), C, h we get C != orthocenter(A, G, midpoint(B, G))
By perpendicular_angle_conditions_v0 on orthocenter(A, B, D), midpoint(B, G), I we get angle(orthocenter(A, B, D), midpoint(B, G), I) == orientation(I, orthocenter(A, B, D), midpoint(B, G)) mod 360
By line_containment_inequality on orthocenter(A, B, midpoint(B, G)), H, Line(B, G) we get H != orthocenter(A, B, midpoint(B, G))
By double_perpendicular_and_parallel_v0 on altitude(F, B, D), i, altitude(midpoint(B, G), B, D) we get parallel(altitude(F, B, D), altitude(midpoint(B, G), B, D))
By directions_draw_angle on orthocenter(A, B, D), A, G we get exists(angle(orthocenter(A, B, D), A, G))
By not_in_line_equivalent_to_not_collinear_v0 on D, A, line_intersection(i, altitude(A, B, D)) we get not_collinear(A, D, line_intersection(i, altitude(A, B, D))), exists(Line(A, line_intersection(i, altitude(A, B, D))))
By point_on_perpendicular_bisector on G, B, orthocenter(B, I, midpoint(B, G)), h we get distance(B, orthocenter(B, I, midpoint(B, G))) == distance(G, orthocenter(B, I, midpoint(B, G)))
By not_in_line_equivalent_to_not_collinear_v0 on F, midpoint(B, G), orthocenter(A, D, G) we get not_collinear(F, midpoint(B, G), orthocenter(A, D, G)), exists(Line(midpoint(B, G), orthocenter(A, D, G)))
By line_containment_inequality on orthocenter(B, D, midpoint(B, G)), D, Line(B, G) we get D != orthocenter(B, D, midpoint(B, G))
By external_angle_bisector_definition_v0 on A, orthocenter(A, D, G), D, midpoint(B, G) we get 180 == angle(A, midpoint(B, G), orthocenter(A, D, G)) + angle(D, midpoint(B, G), orthocenter(A, D, G)) mod 360
By double_perpendicular_and_parallel_v0 on altitude(A, B, D), i, altitude(midpoint(B, G), B, D) we get parallel(altitude(A, B, D), altitude(midpoint(B, G), B, D))
By directions_draw_angle on orthocenter(A, D, G), A, C we get exists(angle(orthocenter(A, D, G), A, C))
By not_in_line_equivalent_to_not_collinear_v0 on H, orthocenter(A, D, G), midpoint(B, G) we get not_collinear(H, midpoint(B, G), orthocenter(A, D, G)), exists(Line(midpoint(B, G), orthocenter(A, D, G)))
By external_angle_bisector_definition_v0 on A, orthocenter(A, B, D), A, midpoint(B, G) we get 180 == angle(A, midpoint(B, G), orthocenter(A, B, D)) + angle(A, midpoint(B, G), orthocenter(A, B, D)) mod 360
By point_on_perpendicular_bisector on B, G, orthocenter(A, B, midpoint(B, G)), h we get distance(B, orthocenter(A, B, midpoint(B, G))) == distance(G, orthocenter(A, B, midpoint(B, G)))
By line_inequality on altitude(midpoint(B, G), B, I), altitude(A, B, D), midpoint(B, G) we get altitude(A, B, D) != altitude(midpoint(B, G), B, I)
By not_in_line_equivalent_to_not_collinear_v0 on E, midpoint(B, G), orthocenter(A, B, D) we get not_collinear(E, midpoint(B, G), orthocenter(A, B, D)), exists(Line(midpoint(B, G), orthocenter(A, B, D)))
By internal_angle_bisector_definition_v0 on I, orthocenter(A, B, D), D, midpoint(B, G) we get angle(I, midpoint(B, G), orthocenter(A, B, D)) == angle(orthocenter(A, B, D), midpoint(B, G), D) mod 360
By line_inequality on altitude(midpoint(B, G), B, I), Line(D, E), midpoint(B, G) we get Line(D, E) != altitude(midpoint(B, G), B, I)
By double_perpendicular_and_parallel_v0 on altitude(E, D, G), Line(D, G), altitude(midpoint(B, G), D, G) we get parallel(altitude(E, D, G), altitude(midpoint(B, G), D, G))
By not_in_line_equivalent_to_not_collinear_v0 on F, A, line_intersection(i, altitude(A, B, D)) we get not_collinear(A, F, line_intersection(i, altitude(A, B, D))), exists(Line(A, line_intersection(i, altitude(A, B, D))))
By directions_draw_angle on A, orthocenter(A, B, D), G we get exists(angle(A, orthocenter(A, B, D), G))
By internal_angle_bisector_definition_v0 on A, orthocenter(A, D, G), I, midpoint(B, G) we get angle(A, midpoint(B, G), orthocenter(A, D, G)) == angle(orthocenter(A, D, G), midpoint(B, G), I) mod 360
By reverse_direction on orthocenter(A, B, D), A we get 180 == direction(orthocenter(A, B, D), A) - direction(A, orthocenter(A, B, D)) mod 360
By internal_angle_bisector_definition_v0 on D, orthocenter(A, D, G), I, midpoint(B, G) we get angle(D, midpoint(B, G), orthocenter(A, D, G)) == angle(orthocenter(A, D, G), midpoint(B, G), I) mod 360
By perpendicular_angle_conditions_v0 on orthocenter(A, D, G), midpoint(B, G), D we get angle(orthocenter(A, D, G), midpoint(B, G), D) == orientation(D, orthocenter(A, D, G), midpoint(B, G)) mod 360
By directions_draw_angle on G, orthocenter(A, B, D), A we get exists(angle(G, orthocenter(A, B, D), A))
By internal_angle_bisector_definition_v0 on I, orthocenter(A, B, D), A, midpoint(B, G) we get angle(I, midpoint(B, G), orthocenter(A, B, D)) == angle(orthocenter(A, B, D), midpoint(B, G), A) mod 360
By reverse_direction on midpoint(B, G), orthocenter(A, B, D) we get 180 == direction(midpoint(B, G), orthocenter(A, B, D)) - direction(orthocenter(A, B, D), midpoint(B, G)) mod 360
By point_on_perpendicular_bisector on G, B, orthocenter(D, G, midpoint(B, G)), h we get distance(B, orthocenter(D, G, midpoint(B, G))) == distance(G, orthocenter(D, G, midpoint(B, G)))
By line_containment_inequality on orthocenter(A, G, midpoint(B, G)), A, Line(B, G) we get A != orthocenter(A, G, midpoint(B, G))
By line_inequality on altitude(midpoint(B, G), A, B), altitude(A, B, D), midpoint(B, G) we get altitude(A, B, D) != altitude(midpoint(B, G), A, B)
By reverse_direction on midpoint(B, G), orthocenter(A, D, G) we get 180 == direction(midpoint(B, G), orthocenter(A, D, G)) - direction(orthocenter(A, D, G), midpoint(B, G)) mod 360
By line_circle_intersection_has_at_most_two_points_0 on midpoint(B, G), D, A, Circle(D, E, G) we get A not in Circle(D, E, G)
By external_angle_bisector_definition_v0 on I, orthocenter(A, B, D), I, midpoint(B, G) we get 180 == angle(I, midpoint(B, G), orthocenter(A, B, D)) + angle(I, midpoint(B, G), orthocenter(A, B, D)) mod 360
By directions_draw_angle on orthocenter(A, B, D), midpoint(B, G), D we get exists(angle(orthocenter(A, B, D), midpoint(B, G), D))
By directions_draw_angle on midpoint(B, G), A, orthocenter(A, D, G) we get exists(angle(midpoint(B, G), A, orthocenter(A, D, G)))
By directions_draw_angle on orthocenter(A, D, G), A, H we get exists(angle(orthocenter(A, D, G), A, H))
By directions_draw_angle on orthocenter(A, D, G), A, D we get exists(angle(orthocenter(A, D, G), A, D))
By directions_draw_angle on orthocenter(A, B, D), A, D we get exists(angle(orthocenter(A, B, D), A, D))
By directions_draw_angle on B, A, orthocenter(A, B, D) we get exists(angle(B, A, orthocenter(A, B, D)))
By not_in_line_equivalent_to_not_collinear_v0_r on H, orthocenter(A, D, G), A we get H not in Line(A, orthocenter(A, D, G))
By external_angle_bisector_definition_v0 on D, orthocenter(A, D, G), D, midpoint(B, G) we get 180 == angle(D, midpoint(B, G), orthocenter(A, D, G)) + angle(D, midpoint(B, G), orthocenter(A, D, G)) mod 360
By line_containment_inequality on orthocenter(D, G, midpoint(B, G)), C, Line(B, G) we get C != orthocenter(D, G, midpoint(B, G))
By double_perpendicular_and_parallel_v0 on altitude(midpoint(B, G), A, B), f, Line(D, F) we get parallel(Line(D, F), altitude(midpoint(B, G), A, B))
By line_containment_inequality on orthocenter(D, G, midpoint(B, G)), F, h we get F != orthocenter(D, G, midpoint(B, G))
By directions_draw_angle on midpoint(B, G), orthocenter(A, B, D), A we get exists(angle(midpoint(B, G), orthocenter(A, B, D), A))
By internal_angle_bisector_definition_v0 on I, orthocenter(A, D, G), D, midpoint(B, G) we get angle(I, midpoint(B, G), orthocenter(A, D, G)) == angle(orthocenter(A, D, G), midpoint(B, G), D) mod 360
By line_inequality on altitude(midpoint(B, G), A, G), Line(B, I), midpoint(B, G) we get Line(B, I) != altitude(midpoint(B, G), A, G)
By line_inequality on altitude(midpoint(B, G), B, D), Line(D, G), midpoint(B, G) we get Line(D, G) != altitude(midpoint(B, G), B, D)
By line_containment_inequality on orthocenter(G, I, midpoint(B, G)), orthocenter(A, B, D), h we get orthocenter(A, B, D) != orthocenter(G, I, midpoint(B, G))
By line_containment_inequality on orthocenter(B, I, midpoint(B, G)), I, Line(B, G) we get I != orthocenter(B, I, midpoint(B, G))
By line_containment_inequality on orthocenter(A, G, midpoint(B, G)), G, h we get G != orthocenter(A, G, midpoint(B, G))
By line_containment_inequality on orthocenter(G, I, midpoint(B, G)), C, Line(B, G) we get C != orthocenter(G, I, midpoint(B, G))
By point_on_perpendicular_bisector on G, B, orthocenter(G, I, midpoint(B, G)), h we get distance(B, orthocenter(G, I, midpoint(B, G))) == distance(G, orthocenter(G, I, midpoint(B, G)))
By directions_draw_angle on midpoint(B, G), orthocenter(A, D, G), D we get exists(angle(midpoint(B, G), orthocenter(A, D, G), D))
By line_circle_intersection_has_at_most_two_points_0 on B, D, line_intersection(i, altitude(A, B, D)), Circle(B, D, I) we get line_intersection(i, altitude(A, B, D)) not in Circle(B, D, I)
By line_containment_inequality on orthocenter(A, G, midpoint(B, G)), F, Line(B, G) we get F != orthocenter(A, G, midpoint(B, G))
By directions_draw_angle on D, midpoint(B, G), orthocenter(A, D, G) we get exists(angle(D, midpoint(B, G), orthocenter(A, D, G)))
By not_in_line_equivalent_to_not_collinear_v0 on H, orthocenter(A, B, D), midpoint(B, G) we get not_collinear(H, midpoint(B, G), orthocenter(A, B, D)), exists(Line(midpoint(B, G), orthocenter(A, B, D)))
By point_on_perpendicular_bisector on B, G, orthocenter(A, G, midpoint(B, G)), h we get distance(B, orthocenter(A, G, midpoint(B, G))) == distance(G, orthocenter(A, G, midpoint(B, G)))
By directions_draw_angle on orthocenter(A, D, G), A, B we get exists(angle(orthocenter(A, D, G), A, B))
By perpendicular_angle_conditions_v0 on D, midpoint(B, G), orthocenter(A, B, D) we get angle(D, midpoint(B, G), orthocenter(A, B, D)) == orientation(D, midpoint(B, G), orthocenter(A, B, D)) mod 360
By double_perpendicular_and_parallel_v0 on altitude(midpoint(B, G), A, G), g, Line(D, E) we get parallel(Line(D, E), altitude(midpoint(B, G), A, G))
By internal_angle_bisector_definition_v0 on A, orthocenter(A, B, D), I, midpoint(B, G) we get angle(A, midpoint(B, G), orthocenter(A, B, D)) == angle(orthocenter(A, B, D), midpoint(B, G), I) mod 360
By line_containment_inequality on orthocenter(B, D, midpoint(B, G)), E, h we get E != orthocenter(B, D, midpoint(B, G))
By line_circle_intersection_has_at_most_two_points_0 on midpoint(B, G), G, orthocenter(A, B, D), Circle(D, E, G) we get orthocenter(A, B, D) not in Circle(D, E, G)
By perpendicular_angle_conditions_v0 on I, midpoint(B, G), orthocenter(A, D, G) we get angle(I, midpoint(B, G), orthocenter(A, D, G)) == orientation(I, midpoint(B, G), orthocenter(A, D, G)) mod 360
By reverse_direction on orthocenter(A, D, G), midpoint(B, G) we get 180 == direction(orthocenter(A, D, G), midpoint(B, G)) - direction(midpoint(B, G), orthocenter(A, D, G)) mod 360
By line_inequality on altitude(midpoint(B, G), B, D), Line(B, C), midpoint(B, G) we get Line(B, C) != altitude(midpoint(B, G), B, D)
By reverse_direction on A, orthocenter(A, B, D) we get 180 == direction(A, orthocenter(A, B, D)) - direction(orthocenter(A, B, D), A) mod 360
By line_inequality on altitude(midpoint(B, G), A, B), Line(G, I), midpoint(B, G) we get Line(G, I) != altitude(midpoint(B, G), A, B)
By line_inequality on altitude(midpoint(B, G), B, D), Line(C, I), midpoint(B, G) we get Line(C, I) != altitude(midpoint(B, G), B, D)
By directions_draw_angle on D, orthocenter(A, B, D), A we get exists(angle(D, orthocenter(A, B, D), A))
By line_inequality on altitude(midpoint(B, G), G, I), Line(C, I), midpoint(B, G) we get Line(C, I) != altitude(midpoint(B, G), G, I)
By perpendicular_angle_conditions_v0 on I, midpoint(B, G), orthocenter(A, B, D) we get angle(I, midpoint(B, G), orthocenter(A, B, D)) == orientation(I, midpoint(B, G), orthocenter(A, B, D)) mod 360
By line_containment_inequality on orthocenter(B, I, midpoint(B, G)), H, h we get H != orthocenter(B, I, midpoint(B, G))
By line_containment_inequality on orthocenter(B, I, midpoint(B, G)), B, h we get B != orthocenter(B, I, midpoint(B, G))
By directions_draw_angle on D, orthocenter(A, B, D), midpoint(B, G) we get exists(angle(D, orthocenter(A, B, D), midpoint(B, G)))
By directions_draw_angle on D, orthocenter(A, D, G), A we get exists(angle(D, orthocenter(A, D, G), A))
By directions_draw_angle on I, A, orthocenter(A, B, D) we get exists(angle(I, A, orthocenter(A, B, D)))
By directions_draw_angle on orthocenter(A, B, D), A, C we get exists(angle(orthocenter(A, B, D), A, C))
By directions_draw_angle on F, A, orthocenter(A, B, D) we get exists(angle(F, A, orthocenter(A, B, D)))
By line_containment_inequality on orthocenter(A, B, midpoint(B, G)), F, h we get F != orthocenter(A, B, midpoint(B, G))
By perpendicular_angle_conditions_v0 on D, midpoint(B, G), orthocenter(A, D, G) we get angle(D, midpoint(B, G), orthocenter(A, D, G)) == orientation(D, midpoint(B, G), orthocenter(A, D, G)) mod 360
By line_inequality on altitude(midpoint(B, G), B, I), i, midpoint(B, G) we get i != altitude(midpoint(B, G), B, I)
By not_in_line_equivalent_to_not_collinear_v0 on B, line_intersection(i, altitude(A, B, D)), A we get not_collinear(A, B, line_intersection(i, altitude(A, B, D))), exists(Line(A, line_intersection(i, altitude(A, B, D))))
By not_in_line_equivalent_to_not_collinear_v0_r on I, orthocenter(A, D, G), A we get I not in Line(A, orthocenter(A, D, G))
By directions_draw_angle on orthocenter(A, B, D), A, I we get exists(angle(orthocenter(A, B, D), A, I))
By perpendicular_angle_conditions_v0 on A, midpoint(B, G), orthocenter(A, D, G) we get angle(A, midpoint(B, G), orthocenter(A, D, G)) == orientation(A, midpoint(B, G), orthocenter(A, D, G)) mod 360
By line_circle_intersection_has_at_most_two_points_0 on G, D, line_intersection(Line(D, G), altitude(A, D, G)), Circle(D, G, I) we get line_intersection(Line(D, G), altitude(A, D, G)) not in Circle(D, G, I)
By directions_draw_angle on orthocenter(A, B, D), A, B we get exists(angle(orthocenter(A, B, D), A, B))
By line_containment_inequality on orthocenter(A, B, midpoint(B, G)), G, h we get G != orthocenter(A, B, midpoint(B, G))
By directions_draw_angle on orthocenter(A, D, G), midpoint(B, G), D we get exists(angle(orthocenter(A, D, G), midpoint(B, G), D))
By line_inequality on altitude(midpoint(B, G), B, D), Line(D, F), midpoint(B, G) we get Line(D, F) != altitude(midpoint(B, G), B, D)
By perpendicular_angle_conditions_v0 on orthocenter(A, B, D), midpoint(B, G), A we get angle(orthocenter(A, B, D), midpoint(B, G), A) == orientation(A, orthocenter(A, B, D), midpoint(B, G)) mod 360
By double_perpendicular_and_parallel_v0 on altitude(midpoint(B, G), D, G), Line(D, G), altitude(A, D, G) we get parallel(altitude(A, D, G), altitude(midpoint(B, G), D, G))
By directions_draw_angle on F, orthocenter(A, B, D), A we get exists(angle(F, orthocenter(A, B, D), A))
By perpendicular_angle_conditions_v0 on orthocenter(A, B, D), midpoint(B, G), D we get angle(orthocenter(A, B, D), midpoint(B, G), D) == orientation(D, orthocenter(A, B, D), midpoint(B, G)) mod 360
By directions_draw_angle on midpoint(B, G), orthocenter(A, B, D), D we get exists(angle(midpoint(B, G), orthocenter(A, B, D), D))
By line_inequality on altitude(midpoint(B, G), B, D), Line(D, H), midpoint(B, G) we get Line(D, H) != altitude(midpoint(B, G), B, D)
By line_containment_inequality on orthocenter(D, G, midpoint(B, G)), H, h we get H != orthocenter(D, G, midpoint(B, G))
By not_in_line_equivalent_to_not_collinear_v0 on G, line_intersection(Line(D, G), altitude(A, D, G)), A we get not_collinear(A, G, line_intersection(Line(D, G), altitude(A, D, G))), exists(Line(A, line_intersection(Line(D, G), altitude(A, D, G))))
By directions_draw_angle on orthocenter(A, B, D), midpoint(B, G), A we get exists(angle(orthocenter(A, B, D), midpoint(B, G), A))
By line_inequality on altitude(midpoint(B, G), G, I), Line(C, D), midpoint(B, G) we get Line(C, D) != altitude(midpoint(B, G), G, I)
By line_containment_inequality on orthocenter(G, I, midpoint(B, G)), D, Line(B, G) we get D != orthocenter(G, I, midpoint(B, G))
By reverse_direction on orthocenter(A, D, G), A we get 180 == direction(orthocenter(A, D, G), A) - direction(A, orthocenter(A, D, G)) mod 360
By line_containment_inequality on orthocenter(G, I, midpoint(B, G)), I, Line(B, G) we get I != orthocenter(G, I, midpoint(B, G))
By line_containment_inequality on orthocenter(B, D, midpoint(B, G)), H, h we get H != orthocenter(B, D, midpoint(B, G))
By directions_draw_angle on orthocenter(A, B, D), A, H we get exists(angle(orthocenter(A, B, D), A, H))
By line_circle_intersection_has_at_most_two_points_0 on F, D, orthocenter(A, B, D), Circle(B, D, F) we get orthocenter(A, B, D) not in Circle(B, D, F)
By directions_draw_angle on orthocenter(A, D, G), A, I we get exists(angle(orthocenter(A, D, G), A, I))
By external_angle_bisector_definition_v0 on D, orthocenter(A, B, D), D, midpoint(B, G) we get 180 == angle(D, midpoint(B, G), orthocenter(A, B, D)) + angle(D, midpoint(B, G), orthocenter(A, B, D)) mod 360
By directions_draw_angle on E, A, orthocenter(A, D, G) we get exists(angle(E, A, orthocenter(A, D, G)))
By not_in_line_equivalent_to_not_collinear_v0 on E, A, line_intersection(Line(D, G), altitude(A, D, G)) we get not_collinear(A, E, line_intersection(Line(D, G), altitude(A, D, G))), exists(Line(A, line_intersection(Line(D, G), altitude(A, D, G))))
By directions_draw_angle on midpoint(B, G), orthocenter(A, D, G), A we get exists(angle(midpoint(B, G), orthocenter(A, D, G), A))
By directions_draw_angle on A, orthocenter(A, B, D), F we get exists(angle(A, orthocenter(A, B, D), F))
By directions_draw_angle on midpoint(B, G), A, orthocenter(A, B, D) we get exists(angle(midpoint(B, G), A, orthocenter(A, B, D)))
By directions_draw_angle on B, orthocenter(A, D, G), A we get exists(angle(B, orthocenter(A, D, G), A))
By reverse_direction on A, orthocenter(A, D, G) we get 180 == direction(A, orthocenter(A, D, G)) - direction(orthocenter(A, D, G), A) mod 360
By reverse_direction on orthocenter(A, B, D), midpoint(B, G) we get 180 == direction(orthocenter(A, B, D), midpoint(B, G)) - direction(midpoint(B, G), orthocenter(A, B, D)) mod 360
By line_inequality on altitude(midpoint(B, G), D, G), f, midpoint(B, G) we get f != altitude(midpoint(B, G), D, G)
By perpendicular_angle_conditions_v0 on orthocenter(A, D, G), midpoint(B, G), A we get angle(orthocenter(A, D, G), midpoint(B, G), A) == orientation(A, orthocenter(A, D, G), midpoint(B, G)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(B, G), A, line_intersection(Line(D, G), altitude(A, D, G)) we get not_collinear(A, midpoint(B, G), line_intersection(Line(D, G), altitude(A, D, G))), exists(Line(A, line_intersection(Line(D, G), altitude(A, D, G))))
By directions_draw_angle on C, A, orthocenter(A, D, G) we get exists(angle(C, A, orthocenter(A, D, G)))
By line_inequality on altitude(midpoint(B, G), G, I), Line(B, I), midpoint(B, G) we get Line(B, I) != altitude(midpoint(B, G), G, I)
By directions_draw_angle on orthocenter(A, D, G), midpoint(B, G), A we get exists(angle(orthocenter(A, D, G), midpoint(B, G), A))
By internal_angle_bisector_definition_v0 on D, orthocenter(A, B, D), I, midpoint(B, G) we get angle(D, midpoint(B, G), orthocenter(A, B, D)) == angle(orthocenter(A, B, D), midpoint(B, G), I) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on D, A, line_intersection(Line(D, G), altitude(A, D, G)) we get not_collinear(A, D, line_intersection(Line(D, G), altitude(A, D, G))), exists(Line(A, line_intersection(Line(D, G), altitude(A, D, G))))
By line_containment_inequality on orthocenter(A, G, midpoint(B, G)), E, h we get E != orthocenter(A, G, midpoint(B, G))
By internal_angle_bisector_definition_v0 on I, orthocenter(A, D, G), A, midpoint(B, G) we get angle(I, midpoint(B, G), orthocenter(A, D, G)) == angle(orthocenter(A, D, G), midpoint(B, G), A) mod 360
By line_containment_inequality on orthocenter(A, G, midpoint(B, G)), D, Line(B, G) we get D != orthocenter(A, G, midpoint(B, G))
By perpendicular_angle_conditions_v0 on orthocenter(A, D, G), midpoint(B, G), I we get angle(orthocenter(A, D, G), midpoint(B, G), I) == orientation(I, orthocenter(A, D, G), midpoint(B, G)) mod 360
By directions_draw_angle on A, orthocenter(A, B, D), B we get exists(angle(A, orthocenter(A, B, D), B))
By not_in_line_equivalent_to_not_collinear_v0_r on E, A, orthocenter(A, B, D) we get E not in Line(A, orthocenter(A, B, D))
By line_inequality on altitude(midpoint(B, G), B, D), Line(G, I), midpoint(B, G) we get Line(G, I) != altitude(midpoint(B, G), B, D)
By line_containment_inequality on orthocenter(B, I, midpoint(B, G)), orthocenter(A, B, D), h we get orthocenter(A, B, D) != orthocenter(B, I, midpoint(B, G))
By directions_draw_angle on F, A, orthocenter(A, D, G) we get exists(angle(F, A, orthocenter(A, D, G)))
By perpendicular_angle_conditions_v0 on A, midpoint(B, G), orthocenter(A, B, D) we get angle(A, midpoint(B, G), orthocenter(A, B, D)) == orientation(A, midpoint(B, G), orthocenter(A, B, D)) mod 360
By directions_draw_angle on midpoint(B, G), orthocenter(A, D, G), E we get exists(angle(midpoint(B, G), orthocenter(A, D, G), E))
By line_containment_inequality on orthocenter(G, I, midpoint(B, G)), E, Line(B, G) we get E != orthocenter(G, I, midpoint(B, G))
By line_inequality on altitude(midpoint(B, G), B, I), Line(B, C), midpoint(B, G) we get Line(B, C) != altitude(midpoint(B, G), B, I)
By line_containment_inequality on orthocenter(A, G, midpoint(B, G)), H, h we get H != orthocenter(A, G, midpoint(B, G))
By directions_draw_angle on E, orthocenter(A, D, G), midpoint(B, G) we get exists(angle(E, orthocenter(A, D, G), midpoint(B, G)))
By line_containment_inequality on orthocenter(A, B, midpoint(B, G)), A, Line(B, G) we get A != orthocenter(A, B, midpoint(B, G))
By line_inequality on altitude(midpoint(B, G), A, B), Line(D, H), midpoint(B, G) we get Line(D, H) != altitude(midpoint(B, G), A, B)
By directions_draw_angle on D, A, orthocenter(A, B, D) we get exists(angle(D, A, orthocenter(A, B, D)))
By line_containment_inequality on orthocenter(D, G, midpoint(B, G)), E, h we get E != orthocenter(D, G, midpoint(B, G))
By line_containment_inequality on orthocenter(A, B, midpoint(B, G)), B, h we get B != orthocenter(A, B, midpoint(B, G))
By line_inequality on altitude(midpoint(B, G), A, G), Line(G, I), midpoint(B, G) we get Line(G, I) != altitude(midpoint(B, G), A, G)
By line_inequality on altitude(midpoint(B, G), B, I), g, midpoint(B, G) we get g != altitude(midpoint(B, G), B, I)
By directions_draw_angle on C, A, orthocenter(A, B, D) we get exists(angle(C, A, orthocenter(A, B, D)))
By line_inequality on altitude(midpoint(B, G), G, I), Line(D, H), midpoint(B, G) we get Line(D, H) != altitude(midpoint(B, G), G, I)
By line_inequality on altitude(midpoint(B, G), A, G), f, midpoint(B, G) we get f != altitude(midpoint(B, G), A, G)
By line_containment_inequality on orthocenter(D, G, midpoint(B, G)), orthocenter(A, D, G), h we get orthocenter(A, D, G) != orthocenter(D, G, midpoint(B, G))
By line_circle_intersection_has_at_most_two_points_0 on midpoint(B, G), G, orthocenter(A, D, G), Circle(D, E, G) we get orthocenter(A, D, G) not in Circle(D, E, G)
By directions_draw_angle on D, midpoint(B, G), orthocenter(A, B, D) we get exists(angle(D, midpoint(B, G), orthocenter(A, B, D)))
By directions_draw_angle on orthocenter(A, D, G), A, F we get exists(angle(orthocenter(A, D, G), A, F))
By line_inequality on altitude(midpoint(B, G), B, D), i, midpoint(B, G) we get i != altitude(midpoint(B, G), B, D)
By directions_draw_angle on F, orthocenter(A, B, D), midpoint(B, G) we get exists(angle(F, orthocenter(A, B, D), midpoint(B, G)))
By line_circle_intersection_has_at_most_two_points_0 on B, F, H, Circle(B, D, F) we get H not in Circle(B, D, F)
By directions_draw_angle on orthocenter(A, B, D), A, E we get exists(angle(orthocenter(A, B, D), A, E))
By directions_draw_angle on orthocenter(A, D, G), midpoint(B, G), orthocenter(A, B, D) we get exists(angle(orthocenter(A, D, G), midpoint(B, G), orthocenter(A, B, D)))
By line_containment_inequality on orthocenter(B, I, midpoint(B, G)), F, Line(B, G) we get F != orthocenter(B, I, midpoint(B, G))
By directions_draw_angle on A, midpoint(B, G), orthocenter(A, D, G) we get exists(angle(A, midpoint(B, G), orthocenter(A, D, G)))
By directions_draw_angle on D, A, orthocenter(A, D, G) we get exists(angle(D, A, orthocenter(A, D, G)))
By not_in_line_equivalent_to_not_collinear_v0 on G, A, line_intersection(i, altitude(A, B, D)) we get not_collinear(A, G, line_intersection(i, altitude(A, B, D))), exists(Line(A, line_intersection(i, altitude(A, B, D))))
By line_inequality on altitude(midpoint(B, G), B, D), altitude(A, B, D), midpoint(B, G) we get altitude(A, B, D) != altitude(midpoint(B, G), B, D)
By directions_draw_angle on G, orthocenter(A, D, G), A we get exists(angle(G, orthocenter(A, D, G), A))
By directions_draw_angle on orthocenter(A, B, D), A, orthocenter(A, D, G) we get exists(angle(orthocenter(A, B, D), A, orthocenter(A, D, G)))
By directions_draw_angle on G, A, orthocenter(A, B, D) we get exists(angle(G, A, orthocenter(A, B, D)))
By directions_draw_angle on orthocenter(A, D, G), A, orthocenter(A, B, D) we get exists(angle(orthocenter(A, D, G), A, orthocenter(A, B, D)))
By directions_draw_angle on A, orthocenter(A, D, G), G we get exists(angle(A, orthocenter(A, D, G), G))
By line_inequality on altitude(midpoint(B, G), B, I), Line(B, I), midpoint(B, G) we get Line(B, I) != altitude(midpoint(B, G), B, I)
By directions_draw_angle on B, orthocenter(A, B, D), A we get exists(angle(B, orthocenter(A, B, D), A))
By line_containment_inequality on orthocenter(D, G, midpoint(B, G)), G, h we get G != orthocenter(D, G, midpoint(B, G))
By line_inequality on altitude(midpoint(B, G), G, I), Line(B, C), midpoint(B, G) we get Line(B, C) != altitude(midpoint(B, G), G, I)
By directions_draw_angle on orthocenter(A, D, G), A, midpoint(B, G) we get exists(angle(orthocenter(A, D, G), A, midpoint(B, G)))
By line_inequality on altitude(midpoint(B, G), A, G), Line(D, G), midpoint(B, G) we get Line(D, G) != altitude(midpoint(B, G), A, G)
By directions_draw_angle on A, orthocenter(A, B, D), midpoint(B, G) we get exists(angle(A, orthocenter(A, B, D), midpoint(B, G)))
By not_in_line_equivalent_to_not_collinear_v0 on C, midpoint(B, G), orthocenter(A, B, D) we get not_collinear(C, midpoint(B, G), orthocenter(A, B, D)), exists(Line(midpoint(B, G), orthocenter(A, B, D)))
By line_circle_intersection_has_at_most_two_points_0 on G, midpoint(B, G), B, Circle(D, E, G) we get B not in Circle(D, E, G)
By directions_draw_angle on E, A, orthocenter(A, B, D) we get exists(angle(E, A, orthocenter(A, B, D)))
By directions_draw_angle on A, midpoint(B, G), orthocenter(A, B, D) we get exists(angle(A, midpoint(B, G), orthocenter(A, B, D)))
By directions_draw_angle on orthocenter(A, B, D), midpoint(B, G), I we get exists(angle(orthocenter(A, B, D), midpoint(B, G), I))
By directions_draw_angle on A, orthocenter(A, D, G), E we get exists(angle(A, orthocenter(A, D, G), E))
By line_inequality on altitude(midpoint(B, G), D, G), Line(G, I), midpoint(B, G) we get Line(G, I) != altitude(midpoint(B, G), D, G)
By line_inequality on altitude(midpoint(B, G), B, I), Line(C, D), midpoint(B, G) we get Line(C, D) != altitude(midpoint(B, G), B, I)
By line_circle_intersection_has_at_most_two_points_0 on D, B, line_intersection(i, altitude(A, B, D)), d we get line_intersection(i, altitude(A, B, D)) not in d
By not_in_line_equivalent_to_not_collinear_v0 on C, midpoint(B, G), orthocenter(A, D, G) we get not_collinear(C, midpoint(B, G), orthocenter(A, D, G)), exists(Line(midpoint(B, G), orthocenter(A, D, G)))
By directions_draw_angle on B, A, orthocenter(A, D, G) we get exists(angle(B, A, orthocenter(A, D, G)))
By line_containment_inequality on orthocenter(G, I, midpoint(B, G)), B, h we get B != orthocenter(G, I, midpoint(B, G))
By line_containment_inequality on orthocenter(A, B, midpoint(B, G)), C, Line(B, G) we get C != orthocenter(A, B, midpoint(B, G))
By line_inequality on altitude(midpoint(B, G), D, G), Line(D, E), midpoint(B, G) we get Line(D, E) != altitude(midpoint(B, G), D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on H, A, orthocenter(A, B, D) we get H not in Line(A, orthocenter(A, B, D))
By line_inequality on altitude(midpoint(B, G), D, G), i, midpoint(B, G) we get i != altitude(midpoint(B, G), D, G)
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(B, G), A, line_intersection(i, altitude(A, B, D)) we get not_collinear(A, midpoint(B, G), line_intersection(i, altitude(A, B, D))), exists(Line(A, line_intersection(i, altitude(A, B, D))))
By line_containment_inequality on orthocenter(A, G, midpoint(B, G)), I, Line(B, G) we get I != orthocenter(A, G, midpoint(B, G))
By line_inequality on altitude(midpoint(B, G), A, G), altitude(A, B, D), midpoint(B, G) we get altitude(A, B, D) != altitude(midpoint(B, G), A, G)
By line_inequality on altitude(midpoint(B, G), A, B), g, midpoint(B, G) we get g != altitude(midpoint(B, G), A, B)
By line_containment_inequality on orthocenter(B, I, midpoint(B, G)), D, Line(B, G) we get D != orthocenter(B, I, midpoint(B, G))
By line_inequality on altitude(midpoint(B, G), D, G), Line(D, H), midpoint(B, G) we get Line(D, H) != altitude(midpoint(B, G), D, G)
By not_in_line_equivalent_to_not_collinear_v0 on B, line_intersection(Line(D, G), altitude(A, D, G)), A we get not_collinear(A, B, line_intersection(Line(D, G), altitude(A, D, G))), exists(Line(A, line_intersection(Line(D, G), altitude(A, D, G))))
By directions_draw_angle on G, A, orthocenter(A, D, G) we get exists(angle(G, A, orthocenter(A, D, G)))
By directions_draw_angle on H, A, orthocenter(A, D, G) we get exists(angle(H, A, orthocenter(A, D, G)))
By directions_draw_angle on A, orthocenter(A, D, G), D we get exists(angle(A, orthocenter(A, D, G), D))
By directions_draw_angle on D, orthocenter(A, D, G), midpoint(B, G) we get exists(angle(D, orthocenter(A, D, G), midpoint(B, G)))
By line_containment_inequality on orthocenter(A, G, midpoint(B, G)), orthocenter(A, B, D), h we get orthocenter(A, B, D) != orthocenter(A, G, midpoint(B, G))
By directions_draw_angle on A, orthocenter(A, D, G), midpoint(B, G) we get exists(angle(A, orthocenter(A, D, G), midpoint(B, G)))
By directions_draw_angle on I, midpoint(B, G), orthocenter(A, D, G) we get exists(angle(I, midpoint(B, G), orthocenter(A, D, G)))
By line_circle_intersection_has_at_most_two_points_0 on B, D, line_intersection(i, altitude(A, B, D)), Circle(B, D, F) we get line_intersection(i, altitude(A, B, D)) not in Circle(B, D, F)
By directions_draw_angle on orthocenter(A, B, D), midpoint(B, G), orthocenter(A, D, G) we get exists(angle(orthocenter(A, B, D), midpoint(B, G), orthocenter(A, D, G)))
By directions_draw_angle on I, A, orthocenter(A, D, G) we get exists(angle(I, A, orthocenter(A, D, G)))
By directions_draw_angle on orthocenter(A, B, D), A, F we get exists(angle(orthocenter(A, B, D), A, F))
By directions_draw_angle on orthocenter(A, B, D), A, midpoint(B, G) we get exists(angle(orthocenter(A, B, D), A, midpoint(B, G)))
By line_containment_inequality on orthocenter(A, B, midpoint(B, G)), E, h we get E != orthocenter(A, B, midpoint(B, G))
By not_in_line_equivalent_to_not_collinear_v0_r on C, A, orthocenter(A, B, D) we get C not in Line(A, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(D, G, midpoint(B, G)), A, Line(B, G) we get A != orthocenter(D, G, midpoint(B, G))
By line_inequality on altitude(midpoint(B, G), A, B), i, midpoint(B, G) we get i != altitude(midpoint(B, G), A, B)
By line_inequality on altitude(midpoint(B, G), B, I), Line(C, I), midpoint(B, G) we get Line(C, I) != altitude(midpoint(B, G), B, I)
By line_containment_inequality on orthocenter(G, I, midpoint(B, G)), G, h we get G != orthocenter(G, I, midpoint(B, G))
By directions_draw_angle on A, orthocenter(A, B, D), D we get exists(angle(A, orthocenter(A, B, D), D))
By line_containment_inequality on orthocenter(B, D, midpoint(B, G)), orthocenter(A, B, D), h we get orthocenter(A, B, D) != orthocenter(B, D, midpoint(B, G))
By line_circle_intersection_has_at_most_two_points_0 on D, midpoint(B, G), I, Circle(D, E, G) we get I not in Circle(D, E, G)
By line_inequality on altitude(midpoint(B, G), A, B), Line(B, I), midpoint(B, G) we get Line(B, I) != altitude(midpoint(B, G), A, B)
By line_inequality on altitude(midpoint(B, G), A, G), altitude(A, D, G), midpoint(B, G) we get altitude(A, D, G) != altitude(midpoint(B, G), A, G)
By directions_draw_angle on I, midpoint(B, G), orthocenter(A, B, D) we get exists(angle(I, midpoint(B, G), orthocenter(A, B, D)))
By directions_draw_angle on H, A, orthocenter(A, B, D) we get exists(angle(H, A, orthocenter(A, B, D)))
By directions_draw_angle on orthocenter(A, D, G), midpoint(B, G), I we get exists(angle(orthocenter(A, D, G), midpoint(B, G), I))
By line_inequality on altitude(midpoint(B, G), D, G), altitude(A, D, G), midpoint(B, G) we get altitude(A, D, G) != altitude(midpoint(B, G), D, G)
By directions_draw_angle on E, orthocenter(A, D, G), A we get exists(angle(E, orthocenter(A, D, G), A))
By line_inequality on altitude(midpoint(B, G), B, I), Line(G, I), midpoint(B, G) we get Line(G, I) != altitude(midpoint(B, G), B, I)
By directions_draw_angle on A, orthocenter(A, D, G), B we get exists(angle(A, orthocenter(A, D, G), B))
By line_inequality on altitude(midpoint(B, G), G, I), f, midpoint(B, G) we get f != altitude(midpoint(B, G), G, I)
By line_inequality on altitude(midpoint(B, G), B, D), Line(D, E), midpoint(B, G) we get Line(D, E) != altitude(midpoint(B, G), B, D)
By line_inequality on altitude(midpoint(B, G), A, B), f, midpoint(B, G) we get f != altitude(midpoint(B, G), A, B)
By line_containment_inequality on orthocenter(B, D, midpoint(B, G)), C, Line(B, G) we get C != orthocenter(B, D, midpoint(B, G))
By line_containment_inequality on orthocenter(A, G, midpoint(B, G)), B, h we get B != orthocenter(A, G, midpoint(B, G))
By line_circle_intersection_has_at_most_two_points_0 on B, F, A, Circle(B, D, F) we get A not in Circle(B, D, F)
By line_containment_inequality on orthocenter(A, B, midpoint(B, G)), I, Line(B, G) we get I != orthocenter(A, B, midpoint(B, G))
By line_containment_inequality on orthocenter(B, I, midpoint(B, G)), A, Line(B, G) we get A != orthocenter(B, I, midpoint(B, G))
By line_circle_intersection_has_at_most_two_points_0 on E, G, C, Circle(D, E, G) we get C not in Circle(D, E, G)
By line_inequality on altitude(midpoint(B, G), D, G), Line(B, C), midpoint(B, G) we get Line(B, C) != altitude(midpoint(B, G), D, G)
By line_circle_intersection_has_at_most_two_points_0 on B, midpoint(B, G), orthocenter(A, D, G), Circle(B, D, F) we get orthocenter(A, D, G) not in Circle(B, D, F)
By line_inequality on altitude(midpoint(B, G), A, G), Line(D, F), midpoint(B, G) we get Line(D, F) != altitude(midpoint(B, G), A, G)
By line_inequality on altitude(midpoint(B, G), A, B), Line(D, E), midpoint(B, G) we get Line(D, E) != altitude(midpoint(B, G), A, B)
By line_inequality on altitude(midpoint(B, G), A, G), Line(D, H), midpoint(B, G) we get Line(D, H) != altitude(midpoint(B, G), A, G)
By line_inequality on altitude(midpoint(B, G), A, G), Line(C, I), midpoint(B, G) we get Line(C, I) != altitude(midpoint(B, G), A, G)
By line_inequality on altitude(midpoint(B, G), A, G), Line(C, D), midpoint(B, G) we get Line(C, D) != altitude(midpoint(B, G), A, G)
By line_inequality on altitude(midpoint(B, G), D, G), Line(D, F), midpoint(B, G) we get Line(D, F) != altitude(midpoint(B, G), D, G)
By line_inequality on altitude(midpoint(B, G), B, D), g, midpoint(B, G) we get g != altitude(midpoint(B, G), B, D)
By line_inequality on altitude(midpoint(B, G), D, G), Line(C, D), midpoint(B, G) we get Line(C, D) != altitude(midpoint(B, G), D, G)
By line_containment_inequality on orthocenter(D, G, midpoint(B, G)), B, h we get B != orthocenter(D, G, midpoint(B, G))
By line_inequality on altitude(midpoint(B, G), G, I), g, midpoint(B, G) we get g != altitude(midpoint(B, G), G, I)
By line_inequality on altitude(midpoint(B, G), A, G), i, midpoint(B, G) we get i != altitude(midpoint(B, G), A, G)
By line_inequality on altitude(midpoint(B, G), G, I), i, midpoint(B, G) we get i != altitude(midpoint(B, G), G, I)
By not_in_line_equivalent_to_not_collinear_v0_r on F, orthocenter(A, D, G), A we get F not in Line(A, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(G, I, midpoint(B, G)), H, h we get H != orthocenter(G, I, midpoint(B, G))
By line_inequality on altitude(midpoint(B, G), B, I), Line(D, H), midpoint(B, G) we get Line(D, H) != altitude(midpoint(B, G), B, I)
By line_containment_inequality on orthocenter(D, G, midpoint(B, G)), D, Line(B, G) we get D != orthocenter(D, G, midpoint(B, G))
By line_inequality on altitude(midpoint(B, G), G, I), Line(D, E), midpoint(B, G) we get Line(D, E) != altitude(midpoint(B, G), G, I)
By line_inequality on altitude(midpoint(B, G), B, D), altitude(A, D, G), midpoint(B, G) we get altitude(A, D, G) != altitude(midpoint(B, G), B, D)
By line_containment_inequality on orthocenter(B, D, midpoint(B, G)), F, h we get F != orthocenter(B, D, midpoint(B, G))
By line_inequality on altitude(midpoint(B, G), A, G), Line(B, C), midpoint(B, G) we get Line(B, C) != altitude(midpoint(B, G), A, G)
By line_inequality on altitude(midpoint(B, G), A, B), Line(D, G), midpoint(B, G) we get Line(D, G) != altitude(midpoint(B, G), A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on C, orthocenter(A, D, G), A we get C not in Line(A, orthocenter(A, D, G))
By line_inequality on altitude(midpoint(B, G), D, G), g, midpoint(B, G) we get g != altitude(midpoint(B, G), D, G)
By line_inequality on altitude(midpoint(B, G), G, I), Line(D, F), midpoint(B, G) we get Line(D, F) != altitude(midpoint(B, G), G, I)
By line_inequality on altitude(midpoint(B, G), G, I), Line(G, I), midpoint(B, G) we get Line(G, I) != altitude(midpoint(B, G), G, I)
By line_containment_inequality on orthocenter(A, B, midpoint(B, G)), D, Line(B, G) we get D != orthocenter(A, B, midpoint(B, G))
By line_circle_intersection_has_at_most_two_points_0 on B, midpoint(B, G), G, Circle(B, D, F) we get G not in Circle(B, D, F)
By line_inequality on altitude(midpoint(B, G), A, B), altitude(A, D, G), midpoint(B, G) we get altitude(A, D, G) != altitude(midpoint(B, G), A, B)
By line_containment_inequality on orthocenter(G, I, midpoint(B, G)), A, Line(B, G) we get A != orthocenter(G, I, midpoint(B, G))
By line_containment_inequality on orthocenter(B, I, midpoint(B, G)), C, h we get C != orthocenter(B, I, midpoint(B, G))
By line_inequality on altitude(midpoint(B, G), A, G), Line(D, E), midpoint(B, G) we get Line(D, E) != altitude(midpoint(B, G), A, G)
By line_containment_inequality on orthocenter(A, G, midpoint(B, G)), orthocenter(A, D, G), h we get orthocenter(A, D, G) != orthocenter(A, G, midpoint(B, G))
By line_containment_inequality on orthocenter(A, B, midpoint(B, G)), orthocenter(A, D, G), h we get orthocenter(A, D, G) != orthocenter(A, B, midpoint(B, G))
By line_inequality on altitude(midpoint(B, G), B, I), f, midpoint(B, G) we get f != altitude(midpoint(B, G), B, I)
By line_containment_inequality on orthocenter(G, I, midpoint(B, G)), orthocenter(A, D, G), h we get orthocenter(A, D, G) != orthocenter(G, I, midpoint(B, G))
By line_inequality on altitude(midpoint(B, G), G, I), altitude(A, B, D), midpoint(B, G) we get altitude(A, B, D) != altitude(midpoint(B, G), G, I)
By line_circle_intersection_has_at_most_two_points_0 on G, D, line_intersection(Line(D, G), altitude(A, D, G)), d we get line_intersection(Line(D, G), altitude(A, D, G)) not in d
By line_containment_inequality on orthocenter(G, I, midpoint(B, G)), F, Line(B, G) we get F != orthocenter(G, I, midpoint(B, G))
By line_containment_inequality on orthocenter(B, I, midpoint(B, G)), G, h we get G != orthocenter(B, I, midpoint(B, G))
By line_containment_inequality on orthocenter(D, G, midpoint(B, G)), I, Line(B, G) we get I != orthocenter(D, G, midpoint(B, G))
By line_inequality on altitude(midpoint(B, G), B, I), Line(D, F), midpoint(B, G) we get Line(D, F) != altitude(midpoint(B, G), B, I)
By line_inequality on altitude(midpoint(B, G), G, I), altitude(A, D, G), midpoint(B, G) we get altitude(A, D, G) != altitude(midpoint(B, G), G, I)
By line_inequality on altitude(midpoint(B, G), B, D), f, midpoint(B, G) we get f != altitude(midpoint(B, G), B, D)
By line_inequality on altitude(midpoint(B, G), B, D), Line(B, I), midpoint(B, G) we get Line(B, I) != altitude(midpoint(B, G), B, D)
By line_inequality on altitude(midpoint(B, G), D, G), altitude(A, B, D), midpoint(B, G) we get altitude(A, B, D) != altitude(midpoint(B, G), D, G)
By line_circle_intersection_has_at_most_two_points_0 on midpoint(B, G), D, I, Circle(B, D, F) we get I not in Circle(B, D, F)
By line_inequality on altitude(midpoint(B, G), B, I), altitude(A, D, G), midpoint(B, G) we get altitude(A, D, G) != altitude(midpoint(B, G), B, I)
By line_containment_inequality on orthocenter(A, B, midpoint(B, G)), orthocenter(A, B, D), h we get orthocenter(A, B, D) != orthocenter(A, B, midpoint(B, G))
By line_circle_intersection_has_at_most_two_points_0 on D, G, line_intersection(Line(D, G), altitude(A, D, G)), Circle(D, E, G) we get line_intersection(Line(D, G), altitude(A, D, G)) not in Circle(D, E, G)
By line_inequality on altitude(midpoint(B, G), D, G), Line(C, I), midpoint(B, G) we get Line(C, I) != altitude(midpoint(B, G), D, G)
By line_containment_inequality on orthocenter(B, D, midpoint(B, G)), B, h we get B != orthocenter(B, D, midpoint(B, G))
By line_inequality on altitude(midpoint(B, G), B, D), Line(C, D), midpoint(B, G) we get Line(C, D) != altitude(midpoint(B, G), B, D)
By line_containment_inequality on orthocenter(B, I, midpoint(B, G)), orthocenter(A, D, G), h we get orthocenter(A, D, G) != orthocenter(B, I, midpoint(B, G))
By line_containment_inequality on orthocenter(D, G, midpoint(B, G)), orthocenter(A, B, D), h we get orthocenter(A, B, D) != orthocenter(D, G, midpoint(B, G))
By line_inequality on altitude(midpoint(B, G), A, B), Line(C, D), midpoint(B, G) we get Line(C, D) != altitude(midpoint(B, G), A, B)
By line_inequality on altitude(midpoint(B, G), D, G), Line(D, G), midpoint(B, G) we get Line(D, G) != altitude(midpoint(B, G), D, G)
By line_containment_inequality on orthocenter(B, D, midpoint(B, G)), G, h we get G != orthocenter(B, D, midpoint(B, G))
By line_inequality on altitude(midpoint(B, G), A, B), Line(D, F), midpoint(B, G) we get Line(D, F) != altitude(midpoint(B, G), A, B)
By line_containment_inequality on orthocenter(B, D, midpoint(B, G)), orthocenter(A, D, G), h we get orthocenter(A, D, G) != orthocenter(B, D, midpoint(B, G))
By not_in_line_equivalent_to_not_collinear_v0_r on I, A, orthocenter(A, B, D) we get I not in Line(A, orthocenter(A, B, D))
By line_inequality on altitude(midpoint(B, G), A, B), Line(C, I), midpoint(B, G) we get Line(C, I) != altitude(midpoint(B, G), A, B)
By line_containment_inequality on orthocenter(B, D, midpoint(B, G)), I, Line(B, G) we get I != orthocenter(B, D, midpoint(B, G))
By line_inequality on altitude(midpoint(B, G), A, G), g, midpoint(B, G) we get g != altitude(midpoint(B, G), A, G)
By line_inequality on altitude(midpoint(B, G), B, I), Line(D, G), midpoint(B, G) we get Line(D, G) != altitude(midpoint(B, G), B, I)
By line_inequality on altitude(midpoint(B, G), G, I), Line(D, G), midpoint(B, G) we get Line(D, G) != altitude(midpoint(B, G), G, I)
By external_angle_bisector_definition_v0_r on G, F, B, projection(F, h) we get Line(F, projection(F, h)) == external_angle_bisector(B, projection(F, h), G)
By power_of_a_point_in_circle on D, Circle(D, E, G) we get 0 == power_of_a_point(D, Circle(D, E, G))
By power_of_a_point_in_circle on D, Circle(B, D, F) we get 0 == power_of_a_point(D, Circle(B, D, F))
By external_angle_bisector_definition_v0_r on B, orthocenter(A, D, G), G, midpoint(B, G) we get Line(midpoint(B, G), orthocenter(A, D, G)) == external_angle_bisector(B, midpoint(B, G), G)
By external_angle_bisector_definition_v0_r on orthocenter(A, D, G), G, orthocenter(A, D, G), E we get Line(E, G) == external_angle_bisector(orthocenter(A, D, G), E, orthocenter(A, D, G))
By collinear_definition on B, line_intersection(i, altitude(A, B, D)), D we get line_intersection(i, altitude(A, B, D)) in Line(B, D), D in Line(B, line_intersection(i, altitude(A, B, D))), Line(B, D) == Line(B, line_intersection(i, altitude(A, B, D))), 0 == 2 * angle(line_intersection(i, altitude(A, B, D)), B, D) mod 360
By external_angle_bisector_definition_v0_r on orthocenter(A, B, D), A, orthocenter(A, B, D), F we get Line(A, F) == external_angle_bisector(orthocenter(A, B, D), F, orthocenter(A, B, D))
By external_angle_bisector_definition_v0_r on orthocenter(A, D, G), A, orthocenter(A, D, G), E we get Line(A, E) == external_angle_bisector(orthocenter(A, D, G), E, orthocenter(A, D, G))
By collinear_definition on orthocenter(A, B, D), line_intersection(i, altitude(A, B, D)), A we get line_intersection(i, altitude(A, B, D)) in Line(A, orthocenter(A, B, D)), A in Line(orthocenter(A, B, D), line_intersection(i, altitude(A, B, D))), Line(A, orthocenter(A, B, D)) == Line(orthocenter(A, B, D), line_intersection(i, altitude(A, B, D))), 0 == 2 * angle(line_intersection(i, altitude(A, B, D)), orthocenter(A, B, D), A) mod 360
By collinear_definition on A, line_intersection(Line(D, G), altitude(A, D, G)), orthocenter(A, D, G) we get line_intersection(Line(D, G), altitude(A, D, G)) in Line(A, orthocenter(A, D, G)), orthocenter(A, D, G) in Line(A, line_intersection(Line(D, G), altitude(A, D, G))), Line(A, orthocenter(A, D, G)) == Line(A, line_intersection(Line(D, G), altitude(A, D, G))), 0 == 2 * angle(line_intersection(Line(D, G), altitude(A, D, G)), A, orthocenter(A, D, G)) mod 360
By external_angle_bisector_definition_v0_r on G, orthocenter(A, B, D), B, midpoint(B, G) we get Line(midpoint(B, G), orthocenter(A, B, D)) == external_angle_bisector(B, midpoint(B, G), G)
By external_angle_bisector_definition_v0_r on G, E, B, projection(E, h) we get Line(E, projection(E, h)) == external_angle_bisector(B, projection(E, h), G)
By power_of_a_point_in_circle on F, Circle(B, D, F) we get 0 == power_of_a_point(F, Circle(B, D, F))
By collinear_definition on A, orthocenter(A, D, G), line_intersection(Line(D, G), altitude(A, D, G)) we get orthocenter(A, D, G) in Line(A, line_intersection(Line(D, G), altitude(A, D, G))), line_intersection(Line(D, G), altitude(A, D, G)) in Line(A, orthocenter(A, D, G)), Line(A, orthocenter(A, D, G)) == Line(A, line_intersection(Line(D, G), altitude(A, D, G))), 0 == 2 * angle(orthocenter(A, D, G), A, line_intersection(Line(D, G), altitude(A, D, G))) mod 360
By collinear_definition on A, line_intersection(i, altitude(A, B, D)), orthocenter(A, B, D) we get line_intersection(i, altitude(A, B, D)) in Line(A, orthocenter(A, B, D)), orthocenter(A, B, D) in Line(A, line_intersection(i, altitude(A, B, D))), Line(A, orthocenter(A, B, D)) == Line(A, line_intersection(i, altitude(A, B, D))), 0 == 2 * angle(line_intersection(i, altitude(A, B, D)), A, orthocenter(A, B, D)) mod 360
By external_angle_bisector_definition_v0_r on orthocenter(A, D, G), C, orthocenter(A, D, G), E we get Line(C, E) == external_angle_bisector(orthocenter(A, D, G), E, orthocenter(A, D, G))
By internal_angle_bisector_definition_v0_r on orthocenter(A, B, D), B, orthocenter(A, B, D), midpoint(B, G) we get Line(B, midpoint(B, G)) == internal_angle_bisector(orthocenter(A, B, D), midpoint(B, G), orthocenter(A, B, D))
By internal_angle_bisector_definition_v0_r on midpoint(B, G), B, midpoint(B, G), orthocenter(A, B, D) we get Line(B, orthocenter(A, B, D)) == internal_angle_bisector(midpoint(B, G), orthocenter(A, B, D), midpoint(B, G))
By external_angle_bisector_definition_v0_r on orthocenter(A, B, D), B, orthocenter(A, B, D), F we get Line(B, F) == external_angle_bisector(orthocenter(A, B, D), F, orthocenter(A, B, D))
By power_of_a_point_on_circle on B, Circle(B, D, F) we get 0 == power_of_a_point(B, Circle(B, D, F))
By external_angle_bisector_definition_v0_r on orthocenter(A, B, D), H, orthocenter(A, B, D), F we get Line(F, H) == external_angle_bisector(orthocenter(A, B, D), F, orthocenter(A, B, D))
By perpendicular_lines_draw_intersection on g, altitude(midpoint(B, G), A, G) we get exists(line_intersection(g, altitude(midpoint(B, G), A, G)))
By collinear_definition on orthocenter(A, D, G), orthocenter(A, B, D), B we get orthocenter(A, B, D) in Line(B, orthocenter(A, D, G)), B in Line(orthocenter(A, B, D), orthocenter(A, D, G)), Line(B, orthocenter(A, D, G)) == Line(orthocenter(A, B, D), orthocenter(A, D, G)), 0 == 2 * angle(orthocenter(A, B, D), orthocenter(A, D, G), B) mod 360
By collinear_definition on orthocenter(A, D, G), A, line_intersection(Line(D, G), altitude(A, D, G)) we get A in Line(orthocenter(A, D, G), line_intersection(Line(D, G), altitude(A, D, G))), line_intersection(Line(D, G), altitude(A, D, G)) in Line(A, orthocenter(A, D, G)), Line(A, orthocenter(A, D, G)) == Line(orthocenter(A, D, G), line_intersection(Line(D, G), altitude(A, D, G))), 0 == 2 * angle(A, orthocenter(A, D, G), line_intersection(Line(D, G), altitude(A, D, G))) mod 360
By perpendicular_lines_draw_intersection on altitude(midpoint(B, G), G, I), Line(G, I) we get exists(line_intersection(Line(G, I), altitude(midpoint(B, G), G, I)))
By collinear_definition on B, D, line_intersection(i, altitude(A, B, D)) we get D in Line(B, line_intersection(i, altitude(A, B, D))), line_intersection(i, altitude(A, B, D)) in Line(B, D), Line(B, D) == Line(B, line_intersection(i, altitude(A, B, D))), 0 == 2 * angle(D, B, line_intersection(i, altitude(A, B, D))) mod 360
By collinear_definition on orthocenter(A, B, D), orthocenter(A, D, G), G we get orthocenter(A, D, G) in Line(G, orthocenter(A, B, D)), G in Line(orthocenter(A, B, D), orthocenter(A, D, G)), Line(G, orthocenter(A, B, D)) == Line(orthocenter(A, B, D), orthocenter(A, D, G)), 0 == 2 * angle(orthocenter(A, D, G), orthocenter(A, B, D), G) mod 360
By power_of_a_point_on_circle on G, Circle(D, E, G) we get 0 == power_of_a_point(G, Circle(D, E, G))
By collinear_definition on D, line_intersection(i, altitude(A, B, D)), B we get line_intersection(i, altitude(A, B, D)) in Line(B, D), B in Line(D, line_intersection(i, altitude(A, B, D))), Line(B, D) == Line(D, line_intersection(i, altitude(A, B, D))), 0 == 2 * angle(line_intersection(i, altitude(A, B, D)), D, B) mod 360
By collinear_definition on orthocenter(A, B, D), orthocenter(A, D, G), B we get orthocenter(A, D, G) in Line(B, orthocenter(A, B, D)), B in Line(orthocenter(A, B, D), orthocenter(A, D, G)), Line(B, orthocenter(A, B, D)) == Line(orthocenter(A, B, D), orthocenter(A, D, G)), 0 == 2 * angle(orthocenter(A, D, G), orthocenter(A, B, D), B) mod 360
By collinear_definition on orthocenter(A, B, D), G, orthocenter(A, D, G) we get G in Line(orthocenter(A, B, D), orthocenter(A, D, G)), orthocenter(A, D, G) in Line(G, orthocenter(A, B, D)), Line(G, orthocenter(A, B, D)) == Line(orthocenter(A, B, D), orthocenter(A, D, G)), 0 == 2 * angle(G, orthocenter(A, B, D), orthocenter(A, D, G)) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(B, G), B, midpoint(B, G), orthocenter(A, D, G) we get Line(B, orthocenter(A, D, G)) == internal_angle_bisector(midpoint(B, G), orthocenter(A, D, G), midpoint(B, G))
By perpendicular_lines_draw_intersection on altitude(midpoint(B, G), B, I), Line(B, I) we get exists(line_intersection(Line(B, I), altitude(midpoint(B, G), B, I)))
By collinear_definition on G, D, line_intersection(Line(D, G), altitude(A, D, G)) we get D in Line(G, line_intersection(Line(D, G), altitude(A, D, G))), line_intersection(Line(D, G), altitude(A, D, G)) in Line(D, G), Line(D, G) == Line(G, line_intersection(Line(D, G), altitude(A, D, G))), 0 == 2 * angle(D, G, line_intersection(Line(D, G), altitude(A, D, G))) mod 360
By power_of_a_point_in_circle on E, Circle(D, E, G) we get 0 == power_of_a_point(E, Circle(D, E, G))
By collinear_definition on orthocenter(A, B, D), A, line_intersection(i, altitude(A, B, D)) we get A in Line(orthocenter(A, B, D), line_intersection(i, altitude(A, B, D))), line_intersection(i, altitude(A, B, D)) in Line(A, orthocenter(A, B, D)), Line(A, orthocenter(A, B, D)) == Line(orthocenter(A, B, D), line_intersection(i, altitude(A, B, D))), 0 == 2 * angle(A, orthocenter(A, B, D), line_intersection(i, altitude(A, B, D))) mod 360
By power_of_a_point_on_circle on midpoint(B, G), Circle(B, D, F) we get 0 == power_of_a_point(midpoint(B, G), Circle(B, D, F))
By internal_angle_bisector_definition_v0_r on orthocenter(A, D, G), B, orthocenter(A, D, G), midpoint(B, G) we get Line(B, midpoint(B, G)) == internal_angle_bisector(orthocenter(A, D, G), midpoint(B, G), orthocenter(A, D, G))
By collinear_definition on orthocenter(A, D, G), G, orthocenter(A, B, D) we get G in Line(orthocenter(A, B, D), orthocenter(A, D, G)), orthocenter(A, B, D) in Line(G, orthocenter(A, D, G)), Line(G, orthocenter(A, D, G)) == Line(orthocenter(A, B, D), orthocenter(A, D, G)), 0 == 2 * angle(G, orthocenter(A, D, G), orthocenter(A, B, D)) mod 360
By power_of_a_point_in_circle on midpoint(B, G), Circle(D, E, G) we get 0 == power_of_a_point(midpoint(B, G), Circle(D, E, G))
By collinear_definition on orthocenter(A, D, G), orthocenter(A, B, D), G we get orthocenter(A, B, D) in Line(G, orthocenter(A, D, G)), G in Line(orthocenter(A, B, D), orthocenter(A, D, G)), Line(G, orthocenter(A, D, G)) == Line(orthocenter(A, B, D), orthocenter(A, D, G)), 0 == 2 * angle(orthocenter(A, B, D), orthocenter(A, D, G), G) mod 360
By collinear_definition on orthocenter(A, D, G), line_intersection(Line(D, G), altitude(A, D, G)), A we get line_intersection(Line(D, G), altitude(A, D, G)) in Line(A, orthocenter(A, D, G)), A in Line(orthocenter(A, D, G), line_intersection(Line(D, G), altitude(A, D, G))), Line(A, orthocenter(A, D, G)) == Line(orthocenter(A, D, G), line_intersection(Line(D, G), altitude(A, D, G))), 0 == 2 * angle(line_intersection(Line(D, G), altitude(A, D, G)), orthocenter(A, D, G), A) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(B, G), G, midpoint(B, G), orthocenter(A, D, G) we get Line(G, orthocenter(A, D, G)) == internal_angle_bisector(midpoint(B, G), orthocenter(A, D, G), midpoint(B, G))
By internal_angle_bisector_definition_v0_r on orthocenter(A, D, G), G, orthocenter(A, D, G), midpoint(B, G) we get Line(G, midpoint(B, G)) == internal_angle_bisector(orthocenter(A, D, G), midpoint(B, G), orthocenter(A, D, G))
By collinear_definition on D, G, line_intersection(Line(D, G), altitude(A, D, G)) we get G in Line(D, line_intersection(Line(D, G), altitude(A, D, G))), line_intersection(Line(D, G), altitude(A, D, G)) in Line(D, G), Line(D, G) == Line(D, line_intersection(Line(D, G), altitude(A, D, G))), 0 == 2 * angle(G, D, line_intersection(Line(D, G), altitude(A, D, G))) mod 360
By perpendicular_lines_draw_intersection on altitude(midpoint(B, G), D, G), Line(D, G) we get exists(line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)))
By collinear_definition on orthocenter(A, B, D), B, orthocenter(A, D, G) we get B in Line(orthocenter(A, B, D), orthocenter(A, D, G)), orthocenter(A, D, G) in Line(B, orthocenter(A, B, D)), Line(B, orthocenter(A, B, D)) == Line(orthocenter(A, B, D), orthocenter(A, D, G)), 0 == 2 * angle(B, orthocenter(A, B, D), orthocenter(A, D, G)) mod 360
By collinear_definition on G, line_intersection(Line(D, G), altitude(A, D, G)), D we get line_intersection(Line(D, G), altitude(A, D, G)) in Line(D, G), D in Line(G, line_intersection(Line(D, G), altitude(A, D, G))), Line(D, G) == Line(G, line_intersection(Line(D, G), altitude(A, D, G))), 0 == 2 * angle(line_intersection(Line(D, G), altitude(A, D, G)), G, D) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(B, G), G, midpoint(B, G), orthocenter(A, B, D) we get Line(G, orthocenter(A, B, D)) == internal_angle_bisector(midpoint(B, G), orthocenter(A, B, D), midpoint(B, G))
By collinear_definition on A, orthocenter(A, B, D), line_intersection(i, altitude(A, B, D)) we get orthocenter(A, B, D) in Line(A, line_intersection(i, altitude(A, B, D))), line_intersection(i, altitude(A, B, D)) in Line(A, orthocenter(A, B, D)), Line(A, orthocenter(A, B, D)) == Line(A, line_intersection(i, altitude(A, B, D))), 0 == 2 * angle(orthocenter(A, B, D), A, line_intersection(i, altitude(A, B, D))) mod 360
By altitude_definition on orthocenter(A, D, G), D, G, altitude(A, D, G) we get altitude(A, D, G) == altitude(orthocenter(A, D, G), D, G)
By collinear_definition on D, B, line_intersection(i, altitude(A, B, D)) we get B in Line(D, line_intersection(i, altitude(A, B, D))), line_intersection(i, altitude(A, B, D)) in Line(B, D), Line(B, D) == Line(D, line_intersection(i, altitude(A, B, D))), 0 == 2 * angle(B, D, line_intersection(i, altitude(A, B, D))) mod 360
By collinear_definition on orthocenter(A, D, G), B, orthocenter(A, B, D) we get B in Line(orthocenter(A, B, D), orthocenter(A, D, G)), orthocenter(A, B, D) in Line(B, orthocenter(A, D, G)), Line(B, orthocenter(A, D, G)) == Line(orthocenter(A, B, D), orthocenter(A, D, G)), 0 == 2 * angle(B, orthocenter(A, D, G), orthocenter(A, B, D)) mod 360
By collinear_definition on D, line_intersection(Line(D, G), altitude(A, D, G)), G we get line_intersection(Line(D, G), altitude(A, D, G)) in Line(D, G), G in Line(D, line_intersection(Line(D, G), altitude(A, D, G))), Line(D, G) == Line(D, line_intersection(Line(D, G), altitude(A, D, G))), 0 == 2 * angle(line_intersection(Line(D, G), altitude(A, D, G)), D, G) mod 360
By perpendicular_lines_draw_intersection on altitude(midpoint(B, G), A, B), f we get exists(line_intersection(f, altitude(midpoint(B, G), A, B)))
By internal_angle_bisector_definition_v0_r on orthocenter(A, B, D), G, orthocenter(A, B, D), midpoint(B, G) we get Line(G, midpoint(B, G)) == internal_angle_bisector(orthocenter(A, B, D), midpoint(B, G), orthocenter(A, B, D))
By perpendicular_lines_draw_intersection on altitude(midpoint(B, G), B, D), i we get exists(line_intersection(i, altitude(midpoint(B, G), B, D)))
By altitude_definition on orthocenter(A, D, G), I, D, Line(B, G) we get Line(B, G) == altitude(orthocenter(A, D, G), D, I)
By altitude_definition on orthocenter(A, B, D), B, H, Line(D, F) we get Line(D, F) == altitude(orthocenter(A, B, D), B, H)
By altitude_definition on orthocenter(A, B, D), F, B, Line(D, F) we get Line(D, F) == altitude(orthocenter(A, B, D), B, F)
By altitude_definition on D, G, orthocenter(A, B, D), h we get h == altitude(D, G, orthocenter(A, B, D))
By altitude_definition on orthocenter(A, B, D), I, midpoint(B, G), Line(B, G) we get Line(B, G) == altitude(orthocenter(A, B, D), I, midpoint(B, G))
By altitude_definition on I, G, orthocenter(A, B, D), h we get h == altitude(I, G, orthocenter(A, B, D))
By altitude_definition on orthocenter(A, D, G), midpoint(B, G), A, Line(B, G) we get Line(B, G) == altitude(orthocenter(A, D, G), A, midpoint(B, G))
By altitude_definition on A, orthocenter(A, D, G), G, h we get h == altitude(A, G, orthocenter(A, D, G))
By altitude_definition on orthocenter(A, D, G), G, E, Line(D, E) we get Line(D, E) == altitude(orthocenter(A, D, G), E, G)
By altitude_definition on orthocenter(A, B, D), A, midpoint(B, G), Line(B, G) we get Line(B, G) == altitude(orthocenter(A, B, D), A, midpoint(B, G))
By altitude_definition on midpoint(B, G), H, F, altitude(midpoint(B, G), A, B) we get altitude(midpoint(B, G), A, B) == altitude(midpoint(B, G), F, H)
By altitude_definition on A, orthocenter(A, B, D), B, h we get h == altitude(A, B, orthocenter(A, B, D))
By altitude_definition on C, D, orthocenter(A, D, G), g we get g == altitude(C, D, orthocenter(A, D, G))
By altitude_definition on orthocenter(A, B, D), midpoint(B, G), D, Line(B, G) we get Line(B, G) == altitude(orthocenter(A, B, D), D, midpoint(B, G))
By altitude_definition on D, midpoint(B, G), orthocenter(A, D, G), h we get h == altitude(D, midpoint(B, G), orthocenter(A, D, G))
By altitude_definition on orthocenter(A, B, D), I, D, Line(B, G) we get Line(B, G) == altitude(orthocenter(A, B, D), D, I)
By altitude_definition on midpoint(B, G), H, A, altitude(midpoint(B, G), A, B) we get altitude(midpoint(B, G), A, B) == altitude(midpoint(B, G), A, H)
By altitude_definition on midpoint(B, G), E, G, altitude(midpoint(B, G), A, G) we get altitude(midpoint(B, G), A, G) == altitude(midpoint(B, G), E, G)
By altitude_definition on I, orthocenter(A, D, G), midpoint(B, G), h we get h == altitude(I, midpoint(B, G), orthocenter(A, D, G))
By altitude_definition on orthocenter(A, D, G), G, A, Line(D, E) we get Line(D, E) == altitude(orthocenter(A, D, G), A, G)
By altitude_definition on midpoint(B, G), E, A, altitude(midpoint(B, G), A, G) we get altitude(midpoint(B, G), A, E) == altitude(midpoint(B, G), A, G)
By collinear_definition on line_intersection(i, altitude(A, B, D)), B, D we get B in Line(D, line_intersection(i, altitude(A, B, D))), D in Line(B, line_intersection(i, altitude(A, B, D))), Line(B, line_intersection(i, altitude(A, B, D))) == Line(D, line_intersection(i, altitude(A, B, D))), 0 == 2 * angle(B, line_intersection(i, altitude(A, B, D)), D) mod 360
By altitude_definition on A, D, orthocenter(A, D, G), g we get g == altitude(A, D, orthocenter(A, D, G))
By altitude_definition on A, midpoint(B, G), orthocenter(A, D, G), h we get h == altitude(A, midpoint(B, G), orthocenter(A, D, G))
By altitude_definition on midpoint(B, G), A, C, altitude(midpoint(B, G), A, G) we get altitude(midpoint(B, G), A, C) == altitude(midpoint(B, G), A, G)
By altitude_definition on G, orthocenter(A, D, G), E, g we get g == altitude(G, E, orthocenter(A, D, G))
By altitude_definition on B, orthocenter(A, B, D), F, f we get f == altitude(B, F, orthocenter(A, B, D))
By altitude_definition on B, orthocenter(A, B, D), A, i we get i == altitude(B, A, orthocenter(A, B, D))
By altitude_definition on D, G, orthocenter(A, D, G), h we get h == altitude(D, G, orthocenter(A, D, G))
By altitude_definition on orthocenter(A, D, G), A, D, Line(B, G) we get Line(B, G) == altitude(orthocenter(A, D, G), A, D)
By altitude_definition on orthocenter(A, B, D), A, B, Line(D, F) we get Line(D, F) == altitude(orthocenter(A, B, D), A, B)
By altitude_definition on A, orthocenter(A, B, D), F, f we get f == altitude(A, F, orthocenter(A, B, D))
By altitude_definition on A, orthocenter(A, D, G), E, g we get g == altitude(A, E, orthocenter(A, D, G))
By altitude_definition on midpoint(B, G), E, C, altitude(midpoint(B, G), A, G) we get altitude(midpoint(B, G), A, G) == altitude(midpoint(B, G), C, E)
By altitude_definition on D, orthocenter(A, B, D), midpoint(B, G), h we get h == altitude(D, midpoint(B, G), orthocenter(A, B, D))
By altitude_definition on A, orthocenter(A, B, D), G, h we get h == altitude(A, G, orthocenter(A, B, D))
By altitude_definition on orthocenter(A, B, D), F, A, Line(D, F) we get Line(D, F) == altitude(orthocenter(A, B, D), A, F)
By altitude_definition on D, orthocenter(A, B, D), B, h we get h == altitude(D, B, orthocenter(A, B, D))
By altitude_definition on midpoint(B, G), H, B, altitude(midpoint(B, G), A, B) we get altitude(midpoint(B, G), A, B) == altitude(midpoint(B, G), B, H)
By altitude_definition on orthocenter(A, D, G), E, C, Line(D, E) we get Line(D, E) == altitude(orthocenter(A, D, G), C, E)
By altitude_definition on orthocenter(A, D, G), D, midpoint(B, G), Line(B, G) we get Line(B, G) == altitude(orthocenter(A, D, G), D, midpoint(B, G))
By altitude_definition on orthocenter(A, B, D), B, D, altitude(A, B, D) we get altitude(A, B, D) == altitude(orthocenter(A, B, D), B, D)
By altitude_definition on A, midpoint(B, G), orthocenter(A, B, D), h we get h == altitude(A, midpoint(B, G), orthocenter(A, B, D))
By altitude_definition on D, B, orthocenter(A, D, G), h we get h == altitude(D, B, orthocenter(A, D, G))
By altitude_definition on orthocenter(A, D, G), A, I, Line(B, G) we get Line(B, G) == altitude(orthocenter(A, D, G), A, I)
By altitude_definition on G, D, orthocenter(A, D, G), g we get g == altitude(G, D, orthocenter(A, D, G))
By altitude_definition on midpoint(B, G), B, F, altitude(midpoint(B, G), A, B) we get altitude(midpoint(B, G), A, B) == altitude(midpoint(B, G), B, F)
By altitude_definition on orthocenter(A, D, G), E, A, Line(D, E) we get Line(D, E) == altitude(orthocenter(A, D, G), A, E)
By altitude_definition on orthocenter(A, B, D), A, I, Line(B, G) we get Line(B, G) == altitude(orthocenter(A, B, D), A, I)
By altitude_definition on H, D, orthocenter(A, B, D), f we get f == altitude(H, D, orthocenter(A, B, D))
By altitude_definition on D, A, orthocenter(A, D, G), Line(D, G) we get Line(D, G) == altitude(D, A, orthocenter(A, D, G))
By altitude_definition on orthocenter(A, B, D), F, H, Line(D, F) we get Line(D, F) == altitude(orthocenter(A, B, D), F, H)
By altitude_definition on H, orthocenter(A, B, D), F, f we get f == altitude(H, F, orthocenter(A, B, D))
By altitude_definition on A, B, orthocenter(A, D, G), h we get h == altitude(A, B, orthocenter(A, D, G))
By collinear_definition on line_intersection(Line(D, G), altitude(A, D, G)), D, G we get D in Line(G, line_intersection(Line(D, G), altitude(A, D, G))), G in Line(D, line_intersection(Line(D, G), altitude(A, D, G))), Line(D, line_intersection(Line(D, G), altitude(A, D, G))) == Line(G, line_intersection(Line(D, G), altitude(A, D, G))), 0 == 2 * angle(D, line_intersection(Line(D, G), altitude(A, D, G)), G) mod 360
By altitude_definition on G, orthocenter(A, D, G), A, Line(D, G) we get Line(D, G) == altitude(G, A, orthocenter(A, D, G))
By collinear_definition on line_intersection(Line(D, G), altitude(A, D, G)), A, orthocenter(A, D, G) we get A in Line(orthocenter(A, D, G), line_intersection(Line(D, G), altitude(A, D, G))), orthocenter(A, D, G) in Line(A, line_intersection(Line(D, G), altitude(A, D, G))), Line(A, line_intersection(Line(D, G), altitude(A, D, G))) == Line(orthocenter(A, D, G), line_intersection(Line(D, G), altitude(A, D, G))), 0 == 2 * angle(A, line_intersection(Line(D, G), altitude(A, D, G)), orthocenter(A, D, G)) mod 360
By altitude_definition on I, B, orthocenter(A, D, G), h we get h == altitude(I, B, orthocenter(A, D, G))
By altitude_definition on midpoint(B, G), A, F, altitude(midpoint(B, G), A, B) we get altitude(midpoint(B, G), A, B) == altitude(midpoint(B, G), A, F)
By collinear_definition on line_intersection(Line(D, G), altitude(A, D, G)), orthocenter(A, D, G), A we get orthocenter(A, D, G) in Line(A, line_intersection(Line(D, G), altitude(A, D, G))), A in Line(orthocenter(A, D, G), line_intersection(Line(D, G), altitude(A, D, G))), Line(A, line_intersection(Line(D, G), altitude(A, D, G))) == Line(orthocenter(A, D, G), line_intersection(Line(D, G), altitude(A, D, G))), 0 == 2 * angle(orthocenter(A, D, G), line_intersection(Line(D, G), altitude(A, D, G)), A) mod 360
By altitude_definition on orthocenter(A, D, G), C, A, Line(D, E) we get Line(D, E) == altitude(orthocenter(A, D, G), A, C)
By altitude_definition on I, orthocenter(A, B, D), B, h we get h == altitude(I, B, orthocenter(A, B, D))
By altitude_definition on B, orthocenter(A, B, D), D, f we get f == altitude(B, D, orthocenter(A, B, D))
By altitude_definition on orthocenter(A, B, D), A, H, Line(D, F) we get Line(D, F) == altitude(orthocenter(A, B, D), A, H)
By altitude_definition on I, midpoint(B, G), orthocenter(A, B, D), h we get h == altitude(I, midpoint(B, G), orthocenter(A, B, D))
By altitude_definition on orthocenter(A, B, D), D, A, Line(B, G) we get Line(B, G) == altitude(orthocenter(A, B, D), A, D)
By altitude_definition on D, A, orthocenter(A, B, D), i we get i == altitude(D, A, orthocenter(A, B, D))
By altitude_definition on I, G, orthocenter(A, D, G), h we get h == altitude(I, G, orthocenter(A, D, G))
By altitude_definition on midpoint(B, G), G, C, altitude(midpoint(B, G), A, G) we get altitude(midpoint(B, G), A, G) == altitude(midpoint(B, G), C, G)
By altitude_definition on C, E, orthocenter(A, D, G), g we get g == altitude(C, E, orthocenter(A, D, G))
By altitude_definition on orthocenter(A, D, G), midpoint(B, G), I, Line(B, G) we get Line(B, G) == altitude(orthocenter(A, D, G), I, midpoint(B, G))
By altitude_definition on A, orthocenter(A, B, D), D, f we get f == altitude(A, D, orthocenter(A, B, D))
By collinear_definition on line_intersection(i, altitude(A, B, D)), orthocenter(A, B, D), A we get orthocenter(A, B, D) in Line(A, line_intersection(i, altitude(A, B, D))), A in Line(orthocenter(A, B, D), line_intersection(i, altitude(A, B, D))), Line(A, line_intersection(i, altitude(A, B, D))) == Line(orthocenter(A, B, D), line_intersection(i, altitude(A, B, D))), 0 == 2 * angle(orthocenter(A, B, D), line_intersection(i, altitude(A, B, D)), A) mod 360
By collinear_definition on line_intersection(i, altitude(A, B, D)), A, orthocenter(A, B, D) we get A in Line(orthocenter(A, B, D), line_intersection(i, altitude(A, B, D))), orthocenter(A, B, D) in Line(A, line_intersection(i, altitude(A, B, D))), Line(A, line_intersection(i, altitude(A, B, D))) == Line(orthocenter(A, B, D), line_intersection(i, altitude(A, B, D))), 0 == 2 * angle(A, line_intersection(i, altitude(A, B, D)), orthocenter(A, B, D)) mod 360
By altitude_definition on orthocenter(A, D, G), C, G, Line(D, E) we get Line(D, E) == altitude(orthocenter(A, D, G), C, G)
By collinear_definition on line_intersection(Line(D, G), altitude(A, D, G)), G, D we get G in Line(D, line_intersection(Line(D, G), altitude(A, D, G))), D in Line(G, line_intersection(Line(D, G), altitude(A, D, G))), Line(D, line_intersection(Line(D, G), altitude(A, D, G))) == Line(G, line_intersection(Line(D, G), altitude(A, D, G))), 0 == 2 * angle(G, line_intersection(Line(D, G), altitude(A, D, G)), D) mod 360
By collinear_definition on line_intersection(i, altitude(A, B, D)), D, B we get D in Line(B, line_intersection(i, altitude(A, B, D))), B in Line(D, line_intersection(i, altitude(A, B, D))), Line(B, line_intersection(i, altitude(A, B, D))) == Line(D, line_intersection(i, altitude(A, B, D))), 0 == 2 * angle(D, line_intersection(i, altitude(A, B, D)), B) mod 360
By orthocenter_concurrency on orthocenter(A, D, G), G, D we get orthocenter(D, G, orthocenter(A, D, G)) in altitude(orthocenter(A, D, G), D, G), orthocenter(D, G, orthocenter(A, D, G)) in altitude(G, D, orthocenter(A, D, G)), orthocenter(D, G, orthocenter(A, D, G)) in altitude(D, G, orthocenter(A, D, G))
By orthocenter_concurrency on A, D, orthocenter(A, B, D) we get orthocenter(A, D, orthocenter(A, B, D)) in altitude(A, D, orthocenter(A, B, D)), orthocenter(A, D, orthocenter(A, B, D)) in altitude(D, A, orthocenter(A, B, D)), orthocenter(A, D, orthocenter(A, B, D)) in altitude(orthocenter(A, B, D), A, D)
By perpendicular_line_definition on line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), altitude(midpoint(B, G), D, G), Line(D, G) we get altitude(midpoint(B, G), D, G) == perpendicular_line(line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), Line(D, G))
By perpendicular_line_definition on line_intersection(i, altitude(midpoint(B, G), B, D)), i, altitude(A, B, D) we get i == perpendicular_line(line_intersection(i, altitude(midpoint(B, G), B, D)), altitude(A, B, D))
By orthocenter_concurrency on B, orthocenter(A, B, D), D we get orthocenter(B, D, orthocenter(A, B, D)) in altitude(B, D, orthocenter(A, B, D)), orthocenter(B, D, orthocenter(A, B, D)) in altitude(orthocenter(A, B, D), B, D), orthocenter(B, D, orthocenter(A, B, D)) in altitude(D, B, orthocenter(A, B, D))
By orthocenter_concurrency on A, G, orthocenter(A, D, G) we get orthocenter(A, G, orthocenter(A, D, G)) in altitude(A, G, orthocenter(A, D, G)), orthocenter(A, G, orthocenter(A, D, G)) in altitude(G, A, orthocenter(A, D, G)), orthocenter(A, G, orthocenter(A, D, G)) in altitude(orthocenter(A, D, G), A, G)
By perpendicular_line_definition on line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), Line(D, G), altitude(A, D, G) we get Line(D, G) == perpendicular_line(line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), altitude(A, D, G))
By perpendicular_line_definition on line_intersection(f, altitude(midpoint(B, G), A, B)), altitude(midpoint(B, G), A, B), f we get altitude(midpoint(B, G), A, B) == perpendicular_line(line_intersection(f, altitude(midpoint(B, G), A, B)), f)
By orthocenter_concurrency on A, orthocenter(A, B, D), B we get orthocenter(A, B, orthocenter(A, B, D)) in altitude(A, B, orthocenter(A, B, D)), orthocenter(A, B, orthocenter(A, B, D)) in altitude(orthocenter(A, B, D), A, B), orthocenter(A, B, orthocenter(A, B, D)) in altitude(B, A, orthocenter(A, B, D))
By perpendicular_line_definition on line_intersection(g, altitude(midpoint(B, G), A, C)), g, altitude(midpoint(B, G), A, C) we get g == perpendicular_line(line_intersection(g, altitude(midpoint(B, G), A, C)), altitude(midpoint(B, G), A, C))
By perpendicular_line_definition on line_intersection(i, altitude(midpoint(B, G), B, D)), i, altitude(F, B, D) we get i == perpendicular_line(line_intersection(i, altitude(midpoint(B, G), B, D)), altitude(F, B, D))
By perpendicular_line_definition on line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), Line(D, G), altitude(E, D, G) we get Line(D, G) == perpendicular_line(line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), altitude(E, D, G))
By orthocenter_concurrency on A, D, orthocenter(A, D, G) we get orthocenter(A, D, orthocenter(A, D, G)) in altitude(A, D, orthocenter(A, D, G)), orthocenter(A, D, orthocenter(A, D, G)) in altitude(D, A, orthocenter(A, D, G)), orthocenter(A, D, orthocenter(A, D, G)) in altitude(orthocenter(A, D, G), A, D)
By perpendicular_line_definition on line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), Line(D, G), altitude(midpoint(B, G), D, G) we get Line(D, G) == perpendicular_line(line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), altitude(midpoint(B, G), D, G))
By perpendicular_line_definition on line_intersection(f, altitude(midpoint(B, G), A, B)), f, Line(D, F) we get f == perpendicular_line(line_intersection(f, altitude(midpoint(B, G), A, B)), Line(D, F))
By perpendicular_line_definition on line_intersection(Line(G, I), altitude(midpoint(B, G), G, I)), Line(G, I), altitude(midpoint(B, G), G, I) we get Line(G, I) == perpendicular_line(line_intersection(Line(G, I), altitude(midpoint(B, G), G, I)), altitude(midpoint(B, G), G, I))
By perpendicular_line_definition on line_intersection(g, altitude(midpoint(B, G), A, C)), g, Line(D, E) we get g == perpendicular_line(line_intersection(g, altitude(midpoint(B, G), A, C)), Line(D, E))
By perpendicular_line_definition on line_intersection(Line(B, I), altitude(midpoint(B, G), B, I)), Line(B, I), altitude(midpoint(B, G), B, I) we get Line(B, I) == perpendicular_line(line_intersection(Line(B, I), altitude(midpoint(B, G), B, I)), altitude(midpoint(B, G), B, I))
By perpendicular_line_definition on line_intersection(i, altitude(midpoint(B, G), B, D)), altitude(midpoint(B, G), B, D), i we get altitude(midpoint(B, G), B, D) == perpendicular_line(line_intersection(i, altitude(midpoint(B, G), B, D)), i)
By perpendicular_line_definition on line_intersection(Line(B, I), altitude(midpoint(B, G), B, I)), altitude(midpoint(B, G), B, I), Line(B, I) we get altitude(midpoint(B, G), B, I) == perpendicular_line(line_intersection(Line(B, I), altitude(midpoint(B, G), B, I)), Line(B, I))
By perpendicular_line_definition on line_intersection(f, altitude(midpoint(B, G), A, B)), f, altitude(midpoint(B, G), A, B) we get f == perpendicular_line(line_intersection(f, altitude(midpoint(B, G), A, B)), altitude(midpoint(B, G), A, B))
By perpendicular_line_definition on line_intersection(i, altitude(midpoint(B, G), B, D)), i, altitude(midpoint(B, G), B, D) we get i == perpendicular_line(line_intersection(i, altitude(midpoint(B, G), B, D)), altitude(midpoint(B, G), B, D))
By perpendicular_line_definition on line_intersection(g, altitude(midpoint(B, G), A, C)), altitude(midpoint(B, G), A, C), g we get altitude(midpoint(B, G), A, C) == perpendicular_line(line_intersection(g, altitude(midpoint(B, G), A, C)), g)
By perpendicular_line_definition on line_intersection(Line(G, I), altitude(midpoint(B, G), G, I)), altitude(midpoint(B, G), G, I), Line(G, I) we get altitude(midpoint(B, G), G, I) == perpendicular_line(line_intersection(Line(G, I), altitude(midpoint(B, G), G, I)), Line(G, I))
By projection_definition on G, projection(A, Line(D, G)), altitude(A, D, G) we get projection(A, Line(D, G)) == projection(G, altitude(A, D, G))
By perpendicular_direction_conditions_v0_r on projection(A, i), D, orthocenter(A, B, D), projection(A, i) we get 180 == 2 * direction(projection(A, i), D) - 2 * direction(orthocenter(A, B, D), projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), B, projection(A, i), orthocenter(A, B, D) we get 180 == 2 * direction(projection(A, i), B) - 2 * direction(projection(A, i), orthocenter(A, B, D)) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), D, F, projection(F, i) we get 180 == 2 * direction(projection(A, i), D) - 2 * direction(F, projection(F, i)) mod 360
By perpendicular_direction_conditions_v0_r on projection(F, i), F, projection(A, i), D we get 180 == 2 * direction(projection(F, i), F) - 2 * direction(projection(A, i), D) mod 360
By projection_definition on orthocenter(A, D, G), projection(A, Line(D, G)), Line(D, G) we get projection(A, Line(D, G)) == projection(orthocenter(A, D, G), Line(D, G))
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), D, A, projection(A, Line(D, G)) we get 180 == 2 * direction(projection(A, Line(D, G)), D) - 2 * direction(A, projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), projection(A, Line(D, G)), projection(A, Line(D, G)), D we get 180 == 2 * direction(orthocenter(A, D, G), projection(A, Line(D, G))) - 2 * direction(projection(A, Line(D, G)), D) mod 360
By perpendicular_direction_conditions_v0_r on projection(E, Line(D, G)), E, projection(A, Line(D, G)), D we get 180 == 2 * direction(projection(E, Line(D, G)), E) - 2 * direction(projection(A, Line(D, G)), D) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, D, G), projection(A, Line(D, G)), D we get 180 == 2 * direction(A, orthocenter(A, D, G)) - 2 * direction(projection(A, Line(D, G)), D) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), G, orthocenter(A, D, G), projection(A, Line(D, G)) we get 180 == 2 * direction(projection(A, Line(D, G)), G) - 2 * direction(orthocenter(A, D, G), projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), orthocenter(A, B, D), projection(A, i), B we get 180 == 2 * direction(projection(A, i), orthocenter(A, B, D)) - 2 * direction(projection(A, i), B) mod 360
By projection_definition on D, projection(A, Line(D, G)), altitude(A, D, G) we get projection(A, Line(D, G)) == projection(D, altitude(A, D, G))
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), A, projection(A, Line(D, G)), G we get 180 == 2 * direction(orthocenter(A, D, G), A) - 2 * direction(projection(A, Line(D, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), D, projection(E, Line(D, G)), E we get 180 == 2 * direction(projection(A, Line(D, G)), D) - 2 * direction(projection(E, Line(D, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), G, A, orthocenter(A, D, G) we get 180 == 2 * direction(projection(A, Line(D, G)), G) - 2 * direction(A, orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), orthocenter(A, D, G), projection(A, Line(D, G)), D we get 180 == 2 * direction(projection(A, Line(D, G)), orthocenter(A, D, G)) - 2 * direction(projection(A, Line(D, G)), D) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), D, orthocenter(A, B, D), A we get 180 == 2 * direction(projection(A, i), D) - 2 * direction(orthocenter(A, B, D), A) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), D, A, projection(A, i) we get 180 == 2 * direction(projection(A, i), D) - 2 * direction(A, projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), B, orthocenter(A, B, D), A we get 180 == 2 * direction(projection(A, i), B) - 2 * direction(orthocenter(A, B, D), A) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), D, A, orthocenter(A, B, D) we get 180 == 2 * direction(projection(A, i), D) - 2 * direction(A, orthocenter(A, B, D)) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), G, A, projection(A, Line(D, G)) we get 180 == 2 * direction(projection(A, Line(D, G)), G) - 2 * direction(A, projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on F, projection(F, i), projection(A, i), D we get 180 == 2 * direction(F, projection(F, i)) - 2 * direction(projection(A, i), D) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, B, D), projection(A, i), B we get 180 == 2 * direction(A, orthocenter(A, B, D)) - 2 * direction(projection(A, i), B) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), A, projection(A, i), B we get 180 == 2 * direction(projection(A, i), A) - 2 * direction(projection(A, i), B) mod 360
By perpendicular_direction_conditions_v0_r on A, projection(A, Line(D, G)), projection(A, Line(D, G)), D we get 180 == 2 * direction(A, projection(A, Line(D, G))) - 2 * direction(projection(A, Line(D, G)), D) mod 360
By perpendicular_direction_conditions_v0_r on E, projection(E, Line(D, G)), projection(A, Line(D, G)), D we get 180 == 2 * direction(E, projection(E, Line(D, G))) - 2 * direction(projection(A, Line(D, G)), D) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), D, projection(A, i), orthocenter(A, B, D) we get 180 == 2 * direction(projection(A, i), D) - 2 * direction(projection(A, i), orthocenter(A, B, D)) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), D, projection(A, Line(D, G)), orthocenter(A, D, G) we get 180 == 2 * direction(projection(A, Line(D, G)), D) - 2 * direction(projection(A, Line(D, G)), orthocenter(A, D, G)) mod 360
By projection_definition on B, projection(A, i), altitude(A, B, D) we get projection(A, i) == projection(B, altitude(A, B, D))
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), D, A, orthocenter(A, D, G) we get 180 == 2 * direction(projection(A, Line(D, G)), D) - 2 * direction(A, orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), D, projection(F, i), F we get 180 == 2 * direction(projection(A, i), D) - 2 * direction(projection(F, i), F) mod 360
By parallel_line_definition on projection(A, i), altitude(A, B, D), altitude(midpoint(B, G), B, D) we get altitude(A, B, D) == parallel_line(projection(A, i), altitude(midpoint(B, G), B, D))
By projection_definition on D, projection(A, i), altitude(A, B, D) we get projection(A, i) == projection(D, altitude(A, B, D))
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), G, orthocenter(A, D, G), A we get 180 == 2 * direction(projection(A, Line(D, G)), G) - 2 * direction(orthocenter(A, D, G), A) mod 360
By perpendicular_direction_conditions_v0_r on F, projection(F, i), projection(A, i), B we get 180 == 2 * direction(F, projection(F, i)) - 2 * direction(projection(A, i), B) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), projection(A, i), projection(A, i), D we get 180 == 2 * direction(orthocenter(A, B, D), projection(A, i)) - 2 * direction(projection(A, i), D) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), D, projection(A, Line(D, G)), A we get 180 == 2 * direction(projection(A, Line(D, G)), D) - 2 * direction(projection(A, Line(D, G)), A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), projection(A, i), projection(A, i), B we get 180 == 2 * direction(orthocenter(A, B, D), projection(A, i)) - 2 * direction(projection(A, i), B) mod 360
By projection_definition on orthocenter(A, B, D), projection(A, i), i we get projection(A, i) == projection(orthocenter(A, B, D), i)
By perpendicular_direction_conditions_v0_r on projection(A, i), B, orthocenter(A, B, D), projection(A, i) we get 180 == 2 * direction(projection(A, i), B) - 2 * direction(orthocenter(A, B, D), projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), A, projection(A, Line(D, G)), G we get 180 == 2 * direction(projection(A, Line(D, G)), A) - 2 * direction(projection(A, Line(D, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), A, projection(A, Line(D, G)), D we get 180 == 2 * direction(projection(A, Line(D, G)), A) - 2 * direction(projection(A, Line(D, G)), D) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), orthocenter(A, D, G), projection(A, Line(D, G)), G we get 180 == 2 * direction(projection(A, Line(D, G)), orthocenter(A, D, G)) - 2 * direction(projection(A, Line(D, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on A, projection(A, i), projection(A, i), B we get 180 == 2 * direction(A, projection(A, i)) - 2 * direction(projection(A, i), B) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), G, projection(E, Line(D, G)), E we get 180 == 2 * direction(projection(A, Line(D, G)), G) - 2 * direction(projection(E, Line(D, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), A, projection(A, i), D we get 180 == 2 * direction(orthocenter(A, B, D), A) - 2 * direction(projection(A, i), D) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), G, projection(A, Line(D, G)), A we get 180 == 2 * direction(projection(A, Line(D, G)), G) - 2 * direction(projection(A, Line(D, G)), A) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), B, F, projection(F, i) we get 180 == 2 * direction(projection(A, i), B) - 2 * direction(F, projection(F, i)) mod 360
By perpendicular_direction_conditions_v0_r on projection(F, i), F, projection(A, i), B we get 180 == 2 * direction(projection(F, i), F) - 2 * direction(projection(A, i), B) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), D, orthocenter(A, D, G), A we get 180 == 2 * direction(projection(A, Line(D, G)), D) - 2 * direction(orthocenter(A, D, G), A) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), A, projection(A, Line(D, G)), D we get 180 == 2 * direction(orthocenter(A, D, G), A) - 2 * direction(projection(A, Line(D, G)), D) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), G, E, projection(E, Line(D, G)) we get 180 == 2 * direction(projection(A, Line(D, G)), G) - 2 * direction(E, projection(E, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), B, A, projection(A, i) we get 180 == 2 * direction(projection(A, i), B) - 2 * direction(A, projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, D, G), projection(A, Line(D, G)), G we get 180 == 2 * direction(A, orthocenter(A, D, G)) - 2 * direction(projection(A, Line(D, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on E, projection(E, Line(D, G)), projection(A, Line(D, G)), G we get 180 == 2 * direction(E, projection(E, Line(D, G))) - 2 * direction(projection(A, Line(D, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), D, E, projection(E, Line(D, G)) we get 180 == 2 * direction(projection(A, Line(D, G)), D) - 2 * direction(E, projection(E, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), B, A, orthocenter(A, B, D) we get 180 == 2 * direction(projection(A, i), B) - 2 * direction(A, orthocenter(A, B, D)) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), D, orthocenter(A, D, G), projection(A, Line(D, G)) we get 180 == 2 * direction(projection(A, Line(D, G)), D) - 2 * direction(orthocenter(A, D, G), projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on A, projection(A, Line(D, G)), projection(A, Line(D, G)), G we get 180 == 2 * direction(A, projection(A, Line(D, G))) - 2 * direction(projection(A, Line(D, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on projection(E, Line(D, G)), E, projection(A, Line(D, G)), G we get 180 == 2 * direction(projection(E, Line(D, G)), E) - 2 * direction(projection(A, Line(D, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), A, projection(A, i), D we get 180 == 2 * direction(projection(A, i), A) - 2 * direction(projection(A, i), D) mod 360
By perpendicular_direction_conditions_v0_r on A, projection(A, i), projection(A, i), D we get 180 == 2 * direction(A, projection(A, i)) - 2 * direction(projection(A, i), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), A, projection(A, i), B we get 180 == 2 * direction(orthocenter(A, B, D), A) - 2 * direction(projection(A, i), B) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), B, projection(A, i), A we get 180 == 2 * direction(projection(A, i), B) - 2 * direction(projection(A, i), A) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), orthocenter(A, B, D), projection(A, i), D we get 180 == 2 * direction(projection(A, i), orthocenter(A, B, D)) - 2 * direction(projection(A, i), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), projection(A, Line(D, G)), projection(A, Line(D, G)), G we get 180 == 2 * direction(orthocenter(A, D, G), projection(A, Line(D, G))) - 2 * direction(projection(A, Line(D, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), G, projection(A, Line(D, G)), orthocenter(A, D, G) we get 180 == 2 * direction(projection(A, Line(D, G)), G) - 2 * direction(projection(A, Line(D, G)), orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), B, projection(F, i), F we get 180 == 2 * direction(projection(A, i), B) - 2 * direction(projection(F, i), F) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, B, D), projection(A, i), D we get 180 == 2 * direction(A, orthocenter(A, B, D)) - 2 * direction(projection(A, i), D) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), D, projection(A, i), A we get 180 == 2 * direction(projection(A, i), D) - 2 * direction(projection(A, i), A) mod 360
By parallel_line_definition on midpoint(B, G), altitude(midpoint(B, G), A, B), Line(D, F) we get altitude(midpoint(B, G), A, B) == parallel_line(midpoint(B, G), Line(D, F))
By parallel_line_definition on D, Line(D, E), altitude(midpoint(B, G), A, C) we get Line(D, E) == parallel_line(D, altitude(midpoint(B, G), A, C))
By parallel_line_definition on line_intersection(i, altitude(midpoint(B, G), B, D)), altitude(midpoint(B, G), B, D), altitude(F, B, D) we get altitude(midpoint(B, G), B, D) == parallel_line(line_intersection(i, altitude(midpoint(B, G), B, D)), altitude(F, B, D))
By parallel_line_definition on line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), altitude(midpoint(B, G), D, G), altitude(A, D, G) we get altitude(midpoint(B, G), D, G) == parallel_line(line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), altitude(A, D, G))
By parallel_line_definition on E, Line(D, E), altitude(midpoint(B, G), A, C) we get Line(D, E) == parallel_line(E, altitude(midpoint(B, G), A, C))
By parallel_line_definition on F, Line(D, F), altitude(midpoint(B, G), A, B) we get Line(D, F) == parallel_line(F, altitude(midpoint(B, G), A, B))
By parallel_line_definition on midpoint(B, G), altitude(midpoint(B, G), B, D), altitude(A, B, D) we get altitude(midpoint(B, G), B, D) == parallel_line(midpoint(B, G), altitude(A, B, D))
By parallel_line_definition on line_intersection(i, altitude(midpoint(B, G), B, D)), altitude(midpoint(B, G), B, D), altitude(A, B, D) we get altitude(midpoint(B, G), B, D) == parallel_line(line_intersection(i, altitude(midpoint(B, G), B, D)), altitude(A, B, D))
By parallel_line_definition on midpoint(B, G), altitude(midpoint(B, G), B, D), altitude(F, B, D) we get altitude(midpoint(B, G), B, D) == parallel_line(midpoint(B, G), altitude(F, B, D))
By parallel_line_definition on orthocenter(A, D, G), altitude(A, D, G), altitude(midpoint(B, G), D, G) we get altitude(A, D, G) == parallel_line(orthocenter(A, D, G), altitude(midpoint(B, G), D, G))
By parallel_line_definition on projection(E, Line(D, G)), altitude(E, D, G), altitude(midpoint(B, G), D, G) we get altitude(E, D, G) == parallel_line(projection(E, Line(D, G)), altitude(midpoint(B, G), D, G))
By parallel_line_definition on orthocenter(A, B, D), Line(D, F), altitude(midpoint(B, G), A, B) we get Line(D, F) == parallel_line(orthocenter(A, B, D), altitude(midpoint(B, G), A, B))
By parallel_line_definition on A, altitude(A, D, G), altitude(midpoint(B, G), D, G) we get altitude(A, D, G) == parallel_line(A, altitude(midpoint(B, G), D, G))
By parallel_line_definition on D, Line(D, F), altitude(midpoint(B, G), A, B) we get Line(D, F) == parallel_line(D, altitude(midpoint(B, G), A, B))
By parallel_line_definition on midpoint(B, G), altitude(midpoint(B, G), D, G), altitude(A, D, G) we get altitude(midpoint(B, G), D, G) == parallel_line(midpoint(B, G), altitude(A, D, G))
By parallel_line_definition on line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), altitude(midpoint(B, G), D, G), altitude(E, D, G) we get altitude(midpoint(B, G), D, G) == parallel_line(line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), altitude(E, D, G))
By parallel_line_definition on projection(F, i), altitude(F, B, D), altitude(midpoint(B, G), B, D) we get altitude(F, B, D) == parallel_line(projection(F, i), altitude(midpoint(B, G), B, D))
By parallel_line_definition on E, altitude(E, D, G), altitude(midpoint(B, G), D, G) we get altitude(E, D, G) == parallel_line(E, altitude(midpoint(B, G), D, G))
By parallel_line_definition on F, altitude(F, B, D), altitude(midpoint(B, G), B, D) we get altitude(F, B, D) == parallel_line(F, altitude(midpoint(B, G), B, D))
By parallel_line_definition on line_intersection(f, altitude(midpoint(B, G), A, B)), altitude(midpoint(B, G), A, B), Line(D, F) we get altitude(midpoint(B, G), A, B) == parallel_line(line_intersection(f, altitude(midpoint(B, G), A, B)), Line(D, F))
By parallel_line_definition on midpoint(B, G), altitude(midpoint(B, G), D, G), altitude(E, D, G) we get altitude(midpoint(B, G), D, G) == parallel_line(midpoint(B, G), altitude(E, D, G))
By parallel_line_definition on orthocenter(A, D, G), Line(D, E), altitude(midpoint(B, G), A, C) we get Line(D, E) == parallel_line(orthocenter(A, D, G), altitude(midpoint(B, G), A, C))
By parallel_line_definition on A, altitude(A, B, D), altitude(midpoint(B, G), B, D) we get altitude(A, B, D) == parallel_line(A, altitude(midpoint(B, G), B, D))
By parallel_line_definition on orthocenter(A, B, D), altitude(A, B, D), altitude(midpoint(B, G), B, D) we get altitude(A, B, D) == parallel_line(orthocenter(A, B, D), altitude(midpoint(B, G), B, D))
By parallel_line_definition on projection(A, Line(D, G)), altitude(A, D, G), altitude(midpoint(B, G), D, G) we get altitude(A, D, G) == parallel_line(projection(A, Line(D, G)), altitude(midpoint(B, G), D, G))
By parallel_line_definition on midpoint(B, G), altitude(midpoint(B, G), A, C), Line(D, E) we get altitude(midpoint(B, G), A, C) == parallel_line(midpoint(B, G), Line(D, E))
By parallel_line_definition on line_intersection(g, altitude(midpoint(B, G), A, C)), altitude(midpoint(B, G), A, C), Line(D, E) we get altitude(midpoint(B, G), A, C) == parallel_line(line_intersection(g, altitude(midpoint(B, G), A, C)), Line(D, E))
By different_points_v1 on D, projection(A, Line(D, G)) we get 0 != distance(D, projection(A, Line(D, G)))
By different_points_v1 on orthocenter(A, B, D), orthocenter(A, D, G) we get 0 != distance(orthocenter(A, B, D), orthocenter(A, D, G))
By different_points_v1 on projection(A, Line(D, G)), G we get 0 != distance(G, projection(A, Line(D, G)))
By different_points_v1 on projection(A, i), B we get 0 != distance(B, projection(A, i))
By different_points_v1 on D, projection(A, i) we get 0 != distance(D, projection(A, i))
By different_points_v1 on orthocenter(A, B, D), projection(A, i) we get 0 != distance(projection(A, i), orthocenter(A, B, D))
By different_points_v1 on orthocenter(A, D, G), projection(A, Line(D, G)) we get 0 != distance(orthocenter(A, D, G), projection(A, Line(D, G)))
By orthocenter_concurrency on B, orthocenter(A, B, D), F we get orthocenter(B, F, orthocenter(A, B, D)) in altitude(B, F, orthocenter(A, B, D)), orthocenter(B, F, orthocenter(A, B, D)) in altitude(orthocenter(A, B, D), B, F), orthocenter(B, F, orthocenter(A, B, D)) in altitude(F, B, orthocenter(A, B, D))
By orthocenter_concurrency on orthocenter(A, D, G), C, E we get orthocenter(C, E, orthocenter(A, D, G)) in altitude(orthocenter(A, D, G), C, E), orthocenter(C, E, orthocenter(A, D, G)) in altitude(C, E, orthocenter(A, D, G)), orthocenter(C, E, orthocenter(A, D, G)) in altitude(E, C, orthocenter(A, D, G))
By orthocenter_concurrency on F, midpoint(B, G), A we get orthocenter(A, F, midpoint(B, G)) in altitude(F, A, midpoint(B, G)), orthocenter(A, F, midpoint(B, G)) in altitude(midpoint(B, G), A, F), orthocenter(A, F, midpoint(B, G)) in altitude(A, F, midpoint(B, G))
By perpendicular_angle_conditions_v0 on D, projection(A, i), orthocenter(A, B, D) we get angle(D, projection(A, i), orthocenter(A, B, D)) == orientation(D, projection(A, i), orthocenter(A, B, D)) mod 360
By orthocenter_concurrency on A, orthocenter(A, B, D), F we get orthocenter(A, F, orthocenter(A, B, D)) in altitude(A, F, orthocenter(A, B, D)), orthocenter(A, F, orthocenter(A, B, D)) in altitude(orthocenter(A, B, D), A, F), orthocenter(A, F, orthocenter(A, B, D)) in altitude(F, A, orthocenter(A, B, D))
By orthocenter_concurrency on orthocenter(A, D, G), G, E we get orthocenter(E, G, orthocenter(A, D, G)) in altitude(orthocenter(A, D, G), E, G), orthocenter(E, G, orthocenter(A, D, G)) in altitude(G, E, orthocenter(A, D, G)), orthocenter(E, G, orthocenter(A, D, G)) in altitude(E, G, orthocenter(A, D, G))
By orthocenter_concurrency on H, orthocenter(A, B, D), F we get orthocenter(F, H, orthocenter(A, B, D)) in altitude(H, F, orthocenter(A, B, D)), orthocenter(F, H, orthocenter(A, B, D)) in altitude(orthocenter(A, B, D), F, H), orthocenter(F, H, orthocenter(A, B, D)) in altitude(F, H, orthocenter(A, B, D))
By orthocenter_concurrency on orthocenter(A, D, G), A, E we get orthocenter(A, E, orthocenter(A, D, G)) in altitude(orthocenter(A, D, G), A, E), orthocenter(A, E, orthocenter(A, D, G)) in altitude(A, E, orthocenter(A, D, G)), orthocenter(A, E, orthocenter(A, D, G)) in altitude(E, A, orthocenter(A, D, G))
By orthocenter_concurrency on midpoint(B, G), E, A we get orthocenter(A, E, midpoint(B, G)) in altitude(midpoint(B, G), A, E), orthocenter(A, E, midpoint(B, G)) in altitude(E, A, midpoint(B, G)), orthocenter(A, E, midpoint(B, G)) in altitude(A, E, midpoint(B, G))
By orthocenter_concurrency on D, orthocenter(A, B, D), midpoint(B, G) we get orthocenter(D, midpoint(B, G), orthocenter(A, B, D)) in altitude(D, midpoint(B, G), orthocenter(A, B, D)), orthocenter(D, midpoint(B, G), orthocenter(A, B, D)) in altitude(orthocenter(A, B, D), D, midpoint(B, G)), orthocenter(D, midpoint(B, G), orthocenter(A, B, D)) in altitude(midpoint(B, G), D, orthocenter(A, B, D))
By orthocenter_concurrency on orthocenter(A, B, D), I, midpoint(B, G) we get orthocenter(I, midpoint(B, G), orthocenter(A, B, D)) in altitude(orthocenter(A, B, D), I, midpoint(B, G)), orthocenter(I, midpoint(B, G), orthocenter(A, B, D)) in altitude(I, midpoint(B, G), orthocenter(A, B, D)), orthocenter(I, midpoint(B, G), orthocenter(A, B, D)) in altitude(midpoint(B, G), I, orthocenter(A, B, D))
By orthocenter_concurrency on orthocenter(A, D, G), A, midpoint(B, G) we get orthocenter(A, midpoint(B, G), orthocenter(A, D, G)) in altitude(orthocenter(A, D, G), A, midpoint(B, G)), orthocenter(A, midpoint(B, G), orthocenter(A, D, G)) in altitude(A, midpoint(B, G), orthocenter(A, D, G)), orthocenter(A, midpoint(B, G), orthocenter(A, D, G)) in altitude(midpoint(B, G), A, orthocenter(A, D, G))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, Line(D, G)), midpoint(B, G), orthocenter(A, D, G) we get not_collinear(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G))), exists(Line(midpoint(B, G), orthocenter(A, D, G)))
By orthocenter_concurrency on orthocenter(A, D, G), D, midpoint(B, G) we get orthocenter(D, midpoint(B, G), orthocenter(A, D, G)) in altitude(orthocenter(A, D, G), D, midpoint(B, G)), orthocenter(D, midpoint(B, G), orthocenter(A, D, G)) in altitude(D, midpoint(B, G), orthocenter(A, D, G)), orthocenter(D, midpoint(B, G), orthocenter(A, D, G)) in altitude(midpoint(B, G), D, orthocenter(A, D, G))
By orthocenter_concurrency on orthocenter(A, B, D), A, midpoint(B, G) we get orthocenter(A, midpoint(B, G), orthocenter(A, B, D)) in altitude(orthocenter(A, B, D), A, midpoint(B, G)), orthocenter(A, midpoint(B, G), orthocenter(A, B, D)) in altitude(A, midpoint(B, G), orthocenter(A, B, D)), orthocenter(A, midpoint(B, G), orthocenter(A, B, D)) in altitude(midpoint(B, G), A, orthocenter(A, B, D))
By orthocenter_concurrency on orthocenter(A, D, G), I, midpoint(B, G) we get orthocenter(I, midpoint(B, G), orthocenter(A, D, G)) in altitude(orthocenter(A, D, G), I, midpoint(B, G)), orthocenter(I, midpoint(B, G), orthocenter(A, D, G)) in altitude(I, midpoint(B, G), orthocenter(A, D, G)), orthocenter(I, midpoint(B, G), orthocenter(A, D, G)) in altitude(midpoint(B, G), I, orthocenter(A, D, G))
By in_imply_collinear on line_intersection(g, altitude(midpoint(B, G), A, C)), E, G we get collinear(E, G, line_intersection(g, altitude(midpoint(B, G), A, C)))
By in_imply_collinear on line_intersection(f, altitude(midpoint(B, G), A, B)), B, F we get collinear(B, F, line_intersection(f, altitude(midpoint(B, G), A, B)))
By directions_draw_angle on orthocenter(A, B, D), A, projection(A, Line(D, G)) we get exists(angle(orthocenter(A, B, D), A, projection(A, Line(D, G))))
By directions_draw_angle on orthocenter(A, B, D), projection(A, i), D we get exists(angle(orthocenter(A, B, D), projection(A, i), D))
By in_imply_collinear on line_intersection(Line(G, I), altitude(midpoint(B, G), G, I)), G, I we get collinear(G, I, line_intersection(Line(G, I), altitude(midpoint(B, G), G, I)))
By in_imply_collinear on projection(E, Line(D, G)), D, projection(A, Line(D, G)) we get collinear(D, projection(A, Line(D, G)), projection(E, Line(D, G)))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, Line(D, G)), E, G we get not_collinear(E, G, projection(A, Line(D, G))), exists(Line(E, G))
By in_imply_collinear on line_intersection(f, altitude(midpoint(B, G), A, B)), A, B we get collinear(A, B, line_intersection(f, altitude(midpoint(B, G), A, B)))
By directions_draw_angle on projection(A, i), A, I we get exists(angle(projection(A, i), A, I))
By in_imply_collinear on line_intersection(f, altitude(midpoint(B, G), A, B)), A, F we get collinear(A, F, line_intersection(f, altitude(midpoint(B, G), A, B)))
By not_in_line_equivalent_to_not_collinear_v0 on F, projection(A, i), orthocenter(A, B, D) we get not_collinear(F, projection(A, i), orthocenter(A, B, D)), exists(Line(projection(A, i), orthocenter(A, B, D)))
By in_imply_collinear on projection(E, Line(D, G)), G, projection(A, Line(D, G)) we get collinear(G, projection(A, Line(D, G)), projection(E, Line(D, G)))
By in_imply_collinear on line_intersection(g, altitude(midpoint(B, G), A, C)), A, C we get collinear(A, C, line_intersection(g, altitude(midpoint(B, G), A, C)))
By in_imply_collinear on projection(F, i), projection(A, i), D we get collinear(D, projection(A, i), projection(F, i))
By in_imply_collinear on projection(F, i), B, projection(A, i) we get collinear(B, projection(A, i), projection(F, i))
By directions_draw_angle on projection(A, i), A, F we get exists(angle(projection(A, i), A, F))
By reverse_direction on projection(A, i), A we get 180 == direction(projection(A, i), A) - direction(A, projection(A, i)) mod 360
By line_inequality on altitude(F, A, D), altitude(A, D, G), F we get altitude(A, D, G) != altitude(F, A, D)
By in_imply_collinear on line_intersection(g, altitude(midpoint(B, G), A, C)), C, E we get collinear(C, E, line_intersection(g, altitude(midpoint(B, G), A, C)))
By in_imply_collinear on line_intersection(f, altitude(midpoint(B, G), A, B)), B, H we get collinear(B, H, line_intersection(f, altitude(midpoint(B, G), A, B)))
By in_imply_collinear on line_intersection(f, altitude(midpoint(B, G), A, B)), H, A we get collinear(A, H, line_intersection(f, altitude(midpoint(B, G), A, B)))
By in_imply_collinear on line_intersection(i, altitude(midpoint(B, G), B, D)), D, projection(A, i) we get collinear(D, projection(A, i), line_intersection(i, altitude(midpoint(B, G), B, D)))
By in_imply_collinear on line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), D, G we get collinear(D, G, line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, i), B, midpoint(B, G) we get not_collinear(B, midpoint(B, G), projection(A, i)), exists(Line(B, midpoint(B, G)))
By in_imply_collinear on line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), D, projection(A, Line(D, G)) we get collinear(D, projection(A, Line(D, G)), line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)))
By in_imply_collinear on line_intersection(g, altitude(midpoint(B, G), A, C)), G, C we get collinear(C, G, line_intersection(g, altitude(midpoint(B, G), A, C)))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, i), E, orthocenter(A, D, G) we get not_collinear(E, projection(A, i), orthocenter(A, D, G)), exists(Line(E, orthocenter(A, D, G)))
By in_imply_collinear on line_intersection(g, altitude(midpoint(B, G), A, C)), A, E we get collinear(A, E, line_intersection(g, altitude(midpoint(B, G), A, C)))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, i), E, G we get not_collinear(E, G, projection(A, i)), exists(Line(E, G))
By directions_draw_angle on projection(A, i), D, F we get exists(angle(projection(A, i), D, F))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, i), orthocenter(A, D, G), midpoint(B, G) we get not_collinear(midpoint(B, G), projection(A, i), orthocenter(A, D, G)), exists(Line(midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), G, projection(A, Line(D, G)) we get collinear(G, projection(A, Line(D, G)), line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)))
By not_in_line_equivalent_to_not_collinear_v0 on C, projection(A, i), B we get not_collinear(B, C, projection(A, i)), exists(Line(B, projection(A, i)))
By in_imply_collinear on line_intersection(f, altitude(midpoint(B, G), A, B)), H, F we get collinear(F, H, line_intersection(f, altitude(midpoint(B, G), A, B)))
By in_imply_collinear on line_intersection(g, altitude(midpoint(B, G), A, C)), A, G we get collinear(A, G, line_intersection(g, altitude(midpoint(B, G), A, C)))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, i), D, C we get not_collinear(C, D, projection(A, i)), exists(Line(C, D))
By directions_draw_angle on B, orthocenter(A, D, G), projection(A, Line(D, G)) we get exists(angle(B, orthocenter(A, D, G), projection(A, Line(D, G))))
By not_in_line_equivalent_to_not_collinear_v0 on I, orthocenter(A, B, D), projection(A, i) we get not_collinear(I, projection(A, i), orthocenter(A, B, D)), exists(Line(projection(A, i), orthocenter(A, B, D)))
By in_imply_collinear on line_intersection(Line(B, I), altitude(midpoint(B, G), B, I)), I, B we get collinear(B, I, line_intersection(Line(B, I), altitude(midpoint(B, G), B, I)))
By in_imply_collinear on line_intersection(i, altitude(midpoint(B, G), B, D)), D, B we get collinear(B, D, line_intersection(i, altitude(midpoint(B, G), B, D)))
By in_imply_collinear on line_intersection(i, altitude(midpoint(B, G), B, D)), projection(A, i), B we get collinear(B, projection(A, i), line_intersection(i, altitude(midpoint(B, G), B, D)))
By directions_draw_angle on A, projection(A, i), D we get exists(angle(A, projection(A, i), D))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, i), D, G we get not_collinear(D, G, projection(A, i)), exists(Line(D, G))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, i), E, D we get not_collinear(D, E, projection(A, i)), exists(Line(D, E))
By not_in_line_equivalent_to_not_collinear_v0 on I, orthocenter(A, D, G), projection(A, Line(D, G)) we get not_collinear(I, orthocenter(A, D, G), projection(A, Line(D, G))), exists(Line(orthocenter(A, D, G), projection(A, Line(D, G))))
By directions_draw_angle on projection(A, i), orthocenter(A, B, D), orthocenter(A, D, G) we get exists(angle(projection(A, i), orthocenter(A, B, D), orthocenter(A, D, G)))
By perpendicular_angle_conditions_v0 on A, projection(A, i), B we get angle(A, projection(A, i), B) == orientation(A, projection(A, i), B) mod 360
By directions_draw_angle on B, projection(A, i), A we get exists(angle(B, projection(A, i), A))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, Line(D, G)), C, A we get not_collinear(A, C, projection(A, Line(D, G))), exists(Line(A, C))
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, D, G), A, orthocenter(A, B, D) we get not_collinear(A, orthocenter(A, B, D), orthocenter(A, D, G)), exists(Line(A, orthocenter(A, B, D)))
By directions_draw_angle on projection(A, i), B, F we get exists(angle(projection(A, i), B, F))
By perpendicular_angle_conditions_v0 on D, projection(A, Line(D, G)), orthocenter(A, D, G) we get angle(D, projection(A, Line(D, G)), orthocenter(A, D, G)) == orientation(D, projection(A, Line(D, G)), orthocenter(A, D, G)) mod 360
By directions_draw_angle on projection(A, Line(D, G)), G, orthocenter(A, D, G) we get exists(angle(projection(A, Line(D, G)), G, orthocenter(A, D, G)))
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, B, D), projection(A, Line(D, G)), G we get not_collinear(G, orthocenter(A, B, D), projection(A, Line(D, G))), exists(Line(G, projection(A, Line(D, G))))
By not_in_line_equivalent_to_not_collinear_v0 on D, projection(A, i), orthocenter(A, B, D) we get not_collinear(D, projection(A, i), orthocenter(A, B, D)), exists(Line(projection(A, i), orthocenter(A, B, D)))
By directions_draw_angle on projection(A, i), orthocenter(A, B, D), G we get exists(angle(projection(A, i), orthocenter(A, B, D), G))
By directions_draw_angle on midpoint(B, G), G, projection(A, Line(D, G)) we get exists(angle(midpoint(B, G), G, projection(A, Line(D, G))))
By directions_draw_angle on projection(A, i), D, H we get exists(angle(projection(A, i), D, H))
By directions_draw_angle on H, D, projection(A, Line(D, G)) we get exists(angle(H, D, projection(A, Line(D, G))))
By not_in_line_equivalent_to_not_collinear_v0 on H, projection(A, Line(D, G)), G we get not_collinear(G, H, projection(A, Line(D, G))), exists(Line(G, projection(A, Line(D, G))))
By directions_draw_angle on projection(A, i), B, I we get exists(angle(projection(A, i), B, I))
By directions_draw_angle on orthocenter(A, D, G), G, projection(A, Line(D, G)) we get exists(angle(orthocenter(A, D, G), G, projection(A, Line(D, G))))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, Line(D, G)), A, F we get not_collinear(A, F, projection(A, Line(D, G))), exists(Line(A, F))
By not_in_line_equivalent_to_not_collinear_v0 on B, D, projection(A, Line(D, G)) we get not_collinear(B, D, projection(A, Line(D, G))), exists(Line(D, projection(A, Line(D, G))))
By not_in_line_equivalent_to_not_collinear_v0 on G, orthocenter(A, D, G), projection(A, Line(D, G)) we get not_collinear(G, orthocenter(A, D, G), projection(A, Line(D, G))), exists(Line(orthocenter(A, D, G), projection(A, Line(D, G))))
By directions_draw_angle on midpoint(B, G), D, projection(A, i) we get exists(angle(midpoint(B, G), D, projection(A, i)))
By perpendicular_angle_conditions_v0 on G, projection(A, Line(D, G)), orthocenter(A, D, G) we get angle(G, projection(A, Line(D, G)), orthocenter(A, D, G)) == orientation(G, projection(A, Line(D, G)), orthocenter(A, D, G)) mod 360
By directions_draw_angle on projection(A, i), B, H we get exists(angle(projection(A, i), B, H))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, Line(D, G)), orthocenter(A, D, G), B we get not_collinear(B, orthocenter(A, D, G), projection(A, Line(D, G))), exists(Line(B, orthocenter(A, D, G)))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, Line(D, G)), midpoint(B, G), B we get not_collinear(B, midpoint(B, G), projection(A, Line(D, G))), exists(Line(B, midpoint(B, G)))
By line_containment_inequality on line_intersection(Line(B, I), altitude(midpoint(B, G), B, I)), F, Line(B, I) we get F != line_intersection(Line(B, I), altitude(midpoint(B, G), B, I))
By not_in_line_equivalent_to_not_collinear_v0 on E, projection(A, Line(D, G)), D we get not_collinear(D, E, projection(A, Line(D, G))), exists(Line(D, projection(A, Line(D, G))))
By directions_draw_angle on projection(A, i), B, A we get exists(angle(projection(A, i), B, A))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, Line(D, G)), I, D we get not_collinear(D, I, projection(A, Line(D, G))), exists(Line(D, I))
By not_in_line_equivalent_to_not_collinear_v0 on E, orthocenter(A, B, D), projection(A, i) we get not_collinear(E, projection(A, i), orthocenter(A, B, D)), exists(Line(projection(A, i), orthocenter(A, B, D)))
By line_containment_inequality on line_intersection(f, altitude(midpoint(B, G), A, B)), I, f we get I != line_intersection(f, altitude(midpoint(B, G), A, B))
By reverse_direction on D, projection(A, i) we get 180 == direction(D, projection(A, i)) - direction(projection(A, i), D) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(B, G), projection(A, Line(D, G)), D we get not_collinear(D, midpoint(B, G), projection(A, Line(D, G))), exists(Line(D, projection(A, Line(D, G))))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, i), B, F we get not_collinear(B, F, projection(A, i)), exists(Line(B, F))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, i), C, E we get not_collinear(C, E, projection(A, i)), exists(Line(C, E))
By not_in_line_equivalent_to_not_collinear_v0 on F, projection(A, Line(D, G)), G we get not_collinear(F, G, projection(A, Line(D, G))), exists(Line(G, projection(A, Line(D, G))))
By line_containment_inequality on line_intersection(g, altitude(midpoint(B, G), A, C)), B, g we get B != line_intersection(g, altitude(midpoint(B, G), A, C))
By directions_draw_angle on F, A, projection(A, Line(D, G)) we get exists(angle(F, A, projection(A, Line(D, G))))
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, B, D), B, projection(A, i) we get not_collinear(B, projection(A, i), orthocenter(A, B, D)), exists(Line(B, projection(A, i)))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, i), G, B we get not_collinear(B, G, projection(A, i)), exists(Line(B, G))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, Line(D, G)), C, D we get not_collinear(C, D, projection(A, Line(D, G))), exists(Line(C, D))
By line_containment_inequality on line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), E, Line(D, G) we get E != line_intersection(Line(D, G), altitude(midpoint(B, G), D, G))
By not_in_line_equivalent_to_not_collinear_v0 on D, projection(A, Line(D, G)), orthocenter(A, D, G) we get not_collinear(D, orthocenter(A, D, G), projection(A, Line(D, G))), exists(Line(orthocenter(A, D, G), projection(A, Line(D, G))))
By perpendicular_angle_conditions_v0 on D, projection(A, i), A we get angle(D, projection(A, i), A) == orientation(A, D, projection(A, i)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on C, projection(A, Line(D, G)), G we get not_collinear(C, G, projection(A, Line(D, G))), exists(Line(G, projection(A, Line(D, G))))
By directions_draw_angle on projection(F, h), B, projection(A, i) we get exists(angle(projection(F, h), B, projection(A, i)))
By not_in_line_equivalent_to_not_collinear_v0 on H, projection(A, i), B we get not_collinear(B, H, projection(A, i)), exists(Line(B, projection(A, i)))
By directions_draw_angle on orthocenter(A, D, G), D, projection(A, i) we get exists(angle(orthocenter(A, D, G), D, projection(A, i)))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, Line(D, G)), F, D we get not_collinear(D, F, projection(A, Line(D, G))), exists(Line(D, F))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, i), D, I we get not_collinear(D, I, projection(A, i)), exists(Line(D, I))
By directions_draw_angle on C, G, projection(A, Line(D, G)) we get exists(angle(C, G, projection(A, Line(D, G))))
By directions_draw_angle on D, projection(A, Line(D, G)), orthocenter(A, D, G) we get exists(angle(D, projection(A, Line(D, G)), orthocenter(A, D, G)))
By directions_draw_angle on orthocenter(A, B, D), D, projection(A, Line(D, G)) we get exists(angle(orthocenter(A, B, D), D, projection(A, Line(D, G))))
By reverse_direction on projection(A, Line(D, G)), A we get 180 == direction(projection(A, Line(D, G)), A) - direction(A, projection(A, Line(D, G))) mod 360
By directions_draw_angle on C, D, projection(A, i) we get exists(angle(C, D, projection(A, i)))
By collinear_definition on orthocenter(A, B, D), orthocenter(A, D, G), midpoint(B, G) we get orthocenter(A, D, G) in Line(midpoint(B, G), orthocenter(A, B, D)), midpoint(B, G) in Line(orthocenter(A, B, D), orthocenter(A, D, G)), Line(midpoint(B, G), orthocenter(A, B, D)) == Line(orthocenter(A, B, D), orthocenter(A, D, G)), 0 == 2 * angle(orthocenter(A, D, G), orthocenter(A, B, D), midpoint(B, G)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on E, projection(A, Line(D, G)), orthocenter(A, D, G) we get not_collinear(E, orthocenter(A, D, G), projection(A, Line(D, G))), exists(Line(orthocenter(A, D, G), projection(A, Line(D, G))))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, i), A, H we get not_collinear(A, H, projection(A, i)), exists(Line(A, H))
By directions_draw_angle on E, A, projection(A, i) we get exists(angle(E, A, projection(A, i)))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, Line(D, G)), midpoint(B, G), I we get not_collinear(I, midpoint(B, G), projection(A, Line(D, G))), exists(Line(I, midpoint(B, G)))
By directions_draw_angle on D, orthocenter(A, D, G), projection(A, Line(D, G)) we get exists(angle(D, orthocenter(A, D, G), projection(A, Line(D, G))))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, Line(D, G)), I, G we get not_collinear(G, I, projection(A, Line(D, G))), exists(Line(G, I))
By directions_draw_angle on projection(A, i), orthocenter(A, B, D), midpoint(B, G) we get exists(angle(projection(A, i), orthocenter(A, B, D), midpoint(B, G)))
By not_in_line_equivalent_to_not_collinear_v0 on E, projection(A, i), A we get not_collinear(A, E, projection(A, i)), exists(Line(A, projection(A, i)))
By reverse_direction on projection(A, i), B we get 180 == direction(projection(A, i), B) - direction(B, projection(A, i)) mod 360
By line_containment_inequality on line_intersection(f, altitude(midpoint(B, G), A, B)), E, f we get E != line_intersection(f, altitude(midpoint(B, G), A, B))
By directions_draw_angle on H, A, projection(A, i) we get exists(angle(H, A, projection(A, i)))
By directions_draw_angle on orthocenter(A, B, D), orthocenter(A, D, G), D we get exists(angle(orthocenter(A, B, D), orthocenter(A, D, G), D))
By directions_draw_angle on projection(A, Line(D, G)), A, D we get exists(angle(projection(A, Line(D, G)), A, D))
By directions_draw_angle on projection(A, Line(D, G)), orthocenter(A, D, G), G we get exists(angle(projection(A, Line(D, G)), orthocenter(A, D, G), G))
By internal_angle_bisector_definition_v0 on C, projection(A, i), A, B we get angle(C, B, projection(A, i)) == angle(projection(A, i), B, A) mod 360
By line_containment_inequality on line_intersection(i, altitude(midpoint(B, G), B, D)), orthocenter(A, D, G), i we get orthocenter(A, D, G) != line_intersection(i, altitude(midpoint(B, G), B, D))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, i), D, F we get not_collinear(D, F, projection(A, i)), exists(Line(D, F))
By directions_draw_angle on projection(A, Line(D, G)), D, B we get exists(angle(projection(A, Line(D, G)), D, B))
By directions_draw_angle on projection(A, i), A, D we get exists(angle(projection(A, i), A, D))
By directions_draw_angle on F, orthocenter(A, B, D), orthocenter(A, D, G) we get exists(angle(F, orthocenter(A, B, D), orthocenter(A, D, G)))
By not_in_line_equivalent_to_not_collinear_v0 on H, projection(A, i), orthocenter(A, B, D) we get not_collinear(H, projection(A, i), orthocenter(A, B, D)), exists(Line(projection(A, i), orthocenter(A, B, D)))
By directions_draw_angle on projection(A, i), A, G we get exists(angle(projection(A, i), A, G))
By directions_draw_angle on midpoint(B, G), D, projection(A, Line(D, G)) we get exists(angle(midpoint(B, G), D, projection(A, Line(D, G))))
By perpendicular_angle_conditions_v0 on orthocenter(A, D, G), projection(A, Line(D, G)), G we get angle(orthocenter(A, D, G), projection(A, Line(D, G)), G) == orientation(G, orthocenter(A, D, G), projection(A, Line(D, G))) mod 360
By directions_draw_angle on B, A, projection(A, Line(D, G)) we get exists(angle(B, A, projection(A, Line(D, G))))
By directions_draw_angle on projection(A, Line(D, G)), A, I we get exists(angle(projection(A, Line(D, G)), A, I))
By line_containment_inequality on line_intersection(i, altitude(midpoint(B, G), B, D)), H, i we get H != line_intersection(i, altitude(midpoint(B, G), B, D))
By perpendicular_angle_conditions_v0 on D, projection(A, Line(D, G)), A we get angle(D, projection(A, Line(D, G)), A) == orientation(A, D, projection(A, Line(D, G))) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on I, projection(A, Line(D, G)), A we get not_collinear(A, I, projection(A, Line(D, G))), exists(Line(A, projection(A, Line(D, G))))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, Line(D, G)), B, G we get not_collinear(B, G, projection(A, Line(D, G))), exists(Line(B, G))
By internal_angle_bisector_definition_v0 on A, projection(A, i), C, B we get angle(A, B, projection(A, i)) == angle(projection(A, i), B, C) mod 360
By directions_draw_angle on projection(A, i), A, midpoint(B, G) we get exists(angle(projection(A, i), A, midpoint(B, G)))
By not_in_line_equivalent_to_not_collinear_v0 on F, projection(A, Line(D, G)), orthocenter(A, D, G) we get not_collinear(F, orthocenter(A, D, G), projection(A, Line(D, G))), exists(Line(orthocenter(A, D, G), projection(A, Line(D, G))))
By reverse_direction on projection(A, i), D we get 180 == direction(projection(A, i), D) - direction(D, projection(A, i)) mod 360
By internal_angle_bisector_definition_v0 on midpoint(B, G), orthocenter(A, B, D), midpoint(B, G), orthocenter(A, D, G) we get angle(midpoint(B, G), orthocenter(A, D, G), orthocenter(A, B, D)) == angle(orthocenter(A, B, D), orthocenter(A, D, G), midpoint(B, G)) mod 360
By perpendicular_angle_conditions_v0 on B, projection(A, i), A we get angle(B, projection(A, i), A) == orientation(A, B, projection(A, i)) mod 360
By perpendicular_angle_conditions_v0 on orthocenter(A, B, D), projection(A, i), D we get angle(orthocenter(A, B, D), projection(A, i), D) == orientation(D, orthocenter(A, B, D), projection(A, i)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, i), G, midpoint(B, G) we get not_collinear(G, midpoint(B, G), projection(A, i)), exists(Line(G, midpoint(B, G)))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(B, G), projection(A, Line(D, G)), G we get not_collinear(G, midpoint(B, G), projection(A, Line(D, G))), exists(Line(G, projection(A, Line(D, G))))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, i), orthocenter(A, B, D), orthocenter(A, D, G) we get not_collinear(projection(A, i), orthocenter(A, B, D), orthocenter(A, D, G)), exists(Line(orthocenter(A, B, D), orthocenter(A, D, G)))
By directions_draw_angle on projection(A, Line(D, G)), D, H we get exists(angle(projection(A, Line(D, G)), D, H))
By directions_draw_angle on projection(A, Line(D, G)), A, projection(A, i) we get exists(angle(projection(A, Line(D, G)), A, projection(A, i)))
By directions_draw_angle on D, orthocenter(A, B, D), projection(A, i) we get exists(angle(D, orthocenter(A, B, D), projection(A, i)))
By reverse_direction on D, projection(A, Line(D, G)) we get 180 == direction(D, projection(A, Line(D, G))) - direction(projection(A, Line(D, G)), D) mod 360
By perpendicular_angle_conditions_v0 on orthocenter(A, B, D), projection(A, i), B we get angle(orthocenter(A, B, D), projection(A, i), B) == orientation(B, orthocenter(A, B, D), projection(A, i)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(B, G), orthocenter(A, B, D), projection(A, i) we get not_collinear(midpoint(B, G), projection(A, i), orthocenter(A, B, D)), exists(Line(projection(A, i), orthocenter(A, B, D)))
By reverse_direction on orthocenter(A, B, D), orthocenter(A, D, G) we get 180 == direction(orthocenter(A, B, D), orthocenter(A, D, G)) - direction(orthocenter(A, D, G), orthocenter(A, B, D)) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on C, orthocenter(A, B, D), orthocenter(A, D, G) we get not_collinear(C, orthocenter(A, B, D), orthocenter(A, D, G)), exists(Line(orthocenter(A, B, D), orthocenter(A, D, G)))
By perpendicular_angle_conditions_v0 on A, projection(A, Line(D, G)), G we get angle(A, projection(A, Line(D, G)), G) == orientation(A, projection(A, Line(D, G)), G) mod 360
By directions_draw_angle on projection(A, Line(D, G)), D, I we get exists(angle(projection(A, Line(D, G)), D, I))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, Line(D, G)), E, C we get not_collinear(C, E, projection(A, Line(D, G))), exists(Line(C, E))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, i), orthocenter(A, D, G), G we get not_collinear(G, projection(A, i), orthocenter(A, D, G)), exists(Line(G, orthocenter(A, D, G)))
By line_inequality on Line(C, center(c)), altitude(A, B, D), C we get altitude(A, B, D) != Line(C, center(c))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, Line(D, G)), B, F we get not_collinear(B, F, projection(A, Line(D, G))), exists(Line(B, F))
By directions_draw_angle on A, orthocenter(A, B, D), orthocenter(A, D, G) we get exists(angle(A, orthocenter(A, B, D), orthocenter(A, D, G)))
By reverse_direction on projection(A, Line(D, G)), orthocenter(A, D, G) we get 180 == direction(projection(A, Line(D, G)), orthocenter(A, D, G)) - direction(orthocenter(A, D, G), projection(A, Line(D, G))) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, D, G), D, projection(A, i) we get not_collinear(D, projection(A, i), orthocenter(A, D, G)), exists(Line(D, projection(A, i)))
By directions_draw_angle on I, A, projection(A, i) we get exists(angle(I, A, projection(A, i)))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, i), G, C we get not_collinear(C, G, projection(A, i)), exists(Line(C, G))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, Line(D, G)), orthocenter(A, B, D), orthocenter(A, D, G) we get not_collinear(orthocenter(A, B, D), orthocenter(A, D, G), projection(A, Line(D, G))), exists(Line(orthocenter(A, B, D), orthocenter(A, D, G)))
By perpendicular_angle_conditions_v0 on B, projection(A, i), orthocenter(A, B, D) we get angle(B, projection(A, i), orthocenter(A, B, D)) == orientation(B, projection(A, i), orthocenter(A, B, D)) mod 360
By directions_draw_angle on projection(A, i), B, C we get exists(angle(projection(A, i), B, C))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, i), I, A we get not_collinear(A, I, projection(A, i)), exists(Line(A, I))
By directions_draw_angle on I, G, projection(A, Line(D, G)) we get exists(angle(I, G, projection(A, Line(D, G))))
By directions_draw_angle on C, A, projection(A, i) we get exists(angle(C, A, projection(A, i)))
By directions_draw_angle on projection(A, i), D, orthocenter(A, B, D) we get exists(angle(projection(A, i), D, orthocenter(A, B, D)))
By reverse_direction on orthocenter(A, D, G), orthocenter(A, B, D) we get 180 == direction(orthocenter(A, D, G), orthocenter(A, B, D)) - direction(orthocenter(A, B, D), orthocenter(A, D, G)) mod 360
By directions_draw_angle on projection(A, i), orthocenter(A, B, D), D we get exists(angle(projection(A, i), orthocenter(A, B, D), D))
By perpendicular_angle_conditions_v0 on A, projection(A, Line(D, G)), D we get angle(A, projection(A, Line(D, G)), D) == orientation(A, projection(A, Line(D, G)), D) mod 360
By directions_draw_angle on F, orthocenter(A, B, D), projection(A, i) we get exists(angle(F, orthocenter(A, B, D), projection(A, i)))
By reverse_direction on projection(A, Line(D, G)), D we get 180 == direction(projection(A, Line(D, G)), D) - direction(D, projection(A, Line(D, G))) mod 360
By directions_draw_angle on projection(A, Line(D, G)), G, projection(F, h) we get exists(angle(projection(A, Line(D, G)), G, projection(F, h)))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, i), G, orthocenter(A, B, D) we get not_collinear(G, projection(A, i), orthocenter(A, B, D)), exists(Line(G, orthocenter(A, B, D)))
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, B, D), D, projection(A, Line(D, G)) we get not_collinear(D, orthocenter(A, B, D), projection(A, Line(D, G))), exists(Line(D, projection(A, Line(D, G))))
By line_containment_inequality on line_intersection(i, altitude(midpoint(B, G), B, D)), A, i we get A != line_intersection(i, altitude(midpoint(B, G), B, D))
By directions_draw_angle on projection(A, Line(D, G)), G, A we get exists(angle(projection(A, Line(D, G)), G, A))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, Line(D, G)), H, F we get not_collinear(F, H, projection(A, Line(D, G))), exists(Line(F, H))
By directions_draw_angle on orthocenter(A, B, D), projection(A, i), B we get exists(angle(orthocenter(A, B, D), projection(A, i), B))
By directions_draw_angle on B, G, projection(A, Line(D, G)) we get exists(angle(B, G, projection(A, Line(D, G))))
By line_containment_inequality on line_intersection(i, altitude(midpoint(B, G), B, D)), I, i we get I != line_intersection(i, altitude(midpoint(B, G), B, D))
By internal_angle_bisector_definition_v0 on midpoint(B, G), orthocenter(A, D, G), midpoint(B, G), orthocenter(A, B, D) we get angle(midpoint(B, G), orthocenter(A, B, D), orthocenter(A, D, G)) == angle(orthocenter(A, D, G), orthocenter(A, B, D), midpoint(B, G)) mod 360
By directions_draw_angle on orthocenter(A, B, D), orthocenter(A, D, G), E we get exists(angle(orthocenter(A, B, D), orthocenter(A, D, G), E))
By directions_draw_angle on orthocenter(A, D, G), orthocenter(A, B, D), A we get exists(angle(orthocenter(A, D, G), orthocenter(A, B, D), A))
By collinear_definition on orthocenter(A, D, G), orthocenter(A, B, D), midpoint(B, G) we get orthocenter(A, B, D) in Line(midpoint(B, G), orthocenter(A, D, G)), midpoint(B, G) in Line(orthocenter(A, B, D), orthocenter(A, D, G)), Line(midpoint(B, G), orthocenter(A, D, G)) == Line(orthocenter(A, B, D), orthocenter(A, D, G)), 0 == 2 * angle(orthocenter(A, B, D), orthocenter(A, D, G), midpoint(B, G)) mod 360
By directions_draw_angle on orthocenter(A, B, D), B, projection(A, i) we get exists(angle(orthocenter(A, B, D), B, projection(A, i)))
By reverse_direction on orthocenter(A, B, D), projection(A, i) we get 180 == direction(orthocenter(A, B, D), projection(A, i)) - direction(projection(A, i), orthocenter(A, B, D)) mod 360
By directions_draw_angle on orthocenter(A, B, D), D, projection(A, i) we get exists(angle(orthocenter(A, B, D), D, projection(A, i)))
By perpendicular_angle_conditions_v0 on A, projection(A, i), D we get angle(A, projection(A, i), D) == orientation(A, projection(A, i), D) mod 360
By directions_draw_angle on projection(A, i), A, H we get exists(angle(projection(A, i), A, H))
By directions_draw_angle on I, D, projection(A, Line(D, G)) we get exists(angle(I, D, projection(A, Line(D, G))))
By directions_draw_angle on projection(A, Line(D, G)), G, B we get exists(angle(projection(A, Line(D, G)), G, B))
By directions_draw_angle on I, B, projection(A, i) we get exists(angle(I, B, projection(A, i)))
By directions_draw_angle on projection(A, Line(D, G)), A, H we get exists(angle(projection(A, Line(D, G)), A, H))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, i), F, H we get not_collinear(F, H, projection(A, i)), exists(Line(F, H))
By directions_draw_angle on projection(A, i), B, G we get exists(angle(projection(A, i), B, G))
By reverse_direction on B, projection(A, i) we get 180 == direction(B, projection(A, i)) - direction(projection(A, i), B) mod 360
By collinear_definition on orthocenter(A, B, D), midpoint(B, G), orthocenter(A, D, G) we get midpoint(B, G) in Line(orthocenter(A, B, D), orthocenter(A, D, G)), orthocenter(A, D, G) in Line(midpoint(B, G), orthocenter(A, B, D)), Line(midpoint(B, G), orthocenter(A, B, D)) == Line(orthocenter(A, B, D), orthocenter(A, D, G)), 0 == 2 * angle(midpoint(B, G), orthocenter(A, B, D), orthocenter(A, D, G)) mod 360
By directions_draw_angle on D, A, projection(A, Line(D, G)) we get exists(angle(D, A, projection(A, Line(D, G))))
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, D, G), B, projection(A, i) we get not_collinear(B, projection(A, i), orthocenter(A, D, G)), exists(Line(B, projection(A, i)))
By directions_draw_angle on projection(A, Line(D, G)), A, B we get exists(angle(projection(A, Line(D, G)), A, B))
By reverse_direction on A, projection(A, i) we get 180 == direction(A, projection(A, i)) - direction(projection(A, i), A) mod 360
By directions_draw_angle on projection(A, Line(D, G)), D, E we get exists(angle(projection(A, Line(D, G)), D, E))
By directions_draw_angle on projection(A, Line(D, G)), orthocenter(A, D, G), midpoint(B, G) we get exists(angle(projection(A, Line(D, G)), orthocenter(A, D, G), midpoint(B, G)))
By line_containment_inequality on line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), midpoint(B, G), Line(D, G) we get midpoint(B, G) != line_intersection(Line(D, G), altitude(midpoint(B, G), D, G))
By directions_draw_angle on orthocenter(A, D, G), B, projection(A, i) we get exists(angle(orthocenter(A, D, G), B, projection(A, i)))
By directions_draw_angle on A, D, projection(A, i) we get exists(angle(A, D, projection(A, i)))
By reverse_direction on orthocenter(A, D, G), projection(A, Line(D, G)) we get 180 == direction(orthocenter(A, D, G), projection(A, Line(D, G))) - direction(projection(A, Line(D, G)), orthocenter(A, D, G)) mod 360
By line_containment_inequality on line_intersection(i, altitude(midpoint(B, G), B, D)), midpoint(B, G), i we get midpoint(B, G) != line_intersection(i, altitude(midpoint(B, G), B, D))
By directions_draw_angle on C, B, projection(A, i) we get exists(angle(C, B, projection(A, i)))
By reverse_direction on projection(A, Line(D, G)), G we get 180 == direction(projection(A, Line(D, G)), G) - direction(G, projection(A, Line(D, G))) mod 360
By directions_draw_angle on projection(A, Line(D, G)), A, G we get exists(angle(projection(A, Line(D, G)), A, G))
By reverse_direction on G, projection(A, Line(D, G)) we get 180 == direction(G, projection(A, Line(D, G))) - direction(projection(A, Line(D, G)), G) mod 360
By line_containment_inequality on line_intersection(Line(G, I), altitude(midpoint(B, G), G, I)), A, Line(G, I) we get A != line_intersection(Line(G, I), altitude(midpoint(B, G), G, I))
By not_in_line_equivalent_to_not_collinear_v0 on C, A, projection(A, i) we get not_collinear(A, C, projection(A, i)), exists(Line(A, projection(A, i)))
By directions_draw_angle on orthocenter(A, D, G), orthocenter(A, B, D), D we get exists(angle(orthocenter(A, D, G), orthocenter(A, B, D), D))
By directions_draw_angle on orthocenter(A, B, D), orthocenter(A, D, G), projection(A, Line(D, G)) we get exists(angle(orthocenter(A, B, D), orthocenter(A, D, G), projection(A, Line(D, G))))
By perpendicular_angle_conditions_v0 on G, projection(A, Line(D, G)), A we get angle(G, projection(A, Line(D, G)), A) == orientation(A, G, projection(A, Line(D, G))) mod 360
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, B, D), projection(A, Line(D, G)), A we get not_collinear(A, orthocenter(A, B, D), projection(A, Line(D, G))), exists(Line(A, projection(A, Line(D, G))))
By line_containment_inequality on line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), F, Line(D, G) we get F != line_intersection(Line(D, G), altitude(midpoint(B, G), D, G))
By directions_draw_angle on projection(A, Line(D, G)), D, projection(A, i) we get exists(angle(projection(A, Line(D, G)), D, projection(A, i)))
By reverse_direction on A, projection(A, Line(D, G)) we get 180 == direction(A, projection(A, Line(D, G))) - direction(projection(A, Line(D, G)), A) mod 360
By directions_draw_angle on projection(A, Line(D, G)), A, orthocenter(A, B, D) we get exists(angle(projection(A, Line(D, G)), A, orthocenter(A, B, D)))
By perpendicular_angle_conditions_v0 on orthocenter(A, D, G), projection(A, Line(D, G)), D we get angle(orthocenter(A, D, G), projection(A, Line(D, G)), D) == orientation(D, orthocenter(A, D, G), projection(A, Line(D, G))) mod 360
By collinear_definition on orthocenter(A, D, G), midpoint(B, G), orthocenter(A, B, D) we get midpoint(B, G) in Line(orthocenter(A, B, D), orthocenter(A, D, G)), orthocenter(A, B, D) in Line(midpoint(B, G), orthocenter(A, D, G)), Line(midpoint(B, G), orthocenter(A, D, G)) == Line(orthocenter(A, B, D), orthocenter(A, D, G)), 0 == 2 * angle(midpoint(B, G), orthocenter(A, D, G), orthocenter(A, B, D)) mod 360
By directions_draw_angle on E, A, projection(A, Line(D, G)) we get exists(angle(E, A, projection(A, Line(D, G))))
By directions_draw_angle on G, orthocenter(A, D, G), projection(A, Line(D, G)) we get exists(angle(G, orthocenter(A, D, G), projection(A, Line(D, G))))
By directions_draw_angle on projection(A, i), D, A we get exists(angle(projection(A, i), D, A))
By not_in_line_equivalent_to_not_collinear_v0 on I, orthocenter(A, D, G), orthocenter(A, B, D) we get not_collinear(I, orthocenter(A, B, D), orthocenter(A, D, G)), exists(Line(orthocenter(A, B, D), orthocenter(A, D, G)))
By directions_draw_angle on G, projection(A, Line(D, G)), orthocenter(A, D, G) we get exists(angle(G, projection(A, Line(D, G)), orthocenter(A, D, G)))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, i), D, projection(A, Line(D, G)) we get not_collinear(D, projection(A, i), projection(A, Line(D, G))), exists(Line(D, projection(A, Line(D, G))))
By not_in_line_equivalent_to_not_collinear_v0 on I, projection(A, i), B we get not_collinear(B, I, projection(A, i)), exists(Line(B, projection(A, i)))
By directions_draw_angle on D, orthocenter(A, D, G), orthocenter(A, B, D) we get exists(angle(D, orthocenter(A, D, G), orthocenter(A, B, D)))
By directions_draw_angle on F, D, projection(A, i) we get exists(angle(F, D, projection(A, i)))
By reverse_direction on projection(A, i), orthocenter(A, B, D) we get 180 == direction(projection(A, i), orthocenter(A, B, D)) - direction(orthocenter(A, B, D), projection(A, i)) mod 360
By directions_draw_angle on B, A, projection(A, i) we get exists(angle(B, A, projection(A, i)))
By directions_draw_angle on F, B, projection(A, i) we get exists(angle(F, B, projection(A, i)))
By directions_draw_angle on orthocenter(A, B, D), orthocenter(A, D, G), A we get exists(angle(orthocenter(A, B, D), orthocenter(A, D, G), A))
By directions_draw_angle on projection(A, i), orthocenter(A, B, D), F we get exists(angle(projection(A, i), orthocenter(A, B, D), F))
By line_containment_inequality on line_intersection(f, altitude(midpoint(B, G), A, B)), D, f we get D != line_intersection(f, altitude(midpoint(B, G), A, B))
By directions_draw_angle on D, projection(A, i), orthocenter(A, B, D) we get exists(angle(D, projection(A, i), orthocenter(A, B, D)))
By not_in_line_equivalent_to_not_collinear_v0 on orthocenter(A, D, G), projection(A, i), A we get not_collinear(A, projection(A, i), orthocenter(A, D, G)), exists(Line(A, projection(A, i)))
By directions_draw_angle on G, B, projection(A, i) we get exists(angle(G, B, projection(A, i)))
By directions_draw_angle on projection(A, Line(D, G)), G, E we get exists(angle(projection(A, Line(D, G)), G, E))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, Line(D, G)), B, H we get not_collinear(B, H, projection(A, Line(D, G))), exists(Line(B, H))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, i), G, projection(A, Line(D, G)) we get not_collinear(G, projection(A, i), projection(A, Line(D, G))), exists(Line(G, projection(A, Line(D, G))))
By not_in_line_equivalent_to_not_collinear_v0 on H, D, projection(A, i) we get not_collinear(D, H, projection(A, i)), exists(Line(D, projection(A, i)))
By directions_draw_angle on A, D, projection(A, Line(D, G)) we get exists(angle(A, D, projection(A, Line(D, G))))
By directions_draw_angle on D, orthocenter(A, B, D), orthocenter(A, D, G) we get exists(angle(D, orthocenter(A, B, D), orthocenter(A, D, G)))
By line_containment_inequality on line_intersection(Line(G, I), altitude(midpoint(B, G), G, I)), F, Line(G, I) we get F != line_intersection(Line(G, I), altitude(midpoint(B, G), G, I))
By directions_draw_angle on orthocenter(A, D, G), orthocenter(A, B, D), midpoint(B, G) we get exists(angle(orthocenter(A, D, G), orthocenter(A, B, D), midpoint(B, G)))
By directions_draw_angle on B, projection(A, i), orthocenter(A, B, D) we get exists(angle(B, projection(A, i), orthocenter(A, B, D)))
By not_in_line_equivalent_to_not_collinear_v0 on midpoint(B, G), D, projection(A, i) we get not_collinear(D, midpoint(B, G), projection(A, i)), exists(Line(D, projection(A, i)))
By directions_draw_angle on projection(A, Line(D, G)), D, C we get exists(angle(projection(A, Line(D, G)), D, C))
By directions_draw_angle on projection(A, i), A, orthocenter(A, D, G) we get exists(angle(projection(A, i), A, orthocenter(A, D, G)))
By directions_draw_angle on D, projection(A, i), A we get exists(angle(D, projection(A, i), A))
By directions_draw_angle on projection(A, Line(D, G)), A, C we get exists(angle(projection(A, Line(D, G)), A, C))
By line_containment_inequality on line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G), g we get midpoint(B, G) != line_intersection(g, altitude(midpoint(B, G), A, C))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, i), I, midpoint(B, G) we get not_collinear(I, midpoint(B, G), projection(A, i)), exists(Line(I, midpoint(B, G)))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, Line(D, G)), projection(A, i), B we get not_collinear(B, projection(A, i), projection(A, Line(D, G))), exists(Line(B, projection(A, i)))
By directions_draw_angle on orthocenter(A, D, G), A, projection(A, i) we get exists(angle(orthocenter(A, D, G), A, projection(A, i)))
By directions_draw_angle on projection(A, Line(D, G)), D, orthocenter(A, B, D) we get exists(angle(projection(A, Line(D, G)), D, orthocenter(A, B, D)))
By directions_draw_angle on projection(A, i), D, orthocenter(A, D, G) we get exists(angle(projection(A, i), D, orthocenter(A, D, G)))
By line_containment_inequality on line_intersection(Line(B, I), altitude(midpoint(B, G), B, I)), projection(A, i), Line(B, I) we get projection(A, i) != line_intersection(Line(B, I), altitude(midpoint(B, G), B, I))
By directions_draw_angle on orthocenter(A, D, G), projection(A, Line(D, G)), G we get exists(angle(orthocenter(A, D, G), projection(A, Line(D, G)), G))
By directions_draw_angle on E, D, projection(A, i) we get exists(angle(E, D, projection(A, i)))
By directions_draw_angle on midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G)) we get exists(angle(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G))))
By directions_draw_angle on D, projection(A, Line(D, G)), A we get exists(angle(D, projection(A, Line(D, G)), A))
By not_in_line_equivalent_to_not_collinear_v0 on C, orthocenter(A, D, G), projection(A, Line(D, G)) we get not_collinear(C, orthocenter(A, D, G), projection(A, Line(D, G))), exists(Line(orthocenter(A, D, G), projection(A, Line(D, G))))
By line_containment_inequality on line_intersection(Line(B, I), altitude(midpoint(B, G), B, I)), orthocenter(A, B, D), Line(B, I) we get orthocenter(A, B, D) != line_intersection(Line(B, I), altitude(midpoint(B, G), B, I))
By directions_draw_angle on B, orthocenter(A, B, D), projection(A, i) we get exists(angle(B, orthocenter(A, B, D), projection(A, i)))
By directions_draw_angle on projection(A, Line(D, G)), D, midpoint(B, G) we get exists(angle(projection(A, Line(D, G)), D, midpoint(B, G)))
By line_containment_inequality on line_intersection(g, altitude(midpoint(B, G), A, C)), projection(A, i), g we get projection(A, i) != line_intersection(g, altitude(midpoint(B, G), A, C))
By line_containment_inequality on line_intersection(i, altitude(midpoint(B, G), B, D)), G, i we get G != line_intersection(i, altitude(midpoint(B, G), B, D))
By directions_draw_angle on D, A, projection(A, i) we get exists(angle(D, A, projection(A, i)))
By not_in_line_equivalent_to_not_collinear_v0 on H, D, projection(A, Line(D, G)) we get not_collinear(D, H, projection(A, Line(D, G))), exists(Line(D, projection(A, Line(D, G))))
By directions_draw_angle on projection(A, Line(D, G)), G, midpoint(B, G) we get exists(angle(projection(A, Line(D, G)), G, midpoint(B, G)))
By line_containment_inequality on line_intersection(Line(B, I), altitude(midpoint(B, G), B, I)), orthocenter(A, D, G), Line(B, I) we get orthocenter(A, D, G) != line_intersection(Line(B, I), altitude(midpoint(B, G), B, I))
By line_containment_inequality on line_intersection(f, altitude(midpoint(B, G), A, B)), projection(A, i), f we get projection(A, i) != line_intersection(f, altitude(midpoint(B, G), A, B))
By directions_draw_angle on projection(A, i), D, G we get exists(angle(projection(A, i), D, G))
By directions_draw_angle on projection(A, Line(D, G)), G, orthocenter(A, B, D) we get exists(angle(projection(A, Line(D, G)), G, orthocenter(A, B, D)))
By line_containment_inequality on line_intersection(Line(G, I), altitude(midpoint(B, G), G, I)), orthocenter(A, B, D), Line(G, I) we get orthocenter(A, B, D) != line_intersection(Line(G, I), altitude(midpoint(B, G), G, I))
By directions_draw_angle on projection(A, Line(D, G)), orthocenter(A, D, G), E we get exists(angle(projection(A, Line(D, G)), orthocenter(A, D, G), E))
By not_in_line_equivalent_to_not_collinear_v0 on H, orthocenter(A, B, D), orthocenter(A, D, G) we get not_collinear(H, orthocenter(A, B, D), orthocenter(A, D, G)), exists(Line(orthocenter(A, B, D), orthocenter(A, D, G)))
By line_containment_inequality on line_intersection(Line(G, I), altitude(midpoint(B, G), G, I)), C, Line(G, I) we get C != line_intersection(Line(G, I), altitude(midpoint(B, G), G, I))
By directions_draw_angle on projection(A, Line(D, G)), A, F we get exists(angle(projection(A, Line(D, G)), A, F))
By directions_draw_angle on midpoint(B, G), B, projection(A, i) we get exists(angle(midpoint(B, G), B, projection(A, i)))
By directions_draw_angle on projection(F, h), G, projection(A, Line(D, G)) we get exists(angle(projection(F, h), G, projection(A, Line(D, G))))
By directions_draw_angle on projection(A, i), A, projection(A, Line(D, G)) we get exists(angle(projection(A, i), A, projection(A, Line(D, G))))
By directions_draw_angle on projection(A, Line(D, G)), orthocenter(A, D, G), D we get exists(angle(projection(A, Line(D, G)), orthocenter(A, D, G), D))
By directions_draw_angle on I, A, projection(A, Line(D, G)) we get exists(angle(I, A, projection(A, Line(D, G))))
By directions_draw_angle on projection(A, Line(D, G)), G, C we get exists(angle(projection(A, Line(D, G)), G, C))
By not_in_line_equivalent_to_not_collinear_v0 on C, projection(A, i), orthocenter(A, B, D) we get not_collinear(C, projection(A, i), orthocenter(A, B, D)), exists(Line(projection(A, i), orthocenter(A, B, D)))
By directions_draw_angle on orthocenter(A, D, G), orthocenter(A, B, D), F we get exists(angle(orthocenter(A, D, G), orthocenter(A, B, D), F))
By not_in_line_equivalent_to_not_collinear_v0 on H, orthocenter(A, D, G), projection(A, Line(D, G)) we get not_collinear(H, orthocenter(A, D, G), projection(A, Line(D, G))), exists(Line(orthocenter(A, D, G), projection(A, Line(D, G))))
By directions_draw_angle on A, orthocenter(A, D, G), orthocenter(A, B, D) we get exists(angle(A, orthocenter(A, D, G), orthocenter(A, B, D)))
By directions_draw_angle on projection(A, Line(D, G)), A, E we get exists(angle(projection(A, Line(D, G)), A, E))
By directions_draw_angle on G, A, projection(A, i) we get exists(angle(G, A, projection(A, i)))
By directions_draw_angle on projection(A, Line(D, G)), G, I we get exists(angle(projection(A, Line(D, G)), G, I))
By directions_draw_angle on projection(E, h), B, projection(A, i) we get exists(angle(projection(E, h), B, projection(A, i)))
By line_containment_inequality on projection(F, Line(D, H)), projection(A, i), Line(D, H) we get projection(A, i) != projection(F, Line(D, H))
By line_containment_inequality on line_intersection(Line(B, I), altitude(midpoint(B, G), B, I)), A, Line(B, I) we get A != line_intersection(Line(B, I), altitude(midpoint(B, G), B, I))
By directions_draw_angle on projection(A, i), B, midpoint(B, G) we get exists(angle(projection(A, i), B, midpoint(B, G)))
By directions_draw_angle on B, D, projection(A, Line(D, G)) we get exists(angle(B, D, projection(A, Line(D, G))))
By directions_draw_angle on orthocenter(A, D, G), orthocenter(A, B, D), projection(A, i) we get exists(angle(orthocenter(A, D, G), orthocenter(A, B, D), projection(A, i)))
By directions_draw_angle on projection(A, Line(D, G)), orthocenter(A, D, G), B we get exists(angle(projection(A, Line(D, G)), orthocenter(A, D, G), B))
By directions_draw_angle on projection(A, i), D, E we get exists(angle(projection(A, i), D, E))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, Line(D, G)), orthocenter(A, B, D), F we get not_collinear(F, orthocenter(A, B, D), projection(A, Line(D, G))), exists(Line(F, orthocenter(A, B, D)))
By not_in_line_equivalent_to_not_collinear_v0 on H, A, projection(A, Line(D, G)) we get not_collinear(A, H, projection(A, Line(D, G))), exists(Line(A, projection(A, Line(D, G))))
By directions_draw_angle on projection(A, i), B, orthocenter(A, B, D) we get exists(angle(projection(A, i), B, orthocenter(A, B, D)))
By directions_draw_angle on C, D, projection(A, Line(D, G)) we get exists(angle(C, D, projection(A, Line(D, G))))
By directions_draw_angle on projection(A, i), B, projection(E, h) we get exists(angle(projection(A, i), B, projection(E, h)))
By directions_draw_angle on projection(E, h), G, projection(A, Line(D, G)) we get exists(angle(projection(E, h), G, projection(A, Line(D, G))))
By directions_draw_angle on A, B, projection(A, i) we get exists(angle(A, B, projection(A, i)))
By directions_draw_angle on projection(A, i), B, orthocenter(A, D, G) we get exists(angle(projection(A, i), B, orthocenter(A, D, G)))
By directions_draw_angle on orthocenter(A, D, G), projection(A, Line(D, G)), D we get exists(angle(orthocenter(A, D, G), projection(A, Line(D, G)), D))
By directions_draw_angle on F, D, projection(A, Line(D, G)) we get exists(angle(F, D, projection(A, Line(D, G))))
By directions_draw_angle on projection(A, i), D, C we get exists(angle(projection(A, i), D, C))
By directions_draw_angle on A, projection(A, Line(D, G)), G we get exists(angle(A, projection(A, Line(D, G)), G))
By directions_draw_angle on orthocenter(A, D, G), D, projection(A, Line(D, G)) we get exists(angle(orthocenter(A, D, G), D, projection(A, Line(D, G))))
By directions_draw_angle on E, G, projection(A, Line(D, G)) we get exists(angle(E, G, projection(A, Line(D, G))))
By directions_draw_angle on G, A, projection(A, Line(D, G)) we get exists(angle(G, A, projection(A, Line(D, G))))
By line_containment_inequality on line_intersection(Line(G, I), altitude(midpoint(B, G), G, I)), H, Line(G, I) we get H != line_intersection(Line(G, I), altitude(midpoint(B, G), G, I))
By line_containment_inequality on line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), B, Line(D, G) we get B != line_intersection(Line(D, G), altitude(midpoint(B, G), D, G))
By directions_draw_angle on C, A, projection(A, Line(D, G)) we get exists(angle(C, A, projection(A, Line(D, G))))
By directions_draw_angle on H, B, projection(A, i) we get exists(angle(H, B, projection(A, i)))
By line_containment_inequality on line_intersection(Line(B, I), altitude(midpoint(B, G), B, I)), midpoint(B, G), Line(B, I) we get midpoint(B, G) != line_intersection(Line(B, I), altitude(midpoint(B, G), B, I))
By directions_draw_angle on projection(A, i), A, B we get exists(angle(projection(A, i), A, B))
By directions_draw_angle on projection(A, i), D, midpoint(B, G) we get exists(angle(projection(A, i), D, midpoint(B, G)))
By line_containment_inequality on projection(E, Line(C, D)), projection(A, i), Line(C, D) we get projection(A, i) != projection(E, Line(C, D))
By directions_draw_angle on F, A, projection(A, i) we get exists(angle(F, A, projection(A, i)))
By line_containment_inequality on line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G), f we get midpoint(B, G) != line_intersection(f, altitude(midpoint(B, G), A, B))
By directions_draw_angle on E, D, projection(A, Line(D, G)) we get exists(angle(E, D, projection(A, Line(D, G))))
By directions_draw_angle on projection(A, i), B, projection(F, h) we get exists(angle(projection(A, i), B, projection(F, h)))
By directions_draw_angle on projection(A, Line(D, G)), D, F we get exists(angle(projection(A, Line(D, G)), D, F))
By directions_draw_angle on projection(A, i), A, C we get exists(angle(projection(A, i), A, C))
By line_containment_inequality on line_intersection(i, altitude(midpoint(B, G), B, D)), C, i we get C != line_intersection(i, altitude(midpoint(B, G), B, D))
By directions_draw_angle on orthocenter(A, B, D), orthocenter(A, D, G), midpoint(B, G) we get exists(angle(orthocenter(A, B, D), orthocenter(A, D, G), midpoint(B, G)))
By line_containment_inequality on projection(F, h), projection(A, Line(D, G)), h we get projection(F, h) != projection(A, Line(D, G))
By directions_draw_angle on midpoint(B, G), A, projection(A, i) we get exists(angle(midpoint(B, G), A, projection(A, i)))
By directions_draw_angle on orthocenter(A, B, D), G, projection(A, Line(D, G)) we get exists(angle(orthocenter(A, B, D), G, projection(A, Line(D, G))))
By directions_draw_angle on A, projection(A, Line(D, G)), D we get exists(angle(A, projection(A, Line(D, G)), D))
By line_containment_inequality on line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), orthocenter(A, D, G), Line(D, G) we get orthocenter(A, D, G) != line_intersection(Line(D, G), altitude(midpoint(B, G), D, G))
By directions_draw_angle on G, orthocenter(A, B, D), projection(A, i) we get exists(angle(G, orthocenter(A, B, D), projection(A, i)))
By directions_draw_angle on projection(A, Line(D, G)), orthocenter(A, D, G), orthocenter(A, B, D) we get exists(angle(projection(A, Line(D, G)), orthocenter(A, D, G), orthocenter(A, B, D)))
By directions_draw_angle on E, orthocenter(A, D, G), orthocenter(A, B, D) we get exists(angle(E, orthocenter(A, D, G), orthocenter(A, B, D)))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, Line(D, G)), orthocenter(A, B, D), B we get not_collinear(B, orthocenter(A, B, D), projection(A, Line(D, G))), exists(Line(B, orthocenter(A, B, D)))
By line_containment_inequality on line_intersection(f, altitude(midpoint(B, G), A, B)), orthocenter(A, B, D), f we get orthocenter(A, B, D) != line_intersection(f, altitude(midpoint(B, G), A, B))
By directions_draw_angle on midpoint(B, G), orthocenter(A, D, G), orthocenter(A, B, D) we get exists(angle(midpoint(B, G), orthocenter(A, D, G), orthocenter(A, B, D)))
By directions_draw_angle on projection(A, Line(D, G)), A, midpoint(B, G) we get exists(angle(projection(A, Line(D, G)), A, midpoint(B, G)))
By line_containment_inequality on line_intersection(Line(G, I), altitude(midpoint(B, G), G, I)), D, Line(G, I) we get D != line_intersection(Line(G, I), altitude(midpoint(B, G), G, I))
By directions_draw_angle on projection(A, Line(D, G)), D, A we get exists(angle(projection(A, Line(D, G)), D, A))
By directions_draw_angle on A, projection(A, i), B we get exists(angle(A, projection(A, i), B))
By directions_draw_angle on projection(A, i), A, E we get exists(angle(projection(A, i), A, E))
By line_containment_inequality on projection(E, h), projection(A, i), h we get projection(A, i) != projection(E, h)
By directions_draw_angle on projection(A, Line(D, G)), G, projection(E, h) we get exists(angle(projection(A, Line(D, G)), G, projection(E, h)))
By line_inequality on Line(C, center(c)), altitude(A, D, G), C we get altitude(A, D, G) != Line(C, center(c))
By directions_draw_angle on projection(A, i), D, projection(A, Line(D, G)) we get exists(angle(projection(A, i), D, projection(A, Line(D, G))))
By directions_draw_angle on projection(A, Line(D, G)), D, orthocenter(A, D, G) we get exists(angle(projection(A, Line(D, G)), D, orthocenter(A, D, G)))
By directions_draw_angle on projection(A, i), D, I we get exists(angle(projection(A, i), D, I))
By not_in_line_equivalent_to_not_collinear_v0 on E, projection(A, i), B we get not_collinear(B, E, projection(A, i)), exists(Line(B, projection(A, i)))
By directions_draw_angle on midpoint(B, G), A, projection(A, Line(D, G)) we get exists(angle(midpoint(B, G), A, projection(A, Line(D, G))))
By directions_draw_angle on midpoint(B, G), orthocenter(A, B, D), orthocenter(A, D, G) we get exists(angle(midpoint(B, G), orthocenter(A, B, D), orthocenter(A, D, G)))
By line_containment_inequality on line_intersection(Line(G, I), altitude(midpoint(B, G), G, I)), midpoint(B, G), Line(G, I) we get midpoint(B, G) != line_intersection(Line(G, I), altitude(midpoint(B, G), G, I))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, Line(D, G)), midpoint(B, G), orthocenter(A, B, D) we get not_collinear(midpoint(B, G), orthocenter(A, B, D), projection(A, Line(D, G))), exists(Line(midpoint(B, G), orthocenter(A, B, D)))
By directions_draw_angle on G, D, projection(A, i) we get exists(angle(G, D, projection(A, i)))
By directions_draw_angle on G, projection(A, Line(D, G)), A we get exists(angle(G, projection(A, Line(D, G)), A))
By line_containment_inequality on line_intersection(Line(G, I), altitude(midpoint(B, G), G, I)), E, Line(G, I) we get E != line_intersection(Line(G, I), altitude(midpoint(B, G), G, I))
By directions_draw_angle on I, D, projection(A, i) we get exists(angle(I, D, projection(A, i)))
By line_containment_inequality on line_intersection(g, altitude(midpoint(B, G), A, C)), F, g we get F != line_intersection(g, altitude(midpoint(B, G), A, C))
By directions_draw_angle on midpoint(B, G), orthocenter(A, B, D), projection(A, i) we get exists(angle(midpoint(B, G), orthocenter(A, B, D), projection(A, i)))
By directions_draw_angle on E, orthocenter(A, D, G), projection(A, Line(D, G)) we get exists(angle(E, orthocenter(A, D, G), projection(A, Line(D, G))))
By directions_draw_angle on H, A, projection(A, Line(D, G)) we get exists(angle(H, A, projection(A, Line(D, G))))
By directions_draw_angle on projection(A, i), orthocenter(A, B, D), B we get exists(angle(projection(A, i), orthocenter(A, B, D), B))
By directions_draw_angle on A, G, projection(A, Line(D, G)) we get exists(angle(A, G, projection(A, Line(D, G))))
By line_containment_inequality on line_intersection(f, altitude(midpoint(B, G), A, B)), G, f we get G != line_intersection(f, altitude(midpoint(B, G), A, B))
By directions_draw_angle on H, D, projection(A, i) we get exists(angle(H, D, projection(A, i)))
By line_containment_inequality on line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), I, Line(D, G) we get I != line_intersection(Line(D, G), altitude(midpoint(B, G), D, G))
By line_containment_inequality on line_intersection(Line(B, I), altitude(midpoint(B, G), B, I)), H, Line(B, I) we get H != line_intersection(Line(B, I), altitude(midpoint(B, G), B, I))
By line_containment_inequality on line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), projection(A, i), Line(D, G) we get projection(A, i) != line_intersection(Line(D, G), altitude(midpoint(B, G), D, G))
By line_containment_inequality on projection(F, Line(D, H)), projection(A, Line(D, G)), Line(D, H) we get projection(A, Line(D, G)) != projection(F, Line(D, H))
By line_containment_inequality on line_intersection(f, altitude(midpoint(B, G), A, B)), C, f we get C != line_intersection(f, altitude(midpoint(B, G), A, B))
By line_containment_inequality on line_intersection(g, altitude(midpoint(B, G), A, C)), orthocenter(A, B, D), g we get orthocenter(A, B, D) != line_intersection(g, altitude(midpoint(B, G), A, C))
By line_inequality on radical_axis(c, d), altitude(A, B, D), C we get altitude(A, B, D) != radical_axis(c, d)
By line_containment_inequality on line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), A, Line(D, G) we get A != line_intersection(Line(D, G), altitude(midpoint(B, G), D, G))
By line_containment_inequality on line_intersection(i, altitude(midpoint(B, G), B, D)), orthocenter(A, B, D), i we get orthocenter(A, B, D) != line_intersection(i, altitude(midpoint(B, G), B, D))
By line_inequality on Line(E, center(c)), altitude(A, B, D), E we get altitude(A, B, D) != Line(E, center(c))
By line_containment_inequality on line_intersection(g, altitude(midpoint(B, G), A, C)), orthocenter(A, D, G), g we get orthocenter(A, D, G) != line_intersection(g, altitude(midpoint(B, G), A, C))
By line_inequality on altitude(E, C, D), altitude(A, B, D), E we get altitude(A, B, D) != altitude(E, C, D)
By line_containment_inequality on projection(A, Line(D, G)), projection(A, i), Line(D, G) we get projection(A, i) != projection(A, Line(D, G))
By line_inequality on altitude(E, A, D), altitude(A, B, D), E we get altitude(A, B, D) != altitude(E, A, D)
By line_inequality on altitude(E, D, G), altitude(A, B, D), E we get altitude(A, B, D) != altitude(E, D, G)
By line_containment_inequality on line_intersection(i, altitude(midpoint(B, G), B, D)), E, i we get E != line_intersection(i, altitude(midpoint(B, G), B, D))
By line_containment_inequality on line_intersection(g, altitude(midpoint(B, G), A, C)), projection(A, Line(D, G)), g we get projection(A, Line(D, G)) != line_intersection(g, altitude(midpoint(B, G), A, C))
By line_containment_inequality on projection(E, Line(D, G)), projection(A, i), Line(D, G) we get projection(A, i) != projection(E, Line(D, G))
By line_containment_inequality on line_intersection(Line(G, I), altitude(midpoint(B, G), G, I)), orthocenter(A, D, G), Line(G, I) we get orthocenter(A, D, G) != line_intersection(Line(G, I), altitude(midpoint(B, G), G, I))
By line_containment_inequality on line_intersection(Line(G, I), altitude(midpoint(B, G), G, I)), projection(A, Line(D, G)), Line(G, I) we get projection(A, Line(D, G)) != line_intersection(Line(G, I), altitude(midpoint(B, G), G, I))
By line_containment_inequality on line_intersection(i, altitude(midpoint(B, G), B, D)), F, i we get F != line_intersection(i, altitude(midpoint(B, G), B, D))
By line_containment_inequality on line_intersection(Line(B, I), altitude(midpoint(B, G), B, I)), E, Line(B, I) we get E != line_intersection(Line(B, I), altitude(midpoint(B, G), B, I))
By line_inequality on Line(H, center(c)), altitude(A, D, G), H we get altitude(A, D, G) != Line(H, center(c))
By line_inequality on radical_axis(c, d), altitude(A, D, G), C we get altitude(A, D, G) != radical_axis(c, d)
By line_containment_inequality on line_intersection(Line(B, I), altitude(midpoint(B, G), B, I)), C, Line(B, I) we get C != line_intersection(Line(B, I), altitude(midpoint(B, G), B, I))
By line_inequality on altitude(A, D, G), altitude(A, B, D), orthocenter(A, D, G) we get altitude(A, B, D) != altitude(A, D, G)
By line_containment_inequality on line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), orthocenter(A, B, D), Line(D, G) we get orthocenter(A, B, D) != line_intersection(Line(D, G), altitude(midpoint(B, G), D, G))
By line_containment_inequality on line_intersection(g, altitude(midpoint(B, G), A, C)), I, g we get I != line_intersection(g, altitude(midpoint(B, G), A, C))
By line_containment_inequality on projection(F, i), projection(A, Line(D, G)), i we get projection(F, i) != projection(A, Line(D, G))
By line_containment_inequality on line_intersection(i, altitude(midpoint(B, G), B, D)), projection(A, Line(D, G)), i we get projection(A, Line(D, G)) != line_intersection(i, altitude(midpoint(B, G), B, D))
By line_inequality on altitude(F, D, H), altitude(A, D, G), F we get altitude(A, D, G) != altitude(F, D, H)
By line_containment_inequality on line_intersection(f, altitude(midpoint(B, G), A, B)), orthocenter(A, D, G), f we get orthocenter(A, D, G) != line_intersection(f, altitude(midpoint(B, G), A, B))
By line_containment_inequality on projection(E, h), projection(A, Line(D, G)), h we get projection(E, h) != projection(A, Line(D, G))
By line_inequality on Line(H, center(c)), altitude(A, B, D), H we get altitude(A, B, D) != Line(H, center(c))
By line_containment_inequality on line_intersection(Line(B, I), altitude(midpoint(B, G), B, I)), D, Line(B, I) we get D != line_intersection(Line(B, I), altitude(midpoint(B, G), B, I))
By line_containment_inequality on line_intersection(Line(G, I), altitude(midpoint(B, G), G, I)), B, Line(G, I) we get B != line_intersection(Line(G, I), altitude(midpoint(B, G), G, I))
By line_containment_inequality on line_intersection(g, altitude(midpoint(B, G), A, C)), D, g we get D != line_intersection(g, altitude(midpoint(B, G), A, C))
By line_inequality on altitude(F, B, D), altitude(A, D, G), F we get altitude(A, D, G) != altitude(F, B, D)
By line_containment_inequality on line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), C, Line(D, G) we get C != line_intersection(Line(D, G), altitude(midpoint(B, G), D, G))
By line_inequality on Line(F, center(c)), altitude(A, D, G), F we get altitude(A, D, G) != Line(F, center(c))
By line_containment_inequality on line_intersection(g, altitude(midpoint(B, G), A, C)), H, g we get H != line_intersection(g, altitude(midpoint(B, G), A, C))
By line_containment_inequality on line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), H, Line(D, G) we get H != line_intersection(Line(D, G), altitude(midpoint(B, G), D, G))
By line_containment_inequality on projection(F, h), projection(A, i), h we get projection(A, i) != projection(F, h)
By line_containment_inequality on projection(E, Line(C, D)), projection(A, Line(D, G)), Line(C, D) we get projection(A, Line(D, G)) != projection(E, Line(C, D))
By line_containment_inequality on line_intersection(f, altitude(midpoint(B, G), A, B)), projection(A, Line(D, G)), f we get projection(A, Line(D, G)) != line_intersection(f, altitude(midpoint(B, G), A, B))
By line_containment_inequality on line_intersection(Line(B, I), altitude(midpoint(B, G), B, I)), G, Line(B, I) we get G != line_intersection(Line(B, I), altitude(midpoint(B, G), B, I))
By external_angle_bisector_definition_v0_r on orthocenter(A, D, G), I, orthocenter(A, D, G), midpoint(B, G) we get Line(I, midpoint(B, G)) == external_angle_bisector(orthocenter(A, D, G), midpoint(B, G), orthocenter(A, D, G))
By external_angle_bisector_definition_v0_r on orthocenter(A, B, D), D, orthocenter(A, B, D), midpoint(B, G) we get Line(D, midpoint(B, G)) == external_angle_bisector(orthocenter(A, B, D), midpoint(B, G), orthocenter(A, B, D))
By external_angle_bisector_definition_v0_r on orthocenter(A, D, G), A, orthocenter(A, D, G), midpoint(B, G) we get Line(A, midpoint(B, G)) == external_angle_bisector(orthocenter(A, D, G), midpoint(B, G), orthocenter(A, D, G))
By external_angle_bisector_definition_v0_r on orthocenter(A, B, D), I, orthocenter(A, B, D), midpoint(B, G) we get Line(I, midpoint(B, G)) == external_angle_bisector(orthocenter(A, B, D), midpoint(B, G), orthocenter(A, B, D))
By internal_angle_bisector_definition_v0_r on projection(A, i), A, projection(A, i), orthocenter(A, B, D) we get Line(A, orthocenter(A, B, D)) == internal_angle_bisector(projection(A, i), orthocenter(A, B, D), projection(A, i))
By internal_angle_bisector_definition_v0_r on A, orthocenter(A, B, D), A, projection(A, i) we get Line(projection(A, i), orthocenter(A, B, D)) == internal_angle_bisector(A, projection(A, i), A)
By internal_angle_bisector_definition_v0_r on projection(A, i), D, projection(A, i), B we get Line(B, D) == internal_angle_bisector(projection(A, i), B, projection(A, i))
By internal_angle_bisector_definition_v0_r on orthocenter(A, D, G), A, orthocenter(A, D, G), projection(A, Line(D, G)) we get Line(A, projection(A, Line(D, G))) == internal_angle_bisector(orthocenter(A, D, G), projection(A, Line(D, G)), orthocenter(A, D, G))
By external_angle_bisector_definition_v0_r on orthocenter(A, D, G), D, orthocenter(A, D, G), midpoint(B, G) we get Line(D, midpoint(B, G)) == external_angle_bisector(orthocenter(A, D, G), midpoint(B, G), orthocenter(A, D, G))
By internal_angle_bisector_definition_v0_r on D, projection(A, i), D, B we get Line(B, projection(A, i)) == internal_angle_bisector(D, B, D)
By internal_angle_bisector_definition_v0_r on projection(A, Line(D, G)), D, projection(A, Line(D, G)), G we get Line(D, G) == internal_angle_bisector(projection(A, Line(D, G)), G, projection(A, Line(D, G)))
By internal_angle_bisector_definition_v0_r on orthocenter(A, B, D), A, orthocenter(A, B, D), projection(A, i) we get Line(A, projection(A, i)) == internal_angle_bisector(orthocenter(A, B, D), projection(A, i), orthocenter(A, B, D))
By external_angle_bisector_definition_v0_r on orthocenter(A, B, D), A, orthocenter(A, B, D), midpoint(B, G) we get Line(A, midpoint(B, G)) == external_angle_bisector(orthocenter(A, B, D), midpoint(B, G), orthocenter(A, B, D))
By internal_angle_bisector_definition_v0_r on D, B, D, projection(A, i) we get Line(B, projection(A, i)) == internal_angle_bisector(D, projection(A, i), D)
By internal_angle_bisector_definition_v0_r on G, D, G, projection(A, Line(D, G)) we get Line(D, projection(A, Line(D, G))) == internal_angle_bisector(G, projection(A, Line(D, G)), G)
By internal_angle_bisector_definition_v0_r on projection(A, Line(D, G)), orthocenter(A, D, G), projection(A, Line(D, G)), A we get Line(A, orthocenter(A, D, G)) == internal_angle_bisector(projection(A, Line(D, G)), A, projection(A, Line(D, G)))
By internal_angle_bisector_definition_v0_r on orthocenter(A, D, G), B, orthocenter(A, D, G), orthocenter(A, B, D) we get Line(B, orthocenter(A, B, D)) == internal_angle_bisector(orthocenter(A, D, G), orthocenter(A, B, D), orthocenter(A, D, G))
By internal_angle_bisector_definition_v0_r on orthocenter(A, B, D), B, orthocenter(A, B, D), orthocenter(A, D, G) we get Line(B, orthocenter(A, D, G)) == internal_angle_bisector(orthocenter(A, B, D), orthocenter(A, D, G), orthocenter(A, B, D))
By internal_angle_bisector_definition_v0_r on projection(A, i), B, projection(A, i), D we get Line(B, D) == internal_angle_bisector(projection(A, i), D, projection(A, i))
By internal_angle_bisector_definition_v0_r on D, G, D, projection(A, Line(D, G)) we get Line(G, projection(A, Line(D, G))) == internal_angle_bisector(D, projection(A, Line(D, G)), D)
By internal_angle_bisector_definition_v0_r on orthocenter(A, B, D), G, orthocenter(A, B, D), orthocenter(A, D, G) we get Line(G, orthocenter(A, D, G)) == internal_angle_bisector(orthocenter(A, B, D), orthocenter(A, D, G), orthocenter(A, B, D))
By internal_angle_bisector_definition_v0_r on A, orthocenter(A, D, G), A, projection(A, Line(D, G)) we get Line(orthocenter(A, D, G), projection(A, Line(D, G))) == internal_angle_bisector(A, projection(A, Line(D, G)), A)
By internal_angle_bisector_definition_v0_r on projection(A, Line(D, G)), G, projection(A, Line(D, G)), D we get Line(D, G) == internal_angle_bisector(projection(A, Line(D, G)), D, projection(A, Line(D, G)))
By internal_angle_bisector_definition_v0_r on orthocenter(A, B, D), projection(A, i), orthocenter(A, B, D), A we get Line(A, projection(A, i)) == internal_angle_bisector(orthocenter(A, B, D), A, orthocenter(A, B, D))
By internal_angle_bisector_definition_v0_r on projection(A, Line(D, G)), A, projection(A, Line(D, G)), orthocenter(A, D, G) we get Line(A, orthocenter(A, D, G)) == internal_angle_bisector(projection(A, Line(D, G)), orthocenter(A, D, G), projection(A, Line(D, G)))
By internal_angle_bisector_definition_v0_r on A, projection(A, i), A, orthocenter(A, B, D) we get Line(projection(A, i), orthocenter(A, B, D)) == internal_angle_bisector(A, orthocenter(A, B, D), A)
By internal_angle_bisector_definition_v0_r on B, projection(A, i), B, D we get Line(D, projection(A, i)) == internal_angle_bisector(B, D, B)
By internal_angle_bisector_definition_v0_r on orthocenter(A, D, G), G, orthocenter(A, D, G), orthocenter(A, B, D) we get Line(G, orthocenter(A, B, D)) == internal_angle_bisector(orthocenter(A, D, G), orthocenter(A, B, D), orthocenter(A, D, G))
By internal_angle_bisector_definition_v0_r on D, projection(A, Line(D, G)), D, G we get internal_angle_bisector(D, G, D) == Line(G, projection(A, Line(D, G)))
By internal_angle_bisector_definition_v0_r on projection(A, i), orthocenter(A, B, D), projection(A, i), A we get Line(A, orthocenter(A, B, D)) == internal_angle_bisector(projection(A, i), A, projection(A, i))
By internal_angle_bisector_definition_v0_r on B, D, B, projection(A, i) we get Line(D, projection(A, i)) == internal_angle_bisector(B, projection(A, i), B)
By internal_angle_bisector_definition_v0_r on A, projection(A, Line(D, G)), A, orthocenter(A, D, G) we get internal_angle_bisector(A, orthocenter(A, D, G), A) == Line(orthocenter(A, D, G), projection(A, Line(D, G)))
By internal_angle_bisector_definition_v0_r on G, projection(A, Line(D, G)), G, D we get internal_angle_bisector(G, D, G) == Line(D, projection(A, Line(D, G)))
By internal_angle_bisector_definition_v0_r on orthocenter(A, D, G), projection(A, Line(D, G)), orthocenter(A, D, G), A we get Line(A, projection(A, Line(D, G))) == internal_angle_bisector(orthocenter(A, D, G), A, orthocenter(A, D, G))
By altitude_definition on G, A, projection(A, Line(D, G)), Line(D, G) we get Line(D, G) == altitude(G, A, projection(A, Line(D, G)))
By altitude_definition on A, D, projection(A, i), altitude(A, B, D) we get altitude(A, B, D) == altitude(A, D, projection(A, i))
By altitude_definition on B, projection(A, i), A, i we get i == altitude(B, A, projection(A, i))
By altitude_definition on D, projection(A, i), A, i we get i == altitude(D, A, projection(A, i))
By altitude_definition on D, A, projection(A, Line(D, G)), Line(D, G) we get Line(D, G) == altitude(D, A, projection(A, Line(D, G)))
By altitude_definition on A, D, projection(A, Line(D, G)), altitude(A, D, G) we get altitude(A, D, G) == altitude(A, D, projection(A, Line(D, G)))
By power_of_a_point_definition on orthocenter(A, D, G), E, D, Circle(D, E, G) we get log(power_of_a_point(orthocenter(A, D, G), Circle(D, E, G))) == log(distance(E, orthocenter(A, D, G))) + log(distance(D, orthocenter(A, D, G)))
By altitude_definition on A, G, projection(A, Line(D, G)), altitude(A, D, G) we get altitude(A, D, G) == altitude(A, G, projection(A, Line(D, G)))
By altitude_definition on D, orthocenter(A, B, D), orthocenter(A, D, G), h we get h == altitude(D, orthocenter(A, B, D), orthocenter(A, D, G))
By power_of_a_point_definition on A, midpoint(B, G), D, Circle(B, D, F) we get log(power_of_a_point(A, Circle(B, D, F))) == log(distance(A, midpoint(B, G))) + log(distance(A, D))
By power_of_a_point_definition on A, F, B, Circle(B, D, F) we get log(distance(A, F)) + log(distance(A, B)) == log(power_of_a_point(A, Circle(B, D, F)))
By power_of_a_point_definition on G, B, midpoint(B, G), Circle(B, D, F) we get log(power_of_a_point(G, Circle(B, D, F))) == log(distance(B, G)) + log(distance(G, midpoint(B, G)))
By power_of_a_point_definition on B, G, midpoint(B, G), Circle(D, E, G) we get log(power_of_a_point(B, Circle(D, E, G))) == log(distance(B, G)) + log(distance(B, midpoint(B, G)))
By altitude_definition on A, projection(A, i), B, altitude(A, B, D) we get altitude(A, B, D) == altitude(A, B, projection(A, i))
By power_of_a_point_definition on H, B, F, Circle(B, D, F) we get log(distance(B, H)) + log(distance(F, H)) == log(power_of_a_point(H, Circle(B, D, F)))
By power_of_a_point_definition on I, D, midpoint(B, G), Circle(D, E, G) we get log(power_of_a_point(I, Circle(D, E, G))) == log(distance(D, I)) + log(distance(I, midpoint(B, G)))
By power_of_a_point_definition on A, E, G, Circle(D, E, G) we get log(distance(A, E)) + log(distance(A, G)) == log(power_of_a_point(A, Circle(D, E, G)))
By power_of_a_point_definition on orthocenter(A, B, D), D, F, Circle(B, D, F) we get log(power_of_a_point(orthocenter(A, B, D), Circle(B, D, F))) == log(distance(D, orthocenter(A, B, D))) + log(distance(F, orthocenter(A, B, D)))
By power_of_a_point_definition on I, midpoint(B, G), D, Circle(B, D, F) we get log(power_of_a_point(I, Circle(B, D, F))) == log(distance(I, midpoint(B, G))) + log(distance(D, I))
By power_of_a_point_definition on C, G, E, Circle(D, E, G) we get log(distance(C, G)) + log(distance(C, E)) == log(power_of_a_point(C, Circle(D, E, G)))
By power_of_a_point_definition on A, midpoint(B, G), D, Circle(D, E, G) we get log(power_of_a_point(A, Circle(D, E, G))) == log(distance(A, midpoint(B, G))) + log(distance(A, D))
By power_of_a_point_definition on orthocenter(A, D, G), midpoint(B, G), G, Circle(D, E, G) we get log(power_of_a_point(orthocenter(A, D, G), Circle(D, E, G))) == log(distance(midpoint(B, G), orthocenter(A, D, G))) + log(distance(G, orthocenter(A, D, G)))
By power_of_a_point_definition on orthocenter(A, B, D), midpoint(B, G), G, Circle(D, E, G) we get log(power_of_a_point(orthocenter(A, B, D), Circle(D, E, G))) == log(distance(midpoint(B, G), orthocenter(A, B, D))) + log(distance(G, orthocenter(A, B, D)))
By power_of_a_point_definition on orthocenter(A, B, D), B, midpoint(B, G), Circle(B, D, F) we get log(power_of_a_point(orthocenter(A, B, D), Circle(B, D, F))) == log(distance(B, orthocenter(A, B, D))) + log(distance(midpoint(B, G), orthocenter(A, B, D)))
By power_of_a_point_definition on orthocenter(A, D, G), B, midpoint(B, G), Circle(B, D, F) we get log(power_of_a_point(orthocenter(A, D, G), Circle(B, D, F))) == log(distance(B, orthocenter(A, D, G))) + log(distance(midpoint(B, G), orthocenter(A, D, G)))
By power_of_a_point_tangent on projection(A, i), D, Circle(D, G, I) we get 2 * log(distance(D, projection(A, i))) == log(power_of_a_point(projection(A, i), Circle(D, G, I)))
By power_of_a_point_tangent on projection(A, Line(D, G)), D, Circle(B, D, I) we get 2 * log(distance(D, projection(A, Line(D, G)))) == log(power_of_a_point(projection(A, Line(D, G)), Circle(B, D, I)))
By power_of_a_point_definition on projection(A, i), D, B, Circle(B, D, I) we get log(power_of_a_point(projection(A, i), Circle(B, D, I))) == log(distance(D, projection(A, i))) + log(distance(B, projection(A, i)))
By power_of_a_point_definition on projection(A, Line(D, G)), G, D, Circle(D, G, I) we get log(power_of_a_point(projection(A, Line(D, G)), Circle(D, G, I))) == log(distance(G, projection(A, Line(D, G)))) + log(distance(D, projection(A, Line(D, G))))
By power_of_a_point_definition on projection(A, i), B, D, Circle(B, D, F) we get log(power_of_a_point(projection(A, i), Circle(B, D, F))) == log(distance(B, projection(A, i))) + log(distance(D, projection(A, i)))
By power_of_a_point_definition on projection(A, Line(D, G)), G, D, d we get log(power_of_a_point(projection(A, Line(D, G)), d)) == log(distance(G, projection(A, Line(D, G)))) + log(distance(D, projection(A, Line(D, G))))
By power_of_a_point_definition on projection(A, i), D, B, d we get log(power_of_a_point(projection(A, i), d)) == log(distance(D, projection(A, i))) + log(distance(B, projection(A, i)))
By power_of_a_point_definition on projection(A, Line(D, G)), G, D, Circle(D, E, G) we get log(power_of_a_point(projection(A, Line(D, G)), Circle(D, E, G))) == log(distance(G, projection(A, Line(D, G)))) + log(distance(D, projection(A, Line(D, G))))
By line_intersection_definition on orthocenter(A, B, orthocenter(A, B, D)), Line(D, F), i we get line_intersection(i, Line(D, F)) == orthocenter(A, B, orthocenter(A, B, D))
By line_intersection_definition on orthocenter(A, G, orthocenter(A, D, G)), Line(D, E), Line(D, G) we get orthocenter(A, G, orthocenter(A, D, G)) == line_intersection(Line(D, E), Line(D, G))
By line_definition on midpoint(B, G), line_intersection(Line(G, I), altitude(midpoint(B, G), G, I)), altitude(midpoint(B, G), G, I) we get altitude(midpoint(B, G), G, I) == Line(midpoint(B, G), line_intersection(Line(G, I), altitude(midpoint(B, G), G, I)))
By line_intersection_definition on orthocenter(B, D, orthocenter(A, B, D)), f, altitude(A, B, D) we get line_intersection(f, altitude(A, B, D)) == orthocenter(B, D, orthocenter(A, B, D))
By line_definition on line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G), altitude(midpoint(B, G), A, C) we get altitude(midpoint(B, G), A, C) == Line(midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C)))
By line_intersection_definition on orthocenter(A, E, orthocenter(A, D, G)), Line(D, E), g we get line_intersection(g, Line(D, E)) == orthocenter(A, E, orthocenter(A, D, G))
By line_intersection_definition on orthocenter(A, D, orthocenter(A, D, G)), Line(B, G), g we get line_intersection(g, Line(B, G)) == orthocenter(A, D, orthocenter(A, D, G))
By line_intersection_definition on orthocenter(A, D, orthocenter(A, B, D)), Line(B, G), f we get line_intersection(f, Line(B, G)) == orthocenter(A, D, orthocenter(A, B, D))
By line_intersection_definition on orthocenter(B, D, orthocenter(A, B, D)), f, h we get line_intersection(f, h) == orthocenter(B, D, orthocenter(A, B, D))
By line_intersection_definition on orthocenter(A, B, orthocenter(A, B, D)), Line(D, F), h we get line_intersection(h, Line(D, F)) == orthocenter(A, B, orthocenter(A, B, D))
By line_intersection_definition on orthocenter(B, F, orthocenter(A, B, D)), f, Line(D, F) we get line_intersection(f, Line(D, F)) == orthocenter(B, F, orthocenter(A, B, D))
By line_intersection_definition on orthocenter(A, G, orthocenter(A, D, G)), h, Line(D, G) we get line_intersection(h, Line(D, G)) == orthocenter(A, G, orthocenter(A, D, G))
By line_intersection_definition on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), h, Line(B, G) we get line_intersection(h, Line(B, G)) == orthocenter(D, midpoint(B, G), orthocenter(A, B, D))
By line_intersection_definition on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), Line(B, G), h we get line_intersection(h, Line(B, G)) == orthocenter(I, midpoint(B, G), orthocenter(A, D, G))
By line_intersection_definition on orthocenter(A, D, orthocenter(A, D, G)), Line(B, G), Line(D, G) we get orthocenter(A, D, orthocenter(A, D, G)) == line_intersection(Line(B, G), Line(D, G))
By line_definition on line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), midpoint(B, G), altitude(midpoint(B, G), D, G) we get altitude(midpoint(B, G), D, G) == Line(midpoint(B, G), line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)))
By line_intersection_definition on orthocenter(A, D, orthocenter(A, D, G)), Line(D, G), g we get line_intersection(g, Line(D, G)) == orthocenter(A, D, orthocenter(A, D, G))
By line_intersection_definition on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), h, Line(B, G) we get line_intersection(h, Line(B, G)) == orthocenter(I, midpoint(B, G), orthocenter(A, B, D))
By line_intersection_definition on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), h, Line(B, G) we get line_intersection(h, Line(B, G)) == orthocenter(A, midpoint(B, G), orthocenter(A, B, D))
By line_intersection_definition on orthocenter(A, B, orthocenter(A, B, D)), h, i we get line_intersection(h, i) == orthocenter(A, B, orthocenter(A, B, D))
By line_intersection_definition on orthocenter(E, G, orthocenter(A, D, G)), Line(D, E), g we get line_intersection(g, Line(D, E)) == orthocenter(E, G, orthocenter(A, D, G))
By line_intersection_definition on orthocenter(A, D, orthocenter(A, B, D)), i, f we get line_intersection(f, i) == orthocenter(A, D, orthocenter(A, B, D))
By line_definition on midpoint(B, G), line_intersection(Line(B, I), altitude(midpoint(B, G), B, I)), altitude(midpoint(B, G), B, I) we get altitude(midpoint(B, G), B, I) == Line(midpoint(B, G), line_intersection(Line(B, I), altitude(midpoint(B, G), B, I)))
By line_intersection_definition on orthocenter(B, D, orthocenter(A, B, D)), altitude(A, B, D), h we get line_intersection(h, altitude(A, B, D)) == orthocenter(B, D, orthocenter(A, B, D))
By line_intersection_definition on orthocenter(D, G, orthocenter(A, D, G)), h, altitude(A, D, G) we get line_intersection(h, altitude(A, D, G)) == orthocenter(D, G, orthocenter(A, D, G))
By line_intersection_definition on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), Line(B, G), h we get line_intersection(h, Line(B, G)) == orthocenter(A, midpoint(B, G), orthocenter(A, D, G))
By line_intersection_definition on orthocenter(D, G, orthocenter(A, D, G)), g, h we get line_intersection(g, h) == orthocenter(D, G, orthocenter(A, D, G))
By line_intersection_definition on orthocenter(D, G, orthocenter(A, D, G)), altitude(A, D, G), g we get line_intersection(g, altitude(A, D, G)) == orthocenter(D, G, orthocenter(A, D, G))
By line_intersection_definition on orthocenter(A, F, orthocenter(A, B, D)), Line(D, F), f we get line_intersection(f, Line(D, F)) == orthocenter(A, F, orthocenter(A, B, D))
By line_definition on midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B)), altitude(midpoint(B, G), A, B) we get altitude(midpoint(B, G), A, B) == Line(midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B)))
By line_intersection_definition on orthocenter(A, G, orthocenter(A, D, G)), h, Line(D, E) we get line_intersection(h, Line(D, E)) == orthocenter(A, G, orthocenter(A, D, G))
By line_definition on midpoint(B, G), line_intersection(i, altitude(midpoint(B, G), B, D)), altitude(midpoint(B, G), B, D) we get altitude(midpoint(B, G), B, D) == Line(midpoint(B, G), line_intersection(i, altitude(midpoint(B, G), B, D)))
By line_intersection_definition on orthocenter(C, E, orthocenter(A, D, G)), Line(D, E), g we get line_intersection(g, Line(D, E)) == orthocenter(C, E, orthocenter(A, D, G))
By line_intersection_definition on orthocenter(A, D, orthocenter(A, B, D)), i, Line(B, G) we get line_intersection(i, Line(B, G)) == orthocenter(A, D, orthocenter(A, B, D))
By line_intersection_definition on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), Line(B, G), h we get line_intersection(h, Line(B, G)) == orthocenter(D, midpoint(B, G), orthocenter(A, D, G))
By line_intersection_definition on orthocenter(F, H, orthocenter(A, B, D)), Line(D, F), f we get line_intersection(f, Line(D, F)) == orthocenter(F, H, orthocenter(A, B, D))
By perpendicular_line_definition on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), h, altitude(F, A, D) we get h == perpendicular_line(orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), altitude(F, A, D))
By perpendicular_line_definition on orthocenter(B, F, orthocenter(A, B, D)), perpendicular_line(F, Line(B, G)), Line(B, G) we get perpendicular_line(F, Line(B, G)) == perpendicular_line(orthocenter(B, F, orthocenter(A, B, D)), Line(B, G))
By perpendicular_line_definition on orthocenter(A, G, orthocenter(A, D, G)), Line(D, G), altitude(midpoint(B, G), D, G) we get Line(D, G) == perpendicular_line(orthocenter(A, G, orthocenter(A, D, G)), altitude(midpoint(B, G), D, G))
By perpendicular_line_definition on orthocenter(F, H, orthocenter(A, B, D)), f, altitude(midpoint(B, G), A, B) we get f == perpendicular_line(orthocenter(F, H, orthocenter(A, B, D)), altitude(midpoint(B, G), A, B))
By perpendicular_line_definition on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), h, Line(B, G) we get h == perpendicular_line(orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), Line(B, G))
By perpendicular_line_definition on A, altitude(A, B, D), altitude(midpoint(B, G), A, orthocenter(A, B, D)) we get altitude(A, B, D) == perpendicular_line(A, altitude(midpoint(B, G), A, orthocenter(A, B, D)))
By perpendicular_line_definition on orthocenter(D, G, orthocenter(A, D, G)), g, Line(D, E) we get g == perpendicular_line(orthocenter(D, G, orthocenter(A, D, G)), Line(D, E))
By perpendicular_line_definition on orthocenter(A, D, orthocenter(A, D, G)), g, Line(D, E) we get g == perpendicular_line(orthocenter(A, D, orthocenter(A, D, G)), Line(D, E))
By perpendicular_line_definition on orthocenter(A, B, orthocenter(A, B, D)), i, altitude(midpoint(B, G), B, D) we get i == perpendicular_line(orthocenter(A, B, orthocenter(A, B, D)), altitude(midpoint(B, G), B, D))
By perpendicular_line_definition on orthocenter(A, E, midpoint(B, G)), altitude(A, E, midpoint(B, G)), Line(E, midpoint(B, G)) we get altitude(A, E, midpoint(B, G)) == perpendicular_line(orthocenter(A, E, midpoint(B, G)), Line(E, midpoint(B, G)))
By perpendicular_line_definition on orthocenter(A, B, D), altitude(A, B, D), altitude(F, A, orthocenter(A, B, D)) we get altitude(A, B, D) == perpendicular_line(orthocenter(A, B, D), altitude(F, A, orthocenter(A, B, D)))
By perpendicular_line_definition on orthocenter(A, D, orthocenter(A, B, D)), f, Line(D, F) we get f == perpendicular_line(orthocenter(A, D, orthocenter(A, B, D)), Line(D, F))
By perpendicular_line_definition on G, Line(B, G), perpendicular_line(E, Line(B, G)) we get Line(B, G) == perpendicular_line(G, perpendicular_line(E, Line(B, G)))
By perpendicular_line_definition on orthocenter(A, D, orthocenter(A, B, D)), i, altitude(midpoint(B, G), B, D) we get i == perpendicular_line(orthocenter(A, D, orthocenter(A, B, D)), altitude(midpoint(B, G), B, D))
By perpendicular_line_definition on orthocenter(C, E, orthocenter(A, D, G)), Line(D, E), g we get Line(D, E) == perpendicular_line(orthocenter(C, E, orthocenter(A, D, G)), g)
By perpendicular_line_definition on orthocenter(B, D, orthocenter(A, B, D)), h, altitude(E, A, D) we get h == perpendicular_line(orthocenter(B, D, orthocenter(A, B, D)), altitude(E, A, D))
By perpendicular_line_definition on A, altitude(A, D, G), altitude(E, A, orthocenter(A, D, G)) we get altitude(A, D, G) == perpendicular_line(A, altitude(E, A, orthocenter(A, D, G)))
By perpendicular_line_definition on orthocenter(E, G, orthocenter(A, D, G)), Line(D, E), g we get Line(D, E) == perpendicular_line(orthocenter(E, G, orthocenter(A, D, G)), g)
By perpendicular_line_definition on orthocenter(F, H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D)), Line(H, orthocenter(A, B, D)) we get altitude(F, H, orthocenter(A, B, D)) == perpendicular_line(orthocenter(F, H, orthocenter(A, B, D)), Line(H, orthocenter(A, B, D)))
By perpendicular_line_definition on orthocenter(E, G, orthocenter(A, D, G)), perpendicular_line(E, Line(B, G)), Line(B, G) we get perpendicular_line(E, Line(B, G)) == perpendicular_line(orthocenter(E, G, orthocenter(A, D, G)), Line(B, G))
By perpendicular_line_definition on orthocenter(A, G, orthocenter(A, D, G)), Line(D, E), g we get Line(D, E) == perpendicular_line(orthocenter(A, G, orthocenter(A, D, G)), g)
By perpendicular_line_definition on orthocenter(A, G, orthocenter(A, D, G)), Line(D, E), perpendicular_line(midpoint(B, G), Line(D, E)) we get Line(D, E) == perpendicular_line(orthocenter(A, G, orthocenter(A, D, G)), perpendicular_line(midpoint(B, G), Line(D, E)))
By perpendicular_line_definition on orthocenter(C, E, orthocenter(A, D, G)), g, Line(D, E) we get g == perpendicular_line(orthocenter(C, E, orthocenter(A, D, G)), Line(D, E))
By perpendicular_line_definition on orthocenter(A, G, orthocenter(A, D, G)), h, Line(B, G) we get h == perpendicular_line(orthocenter(A, G, orthocenter(A, D, G)), Line(B, G))
By perpendicular_line_definition on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), h, Line(B, G) we get h == perpendicular_line(orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), Line(B, G))
By perpendicular_line_definition on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), Line(B, G), h we get Line(B, G) == perpendicular_line(orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), h)
By perpendicular_line_definition on orthocenter(A, F, midpoint(B, G)), altitude(F, A, D), h we get altitude(F, A, D) == perpendicular_line(orthocenter(A, F, midpoint(B, G)), h)
By perpendicular_line_definition on orthocenter(A, B, D), altitude(A, B, D), altitude(midpoint(B, G), A, orthocenter(A, B, D)) we get altitude(A, B, D) == perpendicular_line(orthocenter(A, B, D), altitude(midpoint(B, G), A, orthocenter(A, B, D)))
By perpendicular_line_definition on orthocenter(B, D, orthocenter(A, B, D)), f, altitude(midpoint(B, G), A, B) we get f == perpendicular_line(orthocenter(B, D, orthocenter(A, B, D)), altitude(midpoint(B, G), A, B))
By perpendicular_line_definition on A, altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)) we get altitude(A, D, G) == perpendicular_line(A, altitude(midpoint(B, G), A, orthocenter(A, D, G)))
By perpendicular_line_definition on D, Line(D, E), perpendicular_line(midpoint(B, G), Line(D, E)) we get Line(D, E) == perpendicular_line(D, perpendicular_line(midpoint(B, G), Line(D, E)))
By perpendicular_line_definition on orthocenter(E, G, orthocenter(A, D, G)), Line(D, E), perpendicular_line(midpoint(B, G), Line(D, E)) we get Line(D, E) == perpendicular_line(orthocenter(E, G, orthocenter(A, D, G)), perpendicular_line(midpoint(B, G), Line(D, E)))
By perpendicular_line_definition on orthocenter(A, B, orthocenter(A, B, D)), i, altitude(F, B, D) we get i == perpendicular_line(orthocenter(A, B, orthocenter(A, B, D)), altitude(F, B, D))
By perpendicular_line_definition on orthocenter(A, B, D), Line(B, G), perpendicular_line(E, Line(B, G)) we get Line(B, G) == perpendicular_line(orthocenter(A, B, D), perpendicular_line(E, Line(B, G)))
By concurrent_sufficient_conditions on altitude(A, B, D), altitude(A, D, G), g we get concurrent(g, altitude(A, B, D), altitude(A, D, G))
By perpendicular_line_definition on A, altitude(A, B, D), altitude(F, A, orthocenter(A, B, D)) we get altitude(A, B, D) == perpendicular_line(A, altitude(F, A, orthocenter(A, B, D)))
By perpendicular_line_definition on orthocenter(A, D, G), altitude(A, D, G), altitude(E, A, orthocenter(A, D, G)) we get altitude(A, D, G) == perpendicular_line(orthocenter(A, D, G), altitude(E, A, orthocenter(A, D, G)))
By line_intersection_definition on A, altitude(A, D, G), altitude(A, B, D) we get A == line_intersection(altitude(A, B, D), altitude(A, D, G))
By perpendicular_line_definition on orthocenter(D, G, orthocenter(A, D, G)), altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)) we get altitude(A, D, G) == perpendicular_line(orthocenter(D, G, orthocenter(A, D, G)), altitude(midpoint(B, G), A, orthocenter(A, D, G)))
By perpendicular_line_definition on E, Line(D, E), perpendicular_line(midpoint(B, G), Line(D, E)) we get Line(D, E) == perpendicular_line(E, perpendicular_line(midpoint(B, G), Line(D, E)))
By perpendicular_line_definition on orthocenter(A, B, orthocenter(A, B, D)), h, altitude(E, A, D) we get h == perpendicular_line(orthocenter(A, B, orthocenter(A, B, D)), altitude(E, A, D))
By perpendicular_line_definition on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), Line(B, G), perpendicular_line(E, Line(B, G)) we get Line(B, G) == perpendicular_line(orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), perpendicular_line(E, Line(B, G)))
By perpendicular_line_definition on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), Line(B, G), h we get Line(B, G) == perpendicular_line(orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), h)
By perpendicular_line_definition on orthocenter(A, D, G), Line(D, E), perpendicular_line(midpoint(B, G), Line(D, E)) we get Line(D, E) == perpendicular_line(orthocenter(A, D, G), perpendicular_line(midpoint(B, G), Line(D, E)))
By concurrent_sufficient_conditions on altitude(A, D, G), altitude(A, B, D), g we get concurrent(g, altitude(A, B, D), altitude(A, D, G))
By perpendicular_line_definition on orthocenter(D, G, orthocenter(A, D, G)), altitude(A, D, G), Line(D, G) we get altitude(A, D, G) == perpendicular_line(orthocenter(D, G, orthocenter(A, D, G)), Line(D, G))
By perpendicular_line_definition on orthocenter(A, D, orthocenter(A, B, D)), Line(B, G), perpendicular_line(F, Line(B, G)) we get Line(B, G) == perpendicular_line(orthocenter(A, D, orthocenter(A, B, D)), perpendicular_line(F, Line(B, G)))
By perpendicular_line_definition on orthocenter(A, B, D), Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D)) we get Line(H, orthocenter(A, B, D)) == perpendicular_line(orthocenter(A, B, D), altitude(F, H, orthocenter(A, B, D)))
By perpendicular_line_definition on orthocenter(B, F, orthocenter(A, B, D)), f, altitude(midpoint(B, G), A, B) we get f == perpendicular_line(orthocenter(B, F, orthocenter(A, B, D)), altitude(midpoint(B, G), A, B))
By perpendicular_line_definition on orthocenter(A, D, orthocenter(A, D, G)), Line(B, G), perpendicular_line(F, Line(B, G)) we get Line(B, G) == perpendicular_line(orthocenter(A, D, orthocenter(A, D, G)), perpendicular_line(F, Line(B, G)))
By perpendicular_line_definition on orthocenter(A, D, orthocenter(A, B, D)), i, altitude(A, B, D) we get i == perpendicular_line(orthocenter(A, D, orthocenter(A, B, D)), altitude(A, B, D))
By perpendicular_line_definition on orthocenter(B, F, orthocenter(A, B, D)), Line(D, F), perpendicular_line(midpoint(B, G), Line(D, F)) we get Line(D, F) == perpendicular_line(orthocenter(B, F, orthocenter(A, B, D)), perpendicular_line(midpoint(B, G), Line(D, F)))
By perpendicular_line_definition on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), h, Line(B, G) we get h == perpendicular_line(orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), Line(B, G))
By perpendicular_line_definition on orthocenter(A, B, D), Line(D, F), perpendicular_line(midpoint(B, G), Line(D, F)) we get Line(D, F) == perpendicular_line(orthocenter(A, B, D), perpendicular_line(midpoint(B, G), Line(D, F)))
By perpendicular_line_definition on orthocenter(B, F, orthocenter(A, B, D)), f, Line(D, F) we get f == perpendicular_line(orthocenter(B, F, orthocenter(A, B, D)), Line(D, F))
By perpendicular_line_definition on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), h, altitude(E, A, D) we get h == perpendicular_line(orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), altitude(E, A, D))
By perpendicular_line_definition on I, Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G)) we get Line(I, orthocenter(A, D, G)) == perpendicular_line(I, altitude(midpoint(B, G), I, orthocenter(A, D, G)))
By perpendicular_line_definition on orthocenter(A, F, midpoint(B, G)), altitude(midpoint(B, G), A, B), f we get altitude(midpoint(B, G), A, B) == perpendicular_line(orthocenter(A, F, midpoint(B, G)), f)
By perpendicular_line_definition on orthocenter(E, G, orthocenter(A, D, G)), g, altitude(midpoint(B, G), A, C) we get g == perpendicular_line(orthocenter(E, G, orthocenter(A, D, G)), altitude(midpoint(B, G), A, C))
By perpendicular_line_definition on orthocenter(A, B, D), Line(B, G), perpendicular_line(F, Line(B, G)) we get Line(B, G) == perpendicular_line(orthocenter(A, B, D), perpendicular_line(F, Line(B, G)))
By perpendicular_line_definition on orthocenter(A, D, orthocenter(A, D, G)), Line(B, G), h we get Line(B, G) == perpendicular_line(orthocenter(A, D, orthocenter(A, D, G)), h)
By perpendicular_line_definition on projection(A, Line(D, G)), altitude(A, D, G), altitude(E, A, orthocenter(A, D, G)) we get altitude(A, D, G) == perpendicular_line(projection(A, Line(D, G)), altitude(E, A, orthocenter(A, D, G)))
By median_definition on F, B, G, Line(F, midpoint(B, G)) we get median(F, B, G) == Line(F, midpoint(B, G))
By perpendicular_line_definition on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), Line(B, G), perpendicular_line(E, Line(B, G)) we get Line(B, G) == perpendicular_line(orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), perpendicular_line(E, Line(B, G)))
By perpendicular_line_definition on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), h, altitude(F, A, D) we get h == perpendicular_line(orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), altitude(F, A, D))
By perpendicular_line_definition on orthocenter(A, E, orthocenter(A, D, G)), Line(D, E), g we get Line(D, E) == perpendicular_line(orthocenter(A, E, orthocenter(A, D, G)), g)
By concurrent_sufficient_conditions on altitude(A, B, D), altitude(A, D, G), f we get concurrent(f, altitude(A, B, D), altitude(A, D, G))
By concurrent_sufficient_conditions on altitude(A, B, D), altitude(A, D, G), h we get concurrent(h, altitude(A, B, D), altitude(A, D, G))
By perpendicular_line_definition on orthocenter(C, E, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G)), Line(C, orthocenter(A, D, G)) we get altitude(E, C, orthocenter(A, D, G)) == perpendicular_line(orthocenter(C, E, orthocenter(A, D, G)), Line(C, orthocenter(A, D, G)))
By perpendicular_line_definition on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), h, Line(B, G) we get h == perpendicular_line(orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), Line(B, G))
By perpendicular_line_definition on orthocenter(D, G, orthocenter(A, D, G)), h, altitude(E, A, D) we get h == perpendicular_line(orthocenter(D, G, orthocenter(A, D, G)), altitude(E, A, D))
By line_unique_intersection_v0 on Line(D, F), f, orthocenter(F, H, orthocenter(A, B, D)), orthocenter(B, F, orthocenter(A, B, D)) we get orthocenter(B, F, orthocenter(A, B, D)) == orthocenter(F, H, orthocenter(A, B, D))
By perpendicular_line_definition on orthocenter(A, D, G), Line(B, G), perpendicular_line(F, Line(B, G)) we get Line(B, G) == perpendicular_line(orthocenter(A, D, G), perpendicular_line(F, Line(B, G)))
By perpendicular_line_definition on orthocenter(A, B, orthocenter(A, B, D)), h, Line(B, G) we get h == perpendicular_line(orthocenter(A, B, orthocenter(A, B, D)), Line(B, G))
By perpendicular_line_definition on H, Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D)) we get Line(H, orthocenter(A, B, D)) == perpendicular_line(H, altitude(F, H, orthocenter(A, B, D)))
By perpendicular_line_definition on F, Line(F, midpoint(B, G)), altitude(A, F, midpoint(B, G)) we get Line(F, midpoint(B, G)) == perpendicular_line(F, altitude(A, F, midpoint(B, G)))
By perpendicular_line_definition on orthocenter(A, E, orthocenter(A, D, G)), g, altitude(midpoint(B, G), A, C) we get g == perpendicular_line(orthocenter(A, E, orthocenter(A, D, G)), altitude(midpoint(B, G), A, C))
By perpendicular_line_definition on orthocenter(F, H, orthocenter(A, B, D)), Line(D, F), perpendicular_line(midpoint(B, G), Line(D, F)) we get Line(D, F) == perpendicular_line(orthocenter(F, H, orthocenter(A, B, D)), perpendicular_line(midpoint(B, G), Line(D, F)))
By perpendicular_line_definition on orthocenter(B, F, orthocenter(A, B, D)), Line(D, F), f we get Line(D, F) == perpendicular_line(orthocenter(B, F, orthocenter(A, B, D)), f)
By perpendicular_line_definition on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), perpendicular_line(midpoint(B, G), Line(D, F)), Line(D, F) we get perpendicular_line(midpoint(B, G), Line(D, F)) == perpendicular_line(orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), Line(D, F))
By line_unique_intersection_v0 on g, altitude(A, D, G), orthocenter(D, G, orthocenter(A, D, G)), A we get A == orthocenter(D, G, orthocenter(A, D, G))
By perpendicular_line_definition on orthocenter(A, B, orthocenter(A, B, D)), Line(D, F), f we get Line(D, F) == perpendicular_line(orthocenter(A, B, orthocenter(A, B, D)), f)
By perpendicular_line_definition on orthocenter(A, B, orthocenter(A, B, D)), h, altitude(F, A, D) we get h == perpendicular_line(orthocenter(A, B, orthocenter(A, B, D)), altitude(F, A, D))
By perpendicular_line_definition on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), altitude(midpoint(B, G), A, orthocenter(A, D, G)), altitude(A, D, G) we get altitude(midpoint(B, G), A, orthocenter(A, D, G)) == perpendicular_line(orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), altitude(A, D, G))
By perpendicular_line_definition on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), Line(B, G), h we get Line(B, G) == perpendicular_line(orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), h)
By perpendicular_line_definition on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), h, altitude(F, A, D) we get h == perpendicular_line(orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), altitude(F, A, D))
By perpendicular_line_definition on orthocenter(A, G, orthocenter(A, D, G)), h, altitude(E, A, D) we get h == perpendicular_line(orthocenter(A, G, orthocenter(A, D, G)), altitude(E, A, D))
By perpendicular_line_definition on C, Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G)) we get Line(C, orthocenter(A, D, G)) == perpendicular_line(C, altitude(E, C, orthocenter(A, D, G)))
By perpendicular_line_definition on orthocenter(F, H, orthocenter(A, B, D)), Line(D, F), f we get Line(D, F) == perpendicular_line(orthocenter(F, H, orthocenter(A, B, D)), f)
By perpendicular_line_definition on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), Line(B, G), h we get Line(B, G) == perpendicular_line(orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), h)
By perpendicular_line_definition on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), h, Line(B, G) we get h == perpendicular_line(orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), Line(B, G))
By perpendicular_line_definition on orthocenter(A, D, orthocenter(A, D, G)), Line(D, G), altitude(A, D, G) we get Line(D, G) == perpendicular_line(orthocenter(A, D, orthocenter(A, D, G)), altitude(A, D, G))
By perpendicular_line_definition on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), altitude(midpoint(B, G), A, orthocenter(A, B, D)), altitude(A, B, D) we get altitude(midpoint(B, G), A, orthocenter(A, B, D)) == perpendicular_line(orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), altitude(A, B, D))
By perpendicular_line_definition on orthocenter(B, D, orthocenter(A, B, D)), h, altitude(F, A, D) we get h == perpendicular_line(orthocenter(B, D, orthocenter(A, B, D)), altitude(F, A, D))
By perpendicular_line_definition on orthocenter(A, G, orthocenter(A, D, G)), Line(D, G), altitude(E, D, G) we get Line(D, G) == perpendicular_line(orthocenter(A, G, orthocenter(A, D, G)), altitude(E, D, G))
By perpendicular_line_definition on projection(A, i), altitude(A, B, D), altitude(F, A, orthocenter(A, B, D)) we get altitude(A, B, D) == perpendicular_line(projection(A, i), altitude(F, A, orthocenter(A, B, D)))
By perpendicular_line_definition on orthocenter(A, D, orthocenter(A, D, G)), Line(D, G), altitude(midpoint(B, G), D, G) we get Line(D, G) == perpendicular_line(orthocenter(A, D, orthocenter(A, D, G)), altitude(midpoint(B, G), D, G))
By perpendicular_line_definition on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), h, altitude(F, A, D) we get h == perpendicular_line(orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), altitude(F, A, D))
By perpendicular_line_definition on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), h, altitude(E, A, D) we get h == perpendicular_line(orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), altitude(E, A, D))
By perpendicular_line_definition on orthocenter(A, F, orthocenter(A, B, D)), Line(D, F), perpendicular_line(midpoint(B, G), Line(D, F)) we get Line(D, F) == perpendicular_line(orthocenter(A, F, orthocenter(A, B, D)), perpendicular_line(midpoint(B, G), Line(D, F)))
By perpendicular_line_definition on I, Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D)) we get Line(I, orthocenter(A, B, D)) == perpendicular_line(I, altitude(midpoint(B, G), I, orthocenter(A, B, D)))
By perpendicular_line_definition on orthocenter(A, D, G), Line(B, G), perpendicular_line(E, Line(B, G)) we get Line(B, G) == perpendicular_line(orthocenter(A, D, G), perpendicular_line(E, Line(B, G)))
By perpendicular_line_definition on orthocenter(A, D, orthocenter(A, B, D)), i, altitude(F, B, D) we get i == perpendicular_line(orthocenter(A, D, orthocenter(A, B, D)), altitude(F, B, D))
By perpendicular_line_definition on orthocenter(A, D, orthocenter(A, B, D)), Line(B, G), h we get Line(B, G) == perpendicular_line(orthocenter(A, D, orthocenter(A, B, D)), h)
By perpendicular_line_definition on orthocenter(A, D, orthocenter(A, B, D)), f, altitude(midpoint(B, G), A, B) we get f == perpendicular_line(orthocenter(A, D, orthocenter(A, B, D)), altitude(midpoint(B, G), A, B))
By line_unique_intersection_v0 on Line(D, G), Line(D, E), orthocenter(A, G, orthocenter(A, D, G)), D we get D == orthocenter(A, G, orthocenter(A, D, G))
By perpendicular_line_definition on orthocenter(A, E, orthocenter(A, D, G)), Line(D, E), perpendicular_line(midpoint(B, G), Line(D, E)) we get Line(D, E) == perpendicular_line(orthocenter(A, E, orthocenter(A, D, G)), perpendicular_line(midpoint(B, G), Line(D, E)))
By perpendicular_line_definition on orthocenter(C, E, orthocenter(A, D, G)), Line(D, E), perpendicular_line(midpoint(B, G), Line(D, E)) we get Line(D, E) == perpendicular_line(orthocenter(C, E, orthocenter(A, D, G)), perpendicular_line(midpoint(B, G), Line(D, E)))
By perpendicular_line_definition on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), Line(B, G), perpendicular_line(E, Line(B, G)) we get Line(B, G) == perpendicular_line(orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), perpendicular_line(E, Line(B, G)))
By perpendicular_line_definition on orthocenter(B, D, orthocenter(A, B, D)), f, Line(D, F) we get f == perpendicular_line(orthocenter(B, D, orthocenter(A, B, D)), Line(D, F))
By perpendicular_line_definition on orthocenter(B, D, orthocenter(A, B, D)), h, Line(B, G) we get h == perpendicular_line(orthocenter(B, D, orthocenter(A, B, D)), Line(B, G))
By perpendicular_line_definition on midpoint(B, G), Line(E, midpoint(B, G)), altitude(A, E, midpoint(B, G)) we get Line(E, midpoint(B, G)) == perpendicular_line(midpoint(B, G), altitude(A, E, midpoint(B, G)))
By perpendicular_line_definition on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), h, altitude(F, A, D) we get h == perpendicular_line(orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), altitude(F, A, D))
By perpendicular_line_definition on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), h, altitude(E, A, D) we get h == perpendicular_line(orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), altitude(E, A, D))
By perpendicular_line_definition on orthocenter(A, G, orthocenter(A, D, G)), Line(D, G), altitude(A, D, G) we get Line(D, G) == perpendicular_line(orthocenter(A, G, orthocenter(A, D, G)), altitude(A, D, G))
By perpendicular_line_definition on projection(A, Line(D, G)), altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)) we get altitude(A, D, G) == perpendicular_line(projection(A, Line(D, G)), altitude(midpoint(B, G), A, orthocenter(A, D, G)))
By perpendicular_line_definition on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), Line(B, G), perpendicular_line(E, Line(B, G)) we get Line(B, G) == perpendicular_line(orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), perpendicular_line(E, Line(B, G)))
By perpendicular_line_definition on orthocenter(A, F, orthocenter(A, B, D)), f, altitude(midpoint(B, G), A, B) we get f == perpendicular_line(orthocenter(A, F, orthocenter(A, B, D)), altitude(midpoint(B, G), A, B))
By perpendicular_line_definition on orthocenter(A, D, orthocenter(A, D, G)), g, altitude(midpoint(B, G), A, C) we get g == perpendicular_line(orthocenter(A, D, orthocenter(A, D, G)), altitude(midpoint(B, G), A, C))
By perpendicular_line_definition on orthocenter(A, D, G), Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G)) we get Line(C, orthocenter(A, D, G)) == perpendicular_line(orthocenter(A, D, G), altitude(E, C, orthocenter(A, D, G)))
By perpendicular_line_definition on orthocenter(B, D, orthocenter(A, B, D)), altitude(A, B, D), i we get altitude(A, B, D) == perpendicular_line(orthocenter(B, D, orthocenter(A, B, D)), i)
By perpendicular_line_definition on orthocenter(A, E, midpoint(B, G)), altitude(E, A, D), h we get altitude(E, A, D) == perpendicular_line(orthocenter(A, E, midpoint(B, G)), h)
By perpendicular_line_definition on orthocenter(D, G, orthocenter(A, D, G)), altitude(A, D, G), altitude(E, A, orthocenter(A, D, G)) we get altitude(A, D, G) == perpendicular_line(orthocenter(D, G, orthocenter(A, D, G)), altitude(E, A, orthocenter(A, D, G)))
By perpendicular_line_definition on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), Line(B, G), perpendicular_line(F, Line(B, G)) we get Line(B, G) == perpendicular_line(orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), perpendicular_line(F, Line(B, G)))
By perpendicular_line_definition on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), Line(B, G), perpendicular_line(F, Line(B, G)) we get Line(B, G) == perpendicular_line(orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), perpendicular_line(F, Line(B, G)))
By perpendicular_line_definition on projection(A, i), altitude(A, B, D), altitude(midpoint(B, G), A, orthocenter(A, B, D)) we get altitude(A, B, D) == perpendicular_line(projection(A, i), altitude(midpoint(B, G), A, orthocenter(A, B, D)))
By perpendicular_line_definition on orthocenter(A, B, D), Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D)) we get Line(I, orthocenter(A, B, D)) == perpendicular_line(orthocenter(A, B, D), altitude(midpoint(B, G), I, orthocenter(A, B, D)))
By perpendicular_line_definition on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), Line(B, G), perpendicular_line(E, Line(B, G)) we get Line(B, G) == perpendicular_line(orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), perpendicular_line(E, Line(B, G)))
By perpendicular_line_definition on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), Line(B, G), h we get Line(B, G) == perpendicular_line(orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), h)
By perpendicular_line_definition on E, Line(E, midpoint(B, G)), altitude(A, E, midpoint(B, G)) we get Line(E, midpoint(B, G)) == perpendicular_line(E, altitude(A, E, midpoint(B, G)))
By perpendicular_line_definition on B, Line(B, G), perpendicular_line(E, Line(B, G)) we get Line(B, G) == perpendicular_line(B, perpendicular_line(E, Line(B, G)))
By perpendicular_line_definition on orthocenter(A, E, midpoint(B, G)), altitude(midpoint(B, G), A, C), g we get altitude(midpoint(B, G), A, C) == perpendicular_line(orthocenter(A, E, midpoint(B, G)), g)
By median_definition on E, B, G, Line(E, midpoint(B, G)) we get median(E, B, G) == Line(E, midpoint(B, G))
By perpendicular_line_definition on midpoint(B, G), Line(B, G), perpendicular_line(F, Line(B, G)) we get Line(B, G) == perpendicular_line(midpoint(B, G), perpendicular_line(F, Line(B, G)))
By perpendicular_line_definition on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), perpendicular_line(midpoint(B, G), Line(D, E)), Line(D, E) we get perpendicular_line(midpoint(B, G), Line(D, E)) == perpendicular_line(orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), Line(D, E))
By perpendicular_line_definition on orthocenter(A, D, G), Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G)) we get Line(I, orthocenter(A, D, G)) == perpendicular_line(orthocenter(A, D, G), altitude(midpoint(B, G), I, orthocenter(A, D, G)))
By perpendicular_line_definition on orthocenter(E, G, orthocenter(A, D, G)), g, Line(D, E) we get g == perpendicular_line(orthocenter(E, G, orthocenter(A, D, G)), Line(D, E))
By perpendicular_line_definition on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), Line(B, G), perpendicular_line(F, Line(B, G)) we get Line(B, G) == perpendicular_line(orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), perpendicular_line(F, Line(B, G)))
By perpendicular_line_definition on midpoint(B, G), Line(B, G), perpendicular_line(E, Line(B, G)) we get Line(B, G) == perpendicular_line(midpoint(B, G), perpendicular_line(E, Line(B, G)))
By perpendicular_line_definition on orthocenter(A, D, orthocenter(A, D, G)), Line(B, G), perpendicular_line(E, Line(B, G)) we get Line(B, G) == perpendicular_line(orthocenter(A, D, orthocenter(A, D, G)), perpendicular_line(E, Line(B, G)))
By perpendicular_line_definition on orthocenter(A, D, G), altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)) we get altitude(A, D, G) == perpendicular_line(orthocenter(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)))
By perpendicular_line_definition on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), Line(B, G), perpendicular_line(F, Line(B, G)) we get Line(B, G) == perpendicular_line(orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), perpendicular_line(F, Line(B, G)))
By perpendicular_line_definition on B, Line(B, G), perpendicular_line(F, Line(B, G)) we get Line(B, G) == perpendicular_line(B, perpendicular_line(F, Line(B, G)))
By perpendicular_line_definition on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), h, altitude(E, A, D) we get h == perpendicular_line(orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), altitude(E, A, D))
By perpendicular_line_definition on orthocenter(A, E, orthocenter(A, D, G)), g, Line(D, E) we get g == perpendicular_line(orthocenter(A, E, orthocenter(A, D, G)), Line(D, E))
By perpendicular_line_definition on orthocenter(A, B, orthocenter(A, B, D)), Line(D, F), perpendicular_line(midpoint(B, G), Line(D, F)) we get Line(D, F) == perpendicular_line(orthocenter(A, B, orthocenter(A, B, D)), perpendicular_line(midpoint(B, G), Line(D, F)))
By perpendicular_line_definition on orthocenter(A, F, orthocenter(A, B, D)), altitude(F, A, orthocenter(A, B, D)), altitude(A, B, D) we get altitude(F, A, orthocenter(A, B, D)) == perpendicular_line(orthocenter(A, F, orthocenter(A, B, D)), altitude(A, B, D))
By perpendicular_line_definition on orthocenter(A, E, orthocenter(A, D, G)), altitude(E, A, orthocenter(A, D, G)), altitude(A, D, G) we get altitude(E, A, orthocenter(A, D, G)) == perpendicular_line(orthocenter(A, E, orthocenter(A, D, G)), altitude(A, D, G))
By perpendicular_line_definition on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), h, Line(B, G) we get h == perpendicular_line(orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), Line(B, G))
By perpendicular_line_definition on orthocenter(D, G, orthocenter(A, D, G)), g, altitude(midpoint(B, G), A, C) we get g == perpendicular_line(orthocenter(D, G, orthocenter(A, D, G)), altitude(midpoint(B, G), A, C))
By perpendicular_line_definition on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), h, altitude(E, A, D) we get h == perpendicular_line(orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), altitude(E, A, D))
By perpendicular_line_definition on orthocenter(A, B, orthocenter(A, B, D)), i, altitude(A, B, D) we get i == perpendicular_line(orthocenter(A, B, orthocenter(A, B, D)), altitude(A, B, D))
By perpendicular_line_definition on orthocenter(A, F, midpoint(B, G)), altitude(A, F, midpoint(B, G)), Line(F, midpoint(B, G)) we get altitude(A, F, midpoint(B, G)) == perpendicular_line(orthocenter(A, F, midpoint(B, G)), Line(F, midpoint(B, G)))
By perpendicular_line_definition on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), Line(B, G), perpendicular_line(E, Line(B, G)) we get Line(B, G) == perpendicular_line(orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), perpendicular_line(E, Line(B, G)))
By perpendicular_line_definition on orthocenter(C, E, orthocenter(A, D, G)), g, altitude(midpoint(B, G), A, C) we get g == perpendicular_line(orthocenter(C, E, orthocenter(A, D, G)), altitude(midpoint(B, G), A, C))
By perpendicular_line_definition on D, Line(D, F), perpendicular_line(midpoint(B, G), Line(D, F)) we get Line(D, F) == perpendicular_line(D, perpendicular_line(midpoint(B, G), Line(D, F)))
By perpendicular_line_definition on orthocenter(B, D, orthocenter(A, B, D)), altitude(A, B, D), altitude(F, A, orthocenter(A, B, D)) we get altitude(A, B, D) == perpendicular_line(orthocenter(B, D, orthocenter(A, B, D)), altitude(F, A, orthocenter(A, B, D)))
By perpendicular_line_definition on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D)), Line(I, orthocenter(A, B, D)) we get altitude(midpoint(B, G), I, orthocenter(A, B, D)) == perpendicular_line(orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), Line(I, orthocenter(A, B, D)))
By perpendicular_line_definition on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), Line(B, G), h we get Line(B, G) == perpendicular_line(orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), h)
By perpendicular_line_definition on orthocenter(B, D, orthocenter(A, B, D)), altitude(A, B, D), altitude(midpoint(B, G), A, orthocenter(A, B, D)) we get altitude(A, B, D) == perpendicular_line(orthocenter(B, D, orthocenter(A, B, D)), altitude(midpoint(B, G), A, orthocenter(A, B, D)))
By perpendicular_line_definition on orthocenter(A, F, orthocenter(A, B, D)), Line(D, F), f we get Line(D, F) == perpendicular_line(orthocenter(A, F, orthocenter(A, B, D)), f)
By perpendicular_line_definition on orthocenter(F, H, orthocenter(A, B, D)), f, Line(D, F) we get f == perpendicular_line(orthocenter(F, H, orthocenter(A, B, D)), Line(D, F))
By perpendicular_line_definition on F, Line(D, F), perpendicular_line(midpoint(B, G), Line(D, F)) we get Line(D, F) == perpendicular_line(F, perpendicular_line(midpoint(B, G), Line(D, F)))
By perpendicular_line_definition on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), Line(B, G), perpendicular_line(F, Line(B, G)) we get Line(B, G) == perpendicular_line(orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), perpendicular_line(F, Line(B, G)))
By perpendicular_line_definition on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G)), Line(I, orthocenter(A, D, G)) we get altitude(midpoint(B, G), I, orthocenter(A, D, G)) == perpendicular_line(orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), Line(I, orthocenter(A, D, G)))
By perpendicular_line_definition on G, Line(B, G), perpendicular_line(F, Line(B, G)) we get Line(B, G) == perpendicular_line(G, perpendicular_line(F, Line(B, G)))
By perpendicular_line_definition on orthocenter(D, G, orthocenter(A, D, G)), h, Line(B, G) we get h == perpendicular_line(orthocenter(D, G, orthocenter(A, D, G)), Line(B, G))
By perpendicular_line_definition on orthocenter(D, G, orthocenter(A, D, G)), h, altitude(F, A, D) we get h == perpendicular_line(orthocenter(D, G, orthocenter(A, D, G)), altitude(F, A, D))
By perpendicular_line_definition on midpoint(B, G), Line(F, midpoint(B, G)), altitude(A, F, midpoint(B, G)) we get Line(F, midpoint(B, G)) == perpendicular_line(midpoint(B, G), altitude(A, F, midpoint(B, G)))
By perpendicular_line_definition on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), h, altitude(E, A, D) we get h == perpendicular_line(orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), altitude(E, A, D))
By perpendicular_line_definition on orthocenter(A, D, orthocenter(A, B, D)), Line(B, G), perpendicular_line(E, Line(B, G)) we get Line(B, G) == perpendicular_line(orthocenter(A, D, orthocenter(A, B, D)), perpendicular_line(E, Line(B, G)))
By line_unique_intersection_v0 on h, Line(B, G), orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), orthocenter(I, midpoint(B, G), orthocenter(A, D, G)) we get orthocenter(A, midpoint(B, G), orthocenter(A, D, G)) == orthocenter(I, midpoint(B, G), orthocenter(A, D, G))
By perpendicular_line_definition on orthocenter(A, G, orthocenter(A, D, G)), h, altitude(F, A, D) we get h == perpendicular_line(orthocenter(A, G, orthocenter(A, D, G)), altitude(F, A, D))
By concurrent_sufficient_conditions on altitude(A, D, G), altitude(A, B, D), h we get concurrent(h, altitude(A, B, D), altitude(A, D, G))
By concurrent_sufficient_conditions on altitude(A, D, G), altitude(A, B, D), f we get concurrent(f, altitude(A, B, D), altitude(A, D, G))
By perpendicular_line_definition on orthocenter(A, D, orthocenter(A, D, G)), Line(D, G), altitude(E, D, G) we get Line(D, G) == perpendicular_line(orthocenter(A, D, orthocenter(A, D, G)), altitude(E, D, G))
By perpendicular_line_definition on orthocenter(A, F, orthocenter(A, B, D)), f, Line(D, F) we get f == perpendicular_line(orthocenter(A, F, orthocenter(A, B, D)), Line(D, F))
By perpendicular_line_definition on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), h, altitude(F, A, D) we get h == perpendicular_line(orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), altitude(F, A, D))
By perpendicular_line_definition on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), Line(B, G), perpendicular_line(F, Line(B, G)) we get Line(B, G) == perpendicular_line(orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), perpendicular_line(F, Line(B, G)))
By line_unique_intersection_v0 on Line(D, F), f, orthocenter(F, H, orthocenter(A, B, D)), F we get F == orthocenter(F, H, orthocenter(A, B, D))
By line_unique_intersection_v0 on Line(B, G), h, orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), orthocenter(A, midpoint(B, G), orthocenter(A, B, D)) we get orthocenter(A, midpoint(B, G), orthocenter(A, B, D)) == orthocenter(I, midpoint(B, G), orthocenter(A, B, D))
By line_unique_intersection_v0 on h, Line(D, F), D, orthocenter(A, B, orthocenter(A, B, D)) we get D == orthocenter(A, B, orthocenter(A, B, D))
By line_unique_intersection_v0 on Line(B, G), h, orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), orthocenter(A, midpoint(B, G), orthocenter(A, D, G)) we get orthocenter(A, midpoint(B, G), orthocenter(A, D, G)) == orthocenter(D, midpoint(B, G), orthocenter(A, B, D))
By line_unique_intersection_v0 on g, Line(B, G), orthocenter(A, D, orthocenter(A, D, G)), G we get G == orthocenter(A, D, orthocenter(A, D, G))
By line_unique_intersection_v0 on Line(B, G), h, orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), orthocenter(D, midpoint(B, G), orthocenter(A, B, D)) we get orthocenter(D, midpoint(B, G), orthocenter(A, B, D)) == orthocenter(I, midpoint(B, G), orthocenter(A, B, D))
By line_unique_intersection_v0 on altitude(A, B, D), f, A, orthocenter(B, D, orthocenter(A, B, D)) we get A == orthocenter(B, D, orthocenter(A, B, D))
By line_unique_intersection_v0 on g, Line(D, E), orthocenter(C, E, orthocenter(A, D, G)), orthocenter(E, G, orthocenter(A, D, G)) we get orthocenter(C, E, orthocenter(A, D, G)) == orthocenter(E, G, orthocenter(A, D, G))
By line_unique_intersection_v0 on g, Line(D, E), orthocenter(A, E, orthocenter(A, D, G)), orthocenter(C, E, orthocenter(A, D, G)) we get orthocenter(A, E, orthocenter(A, D, G)) == orthocenter(C, E, orthocenter(A, D, G))
By line_unique_intersection_v0 on g, Line(D, E), orthocenter(C, E, orthocenter(A, D, G)), E we get E == orthocenter(C, E, orthocenter(A, D, G))
By line_unique_intersection_v0 on i, Line(B, G), B, orthocenter(A, D, orthocenter(A, B, D)) we get B == orthocenter(A, D, orthocenter(A, B, D))
By line_unique_intersection_v0 on h, Line(B, G), orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), orthocenter(I, midpoint(B, G), orthocenter(A, B, D)) we get orthocenter(I, midpoint(B, G), orthocenter(A, B, D)) == orthocenter(I, midpoint(B, G), orthocenter(A, D, G))
By line_unique_intersection_v0 on g, Line(D, E), orthocenter(E, G, orthocenter(A, D, G)), E we get E == orthocenter(E, G, orthocenter(A, D, G))
By line_unique_intersection_v0 on f, Line(D, F), F, orthocenter(B, F, orthocenter(A, B, D)) we get F == orthocenter(B, F, orthocenter(A, B, D))
By line_unique_intersection_v0 on Line(B, G), h, orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), orthocenter(D, midpoint(B, G), orthocenter(A, D, G)) we get orthocenter(A, midpoint(B, G), orthocenter(A, B, D)) == orthocenter(D, midpoint(B, G), orthocenter(A, D, G))
By line_unique_intersection_v0 on f, Line(D, F), orthocenter(A, F, orthocenter(A, B, D)), F we get F == orthocenter(A, F, orthocenter(A, B, D))
By line_unique_intersection_v0 on f, Line(D, F), orthocenter(A, F, orthocenter(A, B, D)), orthocenter(B, F, orthocenter(A, B, D)) we get orthocenter(A, F, orthocenter(A, B, D)) == orthocenter(B, F, orthocenter(A, B, D))
By line_unique_intersection_v0 on Line(B, G), h, orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), orthocenter(I, midpoint(B, G), orthocenter(A, B, D)) we get orthocenter(A, midpoint(B, G), orthocenter(A, D, G)) == orthocenter(I, midpoint(B, G), orthocenter(A, B, D))
By line_unique_intersection_v0 on h, Line(B, G), orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), orthocenter(D, midpoint(B, G), orthocenter(A, B, D)) we get orthocenter(D, midpoint(B, G), orthocenter(A, B, D)) == orthocenter(D, midpoint(B, G), orthocenter(A, D, G))
By line_unique_intersection_v0 on h, Line(B, G), orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), midpoint(B, G) we get midpoint(B, G) == orthocenter(D, midpoint(B, G), orthocenter(A, B, D))
By line_unique_intersection_v0 on Line(B, G), h, orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), orthocenter(A, midpoint(B, G), orthocenter(A, D, G)) we get orthocenter(A, midpoint(B, G), orthocenter(A, D, G)) == orthocenter(D, midpoint(B, G), orthocenter(A, D, G))
By line_unique_intersection_v0 on Line(B, G), h, orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), midpoint(B, G) we get midpoint(B, G) == orthocenter(A, midpoint(B, G), orthocenter(A, B, D))
By line_unique_intersection_v0 on h, Line(B, G), orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), orthocenter(I, midpoint(B, G), orthocenter(A, B, D)) we get orthocenter(D, midpoint(B, G), orthocenter(A, D, G)) == orthocenter(I, midpoint(B, G), orthocenter(A, B, D))
By line_unique_intersection_v0 on Line(B, G), h, orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), midpoint(B, G) we get midpoint(B, G) == orthocenter(I, midpoint(B, G), orthocenter(A, D, G))
By line_unique_intersection_v0 on h, Line(B, G), orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), midpoint(B, G) we get midpoint(B, G) == orthocenter(I, midpoint(B, G), orthocenter(A, B, D))
By line_unique_intersection_v0 on h, Line(B, G), orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), orthocenter(A, midpoint(B, G), orthocenter(A, D, G)) we get orthocenter(A, midpoint(B, G), orthocenter(A, B, D)) == orthocenter(A, midpoint(B, G), orthocenter(A, D, G))
By line_unique_intersection_v0 on Line(B, G), h, orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), orthocenter(I, midpoint(B, G), orthocenter(A, D, G)) we get orthocenter(D, midpoint(B, G), orthocenter(A, B, D)) == orthocenter(I, midpoint(B, G), orthocenter(A, D, G))
By line_unique_intersection_v0 on g, Line(D, E), orthocenter(E, G, orthocenter(A, D, G)), orthocenter(A, E, orthocenter(A, D, G)) we get orthocenter(A, E, orthocenter(A, D, G)) == orthocenter(E, G, orthocenter(A, D, G))
By line_unique_intersection_v0 on Line(D, E), g, orthocenter(A, E, orthocenter(A, D, G)), E we get E == orthocenter(A, E, orthocenter(A, D, G))
By line_unique_intersection_v0 on Line(B, G), h, midpoint(B, G), orthocenter(D, midpoint(B, G), orthocenter(A, D, G)) we get midpoint(B, G) == orthocenter(D, midpoint(B, G), orthocenter(A, D, G))
By line_unique_intersection_v0 on Line(B, G), h, midpoint(B, G), orthocenter(A, midpoint(B, G), orthocenter(A, D, G)) we get midpoint(B, G) == orthocenter(A, midpoint(B, G), orthocenter(A, D, G))
By line_unique_intersection_v0 on h, Line(B, G), orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), orthocenter(I, midpoint(B, G), orthocenter(A, D, G)) we get orthocenter(D, midpoint(B, G), orthocenter(A, D, G)) == orthocenter(I, midpoint(B, G), orthocenter(A, D, G))
By line_unique_intersection_v0 on Line(B, G), h, orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), orthocenter(I, midpoint(B, G), orthocenter(A, D, G)) we get orthocenter(A, midpoint(B, G), orthocenter(A, B, D)) == orthocenter(I, midpoint(B, G), orthocenter(A, D, G))
By line_unique_intersection_v0 on h, Line(B, G), orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), orthocenter(D, midpoint(B, G), orthocenter(A, B, D)) we get orthocenter(A, midpoint(B, G), orthocenter(A, B, D)) == orthocenter(D, midpoint(B, G), orthocenter(A, B, D))
By line_unique_intersection_v0 on Line(D, F), f, orthocenter(A, F, orthocenter(A, B, D)), orthocenter(F, H, orthocenter(A, B, D)) we get orthocenter(A, F, orthocenter(A, B, D)) == orthocenter(F, H, orthocenter(A, B, D))
By line_unique_intersection_v1 on altitude(A, B, D), altitude(A, D, G), A, projection(A, Line(D, G)) we get projection(A, Line(D, G)) not in altitude(A, B, D)
By line_unique_intersection_v1 on altitude(A, D, G), altitude(A, B, D), A, projection(A, i) we get projection(A, i) not in altitude(A, D, G)
By parallel_line_definition on orthocenter(A, E, midpoint(B, G)), altitude(E, A, D), Line(B, G) we get altitude(E, A, D) == parallel_line(orthocenter(A, E, midpoint(B, G)), Line(B, G))
By parallel_line_definition on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), Line(B, G), altitude(E, A, D) we get Line(B, G) == parallel_line(orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), altitude(E, A, D))
By parallel_line_definition on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), Line(B, G), altitude(F, A, D) we get Line(B, G) == parallel_line(orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), altitude(F, A, D))
By parallel_line_definition on orthocenter(A, G, orthocenter(A, D, G)), Line(D, E), altitude(midpoint(B, G), A, C) we get Line(D, E) == parallel_line(orthocenter(A, G, orthocenter(A, D, G)), altitude(midpoint(B, G), A, C))
By parallel_line_definition on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), Line(B, G), altitude(E, A, D) we get Line(B, G) == parallel_line(orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), altitude(E, A, D))
By parallel_line_definition on orthocenter(A, F, orthocenter(A, B, D)), Line(D, F), altitude(midpoint(B, G), A, B) we get Line(D, F) == parallel_line(orthocenter(A, F, orthocenter(A, B, D)), altitude(midpoint(B, G), A, B))
By parallel_line_definition on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), Line(B, G), altitude(E, A, D) we get Line(B, G) == parallel_line(orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), altitude(E, A, D))
By parallel_line_definition on orthocenter(A, E, midpoint(B, G)), altitude(midpoint(B, G), A, C), Line(D, E) we get altitude(midpoint(B, G), A, C) == parallel_line(orthocenter(A, E, midpoint(B, G)), Line(D, E))
By parallel_line_definition on orthocenter(A, D, orthocenter(A, D, G)), Line(B, G), altitude(F, A, D) we get Line(B, G) == parallel_line(orthocenter(A, D, orthocenter(A, D, G)), altitude(F, A, D))
By parallel_line_definition on orthocenter(F, H, orthocenter(A, B, D)), Line(D, F), altitude(midpoint(B, G), A, B) we get Line(D, F) == parallel_line(orthocenter(F, H, orthocenter(A, B, D)), altitude(midpoint(B, G), A, B))
By parallel_line_definition on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), Line(B, G), altitude(F, A, D) we get Line(B, G) == parallel_line(orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), altitude(F, A, D))
By parallel_line_definition on orthocenter(A, F, midpoint(B, G)), altitude(midpoint(B, G), A, B), Line(D, F) we get altitude(midpoint(B, G), A, B) == parallel_line(orthocenter(A, F, midpoint(B, G)), Line(D, F))
By parallel_line_definition on orthocenter(A, B, orthocenter(A, B, D)), Line(D, F), altitude(midpoint(B, G), A, B) we get Line(D, F) == parallel_line(orthocenter(A, B, orthocenter(A, B, D)), altitude(midpoint(B, G), A, B))
By parallel_line_definition on orthocenter(C, E, orthocenter(A, D, G)), Line(D, E), altitude(midpoint(B, G), A, C) we get Line(D, E) == parallel_line(orthocenter(C, E, orthocenter(A, D, G)), altitude(midpoint(B, G), A, C))
By parallel_line_definition on orthocenter(A, F, midpoint(B, G)), altitude(F, A, D), altitude(E, A, D) we get altitude(F, A, D) == parallel_line(orthocenter(A, F, midpoint(B, G)), altitude(E, A, D))
By parallel_line_definition on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), Line(B, G), altitude(E, A, D) we get Line(B, G) == parallel_line(orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), altitude(E, A, D))
By parallel_line_definition on orthocenter(A, F, midpoint(B, G)), altitude(F, A, D), Line(B, G) we get altitude(F, A, D) == parallel_line(orthocenter(A, F, midpoint(B, G)), Line(B, G))
By parallel_line_definition on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), Line(B, G), altitude(E, A, D) we get Line(B, G) == parallel_line(orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), altitude(E, A, D))
By parallel_line_definition on orthocenter(E, G, orthocenter(A, D, G)), Line(D, E), altitude(midpoint(B, G), A, C) we get Line(D, E) == parallel_line(orthocenter(E, G, orthocenter(A, D, G)), altitude(midpoint(B, G), A, C))
By parallel_line_definition on orthocenter(A, E, midpoint(B, G)), altitude(E, A, D), altitude(F, A, D) we get altitude(E, A, D) == parallel_line(orthocenter(A, E, midpoint(B, G)), altitude(F, A, D))
By parallel_line_definition on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), Line(B, G), altitude(F, A, D) we get Line(B, G) == parallel_line(orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), altitude(F, A, D))
By parallel_line_definition on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), Line(B, G), altitude(E, A, D) we get Line(B, G) == parallel_line(orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), altitude(E, A, D))
By parallel_line_definition on orthocenter(A, D, orthocenter(A, B, D)), Line(B, G), altitude(F, A, D) we get Line(B, G) == parallel_line(orthocenter(A, D, orthocenter(A, B, D)), altitude(F, A, D))
By parallel_line_definition on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), Line(B, G), altitude(F, A, D) we get Line(B, G) == parallel_line(orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), altitude(F, A, D))
By parallel_line_definition on orthocenter(D, G, orthocenter(A, D, G)), altitude(A, D, G), altitude(E, D, G) we get altitude(A, D, G) == parallel_line(orthocenter(D, G, orthocenter(A, D, G)), altitude(E, D, G))
By parallel_line_definition on orthocenter(A, D, orthocenter(A, B, D)), Line(B, G), altitude(E, A, D) we get Line(B, G) == parallel_line(orthocenter(A, D, orthocenter(A, B, D)), altitude(E, A, D))
By parallel_line_definition on orthocenter(A, D, orthocenter(A, D, G)), Line(B, G), altitude(E, A, D) we get Line(B, G) == parallel_line(orthocenter(A, D, orthocenter(A, D, G)), altitude(E, A, D))
By parallel_line_definition on orthocenter(D, G, orthocenter(A, D, G)), altitude(A, D, G), altitude(midpoint(B, G), D, G) we get altitude(A, D, G) == parallel_line(orthocenter(D, G, orthocenter(A, D, G)), altitude(midpoint(B, G), D, G))
By parallel_line_definition on orthocenter(B, D, orthocenter(A, B, D)), altitude(A, B, D), altitude(midpoint(B, G), B, D) we get altitude(A, B, D) == parallel_line(orthocenter(B, D, orthocenter(A, B, D)), altitude(midpoint(B, G), B, D))
By parallel_line_definition on orthocenter(A, E, orthocenter(A, D, G)), Line(D, E), altitude(midpoint(B, G), A, C) we get Line(D, E) == parallel_line(orthocenter(A, E, orthocenter(A, D, G)), altitude(midpoint(B, G), A, C))
By parallel_line_definition on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), Line(B, G), altitude(F, A, D) we get Line(B, G) == parallel_line(orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), altitude(F, A, D))
By parallel_line_definition on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), Line(B, G), altitude(F, A, D) we get Line(B, G) == parallel_line(orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), altitude(F, A, D))
By parallel_line_definition on orthocenter(B, F, orthocenter(A, B, D)), Line(D, F), altitude(midpoint(B, G), A, B) we get Line(D, F) == parallel_line(orthocenter(B, F, orthocenter(A, B, D)), altitude(midpoint(B, G), A, B))
By parallel_line_definition on orthocenter(B, D, orthocenter(A, B, D)), altitude(A, B, D), altitude(F, B, D) we get altitude(A, B, D) == parallel_line(orthocenter(B, D, orthocenter(A, B, D)), altitude(F, B, D))
By different_points_v1 on F, midpoint(B, G) we get 0 != distance(F, midpoint(B, G))
By different_points_v1 on I, orthocenter(A, D, G) we get 0 != distance(I, orthocenter(A, D, G))
By different_points_v1 on orthocenter(A, B, D), I we get 0 != distance(I, orthocenter(A, B, D))
By different_points_v1 on E, midpoint(B, G) we get 0 != distance(E, midpoint(B, G))
By different_points_v1 on H, orthocenter(A, B, D) we get 0 != distance(H, orthocenter(A, B, D))
By different_points_v1 on C, orthocenter(A, D, G) we get 0 != distance(C, orthocenter(A, D, G))
By in_imply_collinear on orthocenter(B, D, orthocenter(A, B, D)), I, A we get collinear(A, I, orthocenter(B, D, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), A, midpoint(B, G) we get collinear(A, midpoint(B, G), orthocenter(A, midpoint(B, G), orthocenter(A, B, D)))
By orthocenter_concurrency on D, A, projection(A, Line(D, G)) we get orthocenter(A, D, projection(A, Line(D, G))) in altitude(D, A, projection(A, Line(D, G))), orthocenter(A, D, projection(A, Line(D, G))) in altitude(A, D, projection(A, Line(D, G))), orthocenter(A, D, projection(A, Line(D, G))) in altitude(projection(A, Line(D, G)), A, D)
By in_imply_collinear on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), midpoint(B, G), orthocenter(A, D, G) we get collinear(midpoint(B, G), orthocenter(A, D, G), orthocenter(D, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, F, orthocenter(A, B, D)), F, D we get collinear(D, F, orthocenter(A, F, orthocenter(A, B, D)))
By orthocenter_concurrency on D, A, projection(A, i) we get orthocenter(A, D, projection(A, i)) in altitude(D, A, projection(A, i)), orthocenter(A, D, projection(A, i)) in altitude(A, D, projection(A, i)), orthocenter(A, D, projection(A, i)) in altitude(projection(A, i), A, D)
By in_imply_collinear on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), orthocenter(A, D, G), midpoint(B, G) we get collinear(midpoint(B, G), orthocenter(A, D, G), orthocenter(D, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), I, A we get collinear(A, I, orthocenter(A, midpoint(B, G), orthocenter(A, D, G)))
By point_on_perpendicular_bisector on G, B, orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), h we get distance(B, orthocenter(D, midpoint(B, G), orthocenter(A, B, D))) == distance(G, orthocenter(D, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), orthocenter(A, B, D), midpoint(B, G) we get collinear(midpoint(B, G), orthocenter(A, B, D), orthocenter(A, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, D, G)), projection(A, Line(D, G)), D we get collinear(D, projection(A, Line(D, G)), orthocenter(A, D, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(E, G, orthocenter(A, D, G)), orthocenter(A, D, G), E we get collinear(E, orthocenter(A, D, G), orthocenter(E, G, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, B, orthocenter(A, B, D)), projection(A, i), B we get collinear(B, projection(A, i), orthocenter(A, B, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, F, midpoint(B, G)), F, projection(F, h) we get collinear(F, projection(F, h), orthocenter(A, F, midpoint(B, G)))
By in_imply_collinear on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), D, A we get collinear(A, D, orthocenter(I, midpoint(B, G), orthocenter(A, B, D)))
By orthocenter_concurrency on A, B, projection(A, i) we get orthocenter(A, B, projection(A, i)) in altitude(A, B, projection(A, i)), orthocenter(A, B, projection(A, i)) in altitude(B, A, projection(A, i)), orthocenter(A, B, projection(A, i)) in altitude(projection(A, i), A, B)
By in_imply_collinear on orthocenter(B, D, orthocenter(A, B, D)), B, F we get collinear(B, F, orthocenter(B, D, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, G, orthocenter(A, D, G)), D, projection(A, Line(D, G)) we get collinear(D, projection(A, Line(D, G)), orthocenter(A, G, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(E, G, orthocenter(A, D, G)), C, E we get collinear(C, E, orthocenter(E, G, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, E, orthocenter(A, D, G)), D, E we get collinear(D, E, orthocenter(A, E, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, B, D)), projection(A, i), B we get collinear(B, projection(A, i), orthocenter(A, D, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), D, A we get collinear(A, D, orthocenter(D, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, D, G)), D, G we get collinear(D, G, orthocenter(A, D, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(F, H, orthocenter(A, B, D)), orthocenter(A, B, D), D we get collinear(D, orthocenter(A, B, D), orthocenter(F, H, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(B, D, orthocenter(A, B, D)), projection(A, i), orthocenter(A, B, D) we get collinear(projection(A, i), orthocenter(A, B, D), orthocenter(B, D, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, D, G)), orthocenter(A, D, G), B we get collinear(B, orthocenter(A, D, G), orthocenter(A, D, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), orthocenter(A, D, G), B we get collinear(B, orthocenter(A, D, G), orthocenter(I, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), orthocenter(A, B, D), B we get collinear(B, orthocenter(A, B, D), orthocenter(D, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), I, D we get collinear(D, I, orthocenter(I, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, B, D)), B, A we get collinear(A, B, orthocenter(A, D, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), I, A we get collinear(A, I, orthocenter(D, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(D, G, orthocenter(A, D, G)), E, G we get collinear(E, G, orthocenter(D, G, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), orthocenter(A, B, D), midpoint(B, G) we get collinear(midpoint(B, G), orthocenter(A, B, D), orthocenter(D, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), midpoint(B, G), D we get collinear(D, midpoint(B, G), orthocenter(A, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, B, D)), orthocenter(A, D, G), G we get collinear(G, orthocenter(A, D, G), orthocenter(A, D, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), D, I we get collinear(D, I, orthocenter(I, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, D, G)), G, E we get collinear(E, G, orthocenter(A, D, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), orthocenter(A, B, D), G we get collinear(G, orthocenter(A, B, D), orthocenter(I, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), G, B we get collinear(B, G, orthocenter(D, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, E, midpoint(B, G)), E, projection(E, h) we get collinear(E, projection(E, h), orthocenter(A, E, midpoint(B, G)))
By orthocenter_concurrency on A, G, projection(A, Line(D, G)) we get orthocenter(A, G, projection(A, Line(D, G))) in altitude(A, G, projection(A, Line(D, G))), orthocenter(A, G, projection(A, Line(D, G))) in altitude(G, A, projection(A, Line(D, G))), orthocenter(A, G, projection(A, Line(D, G))) in altitude(projection(A, Line(D, G)), A, G)
By in_imply_collinear on orthocenter(E, G, orthocenter(A, D, G)), A, G we get collinear(A, G, orthocenter(E, G, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, B, orthocenter(A, B, D)), I, midpoint(B, G) we get collinear(I, midpoint(B, G), orthocenter(A, B, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(F, H, orthocenter(A, B, D)), H, F we get collinear(F, H, orthocenter(F, H, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(B, D, orthocenter(A, B, D)), A, orthocenter(A, B, D) we get collinear(A, orthocenter(A, B, D), orthocenter(B, D, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(D, G, orthocenter(A, D, G)), I, D we get collinear(D, I, orthocenter(D, G, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), B, G we get collinear(B, G, orthocenter(A, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(B, F, orthocenter(A, B, D)), A, H we get collinear(A, H, orthocenter(B, F, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, F, orthocenter(A, B, D)), F, B we get collinear(B, F, orthocenter(A, F, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), orthocenter(A, B, D), B we get collinear(B, orthocenter(A, B, D), orthocenter(A, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(F, H, orthocenter(A, B, D)), H, B we get collinear(B, H, orthocenter(F, H, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(C, E, orthocenter(A, D, G)), C, A we get collinear(A, C, orthocenter(C, E, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, E, orthocenter(A, D, G)), C, E we get collinear(C, E, orthocenter(A, E, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), midpoint(B, G), I we get collinear(I, midpoint(B, G), orthocenter(A, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(D, G, orthocenter(A, D, G)), D, A we get collinear(A, D, orthocenter(D, G, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(B, D, orthocenter(A, B, D)), H, F we get collinear(F, H, orthocenter(B, D, orthocenter(A, B, D)))
By not_in_line_equivalent_to_not_collinear_v0_r on orthocenter(A, B, D), orthocenter(A, D, G), C we get orthocenter(A, B, D) not in Line(C, orthocenter(A, D, G))
By in_imply_collinear on orthocenter(B, D, orthocenter(A, B, D)), B, H we get collinear(B, H, orthocenter(B, D, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), D, I we get collinear(D, I, orthocenter(D, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, F, orthocenter(A, B, D)), B, A we get collinear(A, B, orthocenter(A, F, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, B, orthocenter(A, B, D)), projection(A, i), D we get collinear(D, projection(A, i), orthocenter(A, B, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(B, F, orthocenter(A, B, D)), F, B we get collinear(B, F, orthocenter(B, F, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), A, midpoint(B, G) we get collinear(A, midpoint(B, G), orthocenter(D, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), midpoint(B, G), A we get collinear(A, midpoint(B, G), orthocenter(I, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, E, orthocenter(A, D, G)), C, G we get collinear(C, G, orthocenter(A, E, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), D, midpoint(B, G) we get collinear(D, midpoint(B, G), orthocenter(I, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), B, midpoint(B, G) we get collinear(B, midpoint(B, G), orthocenter(I, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), midpoint(B, G), G we get collinear(G, midpoint(B, G), orthocenter(D, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(B, D, orthocenter(A, B, D)), H, A we get collinear(A, H, orthocenter(B, D, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), I, midpoint(B, G) we get collinear(I, midpoint(B, G), orthocenter(I, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), orthocenter(A, B, D), B we get collinear(B, orthocenter(A, B, D), orthocenter(I, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(E, G, orthocenter(A, D, G)), E, A we get collinear(A, E, orthocenter(E, G, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, G, orthocenter(A, D, G)), A, I we get collinear(A, I, orthocenter(A, G, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), I, midpoint(B, G) we get collinear(I, midpoint(B, G), orthocenter(A, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), midpoint(B, G), orthocenter(A, D, G) we get collinear(midpoint(B, G), orthocenter(A, D, G), orthocenter(A, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(D, G, orthocenter(A, D, G)), C, A we get collinear(A, C, orthocenter(D, G, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), orthocenter(A, B, D), orthocenter(A, D, G) we get collinear(orthocenter(A, B, D), orthocenter(A, D, G), orthocenter(A, midpoint(B, G), orthocenter(A, B, D)))
By line_inequality on altitude(A, E, midpoint(B, G)), Line(D, F), A we get Line(D, F) != altitude(A, E, midpoint(B, G))
By in_imply_collinear on orthocenter(C, E, orthocenter(A, D, G)), C, G we get collinear(C, G, orthocenter(C, E, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, B, orthocenter(A, B, D)), D, B we get collinear(B, D, orthocenter(A, B, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), G, orthocenter(A, D, G) we get collinear(G, orthocenter(A, D, G), orthocenter(A, midpoint(B, G), orthocenter(A, D, G)))
By point_on_perpendicular_bisector on G, B, orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), h we get distance(B, orthocenter(I, midpoint(B, G), orthocenter(A, D, G))) == distance(G, orthocenter(I, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(E, G, orthocenter(A, D, G)), E, D we get collinear(D, E, orthocenter(E, G, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(F, H, orthocenter(A, B, D)), F, B we get collinear(B, F, orthocenter(F, H, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(D, G, orthocenter(A, D, G)), I, midpoint(B, G) we get collinear(I, midpoint(B, G), orthocenter(D, G, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(B, D, orthocenter(A, B, D)), D, midpoint(B, G) we get collinear(D, midpoint(B, G), orthocenter(B, D, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, F, orthocenter(A, B, D)), H, F we get collinear(F, H, orthocenter(A, F, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, B, D)), B, H we get collinear(B, H, orthocenter(A, D, orthocenter(A, B, D)))
By line_inequality on perpendicular_line(F, Line(B, G)), g, F we get g != perpendicular_line(F, Line(B, G))
By in_imply_collinear on orthocenter(A, G, orthocenter(A, D, G)), G, D we get collinear(D, G, orthocenter(A, G, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, F, orthocenter(A, B, D)), A, H we get collinear(A, H, orthocenter(A, F, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, G, orthocenter(A, D, G)), midpoint(B, G), A we get collinear(A, midpoint(B, G), orthocenter(A, G, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, D, G)), orthocenter(A, D, G), G we get collinear(G, orthocenter(A, D, G), orthocenter(A, D, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), orthocenter(A, D, G), G we get collinear(G, orthocenter(A, D, G), orthocenter(D, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, F, orthocenter(A, B, D)), F, A we get collinear(A, F, orthocenter(A, F, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), orthocenter(A, D, G), B we get collinear(B, orthocenter(A, D, G), orthocenter(D, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), D, I we get collinear(D, I, orthocenter(D, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(D, G, orthocenter(A, D, G)), C, G we get collinear(C, G, orthocenter(D, G, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), midpoint(B, G), A we get collinear(A, midpoint(B, G), orthocenter(D, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, B, D)), orthocenter(A, D, G), orthocenter(A, B, D) we get collinear(orthocenter(A, B, D), orthocenter(A, D, G), orthocenter(A, D, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), midpoint(B, G), A we get collinear(A, midpoint(B, G), orthocenter(A, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, D, G)), A, E we get collinear(A, E, orthocenter(A, D, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), I, midpoint(B, G) we get collinear(I, midpoint(B, G), orthocenter(D, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), G, orthocenter(A, D, G) we get collinear(G, orthocenter(A, D, G), orthocenter(A, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(B, D, orthocenter(A, B, D)), B, A we get collinear(A, B, orthocenter(B, D, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), D, midpoint(B, G) we get collinear(D, midpoint(B, G), orthocenter(I, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, B, orthocenter(A, B, D)), F, D we get collinear(D, F, orthocenter(A, B, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), orthocenter(A, D, G), orthocenter(A, B, D) we get collinear(orthocenter(A, B, D), orthocenter(A, D, G), orthocenter(A, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, B, D)), F, H we get collinear(F, H, orthocenter(A, D, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, D, G)), orthocenter(A, B, D), G we get collinear(G, orthocenter(A, B, D), orthocenter(A, D, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), orthocenter(A, D, G), G we get collinear(G, orthocenter(A, D, G), orthocenter(I, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), D, midpoint(B, G) we get collinear(D, midpoint(B, G), orthocenter(D, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(F, H, orthocenter(A, B, D)), F, orthocenter(A, B, D) we get collinear(F, orthocenter(A, B, D), orthocenter(F, H, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, G, orthocenter(A, D, G)), D, I we get collinear(D, I, orthocenter(A, G, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), orthocenter(A, D, G), midpoint(B, G) we get collinear(midpoint(B, G), orthocenter(A, D, G), orthocenter(I, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), A, I we get collinear(A, I, orthocenter(A, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), D, midpoint(B, G) we get collinear(D, midpoint(B, G), orthocenter(D, midpoint(B, G), orthocenter(A, D, G)))
By line_inequality on altitude(E, A, orthocenter(A, D, G)), Line(D, F), E we get Line(D, F) != altitude(E, A, orthocenter(A, D, G))
By in_imply_collinear on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), orthocenter(A, B, D), B we get collinear(B, orthocenter(A, B, D), orthocenter(A, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), I, D we get collinear(D, I, orthocenter(A, midpoint(B, G), orthocenter(A, B, D)))
By point_on_perpendicular_bisector on G, B, orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), h we get distance(B, orthocenter(D, midpoint(B, G), orthocenter(A, D, G))) == distance(G, orthocenter(D, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, F, orthocenter(A, B, D)), orthocenter(A, B, D), D we get collinear(D, orthocenter(A, B, D), orthocenter(A, F, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(B, D, orthocenter(A, B, D)), A, F we get collinear(A, F, orthocenter(B, D, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), B, G we get collinear(B, G, orthocenter(A, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), D, A we get collinear(A, D, orthocenter(A, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), B, midpoint(B, G) we get collinear(B, midpoint(B, G), orthocenter(A, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(D, G, orthocenter(A, D, G)), projection(A, Line(D, G)), A we get collinear(A, projection(A, Line(D, G)), orthocenter(D, G, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), orthocenter(A, B, D), B we get collinear(B, orthocenter(A, B, D), orthocenter(D, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), I, A we get collinear(A, I, orthocenter(I, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, B, orthocenter(A, B, D)), D, I we get collinear(D, I, orthocenter(A, B, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(C, E, orthocenter(A, D, G)), C, E we get collinear(C, E, orthocenter(C, E, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), B, G we get collinear(B, G, orthocenter(I, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, B, orthocenter(A, B, D)), A, I we get collinear(A, I, orthocenter(A, B, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), midpoint(B, G), G we get collinear(G, midpoint(B, G), orthocenter(A, midpoint(B, G), orthocenter(A, B, D)))
By line_inequality on perpendicular_line(F, Line(B, G)), Line(C, H), F we get Line(C, H) != perpendicular_line(F, Line(B, G))
By in_imply_collinear on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), midpoint(B, G), orthocenter(A, B, D) we get collinear(midpoint(B, G), orthocenter(A, B, D), orthocenter(I, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), I, midpoint(B, G) we get collinear(I, midpoint(B, G), orthocenter(D, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), midpoint(B, G), I we get collinear(I, midpoint(B, G), orthocenter(I, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), G, midpoint(B, G) we get collinear(G, midpoint(B, G), orthocenter(A, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(B, F, orthocenter(A, B, D)), B, H we get collinear(B, H, orthocenter(B, F, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, B, D)), D, B we get collinear(B, D, orthocenter(A, D, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(B, D, orthocenter(A, B, D)), A, projection(A, i) we get collinear(A, projection(A, i), orthocenter(B, D, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, E, orthocenter(A, D, G)), E, G we get collinear(E, G, orthocenter(A, E, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, G, orthocenter(A, D, G)), projection(A, Line(D, G)), G we get collinear(G, projection(A, Line(D, G)), orthocenter(A, G, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, B, orthocenter(A, B, D)), A, midpoint(B, G) we get collinear(A, midpoint(B, G), orthocenter(A, B, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(B, D, orthocenter(A, B, D)), D, I we get collinear(D, I, orthocenter(B, D, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(C, E, orthocenter(A, D, G)), A, G we get collinear(A, G, orthocenter(C, E, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(D, G, orthocenter(A, D, G)), A, G we get collinear(A, G, orthocenter(D, G, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), orthocenter(A, B, D), midpoint(B, G) we get collinear(midpoint(B, G), orthocenter(A, B, D), orthocenter(D, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), orthocenter(A, B, D), B we get collinear(B, orthocenter(A, B, D), orthocenter(I, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, B, D)), G, B we get collinear(B, G, orthocenter(A, D, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, B, D)), G, midpoint(B, G) we get collinear(G, midpoint(B, G), orthocenter(A, D, orthocenter(A, B, D)))
By line_containment_inequality on orthocenter(A, B, orthocenter(A, B, D)), projection(A, Line(D, G)), i we get projection(A, Line(D, G)) != orthocenter(A, B, orthocenter(A, B, D))
By in_imply_collinear on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), B, G we get collinear(B, G, orthocenter(I, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(C, E, orthocenter(A, D, G)), E, G we get collinear(E, G, orthocenter(C, E, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), B, orthocenter(A, D, G) we get collinear(B, orthocenter(A, D, G), orthocenter(D, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, D, G)), G, B we get collinear(B, G, orthocenter(A, D, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, B, orthocenter(A, B, D)), orthocenter(A, B, D), F we get collinear(F, orthocenter(A, B, D), orthocenter(A, B, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, B, D)), B, orthocenter(A, D, G) we get collinear(B, orthocenter(A, D, G), orthocenter(A, D, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, G, orthocenter(A, D, G)), I, midpoint(B, G) we get collinear(I, midpoint(B, G), orthocenter(A, G, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), B, midpoint(B, G) we get collinear(B, midpoint(B, G), orthocenter(I, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, E, orthocenter(A, D, G)), E, A we get collinear(A, E, orthocenter(A, E, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(E, G, orthocenter(A, D, G)), E, G we get collinear(E, G, orthocenter(E, G, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), B, orthocenter(A, D, G) we get collinear(B, orthocenter(A, D, G), orthocenter(I, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), G, orthocenter(A, B, D) we get collinear(G, orthocenter(A, B, D), orthocenter(D, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(D, G, orthocenter(A, D, G)), orthocenter(A, D, G), A we get collinear(A, orthocenter(A, D, G), orthocenter(D, G, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), orthocenter(A, D, G), G we get collinear(G, orthocenter(A, D, G), orthocenter(D, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(E, G, orthocenter(A, D, G)), orthocenter(A, D, G), D we get collinear(D, orthocenter(A, D, G), orthocenter(E, G, orthocenter(A, D, G)))
By line_inequality on Line(F, midpoint(B, G)), Line(G, I), midpoint(B, G) we get Line(G, I) != Line(F, midpoint(B, G))
By in_imply_collinear on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), G, B we get collinear(B, G, orthocenter(D, midpoint(B, G), orthocenter(A, B, D)))
By double_perpendicular_and_parallel_v0 on i, altitude(A, B, D), altitude(midpoint(B, G), A, orthocenter(A, B, D)) we get parallel(i, altitude(midpoint(B, G), A, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), I, D we get collinear(D, I, orthocenter(A, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, B, orthocenter(A, B, D)), D, orthocenter(A, B, D) we get collinear(D, orthocenter(A, B, D), orthocenter(A, B, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(B, F, orthocenter(A, B, D)), D, orthocenter(A, B, D) we get collinear(D, orthocenter(A, B, D), orthocenter(B, F, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(B, F, orthocenter(A, B, D)), F, A we get collinear(A, F, orthocenter(B, F, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), A, I we get collinear(A, I, orthocenter(D, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), orthocenter(A, B, D), G we get collinear(G, orthocenter(A, B, D), orthocenter(D, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, F, orthocenter(A, B, D)), F, orthocenter(A, B, D) we get collinear(F, orthocenter(A, B, D), orthocenter(A, F, orthocenter(A, B, D)))
By reverse_orientation on G, midpoint(B, G), projection(A, i) we get orientation(G, midpoint(B, G), projection(A, i)) == 0 - orientation(G, projection(A, i), midpoint(B, G)) mod 360
By in_imply_collinear on orthocenter(D, G, orthocenter(A, D, G)), D, midpoint(B, G) we get collinear(D, midpoint(B, G), orthocenter(D, G, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, B, orthocenter(A, B, D)), D, midpoint(B, G) we get collinear(D, midpoint(B, G), orthocenter(A, B, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(C, E, orthocenter(A, D, G)), orthocenter(A, D, G), D we get collinear(D, orthocenter(A, D, G), orthocenter(C, E, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, D, G)), A, G we get collinear(A, G, orthocenter(A, D, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), A, I we get collinear(A, I, orthocenter(I, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, G, orthocenter(A, D, G)), D, midpoint(B, G) we get collinear(D, midpoint(B, G), orthocenter(A, G, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, B, D)), midpoint(B, G), B we get collinear(B, midpoint(B, G), orthocenter(A, D, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(F, H, orthocenter(A, B, D)), F, A we get collinear(A, F, orthocenter(F, H, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, D, G)), G, projection(A, Line(D, G)) we get collinear(G, projection(A, Line(D, G)), orthocenter(A, D, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(B, D, orthocenter(A, B, D)), A, D we get collinear(A, D, orthocenter(B, D, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), orthocenter(A, B, D), G we get collinear(G, orthocenter(A, B, D), orthocenter(A, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, B, D)), F, A we get collinear(A, F, orthocenter(A, D, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), D, A we get collinear(A, D, orthocenter(D, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), B, orthocenter(A, D, G) we get collinear(B, orthocenter(A, D, G), orthocenter(A, midpoint(B, G), orthocenter(A, D, G)))
By line_inequality on Line(I, orthocenter(A, B, D)), altitude(A, B, D), I we get altitude(A, B, D) != Line(I, orthocenter(A, B, D))
By in_imply_collinear on orthocenter(B, D, orthocenter(A, B, D)), midpoint(B, G), I we get collinear(I, midpoint(B, G), orthocenter(B, D, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), orthocenter(A, B, D), G we get collinear(G, orthocenter(A, B, D), orthocenter(A, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), D, A we get collinear(A, D, orthocenter(I, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, B, D)), orthocenter(A, D, G), midpoint(B, G) we get collinear(midpoint(B, G), orthocenter(A, D, G), orthocenter(A, D, orthocenter(A, B, D)))
By line_containment_inequality on orthocenter(A, B, orthocenter(A, B, D)), projection(A, i), h we get projection(A, i) != orthocenter(A, B, orthocenter(A, B, D))
By in_imply_collinear on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), midpoint(B, G), orthocenter(A, D, G) we get collinear(midpoint(B, G), orthocenter(A, D, G), orthocenter(I, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, G, orthocenter(A, D, G)), E, D we get collinear(D, E, orthocenter(A, G, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(C, E, orthocenter(A, D, G)), E, D we get collinear(D, E, orthocenter(C, E, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, B, D)), projection(A, i), D we get collinear(D, projection(A, i), orthocenter(A, D, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, B, orthocenter(A, B, D)), A, D we get collinear(A, D, orthocenter(A, B, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, G, orthocenter(A, D, G)), D, orthocenter(A, D, G) we get collinear(D, orthocenter(A, D, G), orthocenter(A, G, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), orthocenter(A, B, D), midpoint(B, G) we get collinear(midpoint(B, G), orthocenter(A, B, D), orthocenter(I, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), orthocenter(A, D, G), orthocenter(A, B, D) we get collinear(orthocenter(A, B, D), orthocenter(A, D, G), orthocenter(I, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), orthocenter(A, B, D), orthocenter(A, D, G) we get collinear(orthocenter(A, B, D), orthocenter(A, D, G), orthocenter(D, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, D, G)), orthocenter(A, B, D), midpoint(B, G) we get collinear(midpoint(B, G), orthocenter(A, B, D), orthocenter(A, D, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(B, F, orthocenter(A, B, D)), orthocenter(A, B, D), F we get collinear(F, orthocenter(A, B, D), orthocenter(B, F, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(D, G, orthocenter(A, D, G)), I, A we get collinear(A, I, orthocenter(D, G, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(B, F, orthocenter(A, B, D)), H, F we get collinear(F, H, orthocenter(B, F, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(F, H, orthocenter(A, B, D)), D, F we get collinear(D, F, orthocenter(F, H, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), orthocenter(A, B, D), midpoint(B, G) we get collinear(midpoint(B, G), orthocenter(A, B, D), orthocenter(A, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), midpoint(B, G), B we get collinear(B, midpoint(B, G), orthocenter(D, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(F, H, orthocenter(A, B, D)), B, A we get collinear(A, B, orthocenter(F, H, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(F, H, orthocenter(A, B, D)), H, A we get collinear(A, H, orthocenter(F, H, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), midpoint(B, G), G we get collinear(G, midpoint(B, G), orthocenter(I, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, B, D)), orthocenter(A, B, D), G we get collinear(G, orthocenter(A, B, D), orthocenter(A, D, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), G, midpoint(B, G) we get collinear(G, midpoint(B, G), orthocenter(D, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, E, orthocenter(A, D, G)), orthocenter(A, D, G), E we get collinear(E, orthocenter(A, D, G), orthocenter(A, E, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(D, G, orthocenter(A, D, G)), A, E we get collinear(A, E, orthocenter(D, G, orthocenter(A, D, G)))
By line_containment_inequality on orthocenter(E, G, orthocenter(A, D, G)), A, Line(D, E) we get A != orthocenter(E, G, orthocenter(A, D, G))
By line_inequality on Line(I, orthocenter(A, D, G)), i, orthocenter(A, D, G) we get i != Line(I, orthocenter(A, D, G))
By double_perpendicular_and_parallel_v0 on altitude(F, A, orthocenter(A, B, D)), altitude(A, B, D), i we get parallel(i, altitude(F, A, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), midpoint(B, G), D we get collinear(D, midpoint(B, G), orthocenter(A, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(E, G, orthocenter(A, D, G)), C, G we get collinear(C, G, orthocenter(E, G, orthocenter(A, D, G)))
By line_containment_inequality on orthocenter(A, B, orthocenter(A, B, D)), orthocenter(A, B, D), h we get orthocenter(A, B, D) != orthocenter(A, B, orthocenter(A, B, D))
By in_imply_collinear on orthocenter(A, E, orthocenter(A, D, G)), C, A we get collinear(A, C, orthocenter(A, E, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), orthocenter(A, D, G), orthocenter(A, B, D) we get collinear(orthocenter(A, B, D), orthocenter(A, D, G), orthocenter(D, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, D, G)), midpoint(B, G), B we get collinear(B, midpoint(B, G), orthocenter(A, D, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), B, midpoint(B, G) we get collinear(B, midpoint(B, G), orthocenter(A, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), orthocenter(A, B, D), orthocenter(A, D, G) we get collinear(orthocenter(A, B, D), orthocenter(A, D, G), orthocenter(I, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, D, G)), C, A we get collinear(A, C, orthocenter(A, D, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), A, midpoint(B, G) we get collinear(A, midpoint(B, G), orthocenter(I, midpoint(B, G), orthocenter(A, D, G)))
By line_containment_inequality on orthocenter(A, G, orthocenter(A, D, G)), F, h we get F != orthocenter(A, G, orthocenter(A, D, G))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, D, G)), G, midpoint(B, G) we get collinear(G, midpoint(B, G), orthocenter(A, D, orthocenter(A, D, G)))
By line_inequality on Line(I, orthocenter(A, D, G)), Line(E, F), I we get Line(E, F) != Line(I, orthocenter(A, D, G))
By in_imply_collinear on orthocenter(D, G, orthocenter(A, D, G)), orthocenter(A, D, G), projection(A, Line(D, G)) we get collinear(orthocenter(A, D, G), projection(A, Line(D, G)), orthocenter(D, G, orthocenter(A, D, G)))
By line_inequality on altitude(midpoint(B, G), I, orthocenter(A, D, G)), Line(G, I), midpoint(B, G) we get Line(G, I) != altitude(midpoint(B, G), I, orthocenter(A, D, G))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, D, G)), E, C we get collinear(C, E, orthocenter(A, D, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, D, G)), midpoint(B, G), orthocenter(A, D, G) we get collinear(midpoint(B, G), orthocenter(A, D, G), orthocenter(A, D, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(E, G, orthocenter(A, D, G)), C, A we get collinear(A, C, orthocenter(E, G, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(C, E, orthocenter(A, D, G)), E, A we get collinear(A, E, orthocenter(C, E, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(D, G, orthocenter(A, D, G)), midpoint(B, G), A we get collinear(A, midpoint(B, G), orthocenter(D, G, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, E, orthocenter(A, D, G)), orthocenter(A, D, G), D we get collinear(D, orthocenter(A, D, G), orthocenter(A, E, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), D, A we get collinear(A, D, orthocenter(A, midpoint(B, G), orthocenter(A, B, D)))
By line_inequality on perpendicular_line(E, Line(B, G)), Line(D, G), E we get Line(D, G) != perpendicular_line(E, Line(B, G))
By in_imply_collinear on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), G, orthocenter(A, B, D) we get collinear(G, orthocenter(A, B, D), orthocenter(I, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, G, orthocenter(A, D, G)), A, D we get collinear(A, D, orthocenter(A, G, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(D, G, orthocenter(A, D, G)), C, E we get collinear(C, E, orthocenter(D, G, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, B, D)), F, B we get collinear(B, F, orthocenter(A, D, orthocenter(A, B, D)))
By line_inequality on Line(F, midpoint(B, G)), Line(C, D), midpoint(B, G) we get Line(C, D) != Line(F, midpoint(B, G))
By in_imply_collinear on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), B, orthocenter(A, D, G) we get collinear(B, orthocenter(A, D, G), orthocenter(A, midpoint(B, G), orthocenter(A, B, D)))
By line_containment_inequality on orthocenter(A, B, orthocenter(A, B, D)), I, Line(D, F) we get I != orthocenter(A, B, orthocenter(A, B, D))
By in_imply_collinear on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), midpoint(B, G), orthocenter(A, D, G) we get collinear(midpoint(B, G), orthocenter(A, D, G), orthocenter(A, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, G, orthocenter(A, D, G)), orthocenter(A, D, G), E we get collinear(E, orthocenter(A, D, G), orthocenter(A, G, orthocenter(A, D, G)))
By reverse_orientation on midpoint(B, G), G, projection(A, i) we get orientation(G, projection(A, i), midpoint(B, G)) == 0 - orientation(G, midpoint(B, G), projection(A, i)) mod 360
By in_imply_collinear on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), B, midpoint(B, G) we get collinear(B, midpoint(B, G), orthocenter(D, midpoint(B, G), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(C, E, orthocenter(A, D, G)), orthocenter(A, D, G), E we get collinear(E, orthocenter(A, D, G), orthocenter(C, E, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, E, orthocenter(A, D, G)), A, G we get collinear(A, G, orthocenter(A, E, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(B, F, orthocenter(A, B, D)), B, A we get collinear(A, B, orthocenter(B, F, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, D, G)), B, orthocenter(A, B, D) we get collinear(B, orthocenter(A, B, D), orthocenter(A, D, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(B, F, orthocenter(A, B, D)), D, F we get collinear(D, F, orthocenter(B, F, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, B, D)), H, A we get collinear(A, H, orthocenter(A, D, orthocenter(A, B, D)))
By reverse_orientation on B, projection(A, i), midpoint(B, G) we get orientation(B, projection(A, i), midpoint(B, G)) == 0 - orientation(B, midpoint(B, G), projection(A, i)) mod 360
By in_imply_collinear on orthocenter(A, F, orthocenter(A, B, D)), H, B we get collinear(B, H, orthocenter(A, F, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), G, orthocenter(A, D, G) we get collinear(G, orthocenter(A, D, G), orthocenter(I, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, D, G)), C, G we get collinear(C, G, orthocenter(A, D, orthocenter(A, D, G)))
By line_inequality on altitude(midpoint(B, G), A, orthocenter(A, D, G)), i, midpoint(B, G) we get i != altitude(midpoint(B, G), A, orthocenter(A, D, G))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, B, D)), midpoint(B, G), orthocenter(A, B, D) we get collinear(midpoint(B, G), orthocenter(A, B, D), orthocenter(A, D, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, D, G)), orthocenter(A, D, G), orthocenter(A, B, D) we get collinear(orthocenter(A, B, D), orthocenter(A, D, G), orthocenter(A, D, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(B, D, orthocenter(A, B, D)), midpoint(B, G), A we get collinear(A, midpoint(B, G), orthocenter(B, D, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(A, D, orthocenter(A, B, D)), orthocenter(A, B, D), B we get collinear(B, orthocenter(A, B, D), orthocenter(A, D, orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), G, midpoint(B, G) we get collinear(G, midpoint(B, G), orthocenter(I, midpoint(B, G), orthocenter(A, D, G)))
By line_containment_inequality on orthocenter(A, D, orthocenter(A, D, G)), H, Line(B, G) we get H != orthocenter(A, D, orthocenter(A, D, G))
By line_inequality on perpendicular_line(midpoint(B, G), Line(D, E)), Line(C, D), midpoint(B, G) we get Line(C, D) != perpendicular_line(midpoint(B, G), Line(D, E))
By line_containment_inequality on orthocenter(E, G, orthocenter(A, D, G)), projection(A, i), Line(D, E) we get projection(A, i) != orthocenter(E, G, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(F, H, orthocenter(A, B, D)), orthocenter(A, D, G), Line(D, F) we get orthocenter(A, D, G) != orthocenter(F, H, orthocenter(A, B, D))
By line_inequality on Line(I, orthocenter(A, D, G)), Line(E, H), orthocenter(A, D, G) we get Line(E, H) != Line(I, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, B, orthocenter(A, B, D)), midpoint(B, G), Line(D, F) we get midpoint(B, G) != orthocenter(A, B, orthocenter(A, B, D))
By line_inequality on altitude(A, E, midpoint(B, G)), Line(C, H), A we get Line(C, H) != altitude(A, E, midpoint(B, G))
By line_inequality on Line(F, midpoint(B, G)), altitude(A, D, G), midpoint(B, G) we get altitude(A, D, G) != Line(F, midpoint(B, G))
By double_perpendicular_and_parallel_v0 on altitude(midpoint(B, G), A, orthocenter(A, B, D)), altitude(A, B, D), altitude(F, A, orthocenter(A, B, D)) we get parallel(altitude(F, A, orthocenter(A, B, D)), altitude(midpoint(B, G), A, orthocenter(A, B, D)))
By point_on_perpendicular_bisector on G, B, orthocenter(B, D, orthocenter(A, B, D)), h we get distance(B, orthocenter(B, D, orthocenter(A, B, D))) == distance(G, orthocenter(B, D, orthocenter(A, B, D)))
By double_perpendicular_and_parallel_v0_r on Line(B, G), perpendicular_line(F, Line(B, G)), altitude(E, A, D) we get perpendicular(altitude(E, A, D), perpendicular_line(F, Line(B, G)))
By reverse_orientation on projection(A, i), B, G we get orientation(B, G, projection(A, i)) == 0 - orientation(B, projection(A, i), G) mod 360
By line_inequality on altitude(A, F, midpoint(B, G)), Line(B, G), A we get Line(B, G) != altitude(A, F, midpoint(B, G))
By not_in_line_equivalent_to_not_collinear_v0_r on B, orthocenter(A, D, G), I we get B not in Line(I, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(B, F, orthocenter(A, B, D)), midpoint(B, G), Line(D, F) we get midpoint(B, G) != orthocenter(B, F, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), projection(A, i), h we get projection(A, i) != orthocenter(I, midpoint(B, G), orthocenter(A, D, G))
By line_inequality on perpendicular_line(midpoint(B, G), Line(D, F)), Line(D, G), midpoint(B, G) we get Line(D, G) != perpendicular_line(midpoint(B, G), Line(D, F))
By point_on_perpendicular_bisector on G, B, orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), h we get distance(B, orthocenter(A, midpoint(B, G), orthocenter(A, B, D))) == distance(G, orthocenter(A, midpoint(B, G), orthocenter(A, B, D)))
By not_in_line_equivalent_to_not_collinear_v0_r on A, orthocenter(A, B, D), I we get A not in Line(I, orthocenter(A, B, D))
By double_perpendicular_and_parallel_v0 on Line(D, G), altitude(A, D, G), altitude(E, A, orthocenter(A, D, G)) we get parallel(Line(D, G), altitude(E, A, orthocenter(A, D, G)))
By not_in_line_equivalent_to_not_collinear_v0_r on A, I, orthocenter(A, D, G) we get A not in Line(I, orthocenter(A, D, G))
By double_perpendicular_and_parallel_v0_r on Line(D, E), perpendicular_line(midpoint(B, G), Line(D, E)), altitude(midpoint(B, G), A, C) we get perpendicular(altitude(midpoint(B, G), A, C), perpendicular_line(midpoint(B, G), Line(D, E)))
By line_inequality on Line(I, orthocenter(A, B, D)), f, I we get f != Line(I, orthocenter(A, B, D))
By line_inequality on Line(E, midpoint(B, G)), Line(C, D), E we get Line(C, D) != Line(E, midpoint(B, G))
By line_containment_inequality on orthocenter(D, G, orthocenter(A, D, G)), E, h we get E != orthocenter(D, G, orthocenter(A, D, G))
By line_inequality on altitude(midpoint(B, G), I, orthocenter(A, D, G)), Line(D, E), midpoint(B, G) we get Line(D, E) != altitude(midpoint(B, G), I, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), H, h we get H != orthocenter(A, midpoint(B, G), orthocenter(A, B, D))
By reverse_orientation on G, projection(A, Line(D, G)), midpoint(B, G) we get orientation(G, projection(A, Line(D, G)), midpoint(B, G)) == 0 - orientation(G, midpoint(B, G), projection(A, Line(D, G))) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on projection(A, i), orthocenter(A, D, G), A we get projection(A, i) not in Line(A, orthocenter(A, D, G))
By point_on_perpendicular_bisector on G, B, orthocenter(D, G, orthocenter(A, D, G)), h we get distance(B, orthocenter(D, G, orthocenter(A, D, G))) == distance(G, orthocenter(D, G, orthocenter(A, D, G)))
By line_inequality on altitude(midpoint(B, G), I, orthocenter(A, B, D)), altitude(A, D, G), midpoint(B, G) we get altitude(A, D, G) != altitude(midpoint(B, G), I, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(F, H, orthocenter(A, B, D)), projection(A, Line(D, G)), Line(D, F) we get projection(A, Line(D, G)) != orthocenter(F, H, orthocenter(A, B, D))
By line_inequality on Line(I, orthocenter(A, B, D)), altitude(A, D, G), orthocenter(A, B, D) we get altitude(A, D, G) != Line(I, orthocenter(A, B, D))
By line_inequality on perpendicular_line(E, Line(B, G)), Line(D, F), E we get Line(D, F) != perpendicular_line(E, Line(B, G))
By line_containment_inequality on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), projection(A, Line(D, G)), h we get projection(A, Line(D, G)) != orthocenter(I, midpoint(B, G), orthocenter(A, B, D))
By line_inequality on altitude(E, A, orthocenter(A, D, G)), Line(C, I), E we get Line(C, I) != altitude(E, A, orthocenter(A, D, G))
By reverse_orientation on B, midpoint(B, G), projection(A, i) we get orientation(B, midpoint(B, G), projection(A, i)) == 0 - orientation(B, projection(A, i), midpoint(B, G)) mod 360
By double_perpendicular_and_parallel_v0 on perpendicular_line(F, Line(B, G)), Line(B, G), h we get parallel(h, perpendicular_line(F, Line(B, G)))
By line_containment_inequality on orthocenter(A, E, orthocenter(A, D, G)), orthocenter(A, B, D), Line(D, E) we get orthocenter(A, B, D) != orthocenter(A, E, orthocenter(A, D, G))
By line_inequality on altitude(midpoint(B, G), A, orthocenter(A, B, D)), i, midpoint(B, G) we get i != altitude(midpoint(B, G), A, orthocenter(A, B, D))
By line_inequality on perpendicular_line(midpoint(B, G), Line(D, F)), altitude(A, D, G), midpoint(B, G) we get altitude(A, D, G) != perpendicular_line(midpoint(B, G), Line(D, F))
By line_inequality on perpendicular_line(F, Line(B, G)), Line(D, G), F we get Line(D, G) != perpendicular_line(F, Line(B, G))
By line_containment_inequality on orthocenter(A, F, orthocenter(A, B, D)), I, Line(D, F) we get I != orthocenter(A, F, orthocenter(A, B, D))
By reverse_orientation on projection(A, Line(D, G)), midpoint(B, G), B we get orientation(B, projection(A, Line(D, G)), midpoint(B, G)) == 0 - orientation(B, midpoint(B, G), projection(A, Line(D, G))) mod 360
By reverse_orientation on projection(A, Line(D, G)), B, G we get orientation(B, G, projection(A, Line(D, G))) == 0 - orientation(B, projection(A, Line(D, G)), G) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on G, I, orthocenter(A, B, D) we get G not in Line(I, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(D, G, orthocenter(A, D, G)), orthocenter(A, B, D), h we get orthocenter(A, B, D) != orthocenter(D, G, orthocenter(A, D, G))
By line_inequality on altitude(F, A, orthocenter(A, B, D)), Line(G, I), F we get Line(G, I) != altitude(F, A, orthocenter(A, B, D))
By line_inequality on Line(H, orthocenter(A, B, D)), Line(B, C), H we get Line(B, C) != Line(H, orthocenter(A, B, D))
By not_in_line_equivalent_to_not_collinear_v0_r on orthocenter(A, B, D), orthocenter(A, D, G), I we get orthocenter(A, B, D) not in Line(I, orthocenter(A, D, G))
By reverse_orientation on projection(A, Line(D, G)), G, B we get orientation(B, projection(A, Line(D, G)), G) == 0 - orientation(B, G, projection(A, Line(D, G))) mod 360
By line_containment_inequality on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), projection(A, Line(D, G)), h we get projection(A, Line(D, G)) != orthocenter(A, midpoint(B, G), orthocenter(A, B, D))
By line_inequality on Line(I, orthocenter(A, B, D)), Line(C, F), I we get Line(C, F) != Line(I, orthocenter(A, B, D))
By line_inequality on altitude(midpoint(B, G), A, orthocenter(A, B, D)), Line(B, C), midpoint(B, G) we get Line(B, C) != altitude(midpoint(B, G), A, orthocenter(A, B, D))
By sas_anti_similarity on F, A, E, E, A, F we get anti_similar_triangles(A, E, F, A, F, E)
By line_inequality on Line(F, midpoint(B, G)), Line(B, I), midpoint(B, G) we get Line(B, I) != Line(F, midpoint(B, G))
By point_on_perpendicular_bisector on G, B, orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), h we get distance(B, orthocenter(A, midpoint(B, G), orthocenter(A, D, G))) == distance(G, orthocenter(A, midpoint(B, G), orthocenter(A, D, G)))
By line_containment_inequality on orthocenter(A, D, orthocenter(A, D, G)), orthocenter(A, B, D), Line(D, G) we get orthocenter(A, B, D) != orthocenter(A, D, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), orthocenter(A, B, D), h we get orthocenter(A, B, D) != orthocenter(A, midpoint(B, G), orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, B, orthocenter(A, B, D)), H, Line(D, F) we get H != orthocenter(A, B, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), D, Line(B, G) we get D != orthocenter(D, midpoint(B, G), orthocenter(A, D, G))
By double_perpendicular_and_parallel_v0 on altitude(midpoint(B, G), A, orthocenter(A, D, G)), altitude(A, D, G), Line(D, G) we get parallel(Line(D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)))
By line_containment_inequality on orthocenter(A, D, orthocenter(A, D, G)), C, Line(B, G) we get C != orthocenter(A, D, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, D, orthocenter(A, B, D)), projection(A, Line(D, G)), i we get projection(A, Line(D, G)) != orthocenter(A, D, orthocenter(A, B, D))
By not_in_line_equivalent_to_not_collinear_v0_r on A, H, orthocenter(A, B, D) we get A not in Line(H, orthocenter(A, B, D))
By line_inequality on altitude(A, F, midpoint(B, G)), Line(C, F), A we get Line(C, F) != altitude(A, F, midpoint(B, G))
By reverse_orientation on B, midpoint(B, G), projection(A, Line(D, G)) we get orientation(B, midpoint(B, G), projection(A, Line(D, G))) == 0 - orientation(B, projection(A, Line(D, G)), midpoint(B, G)) mod 360
By line_inequality on Line(I, orthocenter(A, D, G)), altitude(A, D, G), I we get altitude(A, D, G) != Line(I, orthocenter(A, D, G))
By point_on_perpendicular_bisector on G, B, orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), h we get distance(B, orthocenter(I, midpoint(B, G), orthocenter(A, B, D))) == distance(G, orthocenter(I, midpoint(B, G), orthocenter(A, B, D)))
By point_on_perpendicular_bisector on G, B, orthocenter(A, G, orthocenter(A, D, G)), h we get distance(B, orthocenter(A, G, orthocenter(A, D, G))) == distance(G, orthocenter(A, G, orthocenter(A, D, G)))
By line_inequality on altitude(A, E, midpoint(B, G)), Line(B, C), A we get Line(B, C) != altitude(A, E, midpoint(B, G))
By line_containment_inequality on orthocenter(A, D, orthocenter(A, B, D)), F, i we get F != orthocenter(A, D, orthocenter(A, B, D))
By line_inequality on altitude(A, E, midpoint(B, G)), Line(C, D), A we get Line(C, D) != altitude(A, E, midpoint(B, G))
By not_in_line_equivalent_to_not_collinear_v0_r on D, I, orthocenter(A, B, D) we get D not in Line(I, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(F, H, orthocenter(A, B, D)), C, Line(D, F) we get C != orthocenter(F, H, orthocenter(A, B, D))
By line_inequality on perpendicular_line(F, Line(B, G)), Line(B, I), F we get Line(B, I) != perpendicular_line(F, Line(B, G))
By line_containment_inequality on orthocenter(A, G, orthocenter(A, D, G)), orthocenter(A, B, D), h we get orthocenter(A, B, D) != orthocenter(A, G, orthocenter(A, D, G))
By line_inequality on Line(F, midpoint(B, G)), Line(D, G), F we get Line(D, G) != Line(F, midpoint(B, G))
By double_perpendicular_and_parallel_v0_r on altitude(A, B, D), altitude(midpoint(B, G), A, orthocenter(A, B, D)), altitude(F, B, D) we get perpendicular(altitude(F, B, D), altitude(midpoint(B, G), A, orthocenter(A, B, D)))
By double_perpendicular_and_parallel_v0_r on Line(B, G), perpendicular_line(E, Line(B, G)), altitude(E, A, D) we get perpendicular(altitude(E, A, D), perpendicular_line(E, Line(B, G)))
By point_on_perpendicular_bisector on G, B, orthocenter(A, B, orthocenter(A, B, D)), h we get distance(B, orthocenter(A, B, orthocenter(A, B, D))) == distance(G, orthocenter(A, B, orthocenter(A, B, D)))
By line_inequality on Line(F, midpoint(B, G)), Line(B, C), midpoint(B, G) we get Line(B, C) != Line(F, midpoint(B, G))
By line_inequality on Line(I, orthocenter(A, D, G)), Line(D, E), I we get Line(D, E) != Line(I, orthocenter(A, D, G))
By double_perpendicular_and_parallel_v0 on perpendicular_line(E, Line(B, G)), Line(B, G), h we get parallel(h, perpendicular_line(E, Line(B, G)))
By sas_anti_similarity on C, A, H, H, A, C we get anti_similar_triangles(A, C, H, A, H, C)
By line_inequality on altitude(A, E, midpoint(B, G)), Line(D, G), A we get Line(D, G) != altitude(A, E, midpoint(B, G))
By not_in_line_equivalent_to_not_collinear_v0_r on B, orthocenter(A, B, D), H we get B not in Line(H, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(A, F, orthocenter(A, B, D)), orthocenter(A, B, D), f we get orthocenter(A, B, D) != orthocenter(A, F, orthocenter(A, B, D))
By line_inequality on Line(I, orthocenter(A, B, D)), Line(B, G), I we get Line(B, G) != Line(I, orthocenter(A, B, D))
By double_perpendicular_and_parallel_v0_r on altitude(A, B, D), altitude(midpoint(B, G), A, orthocenter(A, B, D)), altitude(midpoint(B, G), B, D) we get perpendicular(altitude(midpoint(B, G), B, D), altitude(midpoint(B, G), A, orthocenter(A, B, D)))
By not_in_line_equivalent_to_not_collinear_v0_r on G, H, orthocenter(A, B, D) we get G not in Line(H, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(B, D, orthocenter(A, B, D)), orthocenter(A, D, G), f we get orthocenter(A, D, G) != orthocenter(B, D, orthocenter(A, B, D))
By line_inequality on altitude(E, C, orthocenter(A, D, G)), Line(C, D), E we get Line(C, D) != altitude(E, C, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(E, G, orthocenter(A, D, G)), orthocenter(A, B, D), Line(D, E) we get orthocenter(A, B, D) != orthocenter(E, G, orthocenter(A, D, G))
By reverse_orientation on B, projection(A, i), G we get orientation(B, projection(A, i), G) == 0 - orientation(B, G, projection(A, i)) mod 360
By line_containment_inequality on orthocenter(A, B, orthocenter(A, B, D)), orthocenter(A, D, G), Line(D, F) we get orthocenter(A, D, G) != orthocenter(A, B, orthocenter(A, B, D))
By line_inequality on Line(H, orthocenter(A, B, D)), h, H we get h != Line(H, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), F, h we get F != orthocenter(D, midpoint(B, G), orthocenter(A, B, D))
By line_containment_inequality on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), projection(A, i), h we get projection(A, i) != orthocenter(D, midpoint(B, G), orthocenter(A, D, G))
By line_inequality on altitude(midpoint(B, G), I, orthocenter(A, B, D)), Line(C, I), midpoint(B, G) we get Line(C, I) != altitude(midpoint(B, G), I, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(C, E, orthocenter(A, D, G)), A, Line(D, E) we get A != orthocenter(C, E, orthocenter(A, D, G))
By double_perpendicular_and_parallel_v0 on altitude(E, A, orthocenter(A, D, G)), altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)) we get parallel(altitude(E, A, orthocenter(A, D, G)), altitude(midpoint(B, G), A, orthocenter(A, D, G)))
By line_containment_inequality on orthocenter(D, G, orthocenter(A, D, G)), F, h we get F != orthocenter(D, G, orthocenter(A, D, G))
By not_in_line_equivalent_to_not_collinear_v0_r on orthocenter(A, D, G), F, midpoint(B, G) we get orthocenter(A, D, G) not in Line(F, midpoint(B, G))
By double_perpendicular_and_parallel_v0 on perpendicular_line(F, Line(B, G)), Line(B, G), perpendicular_line(E, Line(B, G)) we get parallel(perpendicular_line(E, Line(B, G)), perpendicular_line(F, Line(B, G)))
By double_perpendicular_and_parallel_v0_r on altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)), altitude(midpoint(B, G), D, G) we get perpendicular(altitude(midpoint(B, G), D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)))
By line_containment_inequality on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), A, Line(B, G) we get A != orthocenter(I, midpoint(B, G), orthocenter(A, B, D))
By line_inequality on altitude(A, F, midpoint(B, G)), Line(D, G), A we get Line(D, G) != altitude(A, F, midpoint(B, G))
By line_containment_inequality on orthocenter(A, D, orthocenter(A, B, D)), C, Line(B, G) we get C != orthocenter(A, D, orthocenter(A, B, D))
By reverse_orientation on midpoint(B, G), projection(A, Line(D, G)), G we get orientation(G, midpoint(B, G), projection(A, Line(D, G))) == 0 - orientation(G, projection(A, Line(D, G)), midpoint(B, G)) mod 360
By line_inequality on altitude(midpoint(B, G), I, orthocenter(A, B, D)), Line(C, D), midpoint(B, G) we get Line(C, D) != altitude(midpoint(B, G), I, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(A, E, orthocenter(A, D, G)), orthocenter(A, D, G), g we get orthocenter(A, D, G) != orthocenter(A, E, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(B, F, orthocenter(A, B, D)), C, Line(D, F) we get C != orthocenter(B, F, orthocenter(A, B, D))
By line_inequality on altitude(E, C, orthocenter(A, D, G)), Line(G, I), E we get Line(G, I) != altitude(E, C, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), B, h we get B != orthocenter(I, midpoint(B, G), orthocenter(A, D, G))
By line_inequality on Line(I, orthocenter(A, B, D)), g, orthocenter(A, B, D) we get g != Line(I, orthocenter(A, B, D))
By line_inequality on altitude(F, A, orthocenter(A, B, D)), h, F we get h != altitude(F, A, orthocenter(A, B, D))
By line_inequality on altitude(A, F, midpoint(B, G)), Line(G, I), A we get Line(G, I) != altitude(A, F, midpoint(B, G))
By line_inequality on altitude(midpoint(B, G), I, orthocenter(A, B, D)), g, midpoint(B, G) we get g != altitude(midpoint(B, G), I, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(F, H, orthocenter(A, B, D)), projection(A, i), Line(D, F) we get projection(A, i) != orthocenter(F, H, orthocenter(A, B, D))
By line_inequality on Line(H, orthocenter(A, B, D)), Line(D, H), orthocenter(A, B, D) we get Line(D, H) != Line(H, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(B, F, orthocenter(A, B, D)), A, Line(D, F) we get A != orthocenter(B, F, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), C, Line(B, G) we get C != orthocenter(I, midpoint(B, G), orthocenter(A, B, D))
By line_containment_inequality on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), G, h we get G != orthocenter(I, midpoint(B, G), orthocenter(A, D, G))
By line_containment_inequality on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), orthocenter(A, D, G), h we get orthocenter(A, D, G) != orthocenter(I, midpoint(B, G), orthocenter(A, D, G))
By double_perpendicular_and_parallel_v0_r on altitude(A, D, G), altitude(E, A, orthocenter(A, D, G)), altitude(midpoint(B, G), D, G) we get perpendicular(altitude(midpoint(B, G), D, G), altitude(E, A, orthocenter(A, D, G)))
By line_inequality on Line(E, midpoint(B, G)), Line(B, C), midpoint(B, G) we get Line(B, C) != Line(E, midpoint(B, G))
By not_in_line_equivalent_to_not_collinear_v0_r on orthocenter(A, D, G), E, midpoint(B, G) we get orthocenter(A, D, G) not in Line(E, midpoint(B, G))
By line_inequality on altitude(E, A, orthocenter(A, D, G)), Line(G, I), E we get Line(G, I) != altitude(E, A, orthocenter(A, D, G))
By not_in_line_equivalent_to_not_collinear_v0_r on I, midpoint(B, G), E we get I not in Line(E, midpoint(B, G))
By double_perpendicular_and_parallel_v0 on perpendicular_line(midpoint(B, G), Line(D, E)), Line(D, E), g we get parallel(g, perpendicular_line(midpoint(B, G), Line(D, E)))
By line_containment_inequality on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), orthocenter(A, D, G), h we get orthocenter(A, D, G) != orthocenter(A, midpoint(B, G), orthocenter(A, D, G))
By double_perpendicular_and_parallel_v0 on perpendicular_line(midpoint(B, G), Line(D, F)), Line(D, F), f we get parallel(f, perpendicular_line(midpoint(B, G), Line(D, F)))
By line_containment_inequality on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), orthocenter(A, D, G), h we get orthocenter(A, D, G) != orthocenter(I, midpoint(B, G), orthocenter(A, B, D))
By line_inequality on altitude(E, C, orthocenter(A, D, G)), altitude(A, B, D), E we get altitude(A, B, D) != altitude(E, C, orthocenter(A, D, G))
By line_inequality on Line(C, orthocenter(A, D, G)), Line(D, F), orthocenter(A, D, G) we get Line(D, F) != Line(C, orthocenter(A, D, G))
By line_inequality on altitude(midpoint(B, G), A, orthocenter(A, D, G)), Line(C, D), midpoint(B, G) we get Line(C, D) != altitude(midpoint(B, G), A, orthocenter(A, D, G))
By double_perpendicular_and_parallel_v0_r on Line(D, F), perpendicular_line(midpoint(B, G), Line(D, F)), altitude(midpoint(B, G), A, B) we get perpendicular(altitude(midpoint(B, G), A, B), perpendicular_line(midpoint(B, G), Line(D, F)))
By double_perpendicular_and_parallel_v0_r on altitude(A, D, G), altitude(E, A, orthocenter(A, D, G)), altitude(E, D, G) we get perpendicular(altitude(E, D, G), altitude(E, A, orthocenter(A, D, G)))
By line_containment_inequality on orthocenter(B, D, orthocenter(A, B, D)), orthocenter(A, B, D), f we get orthocenter(A, B, D) != orthocenter(B, D, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), A, Line(B, G) we get A != orthocenter(I, midpoint(B, G), orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, F, orthocenter(A, B, D)), H, Line(D, F) we get H != orthocenter(A, F, orthocenter(A, B, D))
By line_inequality on altitude(midpoint(B, G), A, orthocenter(A, D, G)), altitude(A, D, G), midpoint(B, G) we get altitude(A, D, G) != altitude(midpoint(B, G), A, orthocenter(A, D, G))
By line_inequality on Line(I, orthocenter(A, D, G)), Line(C, D), I we get Line(C, D) != Line(I, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(B, D, orthocenter(A, B, D)), E, f we get E != orthocenter(B, D, orthocenter(A, B, D))
By not_in_line_equivalent_to_not_collinear_v0_r on midpoint(B, G), orthocenter(A, B, D), H we get midpoint(B, G) not in Line(H, orthocenter(A, B, D))
By double_perpendicular_and_parallel_v0_r on altitude(A, B, D), altitude(F, A, orthocenter(A, B, D)), altitude(midpoint(B, G), B, D) we get perpendicular(altitude(midpoint(B, G), B, D), altitude(F, A, orthocenter(A, B, D)))
By line_inequality on altitude(F, H, orthocenter(A, B, D)), Line(B, I), F we get Line(B, I) != altitude(F, H, orthocenter(A, B, D))
By not_in_line_equivalent_to_not_collinear_v0_r on projection(A, i), I, orthocenter(A, B, D) we get projection(A, i) not in Line(I, orthocenter(A, B, D))
By double_perpendicular_and_parallel_v0_r on altitude(A, B, D), altitude(F, A, orthocenter(A, B, D)), altitude(F, B, D) we get perpendicular(altitude(F, B, D), altitude(F, A, orthocenter(A, B, D)))
By line_inequality on Line(H, orthocenter(A, B, D)), g, orthocenter(A, B, D) we get g != Line(H, orthocenter(A, B, D))
By double_perpendicular_and_parallel_v0_r on Line(B, G), perpendicular_line(E, Line(B, G)), altitude(F, A, D) we get perpendicular(altitude(F, A, D), perpendicular_line(E, Line(B, G)))
By line_inequality on Line(C, orthocenter(A, D, G)), Line(C, D), orthocenter(A, D, G) we get Line(C, D) != Line(C, orthocenter(A, D, G))
By line_inequality on Line(H, orthocenter(A, B, D)), Line(D, E), orthocenter(A, B, D) we get Line(D, E) != Line(H, orthocenter(A, B, D))
By line_inequality on Line(C, orthocenter(A, D, G)), Line(E, H), orthocenter(A, D, G) we get Line(E, H) != Line(C, orthocenter(A, D, G))
By line_inequality on altitude(E, C, orthocenter(A, D, G)), Line(B, G), E we get Line(B, G) != altitude(E, C, orthocenter(A, D, G))
By line_inequality on altitude(midpoint(B, G), A, orthocenter(A, D, G)), Line(D, G), midpoint(B, G) we get Line(D, G) != altitude(midpoint(B, G), A, orthocenter(A, D, G))
By not_in_line_equivalent_to_not_collinear_v0_r on projection(A, Line(D, G)), orthocenter(A, D, G), I we get projection(A, Line(D, G)) not in Line(I, orthocenter(A, D, G))
By line_inequality on altitude(midpoint(B, G), A, orthocenter(A, D, G)), Line(B, I), midpoint(B, G) we get Line(B, I) != altitude(midpoint(B, G), A, orthocenter(A, D, G))
By line_inequality on Line(E, midpoint(B, G)), Line(C, I), E we get Line(C, I) != Line(E, midpoint(B, G))
By line_inequality on altitude(A, E, midpoint(B, G)), Line(D, H), A we get Line(D, H) != altitude(A, E, midpoint(B, G))
By line_containment_inequality on orthocenter(C, E, orthocenter(A, D, G)), midpoint(B, G), g we get midpoint(B, G) != orthocenter(C, E, orthocenter(A, D, G))
By line_inequality on altitude(midpoint(B, G), I, orthocenter(A, D, G)), Line(C, D), midpoint(B, G) we get Line(C, D) != altitude(midpoint(B, G), I, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), F, Line(B, G) we get F != orthocenter(I, midpoint(B, G), orthocenter(A, D, G))
By line_containment_inequality on orthocenter(D, G, orthocenter(A, D, G)), G, h we get G != orthocenter(D, G, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), F, Line(B, G) we get F != orthocenter(D, midpoint(B, G), orthocenter(A, D, G))
By line_inequality on Line(I, orthocenter(A, B, D)), Line(D, E), orthocenter(A, B, D) we get Line(D, E) != Line(I, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(A, E, orthocenter(A, D, G)), G, Line(D, E) we get G != orthocenter(A, E, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, E, orthocenter(A, D, G)), H, g we get H != orthocenter(A, E, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), C, h we get C != orthocenter(A, midpoint(B, G), orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, D, orthocenter(A, B, D)), H, Line(B, G) we get H != orthocenter(A, D, orthocenter(A, B, D))
By double_perpendicular_and_parallel_v0_r on altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)), altitude(E, D, G) we get perpendicular(altitude(E, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)))
By line_containment_inequality on orthocenter(A, G, orthocenter(A, D, G)), B, Line(D, E) we get B != orthocenter(A, G, orthocenter(A, D, G))
By line_inequality on altitude(A, F, midpoint(B, G)), Line(D, F), A we get Line(D, F) != altitude(A, F, midpoint(B, G))
By line_containment_inequality on orthocenter(F, H, orthocenter(A, B, D)), midpoint(B, G), Line(D, F) we get midpoint(B, G) != orthocenter(F, H, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), projection(A, Line(D, G)), Line(B, G) we get projection(A, Line(D, G)) != orthocenter(D, midpoint(B, G), orthocenter(A, D, G))
By line_inequality on perpendicular_line(midpoint(B, G), Line(D, F)), g, midpoint(B, G) we get g != perpendicular_line(midpoint(B, G), Line(D, F))
By line_inequality on Line(E, midpoint(B, G)), i, midpoint(B, G) we get i != Line(E, midpoint(B, G))
By line_containment_inequality on orthocenter(A, D, orthocenter(A, D, G)), projection(A, i), g we get projection(A, i) != orthocenter(A, D, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, D, orthocenter(A, D, G)), F, Line(B, G) we get F != orthocenter(A, D, orthocenter(A, D, G))
By line_inequality on altitude(E, C, orthocenter(A, D, G)), Line(D, G), E we get Line(D, G) != altitude(E, C, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), projection(A, i), Line(B, G) we get projection(A, i) != orthocenter(A, midpoint(B, G), orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, F, orthocenter(A, B, D)), G, Line(D, F) we get G != orthocenter(A, F, orthocenter(A, B, D))
By line_inequality on perpendicular_line(midpoint(B, G), Line(D, F)), Line(B, I), midpoint(B, G) we get Line(B, I) != perpendicular_line(midpoint(B, G), Line(D, F))
By line_inequality on Line(F, midpoint(B, G)), h, F we get h != Line(F, midpoint(B, G))
By double_perpendicular_and_parallel_v0_r on Line(B, G), perpendicular_line(F, Line(B, G)), altitude(F, A, D) we get perpendicular(altitude(F, A, D), perpendicular_line(F, Line(B, G)))
By line_containment_inequality on orthocenter(A, D, orthocenter(A, D, G)), B, g we get B != orthocenter(A, D, orthocenter(A, D, G))
By not_in_line_equivalent_to_not_collinear_v0_r on G, F, midpoint(B, G) we get G not in Line(F, midpoint(B, G))
By line_containment_inequality on orthocenter(C, E, orthocenter(A, D, G)), B, g we get B != orthocenter(C, E, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, D, orthocenter(A, B, D)), D, Line(B, G) we get D != orthocenter(A, D, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(B, D, orthocenter(A, B, D)), projection(A, i), h we get projection(A, i) != orthocenter(B, D, orthocenter(A, B, D))
By sas_anti_similarity on H, A, C, C, A, H we get anti_similar_triangles(A, C, H, A, H, C)
By sas_anti_similarity on E, A, F, F, A, E we get anti_similar_triangles(A, E, F, A, F, E)
By line_inequality on altitude(midpoint(B, G), A, orthocenter(A, B, D)), Line(D, H), midpoint(B, G) we get Line(D, H) != altitude(midpoint(B, G), A, orthocenter(A, B, D))
By line_inequality on Line(I, orthocenter(A, B, D)), Line(D, H), I we get Line(D, H) != Line(I, orthocenter(A, B, D))
By line_inequality on altitude(E, A, orthocenter(A, D, G)), altitude(A, D, G), E we get altitude(A, D, G) != altitude(E, A, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, G, orthocenter(A, D, G)), G, h we get G != orthocenter(A, G, orthocenter(A, D, G))
By line_inequality on perpendicular_line(F, Line(B, G)), Line(D, E), F we get Line(D, E) != perpendicular_line(F, Line(B, G))
By line_containment_inequality on orthocenter(A, B, orthocenter(A, B, D)), G, i we get G != orthocenter(A, B, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(A, E, orthocenter(A, D, G)), midpoint(B, G), g we get midpoint(B, G) != orthocenter(A, E, orthocenter(A, D, G))
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, midpoint(B, G) we get G not in Line(E, midpoint(B, G))
By line_containment_inequality on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), A, Line(B, G) we get A != orthocenter(A, midpoint(B, G), orthocenter(A, D, G))
By line_inequality on Line(C, orthocenter(A, D, G)), Line(D, E), C we get Line(D, E) != Line(C, orthocenter(A, D, G))
By line_inequality on Line(C, orthocenter(A, D, G)), f, C we get f != Line(C, orthocenter(A, D, G))
By line_inequality on Line(I, orthocenter(A, B, D)), Line(B, C), orthocenter(A, B, D) we get Line(B, C) != Line(I, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(A, G, orthocenter(A, D, G)), orthocenter(A, D, G), Line(D, G) we get orthocenter(A, D, G) != orthocenter(A, G, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(E, G, orthocenter(A, D, G)), D, g we get D != orthocenter(E, G, orthocenter(A, D, G))
By line_inequality on Line(I, orthocenter(A, D, G)), h, orthocenter(A, D, G) we get h != Line(I, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, G, orthocenter(A, D, G)), midpoint(B, G), Line(D, G) we get midpoint(B, G) != orthocenter(A, G, orthocenter(A, D, G))
By line_inequality on Line(F, midpoint(B, G)), Line(D, E), midpoint(B, G) we get Line(D, E) != Line(F, midpoint(B, G))
By line_inequality on Line(I, orthocenter(A, D, G)), Line(D, F), orthocenter(A, D, G) we get Line(D, F) != Line(I, orthocenter(A, D, G))
By line_inequality on perpendicular_line(E, Line(B, G)), Line(C, F), E we get Line(C, F) != perpendicular_line(E, Line(B, G))
By line_containment_inequality on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), I, Line(B, G) we get I != orthocenter(D, midpoint(B, G), orthocenter(A, D, G))
By line_inequality on altitude(midpoint(B, G), A, orthocenter(A, B, D)), altitude(A, B, D), midpoint(B, G) we get altitude(A, B, D) != altitude(midpoint(B, G), A, orthocenter(A, B, D))
By line_inequality on Line(F, midpoint(B, G)), Line(B, G), F we get Line(B, G) != Line(F, midpoint(B, G))
By line_inequality on altitude(midpoint(B, G), I, orthocenter(A, D, G)), f, midpoint(B, G) we get f != altitude(midpoint(B, G), I, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), A, Line(B, G) we get A != orthocenter(D, midpoint(B, G), orthocenter(A, D, G))
By line_containment_inequality on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), E, h we get E != orthocenter(D, midpoint(B, G), orthocenter(A, B, D))
By line_containment_inequality on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), C, h we get C != orthocenter(I, midpoint(B, G), orthocenter(A, D, G))
By not_in_line_equivalent_to_not_collinear_v0_r on B, F, midpoint(B, G) we get B not in Line(F, midpoint(B, G))
By line_containment_inequality on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), D, Line(B, G) we get D != orthocenter(I, midpoint(B, G), orthocenter(A, D, G))
By line_inequality on Line(F, midpoint(B, G)), i, midpoint(B, G) we get i != Line(F, midpoint(B, G))
By line_inequality on perpendicular_line(F, Line(B, G)), Line(B, G), F we get Line(B, G) != perpendicular_line(F, Line(B, G))
By line_inequality on altitude(midpoint(B, G), A, orthocenter(A, B, D)), Line(C, D), midpoint(B, G) we get Line(C, D) != altitude(midpoint(B, G), A, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(F, H, orthocenter(A, B, D)), I, f we get I != orthocenter(F, H, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(A, D, orthocenter(A, D, G)), E, Line(B, G) we get E != orthocenter(A, D, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, D, orthocenter(A, D, G)), projection(A, Line(D, G)), g we get projection(A, Line(D, G)) != orthocenter(A, D, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, G, orthocenter(A, D, G)), E, h we get E != orthocenter(A, G, orthocenter(A, D, G))
By line_inequality on altitude(F, A, orthocenter(A, B, D)), Line(D, G), F we get Line(D, G) != altitude(F, A, orthocenter(A, B, D))
By line_inequality on Line(F, midpoint(B, G)), Line(D, F), midpoint(B, G) we get Line(D, F) != Line(F, midpoint(B, G))
By line_inequality on Line(I, orthocenter(A, D, G)), Line(C, F), I we get Line(C, F) != Line(I, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, D, orthocenter(A, B, D)), E, Line(B, G) we get E != orthocenter(A, D, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(A, G, orthocenter(A, D, G)), C, Line(D, E) we get C != orthocenter(A, G, orthocenter(A, D, G))
By not_in_line_equivalent_to_not_collinear_v0_r on F, orthocenter(A, B, D), I we get F not in Line(I, orthocenter(A, B, D))
By line_inequality on altitude(F, A, orthocenter(A, B, D)), i, F we get i != altitude(F, A, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(A, F, orthocenter(A, B, D)), B, Line(D, F) we get B != orthocenter(A, F, orthocenter(A, B, D))
By line_inequality on altitude(midpoint(B, G), A, orthocenter(A, D, G)), Line(D, F), midpoint(B, G) we get Line(D, F) != altitude(midpoint(B, G), A, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), D, Line(B, G) we get D != orthocenter(A, midpoint(B, G), orthocenter(A, B, D))
By line_containment_inequality on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), orthocenter(A, B, D), h we get orthocenter(A, B, D) != orthocenter(I, midpoint(B, G), orthocenter(A, B, D))
By line_containment_inequality on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), I, Line(B, G) we get I != orthocenter(A, midpoint(B, G), orthocenter(A, D, G))
By line_inequality on Line(E, midpoint(B, G)), Line(B, I), E we get Line(B, I) != Line(E, midpoint(B, G))
By line_inequality on altitude(midpoint(B, G), I, orthocenter(A, D, G)), altitude(A, D, G), midpoint(B, G) we get altitude(A, D, G) != altitude(midpoint(B, G), I, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, D, orthocenter(A, B, D)), orthocenter(A, D, G), i we get orthocenter(A, D, G) != orthocenter(A, D, orthocenter(A, B, D))
By line_inequality on Line(E, midpoint(B, G)), Line(D, G), E we get Line(D, G) != Line(E, midpoint(B, G))
By line_containment_inequality on orthocenter(B, F, orthocenter(A, B, D)), orthocenter(A, B, D), f we get orthocenter(A, B, D) != orthocenter(B, F, orthocenter(A, B, D))
By line_inequality on perpendicular_line(E, Line(B, G)), Line(B, I), E we get Line(B, I) != perpendicular_line(E, Line(B, G))
By line_inequality on Line(E, midpoint(B, G)), Line(C, H), E we get Line(C, H) != Line(E, midpoint(B, G))
By line_inequality on Line(E, midpoint(B, G)), altitude(A, D, G), midpoint(B, G) we get altitude(A, D, G) != Line(E, midpoint(B, G))
By line_containment_inequality on orthocenter(A, F, orthocenter(A, B, D)), projection(A, i), Line(D, F) we get projection(A, i) != orthocenter(A, F, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(A, F, orthocenter(A, B, D)), E, Line(D, F) we get E != orthocenter(A, F, orthocenter(A, B, D))
By line_inequality on altitude(midpoint(B, G), I, orthocenter(A, D, G)), g, midpoint(B, G) we get g != altitude(midpoint(B, G), I, orthocenter(A, D, G))
By line_inequality on altitude(F, A, orthocenter(A, B, D)), Line(C, D), F we get Line(C, D) != altitude(F, A, orthocenter(A, B, D))
By line_inequality on altitude(A, E, midpoint(B, G)), Line(G, I), A we get Line(G, I) != altitude(A, E, midpoint(B, G))
By line_containment_inequality on orthocenter(B, F, orthocenter(A, B, D)), G, f we get G != orthocenter(B, F, orthocenter(A, B, D))
By line_inequality on Line(H, orthocenter(A, B, D)), Line(B, I), orthocenter(A, B, D) we get Line(B, I) != Line(H, orthocenter(A, B, D))
By line_inequality on Line(I, orthocenter(A, D, G)), Line(B, C), I we get Line(B, C) != Line(I, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(B, D, orthocenter(A, B, D)), projection(A, Line(D, G)), h we get projection(A, Line(D, G)) != orthocenter(B, D, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(B, F, orthocenter(A, B, D)), E, f we get E != orthocenter(B, F, orthocenter(A, B, D))
By line_inequality on Line(H, orthocenter(A, B, D)), altitude(A, B, D), H we get altitude(A, B, D) != Line(H, orthocenter(A, B, D))
By line_inequality on altitude(F, H, orthocenter(A, B, D)), altitude(A, D, G), F we get altitude(A, D, G) != altitude(F, H, orthocenter(A, B, D))
By line_inequality on Line(E, midpoint(B, G)), altitude(A, B, D), midpoint(B, G) we get altitude(A, B, D) != Line(E, midpoint(B, G))
By not_in_line_equivalent_to_not_collinear_v0_r on G, I, orthocenter(A, D, G) we get G not in Line(I, orthocenter(A, D, G))
By line_inequality on altitude(midpoint(B, G), I, orthocenter(A, D, G)), altitude(A, B, D), midpoint(B, G) we get altitude(A, B, D) != altitude(midpoint(B, G), I, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), E, h we get E != orthocenter(I, midpoint(B, G), orthocenter(A, B, D))
By line_inequality on altitude(E, C, orthocenter(A, D, G)), i, E we get i != altitude(E, C, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(D, G, orthocenter(A, D, G)), projection(A, i), h we get projection(A, i) != orthocenter(D, G, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), projection(A, Line(D, G)), Line(B, G) we get projection(A, Line(D, G)) != orthocenter(A, midpoint(B, G), orthocenter(A, D, G))
By not_in_line_equivalent_to_not_collinear_v0_r on D, F, midpoint(B, G) we get D not in Line(F, midpoint(B, G))
By line_inequality on Line(E, midpoint(B, G)), Line(D, F), midpoint(B, G) we get Line(D, F) != Line(E, midpoint(B, G))
By line_inequality on Line(F, midpoint(B, G)), g, F we get g != Line(F, midpoint(B, G))
By line_containment_inequality on orthocenter(C, E, orthocenter(A, D, G)), G, Line(D, E) we get G != orthocenter(C, E, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(E, G, orthocenter(A, D, G)), F, g we get F != orthocenter(E, G, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), G, h we get G != orthocenter(D, midpoint(B, G), orthocenter(A, B, D))
By line_inequality on altitude(A, E, midpoint(B, G)), Line(C, F), A we get Line(C, F) != altitude(A, E, midpoint(B, G))
By line_inequality on altitude(midpoint(B, G), A, orthocenter(A, D, G)), g, midpoint(B, G) we get g != altitude(midpoint(B, G), A, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(B, D, orthocenter(A, B, D)), C, f we get C != orthocenter(B, D, orthocenter(A, B, D))
By line_inequality on altitude(midpoint(B, G), I, orthocenter(A, D, G)), Line(D, H), midpoint(B, G) we get Line(D, H) != altitude(midpoint(B, G), I, orthocenter(A, D, G))
By line_inequality on perpendicular_line(midpoint(B, G), Line(D, F)), Line(G, I), midpoint(B, G) we get Line(G, I) != perpendicular_line(midpoint(B, G), Line(D, F))
By line_inequality on perpendicular_line(midpoint(B, G), Line(D, E)), altitude(A, B, D), midpoint(B, G) we get altitude(A, B, D) != perpendicular_line(midpoint(B, G), Line(D, E))
By line_containment_inequality on orthocenter(C, E, orthocenter(A, D, G)), orthocenter(A, B, D), Line(D, E) we get orthocenter(A, B, D) != orthocenter(C, E, orthocenter(A, D, G))
By line_inequality on perpendicular_line(midpoint(B, G), Line(D, E)), Line(C, I), midpoint(B, G) we get Line(C, I) != perpendicular_line(midpoint(B, G), Line(D, E))
By line_containment_inequality on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), B, h we get B != orthocenter(A, midpoint(B, G), orthocenter(A, D, G))
By line_inequality on altitude(F, H, orthocenter(A, B, D)), Line(C, I), F we get Line(C, I) != altitude(F, H, orthocenter(A, B, D))
By line_inequality on altitude(E, A, orthocenter(A, D, G)), i, E we get i != altitude(E, A, orthocenter(A, D, G))
By line_inequality on altitude(F, A, orthocenter(A, B, D)), g, F we get g != altitude(F, A, orthocenter(A, B, D))
By line_inequality on altitude(midpoint(B, G), I, orthocenter(A, B, D)), Line(B, I), midpoint(B, G) we get Line(B, I) != altitude(midpoint(B, G), I, orthocenter(A, B, D))
By line_inequality on altitude(A, E, midpoint(B, G)), i, A we get i != altitude(A, E, midpoint(B, G))
By line_inequality on Line(I, orthocenter(A, B, D)), Line(B, I), orthocenter(A, B, D) we get Line(B, I) != Line(I, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(A, D, orthocenter(A, B, D)), projection(A, i), Line(B, G) we get projection(A, i) != orthocenter(A, D, orthocenter(A, B, D))
By not_in_line_equivalent_to_not_collinear_v0_r on midpoint(B, G), orthocenter(A, B, D), I we get midpoint(B, G) not in Line(I, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), G, h we get G != orthocenter(A, midpoint(B, G), orthocenter(A, B, D))
By line_containment_inequality on orthocenter(A, E, orthocenter(A, D, G)), projection(A, Line(D, G)), g we get projection(A, Line(D, G)) != orthocenter(A, E, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(B, D, orthocenter(A, B, D)), G, altitude(A, B, D) we get G != orthocenter(B, D, orthocenter(A, B, D))
By line_inequality on Line(I, orthocenter(A, D, G)), altitude(A, B, D), I we get altitude(A, B, D) != Line(I, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), orthocenter(A, B, D), h we get orthocenter(A, B, D) != orthocenter(D, midpoint(B, G), orthocenter(A, D, G))
By line_containment_inequality on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), C, h we get C != orthocenter(D, midpoint(B, G), orthocenter(A, D, G))
By line_inequality on altitude(E, A, orthocenter(A, D, G)), Line(D, G), E we get Line(D, G) != altitude(E, A, orthocenter(A, D, G))
By line_inequality on altitude(midpoint(B, G), A, orthocenter(A, B, D)), Line(D, F), midpoint(B, G) we get Line(D, F) != altitude(midpoint(B, G), A, orthocenter(A, B, D))
By line_inequality on Line(E, midpoint(B, G)), Line(D, E), midpoint(B, G) we get Line(D, E) != Line(E, midpoint(B, G))
By line_inequality on Line(C, orthocenter(A, D, G)), Line(D, H), C we get Line(D, H) != Line(C, orthocenter(A, D, G))
By not_in_line_equivalent_to_not_collinear_v0_r on midpoint(B, G), orthocenter(A, D, G), I we get midpoint(B, G) not in Line(I, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), E, Line(B, G) we get E != orthocenter(A, midpoint(B, G), orthocenter(A, D, G))
By line_containment_inequality on orthocenter(D, G, orthocenter(A, D, G)), C, altitude(A, D, G) we get C != orthocenter(D, G, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(F, H, orthocenter(A, B, D)), E, f we get E != orthocenter(F, H, orthocenter(A, B, D))
By line_inequality on Line(C, orthocenter(A, D, G)), Line(D, G), C we get Line(D, G) != Line(C, orthocenter(A, D, G))
By line_inequality on altitude(A, E, midpoint(B, G)), Line(B, I), A we get Line(B, I) != altitude(A, E, midpoint(B, G))
By line_inequality on perpendicular_line(midpoint(B, G), Line(D, F)), f, midpoint(B, G) we get f != perpendicular_line(midpoint(B, G), Line(D, F))
By line_inequality on Line(H, orthocenter(A, B, D)), Line(D, G), orthocenter(A, B, D) we get Line(D, G) != Line(H, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), B, h we get B != orthocenter(D, midpoint(B, G), orthocenter(A, D, G))
By not_in_line_equivalent_to_not_collinear_v0_r on orthocenter(A, B, D), E, midpoint(B, G) we get orthocenter(A, B, D) not in Line(E, midpoint(B, G))
By line_inequality on Line(C, orthocenter(A, D, G)), Line(G, I), C we get Line(G, I) != Line(C, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), F, Line(B, G) we get F != orthocenter(A, midpoint(B, G), orthocenter(A, D, G))
By line_inequality on Line(H, orthocenter(A, B, D)), Line(B, G), H we get Line(B, G) != Line(H, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), F, h we get F != orthocenter(A, midpoint(B, G), orthocenter(A, B, D))
By line_inequality on altitude(A, E, midpoint(B, G)), Line(C, I), A we get Line(C, I) != altitude(A, E, midpoint(B, G))
By line_inequality on perpendicular_line(F, Line(B, G)), Line(D, H), F we get Line(D, H) != perpendicular_line(F, Line(B, G))
By line_containment_inequality on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), I, Line(B, G) we get I != orthocenter(I, midpoint(B, G), orthocenter(A, B, D))
By line_inequality on altitude(E, A, orthocenter(A, D, G)), f, E we get f != altitude(E, A, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(B, D, orthocenter(A, B, D)), D, f we get D != orthocenter(B, D, orthocenter(A, B, D))
By line_inequality on altitude(E, C, orthocenter(A, D, G)), h, E we get h != altitude(E, C, orthocenter(A, D, G))
By line_inequality on altitude(F, A, orthocenter(A, B, D)), Line(C, I), F we get Line(C, I) != altitude(F, A, orthocenter(A, B, D))
By line_inequality on Line(I, orthocenter(A, D, G)), Line(C, H), I we get Line(C, H) != Line(I, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(E, G, orthocenter(A, D, G)), H, Line(D, E) we get H != orthocenter(E, G, orthocenter(A, D, G))
By line_inequality on Line(H, orthocenter(A, B, D)), altitude(A, D, G), orthocenter(A, B, D) we get altitude(A, D, G) != Line(H, orthocenter(A, B, D))
By line_inequality on altitude(midpoint(B, G), A, orthocenter(A, B, D)), f, midpoint(B, G) we get f != altitude(midpoint(B, G), A, orthocenter(A, B, D))
By line_inequality on perpendicular_line(F, Line(B, G)), Line(B, C), F we get Line(B, C) != perpendicular_line(F, Line(B, G))
By line_containment_inequality on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), H, h we get H != orthocenter(D, midpoint(B, G), orthocenter(A, D, G))
By line_inequality on altitude(midpoint(B, G), A, orthocenter(A, B, D)), Line(D, G), midpoint(B, G) we get Line(D, G) != altitude(midpoint(B, G), A, orthocenter(A, B, D))
By line_inequality on perpendicular_line(midpoint(B, G), Line(D, E)), Line(D, E), midpoint(B, G) we get Line(D, E) != perpendicular_line(midpoint(B, G), Line(D, E))
By not_in_line_equivalent_to_not_collinear_v0_r on projection(A, Line(D, G)), orthocenter(A, D, G), C we get projection(A, Line(D, G)) not in Line(C, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), projection(A, i), Line(B, G) we get projection(A, i) != orthocenter(I, midpoint(B, G), orthocenter(A, B, D))
By line_inequality on altitude(midpoint(B, G), A, orthocenter(A, D, G)), Line(D, E), midpoint(B, G) we get Line(D, E) != altitude(midpoint(B, G), A, orthocenter(A, D, G))
By line_inequality on Line(I, orthocenter(A, D, G)), g, orthocenter(A, D, G) we get g != Line(I, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(B, F, orthocenter(A, B, D)), H, Line(D, F) we get H != orthocenter(B, F, orthocenter(A, B, D))
By not_in_line_equivalent_to_not_collinear_v0_r on G, orthocenter(A, D, G), C we get G not in Line(C, orthocenter(A, D, G))
By line_inequality on Line(I, orthocenter(A, B, D)), Line(E, H), I we get Line(E, H) != Line(I, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), A, Line(B, G) we get A != orthocenter(D, midpoint(B, G), orthocenter(A, B, D))
By not_in_line_equivalent_to_not_collinear_v0_r on H, midpoint(B, G), F we get H not in Line(F, midpoint(B, G))
By not_in_line_equivalent_to_not_collinear_v0_r on C, midpoint(B, G), E we get C not in Line(E, midpoint(B, G))
By not_in_line_equivalent_to_not_collinear_v0_r on F, H, orthocenter(A, B, D) we get F not in Line(H, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(A, B, orthocenter(A, B, D)), C, h we get C != orthocenter(A, B, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(B, D, orthocenter(A, B, D)), I, f we get I != orthocenter(B, D, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(D, G, orthocenter(A, D, G)), H, g we get H != orthocenter(D, G, orthocenter(A, D, G))
By line_inequality on altitude(midpoint(B, G), I, orthocenter(A, D, G)), Line(D, G), midpoint(B, G) we get Line(D, G) != altitude(midpoint(B, G), I, orthocenter(A, D, G))
By line_inequality on Line(I, orthocenter(A, B, D)), Line(G, I), orthocenter(A, B, D) we get Line(G, I) != Line(I, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(A, F, orthocenter(A, B, D)), A, Line(D, F) we get A != orthocenter(A, F, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(A, E, orthocenter(A, D, G)), F, g we get F != orthocenter(A, E, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, D, orthocenter(A, B, D)), midpoint(B, G), i we get midpoint(B, G) != orthocenter(A, D, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(A, G, orthocenter(A, D, G)), H, Line(D, E) we get H != orthocenter(A, G, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(B, D, orthocenter(A, B, D)), F, altitude(A, B, D) we get F != orthocenter(B, D, orthocenter(A, B, D))
By line_inequality on perpendicular_line(midpoint(B, G), Line(D, F)), Line(B, C), midpoint(B, G) we get Line(B, C) != perpendicular_line(midpoint(B, G), Line(D, F))
By line_containment_inequality on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), H, Line(B, G) we get H != orthocenter(I, midpoint(B, G), orthocenter(A, D, G))
By not_in_line_equivalent_to_not_collinear_v0_r on orthocenter(A, B, D), F, midpoint(B, G) we get orthocenter(A, B, D) not in Line(F, midpoint(B, G))
By not_in_line_equivalent_to_not_collinear_v0_r on E, I, orthocenter(A, D, G) we get E not in Line(I, orthocenter(A, D, G))
By line_inequality on altitude(midpoint(B, G), A, orthocenter(A, D, G)), altitude(A, B, D), midpoint(B, G) we get altitude(A, B, D) != altitude(midpoint(B, G), A, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), I, Line(B, G) we get I != orthocenter(A, midpoint(B, G), orthocenter(A, B, D))
By line_containment_inequality on orthocenter(C, E, orthocenter(A, D, G)), I, g we get I != orthocenter(C, E, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, B, orthocenter(A, B, D)), E, Line(D, F) we get E != orthocenter(A, B, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(A, G, orthocenter(A, D, G)), projection(A, i), h we get projection(A, i) != orthocenter(A, G, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), B, h we get B != orthocenter(I, midpoint(B, G), orthocenter(A, B, D))
By line_inequality on altitude(F, H, orthocenter(A, B, D)), g, F we get g != altitude(F, H, orthocenter(A, B, D))
By line_inequality on altitude(F, H, orthocenter(A, B, D)), altitude(A, B, D), F we get altitude(A, B, D) != altitude(F, H, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(A, D, orthocenter(A, B, D)), I, i we get I != orthocenter(A, D, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(A, D, orthocenter(A, D, G)), I, Line(B, G) we get I != orthocenter(A, D, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(B, D, orthocenter(A, B, D)), H, altitude(A, B, D) we get H != orthocenter(B, D, orthocenter(A, B, D))
By line_inequality on Line(I, orthocenter(A, B, D)), Line(D, G), orthocenter(A, B, D) we get Line(D, G) != Line(I, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(E, G, orthocenter(A, D, G)), B, Line(D, E) we get B != orthocenter(E, G, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, B, orthocenter(A, B, D)), B, h we get B != orthocenter(A, B, orthocenter(A, B, D))
By line_inequality on altitude(F, A, orthocenter(A, B, D)), Line(B, G), F we get Line(B, G) != altitude(F, A, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), E, h we get E != orthocenter(A, midpoint(B, G), orthocenter(A, B, D))
By line_inequality on altitude(F, H, orthocenter(A, B, D)), Line(G, I), F we get Line(G, I) != altitude(F, H, orthocenter(A, B, D))
By not_in_line_equivalent_to_not_collinear_v0_r on B, E, midpoint(B, G) we get B not in Line(E, midpoint(B, G))
By not_in_line_equivalent_to_not_collinear_v0_r on D, H, orthocenter(A, B, D) we get D not in Line(H, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(A, G, orthocenter(A, D, G)), I, Line(D, G) we get I != orthocenter(A, G, orthocenter(A, D, G))
By line_inequality on altitude(A, F, midpoint(B, G)), Line(C, D), A we get Line(C, D) != altitude(A, F, midpoint(B, G))
By line_inequality on Line(H, orthocenter(A, B, D)), i, orthocenter(A, B, D) we get i != Line(H, orthocenter(A, B, D))
By line_inequality on perpendicular_line(midpoint(B, G), Line(D, E)), Line(B, C), midpoint(B, G) we get Line(B, C) != perpendicular_line(midpoint(B, G), Line(D, E))
By not_in_line_equivalent_to_not_collinear_v0_r on D, I, orthocenter(A, D, G) we get D not in Line(I, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(F, H, orthocenter(A, B, D)), D, f we get D != orthocenter(F, H, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(D, G, orthocenter(A, D, G)), B, g we get B != orthocenter(D, G, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(B, F, orthocenter(A, B, D)), orthocenter(A, D, G), f we get orthocenter(A, D, G) != orthocenter(B, F, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(D, G, orthocenter(A, D, G)), projection(A, Line(D, G)), h we get projection(A, Line(D, G)) != orthocenter(D, G, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), projection(A, i), Line(B, G) we get projection(A, i) != orthocenter(A, midpoint(B, G), orthocenter(A, B, D))
By line_containment_inequality on orthocenter(A, F, orthocenter(A, B, D)), C, f we get C != orthocenter(A, F, orthocenter(A, B, D))
By not_in_line_equivalent_to_not_collinear_v0_r on I, midpoint(B, G), F we get I not in Line(F, midpoint(B, G))
By line_containment_inequality on orthocenter(D, G, orthocenter(A, D, G)), midpoint(B, G), g we get midpoint(B, G) != orthocenter(D, G, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, G, orthocenter(A, D, G)), A, Line(D, G) we get A != orthocenter(A, G, orthocenter(A, D, G))
By not_in_line_equivalent_to_not_collinear_v0_r on A, C, orthocenter(A, D, G) we get A not in Line(C, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(D, G, orthocenter(A, D, G)), D, g we get D != orthocenter(D, G, orthocenter(A, D, G))
By line_inequality on altitude(E, A, orthocenter(A, D, G)), Line(B, C), E we get Line(B, C) != altitude(E, A, orthocenter(A, D, G))
By line_inequality on altitude(E, A, orthocenter(A, D, G)), Line(C, F), E we get Line(C, F) != altitude(E, A, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, D, orthocenter(A, D, G)), D, g we get D != orthocenter(A, D, orthocenter(A, D, G))
By line_inequality on Line(I, orthocenter(A, D, G)), Line(D, H), I we get Line(D, H) != Line(I, orthocenter(A, D, G))
By line_inequality on perpendicular_line(F, Line(B, G)), Line(G, I), F we get Line(G, I) != perpendicular_line(F, Line(B, G))
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, midpoint(B, G) we get D not in Line(E, midpoint(B, G))
By line_containment_inequality on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), orthocenter(A, D, G), h we get orthocenter(A, D, G) != orthocenter(A, midpoint(B, G), orthocenter(A, B, D))
By line_containment_inequality on orthocenter(A, E, orthocenter(A, D, G)), projection(A, i), Line(D, E) we get projection(A, i) != orthocenter(A, E, orthocenter(A, D, G))
By line_inequality on perpendicular_line(E, Line(B, G)), Line(B, G), E we get Line(B, G) != perpendicular_line(E, Line(B, G))
By not_in_line_equivalent_to_not_collinear_v0_r on E, C, orthocenter(A, D, G) we get E not in Line(C, orthocenter(A, D, G))
By not_in_line_equivalent_to_not_collinear_v0_r on orthocenter(A, D, G), I, orthocenter(A, B, D) we get orthocenter(A, D, G) not in Line(I, orthocenter(A, B, D))
By line_inequality on altitude(midpoint(B, G), I, orthocenter(A, B, D)), altitude(A, B, D), midpoint(B, G) we get altitude(A, B, D) != altitude(midpoint(B, G), I, orthocenter(A, B, D))
By line_inequality on Line(C, orthocenter(A, D, G)), h, orthocenter(A, D, G) we get h != Line(C, orthocenter(A, D, G))
By line_inequality on Line(E, midpoint(B, G)), f, midpoint(B, G) we get f != Line(E, midpoint(B, G))
By not_in_line_equivalent_to_not_collinear_v0_r on orthocenter(A, D, G), orthocenter(A, B, D), H we get orthocenter(A, D, G) not in Line(H, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(D, G, orthocenter(A, D, G)), I, altitude(A, D, G) we get I != orthocenter(D, G, orthocenter(A, D, G))
By line_inequality on Line(H, orthocenter(A, B, D)), Line(C, F), H we get Line(C, F) != Line(H, orthocenter(A, B, D))
By line_inequality on perpendicular_line(F, Line(B, G)), i, F we get i != perpendicular_line(F, Line(B, G))
By line_inequality on perpendicular_line(F, Line(B, G)), altitude(A, D, G), F we get altitude(A, D, G) != perpendicular_line(F, Line(B, G))
By line_containment_inequality on orthocenter(B, D, orthocenter(A, B, D)), midpoint(B, G), altitude(A, B, D) we get midpoint(B, G) != orthocenter(B, D, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), H, Line(B, G) we get H != orthocenter(D, midpoint(B, G), orthocenter(A, B, D))
By line_inequality on perpendicular_line(midpoint(B, G), Line(D, E)), f, midpoint(B, G) we get f != perpendicular_line(midpoint(B, G), Line(D, E))
By line_inequality on altitude(midpoint(B, G), I, orthocenter(A, B, D)), Line(D, G), midpoint(B, G) we get Line(D, G) != altitude(midpoint(B, G), I, orthocenter(A, B, D))
By line_inequality on altitude(A, F, midpoint(B, G)), Line(D, E), A we get Line(D, E) != altitude(A, F, midpoint(B, G))
By line_containment_inequality on orthocenter(E, G, orthocenter(A, D, G)), I, Line(D, E) we get I != orthocenter(E, G, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, F, orthocenter(A, B, D)), D, f we get D != orthocenter(A, F, orthocenter(A, B, D))
By line_inequality on altitude(F, H, orthocenter(A, B, D)), Line(D, H), F we get Line(D, H) != altitude(F, H, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), projection(A, Line(D, G)), Line(B, G) we get projection(A, Line(D, G)) != orthocenter(I, midpoint(B, G), orthocenter(A, D, G))
By line_containment_inequality on orthocenter(C, E, orthocenter(A, D, G)), H, Line(D, E) we get H != orthocenter(C, E, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, F, orthocenter(A, B, D)), orthocenter(A, D, G), f we get orthocenter(A, D, G) != orthocenter(A, F, orthocenter(A, B, D))
By line_inequality on Line(I, orthocenter(A, D, G)), Line(B, I), orthocenter(A, D, G) we get Line(B, I) != Line(I, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(B, F, orthocenter(A, B, D)), projection(A, Line(D, G)), f we get projection(A, Line(D, G)) != orthocenter(B, F, orthocenter(A, B, D))
By line_inequality on Line(F, midpoint(B, G)), altitude(A, B, D), midpoint(B, G) we get altitude(A, B, D) != Line(F, midpoint(B, G))
By line_containment_inequality on orthocenter(B, D, orthocenter(A, B, D)), B, h we get B != orthocenter(B, D, orthocenter(A, B, D))
By line_inequality on Line(E, midpoint(B, G)), Line(G, I), E we get Line(G, I) != Line(E, midpoint(B, G))
By line_inequality on Line(C, orthocenter(A, D, G)), g, orthocenter(A, D, G) we get g != Line(C, orthocenter(A, D, G))
By line_inequality on Line(E, midpoint(B, G)), Line(B, G), E we get Line(B, G) != Line(E, midpoint(B, G))
By line_containment_inequality on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), D, Line(B, G) we get D != orthocenter(D, midpoint(B, G), orthocenter(A, B, D))
By line_inequality on perpendicular_line(E, Line(B, G)), altitude(A, B, D), E we get altitude(A, B, D) != perpendicular_line(E, Line(B, G))
By line_containment_inequality on orthocenter(A, E, orthocenter(A, D, G)), C, Line(D, E) we get C != orthocenter(A, E, orthocenter(A, D, G))
By line_inequality on altitude(F, A, orthocenter(A, B, D)), Line(D, H), F we get Line(D, H) != altitude(F, A, orthocenter(A, B, D))
By line_inequality on Line(I, orthocenter(A, B, D)), Line(C, D), orthocenter(A, B, D) we get Line(C, D) != Line(I, orthocenter(A, B, D))
By line_inequality on perpendicular_line(midpoint(B, G), Line(D, F)), Line(C, D), midpoint(B, G) we get Line(C, D) != perpendicular_line(midpoint(B, G), Line(D, F))
By line_containment_inequality on orthocenter(A, F, orthocenter(A, B, D)), projection(A, Line(D, G)), f we get projection(A, Line(D, G)) != orthocenter(A, F, orthocenter(A, B, D))
By line_inequality on altitude(midpoint(B, G), I, orthocenter(A, B, D)), Line(G, I), midpoint(B, G) we get Line(G, I) != altitude(midpoint(B, G), I, orthocenter(A, B, D))
By line_inequality on altitude(E, C, orthocenter(A, D, G)), Line(C, H), E we get Line(C, H) != altitude(E, C, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, B, orthocenter(A, B, D)), F, h we get F != orthocenter(A, B, orthocenter(A, B, D))
By line_inequality on altitude(midpoint(B, G), A, orthocenter(A, D, G)), Line(G, I), midpoint(B, G) we get Line(G, I) != altitude(midpoint(B, G), A, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, F, orthocenter(A, B, D)), midpoint(B, G), f we get midpoint(B, G) != orthocenter(A, F, orthocenter(A, B, D))
By line_inequality on altitude(E, C, orthocenter(A, D, G)), altitude(A, D, G), E we get altitude(A, D, G) != altitude(E, C, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, D, orthocenter(A, D, G)), midpoint(B, G), Line(D, G) we get midpoint(B, G) != orthocenter(A, D, orthocenter(A, D, G))
By not_in_line_equivalent_to_not_collinear_v0_r on midpoint(B, G), C, orthocenter(A, D, G) we get midpoint(B, G) not in Line(C, orthocenter(A, D, G))
By line_inequality on altitude(E, C, orthocenter(A, D, G)), Line(B, C), E we get Line(B, C) != altitude(E, C, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, E, orthocenter(A, D, G)), I, Line(D, E) we get I != orthocenter(A, E, orthocenter(A, D, G))
By line_inequality on altitude(A, E, midpoint(B, G)), Line(E, F), A we get Line(E, F) != altitude(A, E, midpoint(B, G))
By line_inequality on altitude(F, A, orthocenter(A, B, D)), altitude(A, D, G), F we get altitude(A, D, G) != altitude(F, A, orthocenter(A, B, D))
By line_inequality on perpendicular_line(midpoint(B, G), Line(D, F)), Line(C, I), midpoint(B, G) we get Line(C, I) != perpendicular_line(midpoint(B, G), Line(D, F))
By line_inequality on perpendicular_line(E, Line(B, G)), Line(B, C), E we get Line(B, C) != perpendicular_line(E, Line(B, G))
By line_containment_inequality on orthocenter(E, G, orthocenter(A, D, G)), C, Line(D, E) we get C != orthocenter(E, G, orthocenter(A, D, G))
By line_inequality on Line(I, orthocenter(A, B, D)), i, I we get i != Line(I, orthocenter(A, B, D))
By line_inequality on Line(E, midpoint(B, G)), Line(D, H), midpoint(B, G) we get Line(D, H) != Line(E, midpoint(B, G))
By line_containment_inequality on orthocenter(F, H, orthocenter(A, B, D)), B, Line(D, F) we get B != orthocenter(F, H, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(B, F, orthocenter(A, B, D)), B, Line(D, F) we get B != orthocenter(B, F, orthocenter(A, B, D))
By line_inequality on altitude(midpoint(B, G), A, orthocenter(A, B, D)), Line(C, I), midpoint(B, G) we get Line(C, I) != altitude(midpoint(B, G), A, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(C, E, orthocenter(A, D, G)), projection(A, i), Line(D, E) we get projection(A, i) != orthocenter(C, E, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), C, h we get C != orthocenter(A, midpoint(B, G), orthocenter(A, B, D))
By line_inequality on altitude(midpoint(B, G), I, orthocenter(A, B, D)), Line(D, H), midpoint(B, G) we get Line(D, H) != altitude(midpoint(B, G), I, orthocenter(A, B, D))
By not_in_line_equivalent_to_not_collinear_v0_r on A, E, midpoint(B, G) we get A not in Line(E, midpoint(B, G))
By line_inequality on Line(H, orthocenter(A, B, D)), Line(E, F), orthocenter(A, B, D) we get Line(E, F) != Line(H, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), E, Line(B, G) we get E != orthocenter(I, midpoint(B, G), orthocenter(A, D, G))
By not_in_line_equivalent_to_not_collinear_v0_r on A, midpoint(B, G), F we get A not in Line(F, midpoint(B, G))
By line_inequality on altitude(F, A, orthocenter(A, B, D)), Line(C, H), F we get Line(C, H) != altitude(F, A, orthocenter(A, B, D))
By line_inequality on altitude(A, F, midpoint(B, G)), Line(D, H), A we get Line(D, H) != altitude(A, F, midpoint(B, G))
By line_inequality on perpendicular_line(E, Line(B, G)), h, E we get h != perpendicular_line(E, Line(B, G))
By line_inequality on perpendicular_line(E, Line(B, G)), i, E we get i != perpendicular_line(E, Line(B, G))
By line_containment_inequality on orthocenter(C, E, orthocenter(A, D, G)), F, Line(D, E) we get F != orthocenter(C, E, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), I, Line(B, G) we get I != orthocenter(I, midpoint(B, G), orthocenter(A, D, G))
By line_inequality on Line(C, orthocenter(A, D, G)), i, C we get i != Line(C, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(C, E, orthocenter(A, D, G)), orthocenter(A, D, G), g we get orthocenter(A, D, G) != orthocenter(C, E, orthocenter(A, D, G))
By line_inequality on altitude(midpoint(B, G), I, orthocenter(A, D, G)), i, midpoint(B, G) we get i != altitude(midpoint(B, G), I, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, D, orthocenter(A, D, G)), orthocenter(A, D, G), Line(D, G) we get orthocenter(A, D, G) != orthocenter(A, D, orthocenter(A, D, G))
By not_in_line_equivalent_to_not_collinear_v0_r on projection(A, Line(D, G)), A, orthocenter(A, B, D) we get projection(A, Line(D, G)) not in Line(A, orthocenter(A, B, D))
By line_inequality on altitude(E, C, orthocenter(A, D, G)), f, E we get f != altitude(E, C, orthocenter(A, D, G))
By line_inequality on altitude(midpoint(B, G), I, orthocenter(A, B, D)), Line(D, F), midpoint(B, G) we get Line(D, F) != altitude(midpoint(B, G), I, orthocenter(A, B, D))
By line_inequality on perpendicular_line(E, Line(B, G)), Line(G, I), E we get Line(G, I) != perpendicular_line(E, Line(B, G))
By line_inequality on altitude(E, A, orthocenter(A, D, G)), Line(B, G), E we get Line(B, G) != altitude(E, A, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, E, orthocenter(A, D, G)), B, g we get B != orthocenter(A, E, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, B, orthocenter(A, B, D)), A, i we get A != orthocenter(A, B, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(A, D, orthocenter(A, B, D)), A, i we get A != orthocenter(A, D, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(A, E, orthocenter(A, D, G)), A, Line(D, E) we get A != orthocenter(A, E, orthocenter(A, D, G))
By line_inequality on Line(C, orthocenter(A, D, G)), Line(E, F), orthocenter(A, D, G) we get Line(E, F) != Line(C, orthocenter(A, D, G))
By line_inequality on altitude(A, F, midpoint(B, G)), i, A we get i != altitude(A, F, midpoint(B, G))
By line_inequality on altitude(midpoint(B, G), A, orthocenter(A, B, D)), Line(D, E), midpoint(B, G) we get Line(D, E) != altitude(midpoint(B, G), A, orthocenter(A, B, D))
By line_inequality on altitude(midpoint(B, G), A, orthocenter(A, B, D)), Line(B, I), midpoint(B, G) we get Line(B, I) != altitude(midpoint(B, G), A, orthocenter(A, B, D))
By line_inequality on Line(F, midpoint(B, G)), Line(D, H), F we get Line(D, H) != Line(F, midpoint(B, G))
By line_inequality on altitude(E, C, orthocenter(A, D, G)), Line(C, F), E we get Line(C, F) != altitude(E, C, orthocenter(A, D, G))
By line_inequality on perpendicular_line(F, Line(B, G)), Line(E, H), F we get Line(E, H) != perpendicular_line(F, Line(B, G))
By line_inequality on Line(C, orthocenter(A, D, G)), altitude(A, D, G), C we get altitude(A, D, G) != Line(C, orthocenter(A, D, G))
By not_in_line_equivalent_to_not_collinear_v0_r on D, C, orthocenter(A, D, G) we get D not in Line(C, orthocenter(A, D, G))
By line_inequality on perpendicular_line(F, Line(B, G)), h, F we get h != perpendicular_line(F, Line(B, G))
By line_inequality on altitude(E, A, orthocenter(A, D, G)), altitude(A, B, D), E we get altitude(A, B, D) != altitude(E, A, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), B, h we get B != orthocenter(D, midpoint(B, G), orthocenter(A, B, D))
By line_inequality on perpendicular_line(midpoint(B, G), Line(D, E)), Line(G, I), midpoint(B, G) we get Line(G, I) != perpendicular_line(midpoint(B, G), Line(D, E))
By line_inequality on altitude(midpoint(B, G), A, orthocenter(A, B, D)), g, midpoint(B, G) we get g != altitude(midpoint(B, G), A, orthocenter(A, B, D))
By line_inequality on altitude(F, H, orthocenter(A, B, D)), Line(C, D), F we get Line(C, D) != altitude(F, H, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(A, D, orthocenter(A, B, D)), G, f we get G != orthocenter(A, D, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(B, F, orthocenter(A, B, D)), I, f we get I != orthocenter(B, F, orthocenter(A, B, D))
By line_inequality on Line(I, orthocenter(A, B, D)), Line(D, F), I we get Line(D, F) != Line(I, orthocenter(A, B, D))
By line_inequality on perpendicular_line(midpoint(B, G), Line(D, F)), i, midpoint(B, G) we get i != perpendicular_line(midpoint(B, G), Line(D, F))
By line_containment_inequality on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), H, Line(B, G) we get H != orthocenter(I, midpoint(B, G), orthocenter(A, B, D))
By line_inequality on altitude(A, E, midpoint(B, G)), Line(D, E), A we get Line(D, E) != altitude(A, E, midpoint(B, G))
By line_inequality on altitude(F, A, orthocenter(A, B, D)), Line(E, H), F we get Line(E, H) != altitude(F, A, orthocenter(A, B, D))
By line_inequality on altitude(F, H, orthocenter(A, B, D)), Line(D, G), F we get Line(D, G) != altitude(F, H, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(A, E, orthocenter(A, D, G)), D, g we get D != orthocenter(A, E, orthocenter(A, D, G))
By line_inequality on altitude(A, F, midpoint(B, G)), Line(C, H), A we get Line(C, H) != altitude(A, F, midpoint(B, G))
By line_inequality on Line(F, midpoint(B, G)), f, midpoint(B, G) we get f != Line(F, midpoint(B, G))
By line_inequality on altitude(midpoint(B, G), I, orthocenter(A, D, G)), Line(D, F), midpoint(B, G) we get Line(D, F) != altitude(midpoint(B, G), I, orthocenter(A, D, G))
By line_inequality on altitude(E, A, orthocenter(A, D, G)), Line(D, H), E we get Line(D, H) != altitude(E, A, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), D, Line(B, G) we get D != orthocenter(A, midpoint(B, G), orthocenter(A, D, G))
By line_inequality on altitude(midpoint(B, G), I, orthocenter(A, D, G)), Line(B, I), midpoint(B, G) we get Line(B, I) != altitude(midpoint(B, G), I, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(B, F, orthocenter(A, B, D)), projection(A, i), Line(D, F) we get projection(A, i) != orthocenter(B, F, orthocenter(A, B, D))
By line_inequality on Line(I, orthocenter(A, B, D)), Line(C, H), I we get Line(C, H) != Line(I, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(I, midpoint(B, G), orthocenter(A, D, G)), orthocenter(A, B, D), h we get orthocenter(A, B, D) != orthocenter(I, midpoint(B, G), orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, D, orthocenter(A, D, G)), A, Line(D, G) we get A != orthocenter(A, D, orthocenter(A, D, G))
By not_in_line_equivalent_to_not_collinear_v0_r on B, I, orthocenter(A, B, D) we get B not in Line(I, orthocenter(A, B, D))
By line_inequality on altitude(A, E, midpoint(B, G)), Line(E, H), A we get Line(E, H) != altitude(A, E, midpoint(B, G))
By line_inequality on perpendicular_line(midpoint(B, G), Line(D, E)), g, midpoint(B, G) we get g != perpendicular_line(midpoint(B, G), Line(D, E))
By line_containment_inequality on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), G, h we get G != orthocenter(D, midpoint(B, G), orthocenter(A, D, G))
By line_containment_inequality on orthocenter(E, G, orthocenter(A, D, G)), projection(A, Line(D, G)), g we get projection(A, Line(D, G)) != orthocenter(E, G, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), F, h we get F != orthocenter(I, midpoint(B, G), orthocenter(A, B, D))
By line_inequality on Line(C, orthocenter(A, D, G)), Line(B, I), C we get Line(B, I) != Line(C, orthocenter(A, D, G))
By line_inequality on altitude(midpoint(B, G), I, orthocenter(A, B, D)), f, midpoint(B, G) we get f != altitude(midpoint(B, G), I, orthocenter(A, B, D))
By line_inequality on altitude(midpoint(B, G), I, orthocenter(A, B, D)), Line(B, C), midpoint(B, G) we get Line(B, C) != altitude(midpoint(B, G), I, orthocenter(A, B, D))
By line_inequality on Line(F, midpoint(B, G)), Line(C, I), midpoint(B, G) we get Line(C, I) != Line(F, midpoint(B, G))
By line_containment_inequality on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), E, h we get E != orthocenter(D, midpoint(B, G), orthocenter(A, D, G))
By line_inequality on altitude(midpoint(B, G), I, orthocenter(A, B, D)), i, midpoint(B, G) we get i != altitude(midpoint(B, G), I, orthocenter(A, B, D))
By line_inequality on Line(E, midpoint(B, G)), h, E we get h != Line(E, midpoint(B, G))
By not_in_line_equivalent_to_not_collinear_v0_r on projection(A, i), H, orthocenter(A, B, D) we get projection(A, i) not in Line(H, orthocenter(A, B, D))
By line_inequality on Line(H, orthocenter(A, B, D)), Line(G, I), H we get Line(G, I) != Line(H, orthocenter(A, B, D))
By line_inequality on altitude(E, C, orthocenter(A, D, G)), Line(D, H), E we get Line(D, H) != altitude(E, C, orthocenter(A, D, G))
By line_inequality on altitude(midpoint(B, G), I, orthocenter(A, B, D)), Line(D, E), midpoint(B, G) we get Line(D, E) != altitude(midpoint(B, G), I, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), projection(A, i), h we get projection(A, i) != orthocenter(D, midpoint(B, G), orthocenter(A, B, D))
By line_inequality on Line(F, midpoint(B, G)), Line(C, H), F we get Line(C, H) != Line(F, midpoint(B, G))
By line_inequality on altitude(E, A, orthocenter(A, D, G)), Line(C, H), E we get Line(C, H) != altitude(E, A, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), C, h we get C != orthocenter(D, midpoint(B, G), orthocenter(A, B, D))
By line_inequality on Line(I, orthocenter(A, D, G)), Line(B, G), I we get Line(B, G) != Line(I, orthocenter(A, D, G))
By line_inequality on altitude(midpoint(B, G), A, orthocenter(A, D, G)), f, midpoint(B, G) we get f != altitude(midpoint(B, G), A, orthocenter(A, D, G))
By line_inequality on altitude(F, H, orthocenter(A, B, D)), Line(C, H), F we get Line(C, H) != altitude(F, H, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), orthocenter(A, B, D), h we get orthocenter(A, B, D) != orthocenter(A, midpoint(B, G), orthocenter(A, B, D))
By line_inequality on altitude(F, H, orthocenter(A, B, D)), Line(D, E), F we get Line(D, E) != altitude(F, H, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(C, E, orthocenter(A, D, G)), projection(A, Line(D, G)), g we get projection(A, Line(D, G)) != orthocenter(C, E, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), G, h we get G != orthocenter(I, midpoint(B, G), orthocenter(A, B, D))
By line_containment_inequality on orthocenter(E, G, orthocenter(A, D, G)), orthocenter(A, D, G), g we get orthocenter(A, D, G) != orthocenter(E, G, orthocenter(A, D, G))
By line_inequality on altitude(F, H, orthocenter(A, B, D)), i, F we get i != altitude(F, H, orthocenter(A, B, D))
By line_inequality on Line(I, orthocenter(A, D, G)), Line(D, G), orthocenter(A, D, G) we get Line(D, G) != Line(I, orthocenter(A, D, G))
By not_in_line_equivalent_to_not_collinear_v0_r on B, orthocenter(A, D, G), C we get B not in Line(C, orthocenter(A, D, G))
By line_inequality on perpendicular_line(E, Line(B, G)), Line(D, H), E we get Line(D, H) != perpendicular_line(E, Line(B, G))
By line_inequality on Line(H, orthocenter(A, B, D)), Line(C, D), H we get Line(C, D) != Line(H, orthocenter(A, B, D))
By line_inequality on altitude(E, A, orthocenter(A, D, G)), Line(C, D), E we get Line(C, D) != altitude(E, A, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), projection(A, Line(D, G)), h we get projection(A, Line(D, G)) != orthocenter(D, midpoint(B, G), orthocenter(A, B, D))
By line_inequality on perpendicular_line(E, Line(B, G)), Line(C, D), E we get Line(C, D) != perpendicular_line(E, Line(B, G))
By line_inequality on Line(E, midpoint(B, G)), Line(C, F), E we get Line(C, F) != Line(E, midpoint(B, G))
By line_inequality on altitude(midpoint(B, G), A, orthocenter(A, B, D)), Line(G, I), midpoint(B, G) we get Line(G, I) != altitude(midpoint(B, G), A, orthocenter(A, B, D))
By line_inequality on altitude(F, A, orthocenter(A, B, D)), Line(B, I), F we get Line(B, I) != altitude(F, A, orthocenter(A, B, D))
By line_inequality on Line(H, orthocenter(A, B, D)), f, orthocenter(A, B, D) we get f != Line(H, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(F, H, orthocenter(A, B, D)), orthocenter(A, B, D), f we get orthocenter(A, B, D) != orthocenter(F, H, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(A, D, orthocenter(A, B, D)), orthocenter(A, B, D), i we get orthocenter(A, B, D) != orthocenter(A, D, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(E, G, orthocenter(A, D, G)), G, Line(D, E) we get G != orthocenter(E, G, orthocenter(A, D, G))
By line_inequality on Line(I, orthocenter(A, D, G)), Line(G, I), orthocenter(A, D, G) we get Line(G, I) != Line(I, orthocenter(A, D, G))
By line_inequality on perpendicular_line(midpoint(B, G), Line(D, E)), Line(B, I), midpoint(B, G) we get Line(B, I) != perpendicular_line(midpoint(B, G), Line(D, E))
By line_containment_inequality on orthocenter(F, H, orthocenter(A, B, D)), A, Line(D, F) we get A != orthocenter(F, H, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(F, H, orthocenter(A, B, D)), G, f we get G != orthocenter(F, H, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(C, E, orthocenter(A, D, G)), D, g we get D != orthocenter(C, E, orthocenter(A, D, G))
By line_inequality on perpendicular_line(F, Line(B, G)), Line(C, D), F we get Line(C, D) != perpendicular_line(F, Line(B, G))
By line_containment_inequality on orthocenter(A, G, orthocenter(A, D, G)), projection(A, Line(D, G)), Line(D, E) we get projection(A, Line(D, G)) != orthocenter(A, G, orthocenter(A, D, G))
By line_inequality on Line(C, orthocenter(A, D, G)), altitude(A, B, D), C we get altitude(A, B, D) != Line(C, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), orthocenter(A, D, G), h we get orthocenter(A, D, G) != orthocenter(D, midpoint(B, G), orthocenter(A, B, D))
By line_inequality on altitude(E, A, orthocenter(A, D, G)), Line(B, I), E we get Line(B, I) != altitude(E, A, orthocenter(A, D, G))
By line_inequality on perpendicular_line(E, Line(B, G)), Line(C, H), E we get Line(C, H) != perpendicular_line(E, Line(B, G))
By line_inequality on perpendicular_line(midpoint(B, G), Line(D, F)), altitude(A, B, D), midpoint(B, G) we get altitude(A, B, D) != perpendicular_line(midpoint(B, G), Line(D, F))
By line_inequality on altitude(F, A, orthocenter(A, B, D)), altitude(A, B, D), F we get altitude(A, B, D) != altitude(F, A, orthocenter(A, B, D))
By line_inequality on altitude(A, F, midpoint(B, G)), Line(E, F), A we get Line(E, F) != altitude(A, F, midpoint(B, G))
By line_inequality on altitude(A, F, midpoint(B, G)), Line(E, H), A we get Line(E, H) != altitude(A, F, midpoint(B, G))
By line_inequality on perpendicular_line(E, Line(B, G)), altitude(A, D, G), E we get altitude(A, D, G) != perpendicular_line(E, Line(B, G))
By line_inequality on Line(I, orthocenter(A, B, D)), h, orthocenter(A, B, D) we get h != Line(I, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(E, G, orthocenter(A, D, G)), midpoint(B, G), g we get midpoint(B, G) != orthocenter(E, G, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(F, H, orthocenter(A, B, D)), H, Line(D, F) we get H != orthocenter(F, H, orthocenter(A, B, D))
By line_inequality on altitude(E, C, orthocenter(A, D, G)), Line(B, I), E we get Line(B, I) != altitude(E, C, orthocenter(A, D, G))
By line_inequality on Line(C, orthocenter(A, D, G)), Line(B, C), orthocenter(A, D, G) we get Line(B, C) != Line(C, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), G, h we get G != orthocenter(A, midpoint(B, G), orthocenter(A, D, G))
By line_inequality on altitude(midpoint(B, G), A, orthocenter(A, D, G)), Line(D, H), midpoint(B, G) we get Line(D, H) != altitude(midpoint(B, G), A, orthocenter(A, D, G))
By line_inequality on altitude(F, H, orthocenter(A, B, D)), Line(E, H), F we get Line(E, H) != altitude(F, H, orthocenter(A, B, D))
By line_inequality on perpendicular_line(midpoint(B, G), Line(D, E)), altitude(A, D, G), midpoint(B, G) we get altitude(A, D, G) != perpendicular_line(midpoint(B, G), Line(D, E))
By line_inequality on altitude(F, H, orthocenter(A, B, D)), Line(B, C), F we get Line(B, C) != altitude(F, H, orthocenter(A, B, D))
By line_inequality on Line(H, orthocenter(A, B, D)), Line(C, I), H we get Line(C, I) != Line(H, orthocenter(A, B, D))
By line_inequality on altitude(A, F, midpoint(B, G)), Line(B, C), A we get Line(B, C) != altitude(A, F, midpoint(B, G))
By line_containment_inequality on orthocenter(B, F, orthocenter(A, B, D)), D, f we get D != orthocenter(B, F, orthocenter(A, B, D))
By line_inequality on altitude(F, A, orthocenter(A, B, D)), Line(B, C), F we get Line(B, C) != altitude(F, A, orthocenter(A, B, D))
By line_inequality on altitude(midpoint(B, G), A, orthocenter(A, D, G)), Line(C, I), midpoint(B, G) we get Line(C, I) != altitude(midpoint(B, G), A, orthocenter(A, D, G))
By line_inequality on perpendicular_line(F, Line(B, G)), Line(C, I), F we get Line(C, I) != perpendicular_line(F, Line(B, G))
By line_inequality on Line(I, orthocenter(A, D, G)), f, I we get f != Line(I, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(C, E, orthocenter(A, D, G)), C, Line(D, E) we get C != orthocenter(C, E, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, midpoint(B, G), orthocenter(A, D, G)), H, h we get H != orthocenter(A, midpoint(B, G), orthocenter(A, D, G))
By line_inequality on perpendicular_line(midpoint(B, G), Line(D, F)), Line(D, H), midpoint(B, G) we get Line(D, H) != perpendicular_line(midpoint(B, G), Line(D, F))
By line_inequality on altitude(A, E, midpoint(B, G)), Line(B, G), A we get Line(B, G) != altitude(A, E, midpoint(B, G))
By line_inequality on perpendicular_line(E, Line(B, G)), Line(C, I), E we get Line(C, I) != perpendicular_line(E, Line(B, G))
By line_inequality on altitude(A, F, midpoint(B, G)), Line(C, I), A we get Line(C, I) != altitude(A, F, midpoint(B, G))
By line_containment_inequality on orthocenter(D, G, orthocenter(A, D, G)), orthocenter(A, D, G), g we get orthocenter(A, D, G) != orthocenter(D, G, orthocenter(A, D, G))
By line_inequality on altitude(A, F, midpoint(B, G)), Line(B, I), A we get Line(B, I) != altitude(A, F, midpoint(B, G))
By line_inequality on Line(H, orthocenter(A, B, D)), Line(D, F), H we get Line(D, F) != Line(H, orthocenter(A, B, D))
By line_inequality on altitude(F, H, orthocenter(A, B, D)), h, F we get h != altitude(F, H, orthocenter(A, B, D))
By line_inequality on altitude(F, H, orthocenter(A, B, D)), Line(B, G), F we get Line(B, G) != altitude(F, H, orthocenter(A, B, D))
By line_inequality on perpendicular_line(F, Line(B, G)), altitude(A, B, D), F we get altitude(A, B, D) != perpendicular_line(F, Line(B, G))
By line_inequality on altitude(midpoint(B, G), I, orthocenter(A, D, G)), Line(B, C), midpoint(B, G) we get Line(B, C) != altitude(midpoint(B, G), I, orthocenter(A, D, G))
By line_inequality on Line(C, orthocenter(A, D, G)), Line(B, G), C we get Line(B, G) != Line(C, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), I, Line(B, G) we get I != orthocenter(D, midpoint(B, G), orthocenter(A, B, D))
By line_inequality on Line(I, orthocenter(A, B, D)), Line(E, F), orthocenter(A, B, D) we get Line(E, F) != Line(I, orthocenter(A, B, D))
By line_inequality on Line(E, midpoint(B, G)), g, midpoint(B, G) we get g != Line(E, midpoint(B, G))
By line_containment_inequality on orthocenter(D, midpoint(B, G), orthocenter(A, D, G)), orthocenter(A, D, G), h we get orthocenter(A, D, G) != orthocenter(D, midpoint(B, G), orthocenter(A, D, G))
By line_inequality on Line(F, midpoint(B, G)), Line(E, H), F we get Line(E, H) != Line(F, midpoint(B, G))
By line_inequality on perpendicular_line(midpoint(B, G), Line(D, E)), Line(D, H), midpoint(B, G) we get Line(D, H) != perpendicular_line(midpoint(B, G), Line(D, E))
By line_inequality on altitude(midpoint(B, G), A, orthocenter(A, D, G)), Line(B, C), midpoint(B, G) we get Line(B, C) != altitude(midpoint(B, G), A, orthocenter(A, D, G))
By line_inequality on altitude(E, C, orthocenter(A, D, G)), Line(C, I), E we get Line(C, I) != altitude(E, C, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(D, midpoint(B, G), orthocenter(A, B, D)), orthocenter(A, B, D), h we get orthocenter(A, B, D) != orthocenter(D, midpoint(B, G), orthocenter(A, B, D))
By line_inequality on perpendicular_line(midpoint(B, G), Line(D, E)), Line(D, G), midpoint(B, G) we get Line(D, G) != perpendicular_line(midpoint(B, G), Line(D, E))
By line_inequality on perpendicular_line(midpoint(B, G), Line(D, E)), i, midpoint(B, G) we get i != perpendicular_line(midpoint(B, G), Line(D, E))
By line_inequality on perpendicular_line(midpoint(B, G), Line(D, F)), Line(D, F), midpoint(B, G) we get Line(D, F) != perpendicular_line(midpoint(B, G), Line(D, F))
By line_inequality on perpendicular_line(midpoint(B, G), Line(D, E)), Line(D, F), midpoint(B, G) we get Line(D, F) != perpendicular_line(midpoint(B, G), Line(D, E))
By line_inequality on altitude(E, A, orthocenter(A, D, G)), h, E we get h != altitude(E, A, orthocenter(A, D, G))
By line_inequality on altitude(F, A, orthocenter(A, B, D)), Line(D, E), F we get Line(D, E) != altitude(F, A, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), A, Line(B, G) we get A != orthocenter(A, midpoint(B, G), orthocenter(A, B, D))
By line_inequality on altitude(E, C, orthocenter(A, D, G)), Line(D, F), E we get Line(D, F) != altitude(E, C, orthocenter(A, D, G))
By line_inequality on altitude(midpoint(B, G), I, orthocenter(A, D, G)), Line(C, I), midpoint(B, G) we get Line(C, I) != altitude(midpoint(B, G), I, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(I, midpoint(B, G), orthocenter(A, B, D)), D, Line(B, G) we get D != orthocenter(I, midpoint(B, G), orthocenter(A, B, D))
By line_inequality on perpendicular_line(E, Line(B, G)), f, E we get f != perpendicular_line(E, Line(B, G))
By line_inequality on perpendicular_line(midpoint(B, G), Line(D, F)), Line(D, E), midpoint(B, G) we get Line(D, E) != perpendicular_line(midpoint(B, G), Line(D, F))
By line_containment_inequality on orthocenter(A, midpoint(B, G), orthocenter(A, B, D)), B, h we get B != orthocenter(A, midpoint(B, G), orthocenter(A, B, D))
By line_inequality on altitude(midpoint(B, G), A, orthocenter(A, B, D)), altitude(A, D, G), midpoint(B, G) we get altitude(A, D, G) != altitude(midpoint(B, G), A, orthocenter(A, B, D))
By external_angle_bisector_definition_v0_r on G, A, G, projection(A, Line(D, G)) we get Line(A, projection(A, Line(D, G))) == external_angle_bisector(G, projection(A, Line(D, G)), G)
By external_angle_bisector_definition_v0_r on A, D, A, projection(A, Line(D, G)) we get Line(D, projection(A, Line(D, G))) == external_angle_bisector(A, projection(A, Line(D, G)), A)
By external_angle_bisector_definition_v0_r on D, A, D, projection(A, Line(D, G)) we get Line(A, projection(A, Line(D, G))) == external_angle_bisector(D, projection(A, Line(D, G)), D)
By external_angle_bisector_definition_v0_r on A, D, A, projection(A, i) we get Line(D, projection(A, i)) == external_angle_bisector(A, projection(A, i), A)
By external_angle_bisector_definition_v0_r on A, G, A, projection(A, Line(D, G)) we get Line(G, projection(A, Line(D, G))) == external_angle_bisector(A, projection(A, Line(D, G)), A)
By external_angle_bisector_definition_v0_r on orthocenter(A, D, G), D, orthocenter(A, D, G), projection(A, Line(D, G)) we get Line(D, projection(A, Line(D, G))) == external_angle_bisector(orthocenter(A, D, G), projection(A, Line(D, G)), orthocenter(A, D, G))
By external_angle_bisector_definition_v0_r on B, A, B, projection(A, i) we get Line(A, projection(A, i)) == external_angle_bisector(B, projection(A, i), B)
By altitude_definition on F, B, G, perpendicular_line(F, Line(B, G)) we get altitude(F, B, G) == perpendicular_line(F, Line(B, G))
By external_angle_bisector_definition_v0_r on orthocenter(A, D, G), G, orthocenter(A, D, G), projection(A, Line(D, G)) we get Line(G, projection(A, Line(D, G))) == external_angle_bisector(orthocenter(A, D, G), projection(A, Line(D, G)), orthocenter(A, D, G))
By external_angle_bisector_definition_v0_r on D, orthocenter(A, D, G), D, projection(A, Line(D, G)) we get Line(orthocenter(A, D, G), projection(A, Line(D, G))) == external_angle_bisector(D, projection(A, Line(D, G)), D)
By external_angle_bisector_definition_v0_r on orthocenter(A, B, D), D, orthocenter(A, B, D), projection(A, i) we get Line(D, projection(A, i)) == external_angle_bisector(orthocenter(A, B, D), projection(A, i), orthocenter(A, B, D))
By external_angle_bisector_definition_v0_r on D, orthocenter(A, B, D), D, projection(A, i) we get Line(projection(A, i), orthocenter(A, B, D)) == external_angle_bisector(D, projection(A, i), D)
By external_angle_bisector_definition_v0_r on orthocenter(A, B, D), B, orthocenter(A, B, D), projection(A, i) we get Line(B, projection(A, i)) == external_angle_bisector(orthocenter(A, B, D), projection(A, i), orthocenter(A, B, D))
By external_angle_bisector_definition_v0_r on D, A, D, projection(A, i) we get Line(A, projection(A, i)) == external_angle_bisector(D, projection(A, i), D)
By perpendicular_lines_draw_intersection on altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)) we get exists(line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))))
By perpendicular_lines_draw_intersection on Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D)) we get exists(line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D))))
By perpendicular_lines_draw_intersection on Line(E, midpoint(B, G)), altitude(A, E, midpoint(B, G)) we get exists(line_intersection(Line(E, midpoint(B, G)), altitude(A, E, midpoint(B, G))))
By perpendicular_lines_draw_intersection on Line(B, G), perpendicular_line(F, Line(B, G)) we get exists(line_intersection(Line(B, G), perpendicular_line(F, Line(B, G))))
By external_angle_bisector_definition_v0_r on B, orthocenter(A, B, D), B, projection(A, i) we get Line(projection(A, i), orthocenter(A, B, D)) == external_angle_bisector(B, projection(A, i), B)
By external_angle_bisector_definition_v0_r on G, orthocenter(A, D, G), G, projection(A, Line(D, G)) we get Line(orthocenter(A, D, G), projection(A, Line(D, G))) == external_angle_bisector(G, projection(A, Line(D, G)), G)
By perpendicular_lines_draw_intersection on Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D)) we get exists(line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))))
By external_angle_bisector_definition_v0_r on A, B, A, projection(A, i) we get Line(B, projection(A, i)) == external_angle_bisector(A, projection(A, i), A)
By perpendicular_lines_draw_intersection on altitude(A, B, D), altitude(midpoint(B, G), A, orthocenter(A, B, D)) we get exists(line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, orthocenter(A, B, D))))
By perpendicular_lines_draw_intersection on altitude(A, F, midpoint(B, G)), Line(F, midpoint(B, G)) we get exists(line_intersection(Line(F, midpoint(B, G)), altitude(A, F, midpoint(B, G))))
By perpendicular_lines_draw_intersection on altitude(F, A, orthocenter(A, B, D)), altitude(A, B, D) we get exists(line_intersection(altitude(A, B, D), altitude(F, A, orthocenter(A, B, D))))
By perpendicular_lines_draw_intersection on altitude(E, A, orthocenter(A, D, G)), altitude(A, D, G) we get exists(line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G))))
By altitude_definition on E, G, B, perpendicular_line(E, Line(B, G)) we get altitude(E, B, G) == perpendicular_line(E, Line(B, G))
By altitude_definition on midpoint(B, G), D, E, perpendicular_line(midpoint(B, G), Line(D, E)) we get altitude(midpoint(B, G), D, E) == perpendicular_line(midpoint(B, G), Line(D, E))
By perpendicular_lines_draw_intersection on Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G)) we get exists(line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G))))
By perpendicular_lines_draw_intersection on perpendicular_line(midpoint(B, G), Line(D, E)), Line(D, E) we get exists(line_intersection(Line(D, E), perpendicular_line(midpoint(B, G), Line(D, E))))
By altitude_definition on midpoint(B, G), F, D, perpendicular_line(midpoint(B, G), Line(D, F)) we get altitude(midpoint(B, G), D, F) == perpendicular_line(midpoint(B, G), Line(D, F))
By perpendicular_lines_draw_intersection on Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G)) we get exists(line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))))
By perpendicular_lines_draw_intersection on Line(D, F), perpendicular_line(midpoint(B, G), Line(D, F)) we get exists(line_intersection(Line(D, F), perpendicular_line(midpoint(B, G), Line(D, F))))
By perpendicular_lines_draw_intersection on perpendicular_line(E, Line(B, G)), Line(B, G) we get exists(line_intersection(Line(B, G), perpendicular_line(E, Line(B, G))))
By altitude_definition on E, G, midpoint(B, G), perpendicular_line(E, Line(B, G)) we get altitude(E, G, midpoint(B, G)) == perpendicular_line(E, Line(B, G))
By altitude_definition on E, G, projection(A, Line(D, G)), altitude(E, D, G) we get altitude(E, D, G) == altitude(E, G, projection(A, Line(D, G)))
By altitude_definition on orthocenter(A, D, G), D, projection(A, Line(D, G)), altitude(A, D, G) we get altitude(A, D, G) == altitude(orthocenter(A, D, G), D, projection(A, Line(D, G)))
By altitude_definition on I, orthocenter(A, D, G), orthocenter(A, B, D), h we get h == altitude(I, orthocenter(A, B, D), orthocenter(A, D, G))
By altitude_definition on midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G)), altitude(midpoint(B, G), A, orthocenter(A, D, G)) we get altitude(midpoint(B, G), A, orthocenter(A, D, G)) == altitude(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G)))
By altitude_definition on E, B, orthocenter(A, B, D), perpendicular_line(E, Line(B, G)) we get perpendicular_line(E, Line(B, G)) == altitude(E, B, orthocenter(A, B, D))
By altitude_definition on F, projection(A, i), B, altitude(F, B, D) we get altitude(F, B, D) == altitude(F, B, projection(A, i))
By altitude_definition on F, orthocenter(A, B, D), G, perpendicular_line(F, Line(B, G)) we get perpendicular_line(F, Line(B, G)) == altitude(F, G, orthocenter(A, B, D))
By altitude_definition on E, midpoint(B, G), B, perpendicular_line(E, Line(B, G)) we get altitude(E, B, midpoint(B, G)) == perpendicular_line(E, Line(B, G))
By altitude_definition on midpoint(B, G), G, projection(A, Line(D, G)), altitude(midpoint(B, G), D, G) we get altitude(midpoint(B, G), D, G) == altitude(midpoint(B, G), G, projection(A, Line(D, G)))
By altitude_definition on midpoint(B, G), projection(A, i), A, altitude(midpoint(B, G), A, orthocenter(A, B, D)) we get altitude(midpoint(B, G), A, projection(A, i)) == altitude(midpoint(B, G), A, orthocenter(A, B, D))
By altitude_definition on orthocenter(A, B, D), projection(A, i), B, altitude(A, B, D) we get altitude(A, B, D) == altitude(orthocenter(A, B, D), B, projection(A, i))
By altitude_definition on D, projection(A, Line(D, G)), orthocenter(A, D, G), Line(D, G) we get Line(D, G) == altitude(D, orthocenter(A, D, G), projection(A, Line(D, G)))
By altitude_definition on midpoint(B, G), projection(A, Line(D, G)), D, altitude(midpoint(B, G), D, G) we get altitude(midpoint(B, G), D, G) == altitude(midpoint(B, G), D, projection(A, Line(D, G)))
By altitude_definition on E, projection(A, Line(D, G)), orthocenter(A, D, G), altitude(E, A, orthocenter(A, D, G)) we get altitude(E, A, orthocenter(A, D, G)) == altitude(E, orthocenter(A, D, G), projection(A, Line(D, G)))
By altitude_definition on midpoint(B, G), E, orthocenter(A, D, G), perpendicular_line(midpoint(B, G), Line(D, E)) we get perpendicular_line(midpoint(B, G), Line(D, E)) == altitude(midpoint(B, G), E, orthocenter(A, D, G))
By altitude_definition on F, projection(A, i), orthocenter(A, B, D), altitude(F, A, orthocenter(A, B, D)) we get altitude(F, A, orthocenter(A, B, D)) == altitude(F, projection(A, i), orthocenter(A, B, D))
By altitude_definition on E, D, projection(A, Line(D, G)), altitude(E, D, G) we get altitude(E, D, G) == altitude(E, D, projection(A, Line(D, G)))
By altitude_definition on F, projection(A, i), A, altitude(F, A, orthocenter(A, B, D)) we get altitude(F, A, projection(A, i)) == altitude(F, A, orthocenter(A, B, D))
By altitude_definition on E, projection(A, Line(D, G)), A, altitude(E, A, orthocenter(A, D, G)) we get altitude(E, A, orthocenter(A, D, G)) == altitude(E, A, projection(A, Line(D, G)))
By altitude_definition on G, projection(A, Line(D, G)), orthocenter(A, D, G), Line(D, G) we get Line(D, G) == altitude(G, orthocenter(A, D, G), projection(A, Line(D, G)))
By altitude_definition on E, orthocenter(A, D, G), midpoint(B, G), perpendicular_line(E, Line(B, G)) we get perpendicular_line(E, Line(B, G)) == altitude(E, midpoint(B, G), orthocenter(A, D, G))
By altitude_definition on D, orthocenter(A, B, D), projection(A, i), i we get i == altitude(D, projection(A, i), orthocenter(A, B, D))
By altitude_definition on midpoint(B, G), F, orthocenter(A, B, D), perpendicular_line(midpoint(B, G), Line(D, F)) we get perpendicular_line(midpoint(B, G), Line(D, F)) == altitude(midpoint(B, G), F, orthocenter(A, B, D))
By altitude_definition on orthocenter(A, D, G), projection(A, Line(D, G)), G, altitude(A, D, G) we get altitude(A, D, G) == altitude(orthocenter(A, D, G), G, projection(A, Line(D, G)))
By altitude_definition on E, midpoint(B, G), orthocenter(A, B, D), perpendicular_line(E, Line(B, G)) we get perpendicular_line(E, Line(B, G)) == altitude(E, midpoint(B, G), orthocenter(A, B, D))
By altitude_definition on E, orthocenter(A, B, D), orthocenter(A, D, G), perpendicular_line(E, Line(B, G)) we get perpendicular_line(E, Line(B, G)) == altitude(E, orthocenter(A, B, D), orthocenter(A, D, G))
By altitude_definition on midpoint(B, G), projection(A, Line(D, G)), A, altitude(midpoint(B, G), A, orthocenter(A, D, G)) we get altitude(midpoint(B, G), A, orthocenter(A, D, G)) == altitude(midpoint(B, G), A, projection(A, Line(D, G)))
By altitude_definition on E, orthocenter(A, D, G), B, perpendicular_line(E, Line(B, G)) we get perpendicular_line(E, Line(B, G)) == altitude(E, B, orthocenter(A, D, G))
By altitude_definition on F, D, projection(A, i), altitude(F, B, D) we get altitude(F, B, D) == altitude(F, D, projection(A, i))
By altitude_definition on B, projection(A, i), orthocenter(A, B, D), i we get i == altitude(B, projection(A, i), orthocenter(A, B, D))
By altitude_definition on orthocenter(A, B, D), projection(A, i), D, altitude(A, B, D) we get altitude(A, B, D) == altitude(orthocenter(A, B, D), D, projection(A, i))
By altitude_definition on F, midpoint(B, G), orthocenter(A, B, D), perpendicular_line(F, Line(B, G)) we get perpendicular_line(F, Line(B, G)) == altitude(F, midpoint(B, G), orthocenter(A, B, D))
By altitude_definition on F, orthocenter(A, D, G), G, perpendicular_line(F, Line(B, G)) we get perpendicular_line(F, Line(B, G)) == altitude(F, G, orthocenter(A, D, G))
By altitude_definition on midpoint(B, G), projection(A, i), D, altitude(midpoint(B, G), B, D) we get altitude(midpoint(B, G), B, D) == altitude(midpoint(B, G), D, projection(A, i))
By altitude_definition on A, orthocenter(A, D, G), orthocenter(A, B, D), h we get h == altitude(A, orthocenter(A, B, D), orthocenter(A, D, G))
By altitude_definition on F, orthocenter(A, D, G), B, perpendicular_line(F, Line(B, G)) we get perpendicular_line(F, Line(B, G)) == altitude(F, B, orthocenter(A, D, G))
By altitude_definition on F, orthocenter(A, D, G), midpoint(B, G), perpendicular_line(F, Line(B, G)) we get perpendicular_line(F, Line(B, G)) == altitude(F, midpoint(B, G), orthocenter(A, D, G))
By altitude_definition on F, orthocenter(A, D, G), orthocenter(A, B, D), perpendicular_line(F, Line(B, G)) we get perpendicular_line(F, Line(B, G)) == altitude(F, orthocenter(A, B, D), orthocenter(A, D, G))
By altitude_definition on E, orthocenter(A, B, D), G, perpendicular_line(E, Line(B, G)) we get perpendicular_line(E, Line(B, G)) == altitude(E, G, orthocenter(A, B, D))
By altitude_definition on F, midpoint(B, G), G, perpendicular_line(F, Line(B, G)) we get altitude(F, G, midpoint(B, G)) == perpendicular_line(F, Line(B, G))
By altitude_definition on F, midpoint(B, G), B, perpendicular_line(F, Line(B, G)) we get altitude(F, B, midpoint(B, G)) == perpendicular_line(F, Line(B, G))
By altitude_definition on midpoint(B, G), projection(A, i), B, altitude(midpoint(B, G), B, D) we get altitude(midpoint(B, G), B, D) == altitude(midpoint(B, G), B, projection(A, i))
By altitude_definition on midpoint(B, G), orthocenter(A, B, D), projection(A, i), altitude(midpoint(B, G), A, orthocenter(A, B, D)) we get altitude(midpoint(B, G), A, orthocenter(A, B, D)) == altitude(midpoint(B, G), projection(A, i), orthocenter(A, B, D))
By line_intersection_definition on orthocenter(A, D, projection(A, Line(D, G))), Line(D, G), altitude(A, D, G) we get orthocenter(A, D, projection(A, Line(D, G))) == line_intersection(Line(D, G), altitude(A, D, G))
By line_intersection_definition on orthocenter(A, D, projection(A, i)), altitude(A, B, D), i we get orthocenter(A, D, projection(A, i)) == line_intersection(i, altitude(A, B, D))
By line_intersection_definition on orthocenter(A, B, projection(A, i)), altitude(A, B, D), i we get orthocenter(A, B, projection(A, i)) == line_intersection(i, altitude(A, B, D))
By line_intersection_definition on orthocenter(A, G, projection(A, Line(D, G))), altitude(A, D, G), Line(D, G) we get orthocenter(A, G, projection(A, Line(D, G))) == line_intersection(Line(D, G), altitude(A, D, G))
By chords_on_equal_angles_v0 on H, F, E, F, E, C, c we get distance(C, F) == distance(E, H)
By chords_on_equal_angles_v0 on E, F, D, D, E, F, Circle(A, D, E) we get distance(D, E) == distance(D, F)
By perpendicular_line_definition on line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), Line(D, F), f we get Line(D, F) == perpendicular_line(line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), f)
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(E, B, G)), altitude(E, B, G), altitude(E, A, D) we get altitude(E, B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(E, B, G)), altitude(E, A, D))
By perpendicular_line_definition on projection(F, h), altitude(F, A, D), altitude(E, B, G) we get altitude(F, A, D) == perpendicular_line(projection(F, h), altitude(E, B, G))
By perpendicular_line_definition on orthocenter(A, G, projection(A, Line(D, G))), altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)) we get altitude(A, D, G) == perpendicular_line(orthocenter(A, G, projection(A, Line(D, G))), altitude(midpoint(B, G), A, orthocenter(A, D, G)))
By line_intersection_definition on midpoint(B, G), median(E, B, G), Line(B, G) we get midpoint(B, G) == line_intersection(Line(B, G), median(E, B, G))
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(F, B, G)), altitude(F, B, G), Line(B, G) we get altitude(F, B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(F, B, G)), Line(B, G))
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(E, B, G)), Line(B, G), altitude(F, B, G) we get Line(B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(E, B, G)), altitude(F, B, G))
By perpendicular_line_definition on line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), altitude(midpoint(B, G), D, F), altitude(midpoint(B, G), A, B) we get altitude(midpoint(B, G), D, F) == perpendicular_line(line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), altitude(midpoint(B, G), A, B))
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(E, B, G)), Line(B, G), h we get Line(B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(E, B, G)), h)
By perpendicular_line_definition on line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))), altitude(midpoint(B, G), A, orthocenter(A, D, G)), altitude(E, D, G) we get altitude(midpoint(B, G), A, orthocenter(A, D, G)) == perpendicular_line(line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))), altitude(E, D, G))
By perpendicular_line_definition on line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), altitude(midpoint(B, G), D, G), altitude(E, A, orthocenter(A, D, G)) we get altitude(midpoint(B, G), D, G) == perpendicular_line(line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), altitude(E, A, orthocenter(A, D, G)))
By perpendicular_line_definition on D, h, altitude(projection(A, Line(D, G)), A, D) we get h == perpendicular_line(D, altitude(projection(A, Line(D, G)), A, D))
By line_intersection_definition on orthocenter(A, B, D), Line(I, orthocenter(A, B, D)), altitude(A, B, D) we get orthocenter(A, B, D) == line_intersection(altitude(A, B, D), Line(I, orthocenter(A, B, D)))
By perpendicular_line_definition on line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))), altitude(F, H, orthocenter(A, B, D)), Line(H, orthocenter(A, B, D)) we get altitude(F, H, orthocenter(A, B, D)) == perpendicular_line(line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))), Line(H, orthocenter(A, B, D)))
By perpendicular_line_definition on projection(F, h), altitude(F, A, D), altitude(F, B, G) we get altitude(F, A, D) == perpendicular_line(projection(F, h), altitude(F, B, G))
By line_intersection_definition on midpoint(B, G), h, median(F, B, G) we get midpoint(B, G) == line_intersection(h, median(F, B, G))
By perpendicular_line_definition on line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))), altitude(midpoint(B, G), I, orthocenter(A, D, G)), Line(I, orthocenter(A, D, G)) we get altitude(midpoint(B, G), I, orthocenter(A, D, G)) == perpendicular_line(line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))), Line(I, orthocenter(A, D, G)))
By line_intersection_definition on orthocenter(A, D, G), Line(B, G), Line(I, orthocenter(A, D, G)) we get orthocenter(A, D, G) == line_intersection(Line(B, G), Line(I, orthocenter(A, D, G)))
By perpendicular_line_definition on midpoint(B, G), altitude(midpoint(B, G), A, projection(A, i)), altitude(midpoint(B, G), B, D) we get altitude(midpoint(B, G), A, projection(A, i)) == perpendicular_line(midpoint(B, G), altitude(midpoint(B, G), B, D))
By perpendicular_line_definition on line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i))), altitude(F, A, projection(A, i)), altitude(F, B, D) we get altitude(F, A, projection(A, i)) == perpendicular_line(line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i))), altitude(F, B, D))
By perpendicular_line_definition on midpoint(B, G), altitude(midpoint(B, G), A, C), altitude(midpoint(B, G), D, E) we get altitude(midpoint(B, G), A, C) == perpendicular_line(midpoint(B, G), altitude(midpoint(B, G), D, E))
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(F, B, G)), Line(B, G), h we get Line(B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(F, B, G)), h)
By perpendicular_line_definition on line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i))), altitude(midpoint(B, G), A, projection(A, i)), altitude(A, B, D) we get altitude(midpoint(B, G), A, projection(A, i)) == perpendicular_line(line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i))), altitude(A, B, D))
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(F, B, G)), Line(B, G), altitude(E, B, G) we get Line(B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(F, B, G)), altitude(E, B, G))
By line_intersection_definition on C, Line(C, orthocenter(A, D, G)), Line(B, C) we get C == line_intersection(Line(B, C), Line(C, orthocenter(A, D, G)))
By line_intersection_definition on I, Line(B, I), Line(I, orthocenter(A, D, G)) we get I == line_intersection(Line(B, I), Line(I, orthocenter(A, D, G)))
By perpendicular_line_definition on orthocenter(A, E, midpoint(B, G)), altitude(E, A, D), altitude(E, B, G) we get altitude(E, A, D) == perpendicular_line(orthocenter(A, E, midpoint(B, G)), altitude(E, B, G))
By perpendicular_line_definition on projection(F, h), h, altitude(projection(A, i), A, D) we get h == perpendicular_line(projection(F, h), altitude(projection(A, i), A, D))
By line_intersection_definition on I, Line(G, I), Line(I, orthocenter(A, D, G)) we get I == line_intersection(Line(G, I), Line(I, orthocenter(A, D, G)))
By perpendicular_line_definition on line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))), altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)) we get altitude(A, D, G) == perpendicular_line(line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))), altitude(midpoint(B, G), A, orthocenter(A, D, G)))
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(F, B, G)), Line(B, G), altitude(F, B, G) we get Line(B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(F, B, G)), altitude(F, B, G))
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(F, B, G)), altitude(F, B, G), altitude(E, A, D) we get altitude(F, B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(F, B, G)), altitude(E, A, D))
By perpendicular_line_definition on midpoint(B, G), altitude(midpoint(B, G), D, F), altitude(midpoint(B, G), A, B) we get altitude(midpoint(B, G), D, F) == perpendicular_line(midpoint(B, G), altitude(midpoint(B, G), A, B))
By line_intersection_definition on orthocenter(A, B, D), Line(H, orthocenter(A, B, D)), altitude(A, B, D) we get orthocenter(A, B, D) == line_intersection(altitude(A, B, D), Line(H, orthocenter(A, B, D)))
By perpendicular_line_definition on projection(E, Line(D, G)), altitude(E, D, G), altitude(E, A, orthocenter(A, D, G)) we get altitude(E, D, G) == perpendicular_line(projection(E, Line(D, G)), altitude(E, A, orthocenter(A, D, G)))
By perpendicular_line_definition on projection(E, Line(D, G)), altitude(E, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)) we get altitude(E, D, G) == perpendicular_line(projection(E, Line(D, G)), altitude(midpoint(B, G), A, orthocenter(A, D, G)))
By perpendicular_line_definition on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), Line(D, E), g we get Line(D, E) == perpendicular_line(line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), g)
By perpendicular_line_definition on orthocenter(A, E, midpoint(B, G)), altitude(midpoint(B, G), A, C), altitude(midpoint(B, G), D, E) we get altitude(midpoint(B, G), A, C) == perpendicular_line(orthocenter(A, E, midpoint(B, G)), altitude(midpoint(B, G), D, E))
By perpendicular_line_definition on D, h, altitude(projection(A, i), A, D) we get h == perpendicular_line(D, altitude(projection(A, i), A, D))
By perpendicular_line_definition on line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G))), altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)) we get altitude(A, D, G) == perpendicular_line(line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G))), altitude(midpoint(B, G), A, orthocenter(A, D, G)))
By perpendicular_line_definition on F, altitude(F, B, D), altitude(midpoint(B, G), A, projection(A, i)) we get altitude(F, B, D) == perpendicular_line(F, altitude(midpoint(B, G), A, projection(A, i)))
By perpendicular_line_definition on line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D))), Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D)) we get Line(I, orthocenter(A, B, D)) == perpendicular_line(line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D))), altitude(midpoint(B, G), I, orthocenter(A, B, D)))
By perpendicular_line_definition on orthocenter(A, F, midpoint(B, G)), altitude(F, A, D), altitude(F, B, G) we get altitude(F, A, D) == perpendicular_line(orthocenter(A, F, midpoint(B, G)), altitude(F, B, G))
By perpendicular_line_definition on orthocenter(A, D, projection(A, i)), altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i)) we get altitude(A, B, D) == perpendicular_line(orthocenter(A, D, projection(A, i)), altitude(midpoint(B, G), A, projection(A, i)))
By perpendicular_line_definition on F, altitude(F, B, G), altitude(F, A, D) we get altitude(F, B, G) == perpendicular_line(F, altitude(F, A, D))
By line_intersection_definition on I, Line(I, orthocenter(A, B, D)), Line(G, I) we get I == line_intersection(Line(G, I), Line(I, orthocenter(A, B, D)))
By line_intersection_definition on orthocenter(A, B, D), Line(B, G), Line(H, orthocenter(A, B, D)) we get orthocenter(A, B, D) == line_intersection(Line(B, G), Line(H, orthocenter(A, B, D)))
By line_intersection_definition on orthocenter(A, D, G), Line(C, orthocenter(A, D, G)), Line(B, G) we get orthocenter(A, D, G) == line_intersection(Line(B, G), Line(C, orthocenter(A, D, G)))
By perpendicular_line_definition on midpoint(B, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)), altitude(E, D, G) we get altitude(midpoint(B, G), A, orthocenter(A, D, G)) == perpendicular_line(midpoint(B, G), altitude(E, D, G))
By line_intersection_definition on I, Line(I, orthocenter(A, D, G)), h we get I == line_intersection(h, Line(I, orthocenter(A, D, G)))
By perpendicular_line_definition on E, altitude(E, A, D), altitude(F, B, G) we get altitude(E, A, D) == perpendicular_line(E, altitude(F, B, G))
By perpendicular_line_definition on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), Line(D, E), altitude(midpoint(B, G), D, E) we get Line(D, E) == perpendicular_line(line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), altitude(midpoint(B, G), D, E))
By line_intersection_definition on orthocenter(A, D, G), Line(I, orthocenter(A, D, G)), Line(D, E) we get orthocenter(A, D, G) == line_intersection(Line(D, E), Line(I, orthocenter(A, D, G)))
By perpendicular_line_definition on line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i))), altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i)) we get altitude(A, B, D) == perpendicular_line(line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i))), altitude(midpoint(B, G), A, projection(A, i)))
By line_intersection_definition on orthocenter(A, B, D), Line(D, F), Line(I, orthocenter(A, B, D)) we get orthocenter(A, B, D) == line_intersection(Line(D, F), Line(I, orthocenter(A, B, D)))
By perpendicular_line_definition on line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G))), altitude(E, A, orthocenter(A, D, G)), altitude(E, D, G) we get altitude(E, A, orthocenter(A, D, G)) == perpendicular_line(line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G))), altitude(E, D, G))
By line_intersection_definition on H, f, Line(H, orthocenter(A, B, D)) we get H == line_intersection(f, Line(H, orthocenter(A, B, D)))
By line_intersection_definition on orthocenter(A, D, G), Line(C, orthocenter(A, D, G)), Line(D, E) we get orthocenter(A, D, G) == line_intersection(Line(D, E), Line(C, orthocenter(A, D, G)))
By perpendicular_line_definition on line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))), altitude(A, D, G), Line(D, G) we get altitude(A, D, G) == perpendicular_line(line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))), Line(D, G))
By perpendicular_line_definition on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), altitude(midpoint(B, G), D, E), altitude(midpoint(B, G), A, C) we get altitude(midpoint(B, G), D, E) == perpendicular_line(line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), altitude(midpoint(B, G), A, C))
By perpendicular_line_definition on projection(E, h), altitude(E, A, D), altitude(F, B, G) we get altitude(E, A, D) == perpendicular_line(projection(E, h), altitude(F, B, G))
By perpendicular_line_definition on midpoint(B, G), altitude(midpoint(B, G), A, B), altitude(midpoint(B, G), D, F) we get altitude(midpoint(B, G), A, B) == perpendicular_line(midpoint(B, G), altitude(midpoint(B, G), D, F))
By perpendicular_line_definition on projection(F, h), h, altitude(projection(A, Line(D, G)), A, D) we get h == perpendicular_line(projection(F, h), altitude(projection(A, Line(D, G)), A, D))
By perpendicular_line_definition on E, altitude(E, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)) we get altitude(E, D, G) == perpendicular_line(E, altitude(midpoint(B, G), A, orthocenter(A, D, G)))
By line_intersection_definition on orthocenter(A, B, D), Line(H, orthocenter(A, B, D)), Line(D, F) we get orthocenter(A, B, D) == line_intersection(Line(D, F), Line(H, orthocenter(A, B, D)))
By perpendicular_line_definition on line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G))), altitude(A, D, G), altitude(E, A, orthocenter(A, D, G)) we get altitude(A, D, G) == perpendicular_line(line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G))), altitude(E, A, orthocenter(A, D, G)))
By perpendicular_line_definition on orthocenter(A, B, projection(A, i)), altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i)) we get altitude(A, B, D) == perpendicular_line(orthocenter(A, B, projection(A, i)), altitude(midpoint(B, G), A, projection(A, i)))
By perpendicular_line_definition on F, altitude(F, A, projection(A, i)), altitude(midpoint(B, G), B, D) we get altitude(F, A, projection(A, i)) == perpendicular_line(F, altitude(midpoint(B, G), B, D))
By perpendicular_line_definition on orthocenter(A, B, projection(A, i)), altitude(A, B, D), altitude(F, A, projection(A, i)) we get altitude(A, B, D) == perpendicular_line(orthocenter(A, B, projection(A, i)), altitude(F, A, projection(A, i)))
By perpendicular_line_definition on A, h, altitude(projection(A, i), A, D) we get h == perpendicular_line(A, altitude(projection(A, i), A, D))
By perpendicular_line_definition on line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), altitude(midpoint(B, G), D, F), Line(D, F) we get altitude(midpoint(B, G), D, F) == perpendicular_line(line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), Line(D, F))
By perpendicular_line_definition on line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), Line(D, F), altitude(midpoint(B, G), D, F) we get Line(D, F) == perpendicular_line(line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), altitude(midpoint(B, G), D, F))
By perpendicular_line_definition on E, g, altitude(projection(A, Line(D, G)), A, G) we get g == perpendicular_line(E, altitude(projection(A, Line(D, G)), A, G))
By line_intersection_definition on C, Line(C, D), Line(C, orthocenter(A, D, G)) we get C == line_intersection(Line(C, D), Line(C, orthocenter(A, D, G)))
By perpendicular_line_definition on line_intersection(g, altitude(midpoint(B, G), A, C)), g, altitude(projection(A, Line(D, G)), A, G) we get g == perpendicular_line(line_intersection(g, altitude(midpoint(B, G), A, C)), altitude(projection(A, Line(D, G)), A, G))
By line_intersection_definition on I, h, Line(I, orthocenter(A, B, D)) we get I == line_intersection(h, Line(I, orthocenter(A, B, D)))
By perpendicular_line_definition on line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), altitude(midpoint(B, G), D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)) we get altitude(midpoint(B, G), D, G) == perpendicular_line(line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), altitude(midpoint(B, G), A, orthocenter(A, D, G)))
By perpendicular_line_definition on midpoint(B, G), altitude(midpoint(B, G), D, G), altitude(E, A, orthocenter(A, D, G)) we get altitude(midpoint(B, G), D, G) == perpendicular_line(midpoint(B, G), altitude(E, A, orthocenter(A, D, G)))
By perpendicular_line_definition on line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i))), altitude(midpoint(B, G), A, projection(A, i)), altitude(midpoint(B, G), B, D) we get altitude(midpoint(B, G), A, projection(A, i)) == perpendicular_line(line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i))), altitude(midpoint(B, G), B, D))
By perpendicular_line_definition on F, altitude(F, A, D), altitude(F, B, G) we get altitude(F, A, D) == perpendicular_line(F, altitude(F, B, G))
By perpendicular_line_definition on line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))), Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G)) we get Line(I, orthocenter(A, D, G)) == perpendicular_line(line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))), altitude(midpoint(B, G), I, orthocenter(A, D, G)))
By perpendicular_line_definition on orthocenter(A, D, projection(A, i)), i, altitude(midpoint(B, G), B, D) we get i == perpendicular_line(orthocenter(A, D, projection(A, i)), altitude(midpoint(B, G), B, D))
By perpendicular_line_definition on E, altitude(E, B, G), altitude(F, A, D) we get altitude(E, B, G) == perpendicular_line(E, altitude(F, A, D))
By perpendicular_line_definition on I, h, altitude(projection(A, Line(D, G)), A, D) we get h == perpendicular_line(I, altitude(projection(A, Line(D, G)), A, D))
By line_intersection_definition on midpoint(B, G), median(E, B, G), h we get midpoint(B, G) == line_intersection(h, median(E, B, G))
By perpendicular_line_definition on orthocenter(A, B, projection(A, i)), i, altitude(F, B, D) we get i == perpendicular_line(orthocenter(A, B, projection(A, i)), altitude(F, B, D))
By perpendicular_line_definition on line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), median(F, B, G), altitude(A, F, midpoint(B, G)) we get median(F, B, G) == perpendicular_line(line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), altitude(A, F, midpoint(B, G)))
By perpendicular_line_definition on orthocenter(A, D, projection(A, i)), altitude(projection(A, i), A, D), h we get altitude(projection(A, i), A, D) == perpendicular_line(orthocenter(A, D, projection(A, i)), h)
By perpendicular_line_definition on midpoint(B, G), altitude(midpoint(B, G), B, D), altitude(F, A, projection(A, i)) we get altitude(midpoint(B, G), B, D) == perpendicular_line(midpoint(B, G), altitude(F, A, projection(A, i)))
By perpendicular_line_definition on orthocenter(A, D, projection(A, Line(D, G))), Line(D, G), altitude(A, D, G) we get Line(D, G) == perpendicular_line(orthocenter(A, D, projection(A, Line(D, G))), altitude(A, D, G))
By perpendicular_line_definition on E, altitude(E, B, G), altitude(E, A, D) we get altitude(E, B, G) == perpendicular_line(E, altitude(E, A, D))
By perpendicular_line_definition on projection(F, i), altitude(F, B, D), altitude(F, A, projection(A, i)) we get altitude(F, B, D) == perpendicular_line(projection(F, i), altitude(F, A, projection(A, i)))
By perpendicular_line_definition on C, g, altitude(projection(A, Line(D, G)), A, G) we get g == perpendicular_line(C, altitude(projection(A, Line(D, G)), A, G))
By perpendicular_line_definition on midpoint(B, G), h, altitude(projection(A, i), A, D) we get h == perpendicular_line(midpoint(B, G), altitude(projection(A, i), A, D))
By perpendicular_line_definition on F, altitude(F, A, projection(A, i)), altitude(F, B, D) we get altitude(F, A, projection(A, i)) == perpendicular_line(F, altitude(F, B, D))
By line_intersection_definition on H, Line(H, orthocenter(A, B, D)), Line(D, H) we get H == line_intersection(Line(D, H), Line(H, orthocenter(A, B, D)))
By perpendicular_line_definition on orthocenter(A, D, projection(A, Line(D, G))), altitude(A, D, G), altitude(E, A, orthocenter(A, D, G)) we get altitude(A, D, G) == perpendicular_line(orthocenter(A, D, projection(A, Line(D, G))), altitude(E, A, orthocenter(A, D, G)))
By perpendicular_line_definition on line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i))), altitude(A, B, D), i we get altitude(A, B, D) == perpendicular_line(line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i))), i)
By perpendicular_line_definition on A, g, altitude(projection(A, Line(D, G)), A, G) we get g == perpendicular_line(A, altitude(projection(A, Line(D, G)), A, G))
By perpendicular_line_definition on line_intersection(i, altitude(midpoint(B, G), B, D)), altitude(midpoint(B, G), B, D), altitude(F, A, projection(A, i)) we get altitude(midpoint(B, G), B, D) == perpendicular_line(line_intersection(i, altitude(midpoint(B, G), B, D)), altitude(F, A, projection(A, i)))
By perpendicular_line_definition on orthocenter(A, B, projection(A, i)), altitude(projection(A, i), A, B), f we get altitude(projection(A, i), A, B) == perpendicular_line(orthocenter(A, B, projection(A, i)), f)
By line_intersection_definition on orthocenter(A, D, G), Line(I, orthocenter(A, D, G)), altitude(A, D, G) we get orthocenter(A, D, G) == line_intersection(altitude(A, D, G), Line(I, orthocenter(A, D, G)))
By perpendicular_line_definition on orthocenter(A, D, projection(A, i)), altitude(A, B, D), altitude(F, A, projection(A, i)) we get altitude(A, B, D) == perpendicular_line(orthocenter(A, D, projection(A, i)), altitude(F, A, projection(A, i)))
By perpendicular_line_definition on I, h, altitude(projection(A, i), A, D) we get h == perpendicular_line(I, altitude(projection(A, i), A, D))
By line_intersection_definition on orthocenter(A, D, G), altitude(A, D, G), Line(C, orthocenter(A, D, G)) we get orthocenter(A, D, G) == line_intersection(altitude(A, D, G), Line(C, orthocenter(A, D, G)))
By line_intersection_definition on F, Line(D, F), median(F, B, G) we get F == line_intersection(Line(D, F), median(F, B, G))
By line_unique_intersection_v0 on altitude(A, D, G), Line(D, G), orthocenter(A, G, projection(A, Line(D, G))), projection(A, Line(D, G)) we get projection(A, Line(D, G)) == orthocenter(A, G, projection(A, Line(D, G)))
By perpendicular_line_definition on orthocenter(A, D, projection(A, Line(D, G))), altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)) we get altitude(A, D, G) == perpendicular_line(orthocenter(A, D, projection(A, Line(D, G))), altitude(midpoint(B, G), A, orthocenter(A, D, G)))
By perpendicular_line_definition on line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))), altitude(A, D, G), altitude(E, A, orthocenter(A, D, G)) we get altitude(A, D, G) == perpendicular_line(line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))), altitude(E, A, orthocenter(A, D, G)))
By perpendicular_line_definition on projection(E, h), h, altitude(projection(A, i), A, D) we get h == perpendicular_line(projection(E, h), altitude(projection(A, i), A, D))
By perpendicular_line_definition on line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))), Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D)) we get Line(H, orthocenter(A, B, D)) == perpendicular_line(line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))), altitude(F, H, orthocenter(A, B, D)))
By perpendicular_line_definition on midpoint(B, G), altitude(midpoint(B, G), D, E), altitude(midpoint(B, G), A, C) we get altitude(midpoint(B, G), D, E) == perpendicular_line(midpoint(B, G), altitude(midpoint(B, G), A, C))
By line_intersection_definition on F, f, median(F, B, G) we get F == line_intersection(f, median(F, B, G))
By line_intersection_definition on orthocenter(A, B, D), Line(I, orthocenter(A, B, D)), Line(B, G) we get orthocenter(A, B, D) == line_intersection(Line(B, G), Line(I, orthocenter(A, B, D)))
By line_intersection_definition on C, Line(C, orthocenter(A, D, G)), g we get C == line_intersection(g, Line(C, orthocenter(A, D, G)))
By perpendicular_line_definition on A, f, altitude(projection(A, i), A, B) we get f == perpendicular_line(A, altitude(projection(A, i), A, B))
By perpendicular_line_definition on line_intersection(f, altitude(midpoint(B, G), A, B)), altitude(midpoint(B, G), A, B), altitude(midpoint(B, G), D, F) we get altitude(midpoint(B, G), A, B) == perpendicular_line(line_intersection(f, altitude(midpoint(B, G), A, B)), altitude(midpoint(B, G), D, F))
By perpendicular_line_definition on projection(E, h), altitude(E, A, D), altitude(E, B, G) we get altitude(E, A, D) == perpendicular_line(projection(E, h), altitude(E, B, G))
By perpendicular_line_definition on orthocenter(A, G, projection(A, Line(D, G))), altitude(A, D, G), Line(D, G) we get altitude(A, D, G) == perpendicular_line(orthocenter(A, G, projection(A, Line(D, G))), Line(D, G))
By perpendicular_line_definition on orthocenter(A, G, projection(A, Line(D, G))), altitude(A, D, G), altitude(E, A, orthocenter(A, D, G)) we get altitude(A, D, G) == perpendicular_line(orthocenter(A, G, projection(A, Line(D, G))), altitude(E, A, orthocenter(A, D, G)))
By perpendicular_line_definition on orthocenter(A, B, projection(A, i)), i, altitude(A, B, D) we get i == perpendicular_line(orthocenter(A, B, projection(A, i)), altitude(A, B, D))
By perpendicular_line_definition on projection(E, h), h, altitude(projection(A, Line(D, G)), A, D) we get h == perpendicular_line(projection(E, h), altitude(projection(A, Line(D, G)), A, D))
By perpendicular_line_definition on line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))), median(E, B, G), altitude(A, E, midpoint(B, G)) we get median(E, B, G) == perpendicular_line(line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))), altitude(A, E, midpoint(B, G)))
By perpendicular_line_definition on F, altitude(F, B, D), altitude(F, A, projection(A, i)) we get altitude(F, B, D) == perpendicular_line(F, altitude(F, A, projection(A, i)))
By line_intersection_definition on E, Line(D, E), median(E, B, G) we get E == line_intersection(Line(D, E), median(E, B, G))
By perpendicular_line_definition on F, altitude(F, A, D), altitude(E, B, G) we get altitude(F, A, D) == perpendicular_line(F, altitude(E, B, G))
By perpendicular_line_definition on midpoint(B, G), altitude(midpoint(B, G), D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)) we get altitude(midpoint(B, G), D, G) == perpendicular_line(midpoint(B, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)))
By perpendicular_line_definition on orthocenter(A, D, projection(A, i)), i, altitude(F, B, D) we get i == perpendicular_line(orthocenter(A, D, projection(A, i)), altitude(F, B, D))
By perpendicular_line_definition on orthocenter(A, D, projection(A, i)), altitude(A, B, D), i we get altitude(A, B, D) == perpendicular_line(orthocenter(A, D, projection(A, i)), i)
By perpendicular_line_definition on line_intersection(i, altitude(midpoint(B, G), B, D)), altitude(midpoint(B, G), B, D), altitude(midpoint(B, G), A, projection(A, i)) we get altitude(midpoint(B, G), B, D) == perpendicular_line(line_intersection(i, altitude(midpoint(B, G), B, D)), altitude(midpoint(B, G), A, projection(A, i)))
By perpendicular_line_definition on line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D))), altitude(midpoint(B, G), I, orthocenter(A, B, D)), Line(I, orthocenter(A, B, D)) we get altitude(midpoint(B, G), I, orthocenter(A, B, D)) == perpendicular_line(line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D))), Line(I, orthocenter(A, B, D)))
By perpendicular_line_definition on line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G))), altitude(E, A, orthocenter(A, D, G)), altitude(A, D, G) we get altitude(E, A, orthocenter(A, D, G)) == perpendicular_line(line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G))), altitude(A, D, G))
By perpendicular_line_definition on line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))), altitude(A, E, midpoint(B, G)), median(E, B, G) we get altitude(A, E, midpoint(B, G)) == perpendicular_line(line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))), median(E, B, G))
By perpendicular_line_definition on F, altitude(F, B, G), altitude(E, A, D) we get altitude(F, B, G) == perpendicular_line(F, altitude(E, A, D))
By perpendicular_line_definition on orthocenter(A, B, projection(A, i)), i, altitude(midpoint(B, G), B, D) we get i == perpendicular_line(orthocenter(A, B, projection(A, i)), altitude(midpoint(B, G), B, D))
By perpendicular_line_definition on B, f, altitude(projection(A, i), A, B) we get f == perpendicular_line(B, altitude(projection(A, i), A, B))
By perpendicular_line_definition on orthocenter(A, E, midpoint(B, G)), altitude(E, A, D), altitude(F, B, G) we get altitude(E, A, D) == perpendicular_line(orthocenter(A, E, midpoint(B, G)), altitude(F, B, G))
By perpendicular_line_definition on midpoint(B, G), h, altitude(projection(A, Line(D, G)), A, D) we get h == perpendicular_line(midpoint(B, G), altitude(projection(A, Line(D, G)), A, D))
By perpendicular_line_definition on line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i))), altitude(A, B, D), altitude(F, A, projection(A, i)) we get altitude(A, B, D) == perpendicular_line(line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i))), altitude(F, A, projection(A, i)))
By perpendicular_line_definition on line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i))), altitude(F, A, projection(A, i)), altitude(midpoint(B, G), B, D) we get altitude(F, A, projection(A, i)) == perpendicular_line(line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i))), altitude(midpoint(B, G), B, D))
By perpendicular_line_definition on orthocenter(A, G, projection(A, Line(D, G))), Line(D, G), altitude(E, D, G) we get Line(D, G) == perpendicular_line(orthocenter(A, G, projection(A, Line(D, G))), altitude(E, D, G))
By perpendicular_line_definition on orthocenter(A, B, projection(A, i)), altitude(A, B, D), i we get altitude(A, B, D) == perpendicular_line(orthocenter(A, B, projection(A, i)), i)
By perpendicular_line_definition on line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))), altitude(midpoint(B, G), A, orthocenter(A, D, G)), altitude(A, D, G) we get altitude(midpoint(B, G), A, orthocenter(A, D, G)) == perpendicular_line(line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))), altitude(A, D, G))
By perpendicular_line_definition on line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i))), altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i)) we get altitude(A, B, D) == perpendicular_line(line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i))), altitude(midpoint(B, G), A, projection(A, i)))
By perpendicular_line_definition on orthocenter(A, D, projection(A, Line(D, G))), Line(D, G), altitude(midpoint(B, G), D, G) we get Line(D, G) == perpendicular_line(orthocenter(A, D, projection(A, Line(D, G))), altitude(midpoint(B, G), D, G))
By perpendicular_line_definition on E, altitude(E, A, orthocenter(A, D, G)), altitude(E, D, G) we get altitude(E, A, orthocenter(A, D, G)) == perpendicular_line(E, altitude(E, D, G))
By perpendicular_line_definition on line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i))), altitude(A, B, D), altitude(F, A, projection(A, i)) we get altitude(A, B, D) == perpendicular_line(line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i))), altitude(F, A, projection(A, i)))
By perpendicular_line_definition on E, altitude(E, A, D), altitude(E, B, G) we get altitude(E, A, D) == perpendicular_line(E, altitude(E, B, G))
By perpendicular_line_definition on line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G))), altitude(A, D, G), Line(D, G) we get altitude(A, D, G) == perpendicular_line(line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G))), Line(D, G))
By line_intersection_definition on midpoint(B, G), median(F, B, G), Line(B, G) we get midpoint(B, G) == line_intersection(Line(B, G), median(F, B, G))
By perpendicular_line_definition on midpoint(B, G), altitude(midpoint(B, G), B, D), altitude(midpoint(B, G), A, projection(A, i)) we get altitude(midpoint(B, G), B, D) == perpendicular_line(midpoint(B, G), altitude(midpoint(B, G), A, projection(A, i)))
By perpendicular_line_definition on projection(F, i), altitude(F, B, D), altitude(midpoint(B, G), A, projection(A, i)) we get altitude(F, B, D) == perpendicular_line(projection(F, i), altitude(midpoint(B, G), A, projection(A, i)))
By perpendicular_line_definition on orthocenter(A, D, projection(A, Line(D, G))), altitude(A, D, G), Line(D, G) we get altitude(A, D, G) == perpendicular_line(orthocenter(A, D, projection(A, Line(D, G))), Line(D, G))
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(F, B, G)), altitude(F, B, G), altitude(F, A, D) we get altitude(F, B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(F, B, G)), altitude(F, A, D))
By perpendicular_line_definition on orthocenter(A, F, midpoint(B, G)), altitude(F, A, D), altitude(E, B, G) we get altitude(F, A, D) == perpendicular_line(orthocenter(A, F, midpoint(B, G)), altitude(E, B, G))
By perpendicular_line_definition on line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i))), altitude(A, B, D), i we get altitude(A, B, D) == perpendicular_line(line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i))), i)
By perpendicular_line_definition on midpoint(B, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)), altitude(midpoint(B, G), D, G) we get altitude(midpoint(B, G), A, orthocenter(A, D, G)) == perpendicular_line(midpoint(B, G), altitude(midpoint(B, G), D, G))
By perpendicular_line_definition on orthocenter(A, F, midpoint(B, G)), altitude(midpoint(B, G), A, B), altitude(midpoint(B, G), D, F) we get altitude(midpoint(B, G), A, B) == perpendicular_line(orthocenter(A, F, midpoint(B, G)), altitude(midpoint(B, G), D, F))
By perpendicular_line_definition on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), altitude(midpoint(B, G), D, E), Line(D, E) we get altitude(midpoint(B, G), D, E) == perpendicular_line(line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), Line(D, E))
By perpendicular_line_definition on line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))), altitude(midpoint(B, G), A, orthocenter(A, D, G)), altitude(midpoint(B, G), D, G) we get altitude(midpoint(B, G), A, orthocenter(A, D, G)) == perpendicular_line(line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))), altitude(midpoint(B, G), D, G))
By perpendicular_line_definition on midpoint(B, G), altitude(midpoint(B, G), A, projection(A, i)), altitude(F, B, D) we get altitude(midpoint(B, G), A, projection(A, i)) == perpendicular_line(midpoint(B, G), altitude(F, B, D))
By perpendicular_line_definition on orthocenter(A, G, projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), A, G), g we get altitude(projection(A, Line(D, G)), A, G) == perpendicular_line(orthocenter(A, G, projection(A, Line(D, G))), g)
By line_intersection_definition on I, Line(I, orthocenter(A, B, D)), Line(B, I) we get I == line_intersection(Line(B, I), Line(I, orthocenter(A, B, D)))
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(E, B, G)), altitude(E, B, G), altitude(F, A, D) we get altitude(E, B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(E, B, G)), altitude(F, A, D))
By perpendicular_line_definition on A, h, altitude(projection(A, Line(D, G)), A, D) we get h == perpendicular_line(A, altitude(projection(A, Line(D, G)), A, D))
By perpendicular_line_definition on E, altitude(E, A, orthocenter(A, D, G)), altitude(midpoint(B, G), D, G) we get altitude(E, A, orthocenter(A, D, G)) == perpendicular_line(E, altitude(midpoint(B, G), D, G))
By perpendicular_line_definition on line_intersection(g, altitude(midpoint(B, G), A, C)), altitude(midpoint(B, G), A, C), altitude(midpoint(B, G), D, E) we get altitude(midpoint(B, G), A, C) == perpendicular_line(line_intersection(g, altitude(midpoint(B, G), A, C)), altitude(midpoint(B, G), D, E))
By line_intersection_definition on E, g, median(E, B, G) we get E == line_intersection(g, median(E, B, G))
By perpendicular_line_definition on F, f, altitude(projection(A, i), A, B) we get f == perpendicular_line(F, altitude(projection(A, i), A, B))
By perpendicular_line_definition on line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i))), altitude(midpoint(B, G), A, projection(A, i)), altitude(F, B, D) we get altitude(midpoint(B, G), A, projection(A, i)) == perpendicular_line(line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i))), altitude(F, B, D))
By perpendicular_line_definition on orthocenter(A, G, projection(A, Line(D, G))), Line(D, G), altitude(A, D, G) we get Line(D, G) == perpendicular_line(orthocenter(A, G, projection(A, Line(D, G))), altitude(A, D, G))
By perpendicular_line_definition on line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G))), Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G)) we get Line(C, orthocenter(A, D, G)) == perpendicular_line(line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G))), altitude(E, C, orthocenter(A, D, G)))
By perpendicular_line_definition on line_intersection(f, altitude(midpoint(B, G), A, B)), f, altitude(projection(A, i), A, B) we get f == perpendicular_line(line_intersection(f, altitude(midpoint(B, G), A, B)), altitude(projection(A, i), A, B))
By perpendicular_line_definition on line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G))), altitude(E, C, orthocenter(A, D, G)), Line(C, orthocenter(A, D, G)) we get altitude(E, C, orthocenter(A, D, G)) == perpendicular_line(line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G))), Line(C, orthocenter(A, D, G)))
By perpendicular_line_definition on orthocenter(A, G, projection(A, Line(D, G))), Line(D, G), altitude(midpoint(B, G), D, G) we get Line(D, G) == perpendicular_line(orthocenter(A, G, projection(A, Line(D, G))), altitude(midpoint(B, G), D, G))
By perpendicular_line_definition on H, f, altitude(projection(A, i), A, B) we get f == perpendicular_line(H, altitude(projection(A, i), A, B))
By perpendicular_line_definition on orthocenter(A, D, projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), A, D), h we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(orthocenter(A, D, projection(A, Line(D, G))), h)
By perpendicular_line_definition on orthocenter(A, D, projection(A, Line(D, G))), Line(D, G), altitude(E, D, G) we get Line(D, G) == perpendicular_line(orthocenter(A, D, projection(A, Line(D, G))), altitude(E, D, G))
By perpendicular_line_definition on G, g, altitude(projection(A, Line(D, G)), A, G) we get g == perpendicular_line(G, altitude(projection(A, Line(D, G)), A, G))
By perpendicular_line_definition on line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G))), altitude(E, A, orthocenter(A, D, G)), altitude(midpoint(B, G), D, G) we get altitude(E, A, orthocenter(A, D, G)) == perpendicular_line(line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G))), altitude(midpoint(B, G), D, G))
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(E, B, G)), Line(B, G), altitude(E, B, G) we get Line(B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(E, B, G)), altitude(E, B, G))
By perpendicular_line_definition on line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), altitude(A, F, midpoint(B, G)), median(F, B, G) we get altitude(A, F, midpoint(B, G)) == perpendicular_line(line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), median(F, B, G))
By perpendicular_line_definition on orthocenter(A, D, projection(A, i)), i, altitude(A, B, D) we get i == perpendicular_line(orthocenter(A, D, projection(A, i)), altitude(A, B, D))
By perpendicular_line_definition on E, altitude(E, D, G), altitude(E, A, orthocenter(A, D, G)) we get altitude(E, D, G) == perpendicular_line(E, altitude(E, A, orthocenter(A, D, G)))
By perpendicular_line_definition on line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i))), altitude(F, A, projection(A, i)), altitude(A, B, D) we get altitude(F, A, projection(A, i)) == perpendicular_line(line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i))), altitude(A, B, D))
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(E, B, G)), altitude(E, B, G), Line(B, G) we get altitude(E, B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(E, B, G)), Line(B, G))
By line_unique_intersection_v0 on i, altitude(A, B, D), orthocenter(A, B, projection(A, i)), orthocenter(A, D, projection(A, i)) we get orthocenter(A, B, projection(A, i)) == orthocenter(A, D, projection(A, i))
By line_unique_intersection_v0 on i, altitude(A, B, D), projection(A, i), orthocenter(A, B, projection(A, i)) we get projection(A, i) == orthocenter(A, B, projection(A, i))
By line_unique_intersection_v0 on altitude(A, D, G), Line(D, G), orthocenter(A, G, projection(A, Line(D, G))), orthocenter(A, D, projection(A, Line(D, G))) we get orthocenter(A, D, projection(A, Line(D, G))) == orthocenter(A, G, projection(A, Line(D, G)))
By line_unique_intersection_v0 on altitude(A, D, G), Line(D, G), orthocenter(A, D, projection(A, Line(D, G))), projection(A, Line(D, G)) we get projection(A, Line(D, G)) == orthocenter(A, D, projection(A, Line(D, G)))
By line_unique_intersection_v0 on i, altitude(A, B, D), projection(A, i), orthocenter(A, D, projection(A, i)) we get projection(A, i) == orthocenter(A, D, projection(A, i))
By projection_definition on midpoint(B, G), line_intersection(Line(G, I), altitude(midpoint(B, G), G, I)), Line(G, I) we get projection(midpoint(B, G), Line(G, I)) == line_intersection(Line(G, I), altitude(midpoint(B, G), G, I))
By projection_definition on midpoint(B, G), line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), Line(D, G) we get projection(midpoint(B, G), Line(D, G)) == line_intersection(Line(D, G), altitude(midpoint(B, G), D, G))
By projection_definition on midpoint(B, G), line_intersection(Line(B, I), altitude(midpoint(B, G), B, I)), Line(B, I) we get projection(midpoint(B, G), Line(B, I)) == line_intersection(Line(B, I), altitude(midpoint(B, G), B, I))
By projection_definition on midpoint(B, G), line_intersection(i, altitude(midpoint(B, G), B, D)), i we get projection(midpoint(B, G), i) == line_intersection(i, altitude(midpoint(B, G), B, D))
By projection_definition on midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B)), f we get projection(midpoint(B, G), f) == line_intersection(f, altitude(midpoint(B, G), A, B))
By projection_definition on midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C)), g we get projection(midpoint(B, G), g) == line_intersection(g, altitude(midpoint(B, G), A, C))
By parallel_line_definition on F, altitude(F, B, G), altitude(E, B, G) we get altitude(F, B, G) == parallel_line(F, altitude(E, B, G))
By parallel_line_definition on E, altitude(E, A, orthocenter(A, D, G)), Line(D, G) we get parallel_line(E, Line(D, G)) == altitude(E, A, orthocenter(A, D, G))
By parallel_line_definition on I, h, altitude(E, B, G) we get h == parallel_line(I, altitude(E, B, G))
By parallel_line_definition on line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), Line(D, G), altitude(E, A, orthocenter(A, D, G)) we get Line(D, G) == parallel_line(line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), altitude(E, A, orthocenter(A, D, G)))
By parallel_line_definition on orthocenter(A, B, projection(A, i)), i, altitude(F, A, projection(A, i)) we get i == parallel_line(orthocenter(A, B, projection(A, i)), altitude(F, A, projection(A, i)))
By parallel_line_definition on A, g, altitude(midpoint(B, G), D, E) we get g == parallel_line(A, altitude(midpoint(B, G), D, E))
By parallel_line_definition on line_intersection(Line(B, G), altitude(F, B, G)), Line(B, G), altitude(E, A, D) we get Line(B, G) == parallel_line(line_intersection(Line(B, G), altitude(F, B, G)), altitude(E, A, D))
By parallel_line_definition on projection(A, Line(D, G)), Line(D, G), altitude(E, A, orthocenter(A, D, G)) we get Line(D, G) == parallel_line(projection(A, Line(D, G)), altitude(E, A, orthocenter(A, D, G)))
By parallel_line_definition on orthocenter(A, D, projection(A, i)), altitude(A, B, D), altitude(F, B, D) we get altitude(A, B, D) == parallel_line(orthocenter(A, D, projection(A, i)), altitude(F, B, D))
By parallel_line_definition on B, f, altitude(midpoint(B, G), D, F) we get f == parallel_line(B, altitude(midpoint(B, G), D, F))
By parallel_line_definition on line_intersection(i, altitude(midpoint(B, G), B, D)), i, altitude(F, A, projection(A, i)) we get i == parallel_line(line_intersection(i, altitude(midpoint(B, G), B, D)), altitude(F, A, projection(A, i)))
By parallel_line_definition on midpoint(B, G), altitude(midpoint(B, G), D, E), g we get altitude(midpoint(B, G), D, E) == parallel_line(midpoint(B, G), g)
By parallel_line_definition on E, g, altitude(midpoint(B, G), D, E) we get g == parallel_line(E, altitude(midpoint(B, G), D, E))
By parallel_line_definition on H, f, altitude(midpoint(B, G), D, F) we get f == parallel_line(H, altitude(midpoint(B, G), D, F))
By parallel_line_definition on A, h, altitude(F, B, G) we get h == parallel_line(A, altitude(F, B, G))
By parallel_line_definition on orthocenter(A, G, projection(A, Line(D, G))), altitude(A, D, G), altitude(midpoint(B, G), D, G) we get altitude(A, D, G) == parallel_line(orthocenter(A, G, projection(A, Line(D, G))), altitude(midpoint(B, G), D, G))
By parallel_line_definition on orthocenter(A, D, projection(A, Line(D, G))), altitude(A, D, G), altitude(midpoint(B, G), D, G) we get altitude(A, D, G) == parallel_line(orthocenter(A, D, projection(A, Line(D, G))), altitude(midpoint(B, G), D, G))
By parallel_line_definition on midpoint(B, G), h, altitude(E, B, G) we get h == parallel_line(midpoint(B, G), altitude(E, B, G))
By parallel_line_definition on line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i))), altitude(midpoint(B, G), A, projection(A, i)), i we get altitude(midpoint(B, G), A, projection(A, i)) == parallel_line(line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i))), i)
By parallel_line_definition on orthocenter(A, G, projection(A, Line(D, G))), Line(D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)) we get Line(D, G) == parallel_line(orthocenter(A, G, projection(A, Line(D, G))), altitude(midpoint(B, G), A, orthocenter(A, D, G)))
By parallel_line_definition on line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i))), altitude(midpoint(B, G), A, projection(A, i)), altitude(F, A, projection(A, i)) we get altitude(midpoint(B, G), A, projection(A, i)) == parallel_line(line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i))), altitude(F, A, projection(A, i)))
By parallel_line_definition on orthocenter(A, D, projection(A, Line(D, G))), Line(D, G), altitude(E, A, orthocenter(A, D, G)) we get Line(D, G) == parallel_line(orthocenter(A, D, projection(A, Line(D, G))), altitude(E, A, orthocenter(A, D, G)))
By parallel_line_definition on line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))), altitude(A, D, G), altitude(E, D, G) we get altitude(A, D, G) == parallel_line(line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))), altitude(E, D, G))
By parallel_line_definition on C, g, altitude(midpoint(B, G), D, E) we get g == parallel_line(C, altitude(midpoint(B, G), D, E))
By parallel_line_definition on projection(E, h), h, altitude(E, B, G) we get h == parallel_line(projection(E, h), altitude(E, B, G))
By parallel_line_definition on orthocenter(A, D, projection(A, i)), i, altitude(midpoint(B, G), A, projection(A, i)) we get i == parallel_line(orthocenter(A, D, projection(A, i)), altitude(midpoint(B, G), A, projection(A, i)))
By parallel_line_definition on projection(A, i), i, altitude(midpoint(B, G), A, projection(A, i)) we get i == parallel_line(projection(A, i), altitude(midpoint(B, G), A, projection(A, i)))
By parallel_line_definition on G, Line(D, G), altitude(E, A, orthocenter(A, D, G)) we get Line(D, G) == parallel_line(G, altitude(E, A, orthocenter(A, D, G)))
By parallel_line_definition on orthocenter(A, D, projection(A, i)), i, altitude(F, A, projection(A, i)) we get i == parallel_line(orthocenter(A, D, projection(A, i)), altitude(F, A, projection(A, i)))
By parallel_line_definition on line_intersection(Line(B, G), altitude(F, B, G)), altitude(F, B, G), h we get altitude(F, B, G) == parallel_line(line_intersection(Line(B, G), altitude(F, B, G)), h)
By parallel_line_definition on midpoint(B, G), altitude(midpoint(B, G), A, projection(A, i)), i we get parallel_line(midpoint(B, G), i) == altitude(midpoint(B, G), A, projection(A, i))
By parallel_line_definition on line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G))), altitude(A, D, G), altitude(midpoint(B, G), D, G) we get altitude(A, D, G) == parallel_line(line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G))), altitude(midpoint(B, G), D, G))
By parallel_line_definition on A, f, altitude(midpoint(B, G), D, F) we get f == parallel_line(A, altitude(midpoint(B, G), D, F))
By parallel_line_definition on line_intersection(g, altitude(midpoint(B, G), A, C)), g, altitude(midpoint(B, G), D, E) we get g == parallel_line(line_intersection(g, altitude(midpoint(B, G), A, C)), altitude(midpoint(B, G), D, E))
By parallel_line_definition on projection(F, i), i, altitude(midpoint(B, G), A, projection(A, i)) we get i == parallel_line(projection(F, i), altitude(midpoint(B, G), A, projection(A, i)))
By parallel_line_definition on D, h, altitude(E, B, G) we get h == parallel_line(D, altitude(E, B, G))
By parallel_line_definition on F, altitude(F, B, G), h we get altitude(F, B, G) == parallel_line(F, h)
By parallel_line_definition on orthocenter(A, D, projection(A, Line(D, G))), altitude(A, D, G), altitude(E, D, G) we get altitude(A, D, G) == parallel_line(orthocenter(A, D, projection(A, Line(D, G))), altitude(E, D, G))
By parallel_line_definition on orthocenter(A, D, projection(A, Line(D, G))), Line(D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)) we get Line(D, G) == parallel_line(orthocenter(A, D, projection(A, Line(D, G))), altitude(midpoint(B, G), A, orthocenter(A, D, G)))
By parallel_line_definition on line_intersection(Line(B, G), altitude(E, B, G)), altitude(E, B, G), altitude(F, B, G) we get altitude(E, B, G) == parallel_line(line_intersection(Line(B, G), altitude(E, B, G)), altitude(F, B, G))
By parallel_line_definition on A, h, altitude(E, B, G) we get h == parallel_line(A, altitude(E, B, G))
By parallel_line_definition on D, h, altitude(F, B, G) we get h == parallel_line(D, altitude(F, B, G))
By parallel_line_definition on G, Line(D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)) we get Line(D, G) == parallel_line(G, altitude(midpoint(B, G), A, orthocenter(A, D, G)))
By parallel_line_definition on projection(A, i), i, altitude(F, A, projection(A, i)) we get i == parallel_line(projection(A, i), altitude(F, A, projection(A, i)))
By parallel_line_definition on orthocenter(A, B, projection(A, i)), altitude(A, B, D), altitude(midpoint(B, G), B, D) we get altitude(A, B, D) == parallel_line(orthocenter(A, B, projection(A, i)), altitude(midpoint(B, G), B, D))
By parallel_line_definition on line_intersection(Line(B, G), altitude(E, B, G)), altitude(E, B, G), h we get altitude(E, B, G) == parallel_line(line_intersection(Line(B, G), altitude(E, B, G)), h)
By parallel_line_definition on projection(E, Line(D, G)), Line(D, G), altitude(E, A, orthocenter(A, D, G)) we get Line(D, G) == parallel_line(projection(E, Line(D, G)), altitude(E, A, orthocenter(A, D, G)))
By parallel_line_definition on F, altitude(F, A, projection(A, i)), i we get parallel_line(F, i) == altitude(F, A, projection(A, i))
By parallel_line_definition on line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), Line(D, F), altitude(midpoint(B, G), A, B) we get Line(D, F) == parallel_line(line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), altitude(midpoint(B, G), A, B))
By parallel_line_definition on B, i, altitude(F, A, projection(A, i)) we get i == parallel_line(B, altitude(F, A, projection(A, i)))
By parallel_line_definition on D, Line(D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)) we get Line(D, G) == parallel_line(D, altitude(midpoint(B, G), A, orthocenter(A, D, G)))
By parallel_line_definition on projection(F, h), h, altitude(E, B, G) we get h == parallel_line(projection(F, h), altitude(E, B, G))
By parallel_line_definition on line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G))), altitude(A, D, G), altitude(E, D, G) we get altitude(A, D, G) == parallel_line(line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G))), altitude(E, D, G))
By parallel_line_definition on D, Line(D, G), altitude(E, A, orthocenter(A, D, G)) we get Line(D, G) == parallel_line(D, altitude(E, A, orthocenter(A, D, G)))
By parallel_line_definition on projection(F, i), i, altitude(F, A, projection(A, i)) we get i == parallel_line(projection(F, i), altitude(F, A, projection(A, i)))
By parallel_line_definition on line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G))), altitude(E, A, orthocenter(A, D, G)), altitude(midpoint(B, G), A, orthocenter(A, D, G)) we get altitude(E, A, orthocenter(A, D, G)) == parallel_line(line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G))), altitude(midpoint(B, G), A, orthocenter(A, D, G)))
By parallel_line_definition on line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i))), altitude(F, A, projection(A, i)), altitude(midpoint(B, G), A, projection(A, i)) we get altitude(F, A, projection(A, i)) == parallel_line(line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i))), altitude(midpoint(B, G), A, projection(A, i)))
By parallel_line_definition on projection(F, h), h, altitude(F, B, G) we get h == parallel_line(projection(F, h), altitude(F, B, G))
By parallel_line_definition on E, altitude(E, A, orthocenter(A, D, G)), altitude(midpoint(B, G), A, orthocenter(A, D, G)) we get altitude(E, A, orthocenter(A, D, G)) == parallel_line(E, altitude(midpoint(B, G), A, orthocenter(A, D, G)))
By parallel_line_definition on line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), Line(D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)) we get Line(D, G) == parallel_line(line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), altitude(midpoint(B, G), A, orthocenter(A, D, G)))
By parallel_line_definition on line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i))), altitude(A, B, D), altitude(F, B, D) we get altitude(A, B, D) == parallel_line(line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i))), altitude(F, B, D))
By parallel_line_definition on line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))), altitude(A, D, G), altitude(midpoint(B, G), D, G) we get altitude(A, D, G) == parallel_line(line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))), altitude(midpoint(B, G), D, G))
By parallel_line_definition on orthocenter(A, B, projection(A, i)), altitude(A, B, D), altitude(F, B, D) we get altitude(A, B, D) == parallel_line(orthocenter(A, B, projection(A, i)), altitude(F, B, D))
By parallel_line_definition on line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i))), altitude(A, B, D), altitude(midpoint(B, G), B, D) we get altitude(A, B, D) == parallel_line(line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i))), altitude(midpoint(B, G), B, D))
By parallel_line_definition on line_intersection(Line(B, G), altitude(E, B, G)), Line(B, G), altitude(E, A, D) we get Line(B, G) == parallel_line(line_intersection(Line(B, G), altitude(E, B, G)), altitude(E, A, D))
By parallel_line_definition on line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))), altitude(midpoint(B, G), A, orthocenter(A, D, G)), altitude(E, A, orthocenter(A, D, G)) we get altitude(midpoint(B, G), A, orthocenter(A, D, G)) == parallel_line(line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))), altitude(E, A, orthocenter(A, D, G)))
By parallel_line_definition on projection(E, h), h, altitude(F, B, G) we get h == parallel_line(projection(E, h), altitude(F, B, G))
By parallel_line_definition on D, i, altitude(F, A, projection(A, i)) we get i == parallel_line(D, altitude(F, A, projection(A, i)))
By parallel_line_definition on line_intersection(f, altitude(midpoint(B, G), A, B)), f, altitude(midpoint(B, G), D, F) we get f == parallel_line(line_intersection(f, altitude(midpoint(B, G), A, B)), altitude(midpoint(B, G), D, F))
By parallel_line_definition on G, g, altitude(midpoint(B, G), D, E) we get g == parallel_line(G, altitude(midpoint(B, G), D, E))
By parallel_line_definition on line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))), altitude(midpoint(B, G), A, orthocenter(A, D, G)), Line(D, G) we get altitude(midpoint(B, G), A, orthocenter(A, D, G)) == parallel_line(line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))), Line(D, G))
By parallel_line_definition on E, altitude(E, B, G), altitude(F, B, G) we get altitude(E, B, G) == parallel_line(E, altitude(F, B, G))
By parallel_line_definition on D, i, altitude(midpoint(B, G), A, projection(A, i)) we get i == parallel_line(D, altitude(midpoint(B, G), A, projection(A, i)))
By parallel_line_definition on line_intersection(i, altitude(midpoint(B, G), B, D)), i, altitude(midpoint(B, G), A, projection(A, i)) we get i == parallel_line(line_intersection(i, altitude(midpoint(B, G), B, D)), altitude(midpoint(B, G), A, projection(A, i)))
By parallel_line_definition on line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G))), altitude(E, A, orthocenter(A, D, G)), Line(D, G) we get altitude(E, A, orthocenter(A, D, G)) == parallel_line(line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G))), Line(D, G))
By parallel_line_definition on B, i, altitude(midpoint(B, G), A, projection(A, i)) we get i == parallel_line(B, altitude(midpoint(B, G), A, projection(A, i)))
By parallel_line_definition on orthocenter(A, G, projection(A, Line(D, G))), altitude(A, D, G), altitude(E, D, G) we get altitude(A, D, G) == parallel_line(orthocenter(A, G, projection(A, Line(D, G))), altitude(E, D, G))
By parallel_line_definition on F, altitude(F, A, projection(A, i)), altitude(midpoint(B, G), A, projection(A, i)) we get altitude(F, A, projection(A, i)) == parallel_line(F, altitude(midpoint(B, G), A, projection(A, i)))
By parallel_line_definition on line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i))), altitude(A, B, D), altitude(F, B, D) we get altitude(A, B, D) == parallel_line(line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i))), altitude(F, B, D))
By parallel_line_definition on line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i))), altitude(A, B, D), altitude(midpoint(B, G), B, D) we get altitude(A, B, D) == parallel_line(line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i))), altitude(midpoint(B, G), B, D))
By parallel_line_definition on projection(E, Line(D, G)), Line(D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)) we get Line(D, G) == parallel_line(projection(E, Line(D, G)), altitude(midpoint(B, G), A, orthocenter(A, D, G)))
By parallel_line_definition on midpoint(B, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)), altitude(E, A, orthocenter(A, D, G)) we get altitude(midpoint(B, G), A, orthocenter(A, D, G)) == parallel_line(midpoint(B, G), altitude(E, A, orthocenter(A, D, G)))
By parallel_line_definition on F, f, altitude(midpoint(B, G), D, F) we get f == parallel_line(F, altitude(midpoint(B, G), D, F))
By parallel_line_definition on projection(A, Line(D, G)), Line(D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)) we get Line(D, G) == parallel_line(projection(A, Line(D, G)), altitude(midpoint(B, G), A, orthocenter(A, D, G)))
By parallel_line_definition on line_intersection(Line(B, G), altitude(F, B, G)), Line(B, G), altitude(F, A, D) we get Line(B, G) == parallel_line(line_intersection(Line(B, G), altitude(F, B, G)), altitude(F, A, D))
By parallel_line_definition on midpoint(B, G), altitude(midpoint(B, G), D, F), f we get altitude(midpoint(B, G), D, F) == parallel_line(midpoint(B, G), f)
By parallel_line_definition on orthocenter(A, G, projection(A, Line(D, G))), Line(D, G), altitude(E, A, orthocenter(A, D, G)) we get Line(D, G) == parallel_line(orthocenter(A, G, projection(A, Line(D, G))), altitude(E, A, orthocenter(A, D, G)))
By parallel_line_definition on midpoint(B, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)), Line(D, G) we get parallel_line(midpoint(B, G), Line(D, G)) == altitude(midpoint(B, G), A, orthocenter(A, D, G))
By parallel_line_definition on E, altitude(E, B, G), h we get altitude(E, B, G) == parallel_line(E, h)
By parallel_line_definition on I, h, altitude(F, B, G) we get h == parallel_line(I, altitude(F, B, G))
By parallel_line_definition on line_intersection(Line(B, G), altitude(F, B, G)), altitude(F, B, G), altitude(E, B, G) we get altitude(F, B, G) == parallel_line(line_intersection(Line(B, G), altitude(F, B, G)), altitude(E, B, G))
By parallel_line_definition on midpoint(B, G), altitude(midpoint(B, G), A, projection(A, i)), altitude(F, A, projection(A, i)) we get altitude(midpoint(B, G), A, projection(A, i)) == parallel_line(midpoint(B, G), altitude(F, A, projection(A, i)))
By parallel_line_definition on orthocenter(A, B, projection(A, i)), i, altitude(midpoint(B, G), A, projection(A, i)) we get i == parallel_line(orthocenter(A, B, projection(A, i)), altitude(midpoint(B, G), A, projection(A, i)))
By parallel_line_definition on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), altitude(midpoint(B, G), D, E), g we get altitude(midpoint(B, G), D, E) == parallel_line(line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), g)
By parallel_line_definition on line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i))), altitude(F, A, projection(A, i)), i we get altitude(F, A, projection(A, i)) == parallel_line(line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i))), i)
By parallel_line_definition on line_intersection(Line(B, G), altitude(E, B, G)), Line(B, G), altitude(F, A, D) we get Line(B, G) == parallel_line(line_intersection(Line(B, G), altitude(E, B, G)), altitude(F, A, D))
By parallel_line_definition on line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), altitude(midpoint(B, G), D, F), f we get altitude(midpoint(B, G), D, F) == parallel_line(line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), f)
By parallel_line_definition on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), Line(D, E), altitude(midpoint(B, G), A, C) we get Line(D, E) == parallel_line(line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), altitude(midpoint(B, G), A, C))
By parallel_line_definition on midpoint(B, G), h, altitude(F, B, G) we get h == parallel_line(midpoint(B, G), altitude(F, B, G))
By parallel_line_definition on orthocenter(A, D, projection(A, i)), altitude(A, B, D), altitude(midpoint(B, G), B, D) we get altitude(A, B, D) == parallel_line(orthocenter(A, D, projection(A, i)), altitude(midpoint(B, G), B, D))
By different_points_v1 on line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), midpoint(B, G) we get 0 != distance(midpoint(B, G), line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)))
By different_points_v1 on line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G) we get 0 != distance(midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B)))
By different_points_v1 on midpoint(B, G), line_intersection(Line(B, I), altitude(midpoint(B, G), B, I)) we get 0 != distance(midpoint(B, G), line_intersection(Line(B, I), altitude(midpoint(B, G), B, I)))
By different_points_v1 on line_intersection(i, altitude(midpoint(B, G), B, D)), midpoint(B, G) we get 0 != distance(midpoint(B, G), line_intersection(i, altitude(midpoint(B, G), B, D)))
By different_points_v1 on line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G) we get 0 != distance(midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C)))
By in_imply_collinear on orthocenter(A, D, projection(A, Line(D, G))), A, orthocenter(A, D, G) we get collinear(A, orthocenter(A, D, G), orthocenter(A, D, projection(A, Line(D, G))))
By perpendicular_direction_conditions_v0_r on D, projection(A, Line(D, G)), line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), midpoint(B, G) we get 180 == 2 * direction(D, projection(A, Line(D, G))) - 2 * direction(line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), midpoint(B, G)) mod 360
By different_points_v1 on midpoint(B, G), line_intersection(Line(G, I), altitude(midpoint(B, G), G, I)) we get 0 != distance(midpoint(B, G), line_intersection(Line(G, I), altitude(midpoint(B, G), G, I)))
By perpendicular_direction_conditions_v0_r on B, I, line_intersection(Line(B, I), altitude(midpoint(B, G), B, I)), midpoint(B, G) we get 180 == 2 * direction(B, I) - 2 * direction(line_intersection(Line(B, I), altitude(midpoint(B, G), B, I)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G), B, A we get 180 == 2 * direction(line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G)) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C)), A, C we get 180 == 2 * direction(midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C))) - 2 * direction(A, C) mod 360
By sas_similarity on H, A, C, F, A, E we get similar_triangles(A, C, H, A, E, F)
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B)), H, F we get 180 == 2 * direction(midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B))) - 2 * direction(H, F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G), A, F we get 180 == 2 * direction(line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G)) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on A, B, midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B)) we get 180 == 2 * direction(A, B) - 2 * direction(midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B))) mod 360
By perpendicular_direction_conditions_v0_r on I, G, midpoint(B, G), line_intersection(Line(G, I), altitude(midpoint(B, G), G, I)) we get 180 == 2 * direction(I, G) - 2 * direction(midpoint(B, G), line_intersection(Line(G, I), altitude(midpoint(B, G), G, I))) mod 360
By in_imply_collinear on line_intersection(Line(B, G), altitude(E, B, G)), orthocenter(A, B, D), B we get collinear(B, orthocenter(A, B, D), line_intersection(Line(B, G), altitude(E, B, G)))
By orthocenter_concurrency on orthocenter(A, B, D), B, projection(A, i) we get orthocenter(B, projection(A, i), orthocenter(A, B, D)) in altitude(orthocenter(A, B, D), B, projection(A, i)), orthocenter(B, projection(A, i), orthocenter(A, B, D)) in altitude(B, projection(A, i), orthocenter(A, B, D)), orthocenter(B, projection(A, i), orthocenter(A, B, D)) in altitude(projection(A, i), B, orthocenter(A, B, D))
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), G, D we get 180 == 2 * direction(midpoint(B, G), line_intersection(Line(D, G), altitude(midpoint(B, G), D, G))) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on D, projection(A, i), line_intersection(i, altitude(midpoint(B, G), B, D)), midpoint(B, G) we get 180 == 2 * direction(D, projection(A, i)) - 2 * direction(line_intersection(i, altitude(midpoint(B, G), B, D)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G), G, E we get 180 == 2 * direction(line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G)) - 2 * direction(G, E) mod 360
By sas_anti_similarity on F, A, E, C, A, H we get anti_similar_triangles(A, C, H, A, F, E)
By perpendicular_direction_conditions_v0_r on G, D, line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), midpoint(B, G) we get 180 == 2 * direction(G, D) - 2 * direction(line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), midpoint(B, G)) mod 360
By orthocenter_concurrency on E, midpoint(B, G), G we get orthocenter(E, G, midpoint(B, G)) in altitude(E, G, midpoint(B, G)), orthocenter(E, G, midpoint(B, G)) in altitude(midpoint(B, G), E, G), orthocenter(E, G, midpoint(B, G)) in altitude(G, E, midpoint(B, G))
By perpendicular_direction_conditions_v0_r on B, I, midpoint(B, G), line_intersection(Line(B, I), altitude(midpoint(B, G), B, I)) we get 180 == 2 * direction(B, I) - 2 * direction(midpoint(B, G), line_intersection(Line(B, I), altitude(midpoint(B, G), B, I))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C)), E, C we get 180 == 2 * direction(midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C))) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on E, A, midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C)) we get 180 == 2 * direction(E, A) - 2 * direction(midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C))) mod 360
By in_imply_collinear on line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), F, D we get collinear(D, F, line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)))
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B)), A, H we get 180 == 2 * direction(midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B))) - 2 * direction(A, H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(i, altitude(midpoint(B, G), B, D)), B, projection(A, i) we get 180 == 2 * direction(midpoint(B, G), line_intersection(i, altitude(midpoint(B, G), B, D))) - 2 * direction(B, projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), projection(A, Line(D, G)), D we get 180 == 2 * direction(midpoint(B, G), line_intersection(Line(D, G), altitude(midpoint(B, G), D, G))) - 2 * direction(projection(A, Line(D, G)), D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), G, projection(A, Line(D, G)) we get 180 == 2 * direction(midpoint(B, G), line_intersection(Line(D, G), altitude(midpoint(B, G), D, G))) - 2 * direction(G, projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on B, D, line_intersection(i, altitude(midpoint(B, G), B, D)), midpoint(B, G) we get 180 == 2 * direction(B, D) - 2 * direction(line_intersection(i, altitude(midpoint(B, G), B, D)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on C, A, midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C)) we get 180 == 2 * direction(C, A) - 2 * direction(midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C))) mod 360
By projection_definition on projection(E, h), E, altitude(E, B, G) we get E == projection(projection(E, h), altitude(E, B, G))
By in_imply_collinear on orthocenter(A, D, projection(A, i)), A, projection(A, i) we get collinear(A, projection(A, i), orthocenter(A, D, projection(A, i)))
By projection_definition on line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G), altitude(midpoint(B, G), D, F) we get midpoint(B, G) == projection(line_intersection(f, altitude(midpoint(B, G), A, B)), altitude(midpoint(B, G), D, F))
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B)), B, A we get 180 == 2 * direction(midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B))) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on G, E, line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G) we get 180 == 2 * direction(G, E) - 2 * direction(line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), G, line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), midpoint(B, G) we get 180 == 2 * direction(projection(A, Line(D, G)), G) - 2 * direction(line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, E, midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C)) we get 180 == 2 * direction(A, E) - 2 * direction(midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C)), C, A we get 180 == 2 * direction(midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C))) - 2 * direction(C, A) mod 360
By projection_definition on line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), midpoint(B, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)) we get midpoint(B, G) == projection(line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), altitude(midpoint(B, G), A, orthocenter(A, D, G)))
By orthocenter_concurrency on midpoint(B, G), F, orthocenter(A, B, D) we get orthocenter(F, midpoint(B, G), orthocenter(A, B, D)) in altitude(midpoint(B, G), F, orthocenter(A, B, D)), orthocenter(F, midpoint(B, G), orthocenter(A, B, D)) in altitude(F, midpoint(B, G), orthocenter(A, B, D)), orthocenter(F, midpoint(B, G), orthocenter(A, B, D)) in altitude(orthocenter(A, B, D), F, midpoint(B, G))
By perpendicular_direction_conditions_v0_r on D, G, line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), midpoint(B, G) we get 180 == 2 * direction(D, G) - 2 * direction(line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, altitude(midpoint(B, G), B, D)), midpoint(B, G), projection(A, i), B we get 180 == 2 * direction(line_intersection(i, altitude(midpoint(B, G), B, D)), midpoint(B, G)) - 2 * direction(projection(A, i), B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), midpoint(B, G), D, projection(A, Line(D, G)) we get 180 == 2 * direction(line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), midpoint(B, G)) - 2 * direction(D, projection(A, Line(D, G))) mod 360
By projection_definition on projection(F, h), F, altitude(F, B, G) we get F == projection(projection(F, h), altitude(F, B, G))
By orthocenter_concurrency on F, midpoint(B, G), D we get orthocenter(D, F, midpoint(B, G)) in altitude(F, D, midpoint(B, G)), orthocenter(D, F, midpoint(B, G)) in altitude(midpoint(B, G), D, F), orthocenter(D, F, midpoint(B, G)) in altitude(D, F, midpoint(B, G))
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), D, line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), midpoint(B, G) we get 180 == 2 * direction(projection(A, Line(D, G)), D) - 2 * direction(line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), midpoint(B, G)) mod 360
By orthocenter_concurrency on orthocenter(A, D, G), G, projection(A, Line(D, G)) we get orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))) in altitude(orthocenter(A, D, G), G, projection(A, Line(D, G))), orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))) in altitude(G, orthocenter(A, D, G), projection(A, Line(D, G))), orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))) in altitude(projection(A, Line(D, G)), G, orthocenter(A, D, G))
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G), B, H we get 180 == 2 * direction(line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G)) - 2 * direction(B, H) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G), G, C we get 180 == 2 * direction(line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G)) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), D, midpoint(B, G), line_intersection(i, altitude(midpoint(B, G), B, D)) we get 180 == 2 * direction(projection(A, i), D) - 2 * direction(midpoint(B, G), line_intersection(i, altitude(midpoint(B, G), B, D))) mod 360
By perpendicular_direction_conditions_v0_r on C, E, midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C)) we get 180 == 2 * direction(C, E) - 2 * direction(midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G), H, B we get 180 == 2 * direction(line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G)) - 2 * direction(H, B) mod 360
By perpendicular_direction_conditions_v0_r on D, B, midpoint(B, G), line_intersection(i, altitude(midpoint(B, G), B, D)) we get 180 == 2 * direction(D, B) - 2 * direction(midpoint(B, G), line_intersection(i, altitude(midpoint(B, G), B, D))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(Line(G, I), altitude(midpoint(B, G), G, I)), G, I we get 180 == 2 * direction(midpoint(B, G), line_intersection(Line(G, I), altitude(midpoint(B, G), G, I))) - 2 * direction(G, I) mod 360
By in_imply_collinear on line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i))), A, projection(A, i) we get collinear(A, projection(A, i), line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i))))
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), D, projection(A, Line(D, G)) we get 180 == 2 * direction(midpoint(B, G), line_intersection(Line(D, G), altitude(midpoint(B, G), D, G))) - 2 * direction(D, projection(A, Line(D, G))) mod 360
By projection_definition on projection(E, Line(D, G)), E, altitude(E, A, orthocenter(A, D, G)) we get E == projection(projection(E, Line(D, G)), altitude(E, A, orthocenter(A, D, G)))
By perpendicular_direction_conditions_v0_r on C, E, line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G) we get 180 == 2 * direction(C, E) - 2 * direction(line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G), F, A we get 180 == 2 * direction(line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G)) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(i, altitude(midpoint(B, G), B, D)), B, D we get 180 == 2 * direction(midpoint(B, G), line_intersection(i, altitude(midpoint(B, G), B, D))) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G), H, A we get 180 == 2 * direction(line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G)) - 2 * direction(H, A) mod 360
By projection_definition on projection(F, i), F, altitude(F, A, projection(A, i)) we get F == projection(projection(F, i), altitude(F, A, projection(A, i)))
By perpendicular_direction_conditions_v0_r on I, G, line_intersection(Line(G, I), altitude(midpoint(B, G), G, I)), midpoint(B, G) we get 180 == 2 * direction(I, G) - 2 * direction(line_intersection(Line(G, I), altitude(midpoint(B, G), G, I)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B)), F, B we get 180 == 2 * direction(midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B))) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, altitude(midpoint(B, G), B, D)), midpoint(B, G), B, D we get 180 == 2 * direction(line_intersection(i, altitude(midpoint(B, G), B, D)), midpoint(B, G)) - 2 * direction(B, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C)), A, E we get 180 == 2 * direction(midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C))) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G), C, A we get 180 == 2 * direction(line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G)) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, altitude(midpoint(B, G), B, D)), midpoint(B, G), projection(A, i), D we get 180 == 2 * direction(line_intersection(i, altitude(midpoint(B, G), B, D)), midpoint(B, G)) - 2 * direction(projection(A, i), D) mod 360
By perpendicular_direction_conditions_v0_r on A, B, line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G) we get 180 == 2 * direction(A, B) - 2 * direction(line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, D, midpoint(B, G), line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)) we get 180 == 2 * direction(G, D) - 2 * direction(midpoint(B, G), line_intersection(Line(D, G), altitude(midpoint(B, G), D, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, I), altitude(midpoint(B, G), B, I)), midpoint(B, G), I, B we get 180 == 2 * direction(line_intersection(Line(B, I), altitude(midpoint(B, G), B, I)), midpoint(B, G)) - 2 * direction(I, B) mod 360
By perpendicular_direction_conditions_v0_r on E, A, line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G) we get 180 == 2 * direction(E, A) - 2 * direction(line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, G, midpoint(B, G), line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)) we get 180 == 2 * direction(D, G) - 2 * direction(midpoint(B, G), line_intersection(Line(D, G), altitude(midpoint(B, G), D, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G), C, E we get 180 == 2 * direction(line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G)) - 2 * direction(C, E) mod 360
By in_imply_collinear on line_intersection(Line(B, G), altitude(F, B, G)), orthocenter(A, D, G), midpoint(B, G) we get collinear(midpoint(B, G), orthocenter(A, D, G), line_intersection(Line(B, G), altitude(F, B, G)))
By perpendicular_direction_conditions_v0_r on line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G), A, C we get 180 == 2 * direction(line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G)) - 2 * direction(A, C) mod 360
By orthocenter_concurrency on F, midpoint(B, G), B we get orthocenter(B, F, midpoint(B, G)) in altitude(F, B, midpoint(B, G)), orthocenter(B, F, midpoint(B, G)) in altitude(midpoint(B, G), B, F), orthocenter(B, F, midpoint(B, G)) in altitude(B, F, midpoint(B, G))
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G), A, B we get 180 == 2 * direction(line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G)) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on F, A, line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G) we get 180 == 2 * direction(F, A) - 2 * direction(line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on B, F, midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B)) we get 180 == 2 * direction(B, F) - 2 * direction(midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B))) mod 360
By perpendicular_direction_conditions_v0_r on H, B, midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B)) we get 180 == 2 * direction(H, B) - 2 * direction(midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(i, altitude(midpoint(B, G), B, D)), D, B we get 180 == 2 * direction(midpoint(B, G), line_intersection(i, altitude(midpoint(B, G), B, D))) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), B, midpoint(B, G), line_intersection(i, altitude(midpoint(B, G), B, D)) we get 180 == 2 * direction(projection(A, i), B) - 2 * direction(midpoint(B, G), line_intersection(i, altitude(midpoint(B, G), B, D))) mod 360
By orthocenter_concurrency on midpoint(B, G), E, orthocenter(A, D, G) we get orthocenter(E, midpoint(B, G), orthocenter(A, D, G)) in altitude(midpoint(B, G), E, orthocenter(A, D, G)), orthocenter(E, midpoint(B, G), orthocenter(A, D, G)) in altitude(E, midpoint(B, G), orthocenter(A, D, G)), orthocenter(E, midpoint(B, G), orthocenter(A, D, G)) in altitude(orthocenter(A, D, G), E, midpoint(B, G))
By perpendicular_direction_conditions_v0_r on projection(A, i), B, line_intersection(i, altitude(midpoint(B, G), B, D)), midpoint(B, G) we get 180 == 2 * direction(projection(A, i), B) - 2 * direction(line_intersection(i, altitude(midpoint(B, G), B, D)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C)), G, A we get 180 == 2 * direction(midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C))) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B)), F, A we get 180 == 2 * direction(midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B))) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), midpoint(B, G), G, D we get 180 == 2 * direction(line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), midpoint(B, G)) - 2 * direction(G, D) mod 360
By perpendicular_direction_conditions_v0_r on I, B, line_intersection(Line(B, I), altitude(midpoint(B, G), B, I)), midpoint(B, G) we get 180 == 2 * direction(I, B) - 2 * direction(line_intersection(Line(B, I), altitude(midpoint(B, G), B, I)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, E, midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C)) we get 180 == 2 * direction(G, E) - 2 * direction(midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C))) mod 360
By perpendicular_direction_conditions_v0_r on F, B, line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G) we get 180 == 2 * direction(F, B) - 2 * direction(line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G)) mod 360
By projection_definition on line_intersection(i, altitude(midpoint(B, G), B, D)), midpoint(B, G), altitude(midpoint(B, G), A, projection(A, i)) we get midpoint(B, G) == projection(line_intersection(i, altitude(midpoint(B, G), B, D)), altitude(midpoint(B, G), A, projection(A, i)))
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B)), H, A we get 180 == 2 * direction(midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B))) - 2 * direction(H, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C)), G, C we get 180 == 2 * direction(midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C))) - 2 * direction(G, C) mod 360
By orthocenter_concurrency on E, midpoint(B, G), D we get orthocenter(D, E, midpoint(B, G)) in altitude(E, D, midpoint(B, G)), orthocenter(D, E, midpoint(B, G)) in altitude(midpoint(B, G), D, E), orthocenter(D, E, midpoint(B, G)) in altitude(D, E, midpoint(B, G))
By in_imply_collinear on orthocenter(A, D, projection(A, i)), orthocenter(A, B, D), A we get collinear(A, orthocenter(A, B, D), orthocenter(A, D, projection(A, i)))
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(i, altitude(midpoint(B, G), B, D)), projection(A, i), B we get 180 == 2 * direction(midpoint(B, G), line_intersection(i, altitude(midpoint(B, G), B, D))) - 2 * direction(projection(A, i), B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G), H, F we get 180 == 2 * direction(line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G)) - 2 * direction(H, F) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), D, midpoint(B, G), line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)) we get 180 == 2 * direction(projection(A, Line(D, G)), D) - 2 * direction(midpoint(B, G), line_intersection(Line(D, G), altitude(midpoint(B, G), D, G))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B)), A, B we get 180 == 2 * direction(midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B))) - 2 * direction(A, B) mod 360
By projection_definition on line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G), altitude(midpoint(B, G), D, E) we get midpoint(B, G) == projection(line_intersection(g, altitude(midpoint(B, G), A, C)), altitude(midpoint(B, G), D, E))
By perpendicular_direction_conditions_v0_r on D, projection(A, i), midpoint(B, G), line_intersection(i, altitude(midpoint(B, G), B, D)) we get 180 == 2 * direction(D, projection(A, i)) - 2 * direction(midpoint(B, G), line_intersection(i, altitude(midpoint(B, G), B, D))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C)), E, G we get 180 == 2 * direction(midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C))) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on C, G, midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C)) we get 180 == 2 * direction(C, G) - 2 * direction(midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C))) mod 360
By perpendicular_direction_conditions_v0_r on B, H, midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B)) we get 180 == 2 * direction(B, H) - 2 * direction(midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B))) mod 360
By perpendicular_direction_conditions_v0_r on G, C, line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G) we get 180 == 2 * direction(G, C) - 2 * direction(line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, A, midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C)) we get 180 == 2 * direction(G, A) - 2 * direction(midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C))) mod 360
By perpendicular_direction_conditions_v0_r on B, projection(A, i), line_intersection(i, altitude(midpoint(B, G), B, D)), midpoint(B, G) we get 180 == 2 * direction(B, projection(A, i)) - 2 * direction(line_intersection(i, altitude(midpoint(B, G), B, D)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, projection(A, Line(D, G)), midpoint(B, G), line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)) we get 180 == 2 * direction(D, projection(A, Line(D, G))) - 2 * direction(midpoint(B, G), line_intersection(Line(D, G), altitude(midpoint(B, G), D, G))) mod 360
By perpendicular_direction_conditions_v0_r on F, A, midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B)) we get 180 == 2 * direction(F, A) - 2 * direction(midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B))) mod 360
By perpendicular_direction_conditions_v0_r on F, H, line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G) we get 180 == 2 * direction(F, H) - 2 * direction(line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, C, midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C)) we get 180 == 2 * direction(G, C) - 2 * direction(midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G), E, C we get 180 == 2 * direction(line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G)) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on A, C, line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G) we get 180 == 2 * direction(A, C) - 2 * direction(line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G), F, B we get 180 == 2 * direction(line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G)) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(G, I), altitude(midpoint(B, G), G, I)), midpoint(B, G), G, I we get 180 == 2 * direction(line_intersection(Line(G, I), altitude(midpoint(B, G), G, I)), midpoint(B, G)) - 2 * direction(G, I) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(Line(B, I), altitude(midpoint(B, G), B, I)), I, B we get 180 == 2 * direction(midpoint(B, G), line_intersection(Line(B, I), altitude(midpoint(B, G), B, I))) - 2 * direction(I, B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G), A, E we get 180 == 2 * direction(line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G)) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), midpoint(B, G), projection(A, Line(D, G)), D we get 180 == 2 * direction(line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), midpoint(B, G)) - 2 * direction(projection(A, Line(D, G)), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G), C, G we get 180 == 2 * direction(line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G)) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on A, G, midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C)) we get 180 == 2 * direction(A, G) - 2 * direction(midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C))) mod 360
By orthocenter_concurrency on D, orthocenter(A, D, G), projection(A, Line(D, G)) we get orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))) in altitude(D, orthocenter(A, D, G), projection(A, Line(D, G))), orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))) in altitude(orthocenter(A, D, G), D, projection(A, Line(D, G))), orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))) in altitude(projection(A, Line(D, G)), D, orthocenter(A, D, G))
By perpendicular_direction_conditions_v0_r on A, F, midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B)) we get 180 == 2 * direction(A, F) - 2 * direction(midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B))) mod 360
By in_imply_collinear on orthocenter(A, D, projection(A, Line(D, G))), projection(A, Line(D, G)), G we get collinear(G, projection(A, Line(D, G)), orthocenter(A, D, projection(A, Line(D, G))))
By perpendicular_direction_conditions_v0_r on B, A, line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G) we get 180 == 2 * direction(B, A) - 2 * direction(line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on F, B, midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B)) we get 180 == 2 * direction(F, B) - 2 * direction(midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B))) mod 360
By perpendicular_direction_conditions_v0_r on G, projection(A, Line(D, G)), line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), midpoint(B, G) we get 180 == 2 * direction(G, projection(A, Line(D, G))) - 2 * direction(line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, F, line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G) we get 180 == 2 * direction(A, F) - 2 * direction(line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B)), F, H we get 180 == 2 * direction(midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B))) - 2 * direction(F, H) mod 360
By perpendicular_direction_conditions_v0_r on B, F, line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G) we get 180 == 2 * direction(B, F) - 2 * direction(line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, H, midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B)) we get 180 == 2 * direction(A, H) - 2 * direction(midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), midpoint(B, G), D, G we get 180 == 2 * direction(line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), midpoint(B, G)) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on I, B, midpoint(B, G), line_intersection(Line(B, I), altitude(midpoint(B, G), B, I)) we get 180 == 2 * direction(I, B) - 2 * direction(midpoint(B, G), line_intersection(Line(B, I), altitude(midpoint(B, G), B, I))) mod 360
By perpendicular_direction_conditions_v0_r on G, I, line_intersection(Line(G, I), altitude(midpoint(B, G), G, I)), midpoint(B, G) we get 180 == 2 * direction(G, I) - 2 * direction(line_intersection(Line(G, I), altitude(midpoint(B, G), G, I)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on H, A, midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B)) we get 180 == 2 * direction(H, A) - 2 * direction(midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), D, G we get 180 == 2 * direction(midpoint(B, G), line_intersection(Line(D, G), altitude(midpoint(B, G), D, G))) - 2 * direction(D, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(Line(B, I), altitude(midpoint(B, G), B, I)), B, I we get 180 == 2 * direction(midpoint(B, G), line_intersection(Line(B, I), altitude(midpoint(B, G), B, I))) - 2 * direction(B, I) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), midpoint(B, G), G, projection(A, Line(D, G)) we get 180 == 2 * direction(line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), midpoint(B, G)) - 2 * direction(G, projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on E, G, midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C)) we get 180 == 2 * direction(E, G) - 2 * direction(midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C))) mod 360
By perpendicular_direction_conditions_v0_r on B, projection(A, i), midpoint(B, G), line_intersection(i, altitude(midpoint(B, G), B, D)) we get 180 == 2 * direction(B, projection(A, i)) - 2 * direction(midpoint(B, G), line_intersection(i, altitude(midpoint(B, G), B, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(G, I), altitude(midpoint(B, G), G, I)), midpoint(B, G), I, G we get 180 == 2 * direction(line_intersection(Line(G, I), altitude(midpoint(B, G), G, I)), midpoint(B, G)) - 2 * direction(I, G) mod 360
By perpendicular_direction_conditions_v0_r on H, B, line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G) we get 180 == 2 * direction(H, B) - 2 * direction(line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, altitude(midpoint(B, G), B, D)), midpoint(B, G), B, projection(A, i) we get 180 == 2 * direction(line_intersection(i, altitude(midpoint(B, G), B, D)), midpoint(B, G)) - 2 * direction(B, projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on H, F, midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B)) we get 180 == 2 * direction(H, F) - 2 * direction(midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C)), G, E we get 180 == 2 * direction(midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C))) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on A, G, line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G) we get 180 == 2 * direction(A, G) - 2 * direction(line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B)), H, B we get 180 == 2 * direction(midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B))) - 2 * direction(H, B) mod 360
By perpendicular_direction_conditions_v0_r on G, I, midpoint(B, G), line_intersection(Line(G, I), altitude(midpoint(B, G), G, I)) we get 180 == 2 * direction(G, I) - 2 * direction(midpoint(B, G), line_intersection(Line(G, I), altitude(midpoint(B, G), G, I))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B)), A, F we get 180 == 2 * direction(midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B))) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G), G, A we get 180 == 2 * direction(line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G)) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G), A, H we get 180 == 2 * direction(line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G)) - 2 * direction(A, H) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, I), altitude(midpoint(B, G), B, I)), midpoint(B, G), B, I we get 180 == 2 * direction(line_intersection(Line(B, I), altitude(midpoint(B, G), B, I)), midpoint(B, G)) - 2 * direction(B, I) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), midpoint(B, G), projection(A, Line(D, G)), G we get 180 == 2 * direction(line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), midpoint(B, G)) - 2 * direction(projection(A, Line(D, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on A, E, line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G) we get 180 == 2 * direction(A, E) - 2 * direction(line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on B, D, midpoint(B, G), line_intersection(i, altitude(midpoint(B, G), B, D)) we get 180 == 2 * direction(B, D) - 2 * direction(midpoint(B, G), line_intersection(i, altitude(midpoint(B, G), B, D))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(i, altitude(midpoint(B, G), B, D)), projection(A, i), D we get 180 == 2 * direction(midpoint(B, G), line_intersection(i, altitude(midpoint(B, G), B, D))) - 2 * direction(projection(A, i), D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G), E, A we get 180 == 2 * direction(line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G)) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B)), B, F we get 180 == 2 * direction(midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B))) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), G, midpoint(B, G), line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)) we get 180 == 2 * direction(projection(A, Line(D, G)), G) - 2 * direction(midpoint(B, G), line_intersection(Line(D, G), altitude(midpoint(B, G), D, G))) mod 360
By perpendicular_direction_conditions_v0_r on B, A, midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B)) we get 180 == 2 * direction(B, A) - 2 * direction(midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B))) mod 360
By orthocenter_concurrency on D, orthocenter(A, B, D), projection(A, i) we get orthocenter(D, projection(A, i), orthocenter(A, B, D)) in altitude(D, projection(A, i), orthocenter(A, B, D)), orthocenter(D, projection(A, i), orthocenter(A, B, D)) in altitude(orthocenter(A, B, D), D, projection(A, i)), orthocenter(D, projection(A, i), orthocenter(A, B, D)) in altitude(projection(A, i), D, orthocenter(A, B, D))
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B)), B, H we get 180 == 2 * direction(midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B))) - 2 * direction(B, H) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)), projection(A, Line(D, G)), G we get 180 == 2 * direction(midpoint(B, G), line_intersection(Line(D, G), altitude(midpoint(B, G), D, G))) - 2 * direction(projection(A, Line(D, G)), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C)), C, G we get 180 == 2 * direction(midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C))) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C)), C, E we get 180 == 2 * direction(midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C))) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on G, projection(A, Line(D, G)), midpoint(B, G), line_intersection(Line(D, G), altitude(midpoint(B, G), D, G)) we get 180 == 2 * direction(G, projection(A, Line(D, G))) - 2 * direction(midpoint(B, G), line_intersection(Line(D, G), altitude(midpoint(B, G), D, G))) mod 360
By perpendicular_direction_conditions_v0_r on E, C, line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G) we get 180 == 2 * direction(E, C) - 2 * direction(line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, altitude(midpoint(B, G), B, D)), midpoint(B, G), D, B we get 180 == 2 * direction(line_intersection(i, altitude(midpoint(B, G), B, D)), midpoint(B, G)) - 2 * direction(D, B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G), E, G we get 180 == 2 * direction(line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G)) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on F, H, midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B)) we get 180 == 2 * direction(F, H) - 2 * direction(midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B))) mod 360
By perpendicular_direction_conditions_v0_r on G, A, line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G) we get 180 == 2 * direction(G, A) - 2 * direction(line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, C, midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C)) we get 180 == 2 * direction(A, C) - 2 * direction(midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G), B, F we get 180 == 2 * direction(line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G)) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on H, F, line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G) we get 180 == 2 * direction(H, F) - 2 * direction(line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on E, G, line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G) we get 180 == 2 * direction(E, G) - 2 * direction(line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, B, line_intersection(i, altitude(midpoint(B, G), B, D)), midpoint(B, G) we get 180 == 2 * direction(D, B) - 2 * direction(line_intersection(i, altitude(midpoint(B, G), B, D)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on C, G, line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G) we get 180 == 2 * direction(C, G) - 2 * direction(line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on C, A, line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G) we get 180 == 2 * direction(C, A) - 2 * direction(line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on B, H, line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G) we get 180 == 2 * direction(B, H) - 2 * direction(line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G), A, G we get 180 == 2 * direction(line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G)) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G), F, H we get 180 == 2 * direction(line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G)) - 2 * direction(F, H) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(i, altitude(midpoint(B, G), B, D)), midpoint(B, G), D, projection(A, i) we get 180 == 2 * direction(line_intersection(i, altitude(midpoint(B, G), B, D)), midpoint(B, G)) - 2 * direction(D, projection(A, i)) mod 360
By in_imply_collinear on line_intersection(Line(B, G), altitude(F, B, G)), orthocenter(A, D, G), B we get collinear(B, orthocenter(A, D, G), line_intersection(Line(B, G), altitude(F, B, G)))
By perpendicular_direction_conditions_v0_r on H, A, line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G) we get 180 == 2 * direction(H, A) - 2 * direction(line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(Line(G, I), altitude(midpoint(B, G), G, I)), I, G we get 180 == 2 * direction(midpoint(B, G), line_intersection(Line(G, I), altitude(midpoint(B, G), G, I))) - 2 * direction(I, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(i, altitude(midpoint(B, G), B, D)), D, projection(A, i) we get 180 == 2 * direction(midpoint(B, G), line_intersection(i, altitude(midpoint(B, G), B, D))) - 2 * direction(D, projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), D, line_intersection(i, altitude(midpoint(B, G), B, D)), midpoint(B, G) we get 180 == 2 * direction(projection(A, i), D) - 2 * direction(line_intersection(i, altitude(midpoint(B, G), B, D)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C)), A, G we get 180 == 2 * direction(midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C))) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on E, C, midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C)) we get 180 == 2 * direction(E, C) - 2 * direction(midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C)), E, A we get 180 == 2 * direction(midpoint(B, G), line_intersection(g, altitude(midpoint(B, G), A, C))) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on A, H, line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G) we get 180 == 2 * direction(A, H) - 2 * direction(line_intersection(f, altitude(midpoint(B, G), A, B)), midpoint(B, G)) mod 360
By in_imply_collinear on line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))), midpoint(B, G), E we get collinear(E, midpoint(B, G), line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))))
By in_imply_collinear on orthocenter(A, G, projection(A, Line(D, G))), D, projection(A, Line(D, G)) we get collinear(D, projection(A, Line(D, G)), orthocenter(A, G, projection(A, Line(D, G))))
By line_containment_inequality on orthocenter(A, B, projection(A, i)), C, i we get C != orthocenter(A, B, projection(A, i))
By in_imply_collinear on orthocenter(A, D, projection(A, Line(D, G))), D, G we get collinear(D, G, orthocenter(A, D, projection(A, Line(D, G))))
By in_imply_collinear on orthocenter(A, D, projection(A, Line(D, G))), projection(A, Line(D, G)), D we get collinear(D, projection(A, Line(D, G)), orthocenter(A, D, projection(A, Line(D, G))))
By in_imply_collinear on orthocenter(A, D, projection(A, i)), B, D we get collinear(B, D, orthocenter(A, D, projection(A, i)))
By in_imply_collinear on line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))), projection(A, Line(D, G)), orthocenter(A, D, G) we get collinear(orthocenter(A, D, G), projection(A, Line(D, G)), line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))))
By in_imply_collinear on line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), F, orthocenter(A, B, D) we get collinear(F, orthocenter(A, B, D), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)))
By in_imply_collinear on orthocenter(A, G, projection(A, Line(D, G))), A, orthocenter(A, D, G) we get collinear(A, orthocenter(A, D, G), orthocenter(A, G, projection(A, Line(D, G))))
By in_imply_collinear on line_intersection(Line(B, G), altitude(E, B, G)), G, B we get collinear(B, G, line_intersection(Line(B, G), altitude(E, B, G)))
By in_imply_collinear on line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G))), projection(A, Line(D, G)), A we get collinear(A, projection(A, Line(D, G)), line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G))))
By in_imply_collinear on line_intersection(Line(B, G), altitude(F, B, G)), orthocenter(A, B, D), B we get collinear(B, orthocenter(A, B, D), line_intersection(Line(B, G), altitude(F, B, G)))
By in_imply_collinear on orthocenter(A, G, projection(A, Line(D, G))), projection(A, Line(D, G)), orthocenter(A, D, G) we get collinear(orthocenter(A, D, G), projection(A, Line(D, G)), orthocenter(A, G, projection(A, Line(D, G))))
By in_imply_collinear on line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))), H, orthocenter(A, B, D) we get collinear(H, orthocenter(A, B, D), line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))))
By in_imply_collinear on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), orthocenter(A, D, G), E we get collinear(E, orthocenter(A, D, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)))
By in_imply_collinear on orthocenter(A, G, projection(A, Line(D, G))), D, G we get collinear(D, G, orthocenter(A, G, projection(A, Line(D, G))))
By in_imply_collinear on line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D))), I, orthocenter(A, B, D) we get collinear(I, orthocenter(A, B, D), line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D))))
By line_containment_inequality on line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G))), A, Line(C, orthocenter(A, D, G)) we get A != line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(A, F, midpoint(B, G)), midpoint(B, G), line_intersection(f, altitude(midpoint(B, G), A, B)) we get collinear(midpoint(B, G), orthocenter(A, F, midpoint(B, G)), line_intersection(f, altitude(midpoint(B, G), A, B)))
By in_imply_collinear on line_intersection(Line(B, G), altitude(E, B, G)), B, orthocenter(A, D, G) we get collinear(B, orthocenter(A, D, G), line_intersection(Line(B, G), altitude(E, B, G)))
By in_imply_collinear on line_intersection(Line(B, G), altitude(E, B, G)), G, midpoint(B, G) we get collinear(G, midpoint(B, G), line_intersection(Line(B, G), altitude(E, B, G)))
By in_imply_collinear on orthocenter(A, B, projection(A, i)), B, D we get collinear(B, D, orthocenter(A, B, projection(A, i)))
By in_imply_collinear on line_intersection(Line(B, G), altitude(E, B, G)), orthocenter(A, D, G), G we get collinear(G, orthocenter(A, D, G), line_intersection(Line(B, G), altitude(E, B, G)))
By in_imply_collinear on line_intersection(Line(B, G), altitude(F, B, G)), B, G we get collinear(B, G, line_intersection(Line(B, G), altitude(F, B, G)))
By in_imply_collinear on orthocenter(A, B, projection(A, i)), orthocenter(A, B, D), A we get collinear(A, orthocenter(A, B, D), orthocenter(A, B, projection(A, i)))
By in_imply_collinear on orthocenter(A, B, projection(A, i)), D, projection(A, i) we get collinear(D, projection(A, i), orthocenter(A, B, projection(A, i)))
By in_imply_collinear on orthocenter(A, G, projection(A, Line(D, G))), G, projection(A, Line(D, G)) we get collinear(G, projection(A, Line(D, G)), orthocenter(A, G, projection(A, Line(D, G))))
By in_imply_collinear on orthocenter(A, B, projection(A, i)), projection(A, i), A we get collinear(A, projection(A, i), orthocenter(A, B, projection(A, i)))
By double_perpendicular_and_parallel_v0 on altitude(projection(A, i), A, D), h, altitude(projection(A, Line(D, G)), A, D) we get parallel(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), A, D))
By in_imply_collinear on line_intersection(Line(B, G), altitude(E, B, G)), midpoint(B, G), orthocenter(A, B, D) we get collinear(midpoint(B, G), orthocenter(A, B, D), line_intersection(Line(B, G), altitude(E, B, G)))
By line_containment_inequality on line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), projection(A, Line(D, G)), Line(D, F) we get projection(A, Line(D, G)) != line_intersection(Line(D, F), altitude(midpoint(B, G), D, F))
By in_imply_collinear on orthocenter(A, D, projection(A, Line(D, G))), projection(A, Line(D, G)), A we get collinear(A, projection(A, Line(D, G)), orthocenter(A, D, projection(A, Line(D, G))))
By in_imply_collinear on line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i))), A, orthocenter(A, B, D) we get collinear(A, orthocenter(A, B, D), line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i))))
By in_imply_collinear on line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i))), A, projection(A, i) we get collinear(A, projection(A, i), line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i))))
By in_imply_collinear on line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i))), projection(A, i), orthocenter(A, B, D) we get collinear(projection(A, i), orthocenter(A, B, D), line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i))))
By in_imply_collinear on line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))), orthocenter(A, D, G), I we get collinear(I, orthocenter(A, D, G), line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))))
By in_imply_collinear on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), E, D we get collinear(D, E, line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)))
By in_imply_collinear on line_intersection(Line(B, G), altitude(E, B, G)), orthocenter(A, B, D), G we get collinear(G, orthocenter(A, B, D), line_intersection(Line(B, G), altitude(E, B, G)))
By line_inequality on altitude(A, F, midpoint(B, G)), Line(H, orthocenter(A, B, D)), A we get Line(H, orthocenter(A, B, D)) != altitude(A, F, midpoint(B, G))
By in_imply_collinear on line_intersection(Line(B, G), altitude(E, B, G)), B, midpoint(B, G) we get collinear(B, midpoint(B, G), line_intersection(Line(B, G), altitude(E, B, G)))
By in_imply_collinear on orthocenter(A, E, midpoint(B, G)), line_intersection(g, altitude(midpoint(B, G), A, C)), midpoint(B, G) we get collinear(midpoint(B, G), orthocenter(A, E, midpoint(B, G)), line_intersection(g, altitude(midpoint(B, G), A, C)))
By line_inequality on altitude(projection(A, i), A, B), Line(D, G), projection(A, i) we get Line(D, G) != altitude(projection(A, i), A, B)
By in_imply_collinear on orthocenter(A, G, projection(A, Line(D, G))), A, projection(A, Line(D, G)) we get collinear(A, projection(A, Line(D, G)), orthocenter(A, G, projection(A, Line(D, G))))
By in_imply_collinear on line_intersection(Line(B, G), altitude(E, B, G)), orthocenter(A, D, G), midpoint(B, G) we get collinear(midpoint(B, G), orthocenter(A, D, G), line_intersection(Line(B, G), altitude(E, B, G)))
By in_imply_collinear on line_intersection(Line(B, G), altitude(F, B, G)), orthocenter(A, D, G), orthocenter(A, B, D) we get collinear(orthocenter(A, B, D), orthocenter(A, D, G), line_intersection(Line(B, G), altitude(F, B, G)))
By in_imply_collinear on line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))), A, orthocenter(A, D, G) we get collinear(A, orthocenter(A, D, G), line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))))
By line_inequality on altitude(E, C, orthocenter(A, D, G)), Line(I, orthocenter(A, D, G)), E we get Line(I, orthocenter(A, D, G)) != altitude(E, C, orthocenter(A, D, G))
By line_inequality on altitude(projection(A, i), A, D), h, projection(A, i) we get h != altitude(projection(A, i), A, D)
By in_imply_collinear on orthocenter(A, D, projection(A, i)), D, projection(A, i) we get collinear(D, projection(A, i), orthocenter(A, D, projection(A, i)))
By in_imply_collinear on line_intersection(Line(B, G), altitude(E, B, G)), orthocenter(A, B, D), orthocenter(A, D, G) we get collinear(orthocenter(A, B, D), orthocenter(A, D, G), line_intersection(Line(B, G), altitude(E, B, G)))
By in_imply_collinear on line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i))), projection(A, i), orthocenter(A, B, D) we get collinear(projection(A, i), orthocenter(A, B, D), line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i))))
By in_imply_collinear on line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), orthocenter(A, B, D), D we get collinear(D, orthocenter(A, B, D), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)))
By in_imply_collinear on line_intersection(Line(B, G), altitude(F, B, G)), G, orthocenter(A, B, D) we get collinear(G, orthocenter(A, B, D), line_intersection(Line(B, G), altitude(F, B, G)))
By in_imply_collinear on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), orthocenter(A, D, G), D we get collinear(D, orthocenter(A, D, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)))
By in_imply_collinear on orthocenter(A, B, projection(A, i)), B, projection(A, i) we get collinear(B, projection(A, i), orthocenter(A, B, projection(A, i)))
By in_imply_collinear on line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), midpoint(B, G), F we get collinear(F, midpoint(B, G), line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))))
By in_imply_collinear on line_intersection(Line(B, G), altitude(F, B, G)), midpoint(B, G), B we get collinear(B, midpoint(B, G), line_intersection(Line(B, G), altitude(F, B, G)))
By in_imply_collinear on line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))), projection(A, Line(D, G)), A we get collinear(A, projection(A, Line(D, G)), line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))))
By in_imply_collinear on line_intersection(Line(B, G), altitude(F, B, G)), orthocenter(A, B, D), midpoint(B, G) we get collinear(midpoint(B, G), orthocenter(A, B, D), line_intersection(Line(B, G), altitude(F, B, G)))
By in_imply_collinear on line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i))), A, orthocenter(A, B, D) we get collinear(A, orthocenter(A, B, D), line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i))))
By in_imply_collinear on line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G))), orthocenter(A, D, G), A we get collinear(A, orthocenter(A, D, G), line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G))))
By in_imply_collinear on line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G))), projection(A, Line(D, G)), orthocenter(A, D, G) we get collinear(orthocenter(A, D, G), projection(A, Line(D, G)), line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G))))
By in_imply_collinear on line_intersection(Line(B, G), altitude(F, B, G)), orthocenter(A, D, G), G we get collinear(G, orthocenter(A, D, G), line_intersection(Line(B, G), altitude(F, B, G)))
By in_imply_collinear on orthocenter(A, D, projection(A, i)), projection(A, i), orthocenter(A, B, D) we get collinear(projection(A, i), orthocenter(A, B, D), orthocenter(A, D, projection(A, i)))
By line_inequality on altitude(projection(A, Line(D, G)), A, D), h, projection(A, Line(D, G)) we get h != altitude(projection(A, Line(D, G)), A, D)
By line_inequality on altitude(A, E, midpoint(B, G)), Line(H, orthocenter(A, B, D)), A we get Line(H, orthocenter(A, B, D)) != altitude(A, E, midpoint(B, G))
By in_imply_collinear on orthocenter(A, D, projection(A, i)), B, projection(A, i) we get collinear(B, projection(A, i), orthocenter(A, D, projection(A, i)))
By line_containment_inequality on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), projection(A, i), Line(D, E) we get projection(A, i) != line_intersection(Line(D, E), altitude(midpoint(B, G), D, E))
By in_imply_collinear on orthocenter(A, B, projection(A, i)), orthocenter(A, B, D), projection(A, i) we get collinear(projection(A, i), orthocenter(A, B, D), orthocenter(A, B, projection(A, i)))
By in_imply_collinear on orthocenter(A, D, projection(A, Line(D, G))), projection(A, Line(D, G)), orthocenter(A, D, G) we get collinear(orthocenter(A, D, G), projection(A, Line(D, G)), orthocenter(A, D, projection(A, Line(D, G))))
By in_imply_collinear on line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G))), C, orthocenter(A, D, G) we get collinear(C, orthocenter(A, D, G), line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G))))
By in_imply_collinear on line_intersection(Line(B, G), altitude(F, B, G)), midpoint(B, G), G we get collinear(G, midpoint(B, G), line_intersection(Line(B, G), altitude(F, B, G)))
By sas_similarity on F, A, E, H, A, C we get similar_triangles(A, C, H, A, E, F)
By line_containment_inequality on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), C, Line(D, E) we get C != line_intersection(Line(D, E), altitude(midpoint(B, G), D, E))
By line_inequality on Line(I, orthocenter(A, B, D)), median(E, B, G), orthocenter(A, B, D) we get median(E, B, G) != Line(I, orthocenter(A, B, D))
By line_containment_inequality on line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))), G, altitude(A, D, G) we get G != line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)))
By line_inequality on Line(G, projection(E, h)), Line(H, orthocenter(A, B, D)), G we get Line(G, projection(E, h)) != Line(H, orthocenter(A, B, D))
By double_perpendicular_and_parallel_v0 on Line(D, E), g, altitude(projection(A, Line(D, G)), A, G) we get parallel(Line(D, E), altitude(projection(A, Line(D, G)), A, G))
By line_inequality on altitude(A, F, midpoint(B, G)), median(E, B, G), A we get median(E, B, G) != altitude(A, F, midpoint(B, G))
By line_containment_inequality on line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))), projection(A, i), Line(H, orthocenter(A, B, D)) we get projection(A, i) != line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D)))
By line_inequality on altitude(projection(A, i), A, D), Line(I, orthocenter(A, B, D)), projection(A, i) we get Line(I, orthocenter(A, B, D)) != altitude(projection(A, i), A, D)
By double_perpendicular_and_parallel_v0 on altitude(E, A, D), h, altitude(projection(A, Line(D, G)), A, D) we get parallel(altitude(E, A, D), altitude(projection(A, Line(D, G)), A, D))
By double_perpendicular_and_parallel_v0 on Line(D, F), f, altitude(projection(A, i), A, B) we get parallel(Line(D, F), altitude(projection(A, i), A, B))
By sas_anti_similarity on E, A, F, H, A, C we get anti_similar_triangles(A, C, H, A, F, E)
By line_containment_inequality on line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i))), D, altitude(A, B, D) we get D != line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i)))
By line_containment_inequality on orthocenter(A, G, projection(A, Line(D, G))), I, altitude(A, D, G) we get I != orthocenter(A, G, projection(A, Line(D, G)))
By line_containment_inequality on orthocenter(A, D, projection(A, Line(D, G))), F, Line(D, G) we get F != orthocenter(A, D, projection(A, Line(D, G)))
By line_inequality on altitude(F, B, D), Line(H, orthocenter(A, B, D)), F we get altitude(F, B, D) != Line(H, orthocenter(A, B, D))
By isosceles_triangle_from_angles on D, E, F we get isosceles_triangle(D, E, F)
By double_perpendicular_and_parallel_v0 on altitude(E, A, D), h, altitude(projection(A, i), A, D) we get parallel(altitude(E, A, D), altitude(projection(A, i), A, D))
By line_inequality on altitude(midpoint(B, G), D, E), Line(H, orthocenter(A, B, D)), midpoint(B, G) we get Line(H, orthocenter(A, B, D)) != altitude(midpoint(B, G), D, E)
By line_inequality on altitude(projection(A, i), A, D), g, projection(A, i) we get g != altitude(projection(A, i), A, D)
By sas_anti_similarity on C, A, F, H, A, E we get anti_similar_triangles(A, C, F, A, H, E)
By line_containment_inequality on line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G))), D, Line(C, orthocenter(A, D, G)) we get D != line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G)))
By line_containment_inequality on line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), I, median(F, B, G) we get I != line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G)))
By line_inequality on altitude(midpoint(B, G), A, projection(A, i)), Line(C, orthocenter(A, D, G)), midpoint(B, G) we get Line(C, orthocenter(A, D, G)) != altitude(midpoint(B, G), A, projection(A, i))
By line_containment_inequality on orthocenter(A, G, projection(A, Line(D, G))), orthocenter(A, B, D), altitude(A, D, G) we get orthocenter(A, B, D) != orthocenter(A, G, projection(A, Line(D, G)))
By double_perpendicular_and_parallel_v0 on altitude(projection(A, Line(D, G)), A, G), g, altitude(midpoint(B, G), A, C) we get parallel(altitude(midpoint(B, G), A, C), altitude(projection(A, Line(D, G)), A, G))
By line_inequality on altitude(midpoint(B, G), B, D), Line(I, orthocenter(A, D, G)), midpoint(B, G) we get Line(I, orthocenter(A, D, G)) != altitude(midpoint(B, G), B, D)
By line_inequality on altitude(E, A, orthocenter(A, D, G)), Line(C, orthocenter(A, D, G)), E we get Line(C, orthocenter(A, D, G)) != altitude(E, A, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, D, projection(A, Line(D, G))), C, altitude(A, D, G) we get C != orthocenter(A, D, projection(A, Line(D, G)))
By isosceles_triangle_from_angles on D, F, E we get isosceles_triangle(D, E, F)
By double_perpendicular_and_parallel_v0 on altitude(F, A, D), h, altitude(projection(A, Line(D, G)), A, D) we get parallel(altitude(F, A, D), altitude(projection(A, Line(D, G)), A, D))
By line_containment_inequality on orthocenter(A, B, projection(A, i)), midpoint(B, G), altitude(A, B, D) we get midpoint(B, G) != orthocenter(A, B, projection(A, i))
By line_inequality on altitude(projection(A, i), A, D), Line(H, orthocenter(A, B, D)), projection(A, i) we get Line(H, orthocenter(A, B, D)) != altitude(projection(A, i), A, D)
By double_perpendicular_and_parallel_v0_r on h, altitude(projection(A, Line(D, G)), A, D), altitude(E, B, G) we get perpendicular(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D))
By double_perpendicular_and_parallel_v0 on Line(B, G), h, altitude(projection(A, i), A, D) we get parallel(Line(B, G), altitude(projection(A, i), A, D))
By sas_anti_similarity on F, A, C, E, A, H we get anti_similar_triangles(A, C, F, A, H, E)
By double_perpendicular_and_parallel_v0_r on f, altitude(projection(A, i), A, B), altitude(midpoint(B, G), D, F) we get perpendicular(altitude(midpoint(B, G), D, F), altitude(projection(A, i), A, B))
By line_inequality on altitude(A, E, midpoint(B, G)), Line(C, orthocenter(A, D, G)), A we get Line(C, orthocenter(A, D, G)) != altitude(A, E, midpoint(B, G))
By line_containment_inequality on line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G))), C, altitude(A, D, G) we get C != line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G)))
By line_containment_inequality on orthocenter(A, D, projection(A, Line(D, G))), projection(A, i), Line(D, G) we get projection(A, i) != orthocenter(A, D, projection(A, Line(D, G)))
By double_perpendicular_and_parallel_v0_r on g, altitude(projection(A, Line(D, G)), A, G), altitude(midpoint(B, G), D, E) we get perpendicular(altitude(midpoint(B, G), D, E), altitude(projection(A, Line(D, G)), A, G))
By line_containment_inequality on orthocenter(A, G, projection(A, Line(D, G))), H, Line(D, G) we get H != orthocenter(A, G, projection(A, Line(D, G)))
By sas_similarity on E, A, F, C, A, H we get similar_triangles(A, C, H, A, E, F)
By line_inequality on altitude(projection(A, i), A, D), Line(D, F), projection(A, i) we get Line(D, F) != altitude(projection(A, i), A, D)
By line_containment_inequality on orthocenter(A, G, projection(A, Line(D, G))), A, Line(D, G) we get A != orthocenter(A, G, projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i))), C, altitude(A, B, D) we get C != line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i)))
By double_perpendicular_and_parallel_v0_r on h, altitude(projection(A, i), A, D), altitude(F, B, G) we get perpendicular(altitude(F, B, G), altitude(projection(A, i), A, D))
By line_containment_inequality on orthocenter(A, D, projection(A, Line(D, G))), A, Line(D, G) we get A != orthocenter(A, D, projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G), Line(D, F) we get midpoint(B, G) != line_intersection(Line(D, F), altitude(midpoint(B, G), D, F))
By line_inequality on Line(I, orthocenter(A, D, G)), Line(H, orthocenter(A, B, D)), orthocenter(A, D, G) we get Line(H, orthocenter(A, B, D)) != Line(I, orthocenter(A, D, G))
By line_containment_inequality on line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), I, Line(D, F) we get I != line_intersection(Line(D, F), altitude(midpoint(B, G), D, F))
By sas_anti_similarity on H, A, C, E, A, F we get anti_similar_triangles(A, C, H, A, F, E)
By line_inequality on altitude(midpoint(B, G), A, orthocenter(A, D, G)), Line(C, orthocenter(A, D, G)), midpoint(B, G) we get Line(C, orthocenter(A, D, G)) != altitude(midpoint(B, G), A, orthocenter(A, D, G))
By line_inequality on altitude(midpoint(B, G), A, B), Line(I, orthocenter(A, D, G)), midpoint(B, G) we get Line(I, orthocenter(A, D, G)) != altitude(midpoint(B, G), A, B)
By asa_anti_congruence on E, F, D, F, E, D we get anti_congruent_triangles(D, E, F, D, F, E)
By sas_similarity on C, A, H, E, A, F we get similar_triangles(A, C, H, A, E, F)
By asa_anti_congruence on F, E, D, E, F, D we get anti_congruent_triangles(D, E, F, D, F, E)
By line_containment_inequality on line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), A, median(F, B, G) we get A != line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G)))
By line_inequality on altitude(midpoint(B, G), I, orthocenter(A, B, D)), Line(I, orthocenter(A, B, D)), midpoint(B, G) we get Line(I, orthocenter(A, B, D)) != altitude(midpoint(B, G), I, orthocenter(A, B, D))
By line_inequality on altitude(projection(A, Line(D, G)), A, D), Line(C, D), projection(A, Line(D, G)) we get Line(C, D) != altitude(projection(A, Line(D, G)), A, D)
By line_inequality on altitude(projection(A, Line(D, G)), A, D), Line(D, E), projection(A, Line(D, G)) we get Line(D, E) != altitude(projection(A, Line(D, G)), A, D)
By line_containment_inequality on line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i))), B, altitude(A, B, D) we get B != line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i)))
By line_containment_inequality on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), A, Line(D, E) we get A != line_intersection(Line(D, E), altitude(midpoint(B, G), D, E))
By line_inequality on altitude(E, D, G), Line(I, orthocenter(A, D, G)), E we get altitude(E, D, G) != Line(I, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, D, projection(A, i)), G, altitude(A, B, D) we get G != orthocenter(A, D, projection(A, i))
By line_inequality on altitude(projection(A, i), A, D), f, projection(A, i) we get f != altitude(projection(A, i), A, D)
By line_containment_inequality on line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))), orthocenter(A, D, G), Line(H, orthocenter(A, B, D)) we get orthocenter(A, D, G) != line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D)))
By line_containment_inequality on line_intersection(Line(B, G), altitude(F, B, G)), D, Line(B, G) we get D != line_intersection(Line(B, G), altitude(F, B, G))
By sas_anti_similarity on C, A, H, F, A, E we get anti_similar_triangles(A, C, H, A, F, E)
By line_containment_inequality on orthocenter(A, D, projection(A, Line(D, G))), D, altitude(A, D, G) we get D != orthocenter(A, D, projection(A, Line(D, G)))
By line_containment_inequality on orthocenter(A, B, projection(A, i)), orthocenter(A, B, D), i we get orthocenter(A, B, D) != orthocenter(A, B, projection(A, i))
By double_perpendicular_and_parallel_v0 on Line(B, G), h, altitude(projection(A, Line(D, G)), A, D) we get parallel(Line(B, G), altitude(projection(A, Line(D, G)), A, D))
By line_inequality on altitude(projection(A, Line(D, G)), A, G), g, projection(A, Line(D, G)) we get g != altitude(projection(A, Line(D, G)), A, G)
By line_containment_inequality on line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), orthocenter(A, D, G), Line(D, F) we get orthocenter(A, D, G) != line_intersection(Line(D, F), altitude(midpoint(B, G), D, F))
By line_containment_inequality on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), projection(A, Line(D, G)), Line(D, E) we get projection(A, Line(D, G)) != line_intersection(Line(D, E), altitude(midpoint(B, G), D, E))
By line_containment_inequality on orthocenter(A, G, projection(A, Line(D, G))), F, altitude(A, D, G) we get F != orthocenter(A, G, projection(A, Line(D, G)))
By line_containment_inequality on orthocenter(A, B, projection(A, i)), G, i we get G != orthocenter(A, B, projection(A, i))
By line_inequality on Line(E, center(c)), Line(C, orthocenter(A, D, G)), E we get Line(E, center(c)) != Line(C, orthocenter(A, D, G))
By line_containment_inequality on line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i))), H, altitude(A, B, D) we get H != line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i)))
By double_perpendicular_and_parallel_v0 on altitude(projection(A, i), A, B), f, altitude(midpoint(B, G), A, B) we get parallel(altitude(midpoint(B, G), A, B), altitude(projection(A, i), A, B))
By line_containment_inequality on orthocenter(A, G, projection(A, Line(D, G))), B, Line(D, G) we get B != orthocenter(A, G, projection(A, Line(D, G)))
By line_inequality on Line(B, projection(F, h)), Line(C, orthocenter(A, D, G)), B we get Line(B, projection(F, h)) != Line(C, orthocenter(A, D, G))
By line_inequality on Line(I, orthocenter(A, D, G)), median(E, B, G), I we get median(E, B, G) != Line(I, orthocenter(A, D, G))
By double_perpendicular_and_parallel_v0_r on h, altitude(projection(A, i), A, D), altitude(E, B, G) we get perpendicular(altitude(E, B, G), altitude(projection(A, i), A, D))
By anti_congruence_from_anti_similar_triangles on F, E, D, E, F, D we get anti_congruent_triangles(D, E, F, D, F, E)
By anti_congruence_from_anti_similar_triangles on E, F, D, F, E, D we get anti_congruent_triangles(D, E, F, D, F, E)
By line_containment_inequality on line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i))), F, altitude(A, B, D) we get F != line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i)))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, i), orthocenter(A, D, G), projection(A, Line(D, G)) we get not_collinear(projection(A, i), orthocenter(A, D, G), projection(A, Line(D, G))), exists(Line(orthocenter(A, D, G), projection(A, Line(D, G))))
By line_containment_inequality on orthocenter(A, D, projection(A, i)), H, i we get H != orthocenter(A, D, projection(A, i))
By double_perpendicular_and_parallel_v0_r on h, altitude(projection(A, Line(D, G)), A, D), altitude(F, B, G) we get perpendicular(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D))
By line_containment_inequality on line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G))), projection(A, Line(D, G)), Line(C, orthocenter(A, D, G)) we get projection(A, Line(D, G)) != line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G)))
By line_containment_inequality on orthocenter(A, B, projection(A, i)), F, i we get F != orthocenter(A, B, projection(A, i))
By line_inequality on altitude(F, B, G), Line(H, orthocenter(A, B, D)), F we get altitude(F, B, G) != Line(H, orthocenter(A, B, D))
By line_containment_inequality on line_intersection(Line(B, G), altitude(F, B, G)), A, Line(B, G) we get A != line_intersection(Line(B, G), altitude(F, B, G))
By line_containment_inequality on line_intersection(Line(B, G), altitude(E, B, G)), F, Line(B, G) we get F != line_intersection(Line(B, G), altitude(E, B, G))
By line_containment_inequality on line_intersection(Line(B, G), altitude(F, B, G)), projection(A, i), Line(B, G) we get projection(A, i) != line_intersection(Line(B, G), altitude(F, B, G))
By line_inequality on Line(H, orthocenter(A, B, D)), Line(C, orthocenter(A, D, G)), orthocenter(A, B, D) we get Line(C, orthocenter(A, D, G)) != Line(H, orthocenter(A, B, D))
By double_perpendicular_and_parallel_v0 on altitude(F, A, D), h, altitude(projection(A, i), A, D) we get parallel(altitude(F, A, D), altitude(projection(A, i), A, D))
By line_containment_inequality on orthocenter(A, D, projection(A, Line(D, G))), B, Line(D, G) we get B != orthocenter(A, D, projection(A, Line(D, G)))
By line_inequality on altitude(midpoint(B, G), A, orthocenter(A, D, G)), Line(I, orthocenter(A, B, D)), midpoint(B, G) we get Line(I, orthocenter(A, B, D)) != altitude(midpoint(B, G), A, orthocenter(A, D, G))
By line_containment_inequality on orthocenter(A, D, projection(A, i)), F, altitude(A, B, D) we get F != orthocenter(A, D, projection(A, i))
By line_containment_inequality on orthocenter(A, B, projection(A, i)), A, i we get A != orthocenter(A, B, projection(A, i))
By sas_anti_similarity on H, A, E, C, A, F we get anti_similar_triangles(A, C, F, A, H, E)
By line_inequality on altitude(projection(A, i), A, B), Line(D, H), projection(A, i) we get Line(D, H) != altitude(projection(A, i), A, B)
By line_containment_inequality on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G), Line(D, E) we get midpoint(B, G) != line_intersection(Line(D, E), altitude(midpoint(B, G), D, E))
By line_inequality on altitude(F, D, H), Line(I, orthocenter(A, B, D)), F we get altitude(F, D, H) != Line(I, orthocenter(A, B, D))
By line_inequality on altitude(A, E, midpoint(B, G)), Line(I, orthocenter(A, D, G)), A we get Line(I, orthocenter(A, D, G)) != altitude(A, E, midpoint(B, G))
By line_inequality on altitude(projection(A, Line(D, G)), A, D), Line(G, I), projection(A, Line(D, G)) we get Line(G, I) != altitude(projection(A, Line(D, G)), A, D)
By sas_anti_similarity on E, A, H, F, A, C we get anti_similar_triangles(A, C, F, A, H, E)
By line_inequality on median(E, B, G), Line(C, orthocenter(A, D, G)), midpoint(B, G) we get median(E, B, G) != Line(C, orthocenter(A, D, G))
By line_inequality on Line(G, projection(E, h)), Line(C, orthocenter(A, D, G)), G we get Line(G, projection(E, h)) != Line(C, orthocenter(A, D, G))
By line_inequality on altitude(midpoint(B, G), G, I), Line(C, orthocenter(A, D, G)), midpoint(B, G) we get Line(C, orthocenter(A, D, G)) != altitude(midpoint(B, G), G, I)
By line_inequality on altitude(projection(A, Line(D, G)), A, G), f, projection(A, Line(D, G)) we get f != altitude(projection(A, Line(D, G)), A, G)
By line_inequality on Line(I, orthocenter(A, B, D)), Line(I, orthocenter(A, D, G)), orthocenter(A, B, D) we get Line(I, orthocenter(A, B, D)) != Line(I, orthocenter(A, D, G))
By line_inequality on altitude(projection(A, i), A, D), Line(B, I), projection(A, i) we get Line(B, I) != altitude(projection(A, i), A, D)
By line_inequality on altitude(projection(A, i), A, B), g, projection(A, i) we get g != altitude(projection(A, i), A, B)
By line_inequality on altitude(midpoint(B, G), A, B), Line(H, orthocenter(A, B, D)), midpoint(B, G) we get Line(H, orthocenter(A, B, D)) != altitude(midpoint(B, G), A, B)
By line_containment_inequality on line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G))), E, Line(C, orthocenter(A, D, G)) we get E != line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G)))
By line_containment_inequality on line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))), midpoint(B, G), Line(I, orthocenter(A, D, G)) we get midpoint(B, G) != line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G)))
By line_containment_inequality on line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G))), H, altitude(A, D, G) we get H != line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G)))
By line_inequality on median(F, B, G), Line(C, orthocenter(A, D, G)), midpoint(B, G) we get median(F, B, G) != Line(C, orthocenter(A, D, G))
By line_inequality on altitude(E, C, D), Line(I, orthocenter(A, D, G)), E we get altitude(E, C, D) != Line(I, orthocenter(A, D, G))
By line_containment_inequality on line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i))), G, altitude(A, B, D) we get G != line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i)))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, i), A, projection(A, Line(D, G)) we get not_collinear(A, projection(A, i), projection(A, Line(D, G))), exists(Line(A, projection(A, Line(D, G))))
By line_inequality on Line(C, orthocenter(A, D, G)), Line(I, orthocenter(A, B, D)), orthocenter(A, D, G) we get Line(C, orthocenter(A, D, G)) != Line(I, orthocenter(A, B, D))
By line_inequality on altitude(projection(A, i), A, B), Line(D, F), projection(A, i) we get Line(D, F) != altitude(projection(A, i), A, B)
By line_inequality on Line(B, projection(E, h)), Line(C, orthocenter(A, D, G)), B we get Line(B, projection(E, h)) != Line(C, orthocenter(A, D, G))
By line_inequality on Line(I, orthocenter(A, B, D)), median(F, B, G), I we get median(F, B, G) != Line(I, orthocenter(A, B, D))
By line_containment_inequality on line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))), G, Line(H, orthocenter(A, B, D)) we get G != line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D)))
By not_in_line_equivalent_to_not_collinear_v0 on projection(A, Line(D, G)), orthocenter(A, B, D), projection(A, i) we get not_collinear(projection(A, i), orthocenter(A, B, D), projection(A, Line(D, G))), exists(Line(projection(A, i), orthocenter(A, B, D)))
By line_containment_inequality on line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))), H, altitude(A, D, G) we get H != line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)))
By line_inequality on altitude(midpoint(B, G), D, G), Line(H, orthocenter(A, B, D)), midpoint(B, G) we get Line(H, orthocenter(A, B, D)) != altitude(midpoint(B, G), D, G)
By line_inequality on Line(B, projection(E, h)), Line(H, orthocenter(A, B, D)), B we get Line(B, projection(E, h)) != Line(H, orthocenter(A, B, D))
By line_containment_inequality on line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), H, Line(D, F) we get H != line_intersection(Line(D, F), altitude(midpoint(B, G), D, F))
By line_inequality on altitude(F, A, projection(A, i)), Line(I, orthocenter(A, B, D)), F we get Line(I, orthocenter(A, B, D)) != altitude(F, A, projection(A, i))
By line_containment_inequality on line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))), D, median(E, B, G) we get D != line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G)))
By line_containment_inequality on line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))), F, Line(H, orthocenter(A, B, D)) we get F != line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D)))
By line_containment_inequality on orthocenter(A, D, projection(A, i)), I, i we get I != orthocenter(A, D, projection(A, i))
By line_containment_inequality on orthocenter(A, D, projection(A, i)), midpoint(B, G), altitude(A, B, D) we get midpoint(B, G) != orthocenter(A, D, projection(A, i))
By line_inequality on altitude(projection(A, Line(D, G)), A, G), h, projection(A, Line(D, G)) we get h != altitude(projection(A, Line(D, G)), A, G)
By line_inequality on altitude(midpoint(B, G), A, projection(A, i)), Line(I, orthocenter(A, D, G)), midpoint(B, G) we get Line(I, orthocenter(A, D, G)) != altitude(midpoint(B, G), A, projection(A, i))
By line_containment_inequality on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), G, Line(D, E) we get G != line_intersection(Line(D, E), altitude(midpoint(B, G), D, E))
By line_inequality on altitude(midpoint(B, G), A, B), Line(C, orthocenter(A, D, G)), midpoint(B, G) we get Line(C, orthocenter(A, D, G)) != altitude(midpoint(B, G), A, B)
By line_containment_inequality on line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), B, Line(D, F) we get B != line_intersection(Line(D, F), altitude(midpoint(B, G), D, F))
By line_inequality on Line(B, projection(F, h)), Line(I, orthocenter(A, B, D)), B we get Line(B, projection(F, h)) != Line(I, orthocenter(A, B, D))
By line_containment_inequality on line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D))), B, Line(I, orthocenter(A, B, D)) we get B != line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D)))
By line_containment_inequality on orthocenter(A, G, projection(A, Line(D, G))), E, altitude(A, D, G) we get E != orthocenter(A, G, projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), orthocenter(A, B, D), Line(D, E) we get orthocenter(A, B, D) != line_intersection(Line(D, E), altitude(midpoint(B, G), D, E))
By line_containment_inequality on line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))), F, altitude(A, D, G) we get F != line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)))
By line_inequality on altitude(midpoint(B, G), D, F), Line(I, orthocenter(A, B, D)), midpoint(B, G) we get Line(I, orthocenter(A, B, D)) != altitude(midpoint(B, G), D, F)
By line_containment_inequality on line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i))), I, altitude(A, B, D) we get I != line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i)))
By line_containment_inequality on line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))), orthocenter(A, B, D), Line(I, orthocenter(A, D, G)) we get orthocenter(A, B, D) != line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G)))
By line_containment_inequality on orthocenter(A, D, projection(A, Line(D, G))), E, Line(D, G) we get E != orthocenter(A, D, projection(A, Line(D, G)))
By line_inequality on altitude(projection(A, Line(D, G)), A, D), Line(I, orthocenter(A, D, G)), projection(A, Line(D, G)) we get Line(I, orthocenter(A, D, G)) != altitude(projection(A, Line(D, G)), A, D)
By line_inequality on altitude(midpoint(B, G), D, E), Line(I, orthocenter(A, D, G)), midpoint(B, G) we get Line(I, orthocenter(A, D, G)) != altitude(midpoint(B, G), D, E)
By line_inequality on altitude(F, H, orthocenter(A, B, D)), Line(H, orthocenter(A, B, D)), F we get Line(H, orthocenter(A, B, D)) != altitude(F, H, orthocenter(A, B, D))
By line_inequality on altitude(midpoint(B, G), A, orthocenter(A, D, G)), Line(H, orthocenter(A, B, D)), midpoint(B, G) we get Line(H, orthocenter(A, B, D)) != altitude(midpoint(B, G), A, orthocenter(A, D, G))
By line_inequality on altitude(A, E, midpoint(B, G)), Line(I, orthocenter(A, B, D)), A we get Line(I, orthocenter(A, B, D)) != altitude(A, E, midpoint(B, G))
By line_containment_inequality on line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))), G, median(E, B, G) we get G != line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G)))
By line_inequality on altitude(midpoint(B, G), B, I), Line(I, orthocenter(A, D, G)), midpoint(B, G) we get Line(I, orthocenter(A, D, G)) != altitude(midpoint(B, G), B, I)
By line_containment_inequality on line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), G, median(F, B, G) we get G != line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G)))
By line_inequality on altitude(midpoint(B, G), I, orthocenter(A, D, G)), Line(C, orthocenter(A, D, G)), midpoint(B, G) we get Line(C, orthocenter(A, D, G)) != altitude(midpoint(B, G), I, orthocenter(A, D, G))
By line_inequality on altitude(projection(A, Line(D, G)), A, G), Line(D, F), projection(A, Line(D, G)) we get Line(D, F) != altitude(projection(A, Line(D, G)), A, G)
By line_inequality on altitude(midpoint(B, G), D, E), Line(C, orthocenter(A, D, G)), midpoint(B, G) we get Line(C, orthocenter(A, D, G)) != altitude(midpoint(B, G), D, E)
By line_containment_inequality on line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i))), G, altitude(A, B, D) we get G != line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i)))
By line_containment_inequality on line_intersection(Line(B, G), altitude(F, B, G)), E, Line(B, G) we get E != line_intersection(Line(B, G), altitude(F, B, G))
By line_containment_inequality on orthocenter(A, B, projection(A, i)), E, altitude(A, B, D) we get E != orthocenter(A, B, projection(A, i))
By line_inequality on altitude(E, C, D), Line(C, orthocenter(A, D, G)), E we get altitude(E, C, D) != Line(C, orthocenter(A, D, G))
By line_inequality on Line(G, projection(E, h)), median(F, B, G), G we get median(F, B, G) != Line(G, projection(E, h))
By line_inequality on altitude(midpoint(B, G), D, F), Line(H, orthocenter(A, B, D)), midpoint(B, G) we get Line(H, orthocenter(A, B, D)) != altitude(midpoint(B, G), D, F)
By line_containment_inequality on orthocenter(A, D, projection(A, Line(D, G))), orthocenter(A, B, D), Line(D, G) we get orthocenter(A, B, D) != orthocenter(A, D, projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G))), I, altitude(A, D, G) we get I != line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G)))
By line_containment_inequality on orthocenter(A, G, projection(A, Line(D, G))), orthocenter(A, D, G), Line(D, G) we get orthocenter(A, D, G) != orthocenter(A, G, projection(A, Line(D, G)))
By line_containment_inequality on orthocenter(A, B, projection(A, i)), D, altitude(A, B, D) we get D != orthocenter(A, B, projection(A, i))
By line_containment_inequality on line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))), B, Line(I, orthocenter(A, D, G)) we get B != line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G)))
By line_containment_inequality on line_intersection(Line(B, G), altitude(F, B, G)), C, Line(B, G) we get C != line_intersection(Line(B, G), altitude(F, B, G))
By line_inequality on altitude(A, E, midpoint(B, G)), median(E, B, G), A we get median(E, B, G) != altitude(A, E, midpoint(B, G))
By line_inequality on Line(I, orthocenter(A, D, G)), median(F, B, G), orthocenter(A, D, G) we get median(F, B, G) != Line(I, orthocenter(A, D, G))
By line_inequality on altitude(midpoint(B, G), D, E), Line(I, orthocenter(A, B, D)), midpoint(B, G) we get Line(I, orthocenter(A, B, D)) != altitude(midpoint(B, G), D, E)
By line_containment_inequality on orthocenter(A, D, projection(A, i)), D, altitude(A, B, D) we get D != orthocenter(A, D, projection(A, i))
By line_inequality on altitude(E, D, G), Line(C, orthocenter(A, D, G)), E we get altitude(E, D, G) != Line(C, orthocenter(A, D, G))
By line_inequality on altitude(midpoint(B, G), A, orthocenter(A, D, G)), Line(I, orthocenter(A, D, G)), midpoint(B, G) we get Line(I, orthocenter(A, D, G)) != altitude(midpoint(B, G), A, orthocenter(A, D, G))
By line_containment_inequality on line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D))), midpoint(B, G), Line(I, orthocenter(A, B, D)) we get midpoint(B, G) != line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D)))
By line_containment_inequality on line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i))), orthocenter(A, D, G), altitude(A, B, D) we get orthocenter(A, D, G) != line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i)))
By line_containment_inequality on orthocenter(A, B, projection(A, i)), I, i we get I != orthocenter(A, B, projection(A, i))
By line_inequality on altitude(projection(A, Line(D, G)), A, G), altitude(A, B, D), projection(A, Line(D, G)) we get altitude(A, B, D) != altitude(projection(A, Line(D, G)), A, G)
By line_containment_inequality on orthocenter(A, G, projection(A, Line(D, G))), C, Line(D, G) we get C != orthocenter(A, G, projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))), B, Line(H, orthocenter(A, B, D)) we get B != line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D)))
By line_inequality on altitude(midpoint(B, G), D, F), Line(C, orthocenter(A, D, G)), midpoint(B, G) we get Line(C, orthocenter(A, D, G)) != altitude(midpoint(B, G), D, F)
By line_inequality on altitude(projection(A, Line(D, G)), A, D), Line(D, F), projection(A, Line(D, G)) we get Line(D, F) != altitude(projection(A, Line(D, G)), A, D)
By line_inequality on Line(B, projection(F, h)), Line(I, orthocenter(A, D, G)), B we get Line(B, projection(F, h)) != Line(I, orthocenter(A, D, G))
By line_containment_inequality on line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))), A, Line(I, orthocenter(A, D, G)) we get A != line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G)))
By line_containment_inequality on line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i))), orthocenter(A, D, G), altitude(A, B, D) we get orthocenter(A, D, G) != line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i)))
By line_inequality on altitude(midpoint(B, G), A, C), Line(I, orthocenter(A, D, G)), midpoint(B, G) we get Line(I, orthocenter(A, D, G)) != altitude(midpoint(B, G), A, C)
By line_inequality on Line(B, projection(E, h)), median(E, B, G), B we get median(E, B, G) != Line(B, projection(E, h))
By line_inequality on altitude(midpoint(B, G), G, I), Line(I, orthocenter(A, B, D)), midpoint(B, G) we get Line(I, orthocenter(A, B, D)) != altitude(midpoint(B, G), G, I)
By line_containment_inequality on line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D))), D, Line(I, orthocenter(A, B, D)) we get D != line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D)))
By line_containment_inequality on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), B, Line(D, E) we get B != line_intersection(Line(D, E), altitude(midpoint(B, G), D, E))
By line_inequality on altitude(F, H, orthocenter(A, B, D)), Line(I, orthocenter(A, B, D)), F we get Line(I, orthocenter(A, B, D)) != altitude(F, H, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(A, D, projection(A, Line(D, G))), orthocenter(A, D, G), Line(D, G) we get orthocenter(A, D, G) != orthocenter(A, D, projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))), E, altitude(A, D, G) we get E != line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)))
By line_inequality on Line(H, center(c)), median(F, B, G), H we get median(F, B, G) != Line(H, center(c))
By line_inequality on Line(G, projection(F, h)), Line(I, orthocenter(A, D, G)), G we get Line(G, projection(F, h)) != Line(I, orthocenter(A, D, G))
By line_inequality on altitude(projection(A, Line(D, G)), A, G), Line(D, E), projection(A, Line(D, G)) we get Line(D, E) != altitude(projection(A, Line(D, G)), A, G)
By line_inequality on Line(G, projection(F, h)), Line(H, orthocenter(A, B, D)), G we get Line(G, projection(F, h)) != Line(H, orthocenter(A, B, D))
By line_inequality on altitude(projection(A, Line(D, G)), A, D), g, projection(A, Line(D, G)) we get g != altitude(projection(A, Line(D, G)), A, D)
By line_containment_inequality on line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), projection(A, i), Line(D, F) we get projection(A, i) != line_intersection(Line(D, F), altitude(midpoint(B, G), D, F))
By line_inequality on altitude(projection(A, Line(D, G)), A, D), altitude(A, B, D), projection(A, Line(D, G)) we get altitude(A, B, D) != altitude(projection(A, Line(D, G)), A, D)
By line_containment_inequality on orthocenter(A, B, projection(A, i)), projection(A, Line(D, G)), altitude(A, B, D) we get projection(A, Line(D, G)) != orthocenter(A, B, projection(A, i))
By line_inequality on altitude(midpoint(B, G), B, I), Line(C, orthocenter(A, D, G)), midpoint(B, G) we get Line(C, orthocenter(A, D, G)) != altitude(midpoint(B, G), B, I)
By line_containment_inequality on line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G))), D, altitude(A, D, G) we get D != line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G)))
By line_inequality on Line(B, projection(E, h)), Line(I, orthocenter(A, D, G)), B we get Line(B, projection(E, h)) != Line(I, orthocenter(A, D, G))
By line_inequality on altitude(projection(A, Line(D, G)), A, D), f, projection(A, Line(D, G)) we get f != altitude(projection(A, Line(D, G)), A, D)
By line_inequality on altitude(projection(A, Line(D, G)), A, D), Line(B, G), projection(A, Line(D, G)) we get Line(B, G) != altitude(projection(A, Line(D, G)), A, D)
By line_inequality on Line(H, orthocenter(A, B, D)), median(E, B, G), orthocenter(A, B, D) we get median(E, B, G) != Line(H, orthocenter(A, B, D))
By line_inequality on radical_axis(c, d), median(E, B, G), C we get median(E, B, G) != radical_axis(c, d)
By line_inequality on Line(F, center(c)), Line(I, orthocenter(A, B, D)), F we get Line(F, center(c)) != Line(I, orthocenter(A, B, D))
By line_inequality on altitude(projection(A, i), A, B), Line(B, G), projection(A, i) we get Line(B, G) != altitude(projection(A, i), A, B)
By line_inequality on Line(F, center(c)), Line(H, orthocenter(A, B, D)), F we get Line(F, center(c)) != Line(H, orthocenter(A, B, D))
By line_containment_inequality on line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D))), projection(A, i), Line(I, orthocenter(A, B, D)) we get projection(A, i) != line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D)))
By line_inequality on altitude(F, B, D), Line(I, orthocenter(A, B, D)), F we get altitude(F, B, D) != Line(I, orthocenter(A, B, D))
By line_inequality on Line(B, projection(F, h)), median(F, B, G), B we get median(F, B, G) != Line(B, projection(F, h))
By line_containment_inequality on line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))), D, Line(H, orthocenter(A, B, D)) we get D != line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D)))
By line_containment_inequality on line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))), C, median(E, B, G) we get C != line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G)))
By line_inequality on altitude(midpoint(B, G), I, orthocenter(A, B, D)), Line(I, orthocenter(A, D, G)), midpoint(B, G) we get Line(I, orthocenter(A, D, G)) != altitude(midpoint(B, G), I, orthocenter(A, B, D))
By line_containment_inequality on line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))), projection(A, Line(D, G)), Line(I, orthocenter(A, D, G)) we get projection(A, Line(D, G)) != line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G)))
By line_containment_inequality on line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))), G, Line(I, orthocenter(A, D, G)) we get G != line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G)))
By line_inequality on altitude(projection(A, i), A, B), altitude(A, D, G), projection(A, i) we get altitude(A, D, G) != altitude(projection(A, i), A, B)
By line_containment_inequality on line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D))), G, Line(I, orthocenter(A, B, D)) we get G != line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D)))
By line_containment_inequality on line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i))), projection(A, Line(D, G)), altitude(A, B, D) we get projection(A, Line(D, G)) != line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i)))
By line_containment_inequality on orthocenter(A, G, projection(A, Line(D, G))), projection(A, i), altitude(A, D, G) we get projection(A, i) != orthocenter(A, G, projection(A, Line(D, G)))
By line_inequality on Line(G, projection(E, h)), Line(I, orthocenter(A, B, D)), G we get Line(G, projection(E, h)) != Line(I, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(A, D, projection(A, i)), orthocenter(A, D, G), i we get orthocenter(A, D, G) != orthocenter(A, D, projection(A, i))
By line_inequality on altitude(midpoint(B, G), B, I), Line(I, orthocenter(A, B, D)), midpoint(B, G) we get Line(I, orthocenter(A, B, D)) != altitude(midpoint(B, G), B, I)
By line_containment_inequality on line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G))), midpoint(B, G), Line(C, orthocenter(A, D, G)) we get midpoint(B, G) != line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G)))
By line_inequality on altitude(midpoint(B, G), D, G), Line(C, orthocenter(A, D, G)), midpoint(B, G) we get Line(C, orthocenter(A, D, G)) != altitude(midpoint(B, G), D, G)
By line_inequality on altitude(midpoint(B, G), I, orthocenter(A, D, G)), Line(I, orthocenter(A, B, D)), midpoint(B, G) we get Line(I, orthocenter(A, B, D)) != altitude(midpoint(B, G), I, orthocenter(A, D, G))
By line_inequality on Line(G, projection(F, h)), Line(I, orthocenter(A, B, D)), G we get Line(G, projection(F, h)) != Line(I, orthocenter(A, B, D))
By line_inequality on altitude(projection(A, Line(D, G)), A, G), Line(D, H), projection(A, Line(D, G)) we get Line(D, H) != altitude(projection(A, Line(D, G)), A, G)
By line_containment_inequality on orthocenter(A, B, projection(A, i)), orthocenter(A, D, G), i we get orthocenter(A, D, G) != orthocenter(A, B, projection(A, i))
By line_containment_inequality on line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))), A, Line(H, orthocenter(A, B, D)) we get A != line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D)))
By line_inequality on Line(B, projection(F, h)), Line(H, orthocenter(A, B, D)), B we get Line(B, projection(F, h)) != Line(H, orthocenter(A, B, D))
By line_containment_inequality on line_intersection(Line(B, G), altitude(E, B, G)), C, Line(B, G) we get C != line_intersection(Line(B, G), altitude(E, B, G))
By line_inequality on altitude(midpoint(B, G), A, projection(A, i)), Line(H, orthocenter(A, B, D)), midpoint(B, G) we get Line(H, orthocenter(A, B, D)) != altitude(midpoint(B, G), A, projection(A, i))
By line_containment_inequality on line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), A, Line(D, F) we get A != line_intersection(Line(D, F), altitude(midpoint(B, G), D, F))
By line_inequality on Line(B, projection(E, h)), Line(I, orthocenter(A, B, D)), B we get Line(B, projection(E, h)) != Line(I, orthocenter(A, B, D))
By line_containment_inequality on line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))), B, median(E, B, G) we get B != line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G)))
By line_containment_inequality on orthocenter(A, D, projection(A, Line(D, G))), I, altitude(A, D, G) we get I != orthocenter(A, D, projection(A, Line(D, G)))
By line_containment_inequality on orthocenter(A, D, projection(A, i)), E, i we get E != orthocenter(A, D, projection(A, i))
By line_containment_inequality on line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))), A, median(E, B, G) we get A != line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G)))
By line_containment_inequality on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), H, Line(D, E) we get H != line_intersection(Line(D, E), altitude(midpoint(B, G), D, E))
By line_containment_inequality on line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G))), G, altitude(A, D, G) we get G != line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G)))
By line_containment_inequality on line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))), D, Line(I, orthocenter(A, D, G)) we get D != line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G)))
By line_inequality on altitude(projection(A, i), A, D), Line(B, G), projection(A, i) we get Line(B, G) != altitude(projection(A, i), A, D)
By line_inequality on altitude(A, F, midpoint(B, G)), Line(C, orthocenter(A, D, G)), A we get Line(C, orthocenter(A, D, G)) != altitude(A, F, midpoint(B, G))
By line_inequality on altitude(midpoint(B, G), D, G), Line(I, orthocenter(A, D, G)), midpoint(B, G) we get Line(I, orthocenter(A, D, G)) != altitude(midpoint(B, G), D, G)
By line_containment_inequality on line_intersection(Line(B, G), altitude(E, B, G)), H, Line(B, G) we get H != line_intersection(Line(B, G), altitude(E, B, G))
By line_containment_inequality on orthocenter(A, D, projection(A, Line(D, G))), H, Line(D, G) we get H != orthocenter(A, D, projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i))), B, altitude(A, B, D) we get B != line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i)))
By line_inequality on altitude(A, F, midpoint(B, G)), Line(I, orthocenter(A, B, D)), A we get Line(I, orthocenter(A, B, D)) != altitude(A, F, midpoint(B, G))
By line_inequality on altitude(projection(A, i), A, B), f, projection(A, i) we get f != altitude(projection(A, i), A, B)
By line_inequality on altitude(midpoint(B, G), D, G), Line(I, orthocenter(A, B, D)), midpoint(B, G) we get Line(I, orthocenter(A, B, D)) != altitude(midpoint(B, G), D, G)
By line_containment_inequality on line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i))), E, altitude(A, B, D) we get E != line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i)))
By line_containment_inequality on line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))), midpoint(B, G), altitude(A, D, G) we get midpoint(B, G) != line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)))
By line_inequality on altitude(midpoint(B, G), I, orthocenter(A, D, G)), Line(H, orthocenter(A, B, D)), midpoint(B, G) we get Line(H, orthocenter(A, B, D)) != altitude(midpoint(B, G), I, orthocenter(A, D, G))
By line_inequality on altitude(midpoint(B, G), A, C), Line(I, orthocenter(A, B, D)), midpoint(B, G) we get Line(I, orthocenter(A, B, D)) != altitude(midpoint(B, G), A, C)
By line_inequality on altitude(projection(A, Line(D, G)), A, D), i, projection(A, Line(D, G)) we get i != altitude(projection(A, Line(D, G)), A, D)
By line_inequality on altitude(projection(A, Line(D, G)), A, D), Line(D, H), projection(A, Line(D, G)) we get Line(D, H) != altitude(projection(A, Line(D, G)), A, D)
By line_inequality on Line(G, projection(F, h)), median(E, B, G), G we get median(E, B, G) != Line(G, projection(F, h))
By line_containment_inequality on orthocenter(A, G, projection(A, Line(D, G))), midpoint(B, G), Line(D, G) we get midpoint(B, G) != orthocenter(A, G, projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(Line(B, G), altitude(E, B, G)), E, Line(B, G) we get E != line_intersection(Line(B, G), altitude(E, B, G))
By line_inequality on Line(G, projection(F, h)), Line(C, orthocenter(A, D, G)), G we get Line(G, projection(F, h)) != Line(C, orthocenter(A, D, G))
By line_inequality on altitude(projection(A, i), A, D), Line(B, C), projection(A, i) we get Line(B, C) != altitude(projection(A, i), A, D)
By line_inequality on altitude(F, A, D), Line(H, orthocenter(A, B, D)), F we get altitude(F, A, D) != Line(H, orthocenter(A, B, D))
By line_inequality on altitude(midpoint(B, G), A, projection(A, i)), Line(I, orthocenter(A, B, D)), midpoint(B, G) we get Line(I, orthocenter(A, B, D)) != altitude(midpoint(B, G), A, projection(A, i))
By line_containment_inequality on line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))), I, median(E, B, G) we get I != line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G)))
By line_containment_inequality on line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D))), A, Line(I, orthocenter(A, B, D)) we get A != line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D)))
By line_inequality on altitude(projection(A, Line(D, G)), A, D), Line(C, orthocenter(A, D, G)), projection(A, Line(D, G)) we get Line(C, orthocenter(A, D, G)) != altitude(projection(A, Line(D, G)), A, D)
By line_inequality on Line(B, projection(E, h)), median(F, B, G), B we get median(F, B, G) != Line(B, projection(E, h))
By line_inequality on altitude(projection(A, i), A, B), Line(I, orthocenter(A, B, D)), projection(A, i) we get Line(I, orthocenter(A, B, D)) != altitude(projection(A, i), A, B)
By line_containment_inequality on line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G))), projection(A, i), altitude(A, D, G) we get projection(A, i) != line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G)))
By line_inequality on altitude(F, B, G), Line(I, orthocenter(A, B, D)), F we get altitude(F, B, G) != Line(I, orthocenter(A, B, D))
By line_containment_inequality on orthocenter(A, D, projection(A, i)), A, i we get A != orthocenter(A, D, projection(A, i))
By line_containment_inequality on line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i))), midpoint(B, G), altitude(A, B, D) we get midpoint(B, G) != line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i)))
By line_containment_inequality on line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i))), C, altitude(A, B, D) we get C != line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i)))
By line_inequality on altitude(midpoint(B, G), I, orthocenter(A, B, D)), Line(C, orthocenter(A, D, G)), midpoint(B, G) we get Line(C, orthocenter(A, D, G)) != altitude(midpoint(B, G), I, orthocenter(A, B, D))
By line_inequality on altitude(F, A, D), Line(I, orthocenter(A, B, D)), F we get altitude(F, A, D) != Line(I, orthocenter(A, B, D))
By line_containment_inequality on line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), orthocenter(A, B, D), median(F, B, G) we get orthocenter(A, B, D) != line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G)))
By line_inequality on altitude(midpoint(B, G), B, D), Line(C, orthocenter(A, D, G)), midpoint(B, G) we get Line(C, orthocenter(A, D, G)) != altitude(midpoint(B, G), B, D)
By line_inequality on altitude(E, B, G), Line(C, orthocenter(A, D, G)), E we get altitude(E, B, G) != Line(C, orthocenter(A, D, G))
By line_inequality on altitude(projection(A, Line(D, G)), A, G), Line(C, orthocenter(A, D, G)), projection(A, Line(D, G)) we get Line(C, orthocenter(A, D, G)) != altitude(projection(A, Line(D, G)), A, G)
By line_inequality on Line(H, orthocenter(A, B, D)), median(F, B, G), H we get median(F, B, G) != Line(H, orthocenter(A, B, D))
By line_inequality on altitude(E, C, orthocenter(A, D, G)), Line(C, orthocenter(A, D, G)), E we get Line(C, orthocenter(A, D, G)) != altitude(E, C, orthocenter(A, D, G))
By line_containment_inequality on line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G))), E, altitude(A, D, G) we get E != line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G)))
By line_containment_inequality on line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i))), projection(A, Line(D, G)), altitude(A, B, D) we get projection(A, Line(D, G)) != line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i)))
By line_inequality on altitude(projection(A, i), A, B), Line(B, I), projection(A, i) we get Line(B, I) != altitude(projection(A, i), A, B)
By line_inequality on altitude(midpoint(B, G), B, I), Line(H, orthocenter(A, B, D)), midpoint(B, G) we get Line(H, orthocenter(A, B, D)) != altitude(midpoint(B, G), B, I)
By line_containment_inequality on line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))), C, altitude(A, D, G) we get C != line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)))
By line_containment_inequality on orthocenter(A, B, projection(A, i)), B, altitude(A, B, D) we get B != orthocenter(A, B, projection(A, i))
By line_containment_inequality on line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), H, median(F, B, G) we get H != line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G)))
By line_inequality on altitude(projection(A, Line(D, G)), A, G), i, projection(A, Line(D, G)) we get i != altitude(projection(A, Line(D, G)), A, G)
By line_containment_inequality on line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D))), F, Line(I, orthocenter(A, B, D)) we get F != line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D)))
By line_containment_inequality on orthocenter(A, D, projection(A, Line(D, G))), midpoint(B, G), Line(D, G) we get midpoint(B, G) != orthocenter(A, D, projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))), orthocenter(A, B, D), altitude(A, D, G) we get orthocenter(A, B, D) != line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)))
By line_containment_inequality on line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G))), midpoint(B, G), altitude(A, D, G) we get midpoint(B, G) != line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G)))
By line_inequality on altitude(projection(A, i), A, B), Line(C, D), projection(A, i) we get Line(C, D) != altitude(projection(A, i), A, B)
By line_inequality on altitude(F, A, projection(A, i)), Line(H, orthocenter(A, B, D)), F we get Line(H, orthocenter(A, B, D)) != altitude(F, A, projection(A, i))
By line_inequality on altitude(E, B, G), Line(I, orthocenter(A, D, G)), E we get altitude(E, B, G) != Line(I, orthocenter(A, D, G))
By line_containment_inequality on line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), C, Line(D, F) we get C != line_intersection(Line(D, F), altitude(midpoint(B, G), D, F))
By line_containment_inequality on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), F, Line(D, E) we get F != line_intersection(Line(D, E), altitude(midpoint(B, G), D, E))
By line_containment_inequality on line_intersection(Line(B, G), altitude(F, B, G)), F, Line(B, G) we get F != line_intersection(Line(B, G), altitude(F, B, G))
By line_containment_inequality on line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i))), D, altitude(A, B, D) we get D != line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i)))
By line_containment_inequality on line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i))), E, altitude(A, B, D) we get E != line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i)))
By line_inequality on altitude(projection(A, i), A, B), Line(H, orthocenter(A, B, D)), projection(A, i) we get Line(H, orthocenter(A, B, D)) != altitude(projection(A, i), A, B)
By line_inequality on altitude(E, A, D), Line(I, orthocenter(A, D, G)), E we get altitude(E, A, D) != Line(I, orthocenter(A, D, G))
By line_inequality on altitude(midpoint(B, G), B, D), Line(I, orthocenter(A, B, D)), midpoint(B, G) we get Line(I, orthocenter(A, B, D)) != altitude(midpoint(B, G), B, D)
By line_inequality on altitude(midpoint(B, G), I, orthocenter(A, D, G)), Line(I, orthocenter(A, D, G)), midpoint(B, G) we get Line(I, orthocenter(A, D, G)) != altitude(midpoint(B, G), I, orthocenter(A, D, G))
By line_inequality on altitude(projection(A, i), A, D), Line(D, G), projection(A, i) we get Line(D, G) != altitude(projection(A, i), A, D)
By line_containment_inequality on line_intersection(Line(B, G), altitude(F, B, G)), H, Line(B, G) we get H != line_intersection(Line(B, G), altitude(F, B, G))
By line_inequality on altitude(midpoint(B, G), B, D), Line(H, orthocenter(A, B, D)), midpoint(B, G) we get Line(H, orthocenter(A, B, D)) != altitude(midpoint(B, G), B, D)
By line_containment_inequality on orthocenter(A, D, projection(A, i)), C, altitude(A, B, D) we get C != orthocenter(A, D, projection(A, i))
By line_containment_inequality on line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G))), B, altitude(A, D, G) we get B != line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G)))
By line_containment_inequality on line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i))), F, altitude(A, B, D) we get F != line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i)))
By line_inequality on Line(E, center(c)), Line(I, orthocenter(A, D, G)), E we get Line(E, center(c)) != Line(I, orthocenter(A, D, G))
By line_containment_inequality on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), I, Line(D, E) we get I != line_intersection(Line(D, E), altitude(midpoint(B, G), D, E))
By line_inequality on altitude(A, F, midpoint(B, G)), median(F, B, G), A we get median(F, B, G) != altitude(A, F, midpoint(B, G))
By line_containment_inequality on line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), orthocenter(A, D, G), median(F, B, G) we get orthocenter(A, D, G) != line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G)))
By line_containment_inequality on line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G))), orthocenter(A, B, D), altitude(A, D, G) we get orthocenter(A, B, D) != line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G)))
By line_containment_inequality on orthocenter(A, D, projection(A, i)), B, altitude(A, B, D) we get B != orthocenter(A, D, projection(A, i))
By line_inequality on altitude(A, F, midpoint(B, G)), Line(I, orthocenter(A, D, G)), A we get Line(I, orthocenter(A, D, G)) != altitude(A, F, midpoint(B, G))
By line_inequality on Line(C, center(c)), median(E, B, G), C we get median(E, B, G) != Line(C, center(c))
By line_containment_inequality on orthocenter(A, D, projection(A, i)), projection(A, Line(D, G)), altitude(A, B, D) we get projection(A, Line(D, G)) != orthocenter(A, D, projection(A, i))
By line_inequality on altitude(midpoint(B, G), A, B), Line(I, orthocenter(A, B, D)), midpoint(B, G) we get Line(I, orthocenter(A, B, D)) != altitude(midpoint(B, G), A, B)
By line_containment_inequality on line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))), B, altitude(A, D, G) we get B != line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)))
By line_inequality on altitude(A, E, midpoint(B, G)), median(F, B, G), A we get median(F, B, G) != altitude(A, E, midpoint(B, G))
By line_containment_inequality on line_intersection(Line(B, G), altitude(E, B, G)), D, Line(B, G) we get D != line_intersection(Line(B, G), altitude(E, B, G))
By line_inequality on altitude(projection(A, i), A, D), Line(D, E), projection(A, i) we get Line(D, E) != altitude(projection(A, i), A, D)
By line_containment_inequality on orthocenter(A, B, projection(A, i)), H, i we get H != orthocenter(A, B, projection(A, i))
By line_containment_inequality on line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), D, median(F, B, G) we get D != line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G)))
By line_containment_inequality on line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), E, Line(D, F) we get E != line_intersection(Line(D, F), altitude(midpoint(B, G), D, F))
By line_containment_inequality on orthocenter(A, D, projection(A, i)), orthocenter(A, B, D), i we get orthocenter(A, B, D) != orthocenter(A, D, projection(A, i))
By line_containment_inequality on line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), B, median(F, B, G) we get B != line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G)))
By line_inequality on altitude(midpoint(B, G), I, orthocenter(A, B, D)), Line(H, orthocenter(A, B, D)), midpoint(B, G) we get Line(H, orthocenter(A, B, D)) != altitude(midpoint(B, G), I, orthocenter(A, B, D))
By line_inequality on Line(B, projection(F, h)), median(E, B, G), B we get median(E, B, G) != Line(B, projection(F, h))
By line_containment_inequality on line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i))), H, altitude(A, B, D) we get H != line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i)))
By line_inequality on altitude(midpoint(B, G), G, I), Line(I, orthocenter(A, D, G)), midpoint(B, G) we get Line(I, orthocenter(A, D, G)) != altitude(midpoint(B, G), G, I)
By line_containment_inequality on line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), G, Line(D, F) we get G != line_intersection(Line(D, F), altitude(midpoint(B, G), D, F))
By line_containment_inequality on line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G))), B, Line(C, orthocenter(A, D, G)) we get B != line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G)))
By line_containment_inequality on line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))), orthocenter(A, D, G), median(E, B, G) we get orthocenter(A, D, G) != line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G)))
By line_containment_inequality on line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))), orthocenter(A, B, D), median(E, B, G) we get orthocenter(A, B, D) != line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G)))
By line_containment_inequality on line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G))), orthocenter(A, B, D), Line(C, orthocenter(A, D, G)) we get orthocenter(A, B, D) != line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G)))
By line_inequality on Line(G, projection(F, h)), median(F, B, G), G we get median(F, B, G) != Line(G, projection(F, h))
By line_containment_inequality on line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))), I, altitude(A, D, G) we get I != line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)))
By line_inequality on altitude(projection(A, Line(D, G)), A, G), Line(I, orthocenter(A, D, G)), projection(A, Line(D, G)) we get Line(I, orthocenter(A, D, G)) != altitude(projection(A, Line(D, G)), A, G)
By line_containment_inequality on line_intersection(Line(B, G), altitude(E, B, G)), projection(A, i), Line(B, G) we get projection(A, i) != line_intersection(Line(B, G), altitude(E, B, G))
By line_inequality on altitude(projection(A, Line(D, G)), A, G), Line(B, G), projection(A, Line(D, G)) we get Line(B, G) != altitude(projection(A, Line(D, G)), A, G)
By line_containment_inequality on line_intersection(Line(B, G), altitude(E, B, G)), A, Line(B, G) we get A != line_intersection(Line(B, G), altitude(E, B, G))
By line_containment_inequality on line_intersection(Line(B, G), altitude(F, B, G)), projection(A, Line(D, G)), Line(B, G) we get projection(A, Line(D, G)) != line_intersection(Line(B, G), altitude(F, B, G))
By line_inequality on altitude(projection(A, Line(D, G)), A, G), Line(C, D), projection(A, Line(D, G)) we get Line(C, D) != altitude(projection(A, Line(D, G)), A, G)
By line_inequality on altitude(F, D, H), Line(H, orthocenter(A, B, D)), F we get altitude(F, D, H) != Line(H, orthocenter(A, B, D))
By line_inequality on Line(G, projection(E, h)), median(E, B, G), G we get median(E, B, G) != Line(G, projection(E, h))
By line_containment_inequality on line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G))), G, Line(C, orthocenter(A, D, G)) we get G != line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G)))
By line_inequality on altitude(midpoint(B, G), A, C), Line(H, orthocenter(A, B, D)), midpoint(B, G) we get Line(H, orthocenter(A, B, D)) != altitude(midpoint(B, G), A, C)
By line_inequality on altitude(midpoint(B, G), G, I), Line(H, orthocenter(A, B, D)), midpoint(B, G) we get Line(H, orthocenter(A, B, D)) != altitude(midpoint(B, G), G, I)
By line_containment_inequality on line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G))), F, altitude(A, D, G) we get F != line_intersection(altitude(A, D, G), altitude(E, A, orthocenter(A, D, G)))
By line_containment_inequality on line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i))), I, altitude(A, B, D) we get I != line_intersection(altitude(A, B, D), altitude(midpoint(B, G), A, projection(A, i)))
By line_containment_inequality on line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))), projection(A, i), altitude(A, D, G) we get projection(A, i) != line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)))
By line_containment_inequality on orthocenter(A, D, projection(A, Line(D, G))), G, altitude(A, D, G) we get G != orthocenter(A, D, projection(A, Line(D, G)))
By line_inequality on altitude(midpoint(B, G), A, C), Line(C, orthocenter(A, D, G)), midpoint(B, G) we get Line(C, orthocenter(A, D, G)) != altitude(midpoint(B, G), A, C)
By line_containment_inequality on line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D))), orthocenter(A, D, G), Line(I, orthocenter(A, B, D)) we get orthocenter(A, D, G) != line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D)))
By line_containment_inequality on line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i))), midpoint(B, G), altitude(A, B, D) we get midpoint(B, G) != line_intersection(altitude(A, B, D), altitude(F, A, projection(A, i)))
By line_inequality on altitude(midpoint(B, G), D, F), Line(I, orthocenter(A, D, G)), midpoint(B, G) we get Line(I, orthocenter(A, D, G)) != altitude(midpoint(B, G), D, F)
By line_containment_inequality on line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))), D, altitude(A, D, G) we get D != line_intersection(altitude(A, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)))
By line_inequality on altitude(projection(A, i), A, D), altitude(A, D, G), projection(A, i) we get altitude(A, D, G) != altitude(projection(A, i), A, D)
By line_inequality on altitude(E, A, D), Line(C, orthocenter(A, D, G)), E we get altitude(E, A, D) != Line(C, orthocenter(A, D, G))
By line_inequality on altitude(E, A, orthocenter(A, D, G)), Line(I, orthocenter(A, D, G)), E we get Line(I, orthocenter(A, D, G)) != altitude(E, A, orthocenter(A, D, G))
By line_inequality on altitude(projection(A, i), A, B), Line(D, E), projection(A, i) we get Line(D, E) != altitude(projection(A, i), A, B)
By line_containment_inequality on orthocenter(A, G, projection(A, Line(D, G))), D, altitude(A, D, G) we get D != orthocenter(A, G, projection(A, Line(D, G)))
By line_inequality on altitude(projection(A, i), A, D), Line(D, H), projection(A, i) we get Line(D, H) != altitude(projection(A, i), A, D)
By line_inequality on altitude(projection(A, i), A, D), Line(C, D), projection(A, i) we get Line(C, D) != altitude(projection(A, i), A, D)
By line_inequality on altitude(projection(A, i), A, B), Line(B, C), projection(A, i) we get Line(B, C) != altitude(projection(A, i), A, B)
By line_inequality on Line(G, projection(E, h)), Line(I, orthocenter(A, D, G)), G we get Line(G, projection(E, h)) != Line(I, orthocenter(A, D, G))
By line_inequality on altitude(projection(A, i), A, B), h, projection(A, i) we get h != altitude(projection(A, i), A, B)
By line_containment_inequality on line_intersection(Line(B, G), altitude(F, B, G)), I, Line(B, G) we get I != line_intersection(Line(B, G), altitude(F, B, G))
By line_containment_inequality on line_intersection(Line(B, G), altitude(E, B, G)), I, Line(B, G) we get I != line_intersection(Line(B, G), altitude(E, B, G))
By line_inequality on altitude(projection(A, Line(D, G)), A, G), Line(G, I), projection(A, Line(D, G)) we get Line(G, I) != altitude(projection(A, Line(D, G)), A, G)
By line_containment_inequality on line_intersection(Line(B, G), altitude(E, B, G)), projection(A, Line(D, G)), Line(B, G) we get projection(A, Line(D, G)) != line_intersection(Line(B, G), altitude(E, B, G))
By line_containment_inequality on line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))), E, Line(I, orthocenter(A, D, G)) we get E != line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G)))
By line_containment_inequality on orthocenter(A, G, projection(A, Line(D, G))), G, altitude(A, D, G) we get G != orthocenter(A, G, projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))), midpoint(B, G), Line(H, orthocenter(A, B, D)) we get midpoint(B, G) != line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D)))
By perpendicular_lines_draw_intersection on h, altitude(projection(A, i), A, D) we get exists(line_intersection(h, altitude(projection(A, i), A, D)))
By perpendicular_lines_draw_intersection on altitude(projection(A, i), A, B), f we get exists(line_intersection(f, altitude(projection(A, i), A, B)))
By perpendicular_lines_draw_intersection on altitude(E, A, orthocenter(A, D, G)), altitude(midpoint(B, G), D, G) we get exists(line_intersection(altitude(midpoint(B, G), D, G), altitude(E, A, orthocenter(A, D, G))))
By perpendicular_lines_draw_intersection on altitude(E, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)) we get exists(line_intersection(altitude(E, D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))))
By perpendicular_lines_draw_intersection on altitude(E, A, orthocenter(A, D, G)), altitude(E, D, G) we get exists(line_intersection(altitude(E, D, G), altitude(E, A, orthocenter(A, D, G))))
By perpendicular_lines_draw_intersection on altitude(midpoint(B, G), D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G)) we get exists(line_intersection(altitude(midpoint(B, G), D, G), altitude(midpoint(B, G), A, orthocenter(A, D, G))))
By perpendicular_lines_draw_intersection on altitude(midpoint(B, G), D, E), altitude(midpoint(B, G), A, C) we get exists(line_intersection(altitude(midpoint(B, G), A, C), altitude(midpoint(B, G), D, E)))
By perpendicular_lines_draw_intersection on altitude(midpoint(B, G), D, F), altitude(midpoint(B, G), A, B) we get exists(line_intersection(altitude(midpoint(B, G), A, B), altitude(midpoint(B, G), D, F)))
By perpendicular_lines_draw_intersection on g, altitude(projection(A, Line(D, G)), A, G) we get exists(line_intersection(g, altitude(projection(A, Line(D, G)), A, G)))
By perpendicular_lines_draw_intersection on altitude(E, B, G), altitude(F, A, D) we get exists(line_intersection(altitude(E, B, G), altitude(F, A, D)))
By perpendicular_lines_draw_intersection on altitude(F, B, D), altitude(midpoint(B, G), A, projection(A, i)) we get exists(line_intersection(altitude(F, B, D), altitude(midpoint(B, G), A, projection(A, i))))
By perpendicular_lines_draw_intersection on altitude(E, A, D), altitude(F, B, G) we get exists(line_intersection(altitude(E, A, D), altitude(F, B, G)))
By perpendicular_lines_draw_intersection on altitude(F, B, D), altitude(F, A, projection(A, i)) we get exists(line_intersection(altitude(F, B, D), altitude(F, A, projection(A, i))))
By perpendicular_lines_draw_intersection on altitude(E, B, G), altitude(E, A, D) we get exists(line_intersection(altitude(E, A, D), altitude(E, B, G)))
By perpendicular_lines_draw_intersection on altitude(midpoint(B, G), A, projection(A, i)), altitude(midpoint(B, G), B, D) we get exists(line_intersection(altitude(midpoint(B, G), B, D), altitude(midpoint(B, G), A, projection(A, i))))
By perpendicular_lines_draw_intersection on altitude(projection(A, Line(D, G)), A, D), h we get exists(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By perpendicular_lines_draw_intersection on altitude(F, A, projection(A, i)), altitude(midpoint(B, G), B, D) we get exists(line_intersection(altitude(midpoint(B, G), B, D), altitude(F, A, projection(A, i))))
By perpendicular_lines_draw_intersection on altitude(F, B, G), altitude(F, A, D) we get exists(line_intersection(altitude(F, A, D), altitude(F, B, G)))
By altitude_definition on projection(A, i), D, midpoint(B, G), altitude(projection(A, i), A, D) we get altitude(projection(A, i), A, D) == altitude(projection(A, i), D, midpoint(B, G))
By altitude_definition on projection(A, i), D, I, altitude(projection(A, i), A, D) we get altitude(projection(A, i), A, D) == altitude(projection(A, i), D, I)
By altitude_definition on projection(A, i), midpoint(B, G), I, altitude(projection(A, i), A, D) we get altitude(projection(A, i), A, D) == altitude(projection(A, i), I, midpoint(B, G))
By altitude_definition on projection(A, Line(D, G)), E, G, altitude(projection(A, Line(D, G)), A, G) we get altitude(projection(A, Line(D, G)), A, G) == altitude(projection(A, Line(D, G)), E, G)
By altitude_definition on projection(A, Line(D, G)), midpoint(B, G), D, altitude(projection(A, Line(D, G)), A, D) we get altitude(projection(A, Line(D, G)), A, D) == altitude(projection(A, Line(D, G)), D, midpoint(B, G))
By altitude_definition on projection(A, i), A, H, altitude(projection(A, i), A, B) we get altitude(projection(A, i), A, B) == altitude(projection(A, i), A, H)
By altitude_definition on projection(A, i), I, A, altitude(projection(A, i), A, D) we get altitude(projection(A, i), A, D) == altitude(projection(A, i), A, I)
By altitude_definition on projection(A, Line(D, G)), I, D, altitude(projection(A, Line(D, G)), A, D) we get altitude(projection(A, Line(D, G)), A, D) == altitude(projection(A, Line(D, G)), D, I)
By altitude_definition on projection(A, Line(D, G)), A, I, altitude(projection(A, Line(D, G)), A, D) we get altitude(projection(A, Line(D, G)), A, D) == altitude(projection(A, Line(D, G)), A, I)
By altitude_definition on projection(A, Line(D, G)), I, midpoint(B, G), altitude(projection(A, Line(D, G)), A, D) we get altitude(projection(A, Line(D, G)), A, D) == altitude(projection(A, Line(D, G)), I, midpoint(B, G))
By altitude_definition on projection(A, Line(D, G)), E, C, altitude(projection(A, Line(D, G)), A, G) we get altitude(projection(A, Line(D, G)), A, G) == altitude(projection(A, Line(D, G)), C, E)
By altitude_definition on projection(A, i), F, B, altitude(projection(A, i), A, B) we get altitude(projection(A, i), A, B) == altitude(projection(A, i), B, F)
By altitude_definition on projection(A, Line(D, G)), midpoint(B, G), A, altitude(projection(A, Line(D, G)), A, D) we get altitude(projection(A, Line(D, G)), A, D) == altitude(projection(A, Line(D, G)), A, midpoint(B, G))
By altitude_definition on projection(A, Line(D, G)), C, G, altitude(projection(A, Line(D, G)), A, G) we get altitude(projection(A, Line(D, G)), A, G) == altitude(projection(A, Line(D, G)), C, G)
By altitude_definition on projection(A, i), F, A, altitude(projection(A, i), A, B) we get altitude(projection(A, i), A, B) == altitude(projection(A, i), A, F)
By altitude_definition on projection(A, i), B, H, altitude(projection(A, i), A, B) we get altitude(projection(A, i), A, B) == altitude(projection(A, i), B, H)
By altitude_definition on projection(A, i), A, midpoint(B, G), altitude(projection(A, i), A, D) we get altitude(projection(A, i), A, D) == altitude(projection(A, i), A, midpoint(B, G))
By altitude_definition on projection(A, Line(D, G)), A, C, altitude(projection(A, Line(D, G)), A, G) we get altitude(projection(A, Line(D, G)), A, C) == altitude(projection(A, Line(D, G)), A, G)
By altitude_definition on projection(A, Line(D, G)), A, E, altitude(projection(A, Line(D, G)), A, G) we get altitude(projection(A, Line(D, G)), A, E) == altitude(projection(A, Line(D, G)), A, G)
By altitude_definition on projection(A, i), H, F, altitude(projection(A, i), A, B) we get altitude(projection(A, i), A, B) == altitude(projection(A, i), F, H)
By anti_similar_triangle_basic_properties on E, F, D, F, E, D we get not_collinear(D, E, F), not_collinear(D, E, F), angle(E, F, D) == 0 - angle(F, E, D) mod 360, angle(F, D, E) == 0 - angle(E, D, F) mod 360, angle(D, E, F) == 0 - angle(D, F, E) mod 360, log(distance(E, F)) + log(distance(D, E)) == log(distance(E, F)) + log(distance(D, F)), log(distance(D, E)) + log(distance(D, E)) == log(distance(D, F)) + log(distance(D, F)), log(distance(D, E)) + log(distance(E, F)) == log(distance(D, F)) + log(distance(E, F))
By line_definition on line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))), A, altitude(A, E, midpoint(B, G)) we get altitude(A, E, midpoint(B, G)) == Line(A, line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))))
By line_definition on E, line_intersection(Line(B, G), altitude(E, B, G)), altitude(E, B, G) we get altitude(E, B, G) == Line(E, line_intersection(Line(B, G), altitude(E, B, G)))
By line_intersection_definition on orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), Line(D, G), altitude(A, D, G) we get line_intersection(Line(D, G), altitude(A, D, G)) == orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G)))
By line_intersection_definition on orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), Line(D, G), altitude(A, D, G) we get line_intersection(Line(D, G), altitude(A, D, G)) == orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G)))
By line_definition on line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G), parallel_line(midpoint(B, G), Line(D, G)) we get parallel_line(midpoint(B, G), Line(D, G)) == Line(midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))))
By line_definition on midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), altitude(midpoint(B, G), D, F) we get altitude(midpoint(B, G), D, F) == Line(midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)))
By line_definition on line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G))), E, altitude(E, C, orthocenter(A, D, G)) we get altitude(E, C, orthocenter(A, D, G)) == Line(E, line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G))))
By line_definition on line_intersection(altitude(A, B, D), parallel_line(F, i)), F, parallel_line(F, i) we get parallel_line(F, i) == Line(F, line_intersection(altitude(A, B, D), parallel_line(F, i)))
By line_definition on midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), altitude(midpoint(B, G), D, E) we get altitude(midpoint(B, G), D, E) == Line(midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)))
By line_definition on midpoint(B, G), line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))), altitude(midpoint(B, G), I, orthocenter(A, D, G)) we get altitude(midpoint(B, G), I, orthocenter(A, D, G)) == Line(midpoint(B, G), line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))))
By line_definition on midpoint(B, G), line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D))), altitude(midpoint(B, G), I, orthocenter(A, B, D)) we get altitude(midpoint(B, G), I, orthocenter(A, B, D)) == Line(midpoint(B, G), line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D))))
By line_definition on F, line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))), altitude(F, H, orthocenter(A, B, D)) we get altitude(F, H, orthocenter(A, B, D)) == Line(F, line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))))
By line_intersection_definition on orthocenter(B, projection(A, i), orthocenter(A, B, D)), altitude(A, B, D), i we get line_intersection(i, altitude(A, B, D)) == orthocenter(B, projection(A, i), orthocenter(A, B, D))
By line_definition on F, line_intersection(Line(B, G), altitude(F, B, G)), altitude(F, B, G) we get altitude(F, B, G) == Line(F, line_intersection(Line(B, G), altitude(F, B, G)))
By line_definition on line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G), parallel_line(midpoint(B, G), i) we get parallel_line(midpoint(B, G), i) == Line(midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)))
By line_definition on E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), parallel_line(E, Line(D, G)) we get parallel_line(E, Line(D, G)) == Line(E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))))
By line_intersection_definition on orthocenter(D, projection(A, i), orthocenter(A, B, D)), altitude(A, B, D), i we get line_intersection(i, altitude(A, B, D)) == orthocenter(D, projection(A, i), orthocenter(A, B, D))
By line_definition on A, line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), altitude(A, F, midpoint(B, G)) we get altitude(A, F, midpoint(B, G)) == Line(A, line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))))
By chords_on_equal_angles_v0 on E, H, C, H, C, F, c we get distance(C, E) == distance(F, H)
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(E, B, G)), Line(B, G), perpendicular_line(projection(A, i), Line(B, G)) we get Line(B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(E, B, G)), perpendicular_line(projection(A, i), Line(B, G)))
By perpendicular_line_definition on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), g, altitude(projection(A, Line(D, G)), A, C) we get g == perpendicular_line(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), altitude(projection(A, Line(D, G)), A, C))
By perpendicular_line_definition on orthocenter(E, G, midpoint(B, G)), altitude(E, B, G), altitude(E, A, D) we get altitude(E, B, G) == perpendicular_line(orthocenter(E, G, midpoint(B, G)), altitude(E, A, D))
By perpendicular_line_definition on projection(A, Line(D, G)), altitude(projection(A, Line(D, G)), A, C), altitude(midpoint(B, G), D, E) we get altitude(projection(A, Line(D, G)), A, C) == perpendicular_line(projection(A, Line(D, G)), altitude(midpoint(B, G), D, E))
By perpendicular_line_definition on orthocenter(B, projection(A, i), orthocenter(A, B, D)), altitude(A, B, D), i we get altitude(A, B, D) == perpendicular_line(orthocenter(B, projection(A, i), orthocenter(A, B, D)), i)
By perpendicular_line_definition on F, median(F, B, G), altitude(D, F, midpoint(B, G)) we get median(F, B, G) == perpendicular_line(F, altitude(D, F, midpoint(B, G)))
By perpendicular_line_definition on orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), perpendicular_line(projection(A, Line(D, G)), Line(B, G)), Line(B, G) we get perpendicular_line(projection(A, Line(D, G)), Line(B, G)) == perpendicular_line(orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), Line(B, G))
By perpendicular_line_definition on line_intersection(altitude(F, B, D), parallel_line(midpoint(B, G), i)), parallel_line(midpoint(B, G), i), altitude(A, B, D) we get parallel_line(midpoint(B, G), i) == perpendicular_line(line_intersection(altitude(F, B, D), parallel_line(midpoint(B, G), i)), altitude(A, B, D))
By perpendicular_line_definition on orthocenter(E, G, midpoint(B, G)), altitude(E, B, G), Line(B, G) we get altitude(E, B, G) == perpendicular_line(orthocenter(E, G, midpoint(B, G)), Line(B, G))
By perpendicular_line_definition on projection(A, i), altitude(projection(A, i), A, D), altitude(E, B, G) we get altitude(projection(A, i), A, D) == perpendicular_line(projection(A, i), altitude(E, B, G))
By perpendicular_line_definition on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), altitude(projection(A, Line(D, G)), A, C), altitude(midpoint(B, G), D, E) we get altitude(projection(A, Line(D, G)), A, C) == perpendicular_line(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), altitude(midpoint(B, G), D, E))
By perpendicular_line_definition on line_intersection(altitude(E, A, D), altitude(F, B, G)), altitude(F, B, G), Line(B, G) we get altitude(F, B, G) == perpendicular_line(line_intersection(altitude(E, A, D), altitude(F, B, G)), Line(B, G))
By perpendicular_line_definition on orthocenter(E, G, midpoint(B, G)), altitude(midpoint(B, G), A, C), altitude(midpoint(B, G), D, E) we get altitude(midpoint(B, G), A, C) == perpendicular_line(orthocenter(E, G, midpoint(B, G)), altitude(midpoint(B, G), D, E))
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(E, B, G)), altitude(E, B, G), altitude(projection(A, i), A, D) we get altitude(E, B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(E, B, G)), altitude(projection(A, i), A, D))
By perpendicular_line_definition on orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), altitude(orthocenter(A, B, D), F, midpoint(B, G)), median(F, B, G) we get altitude(orthocenter(A, B, D), F, midpoint(B, G)) == perpendicular_line(orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), median(F, B, G))
By perpendicular_line_definition on orthocenter(B, F, midpoint(B, G)), altitude(B, F, midpoint(B, G)), median(F, B, G) we get altitude(B, F, midpoint(B, G)) == perpendicular_line(orthocenter(B, F, midpoint(B, G)), median(F, B, G))
By perpendicular_line_definition on line_intersection(altitude(F, B, D), parallel_line(midpoint(B, G), i)), altitude(F, B, D), i we get altitude(F, B, D) == perpendicular_line(line_intersection(altitude(F, B, D), parallel_line(midpoint(B, G), i)), i)
By perpendicular_line_definition on orthocenter(B, F, midpoint(B, G)), altitude(F, B, G), altitude(E, A, D) we get altitude(F, B, G) == perpendicular_line(orthocenter(B, F, midpoint(B, G)), altitude(E, A, D))
By perpendicular_line_definition on F, altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D) we get altitude(F, B, G) == perpendicular_line(F, altitude(projection(A, Line(D, G)), A, D))
By perpendicular_line_definition on line_intersection(altitude(E, A, D), altitude(F, B, G)), altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D) we get altitude(F, B, G) == perpendicular_line(line_intersection(altitude(E, A, D), altitude(F, B, G)), altitude(projection(A, Line(D, G)), A, D))
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(F, B, G)), altitude(F, B, G), altitude(projection(A, i), A, D) we get altitude(F, B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(F, B, G)), altitude(projection(A, i), A, D))
By perpendicular_line_definition on line_intersection(parallel_line(E, Line(D, G)), altitude(midpoint(B, G), D, G)), altitude(midpoint(B, G), D, G), parallel_line(midpoint(B, G), Line(D, G)) we get altitude(midpoint(B, G), D, G) == perpendicular_line(line_intersection(parallel_line(E, Line(D, G)), altitude(midpoint(B, G), D, G)), parallel_line(midpoint(B, G), Line(D, G)))
By perpendicular_line_definition on orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), altitude(midpoint(B, G), D, F), Line(D, F) we get altitude(midpoint(B, G), D, F) == perpendicular_line(orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), Line(D, F))
By perpendicular_line_definition on orthocenter(B, projection(A, i), orthocenter(A, B, D)), i, altitude(midpoint(B, G), B, D) we get i == perpendicular_line(orthocenter(B, projection(A, i), orthocenter(A, B, D)), altitude(midpoint(B, G), B, D))
By perpendicular_line_definition on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), h, altitude(F, A, D) we get h == perpendicular_line(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), altitude(F, A, D))
By perpendicular_line_definition on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D), h we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), h)
By perpendicular_line_definition on line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), median(F, B, G), altitude(B, F, midpoint(B, G)) we get median(F, B, G) == perpendicular_line(line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), altitude(B, F, midpoint(B, G)))
By perpendicular_line_definition on midpoint(B, G), median(F, B, G), altitude(B, F, midpoint(B, G)) we get median(F, B, G) == perpendicular_line(midpoint(B, G), altitude(B, F, midpoint(B, G)))
By perpendicular_line_definition on line_intersection(altitude(E, B, G), altitude(F, A, D)), altitude(E, B, G), Line(B, G) we get altitude(E, B, G) == perpendicular_line(line_intersection(altitude(E, B, G), altitude(F, A, D)), Line(B, G))
By concurrent_sufficient_conditions on Line(I, orthocenter(A, B, D)), Line(I, orthocenter(A, D, G)), h we get concurrent(h, Line(I, orthocenter(A, B, D)), Line(I, orthocenter(A, D, G)))
By perpendicular_line_definition on orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), altitude(F, B, G), altitude(projection(A, i), A, D) we get altitude(F, B, G) == perpendicular_line(orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), altitude(projection(A, i), A, D))
By perpendicular_line_definition on orthocenter(D, F, midpoint(B, G)), altitude(midpoint(B, G), D, F), Line(D, F) we get altitude(midpoint(B, G), D, F) == perpendicular_line(orthocenter(D, F, midpoint(B, G)), Line(D, F))
By perpendicular_line_definition on line_intersection(altitude(F, B, D), parallel_line(midpoint(B, G), i)), parallel_line(midpoint(B, G), i), altitude(F, B, D) we get parallel_line(midpoint(B, G), i) == perpendicular_line(line_intersection(altitude(F, B, D), parallel_line(midpoint(B, G), i)), altitude(F, B, D))
By perpendicular_line_definition on orthocenter(D, F, midpoint(B, G)), altitude(midpoint(B, G), D, F), altitude(midpoint(B, G), A, B) we get altitude(midpoint(B, G), D, F) == perpendicular_line(orthocenter(D, F, midpoint(B, G)), altitude(midpoint(B, G), A, B))
By perpendicular_line_definition on orthocenter(D, F, midpoint(B, G)), altitude(F, A, D), altitude(E, B, G) we get altitude(F, A, D) == perpendicular_line(orthocenter(D, F, midpoint(B, G)), altitude(E, B, G))
By perpendicular_line_definition on orthocenter(B, projection(A, i), orthocenter(A, B, D)), i, altitude(A, B, D) we get i == perpendicular_line(orthocenter(B, projection(A, i), orthocenter(A, B, D)), altitude(A, B, D))
By perpendicular_line_definition on orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), altitude(E, B, G), altitude(E, A, D) we get altitude(E, B, G) == perpendicular_line(orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), altitude(E, A, D))
By perpendicular_line_definition on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D), altitude(E, B, G) we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), altitude(E, B, G))
By perpendicular_line_definition on orthocenter(D, projection(A, i), orthocenter(A, B, D)), i, altitude(midpoint(B, G), B, D) we get i == perpendicular_line(orthocenter(D, projection(A, i), orthocenter(A, B, D)), altitude(midpoint(B, G), B, D))
By perpendicular_line_definition on line_intersection(altitude(E, A, D), altitude(F, B, G)), altitude(F, B, G), altitude(F, A, D) we get altitude(F, B, G) == perpendicular_line(line_intersection(altitude(E, A, D), altitude(F, B, G)), altitude(F, A, D))
By perpendicular_line_definition on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D), altitude(F, B, G) we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), altitude(F, B, G))
By perpendicular_line_definition on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), g, altitude(midpoint(B, G), A, C) we get g == perpendicular_line(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), altitude(midpoint(B, G), A, C))
By perpendicular_line_definition on orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), altitude(E, B, G), Line(B, G) we get altitude(E, B, G) == perpendicular_line(orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), Line(B, G))
By perpendicular_line_definition on orthocenter(B, F, midpoint(B, G)), altitude(F, B, G), altitude(projection(A, i), A, D) we get altitude(F, B, G) == perpendicular_line(orthocenter(B, F, midpoint(B, G)), altitude(projection(A, i), A, D))
By perpendicular_line_definition on F, Line(D, F), perpendicular_line(projection(A, i), Line(D, F)) we get Line(D, F) == perpendicular_line(F, perpendicular_line(projection(A, i), Line(D, F)))
By perpendicular_line_definition on orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), altitude(midpoint(B, G), D, F), altitude(projection(A, i), A, B) we get altitude(midpoint(B, G), D, F) == perpendicular_line(orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), altitude(projection(A, i), A, B))
By perpendicular_line_definition on line_intersection(altitude(E, B, G), altitude(F, A, D)), altitude(E, B, G), altitude(E, A, D) we get altitude(E, B, G) == perpendicular_line(line_intersection(altitude(E, B, G), altitude(F, A, D)), altitude(E, A, D))
By perpendicular_line_definition on B, Line(B, G), perpendicular_line(projection(A, i), Line(B, G)) we get Line(B, G) == perpendicular_line(B, perpendicular_line(projection(A, i), Line(B, G)))
By perpendicular_line_definition on line_intersection(parallel_line(F, i), altitude(midpoint(B, G), B, D)), parallel_line(F, i), altitude(F, B, D) we get parallel_line(F, i) == perpendicular_line(line_intersection(parallel_line(F, i), altitude(midpoint(B, G), B, D)), altitude(F, B, D))
By perpendicular_line_definition on line_intersection(altitude(E, B, G), altitude(F, A, D)), altitude(F, A, D), altitude(E, B, G) we get altitude(F, A, D) == perpendicular_line(line_intersection(altitude(E, B, G), altitude(F, A, D)), altitude(E, B, G))
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(F, B, G)), Line(B, G), perpendicular_line(projection(A, i), Line(B, G)) we get Line(B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(F, B, G)), perpendicular_line(projection(A, i), Line(B, G)))
By perpendicular_line_definition on line_intersection(altitude(E, B, G), altitude(F, A, D)), altitude(F, A, D), h we get altitude(F, A, D) == perpendicular_line(line_intersection(altitude(E, B, G), altitude(F, A, D)), h)
By concurrent_sufficient_conditions on Line(I, orthocenter(A, D, G)), Line(I, orthocenter(A, B, D)), h we get concurrent(h, Line(I, orthocenter(A, B, D)), Line(I, orthocenter(A, D, G)))
By line_unique_intersection_v0 on altitude(A, B, D), i, orthocenter(D, projection(A, i), orthocenter(A, B, D)), orthocenter(B, projection(A, i), orthocenter(A, B, D)) we get orthocenter(B, projection(A, i), orthocenter(A, B, D)) == orthocenter(D, projection(A, i), orthocenter(A, B, D))
By perpendicular_line_definition on line_intersection(altitude(E, A, D), altitude(F, B, G)), altitude(E, A, D), h we get altitude(E, A, D) == perpendicular_line(line_intersection(altitude(E, A, D), altitude(F, B, G)), h)
By perpendicular_line_definition on projection(A, Line(D, G)), altitude(projection(A, Line(D, G)), A, D), altitude(F, B, G) we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(projection(A, Line(D, G)), altitude(F, B, G))
By perpendicular_line_definition on midpoint(B, G), Line(B, G), perpendicular_line(projection(A, i), Line(B, G)) we get Line(B, G) == perpendicular_line(midpoint(B, G), perpendicular_line(projection(A, i), Line(B, G)))
By perpendicular_line_definition on midpoint(B, G), median(E, B, G), altitude(D, E, midpoint(B, G)) we get median(E, B, G) == perpendicular_line(midpoint(B, G), altitude(D, E, midpoint(B, G)))
By perpendicular_line_definition on line_intersection(altitude(E, A, D), altitude(F, B, G)), altitude(F, B, G), altitude(projection(A, i), A, D) we get altitude(F, B, G) == perpendicular_line(line_intersection(altitude(E, A, D), altitude(F, B, G)), altitude(projection(A, i), A, D))
By perpendicular_line_definition on G, Line(B, G), perpendicular_line(projection(A, Line(D, G)), Line(B, G)) we get Line(B, G) == perpendicular_line(G, perpendicular_line(projection(A, Line(D, G)), Line(B, G)))
By perpendicular_line_definition on line_intersection(altitude(E, B, G), altitude(F, A, D)), altitude(E, B, G), altitude(projection(A, i), A, D) we get altitude(E, B, G) == perpendicular_line(line_intersection(altitude(E, B, G), altitude(F, A, D)), altitude(projection(A, i), A, D))
By perpendicular_line_definition on orthocenter(D, E, midpoint(B, G)), altitude(E, A, D), h we get altitude(E, A, D) == perpendicular_line(orthocenter(D, E, midpoint(B, G)), h)
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(F, B, G)), altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D) we get altitude(F, B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(F, B, G)), altitude(projection(A, Line(D, G)), A, D))
By perpendicular_line_definition on line_intersection(altitude(E, D, G), parallel_line(midpoint(B, G), Line(D, G))), parallel_line(midpoint(B, G), Line(D, G)), altitude(E, D, G) we get parallel_line(midpoint(B, G), Line(D, G)) == perpendicular_line(line_intersection(altitude(E, D, G), parallel_line(midpoint(B, G), Line(D, G))), altitude(E, D, G))
By perpendicular_line_definition on orthocenter(D, F, midpoint(B, G)), altitude(F, A, D), h we get altitude(F, A, D) == perpendicular_line(orthocenter(D, F, midpoint(B, G)), h)
By perpendicular_line_definition on line_intersection(altitude(E, D, G), parallel_line(midpoint(B, G), Line(D, G))), altitude(E, D, G), parallel_line(midpoint(B, G), Line(D, G)) we get altitude(E, D, G) == perpendicular_line(line_intersection(altitude(E, D, G), parallel_line(midpoint(B, G), Line(D, G))), parallel_line(midpoint(B, G), Line(D, G)))
By perpendicular_line_definition on orthocenter(A, D, G), Line(B, G), perpendicular_line(projection(A, i), Line(B, G)) we get Line(B, G) == perpendicular_line(orthocenter(A, D, G), perpendicular_line(projection(A, i), Line(B, G)))
By concurrent_sufficient_conditions on Line(I, orthocenter(A, B, D)), Line(I, orthocenter(A, D, G)), Line(G, I) we get concurrent(Line(G, I), Line(I, orthocenter(A, B, D)), Line(I, orthocenter(A, D, G)))
By concurrent_sufficient_conditions on Line(I, orthocenter(A, B, D)), Line(I, orthocenter(A, D, G)), Line(B, I) we get concurrent(Line(B, I), Line(I, orthocenter(A, B, D)), Line(I, orthocenter(A, D, G)))
By perpendicular_line_definition on midpoint(B, G), median(F, B, G), altitude(D, F, midpoint(B, G)) we get median(F, B, G) == perpendicular_line(midpoint(B, G), altitude(D, F, midpoint(B, G)))
By perpendicular_line_definition on line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))), median(E, B, G), altitude(G, E, midpoint(B, G)) we get median(E, B, G) == perpendicular_line(line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))), altitude(G, E, midpoint(B, G)))
By perpendicular_line_definition on orthocenter(E, G, midpoint(B, G)), altitude(E, B, G), altitude(F, A, D) we get altitude(E, B, G) == perpendicular_line(orthocenter(E, G, midpoint(B, G)), altitude(F, A, D))
By perpendicular_line_definition on orthocenter(E, G, midpoint(B, G)), altitude(midpoint(B, G), A, C), g we get altitude(midpoint(B, G), A, C) == perpendicular_line(orthocenter(E, G, midpoint(B, G)), g)
By perpendicular_line_definition on orthocenter(D, projection(A, i), orthocenter(A, B, D)), altitude(A, B, D), parallel_line(midpoint(B, G), i) we get altitude(A, B, D) == perpendicular_line(orthocenter(D, projection(A, i), orthocenter(A, B, D)), parallel_line(midpoint(B, G), i))
By perpendicular_line_definition on line_intersection(h, altitude(projection(A, i), A, D)), altitude(projection(A, i), A, D), h we get altitude(projection(A, i), A, D) == perpendicular_line(line_intersection(h, altitude(projection(A, i), A, D)), h)
By perpendicular_line_definition on line_intersection(parallel_line(E, Line(D, G)), altitude(midpoint(B, G), D, G)), altitude(midpoint(B, G), D, G), Line(D, G) we get altitude(midpoint(B, G), D, G) == perpendicular_line(line_intersection(parallel_line(E, Line(D, G)), altitude(midpoint(B, G), D, G)), Line(D, G))
By perpendicular_line_definition on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), altitude(midpoint(B, G), D, E), altitude(projection(A, Line(D, G)), A, C) we get altitude(midpoint(B, G), D, E) == perpendicular_line(line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), altitude(projection(A, Line(D, G)), A, C))
By perpendicular_line_definition on projection(A, i), altitude(projection(A, i), A, B), altitude(midpoint(B, G), D, F) we get altitude(projection(A, i), A, B) == perpendicular_line(projection(A, i), altitude(midpoint(B, G), D, F))
By perpendicular_line_definition on orthocenter(E, G, midpoint(B, G)), altitude(E, B, G), altitude(projection(A, i), A, D) we get altitude(E, B, G) == perpendicular_line(orthocenter(E, G, midpoint(B, G)), altitude(projection(A, i), A, D))
By perpendicular_line_definition on orthocenter(B, projection(A, i), orthocenter(A, B, D)), i, altitude(F, B, D) we get i == perpendicular_line(orthocenter(B, projection(A, i), orthocenter(A, B, D)), altitude(F, B, D))
By line_intersection_definition on I, Line(I, orthocenter(A, B, D)), Line(I, orthocenter(A, D, G)) we get I == line_intersection(Line(I, orthocenter(A, B, D)), Line(I, orthocenter(A, D, G)))
By perpendicular_line_definition on orthocenter(D, E, midpoint(B, G)), altitude(midpoint(B, G), D, E), Line(D, E) we get altitude(midpoint(B, G), D, E) == perpendicular_line(orthocenter(D, E, midpoint(B, G)), Line(D, E))
By perpendicular_line_definition on line_intersection(altitude(F, B, D), parallel_line(midpoint(B, G), i)), parallel_line(midpoint(B, G), i), altitude(midpoint(B, G), B, D) we get parallel_line(midpoint(B, G), i) == perpendicular_line(line_intersection(altitude(F, B, D), parallel_line(midpoint(B, G), i)), altitude(midpoint(B, G), B, D))
By perpendicular_line_definition on orthocenter(D, E, midpoint(B, G)), altitude(midpoint(B, G), D, E), altitude(projection(A, Line(D, G)), A, C) we get altitude(midpoint(B, G), D, E) == perpendicular_line(orthocenter(D, E, midpoint(B, G)), altitude(projection(A, Line(D, G)), A, C))
By perpendicular_line_definition on orthocenter(D, projection(A, i), orthocenter(A, B, D)), i, altitude(F, B, D) we get i == perpendicular_line(orthocenter(D, projection(A, i), orthocenter(A, B, D)), altitude(F, B, D))
By perpendicular_line_definition on line_intersection(altitude(E, A, D), altitude(F, B, G)), altitude(F, B, G), altitude(E, A, D) we get altitude(F, B, G) == perpendicular_line(line_intersection(altitude(E, A, D), altitude(F, B, G)), altitude(E, A, D))
By perpendicular_line_definition on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), h, altitude(E, A, D) we get h == perpendicular_line(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), altitude(E, A, D))
By perpendicular_line_definition on E, median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G)) we get median(E, B, G) == perpendicular_line(E, altitude(orthocenter(A, D, G), E, midpoint(B, G)))
By perpendicular_line_definition on B, Line(B, G), perpendicular_line(projection(A, Line(D, G)), Line(B, G)) we get Line(B, G) == perpendicular_line(B, perpendicular_line(projection(A, Line(D, G)), Line(B, G)))
By perpendicular_line_definition on orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), altitude(A, D, G), Line(D, G) we get altitude(A, D, G) == perpendicular_line(orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), Line(D, G))
By perpendicular_line_definition on orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), altitude(F, B, G), altitude(E, A, D) we get altitude(F, B, G) == perpendicular_line(orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), altitude(E, A, D))
By perpendicular_line_definition on E, altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D) we get altitude(E, B, G) == perpendicular_line(E, altitude(projection(A, Line(D, G)), A, D))
By perpendicular_line_definition on orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), Line(D, G), altitude(midpoint(B, G), D, G) we get Line(D, G) == perpendicular_line(orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), altitude(midpoint(B, G), D, G))
By perpendicular_line_definition on line_intersection(altitude(E, B, G), altitude(F, A, D)), altitude(F, A, D), altitude(F, B, G) we get altitude(F, A, D) == perpendicular_line(line_intersection(altitude(E, B, G), altitude(F, A, D)), altitude(F, B, G))
By perpendicular_line_definition on orthocenter(A, B, D), Line(B, G), perpendicular_line(projection(A, Line(D, G)), Line(B, G)) we get Line(B, G) == perpendicular_line(orthocenter(A, B, D), perpendicular_line(projection(A, Line(D, G)), Line(B, G)))
By perpendicular_line_definition on orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), altitude(E, B, G), altitude(F, A, D) we get altitude(E, B, G) == perpendicular_line(orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), altitude(F, A, D))
By perpendicular_line_definition on orthocenter(D, projection(A, i), orthocenter(A, B, D)), perpendicular_line(projection(A, i), Line(D, F)), Line(D, F) we get perpendicular_line(projection(A, i), Line(D, F)) == perpendicular_line(orthocenter(D, projection(A, i), orthocenter(A, B, D)), Line(D, F))
By perpendicular_line_definition on F, altitude(F, B, G), altitude(projection(A, i), A, D) we get altitude(F, B, G) == perpendicular_line(F, altitude(projection(A, i), A, D))
By perpendicular_line_definition on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), altitude(projection(A, Line(D, G)), A, C), g we get altitude(projection(A, Line(D, G)), A, C) == perpendicular_line(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), g)
By perpendicular_line_definition on orthocenter(D, E, midpoint(B, G)), altitude(midpoint(B, G), D, E), altitude(midpoint(B, G), A, C) we get altitude(midpoint(B, G), D, E) == perpendicular_line(orthocenter(D, E, midpoint(B, G)), altitude(midpoint(B, G), A, C))
By perpendicular_line_definition on orthocenter(D, F, midpoint(B, G)), altitude(D, F, midpoint(B, G)), median(F, B, G) we get altitude(D, F, midpoint(B, G)) == perpendicular_line(orthocenter(D, F, midpoint(B, G)), median(F, B, G))
By perpendicular_line_definition on orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), perpendicular_line(projection(A, Line(D, G)), Line(D, E)), Line(D, E) we get perpendicular_line(projection(A, Line(D, G)), Line(D, E)) == perpendicular_line(orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), Line(D, E))
By perpendicular_line_definition on line_intersection(altitude(E, B, G), altitude(F, A, D)), altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D) we get altitude(E, B, G) == perpendicular_line(line_intersection(altitude(E, B, G), altitude(F, A, D)), altitude(projection(A, Line(D, G)), A, D))
By perpendicular_line_definition on orthocenter(A, B, D), Line(B, G), perpendicular_line(projection(A, i), Line(B, G)) we get Line(B, G) == perpendicular_line(orthocenter(A, B, D), perpendicular_line(projection(A, i), Line(B, G)))
By perpendicular_line_definition on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), h, Line(B, G) we get h == perpendicular_line(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), Line(B, G))
By perpendicular_line_definition on orthocenter(B, F, midpoint(B, G)), altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D) we get altitude(F, B, G) == perpendicular_line(orthocenter(B, F, midpoint(B, G)), altitude(projection(A, Line(D, G)), A, D))
By perpendicular_line_definition on line_intersection(f, altitude(projection(A, i), A, B)), f, Line(D, F) we get f == perpendicular_line(line_intersection(f, altitude(projection(A, i), A, B)), Line(D, F))
By perpendicular_line_definition on orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G)) we get altitude(A, D, G) == perpendicular_line(orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), parallel_line(midpoint(B, G), Line(D, G)))
By perpendicular_line_definition on line_intersection(f, altitude(projection(A, i), A, B)), altitude(projection(A, i), A, B), altitude(midpoint(B, G), D, F) we get altitude(projection(A, i), A, B) == perpendicular_line(line_intersection(f, altitude(projection(A, i), A, B)), altitude(midpoint(B, G), D, F))
By perpendicular_line_definition on line_intersection(altitude(E, D, G), parallel_line(midpoint(B, G), Line(D, G))), parallel_line(midpoint(B, G), Line(D, G)), altitude(midpoint(B, G), D, G) we get parallel_line(midpoint(B, G), Line(D, G)) == perpendicular_line(line_intersection(altitude(E, D, G), parallel_line(midpoint(B, G), Line(D, G))), altitude(midpoint(B, G), D, G))
By perpendicular_line_definition on E, altitude(E, B, G), altitude(projection(A, i), A, D) we get altitude(E, B, G) == perpendicular_line(E, altitude(projection(A, i), A, D))
By perpendicular_line_definition on orthocenter(B, F, midpoint(B, G)), altitude(F, B, G), altitude(F, A, D) we get altitude(F, B, G) == perpendicular_line(orthocenter(B, F, midpoint(B, G)), altitude(F, A, D))
By perpendicular_line_definition on orthocenter(D, E, midpoint(B, G)), altitude(D, E, midpoint(B, G)), median(E, B, G) we get altitude(D, E, midpoint(B, G)) == perpendicular_line(orthocenter(D, E, midpoint(B, G)), median(E, B, G))
By perpendicular_line_definition on orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), Line(D, G), altitude(A, D, G) we get Line(D, G) == perpendicular_line(orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), altitude(A, D, G))
By perpendicular_line_definition on line_intersection(h, altitude(projection(A, i), A, D)), altitude(projection(A, i), A, D), altitude(E, B, G) we get altitude(projection(A, i), A, D) == perpendicular_line(line_intersection(h, altitude(projection(A, i), A, D)), altitude(E, B, G))
By perpendicular_line_definition on orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), altitude(midpoint(B, G), D, F), altitude(midpoint(B, G), A, B) we get altitude(midpoint(B, G), D, F) == perpendicular_line(orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), altitude(midpoint(B, G), A, B))
By perpendicular_line_definition on line_intersection(altitude(E, A, D), altitude(F, B, G)), altitude(E, A, D), altitude(F, B, G) we get altitude(E, A, D) == perpendicular_line(line_intersection(altitude(E, A, D), altitude(F, B, G)), altitude(F, B, G))
By perpendicular_line_definition on line_intersection(altitude(E, B, G), altitude(F, A, D)), altitude(E, B, G), altitude(F, A, D) we get altitude(E, B, G) == perpendicular_line(line_intersection(altitude(E, B, G), altitude(F, A, D)), altitude(F, A, D))
By perpendicular_line_definition on line_intersection(h, altitude(projection(A, i), A, D)), altitude(projection(A, i), A, D), altitude(F, B, G) we get altitude(projection(A, i), A, D) == perpendicular_line(line_intersection(h, altitude(projection(A, i), A, D)), altitude(F, B, G))
By concurrent_sufficient_conditions on Line(I, orthocenter(A, D, G)), Line(I, orthocenter(A, B, D)), Line(B, I) we get concurrent(Line(B, I), Line(I, orthocenter(A, B, D)), Line(I, orthocenter(A, D, G)))
By perpendicular_line_definition on orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), Line(D, G), altitude(A, D, G) we get Line(D, G) == perpendicular_line(orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), altitude(A, D, G))
By perpendicular_line_definition on orthocenter(B, F, midpoint(B, G)), altitude(midpoint(B, G), A, B), f we get altitude(midpoint(B, G), A, B) == perpendicular_line(orthocenter(B, F, midpoint(B, G)), f)
By perpendicular_line_definition on orthocenter(D, E, midpoint(B, G)), altitude(E, A, D), altitude(E, B, G) we get altitude(E, A, D) == perpendicular_line(orthocenter(D, E, midpoint(B, G)), altitude(E, B, G))
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(F, B, G)), Line(B, G), perpendicular_line(projection(A, Line(D, G)), Line(B, G)) we get Line(B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(F, B, G)), perpendicular_line(projection(A, Line(D, G)), Line(B, G)))
By perpendicular_line_definition on orthocenter(B, projection(A, i), orthocenter(A, B, D)), altitude(A, B, D), parallel_line(midpoint(B, G), i) we get altitude(A, B, D) == perpendicular_line(orthocenter(B, projection(A, i), orthocenter(A, B, D)), parallel_line(midpoint(B, G), i))
By perpendicular_line_definition on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), h, altitude(projection(A, i), A, D) we get h == perpendicular_line(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, i), A, D))
By perpendicular_line_definition on midpoint(B, G), Line(B, G), perpendicular_line(projection(A, Line(D, G)), Line(B, G)) we get Line(B, G) == perpendicular_line(midpoint(B, G), perpendicular_line(projection(A, Line(D, G)), Line(B, G)))
By perpendicular_line_definition on orthocenter(D, projection(A, i), orthocenter(A, B, D)), altitude(A, B, D), parallel_line(F, i) we get altitude(A, B, D) == perpendicular_line(orthocenter(D, projection(A, i), orthocenter(A, B, D)), parallel_line(F, i))
By perpendicular_line_definition on line_intersection(parallel_line(E, Line(D, G)), altitude(midpoint(B, G), D, G)), altitude(midpoint(B, G), D, G), parallel_line(E, Line(D, G)) we get altitude(midpoint(B, G), D, G) == perpendicular_line(line_intersection(parallel_line(E, Line(D, G)), altitude(midpoint(B, G), D, G)), parallel_line(E, Line(D, G)))
By perpendicular_line_definition on orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), altitude(midpoint(B, G), D, E), altitude(projection(A, Line(D, G)), A, C) we get altitude(midpoint(B, G), D, E) == perpendicular_line(orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), altitude(projection(A, Line(D, G)), A, C))
By perpendicular_line_definition on E, Line(D, E), perpendicular_line(projection(A, Line(D, G)), Line(D, E)) we get Line(D, E) == perpendicular_line(E, perpendicular_line(projection(A, Line(D, G)), Line(D, E)))
By perpendicular_line_definition on orthocenter(D, projection(A, i), orthocenter(A, B, D)), altitude(A, B, D), i we get altitude(A, B, D) == perpendicular_line(orthocenter(D, projection(A, i), orthocenter(A, B, D)), i)
By perpendicular_line_definition on line_intersection(h, altitude(projection(A, i), A, D)), h, altitude(F, A, D) we get h == perpendicular_line(line_intersection(h, altitude(projection(A, i), A, D)), altitude(F, A, D))
By perpendicular_line_definition on E, median(E, B, G), altitude(D, E, midpoint(B, G)) we get median(E, B, G) == perpendicular_line(E, altitude(D, E, midpoint(B, G)))
By perpendicular_line_definition on orthocenter(B, F, midpoint(B, G)), altitude(midpoint(B, G), A, B), altitude(midpoint(B, G), D, F) we get altitude(midpoint(B, G), A, B) == perpendicular_line(orthocenter(B, F, midpoint(B, G)), altitude(midpoint(B, G), D, F))
By perpendicular_line_definition on orthocenter(A, D, G), Line(D, E), perpendicular_line(projection(A, Line(D, G)), Line(D, E)) we get Line(D, E) == perpendicular_line(orthocenter(A, D, G), perpendicular_line(projection(A, Line(D, G)), Line(D, E)))
By perpendicular_line_definition on orthocenter(B, projection(A, i), orthocenter(A, B, D)), altitude(A, B, D), parallel_line(F, i) we get altitude(A, B, D) == perpendicular_line(orthocenter(B, projection(A, i), orthocenter(A, B, D)), parallel_line(F, i))
By perpendicular_line_definition on orthocenter(B, F, midpoint(B, G)), altitude(F, B, G), Line(B, G) we get altitude(F, B, G) == perpendicular_line(orthocenter(B, F, midpoint(B, G)), Line(B, G))
By perpendicular_line_definition on midpoint(B, G), altitude(midpoint(B, G), D, E), altitude(projection(A, Line(D, G)), A, C) we get altitude(midpoint(B, G), D, E) == perpendicular_line(midpoint(B, G), altitude(projection(A, Line(D, G)), A, C))
By perpendicular_line_definition on orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), altitude(midpoint(B, G), D, E), altitude(midpoint(B, G), A, C) we get altitude(midpoint(B, G), D, E) == perpendicular_line(orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), altitude(midpoint(B, G), A, C))
By perpendicular_line_definition on orthocenter(A, B, D), Line(D, F), perpendicular_line(projection(A, i), Line(D, F)) we get Line(D, F) == perpendicular_line(orthocenter(A, B, D), perpendicular_line(projection(A, i), Line(D, F)))
By perpendicular_line_definition on line_intersection(h, altitude(projection(A, i), A, D)), h, altitude(projection(A, i), A, D) we get h == perpendicular_line(line_intersection(h, altitude(projection(A, i), A, D)), altitude(projection(A, i), A, D))
By perpendicular_line_definition on line_intersection(parallel_line(F, i), altitude(midpoint(B, G), B, D)), parallel_line(F, i), altitude(A, B, D) we get parallel_line(F, i) == perpendicular_line(line_intersection(parallel_line(F, i), altitude(midpoint(B, G), B, D)), altitude(A, B, D))
By perpendicular_line_definition on midpoint(B, G), altitude(midpoint(B, G), D, F), altitude(projection(A, i), A, B) we get altitude(midpoint(B, G), D, F) == perpendicular_line(midpoint(B, G), altitude(projection(A, i), A, B))
By perpendicular_line_definition on line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))), median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G)) we get median(E, B, G) == perpendicular_line(line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))), altitude(orthocenter(A, D, G), E, midpoint(B, G)))
By perpendicular_line_definition on line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), altitude(midpoint(B, G), D, F), altitude(projection(A, i), A, B) we get altitude(midpoint(B, G), D, F) == perpendicular_line(line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), altitude(projection(A, i), A, B))
By perpendicular_line_definition on line_intersection(parallel_line(F, i), altitude(midpoint(B, G), B, D)), altitude(midpoint(B, G), B, D), i we get altitude(midpoint(B, G), B, D) == perpendicular_line(line_intersection(parallel_line(F, i), altitude(midpoint(B, G), B, D)), i)
By perpendicular_line_definition on D, Line(D, F), perpendicular_line(projection(A, i), Line(D, F)) we get Line(D, F) == perpendicular_line(D, perpendicular_line(projection(A, i), Line(D, F)))
By perpendicular_line_definition on line_intersection(altitude(F, B, D), parallel_line(midpoint(B, G), i)), altitude(F, B, D), parallel_line(midpoint(B, G), i) we get altitude(F, B, D) == perpendicular_line(line_intersection(altitude(F, B, D), parallel_line(midpoint(B, G), i)), parallel_line(midpoint(B, G), i))
By perpendicular_line_definition on line_intersection(f, altitude(projection(A, i), A, B)), f, altitude(midpoint(B, G), A, B) we get f == perpendicular_line(line_intersection(f, altitude(projection(A, i), A, B)), altitude(midpoint(B, G), A, B))
By perpendicular_line_definition on line_intersection(altitude(E, D, G), parallel_line(midpoint(B, G), Line(D, G))), altitude(E, D, G), parallel_line(E, Line(D, G)) we get altitude(E, D, G) == perpendicular_line(line_intersection(altitude(E, D, G), parallel_line(midpoint(B, G), Line(D, G))), parallel_line(E, Line(D, G)))
By perpendicular_line_definition on line_intersection(parallel_line(E, Line(D, G)), altitude(midpoint(B, G), D, G)), parallel_line(E, Line(D, G)), altitude(midpoint(B, G), D, G) we get parallel_line(E, Line(D, G)) == perpendicular_line(line_intersection(parallel_line(E, Line(D, G)), altitude(midpoint(B, G), D, G)), altitude(midpoint(B, G), D, G))
By perpendicular_line_definition on line_intersection(parallel_line(F, i), altitude(midpoint(B, G), B, D)), altitude(midpoint(B, G), B, D), parallel_line(F, i) we get altitude(midpoint(B, G), B, D) == perpendicular_line(line_intersection(parallel_line(F, i), altitude(midpoint(B, G), B, D)), parallel_line(F, i))
By perpendicular_line_definition on orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), altitude(A, D, G), parallel_line(E, Line(D, G)) we get altitude(A, D, G) == perpendicular_line(orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), parallel_line(E, Line(D, G)))
By perpendicular_line_definition on orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), altitude(orthocenter(A, D, G), E, midpoint(B, G)), median(E, B, G) we get altitude(orthocenter(A, D, G), E, midpoint(B, G)) == perpendicular_line(orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), median(E, B, G))
By perpendicular_line_definition on orthocenter(E, G, midpoint(B, G)), altitude(G, E, midpoint(B, G)), median(E, B, G) we get altitude(G, E, midpoint(B, G)) == perpendicular_line(orthocenter(E, G, midpoint(B, G)), median(E, B, G))
By perpendicular_line_definition on line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), median(F, B, G), altitude(D, F, midpoint(B, G)) we get median(F, B, G) == perpendicular_line(line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), altitude(D, F, midpoint(B, G)))
By perpendicular_line_definition on line_intersection(altitude(E, D, G), parallel_line(midpoint(B, G), Line(D, G))), parallel_line(midpoint(B, G), Line(D, G)), altitude(A, D, G) we get parallel_line(midpoint(B, G), Line(D, G)) == perpendicular_line(line_intersection(altitude(E, D, G), parallel_line(midpoint(B, G), Line(D, G))), altitude(A, D, G))
By perpendicular_line_definition on line_intersection(parallel_line(F, i), altitude(midpoint(B, G), B, D)), parallel_line(F, i), altitude(midpoint(B, G), B, D) we get parallel_line(F, i) == perpendicular_line(line_intersection(parallel_line(F, i), altitude(midpoint(B, G), B, D)), altitude(midpoint(B, G), B, D))
By perpendicular_line_definition on line_intersection(h, altitude(projection(A, i), A, D)), h, altitude(E, A, D) we get h == perpendicular_line(line_intersection(h, altitude(projection(A, i), A, D)), altitude(E, A, D))
By perpendicular_line_definition on G, Line(B, G), perpendicular_line(projection(A, i), Line(B, G)) we get Line(B, G) == perpendicular_line(G, perpendicular_line(projection(A, i), Line(B, G)))
By perpendicular_line_definition on line_intersection(altitude(F, B, D), parallel_line(midpoint(B, G), i)), altitude(F, B, D), parallel_line(F, i) we get altitude(F, B, D) == perpendicular_line(line_intersection(altitude(F, B, D), parallel_line(midpoint(B, G), i)), parallel_line(F, i))
By perpendicular_line_definition on orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), altitude(A, D, G), parallel_line(E, Line(D, G)) we get altitude(A, D, G) == perpendicular_line(orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), parallel_line(E, Line(D, G)))
By perpendicular_line_definition on orthocenter(B, projection(A, i), orthocenter(A, B, D)), perpendicular_line(projection(A, i), Line(B, G)), Line(B, G) we get perpendicular_line(projection(A, i), Line(B, G)) == perpendicular_line(orthocenter(B, projection(A, i), orthocenter(A, B, D)), Line(B, G))
By perpendicular_line_definition on orthocenter(E, G, midpoint(B, G)), altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D) we get altitude(E, B, G) == perpendicular_line(orthocenter(E, G, midpoint(B, G)), altitude(projection(A, Line(D, G)), A, D))
By perpendicular_line_definition on orthocenter(A, D, G), Line(B, G), perpendicular_line(projection(A, Line(D, G)), Line(B, G)) we get Line(B, G) == perpendicular_line(orthocenter(A, D, G), perpendicular_line(projection(A, Line(D, G)), Line(B, G)))
By perpendicular_line_definition on orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), altitude(F, B, G), Line(B, G) we get altitude(F, B, G) == perpendicular_line(orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), Line(B, G))
By perpendicular_line_definition on orthocenter(D, E, midpoint(B, G)), altitude(E, A, D), altitude(F, B, G) we get altitude(E, A, D) == perpendicular_line(orthocenter(D, E, midpoint(B, G)), altitude(F, B, G))
By perpendicular_line_definition on orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), altitude(A, D, G), Line(D, G) we get altitude(A, D, G) == perpendicular_line(orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), Line(D, G))
By perpendicular_line_definition on orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), altitude(F, B, G), altitude(F, A, D) we get altitude(F, B, G) == perpendicular_line(orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), altitude(F, A, D))
By perpendicular_line_definition on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), g, Line(D, E) we get g == perpendicular_line(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), Line(D, E))
By perpendicular_line_definition on line_intersection(h, altitude(projection(A, i), A, D)), h, Line(B, G) we get h == perpendicular_line(line_intersection(h, altitude(projection(A, i), A, D)), Line(B, G))
By perpendicular_line_definition on line_intersection(altitude(E, A, D), altitude(F, B, G)), altitude(E, A, D), altitude(E, B, G) we get altitude(E, A, D) == perpendicular_line(line_intersection(altitude(E, A, D), altitude(F, B, G)), altitude(E, B, G))
By perpendicular_line_definition on line_intersection(parallel_line(E, Line(D, G)), altitude(midpoint(B, G), D, G)), parallel_line(E, Line(D, G)), altitude(A, D, G) we get parallel_line(E, Line(D, G)) == perpendicular_line(line_intersection(parallel_line(E, Line(D, G)), altitude(midpoint(B, G), D, G)), altitude(A, D, G))
By perpendicular_line_definition on line_intersection(f, altitude(projection(A, i), A, B)), altitude(projection(A, i), A, B), f we get altitude(projection(A, i), A, B) == perpendicular_line(line_intersection(f, altitude(projection(A, i), A, B)), f)
By perpendicular_line_definition on line_intersection(parallel_line(E, Line(D, G)), altitude(midpoint(B, G), D, G)), parallel_line(E, Line(D, G)), altitude(E, D, G) we get parallel_line(E, Line(D, G)) == perpendicular_line(line_intersection(parallel_line(E, Line(D, G)), altitude(midpoint(B, G), D, G)), altitude(E, D, G))
By perpendicular_line_definition on E, median(E, B, G), altitude(G, E, midpoint(B, G)) we get median(E, B, G) == perpendicular_line(E, altitude(G, E, midpoint(B, G)))
By perpendicular_line_definition on orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G)) we get altitude(A, D, G) == perpendicular_line(orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), parallel_line(midpoint(B, G), Line(D, G)))
By perpendicular_line_definition on orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D) we get altitude(F, B, G) == perpendicular_line(orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), altitude(projection(A, Line(D, G)), A, D))
By perpendicular_line_definition on line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))), median(E, B, G), altitude(D, E, midpoint(B, G)) we get median(E, B, G) == perpendicular_line(line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))), altitude(D, E, midpoint(B, G)))
By perpendicular_line_definition on line_intersection(h, altitude(projection(A, i), A, D)), h, altitude(projection(A, Line(D, G)), A, D) we get h == perpendicular_line(line_intersection(h, altitude(projection(A, i), A, D)), altitude(projection(A, Line(D, G)), A, D))
By perpendicular_line_definition on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), h, altitude(projection(A, Line(D, G)), A, D) we get h == perpendicular_line(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D))
By perpendicular_line_definition on orthocenter(D, F, midpoint(B, G)), altitude(midpoint(B, G), D, F), altitude(projection(A, i), A, B) we get altitude(midpoint(B, G), D, F) == perpendicular_line(orthocenter(D, F, midpoint(B, G)), altitude(projection(A, i), A, B))
By concurrent_sufficient_conditions on Line(I, orthocenter(A, D, G)), Line(I, orthocenter(A, B, D)), Line(G, I) we get concurrent(Line(G, I), Line(I, orthocenter(A, B, D)), Line(I, orthocenter(A, D, G)))
By perpendicular_line_definition on orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), Line(D, G), altitude(midpoint(B, G), D, G) we get Line(D, G) == perpendicular_line(orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), altitude(midpoint(B, G), D, G))
By perpendicular_line_definition on orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), Line(D, G), altitude(E, D, G) we get Line(D, G) == perpendicular_line(orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), altitude(E, D, G))
By perpendicular_line_definition on orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), altitude(midpoint(B, G), D, E), Line(D, E) we get altitude(midpoint(B, G), D, E) == perpendicular_line(orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), Line(D, E))
By perpendicular_line_definition on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), Line(D, E), perpendicular_line(projection(A, Line(D, G)), Line(D, E)) we get Line(D, E) == perpendicular_line(line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), perpendicular_line(projection(A, Line(D, G)), Line(D, E)))
By perpendicular_line_definition on midpoint(B, G), median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G)) we get median(F, B, G) == perpendicular_line(midpoint(B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G)))
By perpendicular_line_definition on line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), Line(D, F), perpendicular_line(projection(A, i), Line(D, F)) we get Line(D, F) == perpendicular_line(line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), perpendicular_line(projection(A, i), Line(D, F)))
By perpendicular_line_definition on F, median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G)) we get median(F, B, G) == perpendicular_line(F, altitude(orthocenter(A, B, D), F, midpoint(B, G)))
By perpendicular_line_definition on line_intersection(parallel_line(F, i), altitude(midpoint(B, G), B, D)), altitude(midpoint(B, G), B, D), parallel_line(midpoint(B, G), i) we get altitude(midpoint(B, G), B, D) == perpendicular_line(line_intersection(parallel_line(F, i), altitude(midpoint(B, G), B, D)), parallel_line(midpoint(B, G), i))
By perpendicular_line_definition on F, median(F, B, G), altitude(B, F, midpoint(B, G)) we get median(F, B, G) == perpendicular_line(F, altitude(B, F, midpoint(B, G)))
By perpendicular_line_definition on projection(A, i), altitude(projection(A, i), A, D), altitude(F, B, G) we get altitude(projection(A, i), A, D) == perpendicular_line(projection(A, i), altitude(F, B, G))
By perpendicular_line_definition on orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), Line(D, G), altitude(E, D, G) we get Line(D, G) == perpendicular_line(orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), altitude(E, D, G))
By perpendicular_line_definition on projection(A, Line(D, G)), altitude(projection(A, Line(D, G)), A, D), altitude(E, B, G) we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(projection(A, Line(D, G)), altitude(E, B, G))
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(E, B, G)), altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D) we get altitude(E, B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(E, B, G)), altitude(projection(A, Line(D, G)), A, D))
By perpendicular_line_definition on line_intersection(f, altitude(projection(A, i), A, B)), f, altitude(projection(A, i), A, B) we get f == perpendicular_line(line_intersection(f, altitude(projection(A, i), A, B)), altitude(projection(A, i), A, B))
By perpendicular_line_definition on midpoint(B, G), median(E, B, G), altitude(G, E, midpoint(B, G)) we get median(E, B, G) == perpendicular_line(midpoint(B, G), altitude(G, E, midpoint(B, G)))
By perpendicular_line_definition on orthocenter(D, F, midpoint(B, G)), altitude(F, A, D), altitude(F, B, G) we get altitude(F, A, D) == perpendicular_line(orthocenter(D, F, midpoint(B, G)), altitude(F, B, G))
By perpendicular_line_definition on orthocenter(D, projection(A, i), orthocenter(A, B, D)), i, altitude(A, B, D) we get i == perpendicular_line(orthocenter(D, projection(A, i), orthocenter(A, B, D)), altitude(A, B, D))
By perpendicular_line_definition on orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D) we get altitude(E, B, G) == perpendicular_line(orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), altitude(projection(A, Line(D, G)), A, D))
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(E, B, G)), Line(B, G), perpendicular_line(projection(A, Line(D, G)), Line(B, G)) we get Line(B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(E, B, G)), perpendicular_line(projection(A, Line(D, G)), Line(B, G)))
By perpendicular_line_definition on line_intersection(altitude(E, D, G), parallel_line(midpoint(B, G), Line(D, G))), altitude(E, D, G), Line(D, G) we get altitude(E, D, G) == perpendicular_line(line_intersection(altitude(E, D, G), parallel_line(midpoint(B, G), Line(D, G))), Line(D, G))
By perpendicular_line_definition on orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), altitude(E, B, G), altitude(projection(A, i), A, D) we get altitude(E, B, G) == perpendicular_line(orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), altitude(projection(A, i), A, D))
By perpendicular_line_definition on line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G)) we get median(F, B, G) == perpendicular_line(line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), altitude(orthocenter(A, B, D), F, midpoint(B, G)))
By perpendicular_line_definition on midpoint(B, G), median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G)) we get median(E, B, G) == perpendicular_line(midpoint(B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G)))
By perpendicular_line_definition on D, Line(D, E), perpendicular_line(projection(A, Line(D, G)), Line(D, E)) we get Line(D, E) == perpendicular_line(D, perpendicular_line(projection(A, Line(D, G)), Line(D, E)))
By line_unique_intersection_v0 on altitude(A, B, D), i, orthocenter(D, projection(A, i), orthocenter(A, B, D)), projection(A, i) we get projection(A, i) == orthocenter(D, projection(A, i), orthocenter(A, B, D))
By line_unique_intersection_v0 on altitude(A, D, G), Line(D, G), projection(A, Line(D, G)), orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))) we get projection(A, Line(D, G)) == orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G)))
By line_unique_intersection_v0 on Line(D, G), altitude(A, D, G), orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))) we get orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))) == orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G)))
By line_unique_intersection_v0 on altitude(A, B, D), i, projection(A, i), orthocenter(B, projection(A, i), orthocenter(A, B, D)) we get projection(A, i) == orthocenter(B, projection(A, i), orthocenter(A, B, D))
By line_unique_intersection_v0 on altitude(A, D, G), Line(D, G), projection(A, Line(D, G)), orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))) we get projection(A, Line(D, G)) == orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G)))
By between_implies_orientation on line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G))), B, midpoint(B, G), G we get orientation(B, midpoint(B, G), line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G)))) == orientation(G, line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G))), midpoint(B, G)) mod 360, orientation(B, G, line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G)))) == orientation(B, midpoint(B, G), line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G)))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D))), G, B, midpoint(B, G) we get orientation(B, G, line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D)))) == orientation(B, midpoint(B, G), line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D)))) mod 360
By between_implies_orientation on line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), G, midpoint(B, G), B we get orientation(B, line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G)) == orientation(G, midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F))) mod 360, orientation(B, line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), G) == orientation(G, midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G), G, B we get orientation(B, line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), G) == orientation(G, midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))), midpoint(B, G), B, G we get orientation(B, G, line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D)))) == orientation(B, midpoint(B, G), line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D)))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), G, B, midpoint(B, G) we get orientation(B, G, line_intersection(Line(D, F), altitude(midpoint(B, G), D, F))) == orientation(B, midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), G, B, midpoint(B, G) we get orientation(B, G, line_intersection(Line(D, E), altitude(midpoint(B, G), D, E))) == orientation(B, midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))), midpoint(B, G), G, B we get orientation(B, line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))), G) == orientation(G, midpoint(B, G), line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G)))) mod 360
By between_implies_orientation on line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), G, midpoint(B, G), B we get orientation(B, line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G)) == orientation(G, midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i))) mod 360, orientation(B, line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), G) == orientation(G, midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i))) mod 360
By between_implies_orientation on line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D))), G, midpoint(B, G), B we get orientation(B, line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D))), midpoint(B, G)) == orientation(G, midpoint(B, G), line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D)))) mod 360, orientation(B, line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D))), G) == orientation(G, midpoint(B, G), line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D)))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))), midpoint(B, G), B, G we get orientation(B, G, line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G)))) == orientation(B, midpoint(B, G), line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G)))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))), B, G, midpoint(B, G) we get orientation(B, line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))), G) == orientation(G, midpoint(B, G), line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D)))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G), B, G we get orientation(B, G, line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i))) == orientation(B, midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i))) mod 360
By between_implies_orientation on line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), G, midpoint(B, G), B we get orientation(B, line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G)) == orientation(G, midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G)))) mod 360, orientation(B, line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), G) == orientation(G, midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G)))) mod 360
By between_implies_orientation on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), B, midpoint(B, G), G we get orientation(B, midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E))) == orientation(G, line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G)) mod 360, orientation(B, G, line_intersection(Line(D, E), altitude(midpoint(B, G), D, E))) == orientation(B, midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G), B, G we get orientation(B, G, line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G)))) == orientation(B, midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G)))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), midpoint(B, G), B, G we get orientation(B, G, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G)))) == orientation(B, midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G)))) mod 360
By between_implies_orientation on line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), B, midpoint(B, G), G we get orientation(B, midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F))) == orientation(G, line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G)) mod 360, orientation(B, G, line_intersection(Line(D, F), altitude(midpoint(B, G), D, F))) == orientation(B, midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F))) mod 360
By between_implies_orientation on line_intersection(altitude(A, B, D), parallel_line(F, i)), G, midpoint(B, G), B we get orientation(B, line_intersection(altitude(A, B, D), parallel_line(F, i)), midpoint(B, G)) == orientation(G, midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(F, i))) mod 360, orientation(B, line_intersection(altitude(A, B, D), parallel_line(F, i)), G) == orientation(G, midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(F, i))) mod 360
By between_implies_orientation on line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G))), G, midpoint(B, G), B we get orientation(B, line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G))), midpoint(B, G)) == orientation(G, midpoint(B, G), line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G)))) mod 360, orientation(B, line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G))), G) == orientation(G, midpoint(B, G), line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G)))) mod 360
By between_implies_orientation on line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), B, midpoint(B, G), G we get orientation(B, midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i))) == orientation(G, line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G)) mod 360, orientation(B, G, line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i))) == orientation(B, midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(altitude(A, B, D), parallel_line(F, i)), midpoint(B, G), B, G we get orientation(B, G, line_intersection(altitude(A, B, D), parallel_line(F, i))) == orientation(B, midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(F, i))) mod 360
By between_implies_orientation on line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))), B, midpoint(B, G), G we get orientation(B, midpoint(B, G), line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D)))) == orientation(G, line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))), midpoint(B, G)) mod 360, orientation(B, G, line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D)))) == orientation(B, midpoint(B, G), line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D)))) mod 360
By between_implies_orientation on line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))), B, midpoint(B, G), G we get orientation(B, midpoint(B, G), line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G)))) == orientation(G, line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))), midpoint(B, G)) mod 360, orientation(B, G, line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G)))) == orientation(B, midpoint(B, G), line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G)))) mod 360
By between_implies_orientation on line_intersection(altitude(A, B, D), parallel_line(F, i)), B, midpoint(B, G), G we get orientation(B, midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(F, i))) == orientation(G, line_intersection(altitude(A, B, D), parallel_line(F, i)), midpoint(B, G)) mod 360, orientation(B, G, line_intersection(altitude(A, B, D), parallel_line(F, i))) == orientation(B, midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(F, i))) mod 360
By between_implies_orientation on line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))), G, midpoint(B, G), B we get orientation(B, line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))), midpoint(B, G)) == orientation(G, midpoint(B, G), line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G)))) mod 360, orientation(B, line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))), G) == orientation(G, midpoint(B, G), line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G)))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), B, G, midpoint(B, G) we get orientation(B, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), G) == orientation(G, midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G)))) mod 360
By between_implies_orientation on line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), G, midpoint(B, G), B we get orientation(B, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), midpoint(B, G)) == orientation(G, midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G)))) mod 360, orientation(B, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), G) == orientation(G, midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G)))) mod 360
By between_implies_orientation on line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), B, midpoint(B, G), G we get orientation(B, midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G)))) == orientation(G, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), midpoint(B, G)) mod 360, orientation(B, G, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G)))) == orientation(B, midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G)))) mod 360
By between_implies_orientation on line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))), G, midpoint(B, G), B we get orientation(B, line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))), midpoint(B, G)) == orientation(G, midpoint(B, G), line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D)))) mod 360, orientation(B, line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))), G) == orientation(G, midpoint(B, G), line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D)))) mod 360
By between_implies_orientation on line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), B, midpoint(B, G), G we get orientation(B, midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G)))) == orientation(G, line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G)) mod 360, orientation(B, G, line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G)))) == orientation(B, midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G)))) mod 360
By between_implies_orientation on line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D))), B, midpoint(B, G), G we get orientation(B, midpoint(B, G), line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D)))) == orientation(G, line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D))), midpoint(B, G)) mod 360, orientation(B, G, line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D)))) == orientation(B, midpoint(B, G), line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D)))) mod 360
By between_implies_orientation on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), G, midpoint(B, G), B we get orientation(B, line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G)) == orientation(G, midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E))) mod 360, orientation(B, line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), G) == orientation(G, midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E))) mod 360
By parallel_line_definition on G, Line(B, G), altitude(projection(A, Line(D, G)), A, D) we get Line(B, G) == parallel_line(G, altitude(projection(A, Line(D, G)), A, D))
By parallel_line_definition on orthocenter(E, G, midpoint(B, G)), altitude(E, B, G), h we get altitude(E, B, G) == parallel_line(orthocenter(E, G, midpoint(B, G)), h)
By parallel_line_definition on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), altitude(projection(A, Line(D, G)), A, C), Line(D, E) we get altitude(projection(A, Line(D, G)), A, C) == parallel_line(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), Line(D, E))
By parallel_line_definition on orthocenter(D, E, midpoint(B, G)), altitude(E, A, D), altitude(projection(A, i), A, D) we get altitude(E, A, D) == parallel_line(orthocenter(D, E, midpoint(B, G)), altitude(projection(A, i), A, D))
By parallel_line_definition on line_intersection(altitude(E, D, G), parallel_line(midpoint(B, G), Line(D, G))), parallel_line(midpoint(B, G), Line(D, G)), parallel_line(E, Line(D, G)) we get parallel_line(midpoint(B, G), Line(D, G)) == parallel_line(line_intersection(altitude(E, D, G), parallel_line(midpoint(B, G), Line(D, G))), parallel_line(E, Line(D, G)))
By parallel_line_definition on line_intersection(h, altitude(projection(A, i), A, D)), h, altitude(F, B, G) we get h == parallel_line(line_intersection(h, altitude(projection(A, i), A, D)), altitude(F, B, G))
By parallel_line_definition on G, Line(B, G), altitude(projection(A, i), A, D) we get Line(B, G) == parallel_line(G, altitude(projection(A, i), A, D))
By parallel_line_definition on orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), Line(D, G), parallel_line(midpoint(B, G), Line(D, G)) we get Line(D, G) == parallel_line(orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), parallel_line(midpoint(B, G), Line(D, G)))
By parallel_line_definition on line_intersection(altitude(F, B, D), parallel_line(midpoint(B, G), i)), parallel_line(midpoint(B, G), i), parallel_line(F, i) we get parallel_line(midpoint(B, G), i) == parallel_line(line_intersection(altitude(F, B, D), parallel_line(midpoint(B, G), i)), parallel_line(F, i))
By parallel_line_definition on projection(F, h), altitude(F, A, D), altitude(projection(A, Line(D, G)), A, D) we get altitude(F, A, D) == parallel_line(projection(F, h), altitude(projection(A, Line(D, G)), A, D))
By parallel_line_definition on projection(A, Line(D, G)), altitude(projection(A, Line(D, G)), A, D), altitude(E, A, D) we get altitude(projection(A, Line(D, G)), A, D) == parallel_line(projection(A, Line(D, G)), altitude(E, A, D))
By parallel_line_definition on orthocenter(A, F, midpoint(B, G)), altitude(F, A, D), altitude(projection(A, i), A, D) we get altitude(F, A, D) == parallel_line(orthocenter(A, F, midpoint(B, G)), altitude(projection(A, i), A, D))
By parallel_line_definition on line_intersection(h, altitude(projection(A, i), A, D)), h, altitude(E, B, G) we get h == parallel_line(line_intersection(h, altitude(projection(A, i), A, D)), altitude(E, B, G))
By parallel_line_definition on orthocenter(B, F, midpoint(B, G)), altitude(F, B, G), altitude(E, B, G) we get altitude(F, B, G) == parallel_line(orthocenter(B, F, midpoint(B, G)), altitude(E, B, G))
By parallel_line_definition on orthocenter(D, F, midpoint(B, G)), altitude(F, A, D), Line(B, G) we get altitude(F, A, D) == parallel_line(orthocenter(D, F, midpoint(B, G)), Line(B, G))
By parallel_line_definition on midpoint(B, G), Line(B, G), altitude(projection(A, i), A, D) we get Line(B, G) == parallel_line(midpoint(B, G), altitude(projection(A, i), A, D))
By parallel_line_definition on F, altitude(F, A, D), altitude(projection(A, i), A, D) we get altitude(F, A, D) == parallel_line(F, altitude(projection(A, i), A, D))
By parallel_line_definition on orthocenter(E, G, midpoint(B, G)), altitude(midpoint(B, G), A, C), Line(D, E) we get altitude(midpoint(B, G), A, C) == parallel_line(orthocenter(E, G, midpoint(B, G)), Line(D, E))
By parallel_line_definition on line_intersection(Line(B, G), altitude(E, B, G)), Line(B, G), altitude(projection(A, i), A, D) we get Line(B, G) == parallel_line(line_intersection(Line(B, G), altitude(E, B, G)), altitude(projection(A, i), A, D))
By parallel_line_definition on orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), altitude(A, D, G), altitude(midpoint(B, G), D, G) we get altitude(A, D, G) == parallel_line(orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), altitude(midpoint(B, G), D, G))
By parallel_line_definition on line_intersection(Line(B, G), altitude(E, B, G)), Line(B, G), altitude(projection(A, Line(D, G)), A, D) we get Line(B, G) == parallel_line(line_intersection(Line(B, G), altitude(E, B, G)), altitude(projection(A, Line(D, G)), A, D))
By parallel_line_definition on orthocenter(A, B, D), Line(B, G), altitude(projection(A, Line(D, G)), A, D) we get Line(B, G) == parallel_line(orthocenter(A, B, D), altitude(projection(A, Line(D, G)), A, D))
By parallel_line_definition on projection(A, Line(D, G)), altitude(projection(A, Line(D, G)), A, C), altitude(midpoint(B, G), A, C) we get altitude(projection(A, Line(D, G)), A, C) == parallel_line(projection(A, Line(D, G)), altitude(midpoint(B, G), A, C))
By parallel_line_definition on line_intersection(parallel_line(F, i), altitude(midpoint(B, G), B, D)), parallel_line(F, i), parallel_line(midpoint(B, G), i) we get parallel_line(F, i) == parallel_line(line_intersection(parallel_line(F, i), altitude(midpoint(B, G), B, D)), parallel_line(midpoint(B, G), i))
By parallel_line_definition on orthocenter(D, projection(A, i), orthocenter(A, B, D)), altitude(A, B, D), altitude(F, B, D) we get altitude(A, B, D) == parallel_line(orthocenter(D, projection(A, i), orthocenter(A, B, D)), altitude(F, B, D))
By parallel_line_definition on orthocenter(A, F, midpoint(B, G)), altitude(midpoint(B, G), A, B), altitude(projection(A, i), A, B) we get altitude(midpoint(B, G), A, B) == parallel_line(orthocenter(A, F, midpoint(B, G)), altitude(projection(A, i), A, B))
By parallel_line_definition on orthocenter(D, projection(A, i), orthocenter(A, B, D)), altitude(A, B, D), altitude(midpoint(B, G), B, D) we get altitude(A, B, D) == parallel_line(orthocenter(D, projection(A, i), orthocenter(A, B, D)), altitude(midpoint(B, G), B, D))
By parallel_line_definition on orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), altitude(A, D, G), altitude(E, D, G) we get altitude(A, D, G) == parallel_line(orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), altitude(E, D, G))
By parallel_line_definition on line_intersection(altitude(E, A, D), altitude(F, B, G)), altitude(E, A, D), altitude(F, A, D) we get altitude(E, A, D) == parallel_line(line_intersection(altitude(E, A, D), altitude(F, B, G)), altitude(F, A, D))
By parallel_line_definition on orthocenter(D, E, midpoint(B, G)), altitude(E, A, D), altitude(projection(A, Line(D, G)), A, D) we get altitude(E, A, D) == parallel_line(orthocenter(D, E, midpoint(B, G)), altitude(projection(A, Line(D, G)), A, D))
By parallel_line_definition on projection(midpoint(B, G), g), altitude(midpoint(B, G), A, C), altitude(projection(A, Line(D, G)), A, C) we get altitude(midpoint(B, G), A, C) == parallel_line(projection(midpoint(B, G), g), altitude(projection(A, Line(D, G)), A, C))
By parallel_line_definition on midpoint(B, G), altitude(midpoint(B, G), A, C), altitude(projection(A, Line(D, G)), A, C) we get altitude(midpoint(B, G), A, C) == parallel_line(midpoint(B, G), altitude(projection(A, Line(D, G)), A, C))
By parallel_line_definition on line_intersection(parallel_line(E, Line(D, G)), altitude(midpoint(B, G), D, G)), parallel_line(E, Line(D, G)), Line(D, G) we get parallel_line(E, Line(D, G)) == parallel_line(line_intersection(parallel_line(E, Line(D, G)), altitude(midpoint(B, G), D, G)), Line(D, G))
By parallel_line_definition on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), Line(D, E), altitude(projection(A, Line(D, G)), A, C) we get Line(D, E) == parallel_line(line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), altitude(projection(A, Line(D, G)), A, C))
By parallel_line_definition on line_intersection(altitude(E, B, G), altitude(F, A, D)), altitude(E, B, G), altitude(F, B, G) we get altitude(E, B, G) == parallel_line(line_intersection(altitude(E, B, G), altitude(F, A, D)), altitude(F, B, G))
By parallel_line_definition on line_intersection(h, altitude(projection(A, i), A, D)), altitude(projection(A, i), A, D), Line(B, G) we get altitude(projection(A, i), A, D) == parallel_line(line_intersection(h, altitude(projection(A, i), A, D)), Line(B, G))
By parallel_line_definition on orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), Line(D, G), parallel_line(E, Line(D, G)) we get Line(D, G) == parallel_line(orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), parallel_line(E, Line(D, G)))
By parallel_line_definition on orthocenter(B, F, midpoint(B, G)), altitude(F, B, G), h we get altitude(F, B, G) == parallel_line(orthocenter(B, F, midpoint(B, G)), h)
By parallel_line_definition on B, Line(B, G), altitude(projection(A, i), A, D) we get Line(B, G) == parallel_line(B, altitude(projection(A, i), A, D))
By parallel_line_definition on orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), altitude(A, D, G), altitude(E, D, G) we get altitude(A, D, G) == parallel_line(orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), altitude(E, D, G))
By parallel_line_definition on line_intersection(altitude(E, D, G), parallel_line(midpoint(B, G), Line(D, G))), altitude(E, D, G), altitude(A, D, G) we get altitude(E, D, G) == parallel_line(line_intersection(altitude(E, D, G), parallel_line(midpoint(B, G), Line(D, G))), altitude(A, D, G))
By parallel_line_definition on line_intersection(parallel_line(E, Line(D, G)), altitude(midpoint(B, G), D, G)), altitude(midpoint(B, G), D, G), altitude(A, D, G) we get altitude(midpoint(B, G), D, G) == parallel_line(line_intersection(parallel_line(E, Line(D, G)), altitude(midpoint(B, G), D, G)), altitude(A, D, G))
By parallel_line_definition on line_intersection(parallel_line(F, i), altitude(midpoint(B, G), B, D)), altitude(midpoint(B, G), B, D), altitude(F, B, D) we get altitude(midpoint(B, G), B, D) == parallel_line(line_intersection(parallel_line(F, i), altitude(midpoint(B, G), B, D)), altitude(F, B, D))
By parallel_line_definition on orthocenter(D, E, midpoint(B, G)), altitude(E, A, D), altitude(F, A, D) we get altitude(E, A, D) == parallel_line(orthocenter(D, E, midpoint(B, G)), altitude(F, A, D))
By parallel_line_definition on line_intersection(altitude(E, A, D), altitude(F, B, G)), altitude(F, B, G), h we get altitude(F, B, G) == parallel_line(line_intersection(altitude(E, A, D), altitude(F, B, G)), h)
By parallel_line_definition on orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), altitude(midpoint(B, G), D, F), f we get altitude(midpoint(B, G), D, F) == parallel_line(orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), f)
By parallel_line_definition on orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), altitude(F, B, G), h we get altitude(F, B, G) == parallel_line(orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), h)
By parallel_line_definition on orthocenter(E, G, midpoint(B, G)), altitude(E, B, G), altitude(F, B, G) we get altitude(E, B, G) == parallel_line(orthocenter(E, G, midpoint(B, G)), altitude(F, B, G))
By parallel_line_definition on projection(F, h), altitude(F, A, D), altitude(projection(A, i), A, D) we get altitude(F, A, D) == parallel_line(projection(F, h), altitude(projection(A, i), A, D))
By parallel_line_definition on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), h, altitude(F, B, G) we get h == parallel_line(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), altitude(F, B, G))
By parallel_line_definition on line_intersection(Line(B, G), altitude(F, B, G)), Line(B, G), altitude(projection(A, i), A, D) we get Line(B, G) == parallel_line(line_intersection(Line(B, G), altitude(F, B, G)), altitude(projection(A, i), A, D))
By parallel_line_definition on orthocenter(D, projection(A, i), orthocenter(A, B, D)), i, parallel_line(midpoint(B, G), i) we get i == parallel_line(orthocenter(D, projection(A, i), orthocenter(A, B, D)), parallel_line(midpoint(B, G), i))
By parallel_line_definition on projection(A, Line(D, G)), altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, i), A, D) we get altitude(projection(A, Line(D, G)), A, D) == parallel_line(projection(A, Line(D, G)), altitude(projection(A, i), A, D))
By parallel_line_definition on orthocenter(B, projection(A, i), orthocenter(A, B, D)), i, parallel_line(F, i) we get i == parallel_line(orthocenter(B, projection(A, i), orthocenter(A, B, D)), parallel_line(F, i))
By parallel_line_definition on line_intersection(altitude(E, B, G), altitude(F, A, D)), altitude(E, B, G), h we get altitude(E, B, G) == parallel_line(line_intersection(altitude(E, B, G), altitude(F, A, D)), h)
By parallel_line_definition on E, altitude(E, A, D), altitude(projection(A, i), A, D) we get altitude(E, A, D) == parallel_line(E, altitude(projection(A, i), A, D))
By parallel_line_definition on orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), altitude(E, B, G), h we get altitude(E, B, G) == parallel_line(orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), h)
By parallel_line_definition on projection(E, h), altitude(E, A, D), altitude(projection(A, Line(D, G)), A, D) we get altitude(E, A, D) == parallel_line(projection(E, h), altitude(projection(A, Line(D, G)), A, D))
By parallel_line_definition on D, Line(D, F), altitude(projection(A, i), A, B) we get Line(D, F) == parallel_line(D, altitude(projection(A, i), A, B))
By parallel_line_definition on F, altitude(F, A, D), altitude(projection(A, Line(D, G)), A, D) we get altitude(F, A, D) == parallel_line(F, altitude(projection(A, Line(D, G)), A, D))
By parallel_line_definition on projection(midpoint(B, G), f), altitude(midpoint(B, G), A, B), altitude(projection(A, i), A, B) we get altitude(midpoint(B, G), A, B) == parallel_line(projection(midpoint(B, G), f), altitude(projection(A, i), A, B))
By parallel_line_definition on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D), Line(B, G) we get altitude(projection(A, Line(D, G)), A, D) == parallel_line(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), Line(B, G))
By parallel_line_definition on line_intersection(f, altitude(projection(A, i), A, B)), altitude(projection(A, i), A, B), altitude(midpoint(B, G), A, B) we get altitude(projection(A, i), A, B) == parallel_line(line_intersection(f, altitude(projection(A, i), A, B)), altitude(midpoint(B, G), A, B))
By parallel_line_definition on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), g, altitude(midpoint(B, G), D, E) we get g == parallel_line(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), altitude(midpoint(B, G), D, E))
By parallel_line_definition on orthocenter(B, projection(A, i), orthocenter(A, B, D)), altitude(A, B, D), altitude(midpoint(B, G), B, D) we get altitude(A, B, D) == parallel_line(orthocenter(B, projection(A, i), orthocenter(A, B, D)), altitude(midpoint(B, G), B, D))
By parallel_line_definition on orthocenter(A, D, G), Line(B, G), altitude(projection(A, Line(D, G)), A, D) we get Line(B, G) == parallel_line(orthocenter(A, D, G), altitude(projection(A, Line(D, G)), A, D))
By parallel_line_definition on line_intersection(altitude(E, A, D), altitude(F, B, G)), altitude(F, B, G), altitude(E, B, G) we get altitude(F, B, G) == parallel_line(line_intersection(altitude(E, A, D), altitude(F, B, G)), altitude(E, B, G))
By parallel_line_definition on orthocenter(A, B, D), Line(D, F), altitude(projection(A, i), A, B) we get Line(D, F) == parallel_line(orthocenter(A, B, D), altitude(projection(A, i), A, B))
By parallel_line_definition on projection(A, i), altitude(projection(A, i), A, B), altitude(midpoint(B, G), A, B) we get altitude(projection(A, i), A, B) == parallel_line(projection(A, i), altitude(midpoint(B, G), A, B))
By parallel_line_definition on line_intersection(altitude(F, B, D), parallel_line(midpoint(B, G), i)), altitude(F, B, D), altitude(A, B, D) we get altitude(F, B, D) == parallel_line(line_intersection(altitude(F, B, D), parallel_line(midpoint(B, G), i)), altitude(A, B, D))
By parallel_line_definition on orthocenter(A, D, G), Line(D, E), altitude(projection(A, Line(D, G)), A, C) we get Line(D, E) == parallel_line(orthocenter(A, D, G), altitude(projection(A, Line(D, G)), A, C))
By parallel_line_definition on orthocenter(D, F, midpoint(B, G)), altitude(F, A, D), altitude(projection(A, i), A, D) we get altitude(F, A, D) == parallel_line(orthocenter(D, F, midpoint(B, G)), altitude(projection(A, i), A, D))
By parallel_line_definition on line_intersection(f, altitude(projection(A, i), A, B)), f, altitude(midpoint(B, G), D, F) we get f == parallel_line(line_intersection(f, altitude(projection(A, i), A, B)), altitude(midpoint(B, G), D, F))
By parallel_line_definition on E, Line(D, E), altitude(projection(A, Line(D, G)), A, C) we get Line(D, E) == parallel_line(E, altitude(projection(A, Line(D, G)), A, C))
By parallel_line_definition on orthocenter(B, F, midpoint(B, G)), altitude(midpoint(B, G), A, B), altitude(projection(A, i), A, B) we get altitude(midpoint(B, G), A, B) == parallel_line(orthocenter(B, F, midpoint(B, G)), altitude(projection(A, i), A, B))
By parallel_line_definition on orthocenter(B, projection(A, i), orthocenter(A, B, D)), altitude(A, B, D), altitude(F, B, D) we get altitude(A, B, D) == parallel_line(orthocenter(B, projection(A, i), orthocenter(A, B, D)), altitude(F, B, D))
By parallel_line_definition on line_intersection(f, altitude(projection(A, i), A, B)), altitude(projection(A, i), A, B), Line(D, F) we get altitude(projection(A, i), A, B) == parallel_line(line_intersection(f, altitude(projection(A, i), A, B)), Line(D, F))
By parallel_line_definition on orthocenter(A, D, G), Line(B, G), altitude(projection(A, i), A, D) we get Line(B, G) == parallel_line(orthocenter(A, D, G), altitude(projection(A, i), A, D))
By parallel_line_definition on midpoint(B, G), altitude(midpoint(B, G), A, B), altitude(projection(A, i), A, B) we get altitude(midpoint(B, G), A, B) == parallel_line(midpoint(B, G), altitude(projection(A, i), A, B))
By parallel_line_definition on line_intersection(parallel_line(E, Line(D, G)), altitude(midpoint(B, G), D, G)), altitude(midpoint(B, G), D, G), altitude(E, D, G) we get altitude(midpoint(B, G), D, G) == parallel_line(line_intersection(parallel_line(E, Line(D, G)), altitude(midpoint(B, G), D, G)), altitude(E, D, G))
By parallel_line_definition on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D), altitude(F, A, D) we get altitude(projection(A, Line(D, G)), A, D) == parallel_line(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), altitude(F, A, D))
By parallel_line_definition on orthocenter(A, E, midpoint(B, G)), altitude(midpoint(B, G), A, C), altitude(projection(A, Line(D, G)), A, C) we get altitude(midpoint(B, G), A, C) == parallel_line(orthocenter(A, E, midpoint(B, G)), altitude(projection(A, Line(D, G)), A, C))
By parallel_line_definition on projection(A, Line(D, G)), altitude(projection(A, Line(D, G)), A, D), Line(B, G) we get altitude(projection(A, Line(D, G)), A, D) == parallel_line(projection(A, Line(D, G)), Line(B, G))
By parallel_line_definition on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, i), A, D) we get altitude(projection(A, Line(D, G)), A, D) == parallel_line(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, i), A, D))
By parallel_line_definition on line_intersection(altitude(E, D, G), parallel_line(midpoint(B, G), Line(D, G))), parallel_line(midpoint(B, G), Line(D, G)), Line(D, G) we get parallel_line(midpoint(B, G), Line(D, G)) == parallel_line(line_intersection(altitude(E, D, G), parallel_line(midpoint(B, G), Line(D, G))), Line(D, G))
By parallel_line_definition on line_intersection(h, altitude(projection(A, i), A, D)), altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), A, D) we get altitude(projection(A, i), A, D) == parallel_line(line_intersection(h, altitude(projection(A, i), A, D)), altitude(projection(A, Line(D, G)), A, D))
By parallel_line_definition on orthocenter(B, F, midpoint(B, G)), altitude(midpoint(B, G), A, B), Line(D, F) we get altitude(midpoint(B, G), A, B) == parallel_line(orthocenter(B, F, midpoint(B, G)), Line(D, F))
By parallel_line_definition on projection(A, Line(D, G)), altitude(projection(A, Line(D, G)), A, C), Line(D, E) we get altitude(projection(A, Line(D, G)), A, C) == parallel_line(projection(A, Line(D, G)), Line(D, E))
By parallel_line_definition on orthocenter(D, E, midpoint(B, G)), altitude(midpoint(B, G), D, E), g we get altitude(midpoint(B, G), D, E) == parallel_line(orthocenter(D, E, midpoint(B, G)), g)
By parallel_line_definition on projection(A, i), altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), A, D) we get altitude(projection(A, i), A, D) == parallel_line(projection(A, i), altitude(projection(A, Line(D, G)), A, D))
By parallel_line_definition on line_intersection(parallel_line(E, Line(D, G)), altitude(midpoint(B, G), D, G)), parallel_line(E, Line(D, G)), parallel_line(midpoint(B, G), Line(D, G)) we get parallel_line(E, Line(D, G)) == parallel_line(line_intersection(parallel_line(E, Line(D, G)), altitude(midpoint(B, G), D, G)), parallel_line(midpoint(B, G), Line(D, G)))
By parallel_line_definition on orthocenter(D, F, midpoint(B, G)), altitude(midpoint(B, G), D, F), f we get altitude(midpoint(B, G), D, F) == parallel_line(orthocenter(D, F, midpoint(B, G)), f)
By parallel_line_definition on line_intersection(altitude(E, A, D), altitude(F, B, G)), altitude(E, A, D), altitude(projection(A, i), A, D) we get altitude(E, A, D) == parallel_line(line_intersection(altitude(E, A, D), altitude(F, B, G)), altitude(projection(A, i), A, D))
By parallel_line_definition on line_intersection(h, altitude(projection(A, i), A, D)), altitude(projection(A, i), A, D), altitude(E, A, D) we get altitude(projection(A, i), A, D) == parallel_line(line_intersection(h, altitude(projection(A, i), A, D)), altitude(E, A, D))
By parallel_line_definition on orthocenter(B, projection(A, i), orthocenter(A, B, D)), i, parallel_line(midpoint(B, G), i) we get i == parallel_line(orthocenter(B, projection(A, i), orthocenter(A, B, D)), parallel_line(midpoint(B, G), i))
By parallel_line_definition on orthocenter(A, E, midpoint(B, G)), altitude(E, A, D), altitude(projection(A, i), A, D) we get altitude(E, A, D) == parallel_line(orthocenter(A, E, midpoint(B, G)), altitude(projection(A, i), A, D))
By parallel_line_definition on F, Line(D, F), altitude(projection(A, i), A, B) we get Line(D, F) == parallel_line(F, altitude(projection(A, i), A, B))
By parallel_line_definition on line_intersection(altitude(E, A, D), altitude(F, B, G)), altitude(E, A, D), Line(B, G) we get altitude(E, A, D) == parallel_line(line_intersection(altitude(E, A, D), altitude(F, B, G)), Line(B, G))
By parallel_line_definition on line_intersection(h, altitude(projection(A, i), A, D)), altitude(projection(A, i), A, D), altitude(F, A, D) we get altitude(projection(A, i), A, D) == parallel_line(line_intersection(h, altitude(projection(A, i), A, D)), altitude(F, A, D))
By parallel_line_definition on projection(E, h), altitude(E, A, D), altitude(projection(A, i), A, D) we get altitude(E, A, D) == parallel_line(projection(E, h), altitude(projection(A, i), A, D))
By parallel_line_definition on midpoint(B, G), Line(B, G), altitude(projection(A, Line(D, G)), A, D) we get Line(B, G) == parallel_line(midpoint(B, G), altitude(projection(A, Line(D, G)), A, D))
By parallel_line_definition on line_intersection(altitude(E, B, G), altitude(F, A, D)), altitude(F, A, D), altitude(projection(A, i), A, D) we get altitude(F, A, D) == parallel_line(line_intersection(altitude(E, B, G), altitude(F, A, D)), altitude(projection(A, i), A, D))
By parallel_line_definition on line_intersection(altitude(E, B, G), altitude(F, A, D)), altitude(F, A, D), altitude(E, A, D) we get altitude(F, A, D) == parallel_line(line_intersection(altitude(E, B, G), altitude(F, A, D)), altitude(E, A, D))
By parallel_line_definition on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D), altitude(E, A, D) we get altitude(projection(A, Line(D, G)), A, D) == parallel_line(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), altitude(E, A, D))
By parallel_line_definition on line_intersection(Line(B, G), altitude(F, B, G)), Line(B, G), altitude(projection(A, Line(D, G)), A, D) we get Line(B, G) == parallel_line(line_intersection(Line(B, G), altitude(F, B, G)), altitude(projection(A, Line(D, G)), A, D))
By parallel_line_definition on B, Line(B, G), altitude(projection(A, Line(D, G)), A, D) we get Line(B, G) == parallel_line(B, altitude(projection(A, Line(D, G)), A, D))
By parallel_line_definition on orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), altitude(A, D, G), altitude(midpoint(B, G), D, G) we get altitude(A, D, G) == parallel_line(orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), altitude(midpoint(B, G), D, G))
By parallel_line_definition on orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), altitude(midpoint(B, G), D, E), g we get altitude(midpoint(B, G), D, E) == parallel_line(orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), g)
By parallel_line_definition on projection(A, i), altitude(projection(A, i), A, D), altitude(F, A, D) we get altitude(projection(A, i), A, D) == parallel_line(projection(A, i), altitude(F, A, D))
By parallel_line_definition on line_intersection(altitude(E, B, G), altitude(F, A, D)), altitude(F, A, D), altitude(projection(A, Line(D, G)), A, D) we get altitude(F, A, D) == parallel_line(line_intersection(altitude(E, B, G), altitude(F, A, D)), altitude(projection(A, Line(D, G)), A, D))
By parallel_line_definition on orthocenter(D, projection(A, i), orthocenter(A, B, D)), i, parallel_line(F, i) we get i == parallel_line(orthocenter(D, projection(A, i), orthocenter(A, B, D)), parallel_line(F, i))
By parallel_line_definition on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), altitude(projection(A, Line(D, G)), A, C), altitude(midpoint(B, G), A, C) we get altitude(projection(A, Line(D, G)), A, C) == parallel_line(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), altitude(midpoint(B, G), A, C))
By parallel_line_definition on orthocenter(A, F, midpoint(B, G)), altitude(F, A, D), altitude(projection(A, Line(D, G)), A, D) we get altitude(F, A, D) == parallel_line(orthocenter(A, F, midpoint(B, G)), altitude(projection(A, Line(D, G)), A, D))
By parallel_line_definition on line_intersection(parallel_line(F, i), altitude(midpoint(B, G), B, D)), parallel_line(F, i), i we get parallel_line(F, i) == parallel_line(line_intersection(parallel_line(F, i), altitude(midpoint(B, G), B, D)), i)
By parallel_line_definition on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), h, altitude(E, B, G) we get h == parallel_line(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), altitude(E, B, G))
By parallel_line_definition on orthocenter(E, G, midpoint(B, G)), altitude(midpoint(B, G), A, C), altitude(projection(A, Line(D, G)), A, C) we get altitude(midpoint(B, G), A, C) == parallel_line(orthocenter(E, G, midpoint(B, G)), altitude(projection(A, Line(D, G)), A, C))
By parallel_line_definition on orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), altitude(F, B, G), altitude(E, B, G) we get altitude(F, B, G) == parallel_line(orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), altitude(E, B, G))
By parallel_line_definition on orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), Line(D, G), parallel_line(midpoint(B, G), Line(D, G)) we get Line(D, G) == parallel_line(orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), parallel_line(midpoint(B, G), Line(D, G)))
By parallel_line_definition on orthocenter(D, F, midpoint(B, G)), altitude(F, A, D), altitude(E, A, D) we get altitude(F, A, D) == parallel_line(orthocenter(D, F, midpoint(B, G)), altitude(E, A, D))
By parallel_line_definition on orthocenter(D, E, midpoint(B, G)), altitude(E, A, D), Line(B, G) we get altitude(E, A, D) == parallel_line(orthocenter(D, E, midpoint(B, G)), Line(B, G))
By parallel_line_definition on orthocenter(A, E, midpoint(B, G)), altitude(E, A, D), altitude(projection(A, Line(D, G)), A, D) we get altitude(E, A, D) == parallel_line(orthocenter(A, E, midpoint(B, G)), altitude(projection(A, Line(D, G)), A, D))
By parallel_line_definition on orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), altitude(E, B, G), altitude(F, B, G) we get altitude(E, B, G) == parallel_line(orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), altitude(F, B, G))
By parallel_line_definition on line_intersection(altitude(E, B, G), altitude(F, A, D)), altitude(F, A, D), Line(B, G) we get altitude(F, A, D) == parallel_line(line_intersection(altitude(E, B, G), altitude(F, A, D)), Line(B, G))
By parallel_line_definition on projection(A, i), altitude(projection(A, i), A, B), Line(D, F) we get altitude(projection(A, i), A, B) == parallel_line(projection(A, i), Line(D, F))
By parallel_line_definition on line_intersection(altitude(E, A, D), altitude(F, B, G)), altitude(E, A, D), altitude(projection(A, Line(D, G)), A, D) we get altitude(E, A, D) == parallel_line(line_intersection(altitude(E, A, D), altitude(F, B, G)), altitude(projection(A, Line(D, G)), A, D))
By parallel_line_definition on line_intersection(altitude(F, B, D), parallel_line(midpoint(B, G), i)), parallel_line(midpoint(B, G), i), i we get parallel_line(midpoint(B, G), i) == parallel_line(line_intersection(altitude(F, B, D), parallel_line(midpoint(B, G), i)), i)
By parallel_line_definition on projection(A, i), altitude(projection(A, i), A, D), Line(B, G) we get altitude(projection(A, i), A, D) == parallel_line(projection(A, i), Line(B, G))
By parallel_line_definition on projection(A, Line(D, G)), altitude(projection(A, Line(D, G)), A, D), altitude(F, A, D) we get altitude(projection(A, Line(D, G)), A, D) == parallel_line(projection(A, Line(D, G)), altitude(F, A, D))
By parallel_line_definition on line_intersection(parallel_line(F, i), altitude(midpoint(B, G), B, D)), altitude(midpoint(B, G), B, D), altitude(A, B, D) we get altitude(midpoint(B, G), B, D) == parallel_line(line_intersection(parallel_line(F, i), altitude(midpoint(B, G), B, D)), altitude(A, B, D))
By parallel_line_definition on orthocenter(D, F, midpoint(B, G)), altitude(F, A, D), altitude(projection(A, Line(D, G)), A, D) we get altitude(F, A, D) == parallel_line(orthocenter(D, F, midpoint(B, G)), altitude(projection(A, Line(D, G)), A, D))
By parallel_line_definition on D, Line(D, E), altitude(projection(A, Line(D, G)), A, C) we get Line(D, E) == parallel_line(D, altitude(projection(A, Line(D, G)), A, C))
By parallel_line_definition on E, altitude(E, A, D), altitude(projection(A, Line(D, G)), A, D) we get altitude(E, A, D) == parallel_line(E, altitude(projection(A, Line(D, G)), A, D))
By parallel_line_definition on orthocenter(A, B, D), Line(B, G), altitude(projection(A, i), A, D) we get Line(B, G) == parallel_line(orthocenter(A, B, D), altitude(projection(A, i), A, D))
By parallel_line_definition on line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), Line(D, F), altitude(projection(A, i), A, B) we get Line(D, F) == parallel_line(line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), altitude(projection(A, i), A, B))
By parallel_line_definition on line_intersection(altitude(E, D, G), parallel_line(midpoint(B, G), Line(D, G))), altitude(E, D, G), altitude(midpoint(B, G), D, G) we get altitude(E, D, G) == parallel_line(line_intersection(altitude(E, D, G), parallel_line(midpoint(B, G), Line(D, G))), altitude(midpoint(B, G), D, G))
By parallel_line_definition on projection(A, i), altitude(projection(A, i), A, D), altitude(E, A, D) we get altitude(projection(A, i), A, D) == parallel_line(projection(A, i), altitude(E, A, D))
By parallel_line_definition on orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), Line(D, G), parallel_line(E, Line(D, G)) we get Line(D, G) == parallel_line(orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), parallel_line(E, Line(D, G)))
By parallel_line_definition on line_intersection(altitude(F, B, D), parallel_line(midpoint(B, G), i)), altitude(F, B, D), altitude(midpoint(B, G), B, D) we get altitude(F, B, D) == parallel_line(line_intersection(altitude(F, B, D), parallel_line(midpoint(B, G), i)), altitude(midpoint(B, G), B, D))
By orthocenter_concurrency on projection(A, Line(D, G)), E, A we get orthocenter(A, E, projection(A, Line(D, G))) in altitude(projection(A, Line(D, G)), A, E), orthocenter(A, E, projection(A, Line(D, G))) in altitude(E, A, projection(A, Line(D, G))), orthocenter(A, E, projection(A, Line(D, G))) in altitude(A, E, projection(A, Line(D, G)))
By in_imply_collinear on orthocenter(E, G, midpoint(B, G)), projection(midpoint(B, G), g), midpoint(B, G) we get collinear(midpoint(B, G), projection(midpoint(B, G), g), orthocenter(E, G, midpoint(B, G)))
By orthocenter_concurrency on projection(A, Line(D, G)), midpoint(B, G), D we get orthocenter(D, midpoint(B, G), projection(A, Line(D, G))) in altitude(projection(A, Line(D, G)), D, midpoint(B, G)), orthocenter(D, midpoint(B, G), projection(A, Line(D, G))) in altitude(midpoint(B, G), D, projection(A, Line(D, G))), orthocenter(D, midpoint(B, G), projection(A, Line(D, G))) in altitude(D, midpoint(B, G), projection(A, Line(D, G)))
By orthocenter_concurrency on F, projection(A, i), A we get orthocenter(A, F, projection(A, i)) in altitude(F, A, projection(A, i)), orthocenter(A, F, projection(A, i)) in altitude(projection(A, i), A, F), orthocenter(A, F, projection(A, i)) in altitude(A, F, projection(A, i))
By in_imply_collinear on orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), orthocenter(A, D, G), projection(A, Line(D, G)) we get collinear(orthocenter(A, D, G), projection(A, Line(D, G)), orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))))
By orthocenter_concurrency on midpoint(B, G), projection(A, i), A we get orthocenter(A, midpoint(B, G), projection(A, i)) in altitude(midpoint(B, G), A, projection(A, i)), orthocenter(A, midpoint(B, G), projection(A, i)) in altitude(projection(A, i), A, midpoint(B, G)), orthocenter(A, midpoint(B, G), projection(A, i)) in altitude(A, midpoint(B, G), projection(A, i))
By in_imply_collinear on orthocenter(D, E, midpoint(B, G)), projection(E, h), E we get collinear(E, projection(E, h), orthocenter(D, E, midpoint(B, G)))
By in_imply_collinear on orthocenter(B, projection(A, i), orthocenter(A, B, D)), A, orthocenter(A, B, D) we get collinear(A, orthocenter(A, B, D), orthocenter(B, projection(A, i), orthocenter(A, B, D)))
By orthocenter_concurrency on midpoint(B, G), projection(A, i), D we get orthocenter(D, midpoint(B, G), projection(A, i)) in altitude(midpoint(B, G), D, projection(A, i)), orthocenter(D, midpoint(B, G), projection(A, i)) in altitude(projection(A, i), D, midpoint(B, G)), orthocenter(D, midpoint(B, G), projection(A, i)) in altitude(D, midpoint(B, G), projection(A, i))
By in_imply_collinear on orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), orthocenter(A, D, G), A we get collinear(A, orthocenter(A, D, G), orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))))
By orthocenter_concurrency on F, projection(A, i), B we get orthocenter(B, F, projection(A, i)) in altitude(F, B, projection(A, i)), orthocenter(B, F, projection(A, i)) in altitude(projection(A, i), B, F), orthocenter(B, F, projection(A, i)) in altitude(B, F, projection(A, i))
By orthocenter_concurrency on projection(A, Line(D, G)), E, G we get orthocenter(E, G, projection(A, Line(D, G))) in altitude(projection(A, Line(D, G)), E, G), orthocenter(E, G, projection(A, Line(D, G))) in altitude(E, G, projection(A, Line(D, G))), orthocenter(E, G, projection(A, Line(D, G))) in altitude(G, E, projection(A, Line(D, G)))
By orthocenter_concurrency on midpoint(B, G), projection(A, Line(D, G)), A we get orthocenter(A, midpoint(B, G), projection(A, Line(D, G))) in altitude(midpoint(B, G), A, projection(A, Line(D, G))), orthocenter(A, midpoint(B, G), projection(A, Line(D, G))) in altitude(projection(A, Line(D, G)), A, midpoint(B, G)), orthocenter(A, midpoint(B, G), projection(A, Line(D, G))) in altitude(A, midpoint(B, G), projection(A, Line(D, G)))
By in_imply_collinear on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), D, I we get collinear(D, I, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By in_imply_collinear on orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), D, projection(A, Line(D, G)) we get collinear(D, projection(A, Line(D, G)), orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))))
By reverse_direction on midpoint(B, G), projection(midpoint(B, G), Line(G, I)) we get 180 == direction(midpoint(B, G), projection(midpoint(B, G), Line(G, I))) - direction(projection(midpoint(B, G), Line(G, I)), midpoint(B, G)) mod 360
By in_imply_collinear on line_intersection(f, altitude(projection(A, i), A, B)), B, A we get collinear(A, B, line_intersection(f, altitude(projection(A, i), A, B)))
By in_imply_collinear on orthocenter(B, projection(A, i), orthocenter(A, B, D)), B, D we get collinear(B, D, orthocenter(B, projection(A, i), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), projection(A, Line(D, G)), G we get collinear(G, projection(A, Line(D, G)), orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))))
By double_perpendicular_and_parallel_v0 on altitude(D, E, midpoint(B, G)), median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G)) we get parallel(altitude(D, E, midpoint(B, G)), altitude(orthocenter(A, D, G), E, midpoint(B, G)))
By in_imply_collinear on line_intersection(altitude(E, A, D), altitude(F, B, G)), E, projection(E, h) we get collinear(E, projection(E, h), line_intersection(altitude(E, A, D), altitude(F, B, G)))
By in_imply_collinear on orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), projection(A, Line(D, G)), D we get collinear(D, projection(A, Line(D, G)), orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))))
By directions_draw_angle on B, midpoint(B, G), projection(midpoint(B, G), Line(G, I)) we get exists(angle(B, midpoint(B, G), projection(midpoint(B, G), Line(G, I))))
By line_inequality on altitude(B, F, midpoint(B, G)), h, B we get h != altitude(B, F, midpoint(B, G))
By double_perpendicular_and_parallel_v0 on perpendicular_line(projection(A, i), Line(B, G)), Line(B, G), h we get parallel(h, perpendicular_line(projection(A, i), Line(B, G)))
By in_imply_collinear on orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), A, projection(A, Line(D, G)) we get collinear(A, projection(A, Line(D, G)), orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))))
By in_imply_collinear on line_intersection(h, altitude(projection(A, i), A, D)), midpoint(B, G), A we get collinear(A, midpoint(B, G), line_intersection(h, altitude(projection(A, i), A, D)))
By in_imply_collinear on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), D, A we get collinear(A, D, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By in_imply_collinear on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), C, A we get collinear(A, C, line_intersection(g, altitude(projection(A, Line(D, G)), A, C)))
By in_imply_collinear on orthocenter(D, projection(A, i), orthocenter(A, B, D)), projection(A, i), B we get collinear(B, projection(A, i), orthocenter(D, projection(A, i), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), G, D we get collinear(D, G, orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))))
By in_imply_collinear on line_intersection(altitude(E, B, G), altitude(F, A, D)), projection(F, h), F we get collinear(F, projection(F, h), line_intersection(altitude(E, B, G), altitude(F, A, D)))
By in_imply_collinear on line_intersection(f, altitude(projection(A, i), A, B)), F, H we get collinear(F, H, line_intersection(f, altitude(projection(A, i), A, B)))
By in_imply_collinear on orthocenter(B, projection(A, i), orthocenter(A, B, D)), projection(A, i), D we get collinear(D, projection(A, i), orthocenter(B, projection(A, i), orthocenter(A, B, D)))
By in_imply_collinear on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), A, G we get collinear(A, G, line_intersection(g, altitude(projection(A, Line(D, G)), A, C)))
By sas_anti_congruence on E, F, C, F, E, H we get anti_congruent_triangles(C, E, F, H, F, E)
By sas_anti_similarity on D, E, A, D, F, A we get anti_similar_triangles(A, D, E, A, D, F)
By in_imply_collinear on line_intersection(f, altitude(projection(A, i), A, B)), H, A we get collinear(A, H, line_intersection(f, altitude(projection(A, i), A, B)))
By in_imply_collinear on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), midpoint(B, G), I we get collinear(I, midpoint(B, G), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By in_imply_collinear on orthocenter(D, projection(A, i), orthocenter(A, B, D)), orthocenter(A, B, D), A we get collinear(A, orthocenter(A, B, D), orthocenter(D, projection(A, i), orthocenter(A, B, D)))
By in_imply_collinear on line_intersection(f, altitude(projection(A, i), A, B)), F, A we get collinear(A, F, line_intersection(f, altitude(projection(A, i), A, B)))
By in_imply_collinear on line_intersection(parallel_line(F, i), altitude(midpoint(B, G), B, D)), projection(midpoint(B, G), i), midpoint(B, G) we get collinear(midpoint(B, G), projection(midpoint(B, G), i), line_intersection(parallel_line(F, i), altitude(midpoint(B, G), B, D)))
By in_imply_collinear on line_intersection(h, altitude(projection(A, i), A, D)), D, midpoint(B, G) we get collinear(D, midpoint(B, G), line_intersection(h, altitude(projection(A, i), A, D)))
By in_imply_collinear on line_intersection(h, altitude(projection(A, i), A, D)), D, A we get collinear(A, D, line_intersection(h, altitude(projection(A, i), A, D)))
By directions_draw_angle on G, midpoint(B, G), projection(midpoint(B, G), f) we get exists(angle(G, midpoint(B, G), projection(midpoint(B, G), f)))
By in_imply_collinear on orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), projection(A, Line(D, G)), A we get collinear(A, projection(A, Line(D, G)), orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))))
By in_imply_collinear on orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), G, D we get collinear(D, G, orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))))
By directions_draw_angle on projection(midpoint(B, G), Line(D, G)), midpoint(B, G), projection(midpoint(B, G), i) we get exists(angle(projection(midpoint(B, G), Line(D, G)), midpoint(B, G), projection(midpoint(B, G), i)))
By in_imply_collinear on orthocenter(B, projection(A, i), orthocenter(A, B, D)), A, projection(A, i) we get collinear(A, projection(A, i), orthocenter(B, projection(A, i), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(B, projection(A, i), orthocenter(A, B, D)), projection(A, i), B we get collinear(B, projection(A, i), orthocenter(B, projection(A, i), orthocenter(A, B, D)))
By asa_anti_congruence on F, E, C, E, F, H we get anti_congruent_triangles(C, E, F, H, F, E)
By in_imply_collinear on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), C, E we get collinear(C, E, line_intersection(g, altitude(projection(A, Line(D, G)), A, C)))
By in_imply_collinear on orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), projection(A, Line(D, G)), G we get collinear(G, projection(A, Line(D, G)), orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))))
By in_imply_collinear on line_intersection(altitude(E, D, G), parallel_line(midpoint(B, G), Line(D, G))), projection(E, Line(D, G)), E we get collinear(E, projection(E, Line(D, G)), line_intersection(altitude(E, D, G), parallel_line(midpoint(B, G), Line(D, G))))
By in_imply_collinear on line_intersection(h, altitude(projection(A, i), A, D)), D, I we get collinear(D, I, line_intersection(h, altitude(projection(A, i), A, D)))
By in_imply_collinear on orthocenter(B, projection(A, i), orthocenter(A, B, D)), projection(A, i), orthocenter(A, B, D) we get collinear(projection(A, i), orthocenter(A, B, D), orthocenter(B, projection(A, i), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(D, projection(A, i), orthocenter(A, B, D)), A, projection(A, i) we get collinear(A, projection(A, i), orthocenter(D, projection(A, i), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), orthocenter(A, D, G), projection(A, Line(D, G)) we get collinear(orthocenter(A, D, G), projection(A, Line(D, G)), orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))))
By anti_congruence_from_anti_similar_triangles on H, C, F, C, H, E we get anti_congruent_triangles(C, E, H, H, F, C)
By in_imply_collinear on orthocenter(D, F, midpoint(B, G)), F, projection(F, h) we get collinear(F, projection(F, h), orthocenter(D, F, midpoint(B, G)))
By in_imply_collinear on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), D, midpoint(B, G) we get collinear(D, midpoint(B, G), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By in_imply_collinear on orthocenter(D, projection(A, i), orthocenter(A, B, D)), projection(A, i), orthocenter(A, B, D) we get collinear(projection(A, i), orthocenter(A, B, D), orthocenter(D, projection(A, i), orthocenter(A, B, D)))
By in_imply_collinear on line_intersection(f, altitude(projection(A, i), A, B)), H, B we get collinear(B, H, line_intersection(f, altitude(projection(A, i), A, B)))
By anti_congruence_from_anti_similar_triangles on E, F, C, F, E, H we get anti_congruent_triangles(C, E, F, H, F, E)
By in_imply_collinear on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), A, I we get collinear(A, I, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By directions_draw_angle on G, midpoint(B, G), projection(midpoint(B, G), i) we get exists(angle(G, midpoint(B, G), projection(midpoint(B, G), i)))
By anti_congruence_from_anti_similar_triangles on F, C, E, E, H, F we get anti_congruent_triangles(C, E, F, H, F, E)
By double_perpendicular_and_parallel_v0_r on Line(B, G), perpendicular_line(projection(A, i), Line(B, G)), altitude(projection(A, i), A, D) we get perpendicular(altitude(projection(A, i), A, D), perpendicular_line(projection(A, i), Line(B, G)))
By in_imply_collinear on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), E, A we get collinear(A, E, line_intersection(g, altitude(projection(A, Line(D, G)), A, C)))
By in_imply_collinear on line_intersection(parallel_line(E, Line(D, G)), altitude(midpoint(B, G), D, G)), projection(midpoint(B, G), Line(D, G)), midpoint(B, G) we get collinear(midpoint(B, G), projection(midpoint(B, G), Line(D, G)), line_intersection(parallel_line(E, Line(D, G)), altitude(midpoint(B, G), D, G)))
By in_imply_collinear on orthocenter(B, F, midpoint(B, G)), midpoint(B, G), projection(midpoint(B, G), f) we get collinear(midpoint(B, G), projection(midpoint(B, G), f), orthocenter(B, F, midpoint(B, G)))
By in_imply_collinear on line_intersection(h, altitude(projection(A, i), A, D)), I, midpoint(B, G) we get collinear(I, midpoint(B, G), line_intersection(h, altitude(projection(A, i), A, D)))
By in_imply_collinear on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), E, G we get collinear(E, G, line_intersection(g, altitude(projection(A, Line(D, G)), A, C)))
By double_perpendicular_and_parallel_v0 on perpendicular_line(projection(A, Line(D, G)), Line(D, E)), Line(D, E), g we get parallel(g, perpendicular_line(projection(A, Line(D, G)), Line(D, E)))
By in_imply_collinear on orthocenter(D, projection(A, i), orthocenter(A, B, D)), B, D we get collinear(B, D, orthocenter(D, projection(A, i), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(D, projection(A, i), orthocenter(A, B, D)), D, projection(A, i) we get collinear(D, projection(A, i), orthocenter(D, projection(A, i), orthocenter(A, B, D)))
By in_imply_collinear on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), A, midpoint(B, G) we get collinear(A, midpoint(B, G), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By in_imply_collinear on line_intersection(h, altitude(projection(A, i), A, D)), I, A we get collinear(A, I, line_intersection(h, altitude(projection(A, i), A, D)))
By line_inequality on altitude(G, E, midpoint(B, G)), Line(B, C), G we get Line(B, C) != altitude(G, E, midpoint(B, G))
By anti_congruence_from_anti_similar_triangles on H, C, E, C, H, F we get anti_congruent_triangles(C, E, H, H, F, C)
By line_inequality on altitude(orthocenter(A, B, D), F, midpoint(B, G)), Line(C, orthocenter(A, D, G)), orthocenter(A, B, D) we get Line(C, orthocenter(A, D, G)) != altitude(orthocenter(A, B, D), F, midpoint(B, G))
By asa_anti_congruence on H, E, C, C, F, H we get anti_congruent_triangles(C, E, H, H, F, C)
By in_imply_collinear on orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), A, orthocenter(A, D, G) we get collinear(A, orthocenter(A, D, G), orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))))
By in_imply_collinear on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), C, G we get collinear(C, G, line_intersection(g, altitude(projection(A, Line(D, G)), A, C)))
By in_imply_collinear on line_intersection(f, altitude(projection(A, i), A, B)), F, B we get collinear(B, F, line_intersection(f, altitude(projection(A, i), A, B)))
By in_imply_collinear on line_intersection(altitude(F, B, D), parallel_line(midpoint(B, G), i)), projection(F, i), F we get collinear(F, projection(F, i), line_intersection(altitude(F, B, D), parallel_line(midpoint(B, G), i)))
By reverse_direction on midpoint(B, G), projection(midpoint(B, G), Line(B, I)) we get 180 == direction(midpoint(B, G), projection(midpoint(B, G), Line(B, I))) - direction(projection(midpoint(B, G), Line(B, I)), midpoint(B, G)) mod 360
By line_inequality on altitude(G, E, midpoint(B, G)), Line(C, orthocenter(A, D, G)), G we get Line(C, orthocenter(A, D, G)) != altitude(G, E, midpoint(B, G))
By directions_draw_angle on D, midpoint(B, G), projection(midpoint(B, G), g) we get exists(angle(D, midpoint(B, G), projection(midpoint(B, G), g)))
By directions_draw_angle on orthocenter(A, B, D), midpoint(B, G), projection(midpoint(B, G), Line(G, I)) we get exists(angle(orthocenter(A, B, D), midpoint(B, G), projection(midpoint(B, G), Line(G, I))))
By double_perpendicular_and_parallel_v0 on altitude(A, F, midpoint(B, G)), median(F, B, G), altitude(B, F, midpoint(B, G)) we get parallel(altitude(A, F, midpoint(B, G)), altitude(B, F, midpoint(B, G)))
By line_inequality on altitude(G, E, midpoint(B, G)), Line(I, orthocenter(A, D, G)), G we get Line(I, orthocenter(A, D, G)) != altitude(G, E, midpoint(B, G))
By asa_anti_congruence on C, F, H, H, E, C we get anti_congruent_triangles(C, E, H, H, F, C)
By directions_draw_angle on A, midpoint(B, G), projection(midpoint(B, G), Line(B, I)) we get exists(angle(A, midpoint(B, G), projection(midpoint(B, G), Line(B, I))))
By asa_anti_congruence on E, F, C, F, E, H we get anti_congruent_triangles(C, E, F, H, F, E)
By anti_congruence_from_anti_similar_triangles on F, C, H, E, H, C we get anti_congruent_triangles(C, E, H, H, F, C)
By reverse_direction on midpoint(B, G), projection(midpoint(B, G), i) we get 180 == direction(midpoint(B, G), projection(midpoint(B, G), i)) - direction(projection(midpoint(B, G), i), midpoint(B, G)) mod 360
By line_inequality on altitude(orthocenter(A, B, D), F, midpoint(B, G)), median(E, B, G), orthocenter(A, B, D) we get median(E, B, G) != altitude(orthocenter(A, B, D), F, midpoint(B, G))
By double_perpendicular_and_parallel_v0 on perpendicular_line(projection(A, Line(D, G)), Line(B, G)), Line(B, G), altitude(F, B, G) we get parallel(altitude(F, B, G), perpendicular_line(projection(A, Line(D, G)), Line(B, G)))
By double_perpendicular_and_parallel_v0 on altitude(B, F, midpoint(B, G)), median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G)) we get parallel(altitude(B, F, midpoint(B, G)), altitude(orthocenter(A, B, D), F, midpoint(B, G)))
By reverse_direction on projection(midpoint(B, G), f), midpoint(B, G) we get 180 == direction(projection(midpoint(B, G), f), midpoint(B, G)) - direction(midpoint(B, G), projection(midpoint(B, G), f)) mod 360
By directions_draw_angle on orthocenter(A, B, D), midpoint(B, G), projection(midpoint(B, G), Line(B, I)) we get exists(angle(orthocenter(A, B, D), midpoint(B, G), projection(midpoint(B, G), Line(B, I))))
By double_perpendicular_and_parallel_v0 on perpendicular_line(projection(A, Line(D, G)), Line(B, G)), Line(B, G), perpendicular_line(projection(A, i), Line(B, G)) we get parallel(perpendicular_line(projection(A, i), Line(B, G)), perpendicular_line(projection(A, Line(D, G)), Line(B, G)))
By line_inequality on altitude(D, E, midpoint(B, G)), Line(I, orthocenter(A, D, G)), D we get Line(I, orthocenter(A, D, G)) != altitude(D, E, midpoint(B, G))
By reverse_direction on projection(midpoint(B, G), Line(B, I)), midpoint(B, G) we get 180 == direction(projection(midpoint(B, G), Line(B, I)), midpoint(B, G)) - direction(midpoint(B, G), projection(midpoint(B, G), Line(B, I))) mod 360
By asa_anti_congruence on C, H, F, H, C, E we get anti_congruent_triangles(C, E, H, H, F, C)
By double_perpendicular_and_parallel_v0 on perpendicular_line(projection(A, i), Line(B, G)), Line(B, G), altitude(F, B, G) we get parallel(altitude(F, B, G), perpendicular_line(projection(A, i), Line(B, G)))
By asa_anti_congruence on F, C, E, E, H, F we get anti_congruent_triangles(C, E, F, H, F, E)
By line_inequality on altitude(D, E, midpoint(B, G)), Line(B, C), D we get Line(B, C) != altitude(D, E, midpoint(B, G))
By double_perpendicular_and_parallel_v0 on altitude(G, E, midpoint(B, G)), median(E, B, G), altitude(A, E, midpoint(B, G)) we get parallel(altitude(A, E, midpoint(B, G)), altitude(G, E, midpoint(B, G)))
By directions_draw_angle on projection(midpoint(B, G), Line(G, I)), midpoint(B, G), projection(midpoint(B, G), i) we get exists(angle(projection(midpoint(B, G), Line(G, I)), midpoint(B, G), projection(midpoint(B, G), i)))
By reverse_direction on projection(midpoint(B, G), i), midpoint(B, G) we get 180 == direction(projection(midpoint(B, G), i), midpoint(B, G)) - direction(midpoint(B, G), projection(midpoint(B, G), i)) mod 360
By directions_draw_angle on projection(midpoint(B, G), Line(B, I)), midpoint(B, G), I we get exists(angle(projection(midpoint(B, G), Line(B, I)), midpoint(B, G), I))
By directions_draw_angle on I, midpoint(B, G), projection(midpoint(B, G), Line(D, G)) we get exists(angle(I, midpoint(B, G), projection(midpoint(B, G), Line(D, G))))
By directions_draw_angle on projection(midpoint(B, G), g), midpoint(B, G), projection(midpoint(B, G), Line(D, G)) we get exists(angle(projection(midpoint(B, G), g), midpoint(B, G), projection(midpoint(B, G), Line(D, G))))
By sas_anti_similarity on D, F, A, D, E, A we get anti_similar_triangles(A, D, E, A, D, F)
By double_perpendicular_and_parallel_v0_r on Line(D, F), perpendicular_line(projection(A, i), Line(D, F)), altitude(projection(A, i), A, B) we get perpendicular(altitude(projection(A, i), A, B), perpendicular_line(projection(A, i), Line(D, F)))
By double_perpendicular_and_parallel_v0 on altitude(A, F, midpoint(B, G)), median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G)) we get parallel(altitude(A, F, midpoint(B, G)), altitude(orthocenter(A, B, D), F, midpoint(B, G)))
By line_inequality on altitude(orthocenter(A, B, D), F, midpoint(B, G)), altitude(A, D, G), orthocenter(A, B, D) we get altitude(A, D, G) != altitude(orthocenter(A, B, D), F, midpoint(B, G))
By directions_draw_angle on projection(midpoint(B, G), Line(B, I)), midpoint(B, G), projection(midpoint(B, G), g) we get exists(angle(projection(midpoint(B, G), Line(B, I)), midpoint(B, G), projection(midpoint(B, G), g)))
By double_perpendicular_and_parallel_v0 on altitude(A, F, midpoint(B, G)), median(F, B, G), altitude(D, F, midpoint(B, G)) we get parallel(altitude(A, F, midpoint(B, G)), altitude(D, F, midpoint(B, G)))
By double_perpendicular_and_parallel_v0 on altitude(orthocenter(A, D, G), E, midpoint(B, G)), median(E, B, G), altitude(A, E, midpoint(B, G)) we get parallel(altitude(A, E, midpoint(B, G)), altitude(orthocenter(A, D, G), E, midpoint(B, G)))
By sas_anti_congruence on H, E, F, C, F, E we get anti_congruent_triangles(C, E, F, H, F, E)
By reverse_direction on projection(midpoint(B, G), Line(D, G)), midpoint(B, G) we get 180 == direction(projection(midpoint(B, G), Line(D, G)), midpoint(B, G)) - direction(midpoint(B, G), projection(midpoint(B, G), Line(D, G))) mod 360
By anti_congruence_from_anti_similar_triangles on C, F, H, H, E, C we get anti_congruent_triangles(C, E, H, H, F, C)
By sas_anti_congruence on E, H, C, F, C, H we get anti_congruent_triangles(C, E, H, H, F, C)
By anti_congruence_from_anti_similar_triangles on C, H, E, H, C, F we get anti_congruent_triangles(C, E, H, H, F, C)
By double_perpendicular_and_parallel_v0 on f, Line(D, F), perpendicular_line(projection(A, i), Line(D, F)) we get parallel(f, perpendicular_line(projection(A, i), Line(D, F)))
By line_inequality on altitude(orthocenter(A, B, D), F, midpoint(B, G)), Line(B, C), orthocenter(A, B, D) we get Line(B, C) != altitude(orthocenter(A, B, D), F, midpoint(B, G))
By directions_draw_angle on orthocenter(A, B, D), midpoint(B, G), projection(midpoint(B, G), g) we get exists(angle(orthocenter(A, B, D), midpoint(B, G), projection(midpoint(B, G), g)))
By directions_draw_angle on orthocenter(A, D, G), midpoint(B, G), projection(midpoint(B, G), Line(D, G)) we get exists(angle(orthocenter(A, D, G), midpoint(B, G), projection(midpoint(B, G), Line(D, G))))
By directions_draw_angle on projection(midpoint(B, G), Line(D, G)), midpoint(B, G), orthocenter(A, D, G) we get exists(angle(projection(midpoint(B, G), Line(D, G)), midpoint(B, G), orthocenter(A, D, G)))
By double_perpendicular_and_parallel_v0_r on Line(B, G), perpendicular_line(projection(A, Line(D, G)), Line(B, G)), altitude(F, A, D) we get perpendicular(altitude(F, A, D), perpendicular_line(projection(A, Line(D, G)), Line(B, G)))
By directions_draw_angle on projection(midpoint(B, G), Line(D, G)), midpoint(B, G), I we get exists(angle(projection(midpoint(B, G), Line(D, G)), midpoint(B, G), I))
By anti_congruence_from_anti_similar_triangles on H, E, F, C, F, E we get anti_congruent_triangles(C, E, F, H, F, E)
By double_perpendicular_and_parallel_v0 on perpendicular_line(projection(A, Line(D, G)), Line(D, E)), Line(D, E), altitude(midpoint(B, G), D, E) we get parallel(altitude(midpoint(B, G), D, E), perpendicular_line(projection(A, Line(D, G)), Line(D, E)))
By directions_draw_angle on projection(midpoint(B, G), Line(G, I)), midpoint(B, G), orthocenter(A, B, D) we get exists(angle(projection(midpoint(B, G), Line(G, I)), midpoint(B, G), orthocenter(A, B, D)))
By line_inequality on altitude(G, E, midpoint(B, G)), Line(C, F), G we get Line(C, F) != altitude(G, E, midpoint(B, G))
By sas_anti_congruence on C, H, E, H, C, F we get anti_congruent_triangles(C, E, H, H, F, C)
By line_containment_inequality on orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), midpoint(B, G), Line(D, G) we get midpoint(B, G) != orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G)))
By anti_congruence_from_anti_similar_triangles on F, E, C, E, F, H we get anti_congruent_triangles(C, E, F, H, F, E)
By directions_draw_angle on G, midpoint(B, G), projection(midpoint(B, G), Line(D, G)) we get exists(angle(G, midpoint(B, G), projection(midpoint(B, G), Line(D, G))))
By line_inequality on altitude(G, E, midpoint(B, G)), Line(B, I), G we get Line(B, I) != altitude(G, E, midpoint(B, G))
By directions_draw_angle on projection(midpoint(B, G), g), midpoint(B, G), projection(midpoint(B, G), Line(G, I)) we get exists(angle(projection(midpoint(B, G), g), midpoint(B, G), projection(midpoint(B, G), Line(G, I))))
By directions_draw_angle on G, midpoint(B, G), projection(midpoint(B, G), g) we get exists(angle(G, midpoint(B, G), projection(midpoint(B, G), g)))
By line_containment_inequality on line_intersection(h, altitude(projection(A, i), A, D)), B, h we get B != line_intersection(h, altitude(projection(A, i), A, D))
By line_containment_inequality on orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), E, Line(D, G) we get E != orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G)))
By double_perpendicular_and_parallel_v0 on perpendicular_line(projection(A, Line(D, G)), Line(B, G)), Line(B, G), h we get parallel(h, perpendicular_line(projection(A, Line(D, G)), Line(B, G)))
By double_perpendicular_and_parallel_v0 on altitude(A, E, midpoint(B, G)), median(E, B, G), altitude(D, E, midpoint(B, G)) we get parallel(altitude(A, E, midpoint(B, G)), altitude(D, E, midpoint(B, G)))
By double_perpendicular_and_parallel_v0 on altitude(G, E, midpoint(B, G)), median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G)) we get parallel(altitude(G, E, midpoint(B, G)), altitude(orthocenter(A, D, G), E, midpoint(B, G)))
By line_inequality on altitude(B, F, midpoint(B, G)), Line(C, I), B we get Line(C, I) != altitude(B, F, midpoint(B, G))
By directions_draw_angle on projection(midpoint(B, G), Line(B, I)), midpoint(B, G), orthocenter(A, D, G) we get exists(angle(projection(midpoint(B, G), Line(B, I)), midpoint(B, G), orthocenter(A, D, G)))
By directions_draw_angle on projection(midpoint(B, G), Line(G, I)), midpoint(B, G), I we get exists(angle(projection(midpoint(B, G), Line(G, I)), midpoint(B, G), I))
By asa_anti_congruence on H, E, F, C, F, E we get anti_congruent_triangles(C, E, F, H, F, E)
By point_on_perpendicular_bisector on G, B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), h we get distance(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) == distance(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By directions_draw_angle on projection(midpoint(B, G), g), midpoint(B, G), projection(midpoint(B, G), Line(B, I)) we get exists(angle(projection(midpoint(B, G), g), midpoint(B, G), projection(midpoint(B, G), Line(B, I))))
By double_perpendicular_and_parallel_v0 on altitude(D, F, midpoint(B, G)), median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G)) we get parallel(altitude(D, F, midpoint(B, G)), altitude(orthocenter(A, B, D), F, midpoint(B, G)))
By directions_draw_angle on projection(midpoint(B, G), f), midpoint(B, G), D we get exists(angle(projection(midpoint(B, G), f), midpoint(B, G), D))
By line_containment_inequality on orthocenter(B, projection(A, i), orthocenter(A, B, D)), midpoint(B, G), altitude(A, B, D) we get midpoint(B, G) != orthocenter(B, projection(A, i), orthocenter(A, B, D))
By directions_draw_angle on projection(midpoint(B, G), i), midpoint(B, G), A we get exists(angle(projection(midpoint(B, G), i), midpoint(B, G), A))
By line_containment_inequality on line_intersection(h, altitude(projection(A, i), A, D)), orthocenter(A, D, G), h we get orthocenter(A, D, G) != line_intersection(h, altitude(projection(A, i), A, D))
By double_perpendicular_and_parallel_v0_r on Line(D, E), perpendicular_line(projection(A, Line(D, G)), Line(D, E)), altitude(midpoint(B, G), A, C) we get perpendicular(altitude(midpoint(B, G), A, C), perpendicular_line(projection(A, Line(D, G)), Line(D, E)))
By directions_draw_angle on projection(midpoint(B, G), i), midpoint(B, G), projection(midpoint(B, G), Line(B, I)) we get exists(angle(projection(midpoint(B, G), i), midpoint(B, G), projection(midpoint(B, G), Line(B, I))))
By directions_draw_angle on projection(midpoint(B, G), Line(B, I)), midpoint(B, G), G we get exists(angle(projection(midpoint(B, G), Line(B, I)), midpoint(B, G), G))
By sas_anti_congruence on D, E, H, D, F, C we get anti_congruent_triangles(C, D, F, H, D, E)
By asa_anti_congruence on C, H, E, H, C, F we get anti_congruent_triangles(C, E, H, H, F, C)
By directions_draw_angle on projection(midpoint(B, G), Line(D, G)), midpoint(B, G), projection(midpoint(B, G), g) we get exists(angle(projection(midpoint(B, G), Line(D, G)), midpoint(B, G), projection(midpoint(B, G), g)))
By line_inequality on altitude(orthocenter(A, B, D), F, midpoint(B, G)), g, orthocenter(A, B, D) we get g != altitude(orthocenter(A, B, D), F, midpoint(B, G))
By line_containment_inequality on orthocenter(D, projection(A, i), orthocenter(A, B, D)), I, i we get I != orthocenter(D, projection(A, i), orthocenter(A, B, D))
By line_containment_inequality on line_intersection(f, altitude(projection(A, i), A, B)), midpoint(B, G), f we get midpoint(B, G) != line_intersection(f, altitude(projection(A, i), A, B))
By asa_anti_congruence on F, C, H, E, H, C we get anti_congruent_triangles(C, E, H, H, F, C)
By directions_draw_angle on A, midpoint(B, G), projection(midpoint(B, G), g) we get exists(angle(A, midpoint(B, G), projection(midpoint(B, G), g)))
By directions_draw_angle on projection(midpoint(B, G), Line(B, I)), midpoint(B, G), projection(midpoint(B, G), f) we get exists(angle(projection(midpoint(B, G), Line(B, I)), midpoint(B, G), projection(midpoint(B, G), f)))
By double_perpendicular_and_parallel_v0_r on Line(B, G), perpendicular_line(projection(A, i), Line(B, G)), altitude(E, A, D) we get perpendicular(altitude(E, A, D), perpendicular_line(projection(A, i), Line(B, G)))
By anti_congruence_from_anti_similar_triangles on F, E, H, E, F, C we get anti_congruent_triangles(C, E, F, H, F, E)
By directions_draw_angle on projection(midpoint(B, G), Line(D, G)), midpoint(B, G), G we get exists(angle(projection(midpoint(B, G), Line(D, G)), midpoint(B, G), G))
By line_containment_inequality on orthocenter(B, projection(A, i), orthocenter(A, B, D)), C, altitude(A, B, D) we get C != orthocenter(B, projection(A, i), orthocenter(A, B, D))
By double_perpendicular_and_parallel_v0_r on Line(B, G), perpendicular_line(projection(A, Line(D, G)), Line(B, G)), altitude(E, A, D) we get perpendicular(altitude(E, A, D), perpendicular_line(projection(A, Line(D, G)), Line(B, G)))
By line_inequality on altitude(B, F, midpoint(B, G)), Line(E, F), B we get Line(E, F) != altitude(B, F, midpoint(B, G))
By directions_draw_angle on projection(midpoint(B, G), i), midpoint(B, G), projection(midpoint(B, G), f) we get exists(angle(projection(midpoint(B, G), i), midpoint(B, G), projection(midpoint(B, G), f)))
By sas_anti_congruence on C, F, E, H, E, F we get anti_congruent_triangles(C, E, F, H, F, E)
By line_inequality on perpendicular_line(projection(A, i), Line(B, G)), Line(B, C), projection(A, i) we get Line(B, C) != perpendicular_line(projection(A, i), Line(B, G))
By double_perpendicular_and_parallel_v0_r on Line(D, E), perpendicular_line(projection(A, Line(D, G)), Line(D, E)), altitude(projection(A, Line(D, G)), A, C) we get perpendicular(altitude(projection(A, Line(D, G)), A, C), perpendicular_line(projection(A, Line(D, G)), Line(D, E)))
By reverse_direction on midpoint(B, G), projection(midpoint(B, G), Line(D, G)) we get 180 == direction(midpoint(B, G), projection(midpoint(B, G), Line(D, G))) - direction(projection(midpoint(B, G), Line(D, G)), midpoint(B, G)) mod 360
By directions_draw_angle on orthocenter(A, B, D), midpoint(B, G), projection(midpoint(B, G), f) we get exists(angle(orthocenter(A, B, D), midpoint(B, G), projection(midpoint(B, G), f)))
By point_on_perpendicular_bisector on G, B, line_intersection(h, altitude(projection(A, i), A, D)), h we get distance(B, line_intersection(h, altitude(projection(A, i), A, D))) == distance(G, line_intersection(h, altitude(projection(A, i), A, D)))
By line_inequality on altitude(D, E, midpoint(B, G)), altitude(A, D, G), D we get altitude(A, D, G) != altitude(D, E, midpoint(B, G))
By directions_draw_angle on D, midpoint(B, G), projection(midpoint(B, G), Line(G, I)) we get exists(angle(D, midpoint(B, G), projection(midpoint(B, G), Line(G, I))))
By directions_draw_angle on projection(midpoint(B, G), Line(G, I)), midpoint(B, G), G we get exists(angle(projection(midpoint(B, G), Line(G, I)), midpoint(B, G), G))
By directions_draw_angle on projection(midpoint(B, G), f), midpoint(B, G), projection(midpoint(B, G), Line(G, I)) we get exists(angle(projection(midpoint(B, G), f), midpoint(B, G), projection(midpoint(B, G), Line(G, I))))
By line_inequality on altitude(D, E, midpoint(B, G)), Line(C, H), D we get Line(C, H) != altitude(D, E, midpoint(B, G))
By double_perpendicular_and_parallel_v0 on altitude(G, E, midpoint(B, G)), median(E, B, G), altitude(D, E, midpoint(B, G)) we get parallel(altitude(D, E, midpoint(B, G)), altitude(G, E, midpoint(B, G)))
By asa_anti_congruence on E, H, C, F, C, H we get anti_congruent_triangles(C, E, H, H, F, C)
By line_inequality on altitude(orthocenter(A, B, D), F, midpoint(B, G)), Line(G, I), orthocenter(A, B, D) we get Line(G, I) != altitude(orthocenter(A, B, D), F, midpoint(B, G))
By directions_draw_angle on projection(midpoint(B, G), Line(G, I)), midpoint(B, G), projection(midpoint(B, G), Line(B, I)) we get exists(angle(projection(midpoint(B, G), Line(G, I)), midpoint(B, G), projection(midpoint(B, G), Line(B, I))))
By double_perpendicular_and_parallel_v0 on perpendicular_line(projection(A, i), Line(B, G)), Line(B, G), altitude(E, B, G) we get parallel(altitude(E, B, G), perpendicular_line(projection(A, i), Line(B, G)))
By line_inequality on altitude(D, F, midpoint(B, G)), g, D we get g != altitude(D, F, midpoint(B, G))
By double_perpendicular_and_parallel_v0_r on Line(B, G), perpendicular_line(projection(A, Line(D, G)), Line(B, G)), altitude(projection(A, i), A, D) we get perpendicular(altitude(projection(A, i), A, D), perpendicular_line(projection(A, Line(D, G)), Line(B, G)))
By line_containment_inequality on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), G, h we get G != line_intersection(h, altitude(projection(A, Line(D, G)), A, D))
By directions_draw_angle on projection(midpoint(B, G), f), midpoint(B, G), projection(midpoint(B, G), Line(D, G)) we get exists(angle(projection(midpoint(B, G), f), midpoint(B, G), projection(midpoint(B, G), Line(D, G))))
By line_inequality on altitude(G, E, midpoint(B, G)), Line(E, H), G we get Line(E, H) != altitude(G, E, midpoint(B, G))
By directions_draw_angle on projection(midpoint(B, G), Line(B, I)), midpoint(B, G), projection(midpoint(B, G), Line(G, I)) we get exists(angle(projection(midpoint(B, G), Line(B, I)), midpoint(B, G), projection(midpoint(B, G), Line(G, I))))
By anti_congruence_from_anti_similar_triangles on E, H, F, F, C, E we get anti_congruent_triangles(C, E, F, H, F, E)
By anti_congruence_from_anti_similar_triangles on C, H, F, H, C, E we get anti_congruent_triangles(C, E, H, H, F, C)
By line_inequality on altitude(G, E, midpoint(B, G)), altitude(A, D, G), G we get altitude(A, D, G) != altitude(G, E, midpoint(B, G))
By reverse_direction on projection(midpoint(B, G), Line(G, I)), midpoint(B, G) we get 180 == direction(projection(midpoint(B, G), Line(G, I)), midpoint(B, G)) - direction(midpoint(B, G), projection(midpoint(B, G), Line(G, I))) mod 360
By directions_draw_angle on projection(midpoint(B, G), f), midpoint(B, G), I we get exists(angle(projection(midpoint(B, G), f), midpoint(B, G), I))
By directions_draw_angle on B, midpoint(B, G), projection(midpoint(B, G), i) we get exists(angle(B, midpoint(B, G), projection(midpoint(B, G), i)))
By line_containment_inequality on orthocenter(D, projection(A, i), orthocenter(A, B, D)), orthocenter(A, D, G), i we get orthocenter(A, D, G) != orthocenter(D, projection(A, i), orthocenter(A, B, D))
By directions_draw_angle on projection(midpoint(B, G), f), midpoint(B, G), projection(midpoint(B, G), Line(B, I)) we get exists(angle(projection(midpoint(B, G), f), midpoint(B, G), projection(midpoint(B, G), Line(B, I))))
By line_inequality on altitude(orthocenter(A, D, G), E, midpoint(B, G)), Line(E, H), orthocenter(A, D, G) we get Line(E, H) != altitude(orthocenter(A, D, G), E, midpoint(B, G))
By line_containment_inequality on orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), projection(A, i), altitude(A, D, G) we get projection(A, i) != orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G)))
By double_perpendicular_and_parallel_v0 on altitude(E, B, G), Line(B, G), perpendicular_line(projection(A, Line(D, G)), Line(B, G)) we get parallel(altitude(E, B, G), perpendicular_line(projection(A, Line(D, G)), Line(B, G)))
By line_inequality on perpendicular_line(projection(A, i), Line(B, G)), Line(D, G), projection(A, i) we get Line(D, G) != perpendicular_line(projection(A, i), Line(B, G))
By directions_draw_angle on projection(midpoint(B, G), Line(G, I)), midpoint(B, G), projection(midpoint(B, G), Line(D, G)) we get exists(angle(projection(midpoint(B, G), Line(G, I)), midpoint(B, G), projection(midpoint(B, G), Line(D, G))))
By line_containment_inequality on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)), h we get projection(A, Line(D, G)) != line_intersection(h, altitude(projection(A, Line(D, G)), A, D))
By directions_draw_angle on B, midpoint(B, G), projection(midpoint(B, G), g) we get exists(angle(B, midpoint(B, G), projection(midpoint(B, G), g)))
By directions_draw_angle on D, midpoint(B, G), projection(midpoint(B, G), i) we get exists(angle(D, midpoint(B, G), projection(midpoint(B, G), i)))
By directions_draw_angle on projection(midpoint(B, G), Line(D, G)), midpoint(B, G), orthocenter(A, B, D) we get exists(angle(projection(midpoint(B, G), Line(D, G)), midpoint(B, G), orthocenter(A, B, D)))
By directions_draw_angle on projection(midpoint(B, G), g), midpoint(B, G), projection(midpoint(B, G), i) we get exists(angle(projection(midpoint(B, G), g), midpoint(B, G), projection(midpoint(B, G), i)))
By directions_draw_angle on projection(midpoint(B, G), f), midpoint(B, G), orthocenter(A, B, D) we get exists(angle(projection(midpoint(B, G), f), midpoint(B, G), orthocenter(A, B, D)))
By asa_anti_congruence on H, C, E, C, H, F we get anti_congruent_triangles(C, E, H, H, F, C)
By line_inequality on altitude(D, E, midpoint(B, G)), Line(C, I), D we get Line(C, I) != altitude(D, E, midpoint(B, G))
By directions_draw_angle on projection(midpoint(B, G), i), midpoint(B, G), orthocenter(A, B, D) we get exists(angle(projection(midpoint(B, G), i), midpoint(B, G), orthocenter(A, B, D)))
By line_containment_inequality on orthocenter(D, projection(A, i), orthocenter(A, B, D)), G, i we get G != orthocenter(D, projection(A, i), orthocenter(A, B, D))
By line_containment_inequality on orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), orthocenter(A, D, G), Line(D, G) we get orthocenter(A, D, G) != orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G)))
By line_inequality on altitude(orthocenter(A, B, D), F, midpoint(B, G)), i, orthocenter(A, B, D) we get i != altitude(orthocenter(A, B, D), F, midpoint(B, G))
By directions_draw_angle on A, midpoint(B, G), projection(midpoint(B, G), Line(D, G)) we get exists(angle(A, midpoint(B, G), projection(midpoint(B, G), Line(D, G))))
By line_inequality on altitude(orthocenter(A, D, G), E, midpoint(B, G)), Line(I, orthocenter(A, B, D)), orthocenter(A, D, G) we get Line(I, orthocenter(A, B, D)) != altitude(orthocenter(A, D, G), E, midpoint(B, G))
By anti_congruence_from_anti_similar_triangles on H, E, C, C, F, H we get anti_congruent_triangles(C, E, H, H, F, C)
By line_inequality on perpendicular_line(projection(A, Line(D, G)), Line(B, G)), Line(B, G), projection(A, Line(D, G)) we get Line(B, G) != perpendicular_line(projection(A, Line(D, G)), Line(B, G))
By line_inequality on altitude(G, E, midpoint(B, G)), median(E, B, G), G we get median(E, B, G) != altitude(G, E, midpoint(B, G))
By line_containment_inequality on orthocenter(B, projection(A, i), orthocenter(A, B, D)), A, i we get A != orthocenter(B, projection(A, i), orthocenter(A, B, D))
By double_perpendicular_and_parallel_v0 on altitude(D, F, midpoint(B, G)), median(F, B, G), altitude(B, F, midpoint(B, G)) we get parallel(altitude(B, F, midpoint(B, G)), altitude(D, F, midpoint(B, G)))
By sas_anti_congruence on H, E, D, C, F, D we get anti_congruent_triangles(C, D, F, H, D, E)
By line_containment_inequality on orthocenter(B, projection(A, i), orthocenter(A, B, D)), H, altitude(A, B, D) we get H != orthocenter(B, projection(A, i), orthocenter(A, B, D))
By anti_congruence_from_anti_similar_triangles on E, F, H, F, E, C we get anti_congruent_triangles(C, E, F, H, F, E)
By line_containment_inequality on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), midpoint(B, G), g we get midpoint(B, G) != line_intersection(g, altitude(projection(A, Line(D, G)), A, C))
By double_perpendicular_and_parallel_v0_r on Line(B, G), perpendicular_line(projection(A, i), Line(B, G)), altitude(F, A, D) we get perpendicular(altitude(F, A, D), perpendicular_line(projection(A, i), Line(B, G)))
By directions_draw_angle on G, midpoint(B, G), projection(midpoint(B, G), Line(G, I)) we get exists(angle(G, midpoint(B, G), projection(midpoint(B, G), Line(G, I))))
By line_inequality on perpendicular_line(projection(A, Line(D, G)), Line(D, E)), altitude(A, B, D), projection(A, Line(D, G)) we get altitude(A, B, D) != perpendicular_line(projection(A, Line(D, G)), Line(D, E))
By directions_draw_angle on projection(midpoint(B, G), Line(B, I)), midpoint(B, G), B we get exists(angle(projection(midpoint(B, G), Line(B, I)), midpoint(B, G), B))
By asa_anti_congruence on H, C, F, C, H, E we get anti_congruent_triangles(C, E, H, H, F, C)
By double_perpendicular_and_parallel_v0_r on Line(B, G), perpendicular_line(projection(A, i), Line(B, G)), altitude(projection(A, Line(D, G)), A, D) we get perpendicular(altitude(projection(A, Line(D, G)), A, D), perpendicular_line(projection(A, i), Line(B, G)))
By line_containment_inequality on orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), C, Line(D, G) we get C != orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G)))
By anti_congruence_from_anti_similar_triangles on C, F, E, H, E, F we get anti_congruent_triangles(C, E, F, H, F, E)
By directions_draw_angle on I, midpoint(B, G), projection(midpoint(B, G), g) we get exists(angle(I, midpoint(B, G), projection(midpoint(B, G), g)))
By directions_draw_angle on projection(midpoint(B, G), Line(D, G)), midpoint(B, G), projection(midpoint(B, G), Line(G, I)) we get exists(angle(projection(midpoint(B, G), Line(D, G)), midpoint(B, G), projection(midpoint(B, G), Line(G, I))))
By directions_draw_angle on D, midpoint(B, G), projection(midpoint(B, G), Line(B, I)) we get exists(angle(D, midpoint(B, G), projection(midpoint(B, G), Line(B, I))))
By line_containment_inequality on line_intersection(h, altitude(projection(A, i), A, D)), projection(A, Line(D, G)), h we get projection(A, Line(D, G)) != line_intersection(h, altitude(projection(A, i), A, D))
By line_inequality on perpendicular_line(projection(A, Line(D, G)), Line(D, E)), f, projection(A, Line(D, G)) we get f != perpendicular_line(projection(A, Line(D, G)), Line(D, E))
By directions_draw_angle on projection(midpoint(B, G), g), midpoint(B, G), B we get exists(angle(projection(midpoint(B, G), g), midpoint(B, G), B))
By line_inequality on altitude(D, F, midpoint(B, G)), Line(B, C), D we get Line(B, C) != altitude(D, F, midpoint(B, G))
By anti_congruence_from_anti_similar_triangles on E, H, C, F, C, H we get anti_congruent_triangles(C, E, H, H, F, C)
By reverse_direction on projection(midpoint(B, G), g), midpoint(B, G) we get 180 == direction(projection(midpoint(B, G), g), midpoint(B, G)) - direction(midpoint(B, G), projection(midpoint(B, G), g)) mod 360
By line_containment_inequality on orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), G, altitude(A, D, G) we get G != orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G)))
By line_inequality on perpendicular_line(projection(A, Line(D, G)), Line(D, E)), Line(D, E), projection(A, Line(D, G)) we get Line(D, E) != perpendicular_line(projection(A, Line(D, G)), Line(D, E))
By asa_anti_congruence on C, F, E, H, E, F we get anti_congruent_triangles(C, E, F, H, F, E)
By sas_anti_congruence on D, F, C, D, E, H we get anti_congruent_triangles(C, D, F, H, D, E)
By line_containment_inequality on orthocenter(D, projection(A, i), orthocenter(A, B, D)), F, altitude(A, B, D) we get F != orthocenter(D, projection(A, i), orthocenter(A, B, D))
By directions_draw_angle on A, midpoint(B, G), projection(midpoint(B, G), Line(G, I)) we get exists(angle(A, midpoint(B, G), projection(midpoint(B, G), Line(G, I))))
By sas_anti_congruence on F, E, H, E, F, C we get anti_congruent_triangles(C, E, F, H, F, E)
By sas_anti_similarity on A, E, D, A, F, D we get anti_similar_triangles(A, D, E, A, D, F)
By line_containment_inequality on orthocenter(D, projection(A, i), orthocenter(A, B, D)), A, i we get A != orthocenter(D, projection(A, i), orthocenter(A, B, D))
By double_perpendicular_and_parallel_v0_r on Line(B, G), perpendicular_line(projection(A, Line(D, G)), Line(B, G)), altitude(projection(A, Line(D, G)), A, D) we get perpendicular(altitude(projection(A, Line(D, G)), A, D), perpendicular_line(projection(A, Line(D, G)), Line(B, G)))
By directions_draw_angle on A, midpoint(B, G), projection(midpoint(B, G), f) we get exists(angle(A, midpoint(B, G), projection(midpoint(B, G), f)))
By double_perpendicular_and_parallel_v0_r on Line(D, F), perpendicular_line(projection(A, i), Line(D, F)), altitude(midpoint(B, G), A, B) we get perpendicular(altitude(midpoint(B, G), A, B), perpendicular_line(projection(A, i), Line(D, F)))
By reverse_direction on midpoint(B, G), projection(midpoint(B, G), g) we get 180 == direction(midpoint(B, G), projection(midpoint(B, G), g)) - direction(projection(midpoint(B, G), g), midpoint(B, G)) mod 360
By line_inequality on perpendicular_line(projection(A, Line(D, G)), Line(B, G)), Line(D, F), projection(A, Line(D, G)) we get Line(D, F) != perpendicular_line(projection(A, Line(D, G)), Line(B, G))
By directions_draw_angle on projection(midpoint(B, G), g), midpoint(B, G), A we get exists(angle(projection(midpoint(B, G), g), midpoint(B, G), A))
By line_inequality on perpendicular_line(projection(A, i), Line(D, F)), Line(D, F), projection(A, i) we get Line(D, F) != perpendicular_line(projection(A, i), Line(D, F))
By sas_anti_congruence on H, C, F, C, H, E we get anti_congruent_triangles(C, E, H, H, F, C)
By directions_draw_angle on projection(midpoint(B, G), g), midpoint(B, G), orthocenter(A, D, G) we get exists(angle(projection(midpoint(B, G), g), midpoint(B, G), orthocenter(A, D, G)))
By line_inequality on altitude(D, F, midpoint(B, G)), altitude(A, B, D), D we get altitude(A, B, D) != altitude(D, F, midpoint(B, G))
By double_perpendicular_and_parallel_v0 on perpendicular_line(projection(A, i), Line(D, F)), Line(D, F), altitude(midpoint(B, G), D, F) we get parallel(altitude(midpoint(B, G), D, F), perpendicular_line(projection(A, i), Line(D, F)))
By directions_draw_angle on B, midpoint(B, G), projection(midpoint(B, G), Line(D, G)) we get exists(angle(B, midpoint(B, G), projection(midpoint(B, G), Line(D, G))))
By asa_anti_congruence on E, H, F, F, C, E we get anti_congruent_triangles(C, E, F, H, F, E)
By reverse_direction on midpoint(B, G), projection(midpoint(B, G), f) we get 180 == direction(midpoint(B, G), projection(midpoint(B, G), f)) - direction(projection(midpoint(B, G), f), midpoint(B, G)) mod 360
By directions_draw_angle on projection(midpoint(B, G), g), midpoint(B, G), G we get exists(angle(projection(midpoint(B, G), g), midpoint(B, G), G))
By asa_anti_congruence on F, E, H, E, F, C we get anti_congruent_triangles(C, E, F, H, F, E)
By directions_draw_angle on projection(midpoint(B, G), Line(B, I)), midpoint(B, G), orthocenter(A, B, D) we get exists(angle(projection(midpoint(B, G), Line(B, I)), midpoint(B, G), orthocenter(A, B, D)))
By directions_draw_angle on projection(midpoint(B, G), i), midpoint(B, G), I we get exists(angle(projection(midpoint(B, G), i), midpoint(B, G), I))
By line_inequality on altitude(orthocenter(A, B, D), F, midpoint(B, G)), f, orthocenter(A, B, D) we get f != altitude(orthocenter(A, B, D), F, midpoint(B, G))
By sas_anti_congruence on C, F, D, H, E, D we get anti_congruent_triangles(C, D, F, H, D, E)
By line_inequality on perpendicular_line(projection(A, Line(D, G)), Line(B, G)), h, projection(A, Line(D, G)) we get h != perpendicular_line(projection(A, Line(D, G)), Line(B, G))
By line_containment_inequality on orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), E, Line(D, G) we get E != orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G)))
By sas_anti_similarity on A, F, D, A, E, D we get anti_similar_triangles(A, D, E, A, D, F)
By directions_draw_angle on orthocenter(A, D, G), midpoint(B, G), projection(midpoint(B, G), Line(B, I)) we get exists(angle(orthocenter(A, D, G), midpoint(B, G), projection(midpoint(B, G), Line(B, I))))
By line_containment_inequality on orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), D, altitude(A, D, G) we get D != orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G)))
By directions_draw_angle on projection(midpoint(B, G), i), midpoint(B, G), projection(midpoint(B, G), Line(G, I)) we get exists(angle(projection(midpoint(B, G), i), midpoint(B, G), projection(midpoint(B, G), Line(G, I))))
By line_inequality on perpendicular_line(projection(A, Line(D, G)), Line(D, E)), Line(I, orthocenter(A, D, G)), projection(A, Line(D, G)) we get Line(I, orthocenter(A, D, G)) != perpendicular_line(projection(A, Line(D, G)), Line(D, E))
By asa_anti_congruence on E, F, H, F, E, C we get anti_congruent_triangles(C, E, F, H, F, E)
By sas_anti_congruence on F, C, H, E, H, C we get anti_congruent_triangles(C, E, H, H, F, C)
By line_containment_inequality on line_intersection(f, altitude(projection(A, i), A, B)), E, f we get E != line_intersection(f, altitude(projection(A, i), A, B))
By line_containment_inequality on orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), projection(A, i), Line(D, G) we get projection(A, i) != orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G)))
By directions_draw_angle on orthocenter(A, B, D), midpoint(B, G), projection(midpoint(B, G), Line(D, G)) we get exists(angle(orthocenter(A, B, D), midpoint(B, G), projection(midpoint(B, G), Line(D, G))))
By directions_draw_angle on orthocenter(A, D, G), midpoint(B, G), projection(midpoint(B, G), f) we get exists(angle(orthocenter(A, D, G), midpoint(B, G), projection(midpoint(B, G), f)))
By line_containment_inequality on orthocenter(D, projection(A, i), orthocenter(A, B, D)), H, altitude(A, B, D) we get H != orthocenter(D, projection(A, i), orthocenter(A, B, D))
By line_inequality on altitude(orthocenter(A, B, D), F, midpoint(B, G)), Line(D, E), orthocenter(A, B, D) we get Line(D, E) != altitude(orthocenter(A, B, D), F, midpoint(B, G))
By directions_draw_angle on projection(midpoint(B, G), Line(G, I)), midpoint(B, G), D we get exists(angle(projection(midpoint(B, G), Line(G, I)), midpoint(B, G), D))
By line_containment_inequality on line_intersection(h, altitude(projection(A, i), A, D)), C, h we get C != line_intersection(h, altitude(projection(A, i), A, D))
By directions_draw_angle on projection(midpoint(B, G), Line(G, I)), midpoint(B, G), A we get exists(angle(projection(midpoint(B, G), Line(G, I)), midpoint(B, G), A))
By line_inequality on altitude(D, E, midpoint(B, G)), Line(I, orthocenter(A, B, D)), D we get Line(I, orthocenter(A, B, D)) != altitude(D, E, midpoint(B, G))
By directions_draw_angle on B, midpoint(B, G), projection(midpoint(B, G), f) we get exists(angle(B, midpoint(B, G), projection(midpoint(B, G), f)))
By line_containment_inequality on line_intersection(f, altitude(projection(A, i), A, B)), orthocenter(A, D, G), f we get orthocenter(A, D, G) != line_intersection(f, altitude(projection(A, i), A, B))
By line_inequality on altitude(orthocenter(A, D, G), E, midpoint(B, G)), Line(B, C), orthocenter(A, D, G) we get Line(B, C) != altitude(orthocenter(A, D, G), E, midpoint(B, G))
By directions_draw_angle on projection(midpoint(B, G), i), midpoint(B, G), G we get exists(angle(projection(midpoint(B, G), i), midpoint(B, G), G))
By directions_draw_angle on B, midpoint(B, G), projection(midpoint(B, G), Line(B, I)) we get exists(angle(B, midpoint(B, G), projection(midpoint(B, G), Line(B, I))))
By directions_draw_angle on G, midpoint(B, G), projection(midpoint(B, G), Line(B, I)) we get exists(angle(G, midpoint(B, G), projection(midpoint(B, G), Line(B, I))))
By line_inequality on altitude(orthocenter(A, D, G), E, midpoint(B, G)), Line(D, F), orthocenter(A, D, G) we get Line(D, F) != altitude(orthocenter(A, D, G), E, midpoint(B, G))
By directions_draw_angle on orthocenter(A, B, D), midpoint(B, G), projection(midpoint(B, G), i) we get exists(angle(orthocenter(A, B, D), midpoint(B, G), projection(midpoint(B, G), i)))
By line_containment_inequality on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), E, h we get E != line_intersection(h, altitude(projection(A, Line(D, G)), A, D))
By line_inequality on altitude(B, F, midpoint(B, G)), Line(D, G), B we get Line(D, G) != altitude(B, F, midpoint(B, G))
By line_inequality on altitude(D, E, midpoint(B, G)), g, D we get g != altitude(D, E, midpoint(B, G))
By directions_draw_angle on orthocenter(A, D, G), midpoint(B, G), projection(midpoint(B, G), g) we get exists(angle(orthocenter(A, D, G), midpoint(B, G), projection(midpoint(B, G), g)))
By line_inequality on altitude(D, F, midpoint(B, G)), Line(C, I), D we get Line(C, I) != altitude(D, F, midpoint(B, G))
By line_inequality on altitude(B, F, midpoint(B, G)), altitude(A, B, D), B we get altitude(A, B, D) != altitude(B, F, midpoint(B, G))
By line_inequality on altitude(D, F, midpoint(B, G)), Line(H, orthocenter(A, B, D)), D we get Line(H, orthocenter(A, B, D)) != altitude(D, F, midpoint(B, G))
By line_containment_inequality on line_intersection(h, altitude(projection(A, i), A, D)), G, h we get G != line_intersection(h, altitude(projection(A, i), A, D))
By directions_draw_angle on projection(midpoint(B, G), i), midpoint(B, G), projection(midpoint(B, G), g) we get exists(angle(projection(midpoint(B, G), i), midpoint(B, G), projection(midpoint(B, G), g)))
By directions_draw_angle on projection(midpoint(B, G), Line(D, G)), midpoint(B, G), projection(midpoint(B, G), Line(B, I)) we get exists(angle(projection(midpoint(B, G), Line(D, G)), midpoint(B, G), projection(midpoint(B, G), Line(B, I))))
By line_containment_inequality on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), H, g we get H != line_intersection(g, altitude(projection(A, Line(D, G)), A, C))
By directions_draw_angle on projection(midpoint(B, G), Line(G, I)), midpoint(B, G), projection(midpoint(B, G), g) we get exists(angle(projection(midpoint(B, G), Line(G, I)), midpoint(B, G), projection(midpoint(B, G), g)))
By line_containment_inequality on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), H, h we get H != line_intersection(h, altitude(projection(A, Line(D, G)), A, D))
By line_containment_inequality on orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), B, altitude(A, D, G) we get B != orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G)))
By line_inequality on altitude(orthocenter(A, B, D), F, midpoint(B, G)), median(F, B, G), orthocenter(A, B, D) we get median(F, B, G) != altitude(orthocenter(A, B, D), F, midpoint(B, G))
By line_containment_inequality on orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), I, altitude(A, D, G) we get I != orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G)))
By line_inequality on perpendicular_line(projection(A, i), Line(B, G)), Line(H, orthocenter(A, B, D)), projection(A, i) we get Line(H, orthocenter(A, B, D)) != perpendicular_line(projection(A, i), Line(B, G))
By directions_draw_angle on projection(midpoint(B, G), g), midpoint(B, G), D we get exists(angle(projection(midpoint(B, G), g), midpoint(B, G), D))
By line_inequality on altitude(B, F, midpoint(B, G)), median(F, B, G), B we get median(F, B, G) != altitude(B, F, midpoint(B, G))
By line_inequality on perpendicular_line(projection(A, Line(D, G)), Line(D, E)), g, projection(A, Line(D, G)) we get g != perpendicular_line(projection(A, Line(D, G)), Line(D, E))
By line_containment_inequality on orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), orthocenter(A, B, D), altitude(A, D, G) we get orthocenter(A, B, D) != orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G)))
By directions_draw_angle on projection(midpoint(B, G), f), midpoint(B, G), G we get exists(angle(projection(midpoint(B, G), f), midpoint(B, G), G))
By line_inequality on altitude(B, F, midpoint(B, G)), Line(C, orthocenter(A, D, G)), B we get Line(C, orthocenter(A, D, G)) != altitude(B, F, midpoint(B, G))
By line_inequality on altitude(orthocenter(A, B, D), F, midpoint(B, G)), Line(B, I), orthocenter(A, B, D) we get Line(B, I) != altitude(orthocenter(A, B, D), F, midpoint(B, G))
By line_inequality on altitude(B, F, midpoint(B, G)), Line(H, orthocenter(A, B, D)), B we get Line(H, orthocenter(A, B, D)) != altitude(B, F, midpoint(B, G))
By line_inequality on perpendicular_line(projection(A, Line(D, G)), Line(B, G)), Line(D, H), projection(A, Line(D, G)) we get Line(D, H) != perpendicular_line(projection(A, Line(D, G)), Line(B, G))
By line_inequality on perpendicular_line(projection(A, i), Line(D, F)), Line(I, orthocenter(A, B, D)), projection(A, i) we get Line(I, orthocenter(A, B, D)) != perpendicular_line(projection(A, i), Line(D, F))
By line_containment_inequality on orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), orthocenter(A, B, D), Line(D, G) we get orthocenter(A, B, D) != orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), orthocenter(A, D, G), h we get orthocenter(A, D, G) != line_intersection(h, altitude(projection(A, Line(D, G)), A, D))
By line_containment_inequality on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), orthocenter(A, B, D), g we get orthocenter(A, B, D) != line_intersection(g, altitude(projection(A, Line(D, G)), A, C))
By directions_draw_angle on projection(midpoint(B, G), Line(B, I)), midpoint(B, G), D we get exists(angle(projection(midpoint(B, G), Line(B, I)), midpoint(B, G), D))
By line_containment_inequality on orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), C, altitude(A, D, G) we get C != orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G)))
By line_containment_inequality on orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), A, Line(D, G) we get A != orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G)))
By directions_draw_angle on projection(midpoint(B, G), g), midpoint(B, G), orthocenter(A, B, D) we get exists(angle(projection(midpoint(B, G), g), midpoint(B, G), orthocenter(A, B, D)))
By line_inequality on perpendicular_line(projection(A, i), Line(B, G)), Line(D, F), projection(A, i) we get Line(D, F) != perpendicular_line(projection(A, i), Line(B, G))
By directions_draw_angle on D, midpoint(B, G), projection(midpoint(B, G), f) we get exists(angle(D, midpoint(B, G), projection(midpoint(B, G), f)))
By line_inequality on perpendicular_line(projection(A, Line(D, G)), Line(B, G)), Line(C, D), projection(A, Line(D, G)) we get Line(C, D) != perpendicular_line(projection(A, Line(D, G)), Line(B, G))
By directions_draw_angle on A, midpoint(B, G), projection(midpoint(B, G), i) we get exists(angle(A, midpoint(B, G), projection(midpoint(B, G), i)))
By directions_draw_angle on projection(midpoint(B, G), i), midpoint(B, G), B we get exists(angle(projection(midpoint(B, G), i), midpoint(B, G), B))
By directions_draw_angle on projection(midpoint(B, G), f), midpoint(B, G), orthocenter(A, D, G) we get exists(angle(projection(midpoint(B, G), f), midpoint(B, G), orthocenter(A, D, G)))
By line_inequality on altitude(G, E, midpoint(B, G)), f, G we get f != altitude(G, E, midpoint(B, G))
By directions_draw_angle on projection(midpoint(B, G), Line(B, I)), midpoint(B, G), projection(midpoint(B, G), Line(D, G)) we get exists(angle(projection(midpoint(B, G), Line(B, I)), midpoint(B, G), projection(midpoint(B, G), Line(D, G))))
By line_inequality on altitude(D, E, midpoint(B, G)), Line(E, H), D we get Line(E, H) != altitude(D, E, midpoint(B, G))
By line_inequality on altitude(B, F, midpoint(B, G)), Line(E, H), B we get Line(E, H) != altitude(B, F, midpoint(B, G))
By directions_draw_angle on projection(midpoint(B, G), Line(G, I)), midpoint(B, G), B we get exists(angle(projection(midpoint(B, G), Line(G, I)), midpoint(B, G), B))
By line_inequality on perpendicular_line(projection(A, i), Line(B, G)), Line(D, H), projection(A, i) we get Line(D, H) != perpendicular_line(projection(A, i), Line(B, G))
By directions_draw_angle on orthocenter(A, D, G), midpoint(B, G), projection(midpoint(B, G), i) we get exists(angle(orthocenter(A, D, G), midpoint(B, G), projection(midpoint(B, G), i)))
By directions_draw_angle on projection(midpoint(B, G), Line(D, G)), midpoint(B, G), A we get exists(angle(projection(midpoint(B, G), Line(D, G)), midpoint(B, G), A))
By line_inequality on altitude(D, F, midpoint(B, G)), Line(B, G), D we get Line(B, G) != altitude(D, F, midpoint(B, G))
By directions_draw_angle on D, midpoint(B, G), projection(midpoint(B, G), Line(D, G)) we get exists(angle(D, midpoint(B, G), projection(midpoint(B, G), Line(D, G))))
By directions_draw_angle on projection(midpoint(B, G), g), midpoint(B, G), I we get exists(angle(projection(midpoint(B, G), g), midpoint(B, G), I))
By line_inequality on perpendicular_line(projection(A, Line(D, G)), Line(D, E)), Line(C, orthocenter(A, D, G)), projection(A, Line(D, G)) we get Line(C, orthocenter(A, D, G)) != perpendicular_line(projection(A, Line(D, G)), Line(D, E))
By line_inequality on perpendicular_line(projection(A, Line(D, G)), Line(D, E)), Line(D, F), projection(A, Line(D, G)) we get Line(D, F) != perpendicular_line(projection(A, Line(D, G)), Line(D, E))
By directions_draw_angle on I, midpoint(B, G), projection(midpoint(B, G), f) we get exists(angle(I, midpoint(B, G), projection(midpoint(B, G), f)))
By line_inequality on perpendicular_line(projection(A, Line(D, G)), Line(D, E)), i, projection(A, Line(D, G)) we get i != perpendicular_line(projection(A, Line(D, G)), Line(D, E))
By line_inequality on altitude(D, F, midpoint(B, G)), f, D we get f != altitude(D, F, midpoint(B, G))
By directions_draw_angle on projection(midpoint(B, G), Line(D, G)), midpoint(B, G), D we get exists(angle(projection(midpoint(B, G), Line(D, G)), midpoint(B, G), D))
By line_containment_inequality on orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), B, altitude(A, D, G) we get B != orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G)))
By directions_draw_angle on projection(midpoint(B, G), f), midpoint(B, G), A we get exists(angle(projection(midpoint(B, G), f), midpoint(B, G), A))
By directions_draw_angle on projection(midpoint(B, G), Line(G, I)), midpoint(B, G), projection(midpoint(B, G), f) we get exists(angle(projection(midpoint(B, G), Line(G, I)), midpoint(B, G), projection(midpoint(B, G), f)))
By line_containment_inequality on line_intersection(f, altitude(projection(A, i), A, B)), projection(A, Line(D, G)), f we get projection(A, Line(D, G)) != line_intersection(f, altitude(projection(A, i), A, B))
By line_containment_inequality on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), orthocenter(A, D, G), g we get orthocenter(A, D, G) != line_intersection(g, altitude(projection(A, Line(D, G)), A, C))
By directions_draw_angle on projection(midpoint(B, G), Line(D, G)), midpoint(B, G), B we get exists(angle(projection(midpoint(B, G), Line(D, G)), midpoint(B, G), B))
By directions_draw_angle on projection(midpoint(B, G), Line(B, I)), midpoint(B, G), A we get exists(angle(projection(midpoint(B, G), Line(B, I)), midpoint(B, G), A))
By line_inequality on perpendicular_line(projection(A, i), Line(B, G)), g, projection(A, i) we get g != perpendicular_line(projection(A, i), Line(B, G))
By directions_draw_angle on orthocenter(A, D, G), midpoint(B, G), projection(midpoint(B, G), Line(G, I)) we get exists(angle(orthocenter(A, D, G), midpoint(B, G), projection(midpoint(B, G), Line(G, I))))
By line_inequality on altitude(B, F, midpoint(B, G)), median(E, B, G), B we get median(E, B, G) != altitude(B, F, midpoint(B, G))
By directions_draw_angle on projection(midpoint(B, G), i), midpoint(B, G), projection(midpoint(B, G), Line(D, G)) we get exists(angle(projection(midpoint(B, G), i), midpoint(B, G), projection(midpoint(B, G), Line(D, G))))
By line_containment_inequality on orthocenter(B, projection(A, i), orthocenter(A, B, D)), F, i we get F != orthocenter(B, projection(A, i), orthocenter(A, B, D))
By directions_draw_angle on projection(midpoint(B, G), Line(G, I)), midpoint(B, G), orthocenter(A, D, G) we get exists(angle(projection(midpoint(B, G), Line(G, I)), midpoint(B, G), orthocenter(A, D, G)))
By line_inequality on altitude(G, E, midpoint(B, G)), i, G we get i != altitude(G, E, midpoint(B, G))
By line_containment_inequality on orthocenter(D, projection(A, i), orthocenter(A, B, D)), midpoint(B, G), altitude(A, B, D) we get midpoint(B, G) != orthocenter(D, projection(A, i), orthocenter(A, B, D))
By line_containment_inequality on line_intersection(h, altitude(projection(A, i), A, D)), E, h we get E != line_intersection(h, altitude(projection(A, i), A, D))
By directions_draw_angle on projection(midpoint(B, G), Line(D, G)), midpoint(B, G), projection(midpoint(B, G), f) we get exists(angle(projection(midpoint(B, G), Line(D, G)), midpoint(B, G), projection(midpoint(B, G), f)))
By directions_draw_angle on projection(midpoint(B, G), f), midpoint(B, G), projection(midpoint(B, G), i) we get exists(angle(projection(midpoint(B, G), f), midpoint(B, G), projection(midpoint(B, G), i)))
By directions_draw_angle on projection(midpoint(B, G), i), midpoint(B, G), D we get exists(angle(projection(midpoint(B, G), i), midpoint(B, G), D))
By line_inequality on altitude(D, E, midpoint(B, G)), altitude(A, B, D), D we get altitude(A, B, D) != altitude(D, E, midpoint(B, G))
By line_inequality on altitude(orthocenter(A, D, G), E, midpoint(B, G)), altitude(A, B, D), orthocenter(A, D, G) we get altitude(A, B, D) != altitude(orthocenter(A, D, G), E, midpoint(B, G))
By directions_draw_angle on I, midpoint(B, G), projection(midpoint(B, G), Line(B, I)) we get exists(angle(I, midpoint(B, G), projection(midpoint(B, G), Line(B, I))))
By directions_draw_angle on projection(midpoint(B, G), f), midpoint(B, G), projection(midpoint(B, G), g) we get exists(angle(projection(midpoint(B, G), f), midpoint(B, G), projection(midpoint(B, G), g)))
By line_containment_inequality on line_intersection(f, altitude(projection(A, i), A, B)), I, f we get I != line_intersection(f, altitude(projection(A, i), A, B))
By line_inequality on altitude(G, E, midpoint(B, G)), median(F, B, G), G we get median(F, B, G) != altitude(G, E, midpoint(B, G))
By directions_draw_angle on projection(midpoint(B, G), g), midpoint(B, G), projection(midpoint(B, G), f) we get exists(angle(projection(midpoint(B, G), g), midpoint(B, G), projection(midpoint(B, G), f)))
By line_containment_inequality on orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), orthocenter(A, D, G), Line(D, G) we get orthocenter(A, D, G) != orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G)))
By directions_draw_angle on I, midpoint(B, G), projection(midpoint(B, G), i) we get exists(angle(I, midpoint(B, G), projection(midpoint(B, G), i)))
By line_containment_inequality on orthocenter(B, projection(A, i), orthocenter(A, B, D)), orthocenter(A, D, G), altitude(A, B, D) we get orthocenter(A, D, G) != orthocenter(B, projection(A, i), orthocenter(A, B, D))
By line_inequality on altitude(D, F, midpoint(B, G)), Line(C, H), D we get Line(C, H) != altitude(D, F, midpoint(B, G))
By directions_draw_angle on projection(midpoint(B, G), f), midpoint(B, G), B we get exists(angle(projection(midpoint(B, G), f), midpoint(B, G), B))
By line_containment_inequality on orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), H, altitude(A, D, G) we get H != orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G)))
By line_inequality on altitude(orthocenter(A, B, D), F, midpoint(B, G)), Line(D, H), orthocenter(A, B, D) we get Line(D, H) != altitude(orthocenter(A, B, D), F, midpoint(B, G))
By directions_draw_angle on projection(midpoint(B, G), Line(B, I)), midpoint(B, G), projection(midpoint(B, G), i) we get exists(angle(projection(midpoint(B, G), Line(B, I)), midpoint(B, G), projection(midpoint(B, G), i)))
By line_inequality on altitude(orthocenter(A, B, D), F, midpoint(B, G)), Line(C, F), orthocenter(A, B, D) we get Line(C, F) != altitude(orthocenter(A, B, D), F, midpoint(B, G))
By line_inequality on altitude(B, F, midpoint(B, G)), Line(D, F), B we get Line(D, F) != altitude(B, F, midpoint(B, G))
By line_containment_inequality on orthocenter(B, projection(A, i), orthocenter(A, B, D)), G, i we get G != orthocenter(B, projection(A, i), orthocenter(A, B, D))
By line_containment_inequality on orthocenter(B, projection(A, i), orthocenter(A, B, D)), B, altitude(A, B, D) we get B != orthocenter(B, projection(A, i), orthocenter(A, B, D))
By line_inequality on altitude(B, F, midpoint(B, G)), altitude(A, D, G), B we get altitude(A, D, G) != altitude(B, F, midpoint(B, G))
By directions_draw_angle on I, midpoint(B, G), projection(midpoint(B, G), Line(G, I)) we get exists(angle(I, midpoint(B, G), projection(midpoint(B, G), Line(G, I))))
By line_inequality on altitude(D, E, midpoint(B, G)), Line(E, F), D we get Line(E, F) != altitude(D, E, midpoint(B, G))
By line_inequality on altitude(D, E, midpoint(B, G)), Line(C, orthocenter(A, D, G)), D we get Line(C, orthocenter(A, D, G)) != altitude(D, E, midpoint(B, G))
By directions_draw_angle on projection(midpoint(B, G), i), midpoint(B, G), orthocenter(A, D, G) we get exists(angle(projection(midpoint(B, G), i), midpoint(B, G), orthocenter(A, D, G)))
By line_inequality on altitude(G, E, midpoint(B, G)), Line(H, orthocenter(A, B, D)), G we get Line(H, orthocenter(A, B, D)) != altitude(G, E, midpoint(B, G))
By line_inequality on perpendicular_line(projection(A, i), Line(D, F)), Line(D, H), projection(A, i) we get Line(D, H) != perpendicular_line(projection(A, i), Line(D, F))
By line_inequality on altitude(D, F, midpoint(B, G)), Line(B, I), D we get Line(B, I) != altitude(D, F, midpoint(B, G))
By line_containment_inequality on orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), midpoint(B, G), Line(D, G) we get midpoint(B, G) != orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(f, altitude(projection(A, i), A, B)), orthocenter(A, B, D), f we get orthocenter(A, B, D) != line_intersection(f, altitude(projection(A, i), A, B))
By line_inequality on altitude(D, F, midpoint(B, G)), Line(C, F), D we get Line(C, F) != altitude(D, F, midpoint(B, G))
By line_inequality on perpendicular_line(projection(A, i), Line(D, F)), f, projection(A, i) we get f != perpendicular_line(projection(A, i), Line(D, F))
By line_containment_inequality on orthocenter(D, projection(A, i), orthocenter(A, B, D)), E, i we get E != orthocenter(D, projection(A, i), orthocenter(A, B, D))
By line_containment_inequality on orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), I, Line(D, G) we get I != orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G)))
By line_containment_inequality on orthocenter(D, projection(A, i), orthocenter(A, B, D)), projection(A, Line(D, G)), i we get projection(A, Line(D, G)) != orthocenter(D, projection(A, i), orthocenter(A, B, D))
By line_containment_inequality on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G)), g we get projection(A, Line(D, G)) != line_intersection(g, altitude(projection(A, Line(D, G)), A, C))
By line_inequality on perpendicular_line(projection(A, i), Line(D, F)), h, projection(A, i) we get h != perpendicular_line(projection(A, i), Line(D, F))
By line_containment_inequality on orthocenter(B, projection(A, i), orthocenter(A, B, D)), E, altitude(A, B, D) we get E != orthocenter(B, projection(A, i), orthocenter(A, B, D))
By line_containment_inequality on orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), H, Line(D, G) we get H != orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), B, g we get B != line_intersection(g, altitude(projection(A, Line(D, G)), A, C))
By line_inequality on altitude(orthocenter(A, D, G), E, midpoint(B, G)), Line(D, G), orthocenter(A, D, G) we get Line(D, G) != altitude(orthocenter(A, D, G), E, midpoint(B, G))
By line_inequality on altitude(G, E, midpoint(B, G)), Line(D, E), G we get Line(D, E) != altitude(G, E, midpoint(B, G))
By line_inequality on altitude(D, F, midpoint(B, G)), Line(E, H), D we get Line(E, H) != altitude(D, F, midpoint(B, G))
By line_inequality on altitude(G, E, midpoint(B, G)), altitude(A, B, D), G we get altitude(A, B, D) != altitude(G, E, midpoint(B, G))
By line_inequality on altitude(orthocenter(A, D, G), E, midpoint(B, G)), Line(E, F), orthocenter(A, D, G) we get Line(E, F) != altitude(orthocenter(A, D, G), E, midpoint(B, G))
By line_inequality on altitude(G, E, midpoint(B, G)), Line(C, I), G we get Line(C, I) != altitude(G, E, midpoint(B, G))
By line_inequality on altitude(D, F, midpoint(B, G)), Line(C, orthocenter(A, D, G)), D we get Line(C, orthocenter(A, D, G)) != altitude(D, F, midpoint(B, G))
By line_containment_inequality on line_intersection(f, altitude(projection(A, i), A, B)), C, f we get C != line_intersection(f, altitude(projection(A, i), A, B))
By line_inequality on perpendicular_line(projection(A, i), Line(D, F)), altitude(A, D, G), projection(A, i) we get altitude(A, D, G) != perpendicular_line(projection(A, i), Line(D, F))
By line_containment_inequality on orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), F, Line(D, G) we get F != orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G)))
By line_inequality on altitude(orthocenter(A, D, G), E, midpoint(B, G)), Line(D, H), orthocenter(A, D, G) we get Line(D, H) != altitude(orthocenter(A, D, G), E, midpoint(B, G))
By line_inequality on perpendicular_line(projection(A, Line(D, G)), Line(B, G)), Line(D, E), projection(A, Line(D, G)) we get Line(D, E) != perpendicular_line(projection(A, Line(D, G)), Line(B, G))
By line_inequality on altitude(D, E, midpoint(B, G)), median(F, B, G), D we get median(F, B, G) != altitude(D, E, midpoint(B, G))
By line_inequality on perpendicular_line(projection(A, i), Line(B, G)), f, projection(A, i) we get f != perpendicular_line(projection(A, i), Line(B, G))
By line_containment_inequality on orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G))), F, Line(D, G) we get F != orthocenter(D, orthocenter(A, D, G), projection(A, Line(D, G)))
By line_inequality on altitude(D, E, midpoint(B, G)), Line(B, I), D we get Line(B, I) != altitude(D, E, midpoint(B, G))
By line_inequality on altitude(G, E, midpoint(B, G)), Line(I, orthocenter(A, B, D)), G we get Line(I, orthocenter(A, B, D)) != altitude(G, E, midpoint(B, G))
By line_inequality on perpendicular_line(projection(A, i), Line(D, F)), Line(H, orthocenter(A, B, D)), projection(A, i) we get Line(H, orthocenter(A, B, D)) != perpendicular_line(projection(A, i), Line(D, F))
By line_inequality on perpendicular_line(projection(A, i), Line(D, F)), Line(D, E), projection(A, i) we get Line(D, E) != perpendicular_line(projection(A, i), Line(D, F))
By line_containment_inequality on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), B, h we get B != line_intersection(h, altitude(projection(A, Line(D, G)), A, D))
By line_inequality on altitude(D, E, midpoint(B, G)), Line(C, F), D we get Line(C, F) != altitude(D, E, midpoint(B, G))
By line_inequality on altitude(B, F, midpoint(B, G)), Line(I, orthocenter(A, B, D)), B we get Line(I, orthocenter(A, B, D)) != altitude(B, F, midpoint(B, G))
By line_inequality on altitude(G, E, midpoint(B, G)), Line(C, H), G we get Line(C, H) != altitude(G, E, midpoint(B, G))
By line_inequality on perpendicular_line(projection(A, i), Line(D, F)), Line(B, C), projection(A, i) we get Line(B, C) != perpendicular_line(projection(A, i), Line(D, F))
By line_inequality on perpendicular_line(projection(A, i), Line(D, F)), Line(D, G), projection(A, i) we get Line(D, G) != perpendicular_line(projection(A, i), Line(D, F))
By line_inequality on perpendicular_line(projection(A, Line(D, G)), Line(B, G)), g, projection(A, Line(D, G)) we get g != perpendicular_line(projection(A, Line(D, G)), Line(B, G))
By line_inequality on altitude(G, E, midpoint(B, G)), Line(D, F), G we get Line(D, F) != altitude(G, E, midpoint(B, G))
By line_inequality on altitude(B, F, midpoint(B, G)), Line(I, orthocenter(A, D, G)), B we get Line(I, orthocenter(A, D, G)) != altitude(B, F, midpoint(B, G))
By line_inequality on perpendicular_line(projection(A, i), Line(B, G)), Line(B, I), projection(A, i) we get Line(B, I) != perpendicular_line(projection(A, i), Line(B, G))
By line_inequality on perpendicular_line(projection(A, i), Line(B, G)), altitude(A, D, G), projection(A, i) we get altitude(A, D, G) != perpendicular_line(projection(A, i), Line(B, G))
By line_inequality on perpendicular_line(projection(A, Line(D, G)), Line(D, E)), Line(D, H), projection(A, Line(D, G)) we get Line(D, H) != perpendicular_line(projection(A, Line(D, G)), Line(D, E))
By line_containment_inequality on orthocenter(D, projection(A, i), orthocenter(A, B, D)), C, altitude(A, B, D) we get C != orthocenter(D, projection(A, i), orthocenter(A, B, D))
By line_inequality on altitude(orthocenter(A, B, D), F, midpoint(B, G)), Line(E, F), orthocenter(A, B, D) we get Line(E, F) != altitude(orthocenter(A, B, D), F, midpoint(B, G))
By line_containment_inequality on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), orthocenter(A, B, D), h we get orthocenter(A, B, D) != line_intersection(h, altitude(projection(A, Line(D, G)), A, D))
By line_inequality on altitude(orthocenter(A, D, G), E, midpoint(B, G)), f, orthocenter(A, D, G) we get f != altitude(orthocenter(A, D, G), E, midpoint(B, G))
By line_inequality on altitude(D, F, midpoint(B, G)), Line(G, I), D we get Line(G, I) != altitude(D, F, midpoint(B, G))
By line_containment_inequality on line_intersection(h, altitude(projection(A, i), A, D)), orthocenter(A, B, D), h we get orthocenter(A, B, D) != line_intersection(h, altitude(projection(A, i), A, D))
By line_inequality on altitude(D, F, midpoint(B, G)), Line(I, orthocenter(A, B, D)), D we get Line(I, orthocenter(A, B, D)) != altitude(D, F, midpoint(B, G))
By line_inequality on perpendicular_line(projection(A, i), Line(B, G)), Line(D, E), projection(A, i) we get Line(D, E) != perpendicular_line(projection(A, i), Line(B, G))
By line_inequality on perpendicular_line(projection(A, i), Line(D, F)), g, projection(A, i) we get g != perpendicular_line(projection(A, i), Line(D, F))
By line_inequality on altitude(D, F, midpoint(B, G)), altitude(A, D, G), D we get altitude(A, D, G) != altitude(D, F, midpoint(B, G))
By line_containment_inequality on line_intersection(h, altitude(projection(A, i), A, D)), H, h we get H != line_intersection(h, altitude(projection(A, i), A, D))
By line_containment_inequality on orthocenter(D, projection(A, i), orthocenter(A, B, D)), D, altitude(A, B, D) we get D != orthocenter(D, projection(A, i), orthocenter(A, B, D))
By line_inequality on altitude(G, E, midpoint(B, G)), h, G we get h != altitude(G, E, midpoint(B, G))
By line_inequality on altitude(D, F, midpoint(B, G)), median(E, B, G), D we get median(E, B, G) != altitude(D, F, midpoint(B, G))
By line_inequality on perpendicular_line(projection(A, i), Line(B, G)), h, projection(A, i) we get h != perpendicular_line(projection(A, i), Line(B, G))
By line_containment_inequality on orthocenter(B, projection(A, i), orthocenter(A, B, D)), projection(A, Line(D, G)), i we get projection(A, Line(D, G)) != orthocenter(B, projection(A, i), orthocenter(A, B, D))
By line_containment_inequality on orthocenter(B, projection(A, i), orthocenter(A, B, D)), I, i we get I != orthocenter(B, projection(A, i), orthocenter(A, B, D))
By line_inequality on perpendicular_line(projection(A, i), Line(D, F)), Line(B, I), projection(A, i) we get Line(B, I) != perpendicular_line(projection(A, i), Line(D, F))
By line_inequality on perpendicular_line(projection(A, Line(D, G)), Line(B, G)), i, projection(A, Line(D, G)) we get i != perpendicular_line(projection(A, Line(D, G)), Line(B, G))
By line_inequality on perpendicular_line(projection(A, Line(D, G)), Line(D, E)), Line(B, G), projection(A, Line(D, G)) we get Line(B, G) != perpendicular_line(projection(A, Line(D, G)), Line(D, E))
By line_inequality on perpendicular_line(projection(A, i), Line(D, F)), Line(B, G), projection(A, i) we get Line(B, G) != perpendicular_line(projection(A, i), Line(D, F))
By line_inequality on altitude(B, F, midpoint(B, G)), Line(D, H), B we get Line(D, H) != altitude(B, F, midpoint(B, G))
By line_inequality on altitude(D, F, midpoint(B, G)), Line(I, orthocenter(A, D, G)), D we get Line(I, orthocenter(A, D, G)) != altitude(D, F, midpoint(B, G))
By line_inequality on altitude(orthocenter(A, D, G), E, midpoint(B, G)), h, orthocenter(A, D, G) we get h != altitude(orthocenter(A, D, G), E, midpoint(B, G))
By line_containment_inequality on line_intersection(h, altitude(projection(A, i), A, D)), F, h we get F != line_intersection(h, altitude(projection(A, i), A, D))
By line_inequality on altitude(D, F, midpoint(B, G)), median(F, B, G), D we get median(F, B, G) != altitude(D, F, midpoint(B, G))
By line_inequality on altitude(B, F, midpoint(B, G)), Line(C, F), B we get Line(C, F) != altitude(B, F, midpoint(B, G))
By line_containment_inequality on orthocenter(B, projection(A, i), orthocenter(A, B, D)), D, altitude(A, B, D) we get D != orthocenter(B, projection(A, i), orthocenter(A, B, D))
By line_containment_inequality on orthocenter(D, projection(A, i), orthocenter(A, B, D)), orthocenter(A, B, D), i we get orthocenter(A, B, D) != orthocenter(D, projection(A, i), orthocenter(A, B, D))
By line_containment_inequality on orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), A, Line(D, G) we get A != orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G)))
By line_inequality on altitude(orthocenter(A, B, D), F, midpoint(B, G)), Line(I, orthocenter(A, D, G)), orthocenter(A, B, D) we get Line(I, orthocenter(A, D, G)) != altitude(orthocenter(A, B, D), F, midpoint(B, G))
By line_inequality on altitude(G, E, midpoint(B, G)), Line(C, D), G we get Line(C, D) != altitude(G, E, midpoint(B, G))
By line_inequality on altitude(orthocenter(A, D, G), E, midpoint(B, G)), Line(H, orthocenter(A, B, D)), orthocenter(A, D, G) we get Line(H, orthocenter(A, B, D)) != altitude(orthocenter(A, D, G), E, midpoint(B, G))
By line_inequality on perpendicular_line(projection(A, i), Line(B, G)), Line(I, orthocenter(A, B, D)), projection(A, i) we get Line(I, orthocenter(A, B, D)) != perpendicular_line(projection(A, i), Line(B, G))
By line_containment_inequality on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), F, g we get F != line_intersection(g, altitude(projection(A, Line(D, G)), A, C))
By line_inequality on altitude(D, E, midpoint(B, G)), Line(H, orthocenter(A, B, D)), D we get Line(H, orthocenter(A, B, D)) != altitude(D, E, midpoint(B, G))
By line_containment_inequality on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), I, g we get I != line_intersection(g, altitude(projection(A, Line(D, G)), A, C))
By line_inequality on altitude(orthocenter(A, D, G), E, midpoint(B, G)), Line(G, I), orthocenter(A, D, G) we get Line(G, I) != altitude(orthocenter(A, D, G), E, midpoint(B, G))
By line_inequality on altitude(orthocenter(A, D, G), E, midpoint(B, G)), Line(B, I), orthocenter(A, D, G) we get Line(B, I) != altitude(orthocenter(A, D, G), E, midpoint(B, G))
By line_inequality on perpendicular_line(projection(A, Line(D, G)), Line(D, E)), Line(G, I), projection(A, Line(D, G)) we get Line(G, I) != perpendicular_line(projection(A, Line(D, G)), Line(D, E))
By line_inequality on altitude(G, E, midpoint(B, G)), Line(E, F), G we get Line(E, F) != altitude(G, E, midpoint(B, G))
By line_inequality on perpendicular_line(projection(A, Line(D, G)), Line(B, G)), Line(I, orthocenter(A, D, G)), projection(A, Line(D, G)) we get Line(I, orthocenter(A, D, G)) != perpendicular_line(projection(A, Line(D, G)), Line(B, G))
By line_inequality on altitude(B, F, midpoint(B, G)), g, B we get g != altitude(B, F, midpoint(B, G))
By line_containment_inequality on line_intersection(f, altitude(projection(A, i), A, B)), G, f we get G != line_intersection(f, altitude(projection(A, i), A, B))
By line_inequality on altitude(B, F, midpoint(B, G)), Line(G, I), B we get Line(G, I) != altitude(B, F, midpoint(B, G))
By line_inequality on altitude(D, E, midpoint(B, G)), f, D we get f != altitude(D, E, midpoint(B, G))
By line_containment_inequality on orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), G, altitude(A, D, G) we get G != orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), D, g we get D != line_intersection(g, altitude(projection(A, Line(D, G)), A, C))
By line_inequality on perpendicular_line(projection(A, Line(D, G)), Line(D, E)), Line(C, D), projection(A, Line(D, G)) we get Line(C, D) != perpendicular_line(projection(A, Line(D, G)), Line(D, E))
By line_inequality on altitude(orthocenter(A, D, G), E, midpoint(B, G)), g, orthocenter(A, D, G) we get g != altitude(orthocenter(A, D, G), E, midpoint(B, G))
By line_inequality on perpendicular_line(projection(A, Line(D, G)), Line(B, G)), f, projection(A, Line(D, G)) we get f != perpendicular_line(projection(A, Line(D, G)), Line(B, G))
By line_inequality on altitude(B, F, midpoint(B, G)), Line(C, H), B we get Line(C, H) != altitude(B, F, midpoint(B, G))
By line_inequality on altitude(orthocenter(A, D, G), E, midpoint(B, G)), median(E, B, G), orthocenter(A, D, G) we get median(E, B, G) != altitude(orthocenter(A, D, G), E, midpoint(B, G))
By line_containment_inequality on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, i), g we get projection(A, i) != line_intersection(g, altitude(projection(A, Line(D, G)), A, C))
By line_containment_inequality on orthocenter(D, projection(A, i), orthocenter(A, B, D)), B, altitude(A, B, D) we get B != orthocenter(D, projection(A, i), orthocenter(A, B, D))
By line_inequality on altitude(G, E, midpoint(B, G)), Line(D, H), G we get Line(D, H) != altitude(G, E, midpoint(B, G))
By line_containment_inequality on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), F, h we get F != line_intersection(h, altitude(projection(A, Line(D, G)), A, D))
By line_inequality on altitude(orthocenter(A, B, D), F, midpoint(B, G)), Line(C, D), orthocenter(A, B, D) we get Line(C, D) != altitude(orthocenter(A, B, D), F, midpoint(B, G))
By line_inequality on perpendicular_line(projection(A, Line(D, G)), Line(B, G)), Line(C, orthocenter(A, D, G)), projection(A, Line(D, G)) we get Line(C, orthocenter(A, D, G)) != perpendicular_line(projection(A, Line(D, G)), Line(B, G))
By line_inequality on perpendicular_line(projection(A, Line(D, G)), Line(B, G)), altitude(A, B, D), projection(A, Line(D, G)) we get altitude(A, B, D) != perpendicular_line(projection(A, Line(D, G)), Line(B, G))
By line_inequality on perpendicular_line(projection(A, Line(D, G)), Line(D, E)), h, projection(A, Line(D, G)) we get h != perpendicular_line(projection(A, Line(D, G)), Line(D, E))
By line_containment_inequality on orthocenter(B, projection(A, i), orthocenter(A, B, D)), orthocenter(A, B, D), i we get orthocenter(A, B, D) != orthocenter(B, projection(A, i), orthocenter(A, B, D))
By line_inequality on perpendicular_line(projection(A, i), Line(B, G)), Line(C, D), projection(A, i) we get Line(C, D) != perpendicular_line(projection(A, i), Line(B, G))
By line_inequality on altitude(D, E, midpoint(B, G)), Line(G, I), D we get Line(G, I) != altitude(D, E, midpoint(B, G))
By line_containment_inequality on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), C, h we get C != line_intersection(h, altitude(projection(A, Line(D, G)), A, D))
By line_inequality on altitude(B, F, midpoint(B, G)), Line(D, E), B we get Line(D, E) != altitude(B, F, midpoint(B, G))
By line_inequality on altitude(D, F, midpoint(B, G)), Line(E, F), D we get Line(E, F) != altitude(D, F, midpoint(B, G))
By line_inequality on altitude(D, E, midpoint(B, G)), Line(B, G), D we get Line(B, G) != altitude(D, E, midpoint(B, G))
By line_containment_inequality on line_intersection(f, altitude(projection(A, i), A, B)), D, f we get D != line_intersection(f, altitude(projection(A, i), A, B))
By line_inequality on perpendicular_line(projection(A, i), Line(D, F)), Line(C, D), projection(A, i) we get Line(C, D) != perpendicular_line(projection(A, i), Line(D, F))
By line_inequality on altitude(orthocenter(A, B, D), F, midpoint(B, G)), Line(D, G), orthocenter(A, B, D) we get Line(D, G) != altitude(orthocenter(A, B, D), F, midpoint(B, G))
By line_inequality on perpendicular_line(projection(A, Line(D, G)), Line(B, G)), Line(G, I), projection(A, Line(D, G)) we get Line(G, I) != perpendicular_line(projection(A, Line(D, G)), Line(B, G))
By line_inequality on altitude(orthocenter(A, B, D), F, midpoint(B, G)), h, orthocenter(A, B, D) we get h != altitude(orthocenter(A, B, D), F, midpoint(B, G))
By line_inequality on altitude(orthocenter(A, D, G), E, midpoint(B, G)), i, orthocenter(A, D, G) we get i != altitude(orthocenter(A, D, G), E, midpoint(B, G))
By line_inequality on altitude(orthocenter(A, D, G), E, midpoint(B, G)), median(F, B, G), orthocenter(A, D, G) we get median(F, B, G) != altitude(orthocenter(A, D, G), E, midpoint(B, G))
By line_inequality on perpendicular_line(projection(A, i), Line(B, G)), Line(B, G), projection(A, i) we get Line(B, G) != perpendicular_line(projection(A, i), Line(B, G))
By line_containment_inequality on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, i), h we get projection(A, i) != line_intersection(h, altitude(projection(A, Line(D, G)), A, D))
By line_inequality on altitude(D, E, midpoint(B, G)), median(E, B, G), D we get median(E, B, G) != altitude(D, E, midpoint(B, G))
By line_inequality on altitude(B, F, midpoint(B, G)), Line(C, D), B we get Line(C, D) != altitude(B, F, midpoint(B, G))
By line_inequality on altitude(orthocenter(A, D, G), E, midpoint(B, G)), Line(C, D), orthocenter(A, D, G) we get Line(C, D) != altitude(orthocenter(A, D, G), E, midpoint(B, G))
By line_containment_inequality on line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i), f we get projection(A, i) != line_intersection(f, altitude(projection(A, i), A, B))
By line_containment_inequality on orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G))), D, altitude(A, D, G) we get D != orthocenter(G, orthocenter(A, D, G), projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i), h we get projection(A, i) != line_intersection(h, altitude(projection(A, i), A, D))
By perpendicular_lines_draw_intersection on altitude(F, B, G), altitude(projection(A, i), A, D) we get exists(line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)))
By perpendicular_lines_draw_intersection on altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D) we get exists(line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)))
By similar_triangle_basic_properties on H, A, C, F, A, E we get not_collinear(A, C, H), not_collinear(A, E, F), angle(F, A, E) == angle(H, A, C) mod 360, angle(A, C, H) == angle(A, E, F) mod 360, angle(C, H, A) == angle(E, F, A) mod 360, log(distance(A, F)) + log(distance(A, C)) == log(distance(A, H)) + log(distance(A, E)), log(distance(A, C)) + log(distance(E, F)) == log(distance(A, E)) + log(distance(C, H)), log(distance(C, H)) + log(distance(A, F)) == log(distance(E, F)) + log(distance(A, H))
By altitude_definition on projection(A, Line(D, G)), G, B, perpendicular_line(projection(A, Line(D, G)), Line(B, G)) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(projection(A, Line(D, G)), Line(B, G))
By perpendicular_lines_draw_intersection on perpendicular_line(projection(A, Line(D, G)), Line(D, E)), Line(D, E) we get exists(line_intersection(Line(D, E), perpendicular_line(projection(A, Line(D, G)), Line(D, E))))
By altitude_definition on projection(A, i), D, F, perpendicular_line(projection(A, i), Line(D, F)) we get altitude(projection(A, i), D, F) == perpendicular_line(projection(A, i), Line(D, F))
By perpendicular_lines_draw_intersection on altitude(G, E, midpoint(B, G)), median(E, B, G) we get exists(line_intersection(median(E, B, G), altitude(G, E, midpoint(B, G))))
By perpendicular_lines_draw_intersection on median(F, B, G), altitude(D, F, midpoint(B, G)) we get exists(line_intersection(median(F, B, G), altitude(D, F, midpoint(B, G))))
By perpendicular_lines_draw_intersection on altitude(projection(A, i), A, D), altitude(E, B, G) we get exists(line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)))
By similar_triangle_basic_properties on C, A, H, E, A, F we get not_collinear(A, C, H), not_collinear(A, E, F), angle(C, A, H) == angle(E, A, F) mod 360, angle(A, F, E) == angle(A, H, C) mod 360, angle(F, E, A) == angle(H, C, A) mod 360, log(distance(A, C)) + log(distance(A, F)) == log(distance(A, E)) + log(distance(A, H)), log(distance(A, F)) + log(distance(C, H)) == log(distance(A, H)) + log(distance(E, F)), log(distance(C, H)) + log(distance(A, E)) == log(distance(E, F)) + log(distance(A, C))
By anti_similar_triangle_basic_properties on C, A, H, F, A, E we get not_collinear(A, C, H), not_collinear(A, E, F), angle(C, A, H) == 0 - angle(F, A, E) mod 360, angle(A, H, C) == 0 - angle(A, E, F) mod 360, angle(H, C, A) == 0 - angle(E, F, A) mod 360, log(distance(A, C)) + log(distance(A, E)) == log(distance(A, F)) + log(distance(A, H)), log(distance(A, E)) + log(distance(C, H)) == log(distance(A, H)) + log(distance(E, F)), log(distance(C, H)) + log(distance(A, F)) == log(distance(E, F)) + log(distance(A, C))
By perpendicular_lines_draw_intersection on perpendicular_line(projection(A, i), Line(B, G)), Line(B, G) we get exists(line_intersection(Line(B, G), perpendicular_line(projection(A, i), Line(B, G))))
By anti_similar_triangle_basic_properties on F, E, A, C, H, A we get not_collinear(A, E, F), not_collinear(A, C, H), angle(F, E, A) == 0 - angle(C, H, A) mod 360, angle(E, A, F) == 0 - angle(H, A, C) mod 360, angle(A, F, E) == 0 - angle(A, C, H) mod 360, log(distance(C, H)) + log(distance(A, E)) == log(distance(E, F)) + log(distance(A, H)), log(distance(A, E)) + log(distance(A, C)) == log(distance(A, H)) + log(distance(A, F)), log(distance(A, C)) + log(distance(E, F)) == log(distance(A, F)) + log(distance(C, H))
By altitude_definition on projection(A, i), B, G, perpendicular_line(projection(A, i), Line(B, G)) we get altitude(projection(A, i), B, G) == perpendicular_line(projection(A, i), Line(B, G))
By perpendicular_lines_draw_intersection on altitude(projection(A, Line(D, G)), A, C), altitude(midpoint(B, G), D, E) we get exists(line_intersection(altitude(midpoint(B, G), D, E), altitude(projection(A, Line(D, G)), A, C)))
By perpendicular_lines_draw_intersection on altitude(B, F, midpoint(B, G)), median(F, B, G) we get exists(line_intersection(median(F, B, G), altitude(B, F, midpoint(B, G))))
By perpendicular_lines_draw_intersection on altitude(orthocenter(A, D, G), E, midpoint(B, G)), median(E, B, G) we get exists(line_intersection(median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G))))
By perpendicular_lines_draw_intersection on altitude(midpoint(B, G), D, F), altitude(projection(A, i), A, B) we get exists(line_intersection(altitude(midpoint(B, G), D, F), altitude(projection(A, i), A, B)))
By perpendicular_lines_draw_intersection on altitude(D, E, midpoint(B, G)), median(E, B, G) we get exists(line_intersection(median(E, B, G), altitude(D, E, midpoint(B, G))))
By altitude_definition on projection(A, Line(D, G)), E, D, perpendicular_line(projection(A, Line(D, G)), Line(D, E)) we get altitude(projection(A, Line(D, G)), D, E) == perpendicular_line(projection(A, Line(D, G)), Line(D, E))
By perpendicular_lines_draw_intersection on altitude(projection(A, Line(D, G)), A, D), altitude(E, B, G) we get exists(line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)))
By perpendicular_lines_draw_intersection on altitude(orthocenter(A, B, D), F, midpoint(B, G)), median(F, B, G) we get exists(line_intersection(median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G))))
By perpendicular_lines_draw_intersection on perpendicular_line(projection(A, i), Line(D, F)), Line(D, F) we get exists(line_intersection(Line(D, F), perpendicular_line(projection(A, i), Line(D, F))))
By perpendicular_lines_draw_intersection on Line(B, G), perpendicular_line(projection(A, Line(D, G)), Line(B, G)) we get exists(line_intersection(Line(B, G), perpendicular_line(projection(A, Line(D, G)), Line(B, G))))
By altitude_definition on projection(A, i), orthocenter(A, D, G), G, perpendicular_line(projection(A, i), Line(B, G)) we get perpendicular_line(projection(A, i), Line(B, G)) == altitude(projection(A, i), G, orthocenter(A, D, G))
By altitude_definition on projection(A, i), midpoint(B, G), B, perpendicular_line(projection(A, i), Line(B, G)) we get altitude(projection(A, i), B, midpoint(B, G)) == perpendicular_line(projection(A, i), Line(B, G))
By altitude_definition on projection(A, Line(D, G)), orthocenter(A, D, G), B, perpendicular_line(projection(A, Line(D, G)), Line(B, G)) we get perpendicular_line(projection(A, Line(D, G)), Line(B, G)) == altitude(projection(A, Line(D, G)), B, orthocenter(A, D, G))
By altitude_definition on projection(A, i), B, orthocenter(A, D, G), perpendicular_line(projection(A, i), Line(B, G)) we get perpendicular_line(projection(A, i), Line(B, G)) == altitude(projection(A, i), B, orthocenter(A, D, G))
By altitude_definition on projection(A, i), orthocenter(A, D, G), midpoint(B, G), perpendicular_line(projection(A, i), Line(B, G)) we get perpendicular_line(projection(A, i), Line(B, G)) == altitude(projection(A, i), midpoint(B, G), orthocenter(A, D, G))
By anti_similar_triangle_basic_properties on A, E, H, A, F, C we get not_collinear(A, E, H), not_collinear(A, C, F), angle(A, E, H) == 0 - angle(A, F, C) mod 360, angle(E, H, A) == 0 - angle(F, C, A) mod 360, angle(H, A, E) == 0 - angle(C, A, F) mod 360, log(distance(A, E)) + log(distance(C, F)) == log(distance(A, F)) + log(distance(E, H)), log(distance(C, F)) + log(distance(A, H)) == log(distance(E, H)) + log(distance(A, C)), log(distance(A, C)) + log(distance(A, E)) == log(distance(A, H)) + log(distance(A, F))
By altitude_definition on projection(A, Line(D, G)), midpoint(B, G), G, perpendicular_line(projection(A, Line(D, G)), Line(B, G)) we get altitude(projection(A, Line(D, G)), G, midpoint(B, G)) == perpendicular_line(projection(A, Line(D, G)), Line(B, G))
By anti_similar_triangle_basic_properties on E, F, H, F, E, C we get not_collinear(E, F, H), not_collinear(C, E, F), angle(E, F, H) == 0 - angle(F, E, C) mod 360, angle(F, H, E) == 0 - angle(E, C, F) mod 360, angle(H, E, F) == 0 - angle(C, F, E) mod 360, log(distance(E, F)) + log(distance(C, E)) == log(distance(E, F)) + log(distance(F, H)), log(distance(C, E)) + log(distance(E, H)) == log(distance(F, H)) + log(distance(C, F)), log(distance(C, F)) + log(distance(E, F)) == log(distance(E, H)) + log(distance(E, F))
By altitude_definition on projection(A, Line(D, G)), E, orthocenter(A, D, G), perpendicular_line(projection(A, Line(D, G)), Line(D, E)) we get perpendicular_line(projection(A, Line(D, G)), Line(D, E)) == altitude(projection(A, Line(D, G)), E, orthocenter(A, D, G))
By altitude_definition on projection(A, i), F, orthocenter(A, B, D), perpendicular_line(projection(A, i), Line(D, F)) we get perpendicular_line(projection(A, i), Line(D, F)) == altitude(projection(A, i), F, orthocenter(A, B, D))
By altitude_definition on projection(A, i), orthocenter(A, B, D), midpoint(B, G), perpendicular_line(projection(A, i), Line(B, G)) we get perpendicular_line(projection(A, i), Line(B, G)) == altitude(projection(A, i), midpoint(B, G), orthocenter(A, B, D))
By altitude_definition on projection(A, Line(D, G)), orthocenter(A, B, D), midpoint(B, G), perpendicular_line(projection(A, Line(D, G)), Line(B, G)) we get perpendicular_line(projection(A, Line(D, G)), Line(B, G)) == altitude(projection(A, Line(D, G)), midpoint(B, G), orthocenter(A, B, D))
By altitude_definition on projection(A, i), G, orthocenter(A, B, D), perpendicular_line(projection(A, i), Line(B, G)) we get perpendicular_line(projection(A, i), Line(B, G)) == altitude(projection(A, i), G, orthocenter(A, B, D))
By altitude_definition on projection(A, Line(D, G)), orthocenter(A, D, G), midpoint(B, G), perpendicular_line(projection(A, Line(D, G)), Line(B, G)) we get perpendicular_line(projection(A, Line(D, G)), Line(B, G)) == altitude(projection(A, Line(D, G)), midpoint(B, G), orthocenter(A, D, G))
By anti_similar_triangle_basic_properties on E, F, C, F, E, H we get not_collinear(C, E, F), not_collinear(E, F, H), angle(E, F, C) == 0 - angle(F, E, H) mod 360, angle(F, C, E) == 0 - angle(E, H, F) mod 360, angle(C, E, F) == 0 - angle(H, F, E) mod 360, log(distance(E, F)) + log(distance(C, F)) == log(distance(E, F)) + log(distance(E, H)), log(distance(C, F)) + log(distance(F, H)) == log(distance(E, H)) + log(distance(C, E)), log(distance(C, E)) + log(distance(E, F)) == log(distance(F, H)) + log(distance(E, F))
By anti_similar_triangle_basic_properties on C, F, A, H, E, A we get not_collinear(A, C, F), not_collinear(A, E, H), angle(C, F, A) == 0 - angle(H, E, A) mod 360, angle(F, A, C) == 0 - angle(E, A, H) mod 360, angle(A, C, F) == 0 - angle(A, H, E) mod 360, log(distance(C, F)) + log(distance(A, E)) == log(distance(E, H)) + log(distance(A, F)), log(distance(A, E)) + log(distance(A, C)) == log(distance(A, F)) + log(distance(A, H)), log(distance(A, C)) + log(distance(E, H)) == log(distance(A, H)) + log(distance(C, F))
By altitude_definition on projection(A, i), orthocenter(A, B, D), orthocenter(A, D, G), perpendicular_line(projection(A, i), Line(B, G)) we get perpendicular_line(projection(A, i), Line(B, G)) == altitude(projection(A, i), orthocenter(A, B, D), orthocenter(A, D, G))
By altitude_definition on projection(A, i), midpoint(B, G), G, perpendicular_line(projection(A, i), Line(B, G)) we get altitude(projection(A, i), G, midpoint(B, G)) == perpendicular_line(projection(A, i), Line(B, G))
By altitude_definition on projection(A, Line(D, G)), midpoint(B, G), B, perpendicular_line(projection(A, Line(D, G)), Line(B, G)) we get altitude(projection(A, Line(D, G)), B, midpoint(B, G)) == perpendicular_line(projection(A, Line(D, G)), Line(B, G))
By altitude_definition on projection(A, Line(D, G)), orthocenter(A, B, D), orthocenter(A, D, G), perpendicular_line(projection(A, Line(D, G)), Line(B, G)) we get perpendicular_line(projection(A, Line(D, G)), Line(B, G)) == altitude(projection(A, Line(D, G)), orthocenter(A, B, D), orthocenter(A, D, G))
By altitude_definition on projection(A, Line(D, G)), G, orthocenter(A, B, D), perpendicular_line(projection(A, Line(D, G)), Line(B, G)) we get perpendicular_line(projection(A, Line(D, G)), Line(B, G)) == altitude(projection(A, Line(D, G)), G, orthocenter(A, B, D))
By altitude_definition on projection(A, Line(D, G)), orthocenter(A, B, D), B, perpendicular_line(projection(A, Line(D, G)), Line(B, G)) we get perpendicular_line(projection(A, Line(D, G)), Line(B, G)) == altitude(projection(A, Line(D, G)), B, orthocenter(A, B, D))
By anti_similar_triangle_basic_properties on H, E, C, C, F, H we get not_collinear(C, E, H), not_collinear(C, F, H), angle(H, E, C) == 0 - angle(C, F, H) mod 360, angle(E, C, H) == 0 - angle(F, H, C) mod 360, angle(C, H, E) == 0 - angle(H, C, F) mod 360, log(distance(C, F)) + log(distance(C, E)) == log(distance(E, H)) + log(distance(F, H)), log(distance(C, E)) + log(distance(C, H)) == log(distance(F, H)) + log(distance(C, H)), log(distance(C, H)) + log(distance(C, F)) == log(distance(C, H)) + log(distance(E, H))
By line_definition on line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i), altitude(projection(A, i), A, B) we get altitude(projection(A, i), A, B) == Line(projection(A, i), line_intersection(f, altitude(projection(A, i), A, B)))
By line_definition on line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i), altitude(projection(A, i), A, D) we get altitude(projection(A, i), A, D) == Line(projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)))
By line_definition on projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D) we get altitude(projection(A, Line(D, G)), A, D) == Line(projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By line_definition on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G)), altitude(projection(A, Line(D, G)), A, C) we get altitude(projection(A, Line(D, G)), A, C) == Line(projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)))
By perpendicular_line_definition on projection(A, i), altitude(projection(A, i), B, G), altitude(F, A, D) we get altitude(projection(A, i), B, G) == perpendicular_line(projection(A, i), altitude(F, A, D))
By perpendicular_line_definition on line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(F, B, G), altitude(E, A, D) we get altitude(F, B, G) == perpendicular_line(line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(E, A, D))
By perpendicular_line_definition on orthocenter(A, E, projection(A, Line(D, G))), parallel_line(E, Line(D, G)), altitude(A, D, G) we get parallel_line(E, Line(D, G)) == perpendicular_line(orthocenter(A, E, projection(A, Line(D, G))), altitude(A, D, G))
By perpendicular_line_definition on line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G) we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)), altitude(projection(A, i), A, D), h we get altitude(projection(A, i), A, D) == perpendicular_line(line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)), h)
By perpendicular_line_definition on line_intersection(Line(D, F), altitude(projection(A, i), D, F)), altitude(projection(A, i), D, F), altitude(midpoint(B, G), A, B) we get altitude(projection(A, i), D, F) == perpendicular_line(line_intersection(Line(D, F), altitude(projection(A, i), D, F)), altitude(midpoint(B, G), A, B))
By perpendicular_line_definition on orthocenter(D, midpoint(B, G), projection(A, i)), altitude(projection(A, i), A, D), altitude(projection(A, i), B, G) we get altitude(projection(A, i), A, D) == perpendicular_line(orthocenter(D, midpoint(B, G), projection(A, i)), altitude(projection(A, i), B, G))
By perpendicular_line_definition on line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)), altitude(projection(A, i), A, D), altitude(projection(A, i), B, G) we get altitude(projection(A, i), A, D) == perpendicular_line(line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)), altitude(projection(A, i), B, G))
By perpendicular_line_definition on projection(A, i), Line(F, projection(A, i)), altitude(A, F, projection(A, i)) we get Line(F, projection(A, i)) == perpendicular_line(projection(A, i), altitude(A, F, projection(A, i)))
By perpendicular_line_definition on orthocenter(D, midpoint(B, G), projection(A, i)), altitude(midpoint(B, G), B, D), parallel_line(midpoint(B, G), i) we get altitude(midpoint(B, G), B, D) == perpendicular_line(orthocenter(D, midpoint(B, G), projection(A, i)), parallel_line(midpoint(B, G), i))
By perpendicular_line_definition on projection(E, h), altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G) we get altitude(E, A, D) == perpendicular_line(projection(E, h), altitude(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on line_intersection(altitude(midpoint(B, G), D, F), altitude(projection(A, i), A, B)), altitude(midpoint(B, G), D, F), altitude(midpoint(B, G), A, B) we get altitude(midpoint(B, G), D, F) == perpendicular_line(line_intersection(altitude(midpoint(B, G), D, F), altitude(projection(A, i), A, B)), altitude(midpoint(B, G), A, B))
By perpendicular_line_definition on orthocenter(D, midpoint(B, G), projection(A, Line(D, G))), altitude(midpoint(B, G), D, G), Line(D, G) we get altitude(midpoint(B, G), D, G) == perpendicular_line(orthocenter(D, midpoint(B, G), projection(A, Line(D, G))), Line(D, G))
By perpendicular_line_definition on orthocenter(A, E, midpoint(B, G)), altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G) we get altitude(E, A, D) == perpendicular_line(orthocenter(A, E, midpoint(B, G)), altitude(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(projection(A, i), B, G)), Line(B, G), altitude(projection(A, Line(D, G)), B, G) we get Line(B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(projection(A, i), B, G)), altitude(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(E, B, G), altitude(F, A, D) we get altitude(E, B, G) == perpendicular_line(line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(F, A, D))
By perpendicular_line_definition on line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)), altitude(F, B, G), altitude(F, A, D) we get altitude(F, B, G) == perpendicular_line(line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)), altitude(F, A, D))
By perpendicular_line_definition on line_intersection(median(E, B, G), altitude(G, E, midpoint(B, G))), altitude(G, E, midpoint(B, G)), median(E, B, G) we get altitude(G, E, midpoint(B, G)) == perpendicular_line(line_intersection(median(E, B, G), altitude(G, E, midpoint(B, G))), median(E, B, G))
By perpendicular_line_definition on line_intersection(median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G))), median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G)) we get median(F, B, G) == perpendicular_line(line_intersection(median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G))), altitude(orthocenter(A, B, D), F, midpoint(B, G)))
By perpendicular_line_definition on orthocenter(A, midpoint(B, G), projection(A, i)), altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G) we get altitude(projection(A, i), A, D) == perpendicular_line(orthocenter(A, midpoint(B, G), projection(A, i)), altitude(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D), altitude(E, B, G) we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(E, B, G))
By perpendicular_line_definition on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, i), B, G) we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, i), B, G))
By perpendicular_line_definition on orthocenter(D, F, midpoint(B, G)), altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G) we get altitude(F, A, D) == perpendicular_line(orthocenter(D, F, midpoint(B, G)), altitude(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), Line(D, E), altitude(midpoint(B, G), D, E) we get Line(D, E) == perpendicular_line(line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), altitude(midpoint(B, G), D, E))
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G), altitude(projection(A, i), A, D) we get altitude(projection(A, i), B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(projection(A, i), B, G)), altitude(projection(A, i), A, D))
By perpendicular_line_definition on line_intersection(median(E, B, G), altitude(D, E, midpoint(B, G))), median(E, B, G), altitude(A, E, midpoint(B, G)) we get median(E, B, G) == perpendicular_line(line_intersection(median(E, B, G), altitude(D, E, midpoint(B, G))), altitude(A, E, midpoint(B, G)))
By perpendicular_line_definition on projection(A, Line(D, G)), altitude(projection(A, Line(D, G)), B, G), altitude(E, A, D) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(projection(A, Line(D, G)), altitude(E, A, D))
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), altitude(projection(A, Line(D, G)), A, D) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), A, D))
By perpendicular_line_definition on midpoint(B, G), Line(midpoint(B, G), projection(A, Line(D, G))), altitude(D, midpoint(B, G), projection(A, Line(D, G))) we get Line(midpoint(B, G), projection(A, Line(D, G))) == perpendicular_line(midpoint(B, G), altitude(D, midpoint(B, G), projection(A, Line(D, G))))
By perpendicular_line_definition on orthocenter(A, E, midpoint(B, G)), altitude(midpoint(B, G), A, C), altitude(projection(A, Line(D, G)), D, E) we get altitude(midpoint(B, G), A, C) == perpendicular_line(orthocenter(A, E, midpoint(B, G)), altitude(projection(A, Line(D, G)), D, E))
By perpendicular_line_definition on orthocenter(A, midpoint(B, G), projection(A, i)), parallel_line(midpoint(B, G), i), altitude(midpoint(B, G), B, D) we get parallel_line(midpoint(B, G), i) == perpendicular_line(orthocenter(A, midpoint(B, G), projection(A, i)), altitude(midpoint(B, G), B, D))
By perpendicular_line_definition on line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(E, B, G), altitude(projection(A, i), A, D) we get altitude(E, B, G) == perpendicular_line(line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, i), A, D))
By perpendicular_line_definition on line_intersection(median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G))), altitude(orthocenter(A, B, D), F, midpoint(B, G)), median(F, B, G) we get altitude(orthocenter(A, B, D), F, midpoint(B, G)) == perpendicular_line(line_intersection(median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G))), median(F, B, G))
By perpendicular_line_definition on line_intersection(h, altitude(projection(A, i), A, D)), altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G) we get altitude(projection(A, i), A, D) == perpendicular_line(line_intersection(h, altitude(projection(A, i), A, D)), altitude(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on line_intersection(median(E, B, G), altitude(D, E, midpoint(B, G))), altitude(D, E, midpoint(B, G)), median(E, B, G) we get altitude(D, E, midpoint(B, G)) == perpendicular_line(line_intersection(median(E, B, G), altitude(D, E, midpoint(B, G))), median(E, B, G))
By perpendicular_line_definition on line_intersection(median(F, B, G), altitude(D, F, midpoint(B, G))), median(F, B, G), altitude(B, F, midpoint(B, G)) we get median(F, B, G) == perpendicular_line(line_intersection(median(F, B, G), altitude(D, F, midpoint(B, G))), altitude(B, F, midpoint(B, G)))
By perpendicular_line_definition on line_intersection(altitude(E, B, G), altitude(F, A, D)), altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G) we get altitude(F, A, D) == perpendicular_line(line_intersection(altitude(E, B, G), altitude(F, A, D)), altitude(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on projection(A, i), Line(midpoint(B, G), projection(A, i)), altitude(A, midpoint(B, G), projection(A, i)) we get Line(midpoint(B, G), projection(A, i)) == perpendicular_line(projection(A, i), altitude(A, midpoint(B, G), projection(A, i)))
By perpendicular_line_definition on line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G) we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on line_intersection(altitude(midpoint(B, G), D, F), altitude(projection(A, i), A, B)), altitude(midpoint(B, G), D, F), altitude(projection(A, i), A, B) we get altitude(midpoint(B, G), D, F) == perpendicular_line(line_intersection(altitude(midpoint(B, G), D, F), altitude(projection(A, i), A, B)), altitude(projection(A, i), A, B))
By perpendicular_line_definition on line_intersection(median(F, B, G), altitude(B, F, midpoint(B, G))), median(F, B, G), altitude(B, F, midpoint(B, G)) we get median(F, B, G) == perpendicular_line(line_intersection(median(F, B, G), altitude(B, F, midpoint(B, G))), altitude(B, F, midpoint(B, G)))
By perpendicular_line_definition on orthocenter(A, F, projection(A, i)), altitude(projection(A, i), A, B), f we get altitude(projection(A, i), A, B) == perpendicular_line(orthocenter(A, F, projection(A, i)), f)
By perpendicular_line_definition on projection(F, h), altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G) we get altitude(F, A, D) == perpendicular_line(projection(F, h), altitude(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on orthocenter(D, midpoint(B, G), projection(A, i)), altitude(projection(A, i), A, D), h we get altitude(projection(A, i), A, D) == perpendicular_line(orthocenter(D, midpoint(B, G), projection(A, i)), h)
By perpendicular_line_definition on orthocenter(A, E, projection(A, Line(D, G))), parallel_line(E, Line(D, G)), altitude(E, D, G) we get parallel_line(E, Line(D, G)) == perpendicular_line(orthocenter(A, E, projection(A, Line(D, G))), altitude(E, D, G))
By perpendicular_line_definition on orthocenter(D, midpoint(B, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, i), B, G) we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(orthocenter(D, midpoint(B, G), projection(A, Line(D, G))), altitude(projection(A, i), B, G))
By perpendicular_line_definition on orthocenter(E, G, projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), A, C), altitude(midpoint(B, G), D, E) we get altitude(projection(A, Line(D, G)), A, C) == perpendicular_line(orthocenter(E, G, projection(A, Line(D, G))), altitude(midpoint(B, G), D, E))
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(projection(A, i), B, G)), Line(B, G), altitude(projection(A, i), B, G) we get Line(B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G))
By perpendicular_line_definition on orthocenter(B, F, projection(A, i)), altitude(F, B, D), parallel_line(F, i) we get altitude(F, B, D) == perpendicular_line(orthocenter(B, F, projection(A, i)), parallel_line(F, i))
By perpendicular_line_definition on midpoint(B, G), Line(midpoint(B, G), projection(A, Line(D, G))), altitude(A, midpoint(B, G), projection(A, Line(D, G))) we get Line(midpoint(B, G), projection(A, Line(D, G))) == perpendicular_line(midpoint(B, G), altitude(A, midpoint(B, G), projection(A, Line(D, G))))
By perpendicular_line_definition on projection(midpoint(B, G), g), altitude(midpoint(B, G), A, C), altitude(projection(A, Line(D, G)), D, E) we get altitude(midpoint(B, G), A, C) == perpendicular_line(projection(midpoint(B, G), g), altitude(projection(A, Line(D, G)), D, E))
By perpendicular_line_definition on line_intersection(f, altitude(projection(A, i), A, B)), altitude(projection(A, i), A, B), altitude(projection(A, i), D, F) we get altitude(projection(A, i), A, B) == perpendicular_line(line_intersection(f, altitude(projection(A, i), A, B)), altitude(projection(A, i), D, F))
By perpendicular_line_definition on projection(A, i), altitude(projection(A, i), B, G), altitude(projection(A, i), A, D) we get altitude(projection(A, i), B, G) == perpendicular_line(projection(A, i), altitude(projection(A, i), A, D))
By perpendicular_line_definition on line_intersection(median(E, B, G), altitude(G, E, midpoint(B, G))), median(E, B, G), altitude(D, E, midpoint(B, G)) we get median(E, B, G) == perpendicular_line(line_intersection(median(E, B, G), altitude(G, E, midpoint(B, G))), altitude(D, E, midpoint(B, G)))
By perpendicular_line_definition on orthocenter(B, F, projection(A, i)), altitude(projection(A, i), A, B), altitude(projection(A, i), D, F) we get altitude(projection(A, i), A, B) == perpendicular_line(orthocenter(B, F, projection(A, i)), altitude(projection(A, i), D, F))
By median_definition on projection(A, Line(D, G)), G, B, Line(midpoint(B, G), projection(A, Line(D, G))) we get median(projection(A, Line(D, G)), B, G) == Line(midpoint(B, G), projection(A, Line(D, G)))
By perpendicular_line_definition on line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)), altitude(E, B, G), altitude(F, A, D) we get altitude(E, B, G) == perpendicular_line(line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)), altitude(F, A, D))
By perpendicular_line_definition on orthocenter(A, midpoint(B, G), projection(A, i)), altitude(projection(A, i), A, D), altitude(E, B, G) we get altitude(projection(A, i), A, D) == perpendicular_line(orthocenter(A, midpoint(B, G), projection(A, i)), altitude(E, B, G))
By perpendicular_line_definition on orthocenter(B, F, projection(A, i)), altitude(projection(A, i), A, B), altitude(midpoint(B, G), D, F) we get altitude(projection(A, i), A, B) == perpendicular_line(orthocenter(B, F, projection(A, i)), altitude(midpoint(B, G), D, F))
By perpendicular_line_definition on projection(A, Line(D, G)), altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, i), B, G) we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(projection(A, Line(D, G)), altitude(projection(A, i), B, G))
By perpendicular_line_definition on projection(A, i), altitude(projection(A, i), D, F), altitude(midpoint(B, G), A, B) we get altitude(projection(A, i), D, F) == perpendicular_line(projection(A, i), altitude(midpoint(B, G), A, B))
By perpendicular_line_definition on orthocenter(D, midpoint(B, G), projection(A, i)), altitude(midpoint(B, G), B, D), i we get altitude(midpoint(B, G), B, D) == perpendicular_line(orthocenter(D, midpoint(B, G), projection(A, i)), i)
By perpendicular_line_definition on orthocenter(B, F, midpoint(B, G)), altitude(midpoint(B, G), A, B), altitude(projection(A, i), D, F) we get altitude(midpoint(B, G), A, B) == perpendicular_line(orthocenter(B, F, midpoint(B, G)), altitude(projection(A, i), D, F))
By perpendicular_line_definition on line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D) we get altitude(F, B, G) == perpendicular_line(line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D))
By perpendicular_line_definition on projection(A, Line(D, G)), altitude(projection(A, Line(D, G)), B, G), altitude(F, A, D) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(projection(A, Line(D, G)), altitude(F, A, D))
By perpendicular_line_definition on F, Line(F, projection(A, i)), altitude(B, F, projection(A, i)) we get Line(F, projection(A, i)) == perpendicular_line(F, altitude(B, F, projection(A, i)))
By perpendicular_line_definition on orthocenter(D, midpoint(B, G), projection(A, i)), altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G) we get altitude(projection(A, i), A, D) == perpendicular_line(orthocenter(D, midpoint(B, G), projection(A, i)), altitude(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on line_intersection(median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G))), median(E, B, G), altitude(G, E, midpoint(B, G)) we get median(E, B, G) == perpendicular_line(line_intersection(median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G))), altitude(G, E, midpoint(B, G)))
By perpendicular_line_definition on line_intersection(median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G))), median(F, B, G), altitude(B, F, midpoint(B, G)) we get median(F, B, G) == perpendicular_line(line_intersection(median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G))), altitude(B, F, midpoint(B, G)))
By perpendicular_line_definition on orthocenter(A, F, midpoint(B, G)), altitude(midpoint(B, G), A, B), altitude(projection(A, i), D, F) we get altitude(midpoint(B, G), A, B) == perpendicular_line(orthocenter(A, F, midpoint(B, G)), altitude(projection(A, i), D, F))
By perpendicular_line_definition on orthocenter(A, midpoint(B, G), projection(A, Line(D, G))), parallel_line(midpoint(B, G), Line(D, G)), altitude(E, D, G) we get parallel_line(midpoint(B, G), Line(D, G)) == perpendicular_line(orthocenter(A, midpoint(B, G), projection(A, Line(D, G))), altitude(E, D, G))
By perpendicular_line_definition on line_intersection(altitude(midpoint(B, G), D, F), altitude(projection(A, i), A, B)), altitude(midpoint(B, G), D, F), Line(D, F) we get altitude(midpoint(B, G), D, F) == perpendicular_line(line_intersection(altitude(midpoint(B, G), D, F), altitude(projection(A, i), A, B)), Line(D, F))
By perpendicular_line_definition on orthocenter(A, F, projection(A, i)), altitude(A, F, projection(A, i)), Line(F, projection(A, i)) we get altitude(A, F, projection(A, i)) == perpendicular_line(orthocenter(A, F, projection(A, i)), Line(F, projection(A, i)))
By perpendicular_line_definition on orthocenter(A, E, midpoint(B, G)), altitude(E, A, D), altitude(projection(A, i), B, G) we get altitude(E, A, D) == perpendicular_line(orthocenter(A, E, midpoint(B, G)), altitude(projection(A, i), B, G))
By perpendicular_line_definition on line_intersection(median(F, B, G), altitude(D, F, midpoint(B, G))), median(F, B, G), altitude(A, F, midpoint(B, G)) we get median(F, B, G) == perpendicular_line(line_intersection(median(F, B, G), altitude(D, F, midpoint(B, G))), altitude(A, F, midpoint(B, G)))
By perpendicular_line_definition on projection(A, Line(D, G)), Line(E, projection(A, Line(D, G))), altitude(G, E, projection(A, Line(D, G))) we get Line(E, projection(A, Line(D, G))) == perpendicular_line(projection(A, Line(D, G)), altitude(G, E, projection(A, Line(D, G))))
By perpendicular_line_definition on midpoint(B, G), Line(midpoint(B, G), projection(A, i)), altitude(D, midpoint(B, G), projection(A, i)) we get Line(midpoint(B, G), projection(A, i)) == perpendicular_line(midpoint(B, G), altitude(D, midpoint(B, G), projection(A, i)))
By perpendicular_line_definition on line_intersection(median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G))), median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G)) we get median(E, B, G) == perpendicular_line(line_intersection(median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G))), altitude(orthocenter(A, D, G), E, midpoint(B, G)))
By perpendicular_line_definition on midpoint(B, G), Line(midpoint(B, G), projection(A, i)), altitude(A, midpoint(B, G), projection(A, i)) we get Line(midpoint(B, G), projection(A, i)) == perpendicular_line(midpoint(B, G), altitude(A, midpoint(B, G), projection(A, i)))
By perpendicular_line_definition on line_intersection(h, altitude(projection(A, i), A, D)), altitude(projection(A, i), A, D), altitude(projection(A, i), B, G) we get altitude(projection(A, i), A, D) == perpendicular_line(line_intersection(h, altitude(projection(A, i), A, D)), altitude(projection(A, i), B, G))
By perpendicular_line_definition on orthocenter(A, F, midpoint(B, G)), altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G) we get altitude(F, A, D) == perpendicular_line(orthocenter(A, F, midpoint(B, G)), altitude(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on orthocenter(A, E, projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), A, C), altitude(projection(A, Line(D, G)), D, E) we get altitude(projection(A, Line(D, G)), A, C) == perpendicular_line(orthocenter(A, E, projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), D, E))
By perpendicular_line_definition on line_intersection(median(F, B, G), altitude(D, F, midpoint(B, G))), altitude(D, F, midpoint(B, G)), median(F, B, G) we get altitude(D, F, midpoint(B, G)) == perpendicular_line(line_intersection(median(F, B, G), altitude(D, F, midpoint(B, G))), median(F, B, G))
By perpendicular_line_definition on line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), Line(D, E), altitude(projection(A, Line(D, G)), D, E) we get Line(D, E) == perpendicular_line(line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), altitude(projection(A, Line(D, G)), D, E))
By projection_definition on E, line_intersection(Line(B, G), altitude(E, B, G)), Line(B, G) we get projection(E, Line(B, G)) == line_intersection(Line(B, G), altitude(E, B, G))
By perpendicular_line_definition on E, Line(E, projection(A, Line(D, G))), altitude(A, E, projection(A, Line(D, G))) we get Line(E, projection(A, Line(D, G))) == perpendicular_line(E, altitude(A, E, projection(A, Line(D, G))))
By perpendicular_line_definition on orthocenter(E, G, projection(A, Line(D, G))), altitude(G, E, projection(A, Line(D, G))), Line(E, projection(A, Line(D, G))) we get altitude(G, E, projection(A, Line(D, G))) == perpendicular_line(orthocenter(E, G, projection(A, Line(D, G))), Line(E, projection(A, Line(D, G))))
By perpendicular_line_definition on orthocenter(D, E, midpoint(B, G)), altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G) we get altitude(E, A, D) == perpendicular_line(orthocenter(D, E, midpoint(B, G)), altitude(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on orthocenter(A, midpoint(B, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), A, D), h we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(orthocenter(A, midpoint(B, G), projection(A, Line(D, G))), h)
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(projection(A, i), B, G)), Line(B, G), altitude(E, B, G) we get Line(B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(projection(A, i), B, G)), altitude(E, B, G))
By perpendicular_line_definition on line_intersection(altitude(midpoint(B, G), D, E), altitude(projection(A, Line(D, G)), A, C)), altitude(projection(A, Line(D, G)), A, C), g we get altitude(projection(A, Line(D, G)), A, C) == perpendicular_line(line_intersection(altitude(midpoint(B, G), D, E), altitude(projection(A, Line(D, G)), A, C)), g)
By perpendicular_line_definition on projection(A, Line(D, G)), altitude(projection(A, Line(D, G)), B, G), altitude(projection(A, i), A, D) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(projection(A, Line(D, G)), altitude(projection(A, i), A, D))
By perpendicular_line_definition on line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)), altitude(F, B, G), altitude(E, A, D) we get altitude(F, B, G) == perpendicular_line(line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)), altitude(E, A, D))
By perpendicular_line_definition on line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)), altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G) we get altitude(projection(A, i), A, D) == perpendicular_line(line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)), altitude(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on line_intersection(median(F, B, G), altitude(B, F, midpoint(B, G))), median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G)) we get median(F, B, G) == perpendicular_line(line_intersection(median(F, B, G), altitude(B, F, midpoint(B, G))), altitude(orthocenter(A, B, D), F, midpoint(B, G)))
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G), altitude(E, A, D) we get altitude(projection(A, i), B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(projection(A, i), B, G)), altitude(E, A, D))
By perpendicular_line_definition on orthocenter(D, midpoint(B, G), projection(A, Line(D, G))), altitude(D, midpoint(B, G), projection(A, Line(D, G))), Line(midpoint(B, G), projection(A, Line(D, G))) we get altitude(D, midpoint(B, G), projection(A, Line(D, G))) == perpendicular_line(orthocenter(D, midpoint(B, G), projection(A, Line(D, G))), Line(midpoint(B, G), projection(A, Line(D, G))))
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), altitude(F, A, D) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), altitude(F, A, D))
By perpendicular_line_definition on line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)), altitude(projection(A, i), A, D), altitude(projection(A, i), B, G) we get altitude(projection(A, i), A, D) == perpendicular_line(line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)), altitude(projection(A, i), B, G))
By perpendicular_line_definition on projection(A, i), altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G) we get altitude(projection(A, i), A, D) == perpendicular_line(projection(A, i), altitude(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on line_intersection(median(E, B, G), altitude(D, E, midpoint(B, G))), median(E, B, G), altitude(G, E, midpoint(B, G)) we get median(E, B, G) == perpendicular_line(line_intersection(median(E, B, G), altitude(D, E, midpoint(B, G))), altitude(G, E, midpoint(B, G)))
By perpendicular_line_definition on orthocenter(A, E, projection(A, Line(D, G))), altitude(A, E, projection(A, Line(D, G))), Line(E, projection(A, Line(D, G))) we get altitude(A, E, projection(A, Line(D, G))) == perpendicular_line(orthocenter(A, E, projection(A, Line(D, G))), Line(E, projection(A, Line(D, G))))
By perpendicular_line_definition on line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), Line(D, E), g we get Line(D, E) == perpendicular_line(line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), g)
By perpendicular_line_definition on orthocenter(E, G, projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), A, C), altitude(projection(A, Line(D, G)), D, E) we get altitude(projection(A, Line(D, G)), A, C) == perpendicular_line(orthocenter(E, G, projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), D, E))
By perpendicular_line_definition on line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D), h we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)), h)
By perpendicular_line_definition on orthocenter(D, midpoint(B, G), projection(A, i)), altitude(projection(A, i), A, D), altitude(E, B, G) we get altitude(projection(A, i), A, D) == perpendicular_line(orthocenter(D, midpoint(B, G), projection(A, i)), altitude(E, B, G))
By perpendicular_line_definition on projection(E, h), altitude(E, A, D), altitude(projection(A, i), B, G) we get altitude(E, A, D) == perpendicular_line(projection(E, h), altitude(projection(A, i), B, G))
By perpendicular_line_definition on projection(A, i), altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D) we get altitude(projection(A, i), B, G) == perpendicular_line(projection(A, i), altitude(projection(A, Line(D, G)), A, D))
By perpendicular_line_definition on orthocenter(A, midpoint(B, G), projection(A, i)), altitude(projection(A, i), A, D), h we get altitude(projection(A, i), A, D) == perpendicular_line(orthocenter(A, midpoint(B, G), projection(A, i)), h)
By perpendicular_line_definition on orthocenter(A, E, projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), A, C), altitude(midpoint(B, G), D, E) we get altitude(projection(A, Line(D, G)), A, C) == perpendicular_line(orthocenter(A, E, projection(A, Line(D, G))), altitude(midpoint(B, G), D, E))
By perpendicular_line_definition on line_intersection(median(F, B, G), altitude(B, F, midpoint(B, G))), altitude(B, F, midpoint(B, G)), median(F, B, G) we get altitude(B, F, midpoint(B, G)) == perpendicular_line(line_intersection(median(F, B, G), altitude(B, F, midpoint(B, G))), median(F, B, G))
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G), altitude(F, A, D) we get altitude(projection(A, i), B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(projection(A, i), B, G)), altitude(F, A, D))
By perpendicular_line_definition on F, Line(F, projection(A, i)), altitude(A, F, projection(A, i)) we get Line(F, projection(A, i)) == perpendicular_line(F, altitude(A, F, projection(A, i)))
By perpendicular_line_definition on line_intersection(altitude(midpoint(B, G), D, F), altitude(projection(A, i), A, B)), altitude(projection(A, i), A, B), altitude(midpoint(B, G), D, F) we get altitude(projection(A, i), A, B) == perpendicular_line(line_intersection(altitude(midpoint(B, G), D, F), altitude(projection(A, i), A, B)), altitude(midpoint(B, G), D, F))
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), Line(B, G) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), Line(B, G))
By perpendicular_line_definition on projection(A, Line(D, G)), altitude(projection(A, Line(D, G)), B, G), altitude(projection(A, Line(D, G)), A, D) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(projection(A, Line(D, G)), altitude(projection(A, Line(D, G)), A, D))
By perpendicular_line_definition on line_intersection(median(E, B, G), altitude(G, E, midpoint(B, G))), median(E, B, G), altitude(G, E, midpoint(B, G)) we get median(E, B, G) == perpendicular_line(line_intersection(median(E, B, G), altitude(G, E, midpoint(B, G))), altitude(G, E, midpoint(B, G)))
By perpendicular_line_definition on line_intersection(Line(D, F), altitude(projection(A, i), D, F)), altitude(projection(A, i), D, F), altitude(projection(A, i), A, B) we get altitude(projection(A, i), D, F) == perpendicular_line(line_intersection(Line(D, F), altitude(projection(A, i), D, F)), altitude(projection(A, i), A, B))
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D) we get altitude(projection(A, i), B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(projection(A, i), B, G)), altitude(projection(A, Line(D, G)), A, D))
By perpendicular_line_definition on orthocenter(D, midpoint(B, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), A, D), altitude(F, B, G) we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(orthocenter(D, midpoint(B, G), projection(A, Line(D, G))), altitude(F, B, G))
By perpendicular_line_definition on line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, i), B, G) we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, i), B, G))
By perpendicular_line_definition on orthocenter(D, F, midpoint(B, G)), altitude(F, A, D), altitude(projection(A, i), B, G) we get altitude(F, A, D) == perpendicular_line(orthocenter(D, F, midpoint(B, G)), altitude(projection(A, i), B, G))
By perpendicular_line_definition on line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)), altitude(E, B, G), Line(B, G) we get altitude(E, B, G) == perpendicular_line(line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)), Line(B, G))
By perpendicular_line_definition on orthocenter(B, F, projection(A, i)), altitude(B, F, projection(A, i)), Line(F, projection(A, i)) we get altitude(B, F, projection(A, i)) == perpendicular_line(orthocenter(B, F, projection(A, i)), Line(F, projection(A, i)))
By perpendicular_line_definition on line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)), altitude(projection(A, i), A, D), altitude(E, B, G) we get altitude(projection(A, i), A, D) == perpendicular_line(line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)), altitude(E, B, G))
By perpendicular_line_definition on line_intersection(median(F, B, G), altitude(B, F, midpoint(B, G))), median(F, B, G), altitude(D, F, midpoint(B, G)) we get median(F, B, G) == perpendicular_line(line_intersection(median(F, B, G), altitude(B, F, midpoint(B, G))), altitude(D, F, midpoint(B, G)))
By perpendicular_line_definition on line_intersection(altitude(midpoint(B, G), D, F), altitude(projection(A, i), A, B)), altitude(projection(A, i), A, B), f we get altitude(projection(A, i), A, B) == perpendicular_line(line_intersection(altitude(midpoint(B, G), D, F), altitude(projection(A, i), A, B)), f)
By perpendicular_line_definition on line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)), altitude(F, B, G), altitude(projection(A, i), A, D) we get altitude(F, B, G) == perpendicular_line(line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)), altitude(projection(A, i), A, D))
By perpendicular_line_definition on orthocenter(A, F, midpoint(B, G)), altitude(F, A, D), altitude(projection(A, i), B, G) we get altitude(F, A, D) == perpendicular_line(orthocenter(A, F, midpoint(B, G)), altitude(projection(A, i), B, G))
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), Line(B, G), altitude(F, B, G) we get Line(B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), altitude(F, B, G))
By perpendicular_line_definition on line_intersection(altitude(midpoint(B, G), D, E), altitude(projection(A, Line(D, G)), A, C)), altitude(midpoint(B, G), D, E), altitude(projection(A, Line(D, G)), A, C) we get altitude(midpoint(B, G), D, E) == perpendicular_line(line_intersection(altitude(midpoint(B, G), D, E), altitude(projection(A, Line(D, G)), A, C)), altitude(projection(A, Line(D, G)), A, C))
By perpendicular_line_definition on projection(A, Line(D, G)), Line(midpoint(B, G), projection(A, Line(D, G))), altitude(D, midpoint(B, G), projection(A, Line(D, G))) we get Line(midpoint(B, G), projection(A, Line(D, G))) == perpendicular_line(projection(A, Line(D, G)), altitude(D, midpoint(B, G), projection(A, Line(D, G))))
By projection_definition on midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), Line(D, F) we get projection(midpoint(B, G), Line(D, F)) == line_intersection(Line(D, F), altitude(midpoint(B, G), D, F))
By perpendicular_line_definition on line_intersection(median(F, B, G), altitude(D, F, midpoint(B, G))), median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G)) we get median(F, B, G) == perpendicular_line(line_intersection(median(F, B, G), altitude(D, F, midpoint(B, G))), altitude(orthocenter(A, B, D), F, midpoint(B, G)))
By perpendicular_line_definition on line_intersection(median(F, B, G), altitude(D, F, midpoint(B, G))), median(F, B, G), altitude(D, F, midpoint(B, G)) we get median(F, B, G) == perpendicular_line(line_intersection(median(F, B, G), altitude(D, F, midpoint(B, G))), altitude(D, F, midpoint(B, G)))
By perpendicular_line_definition on orthocenter(A, midpoint(B, G), projection(A, Line(D, G))), parallel_line(midpoint(B, G), Line(D, G)), altitude(A, D, G) we get parallel_line(midpoint(B, G), Line(D, G)) == perpendicular_line(orthocenter(A, midpoint(B, G), projection(A, Line(D, G))), altitude(A, D, G))
By perpendicular_line_definition on line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(F, B, G), altitude(projection(A, i), A, D) we get altitude(F, B, G) == perpendicular_line(line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, i), A, D))
By perpendicular_line_definition on line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D), h we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)), h)
By perpendicular_line_definition on orthocenter(B, F, projection(A, i)), altitude(projection(A, i), A, B), f we get altitude(projection(A, i), A, B) == perpendicular_line(orthocenter(B, F, projection(A, i)), f)
By perpendicular_line_definition on orthocenter(D, midpoint(B, G), projection(A, i)), altitude(projection(A, i), A, D), altitude(F, B, G) we get altitude(projection(A, i), A, D) == perpendicular_line(orthocenter(D, midpoint(B, G), projection(A, i)), altitude(F, B, G))
By perpendicular_line_definition on orthocenter(B, F, projection(A, i)), altitude(F, B, D), i we get altitude(F, B, D) == perpendicular_line(orthocenter(B, F, projection(A, i)), i)
By perpendicular_line_definition on line_intersection(median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G))), median(F, B, G), altitude(D, F, midpoint(B, G)) we get median(F, B, G) == perpendicular_line(line_intersection(median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G))), altitude(D, F, midpoint(B, G)))
By perpendicular_line_definition on orthocenter(D, midpoint(B, G), projection(A, Line(D, G))), altitude(midpoint(B, G), D, G), parallel_line(E, Line(D, G)) we get altitude(midpoint(B, G), D, G) == perpendicular_line(orthocenter(D, midpoint(B, G), projection(A, Line(D, G))), parallel_line(E, Line(D, G)))
By perpendicular_line_definition on F, altitude(F, A, D), altitude(projection(A, i), B, G) we get altitude(F, A, D) == perpendicular_line(F, altitude(projection(A, i), B, G))
By perpendicular_line_definition on orthocenter(E, G, projection(A, Line(D, G))), altitude(E, D, G), parallel_line(midpoint(B, G), Line(D, G)) we get altitude(E, D, G) == perpendicular_line(orthocenter(E, G, projection(A, Line(D, G))), parallel_line(midpoint(B, G), Line(D, G)))
By perpendicular_line_definition on F, altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G) we get altitude(F, A, D) == perpendicular_line(F, altitude(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on orthocenter(A, midpoint(B, G), projection(A, i)), altitude(projection(A, i), A, D), altitude(projection(A, i), B, G) we get altitude(projection(A, i), A, D) == perpendicular_line(orthocenter(A, midpoint(B, G), projection(A, i)), altitude(projection(A, i), B, G))
By projection_definition on F, line_intersection(Line(B, G), altitude(F, B, G)), Line(B, G) we get projection(F, Line(B, G)) == line_intersection(Line(B, G), altitude(F, B, G))
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), altitude(E, A, D) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), altitude(E, A, D))
By perpendicular_line_definition on projection(A, Line(D, G)), Line(E, projection(A, Line(D, G))), altitude(A, E, projection(A, Line(D, G))) we get Line(E, projection(A, Line(D, G))) == perpendicular_line(projection(A, Line(D, G)), altitude(A, E, projection(A, Line(D, G))))
By perpendicular_line_definition on line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), altitude(projection(A, Line(D, G)), D, E), altitude(projection(A, Line(D, G)), A, C) we get altitude(projection(A, Line(D, G)), D, E) == perpendicular_line(line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), altitude(projection(A, Line(D, G)), A, C))
By perpendicular_line_definition on line_intersection(altitude(midpoint(B, G), D, E), altitude(projection(A, Line(D, G)), A, C)), altitude(projection(A, Line(D, G)), A, C), altitude(projection(A, Line(D, G)), D, E) we get altitude(projection(A, Line(D, G)), A, C) == perpendicular_line(line_intersection(altitude(midpoint(B, G), D, E), altitude(projection(A, Line(D, G)), A, C)), altitude(projection(A, Line(D, G)), D, E))
By perpendicular_line_definition on orthocenter(A, F, projection(A, i)), parallel_line(F, i), altitude(A, B, D) we get parallel_line(F, i) == perpendicular_line(orthocenter(A, F, projection(A, i)), altitude(A, B, D))
By perpendicular_line_definition on orthocenter(A, midpoint(B, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), A, D), altitude(F, B, G) we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(orthocenter(A, midpoint(B, G), projection(A, Line(D, G))), altitude(F, B, G))
By projection_definition on midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), Line(D, E) we get projection(midpoint(B, G), Line(D, E)) == line_intersection(Line(D, E), altitude(midpoint(B, G), D, E))
By perpendicular_line_definition on line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(F, B, G), altitude(F, A, D) we get altitude(F, B, G) == perpendicular_line(line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(F, A, D))
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), Line(B, G), altitude(projection(A, Line(D, G)), B, G) we get Line(B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on orthocenter(A, midpoint(B, G), projection(A, i)), parallel_line(midpoint(B, G), i), altitude(F, B, D) we get parallel_line(midpoint(B, G), i) == perpendicular_line(orthocenter(A, midpoint(B, G), projection(A, i)), altitude(F, B, D))
By perpendicular_line_definition on orthocenter(D, midpoint(B, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), A, D), altitude(E, B, G) we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(orthocenter(D, midpoint(B, G), projection(A, Line(D, G))), altitude(E, B, G))
By perpendicular_line_definition on orthocenter(D, midpoint(B, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), A, D), h we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(orthocenter(D, midpoint(B, G), projection(A, Line(D, G))), h)
By perpendicular_line_definition on orthocenter(D, midpoint(B, G), projection(A, i)), altitude(midpoint(B, G), B, D), parallel_line(F, i) we get altitude(midpoint(B, G), B, D) == perpendicular_line(orthocenter(D, midpoint(B, G), projection(A, i)), parallel_line(F, i))
By perpendicular_line_definition on line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), altitude(projection(A, Line(D, G)), D, E), altitude(midpoint(B, G), A, C) we get altitude(projection(A, Line(D, G)), D, E) == perpendicular_line(line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), altitude(midpoint(B, G), A, C))
By perpendicular_line_definition on line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)), altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D) we get altitude(E, B, G) == perpendicular_line(line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)), altitude(projection(A, Line(D, G)), A, D))
By perpendicular_line_definition on line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D) we get altitude(E, B, G) == perpendicular_line(line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D))
By perpendicular_line_definition on line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, i), B, G) we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, i), B, G))
By perpendicular_line_definition on orthocenter(A, F, projection(A, i)), parallel_line(F, i), altitude(F, B, D) we get parallel_line(F, i) == perpendicular_line(orthocenter(A, F, projection(A, i)), altitude(F, B, D))
By perpendicular_line_definition on orthocenter(A, F, projection(A, i)), altitude(projection(A, i), A, B), altitude(projection(A, i), D, F) we get altitude(projection(A, i), A, B) == perpendicular_line(orthocenter(A, F, projection(A, i)), altitude(projection(A, i), D, F))
By perpendicular_line_definition on orthocenter(A, F, projection(A, i)), altitude(projection(A, i), A, B), altitude(midpoint(B, G), D, F) we get altitude(projection(A, i), A, B) == perpendicular_line(orthocenter(A, F, projection(A, i)), altitude(midpoint(B, G), D, F))
By perpendicular_line_definition on projection(midpoint(B, G), f), altitude(midpoint(B, G), A, B), altitude(projection(A, i), D, F) we get altitude(midpoint(B, G), A, B) == perpendicular_line(projection(midpoint(B, G), f), altitude(projection(A, i), D, F))
By perpendicular_line_definition on line_intersection(median(E, B, G), altitude(G, E, midpoint(B, G))), median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G)) we get median(E, B, G) == perpendicular_line(line_intersection(median(E, B, G), altitude(G, E, midpoint(B, G))), altitude(orthocenter(A, D, G), E, midpoint(B, G)))
By perpendicular_line_definition on projection(A, Line(D, G)), altitude(projection(A, Line(D, G)), D, E), altitude(midpoint(B, G), A, C) we get altitude(projection(A, Line(D, G)), D, E) == perpendicular_line(projection(A, Line(D, G)), altitude(midpoint(B, G), A, C))
By perpendicular_line_definition on projection(A, i), Line(F, projection(A, i)), altitude(B, F, projection(A, i)) we get Line(F, projection(A, i)) == perpendicular_line(projection(A, i), altitude(B, F, projection(A, i)))
By perpendicular_line_definition on line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)), altitude(E, B, G), altitude(E, A, D) we get altitude(E, B, G) == perpendicular_line(line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)), altitude(E, A, D))
By perpendicular_line_definition on orthocenter(A, midpoint(B, G), projection(A, i)), altitude(projection(A, i), A, D), altitude(F, B, G) we get altitude(projection(A, i), A, D) == perpendicular_line(orthocenter(A, midpoint(B, G), projection(A, i)), altitude(F, B, G))
By perpendicular_line_definition on line_intersection(altitude(midpoint(B, G), D, F), altitude(projection(A, i), A, B)), altitude(projection(A, i), A, B), altitude(projection(A, i), D, F) we get altitude(projection(A, i), A, B) == perpendicular_line(line_intersection(altitude(midpoint(B, G), D, F), altitude(projection(A, i), A, B)), altitude(projection(A, i), D, F))
By perpendicular_line_definition on line_intersection(altitude(E, B, G), altitude(F, A, D)), altitude(F, A, D), altitude(projection(A, i), B, G) we get altitude(F, A, D) == perpendicular_line(line_intersection(altitude(E, B, G), altitude(F, A, D)), altitude(projection(A, i), B, G))
By perpendicular_line_definition on projection(A, Line(D, G)), altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G) we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(projection(A, Line(D, G)), altitude(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on projection(A, Line(D, G)), Line(midpoint(B, G), projection(A, Line(D, G))), altitude(A, midpoint(B, G), projection(A, Line(D, G))) we get Line(midpoint(B, G), projection(A, Line(D, G))) == perpendicular_line(projection(A, Line(D, G)), altitude(A, midpoint(B, G), projection(A, Line(D, G))))
By perpendicular_line_definition on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), altitude(projection(A, Line(D, G)), A, C), altitude(projection(A, Line(D, G)), D, E) we get altitude(projection(A, Line(D, G)), A, C) == perpendicular_line(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), altitude(projection(A, Line(D, G)), D, E))
By perpendicular_line_definition on line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D), altitude(F, B, G) we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(F, B, G))
By perpendicular_line_definition on line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), altitude(projection(A, Line(D, G)), D, E), Line(D, E) we get altitude(projection(A, Line(D, G)), D, E) == perpendicular_line(line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), Line(D, E))
By perpendicular_line_definition on line_intersection(altitude(midpoint(B, G), D, E), altitude(projection(A, Line(D, G)), A, C)), altitude(projection(A, Line(D, G)), A, C), altitude(midpoint(B, G), D, E) we get altitude(projection(A, Line(D, G)), A, C) == perpendicular_line(line_intersection(altitude(midpoint(B, G), D, E), altitude(projection(A, Line(D, G)), A, C)), altitude(midpoint(B, G), D, E))
By perpendicular_line_definition on line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(F, B, G), Line(B, G) we get altitude(F, B, G) == perpendicular_line(line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)), Line(B, G))
By perpendicular_line_definition on line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)), altitude(F, B, G), Line(B, G) we get altitude(F, B, G) == perpendicular_line(line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)), Line(B, G))
By perpendicular_line_definition on line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)), altitude(projection(A, i), A, D), altitude(F, B, G) we get altitude(projection(A, i), A, D) == perpendicular_line(line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)), altitude(F, B, G))
By perpendicular_line_definition on orthocenter(D, E, midpoint(B, G)), altitude(E, A, D), altitude(projection(A, i), B, G) we get altitude(E, A, D) == perpendicular_line(orthocenter(D, E, midpoint(B, G)), altitude(projection(A, i), B, G))
By perpendicular_line_definition on orthocenter(D, midpoint(B, G), projection(A, Line(D, G))), altitude(midpoint(B, G), D, G), parallel_line(midpoint(B, G), Line(D, G)) we get altitude(midpoint(B, G), D, G) == perpendicular_line(orthocenter(D, midpoint(B, G), projection(A, Line(D, G))), parallel_line(midpoint(B, G), Line(D, G)))
By perpendicular_line_definition on orthocenter(A, midpoint(B, G), projection(A, Line(D, G))), altitude(A, midpoint(B, G), projection(A, Line(D, G))), Line(midpoint(B, G), projection(A, Line(D, G))) we get altitude(A, midpoint(B, G), projection(A, Line(D, G))) == perpendicular_line(orthocenter(A, midpoint(B, G), projection(A, Line(D, G))), Line(midpoint(B, G), projection(A, Line(D, G))))
By perpendicular_line_definition on orthocenter(A, E, projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), A, C), g we get altitude(projection(A, Line(D, G)), A, C) == perpendicular_line(orthocenter(A, E, projection(A, Line(D, G))), g)
By perpendicular_line_definition on line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)), altitude(E, B, G), altitude(projection(A, i), A, D) we get altitude(E, B, G) == perpendicular_line(line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)), altitude(projection(A, i), A, D))
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(projection(A, i), B, G)), Line(B, G), altitude(F, B, G) we get Line(B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(projection(A, i), B, G)), altitude(F, B, G))
By perpendicular_line_definition on line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D), altitude(E, B, G) we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(E, B, G))
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G), Line(B, G) we get altitude(projection(A, i), B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(projection(A, i), B, G)), Line(B, G))
By perpendicular_line_definition on projection(A, Line(D, G)), altitude(projection(A, Line(D, G)), A, C), altitude(projection(A, Line(D, G)), D, E) we get altitude(projection(A, Line(D, G)), A, C) == perpendicular_line(projection(A, Line(D, G)), altitude(projection(A, Line(D, G)), D, E))
By perpendicular_line_definition on line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(E, B, G), Line(B, G) we get altitude(E, B, G) == perpendicular_line(line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)), Line(B, G))
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), altitude(projection(A, i), A, D) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, i), A, D))
By perpendicular_line_definition on line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D), altitude(F, B, G) we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(F, B, G))
By perpendicular_line_definition on orthocenter(E, G, projection(A, Line(D, G))), altitude(E, D, G), parallel_line(E, Line(D, G)) we get altitude(E, D, G) == perpendicular_line(orthocenter(E, G, projection(A, Line(D, G))), parallel_line(E, Line(D, G)))
By perpendicular_line_definition on orthocenter(A, midpoint(B, G), projection(A, i)), altitude(A, midpoint(B, G), projection(A, i)), Line(midpoint(B, G), projection(A, i)) we get altitude(A, midpoint(B, G), projection(A, i)) == perpendicular_line(orthocenter(A, midpoint(B, G), projection(A, i)), Line(midpoint(B, G), projection(A, i)))
By perpendicular_line_definition on E, Line(E, projection(A, Line(D, G))), altitude(G, E, projection(A, Line(D, G))) we get Line(E, projection(A, Line(D, G))) == perpendicular_line(E, altitude(G, E, projection(A, Line(D, G))))
By perpendicular_line_definition on line_intersection(altitude(midpoint(B, G), D, E), altitude(projection(A, Line(D, G)), A, C)), altitude(midpoint(B, G), D, E), altitude(midpoint(B, G), A, C) we get altitude(midpoint(B, G), D, E) == perpendicular_line(line_intersection(altitude(midpoint(B, G), D, E), altitude(projection(A, Line(D, G)), A, C)), altitude(midpoint(B, G), A, C))
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(projection(A, i), B, G)), Line(B, G), h we get Line(B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(projection(A, i), B, G)), h)
By perpendicular_line_definition on line_intersection(median(E, B, G), altitude(D, E, midpoint(B, G))), median(E, B, G), altitude(D, E, midpoint(B, G)) we get median(E, B, G) == perpendicular_line(line_intersection(median(E, B, G), altitude(D, E, midpoint(B, G))), altitude(D, E, midpoint(B, G)))
By perpendicular_line_definition on line_intersection(Line(D, F), altitude(projection(A, i), D, F)), Line(D, F), f we get Line(D, F) == perpendicular_line(line_intersection(Line(D, F), altitude(projection(A, i), D, F)), f)
By median_definition on projection(A, i), G, B, Line(midpoint(B, G), projection(A, i)) we get median(projection(A, i), B, G) == Line(midpoint(B, G), projection(A, i))
By perpendicular_line_definition on orthocenter(D, midpoint(B, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G) we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(orthocenter(D, midpoint(B, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on orthocenter(A, midpoint(B, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G) we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(orthocenter(A, midpoint(B, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on orthocenter(A, midpoint(B, G), projection(A, i)), parallel_line(midpoint(B, G), i), altitude(A, B, D) we get parallel_line(midpoint(B, G), i) == perpendicular_line(orthocenter(A, midpoint(B, G), projection(A, i)), altitude(A, B, D))
By perpendicular_line_definition on midpoint(B, G), altitude(midpoint(B, G), A, B), altitude(projection(A, i), D, F) we get altitude(midpoint(B, G), A, B) == perpendicular_line(midpoint(B, G), altitude(projection(A, i), D, F))
By perpendicular_line_definition on E, altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G) we get altitude(E, A, D) == perpendicular_line(E, altitude(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on line_intersection(median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G))), median(E, B, G), altitude(A, E, midpoint(B, G)) we get median(E, B, G) == perpendicular_line(line_intersection(median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G))), altitude(A, E, midpoint(B, G)))
By perpendicular_line_definition on line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)), altitude(projection(A, i), A, D), altitude(F, B, G) we get altitude(projection(A, i), A, D) == perpendicular_line(line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)), altitude(F, B, G))
By perpendicular_line_definition on orthocenter(E, G, midpoint(B, G)), altitude(midpoint(B, G), A, C), altitude(projection(A, Line(D, G)), D, E) we get altitude(midpoint(B, G), A, C) == perpendicular_line(orthocenter(E, G, midpoint(B, G)), altitude(projection(A, Line(D, G)), D, E))
By perpendicular_line_definition on orthocenter(A, midpoint(B, G), projection(A, Line(D, G))), parallel_line(midpoint(B, G), Line(D, G)), altitude(midpoint(B, G), D, G) we get parallel_line(midpoint(B, G), Line(D, G)) == perpendicular_line(orthocenter(A, midpoint(B, G), projection(A, Line(D, G))), altitude(midpoint(B, G), D, G))
By perpendicular_line_definition on line_intersection(Line(D, F), altitude(projection(A, i), D, F)), Line(D, F), altitude(projection(A, i), D, F) we get Line(D, F) == perpendicular_line(line_intersection(Line(D, F), altitude(projection(A, i), D, F)), altitude(projection(A, i), D, F))
By perpendicular_line_definition on projection(F, h), altitude(F, A, D), altitude(projection(A, i), B, G) we get altitude(F, A, D) == perpendicular_line(projection(F, h), altitude(projection(A, i), B, G))
By perpendicular_line_definition on line_intersection(median(F, B, G), altitude(B, F, midpoint(B, G))), median(F, B, G), altitude(A, F, midpoint(B, G)) we get median(F, B, G) == perpendicular_line(line_intersection(median(F, B, G), altitude(B, F, midpoint(B, G))), altitude(A, F, midpoint(B, G)))
By perpendicular_line_definition on line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)), altitude(projection(A, i), A, D), h we get altitude(projection(A, i), A, D) == perpendicular_line(line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)), h)
By perpendicular_line_definition on line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)), altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D) we get altitude(F, B, G) == perpendicular_line(line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)), altitude(projection(A, Line(D, G)), A, D))
By perpendicular_line_definition on line_intersection(median(E, B, G), altitude(D, E, midpoint(B, G))), median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G)) we get median(E, B, G) == perpendicular_line(line_intersection(median(E, B, G), altitude(D, E, midpoint(B, G))), altitude(orthocenter(A, D, G), E, midpoint(B, G)))
By perpendicular_line_definition on orthocenter(A, midpoint(B, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, i), B, G) we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(orthocenter(A, midpoint(B, G), projection(A, Line(D, G))), altitude(projection(A, i), B, G))
By perpendicular_line_definition on projection(A, i), altitude(projection(A, i), B, G), altitude(E, A, D) we get altitude(projection(A, i), B, G) == perpendicular_line(projection(A, i), altitude(E, A, D))
By perpendicular_line_definition on line_intersection(Line(D, F), altitude(projection(A, i), D, F)), Line(D, F), altitude(midpoint(B, G), D, F) we get Line(D, F) == perpendicular_line(line_intersection(Line(D, F), altitude(projection(A, i), D, F)), altitude(midpoint(B, G), D, F))
By perpendicular_line_definition on orthocenter(B, F, projection(A, i)), altitude(F, B, D), parallel_line(midpoint(B, G), i) we get altitude(F, B, D) == perpendicular_line(orthocenter(B, F, projection(A, i)), parallel_line(midpoint(B, G), i))
By perpendicular_line_definition on orthocenter(A, midpoint(B, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), A, D), altitude(E, B, G) we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(orthocenter(A, midpoint(B, G), projection(A, Line(D, G))), altitude(E, B, G))
By perpendicular_line_definition on E, altitude(E, A, D), altitude(projection(A, i), B, G) we get altitude(E, A, D) == perpendicular_line(E, altitude(projection(A, i), B, G))
By perpendicular_line_definition on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G) we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on projection(A, i), altitude(projection(A, i), A, B), altitude(projection(A, i), D, F) we get altitude(projection(A, i), A, B) == perpendicular_line(projection(A, i), altitude(projection(A, i), D, F))
By perpendicular_line_definition on orthocenter(D, midpoint(B, G), projection(A, i)), altitude(D, midpoint(B, G), projection(A, i)), Line(midpoint(B, G), projection(A, i)) we get altitude(D, midpoint(B, G), projection(A, i)) == perpendicular_line(orthocenter(D, midpoint(B, G), projection(A, i)), Line(midpoint(B, G), projection(A, i)))
By perpendicular_line_definition on orthocenter(E, G, projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), A, C), g we get altitude(projection(A, Line(D, G)), A, C) == perpendicular_line(orthocenter(E, G, projection(A, Line(D, G))), g)
By perpendicular_line_definition on projection(A, Line(D, G)), altitude(projection(A, Line(D, G)), D, E), altitude(projection(A, Line(D, G)), A, C) we get altitude(projection(A, Line(D, G)), D, E) == perpendicular_line(projection(A, Line(D, G)), altitude(projection(A, Line(D, G)), A, C))
By perpendicular_line_definition on orthocenter(A, F, projection(A, i)), parallel_line(F, i), altitude(midpoint(B, G), B, D) we get parallel_line(F, i) == perpendicular_line(orthocenter(A, F, projection(A, i)), altitude(midpoint(B, G), B, D))
By perpendicular_line_definition on projection(A, i), Line(midpoint(B, G), projection(A, i)), altitude(D, midpoint(B, G), projection(A, i)) we get Line(midpoint(B, G), projection(A, i)) == perpendicular_line(projection(A, i), altitude(D, midpoint(B, G), projection(A, i)))
By perpendicular_line_definition on line_intersection(Line(D, F), altitude(projection(A, i), D, F)), altitude(projection(A, i), D, F), Line(D, F) we get altitude(projection(A, i), D, F) == perpendicular_line(line_intersection(Line(D, F), altitude(projection(A, i), D, F)), Line(D, F))
By perpendicular_line_definition on midpoint(B, G), altitude(midpoint(B, G), A, C), altitude(projection(A, Line(D, G)), D, E) we get altitude(midpoint(B, G), A, C) == perpendicular_line(midpoint(B, G), altitude(projection(A, Line(D, G)), D, E))
By perpendicular_line_definition on line_intersection(altitude(E, A, D), altitude(F, B, G)), altitude(E, A, D), altitude(projection(A, i), B, G) we get altitude(E, A, D) == perpendicular_line(line_intersection(altitude(E, A, D), altitude(F, B, G)), altitude(projection(A, i), B, G))
By perpendicular_line_definition on projection(A, i), altitude(projection(A, i), A, D), altitude(projection(A, i), B, G) we get altitude(projection(A, i), A, D) == perpendicular_line(projection(A, i), altitude(projection(A, i), B, G))
By perpendicular_line_definition on line_intersection(altitude(midpoint(B, G), D, E), altitude(projection(A, Line(D, G)), A, C)), altitude(midpoint(B, G), D, E), Line(D, E) we get altitude(midpoint(B, G), D, E) == perpendicular_line(line_intersection(altitude(midpoint(B, G), D, E), altitude(projection(A, Line(D, G)), A, C)), Line(D, E))
By perpendicular_line_definition on line_intersection(altitude(E, A, D), altitude(F, B, G)), altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G) we get altitude(E, A, D) == perpendicular_line(line_intersection(altitude(E, A, D), altitude(F, B, G)), altitude(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on projection(A, i), altitude(projection(A, i), D, F), altitude(projection(A, i), A, B) we get altitude(projection(A, i), D, F) == perpendicular_line(projection(A, i), altitude(projection(A, i), A, B))
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), Line(B, G), h we get Line(B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), h)
By perpendicular_line_definition on line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(E, B, G), altitude(E, A, D) we get altitude(E, B, G) == perpendicular_line(line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(E, A, D))
By perpendicular_line_definition on orthocenter(E, G, projection(A, Line(D, G))), altitude(E, D, G), Line(D, G) we get altitude(E, D, G) == perpendicular_line(orthocenter(E, G, projection(A, Line(D, G))), Line(D, G))
By perpendicular_line_definition on line_intersection(median(E, B, G), altitude(G, E, midpoint(B, G))), median(E, B, G), altitude(A, E, midpoint(B, G)) we get median(E, B, G) == perpendicular_line(line_intersection(median(E, B, G), altitude(G, E, midpoint(B, G))), altitude(A, E, midpoint(B, G)))
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), Line(B, G), altitude(projection(A, i), B, G) we get Line(B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, i), B, G))
By perpendicular_line_definition on line_intersection(median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G))), altitude(orthocenter(A, D, G), E, midpoint(B, G)), median(E, B, G) we get altitude(orthocenter(A, D, G), E, midpoint(B, G)) == perpendicular_line(line_intersection(median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G))), median(E, B, G))
By perpendicular_line_definition on line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)), altitude(projection(A, i), A, D), altitude(E, B, G) we get altitude(projection(A, i), A, D) == perpendicular_line(line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)), altitude(E, B, G))
By perpendicular_line_definition on line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), Line(B, G), altitude(E, B, G) we get Line(B, G) == perpendicular_line(line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), altitude(E, B, G))
By perpendicular_line_definition on line_intersection(median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G))), median(E, B, G), altitude(D, E, midpoint(B, G)) we get median(E, B, G) == perpendicular_line(line_intersection(median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G))), altitude(D, E, midpoint(B, G)))
By perpendicular_line_definition on line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)), altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G) we get altitude(projection(A, i), A, D) == perpendicular_line(line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)), altitude(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on line_intersection(median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G))), median(F, B, G), altitude(A, F, midpoint(B, G)) we get median(F, B, G) == perpendicular_line(line_intersection(median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G))), altitude(A, F, midpoint(B, G)))
By perpendicular_line_definition on orthocenter(A, E, projection(A, Line(D, G))), parallel_line(E, Line(D, G)), altitude(midpoint(B, G), D, G) we get parallel_line(E, Line(D, G)) == perpendicular_line(orthocenter(A, E, projection(A, Line(D, G))), altitude(midpoint(B, G), D, G))
By perpendicular_direction_conditions_v0 on D, I, F, E we get perpendicular(Line(D, I), Line(E, F))
By perpendicular_direction_conditions_v0 on midpoint(B, G), A, H, C we get perpendicular(Line(C, H), Line(A, midpoint(B, G)))
By perpendicular_direction_conditions_v0 on E, F, D, midpoint(B, G) we get perpendicular(Line(E, F), Line(D, midpoint(B, G)))
By perpendicular_direction_conditions_v0 on E, F, I, A we get perpendicular(Line(A, I), Line(E, F))
By perpendicular_direction_conditions_v0 on I, A, H, C we get perpendicular(Line(A, I), Line(C, H))
By projection_definition on midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), altitude(A, D, G) we get projection(midpoint(B, G), altitude(A, D, G)) == line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G)))
By perpendicular_direction_conditions_v0 on H, C, D, A we get perpendicular(Line(A, D), Line(C, H))
By projection_definition on A, line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))), median(E, B, G) we get projection(A, median(E, B, G)) == line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G)))
By perpendicular_direction_conditions_v0 on E, F, A, midpoint(B, G) we get perpendicular(Line(E, F), Line(A, midpoint(B, G)))
By perpendicular_direction_conditions_v0 on E, F, A, D we get perpendicular(Line(A, D), Line(E, F))
By perpendicular_direction_conditions_v0 on H, C, D, I we get perpendicular(Line(C, H), Line(D, I))
By perpendicular_direction_conditions_v0 on midpoint(B, G), I, F, E we get perpendicular(Line(E, F), Line(I, midpoint(B, G)))
By perpendicular_direction_conditions_v0 on C, H, midpoint(B, G), D we get perpendicular(Line(C, H), Line(D, midpoint(B, G)))
By perpendicular_direction_conditions_v0 on I, midpoint(B, G), H, C we get perpendicular(Line(C, H), Line(I, midpoint(B, G)))
By projection_definition on midpoint(B, G), line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D))), Line(I, orthocenter(A, B, D)) we get projection(midpoint(B, G), Line(I, orthocenter(A, B, D))) == line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D)))
By projection_definition on line_intersection(altitude(A, B, D), parallel_line(F, i)), F, altitude(F, B, D) we get F == projection(line_intersection(altitude(A, B, D), parallel_line(F, i)), altitude(F, B, D))
By projection_definition on line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G), altitude(midpoint(B, G), A, B) we get midpoint(B, G) == projection(line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), altitude(midpoint(B, G), A, B))
By projection_definition on A, line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), median(F, B, G) we get projection(A, median(F, B, G)) == line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G)))
By projection_definition on line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G), altitude(midpoint(B, G), D, G) we get midpoint(B, G) == projection(line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), altitude(midpoint(B, G), D, G))
By projection_definition on line_intersection(Line(B, G), altitude(E, B, G)), E, altitude(E, A, D) we get E == projection(line_intersection(Line(B, G), altitude(E, B, G)), altitude(E, A, D))
By projection_definition on E, line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G))), Line(C, orthocenter(A, D, G)) we get projection(E, Line(C, orthocenter(A, D, G))) == line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G)))
By projection_definition on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G), altitude(midpoint(B, G), A, C) we get midpoint(B, G) == projection(line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), altitude(midpoint(B, G), A, C))
By projection_definition on F, line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))), Line(H, orthocenter(A, B, D)) we get projection(F, Line(H, orthocenter(A, B, D))) == line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D)))
By projection_definition on line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E, altitude(E, D, G) we get E == projection(line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), altitude(E, D, G))
By projection_definition on midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), altitude(A, B, D) we get projection(midpoint(B, G), altitude(A, B, D)) == line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i))
By projection_definition on midpoint(B, G), line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))), Line(I, orthocenter(A, D, G)) we get projection(midpoint(B, G), Line(I, orthocenter(A, D, G))) == line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G)))
By parallel_line_definition on G, altitude(G, E, midpoint(B, G)), altitude(A, E, midpoint(B, G)) we get altitude(G, E, midpoint(B, G)) == parallel_line(G, altitude(A, E, midpoint(B, G)))
By projection_definition on line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G), altitude(midpoint(B, G), B, D) we get midpoint(B, G) == projection(line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), altitude(midpoint(B, G), B, D))
By projection_definition on E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), altitude(A, D, G) we get projection(E, altitude(A, D, G)) == line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G)))
By projection_definition on line_intersection(Line(B, G), altitude(F, B, G)), F, altitude(F, A, D) we get F == projection(line_intersection(Line(B, G), altitude(F, B, G)), altitude(F, A, D))
By projection_definition on F, line_intersection(altitude(A, B, D), parallel_line(F, i)), altitude(A, B, D) we get projection(F, altitude(A, B, D)) == line_intersection(altitude(A, B, D), parallel_line(F, i))
By parallel_line_definition on line_intersection(Line(B, G), altitude(projection(A, i), B, G)), Line(B, G), altitude(projection(A, i), A, D) we get Line(B, G) == parallel_line(line_intersection(Line(B, G), altitude(projection(A, i), B, G)), altitude(projection(A, i), A, D))
By parallel_line_definition on G, altitude(G, E, midpoint(B, G)), altitude(D, E, midpoint(B, G)) we get altitude(G, E, midpoint(B, G)) == parallel_line(G, altitude(D, E, midpoint(B, G)))
By parallel_line_definition on projection(F, h), h, altitude(projection(A, Line(D, G)), B, G) we get h == parallel_line(projection(F, h), altitude(projection(A, Line(D, G)), B, G))
By parallel_line_definition on line_intersection(altitude(midpoint(B, G), D, F), altitude(projection(A, i), A, B)), altitude(midpoint(B, G), D, F), f we get altitude(midpoint(B, G), D, F) == parallel_line(line_intersection(altitude(midpoint(B, G), D, F), altitude(projection(A, i), A, B)), f)
By parallel_line_definition on orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), altitude(E, B, G), altitude(projection(A, Line(D, G)), B, G) we get altitude(E, B, G) == parallel_line(orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), altitude(projection(A, Line(D, G)), B, G))
By parallel_line_definition on line_intersection(median(F, B, G), altitude(D, F, midpoint(B, G))), altitude(D, F, midpoint(B, G)), altitude(B, F, midpoint(B, G)) we get altitude(D, F, midpoint(B, G)) == parallel_line(line_intersection(median(F, B, G), altitude(D, F, midpoint(B, G))), altitude(B, F, midpoint(B, G)))
By parallel_line_definition on orthocenter(A, E, midpoint(B, G)), altitude(A, E, midpoint(B, G)), altitude(G, E, midpoint(B, G)) we get altitude(A, E, midpoint(B, G)) == parallel_line(orthocenter(A, E, midpoint(B, G)), altitude(G, E, midpoint(B, G)))
By parallel_line_definition on line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)), altitude(projection(A, i), A, D), altitude(F, A, D) we get altitude(projection(A, i), A, D) == parallel_line(line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)), altitude(F, A, D))
By parallel_line_definition on A, f, altitude(projection(A, i), D, F) we get f == parallel_line(A, altitude(projection(A, i), D, F))
By parallel_line_definition on orthocenter(A, F, midpoint(B, G)), altitude(A, F, midpoint(B, G)), altitude(B, F, midpoint(B, G)) we get altitude(A, F, midpoint(B, G)) == parallel_line(orthocenter(A, F, midpoint(B, G)), altitude(B, F, midpoint(B, G)))
By parallel_line_definition on line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)), altitude(projection(A, i), A, D), Line(B, G) we get altitude(projection(A, i), A, D) == parallel_line(line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)), Line(B, G))
By parallel_line_definition on line_intersection(median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G))), altitude(orthocenter(A, D, G), E, midpoint(B, G)), altitude(A, E, midpoint(B, G)) we get altitude(orthocenter(A, D, G), E, midpoint(B, G)) == parallel_line(line_intersection(median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G))), altitude(A, E, midpoint(B, G)))
By parallel_line_definition on orthocenter(A, D, G), altitude(orthocenter(A, D, G), E, midpoint(B, G)), altitude(G, E, midpoint(B, G)) we get altitude(orthocenter(A, D, G), E, midpoint(B, G)) == parallel_line(orthocenter(A, D, G), altitude(G, E, midpoint(B, G)))
By parallel_line_definition on A, altitude(A, F, midpoint(B, G)), altitude(B, F, midpoint(B, G)) we get altitude(A, F, midpoint(B, G)) == parallel_line(A, altitude(B, F, midpoint(B, G)))
By parallel_line_definition on line_intersection(median(E, B, G), altitude(G, E, midpoint(B, G))), altitude(G, E, midpoint(B, G)), altitude(orthocenter(A, D, G), E, midpoint(B, G)) we get altitude(G, E, midpoint(B, G)) == parallel_line(line_intersection(median(E, B, G), altitude(G, E, midpoint(B, G))), altitude(orthocenter(A, D, G), E, midpoint(B, G)))
By parallel_line_definition on line_intersection(median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G))), altitude(orthocenter(A, B, D), F, midpoint(B, G)), altitude(A, F, midpoint(B, G)) we get altitude(orthocenter(A, B, D), F, midpoint(B, G)) == parallel_line(line_intersection(median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G))), altitude(A, F, midpoint(B, G)))
By parallel_line_definition on line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D), altitude(E, A, D) we get altitude(projection(A, Line(D, G)), A, D) == parallel_line(line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(E, A, D))
By parallel_line_definition on projection(A, Line(D, G)), altitude(projection(A, Line(D, G)), D, E), g we get altitude(projection(A, Line(D, G)), D, E) == parallel_line(projection(A, Line(D, G)), g)
By parallel_line_definition on B, altitude(B, F, midpoint(B, G)), altitude(D, F, midpoint(B, G)) we get altitude(B, F, midpoint(B, G)) == parallel_line(B, altitude(D, F, midpoint(B, G)))
By parallel_line_definition on orthocenter(B, F, projection(A, i)), altitude(F, B, D), altitude(A, B, D) we get altitude(F, B, D) == parallel_line(orthocenter(B, F, projection(A, i)), altitude(A, B, D))
By parallel_line_definition on orthocenter(B, F, projection(A, i)), altitude(projection(A, i), A, B), altitude(midpoint(B, G), A, B) we get altitude(projection(A, i), A, B) == parallel_line(orthocenter(B, F, projection(A, i)), altitude(midpoint(B, G), A, B))
By parallel_line_definition on orthocenter(A, F, midpoint(B, G)), altitude(A, F, midpoint(B, G)), altitude(orthocenter(A, B, D), F, midpoint(B, G)) we get altitude(A, F, midpoint(B, G)) == parallel_line(orthocenter(A, F, midpoint(B, G)), altitude(orthocenter(A, B, D), F, midpoint(B, G)))
By parallel_line_definition on line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(F, B, G), altitude(projection(A, Line(D, G)), B, G) we get altitude(F, B, G) == parallel_line(line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), B, G))
By parallel_line_definition on orthocenter(A, F, projection(A, i)), parallel_line(F, i), parallel_line(midpoint(B, G), i) we get parallel_line(F, i) == parallel_line(orthocenter(A, F, projection(A, i)), parallel_line(midpoint(B, G), i))
By parallel_line_definition on D, altitude(D, F, midpoint(B, G)), altitude(orthocenter(A, B, D), F, midpoint(B, G)) we get altitude(D, F, midpoint(B, G)) == parallel_line(D, altitude(orthocenter(A, B, D), F, midpoint(B, G)))
By parallel_line_definition on orthocenter(D, midpoint(B, G), projection(A, i)), altitude(projection(A, i), A, D), Line(B, G) we get altitude(projection(A, i), A, D) == parallel_line(orthocenter(D, midpoint(B, G), projection(A, i)), Line(B, G))
By parallel_line_definition on projection(A, Line(D, G)), altitude(projection(A, Line(D, G)), D, E), altitude(midpoint(B, G), D, E) we get altitude(projection(A, Line(D, G)), D, E) == parallel_line(projection(A, Line(D, G)), altitude(midpoint(B, G), D, E))
By parallel_line_definition on line_intersection(Line(D, F), altitude(projection(A, i), D, F)), Line(D, F), altitude(projection(A, i), A, B) we get Line(D, F) == parallel_line(line_intersection(Line(D, F), altitude(projection(A, i), D, F)), altitude(projection(A, i), A, B))
By parallel_line_definition on line_intersection(median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G))), altitude(orthocenter(A, D, G), E, midpoint(B, G)), altitude(G, E, midpoint(B, G)) we get altitude(orthocenter(A, D, G), E, midpoint(B, G)) == parallel_line(line_intersection(median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G))), altitude(G, E, midpoint(B, G)))
By parallel_line_definition on line_intersection(median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G))), altitude(orthocenter(A, D, G), E, midpoint(B, G)), altitude(D, E, midpoint(B, G)) we get altitude(orthocenter(A, D, G), E, midpoint(B, G)) == parallel_line(line_intersection(median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G))), altitude(D, E, midpoint(B, G)))
By parallel_line_definition on E, g, altitude(projection(A, Line(D, G)), D, E) we get g == parallel_line(E, altitude(projection(A, Line(D, G)), D, E))
By parallel_line_definition on line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(E, B, G), altitude(projection(A, i), B, G) we get altitude(E, B, G) == parallel_line(line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, i), B, G))
By parallel_line_definition on orthocenter(A, E, projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), A, C), Line(D, E) we get altitude(projection(A, Line(D, G)), A, C) == parallel_line(orthocenter(A, E, projection(A, Line(D, G))), Line(D, E))
By parallel_line_definition on midpoint(B, G), h, altitude(projection(A, i), B, G) we get h == parallel_line(midpoint(B, G), altitude(projection(A, i), B, G))
By parallel_line_definition on line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D), altitude(F, A, D) we get altitude(projection(A, Line(D, G)), A, D) == parallel_line(line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(F, A, D))
By parallel_line_definition on midpoint(B, G), h, altitude(projection(A, Line(D, G)), B, G) we get h == parallel_line(midpoint(B, G), altitude(projection(A, Line(D, G)), B, G))
By parallel_line_definition on line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), altitude(projection(A, Line(D, G)), D, E), altitude(midpoint(B, G), D, E) we get altitude(projection(A, Line(D, G)), D, E) == parallel_line(line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), altitude(midpoint(B, G), D, E))
By parallel_line_definition on orthocenter(E, G, projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), A, C), altitude(midpoint(B, G), A, C) we get altitude(projection(A, Line(D, G)), A, C) == parallel_line(orthocenter(E, G, projection(A, Line(D, G))), altitude(midpoint(B, G), A, C))
By parallel_line_definition on line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)), altitude(projection(A, i), A, D), altitude(E, A, D) we get altitude(projection(A, i), A, D) == parallel_line(line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)), altitude(E, A, D))
By parallel_line_definition on orthocenter(E, G, projection(A, Line(D, G))), altitude(E, D, G), altitude(A, D, G) we get altitude(E, D, G) == parallel_line(orthocenter(E, G, projection(A, Line(D, G))), altitude(A, D, G))
By parallel_line_definition on orthocenter(A, midpoint(B, G), projection(A, i)), altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), A, D) we get altitude(projection(A, i), A, D) == parallel_line(orthocenter(A, midpoint(B, G), projection(A, i)), altitude(projection(A, Line(D, G)), A, D))
By parallel_line_definition on projection(A, i), altitude(projection(A, i), B, G), altitude(F, B, G) we get altitude(projection(A, i), B, G) == parallel_line(projection(A, i), altitude(F, B, G))
By parallel_line_definition on projection(E, h), h, altitude(projection(A, i), B, G) we get h == parallel_line(projection(E, h), altitude(projection(A, i), B, G))
By parallel_line_definition on line_intersection(Line(B, G), altitude(F, B, G)), altitude(F, B, G), altitude(projection(A, Line(D, G)), B, G) we get altitude(F, B, G) == parallel_line(line_intersection(Line(B, G), altitude(F, B, G)), altitude(projection(A, Line(D, G)), B, G))
By parallel_line_definition on projection(midpoint(B, G), g), g, altitude(projection(A, Line(D, G)), D, E) we get g == parallel_line(projection(midpoint(B, G), g), altitude(projection(A, Line(D, G)), D, E))
By parallel_line_definition on A, altitude(A, F, midpoint(B, G)), altitude(D, F, midpoint(B, G)) we get altitude(A, F, midpoint(B, G)) == parallel_line(A, altitude(D, F, midpoint(B, G)))
By parallel_line_definition on line_intersection(median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G))), altitude(orthocenter(A, B, D), F, midpoint(B, G)), altitude(B, F, midpoint(B, G)) we get altitude(orthocenter(A, B, D), F, midpoint(B, G)) == parallel_line(line_intersection(median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G))), altitude(B, F, midpoint(B, G)))
By parallel_line_definition on line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), altitude(A, F, midpoint(B, G)), altitude(D, F, midpoint(B, G)) we get altitude(A, F, midpoint(B, G)) == parallel_line(line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), altitude(D, F, midpoint(B, G)))
By parallel_line_definition on line_intersection(median(F, B, G), altitude(B, F, midpoint(B, G))), altitude(B, F, midpoint(B, G)), altitude(orthocenter(A, B, D), F, midpoint(B, G)) we get altitude(B, F, midpoint(B, G)) == parallel_line(line_intersection(median(F, B, G), altitude(B, F, midpoint(B, G))), altitude(orthocenter(A, B, D), F, midpoint(B, G)))
By parallel_line_definition on orthocenter(A, B, D), altitude(orthocenter(A, B, D), F, midpoint(B, G)), altitude(D, F, midpoint(B, G)) we get altitude(orthocenter(A, B, D), F, midpoint(B, G)) == parallel_line(orthocenter(A, B, D), altitude(D, F, midpoint(B, G)))
By parallel_line_definition on orthocenter(B, F, midpoint(B, G)), altitude(F, B, G), altitude(projection(A, i), B, G) we get altitude(F, B, G) == parallel_line(orthocenter(B, F, midpoint(B, G)), altitude(projection(A, i), B, G))
By parallel_line_definition on orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), altitude(midpoint(B, G), D, E), altitude(projection(A, Line(D, G)), D, E) we get altitude(midpoint(B, G), D, E) == parallel_line(orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), altitude(projection(A, Line(D, G)), D, E))
By parallel_line_definition on line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), Line(B, G), altitude(E, A, D) we get Line(B, G) == parallel_line(line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), altitude(E, A, D))
By parallel_line_definition on line_intersection(altitude(midpoint(B, G), D, F), altitude(projection(A, i), A, B)), altitude(projection(A, i), A, B), altitude(midpoint(B, G), A, B) we get altitude(projection(A, i), A, B) == parallel_line(line_intersection(altitude(midpoint(B, G), D, F), altitude(projection(A, i), A, B)), altitude(midpoint(B, G), A, B))
By parallel_line_definition on orthocenter(A, F, projection(A, i)), altitude(projection(A, i), A, B), Line(D, F) we get altitude(projection(A, i), A, B) == parallel_line(orthocenter(A, F, projection(A, i)), Line(D, F))
By parallel_line_definition on D, h, altitude(projection(A, i), B, G) we get h == parallel_line(D, altitude(projection(A, i), B, G))
By parallel_line_definition on orthocenter(A, midpoint(B, G), projection(A, i)), altitude(projection(A, i), A, D), altitude(F, A, D) we get altitude(projection(A, i), A, D) == parallel_line(orthocenter(A, midpoint(B, G), projection(A, i)), altitude(F, A, D))
By parallel_line_definition on orthocenter(E, G, midpoint(B, G)), altitude(E, B, G), altitude(projection(A, i), B, G) we get altitude(E, B, G) == parallel_line(orthocenter(E, G, midpoint(B, G)), altitude(projection(A, i), B, G))
By parallel_line_definition on orthocenter(A, midpoint(B, G), projection(A, Line(D, G))), parallel_line(midpoint(B, G), Line(D, G)), Line(D, G) we get parallel_line(midpoint(B, G), Line(D, G)) == parallel_line(orthocenter(A, midpoint(B, G), projection(A, Line(D, G))), Line(D, G))
By parallel_line_definition on orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), altitude(E, B, G), altitude(projection(A, i), B, G) we get altitude(E, B, G) == parallel_line(orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), altitude(projection(A, i), B, G))
By parallel_line_definition on C, g, altitude(projection(A, Line(D, G)), D, E) we get g == parallel_line(C, altitude(projection(A, Line(D, G)), D, E))
By parallel_line_definition on G, altitude(G, E, midpoint(B, G)), altitude(orthocenter(A, D, G), E, midpoint(B, G)) we get altitude(G, E, midpoint(B, G)) == parallel_line(G, altitude(orthocenter(A, D, G), E, midpoint(B, G)))
By parallel_line_definition on orthocenter(D, E, midpoint(B, G)), altitude(D, E, midpoint(B, G)), altitude(G, E, midpoint(B, G)) we get altitude(D, E, midpoint(B, G)) == parallel_line(orthocenter(D, E, midpoint(B, G)), altitude(G, E, midpoint(B, G)))
By parallel_line_definition on line_intersection(altitude(midpoint(B, G), D, F), altitude(projection(A, i), A, B)), altitude(midpoint(B, G), D, F), altitude(projection(A, i), D, F) we get altitude(midpoint(B, G), D, F) == parallel_line(line_intersection(altitude(midpoint(B, G), D, F), altitude(projection(A, i), A, B)), altitude(projection(A, i), D, F))
By parallel_line_definition on orthocenter(A, midpoint(B, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, i), A, D) we get altitude(projection(A, Line(D, G)), A, D) == parallel_line(orthocenter(A, midpoint(B, G), projection(A, Line(D, G))), altitude(projection(A, i), A, D))
By parallel_line_definition on A, h, altitude(projection(A, Line(D, G)), B, G) we get h == parallel_line(A, altitude(projection(A, Line(D, G)), B, G))
By parallel_line_definition on line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D), Line(B, G) we get altitude(projection(A, Line(D, G)), A, D) == parallel_line(line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)), Line(B, G))
By parallel_line_definition on orthocenter(A, B, D), altitude(orthocenter(A, B, D), F, midpoint(B, G)), altitude(B, F, midpoint(B, G)) we get altitude(orthocenter(A, B, D), F, midpoint(B, G)) == parallel_line(orthocenter(A, B, D), altitude(B, F, midpoint(B, G)))
By parallel_line_definition on line_intersection(Line(B, G), altitude(F, B, G)), altitude(F, B, G), altitude(projection(A, i), B, G) we get altitude(F, B, G) == parallel_line(line_intersection(Line(B, G), altitude(F, B, G)), altitude(projection(A, i), B, G))
By parallel_line_definition on line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), Line(B, G), altitude(projection(A, Line(D, G)), A, D) we get Line(B, G) == parallel_line(line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), A, D))
By parallel_line_definition on orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), altitude(orthocenter(A, B, D), F, midpoint(B, G)), altitude(A, F, midpoint(B, G)) we get altitude(orthocenter(A, B, D), F, midpoint(B, G)) == parallel_line(orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), altitude(A, F, midpoint(B, G)))
By parallel_line_definition on projection(F, h), h, altitude(projection(A, i), B, G) we get h == parallel_line(projection(F, h), altitude(projection(A, i), B, G))
By parallel_line_definition on orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), altitude(orthocenter(A, D, G), E, midpoint(B, G)), altitude(G, E, midpoint(B, G)) we get altitude(orthocenter(A, D, G), E, midpoint(B, G)) == parallel_line(orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), altitude(G, E, midpoint(B, G)))
By parallel_line_definition on line_intersection(Line(D, F), altitude(projection(A, i), D, F)), altitude(projection(A, i), D, F), f we get altitude(projection(A, i), D, F) == parallel_line(line_intersection(Line(D, F), altitude(projection(A, i), D, F)), f)
By parallel_line_definition on orthocenter(A, E, projection(A, Line(D, G))), parallel_line(E, Line(D, G)), Line(D, G) we get parallel_line(E, Line(D, G)) == parallel_line(orthocenter(A, E, projection(A, Line(D, G))), Line(D, G))
By parallel_line_definition on orthocenter(E, G, midpoint(B, G)), altitude(G, E, midpoint(B, G)), altitude(A, E, midpoint(B, G)) we get altitude(G, E, midpoint(B, G)) == parallel_line(orthocenter(E, G, midpoint(B, G)), altitude(A, E, midpoint(B, G)))
By parallel_line_definition on orthocenter(A, midpoint(B, G), projection(A, i)), parallel_line(midpoint(B, G), i), parallel_line(F, i) we get parallel_line(midpoint(B, G), i) == parallel_line(orthocenter(A, midpoint(B, G), projection(A, i)), parallel_line(F, i))
By parallel_line_definition on line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D), altitude(E, A, D) we get altitude(projection(A, Line(D, G)), A, D) == parallel_line(line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(E, A, D))
By parallel_line_definition on projection(A, Line(D, G)), altitude(projection(A, Line(D, G)), B, G), altitude(projection(A, i), B, G) we get altitude(projection(A, Line(D, G)), B, G) == parallel_line(projection(A, Line(D, G)), altitude(projection(A, i), B, G))
By parallel_line_definition on D, altitude(D, E, midpoint(B, G)), altitude(G, E, midpoint(B, G)) we get altitude(D, E, midpoint(B, G)) == parallel_line(D, altitude(G, E, midpoint(B, G)))
By parallel_line_definition on A, h, altitude(projection(A, i), B, G) we get h == parallel_line(A, altitude(projection(A, i), B, G))
By parallel_line_definition on orthocenter(D, midpoint(B, G), projection(A, i)), altitude(midpoint(B, G), B, D), altitude(A, B, D) we get altitude(midpoint(B, G), B, D) == parallel_line(orthocenter(D, midpoint(B, G), projection(A, i)), altitude(A, B, D))
By parallel_line_definition on orthocenter(D, midpoint(B, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), A, D), altitude(F, A, D) we get altitude(projection(A, Line(D, G)), A, D) == parallel_line(orthocenter(D, midpoint(B, G), projection(A, Line(D, G))), altitude(F, A, D))
By parallel_line_definition on orthocenter(E, G, projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), A, C), Line(D, E) we get altitude(projection(A, Line(D, G)), A, C) == parallel_line(orthocenter(E, G, projection(A, Line(D, G))), Line(D, E))
By parallel_line_definition on line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)), altitude(E, B, G), h we get altitude(E, B, G) == parallel_line(line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)), h)
By parallel_line_definition on orthocenter(D, E, midpoint(B, G)), altitude(D, E, midpoint(B, G)), altitude(A, E, midpoint(B, G)) we get altitude(D, E, midpoint(B, G)) == parallel_line(orthocenter(D, E, midpoint(B, G)), altitude(A, E, midpoint(B, G)))
By parallel_line_definition on orthocenter(D, E, midpoint(B, G)), altitude(D, E, midpoint(B, G)), altitude(orthocenter(A, D, G), E, midpoint(B, G)) we get altitude(D, E, midpoint(B, G)) == parallel_line(orthocenter(D, E, midpoint(B, G)), altitude(orthocenter(A, D, G), E, midpoint(B, G)))
By parallel_line_definition on line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), altitude(E, B, G) we get altitude(projection(A, Line(D, G)), B, G) == parallel_line(line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), altitude(E, B, G))
By parallel_line_definition on orthocenter(D, midpoint(B, G), projection(A, i)), altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), A, D) we get altitude(projection(A, i), A, D) == parallel_line(orthocenter(D, midpoint(B, G), projection(A, i)), altitude(projection(A, Line(D, G)), A, D))
By parallel_line_definition on orthocenter(D, F, midpoint(B, G)), altitude(midpoint(B, G), D, F), altitude(projection(A, i), D, F) we get altitude(midpoint(B, G), D, F) == parallel_line(orthocenter(D, F, midpoint(B, G)), altitude(projection(A, i), D, F))
By parallel_line_definition on line_intersection(h, altitude(projection(A, i), A, D)), h, altitude(projection(A, Line(D, G)), B, G) we get h == parallel_line(line_intersection(h, altitude(projection(A, i), A, D)), altitude(projection(A, Line(D, G)), B, G))
By parallel_line_definition on orthocenter(E, G, midpoint(B, G)), altitude(G, E, midpoint(B, G)), altitude(D, E, midpoint(B, G)) we get altitude(G, E, midpoint(B, G)) == parallel_line(orthocenter(E, G, midpoint(B, G)), altitude(D, E, midpoint(B, G)))
By parallel_line_definition on D, altitude(D, E, midpoint(B, G)), altitude(orthocenter(A, D, G), E, midpoint(B, G)) we get altitude(D, E, midpoint(B, G)) == parallel_line(D, altitude(orthocenter(A, D, G), E, midpoint(B, G)))
By parallel_line_definition on orthocenter(A, midpoint(B, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), A, D), altitude(F, A, D) we get altitude(projection(A, Line(D, G)), A, D) == parallel_line(orthocenter(A, midpoint(B, G), projection(A, Line(D, G))), altitude(F, A, D))
By parallel_line_definition on orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), altitude(orthocenter(A, D, G), E, midpoint(B, G)), altitude(A, E, midpoint(B, G)) we get altitude(orthocenter(A, D, G), E, midpoint(B, G)) == parallel_line(orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), altitude(A, E, midpoint(B, G)))
By parallel_line_definition on H, f, altitude(projection(A, i), D, F) we get f == parallel_line(H, altitude(projection(A, i), D, F))
By parallel_line_definition on A, g, altitude(projection(A, Line(D, G)), D, E) we get g == parallel_line(A, altitude(projection(A, Line(D, G)), D, E))
By parallel_line_definition on orthocenter(D, midpoint(B, G), projection(A, i)), altitude(projection(A, i), A, D), altitude(E, A, D) we get altitude(projection(A, i), A, D) == parallel_line(orthocenter(D, midpoint(B, G), projection(A, i)), altitude(E, A, D))
By parallel_line_definition on line_intersection(altitude(midpoint(B, G), D, E), altitude(projection(A, Line(D, G)), A, C)), altitude(midpoint(B, G), D, E), g we get altitude(midpoint(B, G), D, E) == parallel_line(line_intersection(altitude(midpoint(B, G), D, E), altitude(projection(A, Line(D, G)), A, C)), g)
By parallel_line_definition on orthocenter(A, F, midpoint(B, G)), altitude(A, F, midpoint(B, G)), altitude(D, F, midpoint(B, G)) we get altitude(A, F, midpoint(B, G)) == parallel_line(orthocenter(A, F, midpoint(B, G)), altitude(D, F, midpoint(B, G)))
By parallel_line_definition on line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), Line(D, E), altitude(midpoint(B, G), A, C) we get Line(D, E) == parallel_line(line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), altitude(midpoint(B, G), A, C))
By parallel_line_definition on line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(F, B, G), altitude(E, B, G) we get altitude(F, B, G) == parallel_line(line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(E, B, G))
By parallel_line_definition on orthocenter(B, F, projection(A, i)), altitude(F, B, D), altitude(midpoint(B, G), B, D) we get altitude(F, B, D) == parallel_line(orthocenter(B, F, projection(A, i)), altitude(midpoint(B, G), B, D))
By parallel_line_definition on midpoint(B, G), altitude(midpoint(B, G), D, E), altitude(projection(A, Line(D, G)), D, E) we get altitude(midpoint(B, G), D, E) == parallel_line(midpoint(B, G), altitude(projection(A, Line(D, G)), D, E))
By parallel_line_definition on orthocenter(A, E, projection(A, Line(D, G))), parallel_line(E, Line(D, G)), parallel_line(midpoint(B, G), Line(D, G)) we get parallel_line(E, Line(D, G)) == parallel_line(orthocenter(A, E, projection(A, Line(D, G))), parallel_line(midpoint(B, G), Line(D, G)))
By parallel_line_definition on line_intersection(median(E, B, G), altitude(D, E, midpoint(B, G))), altitude(D, E, midpoint(B, G)), altitude(orthocenter(A, D, G), E, midpoint(B, G)) we get altitude(D, E, midpoint(B, G)) == parallel_line(line_intersection(median(E, B, G), altitude(D, E, midpoint(B, G))), altitude(orthocenter(A, D, G), E, midpoint(B, G)))
By parallel_line_definition on orthocenter(D, midpoint(B, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), A, D), Line(B, G) we get altitude(projection(A, Line(D, G)), A, D) == parallel_line(orthocenter(D, midpoint(B, G), projection(A, Line(D, G))), Line(B, G))
By parallel_line_definition on I, h, altitude(projection(A, Line(D, G)), B, G) we get h == parallel_line(I, altitude(projection(A, Line(D, G)), B, G))
By parallel_line_definition on projection(A, i), altitude(projection(A, i), D, F), f we get altitude(projection(A, i), D, F) == parallel_line(projection(A, i), f)
By parallel_line_definition on orthocenter(A, E, midpoint(B, G)), altitude(A, E, midpoint(B, G)), altitude(orthocenter(A, D, G), E, midpoint(B, G)) we get altitude(A, E, midpoint(B, G)) == parallel_line(orthocenter(A, E, midpoint(B, G)), altitude(orthocenter(A, D, G), E, midpoint(B, G)))
By parallel_line_definition on orthocenter(D, midpoint(B, G), projection(A, i)), altitude(midpoint(B, G), B, D), altitude(F, B, D) we get altitude(midpoint(B, G), B, D) == parallel_line(orthocenter(D, midpoint(B, G), projection(A, i)), altitude(F, B, D))
By parallel_line_definition on projection(A, i), altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), B, G) we get altitude(projection(A, i), B, G) == parallel_line(projection(A, i), altitude(projection(A, Line(D, G)), B, G))
By parallel_line_definition on line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(E, B, G), altitude(projection(A, Line(D, G)), B, G) we get altitude(E, B, G) == parallel_line(line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), B, G))
By parallel_line_definition on line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)), altitude(F, B, G), h we get altitude(F, B, G) == parallel_line(line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)), h)
By parallel_line_definition on line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)), altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), A, D) we get altitude(projection(A, i), A, D) == parallel_line(line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)), altitude(projection(A, Line(D, G)), A, D))
By parallel_line_definition on orthocenter(A, midpoint(B, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), A, D), altitude(E, A, D) we get altitude(projection(A, Line(D, G)), A, D) == parallel_line(orthocenter(A, midpoint(B, G), projection(A, Line(D, G))), altitude(E, A, D))
By parallel_line_definition on projection(A, i), altitude(projection(A, i), D, F), altitude(midpoint(B, G), D, F) we get altitude(projection(A, i), D, F) == parallel_line(projection(A, i), altitude(midpoint(B, G), D, F))
By parallel_line_definition on line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)), altitude(F, B, G), altitude(projection(A, Line(D, G)), B, G) we get altitude(F, B, G) == parallel_line(line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)), altitude(projection(A, Line(D, G)), B, G))
By parallel_line_definition on line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), altitude(A, F, midpoint(B, G)), altitude(orthocenter(A, B, D), F, midpoint(B, G)) we get altitude(A, F, midpoint(B, G)) == parallel_line(line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), altitude(orthocenter(A, B, D), F, midpoint(B, G)))
By parallel_line_definition on line_intersection(Line(D, F), altitude(projection(A, i), D, F)), Line(D, F), altitude(midpoint(B, G), A, B) we get Line(D, F) == parallel_line(line_intersection(Line(D, F), altitude(projection(A, i), D, F)), altitude(midpoint(B, G), A, B))
By parallel_line_definition on orthocenter(A, B, D), altitude(orthocenter(A, B, D), F, midpoint(B, G)), altitude(A, F, midpoint(B, G)) we get altitude(orthocenter(A, B, D), F, midpoint(B, G)) == parallel_line(orthocenter(A, B, D), altitude(A, F, midpoint(B, G)))
By parallel_line_definition on line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))), altitude(A, E, midpoint(B, G)), altitude(D, E, midpoint(B, G)) we get altitude(A, E, midpoint(B, G)) == parallel_line(line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))), altitude(D, E, midpoint(B, G)))
By parallel_line_definition on orthocenter(A, midpoint(B, G), projection(A, i)), altitude(projection(A, i), A, D), Line(B, G) we get altitude(projection(A, i), A, D) == parallel_line(orthocenter(A, midpoint(B, G), projection(A, i)), Line(B, G))
By parallel_line_definition on D, altitude(D, F, midpoint(B, G)), altitude(B, F, midpoint(B, G)) we get altitude(D, F, midpoint(B, G)) == parallel_line(D, altitude(B, F, midpoint(B, G)))
By parallel_line_definition on line_intersection(median(F, B, G), altitude(B, F, midpoint(B, G))), altitude(B, F, midpoint(B, G)), altitude(D, F, midpoint(B, G)) we get altitude(B, F, midpoint(B, G)) == parallel_line(line_intersection(median(F, B, G), altitude(B, F, midpoint(B, G))), altitude(D, F, midpoint(B, G)))
By parallel_line_definition on line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), altitude(projection(A, i), B, G) we get altitude(projection(A, Line(D, G)), B, G) == parallel_line(line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, i), B, G))
By parallel_line_definition on line_intersection(median(E, B, G), altitude(D, E, midpoint(B, G))), altitude(D, E, midpoint(B, G)), altitude(A, E, midpoint(B, G)) we get altitude(D, E, midpoint(B, G)) == parallel_line(line_intersection(median(E, B, G), altitude(D, E, midpoint(B, G))), altitude(A, E, midpoint(B, G)))
By parallel_line_definition on line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), Line(B, G), altitude(F, A, D) we get Line(B, G) == parallel_line(line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), altitude(F, A, D))
By parallel_line_definition on A, altitude(A, E, midpoint(B, G)), altitude(orthocenter(A, D, G), E, midpoint(B, G)) we get altitude(A, E, midpoint(B, G)) == parallel_line(A, altitude(orthocenter(A, D, G), E, midpoint(B, G)))
By parallel_line_definition on line_intersection(median(E, B, G), altitude(G, E, midpoint(B, G))), altitude(G, E, midpoint(B, G)), altitude(D, E, midpoint(B, G)) we get altitude(G, E, midpoint(B, G)) == parallel_line(line_intersection(median(E, B, G), altitude(G, E, midpoint(B, G))), altitude(D, E, midpoint(B, G)))
By parallel_line_definition on line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)), altitude(E, B, G), altitude(F, B, G) we get altitude(E, B, G) == parallel_line(line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)), altitude(F, B, G))
By parallel_line_definition on line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(E, B, G), h we get altitude(E, B, G) == parallel_line(line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)), h)
By parallel_line_definition on line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D), Line(B, G) we get altitude(projection(A, Line(D, G)), A, D) == parallel_line(line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)), Line(B, G))
By parallel_line_definition on line_intersection(Line(B, G), altitude(projection(A, i), B, G)), Line(B, G), altitude(E, A, D) we get Line(B, G) == parallel_line(line_intersection(Line(B, G), altitude(projection(A, i), B, G)), altitude(E, A, D))
By parallel_line_definition on F, f, altitude(projection(A, i), D, F) we get f == parallel_line(F, altitude(projection(A, i), D, F))
By parallel_line_definition on projection(A, Line(D, G)), altitude(projection(A, Line(D, G)), B, G), h we get altitude(projection(A, Line(D, G)), B, G) == parallel_line(projection(A, Line(D, G)), h)
By parallel_line_definition on orthocenter(B, F, midpoint(B, G)), altitude(B, F, midpoint(B, G)), altitude(D, F, midpoint(B, G)) we get altitude(B, F, midpoint(B, G)) == parallel_line(orthocenter(B, F, midpoint(B, G)), altitude(D, F, midpoint(B, G)))
By parallel_line_definition on line_intersection(altitude(E, A, D), altitude(F, B, G)), altitude(F, B, G), altitude(projection(A, i), B, G) we get altitude(F, B, G) == parallel_line(line_intersection(altitude(E, A, D), altitude(F, B, G)), altitude(projection(A, i), B, G))
By parallel_line_definition on orthocenter(A, F, projection(A, i)), parallel_line(F, i), i we get parallel_line(F, i) == parallel_line(orthocenter(A, F, projection(A, i)), i)
By parallel_line_definition on orthocenter(D, midpoint(B, G), projection(A, Line(D, G))), altitude(midpoint(B, G), D, G), altitude(A, D, G) we get altitude(midpoint(B, G), D, G) == parallel_line(orthocenter(D, midpoint(B, G), projection(A, Line(D, G))), altitude(A, D, G))
By parallel_line_definition on line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), Line(D, E), altitude(projection(A, Line(D, G)), A, C) we get Line(D, E) == parallel_line(line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), altitude(projection(A, Line(D, G)), A, C))
By parallel_line_definition on orthocenter(A, D, G), altitude(orthocenter(A, D, G), E, midpoint(B, G)), altitude(A, E, midpoint(B, G)) we get altitude(orthocenter(A, D, G), E, midpoint(B, G)) == parallel_line(orthocenter(A, D, G), altitude(A, E, midpoint(B, G)))
By parallel_line_definition on projection(midpoint(B, G), f), f, altitude(projection(A, i), D, F) we get f == parallel_line(projection(midpoint(B, G), f), altitude(projection(A, i), D, F))
By parallel_line_definition on line_intersection(altitude(midpoint(B, G), D, E), altitude(projection(A, Line(D, G)), A, C)), altitude(projection(A, Line(D, G)), A, C), Line(D, E) we get altitude(projection(A, Line(D, G)), A, C) == parallel_line(line_intersection(altitude(midpoint(B, G), D, E), altitude(projection(A, Line(D, G)), A, C)), Line(D, E))
By parallel_line_definition on line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))), altitude(A, E, midpoint(B, G)), altitude(G, E, midpoint(B, G)) we get altitude(A, E, midpoint(B, G)) == parallel_line(line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))), altitude(G, E, midpoint(B, G)))
By parallel_line_definition on A, altitude(A, F, midpoint(B, G)), altitude(orthocenter(A, B, D), F, midpoint(B, G)) we get altitude(A, F, midpoint(B, G)) == parallel_line(A, altitude(orthocenter(A, B, D), F, midpoint(B, G)))
By parallel_line_definition on line_intersection(altitude(E, A, D), altitude(F, B, G)), altitude(F, B, G), altitude(projection(A, Line(D, G)), B, G) we get altitude(F, B, G) == parallel_line(line_intersection(altitude(E, A, D), altitude(F, B, G)), altitude(projection(A, Line(D, G)), B, G))
By parallel_line_definition on line_intersection(Line(B, G), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G), h we get altitude(projection(A, i), B, G) == parallel_line(line_intersection(Line(B, G), altitude(projection(A, i), B, G)), h)
By parallel_line_definition on orthocenter(D, midpoint(B, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), A, D), altitude(E, A, D) we get altitude(projection(A, Line(D, G)), A, D) == parallel_line(orthocenter(D, midpoint(B, G), projection(A, Line(D, G))), altitude(E, A, D))
By parallel_line_definition on orthocenter(D, F, midpoint(B, G)), altitude(D, F, midpoint(B, G)), altitude(B, F, midpoint(B, G)) we get altitude(D, F, midpoint(B, G)) == parallel_line(orthocenter(D, F, midpoint(B, G)), altitude(B, F, midpoint(B, G)))
By parallel_line_definition on line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)), altitude(F, B, G), altitude(projection(A, i), B, G) we get altitude(F, B, G) == parallel_line(line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)), altitude(projection(A, i), B, G))
By parallel_line_definition on line_intersection(Line(B, G), altitude(E, B, G)), altitude(E, B, G), altitude(projection(A, i), B, G) we get altitude(E, B, G) == parallel_line(line_intersection(Line(B, G), altitude(E, B, G)), altitude(projection(A, i), B, G))
By parallel_line_definition on line_intersection(altitude(midpoint(B, G), D, E), altitude(projection(A, Line(D, G)), A, C)), altitude(projection(A, Line(D, G)), A, C), altitude(midpoint(B, G), A, C) we get altitude(projection(A, Line(D, G)), A, C) == parallel_line(line_intersection(altitude(midpoint(B, G), D, E), altitude(projection(A, Line(D, G)), A, C)), altitude(midpoint(B, G), A, C))
By parallel_line_definition on line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)), altitude(projection(A, i), A, D), altitude(E, A, D) we get altitude(projection(A, i), A, D) == parallel_line(line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)), altitude(E, A, D))
By parallel_line_definition on orthocenter(D, F, midpoint(B, G)), altitude(D, F, midpoint(B, G)), altitude(orthocenter(A, B, D), F, midpoint(B, G)) we get altitude(D, F, midpoint(B, G)) == parallel_line(orthocenter(D, F, midpoint(B, G)), altitude(orthocenter(A, B, D), F, midpoint(B, G)))
By parallel_line_definition on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), altitude(midpoint(B, G), D, E), altitude(projection(A, Line(D, G)), D, E) we get altitude(midpoint(B, G), D, E) == parallel_line(line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), altitude(projection(A, Line(D, G)), D, E))
By parallel_line_definition on line_intersection(altitude(E, B, G), altitude(F, A, D)), altitude(E, B, G), altitude(projection(A, Line(D, G)), B, G) we get altitude(E, B, G) == parallel_line(line_intersection(altitude(E, B, G), altitude(F, A, D)), altitude(projection(A, Line(D, G)), B, G))
By parallel_line_definition on line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), altitude(midpoint(B, G), D, F), altitude(projection(A, i), D, F) we get altitude(midpoint(B, G), D, F) == parallel_line(line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), altitude(projection(A, i), D, F))
By parallel_line_definition on orthocenter(A, D, G), altitude(orthocenter(A, D, G), E, midpoint(B, G)), altitude(D, E, midpoint(B, G)) we get altitude(orthocenter(A, D, G), E, midpoint(B, G)) == parallel_line(orthocenter(A, D, G), altitude(D, E, midpoint(B, G)))
By parallel_line_definition on orthocenter(D, F, midpoint(B, G)), altitude(D, F, midpoint(B, G)), altitude(A, F, midpoint(B, G)) we get altitude(D, F, midpoint(B, G)) == parallel_line(orthocenter(D, F, midpoint(B, G)), altitude(A, F, midpoint(B, G)))
By parallel_line_definition on line_intersection(median(E, B, G), altitude(G, E, midpoint(B, G))), altitude(G, E, midpoint(B, G)), altitude(A, E, midpoint(B, G)) we get altitude(G, E, midpoint(B, G)) == parallel_line(line_intersection(median(E, B, G), altitude(G, E, midpoint(B, G))), altitude(A, E, midpoint(B, G)))
By parallel_line_definition on A, altitude(A, E, midpoint(B, G)), altitude(G, E, midpoint(B, G)) we get altitude(A, E, midpoint(B, G)) == parallel_line(A, altitude(G, E, midpoint(B, G)))
By parallel_line_definition on orthocenter(E, G, midpoint(B, G)), altitude(E, B, G), altitude(projection(A, Line(D, G)), B, G) we get altitude(E, B, G) == parallel_line(orthocenter(E, G, midpoint(B, G)), altitude(projection(A, Line(D, G)), B, G))
By parallel_line_definition on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), h, altitude(projection(A, i), B, G) we get h == parallel_line(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, i), B, G))
By parallel_line_definition on orthocenter(A, E, midpoint(B, G)), altitude(A, E, midpoint(B, G)), altitude(D, E, midpoint(B, G)) we get altitude(A, E, midpoint(B, G)) == parallel_line(orthocenter(A, E, midpoint(B, G)), altitude(D, E, midpoint(B, G)))
By parallel_line_definition on orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), altitude(orthocenter(A, B, D), F, midpoint(B, G)), altitude(B, F, midpoint(B, G)) we get altitude(orthocenter(A, B, D), F, midpoint(B, G)) == parallel_line(orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), altitude(B, F, midpoint(B, G)))
By parallel_line_definition on projection(A, Line(D, G)), altitude(projection(A, Line(D, G)), B, G), altitude(F, B, G) we get altitude(projection(A, Line(D, G)), B, G) == parallel_line(projection(A, Line(D, G)), altitude(F, B, G))
By parallel_line_definition on line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), Line(B, G), altitude(projection(A, i), A, D) we get Line(B, G) == parallel_line(line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, i), A, D))
By parallel_line_definition on line_intersection(h, altitude(projection(A, i), A, D)), h, altitude(projection(A, i), B, G) we get h == parallel_line(line_intersection(h, altitude(projection(A, i), A, D)), altitude(projection(A, i), B, G))
By parallel_line_definition on orthocenter(A, F, projection(A, i)), altitude(projection(A, i), A, B), altitude(midpoint(B, G), A, B) we get altitude(projection(A, i), A, B) == parallel_line(orthocenter(A, F, projection(A, i)), altitude(midpoint(B, G), A, B))
By parallel_line_definition on midpoint(B, G), altitude(midpoint(B, G), D, F), altitude(projection(A, i), D, F) we get altitude(midpoint(B, G), D, F) == parallel_line(midpoint(B, G), altitude(projection(A, i), D, F))
By parallel_line_definition on line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)), altitude(projection(A, i), A, D), Line(B, G) we get altitude(projection(A, i), A, D) == parallel_line(line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)), Line(B, G))
By parallel_line_definition on line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)), altitude(projection(A, i), A, D), altitude(F, A, D) we get altitude(projection(A, i), A, D) == parallel_line(line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)), altitude(F, A, D))
By parallel_line_definition on line_intersection(median(E, B, G), altitude(D, E, midpoint(B, G))), altitude(D, E, midpoint(B, G)), altitude(G, E, midpoint(B, G)) we get altitude(D, E, midpoint(B, G)) == parallel_line(line_intersection(median(E, B, G), altitude(D, E, midpoint(B, G))), altitude(G, E, midpoint(B, G)))
By parallel_line_definition on orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), altitude(midpoint(B, G), D, F), altitude(projection(A, i), D, F) we get altitude(midpoint(B, G), D, F) == parallel_line(orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), altitude(projection(A, i), D, F))
By parallel_line_definition on line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)), altitude(E, B, G), altitude(projection(A, i), B, G) we get altitude(E, B, G) == parallel_line(line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)), altitude(projection(A, i), B, G))
By parallel_line_definition on line_intersection(median(F, B, G), altitude(D, F, midpoint(B, G))), altitude(D, F, midpoint(B, G)), altitude(orthocenter(A, B, D), F, midpoint(B, G)) we get altitude(D, F, midpoint(B, G)) == parallel_line(line_intersection(median(F, B, G), altitude(D, F, midpoint(B, G))), altitude(orthocenter(A, B, D), F, midpoint(B, G)))
By parallel_line_definition on line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)), altitude(F, B, G), altitude(E, B, G) we get altitude(F, B, G) == parallel_line(line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)), altitude(E, B, G))
By parallel_line_definition on line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), altitude(projection(A, Line(D, G)), D, E), g we get altitude(projection(A, Line(D, G)), D, E) == parallel_line(line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), g)
By parallel_line_definition on orthocenter(A, midpoint(B, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), A, D), Line(B, G) we get altitude(projection(A, Line(D, G)), A, D) == parallel_line(orthocenter(A, midpoint(B, G), projection(A, Line(D, G))), Line(B, G))
By parallel_line_definition on line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)), altitude(E, B, G), altitude(projection(A, Line(D, G)), B, G) we get altitude(E, B, G) == parallel_line(line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)), altitude(projection(A, Line(D, G)), B, G))
By parallel_line_definition on line_intersection(Line(D, F), altitude(projection(A, i), D, F)), altitude(projection(A, i), D, F), altitude(midpoint(B, G), D, F) we get altitude(projection(A, i), D, F) == parallel_line(line_intersection(Line(D, F), altitude(projection(A, i), D, F)), altitude(midpoint(B, G), D, F))
By parallel_line_definition on I, h, altitude(projection(A, i), B, G) we get h == parallel_line(I, altitude(projection(A, i), B, G))
By parallel_line_definition on line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D), altitude(F, A, D) we get altitude(projection(A, Line(D, G)), A, D) == parallel_line(line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(F, A, D))
By parallel_line_definition on projection(E, h), h, altitude(projection(A, Line(D, G)), B, G) we get h == parallel_line(projection(E, h), altitude(projection(A, Line(D, G)), B, G))
By parallel_line_definition on B, altitude(B, F, midpoint(B, G)), altitude(A, F, midpoint(B, G)) we get altitude(B, F, midpoint(B, G)) == parallel_line(B, altitude(A, F, midpoint(B, G)))
By parallel_line_definition on orthocenter(A, midpoint(B, G), projection(A, i)), altitude(projection(A, i), A, D), altitude(E, A, D) we get altitude(projection(A, i), A, D) == parallel_line(orthocenter(A, midpoint(B, G), projection(A, i)), altitude(E, A, D))
By parallel_line_definition on B, altitude(B, F, midpoint(B, G)), altitude(orthocenter(A, B, D), F, midpoint(B, G)) we get altitude(B, F, midpoint(B, G)) == parallel_line(B, altitude(orthocenter(A, B, D), F, midpoint(B, G)))
By parallel_line_definition on line_intersection(f, altitude(projection(A, i), A, B)), f, altitude(projection(A, i), D, F) we get f == parallel_line(line_intersection(f, altitude(projection(A, i), A, B)), altitude(projection(A, i), D, F))
By parallel_line_definition on orthocenter(E, G, projection(A, Line(D, G))), altitude(E, D, G), altitude(midpoint(B, G), D, G) we get altitude(E, D, G) == parallel_line(orthocenter(E, G, projection(A, Line(D, G))), altitude(midpoint(B, G), D, G))
By parallel_line_definition on D, altitude(D, E, midpoint(B, G)), altitude(A, E, midpoint(B, G)) we get altitude(D, E, midpoint(B, G)) == parallel_line(D, altitude(A, E, midpoint(B, G)))
By parallel_line_definition on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), g, altitude(projection(A, Line(D, G)), D, E) we get g == parallel_line(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), altitude(projection(A, Line(D, G)), D, E))
By parallel_line_definition on line_intersection(Line(B, G), altitude(projection(A, i), B, G)), Line(B, G), altitude(projection(A, Line(D, G)), A, D) we get Line(B, G) == parallel_line(line_intersection(Line(B, G), altitude(projection(A, i), B, G)), altitude(projection(A, Line(D, G)), A, D))
By parallel_line_definition on line_intersection(Line(B, G), altitude(E, B, G)), altitude(E, B, G), altitude(projection(A, Line(D, G)), B, G) we get altitude(E, B, G) == parallel_line(line_intersection(Line(B, G), altitude(E, B, G)), altitude(projection(A, Line(D, G)), B, G))
By parallel_line_definition on orthocenter(D, midpoint(B, G), projection(A, i)), altitude(projection(A, i), A, D), altitude(F, A, D) we get altitude(projection(A, i), A, D) == parallel_line(orthocenter(D, midpoint(B, G), projection(A, i)), altitude(F, A, D))
By parallel_line_definition on orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), altitude(orthocenter(A, D, G), E, midpoint(B, G)), altitude(D, E, midpoint(B, G)) we get altitude(orthocenter(A, D, G), E, midpoint(B, G)) == parallel_line(orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), altitude(D, E, midpoint(B, G)))
By parallel_line_definition on line_intersection(median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G))), altitude(orthocenter(A, B, D), F, midpoint(B, G)), altitude(D, F, midpoint(B, G)) we get altitude(orthocenter(A, B, D), F, midpoint(B, G)) == parallel_line(line_intersection(median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G))), altitude(D, F, midpoint(B, G)))
By parallel_line_definition on orthocenter(B, F, midpoint(B, G)), altitude(B, F, midpoint(B, G)), altitude(A, F, midpoint(B, G)) we get altitude(B, F, midpoint(B, G)) == parallel_line(orthocenter(B, F, midpoint(B, G)), altitude(A, F, midpoint(B, G)))
By parallel_line_definition on orthocenter(D, midpoint(B, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, i), A, D) we get altitude(projection(A, Line(D, G)), A, D) == parallel_line(orthocenter(D, midpoint(B, G), projection(A, Line(D, G))), altitude(projection(A, i), A, D))
By parallel_line_definition on line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(F, B, G), altitude(projection(A, i), B, G) we get altitude(F, B, G) == parallel_line(line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, i), B, G))
By parallel_line_definition on projection(A, i), altitude(projection(A, i), B, G), altitude(E, B, G) we get altitude(projection(A, i), B, G) == parallel_line(projection(A, i), altitude(E, B, G))
By parallel_line_definition on E, altitude(E, B, G), altitude(projection(A, i), B, G) we get altitude(E, B, G) == parallel_line(E, altitude(projection(A, i), B, G))
By parallel_line_definition on line_intersection(altitude(midpoint(B, G), D, E), altitude(projection(A, Line(D, G)), A, C)), altitude(midpoint(B, G), D, E), altitude(projection(A, Line(D, G)), D, E) we get altitude(midpoint(B, G), D, E) == parallel_line(line_intersection(altitude(midpoint(B, G), D, E), altitude(projection(A, Line(D, G)), A, C)), altitude(projection(A, Line(D, G)), D, E))
By parallel_line_definition on projection(A, i), altitude(projection(A, i), B, G), h we get altitude(projection(A, i), B, G) == parallel_line(projection(A, i), h)
By parallel_line_definition on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), h, altitude(projection(A, Line(D, G)), B, G) we get h == parallel_line(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), B, G))
By parallel_line_definition on orthocenter(D, midpoint(B, G), projection(A, Line(D, G))), altitude(midpoint(B, G), D, G), altitude(E, D, G) we get altitude(midpoint(B, G), D, G) == parallel_line(orthocenter(D, midpoint(B, G), projection(A, Line(D, G))), altitude(E, D, G))
By parallel_line_definition on line_intersection(altitude(midpoint(B, G), D, F), altitude(projection(A, i), A, B)), altitude(projection(A, i), A, B), Line(D, F) we get altitude(projection(A, i), A, B) == parallel_line(line_intersection(altitude(midpoint(B, G), D, F), altitude(projection(A, i), A, B)), Line(D, F))
By parallel_line_definition on orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), altitude(F, B, G), altitude(projection(A, i), B, G) we get altitude(F, B, G) == parallel_line(orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), altitude(projection(A, i), B, G))
By parallel_line_definition on orthocenter(A, E, projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), A, C), altitude(midpoint(B, G), A, C) we get altitude(projection(A, Line(D, G)), A, C) == parallel_line(orthocenter(A, E, projection(A, Line(D, G))), altitude(midpoint(B, G), A, C))
By parallel_line_definition on projection(A, Line(D, G)), altitude(projection(A, Line(D, G)), B, G), altitude(E, B, G) we get altitude(projection(A, Line(D, G)), B, G) == parallel_line(projection(A, Line(D, G)), altitude(E, B, G))
By parallel_line_definition on D, altitude(D, F, midpoint(B, G)), altitude(A, F, midpoint(B, G)) we get altitude(D, F, midpoint(B, G)) == parallel_line(D, altitude(A, F, midpoint(B, G)))
By parallel_line_definition on orthocenter(B, F, projection(A, i)), altitude(projection(A, i), A, B), Line(D, F) we get altitude(projection(A, i), A, B) == parallel_line(orthocenter(B, F, projection(A, i)), Line(D, F))
By parallel_line_definition on orthocenter(B, F, midpoint(B, G)), altitude(F, B, G), altitude(projection(A, Line(D, G)), B, G) we get altitude(F, B, G) == parallel_line(orthocenter(B, F, midpoint(B, G)), altitude(projection(A, Line(D, G)), B, G))
By parallel_line_definition on line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(F, B, G), h we get altitude(F, B, G) == parallel_line(line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)), h)
By parallel_line_definition on orthocenter(A, midpoint(B, G), projection(A, Line(D, G))), parallel_line(midpoint(B, G), Line(D, G)), parallel_line(E, Line(D, G)) we get parallel_line(midpoint(B, G), Line(D, G)) == parallel_line(orthocenter(A, midpoint(B, G), projection(A, Line(D, G))), parallel_line(E, Line(D, G)))
By parallel_line_definition on orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), altitude(orthocenter(A, B, D), F, midpoint(B, G)), altitude(D, F, midpoint(B, G)) we get altitude(orthocenter(A, B, D), F, midpoint(B, G)) == parallel_line(orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), altitude(D, F, midpoint(B, G)))
By parallel_line_definition on line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), altitude(F, B, G) we get altitude(projection(A, Line(D, G)), B, G) == parallel_line(line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), altitude(F, B, G))
By parallel_line_definition on A, altitude(A, E, midpoint(B, G)), altitude(D, E, midpoint(B, G)) we get altitude(A, E, midpoint(B, G)) == parallel_line(A, altitude(D, E, midpoint(B, G)))
By parallel_line_definition on orthocenter(D, E, midpoint(B, G)), altitude(midpoint(B, G), D, E), altitude(projection(A, Line(D, G)), D, E) we get altitude(midpoint(B, G), D, E) == parallel_line(orthocenter(D, E, midpoint(B, G)), altitude(projection(A, Line(D, G)), D, E))
By parallel_line_definition on G, g, altitude(projection(A, Line(D, G)), D, E) we get g == parallel_line(G, altitude(projection(A, Line(D, G)), D, E))
By parallel_line_definition on line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(E, B, G), altitude(F, B, G) we get altitude(E, B, G) == parallel_line(line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(F, B, G))
By parallel_line_definition on orthocenter(E, G, midpoint(B, G)), altitude(G, E, midpoint(B, G)), altitude(orthocenter(A, D, G), E, midpoint(B, G)) we get altitude(G, E, midpoint(B, G)) == parallel_line(orthocenter(E, G, midpoint(B, G)), altitude(orthocenter(A, D, G), E, midpoint(B, G)))
By parallel_line_definition on D, h, altitude(projection(A, Line(D, G)), B, G) we get h == parallel_line(D, altitude(projection(A, Line(D, G)), B, G))
By parallel_line_definition on B, f, altitude(projection(A, i), D, F) we get f == parallel_line(B, altitude(projection(A, i), D, F))
By parallel_line_definition on line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)), altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), A, D) we get altitude(projection(A, i), A, D) == parallel_line(line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)), altitude(projection(A, Line(D, G)), A, D))
By parallel_line_definition on line_intersection(Line(B, G), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), B, G) we get altitude(projection(A, i), B, G) == parallel_line(line_intersection(Line(B, G), altitude(projection(A, i), B, G)), altitude(projection(A, Line(D, G)), B, G))
By parallel_line_definition on line_intersection(Line(B, G), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G), altitude(F, B, G) we get altitude(projection(A, i), B, G) == parallel_line(line_intersection(Line(B, G), altitude(projection(A, i), B, G)), altitude(F, B, G))
By parallel_line_definition on line_intersection(altitude(E, B, G), altitude(F, A, D)), altitude(E, B, G), altitude(projection(A, i), B, G) we get altitude(E, B, G) == parallel_line(line_intersection(altitude(E, B, G), altitude(F, A, D)), altitude(projection(A, i), B, G))
By parallel_line_definition on F, altitude(F, B, G), altitude(projection(A, i), B, G) we get altitude(F, B, G) == parallel_line(F, altitude(projection(A, i), B, G))
By parallel_line_definition on line_intersection(median(F, B, G), altitude(B, F, midpoint(B, G))), altitude(B, F, midpoint(B, G)), altitude(A, F, midpoint(B, G)) we get altitude(B, F, midpoint(B, G)) == parallel_line(line_intersection(median(F, B, G), altitude(B, F, midpoint(B, G))), altitude(A, F, midpoint(B, G)))
By parallel_line_definition on line_intersection(Line(B, G), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G), altitude(E, B, G) we get altitude(projection(A, i), B, G) == parallel_line(line_intersection(Line(B, G), altitude(projection(A, i), B, G)), altitude(E, B, G))
By parallel_line_definition on orthocenter(B, F, midpoint(B, G)), altitude(B, F, midpoint(B, G)), altitude(orthocenter(A, B, D), F, midpoint(B, G)) we get altitude(B, F, midpoint(B, G)) == parallel_line(orthocenter(B, F, midpoint(B, G)), altitude(orthocenter(A, B, D), F, midpoint(B, G)))
By parallel_line_definition on line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), h we get altitude(projection(A, Line(D, G)), B, G) == parallel_line(line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), h)
By parallel_line_definition on line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), altitude(A, F, midpoint(B, G)), altitude(B, F, midpoint(B, G)) we get altitude(A, F, midpoint(B, G)) == parallel_line(line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), altitude(B, F, midpoint(B, G)))
By parallel_line_definition on line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, i), A, D) we get altitude(projection(A, Line(D, G)), A, D) == parallel_line(line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, i), A, D))
By parallel_line_definition on line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))), altitude(A, E, midpoint(B, G)), altitude(orthocenter(A, D, G), E, midpoint(B, G)) we get altitude(A, E, midpoint(B, G)) == parallel_line(line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))), altitude(orthocenter(A, D, G), E, midpoint(B, G)))
By parallel_line_definition on orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), altitude(F, B, G), altitude(projection(A, Line(D, G)), B, G) we get altitude(F, B, G) == parallel_line(orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), altitude(projection(A, Line(D, G)), B, G))
By parallel_line_definition on line_intersection(median(F, B, G), altitude(D, F, midpoint(B, G))), altitude(D, F, midpoint(B, G)), altitude(A, F, midpoint(B, G)) we get altitude(D, F, midpoint(B, G)) == parallel_line(line_intersection(median(F, B, G), altitude(D, F, midpoint(B, G))), altitude(A, F, midpoint(B, G)))
By parallel_line_definition on E, altitude(E, B, G), altitude(projection(A, Line(D, G)), B, G) we get altitude(E, B, G) == parallel_line(E, altitude(projection(A, Line(D, G)), B, G))
By parallel_line_definition on line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, i), A, D) we get altitude(projection(A, Line(D, G)), A, D) == parallel_line(line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, i), A, D))
By parallel_line_definition on line_intersection(Line(B, G), altitude(projection(A, i), B, G)), Line(B, G), altitude(F, A, D) we get Line(B, G) == parallel_line(line_intersection(Line(B, G), altitude(projection(A, i), B, G)), altitude(F, A, D))
By parallel_line_definition on orthocenter(A, midpoint(B, G), projection(A, i)), parallel_line(midpoint(B, G), i), i we get parallel_line(midpoint(B, G), i) == parallel_line(orthocenter(A, midpoint(B, G), projection(A, i)), i)
By parallel_line_definition on F, altitude(F, B, G), altitude(projection(A, Line(D, G)), B, G) we get altitude(F, B, G) == parallel_line(F, altitude(projection(A, Line(D, G)), B, G))
By different_points_v1 on E, projection(A, Line(D, G)) we get 0 != distance(E, projection(A, Line(D, G)))
By different_points_v1 on midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)) we get 0 != distance(midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)))
By different_points_v1 on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G) we get 0 != distance(midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)))
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E, midpoint(B, G), projection(midpoint(B, G), Line(D, G)) we get 180 == 2 * direction(line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E) - 2 * direction(midpoint(B, G), projection(midpoint(B, G), Line(D, G))) mod 360
By different_points_v1 on projection(A, i), F we get 0 != distance(F, projection(A, i))
By perpendicular_direction_conditions_v0_r on midpoint(B, G), G, line_intersection(Line(B, G), altitude(E, B, G)), E we get 180 == 2 * direction(midpoint(B, G), G) - 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) mod 360
By different_points_v1 on projection(A, Line(D, G)), midpoint(B, G) we get 0 != distance(midpoint(B, G), projection(A, Line(D, G)))
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), A, line_intersection(altitude(A, B, D), parallel_line(F, i)), F we get 180 == 2 * direction(orthocenter(A, B, D), A) - 2 * direction(line_intersection(altitude(A, B, D), parallel_line(F, i)), F) mod 360
By different_points_v1 on line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G) we get 0 != distance(midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))))
By in_imply_collinear on line_intersection(median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G))), midpoint(B, G), E we get collinear(E, midpoint(B, G), line_intersection(median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G))))
By different_points_v1 on line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), A we get 0 != distance(A, line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))))
By different_points_v1 on line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G))), E we get 0 != distance(E, line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G))))
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(E, B, G)), E, orthocenter(A, B, D), orthocenter(A, D, G) we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) - 2 * direction(orthocenter(A, B, D), orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, D, G), line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E we get 180 == 2 * direction(A, orthocenter(A, D, G)) - 2 * direction(line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E) mod 360
By different_points_v1 on midpoint(B, G), line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D))) we get 0 != distance(midpoint(B, G), line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D))))
By perpendicular_direction_conditions_v0_r on G, orthocenter(A, D, G), line_intersection(Line(B, G), altitude(F, B, G)), F we get 180 == 2 * direction(G, orthocenter(A, D, G)) - 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G), orthocenter(A, D, G), A we get 180 == 2 * direction(line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G)) - 2 * direction(orthocenter(A, D, G), A) mod 360
By different_points_v1 on line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))), F we get 0 != distance(F, line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))))
By different_points_v1 on line_intersection(Line(B, G), altitude(F, B, G)), F we get 0 != distance(F, line_intersection(Line(B, G), altitude(F, B, G)))
By different_points_v1 on A, line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))) we get 0 != distance(A, line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))))
By different_points_v1 on E, line_intersection(Line(B, G), altitude(E, B, G)) we get 0 != distance(E, line_intersection(Line(B, G), altitude(E, B, G)))
By perpendicular_direction_conditions_v0_r on E, D, midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)) we get 180 == 2 * direction(E, D) - 2 * direction(midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), projection(F, i), F we get 180 == 2 * direction(midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i))) - 2 * direction(projection(F, i), F) mod 360
By different_points_v1 on midpoint(B, G), projection(A, i) we get 0 != distance(midpoint(B, G), projection(A, i))
By different_points_v1 on F, line_intersection(altitude(A, B, D), parallel_line(F, i)) we get 0 != distance(F, line_intersection(altitude(A, B, D), parallel_line(F, i)))
By different_points_v1 on line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G) we get 0 != distance(midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)))
By orthocenter_concurrency on projection(A, i), midpoint(B, G), orthocenter(A, B, D) we get orthocenter(midpoint(B, G), projection(A, i), orthocenter(A, B, D)) in altitude(projection(A, i), midpoint(B, G), orthocenter(A, B, D)), orthocenter(midpoint(B, G), projection(A, i), orthocenter(A, B, D)) in altitude(midpoint(B, G), projection(A, i), orthocenter(A, B, D)), orthocenter(midpoint(B, G), projection(A, i), orthocenter(A, B, D)) in altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i))
By different_points_v1 on line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E we get 0 != distance(E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))))
By perpendicular_direction_conditions_v0_r on line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G), F, orthocenter(A, B, D) we get 180 == 2 * direction(line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G)) - 2 * direction(F, orthocenter(A, B, D)) mod 360
By different_points_v1 on midpoint(B, G), line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))) we get 0 != distance(midpoint(B, G), line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))))
By perpendicular_direction_conditions_v0_r on midpoint(B, G), B, line_intersection(Line(B, G), altitude(E, B, G)), E we get 180 == 2 * direction(midpoint(B, G), B) - 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), A, E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))) we get 180 == 2 * direction(projection(A, Line(D, G)), A) - 2 * direction(E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G)))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), G, F, line_intersection(Line(B, G), altitude(F, B, G)) we get 180 == 2 * direction(orthocenter(A, B, D), G) - 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), G, E, line_intersection(Line(B, G), altitude(E, B, G)) we get 180 == 2 * direction(midpoint(B, G), G) - 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on projection(midpoint(B, G), Line(D, G)), midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E we get 180 == 2 * direction(projection(midpoint(B, G), Line(D, G)), midpoint(B, G)) - 2 * direction(line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E) mod 360
By orthocenter_concurrency on F, projection(A, i), orthocenter(A, B, D) we get orthocenter(F, projection(A, i), orthocenter(A, B, D)) in altitude(F, projection(A, i), orthocenter(A, B, D)), orthocenter(F, projection(A, i), orthocenter(A, B, D)) in altitude(projection(A, i), F, orthocenter(A, B, D)), orthocenter(F, projection(A, i), orthocenter(A, B, D)) in altitude(orthocenter(A, B, D), F, projection(A, i))
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), orthocenter(A, D, G), midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))) we get 180 == 2 * direction(projection(A, Line(D, G)), orthocenter(A, D, G)) - 2 * direction(midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G)))) mod 360
By perpendicular_direction_conditions_v0_r on A, projection(A, Line(D, G)), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G) we get 180 == 2 * direction(A, projection(A, Line(D, G))) - 2 * direction(line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(E, B, G)), E, midpoint(B, G), B we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) - 2 * direction(midpoint(B, G), B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G), projection(A, i), orthocenter(A, B, D) we get 180 == 2 * direction(line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G)) - 2 * direction(projection(A, i), orthocenter(A, B, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), B, E, line_intersection(Line(B, G), altitude(E, B, G)) we get 180 == 2 * direction(midpoint(B, G), B) - 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) mod 360
By in_imply_collinear on orthocenter(D, E, midpoint(B, G)), midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)) we get collinear(midpoint(B, G), orthocenter(D, E, midpoint(B, G)), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)))
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, B, D), parallel_line(F, i)), F, F, projection(F, i) we get 180 == 2 * direction(line_intersection(altitude(A, B, D), parallel_line(F, i)), F) - 2 * direction(F, projection(F, i)) mod 360
By perpendicular_direction_conditions_v0_r on E, projection(E, h), line_intersection(Line(B, G), altitude(E, B, G)), E we get 180 == 2 * direction(E, projection(E, h)) - 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), orthocenter(A, D, G), line_intersection(Line(B, G), altitude(F, B, G)), F we get 180 == 2 * direction(orthocenter(A, B, D), orthocenter(A, D, G)) - 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on projection(E, Line(D, G)), E, line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G) we get 180 == 2 * direction(projection(E, Line(D, G)), E) - 2 * direction(line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G)) mod 360
By orthocenter_concurrency on midpoint(B, G), projection(A, Line(D, G)), G we get orthocenter(G, midpoint(B, G), projection(A, Line(D, G))) in altitude(midpoint(B, G), G, projection(A, Line(D, G))), orthocenter(G, midpoint(B, G), projection(A, Line(D, G))) in altitude(projection(A, Line(D, G)), G, midpoint(B, G)), orthocenter(G, midpoint(B, G), projection(A, Line(D, G))) in altitude(G, midpoint(B, G), projection(A, Line(D, G)))
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), E, D we get 180 == 2 * direction(midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E))) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), projection(midpoint(B, G), g), midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)) we get 180 == 2 * direction(midpoint(B, G), projection(midpoint(B, G), g)) - 2 * direction(midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, B, D), parallel_line(F, i)), F, orthocenter(A, B, D), projection(A, i) we get 180 == 2 * direction(line_intersection(altitude(A, B, D), parallel_line(F, i)), F) - 2 * direction(orthocenter(A, B, D), projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(E, B, G)), E, midpoint(B, G), G we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) - 2 * direction(midpoint(B, G), G) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), A, midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)) we get 180 == 2 * direction(projection(A, i), A) - 2 * direction(midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i))) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), orthocenter(A, D, G), line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E we get 180 == 2 * direction(projection(A, Line(D, G)), orthocenter(A, D, G)) - 2 * direction(line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), A, orthocenter(A, B, D) we get 180 == 2 * direction(midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i))) - 2 * direction(A, orthocenter(A, B, D)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(F, B, G)), F, E, projection(E, h) we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) - 2 * direction(E, projection(E, h)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), orthocenter(A, D, G), projection(A, Line(D, G)) we get 180 == 2 * direction(midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G)))) - 2 * direction(orthocenter(A, D, G), projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), G, line_intersection(Line(B, G), altitude(F, B, G)), F we get 180 == 2 * direction(midpoint(B, G), G) - 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(E, B, G)), E, B, G we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) - 2 * direction(B, G) mod 360
By orthocenter_concurrency on projection(A, Line(D, G)), midpoint(B, G), orthocenter(A, D, G) we get orthocenter(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G))) in altitude(projection(A, Line(D, G)), midpoint(B, G), orthocenter(A, D, G)), orthocenter(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G))) in altitude(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G))), orthocenter(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G))) in altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G)))
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), projection(A, i), line_intersection(altitude(A, B, D), parallel_line(F, i)), F we get 180 == 2 * direction(orthocenter(A, B, D), projection(A, i)) - 2 * direction(line_intersection(altitude(A, B, D), parallel_line(F, i)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(F, B, G)), F, G, orthocenter(A, B, D) we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) - 2 * direction(G, orthocenter(A, B, D)) mod 360
By perpendicular_direction_conditions_v0_r on projection(F, i), F, line_intersection(altitude(A, B, D), parallel_line(F, i)), F we get 180 == 2 * direction(projection(F, i), F) - 2 * direction(line_intersection(altitude(A, B, D), parallel_line(F, i)), F) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), G, line_intersection(Line(B, G), altitude(F, B, G)), F we get 180 == 2 * direction(orthocenter(A, D, G), G) - 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), B, line_intersection(Line(B, G), altitude(F, B, G)), F we get 180 == 2 * direction(midpoint(B, G), B) - 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), orthocenter(A, D, G), E we get 180 == 2 * direction(midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E))) - 2 * direction(orthocenter(A, D, G), E) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), A, line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G) we get 180 == 2 * direction(projection(A, Line(D, G)), A) - 2 * direction(line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), G, line_intersection(Line(B, G), altitude(F, B, G)), F we get 180 == 2 * direction(orthocenter(A, B, D), G) - 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on G, B, F, line_intersection(Line(B, G), altitude(F, B, G)) we get 180 == 2 * direction(G, B) - 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on projection(E, Line(D, G)), E, E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))) we get 180 == 2 * direction(projection(E, Line(D, G)), E) - 2 * direction(E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G)))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(B, G), altitude(F, B, G)), orthocenter(A, B, D), B we get 180 == 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) - 2 * direction(orthocenter(A, B, D), B) mod 360
By perpendicular_direction_conditions_v0_r on B, orthocenter(A, D, G), line_intersection(Line(B, G), altitude(F, B, G)), F we get 180 == 2 * direction(B, orthocenter(A, D, G)) - 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(B, G), altitude(F, B, G)), midpoint(B, G), B we get 180 == 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) - 2 * direction(midpoint(B, G), B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(F, B, G)), F, projection(E, h), E we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) - 2 * direction(projection(E, h), E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), orthocenter(A, D, G), F, line_intersection(Line(B, G), altitude(F, B, G)) we get 180 == 2 * direction(orthocenter(A, B, D), orthocenter(A, D, G)) - 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(B, G), altitude(E, B, G)), midpoint(B, G), orthocenter(A, D, G) we get 180 == 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) - 2 * direction(midpoint(B, G), orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(F, B, G)), F, orthocenter(A, B, D), midpoint(B, G) we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) - 2 * direction(orthocenter(A, B, D), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G), projection(midpoint(B, G), f), midpoint(B, G) we get 180 == 2 * direction(line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G)) - 2 * direction(projection(midpoint(B, G), f), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on projection(F, i), F, F, line_intersection(altitude(A, B, D), parallel_line(F, i)) we get 180 == 2 * direction(projection(F, i), F) - 2 * direction(F, line_intersection(altitude(A, B, D), parallel_line(F, i))) mod 360
By perpendicular_direction_conditions_v0_r on E, projection(E, Line(D, G)), midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))) we get 180 == 2 * direction(E, projection(E, Line(D, G))) - 2 * direction(midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G)))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(B, G), altitude(E, B, G)), B, orthocenter(A, B, D) we get 180 == 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) - 2 * direction(B, orthocenter(A, B, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), projection(A, i), orthocenter(A, B, D) we get 180 == 2 * direction(midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i))) - 2 * direction(projection(A, i), orthocenter(A, B, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), midpoint(B, G), F, line_intersection(Line(B, G), altitude(F, B, G)) we get 180 == 2 * direction(orthocenter(A, D, G), midpoint(B, G)) - 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), projection(A, i), F, line_intersection(altitude(A, B, D), parallel_line(F, i)) we get 180 == 2 * direction(orthocenter(A, B, D), projection(A, i)) - 2 * direction(F, line_intersection(altitude(A, B, D), parallel_line(F, i))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(F, B, G)), F, midpoint(B, G), orthocenter(A, D, G) we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) - 2 * direction(midpoint(B, G), orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), D, orthocenter(A, D, G) we get 180 == 2 * direction(midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E))) - 2 * direction(D, orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(F, B, G)), F, orthocenter(A, B, D), orthocenter(A, D, G) we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) - 2 * direction(orthocenter(A, B, D), orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on projection(F, i), F, midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)) we get 180 == 2 * direction(projection(F, i), F) - 2 * direction(midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G), projection(midpoint(B, G), g) we get 180 == 2 * direction(midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E))) - 2 * direction(midpoint(B, G), projection(midpoint(B, G), g)) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(altitude(A, B, D), parallel_line(F, i)), projection(A, i), A we get 180 == 2 * direction(F, line_intersection(altitude(A, B, D), parallel_line(F, i))) - 2 * direction(projection(A, i), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(E, B, G)), E, G, B we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) - 2 * direction(G, B) mod 360
By sas_anti_similarity on H, A, C, G, A, B we get anti_similar_triangles(A, B, G, A, C, H)
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), projection(E, Line(D, G)), E we get 180 == 2 * direction(midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G)))) - 2 * direction(projection(E, Line(D, G)), E) mod 360
By orthocenter_concurrency on E, projection(A, Line(D, G)), orthocenter(A, D, G) we get orthocenter(E, orthocenter(A, D, G), projection(A, Line(D, G))) in altitude(E, orthocenter(A, D, G), projection(A, Line(D, G))), orthocenter(E, orthocenter(A, D, G), projection(A, Line(D, G))) in altitude(projection(A, Line(D, G)), E, orthocenter(A, D, G)), orthocenter(E, orthocenter(A, D, G), projection(A, Line(D, G))) in altitude(orthocenter(A, D, G), E, projection(A, Line(D, G)))
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, B, D), parallel_line(F, i)), F, A, orthocenter(A, B, D) we get 180 == 2 * direction(line_intersection(altitude(A, B, D), parallel_line(F, i)), F) - 2 * direction(A, orthocenter(A, B, D)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G), midpoint(B, G), projection(midpoint(B, G), i) we get 180 == 2 * direction(line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G)) - 2 * direction(midpoint(B, G), projection(midpoint(B, G), i)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), B, E, line_intersection(Line(B, G), altitude(E, B, G)) we get 180 == 2 * direction(orthocenter(A, D, G), B) - 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), orthocenter(A, B, D), A we get 180 == 2 * direction(midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i))) - 2 * direction(orthocenter(A, B, D), A) mod 360
By in_imply_collinear on orthocenter(A, F, midpoint(B, G)), line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), A we get collinear(A, orthocenter(A, F, midpoint(B, G)), line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))))
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(F, B, G)), F, B, orthocenter(A, D, G) we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) - 2 * direction(B, orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), orthocenter(A, B, D), F we get 180 == 2 * direction(midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F))) - 2 * direction(orthocenter(A, B, D), F) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(B, G), altitude(F, B, G)), midpoint(B, G), orthocenter(A, D, G) we get 180 == 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) - 2 * direction(midpoint(B, G), orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(B, G), altitude(E, B, G)), B, G we get 180 == 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), midpoint(B, G), F, line_intersection(Line(B, G), altitude(F, B, G)) we get 180 == 2 * direction(orthocenter(A, B, D), midpoint(B, G)) - 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), G, line_intersection(Line(B, G), altitude(E, B, G)), E we get 180 == 2 * direction(orthocenter(A, D, G), G) - 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, D, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G) we get 180 == 2 * direction(A, orthocenter(A, D, G)) - 2 * direction(line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), projection(midpoint(B, G), Line(D, G)), midpoint(B, G) we get 180 == 2 * direction(E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G)))) - 2 * direction(projection(midpoint(B, G), Line(D, G)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on projection(F, i), F, line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G) we get 180 == 2 * direction(projection(F, i), F) - 2 * direction(line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), orthocenter(A, B, D), D we get 180 == 2 * direction(midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F))) - 2 * direction(orthocenter(A, B, D), D) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), midpoint(B, G), line_intersection(Line(B, G), altitude(F, B, G)), F we get 180 == 2 * direction(orthocenter(A, D, G), midpoint(B, G)) - 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(F, B, G)), F, orthocenter(A, D, G), B we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) - 2 * direction(orthocenter(A, D, G), B) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), orthocenter(A, B, D), F, line_intersection(Line(B, G), altitude(F, B, G)) we get 180 == 2 * direction(orthocenter(A, D, G), orthocenter(A, B, D)) - 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), orthocenter(A, D, G), line_intersection(Line(B, G), altitude(E, B, G)), E we get 180 == 2 * direction(midpoint(B, G), orthocenter(A, D, G)) - 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(B, G), altitude(F, B, G)), B, orthocenter(A, D, G) we get 180 == 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) - 2 * direction(B, orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), projection(A, i), midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)) we get 180 == 2 * direction(orthocenter(A, B, D), projection(A, i)) - 2 * direction(midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(F, B, G)), F, orthocenter(A, D, G), G we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) - 2 * direction(orthocenter(A, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), projection(A, Line(D, G)), A we get 180 == 2 * direction(E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G)))) - 2 * direction(projection(A, Line(D, G)), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), D, F we get 180 == 2 * direction(midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F))) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(E, B, G)), E, orthocenter(A, B, D), G we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) - 2 * direction(orthocenter(A, B, D), G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G), projection(midpoint(B, G), i) we get 180 == 2 * direction(midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i))) - 2 * direction(midpoint(B, G), projection(midpoint(B, G), i)) mod 360
By perpendicular_direction_conditions_v0_r on D, E, midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)) we get 180 == 2 * direction(D, E) - 2 * direction(midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E))) mod 360
By perpendicular_direction_conditions_v0_r on E, projection(E, h), E, line_intersection(Line(B, G), altitude(E, B, G)) we get 180 == 2 * direction(E, projection(E, h)) - 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), A, midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))) we get 180 == 2 * direction(projection(A, Line(D, G)), A) - 2 * direction(midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G)))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(B, G), altitude(E, B, G)), orthocenter(A, B, D), G we get 180 == 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) - 2 * direction(orthocenter(A, B, D), G) mod 360
By perpendicular_direction_conditions_v0_r on projection(E, Line(D, G)), E, midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))) we get 180 == 2 * direction(projection(E, Line(D, G)), E) - 2 * direction(midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G)))) mod 360
By perpendicular_direction_conditions_v0_r on projection(midpoint(B, G), f), midpoint(B, G), midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)) we get 180 == 2 * direction(projection(midpoint(B, G), f), midpoint(B, G)) - 2 * direction(midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), orthocenter(A, B, D), line_intersection(Line(B, G), altitude(F, B, G)), F we get 180 == 2 * direction(orthocenter(A, D, G), orthocenter(A, B, D)) - 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) mod 360
By in_imply_collinear on line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), midpoint(B, G), orthocenter(A, B, D) we get collinear(midpoint(B, G), orthocenter(A, B, D), line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)))
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(B, G), altitude(E, B, G)), orthocenter(A, B, D), orthocenter(A, D, G) we get 180 == 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) - 2 * direction(orthocenter(A, B, D), orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(B, G), altitude(E, B, G)), B, midpoint(B, G) we get 180 == 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) - 2 * direction(B, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(B, G), altitude(F, B, G)), B, G we get 180 == 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G), projection(A, i), A we get 180 == 2 * direction(line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G)) - 2 * direction(projection(A, i), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, B, D), parallel_line(F, i)), F, A, projection(A, i) we get 180 == 2 * direction(line_intersection(altitude(A, B, D), parallel_line(F, i)), F) - 2 * direction(A, projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), orthocenter(A, D, G), A we get 180 == 2 * direction(E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G)))) - 2 * direction(orthocenter(A, D, G), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), projection(midpoint(B, G), Line(D, G)), midpoint(B, G) we get 180 == 2 * direction(midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G)))) - 2 * direction(projection(midpoint(B, G), Line(D, G)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(A, D, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G) we get 180 == 2 * direction(D, orthocenter(A, D, G)) - 2 * direction(line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(E, B, G)), E, orthocenter(A, D, G), G we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) - 2 * direction(orthocenter(A, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on F, projection(F, i), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G) we get 180 == 2 * direction(F, projection(F, i)) - 2 * direction(line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(A, D, G), line_intersection(Line(B, G), altitude(E, B, G)), E we get 180 == 2 * direction(G, orthocenter(A, D, G)) - 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(A, D, G), F, line_intersection(Line(B, G), altitude(F, B, G)) we get 180 == 2 * direction(G, orthocenter(A, D, G)) - 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on F, orthocenter(A, B, D), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G) we get 180 == 2 * direction(F, orthocenter(A, B, D)) - 2 * direction(line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, B, D), line_intersection(altitude(A, B, D), parallel_line(F, i)), F we get 180 == 2 * direction(A, orthocenter(A, B, D)) - 2 * direction(line_intersection(altitude(A, B, D), parallel_line(F, i)), F) mod 360
By perpendicular_direction_conditions_v0_r on A, projection(A, i), F, line_intersection(altitude(A, B, D), parallel_line(F, i)) we get 180 == 2 * direction(A, projection(A, i)) - 2 * direction(F, line_intersection(altitude(A, B, D), parallel_line(F, i))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), F, projection(F, i) we get 180 == 2 * direction(midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i))) - 2 * direction(F, projection(F, i)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(E, B, G)), E, orthocenter(A, D, G), midpoint(B, G) we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) - 2 * direction(orthocenter(A, D, G), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), projection(midpoint(B, G), g), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G) we get 180 == 2 * direction(midpoint(B, G), projection(midpoint(B, G), g)) - 2 * direction(line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), B, F, line_intersection(Line(B, G), altitude(F, B, G)) we get 180 == 2 * direction(midpoint(B, G), B) - 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E, projection(A, Line(D, G)), orthocenter(A, D, G) we get 180 == 2 * direction(line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E) - 2 * direction(projection(A, Line(D, G)), orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), B, F, line_intersection(Line(B, G), altitude(F, B, G)) we get 180 == 2 * direction(orthocenter(A, B, D), B) - 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on A, projection(A, Line(D, G)), midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))) we get 180 == 2 * direction(A, projection(A, Line(D, G))) - 2 * direction(midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G)))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, B, D), parallel_line(F, i)), F, midpoint(B, G), projection(midpoint(B, G), i) we get 180 == 2 * direction(line_intersection(altitude(A, B, D), parallel_line(F, i)), F) - 2 * direction(midpoint(B, G), projection(midpoint(B, G), i)) mod 360
By perpendicular_direction_conditions_v0_r on B, orthocenter(A, B, D), E, line_intersection(Line(B, G), altitude(E, B, G)) we get 180 == 2 * direction(B, orthocenter(A, B, D)) - 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(B, G), altitude(E, B, G)), midpoint(B, G), G we get 180 == 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) - 2 * direction(midpoint(B, G), G) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(B, G), altitude(E, B, G)), orthocenter(A, D, G), G we get 180 == 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) - 2 * direction(orthocenter(A, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(B, G), line_intersection(Line(B, G), altitude(F, B, G)), F we get 180 == 2 * direction(B, midpoint(B, G)) - 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on F, D, line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G) we get 180 == 2 * direction(F, D) - 2 * direction(line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G)) mod 360
By in_imply_collinear on orthocenter(B, F, midpoint(B, G)), line_intersection(Line(B, G), altitude(F, B, G)), F we get collinear(F, orthocenter(B, F, midpoint(B, G)), line_intersection(Line(B, G), altitude(F, B, G)))
By perpendicular_direction_conditions_v0_r on G, B, line_intersection(Line(B, G), altitude(F, B, G)), F we get 180 == 2 * direction(G, B) - 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), orthocenter(A, B, D), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G) we get 180 == 2 * direction(projection(A, i), orthocenter(A, B, D)) - 2 * direction(line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(F, B, G)), F, orthocenter(A, D, G), orthocenter(A, B, D) we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) - 2 * direction(orthocenter(A, D, G), orthocenter(A, B, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), D, line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G) we get 180 == 2 * direction(orthocenter(A, D, G), D) - 2 * direction(line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), D, line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G) we get 180 == 2 * direction(orthocenter(A, B, D), D) - 2 * direction(line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(A, B, D), F, line_intersection(Line(B, G), altitude(F, B, G)) we get 180 == 2 * direction(G, orthocenter(A, B, D)) - 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) mod 360
By in_imply_collinear on orthocenter(A, F, projection(A, i)), line_intersection(altitude(A, B, D), parallel_line(F, i)), F we get collinear(F, orthocenter(A, F, projection(A, i)), line_intersection(altitude(A, B, D), parallel_line(F, i)))
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G), midpoint(B, G), projection(midpoint(B, G), Line(D, G)) we get 180 == 2 * direction(line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G)) - 2 * direction(midpoint(B, G), projection(midpoint(B, G), Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(B, G), altitude(E, B, G)), G, B we get 180 == 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(altitude(A, B, D), parallel_line(F, i)), projection(midpoint(B, G), i), midpoint(B, G) we get 180 == 2 * direction(F, line_intersection(altitude(A, B, D), parallel_line(F, i))) - 2 * direction(projection(midpoint(B, G), i), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), projection(midpoint(B, G), Line(D, G)), midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))) we get 180 == 2 * direction(midpoint(B, G), projection(midpoint(B, G), Line(D, G))) - 2 * direction(midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G)))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(B, G), altitude(F, B, G)), G, B we get 180 == 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), orthocenter(A, D, G), projection(A, Line(D, G)) we get 180 == 2 * direction(E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G)))) - 2 * direction(orthocenter(A, D, G), projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), projection(A, Line(D, G)), midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))) we get 180 == 2 * direction(orthocenter(A, D, G), projection(A, Line(D, G))) - 2 * direction(midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G)))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), G, F, line_intersection(Line(B, G), altitude(F, B, G)) we get 180 == 2 * direction(midpoint(B, G), G) - 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on E, orthocenter(A, D, G), midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)) we get 180 == 2 * direction(E, orthocenter(A, D, G)) - 2 * direction(midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E))) mod 360
By perpendicular_direction_conditions_v0_r on B, orthocenter(A, D, G), line_intersection(Line(B, G), altitude(E, B, G)), E we get 180 == 2 * direction(B, orthocenter(A, D, G)) - 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G), A, projection(A, Line(D, G)) we get 180 == 2 * direction(line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G)) - 2 * direction(A, projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), projection(A, i), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G) we get 180 == 2 * direction(orthocenter(A, B, D), projection(A, i)) - 2 * direction(line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(B, G), line_intersection(Line(B, G), altitude(E, B, G)), E we get 180 == 2 * direction(G, midpoint(B, G)) - 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), projection(midpoint(B, G), i), midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)) we get 180 == 2 * direction(midpoint(B, G), projection(midpoint(B, G), i)) - 2 * direction(midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(B, G), altitude(F, B, G)), G, orthocenter(A, D, G) we get 180 == 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) - 2 * direction(G, orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on B, G, line_intersection(Line(B, G), altitude(E, B, G)), E we get 180 == 2 * direction(B, G) - 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), A, E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))) we get 180 == 2 * direction(orthocenter(A, D, G), A) - 2 * direction(E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G)))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(B, G), altitude(F, B, G)), orthocenter(A, D, G), G we get 180 == 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) - 2 * direction(orthocenter(A, D, G), G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E, projection(A, Line(D, G)), A we get 180 == 2 * direction(line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E) - 2 * direction(projection(A, Line(D, G)), A) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, B, D), F, line_intersection(altitude(A, B, D), parallel_line(F, i)) we get 180 == 2 * direction(A, orthocenter(A, B, D)) - 2 * direction(F, line_intersection(altitude(A, B, D), parallel_line(F, i))) mod 360
By perpendicular_direction_conditions_v0_r on projection(F, h), F, line_intersection(Line(B, G), altitude(E, B, G)), E we get 180 == 2 * direction(projection(F, h), F) - 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), projection(midpoint(B, G), Line(D, G)), line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E we get 180 == 2 * direction(midpoint(B, G), projection(midpoint(B, G), Line(D, G))) - 2 * direction(line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E, A, projection(A, Line(D, G)) we get 180 == 2 * direction(line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E) - 2 * direction(A, projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), D, orthocenter(A, B, D) we get 180 == 2 * direction(midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F))) - 2 * direction(D, orthocenter(A, B, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(A, D, G), midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)) we get 180 == 2 * direction(D, orthocenter(A, D, G)) - 2 * direction(midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), midpoint(B, G), line_intersection(Line(B, G), altitude(E, B, G)), E we get 180 == 2 * direction(orthocenter(A, D, G), midpoint(B, G)) - 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(F, B, G)), F, orthocenter(A, B, D), B we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) - 2 * direction(orthocenter(A, B, D), B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G), orthocenter(A, B, D), projection(A, i) we get 180 == 2 * direction(line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G)) - 2 * direction(orthocenter(A, B, D), projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(F, B, G)), F, projection(F, h), F we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) - 2 * direction(projection(F, h), F) mod 360
By perpendicular_direction_conditions_v0_r on projection(F, h), F, line_intersection(Line(B, G), altitude(F, B, G)), F we get 180 == 2 * direction(projection(F, h), F) - 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), A, F, line_intersection(altitude(A, B, D), parallel_line(F, i)) we get 180 == 2 * direction(orthocenter(A, B, D), A) - 2 * direction(F, line_intersection(altitude(A, B, D), parallel_line(F, i))) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(A, B, D), line_intersection(Line(B, G), altitude(F, B, G)), F we get 180 == 2 * direction(G, orthocenter(A, B, D)) - 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(F, B, G)), F, midpoint(B, G), orthocenter(A, B, D) we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) - 2 * direction(midpoint(B, G), orthocenter(A, B, D)) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(A, B, D), E, line_intersection(Line(B, G), altitude(E, B, G)) we get 180 == 2 * direction(G, orthocenter(A, B, D)) - 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on A, projection(A, i), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G) we get 180 == 2 * direction(A, projection(A, i)) - 2 * direction(line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), orthocenter(A, D, G), line_intersection(Line(B, G), altitude(E, B, G)), E we get 180 == 2 * direction(orthocenter(A, B, D), orthocenter(A, D, G)) - 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G), orthocenter(A, B, D), A we get 180 == 2 * direction(line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G)) - 2 * direction(orthocenter(A, B, D), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), F, D we get 180 == 2 * direction(midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F))) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(F, B, G)), F, G, orthocenter(A, D, G) we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) - 2 * direction(G, orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, B, D), parallel_line(F, i)), F, projection(midpoint(B, G), i), midpoint(B, G) we get 180 == 2 * direction(line_intersection(altitude(A, B, D), parallel_line(F, i)), F) - 2 * direction(projection(midpoint(B, G), i), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on B, G, E, line_intersection(Line(B, G), altitude(E, B, G)) we get 180 == 2 * direction(B, G) - 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G), A, orthocenter(A, B, D) we get 180 == 2 * direction(line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G)) - 2 * direction(A, orthocenter(A, B, D)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G), projection(midpoint(B, G), i), midpoint(B, G) we get 180 == 2 * direction(line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G)) - 2 * direction(projection(midpoint(B, G), i), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), projection(A, Line(D, G)), orthocenter(A, D, G) we get 180 == 2 * direction(E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G)))) - 2 * direction(projection(A, Line(D, G)), orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), G, F, line_intersection(Line(B, G), altitude(F, B, G)) we get 180 == 2 * direction(orthocenter(A, D, G), G) - 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), E, line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G) we get 180 == 2 * direction(orthocenter(A, D, G), E) - 2 * direction(line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(B, G), line_intersection(Line(B, G), altitude(E, B, G)), E we get 180 == 2 * direction(B, midpoint(B, G)) - 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), A, line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G) we get 180 == 2 * direction(orthocenter(A, D, G), A) - 2 * direction(line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G), E, orthocenter(A, D, G) we get 180 == 2 * direction(line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G)) - 2 * direction(E, orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), B, line_intersection(Line(B, G), altitude(F, B, G)), F we get 180 == 2 * direction(orthocenter(A, D, G), B) - 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(B, G), altitude(E, B, G)), projection(F, h), F we get 180 == 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) - 2 * direction(projection(F, h), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), orthocenter(A, D, G), D we get 180 == 2 * direction(midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E))) - 2 * direction(orthocenter(A, D, G), D) mod 360
By perpendicular_direction_conditions_v0_r on E, projection(E, Line(D, G)), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G) we get 180 == 2 * direction(E, projection(E, Line(D, G))) - 2 * direction(line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, B, D), parallel_line(F, i)), F, orthocenter(A, B, D), A we get 180 == 2 * direction(line_intersection(altitude(A, B, D), parallel_line(F, i)), F) - 2 * direction(orthocenter(A, B, D), A) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(B, G), altitude(E, B, G)), E, projection(E, h) we get 180 == 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) - 2 * direction(E, projection(E, h)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G), midpoint(B, G), projection(midpoint(B, G), g) we get 180 == 2 * direction(line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G)) - 2 * direction(midpoint(B, G), projection(midpoint(B, G), g)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G), orthocenter(A, B, D), F we get 180 == 2 * direction(line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G)) - 2 * direction(orthocenter(A, B, D), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(E, B, G)), E, midpoint(B, G), orthocenter(A, B, D) we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) - 2 * direction(midpoint(B, G), orthocenter(A, B, D)) mod 360
By perpendicular_direction_conditions_v0_r on F, projection(F, i), midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)) we get 180 == 2 * direction(F, projection(F, i)) - 2 * direction(midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i))) mod 360
By orthocenter_concurrency on projection(A, i), F, D we get orthocenter(D, F, projection(A, i)) in altitude(projection(A, i), D, F), orthocenter(D, F, projection(A, i)) in altitude(F, D, projection(A, i)), orthocenter(D, F, projection(A, i)) in altitude(D, F, projection(A, i))
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), E, midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)) we get 180 == 2 * direction(orthocenter(A, D, G), E) - 2 * direction(midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(F, B, G)), F, G, midpoint(B, G) we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) - 2 * direction(G, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), projection(E, Line(D, G)), E we get 180 == 2 * direction(E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G)))) - 2 * direction(projection(E, Line(D, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), orthocenter(A, B, D), line_intersection(altitude(A, B, D), parallel_line(F, i)), F we get 180 == 2 * direction(projection(A, i), orthocenter(A, B, D)) - 2 * direction(line_intersection(altitude(A, B, D), parallel_line(F, i)), F) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), projection(A, Line(D, G)), E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))) we get 180 == 2 * direction(orthocenter(A, D, G), projection(A, Line(D, G))) - 2 * direction(E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G)))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), projection(midpoint(B, G), i), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G) we get 180 == 2 * direction(midpoint(B, G), projection(midpoint(B, G), i)) - 2 * direction(line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), A, orthocenter(A, D, G) we get 180 == 2 * direction(midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G)))) - 2 * direction(A, orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(B, G), altitude(F, B, G)), E, projection(E, h) we get 180 == 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) - 2 * direction(E, projection(E, h)) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), A, line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G) we get 180 == 2 * direction(projection(A, i), A) - 2 * direction(line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), E, projection(E, Line(D, G)) we get 180 == 2 * direction(midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G)))) - 2 * direction(E, projection(E, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), projection(midpoint(B, G), Line(D, G)), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G) we get 180 == 2 * direction(midpoint(B, G), projection(midpoint(B, G), Line(D, G))) - 2 * direction(line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), B, E, line_intersection(Line(B, G), altitude(E, B, G)) we get 180 == 2 * direction(orthocenter(A, B, D), B) - 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), orthocenter(A, D, G), E, line_intersection(Line(B, G), altitude(E, B, G)) we get 180 == 2 * direction(orthocenter(A, B, D), orthocenter(A, D, G)) - 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(E, B, G)), E, orthocenter(A, B, D), midpoint(B, G) we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) - 2 * direction(orthocenter(A, B, D), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on projection(midpoint(B, G), Line(D, G)), midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G) we get 180 == 2 * direction(projection(midpoint(B, G), Line(D, G)), midpoint(B, G)) - 2 * direction(line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(E, B, G)), E, orthocenter(A, B, D), B we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) - 2 * direction(orthocenter(A, B, D), B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(E, B, G)), E, projection(E, h), E we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) - 2 * direction(projection(E, h), E) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), orthocenter(A, B, D), midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)) we get 180 == 2 * direction(projection(A, i), orthocenter(A, B, D)) - 2 * direction(midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E, projection(midpoint(B, G), Line(D, G)), midpoint(B, G) we get 180 == 2 * direction(line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E) - 2 * direction(projection(midpoint(B, G), Line(D, G)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on B, orthocenter(A, B, D), line_intersection(Line(B, G), altitude(F, B, G)), F we get 180 == 2 * direction(B, orthocenter(A, B, D)) - 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), B, line_intersection(Line(B, G), altitude(F, B, G)), F we get 180 == 2 * direction(orthocenter(A, B, D), B) - 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on projection(midpoint(B, G), i), midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(F, i)), F we get 180 == 2 * direction(projection(midpoint(B, G), i), midpoint(B, G)) - 2 * direction(line_intersection(altitude(A, B, D), parallel_line(F, i)), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), orthocenter(A, B, D), F, line_intersection(Line(B, G), altitude(F, B, G)) we get 180 == 2 * direction(midpoint(B, G), orthocenter(A, B, D)) - 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(B, G), altitude(F, B, G)), G, midpoint(B, G) we get 180 == 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) - 2 * direction(G, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), projection(midpoint(B, G), f), midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)) we get 180 == 2 * direction(midpoint(B, G), projection(midpoint(B, G), f)) - 2 * direction(midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), midpoint(B, G), line_intersection(Line(B, G), altitude(E, B, G)), E we get 180 == 2 * direction(orthocenter(A, B, D), midpoint(B, G)) - 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on F, D, midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)) we get 180 == 2 * direction(F, D) - 2 * direction(midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(E, B, G)), E, B, orthocenter(A, B, D) we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) - 2 * direction(B, orthocenter(A, B, D)) mod 360
By perpendicular_direction_conditions_v0_r on D, E, line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G) we get 180 == 2 * direction(D, E) - 2 * direction(line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), F, midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)) we get 180 == 2 * direction(orthocenter(A, B, D), F) - 2 * direction(midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(B, G), altitude(E, B, G)), G, orthocenter(A, B, D) we get 180 == 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) - 2 * direction(G, orthocenter(A, B, D)) mod 360
By perpendicular_direction_conditions_v0_r on F, projection(F, h), F, line_intersection(Line(B, G), altitude(F, B, G)) we get 180 == 2 * direction(F, projection(F, h)) - 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), orthocenter(A, D, G), line_intersection(Line(B, G), altitude(F, B, G)), F we get 180 == 2 * direction(midpoint(B, G), orthocenter(A, D, G)) - 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), orthocenter(A, B, D), projection(A, i) we get 180 == 2 * direction(midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i))) - 2 * direction(orthocenter(A, B, D), projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(E, B, G)), E, orthocenter(A, D, G), B we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) - 2 * direction(orthocenter(A, D, G), B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, B, D), parallel_line(F, i)), F, projection(A, i), orthocenter(A, B, D) we get 180 == 2 * direction(line_intersection(altitude(A, B, D), parallel_line(F, i)), F) - 2 * direction(projection(A, i), orthocenter(A, B, D)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(E, B, G)), E, G, midpoint(B, G) we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) - 2 * direction(G, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), projection(A, Line(D, G)), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G) we get 180 == 2 * direction(orthocenter(A, D, G), projection(A, Line(D, G))) - 2 * direction(line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G), D, E we get 180 == 2 * direction(line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G)) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(B, G), altitude(E, B, G)), G, midpoint(B, G) we get 180 == 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) - 2 * direction(G, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E, A, orthocenter(A, D, G) we get 180 == 2 * direction(line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E) - 2 * direction(A, orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(B, G), altitude(E, B, G)), B, orthocenter(A, D, G) we get 180 == 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) - 2 * direction(B, orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), orthocenter(A, D, G), F, line_intersection(Line(B, G), altitude(F, B, G)) we get 180 == 2 * direction(midpoint(B, G), orthocenter(A, D, G)) - 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) mod 360
By in_imply_collinear on line_intersection(Line(B, G), altitude(projection(A, i), B, G)), B, orthocenter(A, B, D) we get collinear(B, orthocenter(A, B, D), line_intersection(Line(B, G), altitude(projection(A, i), B, G)))
By perpendicular_direction_conditions_v0_r on G, B, line_intersection(Line(B, G), altitude(E, B, G)), E we get 180 == 2 * direction(G, B) - 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on B, G, F, line_intersection(Line(B, G), altitude(F, B, G)) we get 180 == 2 * direction(B, G) - 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on G, B, E, line_intersection(Line(B, G), altitude(E, B, G)) we get 180 == 2 * direction(G, B) - 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(B, G), altitude(F, B, G)), B, midpoint(B, G) we get 180 == 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) - 2 * direction(B, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on projection(midpoint(B, G), g), midpoint(B, G), midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)) we get 180 == 2 * direction(projection(midpoint(B, G), g), midpoint(B, G)) - 2 * direction(midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(altitude(A, B, D), parallel_line(F, i)), projection(A, i), orthocenter(A, B, D) we get 180 == 2 * direction(F, line_intersection(altitude(A, B, D), parallel_line(F, i))) - 2 * direction(projection(A, i), orthocenter(A, B, D)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G)) we get 180 == 2 * direction(line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G)) - 2 * direction(orthocenter(A, D, G), projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), A, midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))) we get 180 == 2 * direction(orthocenter(A, D, G), A) - 2 * direction(midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G)))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(B, G), altitude(E, B, G)), orthocenter(A, D, G), B we get 180 == 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) - 2 * direction(orthocenter(A, D, G), B) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), F, line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G) we get 180 == 2 * direction(orthocenter(A, B, D), F) - 2 * direction(line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G)) mod 360
By line_inequality on altitude(A, midpoint(B, G), projection(A, Line(D, G))), Line(B, C), A we get Line(B, C) != altitude(A, midpoint(B, G), projection(A, Line(D, G)))
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), G, line_intersection(Line(B, G), altitude(E, B, G)), E we get 180 == 2 * direction(orthocenter(A, B, D), G) - 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), D, E we get 180 == 2 * direction(midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E))) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G), D, F we get 180 == 2 * direction(line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G)) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(B, G), altitude(E, B, G)), orthocenter(A, D, G), orthocenter(A, B, D) we get 180 == 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) - 2 * direction(orthocenter(A, D, G), orthocenter(A, B, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(B, G), altitude(E, B, G)), midpoint(B, G), B we get 180 == 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) - 2 * direction(midpoint(B, G), B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G), projection(E, Line(D, G)), E we get 180 == 2 * direction(line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G)) - 2 * direction(projection(E, Line(D, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), A, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E we get 180 == 2 * direction(orthocenter(A, D, G), A) - 2 * direction(line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), A, midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)) we get 180 == 2 * direction(orthocenter(A, B, D), A) - 2 * direction(midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i))) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, D, G), E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))) we get 180 == 2 * direction(A, orthocenter(A, D, G)) - 2 * direction(E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G)))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(B, G), altitude(F, B, G)), F, projection(F, h) we get 180 == 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) - 2 * direction(F, projection(F, h)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G), D, orthocenter(A, B, D) we get 180 == 2 * direction(line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G)) - 2 * direction(D, orthocenter(A, B, D)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), G, E, line_intersection(Line(B, G), altitude(E, B, G)) we get 180 == 2 * direction(orthocenter(A, D, G), G) - 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, B, D), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G) we get 180 == 2 * direction(A, orthocenter(A, B, D)) - 2 * direction(line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on projection(midpoint(B, G), i), midpoint(B, G), midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)) we get 180 == 2 * direction(projection(midpoint(B, G), i), midpoint(B, G)) - 2 * direction(midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i))) mod 360
By perpendicular_direction_conditions_v0_r on projection(E, h), E, line_intersection(Line(B, G), altitude(E, B, G)), E we get 180 == 2 * direction(projection(E, h), E) - 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(B, G), F, line_intersection(Line(B, G), altitude(F, B, G)) we get 180 == 2 * direction(B, midpoint(B, G)) - 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G), E, D we get 180 == 2 * direction(line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G)) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(B, G), altitude(F, B, G)), orthocenter(A, B, D), midpoint(B, G) we get 180 == 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) - 2 * direction(orthocenter(A, B, D), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), projection(A, Line(D, G)), A we get 180 == 2 * direction(midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G)))) - 2 * direction(projection(A, Line(D, G)), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(E, B, G)), E, F, projection(F, h) we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) - 2 * direction(F, projection(F, h)) mod 360
By perpendicular_direction_conditions_v0_r on projection(E, Line(D, G)), E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E we get 180 == 2 * direction(projection(E, Line(D, G)), E) - 2 * direction(line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), F, orthocenter(A, B, D) we get 180 == 2 * direction(midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F))) - 2 * direction(F, orthocenter(A, B, D)) mod 360
By perpendicular_direction_conditions_v0_r on F, projection(F, i), F, line_intersection(altitude(A, B, D), parallel_line(F, i)) we get 180 == 2 * direction(F, projection(F, i)) - 2 * direction(F, line_intersection(altitude(A, B, D), parallel_line(F, i))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), projection(midpoint(B, G), i), F, line_intersection(altitude(A, B, D), parallel_line(F, i)) we get 180 == 2 * direction(midpoint(B, G), projection(midpoint(B, G), i)) - 2 * direction(F, line_intersection(altitude(A, B, D), parallel_line(F, i))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), E, orthocenter(A, D, G) we get 180 == 2 * direction(midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E))) - 2 * direction(E, orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, projection(A, i), midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)) we get 180 == 2 * direction(A, projection(A, i)) - 2 * direction(midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i))) mod 360
By in_imply_collinear on orthocenter(D, midpoint(B, G), projection(A, Line(D, G))), midpoint(B, G), projection(midpoint(B, G), Line(D, G)) we get collinear(midpoint(B, G), projection(midpoint(B, G), Line(D, G)), orthocenter(D, midpoint(B, G), projection(A, Line(D, G))))
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(E, B, G)), E, B, midpoint(B, G) we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) - 2 * direction(B, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(F, B, G)), F, F, projection(F, h) we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) - 2 * direction(F, projection(F, h)) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), orthocenter(A, D, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G) we get 180 == 2 * direction(projection(A, Line(D, G)), orthocenter(A, D, G)) - 2 * direction(line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on B, midpoint(B, G), E, line_intersection(Line(B, G), altitude(E, B, G)) we get 180 == 2 * direction(B, midpoint(B, G)) - 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), projection(A, Line(D, G)), line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E we get 180 == 2 * direction(orthocenter(A, D, G), projection(A, Line(D, G))) - 2 * direction(line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), projection(midpoint(B, G), g), midpoint(B, G) we get 180 == 2 * direction(midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E))) - 2 * direction(projection(midpoint(B, G), g), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), B, line_intersection(Line(B, G), altitude(E, B, G)), E we get 180 == 2 * direction(orthocenter(A, B, D), B) - 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), midpoint(B, G), E, line_intersection(Line(B, G), altitude(E, B, G)) we get 180 == 2 * direction(orthocenter(A, D, G), midpoint(B, G)) - 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(altitude(A, B, D), parallel_line(F, i)), A, orthocenter(A, B, D) we get 180 == 2 * direction(F, line_intersection(altitude(A, B, D), parallel_line(F, i))) - 2 * direction(A, orthocenter(A, B, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, projection(E, h), F, line_intersection(Line(B, G), altitude(F, B, G)) we get 180 == 2 * direction(E, projection(E, h)) - 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G), F, projection(F, i) we get 180 == 2 * direction(line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G)) - 2 * direction(F, projection(F, i)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(F, B, G)), F, B, midpoint(B, G) we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) - 2 * direction(B, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on projection(midpoint(B, G), i), midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G) we get 180 == 2 * direction(projection(midpoint(B, G), i), midpoint(B, G)) - 2 * direction(line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on F, projection(F, h), line_intersection(Line(B, G), altitude(F, B, G)), F we get 180 == 2 * direction(F, projection(F, h)) - 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, B, D), midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)) we get 180 == 2 * direction(A, orthocenter(A, B, D)) - 2 * direction(midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i))) mod 360
By perpendicular_direction_conditions_v0_r on E, projection(E, h), line_intersection(Line(B, G), altitude(F, B, G)), F we get 180 == 2 * direction(E, projection(E, h)) - 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on E, orthocenter(A, D, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G) we get 180 == 2 * direction(E, orthocenter(A, D, G)) - 2 * direction(line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), orthocenter(A, D, G), A we get 180 == 2 * direction(midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G)))) - 2 * direction(orthocenter(A, D, G), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(E, B, G)), E, midpoint(B, G), orthocenter(A, D, G) we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) - 2 * direction(midpoint(B, G), orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on E, projection(E, Line(D, G)), line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E we get 180 == 2 * direction(E, projection(E, Line(D, G))) - 2 * direction(line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), midpoint(B, G), E, line_intersection(Line(B, G), altitude(E, B, G)) we get 180 == 2 * direction(orthocenter(A, B, D), midpoint(B, G)) - 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G), projection(midpoint(B, G), f) we get 180 == 2 * direction(midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F))) - 2 * direction(midpoint(B, G), projection(midpoint(B, G), f)) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), A, F, line_intersection(altitude(A, B, D), parallel_line(F, i)) we get 180 == 2 * direction(projection(A, i), A) - 2 * direction(F, line_intersection(altitude(A, B, D), parallel_line(F, i))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(E, B, G)), E, B, orthocenter(A, D, G) we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) - 2 * direction(B, orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G), projection(A, Line(D, G)), A we get 180 == 2 * direction(line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G)) - 2 * direction(projection(A, Line(D, G)), A) mod 360
By in_imply_collinear on line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), midpoint(B, G), B we get collinear(B, midpoint(B, G), line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)))
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), A, projection(A, i) we get 180 == 2 * direction(midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i))) - 2 * direction(A, projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(A, D, G), E, line_intersection(Line(B, G), altitude(E, B, G)) we get 180 == 2 * direction(G, orthocenter(A, D, G)) - 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on projection(midpoint(B, G), g), midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G) we get 180 == 2 * direction(projection(midpoint(B, G), g), midpoint(B, G)) - 2 * direction(line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, orthocenter(A, B, D), line_intersection(Line(B, G), altitude(E, B, G)), E we get 180 == 2 * direction(G, orthocenter(A, B, D)) - 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), projection(midpoint(B, G), i), midpoint(B, G) we get 180 == 2 * direction(midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i))) - 2 * direction(projection(midpoint(B, G), i), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(F, B, G)), F, midpoint(B, G), B we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) - 2 * direction(midpoint(B, G), B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(E, B, G)), E, G, orthocenter(A, D, G) we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) - 2 * direction(G, orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on B, orthocenter(A, D, G), F, line_intersection(Line(B, G), altitude(F, B, G)) we get 180 == 2 * direction(B, orthocenter(A, D, G)) - 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, B, D), parallel_line(F, i)), F, projection(A, i), A we get 180 == 2 * direction(line_intersection(altitude(A, B, D), parallel_line(F, i)), F) - 2 * direction(projection(A, i), A) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(altitude(A, B, D), parallel_line(F, i)), projection(F, i), F we get 180 == 2 * direction(F, line_intersection(altitude(A, B, D), parallel_line(F, i))) - 2 * direction(projection(F, i), F) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(B, G), altitude(E, B, G)), F, projection(F, h) we get 180 == 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) - 2 * direction(F, projection(F, h)) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(A, B, D), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G) we get 180 == 2 * direction(D, orthocenter(A, B, D)) - 2 * direction(line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G)) mod 360
By in_imply_collinear on line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), orthocenter(A, D, G), midpoint(B, G) we get collinear(midpoint(B, G), orthocenter(A, D, G), line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)))
By perpendicular_direction_conditions_v0_r on line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G), midpoint(B, G), projection(midpoint(B, G), f) we get 180 == 2 * direction(line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G)) - 2 * direction(midpoint(B, G), projection(midpoint(B, G), f)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G), projection(midpoint(B, G), Line(D, G)) we get 180 == 2 * direction(midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G)))) - 2 * direction(midpoint(B, G), projection(midpoint(B, G), Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(B, G), altitude(F, B, G)), B, orthocenter(A, B, D) we get 180 == 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) - 2 * direction(B, orthocenter(A, B, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), projection(midpoint(B, G), Line(D, G)), E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))) we get 180 == 2 * direction(midpoint(B, G), projection(midpoint(B, G), Line(D, G))) - 2 * direction(E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G)))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(B, G), altitude(F, B, G)), orthocenter(A, D, G), B we get 180 == 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) - 2 * direction(orthocenter(A, D, G), B) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), A, projection(A, Line(D, G)) we get 180 == 2 * direction(E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G)))) - 2 * direction(A, projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on A, projection(A, Line(D, G)), E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))) we get 180 == 2 * direction(A, projection(A, Line(D, G))) - 2 * direction(E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G)))) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), A, line_intersection(altitude(A, B, D), parallel_line(F, i)), F we get 180 == 2 * direction(projection(A, i), A) - 2 * direction(line_intersection(altitude(A, B, D), parallel_line(F, i)), F) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), A, orthocenter(A, D, G) we get 180 == 2 * direction(E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G)))) - 2 * direction(A, orthocenter(A, D, G)) mod 360
By in_imply_collinear on line_intersection(Line(B, G), altitude(projection(A, i), B, G)), B, midpoint(B, G) we get collinear(B, midpoint(B, G), line_intersection(Line(B, G), altitude(projection(A, i), B, G)))
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), D, midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)) we get 180 == 2 * direction(orthocenter(A, B, D), D) - 2 * direction(midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F))) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), orthocenter(A, B, D), F, line_intersection(altitude(A, B, D), parallel_line(F, i)) we get 180 == 2 * direction(projection(A, i), orthocenter(A, B, D)) - 2 * direction(F, line_intersection(altitude(A, B, D), parallel_line(F, i))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G), projection(F, i), F we get 180 == 2 * direction(line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G)) - 2 * direction(projection(F, i), F) mod 360
By in_imply_collinear on orthocenter(E, G, projection(A, Line(D, G))), projection(E, Line(D, G)), E we get collinear(E, projection(E, Line(D, G)), orthocenter(E, G, projection(A, Line(D, G))))
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), A, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E we get 180 == 2 * direction(projection(A, Line(D, G)), A) - 2 * direction(line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(B, G), line_intersection(Line(B, G), altitude(F, B, G)), F we get 180 == 2 * direction(G, midpoint(B, G)) - 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(altitude(A, B, D), parallel_line(F, i)), F, projection(F, i) we get 180 == 2 * direction(F, line_intersection(altitude(A, B, D), parallel_line(F, i))) - 2 * direction(F, projection(F, i)) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(B, G), altitude(E, B, G)), orthocenter(A, D, G), midpoint(B, G) we get 180 == 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) - 2 * direction(orthocenter(A, D, G), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G), projection(A, Line(D, G)), orthocenter(A, D, G) we get 180 == 2 * direction(line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G)) - 2 * direction(projection(A, Line(D, G)), orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G), projection(midpoint(B, G), g), midpoint(B, G) we get 180 == 2 * direction(line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G)) - 2 * direction(projection(midpoint(B, G), g), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(F, B, G)), F, G, B we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) - 2 * direction(G, B) mod 360
By perpendicular_direction_conditions_v0_r on projection(midpoint(B, G), Line(D, G)), midpoint(B, G), E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))) we get 180 == 2 * direction(projection(midpoint(B, G), Line(D, G)), midpoint(B, G)) - 2 * direction(E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G)))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), B, F, line_intersection(Line(B, G), altitude(F, B, G)) we get 180 == 2 * direction(orthocenter(A, D, G), B) - 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E, orthocenter(A, D, G), A we get 180 == 2 * direction(line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E) - 2 * direction(orthocenter(A, D, G), A) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(B, G), altitude(F, B, G)), midpoint(B, G), orthocenter(A, B, D) we get 180 == 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) - 2 * direction(midpoint(B, G), orthocenter(A, B, D)) mod 360
By perpendicular_direction_conditions_v0_r on projection(midpoint(B, G), Line(D, G)), midpoint(B, G), midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))) we get 180 == 2 * direction(projection(midpoint(B, G), Line(D, G)), midpoint(B, G)) - 2 * direction(midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G)))) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), orthocenter(A, D, G), E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))) we get 180 == 2 * direction(projection(A, Line(D, G)), orthocenter(A, D, G)) - 2 * direction(E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G)))) mod 360
By perpendicular_direction_conditions_v0_r on projection(E, h), E, line_intersection(Line(B, G), altitude(F, B, G)), F we get 180 == 2 * direction(projection(E, h), E) - 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E, orthocenter(A, D, G), projection(A, Line(D, G)) we get 180 == 2 * direction(line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E) - 2 * direction(orthocenter(A, D, G), projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), B, line_intersection(Line(B, G), altitude(E, B, G)), E we get 180 == 2 * direction(orthocenter(A, D, G), B) - 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), orthocenter(A, B, D), E, line_intersection(Line(B, G), altitude(E, B, G)) we get 180 == 2 * direction(orthocenter(A, D, G), orthocenter(A, B, D)) - 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on B, orthocenter(A, B, D), F, line_intersection(Line(B, G), altitude(F, B, G)) we get 180 == 2 * direction(B, orthocenter(A, B, D)) - 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(B, G), altitude(F, B, G)), midpoint(B, G), G we get 180 == 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) - 2 * direction(midpoint(B, G), G) mod 360
By perpendicular_direction_conditions_v0_r on E, D, line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G) we get 180 == 2 * direction(E, D) - 2 * direction(line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(F, B, G)), F, orthocenter(A, D, G), midpoint(B, G) we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) - 2 * direction(orthocenter(A, D, G), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, B, D), parallel_line(F, i)), F, projection(F, i), F we get 180 == 2 * direction(line_intersection(altitude(A, B, D), parallel_line(F, i)), F) - 2 * direction(projection(F, i), F) mod 360
By orthocenter_concurrency on projection(A, Line(D, G)), E, D we get orthocenter(D, E, projection(A, Line(D, G))) in altitude(projection(A, Line(D, G)), D, E), orthocenter(D, E, projection(A, Line(D, G))) in altitude(E, D, projection(A, Line(D, G))), orthocenter(D, E, projection(A, Line(D, G))) in altitude(D, E, projection(A, Line(D, G)))
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(B, G), altitude(E, B, G)), midpoint(B, G), orthocenter(A, B, D) we get 180 == 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) - 2 * direction(midpoint(B, G), orthocenter(A, B, D)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(F, B, G)), F, orthocenter(A, B, D), G we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) - 2 * direction(orthocenter(A, B, D), G) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), midpoint(B, G), projection(midpoint(B, G), Line(D, G)) we get 180 == 2 * direction(E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G)))) - 2 * direction(midpoint(B, G), projection(midpoint(B, G), Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G), F, D we get 180 == 2 * direction(line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G)) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(B, G), altitude(E, B, G)), projection(E, h), E we get 180 == 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) - 2 * direction(projection(E, h), E) mod 360
By perpendicular_direction_conditions_v0_r on B, orthocenter(A, B, D), line_intersection(Line(B, G), altitude(E, B, G)), E we get 180 == 2 * direction(B, orthocenter(A, B, D)) - 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on projection(midpoint(B, G), f), midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G) we get 180 == 2 * direction(projection(midpoint(B, G), f), midpoint(B, G)) - 2 * direction(line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), orthocenter(A, D, G), E, line_intersection(Line(B, G), altitude(E, B, G)) we get 180 == 2 * direction(midpoint(B, G), orthocenter(A, D, G)) - 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(altitude(A, B, D), parallel_line(F, i)), midpoint(B, G), projection(midpoint(B, G), i) we get 180 == 2 * direction(F, line_intersection(altitude(A, B, D), parallel_line(F, i))) - 2 * direction(midpoint(B, G), projection(midpoint(B, G), i)) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(altitude(A, B, D), parallel_line(F, i)), orthocenter(A, B, D), A we get 180 == 2 * direction(F, line_intersection(altitude(A, B, D), parallel_line(F, i))) - 2 * direction(orthocenter(A, B, D), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(F, B, G)), F, B, G we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) - 2 * direction(B, G) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), projection(midpoint(B, G), f), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G) we get 180 == 2 * direction(midpoint(B, G), projection(midpoint(B, G), f)) - 2 * direction(line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(E, B, G)), E, projection(F, h), F we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) - 2 * direction(projection(F, h), F) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), A, line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G) we get 180 == 2 * direction(orthocenter(A, B, D), A) - 2 * direction(line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), G, E, line_intersection(Line(B, G), altitude(E, B, G)) we get 180 == 2 * direction(orthocenter(A, B, D), G) - 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(B, G), altitude(F, B, G)), orthocenter(A, B, D), G we get 180 == 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) - 2 * direction(orthocenter(A, B, D), G) mod 360
By perpendicular_direction_conditions_v0_r on projection(midpoint(B, G), i), midpoint(B, G), F, line_intersection(altitude(A, B, D), parallel_line(F, i)) we get 180 == 2 * direction(projection(midpoint(B, G), i), midpoint(B, G)) - 2 * direction(F, line_intersection(altitude(A, B, D), parallel_line(F, i))) mod 360
By in_imply_collinear on line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), orthocenter(A, D, G), orthocenter(A, B, D) we get collinear(orthocenter(A, B, D), orthocenter(A, D, G), line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)))
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), projection(A, Line(D, G)), orthocenter(A, D, G) we get 180 == 2 * direction(midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G)))) - 2 * direction(projection(A, Line(D, G)), orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on D, F, midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)) we get 180 == 2 * direction(D, F) - 2 * direction(midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(F, B, G)), F, B, orthocenter(A, B, D) we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) - 2 * direction(B, orthocenter(A, B, D)) mod 360
By perpendicular_direction_conditions_v0_r on projection(E, h), E, E, line_intersection(Line(B, G), altitude(E, B, G)) we get 180 == 2 * direction(projection(E, h), E) - 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(B, G), altitude(E, B, G)), orthocenter(A, B, D), midpoint(B, G) we get 180 == 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) - 2 * direction(orthocenter(A, B, D), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E, projection(E, Line(D, G)), E we get 180 == 2 * direction(line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E) - 2 * direction(projection(E, Line(D, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(B, G), altitude(F, B, G)), orthocenter(A, D, G), orthocenter(A, B, D) we get 180 == 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) - 2 * direction(orthocenter(A, D, G), orthocenter(A, B, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), orthocenter(A, B, D), line_intersection(Line(B, G), altitude(E, B, G)), E we get 180 == 2 * direction(midpoint(B, G), orthocenter(A, B, D)) - 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), midpoint(B, G), line_intersection(Line(B, G), altitude(F, B, G)), F we get 180 == 2 * direction(orthocenter(A, B, D), midpoint(B, G)) - 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on F, projection(F, i), line_intersection(altitude(A, B, D), parallel_line(F, i)), F we get 180 == 2 * direction(F, projection(F, i)) - 2 * direction(line_intersection(altitude(A, B, D), parallel_line(F, i)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G), E, projection(E, Line(D, G)) we get 180 == 2 * direction(line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G)) - 2 * direction(E, projection(E, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E, E, projection(E, Line(D, G)) we get 180 == 2 * direction(line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E) - 2 * direction(E, projection(E, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on D, orthocenter(A, B, D), midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)) we get 180 == 2 * direction(D, orthocenter(A, B, D)) - 2 * direction(midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), orthocenter(A, B, D), line_intersection(Line(B, G), altitude(E, B, G)), E we get 180 == 2 * direction(orthocenter(A, D, G), orthocenter(A, B, D)) - 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(B, G), altitude(F, B, G)), projection(E, h), E we get 180 == 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) - 2 * direction(projection(E, h), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), projection(A, i), A we get 180 == 2 * direction(midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i))) - 2 * direction(projection(A, i), A) mod 360
By in_imply_collinear on line_intersection(altitude(E, D, G), parallel_line(midpoint(B, G), Line(D, G))), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G) we get collinear(midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), line_intersection(altitude(E, D, G), parallel_line(midpoint(B, G), Line(D, G))))
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), projection(midpoint(B, G), f), midpoint(B, G) we get 180 == 2 * direction(midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F))) - 2 * direction(projection(midpoint(B, G), f), midpoint(B, G)) mod 360
By in_imply_collinear on line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), G, orthocenter(A, D, G) we get collinear(G, orthocenter(A, D, G), line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)))
By perpendicular_direction_conditions_v0_r on projection(F, h), F, E, line_intersection(Line(B, G), altitude(E, B, G)) we get 180 == 2 * direction(projection(F, h), F) - 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), D, midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)) we get 180 == 2 * direction(orthocenter(A, D, G), D) - 2 * direction(midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E))) mod 360
By orthocenter_concurrency on midpoint(B, G), projection(A, i), B we get orthocenter(B, midpoint(B, G), projection(A, i)) in altitude(midpoint(B, G), B, projection(A, i)), orthocenter(B, midpoint(B, G), projection(A, i)) in altitude(projection(A, i), B, midpoint(B, G)), orthocenter(B, midpoint(B, G), projection(A, i)) in altitude(B, midpoint(B, G), projection(A, i))
By perpendicular_direction_conditions_v0_r on F, orthocenter(A, B, D), midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)) we get 180 == 2 * direction(F, orthocenter(A, B, D)) - 2 * direction(midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F))) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(B, G), altitude(F, B, G)), projection(F, h), F we get 180 == 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) - 2 * direction(projection(F, h), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G), A, orthocenter(A, D, G) we get 180 == 2 * direction(line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G)) - 2 * direction(A, orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(E, B, G)), E, orthocenter(A, D, G), orthocenter(A, B, D) we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) - 2 * direction(orthocenter(A, D, G), orthocenter(A, B, D)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), A, projection(A, Line(D, G)) we get 180 == 2 * direction(midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G)))) - 2 * direction(A, projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on projection(F, h), F, F, line_intersection(Line(B, G), altitude(F, B, G)) we get 180 == 2 * direction(projection(F, h), F) - 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(B, G), altitude(E, B, G)), orthocenter(A, B, D), B we get 180 == 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) - 2 * direction(orthocenter(A, B, D), B) mod 360
By perpendicular_direction_conditions_v0_r on projection(E, h), E, F, line_intersection(Line(B, G), altitude(F, B, G)) we get 180 == 2 * direction(projection(E, h), E) - 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on E, projection(E, Line(D, G)), E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))) we get 180 == 2 * direction(E, projection(E, Line(D, G))) - 2 * direction(E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G)))) mod 360
By perpendicular_direction_conditions_v0_r on F, projection(F, h), E, line_intersection(Line(B, G), altitude(E, B, G)) we get 180 == 2 * direction(F, projection(F, h)) - 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on A, projection(A, Line(D, G)), line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E we get 180 == 2 * direction(A, projection(A, Line(D, G))) - 2 * direction(line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(B, G), altitude(F, B, G)), orthocenter(A, D, G), midpoint(B, G) we get 180 == 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) - 2 * direction(orthocenter(A, D, G), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(B, G), altitude(F, B, G)), G, orthocenter(A, B, D) we get 180 == 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) - 2 * direction(G, orthocenter(A, B, D)) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(B, G), altitude(F, B, G)), orthocenter(A, B, D), orthocenter(A, D, G) we get 180 == 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) - 2 * direction(orthocenter(A, B, D), orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G), projection(midpoint(B, G), Line(D, G)), midpoint(B, G) we get 180 == 2 * direction(line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G)) - 2 * direction(projection(midpoint(B, G), Line(D, G)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), orthocenter(A, B, D), line_intersection(Line(B, G), altitude(F, B, G)), F we get 180 == 2 * direction(midpoint(B, G), orthocenter(A, B, D)) - 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on B, G, line_intersection(Line(B, G), altitude(F, B, G)), F we get 180 == 2 * direction(B, G) - 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on B, orthocenter(A, D, G), E, line_intersection(Line(B, G), altitude(E, B, G)) we get 180 == 2 * direction(B, orthocenter(A, D, G)) - 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G), A, projection(A, i) we get 180 == 2 * direction(line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G)) - 2 * direction(A, projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on F, projection(F, h), line_intersection(Line(B, G), altitude(E, B, G)), E we get 180 == 2 * direction(F, projection(F, h)) - 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G), orthocenter(A, D, G), E we get 180 == 2 * direction(line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G)) - 2 * direction(orthocenter(A, D, G), E) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(altitude(A, B, D), parallel_line(F, i)), orthocenter(A, B, D), projection(A, i) we get 180 == 2 * direction(F, line_intersection(altitude(A, B, D), parallel_line(F, i))) - 2 * direction(orthocenter(A, B, D), projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), orthocenter(A, B, D), E, line_intersection(Line(B, G), altitude(E, B, G)) we get 180 == 2 * direction(midpoint(B, G), orthocenter(A, B, D)) - 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) mod 360
By in_imply_collinear on line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), B, orthocenter(A, B, D) we get collinear(B, orthocenter(A, B, D), line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)))
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(F, B, G)), F, midpoint(B, G), G we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(F, B, G)), F) - 2 * direction(midpoint(B, G), G) mod 360
By perpendicular_direction_conditions_v0_r on A, orthocenter(A, D, G), midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))) we get 180 == 2 * direction(A, orthocenter(A, D, G)) - 2 * direction(midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G)))) mod 360
By perpendicular_direction_conditions_v0_r on A, projection(A, i), line_intersection(altitude(A, B, D), parallel_line(F, i)), F we get 180 == 2 * direction(A, projection(A, i)) - 2 * direction(line_intersection(altitude(A, B, D), parallel_line(F, i)), F) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(altitude(A, B, D), parallel_line(F, i)), A, projection(A, i) we get 180 == 2 * direction(F, line_intersection(altitude(A, B, D), parallel_line(F, i))) - 2 * direction(A, projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), projection(midpoint(B, G), i), line_intersection(altitude(A, B, D), parallel_line(F, i)), F we get 180 == 2 * direction(midpoint(B, G), projection(midpoint(B, G), i)) - 2 * direction(line_intersection(altitude(A, B, D), parallel_line(F, i)), F) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(B, G), E, line_intersection(Line(B, G), altitude(E, B, G)) we get 180 == 2 * direction(G, midpoint(B, G)) - 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on D, F, line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G) we get 180 == 2 * direction(D, F) - 2 * direction(line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E, projection(E, Line(D, G)) we get 180 == 2 * direction(E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G)))) - 2 * direction(E, projection(E, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G), D, orthocenter(A, D, G) we get 180 == 2 * direction(line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G)) - 2 * direction(D, orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G), orthocenter(A, D, G), D we get 180 == 2 * direction(line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G)) - 2 * direction(orthocenter(A, D, G), D) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(B, G), altitude(E, B, G)), G, orthocenter(A, D, G) we get 180 == 2 * direction(E, line_intersection(Line(B, G), altitude(E, B, G))) - 2 * direction(G, orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, midpoint(B, G), F, line_intersection(Line(B, G), altitude(F, B, G)) we get 180 == 2 * direction(G, midpoint(B, G)) - 2 * direction(F, line_intersection(Line(B, G), altitude(F, B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(E, B, G)), E, E, projection(E, h) we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) - 2 * direction(E, projection(E, h)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(B, G), altitude(E, B, G)), E, G, orthocenter(A, B, D) we get 180 == 2 * direction(line_intersection(Line(B, G), altitude(E, B, G)), E) - 2 * direction(G, orthocenter(A, B, D)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G), orthocenter(A, B, D), D we get 180 == 2 * direction(line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G)) - 2 * direction(orthocenter(A, B, D), D) mod 360
By in_imply_collinear on orthocenter(A, E, projection(A, Line(D, G))), E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))) we get collinear(E, orthocenter(A, E, projection(A, Line(D, G))), line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))))
By in_imply_collinear on orthocenter(D, midpoint(B, G), projection(A, i)), projection(midpoint(B, G), i), midpoint(B, G) we get collinear(midpoint(B, G), projection(midpoint(B, G), i), orthocenter(D, midpoint(B, G), projection(A, i)))
By in_imply_collinear on line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)), line_intersection(Line(B, G), altitude(F, B, G)), F we get collinear(F, line_intersection(Line(B, G), altitude(F, B, G)), line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)))
By line_containment_inequality on line_intersection(median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G))), D, median(E, B, G) we get D != line_intersection(median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G)))
By in_imply_collinear on line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), orthocenter(A, B, D), G we get collinear(G, orthocenter(A, B, D), line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)))
By in_imply_collinear on line_intersection(altitude(E, B, G), altitude(F, A, D)), E, line_intersection(Line(B, G), altitude(E, B, G)) we get collinear(E, line_intersection(Line(B, G), altitude(E, B, G)), line_intersection(altitude(E, B, G), altitude(F, A, D)))
By in_imply_collinear on line_intersection(Line(B, G), altitude(projection(A, i), B, G)), orthocenter(A, B, D), midpoint(B, G) we get collinear(midpoint(B, G), orthocenter(A, B, D), line_intersection(Line(B, G), altitude(projection(A, i), B, G)))
By in_imply_collinear on line_intersection(altitude(E, A, D), altitude(F, B, G)), line_intersection(Line(B, G), altitude(F, B, G)), F we get collinear(F, line_intersection(Line(B, G), altitude(F, B, G)), line_intersection(altitude(E, A, D), altitude(F, B, G)))
By anti_similar_triangle_basic_properties on G, E, D, B, F, D we get not_collinear(D, E, G), not_collinear(B, D, F), angle(G, E, D) == 0 - angle(B, F, D) mod 360, angle(E, D, G) == 0 - angle(F, D, B) mod 360, angle(D, G, E) == 0 - angle(D, B, F) mod 360, log(distance(B, F)) + log(distance(D, E)) == log(distance(E, G)) + log(distance(D, F)), log(distance(D, E)) + log(distance(B, D)) == log(distance(D, F)) + log(distance(D, G)), log(distance(B, D)) + log(distance(E, G)) == log(distance(D, G)) + log(distance(B, F))
By in_imply_collinear on orthocenter(B, F, projection(A, i)), projection(F, i), F we get collinear(F, projection(F, i), orthocenter(B, F, projection(A, i)))
By in_imply_collinear on line_intersection(Line(B, G), altitude(projection(A, i), B, G)), midpoint(B, G), G we get collinear(G, midpoint(B, G), line_intersection(Line(B, G), altitude(projection(A, i), B, G)))
By in_imply_collinear on line_intersection(median(F, B, G), altitude(D, F, midpoint(B, G))), midpoint(B, G), F we get collinear(F, midpoint(B, G), line_intersection(median(F, B, G), altitude(D, F, midpoint(B, G))))
By in_imply_collinear on orthocenter(A, midpoint(B, G), projection(A, Line(D, G))), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G) we get collinear(midpoint(B, G), orthocenter(A, midpoint(B, G), projection(A, Line(D, G))), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))))
By in_imply_collinear on line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)), E, line_intersection(Line(B, G), altitude(E, B, G)) we get collinear(E, line_intersection(Line(B, G), altitude(E, B, G)), line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)))
By in_imply_collinear on line_intersection(Line(B, G), altitude(projection(A, i), B, G)), B, G we get collinear(B, G, line_intersection(Line(B, G), altitude(projection(A, i), B, G)))
By in_imply_collinear on line_intersection(Line(B, G), altitude(projection(A, i), B, G)), G, orthocenter(A, B, D) we get collinear(G, orthocenter(A, B, D), line_intersection(Line(B, G), altitude(projection(A, i), B, G)))
By in_imply_collinear on orthocenter(A, midpoint(B, G), projection(A, i)), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G) we get collinear(midpoint(B, G), orthocenter(A, midpoint(B, G), projection(A, i)), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)))
By in_imply_collinear on line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), D, orthocenter(A, D, G) we get collinear(D, orthocenter(A, D, G), line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)))
By double_perpendicular_and_parallel_v0 on altitude(A, midpoint(B, G), projection(A, Line(D, G))), Line(midpoint(B, G), projection(A, Line(D, G))), altitude(D, midpoint(B, G), projection(A, Line(D, G))) we get parallel(altitude(A, midpoint(B, G), projection(A, Line(D, G))), altitude(D, midpoint(B, G), projection(A, Line(D, G))))
By in_imply_collinear on line_intersection(median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G))), midpoint(B, G), F we get collinear(F, midpoint(B, G), line_intersection(median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G))))
By in_imply_collinear on line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)), line_intersection(Line(B, G), altitude(E, B, G)), E we get collinear(E, line_intersection(Line(B, G), altitude(E, B, G)), line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)))
By in_imply_collinear on line_intersection(parallel_line(F, i), altitude(midpoint(B, G), B, D)), F, line_intersection(altitude(A, B, D), parallel_line(F, i)) we get collinear(F, line_intersection(altitude(A, B, D), parallel_line(F, i)), line_intersection(parallel_line(F, i), altitude(midpoint(B, G), B, D)))
By in_imply_collinear on line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), B, orthocenter(A, D, G) we get collinear(B, orthocenter(A, D, G), line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)))
By in_imply_collinear on orthocenter(E, G, midpoint(B, G)), E, line_intersection(Line(B, G), altitude(E, B, G)) we get collinear(E, orthocenter(E, G, midpoint(B, G)), line_intersection(Line(B, G), altitude(E, B, G)))
By line_containment_inequality on line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), F, Line(B, G) we get F != line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G))
By in_imply_collinear on line_intersection(median(E, B, G), altitude(G, E, midpoint(B, G))), midpoint(B, G), E we get collinear(E, midpoint(B, G), line_intersection(median(E, B, G), altitude(G, E, midpoint(B, G))))
By in_imply_collinear on line_intersection(altitude(midpoint(B, G), D, F), altitude(projection(A, i), A, B)), midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)) we get collinear(midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), line_intersection(altitude(midpoint(B, G), D, F), altitude(projection(A, i), A, B)))
By in_imply_collinear on line_intersection(Line(D, F), altitude(projection(A, i), D, F)), F, D we get collinear(D, F, line_intersection(Line(D, F), altitude(projection(A, i), D, F)))
By in_imply_collinear on line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), G, B we get collinear(B, G, line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)))
By in_imply_collinear on line_intersection(Line(B, G), altitude(projection(A, i), B, G)), orthocenter(A, D, G), orthocenter(A, B, D) we get collinear(orthocenter(A, B, D), orthocenter(A, D, G), line_intersection(Line(B, G), altitude(projection(A, i), B, G)))
By in_imply_collinear on line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), midpoint(B, G), G we get collinear(G, midpoint(B, G), line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)))
By in_imply_collinear on line_intersection(Line(B, G), altitude(projection(A, i), B, G)), midpoint(B, G), orthocenter(A, D, G) we get collinear(midpoint(B, G), orthocenter(A, D, G), line_intersection(Line(B, G), altitude(projection(A, i), B, G)))
By in_imply_collinear on line_intersection(parallel_line(E, Line(D, G)), altitude(midpoint(B, G), D, G)), line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E we get collinear(E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), line_intersection(parallel_line(E, Line(D, G)), altitude(midpoint(B, G), D, G)))
By in_imply_collinear on line_intersection(altitude(midpoint(B, G), D, E), altitude(projection(A, Line(D, G)), A, C)), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G) we get collinear(midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), line_intersection(altitude(midpoint(B, G), D, E), altitude(projection(A, Line(D, G)), A, C)))
By in_imply_collinear on line_intersection(Line(B, G), altitude(projection(A, i), B, G)), B, orthocenter(A, D, G) we get collinear(B, orthocenter(A, D, G), line_intersection(Line(B, G), altitude(projection(A, i), B, G)))
By in_imply_collinear on orthocenter(A, E, midpoint(B, G)), line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))), A we get collinear(A, orthocenter(A, E, midpoint(B, G)), line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))))
By in_imply_collinear on line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), E, orthocenter(A, D, G) we get collinear(E, orthocenter(A, D, G), line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)))
By in_imply_collinear on line_intersection(Line(B, G), altitude(projection(A, i), B, G)), orthocenter(A, D, G), G we get collinear(G, orthocenter(A, D, G), line_intersection(Line(B, G), altitude(projection(A, i), B, G)))
By in_imply_collinear on orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G) we get collinear(midpoint(B, G), orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)))
By line_inequality on Line(midpoint(B, G), projection(A, i)), Line(D, H), projection(A, i) we get Line(D, H) != Line(midpoint(B, G), projection(A, i))
By in_imply_collinear on orthocenter(D, F, midpoint(B, G)), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G) we get collinear(midpoint(B, G), orthocenter(D, F, midpoint(B, G)), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)))
By line_containment_inequality on line_intersection(Line(B, G), altitude(projection(A, i), B, G)), H, Line(B, G) we get H != line_intersection(Line(B, G), altitude(projection(A, i), B, G))
By in_imply_collinear on line_intersection(altitude(F, B, D), parallel_line(midpoint(B, G), i)), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G) we get collinear(midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), line_intersection(altitude(F, B, D), parallel_line(midpoint(B, G), i)))
By line_containment_inequality on line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), E, Line(B, G) we get E != line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G))
By in_imply_collinear on orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), line_intersection(Line(B, G), altitude(E, B, G)), E we get collinear(E, line_intersection(Line(B, G), altitude(E, B, G)), orthocenter(E, midpoint(B, G), orthocenter(A, D, G)))
By in_imply_collinear on orthocenter(F, midpoint(B, G), orthocenter(A, B, D)), line_intersection(Line(B, G), altitude(F, B, G)), F we get collinear(F, line_intersection(Line(B, G), altitude(F, B, G)), orthocenter(F, midpoint(B, G), orthocenter(A, B, D)))
By sas_similarity on G, A, B, C, A, H we get similar_triangles(A, B, G, A, H, C)
By in_imply_collinear on line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), E, D we get collinear(D, E, line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)))
By in_imply_collinear on orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)) we get collinear(midpoint(B, G), orthocenter(E, midpoint(B, G), orthocenter(A, D, G)), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)))
By in_imply_collinear on line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)), F, line_intersection(Line(B, G), altitude(F, B, G)) we get collinear(F, line_intersection(Line(B, G), altitude(F, B, G)), line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)))
By line_inequality on Line(midpoint(B, G), projection(A, Line(D, G))), Line(D, E), projection(A, Line(D, G)) we get Line(D, E) != Line(midpoint(B, G), projection(A, Line(D, G)))
By in_imply_collinear on line_intersection(Line(D, F), altitude(projection(A, i), D, F)), D, orthocenter(A, B, D) we get collinear(D, orthocenter(A, B, D), line_intersection(Line(D, F), altitude(projection(A, i), D, F)))
By asa_anti_congruence on E, D, G, F, D, B we get anti_congruent_triangles(B, D, F, G, D, E)
By in_imply_collinear on line_intersection(Line(D, F), altitude(projection(A, i), D, F)), F, orthocenter(A, B, D) we get collinear(F, orthocenter(A, B, D), line_intersection(Line(D, F), altitude(projection(A, i), D, F)))
By in_imply_collinear on line_intersection(median(E, B, G), altitude(D, E, midpoint(B, G))), E, midpoint(B, G) we get collinear(E, midpoint(B, G), line_intersection(median(E, B, G), altitude(D, E, midpoint(B, G))))
By in_imply_collinear on line_intersection(median(F, B, G), altitude(B, F, midpoint(B, G))), F, midpoint(B, G) we get collinear(F, midpoint(B, G), line_intersection(median(F, B, G), altitude(B, F, midpoint(B, G))))
By sas_similarity on E, D, F, C, I, B we get similar_triangles(B, C, I, F, E, D)
By line_containment_inequality on line_intersection(median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G))), A, median(E, B, G) we get A != line_intersection(median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G)))
By line_inequality on altitude(A, midpoint(B, G), projection(A, Line(D, G))), median(F, B, G), A we get median(F, B, G) != altitude(A, midpoint(B, G), projection(A, Line(D, G)))
By double_perpendicular_and_parallel_v0 on altitude(A, E, projection(A, Line(D, G))), Line(E, projection(A, Line(D, G))), altitude(G, E, projection(A, Line(D, G))) we get parallel(altitude(A, E, projection(A, Line(D, G))), altitude(G, E, projection(A, Line(D, G))))
By line_inequality on altitude(A, midpoint(B, G), projection(A, i)), Line(E, F), A we get Line(E, F) != altitude(A, midpoint(B, G), projection(A, i))
By line_inequality on altitude(G, E, projection(A, Line(D, G))), f, G we get f != altitude(G, E, projection(A, Line(D, G)))
By sas_anti_similarity on E, A, F, B, A, G we get anti_similar_triangles(A, B, G, A, E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on orthocenter(A, D, G), projection(A, Line(D, G)), E we get orthocenter(A, D, G) not in Line(E, projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), projection(A, Line(D, G)), Line(B, G) we get projection(A, Line(D, G)) != line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G))
By line_inequality on altitude(G, E, projection(A, Line(D, G))), Line(H, orthocenter(A, B, D)), G we get Line(H, orthocenter(A, B, D)) != altitude(G, E, projection(A, Line(D, G)))
By double_perpendicular_and_parallel_v0 on altitude(B, F, projection(A, i)), Line(F, projection(A, i)), altitude(A, F, projection(A, i)) we get parallel(altitude(A, F, projection(A, i)), altitude(B, F, projection(A, i)))
By line_inequality on Line(midpoint(B, G), projection(A, Line(D, G))), Line(D, F), midpoint(B, G) we get Line(D, F) != Line(midpoint(B, G), projection(A, Line(D, G)))
By sas_similarity on E, A, F, G, A, B we get similar_triangles(A, B, G, A, F, E)
By sas_similarity on B, A, G, F, A, E we get similar_triangles(A, B, G, A, F, E)
By line_containment_inequality on line_intersection(median(F, B, G), altitude(D, F, midpoint(B, G))), D, median(F, B, G) we get D != line_intersection(median(F, B, G), altitude(D, F, midpoint(B, G)))
By line_inequality on Line(midpoint(B, G), projection(A, Line(D, G))), Line(G, I), projection(A, Line(D, G)) we get Line(G, I) != Line(midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(A, E, projection(A, Line(D, G))), Line(E, H), A we get Line(E, H) != altitude(A, E, projection(A, Line(D, G)))
By line_inequality on altitude(D, midpoint(B, G), projection(A, i)), Line(E, H), D we get Line(E, H) != altitude(D, midpoint(B, G), projection(A, i))
By line_inequality on altitude(A, E, projection(A, Line(D, G))), Line(C, H), A we get Line(C, H) != altitude(A, E, projection(A, Line(D, G)))
By sas_anti_congruence on F, D, B, E, D, G we get anti_congruent_triangles(B, D, F, G, D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on orthocenter(A, B, D), projection(A, i), midpoint(B, G) we get orthocenter(A, B, D) not in Line(midpoint(B, G), projection(A, i))
By not_in_line_equivalent_to_not_collinear_v0_r on B, projection(A, Line(D, G)), midpoint(B, G) we get B not in Line(midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(A, midpoint(B, G), projection(A, i)), Line(C, I), A we get Line(C, I) != altitude(A, midpoint(B, G), projection(A, i))
By line_containment_inequality on line_intersection(median(E, B, G), altitude(D, E, midpoint(B, G))), orthocenter(A, D, G), median(E, B, G) we get orthocenter(A, D, G) != line_intersection(median(E, B, G), altitude(D, E, midpoint(B, G)))
By line_inequality on Line(midpoint(B, G), projection(A, Line(D, G))), f, midpoint(B, G) we get f != Line(midpoint(B, G), projection(A, Line(D, G)))
By sas_anti_congruence on B, D, F, G, D, E we get anti_congruent_triangles(B, D, F, G, D, E)
By line_inequality on altitude(A, midpoint(B, G), projection(A, Line(D, G))), i, A we get i != altitude(A, midpoint(B, G), projection(A, Line(D, G)))
By not_in_line_equivalent_to_not_collinear_v0_r on G, projection(A, i), midpoint(B, G) we get G not in Line(midpoint(B, G), projection(A, i))
By line_containment_inequality on line_intersection(median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G))), H, median(F, B, G) we get H != line_intersection(median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G)))
By line_inequality on altitude(B, F, projection(A, i)), altitude(A, B, D), B we get altitude(A, B, D) != altitude(B, F, projection(A, i))
By line_inequality on Line(midpoint(B, G), projection(A, i)), f, projection(A, i) we get f != Line(midpoint(B, G), projection(A, i))
By sas_anti_congruence on G, D, E, B, D, F we get anti_congruent_triangles(B, D, F, G, D, E)
By asa_anti_congruence on F, D, B, E, D, G we get anti_congruent_triangles(B, D, F, G, D, E)
By anti_similar_triangle_basic_properties on E, G, D, F, B, D we get not_collinear(D, E, G), not_collinear(B, D, F), angle(E, G, D) == 0 - angle(F, B, D) mod 360, angle(G, D, E) == 0 - angle(B, D, F) mod 360, angle(D, E, G) == 0 - angle(D, F, B) mod 360, log(distance(B, F)) + log(distance(D, G)) == log(distance(E, G)) + log(distance(B, D)), log(distance(B, D)) + log(distance(D, E)) == log(distance(D, G)) + log(distance(D, F)), log(distance(D, E)) + log(distance(B, F)) == log(distance(D, F)) + log(distance(E, G))
By asa_anti_congruence on G, D, E, B, D, F we get anti_congruent_triangles(B, D, F, G, D, E)
By line_inequality on Line(midpoint(B, G), projection(A, Line(D, G))), Line(C, D), projection(A, Line(D, G)) we get Line(C, D) != Line(midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(A, E, projection(A, Line(D, G))), Line(C, F), A we get Line(C, F) != altitude(A, E, projection(A, Line(D, G)))
By line_inequality on Line(midpoint(B, G), projection(A, Line(D, G))), Line(B, G), projection(A, Line(D, G)) we get Line(B, G) != Line(midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(A, midpoint(B, G), projection(A, i)), Line(C, H), A we get Line(C, H) != altitude(A, midpoint(B, G), projection(A, i))
By line_inequality on Line(F, projection(A, i)), Line(C, H), F we get Line(C, H) != Line(F, projection(A, i))
By line_inequality on altitude(A, F, projection(A, i)), median(E, B, G), A we get median(E, B, G) != altitude(A, F, projection(A, i))
By line_inequality on altitude(A, midpoint(B, G), projection(A, Line(D, G))), Line(E, F), A we get Line(E, F) != altitude(A, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on Line(midpoint(B, G), projection(A, Line(D, G))), altitude(A, B, D), midpoint(B, G) we get altitude(A, B, D) != Line(midpoint(B, G), projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G))), D, median(F, B, G) we get D != line_intersection(median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G)))
By line_inequality on Line(midpoint(B, G), projection(A, i)), Line(D, F), midpoint(B, G) we get Line(D, F) != Line(midpoint(B, G), projection(A, i))
By double_perpendicular_and_parallel_v0 on altitude(A, midpoint(B, G), projection(A, i)), Line(midpoint(B, G), projection(A, i)), altitude(D, midpoint(B, G), projection(A, i)) we get parallel(altitude(A, midpoint(B, G), projection(A, i)), altitude(D, midpoint(B, G), projection(A, i)))
By line_inequality on Line(E, projection(A, Line(D, G))), h, projection(A, Line(D, G)) we get h != Line(E, projection(A, Line(D, G)))
By sas_similarity on H, A, C, B, A, G we get similar_triangles(A, B, G, A, H, C)
By line_containment_inequality on line_intersection(median(F, B, G), altitude(B, F, midpoint(B, G))), orthocenter(A, D, G), median(F, B, G) we get orthocenter(A, D, G) != line_intersection(median(F, B, G), altitude(B, F, midpoint(B, G)))
By line_inequality on Line(E, projection(A, Line(D, G))), Line(B, G), projection(A, Line(D, G)) we get Line(B, G) != Line(E, projection(A, Line(D, G)))
By sas_anti_similarity on C, A, H, B, A, G we get anti_similar_triangles(A, B, G, A, C, H)
By sas_anti_congruence on G, D, C, B, D, H we get anti_congruent_triangles(B, D, H, G, D, C)
By line_inequality on altitude(D, midpoint(B, G), projection(A, i)), altitude(A, B, D), D we get altitude(A, B, D) != altitude(D, midpoint(B, G), projection(A, i))
By line_inequality on Line(midpoint(B, G), projection(A, Line(D, G))), Line(C, orthocenter(A, D, G)), midpoint(B, G) we get Line(C, orthocenter(A, D, G)) != Line(midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(A, midpoint(B, G), projection(A, Line(D, G))), Line(G, I), A we get Line(G, I) != altitude(A, midpoint(B, G), projection(A, Line(D, G)))
By sas_anti_similarity on G, A, B, F, A, E we get anti_similar_triangles(A, B, G, A, E, F)
By sas_similarity on F, A, E, B, A, G we get similar_triangles(A, B, G, A, F, E)
By line_inequality on altitude(D, midpoint(B, G), projection(A, Line(D, G))), Line(B, I), D we get Line(B, I) != altitude(D, midpoint(B, G), projection(A, Line(D, G)))
By sas_anti_similarity on E, D, F, B, I, C we get anti_similar_triangles(B, C, I, E, F, D)
By line_inequality on altitude(D, midpoint(B, G), projection(A, Line(D, G))), Line(I, orthocenter(A, D, G)), D we get Line(I, orthocenter(A, D, G)) != altitude(D, midpoint(B, G), projection(A, Line(D, G)))
By not_in_line_equivalent_to_not_collinear_v0_r on I, midpoint(B, G), projection(A, i) we get I not in Line(midpoint(B, G), projection(A, i))
By sas_anti_similarity on B, A, G, C, A, H we get anti_similar_triangles(A, B, G, A, C, H)
By line_inequality on altitude(G, E, projection(A, Line(D, G))), Line(C, F), G we get Line(C, F) != altitude(G, E, projection(A, Line(D, G)))
By sas_similarity on G, A, B, E, A, F we get similar_triangles(A, B, G, A, F, E)
By asa_anti_congruence on D, G, E, D, B, F we get anti_congruent_triangles(B, D, F, G, D, E)
By line_inequality on Line(midpoint(B, G), projection(A, Line(D, G))), Line(I, orthocenter(A, D, G)), midpoint(B, G) we get Line(I, orthocenter(A, D, G)) != Line(midpoint(B, G), projection(A, Line(D, G)))
By sas_anti_similarity on F, A, E, G, A, B we get anti_similar_triangles(A, B, G, A, E, F)
By line_inequality on altitude(A, midpoint(B, G), projection(A, Line(D, G))), Line(D, F), A we get Line(D, F) != altitude(A, midpoint(B, G), projection(A, Line(D, G)))
By anti_congruence_from_anti_similar_triangles on D, E, G, D, F, B we get anti_congruent_triangles(B, D, F, G, D, E)
By line_containment_inequality on line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), A, Line(B, G) we get A != line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G))
By not_in_line_equivalent_to_not_collinear_v0_r on orthocenter(A, B, D), F, projection(A, i) we get orthocenter(A, B, D) not in Line(F, projection(A, i))
By line_inequality on altitude(G, E, projection(A, Line(D, G))), i, G we get i != altitude(G, E, projection(A, Line(D, G)))
By anti_congruence_from_anti_similar_triangles on G, D, E, B, D, F we get anti_congruent_triangles(B, D, F, G, D, E)
By sas_anti_similarity on F, D, E, C, I, B we get anti_similar_triangles(B, C, I, E, F, D)
By line_inequality on altitude(G, E, projection(A, Line(D, G))), Line(I, orthocenter(A, B, D)), G we get Line(I, orthocenter(A, B, D)) != altitude(G, E, projection(A, Line(D, G)))
By line_inequality on altitude(G, E, projection(A, Line(D, G))), Line(E, H), G we get Line(E, H) != altitude(G, E, projection(A, Line(D, G)))
By anti_congruence_from_anti_similar_triangles on F, D, B, E, D, G we get anti_congruent_triangles(B, D, F, G, D, E)
By line_containment_inequality on line_intersection(median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G))), orthocenter(A, B, D), median(F, B, G) we get orthocenter(A, B, D) != line_intersection(median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G)))
By line_inequality on Line(F, projection(A, i)), altitude(A, D, G), projection(A, i) we get altitude(A, D, G) != Line(F, projection(A, i))
By sas_anti_similarity on G, A, B, H, A, C we get anti_similar_triangles(A, B, G, A, C, H)
By line_containment_inequality on line_intersection(median(E, B, G), altitude(D, E, midpoint(B, G))), orthocenter(A, B, D), median(E, B, G) we get orthocenter(A, B, D) != line_intersection(median(E, B, G), altitude(D, E, midpoint(B, G)))
By line_containment_inequality on line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), H, Line(D, E) we get H != line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E))
By asa_anti_congruence on D, B, F, D, G, E we get anti_congruent_triangles(B, D, F, G, D, E)
By anti_congruence_from_anti_similar_triangles on D, F, B, D, E, G we get anti_congruent_triangles(B, D, F, G, D, E)
By line_inequality on Line(midpoint(B, G), projection(A, i)), Line(D, E), midpoint(B, G) we get Line(D, E) != Line(midpoint(B, G), projection(A, i))
By line_inequality on altitude(A, midpoint(B, G), projection(A, i)), Line(D, F), A we get Line(D, F) != altitude(A, midpoint(B, G), projection(A, i))
By line_inequality on altitude(A, midpoint(B, G), projection(A, i)), Line(B, I), A we get Line(B, I) != altitude(A, midpoint(B, G), projection(A, i))
By sas_anti_congruence on C, D, G, H, D, B we get anti_congruent_triangles(B, D, H, G, D, C)
By line_inequality on Line(midpoint(B, G), projection(A, i)), Line(D, G), midpoint(B, G) we get Line(D, G) != Line(midpoint(B, G), projection(A, i))
By line_inequality on Line(F, projection(A, i)), Line(C, D), projection(A, i) we get Line(C, D) != Line(F, projection(A, i))
By line_containment_inequality on line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), H, Line(B, G) we get H != line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G))
By line_inequality on Line(F, projection(A, i)), Line(G, I), F we get Line(G, I) != Line(F, projection(A, i))
By sas_similarity on C, I, B, E, D, F we get similar_triangles(B, C, I, F, E, D)
By sas_similarity on F, D, E, B, I, C we get similar_triangles(B, C, I, F, E, D)
By line_inequality on altitude(D, midpoint(B, G), projection(A, Line(D, G))), Line(I, orthocenter(A, B, D)), D we get Line(I, orthocenter(A, B, D)) != altitude(D, midpoint(B, G), projection(A, Line(D, G)))
By sas_similarity on B, A, G, H, A, C we get similar_triangles(A, B, G, A, H, C)
By line_containment_inequality on line_intersection(median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G))), B, median(F, B, G) we get B != line_intersection(median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G)))
By line_inequality on altitude(B, F, projection(A, i)), median(F, B, G), B we get median(F, B, G) != altitude(B, F, projection(A, i))
By anti_congruence_from_anti_similar_triangles on E, D, G, F, D, B we get anti_congruent_triangles(B, D, F, G, D, E)
By line_containment_inequality on line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), C, Line(B, G) we get C != line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G))
By anti_congruence_from_anti_similar_triangles on D, B, F, D, G, E we get anti_congruent_triangles(B, D, F, G, D, E)
By line_inequality on Line(midpoint(B, G), projection(A, Line(D, G))), Line(I, orthocenter(A, B, D)), midpoint(B, G) we get Line(I, orthocenter(A, B, D)) != Line(midpoint(B, G), projection(A, Line(D, G)))
By not_in_line_equivalent_to_not_collinear_v0_r on A, F, projection(A, i) we get A not in Line(F, projection(A, i))
By not_in_line_equivalent_to_not_collinear_v0_r on orthocenter(A, D, G), midpoint(B, G), projection(A, i) we get orthocenter(A, D, G) not in Line(midpoint(B, G), projection(A, i))
By line_inequality on altitude(A, F, projection(A, i)), Line(E, F), A we get Line(E, F) != altitude(A, F, projection(A, i))
By line_inequality on altitude(A, midpoint(B, G), projection(A, Line(D, G))), Line(B, G), A we get Line(B, G) != altitude(A, midpoint(B, G), projection(A, Line(D, G)))
By asa_anti_congruence on B, D, F, G, D, E we get anti_congruent_triangles(B, D, F, G, D, E)
By sas_anti_congruence on E, D, G, F, D, B we get anti_congruent_triangles(B, D, F, G, D, E)
By asa_anti_congruence on D, F, B, D, E, G we get anti_congruent_triangles(B, D, F, G, D, E)
By line_inequality on Line(midpoint(B, G), projection(A, Line(D, G))), Line(C, I), midpoint(B, G) we get Line(C, I) != Line(midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(D, midpoint(B, G), projection(A, i)), Line(B, G), D we get Line(B, G) != altitude(D, midpoint(B, G), projection(A, i))
By sas_similarity on B, I, C, F, D, E we get similar_triangles(B, C, I, F, E, D)
By sas_anti_similarity on C, I, B, F, D, E we get anti_similar_triangles(B, C, I, E, F, D)
By line_inequality on altitude(A, midpoint(B, G), projection(A, Line(D, G))), Line(I, orthocenter(A, D, G)), A we get Line(I, orthocenter(A, D, G)) != altitude(A, midpoint(B, G), projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(Line(B, G), altitude(projection(A, i), B, G)), projection(A, i), Line(B, G) we get projection(A, i) != line_intersection(Line(B, G), altitude(projection(A, i), B, G))
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, projection(A, Line(D, G)) we get C not in Line(E, projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(Line(D, F), altitude(projection(A, i), D, F)), B, Line(D, F) we get B != line_intersection(Line(D, F), altitude(projection(A, i), D, F))
By line_inequality on altitude(D, midpoint(B, G), projection(A, i)), Line(E, F), D we get Line(E, F) != altitude(D, midpoint(B, G), projection(A, i))
By line_inequality on Line(midpoint(B, G), projection(A, Line(D, G))), Line(B, I), midpoint(B, G) we get Line(B, I) != Line(midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(G, E, projection(A, Line(D, G))), Line(B, C), G we get Line(B, C) != altitude(G, E, projection(A, Line(D, G)))
By sas_anti_congruence on B, D, H, G, D, C we get anti_congruent_triangles(B, D, H, G, D, C)
By sas_anti_similarity on B, I, C, E, D, F we get anti_similar_triangles(B, C, I, E, F, D)
By line_containment_inequality on line_intersection(median(F, B, G), altitude(B, F, midpoint(B, G))), B, median(F, B, G) we get B != line_intersection(median(F, B, G), altitude(B, F, midpoint(B, G)))
By line_inequality on Line(E, projection(A, Line(D, G))), Line(G, I), projection(A, Line(D, G)) we get Line(G, I) != Line(E, projection(A, Line(D, G)))
By line_inequality on altitude(B, F, projection(A, i)), Line(C, D), B we get Line(C, D) != altitude(B, F, projection(A, i))
By sas_anti_similarity on B, A, G, E, A, F we get anti_similar_triangles(A, B, G, A, E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on D, midpoint(B, G), projection(A, Line(D, G)) we get D not in Line(midpoint(B, G), projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(median(E, B, G), altitude(D, E, midpoint(B, G))), G, median(E, B, G) we get G != line_intersection(median(E, B, G), altitude(D, E, midpoint(B, G)))
By line_inequality on altitude(D, midpoint(B, G), projection(A, i)), Line(C, H), D we get Line(C, H) != altitude(D, midpoint(B, G), projection(A, i))
By line_inequality on Line(F, projection(A, i)), i, F we get i != Line(F, projection(A, i))
By line_inequality on Line(F, projection(A, i)), Line(E, H), F we get Line(E, H) != Line(F, projection(A, i))
By line_containment_inequality on line_intersection(Line(B, G), altitude(projection(A, i), B, G)), F, Line(B, G) we get F != line_intersection(Line(B, G), altitude(projection(A, i), B, G))
By sas_anti_congruence on H, D, B, C, D, G we get anti_congruent_triangles(B, D, H, G, D, C)
By line_inequality on Line(F, projection(A, i)), g, projection(A, i) we get g != Line(F, projection(A, i))
By line_inequality on altitude(B, F, projection(A, i)), h, B we get h != altitude(B, F, projection(A, i))
By anti_congruence_from_anti_similar_triangles on B, D, F, G, D, E we get anti_congruent_triangles(B, D, F, G, D, E)
By line_inequality on altitude(D, midpoint(B, G), projection(A, i)), Line(B, I), D we get Line(B, I) != altitude(D, midpoint(B, G), projection(A, i))
By sas_similarity on C, A, H, G, A, B we get similar_triangles(A, B, G, A, H, C)
By not_in_line_equivalent_to_not_collinear_v0_r on A, projection(A, Line(D, G)), E we get A not in Line(E, projection(A, Line(D, G)))
By asa_anti_congruence on D, E, G, D, F, B we get anti_congruent_triangles(B, D, F, G, D, E)
By anti_congruence_from_anti_similar_triangles on D, G, E, D, B, F we get anti_congruent_triangles(B, D, F, G, D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on I, midpoint(B, G), projection(A, Line(D, G)) we get I not in Line(midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on Line(midpoint(B, G), projection(A, Line(D, G))), i, midpoint(B, G) we get i != Line(midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on Line(F, projection(A, i)), Line(D, G), projection(A, i) we get Line(D, G) != Line(F, projection(A, i))
By line_inequality on altitude(G, E, projection(A, Line(D, G))), Line(B, I), G we get Line(B, I) != altitude(G, E, projection(A, Line(D, G)))
By line_inequality on Line(E, projection(A, Line(D, G))), Line(B, I), E we get Line(B, I) != Line(E, projection(A, Line(D, G)))
By line_inequality on Line(F, projection(A, i)), Line(C, I), F we get Line(C, I) != Line(F, projection(A, i))
By line_containment_inequality on line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), A, Line(D, E) we get A != line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E))
By line_inequality on Line(midpoint(B, G), projection(A, i)), Line(B, C), projection(A, i) we get Line(B, C) != Line(midpoint(B, G), projection(A, i))
By not_in_line_equivalent_to_not_collinear_v0_r on B, projection(A, i), F we get B not in Line(F, projection(A, i))
By not_in_line_equivalent_to_not_collinear_v0_r on H, projection(A, i), F we get H not in Line(F, projection(A, i))
By line_inequality on Line(midpoint(B, G), projection(A, i)), Line(B, I), midpoint(B, G) we get Line(B, I) != Line(midpoint(B, G), projection(A, i))
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, projection(A, Line(D, G)) we get D not in Line(E, projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(Line(D, F), altitude(projection(A, i), D, F)), projection(A, Line(D, G)), Line(D, F) we get projection(A, Line(D, G)) != line_intersection(Line(D, F), altitude(projection(A, i), D, F))
By line_inequality on altitude(A, F, projection(A, i)), Line(D, F), A we get Line(D, F) != altitude(A, F, projection(A, i))
By not_in_line_equivalent_to_not_collinear_v0_r on G, projection(A, Line(D, G)), midpoint(B, G) we get G not in Line(midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(A, midpoint(B, G), projection(A, i)), Line(I, orthocenter(A, D, G)), A we get Line(I, orthocenter(A, D, G)) != altitude(A, midpoint(B, G), projection(A, i))
By line_containment_inequality on line_intersection(median(E, B, G), altitude(G, E, midpoint(B, G))), orthocenter(A, D, G), median(E, B, G) we get orthocenter(A, D, G) != line_intersection(median(E, B, G), altitude(G, E, midpoint(B, G)))
By line_containment_inequality on line_intersection(median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G))), C, median(E, B, G) we get C != line_intersection(median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G)))
By line_containment_inequality on line_intersection(median(E, B, G), altitude(G, E, midpoint(B, G))), orthocenter(A, B, D), median(E, B, G) we get orthocenter(A, B, D) != line_intersection(median(E, B, G), altitude(G, E, midpoint(B, G)))
By line_containment_inequality on line_intersection(Line(B, G), altitude(projection(A, i), B, G)), E, Line(B, G) we get E != line_intersection(Line(B, G), altitude(projection(A, i), B, G))
By line_inequality on altitude(D, midpoint(B, G), projection(A, Line(D, G))), median(E, B, G), D we get median(E, B, G) != altitude(D, midpoint(B, G), projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(median(F, B, G), altitude(B, F, midpoint(B, G))), orthocenter(A, B, D), median(F, B, G) we get orthocenter(A, B, D) != line_intersection(median(F, B, G), altitude(B, F, midpoint(B, G)))
By line_inequality on Line(E, projection(A, Line(D, G))), Line(C, D), projection(A, Line(D, G)) we get Line(C, D) != Line(E, projection(A, Line(D, G)))
By not_in_line_equivalent_to_not_collinear_v0_r on A, projection(A, Line(D, G)), midpoint(B, G) we get A not in Line(midpoint(B, G), projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), I, Line(D, E) we get I != line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E))
By line_inequality on Line(F, projection(A, i)), h, F we get h != Line(F, projection(A, i))
By not_in_line_equivalent_to_not_collinear_v0_r on D, projection(A, i), F we get D not in Line(F, projection(A, i))
By line_inequality on Line(E, projection(A, Line(D, G))), Line(I, orthocenter(A, D, G)), E we get Line(I, orthocenter(A, D, G)) != Line(E, projection(A, Line(D, G)))
By line_inequality on altitude(G, E, projection(A, Line(D, G))), Line(C, H), G we get Line(C, H) != altitude(G, E, projection(A, Line(D, G)))
By line_inequality on altitude(A, E, projection(A, Line(D, G))), Line(C, D), A we get Line(C, D) != altitude(A, E, projection(A, Line(D, G)))
By line_inequality on altitude(G, E, projection(A, Line(D, G))), median(E, B, G), G we get median(E, B, G) != altitude(G, E, projection(A, Line(D, G)))
By line_inequality on altitude(D, midpoint(B, G), projection(A, Line(D, G))), Line(B, C), D we get Line(B, C) != altitude(D, midpoint(B, G), projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(median(E, B, G), altitude(G, E, midpoint(B, G))), C, median(E, B, G) we get C != line_intersection(median(E, B, G), altitude(G, E, midpoint(B, G)))
By line_inequality on altitude(D, midpoint(B, G), projection(A, i)), Line(C, orthocenter(A, D, G)), D we get Line(C, orthocenter(A, D, G)) != altitude(D, midpoint(B, G), projection(A, i))
By line_containment_inequality on line_intersection(median(F, B, G), altitude(B, F, midpoint(B, G))), H, median(F, B, G) we get H != line_intersection(median(F, B, G), altitude(B, F, midpoint(B, G)))
By line_inequality on Line(midpoint(B, G), projection(A, i)), Line(H, orthocenter(A, B, D)), midpoint(B, G) we get Line(H, orthocenter(A, B, D)) != Line(midpoint(B, G), projection(A, i))
By line_inequality on altitude(A, F, projection(A, i)), Line(D, E), A we get Line(D, E) != altitude(A, F, projection(A, i))
By line_inequality on Line(E, projection(A, Line(D, G))), Line(C, H), E we get Line(C, H) != Line(E, projection(A, Line(D, G)))
By line_inequality on altitude(B, F, projection(A, i)), Line(C, I), B we get Line(C, I) != altitude(B, F, projection(A, i))
By line_inequality on Line(midpoint(B, G), projection(A, i)), Line(I, orthocenter(A, B, D)), midpoint(B, G) we get Line(I, orthocenter(A, B, D)) != Line(midpoint(B, G), projection(A, i))
By line_containment_inequality on line_intersection(median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G))), A, median(F, B, G) we get A != line_intersection(median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G)))
By line_inequality on altitude(G, E, projection(A, Line(D, G))), Line(D, E), G we get Line(D, E) != altitude(G, E, projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(Line(D, F), altitude(projection(A, i), D, F)), orthocenter(A, D, G), Line(D, F) we get orthocenter(A, D, G) != line_intersection(Line(D, F), altitude(projection(A, i), D, F))
By line_inequality on altitude(B, F, projection(A, i)), Line(D, F), B we get Line(D, F) != altitude(B, F, projection(A, i))
By line_inequality on altitude(A, midpoint(B, G), projection(A, i)), Line(C, orthocenter(A, D, G)), A we get Line(C, orthocenter(A, D, G)) != altitude(A, midpoint(B, G), projection(A, i))
By not_in_line_equivalent_to_not_collinear_v0_r on A, midpoint(B, G), projection(A, i) we get A not in Line(midpoint(B, G), projection(A, i))
By line_containment_inequality on line_intersection(Line(B, G), altitude(projection(A, i), B, G)), projection(A, Line(D, G)), Line(B, G) we get projection(A, Line(D, G)) != line_intersection(Line(B, G), altitude(projection(A, i), B, G))
By line_inequality on Line(F, projection(A, i)), Line(D, E), projection(A, i) we get Line(D, E) != Line(F, projection(A, i))
By line_inequality on altitude(D, midpoint(B, G), projection(A, Line(D, G))), Line(H, orthocenter(A, B, D)), D we get Line(H, orthocenter(A, B, D)) != altitude(D, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(A, F, projection(A, i)), Line(I, orthocenter(A, B, D)), A we get Line(I, orthocenter(A, B, D)) != altitude(A, F, projection(A, i))
By not_in_line_equivalent_to_not_collinear_v0_r on orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G)) we get orthocenter(A, D, G) not in Line(midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(G, E, projection(A, Line(D, G))), Line(E, F), G we get Line(E, F) != altitude(G, E, projection(A, Line(D, G)))
By line_inequality on Line(midpoint(B, G), projection(A, Line(D, G))), Line(D, G), midpoint(B, G) we get Line(D, G) != Line(midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(A, midpoint(B, G), projection(A, Line(D, G))), Line(C, H), A we get Line(C, H) != altitude(A, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on Line(E, projection(A, Line(D, G))), f, projection(A, Line(D, G)) we get f != Line(E, projection(A, Line(D, G)))
By line_inequality on altitude(A, midpoint(B, G), projection(A, Line(D, G))), Line(C, F), A we get Line(C, F) != altitude(A, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on Line(F, projection(A, i)), Line(I, orthocenter(A, B, D)), F we get Line(F, projection(A, i)) != Line(I, orthocenter(A, B, D))
By line_inequality on altitude(A, E, projection(A, Line(D, G))), Line(D, H), A we get Line(D, H) != altitude(A, E, projection(A, Line(D, G)))
By line_inequality on Line(midpoint(B, G), projection(A, i)), altitude(A, B, D), midpoint(B, G) we get altitude(A, B, D) != Line(midpoint(B, G), projection(A, i))
By line_inequality on Line(E, projection(A, Line(D, G))), i, projection(A, Line(D, G)) we get i != Line(E, projection(A, Line(D, G)))
By line_inequality on altitude(A, F, projection(A, i)), Line(D, H), A we get Line(D, H) != altitude(A, F, projection(A, i))
By line_inequality on Line(F, projection(A, i)), Line(D, H), projection(A, i) we get Line(D, H) != Line(F, projection(A, i))
By line_containment_inequality on line_intersection(median(F, B, G), altitude(B, F, midpoint(B, G))), I, median(F, B, G) we get I != line_intersection(median(F, B, G), altitude(B, F, midpoint(B, G)))
By line_inequality on altitude(D, midpoint(B, G), projection(A, i)), Line(H, orthocenter(A, B, D)), D we get Line(H, orthocenter(A, B, D)) != altitude(D, midpoint(B, G), projection(A, i))
By line_containment_inequality on line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), orthocenter(A, B, D), Line(D, E) we get orthocenter(A, B, D) != line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E))
By line_inequality on altitude(A, F, projection(A, i)), Line(E, H), A we get Line(E, H) != altitude(A, F, projection(A, i))
By line_inequality on altitude(A, E, projection(A, Line(D, G))), median(F, B, G), A we get median(F, B, G) != altitude(A, E, projection(A, Line(D, G)))
By line_inequality on Line(E, projection(A, Line(D, G))), altitude(A, B, D), E we get altitude(A, B, D) != Line(E, projection(A, Line(D, G)))
By line_inequality on altitude(D, midpoint(B, G), projection(A, i)), median(E, B, G), D we get median(E, B, G) != altitude(D, midpoint(B, G), projection(A, i))
By line_containment_inequality on line_intersection(median(E, B, G), altitude(G, E, midpoint(B, G))), G, median(E, B, G) we get G != line_intersection(median(E, B, G), altitude(G, E, midpoint(B, G)))
By line_inequality on altitude(A, midpoint(B, G), projection(A, i)), Line(B, G), A we get Line(B, G) != altitude(A, midpoint(B, G), projection(A, i))
By line_containment_inequality on line_intersection(median(F, B, G), altitude(D, F, midpoint(B, G))), orthocenter(A, B, D), median(F, B, G) we get orthocenter(A, B, D) != line_intersection(median(F, B, G), altitude(D, F, midpoint(B, G)))
By line_inequality on Line(E, projection(A, Line(D, G))), Line(D, F), E we get Line(D, F) != Line(E, projection(A, Line(D, G)))
By line_inequality on altitude(B, F, projection(A, i)), g, B we get g != altitude(B, F, projection(A, i))
By line_inequality on altitude(A, midpoint(B, G), projection(A, Line(D, G))), Line(I, orthocenter(A, B, D)), A we get Line(I, orthocenter(A, B, D)) != altitude(A, midpoint(B, G), projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G))), orthocenter(A, B, D), median(E, B, G) we get orthocenter(A, B, D) != line_intersection(median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G)))
By line_inequality on altitude(A, F, projection(A, i)), Line(B, I), A we get Line(B, I) != altitude(A, F, projection(A, i))
By line_containment_inequality on line_intersection(median(F, B, G), altitude(B, F, midpoint(B, G))), A, median(F, B, G) we get A != line_intersection(median(F, B, G), altitude(B, F, midpoint(B, G)))
By line_inequality on Line(midpoint(B, G), projection(A, Line(D, G))), g, midpoint(B, G) we get g != Line(midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(D, midpoint(B, G), projection(A, i)), altitude(A, D, G), D we get altitude(A, D, G) != altitude(D, midpoint(B, G), projection(A, i))
By line_containment_inequality on line_intersection(median(F, B, G), altitude(D, F, midpoint(B, G))), I, median(F, B, G) we get I != line_intersection(median(F, B, G), altitude(D, F, midpoint(B, G)))
By line_inequality on altitude(A, F, projection(A, i)), Line(C, D), A we get Line(C, D) != altitude(A, F, projection(A, i))
By line_inequality on altitude(A, F, projection(A, i)), Line(H, orthocenter(A, B, D)), A we get Line(H, orthocenter(A, B, D)) != altitude(A, F, projection(A, i))
By line_inequality on altitude(A, midpoint(B, G), projection(A, Line(D, G))), Line(C, I), A we get Line(C, I) != altitude(A, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(D, midpoint(B, G), projection(A, i)), f, D we get f != altitude(D, midpoint(B, G), projection(A, i))
By line_inequality on altitude(A, E, projection(A, Line(D, G))), Line(H, orthocenter(A, B, D)), A we get Line(H, orthocenter(A, B, D)) != altitude(A, E, projection(A, Line(D, G)))
By line_inequality on altitude(D, midpoint(B, G), projection(A, Line(D, G))), Line(B, G), D we get Line(B, G) != altitude(D, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on Line(midpoint(B, G), projection(A, i)), Line(G, I), midpoint(B, G) we get Line(G, I) != Line(midpoint(B, G), projection(A, i))
By line_inequality on altitude(B, F, projection(A, i)), Line(C, H), B we get Line(C, H) != altitude(B, F, projection(A, i))
By line_inequality on altitude(A, midpoint(B, G), projection(A, i)), Line(C, F), A we get Line(C, F) != altitude(A, midpoint(B, G), projection(A, i))
By line_inequality on Line(E, projection(A, Line(D, G))), Line(B, C), E we get Line(B, C) != Line(E, projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(median(E, B, G), altitude(D, E, midpoint(B, G))), B, median(E, B, G) we get B != line_intersection(median(E, B, G), altitude(D, E, midpoint(B, G)))
By line_containment_inequality on line_intersection(Line(D, F), altitude(projection(A, i), D, F)), E, Line(D, F) we get E != line_intersection(Line(D, F), altitude(projection(A, i), D, F))
By line_inequality on altitude(G, E, projection(A, Line(D, G))), Line(C, orthocenter(A, D, G)), G we get Line(C, orthocenter(A, D, G)) != altitude(G, E, projection(A, Line(D, G)))
By line_inequality on Line(midpoint(B, G), projection(A, i)), Line(C, D), projection(A, i) we get Line(C, D) != Line(midpoint(B, G), projection(A, i))
By line_inequality on altitude(A, E, projection(A, Line(D, G))), Line(D, E), A we get Line(D, E) != altitude(A, E, projection(A, Line(D, G)))
By line_inequality on altitude(D, midpoint(B, G), projection(A, i)), Line(I, orthocenter(A, B, D)), D we get Line(I, orthocenter(A, B, D)) != altitude(D, midpoint(B, G), projection(A, i))
By not_in_line_equivalent_to_not_collinear_v0_r on D, midpoint(B, G), projection(A, i) we get D not in Line(midpoint(B, G), projection(A, i))
By line_inequality on altitude(A, midpoint(B, G), projection(A, i)), median(F, B, G), A we get median(F, B, G) != altitude(A, midpoint(B, G), projection(A, i))
By line_inequality on altitude(A, F, projection(A, i)), Line(D, G), A we get Line(D, G) != altitude(A, F, projection(A, i))
By line_inequality on altitude(A, midpoint(B, G), projection(A, i)), Line(H, orthocenter(A, B, D)), A we get Line(H, orthocenter(A, B, D)) != altitude(A, midpoint(B, G), projection(A, i))
By line_inequality on Line(E, projection(A, Line(D, G))), altitude(A, D, G), E we get altitude(A, D, G) != Line(E, projection(A, Line(D, G)))
By line_inequality on altitude(B, F, projection(A, i)), Line(C, F), B we get Line(C, F) != altitude(B, F, projection(A, i))
By line_containment_inequality on line_intersection(median(F, B, G), altitude(D, F, midpoint(B, G))), B, median(F, B, G) we get B != line_intersection(median(F, B, G), altitude(D, F, midpoint(B, G)))
By line_inequality on Line(E, projection(A, Line(D, G))), Line(D, H), projection(A, Line(D, G)) we get Line(D, H) != Line(E, projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(Line(D, F), altitude(projection(A, i), D, F)), projection(A, i), Line(D, F) we get projection(A, i) != line_intersection(Line(D, F), altitude(projection(A, i), D, F))
By line_containment_inequality on line_intersection(median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G))), G, median(F, B, G) we get G != line_intersection(median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G)))
By line_inequality on altitude(A, E, projection(A, Line(D, G))), Line(I, orthocenter(A, D, G)), A we get Line(I, orthocenter(A, D, G)) != altitude(A, E, projection(A, Line(D, G)))
By line_inequality on Line(midpoint(B, G), projection(A, Line(D, G))), Line(B, C), midpoint(B, G) we get Line(B, C) != Line(midpoint(B, G), projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(median(E, B, G), altitude(G, E, midpoint(B, G))), A, median(E, B, G) we get A != line_intersection(median(E, B, G), altitude(G, E, midpoint(B, G)))
By line_inequality on altitude(A, F, projection(A, i)), Line(I, orthocenter(A, D, G)), A we get Line(I, orthocenter(A, D, G)) != altitude(A, F, projection(A, i))
By line_inequality on Line(F, projection(A, i)), Line(B, G), projection(A, i) we get Line(B, G) != Line(F, projection(A, i))
By line_inequality on altitude(D, midpoint(B, G), projection(A, Line(D, G))), Line(C, I), D we get Line(C, I) != altitude(D, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(A, F, projection(A, i)), Line(G, I), A we get Line(G, I) != altitude(A, F, projection(A, i))
By line_inequality on altitude(A, F, projection(A, i)), Line(C, H), A we get Line(C, H) != altitude(A, F, projection(A, i))
By line_inequality on altitude(A, midpoint(B, G), projection(A, Line(D, G))), Line(D, G), A we get Line(D, G) != altitude(A, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(D, midpoint(B, G), projection(A, Line(D, G))), Line(C, orthocenter(A, D, G)), D we get Line(C, orthocenter(A, D, G)) != altitude(D, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(A, E, projection(A, Line(D, G))), Line(D, G), A we get Line(D, G) != altitude(A, E, projection(A, Line(D, G)))
By line_inequality on altitude(A, E, projection(A, Line(D, G))), Line(B, C), A we get Line(B, C) != altitude(A, E, projection(A, Line(D, G)))
By line_inequality on altitude(D, midpoint(B, G), projection(A, i)), median(F, B, G), D we get median(F, B, G) != altitude(D, midpoint(B, G), projection(A, i))
By line_inequality on altitude(A, E, projection(A, Line(D, G))), Line(G, I), A we get Line(G, I) != altitude(A, E, projection(A, Line(D, G)))
By not_in_line_equivalent_to_not_collinear_v0_r on B, midpoint(B, G), projection(A, i) we get B not in Line(midpoint(B, G), projection(A, i))
By line_containment_inequality on line_intersection(median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G))), B, median(E, B, G) we get B != line_intersection(median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G)))
By line_inequality on Line(midpoint(B, G), projection(A, Line(D, G))), Line(D, H), projection(A, Line(D, G)) we get Line(D, H) != Line(midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(G, E, projection(A, Line(D, G))), h, G we get h != altitude(G, E, projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(median(E, B, G), altitude(D, E, midpoint(B, G))), D, median(E, B, G) we get D != line_intersection(median(E, B, G), altitude(D, E, midpoint(B, G)))
By line_inequality on altitude(G, E, projection(A, Line(D, G))), Line(C, I), G we get Line(C, I) != altitude(G, E, projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G))), I, median(F, B, G) we get I != line_intersection(median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G)))
By line_containment_inequality on line_intersection(Line(B, G), altitude(projection(A, i), B, G)), C, Line(B, G) we get C != line_intersection(Line(B, G), altitude(projection(A, i), B, G))
By line_inequality on altitude(D, midpoint(B, G), projection(A, i)), Line(G, I), D we get Line(G, I) != altitude(D, midpoint(B, G), projection(A, i))
By line_containment_inequality on line_intersection(median(E, B, G), altitude(G, E, midpoint(B, G))), D, median(E, B, G) we get D != line_intersection(median(E, B, G), altitude(G, E, midpoint(B, G)))
By line_inequality on altitude(D, midpoint(B, G), projection(A, i)), Line(I, orthocenter(A, D, G)), D we get Line(I, orthocenter(A, D, G)) != altitude(D, midpoint(B, G), projection(A, i))
By line_inequality on altitude(B, F, projection(A, i)), Line(H, orthocenter(A, B, D)), B we get Line(H, orthocenter(A, B, D)) != altitude(B, F, projection(A, i))
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, projection(A, Line(D, G)) we get G not in Line(E, projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(median(E, B, G), altitude(D, E, midpoint(B, G))), C, median(E, B, G) we get C != line_intersection(median(E, B, G), altitude(D, E, midpoint(B, G)))
By line_inequality on altitude(A, F, projection(A, i)), Line(C, I), A we get Line(C, I) != altitude(A, F, projection(A, i))
By line_containment_inequality on line_intersection(median(F, B, G), altitude(D, F, midpoint(B, G))), orthocenter(A, D, G), median(F, B, G) we get orthocenter(A, D, G) != line_intersection(median(F, B, G), altitude(D, F, midpoint(B, G)))
By line_containment_inequality on line_intersection(Line(B, G), altitude(projection(A, i), B, G)), A, Line(B, G) we get A != line_intersection(Line(B, G), altitude(projection(A, i), B, G))
By line_inequality on altitude(G, E, projection(A, Line(D, G))), Line(D, F), G we get Line(D, F) != altitude(G, E, projection(A, Line(D, G)))
By line_inequality on Line(midpoint(B, G), projection(A, i)), Line(C, orthocenter(A, D, G)), midpoint(B, G) we get Line(C, orthocenter(A, D, G)) != Line(midpoint(B, G), projection(A, i))
By line_inequality on altitude(D, midpoint(B, G), projection(A, i)), Line(C, F), D we get Line(C, F) != altitude(D, midpoint(B, G), projection(A, i))
By line_containment_inequality on line_intersection(median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G))), orthocenter(A, D, G), median(F, B, G) we get orthocenter(A, D, G) != line_intersection(median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G)))
By line_inequality on Line(midpoint(B, G), projection(A, i)), g, projection(A, i) we get g != Line(midpoint(B, G), projection(A, i))
By line_inequality on altitude(A, F, projection(A, i)), Line(B, C), A we get Line(B, C) != altitude(A, F, projection(A, i))
By line_inequality on Line(E, projection(A, Line(D, G))), Line(C, F), E we get Line(C, F) != Line(E, projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), I, Line(B, G) we get I != line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G))
By line_inequality on altitude(B, F, projection(A, i)), Line(D, G), B we get Line(D, G) != altitude(B, F, projection(A, i))
By line_inequality on altitude(B, F, projection(A, i)), Line(D, E), B we get Line(D, E) != altitude(B, F, projection(A, i))
By line_inequality on altitude(A, midpoint(B, G), projection(A, i)), i, A we get i != altitude(A, midpoint(B, G), projection(A, i))
By line_inequality on altitude(B, F, projection(A, i)), median(E, B, G), B we get median(E, B, G) != altitude(B, F, projection(A, i))
By line_inequality on Line(E, projection(A, Line(D, G))), Line(D, G), E we get Line(D, G) != Line(E, projection(A, Line(D, G)))
By line_inequality on Line(midpoint(B, G), projection(A, i)), altitude(A, D, G), midpoint(B, G) we get altitude(A, D, G) != Line(midpoint(B, G), projection(A, i))
By line_inequality on altitude(A, E, projection(A, Line(D, G))), Line(C, I), A we get Line(C, I) != altitude(A, E, projection(A, Line(D, G)))
By line_inequality on Line(midpoint(B, G), projection(A, Line(D, G))), altitude(A, D, G), midpoint(B, G) we get altitude(A, D, G) != Line(midpoint(B, G), projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(Line(D, F), altitude(projection(A, i), D, F)), A, Line(D, F) we get A != line_intersection(Line(D, F), altitude(projection(A, i), D, F))
By line_containment_inequality on line_intersection(Line(B, G), altitude(projection(A, i), B, G)), D, Line(B, G) we get D != line_intersection(Line(B, G), altitude(projection(A, i), B, G))
By line_inequality on altitude(B, F, projection(A, i)), altitude(A, D, G), B we get altitude(A, D, G) != altitude(B, F, projection(A, i))
By line_inequality on altitude(D, midpoint(B, G), projection(A, Line(D, G))), Line(E, H), D we get Line(E, H) != altitude(D, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on Line(E, projection(A, Line(D, G))), g, projection(A, Line(D, G)) we get g != Line(E, projection(A, Line(D, G)))
By line_inequality on altitude(A, midpoint(B, G), projection(A, i)), Line(G, I), A we get Line(G, I) != altitude(A, midpoint(B, G), projection(A, i))
By line_containment_inequality on line_intersection(median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G))), I, median(E, B, G) we get I != line_intersection(median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G)))
By line_inequality on Line(midpoint(B, G), projection(A, Line(D, G))), h, projection(A, Line(D, G)) we get h != Line(midpoint(B, G), projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G))), orthocenter(A, D, G), median(E, B, G) we get orthocenter(A, D, G) != line_intersection(median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G)))
By line_containment_inequality on line_intersection(Line(D, F), altitude(projection(A, i), D, F)), H, Line(D, F) we get H != line_intersection(Line(D, F), altitude(projection(A, i), D, F))
By line_inequality on altitude(D, midpoint(B, G), projection(A, Line(D, G))), Line(E, F), D we get Line(E, F) != altitude(D, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(A, E, projection(A, Line(D, G))), median(E, B, G), A we get median(E, B, G) != altitude(A, E, projection(A, Line(D, G)))
By line_inequality on altitude(B, F, projection(A, i)), Line(I, orthocenter(A, D, G)), B we get Line(I, orthocenter(A, D, G)) != altitude(B, F, projection(A, i))
By line_inequality on altitude(B, F, projection(A, i)), Line(E, F), B we get Line(E, F) != altitude(B, F, projection(A, i))
By line_inequality on altitude(A, E, projection(A, Line(D, G))), Line(I, orthocenter(A, B, D)), A we get Line(I, orthocenter(A, B, D)) != altitude(A, E, projection(A, Line(D, G)))
By line_inequality on altitude(G, E, projection(A, Line(D, G))), altitude(A, D, G), G we get altitude(A, D, G) != altitude(G, E, projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(Line(D, F), altitude(projection(A, i), D, F)), midpoint(B, G), Line(D, F) we get midpoint(B, G) != line_intersection(Line(D, F), altitude(projection(A, i), D, F))
By line_inequality on altitude(G, E, projection(A, Line(D, G))), Line(I, orthocenter(A, D, G)), G we get Line(I, orthocenter(A, D, G)) != altitude(G, E, projection(A, Line(D, G)))
By line_inequality on altitude(A, midpoint(B, G), projection(A, i)), Line(D, H), A we get Line(D, H) != altitude(A, midpoint(B, G), projection(A, i))
By line_inequality on Line(midpoint(B, G), projection(A, i)), i, midpoint(B, G) we get i != Line(midpoint(B, G), projection(A, i))
By line_inequality on altitude(D, midpoint(B, G), projection(A, Line(D, G))), Line(G, I), D we get Line(G, I) != altitude(D, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(A, midpoint(B, G), projection(A, i)), Line(B, C), A we get Line(B, C) != altitude(A, midpoint(B, G), projection(A, i))
By line_inequality on altitude(A, midpoint(B, G), projection(A, Line(D, G))), Line(H, orthocenter(A, B, D)), A we get Line(H, orthocenter(A, B, D)) != altitude(A, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(A, midpoint(B, G), projection(A, i)), Line(E, H), A we get Line(E, H) != altitude(A, midpoint(B, G), projection(A, i))
By line_inequality on Line(E, projection(A, Line(D, G))), Line(D, E), projection(A, Line(D, G)) we get Line(D, E) != Line(E, projection(A, Line(D, G)))
By line_inequality on altitude(A, midpoint(B, G), projection(A, i)), Line(C, D), A we get Line(C, D) != altitude(A, midpoint(B, G), projection(A, i))
By line_inequality on altitude(A, midpoint(B, G), projection(A, i)), Line(D, G), A we get Line(D, G) != altitude(A, midpoint(B, G), projection(A, i))
By line_inequality on altitude(A, E, projection(A, Line(D, G))), Line(E, F), A we get Line(E, F) != altitude(A, E, projection(A, Line(D, G)))
By line_inequality on Line(F, projection(A, i)), Line(H, orthocenter(A, B, D)), projection(A, i) we get Line(F, projection(A, i)) != Line(H, orthocenter(A, B, D))
By line_inequality on Line(F, projection(A, i)), Line(B, I), F we get Line(B, I) != Line(F, projection(A, i))
By line_inequality on altitude(G, E, projection(A, Line(D, G))), Line(D, H), G we get Line(D, H) != altitude(G, E, projection(A, Line(D, G)))
By line_inequality on altitude(B, F, projection(A, i)), Line(D, H), B we get Line(D, H) != altitude(B, F, projection(A, i))
By line_inequality on altitude(B, F, projection(A, i)), Line(G, I), B we get Line(G, I) != altitude(B, F, projection(A, i))
By line_containment_inequality on line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), D, Line(B, G) we get D != line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G))
By line_inequality on altitude(A, E, projection(A, Line(D, G))), Line(D, F), A we get Line(D, F) != altitude(A, E, projection(A, Line(D, G)))
By line_inequality on altitude(A, F, projection(A, i)), Line(C, F), A we get Line(C, F) != altitude(A, F, projection(A, i))
By line_containment_inequality on line_intersection(Line(D, F), altitude(projection(A, i), D, F)), G, Line(D, F) we get G != line_intersection(Line(D, F), altitude(projection(A, i), D, F))
By line_containment_inequality on line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), B, Line(D, E) we get B != line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E))
By line_inequality on altitude(A, midpoint(B, G), projection(A, Line(D, G))), Line(C, D), A we get Line(C, D) != altitude(A, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(G, E, projection(A, Line(D, G))), median(F, B, G), G we get median(F, B, G) != altitude(G, E, projection(A, Line(D, G)))
By line_inequality on altitude(D, midpoint(B, G), projection(A, Line(D, G))), g, D we get g != altitude(D, midpoint(B, G), projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(Line(D, F), altitude(projection(A, i), D, F)), C, Line(D, F) we get C != line_intersection(Line(D, F), altitude(projection(A, i), D, F))
By line_containment_inequality on line_intersection(median(F, B, G), altitude(B, F, midpoint(B, G))), D, median(F, B, G) we get D != line_intersection(median(F, B, G), altitude(B, F, midpoint(B, G)))
By line_inequality on Line(F, projection(A, i)), altitude(A, B, D), F we get altitude(A, B, D) != Line(F, projection(A, i))
By line_inequality on altitude(B, F, projection(A, i)), Line(C, orthocenter(A, D, G)), B we get Line(C, orthocenter(A, D, G)) != altitude(B, F, projection(A, i))
By line_inequality on altitude(A, midpoint(B, G), projection(A, i)), Line(I, orthocenter(A, B, D)), A we get Line(I, orthocenter(A, B, D)) != altitude(A, midpoint(B, G), projection(A, i))
By line_inequality on Line(midpoint(B, G), projection(A, i)), h, projection(A, i) we get h != Line(midpoint(B, G), projection(A, i))
By line_inequality on altitude(A, midpoint(B, G), projection(A, Line(D, G))), median(E, B, G), A we get median(E, B, G) != altitude(A, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(D, midpoint(B, G), projection(A, i)), Line(C, I), D we get Line(C, I) != altitude(D, midpoint(B, G), projection(A, i))
By line_inequality on altitude(A, midpoint(B, G), projection(A, Line(D, G))), Line(D, E), A we get Line(D, E) != altitude(A, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(A, midpoint(B, G), projection(A, i)), median(E, B, G), A we get median(E, B, G) != altitude(A, midpoint(B, G), projection(A, i))
By line_inequality on Line(F, projection(A, i)), Line(B, C), F we get Line(B, C) != Line(F, projection(A, i))
By line_containment_inequality on line_intersection(median(E, B, G), altitude(G, E, midpoint(B, G))), I, median(E, B, G) we get I != line_intersection(median(E, B, G), altitude(G, E, midpoint(B, G)))
By line_inequality on altitude(A, E, projection(A, Line(D, G))), Line(B, I), A we get Line(B, I) != altitude(A, E, projection(A, Line(D, G)))
By line_inequality on altitude(A, F, projection(A, i)), Line(B, G), A we get Line(B, G) != altitude(A, F, projection(A, i))
By line_inequality on altitude(D, midpoint(B, G), projection(A, Line(D, G))), Line(C, H), D we get Line(C, H) != altitude(D, midpoint(B, G), projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(Line(B, G), altitude(projection(A, i), B, G)), I, Line(B, G) we get I != line_intersection(Line(B, G), altitude(projection(A, i), B, G))
By line_inequality on Line(E, projection(A, Line(D, G))), Line(C, orthocenter(A, D, G)), E we get Line(C, orthocenter(A, D, G)) != Line(E, projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), F, Line(D, E) we get F != line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E))
By line_inequality on altitude(A, E, projection(A, Line(D, G))), Line(B, G), A we get Line(B, G) != altitude(A, E, projection(A, Line(D, G)))
By line_inequality on altitude(D, midpoint(B, G), projection(A, Line(D, G))), median(F, B, G), D we get median(F, B, G) != altitude(D, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(A, midpoint(B, G), projection(A, Line(D, G))), Line(C, orthocenter(A, D, G)), A we get Line(C, orthocenter(A, D, G)) != altitude(A, midpoint(B, G), projection(A, Line(D, G)))
By not_in_line_equivalent_to_not_collinear_v0_r on orthocenter(A, B, D), projection(A, Line(D, G)), midpoint(B, G) we get orthocenter(A, B, D) not in Line(midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(A, E, projection(A, Line(D, G))), i, A we get i != altitude(A, E, projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(Line(D, F), altitude(projection(A, i), D, F)), I, Line(D, F) we get I != line_intersection(Line(D, F), altitude(projection(A, i), D, F))
By line_inequality on altitude(A, midpoint(B, G), projection(A, Line(D, G))), Line(E, H), A we get Line(E, H) != altitude(A, midpoint(B, G), projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(median(E, B, G), altitude(G, E, midpoint(B, G))), B, median(E, B, G) we get B != line_intersection(median(E, B, G), altitude(G, E, midpoint(B, G)))
By line_inequality on altitude(A, midpoint(B, G), projection(A, Line(D, G))), Line(D, H), A we get Line(D, H) != altitude(A, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on Line(midpoint(B, G), projection(A, Line(D, G))), Line(H, orthocenter(A, B, D)), midpoint(B, G) we get Line(H, orthocenter(A, B, D)) != Line(midpoint(B, G), projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(median(F, B, G), altitude(D, F, midpoint(B, G))), H, median(F, B, G) we get H != line_intersection(median(F, B, G), altitude(D, F, midpoint(B, G)))
By line_inequality on Line(midpoint(B, G), projection(A, i)), Line(C, I), midpoint(B, G) we get Line(C, I) != Line(midpoint(B, G), projection(A, i))
By line_containment_inequality on line_intersection(median(E, B, G), altitude(D, E, midpoint(B, G))), I, median(E, B, G) we get I != line_intersection(median(E, B, G), altitude(D, E, midpoint(B, G)))
By line_inequality on Line(midpoint(B, G), projection(A, i)), Line(I, orthocenter(A, D, G)), midpoint(B, G) we get Line(I, orthocenter(A, D, G)) != Line(midpoint(B, G), projection(A, i))
By line_inequality on altitude(D, midpoint(B, G), projection(A, Line(D, G))), altitude(A, B, D), D we get altitude(A, B, D) != altitude(D, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(D, midpoint(B, G), projection(A, Line(D, G))), f, D we get f != altitude(D, midpoint(B, G), projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), projection(A, Line(D, G)), Line(D, E) we get projection(A, Line(D, G)) != line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E))
By line_inequality on altitude(A, midpoint(B, G), projection(A, Line(D, G))), Line(B, I), A we get Line(B, I) != altitude(A, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(D, midpoint(B, G), projection(A, Line(D, G))), altitude(A, D, G), D we get altitude(A, D, G) != altitude(D, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on Line(F, projection(A, i)), f, projection(A, i) we get f != Line(F, projection(A, i))
By line_containment_inequality on line_intersection(median(F, B, G), altitude(D, F, midpoint(B, G))), A, median(F, B, G) we get A != line_intersection(median(F, B, G), altitude(D, F, midpoint(B, G)))
By line_inequality on altitude(D, midpoint(B, G), projection(A, Line(D, G))), Line(C, F), D we get Line(C, F) != altitude(D, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on Line(E, projection(A, Line(D, G))), Line(C, I), E we get Line(C, I) != Line(E, projection(A, Line(D, G)))
By line_inequality on altitude(G, E, projection(A, Line(D, G))), Line(C, D), G we get Line(C, D) != altitude(G, E, projection(A, Line(D, G)))
By line_inequality on altitude(G, E, projection(A, Line(D, G))), altitude(A, B, D), G we get altitude(A, B, D) != altitude(G, E, projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), projection(A, i), Line(D, E) we get projection(A, i) != line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E))
By line_containment_inequality on line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), midpoint(B, G), Line(D, E) we get midpoint(B, G) != line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E))
By line_inequality on altitude(A, F, projection(A, i)), Line(C, orthocenter(A, D, G)), A we get Line(C, orthocenter(A, D, G)) != altitude(A, F, projection(A, i))
By line_inequality on altitude(B, F, projection(A, i)), Line(I, orthocenter(A, B, D)), B we get Line(I, orthocenter(A, B, D)) != altitude(B, F, projection(A, i))
By line_containment_inequality on line_intersection(median(E, B, G), altitude(D, E, midpoint(B, G))), A, median(E, B, G) we get A != line_intersection(median(E, B, G), altitude(D, E, midpoint(B, G)))
By line_containment_inequality on line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), G, Line(D, E) we get G != line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E))
By line_inequality on altitude(A, E, projection(A, Line(D, G))), Line(C, orthocenter(A, D, G)), A we get Line(C, orthocenter(A, D, G)) != altitude(A, E, projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(median(F, B, G), altitude(D, F, midpoint(B, G))), G, median(F, B, G) we get G != line_intersection(median(F, B, G), altitude(D, F, midpoint(B, G)))
By line_inequality on altitude(D, midpoint(B, G), projection(A, i)), Line(B, C), D we get Line(B, C) != altitude(D, midpoint(B, G), projection(A, i))
By line_inequality on altitude(A, F, projection(A, i)), i, A we get i != altitude(A, F, projection(A, i))
By line_inequality on Line(midpoint(B, G), projection(A, i)), Line(B, G), projection(A, i) we get Line(B, G) != Line(midpoint(B, G), projection(A, i))
By line_inequality on altitude(A, midpoint(B, G), projection(A, i)), Line(D, E), A we get Line(D, E) != altitude(A, midpoint(B, G), projection(A, i))
By line_containment_inequality on line_intersection(median(F, B, G), altitude(B, F, midpoint(B, G))), G, median(F, B, G) we get G != line_intersection(median(F, B, G), altitude(B, F, midpoint(B, G)))
By line_inequality on altitude(A, F, projection(A, i)), median(F, B, G), A we get median(F, B, G) != altitude(A, F, projection(A, i))
By line_containment_inequality on line_intersection(median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G))), G, median(E, B, G) we get G != line_intersection(median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G)))
By line_containment_inequality on line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), projection(A, i), Line(B, G) we get projection(A, i) != line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G))
By line_containment_inequality on line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), C, Line(D, E) we get C != line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E))
By line_inequality on altitude(D, midpoint(B, G), projection(A, i)), g, D we get g != altitude(D, midpoint(B, G), projection(A, i))
By line_inequality on Line(F, projection(A, i)), Line(D, F), projection(A, i) we get Line(D, F) != Line(F, projection(A, i))
By line_inequality on altitude(B, F, projection(A, i)), Line(E, H), B we get Line(E, H) != altitude(B, F, projection(A, i))
By perpendicular_direction_conditions_v0_r on midpoint(B, G), E, A, line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))) we get 180 == 2 * direction(midpoint(B, G), E) - 2 * direction(A, line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G)))) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(B, G), A, line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))) we get 180 == 2 * direction(F, midpoint(B, G)) - 2 * direction(A, line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G)))) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(B, G), A, line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))) we get 180 == 2 * direction(E, midpoint(B, G)) - 2 * direction(A, line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G)))) mod 360
By perpendicular_direction_conditions_v0_r on I, orthocenter(A, B, D), line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D))), midpoint(B, G) we get 180 == 2 * direction(I, orthocenter(A, B, D)) - 2 * direction(line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D))), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), A, midpoint(B, G), F we get 180 == 2 * direction(line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), A) - 2 * direction(midpoint(B, G), F) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))), midpoint(B, G), E we get 180 == 2 * direction(A, line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G)))) - 2 * direction(midpoint(B, G), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), F, line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), A we get 180 == 2 * direction(midpoint(B, G), F) - 2 * direction(line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), A) mod 360
By perpendicular_direction_conditions_v0_r on C, orthocenter(A, D, G), line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G))), E we get 180 == 2 * direction(C, orthocenter(A, D, G)) - 2 * direction(line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G))), E) mod 360
By perpendicular_direction_conditions_v0_r on E, midpoint(B, G), line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))), A we get 180 == 2 * direction(E, midpoint(B, G)) - 2 * direction(line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G))), E, C, orthocenter(A, D, G) we get 180 == 2 * direction(line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G))), E) - 2 * direction(C, orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on I, orthocenter(A, D, G), line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))), midpoint(B, G) we get 180 == 2 * direction(I, orthocenter(A, D, G)) - 2 * direction(line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))), E, midpoint(B, G) we get 180 == 2 * direction(A, line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G)))) - 2 * direction(E, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), C, line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G))), E we get 180 == 2 * direction(orthocenter(A, D, G), C) - 2 * direction(line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G))), E) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))), H, orthocenter(A, B, D) we get 180 == 2 * direction(F, line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D)))) - 2 * direction(H, orthocenter(A, B, D)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))), midpoint(B, G), I, orthocenter(A, D, G) we get 180 == 2 * direction(line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))), midpoint(B, G)) - 2 * direction(I, orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on I, orthocenter(A, D, G), midpoint(B, G), line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))) we get 180 == 2 * direction(I, orthocenter(A, D, G)) - 2 * direction(midpoint(B, G), line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G)))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), C, E, line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G))) we get 180 == 2 * direction(orthocenter(A, D, G), C) - 2 * direction(E, line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G)))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))), A, midpoint(B, G), E we get 180 == 2 * direction(line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))), A) - 2 * direction(midpoint(B, G), E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), F, A, line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))) we get 180 == 2 * direction(midpoint(B, G), F) - 2 * direction(A, line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G)))) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G))), C, orthocenter(A, D, G) we get 180 == 2 * direction(E, line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G)))) - 2 * direction(C, orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D))), orthocenter(A, B, D), I we get 180 == 2 * direction(midpoint(B, G), line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D)))) - 2 * direction(orthocenter(A, B, D), I) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))), F, orthocenter(A, B, D), H we get 180 == 2 * direction(line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))), F) - 2 * direction(orthocenter(A, B, D), H) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), F, midpoint(B, G) we get 180 == 2 * direction(A, line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G)))) - 2 * direction(F, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))), A, E, midpoint(B, G) we get 180 == 2 * direction(line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))), A) - 2 * direction(E, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))), midpoint(B, G), orthocenter(A, D, G), I we get 180 == 2 * direction(line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))), midpoint(B, G)) - 2 * direction(orthocenter(A, D, G), I) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), E, line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))), A we get 180 == 2 * direction(midpoint(B, G), E) - 2 * direction(line_intersection(median(E, B, G), altitude(A, E, midpoint(B, G))), A) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(B, G), line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), A we get 180 == 2 * direction(F, midpoint(B, G)) - 2 * direction(line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), A) mod 360
By perpendicular_direction_conditions_v0_r on H, orthocenter(A, B, D), F, line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))) we get 180 == 2 * direction(H, orthocenter(A, B, D)) - 2 * direction(F, line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D)))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), I, midpoint(B, G), line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D))) we get 180 == 2 * direction(orthocenter(A, B, D), I) - 2 * direction(midpoint(B, G), line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D)))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D))), I, orthocenter(A, B, D) we get 180 == 2 * direction(midpoint(B, G), line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D)))) - 2 * direction(I, orthocenter(A, B, D)) mod 360
By perpendicular_direction_conditions_v0_r on E, line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G))), orthocenter(A, D, G), C we get 180 == 2 * direction(E, line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G)))) - 2 * direction(orthocenter(A, D, G), C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G))), E, orthocenter(A, D, G), C we get 180 == 2 * direction(line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G))), E) - 2 * direction(orthocenter(A, D, G), C) mod 360
By perpendicular_direction_conditions_v0_r on A, line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), midpoint(B, G), F we get 180 == 2 * direction(A, line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G)))) - 2 * direction(midpoint(B, G), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))), I, orthocenter(A, D, G) we get 180 == 2 * direction(midpoint(B, G), line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G)))) - 2 * direction(I, orthocenter(A, D, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D))), midpoint(B, G), orthocenter(A, B, D), I we get 180 == 2 * direction(line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D))), midpoint(B, G)) - 2 * direction(orthocenter(A, B, D), I) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D))), midpoint(B, G), I, orthocenter(A, B, D) we get 180 == 2 * direction(line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D))), midpoint(B, G)) - 2 * direction(I, orthocenter(A, B, D)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), A, F, midpoint(B, G) we get 180 == 2 * direction(line_intersection(median(F, B, G), altitude(A, F, midpoint(B, G))), A) - 2 * direction(F, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))), F, H, orthocenter(A, B, D) we get 180 == 2 * direction(line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))), F) - 2 * direction(H, orthocenter(A, B, D)) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))), orthocenter(A, B, D), H we get 180 == 2 * direction(F, line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D)))) - 2 * direction(orthocenter(A, B, D), H) mod 360
By perpendicular_direction_conditions_v0_r on H, orthocenter(A, B, D), line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))), F we get 180 == 2 * direction(H, orthocenter(A, B, D)) - 2 * direction(line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))), F) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), H, F, line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))) we get 180 == 2 * direction(orthocenter(A, B, D), H) - 2 * direction(F, line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D)))) mod 360
By perpendicular_direction_conditions_v0_r on I, orthocenter(A, B, D), midpoint(B, G), line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D))) we get 180 == 2 * direction(I, orthocenter(A, B, D)) - 2 * direction(midpoint(B, G), line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D)))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), I, line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D))), midpoint(B, G) we get 180 == 2 * direction(orthocenter(A, B, D), I) - 2 * direction(line_intersection(Line(I, orthocenter(A, B, D)), altitude(midpoint(B, G), I, orthocenter(A, B, D))), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on C, orthocenter(A, D, G), E, line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G))) we get 180 == 2 * direction(C, orthocenter(A, D, G)) - 2 * direction(E, line_intersection(Line(C, orthocenter(A, D, G)), altitude(E, C, orthocenter(A, D, G)))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), I, line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))), midpoint(B, G) we get 180 == 2 * direction(orthocenter(A, D, G), I) - 2 * direction(line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, D, G), I, midpoint(B, G), line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))) we get 180 == 2 * direction(orthocenter(A, D, G), I) - 2 * direction(midpoint(B, G), line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G)))) mod 360
By perpendicular_direction_conditions_v0_r on orthocenter(A, B, D), H, line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))), F we get 180 == 2 * direction(orthocenter(A, B, D), H) - 2 * direction(line_intersection(Line(H, orthocenter(A, B, D)), altitude(F, H, orthocenter(A, B, D))), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G))), orthocenter(A, D, G), I we get 180 == 2 * direction(midpoint(B, G), line_intersection(Line(I, orthocenter(A, D, G)), altitude(midpoint(B, G), I, orthocenter(A, D, G)))) - 2 * direction(orthocenter(A, D, G), I) mod 360
By tangent_chord_angle_v1 on D, C, I, H we get tangent(Line(D, H), Circle(C, D, I))
By perpendicular_lines_draw_intersection on altitude(projection(A, i), A, B), altitude(projection(A, i), D, F) we get exists(line_intersection(altitude(projection(A, i), A, B), altitude(projection(A, i), D, F)))
By perpendicular_lines_draw_intersection on altitude(A, E, projection(A, Line(D, G))), Line(E, projection(A, Line(D, G))) we get exists(line_intersection(Line(E, projection(A, Line(D, G))), altitude(A, E, projection(A, Line(D, G)))))
By internal_angle_bisector_definition_v0_r on F, midpoint(B, G), E, A we get Line(A, midpoint(B, G)) == internal_angle_bisector(E, A, F)
By internal_angle_bisector_definition_v0_r on F, D, E, A we get Line(A, D) == internal_angle_bisector(E, A, F)
By perpendicular_angle_conditions_v0 on projection(midpoint(B, G), g), midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)) we get angle(projection(midpoint(B, G), g), midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E))) == orientation(midpoint(B, G), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), projection(midpoint(B, G), g)) mod 360
By anti_similar_triangle_basic_properties on H, D, E, C, D, F we get not_collinear(D, E, H), not_collinear(C, D, F), angle(H, D, E) == 0 - angle(C, D, F) mod 360, angle(D, E, H) == 0 - angle(D, F, C) mod 360, angle(E, H, D) == 0 - angle(F, C, D) mod 360, log(distance(C, D)) + log(distance(D, E)) == log(distance(D, H)) + log(distance(D, F)), log(distance(D, E)) + log(distance(C, F)) == log(distance(D, F)) + log(distance(E, H)), log(distance(C, F)) + log(distance(D, H)) == log(distance(E, H)) + log(distance(C, D))
By anti_similar_triangle_basic_properties on H, D, F, C, D, E we get not_collinear(D, F, H), not_collinear(C, D, E), angle(H, D, F) == 0 - angle(C, D, E) mod 360, angle(D, F, H) == 0 - angle(D, E, C) mod 360, angle(F, H, D) == 0 - angle(E, C, D) mod 360, log(distance(C, D)) + log(distance(D, F)) == log(distance(D, H)) + log(distance(D, E)), log(distance(D, E)) + log(distance(F, H)) == log(distance(D, F)) + log(distance(C, E)), log(distance(C, E)) + log(distance(D, H)) == log(distance(F, H)) + log(distance(C, D))
By internal_angle_bisector_definition_v0_r on F, projection(E, h), F, E we get Line(E, projection(E, h)) == internal_angle_bisector(F, E, F)
By perpendicular_lines_draw_intersection on altitude(A, midpoint(B, G), projection(A, Line(D, G))), Line(midpoint(B, G), projection(A, Line(D, G))) we get exists(line_intersection(Line(midpoint(B, G), projection(A, Line(D, G))), altitude(A, midpoint(B, G), projection(A, Line(D, G)))))
By perpendicular_angle_conditions_v0 on line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G), projection(midpoint(B, G), g) we get angle(line_intersection(Line(D, E), altitude(midpoint(B, G), D, E)), midpoint(B, G), projection(midpoint(B, G), g)) == orientation(midpoint(B, G), projection(midpoint(B, G), g), line_intersection(Line(D, E), altitude(midpoint(B, G), D, E))) mod 360
By internal_angle_bisector_definition_v0_r on E, I, F, D we get Line(D, I) == internal_angle_bisector(E, D, F)
By perpendicular_lines_draw_intersection on altitude(midpoint(B, G), A, C), altitude(projection(A, Line(D, G)), D, E) we get exists(line_intersection(altitude(midpoint(B, G), A, C), altitude(projection(A, Line(D, G)), D, E)))
By anti_similar_triangle_basic_properties on D, C, F, D, H, E we get not_collinear(C, D, F), not_collinear(D, E, H), angle(D, C, F) == 0 - angle(D, H, E) mod 360, angle(C, F, D) == 0 - angle(H, E, D) mod 360, angle(F, D, C) == 0 - angle(E, D, H) mod 360, log(distance(C, D)) + log(distance(E, H)) == log(distance(D, H)) + log(distance(C, F)), log(distance(C, F)) + log(distance(D, E)) == log(distance(E, H)) + log(distance(D, F)), log(distance(D, E)) + log(distance(C, D)) == log(distance(D, F)) + log(distance(D, H))
By internal_angle_bisector_definition_v0_r on E, A, F, D we get Line(A, D) == internal_angle_bisector(E, D, F)
By internal_angle_bisector_definition_v0_r on H, I, G, A we get Line(A, I) == internal_angle_bisector(G, A, H)
By anti_similar_triangle_basic_properties on D, A, C, D, A, H we get not_collinear(A, C, D), not_collinear(A, D, H), angle(D, A, C) == 0 - angle(D, A, H) mod 360, angle(A, C, D) == 0 - angle(A, H, D) mod 360, angle(C, D, A) == 0 - angle(H, D, A) mod 360, log(distance(A, D)) + log(distance(A, C)) == log(distance(A, D)) + log(distance(A, H)), log(distance(A, C)) + log(distance(D, H)) == log(distance(A, H)) + log(distance(C, D)), log(distance(C, D)) + log(distance(A, D)) == log(distance(D, H)) + log(distance(A, D))
By perpendicular_angle_conditions_v0 on line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E, projection(E, Line(D, G)) we get angle(line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), E, projection(E, Line(D, G))) == orientation(E, projection(E, Line(D, G)), line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G)))) mod 360
By internal_angle_bisector_definition_v0_r on H, midpoint(B, G), C, A we get Line(A, midpoint(B, G)) == internal_angle_bisector(C, A, H)
By internal_angle_bisector_definition_v0_r on H, D, G, A we get Line(A, D) == internal_angle_bisector(G, A, H)
By anti_similar_triangle_basic_properties on C, E, D, H, F, D we get not_collinear(C, D, E), not_collinear(D, F, H), angle(C, E, D) == 0 - angle(H, F, D) mod 360, angle(E, D, C) == 0 - angle(F, D, H) mod 360, angle(D, C, E) == 0 - angle(D, H, F) mod 360, log(distance(C, E)) + log(distance(D, F)) == log(distance(F, H)) + log(distance(D, E)), log(distance(D, E)) + log(distance(D, H)) == log(distance(D, F)) + log(distance(C, D)), log(distance(C, D)) + log(distance(F, H)) == log(distance(D, H)) + log(distance(C, E))
By internal_angle_bisector_definition_v0_r on F, I, E, A we get Line(A, I) == internal_angle_bisector(E, A, F)
By internal_angle_bisector_definition_v0_r on G, midpoint(B, G), H, A we get Line(A, midpoint(B, G)) == internal_angle_bisector(G, A, H)
By perpendicular_angle_conditions_v0 on line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G), projection(midpoint(B, G), f) we get angle(line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), midpoint(B, G), projection(midpoint(B, G), f)) == orientation(midpoint(B, G), projection(midpoint(B, G), f), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F))) mod 360
By anti_similar_triangle_basic_properties on A, D, C, A, D, H we get not_collinear(A, C, D), not_collinear(A, D, H), angle(A, D, C) == 0 - angle(A, D, H) mod 360, angle(D, C, A) == 0 - angle(D, H, A) mod 360, angle(C, A, D) == 0 - angle(H, A, D) mod 360, log(distance(A, D)) + log(distance(C, D)) == log(distance(A, D)) + log(distance(D, H)), log(distance(C, D)) + log(distance(A, H)) == log(distance(D, H)) + log(distance(A, C)), log(distance(A, C)) + log(distance(A, D)) == log(distance(A, H)) + log(distance(A, D))
By perpendicular_angle_conditions_v0 on projection(midpoint(B, G), Line(D, G)), midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))) we get angle(projection(midpoint(B, G), Line(D, G)), midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G)))) == orientation(midpoint(B, G), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), projection(midpoint(B, G), Line(D, G))) mod 360
By isosceles_triangle_altitude_v1 on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), B, G we get identical(perpendicular_bisector(B, G), internal_angle_bisector(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), G), perpendicular_line(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), Line(B, G)))
By perpendicular_lines_draw_intersection on altitude(A, midpoint(B, G), projection(A, i)), Line(midpoint(B, G), projection(A, i)) we get exists(line_intersection(Line(midpoint(B, G), projection(A, i)), altitude(A, midpoint(B, G), projection(A, i))))
By perpendicular_lines_draw_intersection on altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G) we get exists(line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)))
By internal_angle_bisector_definition_v0_r on C, I, H, D we get Line(D, I) == internal_angle_bisector(C, D, H)
By internal_angle_bisector_definition_v0_r on H, midpoint(B, G), C, D we get Line(D, midpoint(B, G)) == internal_angle_bisector(C, D, H)
By internal_angle_bisector_definition_v0_r on E, projection(F, h), E, F we get Line(F, projection(F, h)) == internal_angle_bisector(E, F, E)
By perpendicular_lines_draw_intersection on altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D) we get exists(line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)))
By internal_angle_bisector_definition_v0_r on C, I, H, A we get Line(A, I) == internal_angle_bisector(C, A, H)
By internal_angle_bisector_definition_v0_r on B, F, H, A we get Line(A, F) == internal_angle_bisector(B, A, H)
By perpendicular_angle_conditions_v0 on projection(midpoint(B, G), i), midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)) we get angle(projection(midpoint(B, G), i), midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i))) == orientation(midpoint(B, G), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), projection(midpoint(B, G), i)) mod 360
By internal_angle_bisector_definition_v0_r on C, D, H, A we get Line(A, D) == internal_angle_bisector(C, A, H)
By perpendicular_lines_draw_intersection on altitude(projection(A, Line(D, G)), B, G), altitude(projection(A, i), A, D) we get exists(line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)))
By anti_similar_triangle_basic_properties on H, D, C, C, D, H we get not_collinear(C, D, H), not_collinear(C, D, H), angle(H, D, C) == 0 - angle(C, D, H) mod 360, angle(D, C, H) == 0 - angle(D, H, C) mod 360, angle(C, H, D) == 0 - angle(H, C, D) mod 360, log(distance(C, D)) + log(distance(C, D)) == log(distance(D, H)) + log(distance(D, H)), log(distance(C, D)) + log(distance(C, H)) == log(distance(D, H)) + log(distance(C, H)), log(distance(C, H)) + log(distance(C, D)) == log(distance(C, H)) + log(distance(D, H))
By perpendicular_angle_conditions_v0 on projection(E, h), E, line_intersection(Line(B, G), altitude(E, B, G)) we get angle(projection(E, h), E, line_intersection(Line(B, G), altitude(E, B, G))) == orientation(E, line_intersection(Line(B, G), altitude(E, B, G)), projection(E, h)) mod 360
By isosceles_triangle_altitude_v3 on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), G, B we get identical(perpendicular_bisector(B, G), internal_angle_bisector(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), G), perpendicular_line(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), Line(B, G)))
By perpendicular_angle_conditions_v0 on line_intersection(Line(B, G), altitude(E, B, G)), E, projection(E, h) we get angle(line_intersection(Line(B, G), altitude(E, B, G)), E, projection(E, h)) == orientation(E, projection(E, h), line_intersection(Line(B, G), altitude(E, B, G))) mod 360
By internal_angle_bisector_definition_v0_r on projection(F, h), E, projection(F, h), F we get Line(E, F) == internal_angle_bisector(projection(F, h), F, projection(F, h))
By perpendicular_lines_draw_intersection on Line(F, projection(A, i)), altitude(A, F, projection(A, i)) we get exists(line_intersection(Line(F, projection(A, i)), altitude(A, F, projection(A, i))))
By perpendicular_lines_draw_intersection on altitude(B, F, projection(A, i)), Line(F, projection(A, i)) we get exists(line_intersection(Line(F, projection(A, i)), altitude(B, F, projection(A, i))))
By perpendicular_lines_draw_intersection on altitude(E, A, D), altitude(projection(A, i), B, G) we get exists(line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)))
By perpendicular_angle_conditions_v0 on line_intersection(Line(B, G), altitude(F, B, G)), F, projection(F, h) we get angle(line_intersection(Line(B, G), altitude(F, B, G)), F, projection(F, h)) == orientation(F, projection(F, h), line_intersection(Line(B, G), altitude(F, B, G))) mod 360
By isosceles_triangle_altitude_v3 on line_intersection(h, altitude(projection(A, i), A, D)), G, B we get identical(perpendicular_bisector(B, G), internal_angle_bisector(B, line_intersection(h, altitude(projection(A, i), A, D)), G), perpendicular_line(line_intersection(h, altitude(projection(A, i), A, D)), Line(B, G)))
By perpendicular_angle_conditions_v0 on line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G), projection(midpoint(B, G), Line(D, G)) we get angle(line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G))), midpoint(B, G), projection(midpoint(B, G), Line(D, G))) == orientation(midpoint(B, G), projection(midpoint(B, G), Line(D, G)), line_intersection(altitude(A, D, G), parallel_line(midpoint(B, G), Line(D, G)))) mod 360
By internal_angle_bisector_definition_v0_r on C, A, H, D we get Line(A, D) == internal_angle_bisector(C, D, H)
By perpendicular_angle_conditions_v0 on projection(F, i), F, line_intersection(altitude(A, B, D), parallel_line(F, i)) we get angle(projection(F, i), F, line_intersection(altitude(A, B, D), parallel_line(F, i))) == orientation(F, line_intersection(altitude(A, B, D), parallel_line(F, i)), projection(F, i)) mod 360
By internal_angle_bisector_definition_v0_r on E, midpoint(B, G), F, D we get Line(D, midpoint(B, G)) == internal_angle_bisector(E, D, F)
By perpendicular_angle_conditions_v0 on projection(midpoint(B, G), f), midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)) we get angle(projection(midpoint(B, G), f), midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F))) == orientation(midpoint(B, G), line_intersection(Line(D, F), altitude(midpoint(B, G), D, F)), projection(midpoint(B, G), f)) mod 360
By internal_angle_bisector_definition_v0_r on projection(E, h), F, projection(E, h), E we get Line(E, F) == internal_angle_bisector(projection(E, h), E, projection(E, h))
By perpendicular_angle_conditions_v0 on projection(F, h), F, line_intersection(Line(B, G), altitude(F, B, G)) we get angle(projection(F, h), F, line_intersection(Line(B, G), altitude(F, B, G))) == orientation(F, line_intersection(Line(B, G), altitude(F, B, G)), projection(F, h)) mod 360
By isosceles_triangle_altitude_v1 on line_intersection(h, altitude(projection(A, i), A, D)), B, G we get identical(perpendicular_bisector(B, G), internal_angle_bisector(B, line_intersection(h, altitude(projection(A, i), A, D)), G), perpendicular_line(line_intersection(h, altitude(projection(A, i), A, D)), Line(B, G)))
By perpendicular_angle_conditions_v0 on line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G), projection(midpoint(B, G), i) we get angle(line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i)), midpoint(B, G), projection(midpoint(B, G), i)) == orientation(midpoint(B, G), projection(midpoint(B, G), i), line_intersection(altitude(A, B, D), parallel_line(midpoint(B, G), i))) mod 360
By perpendicular_angle_conditions_v0 on line_intersection(altitude(A, B, D), parallel_line(F, i)), F, projection(F, i) we get angle(line_intersection(altitude(A, B, D), parallel_line(F, i)), F, projection(F, i)) == orientation(F, projection(F, i), line_intersection(altitude(A, B, D), parallel_line(F, i))) mod 360
By perpendicular_angle_conditions_v0 on projection(E, Line(D, G)), E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))) we get angle(projection(E, Line(D, G)), E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G)))) == orientation(E, line_intersection(altitude(A, D, G), parallel_line(E, Line(D, G))), projection(E, Line(D, G))) mod 360
By perpendicular_lines_draw_intersection on altitude(projection(A, Line(D, G)), D, E), altitude(projection(A, Line(D, G)), A, C) we get exists(line_intersection(altitude(projection(A, Line(D, G)), A, C), altitude(projection(A, Line(D, G)), D, E)))
By perpendicular_lines_draw_intersection on Line(midpoint(B, G), projection(A, Line(D, G))), altitude(D, midpoint(B, G), projection(A, Line(D, G))) we get exists(line_intersection(Line(midpoint(B, G), projection(A, Line(D, G))), altitude(D, midpoint(B, G), projection(A, Line(D, G)))))
By perpendicular_lines_draw_intersection on altitude(G, E, projection(A, Line(D, G))), Line(E, projection(A, Line(D, G))) we get exists(line_intersection(Line(E, projection(A, Line(D, G))), altitude(G, E, projection(A, Line(D, G)))))
By perpendicular_lines_draw_intersection on altitude(F, A, D), altitude(projection(A, i), B, G) we get exists(line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)))
By perpendicular_lines_draw_intersection on Line(midpoint(B, G), projection(A, i)), altitude(D, midpoint(B, G), projection(A, i)) we get exists(line_intersection(Line(midpoint(B, G), projection(A, i)), altitude(D, midpoint(B, G), projection(A, i))))
By perpendicular_lines_draw_intersection on altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G) we get exists(line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)))
By perpendicular_lines_draw_intersection on altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G) we get exists(line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)))
By isosceles_triangle_altitude_v3 on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), B, G we get identical(perpendicular_bisector(B, G), internal_angle_bisector(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), G), perpendicular_line(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), Line(B, G)))
By perpendicular_lines_draw_intersection on altitude(midpoint(B, G), A, B), altitude(projection(A, i), D, F) we get exists(line_intersection(altitude(midpoint(B, G), A, B), altitude(projection(A, i), D, F)))
By perpendicular_lines_draw_intersection on altitude(projection(A, i), B, G), altitude(projection(A, i), A, D) we get exists(line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)))
By isosceles_triangle_altitude_v1 on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), G, B we get identical(perpendicular_bisector(B, G), internal_angle_bisector(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), G), perpendicular_line(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), Line(B, G)))
By isosceles_triangle_altitude_v1 on line_intersection(h, altitude(projection(A, i), A, D)), G, B we get identical(perpendicular_bisector(B, G), internal_angle_bisector(B, line_intersection(h, altitude(projection(A, i), A, D)), G), perpendicular_line(line_intersection(h, altitude(projection(A, i), A, D)), Line(B, G)))
By isosceles_triangle_altitude_v3 on line_intersection(h, altitude(projection(A, i), A, D)), B, G we get identical(perpendicular_bisector(B, G), internal_angle_bisector(B, line_intersection(h, altitude(projection(A, i), A, D)), G), perpendicular_line(line_intersection(h, altitude(projection(A, i), A, D)), Line(B, G)))
By sas_anti_similarity on H, A, I, C, A, I we get anti_similar_triangles(A, C, I, A, H, I)
By sas_congruence on D, C, I, H, D, I we get congruent_triangles(C, D, I, D, H, I)
By sas_anti_congruence on H, D, G, C, D, B we get anti_congruent_triangles(B, C, D, G, H, D)
By sas_anti_similarity on C, A, B, H, A, G we get anti_similar_triangles(A, B, C, A, G, H)
By sas_anti_congruence on C, D, I, H, D, I we get anti_congruent_triangles(C, D, I, H, D, I)
By sas_anti_similarity on G, A, H, B, A, C we get anti_similar_triangles(A, B, C, A, G, H)
By sas_anti_similarity on I, A, H, I, A, C we get anti_similar_triangles(A, C, I, A, H, I)
By isosceles_triangle_properties on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), B, G we get distance(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) == distance(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), angle(B, G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) == angle(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), B, G) mod 360
By sas_anti_congruence on I, D, H, I, D, C we get anti_congruent_triangles(C, D, I, H, D, I)
By isosceles_triangle_properties on line_intersection(h, altitude(projection(A, i), A, D)), B, G we get distance(B, line_intersection(h, altitude(projection(A, i), A, D))) == distance(G, line_intersection(h, altitude(projection(A, i), A, D))), angle(B, G, line_intersection(h, altitude(projection(A, i), A, D))) == angle(line_intersection(h, altitude(projection(A, i), A, D)), B, G) mod 360
By sas_anti_congruence on H, D, I, C, D, I we get anti_congruent_triangles(C, D, I, H, D, I)
By sas_anti_similarity on C, A, I, H, A, I we get anti_similar_triangles(A, C, I, A, H, I)
By sas_anti_congruence on I, D, C, I, D, H we get anti_congruent_triangles(C, D, I, H, D, I)
By sas_anti_congruence on B, D, C, G, D, H we get anti_congruent_triangles(B, C, D, G, H, D)
By sas_anti_similarity on H, A, G, C, A, B we get anti_similar_triangles(A, B, C, A, G, H)
By sas_anti_congruence on G, D, H, B, D, C we get anti_congruent_triangles(B, C, D, G, H, D)
By sas_anti_congruence on C, D, B, H, D, G we get anti_congruent_triangles(B, C, D, G, H, D)
By sas_congruence on H, D, I, D, C, I we get congruent_triangles(C, D, I, D, H, I)
By sas_congruence on I, C, D, I, D, H we get congruent_triangles(C, D, I, D, H, I)
By isosceles_triangle_properties on line_intersection(h, altitude(projection(A, i), A, D)), G, B we get distance(B, line_intersection(h, altitude(projection(A, i), A, D))) == distance(G, line_intersection(h, altitude(projection(A, i), A, D))), angle(G, B, line_intersection(h, altitude(projection(A, i), A, D))) == angle(line_intersection(h, altitude(projection(A, i), A, D)), G, B) mod 360
By sas_congruence on I, D, H, I, C, D we get congruent_triangles(C, D, I, D, H, I)
By sas_anti_similarity on B, A, C, G, A, H we get anti_similar_triangles(A, B, C, A, G, H)
By isosceles_triangle_properties on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), G, B we get distance(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) == distance(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), angle(G, B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) == angle(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), G, B) mod 360
By sas_anti_similarity on I, A, C, I, A, H we get anti_similar_triangles(A, C, I, A, H, I)
By sas_anti_similarity on midpoint(B, G), D, F, midpoint(B, G), D, E we get anti_similar_triangles(D, E, midpoint(B, G), D, F, midpoint(B, G))
By sas_anti_similarity on I, D, E, I, D, F we get anti_similar_triangles(D, E, I, D, F, I)
By sas_anti_similarity on C, A, midpoint(B, G), H, A, midpoint(B, G) we get anti_similar_triangles(A, C, midpoint(B, G), A, H, midpoint(B, G))
By sas_anti_similarity on midpoint(B, G), A, E, midpoint(B, G), A, F we get anti_similar_triangles(A, E, midpoint(B, G), A, F, midpoint(B, G))
By sas_anti_similarity on midpoint(B, G), A, F, midpoint(B, G), A, E we get anti_similar_triangles(A, E, midpoint(B, G), A, F, midpoint(B, G))
By sas_anti_congruence on H, D, midpoint(B, G), C, D, midpoint(B, G) we get anti_congruent_triangles(C, D, midpoint(B, G), H, D, midpoint(B, G))
By sas_anti_congruence on E, D, I, F, D, I we get anti_congruent_triangles(D, E, I, D, F, I)
By sas_anti_similarity on F, D, I, E, D, I we get anti_similar_triangles(D, E, I, D, F, I)
By sas_anti_similarity on F, D, G, E, D, B we get anti_similar_triangles(B, D, E, G, D, F)
By sas_anti_similarity on E, A, I, F, A, I we get anti_similar_triangles(A, E, I, A, F, I)
By sas_anti_similarity on E, D, B, F, D, G we get anti_similar_triangles(B, D, E, G, D, F)
By sas_anti_congruence on G, D, F, B, D, E we get anti_congruent_triangles(B, D, E, G, D, F)
By sas_anti_similarity on G, D, F, B, D, E we get anti_similar_triangles(B, D, E, G, D, F)
By sas_anti_similarity on G, A, F, B, A, E we get anti_similar_triangles(A, B, E, A, G, F)
By sas_anti_similarity on E, D, midpoint(B, G), F, D, midpoint(B, G) we get anti_similar_triangles(D, E, midpoint(B, G), D, F, midpoint(B, G))
By sas_anti_similarity on F, D, midpoint(B, G), E, D, midpoint(B, G) we get anti_similar_triangles(D, E, midpoint(B, G), D, F, midpoint(B, G))
By sas_anti_similarity on E, D, I, F, D, I we get anti_similar_triangles(D, E, I, D, F, I)
By sas_anti_similarity on E, A, B, F, A, G we get anti_similar_triangles(A, B, E, A, G, F)
By sas_anti_congruence on E, D, midpoint(B, G), F, D, midpoint(B, G) we get anti_congruent_triangles(D, E, midpoint(B, G), D, F, midpoint(B, G))
By sas_anti_congruence on midpoint(B, G), D, E, midpoint(B, G), D, F we get anti_congruent_triangles(D, E, midpoint(B, G), D, F, midpoint(B, G))
By sas_anti_congruence on midpoint(B, G), D, C, midpoint(B, G), D, H we get anti_congruent_triangles(C, D, midpoint(B, G), H, D, midpoint(B, G))
By sas_anti_congruence on B, D, E, G, D, F we get anti_congruent_triangles(B, D, E, G, D, F)
By sas_anti_congruence on F, D, I, E, D, I we get anti_congruent_triangles(D, E, I, D, F, I)
By sas_anti_similarity on F, A, midpoint(B, G), E, A, midpoint(B, G) we get anti_similar_triangles(A, E, midpoint(B, G), A, F, midpoint(B, G))
By sas_anti_similarity on I, A, F, I, A, E we get anti_similar_triangles(A, E, I, A, F, I)
By sas_anti_congruence on C, D, midpoint(B, G), H, D, midpoint(B, G) we get anti_congruent_triangles(C, D, midpoint(B, G), H, D, midpoint(B, G))
By sas_anti_congruence on E, D, B, F, D, G we get anti_congruent_triangles(B, D, E, G, D, F)
By sas_anti_similarity on B, A, E, G, A, F we get anti_similar_triangles(A, B, E, A, G, F)
By sas_anti_similarity on H, A, midpoint(B, G), C, A, midpoint(B, G) we get anti_similar_triangles(A, C, midpoint(B, G), A, H, midpoint(B, G))
By sas_anti_similarity on midpoint(B, G), D, E, midpoint(B, G), D, F we get anti_similar_triangles(D, E, midpoint(B, G), D, F, midpoint(B, G))
By sas_anti_similarity on I, D, F, I, D, E we get anti_similar_triangles(D, E, I, D, F, I)
By sas_anti_similarity on F, A, G, E, A, B we get anti_similar_triangles(A, B, E, A, G, F)
By sas_anti_congruence on I, D, E, I, D, F we get anti_congruent_triangles(D, E, I, D, F, I)
By sas_anti_congruence on I, D, F, I, D, E we get anti_congruent_triangles(D, E, I, D, F, I)
By sas_anti_similarity on midpoint(B, G), A, C, midpoint(B, G), A, H we get anti_similar_triangles(A, C, midpoint(B, G), A, H, midpoint(B, G))
By sas_anti_congruence on F, D, G, E, D, B we get anti_congruent_triangles(B, D, E, G, D, F)
By sas_anti_congruence on midpoint(B, G), D, F, midpoint(B, G), D, E we get anti_congruent_triangles(D, E, midpoint(B, G), D, F, midpoint(B, G))
By sas_anti_similarity on midpoint(B, G), A, H, midpoint(B, G), A, C we get anti_similar_triangles(A, C, midpoint(B, G), A, H, midpoint(B, G))
By sas_anti_similarity on E, A, midpoint(B, G), F, A, midpoint(B, G) we get anti_similar_triangles(A, E, midpoint(B, G), A, F, midpoint(B, G))
By sas_anti_similarity on I, A, E, I, A, F we get anti_similar_triangles(A, E, I, A, F, I)
By sas_anti_congruence on midpoint(B, G), D, H, midpoint(B, G), D, C we get anti_congruent_triangles(C, D, midpoint(B, G), H, D, midpoint(B, G))
By sas_anti_similarity on F, A, I, E, A, I we get anti_similar_triangles(A, E, I, A, F, I)
By sas_anti_similarity on B, D, E, G, D, F we get anti_similar_triangles(B, D, E, G, D, F)
By sas_anti_congruence on F, D, midpoint(B, G), E, D, midpoint(B, G) we get anti_congruent_triangles(D, E, midpoint(B, G), D, F, midpoint(B, G))
By line_definition on projection(A, i), line_intersection(Line(B, G), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G) we get altitude(projection(A, i), B, G) == Line(projection(A, i), line_intersection(Line(B, G), altitude(projection(A, i), B, G)))
By concyclic_sufficient_conditions_v1 on A, H, I, G we get concyclic(A, G, H, I)
By line_definition on G, line_intersection(median(E, B, G), altitude(G, E, midpoint(B, G))), altitude(G, E, midpoint(B, G)) we get altitude(G, E, midpoint(B, G)) == Line(G, line_intersection(median(E, B, G), altitude(G, E, midpoint(B, G))))
By concyclic_sufficient_conditions_v1 on G, B, H, C we get concyclic(B, C, G, H)
By line_definition on line_intersection(Line(D, F), altitude(projection(A, i), D, F)), projection(A, i), altitude(projection(A, i), D, F) we get altitude(projection(A, i), D, F) == Line(projection(A, i), line_intersection(Line(D, F), altitude(projection(A, i), D, F)))
By line_definition on orthocenter(A, B, D), line_intersection(median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G))), altitude(orthocenter(A, B, D), F, midpoint(B, G)) we get altitude(orthocenter(A, B, D), F, midpoint(B, G)) == Line(orthocenter(A, B, D), line_intersection(median(F, B, G), altitude(orthocenter(A, B, D), F, midpoint(B, G))))
By line_definition on D, line_intersection(median(E, B, G), altitude(D, E, midpoint(B, G))), altitude(D, E, midpoint(B, G)) we get altitude(D, E, midpoint(B, G)) == Line(D, line_intersection(median(E, B, G), altitude(D, E, midpoint(B, G))))
By line_definition on line_intersection(median(F, B, G), altitude(B, F, midpoint(B, G))), B, altitude(B, F, midpoint(B, G)) we get altitude(B, F, midpoint(B, G)) == Line(B, line_intersection(median(F, B, G), altitude(B, F, midpoint(B, G))))
By perpendicular_line_definition on F, Line(E, F), h we get Line(E, F) == perpendicular_line(F, h)
By line_definition on D, line_intersection(median(F, B, G), altitude(D, F, midpoint(B, G))), altitude(D, F, midpoint(B, G)) we get altitude(D, F, midpoint(B, G)) == Line(D, line_intersection(median(F, B, G), altitude(D, F, midpoint(B, G))))
By line_definition on line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)), projection(A, Line(D, G)), altitude(projection(A, Line(D, G)), B, G) we get altitude(projection(A, Line(D, G)), B, G) == Line(projection(A, Line(D, G)), line_intersection(Line(B, G), altitude(projection(A, Line(D, G)), B, G)))
By line_definition on orthocenter(A, D, G), line_intersection(median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G))), altitude(orthocenter(A, D, G), E, midpoint(B, G)) we get altitude(orthocenter(A, D, G), E, midpoint(B, G)) == Line(orthocenter(A, D, G), line_intersection(median(E, B, G), altitude(orthocenter(A, D, G), E, midpoint(B, G))))
By perpendicular_line_definition on E, Line(E, F), h we get Line(E, F) == perpendicular_line(E, h)
By line_definition on line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), projection(A, Line(D, G)), altitude(projection(A, Line(D, G)), D, E) we get altitude(projection(A, Line(D, G)), D, E) == Line(projection(A, Line(D, G)), line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)))
By perpendicular_line_definition on line_intersection(altitude(projection(A, Line(D, G)), A, C), altitude(projection(A, Line(D, G)), D, E)), altitude(projection(A, Line(D, G)), A, C), g we get altitude(projection(A, Line(D, G)), A, C) == perpendicular_line(line_intersection(altitude(projection(A, Line(D, G)), A, C), altitude(projection(A, Line(D, G)), D, E)), g)
By perpendicular_line_definition on line_intersection(Line(F, projection(A, i)), altitude(B, F, projection(A, i))), Line(F, projection(A, i)), altitude(orthocenter(A, B, D), F, projection(A, i)) we get Line(F, projection(A, i)) == perpendicular_line(line_intersection(Line(F, projection(A, i)), altitude(B, F, projection(A, i))), altitude(orthocenter(A, B, D), F, projection(A, i)))
By perpendicular_line_definition on line_intersection(Line(F, projection(A, i)), altitude(B, F, projection(A, i))), Line(F, projection(A, i)), altitude(A, F, projection(A, i)) we get Line(F, projection(A, i)) == perpendicular_line(line_intersection(Line(F, projection(A, i)), altitude(B, F, projection(A, i))), altitude(A, F, projection(A, i)))
By perpendicular_line_definition on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), h, Line(E, F) we get h == perpendicular_line(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), Line(E, F))
By perpendicular_line_definition on line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), altitude(E, A, D) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(E, A, D))
By line_intersection_definition on midpoint(B, G), median(projection(A, Line(D, G)), B, G), h we get midpoint(B, G) == line_intersection(h, median(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on orthocenter(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), B, G), Line(B, G) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(orthocenter(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G))), Line(B, G))
By line_intersection_definition on E, Line(E, projection(A, Line(D, G))), g we get E == line_intersection(g, Line(E, projection(A, Line(D, G))))
By perpendicular_line_definition on orthocenter(B, midpoint(B, G), projection(A, i)), altitude(midpoint(B, G), B, D), i we get altitude(midpoint(B, G), B, D) == perpendicular_line(orthocenter(B, midpoint(B, G), projection(A, i)), i)
By line_intersection_definition on midpoint(B, G), h, median(projection(A, i), B, G) we get midpoint(B, G) == line_intersection(h, median(projection(A, i), B, G))
By perpendicular_line_definition on line_intersection(altitude(projection(A, Line(D, G)), A, C), altitude(projection(A, Line(D, G)), D, E)), altitude(projection(A, Line(D, G)), D, E), Line(D, E) we get altitude(projection(A, Line(D, G)), D, E) == perpendicular_line(line_intersection(altitude(projection(A, Line(D, G)), A, C), altitude(projection(A, Line(D, G)), D, E)), Line(D, E))
By perpendicular_line_definition on line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G), altitude(E, A, D) we get altitude(projection(A, i), B, G) == perpendicular_line(line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)), altitude(E, A, D))
By line_intersection_definition on F, Line(F, projection(A, i)), f we get F == line_intersection(f, Line(F, projection(A, i)))
By perpendicular_line_definition on projection(A, i), Line(F, projection(A, i)), altitude(D, F, projection(A, i)) we get Line(F, projection(A, i)) == perpendicular_line(projection(A, i), altitude(D, F, projection(A, i)))
By perpendicular_line_definition on line_intersection(altitude(midpoint(B, G), A, C), altitude(projection(A, Line(D, G)), D, E)), altitude(midpoint(B, G), A, C), altitude(midpoint(B, G), D, E) we get altitude(midpoint(B, G), A, C) == perpendicular_line(line_intersection(altitude(midpoint(B, G), A, C), altitude(projection(A, Line(D, G)), D, E)), altitude(midpoint(B, G), D, E))
By perpendicular_line_definition on I, h, Line(E, F) we get h == perpendicular_line(I, Line(E, F))
By line_intersection_definition on F, Line(F, projection(A, i)), Line(D, F) we get F == line_intersection(Line(D, F), Line(F, projection(A, i)))
By perpendicular_line_definition on line_intersection(h, altitude(projection(A, i), A, D)), h, Line(E, F) we get h == perpendicular_line(line_intersection(h, altitude(projection(A, i), A, D)), Line(E, F))
By perpendicular_line_definition on E, Line(E, projection(A, Line(D, G))), altitude(orthocenter(A, D, G), E, projection(A, Line(D, G))) we get Line(E, projection(A, Line(D, G))) == perpendicular_line(E, altitude(orthocenter(A, D, G), E, projection(A, Line(D, G))))
By perpendicular_line_definition on line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G) we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on orthocenter(G, midpoint(B, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), B, G), Line(B, G) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(orthocenter(G, midpoint(B, G), projection(A, Line(D, G))), Line(B, G))
By perpendicular_line_definition on line_intersection(altitude(projection(A, i), A, B), altitude(projection(A, i), D, F)), altitude(projection(A, i), D, F), Line(D, F) we get altitude(projection(A, i), D, F) == perpendicular_line(line_intersection(altitude(projection(A, i), A, B), altitude(projection(A, i), D, F)), Line(D, F))
By perpendicular_line_definition on line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), A, D), altitude(F, B, G) we get altitude(projection(A, i), A, D) == perpendicular_line(line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)), altitude(F, B, G))
By perpendicular_line_definition on orthocenter(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), B, G), altitude(F, A, D) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(orthocenter(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G))), altitude(F, A, D))
By perpendicular_line_definition on line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), altitude(projection(A, i), A, D) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, i), A, D))
By perpendicular_line_definition on line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, i), B, G) we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, i), B, G))
By perpendicular_line_definition on midpoint(B, G), median(projection(A, i), B, G), altitude(B, midpoint(B, G), projection(A, i)) we get median(projection(A, i), B, G) == perpendicular_line(midpoint(B, G), altitude(B, midpoint(B, G), projection(A, i)))
By perpendicular_line_definition on line_intersection(Line(F, projection(A, i)), altitude(A, F, projection(A, i))), Line(F, projection(A, i)), altitude(D, F, projection(A, i)) we get Line(F, projection(A, i)) == perpendicular_line(line_intersection(Line(F, projection(A, i)), altitude(A, F, projection(A, i))), altitude(D, F, projection(A, i)))
By perpendicular_line_definition on line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), A, D), altitude(F, B, G) we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(F, B, G))
By perpendicular_line_definition on orthocenter(F, projection(A, i), orthocenter(A, B, D)), altitude(projection(A, i), D, F), altitude(midpoint(B, G), A, B) we get altitude(projection(A, i), D, F) == perpendicular_line(orthocenter(F, projection(A, i), orthocenter(A, B, D)), altitude(midpoint(B, G), A, B))
By median_definition on C, B, G, Line(C, midpoint(B, G)) we get median(C, B, G) == Line(C, midpoint(B, G))
By perpendicular_line_definition on line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)), altitude(E, A, D), altitude(F, B, G) we get altitude(E, A, D) == perpendicular_line(line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)), altitude(F, B, G))
By perpendicular_line_definition on A, h, Line(C, H) we get h == perpendicular_line(A, Line(C, H))
By perpendicular_line_definition on line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D), h we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)), h)
By perpendicular_line_definition on line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), altitude(projection(A, Line(D, G)), A, D) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), A, D))
By perpendicular_line_definition on line_intersection(altitude(midpoint(B, G), A, C), altitude(projection(A, Line(D, G)), D, E)), altitude(projection(A, Line(D, G)), D, E), altitude(projection(A, Line(D, G)), A, C) we get altitude(projection(A, Line(D, G)), D, E) == perpendicular_line(line_intersection(altitude(midpoint(B, G), A, C), altitude(projection(A, Line(D, G)), D, E)), altitude(projection(A, Line(D, G)), A, C))
By perpendicular_line_definition on line_intersection(altitude(projection(A, i), A, B), altitude(projection(A, i), D, F)), altitude(projection(A, i), A, B), f we get altitude(projection(A, i), A, B) == perpendicular_line(line_intersection(altitude(projection(A, i), A, B), altitude(projection(A, i), D, F)), f)
By perpendicular_line_definition on orthocenter(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G))), parallel_line(midpoint(B, G), Line(D, G)), altitude(E, D, G) we get parallel_line(midpoint(B, G), Line(D, G)) == perpendicular_line(orthocenter(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G))), altitude(E, D, G))
By perpendicular_line_definition on line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G), Line(B, G) we get altitude(projection(A, i), B, G) == perpendicular_line(line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)), Line(B, G))
By line_intersection_definition on projection(A, i), Line(F, projection(A, i)), i we get projection(A, i) == line_intersection(i, Line(F, projection(A, i)))
By perpendicular_line_definition on line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), altitude(projection(A, i), A, D) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, i), A, D))
By perpendicular_line_definition on orthocenter(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G))), altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G))), median(projection(A, Line(D, G)), B, G) we get altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G))) == perpendicular_line(orthocenter(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G))), median(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), altitude(projection(A, Line(D, G)), A, D) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), A, D))
By perpendicular_line_definition on line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), A, D), altitude(projection(A, i), B, G) we get altitude(projection(A, i), A, D) == perpendicular_line(line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G))
By perpendicular_line_definition on line_intersection(altitude(projection(A, i), A, B), altitude(projection(A, i), D, F)), altitude(projection(A, i), D, F), altitude(midpoint(B, G), A, B) we get altitude(projection(A, i), D, F) == perpendicular_line(line_intersection(altitude(projection(A, i), A, B), altitude(projection(A, i), D, F)), altitude(midpoint(B, G), A, B))
By perpendicular_line_definition on orthocenter(D, F, projection(A, i)), altitude(F, B, D), parallel_line(midpoint(B, G), i) we get altitude(F, B, D) == perpendicular_line(orthocenter(D, F, projection(A, i)), parallel_line(midpoint(B, G), i))
By perpendicular_line_definition on line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, i), A, D), h we get altitude(projection(A, i), A, D) == perpendicular_line(line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)), h)
By perpendicular_line_definition on D, h, Line(C, H) we get h == perpendicular_line(D, Line(C, H))
By perpendicular_line_definition on line_intersection(median(projection(A, Line(D, G)), B, G), altitude(D, midpoint(B, G), projection(A, Line(D, G)))), median(projection(A, Line(D, G)), B, G), altitude(D, midpoint(B, G), projection(A, Line(D, G))) we get median(projection(A, Line(D, G)), B, G) == perpendicular_line(line_intersection(median(projection(A, Line(D, G)), B, G), altitude(D, midpoint(B, G), projection(A, Line(D, G)))), altitude(D, midpoint(B, G), projection(A, Line(D, G))))
By perpendicular_line_definition on line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, i), B, G), altitude(E, A, D) we get altitude(projection(A, i), B, G) == perpendicular_line(line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(E, A, D))
By perpendicular_line_definition on line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G), Line(B, G) we get altitude(projection(A, i), B, G) == perpendicular_line(line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)), Line(B, G))
By perpendicular_line_definition on orthocenter(B, midpoint(B, G), projection(A, i)), altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D) we get altitude(projection(A, i), B, G) == perpendicular_line(orthocenter(B, midpoint(B, G), projection(A, i)), altitude(projection(A, Line(D, G)), A, D))
By perpendicular_line_definition on orthocenter(D, E, projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), D, E), altitude(midpoint(B, G), A, C) we get altitude(projection(A, Line(D, G)), D, E) == perpendicular_line(orthocenter(D, E, projection(A, Line(D, G))), altitude(midpoint(B, G), A, C))
By line_intersection_definition on projection(A, Line(D, G)), altitude(A, D, G), Line(E, projection(A, Line(D, G))) we get projection(A, Line(D, G)) == line_intersection(altitude(A, D, G), Line(E, projection(A, Line(D, G))))
By perpendicular_line_definition on line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), altitude(F, A, D) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(F, A, D))
By line_intersection_definition on projection(A, i), altitude(A, B, D), Line(F, projection(A, i)) we get projection(A, i) == line_intersection(altitude(A, B, D), Line(F, projection(A, i)))
By perpendicular_line_definition on line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), Line(B, G) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)), Line(B, G))
By perpendicular_line_definition on projection(E, h), h, Line(E, F) we get h == perpendicular_line(projection(E, h), Line(E, F))
By perpendicular_line_definition on projection(A, i), median(projection(A, i), B, G), altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i)) we get median(projection(A, i), B, G) == perpendicular_line(projection(A, i), altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i)))
By perpendicular_line_definition on orthocenter(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G))), parallel_line(midpoint(B, G), Line(D, G)), altitude(A, D, G) we get parallel_line(midpoint(B, G), Line(D, G)) == perpendicular_line(orthocenter(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G))), altitude(A, D, G))
By perpendicular_line_definition on line_intersection(Line(E, projection(A, Line(D, G))), altitude(G, E, projection(A, Line(D, G)))), Line(E, projection(A, Line(D, G))), altitude(orthocenter(A, D, G), E, projection(A, Line(D, G))) we get Line(E, projection(A, Line(D, G))) == perpendicular_line(line_intersection(Line(E, projection(A, Line(D, G))), altitude(G, E, projection(A, Line(D, G)))), altitude(orthocenter(A, D, G), E, projection(A, Line(D, G))))
By perpendicular_line_definition on orthocenter(midpoint(B, G), projection(A, i), orthocenter(A, B, D)), parallel_line(midpoint(B, G), i), altitude(F, B, D) we get parallel_line(midpoint(B, G), i) == perpendicular_line(orthocenter(midpoint(B, G), projection(A, i), orthocenter(A, B, D)), altitude(F, B, D))
By line_intersection_definition on E, Line(D, E), Line(E, projection(A, Line(D, G))) we get E == line_intersection(Line(D, E), Line(E, projection(A, Line(D, G))))
By perpendicular_line_definition on line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D) we get altitude(projection(A, i), B, G) == perpendicular_line(line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)), altitude(projection(A, Line(D, G)), A, D))
By perpendicular_line_definition on line_intersection(median(projection(A, i), B, G), altitude(A, midpoint(B, G), projection(A, i))), median(projection(A, i), B, G), altitude(B, midpoint(B, G), projection(A, i)) we get median(projection(A, i), B, G) == perpendicular_line(line_intersection(median(projection(A, i), B, G), altitude(A, midpoint(B, G), projection(A, i))), altitude(B, midpoint(B, G), projection(A, i)))
By perpendicular_line_definition on line_intersection(median(projection(A, i), B, G), altitude(A, midpoint(B, G), projection(A, i))), median(projection(A, i), B, G), altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i)) we get median(projection(A, i), B, G) == perpendicular_line(line_intersection(median(projection(A, i), B, G), altitude(A, midpoint(B, G), projection(A, i))), altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i)))
By line_intersection_definition on midpoint(B, G), median(projection(A, Line(D, G)), B, G), Line(B, G) we get midpoint(B, G) == line_intersection(Line(B, G), median(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on orthocenter(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G))), parallel_line(midpoint(B, G), Line(D, G)), altitude(midpoint(B, G), D, G) we get parallel_line(midpoint(B, G), Line(D, G)) == perpendicular_line(orthocenter(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G))), altitude(midpoint(B, G), D, G))
By perpendicular_line_definition on line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, i), B, G), Line(B, G) we get altitude(projection(A, i), B, G) == perpendicular_line(line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)), Line(B, G))
By perpendicular_line_definition on projection(A, i), median(projection(A, i), B, G), altitude(B, midpoint(B, G), projection(A, i)) we get median(projection(A, i), B, G) == perpendicular_line(projection(A, i), altitude(B, midpoint(B, G), projection(A, i)))
By perpendicular_line_definition on orthocenter(G, midpoint(B, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), B, G), altitude(F, A, D) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(orthocenter(G, midpoint(B, G), projection(A, Line(D, G))), altitude(F, A, D))
By perpendicular_line_definition on line_intersection(median(projection(A, Line(D, G)), B, G), altitude(A, midpoint(B, G), projection(A, Line(D, G)))), median(projection(A, Line(D, G)), B, G), altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G))) we get median(projection(A, Line(D, G)), B, G) == perpendicular_line(line_intersection(median(projection(A, Line(D, G)), B, G), altitude(A, midpoint(B, G), projection(A, Line(D, G)))), altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G))))
By perpendicular_line_definition on line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G), altitude(F, A, D) we get altitude(projection(A, i), B, G) == perpendicular_line(line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)), altitude(F, A, D))
By perpendicular_line_definition on line_intersection(altitude(projection(A, Line(D, G)), A, C), altitude(projection(A, Line(D, G)), D, E)), altitude(projection(A, Line(D, G)), A, C), altitude(projection(A, Line(D, G)), D, E) we get altitude(projection(A, Line(D, G)), A, C) == perpendicular_line(line_intersection(altitude(projection(A, Line(D, G)), A, C), altitude(projection(A, Line(D, G)), D, E)), altitude(projection(A, Line(D, G)), D, E))
By perpendicular_line_definition on orthocenter(B, midpoint(B, G), projection(A, i)), altitude(projection(A, i), B, G), altitude(E, A, D) we get altitude(projection(A, i), B, G) == perpendicular_line(orthocenter(B, midpoint(B, G), projection(A, i)), altitude(E, A, D))
By perpendicular_line_definition on line_intersection(median(projection(A, i), B, G), altitude(D, midpoint(B, G), projection(A, i))), median(projection(A, i), B, G), altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i)) we get median(projection(A, i), B, G) == perpendicular_line(line_intersection(median(projection(A, i), B, G), altitude(D, midpoint(B, G), projection(A, i))), altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i)))
By perpendicular_line_definition on orthocenter(midpoint(B, G), projection(A, i), orthocenter(A, B, D)), altitude(projection(A, i), B, G), altitude(E, A, D) we get altitude(projection(A, i), B, G) == perpendicular_line(orthocenter(midpoint(B, G), projection(A, i), orthocenter(A, B, D)), altitude(E, A, D))
By line_intersection_definition on projection(A, i), altitude(A, B, D), median(projection(A, i), B, G) we get projection(A, i) == line_intersection(altitude(A, B, D), median(projection(A, i), B, G))
By perpendicular_line_definition on orthocenter(D, F, projection(A, i)), altitude(projection(A, i), D, F), altitude(midpoint(B, G), A, B) we get altitude(projection(A, i), D, F) == perpendicular_line(orthocenter(D, F, projection(A, i)), altitude(midpoint(B, G), A, B))
By perpendicular_line_definition on line_intersection(altitude(projection(A, i), A, B), altitude(projection(A, i), D, F)), altitude(projection(A, i), A, B), altitude(midpoint(B, G), D, F) we get altitude(projection(A, i), A, B) == perpendicular_line(line_intersection(altitude(projection(A, i), A, B), altitude(projection(A, i), D, F)), altitude(midpoint(B, G), D, F))
By perpendicular_line_definition on orthocenter(midpoint(B, G), projection(A, i), orthocenter(A, B, D)), altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D) we get altitude(projection(A, i), B, G) == perpendicular_line(orthocenter(midpoint(B, G), projection(A, i), orthocenter(A, B, D)), altitude(projection(A, Line(D, G)), A, D))
By perpendicular_line_definition on orthocenter(B, midpoint(B, G), projection(A, i)), altitude(projection(A, i), B, G), Line(B, G) we get altitude(projection(A, i), B, G) == perpendicular_line(orthocenter(B, midpoint(B, G), projection(A, i)), Line(B, G))
By perpendicular_line_definition on orthocenter(F, projection(A, i), orthocenter(A, B, D)), altitude(projection(A, i), D, F), Line(D, F) we get altitude(projection(A, i), D, F) == perpendicular_line(orthocenter(F, projection(A, i), orthocenter(A, B, D)), Line(D, F))
By perpendicular_line_definition on orthocenter(D, E, projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), D, E), Line(D, E) we get altitude(projection(A, Line(D, G)), D, E) == perpendicular_line(orthocenter(D, E, projection(A, Line(D, G))), Line(D, E))
By perpendicular_line_definition on line_intersection(median(projection(A, Line(D, G)), B, G), altitude(D, midpoint(B, G), projection(A, Line(D, G)))), median(projection(A, Line(D, G)), B, G), altitude(A, midpoint(B, G), projection(A, Line(D, G))) we get median(projection(A, Line(D, G)), B, G) == perpendicular_line(line_intersection(median(projection(A, Line(D, G)), B, G), altitude(D, midpoint(B, G), projection(A, Line(D, G)))), altitude(A, midpoint(B, G), projection(A, Line(D, G))))
By perpendicular_line_definition on line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), A, D), altitude(E, B, G) we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(E, B, G))
By perpendicular_line_definition on line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)), altitude(E, A, D), altitude(projection(A, i), B, G) we get altitude(E, A, D) == perpendicular_line(line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G))
By line_intersection_definition on projection(A, Line(D, G)), median(projection(A, Line(D, G)), B, G), altitude(A, D, G) we get projection(A, Line(D, G)) == line_intersection(altitude(A, D, G), median(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(E, A, D), altitude(E, B, G) we get altitude(E, A, D) == perpendicular_line(line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(E, B, G))
By perpendicular_line_definition on orthocenter(G, midpoint(B, G), projection(A, Line(D, G))), altitude(G, midpoint(B, G), projection(A, Line(D, G))), median(projection(A, Line(D, G)), B, G) we get altitude(G, midpoint(B, G), projection(A, Line(D, G))) == perpendicular_line(orthocenter(G, midpoint(B, G), projection(A, Line(D, G))), median(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on line_intersection(median(projection(A, Line(D, G)), B, G), altitude(A, midpoint(B, G), projection(A, Line(D, G)))), median(projection(A, Line(D, G)), B, G), altitude(G, midpoint(B, G), projection(A, Line(D, G))) we get median(projection(A, Line(D, G)), B, G) == perpendicular_line(line_intersection(median(projection(A, Line(D, G)), B, G), altitude(A, midpoint(B, G), projection(A, Line(D, G)))), altitude(G, midpoint(B, G), projection(A, Line(D, G))))
By perpendicular_line_definition on line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), Line(B, G) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)), Line(B, G))
By perpendicular_line_definition on line_intersection(Line(E, projection(A, Line(D, G))), altitude(A, E, projection(A, Line(D, G)))), Line(E, projection(A, Line(D, G))), altitude(A, E, projection(A, Line(D, G))) we get Line(E, projection(A, Line(D, G))) == perpendicular_line(line_intersection(Line(E, projection(A, Line(D, G))), altitude(A, E, projection(A, Line(D, G)))), altitude(A, E, projection(A, Line(D, G))))
By perpendicular_line_definition on line_intersection(Line(E, projection(A, Line(D, G))), altitude(A, E, projection(A, Line(D, G)))), Line(E, projection(A, Line(D, G))), altitude(D, E, projection(A, Line(D, G))) we get Line(E, projection(A, Line(D, G))) == perpendicular_line(line_intersection(Line(E, projection(A, Line(D, G))), altitude(A, E, projection(A, Line(D, G)))), altitude(D, E, projection(A, Line(D, G))))
By perpendicular_line_definition on line_intersection(Line(E, projection(A, Line(D, G))), altitude(A, E, projection(A, Line(D, G)))), altitude(A, E, projection(A, Line(D, G))), Line(E, projection(A, Line(D, G))) we get altitude(A, E, projection(A, Line(D, G))) == perpendicular_line(line_intersection(Line(E, projection(A, Line(D, G))), altitude(A, E, projection(A, Line(D, G)))), Line(E, projection(A, Line(D, G))))
By perpendicular_line_definition on line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(E, A, D), altitude(F, B, G) we get altitude(E, A, D) == perpendicular_line(line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(F, B, G))
By perpendicular_line_definition on line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)), altitude(F, A, D), altitude(F, B, G) we get altitude(F, A, D) == perpendicular_line(line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)), altitude(F, B, G))
By median_definition on H, G, B, Line(H, midpoint(B, G)) we get median(H, B, G) == Line(H, midpoint(B, G))
By perpendicular_line_definition on orthocenter(E, orthocenter(A, D, G), projection(A, Line(D, G))), parallel_line(E, Line(D, G)), altitude(midpoint(B, G), D, G) we get parallel_line(E, Line(D, G)) == perpendicular_line(orthocenter(E, orthocenter(A, D, G), projection(A, Line(D, G))), altitude(midpoint(B, G), D, G))
By perpendicular_line_definition on line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D) we get altitude(projection(A, i), B, G) == perpendicular_line(line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D))
By perpendicular_line_definition on line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G) we get altitude(F, A, D) == perpendicular_line(line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G), altitude(projection(A, i), A, D) we get altitude(projection(A, i), B, G) == perpendicular_line(line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), A, D))
By perpendicular_line_definition on projection(E, h), h, Line(C, H) we get h == perpendicular_line(projection(E, h), Line(C, H))
By perpendicular_line_definition on line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), A, D), altitude(E, B, G) we get altitude(projection(A, i), A, D) == perpendicular_line(line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)), altitude(E, B, G))
By perpendicular_line_definition on orthocenter(B, midpoint(B, G), projection(A, i)), altitude(midpoint(B, G), B, D), parallel_line(midpoint(B, G), i) we get altitude(midpoint(B, G), B, D) == perpendicular_line(orthocenter(B, midpoint(B, G), projection(A, i)), parallel_line(midpoint(B, G), i))
By perpendicular_line_definition on orthocenter(G, midpoint(B, G), projection(A, Line(D, G))), altitude(midpoint(B, G), D, G), parallel_line(midpoint(B, G), Line(D, G)) we get altitude(midpoint(B, G), D, G) == perpendicular_line(orthocenter(G, midpoint(B, G), projection(A, Line(D, G))), parallel_line(midpoint(B, G), Line(D, G)))
By perpendicular_line_definition on line_intersection(median(projection(A, Line(D, G)), B, G), altitude(D, midpoint(B, G), projection(A, Line(D, G)))), median(projection(A, Line(D, G)), B, G), altitude(G, midpoint(B, G), projection(A, Line(D, G))) we get median(projection(A, Line(D, G)), B, G) == perpendicular_line(line_intersection(median(projection(A, Line(D, G)), B, G), altitude(D, midpoint(B, G), projection(A, Line(D, G)))), altitude(G, midpoint(B, G), projection(A, Line(D, G))))
By perpendicular_line_definition on line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D) we get altitude(projection(A, i), B, G) == perpendicular_line(line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)), altitude(projection(A, Line(D, G)), A, D))
By perpendicular_line_definition on I, h, Line(C, H) we get h == perpendicular_line(I, Line(C, H))
By perpendicular_line_definition on line_intersection(altitude(midpoint(B, G), A, B), altitude(projection(A, i), D, F)), altitude(midpoint(B, G), A, B), altitude(midpoint(B, G), D, F) we get altitude(midpoint(B, G), A, B) == perpendicular_line(line_intersection(altitude(midpoint(B, G), A, B), altitude(projection(A, i), D, F)), altitude(midpoint(B, G), D, F))
By perpendicular_line_definition on orthocenter(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), B, G), altitude(E, A, D) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(orthocenter(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G))), altitude(E, A, D))
By perpendicular_line_definition on line_intersection(Line(F, projection(A, i)), altitude(B, F, projection(A, i))), Line(F, projection(A, i)), altitude(D, F, projection(A, i)) we get Line(F, projection(A, i)) == perpendicular_line(line_intersection(Line(F, projection(A, i)), altitude(B, F, projection(A, i))), altitude(D, F, projection(A, i)))
By perpendicular_line_definition on line_intersection(altitude(projection(A, i), A, B), altitude(projection(A, i), D, F)), altitude(projection(A, i), D, F), altitude(projection(A, i), A, B) we get altitude(projection(A, i), D, F) == perpendicular_line(line_intersection(altitude(projection(A, i), A, B), altitude(projection(A, i), D, F)), altitude(projection(A, i), A, B))
By perpendicular_line_definition on line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(E, A, D), h we get altitude(E, A, D) == perpendicular_line(line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)), h)
By perpendicular_line_definition on orthocenter(B, midpoint(B, G), projection(A, i)), altitude(projection(A, i), B, G), altitude(F, A, D) we get altitude(projection(A, i), B, G) == perpendicular_line(orthocenter(B, midpoint(B, G), projection(A, i)), altitude(F, A, D))
By perpendicular_line_definition on line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), altitude(F, A, D) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(F, A, D))
By perpendicular_line_definition on line_intersection(median(projection(A, Line(D, G)), B, G), altitude(A, midpoint(B, G), projection(A, Line(D, G)))), median(projection(A, Line(D, G)), B, G), altitude(A, midpoint(B, G), projection(A, Line(D, G))) we get median(projection(A, Line(D, G)), B, G) == perpendicular_line(line_intersection(median(projection(A, Line(D, G)), B, G), altitude(A, midpoint(B, G), projection(A, Line(D, G)))), altitude(A, midpoint(B, G), projection(A, Line(D, G))))
By perpendicular_line_definition on line_intersection(Line(F, projection(A, i)), altitude(A, F, projection(A, i))), Line(F, projection(A, i)), altitude(orthocenter(A, B, D), F, projection(A, i)) we get Line(F, projection(A, i)) == perpendicular_line(line_intersection(Line(F, projection(A, i)), altitude(A, F, projection(A, i))), altitude(orthocenter(A, B, D), F, projection(A, i)))
By perpendicular_line_definition on orthocenter(midpoint(B, G), projection(A, i), orthocenter(A, B, D)), altitude(projection(A, i), B, G), Line(B, G) we get altitude(projection(A, i), B, G) == perpendicular_line(orthocenter(midpoint(B, G), projection(A, i), orthocenter(A, B, D)), Line(B, G))
By perpendicular_line_definition on F, Line(F, projection(A, i)), altitude(orthocenter(A, B, D), F, projection(A, i)) we get Line(F, projection(A, i)) == perpendicular_line(F, altitude(orthocenter(A, B, D), F, projection(A, i)))
By perpendicular_line_definition on H, Line(C, H), h we get Line(C, H) == perpendicular_line(H, h)
By perpendicular_line_definition on line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G), altitude(F, A, D) we get altitude(projection(A, i), B, G) == perpendicular_line(line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)), altitude(F, A, D))
By perpendicular_line_definition on line_intersection(altitude(midpoint(B, G), A, B), altitude(projection(A, i), D, F)), altitude(midpoint(B, G), A, B), f we get altitude(midpoint(B, G), A, B) == perpendicular_line(line_intersection(altitude(midpoint(B, G), A, B), altitude(projection(A, i), D, F)), f)
By perpendicular_line_definition on line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(F, A, D), altitude(F, B, G) we get altitude(F, A, D) == perpendicular_line(line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(F, B, G))
By perpendicular_line_definition on projection(F, h), h, Line(E, F) we get h == perpendicular_line(projection(F, h), Line(E, F))
By perpendicular_line_definition on line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G) we get altitude(projection(A, i), A, D) == perpendicular_line(line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), altitude(projection(A, i), A, D) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, i), A, D))
By perpendicular_line_definition on projection(A, Line(D, G)), Line(E, projection(A, Line(D, G))), altitude(orthocenter(A, D, G), E, projection(A, Line(D, G))) we get Line(E, projection(A, Line(D, G))) == perpendicular_line(projection(A, Line(D, G)), altitude(orthocenter(A, D, G), E, projection(A, Line(D, G))))
By perpendicular_line_definition on projection(A, i), Line(F, projection(A, i)), altitude(orthocenter(A, B, D), F, projection(A, i)) we get Line(F, projection(A, i)) == perpendicular_line(projection(A, i), altitude(orthocenter(A, B, D), F, projection(A, i)))
By perpendicular_line_definition on orthocenter(F, projection(A, i), orthocenter(A, B, D)), parallel_line(F, i), altitude(midpoint(B, G), B, D) we get parallel_line(F, i) == perpendicular_line(orthocenter(F, projection(A, i), orthocenter(A, B, D)), altitude(midpoint(B, G), B, D))
By perpendicular_line_definition on line_intersection(Line(E, projection(A, Line(D, G))), altitude(G, E, projection(A, Line(D, G)))), Line(E, projection(A, Line(D, G))), altitude(A, E, projection(A, Line(D, G))) we get Line(E, projection(A, Line(D, G))) == perpendicular_line(line_intersection(Line(E, projection(A, Line(D, G))), altitude(G, E, projection(A, Line(D, G)))), altitude(A, E, projection(A, Line(D, G))))
By perpendicular_line_definition on line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D) we get altitude(projection(A, i), B, G) == perpendicular_line(line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)), altitude(projection(A, Line(D, G)), A, D))
By perpendicular_line_definition on line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)), altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G) we get altitude(F, A, D) == perpendicular_line(line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)), altitude(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on line_intersection(Line(E, projection(A, Line(D, G))), altitude(A, E, projection(A, Line(D, G)))), Line(E, projection(A, Line(D, G))), altitude(orthocenter(A, D, G), E, projection(A, Line(D, G))) we get Line(E, projection(A, Line(D, G))) == perpendicular_line(line_intersection(Line(E, projection(A, Line(D, G))), altitude(A, E, projection(A, Line(D, G)))), altitude(orthocenter(A, D, G), E, projection(A, Line(D, G))))
By perpendicular_line_definition on midpoint(B, G), median(projection(A, Line(D, G)), B, G), altitude(G, midpoint(B, G), projection(A, Line(D, G))) we get median(projection(A, Line(D, G)), B, G) == perpendicular_line(midpoint(B, G), altitude(G, midpoint(B, G), projection(A, Line(D, G))))
By perpendicular_line_definition on C, Line(C, H), h we get Line(C, H) == perpendicular_line(C, h)
By perpendicular_line_definition on orthocenter(D, E, projection(A, Line(D, G))), altitude(D, E, projection(A, Line(D, G))), Line(E, projection(A, Line(D, G))) we get altitude(D, E, projection(A, Line(D, G))) == perpendicular_line(orthocenter(D, E, projection(A, Line(D, G))), Line(E, projection(A, Line(D, G))))
By perpendicular_line_definition on line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), altitude(F, A, D) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(F, A, D))
By perpendicular_line_definition on line_intersection(altitude(midpoint(B, G), A, B), altitude(projection(A, i), D, F)), altitude(midpoint(B, G), A, B), altitude(projection(A, i), D, F) we get altitude(midpoint(B, G), A, B) == perpendicular_line(line_intersection(altitude(midpoint(B, G), A, B), altitude(projection(A, i), D, F)), altitude(projection(A, i), D, F))
By perpendicular_line_definition on orthocenter(E, orthocenter(A, D, G), projection(A, Line(D, G))), parallel_line(E, Line(D, G)), altitude(A, D, G) we get parallel_line(E, Line(D, G)) == perpendicular_line(orthocenter(E, orthocenter(A, D, G), projection(A, Line(D, G))), altitude(A, D, G))
By perpendicular_line_definition on orthocenter(G, midpoint(B, G), projection(A, Line(D, G))), altitude(midpoint(B, G), D, G), Line(D, G) we get altitude(midpoint(B, G), D, G) == perpendicular_line(orthocenter(G, midpoint(B, G), projection(A, Line(D, G))), Line(D, G))
By perpendicular_line_definition on line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G) we get altitude(projection(A, i), A, D) == perpendicular_line(line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)), altitude(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on orthocenter(D, F, projection(A, i)), altitude(D, F, projection(A, i)), Line(F, projection(A, i)) we get altitude(D, F, projection(A, i)) == perpendicular_line(orthocenter(D, F, projection(A, i)), Line(F, projection(A, i)))
By perpendicular_line_definition on orthocenter(G, midpoint(B, G), projection(A, Line(D, G))), altitude(midpoint(B, G), D, G), parallel_line(E, Line(D, G)) we get altitude(midpoint(B, G), D, G) == perpendicular_line(orthocenter(G, midpoint(B, G), projection(A, Line(D, G))), parallel_line(E, Line(D, G)))
By perpendicular_line_definition on line_intersection(median(projection(A, i), B, G), altitude(A, midpoint(B, G), projection(A, i))), altitude(A, midpoint(B, G), projection(A, i)), median(projection(A, i), B, G) we get altitude(A, midpoint(B, G), projection(A, i)) == perpendicular_line(line_intersection(median(projection(A, i), B, G), altitude(A, midpoint(B, G), projection(A, i))), median(projection(A, i), B, G))
By perpendicular_line_definition on projection(F, h), h, Line(C, H) we get h == perpendicular_line(projection(F, h), Line(C, H))
By perpendicular_line_definition on line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G), altitude(projection(A, i), A, D) we get altitude(projection(A, i), B, G) == perpendicular_line(line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), A, D))
By perpendicular_line_definition on line_intersection(altitude(midpoint(B, G), A, B), altitude(projection(A, i), D, F)), altitude(projection(A, i), D, F), altitude(projection(A, i), A, B) we get altitude(projection(A, i), D, F) == perpendicular_line(line_intersection(altitude(midpoint(B, G), A, B), altitude(projection(A, i), D, F)), altitude(projection(A, i), A, B))
By line_intersection_definition on projection(A, Line(D, G)), median(projection(A, Line(D, G)), B, G), Line(D, G) we get projection(A, Line(D, G)) == line_intersection(Line(D, G), median(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)), altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G) we get altitude(E, A, D) == perpendicular_line(line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)), altitude(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, i), A, D), altitude(F, B, G) we get altitude(projection(A, i), A, D) == perpendicular_line(line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(F, B, G))
By perpendicular_line_definition on line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)), altitude(F, A, D), h we get altitude(F, A, D) == perpendicular_line(line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)), h)
By perpendicular_line_definition on line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), A, D), h we get altitude(projection(A, i), A, D) == perpendicular_line(line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)), h)
By perpendicular_line_definition on orthocenter(F, projection(A, i), orthocenter(A, B, D)), parallel_line(F, i), altitude(A, B, D) we get parallel_line(F, i) == perpendicular_line(orthocenter(F, projection(A, i), orthocenter(A, B, D)), altitude(A, B, D))
By perpendicular_line_definition on line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), altitude(projection(A, Line(D, G)), A, D) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), A, D))
By perpendicular_line_definition on orthocenter(D, F, projection(A, i)), altitude(projection(A, i), D, F), Line(D, F) we get altitude(projection(A, i), D, F) == perpendicular_line(orthocenter(D, F, projection(A, i)), Line(D, F))
By perpendicular_line_definition on midpoint(B, G), h, Line(C, H) we get h == perpendicular_line(midpoint(B, G), Line(C, H))
By perpendicular_line_definition on line_intersection(median(projection(A, Line(D, G)), B, G), altitude(A, midpoint(B, G), projection(A, Line(D, G)))), median(projection(A, Line(D, G)), B, G), altitude(D, midpoint(B, G), projection(A, Line(D, G))) we get median(projection(A, Line(D, G)), B, G) == perpendicular_line(line_intersection(median(projection(A, Line(D, G)), B, G), altitude(A, midpoint(B, G), projection(A, Line(D, G)))), altitude(D, midpoint(B, G), projection(A, Line(D, G))))
By perpendicular_line_definition on orthocenter(D, F, projection(A, i)), altitude(projection(A, i), D, F), altitude(projection(A, i), A, B) we get altitude(projection(A, i), D, F) == perpendicular_line(orthocenter(D, F, projection(A, i)), altitude(projection(A, i), A, B))
By perpendicular_line_definition on F, Line(F, projection(A, i)), altitude(D, F, projection(A, i)) we get Line(F, projection(A, i)) == perpendicular_line(F, altitude(D, F, projection(A, i)))
By perpendicular_line_definition on line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), altitude(F, A, D) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(F, A, D))
By perpendicular_line_definition on line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), altitude(projection(A, i), A, D) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, i), A, D))
By perpendicular_line_definition on orthocenter(E, orthocenter(A, D, G), projection(A, Line(D, G))), parallel_line(E, Line(D, G)), altitude(E, D, G) we get parallel_line(E, Line(D, G)) == perpendicular_line(orthocenter(E, orthocenter(A, D, G), projection(A, Line(D, G))), altitude(E, D, G))
By perpendicular_line_definition on orthocenter(midpoint(B, G), projection(A, i), orthocenter(A, B, D)), altitude(projection(A, i), B, G), altitude(projection(A, i), A, D) we get altitude(projection(A, i), B, G) == perpendicular_line(orthocenter(midpoint(B, G), projection(A, i), orthocenter(A, B, D)), altitude(projection(A, i), A, D))
By perpendicular_line_definition on line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, i), B, G) we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, i), B, G))
By line_intersection_definition on midpoint(B, G), Line(B, G), median(projection(A, i), B, G) we get midpoint(B, G) == line_intersection(Line(B, G), median(projection(A, i), B, G))
By perpendicular_line_definition on line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G) we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on line_intersection(altitude(projection(A, Line(D, G)), A, C), altitude(projection(A, Line(D, G)), D, E)), altitude(projection(A, Line(D, G)), A, C), altitude(midpoint(B, G), D, E) we get altitude(projection(A, Line(D, G)), A, C) == perpendicular_line(line_intersection(altitude(projection(A, Line(D, G)), A, C), altitude(projection(A, Line(D, G)), D, E)), altitude(midpoint(B, G), D, E))
By perpendicular_line_definition on line_intersection(altitude(projection(A, i), A, B), altitude(projection(A, i), D, F)), altitude(projection(A, i), A, B), altitude(projection(A, i), D, F) we get altitude(projection(A, i), A, B) == perpendicular_line(line_intersection(altitude(projection(A, i), A, B), altitude(projection(A, i), D, F)), altitude(projection(A, i), D, F))
By perpendicular_line_definition on orthocenter(D, F, projection(A, i)), altitude(F, B, D), parallel_line(F, i) we get altitude(F, B, D) == perpendicular_line(orthocenter(D, F, projection(A, i)), parallel_line(F, i))
By perpendicular_line_definition on line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, i), B, G), altitude(F, A, D) we get altitude(projection(A, i), B, G) == perpendicular_line(line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(F, A, D))
By perpendicular_line_definition on line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G), altitude(E, A, D) we get altitude(projection(A, i), B, G) == perpendicular_line(line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)), altitude(E, A, D))
By perpendicular_line_definition on A, h, Line(E, F) we get h == perpendicular_line(A, Line(E, F))
By perpendicular_line_definition on line_intersection(median(projection(A, Line(D, G)), B, G), altitude(D, midpoint(B, G), projection(A, Line(D, G)))), altitude(D, midpoint(B, G), projection(A, Line(D, G))), median(projection(A, Line(D, G)), B, G) we get altitude(D, midpoint(B, G), projection(A, Line(D, G))) == perpendicular_line(line_intersection(median(projection(A, Line(D, G)), B, G), altitude(D, midpoint(B, G), projection(A, Line(D, G)))), median(projection(A, Line(D, G)), B, G))
By line_intersection_definition on projection(A, i), median(projection(A, i), B, G), i we get projection(A, i) == line_intersection(i, median(projection(A, i), B, G))
By perpendicular_line_definition on midpoint(B, G), h, Line(E, F) we get h == perpendicular_line(midpoint(B, G), Line(E, F))
By perpendicular_line_definition on line_intersection(Line(F, projection(A, i)), altitude(B, F, projection(A, i))), Line(F, projection(A, i)), altitude(B, F, projection(A, i)) we get Line(F, projection(A, i)) == perpendicular_line(line_intersection(Line(F, projection(A, i)), altitude(B, F, projection(A, i))), altitude(B, F, projection(A, i)))
By perpendicular_line_definition on line_intersection(altitude(midpoint(B, G), A, C), altitude(projection(A, Line(D, G)), D, E)), altitude(projection(A, Line(D, G)), D, E), altitude(midpoint(B, G), A, C) we get altitude(projection(A, Line(D, G)), D, E) == perpendicular_line(line_intersection(altitude(midpoint(B, G), A, C), altitude(projection(A, Line(D, G)), D, E)), altitude(midpoint(B, G), A, C))
By perpendicular_line_definition on line_intersection(median(projection(A, i), B, G), altitude(D, midpoint(B, G), projection(A, i))), altitude(D, midpoint(B, G), projection(A, i)), median(projection(A, i), B, G) we get altitude(D, midpoint(B, G), projection(A, i)) == perpendicular_line(line_intersection(median(projection(A, i), B, G), altitude(D, midpoint(B, G), projection(A, i))), median(projection(A, i), B, G))
By perpendicular_line_definition on line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, i), A, D), altitude(projection(A, i), B, G) we get altitude(projection(A, i), A, D) == perpendicular_line(line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, i), B, G))
By perpendicular_line_definition on line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)), altitude(E, A, D), h we get altitude(E, A, D) == perpendicular_line(line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)), h)
By perpendicular_line_definition on line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(E, A, D), altitude(projection(A, i), B, G) we get altitude(E, A, D) == perpendicular_line(line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, i), B, G))
By perpendicular_line_definition on line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G) we get altitude(E, A, D) == perpendicular_line(line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on orthocenter(midpoint(B, G), projection(A, i), orthocenter(A, B, D)), parallel_line(midpoint(B, G), i), altitude(A, B, D) we get parallel_line(midpoint(B, G), i) == perpendicular_line(orthocenter(midpoint(B, G), projection(A, i), orthocenter(A, B, D)), altitude(A, B, D))
By perpendicular_line_definition on orthocenter(B, midpoint(B, G), projection(A, i)), altitude(B, midpoint(B, G), projection(A, i)), median(projection(A, i), B, G) we get altitude(B, midpoint(B, G), projection(A, i)) == perpendicular_line(orthocenter(B, midpoint(B, G), projection(A, i)), median(projection(A, i), B, G))
By perpendicular_line_definition on line_intersection(Line(E, projection(A, Line(D, G))), altitude(G, E, projection(A, Line(D, G)))), Line(E, projection(A, Line(D, G))), altitude(D, E, projection(A, Line(D, G))) we get Line(E, projection(A, Line(D, G))) == perpendicular_line(line_intersection(Line(E, projection(A, Line(D, G))), altitude(G, E, projection(A, Line(D, G)))), altitude(D, E, projection(A, Line(D, G))))
By perpendicular_line_definition on line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), altitude(E, A, D) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(E, A, D))
By perpendicular_line_definition on orthocenter(F, projection(A, i), orthocenter(A, B, D)), altitude(projection(A, i), D, F), altitude(projection(A, i), A, B) we get altitude(projection(A, i), D, F) == perpendicular_line(orthocenter(F, projection(A, i), orthocenter(A, B, D)), altitude(projection(A, i), A, B))
By perpendicular_line_definition on orthocenter(D, E, projection(A, Line(D, G))), altitude(E, D, G), parallel_line(midpoint(B, G), Line(D, G)) we get altitude(E, D, G) == perpendicular_line(orthocenter(D, E, projection(A, Line(D, G))), parallel_line(midpoint(B, G), Line(D, G)))
By perpendicular_line_definition on line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D), altitude(E, B, G) we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(E, B, G))
By perpendicular_line_definition on orthocenter(F, projection(A, i), orthocenter(A, B, D)), parallel_line(F, i), altitude(F, B, D) we get parallel_line(F, i) == perpendicular_line(orthocenter(F, projection(A, i), orthocenter(A, B, D)), altitude(F, B, D))
By perpendicular_line_definition on line_intersection(altitude(midpoint(B, G), A, C), altitude(projection(A, Line(D, G)), D, E)), altitude(projection(A, Line(D, G)), D, E), Line(D, E) we get altitude(projection(A, Line(D, G)), D, E) == perpendicular_line(line_intersection(altitude(midpoint(B, G), A, C), altitude(projection(A, Line(D, G)), D, E)), Line(D, E))
By perpendicular_line_definition on line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), Line(B, G) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)), Line(B, G))
By perpendicular_line_definition on orthocenter(E, orthocenter(A, D, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), D, E), altitude(projection(A, Line(D, G)), A, C) we get altitude(projection(A, Line(D, G)), D, E) == perpendicular_line(orthocenter(E, orthocenter(A, D, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), A, C))
By perpendicular_line_definition on midpoint(B, G), median(projection(A, Line(D, G)), B, G), altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G))) we get median(projection(A, Line(D, G)), B, G) == perpendicular_line(midpoint(B, G), altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G))))
By perpendicular_line_definition on line_intersection(median(projection(A, Line(D, G)), B, G), altitude(D, midpoint(B, G), projection(A, Line(D, G)))), median(projection(A, Line(D, G)), B, G), altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G))) we get median(projection(A, Line(D, G)), B, G) == perpendicular_line(line_intersection(median(projection(A, Line(D, G)), B, G), altitude(D, midpoint(B, G), projection(A, Line(D, G)))), altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G))))
By perpendicular_line_definition on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), h, Line(C, H) we get h == perpendicular_line(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), Line(C, H))
By perpendicular_line_definition on line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), altitude(E, A, D) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(E, A, D))
By perpendicular_line_definition on orthocenter(D, F, projection(A, i)), altitude(F, B, D), i we get altitude(F, B, D) == perpendicular_line(orthocenter(D, F, projection(A, i)), i)
By perpendicular_line_definition on line_intersection(altitude(midpoint(B, G), A, C), altitude(projection(A, Line(D, G)), D, E)), altitude(midpoint(B, G), A, C), altitude(projection(A, Line(D, G)), D, E) we get altitude(midpoint(B, G), A, C) == perpendicular_line(line_intersection(altitude(midpoint(B, G), A, C), altitude(projection(A, Line(D, G)), D, E)), altitude(projection(A, Line(D, G)), D, E))
By perpendicular_line_definition on line_intersection(Line(F, projection(A, i)), altitude(A, F, projection(A, i))), Line(F, projection(A, i)), altitude(A, F, projection(A, i)) we get Line(F, projection(A, i)) == perpendicular_line(line_intersection(Line(F, projection(A, i)), altitude(A, F, projection(A, i))), altitude(A, F, projection(A, i)))
By perpendicular_line_definition on orthocenter(E, orthocenter(A, D, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), D, E), Line(D, E) we get altitude(projection(A, Line(D, G)), D, E) == perpendicular_line(orthocenter(E, orthocenter(A, D, G), projection(A, Line(D, G))), Line(D, E))
By perpendicular_line_definition on line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(F, A, D), h we get altitude(F, A, D) == perpendicular_line(line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)), h)
By perpendicular_line_definition on projection(A, Line(D, G)), Line(E, projection(A, Line(D, G))), altitude(D, E, projection(A, Line(D, G))) we get Line(E, projection(A, Line(D, G))) == perpendicular_line(projection(A, Line(D, G)), altitude(D, E, projection(A, Line(D, G))))
By perpendicular_line_definition on line_intersection(Line(E, projection(A, Line(D, G))), altitude(G, E, projection(A, Line(D, G)))), altitude(G, E, projection(A, Line(D, G))), Line(E, projection(A, Line(D, G))) we get altitude(G, E, projection(A, Line(D, G))) == perpendicular_line(line_intersection(Line(E, projection(A, Line(D, G))), altitude(G, E, projection(A, Line(D, G)))), Line(E, projection(A, Line(D, G))))
By perpendicular_line_definition on line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(F, A, D), altitude(projection(A, i), B, G) we get altitude(F, A, D) == perpendicular_line(line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, i), B, G))
By perpendicular_line_definition on projection(A, Line(D, G)), median(projection(A, Line(D, G)), B, G), altitude(G, midpoint(B, G), projection(A, Line(D, G))) we get median(projection(A, Line(D, G)), B, G) == perpendicular_line(projection(A, Line(D, G)), altitude(G, midpoint(B, G), projection(A, Line(D, G))))
By perpendicular_line_definition on line_intersection(Line(E, projection(A, Line(D, G))), altitude(A, E, projection(A, Line(D, G)))), Line(E, projection(A, Line(D, G))), altitude(G, E, projection(A, Line(D, G))) we get Line(E, projection(A, Line(D, G))) == perpendicular_line(line_intersection(Line(E, projection(A, Line(D, G))), altitude(A, E, projection(A, Line(D, G)))), altitude(G, E, projection(A, Line(D, G))))
By perpendicular_line_definition on line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), Line(B, G) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)), Line(B, G))
By line_intersection_definition on projection(A, Line(D, G)), Line(D, G), Line(E, projection(A, Line(D, G))) we get projection(A, Line(D, G)) == line_intersection(Line(D, G), Line(E, projection(A, Line(D, G))))
By perpendicular_line_definition on line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(F, A, D), altitude(E, B, G) we get altitude(F, A, D) == perpendicular_line(line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(E, B, G))
By perpendicular_line_definition on midpoint(B, G), median(projection(A, i), B, G), altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i)) we get median(projection(A, i), B, G) == perpendicular_line(midpoint(B, G), altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i)))
By perpendicular_line_definition on line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D), altitude(F, B, G) we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(F, B, G))
By perpendicular_line_definition on line_intersection(altitude(projection(A, Line(D, G)), A, C), altitude(projection(A, Line(D, G)), D, E)), altitude(projection(A, Line(D, G)), D, E), altitude(midpoint(B, G), A, C) we get altitude(projection(A, Line(D, G)), D, E) == perpendicular_line(line_intersection(altitude(projection(A, Line(D, G)), A, C), altitude(projection(A, Line(D, G)), D, E)), altitude(midpoint(B, G), A, C))
By perpendicular_line_definition on line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G), altitude(E, A, D) we get altitude(projection(A, i), B, G) == perpendicular_line(line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)), altitude(E, A, D))
By perpendicular_line_definition on line_intersection(median(projection(A, i), B, G), altitude(A, midpoint(B, G), projection(A, i))), median(projection(A, i), B, G), altitude(A, midpoint(B, G), projection(A, i)) we get median(projection(A, i), B, G) == perpendicular_line(line_intersection(median(projection(A, i), B, G), altitude(A, midpoint(B, G), projection(A, i))), altitude(A, midpoint(B, G), projection(A, i)))
By perpendicular_line_definition on orthocenter(E, orthocenter(A, D, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), D, E), altitude(midpoint(B, G), A, C) we get altitude(projection(A, Line(D, G)), D, E) == perpendicular_line(orthocenter(E, orthocenter(A, D, G), projection(A, Line(D, G))), altitude(midpoint(B, G), A, C))
By perpendicular_line_definition on line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G), Line(B, G) we get altitude(projection(A, i), B, G) == perpendicular_line(line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)), Line(B, G))
By perpendicular_line_definition on line_intersection(altitude(midpoint(B, G), A, B), altitude(projection(A, i), D, F)), altitude(projection(A, i), D, F), altitude(midpoint(B, G), A, B) we get altitude(projection(A, i), D, F) == perpendicular_line(line_intersection(altitude(midpoint(B, G), A, B), altitude(projection(A, i), D, F)), altitude(midpoint(B, G), A, B))
By perpendicular_line_definition on line_intersection(Line(F, projection(A, i)), altitude(A, F, projection(A, i))), altitude(A, F, projection(A, i)), Line(F, projection(A, i)) we get altitude(A, F, projection(A, i)) == perpendicular_line(line_intersection(Line(F, projection(A, i)), altitude(A, F, projection(A, i))), Line(F, projection(A, i)))
By perpendicular_line_definition on line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, i), A, D), altitude(E, B, G) we get altitude(projection(A, i), A, D) == perpendicular_line(line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(E, B, G))
By perpendicular_line_definition on E, Line(E, projection(A, Line(D, G))), altitude(D, E, projection(A, Line(D, G))) we get Line(E, projection(A, Line(D, G))) == perpendicular_line(E, altitude(D, E, projection(A, Line(D, G))))
By perpendicular_line_definition on line_intersection(h, altitude(projection(A, i), A, D)), h, Line(C, H) we get h == perpendicular_line(line_intersection(h, altitude(projection(A, i), A, D)), Line(C, H))
By perpendicular_line_definition on line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)), altitude(F, A, D), altitude(projection(A, i), B, G) we get altitude(F, A, D) == perpendicular_line(line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G))
By perpendicular_line_definition on orthocenter(B, midpoint(B, G), projection(A, i)), altitude(midpoint(B, G), B, D), parallel_line(F, i) we get altitude(midpoint(B, G), B, D) == perpendicular_line(orthocenter(B, midpoint(B, G), projection(A, i)), parallel_line(F, i))
By perpendicular_line_definition on orthocenter(F, projection(A, i), orthocenter(A, B, D)), altitude(orthocenter(A, B, D), F, projection(A, i)), Line(F, projection(A, i)) we get altitude(orthocenter(A, B, D), F, projection(A, i)) == perpendicular_line(orthocenter(F, projection(A, i), orthocenter(A, B, D)), Line(F, projection(A, i)))
By perpendicular_line_definition on line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)), altitude(F, A, D), altitude(E, B, G) we get altitude(F, A, D) == perpendicular_line(line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)), altitude(E, B, G))
By perpendicular_line_definition on orthocenter(E, orthocenter(A, D, G), projection(A, Line(D, G))), altitude(orthocenter(A, D, G), E, projection(A, Line(D, G))), Line(E, projection(A, Line(D, G))) we get altitude(orthocenter(A, D, G), E, projection(A, Line(D, G))) == perpendicular_line(orthocenter(E, orthocenter(A, D, G), projection(A, Line(D, G))), Line(E, projection(A, Line(D, G))))
By perpendicular_line_definition on orthocenter(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), B, G), altitude(projection(A, Line(D, G)), A, D) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(orthocenter(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), A, D))
By perpendicular_line_definition on orthocenter(midpoint(B, G), projection(A, i), orthocenter(A, B, D)), parallel_line(midpoint(B, G), i), altitude(midpoint(B, G), B, D) we get parallel_line(midpoint(B, G), i) == perpendicular_line(orthocenter(midpoint(B, G), projection(A, i), orthocenter(A, B, D)), altitude(midpoint(B, G), B, D))
By perpendicular_line_definition on line_intersection(median(projection(A, Line(D, G)), B, G), altitude(A, midpoint(B, G), projection(A, Line(D, G)))), altitude(A, midpoint(B, G), projection(A, Line(D, G))), median(projection(A, Line(D, G)), B, G) we get altitude(A, midpoint(B, G), projection(A, Line(D, G))) == perpendicular_line(line_intersection(median(projection(A, Line(D, G)), B, G), altitude(A, midpoint(B, G), projection(A, Line(D, G)))), median(projection(A, Line(D, G)), B, G))
By perpendicular_line_definition on orthocenter(G, midpoint(B, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), B, G), altitude(projection(A, Line(D, G)), A, D) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(orthocenter(G, midpoint(B, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), A, D))
By perpendicular_line_definition on orthocenter(G, midpoint(B, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), B, G), altitude(projection(A, i), A, D) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(orthocenter(G, midpoint(B, G), projection(A, Line(D, G))), altitude(projection(A, i), A, D))
By perpendicular_line_definition on projection(A, Line(D, G)), median(projection(A, Line(D, G)), B, G), altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G))) we get median(projection(A, Line(D, G)), B, G) == perpendicular_line(projection(A, Line(D, G)), altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G))))
By perpendicular_line_definition on line_intersection(Line(F, projection(A, i)), altitude(B, F, projection(A, i))), altitude(B, F, projection(A, i)), Line(F, projection(A, i)) we get altitude(B, F, projection(A, i)) == perpendicular_line(line_intersection(Line(F, projection(A, i)), altitude(B, F, projection(A, i))), Line(F, projection(A, i)))
By perpendicular_line_definition on line_intersection(median(projection(A, i), B, G), altitude(D, midpoint(B, G), projection(A, i))), median(projection(A, i), B, G), altitude(B, midpoint(B, G), projection(A, i)) we get median(projection(A, i), B, G) == perpendicular_line(line_intersection(median(projection(A, i), B, G), altitude(D, midpoint(B, G), projection(A, i))), altitude(B, midpoint(B, G), projection(A, i)))
By perpendicular_line_definition on line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)), altitude(E, A, D), altitude(E, B, G) we get altitude(E, A, D) == perpendicular_line(line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)), altitude(E, B, G))
By perpendicular_line_definition on line_intersection(Line(F, projection(A, i)), altitude(A, F, projection(A, i))), Line(F, projection(A, i)), altitude(B, F, projection(A, i)) we get Line(F, projection(A, i)) == perpendicular_line(line_intersection(Line(F, projection(A, i)), altitude(A, F, projection(A, i))), altitude(B, F, projection(A, i)))
By perpendicular_line_definition on orthocenter(B, midpoint(B, G), projection(A, i)), altitude(projection(A, i), B, G), altitude(projection(A, i), A, D) we get altitude(projection(A, i), B, G) == perpendicular_line(orthocenter(B, midpoint(B, G), projection(A, i)), altitude(projection(A, i), A, D))
By perpendicular_line_definition on line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), A, D), h we get altitude(projection(A, Line(D, G)), A, D) == perpendicular_line(line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)), h)
By perpendicular_line_definition on line_intersection(altitude(projection(A, Line(D, G)), A, C), altitude(projection(A, Line(D, G)), D, E)), altitude(projection(A, Line(D, G)), D, E), altitude(projection(A, Line(D, G)), A, C) we get altitude(projection(A, Line(D, G)), D, E) == perpendicular_line(line_intersection(altitude(projection(A, Line(D, G)), A, C), altitude(projection(A, Line(D, G)), D, E)), altitude(projection(A, Line(D, G)), A, C))
By perpendicular_line_definition on orthocenter(midpoint(B, G), projection(A, i), orthocenter(A, B, D)), altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i)), median(projection(A, i), B, G) we get altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i)) == perpendicular_line(orthocenter(midpoint(B, G), projection(A, i), orthocenter(A, B, D)), median(projection(A, i), B, G))
By perpendicular_line_definition on orthocenter(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), B, G), altitude(projection(A, i), A, D) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(orthocenter(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G))), altitude(projection(A, i), A, D))
By perpendicular_line_definition on line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), altitude(E, A, D) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(E, A, D))
By perpendicular_line_definition on orthocenter(G, midpoint(B, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), B, G), altitude(E, A, D) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(orthocenter(G, midpoint(B, G), projection(A, Line(D, G))), altitude(E, A, D))
By perpendicular_line_definition on orthocenter(D, E, projection(A, Line(D, G))), altitude(E, D, G), parallel_line(E, Line(D, G)) we get altitude(E, D, G) == perpendicular_line(orthocenter(D, E, projection(A, Line(D, G))), parallel_line(E, Line(D, G)))
By perpendicular_line_definition on line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, i), B, G), altitude(projection(A, i), A, D) we get altitude(projection(A, i), B, G) == perpendicular_line(line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, i), A, D))
By perpendicular_line_definition on line_intersection(median(projection(A, i), B, G), altitude(D, midpoint(B, G), projection(A, i))), median(projection(A, i), B, G), altitude(D, midpoint(B, G), projection(A, i)) we get median(projection(A, i), B, G) == perpendicular_line(line_intersection(median(projection(A, i), B, G), altitude(D, midpoint(B, G), projection(A, i))), altitude(D, midpoint(B, G), projection(A, i)))
By perpendicular_line_definition on line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G), altitude(F, A, D) we get altitude(projection(A, i), B, G) == perpendicular_line(line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)), altitude(F, A, D))
By perpendicular_line_definition on line_intersection(Line(E, projection(A, Line(D, G))), altitude(G, E, projection(A, Line(D, G)))), Line(E, projection(A, Line(D, G))), altitude(G, E, projection(A, Line(D, G))) we get Line(E, projection(A, Line(D, G))) == perpendicular_line(line_intersection(Line(E, projection(A, Line(D, G))), altitude(G, E, projection(A, Line(D, G)))), altitude(G, E, projection(A, Line(D, G))))
By perpendicular_line_definition on line_intersection(median(projection(A, i), B, G), altitude(A, midpoint(B, G), projection(A, i))), median(projection(A, i), B, G), altitude(D, midpoint(B, G), projection(A, i)) we get median(projection(A, i), B, G) == perpendicular_line(line_intersection(median(projection(A, i), B, G), altitude(A, midpoint(B, G), projection(A, i))), altitude(D, midpoint(B, G), projection(A, i)))
By perpendicular_line_definition on line_intersection(median(projection(A, i), B, G), altitude(D, midpoint(B, G), projection(A, i))), median(projection(A, i), B, G), altitude(A, midpoint(B, G), projection(A, i)) we get median(projection(A, i), B, G) == perpendicular_line(line_intersection(median(projection(A, i), B, G), altitude(D, midpoint(B, G), projection(A, i))), altitude(A, midpoint(B, G), projection(A, i)))
By perpendicular_line_definition on orthocenter(midpoint(B, G), projection(A, i), orthocenter(A, B, D)), altitude(projection(A, i), B, G), altitude(F, A, D) we get altitude(projection(A, i), B, G) == perpendicular_line(orthocenter(midpoint(B, G), projection(A, i), orthocenter(A, B, D)), altitude(F, A, D))
By perpendicular_line_definition on D, h, Line(E, F) we get h == perpendicular_line(D, Line(E, F))
By perpendicular_line_definition on line_intersection(altitude(midpoint(B, G), A, C), altitude(projection(A, Line(D, G)), D, E)), altitude(midpoint(B, G), A, C), g we get altitude(midpoint(B, G), A, C) == perpendicular_line(line_intersection(altitude(midpoint(B, G), A, C), altitude(projection(A, Line(D, G)), D, E)), g)
By perpendicular_line_definition on line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), altitude(projection(A, Line(D, G)), A, D) we get altitude(projection(A, Line(D, G)), B, G) == perpendicular_line(line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), A, D))
By perpendicular_line_definition on orthocenter(D, E, projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), D, E), altitude(projection(A, Line(D, G)), A, C) we get altitude(projection(A, Line(D, G)), D, E) == perpendicular_line(orthocenter(D, E, projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), A, C))
By perpendicular_line_definition on orthocenter(D, E, projection(A, Line(D, G))), altitude(E, D, G), Line(D, G) we get altitude(E, D, G) == perpendicular_line(orthocenter(D, E, projection(A, Line(D, G))), Line(D, G))
By perpendicular_line_definition on line_intersection(altitude(midpoint(B, G), A, B), altitude(projection(A, i), D, F)), altitude(projection(A, i), D, F), Line(D, F) we get altitude(projection(A, i), D, F) == perpendicular_line(line_intersection(altitude(midpoint(B, G), A, B), altitude(projection(A, i), D, F)), Line(D, F))
By perpendicular_line_definition on line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G), altitude(projection(A, i), A, D) we get altitude(projection(A, i), B, G) == perpendicular_line(line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), A, D))
By circle_radius_v0 on H, d we get H in d
By perpendicular_direction_conditions_v0 on projection(E, Line(B, G)), E, C, H we get perpendicular(Line(C, H), Line(E, projection(E, Line(B, G))))
By between_implies_orientation on line_intersection(Line(D, F), altitude(projection(A, i), D, F)), B, midpoint(B, G), G we get orientation(B, midpoint(B, G), line_intersection(Line(D, F), altitude(projection(A, i), D, F))) == orientation(G, line_intersection(Line(D, F), altitude(projection(A, i), D, F)), midpoint(B, G)) mod 360, orientation(B, G, line_intersection(Line(D, F), altitude(projection(A, i), D, F))) == orientation(B, midpoint(B, G), line_intersection(Line(D, F), altitude(projection(A, i), D, F))) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), midpoint(B, G), B, G we get orientation(B, G, line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E))) == orientation(B, midpoint(B, G), line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E))) mod 360
By perpendicular_direction_conditions_v0 on F, E, E, projection(E, Line(B, G)) we get perpendicular(Line(E, F), Line(E, projection(E, Line(B, G))))
By perpendicular_direction_conditions_v0 on F, E, projection(F, Line(B, G)), F we get perpendicular(Line(E, F), Line(F, projection(F, Line(B, G))))
By perpendicular_direction_conditions_v0 on projection(F, Line(B, G)), F, H, C we get perpendicular(Line(C, H), Line(F, projection(F, Line(B, G))))
By collinear_and_not_between_implies_orientation on line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), midpoint(B, G), G, B we get orientation(B, line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), G) == orientation(G, midpoint(B, G), line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E))) mod 360
By between_implies_orientation on line_intersection(Line(D, F), altitude(projection(A, i), D, F)), G, midpoint(B, G), B we get orientation(B, line_intersection(Line(D, F), altitude(projection(A, i), D, F)), midpoint(B, G)) == orientation(G, midpoint(B, G), line_intersection(Line(D, F), altitude(projection(A, i), D, F))) mod 360, orientation(B, line_intersection(Line(D, F), altitude(projection(A, i), D, F)), G) == orientation(G, midpoint(B, G), line_intersection(Line(D, F), altitude(projection(A, i), D, F))) mod 360
By projection_definition on projection(A, i), line_intersection(f, altitude(projection(A, i), A, B)), f we get projection(projection(A, i), f) == line_intersection(f, altitude(projection(A, i), A, B))
By projection_definition on projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), h we get projection(projection(A, Line(D, G)), h) == line_intersection(h, altitude(projection(A, Line(D, G)), A, D))
By projection_definition on projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), g we get projection(projection(A, Line(D, G)), g) == line_intersection(g, altitude(projection(A, Line(D, G)), A, C))
By projection_definition on line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i), altitude(projection(A, i), D, F) we get projection(A, i) == projection(line_intersection(f, altitude(projection(A, i), A, B)), altitude(projection(A, i), D, F))
By between_implies_orientation on line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), B, midpoint(B, G), G we get orientation(B, midpoint(B, G), line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E))) == orientation(G, line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), midpoint(B, G)) mod 360, orientation(B, G, line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E))) == orientation(B, midpoint(B, G), line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E))) mod 360
By between_implies_orientation on line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), G, midpoint(B, G), B we get orientation(B, line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), midpoint(B, G)) == orientation(G, midpoint(B, G), line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E))) mod 360, orientation(B, line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E)), G) == orientation(G, midpoint(B, G), line_intersection(Line(D, E), altitude(projection(A, Line(D, G)), D, E))) mod 360
By projection_definition on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G)), altitude(projection(A, Line(D, G)), D, E) we get projection(A, Line(D, G)) == projection(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), altitude(projection(A, Line(D, G)), D, E))
By parallel_line_definition on line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G), altitude(F, B, G) we get altitude(projection(A, i), B, G) == parallel_line(line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)), altitude(F, B, G))
By projection_definition on projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)), h we get projection(projection(A, i), h) == line_intersection(h, altitude(projection(A, i), A, D))
By projection_definition on line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i), altitude(projection(A, i), B, G) we get projection(A, i) == projection(line_intersection(h, altitude(projection(A, i), A, D)), altitude(projection(A, i), B, G))
By projection_definition on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)), altitude(projection(A, Line(D, G)), B, G) we get projection(A, Line(D, G)) == projection(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), B, G))
By parallel_line_definition on line_intersection(median(projection(A, i), B, G), altitude(A, midpoint(B, G), projection(A, i))), altitude(A, midpoint(B, G), projection(A, i)), altitude(D, midpoint(B, G), projection(A, i)) we get altitude(A, midpoint(B, G), projection(A, i)) == parallel_line(line_intersection(median(projection(A, i), B, G), altitude(A, midpoint(B, G), projection(A, i))), altitude(D, midpoint(B, G), projection(A, i)))
By parallel_line_definition on orthocenter(D, midpoint(B, G), projection(A, Line(D, G))), altitude(D, midpoint(B, G), projection(A, Line(D, G))), altitude(A, midpoint(B, G), projection(A, Line(D, G))) we get altitude(D, midpoint(B, G), projection(A, Line(D, G))) == parallel_line(orthocenter(D, midpoint(B, G), projection(A, Line(D, G))), altitude(A, midpoint(B, G), projection(A, Line(D, G))))
By parallel_line_definition on orthocenter(G, midpoint(B, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), B, G), h we get altitude(projection(A, Line(D, G)), B, G) == parallel_line(orthocenter(G, midpoint(B, G), projection(A, Line(D, G))), h)
By parallel_line_definition on orthocenter(midpoint(B, G), projection(A, i), orthocenter(A, B, D)), altitude(projection(A, i), B, G), altitude(E, B, G) we get altitude(projection(A, i), B, G) == parallel_line(orthocenter(midpoint(B, G), projection(A, i), orthocenter(A, B, D)), altitude(E, B, G))
By parallel_line_definition on line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, i), A, D), Line(B, G) we get altitude(projection(A, i), A, D) == parallel_line(line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)), Line(B, G))
By parallel_line_definition on orthocenter(D, E, projection(A, Line(D, G))), altitude(E, D, G), altitude(A, D, G) we get altitude(E, D, G) == parallel_line(orthocenter(D, E, projection(A, Line(D, G))), altitude(A, D, G))
By parallel_line_definition on line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), h we get altitude(projection(A, Line(D, G)), B, G) == parallel_line(line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)), h)
By parallel_line_definition on A, altitude(A, midpoint(B, G), projection(A, Line(D, G))), altitude(D, midpoint(B, G), projection(A, Line(D, G))) we get altitude(A, midpoint(B, G), projection(A, Line(D, G))) == parallel_line(A, altitude(D, midpoint(B, G), projection(A, Line(D, G))))
By parallel_line_definition on orthocenter(D, F, projection(A, i)), altitude(projection(A, i), D, F), altitude(midpoint(B, G), D, F) we get altitude(projection(A, i), D, F) == parallel_line(orthocenter(D, F, projection(A, i)), altitude(midpoint(B, G), D, F))
By parallel_line_definition on orthocenter(D, midpoint(B, G), projection(A, i)), altitude(D, midpoint(B, G), projection(A, i)), altitude(A, midpoint(B, G), projection(A, i)) we get altitude(D, midpoint(B, G), projection(A, i)) == parallel_line(orthocenter(D, midpoint(B, G), projection(A, i)), altitude(A, midpoint(B, G), projection(A, i)))
By parallel_line_definition on orthocenter(F, projection(A, i), orthocenter(A, B, D)), altitude(projection(A, i), D, F), altitude(midpoint(B, G), D, F) we get altitude(projection(A, i), D, F) == parallel_line(orthocenter(F, projection(A, i), orthocenter(A, B, D)), altitude(midpoint(B, G), D, F))
By parallel_line_definition on line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(F, A, D), altitude(projection(A, Line(D, G)), A, D) we get altitude(F, A, D) == parallel_line(line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), A, D))
By parallel_line_definition on line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D), Line(B, G) we get altitude(projection(A, Line(D, G)), A, D) == parallel_line(line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)), Line(B, G))
By parallel_line_definition on orthocenter(D, E, projection(A, Line(D, G))), altitude(E, D, G), altitude(midpoint(B, G), D, G) we get altitude(E, D, G) == parallel_line(orthocenter(D, E, projection(A, Line(D, G))), altitude(midpoint(B, G), D, G))
By parallel_line_definition on orthocenter(G, midpoint(B, G), projection(A, Line(D, G))), altitude(midpoint(B, G), D, G), altitude(A, D, G) we get altitude(midpoint(B, G), D, G) == parallel_line(orthocenter(G, midpoint(B, G), projection(A, Line(D, G))), altitude(A, D, G))
By parallel_line_definition on orthocenter(E, orthocenter(A, D, G), projection(A, Line(D, G))), parallel_line(E, Line(D, G)), parallel_line(midpoint(B, G), Line(D, G)) we get parallel_line(E, Line(D, G)) == parallel_line(orthocenter(E, orthocenter(A, D, G), projection(A, Line(D, G))), parallel_line(midpoint(B, G), Line(D, G)))
By parallel_line_definition on line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), altitude(projection(A, i), B, G) we get altitude(projection(A, Line(D, G)), B, G) == parallel_line(line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, i), B, G))
By parallel_line_definition on orthocenter(E, orthocenter(A, D, G), projection(A, Line(D, G))), parallel_line(E, Line(D, G)), Line(D, G) we get parallel_line(E, Line(D, G)) == parallel_line(orthocenter(E, orthocenter(A, D, G), projection(A, Line(D, G))), Line(D, G))
By parallel_line_definition on line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), A, D), altitude(E, A, D) we get altitude(projection(A, Line(D, G)), A, D) == parallel_line(line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(E, A, D))
By parallel_line_definition on line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), h we get altitude(projection(A, Line(D, G)), B, G) == parallel_line(line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)), h)
By parallel_line_definition on orthocenter(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G))), parallel_line(midpoint(B, G), Line(D, G)), parallel_line(E, Line(D, G)) we get parallel_line(midpoint(B, G), Line(D, G)) == parallel_line(orthocenter(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G))), parallel_line(E, Line(D, G)))
By parallel_line_definition on orthocenter(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), B, G), altitude(projection(A, i), B, G) we get altitude(projection(A, Line(D, G)), B, G) == parallel_line(orthocenter(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G))), altitude(projection(A, i), B, G))
By parallel_line_definition on orthocenter(F, projection(A, i), orthocenter(A, B, D)), parallel_line(F, i), i we get parallel_line(F, i) == parallel_line(orthocenter(F, projection(A, i), orthocenter(A, B, D)), i)
By parallel_line_definition on line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)), altitude(F, A, D), altitude(projection(A, Line(D, G)), A, D) we get altitude(F, A, D) == parallel_line(line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)), altitude(projection(A, Line(D, G)), A, D))
By parallel_line_definition on D, altitude(D, midpoint(B, G), projection(A, i)), altitude(A, midpoint(B, G), projection(A, i)) we get altitude(D, midpoint(B, G), projection(A, i)) == parallel_line(D, altitude(A, midpoint(B, G), projection(A, i)))
By parallel_line_definition on line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), A, D), altitude(F, A, D) we get altitude(projection(A, i), A, D) == parallel_line(line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)), altitude(F, A, D))
By parallel_line_definition on line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(E, A, D), Line(B, G) we get altitude(E, A, D) == parallel_line(line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)), Line(B, G))
By parallel_line_definition on orthocenter(D, F, projection(A, i)), altitude(F, B, D), altitude(A, B, D) we get altitude(F, B, D) == parallel_line(orthocenter(D, F, projection(A, i)), altitude(A, B, D))
By parallel_line_definition on orthocenter(E, orthocenter(A, D, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), D, E), g we get altitude(projection(A, Line(D, G)), D, E) == parallel_line(orthocenter(E, orthocenter(A, D, G), projection(A, Line(D, G))), g)
By parallel_line_definition on line_intersection(Line(F, projection(A, i)), altitude(B, F, projection(A, i))), altitude(B, F, projection(A, i)), altitude(A, F, projection(A, i)) we get altitude(B, F, projection(A, i)) == parallel_line(line_intersection(Line(F, projection(A, i)), altitude(B, F, projection(A, i))), altitude(A, F, projection(A, i)))
By parallel_line_definition on orthocenter(G, midpoint(B, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), B, G), altitude(E, B, G) we get altitude(projection(A, Line(D, G)), B, G) == parallel_line(orthocenter(G, midpoint(B, G), projection(A, Line(D, G))), altitude(E, B, G))
By parallel_line_definition on line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), h we get altitude(projection(A, Line(D, G)), B, G) == parallel_line(line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)), h)
By parallel_line_definition on line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(E, A, D), altitude(F, A, D) we get altitude(E, A, D) == parallel_line(line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(F, A, D))
By parallel_line_definition on line_intersection(median(projection(A, i), B, G), altitude(D, midpoint(B, G), projection(A, i))), altitude(D, midpoint(B, G), projection(A, i)), altitude(A, midpoint(B, G), projection(A, i)) we get altitude(D, midpoint(B, G), projection(A, i)) == parallel_line(line_intersection(median(projection(A, i), B, G), altitude(D, midpoint(B, G), projection(A, i))), altitude(A, midpoint(B, G), projection(A, i)))
By parallel_line_definition on orthocenter(B, midpoint(B, G), projection(A, i)), altitude(midpoint(B, G), B, D), altitude(A, B, D) we get altitude(midpoint(B, G), B, D) == parallel_line(orthocenter(B, midpoint(B, G), projection(A, i)), altitude(A, B, D))
By parallel_line_definition on B, altitude(B, F, projection(A, i)), altitude(A, F, projection(A, i)) we get altitude(B, F, projection(A, i)) == parallel_line(B, altitude(A, F, projection(A, i)))
By parallel_line_definition on line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), altitude(F, B, G) we get altitude(projection(A, Line(D, G)), B, G) == parallel_line(line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(F, B, G))
By parallel_line_definition on line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(F, A, D), Line(B, G) we get altitude(F, A, D) == parallel_line(line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)), Line(B, G))
By parallel_line_definition on line_intersection(altitude(projection(A, i), A, B), altitude(projection(A, i), D, F)), altitude(projection(A, i), D, F), f we get altitude(projection(A, i), D, F) == parallel_line(line_intersection(altitude(projection(A, i), A, B), altitude(projection(A, i), D, F)), f)
By parallel_line_definition on line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G), h we get altitude(projection(A, i), B, G) == parallel_line(line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)), h)
By parallel_line_definition on orthocenter(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G))), parallel_line(midpoint(B, G), Line(D, G)), Line(D, G) we get parallel_line(midpoint(B, G), Line(D, G)) == parallel_line(orthocenter(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G))), Line(D, G))
By parallel_line_definition on line_intersection(altitude(midpoint(B, G), A, C), altitude(projection(A, Line(D, G)), D, E)), altitude(midpoint(B, G), A, C), altitude(projection(A, Line(D, G)), A, C) we get altitude(midpoint(B, G), A, C) == parallel_line(line_intersection(altitude(midpoint(B, G), A, C), altitude(projection(A, Line(D, G)), D, E)), altitude(projection(A, Line(D, G)), A, C))
By parallel_line_definition on line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), A, D), altitude(E, A, D) we get altitude(projection(A, i), A, D) == parallel_line(line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)), altitude(E, A, D))
By parallel_line_definition on line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, i), B, G), altitude(F, B, G) we get altitude(projection(A, i), B, G) == parallel_line(line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(F, B, G))
By parallel_line_definition on orthocenter(A, midpoint(B, G), projection(A, Line(D, G))), altitude(A, midpoint(B, G), projection(A, Line(D, G))), altitude(D, midpoint(B, G), projection(A, Line(D, G))) we get altitude(A, midpoint(B, G), projection(A, Line(D, G))) == parallel_line(orthocenter(A, midpoint(B, G), projection(A, Line(D, G))), altitude(D, midpoint(B, G), projection(A, Line(D, G))))
By parallel_line_definition on orthocenter(A, F, projection(A, i)), altitude(A, F, projection(A, i)), altitude(B, F, projection(A, i)) we get altitude(A, F, projection(A, i)) == parallel_line(orthocenter(A, F, projection(A, i)), altitude(B, F, projection(A, i)))
By parallel_line_definition on line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(F, A, D), altitude(projection(A, i), A, D) we get altitude(F, A, D) == parallel_line(line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, i), A, D))
By parallel_line_definition on line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, i), B, G), h we get altitude(projection(A, i), B, G) == parallel_line(line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)), h)
By parallel_line_definition on line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, i), A, D) we get altitude(projection(A, Line(D, G)), A, D) == parallel_line(line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, i), A, D))
By parallel_line_definition on G, altitude(G, E, projection(A, Line(D, G))), altitude(A, E, projection(A, Line(D, G))) we get altitude(G, E, projection(A, Line(D, G))) == parallel_line(G, altitude(A, E, projection(A, Line(D, G))))
By parallel_line_definition on line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, i), A, D), altitude(F, A, D) we get altitude(projection(A, i), A, D) == parallel_line(line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(F, A, D))
By parallel_line_definition on line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D), altitude(E, A, D) we get altitude(projection(A, Line(D, G)), A, D) == parallel_line(line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(E, A, D))
By parallel_line_definition on orthocenter(G, midpoint(B, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), B, G), altitude(F, B, G) we get altitude(projection(A, Line(D, G)), B, G) == parallel_line(orthocenter(G, midpoint(B, G), projection(A, Line(D, G))), altitude(F, B, G))
By parallel_line_definition on line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), altitude(projection(A, i), B, G) we get altitude(projection(A, Line(D, G)), B, G) == parallel_line(line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, i), B, G))
By parallel_line_definition on orthocenter(midpoint(B, G), projection(A, i), orthocenter(A, B, D)), altitude(projection(A, i), B, G), altitude(F, B, G) we get altitude(projection(A, i), B, G) == parallel_line(orthocenter(midpoint(B, G), projection(A, i), orthocenter(A, B, D)), altitude(F, B, G))
By parallel_line_definition on orthocenter(B, F, projection(A, i)), altitude(B, F, projection(A, i)), altitude(A, F, projection(A, i)) we get altitude(B, F, projection(A, i)) == parallel_line(orthocenter(B, F, projection(A, i)), altitude(A, F, projection(A, i)))
By parallel_line_definition on line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), A, D), Line(B, G) we get altitude(projection(A, i), A, D) == parallel_line(line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)), Line(B, G))
By parallel_line_definition on orthocenter(A, midpoint(B, G), projection(A, i)), altitude(A, midpoint(B, G), projection(A, i)), altitude(D, midpoint(B, G), projection(A, i)) we get altitude(A, midpoint(B, G), projection(A, i)) == parallel_line(orthocenter(A, midpoint(B, G), projection(A, i)), altitude(D, midpoint(B, G), projection(A, i)))
By parallel_line_definition on line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)), altitude(F, A, D), altitude(E, A, D) we get altitude(F, A, D) == parallel_line(line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)), altitude(E, A, D))
By parallel_line_definition on line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(F, A, D), altitude(E, A, D) we get altitude(F, A, D) == parallel_line(line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(E, A, D))
By parallel_line_definition on line_intersection(altitude(midpoint(B, G), A, B), altitude(projection(A, i), D, F)), altitude(midpoint(B, G), A, B), Line(D, F) we get altitude(midpoint(B, G), A, B) == parallel_line(line_intersection(altitude(midpoint(B, G), A, B), altitude(projection(A, i), D, F)), Line(D, F))
By parallel_line_definition on line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), altitude(projection(A, i), B, G) we get altitude(projection(A, Line(D, G)), B, G) == parallel_line(line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, i), B, G))
By parallel_line_definition on line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), B, G) we get altitude(projection(A, i), B, G) == parallel_line(line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), B, G))
By parallel_line_definition on orthocenter(B, midpoint(B, G), projection(A, i)), altitude(projection(A, i), B, G), h we get altitude(projection(A, i), B, G) == parallel_line(orthocenter(B, midpoint(B, G), projection(A, i)), h)
By parallel_line_definition on orthocenter(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), B, G), h we get altitude(projection(A, Line(D, G)), B, G) == parallel_line(orthocenter(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G))), h)
By parallel_line_definition on line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, i), B, G), altitude(E, B, G) we get altitude(projection(A, i), B, G) == parallel_line(line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(E, B, G))
By parallel_line_definition on line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), A, D), altitude(F, A, D) we get altitude(projection(A, Line(D, G)), A, D) == parallel_line(line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(F, A, D))
By parallel_line_definition on line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), A, D) we get altitude(projection(A, i), A, D) == parallel_line(line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)), altitude(projection(A, Line(D, G)), A, D))
By parallel_line_definition on orthocenter(midpoint(B, G), projection(A, i), orthocenter(A, B, D)), altitude(projection(A, i), B, G), h we get altitude(projection(A, i), B, G) == parallel_line(orthocenter(midpoint(B, G), projection(A, i), orthocenter(A, B, D)), h)
By parallel_line_definition on orthocenter(B, midpoint(B, G), projection(A, i)), altitude(projection(A, i), B, G), altitude(E, B, G) we get altitude(projection(A, i), B, G) == parallel_line(orthocenter(B, midpoint(B, G), projection(A, i)), altitude(E, B, G))
By parallel_line_definition on orthocenter(B, midpoint(B, G), projection(A, i)), altitude(projection(A, i), B, G), altitude(F, B, G) we get altitude(projection(A, i), B, G) == parallel_line(orthocenter(B, midpoint(B, G), projection(A, i)), altitude(F, B, G))
By parallel_line_definition on line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)), altitude(E, A, D), altitude(F, A, D) we get altitude(E, A, D) == parallel_line(line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)), altitude(F, A, D))
By parallel_line_definition on line_intersection(altitude(midpoint(B, G), A, C), altitude(projection(A, Line(D, G)), D, E)), altitude(projection(A, Line(D, G)), D, E), altitude(midpoint(B, G), D, E) we get altitude(projection(A, Line(D, G)), D, E) == parallel_line(line_intersection(altitude(midpoint(B, G), A, C), altitude(projection(A, Line(D, G)), D, E)), altitude(midpoint(B, G), D, E))
By parallel_line_definition on line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), B, G) we get altitude(projection(A, i), B, G) == parallel_line(line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)), altitude(projection(A, Line(D, G)), B, G))
By parallel_line_definition on line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G), altitude(E, B, G) we get altitude(projection(A, i), B, G) == parallel_line(line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)), altitude(E, B, G))
By parallel_line_definition on line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), altitude(projection(A, i), B, G) we get altitude(projection(A, Line(D, G)), B, G) == parallel_line(line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, i), B, G))
By parallel_line_definition on A, altitude(A, midpoint(B, G), projection(A, i)), altitude(D, midpoint(B, G), projection(A, i)) we get altitude(A, midpoint(B, G), projection(A, i)) == parallel_line(A, altitude(D, midpoint(B, G), projection(A, i)))
By parallel_line_definition on line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), altitude(E, B, G) we get altitude(projection(A, Line(D, G)), B, G) == parallel_line(line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(E, B, G))
By parallel_line_definition on line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), altitude(E, B, G) we get altitude(projection(A, Line(D, G)), B, G) == parallel_line(line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(E, B, G))
By parallel_line_definition on line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G), h we get altitude(projection(A, i), B, G) == parallel_line(line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)), h)
By parallel_line_definition on line_intersection(Line(E, projection(A, Line(D, G))), altitude(G, E, projection(A, Line(D, G)))), altitude(G, E, projection(A, Line(D, G))), altitude(A, E, projection(A, Line(D, G))) we get altitude(G, E, projection(A, Line(D, G))) == parallel_line(line_intersection(Line(E, projection(A, Line(D, G))), altitude(G, E, projection(A, Line(D, G)))), altitude(A, E, projection(A, Line(D, G))))
By parallel_line_definition on orthocenter(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), B, G), altitude(F, B, G) we get altitude(projection(A, Line(D, G)), B, G) == parallel_line(orthocenter(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G))), altitude(F, B, G))
By parallel_line_definition on line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), A, D), Line(B, G) we get altitude(projection(A, Line(D, G)), A, D) == parallel_line(line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)), Line(B, G))
By parallel_line_definition on orthocenter(B, midpoint(B, G), projection(A, i)), altitude(midpoint(B, G), B, D), altitude(F, B, D) we get altitude(midpoint(B, G), B, D) == parallel_line(orthocenter(B, midpoint(B, G), projection(A, i)), altitude(F, B, D))
By parallel_line_definition on line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(E, A, D), altitude(projection(A, Line(D, G)), A, D) we get altitude(E, A, D) == parallel_line(line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), A, D))
By parallel_line_definition on line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G), altitude(F, B, G) we get altitude(projection(A, i), B, G) == parallel_line(line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)), altitude(F, B, G))
By parallel_line_definition on orthocenter(B, midpoint(B, G), projection(A, i)), altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), B, G) we get altitude(projection(A, i), B, G) == parallel_line(orthocenter(B, midpoint(B, G), projection(A, i)), altitude(projection(A, Line(D, G)), B, G))
By parallel_line_definition on line_intersection(altitude(midpoint(B, G), A, B), altitude(projection(A, i), D, F)), altitude(midpoint(B, G), A, B), altitude(projection(A, i), A, B) we get altitude(midpoint(B, G), A, B) == parallel_line(line_intersection(altitude(midpoint(B, G), A, B), altitude(projection(A, i), D, F)), altitude(projection(A, i), A, B))
By parallel_line_definition on line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)), altitude(F, A, D), Line(B, G) we get altitude(F, A, D) == parallel_line(line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)), Line(B, G))
By parallel_line_definition on orthocenter(midpoint(B, G), projection(A, i), orthocenter(A, B, D)), parallel_line(midpoint(B, G), i), parallel_line(F, i) we get parallel_line(midpoint(B, G), i) == parallel_line(orthocenter(midpoint(B, G), projection(A, i), orthocenter(A, B, D)), parallel_line(F, i))
By parallel_line_definition on orthocenter(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), B, G), altitude(E, B, G) we get altitude(projection(A, Line(D, G)), B, G) == parallel_line(orthocenter(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G))), altitude(E, B, G))
By parallel_line_definition on line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)), altitude(E, A, D), altitude(projection(A, i), A, D) we get altitude(E, A, D) == parallel_line(line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), A, D))
By parallel_line_definition on line_intersection(altitude(projection(A, i), A, B), altitude(projection(A, i), D, F)), altitude(projection(A, i), A, B), Line(D, F) we get altitude(projection(A, i), A, B) == parallel_line(line_intersection(altitude(projection(A, i), A, B), altitude(projection(A, i), D, F)), Line(D, F))
By parallel_line_definition on orthocenter(G, midpoint(B, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), B, G), altitude(projection(A, i), B, G) we get altitude(projection(A, Line(D, G)), B, G) == parallel_line(orthocenter(G, midpoint(B, G), projection(A, Line(D, G))), altitude(projection(A, i), B, G))
By parallel_line_definition on line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), altitude(F, B, G) we get altitude(projection(A, Line(D, G)), B, G) == parallel_line(line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(F, B, G))
By parallel_line_definition on orthocenter(F, projection(A, i), orthocenter(A, B, D)), altitude(projection(A, i), D, F), f we get altitude(projection(A, i), D, F) == parallel_line(orthocenter(F, projection(A, i), orthocenter(A, B, D)), f)
By parallel_line_definition on line_intersection(altitude(projection(A, Line(D, G)), A, C), altitude(projection(A, Line(D, G)), D, E)), altitude(projection(A, Line(D, G)), D, E), altitude(midpoint(B, G), D, E) we get altitude(projection(A, Line(D, G)), D, E) == parallel_line(line_intersection(altitude(projection(A, Line(D, G)), A, C), altitude(projection(A, Line(D, G)), D, E)), altitude(midpoint(B, G), D, E))
By parallel_line_definition on orthocenter(E, G, projection(A, Line(D, G))), altitude(G, E, projection(A, Line(D, G))), altitude(A, E, projection(A, Line(D, G))) we get altitude(G, E, projection(A, Line(D, G))) == parallel_line(orthocenter(E, G, projection(A, Line(D, G))), altitude(A, E, projection(A, Line(D, G))))
By parallel_line_definition on orthocenter(D, E, projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), D, E), g we get altitude(projection(A, Line(D, G)), D, E) == parallel_line(orthocenter(D, E, projection(A, Line(D, G))), g)
By parallel_line_definition on line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, i), A, D), altitude(E, A, D) we get altitude(projection(A, i), A, D) == parallel_line(line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(E, A, D))
By parallel_line_definition on orthocenter(midpoint(B, G), projection(A, i), orthocenter(A, B, D)), parallel_line(midpoint(B, G), i), i we get parallel_line(midpoint(B, G), i) == parallel_line(orthocenter(midpoint(B, G), projection(A, i), orthocenter(A, B, D)), i)
By parallel_line_definition on orthocenter(D, F, projection(A, i)), altitude(projection(A, i), D, F), f we get altitude(projection(A, i), D, F) == parallel_line(orthocenter(D, F, projection(A, i)), f)
By parallel_line_definition on orthocenter(F, projection(A, i), orthocenter(A, B, D)), parallel_line(F, i), parallel_line(midpoint(B, G), i) we get parallel_line(F, i) == parallel_line(orthocenter(F, projection(A, i), orthocenter(A, B, D)), parallel_line(midpoint(B, G), i))
By parallel_line_definition on D, altitude(D, midpoint(B, G), projection(A, Line(D, G))), altitude(A, midpoint(B, G), projection(A, Line(D, G))) we get altitude(D, midpoint(B, G), projection(A, Line(D, G))) == parallel_line(D, altitude(A, midpoint(B, G), projection(A, Line(D, G))))
By parallel_line_definition on line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), A, D) we get altitude(projection(A, i), A, D) == parallel_line(line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), A, D))
By parallel_line_definition on line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), altitude(F, B, G) we get altitude(projection(A, Line(D, G)), B, G) == parallel_line(line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(F, B, G))
By parallel_line_definition on line_intersection(altitude(projection(A, i), A, B), altitude(projection(A, i), D, F)), altitude(projection(A, i), D, F), altitude(midpoint(B, G), D, F) we get altitude(projection(A, i), D, F) == parallel_line(line_intersection(altitude(projection(A, i), A, B), altitude(projection(A, i), D, F)), altitude(midpoint(B, G), D, F))
By parallel_line_definition on line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G), altitude(F, B, G) we get altitude(projection(A, i), B, G) == parallel_line(line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)), altitude(F, B, G))
By parallel_line_definition on line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), altitude(E, B, G) we get altitude(projection(A, Line(D, G)), B, G) == parallel_line(line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(E, B, G))
By parallel_line_definition on line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)), altitude(E, A, D), altitude(projection(A, Line(D, G)), A, D) we get altitude(E, A, D) == parallel_line(line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)), altitude(projection(A, Line(D, G)), A, D))
By parallel_line_definition on line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), B, G) we get altitude(projection(A, i), B, G) == parallel_line(line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)), altitude(projection(A, Line(D, G)), B, G))
By parallel_line_definition on line_intersection(altitude(projection(A, i), A, B), altitude(projection(A, i), D, F)), altitude(projection(A, i), A, B), altitude(midpoint(B, G), A, B) we get altitude(projection(A, i), A, B) == parallel_line(line_intersection(altitude(projection(A, i), A, B), altitude(projection(A, i), D, F)), altitude(midpoint(B, G), A, B))
By parallel_line_definition on line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)), altitude(F, A, D), altitude(projection(A, i), A, D) we get altitude(F, A, D) == parallel_line(line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), A, D))
By parallel_line_definition on line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G), h we get altitude(projection(A, i), B, G) == parallel_line(line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)), h)
By parallel_line_definition on line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(E, A, D), altitude(projection(A, i), A, D) we get altitude(E, A, D) == parallel_line(line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, i), A, D))
By parallel_line_definition on orthocenter(D, E, projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), D, E), altitude(midpoint(B, G), D, E) we get altitude(projection(A, Line(D, G)), D, E) == parallel_line(orthocenter(D, E, projection(A, Line(D, G))), altitude(midpoint(B, G), D, E))
By parallel_line_definition on A, altitude(A, E, projection(A, Line(D, G))), altitude(G, E, projection(A, Line(D, G))) we get altitude(A, E, projection(A, Line(D, G))) == parallel_line(A, altitude(G, E, projection(A, Line(D, G))))
By parallel_line_definition on line_intersection(altitude(projection(A, Line(D, G)), A, C), altitude(projection(A, Line(D, G)), D, E)), altitude(projection(A, Line(D, G)), A, C), altitude(midpoint(B, G), A, C) we get altitude(projection(A, Line(D, G)), A, C) == parallel_line(line_intersection(altitude(projection(A, Line(D, G)), A, C), altitude(projection(A, Line(D, G)), D, E)), altitude(midpoint(B, G), A, C))
By parallel_line_definition on line_intersection(median(projection(A, Line(D, G)), B, G), altitude(A, midpoint(B, G), projection(A, Line(D, G)))), altitude(A, midpoint(B, G), projection(A, Line(D, G))), altitude(D, midpoint(B, G), projection(A, Line(D, G))) we get altitude(A, midpoint(B, G), projection(A, Line(D, G))) == parallel_line(line_intersection(median(projection(A, Line(D, G)), B, G), altitude(A, midpoint(B, G), projection(A, Line(D, G)))), altitude(D, midpoint(B, G), projection(A, Line(D, G))))
By parallel_line_definition on orthocenter(D, F, projection(A, i)), altitude(F, B, D), altitude(midpoint(B, G), B, D) we get altitude(F, B, D) == parallel_line(orthocenter(D, F, projection(A, i)), altitude(midpoint(B, G), B, D))
By parallel_line_definition on line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), altitude(F, B, G) we get altitude(projection(A, Line(D, G)), B, G) == parallel_line(line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(F, B, G))
By parallel_line_definition on line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G), altitude(E, B, G) we get altitude(projection(A, i), B, G) == parallel_line(line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)), altitude(E, B, G))
By parallel_line_definition on line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)), altitude(E, A, D), Line(B, G) we get altitude(E, A, D) == parallel_line(line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)), Line(B, G))
By parallel_line_definition on orthocenter(A, E, projection(A, Line(D, G))), altitude(A, E, projection(A, Line(D, G))), altitude(G, E, projection(A, Line(D, G))) we get altitude(A, E, projection(A, Line(D, G))) == parallel_line(orthocenter(A, E, projection(A, Line(D, G))), altitude(G, E, projection(A, Line(D, G))))
By parallel_line_definition on line_intersection(median(projection(A, Line(D, G)), B, G), altitude(D, midpoint(B, G), projection(A, Line(D, G)))), altitude(D, midpoint(B, G), projection(A, Line(D, G))), altitude(A, midpoint(B, G), projection(A, Line(D, G))) we get altitude(D, midpoint(B, G), projection(A, Line(D, G))) == parallel_line(line_intersection(median(projection(A, Line(D, G)), B, G), altitude(D, midpoint(B, G), projection(A, Line(D, G)))), altitude(A, midpoint(B, G), projection(A, Line(D, G))))
By parallel_line_definition on line_intersection(altitude(midpoint(B, G), A, C), altitude(projection(A, Line(D, G)), D, E)), altitude(midpoint(B, G), A, C), Line(D, E) we get altitude(midpoint(B, G), A, C) == parallel_line(line_intersection(altitude(midpoint(B, G), A, C), altitude(projection(A, Line(D, G)), D, E)), Line(D, E))
By parallel_line_definition on line_intersection(altitude(midpoint(B, G), A, B), altitude(projection(A, i), D, F)), altitude(projection(A, i), D, F), f we get altitude(projection(A, i), D, F) == parallel_line(line_intersection(altitude(midpoint(B, G), A, B), altitude(projection(A, i), D, F)), f)
By parallel_line_definition on orthocenter(G, midpoint(B, G), projection(A, Line(D, G))), altitude(midpoint(B, G), D, G), altitude(E, D, G) we get altitude(midpoint(B, G), D, G) == parallel_line(orthocenter(G, midpoint(B, G), projection(A, Line(D, G))), altitude(E, D, G))
By parallel_line_definition on line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), altitude(E, B, G) we get altitude(projection(A, Line(D, G)), B, G) == parallel_line(line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(E, B, G))
By parallel_line_definition on line_intersection(altitude(projection(A, Line(D, G)), A, C), altitude(projection(A, Line(D, G)), D, E)), altitude(projection(A, Line(D, G)), D, E), g we get altitude(projection(A, Line(D, G)), D, E) == parallel_line(line_intersection(altitude(projection(A, Line(D, G)), A, C), altitude(projection(A, Line(D, G)), D, E)), g)
By parallel_line_definition on orthocenter(midpoint(B, G), projection(A, i), orthocenter(A, B, D)), altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), B, G) we get altitude(projection(A, i), B, G) == parallel_line(orthocenter(midpoint(B, G), projection(A, i), orthocenter(A, B, D)), altitude(projection(A, Line(D, G)), B, G))
By parallel_line_definition on orthocenter(E, orthocenter(A, D, G), projection(A, Line(D, G))), altitude(projection(A, Line(D, G)), D, E), altitude(midpoint(B, G), D, E) we get altitude(projection(A, Line(D, G)), D, E) == parallel_line(orthocenter(E, orthocenter(A, D, G), projection(A, Line(D, G))), altitude(midpoint(B, G), D, E))
By parallel_line_definition on line_intersection(altitude(projection(A, Line(D, G)), A, C), altitude(projection(A, Line(D, G)), D, E)), altitude(projection(A, Line(D, G)), A, C), Line(D, E) we get altitude(projection(A, Line(D, G)), A, C) == parallel_line(line_intersection(altitude(projection(A, Line(D, G)), A, C), altitude(projection(A, Line(D, G)), D, E)), Line(D, E))
By parallel_line_definition on line_intersection(Line(E, projection(A, Line(D, G))), altitude(A, E, projection(A, Line(D, G)))), altitude(A, E, projection(A, Line(D, G))), altitude(G, E, projection(A, Line(D, G))) we get altitude(A, E, projection(A, Line(D, G))) == parallel_line(line_intersection(Line(E, projection(A, Line(D, G))), altitude(A, E, projection(A, Line(D, G)))), altitude(G, E, projection(A, Line(D, G))))
By parallel_line_definition on line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G), altitude(E, B, G) we get altitude(projection(A, i), B, G) == parallel_line(line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)), altitude(E, B, G))
By parallel_line_definition on line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D), altitude(F, A, D) we get altitude(projection(A, Line(D, G)), A, D) == parallel_line(line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(F, A, D))
By parallel_line_definition on line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)), altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), B, G) we get altitude(projection(A, i), B, G) == parallel_line(line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)), altitude(projection(A, Line(D, G)), B, G))
By parallel_line_definition on A, altitude(A, F, projection(A, i)), altitude(B, F, projection(A, i)) we get altitude(A, F, projection(A, i)) == parallel_line(A, altitude(B, F, projection(A, i)))
By parallel_line_definition on line_intersection(Line(F, projection(A, i)), altitude(A, F, projection(A, i))), altitude(A, F, projection(A, i)), altitude(B, F, projection(A, i)) we get altitude(A, F, projection(A, i)) == parallel_line(line_intersection(Line(F, projection(A, i)), altitude(A, F, projection(A, i))), altitude(B, F, projection(A, i)))
By parallel_line_definition on line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, i), A, D) we get altitude(projection(A, Line(D, G)), A, D) == parallel_line(line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)), altitude(projection(A, i), A, D))
By parallel_line_definition on line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)), altitude(projection(A, Line(D, G)), B, G), h we get altitude(projection(A, Line(D, G)), B, G) == parallel_line(line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)), h)
By parallel_line_definition on line_intersection(altitude(midpoint(B, G), A, B), altitude(projection(A, i), D, F)), altitude(projection(A, i), D, F), altitude(midpoint(B, G), D, F) we get altitude(projection(A, i), D, F) == parallel_line(line_intersection(altitude(midpoint(B, G), A, B), altitude(projection(A, i), D, F)), altitude(midpoint(B, G), D, F))
By parallel_line_definition on line_intersection(altitude(midpoint(B, G), A, C), altitude(projection(A, Line(D, G)), D, E)), altitude(projection(A, Line(D, G)), D, E), g we get altitude(projection(A, Line(D, G)), D, E) == parallel_line(line_intersection(altitude(midpoint(B, G), A, C), altitude(projection(A, Line(D, G)), D, E)), g)
By circle_by_three_points_and_center on I, H, D, G we get I == center(Circle(D, G, H))
By circle_by_three_points_and_center on I, C, B, H we get I == center(Circle(B, C, H))
By circle_by_three_points_and_center on I, G, B, H we get I == center(Circle(B, G, H))
By circle_by_three_points_and_center on I, D, C, H we get I == center(Circle(C, D, H))
By circle_by_three_points_and_center on I, D, B, H we get I == center(Circle(B, D, H))
By circle_by_three_points_and_center on I, H, G, C we get I == center(Circle(C, G, H))
By different_points_v1 on projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)) we get 0 != distance(projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)))
By different_points_v1 on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)) we get 0 != distance(projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By different_points_v1 on line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i) we get 0 != distance(projection(A, i), line_intersection(f, altitude(projection(A, i), A, B)))
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)), midpoint(B, G), D we get 180 == 2 * direction(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G))) - 2 * direction(midpoint(B, G), D) mod 360
By different_points_v1 on C, midpoint(B, G) we get 0 != distance(C, midpoint(B, G))
By different_points_v1 on E, B we get 0 != distance(B, E)
By different_points_v1 on G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get 0 != distance(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By different_points_v1 on G, line_intersection(h, altitude(projection(A, i), A, D)) we get 0 != distance(G, line_intersection(h, altitude(projection(A, i), A, D)))
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), E, G we get 180 == 2 * direction(projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C))) - 2 * direction(E, G) mod 360
By different_points_v1 on G, F we get 0 != distance(F, G)
By different_points_v1 on B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get 0 != distance(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By different_points_v1 on E, I we get 0 != distance(E, I)
By perpendicular_direction_conditions_v0_r on projection(A, i), line_intersection(f, altitude(projection(A, i), A, B)), projection(midpoint(B, G), Line(D, F)), midpoint(B, G) we get 180 == 2 * direction(projection(A, i), line_intersection(f, altitude(projection(A, i), A, B))) - 2 * direction(projection(midpoint(B, G), Line(D, F)), midpoint(B, G)) mod 360
By different_points_v1 on B, line_intersection(h, altitude(projection(A, i), A, D)) we get 0 != distance(B, line_intersection(h, altitude(projection(A, i), A, D)))
By different_points_v1 on I, F we get 0 != distance(F, I)
By perpendicular_direction_conditions_v0_r on projection(A, i), line_intersection(f, altitude(projection(A, i), A, B)), H, A we get 180 == 2 * direction(projection(A, i), line_intersection(f, altitude(projection(A, i), A, B))) - 2 * direction(H, A) mod 360
By different_points_v1 on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G)) we get 0 != distance(projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)))
By different_points_v1 on midpoint(B, G), H we get 0 != distance(H, midpoint(B, G))
By perpendicular_direction_conditions_v0_r on I, midpoint(B, G), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)) we get 180 == 2 * direction(I, midpoint(B, G)) - 2 * direction(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on A, I, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)) we get 180 == 2 * direction(A, I) - 2 * direction(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i), A, D we get 180 == 2 * direction(line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i)) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on A, G, projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)) we get 180 == 2 * direction(A, G) - 2 * direction(projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C))) mod 360
By perpendicular_direction_conditions_v0_r on A, I, line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i) we get 180 == 2 * direction(A, I) - 2 * direction(line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), line_intersection(f, altitude(projection(A, i), A, B)), B, A we get 180 == 2 * direction(projection(A, i), line_intersection(f, altitude(projection(A, i), A, B))) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), projection(midpoint(B, G), Line(D, E)), projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)) we get 180 == 2 * direction(midpoint(B, G), projection(midpoint(B, G), Line(D, E))) - 2 * direction(projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C))) mod 360
By perpendicular_direction_conditions_v0_r on H, F, projection(A, i), line_intersection(f, altitude(projection(A, i), A, B)) we get 180 == 2 * direction(H, F) - 2 * direction(projection(A, i), line_intersection(f, altitude(projection(A, i), A, B))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)), D, A we get 180 == 2 * direction(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G))) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), C, E we get 180 == 2 * direction(projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C))) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on C, A, projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)) we get 180 == 2 * direction(C, A) - 2 * direction(projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C))) mod 360
By perpendicular_direction_conditions_v0_r on C, G, projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)) we get 180 == 2 * direction(C, G) - 2 * direction(projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C))) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)), projection(E, Line(B, G)), E we get 180 == 2 * direction(projection(A, i), line_intersection(h, altitude(projection(A, i), A, D))) - 2 * direction(projection(E, Line(B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on F, A, projection(A, i), line_intersection(f, altitude(projection(A, i), A, B)) we get 180 == 2 * direction(F, A) - 2 * direction(projection(A, i), line_intersection(f, altitude(projection(A, i), A, B))) mod 360
By perpendicular_direction_conditions_v0_r on H, F, line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i) we get 180 == 2 * direction(H, F) - 2 * direction(line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i), B, H we get 180 == 2 * direction(line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i)) - 2 * direction(B, H) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), midpoint(B, G), A we get 180 == 2 * direction(projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) - 2 * direction(midpoint(B, G), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), D, projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get 180 == 2 * direction(midpoint(B, G), D) - 2 * direction(projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i), A, B we get 180 == 2 * direction(line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i)) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on C, A, line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G)) we get 180 == 2 * direction(C, A) - 2 * direction(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on D, A, projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get 180 == 2 * direction(D, A) - 2 * direction(projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i), A, midpoint(B, G) we get 180 == 2 * direction(line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i)) - 2 * direction(A, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), C, G we get 180 == 2 * direction(projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C))) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(B, G), projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)) we get 180 == 2 * direction(A, midpoint(B, G)) - 2 * direction(projection(A, i), line_intersection(h, altitude(projection(A, i), A, D))) mod 360
By perpendicular_direction_conditions_v0_r on F, A, line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i) we get 180 == 2 * direction(F, A) - 2 * direction(line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)), E, projection(E, Line(B, G)) we get 180 == 2 * direction(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G))) - 2 * direction(E, projection(E, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on I, A, projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get 180 == 2 * direction(I, A) - 2 * direction(projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), projection(midpoint(B, G), Line(D, F)), projection(A, i), line_intersection(f, altitude(projection(A, i), A, B)) we get 180 == 2 * direction(midpoint(B, G), projection(midpoint(B, G), Line(D, F))) - 2 * direction(projection(A, i), line_intersection(f, altitude(projection(A, i), A, B))) mod 360
By sas_anti_congruence on midpoint(B, G), G, C, midpoint(B, G), B, H we get anti_congruent_triangles(B, H, midpoint(B, G), G, C, midpoint(B, G))
By perpendicular_direction_conditions_v0_r on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G)), midpoint(B, G), projection(midpoint(B, G), Line(D, E)) we get 180 == 2 * direction(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G))) - 2 * direction(midpoint(B, G), projection(midpoint(B, G), Line(D, E))) mod 360
By perpendicular_direction_conditions_v0_r on A, F, projection(A, i), line_intersection(f, altitude(projection(A, i), A, B)) we get 180 == 2 * direction(A, F) - 2 * direction(projection(A, i), line_intersection(f, altitude(projection(A, i), A, B))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)), D, I we get 180 == 2 * direction(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G))) - 2 * direction(D, I) mod 360
By perpendicular_direction_conditions_v0_r on projection(F, Line(B, G)), F, line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i) we get 180 == 2 * direction(projection(F, Line(B, G)), F) - 2 * direction(line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on C, E, projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)) we get 180 == 2 * direction(C, E) - 2 * direction(projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C))) mod 360
By perpendicular_direction_conditions_v0_r on A, D, projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get 180 == 2 * direction(A, D) - 2 * direction(projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i), midpoint(B, G), A we get 180 == 2 * direction(line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i)) - 2 * direction(midpoint(B, G), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G)), C, A we get 180 == 2 * direction(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G))) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on projection(E, Line(B, G)), E, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)) we get 180 == 2 * direction(projection(E, Line(B, G)), E) - 2 * direction(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on F, B, line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i) we get 180 == 2 * direction(F, B) - 2 * direction(line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i), projection(midpoint(B, G), Line(D, F)), midpoint(B, G) we get 180 == 2 * direction(line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i)) - 2 * direction(projection(midpoint(B, G), Line(D, F)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on G, A, projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)) we get 180 == 2 * direction(G, A) - 2 * direction(projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C))) mod 360
By perpendicular_direction_conditions_v0_r on projection(midpoint(B, G), Line(D, F)), midpoint(B, G), projection(A, i), line_intersection(f, altitude(projection(A, i), A, B)) we get 180 == 2 * direction(projection(midpoint(B, G), Line(D, F)), midpoint(B, G)) - 2 * direction(projection(A, i), line_intersection(f, altitude(projection(A, i), A, B))) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), A, midpoint(B, G) we get 180 == 2 * direction(projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) - 2 * direction(A, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)), D, midpoint(B, G) we get 180 == 2 * direction(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G))) - 2 * direction(D, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), E, C we get 180 == 2 * direction(projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C))) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), I, projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get 180 == 2 * direction(midpoint(B, G), I) - 2 * direction(projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) mod 360
By perpendicular_direction_conditions_v0_r on A, B, projection(A, i), line_intersection(f, altitude(projection(A, i), A, B)) we get 180 == 2 * direction(A, B) - 2 * direction(projection(A, i), line_intersection(f, altitude(projection(A, i), A, B))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)), midpoint(B, G), I we get 180 == 2 * direction(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G))) - 2 * direction(midpoint(B, G), I) mod 360
By perpendicular_direction_conditions_v0_r on E, projection(E, Line(B, G)), projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)) we get 180 == 2 * direction(E, projection(E, Line(B, G))) - 2 * direction(projection(A, i), line_intersection(h, altitude(projection(A, i), A, D))) mod 360
By perpendicular_direction_conditions_v0_r on E, G, line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G)) we get 180 == 2 * direction(E, G) - 2 * direction(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i), midpoint(B, G), projection(midpoint(B, G), Line(D, F)) we get 180 == 2 * direction(line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i)) - 2 * direction(midpoint(B, G), projection(midpoint(B, G), Line(D, F))) mod 360
By directions_draw_angle on projection(E, Line(B, G)), E, projection(E, Line(D, G)) we get exists(angle(projection(E, Line(B, G)), E, projection(E, Line(D, G))))
By perpendicular_direction_conditions_v0_r on C, G, line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G)) we get 180 == 2 * direction(C, G) - 2 * direction(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on A, F, line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i) we get 180 == 2 * direction(A, F) - 2 * direction(line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), A, projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get 180 == 2 * direction(midpoint(B, G), A) - 2 * direction(projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i), A, I we get 180 == 2 * direction(line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i)) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on E, projection(E, Line(B, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)) we get 180 == 2 * direction(E, projection(E, Line(B, G))) - 2 * direction(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)), I, D we get 180 == 2 * direction(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G))) - 2 * direction(I, D) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)), D, I we get 180 == 2 * direction(projection(A, i), line_intersection(h, altitude(projection(A, i), A, D))) - 2 * direction(D, I) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(B, G), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)) we get 180 == 2 * direction(D, midpoint(B, G)) - 2 * direction(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on F, projection(F, Line(B, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)) we get 180 == 2 * direction(F, projection(F, Line(B, G))) - 2 * direction(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G))) mod 360
By in_imply_collinear on line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get collinear(projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), line_intersection(altitude(projection(A, i), B, G), altitude(projection(A, Line(D, G)), A, D)))
By perpendicular_direction_conditions_v0_r on projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)), I, D we get 180 == 2 * direction(projection(A, i), line_intersection(h, altitude(projection(A, i), A, D))) - 2 * direction(I, D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i), D, I we get 180 == 2 * direction(line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i)) - 2 * direction(D, I) mod 360
By directions_draw_angle on projection(midpoint(B, G), Line(D, F)), midpoint(B, G), projection(midpoint(B, G), g) we get exists(angle(projection(midpoint(B, G), Line(D, F)), midpoint(B, G), projection(midpoint(B, G), g)))
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i), E, projection(E, Line(B, G)) we get 180 == 2 * direction(line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i)) - 2 * direction(E, projection(E, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), I, projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)) we get 180 == 2 * direction(midpoint(B, G), I) - 2 * direction(projection(A, i), line_intersection(h, altitude(projection(A, i), A, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i), F, projection(F, Line(B, G)) we get 180 == 2 * direction(line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i)) - 2 * direction(F, projection(F, Line(B, G))) mod 360
By line_inequality on Line(F, G), median(F, B, G), G we get Line(F, G) != median(F, B, G)
By perpendicular_direction_conditions_v0_r on midpoint(B, G), I, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)) we get 180 == 2 * direction(midpoint(B, G), I) - 2 * direction(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), I, line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i) we get 180 == 2 * direction(midpoint(B, G), I) - 2 * direction(line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), C, A we get 180 == 2 * direction(projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C))) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)), A, midpoint(B, G) we get 180 == 2 * direction(projection(A, i), line_intersection(h, altitude(projection(A, i), A, D))) - 2 * direction(A, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i), D, A we get 180 == 2 * direction(line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i)) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on projection(F, Line(B, G)), F, projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get 180 == 2 * direction(projection(F, Line(B, G)), F) - 2 * direction(projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(B, G), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)) we get 180 == 2 * direction(A, midpoint(B, G)) - 2 * direction(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i), midpoint(B, G), D we get 180 == 2 * direction(line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i)) - 2 * direction(midpoint(B, G), D) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), A, D we get 180 == 2 * direction(projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i), A, H we get 180 == 2 * direction(line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i)) - 2 * direction(A, H) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), D, A we get 180 == 2 * direction(projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on projection(E, Line(B, G)), E, projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get 180 == 2 * direction(projection(E, Line(B, G)), E) - 2 * direction(projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(B, G), line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i) we get 180 == 2 * direction(A, midpoint(B, G)) - 2 * direction(line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), A, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)) we get 180 == 2 * direction(midpoint(B, G), A) - 2 * direction(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), line_intersection(f, altitude(projection(A, i), A, B)), F, B we get 180 == 2 * direction(projection(A, i), line_intersection(f, altitude(projection(A, i), A, B))) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on A, C, line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G)) we get 180 == 2 * direction(A, C) - 2 * direction(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on G, A, line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G)) we get 180 == 2 * direction(G, A) - 2 * direction(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), line_intersection(f, altitude(projection(A, i), A, B)), A, H we get 180 == 2 * direction(projection(A, i), line_intersection(f, altitude(projection(A, i), A, B))) - 2 * direction(A, H) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i), I, A we get 180 == 2 * direction(line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i)) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), D, line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i) we get 180 == 2 * direction(midpoint(B, G), D) - 2 * direction(line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)), midpoint(B, G), A we get 180 == 2 * direction(projection(A, i), line_intersection(h, altitude(projection(A, i), A, D))) - 2 * direction(midpoint(B, G), A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i), D, midpoint(B, G) we get 180 == 2 * direction(line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i)) - 2 * direction(D, midpoint(B, G)) mod 360
By anti_similar_triangle_basic_properties on A, B, G, A, C, H we get not_collinear(A, B, G), not_collinear(A, C, H), angle(A, B, G) == 0 - angle(A, C, H) mod 360, angle(B, G, A) == 0 - angle(C, H, A) mod 360, angle(G, A, B) == 0 - angle(H, A, C) mod 360, log(distance(A, B)) + log(distance(C, H)) == log(distance(A, C)) + log(distance(B, G)), log(distance(B, G)) + log(distance(A, H)) == log(distance(C, H)) + log(distance(A, G)), log(distance(A, G)) + log(distance(A, C)) == log(distance(A, H)) + log(distance(A, B))
By perpendicular_direction_conditions_v0_r on midpoint(B, G), D, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)) we get 180 == 2 * direction(midpoint(B, G), D) - 2 * direction(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), G, C we get 180 == 2 * direction(projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C))) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)), I, midpoint(B, G) we get 180 == 2 * direction(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G))) - 2 * direction(I, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), E, A we get 180 == 2 * direction(projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C))) - 2 * direction(E, A) mod 360
By directions_draw_angle on projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), projection(midpoint(B, G), Line(G, I)) we get exists(angle(projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), projection(midpoint(B, G), Line(G, I))))
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(midpoint(B, G), Line(D, E)), midpoint(B, G) we get 180 == 2 * direction(projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C))) - 2 * direction(projection(midpoint(B, G), Line(D, E)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on H, A, line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i) we get 180 == 2 * direction(H, A) - 2 * direction(line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on I, D, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)) we get 180 == 2 * direction(I, D) - 2 * direction(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G)), A, C we get 180 == 2 * direction(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G))) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on E, projection(E, Line(B, G)), projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get 180 == 2 * direction(E, projection(E, Line(B, G))) - 2 * direction(projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) mod 360
By perpendicular_direction_conditions_v0_r on B, H, line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i) we get 180 == 2 * direction(B, H) - 2 * direction(line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on D, A, line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i) we get 180 == 2 * direction(D, A) - 2 * direction(line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on E, projection(E, Line(B, G)), line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i) we get 180 == 2 * direction(E, projection(E, Line(B, G))) - 2 * direction(line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i), A, F we get 180 == 2 * direction(line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i)) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on A, E, projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)) we get 180 == 2 * direction(A, E) - 2 * direction(projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C))) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(B, G), projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get 180 == 2 * direction(A, midpoint(B, G)) - 2 * direction(projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) mod 360
By perpendicular_direction_conditions_v0_r on G, C, projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)) we get 180 == 2 * direction(G, C) - 2 * direction(projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C))) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), line_intersection(f, altitude(projection(A, i), A, B)), H, F we get 180 == 2 * direction(projection(A, i), line_intersection(f, altitude(projection(A, i), A, B))) - 2 * direction(H, F) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), line_intersection(f, altitude(projection(A, i), A, B)), A, F we get 180 == 2 * direction(projection(A, i), line_intersection(f, altitude(projection(A, i), A, B))) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), projection(midpoint(B, G), Line(D, E)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G)) we get 180 == 2 * direction(midpoint(B, G), projection(midpoint(B, G), Line(D, E))) - 2 * direction(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on C, E, line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G)) we get 180 == 2 * direction(C, E) - 2 * direction(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on B, F, projection(A, i), line_intersection(f, altitude(projection(A, i), A, B)) we get 180 == 2 * direction(B, F) - 2 * direction(projection(A, i), line_intersection(f, altitude(projection(A, i), A, B))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i), H, A we get 180 == 2 * direction(line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i)) - 2 * direction(H, A) mod 360
By in_imply_collinear on line_intersection(median(projection(A, Line(D, G)), B, G), altitude(D, midpoint(B, G), projection(A, Line(D, G)))), midpoint(B, G), projection(A, Line(D, G)) we get collinear(midpoint(B, G), projection(A, Line(D, G)), line_intersection(median(projection(A, Line(D, G)), B, G), altitude(D, midpoint(B, G), projection(A, Line(D, G)))))
By perpendicular_direction_conditions_v0_r on I, midpoint(B, G), line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i) we get 180 == 2 * direction(I, midpoint(B, G)) - 2 * direction(line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i), midpoint(B, G), I we get 180 == 2 * direction(line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i)) - 2 * direction(midpoint(B, G), I) mod 360
By perpendicular_direction_conditions_v0_r on A, D, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)) we get 180 == 2 * direction(A, D) - 2 * direction(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i), H, F we get 180 == 2 * direction(line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i)) - 2 * direction(H, F) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), midpoint(B, G), D we get 180 == 2 * direction(projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) - 2 * direction(midpoint(B, G), D) mod 360
By perpendicular_direction_conditions_v0_r on A, D, projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)) we get 180 == 2 * direction(A, D) - 2 * direction(projection(A, i), line_intersection(h, altitude(projection(A, i), A, D))) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), line_intersection(f, altitude(projection(A, i), A, B)), H, B we get 180 == 2 * direction(projection(A, i), line_intersection(f, altitude(projection(A, i), A, B))) - 2 * direction(H, B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G)), A, G we get 180 == 2 * direction(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G))) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), line_intersection(f, altitude(projection(A, i), A, B)), B, H we get 180 == 2 * direction(projection(A, i), line_intersection(f, altitude(projection(A, i), A, B))) - 2 * direction(B, H) mod 360
By perpendicular_direction_conditions_v0_r on I, D, projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get 180 == 2 * direction(I, D) - 2 * direction(projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) mod 360
By perpendicular_direction_conditions_v0_r on H, B, projection(A, i), line_intersection(f, altitude(projection(A, i), A, B)) we get 180 == 2 * direction(H, B) - 2 * direction(projection(A, i), line_intersection(f, altitude(projection(A, i), A, B))) mod 360
By perpendicular_direction_conditions_v0_r on D, I, projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get 180 == 2 * direction(D, I) - 2 * direction(projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)), projection(F, Line(B, G)), F we get 180 == 2 * direction(projection(A, i), line_intersection(h, altitude(projection(A, i), A, D))) - 2 * direction(projection(F, Line(B, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i), B, A we get 180 == 2 * direction(line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i)) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), midpoint(B, G), projection(midpoint(B, G), Line(D, E)) we get 180 == 2 * direction(projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C))) - 2 * direction(midpoint(B, G), projection(midpoint(B, G), Line(D, E))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G)), E, G we get 180 == 2 * direction(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G))) - 2 * direction(E, G) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)), E, projection(E, Line(B, G)) we get 180 == 2 * direction(projection(A, i), line_intersection(h, altitude(projection(A, i), A, D))) - 2 * direction(E, projection(E, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), line_intersection(f, altitude(projection(A, i), A, B)), midpoint(B, G), projection(midpoint(B, G), Line(D, F)) we get 180 == 2 * direction(projection(A, i), line_intersection(f, altitude(projection(A, i), A, B))) - 2 * direction(midpoint(B, G), projection(midpoint(B, G), Line(D, F))) mod 360
By perpendicular_direction_conditions_v0_r on I, A, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)) we get 180 == 2 * direction(I, A) - 2 * direction(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), I, midpoint(B, G) we get 180 == 2 * direction(projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) - 2 * direction(I, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)), I, A we get 180 == 2 * direction(projection(A, i), line_intersection(h, altitude(projection(A, i), A, D))) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)), A, midpoint(B, G) we get 180 == 2 * direction(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G))) - 2 * direction(A, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on F, projection(F, Line(B, G)), projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)) we get 180 == 2 * direction(F, projection(F, Line(B, G))) - 2 * direction(projection(A, i), line_intersection(h, altitude(projection(A, i), A, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G)), C, G we get 180 == 2 * direction(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G))) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i), projection(E, Line(B, G)), E we get 180 == 2 * direction(line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i)) - 2 * direction(projection(E, Line(B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on A, C, projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)) we get 180 == 2 * direction(A, C) - 2 * direction(projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C))) mod 360
By perpendicular_direction_conditions_v0_r on A, D, line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i) we get 180 == 2 * direction(A, D) - 2 * direction(line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on D, I, line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i) we get 180 == 2 * direction(D, I) - 2 * direction(line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on B, A, line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i) we get 180 == 2 * direction(B, A) - 2 * direction(line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), F, projection(F, Line(B, G)) we get 180 == 2 * direction(projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) - 2 * direction(F, projection(F, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on G, E, line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G)) we get 180 == 2 * direction(G, E) - 2 * direction(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on I, D, projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)) we get 180 == 2 * direction(I, D) - 2 * direction(projection(A, i), line_intersection(h, altitude(projection(A, i), A, D))) mod 360
By perpendicular_direction_conditions_v0_r on F, projection(F, Line(B, G)), projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get 180 == 2 * direction(F, projection(F, Line(B, G))) - 2 * direction(projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) mod 360
By perpendicular_direction_conditions_v0_r on A, H, line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i) we get 180 == 2 * direction(A, H) - 2 * direction(line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on G, E, projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)) we get 180 == 2 * direction(G, E) - 2 * direction(projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C))) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), I, A we get 180 == 2 * direction(projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on A, H, projection(A, i), line_intersection(f, altitude(projection(A, i), A, B)) we get 180 == 2 * direction(A, H) - 2 * direction(projection(A, i), line_intersection(f, altitude(projection(A, i), A, B))) mod 360
By perpendicular_direction_conditions_v0_r on projection(E, Line(B, G)), E, line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i) we get 180 == 2 * direction(projection(E, Line(B, G)), E) - 2 * direction(line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on D, I, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)) we get 180 == 2 * direction(D, I) - 2 * direction(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on G, C, line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G)) we get 180 == 2 * direction(G, C) - 2 * direction(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on A, E, line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G)) we get 180 == 2 * direction(A, E) - 2 * direction(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), I, D we get 180 == 2 * direction(projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) - 2 * direction(I, D) mod 360
By directions_draw_angle on projection(midpoint(B, G), Line(B, I)), midpoint(B, G), F we get exists(angle(projection(midpoint(B, G), Line(B, I)), midpoint(B, G), F))
By perpendicular_direction_conditions_v0_r on B, F, line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i) we get 180 == 2 * direction(B, F) - 2 * direction(line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i)) mod 360
By directions_draw_angle on C, G, H we get exists(angle(C, G, H))
By perpendicular_direction_conditions_v0_r on D, midpoint(B, G), line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i) we get 180 == 2 * direction(D, midpoint(B, G)) - 2 * direction(line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on A, I, projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)) we get 180 == 2 * direction(A, I) - 2 * direction(projection(A, i), line_intersection(h, altitude(projection(A, i), A, D))) mod 360
By perpendicular_direction_conditions_v0_r on A, G, line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G)) we get 180 == 2 * direction(A, G) - 2 * direction(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), A, I we get 180 == 2 * direction(projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)), A, D we get 180 == 2 * direction(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G))) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on projection(midpoint(B, G), Line(D, E)), midpoint(B, G), projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)) we get 180 == 2 * direction(projection(midpoint(B, G), Line(D, E)), midpoint(B, G)) - 2 * direction(projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C))) mod 360
By perpendicular_direction_conditions_v0_r on E, G, projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)) we get 180 == 2 * direction(E, G) - 2 * direction(projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C))) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)), midpoint(B, G), I we get 180 == 2 * direction(projection(A, i), line_intersection(h, altitude(projection(A, i), A, D))) - 2 * direction(midpoint(B, G), I) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), A, G we get 180 == 2 * direction(projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C))) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)), A, I we get 180 == 2 * direction(projection(A, i), line_intersection(h, altitude(projection(A, i), A, D))) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on F, H, line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i) we get 180 == 2 * direction(F, H) - 2 * direction(line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G)), G, C we get 180 == 2 * direction(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G))) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(B, G), projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)) we get 180 == 2 * direction(D, midpoint(B, G)) - 2 * direction(projection(A, i), line_intersection(h, altitude(projection(A, i), A, D))) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), G, A we get 180 == 2 * direction(projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C))) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i), B, F we get 180 == 2 * direction(line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i)) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on E, A, projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)) we get 180 == 2 * direction(E, A) - 2 * direction(projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)), midpoint(B, G), A we get 180 == 2 * direction(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G))) - 2 * direction(midpoint(B, G), A) mod 360
By perpendicular_direction_conditions_v0_r on F, B, projection(A, i), line_intersection(f, altitude(projection(A, i), A, B)) we get 180 == 2 * direction(F, B) - 2 * direction(projection(A, i), line_intersection(f, altitude(projection(A, i), A, B))) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), line_intersection(f, altitude(projection(A, i), A, B)), F, H we get 180 == 2 * direction(projection(A, i), line_intersection(f, altitude(projection(A, i), A, B))) - 2 * direction(F, H) mod 360
By perpendicular_direction_conditions_v0_r on I, D, line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i) we get 180 == 2 * direction(I, D) - 2 * direction(line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on projection(midpoint(B, G), Line(D, F)), midpoint(B, G), line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i) we get 180 == 2 * direction(projection(midpoint(B, G), Line(D, F)), midpoint(B, G)) - 2 * direction(line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i), F, A we get 180 == 2 * direction(line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i)) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i), H, B we get 180 == 2 * direction(line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i)) - 2 * direction(H, B) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G)), C, E we get 180 == 2 * direction(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G))) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on B, H, projection(A, i), line_intersection(f, altitude(projection(A, i), A, B)) we get 180 == 2 * direction(B, H) - 2 * direction(projection(A, i), line_intersection(f, altitude(projection(A, i), A, B))) mod 360
By perpendicular_direction_conditions_v0_r on F, H, projection(A, i), line_intersection(f, altitude(projection(A, i), A, B)) we get 180 == 2 * direction(F, H) - 2 * direction(projection(A, i), line_intersection(f, altitude(projection(A, i), A, B))) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), midpoint(B, G), I we get 180 == 2 * direction(projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) - 2 * direction(midpoint(B, G), I) mod 360
By perpendicular_direction_conditions_v0_r on A, B, line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i) we get 180 == 2 * direction(A, B) - 2 * direction(line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i)) mod 360
By directions_draw_angle on D, E, projection(E, Line(B, G)) we get exists(angle(D, E, projection(E, Line(B, G))))
By perpendicular_direction_conditions_v0_r on projection(A, i), line_intersection(f, altitude(projection(A, i), A, B)), B, F we get 180 == 2 * direction(projection(A, i), line_intersection(f, altitude(projection(A, i), A, B))) - 2 * direction(B, F) mod 360
By in_imply_collinear on line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)), projection(E, h), E we get collinear(E, projection(E, h), line_intersection(altitude(E, A, D), altitude(projection(A, i), B, G)))
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)), projection(F, Line(B, G)), F we get 180 == 2 * direction(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G))) - 2 * direction(projection(F, Line(B, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(E, Line(B, G)), E we get 180 == 2 * direction(projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) - 2 * direction(projection(E, Line(B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)), D, A we get 180 == 2 * direction(projection(A, i), line_intersection(h, altitude(projection(A, i), A, D))) - 2 * direction(D, A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i), F, H we get 180 == 2 * direction(line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i)) - 2 * direction(F, H) mod 360
By perpendicular_direction_conditions_v0_r on D, I, projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)) we get 180 == 2 * direction(D, I) - 2 * direction(projection(A, i), line_intersection(h, altitude(projection(A, i), A, D))) mod 360
By perpendicular_direction_conditions_v0_r on A, I, projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get 180 == 2 * direction(A, I) - 2 * direction(projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G)), G, A we get 180 == 2 * direction(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G))) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i), projection(F, Line(B, G)), F we get 180 == 2 * direction(line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i)) - 2 * direction(projection(F, Line(B, G)), F) mod 360
By in_imply_collinear on orthocenter(B, midpoint(B, G), projection(A, i)), midpoint(B, G), projection(midpoint(B, G), i) we get collinear(midpoint(B, G), projection(midpoint(B, G), i), orthocenter(B, midpoint(B, G), projection(A, i)))
By perpendicular_direction_conditions_v0_r on H, B, line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i) we get 180 == 2 * direction(H, B) - 2 * direction(line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i), I, midpoint(B, G) we get 180 == 2 * direction(line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i)) - 2 * direction(I, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)), F, projection(F, Line(B, G)) we get 180 == 2 * direction(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G))) - 2 * direction(F, projection(F, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G)), A, E we get 180 == 2 * direction(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G))) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G)), E, C we get 180 == 2 * direction(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G))) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G)), E, A we get 180 == 2 * direction(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G))) - 2 * direction(E, A) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)), F, projection(F, Line(B, G)) we get 180 == 2 * direction(projection(A, i), line_intersection(h, altitude(projection(A, i), A, D))) - 2 * direction(F, projection(F, Line(B, G))) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)), I, midpoint(B, G) we get 180 == 2 * direction(projection(A, i), line_intersection(h, altitude(projection(A, i), A, D))) - 2 * direction(I, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), A, projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)) we get 180 == 2 * direction(midpoint(B, G), A) - 2 * direction(projection(A, i), line_intersection(h, altitude(projection(A, i), A, D))) mod 360
By in_imply_collinear on line_intersection(altitude(projection(A, i), A, B), altitude(projection(A, i), D, F)), line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i) we get collinear(projection(A, i), line_intersection(f, altitude(projection(A, i), A, B)), line_intersection(altitude(projection(A, i), A, B), altitude(projection(A, i), D, F)))
By perpendicular_direction_conditions_v0_r on projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)), A, D we get 180 == 2 * direction(projection(A, i), line_intersection(h, altitude(projection(A, i), A, D))) - 2 * direction(A, D) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), A, C we get 180 == 2 * direction(projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C))) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on D, A, projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)) we get 180 == 2 * direction(D, A) - 2 * direction(projection(A, i), line_intersection(h, altitude(projection(A, i), A, D))) mod 360
By perpendicular_direction_conditions_v0_r on D, midpoint(B, G), projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get 180 == 2 * direction(D, midpoint(B, G)) - 2 * direction(projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) mod 360
By perpendicular_direction_conditions_v0_r on E, A, line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G)) we get 180 == 2 * direction(E, A) - 2 * direction(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)), A, I we get 180 == 2 * direction(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G))) - 2 * direction(A, I) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), D, I we get 180 == 2 * direction(projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) - 2 * direction(D, I) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), E, projection(E, Line(B, G)) we get 180 == 2 * direction(projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) - 2 * direction(E, projection(E, Line(B, G))) mod 360
By in_imply_collinear on line_intersection(Line(F, projection(A, i)), altitude(A, F, projection(A, i))), projection(A, i), F we get collinear(F, projection(A, i), line_intersection(Line(F, projection(A, i)), altitude(A, F, projection(A, i))))
By perpendicular_direction_conditions_v0_r on E, C, line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G)) we get 180 == 2 * direction(E, C) - 2 * direction(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), G, E we get 180 == 2 * direction(projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C))) - 2 * direction(G, E) mod 360
By perpendicular_direction_conditions_v0_r on B, A, projection(A, i), line_intersection(f, altitude(projection(A, i), A, B)) we get 180 == 2 * direction(B, A) - 2 * direction(projection(A, i), line_intersection(f, altitude(projection(A, i), A, B))) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), D, midpoint(B, G) we get 180 == 2 * direction(projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) - 2 * direction(D, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i), F, B we get 180 == 2 * direction(line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i)) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), projection(midpoint(B, G), Line(D, F)), line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i) we get 180 == 2 * direction(midpoint(B, G), projection(midpoint(B, G), Line(D, F))) - 2 * direction(line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(B, G), projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)) we get 180 == 2 * direction(I, midpoint(B, G)) - 2 * direction(projection(A, i), line_intersection(h, altitude(projection(A, i), A, D))) mod 360
By perpendicular_direction_conditions_v0_r on E, C, projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)) we get 180 == 2 * direction(E, C) - 2 * direction(projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C))) mod 360
By perpendicular_direction_conditions_v0_r on I, A, projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)) we get 180 == 2 * direction(I, A) - 2 * direction(projection(A, i), line_intersection(h, altitude(projection(A, i), A, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i), I, D we get 180 == 2 * direction(line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i)) - 2 * direction(I, D) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)), midpoint(B, G), D we get 180 == 2 * direction(projection(A, i), line_intersection(h, altitude(projection(A, i), A, D))) - 2 * direction(midpoint(B, G), D) mod 360
By perpendicular_direction_conditions_v0_r on I, A, line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i) we get 180 == 2 * direction(I, A) - 2 * direction(line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)), I, A we get 180 == 2 * direction(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G))) - 2 * direction(I, A) mod 360
By perpendicular_direction_conditions_v0_r on F, projection(F, Line(B, G)), line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i) we get 180 == 2 * direction(F, projection(F, Line(B, G))) - 2 * direction(line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on I, midpoint(B, G), projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get 180 == 2 * direction(I, midpoint(B, G)) - 2 * direction(projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G)), G, E we get 180 == 2 * direction(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G))) - 2 * direction(G, E) mod 360
By in_imply_collinear on line_intersection(Line(E, projection(A, Line(D, G))), altitude(G, E, projection(A, Line(D, G)))), E, projection(A, Line(D, G)) we get collinear(E, projection(A, Line(D, G)), line_intersection(Line(E, projection(A, Line(D, G))), altitude(G, E, projection(A, Line(D, G)))))
By perpendicular_direction_conditions_v0_r on D, A, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)) we get 180 == 2 * direction(D, A) - 2 * direction(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)), projection(E, Line(B, G)), E we get 180 == 2 * direction(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G))) - 2 * direction(projection(E, Line(B, G)), E) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)), D, midpoint(B, G) we get 180 == 2 * direction(projection(A, i), line_intersection(h, altitude(projection(A, i), A, D))) - 2 * direction(D, midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on H, A, projection(A, i), line_intersection(f, altitude(projection(A, i), A, B)) we get 180 == 2 * direction(H, A) - 2 * direction(projection(A, i), line_intersection(f, altitude(projection(A, i), A, B))) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), A, line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i) we get 180 == 2 * direction(midpoint(B, G), A) - 2 * direction(line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G)), projection(midpoint(B, G), Line(D, E)), midpoint(B, G) we get 180 == 2 * direction(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G))) - 2 * direction(projection(midpoint(B, G), Line(D, E)), midpoint(B, G)) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), A, E we get 180 == 2 * direction(projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C))) - 2 * direction(A, E) mod 360
By perpendicular_direction_conditions_v0_r on projection(F, Line(B, G)), F, projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)) we get 180 == 2 * direction(projection(F, Line(B, G)), F) - 2 * direction(projection(A, i), line_intersection(h, altitude(projection(A, i), A, D))) mod 360
By perpendicular_direction_conditions_v0_r on projection(F, Line(B, G)), F, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)) we get 180 == 2 * direction(projection(F, Line(B, G)), F) - 2 * direction(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G))) mod 360
By perpendicular_direction_conditions_v0_r on projection(E, Line(B, G)), E, projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)) we get 180 == 2 * direction(projection(E, Line(B, G)), E) - 2 * direction(projection(A, i), line_intersection(h, altitude(projection(A, i), A, D))) mod 360
By in_imply_collinear on line_intersection(altitude(projection(A, Line(D, G)), A, C), altitude(projection(A, Line(D, G)), D, E)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G)) we get collinear(projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), line_intersection(altitude(projection(A, Line(D, G)), A, C), altitude(projection(A, Line(D, G)), D, E)))
By perpendicular_direction_conditions_v0_r on projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(F, Line(B, G)), F we get 180 == 2 * direction(projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) - 2 * direction(projection(F, Line(B, G)), F) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), line_intersection(f, altitude(projection(A, i), A, B)), F, A we get 180 == 2 * direction(projection(A, i), line_intersection(f, altitude(projection(A, i), A, B))) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(B, G), D, projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)) we get 180 == 2 * direction(midpoint(B, G), D) - 2 * direction(projection(A, i), line_intersection(h, altitude(projection(A, i), A, D))) mod 360
By perpendicular_direction_conditions_v0_r on projection(A, i), line_intersection(f, altitude(projection(A, i), A, B)), A, B we get 180 == 2 * direction(projection(A, i), line_intersection(f, altitude(projection(A, i), A, B))) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on projection(midpoint(B, G), Line(D, E)), midpoint(B, G), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G)) we get 180 == 2 * direction(projection(midpoint(B, G), Line(D, E)), midpoint(B, G)) - 2 * direction(line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G))) mod 360
By in_imply_collinear on orthocenter(A, E, projection(A, Line(D, G))), projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)) we get collinear(projection(A, Line(D, G)), orthocenter(A, E, projection(A, Line(D, G))), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)))
By double_perpendicular_and_parallel_v0 on altitude(projection(A, i), A, D), h, Line(E, F) we get parallel(Line(E, F), altitude(projection(A, i), A, D))
By in_imply_collinear on orthocenter(A, midpoint(B, G), projection(A, i)), projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)) we get collinear(projection(A, i), orthocenter(A, midpoint(B, G), projection(A, i)), line_intersection(h, altitude(projection(A, i), A, D)))
By in_imply_collinear on line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)) we get collinear(projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), line_intersection(altitude(projection(A, Line(D, G)), A, D), altitude(projection(A, Line(D, G)), B, G)))
By directions_draw_angle on H, G, E we get exists(angle(H, G, E))
By anti_similar_triangle_basic_properties on A, E, F, A, B, G we get not_collinear(A, E, F), not_collinear(A, B, G), angle(A, E, F) == 0 - angle(A, B, G) mod 360, angle(E, F, A) == 0 - angle(B, G, A) mod 360, angle(F, A, E) == 0 - angle(G, A, B) mod 360, log(distance(A, B)) + log(distance(E, F)) == log(distance(A, E)) + log(distance(B, G)), log(distance(B, G)) + log(distance(A, F)) == log(distance(E, F)) + log(distance(A, G)), log(distance(A, F)) + log(distance(A, B)) == log(distance(A, G)) + log(distance(A, E))
By reverse_direction on projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G) we get 180 == direction(projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G)) - direction(midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D)))) mod 360
By in_imply_collinear on line_intersection(altitude(midpoint(B, G), A, B), altitude(projection(A, i), D, F)), midpoint(B, G), projection(midpoint(B, G), f) we get collinear(midpoint(B, G), projection(midpoint(B, G), f), line_intersection(altitude(midpoint(B, G), A, B), altitude(projection(A, i), D, F)))
By directions_draw_angle on C, B, E we get exists(angle(C, B, E))
By in_imply_collinear on orthocenter(F, projection(A, i), orthocenter(A, B, D)), F, projection(F, altitude(A, B, D)) we get collinear(F, projection(F, altitude(A, B, D)), orthocenter(F, projection(A, i), orthocenter(A, B, D)))
By in_imply_collinear on orthocenter(D, F, projection(A, i)), F, projection(F, i) we get collinear(F, projection(F, i), orthocenter(D, F, projection(A, i)))
By in_imply_collinear on line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)), line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i) we get collinear(projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)), line_intersection(altitude(F, B, G), altitude(projection(A, i), A, D)))
By directions_draw_angle on projection(F, Line(B, G)), F, E we get exists(angle(projection(F, Line(B, G)), F, E))
By directions_draw_angle on projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), orthocenter(A, D, G) we get exists(angle(projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), orthocenter(A, D, G)))
By directions_draw_angle on H, I, B we get exists(angle(H, I, B))
By directions_draw_angle on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), G, line_intersection(h, altitude(projection(A, i), A, D)) we get exists(angle(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), G, line_intersection(h, altitude(projection(A, i), A, D))))
By line_inequality on altitude(D, E, projection(A, Line(D, G))), altitude(A, B, D), D we get altitude(A, B, D) != altitude(D, E, projection(A, Line(D, G)))
By in_imply_collinear on line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)), projection(F, h), F we get collinear(F, projection(F, h), line_intersection(altitude(F, A, D), altitude(projection(A, Line(D, G)), B, G)))
By double_perpendicular_and_parallel_v0 on altitude(orthocenter(A, D, G), E, projection(A, Line(D, G))), Line(E, projection(A, Line(D, G))), altitude(A, E, projection(A, Line(D, G))) we get parallel(altitude(A, E, projection(A, Line(D, G))), altitude(orthocenter(A, D, G), E, projection(A, Line(D, G))))
By in_imply_collinear on line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)), line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i) we get collinear(projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)), line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, Line(D, G)), B, G)))
By in_imply_collinear on orthocenter(B, F, projection(A, i)), line_intersection(f, altitude(projection(A, i), A, B)), projection(A, i) we get collinear(projection(A, i), orthocenter(B, F, projection(A, i)), line_intersection(f, altitude(projection(A, i), A, B)))
By line_containment_inequality on line_intersection(Line(F, projection(A, i)), altitude(B, F, projection(A, i))), orthocenter(A, B, D), Line(F, projection(A, i)) we get orthocenter(A, B, D) != line_intersection(Line(F, projection(A, i)), altitude(B, F, projection(A, i)))
By sas_anti_similarity on F, B, G, E, G, B we get anti_similar_triangles(B, E, G, G, F, B)
By directions_draw_angle on I, C, midpoint(B, G) we get exists(angle(I, C, midpoint(B, G)))
By directions_draw_angle on projection(F, altitude(A, B, D)), F, midpoint(B, G) we get exists(angle(projection(F, altitude(A, B, D)), F, midpoint(B, G)))
By double_perpendicular_and_parallel_v0_r on h, Line(C, H), altitude(projection(A, Line(D, G)), B, G) we get perpendicular(Line(C, H), altitude(projection(A, Line(D, G)), B, G))
By directions_draw_angle on B, H, I we get exists(angle(B, H, I))
By line_inequality on Line(B, E), Line(G, I), B we get Line(B, E) != Line(G, I)
By in_imply_collinear on line_intersection(altitude(midpoint(B, G), D, E), altitude(projection(A, Line(D, G)), A, C)), projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)) we get collinear(projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)), line_intersection(altitude(midpoint(B, G), D, E), altitude(projection(A, Line(D, G)), A, C)))
By in_imply_collinear on orthocenter(D, E, projection(A, Line(D, G))), E, projection(E, Line(D, G)) we get collinear(E, projection(E, Line(D, G)), orthocenter(D, E, projection(A, Line(D, G))))
By in_imply_collinear on line_intersection(Line(F, projection(A, i)), altitude(B, F, projection(A, i))), projection(A, i), F we get collinear(F, projection(A, i), line_intersection(Line(F, projection(A, i)), altitude(B, F, projection(A, i))))
By in_imply_collinear on orthocenter(A, midpoint(B, G), projection(A, Line(D, G))), projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get collinear(projection(A, Line(D, G)), orthocenter(A, midpoint(B, G), projection(A, Line(D, G))), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By in_imply_collinear on orthocenter(A, F, projection(A, i)), projection(A, i), line_intersection(f, altitude(projection(A, i), A, B)) we get collinear(projection(A, i), orthocenter(A, F, projection(A, i)), line_intersection(f, altitude(projection(A, i), A, B)))
By line_inequality on Line(E, I), g, I we get g != Line(E, I)
By not_in_line_equivalent_to_not_collinear_v0_r on E, H, G we get E not in Line(G, H)
By directions_draw_angle on F, midpoint(B, G), I we get exists(angle(F, midpoint(B, G), I))
By not_in_line_equivalent_to_not_collinear_v0_r on I, C, midpoint(B, G) we get I not in Line(C, midpoint(B, G))
By directions_draw_angle on I, G, F we get exists(angle(I, G, F))
By line_inequality on altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G))), Line(G, I), orthocenter(A, D, G) we get Line(G, I) != altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G)))
By in_imply_collinear on orthocenter(D, midpoint(B, G), projection(A, Line(D, G))), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)) we get collinear(projection(A, Line(D, G)), orthocenter(D, midpoint(B, G), projection(A, Line(D, G))), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By reverse_direction on I, orthocenter(A, D, G) we get 180 == direction(I, orthocenter(A, D, G)) - direction(orthocenter(A, D, G), I) mod 360
By directions_draw_angle on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), G, midpoint(B, G) we get exists(angle(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), G, midpoint(B, G)))
By directions_draw_angle on projection(midpoint(B, G), Line(D, F)), midpoint(B, G), projection(midpoint(B, G), Line(D, G)) we get exists(angle(projection(midpoint(B, G), Line(D, F)), midpoint(B, G), projection(midpoint(B, G), Line(D, G))))
By line_inequality on altitude(D, F, projection(A, i)), Line(E, F), D we get Line(E, F) != altitude(D, F, projection(A, i))
By sas_congruence on I, C, G, I, B, H we get congruent_triangles(B, H, I, C, G, I)
By directions_draw_angle on E, A, projection(A, median(E, B, G)) we get exists(angle(E, A, projection(A, median(E, B, G))))
By in_imply_collinear on line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)) we get collinear(projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), line_intersection(altitude(E, B, G), altitude(projection(A, Line(D, G)), A, D)))
By directions_draw_angle on projection(E, h), E, midpoint(B, G) we get exists(angle(projection(E, h), E, midpoint(B, G)))
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, i), A, D))), Line(I, orthocenter(A, D, G)), B we get Line(I, orthocenter(A, D, G)) != Line(B, line_intersection(h, altitude(projection(A, i), A, D)))
By in_imply_collinear on line_intersection(altitude(midpoint(B, G), D, F), altitude(projection(A, i), A, B)), projection(A, i), line_intersection(f, altitude(projection(A, i), A, B)) we get collinear(projection(A, i), line_intersection(f, altitude(projection(A, i), A, B)), line_intersection(altitude(midpoint(B, G), D, F), altitude(projection(A, i), A, B)))
By line_inequality on altitude(orthocenter(A, D, G), E, projection(A, Line(D, G))), median(F, B, G), orthocenter(A, D, G) we get median(F, B, G) != altitude(orthocenter(A, D, G), E, projection(A, Line(D, G)))
By directions_draw_angle on E, B, H we get exists(angle(E, B, H))
By in_imply_collinear on line_intersection(median(projection(A, i), B, G), altitude(D, midpoint(B, G), projection(A, i))), projection(A, i), midpoint(B, G) we get collinear(midpoint(B, G), projection(A, i), line_intersection(median(projection(A, i), B, G), altitude(D, midpoint(B, G), projection(A, i))))
By in_imply_collinear on orthocenter(E, orthocenter(A, D, G), projection(A, Line(D, G))), E, projection(E, altitude(A, D, G)) we get collinear(E, projection(E, altitude(A, D, G)), orthocenter(E, orthocenter(A, D, G), projection(A, Line(D, G))))
By directions_draw_angle on orthocenter(A, B, D), H, B we get exists(angle(orthocenter(A, B, D), H, B))
By directions_draw_angle on G, A, projection(A, median(E, B, G)) we get exists(angle(G, A, projection(A, median(E, B, G))))
By in_imply_collinear on line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)), projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)) we get collinear(projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)), line_intersection(altitude(projection(A, i), A, D), altitude(projection(A, i), B, G)))
By in_imply_collinear on orthocenter(E, G, projection(A, Line(D, G))), projection(A, Line(D, G)), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)) we get collinear(projection(A, Line(D, G)), orthocenter(E, G, projection(A, Line(D, G))), line_intersection(g, altitude(projection(A, Line(D, G)), A, C)))
By directions_draw_angle on projection(F, h), B, E we get exists(angle(projection(F, h), B, E))
By in_imply_collinear on orthocenter(D, midpoint(B, G), projection(A, i)), line_intersection(h, altitude(projection(A, i), A, D)), projection(A, i) we get collinear(projection(A, i), orthocenter(D, midpoint(B, G), projection(A, i)), line_intersection(h, altitude(projection(A, i), A, D)))
By directions_draw_angle on midpoint(B, G), I, orthocenter(A, D, G) we get exists(angle(midpoint(B, G), I, orthocenter(A, D, G)))
By directions_draw_angle on projection(A, median(F, B, G)), A, B we get exists(angle(projection(A, median(F, B, G)), A, B))
By in_imply_collinear on orthocenter(midpoint(B, G), projection(A, i), orthocenter(A, B, D)), midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D)) we get collinear(midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D)), orthocenter(midpoint(B, G), projection(A, i), orthocenter(A, B, D)))
By reverse_direction on F, projection(F, altitude(A, B, D)) we get 180 == direction(F, projection(F, altitude(A, B, D))) - direction(projection(F, altitude(A, B, D)), F) mod 360
By in_imply_collinear on line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), projection(A, Line(D, G)) we get collinear(projection(A, Line(D, G)), line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), line_intersection(altitude(F, B, G), altitude(projection(A, Line(D, G)), A, D)))
By in_imply_collinear on line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)), projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)) we get collinear(projection(A, i), line_intersection(h, altitude(projection(A, i), A, D)), line_intersection(altitude(E, B, G), altitude(projection(A, i), A, D)))
By directions_draw_angle on projection(midpoint(B, G), Line(B, I)), midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D)) we get exists(angle(projection(midpoint(B, G), Line(B, I)), midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D))))
By in_imply_collinear on line_intersection(altitude(midpoint(B, G), A, C), altitude(projection(A, Line(D, G)), D, E)), projection(midpoint(B, G), g), midpoint(B, G) we get collinear(midpoint(B, G), projection(midpoint(B, G), g), line_intersection(altitude(midpoint(B, G), A, C), altitude(projection(A, Line(D, G)), D, E)))
By in_imply_collinear on line_intersection(median(projection(A, Line(D, G)), B, G), altitude(A, midpoint(B, G), projection(A, Line(D, G)))), projection(A, Line(D, G)), midpoint(B, G) we get collinear(midpoint(B, G), projection(A, Line(D, G)), line_intersection(median(projection(A, Line(D, G)), B, G), altitude(A, midpoint(B, G), projection(A, Line(D, G)))))
By directions_draw_angle on G, orthocenter(A, D, G), C we get exists(angle(G, orthocenter(A, D, G), C))
By directions_draw_angle on projection(F, altitude(A, B, D)), F, E we get exists(angle(projection(F, altitude(A, B, D)), F, E))
By directions_draw_angle on F, E, I we get exists(angle(F, E, I))
By line_inequality on altitude(A, midpoint(B, G), projection(A, Line(D, G))), Line(F, projection(A, i)), A we get Line(F, projection(A, i)) != altitude(A, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i)), Line(E, F), orthocenter(A, B, D) we get Line(E, F) != altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i))
By line_containment_inequality on line_intersection(median(projection(A, i), B, G), altitude(D, midpoint(B, G), projection(A, i))), I, median(projection(A, i), B, G) we get I != line_intersection(median(projection(A, i), B, G), altitude(D, midpoint(B, G), projection(A, i)))
By line_inequality on Line(G, H), Line(E, F), H we get Line(E, F) != Line(G, H)
By double_perpendicular_and_parallel_v0 on altitude(G, midpoint(B, G), projection(A, Line(D, G))), median(projection(A, Line(D, G)), B, G), altitude(D, midpoint(B, G), projection(A, Line(D, G))) we get parallel(altitude(D, midpoint(B, G), projection(A, Line(D, G))), altitude(G, midpoint(B, G), projection(A, Line(D, G))))
By reverse_direction on E, projection(E, Line(B, G)) we get 180 == direction(E, projection(E, Line(B, G))) - direction(projection(E, Line(B, G)), E) mod 360
By reverse_direction on F, midpoint(B, G) we get 180 == direction(F, midpoint(B, G)) - direction(midpoint(B, G), F) mod 360
By directions_draw_angle on I, midpoint(B, G), F we get exists(angle(I, midpoint(B, G), F))
By directions_draw_angle on projection(midpoint(B, G), Line(G, I)), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D))) we get exists(angle(projection(midpoint(B, G), Line(G, I)), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D)))))
By in_imply_collinear on line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)), E, projection(E, h) we get collinear(E, projection(E, h), line_intersection(altitude(E, A, D), altitude(projection(A, Line(D, G)), B, G)))
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, i), A, D))), h, G we get h != Line(G, line_intersection(h, altitude(projection(A, i), A, D)))
By sas_anti_similarity on G, E, H, B, F, C we get anti_similar_triangles(B, C, F, G, H, E)
By directions_draw_angle on F, E, B we get exists(angle(F, E, B))
By altitude_definition on F, I, midpoint(B, G), Line(E, F) we get Line(E, F) == altitude(F, I, midpoint(B, G))
By directions_draw_angle on G, F, B we get exists(angle(G, F, B))
By directions_draw_angle on projection(midpoint(B, G), Line(D, E)), midpoint(B, G), A we get exists(angle(projection(midpoint(B, G), Line(D, E)), midpoint(B, G), A))
By reverse_direction on F, G we get 180 == direction(F, G) - direction(G, F) mod 360
By directions_draw_angle on projection(A, i), orthocenter(A, B, D), H we get exists(angle(projection(A, i), orthocenter(A, B, D), H))
By directions_draw_angle on projection(F, Line(H, orthocenter(A, B, D))), F, I we get exists(angle(projection(F, Line(H, orthocenter(A, B, D))), F, I))
By directions_draw_angle on C, midpoint(B, G), G we get exists(angle(C, midpoint(B, G), G))
By in_imply_collinear on line_intersection(median(projection(A, i), B, G), altitude(A, midpoint(B, G), projection(A, i))), projection(A, i), midpoint(B, G) we get collinear(midpoint(B, G), projection(A, i), line_intersection(median(projection(A, i), B, G), altitude(A, midpoint(B, G), projection(A, i))))
By in_imply_collinear on line_intersection(Line(E, projection(A, Line(D, G))), altitude(A, E, projection(A, Line(D, G)))), projection(A, Line(D, G)), E we get collinear(E, projection(A, Line(D, G)), line_intersection(Line(E, projection(A, Line(D, G))), altitude(A, E, projection(A, Line(D, G)))))
By directions_draw_angle on projection(E, Line(B, G)), E, G we get exists(angle(projection(E, Line(B, G)), E, G))
By line_inequality on altitude(D, E, projection(A, Line(D, G))), Line(E, projection(A, Line(D, G))), D we get Line(E, projection(A, Line(D, G))) != altitude(D, E, projection(A, Line(D, G)))
By sas_anti_similarity on E, F, B, F, E, G we get anti_similar_triangles(B, E, F, G, F, E)
By anti_similar_triangle_basic_properties on A, F, E, A, G, B we get not_collinear(A, E, F), not_collinear(A, B, G), angle(A, F, E) == 0 - angle(A, G, B) mod 360, angle(F, E, A) == 0 - angle(G, B, A) mod 360, angle(E, A, F) == 0 - angle(B, A, G) mod 360, log(distance(A, F)) + log(distance(B, G)) == log(distance(A, G)) + log(distance(E, F)), log(distance(B, G)) + log(distance(A, E)) == log(distance(E, F)) + log(distance(A, B)), log(distance(A, B)) + log(distance(A, F)) == log(distance(A, E)) + log(distance(A, G))
By line_containment_inequality on line_intersection(Line(E, projection(A, Line(D, G))), altitude(G, E, projection(A, Line(D, G)))), A, Line(E, projection(A, Line(D, G))) we get A != line_intersection(Line(E, projection(A, Line(D, G))), altitude(G, E, projection(A, Line(D, G))))
By directions_draw_angle on I, E, C we get exists(angle(I, E, C))
By directions_draw_angle on orthocenter(A, D, G), I, E we get exists(angle(orthocenter(A, D, G), I, E))
By in_imply_collinear on orthocenter(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G))), projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G) we get collinear(midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G)), orthocenter(midpoint(B, G), orthocenter(A, D, G), projection(A, Line(D, G))))
By directions_draw_angle on F, G, projection(F, h) we get exists(angle(F, G, projection(F, h)))
By in_imply_collinear on orthocenter(G, midpoint(B, G), projection(A, Line(D, G))), midpoint(B, G), projection(midpoint(B, G), Line(D, G)) we get collinear(midpoint(B, G), projection(midpoint(B, G), Line(D, G)), orthocenter(G, midpoint(B, G), projection(A, Line(D, G))))
By directions_draw_angle on projection(E, altitude(A, D, G)), E, F we get exists(angle(projection(E, altitude(A, D, G)), E, F))
By reverse_direction on midpoint(B, G), projection(midpoint(B, G), Line(D, F)) we get 180 == direction(midpoint(B, G), projection(midpoint(B, G), Line(D, F))) - direction(projection(midpoint(B, G), Line(D, F)), midpoint(B, G)) mod 360
By double_perpendicular_and_parallel_v0 on altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G))), median(projection(A, Line(D, G)), B, G), altitude(G, midpoint(B, G), projection(A, Line(D, G))) we get parallel(altitude(G, midpoint(B, G), projection(A, Line(D, G))), altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G))))
By directions_draw_angle on projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), orthocenter(A, B, D) we get exists(angle(projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), orthocenter(A, B, D)))
By reverse_direction on F, projection(F, Line(B, G)) we get 180 == direction(F, projection(F, Line(B, G))) - direction(projection(F, Line(B, G)), F) mod 360
By directions_draw_angle on G, F, H we get exists(angle(G, F, H))
By reverse_direction on E, B we get 180 == direction(E, B) - direction(B, E) mod 360
By isosceles_triangle_properties on I, G, H we get distance(G, I) == distance(H, I), angle(G, H, I) == angle(I, G, H) mod 360
By double_perpendicular_and_parallel_v0 on altitude(projection(A, i), A, D), h, Line(C, H) we get parallel(Line(C, H), altitude(projection(A, i), A, D))
By in_imply_collinear on line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)), F, projection(F, h) we get collinear(F, projection(F, h), line_intersection(altitude(F, A, D), altitude(projection(A, i), B, G)))
By line_inequality on altitude(D, F, midpoint(B, G)), Line(E, projection(A, Line(D, G))), D we get altitude(D, F, midpoint(B, G)) != Line(E, projection(A, Line(D, G)))
By directions_draw_angle on midpoint(B, G), E, G we get exists(angle(midpoint(B, G), E, G))
By directions_draw_angle on B, midpoint(B, G), C we get exists(angle(B, midpoint(B, G), C))
By reverse_direction on projection(F, Line(B, G)), F we get 180 == direction(projection(F, Line(B, G)), F) - direction(F, projection(F, Line(B, G))) mod 360
By anti_similar_triangle_basic_properties on B, H, D, G, C, D we get not_collinear(B, D, H), not_collinear(C, D, G), angle(B, H, D) == 0 - angle(G, C, D) mod 360, angle(H, D, B) == 0 - angle(C, D, G) mod 360, angle(D, B, H) == 0 - angle(D, G, C) mod 360, log(distance(B, H)) + log(distance(C, D)) == log(distance(C, G)) + log(distance(D, H)), log(distance(C, D)) + log(distance(B, D)) == log(distance(D, H)) + log(distance(D, G)), log(distance(B, D)) + log(distance(C, G)) == log(distance(D, G)) + log(distance(B, H))
By directions_draw_angle on projection(F, Line(B, G)), F, midpoint(B, G) we get exists(angle(projection(F, Line(B, G)), F, midpoint(B, G)))
By isosceles_triangle_properties on midpoint(B, G), C, H we get distance(C, midpoint(B, G)) == distance(H, midpoint(B, G)), angle(C, H, midpoint(B, G)) == angle(midpoint(B, G), C, H) mod 360
By sas_anti_congruence on G, B, H, B, G, C we get anti_congruent_triangles(B, C, G, G, H, B)
By directions_draw_angle on E, A, projection(A, median(F, B, G)) we get exists(angle(E, A, projection(A, median(F, B, G))))
By sas_congruence on H, B, I, G, C, I we get congruent_triangles(B, H, I, C, G, I)
By double_perpendicular_and_parallel_v0 on altitude(A, E, projection(A, Line(D, G))), Line(E, projection(A, Line(D, G))), altitude(D, E, projection(A, Line(D, G))) we get parallel(altitude(A, E, projection(A, Line(D, G))), altitude(D, E, projection(A, Line(D, G))))
By directions_draw_angle on center(c), F, projection(F, altitude(A, B, D)) we get exists(angle(center(c), F, projection(F, altitude(A, B, D))))
By directions_draw_angle on projection(E, altitude(A, D, G)), E, H we get exists(angle(projection(E, altitude(A, D, G)), E, H))
By directions_draw_angle on B, G, H we get exists(angle(B, G, H))
By line_inequality on Line(E, I), Line(I, orthocenter(A, D, G)), E we get Line(E, I) != Line(I, orthocenter(A, D, G))
By line_inequality on Line(G, H), median(E, B, G), G we get Line(G, H) != median(E, B, G)
By double_perpendicular_and_parallel_v0 on altitude(projection(A, Line(D, G)), A, D), h, Line(C, H) we get parallel(Line(C, H), altitude(projection(A, Line(D, G)), A, D))
By directions_draw_angle on projection(midpoint(B, G), Line(D, E)), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G))) we get exists(angle(projection(midpoint(B, G), Line(D, E)), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G)))))
By reverse_direction on H, orthocenter(A, B, D) we get 180 == direction(H, orthocenter(A, B, D)) - direction(orthocenter(A, B, D), H) mod 360
By directions_draw_angle on projection(A, i), A, projection(A, median(E, B, G)) we get exists(angle(projection(A, i), A, projection(A, median(E, B, G))))
By line_inequality on Line(E, I), altitude(A, B, D), I we get Line(E, I) != altitude(A, B, D)
By double_perpendicular_and_parallel_v0 on altitude(B, midpoint(B, G), projection(A, i)), median(projection(A, i), B, G), altitude(D, midpoint(B, G), projection(A, i)) we get parallel(altitude(B, midpoint(B, G), projection(A, i)), altitude(D, midpoint(B, G), projection(A, i)))
By double_perpendicular_and_parallel_v0 on altitude(A, midpoint(B, G), projection(A, i)), median(projection(A, i), B, G), altitude(B, midpoint(B, G), projection(A, i)) we get parallel(altitude(A, midpoint(B, G), projection(A, i)), altitude(B, midpoint(B, G), projection(A, i)))
By directions_draw_angle on projection(E, altitude(A, D, G)), E, D we get exists(angle(projection(E, altitude(A, D, G)), E, D))
By directions_draw_angle on midpoint(B, G), E, projection(E, Line(C, D)) we get exists(angle(midpoint(B, G), E, projection(E, Line(C, D))))
By altitude_definition on F, midpoint(B, G), A, Line(E, F) we get Line(E, F) == altitude(F, A, midpoint(B, G))
By double_perpendicular_and_parallel_v0 on altitude(E, A, D), h, Line(E, F) we get parallel(Line(E, F), altitude(E, A, D))
By directions_draw_angle on F, I, H we get exists(angle(F, I, H))
By directions_draw_angle on C, orthocenter(A, D, G), A we get exists(angle(C, orthocenter(A, D, G), A))
By directions_draw_angle on F, G, I we get exists(angle(F, G, I))
By directions_draw_angle on midpoint(B, G), E, projection(E, Line(C, orthocenter(A, D, G))) we get exists(angle(midpoint(B, G), E, projection(E, Line(C, orthocenter(A, D, G)))))
By not_in_line_equivalent_to_not_collinear_v0_r on orthocenter(A, D, G), B, E we get orthocenter(A, D, G) not in Line(B, E)
By reverse_direction on orthocenter(A, B, D), I we get 180 == direction(orthocenter(A, B, D), I) - direction(I, orthocenter(A, B, D)) mod 360
By altitude_definition on F, D, A, Line(E, F) we get Line(E, F) == altitude(F, A, D)
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), projection(midpoint(B, G), f) we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), projection(midpoint(B, G), f)))
By directions_draw_angle on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), B, C we get exists(angle(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), B, C))
By double_perpendicular_and_parallel_v0 on Line(C, H), h, altitude(E, A, D) we get parallel(Line(C, H), altitude(E, A, D))
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), projection(midpoint(B, G), i) we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), projection(midpoint(B, G), i)))
By altitude_definition on F, D, midpoint(B, G), Line(E, F) we get Line(E, F) == altitude(F, D, midpoint(B, G))
By sas_anti_similarity on I, B, F, I, G, E we get anti_similar_triangles(B, F, I, G, E, I)
By sas_anti_similarity on B, G, E, G, B, F we get anti_similar_triangles(B, E, G, G, F, B)
By directions_draw_angle on projection(F, Line(H, orthocenter(A, B, D))), F, A we get exists(angle(projection(F, Line(H, orthocenter(A, B, D))), F, A))
By anti_similar_triangle_basic_properties on C, G, D, H, B, D we get not_collinear(C, D, G), not_collinear(B, D, H), angle(C, G, D) == 0 - angle(H, B, D) mod 360, angle(G, D, C) == 0 - angle(B, D, H) mod 360, angle(D, C, G) == 0 - angle(D, H, B) mod 360, log(distance(B, H)) + log(distance(D, G)) == log(distance(C, G)) + log(distance(B, D)), log(distance(B, D)) + log(distance(C, D)) == log(distance(D, G)) + log(distance(D, H)), log(distance(C, D)) + log(distance(B, H)) == log(distance(D, H)) + log(distance(C, G))
By directions_draw_angle on H, I, C we get exists(angle(H, I, C))
By directions_draw_angle on H, A, projection(A, median(F, B, G)) we get exists(angle(H, A, projection(A, median(F, B, G))))
By line_inequality on altitude(D, E, projection(A, Line(D, G))), median(projection(A, i), B, G), D we get median(projection(A, i), B, G) != altitude(D, E, projection(A, Line(D, G)))
By line_inequality on Line(F, G), Line(C, F), G we get Line(C, F) != Line(F, G)
By directions_draw_angle on projection(midpoint(B, G), i), midpoint(B, G), E we get exists(angle(projection(midpoint(B, G), i), midpoint(B, G), E))
By double_perpendicular_and_parallel_v0_r on h, Line(E, F), altitude(projection(A, Line(D, G)), B, G) we get perpendicular(Line(E, F), altitude(projection(A, Line(D, G)), B, G))
By line_inequality on Line(F, G), Line(D, F), G we get Line(D, F) != Line(F, G)
By directions_draw_angle on orthocenter(A, B, D), G, F we get exists(angle(orthocenter(A, B, D), G, F))
By reverse_direction on projection(A, median(F, B, G)), A we get 180 == direction(projection(A, median(F, B, G)), A) - direction(A, projection(A, median(F, B, G))) mod 360
By directions_draw_angle on E, B, projection(E, h) we get exists(angle(E, B, projection(E, h)))
By directions_draw_angle on projection(midpoint(B, G), Line(G, I)), midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G)) we get exists(angle(projection(midpoint(B, G), Line(G, I)), midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G))))
By line_inequality on Line(H, I), Line(C, F), H we get Line(C, F) != Line(H, I)
By directions_draw_angle on line_intersection(h, altitude(projection(A, i), A, D)), G, F we get exists(angle(line_intersection(h, altitude(projection(A, i), A, D)), G, F))
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), G we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), G))
By isosceles_triangle_properties on midpoint(B, G), E, F we get distance(E, midpoint(B, G)) == distance(F, midpoint(B, G)), angle(E, F, midpoint(B, G)) == angle(midpoint(B, G), E, F) mod 360
By line_inequality on altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G))), i, orthocenter(A, D, G) we get i != altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G)))
By sas_anti_similarity on H, E, G, C, F, B we get anti_similar_triangles(B, C, F, G, H, E)
By directions_draw_angle on midpoint(B, G), F, projection(F, Line(H, orthocenter(A, B, D))) we get exists(angle(midpoint(B, G), F, projection(F, Line(H, orthocenter(A, B, D)))))
By line_inequality on Line(C, midpoint(B, G)), Line(E, projection(A, Line(D, G))), C we get Line(C, midpoint(B, G)) != Line(E, projection(A, Line(D, G)))
By line_inequality on altitude(A, midpoint(B, G), projection(A, Line(D, G))), Line(E, projection(A, Line(D, G))), A we get Line(E, projection(A, Line(D, G))) != altitude(A, midpoint(B, G), projection(A, Line(D, G)))
By directions_draw_angle on F, midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D))) we get exists(angle(F, midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D)))))
By reverse_direction on B, E we get 180 == direction(B, E) - direction(E, B) mod 360
By reverse_direction on projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G) we get 180 == direction(projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G)) - direction(midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D))) mod 360
By directions_draw_angle on projection(E, h), G, F we get exists(angle(projection(E, h), G, F))
By line_inequality on altitude(G, midpoint(B, G), projection(A, Line(D, G))), Line(C, H), G we get Line(C, H) != altitude(G, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(orthocenter(A, B, D), F, projection(A, i)), Line(D, G), orthocenter(A, B, D) we get Line(D, G) != altitude(orthocenter(A, B, D), F, projection(A, i))
By directions_draw_angle on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), G, orthocenter(A, D, G) we get exists(angle(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), G, orthocenter(A, D, G)))
By directions_draw_angle on projection(midpoint(B, G), Line(D, G)), midpoint(B, G), projection(midpoint(B, G), Line(D, E)) we get exists(angle(projection(midpoint(B, G), Line(D, G)), midpoint(B, G), projection(midpoint(B, G), Line(D, E))))
By directions_draw_angle on midpoint(B, G), I, orthocenter(A, B, D) we get exists(angle(midpoint(B, G), I, orthocenter(A, B, D)))
By line_inequality on Line(F, I), g, F we get g != Line(F, I)
By similar_triangle_basic_properties on A, B, G, A, F, E we get not_collinear(A, B, G), not_collinear(A, E, F), angle(A, B, G) == angle(A, F, E) mod 360, angle(B, G, A) == angle(F, E, A) mod 360, angle(E, A, F) == angle(G, A, B) mod 360, log(distance(A, B)) + log(distance(E, F)) == log(distance(A, F)) + log(distance(B, G)), log(distance(B, G)) + log(distance(A, E)) == log(distance(E, F)) + log(distance(A, G)), log(distance(A, E)) + log(distance(A, B)) == log(distance(A, G)) + log(distance(A, F))
By directions_draw_angle on orthocenter(A, D, G), G, H we get exists(angle(orthocenter(A, D, G), G, H))
By line_inequality on Line(C, midpoint(B, G)), Line(D, F), midpoint(B, G) we get Line(D, F) != Line(C, midpoint(B, G))
By line_inequality on altitude(D, F, projection(A, i)), Line(C, orthocenter(A, D, G)), D we get Line(C, orthocenter(A, D, G)) != altitude(D, F, projection(A, i))
By line_inequality on Line(H, I), median(projection(A, Line(D, G)), B, G), I we get Line(H, I) != median(projection(A, Line(D, G)), B, G)
By directions_draw_angle on projection(F, Line(B, G)), F, orthocenter(A, B, D) we get exists(angle(projection(F, Line(B, G)), F, orthocenter(A, B, D)))
By directions_draw_angle on line_intersection(h, altitude(projection(A, i), A, D)), G, H we get exists(angle(line_intersection(h, altitude(projection(A, i), A, D)), G, H))
By directions_draw_angle on orthocenter(A, B, D), H, F we get exists(angle(orthocenter(A, B, D), H, F))
By not_in_line_equivalent_to_not_collinear_v0_r on midpoint(B, G), E, I we get midpoint(B, G) not in Line(E, I)
By double_perpendicular_and_parallel_v0_r on h, Line(C, H), altitude(E, B, G) we get perpendicular(Line(C, H), altitude(E, B, G))
By altitude_definition on F, A, I, Line(E, F) we get Line(E, F) == altitude(F, A, I)
By directions_draw_angle on projection(midpoint(B, G), Line(D, F)), midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D)) we get exists(angle(projection(midpoint(B, G), Line(D, F)), midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D))))
By directions_draw_angle on I, F, B we get exists(angle(I, F, B))
By altitude_definition on E, midpoint(B, G), A, Line(E, F) we get Line(E, F) == altitude(E, A, midpoint(B, G))
By directions_draw_angle on projection(midpoint(B, G), f), midpoint(B, G), F we get exists(angle(projection(midpoint(B, G), f), midpoint(B, G), F))
By sas_anti_congruence on C, G, I, H, B, I we get anti_congruent_triangles(B, H, I, G, C, I)
By directions_draw_angle on line_intersection(h, altitude(projection(A, i), A, D)), B, projection(E, h) we get exists(angle(line_intersection(h, altitude(projection(A, i), A, D)), B, projection(E, h)))
By line_inequality on altitude(B, F, projection(A, i)), median(projection(A, Line(D, G)), B, G), B we get altitude(B, F, projection(A, i)) != median(projection(A, Line(D, G)), B, G)
By line_inequality on Line(G, H), Line(C, F), G we get Line(C, F) != Line(G, H)
By directions_draw_angle on H, G, projection(F, h) we get exists(angle(H, G, projection(F, h)))
By anti_similar_triangle_basic_properties on F, E, D, C, B, I we get not_collinear(D, E, F), not_collinear(B, C, I), angle(F, E, D) == 0 - angle(C, B, I) mod 360, angle(E, D, F) == 0 - angle(B, I, C) mod 360, angle(D, F, E) == 0 - angle(I, C, B) mod 360, log(distance(B, C)) + log(distance(D, E)) == log(distance(E, F)) + log(distance(B, I)), log(distance(B, I)) + log(distance(D, F)) == log(distance(D, E)) + log(distance(C, I)), log(distance(C, I)) + log(distance(E, F)) == log(distance(D, F)) + log(distance(B, C))
By directions_draw_angle on projection(F, Line(H, orthocenter(A, B, D))), F, center(c) we get exists(angle(projection(F, Line(H, orthocenter(A, B, D))), F, center(c)))
By line_containment_inequality on line_intersection(median(projection(A, i), B, G), altitude(A, midpoint(B, G), projection(A, i))), orthocenter(A, D, G), median(projection(A, i), B, G) we get orthocenter(A, D, G) != line_intersection(median(projection(A, i), B, G), altitude(A, midpoint(B, G), projection(A, i)))
By double_perpendicular_and_parallel_v0 on altitude(D, F, projection(A, i)), Line(F, projection(A, i)), altitude(orthocenter(A, B, D), F, projection(A, i)) we get parallel(altitude(D, F, projection(A, i)), altitude(orthocenter(A, B, D), F, projection(A, i)))
By directions_draw_angle on D, I, orthocenter(A, B, D) we get exists(angle(D, I, orthocenter(A, B, D)))
By directions_draw_angle on B, midpoint(B, G), F we get exists(angle(B, midpoint(B, G), F))
By directions_draw_angle on F, orthocenter(A, B, D), I we get exists(angle(F, orthocenter(A, B, D), I))
By directions_draw_angle on D, midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D)) we get exists(angle(D, midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D))))
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, i), A, D))), Line(D, F), B we get Line(D, F) != Line(B, line_intersection(h, altitude(projection(A, i), A, D)))
By line_inequality on Line(C, midpoint(B, G)), Line(D, E), C we get Line(D, E) != Line(C, midpoint(B, G))
By directions_draw_angle on F, G, orthocenter(A, B, D) we get exists(angle(F, G, orthocenter(A, B, D)))
By directions_draw_angle on projection(E, h), E, I we get exists(angle(projection(E, h), E, I))
By reverse_direction on projection(midpoint(B, G), Line(D, E)), midpoint(B, G) we get 180 == direction(projection(midpoint(B, G), Line(D, E)), midpoint(B, G)) - direction(midpoint(B, G), projection(midpoint(B, G), Line(D, E))) mod 360
By directions_draw_angle on G, H, center(c) we get exists(angle(G, H, center(c)))
By directions_draw_angle on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), G, E we get exists(angle(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), G, E))
By directions_draw_angle on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), B, midpoint(B, G) we get exists(angle(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), B, midpoint(B, G)))
By double_perpendicular_and_parallel_v0 on altitude(A, midpoint(B, G), projection(A, Line(D, G))), median(projection(A, Line(D, G)), B, G), altitude(G, midpoint(B, G), projection(A, Line(D, G))) we get parallel(altitude(A, midpoint(B, G), projection(A, Line(D, G))), altitude(G, midpoint(B, G), projection(A, Line(D, G))))
By directions_draw_angle on projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), B we get exists(angle(projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), B))
By directions_draw_angle on A, I, orthocenter(A, D, G) we get exists(angle(A, I, orthocenter(A, D, G)))
By directions_draw_angle on projection(F, altitude(A, B, D)), F, projection(F, h) we get exists(angle(projection(F, altitude(A, B, D)), F, projection(F, h)))
By line_inequality on Line(H, midpoint(B, G)), Line(I, orthocenter(A, D, G)), midpoint(B, G) we get Line(H, midpoint(B, G)) != Line(I, orthocenter(A, D, G))
By directions_draw_angle on projection(midpoint(B, G), Line(D, G)), midpoint(B, G), C we get exists(angle(projection(midpoint(B, G), Line(D, G)), midpoint(B, G), C))
By directions_draw_angle on C, I, F we get exists(angle(C, I, F))
By similar_triangle_basic_properties on A, G, B, A, C, H we get not_collinear(A, B, G), not_collinear(A, C, H), angle(A, C, H) == angle(A, G, B) mod 360, angle(C, H, A) == angle(G, B, A) mod 360, angle(B, A, G) == angle(H, A, C) mod 360, log(distance(A, C)) + log(distance(B, G)) == log(distance(A, G)) + log(distance(C, H)), log(distance(B, G)) + log(distance(A, H)) == log(distance(C, H)) + log(distance(A, B)), log(distance(A, B)) + log(distance(A, C)) == log(distance(A, H)) + log(distance(A, G))
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), Line(F, projection(A, i)), B we get Line(F, projection(A, i)) != Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By reverse_direction on projection(F, Line(H, orthocenter(A, B, D))), F we get 180 == direction(projection(F, Line(H, orthocenter(A, B, D))), F) - direction(F, projection(F, Line(H, orthocenter(A, B, D)))) mod 360
By directions_draw_angle on F, midpoint(B, G), projection(midpoint(B, G), f) we get exists(angle(F, midpoint(B, G), projection(midpoint(B, G), f)))
By line_inequality on Line(C, midpoint(B, G)), g, midpoint(B, G) we get g != Line(C, midpoint(B, G))
By directions_draw_angle on B, midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D)) we get exists(angle(B, midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D))))
By altitude_definition on E, D, I, Line(E, F) we get Line(E, F) == altitude(E, D, I)
By directions_draw_angle on orthocenter(A, D, G), A, projection(A, median(F, B, G)) we get exists(angle(orthocenter(A, D, G), A, projection(A, median(F, B, G))))
By not_in_line_equivalent_to_not_collinear_v0_r on orthocenter(A, B, D), F, I we get orthocenter(A, B, D) not in Line(F, I)
By similar_triangle_basic_properties on E, F, D, C, B, I we get not_collinear(D, E, F), not_collinear(B, C, I), angle(C, B, I) == angle(E, F, D) mod 360, angle(B, I, C) == angle(F, D, E) mod 360, angle(D, E, F) == angle(I, C, B) mod 360, log(distance(B, C)) + log(distance(D, F)) == log(distance(E, F)) + log(distance(B, I)), log(distance(B, I)) + log(distance(D, E)) == log(distance(D, F)) + log(distance(C, I)), log(distance(C, I)) + log(distance(E, F)) == log(distance(D, E)) + log(distance(B, C))
By directions_draw_angle on I, E, orthocenter(A, D, G) we get exists(angle(I, E, orthocenter(A, D, G)))
By directions_draw_angle on projection(midpoint(B, G), g), midpoint(B, G), E we get exists(angle(projection(midpoint(B, G), g), midpoint(B, G), E))
By line_inequality on Line(G, H), Line(B, G), H we get Line(B, G) != Line(G, H)
By directions_draw_angle on projection(F, altitude(A, B, D)), F, center(c) we get exists(angle(projection(F, altitude(A, B, D)), F, center(c)))
By directions_draw_angle on orthocenter(A, D, G), G, F we get exists(angle(orthocenter(A, D, G), G, F))
By anti_similar_triangle_basic_properties on C, A, H, B, A, G we get not_collinear(A, C, H), not_collinear(A, B, G), angle(C, A, H) == 0 - angle(B, A, G) mod 360, angle(A, H, C) == 0 - angle(A, G, B) mod 360, angle(H, C, A) == 0 - angle(G, B, A) mod 360, log(distance(A, B)) + log(distance(A, H)) == log(distance(A, C)) + log(distance(A, G)), log(distance(A, G)) + log(distance(C, H)) == log(distance(A, H)) + log(distance(B, G)), log(distance(B, G)) + log(distance(A, C)) == log(distance(C, H)) + log(distance(A, B))
By sas_congruence on I, B, H, I, C, G we get congruent_triangles(B, H, I, C, G, I)
By parallel_line_angles_v1 on B, G, C, H we get parallel(Line(B, G), Line(C, H))
By altitude_definition on E, A, D, Line(E, F) we get Line(E, F) == altitude(E, A, D)
By isosceles_triangle_properties on I, B, H we get distance(B, I) == distance(H, I), angle(B, H, I) == angle(I, B, H) mod 360
By directions_draw_angle on orthocenter(A, D, G), C, I we get exists(angle(orthocenter(A, D, G), C, I))
By line_inequality on altitude(orthocenter(A, B, D), F, projection(A, i)), Line(C, F), orthocenter(A, B, D) we get Line(C, F) != altitude(orthocenter(A, B, D), F, projection(A, i))
By directions_draw_angle on projection(midpoint(B, G), Line(D, F)), midpoint(B, G), G we get exists(angle(projection(midpoint(B, G), Line(D, F)), midpoint(B, G), G))
By directions_draw_angle on projection(E, Line(C, orthocenter(A, D, G))), E, projection(E, altitude(A, D, G)) we get exists(angle(projection(E, Line(C, orthocenter(A, D, G))), E, projection(E, altitude(A, D, G))))
By directions_draw_angle on projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G))) we get exists(angle(projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G)))))
By not_in_line_equivalent_to_not_collinear_v0_r on orthocenter(A, B, D), midpoint(B, G), C we get orthocenter(A, B, D) not in Line(C, midpoint(B, G))
By directions_draw_angle on orthocenter(A, B, D), I, midpoint(B, G) we get exists(angle(orthocenter(A, B, D), I, midpoint(B, G)))
By directions_draw_angle on orthocenter(A, B, D), F, I we get exists(angle(orthocenter(A, B, D), F, I))
By similar_triangle_basic_properties on A, E, F, A, G, B we get not_collinear(A, E, F), not_collinear(A, B, G), angle(A, E, F) == angle(A, G, B) mod 360, angle(E, F, A) == angle(G, B, A) mod 360, angle(B, A, G) == angle(F, A, E) mod 360, log(distance(A, E)) + log(distance(B, G)) == log(distance(A, G)) + log(distance(E, F)), log(distance(B, G)) + log(distance(A, F)) == log(distance(E, F)) + log(distance(A, B)), log(distance(A, B)) + log(distance(A, E)) == log(distance(A, F)) + log(distance(A, G))
By directions_draw_angle on projection(A, i), orthocenter(A, B, D), I we get exists(angle(projection(A, i), orthocenter(A, B, D), I))
By directions_draw_angle on H, midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D))) we get exists(angle(H, midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D)))))
By directions_draw_angle on orthocenter(A, D, G), C, G we get exists(angle(orthocenter(A, D, G), C, G))
By directions_draw_angle on I, orthocenter(A, B, D), A we get exists(angle(I, orthocenter(A, B, D), A))
By double_perpendicular_and_parallel_v0 on altitude(G, E, projection(A, Line(D, G))), Line(E, projection(A, Line(D, G))), altitude(orthocenter(A, D, G), E, projection(A, Line(D, G))) we get parallel(altitude(G, E, projection(A, Line(D, G))), altitude(orthocenter(A, D, G), E, projection(A, Line(D, G))))
By reverse_direction on E, midpoint(B, G) we get 180 == direction(E, midpoint(B, G)) - direction(midpoint(B, G), E) mod 360
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), Line(C, D), G we get Line(C, D) != Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By not_in_line_equivalent_to_not_collinear_v0_r on B, F, I we get B not in Line(F, I)
By line_inequality on altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G))), Line(B, I), orthocenter(A, D, G) we get Line(B, I) != altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G)))
By directions_draw_angle on orthocenter(A, D, G), C, H we get exists(angle(orthocenter(A, D, G), C, H))
By double_perpendicular_and_parallel_v0_r on h, Line(E, F), altitude(F, B, G) we get perpendicular(Line(E, F), altitude(F, B, G))
By directions_draw_angle on orthocenter(A, D, G), E, I we get exists(angle(orthocenter(A, D, G), E, I))
By line_inequality on altitude(orthocenter(A, B, D), F, projection(A, i)), i, orthocenter(A, B, D) we get i != altitude(orthocenter(A, B, D), F, projection(A, i))
By double_perpendicular_and_parallel_v0 on altitude(A, midpoint(B, G), projection(A, Line(D, G))), median(projection(A, Line(D, G)), B, G), altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G))) we get parallel(altitude(A, midpoint(B, G), projection(A, Line(D, G))), altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G))))
By line_containment_inequality on line_intersection(median(projection(A, Line(D, G)), B, G), altitude(D, midpoint(B, G), projection(A, Line(D, G)))), D, median(projection(A, Line(D, G)), B, G) we get D != line_intersection(median(projection(A, Line(D, G)), B, G), altitude(D, midpoint(B, G), projection(A, Line(D, G))))
By directions_draw_angle on H, B, E we get exists(angle(H, B, E))
By not_in_line_equivalent_to_not_collinear_v0_r on orthocenter(A, B, D), midpoint(B, G), H we get orthocenter(A, B, D) not in Line(H, midpoint(B, G))
By directions_draw_angle on projection(A, median(F, B, G)), A, D we get exists(angle(projection(A, median(F, B, G)), A, D))
By directions_draw_angle on projection(midpoint(B, G), Line(D, E)), midpoint(B, G), G we get exists(angle(projection(midpoint(B, G), Line(D, E)), midpoint(B, G), G))
By directions_draw_angle on H, F, I we get exists(angle(H, F, I))
By directions_draw_angle on projection(F, h), F, I we get exists(angle(projection(F, h), F, I))
By reverse_direction on E, I we get 180 == direction(E, I) - direction(I, E) mod 360
By directions_draw_angle on projection(F, h), G, line_intersection(h, altitude(projection(A, i), A, D)) we get exists(angle(projection(F, h), G, line_intersection(h, altitude(projection(A, i), A, D))))
By not_in_line_equivalent_to_not_collinear_v0_r on D, H, I we get D not in Line(H, I)
By line_inequality on Line(G, H), median(F, B, G), H we get Line(G, H) != median(F, B, G)
By line_inequality on altitude(orthocenter(A, B, D), F, projection(A, i)), Line(B, I), orthocenter(A, B, D) we get Line(B, I) != altitude(orthocenter(A, B, D), F, projection(A, i))
By directions_draw_angle on midpoint(B, G), E, projection(E, altitude(A, D, G)) we get exists(angle(midpoint(B, G), E, projection(E, altitude(A, D, G))))
By line_inequality on Line(F, G), h, F we get h != Line(F, G)
By directions_draw_angle on B, E, projection(E, Line(D, G)) we get exists(angle(B, E, projection(E, Line(D, G))))
By directions_draw_angle on projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G)) we get exists(angle(projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G))))
By line_inequality on Line(F, I), Line(E, H), I we get Line(E, H) != Line(F, I)
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), Line(C, orthocenter(A, D, G)), G we get Line(C, orthocenter(A, D, G)) != Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By directions_draw_angle on orthocenter(A, B, D), H, C we get exists(angle(orthocenter(A, B, D), H, C))
By directions_draw_angle on projection(midpoint(B, G), Line(B, I)), midpoint(B, G), E we get exists(angle(projection(midpoint(B, G), Line(B, I)), midpoint(B, G), E))
By directions_draw_angle on midpoint(B, G), F, center(c) we get exists(angle(midpoint(B, G), F, center(c)))
By directions_draw_angle on I, G, H we get exists(angle(I, G, H))
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), projection(midpoint(B, G), i) we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), projection(midpoint(B, G), i)))
By directions_draw_angle on G, midpoint(B, G), projection(midpoint(B, G), Line(D, E)) we get exists(angle(G, midpoint(B, G), projection(midpoint(B, G), Line(D, E))))
By directions_draw_angle on H, G, C we get exists(angle(H, G, C))
By double_perpendicular_and_parallel_v0 on altitude(A, F, projection(A, i)), Line(F, projection(A, i)), altitude(D, F, projection(A, i)) we get parallel(altitude(A, F, projection(A, i)), altitude(D, F, projection(A, i)))
By directions_draw_angle on B, E, G we get exists(angle(B, E, G))
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, i), A, D))), Line(H, orthocenter(A, B, D)), G we get Line(H, orthocenter(A, B, D)) != Line(G, line_intersection(h, altitude(projection(A, i), A, D)))
By not_in_line_equivalent_to_not_collinear_v0_r on midpoint(B, G), G, H we get midpoint(B, G) not in Line(G, H)
By line_inequality on altitude(orthocenter(A, D, G), E, projection(A, Line(D, G))), Line(H, orthocenter(A, B, D)), orthocenter(A, D, G) we get Line(H, orthocenter(A, B, D)) != altitude(orthocenter(A, D, G), E, projection(A, Line(D, G)))
By directions_draw_angle on A, E, projection(E, altitude(A, D, G)) we get exists(angle(A, E, projection(E, altitude(A, D, G))))
By directions_draw_angle on orthocenter(A, D, G), midpoint(B, G), C we get exists(angle(orthocenter(A, D, G), midpoint(B, G), C))
By directions_draw_angle on F, G, midpoint(B, G) we get exists(angle(F, G, midpoint(B, G)))
By reverse_direction on midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G)) we get 180 == direction(midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G))) - direction(projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G)) mod 360
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), C we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), C))
By directions_draw_angle on C, midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G))) we get exists(angle(C, midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G)))))
By line_inequality on Line(H, midpoint(B, G)), Line(C, F), H we get Line(C, F) != Line(H, midpoint(B, G))
By directions_draw_angle on H, C, midpoint(B, G) we get exists(angle(H, C, midpoint(B, G)))
By double_perpendicular_and_parallel_v0 on altitude(orthocenter(A, B, D), F, projection(A, i)), Line(F, projection(A, i)), altitude(A, F, projection(A, i)) we get parallel(altitude(A, F, projection(A, i)), altitude(orthocenter(A, B, D), F, projection(A, i)))
By directions_draw_angle on A, midpoint(B, G), projection(midpoint(B, G), Line(D, E)) we get exists(angle(A, midpoint(B, G), projection(midpoint(B, G), Line(D, E))))
By directions_draw_angle on center(c), E, projection(E, Line(B, G)) we get exists(angle(center(c), E, projection(E, Line(B, G))))
By double_perpendicular_and_parallel_v0 on altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G))), median(projection(A, Line(D, G)), B, G), altitude(D, midpoint(B, G), projection(A, Line(D, G))) we get parallel(altitude(D, midpoint(B, G), projection(A, Line(D, G))), altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G))))
By directions_draw_angle on projection(midpoint(B, G), Line(G, I)), midpoint(B, G), F we get exists(angle(projection(midpoint(B, G), Line(G, I)), midpoint(B, G), F))
By line_containment_inequality on line_intersection(median(projection(A, i), B, G), altitude(D, midpoint(B, G), projection(A, i))), D, median(projection(A, i), B, G) we get D != line_intersection(median(projection(A, i), B, G), altitude(D, midpoint(B, G), projection(A, i)))
By directions_draw_angle on midpoint(B, G), I, F we get exists(angle(midpoint(B, G), I, F))
By directions_draw_angle on projection(midpoint(B, G), Line(D, F)), midpoint(B, G), C we get exists(angle(projection(midpoint(B, G), Line(D, F)), midpoint(B, G), C))
By reverse_direction on I, F we get 180 == direction(I, F) - direction(F, I) mod 360
By directions_draw_angle on projection(E, Line(C, orthocenter(A, D, G))), E, center(c) we get exists(angle(projection(E, Line(C, orthocenter(A, D, G))), E, center(c)))
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, i), A, D))), altitude(A, D, G), G we get altitude(A, D, G) != Line(G, line_intersection(h, altitude(projection(A, i), A, D)))
By similar_triangle_basic_properties on F, E, D, B, C, I we get not_collinear(D, E, F), not_collinear(B, C, I), angle(B, C, I) == angle(F, E, D) mod 360, angle(C, I, B) == angle(E, D, F) mod 360, angle(D, F, E) == angle(I, B, C) mod 360, log(distance(B, C)) + log(distance(D, E)) == log(distance(E, F)) + log(distance(C, I)), log(distance(C, I)) + log(distance(D, F)) == log(distance(D, E)) + log(distance(B, I)), log(distance(B, I)) + log(distance(E, F)) == log(distance(D, F)) + log(distance(B, C))
By directions_draw_angle on B, E, projection(E, h) we get exists(angle(B, E, projection(E, h)))
By directions_draw_angle on F, I, G we get exists(angle(F, I, G))
By directions_draw_angle on H, midpoint(B, G), projection(midpoint(B, G), Line(D, E)) we get exists(angle(H, midpoint(B, G), projection(midpoint(B, G), Line(D, E))))
By directions_draw_angle on projection(midpoint(B, G), Line(D, E)), midpoint(B, G), projection(midpoint(B, G), Line(B, I)) we get exists(angle(projection(midpoint(B, G), Line(D, E)), midpoint(B, G), projection(midpoint(B, G), Line(B, I))))
By not_in_line_equivalent_to_not_collinear_v0_r on D, I, E we get D not in Line(E, I)
By directions_draw_angle on projection(midpoint(B, G), g), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D))) we get exists(angle(projection(midpoint(B, G), g), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D)))))
By directions_draw_angle on projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), E we get exists(angle(projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), E))
By directions_draw_angle on E, I, G we get exists(angle(E, I, G))
By directions_draw_angle on projection(F, Line(H, orthocenter(A, B, D))), F, projection(F, altitude(A, B, D)) we get exists(angle(projection(F, Line(H, orthocenter(A, B, D))), F, projection(F, altitude(A, B, D))))
By directions_draw_angle on H, E, projection(E, Line(C, orthocenter(A, D, G))) we get exists(angle(H, E, projection(E, Line(C, orthocenter(A, D, G)))))
By directions_draw_angle on A, I, orthocenter(A, B, D) we get exists(angle(A, I, orthocenter(A, B, D)))
By directions_draw_angle on I, orthocenter(A, B, D), H we get exists(angle(I, orthocenter(A, B, D), H))
By directions_draw_angle on projection(F, altitude(A, B, D)), F, H we get exists(angle(projection(F, altitude(A, B, D)), F, H))
By directions_draw_angle on projection(E, altitude(A, D, G)), E, projection(E, Line(C, D)) we get exists(angle(projection(E, altitude(A, D, G)), E, projection(E, Line(C, D))))
By line_inequality on altitude(B, F, projection(A, i)), median(projection(A, i), B, G), B we get median(projection(A, i), B, G) != altitude(B, F, projection(A, i))
By reverse_direction on I, E we get 180 == direction(I, E) - direction(E, I) mod 360
By directions_draw_angle on projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), orthocenter(A, B, D) we get exists(angle(projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), orthocenter(A, B, D)))
By directions_draw_angle on F, B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get exists(angle(F, B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))))
By directions_draw_angle on center(c), E, B we get exists(angle(center(c), E, B))
By directions_draw_angle on B, H, midpoint(B, G) we get exists(angle(B, H, midpoint(B, G)))
By reverse_direction on F, projection(F, Line(H, orthocenter(A, B, D))) we get 180 == direction(F, projection(F, Line(H, orthocenter(A, B, D)))) - direction(projection(F, Line(H, orthocenter(A, B, D))), F) mod 360
By directions_draw_angle on projection(A, median(E, B, G)), A, projection(A, Line(D, G)) we get exists(angle(projection(A, median(E, B, G)), A, projection(A, Line(D, G))))
By directions_draw_angle on E, B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get exists(angle(E, B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))))
By directions_draw_angle on E, B, C we get exists(angle(E, B, C))
By sas_anti_congruence on midpoint(B, G), B, H, midpoint(B, G), G, C we get anti_congruent_triangles(B, H, midpoint(B, G), G, C, midpoint(B, G))
By directions_draw_angle on H, midpoint(B, G), G we get exists(angle(H, midpoint(B, G), G))
By double_perpendicular_and_parallel_v0 on altitude(F, A, D), h, Line(C, H) we get parallel(Line(C, H), altitude(F, A, D))
By directions_draw_angle on I, orthocenter(A, D, G), B we get exists(angle(I, orthocenter(A, D, G), B))
By line_inequality on Line(B, E), Line(F, projection(A, i)), B we get Line(B, E) != Line(F, projection(A, i))
By line_inequality on altitude(B, midpoint(B, G), projection(A, i)), Line(I, orthocenter(A, B, D)), B we get Line(I, orthocenter(A, B, D)) != altitude(B, midpoint(B, G), projection(A, i))
By altitude_definition on E, I, A, Line(E, F) we get Line(E, F) == altitude(E, A, I)
By directions_draw_angle on H, F, projection(F, Line(B, G)) we get exists(angle(H, F, projection(F, Line(B, G))))
By directions_draw_angle on projection(midpoint(B, G), Line(D, F)), midpoint(B, G), projection(midpoint(B, G), Line(G, I)) we get exists(angle(projection(midpoint(B, G), Line(D, F)), midpoint(B, G), projection(midpoint(B, G), Line(G, I))))
By directions_draw_angle on H, midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G))) we get exists(angle(H, midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G)))))
By directions_draw_angle on projection(midpoint(B, G), Line(D, E)), midpoint(B, G), H we get exists(angle(projection(midpoint(B, G), Line(D, E)), midpoint(B, G), H))
By sas_anti_similarity on E, G, midpoint(B, G), F, B, midpoint(B, G) we get anti_similar_triangles(B, F, midpoint(B, G), G, E, midpoint(B, G))
By directions_draw_angle on projection(midpoint(B, G), Line(D, F)), midpoint(B, G), D we get exists(angle(projection(midpoint(B, G), Line(D, F)), midpoint(B, G), D))
By directions_draw_angle on I, F, projection(F, Line(H, orthocenter(A, B, D))) we get exists(angle(I, F, projection(F, Line(H, orthocenter(A, B, D)))))
By directions_draw_angle on projection(F, altitude(A, B, D)), F, G we get exists(angle(projection(F, altitude(A, B, D)), F, G))
By directions_draw_angle on G, midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G)) we get exists(angle(G, midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G))))
By directions_draw_angle on A, F, projection(F, Line(H, orthocenter(A, B, D))) we get exists(angle(A, F, projection(F, Line(H, orthocenter(A, B, D)))))
By double_perpendicular_and_parallel_v0 on Line(C, H), h, Line(E, F) we get parallel(Line(C, H), Line(E, F))
By directions_draw_angle on orthocenter(A, B, D), B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get exists(angle(orthocenter(A, B, D), B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))))
By sas_anti_congruence on B, H, C, G, C, H we get anti_congruent_triangles(B, C, H, G, H, C)
By directions_draw_angle on E, I, B we get exists(angle(E, I, B))
By line_containment_inequality on line_intersection(median(projection(A, Line(D, G)), B, G), altitude(A, midpoint(B, G), projection(A, Line(D, G)))), B, median(projection(A, Line(D, G)), B, G) we get B != line_intersection(median(projection(A, Line(D, G)), B, G), altitude(A, midpoint(B, G), projection(A, Line(D, G))))
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), D we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), D))
By directions_draw_angle on projection(E, Line(D, G)), E, I we get exists(angle(projection(E, Line(D, G)), E, I))
By isosceles_triangle_properties on I, H, B we get distance(B, I) == distance(H, I), angle(H, B, I) == angle(I, H, B) mod 360
By sas_anti_similarity on F, B, I, E, G, I we get anti_similar_triangles(B, F, I, G, E, I)
By directions_draw_angle on E, midpoint(B, G), H we get exists(angle(E, midpoint(B, G), H))
By altitude_definition on E, midpoint(B, G), I, Line(E, F) we get Line(E, F) == altitude(E, I, midpoint(B, G))
By directions_draw_angle on C, orthocenter(A, D, G), D we get exists(angle(C, orthocenter(A, D, G), D))
By directions_draw_angle on G, F, projection(F, Line(B, G)) we get exists(angle(G, F, projection(F, Line(B, G))))
By directions_draw_angle on midpoint(B, G), B, line_intersection(h, altitude(projection(A, i), A, D)) we get exists(angle(midpoint(B, G), B, line_intersection(h, altitude(projection(A, i), A, D))))
By directions_draw_angle on orthocenter(A, D, G), A, projection(A, median(E, B, G)) we get exists(angle(orthocenter(A, D, G), A, projection(A, median(E, B, G))))
By sas_anti_similarity on G, B, F, B, G, E we get anti_similar_triangles(B, E, G, G, F, B)
By reverse_direction on H, midpoint(B, G) we get 180 == direction(H, midpoint(B, G)) - direction(midpoint(B, G), H) mod 360
By directions_draw_angle on projection(midpoint(B, G), f), midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D)) we get exists(angle(projection(midpoint(B, G), f), midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D))))
By directions_draw_angle on projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), H we get exists(angle(projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), H))
By directions_draw_angle on projection(A, median(E, B, G)), A, I we get exists(angle(projection(A, median(E, B, G)), A, I))
By directions_draw_angle on D, A, projection(A, median(F, B, G)) we get exists(angle(D, A, projection(A, median(F, B, G))))
By sas_anti_similarity on midpoint(B, G), B, F, midpoint(B, G), G, E we get anti_similar_triangles(B, F, midpoint(B, G), G, E, midpoint(B, G))
By reverse_direction on midpoint(B, G), H we get 180 == direction(midpoint(B, G), H) - direction(H, midpoint(B, G)) mod 360
By anti_similar_triangle_basic_properties on I, B, C, D, E, F we get not_collinear(B, C, I), not_collinear(D, E, F), angle(I, B, C) == 0 - angle(D, E, F) mod 360, angle(B, C, I) == 0 - angle(E, F, D) mod 360, angle(C, I, B) == 0 - angle(F, D, E) mod 360, log(distance(B, I)) + log(distance(E, F)) == log(distance(D, E)) + log(distance(B, C)), log(distance(B, C)) + log(distance(D, F)) == log(distance(E, F)) + log(distance(C, I)), log(distance(C, I)) + log(distance(D, E)) == log(distance(D, F)) + log(distance(B, I))
By directions_draw_angle on C, midpoint(B, G), E we get exists(angle(C, midpoint(B, G), E))
By directions_draw_angle on D, F, projection(F, altitude(A, B, D)) we get exists(angle(D, F, projection(F, altitude(A, B, D))))
By not_in_line_equivalent_to_not_collinear_v0_r on C, H, I we get C not in Line(H, I)
By not_in_line_equivalent_to_not_collinear_v0_r on G, C, midpoint(B, G) we get G not in Line(C, midpoint(B, G))
By line_inequality on Line(B, projection(E, h)), Line(F, projection(A, i)), B we get Line(B, projection(E, h)) != Line(F, projection(A, i))
By directions_draw_angle on projection(midpoint(B, G), Line(D, E)), midpoint(B, G), orthocenter(A, B, D) we get exists(angle(projection(midpoint(B, G), Line(D, E)), midpoint(B, G), orthocenter(A, B, D)))
By line_inequality on altitude(D, E, projection(A, Line(D, G))), median(F, B, G), D we get median(F, B, G) != altitude(D, E, projection(A, Line(D, G)))
By directions_draw_angle on F, C, midpoint(B, G) we get exists(angle(F, C, midpoint(B, G)))
By directions_draw_angle on projection(F, Line(D, H)), F, G we get exists(angle(projection(F, Line(D, H)), F, G))
By directions_draw_angle on A, orthocenter(A, B, D), I we get exists(angle(A, orthocenter(A, B, D), I))
By double_perpendicular_and_parallel_v0 on Line(E, F), h, altitude(F, A, D) we get parallel(Line(E, F), altitude(F, A, D))
By directions_draw_angle on projection(midpoint(B, G), g), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G))) we get exists(angle(projection(midpoint(B, G), g), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G)))))
By line_inequality on Line(G, H), Line(B, C), H we get Line(B, C) != Line(G, H)
By directions_draw_angle on orthocenter(A, B, D), I, C we get exists(angle(orthocenter(A, B, D), I, C))
By directions_draw_angle on projection(E, h), B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get exists(angle(projection(E, h), B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))))
By directions_draw_angle on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), B, orthocenter(A, D, G) we get exists(angle(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), B, orthocenter(A, D, G)))
By directions_draw_angle on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), G, F we get exists(angle(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), G, F))
By directions_draw_angle on projection(midpoint(B, G), Line(G, I)), midpoint(B, G), projection(midpoint(B, G), Line(D, F)) we get exists(angle(projection(midpoint(B, G), Line(G, I)), midpoint(B, G), projection(midpoint(B, G), Line(D, F))))
By not_in_line_equivalent_to_not_collinear_v0_r on G, H, midpoint(B, G) we get G not in Line(H, midpoint(B, G))
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), I we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), I))
By directions_draw_angle on projection(midpoint(B, G), Line(D, G)), midpoint(B, G), projection(midpoint(B, G), Line(D, F)) we get exists(angle(projection(midpoint(B, G), Line(D, G)), midpoint(B, G), projection(midpoint(B, G), Line(D, F))))
By line_inequality on Line(E, I), Line(C, H), E we get Line(C, H) != Line(E, I)
By directions_draw_angle on E, G, line_intersection(h, altitude(projection(A, i), A, D)) we get exists(angle(E, G, line_intersection(h, altitude(projection(A, i), A, D))))
By directions_draw_angle on orthocenter(A, B, D), F, projection(F, Line(H, orthocenter(A, B, D))) we get exists(angle(orthocenter(A, B, D), F, projection(F, Line(H, orthocenter(A, B, D)))))
By directions_draw_angle on B, F, projection(F, Line(B, G)) we get exists(angle(B, F, projection(F, Line(B, G))))
By directions_draw_angle on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), B, E we get exists(angle(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), B, E))
By directions_draw_angle on E, B, orthocenter(A, B, D) we get exists(angle(E, B, orthocenter(A, B, D)))
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D))) we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D)))))
By directions_draw_angle on D, C, orthocenter(A, D, G) we get exists(angle(D, C, orthocenter(A, D, G)))
By directions_draw_angle on projection(E, Line(C, orthocenter(A, D, G))), E, I we get exists(angle(projection(E, Line(C, orthocenter(A, D, G))), E, I))
By directions_draw_angle on projection(A, median(E, B, G)), A, projection(A, i) we get exists(angle(projection(A, median(E, B, G)), A, projection(A, i)))
By directions_draw_angle on projection(F, Line(B, G)), F, I we get exists(angle(projection(F, Line(B, G)), F, I))
By reverse_direction on A, projection(A, median(F, B, G)) we get 180 == direction(A, projection(A, median(F, B, G))) - direction(projection(A, median(F, B, G)), A) mod 360
By directions_draw_angle on orthocenter(A, D, G), midpoint(B, G), E we get exists(angle(orthocenter(A, D, G), midpoint(B, G), E))
By directions_draw_angle on D, E, projection(E, altitude(A, D, G)) we get exists(angle(D, E, projection(E, altitude(A, D, G))))
By line_inequality on altitude(D, F, projection(A, i)), g, D we get g != altitude(D, F, projection(A, i))
By directions_draw_angle on projection(F, Line(H, orthocenter(A, B, D))), F, C we get exists(angle(projection(F, Line(H, orthocenter(A, B, D))), F, C))
By directions_draw_angle on line_intersection(h, altitude(projection(A, i), A, D)), G, D we get exists(angle(line_intersection(h, altitude(projection(A, i), A, D)), G, D))
By double_perpendicular_and_parallel_v0_r on h, Line(E, F), altitude(projection(A, i), B, G) we get perpendicular(Line(E, F), altitude(projection(A, i), B, G))
By directions_draw_angle on C, A, projection(A, median(E, B, G)) we get exists(angle(C, A, projection(A, median(E, B, G))))
By directions_draw_angle on E, F, projection(F, altitude(A, B, D)) we get exists(angle(E, F, projection(F, altitude(A, B, D))))
By reverse_direction on G, F we get 180 == direction(G, F) - direction(F, G) mod 360
By directions_draw_angle on orthocenter(A, D, G), I, midpoint(B, G) we get exists(angle(orthocenter(A, D, G), I, midpoint(B, G)))
By directions_draw_angle on F, G, B we get exists(angle(F, G, B))
By directions_draw_angle on E, midpoint(B, G), projection(midpoint(B, G), f) we get exists(angle(E, midpoint(B, G), projection(midpoint(B, G), f)))
By reverse_direction on orthocenter(A, B, D), H we get 180 == direction(orthocenter(A, B, D), H) - direction(H, orthocenter(A, B, D)) mod 360
By directions_draw_angle on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), G, H we get exists(angle(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), G, H))
By directions_draw_angle on orthocenter(A, D, G), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D))) we get exists(angle(orthocenter(A, D, G), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D)))))
By directions_draw_angle on I, midpoint(B, G), projection(midpoint(B, G), Line(D, E)) we get exists(angle(I, midpoint(B, G), projection(midpoint(B, G), Line(D, E))))
By directions_draw_angle on projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D))) we get exists(angle(projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D)))))
By directions_draw_angle on projection(F, altitude(A, B, D)), F, C we get exists(angle(projection(F, altitude(A, B, D)), F, C))
By line_inequality on Line(B, projection(E, h)), median(projection(A, Line(D, G)), B, G), B we get Line(B, projection(E, h)) != median(projection(A, Line(D, G)), B, G)
By directions_draw_angle on E, B, I we get exists(angle(E, B, I))
By directions_draw_angle on C, midpoint(B, G), projection(midpoint(B, G), Line(B, I)) we get exists(angle(C, midpoint(B, G), projection(midpoint(B, G), Line(B, I))))
By sas_anti_congruence on H, B, I, C, G, I we get anti_congruent_triangles(B, H, I, G, C, I)
By directions_draw_angle on projection(A, median(E, B, G)), A, C we get exists(angle(projection(A, median(E, B, G)), A, C))
By directions_draw_angle on projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), B we get exists(angle(projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), B))
By sas_anti_congruence on F, C, G, E, H, B we get anti_congruent_triangles(B, E, H, G, F, C)
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), F we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), F))
By line_inequality on Line(E, I), altitude(A, D, G), I we get Line(E, I) != altitude(A, D, G)
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), Line(C, I), B we get Line(C, I) != Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, i), A, D))), median(projection(A, i), B, G), B we get median(projection(A, i), B, G) != Line(B, line_intersection(h, altitude(projection(A, i), A, D)))
By line_inequality on altitude(orthocenter(A, D, G), E, projection(A, Line(D, G))), Line(E, projection(A, Line(D, G))), orthocenter(A, D, G) we get Line(E, projection(A, Line(D, G))) != altitude(orthocenter(A, D, G), E, projection(A, Line(D, G)))
By directions_draw_angle on E, C, orthocenter(A, D, G) we get exists(angle(E, C, orthocenter(A, D, G)))
By directions_draw_angle on C, orthocenter(A, D, G), G we get exists(angle(C, orthocenter(A, D, G), G))
By directions_draw_angle on H, midpoint(B, G), projection(midpoint(B, G), Line(D, F)) we get exists(angle(H, midpoint(B, G), projection(midpoint(B, G), Line(D, F))))
By directions_draw_angle on projection(midpoint(B, G), Line(D, G)), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D))) we get exists(angle(projection(midpoint(B, G), Line(D, G)), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D)))))
By directions_draw_angle on projection(midpoint(B, G), Line(D, G)), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G))) we get exists(angle(projection(midpoint(B, G), Line(D, G)), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G)))))
By isosceles_triangle_properties on midpoint(B, G), F, E we get distance(E, midpoint(B, G)) == distance(F, midpoint(B, G)), angle(F, E, midpoint(B, G)) == angle(midpoint(B, G), F, E) mod 360
By similar_triangle_basic_properties on A, H, C, A, B, G we get not_collinear(A, C, H), not_collinear(A, B, G), angle(A, B, G) == angle(A, H, C) mod 360, angle(B, G, A) == angle(H, C, A) mod 360, angle(C, A, H) == angle(G, A, B) mod 360, log(distance(A, B)) + log(distance(C, H)) == log(distance(A, H)) + log(distance(B, G)), log(distance(B, G)) + log(distance(A, C)) == log(distance(C, H)) + log(distance(A, G)), log(distance(A, C)) + log(distance(A, B)) == log(distance(A, G)) + log(distance(A, H))
By directions_draw_angle on midpoint(B, G), G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get exists(angle(midpoint(B, G), G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))))
By directions_draw_angle on orthocenter(A, D, G), midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G)) we get exists(angle(orthocenter(A, D, G), midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G))))
By directions_draw_angle on H, F, midpoint(B, G) we get exists(angle(H, F, midpoint(B, G)))
By directions_draw_angle on projection(midpoint(B, G), f), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D))) we get exists(angle(projection(midpoint(B, G), f), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D)))))
By directions_draw_angle on C, F, projection(F, altitude(A, B, D)) we get exists(angle(C, F, projection(F, altitude(A, B, D))))
By directions_draw_angle on C, orthocenter(A, D, G), midpoint(B, G) we get exists(angle(C, orthocenter(A, D, G), midpoint(B, G)))
By directions_draw_angle on C, H, midpoint(B, G) we get exists(angle(C, H, midpoint(B, G)))
By double_perpendicular_and_parallel_v0 on altitude(D, midpoint(B, G), projection(A, i)), median(projection(A, i), B, G), altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i)) we get parallel(altitude(D, midpoint(B, G), projection(A, i)), altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i)))
By directions_draw_angle on C, midpoint(B, G), projection(midpoint(B, G), Line(G, I)) we get exists(angle(C, midpoint(B, G), projection(midpoint(B, G), Line(G, I))))
By sas_anti_similarity on B, F, C, G, E, H we get anti_similar_triangles(B, C, F, G, H, E)
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, i), A, D))), Line(C, D), G we get Line(C, D) != Line(G, line_intersection(h, altitude(projection(A, i), A, D)))
By reverse_direction on F, I we get 180 == direction(F, I) - direction(I, F) mod 360
By line_inequality on Line(H, midpoint(B, G)), Line(C, I), H we get Line(C, I) != Line(H, midpoint(B, G))
By directions_draw_angle on I, F, projection(F, Line(D, H)) we get exists(angle(I, F, projection(F, Line(D, H))))
By directions_draw_angle on I, orthocenter(A, B, D), G we get exists(angle(I, orthocenter(A, B, D), G))
By line_containment_inequality on line_intersection(Line(F, projection(A, i)), altitude(A, F, projection(A, i))), B, Line(F, projection(A, i)) we get B != line_intersection(Line(F, projection(A, i)), altitude(A, F, projection(A, i)))
By line_inequality on Line(F, G), altitude(A, D, G), G we get Line(F, G) != altitude(A, D, G)
By directions_draw_angle on I, E, projection(E, altitude(A, D, G)) we get exists(angle(I, E, projection(E, altitude(A, D, G))))
By directions_draw_angle on E, midpoint(B, G), G we get exists(angle(E, midpoint(B, G), G))
By directions_draw_angle on E, H, I we get exists(angle(E, H, I))
By line_inequality on altitude(G, midpoint(B, G), projection(A, Line(D, G))), Line(C, F), G we get Line(C, F) != altitude(G, midpoint(B, G), projection(A, Line(D, G)))
By directions_draw_angle on G, H, midpoint(B, G) we get exists(angle(G, H, midpoint(B, G)))
By directions_draw_angle on F, I, E we get exists(angle(F, I, E))
By reverse_direction on orthocenter(A, D, G), C we get 180 == direction(orthocenter(A, D, G), C) - direction(C, orthocenter(A, D, G)) mod 360
By directions_draw_angle on B, E, center(c) we get exists(angle(B, E, center(c)))
By reverse_direction on midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G))) we get 180 == direction(midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G)))) - direction(projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G)) mod 360
By directions_draw_angle on C, F, I we get exists(angle(C, F, I))
By directions_draw_angle on center(c), H, I we get exists(angle(center(c), H, I))
By directions_draw_angle on projection(E, Line(C, orthocenter(A, D, G))), E, C we get exists(angle(projection(E, Line(C, orthocenter(A, D, G))), E, C))
By directions_draw_angle on D, orthocenter(A, B, D), H we get exists(angle(D, orthocenter(A, B, D), H))
By directions_draw_angle on F, H, G we get exists(angle(F, H, G))
By line_inequality on altitude(A, E, midpoint(B, G)), median(projection(A, Line(D, G)), B, G), A we get altitude(A, E, midpoint(B, G)) != median(projection(A, Line(D, G)), B, G)
By directions_draw_angle on projection(F, altitude(A, B, D)), F, B we get exists(angle(projection(F, altitude(A, B, D)), F, B))
By directions_draw_angle on projection(A, median(F, B, G)), A, E we get exists(angle(projection(A, median(F, B, G)), A, E))
By directions_draw_angle on projection(E, Line(D, G)), E, projection(E, Line(C, orthocenter(A, D, G))) we get exists(angle(projection(E, Line(D, G)), E, projection(E, Line(C, orthocenter(A, D, G)))))
By sas_anti_congruence on H, B, G, C, G, B we get anti_congruent_triangles(B, C, G, G, H, B)
By directions_draw_angle on projection(F, Line(H, orthocenter(A, B, D))), F, H we get exists(angle(projection(F, Line(H, orthocenter(A, B, D))), F, H))
By directions_draw_angle on B, orthocenter(A, D, G), C we get exists(angle(B, orthocenter(A, D, G), C))
By directions_draw_angle on F, H, midpoint(B, G) we get exists(angle(F, H, midpoint(B, G)))
By directions_draw_angle on A, midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G))) we get exists(angle(A, midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G)))))
By not_in_line_equivalent_to_not_collinear_v0_r on I, F, G we get I not in Line(F, G)
By directions_draw_angle on projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), projection(midpoint(B, G), f) we get exists(angle(projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), projection(midpoint(B, G), f)))
By directions_draw_angle on G, F, center(c) we get exists(angle(G, F, center(c)))
By directions_draw_angle on F, G, H we get exists(angle(F, G, H))
By directions_draw_angle on projection(midpoint(B, G), i), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D))) we get exists(angle(projection(midpoint(B, G), i), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D)))))
By directions_draw_angle on I, B, E we get exists(angle(I, B, E))
By line_inequality on altitude(orthocenter(A, B, D), F, projection(A, i)), Line(C, D), orthocenter(A, B, D) we get Line(C, D) != altitude(orthocenter(A, B, D), F, projection(A, i))
By directions_draw_angle on projection(F, Line(D, H)), F, I we get exists(angle(projection(F, Line(D, H)), F, I))
By isosceles_triangle_properties on I, H, G we get distance(G, I) == distance(H, I), angle(H, G, I) == angle(I, H, G) mod 360
By line_inequality on Line(E, I), median(E, B, G), I we get Line(E, I) != median(E, B, G)
By reverse_direction on projection(E, Line(B, G)), E we get 180 == direction(projection(E, Line(B, G)), E) - direction(E, projection(E, Line(B, G))) mod 360
By directions_draw_angle on E, midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D)) we get exists(angle(E, midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D))))
By sas_anti_similarity on midpoint(B, G), G, E, midpoint(B, G), B, F we get anti_similar_triangles(B, F, midpoint(B, G), G, E, midpoint(B, G))
By reverse_direction on projection(midpoint(B, G), Line(D, F)), midpoint(B, G) we get 180 == direction(projection(midpoint(B, G), Line(D, F)), midpoint(B, G)) - direction(midpoint(B, G), projection(midpoint(B, G), Line(D, F))) mod 360
By directions_draw_angle on F, G, orthocenter(A, D, G) we get exists(angle(F, G, orthocenter(A, D, G)))
By directions_draw_angle on F, midpoint(B, G), orthocenter(A, D, G) we get exists(angle(F, midpoint(B, G), orthocenter(A, D, G)))
By directions_draw_angle on C, midpoint(B, G), projection(midpoint(B, G), Line(D, G)) we get exists(angle(C, midpoint(B, G), projection(midpoint(B, G), Line(D, G))))
By line_inequality on Line(G, projection(F, h)), median(projection(A, Line(D, G)), B, G), G we get Line(G, projection(F, h)) != median(projection(A, Line(D, G)), B, G)
By directions_draw_angle on C, F, projection(F, Line(B, G)) we get exists(angle(C, F, projection(F, Line(B, G))))
By directions_draw_angle on midpoint(B, G), H, orthocenter(A, B, D) we get exists(angle(midpoint(B, G), H, orthocenter(A, B, D)))
By double_perpendicular_and_parallel_v0 on altitude(D, F, projection(A, i)), Line(F, projection(A, i)), altitude(B, F, projection(A, i)) we get parallel(altitude(B, F, projection(A, i)), altitude(D, F, projection(A, i)))
By directions_draw_angle on I, orthocenter(A, D, G), C we get exists(angle(I, orthocenter(A, D, G), C))
By directions_draw_angle on projection(midpoint(B, G), Line(D, E)), midpoint(B, G), E we get exists(angle(projection(midpoint(B, G), Line(D, E)), midpoint(B, G), E))
By line_inequality on Line(E, I), Line(C, orthocenter(A, D, G)), E we get Line(E, I) != Line(C, orthocenter(A, D, G))
By reverse_direction on midpoint(B, G), projection(midpoint(B, G), Line(D, E)) we get 180 == direction(midpoint(B, G), projection(midpoint(B, G), Line(D, E))) - direction(projection(midpoint(B, G), Line(D, E)), midpoint(B, G)) mod 360
By directions_draw_angle on midpoint(B, G), H, C we get exists(angle(midpoint(B, G), H, C))
By double_perpendicular_and_parallel_v0 on altitude(G, E, projection(A, Line(D, G))), Line(E, projection(A, Line(D, G))), altitude(D, E, projection(A, Line(D, G))) we get parallel(altitude(D, E, projection(A, Line(D, G))), altitude(G, E, projection(A, Line(D, G))))
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), Line(C, H), B we get Line(C, H) != Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By directions_draw_angle on I, E, projection(E, Line(B, G)) we get exists(angle(I, E, projection(E, Line(B, G))))
By line_inequality on altitude(D, F, projection(A, i)), median(projection(A, Line(D, G)), B, G), D we get altitude(D, F, projection(A, i)) != median(projection(A, Line(D, G)), B, G)
By directions_draw_angle on projection(E, Line(B, G)), E, H we get exists(angle(projection(E, Line(B, G)), E, H))
By line_inequality on Line(C, midpoint(B, G)), Line(B, I), midpoint(B, G) we get Line(B, I) != Line(C, midpoint(B, G))
By directions_draw_angle on center(c), E, midpoint(B, G) we get exists(angle(center(c), E, midpoint(B, G)))
By sas_anti_congruence on C, G, B, H, B, G we get anti_congruent_triangles(B, C, G, G, H, B)
By directions_draw_angle on projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), projection(midpoint(B, G), Line(B, I)) we get exists(angle(projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), projection(midpoint(B, G), Line(B, I))))
By double_perpendicular_and_parallel_v0 on altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i)), median(projection(A, i), B, G), altitude(B, midpoint(B, G), projection(A, i)) we get parallel(altitude(B, midpoint(B, G), projection(A, i)), altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i)))
By directions_draw_angle on projection(midpoint(B, G), Line(G, I)), midpoint(B, G), C we get exists(angle(projection(midpoint(B, G), Line(G, I)), midpoint(B, G), C))
By line_inequality on altitude(D, midpoint(B, G), projection(A, i)), Line(F, projection(A, i)), D we get Line(F, projection(A, i)) != altitude(D, midpoint(B, G), projection(A, i))
By directions_draw_angle on midpoint(B, G), E, B we get exists(angle(midpoint(B, G), E, B))
By directions_draw_angle on F, I, C we get exists(angle(F, I, C))
By reverse_direction on midpoint(B, G), F we get 180 == direction(midpoint(B, G), F) - direction(F, midpoint(B, G)) mod 360
By directions_draw_angle on projection(midpoint(B, G), Line(G, I)), midpoint(B, G), H we get exists(angle(projection(midpoint(B, G), Line(G, I)), midpoint(B, G), H))
By reverse_direction on projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G) we get 180 == direction(projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G)) - direction(midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G)))) mod 360
By directions_draw_angle on E, midpoint(B, G), C we get exists(angle(E, midpoint(B, G), C))
By directions_draw_angle on E, H, orthocenter(A, B, D) we get exists(angle(E, H, orthocenter(A, B, D)))
By directions_draw_angle on midpoint(B, G), H, B we get exists(angle(midpoint(B, G), H, B))
By directions_draw_angle on projection(A, median(E, B, G)), A, projection(A, median(F, B, G)) we get exists(angle(projection(A, median(E, B, G)), A, projection(A, median(F, B, G))))
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), orthocenter(A, B, D) we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), orthocenter(A, B, D)))
By directions_draw_angle on C, midpoint(B, G), F we get exists(angle(C, midpoint(B, G), F))
By sas_anti_similarity on I, G, E, I, B, F we get anti_similar_triangles(B, F, I, G, E, I)
By line_inequality on Line(G, H), Line(E, projection(A, Line(D, G))), G we get Line(G, H) != Line(E, projection(A, Line(D, G)))
By directions_draw_angle on midpoint(B, G), I, H we get exists(angle(midpoint(B, G), I, H))
By directions_draw_angle on projection(F, i), F, midpoint(B, G) we get exists(angle(projection(F, i), F, midpoint(B, G)))
By directions_draw_angle on projection(E, Line(C, orthocenter(A, D, G))), E, A we get exists(angle(projection(E, Line(C, orthocenter(A, D, G))), E, A))
By directions_draw_angle on orthocenter(A, B, D), orthocenter(A, D, G), C we get exists(angle(orthocenter(A, B, D), orthocenter(A, D, G), C))
By directions_draw_angle on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), B, orthocenter(A, B, D) we get exists(angle(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), B, orthocenter(A, B, D)))
By directions_draw_angle on midpoint(B, G), H, E we get exists(angle(midpoint(B, G), H, E))
By directions_draw_angle on midpoint(B, G), I, E we get exists(angle(midpoint(B, G), I, E))
By reverse_direction on midpoint(B, G), E we get 180 == direction(midpoint(B, G), E) - direction(E, midpoint(B, G)) mod 360
By line_inequality on altitude(D, E, projection(A, Line(D, G))), Line(H, orthocenter(A, B, D)), D we get Line(H, orthocenter(A, B, D)) != altitude(D, E, projection(A, Line(D, G)))
By directions_draw_angle on H, midpoint(B, G), C we get exists(angle(H, midpoint(B, G), C))
By line_inequality on Line(F, I), Line(G, I), F we get Line(F, I) != Line(G, I)
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), H we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), H))
By directions_draw_angle on C, H, G we get exists(angle(C, H, G))
By directions_draw_angle on B, I, E we get exists(angle(B, I, E))
By directions_draw_angle on line_intersection(h, altitude(projection(A, i), A, D)), B, A we get exists(angle(line_intersection(h, altitude(projection(A, i), A, D)), B, A))
By line_inequality on Line(G, projection(E, h)), Line(E, projection(A, Line(D, G))), G we get Line(G, projection(E, h)) != Line(E, projection(A, Line(D, G)))
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, i), A, D))), Line(H, orthocenter(A, B, D)), B we get Line(H, orthocenter(A, B, D)) != Line(B, line_intersection(h, altitude(projection(A, i), A, D)))
By directions_draw_angle on orthocenter(A, B, D), A, projection(A, median(E, B, G)) we get exists(angle(orthocenter(A, B, D), A, projection(A, median(E, B, G))))
By line_inequality on altitude(G, E, midpoint(B, G)), median(projection(A, Line(D, G)), B, G), G we get altitude(G, E, midpoint(B, G)) != median(projection(A, Line(D, G)), B, G)
By directions_draw_angle on midpoint(B, G), C, G we get exists(angle(midpoint(B, G), C, G))
By directions_draw_angle on projection(F, Line(H, orthocenter(A, B, D))), F, projection(F, Line(B, G)) we get exists(angle(projection(F, Line(H, orthocenter(A, B, D))), F, projection(F, Line(B, G))))
By directions_draw_angle on E, F, I we get exists(angle(E, F, I))
By reverse_direction on projection(F, altitude(A, B, D)), F we get 180 == direction(projection(F, altitude(A, B, D)), F) - direction(F, projection(F, altitude(A, B, D))) mod 360
By directions_draw_angle on projection(midpoint(B, G), Line(D, E)), midpoint(B, G), D we get exists(angle(projection(midpoint(B, G), Line(D, E)), midpoint(B, G), D))
By directions_draw_angle on orthocenter(A, B, D), H, midpoint(B, G) we get exists(angle(orthocenter(A, B, D), H, midpoint(B, G)))
By double_perpendicular_and_parallel_v0 on altitude(orthocenter(A, B, D), F, projection(A, i)), Line(F, projection(A, i)), altitude(B, F, projection(A, i)) we get parallel(altitude(B, F, projection(A, i)), altitude(orthocenter(A, B, D), F, projection(A, i)))
By line_inequality on Line(G, projection(E, h)), median(projection(A, Line(D, G)), B, G), G we get Line(G, projection(E, h)) != median(projection(A, Line(D, G)), B, G)
By directions_draw_angle on G, I, orthocenter(A, B, D) we get exists(angle(G, I, orthocenter(A, B, D)))
By line_inequality on Line(H, midpoint(B, G)), Line(B, I), midpoint(B, G) we get Line(B, I) != Line(H, midpoint(B, G))
By directions_draw_angle on orthocenter(A, B, D), midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G)) we get exists(angle(orthocenter(A, B, D), midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G))))
By line_inequality on Line(G, H), median(projection(A, Line(D, G)), B, G), G we get Line(G, H) != median(projection(A, Line(D, G)), B, G)
By directions_draw_angle on projection(F, Line(H, orthocenter(A, B, D))), F, projection(F, Line(D, H)) we get exists(angle(projection(F, Line(H, orthocenter(A, B, D))), F, projection(F, Line(D, H))))
By line_inequality on altitude(A, F, projection(A, i)), Line(E, projection(A, Line(D, G))), A we get altitude(A, F, projection(A, i)) != Line(E, projection(A, Line(D, G)))
By directions_draw_angle on projection(E, altitude(A, D, G)), E, A we get exists(angle(projection(E, altitude(A, D, G)), E, A))
By directions_draw_angle on projection(F, h), B, line_intersection(h, altitude(projection(A, i), A, D)) we get exists(angle(projection(F, h), B, line_intersection(h, altitude(projection(A, i), A, D))))
By directions_draw_angle on F, I, B we get exists(angle(F, I, B))
By directions_draw_angle on C, midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G)) we get exists(angle(C, midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G))))
By directions_draw_angle on E, F, projection(F, Line(H, orthocenter(A, B, D))) we get exists(angle(E, F, projection(F, Line(H, orthocenter(A, B, D)))))
By directions_draw_angle on line_intersection(h, altitude(projection(A, i), A, D)), G, A we get exists(angle(line_intersection(h, altitude(projection(A, i), A, D)), G, A))
By directions_draw_angle on projection(E, Line(C, D)), E, I we get exists(angle(projection(E, Line(C, D)), E, I))
By directions_draw_angle on projection(midpoint(B, G), Line(D, F)), midpoint(B, G), H we get exists(angle(projection(midpoint(B, G), Line(D, F)), midpoint(B, G), H))
By directions_draw_angle on H, midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G)) we get exists(angle(H, midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G))))
By sas_anti_similarity on B, F, E, G, E, F we get anti_similar_triangles(B, E, F, G, F, E)
By double_perpendicular_and_parallel_v0 on altitude(orthocenter(A, D, G), E, projection(A, Line(D, G))), Line(E, projection(A, Line(D, G))), altitude(D, E, projection(A, Line(D, G))) we get parallel(altitude(D, E, projection(A, Line(D, G))), altitude(orthocenter(A, D, G), E, projection(A, Line(D, G))))
By directions_draw_angle on orthocenter(A, B, D), midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D)) we get exists(angle(orthocenter(A, B, D), midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D))))
By directions_draw_angle on G, B, E we get exists(angle(G, B, E))
By directions_draw_angle on projection(E, h), G, H we get exists(angle(projection(E, h), G, H))
By directions_draw_angle on F, midpoint(B, G), G we get exists(angle(F, midpoint(B, G), G))
By directions_draw_angle on C, midpoint(B, G), H we get exists(angle(C, midpoint(B, G), H))
By directions_draw_angle on E, F, midpoint(B, G) we get exists(angle(E, F, midpoint(B, G)))
By directions_draw_angle on H, orthocenter(A, B, D), G we get exists(angle(H, orthocenter(A, B, D), G))
By directions_draw_angle on D, G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get exists(angle(D, G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))))
By directions_draw_angle on B, F, projection(F, Line(H, orthocenter(A, B, D))) we get exists(angle(B, F, projection(F, Line(H, orthocenter(A, B, D)))))
By directions_draw_angle on line_intersection(h, altitude(projection(A, i), A, D)), G, projection(A, Line(D, G)) we get exists(angle(line_intersection(h, altitude(projection(A, i), A, D)), G, projection(A, Line(D, G))))
By directions_draw_angle on A, F, projection(F, Line(B, G)) we get exists(angle(A, F, projection(F, Line(B, G))))
By directions_draw_angle on I, C, orthocenter(A, D, G) we get exists(angle(I, C, orthocenter(A, D, G)))
By directions_draw_angle on midpoint(B, G), E, orthocenter(A, D, G) we get exists(angle(midpoint(B, G), E, orthocenter(A, D, G)))
By directions_draw_angle on midpoint(B, G), F, projection(F, altitude(A, B, D)) we get exists(angle(midpoint(B, G), F, projection(F, altitude(A, B, D))))
By isosceles_triangle_properties on I, E, F we get distance(E, I) == distance(F, I), angle(E, F, I) == angle(I, E, F) mod 360
By line_inequality on altitude(A, midpoint(B, G), projection(A, Line(D, G))), median(projection(A, Line(D, G)), B, G), A we get median(projection(A, Line(D, G)), B, G) != altitude(A, midpoint(B, G), projection(A, Line(D, G)))
By double_perpendicular_and_parallel_v0 on Line(B, G), h, Line(E, F) we get parallel(Line(B, G), Line(E, F))
By reverse_direction on I, orthocenter(A, B, D) we get 180 == direction(I, orthocenter(A, B, D)) - direction(orthocenter(A, B, D), I) mod 360
By directions_draw_angle on D, B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get exists(angle(D, B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))))
By directions_draw_angle on C, F, midpoint(B, G) we get exists(angle(C, F, midpoint(B, G)))
By directions_draw_angle on projection(midpoint(B, G), Line(D, E)), midpoint(B, G), projection(midpoint(B, G), f) we get exists(angle(projection(midpoint(B, G), Line(D, E)), midpoint(B, G), projection(midpoint(B, G), f)))
By directions_draw_angle on F, G, line_intersection(h, altitude(projection(A, i), A, D)) we get exists(angle(F, G, line_intersection(h, altitude(projection(A, i), A, D))))
By directions_draw_angle on projection(A, median(F, B, G)), A, C we get exists(angle(projection(A, median(F, B, G)), A, C))
By directions_draw_angle on H, I, F we get exists(angle(H, I, F))
By directions_draw_angle on projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), projection(midpoint(B, G), Line(D, G)) we get exists(angle(projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), projection(midpoint(B, G), Line(D, G))))
By line_inequality on Line(H, I), Line(D, E), H we get Line(D, E) != Line(H, I)
By directions_draw_angle on projection(A, median(F, B, G)), A, I we get exists(angle(projection(A, median(F, B, G)), A, I))
By line_inequality on altitude(A, midpoint(B, G), projection(A, i)), median(projection(A, i), B, G), A we get median(projection(A, i), B, G) != altitude(A, midpoint(B, G), projection(A, i))
By line_inequality on altitude(D, E, projection(A, Line(D, G))), Line(C, F), D we get Line(C, F) != altitude(D, E, projection(A, Line(D, G)))
By directions_draw_angle on midpoint(B, G), E, F we get exists(angle(midpoint(B, G), E, F))
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, i), A, D))), Line(C, I), B we get Line(C, I) != Line(B, line_intersection(h, altitude(projection(A, i), A, D)))
By reverse_direction on projection(E, altitude(A, D, G)), E we get 180 == direction(projection(E, altitude(A, D, G)), E) - direction(E, projection(E, altitude(A, D, G))) mod 360
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G))) we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G)))))
By line_inequality on altitude(D, F, projection(A, i)), Line(B, I), D we get Line(B, I) != altitude(D, F, projection(A, i))
By directions_draw_angle on H, orthocenter(A, B, D), orthocenter(A, D, G) we get exists(angle(H, orthocenter(A, B, D), orthocenter(A, D, G)))
By line_inequality on Line(H, midpoint(B, G)), Line(C, D), midpoint(B, G) we get Line(C, D) != Line(H, midpoint(B, G))
By directions_draw_angle on projection(E, altitude(A, D, G)), E, B we get exists(angle(projection(E, altitude(A, D, G)), E, B))
By reverse_direction on C, midpoint(B, G) we get 180 == direction(C, midpoint(B, G)) - direction(midpoint(B, G), C) mod 360
By directions_draw_angle on C, B, line_intersection(h, altitude(projection(A, i), A, D)) we get exists(angle(C, B, line_intersection(h, altitude(projection(A, i), A, D))))
By line_inequality on Line(E, I), Line(D, E), I we get Line(D, E) != Line(E, I)
By directions_draw_angle on orthocenter(A, D, G), I, G we get exists(angle(orthocenter(A, D, G), I, G))
By directions_draw_angle on F, E, projection(E, Line(B, G)) we get exists(angle(F, E, projection(E, Line(B, G))))
By directions_draw_angle on E, I, orthocenter(A, D, G) we get exists(angle(E, I, orthocenter(A, D, G)))
By sas_congruence on G, C, I, H, B, I we get congruent_triangles(B, H, I, C, G, I)
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), h, B we get h != Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By directions_draw_angle on G, F, projection(F, altitude(A, B, D)) we get exists(angle(G, F, projection(F, altitude(A, B, D))))
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), Line(C, I), G we get Line(C, I) != Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By directions_draw_angle on G, orthocenter(A, B, D), I we get exists(angle(G, orthocenter(A, B, D), I))
By directions_draw_angle on E, H, midpoint(B, G) we get exists(angle(E, H, midpoint(B, G)))
By directions_draw_angle on I, E, H we get exists(angle(I, E, H))
By line_inequality on altitude(G, midpoint(B, G), projection(A, Line(D, G))), Line(B, C), G we get Line(B, C) != altitude(G, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on Line(B, E), Line(I, orthocenter(A, D, G)), E we get Line(B, E) != Line(I, orthocenter(A, D, G))
By directions_draw_angle on projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), A we get exists(angle(projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), A))
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), projection(midpoint(B, G), g) we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), projection(midpoint(B, G), g)))
By reverse_direction on A, projection(A, median(E, B, G)) we get 180 == direction(A, projection(A, median(E, B, G))) - direction(projection(A, median(E, B, G)), A) mod 360
By directions_draw_angle on projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), projection(midpoint(B, G), g) we get exists(angle(projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), projection(midpoint(B, G), g)))
By directions_draw_angle on projection(midpoint(B, G), Line(D, F)), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D))) we get exists(angle(projection(midpoint(B, G), Line(D, F)), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D)))))
By directions_draw_angle on I, orthocenter(A, B, D), projection(A, i) we get exists(angle(I, orthocenter(A, B, D), projection(A, i)))
By directions_draw_angle on F, midpoint(B, G), projection(midpoint(B, G), Line(B, I)) we get exists(angle(F, midpoint(B, G), projection(midpoint(B, G), Line(B, I))))
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), E we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), E))
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), D we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), D))
By directions_draw_angle on C, orthocenter(A, D, G), E we get exists(angle(C, orthocenter(A, D, G), E))
By double_perpendicular_and_parallel_v0_r on h, Line(C, H), altitude(projection(A, i), B, G) we get perpendicular(Line(C, H), altitude(projection(A, i), B, G))
By directions_draw_angle on orthocenter(A, D, G), orthocenter(A, B, D), I we get exists(angle(orthocenter(A, D, G), orthocenter(A, B, D), I))
By directions_draw_angle on center(c), C, orthocenter(A, D, G) we get exists(angle(center(c), C, orthocenter(A, D, G)))
By directions_draw_angle on I, H, G we get exists(angle(I, H, G))
By sas_anti_similarity on F, B, midpoint(B, G), E, G, midpoint(B, G) we get anti_similar_triangles(B, F, midpoint(B, G), G, E, midpoint(B, G))
By directions_draw_angle on E, B, G we get exists(angle(E, B, G))
By directions_draw_angle on projection(E, Line(B, G)), E, D we get exists(angle(projection(E, Line(B, G)), E, D))
By directions_draw_angle on E, F, projection(F, Line(B, G)) we get exists(angle(E, F, projection(F, Line(B, G))))
By directions_draw_angle on projection(E, h), G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get exists(angle(projection(E, h), G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))))
By line_inequality on altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i)), median(projection(A, Line(D, G)), B, G), orthocenter(A, B, D) we get median(projection(A, Line(D, G)), B, G) != altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i))
By sas_anti_congruence on H, B, midpoint(B, G), C, G, midpoint(B, G) we get anti_congruent_triangles(B, H, midpoint(B, G), G, C, midpoint(B, G))
By line_inequality on Line(B, E), Line(C, D), E we get Line(B, E) != Line(C, D)
By directions_draw_angle on F, midpoint(B, G), projection(midpoint(B, G), g) we get exists(angle(F, midpoint(B, G), projection(midpoint(B, G), g)))
By line_inequality on altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G))), Line(I, orthocenter(A, B, D)), orthocenter(A, D, G) we get Line(I, orthocenter(A, B, D)) != altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on Line(E, I), Line(B, I), E we get Line(B, I) != Line(E, I)
By directions_draw_angle on projection(midpoint(B, G), i), midpoint(B, G), H we get exists(angle(projection(midpoint(B, G), i), midpoint(B, G), H))
By directions_draw_angle on projection(midpoint(B, G), g), midpoint(B, G), projection(midpoint(B, G), Line(D, F)) we get exists(angle(projection(midpoint(B, G), g), midpoint(B, G), projection(midpoint(B, G), Line(D, F))))
By directions_draw_angle on H, G, I we get exists(angle(H, G, I))
By directions_draw_angle on projection(midpoint(B, G), g), midpoint(B, G), H we get exists(angle(projection(midpoint(B, G), g), midpoint(B, G), H))
By directions_draw_angle on orthocenter(A, B, D), I, H we get exists(angle(orthocenter(A, B, D), I, H))
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), projection(midpoint(B, G), Line(D, G)) we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), projection(midpoint(B, G), Line(D, G))))
By line_inequality on Line(H, midpoint(B, G)), Line(B, G), H we get Line(B, G) != Line(H, midpoint(B, G))
By isosceles_triangle_properties on I, C, H we get distance(C, I) == distance(H, I), angle(C, H, I) == angle(I, C, H) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on F, G, H we get F not in Line(G, H)
By directions_draw_angle on H, A, projection(A, median(E, B, G)) we get exists(angle(H, A, projection(A, median(E, B, G))))
By directions_draw_angle on H, midpoint(B, G), projection(midpoint(B, G), Line(G, I)) we get exists(angle(H, midpoint(B, G), projection(midpoint(B, G), Line(G, I))))
By line_inequality on altitude(G, midpoint(B, G), projection(A, Line(D, G))), Line(C, D), G we get Line(C, D) != altitude(G, midpoint(B, G), projection(A, Line(D, G)))
By directions_draw_angle on I, H, orthocenter(A, B, D) we get exists(angle(I, H, orthocenter(A, B, D)))
By sas_anti_congruence on G, C, F, B, H, E we get anti_congruent_triangles(B, E, H, G, F, C)
By directions_draw_angle on projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), projection(midpoint(B, G), g) we get exists(angle(projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), projection(midpoint(B, G), g)))
By sas_anti_congruence on C, H, B, H, C, G we get anti_congruent_triangles(B, C, H, G, H, C)
By directions_draw_angle on H, B, line_intersection(h, altitude(projection(A, i), A, D)) we get exists(angle(H, B, line_intersection(h, altitude(projection(A, i), A, D))))
By directions_draw_angle on I, orthocenter(A, D, G), D we get exists(angle(I, orthocenter(A, D, G), D))
By line_inequality on altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i)), i, orthocenter(A, B, D) we get i != altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i))
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), Line(I, orthocenter(A, D, G)), G we get Line(I, orthocenter(A, D, G)) != Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), projection(midpoint(B, G), Line(D, E)) we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), projection(midpoint(B, G), Line(D, E))))
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), I we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), I))
By directions_draw_angle on orthocenter(A, D, G), C, D we get exists(angle(orthocenter(A, D, G), C, D))
By directions_draw_angle on A, E, projection(E, Line(B, G)) we get exists(angle(A, E, projection(E, Line(B, G))))
By directions_draw_angle on projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), projection(midpoint(B, G), Line(D, E)) we get exists(angle(projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), projection(midpoint(B, G), Line(D, E))))
By line_containment_inequality on line_intersection(median(projection(A, Line(D, G)), B, G), altitude(A, midpoint(B, G), projection(A, Line(D, G)))), orthocenter(A, B, D), median(projection(A, Line(D, G)), B, G) we get orthocenter(A, B, D) != line_intersection(median(projection(A, Line(D, G)), B, G), altitude(A, midpoint(B, G), projection(A, Line(D, G))))
By reverse_direction on midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D)) we get 180 == direction(midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D))) - direction(projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G)) mod 360
By directions_draw_angle on D, orthocenter(A, B, D), I we get exists(angle(D, orthocenter(A, B, D), I))
By directions_draw_angle on B, midpoint(B, G), projection(midpoint(B, G), Line(D, E)) we get exists(angle(B, midpoint(B, G), projection(midpoint(B, G), Line(D, E))))
By not_in_line_equivalent_to_not_collinear_v0_r on A, H, I we get A not in Line(H, I)
By line_containment_inequality on line_intersection(Line(E, projection(A, Line(D, G))), altitude(G, E, projection(A, Line(D, G)))), C, Line(E, projection(A, Line(D, G))) we get C != line_intersection(Line(E, projection(A, Line(D, G))), altitude(G, E, projection(A, Line(D, G))))
By line_containment_inequality on line_intersection(median(projection(A, i), B, G), altitude(A, midpoint(B, G), projection(A, i))), B, median(projection(A, i), B, G) we get B != line_intersection(median(projection(A, i), B, G), altitude(A, midpoint(B, G), projection(A, i)))
By directions_draw_angle on projection(F, Line(B, G)), F, B we get exists(angle(projection(F, Line(B, G)), F, B))
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), Line(E, H), G we get Line(E, H) != Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By directions_draw_angle on B, H, G we get exists(angle(B, H, G))
By not_in_line_equivalent_to_not_collinear_v0_r on A, F, G we get A not in Line(F, G)
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), projection(midpoint(B, G), Line(D, F)) we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), projection(midpoint(B, G), Line(D, F))))
By directions_draw_angle on projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), projection(midpoint(B, G), Line(D, F)) we get exists(angle(projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), projection(midpoint(B, G), Line(D, F))))
By directions_draw_angle on B, C, orthocenter(A, D, G) we get exists(angle(B, C, orthocenter(A, D, G)))
By directions_draw_angle on projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), orthocenter(A, D, G) we get exists(angle(projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), orthocenter(A, D, G)))
By line_inequality on Line(H, midpoint(B, G)), i, midpoint(B, G) we get i != Line(H, midpoint(B, G))
By directions_draw_angle on orthocenter(A, D, G), I, H we get exists(angle(orthocenter(A, D, G), I, H))
By directions_draw_angle on H, G, projection(E, h) we get exists(angle(H, G, projection(E, h)))
By directions_draw_angle on projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), projection(midpoint(B, G), i) we get exists(angle(projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), projection(midpoint(B, G), i)))
By line_inequality on Line(F, I), altitude(A, D, G), I we get Line(F, I) != altitude(A, D, G)
By altitude_definition on F, D, I, Line(E, F) we get Line(E, F) == altitude(F, D, I)
By directions_draw_angle on midpoint(B, G), G, line_intersection(h, altitude(projection(A, i), A, D)) we get exists(angle(midpoint(B, G), G, line_intersection(h, altitude(projection(A, i), A, D))))
By not_in_line_equivalent_to_not_collinear_v0_r on A, I, E we get A not in Line(E, I)
By sas_anti_congruence on H, C, G, C, H, B we get anti_congruent_triangles(B, C, H, G, H, C)
By line_containment_inequality on line_intersection(median(projection(A, Line(D, G)), B, G), altitude(D, midpoint(B, G), projection(A, Line(D, G)))), I, median(projection(A, Line(D, G)), B, G) we get I != line_intersection(median(projection(A, Line(D, G)), B, G), altitude(D, midpoint(B, G), projection(A, Line(D, G))))
By line_inequality on altitude(B, F, midpoint(B, G)), median(projection(A, i), B, G), B we get altitude(B, F, midpoint(B, G)) != median(projection(A, i), B, G)
By directions_draw_angle on projection(E, Line(B, G)), E, A we get exists(angle(projection(E, Line(B, G)), E, A))
By line_inequality on altitude(D, F, projection(A, i)), Line(C, H), D we get Line(C, H) != altitude(D, F, projection(A, i))
By directions_draw_angle on H, E, projection(E, altitude(A, D, G)) we get exists(angle(H, E, projection(E, altitude(A, D, G))))
By directions_draw_angle on G, midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D)) we get exists(angle(G, midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D))))
By directions_draw_angle on C, midpoint(B, G), projection(midpoint(B, G), f) we get exists(angle(C, midpoint(B, G), projection(midpoint(B, G), f)))
By directions_draw_angle on I, midpoint(B, G), H we get exists(angle(I, midpoint(B, G), H))
By altitude_definition on E, D, midpoint(B, G), Line(E, F) we get Line(E, F) == altitude(E, D, midpoint(B, G))
By directions_draw_angle on I, E, projection(E, h) we get exists(angle(I, E, projection(E, h)))
By reverse_direction on midpoint(B, G), C we get 180 == direction(midpoint(B, G), C) - direction(C, midpoint(B, G)) mod 360
By directions_draw_angle on orthocenter(A, D, G), E, projection(E, altitude(A, D, G)) we get exists(angle(orthocenter(A, D, G), E, projection(E, altitude(A, D, G))))
By sas_anti_congruence on C, G, midpoint(B, G), H, B, midpoint(B, G) we get anti_congruent_triangles(B, H, midpoint(B, G), G, C, midpoint(B, G))
By directions_draw_angle on C, midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D)) we get exists(angle(C, midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D))))
By line_inequality on Line(F, I), Line(D, H), I we get Line(D, H) != Line(F, I)
By line_inequality on Line(F, G), altitude(A, B, D), G we get Line(F, G) != altitude(A, B, D)
By directions_draw_angle on line_intersection(h, altitude(projection(A, i), A, D)), G, C we get exists(angle(line_intersection(h, altitude(projection(A, i), A, D)), G, C))
By sas_anti_similarity on F, E, G, E, F, B we get anti_similar_triangles(B, E, F, G, F, E)
By directions_draw_angle on projection(E, Line(C, orthocenter(A, D, G))), E, G we get exists(angle(projection(E, Line(C, orthocenter(A, D, G))), E, G))
By line_inequality on altitude(A, E, projection(A, Line(D, G))), Line(F, projection(A, i)), A we get Line(F, projection(A, i)) != altitude(A, E, projection(A, Line(D, G)))
By directions_draw_angle on projection(E, Line(B, G)), E, projection(E, Line(C, orthocenter(A, D, G))) we get exists(angle(projection(E, Line(B, G)), E, projection(E, Line(C, orthocenter(A, D, G)))))
By line_inequality on altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G))), altitude(A, B, D), orthocenter(A, D, G) we get altitude(A, B, D) != altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G)))
By double_perpendicular_and_parallel_v0 on altitude(projection(A, Line(D, G)), A, D), h, Line(E, F) we get parallel(Line(E, F), altitude(projection(A, Line(D, G)), A, D))
By directions_draw_angle on A, midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G)) we get exists(angle(A, midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G))))
By isosceles_triangle_properties on midpoint(B, G), H, C we get distance(C, midpoint(B, G)) == distance(H, midpoint(B, G)), angle(H, C, midpoint(B, G)) == angle(midpoint(B, G), H, C) mod 360
By reverse_direction on projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G) we get 180 == direction(projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G)) - direction(midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G))) mod 360
By line_inequality on Line(H, midpoint(B, G)), Line(I, orthocenter(A, B, D)), midpoint(B, G) we get Line(H, midpoint(B, G)) != Line(I, orthocenter(A, B, D))
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), projection(midpoint(B, G), Line(B, I)) we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), projection(midpoint(B, G), Line(B, I))))
By directions_draw_angle on midpoint(B, G), C, center(c) we get exists(angle(midpoint(B, G), C, center(c)))
By sas_anti_similarity on E, G, I, F, B, I we get anti_similar_triangles(B, F, I, G, E, I)
By directions_draw_angle on projection(A, Line(D, G)), G, F we get exists(angle(projection(A, Line(D, G)), G, F))
By directions_draw_angle on H, orthocenter(A, B, D), B we get exists(angle(H, orthocenter(A, B, D), B))
By directions_draw_angle on projection(midpoint(B, G), Line(B, I)), midpoint(B, G), C we get exists(angle(projection(midpoint(B, G), Line(B, I)), midpoint(B, G), C))
By directions_draw_angle on I, orthocenter(A, D, G), A we get exists(angle(I, orthocenter(A, D, G), A))
By directions_draw_angle on projection(midpoint(B, G), Line(D, F)), midpoint(B, G), projection(midpoint(B, G), Line(B, I)) we get exists(angle(projection(midpoint(B, G), Line(D, F)), midpoint(B, G), projection(midpoint(B, G), Line(B, I))))
By directions_draw_angle on B, midpoint(B, G), projection(midpoint(B, G), Line(D, F)) we get exists(angle(B, midpoint(B, G), projection(midpoint(B, G), Line(D, F))))
By directions_draw_angle on projection(A, median(E, B, G)), A, midpoint(B, G) we get exists(angle(projection(A, median(E, B, G)), A, midpoint(B, G)))
By directions_draw_angle on center(c), F, I we get exists(angle(center(c), F, I))
By directions_draw_angle on B, I, F we get exists(angle(B, I, F))
By directions_draw_angle on G, F, projection(F, h) we get exists(angle(G, F, projection(F, h)))
By directions_draw_angle on I, H, F we get exists(angle(I, H, F))
By directions_draw_angle on projection(F, Line(B, G)), F, C we get exists(angle(projection(F, Line(B, G)), F, C))
By directions_draw_angle on orthocenter(A, D, G), I, B we get exists(angle(orthocenter(A, D, G), I, B))
By directions_draw_angle on E, I, F we get exists(angle(E, I, F))
By directions_draw_angle on orthocenter(A, B, D), H, E we get exists(angle(orthocenter(A, B, D), H, E))
By directions_draw_angle on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), B, F we get exists(angle(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), B, F))
By directions_draw_angle on A, midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D))) we get exists(angle(A, midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D)))))
By line_inequality on Line(B, E), Line(H, orthocenter(A, B, D)), B we get Line(B, E) != Line(H, orthocenter(A, B, D))
By directions_draw_angle on D, F, projection(F, Line(B, G)) we get exists(angle(D, F, projection(F, Line(B, G))))
By directions_draw_angle on C, A, projection(A, median(F, B, G)) we get exists(angle(C, A, projection(A, median(F, B, G))))
By directions_draw_angle on projection(F, Line(D, H)), F, projection(F, Line(B, G)) we get exists(angle(projection(F, Line(D, H)), F, projection(F, Line(B, G))))
By directions_draw_angle on line_intersection(h, altitude(projection(A, i), A, D)), G, E we get exists(angle(line_intersection(h, altitude(projection(A, i), A, D)), G, E))
By directions_draw_angle on center(c), E, projection(E, altitude(A, D, G)) we get exists(angle(center(c), E, projection(E, altitude(A, D, G))))
By sas_anti_congruence on E, H, B, F, C, G we get anti_congruent_triangles(B, E, H, G, F, C)
By line_containment_inequality on line_intersection(median(projection(A, i), B, G), altitude(D, midpoint(B, G), projection(A, i))), orthocenter(A, D, G), median(projection(A, i), B, G) we get orthocenter(A, D, G) != line_intersection(median(projection(A, i), B, G), altitude(D, midpoint(B, G), projection(A, i)))
By directions_draw_angle on D, A, projection(A, median(E, B, G)) we get exists(angle(D, A, projection(A, median(E, B, G))))
By directions_draw_angle on F, C, orthocenter(A, D, G) we get exists(angle(F, C, orthocenter(A, D, G)))
By directions_draw_angle on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), G, orthocenter(A, B, D) we get exists(angle(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), G, orthocenter(A, B, D)))
By directions_draw_angle on projection(F, h), G, F we get exists(angle(projection(F, h), G, F))
By directions_draw_angle on projection(F, i), F, G we get exists(angle(projection(F, i), F, G))
By reverse_direction on E, projection(E, altitude(A, D, G)) we get 180 == direction(E, projection(E, altitude(A, D, G))) - direction(projection(E, altitude(A, D, G)), E) mod 360
By directions_draw_angle on C, midpoint(B, G), B we get exists(angle(C, midpoint(B, G), B))
By directions_draw_angle on F, midpoint(B, G), projection(midpoint(B, G), i) we get exists(angle(F, midpoint(B, G), projection(midpoint(B, G), i)))
By directions_draw_angle on projection(E, Line(C, orthocenter(A, D, G))), E, midpoint(B, G) we get exists(angle(projection(E, Line(C, orthocenter(A, D, G))), E, midpoint(B, G)))
By directions_draw_angle on center(c), F, projection(F, Line(H, orthocenter(A, B, D))) we get exists(angle(center(c), F, projection(F, Line(H, orthocenter(A, B, D)))))
By directions_draw_angle on line_intersection(h, altitude(projection(A, i), A, D)), B, C we get exists(angle(line_intersection(h, altitude(projection(A, i), A, D)), B, C))
By sas_anti_congruence on G, C, H, B, H, C we get anti_congruent_triangles(B, C, H, G, H, C)
By isosceles_triangle_properties on I, H, C we get distance(C, I) == distance(H, I), angle(H, C, I) == angle(I, H, C) mod 360
By directions_draw_angle on projection(F, i), F, I we get exists(angle(projection(F, i), F, I))
By directions_draw_angle on I, orthocenter(A, B, D), B we get exists(angle(I, orthocenter(A, B, D), B))
By line_inequality on altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i)), Line(D, E), orthocenter(A, B, D) we get Line(D, E) != altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i))
By directions_draw_angle on G, midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D))) we get exists(angle(G, midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D)))))
By directions_draw_angle on H, G, projection(A, Line(D, G)) we get exists(angle(H, G, projection(A, Line(D, G))))
By sas_anti_congruence on B, H, E, G, C, F we get anti_congruent_triangles(B, E, H, G, F, C)
By directions_draw_angle on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), B, A we get exists(angle(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), B, A))
By double_perpendicular_and_parallel_v0_r on h, Line(E, F), altitude(E, B, G) we get perpendicular(Line(E, F), altitude(E, B, G))
By directions_draw_angle on D, orthocenter(A, D, G), I we get exists(angle(D, orthocenter(A, D, G), I))
By directions_draw_angle on projection(A, i), B, E we get exists(angle(projection(A, i), B, E))
By line_inequality on Line(F, G), median(projection(A, i), B, G), G we get Line(F, G) != median(projection(A, i), B, G)
By line_inequality on Line(G, H), Line(C, orthocenter(A, D, G)), G we get Line(G, H) != Line(C, orthocenter(A, D, G))
By directions_draw_angle on orthocenter(A, D, G), C, B we get exists(angle(orthocenter(A, D, G), C, B))
By directions_draw_angle on projection(midpoint(B, G), Line(B, I)), midpoint(B, G), H we get exists(angle(projection(midpoint(B, G), Line(B, I)), midpoint(B, G), H))
By line_inequality on altitude(D, E, projection(A, Line(D, G))), Line(G, I), D we get Line(G, I) != altitude(D, E, projection(A, Line(D, G)))
By directions_draw_angle on E, I, midpoint(B, G) we get exists(angle(E, I, midpoint(B, G)))
By directions_draw_angle on I, orthocenter(A, B, D), midpoint(B, G) we get exists(angle(I, orthocenter(A, B, D), midpoint(B, G)))
By directions_draw_angle on projection(E, Line(B, G)), E, C we get exists(angle(projection(E, Line(B, G)), E, C))
By directions_draw_angle on G, H, F we get exists(angle(G, H, F))
By directions_draw_angle on projection(midpoint(B, G), Line(B, I)), midpoint(B, G), projection(midpoint(B, G), Line(D, E)) we get exists(angle(projection(midpoint(B, G), Line(B, I)), midpoint(B, G), projection(midpoint(B, G), Line(D, E))))
By directions_draw_angle on G, E, midpoint(B, G) we get exists(angle(G, E, midpoint(B, G)))
By line_inequality on altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i)), Line(C, orthocenter(A, D, G)), orthocenter(A, B, D) we get Line(C, orthocenter(A, D, G)) != altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i))
By directions_draw_angle on E, midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G))) we get exists(angle(E, midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G)))))
By line_inequality on Line(F, G), median(E, B, G), G we get Line(F, G) != median(E, B, G)
By directions_draw_angle on projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), projection(midpoint(B, G), f) we get exists(angle(projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), projection(midpoint(B, G), f)))
By directions_draw_angle on G, I, H we get exists(angle(G, I, H))
By sas_anti_congruence on I, B, H, I, G, C we get anti_congruent_triangles(B, H, I, G, C, I)
By directions_draw_angle on orthocenter(A, B, D), H, I we get exists(angle(orthocenter(A, B, D), H, I))
By line_inequality on Line(G, H), Line(D, F), G we get Line(D, F) != Line(G, H)
By directions_draw_angle on orthocenter(A, B, D), I, F we get exists(angle(orthocenter(A, B, D), I, F))
By line_inequality on altitude(D, E, midpoint(B, G)), median(projection(A, Line(D, G)), B, G), D we get altitude(D, E, midpoint(B, G)) != median(projection(A, Line(D, G)), B, G)
By directions_draw_angle on F, G, C we get exists(angle(F, G, C))
By directions_draw_angle on G, F, I we get exists(angle(G, F, I))
By line_inequality on altitude(G, midpoint(B, G), projection(A, Line(D, G))), Line(D, F), G we get Line(D, F) != altitude(G, midpoint(B, G), projection(A, Line(D, G)))
By directions_draw_angle on B, E, projection(E, Line(C, D)) we get exists(angle(B, E, projection(E, Line(C, D))))
By directions_draw_angle on projection(E, Line(B, G)), E, projection(E, Line(C, D)) we get exists(angle(projection(E, Line(B, G)), E, projection(E, Line(C, D))))
By directions_draw_angle on orthocenter(A, B, D), I, A we get exists(angle(orthocenter(A, B, D), I, A))
By directions_draw_angle on B, E, I we get exists(angle(B, E, I))
By directions_draw_angle on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), G, projection(F, h) we get exists(angle(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), G, projection(F, h)))
By directions_draw_angle on projection(A, median(E, B, G)), A, B we get exists(angle(projection(A, median(E, B, G)), A, B))
By reverse_direction on C, orthocenter(A, D, G) we get 180 == direction(C, orthocenter(A, D, G)) - direction(orthocenter(A, D, G), C) mod 360
By directions_draw_angle on G, F, E we get exists(angle(G, F, E))
By line_inequality on Line(C, midpoint(B, G)), Line(I, orthocenter(A, D, G)), midpoint(B, G) we get Line(C, midpoint(B, G)) != Line(I, orthocenter(A, D, G))
By directions_draw_angle on orthocenter(A, D, G), G, line_intersection(h, altitude(projection(A, i), A, D)) we get exists(angle(orthocenter(A, D, G), G, line_intersection(h, altitude(projection(A, i), A, D))))
By reverse_direction on projection(A, median(E, B, G)), A we get 180 == direction(projection(A, median(E, B, G)), A) - direction(A, projection(A, median(E, B, G))) mod 360
By directions_draw_angle on line_intersection(h, altitude(projection(A, i), A, D)), G, orthocenter(A, D, G) we get exists(angle(line_intersection(h, altitude(projection(A, i), A, D)), G, orthocenter(A, D, G)))
By directions_draw_angle on H, G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get exists(angle(H, G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))))
By directions_draw_angle on A, F, projection(F, altitude(A, B, D)) we get exists(angle(A, F, projection(F, altitude(A, B, D))))
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), Line(D, H), G we get Line(D, H) != Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By line_inequality on altitude(A, E, projection(A, Line(D, G))), median(projection(A, Line(D, G)), B, G), A we get median(projection(A, Line(D, G)), B, G) != altitude(A, E, projection(A, Line(D, G)))
By directions_draw_angle on orthocenter(A, D, G), I, A we get exists(angle(orthocenter(A, D, G), I, A))
By directions_draw_angle on projection(midpoint(B, G), Line(D, E)), midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D)) we get exists(angle(projection(midpoint(B, G), Line(D, E)), midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D))))
By directions_draw_angle on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), B, projection(A, i) we get exists(angle(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), B, projection(A, i)))
By directions_draw_angle on G, midpoint(B, G), E we get exists(angle(G, midpoint(B, G), E))
By directions_draw_angle on midpoint(B, G), F, C we get exists(angle(midpoint(B, G), F, C))
By line_inequality on altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G))), Line(C, D), orthocenter(A, D, G) we get Line(C, D) != altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(A, midpoint(B, G), projection(A, i)), Line(F, projection(A, i)), A we get Line(F, projection(A, i)) != altitude(A, midpoint(B, G), projection(A, i))
By directions_draw_angle on B, E, H we get exists(angle(B, E, H))
By directions_draw_angle on B, midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G))) we get exists(angle(B, midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G)))))
By directions_draw_angle on orthocenter(A, B, D), midpoint(B, G), C we get exists(angle(orthocenter(A, B, D), midpoint(B, G), C))
By line_inequality on Line(F, G), Line(B, C), G we get Line(B, C) != Line(F, G)
By directions_draw_angle on projection(midpoint(B, G), i), midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G)) we get exists(angle(projection(midpoint(B, G), i), midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G))))
By directions_draw_angle on projection(midpoint(B, G), Line(D, E)), midpoint(B, G), B we get exists(angle(projection(midpoint(B, G), Line(D, E)), midpoint(B, G), B))
By not_in_line_equivalent_to_not_collinear_v0_r on orthocenter(A, D, G), midpoint(B, G), H we get orthocenter(A, D, G) not in Line(H, midpoint(B, G))
By line_containment_inequality on line_intersection(median(projection(A, i), B, G), altitude(D, midpoint(B, G), projection(A, i))), G, median(projection(A, i), B, G) we get G != line_intersection(median(projection(A, i), B, G), altitude(D, midpoint(B, G), projection(A, i)))
By directions_draw_angle on I, B, line_intersection(h, altitude(projection(A, i), A, D)) we get exists(angle(I, B, line_intersection(h, altitude(projection(A, i), A, D))))
By directions_draw_angle on E, midpoint(B, G), I we get exists(angle(E, midpoint(B, G), I))
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, I we get G not in Line(E, I)
By directions_draw_angle on projection(F, Line(B, G)), F, H we get exists(angle(projection(F, Line(B, G)), F, H))
By directions_draw_angle on D, midpoint(B, G), projection(midpoint(B, G), Line(D, F)) we get exists(angle(D, midpoint(B, G), projection(midpoint(B, G), Line(D, F))))
By directions_draw_angle on projection(A, median(E, B, G)), A, D we get exists(angle(projection(A, median(E, B, G)), A, D))
By directions_draw_angle on G, I, F we get exists(angle(G, I, F))
By directions_draw_angle on projection(E, altitude(A, D, G)), E, G we get exists(angle(projection(E, altitude(A, D, G)), E, G))
By line_inequality on Line(H, I), Line(F, projection(A, i)), H we get Line(H, I) != Line(F, projection(A, i))
By directions_draw_angle on E, B, midpoint(B, G) we get exists(angle(E, B, midpoint(B, G)))
By reverse_direction on orthocenter(A, D, G), I we get 180 == direction(orthocenter(A, D, G), I) - direction(I, orthocenter(A, D, G)) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on midpoint(B, G), H, I we get midpoint(B, G) not in Line(H, I)
By directions_draw_angle on G, H, I we get exists(angle(G, H, I))
By directions_draw_angle on projection(F, Line(H, orthocenter(A, B, D))), F, projection(F, i) we get exists(angle(projection(F, Line(H, orthocenter(A, B, D))), F, projection(F, i)))
By line_inequality on altitude(orthocenter(A, B, D), F, projection(A, i)), Line(D, E), orthocenter(A, B, D) we get Line(D, E) != altitude(orthocenter(A, B, D), F, projection(A, i))
By directions_draw_angle on I, midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G)) we get exists(angle(I, midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G))))
By directions_draw_angle on E, B, orthocenter(A, D, G) we get exists(angle(E, B, orthocenter(A, D, G)))
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D)) we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D))))
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, i), A, D))), Line(I, orthocenter(A, D, G)), G we get Line(I, orthocenter(A, D, G)) != Line(G, line_intersection(h, altitude(projection(A, i), A, D)))
By sas_anti_similarity on E, G, B, F, B, G we get anti_similar_triangles(B, E, G, G, F, B)
By directions_draw_angle on projection(midpoint(B, G), Line(G, I)), midpoint(B, G), E we get exists(angle(projection(midpoint(B, G), Line(G, I)), midpoint(B, G), E))
By directions_draw_angle on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), G, projection(E, h) we get exists(angle(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), G, projection(E, h)))
By directions_draw_angle on orthocenter(A, B, D), H, D we get exists(angle(orthocenter(A, B, D), H, D))
By line_inequality on altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G))), median(F, B, G), orthocenter(A, D, G) we get median(F, B, G) != altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G)))
By reverse_direction on midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D))) we get 180 == direction(midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D)))) - direction(projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G)) mod 360
By directions_draw_angle on orthocenter(A, B, D), G, line_intersection(h, altitude(projection(A, i), A, D)) we get exists(angle(orthocenter(A, B, D), G, line_intersection(h, altitude(projection(A, i), A, D))))
By directions_draw_angle on projection(A, median(F, B, G)), A, orthocenter(A, D, G) we get exists(angle(projection(A, median(F, B, G)), A, orthocenter(A, D, G)))
By sas_anti_similarity on G, E, F, B, F, E we get anti_similar_triangles(B, E, F, G, F, E)
By directions_draw_angle on C, E, midpoint(B, G) we get exists(angle(C, E, midpoint(B, G)))
By directions_draw_angle on G, F, projection(F, Line(H, orthocenter(A, B, D))) we get exists(angle(G, F, projection(F, Line(H, orthocenter(A, B, D)))))
By double_perpendicular_and_parallel_v0_r on h, Line(C, H), altitude(F, B, G) we get perpendicular(Line(C, H), altitude(F, B, G))
By line_inequality on altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i)), g, orthocenter(A, B, D) we get g != altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i))
By directions_draw_angle on H, I, G we get exists(angle(H, I, G))
By line_inequality on Line(H, I), Line(C, I), H we get Line(C, I) != Line(H, I)
By directions_draw_angle on H, G, midpoint(B, G) we get exists(angle(H, G, midpoint(B, G)))
By directions_draw_angle on E, orthocenter(A, D, G), C we get exists(angle(E, orthocenter(A, D, G), C))
By line_inequality on Line(F, I), Line(B, I), F we get Line(B, I) != Line(F, I)
By directions_draw_angle on orthocenter(A, B, D), I, G we get exists(angle(orthocenter(A, B, D), I, G))
By directions_draw_angle on projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), E we get exists(angle(projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), E))
By directions_draw_angle on F, G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get exists(angle(F, G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))))
By directions_draw_angle on G, F, projection(F, Line(D, H)) we get exists(angle(G, F, projection(F, Line(D, H))))
By directions_draw_angle on projection(A, i), A, projection(A, median(F, B, G)) we get exists(angle(projection(A, i), A, projection(A, median(F, B, G))))
By line_inequality on Line(F, I), Line(D, E), I we get Line(D, E) != Line(F, I)
By directions_draw_angle on H, midpoint(B, G), projection(midpoint(B, G), f) we get exists(angle(H, midpoint(B, G), projection(midpoint(B, G), f)))
By directions_draw_angle on I, E, projection(E, Line(C, orthocenter(A, D, G))) we get exists(angle(I, E, projection(E, Line(C, orthocenter(A, D, G)))))
By directions_draw_angle on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), G, C we get exists(angle(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), G, C))
By isosceles_triangle_properties on I, F, E we get distance(E, I) == distance(F, I), angle(F, E, I) == angle(I, F, E) mod 360
By reverse_direction on projection(E, Line(C, orthocenter(A, D, G))), E we get 180 == direction(projection(E, Line(C, orthocenter(A, D, G))), E) - direction(E, projection(E, Line(C, orthocenter(A, D, G)))) mod 360
By directions_draw_angle on D, orthocenter(A, D, G), C we get exists(angle(D, orthocenter(A, D, G), C))
By directions_draw_angle on orthocenter(A, D, G), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G))) we get exists(angle(orthocenter(A, D, G), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G)))))
By sas_anti_similarity on C, F, B, H, E, G we get anti_similar_triangles(B, C, F, G, H, E)
By directions_draw_angle on orthocenter(A, D, G), midpoint(B, G), F we get exists(angle(orthocenter(A, D, G), midpoint(B, G), F))
By line_inequality on Line(F, I), Line(C, I), F we get Line(C, I) != Line(F, I)
By double_perpendicular_and_parallel_v0 on altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i)), median(projection(A, i), B, G), altitude(A, midpoint(B, G), projection(A, i)) we get parallel(altitude(A, midpoint(B, G), projection(A, i)), altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i)))
By line_inequality on altitude(D, F, midpoint(B, G)), Line(F, projection(A, i)), D we get Line(F, projection(A, i)) != altitude(D, F, midpoint(B, G))
By line_inequality on Line(G, H), Line(C, I), G we get Line(C, I) != Line(G, H)
By reverse_direction on E, projection(E, Line(C, orthocenter(A, D, G))) we get 180 == direction(E, projection(E, Line(C, orthocenter(A, D, G)))) - direction(projection(E, Line(C, orthocenter(A, D, G))), E) mod 360
By line_inequality on Line(C, midpoint(B, G)), Line(B, G), C we get Line(B, G) != Line(C, midpoint(B, G))
By directions_draw_angle on I, orthocenter(A, B, D), D we get exists(angle(I, orthocenter(A, B, D), D))
By not_in_line_equivalent_to_not_collinear_v0_r on orthocenter(A, B, D), B, E we get orthocenter(A, B, D) not in Line(B, E)
By directions_draw_angle on B, H, orthocenter(A, B, D) we get exists(angle(B, H, orthocenter(A, B, D)))
By line_containment_inequality on line_intersection(median(projection(A, i), B, G), altitude(A, midpoint(B, G), projection(A, i))), orthocenter(A, B, D), median(projection(A, i), B, G) we get orthocenter(A, B, D) != line_intersection(median(projection(A, i), B, G), altitude(A, midpoint(B, G), projection(A, i)))
By directions_draw_angle on projection(midpoint(B, G), Line(D, F)), midpoint(B, G), A we get exists(angle(projection(midpoint(B, G), Line(D, F)), midpoint(B, G), A))
By directions_draw_angle on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), B, line_intersection(h, altitude(projection(A, i), A, D)) we get exists(angle(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), B, line_intersection(h, altitude(projection(A, i), A, D))))
By directions_draw_angle on F, B, E we get exists(angle(F, B, E))
By sas_anti_congruence on I, G, C, I, B, H we get anti_congruent_triangles(B, H, I, G, C, I)
By line_inequality on Line(F, I), Line(C, H), I we get Line(C, H) != Line(F, I)
By sas_anti_congruence on B, G, C, G, B, H we get anti_congruent_triangles(B, C, G, G, H, B)
By directions_draw_angle on G, midpoint(B, G), F we get exists(angle(G, midpoint(B, G), F))
By directions_draw_angle on midpoint(B, G), F, G we get exists(angle(midpoint(B, G), F, G))
By line_inequality on altitude(orthocenter(A, B, D), F, midpoint(B, G)), median(projection(A, Line(D, G)), B, G), orthocenter(A, B, D) we get median(projection(A, Line(D, G)), B, G) != altitude(orthocenter(A, B, D), F, midpoint(B, G))
By line_inequality on Line(B, E), altitude(A, B, D), B we get Line(B, E) != altitude(A, B, D)
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, i), A, D))), altitude(A, B, D), G we get altitude(A, B, D) != Line(G, line_intersection(h, altitude(projection(A, i), A, D)))
By line_inequality on Line(C, center(c)), Line(E, projection(A, Line(D, G))), C we get Line(C, center(c)) != Line(E, projection(A, Line(D, G)))
By directions_draw_angle on E, orthocenter(A, D, G), I we get exists(angle(E, orthocenter(A, D, G), I))
By line_inequality on altitude(B, midpoint(B, G), projection(A, i)), median(E, B, G), B we get median(E, B, G) != altitude(B, midpoint(B, G), projection(A, i))
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), H we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), H))
By directions_draw_angle on H, midpoint(B, G), B we get exists(angle(H, midpoint(B, G), B))
By directions_draw_angle on H, E, projection(E, Line(B, G)) we get exists(angle(H, E, projection(E, Line(B, G))))
By line_inequality on Line(H, midpoint(B, G)), Line(E, F), H we get Line(E, F) != Line(H, midpoint(B, G))
By line_inequality on Line(H, center(c)), Line(F, projection(A, i)), H we get Line(H, center(c)) != Line(F, projection(A, i))
By directions_draw_angle on E, G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get exists(angle(E, G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))))
By directions_draw_angle on H, midpoint(B, G), projection(midpoint(B, G), Line(B, I)) we get exists(angle(H, midpoint(B, G), projection(midpoint(B, G), Line(B, I))))
By directions_draw_angle on projection(midpoint(B, G), i), midpoint(B, G), F we get exists(angle(projection(midpoint(B, G), i), midpoint(B, G), F))
By line_inequality on altitude(orthocenter(A, B, D), F, projection(A, i)), median(F, B, G), orthocenter(A, B, D) we get median(F, B, G) != altitude(orthocenter(A, B, D), F, projection(A, i))
By line_inequality on Line(F, G), median(projection(A, Line(D, G)), B, G), G we get Line(F, G) != median(projection(A, Line(D, G)), B, G)
By line_containment_inequality on line_intersection(median(projection(A, Line(D, G)), B, G), altitude(D, midpoint(B, G), projection(A, Line(D, G)))), orthocenter(A, D, G), median(projection(A, Line(D, G)), B, G) we get orthocenter(A, D, G) != line_intersection(median(projection(A, Line(D, G)), B, G), altitude(D, midpoint(B, G), projection(A, Line(D, G))))
By line_inequality on Line(F, I), altitude(A, B, D), I we get Line(F, I) != altitude(A, B, D)
By directions_draw_angle on projection(A, median(E, B, G)), A, orthocenter(A, B, D) we get exists(angle(projection(A, median(E, B, G)), A, orthocenter(A, B, D)))
By directions_draw_angle on orthocenter(A, B, D), F, midpoint(B, G) we get exists(angle(orthocenter(A, B, D), F, midpoint(B, G)))
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), orthocenter(A, D, G) we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), orthocenter(A, D, G)))
By line_inequality on Line(F, I), Line(D, G), I we get Line(D, G) != Line(F, I)
By line_inequality on altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i)), altitude(A, D, G), orthocenter(A, B, D) we get altitude(A, D, G) != altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i))
By directions_draw_angle on B, E, midpoint(B, G) we get exists(angle(B, E, midpoint(B, G)))
By directions_draw_angle on G, orthocenter(A, D, G), I we get exists(angle(G, orthocenter(A, D, G), I))
By directions_draw_angle on line_intersection(h, altitude(projection(A, i), A, D)), B, midpoint(B, G) we get exists(angle(line_intersection(h, altitude(projection(A, i), A, D)), B, midpoint(B, G)))
By directions_draw_angle on A, G, line_intersection(h, altitude(projection(A, i), A, D)) we get exists(angle(A, G, line_intersection(h, altitude(projection(A, i), A, D))))
By not_in_line_equivalent_to_not_collinear_v0_r on G, B, E we get G not in Line(B, E)
By directions_draw_angle on projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), D we get exists(angle(projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), D))
By line_inequality on altitude(D, E, projection(A, Line(D, G))), Line(F, projection(A, i)), D we get Line(F, projection(A, i)) != altitude(D, E, projection(A, Line(D, G)))
By directions_draw_angle on I, H, midpoint(B, G) we get exists(angle(I, H, midpoint(B, G)))
By directions_draw_angle on orthocenter(A, D, G), I, F we get exists(angle(orthocenter(A, D, G), I, F))
By directions_draw_angle on projection(midpoint(B, G), Line(D, G)), midpoint(B, G), H we get exists(angle(projection(midpoint(B, G), Line(D, G)), midpoint(B, G), H))
By directions_draw_angle on projection(A, median(E, B, G)), A, G we get exists(angle(projection(A, median(E, B, G)), A, G))
By directions_draw_angle on projection(F, Line(H, orthocenter(A, B, D))), F, G we get exists(angle(projection(F, Line(H, orthocenter(A, B, D))), F, G))
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), f, G we get f != Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By directions_draw_angle on midpoint(B, G), F, orthocenter(A, B, D) we get exists(angle(midpoint(B, G), F, orthocenter(A, B, D)))
By directions_draw_angle on E, H, G we get exists(angle(E, H, G))
By line_inequality on Line(H, midpoint(B, G)), Line(D, G), midpoint(B, G) we get Line(D, G) != Line(H, midpoint(B, G))
By not_in_line_equivalent_to_not_collinear_v0_r on G, I, H we get G not in Line(H, I)
By directions_draw_angle on projection(midpoint(B, G), Line(D, F)), midpoint(B, G), E we get exists(angle(projection(midpoint(B, G), Line(D, F)), midpoint(B, G), E))
By directions_draw_angle on projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), C we get exists(angle(projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), C))
By directions_draw_angle on projection(midpoint(B, G), Line(D, F)), midpoint(B, G), orthocenter(A, B, D) we get exists(angle(projection(midpoint(B, G), Line(D, F)), midpoint(B, G), orthocenter(A, B, D)))
By line_containment_inequality on line_intersection(median(projection(A, i), B, G), altitude(D, midpoint(B, G), projection(A, i))), A, median(projection(A, i), B, G) we get A != line_intersection(median(projection(A, i), B, G), altitude(D, midpoint(B, G), projection(A, i)))
By line_inequality on altitude(orthocenter(A, B, D), F, projection(A, i)), median(projection(A, i), B, G), orthocenter(A, B, D) we get median(projection(A, i), B, G) != altitude(orthocenter(A, B, D), F, projection(A, i))
By line_inequality on altitude(A, F, midpoint(B, G)), median(projection(A, i), B, G), A we get altitude(A, F, midpoint(B, G)) != median(projection(A, i), B, G)
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), E we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), E))
By directions_draw_angle on E, midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G)) we get exists(angle(E, midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G))))
By line_inequality on Line(F, I), median(F, B, G), I we get Line(F, I) != median(F, B, G)
By directions_draw_angle on B, midpoint(B, G), E we get exists(angle(B, midpoint(B, G), E))
By directions_draw_angle on F, G, E we get exists(angle(F, G, E))
By directions_draw_angle on projection(E, Line(B, G)), E, orthocenter(A, D, G) we get exists(angle(projection(E, Line(B, G)), E, orthocenter(A, D, G)))
By directions_draw_angle on A, G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get exists(angle(A, G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))))
By line_inequality on Line(B, E), Line(E, F), B we get Line(B, E) != Line(E, F)
By directions_draw_angle on H, G, orthocenter(A, D, G) we get exists(angle(H, G, orthocenter(A, D, G)))
By directions_draw_angle on projection(midpoint(B, G), Line(B, I)), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G))) we get exists(angle(projection(midpoint(B, G), Line(B, I)), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G)))))
By line_inequality on Line(H, midpoint(B, G)), Line(D, E), H we get Line(D, E) != Line(H, midpoint(B, G))
By directions_draw_angle on projection(E, Line(C, orthocenter(A, D, G))), E, projection(E, Line(C, D)) we get exists(angle(projection(E, Line(C, orthocenter(A, D, G))), E, projection(E, Line(C, D))))
By line_containment_inequality on line_intersection(Line(E, projection(A, Line(D, G))), altitude(G, E, projection(A, Line(D, G)))), G, Line(E, projection(A, Line(D, G))) we get G != line_intersection(Line(E, projection(A, Line(D, G))), altitude(G, E, projection(A, Line(D, G))))
By directions_draw_angle on F, orthocenter(A, B, D), H we get exists(angle(F, orthocenter(A, B, D), H))
By directions_draw_angle on orthocenter(A, D, G), I, D we get exists(angle(orthocenter(A, D, G), I, D))
By line_inequality on Line(B, E), altitude(A, D, G), E we get Line(B, E) != altitude(A, D, G)
By line_inequality on altitude(D, F, midpoint(B, G)), median(projection(A, i), B, G), D we get altitude(D, F, midpoint(B, G)) != median(projection(A, i), B, G)
By directions_draw_angle on D, midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G)) we get exists(angle(D, midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G))))
By directions_draw_angle on E, F, G we get exists(angle(E, F, G))
By directions_draw_angle on projection(midpoint(B, G), Line(D, E)), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D))) we get exists(angle(projection(midpoint(B, G), Line(D, E)), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D)))))
By directions_draw_angle on projection(A, median(F, B, G)), A, H we get exists(angle(projection(A, median(F, B, G)), A, H))
By directions_draw_angle on G, midpoint(B, G), H we get exists(angle(G, midpoint(B, G), H))
By line_inequality on altitude(D, E, projection(A, Line(D, G))), Line(E, F), D we get Line(E, F) != altitude(D, E, projection(A, Line(D, G)))
By directions_draw_angle on midpoint(B, G), E, center(c) we get exists(angle(midpoint(B, G), E, center(c)))
By directions_draw_angle on D, H, orthocenter(A, B, D) we get exists(angle(D, H, orthocenter(A, B, D)))
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G)) we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G))))
By directions_draw_angle on projection(F, altitude(A, B, D)), F, projection(F, Line(H, orthocenter(A, B, D))) we get exists(angle(projection(F, altitude(A, B, D)), F, projection(F, Line(H, orthocenter(A, B, D)))))
By directions_draw_angle on C, G, F we get exists(angle(C, G, F))
By directions_draw_angle on I, H, E we get exists(angle(I, H, E))
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D)) we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D))))
By directions_draw_angle on projection(F, Line(D, H)), F, projection(F, Line(H, orthocenter(A, B, D))) we get exists(angle(projection(F, Line(D, H)), F, projection(F, Line(H, orthocenter(A, B, D)))))
By directions_draw_angle on projection(F, Line(D, H)), F, projection(F, altitude(A, B, D)) we get exists(angle(projection(F, Line(D, H)), F, projection(F, altitude(A, B, D))))
By directions_draw_angle on projection(F, h), F, G we get exists(angle(projection(F, h), F, G))
By not_in_line_equivalent_to_not_collinear_v0_r on orthocenter(A, B, D), H, G we get orthocenter(A, B, D) not in Line(G, H)
By directions_draw_angle on I, F, G we get exists(angle(I, F, G))
By directions_draw_angle on B, E, C we get exists(angle(B, E, C))
By directions_draw_angle on projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), F we get exists(angle(projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), F))
By directions_draw_angle on A, midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D)) we get exists(angle(A, midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D))))
By directions_draw_angle on projection(A, Line(D, G)), G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get exists(angle(projection(A, Line(D, G)), G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))))
By line_inequality on altitude(orthocenter(A, D, G), E, projection(A, Line(D, G))), h, orthocenter(A, D, G) we get h != altitude(orthocenter(A, D, G), E, projection(A, Line(D, G)))
By line_inequality on Line(H, I), Line(B, G), I we get Line(B, G) != Line(H, I)
By line_inequality on altitude(orthocenter(A, D, G), E, projection(A, Line(D, G))), Line(D, F), orthocenter(A, D, G) we get Line(D, F) != altitude(orthocenter(A, D, G), E, projection(A, Line(D, G)))
By directions_draw_angle on F, midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G))) we get exists(angle(F, midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G)))))
By line_inequality on altitude(orthocenter(A, D, G), E, projection(A, Line(D, G))), i, orthocenter(A, D, G) we get i != altitude(orthocenter(A, D, G), E, projection(A, Line(D, G)))
By line_inequality on altitude(D, E, projection(A, Line(D, G))), Line(C, orthocenter(A, D, G)), D we get Line(C, orthocenter(A, D, G)) != altitude(D, E, projection(A, Line(D, G)))
By directions_draw_angle on orthocenter(A, D, G), I, orthocenter(A, B, D) we get exists(angle(orthocenter(A, D, G), I, orthocenter(A, B, D)))
By directions_draw_angle on midpoint(B, G), orthocenter(A, D, G), C we get exists(angle(midpoint(B, G), orthocenter(A, D, G), C))
By line_inequality on altitude(orthocenter(A, D, G), E, projection(A, Line(D, G))), g, orthocenter(A, D, G) we get g != altitude(orthocenter(A, D, G), E, projection(A, Line(D, G)))
By directions_draw_angle on orthocenter(A, B, D), I, B we get exists(angle(orthocenter(A, B, D), I, B))
By directions_draw_angle on A, B, line_intersection(h, altitude(projection(A, i), A, D)) we get exists(angle(A, B, line_intersection(h, altitude(projection(A, i), A, D))))
By directions_draw_angle on G, E, projection(E, Line(B, G)) we get exists(angle(G, E, projection(E, Line(B, G))))
By line_inequality on altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G))), Line(D, F), orthocenter(A, D, G) we get Line(D, F) != altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G)))
By directions_draw_angle on E, C, midpoint(B, G) we get exists(angle(E, C, midpoint(B, G)))
By directions_draw_angle on G, midpoint(B, G), projection(midpoint(B, G), Line(D, F)) we get exists(angle(G, midpoint(B, G), projection(midpoint(B, G), Line(D, F))))
By directions_draw_angle on I, F, E we get exists(angle(I, F, E))
By line_inequality on altitude(A, E, midpoint(B, G)), Line(F, projection(A, i)), A we get Line(F, projection(A, i)) != altitude(A, E, midpoint(B, G))
By directions_draw_angle on projection(E, Line(B, G)), E, F we get exists(angle(projection(E, Line(B, G)), E, F))
By directions_draw_angle on midpoint(B, G), H, center(c) we get exists(angle(midpoint(B, G), H, center(c)))
By directions_draw_angle on projection(E, Line(C, orthocenter(A, D, G))), E, orthocenter(A, D, G) we get exists(angle(projection(E, Line(C, orthocenter(A, D, G))), E, orthocenter(A, D, G)))
By directions_draw_angle on line_intersection(h, altitude(projection(A, i), A, D)), B, F we get exists(angle(line_intersection(h, altitude(projection(A, i), A, D)), B, F))
By directions_draw_angle on F, A, projection(A, median(E, B, G)) we get exists(angle(F, A, projection(A, median(E, B, G))))
By directions_draw_angle on I, F, projection(F, h) we get exists(angle(I, F, projection(F, h)))
By directions_draw_angle on H, orthocenter(A, B, D), I we get exists(angle(H, orthocenter(A, B, D), I))
By directions_draw_angle on projection(midpoint(B, G), f), midpoint(B, G), H we get exists(angle(projection(midpoint(B, G), f), midpoint(B, G), H))
By directions_draw_angle on H, I, E we get exists(angle(H, I, E))
By directions_draw_angle on line_intersection(h, altitude(projection(A, i), A, D)), B, projection(F, h) we get exists(angle(line_intersection(h, altitude(projection(A, i), A, D)), B, projection(F, h)))
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), Line(G, I), B we get Line(G, I) != Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By directions_draw_angle on projection(midpoint(B, G), i), midpoint(B, G), C we get exists(angle(projection(midpoint(B, G), i), midpoint(B, G), C))
By directions_draw_angle on G, H, C we get exists(angle(G, H, C))
By directions_draw_angle on orthocenter(A, B, D), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G))) we get exists(angle(orthocenter(A, B, D), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G)))))
By line_inequality on altitude(D, E, midpoint(B, G)), Line(E, projection(A, Line(D, G))), D we get altitude(D, E, midpoint(B, G)) != Line(E, projection(A, Line(D, G)))
By directions_draw_angle on midpoint(B, G), B, E we get exists(angle(midpoint(B, G), B, E))
By directions_draw_angle on I, orthocenter(A, B, D), orthocenter(A, D, G) we get exists(angle(I, orthocenter(A, B, D), orthocenter(A, D, G)))
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, i), A, D))), Line(D, F), G we get Line(D, F) != Line(G, line_intersection(h, altitude(projection(A, i), A, D)))
By directions_draw_angle on midpoint(B, G), C, E we get exists(angle(midpoint(B, G), C, E))
By directions_draw_angle on D, G, line_intersection(h, altitude(projection(A, i), A, D)) we get exists(angle(D, G, line_intersection(h, altitude(projection(A, i), A, D))))
By line_inequality on Line(H, I), Line(D, G), H we get Line(D, G) != Line(H, I)
By directions_draw_angle on I, H, C we get exists(angle(I, H, C))
By directions_draw_angle on D, midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G))) we get exists(angle(D, midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G)))))
By directions_draw_angle on B, F, I we get exists(angle(B, F, I))
By directions_draw_angle on H, midpoint(B, G), I we get exists(angle(H, midpoint(B, G), I))
By directions_draw_angle on C, orthocenter(A, D, G), orthocenter(A, B, D) we get exists(angle(C, orthocenter(A, D, G), orthocenter(A, B, D)))
By directions_draw_angle on E, midpoint(B, G), B we get exists(angle(E, midpoint(B, G), B))
By line_inequality on altitude(D, F, projection(A, i)), Line(I, orthocenter(A, D, G)), D we get Line(I, orthocenter(A, D, G)) != altitude(D, F, projection(A, i))
By directions_draw_angle on midpoint(B, G), B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get exists(angle(midpoint(B, G), B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))))
By directions_draw_angle on F, midpoint(B, G), projection(midpoint(B, G), Line(G, I)) we get exists(angle(F, midpoint(B, G), projection(midpoint(B, G), Line(G, I))))
By directions_draw_angle on E, midpoint(B, G), projection(midpoint(B, G), Line(D, G)) we get exists(angle(E, midpoint(B, G), projection(midpoint(B, G), Line(D, G))))
By directions_draw_angle on center(c), H, midpoint(B, G) we get exists(angle(center(c), H, midpoint(B, G)))
By directions_draw_angle on midpoint(B, G), F, B we get exists(angle(midpoint(B, G), F, B))
By directions_draw_angle on E, I, H we get exists(angle(E, I, H))
By line_inequality on altitude(orthocenter(A, D, G), E, projection(A, Line(D, G))), Line(E, F), orthocenter(A, D, G) we get Line(E, F) != altitude(orthocenter(A, D, G), E, projection(A, Line(D, G)))
By directions_draw_angle on orthocenter(A, D, G), C, A we get exists(angle(orthocenter(A, D, G), C, A))
By directions_draw_angle on projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), I we get exists(angle(projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), I))
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G)) we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G))))
By directions_draw_angle on orthocenter(A, B, D), I, D we get exists(angle(orthocenter(A, B, D), I, D))
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), G we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), G))
By directions_draw_angle on B, orthocenter(A, D, G), I we get exists(angle(B, orthocenter(A, D, G), I))
By not_in_line_equivalent_to_not_collinear_v0_r on midpoint(B, G), F, I we get midpoint(B, G) not in Line(F, I)
By directions_draw_angle on projection(E, altitude(A, D, G)), E, midpoint(B, G) we get exists(angle(projection(E, altitude(A, D, G)), E, midpoint(B, G)))
By line_inequality on Line(H, I), Line(B, C), H we get Line(B, C) != Line(H, I)
By directions_draw_angle on F, midpoint(B, G), B we get exists(angle(F, midpoint(B, G), B))
By directions_draw_angle on projection(A, Line(D, G)), G, line_intersection(h, altitude(projection(A, i), A, D)) we get exists(angle(projection(A, Line(D, G)), G, line_intersection(h, altitude(projection(A, i), A, D))))
By directions_draw_angle on F, midpoint(B, G), H we get exists(angle(F, midpoint(B, G), H))
By directions_draw_angle on projection(F, h), G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get exists(angle(projection(F, h), G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))))
By line_containment_inequality on line_intersection(median(projection(A, Line(D, G)), B, G), altitude(D, midpoint(B, G), projection(A, Line(D, G)))), orthocenter(A, B, D), median(projection(A, Line(D, G)), B, G) we get orthocenter(A, B, D) != line_intersection(median(projection(A, Line(D, G)), B, G), altitude(D, midpoint(B, G), projection(A, Line(D, G))))
By directions_draw_angle on H, G, line_intersection(h, altitude(projection(A, i), A, D)) we get exists(angle(H, G, line_intersection(h, altitude(projection(A, i), A, D))))
By directions_draw_angle on C, midpoint(B, G), I we get exists(angle(C, midpoint(B, G), I))
By directions_draw_angle on projection(F, i), F, projection(F, Line(B, G)) we get exists(angle(projection(F, i), F, projection(F, Line(B, G))))
By directions_draw_angle on B, midpoint(B, G), H we get exists(angle(B, midpoint(B, G), H))
By directions_draw_angle on midpoint(B, G), C, F we get exists(angle(midpoint(B, G), C, F))
By line_inequality on Line(F, I), Line(H, orthocenter(A, B, D)), F we get Line(F, I) != Line(H, orthocenter(A, B, D))
By directions_draw_angle on projection(midpoint(B, G), Line(D, E)), midpoint(B, G), projection(midpoint(B, G), Line(D, F)) we get exists(angle(projection(midpoint(B, G), Line(D, E)), midpoint(B, G), projection(midpoint(B, G), Line(D, F))))
By directions_draw_angle on C, E, I we get exists(angle(C, E, I))
By line_inequality on altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i)), median(projection(A, i), B, G), orthocenter(A, B, D) we get median(projection(A, i), B, G) != altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i))
By directions_draw_angle on projection(E, h), G, line_intersection(h, altitude(projection(A, i), A, D)) we get exists(angle(projection(E, h), G, line_intersection(h, altitude(projection(A, i), A, D))))
By directions_draw_angle on H, midpoint(B, G), projection(midpoint(B, G), i) we get exists(angle(H, midpoint(B, G), projection(midpoint(B, G), i)))
By line_inequality on Line(C, midpoint(B, G)), Line(D, H), midpoint(B, G) we get Line(D, H) != Line(C, midpoint(B, G))
By directions_draw_angle on projection(A, median(E, B, G)), A, H we get exists(angle(projection(A, median(E, B, G)), A, H))
By directions_draw_angle on projection(midpoint(B, G), g), midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D)) we get exists(angle(projection(midpoint(B, G), g), midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D))))
By directions_draw_angle on projection(F, Line(D, H)), F, midpoint(B, G) we get exists(angle(projection(F, Line(D, H)), F, midpoint(B, G)))
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), projection(midpoint(B, G), Line(D, E)) we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), projection(midpoint(B, G), Line(D, E))))
By directions_draw_angle on E, midpoint(B, G), orthocenter(A, B, D) we get exists(angle(E, midpoint(B, G), orthocenter(A, B, D)))
By line_inequality on Line(E, I), Line(E, H), I we get Line(E, H) != Line(E, I)
By directions_draw_angle on G, A, projection(A, median(F, B, G)) we get exists(angle(G, A, projection(A, median(F, B, G))))
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, E we get F not in Line(B, E)
By directions_draw_angle on orthocenter(A, D, G), midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D)) we get exists(angle(orthocenter(A, D, G), midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D))))
By directions_draw_angle on projection(midpoint(B, G), Line(D, G)), midpoint(B, G), E we get exists(angle(projection(midpoint(B, G), Line(D, G)), midpoint(B, G), E))
By directions_draw_angle on projection(midpoint(B, G), f), midpoint(B, G), projection(midpoint(B, G), Line(D, E)) we get exists(angle(projection(midpoint(B, G), f), midpoint(B, G), projection(midpoint(B, G), Line(D, E))))
By line_inequality on altitude(B, midpoint(B, G), projection(A, i)), median(projection(A, i), B, G), B we get median(projection(A, i), B, G) != altitude(B, midpoint(B, G), projection(A, i))
By directions_draw_angle on I, H, center(c) we get exists(angle(I, H, center(c)))
By directions_draw_angle on E, midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D))) we get exists(angle(E, midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D)))))
By directions_draw_angle on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), G, A we get exists(angle(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), G, A))
By directions_draw_angle on I, orthocenter(A, D, G), E we get exists(angle(I, orthocenter(A, D, G), E))
By directions_draw_angle on H, midpoint(B, G), projection(midpoint(B, G), g) we get exists(angle(H, midpoint(B, G), projection(midpoint(B, G), g)))
By directions_draw_angle on orthocenter(A, D, G), I, C we get exists(angle(orthocenter(A, D, G), I, C))
By line_inequality on Line(F, I), i, I we get i != Line(F, I)
By directions_draw_angle on E, B, line_intersection(h, altitude(projection(A, i), A, D)) we get exists(angle(E, B, line_intersection(h, altitude(projection(A, i), A, D))))
By line_inequality on altitude(D, E, projection(A, Line(D, G))), g, D we get g != altitude(D, E, projection(A, Line(D, G)))
By directions_draw_angle on orthocenter(A, D, G), midpoint(B, G), projection(midpoint(B, G), Line(D, E)) we get exists(angle(orthocenter(A, D, G), midpoint(B, G), projection(midpoint(B, G), Line(D, E))))
By line_inequality on radical_axis(c, d), Line(E, projection(A, Line(D, G))), C we get radical_axis(c, d) != Line(E, projection(A, Line(D, G)))
By directions_draw_angle on C, I, H we get exists(angle(C, I, H))
By directions_draw_angle on projection(E, Line(C, D)), E, projection(E, Line(C, orthocenter(A, D, G))) we get exists(angle(projection(E, Line(C, D)), E, projection(E, Line(C, orthocenter(A, D, G)))))
By line_inequality on altitude(G, midpoint(B, G), projection(A, Line(D, G))), median(E, B, G), G we get median(E, B, G) != altitude(G, midpoint(B, G), projection(A, Line(D, G)))
By directions_draw_angle on B, orthocenter(A, B, D), I we get exists(angle(B, orthocenter(A, B, D), I))
By directions_draw_angle on G, E, B we get exists(angle(G, E, B))
By line_inequality on Line(F, G), Line(C, I), G we get Line(C, I) != Line(F, G)
By directions_draw_angle on A, orthocenter(A, D, G), I we get exists(angle(A, orthocenter(A, D, G), I))
By directions_draw_angle on H, G, F we get exists(angle(H, G, F))
By line_inequality on Line(F, G), Line(B, I), G we get Line(B, I) != Line(F, G)
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, i), A, D))), median(projection(A, Line(D, G)), B, G), G we get median(projection(A, Line(D, G)), B, G) != Line(G, line_intersection(h, altitude(projection(A, i), A, D)))
By directions_draw_angle on projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), projection(midpoint(B, G), Line(B, I)) we get exists(angle(projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), projection(midpoint(B, G), Line(B, I))))
By directions_draw_angle on G, H, B we get exists(angle(G, H, B))
By directions_draw_angle on orthocenter(A, B, D), F, G we get exists(angle(orthocenter(A, B, D), F, G))
By directions_draw_angle on projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D))) we get exists(angle(projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D)))))
By directions_draw_angle on G, orthocenter(A, B, D), H we get exists(angle(G, orthocenter(A, B, D), H))
By directions_draw_angle on G, I, E we get exists(angle(G, I, E))
By line_containment_inequality on line_intersection(median(projection(A, Line(D, G)), B, G), altitude(A, midpoint(B, G), projection(A, Line(D, G)))), orthocenter(A, D, G), median(projection(A, Line(D, G)), B, G) we get orthocenter(A, D, G) != line_intersection(median(projection(A, Line(D, G)), B, G), altitude(A, midpoint(B, G), projection(A, Line(D, G))))
By directions_draw_angle on midpoint(B, G), E, projection(E, h) we get exists(angle(midpoint(B, G), E, projection(E, h)))
By directions_draw_angle on G, C, midpoint(B, G) we get exists(angle(G, C, midpoint(B, G)))
By directions_draw_angle on I, midpoint(B, G), C we get exists(angle(I, midpoint(B, G), C))
By directions_draw_angle on orthocenter(A, D, G), C, E we get exists(angle(orthocenter(A, D, G), C, E))
By directions_draw_angle on I, midpoint(B, G), projection(midpoint(B, G), Line(D, F)) we get exists(angle(I, midpoint(B, G), projection(midpoint(B, G), Line(D, F))))
By directions_draw_angle on center(c), F, projection(F, Line(B, G)) we get exists(angle(center(c), F, projection(F, Line(B, G))))
By directions_draw_angle on C, I, E we get exists(angle(C, I, E))
By directions_draw_angle on projection(F, h), B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get exists(angle(projection(F, h), B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))))
By directions_draw_angle on I, F, center(c) we get exists(angle(I, F, center(c)))
By line_inequality on Line(E, I), h, E we get h != Line(E, I)
By directions_draw_angle on projection(F, altitude(A, B, D)), F, projection(F, Line(B, G)) we get exists(angle(projection(F, altitude(A, B, D)), F, projection(F, Line(B, G))))
By directions_draw_angle on midpoint(B, G), A, projection(A, median(E, B, G)) we get exists(angle(midpoint(B, G), A, projection(A, median(E, B, G))))
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), orthocenter(A, B, D) we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), orthocenter(A, B, D)))
By directions_draw_angle on line_intersection(h, altitude(projection(A, i), A, D)), B, orthocenter(A, D, G) we get exists(angle(line_intersection(h, altitude(projection(A, i), A, D)), B, orthocenter(A, D, G)))
By directions_draw_angle on projection(midpoint(B, G), g), midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G)) we get exists(angle(projection(midpoint(B, G), g), midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G))))
By directions_draw_angle on projection(A, median(E, B, G)), A, E we get exists(angle(projection(A, median(E, B, G)), A, E))
By directions_draw_angle on projection(E, Line(C, orthocenter(A, D, G))), E, projection(E, Line(D, G)) we get exists(angle(projection(E, Line(C, orthocenter(A, D, G))), E, projection(E, Line(D, G))))
By directions_draw_angle on projection(midpoint(B, G), f), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G))) we get exists(angle(projection(midpoint(B, G), f), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G)))))
By directions_draw_angle on D, B, line_intersection(h, altitude(projection(A, i), A, D)) we get exists(angle(D, B, line_intersection(h, altitude(projection(A, i), A, D))))
By directions_draw_angle on I, F, projection(F, Line(B, G)) we get exists(angle(I, F, projection(F, Line(B, G))))
By line_inequality on altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i)), Line(B, C), orthocenter(A, B, D) we get Line(B, C) != altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i))
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), Line(E, F), B we get Line(E, F) != Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By directions_draw_angle on E, midpoint(B, G), projection(midpoint(B, G), Line(G, I)) we get exists(angle(E, midpoint(B, G), projection(midpoint(B, G), Line(G, I))))
By directions_draw_angle on line_intersection(h, altitude(projection(A, i), A, D)), G, midpoint(B, G) we get exists(angle(line_intersection(h, altitude(projection(A, i), A, D)), G, midpoint(B, G)))
By line_inequality on altitude(G, midpoint(B, G), projection(A, Line(D, G))), median(projection(A, i), B, G), G we get median(projection(A, i), B, G) != altitude(G, midpoint(B, G), projection(A, Line(D, G)))
By directions_draw_angle on projection(midpoint(B, G), Line(G, I)), midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D)) we get exists(angle(projection(midpoint(B, G), Line(G, I)), midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D))))
By line_inequality on altitude(B, midpoint(B, G), projection(A, i)), Line(C, H), B we get Line(C, H) != altitude(B, midpoint(B, G), projection(A, i))
By directions_draw_angle on F, G, projection(A, Line(D, G)) we get exists(angle(F, G, projection(A, Line(D, G))))
By line_inequality on Line(F, G), Line(I, orthocenter(A, B, D)), G we get Line(F, G) != Line(I, orthocenter(A, B, D))
By directions_draw_angle on orthocenter(A, D, G), midpoint(B, G), H we get exists(angle(orthocenter(A, D, G), midpoint(B, G), H))
By line_inequality on altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G))), Line(D, H), orthocenter(A, D, G) we get Line(D, H) != altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G)))
By directions_draw_angle on projection(E, Line(C, orthocenter(A, D, G))), E, projection(E, h) we get exists(angle(projection(E, Line(C, orthocenter(A, D, G))), E, projection(E, h)))
By directions_draw_angle on G, E, I we get exists(angle(G, E, I))
By directions_draw_angle on projection(E, h), E, B we get exists(angle(projection(E, h), E, B))
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, i), A, D))), i, G we get i != Line(G, line_intersection(h, altitude(projection(A, i), A, D)))
By directions_draw_angle on E, I, orthocenter(A, B, D) we get exists(angle(E, I, orthocenter(A, B, D)))
By directions_draw_angle on projection(midpoint(B, G), Line(D, F)), midpoint(B, G), projection(midpoint(B, G), i) we get exists(angle(projection(midpoint(B, G), Line(D, F)), midpoint(B, G), projection(midpoint(B, G), i)))
By line_inequality on Line(H, I), Line(C, D), H we get Line(C, D) != Line(H, I)
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), projection(midpoint(B, G), Line(G, I)) we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), projection(midpoint(B, G), Line(G, I))))
By directions_draw_angle on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), B, projection(E, h) we get exists(angle(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), B, projection(E, h)))
By line_inequality on altitude(D, midpoint(B, G), projection(A, Line(D, G))), Line(E, projection(A, Line(D, G))), D we get Line(E, projection(A, Line(D, G))) != altitude(D, midpoint(B, G), projection(A, Line(D, G)))
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), orthocenter(A, D, G) we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), orthocenter(A, D, G)))
By directions_draw_angle on projection(midpoint(B, G), f), midpoint(B, G), C we get exists(angle(projection(midpoint(B, G), f), midpoint(B, G), C))
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, i), A, D))), Line(C, orthocenter(A, D, G)), G we get Line(C, orthocenter(A, D, G)) != Line(G, line_intersection(h, altitude(projection(A, i), A, D)))
By directions_draw_angle on midpoint(B, G), C, B we get exists(angle(midpoint(B, G), C, B))
By not_in_line_equivalent_to_not_collinear_v0_r on H, I, E we get H not in Line(E, I)
By directions_draw_angle on I, orthocenter(A, D, G), projection(A, Line(D, G)) we get exists(angle(I, orthocenter(A, D, G), projection(A, Line(D, G))))
By not_in_line_equivalent_to_not_collinear_v0_r on D, F, G we get D not in Line(F, G)
By directions_draw_angle on projection(A, median(F, B, G)), A, projection(A, median(E, B, G)) we get exists(angle(projection(A, median(F, B, G)), A, projection(A, median(E, B, G))))
By directions_draw_angle on projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), D we get exists(angle(projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), D))
By directions_draw_angle on projection(midpoint(B, G), Line(D, F)), midpoint(B, G), orthocenter(A, D, G) we get exists(angle(projection(midpoint(B, G), Line(D, F)), midpoint(B, G), orthocenter(A, D, G)))
By directions_draw_angle on orthocenter(A, B, D), A, projection(A, median(F, B, G)) we get exists(angle(orthocenter(A, B, D), A, projection(A, median(F, B, G))))
By directions_draw_angle on projection(F, Line(B, G)), F, G we get exists(angle(projection(F, Line(B, G)), F, G))
By directions_draw_angle on projection(midpoint(B, G), Line(D, F)), midpoint(B, G), F we get exists(angle(projection(midpoint(B, G), Line(D, F)), midpoint(B, G), F))
By directions_draw_angle on projection(F, i), F, projection(F, Line(H, orthocenter(A, B, D))) we get exists(angle(projection(F, i), F, projection(F, Line(H, orthocenter(A, B, D)))))
By directions_draw_angle on projection(F, Line(B, G)), F, projection(F, Line(H, orthocenter(A, B, D))) we get exists(angle(projection(F, Line(B, G)), F, projection(F, Line(H, orthocenter(A, B, D)))))
By directions_draw_angle on midpoint(B, G), E, projection(E, Line(D, G)) we get exists(angle(midpoint(B, G), E, projection(E, Line(D, G))))
By directions_draw_angle on I, E, B we get exists(angle(I, E, B))
By directions_draw_angle on projection(midpoint(B, G), Line(D, G)), midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D)) we get exists(angle(projection(midpoint(B, G), Line(D, G)), midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D))))
By directions_draw_angle on B, midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D))) we get exists(angle(B, midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D)))))
By directions_draw_angle on C, E, projection(E, Line(C, orthocenter(A, D, G))) we get exists(angle(C, E, projection(E, Line(C, orthocenter(A, D, G)))))
By line_inequality on Line(C, midpoint(B, G)), Line(H, orthocenter(A, B, D)), midpoint(B, G) we get Line(C, midpoint(B, G)) != Line(H, orthocenter(A, B, D))
By directions_draw_angle on projection(midpoint(B, G), Line(D, F)), midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G)) we get exists(angle(projection(midpoint(B, G), Line(D, F)), midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G))))
By directions_draw_angle on H, F, projection(F, altitude(A, B, D)) we get exists(angle(H, F, projection(F, altitude(A, B, D))))
By directions_draw_angle on orthocenter(A, D, G), B, E we get exists(angle(orthocenter(A, D, G), B, E))
By directions_draw_angle on H, F, projection(F, Line(H, orthocenter(A, B, D))) we get exists(angle(H, F, projection(F, Line(H, orthocenter(A, B, D)))))
By line_inequality on altitude(D, E, midpoint(B, G)), Line(F, projection(A, i)), D we get Line(F, projection(A, i)) != altitude(D, E, midpoint(B, G))
By line_inequality on Line(H, I), median(F, B, G), H we get Line(H, I) != median(F, B, G)
By line_inequality on altitude(orthocenter(A, D, G), E, projection(A, Line(D, G))), Line(D, G), orthocenter(A, D, G) we get Line(D, G) != altitude(orthocenter(A, D, G), E, projection(A, Line(D, G)))
By directions_draw_angle on projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), F we get exists(angle(projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), F))
By directions_draw_angle on line_intersection(h, altitude(projection(A, i), A, D)), B, I we get exists(angle(line_intersection(h, altitude(projection(A, i), A, D)), B, I))
By directions_draw_angle on H, E, midpoint(B, G) we get exists(angle(H, E, midpoint(B, G)))
By directions_draw_angle on D, midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D))) we get exists(angle(D, midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D)))))
By directions_draw_angle on line_intersection(h, altitude(projection(A, i), A, D)), G, projection(F, h) we get exists(angle(line_intersection(h, altitude(projection(A, i), A, D)), G, projection(F, h)))
By line_inequality on altitude(A, F, projection(A, i)), median(projection(A, Line(D, G)), B, G), A we get altitude(A, F, projection(A, i)) != median(projection(A, Line(D, G)), B, G)
By line_containment_inequality on line_intersection(median(projection(A, i), B, G), altitude(A, midpoint(B, G), projection(A, i))), G, median(projection(A, i), B, G) we get G != line_intersection(median(projection(A, i), B, G), altitude(A, midpoint(B, G), projection(A, i)))
By directions_draw_angle on projection(A, median(F, B, G)), A, G we get exists(angle(projection(A, median(F, B, G)), A, G))
By directions_draw_angle on G, E, projection(E, altitude(A, D, G)) we get exists(angle(G, E, projection(E, altitude(A, D, G))))
By not_in_line_equivalent_to_not_collinear_v0_r on A, I, F we get A not in Line(F, I)
By line_inequality on Line(G, H), Line(E, H), G we get Line(E, H) != Line(G, H)
By directions_draw_angle on projection(midpoint(B, G), i), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G))) we get exists(angle(projection(midpoint(B, G), i), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G)))))
By line_containment_inequality on line_intersection(median(projection(A, i), B, G), altitude(A, midpoint(B, G), projection(A, i))), D, median(projection(A, i), B, G) we get D != line_intersection(median(projection(A, i), B, G), altitude(A, midpoint(B, G), projection(A, i)))
By directions_draw_angle on H, orthocenter(A, B, D), midpoint(B, G) we get exists(angle(H, orthocenter(A, B, D), midpoint(B, G)))
By directions_draw_angle on F, I, orthocenter(A, B, D) we get exists(angle(F, I, orthocenter(A, B, D)))
By directions_draw_angle on F, G, projection(E, h) we get exists(angle(F, G, projection(E, h)))
By directions_draw_angle on orthocenter(A, B, D), orthocenter(A, D, G), I we get exists(angle(orthocenter(A, B, D), orthocenter(A, D, G), I))
By directions_draw_angle on H, midpoint(B, G), projection(midpoint(B, G), Line(D, G)) we get exists(angle(H, midpoint(B, G), projection(midpoint(B, G), Line(D, G))))
By directions_draw_angle on orthocenter(A, D, G), E, B we get exists(angle(orthocenter(A, D, G), E, B))
By line_inequality on Line(F, I), median(projection(A, i), B, G), I we get Line(F, I) != median(projection(A, i), B, G)
By line_inequality on altitude(G, midpoint(B, G), projection(A, Line(D, G))), Line(D, H), G we get Line(D, H) != altitude(G, midpoint(B, G), projection(A, Line(D, G)))
By directions_draw_angle on I, midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D))) we get exists(angle(I, midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D)))))
By directions_draw_angle on C, G, line_intersection(h, altitude(projection(A, i), A, D)) we get exists(angle(C, G, line_intersection(h, altitude(projection(A, i), A, D))))
By line_inequality on Line(G, H), Line(D, E), G we get Line(D, E) != Line(G, H)
By directions_draw_angle on I, F, midpoint(B, G) we get exists(angle(I, F, midpoint(B, G)))
By directions_draw_angle on projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), G we get exists(angle(projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), G))
By directions_draw_angle on projection(E, altitude(A, D, G)), E, center(c) we get exists(angle(projection(E, altitude(A, D, G)), E, center(c)))
By line_inequality on Line(F, I), f, I we get f != Line(F, I)
By directions_draw_angle on C, G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get exists(angle(C, G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))))
By directions_draw_angle on E, midpoint(B, G), projection(midpoint(B, G), Line(D, E)) we get exists(angle(E, midpoint(B, G), projection(midpoint(B, G), Line(D, E))))
By directions_draw_angle on orthocenter(A, B, D), midpoint(B, G), projection(midpoint(B, G), Line(D, E)) we get exists(angle(orthocenter(A, B, D), midpoint(B, G), projection(midpoint(B, G), Line(D, E))))
By directions_draw_angle on projection(E, h), B, E we get exists(angle(projection(E, h), B, E))
By directions_draw_angle on orthocenter(A, B, D), H, center(c) we get exists(angle(orthocenter(A, B, D), H, center(c)))
By directions_draw_angle on I, midpoint(B, G), E we get exists(angle(I, midpoint(B, G), E))
By not_in_line_equivalent_to_not_collinear_v0_r on H, F, I we get H not in Line(F, I)
By directions_draw_angle on H, I, orthocenter(A, B, D) we get exists(angle(H, I, orthocenter(A, B, D)))
By directions_draw_angle on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), G, projection(A, Line(D, G)) we get exists(angle(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), G, projection(A, Line(D, G))))
By directions_draw_angle on G, F, C we get exists(angle(G, F, C))
By directions_draw_angle on C, E, projection(E, Line(B, G)) we get exists(angle(C, E, projection(E, Line(B, G))))
By directions_draw_angle on projection(A, Line(D, G)), A, projection(A, median(E, B, G)) we get exists(angle(projection(A, Line(D, G)), A, projection(A, median(E, B, G))))
By directions_draw_angle on projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), G we get exists(angle(projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), G))
By directions_draw_angle on I, E, G we get exists(angle(I, E, G))
By directions_draw_angle on B, midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G)) we get exists(angle(B, midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G))))
By directions_draw_angle on projection(midpoint(B, G), Line(D, F)), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G))) we get exists(angle(projection(midpoint(B, G), Line(D, F)), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G)))))
By directions_draw_angle on projection(F, Line(H, orthocenter(A, B, D))), F, B we get exists(angle(projection(F, Line(H, orthocenter(A, B, D))), F, B))
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), A we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), A))
By directions_draw_angle on I, F, projection(F, i) we get exists(angle(I, F, projection(F, i)))
By directions_draw_angle on F, A, projection(A, median(F, B, G)) we get exists(angle(F, A, projection(A, median(F, B, G))))
By directions_draw_angle on F, midpoint(B, G), orthocenter(A, B, D) we get exists(angle(F, midpoint(B, G), orthocenter(A, B, D)))
By directions_draw_angle on H, E, B we get exists(angle(H, E, B))
By line_inequality on altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i)), Line(G, I), orthocenter(A, B, D) we get Line(G, I) != altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i))
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, i), A, D))), Line(D, H), G we get Line(D, H) != Line(G, line_intersection(h, altitude(projection(A, i), A, D)))
By directions_draw_angle on B, orthocenter(A, B, D), H we get exists(angle(B, orthocenter(A, B, D), H))
By directions_draw_angle on B, A, projection(A, median(E, B, G)) we get exists(angle(B, A, projection(A, median(E, B, G))))
By directions_draw_angle on G, midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G))) we get exists(angle(G, midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G)))))
By directions_draw_angle on H, C, orthocenter(A, D, G) we get exists(angle(H, C, orthocenter(A, D, G)))
By directions_draw_angle on midpoint(B, G), F, projection(F, i) we get exists(angle(midpoint(B, G), F, projection(F, i)))
By directions_draw_angle on A, midpoint(B, G), projection(midpoint(B, G), Line(D, F)) we get exists(angle(A, midpoint(B, G), projection(midpoint(B, G), Line(D, F))))
By line_inequality on altitude(B, midpoint(B, G), projection(A, i)), Line(G, I), B we get Line(G, I) != altitude(B, midpoint(B, G), projection(A, i))
By directions_draw_angle on C, orthocenter(A, D, G), projection(A, Line(D, G)) we get exists(angle(C, orthocenter(A, D, G), projection(A, Line(D, G))))
By directions_draw_angle on orthocenter(A, B, D), I, orthocenter(A, D, G) we get exists(angle(orthocenter(A, B, D), I, orthocenter(A, D, G)))
By directions_draw_angle on F, H, orthocenter(A, B, D) we get exists(angle(F, H, orthocenter(A, B, D)))
By directions_draw_angle on C, midpoint(B, G), projection(midpoint(B, G), Line(D, F)) we get exists(angle(C, midpoint(B, G), projection(midpoint(B, G), Line(D, F))))
By directions_draw_angle on E, midpoint(B, G), orthocenter(A, D, G) we get exists(angle(E, midpoint(B, G), orthocenter(A, D, G)))
By directions_draw_angle on I, G, line_intersection(h, altitude(projection(A, i), A, D)) we get exists(angle(I, G, line_intersection(h, altitude(projection(A, i), A, D))))
By directions_draw_angle on C, midpoint(B, G), orthocenter(A, B, D) we get exists(angle(C, midpoint(B, G), orthocenter(A, B, D)))
By directions_draw_angle on B, E, projection(E, altitude(A, D, G)) we get exists(angle(B, E, projection(E, altitude(A, D, G))))
By directions_draw_angle on projection(E, altitude(A, D, G)), E, I we get exists(angle(projection(E, altitude(A, D, G)), E, I))
By directions_draw_angle on orthocenter(A, B, D), F, projection(F, Line(B, G)) we get exists(angle(orthocenter(A, B, D), F, projection(F, Line(B, G))))
By directions_draw_angle on B, E, projection(E, Line(B, G)) we get exists(angle(B, E, projection(E, Line(B, G))))
By line_inequality on altitude(D, F, projection(A, i)), Line(E, H), D we get Line(E, H) != altitude(D, F, projection(A, i))
By directions_draw_angle on midpoint(B, G), F, projection(F, h) we get exists(angle(midpoint(B, G), F, projection(F, h)))
By line_inequality on Line(E, I), Line(C, D), I we get Line(C, D) != Line(E, I)
By directions_draw_angle on projection(F, altitude(A, B, D)), F, D we get exists(angle(projection(F, altitude(A, B, D)), F, D))
By not_in_line_equivalent_to_not_collinear_v0_r on C, G, H we get C not in Line(G, H)
By line_inequality on altitude(orthocenter(A, B, D), F, projection(A, i)), median(E, B, G), orthocenter(A, B, D) we get median(E, B, G) != altitude(orthocenter(A, B, D), F, projection(A, i))
By not_in_line_equivalent_to_not_collinear_v0_r on D, G, H we get D not in Line(G, H)
By directions_draw_angle on B, I, orthocenter(A, B, D) we get exists(angle(B, I, orthocenter(A, B, D)))
By directions_draw_angle on orthocenter(A, D, G), E, projection(E, Line(C, orthocenter(A, D, G))) we get exists(angle(orthocenter(A, D, G), E, projection(E, Line(C, orthocenter(A, D, G)))))
By directions_draw_angle on projection(F, Line(H, orthocenter(A, B, D))), F, midpoint(B, G) we get exists(angle(projection(F, Line(H, orthocenter(A, B, D))), F, midpoint(B, G)))
By line_inequality on altitude(D, F, projection(A, i)), Line(C, F), D we get Line(C, F) != altitude(D, F, projection(A, i))
By directions_draw_angle on projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), I we get exists(angle(projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), I))
By line_inequality on altitude(B, midpoint(B, G), projection(A, i)), median(projection(A, Line(D, G)), B, G), B we get median(projection(A, Line(D, G)), B, G) != altitude(B, midpoint(B, G), projection(A, i))
By line_inequality on Line(H, I), g, H we get g != Line(H, I)
By directions_draw_angle on projection(midpoint(B, G), Line(D, G)), midpoint(B, G), F we get exists(angle(projection(midpoint(B, G), Line(D, G)), midpoint(B, G), F))
By directions_draw_angle on center(c), C, midpoint(B, G) we get exists(angle(center(c), C, midpoint(B, G)))
By directions_draw_angle on D, midpoint(B, G), projection(midpoint(B, G), Line(D, E)) we get exists(angle(D, midpoint(B, G), projection(midpoint(B, G), Line(D, E))))
By directions_draw_angle on projection(E, h), B, line_intersection(h, altitude(projection(A, i), A, D)) we get exists(angle(projection(E, h), B, line_intersection(h, altitude(projection(A, i), A, D))))
By directions_draw_angle on projection(E, Line(C, D)), E, B we get exists(angle(projection(E, Line(C, D)), E, B))
By line_circle_intersection_has_at_most_two_points_0 on D, I, midpoint(B, G), Circle(C, D, I) we get midpoint(B, G) not in Circle(C, D, I)
By directions_draw_angle on projection(A, Line(D, G)), A, projection(A, median(F, B, G)) we get exists(angle(projection(A, Line(D, G)), A, projection(A, median(F, B, G))))
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, i), A, D))), Line(C, H), B we get Line(C, H) != Line(B, line_intersection(h, altitude(projection(A, i), A, D)))
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), C we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), C))
By not_in_line_equivalent_to_not_collinear_v0_r on D, I, F we get D not in Line(F, I)
By line_inequality on altitude(orthocenter(A, D, G), E, projection(A, Line(D, G))), Line(E, H), orthocenter(A, D, G) we get Line(E, H) != altitude(orthocenter(A, D, G), E, projection(A, Line(D, G)))
By directions_draw_angle on midpoint(B, G), C, I we get exists(angle(midpoint(B, G), C, I))
By line_inequality on altitude(orthocenter(A, B, D), F, projection(A, i)), Line(I, orthocenter(A, D, G)), orthocenter(A, B, D) we get Line(I, orthocenter(A, D, G)) != altitude(orthocenter(A, B, D), F, projection(A, i))
By directions_draw_angle on projection(F, h), F, projection(F, Line(H, orthocenter(A, B, D))) we get exists(angle(projection(F, h), F, projection(F, Line(H, orthocenter(A, B, D)))))
By directions_draw_angle on midpoint(B, G), C, H we get exists(angle(midpoint(B, G), C, H))
By directions_draw_angle on H, B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get exists(angle(H, B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))))
By directions_draw_angle on projection(midpoint(B, G), Line(D, E)), midpoint(B, G), I we get exists(angle(projection(midpoint(B, G), Line(D, E)), midpoint(B, G), I))
By directions_draw_angle on projection(midpoint(B, G), Line(B, I)), midpoint(B, G), projection(midpoint(B, G), Line(D, F)) we get exists(angle(projection(midpoint(B, G), Line(B, I)), midpoint(B, G), projection(midpoint(B, G), Line(D, F))))
By directions_draw_angle on C, I, orthocenter(A, D, G) we get exists(angle(C, I, orthocenter(A, D, G)))
By directions_draw_angle on midpoint(B, G), G, H we get exists(angle(midpoint(B, G), G, H))
By directions_draw_angle on midpoint(B, G), F, I we get exists(angle(midpoint(B, G), F, I))
By directions_draw_angle on line_intersection(h, altitude(projection(A, i), A, D)), B, orthocenter(A, B, D) we get exists(angle(line_intersection(h, altitude(projection(A, i), A, D)), B, orthocenter(A, B, D)))
By directions_draw_angle on projection(E, Line(C, D)), E, projection(E, altitude(A, D, G)) we get exists(angle(projection(E, Line(C, D)), E, projection(E, altitude(A, D, G))))
By directions_draw_angle on H, orthocenter(A, B, D), A we get exists(angle(H, orthocenter(A, B, D), A))
By line_inequality on altitude(orthocenter(A, D, G), E, projection(A, Line(D, G))), Line(C, D), orthocenter(A, D, G) we get Line(C, D) != altitude(orthocenter(A, D, G), E, projection(A, Line(D, G)))
By directions_draw_angle on C, midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D))) we get exists(angle(C, midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D)))))
By not_in_line_equivalent_to_not_collinear_v0_r on orthocenter(A, B, D), F, G we get orthocenter(A, B, D) not in Line(F, G)
By directions_draw_angle on orthocenter(A, B, D), midpoint(B, G), projection(midpoint(B, G), Line(D, F)) we get exists(angle(orthocenter(A, B, D), midpoint(B, G), projection(midpoint(B, G), Line(D, F))))
By line_inequality on Line(F, I), Line(C, F), I we get Line(C, F) != Line(F, I)
By directions_draw_angle on projection(midpoint(B, G), Line(D, E)), midpoint(B, G), projection(midpoint(B, G), Line(G, I)) we get exists(angle(projection(midpoint(B, G), Line(D, E)), midpoint(B, G), projection(midpoint(B, G), Line(G, I))))
By directions_draw_angle on projection(A, median(F, B, G)), A, projection(A, i) we get exists(angle(projection(A, median(F, B, G)), A, projection(A, i)))
By directions_draw_angle on B, E, F we get exists(angle(B, E, F))
By directions_draw_angle on line_intersection(h, altitude(projection(A, i), A, D)), B, D we get exists(angle(line_intersection(h, altitude(projection(A, i), A, D)), B, D))
By directions_draw_angle on projection(midpoint(B, G), Line(D, E)), midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G)) we get exists(angle(projection(midpoint(B, G), Line(D, E)), midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G))))
By directions_draw_angle on midpoint(B, G), A, projection(A, median(F, B, G)) we get exists(angle(midpoint(B, G), A, projection(A, median(F, B, G))))
By directions_draw_angle on projection(F, Line(B, G)), F, projection(F, Line(D, H)) we get exists(angle(projection(F, Line(B, G)), F, projection(F, Line(D, H))))
By directions_draw_angle on B, A, projection(A, median(F, B, G)) we get exists(angle(B, A, projection(A, median(F, B, G))))
By line_inequality on altitude(B, midpoint(B, G), projection(A, i)), Line(F, projection(A, i)), B we get Line(F, projection(A, i)) != altitude(B, midpoint(B, G), projection(A, i))
By directions_draw_angle on projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), projection(midpoint(B, G), Line(D, F)) we get exists(angle(projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), projection(midpoint(B, G), Line(D, F))))
By directions_draw_angle on projection(F, Line(H, orthocenter(A, B, D))), F, E we get exists(angle(projection(F, Line(H, orthocenter(A, B, D))), F, E))
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), Line(B, I), G we get Line(B, I) != Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By line_inequality on altitude(D, F, projection(A, i)), median(F, B, G), D we get median(F, B, G) != altitude(D, F, projection(A, i))
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), altitude(A, B, D), B we get altitude(A, B, D) != Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By directions_draw_angle on C, F, projection(F, Line(H, orthocenter(A, B, D))) we get exists(angle(C, F, projection(F, Line(H, orthocenter(A, B, D)))))
By line_inequality on altitude(D, E, projection(A, Line(D, G))), Line(B, G), D we get Line(B, G) != altitude(D, E, projection(A, Line(D, G)))
By directions_draw_angle on projection(F, Line(B, G)), F, A we get exists(angle(projection(F, Line(B, G)), F, A))
By line_inequality on Line(F, I), Line(B, C), I we get Line(B, C) != Line(F, I)
By line_inequality on Line(F, G), Line(D, H), G we get Line(D, H) != Line(F, G)
By directions_draw_angle on projection(E, Line(D, G)), E, B we get exists(angle(projection(E, Line(D, G)), E, B))
By directions_draw_angle on E, I, C we get exists(angle(E, I, C))
By directions_draw_angle on projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G))) we get exists(angle(projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G)))))
By directions_draw_angle on midpoint(B, G), F, projection(F, Line(D, H)) we get exists(angle(midpoint(B, G), F, projection(F, Line(D, H))))
By directions_draw_angle on projection(E, Line(B, G)), E, B we get exists(angle(projection(E, Line(B, G)), E, B))
By directions_draw_angle on projection(E, Line(C, orthocenter(A, D, G))), E, F we get exists(angle(projection(E, Line(C, orthocenter(A, D, G))), E, F))
By directions_draw_angle on projection(A, median(F, B, G)), A, orthocenter(A, B, D) we get exists(angle(projection(A, median(F, B, G)), A, orthocenter(A, B, D)))
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, i), A, D))), g, B we get g != Line(B, line_intersection(h, altitude(projection(A, i), A, D)))
By directions_draw_angle on F, I, midpoint(B, G) we get exists(angle(F, I, midpoint(B, G)))
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), A we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), A))
By not_in_line_equivalent_to_not_collinear_v0_r on orthocenter(A, D, G), G, F we get orthocenter(A, D, G) not in Line(F, G)
By directions_draw_angle on projection(F, Line(B, G)), F, center(c) we get exists(angle(projection(F, Line(B, G)), F, center(c)))
By directions_draw_angle on projection(midpoint(B, G), i), midpoint(B, G), projection(midpoint(B, G), Line(D, F)) we get exists(angle(projection(midpoint(B, G), i), midpoint(B, G), projection(midpoint(B, G), Line(D, F))))
By line_inequality on Line(H, midpoint(B, G)), altitude(A, B, D), H we get altitude(A, B, D) != Line(H, midpoint(B, G))
By directions_draw_angle on G, E, projection(E, Line(C, orthocenter(A, D, G))) we get exists(angle(G, E, projection(E, Line(C, orthocenter(A, D, G)))))
By directions_draw_angle on I, H, B we get exists(angle(I, H, B))
By directions_draw_angle on B, E, orthocenter(A, D, G) we get exists(angle(B, E, orthocenter(A, D, G)))
By not_in_line_equivalent_to_not_collinear_v0_r on H, F, G we get H not in Line(F, G)
By directions_draw_angle on G, midpoint(B, G), C we get exists(angle(G, midpoint(B, G), C))
By directions_draw_angle on midpoint(B, G), F, E we get exists(angle(midpoint(B, G), F, E))
By line_inequality on Line(E, I), Line(E, F), I we get Line(E, F) != Line(E, I)
By directions_draw_angle on H, orthocenter(A, B, D), projection(A, i) we get exists(angle(H, orthocenter(A, B, D), projection(A, i)))
By directions_draw_angle on H, midpoint(B, G), orthocenter(A, D, G) we get exists(angle(H, midpoint(B, G), orthocenter(A, D, G)))
By directions_draw_angle on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), B, I we get exists(angle(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), B, I))
By line_inequality on Line(C, midpoint(B, G)), Line(C, D), midpoint(B, G) we get Line(C, D) != Line(C, midpoint(B, G))
By directions_draw_angle on orthocenter(A, D, G), B, line_intersection(h, altitude(projection(A, i), A, D)) we get exists(angle(orthocenter(A, D, G), B, line_intersection(h, altitude(projection(A, i), A, D))))
By directions_draw_angle on orthocenter(A, B, D), midpoint(B, G), E we get exists(angle(orthocenter(A, B, D), midpoint(B, G), E))
By directions_draw_angle on F, midpoint(B, G), projection(midpoint(B, G), Line(D, G)) we get exists(angle(F, midpoint(B, G), projection(midpoint(B, G), Line(D, G))))
By directions_draw_angle on projection(E, Line(C, orthocenter(A, D, G))), E, D we get exists(angle(projection(E, Line(C, orthocenter(A, D, G))), E, D))
By directions_draw_angle on orthocenter(A, B, D), G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get exists(angle(orthocenter(A, B, D), G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))))
By directions_draw_angle on projection(E, altitude(A, D, G)), E, projection(E, Line(C, orthocenter(A, D, G))) we get exists(angle(projection(E, altitude(A, D, G)), E, projection(E, Line(C, orthocenter(A, D, G)))))
By directions_draw_angle on E, midpoint(B, G), projection(midpoint(B, G), Line(D, F)) we get exists(angle(E, midpoint(B, G), projection(midpoint(B, G), Line(D, F))))
By directions_draw_angle on line_intersection(h, altitude(projection(A, i), A, D)), B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get exists(angle(line_intersection(h, altitude(projection(A, i), A, D)), B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))))
By directions_draw_angle on orthocenter(A, D, G), C, midpoint(B, G) we get exists(angle(orthocenter(A, D, G), C, midpoint(B, G)))
By directions_draw_angle on I, E, projection(E, Line(C, D)) we get exists(angle(I, E, projection(E, Line(C, D))))
By directions_draw_angle on I, orthocenter(A, D, G), G we get exists(angle(I, orthocenter(A, D, G), G))
By directions_draw_angle on projection(E, Line(C, D)), E, midpoint(B, G) we get exists(angle(projection(E, Line(C, D)), E, midpoint(B, G)))
By not_in_line_equivalent_to_not_collinear_v0_r on H, E, B we get H not in Line(B, E)
By directions_draw_angle on projection(midpoint(B, G), Line(D, E)), midpoint(B, G), projection(midpoint(B, G), i) we get exists(angle(projection(midpoint(B, G), Line(D, E)), midpoint(B, G), projection(midpoint(B, G), i)))
By line_inequality on Line(H, I), Line(E, F), I we get Line(E, F) != Line(H, I)
By directions_draw_angle on C, H, I we get exists(angle(C, H, I))
By directions_draw_angle on C, I, orthocenter(A, B, D) we get exists(angle(C, I, orthocenter(A, B, D)))
By directions_draw_angle on I, B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get exists(angle(I, B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))))
By directions_draw_angle on orthocenter(A, B, D), H, G we get exists(angle(orthocenter(A, B, D), H, G))
By directions_draw_angle on projection(A, Line(D, G)), G, H we get exists(angle(projection(A, Line(D, G)), G, H))
By directions_draw_angle on H, F, G we get exists(angle(H, F, G))
By directions_draw_angle on projection(midpoint(B, G), Line(G, I)), midpoint(B, G), projection(midpoint(B, G), Line(D, E)) we get exists(angle(projection(midpoint(B, G), Line(G, I)), midpoint(B, G), projection(midpoint(B, G), Line(D, E))))
By directions_draw_angle on projection(E, h), E, projection(E, Line(C, orthocenter(A, D, G))) we get exists(angle(projection(E, h), E, projection(E, Line(C, orthocenter(A, D, G)))))
By directions_draw_angle on I, A, projection(A, median(F, B, G)) we get exists(angle(I, A, projection(A, median(F, B, G))))
By directions_draw_angle on projection(E, Line(B, G)), E, midpoint(B, G) we get exists(angle(projection(E, Line(B, G)), E, midpoint(B, G)))
By line_inequality on Line(C, midpoint(B, G)), altitude(A, D, G), C we get altitude(A, D, G) != Line(C, midpoint(B, G))
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, i), A, D))), Line(C, F), B we get Line(C, F) != Line(B, line_intersection(h, altitude(projection(A, i), A, D)))
By directions_draw_angle on midpoint(B, G), H, I we get exists(angle(midpoint(B, G), H, I))
By directions_draw_angle on midpoint(B, G), orthocenter(A, B, D), I we get exists(angle(midpoint(B, G), orthocenter(A, B, D), I))
By directions_draw_angle on B, I, orthocenter(A, D, G) we get exists(angle(B, I, orthocenter(A, D, G)))
By directions_draw_angle on orthocenter(A, B, D), F, projection(F, altitude(A, B, D)) we get exists(angle(orthocenter(A, B, D), F, projection(F, altitude(A, B, D))))
By directions_draw_angle on F, E, projection(E, Line(C, orthocenter(A, D, G))) we get exists(angle(F, E, projection(E, Line(C, orthocenter(A, D, G)))))
By directions_draw_angle on projection(midpoint(B, G), Line(D, E)), midpoint(B, G), F we get exists(angle(projection(midpoint(B, G), Line(D, E)), midpoint(B, G), F))
By directions_draw_angle on E, B, projection(F, h) we get exists(angle(E, B, projection(F, h)))
By line_inequality on Line(B, E), Line(D, H), B we get Line(B, E) != Line(D, H)
By directions_draw_angle on B, F, midpoint(B, G) we get exists(angle(B, F, midpoint(B, G)))
By line_inequality on Line(G, H), Line(H, orthocenter(A, B, D)), G we get Line(G, H) != Line(H, orthocenter(A, B, D))
By line_inequality on altitude(orthocenter(A, D, G), E, projection(A, Line(D, G))), Line(D, H), orthocenter(A, D, G) we get Line(D, H) != altitude(orthocenter(A, D, G), E, projection(A, Line(D, G)))
By line_inequality on Line(E, I), i, I we get i != Line(E, I)
By directions_draw_angle on midpoint(B, G), orthocenter(A, B, D), H we get exists(angle(midpoint(B, G), orthocenter(A, B, D), H))
By directions_draw_angle on H, I, orthocenter(A, D, G) we get exists(angle(H, I, orthocenter(A, D, G)))
By directions_draw_angle on midpoint(B, G), G, F we get exists(angle(midpoint(B, G), G, F))
By directions_draw_angle on midpoint(B, G), E, I we get exists(angle(midpoint(B, G), E, I))
By directions_draw_angle on D, I, orthocenter(A, D, G) we get exists(angle(D, I, orthocenter(A, D, G)))
By directions_draw_angle on orthocenter(A, D, G), midpoint(B, G), projection(midpoint(B, G), Line(D, F)) we get exists(angle(orthocenter(A, D, G), midpoint(B, G), projection(midpoint(B, G), Line(D, F))))
By directions_draw_angle on orthocenter(A, B, D), G, H we get exists(angle(orthocenter(A, B, D), G, H))
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), projection(midpoint(B, G), Line(D, G)) we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), projection(midpoint(B, G), Line(D, G))))
By directions_draw_angle on projection(F, h), F, midpoint(B, G) we get exists(angle(projection(F, h), F, midpoint(B, G)))
By directions_draw_angle on projection(F, h), G, H we get exists(angle(projection(F, h), G, H))
By directions_draw_angle on projection(midpoint(B, G), Line(D, E)), midpoint(B, G), C we get exists(angle(projection(midpoint(B, G), Line(D, E)), midpoint(B, G), C))
By not_in_line_equivalent_to_not_collinear_v0_r on F, H, midpoint(B, G) we get F not in Line(H, midpoint(B, G))
By directions_draw_angle on projection(A, Line(D, G)), orthocenter(A, D, G), I we get exists(angle(projection(A, Line(D, G)), orthocenter(A, D, G), I))
By line_inequality on altitude(D, E, projection(A, Line(D, G))), f, D we get f != altitude(D, E, projection(A, Line(D, G)))
By directions_draw_angle on F, midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G)) we get exists(angle(F, midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G))))
By directions_draw_angle on midpoint(B, G), E, C we get exists(angle(midpoint(B, G), E, C))
By directions_draw_angle on projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), H we get exists(angle(projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), H))
By directions_draw_angle on orthocenter(A, D, G), G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get exists(angle(orthocenter(A, D, G), G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))))
By directions_draw_angle on H, midpoint(B, G), E we get exists(angle(H, midpoint(B, G), E))
By directions_draw_angle on B, E, projection(E, Line(C, orthocenter(A, D, G))) we get exists(angle(B, E, projection(E, Line(C, orthocenter(A, D, G)))))
By line_inequality on altitude(D, F, projection(A, i)), Line(H, orthocenter(A, B, D)), D we get Line(H, orthocenter(A, B, D)) != altitude(D, F, projection(A, i))
By directions_draw_angle on H, midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D)) we get exists(angle(H, midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D))))
By directions_draw_angle on projection(F, Line(B, G)), F, projection(F, i) we get exists(angle(projection(F, Line(B, G)), F, projection(F, i)))
By directions_draw_angle on B, G, F we get exists(angle(B, G, F))
By directions_draw_angle on D, E, projection(E, Line(C, orthocenter(A, D, G))) we get exists(angle(D, E, projection(E, Line(C, orthocenter(A, D, G)))))
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), Line(H, orthocenter(A, B, D)), B we get Line(H, orthocenter(A, B, D)) != Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By directions_draw_angle on projection(midpoint(B, G), Line(B, I)), midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G)) we get exists(angle(projection(midpoint(B, G), Line(B, I)), midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G))))
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), median(projection(A, Line(D, G)), B, G), B we get median(projection(A, Line(D, G)), B, G) != Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By directions_draw_angle on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), B, D we get exists(angle(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), B, D))
By directions_draw_angle on center(c), E, projection(E, Line(C, orthocenter(A, D, G))) we get exists(angle(center(c), E, projection(E, Line(C, orthocenter(A, D, G)))))
By directions_draw_angle on E, midpoint(B, G), projection(midpoint(B, G), i) we get exists(angle(E, midpoint(B, G), projection(midpoint(B, G), i)))
By directions_draw_angle on I, E, F we get exists(angle(I, E, F))
By line_inequality on Line(B, projection(E, h)), median(projection(A, i), B, G), B we get Line(B, projection(E, h)) != median(projection(A, i), B, G)
By directions_draw_angle on projection(E, Line(D, G)), E, projection(E, Line(B, G)) we get exists(angle(projection(E, Line(D, G)), E, projection(E, Line(B, G))))
By line_inequality on altitude(A, F, midpoint(B, G)), median(projection(A, Line(D, G)), B, G), A we get altitude(A, F, midpoint(B, G)) != median(projection(A, Line(D, G)), B, G)
By directions_draw_angle on projection(F, altitude(A, B, D)), F, A we get exists(angle(projection(F, altitude(A, B, D)), F, A))
By line_inequality on Line(B, E), h, B we get h != Line(B, E)
By directions_draw_angle on E, B, projection(A, i) we get exists(angle(E, B, projection(A, i)))
By directions_draw_angle on center(c), E, I we get exists(angle(center(c), E, I))
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, i), A, D))), Line(E, F), B we get Line(E, F) != Line(B, line_intersection(h, altitude(projection(A, i), A, D)))
By directions_draw_angle on B, C, midpoint(B, G) we get exists(angle(B, C, midpoint(B, G)))
By directions_draw_angle on projection(E, Line(B, G)), E, projection(E, altitude(A, D, G)) we get exists(angle(projection(E, Line(B, G)), E, projection(E, altitude(A, D, G))))
By directions_draw_angle on B, I, H we get exists(angle(B, I, H))
By directions_draw_angle on I, orthocenter(A, B, D), F we get exists(angle(I, orthocenter(A, B, D), F))
By directions_draw_angle on C, midpoint(B, G), projection(midpoint(B, G), Line(D, E)) we get exists(angle(C, midpoint(B, G), projection(midpoint(B, G), Line(D, E))))
By directions_draw_angle on projection(E, altitude(A, D, G)), E, projection(E, Line(B, G)) we get exists(angle(projection(E, altitude(A, D, G)), E, projection(E, Line(B, G))))
By directions_draw_angle on center(c), F, G we get exists(angle(center(c), F, G))
By line_inequality on altitude(D, E, projection(A, Line(D, G))), median(E, B, G), D we get median(E, B, G) != altitude(D, E, projection(A, Line(D, G)))
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), projection(midpoint(B, G), f) we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), projection(midpoint(B, G), f)))
By directions_draw_angle on G, H, E we get exists(angle(G, H, E))
By directions_draw_angle on G, F, projection(F, i) we get exists(angle(G, F, projection(F, i)))
By directions_draw_angle on E, midpoint(B, G), F we get exists(angle(E, midpoint(B, G), F))
By directions_draw_angle on I, midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D)) we get exists(angle(I, midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D))))
By directions_draw_angle on projection(midpoint(B, G), Line(D, E)), midpoint(B, G), orthocenter(A, D, G) we get exists(angle(projection(midpoint(B, G), Line(D, E)), midpoint(B, G), orthocenter(A, D, G)))
By directions_draw_angle on I, E, center(c) we get exists(angle(I, E, center(c)))
By directions_draw_angle on projection(E, Line(C, D)), E, projection(E, Line(B, G)) we get exists(angle(projection(E, Line(C, D)), E, projection(E, Line(B, G))))
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, i), A, D))), Line(D, G), B we get Line(D, G) != Line(B, line_intersection(h, altitude(projection(A, i), A, D)))
By line_inequality on altitude(A, midpoint(B, G), projection(A, i)), Line(E, projection(A, Line(D, G))), A we get Line(E, projection(A, Line(D, G))) != altitude(A, midpoint(B, G), projection(A, i))
By directions_draw_angle on midpoint(B, G), F, H we get exists(angle(midpoint(B, G), F, H))
By directions_draw_angle on projection(E, altitude(A, D, G)), E, C we get exists(angle(projection(E, altitude(A, D, G)), E, C))
By directions_draw_angle on midpoint(B, G), H, F we get exists(angle(midpoint(B, G), H, F))
By directions_draw_angle on H, G, orthocenter(A, B, D) we get exists(angle(H, G, orthocenter(A, B, D)))
By directions_draw_angle on line_intersection(h, altitude(projection(A, i), A, D)), G, projection(E, h) we get exists(angle(line_intersection(h, altitude(projection(A, i), A, D)), G, projection(E, h)))
By line_inequality on altitude(D, E, projection(A, Line(D, G))), Line(B, I), D we get Line(B, I) != altitude(D, E, projection(A, Line(D, G)))
By directions_draw_angle on F, midpoint(B, G), projection(midpoint(B, G), Line(D, E)) we get exists(angle(F, midpoint(B, G), projection(midpoint(B, G), Line(D, E))))
By directions_draw_angle on F, I, orthocenter(A, D, G) we get exists(angle(F, I, orthocenter(A, D, G)))
By directions_draw_angle on projection(E, h), E, projection(E, altitude(A, D, G)) we get exists(angle(projection(E, h), E, projection(E, altitude(A, D, G))))
By line_inequality on Line(G, H), h, H we get h != Line(G, H)
By directions_draw_angle on G, H, orthocenter(A, B, D) we get exists(angle(G, H, orthocenter(A, B, D)))
By directions_draw_angle on projection(E, Line(C, orthocenter(A, D, G))), E, H we get exists(angle(projection(E, Line(C, orthocenter(A, D, G))), E, H))
By directions_draw_angle on projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), A we get exists(angle(projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), A))
By directions_draw_angle on center(c), H, orthocenter(A, B, D) we get exists(angle(center(c), H, orthocenter(A, B, D)))
By not_in_line_equivalent_to_not_collinear_v0_r on E, F, I we get E not in Line(F, I)
By directions_draw_angle on C, F, G we get exists(angle(C, F, G))
By directions_draw_angle on projection(midpoint(B, G), g), midpoint(B, G), C we get exists(angle(projection(midpoint(B, G), g), midpoint(B, G), C))
By directions_draw_angle on H, I, midpoint(B, G) we get exists(angle(H, I, midpoint(B, G)))
By not_in_line_equivalent_to_not_collinear_v0_r on E, H, I we get E not in Line(H, I)
By directions_draw_angle on center(c), H, G we get exists(angle(center(c), H, G))
By directions_draw_angle on F, E, midpoint(B, G) we get exists(angle(F, E, midpoint(B, G)))
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, i), A, D))), Line(C, I), G we get Line(C, I) != Line(G, line_intersection(h, altitude(projection(A, i), A, D)))
By line_inequality on Line(F, G), Line(D, E), G we get Line(D, E) != Line(F, G)
By line_inequality on Line(B, E), Line(D, G), B we get Line(B, E) != Line(D, G)
By directions_draw_angle on E, midpoint(B, G), projection(midpoint(B, G), Line(B, I)) we get exists(angle(E, midpoint(B, G), projection(midpoint(B, G), Line(B, I))))
By directions_draw_angle on C, orthocenter(A, D, G), B we get exists(angle(C, orthocenter(A, D, G), B))
By directions_draw_angle on F, H, I we get exists(angle(F, H, I))
By not_in_line_equivalent_to_not_collinear_v0_r on A, midpoint(B, G), C we get A not in Line(C, midpoint(B, G))
By directions_draw_angle on C, H, orthocenter(A, B, D) we get exists(angle(C, H, orthocenter(A, B, D)))
By directions_draw_angle on orthocenter(A, B, D), midpoint(B, G), H we get exists(angle(orthocenter(A, B, D), midpoint(B, G), H))
By directions_draw_angle on line_intersection(h, altitude(projection(A, i), A, D)), G, I we get exists(angle(line_intersection(h, altitude(projection(A, i), A, D)), G, I))
By directions_draw_angle on projection(midpoint(B, G), Line(D, E)), midpoint(B, G), projection(midpoint(B, G), Line(D, G)) we get exists(angle(projection(midpoint(B, G), Line(D, E)), midpoint(B, G), projection(midpoint(B, G), Line(D, G))))
By directions_draw_angle on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), B, projection(F, h) we get exists(angle(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), B, projection(F, h)))
By directions_draw_angle on projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D)) we get exists(angle(projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D))))
By directions_draw_angle on G, F, midpoint(B, G) we get exists(angle(G, F, midpoint(B, G)))
By directions_draw_angle on F, midpoint(B, G), projection(midpoint(B, G), Line(D, F)) we get exists(angle(F, midpoint(B, G), projection(midpoint(B, G), Line(D, F))))
By directions_draw_angle on H, orthocenter(A, B, D), D we get exists(angle(H, orthocenter(A, B, D), D))
By directions_draw_angle on A, B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get exists(angle(A, B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))))
By directions_draw_angle on projection(midpoint(B, G), g), midpoint(B, G), F we get exists(angle(projection(midpoint(B, G), g), midpoint(B, G), F))
By directions_draw_angle on orthocenter(A, D, G), E, midpoint(B, G) we get exists(angle(orthocenter(A, D, G), E, midpoint(B, G)))
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), projection(midpoint(B, G), Line(B, I)) we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), projection(midpoint(B, G), Line(B, I))))
By line_inequality on altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i)), Line(D, H), orthocenter(A, B, D) we get Line(D, H) != altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i))
By directions_draw_angle on midpoint(B, G), H, G we get exists(angle(midpoint(B, G), H, G))
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), projection(midpoint(B, G), g) we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), projection(midpoint(B, G), g)))
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), Line(C, F), B we get Line(C, F) != Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By directions_draw_angle on orthocenter(A, B, D), B, line_intersection(h, altitude(projection(A, i), A, D)) we get exists(angle(orthocenter(A, B, D), B, line_intersection(h, altitude(projection(A, i), A, D))))
By line_inequality on Line(F, G), Line(E, projection(A, Line(D, G))), G we get Line(F, G) != Line(E, projection(A, Line(D, G)))
By directions_draw_angle on projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), projection(midpoint(B, G), Line(G, I)) we get exists(angle(projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), projection(midpoint(B, G), Line(G, I))))
By directions_draw_angle on H, E, I we get exists(angle(H, E, I))
By directions_draw_angle on projection(E, Line(C, orthocenter(A, D, G))), E, projection(E, Line(B, G)) we get exists(angle(projection(E, Line(C, orthocenter(A, D, G))), E, projection(E, Line(B, G))))
By directions_draw_angle on projection(A, i), B, line_intersection(h, altitude(projection(A, i), A, D)) we get exists(angle(projection(A, i), B, line_intersection(h, altitude(projection(A, i), A, D))))
By line_inequality on altitude(orthocenter(A, B, D), F, projection(A, i)), Line(F, projection(A, i)), orthocenter(A, B, D) we get Line(F, projection(A, i)) != altitude(orthocenter(A, B, D), F, projection(A, i))
By directions_draw_angle on projection(F, altitude(A, B, D)), F, orthocenter(A, B, D) we get exists(angle(projection(F, altitude(A, B, D)), F, orthocenter(A, B, D)))
By directions_draw_angle on C, midpoint(B, G), projection(midpoint(B, G), g) we get exists(angle(C, midpoint(B, G), projection(midpoint(B, G), g)))
By line_inequality on Line(G, H), Line(D, G), H we get Line(D, G) != Line(G, H)
By line_inequality on altitude(A, midpoint(B, G), projection(A, Line(D, G))), median(projection(A, i), B, G), A we get median(projection(A, i), B, G) != altitude(A, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(B, midpoint(B, G), projection(A, i)), Line(D, H), B we get Line(D, H) != altitude(B, midpoint(B, G), projection(A, i))
By line_inequality on altitude(D, midpoint(B, G), projection(A, Line(D, G))), median(projection(A, Line(D, G)), B, G), D we get median(projection(A, Line(D, G)), B, G) != altitude(D, midpoint(B, G), projection(A, Line(D, G)))
By directions_draw_angle on B, F, projection(F, altitude(A, B, D)) we get exists(angle(B, F, projection(F, altitude(A, B, D))))
By line_inequality on Line(B, E), Line(D, F), B we get Line(B, E) != Line(D, F)
By directions_draw_angle on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), B, H we get exists(angle(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), B, H))
By line_inequality on Line(H, midpoint(B, G)), h, H we get h != Line(H, midpoint(B, G))
By line_inequality on Line(G, H), altitude(A, B, D), G we get Line(G, H) != altitude(A, B, D)
By directions_draw_angle on projection(F, Line(B, G)), F, projection(F, altitude(A, B, D)) we get exists(angle(projection(F, Line(B, G)), F, projection(F, altitude(A, B, D))))
By directions_draw_angle on projection(midpoint(B, G), f), midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G)) we get exists(angle(projection(midpoint(B, G), f), midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G))))
By directions_draw_angle on A, C, orthocenter(A, D, G) we get exists(angle(A, C, orthocenter(A, D, G)))
By directions_draw_angle on H, G, B we get exists(angle(H, G, B))
By directions_draw_angle on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), G, D we get exists(angle(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), G, D))
By line_inequality on Line(B, projection(F, h)), Line(F, projection(A, i)), B we get Line(B, projection(F, h)) != Line(F, projection(A, i))
By directions_draw_angle on orthocenter(A, D, G), C, F we get exists(angle(orthocenter(A, D, G), C, F))
By line_inequality on altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G))), h, orthocenter(A, D, G) we get h != altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G)))
By directions_draw_angle on F, E, projection(E, altitude(A, D, G)) we get exists(angle(F, E, projection(E, altitude(A, D, G))))
By directions_draw_angle on C, orthocenter(A, D, G), I we get exists(angle(C, orthocenter(A, D, G), I))
By directions_draw_angle on F, B, line_intersection(h, altitude(projection(A, i), A, D)) we get exists(angle(F, B, line_intersection(h, altitude(projection(A, i), A, D))))
By directions_draw_angle on A, orthocenter(A, D, G), C we get exists(angle(A, orthocenter(A, D, G), C))
By directions_draw_angle on G, C, orthocenter(A, D, G) we get exists(angle(G, C, orthocenter(A, D, G)))
By directions_draw_angle on C, midpoint(B, G), projection(midpoint(B, G), i) we get exists(angle(C, midpoint(B, G), projection(midpoint(B, G), i)))
By line_inequality on Line(B, E), Line(C, F), E we get Line(B, E) != Line(C, F)
By line_inequality on altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i)), median(E, B, G), orthocenter(A, B, D) we get median(E, B, G) != altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i))
By line_inequality on altitude(G, E, projection(A, Line(D, G))), median(projection(A, i), B, G), G we get median(projection(A, i), B, G) != altitude(G, E, projection(A, Line(D, G)))
By directions_draw_angle on line_intersection(h, altitude(projection(A, i), A, D)), B, E we get exists(angle(line_intersection(h, altitude(projection(A, i), A, D)), B, E))
By directions_draw_angle on F, midpoint(B, G), E we get exists(angle(F, midpoint(B, G), E))
By directions_draw_angle on orthocenter(A, B, D), midpoint(B, G), F we get exists(angle(orthocenter(A, B, D), midpoint(B, G), F))
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), i, G we get i != Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By directions_draw_angle on E, G, H we get exists(angle(E, G, H))
By directions_draw_angle on orthocenter(A, B, D), H, A we get exists(angle(orthocenter(A, B, D), H, A))
By directions_draw_angle on C, midpoint(B, G), orthocenter(A, D, G) we get exists(angle(C, midpoint(B, G), orthocenter(A, D, G)))
By line_inequality on Line(F, I), Line(B, G), F we get Line(B, G) != Line(F, I)
By line_inequality on altitude(D, F, projection(A, i)), Line(I, orthocenter(A, B, D)), D we get Line(I, orthocenter(A, B, D)) != altitude(D, F, projection(A, i))
By line_inequality on Line(H, midpoint(B, G)), median(F, B, G), H we get median(F, B, G) != Line(H, midpoint(B, G))
By not_in_line_equivalent_to_not_collinear_v0_r on E, F, G we get E not in Line(F, G)
By directions_draw_angle on midpoint(B, G), orthocenter(A, D, G), I we get exists(angle(midpoint(B, G), orthocenter(A, D, G), I))
By directions_draw_angle on projection(E, altitude(A, D, G)), E, orthocenter(A, D, G) we get exists(angle(projection(E, altitude(A, D, G)), E, orthocenter(A, D, G)))
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), F we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), F))
By directions_draw_angle on projection(midpoint(B, G), Line(D, F)), midpoint(B, G), projection(midpoint(B, G), Line(D, E)) we get exists(angle(projection(midpoint(B, G), Line(D, F)), midpoint(B, G), projection(midpoint(B, G), Line(D, E))))
By directions_draw_angle on I, orthocenter(A, D, G), orthocenter(A, B, D) we get exists(angle(I, orthocenter(A, D, G), orthocenter(A, B, D)))
By directions_draw_angle on projection(A, Line(D, G)), orthocenter(A, D, G), C we get exists(angle(projection(A, Line(D, G)), orthocenter(A, D, G), C))
By directions_draw_angle on projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), C we get exists(angle(projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), C))
By line_inequality on altitude(B, midpoint(B, G), projection(A, i)), Line(I, orthocenter(A, D, G)), B we get Line(I, orthocenter(A, D, G)) != altitude(B, midpoint(B, G), projection(A, i))
By directions_draw_angle on projection(midpoint(B, G), Line(B, I)), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D))) we get exists(angle(projection(midpoint(B, G), Line(B, I)), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D)))))
By directions_draw_angle on projection(A, median(E, B, G)), A, orthocenter(A, D, G) we get exists(angle(projection(A, median(E, B, G)), A, orthocenter(A, D, G)))
By directions_draw_angle on B, F, G we get exists(angle(B, F, G))
By line_inequality on altitude(D, E, projection(A, Line(D, G))), Line(B, C), D we get Line(B, C) != altitude(D, E, projection(A, Line(D, G)))
By directions_draw_angle on C, E, projection(E, altitude(A, D, G)) we get exists(angle(C, E, projection(E, altitude(A, D, G))))
By line_inequality on Line(F, G), Line(B, G), F we get Line(B, G) != Line(F, G)
By directions_draw_angle on line_intersection(h, altitude(projection(A, i), A, D)), B, projection(A, i) we get exists(angle(line_intersection(h, altitude(projection(A, i), A, D)), B, projection(A, i)))
By directions_draw_angle on H, midpoint(B, G), orthocenter(A, B, D) we get exists(angle(H, midpoint(B, G), orthocenter(A, B, D)))
By directions_draw_angle on projection(A, median(F, B, G)), A, F we get exists(angle(projection(A, median(F, B, G)), A, F))
By not_in_line_equivalent_to_not_collinear_v0_r on B, I, H we get B not in Line(H, I)
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, i), A, D))), median(E, B, G), B we get median(E, B, G) != Line(B, line_intersection(h, altitude(projection(A, i), A, D)))
By directions_draw_angle on projection(A, median(E, B, G)), A, F we get exists(angle(projection(A, median(E, B, G)), A, F))
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), g, B we get g != Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By directions_draw_angle on I, G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get exists(angle(I, G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))))
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), Line(C, D), B we get Line(C, D) != Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By directions_draw_angle on projection(midpoint(B, G), Line(D, F)), midpoint(B, G), I we get exists(angle(projection(midpoint(B, G), Line(D, F)), midpoint(B, G), I))
By directions_draw_angle on I, F, C we get exists(angle(I, F, C))
By directions_draw_angle on A, orthocenter(A, B, D), H we get exists(angle(A, orthocenter(A, B, D), H))
By directions_draw_angle on I, F, orthocenter(A, B, D) we get exists(angle(I, F, orthocenter(A, B, D)))
By directions_draw_angle on A, H, orthocenter(A, B, D) we get exists(angle(A, H, orthocenter(A, B, D)))
By line_inequality on Line(F, G), g, F we get g != Line(F, G)
By directions_draw_angle on projection(F, Line(H, orthocenter(A, B, D))), F, orthocenter(A, B, D) we get exists(angle(projection(F, Line(H, orthocenter(A, B, D))), F, orthocenter(A, B, D)))
By directions_draw_angle on F, midpoint(B, G), C we get exists(angle(F, midpoint(B, G), C))
By directions_draw_angle on I, F, projection(F, altitude(A, B, D)) we get exists(angle(I, F, projection(F, altitude(A, B, D))))
By directions_draw_angle on H, midpoint(B, G), F we get exists(angle(H, midpoint(B, G), F))
By line_inequality on Line(E, I), Line(C, F), E we get Line(C, F) != Line(E, I)
By directions_draw_angle on midpoint(B, G), C, orthocenter(A, D, G) we get exists(angle(midpoint(B, G), C, orthocenter(A, D, G)))
By directions_draw_angle on projection(A, median(F, B, G)), A, projection(A, Line(D, G)) we get exists(angle(projection(A, median(F, B, G)), A, projection(A, Line(D, G))))
By directions_draw_angle on midpoint(B, G), F, projection(F, Line(B, G)) we get exists(angle(midpoint(B, G), F, projection(F, Line(B, G))))
By directions_draw_angle on projection(F, altitude(A, B, D)), F, I we get exists(angle(projection(F, altitude(A, B, D)), F, I))
By directions_draw_angle on C, B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get exists(angle(C, B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))))
By line_inequality on altitude(D, E, midpoint(B, G)), median(projection(A, i), B, G), D we get altitude(D, E, midpoint(B, G)) != median(projection(A, i), B, G)
By not_in_line_equivalent_to_not_collinear_v0_r on projection(A, Line(D, G)), G, H we get projection(A, Line(D, G)) not in Line(G, H)
By directions_draw_angle on E, midpoint(B, G), projection(midpoint(B, G), g) we get exists(angle(E, midpoint(B, G), projection(midpoint(B, G), g)))
By directions_draw_angle on projection(E, Line(B, G)), E, I we get exists(angle(projection(E, Line(B, G)), E, I))
By not_in_line_equivalent_to_not_collinear_v0_r on I, H, G we get I not in Line(G, H)
By directions_draw_angle on midpoint(B, G), E, H we get exists(angle(midpoint(B, G), E, H))
By line_inequality on Line(C, midpoint(B, G)), Line(E, F), C we get Line(E, F) != Line(C, midpoint(B, G))
By directions_draw_angle on A, E, projection(E, Line(C, orthocenter(A, D, G))) we get exists(angle(A, E, projection(E, Line(C, orthocenter(A, D, G)))))
By directions_draw_angle on I, F, H we get exists(angle(I, F, H))
By directions_draw_angle on projection(F, Line(B, G)), F, D we get exists(angle(projection(F, Line(B, G)), F, D))
By directions_draw_angle on projection(F, altitude(A, B, D)), F, projection(F, Line(D, H)) we get exists(angle(projection(F, altitude(A, B, D)), F, projection(F, Line(D, H))))
By directions_draw_angle on I, E, projection(E, Line(D, G)) we get exists(angle(I, E, projection(E, Line(D, G))))
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), projection(midpoint(B, G), Line(D, F)) we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), projection(midpoint(B, G), Line(D, F))))
By directions_draw_angle on E, G, F we get exists(angle(E, G, F))
By directions_draw_angle on projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), projection(midpoint(B, G), Line(D, E)) we get exists(angle(projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), projection(midpoint(B, G), Line(D, E))))
By directions_draw_angle on projection(midpoint(B, G), i), midpoint(B, G), projection(midpoint(B, G), Line(D, E)) we get exists(angle(projection(midpoint(B, G), i), midpoint(B, G), projection(midpoint(B, G), Line(D, E))))
By directions_draw_angle on center(c), F, midpoint(B, G) we get exists(angle(center(c), F, midpoint(B, G)))
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), projection(midpoint(B, G), Line(G, I)) we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), projection(midpoint(B, G), Line(G, I))))
By directions_draw_angle on projection(A, i), B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get exists(angle(projection(A, i), B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))))
By directions_draw_angle on projection(midpoint(B, G), Line(D, F)), midpoint(B, G), B we get exists(angle(projection(midpoint(B, G), Line(D, F)), midpoint(B, G), B))
By directions_draw_angle on projection(midpoint(B, G), f), midpoint(B, G), E we get exists(angle(projection(midpoint(B, G), f), midpoint(B, G), E))
By directions_draw_angle on F, midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D)) we get exists(angle(F, midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D))))
By directions_draw_angle on line_intersection(h, altitude(projection(A, i), A, D)), G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get exists(angle(line_intersection(h, altitude(projection(A, i), A, D)), G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))))
By line_containment_inequality on line_intersection(Line(F, projection(A, i)), altitude(A, F, projection(A, i))), D, Line(F, projection(A, i)) we get D != line_intersection(Line(F, projection(A, i)), altitude(A, F, projection(A, i)))
By directions_draw_angle on orthocenter(A, B, D), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D))) we get exists(angle(orthocenter(A, B, D), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, B, D)))))
By line_inequality on Line(F, I), Line(E, F), I we get Line(E, F) != Line(F, I)
By directions_draw_angle on midpoint(B, G), E, projection(E, Line(B, G)) we get exists(angle(midpoint(B, G), E, projection(E, Line(B, G))))
By directions_draw_angle on C, E, B we get exists(angle(C, E, B))
By line_inequality on Line(F, G), Line(C, H), F we get Line(C, H) != Line(F, G)
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), B we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, B, D))), midpoint(B, G), B))
By directions_draw_angle on projection(E, altitude(A, D, G)), E, projection(E, h) we get exists(angle(projection(E, altitude(A, D, G)), E, projection(E, h)))
By line_inequality on altitude(D, F, projection(A, i)), Line(G, I), D we get Line(G, I) != altitude(D, F, projection(A, i))
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), altitude(A, D, G), B we get altitude(A, D, G) != Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By directions_draw_angle on I, E, midpoint(B, G) we get exists(angle(I, E, midpoint(B, G)))
By directions_draw_angle on projection(E, Line(C, orthocenter(A, D, G))), E, B we get exists(angle(projection(E, Line(C, orthocenter(A, D, G))), E, B))
By directions_draw_angle on projection(F, Line(H, orthocenter(A, B, D))), F, projection(F, h) we get exists(angle(projection(F, Line(H, orthocenter(A, B, D))), F, projection(F, h)))
By directions_draw_angle on line_intersection(h, altitude(projection(A, i), A, D)), G, orthocenter(A, B, D) we get exists(angle(line_intersection(h, altitude(projection(A, i), A, D)), G, orthocenter(A, B, D)))
By line_inequality on Line(H, midpoint(B, G)), Line(G, I), H we get Line(G, I) != Line(H, midpoint(B, G))
By line_inequality on altitude(B, midpoint(B, G), projection(A, i)), Line(H, orthocenter(A, B, D)), B we get Line(H, orthocenter(A, B, D)) != altitude(B, midpoint(B, G), projection(A, i))
By directions_draw_angle on line_intersection(h, altitude(projection(A, i), A, D)), B, H we get exists(angle(line_intersection(h, altitude(projection(A, i), A, D)), B, H))
By line_inequality on Line(B, projection(F, h)), median(projection(A, i), B, G), B we get Line(B, projection(F, h)) != median(projection(A, i), B, G)
By directions_draw_angle on G, I, orthocenter(A, D, G) we get exists(angle(G, I, orthocenter(A, D, G)))
By not_in_line_equivalent_to_not_collinear_v0_r on orthocenter(A, D, G), G, H we get orthocenter(A, D, G) not in Line(G, H)
By directions_draw_angle on projection(E, Line(D, G)), E, midpoint(B, G) we get exists(angle(projection(E, Line(D, G)), E, midpoint(B, G)))
By not_in_line_equivalent_to_not_collinear_v0_r on A, H, G we get A not in Line(G, H)
By directions_draw_angle on projection(midpoint(B, G), Line(G, I)), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G))) we get exists(angle(projection(midpoint(B, G), Line(G, I)), midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G)))))
By directions_draw_angle on I, orthocenter(A, D, G), midpoint(B, G) we get exists(angle(I, orthocenter(A, D, G), midpoint(B, G)))
By directions_draw_angle on I, A, projection(A, median(E, B, G)) we get exists(angle(I, A, projection(A, median(E, B, G))))
By directions_draw_angle on orthocenter(A, D, G), B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get exists(angle(orthocenter(A, D, G), B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))))
By directions_draw_angle on E, B, F we get exists(angle(E, B, F))
By line_inequality on altitude(D, E, projection(A, Line(D, G))), Line(C, H), D we get Line(C, H) != altitude(D, E, projection(A, Line(D, G)))
By directions_draw_angle on line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), G, I we get exists(angle(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), G, I))
By directions_draw_angle on projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), B we get exists(angle(projection(midpoint(B, G), Line(I, orthocenter(A, D, G))), midpoint(B, G), B))
By directions_draw_angle on orthocenter(A, B, D), I, E we get exists(angle(orthocenter(A, B, D), I, E))
By directions_draw_angle on orthocenter(A, D, G), C, center(c) we get exists(angle(orthocenter(A, D, G), C, center(c)))
By line_inequality on altitude(B, F, projection(A, i)), Line(F, projection(A, i)), B we get Line(F, projection(A, i)) != altitude(B, F, projection(A, i))
By directions_draw_angle on projection(F, Line(H, orthocenter(A, B, D))), F, D we get exists(angle(projection(F, Line(H, orthocenter(A, B, D))), F, D))
By directions_draw_angle on I, midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G))) we get exists(angle(I, midpoint(B, G), projection(midpoint(B, G), Line(I, orthocenter(A, D, G)))))
By directions_draw_angle on H, orthocenter(A, B, D), F we get exists(angle(H, orthocenter(A, B, D), F))
By directions_draw_angle on projection(F, h), F, projection(F, altitude(A, B, D)) we get exists(angle(projection(F, h), F, projection(F, altitude(A, B, D))))
By directions_draw_angle on orthocenter(A, B, D), B, E we get exists(angle(orthocenter(A, B, D), B, E))
By directions_draw_angle on projection(A, median(F, B, G)), A, midpoint(B, G) we get exists(angle(projection(A, median(F, B, G)), A, midpoint(B, G)))
By directions_draw_angle on D, F, projection(F, Line(H, orthocenter(A, B, D))) we get exists(angle(D, F, projection(F, Line(H, orthocenter(A, B, D)))))
By directions_draw_angle on orthocenter(A, D, G), orthocenter(A, B, D), H we get exists(angle(orthocenter(A, D, G), orthocenter(A, B, D), H))
By line_inequality on Line(F, I), Line(I, orthocenter(A, B, D)), F we get Line(F, I) != Line(I, orthocenter(A, B, D))
By line_inequality on Line(E, I), Line(D, G), I we get Line(D, G) != Line(E, I)
By directions_draw_angle on G, F, orthocenter(A, B, D) we get exists(angle(G, F, orthocenter(A, B, D)))
By directions_draw_angle on projection(E, Line(B, G)), E, center(c) we get exists(angle(projection(E, Line(B, G)), E, center(c)))
By directions_draw_angle on orthocenter(A, D, G), E, projection(E, Line(B, G)) we get exists(angle(orthocenter(A, D, G), E, projection(E, Line(B, G))))
By line_inequality on Line(F, I), Line(D, F), I we get Line(D, F) != Line(F, I)
By line_inequality on Line(F, G), Line(H, orthocenter(A, B, D)), G we get Line(F, G) != Line(H, orthocenter(A, B, D))
By line_inequality on Line(G, H), Line(G, I), H we get Line(G, H) != Line(G, I)
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, i), A, D))), Line(E, H), B we get Line(E, H) != Line(B, line_intersection(h, altitude(projection(A, i), A, D)))
By line_inequality on Line(G, H), Line(C, D), G we get Line(C, D) != Line(G, H)
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, i), A, D))), Line(C, F), G we get Line(C, F) != Line(G, line_intersection(h, altitude(projection(A, i), A, D)))
By line_inequality on altitude(D, E, projection(A, Line(D, G))), Line(I, orthocenter(A, D, G)), D we get Line(I, orthocenter(A, D, G)) != altitude(D, E, projection(A, Line(D, G)))
By not_in_line_equivalent_to_not_collinear_v0_r on F, I, H we get F not in Line(H, I)
By line_inequality on altitude(G, midpoint(B, G), projection(A, Line(D, G))), altitude(A, D, G), G we get altitude(A, D, G) != altitude(G, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on Line(C, midpoint(B, G)), Line(G, I), C we get Line(G, I) != Line(C, midpoint(B, G))
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), Line(C, F), G we get Line(C, F) != Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By line_inequality on Line(G, H), g, H we get g != Line(G, H)
By line_inequality on Line(G, H), Line(C, H), G we get Line(C, H) != Line(G, H)
By line_containment_inequality on line_intersection(Line(E, projection(A, Line(D, G))), altitude(A, E, projection(A, Line(D, G)))), orthocenter(A, D, G), Line(E, projection(A, Line(D, G))) we get orthocenter(A, D, G) != line_intersection(Line(E, projection(A, Line(D, G))), altitude(A, E, projection(A, Line(D, G))))
By line_inequality on Line(G, H), altitude(A, D, G), G we get Line(G, H) != altitude(A, D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on B, H, G we get B not in Line(G, H)
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), median(projection(A, Line(D, G)), B, G), G we get median(projection(A, Line(D, G)), B, G) != Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By line_inequality on Line(H, midpoint(B, G)), altitude(A, D, G), midpoint(B, G) we get altitude(A, D, G) != Line(H, midpoint(B, G))
By not_in_line_equivalent_to_not_collinear_v0_r on projection(A, Line(D, G)), F, G we get projection(A, Line(D, G)) not in Line(F, G)
By line_inequality on altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G))), Line(E, projection(A, Line(D, G))), orthocenter(A, D, G) we get Line(E, projection(A, Line(D, G))) != altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on Line(F, G), Line(E, H), G we get Line(E, H) != Line(F, G)
By line_inequality on altitude(G, midpoint(B, G), projection(A, Line(D, G))), Line(C, I), G we get Line(C, I) != altitude(G, midpoint(B, G), projection(A, Line(D, G)))
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, I we get C not in Line(E, I)
By line_containment_inequality on line_intersection(median(projection(A, i), B, G), altitude(D, midpoint(B, G), projection(A, i))), orthocenter(A, B, D), median(projection(A, i), B, G) we get orthocenter(A, B, D) != line_intersection(median(projection(A, i), B, G), altitude(D, midpoint(B, G), projection(A, i)))
By line_containment_inequality on line_intersection(Line(E, projection(A, Line(D, G))), altitude(G, E, projection(A, Line(D, G)))), D, Line(E, projection(A, Line(D, G))) we get D != line_intersection(Line(E, projection(A, Line(D, G))), altitude(G, E, projection(A, Line(D, G))))
By line_inequality on Line(H, midpoint(B, G)), f, midpoint(B, G) we get f != Line(H, midpoint(B, G))
By line_inequality on altitude(A, F, projection(A, i)), median(projection(A, i), B, G), A we get median(projection(A, i), B, G) != altitude(A, F, projection(A, i))
By line_inequality on altitude(A, midpoint(B, G), projection(A, i)), median(projection(A, Line(D, G)), B, G), A we get median(projection(A, Line(D, G)), B, G) != altitude(A, midpoint(B, G), projection(A, i))
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), altitude(A, D, G), G we get altitude(A, D, G) != Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By line_inequality on Line(H, midpoint(B, G)), Line(F, projection(A, i)), H we get Line(H, midpoint(B, G)) != Line(F, projection(A, i))
By line_inequality on Line(H, I), Line(G, I), H we get Line(G, I) != Line(H, I)
By not_in_line_equivalent_to_not_collinear_v0_r on G, F, I we get G not in Line(F, I)
By line_inequality on Line(F, I), median(projection(A, Line(D, G)), B, G), I we get Line(F, I) != median(projection(A, Line(D, G)), B, G)
By not_in_line_equivalent_to_not_collinear_v0_r on F, I, E we get F not in Line(E, I)
By line_inequality on altitude(A, F, midpoint(B, G)), Line(E, projection(A, Line(D, G))), A we get altitude(A, F, midpoint(B, G)) != Line(E, projection(A, Line(D, G)))
By line_inequality on Line(H, I), altitude(A, B, D), I we get Line(H, I) != altitude(A, B, D)
By line_inequality on Line(B, E), median(projection(A, i), B, G), B we get Line(B, E) != median(projection(A, i), B, G)
By line_inequality on altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i)), Line(F, projection(A, i)), orthocenter(A, B, D) we get Line(F, projection(A, i)) != altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i))
By line_inequality on Line(B, E), Line(C, I), B we get Line(B, E) != Line(C, I)
By line_inequality on altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i)), f, orthocenter(A, B, D) we get f != altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i))
By line_inequality on altitude(G, midpoint(B, G), projection(A, Line(D, G))), Line(C, orthocenter(A, D, G)), G we get Line(C, orthocenter(A, D, G)) != altitude(G, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(D, F, projection(A, i)), altitude(A, B, D), D we get altitude(A, B, D) != altitude(D, F, projection(A, i))
By line_inequality on altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G))), f, orthocenter(A, D, G) we get f != altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on Line(B, E), Line(I, orthocenter(A, B, D)), B we get Line(B, E) != Line(I, orthocenter(A, B, D))
By line_inequality on Line(E, I), median(projection(A, i), B, G), I we get Line(E, I) != median(projection(A, i), B, G)
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, i), A, D))), altitude(A, D, G), B we get altitude(A, D, G) != Line(B, line_intersection(h, altitude(projection(A, i), A, D)))
By line_inequality on Line(B, E), Line(B, I), E we get Line(B, E) != Line(B, I)
By line_inequality on Line(C, midpoint(B, G)), Line(C, orthocenter(A, D, G)), midpoint(B, G) we get Line(C, midpoint(B, G)) != Line(C, orthocenter(A, D, G))
By not_in_line_equivalent_to_not_collinear_v0_r on C, G, F we get C not in Line(F, G)
By line_inequality on altitude(orthocenter(A, D, G), E, midpoint(B, G)), median(projection(A, Line(D, G)), B, G), orthocenter(A, D, G) we get median(projection(A, Line(D, G)), B, G) != altitude(orthocenter(A, D, G), E, midpoint(B, G))
By line_inequality on altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G))), median(E, B, G), orthocenter(A, D, G) we get median(E, B, G) != altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, i), A, D))), median(projection(A, Line(D, G)), B, G), B we get median(projection(A, Line(D, G)), B, G) != Line(B, line_intersection(h, altitude(projection(A, i), A, D)))
By line_inequality on altitude(G, midpoint(B, G), projection(A, Line(D, G))), Line(H, orthocenter(A, B, D)), G we get Line(H, orthocenter(A, B, D)) != altitude(G, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(G, midpoint(B, G), projection(A, Line(D, G))), Line(B, I), G we get Line(B, I) != altitude(G, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on Line(E, I), Line(D, F), I we get Line(D, F) != Line(E, I)
By line_containment_inequality on line_intersection(median(projection(A, Line(D, G)), B, G), altitude(A, midpoint(B, G), projection(A, Line(D, G)))), G, median(projection(A, Line(D, G)), B, G) we get G != line_intersection(median(projection(A, Line(D, G)), B, G), altitude(A, midpoint(B, G), projection(A, Line(D, G))))
By line_inequality on Line(B, E), Line(C, orthocenter(A, D, G)), B we get Line(B, E) != Line(C, orthocenter(A, D, G))
By line_inequality on altitude(G, midpoint(B, G), projection(A, Line(D, G))), f, G we get f != altitude(G, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(B, midpoint(B, G), projection(A, i)), Line(E, H), B we get Line(E, H) != altitude(B, midpoint(B, G), projection(A, i))
By line_inequality on altitude(orthocenter(A, D, G), E, projection(A, Line(D, G))), f, orthocenter(A, D, G) we get f != altitude(orthocenter(A, D, G), E, projection(A, Line(D, G)))
By not_in_line_equivalent_to_not_collinear_v0_r on C, I, F we get C not in Line(F, I)
By line_inequality on Line(C, midpoint(B, G)), Line(C, I), midpoint(B, G) we get Line(C, I) != Line(C, midpoint(B, G))
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), median(F, B, G), B we get median(F, B, G) != Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By line_inequality on Line(B, E), Line(C, H), B we get Line(B, E) != Line(C, H)
By line_inequality on altitude(D, midpoint(B, G), projection(A, Line(D, G))), median(projection(A, i), B, G), D we get median(projection(A, i), B, G) != altitude(D, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(orthocenter(A, D, G), E, projection(A, Line(D, G))), median(projection(A, Line(D, G)), B, G), orthocenter(A, D, G) we get median(projection(A, Line(D, G)), B, G) != altitude(orthocenter(A, D, G), E, projection(A, Line(D, G)))
By line_inequality on altitude(G, midpoint(B, G), projection(A, Line(D, G))), Line(I, orthocenter(A, B, D)), G we get Line(I, orthocenter(A, B, D)) != altitude(G, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on Line(C, midpoint(B, G)), median(E, B, G), C we get median(E, B, G) != Line(C, midpoint(B, G))
By line_inequality on Line(C, midpoint(B, G)), Line(D, G), midpoint(B, G) we get Line(D, G) != Line(C, midpoint(B, G))
By line_inequality on altitude(B, midpoint(B, G), projection(A, i)), Line(E, F), B we get Line(E, F) != altitude(B, midpoint(B, G), projection(A, i))
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, i), A, D))), Line(I, orthocenter(A, B, D)), B we get Line(I, orthocenter(A, B, D)) != Line(B, line_intersection(h, altitude(projection(A, i), A, D)))
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, i), A, D))), Line(B, C), G we get Line(B, C) != Line(G, line_intersection(h, altitude(projection(A, i), A, D)))
By line_inequality on Line(F, G), Line(C, D), F we get Line(C, D) != Line(F, G)
By line_inequality on altitude(D, F, projection(A, i)), altitude(A, D, G), D we get altitude(A, D, G) != altitude(D, F, projection(A, i))
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, i), A, D))), median(E, B, G), G we get median(E, B, G) != Line(G, line_intersection(h, altitude(projection(A, i), A, D)))
By line_inequality on altitude(B, midpoint(B, G), projection(A, i)), Line(D, F), B we get Line(D, F) != altitude(B, midpoint(B, G), projection(A, i))
By line_containment_inequality on line_intersection(median(projection(A, Line(D, G)), B, G), altitude(D, midpoint(B, G), projection(A, Line(D, G)))), G, median(projection(A, Line(D, G)), B, G) we get G != line_intersection(median(projection(A, Line(D, G)), B, G), altitude(D, midpoint(B, G), projection(A, Line(D, G))))
By line_inequality on Line(B, E), Line(B, C), E we get Line(B, C) != Line(B, E)
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), Line(I, orthocenter(A, B, D)), G we get Line(I, orthocenter(A, B, D)) != Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By line_containment_inequality on line_intersection(Line(F, projection(A, i)), altitude(A, F, projection(A, i))), A, Line(F, projection(A, i)) we get A != line_intersection(Line(F, projection(A, i)), altitude(A, F, projection(A, i)))
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, i), A, D))), Line(C, orthocenter(A, D, G)), B we get Line(C, orthocenter(A, D, G)) != Line(B, line_intersection(h, altitude(projection(A, i), A, D)))
By line_inequality on Line(H, midpoint(B, G)), Line(C, orthocenter(A, D, G)), midpoint(B, G) we get Line(H, midpoint(B, G)) != Line(C, orthocenter(A, D, G))
By line_inequality on Line(B, E), Line(E, H), B we get Line(B, E) != Line(E, H)
By not_in_line_equivalent_to_not_collinear_v0_r on E, midpoint(B, G), C we get E not in Line(C, midpoint(B, G))
By line_inequality on altitude(orthocenter(A, D, G), E, projection(A, Line(D, G))), Line(B, C), orthocenter(A, D, G) we get Line(B, C) != altitude(orthocenter(A, D, G), E, projection(A, Line(D, G)))
By line_inequality on Line(H, midpoint(B, G)), Line(H, orthocenter(A, B, D)), midpoint(B, G) we get Line(H, midpoint(B, G)) != Line(H, orthocenter(A, B, D))
By line_inequality on Line(F, G), Line(E, F), G we get Line(E, F) != Line(F, G)
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, i), A, D))), median(F, B, G), B we get median(F, B, G) != Line(B, line_intersection(h, altitude(projection(A, i), A, D)))
By line_inequality on Line(F, I), Line(C, D), I we get Line(C, D) != Line(F, I)
By line_containment_inequality on line_intersection(Line(E, projection(A, Line(D, G))), altitude(A, E, projection(A, Line(D, G)))), C, Line(E, projection(A, Line(D, G))) we get C != line_intersection(Line(E, projection(A, Line(D, G))), altitude(A, E, projection(A, Line(D, G))))
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, i), A, D))), Line(B, I), G we get Line(B, I) != Line(G, line_intersection(h, altitude(projection(A, i), A, D)))
By line_inequality on altitude(B, midpoint(B, G), projection(A, i)), h, B we get h != altitude(B, midpoint(B, G), projection(A, i))
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), Line(E, H), B we get Line(E, H) != Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By line_inequality on Line(B, E), median(F, B, G), B we get Line(B, E) != median(F, B, G)
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, i), A, D))), Line(E, H), G we get Line(E, H) != Line(G, line_intersection(h, altitude(projection(A, i), A, D)))
By line_inequality on Line(H, I), f, I we get f != Line(H, I)
By line_circle_intersection_has_at_most_two_points_0 on D, I, A, Circle(C, D, I) we get A not in Circle(C, D, I)
By line_containment_inequality on line_intersection(median(projection(A, Line(D, G)), B, G), altitude(D, midpoint(B, G), projection(A, Line(D, G)))), A, median(projection(A, Line(D, G)), B, G) we get A != line_intersection(median(projection(A, Line(D, G)), B, G), altitude(D, midpoint(B, G), projection(A, Line(D, G))))
By line_inequality on altitude(D, E, projection(A, Line(D, G))), median(projection(A, Line(D, G)), B, G), D we get median(projection(A, Line(D, G)), B, G) != altitude(D, E, projection(A, Line(D, G)))
By line_inequality on Line(E, I), f, E we get f != Line(E, I)
By line_inequality on altitude(orthocenter(A, D, G), E, projection(A, Line(D, G))), Line(G, I), orthocenter(A, D, G) we get Line(G, I) != altitude(orthocenter(A, D, G), E, projection(A, Line(D, G)))
By line_inequality on Line(E, I), median(projection(A, Line(D, G)), B, G), I we get Line(E, I) != median(projection(A, Line(D, G)), B, G)
By line_inequality on altitude(A, E, midpoint(B, G)), Line(E, projection(A, Line(D, G))), A we get altitude(A, E, midpoint(B, G)) != Line(E, projection(A, Line(D, G)))
By line_inequality on altitude(A, F, projection(A, i)), Line(F, projection(A, i)), A we get Line(F, projection(A, i)) != altitude(A, F, projection(A, i))
By line_inequality on Line(C, midpoint(B, G)), i, midpoint(B, G) we get i != Line(C, midpoint(B, G))
By line_inequality on altitude(D, midpoint(B, G), projection(A, Line(D, G))), Line(F, projection(A, i)), D we get Line(F, projection(A, i)) != altitude(D, midpoint(B, G), projection(A, Line(D, G)))
By not_in_line_equivalent_to_not_collinear_v0_r on B, midpoint(B, G), C we get B not in Line(C, midpoint(B, G))
By not_in_line_equivalent_to_not_collinear_v0_r on A, midpoint(B, G), H we get A not in Line(H, midpoint(B, G))
By not_in_line_equivalent_to_not_collinear_v0_r on midpoint(B, G), F, G we get midpoint(B, G) not in Line(F, G)
By line_inequality on altitude(D, E, projection(A, Line(D, G))), altitude(A, D, G), D we get altitude(A, D, G) != altitude(D, E, projection(A, Line(D, G)))
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), median(E, B, G), B we get median(E, B, G) != Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By line_inequality on Line(B, E), Line(B, G), E we get Line(B, E) != Line(B, G)
By line_inequality on Line(C, midpoint(B, G)), h, C we get h != Line(C, midpoint(B, G))
By line_inequality on altitude(orthocenter(A, B, D), F, projection(A, i)), Line(E, F), orthocenter(A, B, D) we get Line(E, F) != altitude(orthocenter(A, B, D), F, projection(A, i))
By line_inequality on Line(F, G), Line(I, orthocenter(A, D, G)), G we get Line(F, G) != Line(I, orthocenter(A, D, G))
By line_inequality on Line(E, I), Line(D, H), I we get Line(D, H) != Line(E, I)
By line_inequality on Line(G, H), median(projection(A, i), B, G), G we get Line(G, H) != median(projection(A, i), B, G)
By line_containment_inequality on line_intersection(Line(E, projection(A, Line(D, G))), altitude(A, E, projection(A, Line(D, G)))), A, Line(E, projection(A, Line(D, G))) we get A != line_intersection(Line(E, projection(A, Line(D, G))), altitude(A, E, projection(A, Line(D, G))))
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), Line(I, orthocenter(A, B, D)), B we get Line(I, orthocenter(A, B, D)) != Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), Line(B, C), G we get Line(B, C) != Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), Line(E, projection(A, Line(D, G))), G we get Line(E, projection(A, Line(D, G))) != Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By line_inequality on altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G))), Line(E, H), orthocenter(A, D, G) we get Line(E, H) != altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, i), A, D))), f, G we get f != Line(G, line_intersection(h, altitude(projection(A, i), A, D)))
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, i), A, D))), Line(G, I), B we get Line(G, I) != Line(B, line_intersection(h, altitude(projection(A, i), A, D)))
By line_containment_inequality on line_intersection(Line(F, projection(A, i)), altitude(A, F, projection(A, i))), orthocenter(A, B, D), Line(F, projection(A, i)) we get orthocenter(A, B, D) != line_intersection(Line(F, projection(A, i)), altitude(A, F, projection(A, i)))
By line_inequality on Line(F, G), Line(D, G), F we get Line(D, G) != Line(F, G)
By line_inequality on altitude(D, F, projection(A, i)), median(projection(A, i), B, G), D we get median(projection(A, i), B, G) != altitude(D, F, projection(A, i))
By not_in_line_equivalent_to_not_collinear_v0_r on orthocenter(A, D, G), I, E we get orthocenter(A, D, G) not in Line(E, I)
By not_in_line_equivalent_to_not_collinear_v0_r on D, H, midpoint(B, G) we get D not in Line(H, midpoint(B, G))
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, E we get C not in Line(B, E)
By line_inequality on Line(B, E), i, E we get i != Line(B, E)
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, i), A, D))), Line(E, projection(A, Line(D, G))), G we get Line(E, projection(A, Line(D, G))) != Line(G, line_intersection(h, altitude(projection(A, i), A, D)))
By line_inequality on altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G))), Line(D, G), orthocenter(A, D, G) we get Line(D, G) != altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G)))
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, E we get D not in Line(B, E)
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), Line(D, F), B we get Line(D, F) != Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By line_inequality on Line(B, E), median(projection(A, Line(D, G)), B, G), B we get Line(B, E) != median(projection(A, Line(D, G)), B, G)
By line_inequality on altitude(orthocenter(A, B, D), F, projection(A, i)), Line(B, C), orthocenter(A, B, D) we get Line(B, C) != altitude(orthocenter(A, B, D), F, projection(A, i))
By line_inequality on altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G))), median(projection(A, Line(D, G)), B, G), orthocenter(A, D, G) we get median(projection(A, Line(D, G)), B, G) != altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(orthocenter(A, B, D), F, projection(A, i)), f, orthocenter(A, B, D) we get f != altitude(orthocenter(A, B, D), F, projection(A, i))
By line_inequality on Line(H, I), median(projection(A, i), B, G), I we get Line(H, I) != median(projection(A, i), B, G)
By line_inequality on Line(C, midpoint(B, G)), f, midpoint(B, G) we get f != Line(C, midpoint(B, G))
By line_inequality on altitude(G, midpoint(B, G), projection(A, Line(D, G))), altitude(A, B, D), G we get altitude(A, B, D) != altitude(G, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(D, F, projection(A, i)), median(E, B, G), D we get median(E, B, G) != altitude(D, F, projection(A, i))
By line_inequality on altitude(orthocenter(A, B, D), F, projection(A, i)), g, orthocenter(A, B, D) we get g != altitude(orthocenter(A, B, D), F, projection(A, i))
By line_inequality on altitude(orthocenter(A, B, D), F, midpoint(B, G)), median(projection(A, i), B, G), orthocenter(A, B, D) we get median(projection(A, i), B, G) != altitude(orthocenter(A, B, D), F, midpoint(B, G))
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), Line(D, F), G we get Line(D, F) != Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By line_containment_inequality on line_intersection(median(projection(A, i), B, G), altitude(A, midpoint(B, G), projection(A, i))), A, median(projection(A, i), B, G) we get A != line_intersection(median(projection(A, i), B, G), altitude(A, midpoint(B, G), projection(A, i)))
By line_inequality on altitude(D, midpoint(B, G), projection(A, i)), median(projection(A, i), B, G), D we get median(projection(A, i), B, G) != altitude(D, midpoint(B, G), projection(A, i))
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), Line(C, orthocenter(A, D, G)), B we get Line(C, orthocenter(A, D, G)) != Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By line_inequality on altitude(G, E, midpoint(B, G)), median(projection(A, i), B, G), G we get altitude(G, E, midpoint(B, G)) != median(projection(A, i), B, G)
By line_inequality on altitude(G, E, projection(A, Line(D, G))), median(projection(A, Line(D, G)), B, G), G we get median(projection(A, Line(D, G)), B, G) != altitude(G, E, projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(Line(E, projection(A, Line(D, G))), altitude(G, E, projection(A, Line(D, G)))), orthocenter(A, D, G), Line(E, projection(A, Line(D, G))) we get orthocenter(A, D, G) != line_intersection(Line(E, projection(A, Line(D, G))), altitude(G, E, projection(A, Line(D, G))))
By line_inequality on altitude(orthocenter(A, B, D), F, projection(A, i)), median(projection(A, Line(D, G)), B, G), orthocenter(A, B, D) we get median(projection(A, Line(D, G)), B, G) != altitude(orthocenter(A, B, D), F, projection(A, i))
By line_inequality on Line(F, G), Line(C, orthocenter(A, D, G)), G we get Line(F, G) != Line(C, orthocenter(A, D, G))
By line_inequality on altitude(G, midpoint(B, G), projection(A, Line(D, G))), i, G we get i != altitude(G, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on Line(H, midpoint(B, G)), Line(B, C), H we get Line(B, C) != Line(H, midpoint(B, G))
By not_in_line_equivalent_to_not_collinear_v0_r on D, midpoint(B, G), C we get D not in Line(C, midpoint(B, G))
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), Line(D, H), B we get Line(D, H) != Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By line_inequality on Line(F, G), f, G we get f != Line(F, G)
By line_inequality on altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i)), Line(C, F), orthocenter(A, B, D) we get Line(C, F) != altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i))
By not_in_line_equivalent_to_not_collinear_v0_r on projection(A, i), E, B we get projection(A, i) not in Line(B, E)
By line_inequality on Line(G, projection(E, h)), median(projection(A, i), B, G), G we get Line(G, projection(E, h)) != median(projection(A, i), B, G)
By line_inequality on Line(E, I), Line(G, I), E we get Line(E, I) != Line(G, I)
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, i), A, D))), Line(D, E), B we get Line(D, E) != Line(B, line_intersection(h, altitude(projection(A, i), A, D)))
By line_inequality on altitude(orthocenter(A, D, G), E, projection(A, Line(D, G))), Line(I, orthocenter(A, B, D)), orthocenter(A, D, G) we get Line(I, orthocenter(A, B, D)) != altitude(orthocenter(A, D, G), E, projection(A, Line(D, G)))
By not_in_line_equivalent_to_not_collinear_v0_r on B, I, E we get B not in Line(E, I)
By line_inequality on Line(G, H), i, H we get i != Line(G, H)
By line_inequality on Line(C, midpoint(B, G)), Line(I, orthocenter(A, B, D)), midpoint(B, G) we get Line(C, midpoint(B, G)) != Line(I, orthocenter(A, B, D))
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), Line(D, E), G we get Line(D, E) != Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By line_containment_inequality on line_intersection(median(projection(A, Line(D, G)), B, G), altitude(A, midpoint(B, G), projection(A, Line(D, G)))), A, median(projection(A, Line(D, G)), B, G) we get A != line_intersection(median(projection(A, Line(D, G)), B, G), altitude(A, midpoint(B, G), projection(A, Line(D, G))))
By line_inequality on Line(H, midpoint(B, G)), Line(D, F), midpoint(B, G) we get Line(D, F) != Line(H, midpoint(B, G))
By line_inequality on altitude(orthocenter(A, D, G), E, projection(A, Line(D, G))), Line(B, I), orthocenter(A, D, G) we get Line(B, I) != altitude(orthocenter(A, D, G), E, projection(A, Line(D, G)))
By line_inequality on altitude(A, E, projection(A, Line(D, G))), Line(E, projection(A, Line(D, G))), A we get Line(E, projection(A, Line(D, G))) != altitude(A, E, projection(A, Line(D, G)))
By line_inequality on Line(C, midpoint(B, G)), altitude(A, B, D), C we get altitude(A, B, D) != Line(C, midpoint(B, G))
By not_in_line_equivalent_to_not_collinear_v0_r on midpoint(B, G), E, B we get midpoint(B, G) not in Line(B, E)
By line_inequality on altitude(B, midpoint(B, G), projection(A, i)), median(F, B, G), B we get median(F, B, G) != altitude(B, midpoint(B, G), projection(A, i))
By line_inequality on Line(E, I), Line(C, I), E we get Line(C, I) != Line(E, I)
By line_inequality on Line(E, I), Line(B, C), I we get Line(B, C) != Line(E, I)
By line_inequality on Line(F, I), median(E, B, G), I we get Line(F, I) != median(E, B, G)
By line_inequality on altitude(B, midpoint(B, G), projection(A, i)), Line(C, orthocenter(A, D, G)), B we get Line(C, orthocenter(A, D, G)) != altitude(B, midpoint(B, G), projection(A, i))
By line_inequality on Line(H, I), Line(B, I), H we get Line(B, I) != Line(H, I)
By line_inequality on Line(B, E), g, B we get g != Line(B, E)
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, i), A, D))), altitude(A, B, D), B we get altitude(A, B, D) != Line(B, line_intersection(h, altitude(projection(A, i), A, D)))
By line_inequality on altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i)), median(F, B, G), orthocenter(A, B, D) we get median(F, B, G) != altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i))
By line_inequality on Line(H, I), Line(D, H), I we get Line(D, H) != Line(H, I)
By line_inequality on altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i)), Line(D, G), orthocenter(A, B, D) we get Line(D, G) != altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i))
By line_inequality on altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G))), median(projection(A, i), B, G), orthocenter(A, D, G) we get median(projection(A, i), B, G) != altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G))), Line(E, F), orthocenter(A, D, G) we get Line(E, F) != altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on Line(H, I), altitude(A, D, G), H we get Line(H, I) != altitude(A, D, G)
By line_inequality on altitude(D, E, projection(A, Line(D, G))), Line(I, orthocenter(A, B, D)), D we get Line(I, orthocenter(A, B, D)) != altitude(D, E, projection(A, Line(D, G)))
By line_inequality on Line(H, I), Line(D, F), H we get Line(D, F) != Line(H, I)
By line_containment_inequality on line_intersection(Line(F, projection(A, i)), altitude(B, F, projection(A, i))), D, Line(F, projection(A, i)) we get D != line_intersection(Line(F, projection(A, i)), altitude(B, F, projection(A, i)))
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), median(F, B, G), G we get median(F, B, G) != Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By line_containment_inequality on line_intersection(median(projection(A, Line(D, G)), B, G), altitude(A, midpoint(B, G), projection(A, Line(D, G)))), I, median(projection(A, Line(D, G)), B, G) we get I != line_intersection(median(projection(A, Line(D, G)), B, G), altitude(A, midpoint(B, G), projection(A, Line(D, G))))
By line_inequality on Line(H, I), h, H we get h != Line(H, I)
By line_inequality on Line(H, I), i, H we get i != Line(H, I)
By line_inequality on altitude(G, midpoint(B, G), projection(A, Line(D, G))), Line(E, projection(A, Line(D, G))), G we get Line(E, projection(A, Line(D, G))) != altitude(G, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on Line(G, H), Line(I, orthocenter(A, B, D)), G we get Line(G, H) != Line(I, orthocenter(A, B, D))
By line_inequality on altitude(orthocenter(A, D, G), E, projection(A, Line(D, G))), median(projection(A, i), B, G), orthocenter(A, D, G) we get median(projection(A, i), B, G) != altitude(orthocenter(A, D, G), E, projection(A, Line(D, G)))
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), Line(H, orthocenter(A, B, D)), G we get Line(H, orthocenter(A, B, D)) != Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By not_in_line_equivalent_to_not_collinear_v0_r on A, E, B we get A not in Line(B, E)
By line_inequality on altitude(G, E, midpoint(B, G)), Line(E, projection(A, Line(D, G))), G we get altitude(G, E, midpoint(B, G)) != Line(E, projection(A, Line(D, G)))
By line_inequality on altitude(D, midpoint(B, G), projection(A, i)), Line(E, projection(A, Line(D, G))), D we get Line(E, projection(A, Line(D, G))) != altitude(D, midpoint(B, G), projection(A, i))
By line_containment_inequality on line_intersection(Line(E, projection(A, Line(D, G))), altitude(A, E, projection(A, Line(D, G)))), D, Line(E, projection(A, Line(D, G))) we get D != line_intersection(Line(E, projection(A, Line(D, G))), altitude(A, E, projection(A, Line(D, G))))
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, i), A, D))), Line(D, E), G we get Line(D, E) != Line(G, line_intersection(h, altitude(projection(A, i), A, D)))
By line_inequality on Line(F, G), i, F we get i != Line(F, G)
By line_inequality on Line(H, I), median(E, B, G), I we get Line(H, I) != median(E, B, G)
By line_inequality on altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G))), Line(B, C), orthocenter(A, D, G) we get Line(B, C) != altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(D, F, projection(A, i)), Line(B, G), D we get Line(B, G) != altitude(D, F, projection(A, i))
By not_in_line_equivalent_to_not_collinear_v0_r on orthocenter(A, D, G), C, midpoint(B, G) we get orthocenter(A, D, G) not in Line(C, midpoint(B, G))
By line_inequality on Line(E, I), Line(B, G), I we get Line(B, G) != Line(E, I)
By line_inequality on altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i)), Line(C, D), orthocenter(A, B, D) we get Line(C, D) != altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i))
By line_inequality on altitude(orthocenter(A, B, D), F, projection(A, i)), Line(G, I), orthocenter(A, B, D) we get Line(G, I) != altitude(orthocenter(A, B, D), F, projection(A, i))
By line_inequality on altitude(B, midpoint(B, G), projection(A, i)), Line(C, D), B we get Line(C, D) != altitude(B, midpoint(B, G), projection(A, i))
By line_inequality on Line(G, projection(F, h)), Line(E, projection(A, Line(D, G))), G we get Line(G, projection(F, h)) != Line(E, projection(A, Line(D, G)))
By line_inequality on altitude(D, F, projection(A, i)), Line(E, projection(A, Line(D, G))), D we get altitude(D, F, projection(A, i)) != Line(E, projection(A, Line(D, G)))
By line_inequality on altitude(B, F, midpoint(B, G)), median(projection(A, Line(D, G)), B, G), B we get altitude(B, F, midpoint(B, G)) != median(projection(A, Line(D, G)), B, G)
By line_inequality on Line(G, H), f, G we get f != Line(G, H)
By line_inequality on altitude(A, E, projection(A, Line(D, G))), median(projection(A, i), B, G), A we get median(projection(A, i), B, G) != altitude(A, E, projection(A, Line(D, G)))
By line_inequality on Line(G, H), Line(I, orthocenter(A, D, G)), G we get Line(G, H) != Line(I, orthocenter(A, D, G))
By line_inequality on altitude(orthocenter(A, B, D), F, projection(A, i)), h, orthocenter(A, B, D) we get h != altitude(orthocenter(A, B, D), F, projection(A, i))
By line_inequality on altitude(G, midpoint(B, G), projection(A, Line(D, G))), Line(E, H), G we get Line(E, H) != altitude(G, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, i), A, D))), Line(F, projection(A, i)), B we get Line(F, projection(A, i)) != Line(B, line_intersection(h, altitude(projection(A, i), A, D)))
By line_containment_inequality on line_intersection(Line(E, projection(A, Line(D, G))), altitude(A, E, projection(A, Line(D, G)))), G, Line(E, projection(A, Line(D, G))) we get G != line_intersection(Line(E, projection(A, Line(D, G))), altitude(A, E, projection(A, Line(D, G))))
By line_inequality on altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i)), Line(I, orthocenter(A, D, G)), orthocenter(A, B, D) we get Line(I, orthocenter(A, D, G)) != altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i))
By not_in_line_equivalent_to_not_collinear_v0_r on B, H, midpoint(B, G) we get B not in Line(H, midpoint(B, G))
By line_inequality on Line(F, I), h, F we get h != Line(F, I)
By line_inequality on altitude(B, midpoint(B, G), projection(A, i)), Line(C, F), B we get Line(C, F) != altitude(B, midpoint(B, G), projection(A, i))
By line_inequality on altitude(G, E, projection(A, Line(D, G))), Line(E, projection(A, Line(D, G))), G we get Line(E, projection(A, Line(D, G))) != altitude(G, E, projection(A, Line(D, G)))
By line_inequality on altitude(orthocenter(A, D, G), E, midpoint(B, G)), median(projection(A, i), B, G), orthocenter(A, D, G) we get median(projection(A, i), B, G) != altitude(orthocenter(A, D, G), E, midpoint(B, G))
By not_in_line_equivalent_to_not_collinear_v0_r on I, B, E we get I not in Line(B, E)
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, i), A, D))), Line(E, F), G we get Line(E, F) != Line(G, line_intersection(h, altitude(projection(A, i), A, D)))
By line_containment_inequality on line_intersection(Line(F, projection(A, i)), altitude(B, F, projection(A, i))), B, Line(F, projection(A, i)) we get B != line_intersection(Line(F, projection(A, i)), altitude(B, F, projection(A, i)))
By not_in_line_equivalent_to_not_collinear_v0_r on I, H, midpoint(B, G) we get I not in Line(H, midpoint(B, G))
By line_inequality on Line(H, I), Line(C, H), I we get Line(C, H) != Line(H, I)
By line_inequality on altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G))), Line(H, orthocenter(A, B, D)), orthocenter(A, D, G) we get Line(H, orthocenter(A, B, D)) != altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(D, F, projection(A, i)), Line(C, I), D we get Line(C, I) != altitude(D, F, projection(A, i))
By line_containment_inequality on line_intersection(Line(F, projection(A, i)), altitude(B, F, projection(A, i))), A, Line(F, projection(A, i)) we get A != line_intersection(Line(F, projection(A, i)), altitude(B, F, projection(A, i)))
By line_inequality on altitude(G, midpoint(B, G), projection(A, Line(D, G))), Line(E, F), G we get Line(E, F) != altitude(G, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), Line(D, G), B we get Line(D, G) != Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By line_inequality on altitude(D, E, projection(A, Line(D, G))), Line(C, I), D we get Line(C, I) != altitude(D, E, projection(A, Line(D, G)))
By line_inequality on altitude(A, F, midpoint(B, G)), Line(F, projection(A, i)), A we get Line(F, projection(A, i)) != altitude(A, F, midpoint(B, G))
By line_inequality on Line(H, midpoint(B, G)), g, midpoint(B, G) we get g != Line(H, midpoint(B, G))
By line_inequality on altitude(D, F, projection(A, i)), Line(F, projection(A, i)), D we get Line(F, projection(A, i)) != altitude(D, F, projection(A, i))
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, i), A, D))), h, B we get h != Line(B, line_intersection(h, altitude(projection(A, i), A, D)))
By line_inequality on Line(B, projection(F, h)), median(projection(A, Line(D, G)), B, G), B we get Line(B, projection(F, h)) != median(projection(A, Line(D, G)), B, G)
By line_inequality on altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i)), Line(B, I), orthocenter(A, B, D) we get Line(B, I) != altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i))
By line_inequality on altitude(G, midpoint(B, G), projection(A, Line(D, G))), Line(I, orthocenter(A, D, G)), G we get Line(I, orthocenter(A, D, G)) != altitude(G, midpoint(B, G), projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(Line(F, projection(A, i)), altitude(A, F, projection(A, i))), H, Line(F, projection(A, i)) we get H != line_intersection(Line(F, projection(A, i)), altitude(A, F, projection(A, i)))
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), h, G we get h != Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By line_inequality on altitude(orthocenter(A, B, D), F, projection(A, i)), Line(C, orthocenter(A, D, G)), orthocenter(A, B, D) we get Line(C, orthocenter(A, D, G)) != altitude(orthocenter(A, B, D), F, projection(A, i))
By not_in_line_equivalent_to_not_collinear_v0_r on B, G, F we get B not in Line(F, G)
By line_inequality on Line(E, I), median(F, B, G), I we get Line(E, I) != median(F, B, G)
By line_inequality on Line(G, H), Line(D, H), G we get Line(D, H) != Line(G, H)
By line_inequality on Line(B, E), Line(D, E), B we get Line(B, E) != Line(D, E)
By line_inequality on altitude(B, midpoint(B, G), projection(A, i)), Line(D, E), B we get Line(D, E) != altitude(B, midpoint(B, G), projection(A, i))
By line_inequality on altitude(D, midpoint(B, G), projection(A, i)), median(projection(A, Line(D, G)), B, G), D we get median(projection(A, Line(D, G)), B, G) != altitude(D, midpoint(B, G), projection(A, i))
By line_inequality on altitude(B, midpoint(B, G), projection(A, i)), Line(D, G), B we get Line(D, G) != altitude(B, midpoint(B, G), projection(A, i))
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, i), A, D))), Line(D, H), B we get Line(D, H) != Line(B, line_intersection(h, altitude(projection(A, i), A, D)))
By line_inequality on altitude(B, midpoint(B, G), projection(A, i)), altitude(A, D, G), B we get altitude(A, D, G) != altitude(B, midpoint(B, G), projection(A, i))
By line_inequality on altitude(G, midpoint(B, G), projection(A, Line(D, G))), Line(D, E), G we get Line(D, E) != altitude(G, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(B, midpoint(B, G), projection(A, i)), g, B we get g != altitude(B, midpoint(B, G), projection(A, i))
By line_inequality on altitude(orthocenter(A, B, D), F, projection(A, i)), altitude(A, D, G), orthocenter(A, B, D) we get altitude(A, D, G) != altitude(orthocenter(A, B, D), F, projection(A, i))
By line_inequality on Line(G, H), Line(B, I), H we get Line(B, I) != Line(G, H)
By line_inequality on Line(C, midpoint(B, G)), Line(E, H), C we get Line(E, H) != Line(C, midpoint(B, G))
By line_inequality on Line(H, I), Line(E, H), I we get Line(E, H) != Line(H, I)
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), median(projection(A, i), B, G), G we get median(projection(A, i), B, G) != Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), altitude(A, B, D), G we get altitude(A, B, D) != Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By line_inequality on altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G))), g, orthocenter(A, D, G) we get g != altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(median(projection(A, i), B, G), altitude(D, midpoint(B, G), projection(A, i))), B, median(projection(A, i), B, G) we get B != line_intersection(median(projection(A, i), B, G), altitude(D, midpoint(B, G), projection(A, i)))
By line_inequality on altitude(D, E, projection(A, Line(D, G))), Line(E, H), D we get Line(E, H) != altitude(D, E, projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(Line(F, projection(A, i)), altitude(B, F, projection(A, i))), H, Line(F, projection(A, i)) we get H != line_intersection(Line(F, projection(A, i)), altitude(B, F, projection(A, i)))
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), median(E, B, G), G we get median(E, B, G) != Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By line_inequality on altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i)), h, orthocenter(A, B, D) we get h != altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i))
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, i), A, D))), median(F, B, G), G we get median(F, B, G) != Line(G, line_intersection(h, altitude(projection(A, i), A, D)))
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, i), A, D))), Line(C, H), G we get Line(C, H) != Line(G, line_intersection(h, altitude(projection(A, i), A, D)))
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, i), A, D))), median(projection(A, i), B, G), G we get median(projection(A, i), B, G) != Line(G, line_intersection(h, altitude(projection(A, i), A, D)))
By line_inequality on altitude(D, F, midpoint(B, G)), median(projection(A, Line(D, G)), B, G), D we get altitude(D, F, midpoint(B, G)) != median(projection(A, Line(D, G)), B, G)
By line_containment_inequality on line_intersection(median(projection(A, Line(D, G)), B, G), altitude(A, midpoint(B, G), projection(A, Line(D, G)))), D, median(projection(A, Line(D, G)), B, G) we get D != line_intersection(median(projection(A, Line(D, G)), B, G), altitude(A, midpoint(B, G), projection(A, Line(D, G))))
By line_inequality on altitude(A, E, midpoint(B, G)), median(projection(A, i), B, G), A we get altitude(A, E, midpoint(B, G)) != median(projection(A, i), B, G)
By line_inequality on altitude(B, midpoint(B, G), projection(A, i)), altitude(A, B, D), B we get altitude(A, B, D) != altitude(B, midpoint(B, G), projection(A, i))
By line_inequality on altitude(D, F, projection(A, i)), f, D we get f != altitude(D, F, projection(A, i))
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, i), A, D))), Line(C, D), B we get Line(C, D) != Line(B, line_intersection(h, altitude(projection(A, i), A, D)))
By line_inequality on Line(H, midpoint(B, G)), Line(D, H), midpoint(B, G) we get Line(D, H) != Line(H, midpoint(B, G))
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), median(projection(A, i), B, G), B we get median(projection(A, i), B, G) != Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), Line(D, E), B we get Line(D, E) != Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By line_inequality on Line(G, H), Line(F, projection(A, i)), H we get Line(G, H) != Line(F, projection(A, i))
By line_inequality on altitude(D, F, projection(A, i)), Line(B, C), D we get Line(B, C) != altitude(D, F, projection(A, i))
By line_inequality on Line(F, G), Line(G, I), F we get Line(F, G) != Line(G, I)
By line_inequality on altitude(G, midpoint(B, G), projection(A, Line(D, G))), median(F, B, G), G we get median(F, B, G) != altitude(G, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on Line(G, projection(F, h)), median(projection(A, i), B, G), G we get Line(G, projection(F, h)) != median(projection(A, i), B, G)
By line_inequality on Line(C, midpoint(B, G)), Line(B, C), midpoint(B, G) we get Line(B, C) != Line(C, midpoint(B, G))
By line_inequality on altitude(G, midpoint(B, G), projection(A, Line(D, G))), h, G we get h != altitude(G, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(orthocenter(A, B, D), F, midpoint(B, G)), Line(F, projection(A, i)), orthocenter(A, B, D) we get Line(F, projection(A, i)) != altitude(orthocenter(A, B, D), F, midpoint(B, G))
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), Line(C, H), G we get Line(C, H) != Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By line_inequality on altitude(B, midpoint(B, G), projection(A, i)), Line(C, I), B we get Line(C, I) != altitude(B, midpoint(B, G), projection(A, i))
By line_inequality on altitude(B, F, midpoint(B, G)), Line(F, projection(A, i)), B we get Line(F, projection(A, i)) != altitude(B, F, midpoint(B, G))
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, i), A, D))), Line(I, orthocenter(A, B, D)), G we get Line(I, orthocenter(A, B, D)) != Line(G, line_intersection(h, altitude(projection(A, i), A, D)))
By line_containment_inequality on line_intersection(median(projection(A, Line(D, G)), B, G), altitude(D, midpoint(B, G), projection(A, Line(D, G)))), B, median(projection(A, Line(D, G)), B, G) we get B != line_intersection(median(projection(A, Line(D, G)), B, G), altitude(D, midpoint(B, G), projection(A, Line(D, G))))
By line_inequality on altitude(G, midpoint(B, G), projection(A, Line(D, G))), median(projection(A, Line(D, G)), B, G), G we get median(projection(A, Line(D, G)), B, G) != altitude(G, midpoint(B, G), projection(A, Line(D, G)))
By line_inequality on altitude(orthocenter(A, D, G), E, projection(A, Line(D, G))), altitude(A, B, D), orthocenter(A, D, G) we get altitude(A, B, D) != altitude(orthocenter(A, D, G), E, projection(A, Line(D, G)))
By line_inequality on altitude(orthocenter(A, D, G), E, midpoint(B, G)), Line(E, projection(A, Line(D, G))), orthocenter(A, D, G) we get Line(E, projection(A, Line(D, G))) != altitude(orthocenter(A, D, G), E, midpoint(B, G))
By line_inequality on Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), Line(E, F), G we get Line(E, F) != Line(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By line_inequality on Line(B, E), median(E, B, G), B we get Line(B, E) != median(E, B, G)
By line_inequality on Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))), Line(I, orthocenter(A, D, G)), B we get Line(I, orthocenter(A, D, G)) != Line(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)))
By line_inequality on altitude(orthocenter(A, B, D), F, projection(A, i)), Line(D, H), orthocenter(A, B, D) we get Line(D, H) != altitude(orthocenter(A, B, D), F, projection(A, i))
By line_inequality on Line(B, E), f, E we get f != Line(B, E)
By line_inequality on altitude(orthocenter(A, D, G), E, projection(A, Line(D, G))), median(E, B, G), orthocenter(A, D, G) we get median(E, B, G) != altitude(orthocenter(A, D, G), E, projection(A, Line(D, G)))
By line_containment_inequality on line_intersection(median(projection(A, i), B, G), altitude(A, midpoint(B, G), projection(A, i))), I, median(projection(A, i), B, G) we get I != line_intersection(median(projection(A, i), B, G), altitude(A, midpoint(B, G), projection(A, i)))
By isogonal_conjugate_sufficient_conditions_v0 on H, G, A, D, D we get D == isogonal_conjugate(D, A, G, H)
By external_angle_bisector_definition_v0_r on projection(E, h), projection(E, Line(B, G)), projection(E, h), E we get Line(E, projection(E, Line(B, G))) == external_angle_bisector(projection(E, h), E, projection(E, h))
By similar_triangle_basic_properties on D, H, I, C, D, I we get not_collinear(D, H, I), not_collinear(C, D, I), angle(C, D, I) == angle(D, H, I) mod 360, angle(D, I, C) == angle(H, I, D) mod 360, angle(I, C, D) == angle(I, D, H) mod 360, log(distance(C, D)) + log(distance(H, I)) == log(distance(D, H)) + log(distance(D, I)), log(distance(D, I)) + log(distance(D, I)) == log(distance(H, I)) + log(distance(C, I)), log(distance(C, I)) + log(distance(D, H)) == log(distance(D, I)) + log(distance(C, D))
By anti_similar_triangle_basic_properties on D, H, I, H, D, I we get not_collinear(D, H, I), not_collinear(D, H, I), angle(D, H, I) == 0 - angle(H, D, I) mod 360, angle(H, I, D) == 0 - angle(D, I, H) mod 360, angle(I, D, H) == 0 - angle(I, H, D) mod 360, log(distance(D, H)) + log(distance(D, I)) == log(distance(D, H)) + log(distance(H, I)), log(distance(D, I)) + log(distance(D, I)) == log(distance(H, I)) + log(distance(H, I)), log(distance(D, I)) + log(distance(D, H)) == log(distance(H, I)) + log(distance(D, H))
By anti_similar_triangle_basic_properties on B, D, C, G, D, H we get not_collinear(B, C, D), not_collinear(D, G, H), angle(B, D, C) == 0 - angle(G, D, H) mod 360, angle(D, C, B) == 0 - angle(D, H, G) mod 360, angle(C, B, D) == 0 - angle(H, G, D) mod 360, log(distance(B, D)) + log(distance(D, H)) == log(distance(D, G)) + log(distance(C, D)), log(distance(C, D)) + log(distance(G, H)) == log(distance(D, H)) + log(distance(B, C)), log(distance(B, C)) + log(distance(D, G)) == log(distance(G, H)) + log(distance(B, D))
By anti_similar_triangle_basic_properties on H, D, G, C, D, B we get not_collinear(D, G, H), not_collinear(B, C, D), angle(H, D, G) == 0 - angle(C, D, B) mod 360, angle(D, G, H) == 0 - angle(D, B, C) mod 360, angle(G, H, D) == 0 - angle(B, C, D) mod 360, log(distance(C, D)) + log(distance(D, G)) == log(distance(D, H)) + log(distance(B, D)), log(distance(B, D)) + log(distance(G, H)) == log(distance(D, G)) + log(distance(B, C)), log(distance(B, C)) + log(distance(D, H)) == log(distance(G, H)) + log(distance(C, D))
By internal_angle_bisector_definition_v0_r on F, A, E, midpoint(B, G) we get Line(A, midpoint(B, G)) == internal_angle_bisector(E, midpoint(B, G), F)
By tangent_chord_angle_v1 on D, H, I, C we get tangent(Line(C, D), Circle(D, H, I))
By external_angle_bisector_definition_v0_r on projection(F, i), projection(F, altitude(A, B, D)), projection(F, i), F we get Line(F, projection(F, altitude(A, B, D))) == external_angle_bisector(projection(F, i), F, projection(F, i))
By power_of_a_point_on_circle on I, Circle(C, D, I) we get 0 == power_of_a_point(I, Circle(C, D, I))
By external_angle_bisector_definition_v0_r on projection(F, altitude(A, B, D)), projection(F, i), projection(F, altitude(A, B, D)), F we get Line(F, projection(F, i)) == external_angle_bisector(projection(F, altitude(A, B, D)), F, projection(F, altitude(A, B, D)))
By anti_similar_triangle_basic_properties on I, A, H, I, A, C we get not_collinear(A, H, I), not_collinear(A, C, I), angle(I, A, H) == 0 - angle(I, A, C) mod 360, angle(A, H, I) == 0 - angle(A, C, I) mod 360, angle(H, I, A) == 0 - angle(C, I, A) mod 360, log(distance(A, I)) + log(distance(A, C)) == log(distance(A, I)) + log(distance(A, H)), log(distance(A, C)) + log(distance(H, I)) == log(distance(A, H)) + log(distance(C, I)), log(distance(C, I)) + log(distance(A, I)) == log(distance(H, I)) + log(distance(A, I))
By internal_angle_bisector_definition_v0_r on A, D, G, H we get Line(D, H) == internal_angle_bisector(A, H, G)
By external_angle_bisector_definition_v0_r on projection(midpoint(B, G), altitude(A, D, G)), projection(midpoint(B, G), Line(D, G)), projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G) we get Line(midpoint(B, G), projection(midpoint(B, G), Line(D, G))) == external_angle_bisector(projection(midpoint(B, G), altitude(A, D, G)), midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G)))
By external_angle_bisector_definition_v0_r on projection(F, h), projection(F, Line(B, G)), projection(F, h), F we get Line(F, projection(F, Line(B, G))) == external_angle_bisector(projection(F, h), F, projection(F, h))
By external_angle_bisector_definition_v0_r on projection(midpoint(B, G), i), projection(midpoint(B, G), altitude(A, B, D)), projection(midpoint(B, G), i), midpoint(B, G) we get Line(midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D))) == external_angle_bisector(projection(midpoint(B, G), i), midpoint(B, G), projection(midpoint(B, G), i))
By external_angle_bisector_definition_v0_r on projection(midpoint(B, G), Line(D, F)), projection(midpoint(B, G), f), projection(midpoint(B, G), Line(D, F)), midpoint(B, G) we get Line(midpoint(B, G), projection(midpoint(B, G), f)) == external_angle_bisector(projection(midpoint(B, G), Line(D, F)), midpoint(B, G), projection(midpoint(B, G), Line(D, F)))
By external_angle_bisector_definition_v0_r on projection(E, altitude(A, D, G)), projection(E, Line(D, G)), projection(E, altitude(A, D, G)), E we get Line(E, projection(E, Line(D, G))) == external_angle_bisector(projection(E, altitude(A, D, G)), E, projection(E, altitude(A, D, G)))
By anti_similar_triangle_basic_properties on I, H, D, I, C, D we get not_collinear(D, H, I), not_collinear(C, D, I), angle(I, H, D) == 0 - angle(I, C, D) mod 360, angle(H, D, I) == 0 - angle(C, D, I) mod 360, angle(D, I, H) == 0 - angle(D, I, C) mod 360, log(distance(C, I)) + log(distance(D, H)) == log(distance(H, I)) + log(distance(C, D)), log(distance(C, D)) + log(distance(D, I)) == log(distance(D, H)) + log(distance(D, I)), log(distance(D, I)) + log(distance(C, I)) == log(distance(D, I)) + log(distance(H, I))
By internal_angle_bisector_definition_v0_r on F, A, E, I we get Line(A, I) == internal_angle_bisector(E, I, F)
By anti_similar_triangle_basic_properties on A, H, G, A, C, B we get not_collinear(A, G, H), not_collinear(A, B, C), angle(A, H, G) == 0 - angle(A, C, B) mod 360, angle(H, G, A) == 0 - angle(C, B, A) mod 360, angle(G, A, H) == 0 - angle(B, A, C) mod 360, log(distance(A, C)) + log(distance(G, H)) == log(distance(A, H)) + log(distance(B, C)), log(distance(B, C)) + log(distance(A, G)) == log(distance(G, H)) + log(distance(A, B)), log(distance(A, B)) + log(distance(A, H)) == log(distance(A, G)) + log(distance(A, C))
By external_angle_bisector_definition_v0_r on projection(midpoint(B, G), f), projection(midpoint(B, G), Line(D, F)), projection(midpoint(B, G), f), midpoint(B, G) we get Line(midpoint(B, G), projection(midpoint(B, G), Line(D, F))) == external_angle_bisector(projection(midpoint(B, G), f), midpoint(B, G), projection(midpoint(B, G), f))
By internal_angle_bisector_definition_v0_r on F, D, E, I we get Line(D, I) == internal_angle_bisector(E, I, F)
By internal_angle_bisector_definition_v0_r on H, A, C, midpoint(B, G) we get Line(A, midpoint(B, G)) == internal_angle_bisector(C, midpoint(B, G), H)
By external_angle_bisector_definition_v0_r on projection(midpoint(B, G), g), projection(midpoint(B, G), Line(D, E)), projection(midpoint(B, G), g), midpoint(B, G) we get Line(midpoint(B, G), projection(midpoint(B, G), Line(D, E))) == external_angle_bisector(projection(midpoint(B, G), g), midpoint(B, G), projection(midpoint(B, G), g))
By external_angle_bisector_definition_v0_r on projection(F, Line(B, G)), projection(F, h), projection(F, Line(B, G)), F we get Line(F, projection(F, h)) == external_angle_bisector(projection(F, Line(B, G)), F, projection(F, Line(B, G)))
By internal_angle_bisector_definition_v0_r on H, A, C, I we get Line(A, I) == internal_angle_bisector(C, I, H)
By anti_similar_triangle_basic_properties on A, I, H, A, I, C we get not_collinear(A, H, I), not_collinear(A, C, I), angle(A, I, H) == 0 - angle(A, I, C) mod 360, angle(I, H, A) == 0 - angle(I, C, A) mod 360, angle(H, A, I) == 0 - angle(C, A, I) mod 360, log(distance(A, I)) + log(distance(C, I)) == log(distance(A, I)) + log(distance(H, I)), log(distance(C, I)) + log(distance(A, H)) == log(distance(H, I)) + log(distance(A, C)), log(distance(A, C)) + log(distance(A, I)) == log(distance(A, H)) + log(distance(A, I))
By internal_angle_bisector_definition_v0_r on C, D, H, I we get Line(D, I) == internal_angle_bisector(C, I, H)
By external_angle_bisector_definition_v0_r on projection(E, Line(D, G)), projection(E, altitude(A, D, G)), projection(E, Line(D, G)), E we get Line(E, projection(E, altitude(A, D, G))) == external_angle_bisector(projection(E, Line(D, G)), E, projection(E, Line(D, G)))
By external_angle_bisector_definition_v0_r on projection(midpoint(B, G), altitude(A, B, D)), projection(midpoint(B, G), i), projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G) we get Line(midpoint(B, G), projection(midpoint(B, G), i)) == external_angle_bisector(projection(midpoint(B, G), altitude(A, B, D)), midpoint(B, G), projection(midpoint(B, G), altitude(A, B, D)))
By internal_angle_bisector_definition_v0_r on C, D, H, midpoint(B, G) we get Line(D, midpoint(B, G)) == internal_angle_bisector(C, midpoint(B, G), H)
By perpendicular_lines_draw_intersection on median(projection(A, i), B, G), altitude(B, midpoint(B, G), projection(A, i)) we get exists(line_intersection(median(projection(A, i), B, G), altitude(B, midpoint(B, G), projection(A, i))))
By anti_similar_triangle_basic_properties on C, I, D, H, I, D we get not_collinear(C, D, I), not_collinear(D, H, I), angle(C, I, D) == 0 - angle(H, I, D) mod 360, angle(I, D, C) == 0 - angle(I, D, H) mod 360, angle(D, C, I) == 0 - angle(D, H, I) mod 360, log(distance(C, I)) + log(distance(D, I)) == log(distance(H, I)) + log(distance(D, I)), log(distance(D, I)) + log(distance(C, D)) == log(distance(D, I)) + log(distance(D, H)), log(distance(C, D)) + log(distance(H, I)) == log(distance(D, H)) + log(distance(C, I))
By external_angle_bisector_definition_v0_r on projection(E, Line(B, G)), projection(E, h), projection(E, Line(B, G)), E we get Line(E, projection(E, h)) == external_angle_bisector(projection(E, Line(B, G)), E, projection(E, Line(B, G)))
By perpendicular_lines_draw_intersection on altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G))), median(projection(A, Line(D, G)), B, G) we get exists(line_intersection(median(projection(A, Line(D, G)), B, G), altitude(orthocenter(A, D, G), midpoint(B, G), projection(A, Line(D, G)))))
By perpendicular_lines_draw_intersection on altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i)), median(projection(A, i), B, G) we get exists(line_intersection(median(projection(A, i), B, G), altitude(orthocenter(A, B, D), midpoint(B, G), projection(A, i))))
By perpendicular_lines_draw_intersection on h, Line(E, F) we get exists(line_intersection(h, Line(E, F)))
By similar_triangle_basic_properties on I, D, C, I, H, D we get not_collinear(C, D, I), not_collinear(D, H, I), angle(I, D, C) == angle(I, H, D) mod 360, angle(D, C, I) == angle(H, D, I) mod 360, angle(C, I, D) == angle(D, I, H) mod 360, log(distance(D, I)) + log(distance(D, H)) == log(distance(H, I)) + log(distance(C, D)), log(distance(C, D)) + log(distance(D, I)) == log(distance(D, H)) + log(distance(C, I)), log(distance(C, I)) + log(distance(H, I)) == log(distance(D, I)) + log(distance(D, I))
By perpendicular_lines_draw_intersection on altitude(D, E, projection(A, Line(D, G))), Line(E, projection(A, Line(D, G))) we get exists(line_intersection(Line(E, projection(A, Line(D, G))), altitude(D, E, projection(A, Line(D, G)))))
By anti_similar_triangle_basic_properties on B, C, A, G, H, A we get not_collinear(A, B, C), not_collinear(A, G, H), angle(B, C, A) == 0 - angle(G, H, A) mod 360, angle(C, A, B) == 0 - angle(H, A, G) mod 360, angle(A, B, C) == 0 - angle(A, G, H) mod 360, log(distance(B, C)) + log(distance(A, H)) == log(distance(G, H)) + log(distance(A, C)), log(distance(A, C)) + log(distance(A, G)) == log(distance(A, H)) + log(distance(A, B)), log(distance(A, B)) + log(distance(G, H)) == log(distance(A, G)) + log(distance(B, C))
By internal_angle_bisector_definition_v0_r on A, D, H, G we get Line(D, G) == internal_angle_bisector(A, G, H)
By external_angle_bisector_definition_v0_r on projection(midpoint(B, G), Line(D, E)), projection(midpoint(B, G), g), projection(midpoint(B, G), Line(D, E)), midpoint(B, G) we get Line(midpoint(B, G), projection(midpoint(B, G), g)) == external_angle_bisector(projection(midpoint(B, G), Line(D, E)), midpoint(B, G), projection(midpoint(B, G), Line(D, E)))
By external_angle_bisector_definition_v0_r on projection(midpoint(B, G), Line(D, G)), projection(midpoint(B, G), altitude(A, D, G)), projection(midpoint(B, G), Line(D, G)), midpoint(B, G) we get Line(midpoint(B, G), projection(midpoint(B, G), altitude(A, D, G))) == external_angle_bisector(projection(midpoint(B, G), Line(D, G)), midpoint(B, G), projection(midpoint(B, G), Line(D, G)))
By perpendicular_lines_draw_intersection on altitude(orthocenter(A, D, G), E, projection(A, Line(D, G))), Line(E, projection(A, Line(D, G))) we get exists(line_intersection(Line(E, projection(A, Line(D, G))), altitude(orthocenter(A, D, G), E, projection(A, Line(D, G)))))
By perpendicular_lines_draw_intersection on median(projection(A, Line(D, G)), B, G), altitude(G, midpoint(B, G), projection(A, Line(D, G))) we get exists(line_intersection(median(projection(A, Line(D, G)), B, G), altitude(G, midpoint(B, G), projection(A, Line(D, G)))))
By power_of_a_point_on_circle on C, Circle(C, D, I) we get 0 == power_of_a_point(C, Circle(C, D, I))
By power_of_a_point_on_circle on D, Circle(C, D, I) we get 0 == power_of_a_point(D, Circle(C, D, I))
By reverse_direction on B, line_intersection(h, altitude(projection(A, i), A, D)) we get 180 == direction(B, line_intersection(h, altitude(projection(A, i), A, D))) - direction(line_intersection(h, altitude(projection(A, i), A, D)), B) mod 360
By perpendicular_lines_draw_intersection on Line(F, projection(A, i)), altitude(orthocenter(A, B, D), F, projection(A, i)) we get exists(line_intersection(Line(F, projection(A, i)), altitude(orthocenter(A, B, D), F, projection(A, i))))
By internal_angle_bisector_definition_v0_r on F, D, E, midpoint(B, G) we get Line(D, midpoint(B, G)) == internal_angle_bisector(E, midpoint(B, G), F)
By reverse_direction on G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get 180 == direction(G, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) - direction(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), G) mod 360
By reverse_direction on G, line_intersection(h, altitude(projection(A, i), A, D)) we get 180 == direction(G, line_intersection(h, altitude(projection(A, i), A, D))) - direction(line_intersection(h, altitude(projection(A, i), A, D)), G) mod 360
By reverse_direction on B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D)) we get 180 == direction(B, line_intersection(h, altitude(projection(A, Line(D, G)), A, D))) - direction(line_intersection(h, altitude(projection(A, Line(D, G)), A, D)), B) mod 360
By perpendicular_lines_draw_intersection on altitude(D, F, projection(A, i)), Line(F, projection(A, i)) we get exists(line_intersection(Line(F, projection(A, i)), altitude(D, F, projection(A, i))))
By perpendicular_lines_draw_intersection on h, Line(C, H) we get exists(line_intersection(h, Line(C, H)))
By draw_point_of_tangency on Line(D, H), Circle(C, D, I) we get exists(line_circle_tangent_point(Line(D, H), Circle(C, D, I)))
By anti_similar_triangle_basic_properties on A, I, F, A, I, E we get not_collinear(A, F, I), not_collinear(A, E, I), angle(A, I, F) == 0 - angle(A, I, E) mod 360, angle(I, F, A) == 0 - angle(I, E, A) mod 360, angle(F, A, I) == 0 - angle(E, A, I) mod 360, log(distance(A, I)) + log(distance(E, I)) == log(distance(A, I)) + log(distance(F, I)), log(distance(E, I)) + log(distance(A, F)) == log(distance(F, I)) + log(distance(A, E)), log(distance(A, E)) + log(distance(A, I)) == log(distance(A, F)) + log(distance(A, I))
By anti_similar_triangle_basic_properties on D, G, F, D, B, E we get not_collinear(D, F, G), not_collinear(B, D, E), angle(D, G, F) == 0 - angle(D, B, E) mod 360, angle(G, F, D) == 0 - angle(B, E, D) mod 360, angle(F, D, G) == 0 - angle(E, D, B) mod 360, log(distance(B, D)) + log(distance(F, G)) == log(distance(D, G)) + log(distance(B, E)), log(distance(B, E)) + log(distance(D, F)) == log(distance(F, G)) + log(distance(D, E)), log(distance(D, E)) + log(distance(D, G)) == log(distance(D, F)) + log(distance(B, D))
By anti_similar_triangle_basic_properties on C, midpoint(B, G), D, H, midpoint(B, G), D we get not_collinear(C, D, midpoint(B, G)), not_collinear(D, H, midpoint(B, G)), angle(C, midpoint(B, G), D) == 0 - angle(H, midpoint(B, G), D) mod 360, angle(midpoint(B, G), D, C) == 0 - angle(midpoint(B, G), D, H) mod 360, angle(D, C, midpoint(B, G)) == 0 - angle(D, H, midpoint(B, G)) mod 360, log(distance(C, midpoint(B, G))) + log(distance(D, midpoint(B, G))) == log(distance(H, midpoint(B, G))) + log(distance(D, midpoint(B, G))), log(distance(D, midpoint(B, G))) + log(distance(C, D)) == log(distance(D, midpoint(B, G))) + log(distance(D, H)), log(distance(C, D)) + log(distance(H, midpoint(B, G))) == log(distance(D, H)) + log(distance(C, midpoint(B, G)))
By anti_similar_triangle_basic_properties on A, G, F, A, B, E we get not_collinear(A, F, G), not_collinear(A, B, E), angle(A, G, F) == 0 - angle(A, B, E) mod 360, angle(G, F, A) == 0 - angle(B, E, A) mod 360, angle(F, A, G) == 0 - angle(E, A, B) mod 360, log(distance(A, B)) + log(distance(F, G)) == log(distance(A, G)) + log(distance(B, E)), log(distance(B, E)) + log(distance(A, F)) == log(distance(F, G)) + log(distance(A, E)), log(distance(A, E)) + log(distance(A, G)) == log(distance(A, F)) + log(distance(A, B))
By altitude_definition on I, E, F, h we get h == altitude(I, E, F)
By altitude_definition on H, A, D, Line(C, H) we get Line(C, H) == altitude(H, A, D)
By anti_similar_triangle_basic_properties on midpoint(B, G), C, D, midpoint(B, G), H, D we get not_collinear(C, D, midpoint(B, G)), not_collinear(D, H, midpoint(B, G)), angle(midpoint(B, G), C, D) == 0 - angle(midpoint(B, G), H, D) mod 360, angle(C, D, midpoint(B, G)) == 0 - angle(H, D, midpoint(B, G)) mod 360, angle(D, midpoint(B, G), C) == 0 - angle(D, midpoint(B, G), H) mod 360, log(distance(C, midpoint(B, G))) + log(distance(D, H)) == log(distance(H, midpoint(B, G))) + log(distance(C, D)), log(distance(C, D)) + log(distance(D, midpoint(B, G))) == log(distance(D, H)) + log(distance(D, midpoint(B, G))), log(distance(D, midpoint(B, G))) + log(distance(C, midpoint(B, G))) == log(distance(D, midpoint(B, G))) + log(distance(H, midpoint(B, G)))
By anti_similar_triangle_basic_properties on D, I, F, D, I, E we get not_collinear(D, F, I), not_collinear(D, E, I), angle(D, I, F) == 0 - angle(D, I, E) mod 360, angle(I, F, D) == 0 - angle(I, E, D) mod 360, angle(F, D, I) == 0 - angle(E, D, I) mod 360, log(distance(D, I)) + log(distance(E, I)) == log(distance(D, I)) + log(distance(F, I)), log(distance(E, I)) + log(distance(D, F)) == log(distance(F, I)) + log(distance(D, E)), log(distance(D, E)) + log(distance(D, I)) == log(distance(D, F)) + log(distance(D, I))
By power_of_a_point_tangent on H, D, Circle(C, D, I) we get 2 * log(distance(D, H)) == log(power_of_a_point(H, Circle(C, D, I)))
By anti_similar_triangle_basic_properties on midpoint(B, G), H, A, midpoint(B, G), C, A we get not_collinear(A, H, midpoint(B, G)), not_collinear(A, C, midpoint(B, G)), angle(midpoint(B, G), H, A) == 0 - angle(midpoint(B, G), C, A) mod 360, angle(H, A, midpoint(B, G)) == 0 - angle(C, A, midpoint(B, G)) mod 360, angle(A, midpoint(B, G), H) == 0 - angle(A, midpoint(B, G), C) mod 360, log(distance(C, midpoint(B, G))) + log(distance(A, H)) == log(distance(H, midpoint(B, G))) + log(distance(A, C)), log(distance(A, C)) + log(distance(A, midpoint(B, G))) == log(distance(A, H)) + log(distance(A, midpoint(B, G))), log(distance(A, midpoint(B, G))) + log(distance(C, midpoint(B, G))) == log(distance(A, midpoint(B, G))) + log(distance(H, midpoint(B, G)))
By altitude_definition on H, I, A, Line(C, H) we get Line(C, H) == altitude(H, A, I)
By altitude_definition on C, I, D, Line(C, H) we get Line(C, H) == altitude(C, D, I)
By anti_similar_triangle_basic_properties on A, midpoint(B, G), E, A, midpoint(B, G), F we get not_collinear(A, E, midpoint(B, G)), not_collinear(A, F, midpoint(B, G)), angle(A, midpoint(B, G), E) == 0 - angle(A, midpoint(B, G), F) mod 360, angle(midpoint(B, G), E, A) == 0 - angle(midpoint(B, G), F, A) mod 360, angle(E, A, midpoint(B, G)) == 0 - angle(F, A, midpoint(B, G)) mod 360, log(distance(A, midpoint(B, G))) + log(distance(E, midpoint(B, G))) == log(distance(A, midpoint(B, G))) + log(distance(F, midpoint(B, G))), log(distance(E, midpoint(B, G))) + log(distance(A, F)) == log(distance(F, midpoint(B, G))) + log(distance(A, E)), log(distance(A, E)) + log(distance(A, midpoint(B, G))) == log(distance(A, F)) + log(distance(A, midpoint(B, G)))
By altitude_definition on H, midpoint(B, G), A, Line(C, H) we get Line(C, H) == altitude(H, A, midpoint(B, G))
By anti_similar_triangle_basic_properties on F, G, D, E, B, D we get not_collinear(D, F, G), not_collinear(B, D, E), angle(F, G, D) == 0 - angle(E, B, D) mod 360, angle(G, D, F) == 0 - angle(B, D, E) mod 360, angle(D, F, G) == 0 - angle(D, E, B) mod 360, log(distance(B, E)) + log(distance(D, G)) == log(distance(F, G)) + log(distance(B, D)), log(distance(B, D)) + log(distance(D, F)) == log(distance(D, G)) + log(distance(D, E)), log(distance(D, E)) + log(distance(F, G)) == log(distance(D, F)) + log(distance(B, E))
By anti_similar_triangle_basic_properties on E, I, A, F, I, A we get not_collinear(A, E, I), not_collinear(A, F, I), angle(E, I, A) == 0 - angle(F, I, A) mod 360, angle(I, A, E) == 0 - angle(I, A, F) mod 360, angle(A, E, I) == 0 - angle(A, F, I) mod 360, log(distance(E, I)) + log(distance(A, I)) == log(distance(F, I)) + log(distance(A, I)), log(distance(A, I)) + log(distance(A, E)) == log(distance(A, I)) + log(distance(A, F)), log(distance(A, E)) + log(distance(F, I)) == log(distance(A, F)) + log(distance(E, I))
By anti_similar_triangle_basic_properties on midpoint(B, G), A, H, midpoint(B, G), A, C we get not_collinear(A, H, midpoint(B, G)), not_collinear(A, C, midpoint(B, G)), angle(midpoint(B, G), A, H) == 0 - angle(midpoint(B, G), A, C) mod 360, angle(A, H, midpoint(B, G)) == 0 - angle(A, C, midpoint(B, G)) mod 360, angle(H, midpoint(B, G), A) == 0 - angle(C, midpoint(B, G), A) mod 360, log(distance(A, midpoint(B, G))) + log(distance(A, C)) == log(distance(A, midpoint(B, G))) + log(distance(A, H)), log(distance(A, C)) + log(distance(H, midpoint(B, G))) == log(distance(A, H)) + log(distance(C, midpoint(B, G))), log(distance(C, midpoint(B, G))) + log(distance(A, midpoint(B, G))) == log(distance(H, midpoint(B, G))) + log(distance(A, midpoint(B, G)))
By altitude_definition on C, midpoint(B, G), A, Line(C, H) we get Line(C, H) == altitude(C, A, midpoint(B, G))
By anti_similar_triangle_basic_properties on E, I, D, F, I, D we get not_collinear(D, E, I), not_collinear(D, F, I), angle(E, I, D) == 0 - angle(F, I, D) mod 360, angle(I, D, E) == 0 - angle(I, D, F) mod 360, angle(D, E, I) == 0 - angle(D, F, I) mod 360, log(distance(E, I)) + log(distance(D, I)) == log(distance(F, I)) + log(distance(D, I)), log(distance(D, I)) + log(distance(D, E)) == log(distance(D, I)) + log(distance(D, F)), log(distance(D, E)) + log(distance(F, I)) == log(distance(D, F)) + log(distance(E, I))
By anti_similar_triangle_basic_properties on midpoint(B, G), F, D, midpoint(B, G), E, D we get not_collinear(D, F, midpoint(B, G)), not_collinear(D, E, midpoint(B, G)), angle(midpoint(B, G), F, D) == 0 - angle(midpoint(B, G), E, D) mod 360, angle(F, D, midpoint(B, G)) == 0 - angle(E, D, midpoint(B, G)) mod 360, angle(D, midpoint(B, G), F) == 0 - angle(D, midpoint(B, G), E) mod 360, log(distance(E, midpoint(B, G))) + log(distance(D, F)) == log(distance(F, midpoint(B, G))) + log(distance(D, E)), log(distance(D, E)) + log(distance(D, midpoint(B, G))) == log(distance(D, F)) + log(distance(D, midpoint(B, G))), log(distance(D, midpoint(B, G))) + log(distance(E, midpoint(B, G))) == log(distance(D, midpoint(B, G))) + log(distance(F, midpoint(B, G)))
By altitude_definition on C, I, A, Line(C, H) we get Line(C, H) == altitude(C, A, I)
By anti_similar_triangle_basic_properties on G, A, F, B, A, E we get not_collinear(A, F, G), not_collinear(A, B, E), angle(G, A, F) == 0 - angle(B, A, E) mod 360, angle(A, F, G) == 0 - angle(A, E, B) mod 360, angle(F, G, A) == 0 - angle(E, B, A) mod 360, log(distance(A, B)) + log(distance(A, F)) == log(distance(A, G)) + log(distance(A, E)), log(distance(A, E)) + log(distance(F, G)) == log(distance(A, F)) + log(distance(B, E)), log(distance(B, E)) + log(distance(A, G)) == log(distance(F, G)) + log(distance(A, B))
By anti_similar_triangle_basic_properties on F, midpoint(B, G), D, E, midpoint(B, G), D we get not_collinear(D, F, midpoint(B, G)), not_collinear(D, E, midpoint(B, G)), angle(F, midpoint(B, G), D) == 0 - angle(E, midpoint(B, G), D) mod 360, angle(midpoint(B, G), D, F) == 0 - angle(midpoint(B, G), D, E) mod 360, angle(D, F, midpoint(B, G)) == 0 - angle(D, E, midpoint(B, G)) mod 360, log(distance(E, midpoint(B, G))) + log(distance(D, midpoint(B, G))) == log(distance(F, midpoint(B, G))) + log(distance(D, midpoint(B, G))), log(distance(D, midpoint(B, G))) + log(distance(D, E)) == log(distance(D, midpoint(B, G))) + log(distance(D, F)), log(distance(D, E)) + log(distance(F, midpoint(B, G))) == log(distance(D, F)) + log(distance(E, midpoint(B, G)))
By anti_similar_triangle_basic_properties on F, midpoint(B, G), A, E, midpoint(B, G), A we get not_collinear(A, F, midpoint(B, G)), not_collinear(A, E, midpoint(B, G)), angle(F, midpoint(B, G), A) == 0 - angle(E, midpoint(B, G), A) mod 360, angle(midpoint(B, G), A, F) == 0 - angle(midpoint(B, G), A, E) mod 360, angle(A, F, midpoint(B, G)) == 0 - angle(A, E, midpoint(B, G)) mod 360, log(distance(E, midpoint(B, G))) + log(distance(A, midpoint(B, G))) == log(distance(F, midpoint(B, G))) + log(distance(A, midpoint(B, G))), log(distance(A, midpoint(B, G))) + log(distance(A, E)) == log(distance(A, midpoint(B, G))) + log(distance(A, F)), log(distance(A, E)) + log(distance(F, midpoint(B, G))) == log(distance(A, F)) + log(distance(E, midpoint(B, G)))
By altitude_definition on H, I, midpoint(B, G), Line(C, H) we get Line(C, H) == altitude(H, I, midpoint(B, G))
By altitude_definition on H, I, D, Line(C, H) we get Line(C, H) == altitude(H, D, I)
By altitude_definition on D, F, E, h we get h == altitude(D, E, F)
By altitude_definition on C, midpoint(B, G), D, Line(C, H) we get Line(C, H) == altitude(C, D, midpoint(B, G))
By altitude_definition on A, E, F, h we get h == altitude(A, E, F)
By altitude_definition on I, C, H, h we get h == altitude(I, C, H)
By altitude_definition on D, C, H, h we get h == altitude(D, C, H)
By altitude_definition on C, midpoint(B, G), I, Line(C, H) we get Line(C, H) == altitude(C, I, midpoint(B, G))
By altitude_definition on A, C, H, h we get h == altitude(A, C, H)
By altitude_definition on H, D, midpoint(B, G), Line(C, H) we get Line(C, H) == altitude(H, D, midpoint(B, G))
By altitude_definition on C, D, A, Line(C, H) we get Line(C, H) == altitude(C, A, D)
By perpendicular_bisector_sufficient_conditions on E, F, midpoint(B, G), D we get Line(D, midpoint(B, G)) == perpendicular_bisector(E, F)
By perpendicular_bisector_sufficient_conditions on H, C, D, midpoint(B, G) we get Line(D, midpoint(B, G)) == perpendicular_bisector(C, H)
By perpendicular_bisector_sufficient_conditions on E, F, I, D we get Line(D, I) == perpendicular_bisector(E, F)
By perpendicular_bisector_sufficient_conditions on C, H, I, midpoint(B, G) we get Line(I, midpoint(B, G)) == perpendicular_bisector(C, H)
By perpendicular_bisector_sufficient_conditions on C, H, I, D we get Line(D, I) == perpendicular_bisector(C, H)
By perpendicular_bisector_sufficient_conditions on E, F, I, midpoint(B, G) we get Line(I, midpoint(B, G)) == perpendicular_bisector(E, F)
By isosceles_triangle_altitude_v2 on D, F, E we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, D, F), perpendicular_line(D, Line(E, F)))
By isosceles_triangle_altitude_v2 on D, C, H we get identical(perpendicular_bisector(C, H), internal_angle_bisector(C, D, H), perpendicular_line(D, Line(C, H)))
By isosceles_triangle_altitude_v2 on D, E, F we get identical(perpendicular_bisector(E, F), internal_angle_bisector(E, D, F), perpendicular_line(D, Line(E, F)))
By isosceles_triangle_altitude_v2 on D, H, C we get identical(perpendicular_bisector(C, H), internal_angle_bisector(C, D, H), perpendicular_line(D, Line(C, H)))
