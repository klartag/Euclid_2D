Assumptions:
A, B, C, D, E, F, G, H: Point
f, g, h, i, j, k: Line
c: Circle
distinct(A, B, C, D, E, F, G, H)
distinct(f, g, h, i, j, k)
f == Line(A, B)
g == Line(B, C)
h == parallel_line(C, f)
i == parallel_line(A, g)
D == line_intersection(h, i)
c == Circle(A, B, C)
E in h, c
j == external_angle_bisector(A, D, C)
F == projection(A, h)
k == Line(A, F)
G == line_intersection(j, k)
H == line_intersection(f, j)

Embedding:
C := {"x": "-0.51368145126432451785802868471364490687847137451171875", "y": "-0.6396583045199217831822124935570172965526580810546875"}
B := {"x": "-0.2539413686487359544941000422113575041294097900390625", "y": "-0.1332002575680914235878304907600977458059787750244140625"}
A := {"x": "-1.3694420749714832918897400304558686912059783935546875", "y": "0.75002955491551925870652439698460511863231658935546875"}
c := {"center": {"x": "-1.0793984044900880337242003290940830517704737581450284978623327348779934387004487868335998562593133419546190963456339939105782473327324571074336632581756374457469282239866782767888970033475814064480566607023596512350807152222019954032295529294210300199422546288564821295939119952685290719780192101081463403549365008204016220584358727487222036340877671338689602757621233634755603017483824671953540978553939823811909006069201133110192084904687937231756732148676875838036793855335866714724292290058138758504813643458661062107114040526473753088144288735944948397348451792292306361122867375146614183936275696670025351273000029270517853637316972494967806190455807811638867588003149174785519637095093192014991041288180199531348307260439764447745556143502933655566841960133105759858150293733457827424728518120780801858452814837817319099196557313530484224639413074869530691662643408226363305787703435204786566504688157467029229297172913456499961857255809725484164543672676751776303817667296607308415344148499720150744104777907987884271184930715298647669609332326749431060033050542854876184282794865066383699035272217356791883287706430072306112595998309347444850721232372411294682794076974154269638622570510703930672185342364801853921992943057856625118856126924160153829143561360211274125585631588488505400491222277863825981562068532761816185681810029381524305572273235837907642755447245239005999738198273564312535613866690586423043909375699217750660668975888989676145172874503372978353254077443734689179299180274612553100201663578827624210663857440114911834848032071362988338253746846863280594944153790074454056276859201462005321640712864239529314169149068199081047096206472129543881317623824969226071357899515470955331483044596450272629923638634175617135729483837341842083273274338394937448641702752488902724673267833552053471603395050660849164898839192194227054969223237399698334362641686221476680703262121971220194532646830787226945451817864690426429264115342862282990493763118532555125777696610914636106651", "y": "-0.02969327000840922029564338094834243782570749275111028746028540261887871640190834491363586641217550745807138973333482879440264650318959714936657041290625789774879152153842989894500317723606429177401810110410536883169805780643423342873349047554165307513626861789187677378587639372439605891904773387937259686046685714517054952910430211371976778399501278958149185980081569693745755842886104826816092675965886782592878703072051120126435389773333260220774518778124676181867306522488048062490427642962786947035184661409676336640346605045351909581066264694942630454789171079568261000454138072117447596320357122583990618762675186272235184414809351362204864175091882048307195687859484709609654927959030986574612578674001901467548494440041139498058756088934945161020561612647483562365894517456335456360390411849577084670793103517272636965564991577404276628044163396721050075586262290024380682887462054416218853246086392712362540718569371532563205094688969403116127804454467064124289090205254054897996269721395259351166617824864924451291875529940794233893469857926505250934992445469574602677823653583138991445823553554174237244915251097191624657963974223533911810961908806026975724249349962878028754031447972051856855084458709665731201650517783473484163298302831592386271610924106661382335294786111792930220329452716979771547683716222902305616659607531675203376924640327938461043467235001822284487215154446050369718252954568491629871732137573800001958211242954756599945183488593951634026347923770496746450648291022962895824963248913256909545345059315969130602665857183220280270285821737700716481449527245520608243775925844445521886613190238134357682373873490856146620570947936124166221142696159926291683084003140070980552127702470496808869407811642895919203909287046051570958458498802452935818697311033139743922179333525590294994599579978707368366233021567775852697921644683744687327308245884578317932321112759346115295402129000028653287389232989589489965460009521800861885108537707830177742276771126036318620762"}, "radius_squared": "0.69209301449367141752643635778624391501784452514443109335919389198542501128036429622295563766173446217459929185984551873076580984017732759223277748030950208456435251747523662074582743294053018672097020936040604892512144518811571583149183500767030293318946477880292223027349190933482793803311600005533710335950396423286972287232134426916357993110158292391836176203004782997982721948888841483139210477705337544097517863976355079390624229632932083377235569387731298415126580515534733087585833610902360310575566572370633935921367749883356730736983067248467296204303357897246458891803083762988402765960759990405751724351707744626841363311795016542576038876647226425253954821104878674528765273303973828601404717100582097965665226803726756626691968726765690885678471297031275243822150359192131287461090726148015198578052664093793902265951553950089207549780699804607683777498063420687021497688508300427089660287045167189463507118189347853624070721019522570312815779302356645168931629802980235270772492873635860840815548916580956039848465762339285072090112198389833591734833768766228960788930742522826509242484999396301128315028098811641640446924235490888325508298280180583012530150947084704873244463429974797986547604482718125141629839090382691458365674147673134836635269431628461938614140767370726075097151518026186304745063981126033300662865078793845870780517302741262224293298907439855657390018294963091608354569184963425628070031764425336514188644363914484623694105945279633098448910884079616419776810248624769601298976477686833984016522584533032902797901646721357749822559449217802069635218931711227309768126116972282145809755126078643739222169350028707535514364245856579509136280970084897882072632301662485126310143859323818729560464664243361946328664271546888606702000142140598648283566230972780941403609278839290565175936112283140922758132677955216382587445291498020063283554844562032664723207099014618299377009993023923803139574712885324462014109816711663441692124614335630936903959451252693247506728"}
f := {"point": {"x": "-1.3694420749714832918897400304558686912059783935546875", "y": "0.75002955491551925870652439698460511863231658935546875"}, "direction": {"x": "1.115500706322747337395639988244511187076568603515625", "y": "-0.8832298124836106822943548877447028644382953643798828125"}}
h := {"point": {"x": "-0.51368145126432451785802868471364490687847137451171875", "y": "-0.6396583045199217831822124935570172965526580810546875"}, "direction": {"x": "1.115500706322747337395639988244511187076568603515625", "y": "-0.8832298124836106822943548877447028644382953643798828125"}}
F := {"x": "-1.7160107738951012323827405521933214539832708705374814321587383811841130905179374775437593582752639334521667572567286058909072360643106245042698746898988019349066210175906050357208403056179104355276642146507153501789744821172840218718793833990951977741061987286200584134998426210149995919079158739143520983268486216745747053693010531364837424287384342060116919645954236852229896947415841276720271807005181098044998314274597992582359836660930807651723526589201340337756823658810538722691610818152554903825107670878702953998137384068292302902373147446396098376632590393494321382672951540267551297454110332698315193024041189931399525424712152926152532448722286185280417635105321230882876185121639944182218073719386614293378560115201375309161636445256544593433899575526897184223094815221581808095616737456904523472749208518889686672489569589236687070590927201891182908452084350924636581583741642825015213830072640205465613967816892362904536509620802189998500630174054933903026069269144625185695321809532448111038998952922567875666548532457638901994199017814876034037201464785585891401369955788283369265108641065904606708896983376984158673313262454784914565688657908005480347700488317472067343829204256605575460105696978709428490138397280988499513707257917789788050686987569466879639188175273212135076458842218510677591770812721870058196510963333107487543115729678206271790618666249741799083363912792182556589182110754891567041764689373931181939882590719221244438304158662242739689407185700382414034540611230127242059952886671595981108569225397219449531258003138552203581775941631862160039626506177896358113042064245068497250927659959333338976932406410832896800269512364227166520677940113739892803517907391964697457491141464194452274377775046448022632623149540338063425666830201964356669963291890772693352691382366910105751947932641362981975512294532158270521013079437982095612949647953821577601823971089278592223367520298673012539963433336724396923013521687375638295607643267183255359996770951735118609178", "y": "0.31232056573233865905617361192510416343461364826034069047103131431271898500958797360031303956456472938234056829812480258196544510290194714387008455846827046777651956672647844380444910491510632610045636657655636699039132205664879657894370709930978973009002200234031161951497484256889504643423436329032873264559306773397305183984085723410031097814940175393880052274465658042268789509360558724444287904945933670633774193528828791326311458301301451006206655300029210732010151466522791317558051454945731771067619648453613404146048320988376262837005327384282021608119099981006551630064710404470528144600194809154765129241370033487475468232344438683963233642575727643217403249510245815646547554094627316905438473669915705321485291733343831649476048260538070122951391713542976819837455809327190632415033272197936434443311377025892920664870508008914330827044549974760801997822715267723823783540569663248789426587557073953361157959048271224540250736940545846958461572536626124746378782847250262294258552702406790225395344914097116202957910878366818735038380989418907014720433078353671752167451756979205115504096431501808680122591344698883087487447655830739932306282324898241747467281110675165316445047865089913728293395704605763986315846570139083406009094623059580236657983652448994404624218781124507603847924404325669756776360059433489115239504047621626179209827612152041270508310974111060861688829428499143916223888842963845571549320798874546503795598420151015118110049095898211566666585405301549567161483759484875493658443441289745915502641486264012207609850486303784397880564358409229853472972459887655255290215928844687218620081003214944020210740137782553939502104972555674650430350063133999205457155873745286792477197595090842567085488392871227202964189582725765900562864850898668578874852125158817770712709665999088651691495236760632389992703683721954432539912760664271296376474908718220510794734098092539746025841674949511162860025079416518948470237676298526491494865273459673412043965634099439112011475"}
k := {"point": {"x": "-1.3694420749714832918897400304558686912059783935546875", "y": "0.75002955491551925870652439698460511863231658935546875"}, "direction": {"x": "-0.3465686989236179404930005217374527627772924769827939321587383811841130905179374775437593582752639334521667572567286058909072360643106245042698746898988019349066210175906050357208403056179104355276642146507153501789744821172840218718793833990951977741061987286200584134998426210149995919079158739143520983268486216745747053693010531364837424287384342060116919645954236852229896947415841276720271807005181098044998314274597992582359836660930807651723526589201340337756823658810538722691610818152554903825107670878702953998137384068292302902373147446396098376632590393494321382672951540267551297454110332698315193024041189931399525424712152926152532448722286185280417635105321230882876185121639944182218073719386614293378560115201375309161636445256544593433899575526897184223094815221581808095616737456904523472749208518889686672489569589236687070590927201891182908452084350924636581583741642825015213830072640205465613967816892362904536509620802189998500630174054933903026069269144625185695321809532448111038998952922567875666548532457638901994199017814876034037201464785585891401369955788283369265108641065904606708896983376984158673313262454784914565688657908005480347700488317472067343829204256605575460105696978709428490138397280988499513707257917789788050686987569466879639188175273212135076458842218510677591770812721870058196510963333107487543115729678206271790618666249741799083363912792182556589182110754891567041764689373931181939882590719221244438304158662242739689407185700382414034540611230127242059952886671595981108569225397219449531258003138552203581775941631862160039626506177896358113042064245068497250927659959333338976932406410832896800269512364227166520677940113739892803517907391964697457491141464194452274377775046448022632623149540338063425666830201964356669963291890772693352691382366910105751947932641362981975512294532158270521013079437982095612949647953821577601823971089278592223367520298673012539963433336724396923013521687375638295607643267183255359996770951735118609178", "y": "-0.43770898918318059965035078505950095519770294109512805952896868568728101499041202639968696043543527061765943170187519741803455489709805285612991544153172953222348043327352155619555089508489367389954363342344363300960867794335120342105629290069021026990997799765968838048502515743110495356576563670967126735440693226602694816015914276589968902185059824606119947725534341957731210490639441275555712095054066329366225806471171208673688541698698548993793344699970789267989848533477208682441948545054268228932380351546386595853951679011623737162994672615717978391880900018993448369935289595529471855399805190845234870758629966512524531767655561316036766357424272356782596750489754184353452445905372683094561526330084294678514708266656168350523951739461929877048608286457023180162544190672809367584966727802063565556688622974107079335129491991085669172955450025239198002177284732276176216459430336751210573412442926046638842040951728775459749263059454153041538427463373875253621217152749737705741447297593209774604655085902883797042089121633181264961619010581092985279566921646328247832548243020794884495903568498191319877408655301116912512552344169260067693717675101758252532718889324834683554952134910086271706604295394236013684153429860916593990905376940419763342016347551005595375781218875492396152075595674330243223639940566510884760495952378373820790172387847958729491689025888939138311170571500856083776111157036154428450679201125453496204401579848984881889950904101788433333414594698450432838516240515124506341556558710254084497358513735987792390149513696215602119435641590770146527027540112344744709784071155312781379918996785055979789259862217446060497895027444325349569649936866000794542844126254713207522802404909157432914511607128772797035810417274234099437135149101331421125147874841182229287290334000911348308504763239367610007296316278045567460087239335728703623525091281779489205265901907460253974158325050488837139974920583481051529762323701473508505134726540326587956034365900560887988525"}}
g := {"point": {"x": "-0.2539413686487359544941000422113575041294097900390625", "y": "-0.1332002575680914235878304907600977458059787750244140625"}, "direction": {"x": "-0.25974008261558856336392864250228740274906158447265625", "y": "-0.5064580469518303595943820027969195507466793060302734375"}}
i := {"point": {"x": "-1.3694420749714832918897400304558686912059783935546875", "y": "0.75002955491551925870652439698460511863231658935546875"}, "direction": {"x": "-0.25974008261558856336392864250228740274906158447265625", "y": "-0.5064580469518303595943820027969195507466793060302734375"}}
D := {"x": "-1.62918215758707185525366867295815609395503997802734375", "y": "0.2435715079636888991121423941876855678856372833251953125"}
j := {"point": {"x": "-1.62918215758707185525366867295815609395503997802734375", "y": "0.2435715079636888991121423941876855678856372833251953125"}, "direction": {"x": "-0.32766134133080911953634736152703933716656472442760460904365516262637380067552658429341722295705329869817336415561923742127008894727991121893461955906605901967914976211879371538319249807826039725149627013953051273823200628350717708403994266542586633511121386534709136925758885155981651724831609099414275086894541278898560773706061224600467798620727144974446167285541619758098600800549533481721616376416136150253947262033148280861857508418449520814774500545135038098221945165761660348974954996195168284721275766543683010544737812841096892014204099897603219995889291704111279006298122070220301897752403369794519084503344468059866660950483659076519532777590193746431896321742740233667226575270187089033849678194211045412799773550342026647141263077424220936502123491139469456547994943801664624568240825781096652307972784683622950010290687376248981056023982647915036495742775183218914208061717739669595930447998496520504542761888373820063742157276333218351460992695017780195983779539563024615611717202046064091173128015958729540932790070753833977218538432377613410956975561106242872011365213911793862504888588662204360166503905793141162944174857602132692623733783473542569458858956997356544407064535609216878596636882412228195289060993271749726191421564453930275473118994843950138912248706257773375923063650450381013678835959503692638590576164777941468648289164966740891772800670857145934932718751658695095190001884838377400907523180261634258084468469110327933890317643254358441997238970926672873390974536655665400003570534266072937574756720088083214436802791321979710625878914829161536158128713556446221611060587252790622604968647195911560779097792422499563746624364478403492698791002953752584085981375933770878031292369321304775910131658991730533047514835698761349761163210597465790068999717361748298788298279167466504634857163930256521864051307699874964789551744143533491532070699103693575394540730494830064370194512018423174075103473589747134783297958768296474562913953815269942328557565597115894158807", "y": "1.5105616026935290768597441085347530524426793058710056346196332565787329975252327486387808794317079904972771827520983262738512967834000308169546952681860523450064969691852377651205460694810887477711545112142530083408844144114378853642306010466110239971023678197032070618711389060345913949891287387679619533171480410131845604415861008371937718047752053313399367777178652171019039920598772267141738897343631098714487325533921543637194900777153505690161693945156128483720065033835281354642876552612517270718852896942567230130769240415285460727010162033147328078277917413037683715935525683710472992776355026935334458342708797168632827038309580841212933178816495931216662009119172769757255276872535519858068639060894504724339072671956703718064905034971709844725962312872991507448266293982097763454641935747857025104490230995083518321245979608319286490784452834733740006064521154753886199850804417297570773330082450354159540408673108125221402902514117000714814202015918541731502048912797599895388199589591704391299167271413148998879232092728168821592825021481243128873420824379912597266241677110265301721867613464301856216632115284363108632777958727432363607542496189353571418097726052935685850316299168008877499063856592981551718223958056914827184062251251805533299644369280546192498640096689591793322526987008202951578362146388150260470514254644138423994285957654468626296651746148874377426594331668209732372622033235442380688857197575131843827847982840194601048131660984037835333897558641103728065833709731993918319058980420682354849316196619146339425379232961683367107948798896359462442979693329271781067317432332117347155005488766794175865292915514253034313470847088492163178615420073401354929850596755407881645176752364908319775034648523812311570426110890692461443659986396845819132295338664542012952497655588892314863563893869892733290819587463162368400021342761047967836993280112581709654162591026668896825235887355964018129673189298485795954075289507724840276711806865188997867434338655259940460028"}}
H := {"x": "-1.8156800919777987637627401121615085969215740974461059118316782777609291009286918852876543721908801045219482439922561903341242752269182357017988440474822488205058275976410040984068452901663145322446114536429784680934691059448684310233680893649723837195451436965295295218636660259739849087101378562333420064794235283989765604348672059355797062710628235541820694965732138329260048810586092460693400377712976282811165618090764198384899399543294824894486288665785253148872204170636484268349225064189227269719935882620050350948571925372339655111807809105101393805474135134888065172826374040484195319506817349478601828390265600444357508579337837391836179078487471098833551861519288070002263323380966631139065340470111103370440533496113643766401735409313924490642172403551549993188572924003251628658074939793270685408137170249124399427913729833591352006068548652795571098520222938655486606560850991425274027879373713849745930491559042461657474552138761832459168833502251862048511206935708806915489639734335424265807776963210196486948416257982076788949394780188693625308986395222361432581642221744113275804955093508234574288672446472284841333879007056600173152761952607461498549491171957190874328611057357830271055762314320343037503219230251841176287319674983492723702007067169321131692271913916936640701665091446895436437291661577005512960005073068019577980573484961218071313042478827219769707559353311703912962829888201900759046649872480681062536155530964536936984968979634018378666100587378846473827816920356938115744036395647263446647505204762379596552913087404143071304240608089454706260699022698552206785050319609138459451404572413988194415232710207177722907775691523940650471817339085137408389013842128719797667918861151791852648277973814542205368089004449542495426857940337051683756664673602377588069384450341448583980693725580408366864046897984318557444783459286496539496570775901081849433668864250895388826887903156843460374825523492633176581187024159619685952419425612378936259274082361226140828192", "y": "1.1033513572681146482356248692576526555766967505778213783096016778184934937857710499418445827146125577521171455785875169716207769286321784896761216757397210230929141976815267296708912047258097075306809135690975603914002960614314103472144754543424352986798325076186926354921330176134916337696287366600145005298909963255024720559306153706791607394113631264086755244626995276235937367332437829244343425905699425636868951367949913409508990503999587855064145313605285000385140460323943123326248310835483680591670116784003874689463373247348031090166213513100098287540109287071755704405548480909813559625139138848830001223154571254338034930282251845013485612156435046555865354580294542099134294143894089001620166498020781141823498229517853339746731280366868186627368332080327846600322653837468148742663833240286994727778424052643547209934449491128518285980501426763973967596285160231065121782790384193910438339201138975080435024996549930418737708399371847101587405789887676088485069545966234118188865690484028110210924211983294669264627392994166179292507443698513812849931752263458427567266616845193671565926825823751911467555755009995995956150318306556017927179687785673194001275542154070781197904714151100150760271345828962310996980553744129069030319318638026590580599787258678270643762184483845420946590677635215237233916430612524071093525866211490834235459093521287705356181510583014181563889505376221636466821840833900364484815714758177140373332265395387287948296274833810863115189132101430939381946906875479544420753051061624807744325029427809697761605692944636026847839927543354487931109491990196129324788052392933287933117469294809273533374444898286256271704157675534768038349386321625438843145963182996378334422183139651038784585471041461187050347244373972724801627485489482601756267167889186297783668184373285749671410533143467211156719182824928056126818319258150639984220045698718886873357449924871847360810697345886719961770475121777744660810707687564454287818697875858835177516360234429032778832"}
G := {"x": "-1.6595598938313574328754454632684675674823204042910645369965180956287316454044584390336342653713454139963618826954717664610884008911281418981525728023293492929573630987054177886768599001039231540961537342564070238719853021586236670234848869939298440721076812889830360333055415323278750392796711190822687491574051227907005832842663854376138190333891589789337761493103210092702555938694463969828747476523708859402140972079721340870136791038630953301607983267159523039692237220347725248289627939298523071173863301857241481569433924395137369416144801136982565164829869529189670857626767028632968645374801697888260679073192212768217358460582264504672012357251658806669381601111428001775391785274413044862986147178196557031211432241111403005456592263615432980292577414386302716795226577311622962051586381507293198017159457849910762487812871215765376699500719878392105675913660013520251230044650588547184079850432219923151803512953559467986679742868323358334673566885432003666456468084812895088472908127759776671676748806548286656181021870548681974263712343226752196049563149415531415820425372345538396985899578776813863274767400732718422082044688350521285384357020538522634210144147089656717257483823352269769804165133359874530234804241415081464400144908437812475285398454036822985757817416926302166622501567366884051867911020679377515265363983213911029241477034380506933249243814767960524250579331427670351020493727546421618834797617149051917064917654190503390570877271581952705741214640262114416525447346170897884676074660150184598776017931509395680797986766891896922699102131570742856536794474506157862401525824155988524717832131459341611539719312268282047523752573737587350016873477983051363490717275421385325577613438246235524681785574339234001591228244465434012972937629883833525048046279243185885113800968703892535383047604579056854282980683928950454849135851303236201702325762457001706304347770284861517582203337191039075556752102371353173777146566815697570450593162634462216502177039358363027142788", "y": "0.38361684184713001966618332406032035696435893498169125620651338306219192508413597314641284216673710176156634223107253868637948631867674240398664282021583624548389405096750728923425430771248343879510170459272156578237794204913335496260102511309937519082842870921421079780839309446974789293114817518563970559562900976135263620039508729230167208863196710326111772842347120012671008276209042360363255287880563125976555349128120495536977895129101448670424290683171269681680246506257692399533192854074352755333770523786514050646993153335639353691801040969478455123399667184415908378182880089582356009330543754899608705487455090767270233992840251786860482193700804590002847353441112940108673026729221412143706506234710186938855281191587856721750498540212541616787383807268379841362023402715394453956682686243022274719895071168781416685281385512630748073541369638224972633612827175217335337860782145611902036437329576773672974476981781569465579084392757918432484466622940725848206092703738804628196882265662208208692028302829789185146839837081475485400347666203102084990903339172433324262814411644334450146195078952203237741616896515076604322955769163052779774438214980705097261250516628479622039546350653543183258806230820899459082362060117663089779459411609900895582629702392811208465902745233630665273557512266983847120303099648946248955215413844753627294715644237083617992186635773544668360553192540914809029708212976020454221004374048344805831952067962887386621768946771886256653437533686700134437302866119915420666540842139813377897009890035024244201151934905547916402692155585933060457825239520091924434367176152775160936137347108892277868360688990742074405544181936436672225802208922559450388338989679447885233373832608872599461734124199702080412534456617300708474165166915585946463909776614322709554531635896037175859538773072921419127517251463327678768999652885301089352976306593043403821907165021210005318914210435538587476629902625189870396841825498039484469717358410997218163173970521060262256001"}
E := {"x": "-1.8028393902031306095118124314284868140115017630476191143174767623682261810358749550875187165505278669043335145134572117818144721286212490085397493797976038698132420351812100714416806112358208710553284293014307003579489642345680437437587667981903955482123974572401168269996852420299991838158317478287041966536972433491494107386021062729674848574768684120233839291908473704459793894831682553440543614010362196089996628549195985164719673321861615303447053178402680675513647317621077445383221636305109807650215341757405907996274768136584605804746294892792196753265180786988642765345903080535102594908220665396630386048082379862799050849424305852305064897444572370560835270210642461765752370243279888364436147438773228586757120230402750618323272890513089186867799151053794368446189630443163616191233474913809046945498417037779373344979139178473374141181854403782365816904168701849273163167483285650030427660145280410931227935633784725809073019241604379997001260348109867806052138538289250371390643619064896222077997905845135751333097064915277803988398035629752068074402929571171782802739911576566738530217282131809213417793966753968317346626524909569829131377315816010960695400976634944134687658408513211150920211393957418856980276794561976999027414515835579576101373975138933759278376350546424270152917684437021355183541625443740116393021926666214975086231459356412543581237332499483598166727825584365113178364221509783134083529378747862363879765181438442488876608317324485479378814371400764828069081222460254484119905773343191962217138450794438899062516006277104407163551883263724320079253012355792716226084128490136994501855319918666677953864812821665793600539024728454333041355880227479785607035814783929394914982282928388904548755550092896045265246299080676126851333660403928713339926583781545386705382764733820211503895865282725963951024589064316541042026158875964191225899295907643155203647942178557184446735040597346025079926866673448793846027043374751276591215286534366510719993541903470237218358", "y": "0.3810696235009884190002048296625227589835900131954860684420626286254379700191759472006260791291294587646811365962496051639308902058038942877401691169365409355530391334529568876088982098302126522009127331531127339807826441132975931578874141986195794601800440046806232390299496851377900928684687265806574652911861354679461036796817144682006219562988035078776010454893131608453757901872111744888857580989186734126754838705765758265262291660260290201241331060005842146402030293304558263511610290989146354213523929690722680829209664197675252567401065476856404321623819996201310326012942080894105628920038961830953025848274006697495093646468887736792646728515145528643480649902049163129309510818925463381087694733983141064297058346668766329895209652107614024590278342708595363967491161865438126483006654439587286888662275405178584132974101601782866165408909994952160399564543053544764756708113932649757885317511414790672231591809654244908050147388109169391692314507325224949275756569450052458851710540481358045079068982819423240591582175673363747007676197883781402944086615670734350433490351395841023100819286300361736024518268939776617497489531166147986461256464979648349493456222135033063289009573017982745658679140921152797263169314027816681201818924611916047331596730489798880924843756224901520769584880865133951355272011886697823047900809524325235841965522430408254101662194822212172337765885699828783244777768592769114309864159774909300759119684030203023622009819179642313333317081060309913432296751896975098731688688257949183100528297252802441521970097260756879576112871681845970694594491977531051058043185768937443724016200642988804042148027556510787900420994511134930086070012626799841091431174749057358495439519018168513417097678574245440592837916545153180112572970179733715774970425031763554142541933199817730338299047352126477998540736744390886507982552132854259275294981743644102158946819618507949205168334989902232572005015883303789694047535259705298298973054691934682408793126819887822402295"}

Need to prove:
concyclic(A, E, G, H)

Proof:
By line_definition on E, F, h we get h == Line(E, F)
By line_definition on H, G, j we get j == Line(G, H)
By line_definition on G, D, j we get j == Line(D, G)
By line_definition on B, H, f we get f == Line(B, H)
By line_definition on D, E, h we get h == Line(D, E)
By line_definition on H, A, f we get f == Line(A, H)
By line_definition on A, G, k we get k == Line(A, G)
By line_definition on A, D, i we get i == Line(A, D)
By line_definition on F, D, h we get h == Line(D, F)
By line_definition on A, F, perpendicular_line(A, h) we get Line(A, F) == perpendicular_line(A, h)
By line_definition on F, C, h we get h == Line(C, F)
By line_definition on D, C, h we get h == Line(C, D)
By line_definition on H, D, j we get j == Line(D, H)
By line_definition on F, G, k we get k == Line(F, G)
By line_definition on C, E, h we get h == Line(C, E)
By line_intersection_definition on A, f, i we get A == line_intersection(f, i)
By line_intersection_definition on D, j, h we get D == line_intersection(h, j)
By circle_definition on B, E, C, c we get c == Circle(B, C, E)
By circle_definition on E, C, A, c we get c == Circle(A, C, E)
By line_intersection_definition on C, g, h we get C == line_intersection(g, h)
By line_intersection_definition on A, i, k we get A == line_intersection(i, k)
By circle_definition on A, E, B, c we get c == Circle(A, B, E)
By line_intersection_definition on D, i, j we get D == line_intersection(i, j)
By line_intersection_definition on F, k, h we get F == line_intersection(h, k)
By perpendicular_line_definition on D, h, perpendicular_line(A, h) we get h == perpendicular_line(D, perpendicular_line(A, h))
By perpendicular_line_definition on E, h, perpendicular_line(A, h) we get h == perpendicular_line(E, perpendicular_line(A, h))
By line_intersection_definition on A, k, f we get A == line_intersection(f, k)
By perpendicular_line_definition on C, h, perpendicular_line(A, h) we get h == perpendicular_line(C, perpendicular_line(A, h))
By perpendicular_line_definition on F, h, perpendicular_line(A, h) we get h == perpendicular_line(F, perpendicular_line(A, h))
By line_intersection_definition on B, f, g we get B == line_intersection(f, g)
By perpendicular_line_definition on F, perpendicular_line(A, h), h we get perpendicular_line(A, h) == perpendicular_line(F, h)
By line_unique_intersection_v1 on h, g, C, B we get B not in h
By line_unique_intersection_v1 on h, k, F, G we get G not in h
By line_uniqueness on A, F, perpendicular_line(A, h), k we get k == perpendicular_line(A, h)
By line_unique_intersection_v1 on i, f, A, H we get H not in i
By line_unique_intersection_v1 on f, j, H, G we get G not in f
By line_unique_intersection_v1 on j, k, G, A we get A not in j
By line_unique_intersection_v1 on g, h, C, F we get F not in g
By line_unique_intersection_v1 on k, f, A, H we get H not in k
By line_unique_intersection_v1 on g, h, C, D we get D not in g
By line_unique_intersection_v1 on f, j, H, D we get D not in f
By line_unique_intersection_v1 on k, h, F, D we get D not in k
By line_unique_intersection_v1 on h, i, D, A we get A not in h
By line_unique_intersection_v1 on g, h, C, E we get E not in g
By line_unique_intersection_v1 on i, h, D, F we get F not in i
By line_unique_intersection_v1 on k, h, F, E we get E not in k
By line_unique_intersection_v1 on j, h, D, F we get F not in j
By line_unique_intersection_v1 on j, f, H, B we get B not in j
By line_unique_intersection_v1 on k, h, F, C we get C not in k
By line_unique_intersection_v1 on j, h, D, C we get C not in j
By line_unique_intersection_v1 on g, f, B, H we get H not in g
By line_unique_intersection_v1 on i, f, A, B we get B not in i
By line_unique_intersection_v1 on f, g, B, C we get C not in f
By line_unique_intersection_v1 on j, h, D, E we get E not in j
By line_unique_intersection_v1 on i, h, D, E we get E not in i
By line_unique_intersection_v1 on i, h, D, C we get C not in i
By line_unique_intersection_v1 on g, f, B, A we get A not in g
By line_unique_intersection_v1 on k, f, A, B we get B not in k
By line_unique_intersection_v1 on f, k, A, F we get F not in f
By line_unique_intersection_v1 on i, j, D, G we get G not in i
By line_unique_intersection_v1 on h, j, D, H we get H not in h
By parallel_line_definition on D, i, g we get i == parallel_line(D, g)
By parallel_line_definition on B, g, i we get g == parallel_line(B, i)
By parallel_line_definition on B, f, h we get f == parallel_line(B, h)
By parallel_line_definition on D, h, f we get h == parallel_line(D, f)
By parallel_line_definition on F, h, f we get h == parallel_line(F, f)
By parallel_line_definition on A, f, h we get f == parallel_line(A, h)
By parallel_line_definition on H, f, h we get f == parallel_line(H, h)
By parallel_line_definition on C, g, i we get g == parallel_line(C, i)
By parallel_line_definition on E, h, f we get h == parallel_line(E, f)
By different_points_v1 on B, C we get 0 != distance(B, C)
By different_points_v1 on A, B we get 0 != distance(A, B)
By different_points_v1 on F, A we get 0 != distance(A, F)
By in_imply_collinear on H, A, B we get collinear(A, B, H)
By in_imply_collinear on G, A, F we get collinear(A, F, G)
By in_imply_concyclic on C, B, A, E we get concyclic(A, B, C, E)
By double_perpendicular_and_parallel_v0_r on h, perpendicular_line(A, h), f we get perpendicular(f, perpendicular_line(A, h))
By not_in_line_equivalent_to_not_collinear_v0_r on B, F, A we get B not in Line(A, F)
By angle_bisector_draw_angle_v1 on C, D, A we get exists(Line(A, D), Line(C, D))
By not_in_line_equivalent_to_not_collinear_v0_r on H, C, B we get H not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, C we get D not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, A we get D not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on G, A, B we get G not in Line(A, B)
By angle_bisector_draw_angle_v1 on A, D, C we get exists(Line(A, D), Line(C, D))
By not_in_line_equivalent_to_not_collinear_v0_r on C, A, B we get C not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on G, C, B we get G not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on E, F, A we get E not in Line(A, F)
By not_in_line_equivalent_to_not_collinear_v0_r on F, A, B we get F not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on H, F, A we get H not in Line(A, F)
By not_in_line_equivalent_to_not_collinear_v0_r on C, F, A we get C not in Line(A, F)
By not_in_line_equivalent_to_not_collinear_v0_r on A, B, C we get A not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on E, A, B we get E not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on F, C, B we get F not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on E, C, B we get E not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on D, F, A we get D not in Line(A, F)
By power_of_a_point_in_circle on E, c we get 0 == power_of_a_point(E, c)
By power_of_a_point_on_circle on C, c we get 0 == power_of_a_point(C, c)
By power_of_a_point_on_circle on A, c we get 0 == power_of_a_point(A, c)
By power_of_a_point_on_circle on B, c we get 0 == power_of_a_point(B, c)
By angles_on_chord_v2 on C, A, E, B, c we get angle(C, E, A) == angle(C, B, A) + 180 mod 360
By angles_on_chord_v0 on B, A, E, C, c we get angle(B, C, A) == angle(B, E, A) mod 360
By angles_on_chord_v2 on B, E, C, A, c we get angle(B, C, E) == angle(B, A, E) + 180 mod 360
By angles_on_chord_v0 on A, E, C, B, c we get angle(A, B, E) == angle(A, C, E) mod 360
By angles_on_chord_v3 on A, C, E, B, c we get angle(A, E, C) == angle(A, B, C) + 180 mod 360
By angles_on_chord_v2 on E, B, A, C, c we get angle(E, A, B) == angle(E, C, B) + 180 mod 360
By angles_on_chord_v1 on B, C, E, A, c we get angle(B, A, C) == angle(B, E, C) mod 360
By angles_on_chord_v0 on E, C, A, B, c we get angle(E, A, C) == angle(E, B, C) mod 360
By angles_on_chord_v1 on C, E, B, A, c we get angle(C, A, E) == angle(C, B, E) mod 360
By angles_on_chord_v0 on C, B, A, E, c we get angle(C, A, B) == angle(C, E, B) mod 360
By angles_on_chord_v3 on E, B, C, A, c we get angle(E, C, B) == angle(E, A, B) + 180 mod 360
By angles_on_chord_v1 on A, B, C, E, c we get angle(A, C, B) == angle(A, E, B) mod 360
By angles_on_chord_v2 on A, C, B, E, c we get angle(A, B, C) == angle(A, E, C) + 180 mod 360
By angles_on_chord_v3 on C, A, B, E, c we get angle(C, B, A) == angle(C, E, A) + 180 mod 360
By angles_on_chord_v1 on E, A, C, B, c we get angle(E, B, A) == angle(E, C, A) mod 360
By angles_on_chord_v3 on B, E, A, C, c we get angle(B, A, E) == angle(B, C, E) + 180 mod 360
By angles_on_equal_chords_v0 on C, A, B, A, C, E, c we get angle(A, C, E) == angle(C, A, B) mod 360
By angles_on_equal_chords_v0 on A, C, E, C, E, B, c we get angle(A, C, E) == angle(C, E, B) mod 360
By angles_on_equal_chords_v0 on A, B, E, C, A, B, c we get angle(A, B, E) == angle(C, A, B) mod 360
By angles_on_equal_chords_v1 on E, C, A, B, E, C, c we get angle(B, E, C) == angle(E, C, A) mod 360
By angles_on_equal_chords_v0 on E, A, B, A, B, C, c we get angle(A, B, C) == angle(E, A, B) mod 360
By angles_on_equal_chords_v1 on B, E, C, E, B, A, c we get angle(B, E, C) == angle(E, B, A) mod 360
By angles_on_equal_chords_v0 on C, E, A, B, C, E, c we get angle(B, C, E) == angle(C, E, A) mod 360
By angles_on_equal_chords_v3 on A, E, C, E, A, B, c we get angle(A, E, C) == angle(E, A, B) + 180 mod 360
By angles_on_equal_chords_v1 on A, E, C, E, C, B, c we get angle(A, E, C) == angle(E, C, B) mod 360
By angles_on_equal_chords_v2 on A, B, C, E, C, B, c we get angle(A, B, C) == angle(E, C, B) + 180 mod 360
By angles_on_equal_chords_v1 on B, A, E, C, B, A, c we get angle(B, A, E) == angle(C, B, A) mod 360
By angles_on_equal_chords_v3 on B, A, E, C, E, A, c we get angle(B, A, E) == angle(C, E, A) + 180 mod 360
By angles_on_equal_chords_v0 on C, E, B, A, B, E, c we get angle(A, B, E) == angle(C, E, B) mod 360
By angles_on_equal_chords_v1 on B, A, C, E, C, A, c we get angle(B, A, C) == angle(E, C, A) mod 360
By angles_on_equal_chords_v3 on E, C, B, A, B, C, c we get angle(E, C, B) == angle(A, B, C) + 180 mod 360
By angles_on_equal_chords_v2 on E, A, B, A, E, C, c we get angle(E, A, B) == angle(A, E, C) + 180 mod 360
By angles_on_equal_chords_v3 on C, B, A, B, C, E, c we get angle(C, B, A) == angle(B, C, E) + 180 mod 360
By angles_on_equal_chords_v1 on E, B, A, B, A, C, c we get angle(B, A, C) == angle(E, B, A) mod 360
By angles_on_equal_chords_v2 on C, E, A, B, A, E, c we get angle(C, E, A) == angle(B, A, E) + 180 mod 360
By angles_on_equal_chords_v2 on B, C, E, C, B, A, c we get angle(B, C, E) == angle(C, B, A) + 180 mod 360
By perpendicular_line_definition on G, k, h we get k == perpendicular_line(G, h)
By perpendicular_line_definition on G, k, f we get k == perpendicular_line(G, f)
By perpendicular_line_definition on F, k, f we get k == perpendicular_line(F, f)
By perpendicular_line_definition on H, f, k we get f == perpendicular_line(H, k)
By perpendicular_line_definition on A, f, k we get f == perpendicular_line(A, k)
By perpendicular_line_definition on B, f, k we get f == perpendicular_line(B, k)
By perpendicular_line_definition on A, k, f we get k == perpendicular_line(A, f)
By projection_definition on E, F, k we get F == projection(E, k)
By projection_definition on D, F, k we get F == projection(D, k)
By projection_definition on C, F, k we get F == projection(C, k)
By different_points_v1 on D, F we get 0 != distance(D, F)
By different_points_v1 on F, G we get 0 != distance(F, G)
By different_points_v1 on G, A we get 0 != distance(A, G)
By different_points_v1 on E, B we get 0 != distance(B, E)
By different_points_v1 on A, H we get 0 != distance(A, H)
By different_points_v1 on E, D we get 0 != distance(D, E)
By different_points_v1 on C, A we get 0 != distance(A, C)
By different_points_v1 on G, D we get 0 != distance(D, G)
By same_angle_v3 on A, H, B, C we get angle(H, A, C) == angle(B, A, C) + 180 mod 360
By different_points_v1 on H, B we get 0 != distance(B, H)
By different_points_v1 on D, C we get 0 != distance(C, D)
By different_points_v1 on E, A we get 0 != distance(A, E)
By different_points_v1 on E, F we get 0 != distance(E, F)
By different_points_v1 on H, G we get 0 != distance(G, H)
By different_points_v1 on A, D we get 0 != distance(A, D)
By different_points_v1 on F, C we get 0 != distance(C, F)
By different_points_v1 on D, H we get 0 != distance(D, H)
By different_points_v1 on C, E we get 0 != distance(C, E)
By perpendicular_direction_conditions_v0_r on E, C, G, A we get 180 == 2 * direction(E, C) - 2 * direction(G, A) mod 360
By same_angle_v3 on A, H, B, E we get angle(H, A, E) == angle(B, A, E) + 180 mod 360
By perpendicular_direction_conditions_v0_r on A, G, E, C we get 180 == 2 * direction(A, G) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on F, A, A, B we get 180 == 2 * direction(F, A) - 2 * direction(A, B) mod 360
By in_imply_collinear on E, F, D we get collinear(D, E, F)
By perpendicular_direction_conditions_v0_r on A, B, A, F we get 180 == 2 * direction(A, B) - 2 * direction(A, F) mod 360
By same_angle_v0 on B, H, A, E we get angle(A, B, E) == angle(H, B, E) mod 360
By perpendicular_direction_conditions_v0_r on E, C, G, F we get 180 == 2 * direction(E, C) - 2 * direction(G, F) mod 360
By same_angle_v0 on B, H, A, C we get angle(A, B, C) == angle(H, B, C) mod 360
By perpendicular_direction_conditions_v0_r on G, A, E, C we get 180 == 2 * direction(G, A) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on G, F, A, B we get 180 == 2 * direction(G, F) - 2 * direction(A, B) mod 360
By projection_definition on G, F, h we get F == projection(G, h)
By perpendicular_direction_conditions_v0_r on G, A, C, E we get 180 == 2 * direction(G, A) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on B, A, G, A we get 180 == 2 * direction(B, A) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on G, A, B, A we get 180 == 2 * direction(G, A) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on A, F, C, E we get 180 == 2 * direction(A, F) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on A, G, C, E we get 180 == 2 * direction(A, G) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on F, A, C, E we get 180 == 2 * direction(F, A) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on G, F, C, E we get 180 == 2 * direction(G, F) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on F, G, C, E we get 180 == 2 * direction(F, G) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on G, A, A, B we get 180 == 2 * direction(G, A) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on C, E, A, G we get 180 == 2 * direction(C, E) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on B, A, A, G we get 180 == 2 * direction(B, A) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on A, B, G, F we get 180 == 2 * direction(A, B) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on G, F, E, C we get 180 == 2 * direction(G, F) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on A, B, G, A we get 180 == 2 * direction(A, B) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on F, G, E, C we get 180 == 2 * direction(F, G) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on A, G, A, B we get 180 == 2 * direction(A, G) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on B, A, G, F we get 180 == 2 * direction(B, A) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on A, F, A, B we get 180 == 2 * direction(A, F) - 2 * direction(A, B) mod 360
By probably_between_and_collinear_implies_between on B, A, H we get between(B, A, H)
By perpendicular_direction_conditions_v0_r on E, C, A, G we get 180 == 2 * direction(E, C) - 2 * direction(A, G) mod 360
By probably_between_and_collinear_implies_between on F, G, A we get between(A, G, F)
By perpendicular_direction_conditions_v0_r on A, F, E, C we get 180 == 2 * direction(A, F) - 2 * direction(E, C) mod 360
By projection_definition on G, A, f we get A == projection(G, f)
By projection_definition on H, A, k we get A == projection(H, k)
By perpendicular_direction_conditions_v0_r on A, B, F, G we get 180 == 2 * direction(A, B) - 2 * direction(F, G) mod 360
By projection_definition on F, A, f we get A == projection(F, f)
By perpendicular_direction_conditions_v0_r on F, G, A, B we get 180 == 2 * direction(F, G) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on C, E, G, A we get 180 == 2 * direction(C, E) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on A, B, F, A we get 180 == 2 * direction(A, B) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on A, B, A, G we get 180 == 2 * direction(A, B) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on E, C, A, F we get 180 == 2 * direction(E, C) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on E, C, F, A we get 180 == 2 * direction(E, C) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on F, A, B, A we get 180 == 2 * direction(F, A) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on A, G, B, A we get 180 == 2 * direction(A, G) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on G, F, B, A we get 180 == 2 * direction(G, F) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on A, F, B, A we get 180 == 2 * direction(A, F) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on E, C, F, G we get 180 == 2 * direction(E, C) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on B, A, A, F we get 180 == 2 * direction(B, A) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on F, A, E, C we get 180 == 2 * direction(F, A) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on B, A, F, A we get 180 == 2 * direction(B, A) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on C, E, F, A we get 180 == 2 * direction(C, E) - 2 * direction(F, A) mod 360
By projection_definition on B, A, k we get A == projection(B, k)
By perpendicular_direction_conditions_v0_r on F, G, B, A we get 180 == 2 * direction(F, G) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on B, A, F, G we get 180 == 2 * direction(B, A) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on C, E, G, F we get 180 == 2 * direction(C, E) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on C, E, F, G we get 180 == 2 * direction(C, E) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on C, E, A, F we get 180 == 2 * direction(C, E) - 2 * direction(A, F) mod 360
By in_imply_collinear on D, H, G we get collinear(D, G, H)
By in_imply_collinear on D, E, C we get collinear(C, D, E)
By in_imply_collinear on C, F, E we get collinear(C, E, F)
By in_imply_collinear on D, F, C we get collinear(C, D, F)
By isosceles_trapezoids_are_concyclic_v1 on C, E, B, A we get isosceles_trapezoid(B, A, C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on D, A, C we get D not in Line(A, C)
By isosceles_trapezoids_are_concyclic_v1 on C, E, A, B we get isosceles_trapezoid(A, B, C, E)
By line_circle_intersection_has_at_most_two_points_0 on A, B, H, c we get H not in c
By line_inequality on Line(A, C), j, A we get j != Line(A, C)
By isosceles_trapezoids_are_concyclic_v1 on A, B, C, E we get isosceles_trapezoid(A, B, C, E)
By isosceles_trapezoids_are_concyclic_v1 on A, B, E, C we get isosceles_trapezoid(A, B, E, C)
By isosceles_trapezoids_are_concyclic_v1 on E, C, A, B we get isosceles_trapezoid(A, B, E, C)
By reverse_direction on A, C we get 180 == direction(A, C) - direction(C, A) mod 360
By line_inequality on Line(B, E), h, B we get h != Line(B, E)
By isosceles_trapezoids_are_concyclic_v1 on B, A, C, E we get isosceles_trapezoid(B, A, C, E)
By reverse_direction on A, B we get 180 == direction(A, B) - direction(B, A) mod 360
By reverse_direction on A, E we get 180 == direction(A, E) - direction(E, A) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on H, E, A we get H not in Line(A, E)
By isosceles_trapezoids_are_concyclic_v1 on E, C, B, A we get isosceles_trapezoid(B, A, E, C)
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, B we get G not in Line(B, E)
By reverse_direction on E, C we get 180 == direction(E, C) - direction(C, E) mod 360
By reverse_direction on E, A we get 180 == direction(E, A) - direction(A, E) mod 360
By reverse_direction on E, B we get 180 == direction(E, B) - direction(B, E) mod 360
By reverse_direction on B, A we get 180 == direction(B, A) - direction(A, B) mod 360
By reverse_direction on C, E we get 180 == direction(C, E) - direction(E, C) mod 360
By reverse_direction on C, A we get 180 == direction(C, A) - direction(A, C) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on A, E, B we get A not in Line(B, E)
By reverse_direction on C, B we get 180 == direction(C, B) - direction(B, C) mod 360
By reverse_direction on B, C we get 180 == direction(B, C) - direction(C, B) mod 360
By isosceles_trapezoids_are_concyclic_v1 on B, A, E, C we get isosceles_trapezoid(B, A, E, C)
By reverse_direction on B, E we get 180 == direction(B, E) - direction(E, B) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, E we get F not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, E we get D not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on H, C, A we get H not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, B we get C not in Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on C, A, E we get C not in Line(A, E)
By line_inequality on Line(A, E), j, E we get j != Line(A, E)
By line_inequality on Line(B, E), i, B we get i != Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on F, A, E we get F not in Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on G, A, E we get G not in Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on E, C, A we get E not in Line(A, C)
By line_inequality on Line(A, E), i, E we get i != Line(A, E)
By line_inequality on Line(A, C), f, C we get f != Line(A, C)
By line_inequality on Line(A, C), i, C we get i != Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on D, A, E we get D not in Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on H, E, B we get H not in Line(B, E)
By line_inequality on Line(A, E), k, E we get k != Line(A, E)
By line_inequality on Line(B, E), g, E we get g != Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on B, E, A we get B not in Line(A, E)
By line_inequality on Line(A, E), g, A we get g != Line(A, E)
By line_inequality on Line(A, C), k, C we get k != Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on G, A, C we get G not in Line(A, C)
By line_inequality on Line(A, E), f, E we get f != Line(A, E)
By line_inequality on Line(B, E), j, E we get j != Line(B, E)
By line_inequality on Line(A, E), h, A we get h != Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on B, A, C we get B not in Line(A, C)
By line_inequality on Line(B, E), k, E we get k != Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on F, A, C we get F not in Line(A, C)
By line_inequality on Line(A, C), h, A we get h != Line(A, C)
By line_inequality on Line(A, C), g, A we get g != Line(A, C)
By line_inequality on Line(B, E), f, E we get f != Line(B, E)
By perpendicular_direction_conditions_v0_r on F, A, D, C we get 180 == 2 * direction(F, A) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on A, G, D, C we get 180 == 2 * direction(A, G) - 2 * direction(D, C) mod 360
By same_angle_v0 on A, G, F, B we get angle(F, A, B) == angle(G, A, B) mod 360
By perpendicular_direction_conditions_v0_r on C, F, F, G we get 180 == 2 * direction(C, F) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on D, F, A, F we get 180 == 2 * direction(D, F) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on E, D, F, G we get 180 == 2 * direction(E, D) - 2 * direction(F, G) mod 360
By same_angle_v0 on A, G, F, C we get angle(F, A, C) == angle(G, A, C) mod 360
By perpendicular_direction_conditions_v0_r on G, A, D, C we get 180 == 2 * direction(G, A) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on H, B, G, A we get 180 == 2 * direction(H, B) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on A, F, A, H we get 180 == 2 * direction(A, F) - 2 * direction(A, H) mod 360
By perpendicular_direction_conditions_v0_r on A, F, H, B we get 180 == 2 * direction(A, F) - 2 * direction(H, B) mod 360
By perpendicular_direction_conditions_v0_r on G, F, C, D we get 180 == 2 * direction(G, F) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on G, F, F, C we get 180 == 2 * direction(G, F) - 2 * direction(F, C) mod 360
By same_angle_v3 on A, H, B, G we get angle(H, A, G) == angle(B, A, G) + 180 mod 360
By perpendicular_direction_conditions_v0_r on A, F, D, E we get 180 == 2 * direction(A, F) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on A, F, D, F we get 180 == 2 * direction(A, F) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on F, G, C, D we get 180 == 2 * direction(F, G) - 2 * direction(C, D) mod 360
By same_angle_v2 on A, H, B, F we get angle(H, A, F) == angle(B, A, F) + 180 mod 360
By perpendicular_direction_conditions_v0_r on A, F, F, C we get 180 == 2 * direction(A, F) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on H, A, A, G we get 180 == 2 * direction(H, A) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on F, E, A, G we get 180 == 2 * direction(F, E) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on H, A, F, A we get 180 == 2 * direction(H, A) - 2 * direction(F, A) mod 360
By same_angle_v1 on A, G, F, E we get angle(F, A, E) == angle(G, A, E) mod 360
By perpendicular_direction_conditions_v0_r on G, A, H, A we get 180 == 2 * direction(G, A) - 2 * direction(H, A) mod 360
By perpendicular_direction_conditions_v0_r on A, G, A, H we get 180 == 2 * direction(A, G) - 2 * direction(A, H) mod 360
By perpendicular_direction_conditions_v0_r on F, G, A, H we get 180 == 2 * direction(F, G) - 2 * direction(A, H) mod 360
By perpendicular_direction_conditions_v0_r on E, F, G, A we get 180 == 2 * direction(E, F) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on G, F, D, E we get 180 == 2 * direction(G, F) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on C, D, G, F we get 180 == 2 * direction(C, D) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on G, A, C, F we get 180 == 2 * direction(G, A) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on G, F, A, H we get 180 == 2 * direction(G, F) - 2 * direction(A, H) mod 360
By perpendicular_direction_conditions_v0_r on F, E, F, G we get 180 == 2 * direction(F, E) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on F, G, H, B we get 180 == 2 * direction(F, G) - 2 * direction(H, B) mod 360
By perpendicular_direction_conditions_v0_r on A, G, D, E we get 180 == 2 * direction(A, G) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on F, A, F, C we get 180 == 2 * direction(F, A) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on H, A, G, A we get 180 == 2 * direction(H, A) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on E, F, F, A we get 180 == 2 * direction(E, F) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on D, F, F, G we get 180 == 2 * direction(D, F) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on D, F, G, F we get 180 == 2 * direction(D, F) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on F, E, F, A we get 180 == 2 * direction(F, E) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on A, G, E, F we get 180 == 2 * direction(A, G) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on F, C, A, F we get 180 == 2 * direction(F, C) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on A, G, F, D we get 180 == 2 * direction(A, G) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on B, H, G, F we get 180 == 2 * direction(B, H) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on G, A, H, B we get 180 == 2 * direction(G, A) - 2 * direction(H, B) mod 360
By perpendicular_direction_conditions_v0_r on B, H, F, A we get 180 == 2 * direction(B, H) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on F, C, G, F we get 180 == 2 * direction(F, C) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on A, H, F, A we get 180 == 2 * direction(A, H) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on F, G, D, F we get 180 == 2 * direction(F, G) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on G, F, H, A we get 180 == 2 * direction(G, F) - 2 * direction(H, A) mod 360
By perpendicular_direction_conditions_v0_r on F, D, G, F we get 180 == 2 * direction(F, D) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on G, A, E, F we get 180 == 2 * direction(G, A) - 2 * direction(E, F) mod 360
By same_angle_v3 on A, H, B, D we get angle(H, A, D) == angle(B, A, D) + 180 mod 360
By perpendicular_direction_conditions_v0_r on G, F, D, F we get 180 == 2 * direction(G, F) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on E, F, G, F we get 180 == 2 * direction(E, F) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on D, E, G, F we get 180 == 2 * direction(D, E) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on F, D, G, A we get 180 == 2 * direction(F, D) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on A, G, B, H we get 180 == 2 * direction(A, G) - 2 * direction(B, H) mod 360
By perpendicular_direction_conditions_v0_r on B, H, A, F we get 180 == 2 * direction(B, H) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on G, F, H, B we get 180 == 2 * direction(G, F) - 2 * direction(H, B) mod 360
By perpendicular_direction_conditions_v0_r on F, G, E, D we get 180 == 2 * direction(F, G) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on H, B, F, G we get 180 == 2 * direction(H, B) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on F, A, F, E we get 180 == 2 * direction(F, A) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on A, H, A, G we get 180 == 2 * direction(A, H) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on G, F, E, D we get 180 == 2 * direction(G, F) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on A, F, C, D we get 180 == 2 * direction(A, F) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on F, G, B, H we get 180 == 2 * direction(F, G) - 2 * direction(B, H) mod 360
By perpendicular_direction_conditions_v0_r on D, F, F, A we get 180 == 2 * direction(D, F) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on G, F, C, F we get 180 == 2 * direction(G, F) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on D, E, F, G we get 180 == 2 * direction(D, E) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on C, D, A, G we get 180 == 2 * direction(C, D) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on D, F, G, A we get 180 == 2 * direction(D, F) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on G, A, A, H we get 180 == 2 * direction(G, A) - 2 * direction(A, H) mod 360
By perpendicular_direction_conditions_v0_r on F, D, A, F we get 180 == 2 * direction(F, D) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on E, D, G, F we get 180 == 2 * direction(E, D) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on G, A, B, H we get 180 == 2 * direction(G, A) - 2 * direction(B, H) mod 360
By perpendicular_direction_conditions_v0_r on F, C, A, G we get 180 == 2 * direction(F, C) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on F, A, A, H we get 180 == 2 * direction(F, A) - 2 * direction(A, H) mod 360
By perpendicular_direction_conditions_v0_r on D, C, A, G we get 180 == 2 * direction(D, C) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on G, A, D, E we get 180 == 2 * direction(G, A) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on A, H, G, A we get 180 == 2 * direction(A, H) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on H, A, A, F we get 180 == 2 * direction(H, A) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on E, F, F, G we get 180 == 2 * direction(E, F) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on E, D, G, A we get 180 == 2 * direction(E, D) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on F, D, F, A we get 180 == 2 * direction(F, D) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on D, E, F, A we get 180 == 2 * direction(D, E) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on F, A, D, E we get 180 == 2 * direction(F, A) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on G, F, F, D we get 180 == 2 * direction(G, F) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on F, C, F, G we get 180 == 2 * direction(F, C) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on D, C, F, G we get 180 == 2 * direction(D, C) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on C, F, A, F we get 180 == 2 * direction(C, F) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on G, F, B, H we get 180 == 2 * direction(G, F) - 2 * direction(B, H) mod 360
By perpendicular_direction_conditions_v0_r on B, H, A, G we get 180 == 2 * direction(B, H) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on A, F, F, D we get 180 == 2 * direction(A, F) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on E, D, A, G we get 180 == 2 * direction(E, D) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on A, F, B, H we get 180 == 2 * direction(A, F) - 2 * direction(B, H) mod 360
By perpendicular_direction_conditions_v0_r on H, B, A, F we get 180 == 2 * direction(H, B) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on A, F, F, E we get 180 == 2 * direction(A, F) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on A, H, G, F we get 180 == 2 * direction(A, H) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on A, G, C, D we get 180 == 2 * direction(A, G) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on D, C, G, F we get 180 == 2 * direction(D, C) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on F, G, F, C we get 180 == 2 * direction(F, G) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on E, F, A, G we get 180 == 2 * direction(E, F) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on H, A, G, F we get 180 == 2 * direction(H, A) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on F, G, C, F we get 180 == 2 * direction(F, G) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on G, A, C, D we get 180 == 2 * direction(G, A) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on D, E, A, G we get 180 == 2 * direction(D, E) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on F, A, C, D we get 180 == 2 * direction(F, A) - 2 * direction(C, D) mod 360
By perpendicular_direction_conditions_v0_r on A, G, H, A we get 180 == 2 * direction(A, G) - 2 * direction(H, A) mod 360
By perpendicular_direction_conditions_v0_r on G, A, D, F we get 180 == 2 * direction(G, A) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on A, F, H, A we get 180 == 2 * direction(A, F) - 2 * direction(H, A) mod 360
By perpendicular_direction_conditions_v0_r on F, G, F, D we get 180 == 2 * direction(F, G) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on D, C, F, A we get 180 == 2 * direction(D, C) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on G, F, E, F we get 180 == 2 * direction(G, F) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on A, F, E, D we get 180 == 2 * direction(A, F) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on H, B, A, G we get 180 == 2 * direction(H, B) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on F, A, H, A we get 180 == 2 * direction(F, A) - 2 * direction(H, A) mod 360
By perpendicular_direction_conditions_v0_r on F, A, F, D we get 180 == 2 * direction(F, A) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on C, D, A, F we get 180 == 2 * direction(C, D) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on E, D, F, A we get 180 == 2 * direction(E, D) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on F, G, D, C we get 180 == 2 * direction(F, G) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on D, C, G, A we get 180 == 2 * direction(D, C) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on G, A, F, D we get 180 == 2 * direction(G, A) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on H, A, F, G we get 180 == 2 * direction(H, A) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on F, C, G, A we get 180 == 2 * direction(F, C) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on E, F, A, F we get 180 == 2 * direction(E, F) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on B, H, F, G we get 180 == 2 * direction(B, H) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on A, H, A, F we get 180 == 2 * direction(A, H) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on F, A, E, F we get 180 == 2 * direction(F, A) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on A, G, C, F we get 180 == 2 * direction(A, G) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on C, D, F, G we get 180 == 2 * direction(C, D) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on A, H, F, G we get 180 == 2 * direction(A, H) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on H, B, F, A we get 180 == 2 * direction(H, B) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on F, C, F, A we get 180 == 2 * direction(F, C) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on A, F, E, F we get 180 == 2 * direction(A, F) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on G, A, F, E we get 180 == 2 * direction(G, A) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on F, A, H, B we get 180 == 2 * direction(F, A) - 2 * direction(H, B) mod 360
By perpendicular_direction_conditions_v0_r on D, E, A, F we get 180 == 2 * direction(D, E) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on A, G, D, F we get 180 == 2 * direction(A, G) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on D, E, G, A we get 180 == 2 * direction(D, E) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on A, G, F, C we get 180 == 2 * direction(A, G) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on A, F, C, F we get 180 == 2 * direction(A, F) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on C, F, A, G we get 180 == 2 * direction(C, F) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on F, E, G, A we get 180 == 2 * direction(F, E) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on A, G, F, E we get 180 == 2 * direction(A, G) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on F, G, E, F we get 180 == 2 * direction(F, G) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on E, D, A, F we get 180 == 2 * direction(E, D) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on F, D, F, G we get 180 == 2 * direction(F, D) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on G, F, F, E we get 180 == 2 * direction(G, F) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on H, B, G, F we get 180 == 2 * direction(H, B) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on C, D, F, A we get 180 == 2 * direction(C, D) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on F, D, A, G we get 180 == 2 * direction(F, D) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on G, A, F, C we get 180 == 2 * direction(G, A) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on F, G, F, E we get 180 == 2 * direction(F, G) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on C, F, G, F we get 180 == 2 * direction(C, F) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on F, E, G, F we get 180 == 2 * direction(F, E) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on F, G, H, A we get 180 == 2 * direction(F, G) - 2 * direction(H, A) mod 360
By perpendicular_direction_conditions_v0_r on F, A, C, F we get 180 == 2 * direction(F, A) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on G, A, E, D we get 180 == 2 * direction(G, A) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on G, F, D, C we get 180 == 2 * direction(G, F) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on C, F, F, A we get 180 == 2 * direction(C, F) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on F, A, D, F we get 180 == 2 * direction(F, A) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on A, G, H, B we get 180 == 2 * direction(A, G) - 2 * direction(H, B) mod 360
By perpendicular_direction_conditions_v0_r on A, G, E, D we get 180 == 2 * direction(A, G) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on F, A, E, D we get 180 == 2 * direction(F, A) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on D, C, A, F we get 180 == 2 * direction(D, C) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on A, F, D, C we get 180 == 2 * direction(A, F) - 2 * direction(D, C) mod 360
By perpendicular_direction_conditions_v0_r on C, D, G, A we get 180 == 2 * direction(C, D) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on F, A, B, H we get 180 == 2 * direction(F, A) - 2 * direction(B, H) mod 360
By perpendicular_direction_conditions_v0_r on C, F, G, A we get 180 == 2 * direction(C, F) - 2 * direction(G, A) mod 360
By perpendicular_direction_conditions_v0_r on F, E, A, F we get 180 == 2 * direction(F, E) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on F, G, D, E we get 180 == 2 * direction(F, G) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on D, F, A, G we get 180 == 2 * direction(D, F) - 2 * direction(A, G) mod 360
By perpendicular_direction_conditions_v0_r on B, H, G, A we get 180 == 2 * direction(B, H) - 2 * direction(G, A) mod 360
By perpendicular_angle_conditions_v0 on B, A, F we get angle(B, A, F) == orientation(A, F, B) mod 360
By parallel_line_angles_reverse_v0 on H, A, E, C we get angle(C, E, A) == angle(H, A, E) mod 360
By parallel_line_angles_reverse_v0 on A, B, E, D we get angle(A, B, E) == angle(D, E, B) mod 360
By parallel_line_angles_reverse_v3 on B, A, E, F we get angle(B, A, E) == angle(F, E, A) + 180 mod 360
By parallel_line_angles_reverse_v0 on A, B, E, F we get angle(A, B, E) == angle(F, E, B) mod 360
By parallel_line_angles_reverse_v2 on F, E, A, B we get angle(F, E, A) == angle(B, A, E) + 180 mod 360
By parallel_line_angles_reverse_v3 on D, C, B, A we get angle(D, C, B) == angle(A, B, C) + 180 mod 360
By parallel_line_angles_reverse_v2 on H, A, C, E we get angle(H, A, C) == angle(E, C, A) + 180 mod 360
By parallel_line_angles_reverse_v3 on F, C, B, A we get angle(F, C, B) == angle(A, B, C) + 180 mod 360
By parallel_line_angles_reverse_v1 on B, A, C, F we get angle(B, A, C) == angle(F, C, A) mod 360
By parallel_line_angles_reverse_v2 on A, B, C, D we get angle(A, B, C) == angle(D, C, B) + 180 mod 360
By parallel_line_angles_reverse_v0 on D, A, C, B we get angle(B, C, A) == angle(D, A, C) mod 360
By collinear_definition on A, H, B we get H in Line(A, B), B in Line(A, H), Line(A, B) == Line(A, H), 0 == 2 * angle(H, A, B) mod 360
By parallel_line_angles_reverse_v3 on E, C, B, H we get angle(E, C, B) == angle(H, B, C) + 180 mod 360
By collinear_definition on B, A, H we get A in Line(B, H), H in Line(A, B), Line(A, B) == Line(B, H), 0 == 2 * angle(A, B, H) mod 360
By parallel_line_angles_reverse_v1 on D, C, A, B we get angle(B, A, C) == angle(D, C, A) mod 360
By parallel_line_angles_reverse_v0 on C, E, B, H we get angle(C, E, B) == angle(H, B, E) mod 360
By perpendicular_angle_conditions_v0 on B, A, G we get angle(B, A, G) == orientation(A, G, B) mod 360
By perpendicular_angle_conditions_v0 on F, A, B we get angle(F, A, B) == orientation(A, B, F) mod 360
By parallel_line_angles_reverse_v2 on D, A, B, C we get angle(D, A, B) == angle(C, B, A) + 180 mod 360
By parallel_line_angles_reverse_v2 on H, B, C, E we get angle(H, B, C) == angle(E, C, B) + 180 mod 360
By parallel_line_angles_reverse_v3 on C, B, A, D we get angle(C, B, A) == angle(D, A, B) + 180 mod 360
By parallel_line_angles_reverse_v2 on A, B, C, F we get angle(A, B, C) == angle(F, C, B) + 180 mod 360
By parallel_line_angles_reverse_v2 on D, E, A, B we get angle(D, E, A) == angle(B, A, E) + 180 mod 360
By collinear_definition on A, B, H we get B in Line(A, H), H in Line(A, B), Line(A, B) == Line(A, H), 0 == 2 * angle(B, A, H) mod 360
By parallel_line_angles_reverse_v3 on B, A, E, D we get angle(B, A, E) == angle(D, E, A) + 180 mod 360
By perpendicular_angle_conditions_v0 on G, A, B we get angle(G, A, B) == orientation(A, B, G) mod 360
By parallel_line_angles_reverse_v3 on E, C, A, H we get angle(E, C, A) == angle(H, A, C) + 180 mod 360
By collinear_definition on B, H, A we get H in Line(A, B), A in Line(B, H), Line(A, B) == Line(B, H), 0 == 2 * angle(H, B, A) mod 360
By same_angle_v0 on A, F, G, D we get angle(F, A, D) == angle(G, A, D) mod 360
By same_angle_v1 on A, G, F, H we get angle(F, A, H) == angle(G, A, H) mod 360
By same_angle_v1 on H, B, A, D we get angle(A, H, D) == angle(B, H, D) mod 360
By same_angle_v0 on F, A, G, E we get angle(A, F, E) == angle(G, F, E) mod 360
By same_angle_v3 on G, F, A, D we get angle(F, G, D) == angle(A, G, D) + 180 mod 360
By same_angle_v1 on F, G, A, C we get angle(A, F, C) == angle(G, F, C) mod 360
By same_angle_v3 on G, A, F, H we get angle(A, G, H) == angle(F, G, H) + 180 mod 360
By same_angle_v1 on F, G, A, D we get angle(A, F, D) == angle(G, F, D) mod 360
By same_angle_v1 on H, A, B, G we get angle(A, H, G) == angle(B, H, G) mod 360
By altitude_definition on F, B, H, k we get k == altitude(F, B, H)
By altitude_definition on H, F, G, f we get f == altitude(H, F, G)
By parallel_line_angles_reverse_v0 on H, A, E, F we get angle(F, E, A) == angle(H, A, E) mod 360
By altitude_definition on G, E, D, k we get k == altitude(G, D, E)
By parallel_line_angles_reverse_v0 on H, B, E, F we get angle(F, E, B) == angle(H, B, E) mod 360
By parallel_line_angles_reverse_v2 on H, B, C, F we get angle(H, B, C) == angle(F, C, B) + 180 mod 360
By perpendicular_angle_conditions_v0 on D, F, A we get angle(D, F, A) == orientation(A, D, F) mod 360
By altitude_definition on E, F, A, h we get h == altitude(E, A, F)
By parallel_line_angles_reverse_v0 on H, A, E, D we get angle(D, E, A) == angle(H, A, E) mod 360
By altitude_definition on A, E, D, k we get k == altitude(A, D, E)
By parallel_line_angles_reverse_v3 on D, C, B, H we get angle(D, C, B) == angle(H, B, C) + 180 mod 360
By parallel_line_angles_reverse_v2 on H, B, C, D we get angle(H, B, C) == angle(D, C, B) + 180 mod 360
By altitude_definition on G, H, A, k we get k == altitude(G, A, H)
By parallel_line_angles_reverse_v0 on H, B, E, D we get angle(D, E, B) == angle(H, B, E) mod 360
By perpendicular_angle_conditions_v0 on C, F, G we get angle(C, F, G) == orientation(C, F, G) mod 360
By altitude_definition on G, D, C, k we get k == altitude(G, C, D)
By parallel_line_angles_reverse_v3 on F, C, A, H we get angle(F, C, A) == angle(H, A, C) + 180 mod 360
By altitude_definition on H, A, G, f we get f == altitude(H, A, G)
By altitude_definition on G, D, F, k we get k == altitude(G, D, F)
By parallel_line_angles_reverse_v3 on F, C, B, H we get angle(F, C, B) == angle(H, B, C) + 180 mod 360
By altitude_definition on A, D, F, k we get k == altitude(A, D, F)
By altitude_definition on B, G, A, f we get f == altitude(B, A, G)
By collinear_definition on A, G, F we get G in Line(A, F), F in Line(A, G), Line(A, F) == Line(A, G), 0 == 2 * angle(G, A, F) mod 360
By altitude_definition on C, A, G, h we get h == altitude(C, A, G)
By altitude_definition on D, G, A, h we get h == altitude(D, A, G)
By altitude_definition on E, F, G, h we get h == altitude(E, F, G)
By perpendicular_angle_conditions_v0 on A, F, D we get angle(A, F, D) == orientation(A, F, D) mod 360
By perpendicular_angle_conditions_v0 on G, F, E we get angle(G, F, E) == orientation(E, G, F) mod 360
By altitude_definition on A, E, F, k we get k == altitude(A, E, F)
By altitude_definition on A, D, C, k we get k == altitude(A, C, D)
By parallel_line_angles_reverse_v2 on H, A, C, D we get angle(H, A, C) == angle(D, C, A) + 180 mod 360
By perpendicular_angle_conditions_v0 on D, F, G we get angle(D, F, G) == orientation(D, F, G) mod 360
By altitude_definition on G, C, E, k we get k == altitude(G, C, E)
By perpendicular_angle_conditions_v0 on G, F, D we get angle(G, F, D) == orientation(D, G, F) mod 360
By parallel_line_angles_reverse_v3 on D, C, A, H we get angle(D, C, A) == angle(H, A, C) + 180 mod 360
By altitude_definition on E, G, A, h we get h == altitude(E, A, G)
By perpendicular_angle_conditions_v0 on C, F, A we get angle(C, F, A) == orientation(A, C, F) mod 360
By altitude_definition on B, F, A, f we get f == altitude(B, A, F)
By altitude_definition on A, F, C, k we get k == altitude(A, C, F)
By altitude_definition on B, G, F, f we get f == altitude(B, F, G)
By collinear_definition on F, G, A we get G in Line(A, F), A in Line(F, G), Line(A, F) == Line(F, G), 0 == 2 * angle(G, F, A) mod 360
By altitude_definition on G, F, E, k we get k == altitude(G, E, F)
By altitude_definition on H, F, A, f we get f == altitude(H, A, F)
By altitude_definition on F, H, A, k we get k == altitude(F, A, H)
By perpendicular_angle_conditions_v0 on H, A, F we get angle(H, A, F) == orientation(A, F, H) mod 360
By altitude_definition on C, F, A, h we get h == altitude(C, A, F)
By altitude_definition on G, H, B, k we get k == altitude(G, B, H)
By altitude_definition on C, G, F, h we get h == altitude(C, F, G)
By parallel_line_angles_reverse_v2 on H, A, C, F we get angle(H, A, C) == angle(F, C, A) + 180 mod 360
By altitude_definition on G, A, B, k we get k == altitude(G, A, B)
By collinear_definition on F, A, G we get A in Line(F, G), G in Line(A, F), Line(A, F) == Line(F, G), 0 == 2 * angle(A, F, G) mod 360
By altitude_definition on A, C, E, k we get k == altitude(A, C, E)
By altitude_definition on D, G, F, h we get h == altitude(D, F, G)
By perpendicular_angle_conditions_v0 on A, F, E we get angle(A, F, E) == orientation(A, F, E) mod 360
By perpendicular_angle_conditions_v0 on G, F, C we get angle(G, F, C) == orientation(C, G, F) mod 360
By altitude_definition on F, A, B, k we get k == altitude(F, A, B)
By perpendicular_angle_conditions_v0 on E, F, A we get angle(E, F, A) == orientation(A, E, F) mod 360
By perpendicular_angle_conditions_v0 on A, F, C we get angle(A, F, C) == orientation(A, F, C) mod 360
By collinear_definition on H, B, A we get B in Line(A, H), A in Line(B, H), Line(A, H) == Line(B, H), 0 == 2 * angle(B, H, A) mod 360
By altitude_definition on D, A, F, h we get h == altitude(D, A, F)
By perpendicular_angle_conditions_v0 on H, A, G we get angle(H, A, G) == orientation(A, G, H) mod 360
By altitude_definition on G, F, C, k we get k == altitude(G, C, F)
By collinear_definition on H, A, B we get A in Line(B, H), B in Line(A, H), Line(A, H) == Line(B, H), 0 == 2 * angle(A, H, B) mod 360
By collinear_definition on G, F, A we get F in Line(A, G), A in Line(F, G), Line(A, G) == Line(F, G), 0 == 2 * angle(F, G, A) mod 360
By perpendicular_angle_conditions_v0 on E, F, G we get angle(E, F, G) == orientation(E, F, G) mod 360
By collinear_definition on G, A, F we get A in Line(F, G), F in Line(A, G), Line(A, G) == Line(F, G), 0 == 2 * angle(A, G, F) mod 360
By collinear_definition on A, F, G we get F in Line(A, G), G in Line(A, F), Line(A, F) == Line(A, G), 0 == 2 * angle(F, A, G) mod 360
By perpendicular_angle_conditions_v0 on F, A, H we get angle(F, A, H) == orientation(A, H, F) mod 360
By perpendicular_angle_conditions_v0 on G, A, H we get angle(G, A, H) == orientation(A, H, G) mod 360
By parallel_line_angles_reverse_v2 on B, C, D, A we get angle(B, C, D) == angle(A, D, C) + 180 mod 360
By parallel_line_angles_reverse_v1 on B, A, F, E we get angle(B, A, F) == angle(E, F, A) mod 360
By parallel_line_angles_reverse_v1 on E, D, A, B we get angle(B, A, D) == angle(E, D, A) mod 360
By parallel_line_angles_reverse_v3 on A, D, C, B we get angle(A, D, C) == angle(B, C, D) + 180 mod 360
By parallel_line_angles_reverse_v3 on B, A, F, D we get angle(B, A, F) == angle(D, F, A) + 180 mod 360
By parallel_line_angles_reverse_v3 on B, A, D, C we get angle(B, A, D) == angle(C, D, A) + 180 mod 360
By parallel_line_angles_reverse_v2 on D, F, A, B we get angle(D, F, A) == angle(B, A, F) + 180 mod 360
By parallel_line_angles_reverse_v2 on C, F, A, B we get angle(C, F, A) == angle(B, A, F) + 180 mod 360
By parallel_line_angles_reverse_v3 on B, A, F, C we get angle(B, A, F) == angle(C, F, A) + 180 mod 360
By parallel_line_angles_reverse_v2 on C, D, A, B we get angle(C, D, A) == angle(B, A, D) + 180 mod 360
By parallel_line_angles_reverse_v1 on B, A, D, F we get angle(B, A, D) == angle(F, D, A) mod 360
By external_angle_bisector_definition_v0 on C, H, A, D we get 180 == angle(C, D, H) + angle(A, D, H) mod 360
By external_angle_bisector_definition_v0 on A, G, C, D we get 180 == angle(A, D, G) + angle(C, D, G) mod 360
By parallel_line_angles_reverse_v1 on F, D, H, B we get angle(B, H, D) == angle(F, D, H) mod 360
By parallel_line_angles_reverse_v2 on C, D, H, B we get angle(C, D, H) == angle(B, H, D) + 180 mod 360
By parallel_line_angles_reverse_v1 on E, D, H, A we get angle(A, H, D) == angle(E, D, H) mod 360
By parallel_line_angles_reverse_v1 on E, D, H, B we get angle(B, H, D) == angle(E, D, H) mod 360
By parallel_line_angles_reverse_v0 on H, A, F, D we get angle(D, F, A) == angle(H, A, F) mod 360
By parallel_line_angles_reverse_v2 on H, A, F, E we get angle(H, A, F) == angle(E, F, A) + 180 mod 360
By parallel_line_angles_reverse_v2 on H, A, D, F we get angle(H, A, D) == angle(F, D, A) + 180 mod 360
By parallelogram_parallel_definition on C, D, A, B we get parallelogram(A, B, C, D)
By parallel_line_angles_reverse_v3 on E, D, A, H we get angle(E, D, A) == angle(H, A, D) + 180 mod 360
By parallel_line_angles_reverse_v0 on C, F, A, H we get angle(C, F, A) == angle(H, A, F) mod 360
By parallel_line_angles_reverse_v0 on C, D, A, H we get angle(C, D, A) == angle(H, A, D) mod 360
By parallel_line_angles_reverse_v3 on A, H, D, C we get angle(A, H, D) == angle(C, D, H) + 180 mod 360
By parallelogram_parallel_definition on A, B, C, D we get parallelogram(A, B, C, D)
By parallel_line_angles_reverse_v3 on E, F, A, H we get angle(E, F, A) == angle(H, A, F) + 180 mod 360
By parallel_line_angles_reverse_v2 on C, D, H, A we get angle(C, D, H) == angle(A, H, D) + 180 mod 360
By parallel_line_angles_reverse_v1 on F, D, H, A we get angle(A, H, D) == angle(F, D, H) mod 360
By parallel_line_angles_reverse_v2 on H, A, D, E we get angle(H, A, D) == angle(E, D, A) + 180 mod 360
By parallel_line_angles_reverse_v3 on F, D, A, H we get angle(F, D, A) == angle(H, A, D) + 180 mod 360
By parallelogram_parallel_definition on D, A, B, C we get parallelogram(A, B, C, D)
By parallel_line_angles_reverse_v3 on B, H, D, C we get angle(B, H, D) == angle(C, D, H) + 180 mod 360
By parallelogram_parallel_definition on B, A, D, C we get parallelogram(A, B, C, D)
By parallelogram_parallel_definition on C, B, A, D we get parallelogram(A, B, C, D)
By parallelogram_parallel_definition on B, C, D, A we get parallelogram(A, B, C, D)
By parallelogram_parallel_definition on D, C, B, A we get parallelogram(A, B, C, D)
By parallelogram_parallel_definition on A, D, C, B we get parallelogram(A, B, C, D)
By line_intersection_definition on B, Line(B, E), g we get B == line_intersection(g, Line(B, E))
By line_intersection_definition on A, Line(A, E), i we get A == line_intersection(i, Line(A, E))
By line_intersection_definition on C, Line(A, C), g we get C == line_intersection(g, Line(A, C))
By line_intersection_definition on A, Line(A, C), i we get A == line_intersection(i, Line(A, C))
By line_intersection_definition on B, Line(B, E), f we get B == line_intersection(f, Line(B, E))
By line_intersection_definition on C, h, Line(A, C) we get C == line_intersection(h, Line(A, C))
By line_intersection_definition on A, Line(A, C), k we get A == line_intersection(k, Line(A, C))
By line_intersection_definition on A, k, Line(A, E) we get A == line_intersection(k, Line(A, E))
By line_intersection_definition on E, Line(A, E), h we get E == line_intersection(h, Line(A, E))
By line_intersection_definition on A, f, Line(A, E) we get A == line_intersection(f, Line(A, E))
By line_intersection_definition on A, f, Line(A, C) we get A == line_intersection(f, Line(A, C))
By line_intersection_definition on E, Line(B, E), h we get E == line_intersection(h, Line(B, E))
By same_angle_v0 on D, H, G, E we get angle(G, D, E) == angle(H, D, E) mod 360
By same_angle_v1 on D, G, H, C we get angle(G, D, C) == angle(H, D, C) mod 360
By same_angle_v3 on G, D, H, A we get angle(D, G, A) == angle(H, G, A) + 180 mod 360
By same_angle_v0 on H, G, D, B we get angle(D, H, B) == angle(G, H, B) mod 360
By same_angle_v0 on H, D, G, A we get angle(D, H, A) == angle(G, H, A) mod 360
By same_angle_v2 on G, H, D, F we get angle(H, G, F) == angle(D, G, F) + 180 mod 360
By same_angle_v0 on D, G, H, F we get angle(G, D, F) == angle(H, D, F) mod 360
By same_angle_v3 on D, C, E, G we get angle(C, D, G) == angle(E, D, G) + 180 mod 360
By same_angle_v1 on D, H, G, A we get angle(G, D, A) == angle(H, D, A) mod 360
By same_angle_v1 on D, E, F, G we get angle(E, D, G) == angle(F, D, G) mod 360
By same_angle_v2 on D, C, F, G we get angle(C, D, G) == angle(F, D, G) + 180 mod 360
By between_imply_not_between on A, G, F we get collinear_and_not_between(F, A, G)
By between_imply_not_between on F, G, A we get collinear_and_not_between(A, F, G)
By between_imply_not_between on B, A, H we get collinear_and_not_between(A, B, H)
By between_imply_not_between on H, A, B we get collinear_and_not_between(A, H, B)
By orthocenter_concurrency on A, D, F we get orthocenter(A, D, F) in altitude(A, D, F), orthocenter(A, D, F) in altitude(D, A, F), orthocenter(A, D, F) in altitude(F, A, D)
By divide_by_2_mod_180_v0 on A, D, G, H, D, F we get angle(A, D, G) == angle(H, D, F) mod 360
By orthocenter_concurrency on G, H, A we get orthocenter(A, G, H) in altitude(G, A, H), orthocenter(A, G, H) in altitude(H, A, G), orthocenter(A, G, H) in altitude(A, G, H)
By orthocenter_concurrency on B, F, A we get orthocenter(A, B, F) in altitude(B, A, F), orthocenter(A, B, F) in altitude(F, A, B), orthocenter(A, B, F) in altitude(A, B, F)
By orthocenter_concurrency on A, C, F we get orthocenter(A, C, F) in altitude(A, C, F), orthocenter(A, C, F) in altitude(C, A, F), orthocenter(A, C, F) in altitude(F, A, C)
By orthocenter_concurrency on E, A, F we get orthocenter(A, E, F) in altitude(E, A, F), orthocenter(A, E, F) in altitude(A, E, F), orthocenter(A, E, F) in altitude(F, A, E)
By probably_between_and_collinear_implies_between on H, G, D we get between(D, G, H)
By divide_by_2_mod_180_v2 on H, D, E, G, D, C we get angle(H, D, E) == angle(G, D, C) + 180 mod 360
By divide_by_2_mod_180_v3 on G, D, C, H, D, F we get angle(G, D, C) == angle(H, D, F) + 180 mod 360
By divide_by_2_mod_180_v2 on C, D, G, H, D, A we get angle(C, D, G) == angle(H, D, A) + 180 mod 360
By orthocenter_concurrency on E, G, F we get orthocenter(E, F, G) in altitude(E, F, G), orthocenter(E, F, G) in altitude(G, E, F), orthocenter(E, F, G) in altitude(F, E, G)
By divide_by_2_mod_180_v2 on C, D, G, A, H, D we get angle(C, D, G) == angle(A, H, D) + 180 mod 360
By orthocenter_concurrency on F, H, A we get orthocenter(A, F, H) in altitude(F, A, H), orthocenter(A, F, H) in altitude(H, A, F), orthocenter(A, F, H) in altitude(A, F, H)
By orthocenter_concurrency on G, D, F we get orthocenter(D, F, G) in altitude(G, D, F), orthocenter(D, F, G) in altitude(D, F, G), orthocenter(D, F, G) in altitude(F, D, G)
By orthocenter_concurrency on G, B, A we get orthocenter(A, B, G) in altitude(G, A, B), orthocenter(A, B, G) in altitude(B, A, G), orthocenter(A, B, G) in altitude(A, B, G)
By reverse_direction on H, A we get 180 == direction(H, A) - direction(A, H) mod 360
By divide_by_2_mod_180_v2 on A, D, H, G, D, C we get angle(A, D, H) == angle(G, D, C) + 180 mod 360
By orthocenter_concurrency on C, G, F we get orthocenter(C, F, G) in altitude(C, F, G), orthocenter(C, F, G) in altitude(G, C, F), orthocenter(C, F, G) in altitude(F, C, G)
By probably_between_and_collinear_implies_between on E, D, C we get between(C, D, E)
By collinear_definition on H, G, D we get G in Line(D, H), D in Line(G, H), Line(D, H) == Line(G, H), 0 == 2 * angle(G, H, D) mod 360
By probably_between_and_collinear_implies_between on C, F, E we get between(C, F, E)
By collinear_definition on C, F, D we get F in Line(C, D), D in Line(C, F), Line(C, D) == Line(C, F), 0 == 2 * angle(F, C, D) mod 360
By divide_by_2_mod_180_v3 on A, H, D, C, D, G we get angle(A, H, D) == angle(C, D, G) + 180 mod 360
By collinear_definition on E, C, F we get C in Line(E, F), F in Line(C, E), Line(C, E) == Line(E, F), 0 == 2 * angle(C, E, F) mod 360
By probably_between_and_collinear_implies_between on F, D, C we get between(C, D, F)
By divide_by_2_mod_180_v0 on C, D, G, C, D, H we get angle(C, D, G) == angle(C, D, H) mod 360
By reverse_direction on G, D we get 180 == direction(G, D) - direction(D, G) mod 360
By probably_between_and_collinear_implies_between on E, F, D we get between(D, F, E)
By sss_anti_congruence_v1 on E, D, A, D, E, A we get anti_congruent_triangles(A, D, E, A, E, D)
By divide_by_2_mod_180_v1 on F, D, H, G, D, A we get angle(F, D, H) == angle(G, D, A) mod 360
By asa_anti_congruence on D, H, A, H, D, A we get anti_congruent_triangles(A, D, H, A, H, D)
By isosceles_trapezoid_properties on B, A, E, C we get parallel(Line(A, B), Line(C, E)), distance(A, E) == distance(B, C), angle(B, A, E) == angle(C, B, A), angle(A, E, C) == angle(E, C, B)
By sss_anti_congruence_v0 on E, A, D, D, A, E we get anti_congruent_triangles(A, D, E, A, E, D)
By reverse_direction on H, D we get 180 == direction(H, D) - direction(D, H) mod 360
By divide_by_2_mod_180_v3 on H, D, C, A, D, G we get angle(H, D, C) == angle(A, D, G) + 180 mod 360
By asa_anti_congruence on F, A, D, F, A, E we get anti_congruent_triangles(A, D, F, A, E, F)
By reverse_direction on G, A we get 180 == direction(G, A) - direction(A, G) mod 360
By reverse_direction on A, D we get 180 == direction(A, D) - direction(D, A) mod 360
By collinear_definition on C, E, D we get E in Line(C, D), D in Line(C, E), Line(C, D) == Line(C, E), 0 == 2 * angle(E, C, D) mod 360
By divide_by_2_mod_180_v1 on E, D, H, G, D, A we get angle(E, D, H) == angle(G, D, A) mod 360
By divide_by_2_mod_180_v2 on C, D, G, B, H, D we get angle(C, D, G) == angle(B, H, D) + 180 mod 360
By collinear_definition on E, D, F we get D in Line(E, F), F in Line(D, E), Line(D, E) == Line(E, F), 0 == 2 * angle(D, E, F) mod 360
By sss_anti_congruence_v1 on D, A, E, E, A, D we get anti_congruent_triangles(A, D, E, A, E, D)
By anti_congruence_from_anti_similar_triangles on H, D, A, D, H, A we get anti_congruent_triangles(A, D, H, A, H, D)
By divide_by_2_mod_180_v1 on B, H, D, G, D, A we get angle(B, H, D) == angle(G, D, A) mod 360
By collinear_definition on C, D, E we get D in Line(C, E), E in Line(C, D), Line(C, D) == Line(C, E), 0 == 2 * angle(D, C, E) mod 360
By divide_by_2_mod_180_v0 on H, D, E, A, D, G we get angle(A, D, G) == angle(H, D, E) mod 360
By divide_by_2_mod_180_v2 on C, D, G, F, D, H we get angle(C, D, G) == angle(F, D, H) + 180 mod 360
By divide_by_2_mod_180_v2 on A, D, G, H, D, C we get angle(A, D, G) == angle(H, D, C) + 180 mod 360
By collinear_definition on E, F, C we get F in Line(C, E), C in Line(E, F), Line(C, E) == Line(E, F), 0 == 2 * angle(F, E, C) mod 360
By asa_anti_congruence on D, E, A, E, D, A we get anti_congruent_triangles(A, D, E, A, E, D)
By divide_by_2_mod_180_v0 on A, D, G, D, H, A we get angle(A, D, G) == angle(D, H, A) mod 360
By sss_anti_congruence_v1 on A, E, D, A, D, E we get anti_congruent_triangles(A, D, E, A, E, D)
By between_imply_segment_sum on B, A, H we get distance(B, H) == distance(A, B) + distance(A, H)
By sss_anti_congruence_v0 on A, D, E, A, E, D we get anti_congruent_triangles(A, D, E, A, E, D)
By sss_anti_congruence_v1 on D, A, E, E, A, D we get anti_congruent_triangles(A, D, E, A, E, D)
By divide_by_2_mod_180_v3 on B, H, D, C, D, G we get angle(B, H, D) == angle(C, D, G) + 180 mod 360
By divide_by_2_mod_180_v2 on C, D, H, G, D, A we get angle(C, D, H) == angle(G, D, A) + 180 mod 360
By divide_by_2_mod_180_v1 on A, H, D, G, D, A we get angle(A, H, D) == angle(G, D, A) mod 360
By divide_by_2_mod_180_v3 on H, D, A, C, D, G we get angle(H, D, A) == angle(C, D, G) + 180 mod 360
By reverse_direction on A, G we get 180 == direction(A, G) - direction(G, A) mod 360
By isosceles_trapezoid_properties on B, A, C, E we get parallel(Line(A, B), Line(C, E)), distance(A, C) == distance(B, E), angle(B, A, C) == angle(E, B, A), angle(A, C, E) == angle(C, E, B)
By divide_by_2_mod_180_v3 on E, D, H, C, D, G we get angle(E, D, H) == angle(C, D, G) + 180 mod 360
By sss_anti_congruence_v0 on D, E, A, E, D, A we get anti_congruent_triangles(A, D, E, A, E, D)
By divide_by_2_mod_180_v2 on H, D, F, G, D, C we get angle(H, D, F) == angle(G, D, C) + 180 mod 360
By divide_by_2_mod_180_v2 on D, H, B, G, D, C we get angle(D, H, B) == angle(G, D, C) + 180 mod 360
By aa_anti_similarity on A, D, E, A, E, D we get anti_similar_triangles(A, D, E, A, E, D)
By reverse_direction on H, B we get 180 == direction(H, B) - direction(B, H) mod 360
By sss_anti_congruence_v1 on D, A, E, E, A, D we get anti_congruent_triangles(A, D, E, A, E, D)
By asa_anti_congruence on H, D, A, D, H, A we get anti_congruent_triangles(A, D, H, A, H, D)
By divide_by_2_mod_180_v3 on G, D, A, C, D, H we get angle(G, D, A) == angle(C, D, H) + 180 mod 360
By divide_by_2_mod_180_v3 on G, D, C, A, D, H we get angle(G, D, C) == angle(A, D, H) + 180 mod 360
By divide_by_2_mod_180_v3 on G, D, C, H, D, E we get angle(G, D, C) == angle(H, D, E) + 180 mod 360
By divide_by_2_mod_180_v3 on G, D, C, D, H, B we get angle(G, D, C) == angle(D, H, B) + 180 mod 360
By asa_anti_congruence on E, D, A, D, E, A we get anti_congruent_triangles(A, D, E, A, E, D)
By collinear_definition on C, E, F we get E in Line(C, F), F in Line(C, E), Line(C, E) == Line(C, F), 0 == 2 * angle(E, C, F) mod 360
By asa_anti_congruence on D, A, F, E, A, F we get anti_congruent_triangles(A, D, F, A, E, F)
By anti_congruence_from_anti_similar_triangles on F, A, D, F, A, E we get anti_congruent_triangles(A, D, F, A, E, F)
By reverse_direction on D, F we get 180 == direction(D, F) - direction(F, D) mod 360
By anti_congruence_from_anti_similar_triangles on A, F, E, A, F, D we get anti_congruent_triangles(A, D, F, A, E, F)
By collinear_definition on G, D, H we get D in Line(G, H), H in Line(D, G), Line(D, G) == Line(G, H), 0 == 2 * angle(D, G, H) mod 360
By divide_by_2_mod_180_v2 on C, D, G, E, D, H we get angle(C, D, G) == angle(E, D, H) + 180 mod 360
By reverse_direction on F, C we get 180 == direction(F, C) - direction(C, F) mod 360
By reverse_direction on A, H we get 180 == direction(A, H) - direction(H, A) mod 360
By divide_by_2_mod_180_v0 on A, D, G, D, H, B we get angle(A, D, G) == angle(D, H, B) mod 360
By divide_by_2_mod_180_v2 on D, H, A, G, D, C we get angle(D, H, A) == angle(G, D, C) + 180 mod 360
By sss_anti_congruence_v1 on D, A, E, E, A, D we get anti_congruent_triangles(A, D, E, A, E, D)
By reverse_direction on A, F we get 180 == direction(A, F) - direction(F, A) mod 360
By collinear_definition on E, F, D we get F in Line(D, E), D in Line(E, F), Line(D, E) == Line(E, F), 0 == 2 * angle(F, E, D) mod 360
By collinear_definition on H, D, G we get D in Line(G, H), G in Line(D, H), Line(D, H) == Line(G, H), 0 == 2 * angle(D, H, G) mod 360
By sas_anti_congruence on A, D, E, A, E, D we get anti_congruent_triangles(A, D, E, A, E, D)
By sss_anti_congruence_v0 on D, E, A, E, D, A we get anti_congruent_triangles(A, D, E, A, E, D)
By collinear_definition on D, F, E we get F in Line(D, E), E in Line(D, F), Line(D, E) == Line(D, F), 0 == 2 * angle(F, D, E) mod 360
By asa_anti_congruence on A, F, D, A, F, E we get anti_congruent_triangles(A, D, F, A, E, F)
By anti_congruence_from_anti_similar_triangles on A, E, F, A, D, F we get anti_congruent_triangles(A, D, F, A, E, F)
By asa_anti_congruence on E, A, F, D, A, F we get anti_congruent_triangles(A, D, F, A, E, F)
By collinear_definition on D, C, E we get C in Line(D, E), E in Line(C, D), Line(C, D) == Line(D, E), 0 == 2 * angle(C, D, E) mod 360
By collinear_definition on G, H, D we get H in Line(D, G), D in Line(G, H), Line(D, G) == Line(G, H), 0 == 2 * angle(H, G, D) mod 360
By aa_anti_similarity on A, E, D, A, D, E we get anti_similar_triangles(A, D, E, A, E, D)
By sas_anti_congruence on D, E, A, E, D, A we get anti_congruent_triangles(A, D, E, A, E, D)
By divide_by_2_mod_180_v3 on G, D, C, D, H, A we get angle(G, D, C) == angle(D, H, A) + 180 mod 360
By reverse_direction on D, E we get 180 == direction(D, E) - direction(E, D) mod 360
By sss_anti_congruence_v1 on E, D, A, D, E, A we get anti_congruent_triangles(A, D, E, A, E, D)
By isosceles_triangle_from_angles on A, D, H we get isosceles_triangle(A, D, H)
By asa_anti_congruence on A, D, F, A, E, F we get anti_congruent_triangles(A, D, F, A, E, F)
By collinear_definition on D, E, C we get E in Line(C, D), C in Line(D, E), Line(C, D) == Line(D, E), 0 == 2 * angle(E, D, C) mod 360
By collinear_definition on F, D, C we get D in Line(C, F), C in Line(D, F), Line(C, F) == Line(D, F), 0 == 2 * angle(D, F, C) mod 360
By line_circle_intersection_has_at_most_two_points_0 on E, C, F, c we get F not in c
By sss_anti_congruence_v1 on A, E, D, A, D, E we get anti_congruent_triangles(A, D, E, A, E, D)
By collinear_definition on F, D, E we get D in Line(E, F), E in Line(D, F), Line(D, F) == Line(E, F), 0 == 2 * angle(D, F, E) mod 360
By between_imply_segment_sum on A, G, F we get distance(A, F) == distance(A, G) + distance(F, G)
By divide_by_2_mod_180_v0 on A, D, H, A, D, G we get angle(A, D, G) == angle(A, D, H) mod 360
By collinear_definition on F, E, C we get E in Line(C, F), C in Line(E, F), Line(C, F) == Line(E, F), 0 == 2 * angle(E, F, C) mod 360
By reverse_direction on G, H we get 180 == direction(G, H) - direction(H, G) mod 360
By sas_anti_congruence on D, A, F, E, A, F we get anti_congruent_triangles(A, D, F, A, E, F)
By collinear_definition on D, F, C we get F in Line(C, D), C in Line(D, F), Line(C, D) == Line(D, F), 0 == 2 * angle(F, D, C) mod 360
By sss_anti_congruence_v0 on A, D, E, A, E, D we get anti_congruent_triangles(A, D, E, A, E, D)
By reverse_direction on D, H we get 180 == direction(D, H) - direction(H, D) mod 360
By sas_anti_congruence on A, E, D, A, D, E we get anti_congruent_triangles(A, D, E, A, E, D)
By isosceles_trapezoid_properties on A, B, E, C we get parallel(Line(A, B), Line(C, E)), distance(A, C) == distance(B, E), angle(A, B, E) == angle(C, A, B), angle(B, E, C) == angle(E, C, A)
By sss_anti_congruence_v0 on D, E, A, E, D, A we get anti_congruent_triangles(A, D, E, A, E, D)
By collinear_definition on F, C, D we get C in Line(D, F), D in Line(C, F), Line(C, F) == Line(D, F), 0 == 2 * angle(C, F, D) mod 360
By sss_anti_congruence_v0 on A, D, E, A, E, D we get anti_congruent_triangles(A, D, E, A, E, D)
By sss_anti_congruence_v1 on A, E, D, A, D, E we get anti_congruent_triangles(A, D, E, A, E, D)
By collinear_definition on F, E, D we get E in Line(D, F), D in Line(E, F), Line(D, F) == Line(E, F), 0 == 2 * angle(E, F, D) mod 360
By anti_congruence_from_anti_similar_triangles on E, A, F, D, A, F we get anti_congruent_triangles(A, D, F, A, E, F)
By anti_congruence_from_anti_similar_triangles on A, D, F, A, E, F we get anti_congruent_triangles(A, D, F, A, E, F)
By sss_anti_congruence_v0 on E, A, D, D, A, E we get anti_congruent_triangles(A, D, E, A, E, D)
By collinear_definition on D, C, F we get C in Line(D, F), F in Line(C, D), Line(C, D) == Line(D, F), 0 == 2 * angle(C, D, F) mod 360
By reverse_direction on D, G we get 180 == direction(D, G) - direction(G, D) mod 360
By divide_by_2_mod_180_v3 on F, D, H, C, D, G we get angle(F, D, H) == angle(C, D, G) + 180 mod 360
By reverse_direction on F, D we get 180 == direction(F, D) - direction(D, F) mod 360
By collinear_definition on E, C, D we get C in Line(D, E), D in Line(C, E), Line(C, E) == Line(D, E), 0 == 2 * angle(C, E, D) mod 360
By sas_anti_congruence on E, D, A, D, E, A we get anti_congruent_triangles(A, D, E, A, E, D)
By collinear_definition on D, E, F we get E in Line(D, F), F in Line(D, E), Line(D, E) == Line(D, F), 0 == 2 * angle(E, D, F) mod 360
By anti_congruence_from_anti_similar_triangles on A, F, D, A, F, E we get anti_congruent_triangles(A, D, F, A, E, F)
By reverse_direction on C, D we get 180 == direction(C, D) - direction(D, C) mod 360
By line_inequality on Line(A, E), Line(A, C), E we get Line(A, C) != Line(A, E)
By reverse_direction on D, C we get 180 == direction(D, C) - direction(C, D) mod 360
By sss_anti_congruence_v0 on D, E, A, E, D, A we get anti_congruent_triangles(A, D, E, A, E, D)
By reverse_direction on F, E we get 180 == direction(F, E) - direction(E, F) mod 360
By sss_anti_congruence_v1 on D, A, E, E, A, D we get anti_congruent_triangles(A, D, E, A, E, D)
By sss_anti_congruence_v1 on A, E, D, A, D, E we get anti_congruent_triangles(A, D, E, A, E, D)
By collinear_definition on D, H, G we get H in Line(D, G), G in Line(D, H), Line(D, G) == Line(D, H), 0 == 2 * angle(H, D, G) mod 360
By reverse_direction on H, G we get 180 == direction(H, G) - direction(G, H) mod 360
By reverse_direction on B, H we get 180 == direction(B, H) - direction(H, B) mod 360
By sas_anti_congruence on F, A, E, F, A, D we get anti_congruent_triangles(A, D, F, A, E, F)
By isosceles_trapezoid_properties on A, B, C, E we get parallel(Line(A, B), Line(C, E)), distance(A, E) == distance(B, C), angle(A, B, C) == angle(E, A, B), angle(B, C, E) == angle(C, E, A)
By sss_anti_congruence_v1 on E, D, A, D, E, A we get anti_congruent_triangles(A, D, E, A, E, D)
By reverse_direction on G, F we get 180 == direction(G, F) - direction(F, G) mod 360
By isosceles_triangle_from_angles on A, H, D we get isosceles_triangle(A, D, H)
By sas_anti_congruence on F, A, D, F, A, E we get anti_congruent_triangles(A, D, F, A, E, F)
By collinear_definition on C, F, E we get F in Line(C, E), E in Line(C, F), Line(C, E) == Line(C, F), 0 == 2 * angle(F, C, E) mod 360
By collinear_definition on C, D, F we get D in Line(C, F), F in Line(C, D), Line(C, D) == Line(C, F), 0 == 2 * angle(D, C, F) mod 360
By line_circle_intersection_has_at_most_two_points_0 on E, C, D, c we get D not in c
By sss_anti_congruence_v0 on A, D, E, A, E, D we get anti_congruent_triangles(A, D, E, A, E, D)
By reverse_direction on F, G we get 180 == direction(F, G) - direction(G, F) mod 360
By anti_congruence_from_anti_similar_triangles on D, H, A, H, D, A we get anti_congruent_triangles(A, D, H, A, H, D)
By sss_anti_congruence_v1 on E, D, A, D, E, A we get anti_congruent_triangles(A, D, E, A, E, D)
By sss_anti_congruence_v0 on D, E, A, E, D, A we get anti_congruent_triangles(A, D, E, A, E, D)
By sas_anti_congruence on E, A, F, D, A, F we get anti_congruent_triangles(A, D, F, A, E, F)
By sss_anti_congruence_v0 on E, A, D, D, A, E we get anti_congruent_triangles(A, D, E, A, E, D)
By sss_anti_congruence_v1 on A, E, D, A, D, E we get anti_congruent_triangles(A, D, E, A, E, D)
By line_inequality on Line(A, C), Line(B, E), A we get Line(A, C) != Line(B, E)
By line_inequality on Line(B, E), Line(A, E), B we get Line(A, E) != Line(B, E)
By collinear_definition on F, C, E we get C in Line(E, F), E in Line(C, F), Line(C, F) == Line(E, F), 0 == 2 * angle(C, F, E) mod 360
By asa_anti_congruence on A, F, E, A, F, D we get anti_congruent_triangles(A, D, F, A, E, F)
By sss_anti_congruence_v0 on A, D, E, A, E, D we get anti_congruent_triangles(A, D, E, A, E, D)
By reverse_direction on F, A we get 180 == direction(F, A) - direction(A, F) mod 360
By sss_anti_congruence_v1 on E, D, A, D, E, A we get anti_congruent_triangles(A, D, E, A, E, D)
By collinear_definition on D, G, H we get G in Line(D, H), H in Line(D, G), Line(D, G) == Line(D, H), 0 == 2 * angle(G, D, H) mod 360
By sss_anti_congruence_v0 on E, A, D, D, A, E we get anti_congruent_triangles(A, D, E, A, E, D)
By collinear_definition on E, D, C we get D in Line(C, E), C in Line(D, E), Line(C, E) == Line(D, E), 0 == 2 * angle(D, E, C) mod 360
By reverse_direction on E, F we get 180 == direction(E, F) - direction(F, E) mod 360
By reverse_direction on D, A we get 180 == direction(D, A) - direction(A, D) mod 360
By asa_anti_congruence on F, A, E, F, A, D we get anti_congruent_triangles(A, D, F, A, E, F)
By asa_anti_congruence on A, E, F, A, D, F we get anti_congruent_triangles(A, D, F, A, E, F)
By anti_congruence_from_anti_similar_triangles on D, A, F, E, A, F we get anti_congruent_triangles(A, D, F, A, E, F)
By reverse_direction on C, F we get 180 == direction(C, F) - direction(F, C) mod 360
By reverse_direction on E, D we get 180 == direction(E, D) - direction(D, E) mod 360
By sss_anti_congruence_v0 on E, A, D, D, A, E we get anti_congruent_triangles(A, D, E, A, E, D)
By anti_congruence_from_anti_similar_triangles on F, A, E, F, A, D we get anti_congruent_triangles(A, D, F, A, E, F)
By external_angle_bisector_definition_v0_r on D, A, C, F we get Line(A, F) == external_angle_bisector(C, F, D)
By external_angle_bisector_definition_v0_r on C, G, D, F we get Line(F, G) == external_angle_bisector(C, F, D)
By external_angle_bisector_definition_v0_r on H, G, H, A we get Line(A, G) == external_angle_bisector(H, A, H)
By tangent_chord_angle_v1 on A, D, E, H we get tangent(Line(A, H), Circle(A, D, E))
By external_angle_bisector_definition_v0_r on F, H, G, A we get Line(A, H) == external_angle_bisector(F, A, G)
By isogonal_conjugate_sufficient_conditions_v1 on D, A, E, H, H we get H == isogonal_conjugate(H, A, D, E)
By external_angle_bisector_definition_v0_r on G, B, G, A we get Line(A, B) == external_angle_bisector(G, A, G)
By external_angle_bisector_definition_v0_r on E, H, D, A we get Line(A, H) == external_angle_bisector(D, A, E)
By internal_angle_bisector_definition_v0_r on F, A, F, G we get Line(A, G) == internal_angle_bisector(F, G, F)
By external_angle_bisector_definition_v0_r on E, B, D, A we get Line(A, B) == external_angle_bisector(D, A, E)
By external_angle_bisector_definition_v0_r on G, E, A, F we get Line(E, F) == external_angle_bisector(A, F, G)
By tangent_chord_angle_v1 on A, E, D, B we get tangent(Line(A, B), Circle(A, D, E))
By external_angle_bisector_definition_v0_r on A, C, A, F we get Line(C, F) == external_angle_bisector(A, F, A)
By external_angle_bisector_definition_v0_r on C, G, C, F we get Line(F, G) == external_angle_bisector(C, F, C)
By external_angle_bisector_definition_v0_r on G, D, G, F we get Line(D, F) == external_angle_bisector(G, F, G)
By external_angle_bisector_definition_v0_r on A, D, G, F we get Line(D, F) == external_angle_bisector(A, F, G)
By external_angle_bisector_definition_v0_r on E, A, E, F we get Line(A, F) == external_angle_bisector(E, F, E)
By internal_angle_bisector_definition_v0_r on B, F, H, A we get Line(A, F) == internal_angle_bisector(B, A, H)
By internal_angle_bisector_definition_v0_r on C, A, E, F we get Line(A, F) == internal_angle_bisector(C, F, E)
By external_angle_bisector_definition_v0_r on G, C, G, F we get Line(C, F) == external_angle_bisector(G, F, G)
By internal_angle_bisector_definition_v0_r on G, A, G, F we get Line(A, F) == internal_angle_bisector(G, F, G)
By external_angle_bisector_definition_v0_r on B, F, B, A we get Line(A, F) == external_angle_bisector(B, A, B)
By internal_angle_bisector_definition_v0_r on B, A, B, H we get Line(A, H) == internal_angle_bisector(B, H, B)
By external_angle_bisector_definition_v0_r on G, C, A, F we get Line(C, F) == external_angle_bisector(A, F, G)
By external_angle_bisector_definition_v0_r on A, E, A, F we get Line(E, F) == external_angle_bisector(A, F, A)
By external_angle_bisector_definition_v0_r on C, A, C, F we get Line(A, F) == external_angle_bisector(C, F, C)
By internal_angle_bisector_definition_v0_r on E, G, D, A we get Line(A, G) == internal_angle_bisector(D, A, E)
By external_angle_bisector_definition_v0_r on G, B, F, A we get Line(A, B) == external_angle_bisector(F, A, G)
By internal_angle_bisector_definition_v0_r on D, F, E, A we get Line(A, F) == internal_angle_bisector(D, A, E)
By internal_angle_bisector_definition_v0_r on E, G, D, F we get Line(F, G) == internal_angle_bisector(D, F, E)
By internal_angle_bisector_definition_v0_r on A, G, A, F we get Line(F, G) == internal_angle_bisector(A, F, A)
By external_angle_bisector_definition_v0_r on A, D, A, F we get Line(D, F) == external_angle_bisector(A, F, A)
By external_angle_bisector_definition_v0_r on H, F, H, A we get Line(A, F) == external_angle_bisector(H, A, H)
By external_angle_bisector_definition_v0_r on B, G, B, A we get Line(A, G) == external_angle_bisector(B, A, B)
By external_angle_bisector_definition_v0_r on F, H, F, A we get Line(A, H) == external_angle_bisector(F, A, F)
By external_angle_bisector_definition_v0_r on D, G, D, F we get Line(F, G) == external_angle_bisector(D, F, D)
By external_angle_bisector_definition_v0_r on F, B, F, A we get Line(A, B) == external_angle_bisector(F, A, F)
By internal_angle_bisector_definition_v0_r on F, G, F, A we get Line(A, G) == internal_angle_bisector(F, A, F)
By internal_angle_bisector_definition_v0_r on E, H, A, D we get Line(D, H) == internal_angle_bisector(A, D, E)
By internal_angle_bisector_definition_v0_r on B, H, B, A we get Line(A, H) == internal_angle_bisector(B, A, B)
By internal_angle_bisector_definition_v0_r on A, H, A, B we get Line(B, H) == internal_angle_bisector(A, B, A)
By external_angle_bisector_definition_v0_r on G, E, G, F we get Line(E, F) == external_angle_bisector(G, F, G)
By external_angle_bisector_definition_v0_r on G, H, G, A we get Line(A, H) == external_angle_bisector(G, A, G)
By external_angle_bisector_definition_v0_r on D, A, D, F we get Line(A, F) == external_angle_bisector(D, F, D)
By internal_angle_bisector_definition_v0_r on E, A, D, F we get Line(A, F) == internal_angle_bisector(D, F, E)
By internal_angle_bisector_definition_v0_r on F, H, A, D we get Line(D, H) == internal_angle_bisector(A, D, F)
By internal_angle_bisector_definition_v0_r on B, G, H, A we get Line(A, G) == internal_angle_bisector(B, A, H)
By internal_angle_bisector_definition_v0_r on C, G, E, F we get Line(F, G) == internal_angle_bisector(C, F, E)
By internal_angle_bisector_definition_v0_r on H, A, H, B we get Line(A, B) == internal_angle_bisector(H, B, H)
By external_angle_bisector_definition_v0_r on E, G, E, F we get Line(F, G) == external_angle_bisector(E, F, E)
By internal_angle_bisector_definition_v0_r on A, F, A, G we get Line(F, G) == internal_angle_bisector(A, G, A)
By internal_angle_bisector_definition_v0_r on G, F, G, A we get Line(A, F) == internal_angle_bisector(G, A, G)
By internal_angle_bisector_definition_v0_r on H, B, H, A we get Line(A, B) == internal_angle_bisector(H, A, H)
By internal_angle_bisector_definition_v0_r on A, B, A, H we get Line(B, H) == internal_angle_bisector(A, H, A)
By sas_congruence on B, C, D, D, A, B we get congruent_triangles(A, B, D, C, D, B)
By sas_congruence on D, A, B, B, C, D we get congruent_triangles(A, B, D, C, D, B)
By sas_anti_congruence on G, A, D, G, A, E we get anti_congruent_triangles(A, D, G, A, E, G)
By sas_congruence on B, A, D, D, C, B we get congruent_triangles(A, B, D, C, D, B)
By sas_anti_congruence on D, A, G, E, A, G we get anti_congruent_triangles(A, D, G, A, E, G)
By sas_congruence on D, C, B, B, A, D we get congruent_triangles(A, B, D, C, D, B)
By sas_anti_congruence on E, A, G, D, A, G we get anti_congruent_triangles(A, D, G, A, E, G)
By sas_anti_congruence on G, A, E, G, A, D we get anti_congruent_triangles(A, D, G, A, E, G)
By anti_similar_triangle_basic_properties on H, A, D, D, A, H we get not_collinear(A, D, H), not_collinear(A, D, H), angle(H, A, D) == 0 - angle(D, A, H) mod 360, angle(A, D, H) == 0 - angle(A, H, D) mod 360, angle(D, H, A) == 0 - angle(H, D, A) mod 360, log(distance(A, D)) + log(distance(A, D)) == log(distance(A, H)) + log(distance(A, H)), log(distance(A, D)) + log(distance(D, H)) == log(distance(A, H)) + log(distance(D, H)), log(distance(D, H)) + log(distance(A, D)) == log(distance(D, H)) + log(distance(A, H))
By isosceles_triangle_altitude_v1 on A, D, E we get identical(perpendicular_bisector(D, E), internal_angle_bisector(D, A, E), perpendicular_line(A, Line(D, E)))
By power_of_a_point_definition on H, B, A, c we get log(power_of_a_point(H, c)) == log(distance(B, H)) + log(distance(A, H))
By isosceles_triangle_altitude_v1 on A, D, E we get identical(perpendicular_bisector(D, E), internal_angle_bisector(D, A, E), perpendicular_line(A, Line(D, E)))
By isosceles_triangle_altitude_v1 on A, E, D we get identical(perpendicular_bisector(D, E), internal_angle_bisector(D, A, E), perpendicular_line(A, Line(D, E)))
By isosceles_triangle_altitude_v1 on A, E, D we get identical(perpendicular_bisector(D, E), internal_angle_bisector(D, A, E), perpendicular_line(A, Line(D, E)))
By anti_similar_triangle_basic_properties on A, C, E, B, E, C we get not_collinear(A, C, E), not_collinear(B, C, E), angle(A, C, E) == 0 - angle(B, E, C) mod 360, angle(C, E, A) == 0 - angle(E, C, B) mod 360, angle(E, A, C) == 0 - angle(C, B, E) mod 360, log(distance(A, C)) + log(distance(C, E)) == log(distance(B, E)) + log(distance(C, E)), log(distance(C, E)) + log(distance(A, E)) == log(distance(C, E)) + log(distance(B, C)), log(distance(A, E)) + log(distance(B, E)) == log(distance(B, C)) + log(distance(A, C))
By anti_similar_triangle_basic_properties on D, F, A, E, F, A we get not_collinear(A, D, F), not_collinear(A, E, F), angle(D, F, A) == 0 - angle(E, F, A) mod 360, angle(F, A, D) == 0 - angle(F, A, E) mod 360, angle(A, D, F) == 0 - angle(A, E, F) mod 360, log(distance(D, F)) + log(distance(A, F)) == log(distance(E, F)) + log(distance(A, F)), log(distance(A, F)) + log(distance(A, D)) == log(distance(A, F)) + log(distance(A, E)), log(distance(A, D)) + log(distance(E, F)) == log(distance(A, E)) + log(distance(D, F))
By anti_similar_triangle_basic_properties on B, E, A, A, C, B we get not_collinear(A, B, E), not_collinear(A, B, C), angle(B, E, A) == 0 - angle(A, C, B) mod 360, angle(E, A, B) == 0 - angle(C, B, A) mod 360, angle(A, B, E) == 0 - angle(B, A, C) mod 360, log(distance(A, C)) + log(distance(A, E)) == log(distance(B, E)) + log(distance(B, C)), log(distance(A, E)) + log(distance(A, B)) == log(distance(B, C)) + log(distance(A, B)), log(distance(A, B)) + log(distance(A, C)) == log(distance(A, B)) + log(distance(B, E))
By similar_triangle_basic_properties on B, A, C, D, C, A we get not_collinear(A, B, C), not_collinear(A, C, D), angle(B, A, C) == angle(D, C, A) mod 360, angle(A, C, B) == angle(C, A, D) mod 360, angle(A, D, C) == angle(C, B, A) mod 360, log(distance(A, B)) + log(distance(A, C)) == log(distance(C, D)) + log(distance(A, C)), log(distance(A, C)) + log(distance(A, D)) == log(distance(A, C)) + log(distance(B, C)), log(distance(A, D)) + log(distance(A, B)) == log(distance(B, C)) + log(distance(C, D))
By anti_similar_triangle_basic_properties on F, D, A, F, E, A we get not_collinear(A, D, F), not_collinear(A, E, F), angle(F, D, A) == 0 - angle(F, E, A) mod 360, angle(D, A, F) == 0 - angle(E, A, F) mod 360, angle(A, F, D) == 0 - angle(A, F, E) mod 360, log(distance(D, F)) + log(distance(A, E)) == log(distance(E, F)) + log(distance(A, D)), log(distance(A, D)) + log(distance(A, F)) == log(distance(A, E)) + log(distance(A, F)), log(distance(A, F)) + log(distance(D, F)) == log(distance(A, F)) + log(distance(E, F))
By anti_similar_triangle_basic_properties on C, E, B, E, C, A we get not_collinear(B, C, E), not_collinear(A, C, E), angle(C, E, B) == 0 - angle(E, C, A) mod 360, angle(E, B, C) == 0 - angle(C, A, E) mod 360, angle(B, C, E) == 0 - angle(A, E, C) mod 360, log(distance(C, E)) + log(distance(A, C)) == log(distance(C, E)) + log(distance(B, E)), log(distance(A, C)) + log(distance(B, C)) == log(distance(B, E)) + log(distance(A, E)), log(distance(A, E)) + log(distance(C, E)) == log(distance(B, C)) + log(distance(C, E))
By anti_similar_triangle_basic_properties on A, E, B, D, A, C we get not_collinear(A, B, E), not_collinear(A, C, D), angle(A, E, B) == 0 - angle(D, A, C) mod 360, angle(E, B, A) == 0 - angle(A, C, D) mod 360, angle(B, A, E) == 0 - angle(C, D, A) mod 360, log(distance(A, D)) + log(distance(B, E)) == log(distance(A, E)) + log(distance(A, C)), log(distance(A, C)) + log(distance(A, B)) == log(distance(B, E)) + log(distance(C, D)), log(distance(A, B)) + log(distance(A, D)) == log(distance(C, D)) + log(distance(A, E))
By anti_similar_triangle_basic_properties on A, D, C, E, A, B we get not_collinear(A, C, D), not_collinear(A, B, E), angle(A, D, C) == 0 - angle(E, A, B) mod 360, angle(D, C, A) == 0 - angle(A, B, E) mod 360, angle(C, A, D) == 0 - angle(B, E, A) mod 360, log(distance(A, D)) + log(distance(A, B)) == log(distance(A, E)) + log(distance(C, D)), log(distance(A, B)) + log(distance(A, C)) == log(distance(C, D)) + log(distance(B, E)), log(distance(A, C)) + log(distance(A, E)) == log(distance(B, E)) + log(distance(A, D))
By line_intersection_definition on orthocenter(A, E, F), h, k we get orthocenter(A, E, F) == line_intersection(h, k)
By concyclic_sufficient_conditions_v0 on G, H, A, E we get concyclic(A, E, G, H)
By line_intersection_definition on orthocenter(D, F, G), k, h we get orthocenter(D, F, G) == line_intersection(h, k)
By midpoint_definition_v1 on E, D, F we get F == midpoint(D, E)
By line_intersection_definition on orthocenter(A, G, H), f, k we get orthocenter(A, G, H) == line_intersection(f, k)
By line_intersection_definition on orthocenter(A, B, F), k, f we get orthocenter(A, B, F) == line_intersection(f, k)
By line_intersection_definition on orthocenter(A, C, F), k, h we get orthocenter(A, C, F) == line_intersection(h, k)
By line_intersection_definition on orthocenter(E, F, G), h, k we get orthocenter(E, F, G) == line_intersection(h, k)
By line_intersection_definition on orthocenter(C, F, G), h, k we get orthocenter(C, F, G) == line_intersection(h, k)
By line_intersection_definition on orthocenter(A, F, H), f, k we get orthocenter(A, F, H) == line_intersection(f, k)
By line_intersection_definition on orthocenter(A, B, G), k, f we get orthocenter(A, B, G) == line_intersection(f, k)
By line_intersection_definition on orthocenter(A, D, F), h, k we get orthocenter(A, D, F) == line_intersection(h, k)
By perpendicular_line_definition on orthocenter(A, B, G), altitude(A, B, G), Line(B, G) we get altitude(A, B, G) == perpendicular_line(orthocenter(A, B, G), Line(B, G))
By perpendicular_line_definition on orthocenter(A, B, F), k, h we get k == perpendicular_line(orthocenter(A, B, F), h)
By perpendicular_line_definition on E, Line(A, E), altitude(F, A, E) we get Line(A, E) == perpendicular_line(E, altitude(F, A, E))
By perpendicular_line_definition on H, Line(F, H), altitude(A, F, H) we get Line(F, H) == perpendicular_line(H, altitude(A, F, H))
By perpendicular_line_definition on orthocenter(D, F, G), altitude(F, D, G), j we get altitude(F, D, G) == perpendicular_line(orthocenter(D, F, G), j)
By perpendicular_line_definition on orthocenter(A, E, F), h, k we get h == perpendicular_line(orthocenter(A, E, F), k)
By concurrent_sufficient_conditions on Line(A, E), Line(B, E), h we get concurrent(h, Line(A, E), Line(B, E))
By perpendicular_line_definition on orthocenter(A, C, F), k, h we get k == perpendicular_line(orthocenter(A, C, F), h)
By perpendicular_line_definition on orthocenter(A, D, F), k, h we get k == perpendicular_line(orthocenter(A, D, F), h)
By perpendicular_line_definition on orthocenter(A, B, F), altitude(A, B, F), Line(B, F) we get altitude(A, B, F) == perpendicular_line(orthocenter(A, B, F), Line(B, F))
By perpendicular_line_definition on orthocenter(A, C, F), altitude(F, A, C), Line(A, C) we get altitude(F, A, C) == perpendicular_line(orthocenter(A, C, F), Line(A, C))
By concurrent_sufficient_conditions on Line(A, E), Line(A, C), f we get concurrent(f, Line(A, C), Line(A, E))
By perpendicular_line_definition on orthocenter(D, F, G), k, h we get k == perpendicular_line(orthocenter(D, F, G), h)
By perpendicular_line_definition on orthocenter(C, F, G), k, f we get k == perpendicular_line(orthocenter(C, F, G), f)
By line_intersection_definition on E, Line(A, E), Line(B, E) we get E == line_intersection(Line(A, E), Line(B, E))
By perpendicular_line_definition on orthocenter(A, E, F), altitude(F, A, E), Line(A, E) we get altitude(F, A, E) == perpendicular_line(orthocenter(A, E, F), Line(A, E))
By concurrent_sufficient_conditions on Line(A, E), Line(A, C), k we get concurrent(k, Line(A, C), Line(A, E))
By perpendicular_line_definition on orthocenter(A, F, H), f, k we get f == perpendicular_line(orthocenter(A, F, H), k)
By perpendicular_line_definition on C, Line(C, G), altitude(F, C, G) we get Line(C, G) == perpendicular_line(C, altitude(F, C, G))
By perpendicular_line_definition on F, Line(B, F), altitude(A, B, F) we get Line(B, F) == perpendicular_line(F, altitude(A, B, F))
By perpendicular_line_definition on F, Line(F, H), altitude(A, F, H) we get Line(F, H) == perpendicular_line(F, altitude(A, F, H))
By line_intersection_definition on A, Line(A, E), Line(A, C) we get A == line_intersection(Line(A, C), Line(A, E))
By perpendicular_line_definition on midpoint(D, E), k, f we get k == perpendicular_line(midpoint(D, E), f)
By perpendicular_line_definition on E, Line(E, G), altitude(F, E, G) we get Line(E, G) == perpendicular_line(E, altitude(F, E, G))
By perpendicular_line_definition on orthocenter(A, D, F), h, k we get h == perpendicular_line(orthocenter(A, D, F), k)
By perpendicular_line_definition on G, Line(B, G), altitude(A, B, G) we get Line(B, G) == perpendicular_line(G, altitude(A, B, G))
By perpendicular_line_definition on A, i, altitude(F, A, D) we get i == perpendicular_line(A, altitude(F, A, D))
By perpendicular_line_definition on H, j, altitude(F, D, G) we get j == perpendicular_line(H, altitude(F, D, G))
By perpendicular_line_definition on orthocenter(A, B, F), f, k we get f == perpendicular_line(orthocenter(A, B, F), k)
By concurrent_sufficient_conditions on Line(A, E), Line(A, C), i we get concurrent(i, Line(A, C), Line(A, E))
By perpendicular_line_definition on orthocenter(A, B, G), f, k we get f == perpendicular_line(orthocenter(A, B, G), k)
By concurrent_sufficient_conditions on Line(B, E), Line(A, E), h we get concurrent(h, Line(A, E), Line(B, E))
By median_definition on A, D, E, k we get k == median(A, D, E)
By perpendicular_line_definition on D, i, altitude(F, A, D) we get i == perpendicular_line(D, altitude(F, A, D))
By perpendicular_line_definition on D, j, altitude(F, D, G) we get j == perpendicular_line(D, altitude(F, D, G))
By perpendicular_line_definition on orthocenter(A, F, H), k, f we get k == perpendicular_line(orthocenter(A, F, H), f)
By median_definition on G, D, E, k we get k == median(G, D, E)
By perpendicular_line_definition on G, j, altitude(F, D, G) we get j == perpendicular_line(G, altitude(F, D, G))
By perpendicular_line_definition on G, Line(C, G), altitude(F, C, G) we get Line(C, G) == perpendicular_line(G, altitude(F, C, G))
By perpendicular_line_definition on orthocenter(A, D, F), altitude(F, A, D), i we get altitude(F, A, D) == perpendicular_line(orthocenter(A, D, F), i)
By perpendicular_line_definition on orthocenter(A, B, G), k, h we get k == perpendicular_line(orthocenter(A, B, G), h)
By concurrent_sufficient_conditions on Line(A, C), Line(A, E), i we get concurrent(i, Line(A, C), Line(A, E))
By perpendicular_line_definition on orthocenter(A, F, H), altitude(A, F, H), Line(F, H) we get altitude(A, F, H) == perpendicular_line(orthocenter(A, F, H), Line(F, H))
By perpendicular_line_definition on G, j, altitude(A, G, H) we get j == perpendicular_line(G, altitude(A, G, H))
By perpendicular_line_definition on orthocenter(E, F, G), h, k we get h == perpendicular_line(orthocenter(E, F, G), k)
By perpendicular_line_definition on orthocenter(A, E, F), k, h we get k == perpendicular_line(orthocenter(A, E, F), h)
By perpendicular_line_definition on orthocenter(A, D, F), k, f we get k == perpendicular_line(orthocenter(A, D, F), f)
By perpendicular_line_definition on orthocenter(A, G, H), k, h we get k == perpendicular_line(orthocenter(A, G, H), h)
By line_unique_intersection_v0 on h, k, orthocenter(C, F, G), orthocenter(E, F, G) we get orthocenter(C, F, G) == orthocenter(E, F, G)
By perpendicular_line_definition on G, Line(E, G), altitude(F, E, G) we get Line(E, G) == perpendicular_line(G, altitude(F, E, G))
By line_unique_intersection_v0 on k, h, orthocenter(C, F, G), orthocenter(A, C, F) we get orthocenter(A, C, F) == orthocenter(C, F, G)
By perpendicular_line_definition on orthocenter(A, F, H), k, h we get k == perpendicular_line(orthocenter(A, F, H), h)
By perpendicular_line_definition on orthocenter(C, F, G), altitude(F, C, G), Line(C, G) we get altitude(F, C, G) == perpendicular_line(orthocenter(C, F, G), Line(C, G))
By perpendicular_line_definition on C, Line(A, C), altitude(F, A, C) we get Line(A, C) == perpendicular_line(C, altitude(F, A, C))
By perpendicular_line_definition on orthocenter(C, F, G), h, k we get h == perpendicular_line(orthocenter(C, F, G), k)
By line_unique_intersection_v0 on f, k, orthocenter(A, B, F), A we get A == orthocenter(A, B, F)
By perpendicular_line_definition on orthocenter(A, G, H), f, k we get f == perpendicular_line(orthocenter(A, G, H), k)
By perpendicular_line_definition on orthocenter(A, B, G), k, f we get k == perpendicular_line(orthocenter(A, B, G), f)
By perpendicular_line_definition on orthocenter(A, G, H), altitude(A, G, H), j we get altitude(A, G, H) == perpendicular_line(orthocenter(A, G, H), j)
By line_unique_intersection_v0 on k, h, orthocenter(A, D, F), orthocenter(A, C, F) we get orthocenter(A, C, F) == orthocenter(A, D, F)
By perpendicular_line_definition on orthocenter(E, F, G), altitude(F, E, G), Line(E, G) we get altitude(F, E, G) == perpendicular_line(orthocenter(E, F, G), Line(E, G))
By perpendicular_line_definition on orthocenter(A, C, F), h, k we get h == perpendicular_line(orthocenter(A, C, F), k)
By line_unique_intersection_v0 on h, k, orthocenter(C, F, G), orthocenter(D, F, G) we get orthocenter(C, F, G) == orthocenter(D, F, G)
By perpendicular_line_definition on orthocenter(D, F, G), k, f we get k == perpendicular_line(orthocenter(D, F, G), f)
By perpendicular_line_definition on A, Line(A, E), altitude(F, A, E) we get Line(A, E) == perpendicular_line(A, altitude(F, A, E))
By concurrent_sufficient_conditions on Line(A, C), Line(A, E), f we get concurrent(f, Line(A, C), Line(A, E))
By perpendicular_line_definition on orthocenter(A, C, F), k, f we get k == perpendicular_line(orthocenter(A, C, F), f)
By perpendicular_line_definition on H, j, altitude(A, G, H) we get j == perpendicular_line(H, altitude(A, G, H))
By perpendicular_line_definition on B, Line(B, F), altitude(A, B, F) we get Line(B, F) == perpendicular_line(B, altitude(A, B, F))
By concurrent_sufficient_conditions on Line(A, C), Line(A, E), k we get concurrent(k, Line(A, C), Line(A, E))
By perpendicular_line_definition on orthocenter(D, F, G), h, k we get h == perpendicular_line(orthocenter(D, F, G), k)
By perpendicular_line_definition on orthocenter(E, F, G), k, h we get k == perpendicular_line(orthocenter(E, F, G), h)
By perpendicular_line_definition on orthocenter(C, F, G), k, h we get k == perpendicular_line(orthocenter(C, F, G), h)
By line_unique_intersection_v0 on f, k, orthocenter(A, B, G), A we get A == orthocenter(A, B, G)
By perpendicular_line_definition on D, j, altitude(A, G, H) we get j == perpendicular_line(D, altitude(A, G, H))
By perpendicular_line_definition on A, Line(A, C), altitude(F, A, C) we get Line(A, C) == perpendicular_line(A, altitude(F, A, C))
By perpendicular_line_definition on orthocenter(A, E, F), k, f we get k == perpendicular_line(orthocenter(A, E, F), f)
By perpendicular_line_definition on orthocenter(E, F, G), k, f we get k == perpendicular_line(orthocenter(E, F, G), f)
By perpendicular_line_definition on B, Line(B, G), altitude(A, B, G) we get Line(B, G) == perpendicular_line(B, altitude(A, B, G))
By perpendicular_line_definition on orthocenter(A, G, H), k, f we get k == perpendicular_line(orthocenter(A, G, H), f)
By perpendicular_line_definition on orthocenter(A, B, F), k, f we get k == perpendicular_line(orthocenter(A, B, F), f)
By line_unique_intersection_v0 on h, k, orthocenter(C, F, G), orthocenter(A, D, F) we get orthocenter(A, D, F) == orthocenter(C, F, G)
By line_unique_intersection_v0 on h, k, orthocenter(A, E, F), F we get F == orthocenter(A, E, F)
By line_unique_intersection_v0 on h, k, orthocenter(A, C, F), orthocenter(D, F, G) we get orthocenter(A, C, F) == orthocenter(D, F, G)
By line_unique_intersection_v0 on k, h, orthocenter(E, F, G), orthocenter(D, F, G) we get orthocenter(D, F, G) == orthocenter(E, F, G)
By line_unique_intersection_v0 on k, f, orthocenter(A, F, H), A we get A == orthocenter(A, F, H)
By line_unique_intersection_v0 on h, k, F, orthocenter(C, F, G) we get F == orthocenter(C, F, G)
By line_unique_intersection_v0 on h, k, F, orthocenter(D, F, G) we get F == orthocenter(D, F, G)
By line_unique_intersection_v0 on f, k, orthocenter(A, B, F), orthocenter(A, G, H) we get orthocenter(A, B, F) == orthocenter(A, G, H)
By line_unique_intersection_v0 on k, h, orthocenter(A, C, F), orthocenter(A, E, F) we get orthocenter(A, C, F) == orthocenter(A, E, F)
By line_unique_intersection_v0 on k, f, orthocenter(A, G, H), A we get A == orthocenter(A, G, H)
By line_unique_intersection_v0 on k, f, orthocenter(A, F, H), orthocenter(A, B, G) we get orthocenter(A, B, G) == orthocenter(A, F, H)
By line_unique_intersection_v0 on k, f, orthocenter(A, B, G), orthocenter(A, B, F) we get orthocenter(A, B, F) == orthocenter(A, B, G)
By line_unique_intersection_v0 on h, k, orthocenter(E, F, G), orthocenter(A, E, F) we get orthocenter(A, E, F) == orthocenter(E, F, G)
By line_unique_intersection_v0 on k, f, orthocenter(A, F, H), orthocenter(A, B, F) we get orthocenter(A, B, F) == orthocenter(A, F, H)
By line_unique_intersection_v0 on k, h, orthocenter(A, D, F), F we get F == orthocenter(A, D, F)
By line_unique_intersection_v0 on h, k, orthocenter(C, F, G), orthocenter(A, E, F) we get orthocenter(A, E, F) == orthocenter(C, F, G)
By line_unique_intersection_v0 on k, h, orthocenter(A, D, F), orthocenter(A, E, F) we get orthocenter(A, D, F) == orthocenter(A, E, F)
By line_unique_intersection_v0 on f, k, orthocenter(A, G, H), orthocenter(A, B, G) we get orthocenter(A, B, G) == orthocenter(A, G, H)
By line_unique_intersection_v0 on k, h, orthocenter(D, F, G), orthocenter(A, D, F) we get orthocenter(A, D, F) == orthocenter(D, F, G)
By line_unique_intersection_v0 on h, k, orthocenter(E, F, G), orthocenter(A, C, F) we get orthocenter(A, C, F) == orthocenter(E, F, G)
By line_unique_intersection_v0 on h, k, orthocenter(E, F, G), F we get F == orthocenter(E, F, G)
By line_unique_intersection_v0 on h, k, F, orthocenter(A, C, F) we get F == orthocenter(A, C, F)
By line_unique_intersection_v0 on h, k, orthocenter(D, F, G), orthocenter(A, E, F) we get orthocenter(A, E, F) == orthocenter(D, F, G)
By line_unique_intersection_v0 on k, f, orthocenter(A, F, H), orthocenter(A, G, H) we get orthocenter(A, F, H) == orthocenter(A, G, H)
By line_unique_intersection_v0 on k, h, orthocenter(A, D, F), orthocenter(E, F, G) we get orthocenter(A, D, F) == orthocenter(E, F, G)
By between_implies_orientation on C, D, F, E we get orientation(C, D, F) == orientation(C, F, E) mod 360, orientation(C, D, E) == orientation(C, D, F) mod 360
By same_angle_v0 on E, F, C, G we get angle(C, E, G) == angle(F, E, G) mod 360
By between_imply_not_between on D, midpoint(D, E), E we get collinear_and_not_between(E, D, midpoint(D, E))
By between_imply_not_between on D, G, H we get collinear_and_not_between(G, D, H)
By same_angle_v1 on D, G, H, B we get angle(G, D, B) == angle(H, D, B) mod 360
By between_implies_orientation on F, E, D, C we get orientation(C, F, D) == orientation(D, F, E) mod 360, orientation(C, F, E) == orientation(D, F, E) mod 360
By same_angle_v3 on D, C, F, B we get angle(C, D, B) == angle(F, D, B) + 180 mod 360
By same_angle_v2 on G, H, D, E we get angle(H, G, E) == angle(D, G, E) + 180 mod 360
By same_angle_v0 on E, F, D, G we get angle(D, E, G) == angle(F, E, G) mod 360
By same_angle_v0 on B, H, A, D we get angle(A, B, D) == angle(H, B, D) mod 360
By same_angle_v0 on E, C, D, G we get angle(C, E, G) == angle(D, E, G) mod 360
By same_angle_v3 on D, C, E, B we get angle(C, D, B) == angle(E, D, B) + 180 mod 360
By same_angle_v1 on D, E, F, B we get angle(E, D, B) == angle(F, D, B) mod 360
By same_angle_v2 on G, A, F, E we get angle(A, G, E) == angle(F, G, E) + 180 mod 360
By between_implies_orientation on D, C, F, E we get orientation(C, F, D) == orientation(D, F, E) mod 360, orientation(C, E, D) == orientation(C, F, D) mod 360
By between_implies_orientation on E, C, D, F we get orientation(C, D, E) == orientation(D, F, E) mod 360, orientation(C, D, E) == orientation(C, F, E) mod 360
By between_imply_not_between on C, D, F we get collinear_and_not_between(D, C, F)
By between_imply_not_between on C, D, E we get collinear_and_not_between(D, C, E)
By between_implies_orientation on C, E, F, D we get orientation(C, E, F) == orientation(C, F, D) mod 360, orientation(C, E, D) == orientation(C, E, F) mod 360
By between_implies_orientation on E, F, D, C we get orientation(C, E, D) == orientation(D, E, F) mod 360, orientation(C, E, F) == orientation(D, E, F) mod 360
By between_implies_orientation on D, E, F, C we get orientation(C, D, F) == orientation(D, E, F) mod 360, orientation(C, D, E) == orientation(D, E, F) mod 360
By between_implies_orientation on F, C, D, E we get orientation(C, D, F) == orientation(D, E, F) mod 360, orientation(C, D, F) == orientation(C, E, F) mod 360
By between_imply_not_between on D, F, E we get collinear_and_not_between(E, D, F)
By between_imply_not_between on C, F, E we get collinear_and_not_between(E, C, F)
By between_imply_not_between on E, F, D we get collinear_and_not_between(D, E, F)
By between_imply_not_between on E, D, C we get collinear_and_not_between(C, E, D)
By between_imply_not_between on F, D, C we get collinear_and_not_between(C, F, D)
By between_imply_not_between on H, G, D we get collinear_and_not_between(D, H, G)
By between_imply_not_between on E, midpoint(D, E), D we get collinear_and_not_between(D, E, midpoint(D, E))
By between_imply_not_between on E, F, C we get collinear_and_not_between(C, E, F)
By parallel_line_definition on orthocenter(D, F, G), h, f we get h == parallel_line(orthocenter(D, F, G), f)
By parallel_line_definition on orthocenter(A, E, F), h, f we get h == parallel_line(orthocenter(A, E, F), f)
By parallel_line_definition on orthocenter(A, C, F), h, f we get h == parallel_line(orthocenter(A, C, F), f)
By parallel_line_definition on orthocenter(A, F, H), f, h we get f == parallel_line(orthocenter(A, F, H), h)
By parallel_line_definition on orthocenter(A, B, G), f, h we get f == parallel_line(orthocenter(A, B, G), h)
By parallel_line_definition on orthocenter(C, F, G), h, f we get h == parallel_line(orthocenter(C, F, G), f)
By parallel_line_definition on orthocenter(A, D, F), h, f we get h == parallel_line(orthocenter(A, D, F), f)
By circle_by_three_points_and_center on A, E, H, D we get A == center(Circle(D, E, H))
By parallel_line_definition on orthocenter(A, G, H), f, h we get f == parallel_line(orthocenter(A, G, H), h)
By parallel_line_definition on orthocenter(A, B, F), f, h we get f == parallel_line(orthocenter(A, B, F), h)
By parallel_line_definition on orthocenter(E, F, G), h, f we get h == parallel_line(orthocenter(E, F, G), f)
By different_points_v1 on F, H we get 0 != distance(F, H)
By in_imply_collinear on orthocenter(C, F, G), C, D we get collinear(C, D, orthocenter(C, F, G))
By different_points_v1 on B, G we get 0 != distance(B, G)
By same_angle_v0 on B, H, A, F we get angle(A, B, F) == angle(H, B, F) mod 360
By same_angle_v3 on F, D, E, B we get angle(D, F, B) == angle(E, F, B) + 180 mod 360
By same_angle_v3 on F, C, E, B we get angle(C, F, B) == angle(E, F, B) + 180 mod 360
By different_points_v1 on D, B we get 0 != distance(B, D)
By same_angle_v2 on G, F, A, B we get angle(F, G, B) == angle(A, G, B) + 180 mod 360
By same_angle_v0 on F, G, A, H we get angle(A, F, H) == angle(G, F, H) mod 360
By same_angle_v1 on H, D, G, F we get angle(D, H, F) == angle(G, H, F) mod 360
By different_points_v1 on G, C we get 0 != distance(C, G)
By same_angle_v1 on H, A, B, F we get angle(A, H, F) == angle(B, H, F) mod 360
By same_angle_v3 on G, D, H, B we get angle(D, G, B) == angle(H, G, B) + 180 mod 360
By different_points_v1 on B, F we get 0 != distance(B, F)
By same_angle_v2 on F, C, E, H we get angle(C, F, H) == angle(E, F, H) + 180 mod 360
By same_angle_v1 on F, G, A, B we get angle(A, F, B) == angle(G, F, B) mod 360
By same_angle_v1 on C, D, F, G we get angle(D, C, G) == angle(F, C, G) mod 360
By same_angle_v0 on F, D, C, H we get angle(C, F, H) == angle(D, F, H) mod 360
By same_angle_v0 on B, A, H, G we get angle(A, B, G) == angle(H, B, G) mod 360
By in_imply_collinear on orthocenter(A, B, F), G, F we get collinear(F, G, orthocenter(A, B, F))
By same_angle_v1 on C, E, F, G we get angle(E, C, G) == angle(F, C, G) mod 360
By same_angle_v1 on C, D, E, G we get angle(D, C, G) == angle(E, C, G) mod 360
By same_angle_v2 on G, F, A, C we get angle(F, G, C) == angle(A, G, C) + 180 mod 360
By same_angle_v0 on F, C, D, B we get angle(C, F, B) == angle(D, F, B) mod 360
By same_angle_v3 on F, D, E, H we get angle(D, F, H) == angle(E, F, H) + 180 mod 360
By same_angle_v3 on G, D, H, C we get angle(D, G, C) == angle(H, G, C) + 180 mod 360
By in_imply_collinear on orthocenter(A, E, F), C, E we get collinear(C, E, orthocenter(A, E, F))
By in_imply_collinear on midpoint(D, E), F, G we get collinear(F, G, midpoint(D, E))
By sss_anti_congruence_v0 on G, D, E, G, E, D we get anti_congruent_triangles(D, E, G, E, D, G)
By in_imply_collinear on orthocenter(A, F, H), H, B we get collinear(B, H, orthocenter(A, F, H))
By in_imply_collinear on orthocenter(A, C, F), G, F we get collinear(F, G, orthocenter(A, C, F))
By in_imply_collinear on orthocenter(C, F, G), C, E we get collinear(C, E, orthocenter(C, F, G))
By between_imply_segment_sum on F, D, C we get distance(C, F) == distance(D, F) + distance(C, D)
By in_imply_collinear on orthocenter(A, F, H), G, A we get collinear(A, G, orthocenter(A, F, H))
By in_imply_collinear on orthocenter(E, F, G), A, G we get collinear(A, G, orthocenter(E, F, G))
By in_imply_collinear on orthocenter(A, F, H), B, A we get collinear(A, B, orthocenter(A, F, H))
By in_imply_collinear on orthocenter(A, D, F), G, F we get collinear(F, G, orthocenter(A, D, F))
By in_imply_collinear on orthocenter(D, F, G), D, E we get collinear(D, E, orthocenter(D, F, G))
By in_imply_collinear on orthocenter(A, E, F), D, C we get collinear(C, D, orthocenter(A, E, F))
By line_containment_inequality on orthocenter(A, F, H), D, k we get D != orthocenter(A, F, H)
By in_imply_collinear on orthocenter(A, E, F), F, G we get collinear(F, G, orthocenter(A, E, F))
By in_imply_collinear on orthocenter(C, F, G), F, A we get collinear(A, F, orthocenter(C, F, G))
By sss_anti_congruence_v0 on F, E, G, F, D, G we get anti_congruent_triangles(D, F, G, E, F, G)
By in_imply_collinear on orthocenter(A, E, F), E, F we get collinear(E, F, orthocenter(A, E, F))
By in_imply_collinear on orthocenter(A, F, H), G, F we get collinear(F, G, orthocenter(A, F, H))
By in_imply_collinear on orthocenter(A, C, F), D, F we get collinear(D, F, orthocenter(A, C, F))
By in_imply_collinear on orthocenter(A, B, G), F, G we get collinear(F, G, orthocenter(A, B, G))
By in_imply_collinear on midpoint(D, E), F, A we get collinear(A, F, midpoint(D, E))
By in_imply_collinear on orthocenter(E, F, G), C, E we get collinear(C, E, orthocenter(E, F, G))
By in_imply_collinear on orthocenter(A, G, H), F, G we get collinear(F, G, orthocenter(A, G, H))
By in_imply_collinear on midpoint(D, E), A, G we get collinear(A, G, midpoint(D, E))
By in_imply_collinear on orthocenter(A, D, F), F, A we get collinear(A, F, orthocenter(A, D, F))
By in_imply_collinear on orthocenter(A, C, F), C, F we get collinear(C, F, orthocenter(A, C, F))
By in_imply_collinear on orthocenter(A, E, F), D, E we get collinear(D, E, orthocenter(A, E, F))
By in_imply_collinear on orthocenter(A, D, F), E, C we get collinear(C, E, orthocenter(A, D, F))
By in_imply_collinear on orthocenter(A, B, G), B, A we get collinear(A, B, orthocenter(A, B, G))
By in_imply_collinear on orthocenter(C, F, G), F, D we get collinear(D, F, orthocenter(C, F, G))
By in_imply_collinear on orthocenter(C, F, G), A, G we get collinear(A, G, orthocenter(C, F, G))
By in_imply_collinear on orthocenter(D, F, G), C, D we get collinear(C, D, orthocenter(D, F, G))
By in_imply_collinear on orthocenter(A, B, G), A, H we get collinear(A, H, orthocenter(A, B, G))
By in_imply_collinear on orthocenter(A, D, F), C, D we get collinear(C, D, orthocenter(A, D, F))
By in_imply_collinear on orthocenter(A, G, H), H, A we get collinear(A, H, orthocenter(A, G, H))
By sss_anti_congruence_v1 on G, E, D, G, D, E we get anti_congruent_triangles(D, E, G, E, D, G)
By in_imply_collinear on orthocenter(A, E, F), F, D we get collinear(D, F, orthocenter(A, E, F))
By sss_anti_congruence_v1 on F, G, E, F, G, D we get anti_congruent_triangles(D, F, G, E, F, G)
By in_imply_collinear on orthocenter(A, B, F), H, A we get collinear(A, H, orthocenter(A, B, F))
By in_imply_collinear on orthocenter(E, F, G), D, E we get collinear(D, E, orthocenter(E, F, G))
By in_imply_collinear on orthocenter(C, F, G), E, D we get collinear(D, E, orthocenter(C, F, G))
By in_imply_collinear on orthocenter(A, B, F), F, A we get collinear(A, F, orthocenter(A, B, F))
By in_imply_collinear on orthocenter(A, C, F), D, C we get collinear(C, D, orthocenter(A, C, F))
By in_imply_collinear on orthocenter(D, F, G), E, F we get collinear(E, F, orthocenter(D, F, G))
By in_imply_collinear on orthocenter(A, C, F), E, C we get collinear(C, E, orthocenter(A, C, F))
By in_imply_collinear on orthocenter(A, G, H), F, A we get collinear(A, F, orthocenter(A, G, H))
By in_imply_collinear on orthocenter(C, F, G), F, G we get collinear(F, G, orthocenter(C, F, G))
By in_imply_collinear on orthocenter(A, B, F), A, G we get collinear(A, G, orthocenter(A, B, F))
By in_imply_collinear on orthocenter(A, E, F), C, F we get collinear(C, F, orthocenter(A, E, F))
By in_imply_collinear on orthocenter(E, F, G), A, F we get collinear(A, F, orthocenter(E, F, G))
By in_imply_collinear on orthocenter(A, C, F), F, E we get collinear(E, F, orthocenter(A, C, F))
By sss_anti_congruence_v1 on E, D, G, D, E, G we get anti_congruent_triangles(D, E, G, E, D, G)
By in_imply_collinear on orthocenter(A, B, F), B, H we get collinear(B, H, orthocenter(A, B, F))
By in_imply_collinear on orthocenter(A, C, F), D, E we get collinear(D, E, orthocenter(A, C, F))
By in_imply_collinear on orthocenter(E, F, G), C, D we get collinear(C, D, orthocenter(E, F, G))
By in_imply_collinear on orthocenter(A, D, F), F, E we get collinear(E, F, orthocenter(A, D, F))
By in_imply_collinear on orthocenter(E, F, G), G, F we get collinear(F, G, orthocenter(E, F, G))
By in_imply_collinear on orthocenter(A, B, G), G, A we get collinear(A, G, orthocenter(A, B, G))
By in_imply_collinear on orthocenter(D, F, G), F, D we get collinear(D, F, orthocenter(D, F, G))
By in_imply_collinear on orthocenter(A, C, F), G, A we get collinear(A, G, orthocenter(A, C, F))
By in_imply_collinear on orthocenter(D, F, G), F, G we get collinear(F, G, orthocenter(D, F, G))
By in_imply_collinear on orthocenter(A, F, H), A, H we get collinear(A, H, orthocenter(A, F, H))
By in_imply_collinear on orthocenter(A, D, F), F, C we get collinear(C, F, orthocenter(A, D, F))
By in_imply_collinear on orthocenter(A, B, G), A, F we get collinear(A, F, orthocenter(A, B, G))
By in_imply_collinear on orthocenter(E, F, G), F, E we get collinear(E, F, orthocenter(E, F, G))
By line_inequality on Line(F, H), g, H we get g != Line(F, H)
By in_imply_collinear on orthocenter(C, F, G), F, C we get collinear(C, F, orthocenter(C, F, G))
By in_imply_collinear on orthocenter(C, F, G), E, F we get collinear(E, F, orthocenter(C, F, G))
By sss_anti_congruence_v0 on F, G, D, F, G, E we get anti_congruent_triangles(D, F, G, E, F, G)
By line_containment_inequality on orthocenter(A, C, F), H, k we get H != orthocenter(A, C, F)
By in_imply_collinear on orthocenter(E, F, G), F, C we get collinear(C, F, orthocenter(E, F, G))
By in_imply_collinear on orthocenter(D, F, G), C, F we get collinear(C, F, orthocenter(D, F, G))
By in_imply_collinear on orthocenter(A, B, G), B, H we get collinear(B, H, orthocenter(A, B, G))
By in_imply_collinear on orthocenter(D, F, G), C, E we get collinear(C, E, orthocenter(D, F, G))
By in_imply_collinear on orthocenter(A, C, F), A, F we get collinear(A, F, orthocenter(A, C, F))
By in_imply_collinear on orthocenter(D, F, G), F, A we get collinear(A, F, orthocenter(D, F, G))
By in_imply_collinear on orthocenter(A, D, F), F, D we get collinear(D, F, orthocenter(A, D, F))
By in_imply_collinear on orthocenter(A, G, H), A, G we get collinear(A, G, orthocenter(A, G, H))
By in_imply_collinear on orthocenter(D, F, G), G, A we get collinear(A, G, orthocenter(D, F, G))
By in_imply_collinear on orthocenter(E, F, G), D, F we get collinear(D, F, orthocenter(E, F, G))
By in_imply_collinear on orthocenter(A, G, H), B, H we get collinear(B, H, orthocenter(A, G, H))
By in_imply_collinear on orthocenter(A, F, H), F, A we get collinear(A, F, orthocenter(A, F, H))
By in_imply_collinear on orthocenter(A, D, F), G, A we get collinear(A, G, orthocenter(A, D, F))
By sas_anti_congruence on G, F, D, G, F, E we get anti_congruent_triangles(D, F, G, E, F, G)
By line_inequality on altitude(F, D, G), Line(A, E), F we get Line(A, E) != altitude(F, D, G)
By sss_anti_congruence_v1 on G, E, D, G, D, E we get anti_congruent_triangles(D, E, G, E, D, G)
By in_imply_collinear on orthocenter(A, G, H), B, A we get collinear(A, B, orthocenter(A, G, H))
By in_imply_collinear on orthocenter(A, E, F), G, A we get collinear(A, G, orthocenter(A, E, F))
By in_imply_collinear on orthocenter(A, B, F), B, A we get collinear(A, B, orthocenter(A, B, F))
By in_imply_collinear on orthocenter(A, E, F), F, A we get collinear(A, F, orthocenter(A, E, F))
By between_imply_segment_sum on E, F, D we get distance(D, E) == distance(E, F) + distance(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on H, G, C we get H not in Line(C, G)
By parallel_line_angles_reverse_v0 on C, D, B, H we get angle(C, D, B) == angle(H, B, D) mod 360
By in_imply_collinear on orthocenter(A, D, F), D, E we get collinear(D, E, orthocenter(A, D, F))
By line_inequality on altitude(F, D, G), Line(A, C), F we get Line(A, C) != altitude(F, D, G)
By sss_anti_congruence_v1 on D, G, E, E, G, D we get anti_congruent_triangles(D, E, G, E, D, G)
By line_inequality on altitude(A, B, F), Line(B, E), A we get Line(B, E) != altitude(A, B, F)
By sss_anti_congruence_v0 on G, D, F, G, E, F we get anti_congruent_triangles(D, F, G, E, F, G)
By line_containment_inequality on orthocenter(A, E, F), C, k we get C != orthocenter(A, E, F)
By line_containment_inequality on orthocenter(C, F, G), A, h we get A != orthocenter(C, F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on C, H, F we get C not in Line(F, H)
By line_containment_inequality on orthocenter(A, E, F), B, h we get B != orthocenter(A, E, F)
By isosceles_triangle_properties on G, D, E we get distance(D, G) == distance(E, G), angle(D, E, G) == angle(G, D, E) mod 360
By sss_anti_congruence_v0 on E, G, F, D, G, F we get anti_congruent_triangles(D, F, G, E, F, G)
By sss_anti_congruence_v1 on E, D, G, D, E, G we get anti_congruent_triangles(D, E, G, E, D, G)
By sas_anti_congruence on D, F, G, E, F, G we get anti_congruent_triangles(D, F, G, E, F, G)
By sss_anti_congruence_v1 on F, G, E, F, G, D we get anti_congruent_triangles(D, F, G, E, F, G)
By parallel_line_angles_reverse_v3 on E, D, B, H we get angle(E, D, B) == angle(H, B, D) + 180 mod 360
By line_containment_inequality on orthocenter(A, G, H), H, k we get H != orthocenter(A, G, H)
By line_inequality on Line(B, F), Line(A, C), B we get Line(A, C) != Line(B, F)
By sss_anti_congruence_v0 on E, G, D, D, G, E we get anti_congruent_triangles(D, E, G, E, D, G)
By line_containment_inequality on orthocenter(E, F, G), G, h we get G != orthocenter(E, F, G)
By line_inequality on Line(E, G), g, E we get g != Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on D, G, E we get D not in Line(E, G)
By parallel_line_angles_reverse_v2 on H, B, D, F we get angle(H, B, D) == angle(F, D, B) + 180 mod 360
By parallel_line_angles_reverse_v3 on F, D, B, H we get angle(F, D, B) == angle(H, B, D) + 180 mod 360
By point_on_perpendicular_bisector on E, D, orthocenter(E, F, G), k we get distance(D, orthocenter(E, F, G)) == distance(E, orthocenter(E, F, G))
By sss_anti_congruence_v0 on E, G, F, D, G, F we get anti_congruent_triangles(D, F, G, E, F, G)
By sss_anti_congruence_v1 on D, G, E, E, G, D we get anti_congruent_triangles(D, E, G, E, D, G)
By between_imply_segment_sum on H, G, D we get distance(D, H) == distance(G, H) + distance(D, G)
By line_inequality on Line(B, D), h, B we get h != Line(B, D)
By sss_anti_congruence_v1 on D, G, F, E, G, F we get anti_congruent_triangles(D, F, G, E, F, G)
By sss_anti_congruence_v0 on E, G, F, D, G, F we get anti_congruent_triangles(D, F, G, E, F, G)
By parallel_line_angles_reverse_v2 on H, B, D, E we get angle(H, B, D) == angle(E, D, B) + 180 mod 360
By sss_anti_congruence_v0 on D, E, G, E, D, G we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v0 on D, F, G, E, F, G we get anti_congruent_triangles(D, F, G, E, F, G)
By point_on_perpendicular_bisector on D, E, orthocenter(D, F, G), k we get distance(D, orthocenter(D, F, G)) == distance(E, orthocenter(D, F, G))
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, D we get F not in Line(B, D)
By line_containment_inequality on orthocenter(A, C, F), G, h we get G != orthocenter(A, C, F)
By line_containment_inequality on orthocenter(A, B, G), D, k we get D != orthocenter(A, B, G)
By parallel_line_angles_reverse_v3 on F, D, B, A we get angle(F, D, B) == angle(A, B, D) + 180 mod 360
By parallel_line_angles_reverse_v3 on E, D, B, A we get angle(E, D, B) == angle(A, B, D) + 180 mod 360
By parallel_line_angles_reverse_v2 on A, B, D, E we get angle(A, B, D) == angle(E, D, B) + 180 mod 360
By sss_anti_congruence_v0 on E, G, D, D, G, E we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v0 on F, E, G, F, D, G we get anti_congruent_triangles(D, F, G, E, F, G)
By line_circle_intersection_has_at_most_two_points_0 on E, D, C, Circle(A, D, E) we get C not in Circle(A, D, E)
By line_containment_inequality on orthocenter(A, G, H), F, f we get F != orthocenter(A, G, H)
By sss_anti_congruence_v0 on G, D, E, G, E, D we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v1 on G, E, F, G, D, F we get anti_congruent_triangles(D, F, G, E, F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on A, E, G we get A not in Line(E, G)
By line_inequality on altitude(F, A, E), Line(A, E), F we get Line(A, E) != altitude(F, A, E)
By sss_anti_congruence_v1 on D, G, E, E, G, D we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v1 on E, F, G, D, F, G we get anti_congruent_triangles(D, F, G, E, F, G)
By line_containment_inequality on orthocenter(A, C, F), D, k we get D != orthocenter(A, C, F)
By sss_anti_congruence_v1 on G, E, F, G, D, F we get anti_congruent_triangles(D, F, G, E, F, G)
By point_on_perpendicular_bisector on D, E, orthocenter(A, F, H), k we get distance(D, orthocenter(A, F, H)) == distance(E, orthocenter(A, F, H))
By line_inequality on altitude(F, A, E), Line(B, E), F we get Line(B, E) != altitude(F, A, E)
By sss_anti_congruence_v0 on G, D, E, G, E, D we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v0 on D, E, G, E, D, G we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v1 on D, G, E, E, G, D we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v0 on D, F, G, E, F, G we get anti_congruent_triangles(D, F, G, E, F, G)
By sss_anti_congruence_v0 on D, F, G, E, F, G we get anti_congruent_triangles(D, F, G, E, F, G)
By sss_anti_congruence_v1 on E, D, G, D, E, G we get anti_congruent_triangles(D, E, G, E, D, G)
By line_inequality on Line(B, F), k, B we get k != Line(B, F)
By parallel_line_angles_reverse_v2 on A, B, D, F we get angle(A, B, D) == angle(F, D, B) + 180 mod 360
By sss_anti_congruence_v1 on E, D, G, D, E, G we get anti_congruent_triangles(D, E, G, E, D, G)
By point_on_perpendicular_bisector on E, D, orthocenter(A, B, F), k we get distance(D, orthocenter(A, B, F)) == distance(E, orthocenter(A, B, F))
By line_inequality on Line(F, H), Line(B, E), F we get Line(B, E) != Line(F, H)
By sss_anti_congruence_v1 on D, G, F, E, G, F we get anti_congruent_triangles(D, F, G, E, F, G)
By sss_anti_congruence_v1 on G, E, F, G, D, F we get anti_congruent_triangles(D, F, G, E, F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on H, G, B we get H not in Line(B, G)
By sss_anti_congruence_v1 on D, G, F, E, G, F we get anti_congruent_triangles(D, F, G, E, F, G)
By sss_anti_congruence_v1 on E, F, G, D, F, G we get anti_congruent_triangles(D, F, G, E, F, G)
By sss_anti_congruence_v0 on D, F, G, E, F, G we get anti_congruent_triangles(D, F, G, E, F, G)
By sss_anti_congruence_v0 on G, F, E, G, F, D we get anti_congruent_triangles(D, F, G, E, F, G)
By sss_anti_congruence_v0 on G, F, E, G, F, D we get anti_congruent_triangles(D, F, G, E, F, G)
By sss_anti_congruence_v0 on E, G, D, D, G, E we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v0 on G, D, F, G, E, F we get anti_congruent_triangles(D, F, G, E, F, G)
By sss_anti_congruence_v1 on E, F, G, D, F, G we get anti_congruent_triangles(D, F, G, E, F, G)
By double_perpendicular_and_parallel_v0 on altitude(A, G, H), j, altitude(F, D, G) we get parallel(altitude(A, G, H), altitude(F, D, G))
By sas_anti_congruence on E, F, G, D, F, G we get anti_congruent_triangles(D, F, G, E, F, G)
By line_inequality on Line(B, D), Line(A, E), B we get Line(A, E) != Line(B, D)
By sss_anti_congruence_v0 on E, G, F, D, G, F we get anti_congruent_triangles(D, F, G, E, F, G)
By sss_anti_congruence_v0 on G, D, E, G, E, D we get anti_congruent_triangles(D, E, G, E, D, G)
By line_containment_inequality on orthocenter(A, G, H), D, k we get D != orthocenter(A, G, H)
By point_on_perpendicular_bisector on D, E, orthocenter(C, F, G), k we get distance(D, orthocenter(C, F, G)) == distance(E, orthocenter(C, F, G))
By sss_anti_congruence_v1 on G, F, D, G, F, E we get anti_congruent_triangles(D, F, G, E, F, G)
By line_containment_inequality on orthocenter(A, F, H), F, f we get F != orthocenter(A, F, H)
By sss_anti_congruence_v0 on F, E, G, F, D, G we get anti_congruent_triangles(D, F, G, E, F, G)
By line_containment_inequality on orthocenter(D, F, G), C, k we get C != orthocenter(D, F, G)
By line_inequality on altitude(F, A, D), f, F we get f != altitude(F, A, D)
By sss_anti_congruence_v0 on D, E, G, E, D, G we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v0 on G, D, F, G, E, F we get anti_congruent_triangles(D, F, G, E, F, G)
By sss_anti_congruence_v1 on E, F, G, D, F, G we get anti_congruent_triangles(D, F, G, E, F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, D we get C not in Line(B, D)
By sss_anti_congruence_v0 on G, F, E, G, F, D we get anti_congruent_triangles(D, F, G, E, F, G)
By sss_anti_congruence_v0 on F, G, D, F, G, E we get anti_congruent_triangles(D, F, G, E, F, G)
By sss_anti_congruence_v0 on G, F, E, G, F, D we get anti_congruent_triangles(D, F, G, E, F, G)
By sss_anti_congruence_v1 on D, G, F, E, G, F we get anti_congruent_triangles(D, F, G, E, F, G)
By sss_anti_congruence_v1 on F, D, G, F, E, G we get anti_congruent_triangles(D, F, G, E, F, G)
By sss_anti_congruence_v1 on E, D, G, D, E, G we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v1 on G, E, D, G, D, E we get anti_congruent_triangles(D, E, G, E, D, G)
By point_on_perpendicular_bisector on D, E, orthocenter(A, C, F), k we get distance(D, orthocenter(A, C, F)) == distance(E, orthocenter(A, C, F))
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, G we get D not in Line(B, G)
By isosceles_triangle_properties on G, E, D we get distance(D, G) == distance(E, G), angle(E, D, G) == angle(G, E, D) mod 360
By sss_anti_congruence_v1 on D, G, E, E, G, D we get anti_congruent_triangles(D, E, G, E, D, G)
By line_inequality on Line(B, G), Line(A, C), G we get Line(A, C) != Line(B, G)
By sss_anti_congruence_v1 on F, G, E, F, G, D we get anti_congruent_triangles(D, F, G, E, F, G)
By line_circle_intersection_has_at_most_two_points_0 on D, E, midpoint(D, E), Circle(A, D, E) we get midpoint(D, E) not in Circle(A, D, E)
By line_inequality on Line(E, G), Line(A, E), G we get Line(A, E) != Line(E, G)
By not_in_line_equivalent_to_not_collinear_v0_r on H, F, B we get H not in Line(B, F)
By sss_anti_congruence_v0 on G, D, F, G, E, F we get anti_congruent_triangles(D, F, G, E, F, G)
By line_inequality on altitude(F, D, G), Line(B, E), F we get Line(B, E) != altitude(F, D, G)
By double_perpendicular_and_parallel_v0_r on i, altitude(F, A, D), g we get perpendicular(g, altitude(F, A, D))
By point_on_perpendicular_bisector on E, D, orthocenter(A, B, G), k we get distance(D, orthocenter(A, B, G)) == distance(E, orthocenter(A, B, G))
By not_in_line_equivalent_to_not_collinear_v0_r on B, H, F we get B not in Line(F, H)
By sss_anti_congruence_v1 on G, E, F, G, D, F we get anti_congruent_triangles(D, F, G, E, F, G)
By sss_anti_congruence_v1 on E, F, G, D, F, G we get anti_congruent_triangles(D, F, G, E, F, G)
By line_containment_inequality on orthocenter(A, B, F), C, f we get C != orthocenter(A, B, F)
By sss_anti_congruence_v1 on G, F, D, G, F, E we get anti_congruent_triangles(D, F, G, E, F, G)
By sss_anti_congruence_v0 on D, F, G, E, F, G we get anti_congruent_triangles(D, F, G, E, F, G)
By line_containment_inequality on orthocenter(A, B, F), D, f we get D != orthocenter(A, B, F)
By sss_anti_congruence_v0 on E, G, D, D, G, E we get anti_congruent_triangles(D, E, G, E, D, G)
By line_containment_inequality on midpoint(D, E), C, k we get C != midpoint(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on E, F, H we get E not in Line(F, H)
By point_on_perpendicular_bisector on E, D, orthocenter(A, E, F), k we get distance(D, orthocenter(A, E, F)) == distance(E, orthocenter(A, E, F))
By sss_anti_congruence_v1 on G, E, F, G, D, F we get anti_congruent_triangles(D, F, G, E, F, G)
By between_imply_segment_sum on E, D, C we get distance(C, E) == distance(D, E) + distance(C, D)
By sss_anti_congruence_v0 on D, E, G, E, D, G we get anti_congruent_triangles(D, E, G, E, D, G)
By line_containment_inequality on orthocenter(A, B, G), E, k we get E != orthocenter(A, B, G)
By line_containment_inequality on orthocenter(A, E, F), G, h we get G != orthocenter(A, E, F)
By sss_anti_congruence_v1 on G, F, D, G, F, E we get anti_congruent_triangles(D, F, G, E, F, G)
By sss_anti_congruence_v0 on F, E, G, F, D, G we get anti_congruent_triangles(D, F, G, E, F, G)
By sss_anti_congruence_v0 on F, G, D, F, G, E we get anti_congruent_triangles(D, F, G, E, F, G)
By line_inequality on Line(F, H), j, F we get j != Line(F, H)
By line_inequality on Line(F, H), Line(A, C), F we get Line(A, C) != Line(F, H)
By point_on_perpendicular_bisector on E, D, orthocenter(A, G, H), k we get distance(D, orthocenter(A, G, H)) == distance(E, orthocenter(A, G, H))
By sss_anti_congruence_v1 on F, D, G, F, E, G we get anti_congruent_triangles(D, F, G, E, F, G)
By sss_anti_congruence_v0 on G, D, F, G, E, F we get anti_congruent_triangles(D, F, G, E, F, G)
By sss_anti_congruence_v1 on G, F, D, G, F, E we get anti_congruent_triangles(D, F, G, E, F, G)
By sss_anti_congruence_v1 on F, D, G, F, E, G we get anti_congruent_triangles(D, F, G, E, F, G)
By sss_anti_congruence_v0 on G, D, E, G, E, D we get anti_congruent_triangles(D, E, G, E, D, G)
By sas_anti_congruence on G, F, E, G, F, D we get anti_congruent_triangles(D, F, G, E, F, G)
By sss_anti_congruence_v1 on G, E, D, G, D, E we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v0 on D, E, G, E, D, G we get anti_congruent_triangles(D, E, G, E, D, G)
By between_imply_segment_sum on C, F, E we get distance(C, E) == distance(C, F) + distance(E, F)
By line_containment_inequality on orthocenter(C, F, G), G, h we get G != orthocenter(C, F, G)
By sss_anti_congruence_v0 on E, G, D, D, G, E we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v0 on G, F, E, G, F, D we get anti_congruent_triangles(D, F, G, E, F, G)
By sss_anti_congruence_v1 on F, D, G, F, E, G we get anti_congruent_triangles(D, F, G, E, F, G)
By line_inequality on altitude(A, F, H), Line(B, E), A we get Line(B, E) != altitude(A, F, H)
By line_containment_inequality on orthocenter(A, B, F), E, f we get E != orthocenter(A, B, F)
By sss_anti_congruence_v1 on G, E, D, G, D, E we get anti_congruent_triangles(D, E, G, E, D, G)
By sss_anti_congruence_v1 on D, G, F, E, G, F we get anti_congruent_triangles(D, F, G, E, F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on G, H, F we get G not in Line(F, H)
By sss_anti_congruence_v0 on F, G, D, F, G, E we get anti_congruent_triangles(D, F, G, E, F, G)
By sss_anti_congruence_v1 on G, F, D, G, F, E we get anti_congruent_triangles(D, F, G, E, F, G)
By line_inequality on altitude(F, A, D), g, F we get g != altitude(F, A, D)
By sss_anti_congruence_v0 on E, G, F, D, G, F we get anti_congruent_triangles(D, F, G, E, F, G)
By point_on_perpendicular_bisector on E, D, orthocenter(A, D, F), k we get distance(D, orthocenter(A, D, F)) == distance(E, orthocenter(A, D, F))
By line_containment_inequality on orthocenter(A, E, F), D, k we get D != orthocenter(A, E, F)
By sss_anti_congruence_v0 on F, E, G, F, D, G we get anti_congruent_triangles(D, F, G, E, F, G)
By line_containment_inequality on orthocenter(D, F, G), E, k we get E != orthocenter(D, F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on E, G, B we get E not in Line(B, G)
By sss_anti_congruence_v0 on F, G, D, F, G, E we get anti_congruent_triangles(D, F, G, E, F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on G, F, B we get G not in Line(B, F)
By line_inequality on Line(C, G), f, G we get f != Line(C, G)
By sss_anti_congruence_v1 on F, D, G, F, E, G we get anti_congruent_triangles(D, F, G, E, F, G)
By sss_anti_congruence_v1 on F, G, E, F, G, D we get anti_congruent_triangles(D, F, G, E, F, G)
By line_inequality on altitude(F, A, D), Line(A, E), F we get Line(A, E) != altitude(F, A, D)
By sss_anti_congruence_v1 on F, G, E, F, G, D we get anti_congruent_triangles(D, F, G, E, F, G)
By line_inequality on altitude(F, E, G), f, F we get f != altitude(F, E, G)
By line_containment_inequality on orthocenter(A, B, G), B, k we get B != orthocenter(A, B, G)
By not_in_line_equivalent_to_not_collinear_v0_r on A, G, B we get A not in Line(B, G)
By line_containment_inequality on orthocenter(C, F, G), H, h we get H != orthocenter(C, F, G)
By line_inequality on altitude(F, C, G), Line(A, E), F we get Line(A, E) != altitude(F, C, G)
By not_in_line_equivalent_to_not_collinear_v0_r on A, D, B we get A not in Line(B, D)
By line_inequality on Line(F, H), i, F we get i != Line(F, H)
By line_containment_inequality on orthocenter(C, F, G), B, h we get B != orthocenter(C, F, G)
By line_inequality on altitude(F, A, D), i, F we get i != altitude(F, A, D)
By line_containment_inequality on orthocenter(E, F, G), C, k we get C != orthocenter(E, F, G)
By line_inequality on Line(C, G), j, C we get j != Line(C, G)
By line_containment_inequality on orthocenter(E, F, G), D, k we get D != orthocenter(E, F, G)
By line_inequality on Line(B, G), f, G we get f != Line(B, G)
By line_containment_inequality on midpoint(D, E), B, k we get B != midpoint(D, E)
By line_inequality on Line(B, F), f, F we get f != Line(B, F)
By line_inequality on altitude(A, B, G), j, A we get j != altitude(A, B, G)
By line_containment_inequality on orthocenter(E, F, G), B, k we get B != orthocenter(E, F, G)
By line_inequality on Line(C, G), g, G we get g != Line(C, G)
By not_in_line_equivalent_to_not_collinear_v0_r on E, G, C we get E not in Line(C, G)
By line_circle_intersection_has_at_most_two_points_0 on D, E, F, Circle(A, D, E) we get F not in Circle(A, D, E)
By line_containment_inequality on orthocenter(E, F, G), E, k we get E != orthocenter(E, F, G)
By line_inequality on altitude(F, A, E), g, F we get g != altitude(F, A, E)
By line_inequality on Line(B, G), h, B we get h != Line(B, G)
By line_containment_inequality on orthocenter(E, F, G), H, k we get H != orthocenter(E, F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on H, E, G we get H not in Line(E, G)
By line_inequality on Line(C, G), i, G we get i != Line(C, G)
By not_in_line_equivalent_to_not_collinear_v0_r on A, H, F we get A not in Line(F, H)
By line_inequality on Line(B, G), i, B we get i != Line(B, G)
By line_containment_inequality on orthocenter(D, F, G), B, h we get B != orthocenter(D, F, G)
By line_containment_inequality on orthocenter(A, B, G), C, k we get C != orthocenter(A, B, G)
By line_inequality on Line(E, G), Line(A, C), G we get Line(A, C) != Line(E, G)
By line_containment_inequality on orthocenter(A, E, F), H, h we get H != orthocenter(A, E, F)
By line_containment_inequality on orthocenter(C, F, G), D, k we get D != orthocenter(C, F, G)
By line_inequality on altitude(F, C, G), i, F we get i != altitude(F, C, G)
By not_in_line_equivalent_to_not_collinear_v0_r on H, D, B we get H not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on A, B, F we get A not in Line(B, F)
By line_inequality on Line(C, G), Line(B, E), G we get Line(B, E) != Line(C, G)
By line_inequality on Line(C, G), Line(A, E), C we get Line(A, E) != Line(C, G)
By not_in_line_equivalent_to_not_collinear_v0_r on F, G, B we get F not in Line(B, G)
By line_containment_inequality on orthocenter(A, F, H), C, k we get C != orthocenter(A, F, H)
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, G we get C not in Line(B, G)
By line_inequality on Line(B, G), g, G we get g != Line(B, G)
By line_inequality on altitude(F, A, C), i, F we get i != altitude(F, A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on G, B, D we get G not in Line(B, D)
By line_inequality on altitude(F, C, G), Line(B, E), F we get Line(B, E) != altitude(F, C, G)
By line_containment_inequality on orthocenter(A, G, H), E, k we get E != orthocenter(A, G, H)
By line_inequality on Line(B, D), Line(A, C), D we get Line(A, C) != Line(B, D)
By line_containment_inequality on orthocenter(A, D, F), B, k we get B != orthocenter(A, D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, F we get D not in Line(B, F)
By not_in_line_equivalent_to_not_collinear_v0_r on F, G, C we get F not in Line(C, G)
By line_inequality on altitude(F, D, G), j, F we get j != altitude(F, D, G)
By not_in_line_equivalent_to_not_collinear_v0_r on D, C, G we get D not in Line(C, G)
By line_inequality on altitude(F, C, G), g, F we get g != altitude(F, C, G)
By line_inequality on altitude(F, A, E), Line(A, C), F we get Line(A, C) != altitude(F, A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on D, F, H we get D not in Line(F, H)
By line_inequality on altitude(A, B, G), h, A we get h != altitude(A, B, G)
By not_in_line_equivalent_to_not_collinear_v0_r on E, F, B we get E not in Line(B, F)
By line_containment_inequality on orthocenter(A, C, F), C, k we get C != orthocenter(A, C, F)
By line_containment_inequality on orthocenter(A, B, F), B, k we get B != orthocenter(A, B, F)
By line_inequality on altitude(F, E, G), Line(B, E), F we get Line(B, E) != altitude(F, E, G)
By line_inequality on altitude(F, A, E), f, F we get f != altitude(F, A, E)
By line_containment_inequality on orthocenter(C, F, G), E, k we get E != orthocenter(C, F, G)
By line_inequality on Line(B, F), j, B we get j != Line(B, F)
By not_in_line_equivalent_to_not_collinear_v0_r on B, G, C we get B not in Line(C, G)
By line_inequality on Line(B, F), Line(B, E), F we get Line(B, E) != Line(B, F)
By line_containment_inequality on orthocenter(D, F, G), D, k we get D != orthocenter(D, F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on B, E, G we get B not in Line(E, G)
By line_containment_inequality on orthocenter(A, G, H), C, k we get C != orthocenter(A, G, H)
By line_inequality on Line(B, G), Line(A, E), G we get Line(A, E) != Line(B, G)
By not_in_line_equivalent_to_not_collinear_v0_r on A, G, C we get A not in Line(C, G)
By not_in_line_equivalent_to_not_collinear_v0_r on C, G, E we get C not in Line(E, G)
By line_containment_inequality on orthocenter(A, D, F), C, k we get C != orthocenter(A, D, F)
By line_inequality on altitude(F, C, G), f, F we get f != altitude(F, C, G)
By line_inequality on altitude(F, A, D), j, F we get j != altitude(F, A, D)
By line_inequality on altitude(F, A, E), i, F we get i != altitude(F, A, E)
By line_inequality on Line(B, D), g, D we get g != Line(B, D)
By line_inequality on Line(F, H), k, H we get k != Line(F, H)
By line_inequality on altitude(F, A, D), Line(A, C), F we get Line(A, C) != altitude(F, A, D)
By line_inequality on altitude(A, G, H), j, A we get j != altitude(A, G, H)
By line_inequality on Line(B, D), i, B we get i != Line(B, D)
By line_inequality on altitude(F, D, G), f, F we get f != altitude(F, D, G)
By line_inequality on Line(F, H), h, H we get h != Line(F, H)
By line_containment_inequality on orthocenter(D, F, G), H, k we get H != orthocenter(D, F, G)
By line_inequality on altitude(F, D, G), g, F we get g != altitude(F, D, G)
By line_containment_inequality on orthocenter(A, B, F), G, f we get G != orthocenter(A, B, F)
By line_containment_inequality on midpoint(D, E), H, k we get H != midpoint(D, E)
By line_inequality on altitude(F, A, C), f, F we get f != altitude(F, A, C)
By line_inequality on altitude(F, A, C), Line(A, E), F we get Line(A, E) != altitude(F, A, C)
By line_inequality on Line(B, F), i, F we get i != Line(B, F)
By line_inequality on Line(C, G), h, G we get h != Line(C, G)
By line_inequality on Line(E, G), f, E we get f != Line(E, G)
By line_inequality on Line(E, G), h, G we get h != Line(E, G)
By line_inequality on Line(E, G), k, E we get k != Line(E, G)
By line_inequality on altitude(F, C, G), Line(A, C), F we get Line(A, C) != altitude(F, C, G)
By line_containment_inequality on orthocenter(A, C, F), B, h we get B != orthocenter(A, C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on F, G, E we get F not in Line(E, G)
By line_inequality on Line(B, D), j, B we get j != Line(B, D)
By line_containment_inequality on orthocenter(A, D, F), H, k we get H != orthocenter(A, D, F)
By line_containment_inequality on orthocenter(A, G, H), B, k we get B != orthocenter(A, G, H)
By line_containment_inequality on orthocenter(A, D, F), D, k we get D != orthocenter(A, D, F)
By line_containment_inequality on orthocenter(A, G, H), G, f we get G != orthocenter(A, G, H)
By line_inequality on Line(C, G), Line(A, C), G we get Line(A, C) != Line(C, G)
By line_inequality on Line(E, G), i, E we get i != Line(E, G)
By line_inequality on altitude(A, B, G), Line(B, E), A we get Line(B, E) != altitude(A, B, G)
By line_inequality on altitude(F, E, G), g, F we get g != altitude(F, E, G)
By line_containment_inequality on orthocenter(A, D, F), A, h we get A != orthocenter(A, D, F)
By line_inequality on altitude(A, B, G), g, A we get g != altitude(A, B, G)
By line_inequality on altitude(A, G, H), h, A we get h != altitude(A, G, H)
By line_inequality on Line(B, D), k, D we get k != Line(B, D)
By line_inequality on altitude(A, F, H), h, A we get h != altitude(A, F, H)
By line_containment_inequality on orthocenter(C, F, G), C, k we get C != orthocenter(C, F, G)
By line_inequality on Line(B, F), Line(A, E), F we get Line(A, E) != Line(B, F)
By line_inequality on Line(B, G), Line(B, E), G we get Line(B, E) != Line(B, G)
By line_containment_inequality on orthocenter(A, B, G), F, f we get F != orthocenter(A, B, G)
By line_containment_inequality on orthocenter(A, D, F), G, h we get G != orthocenter(A, D, F)
By line_containment_inequality on orthocenter(A, B, F), H, k we get H != orthocenter(A, B, F)
By line_inequality on Line(F, H), Line(A, E), H we get Line(A, E) != Line(F, H)
By not_in_line_equivalent_to_not_collinear_v0_r on C, F, B we get C not in Line(B, F)
By line_containment_inequality on orthocenter(A, F, H), E, k we get E != orthocenter(A, F, H)
By line_inequality on Line(B, D), f, D we get f != Line(B, D)
By line_containment_inequality on orthocenter(A, F, H), H, k we get H != orthocenter(A, F, H)
By line_containment_inequality on orthocenter(A, F, H), G, f we get G != orthocenter(A, F, H)
By line_inequality on altitude(A, G, H), g, A we get g != altitude(A, G, H)
By not_in_line_equivalent_to_not_collinear_v0_r on E, B, D we get E not in Line(B, D)
By line_containment_inequality on orthocenter(E, F, G), A, h we get A != orthocenter(E, F, G)
By line_inequality on altitude(F, E, G), Line(A, E), F we get Line(A, E) != altitude(F, E, G)
By line_inequality on Line(E, G), Line(B, E), G we get Line(B, E) != Line(E, G)
By line_inequality on altitude(A, G, H), Line(B, E), A we get Line(B, E) != altitude(A, G, H)
By line_containment_inequality on orthocenter(A, F, H), B, k we get B != orthocenter(A, F, H)
By line_inequality on altitude(F, A, C), Line(B, E), F we get Line(B, E) != altitude(F, A, C)
By line_inequality on altitude(F, E, G), Line(A, C), F we get Line(A, C) != altitude(F, E, G)
By line_containment_inequality on orthocenter(D, F, G), G, h we get G != orthocenter(D, F, G)
By line_containment_inequality on orthocenter(A, D, F), E, k we get E != orthocenter(A, D, F)
By line_containment_inequality on orthocenter(A, C, F), E, k we get E != orthocenter(A, C, F)
By line_containment_inequality on orthocenter(A, C, F), A, h we get A != orthocenter(A, C, F)
By line_inequality on altitude(A, B, F), g, A we get g != altitude(A, B, F)
By line_containment_inequality on orthocenter(A, E, F), A, h we get A != orthocenter(A, E, F)
By line_inequality on altitude(F, A, C), g, F we get g != altitude(F, A, C)
By line_inequality on Line(B, G), j, B we get j != Line(B, G)
By line_inequality on altitude(F, C, G), j, F we get j != altitude(F, C, G)
By line_inequality on altitude(A, F, H), g, A we get g != altitude(A, F, H)
By line_inequality on Line(B, G), k, B we get k != Line(B, G)
By line_inequality on altitude(A, F, H), j, A we get j != altitude(A, F, H)
By line_inequality on altitude(F, A, C), Line(A, C), F we get Line(A, C) != altitude(F, A, C)
By line_inequality on altitude(F, E, G), i, F we get i != altitude(F, E, G)
By line_inequality on Line(B, F), g, F we get g != Line(B, F)
By line_containment_inequality on orthocenter(D, F, G), A, h we get A != orthocenter(D, F, G)
By line_containment_inequality on orthocenter(A, B, G), G, f we get G != orthocenter(A, B, G)
By line_containment_inequality on orthocenter(A, B, G), H, k we get H != orthocenter(A, B, G)
By line_containment_inequality on orthocenter(A, E, F), E, k we get E != orthocenter(A, E, F)
By line_inequality on altitude(A, B, F), j, A we get j != altitude(A, B, F)
By line_inequality on Line(C, G), k, C we get k != Line(C, G)
By line_inequality on altitude(F, A, D), Line(B, E), F we get Line(B, E) != altitude(F, A, D)
By line_inequality on Line(B, D), Line(B, E), D we get Line(B, D) != Line(B, E)
By line_inequality on Line(E, G), j, E we get j != Line(E, G)
By line_inequality on altitude(F, D, G), i, F we get i != altitude(F, D, G)
By line_inequality on altitude(F, E, G), j, F we get j != altitude(F, E, G)
By line_containment_inequality on orthocenter(A, B, F), F, f we get F != orthocenter(A, B, F)
By line_inequality on altitude(F, A, E), j, F we get j != altitude(F, A, E)
By line_inequality on Line(B, F), h, B we get h != Line(B, F)
By line_inequality on Line(F, H), f, F we get f != Line(F, H)
By line_inequality on altitude(F, A, C), j, F we get j != altitude(F, A, C)
By line_inequality on altitude(A, B, F), h, A we get h != altitude(A, B, F)
By collinear_definition on E, midpoint(D, E), D we get midpoint(D, E) in Line(D, E), D in Line(E, midpoint(D, E)), Line(D, E) == Line(E, midpoint(D, E)), 0 == 2 * angle(midpoint(D, E), E, D) mod 360
By similar_triangle_basic_properties on B, A, D, D, C, B we get not_collinear(A, B, D), not_collinear(B, C, D), angle(B, A, D) == angle(D, C, B) mod 360, angle(A, D, B) == angle(C, B, D) mod 360, angle(B, D, C) == angle(D, B, A) mod 360, log(distance(A, B)) + log(distance(B, C)) == log(distance(C, D)) + log(distance(A, D)), log(distance(A, D)) + log(distance(B, D)) == log(distance(B, C)) + log(distance(B, D)), log(distance(B, D)) + log(distance(A, B)) == log(distance(B, D)) + log(distance(C, D))
By external_angle_bisector_definition_v0_r on H, A, E, G we get Line(A, G) == external_angle_bisector(E, G, H)
By internal_angle_bisector_definition_v0_r on C, E, C, D we get Line(D, E) == internal_angle_bisector(C, D, C)
By external_angle_bisector_definition_v0_r on E, D, C, F we get Line(D, F) == external_angle_bisector(C, F, E)
By perpendicular_lines_draw_intersection on Line(A, E), altitude(F, A, E) we get exists(line_intersection(Line(A, E), altitude(F, A, E)))
By internal_angle_bisector_definition_v0_r on C, D, F, E we get Line(D, E) == internal_angle_bisector(C, E, F)
By isogonal_conjugate_definition_v2 on E, D, A, H, H we get angle(D, E, H) == angle(H, E, A) + 180 mod 360
By isogonal_conjugate_definition_v6 on D, E, A, H, H we get angle(A, E, H) == angle(H, E, D) + 180 mod 360
By external_angle_bisector_definition_v0_r on C, E, F, D we get Line(D, E) == external_angle_bisector(C, D, F)
By internal_angle_bisector_definition_v0_r on D, C, D, E we get Line(C, E) == internal_angle_bisector(D, E, D)
By perpendicular_bisector_properties on D, E we get perpendicular(Line(D, E), perpendicular_bisector(D, E)), midpoint(D, E) == line_intersection(Line(D, E), perpendicular_bisector(D, E))
By internal_angle_bisector_definition_v0_r on D, C, D, F we get Line(C, F) == internal_angle_bisector(D, F, D)
By external_angle_bisector_definition_v0_r on C, F, E, D we get Line(D, F) == external_angle_bisector(C, D, E)
By internal_angle_bisector_definition_v0_r on E, F, E, D we get Line(D, F) == internal_angle_bisector(E, D, E)
By collinear_definition on E, D, midpoint(D, E) we get D in Line(E, midpoint(D, E)), midpoint(D, E) in Line(D, E), Line(D, E) == Line(E, midpoint(D, E)), 0 == 2 * angle(D, E, midpoint(D, E)) mod 360
By tangent_chord_angle_v0 on E, G, D, A we get tangent(Line(A, E), Circle(D, E, G))
By isosceles_triangle_midpoint on G, E, D we get midpoint(D, E) in median(G, D, E)
By perpendicular_lines_draw_intersection on altitude(F, A, D), i we get exists(line_intersection(i, altitude(F, A, D)))
By internal_angle_bisector_definition_v0_r on D, F, E, C we get Line(C, F) == internal_angle_bisector(D, C, E)
By internal_angle_bisector_definition_v0_r on F, C, F, D we get Line(C, D) == internal_angle_bisector(F, D, F)
By internal_angle_bisector_definition_v0_r on D, E, D, C we get Line(C, E) == internal_angle_bisector(D, C, D)
By internal_angle_bisector_definition_v0_r on E, A, D, G we get Line(A, G) == internal_angle_bisector(D, G, E)
By internal_angle_bisector_definition_v0_r on G, D, G, H we get Line(D, H) == internal_angle_bisector(G, H, G)
By internal_angle_bisector_definition_v0_r on F, D, F, E we get Line(D, E) == internal_angle_bisector(F, E, F)
By power_of_a_point_on_circle on D, Circle(A, D, E) we get 0 == power_of_a_point(D, Circle(A, D, E))
By internal_angle_bisector_definition_v0_r on D, E, F, C we get Line(C, E) == internal_angle_bisector(D, C, F)
By internal_angle_bisector_definition_v0_r on E, C, E, F we get Line(C, F) == internal_angle_bisector(E, F, E)
By perpendicular_lines_draw_intersection on j, altitude(F, D, G) we get exists(line_intersection(j, altitude(F, D, G)))
By internal_angle_bisector_definition_v0_r on F, E, F, C we get Line(C, E) == internal_angle_bisector(F, C, F)
By internal_angle_bisector_definition_v0_r on C, F, C, E we get Line(E, F) == internal_angle_bisector(C, E, C)
By internal_angle_bisector_definition_v0_r on C, F, D, E we get Line(E, F) == internal_angle_bisector(C, E, D)
By internal_angle_bisector_definition_v0_r on E, D, E, C we get Line(C, D) == internal_angle_bisector(E, C, E)
By isosceles_triangle_midpoint on A, E, D we get midpoint(D, E) in median(A, D, E)
By internal_angle_bisector_definition_v0_r on G, H, G, D we get Line(D, H) == internal_angle_bisector(G, D, G)
By perpendicular_lines_draw_intersection on Line(F, H), altitude(A, F, H) we get exists(line_intersection(Line(F, H), altitude(A, F, H)))
By internal_angle_bisector_definition_v0_r on F, E, F, D we get Line(D, E) == internal_angle_bisector(F, D, F)
By collinear_definition on D, midpoint(D, E), E we get midpoint(D, E) in Line(D, E), E in Line(D, midpoint(D, E)), Line(D, E) == Line(D, midpoint(D, E)), 0 == 2 * angle(midpoint(D, E), D, E) mod 360
By external_angle_bisector_definition_v0_r on E, C, D, F we get Line(C, F) == external_angle_bisector(D, F, E)
By internal_angle_bisector_definition_v0_r on E, D, E, F we get Line(D, F) == internal_angle_bisector(E, F, E)
By internal_angle_bisector_definition_v0_r on D, F, D, C we get Line(C, F) == internal_angle_bisector(D, C, D)
By internal_angle_bisector_definition_v0_r on D, H, D, G we get Line(G, H) == internal_angle_bisector(D, G, D)
By internal_angle_bisector_definition_v0_r on D, G, D, H we get Line(G, H) == internal_angle_bisector(D, H, D)
By perpendicular_lines_draw_intersection on Line(B, G), altitude(A, B, G) we get exists(line_intersection(Line(B, G), altitude(A, B, G)))
By perpendicular_lines_draw_intersection on j, altitude(A, G, H) we get exists(line_intersection(j, altitude(A, G, H)))
By internal_angle_bisector_definition_v0_r on E, F, E, C we get Line(C, F) == internal_angle_bisector(E, C, E)
By internal_angle_bisector_definition_v0_r on E, C, F, D we get Line(C, D) == internal_angle_bisector(E, D, F)
By internal_angle_bisector_definition_v0_r on H, D, H, G we get Line(D, G) == internal_angle_bisector(H, G, H)
By collinear_definition on D, E, midpoint(D, E) we get E in Line(D, midpoint(D, E)), midpoint(D, E) in Line(D, E), Line(D, E) == Line(D, midpoint(D, E)), 0 == 2 * angle(E, D, midpoint(D, E)) mod 360
By internal_angle_bisector_definition_v0_r on F, D, F, C we get Line(C, D) == internal_angle_bisector(F, C, F)
By internal_angle_bisector_definition_v0_r on C, F, C, D we get Line(D, F) == internal_angle_bisector(C, D, C)
By internal_angle_bisector_definition_v0_r on F, D, E, C we get Line(C, D) == internal_angle_bisector(E, C, F)
By draw_point_of_tangency on f, Circle(A, D, E) we get exists(line_circle_tangent_point(f, Circle(A, D, E)))
By power_of_a_point_in_circle on A, Circle(A, D, E) we get 0 == power_of_a_point(A, Circle(A, D, E))
By internal_angle_bisector_definition_v0_r on E, C, E, D we get Line(C, D) == internal_angle_bisector(E, D, E)
By isogonal_conjugate_sufficient_conditions_v0 on D, A, E, G, G we get G == isogonal_conjugate(G, A, D, E)
By internal_angle_bisector_definition_v0_r on H, G, H, D we get Line(D, G) == internal_angle_bisector(H, D, H)
By internal_angle_bisector_definition_v0_r on C, E, D, F we get Line(E, F) == internal_angle_bisector(C, F, D)
By power_of_a_point_on_circle on E, Circle(A, D, E) we get 0 == power_of_a_point(E, Circle(A, D, E))
By internal_angle_bisector_definition_v0_r on D, E, D, F we get Line(E, F) == internal_angle_bisector(D, F, D)
By internal_angle_bisector_definition_v0_r on D, C, F, E we get Line(C, E) == internal_angle_bisector(D, E, F)
By internal_angle_bisector_definition_v0_r on F, C, F, E we get Line(C, E) == internal_angle_bisector(F, E, F)
By internal_angle_bisector_definition_v0_r on C, E, C, F we get Line(E, F) == internal_angle_bisector(C, F, C)
By internal_angle_bisector_definition_v0_r on C, D, C, E we get Line(D, E) == internal_angle_bisector(C, E, C)
By internal_angle_bisector_definition_v0_r on C, D, C, F we get Line(D, F) == internal_angle_bisector(C, F, C)
By internal_angle_bisector_definition_v0_r on D, F, D, E we get Line(E, F) == internal_angle_bisector(D, E, D)
By perpendicular_lines_draw_intersection on altitude(A, B, F), Line(B, F) we get exists(line_intersection(Line(B, F), altitude(A, B, F)))
By perpendicular_lines_draw_intersection on Line(E, G), altitude(F, E, G) we get exists(line_intersection(Line(E, G), altitude(F, E, G)))
By isosceles_triangle_altitude_v3 on G, E, D we get identical(perpendicular_bisector(D, E), internal_angle_bisector(D, G, E), perpendicular_line(G, Line(D, E)))
By isosceles_triangle_altitude_v3 on midpoint(D, E), E, D we get identical(perpendicular_bisector(D, E), internal_angle_bisector(D, midpoint(D, E), E), perpendicular_line(midpoint(D, E), Line(D, E)))
By isosceles_triangle_altitude_v1 on midpoint(D, E), E, D we get identical(perpendicular_bisector(D, E), internal_angle_bisector(D, midpoint(D, E), E), perpendicular_line(midpoint(D, E), Line(D, E)))
By isosceles_triangle_altitude_v1 on midpoint(D, E), D, E we get identical(perpendicular_bisector(D, E), internal_angle_bisector(D, midpoint(D, E), E), perpendicular_line(midpoint(D, E), Line(D, E)))
By isosceles_triangle_altitude_v3 on midpoint(D, E), D, E we get identical(perpendicular_bisector(D, E), internal_angle_bisector(D, midpoint(D, E), E), perpendicular_line(midpoint(D, E), Line(D, E)))
By perpendicular_lines_draw_intersection on altitude(F, C, G), Line(C, G) we get exists(line_intersection(Line(C, G), altitude(F, C, G)))
By isosceles_triangle_altitude_v3 on G, D, E we get identical(perpendicular_bisector(D, E), internal_angle_bisector(D, G, E), perpendicular_line(G, Line(D, E)))
By perpendicular_lines_draw_intersection on altitude(F, A, C), Line(A, C) we get exists(line_intersection(Line(A, C), altitude(F, A, C)))
By isosceles_triangle_altitude_v1 on G, D, E we get identical(perpendicular_bisector(D, E), internal_angle_bisector(D, G, E), perpendicular_line(G, Line(D, E)))
By isosceles_triangle_altitude_v1 on G, E, D we get identical(perpendicular_bisector(D, E), internal_angle_bisector(D, G, E), perpendicular_line(G, Line(D, E)))
By parallel_line_angles_reverse_v1 on A, H, F, E we get angle(A, H, F) == angle(E, F, H) mod 360
By parallel_line_angles_reverse_v1 on B, H, F, E we get angle(B, H, F) == angle(E, F, H) mod 360
By parallel_line_angles_reverse_v2 on C, F, H, A we get angle(C, F, H) == angle(A, H, F) + 180 mod 360
By parallel_line_angles_reverse_v0 on A, B, F, C we get angle(A, B, F) == angle(C, F, B) mod 360
By parallel_line_angles_reverse_v3 on A, H, F, D we get angle(A, H, F) == angle(D, F, H) + 180 mod 360
By parallel_line_angles_reverse_v0 on H, B, F, D we get angle(D, F, B) == angle(H, B, F) mod 360
By parallel_line_angles_reverse_v2 on A, B, F, E we get angle(A, B, F) == angle(E, F, B) + 180 mod 360
By parallel_line_angles_reverse_v3 on A, H, F, C we get angle(A, H, F) == angle(C, F, H) + 180 mod 360
By parallel_line_angles_reverse_v0 on D, F, B, A we get angle(A, B, F) == angle(D, F, B) mod 360
By parallel_line_angles_reverse_v3 on B, H, F, D we get angle(B, H, F) == angle(D, F, H) + 180 mod 360
By parallel_line_angles_reverse_v3 on E, F, B, H we get angle(E, F, B) == angle(H, B, F) + 180 mod 360
By parallel_line_angles_reverse_v2 on C, F, H, B we get angle(C, F, H) == angle(B, H, F) + 180 mod 360
By parallel_line_angles_reverse_v2 on D, F, H, A we get angle(D, F, H) == angle(A, H, F) + 180 mod 360
By parallel_line_angles_reverse_v3 on B, H, F, C we get angle(B, H, F) == angle(C, F, H) + 180 mod 360
By parallel_line_angles_reverse_v3 on E, F, B, A we get angle(E, F, B) == angle(A, B, F) + 180 mod 360
By sas_anti_congruence on E, A, H, H, A, E we get anti_congruent_triangles(A, E, H, A, H, E)
By parallel_line_angles_reverse_v2 on D, F, H, B we get angle(D, F, H) == angle(B, H, F) + 180 mod 360
By collinear_definition on midpoint(D, E), D, E we get D in Line(E, midpoint(D, E)), E in Line(D, midpoint(D, E)), Line(D, midpoint(D, E)) == Line(E, midpoint(D, E)), 0 == 2 * angle(D, midpoint(D, E), E) mod 360
By log_of_2_times_distance on D, E, midpoint(D, E), D we get log(distance(D, E)) == 0.6931471805599453 + log(distance(D, midpoint(D, E)))
By parallel_line_angles_reverse_v0 on H, B, F, C we get angle(C, F, B) == angle(H, B, F) mod 360
By log_of_2_times_distance on D, E, E, midpoint(D, E) we get log(distance(D, E)) == 0.6931471805599453 + log(distance(E, midpoint(D, E)))
By isosceles_triangle_properties on midpoint(D, E), D, E we get distance(D, midpoint(D, E)) == distance(E, midpoint(D, E)), angle(D, E, midpoint(D, E)) == angle(midpoint(D, E), D, E) mod 360
By isosceles_triangle_properties on A, H, E we get distance(A, E) == distance(A, H), angle(A, H, E) == angle(H, E, A) mod 360
By parallel_line_angles_reverse_v2 on H, B, F, E we get angle(H, B, F) == angle(E, F, B) + 180 mod 360
By power_of_a_point_tangent on B, A, Circle(A, D, E) we get 2 * log(distance(A, B)) == log(power_of_a_point(B, Circle(A, D, E)))
By altitude_definition on F, D, H, altitude(F, D, G) we get altitude(F, D, G) == altitude(F, D, H)
By sas_anti_similarity on H, A, E, E, A, H we get anti_similar_triangles(A, E, H, A, H, E)
By altitude_definition on A, G, D, altitude(A, G, H) we get altitude(A, D, G) == altitude(A, G, H)
By altitude_definition on A, H, D, altitude(A, G, H) we get altitude(A, D, H) == altitude(A, G, H)
By altitude_definition on F, H, G, altitude(F, D, G) we get altitude(F, D, G) == altitude(F, G, H)
By power_of_a_point_tangent on H, A, Circle(A, D, E) we get 2 * log(distance(A, H)) == log(power_of_a_point(H, Circle(A, D, E)))
By collinear_definition on midpoint(D, E), E, D we get E in Line(D, midpoint(D, E)), D in Line(E, midpoint(D, E)), Line(D, midpoint(D, E)) == Line(E, midpoint(D, E)), 0 == 2 * angle(E, midpoint(D, E), D) mod 360
By sas_anti_congruence on H, A, E, E, A, H we get anti_congruent_triangles(A, E, H, A, H, E)
By isosceles_triangle_properties on A, E, H we get distance(A, E) == distance(A, H), angle(A, E, H) == angle(E, H, A) mod 360
By sas_anti_similarity on E, A, H, H, A, E we get anti_similar_triangles(A, E, H, A, H, E)
By isosceles_triangle_properties on midpoint(D, E), E, D we get distance(D, midpoint(D, E)) == distance(E, midpoint(D, E)), angle(E, D, midpoint(D, E)) == angle(midpoint(D, E), E, D) mod 360
By anti_similar_triangle_basic_properties on G, E, A, G, D, A we get not_collinear(A, E, G), not_collinear(A, D, G), angle(G, E, A) == 0 - angle(G, D, A) mod 360, angle(E, A, G) == 0 - angle(D, A, G) mod 360, angle(A, G, E) == 0 - angle(A, G, D) mod 360, log(distance(D, G)) + log(distance(A, E)) == log(distance(E, G)) + log(distance(A, D)), log(distance(A, D)) + log(distance(A, G)) == log(distance(A, E)) + log(distance(A, G)), log(distance(A, G)) + log(distance(D, G)) == log(distance(A, G)) + log(distance(E, G))
By anti_similar_triangle_basic_properties on A, E, G, A, D, G we get not_collinear(A, E, G), not_collinear(A, D, G), angle(A, E, G) == 0 - angle(A, D, G) mod 360, angle(E, G, A) == 0 - angle(D, G, A) mod 360, angle(G, A, E) == 0 - angle(G, A, D) mod 360, log(distance(A, D)) + log(distance(E, G)) == log(distance(A, E)) + log(distance(D, G)), log(distance(D, G)) + log(distance(A, G)) == log(distance(E, G)) + log(distance(A, G)), log(distance(A, G)) + log(distance(A, D)) == log(distance(A, G)) + log(distance(A, E))
By power_of_a_point_definition on D, E, C, c we get log(power_of_a_point(D, c)) == log(distance(D, E)) + log(distance(C, D))
By power_of_a_point_definition on F, C, E, c we get log(power_of_a_point(F, c)) == log(distance(C, F)) + log(distance(E, F))
By similar_triangle_basic_properties on F, G, D, A, G, H we get not_collinear(D, F, G), not_collinear(A, G, H), angle(A, G, H) == angle(F, G, D) mod 360, angle(G, D, F) == angle(G, H, A) mod 360, angle(D, F, G) == angle(H, A, G) mod 360, log(distance(A, G)) + log(distance(D, G)) == log(distance(F, G)) + log(distance(G, H)), log(distance(D, G)) + log(distance(A, H)) == log(distance(G, H)) + log(distance(D, F)), log(distance(A, H)) + log(distance(F, G)) == log(distance(D, F)) + log(distance(A, G))
By similar_triangle_basic_properties on H, G, A, D, G, F we get not_collinear(A, G, H), not_collinear(D, F, G), angle(D, G, F) == angle(H, G, A) mod 360, angle(G, A, H) == angle(G, F, D) mod 360, angle(A, H, G) == angle(F, D, G) mod 360, log(distance(D, G)) + log(distance(A, G)) == log(distance(G, H)) + log(distance(F, G)), log(distance(A, G)) + log(distance(D, F)) == log(distance(F, G)) + log(distance(A, H)), log(distance(A, H)) + log(distance(D, G)) == log(distance(D, F)) + log(distance(G, H))
By between_implies_angles on E, midpoint(D, E), D we get 180 == angle(E, midpoint(D, E), D) mod 360, 0 == angle(midpoint(D, E), D, E) mod 360, 0 == angle(D, E, midpoint(D, E)) mod 360
By between_implies_angles on D, midpoint(D, E), E we get 180 == angle(D, midpoint(D, E), E) mod 360, 0 == angle(midpoint(D, E), E, D) mod 360, 0 == angle(E, D, midpoint(D, E)) mod 360
By isosceles_triangle_altitude_v1 on A, D, H we get identical(perpendicular_bisector(D, H), internal_angle_bisector(D, A, H), perpendicular_line(A, Line(D, H)))
By isosceles_triangle_altitude_v1 on A, H, D we get identical(perpendicular_bisector(D, H), internal_angle_bisector(D, A, H), perpendicular_line(A, Line(D, H)))
By incenter_concurrency on E, A, D we get incenter(A, D, E) in internal_angle_bisector(D, A, E), incenter(A, D, E) in internal_angle_bisector(A, D, E), incenter(A, D, E) in internal_angle_bisector(A, E, D)
By excenter_concurrency on D, E, A we get excenter(D, A, E) in external_angle_bisector(A, E, D), excenter(D, A, E) in external_angle_bisector(D, A, E), excenter(D, A, E) in internal_angle_bisector(A, D, E)
