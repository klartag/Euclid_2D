Assumptions:
A, B, C, D, E, F: Point
f, g, h, i, j: Line
c: Circle
distinct(A, B, C, D, E, F)
distinct(f, g, h, i, j)
f == Line(A, B)
g == Line(A, C)
D == midpoint(A, B)
h == parallel_line(D, g)
c == Circle(A, C, D)
E in h, c
F == midpoint(D, E)
i == internal_angle_bisector(A, F, C)
j == Line(C, E)
exists(line_intersection(f, i))

Embedding:
B := {"x": "2.231657767289036531366264171083457767963409423828125", "y": "0.92088041578920754037795859403559006750583648681640625"}
A := {"x": "0.50030183580086806660602860574726946651935577392578125", "y": "0.069089550707693347941784622889827005565166473388671875"}
D := {"x": "1.365979801544952298986146388415363617241382598876953125", "y": "0.4949849832484504441598716084627085365355014801025390625"}
C := {"x": "1.938778714011821779905631046858616173267364501953125", "y": "1.7698556081745293599993829047889448702335357666015625"}
c := {"center": {"x": "0.1919475705861166346275453134181123987153783626882060845541049796687199179519763178802539510940467994808893802500940830062242484737834498953911852934399191810496080519074392636066705146180221130819460041757898187531321652718268329071172992453728769326443279946569935711354264367643483002484231017879920841925972041600222082514471558308989325447160236536467933721849496440521998353675218466346968098094147560682928620595891732774139897074554845724027170429822694057415094812888841080855205615722713199831452597835547120540399809135911989254047338811417639354199558028365279998597292502402207936040316560189062013922498526063020162655343114094844772142748944278218758411307124406194964572514107594824501911180379792868511341592474784175131936380104259290753003238131426856580651160133548434221775626659231821445514643569984373215482214353824893134043282632569348200181951273102939791878899184559295194402680697489036953877534050523874883755242809593030132547885389405505036861319299306363309934590809189086876456350095149383684194324822285111184673832863739803164931514393352578521822775145681372922483244678112599643011012321393392869684430515319366280964636567056293855208379454988354709383696477609693706535456373363164900538253876125249392625863290090515507876298866438331553181938837340800621734532850485219172097490503750283028367160211475035829678187402741636042788282066225234334044524750274825806873391933055052962928948603076097806909039096759873938743522904484722862918508333930100572732157459003967093833461466386031079879110901758512399832762259905144525641870050481693608649355012972502128458151595935809560095731250554814343644397007937542936948210361053160607542446488642655585074388497154640793105569270348060410916056297543507074721278171476440177867645292429313775604107524084012877312856749002156964717919589978722100624820040549331806686405563324101290937982344346981051389854943105538075786011557537520944618332799633166097607450973844091357382634711961385260554843766168848180121", "y": "1.7885917266003243749689927674495031784004955289518547151682697181560539896706356524119007120642569638250702627214418138506678633643515386989928257673532055554674350258621336249485683490492615984741541913018243453472812581896657408460228175102069061795294879100727598269439457880384475312250096726397291806304093010726503423251334809076118159720430488815471337190580037333037601611256608817579367690628919703356741782946480081313033130624329932980942937452089925323072524873658084375936129806497879742886907884888187264454126374330983581897513389264570044547898515323216489866352240624423925334780067515028436351549689985619983608816097471480586523729077094534466904603063756621124000969074375540220225975901211220824596408174494902449014206363636870377131065676720232398007412813742875844531515312609415437353371576635082390871457429577917626400118223732579393468836209401749462434182489604030185488198314975985594928545515571760092695754800188691154432777549997424954649485696336562606494159543532777215797863181374691945140257045043115536183741656249793362852852920754502319508201344461241893228169101710561334320688182039243024859718644315914110978080933577572681937328026240096190575243968740798512617949702210197719932236833389202699478066862536799226329221790686127367542270751652336813143266486437743729069947543039664119275284471736440637404451939968011871796255427616309563512759641427439164673168972093606710827013093872380565921321784048358331260859452135358095056503511338786266102679316668667495355012075450813500347459960523321940131513547066403974412677412114466270686394625707676238699606252668541548618080190131226682342889259708377040807175646052035024401130401635653941649771710981571878487206410327983056472593378913676652507341511974065686082493107489484110171708688961660580425930863243565781059981228435083514594587751082961921321441476334335308257055334964829975153200498016712440582407268782288530495178181017869489135434967286207824969539944714732606942648487150427965089056"}, "radius_squared": "3.0517700857756218756652901282864874578714115462585897376503093170202299693030761444092628111203542720912476213045898886684489147825459843178450698554523647845318703073473703916626332417001474679395498514759673199524227810873830926284957041398413977798192636472629422984662781961718325592822935839374187419262765449484634335193705281708458685060967219964789125846033253649535258219235734154150221654719378055493856828156527471763965142522426882874885489900604586986347100562034801501577528770908626056057268778565681400661842598950810483203765518169798645037170852640618720071754550102136127223029627572019774370346724583806287086893804291798534415140479845316681236801542213130650758292283242907984075929914270690366686901985236903455821409020436819402380963831295168523800035722532431032985210795546358932552795374775781330320441311348071295634423398444511326592146943573186048788778176737192509776167238972560474054760147895020989596238683077153709931965628093923338646538312191227201349317225982268282492213199557868496053062519457697627424915495630809970973198131867620885923374196428013604309166978609071302726848398845667393004238545257495304598922738019440440239998027014829158026144061425477289134949821070109157842694920170818493423701678156830987878020815112482224596873050047465060609020507559110940391880800169019510147320366350569255144012182435330138038588682551429757187797126648277680605585049382859530541081421557924098966808639255301982132058600350059235359935972874727090313758187989018426334423816322830803597490503706177839170781113086902074106452012230479923698550133498808938353066659056241596885566354041383580371826491177840985997216411013636492224443919127972533339798275763842601653406568713886518118880081324821883504107473302179641494043087944445274036031751886793140462809966313646839201005810027239514826140963519125311901970834267535997087670181762779062149717929686001093707568166034133259515277208867877061051496272149197139298406272827694355269759805732056357256652"}
g := {"point": {"x": "0.50030183580086806660602860574726946651935577392578125", "y": "0.069089550707693347941784622889827005565166473388671875"}, "direction": {"x": "1.43847687821095371329960244111134670674800872802734375", "y": "1.700766057466836012057598281899117864668369293212890625"}}
h := {"point": {"x": "1.365979801544952298986146388415363617241382598876953125", "y": "0.4949849832484504441598716084627085365355014801025390625"}, "direction": {"x": "1.43847687821095371329960244111134670674800872802734375", "y": "1.700766057466836012057598281899117864668369293212890625"}}
E := {"x": "1.6624432631001192167731160230675605735014483510437793756720228828822788765157115545452133860338941004869124822445582475647454906110821492584988508172471673842728624818410727448727584376119337494972399347830406678591851433343558511388379065474256706428755265995145811807256343565087014157798469012231235663479232313119276558078868671973540082449080687235796229274642199434480633003281527658405157875886994269632722985843724812824386716590274167552662382453508959868842379270950938189438653890130032351686432246482473368338747884708347923636180084698512371832027385504757996456374169195758377369328746679261619890634972101910841742064017429520303806641536982320074577915911791508339179689876309299130131585752378381534604662585490670614127707431566704583661642836392075913723342952429009123076758335120167920343030204241761904828743858314615904010385582643696866230387204862857729164204825839603508819937958179600867590974451093010676862778597782465192432011529356197791310339754172023507418213168083164355334029249053870753560262831333234182622622762826265848665856445304839294019692364524399208329553680404439663722485574353803135901889136103060933821218954597316905638766592205194778856946744284075124719386162476353130541080627581732209787733998626174599183443802557765462674857921276480767057000660734848251224409399593654861800202438209517758226720317215192213925640681268251440188638464789912579173779334726492318417680607730607367427779331350425046843237229046419105090151130535492912603642885247038409872254920911083950887692014154224826114845372873317888941363997517887935384730334209022497558411947135622306329506227012614161869547212882763098731886002893274342597616764865838815032927835098919990175406881889694616776302065144741008465015319747997495556282696469301805239233699126442148800308843008923658845733988044334070986318746911969025822033069911738706866642089741433766994919065328597459287876424566272964082117334203869858461496927641570423889460656096024475507610217975407775160952", "y": "0.8455050370147986022611694294364655705488009846209159272722858246716522303561943552789717096206151315148397374623706010020835414629508894258462223978992350254877920970466129337521844314019629296513567056621055094128026273762898269859972652840877750526561908061227820755383478494059415655191404942345339166537929009880265362756574773231455171285690519901541818900743293412497667910015063047070101342708915915350029954915641078229090532777214782264735560839204007183838709017437160363716599524663076182663715048623342007987086867757775245056020431583346457577272259206797231603241947897516497448031864862549770844114570468613109850113108031329307948247947988466612546665401914059376688595665589750238472102466107345701230551401342331022195226614083673464512073799004371550895369207606903093213126237209083422158221017348799335286152657833103450579899928317375207483561956879752883174709489298803373280060873916533856649646777295884964800055854276354080628524893057097744221711626008189358355319280763639999057526984122586775593000922768411264471632775356735790906332733014932777823039115312049733120411709514987087469654696994083341498462633050429959181943009124971006851499750971550181097870130191637458957611031964052733166271107295244997087432731510747374786014790957483662526346737047260388519464731117162095122172503903440146313145629857471925073702964966562177035879880480368194487883905590757224261455232553269998627288759353487435094213662860204731125545626016331440725900817706913178418605861826276652071364915507157108603749629940656213143807774792369313958069489201941626445959671929154716350645439826298026694137547896302203573454224851028246167019261995337962572127042232176194954281553944224327066755967864534166458163635923089551598911035698198444167226143587654497818087026793808759042639515149647987255793649196496416219520927328545946387733356856646655682099613346835513083296354221764365381738694374592084791467626409631080886392007785864992640136590786792551797903545550442703798076"}
j := {"point": {"x": "1.938778714011821779905631046858616173267364501953125", "y": "1.7698556081745293599993829047889448702335357666015625"}, "direction": {"x": "-0.2763354509117025631325150237910555997659161509093456243279771171177211234842884454547866139661058995130875177554417524352545093889178507415011491827528326157271375181589272551272415623880662505027600652169593321408148566656441488611620934525743293571244734004854188192743656434912985842201530987768764336520767686880723441921131328026459917550919312764203770725357800565519366996718472341594842124113005730367277014156275187175613283409725832447337617546491040131157620729049061810561346109869967648313567753517526631661252115291652076363819915301487628167972614495242003543625830804241622630671253320738380109365027898089158257935982570479696193358463017679925422084088208491660820310123690700869868414247621618465395337414509329385872292568433295416338357163607924086276657047570990876923241664879832079656969795758238095171256141685384095989614417356303133769612795137142270835795174160396491180062041820399132409025548906989323137221402217534807567988470643802208689660245827976492581786831916835644665970750946129246439737168666765817377377237173734151334143554695160705980307635475600791670446319595560336277514425646196864098110863896939066178781045402683094361233407794805221143053255715924875280613837523646869458919372418267790212266001373825400816556197442234537325142078723519232942999339265151748775590600406345138199797561790482241773279682784807786074359318731748559811361535210087420826220665273507681582319392269392632572220668649574953156762770953580894909848869464507087396357114752961590127745079088916049112307985845775173885154627126682111058636002482112064615269665790977502441588052864377693670493772987385838130452787117236901268113997106725657402383235134161184967072164901080009824593118110305383223697934855258991534984680252002504443717303530698194760766300873557851199691156991076341154266011955665929013681253088030974177966930088261293133357910258566233005080934671402540712123575433727035917882665796130141538503072358429576110539343903975524492389782024592224839048", "y": "-0.9243505711597307577382134753524792996847347819806465727277141753283477696438056447210282903793848684851602625376293989979164585370491105741537776021007649745122079029533870662478155685980370703486432943378944905871973726237101730140027347159122249473438091938772179244616521505940584344808595057654660833462070990119734637243425226768544828714309480098458181099256706587502332089984936952929898657291084084649970045084358921770909467222785217735264439160795992816161290982562839636283400475336923817336284951376657992012913132242224754943979568416653542422727740793202768396758052102483502551968135137450229155885429531386890149886891968670692051752052011533387453334598085940623311404334410249761527897533892654298769448598657668977804773385916326535487926200995628449104630792393096906786873762790916577841778982651200664713847342166896549420100071682624792516438043120247116825290510701196626719939126083466143350353222704115035199944145723645919371475106942902255778288373991810641644680719236360000942473015877413224406999077231588735528367224643264209093667266985067222176960884687950266879588290485012912530345303005916658501537366949570040818056990875028993148500249028449818902129869808362541042388968035947266833728892704755002912567268489252625213985209042516337473653262952739611480535268882837904877827496096559853686854370142528074926297035033437822964120119519631805512116094409242775738544767446730001372711240646512564905786337139795268874454373983668559274099182293086821581394138173723347928635084492842891396250370059343786856192225207630686041930510798058373554040328070845283649354560173701973305862452103697796426545775148971753832980738004662037427872957767823805045718446055775672933244032135465833541836364076910448401088964301801555832773856412345502181912973206191240957360484850352012744206350803503583780479072671454053612266643143353344317900386653164486916703645778235634618261305625407915208532373590368919113607992214135007359863409213207448202096454449557296201924"}}
F := {"x": "1.5142115323225357578796312057414620953714154749603662503360114414411394382578557772726066930169470502434562411222791237823727453055410746292494254086235836921364312409205363724363792188059668747486199673915203339295925716671779255694189532737128353214377632997572905903628171782543507078899234506115617831739616156559638279039434335986770041224540343617898114637321099717240316501640763829202578937943497134816361492921862406412193358295137083776331191226754479934421189635475469094719326945065016175843216123241236684169373942354173961818090042349256185916013692752378998228187084597879188684664373339630809945317486050955420871032008714760151903320768491160037288957955895754169589844938154649565065792876189190767302331292745335307063853715783352291830821418196037956861671476214504561538379167560083960171515102120880952414371929157307952005192791321848433115193602431428864582102412919801754409968979089800433795487225546505338431389298891232596216005764678098895655169877086011753709106584041582177667014624526935376780131415666617091311311381413132924332928222652419647009846182262199604164776840202219831861242787176901567950944568051530466910609477298658452819383296102597389428473372142037562359693081238176565270540313790866104893866999313087299591721901278882731337428960638240383528500330367424125612204699796827430900101219104758879113360158607596106962820340634125720094319232394956289586889667363246159208840303865303683713889665675212523421618614523209552545075565267746456301821442623519204936127460455541975443846007077112413057422686436658944470681998758943967692365167104511248779205973567811153164753113506307080934773606441381549365943001446637171298808382432919407516463917549459995087703440944847308388151032572370504232507659873998747778141348234650902619616849563221074400154421504461829422866994022167035493159373455984512911016534955869353433321044870716883497459532664298729643938212283136482041058667101934929230748463820785211944730328048012237753805108987703887580476", "y": "0.6702450101316245232105205189495870535421512323617274948861429123358261151780971776394858548103075657574198687311853005010417707314754447129231111989496175127438960485233064668760922157009814648256783528310527547064013136881449134929986326420438875263280954030613910377691739247029707827595702471172669583268964504940132681378287386615727585642845259950770909450371646706248833955007531523535050671354457957675014977457820539114545266388607391132367780419602003591919354508718580181858299762331538091331857524311671003993543433878887622528010215791673228788636129603398615801620973948758248724015932431274885422057285234306554925056554015664653974123973994233306273332700957029688344297832794875119236051233053672850615275700671165511097613307041836732256036899502185775447684603803451546606563118604541711079110508674399667643076328916551725289949964158687603741780978439876441587354744649401686640030436958266928324823388647942482400027927138177040314262446528548872110855813004094679177659640381819999528763492061293387796500461384205632235816387678367895453166366507466388911519557656024866560205854757493543734827348497041670749231316525214979590971504562485503425749875485775090548935065095818729478805515982026366583135553647622498543716365755373687393007395478741831263173368523630194259732365558581047561086251951720073156572814928735962536851482483281088517939940240184097243941952795378612130727616276634999313644379676743717547106831430102365562772813008165720362950408853456589209302930913138326035682457753578554301874814970328106571903887396184656979034744600970813222979835964577358175322719913149013347068773948151101786727112425514123083509630997668981286063521116088097477140776972112163533377983932267083229081817961544775799455517849099222083613071793827248909043513396904379521319757574823993627896824598248208109760463664272973193866678428323327841049806673417756541648177110882182690869347187296042395733813204815540443196003892932496320068295393396275898951772775221351899038"}
i := {"point": {"x": "1.5142115323225357578796312057414620953714154749603662503360114414411394382578557772726066930169470502434562411222791237823727453055410746292494254086235836921364312409205363724363792188059668747486199673915203339295925716671779255694189532737128353214377632997572905903628171782543507078899234506115617831739616156559638279039434335986770041224540343617898114637321099717240316501640763829202578937943497134816361492921862406412193358295137083776331191226754479934421189635475469094719326945065016175843216123241236684169373942354173961818090042349256185916013692752378998228187084597879188684664373339630809945317486050955420871032008714760151903320768491160037288957955895754169589844938154649565065792876189190767302331292745335307063853715783352291830821418196037956861671476214504561538379167560083960171515102120880952414371929157307952005192791321848433115193602431428864582102412919801754409968979089800433795487225546505338431389298891232596216005764678098895655169877086011753709106584041582177667014624526935376780131415666617091311311381413132924332928222652419647009846182262199604164776840202219831861242787176901567950944568051530466910609477298658452819383296102597389428473372142037562359693081238176565270540313790866104893866999313087299591721901278882731337428960638240383528500330367424125612204699796827430900101219104758879113360158607596106962820340634125720094319232394956289586889667363246159208840303865303683713889665675212523421618614523209552545075565267746456301821442623519204936127460455541975443846007077112413057422686436658944470681998758943967692365167104511248779205973567811153164753113506307080934773606441381549365943001446637171298808382432919407516463917549459995087703440944847308388151032572370504232507659873998747778141348234650902619616849563221074400154421504461829422866994022167035493159373455984512911016534955869353433321044870716883497459532664298729643938212283136482041058667101934929230748463820785211944730328048012237753805108987703887580476", "y": "0.6702450101316245232105205189495870535421512323617274948861429123358261151780971776394858548103075657574198687311853005010417707314754447129231111989496175127438960485233064668760922157009814648256783528310527547064013136881449134929986326420438875263280954030613910377691739247029707827595702471172669583268964504940132681378287386615727585642845259950770909450371646706248833955007531523535050671354457957675014977457820539114545266388607391132367780419602003591919354508718580181858299762331538091331857524311671003993543433878887622528010215791673228788636129603398615801620973948758248724015932431274885422057285234306554925056554015664653974123973994233306273332700957029688344297832794875119236051233053672850615275700671165511097613307041836732256036899502185775447684603803451546606563118604541711079110508674399667643076328916551725289949964158687603741780978439876441587354744649401686640030436958266928324823388647942482400027927138177040314262446528548872110855813004094679177659640381819999528763492061293387796500461384205632235816387678367895453166366507466388911519557656024866560205854757493543734827348497041670749231316525214979590971504562485503425749875485775090548935065095818729478805515982026366583135553647622498543716365755373687393007395478741831263173368523630194259732365558581047561086251951720073156572814928735962536851482483281088517939940240184097243941952795378612130727616276634999313644379676743717547106831430102365562772813008165720362950408853456589209302930913138326035682457753578554301874814970328106571903887396184656979034744600970813222979835964577358175322719913149013347068773948151101786727112425514123083509630997668981286063521116088097477140776972112163533377983932267083229081817961544775799455517849099222083613071793827248909043513396904379521319757574823993627896824598248208109760463664272973193866678428323327841049806673417756541648177110882182690869347187296042395733813204815540443196003892932496320068295393396275898951772775221351899038"}, "direction": {"x": "-0.49998158165944943461863072542440361371397485177553000520041241606367542169841449236114509332006478844609883481089418330141373271456617619392220809061006475960194634441796913041016957133436888272907299141388258086564174209584708095461554204184685623401089881863285064489168625765682756447380654917902115011122413847807305506744560590181026663616958015981641131442110522155842362337532362426193530157563703583366777070837191221229754982106046894424903701718131517000874928917439461937194272670808768414241335261625483373091786979746891607476862863680043481200788470027305542762606524582046813637894058223850239234172699051989752604816837857695559386006856770336392702433680513640759074742419914788531233809151554534454391723906943060527367256117614722536929833071170289031719473858519548189052340475973615114140019813954941981609453345287764203641379623804217994036532755442841161488203261455802955612993908443154342398130848499310324078022419137626598089636578642871889497662919033474197788465768823538445955703124516042551062186649566905231101705652310584684181248173940103626530700936040597240507073556303539562636745671458303778658060644966909898308406691374802905583150801162520561791111833030592736996021141520598161249055412522739147400421621653461234505981049398627222085108347179697006421700206057455980470603178865250593497231584603582494480844367601980612785614232882986181523488768403948279148790850946457726530032271029575580108842204210595958440733957567961570180428710205595692052869351104508360112751154260133321602293911866010505371330922164623316749951248400285915061339140316408026628737942990767750088996205809052117164709475619844078309630275605023773739958371982705497863692070454290710450007142036877936228318641281735427532771598115462628313747786338436138763095581595558095952159314199519702967972672989012374857530872998825054928992564685539450922881758696194311052887841482781834361808948412564021007570857939557189717447203547780410744247297289692184692873143531273558939554", "y": "0.42287529292516121621697636085991511562230394845797714870638451553401394715642584185776784847472248138530880196580852603002403257382748445545533074190635677160064177590432083070915744625730257349572544514305699892573541091668782094561182502502057181323821911352942461100955140068382452072741586433495424856344623871839490775477408805381005160683637060961054122921761130792071884270054431252243824951649937145975179180864269831244523878024585726458924899482673713344854105524252596347731300508441270899237470392259769538739288388617398852400638642968716414965735349503221223292353869587206613344832858010018660156285280282665864103326833824126162134886832647135641899764130425808195475422721429021697837898108487674432811433084863639899431549603438188164390951449453051344252015158553609982225317401202621255016002692929713382031098552349037443711610350837872142045575296190191769693294584391536221510261644994145569915156511516977896002182207532341408606615782406925919426549048660993868896000218669925408621832271400858731379169720466841218671090502610395870239038884639350109092112740791256846384446563873397738192396828669385793443637339187281803764261645934321616553162940167181557151835165827468784421938540821139554901928363404951232461061127710675779415672295394898411365013303618001353496398453673226549721653024463914309760577704555189705686589421234381425426905947867710223499992587399475072234796801055365909531106081175820482134328382728731445694983648896767759336328674887989312516705033107248832894897953286086222102478762171850759208482944739467388255773958477533899779718528378364909173776540998612547662504760337278135847693679810856884137597773045637837105406984185854469381344389881056418037997922307283785996864729568220922196673158220826865035034724052599179557383285152033568586717922342101175135736599615757184852972739320196605124337914837140591667327901208030263219602982039742731370527385135104835420739572729897603857554729810561337451513690127404797500903267273611302735923"}}
f := {"point": {"x": "0.50030183580086806660602860574726946651935577392578125", "y": "0.069089550707693347941784622889827005565166473388671875"}, "direction": {"x": "1.73135593148816846476023556533618830144405364990234375", "y": "0.851790865081514192436173971145763061940670013427734375"}}

Need to prove:
concurrent(f, i, j)

Proof:
By line_definition on B, line_intersection(f, i), f we get f == Line(B, line_intersection(f, i))
By line_definition on A, line_intersection(f, i), f we get f == Line(A, line_intersection(f, i))
By line_definition on line_intersection(f, i), F, i we get i == Line(F, line_intersection(f, i))
By line_definition on E, D, h we get h == Line(D, E)
By circle_definition on E, C, D, c we get c == Circle(C, D, E)
By circle_definition on E, A, C, c we get c == Circle(A, C, E)
By circle_definition on E, A, D, c we get c == Circle(A, D, E)
By median_definition on E, A, B, h we get h == median(E, A, B)
By median_definition on line_intersection(f, i), D, E, i we get i == median(line_intersection(f, i), D, E)
By line_intersection_definition on C, j, g we get C == line_intersection(g, j)
By line_intersection_definition on E, j, h we get E == line_intersection(h, j)
By line_intersection_definition on A, g, f we get A == line_intersection(f, g)
By between_imply_not_between on E, F, D we get collinear_and_not_between(D, E, F)
By between_imply_not_between on D, F, E we get collinear_and_not_between(E, D, F)
By between_imply_not_between on B, D, A we get collinear_and_not_between(A, B, D)
By between_imply_not_between on A, D, B we get collinear_and_not_between(B, A, D)
By parallel_line_definition on C, g, h we get g == parallel_line(C, h)
By parallel_line_definition on A, g, h we get g == parallel_line(A, h)
By parallel_line_definition on E, h, g we get h == parallel_line(E, g)
By in_imply_collinear on line_intersection(f, i), A, B we get collinear(A, B, line_intersection(f, i))
By in_imply_concyclic on A, D, C, E we get concyclic(A, C, D, E)
By angle_bisector_draw_angle_v0 on C, F, A we get exists(Line(A, F), Line(C, F))
By angle_bisector_draw_angle_v0 on A, F, C we get exists(Line(A, F), Line(C, F))
By power_of_a_point_in_circle on D, c we get 0 == power_of_a_point(D, c)
By power_of_a_point_in_circle on E, c we get 0 == power_of_a_point(E, c)
By power_of_a_point_in_circle on C, c we get 0 == power_of_a_point(C, c)
By power_of_a_point_on_circle on A, c we get 0 == power_of_a_point(A, c)
By angles_on_chord_v3 on A, E, D, C, c we get angle(A, D, E) == angle(A, C, E) + 180 mod 360
By angles_on_chord_v1 on C, E, A, D, c we get angle(C, A, E) == angle(C, D, E) mod 360
By angles_on_chord_v2 on E, A, D, C, c we get angle(E, D, A) == angle(E, C, A) + 180 mod 360
By angles_on_chord_v1 on E, D, C, A, c we get angle(E, A, D) == angle(E, C, D) mod 360
By angles_on_chord_v3 on E, A, C, D, c we get angle(E, C, A) == angle(E, D, A) + 180 mod 360
By angles_on_chord_v2 on C, D, E, A, c we get angle(C, E, D) == angle(C, A, D) + 180 mod 360
By angles_on_chord_v3 on D, C, E, A, c we get angle(D, E, C) == angle(D, A, C) + 180 mod 360
By angles_on_chord_v0 on C, A, E, D, c we get angle(C, D, A) == angle(C, E, A) mod 360
By angles_on_chord_v0 on A, D, C, E, c we get angle(A, C, D) == angle(A, E, D) mod 360
By angles_on_chord_v0 on E, C, D, A, c we get angle(E, A, C) == angle(E, D, C) mod 360
By angles_on_chord_v1 on D, A, C, E, c we get angle(D, C, A) == angle(D, E, A) mod 360
By angles_on_chord_v2 on D, C, A, E, c we get angle(D, A, C) == angle(D, E, C) + 180 mod 360
By angles_on_chord_v0 on D, E, A, C, c we get angle(D, A, E) == angle(D, C, E) mod 360
By angles_on_chord_v1 on A, C, D, E, c we get angle(A, D, C) == angle(A, E, C) mod 360
By angles_on_chord_v2 on A, E, C, D, c we get angle(A, C, E) == angle(A, D, E) + 180 mod 360
By same_angle_v0 on A, B, D, C we get angle(B, A, C) == angle(D, A, C) mod 360
By angles_on_chord_v3 on C, D, A, E, c we get angle(C, A, D) == angle(C, E, D) + 180 mod 360
By same_angle_v1 on E, F, D, C we get angle(D, E, C) == angle(F, E, C) mod 360
By log_of_2_times_distance on A, B, A, D we get log(distance(A, B)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(A, D))
By log_of_2_times_distance on A, B, B, D we get log(distance(A, B)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(B, D))
By collinear_definition on E, D, F we get D in Line(E, F), F in Line(D, E), Line(D, E) == Line(E, F), 0 == 2 * angle(D, E, F) mod 360
By collinear_definition on D, E, F we get E in Line(D, F), F in Line(D, E), Line(D, E) == Line(D, F), 0 == 2 * angle(E, D, F) mod 360
By log_of_2_times_distance on E, D, E, F we get log(distance(D, E)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(E, F))
By collinear_definition on D, B, A we get B in Line(A, D), A in Line(B, D), Line(A, D) == Line(B, D), 0 == 2 * angle(B, D, A) mod 360
By collinear_definition on F, E, D we get E in Line(D, F), D in Line(E, F), Line(D, F) == Line(E, F), 0 == 2 * angle(E, F, D) mod 360
By collinear_definition on A, B, D we get B in Line(A, D), D in Line(A, B), Line(A, B) == Line(A, D), 0 == 2 * angle(B, A, D) mod 360
By collinear_definition on D, F, E we get F in Line(D, E), E in Line(D, F), Line(D, E) == Line(D, F), 0 == 2 * angle(F, D, E) mod 360
By log_of_2_times_distance on D, E, D, F we get log(distance(D, E)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(D, F))
By collinear_definition on B, D, A we get D in Line(A, B), A in Line(B, D), Line(A, B) == Line(B, D), 0 == 2 * angle(D, B, A) mod 360
By collinear_definition on D, A, B we get A in Line(B, D), B in Line(A, D), Line(A, D) == Line(B, D), 0 == 2 * angle(A, D, B) mod 360
By collinear_definition on A, D, B we get D in Line(A, B), B in Line(A, D), Line(A, B) == Line(A, D), 0 == 2 * angle(D, A, B) mod 360
By collinear_definition on F, D, E we get D in Line(E, F), E in Line(D, F), Line(D, F) == Line(E, F), 0 == 2 * angle(D, F, E) mod 360
By collinear_definition on B, A, D we get A in Line(B, D), D in Line(A, B), Line(A, B) == Line(B, D), 0 == 2 * angle(A, B, D) mod 360
By collinear_definition on E, F, D we get F in Line(D, E), D in Line(E, F), Line(D, E) == Line(E, F), 0 == 2 * angle(F, E, D) mod 360
By power_of_a_point_definition on B, A, D, c we get log(power_of_a_point(B, c)) == log(distance(A, B)) + log(distance(B, D))
By power_of_a_point_definition on F, D, E, c we get log(power_of_a_point(F, c)) == log(distance(D, F)) + log(distance(E, F))
By between_implies_angles on E, F, D we get 180 == angle(E, F, D) mod 360, 0 == angle(F, D, E) mod 360, 0 == angle(D, E, F) mod 360
By between_implies_angles on D, F, E we get 180 == angle(D, F, E) mod 360, 0 == angle(F, E, D) mod 360, 0 == angle(E, D, F) mod 360
By between_implies_angles on A, D, B we get 180 == angle(A, D, B) mod 360, 0 == angle(D, B, A) mod 360, 0 == angle(B, A, D) mod 360
By between_implies_angles on B, D, A we get 180 == angle(B, D, A) mod 360, 0 == angle(D, A, B) mod 360, 0 == angle(A, B, D) mod 360
By line_definition on D, line_intersection(f, i), f we get f == Line(D, line_intersection(f, i))
By angles_on_equal_chords_v1 on C, D, E, D, C, A, c we get angle(C, D, E) == angle(D, C, A) mod 360
By angles_on_equal_chords_v1 on D, C, A, C, A, E, c we get angle(C, A, E) == angle(D, C, A) mod 360
By angles_on_equal_chords_v0 on E, A, C, A, E, D, c we get angle(A, E, D) == angle(E, A, C) mod 360
By angles_on_equal_chords_v0 on C, E, D, E, D, A, c we get angle(C, E, D) == angle(E, D, A) mod 360
By angles_on_equal_chords_v0 on A, C, D, E, D, C, c we get angle(A, C, D) == angle(E, D, C) mod 360
By angles_on_equal_chords_v0 on A, E, D, E, D, C, c we get angle(A, E, D) == angle(E, D, C) mod 360
By angles_on_equal_chords_v0 on D, A, C, A, C, E, c we get angle(A, C, E) == angle(D, A, C) mod 360
By angles_on_equal_chords_v1 on A, D, E, D, E, C, c we get angle(A, D, E) == angle(D, E, C) mod 360
By angles_on_equal_chords_v2 on D, A, C, A, D, E, c we get angle(D, A, C) == angle(A, D, E) + 180 mod 360
By angles_on_equal_chords_v0 on A, C, D, E, A, C, c we get angle(A, C, D) == angle(E, A, C) mod 360
By angles_on_equal_chords_v1 on C, D, E, D, E, A, c we get angle(C, D, E) == angle(D, E, A) mod 360
By angles_on_equal_chords_v3 on E, C, A, C, E, D, c we get angle(E, C, A) == angle(C, E, D) + 180 mod 360
By angles_on_equal_chords_v3 on C, A, D, E, D, A, c we get angle(C, A, D) == angle(E, D, A) + 180 mod 360
By angles_on_equal_chords_v3 on A, D, E, D, A, C, c we get angle(A, D, E) == angle(D, A, C) + 180 mod 360
By angles_on_equal_chords_v2 on C, E, D, E, C, A, c we get angle(C, E, D) == angle(E, C, A) + 180 mod 360
By angles_on_equal_chords_v1 on D, E, A, C, A, E, c we get angle(C, A, E) == angle(D, E, A) mod 360
By angles_on_equal_chords_v2 on A, C, E, D, E, C, c we get angle(A, C, E) == angle(D, E, C) + 180 mod 360
By angles_on_equal_chords_v1 on C, A, D, E, C, A, c we get angle(C, A, D) == angle(E, C, A) mod 360
By angles_on_equal_chords_v3 on D, E, C, A, C, E, c we get angle(D, E, C) == angle(A, C, E) + 180 mod 360
By angles_on_equal_chords_v2 on E, D, A, C, A, D, c we get angle(E, D, A) == angle(C, A, D) + 180 mod 360
By line_intersection_definition on D, h, f we get D == line_intersection(f, h)
By line_intersection_definition on A, Line(A, E), f we get A == line_intersection(f, Line(A, E))
By line_intersection_definition on C, Line(C, D), j we get C == line_intersection(j, Line(C, D))
By line_intersection_definition on F, Line(A, F), h we get F == line_intersection(h, Line(A, F))
By line_intersection_definition on F, Line(A, F), Line(C, F) we get F == line_intersection(Line(A, F), Line(C, F))
By line_intersection_definition on C, Line(C, D), g we get C == line_intersection(g, Line(C, D))
By median_definition on C, B, A, Line(C, D) we get Line(C, D) == median(C, A, B)
By median_definition on C, E, D, Line(C, F) we get Line(C, F) == median(C, D, E)
By line_intersection_definition on C, Line(C, F), Line(C, D) we get C == line_intersection(Line(C, D), Line(C, F))
By line_intersection_definition on C, g, Line(C, F) we get C == line_intersection(g, Line(C, F))
By line_intersection_definition on F, Line(C, F), h we get F == line_intersection(h, Line(C, F))
By line_intersection_definition on D, f, Line(C, D) we get D == line_intersection(f, Line(C, D))
By median_definition on A, E, D, Line(A, F) we get Line(A, F) == median(A, D, E)
By line_intersection_definition on A, Line(A, F), f we get A == line_intersection(f, Line(A, F))
By line_intersection_definition on D, Line(C, D), h we get D == line_intersection(h, Line(C, D))
By line_intersection_definition on E, Line(A, E), h we get E == line_intersection(h, Line(A, E))
By line_intersection_definition on A, Line(A, E), Line(A, F) we get A == line_intersection(Line(A, E), Line(A, F))
By line_intersection_definition on F, i, Line(C, F) we get F == line_intersection(i, Line(C, F))
By line_intersection_definition on E, j, Line(A, E) we get E == line_intersection(j, Line(A, E))
By line_intersection_definition on A, Line(A, E), g we get A == line_intersection(g, Line(A, E))
By line_intersection_definition on F, h, i we get F == line_intersection(h, i)
By median_definition on F, B, A, h we get h == median(F, A, B)
By line_intersection_definition on F, i, Line(A, F) we get F == line_intersection(i, Line(A, F))
By line_intersection_definition on A, Line(A, F), g we get A == line_intersection(g, Line(A, F))
By line_intersection_definition on C, j, Line(C, F) we get C == line_intersection(j, Line(C, F))
By same_angle_v0 on D, E, F, C we get angle(E, D, C) == angle(F, D, C) mod 360
By same_angle_v2 on D, B, A, E we get angle(B, D, E) == angle(A, D, E) + 180 mod 360
By same_angle_v3 on D, B, A, F we get angle(B, D, F) == angle(A, D, F) + 180 mod 360
By same_angle_v1 on E, F, D, A we get angle(D, E, A) == angle(F, E, A) mod 360
By same_angle_v0 on D, F, E, A we get angle(E, D, A) == angle(F, D, A) mod 360
By same_angle_v1 on D, F, E, B we get angle(E, D, B) == angle(F, D, B) mod 360
By same_angle_v0 on A, B, D, E we get angle(B, A, E) == angle(D, A, E) mod 360
By same_angle_v3 on D, B, A, C we get angle(B, D, C) == angle(A, D, C) + 180 mod 360
By parallel_line_definition on F, h, g we get h == parallel_line(F, g)
By same_angle_v3 on F, E, D, A we get angle(E, F, A) == angle(D, F, A) + 180 mod 360
By same_angle_v3 on F, E, D, C we get angle(E, F, C) == angle(D, F, C) + 180 mod 360
By in_imply_collinear on D, line_intersection(f, i), A we get collinear(A, D, line_intersection(f, i))
By same_angle_v0 on A, D, B, F we get angle(B, A, F) == angle(D, A, F) mod 360
By parallel_line_angles_reverse_v3 on C, A, D, F we get angle(C, A, D) == angle(F, D, A) + 180 mod 360
By in_imply_collinear on D, line_intersection(f, i), B we get collinear(B, D, line_intersection(f, i))
By parallel_line_angles_reverse_v3 on F, E, C, A we get angle(F, E, C) == angle(A, C, E) + 180 mod 360
By parallel_line_angles_reverse_v0 on F, D, C, A we get angle(A, C, D) == angle(F, D, C) mod 360
By parallel_line_angles_reverse_v1 on C, A, E, F we get angle(C, A, E) == angle(F, E, A) mod 360
By reverse_direction on A, D we get 180 == direction(A, D) - direction(D, A) mod 360
By reverse_direction on B, A we get 180 == direction(B, A) - direction(A, B) mod 360
By reverse_direction on E, C we get 180 == direction(E, C) - direction(C, E) mod 360
By parallel_line_angles_reverse_v2 on F, D, A, C we get angle(F, D, A) == angle(C, A, D) + 180 mod 360
By reverse_direction on C, D we get 180 == direction(C, D) - direction(D, C) mod 360
By isosceles_trapezoids_are_concyclic_v1 on E, D, A, C we get isosceles_trapezoid(A, C, E, D)
By reverse_direction on A, B we get 180 == direction(A, B) - direction(B, A) mod 360
By parallel_line_angles_reverse_v2 on A, C, E, F we get angle(A, C, E) == angle(F, E, C) + 180 mod 360
By reverse_direction on C, A we get 180 == direction(C, A) - direction(A, C) mod 360
By reverse_direction on D, B we get 180 == direction(D, B) - direction(B, D) mod 360
By reverse_direction on D, E we get 180 == direction(D, E) - direction(E, D) mod 360
By reverse_direction on B, D we get 180 == direction(B, D) - direction(D, B) mod 360
By reverse_direction on E, F we get 180 == direction(E, F) - direction(F, E) mod 360
By reverse_direction on F, D we get 180 == direction(F, D) - direction(D, F) mod 360
By reverse_direction on E, A we get 180 == direction(E, A) - direction(A, E) mod 360
By isosceles_trapezoids_are_concyclic_v1 on C, A, E, D we get isosceles_trapezoid(C, A, E, D)
By reverse_direction on C, E we get 180 == direction(C, E) - direction(E, C) mod 360
By isosceles_trapezoids_are_concyclic_v1 on D, E, C, A we get isosceles_trapezoid(C, A, D, E)
By reverse_direction on D, A we get 180 == direction(D, A) - direction(A, D) mod 360
By isosceles_trapezoids_are_concyclic_v1 on E, D, C, A we get isosceles_trapezoid(C, A, E, D)
By reverse_direction on F, E we get 180 == direction(F, E) - direction(E, F) mod 360
By isosceles_trapezoids_are_concyclic_v1 on C, A, D, E we get isosceles_trapezoid(C, A, D, E)
By reverse_direction on E, D we get 180 == direction(E, D) - direction(D, E) mod 360
By reverse_direction on A, E we get 180 == direction(A, E) - direction(E, A) mod 360
By isosceles_trapezoids_are_concyclic_v1 on A, C, D, E we get isosceles_trapezoid(A, C, D, E)
By reverse_direction on D, C we get 180 == direction(D, C) - direction(C, D) mod 360
By reverse_direction on D, F we get 180 == direction(D, F) - direction(F, D) mod 360
By reverse_direction on A, C we get 180 == direction(A, C) - direction(C, A) mod 360
By isosceles_trapezoids_are_concyclic_v1 on A, C, E, D we get isosceles_trapezoid(A, C, E, D)
By isosceles_trapezoids_are_concyclic_v1 on D, E, A, C we get isosceles_trapezoid(A, C, D, E)
By internal_angle_bisector_definition_v0_r on B, D, B, A we get Line(A, D) == internal_angle_bisector(B, A, B)
By internal_angle_bisector_definition_v0_r on D, F, D, E we get Line(E, F) == internal_angle_bisector(D, E, D)
By collinear_definition on B, line_intersection(f, i), A we get line_intersection(f, i) in Line(A, B), A in Line(B, line_intersection(f, i)), Line(A, B) == Line(B, line_intersection(f, i)), 0 == 2 * angle(line_intersection(f, i), B, A) mod 360
By collinear_definition on B, A, line_intersection(f, i) we get A in Line(B, line_intersection(f, i)), line_intersection(f, i) in Line(A, B), Line(A, B) == Line(B, line_intersection(f, i)), 0 == 2 * angle(A, B, line_intersection(f, i)) mod 360
By internal_angle_bisector_definition_v0_r on B, A, B, D we get Line(A, D) == internal_angle_bisector(B, D, B)
By internal_angle_bisector_definition_v0_r on D, A, D, B we get Line(A, B) == internal_angle_bisector(D, B, D)
By internal_angle_bisector_definition_v0_r on A, D, A, B we get Line(B, D) == internal_angle_bisector(A, B, A)
By internal_angle_bisector_definition_v0_r on D, B, D, A we get Line(A, B) == internal_angle_bisector(D, A, D)
By internal_angle_bisector_definition_v0_r on F, E, F, D we get Line(D, E) == internal_angle_bisector(F, D, F)
By internal_angle_bisector_definition_v0_r on D, E, D, F we get Line(E, F) == internal_angle_bisector(D, F, D)
By internal_angle_bisector_definition_v0_r on E, F, E, D we get Line(D, F) == internal_angle_bisector(E, D, E)
By internal_angle_bisector_definition_v0_r on F, D, F, E we get Line(D, E) == internal_angle_bisector(F, E, F)
By collinear_definition on A, line_intersection(f, i), B we get line_intersection(f, i) in Line(A, B), B in Line(A, line_intersection(f, i)), Line(A, B) == Line(A, line_intersection(f, i)), 0 == 2 * angle(line_intersection(f, i), A, B) mod 360
By internal_angle_bisector_definition_v0_r on E, D, E, F we get Line(D, F) == internal_angle_bisector(E, F, E)
By internal_angle_bisector_definition_v0_r on A, B, A, D we get Line(B, D) == internal_angle_bisector(A, D, A)
By collinear_definition on A, B, line_intersection(f, i) we get B in Line(A, line_intersection(f, i)), line_intersection(f, i) in Line(A, B), Line(A, B) == Line(A, line_intersection(f, i)), 0 == 2 * angle(B, A, line_intersection(f, i)) mod 360
By parallel_line_angles_reverse_v1 on C, A, F, D we get angle(C, A, F) == angle(D, F, A) mod 360
By parallel_line_angles_reverse_v3 on C, A, F, E we get angle(C, A, F) == angle(E, F, A) + 180 mod 360
By collinear_definition on line_intersection(f, i), A, B we get A in Line(B, line_intersection(f, i)), B in Line(A, line_intersection(f, i)), Line(A, line_intersection(f, i)) == Line(B, line_intersection(f, i)), 0 == 2 * angle(A, line_intersection(f, i), B) mod 360
By parallel_line_angles_reverse_v0 on A, C, F, E we get angle(A, C, F) == angle(E, F, C) mod 360
By parallel_line_angles_reverse_v3 on D, F, C, A we get angle(D, F, C) == angle(A, C, F) + 180 mod 360
By parallel_line_angles_reverse_v2 on E, F, A, C we get angle(E, F, A) == angle(C, A, F) + 180 mod 360
By parallel_line_angles_reverse_v2 on A, C, F, D we get angle(A, C, F) == angle(D, F, C) + 180 mod 360
By collinear_definition on line_intersection(f, i), B, A we get B in Line(A, line_intersection(f, i)), A in Line(B, line_intersection(f, i)), Line(A, line_intersection(f, i)) == Line(B, line_intersection(f, i)), 0 == 2 * angle(B, line_intersection(f, i), A) mod 360
By internal_angle_bisector_definition_v0 on C, line_intersection(f, i), A, F we get angle(C, F, line_intersection(f, i)) == angle(line_intersection(f, i), F, A) mod 360
By internal_angle_bisector_definition_v0 on A, line_intersection(f, i), C, F we get angle(A, F, line_intersection(f, i)) == angle(line_intersection(f, i), F, C) mod 360
By concurrent_sufficient_conditions on Line(C, F), h, Line(A, F) we get concurrent(h, Line(A, F), Line(C, F))
By concurrent_sufficient_conditions on i, Line(A, F), Line(C, F) we get concurrent(i, Line(A, F), Line(C, F))
By concurrent_sufficient_conditions on Line(C, D), f, h we get concurrent(f, h, Line(C, D))
By concurrent_sufficient_conditions on g, f, Line(A, F) we get concurrent(f, g, Line(A, F))
By concurrent_sufficient_conditions on Line(C, D), j, g we get concurrent(g, j, Line(C, D))
By concurrent_sufficient_conditions on g, Line(A, E), f we get concurrent(f, g, Line(A, E))
By concurrent_sufficient_conditions on g, Line(A, F), Line(A, E) we get concurrent(g, Line(A, E), Line(A, F))
By concurrent_sufficient_conditions on g, Line(A, F), f we get concurrent(f, g, Line(A, F))
By concurrent_sufficient_conditions on Line(C, F), g, Line(C, D) we get concurrent(g, Line(C, D), Line(C, F))
By concurrent_sufficient_conditions on h, Line(C, F), Line(A, F) we get concurrent(h, Line(A, F), Line(C, F))
By concurrent_sufficient_conditions on f, g, Line(A, E) we get concurrent(f, g, Line(A, E))
By concurrent_sufficient_conditions on f, Line(C, D), h we get concurrent(f, h, Line(C, D))
By concurrent_sufficient_conditions on Line(A, F), Line(C, F), h we get concurrent(h, Line(A, F), Line(C, F))
By concurrent_sufficient_conditions on h, Line(A, F), Line(C, F) we get concurrent(h, Line(A, F), Line(C, F))
By concurrent_sufficient_conditions on Line(A, F), h, Line(C, F) we get concurrent(h, Line(A, F), Line(C, F))
By concurrent_sufficient_conditions on Line(A, F), Line(C, F), i we get concurrent(i, Line(A, F), Line(C, F))
By concurrent_sufficient_conditions on Line(A, E), Line(A, F), f we get concurrent(f, Line(A, E), Line(A, F))
By concurrent_sufficient_conditions on i, h, Line(A, F) we get concurrent(h, i, Line(A, F))
By concurrent_sufficient_conditions on j, Line(C, F), Line(C, D) we get concurrent(j, Line(C, D), Line(C, F))
By concurrent_sufficient_conditions on Line(A, E), j, h we get concurrent(h, j, Line(A, E))
By concurrent_sufficient_conditions on f, Line(A, F), Line(A, E) we get concurrent(f, Line(A, E), Line(A, F))
By concurrent_sufficient_conditions on h, Line(A, F), i we get concurrent(h, i, Line(A, F))
By concurrent_sufficient_conditions on j, Line(A, E), h we get concurrent(h, j, Line(A, E))
By concurrent_sufficient_conditions on i, Line(C, F), Line(A, F) we get concurrent(i, Line(A, F), Line(C, F))
By concurrent_sufficient_conditions on Line(C, D), Line(C, F), g we get concurrent(g, Line(C, D), Line(C, F))
By concurrent_sufficient_conditions on Line(C, F), i, h we get concurrent(h, i, Line(C, F))
By concurrent_sufficient_conditions on f, Line(A, E), g we get concurrent(f, g, Line(A, E))
By concurrent_sufficient_conditions on g, Line(C, D), j we get concurrent(g, j, Line(C, D))
By concurrent_sufficient_conditions on h, i, Line(A, F) we get concurrent(h, i, Line(A, F))
By concurrent_sufficient_conditions on f, g, Line(A, F) we get concurrent(f, g, Line(A, F))
By concurrent_sufficient_conditions on f, Line(A, E), Line(A, F) we get concurrent(f, Line(A, E), Line(A, F))
By concurrent_sufficient_conditions on j, Line(C, D), g we get concurrent(g, j, Line(C, D))
By concurrent_sufficient_conditions on Line(C, F), i, Line(A, F) we get concurrent(i, Line(A, F), Line(C, F))
By concurrent_sufficient_conditions on Line(C, D), h, f we get concurrent(f, h, Line(C, D))
By concurrent_sufficient_conditions on Line(A, F), f, g we get concurrent(f, g, Line(A, F))
By concurrent_sufficient_conditions on Line(C, F), g, j we get concurrent(g, j, Line(C, F))
By concurrent_sufficient_conditions on j, Line(C, D), Line(C, F) we get concurrent(j, Line(C, D), Line(C, F))
By concurrent_sufficient_conditions on Line(C, F), Line(A, F), h we get concurrent(h, Line(A, F), Line(C, F))
By concurrent_sufficient_conditions on Line(C, D), g, Line(C, F) we get concurrent(g, Line(C, D), Line(C, F))
By concurrent_sufficient_conditions on j, g, Line(C, D) we get concurrent(g, j, Line(C, D))
By concurrent_sufficient_conditions on Line(A, E), g, Line(A, F) we get concurrent(g, Line(A, E), Line(A, F))
By concurrent_sufficient_conditions on i, Line(C, F), h we get concurrent(h, i, Line(C, F))
By concurrent_sufficient_conditions on Line(C, F), h, i we get concurrent(h, i, Line(C, F))
By concurrent_sufficient_conditions on h, i, Line(C, F) we get concurrent(h, i, Line(C, F))
By concurrent_sufficient_conditions on i, Line(A, F), h we get concurrent(h, i, Line(A, F))
By concurrent_sufficient_conditions on Line(A, F), f, Line(A, E) we get concurrent(f, Line(A, E), Line(A, F))
By concurrent_sufficient_conditions on j, Line(C, F), g we get concurrent(g, j, Line(C, F))
By concurrent_sufficient_conditions on Line(A, F), Line(A, E), f we get concurrent(f, Line(A, E), Line(A, F))
By concurrent_sufficient_conditions on h, Line(C, F), i we get concurrent(h, i, Line(C, F))
By concurrent_sufficient_conditions on Line(C, F), Line(A, F), i we get concurrent(i, Line(A, F), Line(C, F))
By concurrent_sufficient_conditions on Line(A, E), f, Line(A, F) we get concurrent(f, Line(A, E), Line(A, F))
By concurrent_sufficient_conditions on Line(A, F), h, i we get concurrent(h, i, Line(A, F))
By concurrent_sufficient_conditions on i, h, Line(C, F) we get concurrent(h, i, Line(C, F))
By concurrent_sufficient_conditions on g, Line(C, D), Line(C, F) we get concurrent(g, Line(C, D), Line(C, F))
By concurrent_sufficient_conditions on h, f, Line(C, D) we get concurrent(f, h, Line(C, D))
By concurrent_sufficient_conditions on h, j, Line(A, E) we get concurrent(h, j, Line(A, E))
By concurrent_sufficient_conditions on g, Line(A, E), Line(A, F) we get concurrent(g, Line(A, E), Line(A, F))
By concurrent_sufficient_conditions on f, Line(A, F), g we get concurrent(f, g, Line(A, F))
By concurrent_sufficient_conditions on h, Line(A, E), j we get concurrent(h, j, Line(A, E))
By concurrent_sufficient_conditions on Line(A, F), i, Line(C, F) we get concurrent(i, Line(A, F), Line(C, F))
By concurrent_sufficient_conditions on Line(A, E), f, g we get concurrent(f, g, Line(A, E))
By concurrent_sufficient_conditions on h, Line(C, D), f we get concurrent(f, h, Line(C, D))
By concurrent_sufficient_conditions on g, Line(C, F), j we get concurrent(g, j, Line(C, F))
By concurrent_sufficient_conditions on Line(A, E), g, f we get concurrent(f, g, Line(A, E))
By concurrent_sufficient_conditions on Line(C, F), j, Line(C, D) we get concurrent(j, Line(C, D), Line(C, F))
By concurrent_sufficient_conditions on Line(C, D), Line(C, F), j we get concurrent(j, Line(C, D), Line(C, F))
By concurrent_sufficient_conditions on j, h, Line(A, E) we get concurrent(h, j, Line(A, E))
By concurrent_sufficient_conditions on g, f, Line(A, E) we get concurrent(f, g, Line(A, E))
By concurrent_sufficient_conditions on f, h, Line(C, D) we get concurrent(f, h, Line(C, D))
By concurrent_sufficient_conditions on Line(C, D), j, Line(C, F) we get concurrent(j, Line(C, D), Line(C, F))
By concurrent_sufficient_conditions on Line(A, F), Line(A, E), g we get concurrent(g, Line(A, E), Line(A, F))
By concurrent_sufficient_conditions on g, j, Line(C, F) we get concurrent(g, j, Line(C, F))
By concurrent_sufficient_conditions on j, g, Line(C, F) we get concurrent(g, j, Line(C, F))
By concurrent_sufficient_conditions on Line(C, D), g, j we get concurrent(g, j, Line(C, D))
By concurrent_sufficient_conditions on Line(A, F), i, h we get concurrent(h, i, Line(A, F))
By concurrent_sufficient_conditions on Line(C, F), j, g we get concurrent(g, j, Line(C, F))
By concurrent_sufficient_conditions on g, j, Line(C, D) we get concurrent(g, j, Line(C, D))
By concurrent_sufficient_conditions on Line(A, E), Line(A, F), g we get concurrent(g, Line(A, E), Line(A, F))
By concurrent_sufficient_conditions on Line(C, F), Line(C, D), j we get concurrent(j, Line(C, D), Line(C, F))
By concurrent_sufficient_conditions on Line(A, F), g, f we get concurrent(f, g, Line(A, F))
By concurrent_sufficient_conditions on g, Line(C, F), Line(C, D) we get concurrent(g, Line(C, D), Line(C, F))
By concurrent_sufficient_conditions on Line(A, E), h, j we get concurrent(h, j, Line(A, E))
By concurrent_sufficient_conditions on Line(A, F), g, Line(A, E) we get concurrent(g, Line(A, E), Line(A, F))
By concurrent_sufficient_conditions on Line(C, F), Line(C, D), g we get concurrent(g, Line(C, D), Line(C, F))
By reverse_direction on line_intersection(f, i), B we get 180 == direction(line_intersection(f, i), B) - direction(B, line_intersection(f, i)) mod 360
By sas_anti_congruence on A, D, F, C, E, F we get anti_congruent_triangles(A, D, F, C, E, F)
By collinear_definition on A, line_intersection(f, i), D we get line_intersection(f, i) in Line(A, D), D in Line(A, line_intersection(f, i)), Line(A, D) == Line(A, line_intersection(f, i)), 0 == 2 * angle(line_intersection(f, i), A, D) mod 360
By sas_anti_congruence on F, D, A, F, E, C we get anti_congruent_triangles(A, D, F, C, E, F)
By sas_anti_congruence on F, D, C, F, E, A we get anti_congruent_triangles(A, E, F, C, D, F)
By isosceles_trapezoid_properties on D, E, A, C we get parallel(Line(A, C), Line(D, E)), distance(A, E) == distance(C, D), angle(C, D, E) == angle(D, E, A), angle(A, C, D) == angle(E, A, C)
By isosceles_trapezoid_properties on C, A, E, D we get parallel(Line(A, C), Line(D, E)), distance(A, E) == distance(C, D), angle(C, A, E) == angle(D, C, A), angle(A, E, D) == angle(E, D, C)
By isosceles_trapezoid_properties on C, A, D, E we get parallel(Line(A, C), Line(D, E)), distance(A, D) == distance(C, E), angle(C, A, D) == angle(E, C, A), angle(A, D, E) == angle(D, E, C)
By sas_anti_congruence on C, E, F, A, D, F we get anti_congruent_triangles(A, D, F, C, E, F)
By reverse_direction on line_intersection(f, i), A we get 180 == direction(line_intersection(f, i), A) - direction(A, line_intersection(f, i)) mod 360
By collinear_definition on B, line_intersection(f, i), D we get line_intersection(f, i) in Line(B, D), D in Line(B, line_intersection(f, i)), Line(B, D) == Line(B, line_intersection(f, i)), 0 == 2 * angle(line_intersection(f, i), B, D) mod 360
By collinear_definition on B, D, line_intersection(f, i) we get D in Line(B, line_intersection(f, i)), line_intersection(f, i) in Line(B, D), Line(B, D) == Line(B, line_intersection(f, i)), 0 == 2 * angle(D, B, line_intersection(f, i)) mod 360
By reverse_direction on B, line_intersection(f, i) we get 180 == direction(B, line_intersection(f, i)) - direction(line_intersection(f, i), B) mod 360
By reverse_direction on A, line_intersection(f, i) we get 180 == direction(A, line_intersection(f, i)) - direction(line_intersection(f, i), A) mod 360
By sas_anti_congruence on F, E, A, F, D, C we get anti_congruent_triangles(A, E, F, C, D, F)
By isosceles_trapezoid_properties on A, C, E, D we get parallel(Line(A, C), Line(D, E)), distance(A, D) == distance(C, E), angle(A, C, E) == angle(D, A, C), angle(C, E, D) == angle(E, D, A)
By internal_angle_bisector_definition_v0 on D, line_intersection(f, i), D, A we get angle(D, A, line_intersection(f, i)) == angle(line_intersection(f, i), A, D) mod 360
By internal_angle_bisector_definition_v0 on D, line_intersection(f, i), D, B we get angle(D, B, line_intersection(f, i)) == angle(line_intersection(f, i), B, D) mod 360
By sas_anti_congruence on C, D, F, A, E, F we get anti_congruent_triangles(A, E, F, C, D, F)
By sas_anti_congruence on A, E, F, C, D, F we get anti_congruent_triangles(A, E, F, C, D, F)
By sas_anti_congruence on F, E, C, F, D, A we get anti_congruent_triangles(A, D, F, C, E, F)
By collinear_definition on A, D, line_intersection(f, i) we get D in Line(A, line_intersection(f, i)), line_intersection(f, i) in Line(A, D), Line(A, D) == Line(A, line_intersection(f, i)), 0 == 2 * angle(D, A, line_intersection(f, i)) mod 360
By internal_angle_bisector_definition_v0 on A, line_intersection(f, i), A, D we get angle(A, D, line_intersection(f, i)) == angle(line_intersection(f, i), D, A) mod 360
By collinear_definition on line_intersection(f, i), D, B we get D in Line(B, line_intersection(f, i)), B in Line(D, line_intersection(f, i)), Line(B, line_intersection(f, i)) == Line(D, line_intersection(f, i)), 0 == 2 * angle(D, line_intersection(f, i), B) mod 360
By log_of_2_times_distance on A, B, E, C we get log(distance(A, B)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(C, E))
By internal_angle_bisector_definition_v0 on B, line_intersection(f, i), B, D we get angle(B, D, line_intersection(f, i)) == angle(line_intersection(f, i), D, B) mod 360
By collinear_definition on line_intersection(f, i), D, A we get D in Line(A, line_intersection(f, i)), A in Line(D, line_intersection(f, i)), Line(A, line_intersection(f, i)) == Line(D, line_intersection(f, i)), 0 == 2 * angle(D, line_intersection(f, i), A) mod 360
By collinear_definition on line_intersection(f, i), A, D we get A in Line(D, line_intersection(f, i)), D in Line(A, line_intersection(f, i)), Line(A, line_intersection(f, i)) == Line(D, line_intersection(f, i)), 0 == 2 * angle(A, line_intersection(f, i), D) mod 360
By internal_angle_bisector_definition_v0_r on A, B, A, line_intersection(f, i) we get Line(B, line_intersection(f, i)) == internal_angle_bisector(A, line_intersection(f, i), A)
By collinear_definition on D, line_intersection(f, i), A we get line_intersection(f, i) in Line(A, D), A in Line(D, line_intersection(f, i)), Line(A, D) == Line(D, line_intersection(f, i)), 0 == 2 * angle(line_intersection(f, i), D, A) mod 360
By internal_angle_bisector_definition_v0_r on B, A, B, line_intersection(f, i) we get Line(A, line_intersection(f, i)) == internal_angle_bisector(B, line_intersection(f, i), B)
By collinear_definition on line_intersection(f, i), B, D we get B in Line(D, line_intersection(f, i)), D in Line(B, line_intersection(f, i)), Line(B, line_intersection(f, i)) == Line(D, line_intersection(f, i)), 0 == 2 * angle(B, line_intersection(f, i), D) mod 360
By collinear_definition on D, A, line_intersection(f, i) we get A in Line(D, line_intersection(f, i)), line_intersection(f, i) in Line(A, D), Line(A, D) == Line(D, line_intersection(f, i)), 0 == 2 * angle(A, D, line_intersection(f, i)) mod 360
By internal_angle_bisector_definition_v0_r on line_intersection(f, i), A, line_intersection(f, i), B we get Line(A, B) == internal_angle_bisector(line_intersection(f, i), B, line_intersection(f, i))
By reverse_direction on F, line_intersection(f, i) we get 180 == direction(F, line_intersection(f, i)) - direction(line_intersection(f, i), F) mod 360
By internal_angle_bisector_definition_v0_r on line_intersection(f, i), B, line_intersection(f, i), A we get Line(A, B) == internal_angle_bisector(line_intersection(f, i), A, line_intersection(f, i))
By collinear_definition on D, B, line_intersection(f, i) we get B in Line(D, line_intersection(f, i)), line_intersection(f, i) in Line(B, D), Line(B, D) == Line(D, line_intersection(f, i)), 0 == 2 * angle(B, D, line_intersection(f, i)) mod 360
By collinear_definition on D, line_intersection(f, i), B we get line_intersection(f, i) in Line(B, D), B in Line(D, line_intersection(f, i)), Line(B, D) == Line(D, line_intersection(f, i)), 0 == 2 * angle(line_intersection(f, i), D, B) mod 360
By anti_similar_triangle_basic_properties on A, D, E, C, E, D we get angle(A, D, E) == 0 - angle(C, E, D) mod 360, angle(D, E, A) == 0 - angle(E, D, C) mod 360, angle(E, A, D) == 0 - angle(D, C, E) mod 360, log(distance(A, D)) + log(distance(D, E)) == log(distance(C, E)) + log(distance(D, E)), log(distance(D, E)) + log(distance(A, E)) == log(distance(D, E)) + log(distance(C, D)), log(distance(A, E)) + log(distance(C, E)) == log(distance(C, D)) + log(distance(A, D))
By anti_similar_triangle_basic_properties on E, C, D, D, A, E we get angle(E, C, D) == 0 - angle(D, A, E) mod 360, angle(C, D, E) == 0 - angle(A, E, D) mod 360, angle(D, E, C) == 0 - angle(E, D, A) mod 360, log(distance(A, D)) + log(distance(C, D)) == log(distance(C, E)) + log(distance(A, E)), log(distance(A, E)) + log(distance(D, E)) == log(distance(C, D)) + log(distance(D, E)), log(distance(D, E)) + log(distance(A, D)) == log(distance(D, E)) + log(distance(C, E))
By anti_similar_triangle_basic_properties on C, A, D, A, C, E we get angle(C, A, D) == 0 - angle(A, C, E) mod 360, angle(A, D, C) == 0 - angle(C, E, A) mod 360, angle(D, C, A) == 0 - angle(E, A, C) mod 360, log(distance(A, C)) + log(distance(A, D)) == log(distance(A, C)) + log(distance(C, E)), log(distance(A, D)) + log(distance(A, E)) == log(distance(C, E)) + log(distance(C, D)), log(distance(A, E)) + log(distance(A, C)) == log(distance(C, D)) + log(distance(A, C))
By power_of_a_point_definition on line_intersection(f, i), D, A, c we get log(power_of_a_point(line_intersection(f, i), c)) == log(distance(D, line_intersection(f, i))) + log(distance(A, line_intersection(f, i)))
By perpendicular_direction_conditions_v0 on D, F, F, line_intersection(f, i) we get perpendicular(Line(D, F), Line(F, line_intersection(f, i)))
By perpendicular_direction_conditions_v0 on D, E, F, line_intersection(f, i) we get perpendicular(Line(D, E), Line(F, line_intersection(f, i)))
By perpendicular_direction_conditions_v0 on F, line_intersection(f, i), A, C we get perpendicular(Line(A, C), Line(F, line_intersection(f, i)))
By perpendicular_direction_conditions_v0 on E, F, F, line_intersection(f, i) we get perpendicular(Line(E, F), Line(F, line_intersection(f, i)))
By sss_anti_congruence_v0 on F, A, C, F, C, A we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v0 on C, F, A, A, F, C we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v1 on C, A, F, A, C, F we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v1 on A, F, C, C, F, A we get anti_congruent_triangles(A, C, F, C, A, F)
By aa_anti_similarity on F, C, A, F, A, C we get anti_similar_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v1 on C, A, F, A, C, F we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v0 on F, A, C, F, C, A we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v0 on A, C, F, C, A, F we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v1 on A, F, C, C, F, A we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v1 on C, A, F, A, C, F we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v0 on F, A, C, F, C, A we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v0 on F, A, C, F, C, A we get anti_congruent_triangles(A, C, F, C, A, F)
By asa_anti_congruence on C, A, F, A, C, F we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v0 on C, F, A, A, F, C we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v1 on F, C, A, F, A, C we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v1 on C, A, F, A, C, F we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v0 on C, F, A, A, F, C we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v1 on F, C, A, F, A, C we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v0 on A, C, F, C, A, F we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v0 on A, C, F, C, A, F we get anti_congruent_triangles(A, C, F, C, A, F)
By sas_anti_congruence on A, C, F, C, A, F we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v0 on C, F, A, A, F, C we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v0 on F, A, C, F, C, A we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v0 on C, F, A, A, F, C we get anti_congruent_triangles(A, C, F, C, A, F)
By sas_anti_congruence on F, C, A, F, A, C we get anti_congruent_triangles(A, C, F, C, A, F)
By sas_anti_congruence on C, A, F, A, C, F we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v1 on F, C, A, F, A, C we get anti_congruent_triangles(A, C, F, C, A, F)
By reverse_direction on D, line_intersection(f, i) we get 180 == direction(D, line_intersection(f, i)) - direction(line_intersection(f, i), D) mod 360
By sss_anti_congruence_v1 on A, F, C, C, F, A we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v0 on C, F, A, A, F, C we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v0 on A, C, F, C, A, F we get anti_congruent_triangles(A, C, F, C, A, F)
By reverse_direction on line_intersection(f, i), D we get 180 == direction(line_intersection(f, i), D) - direction(D, line_intersection(f, i)) mod 360
By sss_anti_congruence_v1 on F, C, A, F, A, C we get anti_congruent_triangles(A, C, F, C, A, F)
By sas_anti_congruence on F, A, C, F, C, A we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v1 on A, F, C, C, F, A we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v0 on A, C, F, C, A, F we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v1 on A, F, C, C, F, A we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v1 on F, C, A, F, A, C we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v1 on F, C, A, F, A, C we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v1 on C, A, F, A, C, F we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v0 on A, C, F, C, A, F we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v0 on F, A, C, F, C, A we get anti_congruent_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v1 on A, F, C, C, F, A we get anti_congruent_triangles(A, C, F, C, A, F)
By asa_anti_congruence on A, C, F, C, A, F we get anti_congruent_triangles(A, C, F, C, A, F)
By aa_anti_similarity on F, A, C, F, C, A we get anti_similar_triangles(A, C, F, C, A, F)
By sss_anti_congruence_v1 on C, A, F, A, C, F we get anti_congruent_triangles(A, C, F, C, A, F)
By external_angle_bisector_definition_v0_r on C, D, A, F we get Line(D, F) == external_angle_bisector(A, F, C)
By internal_angle_bisector_definition_v0_r on D, B, D, line_intersection(f, i) we get Line(B, line_intersection(f, i)) == internal_angle_bisector(D, line_intersection(f, i), D)
By external_angle_bisector_definition_v0_r on A, line_intersection(f, i), B, D we get external_angle_bisector(A, D, B) == Line(D, line_intersection(f, i))
By internal_angle_bisector_definition_v0_r on D, line_intersection(f, i), B, A we get internal_angle_bisector(B, A, D) == Line(A, line_intersection(f, i))
By external_angle_bisector_definition_v0_r on C, E, A, F we get Line(E, F) == external_angle_bisector(A, F, C)
By internal_angle_bisector_definition_v0_r on D, line_intersection(f, i), A, B we get internal_angle_bisector(A, B, D) == Line(B, line_intersection(f, i))
By internal_angle_bisector_definition_v0_r on D, A, D, line_intersection(f, i) we get Line(A, line_intersection(f, i)) == internal_angle_bisector(D, line_intersection(f, i), D)
By internal_angle_bisector_definition_v0_r on line_intersection(f, i), B, line_intersection(f, i), D we get Line(B, D) == internal_angle_bisector(line_intersection(f, i), D, line_intersection(f, i))
By internal_angle_bisector_definition_v0_r on line_intersection(f, i), A, line_intersection(f, i), D we get Line(A, D) == internal_angle_bisector(line_intersection(f, i), D, line_intersection(f, i))
By anti_similar_triangle_basic_properties on D, C, F, E, A, F we get angle(D, C, F) == 0 - angle(E, A, F) mod 360, angle(C, F, D) == 0 - angle(A, F, E) mod 360, angle(F, D, C) == 0 - angle(F, E, A) mod 360, log(distance(A, E)) + log(distance(C, F)) == log(distance(C, D)) + log(distance(A, F)), log(distance(A, F)) + log(distance(D, F)) == log(distance(C, F)) + log(distance(E, F)), log(distance(D, F)) + log(distance(A, E)) == log(distance(E, F)) + log(distance(C, D))
By anti_similar_triangle_basic_properties on F, A, E, F, C, D we get angle(F, A, E) == 0 - angle(F, C, D) mod 360, angle(A, E, F) == 0 - angle(C, D, F) mod 360, angle(E, F, A) == 0 - angle(D, F, C) mod 360, log(distance(A, F)) + log(distance(C, D)) == log(distance(C, F)) + log(distance(A, E)), log(distance(A, E)) + log(distance(D, F)) == log(distance(C, D)) + log(distance(E, F)), log(distance(D, F)) + log(distance(A, F)) == log(distance(E, F)) + log(distance(C, F))
By anti_similar_triangle_basic_properties on A, D, F, C, E, F we get angle(A, D, F) == 0 - angle(C, E, F) mod 360, angle(D, F, A) == 0 - angle(E, F, C) mod 360, angle(F, A, D) == 0 - angle(F, C, E) mod 360, log(distance(A, D)) + log(distance(E, F)) == log(distance(C, E)) + log(distance(D, F)), log(distance(D, F)) + log(distance(C, F)) == log(distance(E, F)) + log(distance(A, F)), log(distance(A, F)) + log(distance(C, E)) == log(distance(C, F)) + log(distance(A, D))
By anti_similar_triangle_basic_properties on F, D, A, F, E, C we get angle(F, D, A) == 0 - angle(F, E, C) mod 360, angle(D, A, F) == 0 - angle(E, C, F) mod 360, angle(A, F, D) == 0 - angle(C, F, E) mod 360, log(distance(D, F)) + log(distance(C, E)) == log(distance(E, F)) + log(distance(A, D)), log(distance(A, D)) + log(distance(C, F)) == log(distance(C, E)) + log(distance(A, F)), log(distance(A, F)) + log(distance(E, F)) == log(distance(C, F)) + log(distance(D, F))
By isosceles_triangle_altitude_v2 on F, A, C we get identical(perpendicular_bisector(A, C), internal_angle_bisector(A, F, C), perpendicular_line(F, Line(A, C)))
By isosceles_triangle_altitude_v2 on F, C, A we get identical(perpendicular_bisector(A, C), internal_angle_bisector(A, F, C), perpendicular_line(F, Line(A, C)))
By line_definition on line_intersection(f, i), midpoint(A, C), i we get i == Line(midpoint(A, C), line_intersection(f, i))
By line_definition on F, midpoint(A, C), i we get i == Line(F, midpoint(A, C))
By median_definition on F, C, A, i we get i == median(F, A, C)
By perpendicular_line_definition on line_intersection(f, i), i, g we get i == perpendicular_line(line_intersection(f, i), g)
By perpendicular_line_definition on midpoint(A, C), i, h we get i == perpendicular_line(midpoint(A, C), h)
By median_definition on line_intersection(f, i), A, C, i we get i == median(line_intersection(f, i), A, C)
By perpendicular_line_definition on A, g, i we get g == perpendicular_line(A, i)
By median_definition on midpoint(A, C), D, E, i we get i == median(midpoint(A, C), D, E)
By perpendicular_line_definition on F, i, h we get i == perpendicular_line(F, h)
By perpendicular_line_definition on line_intersection(f, i), i, h we get i == perpendicular_line(line_intersection(f, i), h)
By perpendicular_line_definition on D, h, i we get h == perpendicular_line(D, i)
By perpendicular_line_definition on C, g, i we get g == perpendicular_line(C, i)
By perpendicular_line_definition on E, h, i we get h == perpendicular_line(E, i)
By perpendicular_line_definition on F, h, i we get h == perpendicular_line(F, i)
By between_imply_not_between on A, midpoint(A, C), C we get collinear_and_not_between(C, A, midpoint(A, C))
By between_imply_not_between on C, midpoint(A, C), A we get collinear_and_not_between(A, C, midpoint(A, C))
By projection_definition on line_intersection(f, i), F, h we get F == projection(line_intersection(f, i), h)
By projection_definition on D, F, i we get F == projection(D, i)
By projection_definition on E, F, i we get F == projection(E, i)
By in_imply_collinear on midpoint(A, C), line_intersection(f, i), F we get collinear(F, midpoint(A, C), line_intersection(f, i))
By point_on_perpendicular_bisector on A, C, line_intersection(f, i), i we get distance(A, line_intersection(f, i)) == distance(C, line_intersection(f, i))
By perpendicular_angle_conditions_v0 on line_intersection(f, i), F, D we get angle(line_intersection(f, i), F, D) == orientation(D, line_intersection(f, i), F) mod 360
By perpendicular_angle_conditions_v0 on D, F, line_intersection(f, i) we get angle(D, F, line_intersection(f, i)) == orientation(D, F, line_intersection(f, i)) mod 360
By perpendicular_angle_conditions_v0 on E, F, line_intersection(f, i) we get angle(E, F, line_intersection(f, i)) == orientation(E, F, line_intersection(f, i)) mod 360
By perpendicular_angle_conditions_v0 on line_intersection(f, i), F, E we get angle(line_intersection(f, i), F, E) == orientation(E, line_intersection(f, i), F) mod 360
By collinear_definition on C, midpoint(A, C), A we get midpoint(A, C) in Line(A, C), A in Line(C, midpoint(A, C)), Line(A, C) == Line(C, midpoint(A, C)), 0 == 2 * angle(midpoint(A, C), C, A) mod 360
By log_of_2_times_distance on C, A, midpoint(A, C), A we get log(distance(A, C)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(A, midpoint(A, C)))
By altitude_definition on F, A, C, i we get i == altitude(F, A, C)
By perpendicular_bisector_properties on A, C we get perpendicular(Line(A, C), perpendicular_bisector(A, C)), midpoint(A, C) == line_intersection(Line(A, C), perpendicular_bisector(A, C))
By log_of_2_times_distance on A, C, midpoint(A, C), C we get log(distance(A, C)) == 0.69314718055994530941723212145817656807550013436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270694 + log(distance(C, midpoint(A, C)))
By collinear_definition on A, midpoint(A, C), C we get midpoint(A, C) in Line(A, C), C in Line(A, midpoint(A, C)), Line(A, C) == Line(A, midpoint(A, C)), 0 == 2 * angle(midpoint(A, C), A, C) mod 360
By isosceles_triangle_midpoint on F, C, A we get midpoint(A, C) in median(F, A, C)
By collinear_definition on A, C, midpoint(A, C) we get C in Line(A, midpoint(A, C)), midpoint(A, C) in Line(A, C), Line(A, C) == Line(A, midpoint(A, C)), 0 == 2 * angle(C, A, midpoint(A, C)) mod 360
By collinear_definition on C, A, midpoint(A, C) we get A in Line(C, midpoint(A, C)), midpoint(A, C) in Line(A, C), Line(A, C) == Line(C, midpoint(A, C)), 0 == 2 * angle(A, C, midpoint(A, C)) mod 360
By perpendicular_lines_draw_intersection on g, i we get exists(line_intersection(g, i))
By altitude_definition on midpoint(A, C), D, E, i we get i == altitude(midpoint(A, C), D, E)
By altitude_definition on C, line_intersection(f, i), F, g we get g == altitude(C, F, line_intersection(f, i))
By altitude_definition on E, line_intersection(f, i), F, h we get h == altitude(E, F, line_intersection(f, i))
By isosceles_trapezoid_perpendicular_bisector on C, A, E, D we get perpendicular_bisector(A, C) == perpendicular_bisector(D, E)
By altitude_definition on midpoint(A, C), E, F, i we get i == altitude(midpoint(A, C), E, F)
By altitude_definition on A, F, line_intersection(f, i), g we get g == altitude(A, F, line_intersection(f, i))
By altitude_definition on midpoint(A, C), D, F, i we get i == altitude(midpoint(A, C), D, F)
By altitude_definition on line_intersection(f, i), E, F, i we get i == altitude(line_intersection(f, i), E, F)
By altitude_definition on line_intersection(f, i), C, A, i we get i == altitude(line_intersection(f, i), A, C)
By altitude_definition on line_intersection(f, i), E, D, i we get i == altitude(line_intersection(f, i), D, E)
By perpendicular_bisector_definition on D, E, i we get i == perpendicular_bisector(D, E)
By altitude_definition on line_intersection(f, i), F, D, i we get i == altitude(line_intersection(f, i), D, F)
By collinear_definition on midpoint(A, C), A, C we get A in Line(C, midpoint(A, C)), C in Line(A, midpoint(A, C)), Line(A, midpoint(A, C)) == Line(C, midpoint(A, C)), 0 == 2 * angle(A, midpoint(A, C), C) mod 360
By altitude_definition on D, F, line_intersection(f, i), h we get h == altitude(D, F, line_intersection(f, i))
By collinear_definition on midpoint(A, C), C, A we get C in Line(A, midpoint(A, C)), A in Line(C, midpoint(A, C)), Line(A, midpoint(A, C)) == Line(C, midpoint(A, C)), 0 == 2 * angle(C, midpoint(A, C), A) mod 360
By between_implies_angles on C, midpoint(A, C), A we get 180 == angle(C, midpoint(A, C), A) mod 360, 0 == angle(midpoint(A, C), A, C) mod 360, 0 == angle(A, C, midpoint(A, C)) mod 360
By between_implies_angles on A, midpoint(A, C), C we get 180 == angle(A, midpoint(A, C), C) mod 360, 0 == angle(midpoint(A, C), C, A) mod 360, 0 == angle(C, A, midpoint(A, C)) mod 360
By power_of_a_point_definition on midpoint(A, C), C, A, c we get log(power_of_a_point(midpoint(A, C), c)) == log(distance(C, midpoint(A, C))) + log(distance(A, midpoint(A, C)))
By perpendicular_line_definition on midpoint(A, C), g, i we get g == perpendicular_line(midpoint(A, C), i)
By projection_definition on line_intersection(f, i), midpoint(A, C), g we get midpoint(A, C) == projection(line_intersection(f, i), g)
By perpendicular_direction_conditions_v0_r on line_intersection(f, i), F, midpoint(A, C), A we get 180 == 2 * direction(line_intersection(f, i), F) - 2 * direction(midpoint(A, C), A) mod 360
By projection_definition on F, midpoint(A, C), g we get midpoint(A, C) == projection(F, g)
By projection_definition on A, midpoint(A, C), i we get midpoint(A, C) == projection(A, i)
By perpendicular_direction_conditions_v0_r on F, line_intersection(f, i), midpoint(A, C), C we get 180 == 2 * direction(F, line_intersection(f, i)) - 2 * direction(midpoint(A, C), C) mod 360
By perpendicular_direction_conditions_v0_r on F, line_intersection(f, i), midpoint(A, C), A we get 180 == 2 * direction(F, line_intersection(f, i)) - 2 * direction(midpoint(A, C), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, C), A, F, line_intersection(f, i) we get 180 == 2 * direction(midpoint(A, C), A) - 2 * direction(F, line_intersection(f, i)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, C), C, line_intersection(f, i), F we get 180 == 2 * direction(midpoint(A, C), C) - 2 * direction(line_intersection(f, i), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, C), A, line_intersection(f, i), F we get 180 == 2 * direction(midpoint(A, C), A) - 2 * direction(line_intersection(f, i), F) mod 360
By projection_definition on midpoint(A, C), F, h we get F == projection(midpoint(A, C), h)
By perpendicular_direction_conditions_v0_r on line_intersection(f, i), F, midpoint(A, C), C we get 180 == 2 * direction(line_intersection(f, i), F) - 2 * direction(midpoint(A, C), C) mod 360
By projection_definition on C, midpoint(A, C), i we get midpoint(A, C) == projection(C, i)
By perpendicular_direction_conditions_v0_r on midpoint(A, C), C, F, line_intersection(f, i) we get 180 == 2 * direction(midpoint(A, C), C) - 2 * direction(F, line_intersection(f, i)) mod 360
By parallel_line_definition on midpoint(A, C), g, h we get g == parallel_line(midpoint(A, C), h)
By perpendicular_direction_conditions_v0_r on A, midpoint(A, C), midpoint(A, C), line_intersection(f, i) we get 180 == 2 * direction(A, midpoint(A, C)) - 2 * direction(midpoint(A, C), line_intersection(f, i)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, C), F, A, midpoint(A, C) we get 180 == 2 * direction(midpoint(A, C), F) - 2 * direction(A, midpoint(A, C)) mod 360
By perpendicular_direction_conditions_v0_r on E, F, F, midpoint(A, C) we get 180 == 2 * direction(E, F) - 2 * direction(F, midpoint(A, C)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, C), line_intersection(f, i), F, D we get 180 == 2 * direction(midpoint(A, C), line_intersection(f, i)) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on F, D, F, midpoint(A, C) we get 180 == 2 * direction(F, D) - 2 * direction(F, midpoint(A, C)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, i), midpoint(A, C), E, F we get 180 == 2 * direction(line_intersection(f, i), midpoint(A, C)) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on E, D, midpoint(A, C), line_intersection(f, i) we get 180 == 2 * direction(E, D) - 2 * direction(midpoint(A, C), line_intersection(f, i)) mod 360
By perpendicular_direction_conditions_v0_r on F, D, midpoint(A, C), line_intersection(f, i) we get 180 == 2 * direction(F, D) - 2 * direction(midpoint(A, C), line_intersection(f, i)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, C), F, midpoint(A, C), A we get 180 == 2 * direction(midpoint(A, C), F) - 2 * direction(midpoint(A, C), A) mod 360
By perpendicular_direction_conditions_v0_r on F, D, line_intersection(f, i), midpoint(A, C) we get 180 == 2 * direction(F, D) - 2 * direction(line_intersection(f, i), midpoint(A, C)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, C), F, D, E we get 180 == 2 * direction(midpoint(A, C), F) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on F, E, F, midpoint(A, C) we get 180 == 2 * direction(F, E) - 2 * direction(F, midpoint(A, C)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, C), line_intersection(f, i), E, F we get 180 == 2 * direction(midpoint(A, C), line_intersection(f, i)) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, C), A, midpoint(A, C) we get 180 == 2 * direction(F, midpoint(A, C)) - 2 * direction(A, midpoint(A, C)) mod 360
By perpendicular_direction_conditions_v0_r on D, F, line_intersection(f, i), midpoint(A, C) we get 180 == 2 * direction(D, F) - 2 * direction(line_intersection(f, i), midpoint(A, C)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, C), line_intersection(f, i), C, midpoint(A, C) we get 180 == 2 * direction(midpoint(A, C), line_intersection(f, i)) - 2 * direction(C, midpoint(A, C)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, C), line_intersection(f, i), E, D we get 180 == 2 * direction(midpoint(A, C), line_intersection(f, i)) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on F, E, midpoint(A, C), F we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(A, C), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, C), A, line_intersection(f, i), midpoint(A, C) we get 180 == 2 * direction(midpoint(A, C), A) - 2 * direction(line_intersection(f, i), midpoint(A, C)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, C), line_intersection(f, i), A, midpoint(A, C) we get 180 == 2 * direction(midpoint(A, C), line_intersection(f, i)) - 2 * direction(A, midpoint(A, C)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, C), F, E we get 180 == 2 * direction(F, midpoint(A, C)) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, C), E, F we get 180 == 2 * direction(F, midpoint(A, C)) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, C), midpoint(A, C), F we get 180 == 2 * direction(A, midpoint(A, C)) - 2 * direction(midpoint(A, C), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, C), F, C, midpoint(A, C) we get 180 == 2 * direction(midpoint(A, C), F) - 2 * direction(C, midpoint(A, C)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, i), midpoint(A, C), D, E we get 180 == 2 * direction(line_intersection(f, i), midpoint(A, C)) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, C), E, D we get 180 == 2 * direction(F, midpoint(A, C)) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, C), line_intersection(f, i), D, F we get 180 == 2 * direction(midpoint(A, C), line_intersection(f, i)) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, C), F, C, A we get 180 == 2 * direction(midpoint(A, C), F) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, C), midpoint(A, C), A we get 180 == 2 * direction(F, midpoint(A, C)) - 2 * direction(midpoint(A, C), A) mod 360
By perpendicular_direction_conditions_v0_r on A, C, midpoint(A, C), line_intersection(f, i) we get 180 == 2 * direction(A, C) - 2 * direction(midpoint(A, C), line_intersection(f, i)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, C), C, midpoint(A, C) we get 180 == 2 * direction(F, midpoint(A, C)) - 2 * direction(C, midpoint(A, C)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, C), line_intersection(f, i), F, E we get 180 == 2 * direction(midpoint(A, C), line_intersection(f, i)) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, i), midpoint(A, C), C, midpoint(A, C) we get 180 == 2 * direction(line_intersection(f, i), midpoint(A, C)) - 2 * direction(C, midpoint(A, C)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, C), C, F, midpoint(A, C) we get 180 == 2 * direction(midpoint(A, C), C) - 2 * direction(F, midpoint(A, C)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, C), F, midpoint(A, C), C we get 180 == 2 * direction(midpoint(A, C), F) - 2 * direction(midpoint(A, C), C) mod 360
By perpendicular_direction_conditions_v0_r on D, E, midpoint(A, C), line_intersection(f, i) we get 180 == 2 * direction(D, E) - 2 * direction(midpoint(A, C), line_intersection(f, i)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, C), F, F, D we get 180 == 2 * direction(midpoint(A, C), F) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, C), C, line_intersection(f, i), midpoint(A, C) we get 180 == 2 * direction(midpoint(A, C), C) - 2 * direction(line_intersection(f, i), midpoint(A, C)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, C), line_intersection(f, i), midpoint(A, C) we get 180 == 2 * direction(C, midpoint(A, C)) - 2 * direction(line_intersection(f, i), midpoint(A, C)) mod 360
By perpendicular_direction_conditions_v0_r on D, E, midpoint(A, C), F we get 180 == 2 * direction(D, E) - 2 * direction(midpoint(A, C), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, i), midpoint(A, C), F, E we get 180 == 2 * direction(line_intersection(f, i), midpoint(A, C)) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, C), F, D, F we get 180 == 2 * direction(midpoint(A, C), F) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on E, F, line_intersection(f, i), midpoint(A, C) we get 180 == 2 * direction(E, F) - 2 * direction(line_intersection(f, i), midpoint(A, C)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, C), A, midpoint(A, C), F we get 180 == 2 * direction(midpoint(A, C), A) - 2 * direction(midpoint(A, C), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, C), C, midpoint(A, C), F we get 180 == 2 * direction(midpoint(A, C), C) - 2 * direction(midpoint(A, C), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, C), line_intersection(f, i), D, E we get 180 == 2 * direction(midpoint(A, C), line_intersection(f, i)) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, C), line_intersection(f, i), midpoint(A, C), A we get 180 == 2 * direction(midpoint(A, C), line_intersection(f, i)) - 2 * direction(midpoint(A, C), A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, C), line_intersection(f, i), midpoint(A, C), C we get 180 == 2 * direction(midpoint(A, C), line_intersection(f, i)) - 2 * direction(midpoint(A, C), C) mod 360
By perpendicular_direction_conditions_v0_r on A, C, midpoint(A, C), F we get 180 == 2 * direction(A, C) - 2 * direction(midpoint(A, C), F) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, C), D, F we get 180 == 2 * direction(F, midpoint(A, C)) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, i), midpoint(A, C), A, C we get 180 == 2 * direction(line_intersection(f, i), midpoint(A, C)) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, i), midpoint(A, C), E, D we get 180 == 2 * direction(line_intersection(f, i), midpoint(A, C)) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on E, D, line_intersection(f, i), midpoint(A, C) we get 180 == 2 * direction(E, D) - 2 * direction(line_intersection(f, i), midpoint(A, C)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, C), line_intersection(f, i), A, C we get 180 == 2 * direction(midpoint(A, C), line_intersection(f, i)) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, i), midpoint(A, C), D, F we get 180 == 2 * direction(line_intersection(f, i), midpoint(A, C)) - 2 * direction(D, F) mod 360
By perpendicular_direction_conditions_v0_r on D, F, F, midpoint(A, C) we get 180 == 2 * direction(D, F) - 2 * direction(F, midpoint(A, C)) mod 360
By perpendicular_direction_conditions_v0_r on C, A, midpoint(A, C), F we get 180 == 2 * direction(C, A) - 2 * direction(midpoint(A, C), F) mod 360
By perpendicular_direction_conditions_v0_r on E, F, midpoint(A, C), line_intersection(f, i) we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(A, C), line_intersection(f, i)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, i), midpoint(A, C), midpoint(A, C), C we get 180 == 2 * direction(line_intersection(f, i), midpoint(A, C)) - 2 * direction(midpoint(A, C), C) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, C), D, E we get 180 == 2 * direction(F, midpoint(A, C)) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, C), C, midpoint(A, C), line_intersection(f, i) we get 180 == 2 * direction(midpoint(A, C), C) - 2 * direction(midpoint(A, C), line_intersection(f, i)) mod 360
By perpendicular_direction_conditions_v0_r on C, A, midpoint(A, C), line_intersection(f, i) we get 180 == 2 * direction(C, A) - 2 * direction(midpoint(A, C), line_intersection(f, i)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, i), midpoint(A, C), midpoint(A, C), A we get 180 == 2 * direction(line_intersection(f, i), midpoint(A, C)) - 2 * direction(midpoint(A, C), A) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, C), midpoint(A, C), F we get 180 == 2 * direction(C, midpoint(A, C)) - 2 * direction(midpoint(A, C), F) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, i), midpoint(A, C), F, D we get 180 == 2 * direction(line_intersection(f, i), midpoint(A, C)) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on D, F, midpoint(A, C), F we get 180 == 2 * direction(D, F) - 2 * direction(midpoint(A, C), F) mod 360
By perpendicular_direction_conditions_v0_r on F, E, midpoint(A, C), line_intersection(f, i) we get 180 == 2 * direction(F, E) - 2 * direction(midpoint(A, C), line_intersection(f, i)) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, C), F, midpoint(A, C) we get 180 == 2 * direction(C, midpoint(A, C)) - 2 * direction(F, midpoint(A, C)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, C), F, E, D we get 180 == 2 * direction(midpoint(A, C), F) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on C, midpoint(A, C), midpoint(A, C), line_intersection(f, i) we get 180 == 2 * direction(C, midpoint(A, C)) - 2 * direction(midpoint(A, C), line_intersection(f, i)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, i), midpoint(A, C), C, A we get 180 == 2 * direction(line_intersection(f, i), midpoint(A, C)) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, C), line_intersection(f, i), midpoint(A, C) we get 180 == 2 * direction(A, midpoint(A, C)) - 2 * direction(line_intersection(f, i), midpoint(A, C)) mod 360
By perpendicular_direction_conditions_v0_r on D, E, line_intersection(f, i), midpoint(A, C) we get 180 == 2 * direction(D, E) - 2 * direction(line_intersection(f, i), midpoint(A, C)) mod 360
By perpendicular_direction_conditions_v0_r on C, A, line_intersection(f, i), midpoint(A, C) we get 180 == 2 * direction(C, A) - 2 * direction(line_intersection(f, i), midpoint(A, C)) mod 360
By perpendicular_direction_conditions_v0_r on A, midpoint(A, C), F, midpoint(A, C) we get 180 == 2 * direction(A, midpoint(A, C)) - 2 * direction(F, midpoint(A, C)) mod 360
By perpendicular_direction_conditions_v0_r on D, F, midpoint(A, C), line_intersection(f, i) we get 180 == 2 * direction(D, F) - 2 * direction(midpoint(A, C), line_intersection(f, i)) mod 360
By perpendicular_direction_conditions_v0_r on line_intersection(f, i), midpoint(A, C), A, midpoint(A, C) we get 180 == 2 * direction(line_intersection(f, i), midpoint(A, C)) - 2 * direction(A, midpoint(A, C)) mod 360
By perpendicular_direction_conditions_v0_r on C, A, F, midpoint(A, C) we get 180 == 2 * direction(C, A) - 2 * direction(F, midpoint(A, C)) mod 360
By perpendicular_direction_conditions_v0_r on E, F, midpoint(A, C), F we get 180 == 2 * direction(E, F) - 2 * direction(midpoint(A, C), F) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, C), F, A, C we get 180 == 2 * direction(midpoint(A, C), F) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on E, D, F, midpoint(A, C) we get 180 == 2 * direction(E, D) - 2 * direction(F, midpoint(A, C)) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, C), F, E, F we get 180 == 2 * direction(midpoint(A, C), F) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, C), A, C we get 180 == 2 * direction(F, midpoint(A, C)) - 2 * direction(A, C) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, C), F, F, E we get 180 == 2 * direction(midpoint(A, C), F) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, C), line_intersection(f, i), C, A we get 180 == 2 * direction(midpoint(A, C), line_intersection(f, i)) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, C), A, midpoint(A, C), line_intersection(f, i) we get 180 == 2 * direction(midpoint(A, C), A) - 2 * direction(midpoint(A, C), line_intersection(f, i)) mod 360
By perpendicular_direction_conditions_v0_r on F, E, line_intersection(f, i), midpoint(A, C) we get 180 == 2 * direction(F, E) - 2 * direction(line_intersection(f, i), midpoint(A, C)) mod 360
By perpendicular_direction_conditions_v0_r on A, C, F, midpoint(A, C) we get 180 == 2 * direction(A, C) - 2 * direction(F, midpoint(A, C)) mod 360
By perpendicular_direction_conditions_v0_r on A, C, line_intersection(f, i), midpoint(A, C) we get 180 == 2 * direction(A, C) - 2 * direction(line_intersection(f, i), midpoint(A, C)) mod 360
By perpendicular_direction_conditions_v0_r on E, D, midpoint(A, C), F we get 180 == 2 * direction(E, D) - 2 * direction(midpoint(A, C), F) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, C), midpoint(A, C), C we get 180 == 2 * direction(F, midpoint(A, C)) - 2 * direction(midpoint(A, C), C) mod 360
By perpendicular_direction_conditions_v0_r on F, D, midpoint(A, C), F we get 180 == 2 * direction(F, D) - 2 * direction(midpoint(A, C), F) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, C), C, A we get 180 == 2 * direction(F, midpoint(A, C)) - 2 * direction(C, A) mod 360
By perpendicular_direction_conditions_v0_r on D, E, F, midpoint(A, C) we get 180 == 2 * direction(D, E) - 2 * direction(F, midpoint(A, C)) mod 360
By perpendicular_direction_conditions_v0_r on F, midpoint(A, C), F, D we get 180 == 2 * direction(F, midpoint(A, C)) - 2 * direction(F, D) mod 360
By perpendicular_direction_conditions_v0_r on midpoint(A, C), A, F, midpoint(A, C) we get 180 == 2 * direction(midpoint(A, C), A) - 2 * direction(F, midpoint(A, C)) mod 360
By reverse_direction on A, midpoint(A, C) we get 180 == direction(A, midpoint(A, C)) - direction(midpoint(A, C), A) mod 360
By reverse_direction on midpoint(A, C), C we get 180 == direction(midpoint(A, C), C) - direction(C, midpoint(A, C)) mod 360
By reverse_direction on midpoint(A, C), A we get 180 == direction(midpoint(A, C), A) - direction(A, midpoint(A, C)) mod 360
By point_on_perpendicular_bisector on E, D, line_intersection(f, i), i we get distance(D, line_intersection(f, i)) == distance(E, line_intersection(f, i))
By reverse_direction on C, midpoint(A, C) we get 180 == direction(C, midpoint(A, C)) - direction(midpoint(A, C), C) mod 360
By point_on_perpendicular_bisector on E, D, midpoint(A, C), i we get distance(D, midpoint(A, C)) == distance(E, midpoint(A, C))
By perpendicular_angle_conditions_v0 on E, F, midpoint(A, C) we get angle(E, F, midpoint(A, C)) == orientation(E, F, midpoint(A, C)) mod 360
By external_angle_bisector_definition_v0_r on line_intersection(f, i), E, line_intersection(f, i), F we get Line(E, F) == external_angle_bisector(line_intersection(f, i), F, line_intersection(f, i))
By external_angle_bisector_definition_v0_r on line_intersection(f, i), D, line_intersection(f, i), F we get Line(D, F) == external_angle_bisector(line_intersection(f, i), F, line_intersection(f, i))
By internal_angle_bisector_definition_v0_r on C, A, C, midpoint(A, C) we get Line(A, midpoint(A, C)) == internal_angle_bisector(C, midpoint(A, C), C)
By internal_angle_bisector_definition_v0 on C, midpoint(A, C), A, F we get angle(C, F, midpoint(A, C)) == angle(midpoint(A, C), F, A) mod 360
By external_angle_bisector_definition_v0_r on E, line_intersection(f, i), E, F we get external_angle_bisector(E, F, E) == Line(F, line_intersection(f, i))
By internal_angle_bisector_definition_v0 on A, midpoint(A, C), C, F we get angle(A, F, midpoint(A, C)) == angle(midpoint(A, C), F, C) mod 360
By perpendicular_angle_conditions_v0 on F, midpoint(A, C), A we get angle(F, midpoint(A, C), A) == orientation(A, F, midpoint(A, C)) mod 360
By external_angle_bisector_definition_v0_r on D, line_intersection(f, i), D, F we get external_angle_bisector(D, F, D) == Line(F, line_intersection(f, i))
By internal_angle_bisector_definition_v0_r on A, C, A, midpoint(A, C) we get Line(C, midpoint(A, C)) == internal_angle_bisector(A, midpoint(A, C), A)
By perpendicular_angle_conditions_v0 on C, midpoint(A, C), F we get angle(C, midpoint(A, C), F) == orientation(C, midpoint(A, C), F) mod 360
By perpendicular_angle_conditions_v0 on D, F, midpoint(A, C) we get angle(D, F, midpoint(A, C)) == orientation(D, F, midpoint(A, C)) mod 360
By internal_angle_bisector_definition_v0_r on E, line_intersection(f, i), D, F we get internal_angle_bisector(D, F, E) == Line(F, line_intersection(f, i))
By internal_angle_bisector_definition_v0_r on A, midpoint(A, C), A, C we get internal_angle_bisector(A, C, A) == Line(C, midpoint(A, C))
By perpendicular_angle_conditions_v0 on A, midpoint(A, C), F we get angle(A, midpoint(A, C), F) == orientation(A, midpoint(A, C), F) mod 360
By internal_angle_bisector_definition_v0_r on C, midpoint(A, C), C, A we get internal_angle_bisector(C, A, C) == Line(A, midpoint(A, C))
By perpendicular_angle_conditions_v0 on F, midpoint(A, C), C we get angle(F, midpoint(A, C), C) == orientation(C, F, midpoint(A, C)) mod 360
By perpendicular_angle_conditions_v0 on C, midpoint(A, C), line_intersection(f, i) we get angle(C, midpoint(A, C), line_intersection(f, i)) == orientation(C, midpoint(A, C), line_intersection(f, i)) mod 360
By collinear_definition on line_intersection(f, i), midpoint(A, C), F we get midpoint(A, C) in Line(F, line_intersection(f, i)), F in Line(midpoint(A, C), line_intersection(f, i)), Line(F, line_intersection(f, i)) == Line(midpoint(A, C), line_intersection(f, i)), 0 == 2 * angle(midpoint(A, C), line_intersection(f, i), F) mod 360
By collinear_definition on F, midpoint(A, C), line_intersection(f, i) we get midpoint(A, C) in Line(F, line_intersection(f, i)), line_intersection(f, i) in Line(F, midpoint(A, C)), Line(F, midpoint(A, C)) == Line(F, line_intersection(f, i)), 0 == 2 * angle(midpoint(A, C), F, line_intersection(f, i)) mod 360
By perpendicular_angle_conditions_v0 on A, midpoint(A, C), line_intersection(f, i) we get angle(A, midpoint(A, C), line_intersection(f, i)) == orientation(A, midpoint(A, C), line_intersection(f, i)) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(A, C), A, midpoint(A, C), C we get Line(A, C) == internal_angle_bisector(midpoint(A, C), C, midpoint(A, C))
By perpendicular_angle_conditions_v0 on midpoint(A, C), F, D we get angle(midpoint(A, C), F, D) == orientation(D, midpoint(A, C), F) mod 360
By perpendicular_angle_conditions_v0 on line_intersection(f, i), midpoint(A, C), A we get angle(line_intersection(f, i), midpoint(A, C), A) == orientation(A, line_intersection(f, i), midpoint(A, C)) mod 360
By collinear_definition on F, line_intersection(f, i), midpoint(A, C) we get line_intersection(f, i) in Line(F, midpoint(A, C)), midpoint(A, C) in Line(F, line_intersection(f, i)), Line(F, midpoint(A, C)) == Line(F, line_intersection(f, i)), 0 == 2 * angle(line_intersection(f, i), F, midpoint(A, C)) mod 360
By perpendicular_angle_conditions_v0 on line_intersection(f, i), midpoint(A, C), C we get angle(line_intersection(f, i), midpoint(A, C), C) == orientation(C, line_intersection(f, i), midpoint(A, C)) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(A, C), C, midpoint(A, C), A we get Line(A, C) == internal_angle_bisector(midpoint(A, C), A, midpoint(A, C))
By collinear_definition on line_intersection(f, i), F, midpoint(A, C) we get F in Line(midpoint(A, C), line_intersection(f, i)), midpoint(A, C) in Line(F, line_intersection(f, i)), Line(F, line_intersection(f, i)) == Line(midpoint(A, C), line_intersection(f, i)), 0 == 2 * angle(F, line_intersection(f, i), midpoint(A, C)) mod 360
By perpendicular_angle_conditions_v0 on midpoint(A, C), F, E we get angle(midpoint(A, C), F, E) == orientation(E, midpoint(A, C), F) mod 360
By altitude_definition on C, midpoint(A, C), F, g we get g == altitude(C, F, midpoint(A, C))
By altitude_definition on C, line_intersection(f, i), midpoint(A, C), g we get g == altitude(C, midpoint(A, C), line_intersection(f, i))
By altitude_definition on E, F, midpoint(A, C), h we get h == altitude(E, F, midpoint(A, C))
By altitude_definition on line_intersection(f, i), A, midpoint(A, C), i we get i == altitude(line_intersection(f, i), A, midpoint(A, C))
By collinear_definition on midpoint(A, C), line_intersection(f, i), F we get line_intersection(f, i) in Line(F, midpoint(A, C)), F in Line(midpoint(A, C), line_intersection(f, i)), Line(F, midpoint(A, C)) == Line(midpoint(A, C), line_intersection(f, i)), 0 == 2 * angle(line_intersection(f, i), midpoint(A, C), F) mod 360
By altitude_definition on F, midpoint(A, C), A, i we get i == altitude(F, A, midpoint(A, C))
By altitude_definition on D, line_intersection(f, i), midpoint(A, C), h we get h == altitude(D, midpoint(A, C), line_intersection(f, i))
By altitude_definition on D, midpoint(A, C), F, h we get h == altitude(D, F, midpoint(A, C))
By altitude_definition on A, line_intersection(f, i), midpoint(A, C), g we get g == altitude(A, midpoint(A, C), line_intersection(f, i))
By altitude_definition on line_intersection(f, i), C, midpoint(A, C), i we get i == altitude(line_intersection(f, i), C, midpoint(A, C))
By altitude_definition on F, C, midpoint(A, C), i we get i == altitude(F, C, midpoint(A, C))
By altitude_definition on A, F, midpoint(A, C), g we get g == altitude(A, F, midpoint(A, C))
By altitude_definition on E, midpoint(A, C), line_intersection(f, i), h we get h == altitude(E, midpoint(A, C), line_intersection(f, i))
By collinear_definition on midpoint(A, C), F, line_intersection(f, i) we get F in Line(midpoint(A, C), line_intersection(f, i)), line_intersection(f, i) in Line(F, midpoint(A, C)), Line(F, midpoint(A, C)) == Line(midpoint(A, C), line_intersection(f, i)), 0 == 2 * angle(F, midpoint(A, C), line_intersection(f, i)) mod 360
By reverse_direction on F, midpoint(A, C) we get 180 == direction(F, midpoint(A, C)) - direction(midpoint(A, C), F) mod 360
By aa_anti_similarity on C, midpoint(A, C), F, A, midpoint(A, C), F we get anti_similar_triangles(A, F, midpoint(A, C), C, F, midpoint(A, C))
By aa_anti_similarity on A, midpoint(A, C), F, C, midpoint(A, C), F we get anti_similar_triangles(A, F, midpoint(A, C), C, F, midpoint(A, C))
By reverse_direction on midpoint(A, C), line_intersection(f, i) we get 180 == direction(midpoint(A, C), line_intersection(f, i)) - direction(line_intersection(f, i), midpoint(A, C)) mod 360
By aa_anti_similarity on A, F, midpoint(A, C), C, F, midpoint(A, C) we get anti_similar_triangles(A, F, midpoint(A, C), C, F, midpoint(A, C))
By reverse_direction on midpoint(A, C), F we get 180 == direction(midpoint(A, C), F) - direction(F, midpoint(A, C)) mod 360
By reverse_direction on line_intersection(f, i), midpoint(A, C) we get 180 == direction(line_intersection(f, i), midpoint(A, C)) - direction(midpoint(A, C), line_intersection(f, i)) mod 360
By aa_anti_similarity on C, F, midpoint(A, C), A, F, midpoint(A, C) we get anti_similar_triangles(A, F, midpoint(A, C), C, F, midpoint(A, C))
By external_angle_bisector_definition_v0_r on midpoint(A, C), D, midpoint(A, C), F we get Line(D, F) == external_angle_bisector(midpoint(A, C), F, midpoint(A, C))
By internal_angle_bisector_definition_v0_r on C, line_intersection(f, i), A, midpoint(A, C) we get Line(midpoint(A, C), line_intersection(f, i)) == internal_angle_bisector(A, midpoint(A, C), C)
By external_angle_bisector_definition_v0_r on A, F, A, midpoint(A, C) we get Line(F, midpoint(A, C)) == external_angle_bisector(A, midpoint(A, C), A)
By external_angle_bisector_definition_v0_r on F, A, F, midpoint(A, C) we get Line(A, midpoint(A, C)) == external_angle_bisector(F, midpoint(A, C), F)
By internal_angle_bisector_definition_v0_r on line_intersection(f, i), F, line_intersection(f, i), midpoint(A, C) we get Line(F, midpoint(A, C)) == internal_angle_bisector(line_intersection(f, i), midpoint(A, C), line_intersection(f, i))
By external_angle_bisector_definition_v0_r on A, line_intersection(f, i), A, midpoint(A, C) we get Line(midpoint(A, C), line_intersection(f, i)) == external_angle_bisector(A, midpoint(A, C), A)
By external_angle_bisector_definition_v0_r on C, F, C, midpoint(A, C) we get Line(F, midpoint(A, C)) == external_angle_bisector(C, midpoint(A, C), C)
By isosceles_triangle_properties on line_intersection(f, i), D, E we get distance(D, line_intersection(f, i)) == distance(E, line_intersection(f, i)), angle(D, E, line_intersection(f, i)) == angle(line_intersection(f, i), D, E) mod 360
By external_angle_bisector_definition_v0_r on line_intersection(f, i), A, line_intersection(f, i), midpoint(A, C) we get Line(A, midpoint(A, C)) == external_angle_bisector(line_intersection(f, i), midpoint(A, C), line_intersection(f, i))
By external_angle_bisector_definition_v0_r on F, C, F, midpoint(A, C) we get Line(C, midpoint(A, C)) == external_angle_bisector(F, midpoint(A, C), F)
By external_angle_bisector_definition_v0_r on line_intersection(f, i), C, line_intersection(f, i), midpoint(A, C) we get Line(C, midpoint(A, C)) == external_angle_bisector(line_intersection(f, i), midpoint(A, C), line_intersection(f, i))
By isosceles_triangle_altitude_v1 on midpoint(A, C), D, E we get identical(perpendicular_bisector(D, E), internal_angle_bisector(D, midpoint(A, C), E), perpendicular_line(midpoint(A, C), Line(D, E)))
By internal_angle_bisector_definition_v0_r on A, F, C, midpoint(A, C) we get Line(F, midpoint(A, C)) == internal_angle_bisector(A, midpoint(A, C), C)
By internal_angle_bisector_definition_v0_r on midpoint(A, C), F, midpoint(A, C), line_intersection(f, i) we get Line(F, line_intersection(f, i)) == internal_angle_bisector(midpoint(A, C), line_intersection(f, i), midpoint(A, C))
By internal_angle_bisector_definition_v0_r on F, midpoint(A, C), F, line_intersection(f, i) we get Line(midpoint(A, C), line_intersection(f, i)) == internal_angle_bisector(F, line_intersection(f, i), F)
By isosceles_triangle_properties on line_intersection(f, i), A, C we get distance(A, line_intersection(f, i)) == distance(C, line_intersection(f, i)), angle(A, C, line_intersection(f, i)) == angle(line_intersection(f, i), A, C) mod 360
By internal_angle_bisector_definition_v0_r on midpoint(A, C), line_intersection(f, i), midpoint(A, C), F we get Line(F, line_intersection(f, i)) == internal_angle_bisector(midpoint(A, C), F, midpoint(A, C))
By external_angle_bisector_definition_v0_r on midpoint(A, C), E, midpoint(A, C), F we get Line(E, F) == external_angle_bisector(midpoint(A, C), F, midpoint(A, C))
By external_angle_bisector_definition_v0_r on C, line_intersection(f, i), C, midpoint(A, C) we get Line(midpoint(A, C), line_intersection(f, i)) == external_angle_bisector(C, midpoint(A, C), C)
By isosceles_triangle_properties on line_intersection(f, i), C, A we get distance(A, line_intersection(f, i)) == distance(C, line_intersection(f, i)), angle(C, A, line_intersection(f, i)) == angle(line_intersection(f, i), C, A) mod 360
By isosceles_triangle_altitude_v3 on line_intersection(f, i), E, D we get identical(perpendicular_bisector(D, E), internal_angle_bisector(D, line_intersection(f, i), E), perpendicular_line(line_intersection(f, i), Line(D, E)))
By isosceles_triangle_altitude_v0 on line_intersection(f, i), E, D we get identical(perpendicular_bisector(D, E), internal_angle_bisector(D, line_intersection(f, i), E), perpendicular_line(line_intersection(f, i), Line(D, E)))
By isosceles_triangle_altitude_v0 on line_intersection(f, i), C, A we get identical(perpendicular_bisector(A, C), internal_angle_bisector(A, line_intersection(f, i), C), perpendicular_line(line_intersection(f, i), Line(A, C)))
By isosceles_triangle_altitude_v1 on line_intersection(f, i), A, C we get identical(perpendicular_bisector(A, C), internal_angle_bisector(A, line_intersection(f, i), C), perpendicular_line(line_intersection(f, i), Line(A, C)))
By isosceles_triangle_altitude_v1 on midpoint(A, C), E, D we get identical(perpendicular_bisector(D, E), internal_angle_bisector(D, midpoint(A, C), E), perpendicular_line(midpoint(A, C), Line(D, E)))
By isosceles_triangle_altitude_v3 on line_intersection(f, i), D, E we get identical(perpendicular_bisector(D, E), internal_angle_bisector(D, line_intersection(f, i), E), perpendicular_line(line_intersection(f, i), Line(D, E)))
By internal_angle_bisector_definition_v0_r on F, line_intersection(f, i), F, midpoint(A, C) we get Line(midpoint(A, C), line_intersection(f, i)) == internal_angle_bisector(F, midpoint(A, C), F)
By isosceles_triangle_altitude_v1 on line_intersection(f, i), E, D we get identical(perpendicular_bisector(D, E), internal_angle_bisector(D, line_intersection(f, i), E), perpendicular_line(line_intersection(f, i), Line(D, E)))
By isosceles_triangle_properties on line_intersection(f, i), E, D we get distance(D, line_intersection(f, i)) == distance(E, line_intersection(f, i)), angle(E, D, line_intersection(f, i)) == angle(line_intersection(f, i), E, D) mod 360
By isosceles_triangle_altitude_v3 on line_intersection(f, i), A, C we get identical(perpendicular_bisector(A, C), internal_angle_bisector(A, line_intersection(f, i), C), perpendicular_line(line_intersection(f, i), Line(A, C)))
By isosceles_triangle_altitude_v0 on midpoint(A, C), E, D we get identical(perpendicular_bisector(D, E), internal_angle_bisector(D, midpoint(A, C), E), perpendicular_line(midpoint(A, C), Line(D, E)))
By internal_angle_bisector_definition_v0_r on line_intersection(f, i), midpoint(A, C), line_intersection(f, i), F we get Line(F, midpoint(A, C)) == internal_angle_bisector(line_intersection(f, i), F, line_intersection(f, i))
By isosceles_triangle_altitude_v3 on midpoint(A, C), E, D we get identical(perpendicular_bisector(D, E), internal_angle_bisector(D, midpoint(A, C), E), perpendicular_line(midpoint(A, C), Line(D, E)))
By isosceles_triangle_altitude_v3 on line_intersection(f, i), C, A we get identical(perpendicular_bisector(A, C), internal_angle_bisector(A, line_intersection(f, i), C), perpendicular_line(line_intersection(f, i), Line(A, C)))
By isosceles_triangle_altitude_v1 on line_intersection(f, i), C, A we get identical(perpendicular_bisector(A, C), internal_angle_bisector(A, line_intersection(f, i), C), perpendicular_line(line_intersection(f, i), Line(A, C)))
By isosceles_triangle_altitude_v0 on line_intersection(f, i), A, C we get identical(perpendicular_bisector(A, C), internal_angle_bisector(A, line_intersection(f, i), C), perpendicular_line(line_intersection(f, i), Line(A, C)))
By isosceles_triangle_altitude_v0 on midpoint(A, C), D, E we get identical(perpendicular_bisector(D, E), internal_angle_bisector(D, midpoint(A, C), E), perpendicular_line(midpoint(A, C), Line(D, E)))
By isosceles_triangle_altitude_v1 on line_intersection(f, i), D, E we get identical(perpendicular_bisector(D, E), internal_angle_bisector(D, line_intersection(f, i), E), perpendicular_line(line_intersection(f, i), Line(D, E)))
By isosceles_triangle_altitude_v0 on line_intersection(f, i), D, E we get identical(perpendicular_bisector(D, E), internal_angle_bisector(D, line_intersection(f, i), E), perpendicular_line(line_intersection(f, i), Line(D, E)))
By isosceles_triangle_altitude_v3 on midpoint(A, C), D, E we get identical(perpendicular_bisector(D, E), internal_angle_bisector(D, midpoint(A, C), E), perpendicular_line(midpoint(A, C), Line(D, E)))
By isosceles_triangle_properties on midpoint(A, C), D, E we get distance(D, midpoint(A, C)) == distance(E, midpoint(A, C)), angle(D, E, midpoint(A, C)) == angle(midpoint(A, C), D, E) mod 360
By isosceles_triangle_properties on midpoint(A, C), E, D we get distance(D, midpoint(A, C)) == distance(E, midpoint(A, C)), angle(E, D, midpoint(A, C)) == angle(midpoint(A, C), E, D) mod 360
By line_intersection_definition on line_intersection(f, i), Line(E, line_intersection(f, i)), f we get line_intersection(f, i) == line_intersection(f, Line(E, line_intersection(f, i)))
By line_intersection_definition on midpoint(A, C), g, Line(E, midpoint(A, C)) we get midpoint(A, C) == line_intersection(g, Line(E, midpoint(A, C)))
By median_definition on E, A, C, Line(E, midpoint(A, C)) we get median(E, A, C) == Line(E, midpoint(A, C))
By line_intersection_definition on line_intersection(f, i), i, Line(C, line_intersection(f, i)) we get line_intersection(f, i) == line_intersection(i, Line(C, line_intersection(f, i)))
By line_intersection_definition on D, Line(D, midpoint(A, C)), Line(C, D) we get D == line_intersection(Line(C, D), Line(D, midpoint(A, C)))
By median_definition on D, A, C, Line(D, midpoint(A, C)) we get median(D, A, C) == Line(D, midpoint(A, C))
By line_intersection_definition on E, Line(A, E), Line(E, line_intersection(f, i)) we get E == line_intersection(Line(A, E), Line(E, line_intersection(f, i)))
By line_intersection_definition on midpoint(A, C), Line(E, midpoint(A, C)), i we get midpoint(A, C) == line_intersection(i, Line(E, midpoint(A, C)))
By line_intersection_definition on E, Line(E, midpoint(A, C)), h we get E == line_intersection(h, Line(E, midpoint(A, C)))
By line_intersection_definition on midpoint(A, C), g, Line(D, midpoint(A, C)) we get midpoint(A, C) == line_intersection(g, Line(D, midpoint(A, C)))
By line_intersection_definition on C, Line(C, line_intersection(f, i)), Line(C, F) we get C == line_intersection(Line(C, F), Line(C, line_intersection(f, i)))
By line_intersection_definition on E, Line(E, line_intersection(f, i)), Line(E, midpoint(A, C)) we get E == line_intersection(Line(E, midpoint(A, C)), Line(E, line_intersection(f, i)))
By line_intersection_definition on midpoint(A, C), Line(D, midpoint(A, C)), i we get midpoint(A, C) == line_intersection(i, Line(D, midpoint(A, C)))
By line_intersection_definition on D, Line(D, midpoint(A, C)), f we get D == line_intersection(f, Line(D, midpoint(A, C)))
By line_intersection_definition on D, Line(D, midpoint(A, C)), h we get D == line_intersection(h, Line(D, midpoint(A, C)))
By median_definition on midpoint(A, C), A, B, Line(D, midpoint(A, C)) we get Line(D, midpoint(A, C)) == median(midpoint(A, C), A, B)
By line_intersection_definition on midpoint(A, C), Line(D, midpoint(A, C)), Line(E, midpoint(A, C)) we get midpoint(A, C) == line_intersection(Line(D, midpoint(A, C)), Line(E, midpoint(A, C)))
By line_intersection_definition on line_intersection(f, i), i, Line(E, line_intersection(f, i)) we get line_intersection(f, i) == line_intersection(i, Line(E, line_intersection(f, i)))
By line_intersection_definition on C, Line(C, line_intersection(f, i)), g we get C == line_intersection(g, Line(C, line_intersection(f, i)))
By line_intersection_definition on C, Line(C, D), Line(C, line_intersection(f, i)) we get C == line_intersection(Line(C, D), Line(C, line_intersection(f, i)))
By line_intersection_definition on E, h, Line(E, line_intersection(f, i)) we get E == line_intersection(h, Line(E, line_intersection(f, i)))
By line_intersection_definition on E, Line(A, E), Line(E, midpoint(A, C)) we get E == line_intersection(Line(A, E), Line(E, midpoint(A, C)))
By line_intersection_definition on line_intersection(f, i), f, Line(C, line_intersection(f, i)) we get line_intersection(f, i) == line_intersection(f, Line(C, line_intersection(f, i)))
By line_intersection_definition on E, Line(E, midpoint(A, C)), j we get E == line_intersection(j, Line(E, midpoint(A, C)))
By reverse_direction on D, midpoint(A, C) we get 180 == direction(D, midpoint(A, C)) - direction(midpoint(A, C), D) mod 360
By anti_similar_triangle_basic_properties on F, C, midpoint(A, C), F, A, midpoint(A, C) we get angle(F, C, midpoint(A, C)) == 0 - angle(F, A, midpoint(A, C)) mod 360, angle(C, midpoint(A, C), F) == 0 - angle(A, midpoint(A, C), F) mod 360, angle(midpoint(A, C), F, C) == 0 - angle(midpoint(A, C), F, A) mod 360, log(distance(A, F)) + log(distance(C, midpoint(A, C))) == log(distance(C, F)) + log(distance(A, midpoint(A, C))), log(distance(A, midpoint(A, C))) + log(distance(F, midpoint(A, C))) == log(distance(C, midpoint(A, C))) + log(distance(F, midpoint(A, C))), log(distance(F, midpoint(A, C))) + log(distance(A, F)) == log(distance(F, midpoint(A, C))) + log(distance(C, F))
By sas_anti_congruence on line_intersection(f, i), D, E, line_intersection(f, i), E, D we get anti_congruent_triangles(D, E, line_intersection(f, i), E, D, line_intersection(f, i))
By internal_angle_bisector_definition_v0 on C, midpoint(A, C), A, line_intersection(f, i) we get angle(C, line_intersection(f, i), midpoint(A, C)) == angle(midpoint(A, C), line_intersection(f, i), A) mod 360
By internal_angle_bisector_definition_v0 on D, F, E, line_intersection(f, i) we get angle(D, line_intersection(f, i), F) == angle(F, line_intersection(f, i), E) mod 360
By sas_anti_congruence on line_intersection(f, i), A, C, line_intersection(f, i), C, A we get anti_congruent_triangles(A, C, line_intersection(f, i), C, A, line_intersection(f, i))
By aa_anti_similarity on line_intersection(f, i), C, A, line_intersection(f, i), A, C we get anti_similar_triangles(A, C, line_intersection(f, i), C, A, line_intersection(f, i))
By asa_anti_congruence on C, A, line_intersection(f, i), A, C, line_intersection(f, i) we get anti_congruent_triangles(A, C, line_intersection(f, i), C, A, line_intersection(f, i))
By internal_angle_bisector_definition_v0 on A, midpoint(A, C), C, line_intersection(f, i) we get angle(A, line_intersection(f, i), midpoint(A, C)) == angle(midpoint(A, C), line_intersection(f, i), C) mod 360
By sas_anti_congruence on A, C, line_intersection(f, i), C, A, line_intersection(f, i) we get anti_congruent_triangles(A, C, line_intersection(f, i), C, A, line_intersection(f, i))
By internal_angle_bisector_definition_v0 on C, F, A, line_intersection(f, i) we get angle(C, line_intersection(f, i), F) == angle(F, line_intersection(f, i), A) mod 360
By sas_anti_congruence on C, A, line_intersection(f, i), A, C, line_intersection(f, i) we get anti_congruent_triangles(A, C, line_intersection(f, i), C, A, line_intersection(f, i))
By reverse_direction on C, line_intersection(f, i) we get 180 == direction(C, line_intersection(f, i)) - direction(line_intersection(f, i), C) mod 360
By internal_angle_bisector_definition_v0 on E, F, D, line_intersection(f, i) we get angle(E, line_intersection(f, i), F) == angle(F, line_intersection(f, i), D) mod 360
By sas_anti_congruence on line_intersection(f, i), C, A, line_intersection(f, i), A, C we get anti_congruent_triangles(A, C, line_intersection(f, i), C, A, line_intersection(f, i))
By aa_anti_similarity on line_intersection(f, i), D, E, line_intersection(f, i), E, D we get anti_similar_triangles(D, E, line_intersection(f, i), E, D, line_intersection(f, i))
By internal_angle_bisector_definition_v0 on E, midpoint(A, C), D, line_intersection(f, i) we get angle(E, line_intersection(f, i), midpoint(A, C)) == angle(midpoint(A, C), line_intersection(f, i), D) mod 360
By sas_anti_congruence on D, E, line_intersection(f, i), E, D, line_intersection(f, i) we get anti_congruent_triangles(D, E, line_intersection(f, i), E, D, line_intersection(f, i))
By reverse_direction on E, line_intersection(f, i) we get 180 == direction(E, line_intersection(f, i)) - direction(line_intersection(f, i), E) mod 360
By aa_anti_similarity on line_intersection(f, i), E, D, line_intersection(f, i), D, E we get anti_similar_triangles(D, E, line_intersection(f, i), E, D, line_intersection(f, i))
By internal_angle_bisector_definition_v0 on A, F, C, line_intersection(f, i) we get angle(A, line_intersection(f, i), F) == angle(F, line_intersection(f, i), C) mod 360
By asa_anti_congruence on D, E, line_intersection(f, i), E, D, line_intersection(f, i) we get anti_congruent_triangles(D, E, line_intersection(f, i), E, D, line_intersection(f, i))
By aa_anti_similarity on line_intersection(f, i), A, C, line_intersection(f, i), C, A we get anti_similar_triangles(A, C, line_intersection(f, i), C, A, line_intersection(f, i))
By asa_anti_congruence on A, C, line_intersection(f, i), C, A, line_intersection(f, i) we get anti_congruent_triangles(A, C, line_intersection(f, i), C, A, line_intersection(f, i))
By asa_anti_congruence on E, D, line_intersection(f, i), D, E, line_intersection(f, i) we get anti_congruent_triangles(D, E, line_intersection(f, i), E, D, line_intersection(f, i))
By sas_anti_congruence on E, D, line_intersection(f, i), D, E, line_intersection(f, i) we get anti_congruent_triangles(D, E, line_intersection(f, i), E, D, line_intersection(f, i))
By reverse_direction on E, midpoint(A, C) we get 180 == direction(E, midpoint(A, C)) - direction(midpoint(A, C), E) mod 360
By sas_anti_congruence on line_intersection(f, i), E, D, line_intersection(f, i), D, E we get anti_congruent_triangles(D, E, line_intersection(f, i), E, D, line_intersection(f, i))
By internal_angle_bisector_definition_v0 on D, midpoint(A, C), E, line_intersection(f, i) we get angle(D, line_intersection(f, i), midpoint(A, C)) == angle(midpoint(A, C), line_intersection(f, i), E) mod 360
By sas_anti_congruence on D, E, midpoint(A, C), E, D, midpoint(A, C) we get anti_congruent_triangles(D, E, midpoint(A, C), E, D, midpoint(A, C))
By aa_anti_similarity on midpoint(A, C), E, D, midpoint(A, C), D, E we get anti_similar_triangles(D, E, midpoint(A, C), E, D, midpoint(A, C))
By internal_angle_bisector_definition_v0 on E, line_intersection(f, i), D, midpoint(A, C) we get angle(E, midpoint(A, C), line_intersection(f, i)) == angle(line_intersection(f, i), midpoint(A, C), D) mod 360
By internal_angle_bisector_definition_v0 on D, F, E, midpoint(A, C) we get angle(D, midpoint(A, C), F) == angle(F, midpoint(A, C), E) mod 360
By asa_anti_congruence on E, D, midpoint(A, C), D, E, midpoint(A, C) we get anti_congruent_triangles(D, E, midpoint(A, C), E, D, midpoint(A, C))
By asa_anti_congruence on D, E, midpoint(A, C), E, D, midpoint(A, C) we get anti_congruent_triangles(D, E, midpoint(A, C), E, D, midpoint(A, C))
By sas_anti_congruence on E, D, midpoint(A, C), D, E, midpoint(A, C) we get anti_congruent_triangles(D, E, midpoint(A, C), E, D, midpoint(A, C))
By aa_anti_similarity on midpoint(A, C), D, E, midpoint(A, C), E, D we get anti_similar_triangles(D, E, midpoint(A, C), E, D, midpoint(A, C))
By sas_anti_congruence on midpoint(A, C), E, D, midpoint(A, C), D, E we get anti_congruent_triangles(D, E, midpoint(A, C), E, D, midpoint(A, C))
By internal_angle_bisector_definition_v0 on E, F, D, midpoint(A, C) we get angle(E, midpoint(A, C), F) == angle(F, midpoint(A, C), D) mod 360
By internal_angle_bisector_definition_v0 on D, line_intersection(f, i), E, midpoint(A, C) we get angle(D, midpoint(A, C), line_intersection(f, i)) == angle(line_intersection(f, i), midpoint(A, C), E) mod 360
By sas_anti_congruence on midpoint(A, C), D, E, midpoint(A, C), E, D we get anti_congruent_triangles(D, E, midpoint(A, C), E, D, midpoint(A, C))
By concurrent_sufficient_conditions on median(D, A, C), f, Line(C, D) we get concurrent(f, Line(C, D), median(D, A, C))
By concurrent_sufficient_conditions on i, median(E, A, C), median(D, A, C) we get concurrent(i, median(D, A, C), median(E, A, C))
By concurrent_sufficient_conditions on i, Line(C, line_intersection(f, i)), f we get concurrent(f, i, Line(C, line_intersection(f, i)))
By concurrent_sufficient_conditions on Line(E, line_intersection(f, i)), i, f we get concurrent(f, i, Line(E, line_intersection(f, i)))
By concurrent_sufficient_conditions on Line(A, E), median(E, A, C), h we get concurrent(h, Line(A, E), median(E, A, C))
By concurrent_sufficient_conditions on Line(E, line_intersection(f, i)), Line(A, E), median(E, A, C) we get concurrent(Line(A, E), median(E, A, C), Line(E, line_intersection(f, i)))
By concurrent_sufficient_conditions on median(E, A, C), Line(E, line_intersection(f, i)), Line(A, E) we get concurrent(Line(A, E), median(E, A, C), Line(E, line_intersection(f, i)))
By concurrent_sufficient_conditions on median(E, A, C), j, h we get concurrent(h, j, median(E, A, C))
By concurrent_sufficient_conditions on g, Line(C, D), Line(C, line_intersection(f, i)) we get concurrent(g, Line(C, D), Line(C, line_intersection(f, i)))
By concurrent_sufficient_conditions on h, median(D, A, C), Line(C, D) we get concurrent(h, Line(C, D), median(D, A, C))
By concurrent_sufficient_conditions on g, median(D, A, C), median(E, A, C) we get concurrent(g, median(D, A, C), median(E, A, C))
By concurrent_sufficient_conditions on median(E, A, C), Line(A, E), j we get concurrent(j, Line(A, E), median(E, A, C))
By concurrent_sufficient_conditions on Line(C, D), Line(C, line_intersection(f, i)), Line(C, F) we get concurrent(Line(C, D), Line(C, F), Line(C, line_intersection(f, i)))
By concurrent_sufficient_conditions on Line(C, D), Line(C, line_intersection(f, i)), g we get concurrent(g, Line(C, D), Line(C, line_intersection(f, i)))
By concurrent_sufficient_conditions on h, Line(A, E), median(E, A, C) we get concurrent(h, Line(A, E), median(E, A, C))
By concurrent_sufficient_conditions on g, median(E, A, C), i we get concurrent(g, i, median(E, A, C))
By concurrent_sufficient_conditions on median(E, A, C), i, median(D, A, C) we get concurrent(i, median(D, A, C), median(E, A, C))
By concurrent_sufficient_conditions on Line(E, line_intersection(f, i)), median(E, A, C), Line(A, E) we get concurrent(Line(A, E), median(E, A, C), Line(E, line_intersection(f, i)))
By concurrent_sufficient_conditions on h, j, median(E, A, C) we get concurrent(h, j, median(E, A, C))
By concurrent_sufficient_conditions on f, Line(E, line_intersection(f, i)), i we get concurrent(f, i, Line(E, line_intersection(f, i)))
By concurrent_sufficient_conditions on i, Line(E, line_intersection(f, i)), f we get concurrent(f, i, Line(E, line_intersection(f, i)))
By concurrent_sufficient_conditions on Line(A, E), j, median(E, A, C) we get concurrent(j, Line(A, E), median(E, A, C))
By concurrent_sufficient_conditions on h, Line(A, E), Line(E, line_intersection(f, i)) we get concurrent(h, Line(A, E), Line(E, line_intersection(f, i)))
By concurrent_sufficient_conditions on median(D, A, C), h, f we get concurrent(f, h, median(D, A, C))
By concurrent_sufficient_conditions on i, g, median(D, A, C) we get concurrent(g, i, median(D, A, C))
By concurrent_sufficient_conditions on f, Line(C, line_intersection(f, i)), i we get concurrent(f, i, Line(C, line_intersection(f, i)))
By concurrent_sufficient_conditions on Line(C, D), g, Line(C, line_intersection(f, i)) we get concurrent(g, Line(C, D), Line(C, line_intersection(f, i)))
By concurrent_sufficient_conditions on Line(C, line_intersection(f, i)), Line(C, D), Line(C, F) we get concurrent(Line(C, D), Line(C, F), Line(C, line_intersection(f, i)))
By concurrent_sufficient_conditions on Line(A, E), h, median(E, A, C) we get concurrent(h, Line(A, E), median(E, A, C))
By concurrent_sufficient_conditions on median(E, A, C), g, i we get concurrent(g, i, median(E, A, C))
By concurrent_sufficient_conditions on i, median(D, A, C), median(E, A, C) we get concurrent(i, median(D, A, C), median(E, A, C))
By concurrent_sufficient_conditions on median(D, A, C), f, h we get concurrent(f, h, median(D, A, C))
By concurrent_sufficient_conditions on f, i, Line(C, line_intersection(f, i)) we get concurrent(f, i, Line(C, line_intersection(f, i)))
By concurrent_sufficient_conditions on median(E, A, C), g, median(D, A, C) we get concurrent(g, median(D, A, C), median(E, A, C))
By concurrent_sufficient_conditions on median(D, A, C), i, median(E, A, C) we get concurrent(i, median(D, A, C), median(E, A, C))
By concurrent_sufficient_conditions on median(D, A, C), Line(C, D), f we get concurrent(f, Line(C, D), median(D, A, C))
By concurrent_sufficient_conditions on median(E, A, C), h, Line(E, line_intersection(f, i)) we get concurrent(h, median(E, A, C), Line(E, line_intersection(f, i)))
By concurrent_sufficient_conditions on Line(C, D), median(D, A, C), f we get concurrent(f, Line(C, D), median(D, A, C))
By concurrent_sufficient_conditions on i, median(E, A, C), g we get concurrent(g, i, median(E, A, C))
By concurrent_sufficient_conditions on median(E, A, C), i, g we get concurrent(g, i, median(E, A, C))
By concurrent_sufficient_conditions on Line(C, F), Line(C, line_intersection(f, i)), g we get concurrent(g, Line(C, F), Line(C, line_intersection(f, i)))
By concurrent_sufficient_conditions on Line(A, E), median(E, A, C), Line(E, line_intersection(f, i)) we get concurrent(Line(A, E), median(E, A, C), Line(E, line_intersection(f, i)))
By concurrent_sufficient_conditions on Line(C, line_intersection(f, i)), g, Line(C, D) we get concurrent(g, Line(C, D), Line(C, line_intersection(f, i)))
By concurrent_sufficient_conditions on Line(C, line_intersection(f, i)), f, i we get concurrent(f, i, Line(C, line_intersection(f, i)))
By concurrent_sufficient_conditions on Line(C, F), Line(C, D), Line(C, line_intersection(f, i)) we get concurrent(Line(C, D), Line(C, F), Line(C, line_intersection(f, i)))
By concurrent_sufficient_conditions on g, Line(C, line_intersection(f, i)), Line(C, D) we get concurrent(g, Line(C, D), Line(C, line_intersection(f, i)))
By concurrent_sufficient_conditions on h, Line(C, D), median(D, A, C) we get concurrent(h, Line(C, D), median(D, A, C))
By concurrent_sufficient_conditions on Line(A, E), h, Line(E, line_intersection(f, i)) we get concurrent(h, Line(A, E), Line(E, line_intersection(f, i)))
By concurrent_sufficient_conditions on Line(C, line_intersection(f, i)), i, f we get concurrent(f, i, Line(C, line_intersection(f, i)))
By concurrent_sufficient_conditions on h, median(E, A, C), Line(A, E) we get concurrent(h, Line(A, E), median(E, A, C))
By concurrent_sufficient_conditions on f, median(D, A, C), h we get concurrent(f, h, median(D, A, C))
By concurrent_sufficient_conditions on f, Line(C, D), median(D, A, C) we get concurrent(f, Line(C, D), median(D, A, C))
By concurrent_sufficient_conditions on f, i, Line(E, line_intersection(f, i)) we get concurrent(f, i, Line(E, line_intersection(f, i)))
By concurrent_sufficient_conditions on median(D, A, C), i, g we get concurrent(g, i, median(D, A, C))
By concurrent_sufficient_conditions on median(E, A, C), Line(A, E), Line(E, line_intersection(f, i)) we get concurrent(Line(A, E), median(E, A, C), Line(E, line_intersection(f, i)))
By concurrent_sufficient_conditions on median(D, A, C), h, Line(C, D) we get concurrent(h, Line(C, D), median(D, A, C))
By concurrent_sufficient_conditions on g, Line(C, line_intersection(f, i)), Line(C, F) we get concurrent(g, Line(C, F), Line(C, line_intersection(f, i)))
By concurrent_sufficient_conditions on median(E, A, C), h, Line(A, E) we get concurrent(h, Line(A, E), median(E, A, C))
By concurrent_sufficient_conditions on Line(A, E), Line(E, line_intersection(f, i)), median(E, A, C) we get concurrent(Line(A, E), median(E, A, C), Line(E, line_intersection(f, i)))
By concurrent_sufficient_conditions on median(E, A, C), j, Line(A, E) we get concurrent(j, Line(A, E), median(E, A, C))
By concurrent_sufficient_conditions on Line(C, F), g, Line(C, line_intersection(f, i)) we get concurrent(g, Line(C, F), Line(C, line_intersection(f, i)))
By concurrent_sufficient_conditions on j, median(E, A, C), h we get concurrent(h, j, median(E, A, C))
By concurrent_sufficient_conditions on median(D, A, C), g, i we get concurrent(g, i, median(D, A, C))
By concurrent_sufficient_conditions on h, Line(E, line_intersection(f, i)), median(E, A, C) we get concurrent(h, median(E, A, C), Line(E, line_intersection(f, i)))
By concurrent_sufficient_conditions on median(D, A, C), Line(C, D), h we get concurrent(h, Line(C, D), median(D, A, C))
By concurrent_sufficient_conditions on median(E, A, C), Line(E, line_intersection(f, i)), h we get concurrent(h, median(E, A, C), Line(E, line_intersection(f, i)))
By concurrent_sufficient_conditions on Line(C, D), f, median(D, A, C) we get concurrent(f, Line(C, D), median(D, A, C))
By concurrent_sufficient_conditions on g, i, median(D, A, C) we get concurrent(g, i, median(D, A, C))
By concurrent_sufficient_conditions on i, g, median(E, A, C) we get concurrent(g, i, median(E, A, C))
By concurrent_sufficient_conditions on median(E, A, C), Line(A, E), h we get concurrent(h, Line(A, E), median(E, A, C))
By concurrent_sufficient_conditions on i, f, Line(E, line_intersection(f, i)) we get concurrent(f, i, Line(E, line_intersection(f, i)))
By concurrent_sufficient_conditions on h, f, median(D, A, C) we get concurrent(f, h, median(D, A, C))
By concurrent_sufficient_conditions on j, h, median(E, A, C) we get concurrent(h, j, median(E, A, C))
By concurrent_sufficient_conditions on g, Line(C, F), Line(C, line_intersection(f, i)) we get concurrent(g, Line(C, F), Line(C, line_intersection(f, i)))
By concurrent_sufficient_conditions on f, median(D, A, C), Line(C, D) we get concurrent(f, Line(C, D), median(D, A, C))
By concurrent_sufficient_conditions on g, median(E, A, C), median(D, A, C) we get concurrent(g, median(D, A, C), median(E, A, C))
By concurrent_sufficient_conditions on median(E, A, C), h, j we get concurrent(h, j, median(E, A, C))
By concurrent_sufficient_conditions on h, median(E, A, C), Line(E, line_intersection(f, i)) we get concurrent(h, median(E, A, C), Line(E, line_intersection(f, i)))
By concurrent_sufficient_conditions on median(E, A, C), median(D, A, C), i we get concurrent(i, median(D, A, C), median(E, A, C))
By concurrent_sufficient_conditions on Line(E, line_intersection(f, i)), h, Line(A, E) we get concurrent(h, Line(A, E), Line(E, line_intersection(f, i)))
By concurrent_sufficient_conditions on i, f, Line(C, line_intersection(f, i)) we get concurrent(f, i, Line(C, line_intersection(f, i)))
By concurrent_sufficient_conditions on median(D, A, C), g, median(E, A, C) we get concurrent(g, median(D, A, C), median(E, A, C))
By concurrent_sufficient_conditions on Line(C, D), Line(C, F), Line(C, line_intersection(f, i)) we get concurrent(Line(C, D), Line(C, F), Line(C, line_intersection(f, i)))
By concurrent_sufficient_conditions on median(D, A, C), median(E, A, C), i we get concurrent(i, median(D, A, C), median(E, A, C))
By concurrent_sufficient_conditions on Line(E, line_intersection(f, i)), f, i we get concurrent(f, i, Line(E, line_intersection(f, i)))
By concurrent_sufficient_conditions on Line(E, line_intersection(f, i)), h, median(E, A, C) we get concurrent(h, median(E, A, C), Line(E, line_intersection(f, i)))
By concurrent_sufficient_conditions on Line(C, line_intersection(f, i)), Line(C, F), g we get concurrent(g, Line(C, F), Line(C, line_intersection(f, i)))
By concurrent_sufficient_conditions on g, i, median(E, A, C) we get concurrent(g, i, median(E, A, C))
By concurrent_sufficient_conditions on Line(C, D), h, median(D, A, C) we get concurrent(h, Line(C, D), median(D, A, C))
By concurrent_sufficient_conditions on i, median(D, A, C), g we get concurrent(g, i, median(D, A, C))
By concurrent_sufficient_conditions on Line(A, E), Line(E, line_intersection(f, i)), h we get concurrent(h, Line(A, E), Line(E, line_intersection(f, i)))
By concurrent_sufficient_conditions on h, median(D, A, C), f we get concurrent(f, h, median(D, A, C))
By concurrent_sufficient_conditions on Line(C, line_intersection(f, i)), g, Line(C, F) we get concurrent(g, Line(C, F), Line(C, line_intersection(f, i)))
By concurrent_sufficient_conditions on median(D, A, C), median(E, A, C), g we get concurrent(g, median(D, A, C), median(E, A, C))
By concurrent_sufficient_conditions on median(E, A, C), median(D, A, C), g we get concurrent(g, median(D, A, C), median(E, A, C))
By concurrent_sufficient_conditions on Line(E, line_intersection(f, i)), Line(A, E), h we get concurrent(h, Line(A, E), Line(E, line_intersection(f, i)))
By concurrent_sufficient_conditions on Line(E, line_intersection(f, i)), median(E, A, C), h we get concurrent(h, median(E, A, C), Line(E, line_intersection(f, i)))
By concurrent_sufficient_conditions on Line(A, E), median(E, A, C), j we get concurrent(j, Line(A, E), median(E, A, C))
By concurrent_sufficient_conditions on j, median(E, A, C), Line(A, E) we get concurrent(j, Line(A, E), median(E, A, C))
By concurrent_sufficient_conditions on Line(C, D), median(D, A, C), h we get concurrent(h, Line(C, D), median(D, A, C))
By concurrent_sufficient_conditions on Line(C, line_intersection(f, i)), Line(C, F), Line(C, D) we get concurrent(Line(C, D), Line(C, F), Line(C, line_intersection(f, i)))
By concurrent_sufficient_conditions on h, median(E, A, C), j we get concurrent(h, j, median(E, A, C))
By concurrent_sufficient_conditions on Line(C, F), Line(C, line_intersection(f, i)), Line(C, D) we get concurrent(Line(C, D), Line(C, F), Line(C, line_intersection(f, i)))
By concurrent_sufficient_conditions on j, Line(A, E), median(E, A, C) we get concurrent(j, Line(A, E), median(E, A, C))
By concurrent_sufficient_conditions on g, median(D, A, C), i we get concurrent(g, i, median(D, A, C))
By concurrent_sufficient_conditions on h, Line(E, line_intersection(f, i)), Line(A, E) we get concurrent(h, Line(A, E), Line(E, line_intersection(f, i)))
By concurrent_sufficient_conditions on Line(C, line_intersection(f, i)), Line(C, D), g we get concurrent(g, Line(C, D), Line(C, line_intersection(f, i)))
By concurrent_sufficient_conditions on f, h, median(D, A, C) we get concurrent(f, h, median(D, A, C))
By aa_anti_similarity on E, midpoint(A, C), F, D, midpoint(A, C), F we get anti_similar_triangles(D, F, midpoint(A, C), E, F, midpoint(A, C))
By sas_anti_congruence on D, F, midpoint(A, C), E, F, midpoint(A, C) we get anti_congruent_triangles(D, F, midpoint(A, C), E, F, midpoint(A, C))
By aa_anti_similarity on C, F, line_intersection(f, i), A, F, line_intersection(f, i) we get anti_similar_triangles(A, F, line_intersection(f, i), C, F, line_intersection(f, i))
By sas_anti_congruence on midpoint(A, C), F, D, midpoint(A, C), F, E we get anti_congruent_triangles(D, F, midpoint(A, C), E, F, midpoint(A, C))
By aa_anti_similarity on C, line_intersection(f, i), F, A, line_intersection(f, i), F we get anti_similar_triangles(A, F, line_intersection(f, i), C, F, line_intersection(f, i))
By aa_anti_similarity on A, F, line_intersection(f, i), C, F, line_intersection(f, i) we get anti_similar_triangles(A, F, line_intersection(f, i), C, F, line_intersection(f, i))
By aa_anti_similarity on D, midpoint(A, C), line_intersection(f, i), E, midpoint(A, C), line_intersection(f, i) we get anti_similar_triangles(D, midpoint(A, C), line_intersection(f, i), E, midpoint(A, C), line_intersection(f, i))
By aa_anti_similarity on C, midpoint(A, C), line_intersection(f, i), A, midpoint(A, C), line_intersection(f, i) we get anti_similar_triangles(A, midpoint(A, C), line_intersection(f, i), C, midpoint(A, C), line_intersection(f, i))
By asa_anti_congruence on midpoint(A, C), F, E, midpoint(A, C), F, D we get anti_congruent_triangles(D, F, midpoint(A, C), E, F, midpoint(A, C))
By aa_anti_similarity on D, F, line_intersection(f, i), E, F, line_intersection(f, i) we get anti_similar_triangles(D, F, line_intersection(f, i), E, F, line_intersection(f, i))
By sas_anti_congruence on E, midpoint(A, C), F, D, midpoint(A, C), F we get anti_congruent_triangles(D, F, midpoint(A, C), E, F, midpoint(A, C))
By aa_anti_similarity on C, line_intersection(f, i), midpoint(A, C), A, line_intersection(f, i), midpoint(A, C) we get anti_similar_triangles(A, midpoint(A, C), line_intersection(f, i), C, midpoint(A, C), line_intersection(f, i))
By sas_anti_similarity on D, F, midpoint(A, C), E, F, midpoint(A, C) we get anti_similar_triangles(D, F, midpoint(A, C), E, F, midpoint(A, C))
By sas_anti_congruence on E, F, midpoint(A, C), D, F, midpoint(A, C) we get anti_congruent_triangles(D, F, midpoint(A, C), E, F, midpoint(A, C))
By sas_anti_congruence on midpoint(A, C), F, E, midpoint(A, C), F, D we get anti_congruent_triangles(D, F, midpoint(A, C), E, F, midpoint(A, C))
By aa_anti_similarity on A, midpoint(A, C), line_intersection(f, i), C, midpoint(A, C), line_intersection(f, i) we get anti_similar_triangles(A, midpoint(A, C), line_intersection(f, i), C, midpoint(A, C), line_intersection(f, i))
By aa_anti_similarity on E, line_intersection(f, i), midpoint(A, C), D, line_intersection(f, i), midpoint(A, C) we get anti_similar_triangles(D, midpoint(A, C), line_intersection(f, i), E, midpoint(A, C), line_intersection(f, i))
By sas_anti_congruence on F, midpoint(A, C), D, F, midpoint(A, C), E we get anti_congruent_triangles(D, F, midpoint(A, C), E, F, midpoint(A, C))
By sas_anti_similarity on midpoint(A, C), F, E, midpoint(A, C), F, D we get anti_similar_triangles(D, F, midpoint(A, C), E, F, midpoint(A, C))
By sas_anti_similarity on E, F, midpoint(A, C), D, F, midpoint(A, C) we get anti_similar_triangles(D, F, midpoint(A, C), E, F, midpoint(A, C))
By sas_anti_congruence on F, midpoint(A, C), E, F, midpoint(A, C), D we get anti_congruent_triangles(D, F, midpoint(A, C), E, F, midpoint(A, C))
By aa_anti_similarity on E, midpoint(A, C), line_intersection(f, i), D, midpoint(A, C), line_intersection(f, i) we get anti_similar_triangles(D, midpoint(A, C), line_intersection(f, i), E, midpoint(A, C), line_intersection(f, i))
By asa_anti_congruence on midpoint(A, C), F, D, midpoint(A, C), F, E we get anti_congruent_triangles(D, F, midpoint(A, C), E, F, midpoint(A, C))
By aa_anti_similarity on D, line_intersection(f, i), F, E, line_intersection(f, i), F we get anti_similar_triangles(D, F, line_intersection(f, i), E, F, line_intersection(f, i))
By asa_anti_congruence on F, midpoint(A, C), D, F, midpoint(A, C), E we get anti_congruent_triangles(D, F, midpoint(A, C), E, F, midpoint(A, C))
By asa_anti_congruence on F, midpoint(A, C), E, F, midpoint(A, C), D we get anti_congruent_triangles(D, F, midpoint(A, C), E, F, midpoint(A, C))
By sas_anti_similarity on midpoint(A, C), F, D, midpoint(A, C), F, E we get anti_similar_triangles(D, F, midpoint(A, C), E, F, midpoint(A, C))
By aa_anti_similarity on E, F, midpoint(A, C), D, F, midpoint(A, C) we get anti_similar_triangles(D, F, midpoint(A, C), E, F, midpoint(A, C))
By sas_anti_congruence on D, midpoint(A, C), F, E, midpoint(A, C), F we get anti_congruent_triangles(D, F, midpoint(A, C), E, F, midpoint(A, C))
By aa_anti_similarity on E, line_intersection(f, i), F, D, line_intersection(f, i), F we get anti_similar_triangles(D, F, line_intersection(f, i), E, F, line_intersection(f, i))
By aa_anti_similarity on D, line_intersection(f, i), midpoint(A, C), E, line_intersection(f, i), midpoint(A, C) we get anti_similar_triangles(D, midpoint(A, C), line_intersection(f, i), E, midpoint(A, C), line_intersection(f, i))
By aa_anti_similarity on E, F, line_intersection(f, i), D, F, line_intersection(f, i) we get anti_similar_triangles(D, F, line_intersection(f, i), E, F, line_intersection(f, i))
By aa_anti_similarity on D, F, midpoint(A, C), E, F, midpoint(A, C) we get anti_similar_triangles(D, F, midpoint(A, C), E, F, midpoint(A, C))
By aa_anti_similarity on A, line_intersection(f, i), F, C, line_intersection(f, i), F we get anti_similar_triangles(A, F, line_intersection(f, i), C, F, line_intersection(f, i))
By aa_anti_similarity on D, midpoint(A, C), F, E, midpoint(A, C), F we get anti_similar_triangles(D, F, midpoint(A, C), E, F, midpoint(A, C))
By aa_anti_similarity on A, line_intersection(f, i), midpoint(A, C), C, line_intersection(f, i), midpoint(A, C) we get anti_similar_triangles(A, midpoint(A, C), line_intersection(f, i), C, midpoint(A, C), line_intersection(f, i))
By anti_similar_triangle_basic_properties on A, C, line_intersection(f, i), C, A, line_intersection(f, i) we get angle(A, C, line_intersection(f, i)) == 0 - angle(C, A, line_intersection(f, i)) mod 360, angle(C, line_intersection(f, i), A) == 0 - angle(A, line_intersection(f, i), C) mod 360, angle(line_intersection(f, i), A, C) == 0 - angle(line_intersection(f, i), C, A) mod 360, log(distance(A, C)) + log(distance(A, line_intersection(f, i))) == log(distance(A, C)) + log(distance(C, line_intersection(f, i))), log(distance(A, line_intersection(f, i))) + log(distance(A, line_intersection(f, i))) == log(distance(C, line_intersection(f, i))) + log(distance(C, line_intersection(f, i))), log(distance(A, line_intersection(f, i))) + log(distance(A, C)) == log(distance(C, line_intersection(f, i))) + log(distance(A, C))
By anti_similar_triangle_basic_properties on E, line_intersection(f, i), D, D, line_intersection(f, i), E we get angle(E, line_intersection(f, i), D) == 0 - angle(D, line_intersection(f, i), E) mod 360, angle(line_intersection(f, i), D, E) == 0 - angle(line_intersection(f, i), E, D) mod 360, angle(D, E, line_intersection(f, i)) == 0 - angle(E, D, line_intersection(f, i)) mod 360, log(distance(D, line_intersection(f, i))) + log(distance(D, line_intersection(f, i))) == log(distance(E, line_intersection(f, i))) + log(distance(E, line_intersection(f, i))), log(distance(D, line_intersection(f, i))) + log(distance(D, E)) == log(distance(E, line_intersection(f, i))) + log(distance(D, E)), log(distance(D, E)) + log(distance(D, line_intersection(f, i))) == log(distance(D, E)) + log(distance(E, line_intersection(f, i)))
By anti_similar_triangle_basic_properties on E, D, midpoint(A, C), D, E, midpoint(A, C) we get angle(E, D, midpoint(A, C)) == 0 - angle(D, E, midpoint(A, C)) mod 360, angle(D, midpoint(A, C), E) == 0 - angle(E, midpoint(A, C), D) mod 360, angle(midpoint(A, C), E, D) == 0 - angle(midpoint(A, C), D, E) mod 360, log(distance(D, E)) + log(distance(D, midpoint(A, C))) == log(distance(D, E)) + log(distance(E, midpoint(A, C))), log(distance(D, midpoint(A, C))) + log(distance(D, midpoint(A, C))) == log(distance(E, midpoint(A, C))) + log(distance(E, midpoint(A, C))), log(distance(D, midpoint(A, C))) + log(distance(D, E)) == log(distance(E, midpoint(A, C))) + log(distance(D, E))
By sas_similarity on A, line_intersection(f, i), C, D, line_intersection(f, i), E we get similar_triangles(A, C, line_intersection(f, i), D, E, line_intersection(f, i))
By sas_similarity on C, line_intersection(f, i), A, E, line_intersection(f, i), D we get similar_triangles(A, C, line_intersection(f, i), D, E, line_intersection(f, i))
By sas_similarity on D, line_intersection(f, i), E, A, line_intersection(f, i), C we get similar_triangles(A, C, line_intersection(f, i), D, E, line_intersection(f, i))
By sas_anti_similarity on D, line_intersection(f, i), E, C, line_intersection(f, i), A we get anti_similar_triangles(A, C, line_intersection(f, i), E, D, line_intersection(f, i))
By sas_anti_similarity on A, line_intersection(f, i), C, E, line_intersection(f, i), D we get anti_similar_triangles(A, C, line_intersection(f, i), E, D, line_intersection(f, i))
By sas_anti_similarity on C, line_intersection(f, i), A, D, line_intersection(f, i), E we get anti_similar_triangles(A, C, line_intersection(f, i), E, D, line_intersection(f, i))
By sas_anti_similarity on E, line_intersection(f, i), D, A, line_intersection(f, i), C we get anti_similar_triangles(A, C, line_intersection(f, i), E, D, line_intersection(f, i))
By sas_similarity on E, line_intersection(f, i), D, C, line_intersection(f, i), A we get similar_triangles(A, C, line_intersection(f, i), D, E, line_intersection(f, i))
By anti_similar_triangle_basic_properties on F, line_intersection(f, i), E, F, line_intersection(f, i), D we get angle(F, line_intersection(f, i), E) == 0 - angle(F, line_intersection(f, i), D) mod 360, angle(line_intersection(f, i), E, F) == 0 - angle(line_intersection(f, i), D, F) mod 360, angle(E, F, line_intersection(f, i)) == 0 - angle(D, F, line_intersection(f, i)) mod 360, log(distance(F, line_intersection(f, i))) + log(distance(D, line_intersection(f, i))) == log(distance(F, line_intersection(f, i))) + log(distance(E, line_intersection(f, i))), log(distance(D, line_intersection(f, i))) + log(distance(E, F)) == log(distance(E, line_intersection(f, i))) + log(distance(D, F)), log(distance(D, F)) + log(distance(F, line_intersection(f, i))) == log(distance(E, F)) + log(distance(F, line_intersection(f, i)))
By anti_similar_triangle_basic_properties on line_intersection(f, i), A, F, line_intersection(f, i), C, F we get angle(line_intersection(f, i), A, F) == 0 - angle(line_intersection(f, i), C, F) mod 360, angle(A, F, line_intersection(f, i)) == 0 - angle(C, F, line_intersection(f, i)) mod 360, angle(F, line_intersection(f, i), A) == 0 - angle(F, line_intersection(f, i), C) mod 360, log(distance(A, line_intersection(f, i))) + log(distance(C, F)) == log(distance(C, line_intersection(f, i))) + log(distance(A, F)), log(distance(A, F)) + log(distance(F, line_intersection(f, i))) == log(distance(C, F)) + log(distance(F, line_intersection(f, i))), log(distance(F, line_intersection(f, i))) + log(distance(A, line_intersection(f, i))) == log(distance(F, line_intersection(f, i))) + log(distance(C, line_intersection(f, i)))
By anti_similar_triangle_basic_properties on midpoint(A, C), E, line_intersection(f, i), midpoint(A, C), D, line_intersection(f, i) we get angle(midpoint(A, C), E, line_intersection(f, i)) == 0 - angle(midpoint(A, C), D, line_intersection(f, i)) mod 360, angle(E, line_intersection(f, i), midpoint(A, C)) == 0 - angle(D, line_intersection(f, i), midpoint(A, C)) mod 360, angle(line_intersection(f, i), midpoint(A, C), E) == 0 - angle(line_intersection(f, i), midpoint(A, C), D) mod 360, log(distance(D, midpoint(A, C))) + log(distance(E, line_intersection(f, i))) == log(distance(E, midpoint(A, C))) + log(distance(D, line_intersection(f, i))), log(distance(D, line_intersection(f, i))) + log(distance(midpoint(A, C), line_intersection(f, i))) == log(distance(E, line_intersection(f, i))) + log(distance(midpoint(A, C), line_intersection(f, i))), log(distance(midpoint(A, C), line_intersection(f, i))) + log(distance(D, midpoint(A, C))) == log(distance(midpoint(A, C), line_intersection(f, i))) + log(distance(E, midpoint(A, C)))
By anti_similar_triangle_basic_properties on A, line_intersection(f, i), midpoint(A, C), C, line_intersection(f, i), midpoint(A, C) we get angle(A, line_intersection(f, i), midpoint(A, C)) == 0 - angle(C, line_intersection(f, i), midpoint(A, C)) mod 360, angle(line_intersection(f, i), midpoint(A, C), A) == 0 - angle(line_intersection(f, i), midpoint(A, C), C) mod 360, angle(midpoint(A, C), A, line_intersection(f, i)) == 0 - angle(midpoint(A, C), C, line_intersection(f, i)) mod 360, log(distance(A, line_intersection(f, i))) + log(distance(midpoint(A, C), line_intersection(f, i))) == log(distance(C, line_intersection(f, i))) + log(distance(midpoint(A, C), line_intersection(f, i))), log(distance(midpoint(A, C), line_intersection(f, i))) + log(distance(A, midpoint(A, C))) == log(distance(midpoint(A, C), line_intersection(f, i))) + log(distance(C, midpoint(A, C))), log(distance(A, midpoint(A, C))) + log(distance(C, line_intersection(f, i))) == log(distance(C, midpoint(A, C))) + log(distance(A, line_intersection(f, i)))
By same_angle_converse_v0 on line_intersection(f, i), E, C, F we get collinear(C, E, line_intersection(f, i))
By similar_triangle_basic_properties on C, line_intersection(f, i), A, E, line_intersection(f, i), D we get angle(C, line_intersection(f, i), A) == angle(E, line_intersection(f, i), D) mod 360, angle(line_intersection(f, i), A, C) == angle(line_intersection(f, i), D, E) mod 360, angle(A, C, line_intersection(f, i)) == angle(D, E, line_intersection(f, i)) mod 360, log(distance(C, line_intersection(f, i))) + log(distance(D, line_intersection(f, i))) == log(distance(E, line_intersection(f, i))) + log(distance(A, line_intersection(f, i))), log(distance(A, line_intersection(f, i))) + log(distance(D, E)) == log(distance(D, line_intersection(f, i))) + log(distance(A, C)), log(distance(A, C)) + log(distance(E, line_intersection(f, i))) == log(distance(D, E)) + log(distance(C, line_intersection(f, i)))
By similar_triangle_basic_properties on line_intersection(f, i), E, D, line_intersection(f, i), C, A we get angle(line_intersection(f, i), C, A) == angle(line_intersection(f, i), E, D) mod 360, angle(C, A, line_intersection(f, i)) == angle(E, D, line_intersection(f, i)) mod 360, angle(A, line_intersection(f, i), C) == angle(D, line_intersection(f, i), E) mod 360, log(distance(C, line_intersection(f, i))) + log(distance(D, E)) == log(distance(E, line_intersection(f, i))) + log(distance(A, C)), log(distance(A, C)) + log(distance(D, line_intersection(f, i))) == log(distance(D, E)) + log(distance(A, line_intersection(f, i))), log(distance(A, line_intersection(f, i))) + log(distance(E, line_intersection(f, i))) == log(distance(D, line_intersection(f, i))) + log(distance(C, line_intersection(f, i)))
By anti_similar_triangle_basic_properties on line_intersection(f, i), E, D, line_intersection(f, i), A, C we get angle(line_intersection(f, i), E, D) == 0 - angle(line_intersection(f, i), A, C) mod 360, angle(E, D, line_intersection(f, i)) == 0 - angle(A, C, line_intersection(f, i)) mod 360, angle(D, line_intersection(f, i), E) == 0 - angle(C, line_intersection(f, i), A) mod 360, log(distance(A, line_intersection(f, i))) + log(distance(D, E)) == log(distance(E, line_intersection(f, i))) + log(distance(A, C)), log(distance(A, C)) + log(distance(D, line_intersection(f, i))) == log(distance(D, E)) + log(distance(C, line_intersection(f, i))), log(distance(C, line_intersection(f, i))) + log(distance(E, line_intersection(f, i))) == log(distance(D, line_intersection(f, i))) + log(distance(A, line_intersection(f, i)))
By anti_similar_triangle_basic_properties on E, line_intersection(f, i), D, A, line_intersection(f, i), C we get angle(E, line_intersection(f, i), D) == 0 - angle(A, line_intersection(f, i), C) mod 360, angle(line_intersection(f, i), D, E) == 0 - angle(line_intersection(f, i), C, A) mod 360, angle(D, E, line_intersection(f, i)) == 0 - angle(C, A, line_intersection(f, i)) mod 360, log(distance(A, line_intersection(f, i))) + log(distance(D, line_intersection(f, i))) == log(distance(E, line_intersection(f, i))) + log(distance(C, line_intersection(f, i))), log(distance(C, line_intersection(f, i))) + log(distance(D, E)) == log(distance(D, line_intersection(f, i))) + log(distance(A, C)), log(distance(A, C)) + log(distance(E, line_intersection(f, i))) == log(distance(D, E)) + log(distance(A, line_intersection(f, i)))
By internal_angle_bisector_definition_v0_r on A, F, E, line_intersection(f, i) we get Line(F, line_intersection(f, i)) == internal_angle_bisector(A, line_intersection(f, i), E)
By internal_angle_bisector_definition_v0_r on D, F, C, line_intersection(f, i) we get Line(F, line_intersection(f, i)) == internal_angle_bisector(C, line_intersection(f, i), D)
By internal_angle_bisector_definition_v0_r on A, midpoint(A, C), E, line_intersection(f, i) we get Line(midpoint(A, C), line_intersection(f, i)) == internal_angle_bisector(A, line_intersection(f, i), E)
By internal_angle_bisector_definition_v0_r on C, midpoint(A, C), D, line_intersection(f, i) we get Line(midpoint(A, C), line_intersection(f, i)) == internal_angle_bisector(C, line_intersection(f, i), D)
By internal_angle_bisector_definition_v0_r on D, B, A, line_intersection(f, i) we get Line(B, line_intersection(f, i)) == internal_angle_bisector(A, line_intersection(f, i), D)
By sas_similarity on F, E, line_intersection(f, i), midpoint(A, C), C, line_intersection(f, i) we get similar_triangles(C, midpoint(A, C), line_intersection(f, i), E, F, line_intersection(f, i))
By sas_anti_similarity on midpoint(A, C), A, line_intersection(f, i), F, E, line_intersection(f, i) we get anti_similar_triangles(A, midpoint(A, C), line_intersection(f, i), E, F, line_intersection(f, i))
By sas_similarity on F, D, line_intersection(f, i), midpoint(A, C), A, line_intersection(f, i) we get similar_triangles(A, midpoint(A, C), line_intersection(f, i), D, F, line_intersection(f, i))
By collinear_definition on line_intersection(f, i), E, C we get E in Line(C, line_intersection(f, i)), C in Line(E, line_intersection(f, i)), Line(C, line_intersection(f, i)) == Line(E, line_intersection(f, i)), 0 == 2 * angle(E, line_intersection(f, i), C) mod 360
By sas_anti_similarity on line_intersection(f, i), A, midpoint(A, C), line_intersection(f, i), E, F we get anti_similar_triangles(A, midpoint(A, C), line_intersection(f, i), E, F, line_intersection(f, i))
By sas_anti_similarity on line_intersection(f, i), C, midpoint(A, C), line_intersection(f, i), D, F we get anti_similar_triangles(C, midpoint(A, C), line_intersection(f, i), D, F, line_intersection(f, i))
By sas_similarity on line_intersection(f, i), A, midpoint(A, C), line_intersection(f, i), D, F we get similar_triangles(A, midpoint(A, C), line_intersection(f, i), D, F, line_intersection(f, i))
By sas_anti_similarity on F, D, line_intersection(f, i), midpoint(A, C), C, line_intersection(f, i) we get anti_similar_triangles(C, midpoint(A, C), line_intersection(f, i), D, F, line_intersection(f, i))
By sas_similarity on line_intersection(f, i), D, F, line_intersection(f, i), A, midpoint(A, C) we get similar_triangles(A, midpoint(A, C), line_intersection(f, i), D, F, line_intersection(f, i))
By sas_anti_similarity on F, E, line_intersection(f, i), midpoint(A, C), A, line_intersection(f, i) we get anti_similar_triangles(A, midpoint(A, C), line_intersection(f, i), E, F, line_intersection(f, i))
By sas_anti_similarity on midpoint(A, C), C, line_intersection(f, i), F, D, line_intersection(f, i) we get anti_similar_triangles(C, midpoint(A, C), line_intersection(f, i), D, F, line_intersection(f, i))
By sas_similarity on line_intersection(f, i), C, midpoint(A, C), line_intersection(f, i), E, F we get similar_triangles(C, midpoint(A, C), line_intersection(f, i), E, F, line_intersection(f, i))
By sas_similarity on midpoint(A, C), A, line_intersection(f, i), F, D, line_intersection(f, i) we get similar_triangles(A, midpoint(A, C), line_intersection(f, i), D, F, line_intersection(f, i))
By sas_anti_similarity on line_intersection(f, i), E, F, line_intersection(f, i), A, midpoint(A, C) we get anti_similar_triangles(A, midpoint(A, C), line_intersection(f, i), E, F, line_intersection(f, i))
By collinear_definition on C, E, line_intersection(f, i) we get E in Line(C, line_intersection(f, i)), line_intersection(f, i) in Line(C, E), Line(C, E) == Line(C, line_intersection(f, i)), 0 == 2 * angle(E, C, line_intersection(f, i)) mod 360
By sas_anti_similarity on line_intersection(f, i), D, F, line_intersection(f, i), C, midpoint(A, C) we get anti_similar_triangles(C, midpoint(A, C), line_intersection(f, i), D, F, line_intersection(f, i))
By collinear_definition on E, C, line_intersection(f, i) we get C in Line(E, line_intersection(f, i)), line_intersection(f, i) in Line(C, E), Line(C, E) == Line(E, line_intersection(f, i)), 0 == 2 * angle(C, E, line_intersection(f, i)) mod 360
By sas_similarity on midpoint(A, C), C, line_intersection(f, i), F, E, line_intersection(f, i) we get similar_triangles(C, midpoint(A, C), line_intersection(f, i), E, F, line_intersection(f, i))
By collinear_definition on C, line_intersection(f, i), E we get line_intersection(f, i) in Line(C, E), E in Line(C, line_intersection(f, i)), Line(C, E) == Line(C, line_intersection(f, i)), 0 == 2 * angle(line_intersection(f, i), C, E) mod 360
By sas_similarity on line_intersection(f, i), E, F, line_intersection(f, i), C, midpoint(A, C) we get similar_triangles(C, midpoint(A, C), line_intersection(f, i), E, F, line_intersection(f, i))
By collinear_definition on line_intersection(f, i), C, E we get C in Line(E, line_intersection(f, i)), E in Line(C, line_intersection(f, i)), Line(C, line_intersection(f, i)) == Line(E, line_intersection(f, i)), 0 == 2 * angle(C, line_intersection(f, i), E) mod 360
By collinear_definition on E, line_intersection(f, i), C we get line_intersection(f, i) in Line(C, E), C in Line(E, line_intersection(f, i)), Line(C, E) == Line(E, line_intersection(f, i)), 0 == 2 * angle(line_intersection(f, i), E, C) mod 360
