Assumptions:
A, B, C, D, E, F, G: Point
f, g: Line
c: Circle
distinct(A, B, C, D, E, F, G)
distinct(f, g)
f == Line(A, B)
c == Circle(A, B, C)
D == center(c)
g == external_angle_bisector(A, D, B)
E == projection(C, g)
F == projection(E, f)
G == midpoint(C, F)

Embedding:
C := {"x": "0.99983453703926661315648516392684541642665863037109375", "y": "0.58902312913740961786146499434835277497768402099609375"}
B := {"x": "-0.70812243518629613969750380420009605586528778076171875", "y": "0.637716408451203253804351334110833704471588134765625"}
A := {"x": "0.908114817405045737785940218600444495677947998046875", "y": "0.83118175408008732052422828928683884441852569580078125"}
c := {"center": {"x": "0.1398224169770639706353149029930081385281963656836269057003089465971486741710082789922534945551872722120748008067070784803138268677516761897641404082236316704691720733520400691915701973746653587953770395728254992919848487596971871600854996085427848851697552822363092479824464300918097300726512730949899523433897097572707430956548159554956716018851047376235179227702412641817427901015065380395044263849930210587874566590907180036749536526720816796637259128695671522385598172852245147659383833773115599894236398197369433169384651196267469486924971610986265998237099191935091644894368307625940423723101331316526788814063259210085996679215579412102991138493562017319981472958912710348829704064164374320061168509930221324725936326869373627221923574089513979154378938897942815889368746347763468417831304908892157804574209309583771989013062381028936196773685920316815573724327772827140658224953578433476666688267476544146455136844152366873283523154301500683350976218330435065407743894627038714311758141942087773387888415225178506660651485145356438594065675194506279830917826100012229467000995880146585804005144837092955648678083563555445424877145171591137188405255884332273685540154242899619354779553430313499560967363565176236864127439225313100680792108462447988971363756315568248471496010404904114237893921200796925005408367513263489104720665877591737356126369782050737085939670107966851492155615543216382659696693746359704036210791161396329903525391871243499096542979366936840711542777449271960560287927161697767047941982629620478260061540512107153349623895738681245848500720409858395538890734173440480651947653488965108730792340466182930360448302597069023913755930686083399010993941317882998910242183497841056744653066500034579477544856315987973063263968380618159875790747984242312796324248265224179195070197897245114738473135862982581214983357380427725259722300796745088651953410463421184973823586736327513108773305543884590030832681385721331717756072908858512905682645708868722470092600587671842342768", "y": "0.40173507675885549878464911031145771437610862282005049885736121747668106390563582398759793060854550990336277530594578222566449114278682229893584173624848144118710730644381626080964590496822026536752859805247689148328782868706067521073283457259024656842334256061391801731032832749549109342141782834662409942942174673978747486819955175780719150287353409056455753655549914288546494954525539271810773143596960044488391130794615743327265253083971148179970345022869096820116818141558091215119042783164240060455331476320540946452312978373920284947029818584380817404828591629723128819605017608857926543885476989319259557240785648360184184117545419192225188681006378968649167892653006283373650953476292298985467989810327267118019108243694887542650339339384835188452003508083615062893511501814705054821366630356047829594062945760180650313436997649665318493356239591170607470755941365611082130313036828956129275890796034894208717638852633754454256546279829500309506548205939177396076443165472382859732108922617386904517155480171080583305941466782207437319812289559965729305086376132705858673415715899392361722113593048876699379066433739651907371657875649549994364178355836593862235054773723729783248979046305793125909255762392646894887496905451435635532104145918627782221620239454768175445657120278054577928709945075135851358955527651243161801770553418328855690056254228884117626475231365990713816534804240069873789402961605023581123433812081587212961626204065264889138406207150980162293976711157822529643593187390216290061678040436984422713410485061328037619857100238439774608403291567806086651985576187880227979762808797290404420528110516223754057706925631292176953385312417979640174846059662756354057026489984903166443985928407856985567490520900819753128169792816178842270443344645535851149239314223170993157915354032452908157428769178828235662246600777822790927853414312704980730855022873406789041654521743044711556938350121325198844926916887031672306271861328529784614947654781688956900734398797952789561644"}, "radius_squared": "0.77469766121763648415258572234782169647288656191069081858338576676241353205438246950842385965476208479943871652094161608116692111945478230300711698813956698988116711277226898357587126669905960934430288049117745691362332946066637143113428767394903823425190247025189094529156494402804550221344084670429340175012224960415152919842907196627850947828816228495866947232454578865002740197497078929867613380691791813436766434224478625725530994913379365232661286446346622337963176823620801699692941437838674371316823961443720171709492015613997139012755369717250487053423935132494131868730018760083120492495236129478564953283439419095697987158434121472503796474574262642021606010713772684927040990487620494123738321805986718940317483940022464422874726894411306025089012451908321494292195221365775074417146435802478059092008113707642594448018220074559643829294719457685193300968415312744128905222327536371308987176710726967292800537981770756127051599732429055005338920558212403803055221499910479750675497320338519215822084452419094075439725321105510767254933036021152879596187846879618815870072391350807574709334977581941752319498899636344447132766990249265620894525090012390384468491098800444823476503037890169668609981527098571282563469586194113957294742196099883359782803090388143305609528888695538803201914470453730344282318039757755458864701272007883843741864768531567858964389121715264778236291691083484611247859364978412193229347315401020660583831366025834362497436212764003967453360804462540802467230507761667268489912628975184287260816557306220217836684573740333649443090143805515248333558436497927163059666954578989405415011369782389456725319309971310721058073240554479634939863018468553923856364975019653081161472595221152219193398999521187822846794022624923262877411792412163553314387456772315309926867037135581675234902291410949618137658562385560615629178680916050209459286535818787129725077912872874516510799767368958765369828153088831439749132786999240799219291714290345465187044532096047355696187"}
D := {"x": "0.1398224169770639706353149029930081385281963656836269057003089465971486741710082789922534945551872722120748008067070784803138268677516761897641404082236316704691720733520400691915701973746653587953770395728254992919848487596971871600854996085427848851697552822363092479824464300918097300726512730949899523433897097572707430956548159554956716018851047376235179227702412641817427901015065380395044263849930210587874566590907180036749536526720816796637259128695671522385598172852245147659383833773115599894236398197369433169384651196267469486924971610986265998237099191935091644894368307625940423723101331316526788814063259210085996679215579412102991138493562017319981472958912710348829704064164374320061168509930221324725936326869373627221923574089513979154378938897942815889368746347763468417831304908892157804574209309583771989013062381028936196773685920316815573724327772827140658224953578433476666688267476544146455136844152366873283523154301500683350976218330435065407743894627038714311758141942087773387888415225178506660651485145356438594065675194506279830917826100012229467000995880146585804005144837092955648678083563555445424877145171591137188405255884332273685540154242899619354779553430313499560967363565176236864127439225313100680792108462447988971363756315568248471496010404904114237893921200796925005408367513263489104720665877591737356126369782050737085939670107966851492155615543216382659696693746359704036210791161396329903525391871243499096542979366936840711542777449271960560287927161697767047941982629620478260061540512107153349623895738681245848500720409858395538890734173440480651947653488965108730792340466182930360448302597069023913755930686083399010993941317882998910242183497841056744653066500034579477544856315987973063263968380618159875790747984242312796324248265224179195070197897245114738473135862982581214983357380427725259722300796745088651953410463421184973823586736327513108773305543884590030832681385721331717756072908858512905682645708868722470092600587671842342768", "y": "0.40173507675885549878464911031145771437610862282005049885736121747668106390563582398759793060854550990336277530594578222566449114278682229893584173624848144118710730644381626080964590496822026536752859805247689148328782868706067521073283457259024656842334256061391801731032832749549109342141782834662409942942174673978747486819955175780719150287353409056455753655549914288546494954525539271810773143596960044488391130794615743327265253083971148179970345022869096820116818141558091215119042783164240060455331476320540946452312978373920284947029818584380817404828591629723128819605017608857926543885476989319259557240785648360184184117545419192225188681006378968649167892653006283373650953476292298985467989810327267118019108243694887542650339339384835188452003508083615062893511501814705054821366630356047829594062945760180650313436997649665318493356239591170607470755941365611082130313036828956129275890796034894208717638852633754454256546279829500309506548205939177396076443165472382859732108922617386904517155480171080583305941466782207437319812289559965729305086376132705858673415715899392361722113593048876699379066433739651907371657875649549994364178355836593862235054773723729783248979046305793125909255762392646894887496905451435635532104145918627782221620239454768175445657120278054577928709945075135851358955527651243161801770553418328855690056254228884117626475231365990713816534804240069873789402961605023581123433812081587212961626204065264889138406207150980162293976711157822529643593187390216290061678040436984422713410485061328037619857100238439774608403291567806086651985576187880227979762808797290404420528110516223754057706925631292176953385312417979640174846059662756354057026489984903166443985928407856985567490520900819753128169792816178842270443344645535851149239314223170993157915354032452908157428769178828235662246600777822790927853414312704980730855022873406789041654521743044711556938350121325198844926916887031672306271861328529784614947654781688956900734398797952789561644"}
g := {"point": {"x": "0.1398224169770639706353149029930081385281963656836269057003089465971486741710082789922534945551872722120748008067070784803138268677516761897641404082236316704691720733520400691915701973746653587953770395728254992919848487596971871600854996085427848851697552822363092479824464300918097300726512730949899523433897097572707430956548159554956716018851047376235179227702412641817427901015065380395044263849930210587874566590907180036749536526720816796637259128695671522385598172852245147659383833773115599894236398197369433169384651196267469486924971610986265998237099191935091644894368307625940423723101331316526788814063259210085996679215579412102991138493562017319981472958912710348829704064164374320061168509930221324725936326869373627221923574089513979154378938897942815889368746347763468417831304908892157804574209309583771989013062381028936196773685920316815573724327772827140658224953578433476666688267476544146455136844152366873283523154301500683350976218330435065407743894627038714311758141942087773387888415225178506660651485145356438594065675194506279830917826100012229467000995880146585804005144837092955648678083563555445424877145171591137188405255884332273685540154242899619354779553430313499560967363565176236864127439225313100680792108462447988971363756315568248471496010404904114237893921200796925005408367513263489104720665877591737356126369782050737085939670107966851492155615543216382659696693746359704036210791161396329903525391871243499096542979366936840711542777449271960560287927161697767047941982629620478260061540512107153349623895738681245848500720409858395538890734173440480651947653488965108730792340466182930360448302597069023913755930686083399010993941317882998910242183497841056744653066500034579477544856315987973063263968380618159875790747984242312796324248265224179195070197897245114738473135862982581214983357380427725259722300796745088651953410463421184973823586736327513108773305543884590030832681385721331717756072908858512905682645708868722470092600587671842342768", "y": "0.40173507675885549878464911031145771437610862282005049885736121747668106390563582398759793060854550990336277530594578222566449114278682229893584173624848144118710730644381626080964590496822026536752859805247689148328782868706067521073283457259024656842334256061391801731032832749549109342141782834662409942942174673978747486819955175780719150287353409056455753655549914288546494954525539271810773143596960044488391130794615743327265253083971148179970345022869096820116818141558091215119042783164240060455331476320540946452312978373920284947029818584380817404828591629723128819605017608857926543885476989319259557240785648360184184117545419192225188681006378968649167892653006283373650953476292298985467989810327267118019108243694887542650339339384835188452003508083615062893511501814705054821366630356047829594062945760180650313436997649665318493356239591170607470755941365611082130313036828956129275890796034894208717638852633754454256546279829500309506548205939177396076443165472382859732108922617386904517155480171080583305941466782207437319812289559965729305086376132705858673415715899392361722113593048876699379066433739651907371657875649549994364178355836593862235054773723729783248979046305793125909255762392646894887496905451435635532104145918627782221620239454768175445657120278054577928709945075135851358955527651243161801770553418328855690056254228884117626475231365990713816534804240069873789402961605023581123433812081587212961626204065264889138406207150980162293976711157822529643593187390216290061678040436984422713410485061328037619857100238439774608403291567806086651985576187880227979762808797290404420528110516223754057706925631292176953385312417979640174846059662756354057026489984903166443985928407856985567490520900819753128169792816178842270443344645535851149239314223170993157915354032452908157428769178828235662246600777822790927853414312704980730855022873406789041654521743044711556938350121325198844926916887031672306271861328529784614947654781688956900734398797952789561644"}, "direction": {"x": "1.8362803639112025929085838076121947014856707864351695497150634382986566980158397610775760676652303840847170542433924202876542917901302992863327125047290977359119761822833794792892898893816793839078080545731327527976778695309769966921434676179134275569543723577151359023460609446658618467896733921956907906045700508037031736220250342800168133274564052732579979772541812486393305796239181773725022179504837900848407871035781344751991170666338151348544871813102012605527887330143290422820269304318877985077456005329969534833038551923477591635127445531620536060602387721044107120527955808970175622130163698944642518439391284247387765872147432323447029209762491977419713062155000367673000661160985315840578466241230561038575397418154173010864060926231536600718609425940475662469833109955220449426243526806813734336568617817442737659960665666277251638182361192536309283158918181618272269970355969671851327431938092733370941752774114748246129446122145483234307347328214805297614841750167678984762987864560199504593341508969674906189089505525696758192471600107701725017794048673084364636371280259491020371466217644436252561022978345876871859052917580092250474338982718665609772743321207887981204526262205256719713110791834349465754051816520536649285016124628788212494860295734670117969322409680051059383530023731782745563455214454697997399792966195725132611146450880039581013442911892607185439477080466528181911205761990074316318137126113726634607575675887271982969015297963170350453808223872654929635994842248422190184671051178716628313026685220377013055963840681939402782862628070479816591139806501549846616872828617749604713462532419203298607125582464681205787480686199742839311059711423647110330372367130979077043393624658857035133469731314489606095689397648667281545562461868737698350389299692119458117395252907231652329494767727376915622647145894871747594548108349220368128542531450914170297963827360970772292968013972347252138046593200784431981956554691530032898243693574903398711265794306964772987392", "y": "0.21980474383078634299391939183004011101515742612497950690286836812886268834014563494657171947814813374280756488302604829073738481311952258308927258197952766799707818129608568867262433112524045682780891671474291771341200294653452078211658244977495093218673426985690668789843420384433181737764694314628072406220308904322431226942060965194356008202848645918352935085379728657782550636146645850103648385070896584187244639691186402986356299532889794962971765774188404039538478576668419022536993937507529984138406455195403869918692404481564815914255780683699891303521722615737626678450474801230792090853549395305029514180989933777237892615736418445266531791774270962790233266074615267139885713782090467587835713995964122362714758832756808967083508004358926675933684691000680755311266782056858004633057933799188137237284072124415376314729319826752259581642327002947517277888618662451883168385606045017615485152700246662755434066629479170078253528761587318859810298580526188003612450125396597079330490519480973899997454672000700930723966166749107543956174081267306555207997831990309016156174961520984048274924817784630812446528724278866047028406496507940600124495341649785665028129169633079453073092972959613180302538721608170614668761202419085096417948513456435572451438975122322908570402231927282584964465041670664229754436585199544117631100312850150451310342339653566699988878605908414064514885410099403365587400515672566067176222017017938940791018232598573197165387671543508756107293845894572901423790165881834536547440963964847404832441503633565797719776514181498112343384766354029260182482827106280124377383809933785996252980216451793533532765255852023431238133275468909875713470258220609742031929553190190212609980058552653448970220913768626644285415280326993187702066634947306790221536998997319809466838673456254237672149577618628665714538406869335586519741824966187713569127948804145148528621764637603361448262868575280632070217647012010202545575389137946380700422457970441726183672210151962384427526"}}
f := {"point": {"x": "0.908114817405045737785940218600444495677947998046875", "y": "0.83118175408008732052422828928683884441852569580078125"}, "direction": {"x": "-1.61623725259134187748344402280054055154323577880859375", "y": "-0.19346534562888406671987695517600513994693756103515625"}}
E := {"x": "1.0097879497843415350406114533318556682824489607187445170588572191167296234956892319986656269719776169311772364539384409828224770153367515724230623455611030407863191190992026410888620161240247411708562185582021643290165103981201797622803552631809573303763983002577991546203842195086937038195335241155433018839804361143458778840576828866470575841499009753401036863698730742221874743091618793159008841484386964886312048668213638671707909497023729705565934206539177973429513458376107365304173905284535408053412495171317518241202880956911027924916288560747221143301111856476643951667915796146704638823283267024399865995138986068609190241434047603193519762103118206172729573430005337016997371894360829813907646565917029427389635547420586055082042286096105155354475043539625095557596735444028252760918739079456370002932115219532634197437871639526251275796943894914810553291936680635449381361078159263222812508635510489615370963162853637063429446590109424213671837623801151338239052148538907653177093905033541685783461056096629199283484043223706741812085977871501559313383234149062371917302885475753072104098946493720485492185390342775713791418571014445262903495456885207609701295068343952817284749214944918478979299504393030911902571682571799603662894780693999628610474081080787012477053623229488478251878826552991984283610921660287525369267373227803012102006047173224543995453994103989015623569667633954898254301177541897173386675690330825773567748392945870880013147392038949211243988270046005539867555195666778972509028800918652552552811534288846025139899291876381846561907634273852819844176058028025848567823555537982249299015494502419474601426595604796726270278204430471413228743543069072961121871202848076564395102880519504789064718587733740606714551740604270829711265469469282599238599290929799892838620424619654977051446390729969407834030240413652682477305622422450384515413472354880397089686396601684282659883155803050810499216849733695697571396808685031057263523164015644946992467861814795583421266", "y": "0.50587089111403431798460208867032243836331703836276689367221722579377968444111787567989589090279472633929534553702795331441136051719819606960998512225080393034673496278280241106445594516478549122297212329640291422507318570770564598222976789538346178590830205886375552198094666834890180601963902431242761822191565283462063440447594896291201017442825432085386126067687207441537581376498320130425743487926161689567013165458056641677690372880920487139714021430124544321903729818328308080514078241255077323617885840036182270145490179889974116914230626948519365250580886075067048718751884388947708921477525211603936895941721278170476949537971278187281989383095397327195622100718835555679454878212337601244167136636979248258562606088501061329512215784459610464399405411407669991747342358999698842582530523223150918207653854427912915281920924600789774589093436126660445114547733722275221181863297038390799126775061074426947062495721058818268431480548000931691732493675788653365772494628921834907896435714378436871763308038446622461538307774126319734073973120177871258256221613250876479666167691968433517234928897970470083209708282356519742994575299289792387190845280019585064537492155486362997848464834780879794121639632901934053695849904273104425527812349907168028724346900467054555412335568961794017984613647343386400000108972149043388448831341008127745430576216214247012483555867548513205163156821773295313853288735291897126736166482086403562285097330628655921083934714629525137999420586608980365584539687534065511884363464827359201560186068428273469899979242856181682125664065031656921766677022556639663424053250216759807056929670025580235552714931198881602322459918289537869542159710574080555879989794704762701510102169167856222296527923999281233608854503845077450028341708430637860699799315703880185330778741701242940055728372453749820433306303685507470708504238064878749290502103812076546453757368686810508483063306372014547500490933380873487078167656305978335120476482649581601886554358027300092964242"}
F := {"x": "0.96996172391665236344951475753902174966058270367769573635854827251958094932468095300641213241679034471910243564723136250250865014758507538265892193733747137031714704574716257189729181874935938237547917898537666503703166163842299260219485565463817244520664301802148990663793778941688397374688225102055334954059072635707513478840286693115138598226479623771658576359963181004044468420765534127639645776344567542984374820773064586349583729703029129089286750778435064510439152855238622176447900715114198081591760969739480850718182297606435584379913169497609551450640126645415523067735474885207642151001819357078730771810757268585231935622184681910905286236095561888527481004710926266681676678301964554938464780559868081026636992205512124278601187120065911762000961046416822796682279890962647843430874341705642121983579059099488622084248092584973150790232579745979949795676089078083087231361245808297461458203680339454689158263187012701901459234358079235303208614054707162728313082539118689388653357630914539123955726408714506926228325580783503032180203026769952794824654080490501424503018895956064863000938016566275298435073067792202683665414258428541257150902010008753360157549141010531979299696615146049794183321408278546750384442433464865029821026722315516396391103247652187640055576128245843640139849053521950592782025541470240362645467073502112747458796773911738069095143239960221641314140520907385155946044837955374693504648991694294436642230010746273809166044126720123705324454925967335793072672685050812054610868182890320742927499937767388717902753961377006007134069138639944243052853238545853679158759020490171405682231540362365442409782930077277023565222737443880142177496017511899622116290193502355076504498140194702095871737314177526336512877722236526698354747214850402864422750426645757136435502267224098623129732548669868266190468830332249572175833216257052958634600618914592121158628098653567695511098502591662204683841683479743658536407357761725443578405183067762245223752612271237410784982", "y": "0.83858489562082410636424279005770099843226533082591951981485600831709862053548205169229796029424921643593257023108217108874686937441137377067414338600232248915962765633898615025481004019656522585544352524392602274178535702064497077149693332279321521748495949824983750467061834085341071259822119596580351879249390609483315953627639720510481867155472023028930372412137293152991086421972780858614970344329201645078622034663440898350425119796949338959743676407255447501786911676770216865395035458090837263162554363715641323693177201516053831967200808364138547845752294445343919899146866780089782377592048222284677338700935629810292765420425858995056800702089018358546454208065829272305803924736045302258699146826651981140543497844806173786861876445074775275947401903324054928853830857184993787761163892867103088613590908667732264968483926951124456095737196535489837643791792356664139051550260209434669850884265039532738344856868425063814174934268171431382225945469849475969696051463449452048164326791761049967246152558275541878232366307344112296754160830617905528951135237118170620992751976069041155512815304921593383830641848616867835622917423640242392826666924182991202302437381762633214599485788475086668212383870509287158808352998821668789995708203988540246502726661012286379966678448683739440055903702268250548641153444497800226647060787589798889740519961985362894857080636182522491346622017533225440063885773686873545612732670004816349323471126563391031945528507478544975705443875451157835940946500143849221822685424390374778846775583366945432280122142617741907517260773463850835114691446368759435444290441419469402636401559509356481495008005567589425369074605871558229367313650911324201822963304719859535066116240759999236729037403098461480480684711028898607757898363785102009550560001480709192172863387668790031898299603274921584771059702907684679780650823752173768559647080938669757412102846943765796926124956250689348655564016493841814771895794977448550505528827867892644985819959229347303402598"}
G := {"x": "0.98489813047795948830299996073293358304362066702439474317927413625979047466234047650320606620839517235955121782361568125125432507379253769132946096866873568515857352287358128594864590937467969118773958949268833251851583081921149630109742782731908622260332150901074495331896889470844198687344112551027667477029536317853756739420143346557569299113239811885829288179981590502022234210382767063819822888172283771492187410386532293174791864851514564544643375389217532255219576427619311088223950357557099040795880484869740425359091148803217792189956584748804775725320063322707761533867737442603821075500909678539365385905378634292615967811092340955452643118047780944263740502355463133340838339150982277469232390279934040513318496102756062139300593560032955881000480523208411398341139945481323921715437170852821060991789529549744311042124046292486575395116289872989974897838044539041543615680622904148730729101840169727344579131593506350950729617179039617651604307027353581364156541269559344694326678815457269561977863204357253463114162790391751516090101513384976397412327040245250712251509447978032431500469008283137649217536533896101341832707129214270628575451005004376680078774570505265989649848307573024897091660704139273375192221216732432514910513361157758198195551623826093820027788064122921820069924526760975296391012770735120181322733536751056373729398386955869034547571619980110820657070260453692577973022418977687346752324495847147218321115005373136904583022063360061852662227462983667896536336342525406027305434091445160371463749968883694358951376980688503003567034569319972121526426619272926839579379510245085702841115770181182721204891465038638511782611368721940071088748008755949811058145096751177538252249070097351047935868657088763168256438861118263349177373607425201432211375213322878568217751133612049311564866274334934133095234415166124786087916608128526479317300309457296060579314049326783847755549251295831102341920841739871829268203678880862721789202591533881122611876306135618705392491", "y": "0.71380401237911686211285389220302688670497467591100663490742800415854931026774102584614898014712460821796628511554108554437343468720568688533707169300116124457981382816949307512740502009828261292772176262196301137089267851032248538574846666139660760874247974912491875233530917042670535629911059798290175939624695304741657976813819860255240933577736011514465186206068646576495543210986390429307485172164600822539311017331720449175212559898474669479871838203627723750893455838385108432697517729045418631581277181857820661846588600758026915983600404182069273922876147222671959949573433390044891188796024111142338669350467814905146382710212929497528400351044509179273227104032914636152901962368022651129349573413325990570271748922403086893430938222537387637973700951662027464426915428592496893880581946433551544306795454333866132484241963475562228047868598267744918821895896178332069525775130104717334925442132519766369172428434212531907087467134085715691112972734924737984848025731724726024082163395880524983623076279137770939116183153672056148377080415308952764475567618559085310496375988034520577756407652460796691915320924308433917811458711820121196413333462091495601151218690881316607299742894237543334106191935254643579404176499410834394997854101994270123251363330506143189983339224341869720027951851134125274320576722248900113323530393794899444870259980992681447428540318091261245673311008766612720031942886843436772806366335002408174661735563281695515972764253739272487852721937725578917970473250071924610911342712195187389423387791683472716140061071308870953758630386731925417557345723184379717722145220709734701318200779754678240747504002783794712684537302935779114683656825455662100911481652359929767533058120379999618364518701549230740240342355514449303878949181892551004775280000740354596086431693834395015949149801637460792385529851453842339890325411876086884279823540469334878706051423471882898463062478125344674327782008246920907385947897488724275252764413933946322492909979614673651701299"}

Need to prove:
collinear(E, F, G)

Proof:
By line_definition on F, A, f we get f == Line(A, F)
By line_definition on C, E, perpendicular_line(C, g) we get Line(C, E) == perpendicular_line(C, g)
By line_definition on B, F, f we get f == Line(B, F)
By line_definition on D, E, g we get g == Line(D, E)
By line_definition on E, F, perpendicular_line(E, f) we get Line(E, F) == perpendicular_line(E, f)
By perpendicular_line_definition on D, g, perpendicular_line(C, g) we get g == perpendicular_line(D, perpendicular_line(C, g))
By perpendicular_line_definition on E, perpendicular_line(C, g), g we get perpendicular_line(C, g) == perpendicular_line(E, g)
By perpendicular_line_definition on B, f, perpendicular_line(E, f) we get f == perpendicular_line(B, perpendicular_line(E, f))
By perpendicular_line_definition on E, g, perpendicular_line(C, g) we get g == perpendicular_line(E, perpendicular_line(C, g))
By perpendicular_line_definition on A, f, perpendicular_line(E, f) we get f == perpendicular_line(A, perpendicular_line(E, f))
By perpendicular_line_definition on F, f, perpendicular_line(E, f) we get f == perpendicular_line(F, perpendicular_line(E, f))
By perpendicular_line_definition on F, perpendicular_line(E, f), f we get perpendicular_line(E, f) == perpendicular_line(F, f)
By between_implies_orientation on E, C, G, F we get orientation(C, G, E) == orientation(E, G, F) mod 360, orientation(C, F, E) == orientation(C, G, E) mod 360
By between_implies_orientation on E, F, G, C we get orientation(C, E, G) == orientation(E, F, G) mod 360, orientation(C, E, F) == orientation(E, F, G) mod 360
By between_imply_not_between on F, G, C we get collinear_and_not_between(C, F, G)
By between_imply_not_between on C, G, F we get collinear_and_not_between(F, C, G)
By circle_radius_v0_r on B, c we get radius(c) == distance(B, center(c))
By circle_radius_v0_r on A, c we get radius(c) == distance(A, center(c))
By circle_radius_v0_r on C, c we get radius(c) == distance(C, center(c))
By different_points_v1 on A, B we get 0 != distance(A, B)
By center_not_on_circle on c we get center(c) not in c
By in_imply_collinear on F, B, A we get collinear(A, B, F)
By not_in_line_equivalent_to_not_collinear_v0_r on G, B, A we get G not in Line(A, B)
By not_in_line_equivalent_to_not_collinear_v0_r on D, B, A we get D not in Line(A, B)
By angle_bisector_draw_angle_v1 on B, D, A we get exists(Line(A, D), Line(B, D))
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, A we get C not in Line(A, B)
By angle_bisector_draw_angle_v1 on A, D, B we get exists(Line(A, D), Line(B, D))
By not_in_line_equivalent_to_not_collinear_v0_r on E, A, B we get E not in Line(A, B)
By power_of_a_point_on_circle on B, c we get 0 == power_of_a_point(B, c)
By power_of_a_point_in_circle on A, c we get 0 == power_of_a_point(A, c)
By power_of_a_point_on_circle on C, c we get 0 == power_of_a_point(C, c)
By angle_to_center on A, C, B, c we get 2 * angle(A, C, B) == angle(A, center(c), B) mod 360
By angle_to_center on C, A, B, c we get 2 * angle(C, A, B) == angle(C, center(c), B) mod 360
By angle_to_center on A, B, C, c we get 2 * angle(A, B, C) == angle(A, center(c), C) mod 360
By angle_to_center on B, A, C, c we get 2 * angle(B, A, C) == angle(B, center(c), C) mod 360
By angle_to_center on B, C, A, c we get 2 * angle(B, C, A) == angle(B, center(c), A) mod 360
By angle_to_center on C, B, A, c we get 2 * angle(C, B, A) == angle(C, center(c), A) mod 360
By log_of_2_times_distance on C, F, G, C we get log(distance(C, F)) == 0.6931471805599453 + log(distance(C, G))
By altitude_definition on E, B, A, perpendicular_line(E, f) we get altitude(E, A, B) == perpendicular_line(E, f)
By collinear_definition on C, F, G we get F in Line(C, G), G in Line(C, F), Line(C, F) == Line(C, G), 0 == 2 * angle(F, C, G) mod 360
By collinear_definition on G, C, F we get C in Line(F, G), F in Line(C, G), Line(C, G) == Line(F, G), 0 == 2 * angle(C, G, F) mod 360
By log_of_2_times_distance on C, F, F, G we get log(distance(C, F)) == 0.6931471805599453 + log(distance(F, G))
By collinear_definition on F, G, C we get G in Line(C, F), C in Line(F, G), Line(C, F) == Line(F, G), 0 == 2 * angle(G, F, C) mod 360
By collinear_definition on C, G, F we get G in Line(C, F), F in Line(C, G), Line(C, F) == Line(C, G), 0 == 2 * angle(G, C, F) mod 360
By collinear_definition on G, F, C we get F in Line(C, G), C in Line(F, G), Line(C, G) == Line(F, G), 0 == 2 * angle(F, G, C) mod 360
By collinear_definition on F, C, G we get C in Line(F, G), G in Line(C, F), Line(C, F) == Line(F, G), 0 == 2 * angle(C, F, G) mod 360
By isosceles_triangle_properties on G, C, F we get distance(C, G) == distance(F, G), angle(C, F, G) == angle(G, C, F) mod 360
By isosceles_triangle_properties on G, F, C we get distance(C, G) == distance(F, G), angle(F, C, G) == angle(G, F, C) mod 360
By between_implies_angles on C, G, F we get 180 == angle(C, G, F) mod 360, 0 == angle(G, F, C) mod 360, 0 == angle(F, C, G) mod 360
By between_implies_angles on F, G, C we get 180 == angle(F, G, C) mod 360, 0 == angle(G, C, F) mod 360, 0 == angle(C, F, G) mod 360
By same_angle_v0 on C, F, G, A we get angle(F, C, A) == angle(G, C, A) mod 360
By same_angle_v0 on C, G, F, B we get angle(F, C, B) == angle(G, C, B) mod 360
By projection_definition on A, F, Line(E, F) we get F == projection(A, Line(E, F))
By projection_definition on D, E, Line(C, E) we get E == projection(D, Line(C, E))
By projection_definition on B, F, Line(E, F) we get F == projection(B, Line(E, F))
By different_points_v1 on B, F we get 0 != distance(B, F)
By different_points_v1 on D, E we get 0 != distance(D, E)
By different_points_v1 on E, C we get 0 != distance(C, E)
By different_points_v1 on E, F we get 0 != distance(E, F)
By different_points_v1 on B, D we get 0 != distance(B, D)
By different_points_v1 on C, A we get 0 != distance(A, C)
By different_points_v1 on C, B we get 0 != distance(B, C)
By same_angle_v0 on C, G, F, D we get angle(F, C, D) == angle(G, C, D) mod 360
By same_angle_v3 on A, B, F, C we get angle(B, A, C) == angle(F, A, C) + 180 mod 360
By different_points_v1 on A, D we get 0 != distance(A, D)
By different_points_v1 on C, D we get 0 != distance(C, D)
By different_points_v1 on F, A we get 0 != distance(A, F)
By same_angle_v1 on B, F, A, C we get angle(A, B, C) == angle(F, B, C) mod 360
By same_angle_v1 on F, G, C, B we get angle(C, F, B) == angle(G, F, B) mod 360
By probably_between_and_collinear_implies_between on F, A, B we get between(B, A, F)
By perpendicular_direction_conditions_v0_r on E, F, B, A we get 180 == 2 * direction(E, F) - 2 * direction(B, A) mod 360
By same_angle_v1 on F, G, C, A we get angle(C, F, A) == angle(G, F, A) mod 360
By perpendicular_direction_conditions_v0_r on F, E, A, B we get 180 == 2 * direction(F, E) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on E, F, A, B we get 180 == 2 * direction(E, F) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on A, B, E, F we get 180 == 2 * direction(A, B) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on F, E, B, A we get 180 == 2 * direction(F, E) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on B, A, F, E we get 180 == 2 * direction(B, A) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on B, A, E, F we get 180 == 2 * direction(B, A) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on A, B, F, E we get 180 == 2 * direction(A, B) - 2 * direction(F, E) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on B, G, F we get B not in Line(F, G)
By reverse_direction on B, A we get 180 == direction(B, A) - direction(A, B) mod 360
By line_inequality on Line(B, C), f, C we get f != Line(B, C)
By reverse_direction on F, G we get 180 == direction(F, G) - direction(G, F) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, D we get C not in Line(D, E)
By reverse_direction on C, F we get 180 == direction(C, F) - direction(F, C) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on A, E, D we get A not in Line(D, E)
By reverse_direction on A, B we get 180 == direction(A, B) - direction(B, A) mod 360
By line_inequality on Line(C, F), f, G we get f != Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on A, G, C we get A not in Line(C, G)
By not_in_line_equivalent_to_not_collinear_v0_r on B, F, E we get B not in Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on D, C, E we get D not in Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on G, D, C we get G not in Line(C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on D, A, C we get D not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on A, B, D we get A not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on E, C, B we get E not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on A, G, F we get A not in Line(F, G)
By reverse_direction on C, G we get 180 == direction(C, G) - direction(G, C) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on D, C, F we get D not in Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on B, D, E we get B not in Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on G, A, C we get G not in Line(A, C)
By reverse_direction on C, A we get 180 == direction(C, A) - direction(A, C) mod 360
By reverse_direction on C, B we get 180 == direction(C, B) - direction(B, C) mod 360
By reverse_direction on F, C we get 180 == direction(F, C) - direction(C, F) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on D, C, B we get D not in Line(B, C)
By reverse_direction on B, C we get 180 == direction(B, C) - direction(C, B) mod 360
By reverse_direction on A, C we get 180 == direction(A, C) - direction(C, A) mod 360
By reverse_direction on G, F we get 180 == direction(G, F) - direction(F, G) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on A, C, F we get A not in Line(C, F)
By reverse_direction on G, C we get 180 == direction(G, C) - direction(C, G) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on A, E, F we get A not in Line(E, F)
By line_circle_intersection_has_at_most_two_points_0 on B, A, F, c we get F not in c
By not_in_line_equivalent_to_not_collinear_v0_r on D, F, G we get D not in Line(F, G)
By not_in_line_equivalent_to_not_collinear_v0_r on C, A, D we get C not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on E, B, D we get E not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on F, A, D we get F not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on G, D, A we get G not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on B, A, D we get B not in Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, C we get F not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on B, A, C we get B not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on B, C, E we get B not in Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on A, C, D we get A not in Line(C, D)
By line_inequality on Line(E, F), f, E we get f != Line(E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, F we get D not in Line(E, F)
By line_inequality on Line(A, C), f, C we get f != Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on A, C, E we get A not in Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on B, G, C we get B not in Line(C, G)
By line_inequality on Line(A, D), f, D we get f != Line(A, D)
By not_in_line_equivalent_to_not_collinear_v0_r on D, C, G we get D not in Line(C, G)
By not_in_line_equivalent_to_not_collinear_v0_r on B, F, C we get B not in Line(C, F)
By not_in_line_equivalent_to_not_collinear_v0_r on E, A, C we get E not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on B, D, C we get B not in Line(C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on E, D, C we get E not in Line(C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on G, B, C we get G not in Line(B, C)
By not_in_line_equivalent_to_not_collinear_v0_r on G, D, B we get G not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, D we get G not in Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on C, D, B we get C not in Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on A, B, C we get A not in Line(B, C)
By line_inequality on Line(C, E), f, C we get f != Line(C, E)
By not_in_line_equivalent_to_not_collinear_v0_r on E, D, A we get E not in Line(A, D)
By line_inequality on Line(C, D), f, D we get f != Line(C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on F, C, D we get F not in Line(C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on F, D, E we get F not in Line(D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on F, C, A we get F not in Line(A, C)
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, D we get F not in Line(B, D)
By line_inequality on Line(B, D), f, D we get f != Line(B, D)
By perpendicular_direction_conditions_v0_r on D, E, E, C we get 180 == 2 * direction(D, E) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on F, E, A, F we get 180 == 2 * direction(F, E) - 2 * direction(A, F) mod 360
By same_angle_v0 on F, A, B, G we get angle(A, F, G) == angle(B, F, G) mod 360
By same_angle_v1 on B, F, A, D we get angle(A, B, D) == angle(F, B, D) mod 360
By perpendicular_direction_conditions_v0_r on E, F, A, F we get 180 == 2 * direction(E, F) - 2 * direction(A, F) mod 360
By same_angle_v0 on F, B, A, C we get angle(A, F, C) == angle(B, F, C) mod 360
By perpendicular_direction_conditions_v0_r on A, F, F, E we get 180 == 2 * direction(A, F) - 2 * direction(F, E) mod 360
By same_angle_v2 on A, B, F, D we get angle(B, A, D) == angle(F, A, D) + 180 mod 360
By perpendicular_direction_conditions_v0_r on E, D, C, E we get 180 == 2 * direction(E, D) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on E, F, B, F we get 180 == 2 * direction(E, F) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on F, E, B, F we get 180 == 2 * direction(F, E) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on F, B, F, E we get 180 == 2 * direction(F, B) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on C, E, D, E we get 180 == 2 * direction(C, E) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on F, E, F, B we get 180 == 2 * direction(F, E) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on F, B, E, F we get 180 == 2 * direction(F, B) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on B, F, F, E we get 180 == 2 * direction(B, F) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on E, C, E, D we get 180 == 2 * direction(E, C) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on A, F, E, F we get 180 == 2 * direction(A, F) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on F, E, F, A we get 180 == 2 * direction(F, E) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on E, F, F, A we get 180 == 2 * direction(E, F) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on E, D, E, C we get 180 == 2 * direction(E, D) - 2 * direction(E, C) mod 360
By perpendicular_direction_conditions_v0_r on B, F, E, F we get 180 == 2 * direction(B, F) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on F, A, E, F we get 180 == 2 * direction(F, A) - 2 * direction(E, F) mod 360
By perpendicular_direction_conditions_v0_r on F, A, F, E we get 180 == 2 * direction(F, A) - 2 * direction(F, E) mod 360
By perpendicular_direction_conditions_v0_r on C, E, E, D we get 180 == 2 * direction(C, E) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on D, E, C, E we get 180 == 2 * direction(D, E) - 2 * direction(C, E) mod 360
By perpendicular_direction_conditions_v0_r on E, C, D, E we get 180 == 2 * direction(E, C) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on E, F, F, B we get 180 == 2 * direction(E, F) - 2 * direction(F, B) mod 360
By collinear_definition on B, A, F we get A in Line(B, F), F in Line(A, B), Line(A, B) == Line(B, F), 0 == 2 * angle(A, B, F) mod 360
By altitude_definition on B, E, F, f we get f == altitude(B, E, F)
By reverse_direction on D, A we get 180 == direction(D, A) - direction(A, D) mod 360
By internal_angle_bisector_definition_v0_r on F, G, F, C we get Line(C, G) == internal_angle_bisector(F, C, F)
By internal_angle_bisector_definition_v0_r on C, F, C, G we get Line(F, G) == internal_angle_bisector(C, G, C)
By internal_angle_bisector_definition_v0_r on G, C, G, F we get Line(C, F) == internal_angle_bisector(G, F, G)
By altitude_definition on D, C, E, g we get g == altitude(D, C, E)
By internal_angle_bisector_definition_v0_r on F, C, F, G we get Line(C, G) == internal_angle_bisector(F, G, F)
By reverse_direction on D, B we get 180 == direction(D, B) - direction(B, D) mod 360
By internal_angle_bisector_definition_v0_r on G, F, G, C we get Line(C, F) == internal_angle_bisector(G, C, G)
By collinear_definition on A, B, F we get B in Line(A, F), F in Line(A, B), Line(A, B) == Line(A, F), 0 == 2 * angle(B, A, F) mod 360
By reverse_direction on D, C we get 180 == direction(D, C) - direction(C, D) mod 360
By external_angle_bisector_definition_v0 on A, E, B, D we get 180 == angle(A, D, E) + angle(B, D, E) mod 360
By altitude_definition on A, E, F, f we get f == altitude(A, E, F)
By collinear_definition on B, F, A we get F in Line(A, B), A in Line(B, F), Line(A, B) == Line(B, F), 0 == 2 * angle(F, B, A) mod 360
By internal_angle_bisector_definition_v0_r on C, G, C, F we get Line(F, G) == internal_angle_bisector(C, F, C)
By collinear_definition on A, F, B we get F in Line(A, B), B in Line(A, F), Line(A, B) == Line(A, F), 0 == 2 * angle(F, A, B) mod 360
By same_angle_v0 on F, B, A, E we get angle(A, F, E) == angle(B, F, E) mod 360
By sss_anti_congruence_v1 on B, D, A, A, D, B we get anti_congruent_triangles(A, B, D, B, A, D)
By collinear_definition on F, A, B we get A in Line(B, F), B in Line(A, F), Line(A, F) == Line(B, F), 0 == 2 * angle(A, F, B) mod 360
By sss_anti_congruence_v1 on A, B, D, B, A, D we get anti_congruent_triangles(A, B, D, B, A, D)
By altitude_definition on E, F, B, Line(E, F) we get Line(E, F) == altitude(E, B, F)
By perpendicular_angle_conditions_v0 on A, F, E we get angle(A, F, E) == orientation(A, F, E) mod 360
By isosceles_triangle_properties on D, B, A we get distance(A, D) == distance(B, D), angle(B, A, D) == angle(D, B, A) mod 360
By sss_anti_congruence_v0 on A, D, B, B, D, A we get anti_congruent_triangles(A, B, D, B, A, D)
By isosceles_triangle_properties on D, A, C we get distance(A, D) == distance(C, D), angle(A, C, D) == angle(D, A, C) mod 360
By sss_anti_congruence_v1 on B, D, A, A, D, B we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v1 on B, D, A, A, D, B we get anti_congruent_triangles(A, B, D, B, A, D)
By sas_anti_congruence on C, D, A, A, D, C we get anti_congruent_triangles(A, C, D, C, A, D)
By sss_anti_congruence_v1 on D, A, B, D, B, A we get anti_congruent_triangles(A, B, D, B, A, D)
By sas_anti_congruence on A, D, C, C, D, A we get anti_congruent_triangles(A, C, D, C, A, D)
By sss_anti_congruence_v0 on D, B, A, D, A, B we get anti_congruent_triangles(A, B, D, B, A, D)
By altitude_definition on E, A, F, Line(E, F) we get Line(E, F) == altitude(E, A, F)
By sss_anti_congruence_v1 on B, D, A, A, D, B we get anti_congruent_triangles(A, B, D, B, A, D)
By altitude_definition on C, D, E, Line(C, E) we get Line(C, E) == altitude(C, D, E)
By sss_anti_congruence_v1 on A, B, D, B, A, D we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v1 on B, D, A, A, D, B we get anti_congruent_triangles(A, B, D, B, A, D)
By sas_anti_congruence on B, D, A, A, D, B we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v0 on B, A, D, A, B, D we get anti_congruent_triangles(A, B, D, B, A, D)
By isosceles_triangle_properties on D, A, B we get distance(A, D) == distance(B, D), angle(A, B, D) == angle(D, A, B) mod 360
By isosceles_triangle_properties on D, B, C we get distance(B, D) == distance(C, D), angle(B, C, D) == angle(D, B, C) mod 360
By sss_anti_congruence_v1 on D, A, B, D, B, A we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v1 on D, A, B, D, B, A we get anti_congruent_triangles(A, B, D, B, A, D)
By perpendicular_angle_conditions_v0 on D, E, C we get angle(D, E, C) == orientation(C, D, E) mod 360
By collinear_definition on F, B, A we get B in Line(A, F), A in Line(B, F), Line(A, F) == Line(B, F), 0 == 2 * angle(B, F, A) mod 360
By sss_anti_congruence_v1 on D, A, B, D, B, A we get anti_congruent_triangles(A, B, D, B, A, D)
By sas_anti_congruence on B, D, C, C, D, B we get anti_congruent_triangles(B, C, D, C, B, D)
By sss_anti_congruence_v1 on A, B, D, B, A, D we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v0 on B, A, D, A, B, D we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v0 on D, B, A, D, A, B we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v0 on A, D, B, B, D, A we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v1 on D, A, B, D, B, A we get anti_congruent_triangles(A, B, D, B, A, D)
By sas_anti_congruence on A, D, B, B, D, A we get anti_congruent_triangles(A, B, D, B, A, D)
By perpendicular_angle_conditions_v0 on E, F, A we get angle(E, F, A) == orientation(A, E, F) mod 360
By sss_anti_congruence_v0 on D, B, A, D, A, B we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v0 on D, B, A, D, A, B we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v0 on B, A, D, A, B, D we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v1 on A, B, D, B, A, D we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v0 on A, D, B, B, D, A we get anti_congruent_triangles(A, B, D, B, A, D)
By isosceles_triangle_properties on D, C, A we get distance(A, D) == distance(C, D), angle(C, A, D) == angle(D, C, A) mod 360
By sss_anti_congruence_v0 on A, D, B, B, D, A we get anti_congruent_triangles(A, B, D, B, A, D)
By perpendicular_angle_conditions_v0 on E, F, B we get angle(E, F, B) == orientation(B, E, F) mod 360
By isosceles_triangle_properties on D, C, B we get distance(B, D) == distance(C, D), angle(C, B, D) == angle(D, C, B) mod 360
By perpendicular_angle_conditions_v0 on C, E, D we get angle(C, E, D) == orientation(C, E, D) mod 360
By sss_anti_congruence_v0 on B, A, D, A, B, D we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v0 on B, A, D, A, B, D we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v1 on A, B, D, B, A, D we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v1 on D, A, B, D, B, A we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v0 on D, B, A, D, A, B we get anti_congruent_triangles(A, B, D, B, A, D)
By perpendicular_angle_conditions_v0 on B, F, E we get angle(B, F, E) == orientation(B, F, E) mod 360
By sss_anti_congruence_v0 on D, B, A, D, A, B we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v0 on B, A, D, A, B, D we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v0 on A, D, B, B, D, A we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v0 on A, D, B, B, D, A we get anti_congruent_triangles(A, B, D, B, A, D)
By sas_anti_congruence on C, D, B, B, D, C we get anti_congruent_triangles(B, C, D, C, B, D)
By sss_anti_congruence_v1 on A, B, D, B, A, D we get anti_congruent_triangles(A, B, D, B, A, D)
By sss_anti_congruence_v1 on B, D, A, A, D, B we get anti_congruent_triangles(A, B, D, B, A, D)
By line_intersection_definition on F, f, Line(C, F) we get F == line_intersection(f, Line(C, F))
By line_intersection_definition on B, f, Line(B, D) we get B == line_intersection(f, Line(B, D))
By line_intersection_definition on A, Line(A, C), f we get A == line_intersection(f, Line(A, C))
By line_intersection_definition on B, f, Line(B, C) we get B == line_intersection(f, Line(B, C))
By line_intersection_definition on A, f, Line(A, D) we get A == line_intersection(f, Line(A, D))
By perpendicular_direction_conditions_v0 on A, F, C, E we get perpendicular(Line(A, F), Line(C, E))
By perpendicular_direction_conditions_v0 on F, B, E, C we get perpendicular(Line(B, F), Line(C, E))
By perpendicular_direction_conditions_v0 on B, A, C, E we get perpendicular(Line(A, B), Line(C, E))
By perpendicular_direction_conditions_v0 on E, F, E, D we get perpendicular(Line(D, E), Line(E, F))
By between_imply_not_between on F, A, B we get collinear_and_not_between(A, F, B)
By between_imply_not_between on B, A, F we get collinear_and_not_between(A, B, F)
By orthocenter_concurrency on D, C, E we get orthocenter(C, D, E) in altitude(D, C, E), orthocenter(C, D, E) in altitude(C, D, E), orthocenter(C, D, E) in altitude(E, C, D)
By orthocenter_concurrency on A, E, F we get orthocenter(A, E, F) in altitude(A, E, F), orthocenter(A, E, F) in altitude(E, A, F), orthocenter(A, E, F) in altitude(F, A, E)
By orthocenter_concurrency on E, B, F we get orthocenter(B, E, F) in altitude(E, B, F), orthocenter(B, E, F) in altitude(B, E, F), orthocenter(B, E, F) in altitude(F, B, E)
By divide_by_2_mod_180_v1 on B, D, E, F, A, D we get angle(B, D, E) == angle(F, A, D) mod 360
By divide_by_2_mod_180_v0 on E, D, A, B, A, D we get angle(B, A, D) == angle(E, D, A) mod 360
By divide_by_2_mod_180_v2 on E, D, B, A, B, D we get angle(E, D, B) == angle(A, B, D) + 180 mod 360
By divide_by_2_mod_180_v2 on E, D, B, F, B, D we get angle(E, D, B) == angle(F, B, D) + 180 mod 360
By divide_by_2_mod_180_v1 on A, D, E, D, A, B we get angle(A, D, E) == angle(D, A, B) mod 360
By line_inequality on Line(C, E), Line(A, D), E we get Line(A, D) != Line(C, E)
By divide_by_2_mod_180_v2 on E, D, B, D, A, B we get angle(E, D, B) == angle(D, A, B) + 180 mod 360
By divide_by_2_mod_180_v0 on E, D, A, D, B, F we get angle(D, B, F) == angle(E, D, A) mod 360
By divide_by_2_mod_180_v3 on F, A, D, E, D, A we get angle(F, A, D) == angle(E, D, A) + 180 mod 360
By divide_by_2_mod_180_v0 on D, A, F, E, D, B we get angle(D, A, F) == angle(E, D, B) mod 360
By divide_by_2_mod_180_v3 on D, A, B, E, D, B we get angle(D, A, B) == angle(E, D, B) + 180 mod 360
By divide_by_2_mod_180_v2 on D, B, A, B, D, E we get angle(D, B, A) == angle(B, D, E) + 180 mod 360
By line_inequality on Line(C, D), Line(A, D), C we get Line(A, D) != Line(C, D)
By between_imply_segment_sum on F, A, B we get distance(B, F) == distance(A, F) + distance(A, B)
By divide_by_2_mod_180_v2 on E, D, A, F, A, D we get angle(E, D, A) == angle(F, A, D) + 180 mod 360
By line_inequality on Line(A, C), Line(B, D), C we get Line(A, C) != Line(B, D)
By divide_by_2_mod_180_v3 on A, D, E, D, A, F we get angle(A, D, E) == angle(D, A, F) + 180 mod 360
By divide_by_2_mod_180_v1 on A, B, D, A, D, E we get angle(A, B, D) == angle(A, D, E) mod 360
By divide_by_2_mod_180_v3 on B, D, E, B, A, D we get angle(B, D, E) == angle(B, A, D) + 180 mod 360
By line_inequality on Line(E, F), g, F we get g != Line(E, F)
By line_inequality on Line(C, F), Line(B, D), C we get Line(B, D) != Line(C, F)
By divide_by_2_mod_180_v2 on D, B, F, B, D, E we get angle(D, B, F) == angle(B, D, E) + 180 mod 360
By divide_by_2_mod_180_v3 on B, D, E, D, B, F we get angle(B, D, E) == angle(D, B, F) + 180 mod 360
By divide_by_2_mod_180_v2 on D, A, F, A, D, E we get angle(D, A, F) == angle(A, D, E) + 180 mod 360
By divide_by_2_mod_180_v1 on F, B, D, A, D, E we get angle(A, D, E) == angle(F, B, D) mod 360
By line_inequality on Line(A, D), Line(B, D), A we get Line(A, D) != Line(B, D)
By divide_by_2_mod_180_v3 on B, D, E, D, B, A we get angle(B, D, E) == angle(D, B, A) + 180 mod 360
By line_inequality on Line(C, D), Line(A, C), D we get Line(A, C) != Line(C, D)
By line_inequality on Line(A, C), g, A we get g != Line(A, C)
By line_inequality on g, Line(A, D), E we get g != Line(A, D)
By divide_by_2_mod_180_v3 on F, B, D, E, D, B we get angle(F, B, D) == angle(E, D, B) + 180 mod 360
By divide_by_2_mod_180_v0 on E, D, A, D, B, A we get angle(D, B, A) == angle(E, D, A) mod 360
By divide_by_2_mod_180_v3 on A, B, D, E, D, B we get angle(A, B, D) == angle(E, D, B) + 180 mod 360
By reverse_direction on F, B we get 180 == direction(F, B) - direction(B, F) mod 360
By reverse_direction on C, E we get 180 == direction(C, E) - direction(E, C) mod 360
By line_inequality on g, Line(C, E), D we get g != Line(C, E)
By line_inequality on Line(E, F), Line(A, D), F we get Line(A, D) != Line(E, F)
By line_inequality on Line(A, C), Line(C, E), A we get Line(A, C) != Line(C, E)
By line_inequality on Line(C, D), Line(B, D), C we get Line(B, D) != Line(C, D)
By reverse_direction on F, E we get 180 == direction(F, E) - direction(E, F) mod 360
By reverse_direction on E, C we get 180 == direction(E, C) - direction(C, E) mod 360
By line_inequality on Line(A, C), Line(B, C), A we get Line(A, C) != Line(B, C)
By reverse_direction on F, A we get 180 == direction(F, A) - direction(A, F) mod 360
By divide_by_2_mod_180_v2 on B, A, D, B, D, E we get angle(B, A, D) == angle(B, D, E) + 180 mod 360
By line_inequality on Line(E, F), Line(B, C), F we get Line(B, C) != Line(E, F)
By line_inequality on Line(C, D), Line(C, F), D we get Line(C, D) != Line(C, F)
By line_inequality on Line(B, C), g, B we get g != Line(B, C)
By line_inequality on g, Line(C, F), D we get g != Line(C, F)
By line_inequality on Line(B, C), Line(B, D), C we get Line(B, C) != Line(B, D)
By line_inequality on Line(E, F), Line(C, D), E we get Line(C, D) != Line(E, F)
By reverse_direction on E, D we get 180 == direction(E, D) - direction(D, E) mod 360
By reverse_direction on D, E we get 180 == direction(D, E) - direction(E, D) mod 360
By reverse_direction on B, F we get 180 == direction(B, F) - direction(F, B) mod 360
By line_inequality on Line(B, D), Line(C, E), D we get Line(B, D) != Line(C, E)
By reverse_direction on A, F we get 180 == direction(A, F) - direction(F, A) mod 360
By line_inequality on g, Line(C, D), E we get g != Line(C, D)
By line_inequality on Line(C, F), Line(A, D), G we get Line(A, D) != Line(C, F)
By reverse_direction on E, F we get 180 == direction(E, F) - direction(F, E) mod 360
By line_inequality on Line(B, D), Line(E, F), B we get Line(B, D) != Line(E, F)
By line_inequality on Line(C, F), Line(B, C), G we get Line(B, C) != Line(C, F)
By line_inequality on Line(B, C), Line(A, D), C we get Line(A, D) != Line(B, C)
By line_inequality on Line(B, C), Line(C, D), B we get Line(B, C) != Line(C, D)
By line_inequality on Line(B, C), Line(C, E), B we get Line(B, C) != Line(C, E)
By line_inequality on Line(A, C), Line(E, F), A we get Line(A, C) != Line(E, F)
By line_inequality on Line(C, E), Line(C, D), E we get Line(C, D) != Line(C, E)
By line_inequality on g, Line(B, D), E we get g != Line(B, D)
By line_inequality on Line(A, C), Line(A, D), C we get Line(A, C) != Line(A, D)
By line_inequality on Line(A, C), Line(C, F), A we get Line(A, C) != Line(C, F)
By external_angle_bisector_definition_v0_r on A, E, A, F we get Line(E, F) == external_angle_bisector(A, F, A)
By external_angle_bisector_definition_v0_r on C, D, C, E we get Line(D, E) == external_angle_bisector(C, E, C)
By external_angle_bisector_definition_v0_r on E, A, E, F we get Line(A, F) == external_angle_bisector(E, F, E)
By external_angle_bisector_definition_v0_r on A, E, B, F we get Line(E, F) == external_angle_bisector(A, F, B)
By external_angle_bisector_definition_v0_r on B, E, B, F we get Line(E, F) == external_angle_bisector(B, F, B)
By internal_angle_bisector_definition_v0_r on A, B, A, F we get Line(B, F) == internal_angle_bisector(A, F, A)
By internal_angle_bisector_definition_v0_r on B, A, B, F we get Line(A, F) == internal_angle_bisector(B, F, B)
By external_angle_bisector_definition_v0_r on D, C, D, E we get Line(C, E) == external_angle_bisector(D, E, D)
By internal_angle_bisector_definition_v0_r on B, F, B, A we get Line(A, F) == internal_angle_bisector(B, A, B)
By external_angle_bisector_definition_v0_r on E, B, E, F we get Line(B, F) == external_angle_bisector(E, F, E)
By internal_angle_bisector_definition_v0_r on F, A, F, B we get Line(A, B) == internal_angle_bisector(F, B, F)
By internal_angle_bisector_definition_v0_r on F, B, F, A we get Line(A, B) == internal_angle_bisector(F, A, F)
By internal_angle_bisector_definition_v0_r on A, F, A, B we get Line(B, F) == internal_angle_bisector(A, B, A)
By anti_similar_triangle_basic_properties on D, C, B, D, B, C we get not_collinear(B, C, D), not_collinear(B, C, D), angle(D, C, B) == 0 - angle(D, B, C) mod 360, angle(C, B, D) == 0 - angle(B, C, D) mod 360, angle(B, D, C) == 0 - angle(C, D, B) mod 360, log(distance(B, D)) + log(distance(B, C)) == log(distance(C, D)) + log(distance(B, C)), log(distance(B, C)) + log(distance(B, D)) == log(distance(B, C)) + log(distance(C, D)), log(distance(B, D)) + log(distance(B, D)) == log(distance(C, D)) + log(distance(C, D))
By anti_similar_triangle_basic_properties on B, A, D, A, B, D we get not_collinear(A, B, D), not_collinear(A, B, D), angle(B, A, D) == 0 - angle(A, B, D) mod 360, angle(A, D, B) == 0 - angle(B, D, A) mod 360, angle(D, B, A) == 0 - angle(D, A, B) mod 360, log(distance(A, B)) + log(distance(A, D)) == log(distance(A, B)) + log(distance(B, D)), log(distance(A, D)) + log(distance(A, D)) == log(distance(B, D)) + log(distance(B, D)), log(distance(A, D)) + log(distance(A, B)) == log(distance(B, D)) + log(distance(A, B))
By anti_similar_triangle_basic_properties on D, A, C, D, C, A we get not_collinear(A, C, D), not_collinear(A, C, D), angle(D, A, C) == 0 - angle(D, C, A) mod 360, angle(A, C, D) == 0 - angle(C, A, D) mod 360, angle(C, D, A) == 0 - angle(A, D, C) mod 360, log(distance(A, D)) + log(distance(A, C)) == log(distance(C, D)) + log(distance(A, C)), log(distance(A, C)) + log(distance(A, D)) == log(distance(A, C)) + log(distance(C, D)), log(distance(A, D)) + log(distance(A, D)) == log(distance(C, D)) + log(distance(C, D))
By power_of_a_point_definition on F, A, B, c we get log(power_of_a_point(F, c)) == log(distance(A, F)) + log(distance(B, F))
By perpendicular_line_definition on E, Line(E, F), g we get Line(E, F) == perpendicular_line(E, g)
By line_intersection_definition on orthocenter(C, D, E), g, Line(C, E) we get orthocenter(C, D, E) == line_intersection(g, Line(C, E))
By line_intersection_definition on orthocenter(B, E, F), Line(E, F), f we get orthocenter(B, E, F) == line_intersection(f, Line(E, F))
By line_intersection_definition on orthocenter(A, E, F), Line(E, F), f we get orthocenter(A, E, F) == line_intersection(f, Line(E, F))
By perpendicular_line_definition on E, Line(C, E), f we get Line(C, E) == perpendicular_line(E, f)
By perpendicular_line_definition on A, Line(A, E), altitude(F, A, E) we get Line(A, E) == perpendicular_line(A, altitude(F, A, E))
By perpendicular_line_definition on orthocenter(C, D, E), g, Line(C, E) we get g == perpendicular_line(orthocenter(C, D, E), Line(C, E))
By line_intersection_definition on C, Line(C, E), Line(A, C) we get C == line_intersection(Line(A, C), Line(C, E))
By line_intersection_definition on C, Line(A, C), Line(B, C) we get C == line_intersection(Line(A, C), Line(B, C))
By line_intersection_definition on B, Line(B, C), Line(B, D) we get B == line_intersection(Line(B, C), Line(B, D))
By perpendicular_line_definition on F, f, Line(C, E) we get f == perpendicular_line(F, Line(C, E))
By line_intersection_definition on D, Line(A, D), g we get D == line_intersection(g, Line(A, D))
By perpendicular_line_definition on orthocenter(B, E, F), Line(E, F), g we get Line(E, F) == perpendicular_line(orthocenter(B, E, F), g)
By line_intersection_definition on D, Line(C, D), g we get D == line_intersection(g, Line(C, D))
By line_intersection_definition on D, Line(B, D), g we get D == line_intersection(g, Line(B, D))
By perpendicular_line_definition on orthocenter(C, D, E), altitude(E, C, D), Line(C, D) we get altitude(E, C, D) == perpendicular_line(orthocenter(C, D, E), Line(C, D))
By line_intersection_definition on D, Line(A, D), Line(B, D) we get D == line_intersection(Line(A, D), Line(B, D))
By line_intersection_definition on C, Line(C, D), Line(C, E) we get C == line_intersection(Line(C, D), Line(C, E))
By line_intersection_definition on C, Line(C, D), Line(C, F) we get C == line_intersection(Line(C, D), Line(C, F))
By perpendicular_line_definition on C, Line(C, D), altitude(E, C, D) we get Line(C, D) == perpendicular_line(C, altitude(E, C, D))
By line_intersection_definition on C, Line(C, F), Line(B, C) we get C == line_intersection(Line(B, C), Line(C, F))
By line_intersection_definition on D, Line(C, D), Line(A, D) we get D == line_intersection(Line(A, D), Line(C, D))
By line_intersection_definition on D, Line(B, D), Line(C, D) we get D == line_intersection(Line(B, D), Line(C, D))
By line_intersection_definition on E, g, Line(E, F) we get E == line_intersection(g, Line(E, F))
By line_intersection_definition on C, Line(B, C), Line(C, E) we get C == line_intersection(Line(B, C), Line(C, E))
By perpendicular_line_definition on orthocenter(B, E, F), altitude(F, B, E), Line(B, E) we get altitude(F, B, E) == perpendicular_line(orthocenter(B, E, F), Line(B, E))
By perpendicular_line_definition on orthocenter(C, D, E), Line(C, E), f we get Line(C, E) == perpendicular_line(orthocenter(C, D, E), f)
By line_intersection_definition on C, Line(A, C), Line(C, F) we get C == line_intersection(Line(A, C), Line(C, F))
By line_intersection_definition on C, Line(B, C), Line(C, D) we get C == line_intersection(Line(B, C), Line(C, D))
By concurrent_sufficient_conditions on Line(B, D), Line(B, C), f we get concurrent(f, Line(B, C), Line(B, D))
By concurrent_sufficient_conditions on Line(A, D), Line(A, C), f we get concurrent(f, Line(A, C), Line(A, D))
By perpendicular_line_definition on E, Line(B, E), altitude(F, B, E) we get Line(B, E) == perpendicular_line(E, altitude(F, B, E))
By line_intersection_definition on C, Line(C, D), Line(A, C) we get C == line_intersection(Line(A, C), Line(C, D))
By perpendicular_line_definition on orthocenter(B, E, F), f, Line(E, F) we get f == perpendicular_line(orthocenter(B, E, F), Line(E, F))
By perpendicular_line_definition on E, Line(A, E), altitude(F, A, E) we get Line(A, E) == perpendicular_line(E, altitude(F, A, E))
By perpendicular_line_definition on E, g, Line(E, F) we get g == perpendicular_line(E, Line(E, F))
By perpendicular_line_definition on orthocenter(C, D, E), g, Line(E, F) we get g == perpendicular_line(orthocenter(C, D, E), Line(E, F))
By perpendicular_line_definition on C, Line(C, E), f we get Line(C, E) == perpendicular_line(C, f)
By concurrent_sufficient_conditions on Line(B, C), Line(B, D), f we get concurrent(f, Line(B, C), Line(B, D))
By perpendicular_line_definition on orthocenter(A, E, F), Line(E, F), g we get Line(E, F) == perpendicular_line(orthocenter(A, E, F), g)
By perpendicular_line_definition on D, g, Line(E, F) we get g == perpendicular_line(D, Line(E, F))
By line_intersection_definition on A, Line(A, C), Line(A, D) we get A == line_intersection(Line(A, C), Line(A, D))
By concurrent_sufficient_conditions on Line(A, C), Line(A, D), f we get concurrent(f, Line(A, C), Line(A, D))
By perpendicular_line_definition on orthocenter(B, E, F), f, Line(C, E) we get f == perpendicular_line(orthocenter(B, E, F), Line(C, E))
By perpendicular_line_definition on orthocenter(A, E, F), f, Line(E, F) we get f == perpendicular_line(orthocenter(A, E, F), Line(E, F))
By perpendicular_line_definition on B, f, Line(C, E) we get f == perpendicular_line(B, Line(C, E))
By perpendicular_line_definition on orthocenter(A, E, F), f, Line(C, E) we get f == perpendicular_line(orthocenter(A, E, F), Line(C, E))
By perpendicular_line_definition on F, Line(E, F), g we get Line(E, F) == perpendicular_line(F, g)
By perpendicular_line_definition on B, Line(B, E), altitude(F, B, E) we get Line(B, E) == perpendicular_line(B, altitude(F, B, E))
By perpendicular_line_definition on A, f, Line(C, E) we get f == perpendicular_line(A, Line(C, E))
By perpendicular_line_definition on D, Line(C, D), altitude(E, C, D) we get Line(C, D) == perpendicular_line(D, altitude(E, C, D))
By perpendicular_line_definition on orthocenter(C, D, E), Line(C, E), g we get Line(C, E) == perpendicular_line(orthocenter(C, D, E), g)
By perpendicular_line_definition on orthocenter(A, E, F), Line(E, F), f we get Line(E, F) == perpendicular_line(orthocenter(A, E, F), f)
By perpendicular_line_definition on orthocenter(B, E, F), Line(E, F), f we get Line(E, F) == perpendicular_line(orthocenter(B, E, F), f)
By perpendicular_line_definition on orthocenter(A, E, F), altitude(F, A, E), Line(A, E) we get altitude(F, A, E) == perpendicular_line(orthocenter(A, E, F), Line(A, E))
By line_unique_intersection_v0 on Line(C, E), g, orthocenter(C, D, E), E we get E == orthocenter(C, D, E)
By line_unique_intersection_v0 on f, Line(E, F), orthocenter(A, E, F), orthocenter(B, E, F) we get orthocenter(A, E, F) == orthocenter(B, E, F)
By line_unique_intersection_v0 on f, Line(E, F), F, orthocenter(A, E, F) we get F == orthocenter(A, E, F)
By line_unique_intersection_v0 on f, Line(E, F), orthocenter(B, E, F), F we get F == orthocenter(B, E, F)
By different_points_v1 on B, E we get 0 != distance(B, E)
By same_angle_v3 on A, B, F, E we get angle(B, A, E) == angle(F, A, E) + 180 mod 360
By different_points_v1 on A, E we get 0 != distance(A, E)
By projection_definition on D, E, Line(E, F) we get E == projection(D, Line(E, F))
By same_angle_v1 on B, A, F, E we get angle(A, B, E) == angle(F, B, E) mod 360
By altitude_definition on E, A, B, Line(C, E) we get Line(C, E) == altitude(E, A, B)
By projection_definition on F, E, g we get E == projection(F, g)
By in_imply_collinear on orthocenter(C, D, E), D, E we get collinear(D, E, orthocenter(C, D, E))
By in_imply_collinear on orthocenter(A, E, F), B, A we get collinear(A, B, orthocenter(A, E, F))
By parallel_line_angles_v1 on F, B, D, E we get parallel(Line(B, F), Line(D, E))
By double_perpendicular_and_parallel_v0 on Line(C, E), f, Line(E, F) we get parallel(Line(C, E), Line(E, F))
By in_imply_collinear on orthocenter(C, D, E), E, C we get collinear(C, E, orthocenter(C, D, E))
By line_inequality on Line(A, E), Line(E, F), A we get Line(A, E) != Line(E, F)
By in_imply_collinear on orthocenter(B, E, F), F, A we get collinear(A, F, orthocenter(B, E, F))
By line_containment_inequality on orthocenter(A, E, F), C, f we get C != orthocenter(A, E, F)
By in_imply_collinear on orthocenter(A, E, F), F, B we get collinear(B, F, orthocenter(A, E, F))
By in_imply_collinear on orthocenter(A, E, F), F, A we get collinear(A, F, orthocenter(A, E, F))
By in_imply_collinear on orthocenter(B, E, F), F, E we get collinear(E, F, orthocenter(B, E, F))
By in_imply_collinear on orthocenter(A, E, F), E, F we get collinear(E, F, orthocenter(A, E, F))
By line_containment_inequality on orthocenter(B, E, F), B, Line(E, F) we get B != orthocenter(B, E, F)
By in_imply_collinear on orthocenter(B, E, F), B, A we get collinear(A, B, orthocenter(B, E, F))
By in_imply_collinear on orthocenter(B, E, F), F, B we get collinear(B, F, orthocenter(B, E, F))
By parallel_line_angles_v1 on A, B, D, E we get parallel(Line(A, B), Line(D, E))
By altitude_definition on E, F, B, Line(C, E) we get Line(C, E) == altitude(E, B, F)
By line_inequality on altitude(E, C, D), f, E we get f != altitude(E, C, D)
By line_inequality on Line(B, E), Line(C, D), E we get Line(B, E) != Line(C, D)
By line_inequality on altitude(F, A, E), Line(A, C), F we get Line(A, C) != altitude(F, A, E)
By line_containment_inequality on orthocenter(C, D, E), D, Line(C, E) we get D != orthocenter(C, D, E)
By line_inequality on altitude(F, A, E), Line(A, D), F we get Line(A, D) != altitude(F, A, E)
By parallel_line_angles_v1 on E, D, A, F we get parallel(Line(A, F), Line(D, E))
By double_perpendicular_and_parallel_v0 on f, Line(C, E), g we get parallel(f, g)
By line_inequality on altitude(F, B, E), Line(B, C), F we get Line(B, C) != altitude(F, B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on D, A, E we get D not in Line(A, E)
By line_inequality on altitude(F, A, E), Line(C, D), F we get Line(C, D) != altitude(F, A, E)
By line_inequality on Line(B, E), Line(A, C), B we get Line(A, C) != Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on D, E, B we get D not in Line(B, E)
By line_containment_inequality on orthocenter(C, D, E), F, g we get F != orthocenter(C, D, E)
By line_containment_inequality on orthocenter(C, D, E), B, Line(C, E) we get B != orthocenter(C, D, E)
By not_in_line_equivalent_to_not_collinear_v0_r on F, B, E we get F not in Line(B, E)
By line_containment_inequality on orthocenter(A, E, F), D, f we get D != orthocenter(A, E, F)
By perpendicular_angle_conditions_v0 on F, E, D we get angle(F, E, D) == orientation(D, F, E) mod 360
By altitude_definition on E, F, A, Line(C, E) we get Line(C, E) == altitude(E, A, F)
By perpendicular_angle_conditions_v0 on D, E, F we get angle(D, E, F) == orientation(D, E, F) mod 360
By line_inequality on Line(A, E), Line(B, D), E we get Line(A, E) != Line(B, D)
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, A we get G not in Line(A, E)
By line_inequality on altitude(E, C, D), Line(B, D), E we get Line(B, D) != altitude(E, C, D)
By not_in_line_equivalent_to_not_collinear_v0_r on F, A, E we get F not in Line(A, E)
By line_containment_inequality on orthocenter(B, E, F), E, f we get E != orthocenter(B, E, F)
By line_inequality on Line(B, E), g, B we get g != Line(B, E)
By line_inequality on altitude(F, B, E), Line(A, D), F we get Line(A, D) != altitude(F, B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on B, A, E we get B not in Line(A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on G, E, B we get G not in Line(B, E)
By line_inequality on Line(B, E), Line(A, D), E we get Line(A, D) != Line(B, E)
By line_inequality on altitude(E, C, D), Line(C, D), E we get Line(C, D) != altitude(E, C, D)
By line_inequality on Line(A, E), Line(B, C), A we get Line(A, E) != Line(B, C)
By line_containment_inequality on orthocenter(C, D, E), C, g we get C != orthocenter(C, D, E)
By line_inequality on Line(B, E), Line(C, F), B we get Line(B, E) != Line(C, F)
By line_containment_inequality on orthocenter(B, E, F), D, f we get D != orthocenter(B, E, F)
By line_inequality on altitude(F, B, E), g, F we get g != altitude(F, B, E)
By line_inequality on altitude(F, A, E), g, F we get g != altitude(F, A, E)
By not_in_line_equivalent_to_not_collinear_v0_r on C, B, E we get C not in Line(B, E)
By line_containment_inequality on orthocenter(B, E, F), G, f we get G != orthocenter(B, E, F)
By line_inequality on Line(B, E), Line(E, F), B we get Line(B, E) != Line(E, F)
By line_inequality on Line(A, E), g, A we get g != Line(A, E)
By line_containment_inequality on orthocenter(A, E, F), A, Line(E, F) we get A != orthocenter(A, E, F)
By line_inequality on Line(A, E), Line(C, E), A we get Line(A, E) != Line(C, E)
By line_inequality on Line(A, E), Line(C, F), A we get Line(A, E) != Line(C, F)
By line_inequality on altitude(F, B, E), Line(C, D), F we get Line(C, D) != altitude(F, B, E)
By line_containment_inequality on orthocenter(C, D, E), G, g we get G != orthocenter(C, D, E)
By line_containment_inequality on orthocenter(A, E, F), G, f we get G != orthocenter(A, E, F)
By line_inequality on Line(B, E), f, E we get f != Line(B, E)
By not_in_line_equivalent_to_not_collinear_v0_r on A, E, B we get A not in Line(B, E)
By line_inequality on Line(A, E), Line(C, D), A we get Line(A, E) != Line(C, D)
By line_containment_inequality on orthocenter(C, D, E), A, g we get A != orthocenter(C, D, E)
By line_inequality on Line(A, E), Line(A, D), E we get Line(A, D) != Line(A, E)
By line_containment_inequality on orthocenter(B, E, F), C, f we get C != orthocenter(B, E, F)
By line_inequality on altitude(E, C, D), Line(B, C), E we get Line(B, C) != altitude(E, C, D)
By line_inequality on Line(A, E), Line(A, C), E we get Line(A, C) != Line(A, E)
By line_containment_inequality on orthocenter(A, E, F), B, Line(E, F) we get B != orthocenter(A, E, F)
By line_inequality on altitude(F, A, E), Line(B, C), F we get Line(B, C) != altitude(F, A, E)
By line_containment_inequality on orthocenter(B, E, F), A, Line(E, F) we get A != orthocenter(B, E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on C, E, A we get C not in Line(A, E)
By line_inequality on Line(A, E), f, E we get f != Line(A, E)
By line_inequality on altitude(E, C, D), Line(A, C), E we get Line(A, C) != altitude(E, C, D)
By line_inequality on altitude(E, C, D), Line(A, D), E we get Line(A, D) != altitude(E, C, D)
By line_inequality on Line(B, E), Line(B, C), E we get Line(B, C) != Line(B, E)
By line_inequality on altitude(F, B, E), Line(B, D), F we get Line(B, D) != altitude(F, B, E)
By line_inequality on Line(B, E), Line(B, D), E we get Line(B, D) != Line(B, E)
By line_inequality on altitude(F, B, E), Line(A, C), F we get Line(A, C) != altitude(F, B, E)
By line_inequality on Line(B, E), Line(C, E), B we get Line(B, E) != Line(C, E)
By line_inequality on altitude(F, A, E), Line(B, D), F we get Line(B, D) != altitude(F, A, E)
By line_containment_inequality on orthocenter(A, E, F), E, f we get E != orthocenter(A, E, F)
By tangent_chord_angle_v0 on D, A, B, E we get tangent(Line(D, E), Circle(A, B, D))
By perpendicular_lines_draw_intersection on g, Line(E, F) we get exists(line_intersection(g, Line(E, F)))
By perpendicular_lines_draw_intersection on altitude(F, B, E), Line(B, E) we get exists(line_intersection(Line(B, E), altitude(F, B, E)))
By perpendicular_lines_draw_intersection on Line(A, E), altitude(F, A, E) we get exists(line_intersection(Line(A, E), altitude(F, A, E)))
By perpendicular_lines_draw_intersection on f, Line(C, E) we get exists(line_intersection(f, Line(C, E)))
By perpendicular_lines_draw_intersection on Line(C, D), altitude(E, C, D) we get exists(line_intersection(Line(C, D), altitude(E, C, D)))
By altitude_definition on A, C, E, f we get f == altitude(A, C, E)
By altitude_definition on C, F, A, Line(C, E) we get Line(C, E) == altitude(C, A, F)
By altitude_definition on B, C, E, f we get f == altitude(B, C, E)
By altitude_definition on C, F, B, Line(C, E) we get Line(C, E) == altitude(C, B, F)
By altitude_definition on D, E, F, g we get g == altitude(D, E, F)
By altitude_definition on C, B, A, Line(C, E) we get Line(C, E) == altitude(C, A, B)
By altitude_definition on F, E, D, Line(E, F) we get Line(E, F) == altitude(F, D, E)
By line_definition on C, F, Line(C, E) we get Line(C, E) == Line(C, F)
By line_intersection_definition on A, Line(A, E), Line(A, C) we get A == line_intersection(Line(A, C), Line(A, E))
By line_intersection_definition on B, Line(B, D), Line(B, E) we get B == line_intersection(Line(B, D), Line(B, E))
By line_intersection_definition on E, Line(C, E), Line(B, E) we get E == line_intersection(Line(B, E), Line(C, E))
By line_intersection_definition on A, Line(A, E), f we get A == line_intersection(f, Line(A, E))
By perpendicular_line_definition on line_intersection(Line(B, E), altitude(F, B, E)), Line(B, E), altitude(F, B, E) we get Line(B, E) == perpendicular_line(line_intersection(Line(B, E), altitude(F, B, E)), altitude(F, B, E))
By line_intersection_definition on E, Line(A, E), g we get E == line_intersection(g, Line(A, E))
By perpendicular_line_definition on line_intersection(Line(C, D), altitude(E, C, D)), Line(C, D), altitude(E, C, D) we get Line(C, D) == perpendicular_line(line_intersection(Line(C, D), altitude(E, C, D)), altitude(E, C, D))
By perpendicular_line_definition on line_intersection(Line(A, E), altitude(F, A, E)), altitude(F, A, E), Line(A, E) we get altitude(F, A, E) == perpendicular_line(line_intersection(Line(A, E), altitude(F, A, E)), Line(A, E))
By perpendicular_line_definition on line_intersection(Line(C, D), altitude(E, C, D)), altitude(E, C, D), Line(C, D) we get altitude(E, C, D) == perpendicular_line(line_intersection(Line(C, D), altitude(E, C, D)), Line(C, D))
By line_intersection_definition on B, Line(B, C), Line(B, E) we get B == line_intersection(Line(B, C), Line(B, E))
By perpendicular_line_definition on line_intersection(Line(B, E), altitude(F, B, E)), altitude(F, B, E), Line(B, E) we get altitude(F, B, E) == perpendicular_line(line_intersection(Line(B, E), altitude(F, B, E)), Line(B, E))
By line_intersection_definition on E, Line(B, E), g we get E == line_intersection(g, Line(B, E))
By line_intersection_definition on A, Line(A, D), Line(A, E) we get A == line_intersection(Line(A, D), Line(A, E))
By line_intersection_definition on B, f, Line(B, E) we get B == line_intersection(f, Line(B, E))
By line_intersection_definition on E, Line(C, E), Line(A, E) we get E == line_intersection(Line(A, E), Line(C, E))
By perpendicular_line_definition on line_intersection(Line(A, E), altitude(F, A, E)), Line(A, E), altitude(F, A, E) we get Line(A, E) == perpendicular_line(line_intersection(Line(A, E), altitude(F, A, E)), altitude(F, A, E))
By same_angle_converse_v0 on E, F, C, D we get collinear(C, E, F)
By parallel_line_definition on B, f, g we get f == parallel_line(B, g)
By parallel_line_definition on A, f, g we get f == parallel_line(A, g)
By parallel_line_definition on F, f, g we get f == parallel_line(F, g)
By parallel_line_definition on D, g, f we get g == parallel_line(D, f)
By parallel_line_definition on E, g, f we get g == parallel_line(E, f)
By orthocenter_concurrency on F, D, E we get orthocenter(D, E, F) in altitude(F, D, E), orthocenter(D, E, F) in altitude(D, E, F), orthocenter(D, E, F) in altitude(E, D, F)
By in_imply_collinear on line_intersection(Line(C, D), altitude(E, C, D)), D, C we get collinear(C, D, line_intersection(Line(C, D), altitude(E, C, D)))
By in_imply_collinear on line_intersection(Line(B, E), altitude(F, B, E)), E, B we get collinear(B, E, line_intersection(Line(B, E), altitude(F, B, E)))
By in_imply_collinear on line_intersection(Line(A, E), altitude(F, A, E)), A, E we get collinear(A, E, line_intersection(Line(A, E), altitude(F, A, E)))
By line_containment_inequality on line_intersection(Line(C, D), altitude(E, C, D)), A, Line(C, D) we get A != line_intersection(Line(C, D), altitude(E, C, D))
By line_inequality on Line(B, E), Line(A, E), B we get Line(A, E) != Line(B, E)
By line_containment_inequality on line_intersection(Line(B, E), altitude(F, B, E)), A, Line(B, E) we get A != line_intersection(Line(B, E), altitude(F, B, E))
By line_containment_inequality on line_intersection(Line(B, E), altitude(F, B, E)), D, Line(B, E) we get D != line_intersection(Line(B, E), altitude(F, B, E))
By line_circle_intersection_has_at_most_two_points_0 on A, B, F, Circle(A, B, D) we get F not in Circle(A, B, D)
By line_inequality on altitude(F, A, E), Line(B, E), F we get Line(B, E) != altitude(F, A, E)
By line_containment_inequality on line_intersection(Line(A, E), altitude(F, A, E)), C, Line(A, E) we get C != line_intersection(Line(A, E), altitude(F, A, E))
By line_containment_inequality on line_intersection(Line(A, E), altitude(F, A, E)), G, Line(A, E) we get G != line_intersection(Line(A, E), altitude(F, A, E))
By line_containment_inequality on line_intersection(Line(C, D), altitude(E, C, D)), B, Line(C, D) we get B != line_intersection(Line(C, D), altitude(E, C, D))
By line_containment_inequality on line_intersection(Line(C, D), altitude(E, C, D)), G, Line(C, D) we get G != line_intersection(Line(C, D), altitude(E, C, D))
By line_containment_inequality on line_intersection(Line(C, D), altitude(E, C, D)), E, Line(C, D) we get E != line_intersection(Line(C, D), altitude(E, C, D))
By line_containment_inequality on line_intersection(Line(B, E), altitude(F, B, E)), G, Line(B, E) we get G != line_intersection(Line(B, E), altitude(F, B, E))
By line_containment_inequality on line_intersection(Line(A, E), altitude(F, A, E)), D, Line(A, E) we get D != line_intersection(Line(A, E), altitude(F, A, E))
By line_containment_inequality on line_intersection(Line(A, E), altitude(F, A, E)), B, Line(A, E) we get B != line_intersection(Line(A, E), altitude(F, A, E))
By line_inequality on altitude(F, B, E), Line(A, E), F we get Line(A, E) != altitude(F, B, E)
By line_containment_inequality on line_intersection(Line(B, E), altitude(F, B, E)), F, Line(B, E) we get F != line_intersection(Line(B, E), altitude(F, B, E))
By line_inequality on altitude(F, A, E), Line(A, E), F we get Line(A, E) != altitude(F, A, E)
By line_containment_inequality on line_intersection(Line(A, E), altitude(F, A, E)), F, Line(A, E) we get F != line_intersection(Line(A, E), altitude(F, A, E))
By line_inequality on altitude(F, B, E), Line(B, E), F we get Line(B, E) != altitude(F, B, E)
By line_containment_inequality on line_intersection(Line(B, E), altitude(F, B, E)), C, Line(B, E) we get C != line_intersection(Line(B, E), altitude(F, B, E))
By line_containment_inequality on line_intersection(Line(C, D), altitude(E, C, D)), F, Line(C, D) we get F != line_intersection(Line(C, D), altitude(E, C, D))
By external_angle_bisector_definition_v0_r on F, D, F, E we get Line(D, E) == external_angle_bisector(F, E, F)
By parallel_line_angles_reverse_v1 on D, E, B, F we get angle(D, E, B) == angle(F, B, E) mod 360
By parallel_line_angles_reverse_v1 on D, E, B, A we get angle(A, B, E) == angle(D, E, B) mod 360
By power_of_a_point_in_circle on A, Circle(A, B, D) we get 0 == power_of_a_point(A, Circle(A, B, D))
By parallel_line_angles_reverse_v1 on D, E, A, F we get angle(D, E, A) == angle(F, A, E) mod 360
By external_angle_bisector_definition_v0_r on C, D, F, E we get Line(D, E) == external_angle_bisector(C, E, F)
By power_of_a_point_on_circle on D, Circle(A, B, D) we get 0 == power_of_a_point(D, Circle(A, B, D))
By parallel_line_angles_reverse_v3 on D, E, A, B we get angle(D, E, A) == angle(B, A, E) + 180 mod 360
By reverse_direction on B, E we get 180 == direction(B, E) - direction(E, B) mod 360
By parallel_line_angles_reverse_v2 on B, A, E, D we get angle(B, A, E) == angle(D, E, A) + 180 mod 360
By power_of_a_point_in_circle on B, Circle(A, B, D) we get 0 == power_of_a_point(B, Circle(A, B, D))
By reverse_direction on A, E we get 180 == direction(A, E) - direction(E, A) mod 360
By draw_point_of_tangency on g, Circle(A, B, D) we get exists(line_circle_tangent_point(g, Circle(A, B, D)))
By power_of_a_point_tangent on E, D, Circle(A, B, D) we get 2 * log(distance(D, E)) == log(power_of_a_point(E, Circle(A, B, D)))
By line_definition on E, line_intersection(Line(C, D), altitude(E, C, D)), altitude(E, C, D) we get altitude(E, C, D) == Line(E, line_intersection(Line(C, D), altitude(E, C, D)))
By line_definition on F, line_intersection(Line(A, E), altitude(F, A, E)), altitude(F, A, E) we get altitude(F, A, E) == Line(F, line_intersection(Line(A, E), altitude(F, A, E)))
By line_definition on F, line_intersection(Line(B, E), altitude(F, B, E)), altitude(F, B, E) we get altitude(F, B, E) == Line(F, line_intersection(Line(B, E), altitude(F, B, E)))
By line_intersection_definition on orthocenter(D, E, F), g, Line(C, E) we get orthocenter(D, E, F) == line_intersection(g, Line(C, E))
By line_definition on E, G, Line(C, E) we get Line(C, E) == Line(E, G)
By concurrent_sufficient_conditions on Line(B, E), Line(A, E), Line(C, E) we get concurrent(Line(A, E), Line(B, E), Line(C, E))
By perpendicular_line_definition on orthocenter(D, E, F), g, Line(C, E) we get g == perpendicular_line(orthocenter(D, E, F), Line(C, E))
By perpendicular_line_definition on orthocenter(D, E, F), altitude(E, D, F), Line(D, F) we get altitude(E, D, F) == perpendicular_line(orthocenter(D, E, F), Line(D, F))
By line_intersection_definition on E, Line(A, E), Line(B, E) we get E == line_intersection(Line(A, E), Line(B, E))
By concurrent_sufficient_conditions on Line(A, E), Line(B, E), Line(C, E) we get concurrent(Line(A, E), Line(B, E), Line(C, E))
By perpendicular_line_definition on orthocenter(D, E, F), Line(C, E), f we get Line(C, E) == perpendicular_line(orthocenter(D, E, F), f)
By perpendicular_line_definition on G, Line(C, E), f we get Line(C, E) == perpendicular_line(G, f)
By concurrent_sufficient_conditions on Line(A, E), Line(B, E), g we get concurrent(g, Line(A, E), Line(B, E))
By perpendicular_line_definition on D, Line(D, F), altitude(E, D, F) we get Line(D, F) == perpendicular_line(D, altitude(E, D, F))
By perpendicular_line_definition on line_circle_tangent_point(g, Circle(A, B, D)), g, Line(C, E) we get g == perpendicular_line(line_circle_tangent_point(g, Circle(A, B, D)), Line(C, E))
By concurrent_sufficient_conditions on Line(B, E), Line(A, E), g we get concurrent(g, Line(A, E), Line(B, E))
By perpendicular_line_definition on orthocenter(D, E, F), Line(C, E), g we get Line(C, E) == perpendicular_line(orthocenter(D, E, F), g)
By perpendicular_line_definition on G, Line(C, E), g we get Line(C, E) == perpendicular_line(G, g)
By perpendicular_line_definition on F, Line(D, F), altitude(E, D, F) we get Line(D, F) == perpendicular_line(F, altitude(E, D, F))
By line_unique_intersection_v0 on Line(C, E), g, E, orthocenter(D, E, F) we get E == orthocenter(D, E, F)
By perpendicular_direction_conditions_v0_r on C, G, F, B we get 180 == 2 * direction(C, G) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on F, B, C, G we get 180 == 2 * direction(F, B) - 2 * direction(C, G) mod 360
By same_angle_v2 on C, F, E, D we get angle(F, C, D) == angle(E, C, D) + 180 mod 360
By perpendicular_direction_conditions_v0_r on C, F, E, D we get 180 == 2 * direction(C, F) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on F, C, F, A we get 180 == 2 * direction(F, C) - 2 * direction(F, A) mod 360
By same_angle_v1 on F, C, E, B we get angle(C, F, B) == angle(E, F, B) mod 360
By perpendicular_direction_conditions_v0_r on F, G, B, F we get 180 == 2 * direction(F, G) - 2 * direction(B, F) mod 360
By same_angle_v1 on F, C, E, A we get angle(C, F, A) == angle(E, F, A) mod 360
By same_angle_v0 on E, C, F, A we get angle(C, E, A) == angle(F, E, A) mod 360
By same_angle_v2 on C, F, E, A we get angle(F, C, A) == angle(E, C, A) + 180 mod 360
By perpendicular_direction_conditions_v0_r on E, D, C, F we get 180 == 2 * direction(E, D) - 2 * direction(C, F) mod 360
By same_angle_v2 on C, F, E, B we get angle(F, C, B) == angle(E, C, B) + 180 mod 360
By perpendicular_direction_conditions_v0_r on F, A, F, G we get 180 == 2 * direction(F, A) - 2 * direction(F, G) mod 360
By same_angle_v0 on E, C, F, B we get angle(C, E, B) == angle(F, E, B) mod 360
By perpendicular_direction_conditions_v0_r on G, F, F, B we get 180 == 2 * direction(G, F) - 2 * direction(F, B) mod 360
By between_implies_orientation on line_intersection(Line(B, E), altitude(F, B, E)), F, G, C we get orientation(C, line_intersection(Line(B, E), altitude(F, B, E)), G) == orientation(F, G, line_intersection(Line(B, E), altitude(F, B, E))) mod 360, orientation(C, line_intersection(Line(B, E), altitude(F, B, E)), F) == orientation(F, G, line_intersection(Line(B, E), altitude(F, B, E))) mod 360
By perpendicular_direction_conditions_v0_r on F, A, F, C we get 180 == 2 * direction(F, A) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on C, F, F, B we get 180 == 2 * direction(C, F) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on D, E, F, G we get 180 == 2 * direction(D, E) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on G, F, F, A we get 180 == 2 * direction(G, F) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on G, F, D, E we get 180 == 2 * direction(G, F) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on C, F, A, F we get 180 == 2 * direction(C, F) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on F, C, A, B we get 180 == 2 * direction(F, C) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on F, B, G, C we get 180 == 2 * direction(F, B) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on A, B, G, F we get 180 == 2 * direction(A, B) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on A, F, C, G we get 180 == 2 * direction(A, F) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on D, E, G, F we get 180 == 2 * direction(D, E) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on G, C, E, D we get 180 == 2 * direction(G, C) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on B, F, C, G we get 180 == 2 * direction(B, F) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on B, F, F, G we get 180 == 2 * direction(B, F) - 2 * direction(F, G) mod 360
By between_implies_orientation on line_intersection(Line(B, E), altitude(F, B, E)), C, G, F we get orientation(C, G, line_intersection(Line(B, E), altitude(F, B, E))) == orientation(F, line_intersection(Line(B, E), altitude(F, B, E)), G) mod 360, orientation(C, F, line_intersection(Line(B, E), altitude(F, B, E))) == orientation(C, G, line_intersection(Line(B, E), altitude(F, B, E))) mod 360
By perpendicular_direction_conditions_v0_r on G, F, A, B we get 180 == 2 * direction(G, F) - 2 * direction(A, B) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(A, E), altitude(F, A, E)), G, C, F we get orientation(C, F, line_intersection(Line(A, E), altitude(F, A, E))) == orientation(C, G, line_intersection(Line(A, E), altitude(F, A, E))) mod 360
By perpendicular_direction_conditions_v0_r on A, B, C, F we get 180 == 2 * direction(A, B) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on D, E, F, C we get 180 == 2 * direction(D, E) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on C, G, B, F we get 180 == 2 * direction(C, G) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on D, E, C, F we get 180 == 2 * direction(D, E) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on C, F, B, F we get 180 == 2 * direction(C, F) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on C, G, E, D we get 180 == 2 * direction(C, G) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on E, D, F, C we get 180 == 2 * direction(E, D) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on D, E, G, C we get 180 == 2 * direction(D, E) - 2 * direction(G, C) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(A, E), altitude(F, A, E)), C, F, G we get orientation(C, line_intersection(Line(A, E), altitude(F, A, E)), F) == orientation(F, G, line_intersection(Line(A, E), altitude(F, A, E))) mod 360
By perpendicular_direction_conditions_v0_r on F, G, F, B we get 180 == 2 * direction(F, G) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on C, F, B, A we get 180 == 2 * direction(C, F) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on F, C, B, F we get 180 == 2 * direction(F, C) - 2 * direction(B, F) mod 360
By collinear_and_not_between_implies_orientation on line_intersection(Line(C, D), altitude(E, C, D)), A, B, F we get orientation(A, line_intersection(Line(C, D), altitude(E, C, D)), B) == orientation(B, F, line_intersection(Line(C, D), altitude(E, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on B, F, G, F we get 180 == 2 * direction(B, F) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on A, B, F, C we get 180 == 2 * direction(A, B) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on B, A, C, G we get 180 == 2 * direction(B, A) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on A, F, C, F we get 180 == 2 * direction(A, F) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on G, C, F, A we get 180 == 2 * direction(G, C) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on A, F, F, C we get 180 == 2 * direction(A, F) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on G, C, A, B we get 180 == 2 * direction(G, C) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on C, F, D, E we get 180 == 2 * direction(C, F) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on F, B, C, F we get 180 == 2 * direction(F, B) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on F, G, F, A we get 180 == 2 * direction(F, G) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on G, F, A, F we get 180 == 2 * direction(G, F) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on B, F, C, F we get 180 == 2 * direction(B, F) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on F, G, D, E we get 180 == 2 * direction(F, G) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on E, D, G, C we get 180 == 2 * direction(E, D) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on A, B, C, G we get 180 == 2 * direction(A, B) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on F, B, F, G we get 180 == 2 * direction(F, B) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on G, C, B, A we get 180 == 2 * direction(G, C) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on G, C, B, F we get 180 == 2 * direction(G, C) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on B, A, G, C we get 180 == 2 * direction(B, A) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on C, G, A, F we get 180 == 2 * direction(C, G) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on F, B, F, C we get 180 == 2 * direction(F, B) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on F, A, C, G we get 180 == 2 * direction(F, A) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on B, A, F, G we get 180 == 2 * direction(B, A) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on B, A, F, C we get 180 == 2 * direction(B, A) - 2 * direction(F, C) mod 360
By projection_definition on C, F, f we get F == projection(C, f)
By perpendicular_direction_conditions_v0_r on C, F, F, A we get 180 == 2 * direction(C, F) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on C, G, A, B we get 180 == 2 * direction(C, G) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on F, C, D, E we get 180 == 2 * direction(F, C) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on G, C, A, F we get 180 == 2 * direction(G, C) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on B, F, F, C we get 180 == 2 * direction(B, F) - 2 * direction(F, C) mod 360
By perpendicular_direction_conditions_v0_r on F, G, B, A we get 180 == 2 * direction(F, G) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on B, A, C, F we get 180 == 2 * direction(B, A) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on C, G, D, E we get 180 == 2 * direction(C, G) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on G, F, B, F we get 180 == 2 * direction(G, F) - 2 * direction(B, F) mod 360
By perpendicular_direction_conditions_v0_r on C, G, F, A we get 180 == 2 * direction(C, G) - 2 * direction(F, A) mod 360
By perpendicular_direction_conditions_v0_r on F, C, E, D we get 180 == 2 * direction(F, C) - 2 * direction(E, D) mod 360
By between_implies_orientation on line_intersection(Line(C, D), altitude(E, C, D)), B, A, F we get orientation(A, F, line_intersection(Line(C, D), altitude(E, C, D))) == orientation(A, line_intersection(Line(C, D), altitude(E, C, D)), B) mod 360, orientation(A, line_intersection(Line(C, D), altitude(E, C, D)), B) == orientation(B, F, line_intersection(Line(C, D), altitude(E, C, D))) mod 360
By perpendicular_direction_conditions_v0_r on F, B, G, F we get 180 == 2 * direction(F, B) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on G, C, D, E we get 180 == 2 * direction(G, C) - 2 * direction(D, E) mod 360
By perpendicular_direction_conditions_v0_r on F, A, C, F we get 180 == 2 * direction(F, A) - 2 * direction(C, F) mod 360
By perpendicular_direction_conditions_v0_r on F, G, A, F we get 180 == 2 * direction(F, G) - 2 * direction(A, F) mod 360
By perpendicular_direction_conditions_v0_r on F, G, A, B we get 180 == 2 * direction(F, G) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on E, D, C, G we get 180 == 2 * direction(E, D) - 2 * direction(C, G) mod 360
By between_implies_orientation on line_intersection(Line(A, E), altitude(F, A, E)), F, G, C we get orientation(C, line_intersection(Line(A, E), altitude(F, A, E)), G) == orientation(F, G, line_intersection(Line(A, E), altitude(F, A, E))) mod 360, orientation(C, line_intersection(Line(A, E), altitude(F, A, E)), F) == orientation(F, G, line_intersection(Line(A, E), altitude(F, A, E))) mod 360
By perpendicular_direction_conditions_v0_r on E, D, F, G we get 180 == 2 * direction(E, D) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on A, B, G, C we get 180 == 2 * direction(A, B) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on G, F, B, A we get 180 == 2 * direction(G, F) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on F, C, B, A we get 180 == 2 * direction(F, C) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on C, G, B, A we get 180 == 2 * direction(C, G) - 2 * direction(B, A) mod 360
By perpendicular_direction_conditions_v0_r on B, F, G, C we get 180 == 2 * direction(B, F) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on G, F, E, D we get 180 == 2 * direction(G, F) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on E, D, G, F we get 180 == 2 * direction(E, D) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on A, F, G, C we get 180 == 2 * direction(A, F) - 2 * direction(G, C) mod 360
By perpendicular_direction_conditions_v0_r on B, A, G, F we get 180 == 2 * direction(B, A) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on G, C, F, B we get 180 == 2 * direction(G, C) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on F, C, F, B we get 180 == 2 * direction(F, C) - 2 * direction(F, B) mod 360
By perpendicular_direction_conditions_v0_r on F, C, A, F we get 180 == 2 * direction(F, C) - 2 * direction(A, F) mod 360
By between_implies_orientation on line_intersection(Line(C, D), altitude(E, C, D)), F, A, B we get orientation(A, B, line_intersection(Line(C, D), altitude(E, C, D))) == orientation(A, line_intersection(Line(C, D), altitude(E, C, D)), F) mod 360, orientation(A, line_intersection(Line(C, D), altitude(E, C, D)), F) == orientation(B, line_intersection(Line(C, D), altitude(E, C, D)), F) mod 360
By perpendicular_direction_conditions_v0_r on A, F, G, F we get 180 == 2 * direction(A, F) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on F, A, G, F we get 180 == 2 * direction(F, A) - 2 * direction(G, F) mod 360
By perpendicular_direction_conditions_v0_r on D, E, C, G we get 180 == 2 * direction(D, E) - 2 * direction(C, G) mod 360
By perpendicular_direction_conditions_v0_r on A, B, F, G we get 180 == 2 * direction(A, B) - 2 * direction(F, G) mod 360
By between_implies_orientation on line_intersection(Line(A, E), altitude(F, A, E)), C, G, F we get orientation(C, G, line_intersection(Line(A, E), altitude(F, A, E))) == orientation(F, line_intersection(Line(A, E), altitude(F, A, E)), G) mod 360, orientation(C, F, line_intersection(Line(A, E), altitude(F, A, E))) == orientation(C, G, line_intersection(Line(A, E), altitude(F, A, E))) mod 360
By perpendicular_direction_conditions_v0_r on C, F, A, B we get 180 == 2 * direction(C, F) - 2 * direction(A, B) mod 360
By perpendicular_direction_conditions_v0_r on F, G, E, D we get 180 == 2 * direction(F, G) - 2 * direction(E, D) mod 360
By perpendicular_direction_conditions_v0_r on A, F, F, G we get 180 == 2 * direction(A, F) - 2 * direction(F, G) mod 360
By perpendicular_direction_conditions_v0_r on F, A, G, C we get 180 == 2 * direction(F, A) - 2 * direction(G, C) mod 360
By parallel_line_definition on line_circle_tangent_point(g, Circle(A, B, D)), g, f we get g == parallel_line(line_circle_tangent_point(g, Circle(A, B, D)), f)
By parallel_line_definition on orthocenter(D, E, F), g, f we get g == parallel_line(orthocenter(D, E, F), f)
By same_angle_v1 on F, C, E, D we get angle(C, F, D) == angle(E, F, D) mod 360
By different_points_v1 on D, F we get 0 != distance(D, F)
By in_imply_collinear on E, G, F we get collinear(E, F, G)
By same_angle_v0 on F, B, A, D we get angle(A, F, D) == angle(B, F, D) mod 360
By same_angle_v1 on F, G, C, D we get angle(C, F, D) == angle(G, F, D) mod 360
By projection_definition on G, F, f we get F == projection(G, f)
By probably_between_and_collinear_implies_between on F, C, E we get between(E, C, F)
By external_angle_bisector_definition_v0 on A, C, B, F we get 180 == angle(A, F, C) + angle(B, F, C) mod 360
By in_imply_collinear on line_circle_tangent_point(g, Circle(A, B, D)), D, E we get collinear(D, E, line_circle_tangent_point(g, Circle(A, B, D)))
By in_imply_collinear on orthocenter(D, E, F), G, C we get collinear(C, G, orthocenter(D, E, F))
By in_imply_collinear on orthocenter(D, E, F), F, E we get collinear(E, F, orthocenter(D, E, F))
By line_containment_inequality on orthocenter(D, E, F), B, Line(C, E) we get B != orthocenter(D, E, F)
By in_imply_collinear on G, E, C we get collinear(C, E, G)
By perpendicular_angle_conditions_v0 on B, F, G we get angle(B, F, G) == orientation(B, F, G) mod 360
By line_inequality on Line(D, F), Line(A, D), F we get Line(A, D) != Line(D, F)
By in_imply_collinear on orthocenter(D, E, F), D, E we get collinear(D, E, orthocenter(D, E, F))
By in_imply_collinear on orthocenter(D, E, F), G, F we get collinear(F, G, orthocenter(D, E, F))
By in_imply_collinear on orthocenter(D, E, F), E, C we get collinear(C, E, orthocenter(D, E, F))
By in_imply_collinear on orthocenter(D, E, F), C, F we get collinear(C, F, orthocenter(D, E, F))
By collinear_definition on F, E, C we get E in Line(C, F), C in Line(E, F), Line(C, F) == Line(E, F), 0 == 2 * angle(E, F, C) mod 360
By external_angle_bisector_definition_v0 on B, G, B, F we get 180 == angle(B, F, G) + angle(B, F, G) mod 360
By tangent_point_is_unique on line_circle_tangent_point(g, Circle(A, B, D)), D, Circle(A, B, D), g we get D == line_circle_tangent_point(g, Circle(A, B, D))
By external_angle_bisector_definition_v0 on A, G, A, F we get 180 == angle(A, F, G) + angle(A, F, G) mod 360
By internal_angle_bisector_definition_v0 on F, E, F, C we get angle(E, C, F) == angle(F, C, E) mod 360
By external_angle_bisector_definition_v0 on B, G, A, F we get 180 == angle(B, F, G) + angle(A, F, G) mod 360
By perpendicular_angle_conditions_v0 on C, F, B we get angle(C, F, B) == orientation(B, C, F) mod 360
By in_imply_concyclic on A, B, D, line_circle_tangent_point(g, Circle(A, B, D)) we get concyclic(A, B, D, line_circle_tangent_point(g, Circle(A, B, D)))
By collinear_definition on F, C, E we get C in Line(E, F), E in Line(C, F), Line(C, F) == Line(E, F), 0 == 2 * angle(C, F, E) mod 360
By internal_angle_bisector_definition_v0 on G, E, G, F we get angle(E, F, G) == angle(G, F, E) mod 360
By collinear_definition on C, E, F we get E in Line(C, F), F in Line(C, E), Line(C, E) == Line(C, F), 0 == 2 * angle(E, C, F) mod 360
By collinear_definition on E, C, F we get C in Line(E, F), F in Line(C, E), Line(C, E) == Line(E, F), 0 == 2 * angle(C, E, F) mod 360
By internal_angle_bisector_definition_v0 on C, E, C, F we get angle(C, F, E) == angle(E, F, C) mod 360
By perpendicular_angle_conditions_v0 on B, F, C we get angle(B, F, C) == orientation(B, F, C) mod 360
By internal_angle_bisector_definition_v0 on G, E, G, C we get angle(E, C, G) == angle(G, C, E) mod 360
By external_angle_bisector_definition_v0 on B, C, B, F we get 180 == angle(B, F, C) + angle(B, F, C) mod 360
By perpendicular_angle_conditions_v0 on A, F, G we get angle(A, F, G) == orientation(A, F, G) mod 360
By external_angle_bisector_definition_v0 on A, C, A, F we get 180 == angle(A, F, C) + angle(A, F, C) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on E, D, F we get E not in Line(D, F)
By line_inequality on altitude(E, D, F), Line(A, D), E we get Line(A, D) != altitude(E, D, F)
By line_inequality on Line(D, F), Line(B, E), D we get Line(B, E) != Line(D, F)
By collinear_definition on C, F, E we get F in Line(C, E), E in Line(C, F), Line(C, E) == Line(C, F), 0 == 2 * angle(F, C, E) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on A, D, F we get A not in Line(D, F)
By line_inequality on Line(D, F), f, D we get f != Line(D, F)
By perpendicular_angle_conditions_v0 on G, F, A we get angle(G, F, A) == orientation(A, G, F) mod 360
By line_inequality on altitude(E, D, F), Line(C, D), E we get Line(C, D) != altitude(E, D, F)
By perpendicular_angle_conditions_v0 on C, F, A we get angle(C, F, A) == orientation(A, C, F) mod 360
By perpendicular_angle_conditions_v0 on G, F, B we get angle(G, F, B) == orientation(B, G, F) mod 360
By line_containment_inequality on line_circle_tangent_point(g, Circle(A, B, D)), F, g we get F != line_circle_tangent_point(g, Circle(A, B, D))
By collinear_definition on E, F, C we get F in Line(C, E), C in Line(E, F), Line(C, E) == Line(E, F), 0 == 2 * angle(F, E, C) mod 360
By not_in_line_equivalent_to_not_collinear_v0_r on G, F, D we get G not in Line(D, F)
By perpendicular_angle_conditions_v0 on A, F, C we get angle(A, F, C) == orientation(A, F, C) mod 360
By line_inequality on Line(D, F), Line(C, D), F we get Line(C, D) != Line(D, F)
By line_containment_inequality on line_circle_tangent_point(g, Circle(A, B, D)), C, g we get C != line_circle_tangent_point(g, Circle(A, B, D))
By line_inequality on Line(D, F), Line(A, E), F we get Line(A, E) != Line(D, F)
By line_containment_inequality on orthocenter(D, E, F), C, g we get C != orthocenter(D, E, F)
By line_inequality on Line(D, F), Line(B, D), F we get Line(B, D) != Line(D, F)
By not_in_line_equivalent_to_not_collinear_v0_r on B, D, F we get B not in Line(D, F)
By line_inequality on Line(D, F), Line(A, C), F we get Line(A, C) != Line(D, F)
By line_containment_inequality on orthocenter(D, E, F), D, Line(C, E) we get D != orthocenter(D, E, F)
By line_inequality on Line(D, F), g, F we get g != Line(D, F)
By line_inequality on altitude(E, D, F), Line(A, C), E we get Line(A, C) != altitude(E, D, F)
By line_containment_inequality on line_circle_tangent_point(g, Circle(A, B, D)), G, g we get G != line_circle_tangent_point(g, Circle(A, B, D))
By line_inequality on altitude(E, D, F), f, E we get f != altitude(E, D, F)
By line_containment_inequality on line_circle_tangent_point(g, Circle(A, B, D)), B, g we get B != line_circle_tangent_point(g, Circle(A, B, D))
By line_containment_inequality on orthocenter(D, E, F), G, g we get G != orthocenter(D, E, F)
By not_in_line_equivalent_to_not_collinear_v0_r on C, D, F we get C not in Line(D, F)
By line_inequality on Line(D, F), Line(B, C), D we get Line(B, C) != Line(D, F)
By line_containment_inequality on orthocenter(D, E, F), A, g we get A != orthocenter(D, E, F)
By line_containment_inequality on orthocenter(D, E, F), F, g we get F != orthocenter(D, E, F)
By line_inequality on Line(D, F), Line(C, E), D we get Line(C, E) != Line(D, F)
By line_containment_inequality on line_circle_tangent_point(g, Circle(A, B, D)), A, g we get A != line_circle_tangent_point(g, Circle(A, B, D))
By line_inequality on altitude(E, D, F), Line(B, C), E we get Line(B, C) != altitude(E, D, F)
By line_inequality on altitude(E, D, F), Line(B, D), E we get Line(B, D) != altitude(E, D, F)
By power_of_a_point_on_circle on line_circle_tangent_point(g, Circle(A, B, D)), Circle(A, B, D) we get 0 == power_of_a_point(line_circle_tangent_point(g, Circle(A, B, D)), Circle(A, B, D))
By perpendicular_lines_draw_intersection on altitude(E, D, F), Line(D, F) we get exists(line_intersection(Line(D, F), altitude(E, D, F)))
By altitude_definition on A, F, C, f we get f == altitude(A, C, F)
By parallel_line_angles_reverse_v0 on E, D, F, A we get angle(A, F, D) == angle(E, D, F) mod 360
By altitude_definition on G, A, B, Line(C, E) we get Line(C, E) == altitude(G, A, B)
By altitude_definition on A, F, G, f we get f == altitude(A, F, G)
By parallel_line_angles_reverse_v0 on B, F, D, E we get angle(B, F, D) == angle(E, D, F) mod 360
By altitude_definition on D, F, C, g we get g == altitude(D, C, F)
By altitude_definition on B, C, F, f we get f == altitude(B, C, F)
By altitude_definition on G, F, A, Line(C, E) we get Line(C, E) == altitude(G, A, F)
By altitude_definition on B, C, G, f we get f == altitude(B, C, G)
By altitude_definition on D, C, G, g we get g == altitude(D, C, G)
By altitude_definition on G, B, F, Line(C, E) we get Line(C, E) == altitude(G, B, F)
By altitude_definition on G, D, E, Line(C, E) we get Line(C, E) == altitude(G, D, E)
By power_of_a_point_definition on F, B, A, Circle(A, B, D) we get log(distance(B, F)) + log(distance(A, F)) == log(power_of_a_point(F, Circle(A, B, D)))
By altitude_definition on A, G, C, f we get f == altitude(A, C, G)
By altitude_definition on B, G, F, f we get f == altitude(B, F, G)
By altitude_definition on D, F, G, g we get g == altitude(D, F, G)
